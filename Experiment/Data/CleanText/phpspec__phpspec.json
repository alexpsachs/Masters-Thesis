{
    "phpspec": "Fixed in https://github.com/phpspec/phpspec/commit/cca8edb655a23b0a92ec03ca9110a60de79670cb\n. Fixed in https://github.com/MarcelloDuarte/phpspec/commit/b8d2868e250a9caf5896e2a9a88a00a732cba33b\n. Fixed at https://github.com/MarcelloDuarte/phpspec/commit/b787395cb683d479dbd498bbe0c4819fa5f57289\n. https://github.com/phpspec/phpspec/commit/ecd912ce95f8e0fe074a928cf9e8a5e296d73bde#diff-1\n. Implemented at https://github.com/phpspec/phpspec/commit/ac6084b76357db796b0ef2b910c766e5dff3eed7#src/PHPSpec/Console/Command.php\n. Implemented in https://github.com/phpspec/phpspec/commit/58e7e6258bd406c7d27ffea8255134be8ed4066c\n. Added in bfabb9f7b5dd6844b0c88c7751ca7b3a7409962e\n. Added in 73e0b6d2a1a3a9042d57362dacdb5d50ea3d968d\n. This feature adds too much complexity, forcing the classes to either be autoloaded by PHP_Expando or to use runkit. Those options are not very popular.\nI am closing this for now. I am hoping that 2.0 syntax would be good enough to suppress the need for this.\n. Added in phpspec/phpspec-mocks@251b13eb3bbeeb0e2428f9aaf1727e045eb575f3\n. Added in 63cc4d06fa3ddc76a7a3e36056d0ed7650e16e75\n. Fixed in https://github.com/phpspec/phpspec/commit/70331852cd3518a818969aaa4e90fbd6d3929c61\n. Fixed in https://github.com/MarcelloDuarte/phpspec/commit/b6b290c3bc722bca38c1dae278b973d245eb1fc1\n. Mike can you please add this issue in phpspec/phpspec-mocks?\n. Hi,\nThis appears to be the bug #20 reported and fixed https://github.com/phpspec/phpspec/pull/20.\nThe fix is in the develop branch. You can checkout that branch or wait for version 1.2.3 to be release next weekend.\nThanks,\nMarcello\n. merged\n. ",
    "MarcelloDuarte": "Mockery Argument Validation is equivalent we use at PHPSpec\n. Hi Amjad,\nThanks for contributing to PHPSpec.\nAs far as the change in phpspec.php. The problem only occurs if the installation is done via download. The pear installer will replace that by the pear path of the user. It would not work anyway because PHPSpec stays in the PHP include path and phpspec.php is copied into the bash executable $PATH. I am now thinking of a better solution since you have that problem.\nAs far as the other proposed change. I've cherry-picked your commit 5115209123ee12ba8435d18f3aa9b20c2935527e. Which has been merged into phpspec/develop and will be a part of the next release. Thanks for spotting that.\nKind regards, Marcello\n. It works for you, but it would break the build, that replaces that path during the creation of the pear package.\nMy solution would be using a flag instead of the path. Something like %pear_path%. So that the confusion don't arise again.\nBut the main point is the recommended way to install PHPSpec is through the pear installer using pear.phpspec.net channel\n. Thanks for contributing to PHPSpec.\nYour patch is now merged into develop.\nMarcello\n. In theory it is possible to pass a custom formatter with --formatter MyFormatter. This is how this is done in rspec. I haven't tried it with PHPSpec. You have to make sure the formatter file/class is accessible. You can plug Krumo into your formatter. I recommend you extend Progress or Html Formatter for that. Let me know if that works :)\nAlso, can I ask you to please ask questions in the mailing list instead of the issue tracker. So that others can benefit from this?\nThe mailing list is here: groups.google.com/group/phpspec-dev\nThanks\n. Can we see a gist of your NewBowlingGame.php?\n. You should call your file NewBowlingGameSpec.php. DescribeNewBowlingGame should also work, but the former is common in other Spec frameworks.\n. you need to require it somehow. PHPSpec autoload will not load the Cordova\\Bundle\\PhpSpecBundle\\Description\\Bowling class\n. Sorry andho, I can't reproduce.\nWarning: require_once(/home/likewise-open/ALLIEDINSURE/amjad/src/phpspec/src/PHPSpec/Mocks/Functions.php): failed to open stream: No such file or directory in /md/dev/php/simdal/simdal/tests/PHPSpec/AllSpecs.php on line 8 Call Stack: 0.0583 644424 1. {main}() /md/dev/php/simdal/simdal/tests/PHPSpec/AllSpecs.php:0 Fatal error: require_once(): Failed opening required '/home/likewise-open/ALLIEDINSURE/amjad/src/phpspec/src/PHPSpec/Mocks/Functions.php' (include_path='.:/usr/share/pear') in /md/dev/php/simdal/simdal/tests/PHPSpec/AllSpecs.php on line 8 Call Stack: 0.0583 644424 1. {main}() /md/dev/php/simdal/simdal/tests/PHPSpec/AllSpecs.php:0\nQuestion for you: why are you using \"isEqualTo\". This will cause PHPSpec to use a predicate matcher on beEqualTo, which is also a matcher. You are also not using \"should\" to set expectation. Can you try: $this->query->whereProperty('name')->should->beEqualTo('The Name'); instead?\nI don't know where the recursion is in this case. Can you also run this in the command line using -b or --backtrace and send it to me? Thanks.\n. Yeah, you're are right about what is causing the problem. After performing the match, PHPSpec tries to print a message to the user on failure. It uses var_export for that. Your actual value is an array with one SimDAL_Query_Where_Column object in it. When var_export hits your actual value it breaks because the object has a recursion in it: it keeps a reference to the SimDAL_Query object that holds a reference to the where column, creating recursion.\nSince the recursion is in the client code, I am not sure I should worry about replacing var_export with something that would survive the recursion problem. I should at least document this as a known issue in the documentation.\n. You can use the documentation formatter for that\n. Hi Mario,\nI identified the problem which is is_callable() in line 44 of InterceptorFactory triggers your autoloader.\nI've created a hotfix 298e82\nI will be releasing it shortly.\nThanks for contributing to PHPSpec.\nMarcello\n. I have this in my bootstrap:\nrequire_once 'Mockery/Loader.php';\nrequire_once 'Hamcrest/hamcrest.php';\n$loader = new \\Mockery\\Loader;\n$loader->register();\nAs suggested in the Mockery documentation. I considered adding it to PHPSpec setup, but that would force users having to have Mockery installed to use PHPSpec.\nThanks for bringing that up. I should probably stick this gotcha somewhere in the documentation.\nMarcello\n. composer is being added in 1.4. We can make it the default installation. There is a lot of documentation to update now :)\n. Hi xenji,\nI looked into this, but I don't know how to inject PHPSpec configuration/world object into PHPSpecTask. Do you have an idea? Should this not be a feature request at the Phing project?\nRegards,\nMarcello\n. I am closing this as I believe xenji's code has been merged and andhos is looking into extending what xenji did.\n. @UnknownHero nope. This is an old thread. The current version does not yet support a junit formatter.\n. Nah, I think it should be in the core. Just nobody started doing it yet. You can look at #164 to see how we developed the html formatter, as an example.\n. SpecHelper.php is used for that now\n. Hi Andho,\nSorry, I've been very busy lately.\nBootstrap part: This looks like a better idea idea then what you initially proposed, as the developer can specify whatever file as bootstrap. Where is the part of the code that actually requires the bootstrap file?\nFor the ArrayVal interceptor (for some reason I thought I had already fixed that): Maybe we want return return InterceptorFactory::create($this->_actualValue[$offset]) from offsetGet instead?\n. Yep, if you send the commits I can cherry-pick those\n. Hi Andho,\nI removed from the documentation for now b9f15dfa6c57152a2a795b616942149eab7e7c90\nI intend to add more matches or add a way to add 3rd parties matches like Hamcrest.\nMarcello\n. A similar patch has been submitted already and merged to develop. https://github.com/Lowgain/phpspec/commit/4a9ab3a43b08748198b7b4cef8ffd53485714add It will be deployed in the next release.\nThanks for contributing to PHPSpec\n. This issues has been dealt with and a fix was committed here https://github.com/phpspec/phpspec/commit/d27c522480736f80d2a51ae8175478fd86c068f2\nstdout is used to simplify testing. Instead of using a buffer I just mock stdout to check expected results.\n. Already fixed :) Boy, I need to release soon\nhttps://github.com/MarcelloDuarte/phpspec/commit/10436874308ec15e13489c0a075ab860810f6fd3\n. I develop at https://github.com/MarcelloDuarte/phpspec. The master there should be stable and contain some merges from hotfixes/mini releases. Develop is where I am working for what will go in the next minor release.\n. Fixed in 1.2 523d6c497990d5f363d19a1d07d543b926834468\n. Fixed in 8f819b003a0bac0a5721b2d621adac56e584dbef\n. @nrocy's code has been added\n. Implemented in 99a610df44647d8c8c9f6c6d43ba3f29030f59b5\n. This issue was created by Hanai Tohru in the mailing list. I just transcribed it here.\n. Fixed in 05c23709610db58e888451d1503d369c07f588f8. Being released at 1.4\n. Refactored a bit and amended phpspec-zend to not hardcode the matchers anymore. The generated SpecHelper.php by zend tool will take care of including the matchers now. This is in develop in phpspec-zend and will be released in 1.4 at the same time as phpspec 1.4 gets release.\n. Can you update us on this issue and #64? Other than these everything else is ready for tagging 1.4. Let me know.\n. Added in fd0d77f21a8a0912bfa8e761741a8d0d1321bff6 for 1.4\n. @cordoval any progress on this? I am planning on start on this one now. Did you do any work? \n. Added support for macros in fe0efeebeee4706220360d6df8df2f214b0f3e85\n. can you provide with an example?\n. Your fix seems to in master already 0c1d98cc42886020fcd9a5b3ec3c27dda81f3fb2.  I am closing this now. Thanks!\n. Thanks, I am merging it as a hotfix and will include in the next build. Hey @zeebinz, please don't be discouraged, we are a very small community and contribute when we find time.\n. I believe this is merged now, as composer has been released\n. This has been implemented in phpspec 1.4\n. Answered in http://stackoverflow.com/questions/11725013/how-to-user-throwexception-matcher-in-phpspec\n. I am adding the fix in 1.4.2. This is a case sensitivity issue with the matcher factory and got fixed here 1eff765cd3ca8ab48dd765f6bd9e188735ab3c89\n. Meanwhile if you can install phpspec with composer using the dev-master version.\n. @iteman does that actually fixes the issue? I see the new line character being used \"\\n\" in your fix. Since you are on it can you please replace the \"\\n\" with PHP_EOL and re-submit? thanks.\n. @iteman ok...\n@adrianmoya can you please check @iteman PR for us under Windows? thanks both.\n. @adrianmoya try leave an example empty. This is the use case in which this reflection call happens. Thanks.\n. @iteman can you please provide an example of a case where this error is produced? Whatever context you can give is much appreciated. Thanks.\n. Thanks all!\n. Are you sure? I saw it last week in my kids computer. I was trying to fix it in his machine, but I didn't get too far.\n. I don't see why not having a dot formatter. It is not as informative, but people are familiar with it. And it's not the default anyway. I +1 this one.\n. I am ok with this. Is there a PR that I missed?\n. @ciaranmcnulty huh? why?\n``` php\n<?php\npublic function beConstructedThrough($factoryMethod, array $arguments = array())\n{\n    if (method_exists($this->wrappedObject->getClassName(), $factoryMethod)) {\n        $factoryMethod = array($this->wrappedObject->getInstance(), $factoryMethod);\n    }         \n    $this->wrappedObject->beConstructedThrough($factoryMethod, $arguments);\n}\n\n``\n. getClassName should also work for that\n. The problem might be method_exists not liking $factoryMethod not being a straight forward name, e.g. array or closure... we need some specs for that :smile: \n. hmm... I guess I agree with Kuba. If you add the validation there this will impact some phpspec extensions which uses the container/factory aliases to create the class. @cakper can you please see if you can move your validation to [PSR0Locator](https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Locator/PSR0/PSR0Locator.php) instead?\n. @CMCDragonkai is it possible to give us a reproducible example of the error?\n. Brilliant! Thank you!\n. The solution would be str_replace(\"\\n\", PHP_EOL, $input) before that\n. @raul782 this behaviour is coming from [prophecy](http://github.com/phpspec/prophecy). Could you please move your issue their? Thanks.\n. #165 addresses this\n. There are some events available for extensions, including \"after specification\" and \"after suite\". I am planning on adding a couple more. Allowing for a \"let go\" after all examples would encourage _shared fixtures_, which is very good to make the results of the specs erratic. Not sure we should encourage that.\n. Yes, makes sense. This is the way it was built in the older version. We used to use the>to specify the output HTML file. It shouldn't be too hard to do it. Is worth release it like this for now?\n. Thanks Peter\n. Still it would be helpful if the console output showed in which line originated the failed expectation. That's what this feature request is about. This info is available anyway.\n. @mdavis1982 I am moving this to 2.1, let's have a look again after the release of 2.0\n. I didn't add anything\n. @everzet I am happy to get back to this relentlessly and try and simplify it further. For example,ExampleNodeand theEventDispatcher` can be combined into a middle man for dispatching example related events. This will shorten by one collaborator in a couple of places.\n. As discussed, please add a --no-code-generation flag and help description to give that option to build scripts running --no-interaction.\n@ciaranmcnulty, merging #177 has, like you predicted, disabled the automatic merge of this PR. Make sure you pull master changes before continuing.\n. Thanks Ciaran!\n. Thanks, Pete\n. Well spotted, thanks!\n. Thanks!\n. @rommsen can you paste an example of a spec in which this patch has been useful for you\n. I was working with this. There is a DRY problem here. The snippet you added is used in Wrapper\\Subject\\Caller. I have a few private methods that merely create the exceptions needed for Caller. I am merging this but I feel we need to extract this to a Util class. I am thinking an ExceptionFactory that has the Presenter. This will also reduce the amount of collaborators Wrapper needs at the moment.\n. Another thing we will need is cover the use case $this->shouldThrow(\\Exception::class)->during('_construct',[]);. At the moment, because of the way the Throw matcher work, the SUS is instantiated before the during delayed call. The exception is not catched in time to make the matcher see it. The solution is to give this matcher the ability to control object instantiation. This is possible now that we have the ExpectationFactory. We just need to add positive and negative factory calls \u2013 shouldThrow and shouldNotThrow to create the Throw matcher with everything we need.\n. Thanks!\n. no, that's not what he is saying. You need need both lines in the composer. Just use dev-master for the expect helper and 2.0.*@dev for phpspec\n. @andho have you reviewed this one, already?\n. I am postponing this merging to 2.1 as there has been no progress with the specs\n. @gquemener The plan is to tag 2.0 stable at Xmas\n. @MarcoDeBortoli would this impact MageSpec?\n. @docteurklein I will tag 2.0 first and add this feature straight after, so existing extensions have time to adapt\n. Please create an issue at https://github.com/phpspec/phpspec2-site for this\n. Nice one Matt. Please note, like Nyan, Dinosaur formatter should not be in core. Please create an extension for it.\n. Nyan is not in core at the moment, although the code for the formatter option is. This is due to the fact that we don't have a way to specify a formatter path from the phpspec.yml (or cli options) yet.\n. I like the idea of a dino formatter. I don't think a dino is a nyan (a bit of Liskov chills for me). new Cat(...) feels wrong if you get a dino. Also, I would like to see a PR that proposes a way to point to a formatter via command line switch, or configuration, rather than us having to amend core every time someone wants a new formatter.\n. @mdavis1982 can we close this one now?\n. @mprzytulski was writing a phpspec plugin for phpstorm. What is the status, Michal?\n. A good example why composition should be chosen over inheritance. I understand some tools/frameworks will force you to extend their classes to have the convenience of their feature. With Symfony (and FOS also, for the most part), you usually can get away by studying the classes involved. In fact, if you look close from your example, the FOSRestController uses composition. It is the FOS\\RestBundle\\View\\ViewHandler::handle you would like to stub or mock, depending what you are testing.\nAh! And if you are thinking that it feels unnatural to worry about the view handler, don't forget that from the point you extend a base class, your class has become the base class (\"is a\" relationship).\n. @nixilla thanks for the PR. It's only a matter of adding a test and code for the condition\nphp\n    if ($subject implements ArrayAccess) {\n        return $subject->offsetExists($arguments[0]);\n    }\n. cool then\n. Thanks @stof\n. @norzechowicz, thanks.\n. why would you care about the direct parent? what is wrong with shouldHaveType? Sounds like you are binding your tests to a specific implementation?\n. You see, the fact that your class extends ParentClass is not a behaviour, you do so so you can have some behaviour or inherited state, and that behaviour is described in the spec of ParentClass. You are not describing any behaviour of a class by saying it extends something.\nSpecs are there to specify behaviour, not structure. Anyway, inheritance is rarely a good idea, you should try to favour composition, and when you do have to worry about type, your types are usually abstractions \u2013 \"code to an interface, not implementation\".\n. If you have dev-master on composer.json, could you run composer update? I don't see this issue anymore.\n. @docteurklein I didn't want to change the state of the object at this point, as we may need a subject instantiated with arguments \u2013 the Caller will do that later.\n@stof I agree. Will add a spec or two before merging.\n. :+1: \n. I am ok with it. I can this being useful when you want to see characters other than the ones allowed for function names in PHP in the example description. E.g. \"it complains when trying to divide $number/0\"\n. :+1:  My opinion is that this is a fair price to pay for having the help displaying the contents properly. I vote in favour of this PR as the removal of run as the default command.\n. @ciaranmcnulty hmm... might have dreamed it ;)\n. Any other critical issues anyone aware of that is left undone? \u2013 considering PR submitted for #242 is merged? I am thinking of tagging RC2 for prophecy sake. #242 is interfering there.\n. @ciaranmcnulty did you mean #218?\n. ah sorry, that was a month ago (https://github.com/phpspec/phpspec/issues/223#issuecomment-29807851)\n. thanks\n. waiting for travis this time :P \n. One of PhpSpec goals is to drive good design. With this feature in core we could end up with encouraging people to leave the type hint to the implementation class instead of the abstract type. Thanks, Ciaran.\n. I am reverting this changes as it is breaking the specs even thought travis didn't pick that up. I get the following errors in the spec run:\n```\nPhpSpec/Runner/ExampleRunner\n  33  \u2718 it executes example in newly created context\n      some predictions failed:\n        Double\\ReflectionMethod\\P719811971:\n          No calls been made that match:\n            Double\\ReflectionMethod\\P719811971->invokeArgs(exact(Double\\SpecificationInterface\\SpecificationInterface\\P668206633:000000006b4e9c450000000008506894), exact([]))\n          but expected at least one.\nPhpSpec/Runner/ExampleRunner\n  97  \u2718 it runs all supported maintainers before and after each example\n      some predictions failed:\n        Double\\MaintainerInterface\\P1931740479:\n          No calls been made that match:\n            Double\\MaintainerInterface\\P1931740479->prepare(exact(Double\\PhpSpec\\Loader\\Node\\ExampleNode\\P692663812:000000006b4e9ef20000000008506894), * [, ...])\n          but expected at least one.  No calls been made that match:\n            Double\\MaintainerInterface\\P1931740479->teardown(exact(Double\\PhpSpec\\Loader\\Node\\ExampleNode\\P692663812:000000006b4e9ef20000000008506894), * [, ...])\n          but expected at least one.\nPhpSpec/Runner/ExampleRunner\n  45  ! it dispatches ExampleEvent with pending status if example is pending\n      method call:\n        Double\\EventDispatcherInterface\\EventDispatcherInterface\\P1007505106->dispatch(\"afterExample\", PhpSpec\\Event\\ExampleEvent:000000006b4e9f8d0000000008506894)\n      was not expected.\n      Expected calls are:\n        - dispatch(exact(\"beforeExample\"), *)\n        - dispatch(exact(\"afterExample\"), state(getResult(), 1))\nPhpSpec/Runner/ExampleRunner\n  60  ! it dispatches ExampleEvent with failed status if matcher throws exception\n      method call:\n        Double\\EventDispatcherInterface\\EventDispatcherInterface\\P1090565493->dispatch(\"afterExample\", PhpSpec\\Event\\ExampleEvent:000000006b4e9fc20000000008506894)\n      was not expected.\n      Expected calls are:\n        - dispatch(exact(\"beforeExample\"), *)\n        - dispatch(exact(\"afterExample\"), state(getResult(), 2))\n```\n. That should be it. I didn't update the vendors. Let me pull the merge from @docteurklein and have a go\n. Interesting one. You are right there, creating the subject object in DuringCall could be behind the reason. I was thinking to move Instantiator and every subject object creation to be WrappedObject responsibility, so once this is created it stays the same throughout the run. I will look into it.\n. @kagux the reason is that the current wrapped one is available in the throw matcher but the during method is called after the throw matcher is created, resulting in not being able to using shouldThrow with the constructor. DuringCall fixes that, but it instantiate a fresh subject. I am considering as a fix to move instantiation to WrappedObject and make sure that object is kept throughout the run.\n. @andho, I've given @stof, @ciaranmcnulty and @jakzal pull/push rights, meanwhile could you please revert the merge until we are done with the review?\n. This is a repeat of #242. Watch that space.\n. @stof It makes sense to me to get rid of it since we have all the collaborators wiring in the service configuration now\n. Can we use folders to group features that make sense together?\nAlso, I like to name the feature files with actor + (feature) short verbal phrase\n/\n|- features/\n   |- bootstrap/\n   |- code_generation/\n      |- developer_generates_new_spec.feature\n      |- developer_generates_new_method.feature\n      |- developer_generates_new_class.feature\n   |- formatters/\n   |- matchers/\n. Gherkin seems to be indented with 2 spaces. Is this ready now?\n. @stof that would be good. #247 is now merged.\n. Did you use a sniff for this or just the IDE? It would be good to have the sniff (if you used one) in the build to stop us from messing the code in the future.\n. @ciaranmcnulty why not work on a PhpSpec Sniff instead and add that to the build? We used to have one for version 1.\n. If we consider that break in the CS is a failure then, it makes sense to be a part of the Travis build. It's a real failure, if we consider that way.\n. I realised now that this should be sent to master, as it is a hotfix more than a new feature...\n. This is a hotfix, not a new feature. Created a PR to be merged in master in #259\n. @whatthejeff are you ok with the credits? Do you still want the phpspec-nyan-formatters to be under whatthejeff, with credits to @mdavis1982 contributions?\n. ok... sounds like we can merge now? @whatthejeff?\n. ok, looks like the consensus is to move under phpspec/nyan-formatters. I am creating the repo giving @whatthejeff and @mdavis1982 pull and push rights.\n. oh, I didn't see you comment. Yes, created now and you both have pull/push. Can you update composer.json please?\n. cool, thanks @mdavis1982!\n. PhpSpec\\NyanFormattersExtension looks good to me.\n. @mdavis1982 done https://packagist.org/packages/phpspec/nyan-formatters, and I added you guys as maintainers there too. All good?\n. :beers:\n. @ciaranmcnulty I quite like to see full examples too. I know you may find them too verbose but they are really useful for newcomers. When I look at what relish generate, I quite like to see the whole class. I am sure the partial, example based steps will be handy too at some point. \n. The problem I see is I can't see how we can get a stable release out and add fixes to master without worrying about new unstable features being added to it at the same time. Good new ideas are being presented, and we are in the process of stabilising a release. If we merge the new features in master it will make the stabilisation process slower. If we branching from develop for those, we could focus on our release sending fixes to master.\n. :+1: Can we park this until 2.1? I like the idea, making run mandatory created some problems to some users, this will also impact existing builds. But, yes, let's do this after releasing 2.0, ok?\n. @ciaranmcnulty @everzet yes, makes sense, compelling arguments. The only thing is I would rather not have the word test anywhere near PhpSpec\n. @everzet I know you don't. You understand what test means. Most people get confused about the name, putting focus on verification and structure, as opposed to behaviour, communication, documentation and design. Remember that BDD was invented as a training tool to bring the focus back on track. Number one thing Dan did was to take away that word of jBehave. But that's not the issue here.\n. A spec containing $this->shouldContainPropery('name') would be tied too close to the implementation. You should care about behaviour not how the class state is kept internally from your specs, or your specs will be brittle and your design fragile.\n. It looks good to me. @nickpeirson @andho could you give a quick browse and thumbs up?\n. :beers: \n. oh! nice hack. This should do it until we have a stable release\n. @gquemener I went through the code and it seems very thorough, good work! I prefer to merge it to develop, so the nyan formatters can have a new proper stable tag for skipped. I think it's ready for merging, and if you re-direct the PR to develop I will merge straight way. Are you happy with that?\n. I am also :+1: on this. If anything it will make easier for the extensions to edit the commands, and I agree with @ciaranmcnulty that if the extensions experience side effects, well that's the time they should, as we are about to go stable \n. :beers:\n. @stof, actually fa\u00e7ades are accessed statically, but they use the magic staticCall to create a specific object instance (resource, you want to use for doing something). Prophecy, our default mocking framework, does not support mocking the initial static call for the fa\u00e7ade entry point. So, @isimmons yeah, go ahead and create a fa\u00e7ade to a mocking framework, such as Mockery, to allow for mocking your own fa\u00e7ades. Mocking Laravel's fa\u00e7ade, or any third party code is not recommended as you loose track of what actually work, adapters are recommended instead.\n. @stof I see what you mean. It's that we are composing objects around messages, but invoking methods on objects like we do in structural programming.\nJust exchanging ideas with @taylorotwell on twitter, let me add that he has a video on taylorotwell.com explaining how to use Dependency Injection with Laravel. Using \"fa\u00e7ades\" is as good (or bad) as passing a service locator to a class. It's a design choice that comes with a price.\n. @isimmons Laravel's author also points out that he only uses fa\u00e7ades for Http/Routing. Every step down from there he uses proper DI. If you choose to follow that, phpspec will be a good tool for you\n. To make matters worse, looking closer into Illuminate base Fa\u00e7ade class, I noticed that it keeps the instance once it's created, like a registry, so should the object created this way rely on any internal state, it will have its state shared across multiple calls to the fa\u00e7ade, throwing testability out of the window.\n. :beer: \n. Fixing...\n. :beers:\n. Created 2.1 -> https://github.com/phpspec/phpspec2-site/tree/2.1\n. @jon-acker Are you merging this with @ciaranmcnulty feature that has the exception in construction scenarios?\n. I am all for composition but I am :-1: on this one. It's too 5 years ahead of everyone and may scare people away from speccing instead of introducing good practices \u2013 which is your intention.\n. Meanwhile you could do bin/phpspec run --format=junit > logs/junit.xml as a workaround, or use a redirection in ant (if that's what you are using).\n. Looking at the code coverage plugin documentation, you can specify output for the plugin output\n. Sounds like a bug in the plugin. Can you please create an issue there?\n. As @stof mentioned before, we are aware of it and this will not be addressed in 2.0. If the plugin has an output flag but it outputs anyway I'd say the behaviour is not what we'd expect as users. I believe it deserves the attention of the plugin maintainers.\n. I will leave this open for 2.1\n. Boolean is not his name. His name is Boole.\n. sandwich was named after the town Sandwich, and we don't capitalise sandwich\n. > The 'lowercase for primitives' rule is more valuable to me than English language conventions.\nWho can refute that? The Boolean argument based on preference does not convince me\n. For the mental sanity of the community, I will exercise my \"benevolent dictator\" rights and establish \"boolean\" as our standard (just because @whisller has gone through the trouble of actually offering a patch) and stop our boolshit/Boolshit discussion.\nOnto other things...\n. @cordoval still don't care ;)\n. Good start. You need to add a .feature file and the specs for your code. Plus make sure the other specs don't fail, as they do at the moment ;)\nah! and direct the pull request to develop, please.\n. And voil\u00e0, thanks @damonjones. Hopefully now @mathiasverraes is out of excuses for not using phpspec :smile: \n. @mdavis1982 would you like to try and add an acceptance test (.feature)?\n. @mdavis1982 can we see an acceptance test for this? I don't recall how this work: you get option generateFinalClasses and in the example you gave the option looks like: generator.final_classes: true, it would be nice to document the feature. It would be also great if you could add an entry to the documentation\n. @norzechowicz look at Maintainers in phpspec. That's your extension point. Send questions my way. Happy to help you out with the extension \u2013 that way maybe people will stop asking for it in core :)\n. @drgomesp it could be. I try to keep phpspec free from features that will bind the mind of the developer with the verification paradigm. @norzechowicz explained it very well above. If I could think of an elegant way to prevent people to use it to try and describe more than one thing at a time, than I would go for it. I am conscious this will be used in a counter-productive way for code design, which is the primary function of the tool.\nThose who know how to use a dataProvider responsively should use the extension and everyone is happy.\n. oh boy... merged to master :(\n. ok, fixed it. Please send new features to develop not master\n. +1 on labelling it as a bug and applying to all versions affected. $typehint is a Collaborator. A collaborator is a phpspec adapter to Prophecy, the mocking framework underneath. Typehints are used for creating doubles only. The objects are not to be used \"as is\" in the example code. You can use a collaborator in the example to configure the double behaviour, if any.\n. I tell you if you promise to never use it on your code :D\n. Reflection and invokeArgs https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Runner/ExampleRunner.php#L128-L143\nAre you trying to implement DataProvider as suggested by @norzechowicz at #347?\nAn extension would be nice, it would stop people asking me to add it to core :D\n. @everzet shish!!\n. Workflow with state is madness to maintain. I think it could be done stateless, though. The renaming would be relatively simple but the extract would be complicated by extracting the parts of the spec that is relevant in the extracted classes.\n. I don't know. There may be some refactoring commands that are close enough to the phpspec workflow that we could introduce as commands for the tool. It is one of the goals of the tool is to go beyond running specs and actually support the TDD development life cycle, of which refactoring is an important part.\nCan we draw some simple scenarios as prototype?\n. @gquemener would you be happy to work on a proof of concept? I think we need to see and play with this before we can accept that there is value in integrating some  simple refactorings in the phpspec workflow as opposed to have this in the IDE or a separated command line tool\n. @whatthejeff are you looking at why this is still blowing the tests for ExceptionFactory under php >= 5.4?\n. Is this something that should be in master (hotfix?)\n. @ciaranmcnulty @jakzal what are your views?\n. Ok, then. Let's merge develop into master and create a Contributing.md.\n. @ciaranmcnulty The doc repo is managed by @jakzal and he did let me know of @shrikeh contribution, which I am thankful for\n. There are other 3 other scenarios I would like to consider within this PR.\n1 - Number of arguments given to the factory method is smaller than the number of mandatory arguments of an existing constructor.\nExpected behaviour: Do not call the constructor in this scenario and throw, from the generated method, a SPL BadMethodCallException with a message like \"Mismatch between the number of arguments of the factory method and constructor\"\n2 - Number of arguments given to the factory method is bigger than the number of arguments of an existing constructor.\nExpected behaviour: Again I prefer to throw the above SPL exception even though PHP will be fine passing the excess arguments to the constructor (which could be deceiving and not helping describe the factory)\n3 - Number of arguments given to the factory method is smaller than the number of optional arguments of an existing constructor.\nExpected behaviour: Match the name of the variables to the name of the variables in the constructor and using the default value for the missing ones (no need to add those if they come at the end of the argument list).\n. @thecrimpmaster Looks like the consensus is option 1.\n. I will wait for the final version with the clean up of NamedConstructorGenerator for merging this one. I want this one in 2.1 but... no pressure\n. @ciaranmcnulty you should have the authorisation key on your email\n. Kent Beck calls this pattern faking. Faking is the smallest baby step one can take to green. It's not the only strategy though. I would like to have this behaviour in PhpSpec, as it helps me teach TDD, but I want to be able to tell the tool I want to use this tactic. I am happy with either a command or a simple flag added to the run command (--fake).\n. I like this :-) Can we fix the spec count on the right side? it would render better the idea of a progress bar\n. :clap:\n@ciaranmcnulty told me he wants to add specs + refactor a bit, so I am not merging it yet.\n. I vaguely remember the initial intention of not return anything from expectations, to discourage testing more than one thing at a time, not sure when/why we started making them return values... Worth a look.\n. nice touch\n. I would like PhpSpec 3 to make use of Testwork. But that depends on someone sending a PR to @everzet extracting it from Behat as a separate component. Doing it now is a bit premature in my opinion. \n. @ciaranmcnulty in the composer example I still see \"phpspec/phpspec\": \"~2.0\". I guess it's just that the docs haven't been updated?\n. Hey @yguedidi, thanks for contributing. You didn't add a description to your PR. What is it that you want to achieve with this? Has it occurred to you that, after 2 years with this format, that it was intentional to leave the visibility keyword out?\n. We consider specs a part of a domain specific language. It does not violate PSR because it does not fall under its scope. Specs are meant to look as expressive as possible. Don't think of them as code, but as... well specs, or documentation\n. Very often PhpSpec will do Arrange for you and you can Act and Assert in one line anyway, which I think is an elegant aspect of the tool.\n. +1 for configurable, not default behaviour\n. I suggest that by default it is off, but a simple flag in phpspec.yml would turn the final template on.\n. Here's an idea, if shouldHaveType or any type matcher is used, and the interface does not exist, then offer to create the interface AND ask if you want the class to be final. (Inspired by @Ocramius blog post)\n. - +1 on final, default for classes with interfaces mentioned in shouldHaveType(name different to SUS)\n- -1 on prompting to create an interface for every class\n- -1 *Interface suffix (eew)\n. class FooSpec extends ObjectBehavior\n{\n    function it_returns_true()\n    {\n        $this->callOnWrappedObject('shouldUsersBeNotified')->shouldReturn(true);\n    }\n}\n. try using type hinting to reuse the same double for PaymentsRepository at it_creates_a_new_charge_that_isnt_on_the_system instead of keeping a copy of it as properties of your spec using $this->.\nphp\n    function it_creates_a_new_charge_that_isnt_on_the_system(\n        StripeWebhook $webhook, PaymentsRepository $paymentsRepository\n    ) {\n        $webhook->getMethodKey()->willReturn('stripe');\n        $webhook->getResourceId()->willReturn('ch_1234');\n        $paymentsRepository->getPaymentForMethodReference('stripe', 'ch_1234')\n            ->willThrow(NoRecordsFound::class));\n        $this->handleWebhook($webhook);\n    }\n. \ud83c\udf7b Thank you, James\n. I just had a thought. Have you considered generating examples for the interface methods in the PersonSpec instead:\n```php\n<?php\nnamespace spec\\PhpSpec;\nuse PhpSpec\\Person;\nuse PhpSpec\\ObjectBehavior;\nuse PhpSpec\\SaysHello;\nclass PersonSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType(Person::class);\n    }\nfunction it_has_type()\n{\n    $this->shouldHaveType(SaysHello::class);\n}\n\nfunction it_implements_saysHello()\n{\n    $this->saysHello()->shouldReturn(NULL); // <- not sure whether to have a matcher or not\n}\n\n}\n```\nI just think that generating the implementation without a test is less aligned with the goals of the tool.. That's not the case though. The spec is not for describing the SayHello interface, which I agree would deliver no value. But it is a Person spec, the example should describe the method in this particular concrete implementation.. Good work! \ud83c\udf7b . :+1:. I think Serjo is trying to:\nphp\nclass ASpec extends Object Behavior\n{\n    function it_sets_the_state_of_a_collaborator_at_construction(B $b)\n    {\n        $this->beConstructedWith($b, 42);\n        $b->setSomeState(42)->shouldHaveBeenCalled();\n    }\n}\nphp\nclass A\n{\n    public function __construct(B $b, $state)\n    {\n        $b->setSomeState($state);\n        $this->b = $b;\n    }\n}. I fail to see the class construction in the example you gave. Where does the delegation work? At the getHim method or at the constructor?. SOLID principles mostly. You can find them elaborated here: https://www.amazon.co.uk/Software-Development-Principles-Patterns-Practices/dp/0135974445. Most of the approach that PhpSpec takes is borrowed from the London school of TDD, also called the Mockist approach. You can find more information here: https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627. I hope this helps.. Yep, tested. No backsies.\n\n\n. @oxkhar thanks for this. This will indeed fix the problem. Can you please add a spec documenting the cases in which default values are used, that we will not get nulls back. This is to prevent regression. Thanks again!. thanks! \ud83c\udf7a . Hi @drupol \nThanks for your contribution!\nTo clarify, are you trying to describe that calling getUnderfinedProperty would throw, or is it the attempt to access the public property undefinedProperty that would throw the exception?\nAlso what is getClassWithNoMethods doing here?. Put the $deprecated_classes inside the anonymous function, so it's not in the global scope. And while you are in it, also rename it to $deprecatedClasses.. What you want to describe is, technically, not object behaviour. Class (static) methods are not messages sent to objects, they are more like namespaced, globally available, functions.\nYou could achieve what you want \u2014 making sure devs won't redeclare the factory method non-static \u2014 by writing the following example:\nphp\nclass ConfigurationFactorySpec extends ObjectBehavior\n{\n    function it_creates_configuration_objects()\n    {\n        $this->beConstructedThroughCreate();\n        $this->shouldHaveType(Configuration::class);\n    }\n}\nDoes this look like an acceptable solution to you?. Class names may have numbers too\n. Looking at the original request, the intention was to instruct the developer that calling a class some:weird:name is not valid from a console input validation point. At the moment PhpSpec ignores PSR rules and tries to create some:weird:name.php and a class with that name, resulting in a PHP Parse error, which breaks the PhpSpec flow. In my opinion the describe command should validate the pattern and display a common symfony console exception message\n. @cakper better, but still wrong. A class name cannot start with a number in PHP.\n. @stof that would be nice, but inconsistent with the other input validation cases. For example if you run bin/phpspec bogus_command you will get a InvalidArgumentException \"Command bogus_command is not defined\". And if you run bin/phpspec run --bogus-option you get a RuntimeException with the message \"The --bogus-option option does not exist\".\n. @cordoval any chances you can amend your commit to add this?\n. I believe just one Argument::any() is enough for find or positiveMatch here. It means it expects the methods to be called with any arguments.\n. That's the one!\n. How about implementsArrayAccess for this one?\n. The 4 new classes are a decomposition of Subject. We could reduce the constructor arguments by passing 2 factories around: one for the exceptions, that knows about the presenter; and one for the subject, that knows about the presenter, matchers and example node. The unwrapper is stateless, we don't need to pass it around.\n. There's a lot of reference to $subject in the class. In the fully qualified name we have ...\\Subject\\ArrayAccess. Should we change the name of the method? How about renaming the class to  ...\\Subject\\SubjectArrayAccess? Is it better?\n. Doesn't it? I think of it as a proxy to the array access implementation in the wrapped object.\n. huh?\n. I am cool with this. This will change the way Subject is constructed and at the moment some extensions already rely on the constructor being the way it is. Fortunately we know who the extension writers are :)\n. Can you suggest a better name? It makes sense to me the way it is, the domain is low level in this case. Why you do it? Because subject needs to pretend to have the same array access that the wrapped object does.\n. It is here because Subject needs to pretend to be a bunch of things. All the code for these things were crowding Subject itself, so I extracted classes to deal with all the things it does: configuring and instantiating the wrapped object, calling methods on it, running expectation matches against it and finally providing proxying to its array access implementation.\n. See 62f3373\n. See 6d6d47e\n. https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md#56-try-catch\n. php\n            try {\n                $result = max($result, $this->specRunner->run($specification));\n            } catch (StopOnFailureException $e) {\n                break;\n            }\n. Don't we need $classname string instead of $class ReflectionClass here?\n. I don't think we need. There's only a handful of extensions, and we know must of the guys. Better to keep the code clean in this case, in my opinion. I will have a look at the expect helper (after jet leg has passed) and merge this.\n. Fair enough. I will add them back.\n. This decorates the actual matching by testing for exceptions at the construction of the subject. The subject is constructed and kept in the wrapped object. I only care about PHP errors (ErrorException) at this point. Later other kids of exception gets thrown anyway, and you are now able to expect a exception at construction.\n. On second thought, why would we want to call this methods when we can actually interact with the caller from the ObjectBehavior via calling methods, setting or getting properties directly? I don't know any use case for this. Do you?\n. fixed in e61fff5dcb8975dc1c109aebb2f88c133e531c3a\n. Fixed in f604d304323bb5a2b8e2dcc850599f9c1e8f623a\n. Fixed in 64a5cb5ab6dad8d0d18fcdaa6757e3dd8c374016\n. ok, readded in ab2e7013759b6987970489433555ff4324051354\n. Hmm, good catch! I left it untouched from a previous commit https://github.com/phpspec/phpspec/blob/997dac09819181df776108875c0087af0be6d8b0/src/PhpSpec/Wrapper/Subject.php#L100\nWill change it\n. Fixed in 73f24acece9ce2b4e3432c0bc3ccd21d3e2a05d5\n. Fixed it c2092073588364e1f1ffa8c279ca2bea778b9be7\n. agreed. Amending now.\n. @jakzal's PR is outdated, some of old commits you see is me merging the master back in his branch.\n. Indeed it is! https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Wrapper/Subject.php#L79\n. Yes, although I don't think the assembler being stateful is our highest priority in the refactoring list. I am not sure what is its place, but extracting it out of application makes me think extension writing can be simplified. I am not thinking 2 ways to extend, just that maybe there is a simpler way.\n. gone\n. @richardmiller can add this fix please?\n. @mdavis1982 the spec class is also suffixed with Spec, thus it should read \"Will generate a namespaced specification Namespace\\ClassNameSpec\"\n. Array short syntax should break travis under 5.3\n. I don't remember. Might have been that I started coding HtmlFormatter in isolation and integrating with the container later. Not sure now...\n. You are not describing the class yet... how about: \"When I start describing\" instead of \"When I describe\"?\n. The Given step is about pre-conditions or the state of the system under test before the actual action takes place. That's what's important. The tense of the verb is only important if it helps the communication between stakeholders. I sometimes even accept something grammatically or even semantically wrong from the customer if I feel he is onto something important (for the domain). In this case I am happy with either way, with a slight preference for past participle.\n. Agreed. The scenarios titles should specify what path we are testing.\n. @jakzal I believe the problem is with the scenario name. It is not completely clear what you are testing. Once you refactor the name to contain what you are verifying then it will be much easier to come up with the text for the Then clause. You probably mean that \"Runner informs the examples have passed for specs with successful implemented classes\", or a more concise version of it.\n. missing junit\n. No, PhpStprm is not happy without the . It thinks it is a PhpSpec\\mixed\n. \\Exception|\\string causes PhpStorm to complain at the pipe: \"Expected variable\" \n. hmm, I also saw, just now that $exception is an optional argument. Fixing it now...\n. @andho would this work? $newArgs[] = &$arguments[$count]; Where $count keeps the current parameter index.\n. Isn't that what line 4 says?\n. No I am not. I will fix it :-) thanks!\n. callable type hint is not supported in 5.3. Please change this as phpspec still supports >=5.3.3. This is cause the build to fail\n. You can't use [] here, you need the array() syntax or the build fails on php 5.3. You can see where it fails by clicking on \"Details\", then on \"Build\", next to the failure message.\n. I would be happy if the default action was creating a private constructor if there wasn't one already...\n. The official language of PhpSpec is en_US.\n. @everzet we need a proper release tag to depend on. We are waiting for your next release.\n. missing space before and after operator (=)\n. this isn't going to work under windows...\n. I guess that's why you have the error suppression operator...\n. No use case. It should never happen as the method is guarded to only exceptions of method not found, which means subject is an object.. ",
    "andho": "It actually works for me, I have ~/src/phpspec/scripts/phpspec.php soft linked to /usr/bin/phpspec. And I made the changes that's in my commit and I am able to run $:>phpspec DescribeTestFile.php from the command line in any directory.\nAnyway, looking forward to your solution as well, but just in case, I thought you should know, I have written a blog post on using PHPSpec using the web runner and I will include these changes in it for now, if you don't mind? Please leave a comment if you have any suggestions or problems with \n. isEqualTo, is actually a method on my Query object, i.e. The query is \"Person's name should be equal to 'The name'\".\nI need to setup the environment before running the tests, which I don't know how to do in command line because I haven't found out how to run a 'bootstrap.php' file like in phpunit.\n. Also I am using phpspec-mocks, which explains the warning you are getting? So could you try after putting the phpspec-mocks Mocks folder inside phpspec src folder. Also you can get rid of the hard coded path:\n$dir = '/home/likewise-open/ALLIEDINSURE/amjad/src/phpspec/src/';\nfrom AllSpec.php and remove the $dir variable from the succeeding two lines.\nAnd additionally I have debugged the code and this is where it terminates and outputs the error:\nPHPSpec/Matcher/Equal.php (starting from line 142)\n/**\n * Returns failure message in case we are using should\n * \n * @return string\n */\npublic function getFailureMessage()\n{\n    return 'expected ' . var_export($this->_expected, true) . ', got ' .\n           var_export($this->_actual, true) . ' (using equal())';\n}\nMight be that var_export is trying to output a cyclic redunduncy, if so the problem is with my Class I guess.\n. Is both Mockery and phpspec-mocks supported by $this-mock();\nIf not how about including Mockery as a dependency in PEAR, after all PHPSpec internally uses Mockery!\n. I guess error suppression should be used when including it.\n. Also find unit tests for the bootstrap part.\n. Oh yeah, the include part is another commit I realised that was missing afterwards, will send a pull request for that.\nAbout the interceptor, you are right. Shall I make the changes and send?\n. Marcello, commit 32435e0 actually has the part that requires the file. The test creates two files and runs the spec which automatically loads it and the test checks if the class in the file exists, which will exist only if the file was loaded.\n. Merge please :D\n. Please refer to this: http://blog.andho.com/2011-11-24/cqrs-command-testing-with-phpspec/\nIf you think this is possible with Behat then this should be closed.\n. Breaking out the suite selection to a separate issue (#64)\n. Merged with develop\n. Actually, the junit formatter creates a SimpleXML object and outputs that at the end of the run.\n. Yes, the formatter used to generate output by just concatenating and building the xml as a string. I will look into making this compatible with makegood. But it would be great if you could point me in the right direction.\nHow does makegood expect the output of the run to be. At which points does it need output?\n. As for failfast, In the test runner provided by Zend Studio for PHPUnit, it runs all tests whether it fails or not. And that is what I would prefer as an IDE user.\n. Problems with develop keeps me from merging this.\n. Merged into develop\n. Merged into develop\n. The testsuite element has an empty file attribute. fixing\n. - Should check if one suite folder is not a parent of another.\n. merged into develop\n. Moved to prophecy: https://github.com/phpspec/prophecy/issues/25\n. I'm having difficulties testing this class as SimpleXMLElement's constructor is final (cannot be mocked). I'm thinking of writing an interface for XMLElement.\nFrom the looks of it, the formatter works fine. But I don't want to merge without proper tests.\n. Hi guys. Sorry for the \"no progress\". I will be busy at least until Nov 10th. If anyone can come with Unit Tests for this, it will be really helpful. I will see what I can do after Nov 10th.\n. There is too much changes to be brought for spec-ing this. I say just merge it.\n. Please give information on how this bug occurs in actual usage.\n. I really want this change so I can list out the available Formatters in the no formatter found exception.\n. @jakzal What I'm saying is this is not a RunTimeException, as in, this is not an error in our program. It's more like the user provided invalid input and we are validating it.\nI don't think anyone would show validation errors as Exceptions to the user in a web interface. So why should it be different in a CLI. So anytime the user gives the program invalid input, we can throw a UserErrorException which can be handled by the application to show the user what he input was wrong.\n. :thumbsup: must have. I saw that most of the Formatters don't have tests at all and it's good to handle them at feature level.\n. This can only be fixed by using Reflection. Fix (in branch linked below) is failing some other tests. @MarcelloDuarte \nhttps://github.com/andho/phpspec/tree/bugfix/pass-by-reference\n. @stof sorry too late to be working.\n. Bad implementation. Better one pushed here: https://github.com/phpspec/phpspec/pull/244\n. Merge reverted and sorry for the inconvenience. Meanwhile working on a clean implementation.\n. @stof done.\n. @stof what's the progress on this one?\n. @stof @MarcelloDuarte let's merge this before new year eh? Just rebased again.\n. @stof that would definitely be a problem. I guess I need to check the value of original array. Do you use phpspec-expect to do assertions separate from the subject?\n. @stof I have found no way to pass the reference of the actual value of the test, down to the method to be tested.\n. I would merge it, but note that you cannot test a function that uses pass-by-reference as a \"know issue\".\n. Guys! I think trying to make this \"perfect\" will likely backfire. Issue's @ciaranmcnulty's comment comment could be left for later improvement.\n. Keep the increment. It will start working once no of assertions are correctly passed to the event. Let me check see if there is a way to get the assertions.\n. Isn't Given scenario in past tense? That makes more sense.\n. I correct my view. \"Given I've written...\" makes more sense to me. Either way is fine as long as it doesn't confuse anyone.\n. Also as @stof mentioned this should be in a different feature file. Something like 'running_specs.feature'.\n. When I ask to describe \"Scenario1/Markdown\"?\n. Agree with @stof\n. By the time it gets here, I think it's already a copy of the copy of the original.\n. ",
    "rgpjones": "Also added a fix to the phpspec script, to load the include paths from configuration rather than hard-coded as /usr/share/pear, which is incorrect on some systems.\n. ",
    "cordoval": "sure\n``` php\n<?php\nnamespace Cordova\\Bundle\\PhpSpecBundle\\Description;\nclass DescribeNewBowlingGame extends \\PHPSpec\\Context\n{\nprivate $bowling = null;\n\npublic function before()\n{\n    $this->bowling = $this->spec(new Bowling);\n}\n\npublic function itShouldScore0ForGutterGame()\n{\n    for ($i=1; $i<=20; $i++) {\n        // someone is really bad at bowling!\n        $this->bowling->hit(0);\n    }\n    $this->bowling->score->should->equal(0);\n}\n\n}\n```\n. I am now trying adding the Describe word before the class name and the file ...\n. yes very weird, did somewhat work after I played with the names however\nPHP Fatal error:  Class 'Cordova\\Bundle\\PhpSpecBundle\\Description\\Bowling' not found in /home/cordoval/sites-    2/FormModelProjectBundle/src/Cordova/Bundle/PhpSpecBundle/Description/NewBowlingGameSpec.php on line 13\nI am putting the namespace and everything and it will not find Bowling in the same folder, does it have to have Spec too?\n. can i use the sf2 autoloader for that? trying that first, this should work, it worked for Zend, for PHPUnit, why not PHPSpec, that is why i thought in the bundle....\n. there should at least be a bootstrapper or something like on behat\n. /home/cordoval/sites-2/FormModelProjectBundle/vendor/behat/mink/tests/bootstrap.php ???\n. got it but the problem to have a bootstrap remains\n. thanks @MarcelloDuarte\n. oh i had forgotten about this, it was 9 months ago, but thanks anyway\n. now i have to manually run \nbash\n ./vendor/phpspec/scripts/phpspec.php vendor/bundles/Cordova/Bundle/FormModelBundle/Specs/views/IndexSpec.php -c\n. @MarcelloDuarte I think i got the idea, so i will start writting basically class based macro example for now? is that a good start? where from master should i go back to? sha1? thanks!\n. i have some idea but hadn't been able to work on this yet, go ahead, sorry about this :'(\n. thanks @majax for the help in the regexp\n. phpsec will be up soon, i have a blog post doing it on http://www.craftitonline.com\nwe are not behind, we are piggybacking right after you guys, hey padraic, I am a fan of pair programming, let me know when you get a chance on your breaks we can perhaps do something\n. @padraic #59\n. #59 should be merged\n57 should not be merged\n. @MarcelloDuarte this is ready to be merged, we @padraic included await to rebase, thanks!\n. @MarcelloDuarte @andho please let me know, thanks!\n. :baby: :+1: \n. oh rants, will remove the other files\n. gah worst sorry , will fix right this time\n. :baby:  nice catch @whatthejeff :+1:  ready to go\n. could you just use\n$entityA->__call('getMemeberA', null)->shouldBeCalled()->willReturn(\"memberA\");\nand see what happens?\nOn Sat, Jul 6, 2013 at 3:52 PM, Raul Rodriguez notifications@github.comwrote:\n\nSay if I have an class that uses magic setter and getters, like in\nDoctrine with the class Persistent Object.\nabstract class BaseEntity{\n    public function __call($method, $args)\n    {\n        $command = substr($method, 0, 3);\n        $field = lcfirst(substr($method, 3));\n        if ($command == \"set\") {\n            $this->set($field, $args);\n        } else if ($command == \"get\") {\n            return $this->get($field);\n        } else {\n            throw new \\BadMethodCallException(\"There is no method \".$method.\" on \".get_class($this));\n        }\n    }}\nclass EntityA extends BaseEntity{\n    protected $memberA;}\nIf I Spec to access this member\n/*     * @param D4m\\PhpSpecPlayGround\\Entity\\EntityA $entityA     /\n    function it_should_return_response_when_executing_service($entityA)\n    {\n        $entityA->getMemberA()->shouldBeCalled()->willReturn(\"memberA\");\n        $this->setEntity($entityA);\n        $response = \"memberA\";\n$this->execute()->shouldReturn($response);\n}\nI got this error , How could I make PhpSpec aware of those dynamic methods?\nD4m/PhpSpecPlayGround/Service/ServiceWithEntity\n  18  ! it should return response when executing service\n      method Double\\D4m\\PhpSpecPlayGround\\Entity\\EntityA\\P51d882bcb03ab::getMemberA() is not defined.\nRepository testing this issues are here:\nhttps://github.com/raul782/phpspec-playground/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/phpspec/phpspec/issues/149\n.\n. thanks @MarcelloDuarte :baby: \n. have you tried with beConstructedWith and also setting expectations with a particular signature and then also specifying when the signature is different to then throw an exception?\n. which is your use case? just curious\n. I am totally not fond of drupal, but that said\n\nif you use composer there should be no problems sticking to src\nI even thought there was already a flag to change this, mabe i am wrong\n. what issues were you having? i thought the code was running ok :baby: \n. why a script wrapping it and not an extension @stof ? :baby: \n. if i use $this->getWrappedObject()->shouldHandle() then i get:\n``` cli\n        Namshi/Notificator/Notification/Handler/HipChat\n  27  ! should handle hipchat notifications only\n        error: Argument 1 passed to Namshi\\Notificator\\Notification\\Handler\\HipChat::shouldHandle() must implement interface\n        Namshi\\Notificator\\NotificationInterface, instance of PhpSpec\\Wrapper\\Collaborator given, called in\n        /Users/cordoval/Sites/notificator/spec/Namshi/Notificator/Notification/Handler/HipChatSpec.php on line 29 and defined in\n        /Users/cordoval/Sites/notificator/src/Namshi/Notificator/Notification/Handler/HipChat.php line 28\n```\nI tried also:\nphp\n<?php\n//...\nfunction it_should_handle_hipchat_notifications_only()\n    {\n        $hipChatNotification = new HipChatNotification('a', 'b', []);\n        $otherNotification = new EmailNotification('a', []);\n        $this->getWrappedObject()->shouldHandle($hipChatNotification)->shouldBe(true);\n        $this->getWrappedObject()->shouldHandle($otherNotification)->shouldBe(false);\nbut :\nFatal error: Call to a member function shouldBe() on a non-object in /Users/cordoval/Sites/notificator/spec/Namshi/Notificator/Notification/Handler/HipChatSpec.php on line 29\n. managed to do this ugly thing but is far from friendly\n``` php\n<?php\n// ...\n        if ($this->getWrappedObject()->shouldHandle($hipChatNotification)) {\n            throw new \\Exception('fails');\n        }\n        if ($this->getWrappedObject()->shouldHandle($otherNotification)) {\n            throw new \\Exception('fails');\n        }\n. i see it passing\n. @jakzal what versions you use? please paste your json thanks\n. oh so you are saying expect is already in phpspec, so no need for bossaconsulting/expect?\n.\nFatal error: Class 'PhpSpec\\Wrapper\\Wrapper' not found in /Users/cordoval/Sites/project/vendor/bossa/phpspec2-expect/expect.php on line 89\nCall Stack:\n    0.0003     233712   1. {main}() /Users/cordoval/Sites/project/vendor/behat/behat/bin/behat:0\n    0.0102    1403664   2. Symfony\\Component\\Console\\Application->run() /Users/cordoval/Sites/project/vendor/behat/behat/bin/behat:32\n    0.0128    1729432   3. Behat\\Behat\\Console\\BehatApplication->doRun() /Users/cordoval/Sites/project/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:121\n    0.1706    5680320   4. Symfony\\Component\\Console\\Application->doRun() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Console/BehatApplication.php:68\n    0.1707    5681392   5. Symfony\\Component\\Console\\Application->doRunCommand() /Users/cordoval/Sites/project/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:184\n    0.1707    5681624   6. Symfony\\Component\\Console\\Command\\Command->run() /Users/cordoval/Sites/project/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:892\n    0.2006    7527344   7. Behat\\Behat\\Console\\Command\\BehatCommand->execute() /Users/cordoval/Sites/project/vendor/symfony/symfony/src/Symfony/Component/Console/Command/Command.php:244\n    0.2008    7541328   8. Behat\\Behat\\Console\\Command\\BehatCommand->runFeatures() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Console/Command/BehatCommand.php:128\n    0.2075    7773984   9. Behat\\Gherkin\\Node\\AbstractNode->accept() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Console/Command/BehatCommand.php:150\n    0.2075    7774288  10. Behat\\Behat\\Tester\\FeatureTester->visit() /Users/cordoval/Sites/project/vendor/behat/gherkin/src/Behat/Gherkin/Node/AbstractNode.php:42\n    0.2232    8517864  11. Behat\\Gherkin\\Node\\AbstractNode->accept() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Tester/FeatureTester.php:88\n    0.2232    8517864  12. Behat\\Behat\\Tester\\ScenarioTester->visit() /Users/cordoval/Sites/project/vendor/behat/gherkin/src/Behat/Gherkin/Node/AbstractNode.php:42\n    0.2259    8525624  13. Behat\\Behat\\Tester\\ScenarioTester->visitStep() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Tester/ScenarioTester.php:87\n    0.2263    8526008  14. Behat\\Gherkin\\Node\\AbstractNode->accept() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Tester/ScenarioTester.php:148\n    0.2263    8526008  15. Behat\\Behat\\Tester\\StepTester->visit() /Users/cordoval/Sites/project/vendor/behat/gherkin/src/Behat/Gherkin/Node/AbstractNode.php:42\n    0.2264    8526008  16. Behat\\Behat\\Tester\\StepTester->executeStep() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Tester/StepTester.php:95\n    0.2266    8526568  17. Behat\\Behat\\Tester\\StepTester->executeStepDefinition() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Tester/StepTester.php:126\n    0.2266    8526568  18. Behat\\Behat\\Definition\\Annotation\\Definition->run() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Tester/StepTester.php:157\n    0.2266    8527496  19. call_user_func_array() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Definition/Annotation/Definition.php:155\n    0.2266    8527920  20. FeatureContext->examHasQuestion() /Users/cordoval/Sites/project/vendor/behat/behat/src/Behat/Behat/Definition/Annotation/Definition.php:155\n    0.2267    8528448  21. expect() /Users/cordoval/Sites/project/features/bootstrap/FeatureContext.php:102\n```\n. @jakzal @MarcelloDuarte ^^ :smile: \n. @ciaranmcnulty i do have it installed lol, I used it in my project. Maybe i need to set up further the autoload.\nNotice i am using behat with phpspec, so that maybe a cause for the problem. In this situation the autoloader for behat must be configured i guess, just wondering how to plug the autoload to load phpspec on a behat context without doing requires. There is a behat.yml entry maybe you guys have handy?\n. it is not \ncli\ncordoval\u2022/Users/cordoval/Sites/project/vendor/phpspec/phpspec(master)\u00bb\n\u25a0 ## master\n*   1014ba1 - (HEAD, origin/master, origin/HEAD, composer/master, master) Merge pull request #132 from docteurklein/fix/#131/newInstance (3 months ago) <Konstantin Kudryashov>\n|\\\n. ```\n~ composer update phpspec/phpspec                                                                Luiss-MacBook-Pro-2 [16:36:43]\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Updating phpspec/prophecy dev-master (651c8c1 => 7deb464)\n    Checking out 7deb464a999bb21e2d7b1637097d6d13117f63d6\n\nUpdating phpspec/phpspec dev-master (1014ba1 => 79f9127)\n    Checking out 79f91276fc8c853596b8180103d93762072e457a\n\n```\n. thanks @ciaranmcnulty you da man\n. i am not sure you are doing things right when you said:\n$this->getFoo()->someFunction()->shouldBe(12345);\ni would guess you want something like:\n$this->someMethod()->shouldBe(12345);\nif you want to spec the factory then spec the factory, but do not mix behaviors?\nmaybe i am seeing things wrong, but that is what I can ask\n. please correct your code above to reproduce\n. can you now replace the closure with an object and then stub the closure?\n. ``` php\n /*\n     * @param Foo $foo\n     * @param FooFactory $factory\n     /\n    function it_blah_blah($foo, $factory)\n    {\n        $foo->someFunction()->willReturn(12345);\n        $factory->get()->willReturn($foo);\n        $this->setFooFactory($factory);\n    $this->someOtherFunction()->shouldBe(12345);\n}\n\n```\n. write a side FooFactoryInterface maybe and use that, the callback is a \\Closure anyway so you can spec/stub that\n. are you specking a mongo inmemory repository?\nnice improvement, often we need some more info or more presentable :baby: :+1: \n. it is still a valid issue\n. nevermind it is symfony2 version\n. :+1: \n. :shipit: :+1: good job!\n. @stof so you are saying that for libraries is not fit to maintain parallel versions(\"releases\") but it is only justified in some cases for frameworks such as Symfony?\n. I don't keep track of whether which thing is merged on 2.3 or 2.4 et al in symfony but i think keeping track can be a nightmare. I am glad this repo is going a more simple way. What i was asking is so i can tackle with Gush the more generic case for lib maintainers. Thanks for your explanations @stof, always teaching. :+1: \n. :+1: that was hard, nice cats man\n. I am locked up in a hotel room so not mobile, and this is a must merge :baby: :+1: \n. all good Kuba :baby: \n. why not using grunt watch schemes http://www.craftitonline.com/2013/08/grunt-js-symfony2-big-brother-watches-your-phpspec-descriptions/ I mean don't get me wrong, I like to have a php implementation of the same, but just saying if you must use it now\n. he means unefficient, is the french translation, un____it\u00e9 :baby: \n. @stof are you saying that the use of such static methods in Laravel often lead people into writing procedural code? Good insight.\n. i see, nice, so as an artisan I can use both procedural and OO, but understand their difference and their usage of tools and opinions. Thanks for the great explanation @stof\n. interesting debate, for that refer to the source https://github.com/symfony/symfony/issues/4183\n. my 2 cents too for Boolean, and i put in some matches. 2 + 2 = 4 :+1: \n. just to season it a bit, the community is all over the map https://github.com/symfony/symfony/pull/10546#discussion_r11012448 :dancer: \n. :+1: you are da legend :baby: , maybe reference the other ticket just to make history\n. is there a reason why this one was closed? I am going to copy the code and put it in an extension for me to use and give the ability to other users to do so before waiting for this to be resolved :+1: i fully agree with @everzet in these type of practices and have 0 tolerance for slacking on enforcing it in my projects :blush: \n. is ok i got what i needed, just don't like to copy paste templates for all projects over and over so i created a package http://www.craftitonline.com/2014/09/be-strict-phpspec-2-best-practices-extension-just-released/ here https://packagist.org/packages/cordoval/best-practice-extension but definitely will adapt as PRs like this get merged into the core, thakns @ciaranmcnulty :+1: \n. I agree with keep it simple. I think this is what extensions are for. Being in core means you enforce it more, but it is all about just plugging it for enforcement. I like @mdavis1982 implementation, but I agree with @ciaranmcnulty that it will end up a mess in core ultimately. So :+1: for enforcing even with an extension, :-1: for doing it like this.\n. \"avoiding copying templates\" so the extension has opinionated templates already for all projects when enforcing things strictly. And keeps the simplicity of overriding like the idea from @everzet. I think you are thinking I am copying code, check when you get home the blog post. If after that you think i still need to put a credit is no problem to me we can do add it. Just let me know.\n. yep sounds like a good idea, i think a footnote with the link to this issue on the features list would do, because i plan to include some more as they come useful in production\n. I saw it on an iphone 5s and the font of the code is a bit big but still you can do gestures and get the code, I don't know how to reduce it or make it responsible in wordpress at least. I was thinking in moving to pagekit but recently being a bit spending time with family :blush: \n. This feature is not working right for me on dev-master, after i generate the class it keeps asking for it to be generated over and over...\n```\n~ php bin/phpspec run                                                  Luiss-MacBook-Pro-3 [20:43:51]\n  Cordoval\\Console\\Application\n\n16  ! is initializable\n        class Cordoval\\Console\\Application does not exist.\n----  broken examples\n    Cordoval/Console/Application\n\n16  ! is initializable\n        class Cordoval\\Console\\Application does not exist.\n0 specs\n1 examples (1 broken)\n8ms\nDo you want me to create Cordoval\\Console\\Application for you?\n                                                               [Y/n] y\nClass Cordoval\\Console\\Application created in /Users/cordoval/Sites/lib/console-app/src/Application.php.\n  Cordoval\\Console\\Application\n\n16  ! is initializable\n        class Cordoval\\Console\\Application does not exist.\n----  broken examples\n    Cordoval/Console/Application\n\n16  ! is initializable\n        class Cordoval\\Console\\Application does not exist.\n0 specs\n1 examples (1 broken)\n8ms\nDo you want me to create Cordoval\\Console\\Application for you?\n                                                               [Y/n]\nFile \"Application.php\" already exists. Overwrite?\n                                                               [y/N]\n  Cordoval\\Console\\Application\n\n16  ! is initializable\n        class Cordoval\\Console\\Application does not exist.\n----  broken examples\n    Cordoval/Console/Application\n\n16  ! is initializable\n        class Cordoval\\Console\\Application does not exist.\n0 specs\n1 examples (1 broken)\n8ms\nDo you want me to create Cordoval\\Console\\Application for you?\n                                                               [Y/n]\nFile \"Application.php\" already exists. Overwrite?\n                                                               [y/N]\n  Cordoval\\Console\\Application\n\n16  ! is initializable\n        class Cordoval\\Console\\Application does not exist.\n----  broken examples\n    Cordoval/Console/Application\n\n16  ! is initializable\n        class Cordoval\\Console\\Application does not exist.\n0 specs\n1 examples (1 broken)\n7ms\nDo you want me to create Cordoval\\Console\\Application for you?\n                                                               [Y/n]\nFile \"Application.php\" already exists. Overwrite?\n                                                               [y/N] Y\nClass Cordoval\\Console\\Application created in /Users/cordoval/Sites/lib/console-app/src/Application.php.\n  Cordoval\\Console\\Application\n\n16  ! is initializable\n        class Cordoval\\Console\\Application does not exist.\n----  broken examples\n    Cordoval/Console/Application\n\n16  ! is initializable\n        class Cordoval\\Console\\Application does not exist.\n0 specs\n1 examples (1 broken)\n8ms\nDo you want me to create Cordoval\\Console\\Application for you?\n                                                               [Y/n]\n```\n. i also think there should be an option to support fully specs on PSR4\n. here is the repo to reproduce https://github.com/cordoval/console-app, i am not seeing an extra folder MyNamespace because i think it shouldn't be needed but i think this should be supported\n. you are talking about a workflow with state right? I am thinking this is used in several tools, not just phpspec. Don't you think?\n. @gquemener @MarcelloDuarte did you see my comments on the related ticket? I was talking about bldr also which could keep the flow out without state, the state could even be based on environment variables\n. i agree with @stof well and even decoupling that tool to have engine separate so that things can be shared\nalso @MarcelloDuarte madness until you see examples of things like workflow/vespolina based on petri nets or the other that sylius is using\n. you were talking about workflow, maybe your connotation was different from the workflow connotation there, i was talking about that part of the BDD workflow tool\n. @stof do you think the dependencies here on the composer.json should be tighter to the 3rd digit so the ~ would not take us through the braks from 2.1 onwards? that i know the promise and BC compatibility applies from 2.3 onwards, so imo we should be doing this in all projects, unless is deliberate. But that is for symfony, for other libraries it should also be even more carefuly. But i could be wrong, if so please correct me @stof :cake:\n. @stof i meant to perhaps get feedback to open a separate ticket, it is not related.\n\" semver constraint\" what you mean by that ~2.1 vs ~2.1.0 ? even when api is not broken, added features can break sometimes the userland layer, doing it ~2.1.0 makes it safer to just include bugfixes alone.\n. correct but i am referring to the cases where you add a method that is being overwritten already, that breaks stuff. This is explained at the beginning of the document \n\"For example, if we add a new method to a class, this will break an application which extended this class and added the same method, but with a different method signature.\" ref. http://symfony.com/doc/current/contributing/code/bc.html\nof course it is an edge case but honestly we have little control on userland so that is why specifying 3 digits like in nodejs and elsewhere is a better practice imo. At least in userland, not in library maintainer land.\n. to use multiple event subsystems you can refer to http://php-and-symfony.matthiasnoback.nl/2014/08/symfony2-event-subsystems/\n. is the docu for this also updated?\n. :+1: for moving as it causes confusion if the docu is stale/stagnate on its currently deploy/place\n. let me try this, i want to see a cookbook on this too\n. :+1: \n. good to go on this one @ciaranmcnulty :+1: \n. :blush: @ciaranmcnulty hi thought these may help\n. now i will adapt this one\n. @ciaranmcnulty @stof review please\n. these britons! oke I will comply :blush: you guys did a superb job on documenting on the cookbooks\n. i wonder if we could add a cookbook for adding a PSR4 example of using phpspec\n. ping @ciaranmcnulty @stof \n. of course it should be optional for those who want/work currently on 5.4+ onwards\n. when you say shouldHaveType('FQCN')  is the same, the error will come because of a non existent class that can be catched in by phpspec no? i thought that was the process too with the spec. Let me do some actual manual tests to see the flow, it worked for me great i thought at least.\n. I think the behavior of the tool in reality is different of what you are assuming @stof \nI just confirmed and it prompts me to generate the class after it generates the spec. So not a single error, and I was expecting that since it is just generation it is not compilation of what is generated, unless I am not considering some rerun of some kind but that rerun really prompts for generation of the class as it is happening and no error. Perhaps I will ask @sstok if he can double check :ambulance: with my code\n. I am closing since i created an extension with it https://packagist.org/packages/cordoval/best-practice-extension and i think this can be easily achieved with the extension or a custom one.\n. thanks for confirming, that is what i have been saying from the very beginning :+1: \n. i did too for a while, until ...\n. :+1: \n. oh interesting explanation @stof never knew, thanks!\n. @stof this is an automated run with .php_cs i can adapt or remove some rules if need be\n. yes i will adapt the PR, just give me a sec :blush: \n. closing in favor of #526 \n. true, it is a file that was empty\n. sure thing, done\n. There were files missing license headers. This PR completes these to make it consistent.\n. @stof i think having spec and source consistent headers makes sense e.g. https://github.com/Sylius/Sylius/blob/master/src/Sylius/Component/Attribute/spec/Sylius/Component/Attribute/Model/AttributeSpec.php#L3-L10, are you sure then we need to remove the headers on specs and contexts? just tell me and i can do the change no probs.\n. is not about being fan, is about consistency, i just need to know which direction if src has headers or also specs or none or all. 4 options.\n. ok going for it, thanks @stof \n. @stof :+1: good to go\n. @stof i am not saying we shouldn't support it, I am saying the current implementation could be done in a more clean way perhaps. Right now we have half support.\n. half support blocking full support is worst than no support at all. True it can be merged. Some though may settle for less. But let's see perhaps someone will do it.\n. @stof all good now\n. i guess also phpspec would discourage you from using magic and favor interfaces with defined methods?\n. oh cool i never knew you could do that\n. i think they leave it without breaklines on purpose and later they add this on the generated string placeholder no?\n. however what is CODE  is null, you would be leaving 2 line breaks, not good :baby:   i think i saw @ocramius doing some of this\n. wonder if it can be applied here too, i mean this is code generation right @Ocramius \n. yes doing it now // i will do it first thing in the morning monday or tonight\n. so you don't like the extra commas i guess :baby: \n. @stop is the number of lines of a generated snippet without any method :baby: \n. @stof i see your point\nso i guess this should be turned into some kind of pregmatch then count the number of methods in the text, if 0 then do not add line break else do it.\n. @stof should we use tokenizer or reflection here? I think maybe a regexp is not the way to go\n. oh no :baby: is a french fork :baby: dispair!\n. that is present tense and is implicit :baby: \n. why not 4 spaces everywhere? is phpspec using different standards?\n. tester typo\n. start describing\n. this space continues i guess :baby: but yeah it is another bug\n. @mdavis1982 you may want to consider Gush :)\n. :+1: listen to the doctor\n. is this indentation correct? just curious\n. is thrown\n. runs_let_and_letgo_ ?\n. i say this because otherwise it would be letgoandletgomaintainer which is even weird\n. could you put it so that it could be the last constant? to avoid that the most we can\n. thought it was four spaces\n. this empty docblock and auto docblocks like on top of this class must go perhaps\n. yeah, i just assumed is your first time with phpstorm :baby: \n. comme on dit en la France, il n'a jamais \u00e9t\u00e9 l'intention :dancers: \n. not if done automatically with gush, gush can do this but i just changed this manually\n. ok going for a range then, thanks buddies :blush: \n. yes I will @ciaranmcnulty \n. it is improving, it is not yet completely fixing it :blush: , also i see your \"this looks weird to be actually\" is not right english but i can understand it\n. this is the sign of a native, now i believe you @ciaranmcnulty :blush: :calling: \n. ok so removign it\n. retorting with:\nThis will happen if and only if such and such conditions are met.\nOne condition is -> the object has x and b methods\nSecond condition is -> these methods return true\nbut i will revert as per your native suggestion\n. also use single quotes please 'b'\n. this i think needs to be reverted right @stof ?\n. good catch here\n. ",
    "mikesimons": "Without Mockery you get this:\n``````\nPHP Warning:  include_once(Mockery.php): failed to open stream: No such file or directory in /usr/bin/phpspec on line 176\nWarning: include_once(Mockery.php): failed to open stream: No such file or directory in /usr/bin/phpspec on line 176\nPHP Warning:  include_once(): Failed opening 'Mockery.php' for inclusion (include_path='.:/usr/share/pear:/usr/share/php') in /usr/bin/phpspec on line 176\nWarning: include_once(): Failed opening 'Mockery.php' for inclusion (include_path='.:/usr/share/pear:/usr/share/php') in /usr/bin/phpspec on line 176\nphpspec: Invalid number of arguments. Type -h for help```\n``````\n. ",
    "xenji": "This format that seems to be sufficient to hudsons jUnit result reader:\n<testsuite>\n     <testcase classname=\"foo\" name=\"ASuccessfulTest\"/>\n     <testcase classname=\"foo\" name=\"AnotherSuccessfulTest\"/>\n     <testcase classname=\"foo\" name=\"AFailingTest\">\n          <failure type=\"NotEnoughFoo\"> details about failure </failure>\n     </testcase>\n </testsuite>\nfound on http://stackoverflow.com/questions/4922867/junit-xml-format-specification-that-hudson-supports\n. I'm actually working on this feature. Expect a patch in the next two weeks.\n. Hey Marcello, \nyep, the feature has already been added.\nThanks for the response ;)\n. Hey, any news about this PR?\n. It's a pitty, that there is only the hard coded way to get formatters running. I would like to see something similar to this useless pseudo code. I hope you get the idea ;)\nphp\n$formatterClass = $namespace . ucfirst($formatArgument) . 'Formatter';\n// Check for class existence, interface inclusion, etc and use this one if present and usable.\nThis would enable me to put another formatter in my src/ folder and into the correct namespace without being nailed until this PR is accepted. \nI would offer a PR if there is the intention to implement such mechanism.\nThe basic idea is, that not everybody demands the assertions to be happy. It would be a great addition later on, but having a parseable result for my CI server is enough for a first step.\n. ah. nope, sorry. Then I'm looking forward to the next merge circle :D\n. ",
    "UnknownHero": "Hello. \nNow I can get the tests results ? Like  JUnit XML format.\nI use:   \"phpspec/phpspec\": \"2.0.*@dev\",\n. Thank you for such a quick response.\nDoes it make sense to do  \"junit formatter extension\" ?\nAlso , i did not find the any documentation about developing extensions.\n. I like the PHPSpec and I'I will inform if I have any results.\nThanks.\n. ",
    "stof": "I would say this should be closed and Behat should be used for this\n. @rafi v2 is a complete rewrite. It has no code in common with v1\n. and there is indeed no JUnit formatter in v2 yet. Please open a ticket as a feature request\n. 1 year ago, phpspec 2 did not exist yet\n. 1.4.3 is tagged on the latest commit before wiping the 1.x code in favor of 2.x so this should be closed @everzet @MarcelloDuarte \n. Closing as I fixed those months ago\n. I'm seeing only 1 issue locally, and it is intermittent: as I disabled XDebug (because the PHP 5.5 CLI sapi becomes slow as hell when I enable it), the spec for the SuiteRunner often runs too fast and the time is 0, thus failing the spec. It is not related to Windows itself.\nSee #148 and #147 for the PRs fixing these issues\n. Actually, I just discovered how I can switch the encoding of the Windows console to UTF-8: just run chcp 65001 to change it (65001 is the code for UTF-8 while Windows is using 850 i.e. Latin1 by default for me).\nAfter running it, it works fine. But it breaks some other CLI tool.\nIt may be great to have an option to ask phpspec not to use the unicode chars, or to just use something else on windows (may be better as it does not require any user action)\n. @ciaranmcnulty do you have an idea about how this can be done ?\n. Well, you should add the @param phpdoc for $db. Otherwise, phpspec cannot know how it should be stubbed\n. @MarcelloDuarte no PR yet\n. throw new SkippingException would be good for a first version IMO. Then, we should probably allow to define simple conditions through an annotation, like @requires in PHPUnit 3.7\n. @ciaranmcnulty I agree with @whatthejeff that the reason should be displayed only in verbose mode (exactly like for PHPUnit btw)\n. The great news is that now that the SkippingException allows marking examples as skipped, skipping through annotations can be implemented by an extension already\n. @ciaranmcnulty The exception does not come from class_exists. It comes from the CollaboratorsMaintainer which throws an exception before your example is called (when building the collaborator)\n. @gquemener register a maintainer with a higher priority than the CollaboratorsMaintainer (to avoid the issue described here) and throw the exception if necessary\n. @ciaranmcnulty if your code is depending on an Doctrine interface, you might want to test it without spawning the full Doctrine and a mongo server.\n. Closing as the environment variable for Windows has been fixed in 8a556b51e1d758f8fe9add280008eb333c158113\n. spec\\Sylius\\Bundle\\ProductBundle\\Builder\\ProductBuilderSpec in [...]/ProductBundle/spec/Sylius/Bundle/AssortmentBundle/Builder/ProductBuilderSpec.php. It looks like a bad copy-paste of the spec class between bundles where you forgot to update the namespace\n. this example misses either the typehint or the phpdoc for $die\n. @karolsojko @everzet what should a shortcut willBeFluent() or something like that ?\n. @bendavies It is not yet possible to use such classes in PhpSpec, no. This is precisely what this feature request is about\n. It has to be redone from scratch. PhpSpec has been rewritten entirely between the first prototype of v2 (available in phpspec/phpspec2 repo) and the actual version 2. The architecture is quite different (the alpha version was based on Mockery rather than Prophecy for instance, as Prophecy was not yet created).\n. Are you enabling APC in the command line ?\n. See https://github.com/phpspec/prophecy/issues/38\n. @MarcelloDuarte @everzet what do you think about the case I mentioned regarding the StringEngine ?\n. This would do weird things on Windows as \\r\\n (i.e. PHP_EOL contains \\n).\nDoing the opposite replacement and exploding on \\n would work better, but it would not allow identifying line ending changes anymore.\nand note that the same replacement must be done on the output to avoid having to make each testsuite converting the expected output (especially when the code is returning \\n all the time as it would be counter-intuitive to expect PHP_EOL)\n. your issue is that your lib does not follow PSR-0, so telling composer to use a PSR-0 autoloader does not work. Your class cannot be autoloaded with PSR-0 if it is located in src/FooClass.php\n. It cannot map src/FooClass.php to some PSR-0 compatible path.\nIt works for HttpFoundation because there is not src folder in it, so it is possible to tell Composer to install it in the appropriate folder structure (see the target-dir setting)\n. phpspec describe is not about creating the controller class. It is about creating the spec for the controller class\n. well, is it autoloadable properly ?\n. what is the fully qualified class name of the class defined in widget.php ?\n. The issue is that you are saying namespace: controller while your class does not have a namespace\n. your spec_path and src_path still need to point to tests and classes to be the PSR-0 root.\nHowever, I'm not actually sure that the PSR0Locator handles underscores properly to follow PSR-0\n. This is indeed not documented yet. See https://github.com/henrikbjorn/PhpSpecCodeCoverageExtension for an example of an extension registering a listener\n. nope. I haven't spent time looking at how this can be done\n. @ciaranmcnulty This issue is not about constructing using a static method (you are confusing with #141). The description asks to write spec for static method.\nFor me, this is out of the scope of PhpSpec (and totally incompatible with the current architecture). PhpSpec describes itself as a tool to specify the object behavior. There is no object in the code shown in this issue. There is only a function with a global state.\n. If you rerun it in the same PHP process, PhpSpec will run with the old class definition as PHP does not reload class definitions during a process.\nso the only way to run phpspec as a watcher is to have a separate watcher process spawning a subprocess to run phpspec (and I think such watcher should not be a phpspec extension but a script wrapping it)\n. @cordoval As I said above, each phpspec run has to be a separate PHP process to make it work. So using a PhpSpec extension for it is totally overkill. there is no reason to run phpspec in the main long-running process while none of the phpspec logic should be executed in it.\n. Wouldn't it be more logical to build the HTML report in a buffer instead of outputting it directly ? It would allow using it in the CLI to build a report in an HTML file (as a build artifact on Jenkins for instance) in an easier way (like done for Behat for instance)\n. This is possible using $this->callOnWrappedObject('shouldHandle', array($hipChatNotification)).\nNot as easy as when the magical shortcut can be used, but it works.\n. this is assuming that the object implements both Traversable and ArrayAccess, not only Traversable (and that the ArrayAccess is accessing the same elements than the loop, but this one could be a sane expectation).\nthere is lots of cases where such code cannot work at all.\n. @rommsen why would it prevent it ?\n. @docteurklein can you rebase it ?\n. @ciaranmcnulty I suggest putting this on hold until we decide what we do with Testwork (if we go the way of using Testwork extensions, this proposal will be obsolete)\n. Casting to an array will not show the differences in private or protected properties, so the diff would be useless in many cases\n. @docteurklein I did not know that the array casting would keep the private and protected properties. However, it would loose them for traversable objects\n. \"\"1\"\" looks weird to me\n. why labelling it as 5.4 ? 5.3 is also affected, no ?\n. looks good but you will need to wait for someone else to merge (I'm maintainer on Prophecy but not on PhpSpec)\n. @nonlux I think PhpStorm is running the console in non-interactive mode.\n. @LewisW The spec path would be vendor/phpspec/phpspec/spec and the src path would be vendor/phpspec/phpspec/src\n. see https://github.com/BossaConsulting/phpspec2-expect\n. @jakzal As the formatter is a service now, the logic injecting the dependency should ba part of the service definition\n. I would probably be easier to review if the extraction of the Assembler was a change on itself, without any change in the content of the container. By putting both in the PR, it makes it impossible to see the actual changes related to formatters\n. Actually, I will squash this PR before merging as the history is messy anyway because of the reverted refactoring, so I will handle the few fixes myself\n. Closing in favor of #247\n. -1 for this change. Your SuiteRunner now mixes several responsibilities (loading the suite and running it), while the existing one is only responsible of running a suite\n. The difference is that previously, the responsibility of the SuiteRunner can be described as a single one: Run the suite. Dispatching events and iterating over steps are about how it is implemented, not about what runSuite($suite) is about (you could replace the dispatching of events by a different kid of extension point without changing the responsibility of the runner).\nOnce you add the loading of the suite in it, it cannot be described as running a suite anymore (it does not receive a suite anymore)\n. @nixilla No, because ArrayObject gets a special treatment in PHP. So if offsetExists returns false, the call to array_key_exists will not break when using ArrayObject but will break for custom ArrayAccess\n. and I'm saying it is broken after your change for custom ArrayAccess implementations, not before\n. @ciaranmcnulty it will not short-circuit in case it does not have the key\nbut it looks like array_key_exists actually supports calling it with anything as second argument without complaining (you can even pass it a stdClass instance, but it will always return false for anything else than arrays and ArrayObject). It thought the array_* functions were throwing a Warning on invalid input instead of just failing silently.\n. @MarcelloDuarte Not needed, ArrayAccess is fully handled by the isset() check (which proxies to offsetExists).\nWhat I was asking is to wrap the call to array_key_exists in a check is_array($subject) || $subject instanceof ArrayObject, but it is actually not necessary. so the PR is fine as is\n. I agree with @ciaranmcnulty. It should be handled by shouldHaveType\n. @karolsojko shouldImplement, shouldBeAnInstanceOf and shouldHaveType are exactly the same currently. They should stay the same. all of them should trigger the generation of the implements clause if they are used on the spec subject (not if the matcher is done on a different instance, like a method return value) and the type is an interface name.\nAnd in case the type is not an existing class name or an existing interface, it should suggest generating it in all cases. However this case is a bit more complex in case you have a different spec for a class with this name, as we cannot generate both a class and an interface. It should ask you to generate an interface with this name only if there is no other spec asking to generate a class for it.\n. @l3l0 The existing matcher let you use shouldImplement with a class name too. It simply does an instanceof check. shouldImplement, shouldHaveType and shouldBeAnInstanceOf are simply aliases for the same thing to allow making the spec more readable.\nIn this PR, the matcher for shouldImplement is modified to check only interfaces. This cannot be merged as it is a BC break.\na type can indeed be a class or an interface. Personnaly, I think you should always use an interface to define types expected on your object (telling an object it should be an instance of its own class will not be useful anyway). For a justification, I suggest you to read http://www.brandonsavage.net/the-difference-between-class-and-type/ as I agree with what it says.\n. @karolsojko  I don't say it should. I said it can be used this way currently, so changing it breaks BC.\n. and I also agree with @ciaranmcnulty. In a spec, what you really care about is that your object follows a given contract (i.e. a type). Whether this contract is defined through an interface or through a class does not change anything to the contract itself. So the spec does not care at all. \nimplement should be understood as \"implementing a contract\" in a spec. the fact that PHP has a implements keyword for interfaces is totally unrelated (well, not totally because the reason of the keyword naming is related to the reason of the naming of the matcher). This is why I think shouldHaveType is a better choice than its shouldImplement alias for spec, just to avoid confusion with the keyword.\n. @karolsojko It is a BC break, as it changes the meaning of the matcher to a stricter one.\nIf yoru class extends Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller, shouldImplement will pass before your change, and fail after your change, with the same code and the same spec => it breaks BC.\nAnd as I said in my previous comment, shouldImplement('...') has the meaning should implement the contract '...'. It is not related to the fact that this contract is defined by a class or an interface. You are confusing the meaning of the matcher \"implement a contract\" and the PHP keyword implements, which has a narrower meaning because interfaces are not the only way to define contracts in PHP.\n. @karolsojko you say it should be different. I'm saying it is exactly the same thing, because I'm thinking about the meaning of the verb implement instead of considered it as \"implement\" means that the code should use the \"implements\" PHP keyword\nit's most commonly used in the context of an interface still does not allow you to change its meaning into a minor release to it can only be used in the context of an interface. There is a huge difference between the common case and the allowed cases.\nAnd I don't think we should have a matcher checking only interfaces. From a BDD point of view, there is strictly no reason for it. The spec does not care at all about how you contract is defined in PHP. what it wants is that your class implements this contracts.\n. @karolsojko please read my comment above: https://github.com/phpspec/phpspec/pull/215#issuecomment-28566382 I'm not saying it should not try to generate interfaces. I'm saying it should not change the meaning of shouldImplement to do it. There is no need to restrict the meaning of the matcher for this feature, as I've been able to specify it without needing to restrict it.\nand your interface generation actually covers 2 separate features:\n- the requested type is known to be defined through an interface in PHP. Suggestion done by PhpSpec: generate the implements clause in the specified class and stub methods for all methods of the interface (to avoid fatal errors)\n- the requested type is known to be defined through a class (checked with class_exists): don't generate anything, as generating an extends clause is a bad idea. The user will need to work on it\n- the requested type matches a trait name on PHP 5.4+: throw an error as a class or interface cannot have the same name than a trait in PHP, and a trait does not define a type. You need to rename either the trait or the type.\n- the requested type is unknown (i.e. it is not yet defined in PHP). For this second case, the work is more complex.\nThe type could be another class for which we wrote a spec, without implementing it yet. We should not suggest to generate an interface, as we can know it is expected to be a class and PhpSpec will already ask to generate it. (this is probably a weird case, but we need to take it into account to avoid breaking stuff in case you have several WIP spec at the same time)\nOtherwise, PhpSpec can suggest creating an interface for this type. I'm not sure whether it should generate the implements clause directly. It could first ask you to define the type totally by adding the needed methods in it, so that the next PhpSpec run could generate the stub methods at the same time than the implements clause.\n. why do you want a different matcher ? The existing matchers are already telling PhpSpec all the needed info about the expected behavior. My previous comment describes what happens when the spec tells PhpSpec that your subject should have a type (through the existing TypeMatcher with its existing meaning), and PhpSpec figures it does not have it yet.\nOnly the generator tooling needs to be enhanced with more cases, not the matchers available to spec writers.\nThe existing TypeMatcher will need to be refactored a bit to give more details when throwing the failure exception (so that other parts of PhpSpec can identify the failure), but the matching method is not a part needing to be changed\n. @karolsojko PhpSpec is generating classes for the specified classes, because it is the only things which makes sense: PhpSpec will verify than an implementation follows the spec. So the spec can only be related to an implementation (i.e. a class), not to a contract.\nBut please read again carefully why we answered you many times. We never said that PhpSpec should not suggest generating an interface for unknown contracts. what we are rejecting is your proposal to have a special matcher for it while shouldHaveType (and its aliases) is already the matcher you need for this.\n. seems like you should add a test to avoid regressions\n. @MarcelloDuarte is there anything preventing to merge this ? The Prophecy specs are failing because of this regression for instance\n. @jakzal any news of your initial PR ?\nSuch functional tests are a must have to avoid regressions like https://github.com/phpspec/phpspec/issues/242\nCurrently, such issues are not caught by the testsuite (we see them when running phpspec on Prophecy or other libraries)\n. :+1: \n. @MarcelloDuarte I think RC2 could be OK once the fix for #242 is merged. However, I would consider #218 as critical before tagging the library as stable\n. @MarcelloDuarte And I think providing a way to avoid #106 would be a good idea (maybe a pretty-no-unicode formatter using ASCII chars instead of the unicode chars in the output ?)\n. the Prophecy suite is now passing properly (except on HHVM which is not compatible yet)\n. The PHP documentation documents it as being optional. I suggest you to report this bug to HHVM so that they fix the inconsistency on their side as well.\n. Instead of putting a version_compare for PHP 5.3.3, I suggest detecting HHVM for their bug instead\n. @mdavis1982 your suggestion is OK, except that you need to swap the 2 cases: it is HHVM which needs the array.\n. other methods are not providing a fluent interface in th class, so I would find it weird\n. @docteurklein I moved the discussion to the issue tracker of the extension as you have a valid argument there. Feel free to add more details\n. I think your change does not allow extensions to provide their own commands, while it is possible currently.\nIt does not allow using DI in commands either as they are retrieved from the container before the container is build\n. @andytson The issue with the Doctrine ClassLoader is that as it does not do a stat call, doing a class_exists call on a non-existent class name (which is a normal use case) triggers a fatal error. This is why the composer autoloader will not change its behavior\n. Some specs are failing\n. Agreed. It would be even better if Prophecy 1.0.5 was released btw.\n@docteurklein I checked the git history of Prophecy to see what added the spec about final constructor (which is failing currently). And the change was related to any final constructor, not only internal classes. The title of the example was misleading in the spec. So could you submit again your fix for the spec ?\n. yes (it needs to be separate anyway as it is in Prophecy)\n. @MarcelloDuarte Have you updated your vendors to run it locally ? You need the newer prophecy version\n. @MarcelloDuarte I reapplied the merge (which also fixes the test method on Travis).\n@docteurklein Can you send the Prophecy PR fixing its spec for final constructors ? I would like to release a new stable version once it is done, so that PhpSpec can depend on a stable version of Prophecy again\n. @jakzal it has been removed because it was not behaving properly when people were trying to pass arguments (and the Symfony 2.5 feature does not solve this case, it documents it as a limitation of the feature).\nThe alternative would be to switch to a single command app, as done in Behat, instead of having run and describe. The describe command is similar to what Behat achieves with --init.\nHowever, as this would break BC for the CLI, it must be done before going to 2.0 stable (or be delayed until 3.0)\n. @ciaranmcnulty Options work. But arguments don't, as the first argument would be interpreted as a command name.\nFor PhpSpec, I think it could make sense to switch to a single-command mode to simplify the CLI.\nIt may even make things easier if we decide that PhpSpec 3 is rebuild on top of Behat Testwork (the CLI could stay BC if we are already using a single-command app in 2.x).\nNote that building on top of Testwork is something I will experiment when I have some time for it, as it will be perfect way to test that the design of Testwork is good.\n. @ciaranmcnulty if you have options with values, there may indeed be the same issue than for arguments (phpspec -c foo will parse foo as the command name). It works only for options without arguments (--no-ansi for instance).\nRegarding Testwork, I will do it only after I'm done with the updates of MinkExtension and Symfony2Extension in the Behat ecosystem (Testwork will be splited from the Behat source only for the 3.1 release anyway, to let us refactor it without dealing with BC concerns on other tools for now)\n. @andho github tells me that your pass-by-reference branch is identical to phpspec:master\n. @estelsmith see the comments on the PR\n. @andho Even if you have merge rights on the repo, please wait the review before merging (the current state of the PR should have been rejected)\n. @andho Can you work on cleaning your implementation ? Otherwise, I'm in favor of reverting the merge (to avoid forgetting that we have dirty code needing to be cleaned). I cannot revert the merge myself though (I have write access on Prophecy, not on PhpSpec)\n. @andho Please rebase your branch as I merged the fix of the Travis setup. This will give you a proper Travis build (the current PR code should not pass the build)\n. This passes the argument by ref to the underlying method, but not the original argument. it passes a reference to a copy of the argument. I don't know whether this should be considered as an issue or no\n. I don't. But maybe some others do: https://github.com/BossaConsulting/phpspec2-expect\n. @MarcelloDuarte any thoughts about the FormatterInterface ?\n. It is now removed. This PR is ready to be merged\n. @ciaranmcnulty your previous comment seems to be incomplete. The end of the sentence is weird\n. Please use 2 spaces as it is the convention for Gherkin\n. @MarcelloDuarte These whitespaces changes are done by PhpStorm as I have it configure to trim the trailing whitespaces automatically. To avoid such changes in future diff, I have a branch locally fixing the phpdoc and the coding standards on the whole library, but it would conflict with #247 so I'm waiting the merge before submitting it.\n. Submitted. See #250\n. rebased\n. @MarcelloDuarte I used mostly the PHP-CS-Fixer tool, but reviewing all its changes carefully (because I rejected some of its changes) and disabling some of its fixers for the spec folder (mostly the fixer adding the visibility on methods).\nfor the phpdoc, I did it by hand, with the help of my IDE (while reviewing the fixer changes)\n. indeed it is. @MarcelloDuarte asked me to open a feature request on github, but I forgot to check existing ones first\n. this should be reported to Prophecy, as it is where the issue lies.\n. AFAIK, there is no standard for Yaml.\nThe Symfony2 ecosystem tends to use 4 spaces, but this is probably because of the standard for PHP. A good argument for this reason is that the symfony1 codebase was using 2 spaces for Yaml files when it was also the rule in PHP code.\nThe travis documentation is used 2 spaces for the Yaml indentation, and this is also the case in a bunch of .travis.yml files I saw.\nI don't think this warrants a change either. Thus, it would need to be rebased if we were to apply it as the config changed\n. I'm -1 on this:\n- PHP-CS-Fixer is a fixer tool, not a checker tool. This means that the Travis failure message will be quite unusable (it will not tell you what is wrong) and it cannot fix things itself on Travis (Travis cannot push the changes)\n- Lots of CS issues will not be detected (it detects only what it can fix) and the fixer can also have false positives (I know I have a few of them in our work project)\n- having build failing because of CS issues will make them less useful IMO (maintainers will have to go to Travis each time to check whether the failure is a real failure or an extra whitespace). It may also scare people seeing their build failing (especially given that the failure message will not be so useful.\nI don't think a small CS issue should be a reason to reject a merge. For occasional contributors, it is generally far easier and less scary if the maintainer fixes the CS after merging.\n. @ciaranmcnulty the diff is quite unreadable, as it outputs the whole file even when a single line is changed.\nAnd if we want an automatic check, I think it would be better to enable scrutinizer-ci on the repo rather than making Travis build failing. I want to keep the build useful to know the real status of the contribution.\n. @MarcelloDuarte even if we have such a sniff, I would still apply it on scrutinizer rather than making Travis fail. This way, we would know that a Travis failure is a real failure.\n. @MarcelloDuarte As I said previously, it is not the same kind of failure. It makes a huge difference for the new contributors. I consider that small CS issues can be fixed after merging (if the whole coding standards are messed, I generally ask to fix them because it makes the review itself more complex).\nthis is why I think having them on scrutinizer (which reports the changes without marking PR status as failed) is a better idea than mixing it with the functionality checks on Travis.\nMixing them will also increase the work for maintainers as we will need to check every failure on Travis to know whether it is only a CS issue (we can merge and fix it) or if the PR breaks stuff (we don't merge it until things are fixed), whereas the PR status displayed on github currently allows to know whether the PR breaks functionality or no\n. @mdavis1982 you still need to tag a release, so that people using stable as minimum stability (i.e. most composer users as it is the default) don't have to whitelist dev versions of your package explicitly (most new composer users don't know how to do it)\n. :+1: from me. @ciaranmcnulty was also +1 in the issue. Is it fine for you @MarcelloDuarte ?\n. I think it is OK to add these step definitions for cases where we don't care about the class names. The possibility of specifying the whole class should be kept though to allow writing specs using collaborators\n. Looks like the text color should be black, not white: https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Console/Formatter.php#L50\nIt may be an issue with the ConEmu support of ANSI colors on Windows.\n. it cannot either when using ConeEmu rather than Ansicon. Looks like black is not supported\n. The suite shortcut does not set spec_path and src_path. It is not the same than your code (which is just invalid Yaml).\nThe shortcut is usable when you don't need to pass other settings than namespace\n. well, the return value is not something which get exposed to the code calling the Controller class. So it is not something you can assert\n. Currently, you cannot mock methods of the object being tested. you only mock collaborators.\nclosing as duplicate of #202\n. this is really weird. This is used in many places in the PhpSpec specs and works properly (see https://github.com/phpspec/phpspec/blob/master/spec/PhpSpec/CodeGenerator/GeneratorManagerSpec.php#L21-22 for instance)\nCan you give more info about your environment: PHP version, PhpSpec version, ... ?\n. the main branch is already master in PhpSpec (see the first bullet)\nAnd a release is always a tag. A branch is not a release as it is a moving target.\nBranches are needing for a release only if you plan to maintain several releases in parallel (i.e. releasing a 2.0.1 fix after 2.1 for 2.0 users). But if the 2.1 release is BC (which should be the case according to semver), it is not really needed to do such releases. Users could simply upgrade to 2.1 to get their bug fixed as well.\n. @cordoval it all depends of how often you release new features, and how much you can enforce BC between minor releases.\n- if you can release minor versions often and they are fully BC, there is strictly nothing preventing you to upgrade to the new minor version to get the bugfix. Because of this, creating a separate release with only a backported bugfix is not needed (and adds more work for maintainers). the perfect example here is Twig\n- when you have a longer release cycle for minor versions, it becomes important to release bugfixes quicker. Symfony has a 6 months release cycle. You cannot make suers wait 6 months for a bugfix.\n- if you break BC all the time, you will need to maintain branches for the previous releases in parallel (unless you don't care for your userbase, but this is not an option). However, if you follow semver properly, breaking BC involves bumping the major version, and so falls out the case described here. And anyway, in such case, you would not use develop vs master, even in the git-flow model, but a named maintenance branch (2.5 in the case of Behat).\nGenerally, the smaller the library is, the easier it is to follow the first model where all changes happen in master, and the version number (bumping patch or minor) is determined at the time you want to release. It is also the easiest workflow: you don't need to care about merging the fix in the right branch and then propagating to others when you have a single branch\n. @ciaranmcnulty yes it does, otherwise all PRs will target the wrong branch\n. @ciaranmcnulty I hope PR for improvements/features will be more common. Our goal is not to be full of bugs\n. btw, here is a proof that it is BC: I forgot to update our own Travis setup and it worked properly: https://travis-ci.org/phpspec/phpspec/jobs/17519915\n. phpspec describe would indeed run tests in the describe folder (if you have such a weird idea) rather than complaining about a missing argument.\nAs this command is not meant to be used in a CI setup and phpspec describe is not documented anywhere like this, I think it is fine to keep the BC layer less intrusive\n. @phpspec/team-phpspec what do you think about this ?\n. @ciaranmcnulty the fact that a single command application is easier to use for a testing tool. See the discussion in the related issue about problems due to the fact that phpspec does not run the specs.\nAnd on a side note, in the discussion, you were interested about seeing how rebuilding PhpSpec on top of Testwork would look like, and using a single-command app would be a pre-requisite for this. (I haven't started this work yet so I have nothing to show you yet)\n. @jakzal behat --init is similar, and it works this way since the first release of Behat more than 3 years ago. I haven't heard about people complaining about it.\nOtherwise, there is the PHPUnit way: having the skeleton generator as a distinct CLI tool\n. @everzet it is explicitly required currently, and people complained about it when this was done, because running phpspec currently displays the list of available commands (and so let a misconfigured Travis build pass for instance).\nThe argument about separate responsibilities is indeed right. So unless someone has a strong argument in the opposite way, I'm retiring this PR.\nRegarding the naming, some people reported that describe is confusing when we wrote the behat features for it (disclaimer: I was one of them). phpspec describe does not describe the class. It only generates a skeleton to let the developer describe the class (if you only run describe, the only thing being described is that the class can be instantiated). The features are now sayign When I start describing. It may be good to find a better name for this method.\nWe should also reorganize the feature files to distinguish better the 3 responsibilities\n@everzet regarding Testwork, it means that forcing it to be a single-command app is a design mistake. We will need to fix it when extracting it from Behat (but this should be discussed elsewhere)\n. @mdavis1982 the issue is exactly the same regarding the meaning: the command itself creates only the skeleton, not the spec. You have to write the spec after that by editing the generated file.\nAnyway, I'm closing this PR as it won't be merged. Discussion about renaming commands should be moved to dedicated issues IMO\n. @henrikbjorn given that specs are generally written before the code, I don't see how the introspection would work\n. @gquemener the default command cannot have arguments (the first argument would be parsed as the command name. This means thatphpspecwould run the spec, but you would have to addrun` as soon as you try to use the argument to restrict the specs being run or an option accepting a value (options without values will not be parsed as command name)\n. and this was the case previously btw. It has been reverted because of these issues making it more complex to understand\n. @gquemener the issue is that if some runsphpspec foo, he will get an error aboutunknown command foowhilephpspec -v` would still work to pass an option to the run command (there is nothing looking like a command name here).\nHaving a half-working default is worse than no default IMO.\n. And now, we can guarantee that HHVM is supported. Besides this silly error in the specs, PhpSpec was compatible with HHVM since the release of Prophecy 1.1.1 (as Prophecy 1.1.0 was not working on HHVM)\n. agreed.\n. @ciaranmcnulty if the current formatter does not match the XSD used by Jenkins, I would consider that this change should go in 2.0\n. @henrikbjorn in such case, I think it could be handled even better by allowing to register some autoload in the config file, as done in Behat 3\n. @MarcelloDuarte It will still be needed after that, as the code tested on Travis will not be the stable release (except for the commit of the release).\nI would have used dev-master rather than hardcoding the tag name though to have a real root version (and then the branch alias would make it work).\nSpecifying the root version is needed because Composer will not always be able to guess it properly on Travis otherwise\n. Well, thinking about it more, it may not be a good idea. It would make it impossible to assert the return value of getIterator properly if it returns a real iterator instead of a Subject.\n. Closing as it is not a good idea\n. Well, the format option does not make sense for the describe command. And for the list commanbd, it does not make sense to use the same formats than for the run command. In the run command, the format option let you choose the formatter reporting the progress of the testsuite. In the list command, it is a way to allow displaying the list as XML or JSON instead of human-readable output (useful for IDE integrations)\nI don't see why the option names should be kept unique amoing different commands. Each one has its signature\n. @gquemener I don't think we should add lots of helper methods in ObjectBehavior. Each time we introduce such a method, it adds a reserved method name which cannot be specified anymore through the nice API based on magic calls but requires writing $this->object->ensurePHPVersionIs() instead to avoid calling the guard when wanting to specify a method ensurePHPVersionIs (it is even worse when adding a method on the Subject class, as it requires using $this->callOnWrappedObject('should', array($arg1, $arg2)) to be able to specify it)\nThe PendingException does not have an helper method currently, thus avoiding to create such issue. For me, I'm not sure it is worth adding it.\n. hmm, a static helper throwing the exception could do the work. How would this behave with the verbose output ? Would it highlight the line in the example properly or no ?\n. @ciaranmcnulty We cannot add it to 2.0.1. It is a new feature, so merging it in the next release would make this release 2.1 according to semver.\n. The spec cannot be reloaded when the file is changed because of the way PHP work. A class cannot be defined more than once. The require_once avoids a fatal error.\nIf you want to reload a class in the same process, stop using PHP. It is the only sane way (a PHP extension might allow to do this by hacking into the core, but I'm not sure about it and it would be risky. PHP code has no chance to do it)\nThe only way to implement this is to launch a child process running phpspec. This way, each rerun is a separate PHP process with its own class definitions.\nThis would mean having a watch script which then calls phpspec. This watch script does not need to be tied to PhpSpec at all (by making it receive the phpspec command through some config, you can make it fully generic and use it for your Behat features as well and so on). for instance, if you have grunt in your toolchain to build your frontend assets, you could be lazy and just rely on it for the watching of specs.\n. I would not add them in the Application inside setupContainer but after calling it in doRun. This way, setupContainer is kept focused on building the container (which could then be moved to a separate class as started by @MarcelloDuarte previously).\nand if the commands are registered late, the call to setupCommands should be moved back into setupContainer instead of being in the constructor.\n. @ciaranmcnulty The container itself is already a separate class. What could be moved is the building of the container, which cannot be delegated to a third party library.\n. and I'm also :+1: on this\n. Looks like it is a go :smile: \n. Phpspec is opiniated. It tries to push you to clear object communication. Code using static facade is not OO code. It is procedural code wrapped in a class. This is the reason why you will find it really hard to specify it with PhpSpec. It was an explicit choice while designing the architecture of PhpSpec 2.\n. Note that I'm @stof. @stoff is someone else.\nAnd a Laravel module hacking against the goals of PhpSpec is a bad idea IMO, even if this could increase the userbase. Such module would harm PhpSpec rather than serving it IMO by breaking its philosophy. People writing procedural code should simply use a testing tool supporting procedural code (with a global state).\nAnd as explained in the blog post linked by @jonphipps above, Laravel does not force you to use procedural code. Code written using encapsulated objects relying on dependency injection will be testable with PhpSpec without requiring any special module.\n. @cordoval such static method calls are the procedural call. A static call is not OO code (there is no object in it, only a class and a function).\nWell, to be exact, using static method calls is not always a sign of procedural code (it is here though). It can also be functional code. But clearly not OO code.\n. @isimmons What they are doing internally does not change how your code looks like. We don't care about the internal implementation of external code (we are mocking the collaborators anyway so we don't run the internal implementation). We care about the way you communicate with external code.\nand the facades are static, even if they don't implementat the actual logic themselves\n. @MarcelloDuarte As far as the app code is running, it is a static call, not an object communication. The way the static call is implemented does not matter at all. It would be the same than talking about the dependencies of your collaborators.\nAs said previously, the right way to go here is to use DI instead of using the static facades, which is also supported by Laravel (see the blog post linked above)\n.  @MarcelloDuarte it is worse than passing a service locator actually: if you use DI to access the locator itself, you are still doing object communication (and you will be able to spec it, even if it can be painful due to the setup of the service locator stub returning other mocks). When using a function call (static methods are mostly equivalent to functions) for service location, you are not injecting stuff anymore; You are getting them from some global state.\nAnd such function calls cannot be mocked.\nBtw, Mockery allows mocking functions only when\n- the function is in the global scope,\n- the calling code is namespaced,\n- the function is accessed relying on the function fallback (no usage of the fully qualified name \\json_encode),\n- there is no function with the same name in the namespace.\nStatic methods don't satisfy the preconditions of being a PHP function. It is hacking into the PHP function resolution mechanism. And this has lots of drawbacks:\n- you cannot run the code anymore as an integration test in the same PHP process (as the mocked function is now defined in the namespace and used). This would require running the integration test first (which is weird in term of feedback), or to isolate the process used for the unit tests and integration tests\n- you cannot have the real function being called by any other code leaving in the same namespace in this process\nSo unless your test runner uses process isolation for each test (which is not the case of PhpSpec and slow as hell in PhpUnit), you should better avoid any attempt to mock procedural code\n. @isimmons If there is some dependencies in the constructor, you need to add the call to $this->beConstructedWith() to pass the dependencies. It is logical that it is not initializable if you don't pass the arguments. See the PhpSpec doc for this.\nAnd the link you gave is about doing functional tests, which is indeed out of the scope of PhpSpec.\n. is there any possibility to have a symlink to a directory in the removed tree ? If yes, it must be handled specifically on Windows (see the Symfony Filesystem component). Otherwise, this would work fine\n. the feature suite is broken\n. there is no reason to close the PR\n. why have you closed it ?\n. @MarcelloDuarte having several version of the website seems weird, as you can only have 1 online.\nIf we want to have several versions of the doc, the right way is to decouple the doc content from the website itself. This way, you can have several branches for the doc (merging older branches into newer one to propagate the doc updates) and then build the website with all useful doc versions.\nIf we go this way, I suggest putting the doc sources in the phpspec repo itself rather than in a separate repo. This will make it easier to have doc written at the same time than implementing new features. And the phpspec doc will not become a huge book anyway (and is maintained by the same team). Having a separate doc repo makes sense for Symfony because of the size of the doc and the different maintainers, but it is not useful for small teams (Doctrine moved doc back into the project repos for instance)\n. Register a PhpSpec extension. It is able to add its own locator by defining a service with a name starting with locator.locators.\n. The goal of Subject is to wrap all return value to make assertions on the return value, like $item->offsetExists('foo')->shouldBe(true);.\nIf you want to have the real call, you should call it directly on the wrapped object (or get the wrapped value from the returned subject)\n. See my comment in the issue requesting it: I'm not sure anymore that this is a desirable behavior\n. you need to fix the spec for this generator\n. Closing in favor of #339 which is less intrusive on our users for now\n. actually not at the application level but at the command level. The command is expected to return the exit code (it is allowed to return null in case of success as well to be exact). It would be weird that the Application turns 2 into 0.\nThe issue with the current code is that we have 2 mixed concepts:\n- the test result\n- the command exit code\ncurrently, the command uses the result code as exit code. This is the place where the transformation should occur\n. @gquemener No, It think the command can use 0 and 1 only as result code. It is enough (Behat does it this way as well for instance).\nFailure status codes have a meaning (see https://github.com/auraphp/Aura.Cli/blob/develop-2/src/Status.php for a list of common ones for instance). the current usage of the status code is weird\n. Can you report it to Prophecy instead ?\n. hmm, it could indeed be useful to specify the report target to avoid issues with other output. Scheduling it for the 2.1 release\n. @MarcelloDuarte the output flag of the plugin controls in which folder it outputs the coverage report. It does not control the feedback given to the user.\nHowever, I'm quite sure @henrikbjorn would accept a flag to disable the user feedback to be compatible with 2.0\n. this is because \\ is a special char in your shell, so you need to escape it by quoting the argument. It has nothing to do with PhpSpec or even PHP (and it is why we support using a / to bypass the need of escaping)\n. what is the use case exactly ?\n. thanks\n. Can you rebase this ? It conflicts with the coding standard fixing we made in the whole codebase\n. and please also take the feedback of @jakzal and @ciaranmcnulty into account (I'm also :+1: for this idea)\n. do you have some autoloading registered for the spec namespace ? If no, the reason why some works and other don't is because PhpSpec itself is loading files in alphabetical order, and so the abstract spec was found by PhpSpec before the spec, meaning it is now defined.\nIf you rely on this accidental loading to make it work, it will break again for any class name when running the concrete class alone\n. well, the issue is also that your spec is not describing the user interaction. There is nothing about password_verify in the behavior of your UserManager. If you try to verify the password itself, you are not doing a spec of your UserManager anymore. You are doing integration testing, which is not the job of PhpSpec\n. nope, it is in 2.1-dev\n. use ~2.1@dev instead\n. IMO, this is outside the scope of PhpSpec. Your description is talking about functional testing, which is not what PhpSpec is for.\n. Making PhpSpec run functional tests is a huge change for the library, even if the impact on code is small.\nIf you want to provide a command running all your tests at once, it is very easy to do it in the project when using several tools (each with its own target).\nTrying to fit everything into PhpSpec is a bad idea IMO.\n. IMO, a tool refactoring your code is a different topic than a tool running specs for your code. If you look at the code, it would be a totally differnt codebase. I thinkk it would be better to keep a single responsibility per tool (it will also make the maintenance easier).\nFYI, @beberlei started a refactoring tool months ago at https://github.com/QafooLabs/php-refactoring-browser but it seems staled\n. note that I'm not saying that such tool should not exist, just that it should be a tool on its own rather than a part of PhpSpec.\n. @cordoval why do you want to introduce a state ?\n. @MarcelloDuarte A refactoring tool is something complex. IMO, it deserves being a tool on its own (people might find it useful without using PhpSpec btw).\nthus, it would allow us to have separate release cycle for both tools\n. @jakzal Doctrine commands are integrated into Symfony because the whole Doctrine is. For a separate tool, integrating the command would also require integrating the whole configuration of the other tool. This would be quite complex\n. btw, a refactoring tool is a very good candidate for a mutli-command tool (adding more commands when we support more refactorings), so it would become quite complex to load these commands inside PhpSpec\n. PhpSpec cannot spec static methods\n. without seeing the implementation, it will be hard to help\n. The thing you are trying to mock is static\n. set the runner.maintainers.errors.level parameter in your phpspec.yml file to a level excluding E_USER_DEPRECATED (the default value is E_ALL ^ E_STRICT)\n. this also seems like a misuse IMO.\nIf you have some code running real processes using the PHP proc functions, you are writing integration tests, which are not what PhpSpec was designed for\n. if you run a real process, it is an integration test.\n. @cxj I would test it against a real process. But I would not call this test a unit test\n. Given that this is already fixed in PHP 5.6, I would rather keep the spec as they are\n. I'm talking about the bug you linked.\nRegarding the argument, it is optional. So it is valid for our spec to call the method without argument\n. well, agreed for the stub $spec->count(). But there is no need to change  $this->count() calls, as these are direct calls to the method, and the argument is still optional\n. is it already in a released version of 5.6 or only in the dev version ?\n. well, it's not really a BC break, as the argument is still optional, and PHP always allowed passing additional argument to a method call.\n. well, truncating still have value when the strings are very long (otherwise the output becomes unreadable). But the part of the string being displayed need to contain the difference.\n. @drgomesp which version of what ?\n. In PHPSpec, no. Nobody has worked on it yet\n. Well, I vote in favor of using the instantiator library to implement the fix rather than duplicating its logic. But there is some work to do in PhpSpec to refactor the instantation anyway (making it use this library)\n. The issue is in bin/phpspec. It checks that vendor is a directory instead of checking that vendor/autoload.php is a file, thus failing to move to the next detection case for the autoloader. \n. @mdavis1982 it would be found by line 12, which is the one looking for the composer.json when PhpSpec is installed as a dependency (in which case it does not need to know the composer vendor-dir name), if the line 6 was not buggy previously, leading to a fatal error on line 7.\nThe requirement on line 6 and 7 is for the case where you install phpspec globally so that your project autoload.php is also loaded when the phpspec install is not in the project itself (working only for the normal vendor name in the project indeed as it would be too complex to handle all cases). And this is the one which should use file_exists instead of is_dir before doing the require call.\nOnce fixed, you will be able to use phpspec when installing it through require_dev\n. @MarcelloDuarte this should be applied on master when merging as it is a bugfix\n. @walterdolce is it already possible, and intended. When you install phpspec in a global location, you want to load the global autoloader to autoload PhpSpec, but you also want to load the project's autoloader to autoload the specified classes.\nThis PR does not introduce a new feature. It fixes an edge case where the existing feature is broken\n. @walterdolce I can do it automatically. No need to recreate the PR\n. Thank you @mdavis1982.\n. sorry for the commit message saying it was merged in 2.1.x-dev instead of saying 2.0.x-dev. It wasa bug in the tool I used for merging (fixed for next times).\n. Given that I'm member of the Symfony core team, I got access to the tool used by Fabien Potencier to manage Symfony.\nRegarding the way it is done, it uses git rebase to achieve it, and then creates a detailed commit message rather than the default git merge message.\nBut for me, it was a matter of gh merge 374 --switch=master, which is easier than doing the rebase by hand, and so why I haven't asked you to do it (especially as it would also have required to create another PR).\nNote that the usage of rebase is why the PR is marked as closed rather than merged (a rebase creates a different commit with the same content, so github does not see the PR itself as merged).\n. I haven't switched the github PR to another branch. I switched the contribution.\n. @mdavis1982 it is not yet released\n. OK, release is done\n. hmm, now we just got 2 PRs being quite identical :)\n. anyway, it should be implemented in master rather than develop (it is a bugfix), and PhpSpec\\Util\\Instantiator should be kept for BC (some extensions might be using it, which would break). The usage of the Instantiator library should be done inside this Util class\n. so, I let you choose which one of you does the work of fixing things (my remarks are valid for both PRs anyway)\n. Could you just rephrase the commit message ? the important part is not that it uses ocramius/instantiator (this is clearly an implementation detail) but that it fixes the instantiation on latest PHP versions\n. @cordoval the Symfony constraints are not changed in this PR, so I don't really see the reason of this comment here.\nAnd given that Symfony follows semver, using the semver constraint is the best one. For the Instantiator library, I trust @Ocramius to follow semver properly as well instead of breaking BC in minor or patch releases.\n. Reopening this as a WIP for the fix\n. @Ocramius The existing code in PhpSpec has some more logic when building the serialized string. Maybe it could help for Instantiator as well ?\n. @Ocramius the handling of default properties of the class, in the PhpSpec\\Util\\Instantiator class (the code removed in this PR)\n. @cordoval if you break something in userland when addign a new feature, it means your new feature is not implemented in a backward compatible way, and so the version introducing it MUST be a major version. Otherwise, you don't follow semver\n. but we don't extend the Instantiator library. We only use it, so we are not affected by this. We have control about what we do with the library. We are the userland for this case, as it is an internal dependency, not something exposed to phpspec users\n. @MarcelloDuarte my suggestion is to merge this, which already fixes the library for some cases, even if it does not fix it everywhere. It is better than the current solution which is already broken in these cases anyway.\nthus, fixing the remaining issues would hopefully involve changes only in the Instantiator library, giving them to us at the same time than to PHPUnit\n. yeah, HHVM 3 changed its handling of scalar typehints, allowing them only in Hack code. And Prophecy mocks are not Hack code. That's why it's failing now\n. we are already using Scrutinizer, and it was reporting this (If you look at the scrutinizer inspection for this PR, it reports 1 issue as fixed). But we haven't processed the full list of issues yet to fix them when needed\n. @MarcelloDuarte I think we should really switch to a single-branch model (I'm suggesting it since the beginning btw). As long as we keep BC, upgrading is painless be it a release with only bug fixes or a releases with new features as well. Look at Twig for instance: it works with this model since 3 years without issue. The version number of the next release would then simply depend on the fact that we merged new features since the previous one or only bug fixes.\nWith a project of the size of PhpSpec, it is easier IMO.\n. @JHKennedy4 it should be BC, yes\n. The describe command searches a suite in which the class can be placed. If there is no namespace prefix, all suites are valid, so it cannot determine the suite in which the spec should be placed and will just choose one arbitrarily.\n. speccing final classes is possible. However, mocking a final class is not supported.\nSo there is 2 solutions here:\n- don't make the Address class final\n- use a real Address instance in your spec rather than a prophecy double (which is what you are doing in the last snippet)\n. yeah, that's true. However, if Address is a value object, using the real class is probably better than defining an interface for the value object\n. Can you paste the full spec file (i.e. including the use statements, whcih are missing in your snippet)\n. @ciaranmcnulty if you don't put the annotation to specify custom configuration, it will load by primary key. Here, the param converter loads by slug\n. @GrahamCampbell FYI, removing the dev-master alias inside the develop branch does not change anything. The dev-master alias is used by composer only when being in the master branch.\nthe reason this was done this way in our 2-branch model was that you only need to bump the alias once: when starting to develop 2.1, you bump both branch aliases to 2.1.x-dev in the develop branch. Master was still 2.0.x-dev as the commit bumping the version was not in it (it would go in it only when releasing 2.1, which would then have pushed develop to 2.2).\nHaving only 1 alias when you have 2 long-running branches needing the alias is the best way to create merge conflicts between them.\nOf course, all this explanation does not apply to the PhpSpec repo anymore as we switch to a single branch model\n. The rebase seems to have totally messed the history, by rebasing master on top of the feature branch rather than rebasing the feature branch. This means many commits got duplicated in the history. Be careful at the list of commits included in a PR when merging it.\n. why did you close it ?\n. This looks good.\nBtw, you don't need to allow failures on hhvm-nightly. It is passing too\n. @ciaranmcnulty the failure earlier was actually the same bug than HHVM stable\n. ah, right\n. As we moved the service definitions to a separate class in #465, this needs a rebase to fix conflicts.\nAnd if you split the generation of the private constructor out, I would be +1 for merging this feature. For the private visibility of the constructor, it might require more work (handling the case of another example requiring a public constructor for instance, etc...) so it might be better to keep it separate\n. For a config file, I think code_generation: false would be easier to understand than no_code_generation: true\n. :+1: once the small cleanup is done in the behat context\n. btw, becaus eof this issue, most specs are mocking the Console IO rather than the interface when specifying the classes depending on the Interface\n. This is not fixed. Replacing the interface by a different immplementation is still impossible, given that some classes are typehinting the implementation. So the interface is still useless\n. ping @whatthejeff Looks like there is some issue with the XML parsing in HHVM-nightly\n. @ciaranmcnulty given that Behat 3 is stable now, what do you think about switching to it now. A side-effect would be to solve this issue (it does not use XML config files for the service definitions anymore)\n. @ciaranmcnulty it would be a good idea indeed.\nAnd I agree about the removal of phpspec-expects. It does not add much benefit, and the circular dependency can be a pain in the ass. We can throw an exception directly in our feature context when the assertion fails.\n. @whatthejeff you can use sudo in Travis without password to have root access\n. looks like the existing ini file does not end with a EOL char, making it broken when appending the content. you will need to add a newline at the beginning of the new content\n. :+1: \n. @ciaranmcnulty one of the admins should enable the RTD service in the repo, so that nothing needs to happen (rebuilding the doc on each push)\n. @ciaranmcnulty cna you resubmit the first commit of this PR ?\n. it was intended\n. no. As Travis starts from a clean environment each time, it runs a composer install without lock file, which means it actually runs composer update\n. not in the git repo (you have it locally because you ran Composer already)\n. to be honest, we don't really care about which version is set when running Behat here (we could even set it to testing)\n. should we include the scrutinizer score badge as well ? IMO, it has more meaning that the build status badge of Scrutinizer (we don't make Scrutinizer mark the build as failed when it detects a new issue, given we have tons of false positives currently, so the build status just replays the Travis one)\n. The score is 9.06 currently (max score being 10). Are you considering that too low ?\n. @ciaranmcnulty well, if you want to increase the score, change the scrutinizer config to make it look for duplication only in the code rather than in the code and the specs. It will make disappear half of the duplication issues and thus increase the score (we don't care about these issues anyway).\nAnother way to increase the score will be to fix https://github.com/phpspec/phpspec/issues/421 as it reports 41 bugs about it (this is how I found the issue). A bunch of other issues in the bug category are about undefined properties being used because their declaration is missing in the class, which is easy to fix.\n. :+1: \n. btw, is it expected that the phpspec.net website has a link to behat.org in the footer in the Resources column ?\n. docs.readthedocs.org ? Probably not :smile: \nIf @MarcelloDuarte is in vacation, we will probably not be able to make the DNS change to add the CNAME for the doc. He is probably the owner of the domain.\nRegarding the theme, it is possible to use custom themes on ReadTheDocs. See https://github.com/Behat/docs/blob/v3.0/conf.py#L28 for such usage\n. > will probably give access to anyone else appropriate if asked\nwell, he should probably give access to @MarcelloDuarte as well (I don't care personnally as the doc is build automatically on merge anyway, and the project config can be done by the few of you maintaining the website anyway)\n. what is left now before doing the move ?\n. @MarcelloDuarte can you configure docs.phpspec.net to point to the readthedocs page ?\n. @MarcelloDuarte the phpspec.net website is hosting the old doc for 2.0. And we have no place linking to the uptodate doc. Can you move the domain to point to readthedocs ? This would avoid confusing our users with outdated documentation\n. @ciaranmcnulty @MarcelloDuarte  is there any news about changing the DNS ?\n. @ciaranmcnulty can you work on changing the phpspec.net DNS to make it point to the uptodate website on RTD rather than the old outdated one ?\n. Closing. Se #582 \n. @ciaranmcnulty Can you also update the phpspec2-site repo description to mark it as obsolete (and updating the readme saying that everything is now in the phpspec repo itself) ?\n. do you want to fix more stuff in this PR ?\n. Well, the question is whether you are working on other stuff in the same branch, thus wanting to wait before pushing the merge button (otherwise, I push it now)\n. then merged\n. :+1: \n. :+1: \n. @ciaranmcnulty I will actually submit more changes as I was still working on the branch\n. @ciaranmcnulty the issues introduced are mostly new places where the wrong usage of the IOInterface has been detected\n. FYI, I reported the issue to scrutinizer here: https://github.com/scrutinizer-ci/php-analyzer/issues/370\n. btw, I would prefer keeping the right phpdoc here (we don't write it only for scrutinizer)\n. Well, mixed is what you used. But it is too wide (we don't accept anything else than a callable or an object (and we don't even accept all callable types)\n. :+1: for reverting\n. > and makes it easier to use a different container later\nnot really. We are still coupled to the PhpSpec\\ServiceContainer in the Application, as this is where we instantiate it and use it.\nIt makes the Application class more maintainable though\n. From my PoV, this is ready. You can merge it as soon as you are satisfied with it\n. Oh, and to please you @ciaranmcnulty, this increases the Scrutinizer score in a significant way (getting higher will require fixing the IOInterface mess)\n. @ciaranmcnulty well, you are the guy saying that 9.07/10 is low :smile: \n. Can you also fix the phpdoc for get() ? the return value should be object, not mixed (storing anythng else than objects should be done with parameters)\nand the code is setShared looks weird\n. nope, that's fine\n. @ciaranmcnulty The StringPresenter is extended y the HtmlPresenter and the TaggedPresenter which are overwritting the protected methods. The way to present a given object changes a bit between the HTML output and the CLI output (which uses the TaggedPresenter with tags being processed by the Console component formatting to add colors)\n. @ciaranmcnulty this makes me think the current Presenter could maybe be split into 2 parts:\n- a class responsible of presenting values (most of the code being in the StringPresenter currently). This could even be split into several interfaces, to separate the complete presentation of exceptions from the presentation of values (with the ExceptionPresenter using the ValuePresenter as a collaborator) as presentException is only used in formatters (BasicFormatter, PrettyFormatter and the ReportFailedItem of the HtmlFormatter) while presentValue and presentString are used in many places (matchers for instance) as it is used in most places to build the PhpSpec exception messages (which can embed some formatting)\n- a class responsible for formatting values themselves (used as a collaborator by the previous one). This class would implement the CLI or HTML formatting (i.e. the overrides done in TaggedPresenter and HtmlPresenter).\nThis way, the presentation of values could be delegated to other classes if needed to simplify it (as the HTML/CLI differences would be handled by composition rather than inheritance).\nHowever, I'm not yet sure whether it makes sense to do this split (the split of the Exception presenting by making it use the value presenting as a collaborator might make sense though).\nBut anyway, such changes are too big for this PR. I would need to have a quicker look at the usages of the presenters in the codebase to check whether some refactorings make sense or no first.\nso I suggest merging this PR as is\n. > Is there a way to remove -vv and -vvv from the supported options?\nnot in a simple way. it requires overwriting the definition of the verbose option (thus duplicating some code probably) and then hooking into Application::configureIO to reset the verbosity of the output (this part is easy)\nBut then also taking into account the fact that any extension could introduce a mess again by changing the verbosity to an higher level for weird reason, requiring the codebase to still handle the verbosity properly to avoid mistakes, so this change is still necessary.\nAnd when adding the object engine differ in #192 we might actually want to start using additional verbosity (displaying more details about the object graph for instance)\n. @ciaranmcnulty the issue is that -vv and -vvv are not options on their own. they are additional shortcuts for the --verbose option (with some special handling in the Application code). Removing an option is already a bit painful, but altering an option is worse (given that InputOption is an immutable object, changing the shortcut involves the pain of removing the option and then duplicating some code to add the option again with a different shortcut)\n. @ciaranmcnulty PhpSpec is handling the unwrapping properly for cases where you pass the array to one of its objects. The reason why it does not happen here is because the new MenuItem does not create a PhpSpec subject. It is a real object, and so expecting the real objects directly\n. IMO, the real issue is that you are trying to use a spec for something which should actually be an integration test rather than a unit spec. The KnpMenu classes are not under your own control, so you should avoid mocking them (your spec does not ensure your class work, as you cannot be sure that your mock actually reflects the behavior of the external library)\n. @ciaranmcnulty can you add another scenario ensuring that overwriting the construction defined in let() continues to work ?\n. OK great (I haven't checked existing scenarios)\n. are you using a custom name for the composer vendor folder of your project ?\n. @varas the question is how the vendor folder is named in your project. https://github.com/phpspec/phpspec/blob/master/bin/phpspec#L6-7 attempts to load the autoloader of the project (and then following code is loading the autoloader of the composer setup where PhpSpec is installed)\n. well, if you don't have a vendor/autoload.php in the project folder, PhpSpec does not know how to autoload your project classes, which is why it tells you the class does not exist\n. how does the exit code of the command work if it reruns ? I don't think it is currently based on the second exit code\n. @ciaranmcnulty when phpspec is install through Composer, there will be a .bat script which should make it work (but it indeed won't work on the phpspec repo itself)\n. @ciaranmcnulty be careful to check first whether the first element of argv is PHP...\n. @ciaranmcnulty no it is not needed. Doing a spy assertion on a method registers it as an allowed call. And the verification of unexpected method calls is performed only at the end, not at the time the method is called (it relies on spying internally)\n. @richardmiller I think it might be worth giving the list of methods requiring to avoid the magic calls. This involves should* because of the way __call is implemented, but also all methods available in the ObjectBehavior or subject classes themselves\n. The HHVM check does not work\n. this is great\n. I agree about keeping the first one only, relying on the priority of locators\n. :+1: \n. The title of the issue is not nice against Windows users. It looks bad on non-coloured terminals, which is not equivalent to Windows. It is possible to have a Unix system without colors in the terminal (some CI systems for instance are not parsing colors when capturing the output). and it is possible to have colours on windows (I'm using colours in my terminal since years)\n. thanks\n. the issue with using ::class is that it requires tehe class to exists first, otherwise you get a fatal error in your spec. So :-1: for this as it goes against the PhpSpec philosophy of writing specs before the code\n. yeah, FQCN::class will throw a fatal error in the spec code, because it will need the class to exist to be able to read the constant. On the other hand, passing a string to phpspec does not break anything\n. Can you open an issue on Prophecy instead ?\n. the issue is that there is a circular dependency in the dev requirements. So this requires knowing the phpspec version properly. when installing from git, Composer is able to guess it from the git metadata most of the time. But when downloading the zip, there is no way to guess the version of the root package, so Composer will use 1.0.0 as fallback.\nthe solution is to set the COMPOSER_ROOT_VERSION environment variable when running composer, to tell it the root version. this is how we do on Travis to avoid issues with detached heads: https://github.com/phpspec/phpspec/blob/fbd1e6c577cb64302df2b416407fda396db7e102/.travis.yml#L9\nyou should of course adapt it in your case to pass 2.1.0-RC1 rather than dev-master, to match what you downloaded\n. the reason why it complains about setUrl not called is because the setLimit call will have thrown an exception saying it is unexpected.\nThe fact that the Prophecy expectation exception wins over the exception thrown in the execution is a known bug\n. @kimu nope. shouldBeCalled will trigger a PredictionException because it is a failure in the expectation. On the other hand, the unexpected call will throw another prophecy exception (and shoudl mark the spec as broken rather than failed). Here, the prediction exceptions are hiding the other exceptions thrown earlier.\nHowever, it is indeed weird that finally does not seem to be executed after the exception in setLimit() in PHP 5.5\n. the concatenation should be done without space (which is the default in PHP-CS-Fixer btw)\n. This removes a file, not a class\n. could you amend your commit to fix the commit message ?\n. I'm not sure the license headers are useful on spec files or on Behat contexts. IMO, adding them in src/ would be enough\n. btw, even-headers is a very weird commit message\n. I would vote for having the license header in the library code, but letting it out of the spec and behat support classes\n. -1 for removing PSR-4. Supporting PSR-4 should be in core\n. shouldBeCalled() is an expectation to be called on a collaborator, not something you expect on the return value of the specified method\n. @ciaranmcnulty array('Slot', 'fromStartAndEndDate') is a valid callable in PHP (it is equivalent to 'Slot::fromStartAndEndDate')\nThe StringPresenter was missing this case\n. > I think having build_phar in the bin folder will add it to people's bin dir when they install phpspec via composer, right?\nno we don't. Composer symlinks only the files listed in the composer.json\n. most editors can be configured to consider that .yml.dist should be highlighted as YAML btw\n. It looks like the Travis fix does not work for the nightly setup\n. Please be careful about BC breaks, otherwise it is very hard to follow semver (at least without creating a maintenance nightmare by having to maintain lots of major versions in parallel because developers cannot upgrade because of BC breaks)\n. Well, if we don't provide BC for extensions whenever possible, we will make it impossible for extension authors to provide a reliable ecosystem (and btw, the existing extensions I know of are using the ~ operator, so they are expecting semver)\n. @ciaranmcnulty Instead of breaking BC when we want to, the rule could be breaking BC when we have to. This means that any time we can provide a BC layer for the old API when doing a refactoring, we should (and then, we should remove the deprecated BC layers the next time we do a major release).\nFor many cases, providing a BC layer adds some work but it is possible (Symfony does it a lot)\n. For each case where you would want a refactoring to clean things, could you open a separate issue to discuss these topics ?\n. :+1: \n. Another optimization could be to check whether the priority of the added matcher is bigger or lower than the priority of the last matcher when adding inline matchers. This way, sorting the array won't be done when the new array is expected to be added at the end (and depending of what we use as priority for inline matchers, we could also optimize the case of adding a matcher to run before all existing ones)\n. > I think there's more to do in general cleanup - I'd like to get terminal width detection working too (if that's possible)\nThe Console component supports detecting it (however, you might want to set a hardcoded value lower than PHP_INT_MAX when it cannot be detected because of being run in a subprocess rather than a tty)\n. This should be rebased as it conflicts with master\n. > 2.6 will also be LTS\nNo it won't. The LTS will be 2.7\n. -1 for these changes, as most of them don't bring benefits but instead cause potential harm to our user base\n. And regarding the tests against several Symfony versions, I'm not sure it is the right solution (what about other dependencies we have ? Why making Symfony a special case ?). the real need is to have one build job using the lowest composer dependencies rather than the latest ones. And for this, we need to wait until the feature is merged in Composer \n. If you want to force the instantiating without doing calls on your SUT, you can call $this->getWrappedObject(). Giving you the wrapped object forces to instantiate it of course\n. > I would like PhpSpec 3 to make use of Testwork. But that depends on someone sending a PR to @everzet extracting it from Behat as a separate component. Doing it now is a bit premature in my opinion.\nThe issue is that Testwork currently enforce using single-command tools, while phpspec is not. \n. Introducing the Symfony DI component while keeping our own ServiceContainer built on top of it for BC is a great idea (no need to bump PhpSpec to 3.0 because of extension breakages). However, the implementation has many flaws (it does not use the DI component properly). I will review it more in depth in the following days when I have time for it.\n\nAlso package splits are not PR-able... someone just has to convince @everzet \n\nSplitting Testwork into a separate package is in the roadmap, but we still have a few architecture change to do it in before releasing it for reuse (which will then add a BC constraint on it). This is why it is not done yet. \n. @ciaranmcnulty please don't create your own subtree for Testwork. this is something we will do in Behat itself as soon as we are ready (I think it could happen after https://github.com/Behat/Behat/pull/656 is completed).\nIntroducing 2 different (conflicting) source code for Behat Testwork is a bad idea, as people might start depending on phpspec/testwork even though it is not the canonical code (and we would have to mark behat/behat as replacing phpspec/testwork to avoid a mess in composer, which seems bad.\nSupporting both containers would be sustainable if we really build the PhpSpec ServiceContainer as a simple BC layer on top of the DI component, keeping everything in the DI component. This BC layer would be there only for extensions written against the current API. (note that the current code is the wrong way to implement ServiceContainer on top of the DI component)\nUsing Testwork extensions has a benefit that it makes extensions much powerful (possibility to configure them with a config being validated) and cleaner (in case the extensions care about being robust). So I think it is a good move. It would also help moving toward using Testwork as the PhpSpec basis (which will become easier after the tester refactoring is merged in Testwork).\n. However, to keep this refactoring easier to achieve, I think we need to split it in several steps: introducing the DI component inside the ServiceContainer first, and then refactoring the extension system to allow using Testwork extensions as a second step.\n. Given that you deleted your fork, the PR got closed. Was it intended ?\n. Well, replacing the usage of a deprecated feature by the recommended way is a good idea.\n. The next step is to decide whether catching Prophecy\\Exception\\Doubler\\MethodNotFoundException and suggesting to generate a method in the collaborator is a good idea or no. It would be a good thing when doing the initial design, but it could hurt when running phpspec later by asking you to generate a new method in the collaborator when you mispell the method name.\n. @ciaranmcnulty I will make a Prophecy release this weekend. Then, you will be able to bump the requirement\n. Does it work for collaborators defining their type through the phpdoc rather than through a typehint ? I doubt it\n. For the second deprecation, we don't even need to bump the dependency (the non-deprecated API exists since 2.0).\nFor the first one, I suggest doing a check in the code to see whether the new API is available. Dropping support for Symfony 2.3 LTS is a bad idea as it would forbid using PhpSpec in projects using Symfony 2.3\n. @ciaranmcnulty AFAIK, all usages of the DialogHelper are encapsulated inside the IO class, so we could do a check in it to see whether QuestionHelper is defined (no need for 2 implementations IMO, as we would duplicate a lot of things) \n. @ciaranmcnulty ping\n. @ciaranmcnulty there is actually a big issue here: http://www.phpspec.net indeed points to the new documentation, but http://phpspec.net still points to the old website\n. We should add a branch-alias for the dev-master version of php-diff\n. I just submitted https://github.com/phpspec/php-diff/pull/6\nI don't know who are the maintainers for this repo though (there is a bunch of old pending PRs which have not been reviewed)\n. maybe Behat itself does not have the right lowest bounds. To solve it, you may want to submit a PR to Behat first to test lower bounds\n. the cache in the HOME folder will not cause issues with branch aliases, because there is nothing about branch aliases in it. What it caches are the archives.\nThe known issue in composer is that the installed dependencies can impact the dependency resolution, creating issues in some cases.\nSo +1 for caching $HOME/.composer (or actually $HOME/.composer/cache because other global composer things don't make sense in the cache)\n. @ciaranmcnulty in PR builds, the cache is based on the cache of the target branch. Given that master has no cache, it is logical that each build starts with an empty cache\n. FYI, Scrutinizer will support it soon: https://twitter.com/schmittjoh/status/552821787927797760\n. @GrahamCampbell  can you rebase to trigger a new scrutinizer analysis to be sure it is happy ?\n. @ciaranmcnulty I found a weird behavior: in case you haven't called anything on your object before calling an expectation, Subject::makeSureWeHaveASubject will be used to instantiate a subject. But this uses a different logic than in the WrappedObject, and it does not trigger the constructor in this case\n. I think this is related to the ability to test for exceptions thrown by the constructor. I think we should refactor the way we handle asserting exceptions (which is also the reason why assertions are returning something, causing #534) \n. I don't have ideas about alternatives yet. It would require investigating a better implementation for this\n. +1 for using PHPUnit for integration spec\nregarding ask and askAndValidate, are they used anywhere in PhpSpec itself ? If no, are they used in known extensions ? \n. @ciaranmcnulty then I guess it is fine with removing these methods (we just need to make it clear in the changelog for people which might have written their own extensions). Can you finish this PR ?\n. :+1:\n. which linked PR are you talking about ?\n. > I appreciate that some people are using the tool for functional or integration testing, so this extension will be useful for them; @gquemener can you please add a link to your extension in the docs at https://github.com/phpspec/phpspec/blob/master/docs/cookbook/extensions.rst ?\nI agree about linking to the extension, but I think it deserves to put a warning near it to educate people that they should use a different tool in this case\n. > maybe they should indeed be in a separate section with a disclaimer?\nagreed.\n. I still see 1 case where skipping might be legitimate: based on the PHP version, when you have some features available only for newer PHP version. I don't think we can consider the case of PHP as an integration test.\nSo maybe skipping based on the PHP version should be easier in code (keeping the case of collaborators for an extension). What do you think ?\n. > The case I wouldn't want to support is 'my code only works on PHP >5.4 but I want to run the suite on 5.3 and skip the things that won't work'.\nThis use case may be needed too. Imagine your project provides optional traits to help using it (but your code does not make them mandatory). Specs ensuring your traits are behaving well (through specing a fixture class using them) would not be able to run at all on 5.3. But all other parts of your lib may still be compatible with PHP 5.3 and you would like to be able to run your specs on 5.3 to ensure it.\nAnother case for that I see is for Prophecy to ensure that it is able to double a class using variadic functions of PHP 5.6+ (disclaimer: it does not yet: https://github.com/phpspec/prophecy/pull/125). We don't want to forbid running the specs of the library on older versions of PHP (this would even be a major issue), but the particular case of variadic functions does not make sense on PHP 5.5 and lower (it cannot exist) and it cannot run (PHP parse error)\n. > I know guys are hard at work at improving docs. Improving documentation is an ongoing fight we need to fight, but we'll get there. In the mean time, any help is extremely welcome: https://github.com/phpspec/phpspec2-site.\n@everzet  Actually, this repo is totally deprecated (not updated since one year). the docs are now in the phpspec repo itself and rendered on ReadTheDocs. this is also why I asked several times whether @MarcelloDuarte had transferred the DNS ownership to @ciaranmcnulty so that we can finally get it to point to the uptodate documentation (see #448). And the docs are now actually a lot better than the docs rendered on phpspec.net (and they describe available matchers for instance): http://phpspec.readthedocs.org/\n. @ciaranmcnulty What do you think about adding a method duringInstantiation(), which would then use the configured instantiation method (constructor or named constructor) ?\n. > Only really thought of it because PHPUnit basically passes through incompletes which never seemed right but I'd gotten used to it!\n@padraic  This actually depends whether you run PHPUnit in strict mode or no.\n. :+1: \n. Taking us off the new infrastructure also means we cannot have the composer cache anymore. Is there a better way to get expect on Travis without using apt-get (maybe donwloading a prebuilt binary and putting it in the path ?)\n. There is another PhpSpec library doing code generation: Prophecy to generate doubles. The main difference between them is that the Prophecy generator does not care about coding standards (given it is a temporary class) and so does not need to make the formatting configurable. Given these different requirements, I'm not sure there is any opportunity to share code, but this should be evaluated.\nRegarding the needed refactoring, I think the first step (listening to events where generation may happen and then triggering the generator when needed) is fine.\nHowever, the second step should indeed be split into several collaborators\n. yeah, this is what I meant when sayign we should evaluate whether a common codebase could be shared. I'm not sure it is possible though because of different needs\n. Inside the spec, arguments are not the real mock. they are PhpSpec Collaborator objects. If you need to pass it explicitly to a method which is not wrapped by PhpSpec, you need to call getWrappedObject().\n. And note that this is an opiniated choice. If you cannot run the spec of your class without changing the global scope here, it is a design smell for your class, and PhpSpec explicitly wants to point such smells by making them hard to spec\n. @ciaranmcnulty whatever priority is selected for the core maintainer, it will always be possible to use a higher one in an extension (unless you use PHP_INT_MAX as priority in the core, but this is insane). SO we should just document that maintainers wanting to register matchers should run after the core one IMO.\n. @ciaranmcnulty we should probably start to have a section of the doc dedicated to extension authors\n. Case 1 and 2 are actually the same (shouldThrow is a matcher)\n. @ciaranmcnulty get_declared_class won't help to detect this. It can only detect classes which are loaded during this spec, but your functional tests might involved only classes which are already defined (if there were speced themselves previously for instance). It does not allow measuring the number of involved classes.\n. should we make this configurable (without having to overwrite the whole template, which is kind of hard as it forces to update it for any improvement done in PhpSpec later) ? This way, we could satisfy both people wanting final classes and people not liking them\n. @ciaranmcnulty overwriting the template means that they need to sync their custom template with changes done in phpspec all the time. It is less maintainable than a flag in phpspec.yml\n. I opened an issue about explaining such decisions in the doc (not only for final)\n. the open/close principle is about providing extension points. This does not mean allowing inheritance on the class. Inheritance is most of the time the worst way to provide extension points for a library.\n. Is Puli defining a constant directly in vendor/autoload.php when using it ? This should be reported as a bug in Puli. the vendor/autoload.php file generated by Composer is explicitly designed to be included as many times as you want (as it gives you access to the autoloader instance)\n. @ciaranmcnulty yes, because we know about the Composer contract so it is safe to avoid the extra checks of the _once version.\nAnd the reason for the composer contract is that it is the only way to give access to the classloader by returning it from the file. If you require_once, you don't receive the classloader when the file inclusion is skipped (because of already done previously) but true instead.\n. @ciaranmcnulty most PhpSpec opinions are precisley things which don't have an option.\n. And it is a totally different topic than the configuration page\n. Composer already generates a bat binary when running it on Windows (and it generates a working one).\nAnd your PR does not allow to run vendor/bin/phpspec, because you don't ask Composer to put the bat file in vendor/bin anyway\n. @ciaranmcnulty Behat used to support a PEAR install (the PEAR channel has been discontinued, but we indeed haven't removed the bat file)\n. Recovering from such errors is probably not a good idea: at the time the shutdown function is called, some parts of phpspec might already have been garbage collected, making it hard to ensure a consistent state (there is a reason why these errors are called fatal)\n. @egeriis if you are specifying an exception handler, you should call $this->catchException($e) and assert what it does.\nThrowing an exception will not trigger your own exception handler in this case but the PhpSpec one (and it is not a spec anymore if you expect it to call your own handler but a functional test, which is not what PhpSpec is aimed at)\n. What is the issue you get exactly ?\n. @ciaranmcnulty I would not change the requirement to forbid PHP 7 for now (unless you first debug the reason for each failure to know whether it is an intended BC break in PHP 7 or a regression)\n. #659 seems to be the same issue\n. OK, I'm closing this issue in favor of #659 even if it is the oldest one, because there is more context in #659.\n. @ciaranmcnulty stylecu.io just runs PHP-CS-Fixer\n-1 for running the style checks on Travis itself. I prefer keeping the Travis build status for the status of tests only.\nAn option would be to add a failure condition on Scrutinizer to make it report a failed analysis when there are new CS issues.\n. Looks like the hack used by PhpSpec to bypass typehints does not work anymore. Typehint failures are not fatal errors instead of recoverable errors\n. @ciaranmcnulty PhpSpec supports 2 syntaxes to define the type of collaborators:\n- through phpdoc (see Prophecy for an example using this standard)\n- through hacked typehints thanks to a way found by @everzet to bypass them\nThe second syntax actually relies on the possibility in PHP to bypass typehints (and so to run broken code) thanks to carefully crafted error handler.\nWe will probably need to drop this feature on PHP 7\n. @digitalkaoz there is a work in progress by @ciaranmcnulty to support the typehint-based notation on PHP 7 too.\n. not that array($offer) will be unwrapped automatically by PhpSpec, by replacing the array. However, for objects, it does not know how to unwrap doubles used internally, because there is no way to do this in a generic way (and btw, in many cases, you will already have an issue with a typehint when building your object).\n. @RyanHavoc can you show what vendor/bin/phpspec contains ? Is it a symlink to vendor/phpspec/phpspec/bin/phpspec or a regular file ? And if it is a regular file, what is its content ?\n. @RyanHavoc If it is a copy of vendor/phpspec/phpspec/bin/phpspec, you have a major bug in your setup. Copying the file to a different location indeed breaks all file references in it. and this is not what composer is doing when creating vendor/bin/phpspec. It either creates a symlink or a proxy bin file (forwarding the call to the original file).\nSo check your stack to determine which tool overwrote the file created by Composer with a broken one.\n. Well, if Laravel overwrites the bin files generated by composer in a way breaking them, it should be reported as a critical bug in Laravel.\n. it may be related to the file syncing, indeed\n. I think a PhpSpec plugin enhancing the autocompletion for PhpSpec would be better. @mixin is wrong: the magic methods correspond to names of the SUS, but return values don't. So you would still not have the proper completion for assertions.\nBtw, someone writing such a plugin should also consider supporting the Prophecy autocompletion in other contexts (PHPUnit 4.5+ for instance)\n. @ciaranmcnulty the community plugin for Behat was making PhpStorm crash on boot. This is a valid reason not to adopt it in core.\nFor Symfony2, Jetbrains recommends the awesome community plugin (they even use it as example in their blog post announcements about each improvement of the plugin API since a long time)\n. :+1: \n. good catch. thanks\n. You could define your MockDocument after the SerializerSpec in the file, and it should work fine.\nThe other solution is to put your MockDocument in a separate file and make it autoloadable (through the autoload-dev composer setting for instance)\n. The issue about supports could happen with any matcher out there though (for instance, shouldHaveCount can trigger different behavior depending on whether you are countable or no, and whether you have a method hasCount or no)\n. Anyway, you could just get the client through the normal creation of collaborators. Examples are isolated. Collaborators are not shared between examples.\n. Looks like the same commits are appearing multiple time in the history for this PR. It would be great to clean the commit history a bit\n. @adamelso no. Foo::class is resolved at compile-time and does not care about undefined classes. It does not autoload the class\n. @pamil they even said it explicitly, so no need to assume: https://github.com/Sylius/Sylius/pull/3736#issuecomment-165737301\n. does it work on Windows too ? and on PHP versions compiled with --enable-sigchild ? proc_open is not exactly a cross-platform API (which is exactly why the Symfony Process component exists to normalize the behavior)\n. As solution might be to use symfony/process 2.6+, which allows passing a stream for the input, which could then allow to write to this stream.\n. The issue is that in your case, the typehint is spec\\Foo\\Bar\\AnotherOne.\nand trying to do some magic to transform the collaborator class to another one is a bad idea IMO (btw, it is valid to have fixture classes for collaborators living alongside your spec)\n. @ciaranmcnulty you mean that we would give the option to generate the class in the SUS namespace and then also add the use statement in the spec to reference it ?\n. AFAICT, these scenarios are not testing anything. If we disable the loading of extensions in PhpSpec, your scenarios will still pass as there is nothing relying on the extension in the suite you are running\n. this scenario is covering that extensions can provide matchers. This is what its description should be\n. you are still truncating lines in the case of multiline strings, which is inconsistent\n. well, assertions currently don't actually trigger instantiation (because of weirdness required for shouldThrow in the current implementation). So there is nothing triggering the actual instantiation here (because duringInstantiation also triggers it separately in a special way)\n. it is not a new feature. Using phpdoc to configure collaborators is available since the first (beta) release of PhpSpec 2.\n. This phpdoc is here for a better IDE support, so the question is how much this is supported by IDEs.\n. This should be reported to PHP, not to PhpSpec. Zend_mm_heap corrupted means there is an issue in PHP itself (or in a C extension).\nand btw, you should try the same on PHP 5.6.14 first, to know whether they fixed it already or no. and also try it by disabling your extensions, to see whether you can identify an extension causing this.\n. @ciaranmcnulty in Behat, we have a --strict option to make the suite fail on pending steps (by default, they are just displayed but not considered as failures).\nMarking failures as passing should not be in core. It should be left to a phpspec-vw extension :smile: \n. @ciaranmcnulty please enable it on the repo (for branches containing the config flag), so that this PR can run on appveyor\n. Tests are broken on PHP 7\n. @ciaranmcnulty what you could do is register an autoloader for the spec folder which applies this wrapper. This way, traits would be rewritten\n. Well, I don't think bumping to PhpSpec 3 just for the removal of the Interface suffix is worth it. It would break all the ecosystem of extensions (and without a way to support both 2.x and 3.x together)\n. @ciaranmcnulty that's not suitable as is though, as we should introduce it first with a BC layer, and then remove the BC layer only after that.\n. @ciaranmcnulty it is better to provide an easy upgrade path. Otherwise, the migration is much harder.\nDeprecations should at least be considered for things impacting users of phpspec (opposed to extension authors)\n. @ciaranmcnulty I'm OK with BC breaks without BC layers for extension writers (especially given that extension APIs are not really documented).\nBut anything impacting spec authors (i.e. end users) should introduce the new interfaces and deprecate the old ones in 2.next, before removing the old ones in 3.0.\n\nYou have made me realise that MatcherProviderInterface and so on might need documenting.\n\ngood point, but should be reported separately (and not waiting 3.0)\n. @ciaranmcnulty to provide an easy migration path, there should be a 2.next allowing to use new names for user-land APIs.\nThe Behat 2->3 upgrade is not similar here, as Behat 3 was a rewrite from scratch, and so could not provide such easy migration path.\nI'm fine with changing names for consistencies, if we make the migration path easy (and shipping a 2.next for that would not be that hard IMO)\n. I think most of the changes you are doing are related to the fact that you are not running the PhpSpec testsuite itself, but a codebase in which you changed all line endings locally. In this case, the testsuite might indeed not work, but this is quite expected as you are not running the original codebase.\nI strongly suggest you to disable the conversion of LF to CRLF on checkout.\n. Well, if you want the namespace Test\\Spec for your specs, configure the spec_prefix accordingly.\nbut PhpSpec will always put the FQCN after the prefix. It won't allow to strip a prefix from the class name\n. > I'm wary of making the path too 'fuzzy' though. @jakubzapletal's might be the correct way to do but we'd need to consider what happens when both the --suite and a path are given.\nwhat Behat does is to run the feature files matching the path, among features files of the specified suite. This is the better way IMO: just do a AND of both conditions given in the command\n. Caching the composer cache is better than caching the vendor folder: an existing vendor folder impacts the dependency resolution, which can result into issues if it is corrupted.\n. Well, do you have an autoloader defined for your spec/ folder ? even though PhpSpec avoids calling it does not mean that some other code may not trigger it earlier\n. @ciaranmcnulty IMO, the first step before removing deprecated code would be to make usage of deprecated code clear when running specs, to prevent mistakes were we force using a deprecated layer:\n- trigger deprecation notices when using deprecated code. I suggest using the Symfony convention, i.e. silencing them, as this prevents them to become exceptions with common error handlers. Not silencing them would mean that common error handlers would turn them  into exceptions, thus breaking BC layers (as the exception would prevent them from running). We made this mistake in Symfony 2.7.0 and then thought about silencing them\n- collect triggered deprecations. You can look at how Symfony does it in the Debug component (to log them) and the PHPUnit bridge (to display them and change the exit code when running PHPUnit). As you use both Behat and PhpSpec, this means that both tools should support such feature (I would totally agree about having this feature in the core for Behat, but I haven't had time to implement this yet)\nThe next step would be to ensure that PhpSpec can run without triggering any deprecation warning (meaning that users can get rid of all deprecations warning too), except in places testing legacy behaviors explicitly (in PHPUnit, we identify them with @group legacy, using the PHPUnit group feature).\nThis step will show you that ~80% of the changes done in this PR are actually needed in 2.x (this PR should almost only contain removal of code)\n. @shanethehat giving a link to the PR would help\n. Why are you storing all mocks as properties in your spec classes ? This is probably what creates issues for you, because it is very likely to create cyclic object graphs, which cannot be released from memory by the refcount (and thus stay in memory until the GC collects them).\nPhpspec relies on argument names to inject the same collaborator instance in let and in the actual example.\n. The right way to do it in PhpSpec is even different from your second case:\n``` php\nfunction let(\\DI\\Container $di)\n{\n    // Do some initialization of the $di test double, but don't store it in a property\n}\nfunction it_should_do_something($di, \\Path\\To\\Class1 $class1)\n{\n    $di->get('class1')->shouldBeCalled()->willReturn($class1);\n$class1->getData()->shouldBeCalled()->willReturn(array());\n\n}\n```\n$di will be injected based on what was done in let() (you can typehint it again but it is not needed).\nBtw, totally unrelated to Phpspec, saying \\Path\\To\\Class1 is wrong. It is not a path at all.\n. @ciaranmcnulty the IDE already complain, because $class1->getData() does not return a MethodProphecy as far as the IDE knows, and so it tells you that shouldBeCalled() does not exist...\n. @naomigo exactly.\nI even think that you should probably never store anything in a property of the Spec object (btw, doing it would prevent you to spec the behavior of a property with the same name in the subject)\n. yeah, this is the power of relying on the refcount to release memory rather than creating cyclic object graphs and forcing the GC to enter into action, especially when it has to enter into action after each example being run...\n. @pamil segfaults are crashes in the C code, so they are bugs in PHP (even if they were not affecting the phpspec code previously). So it should be reported to the PHP team\n. The issue is that the PHPUnit comparison library is used when matching arguments, and it does such sub calls when handling DateTime objects: https://github.com/sebastianbergmann/comparator/blob/937efb279bd37a375bcadf584dec0726f84dbf22/src/DateTimeComparator.php#L46\nProphecy should register a comparator able of comparing its doubles without performing extra calls on them, to avoid running the comparison logic aimed at the real object (which does not make sense for such case). Please open an issue on Prophecy about that.\nHowever, I agree with @sroze and @jakzal that using a real instance is perfectly acceptable here, and probably even better than mocking it.\n. btw, the fix may even be requested in the Comparator library, as PHPUnit uses Prophecy. PHPunit_Mock_Object is supported directly in the library for instance.\n. closing as the PHP bug mentionaned by @nick-jones above was fixed in PHP 7.0.6\n. -1 for document markers\n. @shrikeh when the file contains a single document (which is always the case for config files, as there is no point putting multiple documents in the config file), I don't see any benefit about using an explicit document rather than a bare document. It only makes things harder to read for people not aware of the full YAML spec.\n. This is because the call to your method myFactoryMethod is not done inside MyClassSpec but inside PhpSpec. and the PhpSpec file is not declared in strict mode (and we cannot put in it in strict mode as it would force all users to write specs in strict mode).\nNote that due to the way strict types work in PHP, the TypeError is not part of the specification of your class. Strictness of the argument scalar typehint is not something chosen by your class but by the file using your class. This is the place choosing whether they want to always throw a TypeError or to let PHP cast the argument when supported.\nThis makes me tell that there is no point trying to support this case in PhpSpec, as it does not make sense according to the way PHP works.\n. @Harrisonbro the strict mode is defined by the file setting the value. So for arguments, it is the caller file, and for return types, it is the implementer (the rule being that the strict mode is defined by the code able to fix issues).\nMy own approach would be (in the future when targeting PHP 7) to typehint as a string, and let the caller decide whether casting is fine for them or no. They are the one deciding whether they want to be strict or let PHP do its magic. Your library does not care (when the argument is typehinted as a string, you will always receive a string).\nThis is similar to my approach for object typehints: I don't write examples testing the PHP behavior when calling it without respecting the typehint. I consider that what happens is not part of the contract of my class (it is part of the behavior of the language instead, and it is different on PHP 7 than on PHP 5 btw)\n. this means that CI server will now run code generation by default, which does not make sense\n. does it really make sense to put this in the source code of the tool ? We could create a phpspec/assets repository instead to store such things\n. @everzet but the doc is here because it should be versioned together with the code, as it evolves with it.\n. @ciaranmcnulty I don't think so. If we change the PhpSpec branding, it should just replace the older logo (we can still find older versions of the logo thanks to the git history of this other repo)\n. As @ciaranmcnulty is the lead now, I think it is logical to have him in the list here\n. @ciaranmcnulty if this feature is removed in 3.0, it would be great to warn people using it in phpspec 2.x so that they know they should change their specs (Prophecy is impacted btw)\n. I just merged https://github.com/phpspec/phpspec/pull/923 which adds the upgrade guide for 3.0 in the doc. Can you rebase your branch (so that it is based on the uptodate master branch including this doc) and then update the doc too ?\n. :+1: \n@ciaranmcnulty the 5.3.3 build should be removed from the 2.5 branch IMO. This Travis image is just unusable as it does not have openssl\n. @ciaranmcnulty the same solution is to stop using the 5.3.3 environment.\nTesting against the latest 5.3 is enough guarantee IMO. Other minor versions of PHP are only tested against their latest release (or at least the latest at the time of the Travis environment update...)\n. @ciaranmcnulty doing it periodically is fine, as long as you don't wait too long to propagate a bugfix to master (waiting weeks is not good), especially given that there is no 3.0 release yet, and so there should not be that many projects using it yet.\nIf changes in 2.5 don't happen frequently, it may be easier to just merge into master each time, to avoid forgetting it (you can of course merge multiple bug fixes in a row and then merge 2.5 into master only once at the end, if this case happens).\nI would not enforce that each merge to 2.5 is followed by a branch merge (not fine when multiple bugfixes are merged in a row). But for the case of phpspec, I think that a weekly merge would be harder to maintain than an immediate merge (Symfony is in the opposite case given that merging into older branches happens much more frequently due to the project activity rate)\n. Well, this does not change things. We still need to merge 2.5 into 3.0 (otherwise, it is a totally different maintenance workflow based on rebasing, as done in Doctrine, but this is much harder to follow whether the fix was applied in all concerned branches as they are different commits).\nIn most cases, the maintainer can resolve conflicts quite easily.\nIn cases where the conflicts are hard to resolve, they can ask for a separate PR for 3.0, keep the unfixed code during the conflict resolution and then merge the PR fixing the bug again in 3.0. But this is a rare case. For reference, it happens only once every few months in Symfony.\n. what is the benefit of implement the container-interop interface on our custom container ? all code is specific to the implementation anyway, because PhpSpec does not need a service locator, but a DIC container which can configured (the container is never injected anywhere as a service locator AFAIK)\n. @ciaranmcnulty the delegation mechanism does not allow to customize existing services easily (it allows to let another extension define the service) and does not support overriding services.\nSo IMO, it is not the right option to provide extensions. It would make them less powerful than today.\n. @Sam-Burns being able to overwrite services with a different implementation of the same interface is a very useful extension point\n. and btw, container-interop won't work either for the existing use case of collecting services to build an array (of commands for instance) AFAIK, which is currently handled by doing a prefix-based lookup, and could be handled by tags if switching to the Symfony DIC\n. @Sam-Burns Look at any place using getByPrefix, and then try to see how an extension using container-interop would do to hook into them. All these places are important extension points. And PhpSpec itself cannot know the service ids it should retrieve there (this is precisely the point of retrieving all services starting with a given prefix), making delegation unsuitable.\n. @ciaranmcnulty I reviewed container-interop (I had several hours-long in-person discussion with one of the people behind it and other PSR-11 experiments) and the delegation-based system relies on the fact that you ask for a precise id.\n\nthen extensions can wrap/modify that collection to add new services.\n\nYou cannot, as delegation-based lookup does not allow decorating services (only one of the container can define the service, and others are not considered). This is one of the reason why other ways are explored for PSR-11\n. > I'm not committed to container-interop at all BTW, but I want to decouple extensions from our container (and not make them rely on another specific container too) if we can.\nGiven that the only goal of the extension class is to configure the container, this looks quite hard. You need to give them an API to configure the container (and container-interop is not such an API btw, which is why I think it does not fit here).\nOn a side note, designing the container for the extension system with just a PR on this repo won't work, as this repo does not dogfood its extension API to configure the container and so won't let you notice places which don't work.\nThis is the big difference with Behat 3, where core features are actually implemented as a bunch of extensions which are always registered, and so working on Behat itself forced to have enough power in extensions (and this is why Behat extensions access the Symfony DIC API directly rather than abstracting it btw).\n. This proposal looks weird to me. You are basically creating 2 different holders depending on where the params are coming from. The config file should be here to configure the DI container rather than configuring another object needing to be used to retrieve the configuration of services.\n. What is the value of this ConsoleManager ? This looks like a separate container for only some of the services instead of using the normal container.\n. @Sam-Burns what we have today is a service container, which is getting configured.\nThe fact that the Input service is not instantiated by the container itself is an implementation detail today, while your PR forces any service needing to consume it to know about the fact that it is special instead of being available as a service.\nI consider the current code cleaner than your proposal in this regard.\n. @Sam-Burns this set calls are part of the container configuration, because we are required to use the existing Input and Output objects rather than instantiating it inside the container.\nnote that the Symfony DI component aknowledges this use case too. This is exactly what synthetic services are for.\n. The commit moving the registration of suite locators to PrioritizedResourceManager looks wrong to me:\n- it is not the goal of the PrioritizedResourceManager to configure itself. This is the opposite of DI.\n- this does not allow extensions to register extra locators from other places.\nRemoving existing extension points looks weird to me.\nthe commit https://github.com/Sam-Burns/phpspec/commit/918e797047f4aefaa556e05d97190dad02cc4683 changes the behavior of phpspec, which looks suspicious to me.\nand https://github.com/Sam-Burns/phpspec/commit/ad040ae484876a851fc33c37fbf568884aeca01d looks very suspicious to me, as it makes the RunCommand responsible to configure parts of the container instead of just using it.\n. > to be more standards-compliant.\ncontainer-interop is not a standard. It is a proposal for a standard (and from the discussion about PSR-11, it is unlikely to become the standard btw, as many people have expressed concerns about it being unsuitable for usage in frameworks, defeating the purpose of a FIG standard).\n. > container-interop is a standard, it's not a FIG standard ;-)\nWell OK.\nbut then, note that it is a service location standard, not a DI container standard (despite what it claims to be).\nand PhpSpec needs a DI container to provide extension points (being geared towards a service locator API is what makes container-interop unable to support some use cases, including the most common PhpSpec extension point. See the phase 5 PR failing to support it)\n. OK, so now you finally have the proof of what I said days ago: container-interop does not work for service decoration (your change triggers an infinite loop).\nAnd btw, this is one of the big issue with container-interop (not the only one btw).\n. @Sam-Burns please avoid using a github mention in the commit message, especially when you rebase the branch. It sends me a notification email each time you push a rebased commit (as this is a new commit)\n. @ciaranmcnulty lo\u00e7oks like it considers the version of the root package as being dev-2.5, which does not make sense. I suspect they have a bug in their code handling cyclic composer dependencies\n. The issue is not in composer IMO, but in the value which is set by Scrutinizer in the COMPOSER_ROOT_VERSION constraint. I suspect they just set it as dev-$BRANCH, without taking versionned branches into account.\n. @ciaranmcnulty you should report it to Scrutinizer though.\nA workaround might be to add a branch alias from dev-2.5 to 2.5.x-dev in the composer.json (with a comment in _comment explaining that this is to workaround a scrutinizer bug)\n. Looks good to me otherwise\n. have you tried my suggestion for a workaround ?\n. Another solution would be to add some special phpdoc on matchers.\nWe have done this in Symfony for events, to allow the PhpStorm plugin and the Drupal doc to identify events, and know the associated event class. See https://github.com/symfony/symfony/blob/24e08e9657f46846d79050af8b6b3d8cdfef0f62/src/Symfony/Component/HttpKernel/KernelEvents.php#L28\nWe could have a @phpspec-matcher haveCount on the class (allowing multiple ones to account for matchers supporting multiple naming), to document that this matcher provides support for shouldHaveCount and shouldNotHaveCount (the fact that matchers are applied through should* and shouldNot* is something the IDE plugin should handle internally IMO).\nInline matchers would not need such phpdoc btw. The IDE just need to look at the keys of the array being returned\nReturning a regex would probably make it hard for IDEs, as they would have to reverse-engineer the regex to build matching strings when providing autocompletion.\nAnd I don't thing we need a regex for core matchers. they don't do crazy things requiring it AFAIK.\n. yeah, matchers provided by extensions will work, as long as the extension author applies the convention too\n. OK, can these extension register anything in hooks relying on id prefixes currently, or no ? If it cannot, your refactored extension system is unusable.\n. Actually, I suggest you to first write some Behat scenarios about using the different hooks available to extensions (we only have one of them currently IIRC). Once the testsuite covers the needs of extensions, it becomes easier to refactor things without breaking the power of extensions\n. @Sam-Burns please add them in a dedicated PR based on the existing code, so that it can be merged faster.\n. @moufmouf the issue is bigger than the performance penalty, because it forces to instantiate all listeners and all their object graph, which means that a later extension would then be unable to overwrite any of these object (or rather, it will overwrite the service only for half of the PhpSpec object graph, leaving things in a broken state).\nand I totally agree with you that service providers are a better solution (I think you already know this based on our past discussions).\n. @Sam-Burns the main issue is not the fact that it forces loading it, but the fact that it forces loading it (and potentially lots of other services too depending of what the extension does) far too early, while the object graph is not properly configured yet (an extension would forbid any other extension from overwriting services, just because it wanted to inject these services in one of its listeners)\n. > I'd like to add the container as an argument to getServices() method, but I fear this could create the same kind of problems we have here. I'd be interested into knowing what you think about it.\nYeah, this looks like a bad idea to me. To avoid issues, it is important to distinguish the configuration phase from the runtime of the container. During the configuration phase, you should not instantiate any service (so that a change in the configuration is taken into account properly).\nThe possibility to mix the 2 phases only creates issues. And we moved to forbidding it:\n- Pimple 3 freezes a service once it has been instantiated, forbidding to reconfigure it (the distinction between both phases is maintained on a per-service basis there, which may still create hard to debug things if one of the services gets frozen by a mistake, but it allows to keep the API simple)\n- Symfony 3.2 is deprecating the possibility to retrieve a service from a ContainerBuilder which is not yet compiled (and Symfony 4.0 will forbid it entirely), as it causes many issues (and potentially even fatal errors in case the configuration of this service is only half done)\n. @Sam-Burns your sections Adding a matcher and Adding an event listener suffer from the issues described here. The rule to avoid it is simple: never use ->get() (or equivalent methods) in your extension (you can use it inside closures defining a service, as these are running much later than the extension)\n. btw, for the event listener, it becomes even worse when your listener has some dependencies\n. Note that this break BC as it does not allow to define a matchers parameter anymore.\nAnd as extension are configured by defining global parameters, we have no idea what params are defined.\nIMO, we would need a cleaner structure for the config files if we want to start introducing such special config settings\n. btw, this answers the question about 2.5 vs 3.0: it cannot go in 2.x\n. @ciaranmcnulty please look at https://github.com/phpspec/phpspec/pull/961#discussion_r67895606 even if Github collapses it by default due to other changes.\nIt makes sense to add such restriction to avoid hard-to-debug issues due to a misuse\n. @ciaranmcnulty your PR changes the behavior of the set method. I don't know whether it is intended. The old method allows to do 2 things:\n- set a service instance directly, which will be reused all the time until replaced. In the Symfony DIC, this is a shared (container-scoped in 2.x) synthetic service\n- set a service definition which will rebuild the service each time. In Symfony DIC, this is a non-shared (prototyped-scoped in 2.x) service\nsetShared was used to created shared services, which is what define does know, and is fine.\nYou changed most places using set to use define, but this changes the behavior. Most changes are fine (it makes sense to keep it shared in most cases, as using set for many of them was just a performance optimization relying on the fact that they were used by a single shared service, but optimizing the way services are shared instead is way better), but changes should be reviewed carefully.\nAnd we need to decide whether all services should be shared or no (knowing whether we need a replacement feature or no)\n. @ciaranmcnulty I'm totally fine with removing support for the prototype scope, as long as we don't need it in Phpspec. We just need to make sure we don't need it\n. @ciaranmcnulty php-diff 1.1.0 uses the EOL of the platform: https://github.com/phpspec/php-diff/releases/tag/v1.1.0. If it makes tests fail on windows, it is probably because the testsuite does not normalize line endings before comparing the value\n. @gnugat the place where you should normalize line endings is when comparing the output in tests. Forcing to use PHP_EOL in the code is breaking things (most project force using \\n in source code)\n. this is because you are setting the ObjectProphecy instance in the property, not the double. So you are not calling the method on the double.\n. The solution is to get the real Bar object from the Collaborator instance (it is not an ObjectProphecy as I said above, but actually a Collaborator wrapper around it).\nSee my latest revision in https://gist.github.com/stof/227f6d405bd71f44f3389a9a6a4699a3/revisions for the way to update your spec.\n. This is currently not supported\n. @ciaranmcnulty isn't RTD building the master branch on each commit ?\n. ah, only for latest, not for stable.\nThe big advantage of having the doc in the same repo is that it allows to force people to keep it in sync with code changes.\nThe issue was to write a message saying this version is in development, which has 100% chances to be forgotten at release time.\n. having a generator method returning a string meant to be a feedback message to the user looks weird to me. If I see a signature generate(...): string, I expect the return value to be the generated string.\n. @ciaranmcnulty simple echo statements are a bad idea IMO. If someone wants to write a UI running phpspec in the background (I know someone did it for Behat in the past for instance, so this is not an insane idea), being able to pass a different implementation of OutputInterface (for instance the Symfony BufferOutput) is an easy way to collect the output. If you switch to echo, it becomes much more painful (especially if part of the output uses echo and the other one uses the Symfony OutputInterface, as you would still be forced to use the OutputInterface doing echo as well, to keep the output in the right order)\n. @ciaranmcnulty but then, you will still have your own output layer here, not straight echo everywhere needing to display something (and the IO interface can be this layer btw).\n. @ciaranmcnulty you don't need to unwrap $constraint as you don't pass it to the collection\n. And btw, we should also have much more behat scenario covering this:\n- case of extending a class\n- case of being asked to extend a class while the subject already extends a class\n- case of adding a new interface in a class extending a parent class\n- case of adding a new interface in a class already implementing some interface\n. Maybe make Behat overwrite the $HOME variable when launching the phpspec subprocess, to make it point to a folder controlled by Behat ? Btw, this would allow us to write a scenario covering the personal template feature, without erasing your own personal templates.\n. Closing in favor of #1106 which fixed the cause of the issue rather than making workarounds. > Github has a nasty habit of caching the Scrutinizer score badge for several days, something shields.io overcomes\nthis should be reported to Scrutinizer thought, so that they can overcome it directly too\n. @unfunco next time, please avoid mentioning me in your commit message. Each time you push such a commit to github, they send a notification. And each time you amend your commit, it creates a new commit and so retriggers the notif\n. I don't understand what you mean when saying PHPSpec runs shutdown after the error handler\n. rst and md are indeed 2 different markup format, so just renaming is broken\n. IMO, this PR is not worth it. The doc is using rST (and this will not change), so it makes sense to keep using the same format for the readme.\n. Well, does not mean it needs to be merged (btw, we should teach the teacher to contact project maintainers about this before asking their student to submit useless PRs...)\n. There is no need to revert this commit. There is only the need to make the phpspec code itself compatible with PHP 5.3 (i.e. not using ::class or the inline instantiation). We should indeed support both (btw, Prophecy was able to support both without any change on its side). @ciaranmcnulty done. @unfunco totally. I forgot about it.\n@ciaranmcnulty sure. I'm on it. Well, it looks like the Memcached mock for getByKey does not match the signature of the parent class. Please report this to Prophecy (and provide the versions for Prophecy, PHP and memcached). OK, looking at what ReflectionMethod('Memcached', 'getByKey') shows me, it has nothing to do with a Memcached::getByKey($server_key, $key, $cache_cb = NULL, &$cas_token = NULL, &$udf_flags = NULL) signature. The reflection API knows about Memcached::getByKey($server_key, $key, $cache_cb = NULL, $get_flags = NULL) instead. So this is a probably bug in ext-memcached. hmm sorry no, this is the result when using 3.0-beta1, which is the version I got in the ppa. I need to check again what happens.. PhpSpec being green is probably due to the error_reporting level not including E_STRICT (which is not part of E_ALL on PHP 5.5). The issue is that you don't make any assertion in your spec. So there is no way for it to fail. I'm not sure bumping the minimum version is actually required here.. btw, this also forbids Prophecy to test its own compatibility with sebastian/exporter 2, as phpspec forbids us from installing it (while we tell composer that Prophecy itself is compatible and so our users may end up using it). @ciaranmcnulty Once we complete the switch away from phpdoc doubles, we can probably allow both 2.x and 3.x until we drop support for old PHP versions (using 2.x only for old PHP versions).. @ciaranmcnulty as the only BC break is removing support for older PHP versions, I suggest we also backport it to older versions (see #1073). What do you think ?. @ciaranmcnulty any answer to my comment ?. OK, then opening the PR. @ciaranmcnulty PR opened. @ciaranmcnulty can you then tag a 2.5.x release with the backports in it ?. thanks. shoudln't it be automatic when merging master into 4.0 @ciaranmcnulty ?. willReturn does not make sense on the method of the SUT (should* are what are used). willReturn makes sense only for calls to collaborators.\nAnd in your case, the call to willReturn does not even happens. $this->action() will call the real action method of the SUT and wrap the return value. But calling the method seems to fail due to an issue in your own implementation.\nCan you show the body of the method ?. you cannot use willReturn on SUT methods, as I said above. $this->action() in the spec will call the method (which fails because it returns null) and then wrap the value in a Subject instance to allow applying matchers on it.. yep, nightly is 7.2 currently.\nI agree about ignoring the platform requirement for nightly (or altering the PHP requirement in the composer.json before running composer). Are you sure that PHP 7.2 actually forbids adding more arguments ? I think this rather looks like a bug in Prophecy, where it takes the signature from the interface rather than the ConsoleIO class (and so tries to remove arguments again). Reading the NEWS file in the php source code, I think I know what happened: when overwriting methods several times, PHP was checking the compatibility with the original signature, not the parent one, and they fixed this bug, which revealed the Prophecy bug.\n```php\ninterface IO\n{\n    function write($message);\n}\nclass ConsoleIO implements IO\n{\n    function write($message, $indent = null) {}\n}\nclass ConsoleIODouble extends ConsoleIO\n{\n    function write($message) {}\n}\n```\nPHP 7.1 and older were validating ConsoleIODouble::write against IO:write rather than ConsoleIO::write. yep, according to the error message in the Travis, I think this is what happens. And the PHP bug is the reason we never figured it out. @ciaranmcnulty you need to reveal the double, otherwise the double class might not be created.. have you tried putting classes in different files too, so that inheritance is resolved at runtime rather than compile-time ?. are you doing your tests on PHP 7.2 (seems like a silly mistake if no, but always worth checking) ?. @ciaranmcnulty which version of Prophecy are you using ?. yeah, this is the same version than in the failed Travis build. This eliminates a potential explanation. Can we provide a better debugging experience for such kind of mistake for PhpSpec users ?. @ciaranmcnulty why does PhpSpec need to instantiate an object without calling the constructor ?. @ciaranmcnulty this is a mistake IMO (because the default it_is_initializable example then does not test that it is instantiable. However, the PhpStorm wrapper is still messy. Getting the time in the before event does not make any sense. We cannot know the execution time of the example before executing it. they should display the duration using the after event instead.. @ciaranmcnulty AFAIK, we only instantiate with null for the before event, and getting the time here does not make sense (a formatter doing this is broken itself, as it would always report 0 as duration if we fix the TypeError).\nSo my suggestion for the fix is to actually throw aBadMethodCallExceptionin the getter explaining that getting the duration in thebeforeevent does not make any sense.. @bluebaroncanada the example being run is inspec/AppBundle/FooSpec.php`. this is not in the vendor directory. @bluebaroncanada the code were the error is triggered is part of PhpSpec itself. This does not mean that the spec being run is from the vendor folder. It is just that the code of PhpSpec is there.. It is NOT doing that. It is using PhpSpec code to run the example. This is different. Using Phpspec code while running PhpSpec is totally expected.\nThe error message you gave does not contain the CLI command being run.. I agree that the void typehint in spec files does not make sense for readability.\nbtw, PhpSpec does not recommend camel case. It recommends snake case.. AFAICT, the \"official recommendation\" about coding standards is not part of the doc currently. I think it comes from slides from @everzet or @MarcelloDuarte when presenting PhpSpec.. this TypeError is actually a bug in Phpspec here (when trying to tell you the expected error message). Closing in favor of #1224. Looking at these changes, I don't see anything impacting phpspec. Well, the phar is not about avoiding conflicts if you don't rename classes in them, but about creating them without any chance to solve them :smile: . you could simply check if (!preg_match). All falsy values returned by preg_match are about not matching.\n. Instead of throwing an exception, I would display a nice message and return 1 (to exit with an error code). It will be more friendly for the user than the display of the catched exception\n. you need to allow \\ too, to accept giving a FQCN with the proper namespace separator\n. I think that currently, PhpSpec does not let the user see any uncaught exception for stuff related to the business logic of phpspec. the only way to see an exception message displayed by the Symfony Console catching would be because of a bug in phpspec breaking something.\nAs this error is about a invalid user input, it is not a broken PhpSpec execution path. It is a user error, not a PhpSpec one. And we should expect user errors to happen\n. it does. ->createResource($classname) takes care of it.\nBtw, this command is expecting a class name you want to describe. So rejecting \\ is an error IMO.\nAccepting both \\ and / as separator is a convenience because the \\ needs to be escaped when writing a command because it is the bash escape char, and people don't like having to escape it. As the logic already accepts it, the validation regex should let it pass.\n. you should write it as several messages to avoid having a very long line. writeln accepts an array of messages and will write them one per line.\nand I would color the class name as <value> too\n. you should use single quotes to be consistent with the other parts of the library as you don't need escape sequences such as \\n in this string.\n. @MarcelloDuarte Being an input validation is precisely the reason why I consider it should display a nice message instead of an exception.\nPeople seeing a message starting by InvalidArgumentException will tend to think that PhpSpec has a bug (and they may even stop reading here as I already saw people reporting an issue with the error message giving exactly the way to solve their issue) whereas it is actually the user making a mistake when passing the class name.\n. you should mention the IRC server, not just the channel.\nAnd you should be careful about the markdown formatting. You are making it a h1 currently\n. Please re-add it. It avoids modifying the previous line when adding a new one\n. shouldn't this be an instanceof check on some of the phpspec exception interfaces ?\n. Actually, it should be Argument:cetera(). Argument::any() means \"any value for this argument\"\n. Some typehints are missing here\n. you should add a use statement here and put it on the same line than the closing curly brace\n. this should use strict comparison\n. The typehint should use the EventDispatcherInterface rather than the implementation\n. Please use spaces for the indentation, not tabs\n. same indentation issue here\n. this should not be removed (or it should be moved to the let() method and removed from other methods as well)\n. this should happen in beforeExercise, not in the constructor IMO\n. this is always 0. Is it really worth adding it ?\n. Sorry, it should be beforeSuite.\nPhpSpec only has 1 suite. I confused with Behat 3 which is able to run several suites (as part of an exercise)\n. As you are incrementing by 0 all the time, you could get rid of this assertionCount property\n. @MarcelloDuarte But this BC break does not impact extension authors. It impacts extension users\n. instead of providing BC, we could at least throw an exception asking the user to update their config\n. Actually, it introduces a new possibility: it decouples the YAML config from the DIC parameters, which means that extensions can make their config more semantic (using a nested array to group related settings), can validate the config provided for the extension and can provide BC for older formats when it gets refactored. Btw, these are the reason why Symfony2 bundles have a system for semantic configuration instead of relying on the user to set DIC parameters directly.\n. @ciaranmcnulty Yes, extensions can access the YAML config. But if they want to provide a semantic configuration, which can be processed and for which it can provide BC, it means that you end with extra stuff in the DIC if you start by setting the semantic config as a parameter and then process it after that \n. this requires passing a Closure on PHP 5.3, forbidding any other type of callable\n. if it is not callable and not null, it should trigger an exception instead of silently changing it (a better way would be to typehint the callable but the min supported version is still 5.3)\n. note that as of 5.4, this syntax works for any callable\n. what is this 7 ?\n. As the rendering of template is done by a collaborator which can be replaced, hardcoding such length is broken. For instance, if you replace the template by a template containing the license header of your library on top, it will be different\n. array_key_exists will only work for real arrays (and maybe ArrayObject), not for arbitrary ArrayAccess implementations. an extra check needs to be added\n. I would not remove these methods. Now, the only way to achieve this feature is through the PHP magic (which would require calling __call explicitly if the method name matches a PhpSpec name btw, which is ugly). This goes against the best practices advocated by @everzet in the opinitionated bits of Prophecy: https://github.com/phpspec/prophecy/issues/44?source=cc#issuecomment-23018755\n. should you really ignore all exceptions silently here ?\n. missing typehint\n. shouldn't it be broken for any other exception ?\n. you need to check that $wrappedObject is not null before calling the method on it (see the typehint)\n. unused collaborator\n. spec is missing here\n. in case you have a conflict between the method you are specifying and the PhpSpec conventions. It is impossible to spec a should* method through the magic methods (which means it is not possible anymore)\n. just remove the method entirely and let the interface require the implementation in concreate child classes\n. These methods should have phpdoc to document their expected return type and their meaning\n. why making it abstract ? The implementation is complete\n. this explains why both other interfaces extend this one, not why this one is marked as abstract\n. why having protected mutators ? If the presenter and the io are constructor arguments (which makes totally sense IMO), child classes should call the parent constructor instead of overwriting it and calling setters\n. you should call the parent constructor instead\n. I would not pass the container in the constructor but as argument to the assemble method. All protected methods of the class are written in a stateless way: they can be called several times with different containers. But you are making the Assembler itself stateful just because of passing the container to the constructor rather than the assemble method\n. This looks like an unrelated bugfix. It should be submitted separately (and with a test to ensure it continue to work)\n. no need to use else as the if returns\n. I would keep the original exception as related exception.\nand you have a typo in the message\n. This looks weird. It should be part of the initialization fot he service IMO now that formatters are defined as services (which also mean you don't need a special interface for formatters, as it was only dedicated to initializing it)\n. @MarcelloDuarte It should not appear in the PR diff if it is already in master. This is weird\n. I would make all the helper methods private, unless you want to provide an extension point in the assembler (which would require instantiating the assembler in a different way to allow changing it). but extending the assembler methods seems unnecessary to me as the phpspec extensions can already modify the container\n. it will generate spec\\Namespace\\ClassNameSpec, not Namespace\\ClassName\n. shouldn't this be methodNotVisible() here ?\n. @ciaranmcnulty The each segment of a namespace must match this regex as well\n. however, using the unicode chars in yoru class name is probably a bad idea when following PSR-0, as it means your file name needs to use it as well, which is likely to break when switching platform\n. indeed. It is very common for projects to use LF as newline, even when one of the dev is on Windows\n. this should just be break;\n. please don't use such a hack in a public library. The resolution of dependencies will not be based on the older commit and the dist install would still use master.\n. you can avoid this self-update and use the version available on Travis directly. They are updating it often enough now\n. the Prophecy PR has been merged. So for now, you can change it to ~1.0.5@dev using the main repo\n. This looks wrong. Invoking a non-existent method should not return false but throw an exception to break the example run\n. This has nothing to do in the src/ namespace. It is not part of the PhpSpec codebase. It is a fixture for the tests\n. this spec is bad, because what you are really expecting is the behavior of PhpSpec, while you are describing the behavior of a dummy class\n. Please don't use the short-array syntax, to keep the spec compatible with PHP 5.3\n. @MarcelloDuarte This has already been reverted. And it was not failing, because at this time, the PR fixing the travis build was reverted by you (it was a mistake because you forgot to update your composer deps locally when testing and so thought the PR was breaking stuff)\n. shouldn't you check isInstantiated here ?\n. does it really make sense to pass arguments in this method ? Shouldn't it use $this->arguments instead ?\n. unused use statement\n. This change must be reverted (it is reverting #206)\n. this needs to be reverted as well (you are loosing #233)\n. @MarcelloDuarte should we keep this interface or drop it altogether ?\n. @MarcelloDuarte what is the reason for making $reportItemFactory nullable ? Passing null will be a fatal error anyway, because ReportItemFactory has a mandatory argument\n. note that PHPSpec itself does not need to pass null here. The container passes it explicitly\n. Ok, then I will remove the nullable typehint, to force the code to be working\n. Please revert this to avoid mixing the composer binaries and the bin folder of the PhpSpec\n. what are the differences ? If you are just stealing it, use the Symfony class\n. should be write, not wrote\n. Your different scenarios are dealing with different features (they are not even run the same command). they should not be in the same .feature file.\n. Well, I always write them in present sense, and this is also the case in the Behat suite or in the MinkExtension steps\n. No.The spec describes the class. phpspec describe generates the initial code needed to describe the class. But the class is not described when you complete running this command. It is described when you complete writing the spec after running this command (you don't even need to run the command to describe a class btw, you can create the spec by hand)\n. why ? It is much more readable this way, and the only cases where supporting Windows really need to use DIRECTORY_SEPARATOR are:\n- performing string comparison on the path\n- supporting PHP 5.2 or lower (which is not a valid case anymore)\n. @everzet @MarcelloDuarte could you give your mind on it ?\n. The issue is that I also consider that your feature description covers several features of PhpSpec. So the scenarios are indeed matching it, but our comments are still valid. The feature itself should be split.\nNote that I also suggest removing 001 from the name. I'm not sure Behat sorts the filenames before reading them (in which case it goes down to the behavior of the filesystem), but the order should be considered as an implementation detail as scenarios are meant to be independant anyway\n. maybe Given the spec file \"relative/path/to/class.php\" contains:. This way, it describes the state of the spec, not the action done to reach this state (we don't really care about the act that I wrote the spec or downloaded it from work done by ET to contribute to the human knowledge. We only care about the fact that the spec has the following content)\n. It should be the suite should pass, as the previous command runs the whole suite, not a single example\n. @jakzal we are talking about running the full suite, even if the suite used in this scenario contains a single spec whcih itself contains a single example (an example is a method of a spec in PhpSpec)\n. @ciaranmcnulty I see an issue with your proposal: how would you write scenarios dealing with let() or involving collaborators ?\n. it is. --dev is a no-op option (it is only there as a BC layer for people using it in a script)\n. PhpStorm also complains about it saying it cannot find the class string (which is indeed how such signature would read). I would remove the type entirely.\n. I would name it simply --config so that it is consistent with the naming used in Behat (phpunit uses --configuration but I find it too long)\n. any chance you can do it ?\n. given that commands are retrieved from the container before it is ready (and so cannot depend on anything, and cannot be provided by extensions), I'm wondering whether it makes sense to define them in the container at all.\n. Please use camel cased variable names\n. it is indeed\n. I would not make the reason option. IMO, we should enforce having a reason why the example is skipped\n. Well, for pending, it can make sense to have a default message, as the PendingException indicates that you are not done writing the example yet. It is not something you will keep in a spec normally. The default message is fine for most cases.\nOn the other hand, a skipped test is somthing which happens in a working spec suite. Running the example does not require updating the suite, but changing the runtime environment (enabling a PHP extension, installing a different version of a dependency, using a newer PHP version, etc...). The user should know about it.\nthe worse skipping code I saw in PHPUnit testsuite is probably tests using a comment to remember the reason like this:\nphp\nif ($condition) {\n    // skip the test as the feature is only available in some cases\n    $this->markTestSkipped();\n}\n. You don't really need to use DIRECTORY_SEPARATOR here. PHP 5.3+ works fine with /\n. it is not that you should move away. However, as of PHP 5.3, using / is supported for all file operations (see the changelog). So it can be used to keep paths shorter (and often more readable).\nthe only case were using DIRECTORY_SEPARATOR is useful is when you need to perform some string manipulation on a path.\n. we are only building the path. We are not manipulating it after that (doing some string comparison or replacements, for which / and \\ are different chars)\n. IMO, this does not make sense. Traversable and ArrayAccess should be independant here\n. why would you want to change the constructor of SubjectWithArrayAccess ? I'm saying that they should be independant classes (so no change at all in SubjectWithArrayAccess) given that they are dealing with different methods of the class.\nBut anyway, as said previously, this probably cannot work fine anyway\n. agreed. It should be a different feature file\n. this should indeed be reverted\n. this indentation change is wrong\n. Please revert this. It is perfectly valid to have a single-line call to implode with a multi-line call to array_map inside it in PSR-2.\nActually, all changes not related to normalizing bool/boolean/Boolean should not be part of a commit doing such normalization\n. it would be better to write it as beConstructedWith(...$constructorArguments), which is the PHP 5.6 syntax for variadic arguments\n. the next PhpStorm version (currently in EAP) supports the variadic syntax.\nIf you don't go for the variadic syntax, you should then use @method void beConstructedWith(), not @method void beConstructedWith() beConstructedWith($constructorArguments) which does not make sense in phpdoc\n. fine with me\n. The goal of using isset() first was to be faster than array_key_exists when it exists and is not null. If you run array_key_exists first, isset is not needed anymore for arrays at all.\nOn the other hand, I don't think array_key_exists works with ArrayAccess, meaning the current code is actually broken (ArrayObject works witharray_key_exists`` in PHP, but I think it receives a special treatment compared to ArrayAccess implementations).\nAnd if HHVM does not support isset($subject['abc']) for ArrayObject, it is a bug in HHVM which must be reported\n. and this does not solve anything anyway\n. Please add another scehario covering the case of an existing constructor too\n. you should inject only the parameter you need, indeed\n. please don't use $this->container here but the argument. Things were done this way on purpose to allow moving the container building to an extenral class more easily in the future (there was some work started for this but never completed)\n. this looks unused\n. stop-on-failure is not an argument. It is a --stop-on-failure option of the command. Arguments are not the same than options in term of a CLI. The wording is confusing in your step\n. $input is not used here. You should remove it\n. btw, I don't understand why you refactor this code. It does not add any feature\n. Well, including unrelated changes in your PR makes it harder to revisw (I spent some time trying to understand why this code changed before figuring there was no difference in the behavior). And the usage of the container property would make it harder to extract the container building (currently setupContainer and all its helper methods are not depending on the fact that the container ends up being stored in $this->container)\n. it is not a command either (the command is run)\n. well, it is named an option. I don't see any reason to look for a different name\n. I would not put this in the suite filters but in the global filters, so that it is possible to run wip scenarios through the CLI. Putting the tag filter in the suite means that WIP scenarios are not part of the suite (and given there is no other suite for them, it is impossible to run them)\n. you put the filters in the gherkin configuration:\nyaml\ndefault:\n  suites:\n    phpspec:\n      contexts: #...\n  gherkin:\n      filters: #...\n  formatters: #...\n. you should also implement SnippetAcceptingContext so that Behat puts step definitions in this class for undefined steps\n. why a DI exception ? It does not make sense IMO (use the SPL one here)\n. I would use console.helper.dialog instead than helpers\n. the method should be renamed here to match the step text (also for the previous one)\n. Use the uptodate badge: https://travis-ci.org/phpspec/phpspec.svg?branch=master\n. you should use https here (to avoid a useless redirection)\n. I would add a note saying that extensions can expand this list\n. why using italic in some places and bold in others when talking about phpspec ? This is inconsistent.\nBtw, should we really put emphasis on the library name everywhere we mention it ?\n. here, you are saying the phpspec while all other places are just saying phpspec\n. should still be ~1.0, (or be ~1.0, >= 1.0.1 if you don't want to allow 1.0.0). Otherwise, you are requiring >= 1.0.1, < 1.1-dev, preventing to get the next versions of the Instantiator\n. this should be done in the RunCommand only IMO (other commands are not expected to have anything to do with a test result, but already with exit codes)\n. This is an exit code, not a status code actually\n. I added the implements clause here, because it actually implements the main method of the interface (with abstract protected methods for parts of the implementation)\n. I would say 5.3+ here (I already saw someone telling me But I want to use the project with 5.5 and it says it is a PHP 5.4 library)\n. you should advocate the download through SSL, as done in the composer doc (or just link to the composer installation instructions)\n. right\n. Well, in all man pages I read, I saw exit code being used, not status code.\nI think the naming in the PHP documentation is a confusion with the HTTP status code\n. can you change both exception messages to use callable rather than callback to match the PHP type rather than the way the variable is used ?\n. same here about the wording btw\n. Well, the variable type is callable in PHP (see is_callable and the callable typehint)\n. this can only set a callable here btw\n. this sentence is misleading:\n- if setting an object, it will not be cloned each time. You get a single instance.\n- if setting a callable, the callable will be called each time. But whether this creates a new instance depends on what the callable does (setShared uses set internally, which is a clear indication something is wrong in the description)\n. yeah, as > is missing at the end\n. well, I used what made the smaller diff, making it easier to do it (and to see the change). I can switch the order if you want.\nBut we are already using such Yoda conditions for inequalities elsewhere (for instance here), so we might want to improve it in the whole library separately (Yoda conditions have an advantage for equality to avoid assignments by mistakes but they often make inequalities less readable as the order has more meaning for them).\n. this looks useless as it is already done in the parent class ConsoleFormatter (IMO, you could remive the overwritten constructor entirely)\n. mismatching phpdoc\n. yeah, they were probably forgotten when removing the setters from BasicFormatter because PrettyFormatter was not extending it but duplicating the setters\n. Should this use a PhpspecException instead ? The rendering of PhpspecException in the output is not the same than other exceptions in the output.\n. well, it probably require creating a new subclass, given it looks like a new use case not covered yet\n. -1 for PHP_EOL here. Most projects require to use \\n in their coding standards even for devs working on Windows (PSR-2 requires it for instance)\n. these are actually mixed here, not object (the place where you can put object is on compare\n. you check, you don't ask IMO\n. shoudln't this be using getByPrefix instead, to allow registering more implementations easily from extension ?\n. getIs looks weird. I would remove the get part here\n. I would remove the is from the private property, keeping is for the isser accessing it\n. Is Disablable an actual English word ?\n. shell escaping is necessary, otherwise it will break when some spaces are involved for instance\n. and there is some issues with passthru: the output of the command does not go through the Console IO but directly to the PHP output. So if someone replaces the ConsoleOutput by a BufferOutput to collect the output (for instance making a web UI to run phpspec for some reason), this will break\n. this implementation suffers from the same issues than the passthru ones\n. well, the isSupported method should handled it then\n. and note that I was talking about overwriting the OutputInterface at the Symfony Console level, which already works\n. well, I was mostly refering to all the issues about the output handling. I think pcntl_exec takes care of the escaping\n. php_sapi() === 'cli'\n. this should also check that the cli SAPI is being used to avoid issues\n. shoudln't it be suits ?\n. IMO, the license header is a much better example than the class phpdoc with @author for project-level customizations\n. this code snippet is wrong as you moved the namespace in the template above\n. I would say 13 builtin matchers given that extensions can add more matchers, and a spec file can as well\n. the way to describe the aliases here is not consistent with the Type matcher below.\n. and return a boolean. Each method will return a single one\n. actually, it works for arrays and for traversable objects\n. sorry no. Prophecy argument matching supports Traversable, not PhpSpec matchers\n. it is weird to say a method should return an array with ... and then say it works with ArrayAccess, because the first sentence start by saying the return value should be an array, which is wrong in this case.\na method should return an array or an ArrayAccess object with a specific key\n. bad copy/paste. This is the StringEnd matcher\n. bad copy/paste\n. hmm, indeed. I missed that ones was a plural here.\n\nI don't know why; English is weird\n\nFor verbs, s is used for a singular (he/she/it), not for a plural subject\n. looks wrong\n. there is nothing like that. In the following example, this simply defines a single container parameter mage_locator. then, the fact that the MagentoExtension reads this parameter is its own job\n. I would do the check only once:\n``` php\nforeach ($val as $class => $extensionConfig) {\n    if (is_integer($class)) {\n        $class = $extensionConfig;\n        $extensionConfig = array();\n    }\n// Allow null for easy syntax \"- Extenstion: ~\"\nif (!is_array($extensionConfig) && null !== $extensionConfig) {\n    throw new RuntimeException('Invalid config');\n}\n\n// Existing code here, plus the extra argument in load(), casted as array\n\n}\n``\n. needs to be removed\n. missing spaces\n. IMO, you can remove the private method entirely by calling the collaborator in places using it\n. you should handle the case of$reflectionClass->getFileName()beingnull(classes implemented in C or througheval) to avoid weird errors\n. missign type\n. it always return a string\n. you can remove this condition. When the token is an array, there is always an index 0 and an index 1 in the data returned bytoken_get_all(and you don't check the index 1 a few lines above)\n. rather than usingtoken_name`, why not using the constants and comparing them to the token itself ?\nphp\nreturn is_array($token) && in_array($token[0], array(T_COMMENT, T_DOC_COMMENT));\n. string type is missing\n. be careful about array_merge_recursive. It will probably not do what you expect. See http://friendsofsymfony.github.io/slides/config_definition.html#6 (and the next slide) for a sample.\nUsing array_replace_recursive will probably be better.\n. this should not be part of the interface IMO. It is part of configuring the instance rather than using it (you could totally create an implementation not based on a list of ResourceLocatorInterface instances)\n. @ciaranmcnulty this is cleaning a bit the config to run composer install in the install section, to be forward-compatible (Travis is preparing first-class composer support like they do for bundler in Ruby, and this will avoid running composer twice, first in install and then in before_script.\nhowever, there is 2 mistakes in this PR:\n- it should indeed be submitted on its own instead of being included in an unrelated PR\n- configuring the php.ini for HHVM should not be done in the install section, as this would not be forward-compatible for the day where we will want to just remove the install section in favor of the default Travis config for PHP\n. this looks weird to be actually\n. > also i see your \"this looks weird to be actually\" is not right english but i can understand it\nyeah, I started a sentence, then changed my mind and edited it, but I forgot to delete some words\n. i already removed it in 45e70bd2a74a9e7a73f19b3f490d8b103812c082 after merging\n. I think it is fine\n. just remove the duplicated semi-colon here\n. this is wrong. You should keep it lazy instead of instantiating it directly\n. should be @var MatcherInterface[]\n. instead of making it mutable, I would rather add a constructor argument accepting an array of matchers\n. please remove the matcher sufix from all service names, and use underscores to separate words (using matchers.identity and matchers.array_key for instance)\n. the phpdoc needs to be updated\n. missing typehint here\n. removing this method is a BC break. You should keep it as extensions may use it\n. what is $i here ?\n. there is no reason to bump this requirement: the YAML component supports passing a YAML string since its first release.\nand this makes it much harder to use phpspec in a Symfony project (if you install it with composer, it requires you to use Symfony 2.7 in your project)\n. missing types in the phpdoc\n. this won't work properly if an old extension is registered before a Testwork one, right ?\n. please typehint arguments whenever possible\n. getting a service from the container during the building of the container is wrong. It is a broken setup. The Symfony DIC has a separation between configuring the container and using it\n. Instead of using PHP_EOL, we should use the existing line endings (even when I was on Windows, all my source code was using LF, not CRLF for instance)\n. missing type in the phpdoc, making it invalid\n. it can cause issues depending on the way services are interacting with each other and the order in which they are defined. There are better ways to integrate both containers together\n. no, because registering a TestworkExtension changes the compat.testwork-extensions.config parameter, which is read here. So depending on the order, the legacy extension will receive a different config\n. Please don't test all Symfony versions on all PHP versions. It is a huge waste of resources \n. This is a very hard BC break, because it means that any project which needs to support PHP 5.3 cannot use phpspec (or cannot run their specs on 5.3 at least). Please revert this.\n. Technically, we don't depend on any feature added after 2.1 in these components AFAIK, so I don't see the issue about the minimal version\n. Btw, given that you always set the symfony version, it also means that you never test phpspec with its real composer dependencies, so there is nothing ensuring they are right.\n. this is a bad idea IMO. The interface says there is no second argument, so you should not pass a second argument\n. renaming the method is a BC break\n. you should use a special prefix on the tag name for service id prefixes, to avoid conflicts with other tags added when using the Symfony container directly (in Testwork extensions directly)\n. this will not work for services added by Testwork directly, because they won't have the special tags\n. why creating a collaborator here ? You never use it except to get the class name, so you could use the class name directly\n. please use ===\n. the phpdoc should explain that this replaces all matchers, and that it matchers must be sorted already.\nBtw, I think replace() might be a better name.\n. missing type in the phpdoc\n. typo: should be normalize, not normalise\n. wrong indentation. Steps should be indented more than the scenario\n. because all the code is using US English AFAIK, and normalise is UK only (or it is French)\n. why removing the formatter configuration ?\n. shouldn't this be a boolean rather than a string ? And shouldn't it depend on the interactive flag ?\n. missing types\n. I would typehint $arguments as array\n. you should add a use statement\n. wrong phpdoc. Should be @var string\n. where is this tag used ?\n. There 3 setup methods are expected to run in a predefined order (they expect the application to be set).\nHowever, Behat makes no guarantee about the order in which hooks are run.\nIt would be better to move all this initialization to the constructor instead.\n. should this be set through the second argument of run instead, like in I run phpspec ?\n. please separate this from use statements (and maybe move it to a class constant rather than a global constant)\n. each scenario gets its own context instance\n. this should be done before calling the parent method and returning. The code is dead currently\n. missing visibility\n. to be safe, I would remove the vendor folder from the cache.\nIt will also avoid resaving the cache for each build because of the autoloader being regenerated for each install.\n. This will be useful only if you change the installation to use --prefer-dist instead (Composer will now be able to fallback to source when the rate limit is reached anyway, but the cache will avoid reaching the rate limit most of the time because it will get it from the cache)\n. technically, it is not. The default is 'auto', which means using dists for releases, and using source for dev versions\n. @ciaranmcnulty the division by 0 happens when getTotalSpecsCount returns 0. So the safeguard should check this method too. The name of the method is not involved here. Your logic is\n. should be either uncommented or removed\n. Getting the dialog helper here will still trigger the deprecation warning, so it will not solve the issue. You should set the service in a lazy way, so that the retrieval is only done if an extension actually gets it (in which case the deprecation warning will be legitimate):\nphp\n$this->container->set('console.helper.dialog', function () use ($helperSet) {\n    return $helperSet->get('dialog');\n});\n. shouldn't it be shared ?\n. is this method used somewhere ?\n. @ciaranmcnulty I suggest adopting the same policy than Behat: considering that people are not meant to instantiate the PhpSpec classes themselves (this is done in the DI container) at least for these levels of the codebase. This means we can change the constructor arguments as we want for refactorings (and actually, you are already relying on this as you added a mandatory constructor argument in the IO).\nThis means you could move askAndValidate to the prompter as well\n. but you already broke BC for this case, as he needs to provide the Prompter to the parent.\nFor composition, this could be handled by providing a nice way to handle extending a service by composition in the container instead. Both Pimple (since 1.0) and Symfony DIC (since 2.5) have a nice way for this (the Symfony DIC allows to do it since 2.0, but in a less simple way). This would avoid the decorator to know anything about the instantiation of the inner service. This is an issue with the container only if they have to redo all the work.\nfor inheritance, this would indeed forbid to consider the constructor as an internal API. We don't face this issue in Behat though, because most our classes are final.\n. the extension is skipping examples, not scenarios. There is no concept of scenario in PhpSpec (this is a Gherkin concept, which is then used in Behat)\n. I suggest making this private. and $depth is unused\n. you don't really need to use a variable here IMO\n. the SkippingException is meant to be used in spec examples, not in the code. Please make the scenario reflect the real usage of the exception\n. break; is dead code here\n. please add the final EOL\n. @ciaranmcnulty presentCallable is called only with a valid callable. Callable arrays have always a length of 2\n. @alreece45 can you fix this ?\n. this should be a protected method\n. I suggest using Prophecy doubles in the PHPUnit tests rather than the ugly PHPUnit mock objects (they will be in core in PHPUnit 4.5, and there is the https://github.com/phpspec/prophecy-phpunit package for older PHPUnit versions)\n. this should use $this->identicalTo() instead, to do strict comparison for the object\n. should be protected\n. this should be done in the ContainerAssembler IMO\n. this is actually a wrong phpdoc in the Yaml class\n. Well, the factory currently relies on the helperset. Defining this one in the ContainerAssembler requires putting the helperset as a service on its own (which might be cleaner).\nBut the prompter itself should be defined in the assembler for sure.\n. a PhpSpec SkippingException in Behat ? You expect too much :) \n. this is failing on some Symfony Process versions (getting an empty string instead of null)\n. you updated a different example, not this one\n. this path is wrong AFAICT\n. @ciaranmcnulty where is it used ? I don't see any change to the behat config in this PR to introduce the registration of this context class\n. try rebasing your feature branch on top of master to fix this diff\n. this template generates a method signature for an interface only, not for a class. So it may need a better name.\n. wrong indentation\n. should be on the previous line\n. should be on the previous line. And shouldn't we use some named exception here rather than catching all RuntimeException ?\n. please use autoload-dev instead indeed\n. please use a different class defined in its own file, so that PHP 5.3 can still run all other examples\n. this is broken on PHP 5.3 (which does not have the getTraits method)\n. this is wrong. You are always returning something for the first trait in $traits, meaning that multiple traits on the class are not supported\n. There was an issue on HHVM when inlining it at the time @everzet did this for Behat\n. US english, like in the codebase ?\n. IMO, the implementation should not be named AccessInspector. Otherwise it is a pain to change the convention later. We should already name the class as if the name AccessInspector was reserved by the interface itself\n. As a developer should not be the feature title but the first line of the description (and the feature needs a proper title)\n. you have extra braces here\n. changing the error reporting level seems totally wrong to me\n. but other errors should still be reported to the error handler, not only notices\n. strict comparisons should be used IMO\n. braces are not needed\n. why checking in $_ENV['HHVM'] ? defined('HHVM_VERSION') is the way to detect that you are running on HHVM, not an environment variable being set\n. why are you excluding it ? This looks bad\n. this should stay on a single line\n. this comment is wrong\n. I'm not a fan of exposing this method. It is an internal implementation detail.\n. why not ~2.6 to allow using maintained versions ?\n. There is no hard restriction on line length in PSR-2, only a recommendation to avoid making lines too long.\nand all other code in phpspec keeps the class declaration on a single line IIRC (btw, the Symfony CS, which are built on top of PSR-2, are indeed mandating to keep in on a single line)\n. wrong indentation\n. I would say Collaborator must be an object instead. Scalar typehints are not supported either\n. Use PHP_VERSION_ID >= 50400. OPCache can optimize such check at compile time while it cannot for a function call.\n. PHPSpec does not rely on intl, so doing a test matrix to run it without and with intl is useless\n. this should not be a test script IMO\n. IMO, you should not test against all PHP versions on appveyor: AppVeyor does not allow to run parallel jobs, which means that all jobs are running one after the other, making the build take a long time. We already cover multiple PHP versions on Travis, so we may not need to do the same on AppVeyor\n. installing from source forbids composer to use the cache (it caches downloaded archives, but it cannot cache git clone). This makes the cache useless\n. no need to invalidate the composer cache on each change in the composer.json. This would force to re-download all archives even if only one of them should change\n. this line is useless (we don't have a .phpunit folder here. Symfony has it because of its special install of PHPUnit due to the Yaml usage in PHPUnit)\n. this can be simplified: PHP_DOWNLOAD_FILE is never equal to php-7.0-nts-windows-vc14-x86-r2e38918.zip\n. this can be simplified, as we know we are running PHP 5.6\n. this should use a strict comparison\n. this state change should happen in the $this->currentBodyLevel == 0 condition IMO. This is where you know you are leaving the function\n. the executable path needs to be escaped to account for cases where there are spaces in it.\nAnd C:\\Program Files\\PHP\\php.exe has a space in it, so things would break if people install PHP in C:\\Program Files (which is an expected location when following the windows conventions)\n. @ciaranmcnulty maybe he does not have spaces in his PHP executable path, meaning he is not affected by the issue I reported.\nIf removing the escaping solved an issue for him, it means there might be another issue which disappears when removing escaping. But this needs to be investigated then. Saying all the data they escape comes from internal processes which makes me a bit more comfortable about it is wrong:\n- the PHP path does not come from internal stuff (it depends on the user setup)\n- the escaping is here because of the needs of the shell interpreter, not just because of accepting untrusted input\n. this looks suspicious to me, given that spaces need escaping. Can you check what is returning by getExecutablePath ?\n. ah I missed that you are applying double quotes manually here, which means doing part of the escaping by hand (I'm saying \"part of it\", because other chars may need escaping too on Windows, but PHP itself does not handle it totally right: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Process/ProcessUtils.php#L39)\nWhat I don't understand is why you are applying quotes by hand instead of using the escaping (you should indeed not do both)\n. well, this is probably related to the fact that the existing passthru rerunner uses escapeshellcmd, which is not meant to escape a single part of the command, and so does not enclose values in quotes when they contain spaces. escapeshellarg should probably be used instead.\n. why this change ?\n. changing this is wrong. We want to test explicitly what happens when the string contains a \\n, even on Windows\n. same here\n. -1 for this. Almost OSS projects are using LF newlines in their source code, not the OS newlines (as they cannot ship OS-specific source code). this would make things hard for any windows contributor as it would inject CRLF here (I don't know any big PHP project choosing CRLF as their consistent line endings)\n. must be reverted\n. this means that any testsuite using LF line endings would now break on windows. It does not make any sense.\n. why - 4 here ?\n. this can use a shorthand notation\n. what is this condition exactly ?\n. as this constant is used only once, and it does not contain the full path anyway, I suggest removing entirely, keeping the path inline\n. technically, all those typehints must be changed in 2.x already. Otherwise, it is impossible to avoid using the BC layers (as everything forces you to rely on the deprecated interface)\n. Moving a parameter around breaks BC. this may be fine, as this class is mostly internal, but it should be acknowledged.\n@ciaranmcnulty it may be great to add @internal annotations where appropriate\n. @mheki in any case, you forgot to reorder the phpdoc\n. @ciaranmcnulty there is already the new interface and the old one in parallel in the codebase, with the old one being deprecated and inheriting from the new one. But as all typehints are using the child interface, the new interface is actually unusable today. So typehints must be changed in 2.x to allow using the existing Presenter interface (using the deprecated one will work, as it extends the new one)\n. the issue is that the PR deprecating PresenterInterface in 2.x did only half of the work (which was not caught because PhpSpec does not have the testing infrastructure in place to detect the usage of deprecated APIs)\n. people might be relying on the constant to detect the PhpSpec version in their suite. Is it intended that it is not exposed to the code anymore ?\n. this should not be an array here. Passing an array as version is wrong\n. this cannot be null here, as you are already inside a if checking this\n. @bestform the value of an assignment is the value itself. And then, null is indeed a falsy value when casting it\n. well, I fully agree with you that assignments inside conditions are much harder to read. But this is not the topic here. It does not change the fact that $indexedClass can never be null here\n. this variable name is misleading. It does not contain classes, but collaborator names\n. class_existsis useless. instanceof deals fine with non-existent classes (it will obviously return false in such case)\n. this should come after the getting starting guide IMO. It should probably be the last chapter\n. this never returns a boolean. It returns \\Exception|null\n. not needed as the class is in the current namespace and so the short name works already\n. you could even require using PHPUnit 5 all the time, as the min requirement is now PHP 5.6\n. IMO, the name PhpSpec\\ServiceContainer should be kept for now, until we know what extensions should look like, to minimize changes\n. this is not a suitable way to extend an array of matchers. It breaks lazyness of definitions, which will then forbid overriding any dependency of these matchers after this particular extension was registered.\nYou need to keep a clear distinction between the configuration phase of the container (where you define service definitions) and the runtime phase (where you can retrieve services from the container).\nMixing them together leads to broken behaviors and very hard to debug issues (and the container defined in PhpSpec does not implement any safeguard to warn you, as it was inspired by Pimple 1 which suffered from the same limitations).\n. I suggest reverting this alignment changes. They create useless noises (and potentially conflicts)\n. IMO, the title should not contain the version\n. should be removed\n. do we actually need to isolate them all ?\n. we should not build the container that early IMO\n. why overwriting it as a public method ?\n. why using a class property for something which is only temporary ?\n. should stay on the previous line\n. should be @internal in lowercase to match phpdoc\n. same everywhere\n. shouldn't it keep document the interface ?\n. it should not allow callables anymore, as definitions are handled by a separate method\n. this is useless, due to the way PHP handle nested writes in arrays\n. reading triggers a warning. but $this->tags[$tag][] = $id; does not need reading the current value\n. should we allow overwriting a service definition once we have instantiated it ? this can only cause issues (other services may be referencing the old instance as a dependency).\nFor reference, Pimple 3 forbids this\n. this check should not be removed IMO. Definitions must be callables\n. As you started typehinting the definition callable, you could use a typehint here too\n. but are they redefined after instantiation ? If yes, this is fragile (the object graph could use the non-overwritten service). If no, this is not an issue\n. if we do describe+run, we should probably isolate these 2 calls by recreating the application, because they would not run in the same PHP process in real usage and so they cannot share state\n. These things should be on the Subject class indeed, not here\n. @deeky666 but most builtin matchers make no sense on the ObjectBehavior, as they are about matching expectations on method return values, not on the SUT instance itself. Most of the things you are adding make no sense here.\nOn ObjectBehavior, we should add only these ones (on top of the existing ones):\n- shouldNotHaveType\n- shouldBeAnInstanceOf\n- shouldNotBeAnInstanceOf\n- shouldNotImplement\n- shouldNotThrow\nand maybe these ones to account for Countable or ArrayAccess SUT:\n- shouldHaveCount\n- shouldNotHaveCount\n- shouldHaveKeyWithValue\n- shouldNotHaveKeyWithValue\n- shouldHaveKey\n- shouldNotHaveKey\nEverything else should be removed.\n. Adding them in Subject would not help at all, because your IDE will not know that $this->testedMethod() will return a Subject. We cannot add magic phpdoc for that. Knowing it in the IDE would require to build a phpspec integration in the IDE to know it. And then, such an integration could support matchers properly rather than relying on @method in the Subject phpdoc, ensuring support for non-core matchers\n. matchers added at runtime are much more like to apply on return values of methods btw\n. discussion about finding matchers for IDEs should happen in https://github.com/phpspec/phpspec/issues/946\n. if you explode on PHP_EOL it breaks things when the source code using \\n EOL and you run on windows.\n. missing space after the colon\n. you should get the original file and line too\n. getting the class of the MethodNotFoundListener does not make any sense here. We should rather handle the case of not having the subject in a different way\n. my point is that calling get_class without any argument does not make any sense here. So the right fix is to handle this case properly instead of calling it without argument\n. dev deps should be tested on a stable PHP version IMO, to avoid having this job failing due to PHP issues\n. we are loosing the branch restriction in this change\n. Are you sure ? travis and scrutinizer statuses built without a branch name are taking builds from all branches into account for instance. I don't know whether appveyor requires specifying a branch to get a status\n. ThrowExpectation is an Expectation, so is it necessary ?\n. why 5 ?. please allow both versions in parallel instead, to be nicer for other tools installed in projects (should be dead easy as there is no BC break except the min PHP version). I would revert this change, as it makes it harder for projects to avoid a compatibility hell (this is a normal requirement, so it affects users). Version 2 of the exporter is also compatible with PHP 7.\nAs the API of the exporter is the same, there is absolutely no maintenance cost here.. you replace the wrong config here. This is the replacement for DEPENDENCIES='low', not for DEPENDENCIES='dev'. well, it still removes the need to check for a function in the current namespace (but this resolution is cached by PHP and so happens only once per function and namespace).. why preg_match_all rather than preg_match when you care only about a single match ?. ",
    "Lowgain": "ahh, sorry for not checking all the other issues - thanks for the feedback\n. Hahah damn, I double checked before making this ticket too!\nWhat branch should I use for now?\n. Thanks - your develop branch clears up all my issues!\n. ",
    "ontrack1": "Fixable! =D Had same issue when running example from www.phpspec.net site. Found the \"same\" example on https://github.com/phpspec/phpspec there is a subtle difference in where the \"$this->spec\" is placed. Given: the change in your file. When: you run it. Then: it gives the desired outcome (listed in docs).\nCheers\n. ",
    "nrocy": "I managed to get it working, unsure how to run the phpspec specs, so no pull request yet.\nCommit here: https://github.com/nrocy/phpspec/commit/ed3310a17a19da54e5ab724029389dc4103ece02\n. ",
    "mlopes": "Done, pull request made for Marcello's repo for a first review since this one was a pretty big change.\n. This is done now ac8eecc38a0f47d72ce73bbff8b46f41235ae248\n. Wrong branch on my side.\n. Maybe something that works the same way git does. For example git flow, it defines it's own set of commands that are developed separately from git, but you still can use them as if they were git commands. In the case of git it does it by loading command in the path that follow the pattern git-<-....> so git flow feature will call git-flow-feature, but it might as well be some kind of plugin.\n. > if I'm working on more than one project (which is the case for me at the moment - one of which uses final and one that doesn't), then that'll change the templates for all projects - so I have to go and edit the code for one of them whatever if we don't add the option.\nDoesn't this already happen? The only change is that instead of adding it to the project that uses final, you'll need to remove it from the one that doesn't.\n. phpspec allows you to mock and inject mocks into the constructor of the SUT using letItBeConstructedWith and letItBeconstructedThrough. I'm possibly not the best person to answer this, but I'm under the impression it makes certain practices easier than others, but I don't think there's a lot that you really can't do if you really really want to. It encourages you to inject dependencies by making it hard to test and mock non-injected dependencies, it encourages the use of interfaces by creating them for you (unfortunately depending on you adding the use statement manually), it encourages expressiveness by providing expressive methods itself, both for the SUT and for the collaborators (Ex: shouldBe, willReturn), and by creating methods with names that emerge naturally from the English language (Ex: a call to a shouldBeArchived matcher  in the spec will cause phpspec to generate a isArchived method in the class).\nThis article by @MarcelloDuarte details some of the intentional phpspec \"limitations\", that try to enforce specific practices:\nhttps://inviqa.com/blog/my-top-ten-favourite-phpspec-limitations. ",
    "rafi": "Has this been removed from v2.0 ? Doesn't work anymore. :[\n. Will be very helpful\n. ",
    "padraic": "Just a note that Mockery is now up on Packagist.org using Composer (under mockery/mockery). It's feeling lonely and would like to see phpspec/phpspec. Not to mention behat/behat is around here somewhere ;).\n. I was just trying to achieve this, but I haven't hit the magical combination just yet. At present, it's slowly but surely pushing me to switch over to PSR-0 so I get moving: https://github.com/padraic/phpspec-extensions\nThere is always, of course, the possibility that I am an idiot. I give it 50/50 odds.\n. @ciaranmcnulty I was thinking that. I'll switch it to a \"not ok\" result - consumers can check the directive or severity to differentiate from other \"not ok\" results which are fails/errors. Only really thought of it because PHPUnit basically passes through incompletes which never seemed right but I'd gotten used to it!\n. @ciaranmcnulty The problem is that TAP is not one format, but three. You have the regular expected lines, then directives, followed by optional YAML data blocks. For all that it's a relatively short class thankfully. The specs are complex - and may be overkill since the behat feature now hits all the main points at once. Not sure whether the possible duplication is worth retaining.\n. Thanks all!\n. From: https://github.com/padraic/phpspec-extensions\nphp\npublic function filter(array $array)\n{\n    $times = $this->loadTimes();\n    @usort($array, function (SpecificationNode $a, SpecificationNode $b) use ($times) {\n        if ($times['specifications'][$a->getTitle()] == $times['specifications'][$b->getTitle()]) {\n            return 0;\n        }\n        if ($times['specifications'][$a->getTitle()] < $times['specifications'][$b->getTitle()]) {\n            return -1;\n        }\n        return 1;\n    });\n    return $array;\n}\nIf needed:\nPHP 5.6.4-1+deb.sury.org~utopic+1 (cli) (built: Dec 21 2014 19:27:36) \nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2014 Zend Technologies\n    with Zend OPcache v7.0.4-dev, Copyright (c) 1999-2014, by Zend Technologies\n    with Xdebug v2.2.5, Copyright (c) 2002-2014, by Derick Rethans\n@ added afterwards as a workaround. Working fine without it though in actual usage.\n. I wouldn't expect there to be an exception thrown here unless I'm stubbing the node incorrectly. The spec passes just fine so its getting titles, etc.\n. It's there to prime the pump, i.e. the 1 in 1..3. Would print zero otherwise which should be invalid TAP ergo technically correct and technically me being pedantic ;).\n. @ciaranmcnulty Done!\n. It's not...removed\n. This has shifted around a bit in last commit. Probably a few other pieces of cleanup, but this is close to done unless I start digging into data blocks. We'll see!\n. Sort of - I actually renamed the scenario after! The specs are almost superfluous with the behat scenario in place.\n. Noted - fixed these up to the correct 4 spaces.\n. Can you clarify? The first TODO is a directive, everything after that is the actual message (if any) straight from phpspec.\n. The result per se is at the start of each primary line \"ok\" or \"not ok\". Anything following that will be description, directive, short message and/or YAML data (in that order with directive/data being optional). TAP assume a consumer can parse those out if needed.\n. You may depart from our presence ;)\n. Sure thing. What would most appropriate default be if an example had no result? It does seem unlikely for phpspec to propagate resultless examples.\n. It a correct usage. The Yaml class must have a bad phpdoc ref.\n. Will do\n. ",
    "iteman": "Of course, the current behavior does not matter in most cases, such as with Jenkins, but I think that it still does matter for testing tools that provide real-time progress reporting.\nThank you for your response.\n. > How does makegood expect the output of the run to be. At which points does it need output?\nFirst, this issue has been done by another way...\nhttps://github.com/piece/stagehand-testrunner/commit/b51aefc08596993f9f103ac0bec7560d218ce323\nAnd also MakeGood (Stagehand_TestRunner) have had own components for writing JUnit XML (in real-time and not in real-time), and we want to use our components. If we regard PHPSpec as a framework for a test runner such as MakeGood, IMO it seems that PHPSpec is still capable of improvement as the following:\n- Should keep the normal workflow for any cases.\n- Should not use exit in any components except phpspec command.\n- Should make methods as protected instead of private.\nThank you for your response.\n. The \\n has existed since f9ed1b6be0e5516360c58f4190bcb5913347d90c.\nSince \\n is always linefeed (LF, 0x0a) and the return value of ReflectionMethod::__toString() is always concatenated with linefeed regardless of platform, this code will work on any platform. And PHP_EOL will not work on Windows and Mac.\n. @adrianmoya @MarcelloDuarte Any PHPDoc tag will produce this error as the following:\nphp\n    /**\n     * @since Method available since Release 3.0.0\n     */\n    public function itShouldFail()\n    {\n        $this->spec(false)->should->beTrue();\n    }\n. @adrianmoya @MarcelloDuarte Thank you!\n. ",
    "travisbot": "This pull request fails (merged b4fbfe0b into 54e2c1f1).\n. This pull request fails (merged 78ed711e into 54e2c1f1).\n. This pull request passes (merged 718cca98 into 97b1abe9).\n. ",
    "miccheng": "Switched to Ubuntu 11.10 Server (64-bit). The PEAR installer works. Need to find out why it failed on CentOS 6.2.\n. Tried with a fresh install of CentOS. It looks fine now. Not sure why the other install didn't work:\npear config-set preferred_state beta\npear config-set auto_discover 1\npear channel-discover pear.phpspec.net\npear install --alldeps phpspec/PHPSpec\npear config-set preferred_state stable\nThanks.\n. ",
    "faizalpribadi": "Upps Broken Link Pear Channel \"pear.phpspec.net\" , @miccheng Fix This , Please ;D\n. ",
    "eddiejaoude": "Is this for phpspec v1 or v2?\n. Is it worth keeping then? Or is similar type of functionality planned for phpspec2?\n. Oh. Where is the latest documentation?\n. Thanks\n. After more hours of trying to get phpspec to work with folders & not just a single file, I realised by using the provided composer config it only installs version 1.4.2.\nWhat is the latest recommend version?\nComposer:\n\"require-dev\": {\n        \"phpspec/phpspec\": \"*\"\n    }\n. Thanks! Makes sense. With v2, it still does not recursively go through the 'spec' files, I need to supply them after the run command. What am I missing?\n. I solved that issue by updating my composer line \"autoload\": {\"psr-0\": {\"\": \"src\"}} to my directory structure. It now loads the single spec file I provide, but not if I give it the directory?\n. I am using ZF2, the 2 files are:\nmodule/Application/spec/Application/Model/Entity/CustomerSpec.php\nmodule/Application/src/Application/Model/Entity/Customer.php\nCustomerSpec (I have gone back to initial starting point for simplicity):\n<?php\nnamespace spec\\Application\\Model\\Entity;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass CustomerSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType('Application\\Model\\Entity\\Customer');\n    }\n}\nComposer autoloader update:\n\"autoload\": {\n        \"psr-0\": {\n            \"Application\": \"module/Application/src\"\n        }\n    }\nThis runs ok:\n\nmodule/Application$ ./../../vendor/bin/phpspec run spec/Application/Model/Entity/CustomerSpec.php\nBut if I dont specify the exact spec file it says '0 examples' \n\nThanks!\n. Would you like me close this issue & create a new issue regarding my previous comment?\n. I have it working with loading a single spec file, but not a directory (and sub-directory, which may be my issue from your previous comment)?\n. Unfortunately, still didnt solve my issue. I will continue to use phpunit & will use phpspec2 when a stable version is released. Thanks for the help.\nIs there an ETA for a stable release?\n. @whatthejeff thank you for your continual support. Good idea!\n. I had a similar issue. @ciaranmcnulty What did your final Spec look like for the KnpMenuBuilder?\nI am sure mine can be cleaned up with let method, but that caused some issues, so this is what I ended up with...\n``` php\nclass MenuBuilderSpec extends ObjectBehavior\n{\n//    function let(FactoryInterface $factory, ItemInterface $menu)\n//    {\n//        $factory->createItem('root')->shouldBeCalled()->willReturn($menu);\n//        $this->beConstructedWith($factory, true);\n//    }\nfunction it_is_initializable(FactoryInterface $factory)\n{\n    $this->beConstructedWith($factory, true);\n    $this->shouldHaveType('TransformCore\\Bundle\\AppBundle\\Menu\\MenuBuilder');\n}\n\nfunction it_builds_the_menu(FactoryInterface $factory, ItemInterface $menu, Request $request)\n{\n    $menu->setChildrenAttributes(array('class' => 'navbar-nav nav'))\n        ->shouldBeCalled()\n        ->willReturn($menu);\n\n    $menu->addChild('nav.home', array('route' => 'transform_core_app_homepage'))\n        ->shouldBeCalled()\n        ->willReturn($menu);\n\n    $menu->addChild('nav.login', array('route' => 'transform_core_app_homepage'))\n        ->shouldBeCalled()\n        ->willReturn($menu);\n\n    $factory->createItem('root')\n        ->shouldBeCalled()\n        ->willReturn($menu);\n\n    $this->beConstructedWith($factory, true);\n\n    $this->createMainMenu($request)->shouldHaveType('\\Knp\\Menu\\ItemInterface');\n}\n\n}\n```\n. Thank you for the feedback @stof :+1: \n. ",
    "zeebinz": "Just to be clear: this is a bug that completely prevents phpspec from running under Windows. If pull requests aren't welcome, then I won't make any more.\n. ",
    "adrianmoya": "I can confirm the fix solves the problem, under Windows and Linux at least.\n. @iteman @MarcelloDuarte sure, is there a specific test you want me to try? under what condition the error was rised?\n. @MarcelloDuarte Leaving an example empty doesn't fail in the current stable version (1.4.2.) on windows. Any other case that could trigger this error?\n. Ok, I was able to reproduce the error in windows, and the fix works fine.\n. ",
    "everzet": "Thanks @stof! :heart: \n. @cordoval :+1: \n. Why?\n. I'm +1 for NyanCat. It still doesn't add useful information to already existing formatters, but it's at least fun. As of dot and fabulous - packaging them as extensions would be more sufficient as I'm not quite sure they fit goals we're trying to achieve with PhpSpec - making speccing easier, not \"same\".\n. @whatthejeff that sounds pretty reasonable. Could you rebase so we could merge it down?\n. @habitullence it does remembers from let. But you also can use class typehints - they are supported now.\n. @habitullence you should double $db, $pdo AND $statement:\n``` php\nfunction it_creates_db_table(\n    $db, SquCoreBlog $csvTable, PDO $pdo, PDOStatement $stmt\n) {\n    $db->getPdo()->willReturn($pdo);\n    $pdo->query()->willReturn($stmt);\n$this->createDbTable($csvTable)->shouldReturnAnInstanceOf('SquCoreBlog');\n\n}\n```\n. Brilliant, thanks!\n. I'll try to see what we can do with Prophecy later today.\n. @ciaranmcnulty thank you very much! Proper communication with developer is one of the core feature of PhpSpec. And we definitely want this communication to be clear ;)\n. @docteurklein merged. Thanks mate :)\n. Ah. Not sure about adding required dependencies :/\n. Yep.\n. And specs?\n. @MarcelloDuarte ping :)\n. You have a mock of\nphp\nclass ArrayToken implements Token, ArrayAccess, Countable\n{\n}\nWhat will you typehint? ArrayToken, Token, ArrayAccess or Countable? Defining message signature is a design process - same one as defining message name. And as any other design process, it shouldn't be automated or simplified - you want your brain working there.\n. php\nfunction it_does_something_with_array_token(ArrayToken $token)\n{\n    $this->foo($token)\n}\nphp\nfunction it_does_something_else_with_countable_token(CountableToken $token)\n{\n    $this->foo($token)\n}\nphp\nclass YourServiceDude\n{\n    public function foo(Token $token)\n    {\n    }\n}\n?\n. @ciaranmcnulty yes. And as my example shows, it will illogically (for me, as a user) will cause second example to break into a fatal error.\nIt's not \"hey, you made a decision and now it doesn't work anymore - change it\" case, it is a \"tool silently made a decision for you, now deal with its mistake\".\n. @ciaranmcnulty this particular case (in comparison with number of arguments) is not about my assumptions anymore, it's about tool implicit assumptions that it tried to (mistakenly) digest by observing me :)\nFor example (it's a keyword here) the fact that I'm talking with you right now doesn't mean that you're the only person I'll talk with for the rest of my life. If you'd end up trying (falsely) generalising everything I do (oh, he bought beer from this pub today, so he obviously can't buy beer from other pubs) - it'd piss me of, not help me be more effective ;)\nAbstraction and generalisation are design activities conducted by brain, not program - programs can help you identify wrong generalisation, but they are extremely bad at generalising things in the first place.\n. @ciaranmcnulty there's no such thing as a \"right\" or \"wrong\". It is a design activity and should be conducted by human brain. So any time you get into those 20% of cases you should go \"ahh, I was wrong\" instead of \"why the hell this tool did that\".\nIt's the same thing as with standards. You can automate or standardise everything (especially if you're not caring about 100% of cases). But you'll end up with Interface suffixes, just so people don't need to think about naming anymore.\n. @ciaranmcnulty no, it doesn't. You explicitly provide arguments to the method. You manually call method with 3 arguments inside example. You're in full control of the call. So whenever you add another argument in different example, you need to deal with your previous decision.\nIn case of typehints - you're not explicitly stating the type of object method expects. You're stating that currently, in this example, you're working with this instance. But the fact that you're using specific object doesn't mean that you're not having more generalised version of it in your head.\n. The reason why it seems easier to do in PHPUnit is because it is. PHPUnit in this particular case is a better tool for a job. You're trying to write an integration test using unit testing tool.\n. One-command way doesn't fit PhpSpec the way it does Behat. Behat has one and only one responsibility - test your application using your features and contexts. PhpSpec always had 3 (two of which are already supported in 2.0b):\n- Describe\n- Test\n- Refactor\nI'm for renaming run into test and making it explicitly required. You need to tell PhpSpec in which stage you need its help\n. @MarcelloDuarte I don't see anything wrong with word test if you make it clear that it's not the first stage of the process.\n. @ciaranmcnulty phpspec never was a tool built on top of popular moves. It was created as a tool to enforce good design. final keyword is the most effective way I know to force people think about composition (over inheritance).\n. I don't like the idea of promoting (even if by proxy) the mocking of classes, even if sometimes it is ok to do so. I like the current behaviour where every collaborator starts as an explicit protocol (interface) rather than narrow implementation (class). Everything is a protocol and I believe decision to convert an interface into a narrow implementation at the generation phase is a premature commitment.\nI'd rather prefer a feature where when you're describing existing interface (phpspec describe Human, where Human is an existing interface), PhpSpec would suggest you to convert it into a specific implementation.\n. Agree completely with @ShawnMcCool. I personally would consider this a bug.. @msf0r @krasun custom error suppressor: https://github.com/phpspec/phpspec/blob/develop/src/PhpSpec/Runner/Maintainer/ErrorMaintainer.php#L106-L124\n. Because we never committed for a clean extension API, I'd go with 1. But that might be too rough of a move for people that did create extensions. Can we somehow identify how many extensions there are? If there's less than 5-10, then options 2 and 3 do not matter as much - we can help people migrate.\n. Why are your class names so long?\n. Partial mocking is a sure smell for SRP violation. It most likely hints that the object you're trying to spec is suffering from multiple personality disorder - it talks to itself like it is a different object.\n. @james75 percentage of the colour it is on.\n. @james75 progress bar is replacement for:\n100% passing, 0% failing, 0% erroring, 0% pending\n212 specs\n. Hi Michael,\nThank you very much for such an expanded research and comment. Let me try to answer some key points of it :)\n\nI'm not here to say that phpspec was right or wrong in going with snake_case for examples in specs but to offer another way of looking at it and possible end any battles at least as far as phpspec is concerned.\n\nThere have been no battles around which case to use for quite some time now. I'd attribute that to the fact that people don't really care about conventions and consistency if breaking conventions or consistency actually helps you be more expressive or clear in your living documentation.\n\nSo why not allow the developers using phpspec to decide which they prefer in their own project?\n\nBecause PhpSpec was created and still evolves as \"highly opinionated tool\". Our goal was not to chase ever increasing user-base, our goal was to help others do what we always wanted to do more effectively. Choice in this case not only wouldn't help, it would diverge from the set by us path. Choice is a tool, which you use when you have no idea which option is the best. In this particular case, based on countless training, coaching and pairing sessions, I'm pretty certain in saying \"snake_case\" is still a much better option for spec example naming.\n\nThis can be done without adding any settings or anything but simply by making phpspec a little bit smarter when it is loading the examples.\n\nI know :) As a matter of fact, the reason behind PhpSpec not supporting camelCase is not a technical limitation. It is deliberate, and highly biased towards readability decision. We match for it_* methods instead of it* on purpose, because we believe that different, more expressive naming in this case appeals to the different mindset! As much as PhpSpec is a TDD tool, it is an educational tool for us. We use it to teach people be more effective and happy with TDD. Sometimes it takes breaking conventions.\n\nWhy PhpSpec should care? Actually that's really my point it shouldn't care past what it needs to to do what it's job. Since it the new kid on the block it needs to finds ways to be included and not do things that can keeps people from wanting to use it. I'll take my personally experience of trying to get started with phpspec as an example.\n\nYou're working from assumption that we need to find ways to be included. Inclusivity and pursue of the bigger market share is not of our interest. We actually want to create a tool that will both help us in doing and teaching TDD. How much do we help people to do TDD is a much more important metric to us than how much people use our tools.\n\nFirst big hurtle with phpspec is find out that it uses a domain language. Those of you that know it might find it hard to believe but its not clear that one exist and how important it is. The existing docs do little to help since they don't ever bother to include a simple listing of what all the commands and verbs are or any kind of cheat-sheet that are so very useful when learn something new.\n\nI know guys are hard at work at improving docs. Improving documentation is an ongoing fight we need to fight, but we'll get there. In the mean time, any help is extremely welcome: https://github.com/phpspec/phpspec2-site.\n\nNext issue I ran into is I do use camelCase for methods and have switched to FIG's psr-1 and some of psr-2 standards in my own projects because it was the most similar to what I had done\n\nBreaking you out of conventions is part of what we're trying to do. When you're coming up with an example, we want to remove all safety nets like naming rules. Conventions are invaluable when you're working in the domain of best practices (your general code). We believe that specs actually live in the domain of good practices, where doing things right is more important than doing things conventionally. On the IDE/tool side of things - every tool I know of allows you to easily setup ignore paths where it runs checks. I see absolutely no reason to run any checks except \"is it readable?\" against your specs or features. Conventionality is not really a metric you should strive for there.\n\nSo to sum up my first couple of tries with integrating phpspec into my work flow was I ended up dropped it and stayed with the stuff I found useful and which didn't add any additional, what I felt was pointless obstacles, in my path when trying to using them.\n\nYou made the right call. It seems you needed a tool that fits your workflow, in most cases it's not PhpSpec :) To reiterate - PhpSpec has exactly two goals:\n1. Help people be more effective and happy with TDD\n2. Teach people how to do TDD right\nFitting people's workflow or being able to adapt to them is not the goal. If anything, in most cases drastically changing your workflow is the only way to be more effective with TDD. And that's again, intentional.\n\nI've read a post by one of the developer of phpspec a while back where he said that they would consider making changes if someone could come up with good reason why they should use something else. I see it differently in that phpspec like any new kid on the block or camel at the tent flap you need to take the first small steps.\n\nI hope at this point I did clarify that \"being new kid on the block\" or \"make an effort to fit in\" is not really a good reason for us. We're really looking at different metrics.\n\nPlease, don't be discouraged by my response. Not every tool will fit the way you see the world at specific moment in time, nor they should. It is totally fine that your workflow at the moment is not compatible with what PhpSpec tries to do. It does not necessary mean that you do something wrong, it also doesn't necessary means that tool does something wrong. It simply means that at this moment in time we have different priorities :) Put tool in the shelf and return back to it, when these two match.\nThank you!\n. @stof oh, ok. Missed that. Even better :)\n. I propose following syntax:\nphp\nfunction it_should_do_something()\n{\n    // given\n    ...\n    // when\n    ...\n    // then\n    ...\n}\n. @dmecke your SUT always depends on behaviour of its collaborators. We don't use mocks to pretend that's not the case, we use mocks to expose, inspect and improve these dependencies. But not all dependencies need exposure, inspection and improvement all the time.\n. Yes. Empty private constructor without arguments.\n. And while you're on it - make default class template to push final keyword.\n. I'm highly against providing such options. Either we believe this is a good design decision by default or we don't. Delegating choice to the users hardly helps anyone ever.\n. > People who still struggle with OOP will be very confused by this.\nMay I remind everyone that exposing people's struggle with OOP is actually one of the key goals behind PhpSpec? :)\n. @icambridge problem is people abusing inheritance. Enforcing final classes by default introduces explicit cognitive step before extending classes and, based on our training/coaching experience, effectively helps people to shift their focus to composition from inheritance.\n. For future references - $this->beConstructedThrough() is a way to do it properly :)\n. @GrahamCampbell if Foo doesn't give you a clear idea on what type is it, then Foo is a bad name. I see this all the time, people think that namespace is part of the class name - IMO it is not, it is a context.\n. :+1: good job\n. Great job! TypeHintRewriter begs for refactoring though \n. Other that that, big :+1: from me.\n. Automatic conversion library would be awesome to help with migration though\n. Sounds like progress formatter has a memory leak somewhere.\n. @stof my thinking process was that as we already store documentation in the same repo, we might as well store other assets in\n. @stof true. @ciaranmcnulty feel free to move this PR to the separate repo if you think it's a better idea.\n. 1. Now as your set/get doesn't transform values when fetching them, you don't need separate setParameter/getParameter\n2. define() method name is a bit confusing. I'd prefer factory(), factoryFor(), initialiseVia() or something like that\n. Forgot about the integration tests. Fixing\n. @ciaranmcnulty before I fix test suite (which is bigger change than I thought). Conceptually, \ud83d\udc4d or \ud83d\udc4e ?\n. I assume you perceive my current proposal as less useful. Right?\n. I see 4 options:\n1. Keep type assertion\n2. Provide a dummy example of example (like I did currently)\n3. Example with an empty body\n4. No starting example, just an empty spec\nI'm ok with all options except 1, which is a motivator for the change. Thoughts?\n. I vote for\nfunction it_()\n{\n}\n. @ciaranmcnulty so what's it gonna be?\n. 1. Keep generating interfaces for doubles\n2. Generate a spec for inexistent class usages\n3. Generate a let method (but only if it does not exist) for the non-existent static constructor\n. named constructor are the only static methods the truly OO codebase can have.\n. This and next method seem strange in ArrayAccess class. Either class name is wrong or those methods do not belong here.\n. Knows too much? I think it needs decomposition.\n. Little bit. But neither ArrayAccess nor SubjectArrayAccess tells me what this class does - ArrayAccess is an implementation detail.\n. Factories are better. I think we need to limit this object conversations with everyone. Introduce some middle-mans\n. > I think of it as a proxy to the array access implementation in the wrapped object.\nChicken?\n. http://www.youtube.com/watch?v=yL_-1d9OSdk :)\nI'm trying to point out that this whole sentence doesn't make sense to me. It's semantically full of \"the way you do it\" and almost entirely empty of \"why you do it\".\n. Could you describe why this object is here? And why can't you remove it from here?\n. SubjectWithArrayAccess ?\n. Agree\n. @ciaranmcnulty make sure it doesn't happen again. I mean making mistakes.\n. I'd extract a method for clarity here :)\n. How about renaming it to the The?. ",
    "ciaranmcnulty": "Rather than an option, it may be possible to detect the TTY charset somehow?\n. I did some investigation and sadly can't see a way to detect the charset.\n. @stof so would an ideal be a flag like --unicode={on,off,auto}, a corresponding config parameter, and the default being 'auto' which turns it off for Windows?\n. @stof Just a thought - based on your comment above could we do something like run the 'chcp' command internally then reset it back to the original value after execution? Or is that too hacky?\n. The documentation for src-path config is now here:\nhttp://phpspec.net/cookbook/configuration.html\n@Fuhrmann does this allow you to achieve what you wanted?\n. Awesome. Thanks\n. I'm in favour of this feature, it would be very useful in some cases.\nHaving seen PHPUnit test suites with lots of skipped/incomplete tests, if we go down the route of allowing authors to skip a spec programmatically I'd like it if we can enforce the following:\n1. Make sure a reason has to be recorded for the skip\n2. Display that reason in the output result (even for the more compact formatters)\nThe reason being, to keep skipped tests visible and annoying!\n. @gquemener Is that exception being thrown in phpspec, or somewhere else? It seems like a phpspec bug if so - class_exists should probably still return a boolean false.\n. I think it is a bug, class_exists is meant to return a boolean, not throw an exception...\n. Ah, I see.\nI'm not sure now what the use case is for skipping when classes don't exist?\n. It's not wise to try too hard to mock objects you don't own - testing whether my code works with Doctrine feels a lot like integration testing.\n. The reason that project doesn't have Behat in the. And is I intended to make it support other frameworks too. Just no time yet!\nPRs there would be welcome\n. @VanTanev In your example you're trying to describe a class that has a sort of split personality, it has a doSomething that talks to getDataFromDb as if it was a stranger. This is what is leading you to want to mock out getDataFromDb but rather than allowing you to do that ( it would be too easy ;-) ) we want you to stop at this pain point and think about the design.\nIt seems to me what you really want is two objects; one that does doSomething and the other that gets the data from the DB:\n``` php\nclass UsesCriteria\n{\n    private $queryAdapter;\npublic function __construct(UserQueryAdapter $queryAdapter)\n{\n    $this->queryAdapter = $queryAdapter;\n}\n\npublic function doSomething()\n{\n    $this->queryAdapter->getDataFromDb();\n}\n\n}\ninterface UserQueryAdapter\n{\n    public function getDataFromDb();\n}\nclass PropelUserQueryAdapter implements UserQueryAdapter\n{\n    public function getDataFromDb()\n    {\n        return UserQuery::create()\n            ->filterByIsActive(true)\n            ->find();\n    }\n}\n```\nThe benefit of this approach is you can still use your UsesCriteria when you change ORM by writing a new Adapter.\nThis feature has been asked for a few times, but there hasn't been a compelling use case yet - it really does seem to be something that would lead to poor code.\n. @stefanotorresi I support your decision to not use PhpSpec for this case\nWe lean towards supporting 'good' design because we want to encourage new code to be written well. If you're testing old systems you can either improve the design them or indeed use another testing tool\nI use other tools like PHPUnit all the time for older codebases. This is definitely incorrect behaviour, the class responsible is the PhpSpec\\Locator\\PSR0\\PSR0Locator which doesn't seem to deal with the underscores at all.\n. @Vinal this is going to require some largish changes in the spec locator, which I doubt we'll be able to do before 2.0 stable release, but it is a good bug report because we're advertising PSR0 behaviour and not sticking to the rules :-/\n. I 100% agree, the only reason I'm not ripping up the loader to make this work is fear of introducing bugs to 2.0. PSR4 is on the wish list and I suspect will involve some structural changes, so better PSR0 compatibility can be tackled at the same time.\n. FYI this should be fixed by #410 when it is merged.\n. I have made the classic mistake of not running the test suite - I'll fix that\n. Tests now running\n. I just tried this and the following syntaxes both worked:\n``` php\nfunction it_throws_an_exception_using_during_syntax()\n{\n    $this->shouldThrow('Exception')->during('__construct', array(1,2));\n}\nfunction it_throws_an_exception_using_magic_syntax()\n{\n    $this->shouldThrow('Exception')->during__construct(1,2);\n}\n```\nDoes this mean the issue is resolved? @ludofleury, what version were you running against, can you please try and reproduce with the current master?\n. @jakzal merge my PR then ;-)\n. @Spabby Did this solve the issue for you?\n. @GeeH I replied to the wrong person - did you ever nail this one?\n. As you're using callable presumably it is possible to do:\n$this->beConstructedThrough([self::class, 'myFactory']);\n. Yeah I edited ;-) It would actually be evaluated as a constant I think (so throw a warning and then be used as 'self')\n. Oh wait I see what you're saying - I am dumb. Maybe we do need a shortcut then.\n. $this->subjectClassName could be a string?\n. Is this really a bug? The message tips you off that you've an error during object construction... I'm not sure what the correct output should be, do you have an opinion?\n. I don't think prompting for jjjj() creation would be appropriate, specifically for the beConstructedBy() example you provided.\nMaybe we could mask PHP's error message with a friendlier one, although I don't think it's hard to figure out what the message means (the 'mysterious interface' is something you, the author, have type hinted in the constructor after all).\n. Hi, this config is now documented in the cookbook: http://phpspec.net/cookbook/configuration.html\n@B2F, Does this answer the questions / resolve the issues?\n. Underscores are not properly supported (#127)\n. @stof do you have any thoughts on how this could look in phpspec?\n. @8823-scholar You can call $this::method() to test a static function:\npublic function it_does_something_static()\n{\n    $this::foo()->shouldReturn('bar');\n}\n. I misread your example - I did not spot that the constructor was private.\nIt looks like PhpSpec still instantiates classes when testing statically - this is actually as long as they are constructable.\n. It seems to me the only way to solve this will be to introduce some sort of syntax like the following:\n$this->beConstructedFrom($callable);\nHowever the object construction logic is pretty complex already so it's not very easy to implement.\n. You'll now get a message saying RemoveUnavailableService.php isn't a valid class name... hopefully that's enough to be considered a fix?\n. It's definitely worth releasing, it would be good to see two ways of output. e.g. using the DotFormatter to stdout + outputting the HTML to disk\n. Yay, Prime Factors kata :-)\nIn real life if you are specifying lots of behaviours in one method, you're likely to be doing something wrong - you should be able to tell by the output example name which condition causes the problem.\n. @mdavis1982 Take a look in PhpSpec\\Formatter\\BasicFormatter::printException\n. Not sure why Travis has failed. Looks Composer related but that wasn't changed in this PR\n. Cool. It failed first time around but I think it was just a packagist glitch\n. Having thought about this overnight, I'm not sure the behaviour of 'agree to all the generation' is correct - I'll close this and resubmit a better solution\n. As discussed with @MarcelloDuarte on Skype, will add something to the help message to explicitly say the option blocks code generation.\n. Ugh sorry, I didn't meant to close this.\n. It's a good point, but I didn't want to limit future ask() that maybe should still happen and get accepted with the default values.\nThanks for the vote :-) \n. The description for --no-interaction now says:\nDo not ask any interactive question (disables code generation).\n. I pulled in a refactor change from #177 so they'll probably conflict so should be merged one at a time (but in either order).\n. Now has --no-code-generation option, ready for further review.\n. @andy can you not call iterator_to_array and compare? Does this issue prevent that behaviour?\n. I agree, there was a bit of copy/paste in implementing this\n. PhpSpec/Wrapper/Wrapper is definitely a class in PhpSpec, which suggests you don't have it installed.\n. If they're all installed via Composer then it should 'just work'.\nCan you verify that PhpSpec/Wrapper/Wrapper.php is there in your install?\n. Discussed this IRL with @MarcelloDuarte and there are some pending changes from him that may lead to a more elegant solution, I'll close this PR for now.\n. @andho you may be able to mock SimpleXmlElement from the latest Prophecy.\n. You can add whatever Extension-specific config you want to the main YML, it doesn't have to be keyed via the extension name\n. I'd agree if it didn't break BC.\n. @docteurklein I'm going to close this PR, can you please re-open against develop branch so we can merge in for 2.1?\n. I don't think we can break the old format, can you handle both? Maybe by detecting when the value is an array, or detecting when the key is numeric (we're never going to have a numeric Extension name)\n. Thanks - I know we discussed breaking BC before, but there are more extensions now than there used to be :-)\n. I don't think mixed would make sense so fine by me.\n. Yes please ;-)\n. @docteurklein Can you address my notes above?\n. BC is a big issue - it would be much better if you can preserve it.\n. Optional arguments are often missing from Scrutinizer reports - report it as an error or do a PR to php-analyser\n. Upvote this https://github.com/phpspec/phpspec/pull/571 ;-P\n. @docteurklein I don't think we'll be updating the PHP version soon\n. I'm going to close the PR for now, it doesn't mean it's not a good idea!\n. I don't think there would be a way to do this cleanly - php methods can be invoked with as many arguments as you like. We make a guess when we generate a method, but the user may want to do func_get_args() or something similar internally, I don't see how we can handle it.\nSpecifically, if I write an example with 2 args, generate the method, then write an example with 3 args it's very tricky to proceed.\n. Maybe we should use sebastianbergmann/exporter directly?\n. Looks good, someone who is new to phpspec asked me how to do this recently and I said there wasn't a way currently ;-)\n. :+1:  - @MarcelloDuarte anything needed before this is mergable?\n. @cordoval Are you going to get a chance to revisit this? If not I'd rather we close the PR and you can re-open in future if/when you come back to it.\n. I meant the PR rather than the issue...\n. i'm going to close this because there was such discussion between @stof and @cordoval but the conversation died off.\n. @MarcelloDuarte If the core currently has NyanFormatter in, why not have this?\n. @mdavis1982 Now that formatters are in the serve container can you look at this as an extension?\n. Since you opened this, phpspec has features... would you have any time to write some? ;-)\n. Aside from that this looks good to me :+1: \n. Specifically around the parts of the functionality you've touched here (specifically, the unhappy path with an invalid PSR0 name). \nIf you don't want to, it's not a blocker to merging - it's just something I am politely asking about when people do PRs now.\n. @cakper now you're familiar with the mechanism, make PSR-4 work ;-)\n. Mocking methods of the SUS is useful when applying tests to existing code so you can drive it forwards via refactoring. However I know @MarcelloDuarte worries that it would encourage bad practice.\nIf you want to Do It Yourself, write a class that extends your base, and spec that instead. Then as soon as you can, remove the dependency and spec the real class.\n. @8823-scholar Can you explain what bug this fixes for us, please?\n. @LewisW Does this pull request you're commenting on fix the issue? Can you prove a bit more detail about the use case, e.g. your phpspec.yml or similar details?\nI think the only reason we didn't merge this PR was that none of us knew what bug it's causing?\n. @stof Hm, I kinda agree. The driving idea was to reduce the responsibility of the Command (loading the suite and invoking the runner). Maybe I've just moved the problem around?\nDoes another object need to be involved perhaps?\n. Before:\nResponsibilities of RunCommand:\n- Parse CLI arguments\n- Get test suites from Loader\n- Run test suites using SuiteRunner\nResponsibilities of SuiteRunner\n- Iterate over Suite and run each Spec using SpecRunner\n- Throw events at suite start/end\nAfter:\nResponsibilities of RunCommand:\n- Parse CLI arguments\n- Invoke SuiteRunner\nResponsibilities of SuiteRunner\n- Get test suite from Loader\n- Iterate over Suite and run each Spec using SpecRunner\n- Throw events at suite start/end\nI personally think the second set is better but there might be room for improvement\n. @nixilla - it's not implementation-specific. array_key_exists returns false on an ArrayAccess without triggering offsetExits\n@stof - the isset() call will return for ArrayAccess objects and then short-circuit the boolean expression won't it?\n. @stof no they just silently fail. You're right about the short-circuit, I was being dumb ;-)\n. I have a reservation about adding shouldImplement - interfaces confer type in the same way inheritance does, so it would be nice to reuse shouldHaveType somehow?\n. I agree with @stof here. I had not considered the BC break but it is important.\nI try never to use shouldImplement myself because it's too implementation specific, and its existence here in phpspec already is just as a simple alias for cases when the spec author has a spec that reads better when using 'implements' - there shouldn't be a fundamental difference under the hood.\nWe should be encouraging people to think about Types without dictating whether that type is conferred to the object through normal inheritance or via implementing an interface (think how type hinting works, for instance - it would be crazy to have a different syntax for hinting interfaces).\n. The discussion doesn't seem to still be raging... I think @MarcelloDuarte should weigh in.\n. @karolsojko I kinda agree with @stof and the conversation has died out a little.\nI think there's space for auto generation of collaborators, but the disagreement was about defining a special meaning for shouldImplement. From a BC position this is problematic, and from an ideological position it was a problem to some.\nI think you could make a new PR in future that addresses this if you are still interested.\n. Can you give an example of a failing spec?\n. Ah yes, they look the same. Thanks for the example @fspillner \n. Fails for me after composer update, here's a small test case:\n```\n<?php\nnamespace spec\\PhpSpec\\Example;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass ObjectStateMatcherSpec extends ObjectBehavior\n{\n    function it_should_be_available_on_cinemas()\n    {\n        $this->shouldBeAvailableOnCinemas();\n    }\n}\nnamespace PhpSpec\\Example;\nclass ObjectStateMatcher\n{\n    public function isAvailableOnCinemas()\n    {\n        return true;\n    }\n}\n```\n. @fspillner It's because ObjectStateMatcher validates that the $subject is an object, not a scalar, before it admits that it supports the expectation.\nIn other cases where matchers aren't doing is_object() everything works.\n. @MarcelloDuarte :+1: on the specs\n. :thumbsup: This would hugely benefit the project in terms of regressions.\n. Closing because we have features merged in! We still need more features though.\n. This is a nice new feature, I think you need to write some specs that verify it works though?\n- Method called it_* with no comment being detected properly\n- Method called it_* with comment, comment is picked up\n- Method called foo with no comment, not treated as spec\n- Method called foo with comment, is this now treated as spec?\n- Multiple comment line handling\n. @MarcelloDuarte Aside from code review, do you like this as a feature (in terms of project philosophy)?\n. @bookvik I think if you address the few remaining comments this is something we can merge in for 2.1\n. @bookvik I'm going to close this PR because it's not a candidate for 2.0, but please re-open against the develop branch so we can consider for 2.1\n. Hm, this may have previously worked - did I break it in efe484f?\n. There are lots of other problems with the current defaulting, for instance bin/phpspec specs/FooSpec.php generates an error message and so on.\nI'm actually now behind this PR - it'll break a few Travis builds but they're all fixable quite quickly.\n. @MarcelloDuarte You said you thought you'd merged this - you haven't ;-)\n. @henrikbjorn - @MarcelloDuarte has an alias 'r' = 'bin/phpspec run' on his box. You could do something similar if the extra keystrokes annoy you.\n. Well, the reasoning for it is discussed above.\n. :+1:  - @MarcelloDuarte ?\n. @richardmiller  can you resolve the conflicts on this PR?\n. As another example, Prophecy's build has been consistently failing because of #217 \n. Mean when? I think this issue is closed by your current efforts to produce 2.0 stable\n. I may have got the number wrong (am on mobile). The prophecy issue is to do with how SimpleXml was being wrapped/unwrapped\n. I'm closing this because the process for releasing 2.0 has begun\n. Fixes #186 \n. Oh yeah, that's why the array was taken out in the first place ;-) This was a bug in PHP that got fixed in 5.3.4\n. @henrikbjorn A strong motivator is we know of a few projects using phpspec that are constrained to 5.3.3\n. @henrikbjorn I'm not sure of the exact reason. It was an easy fix to add 5.3.3 compat at the time so we did.\nIs there a way to do version detection here to fix things?\n. In ExampleRunnerSpec you can use Argument::any() to cover both cases BTW...\n. @henrikbjorn Can you make your original change, but put a version_compare test in to handle the php 5.3.3 case differently? Then it'll be easier to remove if we do up the minimum version.\n. If you want to be specific you could in the do something this early in the spec:\n$newInstanceArgsArgument = (version_compare(phpversion(), '5.3.3', '==')) ? null : array();\nAnd use $newInstanceArgsArgument in the examples.\n. I was going more for:\n```\n$reflected =  $example->getSpecification()->getClassReflection();\nif (version_compare(phpversion(), '5.3.3', '==')) {\n    // ref: https://github.com/phpspec/phpspec/pull/226\n    // php 5.3.3 does not like it if you give newInstanceArgs an empty array\n    $instance = $reflected->newInstanceArgs();\n}\nelse {\n    $instance = reflected->newInstanceArgs(array());\n}\n$this->executeExample($instance, $example);\n``\n. However I agree with @stof that instead of detecting 5.3.3 we should detect HHVM (checking the HHVM_VERSION global constant)\n. Looks good to me, I don't have the ability right now to test it on HHVM or 5.3.3 though\n. @henrikbjorn Are you going to get a chance to look at this? Now that Travis supports HHVM it would be good to add it as a build target for 2.0\n. No, you can use Argument::any() or Argument::that($callback) and write an appropriate callback. In fact the callback could have a version detection inside it...\n. @henrikbjorn If you get a satisfactory fix for this, please also add HHVM to the travis build in your PR, it would be great once we get compatibility to keep it! ;-)\n. Can you please add a spec for this? An example of how this clarifies code would be good too - I don't think you need thebeConstructedWith` in the example in your PR\n. I guess the example is something like:\n$this->beConstructedWith('Bar')->getFoo()->shouldReturn('Bar')\n?\n. It sounds like a good idea. Whent the parameter has multiple types, how would you choose which one to hint?\n. I was thinking of something like \n$this->foo($foo) where $foo is of class Fooand implements BarInterface and BazInterface - we would have to decide which of those three types should be hinted.\nHowever in a spec $foo will always be a double, right? ;-) So we can safely assume it's whatever type the Prophecy double was generated from\ne.g.\nfunction it_does_foo(FooInterface $foo) {\n    $this->foo($foo);\n}\nthen the generated method can safely be:\nfunction foo(FooInterface $argument1) { ... }\nSo I am in favour of this feature ;-)\n. @mdavis1982 You could but I think mocking the interface is probably a better approach.\n. @docteurklein I think hinting based on the type used is fine. People who hint without doubles of interfaces will get an interface hint. Prompting against all classes/interfaces the item expresses would add overhead.\n. @mdavis1982 I agree it will encourage concrete type hinting if people are not already hinting interfaces, but they can always edit the hint ;)\n. @everzet That's not the right way of thinking about it, to me.\nfunction it_does_something(ArrayToken $token)\n{\n    $this->foo($token)\n}\nThe author here has clearly decided that this function takes an ArrayToken, so it would be appropriate to use ArrayToken as the generated type hint for $token rather than one of the other interfaces it implements \nSimilarly if the author of the spec had chosen to double Token, that would be a good type hint.\nDoes this make sense?\n. I started playing with this, the rules I would propose are:\n1. If it's a concrete class, use get_class to work out the type hint\n2. If it's a prophecy double of a class, work out what class that was and use as type hint\n3. If it's a prophecy double of an interface, work out which interface the double was of and type hint using it\ndisambiguating 2+3 are giving me trouble. \n. @everzet We only generate the method on the first instance of its use.\nSame issues arise with numbers of parameters etc.\n. A fatal error about the type hint being wrong will make the author realise that their assumption when they made the first example pass (that they should double ArrayToken) was wrong.\nThis will make them think more about what they were doubling in the first example and maybe they will realise that they actually wanted to double Token (for instance) rather than ArrayToken, making them improve the readability the specs.\nUnless you meant you'd write those two examples without running them in-between, breaking the rules of TDD ( I tease... )\n. Incidentally, I don't believe hinting on Interface is going to be possible without a change to Prophecy (there isn't a way to ask a double which of its many interfaces was the one it was generated from)\n. @everzet We don't need to always 100% get the right type hint that the author wanted us to auto generate. The question is whether we can 80% of the time get it right, rather than leaving it blank.\n. Doesn't the same argument apply to number of parameters?\nPhpSpec tries to do code generation, pulling back from doing it at this stage seems a weird policy decision\n. @everzet I can see the argument there, for not putting it in core.\nBecause this is something I want for my own style of writing specs, I've knocked together an extension here: https://github.com/ciaranmcnulty/phpspec-typehintedmethods\n. @docteurklein Finding the common superclass won't do it - you'd maybe look at the superset of which methods are stubbed/mocked across all examples and work out the most abstract type that fulfils them -far beyond phpspec's scope.\nIn my extension I base it on which class was doubled - this relies on the author doubling the most abstract type at the point of writing the example, so it probably isn't suitable for core if people write examples the way @everzet describes above.\nI discussed with @MarcelloDuarte today and he also thinks it's not a core feature so I'm going to close this issue - PRs to the extension from those whose style it fits are welcomed.\n. Is it possible to avoid this method call?\n. @olaurendeau This is actually fixed as part of the changes I've made for #232. I just tested that in 2.1 and it worked fine.\nSo if that gets merged it will fix the issue, otherwise if not I can take just those changes and open a separate PR to fix this problem and we can continue supporting 2.1 users.\n. OK this is rebased and I think complete.\n. @stof I'm not sure what you mean about adding commands; in both master and this branch they are registered during Application::__construct so I don't think master allows extensions to register new commands either (please correct me if I'm wrong). The difference here is that I'm deferring a lot more of the container setup until doRun, which to me seems more flexible.\nCommands currently don't do DI - I wish they did! I think they currently grab the container from the parent Application, e.g.\n$this->getApplication()->getContainer();\nSo any services commands retrieve from the container will be initialised at command runtime as you'd hope.\n. @stof I think I've addressed all the comments\n. Should this be held off for 2.1?\n. :+1: it's now supported by Composer...\n. I really like the idea @andytson - I think findFile will fail if the file doesn't exist, which makes the approach problematic. If there's a way to do this using composer rather than replicating the work ourselves it would be awesome!\n. The other issue that occurs (sorry to be negative) is that class => file is one-to-many as far as autoloading is concerned. As well as multiple include_paths, there can and will be more than one scheme in place for doing that mapping (i.e. each composer vendor can do their own thing, they don't have to use PSR0/4).\nThe reason we have the Locators is because we need a clear one-to-one mapping from a fully qualified class name to a target on disk. However, if there are bits of Composer's architecture we can reuse it's a good idea!\n. There's an argument to be made to not use autoloading in production :-)\nComposer can never do one-to-one because it supports arbitrary autoloading schemes; it has no way of knowing which autoloader to use for which class.\n. Does #350 close this?\n. I'm going to close this issue as I believe #350 fixes it.\n. You can always write new specs, you know ;-)\n. Are you talking about empty suites, or are you talking about the 'run' command being missing in that example?\n. I've thought more about this and I think I'm actually :-1: on doing this in phpspec, even though it would help with some  false positives.\nHowever it might be worth suggesting as a change to the default behaviour in symfony/console\n. A quick search of github shows plenty of projects using phpspec without the 'run' command, so it will be a problem.\nMaybe we return non-zero for 2.0, then go back to returning zero with 2.1?\n. Or maybe make it return non-zero for @dev and when we hit 2.0 change it to returning 0?  @MarcelloDuarte ?\n. @jakzal yeah what @stof said. Basically once we got a few useful CLI options, the default command got hard to use.\nI don't know what the best solution is, my ideal would be for there to be a default command where all the CLI options worked but that seems to be something that would need to be solved in symfony/console\n. @stof there was some very hacky stuff in the option parsing that I think meant options weren't working, but that may have been resolved or at least would be resolvable.\n. @stof I agree about TestWork BTW, if you do start, please push often so I can see and don't duplicate ;-)\n. @ando Just so I understand, this PR suppresses an error when arguments are passed by reference, but doesn't pass the actual reference.\nSo it stops the error but there may be unexpected results when people write specs for pass-by-reference?\nIf it's an improvement on the current situation it's probably worth merging.\n. @andho I think the delay on merging this is the fact it doesn't actually solve the problem. Having looked into it, how hard do you think it would be to make this actually work?\nYou could start perhaps by adding a feature showing a 'failing' scenario?\n. @andho Are you going to get a chance to look at this further?\n. The issue isn't resolved, the PR was closed because it seemed dead for a year.\n. Feel free to open an issue; I'm not aware of anyone working on it. You can if you like :)\n. @stof Yeah I hit close thinking to abandon the comment, and closed the PR instead. My bad.\n. I think this looks in really good shape - there's a solid phrasing in the features that I think we've all agreed on + step definitions that cover a lot of cases.\nI think it's ready to merge\n. @MarcelloDuarte Are you happy with the feature layout/language?\n. @jakzal can you please indent the pystrings in your features by either 2 or 4 chars? I think it would help make them more readable when we're dealing with big blocks (see the behat/behat features for instance)\n. @marcello I mean like:\nWhen something:\n  \"\"\"\n  <?php blah blah\n  \"\"\"\nThen whatever\nIndent of the quoted string. It's not something that should block a merge though.\nAside from that, I think @jakzal needs to respond to your comments about scenario phrasing before it is ready.\n. :+1: I think this is ready.\n. :cocktail: :cocktail: :cocktail: :cocktail: :cocktail: \n. @stof I think you need to resolve the conflicts here, hopefully it'll make the diff clearer for review?\n. I'm not sure this is warranted.\nFor instance, Gherkin has a 2-space standard that we're using it. I'd like an external '4 spaces is standard for Yaml' reference before making this change, we don't want a 2-space-yml vs 4-space-yml holy war ;-P\n. @mdavis1982 I'm going to close this, as the Yaml is consistent within the codebase\n. @stof \n- PHP-CS-Fixer can generate dry-run output and a diff of recommended changes, it doesn't have to actually fix on Travis. It should do this in failure instances the way I've configured the travis.yml I believe.\n- I included the fixer as a dependency rather than using the one in Travis so that contributors could run it locally without having to check Travis all the time, exactly the same as they hopefully run phpspec first.\nOverall the motivation is the number of CS comments I've seen in PR reviews - it bugs me when projects are strict about CS when looking at contributions but don't have an automated checker\n. @stof fair enough, I'll close. I'll be upset every time you spot a whitespace issue in my code though ;-)\n. @stof it's not the same kind of failure, but travis doesn't say 'your unit tests failed' it says 'this cannot be merged'\nSo the question is which CS failures should block a merge... I am not an authority on this project's coding style so in that sense don't have an opinion. I set it to pretty strict in this PR because the current codebase passed.\n@MarcelloDuarte we've used php-cs-fixer on some work projects for detection - we can pretty much choose from a list which issues should cause a fail. It would be possible to generate some custom sniffs to put the specs folder under CS too. The question I guess is: is this something you want for the project's Travis?\n. :+1: \nThe nyan formatter is just a bit of fun, if @mdavis1982 wants to make a proper composer bundle of the extension then I think it makes sense to remove the cat from core (we could point the recommended composer dep to something Matt controls if we still desperately want to promote it!)\n. Yeah I'm :+1: but I know @MarcelloDuarte loves that cat... ;)\n. @whatthejeff you're replying to @mdavis1982 but quoting rudeness from @docteurklein - Matt is much more polite than Florian :-)\n. We could distribute the extension under the phpspec organisation and attribute @whatthejeff and @mdavis1982 for the original Formatter + the extra work that's been done?\n. @stof I've left the code generation ones untouched because I think they're a good example of features where you want to be explicit about paths and names.\n. @jakzal Readability's the key thing I'm going for - any suggestions on cutting down the boilerplate while keeping readability?\n. @MarcelloDuarte you are :-1: on this I think? Is there anything I can change to make it more acceptable or should I close?\n. ok, closing\n. I've reopened this for discussion.\nAs the set of examples has grown I'm finding them less and less readable. In addition, @jon.acker made the point that some of the features could be improved with a Background step - this isn't possible if we're baking in the class/file names.\nI'd like to hear any suggestions of ways to improve legibility without sacrificing explicitness / using an external tool.\n. Can confirm it's black on OSX\n. Line numbers are also unreadable in a black-on-white terminal on OSX (they render black-on-black)\n. Maybe you can provide the colours you are using and we can change the defaults?\n. Can anyone with windows try replacing the default?\n. Have you tried the -v command line option?\n. Docs for this have now been updated to remove the misleading instructions\n. It's messy, but you can match the arguments a method is called with in arbitrary ways, by using Argument::that():\n```\nfunction it_should_give_the_app_a_closure_that_returns_the_db_result(\\Db $db, \\App $app, \\Result $result)\n{\n    $db->getResult()->willReturn($result);\n    $this->beConstructedWith($app, $db);\n$this->setup();\n\n$app->get(Argument::any(), Argument::that(\n    function($arg) use($result) {\n        return $result->getWrappedObject() === call_user_func($arg);\n    })\n)->shouldHaveBeenCalled();\n\n}\n```\nThe only complicated part is you need to 'unwrap' $result before comparison.\n. I should add - I would strongly recommend defining a type that can represent that closure, rather than passing the bare closure around e.g. DbResultFetcher\n. I think you want to do two tests:\n```\nfunction it_disallows_merge_with_itself()\n{\n    $this->isMergable($this->getWrappedObject())->shouldReturn(false);\n}\nfunction it_allows_merge_with_other_As(A $a)\n{\n    $this->isMergable($a)->shouldReturn(true);\n}\n```\nThere's nothing here that requires mocking the object under test, as far as I can see.\n. @bburnichon I think the reason you are having difficulty is you're not thinking about how to test ConcreteA from the outside - you're thinking about how to test ConcreteA when its own internal functionality (isEquals) behaves in different conditions.\nI fall into this trap a lot ;-)\nThere are two strategies for escaping:\n1: Think about Behaviour\nTake a step back and think about the object from the outside: What conditions cause isEquals to return true? What conditions cause isEquals to return false? \nMost of the time (such as your example) it's then possible to write a test that doesn't need to mock the internal behaviour, because you're talking about an overall semi-complex behaviour of the object.\n2: Think about Composition\nSometimes it's not possible to do this, the set of preconditions are too complex and it takes a lot of effort to manipulate the object into the correct starting state. This is probably an indicator that the class is too complex or has too many responsibilities. \nAnother way of looking at it is that you're asking that one part of the class (isMergable) can talk to another part of the class (isEquals) without really knowing how it works internally - this is a clear sign that maybe it shouldn't know about it at all!\nThe best approach in that situation would be to create a collaborator object that is responsible for the behaviour you want to manipulate. I don't think it's necessary for your example but just to illustrate, in this case I would introduce an object that's responsible for comparing A objects and saying whether they are equal. By stubbing that object you can get the behaviour you want.\n. You're trying to test functionality not on the concrete classes.\nLooking at your example code you only have two real objects, ConcreteA and ValueObjectA\nThis is 4 tests, if you want to test every combination; you're trying to write a sort of generic test, which is the wrong approach.\n. @barbarinde Are you sure you're just running BSpec? If so then this is indeed a bug.\n. Is it possible there's a missing use statement?\n@nonlux can you please share the full examples?\n. I agree this needs clarity, at a minimum we need instructions for how to contribute, and for the default branch to be the one we want people to contribute to.\n. After discussion today with @marcello he's pretty sure that the policy should be:\n1. master is the stable release we will use for 2.0\n2. develop is for future versions\nWe don't want to get more complex than that. The rules are pretty simple:\n1. New features should be PRs against develop\n2. Bug fixes / hot fixes should be PRs against master\n3. Once PRs are merged to master, changes should be merged across to develop\nIf I get time I'll try and capture this in a contributing.md, unless someone else wants to?\n. Does it make sense to change the default branch to develop? It does if we are getting more feature requests than bug fixes...\n. @stof well, bug fixes should be targeted to master so it depends if that is the most common type of PR\n. Closed as we are now on single-branch\n. Am I right in thinking 'phpspec describe' will now run the tests?\n. I have reservations about this change, 'describe' and 'run' are different actions.\nWhat is the motivation to have a single command application?\n. The reason I am :-1: is that having one command stops us from having different options/arguments for different commands.\nThere would be nothing to stop you doing bin/phpspec --describe --no-code-generation, for instance. --no-code-generation is an option that only applies to 'run' but there's no validation of that.\n. Very nice, @stof. \n. @l3l0 This looks good to me, I do think that example could be shorter.\nI need to talk to @MarcelloDuarte about whether this sort of thing belongs on master or develop before I hit the button.\n. Yeah, there's general confusion about it (see #272) that we need to resolve before merging.\n. As this fixes an issue, it's correct that it's open against master.\n. The Behat features covering this behaviour, and the XSD validation, are both really good additions :+1: \nMy only question would be whether it's wise to build the XML using strings, rather than something like DOM or SimpleXML?\n. @gquemener If it's clearer I don't mind string operations, it just means you have to remember to escape text correctly and that can be a minefield. So long as the test coverage is there it doesn't matter too much.\n. I'll speak with @MarcelloDuarte about which branch this should merge to, but it looks ok to me.\n. this looks good to merge to me - I'm going to discuss with @MarcelloDuarte which version we want to merge it into\n. In that case I'll merge, maybe @nickpeirson or @gquemener you can tighten up the validation later?\n. Not sure why Travis has failed this build, works locally for me (see #280)\n. Has something changed about minimum-stability in composer? Maybe there was a big?\n. I wonder if we can add a composer selfupdate step\n. Hashes for composer in the failed builds are different... still very mysterious\n. I added self-update on #283 and now have the travis build running against the same  hashed version of composer as I am using locally.\nHowever, it works for me and not on travis!\nI'm running out of ideas - intermittent connection between Travis servers and packagist?\n. I foolishly merged a PR so now master/develop are 'failing'.\n. Pinging @stof, can you advise here how phpspec and phpspec2-expect's composer configs should be? I don't think any other contributors know composer as well as you :-(\n. Hacky fix in #290 but it's probably not best practice\n. Sounds good, I'll add\n. I've rebased to master, but the build failure is still happening (see #285)\n. Merging because Jakub was happy previously and the build now passes ;-)\n. Hi @dariushha \nThis looks interesting, but it is awkward downloading and renaming JPEGs.\nI suggest the best approach would be for you to host these scripts in a repo under your account so others can check them out.\n. @jakzal Wait to see if it builds first ;-)\n. I'll leave the PR open because this seems like a sensible thing to do regardless.\n. It would be good to see some Behat/feature coverage for this option, and some help info when I type 'behat help run'\n. All autoloading is delegated at the moment, and phpspec will use composer's autoload if it can be found. The mechanism for this is not very elegant though. Maybe it's something due for improvement?\n. Oh I agree, that's what I mean there's room for improvement. Bootstrap is a good way to support it, rather than write an autoloader inside phpspec.\n. @henrikbjorn Now that the docs are internal to this codebase, can you add some doc changes to the PR?\n. Ooops sorry.\n@chobie Can you add some doc changes (as above) please?\n. @chobie Will you be able to make the changes in the comments, and maybe add some documentation in /docs?\n. There are a couple of outstanding comments, and it looks like it needs a rebase.\n. I rebased this in #516 and it's now merged, so closing.\n. I'm wary about merging because as we discussed on Skype, there is no guarantee the ArrayAccess implementation is referring to the same data set as the Traversable implementation.\nHowever it probably solves it for the 99% of cases, so what do others think?\n. Very nice\n. Tell @MarcelloDuarte that stubs returning stubs is a smell ;-)\n. Your definition is telling phpspec where to put files in the \\app namespace, then you're trying to describe a class in the \\main namespace - for me this throws an appropriate exception:\nCan not find appropriate suite scope for class `main/markdown`.\nIf you describe something like app\\mail\\markdown then the folders are correctly placed in app/tests and app, note that you'll have to also configure your application's autoloader to deal with this.\n. Exactly what @jakzal said - this is an unexpected behaviour but it's not a use case I'd expect to see.\n. @cursedcoder To me that is clearly two different examples (the second being something like it_adds_only_unique_urls_respecting_hashes)\n. You either want two examples, or one is redundant. If they're showing the same behaviour you don't need the two examples. The format of a test is set up / act / assert / tear down - you are going through the cycle twice.\n. The justification for the PR is that I spotted the inconsistency during #232; changed it; then forgot about it and never told anyone and caused a BC break.\nSo: mea culpa.\nHowever I agree with @jakzal that it shouldn't be reverted and I will hide behind the protection of it not being a stable release to justify the BC break. \n.yml.dist is correct for 2.0\n. I'm on mobile so was trusting Jakub's comment!\n. In that case this should be merged :-)\n. Good catch @thewilkybarkid \n. Thanks @jakzal for taking the spotlight off my mistake ;-)\n. It's probably not worth opening an Issue for a 1-line fix - PR is better ;-) \nI will change it to mixed, but getWrappedObject is probably misleading naming now.\n. Annotations I think we can debate as a separate (future) feature. I like the Exception throwing, it's great that you've thought about the different formatters, @gquemener!\nI'm not sure about the static call - it doesn't seem necessary to me, but I'm happy throwing things...\n. As we're so close to stable, this should probably be a 2.1 (and under the current scheme that would mean the PR should be against develop, not master)\n. @henrikbjorn Ideally the diff between RC4 and stable will be very small. There's a certain risk attached to adding new features at this stage - I don't want us hitting RC9...\nDoesn't mean we can't add it in 2.0.1 of course!\nUltimately it'll be @MarcelloDuarte's decision.\n. You all mean 'inefficient' :-)\n. You all mean 'inefficient' :-)\n. I'm :+1: on this ;) Great addition.\nMy only reservation is whether it affects other extensions, but to be honest we only need to worry about BC when we have stable versions.\n. I also agree moving the container to a separate class is needed, however I'm more inclined to adopt a third party service container which probably isn't appropriate for 2.0.0\n. @isimmons If you're doing automated acceptance testing, and your controllers are thin enough, you might not feel like you need to test them at the unit / specBDD level\n. Can someone confirm this works on Windows? @stof? I don't have that OS ;-)\n. Under the current setup there's never going to be a symlink\n. Can you combine this with your other PR please? I think we can review them as one block (also if you intend to add any more 1 PR is easier to deal with)\n. This seems to fail under HHVM, do you have an environment you can debug in?\nOverall I really like this addition, it could be very useful indeed and addresses something that comes up from time to time.\nSome questions/comments:\n- You're checking in canAccessAsArray for ArrayAccess and if it exists you're using key(), current() and so on. As discussed, ArrayAccess may not refer to the same collection of data as the Iterator interface is exposing, is there a way to take this out?\n- You are then checking the wrapped object is Traversable and if it is, you're calling '->current()' etc. This will only work for Iterator so it might be wise to change the type check or implement the other cases. Specifically, I'd like to see examples (maybe in Features) of what happens with IteratorAggregate and with objects that implement Traversable directly in the engine (e.g. SimpleXmlElement)\n- Is this going to cause issues when trying to spec an iterator object:\n``` php\n    function it_should_be_an_iterator()\n    {\n        $this->shouldHaveType('Iterator');\n    }\nfunction it_should_return_one()\n{\n    $this->current()->shouldBe(1) // will this break because of unwrapping?\n}\n\n``\n- There's nothing in the features about whether the keys are unwrapped or not when doingforeach($foo as $key=>$value)`, I think it is, but it would be good to make it explicit.\n. I think object keys are valid nowadays but it might be 5.5+ :-)\nThe build output is here: https://travis-ci.org/phpspec/phpspec/jobs/20282593 - the feature features/matchers/developer_uses_matchers_on_traveresed_elements.feature:50 fails but due to the way the features work all you get is that 'the suite should pass' wasn't true, so you need to run on HHVM (you can get it from brew I think).\n. While I agree in principle, it might not be a popular move - people aren't ready for it yet!\n. I'd be in favour for it in a future version.\nI'd like to see more successful PHP projects that finalise most classes, especially where Extensions are going to be written (for instance I hope Behat 3 succeeds with the approach, but I'd like to see the discussions with Extension authors).\n. @gquemener Am I being dumb or is this missing a feature file?\n. Ok ignore last comment, figured it out ;-P Looks good to me\n. This is great, thanks\nOne thing I'm not clear on - is the spec going to be located in the 'correct' location according to PSR0 rules?\n. @xel1045 It looks like your last commit fixed the spec locations? I did not spot it before.\nDo you think this is feature-complete for PSR-0 now?\n. Can you please open a new PR against Master? We have removed the develop branch\n. @xel1045 I'd really like to merge this if you can re-submit?\n. Someone write it ;-)\n. I don't believe anyone's written it, no.\nThere is a possible roadmap of moving towards TestWork (reusing Behat components) but at the moment there's no real driver for it I'm afraid.\n. That said if someone wants to work on implementing that in the current system I'm not against it\n. @mdavis1982 NO :-P\n. If his name was Mr Boolean I would agree. The word is sufficiently removed from the originator. \n. The 'lowercase for primitives' rule is more valuable to me than English language conventions.\n. This is not something that will be in 2.1 ;-)\nHowever I can certainly see it being available in a more future version, or an extension, or even a rival tool that uses phpspec's matchers and prophecy.\nOne possible option would be to define a new description type that starts with describe_ rather than it(s)_, and have it return a set of examples:\n``` php\n    function describe_assigned_ticket(Engineer $engineer)\n    {\n        $this->assign($engineer);\n    return [\n        'it_is_assigned' => function($ticket) {\n            $ticket->shouldBeAssigned();\n        },\n\n        'it_stores_the_engineer' => function($ticket) use ($engineer) {\n            $ticket->getEngineer()->shouldReturn($engineer);\n        }\n    ];\n}\n\n```\n. @tomphp We can go back to the good old days and return strings if you prefer:\nphp\nreturn [\n    'it_is_assigned' => '$ticket->shouldBeAssigned();',\n    'it_stores_the_engineer' => '$ticket->getEngineer()->shouldReturn($engineer);'\n];\n;-P\n. There is something related to beConstructedWith here https://github.com/phpspec/phpspec/blob/master/features/exception_handling/developer_specifies_exceptions.feature\n. With named constructors there currently isn't a good way to do this. See #699 \n. I like it. It gives a simple way to enable this behaviour without a custom template, gives a variable to use in custom templates, and leaves the way open to flip the default in some future version.\n:+1: \n. It was against the develop branch so was closed when that branch was deleted\nDo you need an extension? Isn't it just a difference to the class template?\n. My concern is that this just tweaks one aspect the default template and we could end up adding options for a whole rat of other things, rather than using the actual templating mechanism.\nIt's entirely possible to always generate final classes already, drop your custom template in ~/.phpspec/class.tpl\nhttp://phpspec.readthedocs.org/en/latest/cookbook/templates.html#overriding-templates\n. My understanding was that this was broken when construction is triggered before the second beConstructedWith (e.g. by calling a method) as per #288 \n. @8823-scholar Can you please add a scenario in /features exercising this test case? Also maybe some specs.\n. @8823-scholar Is it possible to add these tests?\n. I've been thinking about this a little, and I'm no longer sure this is the right approach.\nThe use case we're enabling is:\n``` php\n    public function it_is_bar()\n    {\n        $this->beConstructedWith('bar');\n        $this->isBar()->shouldBe(true);\n    $this->beConstructedWith('foo');\n    $this->isBar()->shouldBe(false);\n}\n\n``\n- Currently phpspec silently ignores the secondbeConstructedWith` so this example fails\n- After this PR phpspec will re-instantiate the object and the example will pass\nHowever, testing two things like this in one example is bad practice.\nMy preference is:\n- Add a check in beConstructedWith/beConstructedThrough and throw an exception if the SUS has already been instantiated, with a message about why this is bad practice.\nSomething like \"You cannot change the instantiation method after an object has already been instantiated; consider writing a separate example instead\"\n. @8823-scholar What do you think to my comments above?\n. Just noticed this relates to #288 \n. Your example should still work, because you are not causing instantiation to happen before redefining the constructor\n. Hm I'd still like this...\n. I'll be able to have a go at some time in the future - I'm wary of refactoring until there is more discussion on #562 \n. Just to brain dump, the way I'd see it working is I write a spec with:\nphp\nfunction it_talks_to_a_collaborator(Collab $collab)\n{\n   //...\n}\nAfter phpspec run I get prompted with:\nbash\nUnknown type MyNamespace\\Collab, would you like to:\n  1. Genrate an interface\n  2. Describe this class\n  3. Abort\n?\n(or however the convenient Symfony helper formats it)\n. And refactoring is always a good idea!\n. No worries, got me thinking about this one ;-)\n. I'm happy with interface generation for now \n. I agree :-)\n. I'm closing this as a dupe of #234\n. There's currently nothing like this, I've labelled this as a feature request.\n. This can be achieved using Traits.\nI'm not sure repetitive examples are something we should encourage, it sounds like duplication of effort to me. I'm open to proposals with a clear use case though\n. @docteurklein This looks like a great idea, but it's not had much traffic recently. I'm going to close it but please reopen when you think it's no longer a WIP\n. You can't call buildHeader because it's protected - it isn't part of your object's API\nTest the way your object will behave from the outside\n. In your let() you're calling methods on $collection and $method but they are not defined as far as PHP is concerned.\nYou still need these arguments to your method, even if you're going to use annotations for the type hints.\n. I am saying here:\nphp\nfunction let()\n {\n     $collection->first()->willReturn('hello world');\n... etc\nYou are calling the method first on a variable $collection that does not exist.\n. Ah, hm. In that case nothing jumps out.\n. The specific problem you are having is that your doubled encoderFactory is returning null when $encoderFactory->getEncoder($user) is called. This means subsequent method calls on $encoder will fail.\nYou could code around this by making your stub of $encoderFactory return a double of $encoder:\nphp\n    /**\n     * @param \\Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory $encoderFactory\n     * @param \\Symfony\\Whatever\\It\\Is\\Encoder $encoder\n     */\n    function let($encoderFactory, $encoder)\n    {\n        $this->beConstructedWith($encoderFactory);\n        $encoderFactory->getEncoder(Argument::any())->willReturn($encoder);\n    }\nHowever, you should watch out for situations where you've got a stub returning a double - it tends to imply a violation of the Law of Demeter.\nA better solution might be to have your UserManager depend on some mediating object rather than the Symfony password encoding infrastructure directly.\n. This new version is no longer a unit test, you're testing a small set of real objects.\nI'm not sure why the previous version didn't work, to be honest.\n. This is not in a stable release yet\n. Oh dear, can you raise this as a separate issue please?\n. @dranzd @aRn0D Thanks for the confirmation this is working for you now. The docs could do with some improvement.\n. Probably next weekend, as long as no RC3 bugs are uncovered\n. @antonioribeiro Does #350 now being merged fix it for you?\n. I'm ok with a bugfix as long as it handles the case where other classes are also in the same file. Hi @mbfisher \nThe Application/Console side is currently not tested at the SpecBDD level, but is broadly covered by the Behat test fixtures.\nAny changes you want to suggest to improve this are welcome!\n. Can you please open a new PR against Master? We have removed the develop branch\n. @livsi Can you change this?\n. This is superseded by #400 \n. In this instance, and others where your methods look like matchers, you should be able to do\n$this->callOnWrappedObject('shouldPropogate');\nTo avoid the matcher mechanism.\n. Testes stuff? ;-)\n. @sourcerer-mike This has been discussed with reference to Type Hints and rejected from Core... I don't think this is going to be a core feature but is certainly something an Extension can do.\n. Makes sense to me, we're going to be merging develop/master and I think this can come in after that is dealt with.\n. Can you please give a code example?\n. Thanks!\n. I'm not sure but... this now works for me :-)\nThere have been some changes to how instantiation happens, specifically in dev-master we are now outsourcing this work to doctrine/instantiator\nCan you confirm whether the bug is present with the latest dev version?\n. I just tried this against 2.1-RC2 and again it passes.\nI'll close this issue, please re-report if you come across another reproducible case; hopefully the 2.1 release will help testing Laravel components more easily!\n. @mtotheikle This is likely due to your error_reporting level? \n. This was proposed previously and led to some debate. Eventually it was decided it should not be in core (see issue #230).\nI ended up putting together a basic extension http://github.com/ciaranmcnulty/phpspec-typehintedmethods - maybe you can contribute to that, or indeed make your own extension that adds this feature as you've gone much further than I have and I'd like to use your code. Have a look at my README for more reasons this isn't in core.\nI'm going to close the PR because nobody who took part in #230 seems to have changed their minds enough to comment but please don't take this as criticism of the code, it's more like a project policy decision.\n. @stof but the way the stub is configured expects no parameters so we'll get breakage if 5.6 is released with this current behaviour.\nI don't like the explicit version check and would prefer some wildcarding, but actually I don't think Argument::cetera can be use here for '0 or 1' params.... I'll have to see what a nicer alternative is.\n. @mbeccati Can you replace this with an Argument::any() wild card? I think we can then merge when 5.6 becomes stable.\n. @dantleech run with the -v or --verbose\n. Your original issue (string diffing) is valid\n. Can you run it with -v? That should show the array diff.\n. Hm actually can you make a gist that triggers this?\n. @Anyqax does it not expand with the -v flag?\nI agree containLike might be useful. However I find myself very rarely using contain in most circumstances when my code is simple and clean; most of the time I can use beLike and state the whole array.\nI slightly worry that contain enables throwing large arrays around i.e. poor design.\n. @l3l0 Does the PR fix this for you?\n. @l3l0  I'm going to close as @whatthejeff's work should resolve this, please re-open if it continues to be a problem for you.\n. This appears to be fixed in 5.5.14, at least according to the release notes.\n. @whatthejeff Is this just blocked on the prophecy PR? It looks like it fixes our test suite, which is a win...\n. @whatthejeff Ah, so it's merged and we're waiting on a new point release of Prophecy for this?\n. I guess we need a point release of Prophecy to point the new version to (to fix HHVM issue) and then we can merge this.\n@everzet any chance of getting Prophecy 1.1.1?\n. Ah wait, this is already in the latest prophecy.\n@whatthejeff can you bump the Prophecy dependency in your branch please, to see if that fixes the HHVM failures in this PR?\n. HHVM being such a moving target seems to be problematic - I wonder at what point we have to start paying attention to testing multiple HHVM versions?\n. I don't have permissions for that - @MarcelloDuarte ?\n. @whatthejeff Thanks ;-)\n. Thanks for all the hard work @whatthejeff \n. This might be good for a future version, in the meantime you'll have to have multiple matchers for the different cases\ne.g. shouldBeJsonEqualsButExcluding($json, ['id']);\nIn general I'd worry if matcher logic got too complex.\n. Looks good to me\n. I am in favour of a single branch with tagged releases.\n. It's probably time for a Contributing.md\n. Hi\nIf the suite configuration isn't powerful enough for you (likely) then you would have to write an extension to do this, to override the Loader/Locator to honour your own legacy system.\nThis isn't impossible, @jon-acker is doing something similar for Kohana here https://github.com/jon-acker/phpspec-kohana so he may be able to shed some light on the process.\n. Is that not what PSR-4 gives?\n. It would be good to hear your situation because maybe suite config could be expanded a bit to support some common cases.\n. This is indeed what PSR-4 addresses, unless I'm misunderstanding.\nIf you have OFAccelerator\\Util\\Author you can have the following in your PSR-4 autoloader composer:\njson\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"OFAccelerator\\Util\": \"wordpress/wp-content/plugins/OF-Accelerator/php/util\"\n        }\n    }\n}\nI've not use the PSR-4 configuration in phpspec yet, it's on the develop branch if you want to take a look (and see #350)\n. Well, it's not in a stable release (and I've not tried it so don't know if it works) ;-)\n. @JHKennedy4 Does adding the \\ to the end of the composer autoload prefix solve the issue?\n. If you can, that'd be great. It'd be nice to know whether this is a bug or just something we need to document better somewhere.\n. Great, thanks\n. Just noting, the documentation now reflects the behaviour. I'm reclassifying this as a feature re: @paulodiovani's notes above.\n. Is even this going to work all the time?\n. I'm not sure either :-) \nI kind of feel like $stats should have a didAnythingFail boolean?\n. Agreed\n. @smoya Your last example passes for me - what is the question?\n. @smoya As does the first one in fact.\n. I'm going to close this because all code examples so far pass - if you can isolate the issue you're experiencing to a specific example please open a new issue.\n. Or 3, define an interface for your collaborator and use that. You will vastly benefit in other ways from doing this :-)\n. To my knowledge the doctrine param converter doesn't require the annotation\n. I thought if the request attribute matched a Doctrine property it would be found by it:\nIf an {id} parameter is present in the route, find object by primary key.\nIf an option 'id' is configured and matches route parameters, find object by primary key.\nIf the previous rules do not apply, attempt to find one entity by matching route parameters to entity fields. You can control this process by configuring exclude parameters or a attribute to field name mapping.\nThe ParamConverter is only needed when the names don't map I think, in which case he can change the route.\n. @Nek In both your examples, you are using willReturn incorrectly rather than shouldReturn... is this what is causing the problem?\n. It depends what you're doing inside __construct\nThe issue you're finding is that you're passing a non-wrapped array(), which contains wrapped objects. When you then iterate over the array (as I'm guessing you do) the foreach doesn't auto unwrap the array members.\nThis is discussed in #179 so I'm going to close this issue - I don't think it's related to beconstructedThrough specifically\n. Aaaah you are correct, my bad\n. There's probably an argument for using a third-party container that handles dependencies better, but this is a hard one using any container.\nIn general you can resolve a circular dependency using either setter injection or property injection, as that can be handled after all the objects have been instantiated.\n. Your first suggestion of allowing access to the container is probably the easiest way, but it's probably going to bite you. You could also consider injecting some sort of proxy that can access the container instead,\n. You may be able to resolve this by changing the sequence in which things are explicitly set up in the Application.\nTry moving these lines https://github.com/phpspec/phpspec/blob/develop/src/PhpSpec/Console/Application.php#L166-L169 to somewhere later in the config bootstrap.\n. ... somewhere outside of the container usage, that is.\n. @shanethehat remind me, did this get anywhere?\n. I wanted this too when doing #483 but ended up refactoring around it.\n@richardmiller suggested having more than one dispatcher could help\n. This looks sensible, there are similar other places in Application where I can see that this would be useful.\nMy only worry is whether there exist other extensions that will have breaks because of this?\n. Can you please open a new PR against Master? We have removed the develop branch\n. Thanks for the catch!\n. Can you explain why not?\n. Sounds fair - we're actually removing develop soon (maybe this weekend)\n. This was solving a circular dependency issue I believe\n. IIRC projects that depended on phpspec-matchers directly were having issues?\n. I honestly am not sure, I'm not a composer expert. When I get a chance I'll merge your change and then check the health of one of the other projects.\nThanks for the improvements!\n. Can you please open a new PR against Master? We have removed the develop branch\n. Wrong way around, idiot\n. This looks good - supporting spec and maybe a scenario in the features would be great\n. Can you please open a new PR against Master? We have removed the develop branch\n. :+1: Thanks\n. For the feature, it should be enough to create a class with a static getInstance with a type hint (maybe for DateTime or something builtin), then a scenario that uses BeConstructedThrough.\n. Can you rebase with master, so we can see the build passing?\n. Thanks for reporting this.\nThe most straightforward fix will be to change the exception type, as there don't seem to be any other dependencies on symfony/filesystem\n. Can you please rebase to check the tests all pass?\n. Everything broke for everyone, when Travis updated its PHP versions - we had a bit of an issue fixing it!\n. Your history / the diff does not look right.\n. My inclination is to merge it and let anyone with an incompatible Extension yell at us before 2.1\n. This looks great @shrikeh, can you please rebase so the build can pass?\nDid you have an off-github conversation with @MarcelloDuarte about whether he's willing to move the phpspec.net to point to readthedocs if we get it styled up nicely?\n. Thanks @MarcelloDuarte. \nIn that case @shrikeh can you rebase/cherry-pick/whatever so we can check the build passes?\n. Argh you're right - my bad. I caught this on some other PRs.\nWhat do we need to do to fix?\n. This is a feature (the creation of the folders if they don't exist). How would you propose we detect if you've typed the name of the folder or not?\n. There are some merge conflicts, I think because some scenarios were added to deal with PSR4 - can you please resolve them?\nIt would also be good to add a scenario like the following:\n```\n  Scenario: Generating a class with PSR0 must not convert classname underscores within the namespace\nGiven I have started describing the \"CodeGeneration/Class_Example2/Text_Markdown\" class\nWhen I run phpspec and answer \"y\" when asked if I want to generate the code\nThen a new class should be generated in the \"src/CodeGeneration/Class_Example2/Text/Markdown.php\":\n  \"\"\"\n  <?php\nnamespace CodeGeneration\\Class_Example2;\nclass Text_Markdown\n  {\n  }\n\"\"\"\n```\n. History does not look right here...\n. @xel1045 I'm nervous about this history - can you take a look?\n. @docteurklein I think that's what PHPUnit's test loader does\n. @tomphp Actually I think phpspec complains about Specs with no Examples (which is why we have the it_is_initialisable)\n. That's true yes. Some users have 'other stuff' mixed in with their specs so we can't assume every file is a Spec file.\n. @tomphp The feature as you have in the diff seems fine I guess. I'm trying to think of cases where there'd be a file called *Spec.php that doesn't contain a spec ;-)\n. Yes @tomphp's approach as it stands is the best - a spec could include more objects, we can't penalise that\n. We could treat 'mis-named' specs as a Skipped at runtime, perhaps?\n. I suspect it'll involve removing this class_exists check entirely, moving it to much later in the process just before we run the Spec. Then at Spec run-time we can check if the class exists and return a Skipped result with a sensible error message?\n. Whether it should be a Skip or an Error is something we can debate later ;-)\n. Tom, you may be overcomplicating things with these many variations...\nFor me there are two scenarios:\n1) We locate a file called FooSpec.php and at the point we try to execute the spec, FooSpec does not exist as a class - this should be a skip/failure with an appropriate message ('class FooSpec was not declared in FooSpec.php').\n2) Everything works\nI think that covers all your scenarios above?\n. Tom, you can still return a SpecNode without the class existing I suspect? We just have to turn them into failures when they're run\n. I guess I'm in favour of the overall approach.\nI have some worries about how it'll interact with extensions, specifically the breaking changes to ResourceInterface.\n. Does option 1 work in the case of PSR0 (with underscores)?\n. @tomphp , can you come back with a proposal after the 2.1 release please?\nI'm a bit said because it's your first PR - we really appreciate the effort!\n. @xel1045 I've moved your changes here, will merge this version.\n. Don't worry about it, history on this branch is fine. I'm waiting for the HHVM breakage to be fixed and then I'll merge this PR.\nThanks for your efforts - I have wanted this feature for a long time!\n. I don't like WIP PRs - I'll squash+reopen when it's passing on my repo's travis (soon!)\n. @stof does this look ok? My confidence has taken a beating today :-)\n. It was failing earlier today, which makes me think it's too unstable to have as a required pass. If it is stable for a long period we can re-include but I wouldn't want to, for instance, deny a PR because nightly is failing. \n. @stof build was failing on Behat XML service config parsing\n. It has been a little unstable recently \u2013 this morning it failed, next day was passing.\nI'd rather leave it as an optional build target until it has stayed stable for a longer period\n. I'm not sure, will confer with @marcelloduarte\nIt seems to me that having a nightly build as a target is going to open us up to regular intermittent failures \n. @whatthejeff Having this in the parity suites would be amazing - the issue I have right now is that when it breaks there's literally nothing we can do about the breakage aside from file bugs against HHVM...\nI think we have a responsibility to work under stable HHVM versions, but they're goig to break things overnight as long as it's not a part of their test suite.\n. OK I'm convinced, given @whatthejeff's cast iron guarantee that he will fix any issues ;-)\n. I like the idea; I'm not convinced by the private constructor though. \nAlso the build is failing\n. @thecrimpmaster The bulk of the PR seems a no-brainer to merge, the conversation is all about making the constructor private. If you want you can split these changes into two PRs and I'll merge the first, then we can continue to talk about handling constructor privacy.\n. Well you don't have to; I was just saying that bit is non-controversial so if you want to split it feel free.\n. I can see pros and cons for the private constructor, like I'm definitely +1 for the method generation part and willing to discuss the private constructor in a different PR\n. Also note the changes in where we're keeping code generation templates.\n. Looks good @thecrimpmaster, thanks!\nThere are some line ending things to look at, and you should perhaps consider the case where there is an existing constructor with some parameters.\nI've also added a note about making this work with #483 \n. @mathiasverraes the private constructor thing is deferred rather than removed - I asked Jason to split it because there was ongoing conversation and I thought it would be good to have the basic 'generate static method if not exists' functionality in sooner.\n. In this case there's no point throwing arguments at a non-existent constructor. Author might want to do:\nphp\n$user = new User();\n$user->argument1 = $argument1\n. Aside from minor quibbles on whitespace this looks great to me.\n. This is great @tomphp, could you add something in the docs about these options please?\n. @tomphp Sorry, I mean changes to the /docs folder inside this repo.\nDocumentation has moved inside the main repo so that we can ask for docs alongside features.\n. I think I'm :+1: on this now.\n@stof are you happy your comments have all been addressed?\n. Thanks @tomphp\n. @stof good catch, I've linked Scrutinizer results from the index.rst to find other issues like this.\n. I looked more at this a few days ago, and the abstraction of the interface is very leaky - frankly the interface isn't doing much of a job of decoupling from the implementation. A look at askAndValidate shows that.\nThere's some work I'll try and do here around clarifying the integration points between Symfony infrastructure and phpspec.\n. OK, 2-part strategy:\n1. Add the missing methods to the interface + change the mocking\n2. Evaluate the interface design and do some renaming to decouple more from Console\nWill try and do this soon.\n. There are no longer any interface conflicts that I can see, so closing.\n. That's a good point. The best approach may be to segregate the IO interface more.\n. @stof a good idea if someone has the time. \nI agree Behat is stable enough and we are jr using any extensions so it should not be a major task. I'll attempt myself if I have time. \nI would also like to remove the dependency on phpspec-expects \n. @whatthejeff @stof FYI I have a branch that switches to Behat3, but it still fails with the same problem in a different XML-related spec that tests jUnit output\n. Just merged; rebasing. Will open a new PR for that. Thanks for the fix ;-)\n. Good work @whatthejeff \n. @jakzal + @shrikeh  - what needs to happen to make this change impact readthedocs.org?\n. I'm going to close this and maybe reopen when I've done more work around the IO interfacing\n. @stof I've resubmitted 2 commits, both add some value I think\n. OK so github doesn't like reopening a PR when you've deleted the branch and made one with the same name...\n. @thecrimpmaster Is this an environment variable you have set?\n. I can't reproduce this, so am closing. @thecrimpmaster please re-open if it's not an issue in your local config\n. No. Composer.lock is present in the codebase.\n. Sigh ok, I am dumb\n. This seems to be the right thing to do, cheers @whatthejeff \n. @richardmiller can you resolve the merge conflicts with your other PR please?\n. I don't think we want to discourage the use of matchers...\nIn both of these instances, a better way to indicate failure is to throw an exception.\n. Sorry @Warbo, I'm closing this\n1. Return type polarity is the wrong way around\n2. Exceptions already achieve this\n3. It discourages matchers, which we wouldn't want to do\n. Looks great thanks Richard.\n. This should be possible via suite configuration:\nhttps://github.com/phpspec/phpspec/blob/master/docs/cookbook/configuration.rst\n. PSR-4 requires you use the psr4-prefix key in your configuration\n. Looks good, this makes a lot more sense when using something like the jUnit formatter\n. Makes sense to me :+1:\n. Keep it up with these no-brainer PRs, @whatthejeff. You're making me feel super-productive pushing the merge button each time ;-)\n. It seems silly that we have to set it here at all.\nCan we reuse the value from the executable somehow? E.g. global constant, have it configured in the container, have a default value on the Application constructor?\n. Maybe default inside Application would work better, unless there's a reason to keep it externally?\nphp\npublic function __construct($version = self::VERSION) {\n    parent::__construct($version);\n}\n. We could override Application::getVersion() I guess\n. @whatthejeff This is enough for now\n. Well, it has no practical effect so it might as well be the 'right' version I guess.\n. I'm concerned the score is too low!\n. Maybe my scale is off! I consider it pretty low yeah. I remember @MarcelloDuarte having some reservations about exposing the quality metrics, but he's on vacation so not sure if he's following github notifications. Will add it if he's cool with it (I'm sure @everzet is)\n. @stof Added the score in, will wait on @MarcelloDuarte before merge\n. Screw it I'll merge this + it'll drive us to improve.\n. It feels like this could do with splitting out the suites stuff.\ne.g. explain all the different settings, give an example, then introduce the concept of suites and talk about the logic the tool uses to select which spec folder to use (for example).\nMight also be worth documenting #384 as expected behaviour?\n. There's also #265...\nIt would be good if #384 was fixed fixed, but in the interim documenting the behaviour makes sense.\nAbout splitting it up, I guess my core issue was that there's no example of a suite-less config.\n. That's not really what I meant but I'm not sure now what I did mean... ;-P\n. OK having re-read it, ignore my previous comments.\nAs someone who apparently understands this part of the config, any light you could shed on the linked issues would be appreciated :-)\nIf some can be solved via documentation that'd be great\n. Thanks for all the recent documentation work, Richard. It's really useful.\n. @stof if you're happy can you merge? I've been self-merging too much lately; feels like I'm taking advantage of Marcello's vacation ;-)\n. Thanks!\n. I think the vague plan is to move to readthedocs, the same way behat has.\nI'd like to point docs.readthedocs.org to it, and get the styling consistent with the phpspec site... I have no control of either the domain or the hosting though so it's something I guess @jakzal can help with?\n. I think Resources is meant to be 'other useful resources' but it's not particularly clear.\n. So:\n@jakzal has access to the hosting\n@shrikeh set up the readthedocs account and gave access to me and @jakzal, and will probably give access to anyone else appropriate if asked\n@MarcelloDuarte controls the domain\nMy personal reference is to move to readthedocs and to do so by the time we tag 2.1. However this is a big decision and I'd like Marcello's opinion.\n. Er you know what I mean ;-)\nI don't think it's urgent to move there pre-2.1 but I think that's the last point we could do the change.\nI was kinda hoping someone who'd done this before could take care of the styling ;-)\n. That is indeed the bottleneck :-) \n. phpspec.readthedocs.org is now styled appropriately thanks to @jakzal.\nThe styling is showing up the lack of overall structure of the docs, they need some love before we switch I think.\n. Now that the front page of readthedocs looks like phpspec.net we could just move the whole domain over and MD doesn't have to host the site any more.\n. Transfer is still pending, will do as soon as I get a notification it's complete.\n. Very nice\nIs there a way to test this? Or just merge and check the build?\n. Looks pretty good!\nI think having index.rst on there is probably not working, and it seems like the headings could be better... A bit of work and we'll have it in a good shape though!\n. You're quick, @stof! I was just looking at the new issues this introduced ;-)\n. If it goes green and I like it I hit merge ;-)\n. This is all good stuff by the way :+1: \n. Perhaps? There's considerable overlap between them.\n. Plus there are some conditionals/loops in there that could be refactored for clarity.\n. ... could just rename it PSRLocator ;-)\n. @cordoval did you get a chance?\n. @stof this looks great, anything more to add?\nThere look like some minor issues have come to light as a result of these changes.\n. OK, if you have more changes later open a new PR ;-)\n. Because we're auto generating the code, we are going to assume it's PSR0 unless told otherwise.\nIf that line wasn't there we'd have a lot more support questions\n. For some reason scrutiniser isn't parsing 'object|callable' properly\n. I was being dumb when I did this and forgot callable isn't a subset of object :-/\n. Maybe 'mixed' is appropriate here?\n. Hm I guess I'll revert this change.\n. Reverted as part of #466 \n. :+1: Makes perfect sense (and makes it easier to use a different container later).\n. Haha you make me sound like a scrutinizer obsessive... ok maybe that's true.\n. Fixed typehint on get, fixed code for setShared to support non-object callbacks\n. @stof any other comments?\n. This does improve legibility.\nIt feels like this could be replaced by polymorphism, e.g. a factory that returns objects that know how to present themselves.\n. Yes probably too big a change\n. Is there a way to remove -vv and -vvv from the supported options?\n. Yeah I appreciate we're going to use it in future (hopefully), if there was a simple way to remove the options I'd be in favour of removal. If there isn't, fair enough.\n. Aaah, I understand.\n. Srutinizer agrees :-)\n. @stof I think I've addressed all the comments, in the latest commit I reduced the number of constructors quite a bit.\n. Scrutinizer's having problems today but travis is passing. I don't appear to have permission to restart the build.\n. Can you show the relevant section of composer.json please? Is it in require, or require-dev?\n. The problem is caused by the array, and the fact you're not passing the Double directly, you're passing an array containing a Double - this breaks phpspec/prophecy's unwrapping mechanism.\nCan you show what happens inside setChildren() / match()?\nThis is probably related to #179 \n. Ah ok ignore my original comment!\nYou've an error on your use statement for Knp\\Menu\\FactoryInterface, this is breaking the type hint in your example and therefore Prophecy is not doubling the interface correctly.\n. It should, yes.\nIf we were calling a method on the array, the unwrapping would be handled. because you're foreach-ing the array, there isn't an easy integration point for us to hook into,\n. (This is basically #179 so I've closed)\n. @stof Aha!\n. Sure, will open new PR\n. @stof Actually these scenarios are already in the feature, which is why they aren't added in this diff\n. For debug, does this line work?\n$useRepo->create(Argument::any())->shouldBeCalled()->willReturn($userModel);\n. Because you have called the UserAuthRepository $user in your let() but $useRepo in your example, PhpSpec is generating two separate Doubles.\nTherefore the stubbing you're doing in the example has no effect as it's not being applied to the same Double that's provided to the object's constructor.\nIf you want to have the same instance, use the same argument name.\n. No problem ;-)\n. Makes sense to me\n. I've kinda conformed with the other listeners here, but I have a refactor of that whole mechanism on my to-do list, the objects can likely be decoupled considerably.\n. That's fair, I'll default it to off and add a flag + a config file option for people like me who want it always-on\n. @MarcelloDuarte Added the --fake flag defaulted to off + config file option as discussed\n. Yay! Thanks.\n. Do you have any custom suites defined in phpspec.yml?\n. @varas in which folder are you running phpspec, and what does the command look like?\nDoes getcwd() . /vendor/autoload.php in the lines @stof linked to point to an autoload file for your project?\n. I just tried this and it worked for me as long as I had a vendor/autoload.php\n. I guess there's no way to resolve this for now, aside from making vendor/autoload.php yourself.\nSomething like #284 would be useful in future\n. Discussed offline with @MarcelloDuarte, he's roughly in favour of it defaulting to on with flags/config to turn it off, which is my preference. More opinions would be welcome.\n. @stof Any chance you could give some Windows feedback, when you have a chance? I don't know anyone else with that OS :-(\n. @stof pcntl_exec, the new process will return whatever exit code the final run returns, passthru is probably broken so I will have to do an exit() or similar.\nI'll test in both cases - good catches,\n. This errors on windows with \"bin/phpspec` is not recognised as an external or internal command\"\n. The issue is that when phpspec is run without using the shebang , i.e. php bin/phpspec run, $argv does not contain 'php'. \nThis means the whole current approach won't work :-/\n. There is a component in symfony/process that locates the PHP executable so I will experiment with that to prepend the PHP path to the argv\n. It never is, apparently. http://php.net/manual/en/reserved.variables.argv.php\n\"Note: The first argument $argv[0] is always the name that was used to run the script.\"\n. Which was a surprise to me but means prefixing with PHP should always be ok. \n. OK this now prefixes the command with the path to the PHP executable - needs to be tested on Windows.\n. Tested on Windows and it worked as expected. I'm basically happy with it now.\n. :beers: Thanks @MarcelloDuarte!\n. Ah, rc4 is coming in a few days according to the Travis blog. Tempted to make it an allowed failure until then...\n. @richardmiller Can you please resolve the merge issue?\n. Is it worth noting how Spies/Stubs mix? (i.e. methods you spy on may have to be stubbed to avoid unexpected method call errors)\n. @stof I've had this problem and thought it was expected behaviour, so I'll try and reproduce / raise an issue.\n. @stof see https://github.com/phpspec/prophecy/issues/120\n. :+1:\n. The code analysing the method is here: https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Loader/ResourceLoader.php#L119\nWhen writing #483 I introduced a different way to do this:\nhttps://github.com/ciaranmcnulty/phpspec/blob/generate-return-constant/src/PhpSpec/Util/MethodAnalyser.php\nIt might be worth extracting that and applying it to this case, I believe it would work in this instance.\nIf I get time I'll raise a PR\n. Is there a benefit over using addEngine?\n. I'm personally :-1: on adding this when there's already a different mechanism, it just bloats the API.\nIt's not a super-strong opinion though so I can be outvoted ;-)\n. I'll defer to Jakub's expertise ;-)\n. There is a lot of stuff here!\n. Thanks @stof \n. @stof Yep, installing locally to see what it returns for getFilename.\n. @whatthejeff oho, cool! I've had Homebrew churning away for 20 mins or so now making it so I can be more prepared in the future ;-)\n. @whatthejeff Do you know whether the protocol for these paths is documented anywhere? I need some sort of pattern I can match them to. '//' for 3.0.1 is not too helpful ;-)\n. Awesome, thanks. See https://github.com/facebook/hhvm/issues/3631\n. HHVM now passing, can't see anything else that needs addressing.\n. Numbers on right:\n\n. Improved the rendering of the bar (less flicker), refactored for clarity, then added some basic spec coverage.\nI'm not going to do much more to this now.\n. Argh, just found an edge case. please don't merge\n. OK, resolved.\n. Thanks @MarcelloDuarte! :wine_glass: :beer: \n. Is there anything left to be done on that? I guess Windows support, but this won't actually break on Windows.\n. I can't see any BC issue\n. Hm, when has this been added? It seems sensible but I guess if people are keeping non-spec files in the spec folder it'll be a serious problem for them.\n. Oh I didn't read that properly - if the Locator prioritisation is already sorting the Resources you can rely on that, as long as you have some test coverage.\n. Does your project use Composer?\n. This is because there is no autoloader for the classes  - PhpSpec will do class_exists() and get a FALSE result. We look for /vendor/autoload.php ion the current working directory and include that if present, which makes composer projects ok in the scenario you've outlined.\nFor now you could drop a file at that location in your project that registers your project autoloader, if and when #284 is merged that would provide you with a nicer route for the same thing.\n. You can also write a composer.json, specify the auto loading with no dependencies, and do composer install to dump the autoloader\n. To clarify a bit more:\nspec is not autoloaded, what happens is that we iterate over the whole folder, find all the *Spec.php files, and assume they're specifications. You can change the folder we search inside via config.\nsrc is not autoloaded by phpspec either, but we normally would use composer to set up an autoloader for that folder. All phpspec knows is what paths inside src it should write out generated files, and again that can be configured.\n. Hah true, I'll change it - I noticed yesterday when using it in CMD.exe in training so it was in my mind as Windows.\n. I would like us to tag 2.1RC1 very soon\n. This is now tagged.\n. Hi @aRn0D \nshouldReturn internally uses === to compare the two values, and floats are very difficult to compares. It's likely your floats are not exactly the same.\nI would suggest you can use an inline matcher of your own:\nhttp://phpspec.readthedocs.org/en/latest/cookbook/matchers.html#inline-matcher\nInside your matcher you could round them to some known precision before comparison.\n. Agreed\n. Thanks for all the fixes @cordoval. I've used my native speaker superpowers to add some opinions ;-)\n. Thanks, @cordoval \n. Prophecy will double stdClass when the type hint cannot be resolved.\nWithout seeing your actual code, this is likely to be caused by either a typo or a missing use statement, can you check that UserInterface is in fact pointing to a real class/interface?\n. There are 2 separate changes:\n1. Adding beConstructedWith automatically - I am :-1:. \n2. Switching to using ::class for the default generated example - I am :+1: but it has to be configurable for people supporting 5.3 (which includes the internal development)\n. Oh! Very good point that I had not considered\n. It might be worth re-addressing the default constructed example, i always delete it so I'm not sure how much value it adds.\n. The ClassNotFoundException' is thrown before shouldHaveType is even evaluated, internally there's some sort of class_exists check.\nIf you use the symbol FQCN::class in the code I'd expect a runtime error before the spec executes, but it's worth checking.\n. @stof @cordoval So I actually tried this and... ::class does not cause a fatal FYI\n. I blindly believe anything @stof says without trying for myself. It's normally best policy.\n. I'm still going to in future ;-) He is about 99% success rate\n. I'm not sure I understand - you want to keep your code in /vendor?\n. I don't see a reason to switch just to 'write specs' for code that's already working. Specs are for new stuff.\nIf we look at a new architecture for 3.0 then Behat\\TestWork is probably top of the list.\n. the circular dependency needs to go away :-/\n. It looks like the spec is telling you that PHP is not treating your finally() correctly... this is correct behaviour - if finally is broken then your code isn't doing what you think it does. I'm not sure it's something we should fix.\n. It's possible expectations are not checked in the event of an Exception being raised (i.e. finally is running but the double is not being checked)\n. Unfortunately PhpStorm is not PhpSpec-aware, so we will get a lot of 'unexpected method' stuff.\nThis example does just seem to be because of the @method annotation so it should be a simple fix.\n. This is in fact already fixed in 2.1-RC1 so will be resolved when the next stable version is released.\n. I can only see this being useful in a test case where you don't want to commit to which method causes the exception.\n@marco-fiset do you have a use case for that?\n. In this case I would use \nphp\n->during('__set', ['name', 'Marco'])\n. @marco-fiset If you want that flexibility then you can use magic methods, but that flexibility makes it very hard to formally describe the behaviour (e.g. in a spec).\n. In the past we've been unable to do this because of a dependency on composer, maybe we are now in a position to do so with the --bootstrap option?\n. We'll have a .phar for 2.1-RC2 when it is tagged, and onwards for future versions.\n. I didn't merge because this was failing, but kicked Travis and it seems ok now.\nLooks good to me?\n. It does seem odd that they return the raw value. I can't really think of a use case.\n. @piteer1 - I'm not sure why you're asserting anything about that Double. Checking its status code is not needed, because it's the Double you inject. It's slightly tautological to try and compare like that.\nAll you are really specifying here is that the Response returned from the templating is then returned by the controller:\nphp\n$this->indexAction($request)->shouldReturn($response->getWrappedObject());\n. That said, it's worth raising an issue in phpspec/prophecy\n. This is a deliberate choice, the simple solution is:\n``` php\nfunction it_knows_when_it_is_a_post()\n{\n    $this->beConstructedWith(\"POST\");\n    $this->getHttp()->shouldReturn(\"post\");\n}\nfunction it_knows_when_it_is_a_get()\n{\n   $this->beConstructedWith(\"Get\");\n   $this->getHttp()->shouldReturn(\"get\");\n}\n```\nThis also gives you an opportunity to title the two different examples to explain what differentiates them. Alternatively, you can consider whether both are needed.\n. I don't like that this removes the bin folder, we use that in a lot of examples and an alias is a lot clunkier\n. I'm happier with the existing instructions \n. Can you explain the use case for this please?\n. @stof I wanted to know if it fixed a bug @alreece45 found (and might be prioiritised for next release), or if it's just something they spotted and thought could be better\n. Seems like a good idea, most other flags have a config option :+1: \n. Fixed in 2.1-RC2\n. Can you give an example of configurations this fixes? If you could do that in the form of behat scenarios that would be extra amazing.\n. So this breaks BC for projects using Symfony components <= 2.2 right?\nI think that's a sensible choice, and I guess phpspec 2.1 is a good time to do that. Is there any good argument against?\n. Offline @MarcelloDuarte was in favour, I think it makes sense\n. This looks good. I guess my question is: does it work?\nCan you please add some feature coverage for the various PSR-4 scenarios?\n. Behat build failing\n. I think having build_phar in the bin folder will add it to people's bin dir when they install phpspec via composer, right?\n. The box file looks great though - maybe we don't need the script?\n. Works for me, but when I build, the file is called phpspec-@git-version@.phar - should that be being replaced somehow?\n. With the .phar not running inside phpspec - would this be fixed with a switch to require_once in bin/phpspec?\n. Ignore last comment ;-)\nIf you add a composer install --dev step at the end, it resets the autoloader UID and lets you use the phar locally, to avoid that confusion.\nOr, is there some way to move vendor to, say, vendor-backup and exclude it from the phar, then move it back in place afterwards?\n. That's fair - did you see my comment about the filename? It looks as if some magic is supposed to happen?\n. When I type make the file generated is called phpspec-@git-version@.phar - this is why I ask.\n. I installed box fresh via brew to try it out, the version I am running is:\nBox version 2.4.0 build 48d0e8175a9ec24fc210942067cb63c2fa260c4b\nis there some configuration that needs to be enabled to make this work?\n. Very strange. Maybe you should add that to the require-dev?\n. Well, if you and I are getting inconsistent behaviour...\n. Ah, thanks @stof \n. The only reason I've not merged this is it doesn't work for me :/\n. I guess we have a question now of where the .phar should go.\n. Oh ok, so github host? Excellent.\n. I made a PHAR for 2.1-RC2, have a look when you are finished with Jeopardy :-)\n. This is in line with other projects\n. I presume this is WIP?\n. @richardmiller are you closing this?\n. I'm unsure how semver applies to extensions, TBH. PhpSpec doesn't really make strong guarantees for extensions (YET)\n. I agree it's a problem that needs to be solved, what makes it difficult is that at the moment every method on every object is considered an extension point.\nThis combined with the fact that phpspec internals are pretty messy in some areas makes it difficult to proceed.\nPerhaps another thread to discuss? In the meantime @richardmiller, any chance you can put a BC method in marked as deprecated?\n. See https://github.com/phpspec/phpspec/issues/459 - the PSR0 locator is actually a PSR0+4 Locator\n. Renaming may break Extensions if they extend PSR0Locator so we need to be careful.\n. @henrikbjorn Probably not, PSR-4 seems hard\n@MarcoDeBortoli can maybe share his config?\n. Maybe the message can just be nicer?\nFilesCollection\n  10  ! has one element\n        haveCount([array:1]) can not be applied to a null value.\n. We call supports() on the matcher and get a boolean back, so it would be tricky to get more detail about what is actually needed - not impossible though.\n. I await your PR ;-)\n. Do you really mean 553?\n. @padraic I've made a PR to show you what went wrong. Any help with documentation would be appreciated.\n. Had a thought about making this simpler without suites #613 \n. This would be great, it's tricky with the current infrastructure but would be trivial if we migrated to Behat\\TestWork\n. Specs deliberately don't follow PSR2 - the public visibility declaration would just add visual noise.\nPSR-2 is for code.\n. (if you want this in your own specs, put a template in ~/.phpspec\n. Docs here: http://phpspec.readthedocs.org/en/latest/cookbook/templates.html\n. @MarcelloDuarte and @everzet I think this is something your input would be really helpful on\nI vote for 3 + a programme of 'stabilisation' of APIs used by extensions, during the 2.2 release.\nAs an aside, a move to TestWork for 3.0 would put us in a clearer position for versioning, but it depends if that is likely before a few more minor releases of 2.x\n. @stof @richardmiller @jakzal  your opinions would be most welcome.\n. @cakper I guess the issue is that because we have no @api or @deprecated tagging, it would mean currently extension writers can't rely on anything we do which is a problem.\nOn the other hand supporting everything is unmaintainable.\nThere is a 'third way' which is to just break BC when we want to, and remember to bump the version number when we do. The downside of that approach would be burning through version numbers and giving the impression (correctly?) that we are not respectful of BC ;-)\n. Well, the question is what do we tag? ;-)\nI'm leaning towards the new few 2.x releases doing a lot of refactoring and adding tags as we refactor, but keeping BC (@richardmiller's recent #575 is I think a good example). This will make refactoring slower but will leave us in the position of being able to drop deprecated stuff for 3.0.\nI've partly come to this conclusion from @stof rightly fighting for BC, and from some conversations with @richardmiller ;-)\nThis is assuming nobody is planning on dropping a complete rewrite in that would disrupt things. (hint hint @everzet this would be a good time to mention if you have something brewing) \nThings I think need cleaning up (ignoring new features) are:\n- Extensions (see #575)\n- Formatters (currently they are full event listeners, I'd prefer a more specific interface for specific stuff)\n- Code generation (external interface is ok but there is duplication between generators / generators have lots of responsibilities, and this is commonly overridden in extensions in an unclear way)\n- Locators (again, overriding in extensions has shown that this could have cleaner extension points)\n@shanethehat and @jamescowie, you're involved in a fairly large extension, are there any particular pain points you'd add?\nNote there are interfaces inside Testwork that can be used for most of these. \nWe could prioritise these (and other areas of concern) and commit to fixing one per minor version, perhaps, keeping BC each time (so going slightly slower). 3.0 would be a case of dropping BC.\nAny comments?\n. @stof we have crossed posts, I largely agree, the reason I've pushed back is that the project has never actually said we support semver ;-)\n. That's a good idea, will do.\n. There are >10 but I suspect some are old / no longer used. There certainly isn't a huge ecosystem.\nWe could adopt a 'tagged API only' policy and encourage extension writers to PR @api annotations onto the methods they are using. This would be a good way to encourage discussion about what is and is not supported for future.\n@shanethehat and @jamescowie probably have a good perspective on how this would go down with extension developers.\n. i guess now I'm lead maintainer I can be more opinionated?\nI don't think we can commit to supporting semver, which isn't necessarily an issue as the project never actually stated it was using that scheme.\nHowever, as @everzet put it in a recent conversation, the current policy is 'don't be an asshole to extension writers'.\nI will write a versioning policy, the bullet points are:\n- It's basically semver\n- We won't break user specs\n- We won't break internal APIs between patch versions\n- BUT we may break internal APIs between minor versions if after discussion there is no sensible way to maintain compatibility, we commit to documenting the changes w/ migration suggestions, and we survey known extensions to assess impact.\nThis has some implications for extensions' composer dependencies, that we should proactively help with.\nIt should be a target that PhpSpec 3.0+ will use semver, and if we get to a point where we can do a 2.x LTS release then we will adopt semver from then onwards.\n. I wrote this up in the Wiki:\nhttps://github.com/phpspec/phpspec/wiki\n. Thanks for the catch, @hanneskaeufler!\n. This seems to have broken some of the Faking functionality?\n. Great work, thank you.\n. Miller gave this a +1 verbally, honest\n. @stof I implemented your naming suggestion - thanks, it's much clearer.\nI'm not sure about the other optimisation. True it would be faster, but would complicate the code, so I'd only want to do it if we identify a real win. I'll maybe do some more profiling of this area, but there are doubtless other bottlenecks in there.\n. I think there's more to do in general cleanup - I'd like to get terminal width detection working too (if that's possible)\n. I'll add some width detection to this, and probably normalise some other spacing.\nIn general there is a need for a coarser interface to IO and a cleanup of where IOInterface is used. Too many components make multiple writeln() and isDecorated() calls, which should be pushed into the IO component.\n. @stof I added width detection as suggested, not everything is using it yet though.\n. I've relabelled this WIP, there is clearly more to do. When I get time I will come up with a testing strategy + go through the various other prompts etc. fixing them to respect the terminal width and wrap correctly.\n. I've made some fixes and think this is ready for re-reviewing\n. I want to do a 2.1.1 release, should this be in?\n. @everzet Classes like Behat\\Testwork\\Output\\Node\\EventListener\\Flow\\FireOnlyIfFormatterParameterListenercan get pretty long\n. Any more comments?\n. @richardmiller I've assumed there's no point testing on SF2 2.4 and 2.5 if we're covering 2.3 and 2.6 - your opinion on that would be welcome.\n. I guess I meant in practical terms whether it's cost-effective to test against 2.5 (and also if there are any interesting minor versions that we should make sure we check against)\n. I heard something about that - once Travis has the right composer version it sounds like a good idea\n. I'm going to remove the travis matrix changes so we can focus on any potential issues from changing required symfony versions\n. IF you were previously using RC1, the PSR4 support was incomplete - your specs folder will not follow PSR-4.\nSince RC2, the layout inside the specs folder should mirror exactly the layout inside the src folder - can you confirm what your folder structure looks like?\nI think you'll have something like spec/Indigo/Http/ - if so move everything up into the main spec folder.\nPlease let us know if this solves it! It's annoying but RC1 was basically doing the wrong thing and RC2 for new users does the 'right thing', and we're not committed to maintaining BC with broken release candidates.\n. I found your repo and that does seem to be the issue, just moving the specs will fix it.\nSee https://github.com/indigophp/http-adapter/pull/2\n. Ah bugger I guess this should have been in RC2 \n. Am I right in thinking this isn't called from anywhere internally, and is just for theoretical Extension BC?\nIf so I will merge without the need for an RC3?\n. PhpSpec doesn't actually construct the class until you do something with it (during__Construct is a special case).\nJust write some other tests and they'll cover the cases where the constructor doesn't throw the exception.\n. The class has no other methods? That does not sound very useful.\nYour syntax is wrong, you would do something like:\n$this->beConstructedWith('foo');\n$this->doSomething()->willReturn('bar')\n. I honestly don't see the use case of an object that only has a constructor, I'm not sure there's a way around it.\nFor your information, the reason we don't instantiate at the point of beConstructedWith is to allow:\n``` php\nfunction let()\n{\n    $this->beConstructedWith('Foo');\n}\nfunction it_does_it_differently_for_bar()\n{\n    $this->beConstructedWith('Bar');\n   // ... test different behaviour\n}\n```\n. You are describing a situation where code exists already and you want to write a failing test for it - this is not TDD.\nStart with no constructor, write the following:\n$this->shouldThrow('Exception')->duringInstantiation();\nThis will fail. Make it green by adding the constructor that throws.\n. I've not reviewed, but I'm in favour of this change :+1:\nI'm right in thinking existing extensions will still be supported?\nCan this be combined with #189 ?\n. Because Richard has kept BC, I like this approach of slowly integrating parts of Testwork so that 3.0 can more be a 'clear out the old stuff' release.\nAlso package splits are not PR-able... someone just has to convince @everzet :-)\n. @richardmiller I'd like to see this come in, if you can come back to it?\nTo split out TestWork I suggest we fork the subtree into phpspec/testwork then PR back anything we need to change to make it work better for our needs (e.g. supporting multiple commands). @everzet and @stof what are your feelings about that?\nThe test for this change is:\n- Does it make life easier for future Extension writers?\n- Are we sure existing extensions won't break?\n- Is supporting both containers maintainable?\n- Does it bring us closer to a shared platform (this is not a primary concern but it's a valid one)\n. Splitting it into two steps might be clearer\n. @richardmiller as this has desynced so much (and is WIP) I'm going to close for now, we can hopefully collaborate on making it work still\n. What build process does it break?\nDeprecation is bad, but I don't see this as urgent enough to block release of 2.1.\n. Just the timing. If no bugs are reported for RC2 it will become the release\nThis would be low-risk to merge but I'd still worry about edge cases\nThere are also several other deprecated symfony components in use, I'd like to see a concerted effort to migrate to new APIs but that can only happen if we bump our Symfony dependency version \n. @stof I think that's a good idea - my natural workflow is to create interfaces for collaborators, then sometimes turn them into classes when I focus more on what the collaborator should do. \nHaving added methods would help that.\nIf people just hit enter to everything it is a problem, especially as we add more and more functionality like this - there is a danger people just hit 'Y' to all questions and typos sneak through :-/\n. Is there anything more I should do to this?\n. @stof re your last comment, I might take a look at doing method generation for interfaces only. I'm 99% sure it's a good idea for interfaces and on the fence for class collaborators.\n. Having used this a bit, it's very easy to miss a use and get prompted to generate spec\\Foo. I'll look at adding some filtering against the current spec_prefixes to trim this.\n. @MarcelloDuarte suggested when a user subsequently tries to describe an Interface we offer to convert it to a class for them.\n. @gnugat we're only offering to generate interfaces, to avoid that complexity. The idea is the author can stay focused on the object they're speccing. \nThen when they focus on the collaborators they can either convert the interface to a class (we could automate it), or they simply describe a new class that implements the interface.\nI like the idea that they're guided towards that 'should this stay an interface, or should it be a class?' question.\n. This is now 'feature complete' as far as this PR goes.\nI had to make some Prophecy changes to enable the functionality, so it can't be merged until we see if they get accepted + prophecy does a stable release.\nThis change has highlighted the problems with code generators, so we'll need to do a refactor in there.\n. @gnugat see #619 \n. I'd appreciate some review on this as I don't anticipate changing much. \nWondering how to handle the Prophecy version issue - I could detect presence of the relevant APIs and bail out, but the testing environment would have to switch between versions.\nFar simpler would be to bump the Prophecy version requirement. In the past I'd not have hesitated by Prophecy is now a 'shared' lib.\nAny opinions @stof ? @everzet ?\n. @stof :+1: thanks\n. Rebasing seems to have fixed the bad diff\n. I'll add a feature about type hints in params, I hadn't considered that case. \n. @stof Docblock params seem to just work\n. @stof I addressed your comments, do you have any plans for a prophecy tag? (beta is ok, I'll probably do a 2.2.0-beta before a real release)\n. @stof @everzet Can either of you make a Prophecy tag?\n. The Yaml::parse is fixed in #578 and I'll merge for 2.2 as soon as we tag 2.1 stable\nIt would be good to move to QuestionHelper but like you say we will need a switch, maybe this can be done as part of cleaning up the IOInterface? We can have two IO implementations and detect which to use.\n. If we can't refactor to use QuestionHelper quickly, in the meantime what is the cleanest way to suppress deprecated errors when using 2.7 components?\n. Yeah that's an option - it depends on how much is shared between the two IO implementations\n. Yaml::parse is now removed by #578 \n. Looking inside Console\\IO, there are three methods that use DialogHelper: ask, askAndValidate, and askConfirmation.  Of these only askConfirmation is actually used inside the codebase, and has a decent API. The first two are unused and are tightly coupled to the DialogHelper API.\nIt makes sense to me to deprecate the first two unused methods and not implement a QuestionHelperversion of them.\n. The deprecated calls are now removed, and there is a travis build to warn us if any more turn up in unstable symfony versions.\n. Leaving this open, as the message could be improved. I'd suggest a twofold approach:\n1. A specific matcher for floats (shouldBeApproximately?)\n2. An extra warning when shouldBe fails and both values are floats.\n. Sure, the name might not be the best and it's unclear what level of precision to aim for (it should probably be a parameter) so if you want to think about those things and do a PR it'd be great.\n1. would be something like changing the shouldBe failure message to include 'did you mean shouldBeApproximately?' or some similar nudge, when both values are float.\n. Actually in terms of priority, a message when they're both floats would add a lot of value and be simpler to implement. It depends how much time you can devote to it.\n. (if you want me to do it i can but you'd have to add me to your DNS provider and that's probably harder)\n. @MarcelloDuarte It might be worth adding the CNAME on your DNS, if the transfer is going to take much longer. Or maybe a temp redirect on the existing site?\n. update: My registrar still says 'this transfer is in progress'\n. This now works for me; there may be some propagation delay \n. @stof Both resolve to readthedocs for me. You may have some caching happening?\n```\n;; ANSWER SECTION:\nwww.phpspec.net.    92  IN  CNAME   phpspec.readthedocs.org.\nphpspec.readthedocs.org. 91 IN  A   162.209.114.75\n;; ANSWER SECTION:\nphpspec.net.        299 IN  A   162.209.114.75\nName Server: matt.ns.cloudflare.com\nName Server: vera.ns.cloudflare.com\n```\n. @stof does it work for you yet?\n. Yep, although that's will still get you the latest version\n. No, this isn't possible. This is a deliberate design decision; trying to mock self methods is normally a bad practice for unit testing, and PhpSpec is not aimed at other types of testing.\nIf you'd like to share the reason you want to do this, we could discuss other approaches.\n. I'm not sure what you mean - if you want a double of Property you can ask for that explicitly, if you want a double of the Interface ask for that too.\nSorry if I'm missing something Laravel-specific\n. What do the calls to PropertyInterface look like?\n. If PropertyInterface doesn't have getKey, Property should not have getKey - the is what IOC is about.\n. How is addProperty type hinted? Does it called getKey?\n. If addProperty is type hinted with PropertyInterface, you shouldn't call any methods that aren't present on PropertyInterface.\n. It's not really a phpspec issue...\nIf your code is saying 'I will work with anything that is a PropertyInterface', you should work with any PropertyInterface, not PropertyInterfaces that happen to also have getKey\nDoes that make sense?\n. A simple solution is to add getKey to that interface.\n. Ah, cool. You might be able to do something with aliases.\n. The 5.3.3 failure seems to be an issue with our behat tooling.\nI'm not sure what's going on with the HHVM one.\n. @stof I think it might be inside the sort-of-ApplicationTester we're using. I'll investigate.\n. Looks like the hhvm-nightly has just coincidentally decided to start failing.\n. Some of these lowest-bounds errors can be removed by #591, but are replaced by others that look like genuine low-bounds issues\n. Problem versions were Behat and Symfony\\Component\\ApplicationTester.\nI've bumped the Behat version because it's a dev-dependency and writing around the minor bugs would be painful. \nI rewrote the use of ApplicationTester so the older version can be used - sadly ApplicationTester is part of the Console component so can't be a separate dev version.\n. I agree this error message could be better.\n. ping @whatthejeff Any ideas?\n. It's as if Behat can't find the autoloader I guess?\n. Ah great, thanks\n. @whatthejeff That's fixed it thanks, I'd never have found that bug myself :-)\n. I've not seen this syntax, and composer doesn't seem to like it.\n. You could add a self update to Travis - I'd worry that it'd cause problems for users with outdated versions... when was it introduced? We can wait 30 days after that :-)\n. Can you either merge from master or rebase please? Master is using container builds\n. Thanks :+1:\nI'm going to wait until mid or late Jan to merge; I don't want it to break for anyone who isn't getting a 'you should run selfupdate' warning from Composer, so that means 30 days after it was merged.\n. Can you apply the same change to the constraint added in #587 please, as per your comment there? \n. Hm, what does that effect? Quite a few other projects seem to be using it.\n. Hm, I see. Is that a known composer bug? In that case I can close this and watch that issue...\nAs an aside I'd like to know also why the caching works on ciaranmcnulty/phpspec and not phpspec/phpspec :-/\n. @jakzal I believe it is meant to work if you're using the new container infrastructure...\nOn ciaranmcnulty/phpspec, the travis builds are caching the assets and I've certainly never paid them any money:\n\nFor some reason it's not caching on phpspec/phpspec so it's certainly possible that I'm being a dummy and have misunderstood\n. @GrahamCampbell  where are the branch-aliases cached? ~/.composer or in the vendors folder? Could we still cache one of them?\n. @GrahamCampbell Any evidence at all? lol.\n. I've made the suggested changes. Only thing that's puzzling me is that travis is not caching the changes!\n. Aha, I see and because I pushed my branch in ciaranmcnulty/phpspec the cache exists :+1:\n. @stof, @GrahamCampbell Thanks chaps, dependencies are being cached.\n. Thanks for reporting this, it's fixed in 2.1.1\n. I would suggest we release a 2.1.1 with this included\n. I'll write a spec or feature that covers this case before merge.\n. Can you update your composer and try installing again?\n. The ^ syntax is a recent addition.\n. @sstok I will revert in that case, thanks for pointing out the Scrutiniser problem\n. @GrahamCampbell If you want to PR again please do for future merge.\nThanks @stof I'll keep an eye on it. \n. Thanks!\n. Scrutinizer seems happy now\n. I think sufficient time has passed now that this can merge if scrutinizer is happy. By the time we do a next release everyone who's not updated composer will have been getting warnings for a while about updating.\n. how does this behave in 2.1? Instantiation logic is significantly different.\n. It may be that ->shouldHaveType() doesn't actually trigger construction, I'm not sure... you could try calling ->getWrappedObject() that will definitely trigger instantiation.\n. That's definitely inconsistent, I can't see a reason for the logic in the two places to be different, or really for there to be two places.\n. @stof Aaah that makes sense. Can you open an issue to discuss alternatives?\n. The number is 'of examples so far'. We don't actually know the number of examples until after execution so the bat's width is based on progress at the specs level\n. Percentage of executed examples that passed\n. 100% is good\n. This looks great, thanks\n. Todo:\n- [x] Move Integration tests out of phpspec into something else (probably PHPUnit)\n- [x] Remove dependency from IO to dialogHelper\n- [x] Make a decision on BC of ask and askAndValidate\n. They're used nowhere in PhpSpec, I'll have to do research re: extensions.\nSo it's a BC break, but might be a BC break that impacts very few people.\n. @stof According to this script https://gist.github.com/ciaranmcnulty/7706c36bbc62ee858317 there are no uses in the extensions we link to.\n. I've got the PHPUnit tests in place, just need to do the refactoring.\nI'm leaning back towards leaving those methods in, seeing as it's not hard to implement them. Should be able to finish off today/tomorrow.\n. If I take the methods out, I'll add a section to CHANGES.md for any internal BC breaks.\n. @stof removing the dependency was pretty straightforward.\nThere is still a possibility to support the ask and askandvalidate methods but it would require cluttering the Prompter interface. It feels bad to make the interface messy, but also bad to break the BC when it's not actually a difficult thing to implement.\n. @stof I think I addressed all your points, did I miss any?\n. Cool, thank you!\n. Oh, very nice! I wonder if people would use it responsibly enough that it could be in core.\n. I rubber-ducked this with @MarcelloDuarte this morning and talked myself out of it.\nIt seems to me the use case for skipping examples depending on object availability is for writing integration tests. The example I linked above from #604 is an integration test written in PhpSpec, which is why it's painful.\nI'm for keeping this pain for people attempting to use the tool for integration testing. I will change my PR to use some other method (possibly PHPUnit) to integration test those components that are strongly coupled to Symfony components.\nI appreciate that some people are using the tool for functional or integration testing, so this extension will be useful for them; @gquemener can you please add a link to your extension in the docs at https://github.com/phpspec/phpspec/blob/master/docs/cookbook/extensions.rst ?\n. @stof the code I linked to in my first comment is #604 \n. @stof There are a few extensions on that page that are clearly for functional/integration tests - maybe they should indeed be in a separate section with a disclaimer?\n. That's a good point, there may also be things like HHVM detection.\nThe use case we most likely want to support is 'my code has a conditional and does different things on different versions of PHP'.\nThe case I wouldn't want to support is 'my code only works on PHP >5.4 but I want to run the suite on 5.3 and skip the things that won't work'.\nI'm not sure how we can distinguish the two.\n. Right, good points. I guess I can't see a downside to skipping based on version then.\n. An alternative to this would be Behat-style profiles\n. this is probably the same issue as #601.You will find that when you test actually behaviours (not shouldHaveType) you will start triggering the real constructor.\n. Wow thanks for the detailed response @everzet. I agree on all points.\n@dragonrun1 you could consider making this an extension for your own use perhaps?\n. See discussion on #608 \n. I don't think there's currently a way to do this... there should be though.\nThe long way around would be something like:\nphp\nfunction it_should_reject_invalid_email_addresses() \n{\n    $this->beConstructedThrough('createWithEmail', [self::USER_INVALID_EMAIL]);\n    try {\n        $this->getWrappedObject();\n        throw new \\PhpSpec\\Exception\\Example\\ExampleException('Expected exception was not thrown');\n    }\n    catch(InvalidArgumentException $e) {}\n}\n. That would make sense to me, during__construct() always looked ugly.\n. It might also take out some of the special case magic added to handle during__construct\n. Form a first look, this looks like a good addition. It's not a format I've used but I'm sure some people would find it useful.\nIs it possible to add some Behat coverage?\n( + Nice to see you back on the project :-) )\n. You could also add a note to the docs: https://github.com/phpspec/phpspec/blob/master/docs/cookbook/configuration.rst#formatter\n. Similarly the formatters are listed in the run command's usage information: https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Console/Command/RunCommand.php#L75-L81\n. @padraic We treat Pending results as failures when we work out whether the suite passed (see https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Console/ResultConverter.php#L30-L39) so if there's no 'pending' analogue in TAP you should probably treat it as failure.\n. @padraic Yes, Pending is different from Incomplete I think... Pending means 'I haven't done this yet and I need to do this for the suite to be right', whereas I've never quite been sure what Incomplete means for PHPUnit. 'I haven't made it work but have committed it anyway' perhaps? ;-)\n. The complexity of the examples for TapFormatter, along with your observation that those examples mirror the Behat suite, both point to SRP violations in the Formatter.\nHowever this is probably not your fault, it most likely indicates that PhpSpec requires a formatter to do too many things. It might be an area we can focus on in future.\nThere are a couple of minor comments to address, otherwise this PR is in good shape.\n. It's worth keeping in IMO. As soon as you add collaborators to split up the class responsibilities the specs and features start looking quite different but it's very common for the initial set to look similar.\nHaving both right now helps clarity when we want to know how a class behaves (Features describe the overall system, if I want to find out what TapFormatter is for I'll naturally look for TapFormatterSpec).\n. For instance as an example of a future decoupling the switch in TapFormatter could be replaced with something like...\nphp\n$lineFormatterFactory->getLineFormatterFor($event)->outputLine();\n... and you'd introduce a concept of aLineFormatter interface (FailedLineFormatter, SkippedLineFormatter...) and a factory with the switch in. At that stage your specs will be competely different to your feature's scenarios.\n. :+1: looks good to me\n@stof Any more comments?\n. Great, thanks!\n. Please do, I don't think anyone's actively working on it . There is some discussion on #1063 about which namespaces are 'part of the project' or not - a similar concern will apply here I guess.\n. It would help a lot - for BC reasons we wouldn't be able to bump the Symfony dependency though, so would need to copypaste some of that solution as a fallback until we could do so. Travis doesn't love me.\n. Got this passing on travis but:\n- Had to use sudo, so we are not on the container architecture :-(\n- Users who check out the code and run the specs may be missing the command so will get failures\n. That's one issue yes. Looks like it fails on HHVM too.\nSuggestions about how to do this without any UNIX one-liners welcomed. Symfony\\Console is quick to assume it's not executing in a TTY so a lot of strategies will disable allow prompting. Symfony\\Process's isTty() did not do what I expected.\n. I don't have HHVM so I'm unclear whether the failing HHVM build is actually indicating a real problem with rerunning.\n. Moved the smoke tests into a separate profile, and only run them on some builds (this also means people without expects can run behat suite without a surprise)\nThe HHVM failure is a worry, if anyone has HHVM and can debug that would be appreciated.\n. Looks like the HHVM fail is a genuine bug! Let's hear it for smoke tests :-)\nWill leave this open until I can repro+fix the bug on master.\n. This is in a pretty good place now - it's passing on all platforms and the fact it helped me find an issue is a :+1: for having it.\nThe only downside is that it takes us off the container-based architecture :-/\n. Prebuilt binary is a good idea, I'll investigate.\nIt would be nice to be able to do what expect is doing in PHP but I've been unsuccessful in my attempts so far.\n. It looks like expect is pretty messy to build, unfortunately.\n. I spent some time investigating different tools to do this but came up blank. My inclination at the moment is to take the performance penalty and merge this. The smoke tests are more valuable than 30% less execution time, as we're not often waiting for builds to finish.\n. Your composer needs to be updated\n. Can you show the comp function?\n. That is strange... it certainly doesn't seem like you're modifying the array\n. It's probably the same root cause, reference count changing. I can't see where though!\nI'm going to close as it's not a phpspec issue from what I can tell.\n. The good news is that there are only supports/getPriority/generate methods in the interface. However these classes are non-final and contain protected methods, and are commonly overridden in Extensions, so care will need to be taken to retain BC.\n. @stof I think there is maybe an argument for a small standalone library for this sort of object definition manipulation that could be shared with projects like Prophecy\n. Try:\nphp\n$app['extension.static_exporter.helper.http'] = $httpHelper->getWrappedObject()\n. Looks good - I don't want to chase the Scrutiniser score blindly but I think this version is slightly more readable (fewer variables in local scope).\nThanks!\n. Thanks!\n. I think I've been able to add this redirect via my DNS provider, but would be good if someone else can confirm it's working for them?\n. Great, thanks. I'll change that to a 301 if it's redirecting to the right place.\n. Thanks for spotting this.\nOne solution will I guess be to check if any are already set, another would be to make this maintainer higher priority than it has been previously.\nIs this breaking an extension you know of? It would be good to see the use case.\nAssuming a particular run order (in this case that our maintainer is the first one to add matchers) is a bad design so it should be changed regardless.\n. The first one is 9 days old, which post-dates 2.1.1 so it presumably works. \nThe second one seems to never have built successfully on Travis (?) so I'll need to check.\n. @norzechowicz, @cordoval Has this extension broken in 2.1.1?\n. (It will be fixed either way, this affects urgency / release priority)\n. Aha, we're linking to it from the docs - should that link be taken out if it's not being maintained?\n. Ah, I see.\nThe fix is presumably easy on his end - change the maintainer priority?\n. @stof not sure where to document it TBH; we don't have developer docs right now. Maybe a comment in the code somewhere?\n. Sounds good to me, I'm not sure I have the bandwidth to author it myself but hopefully someone with more energy can help ;-)\n. This was a mistake on my part, but has been stable so long it won't break any more extensions. Thanks for raising this, it looks like a simple change.\nWe'll need to do a little checking to make sure nobody is calling this and using the return value.\n. Yes, I was looking at PHPUnit's Strict Mode and the idea appeals.\nHowever I know that part of @everzet and others' BDD practice is to write transitional non-testing specs occasionally, that then later become tests.\n. @stof I'd say the case is different, the way we check it (matcher) is the same..\n. We don't have to call them Given/When/Then if it's going to make people think of acceptance tests, we can use another naming.\nBut the idea of structuring a unit testing into 3 (or 4, if you include teardown/annihilate) steps long predates Behat and indeed BDD (e.g. https://weblogs.java.net/blog/wwake/archive/2003/12/tools_especiall.html).\nWhen learning to write good Unit Tests (which are different to specs but close enough) it's a good structure to stick to. As your understanding of the subject matures it's fine to drop it.\nWhat I'm after in a more generic sense is 'a way to help newcomers to structure their tests correctly'\n. @jakzal I know about AAA, I linked to an article about it above ;-)\nComments are a nice idea! Would it annoy experienced users (more than the existing TODO)?\nThe anonymous functions are not a serious suggestion; it may be something cleaner isn't possible in PHP :(\nHaving it marked into blocks would enable us to enforce what can be done inside each phase, again I think that would help new users.\n. Another option for a strict mode would be to enforce the order in which certain actions can be taken.\ne.g. throw an error if a method is mocked after a matcher has been used.\n. @MarcelloDuarte for descriptiveness one-liners are great, my main motivation was to try and avoid some of the common antipatterns I've seen recently (e.g. act/assert/act/assert structures)\n. So for instance, maybe using a matcher should prevent any more stubbing or mocking?\n. We'd have to explicitly allow spies I guess.\n. @jakzal Having thought about it, spies would go into the Assert categories with Matchers.\nSo as soon as you call a matcher or invoke a Spy, any Mocking or Stubbing is forbidden.\n. @dmecke You shouldn't mock all dependencies ;-)\n. True, it'd throw a warning on the first spec that included too much I guess?\nThis may be possible with Xdebug, either counting objects involved in the call or something more complex like checking whether they're in src\n. @everzet let's have the conversation about final again... separate issue plz.\n. yes constructor would be:\nprivate function __construct(){}\n. Pro: Promotes something that I'd consider a best practice\nCon: Might freak out some newcomers (this isn't that important)\n. We could; we could have two templates and switch between them based on config.\n@mdavis1982 had a PR that implemented this at one stage.\nI'm not sure about having two ways to configure it though, and if we do it it should default to 'ON'\n. default on or default off, though?\nI mean, it's configurable right now by making a personal class template in ~\n. If the default is off, I don't see any benefit in having the option - if a user is savvy enough to switch it on in phpspec.yml they're savvy enough to edit the template.\n. Generating the interface is something that came up in the past, it's worth considering in a different issue. The final thing would be a nice option in that.\n. @stof I'm not sure the class template iterates quickly enough to worry about people having to update their templates. Anyhow, this change would require everyone to update their custom templates to look at the switch, right?\n. I think #633 looks pretty good. I've no strong objection to adding it aside from questioning whether it's that useful given users can edit the templates themselves.\n@mdavis1982 I meant that they'd have to edit their custom template to benefit from this new flag/placeholder\n@MarcelloDuarte This idea's grown on me, I'm not sure it excludes the suggested finalise-everything config option\n. @rtuin Being prompted to create an interface for every class would fast become a living nightmare, and calling it *Interface is something I'd actively discourage.\n. @mdavis1982 You can have project-specific templates; I don't see that as more overhead than editing phpspec.yml.\nActually this project should have a template with the copyright notice in it maybe.\n. @rtuin Yeah I think that's a good feature, offering to create interfaces from shouldImplement or shouldHaveType and it's definitely on the roadmap.  Above @MarcelloDuarte suggests at that point also offering to finalise the class, which is interesting.\n. Thanks @stof, that's a good idea.\n. It's not a democracy :-P\n. OK, I was fairly convinced before, I'm even more convinced now.\nThis isn't going to happen on 2.2, not because of any difficulty in implementing it but because we do need to get serious about documentation to support these sorts of opinionated decisions and help educate users. This doesn't fit with 2.2 being released soon.\nI have one reservation, which is that final classes will push our users to use real objects inside specs instead of doubles. This is appropriate for values and other trivial objects, but we need to help users see those distinctions. There are some known issues where users pass real-objects-containing-doubles into their SUS and some focus on them would help.\nRapidly after the 2.2 release I'll make final the default in master and we go from there.\n. @mdavis1982 I'll leave it open if that's ok.\n. Update on this, I have a kind-of roadmap:\n[Edit: moved to top comment]\n. If they're not already type hinting against interfaces or abstracts, making the concrete classes final won't affect their ability to reuse code too much.\n. You can replace any of the classes with your own implementation that conforms to the interfaces (this is what Behat v3 does and it works well)\n. You can use a Decorator, or you can PR to the project to add an extension point. \nMost of the time these things indicate a design problem with the original classes.\n. I really don't think the open/closed principle is about extending classes to change the parts of them you don't like.\nIn the example you give it sounds like you want to extend the class so that you can add a getter to break encapsulation? I don't care about that use case.\n. A good example is #682 \nThe initial implementation was to change a private to a protected and achieve an extension point via inheritance. Through discussion we realised there was a missing concept that's been turned into a collaborator and made explicit. \nThis has hugely simplified things for MageSpec, made PhpSpec better, and will probably help future extensions to do things cleanly.\nIf we'd started off with a protected method it could have been lazily extended and replaced.\nMaking the class final will help the same way having things private does; few developers argue for protected over private, but PHP devs just aren't used to final yet.\n. I'm going to edit the checklist above into the first comment\n. \"Open/Close is directly related to not changing the original class to add new features\"\nIt's about being able to use a class for new things without adding features\nAs far as I can see all of your examples can be achieved with composition solutions rather than inheritance.\n. It also prevents us making some changes that would help PhpSpec grow\n. 'I want to get all the generators' => get them from the place that passes them to GeneratorManager\n. @icambridge The magic happens here https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Console/ContainerAssembler.php#L200-L209\nIt's trivial to get the same list and inject somewhere else. Plus this use case is totally made up :-)\n. Possibly if there was a real use case we'd introduce a GeneratorManager interface\n. From a discussion with @everzet there's a softer option where we make it easier to generate classes based on interfaces (perhaps using shouldHaveType) and make them final by default\n. Sure, if someone had a valid use case for replacing the GeneratorManager we can add an interface.\nA whole load of  BC headaches come from concrete implementations being extended elsewhere.\n. #713 is merged, it will be interesting to see whether this makes development of PhpSpec easier or harder\n. Thanks for the kind words @jfmercer \nIt's good to hear this perspective, we quite often are scared to implement changes in case 'it scares of newcomers'.\n. You're using 5.4 array syntax I think...\nCould you also write a feature for this so we can get an acceptance test?\n. There are no instances of 5.4 syntax in phpspec...\n. I like the feature - it's cool you didn't have to write any code ;-)\n. This looks good, cheers.\nNow to decide whether it's a good feature :-)\n. Closing in favour of #637 \n. One is trying to load the project's auto loader, the other is trying to load phpspec's auto loader.\nThese are only different in the case of a global PhpSpec install, or when using the phar\n. There's certainly some cleanup possible there in terms of checking the paths checked in the 2nd half aren't duplicating paths in the first half, it's grown fairly haphazardly over time. I'd be nervous of change there without additional integration test coverage.\n. I wonder why we aren't doing require_once - performance?\n. Mostly here https://github.com/phpspec/phpspec/blob/master/docs/cookbook/configuration.rst\n. I think it makes sense like @stof suggests to have somewhere talking about best practices, not just limited to options.\nLooking at the options page though, it could do with some love.\n. Hah I consistently misread opinions as options through this conversation :-)\n. This is an attempt to avoid having to prefix with php? Like @stof says I was under the impression this already worked.\n. It looks like Behat supports a PEAR install, so has to build that in to the .bat\n. No, thank you!\nIt's great that you try and help the tool improve.\n. Related #713\n. I'm closing this due to age + my indecision about whether to impose this, please continue any discussion on the Issue\n. @stof recovering in same-process may not be possible but there are alternatives. \n. I have a stale branch that implements fatal-recovery; the strategy is essentially to re-run the suite and skip all the specs up to and including the failed one.\nThe disadvantage is that for things like the statistics to be correct the re-run version has to either know the previous example results, or re-run the suite quietly in the background.\nSo; I've got a working version but it's slow on fatal.\n. There are two main motivations for this:\n1. in future it would be good to handle some fatal errors ourselves (e.g. classes not existing), so catching them is a good start.\n2. There is a common situation where a spec that would prompt code generation that would fix issues is blocked by an alphabetically-earlier spec with a fatal. E.g. an 'Class not found' in Bar is going to be fixed by FooSpec executing later on.\n. Rumour has it @elfiggo is working on this\n. Can you add some feature coverage for this please?\n. @echochamber are you going to get a chance to look at this again? It would be good to get it in for 2.2\n. Great thanks, if you need help with the feature coverage let me know\n. We're intending to release 2.2.0-beta after the next Prophecy release so if you can get this done in the next week or so I can bundle it in - it's a good addition.\nWe'll also need documentation but we can raise that separately to this PR\n. We assert state of return values all the time (e.g. shouldMatch)\n. Unless you're arguing against methods that return arrays.\n. The feature doesn't appear to pass\n. Thanks!\n. What namespace is the spec you're trying to run in?\n. It's possible that the duplicate spec_path is the issue. PhpSpec is trying to figure out from the spec filename which suite it's in and having issues. \n. Oh weird, thanks!\n. php\n        if ($longitude < 180 || $longitude > 180) {\n            throw new InvalidLongitudeException();\n        }\nYour only valid longitude is exactly 180..., you probably want to check for < -180\n. The tests were telling you what was happening ;-)\n. What may be confusing the issue is that your first spec won't be failing; shouldHaveType doesn't actually cause instantiation\n. We can certainly make it less ambiguous - I'd prefer linking back to an example in the Doubles chapter than having a code block in every instance where we use a type hint.\ne.g. your 'note this is a double' is fine, but it could just do 'see here for more detail' and we can make the Doubles chapter more clear perhaps?\n. The broken link was fixed in #646 and I'm not convinced we need that notice, sorry.\n. This is used to detect whether there is any body in the method, so that we can use the --fake option to write methods.\nThis is a good start but to properly make this work with Traits we will probably also need to modify the ReturnConstantGenerator\n. Is there some feature coverage you can add that shows the motivation driving this change?\n. The scenario will be something like (not real steps):\nGiven an empty method is defined in a trait\nAnd there is a spec expecting that method to return a scalar value\nWhen I run phpspec with --fake\nThen a return value is generated in the trait\n. Actually... that might just work anyhow due to how reflection works, but it'll be good to have the feature in there explicitly saying how it should work\n. That's optional - you can rebase if you want to\n. There are only a couple of minor things to be addressed here, if you can get it tidied up I'll merge for 2.2.0\n. I'll fiddle with the suite config myself\nThanks for the contribution!\n. Do you have an autoloader set up in the composer.json?\n. No, we rely on the project having an autoloader.\nThere is an open issue to improve the error message #585 \n. Thanks!\n. I'm not sure where you are expecting the exception to be handled - you're throwing it from within the spec, so there is no registered handler. You're also injecting a Double of a Config object but doing nothing with it.\nWhat behaviour of Client are you trying to spec?\n. As @stof says this is verging on end-to-end testing so isn't something PhpSpec will explicitly support.\n. Indeed this is not something that is directly supported by Prophecy, it'll be easier to make a real closure\nphp\n$next = function() {\n    return $res->getWrappedObject();\n}\n. The solution to this is to use a real callback. If this isn't appropriate please raise a feature request against phpspec/prophecy\n. Nice, thanks.\nHow stable is the PHP7 feature set? I'm behind on internals.\nWhat I mean is: at what point is it worth investing time trying to make it work?\n. Makes sense to me, and we 'fail early' so it won't delay build results.\n. Would it make sense for the next release to specify a composer dependency on PHP <7.0 ?\n. I'm a bit nervous about ^ in the next tagged release, and whether it'll break people using stable composer releases\n. True, it's probably best to worry more about it later.\n. @MarcoDeBortoli What does this have to do with Autoloaders?\n. @GrahamCampbell Looks good - I want a way to check locally myself before commit - is that possible?\n. I'm confused why this is working locally for me and failing, BTW\nI'll remove the CI elements and look at styleci.io or scrutinizer options, thanks guys\n. OK I've taken out the CI element so the PR is just fixes\n. Can I exclude the src folder some other way? If not, we can't use style\n. :+1: It makes sense to me to improve the reporting in core. Do you want to try it?\n. Ugh does this mean we rethink the entire mocking strategy?\n. I don't think dropping the feature is an option - it's pretty convenient and we can't break existing specs.\nI can think of a few hacky avenues to explore, one is to read the specs from disk via a stream wrapper that modifies them to not have type hints.\nThe conversation should be around which hack is the least painful.\nThanks for reporting this and confirming it's a documented BC issue rather than a bug - we need to have a fix in place by the time 7.0 is released.\nThis drives me to think any versions released between now and then should have a composer version restriction that disallows 7.0 (we can remove the restriction for CI purposes).\n. Yeah you can't get to the code after throw when an exception happens no matter what.\n. There are ways we can make this work with PHP7. Haven't tried hard yet\nOn Wed, Apr 22, 2015 at 7:44 PM, M\u00e1rk S\u00e1gi-Kaz\u00e1r notifications@github.com\nwrote:\n\nI wonder if the hack which makes it possible to hack type hints could be used for bypassing scalar type hints on PHP < 7.0...\nReply to this email directly or view it on GitHub:\nhttps://github.com/phpspec/phpspec/issues/659#issuecomment-95297674\n. Work in progress is here: #788 \n. The fix is present in 2.4.0-alpha and we are actively asking users to report any remaining issues.\n\nIf all goes well we will go through beta,etc,stable releases over the next few weeks\n. @GrahamCampbell I've deliberately broken this build to show that it does in fact fail for bad CS if you ask it to\n. I meant I broke it to test, I fixed again before merge.\nAny issues labelled 'Coding Style' cause a build failure.\n. True. It does suppose php-ci-fixer but not sure if it patches.\nIf styleci supports excluded paths in future I'll consider a switch if you want to PR. At the moment we're running a scrutiniser build anyhow so it makes sense to use it.\n. You can change the composer dep to dev-master, and we won't merge until there's a valid tag (this is what we have done in #579)\n. @avant1 Prophecy has released 1.4.0 now - when I merge #579 it will conflict with your change to the prophecy version, you should be able to resolve it fairly simply.\n. I've added some more comments.\n2.2.0-BETA is now tagged but this could still make it into the release if you have time. I'd like 2.2.0 to be released in the next couple of weeks.\n. Thanks for the contribution! This will be in the next release (either  BETA2 or RC1)\n. The fundamental problem here is that PhpSpec can deal with two different types of parameters to method calls:\n- Doubles, with stubbed methods that return either doubles or real values\n- Real values containing real values\nThere is a third category that is not handled, and we don't have a good strategy to handle is:\n- Real values containing doubles\nThis is because we have no way of intercepting the call to the real object and 'unwrapping' the returned double; this is why you have to call getWrappedObject() in those cases. (and of course we have no way to unwrap in your array example).\nAny suggestions about how to make this clear in the docs without confusing people would be welcome (or maybe a way to handle the errors more cleanly)\n. yes, sorry, it's the make() that is causing the issue\n. If phpspec is compiled as a phar, or installed globally via composer, we need to load both the project's autoloader (the first if), and PhpSpec's own autoloader (the second if)\n. Appreciate the contribution though!\n. Choking? What error are you having? Maybe open as an issue\n. You're typing phpspec without a path? What folder are you in when you run it?\nIf it's resolving to vendor/bin/phpspec I would expect it to find the autoload.php\n. And there is a file in vendor/autoload.php? \nThis may well be a bug, most people run phpspec from bin/phpspec\n. I guess there should be a third condition in the 2nd if to catch this case then... it seems messy though.\n. Make a new one please\n. Laravel doesn't have a committed vendor folder so I don't think it's a bug there. It would be good if you can reproduce how this has happened... was it at any point copied to an FS that doesn't support symlinks, or FTPed, or ZIPed etc?\n. There's a lot of glory! Docs are very important.\n. :+1: \n. There are still lots of problems with phpstorm even using this - it's also not really true; the SUS isn't a mixin of the spec\nIt's probably better if PhpStorm just starts supporting PhpSpec, IMO\n. The problem with writing a plugin is AFAIK there's no history of PhpStorm adopting community plugins into core; with Behat they implemented integration themselves with some help from Konstantin. I've talked to them a couple of times about it and they'll add PhpSpec integration 'when there is enough demand'\n. Yeah I mean they have a split between 'recommending plugins' and 'building themselves in core', they don't adopt plugins into the core distribution\n. Can you give a use case for Less Than?\nMost of the time when unit testing with integers, you know what the expected value will be in your example so it's best practice to use an exact match.\nThose matchers might be useful in other types of testing but I can't see it at the object spec level.\n. In this example you might want something like shouldBeBefore, which can be achieved with an inline Matcher.\nHowever your test doesn't strike me as great, the start date could be set to 1970-01-01 for instance.\nMy preference in most time-bound testing is to externalise the time element and treat the clock as an infrastructure layer, as @jakubzapletal is suggesting.\n. i don't think 'fuzzy' matchers are something we want in core - they can be done with inline matchers, or I suggest an extension would be more appropriate\n. Rather than encourage inheritance, can we shift this to composition perhaps?\nAn object that determines accessibility would make sense to me.\n. Sorry @shanethehat I left you hanging on this one - looks like there are some merge problems?\n. Is it just a case that the dependency isn't injected in phpspec2-expect?\n. In terms of BC it might make sense to make that an optional dependency for Caller\n. Caller could internally instantiate the default object if one isn't provided.\nThis is crap but it provides a BC layer\n. It was fine to break BC in the constructor of caller when I thought there were no extensions using it ;-) \nNow there is one we have a few options:\n1. Make argument optional and instantiate internally (see above)\n2. Do something similar via an adaptor\n3. Think of some other way of adding the extension point\nSo I'm leaning towards 1\n. Great, I see the build now passes too. I think it's just naming stuff that's stopping me merging.\n. So is this PR enough for you to make the improvements you want in MageSpec? Is it worth making a MageSpec branch that uses this branch of PhpSpec to verify that?\n. Thanks @shanethehat! This'll be in 2.3.0 in a few(?) weeks so you can plan your next MageSpec appropriately.\n. Can you fix the coding style issue please?\nAm I right in thinking this breaks backwards compatibility for some setups? If it does, it's not something I feel we can change before 3.0 (we could change the documentation to reflect reality of course).\nI'd like to see some feature coverage around config files, is that something you think you could add?\n. Why close this?\n. Ah :-) Just push future commits to your same branch and they will be part of the PR\n. I've been thinking about this change, my main hesitation has been that this adds another configuration flag for us to manage and document.\nI don't see particularly what problem it solves, where you have:\n```\nsrc/Awesome/phpspec.yml;\nsuites:\n  some_suite:\n    namespace: MilkyWay\\OrionCygnusArm\n    use_config_path: true\n```\nYou can have:\n```\nsrc/Awesome/phpspec.yml;\nsuites:\n  some_suite:\n    namespace: MilkyWay\\OrionCygnusArm\n    src_path: src/Awesome\n```\nI think that has the same result?\nI'm really loathe to close this one because you said it's one of your first Open Source contributions, but suite config is something that's overcomplex right now and adding more stuff is not the direction I want to take it in.\n. Right,I can definitely see the use case.\nPerhaps we can make the path relativity explicit by having parameters that can be dropped in, the way Behat does:\nyml\nsuites:\n  some_suite:\n    namespace: MilkyWay\\OrionCygnusArm\n    src_path: %config_dir%/Awesome\nThis would avoid adding another key\n. we could have\n%config_dir%\n%bin_dir%\n%working_dir%\n. Using the same as Behat makes perfect sense :+1: \n. I think %paths.bin% is 'the location of the phpspec binary'\n. This maybe could do with a .feature illustrating the impact this has on user behaviour\n. No keep the spec too ;-)\n. Thanks for the feature, it is a lot clearer to me now what this PR is about :+1:\n. Thanks for the contributution!\nIs there anything that needs to go in the docs for this?\n. When you type:\nphpspec desc App\\Model\\Word\nThe reason you get 'AppModelWorld' is that is the string phpspec receives as its argument - your shell thoughtfully removes the backslashes for you as possible escape codes.\nUnfortunately because this happens before the tool is even invoked, we cannot tell where you wanted the delimiters placed.\nYou can instead use either:\nphpspec desc 'App\\Model\\Word'\nor \nphpspec desc App/Model/Word\n(depending on your shell)\n. Don't worry about opening the issue, it helps us see which areas of docs are unclear\n. Adding extra information in the formatter is something I'm not keen to do in the core codebase. \nThis is something an extension could do, however I'm not clear why the system executing the tests doesn't know what PHP version it's using?\n. I understand it's a valid use case for you, but I don't want to add extra output for all other users.\nLike I said this may be a good idea for an extension, or you can probably use the --bootstrap option to include a script that outputs this information for you.\n. Thanks for the fix - the level of coverage looks fine to me \n. If you make a change to composer autoloading you have to run the dump-autoloading composer command (or update or install)\n. Thanks!\n. This is definitely something that needs fixing. \nTo cut off one dead end: I tried adding a class_exists check and found that composer caches the result, which stops that approach from working, ie class_exists will still return false after the file is written out.\nThe best approach will be to pass knowledge of which files have been written out to the next execution.\n. Actually your comment is about a specific autoloading failure but I think we should solve the generic case (eg no auto loader configured at all)\n. Thanks for this, it looks good!\nI'm intending to release a patch to fix the problems with arrayKeyHasValue (see #702) which is the only reason this hasn't been looked at yet \n. I like the overall idea, I'm not quite on board with the syntax yet.\nRather than complicating the arguments to duringInstantiation, it might be better to make it argumentless and expect the spec author to indicate how the object will be instantiated:\nphp\n$this->beConstructedWith(1,2,3);\n$this->shouldThrow('InvalidArgumentException')->duringInstantiation();\nFor me this is clearer what's going on, and removes the complexity of having beConstructedWith with different arguments to the duringInstantiation. What do you think?\n. Looks good to me; doc changes in the same PR make sense.\nI won't merge for a while in case there is any fallout from 2.2.1 but we can get ready for 2.3.0 pretty soon\n. Great work @acasademont, thanks for the contribution!\n. The logic looks sound, and I can't see any coding style problems to mention :+1: \nI'm not sure I agree with your changes to supports. It's a different strategy than we've used in other matchers and it may be better to change the way we report these errors to users, rather than making matchers have to do this level of type checking and reporting.\nWhat I mean is we could include type information in the message: \"No matcher shouldHaveKeyWithValue() found for value null\" or something similar.\n. If matchers are too open about what types they can operate, there's less point in having supports. It will introduce a lot of duplicative type checking code between matchers.\nI can see the opposite argument however.\n. I 100% agree it should be more clear to the user why the matcher isn't usable. The only bit I'm arguing for is doing that checking outside the individual matchers somehow, otherwise we rely on every matcher advertising the reasons it can't be applied.\n. Thanks for spotting and fixing this, @gquemener.\nI'll make a 2.2.1 release soon for this fix.\n. Interesting, can you give some detail about what the object you're testing is and what it extends?\n. Ohh there is some weird special case around exceptions. You could try return new static maybe.\nI don't have time to reproduce right now I'm afraid but maybe someone else can debug it.\n. I mean that the way Exceptions handle overridden constructors has some special logic around it that is different to how PHP normally works, IIRC.\n. This makes sense and I can reproduce the problem.\nThe following works in PHP5.5 but not in PHP5.6:\n``` php\nclass SomeExceptionSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType('SomeException');\n    }\n}\nfinal class SomeException extends \\Exception\n{\n}\n``\n. This behaviour is delegated to Doctrine\\Instantiator but we seem to use it differently when instantiating because ofshouldHaveTypeandgetWrappedObject`.\nThis inconsistency was pointed out in #601 but hasn't yet been addressed\n. We should fix it internally in Subject\n. The way you've solved it with getWrappedObject will probably continue to work.\n. I'm fairly confident this is an error in doctrine\\instantiator and have opened a PR with a fix.\n. This is now fixed by doctrine\\instantiator 1.0.5, which is compatible with our tagging.\nThe next version of PhpSpec should depend on this.\n@sagikazarmark Can you please do a composer update and check that the error has been fixed for you?\n. (Thanks @ocramius BTW)\n. Fantastic.\n. Thanks for answering this @jakubzapletal!\n. :+1: \n. I'd type hint the collaborator in it_does_something and then pass it as a param to mockStripeRequest\n. Yeah exactly. You can of course make the prophet object explicitly if you need to, see the phpspec/prophecy docs\n. Thanks for following up with the fix :+1: \n. @Elfiggo We support PHP 5.3 so your use of short array syntax is breaking the build\n. @Elfiggo please declare your new classes as final\n. This replaces the other PR right? Can you close it?\n. I've made some further comments but this is close to mergable.\nIs it possible to add some doc changes in this same PR?\n. I'm using the generic Exception presenter here, which should probably be aware of the block width and use a different wrapping mode, but that's a different PR\n. @thecrimpmaster included this in his named constructor PR but there was some discussion, so I advised him to remove it and resubmit later.\nPossibly he hasn't found the time since then.\n. I merged some other PRs which seems to have caused a conflict here, you'll need to merge or rebase from master\n. Nearly there :-)\nThere's an odd diff; the branch history could be cleaner so maybe check the rebase.\n. There is a problem with this feature, it blocks any other fatal errors from showing.\ne.g. if there is a parse error in a Spec I get silent output from phpspec.\nThis isn't something I can merge; these categories of error should all be shown.\n. Rubber?\n. The IsolatedProcessContext involves two processes: The one in which Behat is running, and the one in which PhpSpec is running.\nWhat you want to test is that the PhpSpec process outputs an error. This partly relies on PHP but also checks your changes are still allowing the error to be displayed to the user.\nWhat you're currently testing is that if you explicitly include the file in the Behat process, the Behat process experiences an error. This is just testing PHP.\n. What needs to change about container assembler?\n. @Elfiggo There are conflicts blocking this from being merged\n. Sounds reasonable I guess. And something similar after creating new classes/interfaces?\nWe could make it a generic hook for 'a command to run after a file is generated' rather than git-specific\n. Yeah I'm sure some placeholder could be inserted.\nI'm just thinking about whether this makes sense in the core rather than in an extension.\n. Having thought about it it's a bit out of scope for the core tool. If @shanethehat's #723 is merged (no reason why not right now) there'll be an event an Extension can hook into to do this, if you're up for working on one.\n. Makes sense, looks safe :+1:\n. No major objections; will this be useful for MageSpec XML generation?\n. Looks good, thanks!\n. :+1: This has bugged me for ages.\n. Should probably do the same thing for named constructors, right?\n. I would say __construct first, then the others, then the normal methods\n- New __construct goes at the top\n- New named constructor goes at the top, but after __construct if it exists\n- Other methods go at the end\n. I would drop 5.3.x in a minor release (maybe 2.3.0) if I didn't think it would break people's expectations.\nMy reading of SemVer is that it's about API changes, not about dependency changes. However, some projects wait for major versions before doing this stuff. Zend for instance don't, and drop PHP versions during minor release.\nI'm definitely going to be dropping old PHP versions in 3.0.0 but that's not on the roadmap just yet. I'd be interested to hear opinions on whether dropping the completely out-of-date 5.3.x  would be antisocial.\n. Dropping in 3.0.0 is a done deal.\nThe open question is dropping 5.3.x in a minor 2.x version.\n. We'd change the php requirement in composer so those people wouldn't get upgraded anyway unless they forced it.\nMaybe that's an option if we commit to bugfixes for the release prior to dumping 5.3?\n. Legacy projects will keep getting compatible versions and their CI will pass (unless I go crazy and start deleting tags).\nI guess it's whether there are 5.3 projects under active development.\n. I'm not convinced at all by that PR, FYI.\nAnyhow if you didn't see it, PhpSpec 5.x will continue to support 5.3 Actively until around June, then in bug fix mode until summer 2017. \nPhpSpec 3.0 will only support 5.6 and 7.0+ and will be released around June 2016.\nSee https://github.com/phpspec/phpspec/wiki#roadmap\n. I intend to make ::class the default in 3.0 unless\nthere is a good reason\n. @sroze if there's no assertion we don't instantiate the class so class generation doesn't happen.\n. Thanks ;-)\n. Can you address my last comment above and resolve the merge conflict please?\n. I'm closing this due to inactivity, please feel free to reopen if you have time to address the comments\n. Fixed by #728\n. The way you have it's great, sorry I didn't merge this earlier!\n. Really nice work @mike182uk :+1: \nNow we have this we don't need the separate smoke profile in behat.yml; the smoke suite can move into the default profile.\nI'm not really keen on adding the @php-version to everything tagged smoke or isolated, it feels like something we should do elsewhere. One way would be to get the 5.3.3 travis build to run with --tags=~@smoke or something similar.\nThis certainly qualifies for the two-\ud83c\udf7a bounty I mentioned :-)\n. @mike182uk Thanks for the efforts here.\n. @mike182uk I will buy you those drinks when I see you next :-)\n. Looks great - is it possible to add this to the documentation too?\n. It's not so much about code generation (that is a factor) but also we throw an error on empty specs so it serves a purpose to have something in there.\n. Thanks!\n. Yep this looks correct, thanks\n. No idea, to be honest. I think some IDEs have historically been poor at resolving class aliases, which may be a reason?\n. @GrahamCampbell Does the FQCN make it more obvious what the type is? I'm not convinced it does.\n. @localheinz Merging your other PRs seems to have caused a problem with the merge here\n. In typehints or class instantiation, we use short names because it is easier to grok what the code is doing if we're not seeing FCQNs all over the place. For me the same logic applies to docblocks.\n. Thanks for this and the other improvements @localheinz \n. Good catch\n. Good catch\n. Ok I can see what's happening. This is a Prophecy issue.\nAs soon as you describe one method call on a double (in this case $gatherer->increment(...)) you have to describe them all. You have not described that $gatherer->time(...) will be called so Prophecy is throwing an exception.\nFor some reason, the output where Prophecy shows you what the expected and actual calls were is causing the failure - there's probably some problem showing you $time, $next, [$command], especially if $next is callable.\nShort term you can solve this by describing the call to ->time()\n. Sorry, possibly I confused the issue by not noticing you were describing the time() call\n. Yees, the comparison of lambdas isn't working correctly. This works for me:\nphp\n$gatherer->time($statName, Argument::any())->shouldBeCalled();\nIt seems the callables a) aren't equal in Prophecy's eyes and b) it has issues showing you the error message.\n. If I get a chance I'll raise with Prophecy, otherwise feel free to yourself. It's something we need to fix for sure.\n. We currently have a LF at the end, not a blank line. I personally don't like having a blank line and don't see many projects checking for that, but it does seem to be a PSR-2 requirement.\n. Some debate here https://groups.google.com/forum/#!topic/php-fig/PSzmcFVQst0\n. We currently end with }\\n and PSR-2 seems to imply we should end with }\\n\\n\nEven though that's stupid IMO \n. That formatting is pretty dodgy indeed, thanks for reporting. Either the behat test can get more liberal or the tool can format the message more intelligently.\n. The actual output should wrap better IMO\n. Hanks for catching it. I don't think we need to fix in older versions because the model is so different but it should be fixed for 2.3\n. What you do to cause this stack trace?\n. What makes you think it is related to PhpSpec?\n. 1.2 was the last stable tagged version.\nYou're saying this is happening when a fatal error occurs in your application? PhpSpec is not executed at that point.\n. So you see CodeSniffer error message in your logs when you hit a 500 page and you're reporting it here because..? ;-)\n. I'm going to close this, please re-report if you have anything firm tying it to phpspec.\n. @shanethehat This seems to be in conflict, can you address it please?\n. You're fast!\n. Thanks!\n. So this is because Namespace is a reserved word?\nRather than trying to prevent creation I think the best strategy is to show an error when this occurs (rather than skip the step)\n. Thanks!\n. I think the idea has some merit.\nif:\n1. FCQN is in spec namespace\n2. FQCN is direct child of spec (e.g. spec\\Foo but not spec\\Foo\\Bar\\)\n3. Ask if the interface should be generated in the SUS's namespace\nThis doesn't collide with our current behaviour because at the moment we are bailing out at step 1, and makes sense for a lot of common mistakes.\nThe failure mode will be when the author intends the collaborator in a different namespace to the SUS, doesn't read the prompt, and blindly hits enter.\n. @sroze No I agree with your example, I guess 2 should be 'same level as the spec'\n. @stof Yes, something like that\nWe'd need to be very careful about edge cases, it feels like there would be a lot of them.\n. There are no entry requirements, and I like your extension :+1: \n. I agree with @stof that this test doesn't really show that anything works.\nThe real test is a real extension passing or failing. Perhaps we should be doing some sort of large build against known/supported extensions before a major release?\n. This was incorrectly moved in #729 \nBecause Travis installs the dev dependencies, nothing failed there but it will fail for the PHAR or indeed any projects that include it as a dependency\n. Thanks for catching this @sroze !\n. There is an extension that provides autorunning after describe https://github.com/richardmiller/PhpSpecRunExtension\nPersonally I normally run after a describe, but sometimes will write my first example before running.\n. You don't need to include the src prefix; the command takes the name of the Class being specified\n. This seems solved by #796 \n. Great, thanks for confirming\n. This is something you should raise against phpspec/prophecy - I'm closing for that reason only\n. This looks great, thanks!\n. I believe the work that @shanethehat did for 2.3.0 addresses this; if it doesn't I think an extension to his approach is appropriate rather than breaking the template in a non-PSR2 way.\n. @umpirsky Can you check this is still the behaviour for master and if so can you please open an issue so we can discuss the best way to fix?\nI appreciate your contribution!\n. What's the motivation for this feature? I might be wrong but isn't this protected already via type hints?\n. I'm afraid after a lot of thought I don't think this is appropriate to core - I don't see the value of checking these things at runtime rather than, for instance, writing tests for your extension.\nHowever if you want to open-source it in your own repository for other extension developers to make use of I'd be happy to link to it in the docs.\n. Can you please add a feature to the behat coverage as well?\n. And come to think of it, the docs could be updated as part of this same PR\n. Looks good, thanks!\n. Yep I'm going to close this report on the grounds of duplication, discussion can continue on #354\n. Someone is working on a separate fix for that, but how exactly to support specs for PHP7 features is an open question.\n. One workaround for now is:\n``` php\ntry {\n   // code you want to test goes here\nthrow new \\Exception('oops you didn't throw the TypeError');\n}\ncatch (\\TypeError $e) {}\n```\n. Great, thanks!\n. I don't think it should fail, the SUS does have that type (even if it's not intantiatable in a particular scenario).\n. Thanks for the report @javi-dev, and the analysis @avant1 \nThis new feature clearly doesn't work on Windows - unfortunately we don't have a CI environment that can detect these problems.\nIt might be possible to hide the error on Windows, but unfortunately the intention is to use this environment for more in future.\nI'll see if I can get a Windows environment to test in, I guess. \n. @javi-dev the feature is that when a class definition is generated and written to disk, we pass the name of the class as an env variable to the next execution.\nThis is used so that if the class is not found on the next execution, we can tell the user they have probably got a broken autoloader rather than trapping them in a loop of being prompted a 2nd time to generate the class.\nThere are also plans to use this context for more in future so it's good to iron the issue out now.\n. Would be very happy to see a PR, @avant1's suggestions look solid\n. Currently the Annotation format requires the FQCN (and has always IIRC).\n. This is a great addition. Perhaps it can also check for scalar type hints in PHP7, as they're also not something that's mockable.\n. Thanks - great addition!\n. You can use Prophecy by directly instantiating a Prophet, as described in its docs https://github.com/phpspec/prophecy. \nBecause PhpSpec did not generate the Double directly, you'll need to call checkPredictions explicitly in the spec to check everything happened as expected.\nHowever @mheki is right, the correct choice is probably to reduce the number of collaborators your object has.\n. @NigelGreenway The motivation would be to be able to add some semantic information about what the arguments are / potentially have them out of order?\nI'm not sure it's something I'd use myself but would be happy to hear arguments about cases where it would be useful?\n. The names of arguments are not part of a type's public interface in PHP.\nAs such, unless named arguments appear in some future PHP version I'm not in favour of baking them into the tests.\nSome way to specify the arguments during method generation may make sense, perhaps the user could be prompted for them?\n. Naming of public APIs are very important indeed! But like I said currently the names of arguments are internal implementation details of classes, so are not something you need to choose during the Test phase of the classic TDD cycle.\nSpecGen does some argument-name-choosing so maybe we can incorporate some logic similar to that\n. Probably\nOn Sat, Oct 3, 2015 at 9:02 PM, Graham Campbell notifications@github.com\nwrote:\n\nIsn't the syntax | not ,?\nReply to this email directly or view it on GitHub:\nhttps://github.com/phpspec/phpspec/pull/780#issuecomment-145282444\n. Thanks, this is a good idea.\n\nIs there a particular version of the extension that we need? IIRC we are using token_get_all and token_name.\n. Version doesn't seem significant, thanks for the contrib.\n. Hm, is there any compatibility impact for older versions?\n. Yeah the open question is whether older versions of IDEs would have a problem - we don't want to add something that helps PhpStorm users but hurts others (plus the use of docblocks here is a hack until real IDE support appears).\n. It's a hack because the docblock is never going to be completely correct; the real behaviour is dynamic and to support it fully IDEs have to be able to comprehend PhpSpec's configuration.\nHowever this is a small addition and will help some\n. Despite the fact I have submitted a PR to Behat adding this feature, I'm not sure it belongs in PhpSpec core... it feels like something you need to worry about more when writing specs that change infrastructure state maybe?\n. On my machine your example causes the memory limit to be reached, somewhere inside Prophecy.\nIt's not clear to me why this might happen.\n. I'm closing this as the PR in Prophecy seems like it will solve it.\n. A lot of these seem correct, but it's normal to leave these in Behat contexts:\nBehat\\Behat\\Tester\\Exception\\PendingException\nBehat\\Gherkin\\Node\\TableNode\nAnd these in PhpSpecs:\nProphecy\\Argument\nIs it possible for you to separate these out from the other removals?\n. Great, thanks for the contribution!\n. We should keep the behaviour the same as it is currently when there is no flag in the config or at the CLI, in order to avoid breaking existing CI builds.\nYou may therefore want to reword the config flags to be a positive case: 'fail on pending' or similar.\n. No you're correct, I was confusing skipped and pending.\n. My hesitation now is whether the flag/option specifically for pending is appropriate - the next guy along might want to have Failure passing, etc...\nIs there a generic way the same problem can be solved?\n. @stof :-)\nYes but 'strict' is pretty vague. I feel like this 'pending-is-passing' is an edge case that if we put one flag in we'll end up with lots in future?\n. We currently take the maximum of the test results to be the result of the entire suite, which means there's an explicit ranking of how 'bad' a test result is.\nPerhaps the way to model it would be as a threshold?\n. Actually, a question I should have asked at the beginning: what is your reason for treating pending steps as passes?\n. Having considered this, I'm not sure it's a usage I'm keen on supporting in core (having lots of empty examples seems wrong to me). This could be implemented as an extension, or I'd be open to more discussion of returning multiple exit codes.\n. I've changed the title of this as it's now working / mergable.\nI'd appreciate feedback; there are some parts of the design (mostly the rewriter) that probably need to be refactored\n. @everzet yeah TypeHintRewriter is a monolith that I'll break down before merging.\nI anticipate once this is merged that I'll do an alpha release - there must be edge cases that aren't covered, especially with the namespace syntax/FQCN resolving\n. Can you give an example of a test that this causes problems with, please?\n. It would be good to have a clear reproducible case please\n. They should be different, as it's determined by the argument name.\nBear in mind that spl_object_hash is not always correct if one object has gone out of scope...\n. Is this not achievable using %namespace% and %name%?\n. ok, you can use the placeholder \\%subject%::class here for the same thing. As such I'm going to close this PR\n. You convinced me ;-)\nPlease rename it from %resource% to something that reflects it's the short class name\n. Looks good, thanks!\n. @docteurklein Yep; To me it seems that the later examples added duplicate it so it's safe to remove?\n. Good, that's what I thought ;-)\n. Thanks for the fix!\n. What is the difference between FatalPresenter and FatalPresenterInterface? Why do both exist, and what does it mean when a formatter implements FatalPresenter?\n. We really need some sort of windows CI coverage\n. This will be great to have; we can have it as an allowed failure for now and then Windows users who want to contribute can work through the bugs :-) I'd be happy to make a Windows issue tag etc.\n. I think I've configured the web hook.. https://ci.appveyor.com/project/ciaranmcnulty/phpspec\nYou may need to push to this branch again?\n. I suspect windows.php.net is something we can rely on more than our own solution and the hassles that would involve.\n. This looks good enough to merge and start work on the windows issues :+1: \nHow can we configure it so that the windows-failure is visible, but isn't getting on the way of normal deployments?\n. Thanks for all. The hard work, we don't require squashes although you can if you prefer \nIf you can address the comments from @stof it looks like the speed can be increased significantly\n. Great stuff, thanks!\nI guess we can start to work through these failures now\n. You're correct, shouldHaveType does not trigger instantiation.\nThe class does exist, it's just you haven't got an example where instantiation works. It's debatable whether this is good behaviour but it is semi-intended...\n. similarly beConstructedWith doesn't cause instantiation\n. @Elfiggo this doesn't seem to be passing?\n. You're describing sensible behaviour in the scenarios, but you're not actually testing it. You're directing both outputs into one so we can't tell if the assertion is true.\n. @Elfiggo your scenario still says 'outputs to stderr' but that is not what you are checking. You're checking 'it outputs to stderr or stdout'\n. Thanks!\n. There deliberately is not a way to couple to a specific framework component like this.\nHowever it's something that could probably be provided by an extension (see https://github.com/magetest/magespec and https://github.com/BenConstable/phpspec-laravel for examples in other frameworks). I'm not currently aware of a Zend Framework extension.\n. I'm not sure this is currently possible, I wouldn't say it was bad practice but it's not something I've tried to do myself.\nI'll label this as a feature in case someone wants to take a crack at it.\n. Thanks @mheki!\n. This seems sensible, although for BC it will need to be a new interface. Of course, extensions may lag behind in providing support as well.\nHow would discovery work? PhpSpec only resolves the available matchers at runtime for the spec\n. This doesn't seem a bad idea but to retain BC you would need to:\n- Make a new interface (that extends the old one) rather than modifying the old one\n- Mark the old interface as @deprecated\n- Update all of the existing matchers to implement the new interface\n- Update all of the extensions too\nI'm closing this because it's still WIP and am trying to tidy up the PRs but please reopen if you want to tackle the above\n. I'll close this as you have an answer\n. I was aiming to have 2.4.0 released before PHP 7; I hadn't been thinking about the Symfony release cycle.\nThere's no reason it can't be this weekend aside from the fact I'm on vacation so may not be able to support any bugs. Given nothing has been reported in RC1 that seems low risk.\nExpect a release in the next couple of days, depending on hotel wifi :-)\n. Thanks!\n. Yes this is probably true and needs to be fixed. We hadn't considered anonymous classes.\nPriority for PHP 7 support was 'existing test suites pass' so we didn't cover off many actual PHP 7 features.\nIs there a reason for using an anonymous class rather than a double, by the way?\n. Thanks, @sroze!\n. As 819 is now merged I'll close.\n. I'd rather there was a way to fix the existing rerunner, but this seems to be a decent approach. I don't have a way to verify that it works right now, if someone could independently check on a Windows box it would be a big help.\n. Decided to trust @chrisemerson as it's not causing any bad effects on non-Windows platforms ;-)\nThanks!\n. @garethellis36 The last part of your comment is probably due to a misconfigured autoloader.\n. I'm tempted at this point to remove rerunning from the Windows version until a fix can be found.\n. @chrisemerson Sorry didn't realise you were waiting for affirmation. If you can get it working with escaping that would be great (and there may be a fix you can apply to the existing rerunner too)\n. This is somewhat related to suites, I guess.\nIn my own usage I don't tend to want to run only part of the phpspec suite, but I'd be open to seeing example use cases\n. This is a duplicate of #106 \n. Thanks!\n. This is because the way we fixed typehints for PHP7 doesn't take Traits into account\n. @sagikazarmark How is the trait being found in your example (spec folder is not autoloadable)?\n. The error is that type hints don't work in anything autoloaded; this is not supported behaviour.\nThere is a workaround of manually including the trait in the following way:\nuse PhpSpec\\Loader\\StreamWrapper;\nrequire_once StreamWrapper::wrapPath(__DIR__ . '/Path/To/MyTrait.php');\n. Possibly but they are not auto loaded currently\n. Issue is still open - defining specs in traits isn't something we're supporting yet so it's 'undefined behaviour'.\n. The errors are around the typehints on PHP7... if you're not using Typehints for doubles, or not using PHP7, you won't have an issue.\n. @walterdolce Yes this works fine if you're not using PHP 7\n. You should probably use autoload-dev for this BTW\n. No, the problem is that in PHP7 we have to remove the type hints from the specs, if the class is loaded outside of PhpSpec (by include or by an autoloader) we can't process it. \n. Thanks for the fix!\n. This should be fixed by #831 \n. I think this is a good step but needs to be done with deprecation first. I'll close but please keep thinking about it :-)\nI'm going to publish a release roadmap soon (probably Symfony-style date constrained) so it will be clearer when and how BC-breaking changes can be introduced\n. @shanethehat This is suitable for 3.0 so I'll reopen\n. @shanethehat can you resolve the merge conflicts please?\n. @stof Currently I don't mind introducing breaking changes in 3.x\n. Are you talking about end users, or extension writers? I think they're different cases.\nYou have made me realise that MatcherProviderInterface and so on might need documenting.\nI don't have a problem making small breaks that extension writers have to catch up with. It worked for Behat. We don't have that big an ecosystem that it would cause the problems / require the sort of solutions that a project like Symfony has.\n. @stof there is no 2.next, 3.0 is the next version.\nWe agree about extension writers. I hadn't considered the impact this PR has on user land.\nThe options are:\n- Say 'implement the new interface' and document it somewhere clear. (similar to the Behat 2->3)\n- Leave the naming inconsistent\nWe should decide this now because it will inform a lot of our other decisions as we move towards 3.0.\nI'm leaning towards breaking things in the name of improvement\n. @shanethehat made a couple of comments and looks like you need to rebase\n. Thanks for the efforts @shanethehat!\n. Thanks @shanethehat this looks much less scary than the original version\n. Thanks for keeping on this\n. Great stuff, thanks\n. Thanks!\n. Thanks @jakzal; ping @everzet you're going to get a lot of reports about this ;-)\n. This is a duplicate of #769 , please continue discussion there\n. Comparing floats is inexact, for instance\nvar_dump(10/3 * 3 == 3); // outputs false\nNote that PHP may show fewer digits than the internal representation when printing floats, so the displayed digits may be equal but later digits may differ.\n. This duplicates #581 so please continue discussion there\n. Thanks for finding and fixing this!\nYou will need to cover this in the behat suite; you would add a new scenario and tag it as @isolated, then add any missing step definitions to the IsolatedProcessContext.\nIf you're not sure how to do this then perhaps someone else could help.\n. Actually this is probably ok without end to end tests; thanks for the contribution!\n. I'd like to see the path relative to the root or relative to the CWD but this is good enough right now.\nThanks @docteurklein \n. This looks good to me, thanks @jon-acker \nCloses #802 \n. RIP\n. For your sample code I would do the following:\n```\nfunction it_initializes_someinterfaces(SomeInterface $obj)\n{\n    $this->initialize($obj);\n    $obj->doSomething('withSomething')->shouldHaveBeenCalled();\n}\nfunction it_initializes_other_objects(\\StdClass $obj)\n{\n    $this->initialize($obj);\n}\n```\n. It would indeed be a fatal until the code was implemented; catching fatals is a feature I'm going to implement in future.\nYour other case could be done by defining a type with the method that doesn't implement the interface, and using shouldNotBeCalled.\nThis feature would have to be added to Prophecy so I suggest you raise in the phpspec/prophecy repository and we can continue discussion there.\n. or shouldHaveType works too\n. It's probably not just the colours, it may also bail out of prompting for input if the stream is non-interactive too ;-/\n. This is because of a change in Symfony: https://github.com/symfony/console/commit/e8ccc45ab9aad790115de6943eef9c1ecfbebf99\nEvidently passthru does not provide stderr as a TTY so we may need a different rerunner to handle these cases where pcntl isn't available\n. Specs are not required to be autoloadable (phpspec finds them directly). You'd achieve this by setting up suites in phpspec.yml\n. This may help http://www.phpspec.net/en/latest/cookbook/configuration.html#psr-4\n. Yes very likely. I guess the solution is for the rewrites to not collapse the white space \n. @docteurklein does your example now work with master?\n. I'll assume this works \n. Thanks for this, it's a good feature! \nI'm wary of making the path too 'fuzzy' though. @jakubzapletal's might be the correct way to do but we'd need to consider what happens when both the --suite and a path are given.\nYou'll need to add some tests to cover the new funtcionality before it can be merged; I think the Travis failure is happening for all PRs so I'll do some investigation.\n. @Saeven Can you change to a --suite option please?\n. @Saeven If you have time to come back to this with the --suite option please reopen, closing for now.\n. It will be cool to have this feature!\nI'm uncomfortable with requiring the Symfony polyfill because although I like to use it for projects it is not perfect and could cause confusion.\nIs it possible to implement a solution without it? \n. Great; I suspect the version checks will only be needed in the test suite\n. Tests seem to be failing?\n. There are some coding style issues; you're right about Travis so I'll have to fix that before I can merge.\n. OK if you can address my minor comments I'm happy to merge once I figure out WTF travis is doing\n. Great stuff, thanks!\n. Thanks @shanethehat!\n. It's a syntax error I guess? Do you have any idea which spec is causing the problem?\n. This appears to be a PHP 7.0.2 bug that is fixed in 7.0.3...\nhttps://3v4l.org/ngdPV\n. And here's the bug reference. https://bugs.php.net/bug.php?id=71314\nAs it only affects one PHP version I don't think we need to include a workaround\n. Thanks for this; it'll be great to be able to detect Windows breaks\n. I agree with @avant1 about case issues,\nI made some naming comments but the overall code is solid\n. Great, thanks @mheki!\n. Thanks! I have one naming comment\n. Good stuff, thanks!\nI think the appveyor failure is a configuration issue\n. Well this fixes things, a more nuanced fix can come later.\n. I'm not sure what was breaking, I suspect the .git files were not being included in the cache\n. @sroze has pointed out https://github.com/symfony/symfony/pull/17171/files which might be a good option for future\n. Which version are you using? This was supported from 2.4.0 onwards\n. Never mind, I see you're using 2.4.1. Odd\n. Yes that is the fix.\nWhat happens is that the specs are processed to remove the type hints before the spec is executed.\nPossibly something in your configuration is stopping this process? If you can reduce it to a reproducible test case it would help a lot with debugging.\n. Is it possible that your spec is being autoloaded rather than running through the transformer?\n. Because the debug shows the transformer being triggered it is likely it's being loaded normally\n. Ah. Unfortunately in this case the rewriting will not work :-/\nI wonder whether the rewriter could do that wrapping for you?\n. Cool, thanks\n. This is a good idea; is it necessary to have the $column though? It looks like it is equal to $eventsCount % 50\n. Worth validating whether this works in Php 7 / adding some test coverage for it\n. Not sure it needs a separate config option.\nOn the second run you can still have the result as Fatal, just don't actually execute the failing Example.\n. Hm good points about the empty methods - I'm not sure what the best way to proceed is now.\nAdding an interface for every event might not be a good idea.\n. Yes sorry for inactivity here. This part of the codebase has fallen off my radar a bit for 3.0..\nRebase if you have time, but I doubt it'll be in the next release. Definitely need to clean up how listeners work\n. I'm no longer sure this is the direction to go in, but thank you for the hard work implementing it\n. Thanks! Will wait until we have done the 5.5 release before merging \n. There may be some in there that don't use ?: but use a traditional ternary instead. I guess we need to audit all optional parameters (yawn!)\n. @mheki can you resolve the merge conflicts please?\n. @mheki I think merging your other PR has caused conflicts?\n. Thanks @mheki !\n. @mheki can you resolve the merge conflicts please?\n. @stof I put my thoughts in #896  - i'm happy with these changes so long as they're documented.\n. Thanks @mheki !\n. I don't like the idea of overloading the resource locator further (this is related to the discussion in #850)\n. @sroze After discussing this offline I think the (theoretical) objection about ResourceManager isn't a problem\n. @everzet great idea yes please when will you finish it? ;-)\n. Looking at #899 gives a bit more support for this change\n. Closed by #922 \n. But the first thing is a real file path, the second is not a FQCN\n. I appreciate the effort you have put into it, but I don't believe the extra complexity is worth saving a few characters (which most shells will autocomplete)\n. Indeed, thanks @jakzal \n. @dstockto If you can look at @shanethehat's PR with your bigger suite it would be really useful. Thanks!\n. @naomigo Yes the second example is how you should do it in PhpSpec. The tool will take care of maintaining the same instance between let and the examples.\nYou're right to feel concern about the class though, and the tests are highlighting the issue. Consider whether some of them are related can be grouped into objects that then delegate to the existing components.\n. It's true you don't need the typehint separately but it's slightly nicer in IDEs if you add it IMO\n. @stof incidentally I suspect the events we use have a lot of references in them, and there's probably some performance gains there (not to mention logical gains)\n. Nope! thanks for the heads up\n. http://phpspec.readthedocs.org/en/latest/ is still up; odd\n. I paid to renew the domain yesterday; I assume the DNS provider has screwed up somehow\n. I re-added phpspec.net to our ReadtheDocs config, and have raised an issue with them to see why it broke the way it did.\nhttps://github.com/rtfd/readthedocs.org/issues/2067\n. Thanks again @MedAhamada \n. duringInstantiation does not take any parameters\n. Oh, that's handy ;-) \n. Great.\n. What's the benefit?\n. @unexge I don't think you are correct \n. I don't see a reason to change these\n. It saddens me to use the readability but this is a good step.\nI'm not sure FailureException is appropriate?\n. Oh yeah that was probably me :-)\nI guess just \\Exception\n. So it takes slightly more time and only saves 0.3% memory?\nI agree with the change from a clarity POV but I'm not convinced it's a huge perf. gain; am I missing something?\n. @shanethehat I'd also like to see that before merging \n. Doesn't seem to make a big diff then?\n. I'll close this on the grounds the original seems to reveal intent better\n. Are the document markers important?\nWhat difference do the single-quotes make?\n. Hi\nPhpSpec does a lot of 'magic' around collaborators, and you've triggered an edge case where the magic breaks down.\nShort answer\nRewrite your spec as follows:\n$this->beConstructedWith(new Collection([\n    $foo1->getWrappedObject(), \n    $foo2->getWrappedObject()\n]));\nLong answer\nPhpSpec supports two types of collaborator interactions:\n1. Testing with concrete collaborators (e.g. new Collection(), or ['a', 'b']).\n2. Testing with doubles (i.e. type hinting creating Prophecy doubles).\nIn case 2 doubles are wrapped in Collaborator objects - this lets us call ->will* and ->should* methods to specify stubbing and mocking behaviour. PhpSpec does some stuff under the hood to 'unwrap' these collaborator objects before the call happens.\nYou are passing a concrete object, that contains a concrete array, that contains some wrapped doubles - the unwrapping infrastructure can't handle this so unfortunately you have to explicitly unwrap them, as described above.\n. You can still mock or stub behaviour; you just have to unwrap the object manually when passing it.\n. $this->shouldHaveType('..') specifically doesn't need to instantiate the class, but the class does have to exist.\n. OK I've been thinking about this a lot and spoke to a few people.\nI don't think at our current popularity we need to do a deprecation release - however we do need to make sure that users are aware of how to migrate from 2->3 (this is something that I felt Behat lacked).\nSo I'm ok with hard breaks in 3.0.0, including in userland, as long as they're documented. We'll obviously try and minimise this but it includes:\n1. Interface renaming. This will effect users who have defined custom matchers as objects\n2. Configuration file changes\n3. Removal of some features (I am thinking about @param support for instance).\nTo minimise the impact of these changes we should immediately start a migration guide and make sure all breaking changes are documented correctly.\n. I'm actually considering removing the docblock parsing entirely\n. Your change would break backwards compatibility and we have 3.0 coming up but to be honest I don't see a use case for them since we added typehint support (pre-2.0)\n. See #879 by the way\n. This is now closed via #922\n. It's likely we'll take out the @param support but I'll leave this open while we decide\n. See #922 \n. We debated this at the time; the default behaviour of --no-interaction is to accept the defaults of every question. \nThis is slightly different to 'always choose the option that results in generating code' I guess? Although currently the default answer is to generate in all cases I can think of.\n. I'm not going to merge this because I think the behaviour is niche and may be unexpected for some users.\nI'd be happy to look at an --always-generate-code (or similar phrasing) option that's more explicit about what would happen though\n. In the past we haven't been interested in supporting static method calls (which is what this is, even though it looks like a constructor...).\nduringInstantiation won't work this way but I'd be interested to see proposals on how this type of behaviour could be specced / whether it should be.\n. This is great stuff, thanks!\n. I agree about PHP versions.\nI agree about the #1.\nI'm unsure about changing all the examples to vendor/bin/phpspec as I always set the bin-dir, but we could indeed update the install instructions to use composer commands rather than the JSON\n. Have you tried the different verbosity settings? -v or -vv ?\n. Thanks - I suspect what happens is that we're only diffing them if the exception type is the same - in the cases of Error introduced in PHP7 it's probably more important to show the message regardless.\n. Yes it's something that will need to be fixed inside PhpSpec - I would start by looking at PhpSpec\\Matcher\\ThrowMatcher (the component that handles shouldThrow) and its verifyPositive and verifyNegative calls.\nI'm interested in encouraging new contributors so if you have time and want to help but get stuck please open other issues - I'd love to know where the roadblocks are for new contributors.\n. Let's leave this open until those PRs are merged\n. What output are you expecting? If your specs are passing the output will be the same for most formatters, it's normally used for more verbose errors.\n. You can get different outputs by looking at different formatters, in this case -f pretty will get what you're after\n. Thanks for the contribution!\n. Possibly the static asset can be stored somewhere else? @stof you make a good point.\nWould be great to have a page in the docs about the logo and with some sort of specific license.\n. I guess the fact we might make it different in future (albeit no current plans) means it may make sense to version it with the docs?\n. I'll make a separate repository..\n. @stof @everzet I finally got around to splitting these commits into a new repo - see phpspec-logo\n. Overall this looks good, I left some comments and would like to see some tests covering this new behaviour.\n. Once you've addressed these comments, please open one PR against the 2.5 branch with the changes (sorry for the confusion, I'm just getting my head around managing this sort of fix)\n. No it'll get merged to 2.5 and then merged forwards into 3.0\n. Sorry for lack of response! TBH I don't quite understand the ThrowMatcherSpec either!\nI'd trigger the condition and use shouldThrow to check the exception has the right type / message.\nif you're not sure about it don't worry - I'll have a go at writing one myself before merging.\n. Reopened so I remember it exists.\n. Thanks for the contribution!\n. No concrete timeline I'm afraid. you can always tag dev-master in Composer.\nIf you want to address specific refactorings, open a PR.\nIf there are new features you want to work on, open an issue to discuss.\n. Thanks for opening both, will review on the other PR\n. Please apply comments from the other PR and re-open against this branch \ud83d\udc4d \n. I'm not sure there's a good reason to disallow 5.0-5.2?\n. I'd prefer that - if someone's tagged phpunit 5.0.4 or something in their composer config they wouldn't be able to install\n. Thanks for spotting this!\n. Argh breaks on HHVM\n. The HHVM break seems only partly related, and I can't produce locally :-/\n. My concern with this change is that Method #1 will lead to a non-working install in the case of a user not having an autoloader set up.\nThis is a big FAQ for the project (although it's mitigated recently through the warning when we try and generate the same class twice).\n. @ifdattic we don't actually have a style guide for how to write the name, I should add one\n. For now stay lowercase; I'll do an 'official' style guide with maybe the logo src that @everzet  contributed\n. Thanks\n. I think packagist reads the composer.json from the specific tag when a release happens\n\ud83d\udc4d \n. Not sure having multiple authors is correct; there aren't just 3 of us.\n. What do other projects do?\n. It appears the authors key is optional\n. Very well\n. Can you please also remove the relevant docs?\nIf you don't have time just say and I'll open a separate docs issue, but would be good to merge together\n. We'll include it in the migration guide (which I think @Sam-Burns is going to do). If they've tagged things properly they won't get 3.0.0 auto-installed so they should read the guide and change things.\nSee #896 \n. @Sam-Burns looks like this needs a rebase\n. Minor comment on the docs, code looks good \ud83d\udc4d \n. Fixes #900 \n. If your use case is to run just one test, you can achieve this by referencing the line number\nphpspec run /path/to/spec/MySpec.php:102\nI'd be open to a more generic filter mechanism if there are more use cases than this.\n. Certainly, it also seems to be missing in the docs.\nI'll close this and open a documentation issue \ud83d\udc4d \n. @mheki great!\n. Great! thanks\n. Sounds reasonable!\nWould be suitable for 2.5 branch too\n. fixed in #931 \n. Manually merged, thanks\n. @stof yeah probably if there's no sane solution.\n. @stof 5.3.3 is a special case where we also test against the lowest-preferred composer deps. As it's impractical I'm removing it though :-/\n. Thanks @mheki!\n. @stof your experience will be very helpful here!\n. @stof thanks for the advice, I've now merged one fix to 2.5 and then merged 2.5 into master (had to resolve some things) and it worked ok.\n. @stof container is injected into the Application, that's the only place I can think of where it's used as a service locator (there may be more lurking somewhere).\nI discussed the following strategy with @Sam-Burns:\n1. make our container implement container-interop\n2. make extensions able to use container-interop delegation mechanism\n3. big swap of container used internally for 'something else' \nFor me 2. is the most important, in the sense that it means extension authors don't need to worry about the mess - it's not clear to me whether the container-interop delegation system requires 1. first? If not maybe it can be optional\nAnyhow, input welcome\n. I'm happy to see what @Sam-Burns comes up with then mercilessly reject the PR if it doesn't work ;-)\n. My understanding is that if you stack services in the right order it can work to replace existing interfaces? I've not delved into container-interop enough to be an authority but rather than discuss whether it's possible or not let's see some working code.\n. @stof wait for the working (or not) code and we can critique then ;-)\n. @stof I think the container-interop approach is to have a meta-service that returns a collection, then extensions can wrap/modify that collection to add new services.\nIt's not as clean as getbyPrefix or a symfony tag + compiler pass but it is simpler\n. I admit my knowledge is not great in that area.\nI'd really ask though that we let @Sam-Burns have an attempt to solve some of these problems and show if it works.\nI'm not committed to container-interop at all BTW, but I want to decouple extensions from our container (and not make them rely on another specific container too) if we can.\n. How are you registering the MatcherProvider?\n. oh you maybe be able to use $this->__call('getMatchers', [])\n. looks good! Can you reopen the PR against 2.5 please, so it can be a bug fix on that branch?\nThanks\n. container-interop is a standard, it's not a FIG standard ;-)\nI caught up on the PSR-11 conversation over the weekend - it's worth looking also at the proposed mechanisms there.\n@Sam-Burns I am finding the amount of PRs overwhelming, especially as some commits are contained in 5 PRs. Can you reduce it to one please?\n. Yeah whichever has most relevant discussion, push to there and drop the others.\n. Anyone know what's up with Scrutiniser?\n. Maybe should report it to Composer :-/\n. You're right, I get the same error output if I try COMPOSER_ROOT_VERSION=dev-2.5 composer install this will probably be a problem ongoing then :-/\n. Assuming scrutiniser can be ignored, I'd appreciate feedback\n. Thanks, I wasn't sure about using an egotistically-named extension :-P\nMight be useful for similar cases in Behat?\n. I emailed scrutiniser support\n. I backported the fix from master that removes the circular dependency\n. Thanks!\n. @stof @deeky666 this is relevant to the conversation about IDEs doing better autocomplete - currently it's not possible to tell what method names will match\n. That sounds like a good solution, as it doesn't affect our own BC / APIs.\nI guess that means this issue isn't something we need to worry about until someone actually starts working on this functionality.\n. Thanks @Sam-Burns for the hard work exploring this possibility (thanks also @stof for rigorous review and @mnapoli for feedback).\nIt seems to me that something can definitely be done with container-interop, especially a two-pass approach, but more work is needed and I'm not yet confident it's the right solution as the only extension mechanism for PhpSpec, replacing the existing one.\nWith the 3.0.0 deadline looming, I'm not going to merge this as a BC-breaking change and force all extension authors to solve the open implementation issues.\nThat said, I'm open to having multiple extension mechanisms, so certainly if PSR-11 solidifies, or someone (Sam?) prototypes up a working two-pass or similar extension mechanism I'd be happy to have multiple extension interfaces with the right sort of adapters, and even deprecate the existing mechanisms ready for drop next year in 4.0.0.\nThe question now becomes: what needs to happen in 3.0.0 to support this slower migration, if anything?\n. Thanks for the work on this, Sam!\nIt's clarified that container delegation may work but it's quite a different paradigm and I'm not sure I want to adopt it.\nIt looks like PSR-11 may have some BC breaks from container-interop, and there's some work being done on a service definition PSR, so I'm not confident there's an 'industry standard' container interface we can depend on.\nConsequently I've added a PhpSpec-owned container interface. If you'd like to do some work on an adapter that supports container-interop for extensions that would be pretty interesting.\n. The namespace is a huge one! but I've been following the discussion about removal of ContainerException and I can imagine more little things might come up during the review process.\n. Cheers!\n. Thanks @gquemener, as this is a new feature it should be in 3.0 (so your PR to master is correct). This also means you have a brief window to not worry about BC as much.\nI'll review later - the thing about the presenter will take some thought.\n. @stof there was a suggestion to scope config to the extension, how behat does it. Maybe now is a good time to do that \n. That said we haven't been worried about BC when introducing other configs\n. I'd rather something like #189 (which we should do before 3.0.0 if we do at all)\n. See #958 \n. As we are in beta for 3.0.0 this may wait for 3.1.0 now... but there's no reason that can't be soon.\n. Can you give a specific example please?\n. I suspect what is happening is that Silex has some error handler that is providing the stack trace (to show friendly error pages to users), so PhpSpec's error handling is not being triggered.\nFor core PhpSpec we do not recommend booting your web framework. I suggest you raise this with the Silex extension (I guess this one https://github.com/lasotaartur/phpspec-silex ?) - I've not seen it before but it looks cool :-)\n. I worry if this is going too far, although as you say having half of them in there doesn't make sense.\n. OK so having thought about it it's good to add all the variations, but all the stuff that refers to scalar types (the straight shouldBeArray stuff, the shouldContain stuff) doesn't make sense when referring to an object under test.\n. Cool, thanks\n. Your composer.json says you're using PSR-0 but you appear to be trying to use PSR-4.\nPhpSpec (and your project) will try to autoload paths like src/Hkt/Spec/VendingMachine.php as declared in PSR-0.\n. No problem ;-)\n. Hm this actually looks wrong at http://www.phpspec.net/en/latest/manual/upgrading-to-phpspec-3.html\nAny idea how to properly escape these?\n. Great, thanks\n. I've not reviewed the code yet (because it's not a PR so it's more effort :-) ) but the behaviour as described could be useful - I'd probably try and phrase it as something more generic than generate if it covers iterators too.\nThe new iterable type makes me think that is the more generic terminoligy\n. I don't think having 'non-phpspefc' stuff in here makes sense; I'll take a look at whether #189 is fixable to merge\n. I had thought that setting the runner.maintainers.errors.level parameter would do this?\n. Ah, no, you're correct. They're converted to exceptions after the example has executed.\n. You've spelled instantiation wrong...\n. @pamil Good point, $config makes most sense to distinguish from container parameters\n. The behaviour you're seeing is that you get a Broken error because of the deprecation warning?\n. I've been thinking about your use case - this only really works for execution-halting errors, right?\nIf we're talking about testing things like deprecation warnings, I'm not sure this will work out because execution inside the method being tested will halt?\n. This would definitely need tests to be merged; I'm also not confident that it works ;-)\n. Awesome stuff, thanks @Taluu!\n. @everzet I'm checking that services are objects at the moment... I would find mixing parameters and services a bit weird...\nFactory might be better than Definition but there isn't a handy verb for it.\n. I've noticed a performance issue now due to too much call_user_func so I'll simplify the container implementation later.\n. Yes indeed, there were three methods:\n- set with object - object storage - now set\n- setShared with callable - factory - now define\n- set with callable - prototype-style factory - now removed\nWhy remove the third? As I went through the internal uses of set with a callable, I didn't find any that needed to be prototype-style, so I dropped support for it on the basis that it kept things simple.\nI don't think non-shared services are, in general, a good idea* but I could add a third method (definePrototype?) that supports it if there's a good case for extensions using it? I definitely don't want to keep the overloaded set because of the ambiguity when you set an object that has an __invoke.\n- Actually if they're stateless it's fine, but that's not the style PhpSpec is currently using.\n. I'm 95% confident all the places it changed in this PR, describe was appropriate. I haven't audited extensions but presumably when they add 3.0 support they'll come and tell us and we'll need some BC-compatible way to add stuff.\n. Seems to be broken in appveyor?\n. There seems to be a difference in the diff output on windows, so I can't merge this right now - it may need an upstream change in php-diff?\n. It's very frustrating not being able to test this on a windows box.\n. What @avant1 said ;-)\nThe class passed in is a double, so get_class will be returning its internal type.\n. We're not supporting this right now (or rather, we don't have a good workaround).\nI'm currently considering whether it's a use case we want to support - my instinct is that it's not but I'd be interesting to know why a shared let is important for you\n. Any more discussion can continue on #825 . Great, thanks @avant1 and @gnugat \n. One option is:\n$this->build()->shouldBeLike(new Foo(['foo', 'bar']);\n. Yes, it will. You can also do:\n$this->build()->should(function($item) {\n   // some code that checks and returns boolean\n}));\nOr write your own inline matchers, but it might require you to expose state and get messy :-/\n. For what it's worth, as factories/builders get more complex you can have them delegate to smaller (mockable) factories and it helps keep the testing simpler, or just don't worry as much about them.\n. This is now handled since we caught Throwables\n. I'm up for removing that method if we consider all the edge cases\nI'm not sure about replacing it with something less meaningful, however\n. Having a commented out assertion rather than having a type check, yeah\n. I accept it's possible I'm having an emotional reaction beause we only just changed it to use ::class\nWhat's the reason for the starting spec? We should come at it from a workflow POV, what should happen when I describe then run?\na) Nothing, spec runs with no examples, no call to action + no code generation prompt (option 4)\nb) Pending example prompt, no code generation (option 3 or your option 2)\nc) Broken result, code generation prompt (option 1)\nWe should also consider the motivations for this skeleton example\ni) Provide starting point for new users\nii) Provide starting skeleton for experienced users\nIf it's ii) then deleting that example of an example would get annoying\n. @avant1 this is already possible by convention by placing templates in .tpl in the project folder, and in the .phpspec folder in your home directory\n. @avant1 see this repo, in fact ;-)\n. This doesn't seem to have any changes?\n. You have 1 commit that adds a test and one commit that removes it; that's why there's no diff.\n. I'm going to close this because it contains no changes, please reopen if you figure out what the issue is\n. This reveals the issues we have with docs being in the same repo :-/ I can merge this but it won't make it into the stable docs until 3.0.1\n. It is, currently the default is 3.0.0, before that it was stable :-/\nI mean that errata like this are naturally going to lag behind the release tags of the software the docs are advertised as being relevant to!\n. Maybe I should be stricter about docs changes in the PR?\n. Thanks!\n. You can use shouldBeCalledTimes(1) IIRC\n. No problem :-)\nThe Prophecy (phpspec/prophecy) docs might be helpful here,\n. Are you conflating shouldBeAnInstanceOf with beAnInstanceOf?\n. Changing the dependencies here seems like a good idea, but I'm concerned that changing the return type is a break of the interface (although not a technical PHP break).\n. I've been thinking about how we approach output and there are really three interfaces:\n1) Generic output for printing (junit, dot formatter)\n2) Fancy output for coloured printing (progress, nyan cat(!))\n3) Asking questions to the user\nArguably 3 should go to stderr, and certainly there could be a different interface for each. 2) would probably remain framework-specific (i.e. coupled with Symfony\\Console in our case). 1) could be simple echo statements if symfony/console output wasn't available...\n. Longer term I'd like to move some of our stuff internally into Extensions similar to Behat (this is why I marked a lot of the container stuff internal BTW).\nSo phpspec without Symfony could just echo stuff, i.e. have some output interface with a naive implementation, and a limited set of formatters, maybe just dot.\nSymfony Output extension could add an implementation of the interface that is friendlier and allows more complex (coloured) formatting.\n. Yeah I'm talking about an interface with a default straight-echo implementation - sorry if that wasn't clear. Not echo hardcoded everywhere.\n. @guiwoda Thanks for your efforts here, but for the reasons mentioned above I won't be merging this.\nPRs like this one help us come up with new ideas, so please don't think of it as a wasted effort!\n. It occurs to me that callable shouldn't be allowed either.\n. Yep, consolidating in one place makes sense. Perhaps scalars and callable/iterable can have different messages in the error though, something user-friendly.\n. Thanks ;-)\n. This looks good to me!\n. Thanks :-)\n. Mixing real objects (new ArrayCollection) and doubles does not work in the way you're attempting to do it.\nYou can either:\na) use concrete objects everywhere\nb) use a double of ArrayCollection (probably painfully)\nc) manually unwrap the doubles and make them concrete, when adding them to the collection:\nphp\n$this->validate(\n    new ArrayCollection([\n        $pas1->getWrappedObject(), \n        $pas2->getWrappedObject()\n    ]), \n    $constraint\n)->shouldReturn(false);\n. Last commit is cleaner but introduces an issue - I need to debug before it could be merged\n. The colouring is addressed by #994 but there is still the issue of the tagged version being used for the undecorated output:\n```\nPhpSpec/Foo                                                                                  \n  11  - it is initializable\n      exception [exc:Exception(\"exception\")] has been thrown.\n/  skipped: 0%  /  pending: 0%  /  passed: 99%  /  failed: 0%   /  broken: 1%   /  771 examples\n131 specs\n771 examples (770 passed, 1 broken)\n5218ms\n```\n. The travis failure seems unrelated but needs investigation\n. This is definitely a bug, but I'd rather there was an error than a silent correction.\nWe currently check the class name is valid in PSR-0: https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Locator/PSR0/PSR0Locator.php#L360 so it'd rather catch here. It looks like the regex isn't multiline.\nWould you be able to add the checks here perhaps?\n. Great, thanks for this!\n. Ah as this is a bug fix I should have merged this to the 2.5 branch - will fix\n. In the back of my head I suspect this might be a TERRIBLE idea so feedback welcome\n. Thanks @mheki - we currently catch parse errors when including the class and runtime errors when running the methods. I guess this is another case that happens somewhere inbetween!\n. It seems this type of error is not catchable https://gist.github.com/ciaranmcnulty/b1b8379fbafbdd76a50381a7382944ac\n. If you want to prototype it go for it. It's possible reflection will crap out first though.\n. Possibly we could use https://github.com/Roave/BetterReflection but TBH there's probably a whole class of errors that aren't catchable.\nWill have to improve the experience when an uncatchable error happens.\n. I'm concerned we'd be encouraging people to add methods without specs - perhaps we should offer to write a spec? ;-0\n. Presumably you didn't notice that PhpSpec hadn't finished yet?\nAdding a timeout is actually pretty hard with the current architecture, and catching these things is notoriously difficult: https://en.wikipedia.org/wiki/Halting_problem\n. Ah, presumably PHP is triggering a fatal that isn't being displayed for some reason - that should be fixable, thanks!\n. I think MethodGeneratorSpec predates us introducing PHPUnit (and specs like that are partly what drove the introduction) \n. I'd rather we didn't encourage inheritance\n. In terms of limiting your effort for this increment I'd suggest covering those scenarios with 'Then I should not get prompted' steps\n. Overall code looks good - there are probably small errors a closer review will catch :-)\nOne thing that's missing is typehinted arguments in the interface - I suspect this is going to generate tonnes of edge cases...\n. @jameshalsall If that code will help out, feel free to merge it into phpspec core.\nI'm going to raise an issue to resurrect the idea of bringing that functionality back into core either via my extension, @gnugat's, or a third option. I mean maybe pull in the specific infrastructure you need to do the typehint generation for this PR, but not enable it for the other cases. @gnugat Most interfaces have type hints in their arguments, so to implement the interface methods in the class need to have matching type hints\n. @jameshalsall what's the status of this, any idea why the failure?. @jameshalsall are you able to fix the test failure?. This looks good to me, @jameshalsall - can you update the docs?. @MarcelloDuarte I see your point but I'm not sure I agree:\n1. Testing the type system\nWe won't be able to generate specs with meaningful behaviour, we'll only be able to generate things like:\nphp\nfunction it_takes_foo_and_returns_bar(Foo $foo)\n{\n $this->baz($foo)->shouldHaveType(Bar::class)`\n}\nThis is kind of only making assertions about types - the interface contains that already:\nphp\npublic baz(Foo $foo) : Bar\nSo for me in this case, asserting that the class implements the interface is sufficient; we will write specs when we have some actual behaviour to describe aside from the type system\n2. Technical difficulty\nCurrently we don't generate type hints for method arguments or return types, therefore\nphp\n $this->baz($foo)->shouldHaveType(Bar::class)`\nWill lead to generation of:\nphp\npublic baz($foo) { /* Todo message */ }\nWhich will fail to fulfil the interface's contract and cause an error\n(I want to revisit type hint generation at some point BTW). @jameshalsall good to know!. I'm inclined to close this just due to inactivity, although the work so far is good!\n. I'm going to close this, please reopen if you get time to work on it. I guess when I said Value Objects I was more thinking things like DTOs etc.\n. @everzet That's what I'm thinking. It remains to be seen if it's possible to distinguish static constructors from other static calls, but if we prompt then the people writing horrible static code can bail out.\n. In the absence of mind control it is not the only static calls people will attempt ;-)\n. What version are you using?\n. Thanks for this! Good catch\n. Great idea @stof !\n. Probably a good idea - Make was only really useful for building locally.\n. @unfunco can you rebase this against 2.5 please?\n. Good stuff, thanks!\n. Removing 7.1 from the allow-failure section was possibly an oversight on my part - I had assumed that during the RC phase it would be fairly stable. Lesson learned!\nThere's still value in testing against 7.1RCs as well as nightlies, but probably both should be allowed to fail.\nI agree with @stof - we should test DEPENDENCIES='dev'agains stable\nAlso... should we be tagging against php ~7.0.0 and add 7.1 support when we're sure it works? Otherwise we're doomed to repeat this dance again when 7.2 is released (due to the way composer works this won't protect our users from broken versions until we bump to 4.0.0)\n. That sounds good to me\n. Thanks @unfunco \n. This is quite specific to ArrayObject, but presumably would be useful for any other Traversable objects.  Similarly shouldHaveKey ought to support Traversable and ArrayAccess.\nI'd rather we support these more generic cases than do something specific to ArrayObject, so don't want to merge this on that basis.\nOn another note, rather than adding cases to existing matchers it'll be better to add additional matchers (it's fine for matches to support the same method invocation but act on different types)\n. cool, thanks\n. Great, thanks for adding this!\n. Thanks, that simplifies things a lot\n. Looks good, if you can get it passing on Windows. Thanks!\n. Take a look at how https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Process/ReRunner/WindowsPassthruReRunner.php sets environment / detects Windows is being used\n. What happens if you remove the trailing slash on src and do a composer update before trying again?\n. What happens if you remove the trailing slash on src?. This looks really useful - I'm not sure about the matcher name though? maybe shouldBeApproximately instead / as well?\n. this looks great, thanks!. I'll close as it's a duplicate. Seems to be becoming a FAQ - I wonder if we can merely handle the error message better?. I'm not aware of anyone working on it - I'm not convinced it's something we should support.. We're using the scrutiniser PRS-2 rules . @mahalay can you resolve the conflicts please?. Something now seems to be breaking on PHP 7.2. Ah it looks like it's the dev dependencies build that's failing https://travis-ci.org/phpspec/phpspec/jobs/288129896. Can you rebase this please?. Thanks!\n. From what I can see all classes that implement ThrowExpectation are going to get their match() method called, so I can't see a situation where this change would cause a BC break (i.e. the code will already be broken).\nI'm nervous though - @stof what do you think?\n. A further look shows that anything constructed by the ExpectationFactory will immediately have match() called on it:\nhttps://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Wrapper/Subject.php#L340-L346\nSo we only really need to worry about people using the interface outside of PhpSpec - something I don't think we need to support.\n. Thanks @Sam-Burns\n. @unfunco Any idea why this is failing on travis?\nIs this a bug fix (i.e. should target 2.x?)\n. I think this is out of date?. In what ways do you think it will be more readable?\n. I'm genuinely asking! No disagreement ;-)\n. @stof please be nice, it's a school assignment ;-)\n. @Harincka I'm going to close this, only because you didn't completely convert the file to Markdown.\nIf you'd like to resume doing this in future then please re-open the Pull Request - on reflection it makes sense for the main README to be in the most common format.\nThanks for contributing!\n. This is intended, but the documentation should reflect it better.\nYour spec says the object should throw a DomainException and indeed it does (albeit a more specific DomainException).\n. It is likely possible to invoke should() with an appropriate deferred matcher - however writing deferred matchers is indeed more complex. I wonder how we can make this easier?. I'll leave this open, we should consider whether shouldThrow can handle auto-unwrapping. Of course. I forgot how old those changes are. Maybe the way to proceed is to make it work in those versions?\nI'm AFK for a few days (on mobile) so if you want to do a release (either of this reversion or a fix) I would be very grateful . I'm not happy tagging another patch release on the basis 'probably will work'. I'll try clearing the Travis cache this evening perhaps . I would not be opposed, I think? However this could be achieved via a bash script, make file.... We can retain support for 1.0 if there aren't any breaking changes on our part - @mattsches can you modify your change to allow either version?\n. Thanks @mattsches!. Because you were running it on the travis container with a wide terminal.\nvar_dump-based debugging wins again over fancy stuff ;-). \ud83d\udc4d Can you target 2.5 so we can merge forwards please?. I agree. Like the other PR can you target 2.5 branch? Then I will merge forward onto master. Ah! good catch thanks. It'll be a new minor version... will take a look this weekend. PhpSpec 4 is at least 6 months away, and PhpSpec 3 will live another 18 months ;-). Only reason I've not merged this is I'm not convinced CompositeResource is a good name - it still feels vague.. I'm going to close this, @unfunco  - this naming needs improving but I'm not sure what a good name is yet. You can compare objects using shouldBeLike, which is equivalent to == comparison in PHP, and should fit your use case.\nI find when I do this myself I often end up building some sort of equality logic into my VOs, for which you could introduce a custom/inline matcher. You can (or I can) change the target branch of a PR. Thanks!. That was quick! . HHVM is only a temporary removal until I figure out how to add it to travis again (it currently fails to composer update). Because this is reported against Prophecy I'll close here. @Mrkisha yes, which will drive you towards decoupling your objects \nIf you have an object that has a mixture of domain logic and library interactions, you'll split it into an object that has domain logic (+ is unit tested) that interacts with an interface you define (that is mocked in the unit test), plus an adapter object that translates your interface into the underlying library, that you can integration test.\nThe advantage is that this introduces a nice extension point for when you start using a different library later. Examples that specify behaviour:\nhttp://www.phpspec.net/en/stable/manual/getting-started.html#specifying-behaviour. As we discussed offline, something like the following is testable via $this->shouldThrow()->duringFoo():\n```\npublic function foo()\n{\n    if ($condition) {\n        throw new Exception();\n    }\nreturn $this->bar();\n\n}\nprivate function bar() {\n    yield 1;\n}\n```\nHowever exceptions only thrown during the generator itself should correctly not be detected by shouldThrow :-/\nPerhaps we need ->shouldThrow()->duringIteration()?. To specify it doesn't throw an exception I'd write a test using something like shouldIterateAs and the fact that test passes will show no error occurs.\nWe don't currently have a good way to describe an exception during iteration, as described above. Ideas welcome!. I've been doing this (prompted by a conversation with @sroze):\n$this->getGenerator()->shouldThrow()->duringCurrent();\nI feel that's verbose enough that we don't need any extra features to support this sort of spec. This if fixed by @carlosV2 . I'm not really happy getting the message from the container - it feels like a premature abstraction to assume the confirminggenerator is reusable but only classname needs to be replaced in the message.\n. OK I think this looks good. @carlosV2 can you rebase against 2.5 as it's a bugfix?. Thanks!. @Sam-Burns can you target 4.0 branch please?. D'oh of course it still works with 5.x - my bad. This looks really useful, thanks!. This doesn't autocomplete for me - it looks like it's quite sensitive to the location of the composer file.\nTo do it more cleanly we could perhaps get the composer Classloader object (which is obtainable in bin/phpspec where we include the autoload.php and use its API to query the namespaces?. @fullpipe New version autocompletes for me - nice to see it in action!\nI think so far we don't have any autocomplete prompts, it'd be good if it could fit in more with the visual style of the other prompts. \nAlso @avant1 raises a bunch of good points - I think you should look at \\Composer\\Autoload\\ClassLoader::getPrefixes / getPsr4Prefixes too. @greg0ire If you're thinking of using this also in your PR, adding a component for it with a relevant interface would be good rather than having it in 2 places. @fullpipe now we have a component for listing the available namespaces (see #1078) could you perhaps use that for this feature?\n. Thanks for the hard work!\n. This is fixed in today's releases, thanks to both of you. You can target this at 2.5 (to be included in the last release). @vitorf7 You need to rebase so that the entire history of master branch isn't also part of the PR. Can you retarget this to 2.5 please?. Why does symfony/console need to be so high? This may cause issues with us testing older symfony sites :/. I don't see a compelling reason to drop support yet (I'm more wary when projects don't have published roadmaps - with Symfony etc we stated a while ago when we'd be dropping support). I guess if we wave our hands a little this is a 'bugfix' but bear in mind PhpSpec 2.x is going to be EOL in ~3-4 months.\nIf Prophecy is going to continue to maintain support for these older versions of PHP then the testing strategy will get complex (e.g. you may need to rely on abandoned PhpSpec versions)\n. I merged your backport to allow 2.0, will do the same with 3. I will when I've gone through the rest of the open PRs. Yes I'm merging into the lowest branch then merging forwards (so far seems to work)\n. This is great, thanks!. This looks good so far. Thanks @greg0ire - now to use it!. Hm that's a PHP error.\nAre you sure you're running PHP 7.1 when executing PhpSpec?. If so can you provide a class/spec that produces this behaviour please?. If you're going to pass a mock inside a 'real' object, you need to unwrap it\n$value = new MySpecialValue($foo->getWrappedObject(), $bar):\nSee http://www.phpspec.net/en/stable/cookbook/wrapped-objects.html. Yep :-). Argument::* is only usable in setting up the doubles, not in the actual method call on $this. You can use $this->callOnWrappedObject('should', [true]). I'm always unclear which config files should be hidden files and which should not - is there a best practice?\nIf not then allowing both makes sense. If we're doing it wrong I'd rather allow both and change it in 4.0. I guess I was hoping for 'what files should be hidden in UNIX' written in the 70s\nI don't see any harm allowing both. Thanks!. Looks good, needs checking it's still legible on a dark-background console.\nThis is enough of a bugfix to target the 2.5 branch, too. @a-ast can you please rebase this branch against 2.5 please?. Great, thanks!\n. Awesome - this may take a while to review :-). If we're not using any of the features I don't see the point TBH. If we can find a workaround that's the best option. At first glance this would appear to be a PHP bug not a PhpSpec bug?. (In that PHP isn't supposed to break BC). (will probably still fix it ;-) ). This also seems to be a Prophecy bug? I'll see if I can reproduce. Finally fixed in #1108 . Cool, thanks. yep makes sense for the canary build - I guess the nightly flipped to 7.2?. @Sam-Burns can you target this to master please?. Are these actual issues or is PHP 7.2 being an idiot?. The get_class change seems to only fix the tests to not trigger the error case, is that right? I've never been clear what the null case is here anyway.\nIf PHP has broken the ability to add extra optional parameters to inherited methods let's stop that happening because it's a massive BC break. I see so there's no reason to ever call null here outside of the test suite?\nIn that case the get_class change is a no-brainer and mergeable. For the arguments I'd rather wait and see if 7.2 really makes a huge BC break like that once stable.\nCan you open 2 PRs and we'll merge one, leave the other hanging?. I think ->shouldThrow()->duringCurrent() is enough for me (and quite explicit about where during iteration the exception is thrown). Thanks, sam!. @stof ah so inheritance is ok in our code but prophecy is adding an incorrect third level when generating the double?. ```\ninterface IO\n{\n    function write($message);\n}\nclass ConsoleIO implements IO\n{\n    function write($message, $indent = null) {}\n}\n$x = (new \\Prophecy\\Prophet())->prophesize(ConsoleIO::class);\n```\nThis seems to work for me\n(on a version where your example errors)\nWill try and narrow down a reproducible case.. Revealed and even called the method.\nI looked at the generated class src and the interface is from the direct parent, so not sure what combination of factors is triggering the error yet. Still seems ok, but yeah maybe it's the order of loading?. Yes PHP 7.2.0-dev (cli) (built: Jun  1 2017 01:32:36) - which displays the error when I add the ConsoleIODouble directly as in your example. 1.7.0. Actually, prophesizing the PhpSpec object causing the error in my testing script didn't trigger the error either.\nI checked again and the problem is fixed by #1108 \nI've not got time right now to see why this edge case was triggering a prophecy error, but from what I can see prophecy is handling these cases fine. I guess so - since the typehints on the specs aren't actually used this sort of thing is possible . Fixed the nightly though \ud83d\ude0e. Thanks @gquemener - not sure it's best practice but it's certainly a FAQ!. This looks good to me - as it's a bug fix can you please target this PR to the 2.x branch? We can include it in the final 2.5 release. Actually this is different enough on 2.5 to need a manual backport.  Thanks!. Good spot, thanks!. It doesn't look like phpspec/phpspec was updated.\nAre your specs exercising pure domain objects, or are there infrastructure dependencies?\nIt might be a good idea to try with blackfire.io or a similar profiling tool that can show a diff between executions. invokeArgs is basically 'running the spec' so I'd suspect it's something in one of your dependencies. I don't have a simple answer, I'm afraid = on that line we're just comparing the objects with == so it's likely this is an error message from PHP.\nIf there's a safer way to compare objects we can try it but I can't think of one.. Sounds like a good idea - I've some long-lived plans to clear up the contracts around how we output for display (our current IO abstraction is very fine-grained) - it'd be good to make it all look nicer as part of the process.. This needs a rebase against master. I've removed the WIP title because this is already 'good enough' and can only get more polished before merge :-0. Great work, thank you!. So you want to name the specific files to execute?\nA simple way might be for us to accept more than one Locator:\nbin/phpspec run spec/Foo.php:14 spec/Bar.php:16 ?. As this is just to integrate with a tool, I'm not sure supporting extra config is a good option.\nYou could write a PhpSpec Extension  that implements a Locator you have complete control over?. Maybe we can decouple the idea of 'a list of specs to run' from 'the config file' - I think that's where my discomfort stems from.\nMaybe we can have a filetype that lists the specs to run (.specs?) this would mean you could do:\nphpspec run /path/to/my.specs?. I dunno yet ;-)\nSimples would be something like:\n/path/to/SomeSpec.php:81\n/path/to/Differentspec.php:41\netc.. Whilst discussion rages in doctrine/instantiator, we should consider handling this case in a more user-friendly manner. Possibly legacy reasons, but there are some cases where e.g. shouldHaveType doesn't trigger instantiation (where instantiation has not been described). This has been fixed in Prophecy: https://github.com/phpspec/prophecy/pull/337 so should appear in the next prophecy release. Thanks for the fix, what caused it to be triggered?\n(because this shows a hole in the test suite). Thanks!. Thanks!. Can you show/check how it appears on a black background too?\nAs this is a fix please point the PR to the 3.4 branch\nThanks!. I've changed the base of the PR, can you rebase your branch appropriately please?. Thanks @MarcelloDuarte!. Thanks for reporting, this looks like an issue with the new typehints in PhpSpec 4 - it's possible the underlying problem is happening in other formatters as well. This is dropped. Merging because Travis successfully built against RC1. Yes, was waiting until the RCs showed they were stable, Sara tweeted that it's GC soon so low risk - see 4.0.4. Looks good, thanks!. From what I can see this appears to be the same as this Prophecy bug (i.e. PhpSpec isn't making things worse) https://github.com/phpspec/prophecy/issues/192. Good spot!. How would we recommend it? Is the fact there's no return type on our generated specs enough?. Yeah the in the repo it's:\n\nwe drop visibility in documentation + generated specs\nwe require it_ and assume the rest will be snake case in specs. I don't think there's any action needed here. Great, thanks!. BTW this is crazy that that's slower but LOL PHP. Oh! I didn't realise blackfire introduced this sort of effect - thanks @fabpot . Well, it was good while it lasted :-). shouldBe is like === so checks identity, so I'd expect it to fail\n\n. Great stuff \ud83d\udc4d\nHow can we add regular performance profiling? Is Blackfire free for open source?. Thanks, @bendavies . It seems your user is unable to make the spec folder? I'd indeed expect this to be a sensible error\nNote also your shell is removing the backslashes from your FQCN. I really don't see the point of strict_types by default, but might be in a minority :-/. I've been thinking about this; because this is an opt-in feature in PHP I don't see a need to push it on users when I don't particularly think it's a best practice.\nPossibly the docs around custom templates could use this as an example though?\nHappy to hear counter-arguments!\n. The configuration would be 'use a custom template'. @sgolemon yes I understand how the mechanism works. I'm not keen on 'pushing' including the optional non-default declaration by default.. I don't want to make developers enable a non-default feature by default - will accept any docs changes to make the process for adding a custom template simpler, of course. I don't think our current tagging excludes the latest Prophecy, so anyone doing an update will get 1.7\n . Looks useful - would benefit from some tests + doc changes. Also, see #1032 . Just linking so I remember to close it :-)\nCould you also add an equivalent of the shouldIterateStarting?. Thanks @sroze !. I meant rather than set the dimensions to something that doesn't trigger the bad wrapping, the wrapping should handle more dimensions correctly. Always forget this damned thing!. The old behaviour was to create the folder, so I don\u2019t have any problems doing that . We only depend on it in autoload-dev - the trick is to test phpspec in CI effectively... Let's wait until at least an RC, too. The phpspec suite is failing, which makes me think it is not actually symfony 4 compatible yet?. Hmph no, it's one of the other dependencies that's failing I think. If anyone can explain/resolve the build failure, I'll merge. Still failures after building against prophecy dev-master after that patch is merged. I'm sorry to report that @gnugat got there already with #1166 . Really appreciate the effort though! . This is a prophecy issue so should be raised on phpspec/prophecy. Unfortunately at the moment you can't have specs or let/letgo in files that are't loaded by phpspec.\nThis includes traits/abstract classes where you are loading them via an autoloader - this doesn't give phpspec the chance to process the file and do some of its magic. Thanks for reporting!. Thanks for the merge @jakzal :-). Good catch, thanks!. Is this related to #1165?. Thanks!. Thanks @jakzal . Should be fixed in 4.2.2 - please let us know. Yaml parser got stricter?. @kornrunner this was included in 4.2.3. Describe how it's used.... It represents a class and a spec, and the aths at which they can be found.\nIt's created by a ResourceLocator\nIs it a Location perhaps?. We're not having the word Test please ;-). That's in the case an Exception is thrown but it doesn't have a className?\nI'm not sure how that could occur - maybe the correct strategy would be to throw $e?\n. Thanks @greg0ire!. Thanks!. Did you try shouldBeApproximately()?. When you type:\n/bin/whatever *Spec.php\nThe pattern is normally expanded by your shell. In bash $argv will now contain something like:\nphp\narray(3) {\n  [0]=>\n  string(12) \"bin/whatever\"\n  [1]=>\n  string(11) \"BarSpec.php\"\n  [2]=>\n  string(11) \"FooSpec.php\"\n}\nTo me this implies that we could get some of the functionality you want, simply by allowing multiple spec locators to be given at the CLI?\nThis won't work if you want to base the patterns on FQCN, but the bash expansion of the patterns is going to make that quite tricky I fear. Thanks for this!. Thanks!\nGood job it was only metadata :-). Sure send a PR. It\u2019s all in the docs folder of this repo. It's for an extension that lets people use annotations for naming examples, instead of it being inferred from the method name\n. I can't reproduce this, has it been fixed?. It looks like it's dependent on the class name/namespace - is it possible to share that?\n(BTW does chess.com use phpspec? I love that site!). Your report steps are missing a git checkout phpspec-1194 :)\nHave reproduced \ud83d\udc4d \n. OK this happens when the method under spec returns a scalar value (null will produce a 'calling method on non-object' message, an object will be checked to see if the method exists).. Great! thank you. @aduss can you look at the travis failure please?.  Can you share your phpspec.yml and maybe your composer autoloader?. Perhaps we could mention files that are parsed but ignored, in the output?. There isn't currently a way to do it via the config file. You can also write matcher objects and point to them in the config file. It seems to be failing. Great! Thanks. @jakzal travis doesn't like it. Or have it so the wrapping doesn't break on different platforms. It looks like there are some CS fails, and the minimum Prophecy version will need to be bumped to a newer tag that supports these void returns.. Maybe just bump it in dev? I'm not sure how we'd effectively test it against older versions though. Great, thanks! The Appveyor config is fixed on master so I\u2019ll merge across later. Yep just need to resolve a conflict in appveyor when I\u2019m back on WiFi . Can you rebase against 5.0 please?. @meridius we will need the tests to pass with older versions of prophecy still. Can you explain why this is an improvement?\nThe return type is dictated by the parent Matcher interface; some matchers return a DelayedCall. Oh I see, I wonder why the tests didn't catch it at all?. Thanks!. This is for whether the subject namespace is before or after the PhpSpec/Prophecy ones?\n. It makes sense to me in core then - we\u2019d just need to document the existing template somewhere in the docs for people who want more control.\nPlease feel free to send a PR :-). @remicollet yes #1212 will address this when merged. This is now just waiting on https://github.com/travis-ci/travis-ci/issues/9717#issuecomment-421521049 so we have a test env. I concur - there's some nice little things, but nothing we'd need to add functionality for \ud83d\udc4d . Why does the PHP version bump count as a BC break? What issue is it causing for you?. Yes but if you run composer update you will get the appropriate version, won\u2019t you?. I think we can agree to disagree :-). This is because test() doesn't throw anything, it returns a Generator object. The code inside that generator will only be run when you iterate:\n```php\nfunction foo()\n{\n    throw new Exception();\n}\n$f = foo(); // no exception here\nforeach ($f as $b) {\n    // exception before here\n}\n```\nYou can test this behaviour by trying to use the generator (e.g. using its ->current() method:\nphp\n$this->test()->shouldThrow(...)->duringCurrent();. This is a dupe of #1057 but maybe this should be documented so I'll leave open as a docs issue. I wonder if this could be the -vv behaviour?. Or we have both versions and segregate them out using tags maybe?\nLike @old-prophecy and @new-prophecy, and add ~@old-prophecy into the behat.yml filter, then we can override it in the travis run when using lowest-deps. Thanks for this \ud83d\udc4d . I think #1224 fixed this in a less complex way - thanks for the work though!. Thanks @jakzal !\n. @DonCallisto Is the aim just to be more specific than the implicit null return?. Oh! of course. Thanks!. Is it possible to write a test?. Really nice, thanks. I'm in favour of the minimal detail needed to validate the message from prophecy is being displayed - it's not this test suite's job to validate that the message is correct. The changes look ok; can you target the 4.3 branch please (as it allows recent Prophecy). Thanks @Sam-Burns !. @kevincarrogan readthedocs builds it all inside their PaaS - can probably give you a login if you're willing to debug\n```\nRead the Docs build information\nBuild id: 7868557\nProject: phpspec\nVersion: latest\nCommit: df8a7b23b662f47fdf782b29251a3530a57e8735\nDate: 2018-10-01T02:43:12.280848\nState: finished\nSuccess: False\n[rtd-command-info] start-time: 2018-10-01T07:43:14.514909, end-time: 2018-10-01T07:43:14.521705, duration: 0, exit-code: 0\ngit remote set-url origin https://github.com/phpspec/phpspec.git\n[rtd-command-info] start-time: 2018-10-01T07:43:14.579354, end-time: 2018-10-01T07:43:14.858577, duration: 0, exit-code: 0\ngit fetch --tags --prune\nFrom https://github.com/phpspec/phpspec\n   6c0351a4..df8a7b23  master     -> origin/master\n * [new tag]           5.0.3      -> 5.0.3\n[rtd-command-info] start-time: 2018-10-01T07:43:14.914723, end-time: 2018-10-01T07:43:14.925156, duration: 0, exit-code: 0\ngit checkout --force origin/master\nPrevious HEAD position was 6c0351a4 Prepare for 5.0.3 release\nHEAD is now at df8a7b23 Merge pull request #1212 from ciaranmcnulty/php-73\n[rtd-command-info] start-time: 2018-10-01T07:43:14.996980, end-time: 2018-10-01T07:43:15.003863, duration: 0, exit-code: 0\ngit clean -d -f -f\n[rtd-command-info] start-time: 2018-10-01T07:43:15.126015, end-time: 2018-10-01T07:43:15.131429, duration: 0, exit-code: 0\ngit branch -r\norigin/2.5\n  origin/3.4\n  origin/4.3\n  origin/HEAD -> origin/master\n  origin/doc-version\n  origin/master\n[rtd-command-info] start-time: 2018-10-01T07:43:16.490694, end-time: 2018-10-01T07:43:18.599075, duration: 2, exit-code: 0\npython2.7 -mvirtualenv --no-site-packages --no-download /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest\nNew python executable in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/bin/python2.7\nNot overwriting existing python script /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/bin/python (you must use /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/bin/python2.7)\nInstalling setuptools, pip, wheel...done.\n[rtd-command-info] start-time: 2018-10-01T07:43:18.654658, end-time: 2018-10-01T07:43:21.188346, duration: 2, exit-code: 0\npython /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/bin/pip install --upgrade --cache-dir /home/docs/checkouts/readthedocs.org/user_builds/phpspec/.cache/pip Pygments==2.2.0 setuptools<40 docutils==0.13.1 mock==1.0.1 pillow==2.6.1 alabaster>=0.7,<0.8,!=0.7.5 commonmark==0.5.4 recommonmark==0.4.0 sphinx<1.8 sphinx-rtd-theme<0.5 readthedocs-sphinx-ext<0.6\nRequirement already up-to-date: Pygments==2.2.0 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: setuptools<40 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: docutils==0.13.1 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: mock==1.0.1 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: pillow==2.6.1 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: alabaster!=0.7.5,<0.8,>=0.7 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: commonmark==0.5.4 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: recommonmark==0.4.0 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: sphinx<1.8 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: sphinx-rtd-theme<0.5 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: readthedocs-sphinx-ext<0.6 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages\nRequirement already up-to-date: sphinxcontrib-websupport in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from sphinx<1.8)\nRequirement already up-to-date: six>=1.5 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from sphinx<1.8)\nRequirement already up-to-date: requests>=2.0.0 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from sphinx<1.8)\nRequirement already up-to-date: packaging in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from sphinx<1.8)\nRequirement already up-to-date: typing; python_version < \"3.5\" in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from sphinx<1.8)\nRequirement already up-to-date: imagesize in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from sphinx<1.8)\nRequirement already up-to-date: babel!=2.0,>=1.3 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from sphinx<1.8)\nRequirement already up-to-date: snowballstemmer>=1.1 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from sphinx<1.8)\nRequirement already up-to-date: Jinja2>=2.3 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from sphinx<1.8)\nRequirement already up-to-date: idna<2.8,>=2.5 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from requests>=2.0.0->sphinx<1.8)\nRequirement already up-to-date: urllib3<1.24,>=1.21.1 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from requests>=2.0.0->sphinx<1.8)\nRequirement already up-to-date: chardet<3.1.0,>=3.0.2 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from requests>=2.0.0->sphinx<1.8)\nRequirement already up-to-date: certifi>=2017.4.17 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from requests>=2.0.0->sphinx<1.8)\nRequirement already up-to-date: pyparsing>=2.0.2 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from packaging->sphinx<1.8)\nRequirement already up-to-date: pytz>=0a in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from babel!=2.0,>=1.3->sphinx<1.8)\nRequirement already up-to-date: MarkupSafe>=0.23 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Jinja2>=2.3->sphinx<1.8)\nYou are using pip version 9.0.1, however version 18.0 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\n[rtd-command-info] start-time: 2018-10-01T07:43:21.263551, end-time: 2018-10-01T07:43:22.648394, duration: 1, exit-code: 0\npython /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/bin/pip install --exists-action=w --cache-dir /home/docs/checkouts/readthedocs.org/user_builds/phpspec/.cache/pip -r docs/requirements.txt\nCollecting git+https://github.com/fabpot/sphinx-php.git (from -r docs/requirements.txt (line 3))\n  Cloning https://github.com/fabpot/sphinx-php.git to /tmp/pip-ZIgOT2-build\n  Requirement already satisfied (use --upgrade to upgrade): sphinx-php==1.0 from git+https://github.com/fabpot/sphinx-php.git in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from -r docs/requirements.txt (line 3))\nRequirement already satisfied: Sphinx in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from -r docs/requirements.txt (line 1))\nRequirement already satisfied: sphinxcontrib-phpdomain in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from -r docs/requirements.txt (line 2))\nRequirement already satisfied: sphinxcontrib-websupport in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: six>=1.5 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: requests>=2.0.0 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: docutils>=0.11 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: packaging in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: typing; python_version < \"3.5\" in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: Pygments>=2.0 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: setuptools in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: imagesize in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: babel!=2.0,>=1.3 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: snowballstemmer>=1.1 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: Jinja2>=2.3 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: alabaster<0.8,>=0.7 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: idna<2.8,>=2.5 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from requests>=2.0.0->Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: urllib3<1.24,>=1.21.1 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from requests>=2.0.0->Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: chardet<3.1.0,>=3.0.2 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from requests>=2.0.0->Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: certifi>=2017.4.17 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from requests>=2.0.0->Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: pyparsing>=2.0.2 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from packaging->Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: pytz>=0a in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from babel!=2.0,>=1.3->Sphinx->-r docs/requirements.txt (line 1))\nRequirement already satisfied: MarkupSafe>=0.23 in /home/docs/checkouts/readthedocs.org/user_builds/phpspec/envs/latest/lib/python2.7/site-packages (from Jinja2>=2.3->Sphinx->-r docs/requirements.txt (line 1))\nYou are using pip version 9.0.1, however version 18.0 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\n[rtd-command-info] start-time: 2018-10-01T07:43:22.693939, end-time: 2018-10-01T07:43:22.762542, duration: 0, exit-code: 2\npython setup.py install --force\npython: can't open file 'setup.py': [Errno 2] No such file or directory\n```. I imagine PHPUnit has very similar trade-offs as we do?  We have a few Symfony dependencies for instance.\nNobody on twitter said they use the phar so I guess we can leave it not being built, for now!. @stof phar with scoped classes solves it, AFAIK. @devsoul ok I guess if 1 person uses it ;-). I turned it back on for the next release. Why's that?. Can you define 'must'? ;-)\nAre the PHP Police going to arrest me?. Real issue is that PSR-4 support isn't bulletproof yet, @greg0ire did some work on it but it's currently behind a config flag.. The name is_initializable is misleading here for sure\nWe are checking that the type is correct (in your case Version is a Version so true) but we aren't checking it is initializable.. @chris-kruining TBH I thought so, but evidently not (and I'm not sure if it's changed at some stage). @chris-kruining I've reminded myself how it works\nWe do ensure there's an instance but we don't necessarily use the constructor - we use the PhpSpec\\Util\\Instantiator if there's no constructor described, which delegates to doctrine/instantiator and can create an instance without using the constructor. @chris-kruining check out ReflectionClass::newInstanceWithoutConstructor :-)\ndoctrine/instantiator basically uses this, with some fallbacks to deserialisation and other nasty methods when that strategy will fail (older PHPs + a bunch of edge cases for internal types). Oh that's interesting; is there a way to add 32-bit architecture to the travis grid I wonder?. In the interim I guess a lower number will fix it?. Can you send a PR? :-). Thanks @remicollet . Sorry for the slow feedback\nit's hard to tell what effect this has, is it possible to write a test case around it?. This looks good, thanks!\nDocs would be welcome. We'd be cooler. If you just need an object with a method you can call why not use a builtin like ArrayObject rather than one that hits the filesystem\n. See b31c97f\n. see eb8119c\n. I've fixed\n. I've fixed again ;)\n. Yes, not using my usual editor :-/ Will fix.\n. It's not actually used here so I removed it (because the input is not interactive, the Event is never examined to see which Exception was thrown)\n. I've moved some of the config into let() as suggested\n. Could you add a check here to see whether $class was numeric?\nif (is_numeric($class)) {\n    $class = $params;\n    $params = array();\n}\nThat would probably preserve BC\n. +1\nThis will mean a user has to update all extensions associated with PhpSpec, then update their configurations. And it doesn't enable anything that wasn't possible before, just changes the syntax Extensions must use.\n. @stof Extensions at present could access the YAML config, the question is whether extension-specific config should be under the extension key in the extensions: stanza, or whether extensions should be able to look at global config.\n. Short array syntax here is causing the 5.3.x Travis builds to fail\n. It might be shorter to do array_key_exists on $_SERVER['HOME'], would keep the expression shorter\n. I think it's ok for this to be abstract, if your intention is to force us to always use one of the subtypes instead?\n. Could this be injected?\n. Not sure you need the temp variable\n. PHP manual [http://www.php.net/manual/en/language.oop5.basic.php] gives a valid class name as:\n^[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*$\nI can't see an equivalent official regex for namespaces.\nIs this equivalent to what you have, or are there some extra allowed characters? Or is there a rule in PSR0 about this that overrides?\n. Also, I think this allows this allows Foo\\/\\, which would not be valid I think.\n. Yep. Will fix.\n. I've pushed a fix.\n. I don't think we can be sure that spec code will be using PHP_EOL as a line ending\n. Rather than trim, you could modify your matching regex to ignore whitespace at the start/end.\n. It would be better to initialise to '' or null and then set it to the method name later if nothing is found in the comments.\n. Take these comments out and raise as an issue ;-)\n. I agree we shouldn't use unicode, but if neither PHP nor PSR0 prevent it, I don't think that this validator should.\n. @stof For my interest, do you have a reference for namespace chunks following the same rules as classes?\n. You're doing this operation on $method->getName() and in some cases discarding the result immediately.\n. You already have a regular expression :)\nSo it's \"regular expression better than trim + regular expression\"\n. you can use preg_split('/\\R/', $string) to split around anything that looks like a newline\n. This if is redundant, given the regex you're matching against immediately afterwards.\nYou can make this behaviour the 'else' of the preg_match.\n. This is identical to NegativeThrow::__call, can the the code be reused?\n. This is identical to NegativeThrow::during, can the the code be reused?\n. I think you can use $expectation in this expression rather than reinstantiating\n. Normally I'd say yes, but instantiation was happening here and I wanted to change the configuration process as little as I could get away with to implement the feature.\nHowever, reasons for doing Dependency Injection here would be:\n1. Wanting to test Application - we don't yet\n2. Wanting to leave Application open to being used with different Containers in future - we don't currently\n3. Clarifying the design - It's Symfony2's design ;-)\n. I don't understand this comment @MarcelloDuarte - the action he's taking is doing 'phpspec describe', surely that's describing the class?\n. This should be something like 'Running a spec with a class that doesn't exist' - 'Running a spec' is too generic I think\n. This doesn't parse. Try:\nGiven I have written the following spec in \"spec/Scenario4/MarkdownSpec.php\"\n. +1 it does seems duplicative of ApplicationTester from symfony.\n. Newline please\n. There must be a cleaner way to do this ;-)\n. please use DIRECTORY_SEPARATOR (and in other places)\n. I would use 'Given I have written', or even 'Given I have a spec...'\nThis tense is talking about the present state 'I have this situation...' but refers to the past events that caused it ' ... because I have done X'\n. OK, I see the difference. Maybe \"When I create the initial description\"?\n. shrug it's just less platform-dependent\n. We'll have problems with parallel executions on shared servers. Can you add some unique element to the directory name (maybe use tempnam)?\n. Can we have '... and answer \"y\" when asked if I want to generate the code' - it can still be the same step definition, it's just a clearer alias and later if we add more user prompts we can disambiguate this step then.\n. There's still issues if you and I both run the specs on a shared box together... Can you remember why the unique names didn't work?\nI'm also a bit unsure about having to name the classes in the features - the features would be clearer if the context was taking care of that I think (the features could still name the class, but we generate the namespace)\n. @stof you're right that they should be present tense, but 'I write' would be incorrect as it's active - it sounds like something you are doing now.\nGiven should be talking about the present state of the system, not actions you take in the present to get into that state (does that make sense? It's confusing even to me when I read it back)\n. 'The' should never be in this sentence.\n. Ah, true, class names will need to be unique. I'll come back if I think of a non-messy way of doing this in the context.\nI'd still be interested to know what stopped you randomising the temp folder name.\n. The rule should be that the scenarios are all aspects of the same feature (as described on line 1 of the .feature). In that sense I think these scenarios are all part of the feature @jakzal's described, but maybe that description is taking on too much.\n. :+1: for 'given the file X contains Y'\n. I agree, this causes problems when deleting 'bin'\n. 'have started'\n. @cordoval this feature proves it's expected functionality :-)\n. :+1: \n. I think 'spec' is correct because in you are saying 'Given the spec\u2026'\nI think we should use 'suite' for future features describing behaviour with multiple specs.\n. In future it would be interesting to explore just describing features:\nGiven I have an example:\n    \"\"\"\n    function it_should_do_foo()\n    {\n        $this->greet()->shouldReturn('hello');\n    }\n    \"\"\"\nAnd the class being specified has the method:\n    \"\"\"\n    function greet()\n    {\n        return 'Hello';\n    }\n   \"\"\"\nWhen I run phpspec\nThen the example should pass\nThis would cover a lot of our simpler scenarios and the Context could then handle class name randomisation. We could use the Spec contexts when talking about more complex scenarios like this one (i.e. when we care that the created filename corresponds to the namespace)\n. I don't think there is a standard for YML is there?\n. after merge...\n. @stof the feature is about a spec, not a suite (the fact we're running the whole suite is an implementation detail)\n. @stof It wouldn't solve all situations, but it would be nice to have a shorter syntax (and avoid specifying unique class/filenames in scenarios where it's not an aspect of the scenario you're describing).\nI'll come back with a proposal after this is merged, we can discuss more then.\n. Are the formatters now in the service configuration? @richardmiller can you pull them from there?\n. As of #247 you should be able to grab the list.\n. OK lets come back to it if the container/constructor stuff ever gets resequenced.\n. @mdavis1982 As this isn't part of the diff please feel free to submit a small PR to change\n. PSR-2 is a PHP standard, it doesn't apply to other formats.\n. :+1:\n. not in this PR, @jakzal has stayed consistent with the rest of the file. Submit a whitespace PR if you care about this ;-)\n. @cakper Will you be able to tighten up this regex to not allow '\\' etc?\n. This could be neater as a preg_match\n. Do you want or need a \\ for primitives, as here? Are IDEs happy?\n. Typehint mixed $exception here? Can we do \\Exception|string?\n. similarly this could be captured in a preg_match\nif (preg_match('/^\\* @(it[s ].*)/', $docLine, $matches ) {\n    $specAnnotation = $matches[1];\n    break;\n}\nor something similar\n. This block could also be a preg_match that captures the value (and would be shorter)\n. It would be nice to have the scalars in there, if only for the user's information when the autocomplete displays the method signature.\nIs there a reason not to have:\n@method void beAnInstanceOf(string $class)\nwithout the \\?\n. You're probably right\n. I had SUS before but thought it was too obscure.\n. Would be good to have this in 2.0 ;-)\n. Makes sense, will do.\n. Is this necessary? $file path is meant to be unique per execution\n. Can you make this more descriptive? From reading it I don't understand what the scenario is.\n. aha! Sorry, I'm still asleep ;-)\n. +1 especially if it helps with platform independence (there is a rm-rf in the afterscenario I don't like the look of)\n. is $repository required to trigger the bug?\n. Something like 'letgo is executed after successful spec' maybe?\n. No need for separate PR, my brain wasn't engaged when reading ;-)\n. this should be htmlspecialchars\n. When we have a billion test cases it'll be better if they're short ;-)\n. I agree, the bootstrap process is pretty confusing at the moment. I tried to change as little as possible for this feature but I am looking at other options, would welcome discussion.\n. Done\n. htmlentities encodes certain HTML entities like \u00a3 -> &pound; which are not valid in XML (they are defined in the HTML DTD). Consequently, trying to load an XML document containing them will cause an 'unknown entity' error/warning.\nhtmlspecialchars only encodes the entities defined in XML: &gt;, &lt; and so on, i.e. the minimum subset required to escape properly-encoded text.\n. I'd expect the defaults to be fine, but yes that'll work for escaping inside double quotes\n. What is SpecHelper.php?\n. I'd be happier with VALUE_REQUIRED\n. With value_required you don't need the default option\n. Can you throw a sensible error when the file isn't found? Otherwise it looks like the bootstrap is just skipped\n. These should be in a new .feature\n. Please capitalise 'Bootstrap' in the error message.\n. I disagree about 'always' but agree there should be some Given step here. Maybe 'Given there is no file missing.php' that makes sure there is no such file.\n. Capitalise 'Bootstrap php file...' please\n. I have the exact opposite rule ;-)\nBDD is about behaviour, which is the 'When' so I see that as essential. Given is needed when some prior state is needed.\n. :+1: \n. Doesn't express what identity matcher does. 'I want to be able to compare X...' maybe\n. It sort of says 'I want an identity matcher so that I can match identity'\nI'd like the 'I want X' to explain what that is\nAnd the 'So that' to explain why you'd want to do that (the goal)\n. I think it's an encouragement to use the names, to be honest.\n. typo here in 'traversed'\n. I love this phrasing\n. @MarcelloDuarte This was what I wanted but couldn't come up with for the other matchers\n. Extra line here\n. Actually, why not an optional parameter (which we can make non-optional later)?\n. At least part of the motivation for this was to enable autocompletion - I'm not sure any IDEs are up to speed on this.\nThis currently annoys me in PhpStorm so I'm tempted to merge as-is and change to variadic later.\n. I find this really hard to grok. Given that it's covered by specs, is there perhaps a way to make it more readable?\n. Can you please add a feature for the case where underscores exist in the package namespace? PSR-0 does not convert these and I want to make sure we're explicitly handling that case\ne.g. CodeGeneration\\Spec_Example\\TextMarkdown -> CodeGeneration/Spec_Example/TextMarkdown.php\n. @icambridge PSR-0 only converts them in the final section\nFoo_Bar\\Baz_Boz -> Foo_Bar\\Baz\\Boz.php\n\"Each _ character in the CLASS NAME is converted to a DIRECTORY_SEPARATOR. The _ character has no special meaning in the namespace.\"\nCLASS NAME is significant here\n. Oh, that's good news from PhpStorm\nI'd prefer the empty arguments for now until variadics are in a stable release of php - @stof are you happy with that?\n. This was split out for a reason... can't remember why though. Will look at history later.\n. Could be - your broken scenario is a formatter one.\nOther things to check are setting the config file location at runtime, and extensions' ability to add commands.\n. TBH I just opened this as an experiment because I don't have local HHVM, I had a thought that it might work.\nIf it passes I'll refactor to skip isset only on HHVM. \nThis is failing against the 'hhvm' travis target, and it is a reported bug in HHVM but we need to work around it in the meantime if we're going to support the platform.\n. Indeed, I'll close the PR\nYou're right that ArrayAccess will need to be handled differently too, we should probably check if it's an instance of ArrayAccess and explicitly call the offsetExists method.\n. Why not use 'self'? Would simplify the logic considerably \n. How do we know the user also wants to disallow normal construction?\n. This return type looks incorrect\n. I think you need to also check method_exists here?\n. You need long array syntax here because we support 5.3\n. Him actually... Implicit in this sort of named constructor is the idea that some work needs to be done. \n. You also need to handle the case where there is an existing constructor \n. @thecrimpmaster  If you're handling existing constructors you'll need to also handle existing constructors that have some arguments... you can't return new User() with no arguments in that case.\n. @MarcelloDuarte I feel that if we generate a private constructor we have to also handle beConstructedWith() later transforming the private constructor into a public one\n. It's not that uncommon to start with __construct and then decide to do named constructors later.\n. I don't consider it good practice to inject the container here - the option needs to be plumbed through in a neater way.\n. Please remove\n. Ah, that is a good point. So I just outdent the 'filters' key, right?\n. :+1: thanks\n. Hm, in my own work I tend to add that to my context while I'm developing features, then remove it before committing.\n. I'll write some docs for this ;-)\n. Config object would be my preference.\n. Yes, good spot. This is bad autocorrection.\n. :+1:\n. Agreed, this should be removed.\n. :+1: InvalidArgumentException is specifically talking about method arguments, not CLI arguments.\n. Can you change this to 'specs' rather than 'tests'  please?\n. Or even !$bootstrap would do, It sounds like the right way to handle the empty string\n. Weirdly parsing sentence\n. 'the this' is probably wrong'\n. Not obvious sentences are related, replace period with something else.\n. Yeah we should definitely be consistent but I don't have any branding guidelines :-)\nIt's currently styled lowercase in most places, so the emphasis helps it stand out as a proper noun; one for the owners of the brand I guess.\n. should this be an else if? or a switch?\n. In this case you can remove the implements clause from the classes that extend PromptingGenerator \n. 'Follow the instructions\u2026'\n. Any particular reason why, Graham? This way we stop someone extending PromptingGenerator and forgetting to implement the interface.\n. I'm not sure, 'callback' seems more understandable to me.\n. Hm, ok\n. Rendering of this link is broken - maybe a separate PR? http://phpspec.readthedocs.org/en/latest/manual/2.installation.html\n. This would make more sense to me the other way around - not sure why\n'The level VERBOSE should be less than or equal to the selected level'\nvs\n'The selected level should be greater than or equal to VERBOSE'\n. $context is no longer used in this example so can be omitted \n. :+1:\n. Thanks\n. Ah ok.\nCurrently need to keep the capture of $presenter because it's used in setPresenter and declared as private in the parent.\n. Actually setPresenter and setIo appear unused! I'll take them out.\n. :+1: I'll look at the available exceptions.\n. It's not actually written out again... I just need something to join on that makes debug easier. (the return from this is then preg_matched against to make sure it only contains whitespace).\nMaybe '' is a better join?\n. :+1: \n. Hm, it could if I make the children share some other prefix like .platformspecific.  Thanks!\n. No but it's an understandable nonce word. It's not great.\nOptionalReRunner perhaps?\n. Good point.\n. Just on $command? I think the args are ok...\n. @stof This can really only be used in a console context; if someone wants to make a web interface they will need to have their IO::isRerunEnabled() return false (see other discussions re: IO interface)\n. Ah I see.\nYes, isSupported could somehow detect whether it's running at the CLI - a very straightforward way to do this would be to set an environment variable or container parameter inside bin/phpspec but maybe there's a more elegant way?\n. Non, 'one that suits' / 'ones that suit'\nI don't know why; English is weird\n. php_sapi_name() looks perfect, thanks\n. exit code: tested + works\nphp_sapi check added\narg escaping: not needed\n. Eesh, added for debug + then this version isn't used on my platform. Thanks!\n. I don't think we can rely on people reading it sequentially, once it's split out into sections. Maybe a note earlier explaining aliases, then have a consistent way of explaining them in each Matcher description?\n. Shouldn't start a sentence with 'Or'\n. I'm not normally a stickler, but it reads clunky here to me. IMHO of course.\n'Alternatively you may prefer...' would be my pref.\n. Yeah probably true now it's smaller\n. Ooh, thanks.\n. Errr because I was debugging with token_name :-) Will change, thanks\n. Added a guard in the main method + spec\n. Evidently HHVM does not return false for DateTime :-/\n. You'll need to validate that $class is a string here or get a weird error a few lines later\n. You might want to check class_exists() and throw a friendly exception\n. I wouldn't consider it a BC break as it's optional\n. It's a BC break if the extensions have a 2nd parameter to load().\n. An alternative would be to define a ParameterisedExtensionInterface that has this 2nd parameter and do a type check before calling load()\n. Sorry, you're right. That's tripped me up before. My bad!\nYes I don't think this is an acceptable break. I'd go with a extension of ExtensionInterface that has setParameters(array $params) or similar\n. Extra line break here\n. Needs a line break here\n. Oh, thanks!\n. cordoval - it's a bad idea because it gives us less copyright claim - your new version is only claiming changes made from 2014 as Konstantin's.\nhttp://programmers.stackexchange.com/questions/130478/what-copyright-date-for-an-update-to-an-open-source-project-from-last-year\nLess damaging is a range.\n. newline ;-)\n. newline\n. Newline\n. Newline\n. It's a BC break to modify this.\nYou could introduce a PrioritisedResourceInterface and do a type check inside the Manager, treating Resources that don't implement the interface as priority 0\n. That said we have no real BC policy :-/\n. Don't commit comments please ;-)\n. Can you explain the reason here? It's not reflected in the PR title.\n. Thanks @stof \n@cordoval Can you remove from this PR and resubmit separately with @stof's comments addressed?\n. In this idiom you can't say 'on one hand' without a follow up of something like 'on the other' - it is for comparing alternatives.\n\"One consequence is..\" might be better.\n. This is incorrect, the previous is correct but bad phrasing.\nYou could use \"If it does not need [...] to be passed to it\"\n. Unnecessary change IMO\n. which was fine and reflects the intent better IMO\n. Richard you are wrong. He is calling multiple methods (in his spec) and matching the values.\n. we probably don't need this any more, it was to skip a problem with a specific version of composer\n. Cool stuff.\n. Yes this will make it very hard for extensions to override MatchersMaintainer behaviour\n. We don't only support PSR2 - these are examples of different formatting to test the analyser\n. deliberately not PSR2 ;-)\n. 'does not'\n. yup\n. It's more about desire to use them in future (e.g. drop DialogHelper for instance)\n. Agreed it could test against fewer versions. Maybe it can just test against different Symfony versions with 5.6?\n. 5.3 is end of life, projects should not be using it.\nPhpSpec is intended to promote best practice.\n. perhaps we should check the length of $value too?\n. Hm although that's 2.5\nI guess it's about not supporting EOL-ed versions\n. Why?\n. This makes me sad but I will comply :-( \n(@stof both spellings are ok in en_gb but 'z' is less common, but it has to be 'z' in en_us)\n. Hm, it was a mistake because I always remove that when devving.\nIs there a good reason to have that in the project? I can replace otherwise.\n. Boolean: yes, thanks.\nFor interactive runs I'm saying the input is an interactive one, but passing the --no-interaction flag - I could see if this makes a difference but at the moment it's overidden at the CLI\n. Actually this is much simpler, thanks\n. It's not, it's left over from me developing. I'll remove.\n. Application must be re-initialised for each Scenario so it won't work in the Contructor. Behat does execute them in order, but I agree that isn't guaranteed.\nI guess I need to combine them into one beforeScenario?\n. Makes sense :+1:\n. :+1: \n. I'm moving the matchers into separate classes, so will make sure I do this as part of that.\n. heh, maybe. I'm still gun-shy on ^\n. I'm going to leave this, but if it's merged before your other PR perhaps you can include it in your change?\n. Are there any downsides to preferring dist? e.g. not getting the latest versions of things? If not happy to change.\n. Yes based on your feedback in the comments I'll amend this to just cache the, er, cache.\n. I.... er... yes. \n. That's a good catch! Maybe these two methods have bad names?\n. I made the mistake because of the similarities of the names\n. http://en.wikipedia.org/wiki/Parkinson's_law_of_triviality\nIf nothing else, my error has brought @everzet back into the project ;-P\n. I think the length of the inline function would make the return harder to pick out if combined\n. This conflicts with master so will go away\n. :+1:\n. I don't always spec adapters\n. sigh you're probably right\n. Specced\n. Currently the IO will always get the dialogHelper. I had not realised that it was deprecated that strongly. Would it be too much of a BC break to remove it from the constructor of the Application? Otherwise I could look at injecting a Proxy of some sort.\n. Not in the codebase, but potentially in an Extension (so left in for BC)\n. :+1: \n. I can't see a way of doing this without a BC break to be honest, it's always going to be instantiated when IO is, and in absence of a clean extension point it's not clear where we can make the change.\nIf I get time I'll do a survey of extensions and see if any are actually using this directly.\n. I was thinking of the case where someone extends or decorates the DialogHelper and tries to inject their modified version via the container. I guess that doesn't impact on the order of parameters.\nThe other case is someone extending IO and calling parent::__construct()\n. OK. In that case I'm going to break BC and remove dialogHelper here.\nIt annoys me supporting ask and askAndValidate - part of me thinks they should be removed and Extension writers can catch up, but that might be too big a step until the versioning policy is more explicitly stated.\n. In most places we use camelCase for collaborators, it might be better for consistency if you do that here.\n. Example titles can also start with its\n. It doesn't look like this stub is really used in this specific example, and it's common to each example. You could move some of this stubbing into let() if it won't impact understandability.\n. Currently Pending and Skipped always have an exception, so I'm not sure this guard is needed\n. itssssss shouldn't match so you might be better with /^its? /\n. What I meant here was that getTitle is only used in string concat so doesn't affect anything you're describing in this example.\nThese lines seem common to all examples, so might be clearer in let():\nphp\n$specEvent->getSpecification()->willReturn($spec);\n$exampleEvent->getExample()->willReturn($example);\n$example->getTitle()->willReturn('it foobar');\n. Some indentation here would help legibility\n. Is this used? It's not showing in the diff\n. You could move this earlier and use the var on line 125\n. Looks like your scenario has suffered from scope creep - rather than rename it the feature could probably benefit from being split into several scenarios rather than one big one.\n. That often happens initially with new features, then as the code grows they diverge more.\n. I'm not sure it's worth using a switch for one case, YMMV\n. 'Empty spec' doesn't seem to relate to the scenario.\n. If this is meant to be human readable the last bit is maybe too confusing\n. Appreciate that, I mean '# TODO todo: ' isn't clear as a result\n. I'll bow to your TAP knowledge\n. I'm not really happy using $result here as it may not be defined. Can you add a default: with an appropriate message, or set a starting value for $result before the switch?\n. Scrutinizer points out that Yaml::dump is typehinted to accept array - is the use of a string here safe?\n. I'm thinking more like future result types (Skipped was fairly recent for instance). In 2020 when we have quantum computing and someone adds ExampleEvent::UNCOLLAPSED I don't want your formatter to break ;-)\nI think it should be 'not OK' so that someone comes and shouts at me.\n. For me the question is whether it causes any issues for existing extensions, and whether it would encourage any bad practice going forwards in future when people write extensions only using the new interface.\n. I didn't want to use the extension when 4.5 is just around the corner. I'll convert to prophecy when 4.5 is stable.\n. Good point\n. The Factory or the Prompter?\n. Ah yes. Yaml\\Dumper::dump is correctly hinted as mixed but the facade in Yaml::dump is array (and the parameter is called $array). My main concern was whether this might change but I guess not.\n. I'll move the prompter, it's not a symfony concept. I think factory definition should stay here for now.\n. PhpStorm hides it from me ;-)\nI want to skip when expect is not available, but it seems to not be possible I think?\n. I'll change it to a Boolean check\n. This method is specifically checking whether expect is present on the system and showing a sensible message if it's not.\nIsolatedProcessContext is only used in the 'smoke' suite (not in the default suite) so someone checking the project out on Windows and running bin/behat won't get any issues\n. brackets here\n. I am not sure what's going on with the diff here - This class and the DotFormatterSpec both look the same as master - any ideas?\n. Runtime exception is what resource generator throws. Perhaps that should indeed be more specific\n. Please remove these comments\n. conditional would be clearer if extracted to a private method\n. Is there a reason you've not inlined this into the spec? It's what we've done in other similar situations.\n. Aha, right\n. According to which standard? What would correct look like?\n. This isn't really returning a class any more, is it?\n. I clicked on the wrong line ;-)\ngetRealDeclaringClass is the one that seems wrong, as it's not really (always) returning a class.\n. Not that I can think of a name, frankly.\n. Pending isn't appropriate in this context\n. You can't. Behat's own suite uses tags (e.g. @php-5.4) on the scenario and a selectively filters the tags when running\n. https://github.com/Behat/Behat/blob/master/.travis.yml#L32-L36\nWe could use something like this.\n. please remove the comment\nIt's better to pull bits of this out into privates so that the overall shape is clear\n. nice, thanks\n. There's not; I'll raise a documentation issue\n. Can you indent the pystrings in all features please?\n. This method is very large and should be broken into several smaller ones\n. I'd rather not have inline comments, can you try to make it explicit from the code? Extracting the conditional to a method might help in this instance.\n. Is there a scenario where this is likely, or is it an extra guard? If the latter, it's ok to remove it.\n. you could inline this to $expectedArgument ?: null in the method call below\n. namespace declaration should be on a different line to the opening <?php\n. As we're only detecting 5.4 right now this seems overkill\n. I like getMethodOwner\n. 'arguments' typo here + in others\n. what is @php-version doing?\n. Writing to the temp file seems wrong, you can evaluate this into the statement similar to how the smoke tests are executed\n. Ah, thanks. I'll see if it's still current\n. Argh\n. Naming: What makes this concrete implementation specific?\n. You can probably make this class final\n. I'm tempted to say we should move towards not using *Interface, although that would introduce inconsistency\n. This probably needs a scenario where the new option is omitted\n. If it returns the other value you don't need to specify a value it doesn't return\n. This should perhaps be a different example\n. Please remove this line\n. Please use lowercase true here\n. Linebreak here\n. Line break before the return statement here\n. Why is this returning anything anyhow? It doesn't seem to be used outside of the specs.\n. This is not a formatter - formatters are selected with the --formatter CLI option and handle the output of the whole test execution.\nYou're not really using any features of ConsoleFormatter so you should drop the dependency and rename this class.\n. StateListener is very generic, you can be more specific about what state it's listening for. It's something like 'where we are in the lifecycle of the test suite'?\n. a 'FatalMessagedoesn't sound like 'the object that knows which example we are in' to me. This needs to be renamed.\n. setCurrentExample surely.\n. After the example you probably want to record that we're no longer in an Example\n. There's no matcher or mock here, it's unclear that you're testing anything.\n. I don't think this is used\n. 3? ;-)\n. Rather than directly couple this to the display of the error message, I'd like to see an extension point here so we can do more actions than just shutting down.\n.currentExampleis probably right because that's what you're passing in the only use case. I'm unclear why the interface is called Message\n. I think let's not drop*Interface` yet for consistency, but try and make a conscious effort to name the concrete implementations uniquely.\n. Can you indent the PyStrings a couple of characters please?\n. What will make the Mage one different, maybe that'll give an idea what makes this version unique\n. this could be:\nphp\n$this->accessInspector  = $accessInspector :? new AccessInspector();\n. Maybe it's fine as it is\n. Also this can be final\n. You don't need to loop here, str_replace can take array arguments\n. This method name may not scale well ;)\n. Can you add a newline here please?\n. You don't need this space\n. In my opinion it's better to explicitly set $config['suites'] here rather than use the reference. It's fine in this case but can lead to unexpected side effects.\n. no space here\n. line 213 can be removed, @param can be on sequential lines\n. you don't need a blank line after the foreach (line 186)\n. Why E_NOTICE?\n. It's to suppress the PHP error output, but display_errors is probably more appropriate?\n. Agreed\n. As discussed offline, this is very specific to the implementation.\nDelegate the console updating to another object w/ appropriate interface, and have this class just trigger it, so we can add future shutdown handlers to do things like offer to fix fatals etc.\n. I don't think this interface is really needed. 'Message' is a very generic concept; you would be better off naming the methods in CurrentExample to setCurrentExample and getCurrentExample.\n. Shouldn't you be doing something like clearCurrentExample ? When this event fires we are no longer in an example at all. You're re-setting it to the example it's already set to.\n. Maybe? It's not great but I don't have a superior suggestion\n. That's something we can refactor to later, now the interface is there.\nMagicAwareAccessInspector makes sense to me, you sold me on it.\n. Wait I see what you're saying.\nWe could have MagicAccessInspector decorate VisibilityAccessInspector. That way MageSpec just needs to mess with the container config and remove that decorator.\n. (plus it simplifies the logic)\n. True. Man, BC is annoying.\n. I think after this is in a stable release we can modify phpspec2-expects and then do a survey of other extensions to look at a controlled BC break on the Caller constructor\n. There's no consistent style guide for how to style 'PhpSpec'. Some brands insist on lowercase even at the start of a line, English experts think that's silly.... \nSigh, I'll write a style guide\n. You could mention that by default they're relative to the current working directory\n. Right; looks good!\n. Now I look at this again... this method is overloaded.\nWhat we're interested in is whether a property is writable or readable; these should be separate methods (which would probably have some shared functionality internally).\nSimilarly the other method should perhaps reflect that we care it's callable\n. Then saying it errored during the last example would be incorrect\n. The fact it might not be an object is counterintuitive because the parameter is typehinted as an object, and stems from a bad design decision inside Caller\nLet's keep the is_object check localised to Caller and not let it spill over to this new class.\n. True. I wish English handled this case better.\n. At the moment if the author has put an existing public constructor in, it might not be appropriate to modify it to private so I'm completely skipping if any constructor exists.\n. It'd be a different message, and a different generator... it just seemed like an edge case to me?\nBy the same token, could be added in future.\n. Actions please\n. You should call this $currentExample everywhere. The 'message' stuff is confusing\n. empty string doesn't make sense to me. \n. linebreak between these please.\n. This shouldn't be registering itself as a shutdown function, if we're going to have lots of ShutdownActionInterface instances.\nHave one shutdown handler, that then calls all of the registered ShutdownActionInterfaces\n. What's a Message?\n. You're not handling the case where this isn't in an example\n. I'm just saying the message needs to be different\n. Not all shutdown actions will output something, this does not need to be part of the interface\n. What is this for? Don't add methods just for testing.\n. As this implements an interface you can make it final easily\n. I've been thinking about these ShutdownActions...\nMaybe shutdownAction is too generic (although we may need it in future); perhaps they should be fatalErrorActions?\nThat way you could move the get_last_error logic into this method, and explicitly pass the error details through to the actions when they're run, otherwise I can see us having repetition once we get more than one fatal handler.\n. this diff shouldn't be showing here.\n. This feels more like a fatal error writer, right?\n. It might make sense to introduce an interface here (and finalise the class) - we may want to present fatals in different ways in future.\n. Because this class is a simple value object you can finalise it (although you'd have to change the tests to use a concrete value rather than a double).\n. This needs a non-decorated callback for plaintext consoles (see how most Formatters handle this). You can check isDecorated on the IO.\n. This can be final\n. This is only called from the same class so should default to private\n. Please remove the 'message' references in the service configuration\n. This mixture of using double quote expansion and sprintf to both do placeholders is confusing; pick one or the other ;-)\n. Needs a newline here\n. FatalPresenterInterface would be more consistent with other naming\n. Is this needed? Errors aren't displayed so I would expect you can take this out.\n. So I've been thinking... :-)\nThis should maybe be the responsibility of the actual selected Formatter. For instance the JUnit formatter might choose to do something different to the progress formatter in the instance of a fatal.\nThis would require making a new Formatter interface with an onFatal and handling the cases where users have a different formatter that uses the old Interface.\nThis solution where the Formatter and the FatalPresenter are separated out probably doesn't work for all the different formatters users might select.\n. This looks like it could be a lot clearer with some boolean logic reshuffling\n. To avoid BC breakage I'm not happy with changing the method signature in an incompatible way.\nIn other cases we've added optional arguments to the end of the dependency list, and you'd have to handle the case where an extension doesn't pass the dispatcher (by not dispatching that event).\n. What is this check guarding against? The file already existed but we generated it anyway?\n. OR actually this takes the total dependency count quite high, maybe it could be achieved via Decoration instead (just an idea)?\n. May contain static\n. This doesn't guarantee the code contains a function...\nphp\nclass no_functions{}\n. ^ edited in\n. Regex still isn't that safe; we should probably use the tokenizer more for this stuff\n. Not sure this makes sense applied to $this?\n. This makes me very happy\n. I meant for this specific one I can't see $this->shouldReturnAnInstanceOf making sense.\nThe other three are all good additions\n. The method exists but in the case of calling it on the object being tested, I don't think it's something to encourage.\nIf you remove that line I'll merge the others.\n. Can you please remove shouldReturnAnInstanceOf?\n. Odd indentation here?\n. The scenario title should reflect the outcome and reason, e.g. something like 'Fatal error is not shown when formatter does not support it'\n. This example doesn't test anything\n. This example doesn't test anything\n. This example doesn't test anything\n. I don't think you need the default here, it's never called with 0 parameters\n. Have you had a chance to address this point, @Elfiggo ?\n. Won't that make it too wide?\n. Good catch, thanks. I'll change in master when I'm at a desktop\n. This should not be part of your PR\n. This should not be part of your PR\n. @beforeSuite on a variable?\n. This should be in filesystemcontext and ideally integrated with the other existing methods\n. Hm, we need a cleaner way to handle this don't we?\n. You can extract this to a private to make the conditionals clearer\n. Newline here please\n. Extra line break\n. Extra line break\n. While you're modifying this, it makes sense to me for this do the the default of the switch\n. Yes please\n. At the end of the file\n. It's at a different point in the file ;-) In general single line between methods please\n. Yeah it'll be ok for now. I'll probably write a behat extension or something that does this better\n. I still don't want this here - it should be in the filesystemcontext\n. In fact I think once #788 is merged you can get rid of this and go back to 'the spec file contains:' :+1: \n. extra line break here\n. please remove this line\n. please remove this line\n. You can simplify this a lot by looking at whether E_ERROR & $error['type'] is true or not.\nThe error is a bit mask so any odd value is an E_ERROR. You then won't need the HHVM constant\n. What is the reason for this difference?\n. #788 is now merged so rebase and see if you can remove this\n. filename should contain shown\n. I agree, this build is about detecting windows issues not issues between PHP versions.\nI suggest just checking 5.6.14\n. it_does_bar please\n. this duplicates logic elsewhere\n. I think we use something from $_SERVER to detect windows in other places I think?\n. I guess I was thinking of this https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Console/ContainerAssembler.php#L303-L307\n. Just this to change from what I can see\n. ok so i'd rather you use stripos here\n. and stripos here please\n. Line break here please\n. @stof Chris seemed to think this fixed that problem for him?\n. I refer to his comment \"I had a compounded issue with the fact that there is a space in the path to my PHP executable, which this also fixes.\" but you are right to be concerned.\nCurrently this feature doesn't work at all on Windows so at least this PR would make it work for the one person I know who uses windows (@chrisemerson)\n. I'll hold off releasing 2.4.1 until this is resolved\n. Yes, you can catch something that doesn't exist in the current PHP version without an error.\n. if you want to alter for consistency I'd rather have a line between them\n. Maybe this message should reflect that it might not be an exception? Expected to get exception / throwable...?\n. I'm not sure how this will work with the various HHVM version numberings. Might it be better to class_exists on the Throwable type?\n. can you remove this line please?\n. Changing the constructor in this way is a BC break.\nPlease make this optional and instantiate a new copy inside the constructor if it's not provided (we can remove this in PhpSpec 3.0)\n. This naming is far too generic. Where you use it elsewhere it's a nameChecker which feels closer to a good name.\nFind something that describes how this type is used, then for the concrete think about how it does it\n. Where is this list from?\n. Maybe instead of restricted use the reserved word\n. In other places we've done this with a ternary:\n$this->nameChecker = $nameChecker ? $nameChecher : new ReservedWordsMethodNameChecker();\n(one day we can use the ?: operator when we drop old PHP versions\n. empty is redundant here, empty arrays are always false and if it stops being an array I'd prefer a hard break\nYou can do if ($this->wrongMethodNames) instead\n. You're right, for some reason I thought ?: was 5.4\n. it_preserves_line_numbers please\n. That sounds good.\n. This duplicates logic inside the Locator (i.e. it is an assumption that an extension could change). I'm not really happy having it here.\n. I think it adds to clarity to have this here - it's a shame it can't yet contain the full path (unless . is now ok in constants)\n. This isn't visible to end-users so I'm fine breaking it in 3.0 (unless you mean something different?)\n. We can detect usage of deprecated APIs by removing them and running the test suite ;-)\n. Thanks! I was confusing with call_user_func_array.\n. I couldn't find any usages so would prefer to take it out. It can be added back during beta if extension writers ask - there's probably a better way for us to expose version though I think?\n. TBH this could move up to PhpSpec\\Extension\n. Not sure about Stream here\n. Now you mention it, I do do this manually\n. This is good stuff but you don't need the explanation here IMO, git history's enough.\n. Raise an issue for this rather than doing in code ;-)\n. Maybe now is a good time to rename this variable. It's not really an exception any more right?\n. I'm not sure how I feel about this silently-ignored parameter... is there a way to make the conditional more explicit?\n. there are a lot more of these than this list, aren't there?\n. Have a look at the closed PRs, there's one by @shanethehat that does most of these changes. It might make sense to link to that PR, or make a separate docs page for this big list if it's too much to have inline in this page.\n. What's the benefit of the trailing slash? it's inconsistent with the other method below\n. @ifdattic What's the benefit of the trailing slash?\n. Instead sounds weird here. Maybe just 'If you use a type hint, phpspec will.... prefer2.xin backpacks (same backpack thing for the3.0below)\n. actually, not if it's going to trigger a big consistency change across the docs ;-)\n. \ud83d\udc4e Service Locator is how a container may be used, not a thing that it is\n. I'd be happier withfromServiceIdor similar\n. I don't think it needs renaming to conform to the interface\n. Add this for an alias in the first set of changes (until we are sure what happens with extensions)\n. Indeed~2.7is the same as^2.7so what's the point in talking about it?\n. I already closed #891 \n. Instantiating outside the container seems wrong here.\n. I'd rather you avoid refactoring related code as part of this change\n. Presumably we don't actually want to couple to this container\n. this should only be a dev dependency I think\n. Return doesn't make sense to me when talking about$this. These scalar things don't make sense on$this, which is always an object\n. Don't work on objects...\n. Classes don't have to have namespaces, so you need to handle the case wherestrposhere returnsfalse`.\nI don't really see the benefit here of assuming that the string 'Matcher' will be in the output - it won't hurt if it's in the $id\n. There's nowhere you can add them that will work.\n. Yep, good catch - I'm considering removing this BTW, it's currently only used for testing? It should be @internal anyhow\n. It is? Hm I thought it triggered a warning. that's good then!\n. Cool, today I learned :-)\n. That's a very good point. Current services are redefined in the behat application suite (which uses Symfony application tester). \nSpecifically this happens in scenarios that do describe followed by run.\n. BTW this is allowed in the current version, but there's no test covering it.\n. In your case a) shouldBe() will never autocomplete, is the point\noption b) is the only workable solution IMO\n. Yep could be, there'd be some work to refactor the behat suite, which I'll do if there's a clear benefit? Maybe there just needs a reset method on the container?\n. It's not a method on subject though - it's added dynamically at runtime by a matcher.\n. If I wanted to hard-code a list of matchers into the Subject, we'd add methods! We're never going to be able to annotate matchers that extensions add, or that users add in getMatchers...\n. I have no objection to adding them all to Subject in that case, it makes life slightly easier for users..\n. These aren't really scalar types any more, I guess? Can you rename the private method and this local variable please?\n. Rephrase instead of scalar here, or handle iterable separately\n. Very good point! Thanks\n. It's a good question, the answer is there are several things hard to read right now and it should be addressed in a different set of changes.\n. This isn't correct, you're allowing any char that isn't \\r or \\n to be the first character of the class name, including a bunch of invalid ones. I\\'m not really clear why this makes your test pass, to be honest.\n. Something like 'Developer implements interface' is more clear\n. Ah ok it might be that preg_match is not in multiline mode so ^ and $ are matching 'start of line' and 'end of line', that means extra linebreaks are allowed before and after.\nYou could try using \\A and \\z instead (note not \\Z as that would allow a linebreak at the end), or try the /m or /D switches at the end of the pattern to affect the default behaviour of ^ and $.\n. You don't need the dollar at the end if you've added \\z. You can replace the ^ at the start with \\A too\n. actually is this check required at all? instanceof doesn't trigger autoloading\n. This is a second case so should be a separate example\n. See if this works...\n$arr->ksort()->will(function(){ throw new \\Error(); });\nThis might keep us with a passing build until the corresponding Prophecy changes can be released\n. Typo in error here\n. Please don't have whitespace inbetween steps (here and other places in the feature files)\n. Can you please rephrase the titles to describe more what this lets the developer do?\nExample here: \"Checking a deprecated error is triggered\"\n. I don't think this scenario's necessary - you're testing that the during* magic works, which is the responsibility of DuringCall (which I don't think you've modified).\nYou can just use one syntax in the scenarios.\n. You can typehint callable here - it's supported in all versions we support now (older code may be missing it)\n. Probably overtested in the other place ;-)\n. Not sure you meant to remove this?\n. Ah! Good stuff\n. typo here in infinite (and a few other places)\n. This should be \"fewer\" rather than \"less\"\n. \"fewer\" here rather than \"less'\n. Yes it seems odd that we use the current class - in what case is that even unset?\n. You seem to be right but that's a worry - from what I can see all instances of ThrowExpectation have a method compatible with Expectation which is called as if they're an expectation.\nSeems to be a bug - the most straightforward fix would be to make the one interface extend the other. Arguably that would break BC because there's a chance someone will have used ThrowExpectation without implementing a match() method, but I would expect that code to be non-functional.\n. Can you revert this in your PR please?\n. Yep I agree. I suggest combining this with your new one and transforming both / three into ints. Please define these as services as well, so that extensions can add their own decorators. There's some historical issue that needs it - I think PHP believes the array has changed while being sorted and issues a warning?. If this is just to make our test suite work it should be in require-dev.. I don't like the use of empty here (we know it's set from the defaults) - negation alone should be enough I think. Actually looking at it, it's not necessary right now. Rather than list them we can just say that all/many interfaces now have type hints.\nFor the user documentation above it'll be important to list the interfaces and spell out what to change. Only place I can think of is in defining new Matchers, but there may be other places we should be aware of. this is an \"interface file\". this is an \"interface file\". this is an \"interface file\". this is an \"interface file\". this is an \"interface file\". shouldn't be a gap here. remove gap. remove gap. remove gap\n. this is an \"interface file\". remove gap. remove gap. this is an \"interface file\". remove gap. this is an \"interface file\". remove gap. remove gap. this is an \"interface file\". remove gap. this is an \"interface file\". this is an \"interface file\". remove gap. this is an \"interface file\". I'd rather not use the Builder suffix when not implementing the builder pattern. The responsibility of this class seems to be something around converting reflection parameters into an arguments string, right?\n(this will potentially be useful if we re-introduce argument type hints in future). Even though this is trivial at the moment it might be better to extract this to a method, to make the level of abstraction in this method consistent. This type logic can be extracted to a method, and possibly replaced with if/else. Why does the class have to exist before we resolve its type? I'd expect this logic to also apply to not existing classes too?. The fact that you've called it argumentBuilder makes me think StringBuilder is too generic (see other comment about using *Builder) - reconsider this class's name. I'm not happy with this conditional - calling the method with 'reflection arguments' instead, when we want type hints, is not an obvious API.\nPerhaps we should have an arguments array in all cases, and a separate optional argument_types? This would require the caller doing the reflection before calling the generator\nIt makes sense to me that the caller 'knows' the types come from analysing a method, but the generator is just using a list it's passed - will clean up the generator code / make tests less reliant on example classes. Or possibly we should have an Argument value object - might be overkill. This needs cleaning up - the logic is hard to follow - I'd suggest extracting some private methods. this explode/join might be better with string functions (regex). define this as a service so we can reuse it elsewhere (and so extensions can decorate it). It sounds then like arguments should contain value objects that capture this complexity (and can have __toString to support BC). It's very possible to have type hints for types that aren't defined in the current project yet. i it's completely impossible then you don't need the other case anyhow ;-0. The old behaviour was to be strict, so this should default to true. This could be more user-friendly - I think the concept of a namespace provider is pretty internal.\nMaybe a simple boolean here?. Having this class created in the bootstrap makes the behaviour in the gherkin scenarios harder to understand.\nCan it please be generated based on a Given in those steps? \nCurrently to understand the behaviour in a particular Scenario I have to refer to this file. please simplify it - other extensions can register new providers but they can provide their own configuration to do so. Value objects are good :-). I'd like this behaviour to be the default in PhpSpec 5 so it's important we have a syntax that supports negation too.\nTherefore maybe a boolean like detect_composer_namespaces is enough?. I think that would be ok - the key is to get the 'why' into the scenario. I want a reader of just the feature to understand the relationship between When and Then\nIn the Gherkin it should be something like:\nAnd there is a PSR-4 namespace \"MilkyWay\\OrionCygnusArm\\\" configured for the \"src\" folder\nCurrently the When/Then relationship is only understandable if you read the autoload file. This should definitely go through the Prompter \ud83d\udc4d \n. I don't think we should reflect the existence of the symfony Question in our own interface - we can keep the prompter interface simple, I like @avant1's suggestion\n. actually you know what - this is different to the namespace provider concept used for the composer autoconfiguration - what you have is actually fine.\n. because then it'd be called PhpSpec\\Extension\\DefaultMatchers\\DefaultMatchersExtension and I'd go crazy. It was not used for anything, not even the tests. I guess I should start triggering warnings?. \"Oh cool, @everzet commented on a PR. I bet it's something insightful\". Makes sense to fix in this PR, if you can. In my local branch I'm also triggering a E_USER_DEPRECATED in there... but then everything breaks because I need to find all the places we're using it internally ;). Is this right? I thought you'd omit mixed here. I think this message is too specific; all we know here is that the spec was not found in the file - maybe we can report the expected FQCN and file path and be quite explicit?\nAlso not sure about \\Error here - this can be a more specific exception. Can you name this something like shouldLocateSpecThatThrowsExceptionWithMessage?. I don\u2019t really care about white space. I'd like to reserve the option to use the higher verbosity levels for something in future rather than just a boolean. -NotSet please. The the output should contain: please. Yeah boolean's probably fine for now then. Is there not a way to reset the ApplicationTester instead?. So that it's deliberately brittle if a similar-looking string appears in that file at some point in the future which isn't the version number\n. ",
    "CMCDragonkai": "I would be interested in this too. Since I may have multiple different tests and like to group it under a single folder.\n. Oh I figured it out. It was due to phpspec's confusing tagging. By putting just * in it, it only gave me the 1.4 versions. I had to use dev-master.\n. There is however a different error. The HOME index does not exist on Windows computers: http://stackoverflow.com/a/1894954/582917\n. I am indeed. It has something to do with it?From: Christophe Coevoet Sent: Tue, Jul 2, 2013 08:58To: phpspec/phpspec phpspec@noreply.github.comCC: Roger Qiu roger.qiu@polycademy.comSubject: Re: [phpspec] Everyonce and a while running phpspec, I get this error. (#146)Are you enabling APC in the command line ?\n\u2014Reply to this email directly or view it on GitHub.\n. It seems to have done the trick, thanks @stof. I wonder why this happens though, and whether this means I can't use APC at all when doing testing?\n. Funnily enough, it came back after a couple hours. The APC has been removed, and it's coming back with the original error. Any ideas?\n. ",
    "brycefisher": "Ditto!\n. @Vinai I'm running into the same problem, but it appears to be related to camelcasing for me. What platform are you on?\n. This seems to be the best testing framework for PHP I've come across. I agree with B2F. I'm building a custom php app with multiple classes in subfolders of my project's src dir (ex: ./src/controllers). I'd prefer to use a directory structure like this:\n/app\n    /src\n        /controllers\n            /spec\n        /models\n            /spec\n        ...\n    /vendor\n        /phpunit\n        ...\nHowever, I have no control over the directory structure at present. It would be awesome to make the directory structure configurable, if only as a command line flag (which would be perfect for my build tools). Or, is this a feature that's just not covered in the documentation? Thanks!\n. ",
    "alwinmark": ":+1: \n. ok that made it.\n. ",
    "Fuhrmann": "Yes, indeed. Thank you for the link @ciaranmcnulty!\n. I created a phpspec.yml with the content @antonCPU posted, but this is the error I receive when running bin/phpspec desc Markdown from terminal:\nCan not find appropriate suite scope for class `Markdown`.\nThis is my phpspec.yml:\nsuites:\n  main:\n    namespace: \\App\\Tests\n    src_path: app/tests/\nThis is my composer:\n``` javascript\n{\n    \"name\": \"laravel/laravel\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"require\": {\n        \"laravel/framework\": \"4.0.\",\n        \"laravel/curl\": \"dev-master\",\n        \"barryvdh/laravel-ide-helper\": \"1.\",\n        \"philf/setting\": \"dev-master\"\n    },\n    \"require-dev\": {\n        \"phpspec/phpspec\": \"2.0.*@dev\"\n    },\n    \"autoload\": {\n        \"classmap\": [\n            \"app/commands\",\n            \"app/controllers\",\n            \"app/models\",\n            \"app/database/migrations\",\n            \"app/database/seeds\",\n            \"app/tests\",\n            \"app/tests/TestCase.php\"\n        ]\n    },\n    \"scripts\": {\n        \"post-install-cmd\": [\n            \"php artisan optimize\"\n        ],\n        \"pre-update-cmd\": [\n            \"php artisan clear-compiled\"\n        ],\n        \"post-update-cmd\": [\n            \"php artisan ide-helper:generate\",\n            \"php artisan optimize\"\n        ],\n        \"post-create-project-cmd\": [\n            \"php artisan key:generate\"\n        ]\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"bin-dir\": \"bin\"\n    },\n    \"minimum-stability\": \"dev\"\n}\n```\nAnd finally this is my folder structure:\nhttp://imgur.com/0fq90yR\n. ",
    "jakzal": "Fixed in 6e4e4b1bc0f85b7fddc2aa5eeb47151e58cfac27.\n. The method is called beADoubleOf() now. As @stof suggested, you can also use a typehint or docblock.\n. PhpSpec2 doesn't support this option. I'm guessing you read the documentation for PhpSpec1.\n. You can find it on http://phpspec.net. The github repository is here: https://github.com/phpspec/phpspec2-site\nBare in mind we're working on updating it.\n. PhpSpec2 has no stable release yet. Either do what @whatthejeff is suggesting, or specify you want to install dev-master version (this way only phpspec will be installed with the dev stability and other packages will remain stable):\n``` json\n{\n    \"require-dev\": {\n        \"phpspec/phpspec\": \"dev-master\"\n    }\n}\n```\n. At the moment it's only possible to put your specs in the top level specs directory.\n. @RuslanZavacky here's what I do:\nphp\ninterface Clock\n{\n    public function now(): \\DateTimeImmutable;\n}\nNow, make the Clock a collaborator of any class that needs access to the current time:\n```php\nclass TimeManager\n{\n  private $clock;\npublic function __construct(Clock $clock)\n  {\n      $this->clock = $clock;\n  }\npublic function getAvailableTimes($dates)\n  {\n    $now = $this->clock->now();\n$availableTimes = [];\n\n// ... some logic here.\n\nreturn $availableTimes;\n\n}\n}\n```\nIn your specs, simply stub the Clock:\n```php\nfunction it_does_things_with_time(Clock $clock)\n{\n    $clock->now()->willReturn(new \\DateTimeImmutable('2018-08-12 07:00:00'));\n// ...\n\n}\n```\nAs a side effect, you can provide alternative implementations of your clock and do things like faking time in your app.\n. I think describe command is the wrong place to perform namespace validation. It would be useful to support namespace aliases (like in Symfony - AcmeDemoBundle:User would translate to a PSR-0 namespace).\nIn your case, the PSR-0 locator shouldn't accept a namespace with colons, so it's the locator which should be fixed and not the command.\n. @MarcoDeBortoli  my point was it shouldn't be prevented, but the PSR-0 locator shouldn't pick it up. So if you don't have a locator which can handle colons - you'd get an error.\n. :+1: \n. @whatthejeff would it be possible to throw an appropriate exception if the whatthejeff/nyancat-scoreoard is not installed and someone tries to use the new formatter?\n. Sorry, I didn't notice it :)\n. I found one more issue here. If you write a spec first and run it, phpspec won't generate the constructor (as it does with regular methods).\n. The exceptions come from Subject::getWrappedSubject(), not from expectation verification. \nLooks like it's currently not possible to verify expectations against constructor.\nThe following works, but it's probably not how we want it:\n``` php\nfunction its_constructor_should_require_at_least_two_position_elements()\n{\n    // provide valid arguments to make sure subject can be initialized\n    $this->beConstructedWith(array(1, 2));\n$exception = new \\InvalidArgumentException('Position requires at least two elements');\n\n // this would call __construct on the already initialiized subject\n$this->shouldThrow($exception)->during('__construct', array(array(1)));\n\n}\n```\n. I can also confirm it works with the current phpspec version.\n. I don't think this is the right place to do this validation. By doing it in the describe command we're locking phpspec to PSR-0 and also make it imposible to introduce aliases (like in Symfony AcmeDemoBundle:User is an alias to the actual class namespace).\nAnyway, what's the point of validating a namespace here? Wouldn't it better if an exception was thrown if there's no locator for a given namespace? This way locator would decide wether it is able to use the namespace or not.\n. re #165 \n. #165 only introduces events for expectations and method calls. It's still not possible to define hooks called before/after specifications (like let or let go). It would be also to use tags or a similar technique to only call chosen hooks before selected methods.\n. :+1: \n. I know it doesn't solve your issue, but as a workaround - supports would be a nicer (shorter) name than shouldHandle ;)\n. @cordoval what do you mean \"removed\"? The class is there and the expect() helper works fine for me.\n. latest (both helper and phpspec).\n. @gwilym the following will work:\n``` php\n    /*\n     * @param Foo $foo\n     /\n    function it_blah_blah($foo)\n    {\n        $foo->someFunction()->willReturn(12345);\n    $this->setFooFactory(function ($bar) use ($foo) {\n        return $foo->getWrappedObject();\n    });\n\n    $this->someFunction()->shouldBe(12345);\n}\n\n```\n. awesome! :beers: :dragon_face:\n. @mdavis1982 ping me if you need anything\n. Ok. This PR now also includes @MarcelloDuarte's refactoring.\n. @andho I don't see a value of having a UserErrorException at this point. We don't need to handle it either, as what we actually want is to interrupt the execution of the application. What special format do you have in mind? \n. Related to the discussion about a special matcher for interfaces: http://blog.cleancoder.com/uncle-bob/2015/01/08/InterfaceConsideredHarmful.html\n. :+1: \nBehat features helped me lot when working on an initial release of the Symfony2Extension. \nAlso, it happen to me already that someone has send a PR thanks to a feature file I committed as a work in progress. New feature requests could be described in gherkin and be then picked up by developers who want to contribute but don't know what should be done. \n. Looks like I can make an initial PR than!\n. @stof expect a PR really soon ;)\n. :+1:\n. Custom templates are already supported by PhpSpec. It's not documented yet, but you can see it in the code:\n- https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/CodeGenerator/Generator/ClassGenerator.php#L70\n- https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/CodeGenerator/TemplateRenderer.php#L36\n- https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Console/Application.php#L199\nI think dedicated templates directory is a better solution than a config file.\n. :beers:\n. Why did we remove the default command?\nBTW, it's gonna be possible to change the default command \"natively\" once Symfony 2.5 is released (see https://github.com/symfony/symfony/pull/9776).\n. I appreciate all the comments. I think it's important to get this right as we'll build other features based on what we do here.\n. @MarcelloDuarte would you like the feature summary to match the feature file name?\n. I think this is ready to merge. I fixed the wording, split the feature into smaller ones, randomised the temp directory name and rolled back composer's bin-dir configuration.\n. Let's merge ;)\nTo improve the process in the future, I propose to prepare a list of features we need to cover first. Then, if anyone wants to pick a feature up, he'd create a PR with basic scenario titles, so discussion could be started.\n. :beers: \n. @mdavis1982 you need to create a tag \n. :-1: I think it makes this particular example you've changed less readable. We can't forget the examples serve as a documentation as well. I'd prefer to keep it simple and avoid magic behind the scenes.\n. Putting aside technical details (whether it's better to have a single command or not), it feels odd to type phpspec --describe. It's an action.\n. It gets weirder... My build on master passed, but a build with latest composer did not. Might be the case that travis doesn't have consistent version of composer installed across environments? \n. I think it's worth to include an example (or extend the existing one) with let() using beConstructedWith(). An example should override constructor params set in let(). We had issues with this in the past.\n``` php\nclass MarkdownSpec extends ObjectBehavior\n{\n    function let()\n    {\n        // something that wouldn't throw an exception\n        $this->beConstructedWith(array(100, 200));\n    }\nfunction function it_throws_an_exception_using_during_syntax()\n{\n    $this->shouldThrow('Exception')->during('__construct', array(1,2));\n}\n\n}\n```\n. Would you mind merging master to your branch? I'd like to see the build pass :)\n. :+1: \n. It doesn't :(\n. I'd say it's bad practice since you've got two examples in a single method.\nHowever, I'm not sure if PhpSpec should act this way. The current behaviour is surely not what the end user might expect.\n. :-1: \nThe unwritten standard is to append the .dist extension (used with phpunit, Symfony, composer's parameter handler to name few).\nI'm pretty sure IDEs can be configured to handle .yml.dist as .yml (as this is the only reason I can think of to justify this PR).\n. oops, sorry for the confusion :)\n. I was reading the diff backwards :P\n. @firstrow did you include the Processor class in use statements?\n. @firstrow why did you close?\n. It should make no difference. There's probably something else you did wrong. However, remember you should rely on an interface not specific implementation, so type hinting an interface is a good idea.\n. Why is it important that a given method exist? I'm rather interested in the behaviour it offers.\n. :+1: \n. just FYI, Symfony's probably switching to bool in order to be compatible with Hack: https://github.com/symfony/symfony/pull/10701\n. This PR contains some unrelated changes ;) (like adding spaces around dots in concatenation)\n. @hlegius feel free to submit a PR here: https://github.com/phpspec/phpspec2-site\n. @damonjones it makes sense to me and it is suppose to work this way. \nI often configure default constructor arguments in let(). Those arguments work in most cases - cases for which constructor arguments are not relevant. Then I can override the way object is constructed in chosen spec methods if it's important for those examples. I'm surprised this is broken (will have to double check).\n. > Add a check in beConstructedWith/beConstructedThrough and throw an exception if the SUS has already been instantiated, with a message about why this is bad practice.\n:+1: \nThere's ntohing wrong with calling beConstructedWith() in the let() method, and then calling it again in an example if needed. Testing two things in a method is another story and phpspec, as a tool which promotes good practices, should prevent doing so. \nSo I'm ok with overriding constructor arguments until the SUS was instantiated, but not afterwards (for reasons @ciaranmcnulty mentioned).\n. Could you paste a full example?\n. I see advantages in both approaches. My main concern is that workflow could feel a bit unnatural at times if I had to switch between phpspec/refactoring tool. \nRefactoring could be implemented as a separate tool, but integrated to phpspec so we wouldn't have to use a separate command (similar way doctrine commands are integrated in the Symfony console).\n. SkipExample extension let's you to skip examples if an interface or class is not defined.\n. I have a feeling you're trying to misuse phpspec and do functional testing. Unit tests are not something we want to parametrise.\n. This is how doctrine \"fixed\" it: https://github.com/doctrine/doctrine2/blob/2.4/lib/Doctrine/ORM/Mapping/ClassMetadataInfo.php#L869\nPhpUnit uses \\ReflectionClass::newInstanceWithoutConstructor() if it's available: https://github.com/jakzal/phpunit-mock-objects/blob/master/src/Framework/MockObject/Generator.php#L272\n. I'm :+1: for a single branch model. \nHowever, we'll have to be more careful while merging. At the moment there's no process as far as I know (PR should be reviewed by at least two people or sth like that).\n. I'm all :+1: \n. :+1:\n. @whatthejeff cheers! :)\n. Thanks for this, @whatthejeff :beers: \n. re https://github.com/phpspec/phpspec2-site/pull/45\n. @ciaranmcnulty see #461\n. Would be nice to polish the layout a bit (like \"Chapters\" section looks odd on the index page).\nI also noticed there's no links between chapters (next/previous), which is a bit unfriendly.\n. Should we extract a new PSR4Locator class? \n. I'm :+1: ;) \n@docteurklein's usage example looks much better than it would look like with addEngine() calls. \nI'm in general against bloating the API. However, I don't think this is the case here (I'd vote against addEngines ;) ).\n. :-1: as it would decrease readability. It would mean that any of the methods might throw an exception and the example would still pass.\nIt's better to be explicit:\nphp\n$this->aMethod1();\n$this->aMethod2();\n$this->shouldThrow('\\Exception')->duringMethodThatCallsAnException();\n. @vodich depends how you treat your controllers. Most of the time controllers are glue between the framework and your services. Therefore you'd write integration tests for them (and you wouldn't use phpspec for this).\nAs a rule of thumb you would write an integration test for anything that uses classes/interfaces you don't own. \n. I think it's ok to cache the composer home directory. We would save on fetching packages:\nyaml\ncache:\n  directories:\n    - $HOME/.composer\nI've used this technique in past and never had issues with aliases.\nShall we just try it and see if we ever face the issue?\n. > I see issues every day. I have constant bug reports on repos I maintain due to this bug.\nExample?\n. @ciaranmcnulty are you sure travis made this feature available for public repos? Their docs still say:\n\nThe features described here are currently only available for private repositories on travis-ci.com and our new container-based infrastructure.\n\n@GrahamCampbell no worries. I was just interested how this bug reveals itself and see if we can do anything about it.\n. Use beAnInstanceOf to change the class you're speccing.\n``` php\nnamespace spec\\Blog\\Repository;\nuse Blog\\Repository\\AbstractRepository;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass MockAbstractRepository extends AbstractRepository\n{\n    public function __construct(Model $model)\n    {\n        $this->model = $model;\n    }\n}\nclass AbstractRepositorySpec extends ObjectBehavior\n{\nfunction let(Model $model)\n{\n    $this->beAnInstanceOf(MockAbstractRepository::class);\n    // or\n    // $this->beAnInstanceOf('spec\\Blog\\Repository\\MockAbstractRepository');\n\n    $this->beConstructedWith($model);\n}\n\nfunction it_is_initializable()\n{\n    $this->shouldHaveType(MockAbstractRepository::class);\n}\n\n}\n```\n. @Markcial @gnugat wrote an extension to integrate memio in phpspec: http://gnugat.github.io/2015/05/13/memio-spec-gen.html\n. There's a name for this that predates Given-When-Then - it's Arrange - Act - Assert.\nNot sure if wrapping these steps in anonymous functions would help beginners. It increases number of indentation and makes specs less readable. \nAlternatively, we could generate the first spec with appropriate comments\n``` php5\nfunction it_should_do_something()\n{\n    // Arrange\n// Act\n\n// Assert\n\n}\n```\n. @ciaranmcnulty :+1: that would be nice.  Would there be any issues with spies?\nWe could also document the common anti patterns. \n. Sorry for off topic again, but I need to clarify this ;)\n\nYou should alway mock third-party dependencies\n\nYou should (almost) never mock your third party dependencies. For code that uses third party objects integration tests should be written. Otherwise you'd be making assumptions without really making sure they're true.\n. I'm :+1: to generate final classes by default. \nHowever, I also think we should start documenting such decisions with explanations (or links to explanations) on why we claim these are good things.\n. >  People who still struggle with OOP will be very confused by this. \nPeople who struggle with OOP will struggle with PhpSpec too. There's already loads of reasons for it. \n\nI also second @everzet 's quote: \"Delegating choice to the users hardly helps anyone ever.\"\n\nThat's exactly why we should just make this a default behaviour ;)\n. @mdavis1982 no, we don't need an option. If we keep adding options for each little feature, we'll end up with sh*t loads of switches ;)\nI think it's fine to have it as a default behaviour. It's not a big deal to remove the final keywords after a class was generated. Most people will leave it in, which is good - it'll communicate that the author haven't really thought of this class as an extension point.\n. @mdavis1982 in which case I'd see project specific templates as a better solution\n. > I really don't think the open/closed principle is about extending classes to change the parts of them you don't like.\n@ciaranmcnulty :+1: \n@icambridge the example you gave is a perfect example of the Open/Closed principle. Making the GeneratorManager final doesn't make any difference, as it's not meant to be extended (therefore there's no interface). However, extension point is there, as you're able to provide your own generators by implementing the GeneratorInterface. This is what OCP is about.\n. Closing for good reasons Marcello already gave in https://github.com/phpspec/phpspec/pull/590#issuecomment-67995169.\n@gstaniforthsessiondigital the idea is to make a distinction between specs and code. It puts you in a different mindset when you switch between a spec and a class. Try it.\n. As @jakubzapletal reminded this is an issue with shell, not PhpSpec. PhpSpec will receive the value with no slashes as your shell will use them as escape sequences. For better explanations and some solutions see https://github.com/phpspec/phpspec/issues/326#issuecomment-38039058\n. Indeed, see https://github.com/symfony/symfony/issues/16234 and https://github.com/symfony/symfony/pull/16285 for context.\n. You did not pass any arguments to your method call. \nThis:\n$this->shouldThrow('\\TypeError')->during('test');\nis equivalent to:\n$this->shouldThrow('\\TypeError')->duringTest();\n\"test\" is a method name, not an argument.\nYou should either use:\n$this->shouldThrow('\\TypeError')->during('test', [new \\stdClass()]);\nor:\n$this->shouldThrow('\\TypeError')->duringTest(new \\stdClass());\nHowever, I see no value in this kind of tests, as they're more about testing php (type system) then your code.\n. Nevertheless, phpspec should probably handle this kind of errors (as it should be possible with PHP 7).\n. Are you on windows? I couldn't reproduce your issue on latest master branch, perhaps it's already fixed by #831.\n. I'm not convinced if we need a new scenario for a bug fix. Examples can easily become unreadable if we do this every time a bug is found. \n. :+1: there's no need to use @param and it's better to have one way of doing things (from maintenance and the end user point of view). \n. @naomigo aside the memory issue which should be fixed in phpspec, you should probably work on your design a bit more. \nA lot of collaborators is a smell. Specs with lots of collaborators are hard to read and maintain. It's often hard to change the code driven this way too.\nWhen you find yourself writing lots of mocks, it's time to revise the design and see how you can decrease number of collaborators. Perhaps your class is doing too much. Perhaps some collaborators could be hidden behind a facade (not the laravel one). It's hard to say what's wrong exactly without seeing the actual code/specs. Bottom line is there's too much mocking going on in your specs ;)\nP.S. Not sure where your DI is coming from. If that's a 3rd party lib, you shouldn't mock it at all (the class that uses it should be integration tested with other tools - like phpunit).\n. Why are you mocking \\DateTime? Just create an instance.\n. It's not a workaround. I treat DateTime more as a value object. Besides, don't mock what you don't own :)\n. :+1:\n. :+1:. @dgafka cool, I'll close than! :). This is one of reasons why you shouldn't stub/mock 3rd party classes. You're only making assumptions how these classes work since you didn't write them. You're getting the assumptions wrong hence the error. Even if you got the assumptions right you have no guarantees they'll always be true.\nSolution: don't stub your command's collaborators. write and integration test for the command instead (not with phpspec). The command should be rather short (just like controllers) and only delegate to the model/service layer. This will make your integration test rather simple.. @mheki the rule is Don't mock what you don't own ;) most of the time it's worth to test the integration with 3rd party stuff.. \ud83d\udc4d . :+1:. @meridius thanks for spotting it! Closing as a duplicate of #354.. Why do you need to alter the title?. I assume it's not possible for the extension to create the ExampleNode and pass the title via the constructor? . Not sure what you mean. PhpSpec doesn't have assertEquals.\nIt is possible to pass the --verbose flag in the command line (or -v, -vv, -vvv) to get more output. You can configure this in phpstorm's test runner options for phpspec.\nAvailable PhpSpec config options are documented here: http://www.phpspec.net/en/stable/cookbook/configuration.html. You can write inline matchers: http://www.phpspec.net/en/stable/cookbook/matchers.html#inline-matcher. @Taluu for build fix see #1205\nYou should probably apply the same feedback stof gave on the Behat PR.. Now it's broken on travis... we should probably make sure terminal width is the same on both ;). Both are happy now.. Not sure what others like, but I'd prefer no space after method arguments: \npublic function foo(): Bar. Seems you created your branch off the old master (hence appveyor build is failing).. @kix ah, i guess 5.0 needs to have recent fixes merged in, @ciaranmcnulty ?. > I'm attempting to try and test a class which contains a Doctrine QueryBuilder. I realise that yes, you shouldn't be mocking a class that you don't own, however how can the class itself run without it?\nMake sure that the class that uses the query builder is only a small integration layer between your code and doctrine (i.e. hide it behind a repository interface, gateway etc).\nWrite an integration test for this layer. Phpspec won't help here, but you can use phpunit.\nAnywhere else you'll now be able to stub/mock your class/interface without having to directly depend on the query builder (this is dependency inversion in practice).\n\nI'm fairly new to PHPSpec tests, so a concept could have whooshed over me. All I'm after is to be able to test the response of the query, not necessarily everything that Doctrine does in that context. \n\nThe best test for this is the one that calls the database. Otherwise the test is worthless. It's easy to make a typo in $qb->from('Usre', 'u')->willReturn($qb) and repeat the same typo in test. The test will pass, but what is it validating really?\n\nWhen omitting the tests however the concrete class is failing as it doesn't know what to do with Doctrine, so I'm stuck.\n\nNot sure what you mean by this.. \ud83d\udc4d . What problem(s) would this solve?. You should use stricter comparison here. \n== will match both 0 and false (both can be returned by preg_match) and false would be casted to int implicitly. 1 !== preg_match would better show the intent imho.\n. Right, ReflectionClass::__toString() is not the same as ReflectionClass::getName().\n. :+1: \n@MarcelloDuarte ?\n. Yes. It used to be unique, but I had to remove it for some reason. If we make sure that class names are unique that's not gonna be an issue (probably).\n. Prove it! :D\n. If an autoloader loads a given class it remembers it's there and that's why it's better if class names are unique.\nI tried avoiding modifying the code in the context file as it could complicate things a lot.\n. @stof my reasoning behind ordering (putting 001) was to organise them in logical order, not to run them in any specific order. Anyway, I like what @MarcelloDuarte proposed with subdirectories better.\n. @ciaranmcnulty temp folder name randomized\n. Done.\n. I'd still insist that it makes more sense to use past tense in Givens.\n. @ciaranmcnulty I got it wrong again... English language, hard language :P \n. We're talking about a single example here. From the point of this example's readability I think it's better how it is now (\"example\" could be replaced by \"spec\").\n. @MarcelloDuarte I don't think it's always possible to summarise a scenario in a short sentence. That's why we've got examples clarifying the title. Imo the title should be saying what's different in this particular case.\nI improved the title a bit and applied @stof's suggestion.\nThe step verifying successful suite will most likely change in future, but I think it's good enough for the time being. The method gathering run stats could be moved to the ApplicationTester (or a class inheriting from the ApplicationTester, since it's sth PhpSpec specific).\n. object => class ?\n. It becomes necessary as soon as we have two 'the class :file contains' steps describing files in the same directory (in a single scenario).\n. It might be worth to consider using the Symfony's Filesystem component here (not in a scope of this PR).\n. @ciaranmcnulty I think @l3l0 meant introducing Filesystem should be sent with a separate PR ;)\n. @chobie I believe that ticket relates to phpspec v1\n. looks wrong to me\n. I would have fixed this...\n. It's probably a bad idea to update it every year.\n. Technically, we're dividing by totalSpecsCount here, not totalSpecs. I'd rather check if getTotalSpecsCount() returns something that's not a zero. If there was an error in the statistics collector, this could still fail. By using totalSpecs instead of totalSpecsCount, ProgressFormatter makes assumptions on how statistics collector works.\nAlso, formatting is not consistent with the rest of the code. More spaces please ;)\nphp\n$specProgress = $stats->getTotalSpecsCount() ? ($stats->getTotalSpecs() + 1) / $stats->getTotalSpecsCount() : 0;\n. :+1: :)\n. This is wrong. PhpSpec does use .phpspec.yml from your home directory. It looks for phpspec.yml and phpspec.yml.dist in your project directory.\n. The description is not really clear. Subject's description could be also clarified. How about:\n- ``%subject%``the fully qualified name of the class being specified\n- ``%subject_class%`` the name of the class being specified. This is neat! :beer:. Why are you setting the title again here, after an assertion? . \ud83d\ude31 . ",
    "whatthejeff": "I'm also planning on porting my PHPUnit formatters if you guys are interested.\n- https://github.com/whatthejeff/nyancat-phpunit-resultprinter\n- https://github.com/whatthejeff/fab-phpunit-resultprinter\nIf not, I can just package them as extensions.\n. I like the dot formatter because it's simple :)\nI love the two formatters that come with PhpSpec, but after using them for a couple of hours, I found myself wanting something a little more calming. The pretty formatter looks great, but it causes my screen to fill up with text and scroll very quickly. The progress formatter is cool too, but it's a bit too flickery for my taste.\nI know the dot printer isn't fun or new, but for me it's peaceful. Anyway, I'll gladly package it as an extension if it's not a good fit for the core library.\n. Surely :)\n. Alright, done.\n. Thanks for the reminder! I'll send a PR with a nyancat formatter later this week if no one objects.\n. @henrikbjorn nyancat formatter is at #133.\n. Basic usage example:\n``` php\n<?php\nnamespace PhpSpec\\Formatter;\nuse PhpSpec\\Console\\IO;\nuse PhpSpec\\Formatter\\Presenter\\PresenterInterface;\nuse PhpSpec\\Listener\\StatisticsCollector;\nuse PhpSpec\\Event\\ExampleEvent;\nuse PhpSpec\\Event\\SuiteEvent;\nclass PercentFormatter implements FormatterInterface\n{\n    private $io;\n    private $presenter;\n    private $stats;\npublic static function getSubscribedEvents()\n{\n    $events = array('afterExample', 'afterSuite');\n    return array_combine($events, $events);\n}\n\npublic function setIO(IO $io)\n{\n    $this->io = $io;\n}\n\npublic function setPresenter(PresenterInterface $presenter)\n{\n    $this->presenter = $presenter;\n}\n\npublic function setStatisticsCollector(StatisticsCollector $stats)\n{\n    $this->stats = $stats;\n}\n\npublic function afterExample(ExampleEvent $event)\n{\n    $this->io->writeTemp(sprintf(\n        '%d / %d',\n        count($this->stats->getPassedEvents()),\n        count($event->getSuite())\n    ));\n}\n\npublic function afterSuite(SuiteEvent $event)\n{\n    $this->io->freezeTemp();\n    $this->io->writeln();\n}\n\n}\n```\n. @gquemener I never worked on a PR for this as there seemed to be a lack of interest when I first opened this issue. Unfortunately, I don't have the time at the moment. If no one gets to it in the next month or so, I might have some time.\n. @ciaranmcnulty, I don't really agree with displaying the reason by default. In my opinion, this should be something you can enable if needed.\nPeople tend to run the same test suites over and over again. The point of a formatter should be to minimize the noise and only show you what you need to know (namely what has changed). I don't really see much value in continually reminding a Linux user that the Windows' tests weren't run, for instance.\n. I've sent PR phpspec/phpspec2-site#19 to fix that example in the documentation. The documentation needs to be regenerated as it's also missing PR phpspec/phpspec2-site#17.\nI think this was sort of a contrived example that wasn't meant to be executed as-is. If you want to execute it, you'll also need an EverChangingWorld class:\n``` php\n<?php\nclass EverChangingWorld\n{\n    private $die;\npublic function __construct($die){\n    $this->die = $die;\n}\n\npublic function liveAndLet()\n{\n    return $this->die;\n}\n\n}\n```\n. This can probably be closed as the documentation has been updated.\n. What I've been using:\njs\n{\n    \"minimum-stability\": \"dev\",\n    \"require-dev\": {\n        \"phpspec/phpspec\": \"2.0.*\"\n    }\n}\n. Yeah, generally you want to avoid setting minimum-stability to dev if you're going to be working with other packages. Another option is to use stability flags:\njson\n{\n    \"require-dev\": {\n        \"phpspec/phpspec\": \"2.0.*@dev\"\n    }\n}\n@igorw has an excellent article on these: https://igor.io/2013/02/07/composer-stability-flags.html\n. @eddiejaoude, if your directory structure is exactly as you've described it, then the following should run all of your specs: \ncd module/Application\n./../../vendor/bin/phpspec\nI don't think it's possible to specify a specific subdirectory to run at the moment as the run command expects either a class name, a file name, or the root specs directory in which file names directly map to class names via PSR0.\nIf this doesn't work for you, could you make a small GitHub repo that we can test against?\n. What about a suggested dependency?\n. Alright, whatthejeff/nyancat-scoreboard is now a suggested package.\n. @jakzal is the code from 701010d not enough?\n. No worries :)\n. To get the output you're looking for, you should use the pretty formatter:\nbin/phpspec --format=pretty\n. You can also specify the default formatter for your project with a phpspec.yml file.\n. @xenji: have you seen #205?\n. @andho: is DomDocument an option?\n. Another problem with print_r is it lacks information regarding type:\n``` php\n<?php\n/*\n * Array\n * (\n *     [0] => Resource id #1\n *     [1] => Resource id #1\n * )\n /\nprint_r(array(\n  'Resource id #1', \n  xml_parser_create()\n));\n/*\n * Array\n * (\n *     [0] => 5\n *     [1] => 5\n * )\n /\nprint_r(array(\n  '5',\n  5,\n));\n/*\n * Array\n * (\n *     [0] => \n *     [1] => \n *     [2] => \n * )\n /\nprint_r(array(\n  false,\n  '',\n  null\n));\n``\n. Casting to an array is probably the better solution. Just be careful withSplObjectStorage`:\nphp > $a = new SplObjectStorage();\nphp > $a->attach(new stdClass());\nphp > var_dump($a);\nobject(SplObjectStorage)#1 (1) {\n  [\"storage\":\"SplObjectStorage\":private]=>\n  array(1) {\n    [\"0000000068d8d4a2000000002952dc36\"]=>\n    array(2) {\n      [\"obj\"]=>\n      object(stdClass)#2 (0) {\n      }\n      [\"inf\"]=>\n      NULL\n    }\n  }\n}\nphp > var_dump((array)$a);\narray(0) {\n}\n. @stof: you can actually generate something pretty similar to var_dump() by casting to array. For instance:\n``` php\n<?php\n/\n * [\"message\":protected]\n * [\"string\":\"Exception\":private]\n * [\"code\":protected]\n * [\"file\":protected]\n * [\"line\":protected]\n * [\"trace\":\"Exception\":private]\n * [\"previous\":\"Exception\":private]\n /\nforeach((array)new Exception() as $key => $value) { \n    if(preg_match('/^\\0(.+)\\0(.+)$/', $key, $matches)) {\n        if($matches[1] == '') {\n            printf('[\"%s\":protected]', $matches[2]);\n        } else {\n            printf('[\"%s\":\"%s\":private]', $matches[2], $matches[1]);\n        }\n    } else {\n        printf('[\"%s\"]', $key);\n    }\necho \"\\n\";\n\n}\n``\n. @docteurklein I can tell you from my work on PHPUnit that anything involvingprint_rorvar_dump` is going to give you issues when working with large, recursive objects. Casting objects to an array and detecting recursion manually seems to be the best approach (at least in our situation). Take a look at https://github.com/sebastianbergmann/exporter if you're interested.\n. > I don't think a dino is a nyan (a bit of Liskov chills for me). new Cat(...) feels wrong if you get a dino.\nTo add a little context\u2013when I was making the nyan cat scoreboard, I decided to make the cat and rainbow portions customizable since I've seen some slightly different interpretations (e.g. mocha.js vs. rspec). In the project, I provided an example of customizing the cat portion of the scoreboard where I replace the cat with a dinosaur. I chose a dinosaur mostly because I wasn't sure people would notice a slightly different cat.\nAnyway, I tend to a agree that it's a little weird to use new Cat(...) to get an ASCII dinosaur. On the other hand, I don't really plan on changing any of the class names or adding any extra abstractions or interfaces because I think the library accomplishes what it means to accomplish.\n. Pretty sure this is covered by #206.\n. Is this a duplicate of #119?\n. Feels a little weird for me as the author of the phpspec nyan formatter to see it removed from this repo and packaged under someone else's github/packagist account without attribution. I understand removing it from core, but it would be nice if it could be namespaced under my github account...\n. @mdavis1982 The nyan cat formatter that is being removed by this PR was originally added by me (see #133). There's no real requirement for attribution, but it does seem a little weird to me that it wouldn't be hosted under my github account if it were removed from core.\n. @mdavis1982:\n\nthanks god to remove this from core. I already imagined the pr list polluted with X versions of nyan variants. Useless!\n\nThis formatter was in core because you couldn't have 3rd party formatters initially. I think you can rest assured that this isn't exactly a library with daily releases. There hasn't been a single new version PR since the formatter was originally added 7 months ago.\n\nPS: Sorry for my rudeness, but there are more important things in life.\n\nAgreed. I only care because I spent a bit of time getting this to work for phpspec. It's probably not obvious now, but this formatter wouldn't even be possible without changes like f48e927 which I made specifically to get the nyan cat formatter working for phpspec. It was a bit more effort than the small amount of code being removed probably indicates.\n. @ciaranmcnulty Doh!\n. @mdavis1982 \n\nI wouldn't want to move the extension to another GitHub account - purely because there are changes to your original formatter (although they are small changes), and the actual extension as a whole is mine - even though it uses your original formatter.\n\nWell, that's about how I feel too. Anyway, whatever attribution you want to add is fine with me.\n. @docteurklein \n\nI just prefer them as an extension\n\nYeah, that just wasn't an option when I originally authored the code. I prefer it as an extension too. My point here was that I thought it made sense for the extension to be under my account since I authored the code.\n. @MarcelloDuarte @ciaranmcnulty Whatever you guys decide to do is fine by me. Sorry for the commotion everyone.\n. Not sure what the confusion is here, but @thewilkybarkid's PR is restoring .yml.dist. It was #232 that changed it to .dist.yml.\n. @thewilkybarkid no problem :)\n. @tomphp Sounds like https://github.com/davedevelopment/dspec :)\n. You could probably use https://github.com/BossaConsulting/phpspec2-expect with https://github.com/davedevelopment/dspec, though I haven't tried.\n. > \"Why don't you use something else?\" - because phpspec's code looks way more mature. And its name is better. :)\nJust for the record, I was only trying to provide a jumping off point for making something like this work in PHP. I'm a huge fan / supporter of PHPSpec and I would never try to steer someone away from it :)\n. > @cxj You could abstract process handling yourself (or just use a component that does it for you)\nComposer is a good example of a lib that uses this technique with symfony/process. Another option is to use something like uopz to stub out the internal functions.\nNOTE: There's nothing wrong with having a suite of quick unit tests and another suite of slower integration tests which both cover some of the same code.\n. We actually just switched to ocramius/instantiator in PHPUnit (see sebastianbergmann/phpunit-mock-objects@84b2756). It handles some edge cases that other libs are missing.\n. @stof That makes sense.\n. @adamelso Sounds good. Give me just a minute :)\n. Sure thing.\n. Test failures are related to https://bugs.php.net/bug.php?id=67453. Seems we have the same issue in PHPUnit (sebastianbergmann/phpunit-mock-objects#178). I'm unaware of any known workarounds at the moment. I'm going to close this until I have more information and more time.\n. @Ocramius Do you have any ideas to work around https://bugs.php.net/bug.php?id=67453 in 5.4/5.5?\n. @stof Seems that was deliberately removed in ocramius/Instantiator@dcba7c6.\n. @MarcelloDuarte It's mentioned earlier in this ticket. The test failures are due to https://bugs.php.net/bug.php?id=67453. According to @remicollet, the fix he committed is tentative for 5.6 and will not be ported to 5.4/5.5 [1].\nUnfortunately, I don't think there's a workaround at the moment. We actually have the same issue in PHPUnit. As far as I know, the discussions on how to address this in 5.4/5.5 are still in progress.\n. So PHP 5.4.30 has been released. From what I can tell, there will no longer be a way in PHP 5.4/5.5 to instantiate internal classes that don't implement custom serializers without invoking their constructors. This means that the tests that are failing on PHP 5.4/5.5 will continue to fail.\n. For reference, here is the relevant excerpt from the upgrading guide:\n\n4a. unserialize() change\n\n\nStarting PHP 5.4.29, the bug fix for bug #67072 introduces a change to \n  unserialize() function, detailed below:\nIf the string looking like 'O:..:\"ClassName\":...' is unserialized, and\nthe class named is an internal class that declares custom unserializer\nfunction, or extends such class, unserialize would fail.\nUsing O: for user classes not extending internal classes (including\nthose implementing Serializable) is still supported in 5.4, though\nit is deprecated and may not be supported in 5.6. Same for using O: for\ninternal classes implementing Serializable (like ArrayObject) and\nclasses that extend them.\nThe reason for that is that O: format is meant to be used with classes\nthat do not define custom handlers, and was never intended for the use\nwith classes that do. When used with the class that relies on custom\nunserializer, it can leave the object of such internal class in an\ninconsistent state which has been observed to result in crashes and may\nalso lead to memory corruption and ultimately even arbitrary code\nexecution. This was never the intended use of unserializer, and mere\npossibility of doing this constitutes a bug, since the data passed to\nunserialize() is not a valid serialization of any object. Since there\nare many applications applying unserialize() to untrusted data, this\npresents a potential security vulnerability. Thus, keeping such bug in\nthe code base was considered too dangerous.\nWe are aware that some applications use O: format as a way to\ninstantiate classes. This was never the intended usage of serializer,\nand ReflectionClass methods such as newInstance or\nnewInstanceWithoutConstructor can be used for that. We're working on\nproviding more comprehensive solution for such use cases in PHP 5.6 and\nwelcome the ideas in this area.\nWe note also that using unserialize() on any data that is not the result\nof serialize() call continues to be an unsupported scenario and should\nnot be relied on to produce any specific result.\n. The HHVM failure is a prophecy bug. Prophecy is failing because it's grabbing scalar type hints from HNI extensions. For instance:\n\n\n\nphp\n$prophet = new Prophecy\\Prophet;\n$prophet->prophesize('ReflectionMethod')->reveal();\nwill fail because it adds the scalar type hints to the export method:\nphp\npublic static function export(string $cls, string $name, bool $ret = false) {\n   return $this->getProphecy()->makeProphecyMethodCall(__FUNCTION__, func_get_args());\n}\n. @docteurklein Yeah, I have a PR in the works :)\n. @stof HHVM 3 also has some parity regressions in the Reflection API it seems.\n. Prophecy PR is at phpspec/prophecy#109.\n. > Not sure if I follow: how is phropecy related in object instantiation?\nIt's not. My PR had failures on HHVM that were unrelated to instantiation.\n. > As for the internal classes, I could always extend them and remove the constructor (at runtime), but it is scary dangerous/hacky (because of the amazing php engine and its amazing segfaults)\nYeah, that might be a workable solution for most cases. Definitely won't be possible for final classes or classes with final constructors.\n. > This appears to be fixed in 5.5.14, at least according to the release notes.\n@ciaranmcnulty: It's as fixed as it's going to be. Due to security issues, certain internal objects can no longer be instantiated with the unserialize() hack. For instance: http://3v4l.org/DO5kW\nAfter a bit of testing, the following seem to be the only core classes that generate the 'Erroneous data format for unserializing...' message now:\n- Closure\n- Generator\n- SplFileInfo\n- DirectoryIterator\n- FilesystemIterator\n- RecursiveDirectoryIterator\n- GlobIterator\n- SplFileObject\n- SplTempFileObject\n- PDORow\n- SimpleXMLElement\n- SimpleXMLIterator\n- Phar\n- PharData\n- PharFileInfo\n. @ciaranmcnulty We probably need to update travis to test against HHVM nightly since HHVM 3 has some parity regressions in the Reflection API.\n. Looks like the prophecy dependency doesn't need to be bumped. Seems there is still a remaining HHVM failure I need to look into. I should have time to investigate it in the next couple of days.\n. Alright, I've confirmed that the remaining issue is indeed another Zend compatibility issue in HHVM.\nHere is a quick reproduce case:\n``` php\n<?php\nclass TestArray extends ArrayObject \n{\n    public function offsetExists($index) \n    {\n        return true;\n    }\n}\n$test = new TestArray();\nvar_dump(isset($test['abc']));\n```\nIn Zend PHP you get the following:\nbool(true)\nAnd in HHVM you get the following:\n```\nNotice: Undefined index: abc in...\nbool(false)\n```\nThis is related to facebook/hhvm#2181 and facebook/hhvm#2871. Basically when you use isset() on an ArrayObject subclass, HHVM calls offsetGet on the base ArrayObject class if offsetExists returns true. I can look into fixing this in HHVM soonish, but maybe we should add a workaround in the meantime. Thoughts?\n. HHVM issue is here: facebook/hhvm#3309\n. @ciaranmcnulty The HHVM bug is fixed now. I just confirmed that all tests pass in the latest HHVM. Would you mind restarting the travis build?\n. @ciaranmcnulty Are you logged in? You should be able to do a restart on travis if you're a collaborator on github.\n. @ciaranmcnulty Oh wait, I don't think you reran my test. Can you rerun this one: https://travis-ci.org/phpspec/phpspec/builds/31117450\n. Thanks, @ciaranmcnulty. All is green now \\o/\n. Hey, you should be a little nicer to you!\n. @yosmanyga It looks like you need to update some tests for this change.\n. @ciaranmcnulty You are correct :)\n. PHPSpec is not currently tested in the HHVM parity suites (something I plan to fix in the coming months), so this might be our best avenue for detecting regressions. Having the nightly builds as an allowed failure will likely lead to people ignoring failures in what will soon become the \"stable\" release of HHVM. \n. My vote is to merge it. If there are persistent failures, we can always add it back to the allowed failures until they are resolved. The nice thing is that failures in the nightly builds can normally be resolved in a day or two. In my opinion, a lot of regressions in HHVM 3.1 and 3.2 could've been prevented if more people were testing against the nightly builds.\n. > @whatthejeff Having this in the parity suites would be amazing - the issue I have right now is that when it breaks there's literally nothing we can do about the breakage aside from file bugs against HHVM...\nWell, you can always ping me :) \nI've fixed a handful of regressions for HHVM already. They are normally pretty quick at merging PRs.\n. This doesn't seem to be a phpspec bug.\n. The README recommends:\n- #phpspec on freenode\n- https://groups.google.com/forum/#!forum/phpspec-dev\n. No worries :)\n. Yeah, I think this is related to facebook/hhvm@842d6fb. I should have time to look into it later tonight.\n. This ini setting might fix the issue you're having here.\nhhvm.libxml.ext_entity_whitelist = \"file\"\n. @ciaranmcnulty Have you tried #423?\n. @stof @ciaranmcnulty This should fix #422.\nUnfortunately, this option can't be set with ini_set() and the usual way of adding INI values in travis doesn't work for HHVM (see travis-ci/travis-ci#2523). I tried adding the value to /etc/hhvm/php.ini, but it's owned by root.\n. @stof Good to know! Let me try that :)\n. @stof, Yep. The fix is on the way :)\n. Thanks :)\n. @stof travis-ci/travis-cookbooks#356 :)\n. Happy birthday, @jakzal :beers: \n. Also :+1: \n. This is not really a phpspec issue. Seems Behat 3 doesn't support the parse_str format for BEHAT_PARAMS. Not sure if this was intentional since it's not in the changelog. Updating the BEHAT_PARAMS env variable to be in JSON format should solve the problem.\n. Was removed here: Behat/Behat@576b394.\n. > @thecrimpmaster Is this an environment variable you have set?\n@ciaranmcnulty Yes, it's an env var. Behat 3 no longer supports the parse_str format for this env var.\n. > Sigh ok, I am dumb\nWas an honest mistake. You are definitely not dumb :)\n. @ciaranmcnulty Would you mind rerunning the tests? Seems there was a timeout.\n. :)\n. There's a global constant defined in the executable, but it's not available from behat (for obvious reasons).\n. I agree that it is a little silly to update the same thing in multiple places though.\n. Yeah, that makes sense to me. I'm not sure if there's a benefit to keeping it external.\n. Although it could be confusing if Application::getVersion() and Application::VERSION disagreed :P\n. @stof As long as it's not an outdated version, I'm happy :)\n. @GrahamCampbell Fixed :)\n. Maybe https://github.com/doctrine/instantiator/releases/tag/1.0.2 broke the travis build? \n/cc @Ocramius\n. @ciaranmcnulty http://3v4l.org/HSCKZ\n. @ciaranmcnulty Not sure if it's documented anywhere, but we can try to brute force it: http://3v4l.org/uRFgM\nAt any rate, this is another PHP5 computability issue in HHVM. We've had similar issues in php-code-coverage (see: facebook/hhvm#2992).\n. Seems like anything that starts with /:systemlib. or //systemlib. is internal. There's probably no need to support HHVM 3.0.1.\n. Would also be nice for https://github.com/phpspec/prophecy/pull/125#discussion_r17214671.\n. See https://github.com/phpspec/phpspec/issues/507#issuecomment-55383030\n. No problemo :)\n. Seems to be some issue related to symlinks (see facebook/hhvm#4501). If you're interested in a workaround, you should be able to run ./vendor/behat/behat/bin/behat instead of ./vendor/bin/behat until its fixed in hhvm-nightly.\n. https://github.com/phpspec/phpspec/pull/590#issuecomment-67995169\n. No problem :)\n. Probably related to: https://bugs.php.net/bug.php?id=50688. I know the call center relies on debug_backtrace().\n. @padraic It's not just exceptions. See: http://3v4l.org/T9hZa\nIf I remember correctly, phpspec relies on debug_backtrace for recording method calls.\n. Just FYI, the PHP documentation provides a regular expression for matching valid class names. Of course you need to extend this a bit, but it's a good starting point.\n\nThe class name can be any valid label which is not a PHP reserved word. A valid class name starts with a letter or underscore, followed by any number of letters, numbers, or underscores. As a regular expression, it would be expressed thus: [a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*.\n. Alright. It wasn't imported initially because it needs to be aliased and I wasn't feeling clever enough to think of a good alias :P\n. @stof @Ocramius Should we be caching \\PhpSpec\\Util\\Instantiator as well? Otherwise caching \\Instantiator\\Instantiator doesn't really add much value.\n. @Ocramius Yeah, unless we make the cache static or do a bit of refactoring, I don't think caching \\Instantiator\\Instantiator has any impact on the number of objects created. I'll leave this up to @stof.\n. > And if HHVM does not support isset($subject['abc']) for ArrayObject, it is a bug in HHVM which must be reported\n\n@stof I reported it a few days ago and it's already fixed in hhvm-nightly: facebook/hhvm#3309\n. :+1: This shouldn't be necessary.\n. This should probably be some type of RuntimeException.\n. I just went by what is suggested in the README for doctrine/instantiator. /cc @Ocramius.\n. Thanks, @Ocramius! Fix is here: #450.\n. @stof I think status is fine. It's more commonly referred to as an exit status, if anything. Even PHP's documentation refers to it as a status. I know Symfony calls it an exit code, though.\n. > I think the naming in the PHP documentation is a confusion with the HTTP status code\nI don't really think so. I know libc, bash, etc. also refer to it as an exit status. That's why I mentioned that exit status is probably the most common terminology.\nAnyway, I've also seen return code, exit code, etc. in a number of places. Probably not a huge deal either way. \n. Seems it should be a range (2013-2014).\n. ",
    "henrikbjorn": "@whatthejeff any news on the nyancat :)\n. @MarcelloDuarte any feedback on this?\n. What kind of implementation would be preferred? $this->throwSkipped() ? or somthing similiar?\n. If i have time later today or this week ill look into it.\n. @gquemener current status is no time :S\n. Would it make sense not to require the full callable when using beConstructedThrough if the method is on the subject already?\nIf we are speccing Example then we could use $this->beConstructedThrough('myFactory') instead of $this->beConstructedThrough('Example::myFactory').\n. Kind of need this aswell :) for speccing guzzle webservices client.\n. This sucks, being needed to add run to the command everytime you run your specs is a annoyance. \n. Dont want to pollute my env with wierd aliases that does not work accross systemts. A system designed to be run alot of times during development should make it as easy as it can. phpunit doesnt force you to do phpunit please-run-my-tests\n. @docteurklein most command line tools that you can use (including the php binary) defaults to primary goal. Same goes with rspec, phpunit, php, siege, ab, ruby, python, behat etc. The only system thats defaults to its list command is the ones developed with Symfony Console. So by supporting the default from Symfony we are actually doing something abnormal to the rest of the tools that exists.\n. describe is basically just a generator and PHPUnit can do the same thing (granted it might be in another package) http://phpunit.de/manual/3.7/en/skeleton-generator.html.\nDescribing object is done in the specs with code, not with the auto generation of a spec class based on a namespace name.\n. Ohh f... i am fixing the specs that is failing :)\n. Okay 5.3.3 does expect an constructor if they pass an empty array.. i give up. Any got a solution or i think we should just revert that first pr i did..........\n. @MarcelloDuarte its finished but 5.3.3 fails :)\n. Currently we test 5.3.3 explicitly. This have some issues according to the fix for hhvm. 5.3.3 cannot use an empty array, if any argument is passed to newInstanceArgs it requires the constructor to be present.\nThe test of 5.3.3 also lowered the minimum requirement from 5.3.4. I suggest upping it back to 5.3.4 and then have this fix merged.\n@docteurklein can you shed some light on why it was lowered and if i have any implications if it was raised back to 5.3.4\n. @ciaranmcnulty are they forced onto 5.3.3 or is the project using it minimum requirement 5.3.3?\n. I dont like the use of Argument::any() but could not find a or Token for prophecy.\n. @docteurklein newInstance requires at least one parameter.\n. hopefully in the next couple of days, depends on how much personal stuff will be going on.\n. Is there a Argument::oneOf(array(), Argument::none()) ?\n. Cool, that is were i got stumbed yesterday with the constructor generated from prophecy\n. @stof this is awesome! :+1:\n. Waiting until the 2.1 release will ensure it have a lot of impact on a lot of users. It is not so long ago it was changed to require the run command. So to limit the impact it should be done sonner than later.\n. I fail to see why phpspec have more responsibility than Behat or PHPUnit In the end it is all about running your specs, not about generating skeleton or placeholders. Sure it is convenient but not really the responsibility of PhpSpec. If it was it should do a much better job of introspecting and writing almost complete specifications for us.\n. @stof it would not work :) but was to get the point across about how i see the responsibility. The writing of specs or examples is the responsibility of the developer, just as unit tests in phpunit and features in behat.\n. :+1: for this feature.\n. id really hope this gets included, would clean up the use of fixtures someplaces.\n. @gquemener lets say to are developing a serializer that uses reflection in order to serialize the properties of an object. In that case you have to have a \"real\" object for which you can see the returned result :)\n. I would use the bootstrap to just add the Fixture namespace to the autoloader.\n. @MarcelloDuarte any news on this?\n. @ciaranmcnulty sure it was me you wanted to highlight?\n. Looks awesome (havent look at code though) :+1: \n. Would be great to have a shortcut method for throwing the exception.\n. I am against annotation. If i have some special requirements, then i have to implement a annotation and its corresponding guard.\n. Would leave it up to the developer. Developers arent that stupid that they add $this->markSpecSkipped() at the bottom :)\nAnnotations are the root of all evil!\n. Well the $this->markExampleSkipped() is proberly save to use.\n. Anoter use statement?\nIt doesnt really belong on Argument, that is also provided by prophecy.\n. Can we get it in 2.0 stable? with just the throwing and an shortcut method? I find i really need this a lot.\n. I am not sure what efficientless means?\nAnyways as Stof says its impossible to do a hot reload in the same process. The correct way would be to use the process component and then execute phpspec through that when a spec changes.\n. Meh\n. This is awesome!\n. +1\n. Why is it called shouldPropagate, sure you arent naming it wrong (in your lib)?\n. :+1: \n. https://github.com/phpspec/phpspec/blob/8b70aea588f8dd7cb9bb278be4774f571c0afbdc/src/PhpSpec/Console/Application.php#L148\ndocumented https://github.com/phpspec/phpspec/blob/c9733bebd822fd9d688a7ad241d554ede0b300dc/docs/cookbook/configuration.rst and https://github.com/phpspec/phpspec/blob/c9733bebd822fd9d688a7ad241d554ede0b300dc/docs/cookbook/console.rst\n. composer have a autoload-dev that might be of use, if you are just loading classes.\n. I think this change is wrong, normally when using functions in php that give you a directory back, it will not contain a suffixing /. In this case you are explicitly adding it.\n. Uses Makefile now.\n. I dont think it is a problem, you would never use the phar to run the tests for the library from which is what build.\n. when building the phar it will take a part of the git hash and append to the generated name, in order to avoid overwrites and clashes.\n. When i run it on OS X i get\n-rwxr-xr-x   1 Henrik  staff  1636825 Nov 10 17:17 phpspec-2.1.0-RC1-19-g667b380.phar\n. I just installed it via composer global require ~2.4 havent done anything else :)\n. Don't think that is really a device requirement. More a build one. \n. @ciaranmcnulty i opted for the simple solution, dont use magic named phars, just make a phpspec.phar instead.\n. on the releases page\n. i would gladly make the phars, but someone with powah needs to edit the releases :) (not the tags, just add the file to the github releases tab thingy)\n. @ciaranmcnulty haha looks good :) I sucked at jeopardy!\n. Its the \"informan\" standard such as phpunit.xml.dist etc.\n. :+1: \n. Am i the only one who havent figured out how to make the src/Something.php and spec/SomethingSpec.php work for psr-4 and a class with a Vendor\\Something in src/Something.php ?\n. This can be fixed by introducing a new \"strict\" mode, where the new exception is thrown in strict is true and the class cannot be found. It should be off by default, but would allow for the new developer friendly feature and be BC.\n. :+1: \n. Well, doesnt this already exist through behat? and isnt behat a better platform for these kind of tests?\n. Seems like there is two cases of autoloading defined here https://github.com/phpspec/phpspec/blob/master/bin/phpspec#L6\n. I think this is a dangerous thing to start doing, also it sounds like it would be very fragile.\nI dont think it is the the goal of phpspec to run EVERY spec at ANY cost. And therefor a fatal error just dumping to the console and exiting is okay.\n. I have seen other projects, just listen \"Contributors\" as one of the authors.\n. woups ill fix that.\n. ",
    "nomasprime": "@stof Already have it defined for let(), believe phpspec remembers it for other specs.\n. @everzet, @MarcelloDuarte Can you guys help me with this?\n. @everzet Ah! The typehinting's really nice addition and I get how doubling works now, gratitude.\n. ",
    "gquemener": "RubySpec guards really have some great ideas phpspec could borrow (like environment checks and bug tracking).\nWhat's your status on this one @henrikbjorn @whatthejeff ?\n. Just for info, I've started to implement a guarding mecanism.\n. Well I'll keep it simple for now ^^\n. I've encountered a major issue of the skipping example feature implemented in #296. \nAs today the example can only be skipped by manually throwing an exception within the example, it's absolutely impossible to typehint example argument with classes that might exist under circumstances.\nFor example, let's say I'm creating a doctrine ODM listener:\nphp\nfunction it_does_stuff_on_post_load(\\Doctrine\\ODM\\MongoDB\\Event\\LifecycleEventArgs $args)\n{\n    if (!class_exists('\\Doctrine\\ODM\\MongoDB\\Event\\LifecycleEventArgs')) {\n        throw new \\PhpSpec\\Exception\\Example\\SkippingException('Doctrine ODM is not installed');\n    }\n    // ...\n    $this->postLoad($args);\n}\nIt will not skipped test if the doctrine odm is not installed. Instead it will throw a ReflectionException(\"Class Doctrine\\ODM\\MongoDB\\Event\\LifecycleEventArgs does not exist\").\nThis is quite a big issue that removes most of the usefullness of this feature IMO.\nI'd say go for annotation, it's the only and cleanest way to skip an example before actually working with it.\n. @ciaranmcnulty Yes, the collaborator maintainer is throwing it.\nSorry for the tiny stacktrace, here is the long story:\n```\nexception [exc:ReflectionException(\"Class Doctrine\\ODM\\MongoDB\\Event\\LifecycleEventArgs does not exist\")] has been thrown.\n   0 vendor/phpspec/phpspec/src/PhpSpec/Runner/Maintainer/CollaboratorsMaintainer.php:121\n     throw new ReflectionException(\"Class Doctrine\\ODM\\MongoD\"...)\n\n```\nIt's not a bug IMO\n. @stof How would you do that?\nPersonnally, I would register a beforeExample subscriber, check example doc block and throw the exception (from the subscriber) if necessary. Problem is that the subscribers calls are made outside of the try/catch (https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Runner/ExampleRunner.php#L77-L79).\nSo, I am not sure it's the way to go.\n. @stof Oh yes absolutely, thanks\n. @ciaranmcnulty When your example requires a collaborator which class does not exist.\nImagine you're working on an ORM/ODM solution which provides possibility to use one or another. The doctrine/mongo-odm dependency is optionnal and you still want your specs to pass when you don't require it.\n. Here is the extension: https://github.com/akeneo/PhpSpecSkipExampleExtension\n. You could:\nphp\nfunction it_does_undoable_stuff()\n{\n    if (version_compare(PHP_VERSION, '5.4.0', '<')) {\n        throw new SkippingException('Undoable stuff requires php 5.4.0');\n    }\n//...\n}\nBut I would only recommend it in case that the class is designed for a specific version of php.\nYou don't wan't your library to fail because you're using a wrong version of php that is not specified as outdated in your packages manager (like in composer.json).\n. 2.1 is coming soon @MarcelloDuarte? Xmas maybe?\n. :beers: :christmas_tree: \n. Yes!\nLet me try that and document it for you ;)\n. Awesome! Thanks and good job @l3l0!!\n. https://github.com/phpspec/phpspec/issues/33\n. Thanks for your reactivity @stof :wink: \n. What about phpspec init My\\Foo\\Class to start describing it? Or phpspec start ...?\nWell, in the end, I like phpspec describe ..., it makes it clear that it'll generate (skeleton) spec for the specified class (and not the class itself).\nThen why not putting run as the default command?\nThis seems to have been introduced in symfony/console 2.5 but workaround can still be found to achieve it.\n. So maybe executing phpspec (without argument), could run phpspec run with arguments defined \nin phpspec.yml?\nAs soon as an argument is defined, then it tries to launch the corresponding command.\n. Scrutinizer inspects specs, thus raising invalid issues IMO @everzet \n. About using SimpleXML or DOMDocument, well I'm not totally convinced it's a wise choice as it works (and is still readable) using simple strings. Maybe it could enhance performance then? I'll do some simple benchmarks.\nAnother point in favor of this solution is that current Behat JUnit Formatter does not use SimpleXML nor DOMDocument;\n. This is now ready to be merged @stof @everzet :goat: \n. That's a great news for phpspec then!\n. I don't see any lack from this PR (except my two comments). I guess it's now a matter of deciding either or not it should be in the phpspec.\n. I'm curious about your use of fixtures within specs. Could you develop a bit please?\n. And so you'd use the bootstrap to require this \"real\" object instead of putting the class inside the spec? Indeed, it makes it more reusable and clean the specs.\n. yep I agree with @stof, the --format option is only used for the run command (like --stop-on-failure for example). Thus, the behaviour you describe makes sense to me.\n. With respect @dizzley, could you develop the \"you guys arent going to see things through a new user's eyes\" part?\nWhat's the real issue here?\nCould you post some commands, its output and what output you were expected please?\n. No harm taken @dizzley, I was just trying to figure out your point of view. I feel like this community (the one I work with on a daily basis, so I'd say the PHP ecosystem community) is quite open minded and helpful whenever someone has a real issue with one of the tool.\nEven if the issue is so trivial as it is explained in the documentation, you'll get an answer (maybe it'll be a RTFM, but you'll get an answer!).\nSo, I know it sometimes is totally impossible to know what the author trully meant when he wrote his message, so I prefer ignore it or ask for more explanation, and really, without harm taken (that's what I did).\nFinally, I'd recommend to close this issue and reopen it later when you got a clear and accurate scenario of inconsistency in the phpspec commands, I'll be glad to enlight you (if my knowledge permits that).\nCheers :goat: \n. @henrikbjorn I'm thinking about the future of this feature and marking example as skipped through annotation (in order to not pollute example).\nphp\n/**\n * @skip This is really impossible\n */\nfunction it_does_impossible_stuff()\n{\n}\nAnd implements some nice guards:\nphp\n/**\n * @php >=5.4\n */\nfunction it_does_stuff_with_traits()\n{\n}\nThus, the shortcut might be useless if we go that way.\n. Yes I was thinking about that too.\nWhat about:\n``` php\n/*\n * @callback customRequirement\n /\nfunction it_does_stuff()\n{\n}\npublic function customRequirements()\n{\n    return true || false;\n}\n``\n. In fact I don't see other programmatic way to ensure guard would be executed before the example (than using annotation).\n. Ah ah, I agree, unless they are well thought and framed.\nI agree for themarkSpecSkipped(ormarkExampleSkipped, orskipIt`*) shortcut, it makes sense to either use php or annotation to me.\nBUT what about guard then?\nLet's imagine a PHP version guard, would you be ok with something like that:\n``` php\nfunction it_does_some_stuff_with_trait()\n{\n    $this->ensurePHPVersionIs('>=5.4'); // We let the developper the responsibility of checking environnement before doing anything else in the example\n// ...\n\n}\n```\n*I personnaly like this one\n\n. This is indeed a valid point, which can be avoided either by throwing exception by hand, either by using annotations (again... sorry @henrikbjorn)\n. What about using static methods like the Prophecy\\Argument class?\n. Yep it works pretty well\n\n. Yep it means adding a new use statement to the class template. (or not?)\n\nIt doesnt really belong on Argument, that is also provided by prophecy.\n\nI agree\n. Any thought my good ol' (freshly rewarded) @everzet?\n. Personnal reminder: I've just noticed I inversed position of Complete and Skipped bar in the progress formatter. \nEDIT This is due to the formatter sorting of events by key, for which I don't understand its purpose (https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Formatter/ProgressFormatter.php#L58)\n. Tell me if you need me to reopen the PR against develop please\n. What about merging it before 2.0.0 (stable) and think about enhancements (like annotations or helper or shortcut) in the next release?\n. @MarcelloDuarte I've reopened it against develop here: https://github.com/phpspec/phpspec/pull/306 (And yes I'm happy with that!)\n. yes sorry, I meant unefficient (really good french knowledge @cordoval btw ^^)\n. And yes, spawning child process IS indeed the way to go. Just wanted to be sure it was absolutissimo impossible to reload php class at runtime.\n. Oh... thanks @ciaranmcnulty ;)\n. Hello.\nAllow me to insist cuz this is blocking for extension developpement as it prevents from extending the phpspec commands. /cc @stof @everzet @MarcelloDuarte \n. Oh yes indeed, that's why setupCommands in the constructor (because it was relying on the getDefaultCommands method).\nWill do the changes ASAP, thanks.\n. :beers: \n. Thanks @cordoval \n. @MarcelloDuarte I'd like to update the doc to add chapter about skipping example. On which branch should I create the PR (on phpspec/phpspec2-site)?\n. This could be in a professionnal edition (Only 19.90$ the first month), it also would be an unpopular move! \nI've personnally never used or seen a project that prevents inheritance that much. Most of the time I need to override an implementation, I really need to override one method of this implementation, thus inheritance makes sense in that case.\nIt'd be like delivering a product full of private properties, it bothers me each time I see that. I'm convinced about your will of spreading the good words @everzet, but I'm not sure that generating final classes by default is a good move (or if so, it means I'm doing it wrong, and I'd love to see how composition could avoid me to copy/paste the whole class when overriding it).\n. ping @MarcelloDuarte\n. Hello,\nNo problem for me, I didn't really think about best location to do it. I just saw it was there, and proposed the changes...\nAs long as it doesn't return 2 when examples are skipped, I'm ok with it.\n. Yep, I struggled a bit finding how the exit code was decided and saw that it's using the suite result code.\nI'll add a result code transformer in the command to avoid mixing this two logics.\nI have the feeling that this simple rule could be implemented (but would bring BC issue, as command will not return same codes anymore):\n- Result code is PASSED or SKIPPED => return 0\n- Result code is something else => return 1\nIs it really needed to have more than 2 possible exit codes?\n. Thank you @ciaranmcnulty ;)\n. No no no!!\nLet's not introduce finite state machine inside phpspec ^^\nI'm talking about the daily usage of phpspec (which is the workflow, the usage cycle).\n. @cordoval nope, tl;dr; sorry\n@stof ok, I'll take a look into this tool\n. I don't understand why you're talking about finite state machine where I'm talking about BDD workflow @cordoval ?\n. @MarcelloDuarte Yep, I'll be happy too. I'll keep you in touch!\n. Super!\n. Hello,\nNot sure this can help, but I wrote an extension to skip examples through annotation: https://github.com/akeneo/PhpSpecSkipExampleExtension\n. @ciaranmcnulty done: https://github.com/phpspec/phpspec/pull/606\n. Ping @echochamber @felixkiss I think you might have an opinion on this one.\n. Ping @ciaranmcnulty \nHello, I think you might be interested in this one too :)\n. IMO, it should be explicit that the matcher expected a certain type and that the given one is not correct. Otherwise, just stating that no matcher \"foo\" was registered is confusing, as it sounds like phpspec is buggy.\nI agree to switch back supports implementation, but to make the \"no matcher\" error message more explicit.\n. After rethinking this PR, I discovered that the exception thrown in case of \"no matcher found\" is pretty clear: https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Runner/MatcherManager.php#L77-L87\nIt states that no haveKeyWithValue([array:2]) matcher found for null..\nI've restored the type checking inside the matcher.\n. Indeed, that's a quite valid point @stof.\n\"Wrapping\" the phpspec related configuration into a phpspec key would be a better choice IMO.\n. What do you think about https://github.com/phpspec/phpspec/pull/955 ?\n. I don't really see the difference between the two functions. Can you enlight me please?\n. Oh ok, thanks!\n. So it should be htmlspecialchars($exception->getMessage(), ENT_COMPAT | ENT_XML1), right?\n. Please, put a new line before scenario\n. Your scenarios should always start with a \"Given\"\n. You can use $bootstrap here\n. and camelCase\n. Better replace \" by ' and backtick by ' here\n. It's more like an ol' habbit, I prefer to write Given/When/Then and to drop the When when the Given is enough, but that's right, there's no true rule about that out there\n. Well, that's a valid point. It means I'm using Given as When in those cases.... Baaaah, details! As long as it's readable, I'm ok with it ^^\n. Not sure about shifting constant values as it can be a BCB for extension not using constant name\n. But in the same time, they should use constant name, soooo....\n. Good point, I took example on the PendingException. But it surely makes sense to enforce giving skip reason.\n. I absolutely agree\n. You mean doc block from lines 19 to 22 ?\n. Sorry what?! I'm a proud user of Vim mister cordoval! I feel kinda offended here... :wink: \n. I'd change this check to null !== $bootstrap as $bootstrap will always be either a string or null.\n. I'd not transpose bootstrap file location to the absolute form. Imagine someone pass the bootstrap file location as an absolute path already, this would prevent requiring it.\n. My purpose was to avoid silently overriding matchers.\nRemoving the Matcher suffix is only esthetic, and does not serve any real purpose when I look back at it.\nIn fact, the id could be the class name provided in the configuration (ie: matchers.App\\Matcher\\FooMatcher), I think it should work (and would speed up the registration process a bit).\n. ",
    "wysow": "@gquemener your extension is cool, thanks ;-) but what about skipping a spec based on PHP version for example ?\n. ",
    "hackel": "Would there be a way to avoid even showing the spec as skipped when throwing a SkippingException?\nI'm re-using some tests in a trait, but need to test a class which doesn't have one of the methods tested in the trait.  I'm looking for a way to dynamically remove the test from the particular spec without repeating the code.  I can test is_callable on the method and throw a SkippingException, which works great, but I'd rather it not show up as \"skipped\" since really it shouldn't exist at all, and it doesn't look so good on my CI reports.\n. This isn't an issue with backslashes, however.  I'm used to escaping classes with quotes already, which, as mentioned in that bug report, works fine with describe.  It does not work fine with run, however.\nWhen I run phpspec run 'MyApp\\Whatever', phpspec looks for the file MyApp/Whatever (e.g. it's converting backslashes to forward slash directory separators), and not even looking in the spec_path directory.  I suppose it's trying to maintain compatibility for Windows users or something.  In any case, this returns a file not found.  What I'm proposing is that when this file not found is encountered, it checks to see if it can find a spec file associated with the class name, as it is able to do when running phpspec run without any arguments.\nEven phpspec run 'spec\\MyApp\\WhateverSpec' doesn't work because of this issue, it needs a full path, regardless of whether it's using back or forward slashes.\n. I'm really just using a shared let method to avoid code duplication...  That way the specs also follow the structure of the code--if the method is used in the parent class, the mocked version gets defined in the parent test class.  I want the mock to be defined the same regardless of which child class is using it.\nAt least that was my thinking.  If I'm missing something, please let me know!  It seems like otherwise I would just have to paste the same exact code into all of my specs.\n. ",
    "unfunco": "Behat has ciaranmcnulty/version-based-test-skipper and the aim of that is to support multiple projects, maybe it too could support PhpSpec and multiple annotation types that could used for OS types and extensions?\n. Related: #1025\n. This is accepted for PHP 7.2: https://wiki.php.net/rfc/get_class_disallow_null_parameter\nThis has revealed some changes are required in PhpSpec (8 broken examples all related to the above RFC)\u00a0\u2013 the change to the Travis configuration to nightly builds passes the failing integration tests, it is release candidate 2 of PHP 7.1 on Travis that is the issue causing the failing builds of #1000 and #1010.\n. Anything constructive to add other than an emoji?\nMy reasoning for the above changes are:\n- PHP 7.1 isn't production ready, and likely won't be for another month or two, the release candidates currently used to build and continuously integrate PhpSpec are segfaulting, causing failed builds.\n- Using nightly builds keeps the project closer to the edge of the latest developments to the language itself, there will perhaps be some additional failures testing against nightlies, but that's why I think it's perfectly reasonable to allow those failures to happen and not obstruct the continued development of the project.\nFeel free to improve upon the PR.\n. @stof @ciaranmcnulty So should I move env: DEPENDENCIES='dev' to 7.0, add back in 7.1 as well as nightlies, and allow both 7.1 and nightlies to fail without failing the entire build?\n(Personally, I think this is reasonable and would avoid holdups with other outstanding PRs)\n. Good point, it might be good to know the reason rather than have Travis send the error to /dev/null and having no knowledge of why... I will update.\n. It's failing on Windows, and I have no idea how Windows works... I've done a quick search and have found something called C:\\, would this be where Windows users would be expected to have their personal .phpspec directory?\n. I thought that might have worked but it was a \ud83d\ude48 guess... I'll actually try to get use of a Windows machine this week before pushing to this branch again. If anyone else in this thread is a Windows user and knows the fix then feel free...\n. Can you post the autoload section of your composer.json, and if you have one, your phpspec.yml?\nhttp://www.phpspec.net/en/stable/cookbook/configuration.html\n. > Do you need to configure an autoloader?\nTo try and diagnose quickly, add the following to your composer.json:\njson\n\"autoload\": {\n    \"psr-0\": {\n        \"\": \"src/\"\n    }\n}\nThen run composer update, and then try vendor\\bin\\phpspec run again. If that fixes the issue, you have a misconfigured autoloader. I'm almost certain there's no issue here, it looks like misconfiguration.\nIf you follow these in order then you should be up and running:\n1. http://www.phpspec.net/en/stable/manual/installation.html\n2. http://www.phpspec.net/en/stable/manual/getting-started.html\n. Interesting, I thought I had just replicated the issue:\n\nBut that happened because I had a custom template as I'm currently looking at #1018 \u2013 when I removed my custom template it worked as expected.\n\nHave you configured a custom template in your home directory? (e.g. class.tpl) \u2013 if not, could you post the content of what is being automatically generated in FileSystemLogger.php? The screenshots above were done with your exact composer.json.\n. Ah? That dang Windows again?\n. Also, what is the behaviour currently if $precision is greater than the precision defined within the INI file, e.g. ini_get('precision');?\n. Having checked the source, PHP_FLOAT_EPSILON is just a copy of DBL_EPSILON from float.h \u2013 which on my machine is 2.2204460492503131e-16, and in PHP yields 2.2204460492503e-16, which you could use as the default, but that assumes phpspec is running on 64-bit architecture, so until phpspec supports 7.2+ and above, it would probably be better to default the epsilon to 1.0e-10 if you were to go down the delta route instead.\n. Approximately is almost exclusively used to refer to numbers in this context, I don't think shouldBeApproximately would cause confusion with which data type should be passed to the method.\nI don't mind assisting with the additional changes (depending on the consensus, of-course) and using the --author flag in Git to mark the changes as being yours, since you've introduced the feature.. Sorry, I should have marked as [WIP] \u2013 I'll take another look at it tomorrow.\n. If you have your error_reporting level set to 0, or you're suppressing the error (as you are with @) \u2013\u00a0then the ErrorException is not thrown, and so you're presented with an error message like the following:\n16  - it implodes\n      expected \"1,2,3\", but got null.\nRather than something more helpful, like the following:\n16  - it implodes\n      warning: implode(): Invalid arguments passed in /Users/dmorris/Projects/phpspec-issue-testing/src/Acme/Imploder.php line\nThe @ symbol doesn't test for errors, it suppresses them and in most cases is bad practice.\nhttps://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Runner/Maintainer/ErrorMaintainer.php#L124\n. @veewee Are you using version 2 or 3 of PHPSpec?. Thanks @veewee \u2013 I was just checking to prepare new releases, the commit will likely be reverted for the 2.5 branch since 2.5 supports PHP 5.3+ and later versions of Symfony console support later versions of PHP so they're not compatible, I will need to check through the dependencies but will hopefully get newer releases out tomorrow.. ::class \u2013 and (new Terminal)->getWidth(), and that 2.5 is tested on PHP 5.3+. And it's still failing on 5.3 anyway, I think because of the symfony dependency in composer.json.. The issue is fixed but Travis is reporting the same issues with 5.3 and 5.4, but I'm almost entirely convinced that the issue is in Travis, I confirmed this by restarting a previous build that was previously passing and that's now failing too (https://travis-ci.org/phpspec/phpspec/builds/168078578), I've also downloaded the Travis PHP container from quay.io/travisci/travis-php and everything is passing inside the container.\n\nPersonally I'd be happy to merge this and tag a new release, as I'm certain the issue is on Travis, and I cannot replicate it, even by using their containers from Quay.io.. I've tried clearing the caches to no avail. And it would be nicer to have it passing, but if you go here: https://travis-ci.org/phpspec/phpspec/builds/168077685 and restart that passing build, that will then fail with the same issues. I'll do a bit more investigation.. Another option might be to define a script in your composer.json \u2013 As a contrived example:\njson\n\"scripts\": {\n  \"run-specs\": [\n    \"vendor/bin/phpspec run spec/Test/TestClassSpec.php\",\n    \"vendor/bin/phpspec run spec/Test/TestClass2Spec.php\"\n  ]\n}\nAnd then invoke with composer run-specs.. I've checked the changes between 1.0 and 2.0 of exporter and there's nothing that I can see that prevents this from being merged, this is currently breaking my upgrade to PHPUnit 5.7 also.\n```\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - phpunit/phpunit 5.7.0 requires sebastian/exporter ~2.0 -> satisfiable by sebastian/exporter[2.0.0].\n    - phpunit/phpunit 5.7.1 requires sebastian/exporter ~2.0 -> satisfiable by sebastian/exporter[2.0.0].\n    - phpunit/phpunit 5.7.2 requires sebastian/exporter ~2.0 -> satisfiable by sebastian/exporter[2.0.0].\n    - Conclusion: don't install sebastian/exporter 2.0.0\n    - Installation request for phpunit/phpunit ^5.7 -> satisfiable by phpunit/phpunit[5.7.0, 5.7.1, 5.7.2].\n```\nThe only place I can see this being used is in ObjectEngine and the current usage should work fine with 2.0.. Yep, the others in composer.json that use the same format though have spaces either side of the pipes, so probably best to keep that consistent. ;). I couldn't even replicate the issue on 5.3 or 5.4, nor could I replicate it in the Travis container. \ud83d\ude1e\nGood job! \ud83d\udc4f . Is it also worth doing the same in appveyor.yml?. Worth this being targeted at 4.0 entirely now and not providing initial BC in 3.3? Any better name than CompositeResource?. According to the example you have provided, both of your interfaces are disparate. You have a Feature interface and a BusinessObjective interface, and both are standalone, I can't see any inheritance in the examples you have provided.. I have opened a PR to your sample repo which you might want to take a look at to see if it helps with your issue: https://github.com/tobiassjosten/phpspecinterfaceinheritance/pull/1. Not a problem! Feel free to come back if there are still some issues you're wrestling with, thanks for closing the issue. \ud83d\udc4d . Closing this as have opened against 2.5, since the variable was available in that branch also and you can merge up into 3.0 as is your usual process.. I think the process of switching branches, cherry-picking, committing and pushing again is quicker. I haven't any evidence for this though.. I did fix the other branch much easier to rebase by using the --onto flag, however, because that branch has now been +pushed...\n\nSo this branch will need to be the one that's merged (assuming you want it merged) and #1047 can remain closed.. It popped up in Slack, it was a joyous moment. Sad it's aiming for 7.0 and not 7.1 though, glad to lose the HHVM stuff, sad to keep Windows (but apparently they're growing again), have loads of ideas but was waiting to see that 4.0 appear.... Updated to just remove the @php:~5.6 annotation which is causing the failure, the removal of the @php:~7.0 annotations are now in a different branch and passing, and pointing at 4.0, and I've changed the target branch of this one to master, since this is a bug. I have also rebased against master.. If I'm understanding you correctly, what you're wanting to do is possible, with the following configurations:\nDirectory structure:\nclasses/\n  autoload/\ncomposer.json\nphpspec.yml\ncomposer.json:\njson\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"Core\\\\\": \"classes/autoload/\"\n        }\n    },\n    \"require-dev\": {\n        \"phpspec/phpspec\": \"^3.2\"\n    }\n}\nphpspec.yml\nyml\nsuites:\n  autoload_suite:\n    namespace: Core\\\n    psr4_prefix: Core\\\n    src_path: classes/autoload/\nRunning vendor/bin/phpspec desc Core/Thing will create a spec directory,\nand your specification inside:\nclasses/\n  autoload/\nspec/\n  ThingSpec.php\ncomposer.json\nphpspec.yml\nThen running vendor/bin/phpspec run will prompt you to create Core\\Thing if it doesn't already exist in classes/autoload. If it already exists, then you should have one passing example.. Okay, so you don't want a namespace on your source files? If so, you shouldn't be specifying a PSR prefix within your composer.json or your phpspec.yml, try the following configurations:\ncomposer.json\njson\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"\": \"classes/autoload/\"\n        }\n    },\n    \"require-dev\": {\n        \"phpspec/phpspec\": \"^3.2\"\n    }\n}\nphpspec.yml\nyml\nsuites:\n  autoload_suite:\n    src_path: classes/autoload\nThe above will still put a namespace on your spec files, i.e. spec, but no namespace will be added to files within your sources directory unless you specify a directory when using desc.. Briefly; I'm not sure this is an issue with phpspec?\nThe development requirements require PHPUnit ^5.4 which means version 5.7 will be installed if it's available. When running a dependency executable, it should always be run from vendor/bin (assuming bin-dir hasn't been set to something different) \u2013 running just phpunit will look for the version that's in your $PATH rather than the version installed from the dependency manifest. Also, the version of phpspec in the comments and SO link is the 2.5.x branch, which uses PHPUnit ~4.0 \u2013 it looks like there's some confusion rather than an issue.. I've just done the following:\n~/.composer/vendor/bin/laravel new test\nThat created a Laravel 5.4 application, I then added \"phpspec/phpspec\": \"^3.2\" to the require-dev section of my composer.json and ran composer update and PHPUnit 5.7 is still the installed version.\n```\n\ud83c\udf4d  composer update\nYou are running composer with xdebug enabled. This has a major impact on runtime performance. See https://getcomposer.org/xdebug\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Installing phpspec/php-diff (v1.1.0)\n    Loading from cache\n\nInstalling phpspec/phpspec (3.2.3)\n    Loading from cache\n\nphpspec/phpspec suggests installing phpspec/nyan-formatters (Adds Nyan formatters)\nWriting lock file\nGenerating autoload files\n\nIlluminate\\Foundation\\ComposerScripts::postUpdate\nphp artisan optimize\nGenerating optimized class loader\n\nThe compiled services file has been removed.\ntest\n\ud83c\udf4d  vendor/bin/phpspec --version\nphpspec 3.2.3\ntest\n\ud83c\udf4d  vendor/bin/phpunit --version\nPHPUnit 5.7.11 by Sebastian Bergmann and contributors.\n```. Private constants work fine with PhpSpec and PHP 7.1:\njson\n{\n    \"autoload\": {\n        \"psr-0\": {\n            \"\": \"src/\"\n        }\n    },\n    \"require-dev\": {\n        \"phpspec/phpspec\": \"^3.2\"\n    }\n}\n```php\nnamespace spec;\nuse PrivateConstant;\nuse PhpSpec\\ObjectBehavior;\nfinal class PrivateConstantSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType(PrivateConstant::class);\n    }\n}\n```\nphp\nfinal class PrivateConstant\n{\n    private const BLAH = '';\n}\nbash\n1 specs\n1 example (1 passed)\n18ms. I'd consider the instantiation the process of allocating memory for an object, and initialisation coming afterwards when values are placed to the allocated memory, the it_is_initializable example is fine doing a non-instantiating check, but should probably be renamed to something more accurate. Maybe it_exists since the error message is about non-existence?\n- it exists\n      class Whatever does not exist.. \ud83d\udd09  I'm happy to take a look at this.. The changes in #1175 do not fix my issue unfortunately, I can take a look at what's going on later in the week (I have been moving house the past couple of weeks). This has come up previously but naming things is hard: #1044 . Pair was a term that had crossed my mind previously also, that's positive. I've spent a silly amount of time trying to think of a better term but it's difficult. CompositeResource was a weak first choice but it was an attempt to be consistent with what already existed, and I thought it only further specified what already existed, i.e. Resource \u2013\u00a0affined and entangled are other words I've used to describe the class and the spec together but neither of those felt right either.. Whoops! Updated, thanks.. It is, it could be done with a custom template per project too, but that would assume one root namespace.. I think the installer does it automatically when piped to php, when I downloaded it and ran through the steps yesterday, box.phar was already executable. I could add it back in just incase box-project changes that in the future though?\n. \ud83c\udf4d  curl -LSs https://box-project.github.io/box2/installer.php | grep chmod\n    @chmod($item->name, 0755);\n. This is removing the drive letter, which I have been told is always one letter and a colon. It's a bit crude but the pathinfo function isn't able to do this, an alternative option might be to replace the first instance of HOMEDRIVE within HOMEPATH with an empty string, if that's preferred.\n. You can just use # phpspec here, no need for the ======= underneath.\n. You can remove the backticks and just have the URL, in markdown it will automatically be converted to a link. So it will just be:\nThe main website with documentation is at http://www.phpspec.net\n. Similar to the main heading, but you should use two hashes here, so it should be: ## Installing Dependencies without any underlining.\n. Same again here, two hashes ## Developer's mailing list and no underlining required.\n. Same here, two hashes ## Community and no underlining.\n. You should just be able to write the email address here and it should automatically be turned into a link.\n. (double) should be (float) here so that it conforms with PSR-2.\n. You could use the ** operator here since phpspec supports 5.6+\n. Some of them will allow code to be removed that was required to support 2.7 and 3.x \u2013 another commit has been added to this repository:\nhttps://github.com/phpspec/phpspec/pull/1051/files#diff-bc97c89cde2c88ff4eac8d8009db7b42L86. Another comment by Ciaran yesterday is that PhpSpec 3.x will be around for 18 months or so yet. Whatever can be targeted at 3.x will be, it depends on whether PhpSpec 4 should support Symfony 2.7, given that the support lifetime of PhpSpec 3.x and Symfony 2.7 are similar, and how much time is left to support Symfony 2.7 once PhpSpec 4 is released.. When the forward compatibility changes were first introduced in PHPUnit, the FQCN was phpunit\\framework\\TestCase, which causes autoload issues, it was updated in either 5.5 or 5.6 to use the case you're using here, so this part shouldn't be changed until phpspec 4.0 unless the minimum version of PHPUnit is increased.. ",
    "jrobeson": "@CMCDragonkai : you should likely never use * for a dependency (since * doesn't always mean master)\n. @CMCDragonkai : seems like you should close this issue and reopen another one with the HOME issue you mentioned.\n. ",
    "karolsojko": "@pjedrzejewski I have phpspec in a Symfony2 bundle without any hussle ;) https://github.com/cometcult/CometCultBraintreeBundle\n. glad to help @pjedrzejewski :)\n. @eddiejaoude could you give more info about the folder tree you are having and paste the spec itself ?\n. Hmm not much that I can do without seeing some high level project structure and the spec\n. @eddiejaoude you can close the issue then ;)\n. Hmm I thought it's solved already since you said it works :) \ndid you try \njson\n\"\": \"module/Application/src\"\n?\n. That is a test smell. @CraftyShadow see: https://github.com/phpspec/phpspec2/issues/44\n. @CraftyShadow this has been discussed many times - but just a reminder: PhpSpec should enforce best practices and make your life a nightmare if you want to do something the wrong way.\nAs for Propel v 1.x - I've got some experience with doing specs with it and my personal opinion is that Propel 1.x is full of bad, untestable code and has the worst practices out there.\nRegarding the issue of crtiera itself - I've solved it in a slightly more elegant way (or at least I hope so :smile:).\nYou can approach it like this:\n- Criteria has a dependency on the Query class\n- In your specs you mock the Query class\n- In your implementation you leave the default query to be initialized\nMaybe something like this would fit your needs as well:\n``` php\n// the spec\n/*\n * @param Something\\Something\\YourModelQuery $query\n /\nfunction let($query)\n{\n  // here you define the behavior of the query double f.e\n  $query->filterByIsActive(true)->shouldBeCalled()->willReturn($query);\n  $query->find()->willReturn(array());\n  // and set it like a proper dependency\n  $this->setQuery($query);\n}\n// the rest of your specs here ...\n```\n``` php\n// the implementation\nclass UsesCriteria\n{\n    protected $query;\npublic function setQuery($query)\n{\n    $this->query = $query;\n}\n\npublic function getQuery()\n{\n    if (empty($this->query)) {\n      $this->query = Something\\Something\\YourModelQuery::create();\n    }\n\n    return $this->query;\n}\n\npublic function doSomething()\n{\n    $this->getDataFromDb();\n}\n\npublic function getDataFromDb()\n{\n    return $this->getQuery()\n        ->filterByIsActive(true)\n        ->find();\n}\n\n}\n```\nOf course this is written from head so you'll have to check and adjust but I think it would fit your scenario in general.\n. @mkoubik you have to be explicit:\nphp\n$db->select('*')->willReturn($db);\n$db->from('table')->willReturn($db);\n// etc...\n. This is more a Prophecy issue then PhpSpec itself. @stof good idea :+1: - don't know if that is easy to implement though at this stage but it would have to change the behavior of the double to by default prophesy every method with a return of prophesyObject. \n. Hmm shouldImplement seems a bit more in the context for me and since it was already there - maybe a good idea is to use both shouldHaveType and shouldImplement ?\n. @stof I don't agree that shouldImplement should be used with classes as it is now - since it doesn't feel natural that a class implements a class. This should be reserverd for interfaces only imo. \n. @stof well it's not really a BC per say I think - more of a putting it on the right track. Let's say you had in your code ->shouldImplement('Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller'), after this change the console output would tell you:\ninterface Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller not found\nSo you could see that ok this is obviously not an interface I'm trying to work with in here so I should change shouldImplement to shouldBeAnInstanceOf or shouldHaveType\n. Well for me it felt like implement matcher is in the same bag with beAnInstanceOf, returnAnInstanceOf, haveType and it shouldn't. I am not confusing the meaning of the matcher - I am just implying that since it's most commonly used in the context of an interface then maybe it should be that way.\nhaveType doesn't cut it imo - then you would have to decide wether you have a class or an interface in mind and PHPSpec should help you generate stuff without hussle. Only thing I could agree on is another word for a matcher different then implement and haveType but then again maybe it's too much.\n. So what you're saying @stof is that PHPSpec should not be helpful and generate interfaces at all ? If so I cannot agree. If not then how would you propose it can be solved ?\n. ok @stof so basically if we had a different matcher - say shouldXXX - for this particular case would it be ok then ? (This would prevent BC imo)\n. @stof but wouldn't it come down for you having to actually decide wether class or interface generator should be used in that case (1 more step in the console-asking process) ? Can this be done in a non-arbitrary way as I've suggested - you've got a matcher that will help you generate interfaces, just use this one instead of that one which generates classes.\n. @peterjmit why is PHPSpec generating classes in that case and not interfaces ? What's not behavior-ish about that ? If implement is a word that introduces controversies - maybe this specific matcher should be removed. Most of the developers I've met use shouldImplement with interfaces in mind and are supprised it does the same as shouldHaveType and shouldBeAnInstanceOf. I'm just saying - it feels unnatural to have something other then interfaces in mind when using shouldImplement and if PHPSpec already generates classes - why doesn't it generate interfaces for that matter ?\n. @stof I understand and respect your opinion but we have to agree to disagree ;) In my opinion shouldHaveType is not the matcher to use here so this is still an open discussion.\n. This might be connected a bit to https://github.com/phpspec/phpspec/pull/215\n. ok will add\n. ok will change :)\n. because InterfaceNotFoundException and InterfaceNotImplementedException extend this one and don't add nothing new to the table beside the class name\n. Yes you're right - will change it in that case :)\n. @ciaranmcnulty I though that way but I think @stof has a good point with this having full implementation\n. ",
    "pjedrzejewski": "Ha! Okay so seems like it's problem on my side... thanks for clarifying @karolsojko! I'll leave this open for a moment, maybe someone will guess what can be problem.\n. Aaa! Previous phpspec version ignored this and I totally missed the directory name... my bad, thank you @stof!\n. Why would you do that?\n. ",
    "kagux": "This is a pretty good sign of having too many responsibilities in your class. Bending spec framework is not a correct solution.\n. I've run into same issue. For some specs I set an object state and then verify exceptions which no longer works. What's the reason behind instantiating a new instance of object in 'during' instead of using currently wrapped one?\n. alright, moved it to prophecy\n. ",
    "VanTanev": "Any class that uses Propel's Model Criteria in particular, or any library with static classes in general becomes untestable under phpSpec, or at least not without some serious hoop-jumping. I am sure you aren't arguing that a class having to do database querying/manipulation by itself is bad design, right?\nIf it's a smell, make the use of the pattern emit a (silenceable) warning, but do allow the developer some flexibility.\n. ",
    "stefanotorresi": "IMHO the response to this feature request is a bit short-sighted.\nNot all code we have to deal with is nicely designed, yet we still have to test it. I get that you want to endorse good practices, but there are edge cases where we must compromise.\nI'm currently dealing with a scenario where the SUT inherits methods from a parent, which I can't just compose instead of extending because reasons, and I can't mock those incredibly complex parent methods, leaving me with no alternative other than not using PhpSpec to test this specific use case.. Basically you're saying \"you can't use phpspec to make your code hugely better, because it assumes it's already good enough to comply to its design constraints\".\nI think that's actually discouraging enhancement.. ",
    "RuslanZavacky": "I think what I am trying to do a little bit resembles this issue, so though to ask. How are you mocking current date? For example you have a class, which is like:\n```php\nclass TimeManager\n{\n  ...\npublic function getNow()\n  {\n    return new \\DateTime();\n  }\npublic function getAvailableTimes($dates)\n  {\n    $now = $this->getNow();\n$availableTimes = [];\n\n... some logic here.\n\nreturn $availableTimes;\n\n}\n...\n}\n```\nGoal is to mock getNow, to return specific date, as some date related calculations are sensitive to the current date.\nThanks!. Thanks for suggestion @jakzal, will do like that \ud83d\udc4d . ",
    "nanodocumet": "Just ran into this issue too. Any updates?\n. ",
    "Vinai": "Thanks for the update.\nI realize PSR0 is getting kind of dated with PSR4 being around now, but it would be great if it would be supported for another couple of years.\n. :+1: \n. Thank you, great!\n. ",
    "cakper": "Implemented in PR #142\n. @stof what do you think now?\n. Guys, do you need me to do any other changes on this PR? If yes please comment, thanks.\n. @MarcelloDuarte done in #199 \n. Ping @MarcelloDuarte \n. @ciaranmcnulty @stof @MarcelloDuarte is this regexp ok now? :)\n. @ciaranmcnulty \n\nSince you opened this, phpspec has features... would you have any time to write some? ;-)\n\nDo you have in mind any specific features or PHPSpec features in general? :)\n. Well, I can at some point, but better we should merge this and then focus on the other stuff :)\n. TA @ciaranmcnulty ;)\n. :+1: thanks @ciaranmcnulty and @stof \n. @ciaranmcnulty I'm not the most active contributor here but to start discussion I'd say that BC policy means: \n- the methods used inside specs does not change behavior/API\n- all methods marked with an @api tag will be treated as extension points so that must have stable api\nBecause of that I suggest to work on version 2.2 (with migrating internals to Symfony DIC and test work) and starting from this version tag extension points and follow SEMVER. \n. Can we start with tagging from next major version? Is there anything that prevents us from doing so?\n. :+1: \n. :+1: looks good\n. @ciaranmcnulty @echochamber by asserting key in the array you are asserting the state of the object and not its behaviour. I don't consider this as a good object oriented design practice and I think we should not encourage people to do so by enabling such features by default.\n. Thank you, fixed.\n. I've assumed that 0 == false. But you are right !== is more explicit. Fixed.\n. OK, this is more about personal preference, but it's a good idea. @MarcelloDuarte what do you think?\n. PHPSpec2 doesn't support FQCN so far all \\ are ignored\n. @ciaranmcnulty yeah, will do :)\n. ",
    "debo": "Hi agree, that's why I mentioned Locator in the issue title. However the issue has been discovered because my custom locator failed so PhpSpec feel back to the default PSR0Locator which allowed the creation or folders and files having a \"colon\" in the name. That should be prevented. Does it make sense?\n. @jakzal which is exactly what the current PSR0Locator doesn't do :)\n. @MarcelloDuarte what @docteurklein said but if you merge it I'll fix MageSpec straight away. I need to review some code anyway this weekend for the presentation so... feel free to proceed.\n. @richardmiller that does the trick indeed. I will test a bit more tomorrow and probably close this.\nWhat do you mean with \"Whether this behaviour makes sense or not is another matter\" ?\n. Oh ok, but do you understand what I'm trying to achieve right? Basically the same \"1:1\" match between src and spec folder you have in PSR-0 but for PSR-4.\nShall we maybe add a PSR4 locator here https://github.com/phpspec/phpspec/tree/master/src/PhpSpec/Locator\nAlthough I suspect that alone won't help much, I need to investigate further and see if I can contribute back in some way\n. @richardmiller yes describing this better in the documentation will definitely make it easier for the end user.\nAs per the locator name I see the link @ciaranmcnulty shared and @jakzal suggested a renaming too :-)\nI'm happy either ways given we can achieve the result so let's go for what fit better the current status of the tool\n. @ciaranmcnulty next major release maybe then ;)\n. @henrikbjorn fist of all make sure you are running PhpSpec v2.1-dev because PSR-4 won't work on the current stable branch and also make sure your autoloader is properly configured. Here my working composer.json:\njson\n{\n    \"require-dev\": {\n        \"phpspec/phpspec\": \"~2.0@dev\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Vendor\\\\\": \"src\"\n        }\n    },\n    \"config\": {\n        \"bin-dir\": \"bin\"\n    }\n}\nOnce that is done, you have to tell phpspec how to behave in this circumstance and here the tricky bit that as we discussed it's not immediate. Your phpspec.yml should look something similar to this:\nyaml\nsuites:\n  default:\n    namespace: Vendor\n    psr4_prefix: Vendor\n    src_path: src/\n    spec_prefix: spec\\\nNote that \"default\" can actually be any arbitrary name.\nI hope that helps.\n. I also tried something a bit more complex and for pure didactic purposes, see here:\nhttps://github.com/MarcoDeBortoli/haveCountSpecTest2\nAnd this is the message I get when I go through the various committed steps:\n```\nbin/phpspec r\nCountMatcher\n  10  ! it returns the right amount of files\n      method [array:2] not found.\n                   100%                        1\n\n0 specs\n1 example (1 broken)\n8ms\nDo you want me to create FilesCollection::hasCount() for you?\n                                                               [Y/n]\nMethod FilesCollection::hasCount() has been created.\nCountMatcher\n  10  \u2718 it returns the right amount of files\n      expected [FilesCollection::hasCount()] to return true, but got null.\n                   100%                        1\n\n0 specs\n1 example (1 failed)\n10ms\n```\nAgain the returned message is a bit confusing and despite implementing the the method as one would expect the error message returned seemed to not clarify what the problem is and what's the next step.\n. I'm pretty sure mine it's not the cleanest approach so maybe I'm raising false positive bugs but I'd like to have an open discussion, because I'm finding people hitting these type of walls and the tool is not helping them.\n. Yes that's what I meant. Anything that can easily direct the developer to the right direction. Possibly the message can directly point out and suggest the need of implementing a Countable interface or to return an array, whichever is appropriate.\n. Yes but you have specific marchers that possibly can have specific messages no? \n. Ha! I was expecting that incoming ;-)\n. I think so\n. - +1 on final\n- +1 on default, not configurable but templatable\n- -1 *Interface suffix\n- +1 shouldImplement() for interface generation\n. @icambridge I think the problem here is that while it's true that based on OCP software entities should be open for extension, but closed for modification, it's also true that based on DIP one should depend upon Abstractions not upon concretions.\nAs @ciaranmcnulty pointed out \"if there was a real use case we'd introduce a GeneratorManager interface\".\nI do generally try to look at SOLID principles as a whole rather than picking one of each situationally.\n. @icambridge it will actually do break DIP because you are about to create in your code a dependency on a method that it's not part of a well defined contract but it's consequence of a specific personal need. I think it has to be considered that PhpSpec as a library has its own set of rules and design decisions and their maintainers are designing it with a specific and precise idea and goal in mind. \nMy position is that your requirement is somehow beyond PhpSpec responsibility, if you really have the need of extend the GeneratorManager as of now fork is the only solution or maybe you can just simply proxy it. I'm saying your requirement but what I really mean is anyone else requirment. If @ciaranmcnulty and the other guys have to shape PhpSpec based on everyone exception it will be hell and dragons.\nThat said, it doesn't mean that this will never happen. The adoption of final has been widely discussed and the community reached a sort of consensus but if a real need of extensibility for the generator manager becomes core surely the PhpSpec team will not object in make it dependent on an interface.\nI don't know, @ciaranmcnulty is probably the best one to answer rather than me at this point\n. It actually does matter. As a community we should all collaborate to improve our tools and I think you had a good shout. You saw something that could be a problem so why not try to see if we can do better if needed :)\n. ^ that\n. I second @jfmercer word by word.\n. @ciaranmcnulty @richardmiller on this topic... is there a way to tell PhpSpec to don't use the src folder at all and have a project layout like:\nbash\n.\n\u251c\u2500\u2500 app/\n\u251c\u2500\u2500 lib/\n\u251c\u2500\u2500 spec/\n\u251c\u2500\u2500 composer.json\n\u251c\u2500\u2500 composer.lock\n\u2514\u2500\u2500 phpspec.yml.dist\n. I know, I tried having two src_path app and lib respectively for each suite but it didn't quite work. I'll try again fresh to make sure I did everything fine, if it fails again I'll push the code so you can have a look maybe. I'll keep you posted, thanks.\n. ",
    "docteurklein": "I just noticed 2 places where we instanciate using reflection: \nhttps://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Wrapper/Subject.php#L191-L195\nand\nhttps://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Runner/ExampleRunner.php#L47\nThe first one is compatible with 5.3.3, while second is not. Maybe it would be better to duplicate this logic than require 5.3.4+. \n. closes #131 \n. @everzet @MarcelloDuarte any thoughts about this?\n. ho thanks!\n. Ha, funny, but I just realised you could register as much as DIC parameters  as you want  as soon as key is different from \"extensions\".\n. It doesn't mean we should not use this extension params thing.\n. @ciaranmcnulty  thanks, I just noticed that later :/ \nAnyway, as said above, it does not mean we should not provide extension config under the extension class name.\nIt's better than having to maintain arbitrary DIC param names.\nThoughts @everzet ?\n. @MarcelloDuarte @MarcoDeBortoli it does https://github.com/MageTest/MageSpec/blob/develop/src/MageTest/PhpSpec/MagentoExtension/Extension.php#L62 .\n. perfect! Thanks.\n. since we have only one master branch anymore, can you reopen it ?\n. i'll do that, and rebase.\n. @norzechowicz I think it should be part of public api of ExtensionInterface, and putting constructor in it would decrease flexibility.\n. @ciaranmcnulty  @stof ok so right now we can have old way OR new one.\nDue the the nature of yaml, we can't mix numeric and string indexes.\nSo once you start using the new way, you'll have to make the same to other lines.\n. what about adding a scenario or 2 about extensions ?\n. done. What do you think ?\n. rabased.\n@ciaranmcnulty sorry for such a long time, i simply am so busy :)\nAnyway, here are the changes concerning the class name validation.\n. I didn't implement the BC ParametrizedExtension, since I'm not sure this is something we want.\n. @ciaranmcnulty i finally introduced a ParametrizedExtensionInterface.\nExtensions creators who want to allow extension parameters will have to implement this interface instead of the default one.\n. and I got a D for that! (which I understand, seeing the code :) )\n. ho crap: https://travis-ci.org/phpspec/phpspec/jobs/42623205#L2013\n5.3.3 is definitly a bummer :)\nWhat do you think sould I do  ?\n. that's exactly what I wanted to hear :)\n. @stof @ciaranmcnulty good idea.\n. I've experimented this a little more and seem have noticed a speed improvement when casting the object to array and then use array differ instead of string one.\nMaybe it would be better to use this strategy. but the output is not the same.\n. ``` php\nphp\n\n<pfunction($value) { \n    ob_start(); \n    var_dump($value); \n    return ob_get_clean(); \n}\n```\ncan be used as diffSource too.\n. or, simpler:\nreturn (array) $value; and then pass it to the array differ.\n. @stof, it does see the private property difference.\nusing array casting:\n``` shell\n      expected [obj:Double\\PhpSpec\\ObjectBehavior\\P883569062], but got\n      [obj:Double\\PhpSpec\\ObjectBehavior\\P1984659889].\n  @@ -1,4 +1,4 @@\n     [\n  -    Double\\\\PhpSpec\\\\ObjectBehavior\\\\P883569062objectProphecy => Prophecy\\\\Prophecy\\\\ObjectProphecy#0000000028fdee94000000003af8d3ad,\n  +    Double\\\\PhpSpec\\\\ObjectBehavior\\\\P1984659889objectProphecy => Prophecy\\\\Prophecy\\\\ObjectProphecy#0000000028fdee8e000000003af8d3ad,\n       *object => null,\n     ]\n\n```\n. using var_dump:\n``` shell\n18  \\342\\234\\230 it handles object diffs\n      expected [obj:Double\\PhpSpec\\ObjectBehavior\\P594041813], but got\n      [obj:Double\\PhpSpec\\ObjectBehavior\\P1809993062].\n  @@ -1,8 +1,8 @@\n  -class Double\\\\PhpSpec\\\\ObjectBehavior\\\\P594041813#310 (2) {\n  +class Double\\\\PhpSpec\\\\ObjectBehavior\\\\P1809993062#315 (2) {\n     private $objectProphecy =>\n  -  class Prophecy\\\\Prophecy\\\\ObjectProphecy#208 (4) {\n  +  class Prophecy\\\\Prophecy\\\\ObjectProphecy#202 (4) {\n       private $lazyDouble =>\n  -    class Prophecy\\\\Doubler\\\\LazyDouble#209 (5) {\n  +    class Prophecy\\\\Doubler\\\\LazyDouble#203 (5) {\n         private $doubler =>\n         class Prophecy\\\\Doubler\\\\Doubler#184 (4) {\n           private $mirror =>\n  @@ -34,7 +34,7 @@\n           }\n         }\n         private $class =>\n  -      class ReflectionClass#205 (1) {\n  +      class ReflectionClass#206 (1) {\n           public $name =>\n           string(22) \"PhpSpec\\\\ObjectBehavior\"\n         }\n  @@ -48,7 +48,7 @@\n\n       }\n       private $callCenter =>\n  -    class Prophecy\\\\Call\\\\CallCenter#210 (2) {\n  +    class Prophecy\\\\Call\\\\CallCenter#204 (2) {\n         private $util =>\n         class Prophecy\\\\Util\\\\StringUtil#193 (0) {\n         }\n\n```\n. using print_r:\n``` shell\n  expected [obj:Double\\\\PhpSpec\\\\ObjectBehavior\\\\P603767869], but got\n  [obj:Double\\\\PhpSpec\\\\ObjectBehavior\\\\P783404515].\n\n  @@ -1,6 +1,6 @@\n  -Double\\\\PhpSpec\\\\ObjectBehavior\\\\P603767869 Object\n  +Double\\\\PhpSpec\\\\ObjectBehavior\\\\P783404515 Object\n   (\n  -    [objectProphecy:Double\\\\PhpSpec\\\\ObjectBehavior\\\\P603767869:private]\n\n=> Prophecy\\Prophecy\\ObjectProphecy Object\n      +    [objectProphecy:Double\\PhpSpec\\ObjectBehavior\\P783404515:private] \n=> Prophecy\\Prophecy\\ObjectProphecy Object\n               (\n                   [lazyDouble:Prophecy\\Prophecy\\ObjectProphecy:private] => Pr\nophecy\\Doubler\\LazyDouble Object\n                       (\n      @@ -54,7 +54,7 @@\n                               )\n                       [arguments:Prophecy\\\\Doubler\\\\LazyDouble:private] =>\n  -                    [double:Prophecy\\\\Doubler\\\\LazyDouble:private] => Dou\n\nble\\PhpSpec\\ObjectBehavior\\P603767869 Object\n      +                    [double:Prophecy\\Doubler\\LazyDouble:private] => Dou\nble\\PhpSpec\\ObjectBehavior\\P783404515 Object\n        RECURSION\n                       )\n``\n. What's your preference ?\n. @whatthejeff  thanks! https://github.com/sebastianbergmann/exporter/blob/master/src/Exporter.php#L245 seems indeed good.\n. @MarcelloDuarte what do you think of this ?\n. @ciaranmcnulty  right, it would be the best option. It has apublic function toArray($value)` fortunately, which means we can then pass it to the array engine differ.\n. result: \n\n. @stof indeed, this double double-quote seems strange, but i think it comes from the phpdiff lib.\n. In theory yes, but as I haven't tested on 5.3... :) removing\n. but yes, you're right. http://3v4l.org/g38QI\n. no prob\n. @everzet ping ?\n. thanks :)\n. pardon my late introduction and my possible ignorance, but isn't class generation based on the one and only \"beAnInstanceOf\" method ? \nReading the thread, I directly asked myself if beAnImplementationOf wouldn't fit perfectly here.\n. @henrikbjorn well, a system that needs to run its tests a lot of times in dev should have a solution waaaay beyond the length of the string to type in order to run the tests.\nGuard would be a solution for example. \nA shell script would be another one.\nTalking about that, nothing forbids phpspec to include a \"p-run\" shell script in the bin folder. It would save 2 keystrokes :)\n. I agree with what you say.\nHowever, phpspec is the first testing tool that have two goals: run and describe.\nIt makes sense to explicitly choose.\n. :+1: \n. just give array everytime, or better, wait for hhvm to implement PHP correctly :) I say that because there are plenty of other bugs in reflection\n. or use newInstance.\n. I come back again :), but have you tried newInstance ?\nI think I tried to fix phpspec on hhvm one time, (but lost the diff...) and this solution worked.\nJust tried on all version from 5.3.0 to 5.5.7 (http://3v4l.org/AZnRB) and seems to work.\nConcerning hhvm, seems to work too. Here is my output using HipHop VM v2.2.0:\n```\nhphpd> <?php $r = new \\ReflectionClass('stdClass'); var_dump($r->newInstance()); ?>\nobject(stdClass)#3 (0) {\n}\n```\nSo, at the end, the only problem is for specs that have  ctors. But this problem was here anyway.\nDid I miss someting, or is newInstance fixing the problem ?\n. BTW, @henrikbjorn http://www.php.net/manual/de/reflectionclass.newinstance.php accepts a variable number of args.\nThe syntax mixed $args [, mixed $... ] is commonly used to refer to 0..n args. \nDoc is wrong since the first $args should be in brackets too.\n. ho @henrikbjorn I just re-read the whole conversation and haven't seen you asked me a question :/\nSo AFAIR, the reason why we excplictly put 5.3.3 in the test matrix was because travis uses a different 5.3.x version if you just specifiy \"5.3\".\nWe wanted to check to correct behavior on 5.3.3, since this specific version behaves differently.\n. ref #225\n. Good idea indeed.\nHowever, there is nothing wrong on relying on concrete class typehint. Classes sometimes simply implement their one and only goal, and don't implement any interface.\nIf you start creating interfaces for the sake of it, then you're doing it wrong. (I mean that a 1 to 1 relation between class and interface is wrong).\nSimply let the user choose his type hint, and generate the class accordingly.\n. Yes it makes sense. just use the type hint that is used in the spec.\n. the only thing that could potentitally work would be to aggregate all examples, find the most common denonimator (interface/base class) for a given argument and type hint this one. If two different examples don't share a common denominator, don't type hint.\nThis stuff obviously won't work if you generated code with only one example. \n. and even then, you can't be sure the guy has no other plan for his argument.\n. @stof I'm struggling with these failing specs. I'm thinking of a potential problem with the generated double code.\n. yay!  got it. @stof It may not please you :), but I rely on a hidden feature of newInstance. Even if the signature says the contrary, all arguments are optional. I made a prophecy classPatch to take advantage of this. prophecy PR coming soon.\n. ready to merge, IMHO.\n. sure. I'll do a seperate PR and will use a dummy hardcoded class. Agree ?\n. it was really tricky :/\n. hidden deep in the machine :)\n. @MarcelloDuarte interesting. It looks like prophecy is not at correct version.\n. ok, doing right now.\n. see phpspec/prophecy#71\n. yes, I mean the missing run command, sorry.\n. I understand your point, and I'm not sure neither if it's the best option.\nThe exit status code of 'bin/phpspec' is 0 because it successfully listed available commands. \nNothing wrong. \n. actually, it may not be a problem. the reason why I posted this is because we thought durings days that the travis suite was green when it actually did nothing.\n. Since the script includes \"run\", it's not a problem anymore.\n. Still, I wouldn't be against returning non 0 exit status code when the \"run\" command returns an empty suite.\nSince the role of the run command is to test the correct behavior, it would legitimately assume an empty suite is not normal.\nBut that doesn't resolve the travis issue (missing 'run' command).\n. that's a good idea IMHO!\n. see #238\n. thanks god to remove this from core. I already imagined the pr list polluted with X versions of nyan variants. Useless!\n@whatthejeff just add an @author tag if it's important to you. \nPS: Sorry for my rudeness, but there are more important things in life.\n. sure, I can imagine how much your work is valuable and beneficial for phpspec! No doubt about this.\nI just prefer them as an extension, and @ciaranmcnulty is right, I am the one to blame :)\n. @ciaranmcnulty that is also the best option I see, like for behat extensions. I t make much more sense for everyone, and give the repo some official state that  is good for it.\n. :beer: \n. @ciaranmcnulty @jakzal I personally find the  changed scenario quite readable. But as @stof says, we should have a way to define the whole class too, for other scenarios.\n. @danrspencer in this example, the invocation of the closure would be done by the app itselff, not by your class.\nYour class doesn't invoke the closure, so you can't unit test it.\nYou could unit test the fact that the application calls this closure, when a GET request hits at path /path, but you won't test what you don't own (I imagine \\App is silex?)\nFinally, testing this closure would require to have a reference to it, invoke it using a mocked $this->_db.\nOr better, as said @ciaranmcnulty , the closure logic could be moved to a class, that you could unit test correctly.\nand/or $this->_app->get('/path/', [$this->_db, 'getResult']);\n. Annotations would have the benefit to avoid having to execute the example method to know if it should be skipped.\n. Nice idea. And people definitly can remove a word from a generated class.\n. Annotations would have to be copied for each method ? Doesn't seem good.\nI see a benefit of grouping methods (normal case, edge case, should work, should not work), but that is all.\nOne could create separate spec classes for each of these groups, all spec'ing the same class.\nOtherwise, having to group methods in order to gain in readability may say that a class has to much responsibilities.\n. phpspec is not rspec nor jamsine, and I think it doesn't want to mimick them.\nit is specifically meant to spec units of code, in which there should be no  such need of complex nesting.\nAs an opinionated tool, phpspec forces you to write simple classes, or makes you feel the pain if you don't.\nNow I don't say nesting is not a good idea, but since I only have simple units, I don't feel the need for it.\n. To illustrate my previous example, one could do:\nspec/Some/Stuff/WhenEverythingsGoodSpec.php\nspec/Some/Stuff/WhenEverythingsBadSpec.php\nall of them having the same beAnInstanceOf('Some\\Stuff'); call.\n. yes, a full example would help, but basically you are speccing that the return value of calculateDateByAddingMonths($date, $month) is exactly identical  (the same instance) to $today.\nI think you try to verify equality, not identity, in which case you should use shouldBeLike, and not shouldReturn.\n. indirectly related to #192, because having a diff would help to understand what's wrong.\n. @whatthejeff it may come from https://github.com/phpspec/prophecy/blob/master/src/Prophecy/Doubler/Generator/ClassMirror.php#L169\n. could it be resolved by adding a new class patch, a bit like https://github.com/phpspec/prophecy/blob/328484c88ed3cd7d1980b624bb98fa635f212ec9/src/Prophecy/Doubler/ClassPatch/TraversablePatch.php ?\n. see also #179 and phpspec/prophecy#26\n. @veewee  can you have a look to phpspec/prophecy#115 ?\n. it will only resolve attempts 1 and 2, though.\n. well, maybe my class patch is totally useless, because it is only useful if you spec a class that is a generator. Which means my PR is useless, just the inline matchers are actually useful.\n. i'm a bit confused right now :) I need to investigate further.\n. but what if you don't register the patch ? I think this patch is useless currently.\n. it's a generator with or without the patch right? it would be logical\n. the patch should do something slightly more complicated.\nIt should proxy every method call, checking if the proxied return value is actually a generator. if so, it could try to wrap it.\nDon't know if it's a good idea or not.\n. it is possible if we modifiy the existing array* matchers in phpspec.\n. the comparison with very similar cases does not help IMHO :)\nCould you run this spec using the --verbose option, and paste the stack trace ?\n. indeed, as stated by the error message, it seems to come from a psr-0 violation.\ncan you paste the paths to your differents files, relative to the root of your project ?\n. unrelated, but why don't you use the buit-in doctrine param converter ? it does what you want.\nMoreover, can you paste the paths to your files, in addition to your autoload config please ?\n. I just see a potential problem: if one of the files does not contain a class, it will throw an exception.\n. Imagine you create the file, but don't implement the class yet.\nI'm not saying it is something one makes very often, but it could occur, and in that case, it's blocking. You can't execute the whole test suite anymore.\n. Some hacky solution could be to make a diff of get_declared_classes before and after the require of the file, and see if any of the newly appeared classes look like the one we search.\n. I'd personally like to see this feature landing, because silent load errors are sooo raging.\nWhat about using the diff thing, and throwing exception only if one newly declared class is actually suffixed by Spec but does not comply with the expected name ?\n. PS: I have the same problem here: https://github.com/docteurklein/funk-spec/blob/abc2b5b328e96d15141dccde71034c0c313eecfe/src/Funk/Specification/Locator/Iterator.php#L21-L27\n. @tomphp you're totally right. \n. On 08/05/2014 07:23 PM, Tom Oram wrote:\n\nOk I'm looking into this and there are questions regarding how to handle different situations:\n1) the file contains no classes at all:\npresumably we can safely ignore this situation an move on.\nyes\n2) the file ends with Spec and contains 1 class wiith a different name but implements ObjectBehavior\nI would assume this is a renaming error, my guess would be to load the class in the file buy make it skip at runtime?\nyes\n3) the file ends with Spec and contains multiple different named classes implementing ObjectBehavior\nOuch! load all and make them skip or load neither and notify the user of an unknown filetype?\nI would say load all, but it's not PSR-0/4 compliant. Meanwhile, this is not something that should bother phpspec.\nThis also means we have to use the get_declared_classes diff, right?\n4) the file ends with Spec but contains 1 class which does not implement ObjectBehavior\nCould we assume that the class has accidentally removed/broke the extends ObjectBehavior and try to load it but mark it as skipped, or treat it as a file with no specs and notify the user?\n\nNo, I would consider it as a simple file, that has nothing to do directly with phpspec. (maybe an asset/fixture/example class/mock).\nAnd BTW, phpspec can't handle specs that don't extend ObjectBehavior.\n\n5) the file does not end with Spec but contains a class implementing ObjectBehavior\nThe file could have been accidentally renamed, should the user be informed in this case?\n\nphpspec forces files to end with Spec.php, so I wouldn't consider it as a spec. (but a notice could be helpful, indeed).\n\n6) file contains one or more multiple classes, none of which implement ObjectBehavior\nLets assume it's doesn't contain any specs so ignore?\n\nyes.\n\nI'll get on and implement this as I best see fit but if anyone wants to chip in with any thoughts before I get too far that would be great!\n\nVery good read, thanks :)\n. awesome!\n. @ciaranmcnulty the only benefit is one liner initialization.\nI think it makes sense to have a working (or useful) Differ directly after instantiation.\n. thanks!\n. @ciaranmcnulty you can update the docs (cookbook's configuration) in the meantime.\n. see #412 too.\n. Based on http://3v4l.org/TIdEC, I don't see any difference between php versions (if it can help).\nNow the reason why phpspec behaves differently if you remove one method prophecy or all prophecies is because it (phpspec/prophecy) will generate either a dummy object or a mock object.\nAs soon as you start defining one method prophecy, you will have to define all the other method calls prophecies (mock).\nA contrario, when you remove the 2 lines\n$client->setUrl('http://foo.com')->shouldBeCalled();        \n$client->resetClient()->shouldBeCalled();\nthen $client becomes a dummy (allowing every call and returning null for every call).\nNow I'm not sure why your travis builds fail on different versions, but I hope it helps!\n. @shanethehat correct me if I'm wrong, but couldn't you simply configure the matchers.maintainer service definition to receive $c->getByPrefix('matchers') as a constructor argument?\n. it would simplify code, and resolve the problem of ensure that extensions have an opportunity to add their own. The extension just has to create a prefixed service.\n. i'm all in.\n. i think there is an env variable (soon to be merged?) for composer to make it install the lowest version of the requirements.\nIt could be added in the test matrix.\n. I can't find it anymore, but I know it's Nicolas Grekas\nEDIT: here it is: https://github.com/composer/composer/pull/3450\n. First, I'm sorry to discuss on an old, closed card ( and if you want me to open a new one I will), but this issue seems to perfectly match my case.\nI understand that testing only the constructor without testing other methods seems strange, but phpspec behavior is very strange too :)\nGiven this class:\nphp\nclass Test\n{\n    function __construct() {\n        throw new \\Exception;\n    }\n}\nand its corresponding spec:\n``` php\nnamespace spec\\App\\Domain;\nclass TestSpec extends \\PhpSpec\\ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType('App\\Domain\\Mailer');\n    }\n}\n```\nThen the test suite should definitely fail.\nShouldn't it?\nCurrently, as @stof pointed, you have to add a strange $this->getWrappedObject(); coming out of nowhere.\nI perfectly understand the reasons behind this, but it still is very surprising at first :)\nI think there is something to do here.\n. like, maybe we could instantiate it before any should* if it wasn't instantiated already?\n. could it work if one replaces  https://github.com/phpspec/phpspec/blob/7de2100fda6f2b6779cc4afdc399af8b044770af/src/PhpSpec/Runner/Maintainer/ErrorMaintainer.php#L112 with:\nphp\n        if (E_ERROR === $level && preg_match($regex, $message, $matches)) {\ndumbQuestionMaybe\n. I thought about something similar where phpspec generates code  with pre-configured typehints for arguments that are objects.\nSo the code generator could actually guess the name and the type from the examples.\n. BTW, I think https://github.com/memio/spec-gen handle mosts of the cases.\n. Since naming is an important part of design, and phpspec is all about design, I do think it makes sense to take all the design infos we can get from the examples, including argument names.\nNow I totally get your point, and if the prompt solution is implemented, maybe it could have a sensible default value (the example arg name), so we can just press enter if the example name is good enough.\nIf we provide a default value for the prompt, we get the best of both ideas.\n. @ciaranmcnulty sorry, I don't remember indeed.\n. Here is the commit that introduced it: https://github.com/ciaranmcnulty/phpspec/commit/d1df48fd3b778818eac965291860f3a104f22745\n. yes, it seems the invokable example is covered, no problem for me to remove the broken example :)\n. PS: I just noticed a typo (does not contains), but this was here already, so => other PR?\n. @avant1 sure, I could :) The question was more about wether I should include it in the same PR, not how to do it.\nEDIT: now I get why you answered me that: I don't want to close this PR in favor of another one, I want another PR to deal with the typo. but what am I doing ? discussing about a single letter :)\n. @jon-acker agreed it would be better indeed. I just didn't find an easy way to do it here.\nIf you know a way  I could easily do that, I'll take it :)\nEDIT: maybe by using this->specPath or something.\n. php7 only (from what I see).\nNote that the diff corresponds to the number of lines I have for each parameter.\nI suspect the rewriter to replace the 6 lines of parameters with a single (not typehinted) line.\n. $specReflection->newInstance()->willReturn($context); fails saying: \n``` sh\n27  executes example in newly created context\n        some predictions failed:\n          Double\\ReflectionMethod\\P51a49669e4fc9:\n            No calls been made that match:\n              Double\\ReflectionMethod\\P51a49669e4fc9->invokeArgs(exact(Double\\SpecificationInterface\\P51a49669e5a0a:0000000045e37687000000001be47e7c), exact([]))\n            but expected at least one.\n``\n. I don't know why, but when usingnewInstance`, the specs fail. (see comment above).\n. Right, no new possibility with this change.\nThe only point where I find this useful is that you keep parameters related to the extension at the right place.\nIt will allow people to find and maintain parameters more easilly.\n. @stof has always the right words :)\n. I would say that the extensions should be able to access both. They would have access to \"extension-specific\" config (semantic, simple for the user) AND to global container parameters.\n. oh. Good to konw. I'll switch to call_user_func then.\n. Sure, callable would be better, but since it's 5.3 and still wanted to support other kinds of callables, i didn't want to force \\Closure.\nI'll add this check, thanks!\n. oh! right :/\n. thanks! corrected.\n. look ma, no extends.\n. sure. It's not intended to stay like this. The problem is that prophecy@edaaad is required for this to work on hhvm. Waiting for a release that includes this fix to use it.\nEDIT: it requires phpspec/prophecy#70 too.\n. ping @everzet BTW.\n. @stof see, I've made even worse! :)\n. ok. will do ASAP\n. h\u00e9h\u00e9 :) it's temporary though.\n. ho, indeed. I already forgot that. thanks.\n. what about a neutral \nGiven the :spec|class file \"relative/path/to/class.php\": \n\"\"\"\n<?php //code\n\"\"\"\n?\n. Otherwise, just to provide an example: https://github.com/KnpLabs/KnpRadBundle/blob/develop/features/csrf_protection.feature#L7\nI used to take the present tense.\n. totally agree with @stof, we don't care about the act of writing, neither about who actually described it (\"I\").\nImportant is that the thing is here.\n. sure thing, consitency is the way to go. Indentation is messing everyone enough to not add another problem.\n. well, again naming problems, and I don't want to start a naming war :) but I think we describe behavior of objects, not classes.\n. hobut you're right, the class contains code, not the object. sorry for the noise\n. wrong. should be phpspec/prophecy#99\n. scenario doesn't work yet\n. to document: usage of prefix prophecy.doubler.class_patch.\n. usage of factories defined in phpspec/prophecy#99\n. Agree. Just don't create an empty constructor.\n. I think the method sekeleton should look like: \n``` php\npublic static function register($argument1, $argument2)\n{\n    return new self;\n}\n``\n. I don't see why one couldn't use named constructors AND public constructor. I personally use both. One doesn't prevent another.\n. And named constructors have another utility than just passing ctor arguments.\nYou can call private methods (and properties) ofself` in it (even from the \"outside\").\nSo you can actually have a single way of public __construct, plus additional named ctors.\n. details here, but wouldn't it be better to say \"is not following spec class name conventions.\" ? or something like that.\nWe could even add more details like: Expected \"%s\", got \"%s\".\n. right. It should be more clear that you can just add DIC parameters, that could eventually be taken into account by an extension. see #189\n. not very elegant, but if you have better I'll take it!\n. same.\n. Is that an acceptable BC break ?\n. Thanks! I noticed that too late :) fixed now.\n. good idea.\n. oh my :)\n. @GrahamCampbell well, the idea of @ciaranmcnulty would work too: http://3v4l.org/VBgGP\nWhich means: keep the extension interface as is, and add a new, independant one, that handles params.\nIndeed, we would have to check for instance type, and handle the 2 cases.\nDon't know if it worth it (we could BC break and upgrade major version), but it's definitly better than setParameterers because it would allow more flexible extensions, and it smells way too procedural to me.\nAnyway, if everybody is ok with setParameters, I'll implement it with pleasure.\nHO, it just came to my mind that adding a method is as much of a BC break than adding a parameter :)\nwhich means if we want to maintain compat, we'll have to introduce 2 interface and check types in any case!\nThat's why I'd prefer solution 1 (http://3v4l.org/VBgGP)\n. ",
    "sergey-s": "Just tried phpspec2 and faced the same issue... I want to describe my Message class like follows:\n``` php\nclass MessageSpec extends ObjectBehavior\n{\n    function it_should_be_initialized_with_array_config()\n    {\n        $this->beConstructedWith(['text' => 'Message text']);\n    }\nfunction it_should_not_be_constructed_with_insufficient_config_data()\n{\n    $this->shouldThrow('\\Exception')->during('__construct', [[]]);\n}\n\n}\n```\nand the Message class:\nphp\nclass Message\n{\n    public function __construct(array $config)\n    {\n        if (!isset($config['text'])) {\n            throw new \\Exception('Insufficient data for message construction');\n        }\n    }\n}\nCan anyone suggest a way to describe classes with not trivial constructors throwing exceptions? Or it's not possible yet? Thanks\n. ",
    "estelsmith": "Running into the same issue. I would love to see a resolution, or good workaround.\nFieldReference\n``` php\npublic function __construct($field)\n{\n    if (!is_string($field)) {\n        throw new Exception\\InvalidArgumentException('field must be a string');\n    }\n$this->field = $field;\n\n}\n```\nFieldReferenceSpec\nphp\npublic function it_is_not_initializable_with_non_string_argument()\n{\n    $this->shouldThrow('DCP\\Form\\Validation\\Exception\\InvalidArgumentException')->during('__construct', ['test']);\n}\nUnfortunately, this results in the following error.\nDCP\\Form\\Validation\\FieldReference\n  17  ! it is not initializable with non string argument\n      warning: Missing argument 1 for DCP\\Form\\Validation\\FieldReference::__construct() in\n      {...}\\DCP\\Form\\Validation\\FieldReference.php line 25\n. Yup, you're right. I missed that somehow. Closing, since this is already being addressed.\n. I'm curious why the fix was reverted?\n. ",
    "ludofleury": "As far as I noticed on the dev-master branch, I can spec exception in the constructor with this syntax:\nphp\n $this->shouldThrow($exception)->during__Construct($arg1, $arg2);\nBut I can't spec it with this syntax:\nphp\n $this->shouldThrow($exception)->during('__construct', [$arg1, $arg2]);\n. ",
    "seggen-ibuildings": "For posterity's sake, you can use duringInstantiation() in PHPSpec 2.4.1 (and perhaps earlier):\nphp\nfunction it_should_not_be_empty()\n{\n    $this->beConstructedWith([]);\n    $this->shouldThrow(InvalidArgumentException::class)->duringInstantiation();\n}\n. ",
    "kilip": "Hello @Spabby,\nI try to solve your problem by sharing my path/to/project/phpspec.yml configuration looks like (I hope I am right):\n``` yml\nformatter.name: progress\ncode_generator.templates.paths:\n    - \"tests/ModuleNameTest/Spec/Templates\"\nsuites:      \n    ModuleName:\n        namespace:    ModuleName\n        spec_prefix:    Spec\n        src_path:        'ModuleName/src/'\n        spec_path:      'tests/ModuleNameTest/'\n```\nYou can try to change src_path, spec_path, spec_prefix and run phpspec desc ModuleName/Module to test if phpspec create the spec class like you want.\nAnd a very cool feature from phpspec, If you describe code_generator.template.paths, you can create your own template for class:\n``` php\n// path/to/project/tests/ModuleNameTest/Spec/Templates/class.tpl\n<?php%namespace_block%\n/\n * This file is part of the ModuleName module build for Zend Framework 2.\n \n * (c) Anthonius Munthi me@somemail.com\n\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n /\n/\n * Class %name%\n \n * @author Anthonius Munthi me@somemail.com\n/\nclass %name%\n{\n}\n```\n. ",
    "bendavies": "as per reply on twitter, i'll re-implement that PR to this project.\n. @rommsen due to time constraints, I'm afraid i ended up refactoring my code rather than porting this feature.\nHowever, it certainly doesn't look like too much work, as pretty much all the work is already done in https://github.com/phpspec/phpspec2/pull/95\n. @stof you @ the wrong person. \n. @ciaranmcnulty good spot, done.\n. Thanks for the merge! that was fast. @fabpot you are absolutely right. i really should have real world tested if first.\nI'm going to revert this PR.\nThe real result is....no change, actually casting is slightly slower.. @nicolas-grekas nice, i forgot there was a perf gain for doing that. I'll give it a go.. @nicolas-grekas the problem with that, obviously, is opcache being disabled on the CLI by default.. @nicolas-grekas thanks. more education :). @nicolas-grekas however, i assume there is no penalty for prefixing other methods?  The plus is that it is consistent in styling, so i am tempted to leave it.. @nicolas-grekas @avant1 now only prefixing the list of functions provided by nicolas.. @ciaranmcnulty you could look at what doctrine do and run https://github.com/phpbench/phpbench benchmarks as part of the build /cc @ocramius. Thanks @ciaranmcnulty, and thanks @nicolas-grekas for the tips. done, thanks.\n. more good knowledge.. ",
    "rommsen": "@bendavies \nIs there any progress on this?\n. Ok, I see. Then we will keep patching this in our own version. I still think that this is a pity because this problem prevents e.g.  the specking of Doctrine entities with XtoMany associations.\n. Hey guys,\nsorry for the late reply. I have to take back the statement that this prevents Doctrine entities with XtoMany associations from being specked but if I am not totally wrong it makes it much harder.\nIf you look at this gist: https://gist.github.com/rommsen/6730438\nThe problems arises in CollectionWorkerSpec\n``` php\nfunction it_should_not_work($entry1, $entry2) {\n  $entry1->getImportantValue()->willReturn(1);\n  $entry1->setImportantValue(2)->shouldBeCalled();\n  $entry2->getImportantValue()->willReturn(2);\n  $entry2->setImportantValue(3)->shouldBeCalled();\n$this->doSomethingWithCollection(new ArrayCollection([$entry1, $entry2]));\n}\n```\nWith the patch everything works fine but without the patch it does not. If I had used an array it would work without the patch but doSomethingWithCollection uses a typehint for its parameter, so i can not do this either.\nIf I want to make it work without the patch I have to create a double of ArrayCollection so that it can be used e.g. in a foreach loop.\nTo quote from the original issue:\nIterator objects cannot be used as a wrapping object or intermediate layer for doubles at the moment. The workaround could be to have a double of iterator itself, which doesn't make sense because one would mock it with the exact mimic of it's actual implementation.\nAm I missing something fundamental here?\nRegards,\nRo \n. Hey guys,\nsorry to bumb this, but am I really the only one running into problems with this?\n. I do not fully get if the behavior i mentioned in #500 is possible with this PR. I think the proposal of @ciaranmcnulty would be the best solution.\n. For us this is quite a big issue because with Version 2.0 we implemented the following workflow quite often:\nphp\n// spec/SomeAbstractSpecification.php\nAbstract class SomeAbstractSpecification extends ObjectBehaviour {\n   // implements specs for all non-abstract methods\n}\nphp\n// spec/SomeSpec.php\nclass SomeSpec extends SomeAbstractSpecification {\n   // implements specs for  implemented abstract methods of SomeAbstractSpecification\n}\nFiles with the \"Specification\" postfix where ignored and everything went fine.\nThis is not possible anymore because of the runtime exception. Is this intended behavior?\nCheers\n. > oh you maybe be able to use $this->__call('getMatchers', [])\nHats off sir. This works perfectly. Thanks!\n. ",
    "calmdev": "@stof is there anyway to test factory patterns without this feature?\nI have an abstract base with a static create method which returns an object of the appropriate type based on a value that's passed into the create method. All of the child classes which extend the abstract base have protected constructors.\n``` php\nabstract class User {\n    public static function create(...) { ... }\n}\nclass Guest extends \\FIT\\User {\n     protected function __construct(...) { ... }\n}\n```\nThis enforces us to use the factory method instead of directly instantiating an object with these classes.\nphp\n$people = array(\n    'me'       => \\FIT\\User::create(),\n    'staff'    => \\FIT\\User::create('adrazich'),\n    'faculty'  => \\FIT\\User::create('petraliar'),\n    'student'  => \\FIT\\User::create('fsanchez2010'),\n    'guest'    => \\FIT\\User::create('neville')\n);\n\nFrom what I can tell it's not possible to test this kind of pattern with phpspec as other have already pointed out - or I am completely missing something in the docs. I tried out that expect extension, but it completely borks composer, because of the hard coded vendor paths - it thinks our composer libs are not installed.We don't use the standard vendor directory. You've already created an issue for this.\nMaybe you can give me some hints?\n. Ok, is it still feasible to continue this pull request based on the work done in the original or has too much changed?\nI'd love to help with this.\n. Thanks for the clarification! Would the preferred implementation still use the methods that were suggested by @everzet?\nphp\n$this->beConstructedThrough('createInstance');\n$this->beConstructedWith($arguments);\nOr with the new version would there be a different preference?\n. I'm running into this issue myself. Being able to construct from a callable would def be nice.\n. #141 is exactly what I am looking for. Missed that one.\n. This has been working good for me. The only issue I've had is that my class can't be defined as an abstract. This isn't something that can be worked around is it?\n. ",
    "damonjones": "Creation of subjects from factory methods has now been implemented in #335.\n. @henrikbjorn I think it would be less verbose and it would be nice to not have to supply the FQCN. It's far less likely that you'd want to use a function, function  myFactory() {...} instead of a method on the subject's class, but that's technically what the string 'myFactory' would resolve to as far as PHP's interpretation of it as a callable.\nIf we were to change this, then I think we should be clear that it would check the subject's class for a method with that name first and then fallback to a standard PHP callable otherwise.\n@MarcelloDuarte @ciaranmcnulty do you have any thoughts on this?\n. @ciaranmcnulty I think self would be evaluated in the context that calls the callable (which would probably be \\PhpSpec\\Wrapper\\Subject\\Caller), rather than the subject's class.\n. @MarcelloDuarte If we're using this to factory-create an instance, we don't want the original constructor to be called, so we don't want $this->wrappedObject->getInstance() to be called.\n. ``` php\npublic function beConstructedThrough($factoryMethod, array $arguments = array())\n    {\n        if (method_exists($this->wrappedObject->getClassName(), $factoryMethod)) {\n            $factoryMethod = array($this->wrappedObject->getClassName(), $factoryMethod);\n        }\n    $this->wrappedObject->beConstructedThrough($factoryMethod, $arguments);\n}\n\n```\nHowever, there's no point in calling method_exists() unless the provided factory method is a string (which doesn't already contain a '::'), so maybe we should guard against that.\nIf we're ok with this (the assumption that giving a plain string for factory method means that we want a method in the subject class in preference to a global function), then I'll go ahead and make this change.\n. @ciaranmcnulty @calmdev Creation of subjects from factory methods has now been implemented in #335.\n. Ok, I'll close this and issue a new PR on develop (hopefully with some specs).\n. @MarcelloDuarte I've removed the callable typehint, as requested.\n. @mdavis1982 If you could, that would be most excellent!\n. @MarcelloDuarte @ciaranmcnulty Forgive my ignorance, but how do I see why it's failing? I'll happily fix it, if I can.\n. :+1: \n. I'm not sure that it makes sense to initialise the subject in let() and then again in your test. In normal usage you wouldn't do $obj = new Some('foo') and then later call $obj->__construct('bar'), would you?\n. @8823-scholar Ok, assuming that my understanding of what isFoo() and isBar() are doing is correct, this works for me (dev branch). Do you have any more information?\n. I'm happy to have a go at this if anyone thinks it's worth doing.\n. :+1:\n. @kyleferguson do you need to pass $model and $collection here? I suspect that these collaborators are being initialised again here.\nphp\nfunction it_should_return_a_model_instance_on_find($model, $collection)\n{\n    $this->find(2)->shouldHaveType('Acme\\Database\\Contracts\\ModelInterface');\n}\n. @kyleferguson I'm stumped. I've knocked together the most basic version of what you have (as far as I can tell) and it works for me:\n``` php\n<?php\nnamespace spec;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass FooSpec extends ObjectBehavior\n{\n/**\n * @param Model $model\n * @param Collection $collection\n */\nfunction let($model, $collection)\n{\n    $collection->first()->willReturn($model);\n    $model->where(Argument::cetera())->willReturn($collection);\n    $this->beConstructedWith($model);\n}\n\nfunction it_should_return_a_model_instance_on_find()\n{\n    $this->find(2)->shouldHaveType('Model');\n}\n\n}\n```\n``` php\n<?php\nclass Foo\n{\n    private $model;\npublic function __construct(Model $model)\n{\n    $this->model = $model;\n}\n\npublic function find()\n{\n    return $this->model->where()->first();\n}\n\n}\n```\n``` php\n<?php\ninterface Collection\n{\n    public function first();\n}\n```\n``` php\n<?php\ninterface Model\n{\n    public function where();\n}\n```\n. Doh! Thanks, @MarcelloDuarte!\n. ",
    "srcspider": "Same problem, but I'd expect a warning to be printed if nothing else printed. Just skipping over the entire thing (ie. \"Do you want me to create Markdown for you?\") is perfectly acceptable too.\n. ",
    "jaymecd": "+1\n. I'm wondering why have you changed listeners, cause interaction is a part of Console/IO class only.\nWouldn't it be more suitable to restrict it in there, in all ask* methods:\npublic function askConfirmation($question, $default = true)\n{\n    if (!$this->isInteractive()) {\n        return null;\n    }\n    // rest code ...\n}\nand check for return null in spec.\nAnyway, I'm voting for this PR asap :)\n. Superb! Thank you, you saved my day\n. @ciaranmcnulty, thank you :+1: \n. ",
    "B2F": "Thanks ! You should consider updating the manual though.\n. Alright, figured it out from the last example of http://www.phpspec.net/docs/introduction.html:\nfunction let()\n      {\n          $this->beConstructedWith($whatever);\n. Thanks, you answered so fast, while I was answering to myself and I didn't see it coming. But I don't get the signature part of your message, have you got any example ?\n. Seems logical to me to have specs and sources optionally available in a different location than the phpspec repository itself. So when you are testing a framework or a CMS, you don't have to symlink your classes in the src directory. Also, if you have modules/plugins/bundles in your app project, the vendor should be able to provide specs for it with a spec folder in the module/plugin/bundle.\nIn comparison, Behat gives you an option in the behat.yml to choose a default feature dir (compared to the spec directory) in addition to the command line argument bin/behat whatever/feature/dir/or/feature/file. Then, you can also provide extra subcontexts classes (compared to the src directory) anywhere you want.\nHint: I am a Drupal Developper and currently phpspec is totally unusable with the modules/hooks Drupal pattern. It's a shame as Behat/Mink + DrupalExtension is perfectly usable. And I find it very difficult to extend the phpspec framework to customize ObjectBehavior and customize paths. I would like to bring outside-in BDD to the Drupal world.\n. Isn't the flag you say is the issue I referenced to in the question ? But seems like it doesn't address the spec folder part, or I missed the way to choose anther one.\n. When I run bin/phpspec run path/to/spec, specs are found only if in subdirectories. However, source classes are not found, even in src path of vendor subdirectories.\n. I linked the src related issue in the question, the spec one is: https://github.com/phpspec/phpspec/issues/111\n. \"after specification\" and \"after suite\" sound like what I was looking for. Can you point me where to look at in the source ? There is no mention of events nor extensions in the doc.\n. ",
    "ithinkihaveacat": "Interestingly, you do get the expected behaviour from let() if a beConstructedWith() call has first succeeded:\nphp\nfunction let() {\n  $this->beConstructedWith('something');\n  $this->ggg(); // <- yields expected results\n}\n. Haha, I just made the same mistake! beConstructedBy() is also an unknown method, and triggers the same confusing error message.  (Adding the method name here for search engines to find.)\n. The behaviour I'd expect is for phpspec to tell me that method jjjj() does not exist, and offer to create it, similar to what happens if I use an invalid method in a spec. (The error message that is emitted does not mention jjjj() at all--it talks about __construct() and a mysterious interface.)\n. ",
    "raul782": "I still get the same error, whether I use __call even inside the execute method or not\n``` php\nclass ServiceWithEntity\n{\nprotected $entity;\n\npublic function setEntity($entity)\n{\n    $this->entity = $entity;\n}\n\npublic function execute()\n{\n   //return $this->entity->getMemberA();\n    return $this->entity->__call('getMemberA', []);\n}\n\n}\n```\nusing this in the spec\nphp\n$entityA->__call('getMemeberA', null)->shouldBeCalled()->willReturn(\"memberA\");\n``\nD4m/PhpSpecPlayGround/Service/ServiceWithEntity     \n  18  ! it should return response when executing service\n      methodDouble\\D4m\\PhpSpecPlayGround\\Entity\\EntityA\\P51d8e47e88534::getMemberA()` is not defined.\n   0 vendor/phpspec/prophecy/src/Prophecy/Prophecy/MethodProphecy.php:48\n     throw new Prophecy\\Exception\\Doubler\\MethodNotFoundException(\"Method `Double\\D4m\\PhpSpe\"...)\n   1 vendor/phpspec/prophecy/src/Prophecy/Prophecy/ObjectProphecy.php:237\n     Prophecy\\Prophecy\\MethodProphecy->__construct([obj:Prophecy\\Prophecy\\ObjectProphecy], \"getMemberA\", [obj:Prophecy\\Argument\\ArgumentsWildcard])\n   2 [internal]\n     Prophecy\\Prophecy\\ObjectProphecy->__call(\"getMemberA\", [array:0])\n   3 [internal]\n     spec\\D4m\\PhpSpecPlayGround\\Service\\ServiceWithEntitySpec->it_should_return_response_when_executing_service([obj:PhpSpec\\Wrapper\\Collaborator])\n\n```\n. @cordoval the issue is that you lose the pretty format from phpspec.\n@stof Thanks for replying, yeah considering that approach, which is kind of the same as I was doing with a shell_exec before, Is that you lose the nice format if I'm not wrong.\n. ",
    "rodrigodiez": "Thanks for your answer! :)\nIs that not automatically done by the autoload section of my composer.json? I mean, it generates an autoload file which maps that namespace to my src/dir.\nSorry, maybe I'm misunderstanding distributable best practices using composer, autoload itself, even both of them but in fact I was trying to do something like you do at Symfony components\nhttps://github.com/symfony/HttpFoundation/blob/master/composer.json\n. I see. Thanks for the info, I will do some test :)\n. That sounds like a workaround. Can't I mock \\DateTime objects with prophecy? I could not find that limitation in the docs.\nMaybe you mean it is a well known testing smell I should run away from. In that case more info would be appreciated :)\n. ",
    "ghost": "Add\n```\nsuites:\n   acme_suite:\n       namespace:  Acme\n       psr4_prefix:  Acme\n       src_path:  src/Acme\n```\nto your phpspec.yml file\nhttps://laracasts.com/discuss/channels/testing/when-i-try-to-setup-phpspec-for-psr-4-the-files-it-creates-are-not-placed-in-the-correct-namespace-folder\n. Having similar difficulties. I'm going to try to find a workaround.\nI've tried not using collaborators but using instances of actual objects and then comparing them using the Expect module. Still cannot get it working, this is a shame as I have the intention of making extensive use of generators in this project.\n. No, %name% is the name of the spec. So it will return something like MyClassSpec instead of MyClass.\n. But class will give you the fully qualified class name like Acme\\Domain\\MyClass I just want to have MyClass and import the fully qualified class via use-statement.\n. Updated PR with renamed template variable %subject_class% instead of %resource%.\n. The PHPSpec runner fails informing me of broken tests when I'm following the tutorial here:\nhttp://www.phpspec.net/en/stable/manual/let-and-letgo.html\n. The code I used (please note that I ran PHPSpec twice as PHPSpec asks to complete the code on the first time round):\nphpspec desc DescribeFileSystemLogger\nphpspec run\nphpspec run\n. ``\nC:\\Users\\Julian\\Downloads>vendor\\bin\\phpspec desc FileSystemLogger\nSpecification for FileSystemLogger created in C:\\Users\\Julian\\Downloads\\spec\\FileSystemLoggerSpec.php.\nC:\\Users\\Julian\\Downloads>vendor\\bin\\phpspec run\nFileSystemLogger\n  11  - it is initializable\n      class FileSystemLogger does not exist.\n/  skipped: 0%  /  pending: 0%  /  passed: 0%   /  failed: 0%   / broken: 100%  /  1 examples\n1 specs\n1 example (1 broken)\n65ms\nDo you want me to create FileSystemLogger for you?\n                                                                         [Y/n]\nClass FileSystemLogger created in C:\\Users\\Julian\\Downloads\\src\\FileSystemLogger.php.\n[PhpSpec\\Process\\Prerequisites\\PrerequisiteFailedException]\n  The type FileSystemLogger was generated but could not be loaded. Do you need to configure an autoloader?\nrun [-f|--format FORMAT] [--stop-on-failure] [--no-code-generation] [--no-rerun] [--fake] [-b|--bootstrap BOOTSTRAP] [-h|--help] [-q|--quiet] [-v|vv|vvv|--verbose] [-V|--version] [--ansi] [--no-ansi] [-n|--no-interaction] [-c|--config CONFIG] [--]  []\n```\n. Contents of composer.json file:\n{\n    \"require\": {\n        \"phpspec/phpspec\": \"^3.1\"\n    },\n    \"autoload\": {\n        \"psr-0\": {\n            \"\": \"src/\"\n        }\n    }\n}\nI'm still getting the following error:\n```\nC:\\Users\\Julian\\Downloads>vendor\\bin\\phpspec run\nFileSystemLogger\n  11  - it is initializable\n      class FileSystemLogger does not exist.\n/  skipped: 0%  /  pending: 0%  /  passed: 0%   /  failed: 0%   / broken: 100%  /  1 examples\n1 specs\n1 example (1 broken)\n65ms\nDo you want me to create FileSystemLogger for you?\n                                                                         [Y/n]\ny\nFile \"FileSystemLogger.php\" already exists. Overwrite?\n                                                                         [y/N]\ny\nClass FileSystemLogger created in C:\\Users\\Julian\\Downloads\\src\\FileSystemLogger.php.\n[PhpSpec\\Process\\Prerequisites\\PrerequisiteFailedException]\n  The type FileSystemLogger was generated but could not be loaded. Do you need to configure an autoloader?\nrun [-f|--format FORMAT] [--stop-on-failure] [--no-code-generation] [--no-rerun] [--fake] [-b|--bootstrap BOOTSTRAP] [-h|--help] [-q|--quiet] [-v|vv|vvv|--verbose] [-V|--version] [--ansi] [--no-ansi] [-n|--no-interaction] [-c|--config CONFIG] [--]  []\n```\n. I'm getting even more strange behaviour now. When I execute 'phpspec run' it gets stuck in a loop.\nHere's the contents of composer.json:\n{\n    \"require\": {\n        \"phpspec/phpspec\": \"^3.1\"\n    },\n    \"autoload\": {\n        \"psr-0\": {\n        \"\": \"src/\"\n        }\n    }\n}\nHere's the contents of spec\\FileSystemLoggerSpec.php:\n```\n<?php\nnamespace spec;\nuse FileSystemLogger;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass FileSystemLoggerSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType(FileSystemLogger::class);\n    }\n}\n```\nHere's the contents of src\\FileSystemLogger.php:\n```\n<?php\nclass FileSystemLogger\n{\n}\n```\n. ",
    "hlegius": ":+1: on this.\n. I used to check if an object/class has relation with other entity/value object - but doesn't matter at that point what method will return.\n. Would be nice if there is any way to update PHPSpec's website docs to include this feature.\n. @jakzal thanks I will.\n. ",
    "antonCPU": "For custom src path one can create phpspec.yml file under a project root directory and specify\nyaml\nsuites:\n  UniqueIndicator:\n    namespace: YourNamespace\n    src_path: path/to/src\nProbably other options also could be controlled this way, haven't tried.\n. @red-One could you clarify what is your directories structure and if you use composer have you added it to autoloader?\n. @red-0ne not at all\n. @Fuhrmann you could try \"bin/phpspec desc App/Tests/Markdown\"\n. Could be so. I think that methods generation should not affect how a file is formatted at all. So normal behavior would be to leave after generation as many break-lines as were in the source class. \n. ",
    "red-0ne": "Thank you @antonCPU, but when I make bin/phpspec run it always tell me that myClass does not exist and propose to create it (even if it exists)\n. I added my path to composer.json, now it's working perfectly.\nThank you.\n. ",
    "milescook": "@ciaranmcnulty I have a fuelphp framework, and I've tried many combinations of the src_path config with that guide without joy. The classes belong in the folders (relative to the YML config file) fuel/app/classes/controller, fuel/app/classes/model etc. How would you set that config up to use those src paths?\nI can manage to get phpspec to create the files in the right place, but running again it asks if I want to create them again, then asks If it should overwrite them.\nCheers!\n. I'm using fuelphp and it has the following directory structure (the relevant bits):\nfuel\\\n->app\\\n->->classes\\\n->->->controller\\\n->->->->widget.php\n->->->model\\\n->->tests\\\n->->->controller\\\n->->->->widgetSpec.php\nphpspec.yml\ncomposer.json\netc...\nHere is my phpsepc.yaml:\nsuites:\n    controllers:\n        namespace: 'controller'\n        spec_path: 'fuel/app/tests/'\n        src_path: 'fuel/app/classes/'\n\nWhen I run bin/phpspec I get the same issue as the guy above - php spec decides it needs to create the class. When it goes to, it detects the file and asks if I want to overwrite...\nAny ideas?\nCheers!\n. class Controller_Widget extends Controller_Rest\n. My yaml now reads as:\nsuites:\n    controllers:\n        namespace: ''\n        spec_path: 'fuel/app/tests/controller/'\n        src_path: 'fuel/app/classes/controller/'\nWhat you're saying makes sense. But I still get the same:\nwidget\n  10  ! it returns the test campaign list\n      class widget does not exist.\n100%                        1\n1 specs\n1 example (1 broken)\n29ms\nDo you want me to create widget for you?\n                                                               [Y/n] Y\nFile \"widget.php\" already exists. Overwrite?\n                                                               [y/N] N\n. With:\nsuites:\n    controllers:\n        namespace: ''\n        spec_path: 'fuel/app/tests/'\n        src_path: 'fuel/app/classes/'\nI can desc the class, which creates the spec file. Running php spec twice still gives the same problem... maybe the fuelphp framework in incompatible because of it's naming conventions...?\n. Gutted :( Thanks anyway.\n. ",
    "isimmons": "Same issue as @miles-blurrt here. Except this is with Laravel\nphpspec run\nasks me if I want it to create the controller. I don't because the controller already exists. But to test I made a copy of the controller and then answered yes to the prompt. Then it tells me the controller already exists and asks if I want it to overwrite. I answer no. Then when I do run again it asks me again if I want to create it.\nMy yaml file\nsuites:\n    controller_suite:\n        namespace: 'controllers'\n        spec_path: 'app/tests'\n        src_path: 'app'\nThe command to create the test\nphpspec desc controllers/TwitsController\n. just showing how I created the spec.\nThe actual controller already exists but phpspec keeps trying to create it for me when I run phpspec run\n. Laravel uses classmap to autoload the controllers directory. I also tried changing to psr-0 and doing a composer dump-autoload but still the same problem.\n. Looking at this from the generated spec\nfunction it_is_initializable()\n    {\n        $this->shouldHaveType('controllers\\TwitsController');\n    }\nIts looking for a namespace that matches but there is no namespace controllers/TwitsController.\nSo I namespaced my controller and autoloaded it again but still the same problem \n. @ciaranmcnulty  Sorry if I'm just not understanding the docs. If I am though, something might not be working right.\nI started over to try again with a controller that doesn't already exist.\nStarting with phpspec.yml in the root of my laravel project\nsuites:\n    controllers:\n        namespace: 'Controllers'\n        spec_path: 'app/tests/'\n        src_path: 'app/'\nThen I run\nphpspec desc controllers/TestController\nwhich creates app/tests/spec/controllers/TestControllerSpec.php\n```\n<?php\nnamespace spec\\controllers;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass TestControllerSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType('controllers/TestController');\n    }\n}\n```\nThen I run\nphpspec run\nand get the following\n\nSo it is creating the source file in the right place and even adds the 'Controllers' namespace but when running the test it still says it doesn't exist.\nI've tried leaving the controllers directory classmap autoloaded as it is in a default Laravel installation and I've tried using prs-0\nAm I doing something wrong here or is it a bug?\nThanks\n. Well it's working now with psr or classmap and I'm not sure what I changed to make it work. So, sorry for the trouble.\n. Agreed on using the suite name and then run everything under that defined namespace if possible\nI can't figure out how to run any of these suites\nsuites:\n    acme:\n        namespace: 'Acme'\n        spec_path: 'app/tests'\n        src_path: 'app/'\n    all:\n        namespace: 'OfficeTwit'\n        spec_path: 'app/tests'\n        src_path: 'app/'\n    controllers:\n        namespace: 'Controllers'\n        spec_path: 'app/tests/'\n        src_path: 'app/'\n    services:\n        namespace: 'OfficeTwit\\Services'\n        spec_path: 'app/tests'\n        src_path: 'app/'\nphpspec run OfficeTwit\\Services Should run all the specs located in app/tests/spec/OfficeTwit/Services right?\nI get \n0 specs\n0 examples\n0ms\nOn anything but phpspec run\n. Also the suite shortcut in the docs example is not working with spec_path and src_path because it is malformed yaml. Not sure how I would specify the spec_path and src_path if using the shortcut for the namespace. So that can be a confusing example for a newbie. \nsuites:\n    services: OfficeTwit\\Services\n        spec_path: 'app/tests'\n        src_path: 'app/'\nCauses error:\n[Symfony\\Component\\Yaml\\Exception\\ParseException]\n  Unable to parse at line 16 (near \"    spec_path: 'app/tests'\").\n. Kinda figured that. Just wanted to mention if while on the subject of the docs example.\n. Been a while and trying out phpspec again so thought I'd check on this. As veewee pointed out above the docs are worded incorrectly or it's just not working the way intended.\n\"To run a suite, you have to use the namespace of the specification classes or the classes it tests. For instance, the above acme_suite will be used when running phpspec run Acme\\TheLib, phpspec run spec\\Acme\\TheLib or any classes in that namespace (e.g. phpspec run Acme\\TheLib\\Section\\Foo)\"\nWhat works is the path to the classes being tested relative to the yml file and not related to the namespace unless the namespace just happens to match the directory structure. If Acme is located in app/Acme then \"phpspec run app/Acme\" works, not \"phpspec run Acme\". \n. I should add that codeception has a laravel4 module that does exactly this. http://codeception.com/docs/modules/Laravel4\n\"uses bootstrap/start.php to launch\"\nThough it also adds a bunch of helper methods the main thing is being able to use Laravel's built in mocking for facades and also being able to test classes that may or may not be using facades within them such as Auth, Redirect, Input, etc. These are all facades in Laravel and have their own shouldReceive() method for mocking them.\nMight be helpful to see how codeception does it.\n. @jonphipps Thank you for that class reference link. I had read the post but maybe to hastily :-)\n@stoff I can understand that. While I still think a laravel4 module would really spread usage of phpspec into the laravel community more, I can see that I need to re-think how I use phpspec (what things I should and should not be trying to test with it) and how I code if I'm going to use it.\n. Sorry @stof didn't realize I put a extra 'f' in there. I guess stating that none of the methods behind these facades are actually static methods is irrelevant in this situation since they are being used as if they were static right? I mean the fact that the facade only gives us the ability to call them as if they were static methods. Calling them that way instead of passing them into the constructor is where the problem lies. Just making sure I understand. \nSo I can choose to use facades as a convenience, just not with classes I want to test with PHPSpec \n. @MarcelloDuarte Yeah actually even using the Http/routing facades wouldn't work because they don't exists unless there is a running instance of the application as is done with Laravel's TestCase and Codeception's L4 module. And automatic dependency resolution doesn't work because the Ioc is part of the Laravel application. A lot of the classes those facades point to also rely on the automatic dependency injection provided by the Ioc.\nSo as far as I can tell at this point I could use Phpspec for testing my own classes as long as they don't rely on automatic dependency injection or facades.\nI had been under the impression that I could replace phpunit with phpspec but I don't think it can be a complete replacement. I think phpunit and phpspec together will work well with testing Laravel apps but as far as I can tell at this point there are just certain things in Laravel that are going to require phpunit such as testing controllers. \n. Yep, basically wanted to replace phpunit for these type tests. http://code.tutsplus.com/tutorials/testing-laravel-controllers--net-31456\nPlus for other things like say I want to unit test a UserValidator class. If that class in any way depends on the Laravel IoC for automatic DI or the Validator facade it isn't going to work because in that case it won't even pass this basic test\nfunction it_is_initializable()\n{\n    $this->shouldHaveType('UserValidator');\n}\n. ",
    "8823-scholar": "Hi @ciaranmcnulty, thank you for reply.\n\n$this::foo()->shouldReturn('bar');\n\nI tried as described above, but the situation does not seem to improve still.\nI read PhpSpec source code.\n\"ObjectBehavior\" class seems to have become the premise to be instantiated.\nFor example, It is not we are need a class like \"ClassBehavior\" ?\n. oh, sorry my too late response.\nCan I join the discussion ?\n@LewisW thank you. I think that your explanation is correct.\n. @damonjones @jakzal @ciaranmcnulty Thank you for reply.\n@ciaranmcnulty Yes, #288 is same problem I encountered.\nI think there are two problems upon execute spec.\nFirst, it seems that subject object has already instantiate before execute spec.\nSecond, beConstructedWith does not work in second time later.\n. https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Wrapper/Subject/WrappedObject.php#L76-L79\nPhpSpec/Wrapper/Subject/WrappedObject:: beAnInstanceOf\nphp\n        $this->classname      = $classname;\n        $unwrapper            = new Unwrapper;\n        $this->arguments      = $unwrapper->unwrapAll($arguments);\n        $this->isInstantiated = false;\nSome properties is initialized uninstantiate, but $this->instance is throughed. Why ?\nhttps://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Wrapper/Subject/Caller.php#L172-L174\nPhpSpec/Wrapper/Subject/Caller::getWrappedObject\nphp\n         if (is_object($this->wrappedObject->getInstance())) {\n            $this->wrappedObject->setInstantiated(true);\n            $instance = $this->wrappedObject->getInstance();\nIn the above method return the first initialized instance in spite of isInstantiated method return false.\nIs this What a behavior as expected?\n. thank you, @ciaranmcnulty .\nok, wait a minutes, please.\n. @ciaranmcnulty added spec. (and modified with beConstructedThrogh)\nplaese check my changes.\n. @ciaranmcnulty sorry, my slow response.\nBecause I'm not good at English that I read and write takes time.\n``` php\n    public function it_is_bar()\n    {\n        $this->beConstructedWith('bar');\n        $this->isBar()->shouldBe(true);\n    $this->beConstructedWith('foo');\n    $this->isBar()->shouldBe(false);\n}\n\n```\nI can understand this sample is bad practice.\nHowever, I can't think bad approach examples such as the following.\n``` php\nPDOSpec extends ObjectBehavior\n{\n    public function let()\n    {\n        // connetable settings\n        $this->beConstructedWith('mysql:dbname=foo;host=localhost', 'user', 'pass');\n    }\npublic function it_is_prepare()\n{\n    $stm = $this->prepare('SELECT * FROM bar;');\n    $stm->shouldHaveType('PDOStatement');\n}\n\npublic function it_begins_transaction()\n{\n    $this->beginTransaction()->shouldBe(true);\n}\n\npublic function it_throws_bad_connection_settings()\n{\n    // not connectable settings\n    $this->beConstructedWith('mysql:dbname=foo;host=localhost', 'user', 'passssss');\n    $this->shouldThrow('PDOException')\n}\n\n}\n```\nif I can't defne beConstructedWith once, How I should describe ?\n. @ciaranmcnulty thank you for you reply.\nPerhaps, is Supported pull request https://github.com/phpspec/phpspec/pull/788/files ?\n. @ciaranmcnulty I tried somethings.\nuse customized phpspec for debug\nhttps://travis-ci.org/samurai-fw/samurai/jobs/109571981#L2948-L2955\ndebug print in StreamWrapper::stream_open.\ndebug code\nphp\n        foreach (static::$specTransformers as $specTransformer) {\n            $content = $specTransformer->transform($content);\n            echo $content;\n        }\noutput\nIt seems no problem.\n``` php\n    // actual\n    public function it_gets_controller(Application $a)\n    {\n    }\n// output\npublic function it_gets_controller( $a)\n{\n    $a->config('controller.namespaces')->willReturn(['Samurai\\\\Console', 'Samurai\\\\Samurai']);\n    $this->getContainer()->register('application', $a);\n    $controller = $this->getController('spec');\n    $controller->shouldHaveType('Samurai\\Console\\Controller\\SpecController');\n}\n\n``\n. @ciaranmcnulty Maybe, no. Because checked using \"class_exists\" beforerequire_once StreamWrapper::wrapPath($resource->getSpecFilename())`\nphp\n        foreach ($this->manager->locateResources($locator) as $resource) {\n            if (!class_exists($resource->getSpecClassname(), false) && is_file($resource->getSpecFilename())) {\n                require_once StreamWrapper::wrapPath($resource->getSpecFilename());\n            }\n        }\n. @ciaranmcnulty very sorry. \n\nyour spec is being autoloaded rather than running through the transformer?\n\na apec is required from others spec.\nI success the spec that requires use StreamWrapper::wrapPath.\nhttps://github.com/samurai-fw/samurai/commit/50833ffd78211fd07acdd989dfee5cee06f71051\nuse PhpSpec\\Loader\\StreamWrapper;\nrequire_once StreamWrapper::wrapPath(__DIR__ . DS . 'ContainerSpec.php');\n@ciaranmcnulty @stof thanks, regard.\n. @ciaranmcnulty I expended times to notice that phpspec is wrapping file read stream, ha ha ha...\n\nI wonder whether the rewriter could do that wrapping for you?\n\nno. I think this case is not popular.\n. ",
    "peterjmit": "@MarcelloDuarte no worries, I think you can close #136 now :)\n. @rommsen I spec entities with XtoMany associations no problem?\n. http://qafoo.com/blog/057_containeraware_considered_harmful.html puts it nicely\n\nYou should never mock methods of your subject, because you cannot ensure that the mocked version of the code mimics what really happens\n\nMocking the methods of a SUS would be a pretty sure fire way of kickstarting some code rot in your test suite. It may seem helpful but as @MarcelloDuarte says, there is usually a better way to handle this requirement.\n. As @stof said, if you are trying to understand the meaning of shouldImplement you should be looking to the oxford dictionary, and not what PHP defines it to be. The fact that the word implement in this context has a meaning in PHP is coincidence.\nI like the code generation idea, but I don't think that shouldImplement should be made specific to interfaces (for one, it would break some of my examples!).\n. :+1: I don't know what is holding back a stable release - apart from maybe @MarcelloDuarte and @everzet being busy. I've been using v2.0-dev since May! \n. @cxj You could abstract process handling yourself (or just use a component that does it for you) \nAllowing you to do something like the following:\n``` php\nclass Server\n{\n    private $process;\npublic function construct($host = 'localhost', $port = '8000', Process $process = null)\n{\n    $this->process = $process ?: new Process(sprintf('php -S %s:%s', $host, $port));\n}\n\npublic function listen()\n{\n    $this->process->run();\n}\n\n}\n```\nBy doing that you have defined + separated two roles\n1. Process management (i.e. handling proc_open etc. for any process...not just php -S)\n2. Managing a server process.\nThen again, depending on your requirement that all may be overkill, and you would be much better off writing an integration test. \n. @whatthejeff looks great.\nOne tangential comment: this cookbook entry has probably been the most useful for me, and others I have introduced to PhpSpec, I think it deserves to be part of the main documentation.\n. @ciaranmcnulty I thought PhpSpec used to do this when you used annotation based mocks (rather than type hinting for them).\nEither way :+1: \n. @bweston92 You are missing a call to getWrappedObject\nphp\n$collection = Collection::make([$offer->getWrappedObject()])\n$offers->getByDeal($deal)->willReturn($collection);\n. ",
    "mdavis1982": "Yep. I definitely think it would be useful, even in the case of one failing test.\nIf the info is available, maybe it could just be in the verbose output? Although, I think it would be useful even in the non-verbose output. \nI could probably submit a pull request if it would help?\n. @MarcelloDuarte I've forked and been looking through the source for this but haven't (as yet) managed to see where I would add this behaviour. Could you give me a heads up on where it would make the most sense please?\n. Also, just so you can preview what this looks like...\n\n. @MarcelloDuarte To make this an extension, would I also need to remove Nyan from core and implement that as an extension first?\n. Ah, I see... I can't see a way to make this an extension then as the only thing that this adds is a subclass of the NyanFormatter that is in core - it still depends on whatthejeff/nyancat-scoreboard to work.\n. @MarcelloDuarte Could you give me an idea of how I could make this an extension please? I'd really like to get it merged in however I can but obviously want to do the best job possible! :dragon_face: \n. @MarcelloDuarte I'll try to take a look at this to see if there's some way of abstracting that out. Maybe there's a way that an extension can wrap some way of specifying custom classes to create the formatter. I don't know really how to do this - I'm just thinking out loud.\n. @whatthejeff Absolutely. I basically took the existing example of a dinosaur and moved things around in this project to make using different representations easier. I don't think it's worth changing any of the class names in the scoreboard project - after all, the name of the library has \"cat\" in its title!\nI don't think there's really an easy solution to fixing this up within PHPSpec to get it included - there's no way of specifying custom formatter classes independent of core without adding the options to the switch and I'm not sure it would be easy to turn into an extension. And we are always going to have the problem of doing new Cat(...) to generate a custom character :cat: :dragon_face: \n@MarcelloDuarte I guess that without spending some time doing a significant pull request to add some of these feature to core it's going to be difficult to get the dinosaur in :crying_cat_face: \n. @ciaranmcnulty I'll try to have a look over the weekend. I may have to shout up for some help understanding what's going on with the new refactorings, but hopefully everything will be clear.\n. @MarcelloDuarte Yup... That's fine. I think I might start this again as a separate extension project. Thanks.\n. @MarcelloDuarte @jakzal @ciaranmcnulty As a result of this, I've now created this repository: https://github.com/mdavis1982/phpspec-nyan-formatters\nAt the moment, to install it, I have to add this in my composer.json for my project:\njson\n\"repositories\": [\n    {\n        \"type\": \"vcs\",\n        \"url\": \"https://github.com/mdavis1982/phpspec-nyan-formatters\"\n    }\n],\n\"require-dev\": {\n    \"phpspec/phpspec\": \"2.0.*@dev\",\n    \"mdavis1982/phpspec-nyan-formatters\": \"dev-master\"\n},\nIf you could all let me know what you think, that would be excellent! Thanks.\nAlso, the composer.json of the project installs the whatthejeff package automatically.\n. The only concern I have about this is the case where custom formatters rely on other packages. For example, the Nyan formatter relies on the whatthejeff scoreboard and that's hard-coded in the code. Could we replace this with a custom type of exception that custom formatters could throw?\n. I think this PR makes sense... It follows the default behaviour of the app/console command in Symfony (which I know isn't directly related), so to my mind it makes it consistent with other tools too. I think composer does this too. \n. :+1: I think this is ready to merge\n. :+1:\n. :+1: \n. I think I'm with @henrikbjorn on upping the minimum requirement to 5.3.4.\n@ciaranmcnulty You can do version comparison with\u2026\nphp\n$phpVersion = phpversion();\nif (version_compare($phpVersion, '5.3.3', '==')) {\n    // It's 5.3.3\n}\n. @ciaranmcnulty I'd suggest having a class constant like const INSTANCE_ARGS_PHP_VERSION = '5.3.3';\nAnd then doing something like:\nphp\n$newInstanceArgsArgument = (version_compare(phpversion(), self::INSTANCE_ARGS_PHP_VERSION, '==')) ? null : array();\n. @ciaranmcnulty @henrikbjorn Would this be a nicer coding style?\n``` php\n// ref: https://github.com/phpspec/phpspec/pull/226\n// php 5.3.3 does not like it if you give newInstanceArgs an empty array\n$newInstanceArgs = version_compare(phpversion(), '5.3.3', '==') ? null : array();\n$this->executeExample(\n    $example->getSpecification()->getClassReflection()->newInstanceArgs($newInstanceArgs),\n    $example\n);\n```\nI think this uses better object calisthenics and is more readable. Of course, I'm not entirely sure it will work because it depends if passing null to newInstanceArgs is possible, and also whether it avoids the 5.3.3 bug in doing so.\n. @ciaranmcnulty @henrikbjorn I think this reads better:\n``` php\n// ref: https://github.com/phpspec/phpspec/pull/226\n// php 5.3.3 does not like it if you give newInstanceArgs an empty array\n$reflection = $example->getSpecification()->getClassReflection();\n$newInstanceArgs = version_compare(phpversion(), '5.3.3', '==') ? \n    $reflection->newInstanceArgs() : \n    $reflection->newInstanceArgs(array());\n$this->executeExample($newInstanceArgs, $example);\n``\n. @ciaranmcnulty In which case, theversion_compare` can be swapped out for that comparison instead.\n. @ciaranmcnulty I don't know too much about HHVM, but I'm guessing it would look something like:\n``` php\n// ref: https://github.com/phpspec/phpspec/pull/226\n// php 5.3.3 does not like it if you give newInstanceArgs an empty array\n$reflection = $example->getSpecification()->getClassReflection();\n$newInstanceArgs = defined('HHVM_VERSION') ? \n    $reflection->newInstanceArgs() : \n    $reflection->newInstanceArgs(array());\n$this->executeExample($newInstanceArgs, $example);\n```\n. @stof Updated below. @henrikbjorn Could you update your PR to this please?\n``` php\n// ref: https://github.com/phpspec/phpspec/pull/226\n// php 5.3.3 does not like it if you give newInstanceArgs an empty array\n$reflection = $example->getSpecification()->getClassReflection();\n$newInstanceArgs = defined('HHVM_VERSION') ? \n    $reflection->newInstanceArgs(array()) : \n    $reflection->newInstanceArgs();\n$this->executeExample($newInstanceArgs, $example);\n```\n. I think @stof is right - whether the methods provide a fluent interface or not should be consistent through the project, rather than just a single function doing it for a specific use-case.\n. @ciaranmcnulty I'm not sure that it should ever be ambiguous what the type hint is... We should promote type hinting on an interface and not a concrete implementation for objects. Can you give an example where it might be ambiguous what to add?\nThe only problem I can see with this is where the beConstructedWith specifies a concrete implementation and the type hint should be an interface. How would that be handled?\n. @ciaranmcnulty Is there a situation where you would have a double of a concrete class that implements the FooInterface in your spec, rather than having a double of the actual interface?\n. @ciaranmcnulty I agree it's probably a better approach - I'm just concerned that trying to help people could result in some things being type hinted incorrectly and people not being aware.\nI am, however, in favour of the feature as long as it does the right thing!\n. I agree with @jakzal - Givens make more sense in the past tense\n. :shipit:\n. @stof I had to copy the class in its entirety because I needed to pass a $states array to the new Cat() call and there was no easy way to do that because some of the properties of the class were private etc. I've added the extension to packagist now (https://packagist.org/packages/mdavis1982/phpspec-nyan-formatters) so it can be installed easily.\nIf we remove the Nyan formatter from core by default, we could always suggest to install my extension instead - although I need to fix up the requirements in my composer.json so I'm not requiring dev-master. Can someone help me with that please?\n. @jakzal I've just had a PR - https://github.com/mdavis1982/phpspec-nyan-formatters/pull/1/files\nDoes that look like the right thing to do? Or do I still need to create a tag?\n. @stof Okay... So how would I do that? (sorry - I've not actually done this before!)\nI'm assuming... In the PR, I can change the branch-alias to:\njson\n\"branch-alias\": {\n    \"dev-master\": \"1.0.x-dev\"\n}\nWhich would then mean that people can then do:\njson\n\"mdavis1982/phpspec-nyan-formatters\": \"1.0.*@dev\"\nAnd then to tag the actual initial 1.0 release... do I do:\nshell\ngit tag -a v1.0.0 -m \"Initial release\"\ngit push\nIf that's all I need to do, then I can do that easily and quickly. Thanks\n. @stof @jakzal @MarcelloDuarte Also, in the PR, should I change it to be:\njson\n\"require\": {\n    \"phpspec/phpspec\": \"2.0.*@dev\",\n}\nThanks again for all the help.\n. Okay... I've tagged and pushed and stuff. It's all on Packagist... so, if we want to remove Nyan from core, I'm happy to do a PR to do that. \n. @whatthejeff I'm happy to add whatever attribution needs to be added to the extension to credit you. I didn't realise I needed to, to be honest - I added whatthejeff/nyancat-scoreboard as a dependency in the composer.json and didn't realise you'd actually written the NyanFormatter because there was no attribution in the original file.\nIf you tell me what attribution you'd like adding, I'll add that no problem. I wouldn't want to transfer the repository to someone else's GitHub account though.\n. @whatthejeff I've added an attribution in the README of the extension with a link to your Twitter account. And I've also added attribution in the NyanFormatter.php file in the DocBlock with a link to your GitHub account.\n. @whatthejeff I've added the attribution. I apologise about that - I honestly didn't know that you'd written the original formatter included in core as there was no attribution on that.\nI wouldn't want to move the extension to another GitHub account - purely because there are changes to your original formatter (although they are small changes), and the actual extension as a whole is mine - even though it uses your original formatter.\nI'm happy to add an @author tag to the file if that would suffice? I'm also happy to add whatever other attribution you want related to the formatter.\n. @whatthejeff I've now added:\n- You as an author in the composer.json - https://packagist.org/packages/mdavis1982/phpspec-nyan-formatters\n- A link to your Twitter profile in the README.md file\n- An @author tag in the NyanFormatter.php file: https://github.com/mdavis1982/phpspec-nyan-formatters/blob/master/src/MD/NyanFormattersExtension/Formatter/NyanFormatter.php#L21\n- An @author tag in the DinoFormatter.php file: https://github.com/mdavis1982/phpspec-nyan-formatters/blob/master/src/MD/NyanFormattersExtension/Formatter/DinoFormatter.php#L11\nIs that okay? Again, I apologise about not adding attribution before.\n. I agree that it was probably more work getting it working than is indicated by the small amount of code being removed, and I appreciate the work.\nI just feel that the extension as a whole is my work and, whilst it uses a modified version of your original formatter, the extension as a whole belongs under my GitHub account. I've added attributions to you, I've credited you as an author, and I've linked people to your Twitter and GitHub account.\n\nYeah, that just wasn't an option when I originally authored the code. I prefer it as an extension too. My point here was that I thought it made sense for the extension to be under my account since I authored the code.\n\nI don't think you did author the code for the extension - just for the original formatter which has since been modified. And it's the extension that is living under my GitHub account and that's is what you're asking to be transferred. That's kind of like asking for the entirety of a project to be transferred to your GitHub account because you authored a part of it.\n\nWe could distribute the extension under the phpspec organisation and attribute @whatthejeff and @mdavis1982 for the original Formatter + the extra work that's been done?\n\nI'd prefer not to do that, to be honest - it's already on Packagist and people are already using it. I honestly don't see the problem here - the attributions are now included in the source, @whatthejeff has links to his Twitter and GitHub and is listed as an author. Does it really make any difference if people are using mdavis1982/phpspec-nyan-formatters rather than whatthejeff/phpspec-nyan-formatters?\n. Anyways... Life is too short for this!\n@whatthejeff Are you happy with just receiving the attributions and links and being listed as an author? And would you be happy with it being moved to the phpspec namespace?\n@MarcelloDuarte I'm happy to move it under the phpspec namespace if that's what everyone else thinks is best. Could I be a collaborator on the project though so that I can help maintain it and add new nyans etc?\n@ciaranmcnulty I try to be as polite as I can! :smile: \nSorry for the commotion everyone... I didn't think a little cat could cause a problem!\n. @MarcelloDuarte I can just transfer the repository over to you if you like? And then you can rename it just to nyan-formatters\n. @MarcelloDuarte okay... You've already created it... I'll update the code: composer.json etc and then push it to the new repository.\n. @MarcelloDuarte I'll set it all up in that repository and tag a release.\n. @MarcelloDuarte Shall I also update the namespace to be PhpSpec too?\n. @MarcelloDuarte Everything should be good to go... Can you set up the packagist package and also the GitHub packagist service hook please?\n. I've also updated this PR to point to the correct packagist package: 02a545bc9fafa87ddb10262df5ad5c1628d52e49\n. @MarcelloDuarte I think so! :smile: \n@whatthejeff Is that okay with you?\nI'm just going to try it out now :smile: \n. @MarcelloDuarte All looks good to me! Im going to remove my package from Packagist and my Git repo\n. @MarcelloDuarte I've removed my package on packagist and my git repo, and Tweeted about the new official repo and package. I think we're good to merge in this PR now :smile:  Thanks for all your work on this everyone :cat: \n. Yay! My first proper contribution :+1: \n. @stof I think that depends on your Terminal theme?\n. :+1: The main branch should definitely be changed to master and develop deleted.\n@stof How would you then handle releases? I'm assuming just via a tag?\n. @stof Sorry... That's what I meant - I didn't explain that very well at all! I was just confirming that that's how we'd handle the branches :smile: \n. Would it not make sense to have:\nphpspec spec My/Class/Name\nAfter all, it's about speccing the classes. Just a thought - I've only skimmed the rest of the conversation.\n. :-1: I'm with @jakzal and @ciaranmcnulty too\n. Aha! I was trusting @jakzal and @ciaranmcnulty too! This should definitely be merged! Sorry everyone!\n. Shouldn't we be using Boolean... After all, it is someone's name...\n. @ciaranmcnulty I disagree! :tongue: \n. That's like saying you shouldn't capitalise Edwardian, or Georgian. Also, Wikipedia has every instance of it capitalised: http://en.wikipedia.org/wiki/Boolean_data_type\n. @MarcelloDuarte I know that... But it is named after him - the same as \"Edwardian\" refers to things from King Edward VII. Just because that isn't his name, it refers to his name and the English language convention is to capitalise the first letter of that, making Boolean the technically-correct capitalisation.\nIf we want to change it because it's a data type, that's fine - but I prefer to see Boolean personally.\n. This is true... But I think that's actually an anomoly of the English language! Like I said, I just prefer to see Boolean, but just thought I'd throw my 2p in :smile: \n. Isn't that just a preference, too? :wink: \nAnyways, it doesn't really matter either way - I prefer to see Boolean, and other people prefer boolean or bool... I'm happy to go either way as it doesn't actually affect user land code at all.\n. LOL! :+1:\nI'm happy that we can put this to rest! :smile: \n. :+1: \n. Awesome work, @damonjones! :smile: Glad we got that sorted! :beer: \n. @MarcelloDuarte I'll try to have a go over the next week... @damonjones and I already had a look whilst going over this PR, but we couldn't find anything that was testing beConstructedWith etc so we didn't really know where to start.\n. @bweston92 You can do:\nphp\n$this\n    ->shouldThrow(YourException::class)\n    ->during('__construct', ['list', 'of', 'parameters']);\n. Closing as this needs to be based onto develop\n. @MarcelloDuarte I've updated the code so that generateFinalClasses is now generator.final_classes to make it more obvious what's going on.\nI'll add a spec and also some documentation.\n. The reason this was left out is because, at the time, I didn't have chance\nto write any tests for it to prove that it works.\nI think something like this is definitely best in core, rather than as an\nextension - it allowed you to turn the final class generation on or off\ndepending on your preferences.\nOn Saturday, 13 September 2014, Luis Cordova notifications@github.com\nwrote:\n\nis ok i got what i needed, just don't like to copy paste templates for all\nprojects over and over so i created a package\nhttp://www.craftitonline.com/2014/09/be-strict-phpspec-2-best-practices-extension-just-released/\nhere https://packagist.org/packages/cordoval/best-practice-extension but\ndefinitely will adapt as PRs like this get merged into the core, thakns\n@ciaranmcnulty https://github.com/ciaranmcnulty [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/339#issuecomment-55507729.\n. I think it's nice to be able to turn this on or off depending on your\npreference.\n\nI have no complaints about the issue being closed (although at the time\neveryone seemed very much in favour of it). If you want to override the\ntemplates then you can already. But, personally, I still think this should\nbe an option in core.\nI do, however, think if it's going to be in an extension then some credit\nshould be given (or a link to the issue), and possibly an explanation of\nhow this is already possible in core.\n@cordoval I'm on my phone so I can't actually read your site properly, but\nwhat does your extension do that isn't already possible?\nOn Saturday, 13 September 2014, Ciaran McNulty notifications@github.com\nwrote:\n\nMy concern is that this just tweaks the default template and we could end\nup adding options for all of these things.\nIt's entirely possible to always generate final classes already, drop your\ncustom template in ~/.phpspec/class.tpl\nhttp://phpspec.readthedocs.org/en/latest/cookbook/templates.html#overriding-templates\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/339#issuecomment-55507862.\n. And by credit, I don't necessarily mean to me... This was originally\n@everzet's idea to add\n\nOn Saturday, 13 September 2014, Matthew Davis matt@mattdavis.co.uk wrote:\n\nI think it's nice to be able to turn this on or off depending on your\npreference.\nI have no complaints about the issue being closed (although at the time\neveryone seemed very much in favour of it). If you want to override the\ntemplates then you can already. But, personally, I still think this should\nbe an option in core.\nI do, however, think if it's going to be in an extension then some credit\nshould be given (or a link to the issue), and possibly an explanation of\nhow this is already possible in core.\n@cordoval I'm on my phone so I can't actually read your site properly, but\nwhat does your extension do that isn't already possible?\nOn Saturday, 13 September 2014, Ciaran McNulty notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote:\n\nMy concern is that this just tweaks the default template and we could end\nup adding options for all of these things.\nIt's entirely possible to always generate final classes already, drop\nyour custom template in ~/.phpspec/class.tpl\nhttp://phpspec.readthedocs.org/en/latest/cookbook/templates.html#overriding-templates\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/339#issuecomment-55507862.\n. @cordoval I just think that in the README or somewhere in your extension\ndocumentation you could point to some references (these issues, blog posts\netc) on where the ideas for implementing these opinionated defaults came\nfrom.\n\n\nOn Saturday, 13 September 2014, Luis Cordova notifications@github.com\nwrote:\n\n\"avoiding copying templates\" so the extension has opinionated templates\nalready for all projects when enforcing things strictly. And keeps the\nsimplicity of overriding like the idea from @everzet\nhttps://github.com/everzet\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/339#issuecomment-55508104.\n. @cordoval Cool. Also, do you think you could have a quick look at the\nmobile view of your site? I've seen a few things on there I wanted to read\nlately and haven't been able to on my phone (which is where I check Twitter\nthe most) :smile:\n\nOn Saturday, 13 September 2014, Luis Cordova notifications@github.com\nwrote:\n\nyep sounds like a good idea, i think a footnote with the link to this\nissue on the features list would do\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/339#issuecomment-55508456.\n. :+1: I'd like to see this feature @damonjones \n. Could it possibly do both things? So, it will ask you the question, unless you've explicitly set an option in the phpspec.yml file?\n. @stof I think it would still fail, even if it got to the next check as my autoload.php is at vendor/composer/autoload.php and it would never check that directory. Is that correct?\n. @stof Ah, I see... Well, I'll submit a PR to try to fix it :smile: Thanks for your help\n. @stof https://github.com/phpspec/phpspec/pull/374 should fix this :smile: \n. Thanks, @stof :smile: :beers: \n. @stof What do you use for merging? Curious how you redirected to master\n. Thanks for the explanation... I use rebase at work to keep our commit history nice and clean so I'm familiar with that. I just didn't know how it worked switching-wise with GH pull requests - but it apparently doesn't :wink: Thanks again!\n. @stof Is it possible that this will make it into the release you get when included PHPSpec in Composer when you do \"phpspec/phpspec\": \"~2.0\"? I want to use it in a Symfony 2.5 project but can't at the moment.\n. Thanks, @stof :smile: \n. Thanks, @stof... I'd like to leave the classes final so I'll go with the second option. \n. I still have the code for this PR lying around... At the time, I didn't know how to add the tests needed for the feature to be included. Now that I do, I'll try to resurrect it ASAP \n. @ciaranmcnulty I've just opened the above PR to address this.\n. @ciaranmcnulty I don't think they'd need to update their templates... If their templates don't include it then it will just be ignored?\n. @everzet I think I agree with you. Personally, I think this option should be enabled by default and it should be disabled explicitly if the user doesn't want the behaviour. I'd like the option to still be there, but I think enabling it by default would be the best idea.\n. @richardmiller That would work... But I think, as a user, I'd prefer to be able to turn it off without having to put stuff in my home directory. I might want it on for one project, and off for another, for example.\n. @jakzal So you're in favour of having it on by default, and allowing the user to switch it off with an option in phpspec.yml?\n. @jakzal I disagree...\nI think it's fine to have it as a default behaviour. It's not a big deal to remove the final keywords after a class was generated. \n\nIt's also not a big deal to add them afterwards. :wink: I'm joking, of course - but I'm not convinced that's a good enough reason to remove the option.\nI think it's important to be able to disable it... If I'm working on a project where final classes aren't used, I then have to go and remove it every time something gets generated. We could argue that the classes should be final, but the reality is that the tool is probably used in places where that's not going to be happening any time soon.\nI can't just override the templates to remove it, because if I'm working on more than one project (which is the case for me at the moment - one of which uses final and one that doesn't), then that'll change the templates for all projects - so I have to go and edit the code for one of them whatever if we don't add the option.\n. @jakzal I'm inclined to agree - mostly.\nI think for something like this, overriding the entire template seems a bit overkill.\n. @mlopes That is what happens at the moment. If we add the option to phpspec.yml then one project will generate final classes by default, and the other won't. I won't have to edit the code at all.\n. @ciaranmcnulty I wasn't aware of that... Maybe I should have read the docs more closely! :wink: \nI still think that being able to turn it off via a switch in the phpspec.yml is easier for the user - and it doesn't require them to have to go find the template from the vendor folder to change a single word in the template. It just seems a bit overkill to have to go to all that trouble for this.\n. @ciaranmcnulty It's interesting - but adds an extra question to answer which I'm not sure is worth it... They could just set the option and then it wouldn't have to bother them :wink: \n. I've opened another pull request that will generate final classes by default, without making it configurable via the phpspec.yml file.\n. - +1 on final\n- +1 on default, not configurable but can be overridden in templates\n- -1 *Interface suffix\n. When is GitHub going to start counting :+1: and :-1: in issues?!\n. @ciaranmcnulty Do you need my PR?\n. @ciaranmcnulty Yep, no problem at all. Shall we close the one that adds the option?\n. There are already instances of the 5.4 array syntax in the same files that I modified - which is why I used the 5.4 syntax! :wink: \n. I'll try to add a feature for this... I'm not 100% sure what I'm doing, but I'll give it a go anyway\n. I've added the acceptance test and it passes :smile: \n. I've removed the 5.4 array syntax... The awkward moment you realise you have PHPStorm set to force the syntax on save!\nIt's very cool I didn't have to write any code! Behat is cool! :smile: \n. Gah! Fixed!\n. Gah! I'm an idiot! :smile: \nThanks, @ciaranmcnulty!\n. It's a bit weird that one of them still passed though... And removing either one made the other one pass\n. Yes... That, and the expected exception class type was truncated\n. I'm an idiot... This works fine if you do it properly :smile: \nClosing!\n. I think this should be spec rather than specs\n. I think this should be spec, not specs\n. I think the same applies here - I think by default the directory is spec?\n. I think this should be on failure\n. I think this should be the where it says te\n. @stof @MarcelloDuarte I'm not sure that changing this is correct. The text before says that it will be created in the spec directory - this just says that it created a namespaced specification, and uses \\ rather than / to denote that. It's obvious from the direction of the slashes that it's referring to the namespace of the class, rather than the directory structure.\n. @MarcelloDuarte :+1: \n. :+1: \n. Would it be better to pass this into the constructor when the application is instantiated, rather than having a new call here?\n. Isn't --dev the default for composer install ?\n. @ciaranmcnulty I'll do that now\n. @cordoval I'll wait until we've got some docs :wink: \n. @ciaranmcnulty PR #254 does this :smile: \n. @ciaranmcnulty @cordoval The suggestion for YAML is 2 spaces, but I think that's actually inconsistent and YAML will natively follow whatever coding standard the developer chooses. If we're going for PSR-2 standards, than that requires 4 spaces (http://www.php-fig.org/psr/psr-2/)\n. @ciaranmcnulty I'm aware of that... But if that's what's being used for the rest of the project and YAML doesn't really care, wouldn't it be better to keep things consistent?\n. PR #256 addresses this.\n. ",
    "andytson": "I'm finding I want to use generators in methods as a simplification (and memory friendly), so having this problem. It'd be nice to be able to compare a iterator return from a method call to an array.\n. I had an idea that maybe a locator could be created that uses Composer's class loader to work out the file that should be created on prompt. This way it wouldn't need to know whether a library is PSR-0 or PSR-4 to work out where to put the file.\ne.g.\n$classLoader = include 'autoload.php';\n$file = $classLoader->findFile($class);\nI might try to implement it if I have the time, but putting the idea down in case someone else want's to.\n. Ah, didn't realise the autoloader did stat calls for existence. I personally dislike autoloaders doing that, and instead rely on trusting that the autoloader paths aren't overlapping.\n. yep, I understand, Ideally composer could have been one-to-one class => file, (with longer namespaces taking precidence still), like Doctrine\\Common\\ClassLoader allows, and maybe then would be faster when opcode cache file stat disabled. The fact it does this means this setting is close to useless.\n. I believe it can if rewritten (tho break BC). I'll not write the reason here as it's a bit off-topic to phpspec.\n. @ciaranmcnulty I think the solution we talked about in the internal chat prob the best solution $this->x()->shouldTraverseOver([1,2,3])\nThat way it's an explicit choice how to act.\n. ",
    "shanethehat": "I have also experienced this issue while working with Magento collections. See https://gist.github.com/shanethehat/8951398. The provided patch works from me, although I have added a test for $argument instanceof \\ArrayAccess.\nYou can see it in situ here: https://github.com/shanethehat/phpspec/blob/feature/support-traversable-unwrapping/src/PhpSpec/Wrapper/Unwrapper.php#L62.\n. I like that future versions of Magespec could have the extension-specific config placed in a clear place in the config file. The proposed BC break could be adopted very quickly, and with a small amount of warning we could be compatible as soon as this merges and tags. @MarcoDeBortoli and @jamescowie?\n. @andytson Forgive my lack of understanding, but would that work for the example I posted where the difficulties are with a prophecy stub? And is it something that would need to be implemented in Prophecy?\n. @MarcelloDuarte has showed me that an easy solution to this is to unwrap the objects in the iterator from inside the spec:\n$stagingCollection->getIterator()\n    ->willReturn(\n        new \\ArrayIterator(array(\n            $staging1->getWrappedObject(),\n            $staging2->getWrappedObject(),\n        ))\n    );\n. The generators are already assigned to the GeneratorManager with a setter, but that still takes place in the closure that creates it so the issue remains. Maybe the container could support a post compilation pass of some kind to call setters afterwards. \n. That's a more elegant suggestion, but maybe it would be more resilient to move the attachment of the listeners. I'll have a play.\n. My usecase disappeared because we refactored Magespec to use event priorities instead of a separate event thrown from the code generator. I suppose that there might be a genuine use for this, but encountering this problem might just be an indicator that an extension's design needs to be reconsidered. \n. I would hope not, or at least that any breakages would be easily rectified. Adding the $container->configure() came about because Magespec uses Configurators that need to be initialised before the listeners can be added. \n. It seems like this has somehow broken a Behat scenario that's fine in develop. I'll figure out why now.\n. Hmm... now I see it in Github I wonder if filtering on the priority is overkill. It adds a BC break by putting getPriority in ResourceInterface, and the locators in ResourceManager are already sorted by priority. Technically I suppose it would be enough to only keep the first Resource for any given spec class.\n. Thanks for the feedback @stof. The reason that I didn't pass the matchers in the constructor is because they need to be added after the object has been instantiated, to ensure that extensions have an opportunity to add their own to the container. That leads to the reason that I switched from lazy instantiation to direct. With the lazy approach different instances of the MatchersMaintainer are returned at the point of configuration and the point when it is injected into ExampleRunner.\nI'll take another look and see if I can find a better approach, maybe not creating the ExampleRunner until after extensions have been loaded will solve these issues.\n. I believe so, yes. I'm halfway through making that change right now!\n. I think that from MageSpec's point of view, the main pain points are things like Caller, which are large and so difficult to modify the behaviour of. Cleaning up the API and over time moving to the use of annotations to indicate 'safe' extension points sounds like it would be sensible, but there are definitely areas of the codebase that need breaking down to make that possible.\nI would like to see us using interfaces for all of those core objects so that extensions can more easily swap out functionality in the container.\n. It would be possible, no matter whether comments or something more complex is used, to have a config option that disables and pre-written body to your spec. That would appease experienced users who don't want the hassle of deleting.\n. @ciaranmcnulty I don't think the issue is mergability. The build is broken because the changes to the signature of Wrapper are incompatible with phpspec2-expect. I've fixed this locally by making the change to expect as well, but I haven't raised a PR for it yet. If you approve this change in principle then I'll go ahead with an accompanying change to expect.\nLast time we talked about it I ended up investigating a deeper refactoring of the whole wrapper/subject area, but that didn't really get very far.\n. Yes, in Wrapper if I remember correctly\n. I'm not sure if that helps to be honest, because if it's not provided Caller wouldn't behave like it does now. We could keep the current implementation in Caller if the inspector isn't provided I suppose, and mark the methods as deprecated?\n. @ciaranmcnulty done!\n. Renamed. This will be fine for Magespec to just replace the implementation of the AccessInspector with something a bit more Magento friendly.\n. This probably won't be useful for Magespec at the moment. Magespec uses the afterExample and afterSuite events to determine whether any XML updates need to be made, and I think that's more robust. It will however mean that Magespec needs some work to dispatch the fileCreated event, because currently non of Magespec's generators use the PromptingGenerator abstract.\n. Yeah, I probably should do that. What would be the convention there, private constructor first or named constructor method first?\n. I wonder how many users of phpspec are actually fixed to 5.3.x? Probably quite a few when you consider legacy production environments. That's not to say that you'd be excluding them exactly though, they could always pin to 2.2.x if that's their requirement and they can't upgrade, but by forcing them to take action we might push a few into upgrading PHP instead.\n. I don't think there is. Like Ciaran said, we can pin the version in composer to protect people on old versions. I also don't think that it needs to wait for a major version bump, this isn't breaking the API.\n. 5.4 is supported until September: http://php.net/supported-versions.php\n. It'll be dead by the time we've finished discussing it :wink: \n. Which version of phpspec are you using? This might be fixed in the 2.3.0 beta because the logic for placing the new method was rewritten.\n. @erdemkeren that's bizarre, well found. So that I can recreate it please could you post the complete spec and class examples? I didn't see the same behaviour on a really trivial test, so there must be something I'm missing.\n```\n<?php\nnamespace spec\\PhpSpec;\nuse PhpSpec\\ObjectBehavior;\nclass TestSpec extends ObjectBehavior\n{\n   function it_should_break()\n   {\n       $this->breakClass()->shouldReturn('oops');\n   }\n}\n```\n```\n<?php\nnamespace PhpSpec;\nuse Symfony\\Component\\DependencyInjection\\ParameterBag;\nuse Symfony\\Component\\Yaml\\Exception\\RuntimeException;\n/*\n * Class starts here\n /\nclass Test\n{\n    // Class body here.\n}\n// End of test class.\n```\n. @ciaranmcnulty rebased\n. The build says it's broken for an issue that is now ignored, but if I trigger a rebuild by rebasing it will forget that the issue was ignored.\n. Which version of phpspec (and php) does this happen with?\n. :+1: \n. Yeah, I agree. It seemed like a fun idea, but this is missing a step of deprecating all the old interfaces first so that the extensions have a chance to adapt. I'll make a less destructive PR.\n. @ciaranmcnulty conflicts fixed, expect weirdness removed, history squashed\n. @ciaranmcnulty rebased and tidied up\n. @stof yeah, I take your point. This is for the most part an ill-considered solution to the Windows CI platform cloning the repo with Windows line endings. \nI'll undo all the line ending stuff, although I think the third comment about distinguishing a Windows path from a FQCN is still needed. I'll then look into making Appveyor clone the repo with Unix line endings.\n. s/comment/commit/\n. All of the test failures related to the PSR0Locator are now fixed, without using system line endings. The remaining test failures appear to be related to the code generation part of the application. I no longer have access to a Windows platform to work on those until the new year.\nI do think that we should document somewhere that the tool expects developers on Windows to use Unix style line endings. (I don't use Windows myself, so not sure how much of a convention that is).\n. :+1: \n. I think it's got something to do with the presence of the $ in the string that's freaking it out. It happens when the braces are not present too. I guess something in the tokenizer is detecting it as string interpolation. Got failing tests, so I'll poke the code.\n. Fair point, the spec is probably enough to cover the edgecase found here. I'll update later today.\n. @jakzal fixed :)\n. I think this is caused by the dot formatter getting a count of all the events in the suite. It does this by performing an array_merge on the existing arrays of events and then counting the resulting bigger array. That seems a bit wasteful given that it's just duplicating stored data.\n. @dstockto would you mind testing if that PR solves your issue? https://github.com/phpspec/phpspec/pull/893\n. Indeed, edited.\n. Hmm.... it's not the same file as last time :disappointed: \n. It's what was in use in the matchers, but quite possibly not. Do you have a suggestion?\n. @ciaranmcnulty fixed exception class\n. That's only on phpspec's own test suite. I would be interested to see the difference on a bigger suite with thousands of examples.\n. From Magespec's point of view, a 2.6 release is unnecessary. The project is not particularly active currently anyway, but I would expect that any compatibility work would be undertaken as it has previously, against phpspec master branch, and so would be aiming for direct compatibility with 3.0.\nIn my mind, the point of using SemVer is that users and extension maintainers are protected from BC breaks just by using versioning correctly. I don't see much value in investing more of people's freely given time creating a deprecation release when that time could be spent on actual improvements for 3.0.\n. Maybe authors should be anyone with write access?\n. Might it have been so that the formatter could be set in the run command? https://github.com/shanethehat/phpspec/blob/prevent-circular-dependency-with-disaptcher/src/PhpSpec/Console/Command/RunCommand.php#L89\n. I agree with this, because as far as I can see registerLocator is only used when setting up the instance in the container.\n. It's hard to answer what makes this specific without reflecting on the intention behind the PR, which I'm trying not to do. maybe DetailedAccessInspector, MagicAccessInspector, GenericAccessInspector?\n. I did consciously decide to follow the existing naming convention, however if you want to start moving towards not using *Interface for a v3 release, I'm happy to start now.\n. The Mage Caller doesn't allow magic __get, __set or __call methods to be used for determining if properties and methods are accessible. \n. MagicAwareAccessInspector?\n. I don't really like it because it implies the existence of an access inspector that is not magic aware, and that's only going to exist in the magespec repo.\nSometimes if you really can't name something, then the implementation might not be right. Maybe we need several Inspectors for the specific tasks that the current one is doing, like MagicAccessInspector, ReflectionAccessInspector, GenericAccessInspector. They can be iterated over until one returns true, and then all Magespec has to do is remove the one for magic methods from the list.\n. That's going to make the BC supporting hack we put in a bit more unpleasant though.\n. Fair enough, then I'll rename it\n. Yeah, that's where I was going, but it does mean that in order to support BC that hack in the Caller constructor would have to do the same decoration stuff. I think it's something to aim for in refactoring when you can make a BC break.\nThe existing solution will work well enough for MageSpec, it can just replace the MagicAwareAccessInspector for a MagicUnawareAccessInspector. Probably not named quite like that though.\n. Should this also detect a public constructor?\n. It might not be appropriate, but isn't that why the tool asks rather than just doing it?\n. If the file exists and the user chooses to overwrite it then it would be a change, not a file creation. There could potentially be an event dispatched when an existing file changes if a use case arises.\n. Hmm... doing it by decoration could be a viable option. Maybe the prompting generator could also be a decorator instead of an abstract....\n. it doesn't? Can you give an example of where it will fail?\n. Or final ... anything else I've missed?\n. Regex it is then I suppose. I was trying to avoid that.\n. This is part of a temp commit that was introduced to show the improvement the refactoring has on the code quality metrics. It should be removed before merging.\n. fixed\n. The interface should probably be IO, which I guess leaves the question of what is noteworthy about the implementation.\n. InvalidArgument exception != RuntimeException\n. ",
    "nixilla": "+1\n. I think it_matches_ArrayObject_with_provided_offset takes care of this already, as any arbitrary ArrayAccess implementation requires to implement offsetExists. I found that this matcher wasn't working for simple arrays only.\n. @stof can you share your custom ArrayAccess implemention, please?\n. FYI https://bugs.php.net/bug.php?id=34849\n. I don't know whether this is possible now, but I found this workaround working.\nLets say you have a class which looks like this:\n```php\n<?php\nnamespace ByReference;\nclass BooleanToggler\n{\n    public function toggle(&$value)\n    {\n        $value = ! $value;\n    }\n}\n```\nThen you can test this code like this:\n```php\n<?php\nnamespace spec\\ByReference;\nuse PhpSpec\\ObjectBehavior;\nclass BooleanTogglerSpec extends ObjectBehavior\n{\nfunction it_toggles_value_by_reference()\n{\n    $value = false;\n    $this->getWrappedObject()->toggle($value);\n    // assert that value has changed here\n}\n\n}\n```\nI hope it'll help you. See this http://www.phpspec.net/en/stable/cookbook/wrapped-objects.html for reference.\nAnd here is the explanation why this is a problem:\n\nBefore PHP 5.4, referenced variables in param_arr are passed to the function by reference, regardless of whether the function expects the respective parameter to be passed by reference. This form of call-time pass by reference does not emit a deprecation notice, but it is nonetheless deprecated, and has been removed in PHP 5.4. Furthermore, this does not apply to internal functions, for which the function signature is honored. Passing by value when the function expects a parameter by reference results in a warning and having call_user_func() return FALSE\n\nsource: http://php.net/manual/en/function.call-user-func-array.php. see https://github.com/phpspec/phpspec/issues/239#issuecomment-344580176 for workaround. see https://github.com/phpspec/phpspec/issues/239#issuecomment-344580176 for workaround. ",
    "norzechowicz": "@docteurklein what do you think about passing optional parameters as a extension __construtor arguments? I have very similar extension system in my project and this is how I construct extensions: https://github.com/coduo/TuTu/blob/master/src/Coduo/TuTu/Extension/Initializer.php\n. :beers: !\n. Spec is not a testing tool and data providers is something that you mostly use for testing purpose but sometimes its hard to designe something without few examples. \nFor example take a look at this spec. It could be much simpler:\n``` php\n<?php\nnamespace spec\\Coduo\\ToString;\nuse PhpSpec\\ObjectBehavior;\nclass StringSpec extends ObjectBehavior\n{\n    /*\n     *  @dataProvider positiveConversionExamples\n     /\n    function it_convert_input_value_into_string($inputValue, $expectedValue)\n    {\n        $this->beConstructedWith($inputValue);\n        $this->__toString()->shouldReturn($expectedValue);\n    }\npublic function positiveConversionExamples()\n{\n    return array(\n        array(1 => '1'),\n        array(1.1 => '1.1'),\n        array(new \\DateTime, '\\DateTime'),\n    )\n}\n\n}\n```\nI tried to implement data providers support as extension but it seems to be impossible because spec assumes that any argument of a example is a Collabolator or null. \nI'm just afraid that after implementing this feature people will start to use PHPSpec as a testing tool and their will write code first \n. @MarcelloDuarte yes I started with Maintainers. \nThis is how far I'm with this extension:\n1. beforSpecification - event grab examples that have @dataProvider annotation and muptiply it as many times as count of provider method result. \n   So in my example with string conversation, event listener will create 3 additional it_convert_input_value_into_string examples examples, and we will end with 4 examples. \n2. Maintainer - I'm stuck here. It seems to be impossible to check how many times example was already executed so there is no way to find which row from dataprovider should be used to create colabolators.\nI will create repo later to show my current progress.\n. lol I made it :P https://github.com/coduo/phpspec-data-provider-extension \nIt works more like a \"hack\" rather than solid extension but this was the only way I could figure out. \nI'll appreciate any comments or suggestions how to make it better :)\n. Few days ago I wasted few hours to implement feature that was already at develop branch (factory method for test subject creating) :P I know, it was my fault that I didnt check that and I'm not complaing or anything but single branch should be easier for everyone.\n. phpspec-matcher-extension was never published, it was more a proof of concept for me rather than something that should be used anywhere. Anyway extension is safe cuz it has \"phpspec/phpspec\": \"2.0.*\" dependency. \nAfter updating dependency to \"phpspec/phpspec\": \"2.1.*\" acceptance tests fails but I cant tell what excatly is a reason. \n. @ciaranmcnulty I was not aware that there is a link to this extension in docs, yes it should be removed at least until I find some time to update it and make stable. \n. Maybe it could be a question before generating class with default value \"yes\"?\nOr maybe class could be generated as finall when there will be something like $this->shouldBeAFinal() when class does not exists yet? \n. I'm fine with 3.0 worhout 2.6 from my extensions point of view\n. It looks like $this->analyse(' should be in next line. \n. ",
    "gwilym": "Yes, it's actually $this->someFunction()->shouldBe(12345), where $this->someFunction() is internally using $foo->someFunction(). I wrote it out like so in my OP to be a bit explicit about it but maybe it's confusing.\nAnyhow, the same problem shows under both approaches: it only sees a MethodProphecy.\n. Done\n. Could you give a syntax example for what you mean, please? It's not clear to me from reading the documentation: http://phpspec.net/docs/introduction.html\n. I had a feeling that is what you meant. The problem is there is no FooFactory class, no factory \"objects\". The closures alone are the factories. So when I try this, it says FooFactory doesn't exist, or if I try on stdClass then it says the method doesn't exist.\n. I'm loathe to introduce classes just for testing, but I can do that as a workaround. At the very least, I can name it appropriately and it can be used by all tests in the same manner. Thanks for the guidance!\nSpecifically, I ended up with a test interface that specifies a factory method and it provides the callable as an array to satisfy the PHP \"callable\" interface (such as call_user_func):\n$factory->factory()->willReturn($foo);\n$this->setStoreFactory(array($factory, 'factory'));\nIf I ever get a chance to dig into the implementation, I'll see if I can make the pure closure approach workable.\n. After further editing I've found this to be intermittent and possibly related to setting some similar mocks inside let. It seems the $this instance at let-time is different. Moving those mocks to the test functions makes it work, though makes for noisy tests. I'm adjusting the style of test writing to suit.\n. ",
    "zloyrusskiy": "that method exists from symfony 2.2, need to update requirements for symfony/command at composer.json\n. ",
    "nonlux": "Sorry I check other symfony tools. And it's non-interactive too.\nI probably broke again  my debian.\n. I thought about your questions but I did not find simplify way. Maybe I'm not really delving into the spec. But using phpspec on the development of the symfony, have to describe the specs for the class with inheritance.\nFor such classes phpspec not quite right creates methods.\nFor example, when a spec uses fewer arguments in the method call.\nOf course this is the way to simplify the method of the class, but not always this  is true.\nNow  given class  don't extend  ParentClass\nwhen I check:\n$this->shouldHaveType('ParentClass');\nthen i see\nMyClass\n    \u2718 is type\n        expected an instance of Parent , but got\n        [obj:MyClass].\nI suggests:\nwhen I check: \n$this->shouldHaveParent(\"ParentClass\");\nthen phpspec suggest:\nDo you want me to extend                                            \n  'MyClass' from 'ParentClass' for you?\nand generate:\nclass MyClass extends ParentClass {\n    public function someParentAbstractFunction($a,$b){\n         throw new NotImplementYetException();\n    }\n}\n. All right. Talk to you forced me to reconsider the approach to specifications. In my opinion I still do not understand it as they apply. Thanks.\n. @stof, @ciaranmcnulty.  Please, accept my apologies. I will read my code carefully before I will create a new issue. \n@ciaranmcnulty, yes use will lost.\n. Ok. but how i should work with doctrine entities or other only for store models?\n. ",
    "farconada": "\"composition should be chosen over inheritance\" --->agree\n\"studying the classes involved\" --> and encapsulation? I dont want to look inside 3party libs, only the API but not deeper\n\"uses composition. It is the FOS\\RestBundle\\View\\ViewHandler::handle\" --> https://gist.github.com/farconada/6846377 easy but unnatural\n\"don't forget that from the point you extend a base class, your class has become the base class (\"is a\" relationship).\" --> touch\u00e9 but... I'm adapting my coding style to be able to spec and I have to look inside the 3party class previous to spec my class\nI think that could be easier to spec If I could mock some parts of my SUS and be able to mock it is not against spec philosophy \n. ",
    "LewisW": "I'm having the same issue with this. Basically when I define a suite in the PHPSpec file, it isn't detecting the suite and mapping it like it should.\nAfter a bit of debugging, it's because in PRS0Locator::supportsQuery it is stripping the trailing slash from the query path before comparing with the srcPath and specPath for a match. But this will fail because PSR0Locator::__construct adds a trailing slash to the srcPath and specPath.\nI can submit a pull request to fix it? Or would you prefer I modified the tests to highlight the bug and let you guys fix it?\nAlso the documentation implies I should be passing the namespace as an argument in the command to run a suite (e.g. phpspec run Acme\\TheLib), but the code seems to suggest it's the src path. I'll mention this in a different issue, I just wanted to know if you think it's a code issue or a documentation issue?\n. Ok here's the simplest example I can think of. Lets say I want to test PHPSpec from my main project quickly, and so I add it to my PHPSpec as a bundle:\n# /path/to/myproject/phpspec.yml\n  phpspec:\n    namespace: PhpSpec\n    spec_path: 'vendor/phpspec/phpspec'\n    src_path: 'vendor/phpspec/phpspec/src'\nIf I then run the phpspec command:\nbin/phpspec run vendor/phpspec/phpspec/\nThis fails because the supportsQuery method is comparing path/to/myproject/vendor/phpspec/phpspec/ with path/to/myproject/vendor/phpspec/phpspec\nEdit: Updated src_path to include 'src' as @stof pointed out.\n. I tried that, didn't have any luck with it.\nEdit2: I've fixed missing out '/src/', but checking the docs, the spec folder is specified by spec_prefix so '/spec/' should be left out. Sadly even with that fix, this bug still occurs.\n. Further to this, I've discovered another bug relating to having the specPath the same as the srcPath.\nIn PSR0Locator::findResources, it works out which resources to find based on the query. However it checks for the presence of the srcPath in the query before it checks for the specPath in the query. This means that when checking the query 'path/to/myproject/specs' it will match 'path/to/myproject/' before it matches the spec path like it should. This is easily fixed by changing the check for specPath to be fullSpecPath and putting it before the srcPath since it's always going to be more specific. I'll submit a PR and tests with this when I get more time.\n. This issue still exists, so I'll explain it a bit better.\nIf you change the let() method in spec/PhpSpec/Locator/PSR0/PSR0LocatorSpec.php to be the following:\n$this->srcPath   = realpath(__DIR__.'/../../../../');\n$this->specPath = realpath(__DIR__.'/../../../../');\nThen several of the tests will fail. It's very common to keep the source code in the parent directory and then have Tests in a sub-directory (e.g. FOSUserBundle). This isn't possible with PHPSpec, it forces you to put the source code in a subdirectory. So this isn't possible:\nMyClass.php\nspec/MyclassSpec.php\nInstead you're forced to use this structure:\nsrc/MyClass.php\nspec/MyClassSpec.php\nThe biggest cause is because in the constructor you're adding a trailing slash to the srcPath, but when calling supportsQuery you're trimming any trailing slashes. There's also another bug with the order in which it compares the paths but they're both simple fixes. I'm happy to fix this bug and write some tests if it's behaviour you intend to support?\n. ",
    "jacekelgda": ":+1: \n. I think that specific matcher for interfaces is missing.\nAlso existing matcher shoudlImplement is confusing (I would assume that not only for me) at this point and should take role of matcher strictly for interfaces.\nThen what @karolsojko created would be valid.\n. ",
    "l3l0": "shouldImplement is more natural for me as well... cause class always implements interface. shouldHaveType does not say nothing about interface, and type does not always is interface right ? Or I get something wrong ? :)\n. ping @MarcelloDuarte @everzet \nSorry guys but this is really annoying stuff. I was trying to fix that but right now I am not really sure how to do that.\nI would like to call letgo maintainer (see #214) but does not call all expectations check maintainers after some exception is throwed (so exception will not be masked and generation will be possible again).\n. Fixed in #276 \n. IMHO public getters/setters most of the time mean that we break object encapsulation.\nWe should avoid that. From my perspective such feature may do much more harm than good.\n. Thanks @cordoval \n. @ciaranmcnulty ok cool :) Just be aware that develop seems to be quite outdated (there is not behat for example) that why I decided to create PR for master.\n. @ciaranmcnulty Sure I can. Do you have some proposition ? This scenario checks if letgo method in our spec is called.\nWhat will sound better ? \n. Right... it is not probably needed I just tried to reproduce case in which I found such bug.\nWe can make example easier probably... just wonder why we shouldn't use more \"real\" life examples ;)\n. Right I just fixed some warning which appear when I added more examples in single scenario - this can be improved as separate PR.\n. @ciaranmcnulty done in da6652b\n. ",
    "ftrrtf": "I guess the problem is the same as here #213 \n. ",
    "fspillner": "```\n<?php\nnamespace spec\\Acme\\Bundle\\AcmeBundle\\Entity;\nuse PhpSpec\\ObjectBehavior;\nclass PostSpec extends ObjectBehavior\n{\n    /*\n     * @param Acme\\Bundle\\AcmeBundle\\Entity\\Post $post\n     * @param Acme\\Bundle\\AcmeBundle\\Entity\\User $owner\n     /\n    function let($post, $owner)\n    {\n        $this->setParent($post);\n        $this->setOwner($owner);\n    }\nfunction it_implements_PostInterface()\n{\n    $this->shouldImplement(\"Acme\\Bundle\\AcmeBundle\\Entity\\PostInterface\");\n}\n\n// ...\n\nfunction its_not_a_topic_or_answer()\n{\n    $this->shouldNotBeTopic(); // failed\n    $this->shouldNotBeAnswer(); // failed\n}\n\nfunction its_a_comment()\n{\n    $this->shouldBeComment(); // failed\n}\n\n// ...\n\n}\n```\nand I get the failed result:\n```\n----  broken examples\n    Acme/Bundle/AcmeBundle/Entity/Post\n\n53  ! its not a topic or answer\n        no beTopic([array:0]) matcher found for null.\n    Acme/Bundle/AcmeBundle/Entity/Post\n\n59  ! its a comment\n        no beComment([array:0]) matcher found for null.\n```\n. I want to understand why the $subject is null on object state matcher and on other matchers not null ... \n. Ah, thank you for the explanation, @ciaranmcnulty!\n. ",
    "richardmiller": "@ciaranmcnulty I think without your changes run was only made the default command if --help was not sepcified, this PR stops run from being the default command altogether and instead uses the typical symfony console default command of list.\n. @ciaranmcnulty should be ok now\n. :+1: good to make people have to choose to remove it from the generated classes.\n. Well, it will stop it saying 99% when it is actually 100%. It may be possible that when there are broken or failing specs that the percentages will not add up to 100, not entirely sure. \n. Extracting this stuff and speccing it might help :)\n. Yep, it seems like there is a separation in the type of events anyway, those that occur during the running of the specs and those that occur during code generation. So using a separate dispatcher for each type seems reasonable rather than just a solution to a technical problem (even if that is the initial motivation).\n. @ciaranmcnulty I've rebased it against master\n. :-1: even if returning a value from the spec were to be used then indicating failure by returning a truthy value and success with a falsy one does not sound like a good way to go.\n. Is #384 being addressed as a bug or should it be documented as the way it works and not be considered a bug?\nFor splitting it up - I was considering splitting it out into a separate cookbook that discusses the concepts and then just having the configuration cookbook as a reference? Does this sound like a way to go?\nOne motivation was that I think it would be good to have a cookbook for command line related stuff as well. Whilst the suites are not relevant to that the formatters will be so it may make sense to give them there own section with the configuration and command line cookbooks just being references that link to that.\n. Not sure I follow about the suiteless config - do you mean setting things like spec_path at the top level and not in a suite? If so, then I don't think that is possible.\n. I have added a note relating to #384.\nFor #265 the first commit removed that part from this cookbook. As far as I can see it was just incorrect as you specify specific spec files or spec directories to run and not namespaces at all. So removed for now, will clarify what does and doesn't work when adding a cli cookbook.\n. I have made changes based on the comments.\n. Sure - what else is there?\n. Ah ok, I'm happy for this to be merged, I'm not adding to it at the moment.\n. Also now added making the index page look like the current site home page\n. Closing as can be added in an extension if #545 is merged\n. It does break b/c with the console component <= 2.2. Since phpspec is opinionated about good practices and using long since unsupported versions of libraries is a bad practice it seems ok to me. If anything all of them should be bumped to ~2.3\n. looks like it :(\n. It is possible to achieve what I think you are looking for with config changes. What happens is that the spec_path is the base path to the spec files. Then within that the spec prefix is added to both the namespace and the folder structure. \nThe default spec prefix is 'spec' and the default spec path is actually '.', so the root of the project when phpspec is run from there. So by default it ends up in the spec directory because of the prefix not the spec path. So by having a spec_path of spec/classes and a \"spec_prefix\" of spec you end up with the specs in spec/classes/spec.\nTo get the specs to be in spec/classes remove the spec_path altogether and make the spec_prefix spec/classes. The namespace will change to start spec/classes so you will need to update the namespace of existing specs to avoid exceptions relating to the change.\nWhether this behaviour makes sense or not is another matter.\n. Cool, I meant that it doesn't seem entirely intuitive to me - the spec path and prefix combining in that way. It at least needs documenting properly.\n. @MarcoDeBortoli I can see what you are doing and i think it is what most people would want. It can be done with config once you understand how the spec_path and spec_prefix combine. However, to get the symmetry in the folder structure you need an asymmetry in the configuration between spec_path and src_path. Documenting how to do it better will probably be what's needed at this point rather than a change to how the config works.\nAs @ciaranmcnulty the PSR0 locator already is now also a PSR4 locator. It could probably do with renaming to reflect this. It also needs some work cleaning it up as trying to work out what is happening with the code that sets up the paths and namespaces from the passed arguments is not much fun.\n. @henrikbjorn definitely not :)\nI think this should do that, with latest 2.1@dev\nsuites:\n  vendor:\n    namespace: Vendor\n    psr4_prefix: Vendor\n. I don't think this was intentional, should be fixed by https://github.com/phpspec/phpspec/pull/552 if that is merged in.\n. :+1: \n. Afaik 2.4 is no longer supported, so phpspec shouldn't be worrying about it either. 2.3 is as an LTS, 2.6 will also be LTS. 2.5 isn't LTS but is still supported atm so should be tested against as well.\n. Yep, it's not used internally any more.\n. Existing extensions are still supported. It should be possible to combine it with #189 - and it would be good in terms of making it more uniform.I don't think it will be case of just merging them and it working though.\n. @stof Thank you for your feedback on this, it is indeed just a WIP attempt to get the container. I'm not sure if it will be possible to eliminate all the hacky parts in it but your help in reducing them and using the symfony container as correctly as possible would be much appreciated.\n. Documenting these things sounds good. \nCould have it on with no option to turn it off but document how to stop it generating final by providing custom templates. Then people can turn it off if they must but it will require some effort so it's more of a proper decision that just not liking it and immediately turning it off.\n. This is a bit better documented now at http://www.phpspec.net/en/latest/cookbook/configuration.html \nYou should be able to set src_path to 'app' to get this to work.\n. Probably meant for #556 \n. Is there any reason not to be dropping 5.4 as well?\n. I don't have a strong opinion on whether this should mean a major version bump. If it does need a major version bump then bump the major version :)\n. That's the reason for dropping it\n. I think that it should be dropped, I was asking if there were any reasons not to.\nphpspec supporting 5.4 isn't forcing anyone to use 5.4 though. \n. Just tried with only one Argument::any()  and it didn't match.\n. Ah cool, updated to use Argument:cetera()\n. added\n. @ciaranmcnulty the configure method is called by the command's constructor before the application is set on the command so the container cannot be retrieved from it at that point.\n. Will do - I'm going to expand the extensions stuff since there is nothing beyond a few lines in the configuration section at the moment. Will add a link to it at the same time.\n. The inconsistency was unintentional. \nAs to whether it should be emphasised, it was in the main manual page so I carried that through to here but happy to clean that up through out if it shouldn't be emphasised. @ciaranmcnulty  what do you think?\n. Is consistency the key thing here? This earlier section explains the use of the aliases in more detail which is then not needed in the layer section,\n. Or split infinitives or end sentences with prepositions? http://blog.oxforddictionaries.com/2012/01/can-i-start-a-sentence-with-a-conjunction/\n. It's not being a stickler if it's not a real rule. \nI've removed it altogether rather than add a 13 letter word where a 2 letter one will do.\n. on one hand doesn't make sense unless there is some comparison with \"on the other hand\"\n. This is a change to passive voice so not a good change.\n. Methods only have a single return value.\n. Ok fair enough\n. Not sure what happened there, I've returned it to its former state.\n. There's some inconsistency here in the formatting - 2 spaces before $result, none around the =\n. I guess I should fix that wherever I copied it from as well :)\n. Should be ok, they are registered by class name and each class would be one or the other - even if you wanted to make a class both the interfaces are incompatible as they both have load methods with different signatures.\n. Does it cause any specific issues or is it just not the right way to do things?. This set up is just with to still having both containers for now for b/s with a view to moving to it fully in a future version.\n. the compat.testwork-extensions.config just has the extension config for the testwork extensions. Whilst this is effectively available to the legacy extensions none of them should be using it.\n. Actually looking again that should not be passed at all to the legacy extensions and doesn't need to be. I will remove it.\n. You could lose this else by throwing the exception if the class doesn't exist first.\n. Is there more detail in the docs on this? If so, is it worth having the url for that in the message as well?\n. ",
    "mareg": ":+1: \n. :+1: for boolean \n. ",
    "kwreczycki": "I agree with mdavis1982, that we should promote type for interface. \n@mdavis1982 Yes, this can be tricky to handle and can introduce some misunderstanding... - IMO.\n. Ok, thanks :)\n. ",
    "olaurendeau": "@ciaranmcnulty For sure it would be better, I close :)\n. ",
    "svemir": "Thanks! I was just looking for this :)\n. https://github.com/phpspec/phpspec/pull/350\n. Nice - once this gets merged, and https://github.com/facebook/arcanist/pull/143 gets merged into arcanist, we will be able to use phpspec with our phabricator code reviews.\n. Thank you very much! I tested this on my box and it works as described in the included tests and specs.\nHowever, even though the src code does end up in correct location, I would like to have the spec files themselves avoid the extra subfolders too. For example, src for Behat\\Tests\\MyNamespace\\Foo gets created in src/MyNamespace/Foo.php, but the spec is still in spec/Behat/Tests/MyNamespace/FooSpec.php\nMaybe later I could submit a pull request to make that part optional too, unless there is a reason to keep it this way? Or maybe there is already a way to do what I want?\n. I can live with this as is, but phpspec being as opinionated as it is maybe the maintainers would like to impose the \"right\" way to handle specs for psr4 projects. I am not saying my way is the right way - we just converted to psr4 last week, so I would appreciate more insight.\n. I also do not mind creating a pull request with another optional phpspec.yml option, but there may already be too many related options for this stuff. An extra folder or two inside the specs folder might be a better option after all.\n. I have been using this patch for a month now. It still works :) Merge please?\n. This works for me:\nphpspec run test/foo/barSpec.php\n. Voted for phpspec support here: https://youtrack.jetbrains.com/issue/WI-22670\n. Our suite has 108 specs and 523 examples. There is no statistically significant difference in wall time or memory usage with this change.\n. ",
    "jamiehannaford": "Has there been any movement with this?\n. ",
    "dimsav": ":+1: \n. @stof Awesome :) \n@MarcelloDuarte this is my ant target, but as I said, the output of the plugin is also included in the junit file.\n<target name=\"phpspec\" description=\"Execute phpspec and save result to junit.xml file\">\n    <exec executable=\"${bindir}/phpspec\">\n        <arg value=\"run\"/>\n        <arg value=\"--format=junit\"/>\n        <redirector output=\"${basedir}/build/logs/junit.xml\" alwayslog=\"false\"/>\n    </exec>\n</target>\nThe only (but dirty) solution I can think is to execute the command two times with/without the plugin.\n. @MarcelloDuarte yep, but this output is for the output of the code coverage plugin. The plugin after saving the output file, does an echo in the console. This echo is written in the output of phpspec run\n. I disagree. In my opinion the problem is in phpspec, as it forces you to take the console output as a valid xml file.\nI could open an issue in the plugin repo to propose the possibility of executing the plugin quietly. This would solve the compatibility between the plugin and phpspec. Other plugins will still have the same issue though.\n. Thanks for the immediate responses. You guys are awesome.\n. For the record: if someone faces the same issue in the future try surrounding the namespace with quotes.\nspec describe 'Abb\\Component'\nThis worked for me.\n. ",
    "stloyd": "I tried to do that, but I don't know internals of phpspec that well to do that properly.\n. @mbeccati It looks like ./vendor/bin/phpunit --testdox fails on PHP 7.1\n. This will fail at PHP 5.3 as you used syntax sugar from 5.4+.\n. PHP_EOL ?\n. \\n is UNIX eol character, while in Windows it's \\r\\n, and \\r was used in some old Macs...\nPHP_EOL covers differences between OSes... that's the point of my comment.\n. ",
    "pawel-grzona": "Duplicates #238. Thanks @docteurklein :)\n. ",
    "tomphp": "Also having this problem.\n. I would love to see something like this!!! However without having nested classes in PHP it's hard to decide on how it should be implemented. The annotation idea is OK I think but it's not something PHPSpec really uses atm and not really sure how everyone would feel about taking that approach?\nI'll happily have a crack at this if we can decide on a decent way to do it.\n. @docteurklein Annotations would indeed have to be copied which is not good and having separate spec classes wouldn't have a hierarchy which I think is the most important thing here. For me the main reason for having hierarchical specs is to avoid monolithic let()s being created.\n@davividal Interesting idea of creating the spec classes on the fly. I'm thinking that using the jasmine (js) style of tests would be possible in PHP and it would be fairly easy to implement a version of this which build PHPSpec specs with much of the functionality available (some parts maybe tricky). This could be done with no modification to PHPSpec.\nThis could be done so the specs would look something like this:\n``` php\ndescribe('support ticket', function () {\n    beforeEach(function($ticket, User $user) {\n        $ticket->beConstructedWith($user, 'message');\n    });\nit('stores the message', function ($ticket) {\n    $ticket->getMessage()->shouldReturn('message');\n});\n\nit('is not assigned', function ($ticket) {\n    $ticket->shouldNotBeAssigned();\n});\n\ndescribe('assigned ticket', function () {\n    beforeEach(function($ticket, Engineer $engineer) {\n        $ticket->assign($engineer);\n    });\n\n    it('is assigned', function ($ticket) {\n        $ticket->shouldBeAssigned();\n    });\n\n    it('stores the engineer', function ($ticket, $engineer) {\n        $ticket->getEngineer()->shouldReturn($engineer);\n    });\n\n    // ...\n});\n\n});\n```\nI believe this would be possible by dynamically creating the spec classes but may also be possible if phpspec has some sort of \"test runner\" injected into it (I'm going to start familiarising myself with the codebase now)?\nThe main issue I see is the complete new style of writing tests. Anyone have any thoughts?\n. @whatthejeff hmmm, so it does, was not aware of that. However what I think makes phpspec great is the use of matchers rather than asserts combined with prophecy and it seems dspec is an assert based framework. Personally I'd prefer to see it appear without completely restructuring phpspec tests but I'm not sure it's possible in a nice with with PHP as it is now.\n. @whatthejeff interesting, worth considering I guess ;)\n. @docteurklein I most definitely agree and I think trying to change the way phpspec works would be wrong and would never happen. The example I gave was purely as it's the only way I currently can think it would be possible to implement this in PHP.\nThat said I still think nested contexts would be a very welcome addition in phpspec, its the main feature I crave.\n. @ciaranmcnulty Interesting approach, would be nicer if PHP had a short lambda syntax though ;-)\n. @ciaranmcnulty hmmmm, not sure about that haha\n. :+1: \n. I'm still keen to get this going but I need to have a bit of time to give\nit a re-think (any suggestions welcome). What seemed to be trivial turned\nout to be more tricky.\nI'd like to contribute a few refactorings to get the code base closer to\nbeing ready to approach this again. Would that be something worthwhile me\ndoing?\nOn 28 November 2014 at 12:50, Ciaran McNulty notifications@github.com\nwrote:\n\nHm I'd still like this...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/issues/341#issuecomment-64890730.\n. Oops, I've just realised I replied to the wrong issue. Sorry.\n. Since I last thought about this, I've come to thinking of things the way @everzet has just described - I can't remember the last I wanted to create a real instance from a mocked collaborator.\n\nTherefore, I'm now \ud83d\udc4e  for this feature.\n. @docteurklein Indeed but why would a spec file not contain the class? Maybe a warning would be better (maybe even one that could be suppressed) but I'm still getting to grips with the code base and haven't yet discovered how to produce a warning at this level.\n. The way I see it is if your create the file but not the class then you can make the test pass by simply adding.\n``` php\nnamespace spec\\Whatever;\nclass ThingySpec\n{\n}\n```\nHowever if you move a file and forget to rename the class inside then the tests fail silently and you don't know about it until something goes wrong, IMHO this is a worse situation.\nCould go with the diff approach if you guys prefer, I can't try and locate it in phpunit and see how it works there?\n. @ciaranmcnulty yes but if you rename a class and move the file and then move the spec file accordingly but forget to rename the spec class (or make a typo) you never hear about it unless you take the time to check the number of specs run before and after the refactoring. I have done this many times (and no I'm not using PHPStorm :-p)\n. @ciaranmcnulty  This PR doesn't affect those people, it only checks that the expected spec class is defined, any additional stuff is fine. I have just updated the feature to prove this and can add it to the PR if you like?\n. @docteurklein Does this not do that anyway? This PR doesn't care if it loads 100 classes, so long as the expected class is loaded amongst them\n. @ciaranmcnulty well if you can think of one...\n. My main issue with this whole thing is the throwing of an exception, I think it should be a warning. But have seen how to generate one easily. May required injecting more dependencies in?\n. @ciaranmcnulty I think that would be better, I've got some other stuff to get on with now but will try and take a look at doing that tonight. I suspect it would involve storing a bit of state a load time to skip later on?\n. @ciaranmcnulty That makes sense, will look into it. Thanks\n. Ok I'm looking into this and there are questions regarding how to handle different situations:\n1) the file ends with Spec and contains no classes at all:\npresumably we can safely ignore this situation an move on? Or should we consider that the user may have accidentally deleted the file contents.\n2) the file ends with Spec and contains 1 class wiith a different name but implements ObjectBehavior\nI would assume this is a renaming error, my guess would be to load the class in the file but make it skip at runtime?\n3) the file ends with Spec and contains multiple different classes implementing ObjectBehavior\nOuch! load all and make them skip or load neither and notify the user of an unknown filetype?\n4) the file ends with Spec but contains 1 class which does not implement ObjectBehavior\nCould we assume that the class has accidentally removed/broke the extends ObjectBehavior and try to load it but mark it as skipped, or should we treat it as a file with no specs and notify the user?\n5) the file does not end with Spec but contains a class implementing ObjectBehavior\nThe file could have been accidentally renamed, should the user be informed in this case?\n6) file does not end in Spec contains one or more classes, none of which implement ObjectBehavior\nLets assume it's doesn't contain any specs so ignore?\nI'll get on and implement this as I best see fit but if anyone wants to chip in with any thoughts before I get too far that would be great!\n. Thanks for the reply, I think I've got a good idea on how to approach this (and improve the loader in general I think). Hoping to get it done tomorrow if I have some time but might take a little longer, will submit a update to the PR in the next few days one way or another ;-)\nI think it will use get_declared_classes, the other options is to read in the file and parse it but since the file will be loaded anyway it makes sense to use get_declared_classes and just parse it once.\n. I think in concept it covers it but if there is no spec loaded then there's\nnothing in the suite to skip.\nThe idea I'm thinking about at the moment is to load all the spec files and\ninstead of adding just the matching file to the suite adding all\nObjectBehavior classes to the suite, this in itself will generate messages\nif the matching class implementation is not found.\nTo add to this further I was thinking the loader could ask the psr0\nresource class if it's happy with the file the class came from and if not\ncould add a notification to the output. This also gives more flexibility in\nadding other schemes apart from psr0.\nThoughts?\nOn 6 Aug 2014 10:01, \"Ciaran McNulty\" notifications@github.com wrote:\n\nTom, you may be overcomplicating things with these many variations...\nFor me there are two scenarios:\n1) We include a file called FooSpec.php and when we run it, FooSpec does\nnot exist as a class - this should be a skip/failure with an appropriate\nmessage ('class FooSpec was not declared in FooSpec.php').\n2) Everything works\nI think that covers all your scenarios above?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/412#issuecomment-51309827.\n. That is a simple solution and if you want me to just leave it at that I can\ndo that and say it's done.\n\nIt's just I feel there is a bit of room for a bit more improvement...\nFirstly from a domain point of view I don't feel that the file should classify\nas a missing spec but rather the misnamed spec should be classified as the\nspec with the issue.\nSecondly the limitation to one spec per file is imposed by the loader\nrather that the psr0 rules which I think would be a better place to have\nthat limitation.\nAnyway I'll leave the choice to you, if you just want the simple skip the\nfile approach I'll get that done ;-)\nOn 6 Aug 2014 12:10, \"Ciaran McNulty\" notifications@github.com wrote:\n\nTom, you can still return a SpecNode without the class existing I suspect?\nWe just have to turn them into failures when they're run\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/412#issuecomment-51321172.\n. From the lack of reply I'll assume I should continue with @ciaranmcnulty's approach and get that done shortly ;-)\n. @ciaranmcnulty The more I'm looking at this the more I'm disagreeing with your suggested approach I'm afraid, I still think it's wrong conceptually but it's also going to result in some convoluted code.\n\nBasically at the moment when a matching spec is not found nothing is added to the suite, you're suggestion to add dummy spec to the suite seemed reasonable at first but as I've looked more into it it's somewhat tricky to achieve.\nThe reasons being:\n- a SpecificationNode requires a ReflectionClass yet there is nothing to reflect. I've tried building a dummy class and that almost works but it's impossible to get it to produces a meaningful message (instead it shows details about the dummy rather than the missing spec).\n- We could create a MissingSpecificationNode but then that doesn't help much because the SpecificationRunner simply runs the specification node's examples so we need something there.\n- So we could add a MissingSpecificationExampleNode but even so the ExampleRunner wants a ReflectionMethod to invoke which will throw the required exception to make it skip, so short of using instanceof in the runner its not helped much.\nIt's possible to get this working either with some quirky hacks or some major restructuring but I still reckon all this can be avoided (and would be semantically more accurate) by making the loader pay attention to all ObjectBehaviors loaded and simply notify of ones which don't match the \"files per class\" scheme.\n. Ok, I have pushed my proposed approach.\nI know the build is broken and I will tidy it up, but before I spend any more time on it does this approach have any chance of being accepted?\n. With regards to the warning messages, would you prefer the warnings be value objects for specific warnings instead of strings? I think it would be better.\n. BTW, I'm still waiting to find out if this approach is acceptable before fixing the build.\n. @ciaranmcnulty very fair point, I really should have considered that!\nSo I guess the options are:\n1) put the interface back on the ResourceInterface and stick with the 1 spec per file limitation for now.\n2) we could make ResourceInterface::getSpecClassname() return a regex for allowed file names but ResourceInterface::getSrcClassname() would still be tricky, thoughts?\n3) put it aside for a later, major release.\n?\n. It would work with exactly the same rules as phpspec works with currently so there would be no problem there.\n. @ciaranmcnulty Sorry for the delay in coming back to this. I've have good hack at it today but it appears you were right, option 1 with underscores is tricky. I'm going to think on it a bit more but at the moment this PR is broken.\n. Would you prefer me to cancel this PR and resubmit if I can find a decent solution?\n. This reply was meant here:\nI'm still keen to get this going but I need to have a bit of time to give\nit a re-think (any suggestions welcome). What seemed to be trivial turned\nout to be more tricky. I'd like to contribute a few refactorings to get the\ncode base closer to being ready to approach this again. Would that be\nsomething worthwhile me doing?\nOn 27 November 2014 at 13:31, Ciaran McNulty notifications@github.com\nwrote:\n\nClosed #412 https://github.com/phpspec/phpspec/pull/412.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/412#event-199528558.\n. @respinoza I would still like to see this happen but the implementation was a bit tricky without some BC breaks. I've forgotten where we got to with it so I'll have to read back and try and work it out - plus I'll have a look at the current code and see if it's changed. Maybe if it isn't possible without a sensible, non-BC breaking, solution, we can try for in to be added in a major release?\n. @stof I agree regarding code_generation: false I shall change it.\n\n@ciaranmcnulty wrong PR I think, will reply properly in the correct on ;-)\n. Will update the PR with these changes shortly.\n. Ok, I've added a OptionsConfig value object so IO takes better constructor arguments. I'd still like to have a crack at the approach to config as a whole but need to know if breaking BC with extensions which use ServiceContainer::getParam() is an issue?\n@ciaranmcnulty I'll update the docs now.\n. @ciaranmcnulty I've submitted a PR to the phpspec2-site repo, I assume that's what you mean?\n. Done ;-)\nOn 18 Aug 2014 08:35, \"Ciaran McNulty\" notifications@github.com wrote:\n\n@tomphp https://github.com/tomphp Sorry, I mean changes to the /docs\nfolder inside this repo.\nDocumentation has moved inside the main repo so that we can ask for docs\nalongside features.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/418#issuecomment-52460298.\n. Fixed & squashed.\n. @sroze 7 but I've tried 5 and had the same response.\n. @Elfiggo it's currently set to E_ALL. Are you not able to reproduce? I can try and make some time to take a look at it myself if you're not able to recreate the same behaviour.\n. @Elfiggo: Awesome! Thanks for taking the time to investigate and fix!\n. I did consider this but did this to keep it simple and get feedback, I will update it to inject the option.\n. I just re-factored in the process of learning to understand the code, I'm a big fan of..\n- Object calisthenics\n- Extract til you drop\n- Leave the code you look at neater than when you arrived\n\nand all these support neatening and tidying? Do you not agree? I can easily put it back?\n. was part of a different approach I tried, obviously missed with changing approach. Sorry, will remove it.\n. so with command would be preferred?\n. oops, sorry.\n. Fair points, will put it back.\nOn 11 Aug 2014 17:48, \"Christophe Coevoet\" notifications@github.com wrote:\n\nIn src/PhpSpec/Console/Application.php:\n\nforeach ($config as $key => $val) {\n         if ('extensions' === $key && is_array($val)) {\n-                foreach ($val as $class) {\n-                    $extension = new $class;\n\nif (!$extension instanceof Extension\\ExtensionInterface) {\nthrow new RuntimeException(sprintf(\n'Extension class must implement ExtensionInterface. But %s is not.',\n$class\n));\n\n-                    }\n\n$extension->load($container);\n}\n$this->loadExtensions($val);\n} else {\n$this->container->setParam($key, $val);\n\n\nWell, including unrelated changes in your PR makes it harder to revisw (I\nspent some time trying to understand why this code changed before figuring\nthere was no difference in the behavior). And the usage of the container\nproperty would make it harder to extract the container building (currently\nsetupContainer and all its helper methods are not depending on the fact\nthat the container ends up being stored in $this->container)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/418/files#r16064734.\n. Option? What would you suggest?\nOn 11 Aug 2014 17:49, \"Christophe Coevoet\" notifications@github.com wrote:\nIn features/options/developer_chooses_stop_on_failure.feature:\n\n\nAnd the class file \"src/SkipOnFailure/SpecExample3/FirstFail.php\" contains:\n\"\"\"\n<?php\n  +\nnamespace SkipOnFailure\\SpecExample3;\n  +\nclass FirstFail\n{\npublic function getValue()\n{\nreturn 1;\n}\n}\n  +\n\"\"\"\nWhen I run phpspec with the \"stop-on-failure\" argument\n\n\nit is not a command either (the command is run)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/418/files#r16064776.\n. Would you guys prefer that I pass 2 bools into the constructor or to wrap up the objects into an options object (or even just an assoc array)?\n. Cool, working on a PR for a nice config object, should be done in a day or 2.\n. I've been having a look at this and I could easily wrap it up on a simple class and pass it in. \n\nHowever what I'd like to do it take some time to improve the whole approach to config and build a nice modular and extensible config system which would also remove some of the responsibility from the Application class. The problem however would be that it would break any extensions which currently make use of config settings in the yaml and they would need updating. Is this something worth considering or is it a bad idea and I should just stick to the first option?\nAlso if it's not a good idea would it still be work submitting a PR for it with a view to adding it to a major release update in the future?\n. I agree that \"is not following spec class name conventions.\" would be better, I'll change that. The \"Expected/got\" one is a bit more tricky because depending on the resource standard uses (psr0, or what ever) it might be expecting an exact name or anything that matches a specified pattern.\n. oops.\n. ",
    "veewee": "Also having this problem\n. I have tried some of these patches but didnt get it working. The problem is that these generators don't work as normal Traversable objects. When a value gets 'yielded', this value is instantly passed to the code that is processing this value. I think this asynchronous behavior makes it impossible to fetch the results in the current implementation. Not sure how all these phpspec and prophecy classes work internally though.\n. I can not get this to work.\nMaybe a bit deeper into my simplified problem:\n``` php\nfinal class ExcelReader\n{\n/**\n * @param \\PHPExcel_Worksheet $sheet\n *\n * @return \\Generator\n */\npublic function getResources($sheet)\n{\n    foreach($sheet->getRowIterator(0) as $row) {\n        $index = $row->getRowIndex();\n        $resource = $this->mapper->createFromRow($row);\n        yield $index => new $resource;\n    }\n}\n\n}\n```\n``` php\nclass ExcelReaderSpec extends ObjectBehavior\n{\n /*\n     * @param \\PHPExcel_Worksheet $sheet\n     * @param \\PHPExcel_Worksheet_Row $row\n     * @param MyMapper $mapper\n     * @param MyResource $resource\n     /\n    public function it_should_convert_excel_rows_to_resources($sheet, $row,  $mapper, $resource)\n    {\n        $sheet->getRowIterator(0)->willReturn($row);\n        $mapper->createFromRow($row)->willReturn($resource);\n        $this->getResources($sheet)->shouldIterateLike([$resource]);\n    }\npublic function getMatchers()\n{\n    return [\n        'iterateLike' => function ($subject, $expect) {\n            return $expect == iterator_to_array($subject);\n        },\n    ];\n}\n\n}\n```\nWhen I var_dump the $subject in the iterateLike matcher, I get an empty array.\nI have added the GeneratorPatch and also registered it to Prophet.\nThe supports method doesn't ever return true.\nMaybe I am doing something wrong?\nFor this case the iterateLike matcher seems enough. But maybe in some cases it is to limited. A (set of) Default Matcher(s) could always be handy.\n. Posted to early. The inline matcher _does_ work!\nMade a mistake by not returning an array:\nphp\n$sheet->getRowIterator(0)->willReturn( [$row] );\n. When I remove the patch, it also works as suspected.\nThe $subject is not a double but the actual generator.\n. Yes it is a Generator in both cases.\nMaybe it should just be accessible like with arrays, so that you can do:\nphp\n$resources = $this->getResources($sheet);\n$resources[1]->shouldBe($resource);\nSo when the result is a generator class, the iterator_to_array gets called and this result just works like normal arrays? Not sure if this is possible\n. Yes it does.\n. Thanks for the quick merge! :). @unfunco \nThe problem was in both version 2 and 3.\nI was using version 3 for this PR.. ",
    "sagikazarmark": "Is this resolved then or not?\n. Is it on some kind of todo list?\n. AH, thanks, totally missed that\n. I like the way how PHPUnit solved: @requires resourceType resource\nIn PHPSpec it is probably not necessary to skip a test based on an OS (but who knows), but this allows to be flexible about skipping reasons.\n. I think most packages which run tests for PHP 7 also allows it to fail. So I would rather leave the tests fail than mess with unresolvable dependencies.\n. Any idea about this issue's future? If we have to start using dockblocks instead of type hints, it would be better to know sooner than later.\n. I wonder if the hack which makes it possible to hack type hints could be used for bypassing scalar type hints on PHP < 7.0...\n. Is this solved now? When can we expect a stable release?\n. Awesome, thanks. Closing it then.\n. Here is the full class:\n``` php\nuse Psr\\Http\\Message\\ResponseInterface;\n/\n * Thrown if an HTTP error occures\n */\nfinal class HttpException extends \\RuntimeException implements TransportException\n{\n    /\n     * @param ResponseInterface $response\n     \n     * @return self\n     /\n    public static function createFromResponse(ResponseInterface $response)\n    {\n        return new self('An HTTP error occurred: ' . $response->getReasonPhrase(), $response->getStatusCode());\n    }\n}\n```\nTransportException is just an empty interface\n. If you take a look at the spec code I pasted, you can see that the problem has nothing to do with the named static constructor.\nEven the initialization fails.\n. Ah, I see. Well, this hack solved the problem (for now). But I guess it is a bug then.\n. The full code can be found here: https://github.com/fxmlrpc/transport\nI tried it with master as well with no luck. Only extra information I could find is that code coverage is enabled in the config.\n. A new info: works fine on 5.5, the issue only occurred on 5.6. I am using phpbrew, just installed a fresh PHP 5.6.6 and the issue still occurs.\n. Is it possible to workaround the problem and call getWrappedObject from an extension? That way spec tests wouldn't need any change, only the configuration. Much cleaner and easier to remove.\n. Yeah, I only meant it as a temporary fix.\n. I know, but wanted to avoid it if possible.\n. It is fixed, thanks.\n. Well, \"large number of mocks\" means three or four PSR7 RequestInterface. We are testing parallel execution where the point is that there are multiple requests.\nThanks for the answers.\n. This happened to me as well: https://travis-ci.org/php-http/utils/jobs/97324669\n. A workaround:\n``` php\nclass SomeSpec\n{\n    use SomeBehavior {\n        SomeBehavior::it_does_something as DoingSomethingExample;\n    }\n/**\n * @see https://github.com/phpspec/phpspec/issues/825\n */\nfunction it_does_something(Something $something)\n{\n    $this->DoingSomethingExample($stream);\n}\n\n}\n```\n. No, it's actually not working, but I don't get why.\n. Hm, it worked with one addition: you must remove the typehint from the method in the trait. You can add it back as soon as this is resolved.\n. Sorry, forgot to add that detail: I added the spec folder to dev autoloading in composer config.\n. Hm, is this resolved?\nhttps://github.com/moneyphp/money/pull/220\n. Anyone?\n. Thanks for your response. If you take a look at the linked PR, it seems to work.\n. Ah, thanks.\n. ",
    "ahilles107": ":+1: \n. Any news on that? \n. ",
    "wouterj": "It is indeed a problem on windows. Running this code:\nphp\nfor ($i = 0; $i < 50; $i++) {\n    echo \"\\033[$i;43;1mHello{$i}\\033[0m\";\n}\nResults in:\n\nSo the foreground color cannot be set to black when using yellow as background using Ansicon on Windows.\n. Just did some more tests: The foreground color can never set to black using Windows.\nBtw, this also results in the line nummers being unreadable.\n. oups, sorry. I haven't seen that one (I thought I searched all isues for PSR-4, maybe GitHub search is bad...)\n. ",
    "crissi": "This is really annoying, could be nice if a fix for this will be made soon.\n. ",
    "FireCoding": "Can we try another color like dark blue or bright white or... anything else?  This kills my phpspec goose-bumps.\n. WORKAROUND for Windows users: using console.exe  you can setup color mappings.  Map the dull yellow to a more vivid yellow and it's totally readable.  Goosebumps restored.\n. Instead of #808000 (dull yellow) I have substituted with #FFFF00 (bright yellow).\n. ",
    "danrspencer": "Where would the correct place to test this be if not in the spec for this class? Setting up the class in a way that makes the result of the closure testable somewhere would be messy with any of the implementations I can think of.\nKeeping with the above example my standard way of testing (e.g. PHPUnit) this would be to use the mock to call the closure and assert that the result of the closure is correct. \nE.g.\n```\nfunction it_correctly_sets_up_the_closure(\\App $app, \\Db $db)\n{\n    $app->get('/path/', Argument::type('\\Closure'))->will(function($args) \n    { \n        $closureResult = $args1;\n    // Can't do this :(\n    $this->assertEquals(##expectedValue##, $closureResult); \n});\n\n$this->setup();\n\n}\n```\n. I'd be interested to know why you feel this falls into the integration rather than unit testing category (side note, we do use PHPUnit for our integration tests). I'm not testing anything external to the class; the spec can be ran against the class in isolation to anything else. I'm only testing the functionality of the class in response to a simulated callback.\nThis is the same approach to I use to test Node.js applications (callbacks everywhere!) and while it is a little fiddly I'm not convinced that defining a separate type for callbacks would improve things. Using the more extreme example of a Node.js application which can be littered with callbacks I think things would quickly get out of hand defining a new type for every closure. [Not that I'm entirely happy with the approach; I do keep looking for another way - I just haven't found one I feel is better yet]\n. My thinking has always been more along the lines that a closure is a psudo-public method that can only be called by whatever it's been registered to, but that it's logic belongs to the class that registered it. \nHowever I'll try out the approach of splitting out the callback logic into another class(es) and see how things go.\nThanks for the feedback everyone.\n. ",
    "bburnichon": "The isEqualsTo() method needs mocking. Not all the As are mergeable, only the ones that are Equals. There is no way to check this here.\nI would need to declare an abstract super class without definition of isEqualsTo().\nI actually thought about this method before but wanted to avoid too much inheritance.\n. @ciaranmcnulty I know this is not the best approach, but I wanted to allow users of my class to have a default mergeability for value objects. I'll do something else then:\n``` php\ninterface A\n{\n    public function isEqualTo(A $a);\n    public function isMergeable(A $a);\n}\nabstract class AbstractA implements A\n{\n   public function isMergeable(A $a)\n   {\n        if ($this === $a) {\n            return false;\n        }\n    return $this->isEqualsTo($a);\n\n}\n}\nclass ConcreteA extends AbstractA\n{\n    public function isEqualTo(A $a)\n    {\n        return $this === $a;\n    }\n}\nclass ValueObjectA extends AbstractA\n{\n    public function isEqualsTo(A $a)\n    {\n        return A instanceof self;\n    }\n}\n```\n. ",
    "babarinde": "@ciaranmcnulty \nMy Apologies, cant recreate the issue. I guess I made a mistake when i noted it.\nIt look like it works as it should\nthanks\n. ",
    "teklakct": "Hi, \nI have the same issue. \nFor me comment this line \nprotected function executeExample(SpecificationInterface $context, ExampleNode $example)\n{\n...\n        try {\n            $reflection->invokeArgs($context, $collaborators->getArgumentsFor($reflection));\n        } catch (\\Exception $e) {\n//            $this->runMaintainersTeardown($maintainers, $example, $context, $matchers, $collaborators);\n            throw $e;\n        ...\n    }\nin file: spec/PhpSpec/Runner/ExampleRunnerSpec.php doesn't broke any spec.\nI don't know how to figure out it at this moment.\n. Gratulacje !!! i wielkie dzi\u0119ki\nW dniu 05.02.2014 o 08:30 Leszek Prabucki notifications@github.com pisze:\n\nFixed in #276\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nPozdrawiam,\nPawe\u0142 Tekli\u0144ski\nmail: pawel@sixpoints.pl\nmobile: +48 511 008 448\nweb: www.sixpoints.pl\n. ",
    "nickpeirson": "Looks like a big improvement on what I quickly hacked together.\nI tend to use SimpleXMLElement to build XML as I find it easier to read and better with regard to validation. This is much more important when writing services that deal with XML rather than test case output formatters, so I don't have a strong argument for it in this case.\nThe only thing that might be worth tidying up is more stringent conversion specifications to sprintf, taking advantage of %c and %d where appropriate. Again, probably not a big concern as PHPSpec is expected to return the correct types, but my preference is to code defensively.\n. I'm pretty new to the phpspec codebase, but a search hasn't turned up a beforeExercise event, and I can't see it referenced in any other formatters?\nCan you point me in the right direction?\n. The Junit output expects the number of assertions per testcase element, however I couldn't see an easy way to retrieve this. I left it in as a place holder for someone more knowledgeable in phpspec than me could fix it without necessarily having knowledge of the junit format.\n. I can clear up all the assertion stuff and just hardcode it to zero in the XML if that's preferred? As it currently stands, it would just take fixing the assertions = 0; line for the assertions to be populated fully.\nHappy to do either way, just left it in as I thought it would be useful if someone else provided a way to fix that line.\n. ",
    "alphamarket": "Hey @ciaranmcnulty \nI was hopping that you would inject those bash files into your project as some setup files! otherwise i am already using those scripts on my system, i don't really need to do so!!\nGood Luck\n. ",
    "chobie": "added test case and help info.\nbtw, I haven't used behat before. could you tell me if you find something wrong?\n. Sorry for trivial things.\nRecently I haven't wrote much PHP so I should learn it :dizzy_face:\n. @ciaranmcnulty how about this? \nI'd like to switch to feature request If this PR lacks something. \nI'm not good at BDD thought and don't have that experience. so I think feature request would be better.\n. There are legacy PHP projects in the world. for example, not using composer, not using PSR naming rules.\nI want to improve our development styles with phpspec but we need bootstrap or something like that feature as above reason. I'm not stick bootstrap option. config file also sounds good.\n. I'm not sure. I googled and found this. https://github.com/phpspec/phpspec/issues/34\n. I don't think I'm particular about that name. Whatever you take :)\n. oh, I've simply misunderstood that meaning. fixed now.\n. all right. removed it\n. Okay, throws InvalidArgumentException when specified file does not find.\nfor now, it only checks file existence. \n. okay, I've added developer_runs_specs_with_bootstrap.feature.\nI'm not good at english, so if you find some wrong words, please tell me correct one.\n. fixed it\n. ",
    "cxj": "As @chobie wrote back in March, this feature would allow easier usage of PHPSpec with non-Composer projects.  This is something I want to do, and I think perhaps there would be many others as well.  What needs to be done to get this feature completed and merged?\n. I'm unit testing the methods of a class which starts and stops processes using things like proc_open(), etc.  In the above snippet, I'm using PHP's server mode as a mock for the real process.  PHPSpec has helped me develop this class.  But hard coding my process bugs the heck out of me.  I can also imagine a situation where a different mock process will be needed to fully unit test a method, so I will have to change the hard-coded process name (or pass the desired parameter, if such a feature were available).\n. It is definitely a unit test, not integration.  But clearly PHPSpec has some limitations, and this is probably one of them.\n. Tell me how one would unit test a public class method which calls proc_open() without running a real process.  If a real process is not run, proc_open() will always fail, which means code expecting success will never be tested.  Likewise, all the other methods in the class which expect a real process to be running in order to check status, read, write and terminate that process will fail, and will likewise fail to unit test their respective sections of code.  Sometimes one cannot continue to abstract and mock indefinitely; one really does have to use the real commands.  So how does one unit test such code?\n. No it does not.  \nI've since tried a few more variations.  It seems the problems occur when the source directory \"src\" for my classes under test is not a direct subdirectory of the base directory in which PHPSpec is installed.  Attempting to customize paths with phpspec.yml doesn't seem to solve it.\n. Ah, the light dawns!  So apparently the standard install has the default ./src and ./spec directories already built into the autoloader, and I've gone and broken out of the corral.  ;-)\nThanks for the suggestions and the mention of #284.\n. Thank you for the help!\n. ",
    "cursedcoder": "I have the following test where it's probably not bad practice.\nClass UrlCollection where consturctor has baseUrl parameter, so it's impossible to add any links which contain different base url.\nAnd such specs looked pretty good there.\n``` php\n<?php\n    function it_adds_only_unique_urls()\n    {\n        $this->beConstructedWith('http://google.com');\n        $this->addUrl('/');\n        $this->addUrl('http://google.com');\n        $this->addUrl('http://google.com/');\n        $this->addUrl('http://www.google.com');\n        $this->addUrl('http://www.google.com/');\n    $this->getInternalUrls()->count()->shouldBe(1);\n\n    $this->beConstructedWith('http://bing.com/');\n    $this->addUrl('#one');\n    $this->addUrl('#two');\n    $this->addUrl('#three');\n    $this->addUrl('#four');\n\n    $this->addUrl('http://bing.com/NeWs');\n    $this->addUrl('http://bing.com/news');\n\n    $this->getInternalUrls()->count()->shouldBe(2);\n}\n\n```\n. @ciaranmcnulty they are different in some cases but also same because behaviour of spec works for both.\n. Anyway that's not the reason of such BC.\nI would like to have proper error message on second construct or an exception.\n. ",
    "thewilkybarkid": "\".yml.dist is correct for 2.0\"\nThat's what this PR is setting it back to...\n. Thanks @whatthejeff for reading. :wink: \n. ",
    "jon-acker": "hi @stof - I had a crack at this yesterday, and made a PR - would value your opinion.\n. sorry, should have mentioned: replaced by https://github.com/phpspec/phpspec/pull/305\n. yes - all a question of having some spare time :)\n. closing in favour of https://github.com/phpspec/phpspec/pull/316\n. What does HHVM fail on? I'm just running using php 5.4.15.\nI had a feeling there's something I didn't cover with ArrayAccess. I'll have to add a scenario.\nI will try to do a spec with an iterator to see how it works.\nAnd yes, keys are not wrapped/unwrapped because foreach complains that the key doesn't have the right type - so I guess it can't be done for keys.\n. closing this as the consensus seems to be that this is not desirable behaviour.\n. Can I ask why need to do \"if (!$commandHandler instanceof CommandHandler)\"  if you already have a type-hint in the method signature?\n. Hi, yes occurred to me later what you're after. I think what you want is something like this:\nfunction it_throws_exception_on_bad_command() {\n    $this->shouldThrow(new Exception('Invalid command'))->duringRegister($commandHandler);\n}\nI.e. You're checking that your method throws the correct exception.\nI wouldn't expect register() to return anything significant, and would therefore not bother checking the return value, that is not behaviour you want to test.\n. @smoya - what the register() method returns is irrelevant, the behaviour you want to confirm is that the method throws an exception under said condition.\n. If you have a register() method, I presume it will be registering the command in some kind of registry. You should be testing that the command is indeed registered with the registry, not whether register() returns null. The correct behaviour of register() is that it does not throw an error when registering a valid command, not that it returns null.\n. As you saw, the argument that is passed to register is a wrapped object, therefore you cannot use is_callable on it. \nMoreover, I don't believe you should be passing in two completely different types into the the same method (command or handler).\n. I tend to agree with @jakzal on this, if the idea is basically to help new learners identify the different parts of the test/spec (AAA).\n. @sagikazarmark I've tried to recreate your error, with the same spec and class (with the exception that I was not using ResponseInterface) and I could not recreate the error:\nphp\nfinal class SomeExtendedClass extends \\RuntimeException implements SomeInterface\n{\n    public static function createFromResponse($response)\n    {\n        return new self('An HTTP error occurred');\n    }\n}\n``` php\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass SomeExtendedClassSpec extends ObjectBehavior\n{\n    function let()\n    {\n        $this->beConstructedWith('Message', 0);\n    }\nfunction it_is_initializable()\n{\n    $this->shouldHaveType('PhpSpec\\SomeExtendedClass');\n}\n\n}\n```\nI'm on latest master .\n. Dropping php 5.3.x in version 3.0.0 sounds like a sensible idea. I'm sure there's a hell of a lot of code that uses the older array() notation.\n. I've long wanted PhpSpec to behave like this actually :) \nI wonder if it can be done in a way that doesn't break BC, (i.e the old way will continue to work, for a while at least)\n. Aha! Good to know @mike182uk - I had no idea that extension existed or that it will be in 2.4 :)\n. Interesting idea. AFAIK nothing like that in pipeline.\nThe problem is - how would you differentiate this use case from beConstructedThrough [some => array hash]\n. If you want to trigger the instantiation of your class, you can call $this->getWrappedObject(), this will force instantiation, but I would like to know what your use-case is apart from be able to test an throwing an exception inside the constructor, for which you can do this:\n``` php\nnamespace spec;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass TestObjectSpec extends ObjectBehavior\n{\n    function it_throws_an_exception_during_construction()\n    {\n        $this->shouldThrow(new \\Exception(\"I don't want to exist.\"))->duringInstantiation()\n    }\n}\n```\n. Against HHVM the example appears to fail with this:\n```\nAnd the class file \"src/Message/Fatal/Fatal2.php\" contains:                                       # FilesystemContext::theClassOrTraitFileContains()\n      \"\"\"\n      <?php\n  namespace Message\\Fatal;\n\n  class Fatal2\n  {\n      public function __construct($param)\n      {\n          if ($param == 'throw') {\n              throw new \\Exception();\n          }\n      }\n  }\n\n  \"\"\"\nWhen I run phpspec with the \"junit\" formatter                                                     # IsolatedProcessContext::iRunPhpspecWithThe()\nThen I should see \"Call to undefined function\"                                                    # IsolatedProcessContext::iShouldSee()\n  Did not expect <value>false</value>, but got one. (PhpSpec\\Exception\\Example\\FailureException)\n\n```\n. Is the users name never accessed? Often you'd have something like a __toString() method on the User class, in which case you could have partially matched the two $user objects using\nphp\n$userRepository->add(Argument::which('__toString', $name)->shouldBeCalled();\nSince you basically want to confirm that add() was called with a User with a specific name. \nAs you pointed out, since the UUID is generated on construction, there's no point in matching the two $user objects completely. If you just want to check that an object of the same type was passed, you could match using Argument::type('User')\nI believe it should be possible to use a combination of the custom matcher Argument::that(callback) with Reflection to check that the passed argument matches certain criteria though I've not tried this.\n. Here's an example of how you can use Prophecy matchers to do this, if you really need to, and you don't want to expose the any of the user object publicly:\n``` php\n    function it_calls_add_with_user(\\TestInterface $testInterface)\n    {\n        $user = User::named('jon');\n    $testInterface->add(Argument::that(function($arg) use ($user) {\n        return $this->usersMatchOnName($arg, $user);\n    }))->shouldBeCalled();\n\n    $this->test();\n}\n\nprivate function usersMatchOnName($user1, $user2)\n{\n    $nameProperty = (new \\ReflectionClass(User::class))->getProperty('name');\n    $nameProperty->setAccessible(true);\n    return $nameProperty->getValue($user1) === $nameProperty->getValue($user2);\n}\n\n``\n. its a good idea to show the spec file name, but IMO you don't need to show the absolute path, why not shorten it to path relative to the spec/ root?\n. IMO, the example it_is_initializable() is very useful for newcomers, it makes it clear immediately how to write a spec, so even though I automatically delete this example I can see its value in the context of helping people to learn. I would leave it _and_ in addition including a new function it_() {} underneath it, that way you can have the best of both worlds: and example of an example _plus_ atodo` spec.\n. It could definitely enhance the workflow, and value objects sometimes contain something non-trivial that's worth testing.\nIn addition, if phpspec's philosophy is to offer to describe a class that doesn't exist, this behaviour fits in.\nI'm wondering if this would apply to any unresolved class it might come across in the spec, and if not, how would you decide which ones phpspec should offer to describe. But since the tool asks the user before hand, they have the option of declining.\n. disappeared after reinstalled :)\n. are you ok with all the examples having a totally unrelated spec name?\n. I was intending to pass a Caller object here, but I found I had a problem using Prophecy with a Caller object (doing $caller->getWrappedObject()->willReturn('something') didn't work because method willReturn() was \"not found\" - is this a problem unique to the Caller object? this is why I ended up passing the object itself to the  TraversableSubject's constructor, because I couldn't mock the Caller).\n. Yes, I know that would be the correct way, but due to the limitation of not being able to change the constructor of SubjectWithArrayAccess, this was the only way it to add the behavior without making structural changes - a Trait would probably work well here. \n. @ciaranmcnulty - I think that this scenario should probably be removed from this feature as it's not to do with matching shouldThrow.\n. then perhaps I should move this one back into the feature file I deleted ...\n. example's condition called \"if any child\", but you only have an example with child 1.\n. missing example when first supported child is 2nd runner?\n. Is this assignment necessary, (i.e. return directly)?\n. missing space before and after / operator\n. spec?\n. but its logic. and the rest of this class seems to have specs.\n. Since you're pluralising type(s) why not was/were ?\n. could you put this regex in a constant somewhere then?\n. would it make more sense, instead of having this exception called functionShouldBeRead() to introduce a new state e.g. STATE_READING_EXAMPLE which gets ignored? that way it would be clear that this exception is about typehints in spec examples.\n. do -> does\nbesides - isn't this example about not removing typehints for methods defined within inline class definitions specifically?\n. ",
    "dizzley": "I may contribute a fix to this for your consideration.\n. Mmm. The behaviour is not as I expected in the current version (RC4). I think I should understand the real issue before wading in to the code.\nI'm going to close this and reopen a simpler more accurate Issue. - I still look forward to helping though.\n. I got to this point trying to understand the available options. Now you explain things I understand better. As a new user I tend to learn options and command structure by viewing the usage command. This shows --format doesn't exist. There are ways of explaining valid commands and options in the usage output. I appreciate the lean approach and I'm not knocking the software I'm basing this on my user experience.  I had made a bash alias including --format=dot and wondered why phpspec rejected my attempts and the usage message comes from 2 parts of the program and appears to say that --format wasn't available. With respect, you guys arent going to see things through a new user's eyes.\nEdit: .By 2 parts I mean you get different usage instructions depending on if you type 'phpspec' or 'phpspec --help'.\n. No offence meant. I'll expand on it when I'm not at the day job. Thanks for the time. Agreed: that would be a healthy way of putting things.\n. Damn my fat fingers. I closed this by mistake on my tablet. In any case, I don't want to waste anyone's time on this.\nWhen I get a chance I could reopen it with a proper illustration as gquemener said. Also, I'm just trying to help but I'm coming across a bit rude. So sorry if anyone felt that.  At the moment I don't have a dev computer to hand...\n. ",
    "jonphipps": "Taylor Otwell has a post on his blog that you might find useful: Response: Don't use facades. In that post he also points to a Facade class reference in the Laravel docs. \n. ",
    "JeffreyWay": "I think his confusion is that he can do a form of functional testing for his controllers with PHPUnit, but he's having trouble doing the same with PHPSpec - because it wasn't built for that style of testing.\nSo if you're trying to do something like - \"When I hit this route, then I should mock that repository method, and then the view should receive some key\" - well, that's not what PHPSpec is for.\nUse PHPSpec to unit test your domain logic, and then Behat (or Codeception, if you prefer) for your outside-in tests (including controller stuff). \nI'd imagine this can be hard for some people who primarily build CRUD-style apps. In these cases, your thought might lean toward \"Then what the heck am I supposed to unit test?\" This will change, though, as you work on larger apps that have more business requirements.\n. Yeah - different style of testing in that article you linked to.\nPHPSpec nudges (or forces) you to mock everything. Facades make this very difficult, which is why it's good to not use them outside of your HTTP layer. Instead, inject their underlying classes through your constructor. We can now do that in Laravel quite easily. See Taylor's video on it.\nSo, the fact that PHPSpec is squawking is a good thing. It's encouraging better code/design habits.\nIf you want to test a UserValidator, just make sure that you inject any dependencies. That way, you can easily mock them, when you test the class.\n. ",
    "ericjeker": "I know this conversation is pretty old but here's a sample code I used to test a form validator. \n```\n<?php\nnamespace spec\\Core\\Validators;\nuse Illuminate\\Support\\MessageBag;\nuse Illuminate\\Validation\\Factory;\nuse Illuminate\\Validation\\Validator;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass FormValidatorSpec extends ObjectBehavior\n{\n    function let(Factory $factory)\n    {\n        $this->beConstructedWith($factory);\n    }\nfunction it_is_initializable()\n{\n    $this->shouldHaveType('Core\\Validators\\FormValidator');\n}\n\nfunction it_passes_data_and_rules_to_validator(Factory $factory, Validator $validator, MessageBag $messageBag) {\n    $validator->passes()->willReturn(true);\n    $factory->make(Argument::any(), Argument::any())->willReturn($validator);\n    $this->passes()->shouldReturn(true);\n\n    $data = array('field' => 'data');\n    $factory->make($data, Argument::any())->willReturn($validator);\n    $this->with($data)->passes()->shouldReturn(true);\n\n    $validator->passes()->willReturn(false);\n    $validator->messages()->willReturn($messageBag);\n    $this->shouldThrow('Core\\Exceptions\\FormValidationException')->during('passes');\n}\n\n}\n```\nAnd that's pretty much all I am able to test (and should be testing) using PHPSpec because as soon as I want to test the \"real\" behavior of the, let's say, UserFormValidator, then I won't be unit testing anymore but I will be testing with collaborators (Validator, Factory, MessageBag, etc...) so those are integration tests.\nIf I understand well the philosophy, I expect the Validator and Factory to be unit tested on their own and so I should only ensure that the data and rules set in my FormValidator class are correctly passed to the Laravel's validator object because, as a matter of fact, that the only behavior of my FormValidator: to pass data and rules to Illuminate/Validation/Validator and to intercept and transform the answer of that class.\n. ",
    "shrikeh": "Also, PR 300!\n. When you say handled specifically, can you describe the consequences if it is a symlink, please? If it simply fails to delete it then I think this is a step forwards. If it is more serious than that, then I understand the need for further discussion.\n. \n. If he had an RTD account, I already would have...\u2014\nSent from Mailbox\nOn Mon, Aug 18, 2014 at 5:27 PM, Christophe Coevoet\nnotifications@github.com wrote:\n\n\nwill probably give access to anyone else appropriate if asked\nwell, he should probably give access to @MarcelloDuarte as well (I don't care personnally as the doc is build automatically on merge anyway, and the project config can be done by the few of you maintaining the website anyway)\nReply to this email directly or view it on GitHub:\nhttps://github.com/phpspec/phpspec/issues/448#issuecomment-52517212\n. Document markers in YAML are important and often overlooked; they are explicit calls that the document begins and ends. For someone who uses YAML all the time, when I see YAML docs without them, it's the same as I'm sure when @stof sees foo = new stdClass; - yes, you don't need the brackets after the class name to instantiate the class, because the PHP parser lets you get away with it.\n\n\nSingle quotes are simply the same as per PHP; if something is only a string, it should be wrapped in single quotes to ensure it does not ever evaluate.\n. shrugs\n. The general Unix convention of hidden dotfiles has been implemented by Travis CI and Scrutinizer, however within the PHP community this hasn't been as widely adopted (phpcs.xml, phpunit.xml, behat.yml, etc). However, having .gitattributes rules that allow a global .* export-ignore simplify excluding this and other files.\nIt's a matter of preference, but the rule of thumb would be to have non-prod files as dotfiles where possible (which of course your tests hopefully aren't being deployed to live).. Ah well Linus Torvalds did say in his 1976 blog post Why phpspec, Why Do You Hate Us So that \"it would only have taken the designers of this YAML file a few minutes to Google and solve this problem. One day a messiah will come and make this config file go from my console\".. I see the point, but it is still the most portable solution to use the constant. Is there any documentation to support that with 5.3 we should move away from using the built-in constant?\n. Aren't we kind of doing string manipulation here? After all, this is sprintf() and building a path.\n. As my fellow Inviqans are trolling me on Twitter rather than telling me I'm right, I changed it half an hour ago mate.\n. @ciaranmcnulty?\n. What's the goal here? The default image locks to master already. \n. ",
    "mathiasverraes": "Go for it\n. > people aren't ready for it yet!\nThey never will be if we treat them as such :-)\nIn any case, this fits the philosophy of TDD perfectly. The only reason you would have parent classes, is because you extracted them from the classes that make up your public interface, after a one or more red/green cycles.\n. +1 on private constructors. It's easier to open up api's if you need to, than closing them after the code was released.\n. +1 on new User (as opposed to new self): it's more explicit, reduces cognitive load, that sort of thing. If the self keyword didn't exist, nobody would even be bothered by it.\n. In my experience, 1. is usually easiest.\nOn 3 September 2014 18:51, Jason Murphy notifications@github.com wrote:\n\n@MarcelloDuarte https://github.com/MarcelloDuarte @ciaranmcnulty\nhttps://github.com/ciaranmcnulty what about when there is no\nconstructor yet\nso given a class\nclass User\n{\n}\nand a spec file\nclass UserSpec extends ObjectBehavior\n{\n    function it_registers_a_user()\n    {\n        $this->beConstructedThrough('register', array('firstname', 'lastname'));\n        $this->getFirstname()->shouldBe('firstname');\n    }\n}\nwhat should it be, 1 or 2?\n1.\nclass User\n{\n```\npublic static function register($argument1, $argument2)\n{\n    $user = new User();\n// TODO: write logic here\n\nreturn $user;\n\n}\n```\n}\n2.\nclass User\n{\n```\npublic static function register($argument1, $argument2)\n{\n    $user = new User($argument1, $argument2);\n// TODO: write logic here\n\nreturn $user;\n\n}\n```\n}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/417#issuecomment-54327996.\n\n\nMathias Verraes\nmathias@verraes.net\nhttp://verraes.net\n@mathiasverraes http://twitter.com/mathiasverraes\n. - +1 on final (obviously)\n- +1 on default, not configurable. \nPhpSpec pushes people to better design. The question whether users will like it or not, is not part of the discussion on design. It is a marketing and documentation problem (which is often the same thing in OSS).  Just be prepared to explain the reasoning behind it over and over. I know I have :-)\n. ",
    "Ocramius": "If there is a need for inheritance, it can be discussed and changed (if backed by strong reasoning) later on.\nAdditionally, as long as there is an interface for those final implementations, this is a non-issue.\nDo it!\n. FYI, the 5.6 situation is still not clear in internals. As for semver, I'm quite serious about stability of this component.\n. The php internals bug is exactly what is being discussed in internals\nafaik. As for the code, is there anything specific that I should look at?\nOn 25 Jun 2014 11:40, \"Christophe Coevoet\" notifications@github.com wrote:\n\n@Ocramius https://github.com/Ocramius The existing code in PhpSpec has\nsome more logic when building the serialized string. Maybe it could help\nfor Instantiator as well ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/377#issuecomment-47080450.\n. @stof I actually removed all that logic in https://github.com/Ocramius/Instantiator/commit/dcba7c6e16e2599faa0462d2d399ab3bbba060ff - what is the specific use-case here?\n. @whatthejeff too fast :-)\n. Not sure if I follow: how is phropecy related in object instantiation?\n\nAs for the internal classes, I could always extend them and remove the constructor (at runtime), but it is scary dangerous/hacky (because of the amazing php engine and its amazing segfaults)\n. There's still no clear resolution path from internals about PHP 5.6 :\\\nMarco Pivetta\nhttp://twitter.com/Ocramius\nhttp://ocramius.github.com/\nOn Wed, Jul 16, 2014 at 2:13 PM, Sebastiaan Stok notifications@github.com\nwrote:\n\nAny news on this?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/377#issuecomment-49156533.\n. FYI, I provided some fixes that give us compatibility when working with 5.5.14 and 5.4.30.\n\n5.6.0-rc* is still unclear and depends on php/php-src#733, but if that's merged, then instantiator/instantiator:1.1.* can be used here.\n. Travis is still on 5.6.0-RC2 IIRC, so it won't pass until it's upgraded to RC3 or later.\n. > making things protected and public instead of private\nThat's why most of the classes in ZF2 are doomed. It's a mess, don't do that, ever :-(\n. yw \\o/\n. Ref: doctrine/instantiator#20\n. @umpirsky this fixes a symptom, not the cause. And it breaks PSR-2 compat on empty classes.\n. Indeed, that would be the correct fix.\n. Computering is hard: deal with it.\n. @cordoval no, I'm moving to PHP-Parser for everything and getting rid of any string operations\n. Probably, since it removes all the \"pretty printing\" problems. I'm still playing around with it though, since the API is still a bit raw\n. Import this class, plus it should probably be cached locally (private property)\n. Ah, right. Then the FQCN is fine.\n. @whatthejeff if performance is not a problem here, then it's fine. It can also be left out and handled later instead.\n. The instantiator already caches internally, so it's pretty ok.\n. Disallowing 1.0.0 is indeed wanted here, because of this stupid mistake\n. If people need the exact version, there are things like ocramius/package-versions instead\n. I hope you don't have to change this at each release :-P\n. ",
    "Taluu": "I'm not sure this is the right way to do it ; the ExampleRunner should return whatever the result is (skipped if the test was skipped, passed if it passes...).\nI think it would be better to do that on the console application level\n. Why bother with a mock when you can create your own closure ?\n. IRC, it sets the error level threshold, but it doesn't help if you want to test that the error is triggered (and which message / line / ... triggers it). Or I may have misunderstood something, which is quite possible...\nIRC The errors should be transformed as exceptions on the ErrorMaintainer, but I couldn't manage to have the result I wanted to have (I tried a $this->throwException(ErrorException::class)->duringInstanciation() but to no avail). Once again, I may have done something wrong.\nIf I am running the spec, the deprecated error is triggered (I even tried to do a simple try { } catch (ErrorException $e) { } but couldn't catch it ?). But now that I'm thinkg about it, I'll need to run some other tests though, as I may have screwed up with the first tests.\nI'll keep you informed. But I still think it would be a nice to have. :}\n. > If I am running the spec, the deprecated error is triggered (I even tried to do a simple try { } catch (ErrorException $e) { } but couldn't catch it ?). But now that I'm thinking about it, I'll need to run some other tests though, as I may have screwed up with the first tests.\nNope, I'm confirming, tried the following :\n```\n<?php\n//snippet\n$this->beConstructedWith($a, $b, $c);\n$this->shouldThrow(ErrorException::class)->duringInstanciation();\n```\nAnd the error was still triggered, breaking said spec with a deprecated error message.\n```\nTolerance/Operation/Runner/RetryOperationRunner\n  28  - it should trigger deprecation error on exception voter\n      16384: Tolerance\\Operation\\ExceptionCatcher\\ExceptionCatcherVoter is deprecated, you should implement\n      Tolerance\\Operation\\ExceptionCatcher\\ThrowableCatcherVoter instead in\n      /home/talus/dev/Tolerance/src/Tolerance/Operation/Runner/RetryOperationRunner.php line 52\n                   80%                             20%      5\n\n1 specs\n5 examples (4 passed, 1 broken)\n117ms\n```\nAnd it does the same thing with an unrelated exception such as a RuntimeException (Which is not in the parents of the ErrorException)\n. .... Okay, now it works.\nThen, how about adding said $this->shouldTrigger($level, $message) as a helper ?\n. Note ; if the constructor does not trigger such an error, we have the correct behavior with phpspec asking if it should create the method.\n. Seems so. I'll try to add some breakpoints and see if it is executed or not.\n. After some tests, it seems this block is never reached if there is an exception during the construction (as the triggered error is transformed into a ErrorException afterwards). It is reached if nothing is thrown in the constructor, and then ask if it should create the method as it doesn't exist.\n. Shouldn't be, as as i am not stopping it. And in my uss case too it\nshouldn't be stopping either, just verifying that this error has been\ntriggered\nOn Jun 20, 2016 08:39, \"Ciaran McNulty\" notifications@github.com wrote:\n\nI've been thinking about your use case - this only really works for\nexecution-halting errors, right?\nIf we're talking about testing things like deprecation warnings, I'm not\nsure this will work out because execution inside the method being tested\nwill halt?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/960#issuecomment-227061348, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAOoRbtLTUU8PR_CpaE6Tj5iIfZrF289ks5qNjWwgaJpZM4I5SZW\n.\n. @ciaranmcnulty would it help if I added in the spec something that tells me \"catching the triggered error does not the execution\" ?\n\nI'll add behat tests if everything is alright (or should I drop this ?)\n. Added behat tests, and I had to add a unpackArgs method. Sorry for the delay :}\n/cc @ciaranmcnulty \n. I added some basic documentation and updated the PR with your comments.\n. Behat tests seems to fail, but then we would need to check if it run on the current appveyor config... Could you trigger a build from master or something ?. Just rebased and applied stof's feedback (removing the cache dependant on composer.json). I actually copied the throw feature file (while I removed things, such as the constructor tests), but I will remove some more then. :}\n. Removed and reworded the scenario. :}\n. ",
    "aitboudad": "https://github.com/phpspec/prophecy/issues/92\n. ",
    "petersuhm": "You should not instantiate Testable like that. $this represents your class under test, so that doesn't really make sense. Instead, you should use $this->beConstructedWith($p).\n. ",
    "firstrow": "Sorry, my mistake. Updated first comment.\nWith beConstructedWith($p) - gives the same result - \"\\Collaborator given\"\n. @jakzal - yes.\n. The problem was that i written: __construct(Processor $p), where Processor is a class. When change Processor to ProcessorInterface we are back to green.\nSo, the problem is in writing construct with SomeClass $c instead of SomeInterface $c\nIs this expected behavior?\n. ",
    "smoya": "i have the same problem. my code is something like that:\n```\ninterface CommandHandler \n{\n}\nclass FooCommandHandler implements CommandHandler\n{\n}\nclass Bus \n{\n    public function register(CommandHandler $commandHandler)\n    {\n        if (!$commandHandler instanceof CommandHandler) {\n            throw new \\Exception('Invalid CommandHandler');\n        }\n    }\n}\nclass BusSpec\n{\n    public function it_should_allow_to_register_command_handlers(CommandHandler $commandHandler)\n    {\n        $this->register($commandHandler)->shouldReturn(null);\n    }\n}\n```\nThe spec fails because the method register from Bus throws the exception because the param is not an instance of CommandHandler\nHow i should write this spec? I know that if i create a manual mock of the CommandHandler it will works but i think that is not the right way.\n. @jon-acker I need to test the spec that i wrote. This spec it right i think. Thanks for your collaboration but the issue is still existing.\n. The behaviour that i want to test is:\n\"When im calling register with a valid CommandHandler, the bus will not return any error\"\n. @jon-acker Ok. Let's try again. Check this code and note that i can need lazy objects using callables like this:\n```\ninterface CommandHandler \n{\n}\nclass FooCommandHandler implements CommandHandler\n{\n}\nclass Bus \n{\n    public function register($callableOrHandler)\n    {\n        if (is_callable($callableOrHandler)) {\n            $callableOrHandler = $callableOrHandler->__invoke();\n        }\n    if (!$callableOrHandler instanceof CommandHandler) {\n        throw new \\Exception('Invalid CommandHandler');\n    }\n\n    return true;\n}\n\n}\nclass BusSpec\n{\n    public function it_should_allow_to_register_command_handlers(CommandHandler $commandHandler)\n    {\n        $this->register($commandHandler)->shouldReturn(true);\n    }\n}\n```\n. ",
    "sp-felix-carmona": "I have the same problem as @smoya \n. :+1: I have the same problem\n. You could want to do different behaviors depending of the implementation strategy, or something else, instanceof is a supported function by php, so must be supported in phpspec too\nRegards\n. ",
    "xel1045": "Right now, the spec file is not going to be located in the right location. I'm working on a new version with this, but PSR-0 does not easily allow to retrieve the classname from the file path. We need to parse and extract the namespace from the file content, then we can build the right path.\nI got it working, but it still needs refactoring and testing.\n. Ok, I'll try to fix the history as soon as I can, but I'm very busy right now and I just changed my computer so my tools are not all installed. Sorry for the delay it might occur.\n. ",
    "kbsali": ":+1: for this new --output parameter!\n. ",
    "krymen": "Is there any progress on that? Futhermore it would be great to have a possibility to set many formatters just like in Behat.\n. This behaviour is missleading imho. Each test should work on an instance of a class. $this in a test method indicates an instance not a class.\n. ",
    "th3n3rd": "Or just escape with double backslash (like we do in a composer.json file) without surrounding it like\nspec describe Abb\\\\Component\n. ",
    "mikeerickson": "Determining a standard may be difficult :). I have always used boolean personally \n. My issue seems that it works intermittently. In one application it works as expected, but performing same approach in another application, the spec file is not executed. \nI have very very carefully checked the path name to spec file and it is definitely correct, but the spec is not executed. \nDo the settings in the phpspec.yml have any affect on execution when providing a path. \nI can supply screenshots of file structure and the exact call I am using and it will be clear I am doing it correctly but it is not executing. \n. ",
    "whisller": "@cordoval uh ;) Not sure if there is a conclusion. But I personally prefer to have boolean (small letters). \nSo if we agree on something I'm happy to standardize it in phpspec. \n. Wrong branch.\n. Wrong branch.\n. Wrong branch.\n. Yeah true, let me close this PR and will prepare new one. Phpstorm messed up with it.\n. What's a point of this?\n. I'm not a fan of any that kind of headers which gives no value for library. So I would rather vote to remove them.\n. ",
    "davividal": "@stof Taking from the RSpec example: with $100 into your bank account, it should allow a $100 withdraw (spec 1) and deny a $101 (spec 2).\nIt complies with the principle '1 assertion per test' and allows for better organized specs.\n. Why should I create a class for a spec?\nWhy not define a DSL like RSpec?\nThat spec would do some meta-programming magic. I honestly don't know about PHP meta-programming capabilities, but I think that it would be the best approach.\n. A really fast google search: https://gist.github.com/ziadoz/3126866\nAnd on how to dynamically create classes, one possible solution: http://stackoverflow.com/a/15579465\n. Matchers were the biggest accomplish by RSpec. By now you can see that my background is RSpec/Ruby.\nThe main advantage about RSpec (the newer versions, that is) is that you don't have methods polluting the global namespace anymore. You have a much cleaner syntax:\nruby\nit \"should be equal\" do\n  assert(1).to be_eq(1)\nend\nThat could be roughly translated to:\nphp\nit(\n    'should be equal',\n    function() {\n        assert(1).to(new BeEq(1));\n    }\n)\nOr something like that. assert#to then can take $this->value and be something like:\nphp\npublic function to(Matcher $matcher)\n{\n    return $matcher->match($this->value);\n}\nAnd so on.\n. @whatthejeff the problem with phpspec2-expect (looking at the examples) is that is pretty hard to extend it. The RSpec approach with Class Matchers doing the hard work and the test framework just providing an interface for the matchers to talk looks easier to me.\nThat being said, dspec looks the way to go.\n\"Why don't you use something else?\" - because phpspec's code looks way more mature. And its name is better. :)\nEDIT: I would be very happy to help implement something like @tomphp suggestion.\n. @whatthejeff exactly what I thought.\nI was just making a record that I really want to use PHPSpec and I really want it to improve.\n. ",
    "tgr": "Could use anonymous classes these days:\nclass AccountSpec extends ObjectBehavior\n{\n    function context_S100() {\n        return [ \"with $100\", new class extends ObjectBehavior {\n            function it_allows_a_S100_withdrawal() {...}\n            function it_denies_a_S100_withdrawal() {...}\n        }];\n    }\n}\nor with generators:\n`\nclass AccountSpec extends ObjectBehavior\n{\n    function context() {\n        yield \"with $100\" => new class extends ObjectBehavior {\n            function it_allows_a_S100_withdrawal() {...}\n            function it_denies_a_S100_withdrawal() {...}\n        };\n    }\n}\nStill feels like a hack though.. ",
    "bweston92": "How can I check an exception gets thrown in the constructor? Use case, value objects that have assertions.\n. But the constructor is private with instantiation via static method?\n. I managed to do that yeah, but why isn't it required for the others? I love magic but this magic is hidden. Also this isn't documented anywhere.\n. ",
    "symm": ":+1: \n. ",
    "bfolliot": "\ud83d\udc4dI'd like to see this feature @damonjones\n. ",
    "laland": "Oh, i need this feature so much...\n. ",
    "hilobok": "Ok, thanks\n. ",
    "hxnk": "Added\n\"autoload-dev\": {\n        \"psr-0\": {\"\": \"spec\"}\n    }\nWorking like a charm now!\nThanks :)\n. ",
    "drgomesp": "@MarcelloDuarte don't you think that would be something good for the code?\n. @MarcelloDuarte fair enough. \n. @adamelso is this an open PR yet?\n. @whatthejeff what version should I use then?\n. @stof Is there a version here where this issue is already fixed?\n. Right, @stof. That's what I wanted to find out. Is @adamelso solution above enough for this or we need something else?\n. +1 on that. I might get into this later.\n. ",
    "kyleferguson": "Well the model and collection classes do actually exist and have those methods available to them, without arguments needed.  Actually the where method does require arguments but I just left them out here for simplicity sake. Should be the same concept though.\nAnd if in the let() method I change it to a method that doesnt exist like:\n$model->whereZZZ()->willReturn()\nthen I do get another error saying that method doesnt exist, because it doesn't on the class its mocking, but where() does exist. If that makes sense\n. Oh yea sorry I see what you mean, that was a slip up on my part here but they're present in the actual implementation. You mean like\nfunction let($model, $collection)\n. Its in a public repo I'll push it up and attach a link\n. https://github.com/kyleferguson/adaptable-laravel\nspec\n     app/tests/spec/Acme/Entities/User/DbUserRepository.php\nclass\n     app/Acme/Entities/User/DbUserRepository\n. 41 on DbUserRepository.php\nCall to a member function first() on a non-object in /Library/WebServer/Documents/Kyle/adaptable-laravel/app/Acme/Entities/User/DbUserRepository.php on line 41\n. The test that verifies whats returned is at line 86 of the spec\n. No I forgot to take those out.  I had tried recreating the whole thing inside the method to see if maybe there was something weird going on, then just forgot to remove those.  I just took them out and pushed the code.  Same results.\n. I appreciate you all looking at it :), my brain hurts haha\n. Yea same for me, recreated it in basic form and all is well, yet crash and burn still where I'm trying to use it.  I cant find what would be different, driving me nuts.\n. Whats even weirder is if I use the first() method inside the test like:\n$this->where()->first()->shouldHaveType()\nthen everything works.  so it's returning everything like it should, just not in the actual find method.  If I var dump what where() returns inside of find() it outputs NULL\n. Well there seemed to be a problem in the previous assertions as to whether or not the model was receiving certain calls or not.  I refactored a little bit, and rewrote those shouldBeCalled() tests.  While I'm still not 100% sure as to what exactly was causing the problem, it is all working now and thats enough for me to call it a night.  Thank you @damonjones and @ciaranmcnulty for taking a peek.\n. ",
    "grigoryosifov": "Many thanks for the quick response!\nIn my case this would not work:\nApp/Security/UserManager                            \n  28  ! it encrypts user password and erases credentials\n      method call:\n        Double\\Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory\\P4->getEncoder(App\\Entity\\User:0000000050a5f85c000000016f16d0bb)\n      was not expected.\n      Expected calls are:\n        - getEncoder(exact(Double\\stdClass\\P5:0000000050a5f85d000000016f16d0bb))\nIt seems that the only way to do this is to construct the EncoderFactory with this parameter:\nphp\n        $encoders['App\\Entity\\User'] = array (\n            'class' => 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder',\n            'arguments' => array(12),\n        );\nThis works:\n``` php\n<?php\nnamespace spec\\App\\Security;\nuse PhpSpec\\ObjectBehavior;\nuse Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory;\nuse App\\Entity\\User;\nclass UserManagerSpec extends ObjectBehavior\n{\n    function let()\n    {\n        $encoders['App\\Entity\\User'] = array (\n            'class' => 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder',\n            'arguments' => array(12),\n        );\n        $encoderFactory = new EncoderFactory($encoders);\n        $this->beConstructedWith($encoderFactory);\n    }\nfunction it_is_initializable()\n{\n    $this->shouldHaveType('App\\Security\\UserManager');\n}\n\nfunction it_encrypts_user_password_and_erases_credentials()\n{\n    $user = new User;\n    $user->setPlainPassword(\"123456\");\n    $this->updatePassword($user)->shouldVerifyPassword(\"123456\");\n    $this->updatePassword($user)->shouldReturn($user);\n}\n\npublic function getMatchers()\n{\n    return [\n        'verifyPassword' => function(User $subject, $password) {\n            return password_verify($password, $subject->getPassword());\n        },\n    ];\n}\n\n}\n```\nAnyway is there any better phpspec way to construct this EncoderFactory? And what is your overall experience of the code this time?\n. Got the idea.\nAlso tried again the code by @ciaranmcnulty and this time it worked. Obviously I have had a typo somewhere...\nSo this works:\n``` php\n<?php\nnamespace spec\\App\\Security;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass UserManagerSpec extends ObjectBehavior\n{\n    /*\n     * @param \\Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory $encoderFactory\n     * @param \\Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface $encoder\n     /\n    function let($encoderFactory, $encoder)\n    {\n        $this->beConstructedWith($encoderFactory);\n        $encoderFactory->getEncoder(Argument::any())->willReturn($encoder);\n    }\nfunction it_is_initializable()\n{\n    $this->shouldHaveType('App\\Security\\UserManager');\n}\n\n/**\n * @param \\App\\Entity\\User $user\n */\nfunction it_encrypts_user_password_and_erases_credentials($user)\n{\n    $this->updatePsassword($user)->shouldReturn($user);\n}\n\n}\n```\nThank you, guys!\n. ",
    "bestform": "Hi.\nI intentionally left the spec folders untouched because the psr-4 config in a composer.json only concerns the actual source files. If you have more than one psr-4 specification in your composer config, this might end up being confusing in your spec folder as it is not obvious, which specs concern which namespace - it also might be confusing in your actual source files, but this is something, you might have or want to do depending on how you project works.\nThat said, it wouldn't be a huge problem to also cut the prefix from the spec path, so if a lot of people think this is a good idea, this may very well be possible. But as I described, I already thought about it and left it out intentionally. Feel free to disagree. \n. Oh. Sorry about that. I will pay attention to this next time. Thanks for merging.\n. I had the exact same problem, that's why I've implemented #350. No word from the devs about it, yet, though. I still hope, it'll get merged or implemented in a similar way.\n. @everzet @ciaranmcnulty I think, @dmecke is right. Not mocking all dependencies does make the spec a secret integration test. The results of that can be pretty unpleasant. Not only is it not the purpose of the spec of class A to ensure the correct behaviour of a dependency B. Even worse: if class B breaks, both specs (for class A and class B) break, making it more difficult to identify the problem immediately.\nIf class B breaks, only the spec for class B should break. Class A has nothing to do with this error and therefore should still work in the test environment.\n(Sorry for driving this slightly off topic discussion further, but in my opinion this is an important point)\n. I don't think this should be something that is on by default. People who know their stuff will either change the template or update the generated class afterwards. People who still struggle with OOP will be very confused by this. \nI also second @everzet 's quote: \"Delegating choice to the users hardly helps anyone ever.\"\n. Yeah, that would be an option, too :)\n. I'll leave the PR open if you decide that it would be a good option to keep @param support while ensuring that it won't break if you are using imports\n. A check as seen a problem with this approach, so i will close it for the moment until fixed\n. ok, i fixed the issue\n. The php7 build fails. But not because of my code, but with a segfault. This is strange. Any idea what's causing this?\n. Oh, right. PHP treats a null assignement as false, right? So, this check is just obsolete. If removed, it will work just as intended.\n. @stof This is not strictly related to this PR, but in my opinion, assignments shouldn't be made inside a condition. First of all to avoid mistakes (like doing an assignment when in fact you just want to compare). But also, and this becomes apparent in this code snippet, because of the way, PHP evaluates the value. It is not an identity comparison to false (===) - the 'falsy' part in your description. So this will also evaluate to false for empty strings, or the integer 0 or whatever else PHP is considering 'falsy'. So if you wanted to keep the assignment inside the condition, you should at least do it like that:\nnull !== ($foo = $this->bar())\nThis is not meant to be a fundamental discussion, I am just interested in your thoughts about that. Is it done like that on purpose here, or would you agree that this is kind of a risky way of writing conditions?\n. true. I've changed it to $collaboratorsWithAssignedTypes\n. yes. As i said, just a small off topic note.\nI've removed the check. The test is - obviously - still green.\n. ",
    "Dragonrun1": "phpspec does need psr-4 support but I think adding this setting is the wrong way to go about it. Don't get me wrong it does solve the request and need but isn't the best solution going forward into the future.\nI've got an idea for a solution that use only one additional setting but adds a lot more usefulness IMHO. It also is a more future prove way to do it.\nYou can find my idea on how to do this better in #360\n. Actually doesn't matter if they are since void is the default return value from a method except if you return something else.\n. I've replaced Symphony's EventDispatcher myself in one of my project and in the process created a low dependence library/new project you might take a look at.\nhttps://github.com/Dragonrun1/event-mediator\nIt combines many of the better features (IMHO) that I found floating around in other event systems.\n. ",
    "cdarken": "This is not in 2.0.1 release? It ignores the config setting and the code is not present in the sources.\n. Ah, got it. Thanks.\n. Tried to force dev-master in my composer.json and it I get this:\nbossa/phpspec2-expect dev-master requires phpspec/phpspec >=2.0.0-RC3 -> satisfiable by phpspec/phpspec[2.0.0, 2.0.1].\nIt looks like it's a vicious circle. :)\n. ok\n. Did some more investigating and I discovered it was happening because I was having benconstable/phpspec-laravel at version ~1.0. Replaced version with dev-master and now it works.\nSorry for bothering you with this.\n. ",
    "arnolanglade": "@stof  I have exactly the same problem and I use ~2.1@dev\n. @dranzd Same for me, psr4_prefix is the solution ! \n. Sir @ciaranmcnulty, when do you plan to release the 2.1 ? \n. @ciaranmcnulty ok, thanks for quick answers !\n. ",
    "dranzd": "@stof @aRn0D I had that same problem as well but I made it work by updating my composer.json and added autoload configuration for psr-4 that points to the src.\n```\nphpspec.yml\nsuites:\n    inventory_suite:\n        namespace: MY\\Namespace\n        psr4_prefix: MY\\Namespace\ncomposer.json\n\"autoload\": {\n    \"psr-4\": {\n        \"MY\\Namespace\\\": \"module/MY/Namespace/src/\"\n    }\n}\n```\nA class with namespace MY\\Namespace\\Component\\Theclass\nWould produce:\nmodule/MY/Namespace/src/Component/Theclass.php\nmodule/MY/Namespace/spec/Component/TheclassSpec.php\n. ",
    "antonioribeiro": "Yes, it does. Thanks a lot!\n. ",
    "Tocacar": "Thank you for your fast responses!  I'm just starting out with PHPSpec (as of yesterday, having watched this excellent talk of yours @jakzal - http://protalk.me/using-phpspec-to-build-quality-into-a-symfony-app)\nThe method I'm trying to test is:\n```\n    public function calculateDateByAddingMonths(\\DateTime $startDate, $numberOfMonths)\n    {\n        $date = $startDate->add(new \\DateInterval('P'.$numberOfMonths.'M'));\n    return $date;\n}\n\nAnd my test looks like this:\n```\nfunction it_should_calculate_date_by_adding_months()\n    {\n        $date = new \\DateTime('-9months');\n        $month = 9;\n```\n    $today = new \\DateTime('now');\n$this->calculateDateByAddingMonths($date, $month)->shouldReturn($today);\n\n}\n```\n. @docteurklein You are quite right, changing ->shouldReturn to ->shouldBeLike makes the spec pass.\nThank you!\n. ",
    "ShawnMcCool": "During refactoring, if you change the namespace of the Spec file without change its folder location to match PSR standards then the tests simply stop showing up.\nI perceive this as a very big problem. I perceive this as a Bug since it functions entirely contrary to what you'd expect from a testing framework. It makes me nervous and now I'm considering how to protect myself from refactoring errors that my tests should identify.. ",
    "jeroengerits": "+1, this occurred to me quite some times during refactoring\u2026. ",
    "splondike": "This is functional testing, I agree, but it's pretty convenient to have everything run from one command. Moving the reflection code from ResourceLoader to ObjectBehavior and SpecificationInterface isn't changing anything about the library other than allowing it to be more easily hooked into by third parties.\nI'm not suggesting this should be supported or anything, but do you think it would have any negative consequences either?\n. Having everything in one spot makes sense for my project I think, I'm still trying to get the idea of testing fully embraced (the JSON tests aren't that great atm.), and will be leaving the project pretty soon.\nLike I said, I don't think this change would need to be a supported feature, and neither would it change anything philosophically about PhpSpec upstream. It's fair enough that you can't see the value in it though, and for me my current solution works well enough.\nClosing.\n. ",
    "krasun": "@MarcelloDuarte, thanks for your answer. Yes, I understand what is collaborator and how to use it. I'm interested how phpspec calls  IgnoreTypehintSpec::it_can_ignore_typehint() with \\PhpSpec\\Wrapper\\Collaborator instance and ignores expected type for argument. I can't understand how $typehint instanceof IgnoreTypehint evaluates to false in my example?!\n. =)) Yes, of course. \n. Hmm =( Yes, I've seen ExampleRunner, but I can`t reproduce it. \nI've tried: \n```\n<?php \nclass A \n{\n}\nclass C \n{\n}\nclass B \n{\n    public function methodRequiresA(A $a) \n    {\n        var_dump($a instanceof A); \n    }\n}\n$reflMethod = new \\ReflectionMethod('B', 'methodRequiresA');\n$reflMethod->invokeArgs(new B(), [ new C() ]);\n```\nBut as it was expected I've got an error: \n$ php t.php \nPHP Catchable fatal error:  Argument 1 passed to B::methodRequiresA() must be an instance of A, instance of C given in /home/user/t.php on line 15\nPHP Stack trace:\nPHP   1. {main}() /home/user/t.php:0\nPHP   2. ReflectionMethod->invokeArgs() /home/user/t.php:22\nPHP   3. B->methodRequiresA() /home/user/t.php:22\nExampleRunner do the same, as I understand. But in my example with phpspec, typehinting just ignored. \nOh, I'm new to TDD and just have started to use phpspec, so writing extensions for me, maybe, is a little early ;) \nAnd thank for you for this beautiful tool, now it really helps me to feel good about my code.\n. ",
    "n10ty": "@MarcelloDuarte  so can you answer how could it be?\n.  Thanks, we saw it. \n. ",
    "nicholasruunu": "I was just having the same problem myself and found this issue.\nWhen you want to refactor class name/namespace, you get less inclined to do so because of having to refactor the tests manually.\nI think PHPSpec should encourage refactoring to better fit the model and thus help you do this.\nI think a phpspec (mv|rename) would be an awesome addition to the tool.\n:+1: \n. ",
    "dantleech": "I have a similar problem, all of my tests are in a test folder within the bundle / component, for example:\nFoobar/Component/BarFoo/Tests/Functional\n Foobar/Component/BarFoo/Tests/Spec\nSo I need to SUFFIX the spec namespace, not prefix it.\n. A similar problem:\n28  \u2714 is initializable\n  33  \u2718 should provide a qom object for selecting\n        expected [array:2], but got [array:2].\nIsn't really that useful..\n[EDIT: Actually with --verbose I do see the difference]\n. @ciaranmcnulty yes indeed that works in the second case, I expect it would work in the first too but am not able to test atm.\nWill close this issue and reopen it if I find that this doesn't work.\n. Ah OK, I didn't realise you could specify a line number, running a single spec really is my sole use case. in that case this can be closed.\nDo you think it would be worth adding the a line number example to the default PHPSpec CLI help?\n```\nHelp:\n The run command runs specifications:\nphp ./bin/phpspec run\nWill run all the specifications in the spec directory.\nphp ./bin/phpspec run spec/ClassNameSpec.php\nWill run only the ClassNameSpec.\nphp ./bin/phpspec run spec/ClassNameSpec.php:102\nWill run only the spec at line 102 of ClassNameSpec\n``\n.$expected? should this be$iterable` ?\n. ",
    "unusorin": "Because it should. \n. ",
    "walterdolce": "It is possible to do so, via templates.\n. It looks like this way we may have two autoload.php files included if one of the is_dir() conditions will be true though. @mdavis1982 is that intentional?\n. Thanks @stof :thumbsup: . I will redirect @mdavis1982's commit to master then.\n. :thumbsup: :) \n. Hi, just to add to the conversation as I found myself implementing (exctracting) shared object related verifications in traits - not in PHP 7.\nIt seems it is possible to avoid the nasty require_once suggested above by just adding the spec folder to the autoloader paths array in the composer.json file.\nExample:\n```\ncomposer.json\n{\n  \"autoload\": {\n    \"psr-0\": {\n      \"\": [\n        \"webapp/php/lib\"\n      ]\n    },\n   \"autoload-dev\": {\n      \"psr-0\": {\n         \"\": [\n            \"spec\"\n         ]\n      }\n   }\n}\n===================\nproject dir structure\nwebapp/\n   php/\n      lib/\n         VendorNamespace/\n            Html/\n               Element/\n                  Option.php\n                  Select.php\n                  Input.php\nspec/\n   VendorNamespace/\n            Html/\n               Element/\n                  Traits/\n                     ElementIdentityTrait.php   <--- shared object related verifications here\n                  OptionSpec.php\n                  SelectSpec.php\n                  InputSpec.php\n```\n. > You should probably use autoload-dev for this BTW\nAh good point, thanks. \nExample above updated so future comers will know what/how to do (for < PHP 7).\n\nYes this works fine if you're not using PHP 7\n\nOh I see. So the very same setup doesn't work in PHP 7?\nHaven't tried it myself yet..\n. > bash expansion of the patterns is going to make that quite tricky I fear\nVery true. Funny I never issued /bin/whatever *Spec.php before \ud83d\ude05\nNot sure how I feel then. Probably what we have today is good enough that no additional changes to this feature are required. \ud83e\udd14 \nI'll leave it open for you just in case you want to give it some thought. Otherwise, this can be closed.. ",
    "ScreamingDev": "I dunno were the word \"testes\" came from. o,O But thanks.\nWith that templates you can not do this:\n/**\n * @param string $foo First arg\n * @param int    $bar Second \n */\nfunction ($foo, $bar) {\n. ",
    "Stubbs": "The thing I'm trying to spec isn't static, \nreturn $department->getAll()->filterByModule(\\kyDepartment::MODULE_TICKETS)->filterByType(\\kyDepartment::TYPE_PUBLIC);\nIs the line that's causing the error. $department is a stub, and it's the call to getAll() on that stub that causes the error above.\n. https://github.com/Stubbs/phpspec-bug is a repo you can clone to see it in action...\n. Ah dammit, I see what you mean now.\n. ",
    "bishopb": "Using the boilerplate phpspec:\nphp\nclass ExampleSpec extends PhpSpec\\ObjectBehavior {\n    function it_is_initializable() {\n        $this->shouldHaveType('Example');\n    }\n}\nWith a class having a Closure class property:\nphp\nclass Example {\n    public static $method;\n}\nExample::$method = function () {};\nCrashes phpspec run with the exception Serialization of 'Closure' is not allowed.  I observed this in wild when using PHPSpec against some components in Laravel (though I don't recall which Laravel base class, possibly Eloquent).\n. Sure, no problem.  Out of curiosity, why does the Instantiator do a serialize then unserialize of the target class?  Is it for filtering run-time properties from instantiated classes?\n. ",
    "mtotheikle": "That works and stops the tests from showing as broken but then the errors get outputted to stdout. I'm not seeing any setting that controls that might control this setting. Any ideas?\n. Hi guys, sorry for the late reply.\nI tried the runner.maintainers.errors.level and that did not work. I haven't had a chance to get back into this but once I do I will post some more information if it's still happening.\n. ",
    "florianv": "Thanks, I didn't know about it.\n. ",
    "mbeccati": "It's not fixed. It's a new feature, which means that starting with PHP 5.6 the count methods will always be called with a $mode parameter by count($countableObject), defaulting to 0.\nThe bug I've fixed was simply a little implementation error.\n. The bug I linked was a fix for a segmentation fault. Triggered by the phpspec suite, but it doesn't revert the behaviour change.\nYour spec will be broken as PHP5.6's count() will call e.g. SpecificationNode::count(0) under the hood, resulting in a:\nProphecy\\Exception\\Call\\UnexpectedCallException:\nMethod call:   Double\\PhpSpec\\Loader\\Node\\SpecificationNode\\P443->count(0) was not expected.\nExpected calls are:   - count()\nerror.\n. PR fixed. Sorry, I'm not yet a phpspec user and I was just trying to help ;)\n. 5.6.0-beta2 to the current beta4, as far as I can tell from the git history.\nI believe it might be possible to keep the old behavoiur in case count() has been called without parameters, feel free to complain here: https://bugs.php.net/bug.php?id=67064\n. I've started a discussion about the BC break in the aformentioned ticket, proposing a fix. If that's accepted than this PR can be safely deleted.\n. @ciaranmcnulty done. I believe it is safe to merge even before 5.6 is released as stable.\n. @ciaranmcnulty fixed now by removing the extra param. I've tested PHP 5.3 and 7 (master), and I wouldn't expect issues in any other version ;)\n. And my Bamboo box with daily PHP snaphost agrees too: https://revive.beccati.com/bamboo/browse/PHP-PHPSPEC-72 ;)\n. @stof yes it is\n. For the record, I had a chat with Nikita (author of EngineExceptions) and Dmitry (who later changed E_RECOVERABLE_ERRORs to E_ERRORs). There might be still a chance to revert the latter and avoid the BC-break here. To be honest the use case here is in fact a way to trick the type hinting system that maybe shouldn't have existed in the first place, but maybe it's worth trying. If you want I can start with an introductory email.\n. @docteurklein E_ERRORs are fatals and can't be intercepted. Exceptions on the other hand could, but then execution won't be resumed in the context PhpSpec is expecting to.\n. Not sure why the travis build failed for 7.1, as it passes locally.\n. @jameshalsall indeed. I shouldn't be doing PRs this early in the morning... I've seen the failure with latest 7.1 and I rushed the fix. I've sent an email to the committer to get the change reverted form 7.1, but in any case the fix will guarantee forward compatibility ;)\n. @Sam-Burns I believe so.. @Sam-Burns Possibly a better idea, yes. The point of my PR was just to quickly adapt the existing behaviour, which however was buggy, it seems ;)\nMy suggestion would be to close the PR and fix the real cause of the issue.. @ciaranmcnulty @stof nice, my build is green again too! \nhttps://revive.beccati.com/bamboo/browse/PHP-PHPSPEC-1100\n\n. @stof sure, although it's unrelated to the actual get_class fix ;)\n. ",
    "gstjohn": "Seeing a similar result here where the test fails, but it's not obvious where the discrepancy is. Currently running on dev-master@dev which points to 4a5fabe.\n```\n  15  \u2718 it should transform a gift object to data array\n      expected [array:32], but got [array:32].\n    63             'createdDate'             => null,\n    64             'lastModifiedDate'        => null\n    65         ]);\n    66     }\n    67 }\n    68\n\n\n   0 vendor/phpspec/phpspec/src/PhpSpec/Matcher/IdentityMatcher.php:78\n     throw new PhpSpec\\Exception\\Example\\NotEqualException(\"Expected [array:32...\")\n   1 [internal]\n     specs\\JCRC\\CRM\\Transformers\\GiftTransformerSpec->it_should_transform_a_gift_object_to_data_array([obj:PhpSpec\\Wrapper\\Collaborator], [obj:PhpSpec\\Wrapper\\Collaborator], [obj:PhpSpec\\Wrapper\\Collaborator])\n\n```\nLine 65 is highlighted in yellow, but there is no diff showing the discrepancy. Expectation of array:32 and result of array:32 match.\n. The original post is using the -v, which is why it's odd there is no array diff content shown.\nI'm having issues putting together a test that replicates the issue but avoid the intricacies/privacy of this particular project. Will report back.\n. ",
    "Anyqax": "The contain matcher returns no info about the actual array contents either:\n\"expected [array:2] to contain [obj:xxx], but it does not.\"\nOn a related note: I'd love to see the contain matcher either not do strict equality checking on objects (meaning if an array contains an object that has identical properties it returns true, not only if it contains the identical object) or have another contain matcher, e.g. \"containLike\" which behaves that way.\n. no, it doesn't expand with the -v flag\nyou're probably right though, I can work around it reasonably fine with either beLike on the whole array or just target a single element via $subject[0]->shouldBeLike\n. ",
    "adamelso": "Having the same issue comparing an array of 10. The spec is for a class that performs normalization of data to an array to be encoded to JSON by a different class.\nRunning with verbose does not output any diff.\nWhile using shouldBeLike makes the spec pass, it won't verify the right type is being returned for a value in the array (eg. using an integer instead of a string containing one) - even then I'd expect it to show up in a diff when using shouldReturn\nHere's an example of what I'm testing. If I have any more information I'll post again here.\nEDIT: phpspec version 2.5.3\nphp\n    $this->describe([\n            'customer'     => $customer,\n            'order_number' => '2777777',\n    ])->shouldBe([\n            'customer.country'            => 'GB',\n            'customer.email_hashed'       => '0cba00ca3da1b283a57287bcceb17e35',\n            'customer.facebook_id'        => '99999',\n            'customer.gender'             => 'f',\n            'customer.has_transacted'     => true,\n            'customer.newsletter_opt_in'  => true,\n            'customer.number'             => '123456',\n            'customer.personal'           => [\n                'email'        => '86e0b9e56c17cc4d12387e1949b85053fbe73bc3ce5a1188713a9d300cc6133d',\n                'gender'       => '252f10c83610ebca1a059c0bae8255eba2f95be4d1d7bcfa89d7248a82d9f111',\n                'phone_number' => '2cb0a38f445db22f770857b7e7133b4f9b3a8803859fc852251441bda6d32a4d',\n                'first_name'   => '5169af021112476329ba6d35ce3edf4a9fe4c1fdd401ea42a918890098cf83ac',\n                'last_name'    => '2be4e33aa3e21f6ff7ad144f8fd58228a1cce3b50340b4805ff0c63480eec488',\n            ],\n            'customer.purchase_history'   => [\n                'average_order_value'     => 170,\n                'average_units_per_order' => 2,\n                'gross_order_total'       => 340,\n                'net_order_total'         => 360,\n                'number_of_orders'        => 2,\n                'order_numbers'           => ['2799998', '2799999'],\n            ],\n            'customer.twitter_id' => '88888',\n    ]);. I had a go at fixing it the same way other libraries have. However, unlike some of the examples I've seen in the other libraries, these objects need to be instantiated with the necessary properties. https://travis-ci.org/adamelso/phpspec/jobs/27764775#L194\n. @stof Mine completed its Travis first (and failed) but Jeff submitted his faster ;)\nWhoever fixes the Behat scenarios first, should probably get theirs merged.\n. @stof good shout\n@whatthejeff you'd probably get this done faster than I would ;)\n(I'm going to have a go anyway to familiarize myself with the PhpSpec source)\n. @bamarni Bear in mind this won't work when you're specing a new class as PHP will complain that the class does not exist (yet).\n. @stof That's true. Even so, it's probably not good practice for the reasons outlined in this Sylius PR.\n. :+1:  I can confirm that since updating to 2.4, our Jenkins server no longer complains about this.\n. @ciaranmcnulty Way ahead of you ;) #797\n. I'm back from holiday (and illness) so I'll continue working on this from today\n. Not really sure how the allow_failures matrix works on appveyor. I was hoping to use platform as the condition, where the value is constant but I think only conditions defined in the matrix can be used, ie, the PHP_DOWNLOAD_FILE variable that I've defined for each group.\nAlso, would be a good idea to host the PHP Windows binary archives ourselves rather than relying on windows.php.net? For example, Phinx uses their own repository on AWS S3. A script may be required to check the lastest version of PHP 7.0 from http://windows.php.net/downloads/snaps/php-7.0/\n. Alright, it's ready! Except, shall I squash the commits before you merge it?\nIncidentally, I managed to get Behat to run, but all the scenarios will fail because calling chdir() into a directory on Windows prevents that directory from being removed later as pointed out by Bernhard Schussek.\n. Also two more issues:\n- The allow_failures matrix does not result in an overall success when used with the fast_finish flag - possibly a bug.\n- The builds overall take nearly an hour to run, most of that time is spent on runnning composer update, even though the Composer cache directory is cached.\n. Thank you @stof , that's much better!\n@ciaranmcnulty AppVeyor is now testing against PHP 5.6 only. Cheers!\n. @stof Thanks, updated. The php5.4 tag is passed directly inline now.\n. Updated PhpSpec to 3.4.0 but only slight change in execution time.\nNearly all of our classes that are covered by specs are domain objects. It's possible there may have been some infrastructure ones that crept in, I'll have to check.\nI attempted to profile with Blackfire but it chokes after running 340 specs, I'll try again with a limited suite to see if can get at least one profile to work with.. ReflectionMethod::invokeArgs() and SebastianBergmann\\Exporter\\Exporter::recursiveExport() were highlighted by Blackfire.\n\n\n. I'll no longer be working on this project that is affected, so I won't be able to assist as much going forward. If no-one else reports the same slowdown in performance, you can close the issue.. ",
    "sstok": "Any news on this?\n. This also breaks Travis and scrutinizer-ci.\nFor Travis I can run the update manual but scrutinizer-ci is a different story.\nhttps://github.com/scrutinizer-ci/scrutinizer/issues/290\n. ",
    "yosmanyga": "@stof, regarding this issue, do you think it can be suggested to any code analyzer like php-cs-fixer or scrutinizer-ci?\n. @whatthejeff done.\n. ",
    "nightlinus": "Does this inline matcher solve the issue?\n``` php\n   public function getMatchers()\n   {\n        return [\n            'generate' => function ($subject, $value) {\n                if (!$subject instanceof \\Traversable) {\n                    throw new FailureException('Return value should be instance of \\Traversable');\n                }\n                $array = iterator_to_array($subject);\n            return $array === $value;\n        }\n    ];\n\n}\nfunction it_should_generate_numbers()\n   {\n        $this->generateNumbers(4)->shouldGenerate([ 1, 2, 3, 4]);\n   }\n```\n. multiple tests of code that use trigger_error to generate custom warning:\nfunction it_can_be_created_without_expiration_date()\n{\n    $this->beConstructedWith($this->name, true, $this->comment);\n    $this->shouldNotThrow()->duringInstantiation();\n}\n\nfunction it_shows_that_feature_is_expired()\n{\n    $this->beConstructedWith($this->name, true, $this->comment, new \\DateTimeImmutable('now'));\n    $this->shouldTrigger(E_USER_WARNING)->duringInstantiation();\n    @$this->shouldBeExpired();\n}\n\nActual tested code:\n```\n<?php\ndeclare(strict_types=1);\nnamespace Hermes\\FeatureToggle;\nuse Assert\\Assert;\nfinal class Feature\n{\n    /*\n     * @var string\n     /\n    private $name;\n/**\n * @var bool\n */\nprivate $enabled;\n\n/**\n * @var bool\n */\nprivate $expired;\n\n/**\n * @var string\n */\nprivate $comment;\n\n/**\n * @var int\n */\nprivate $expireInDays;\n\npublic function __construct(string $name, bool $enabled, string $comment, \\DateTimeImmutable $expireDate = null)\n{\n    Assert::that($name)->notEmpty(\"Feature name should not be empty.\");\n    $this->name = $name;\n    $this->enabled = $enabled;\n    $this->comment = $comment;\n    $this->expired = false;\n    $this->expireInDays = null;\n    if ($expireDate !== null) {\n        $now = new \\DateTimeImmutable('now');\n        $this->expireInDays = $now->diff($expireDate)->days;\n        $this->expired = $now >= $expireDate;\n    }\n\n    $this->warnAboutExpiration($name, $this->expired);\n}\n\npublic function name()\n{\n    return $this->name;\n}\n\npublic function comment()\n{\n    return $this->comment;\n}\n\npublic function expiresInDays()\n{\n    return $this->expireInDays;\n}\n\npublic function isEnabled()\n{\n    return $this->enabled;\n}\n\npublic function isExpired()\n{\n    return $this->expired;\n}\n\nprivate function warnAboutExpiration(string $name, bool $expired)\n{\n    if (!$expired) {\n        return;\n    }\n\n    $msg = \"\u0424\u043b\u0430\u0433 $name \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u0435\u043d. \u041f\u0440\u0438\u043c\u0438\u0442\u0435 \u043c\u0435\u0440\u044b \u043f\u043e \u0435\u0433\u043e \u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0438\u044e \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044e \u0438\u0437 \u043a\u043e\u0434\u0430.\";\n    trigger_error($msg, E_USER_WARNING);\n}\n\npublic function override(bool $enabled)\n{\n    $instance = new Feature($this->name, $enabled, $this->comment);\n    $instance->expired = $this->expired;\n    $instance->expireInDays = $this->expireInDays;\n\n    return $instance;\n}\n\n}\n. Thank you for quick reply.\nOk, just asked about need of DelayedCall. In any case this pr fixes missing return null; or one got error\n[err:TypeError(\"Return value of PhpSpec\\Matcher\\ObjectStateMatcher::negativeMatch() must be an instance of PhpSpec\\Wrapper\\DelayedCall or null, none returned\")]. let me add one positive test. Added some tests, but it can be cought with same version only, if i try to run tests in patched version they always green. I suppose it is because patched file is already autoloaded by my global composer phpspec. \nWill investigate it a bit more. Can you check code if you like it or not.. Ah, it is valid behaviour when using non-phar global version.. Does phpspec run -v solves the issue?. From configuration.rst\nAs PHPSpec does not have a distinction between canonicals verbosity levels (``-v``, ``-vv``, ``-vvv``)\nyou cannot specify it through configuration file. As a matter of fact running PHPSpec with any of these flags\nas unix command option, will result in the same output.\nIf you run the command with ``-q`` or ``--quite`` the ``verbose`` options will be overridden.\nI think introducing -vv mode should be separate pr or maybe i am missing something?. That can work, thank you.. Can you look at solution?. btw, can we remove tags in appveyor ~@php-version,@php5.4&&~@hhvm since package is ^7.1?. Phpspec in this context is wrong tool, you can write integration test with phpunit or any other general-purpose test framework.. ",
    "fesor": "I experimented with decorating Subject... and i must say it's not easy to do. Some working solution for my problem is here.\nThis is the best implementation which i have for now. Please note, that this is just an experiment. It's to ugly to be final solution.\n. You should consider to use Behat with Mink for such things.\n. @piteer1 what the point of speccing controllers? What i see is attempt to write functional tests with phpspec (phpspec is not rspec, where controllers specs are functional tests).\n. Is this just an example?\nSymfonyExtension is about mocking services. As said in README it's an experemental extension. You may want to use it when you are speccing ContainerAware services (in old version of Symfony/DependencyInjection there was no lazy initialization, or for resolving circular dependency)\n. @vodich symfony is already covered with tests, what you should cover - is your code (your services, entities, if you are not using anemic domain model and so on). Controllers should be covered with integrational/e2e tests. Or you can use controllers-as-services/action services.\n. @bestform \n\nNot mocking all dependencies does make the spec a secret integration test.\n\nMocking all dependencies without any exception makes your test highly coupled with current implementation. You should alway mock third-party dependencies of event more - use your interfaces (dependency inversion). But it this dependency is internal object or your package/layer/module, there is not problems not to mock it. \n\nNot only is it not the purpose of the spec of class A to ensure the correct behaviour of a dependency B\n\nThis dependency should be hidden, we are testing only object A behaviour, we don't know anything about B. It may use whatever it wants to has behaviour that we need to get.\n\nif class B breaks, both specs (for class A and class B) break, making it more difficult to identify the problem immediately.\n\nYou should know what went wrong not by \"what failed\" but more from \"what changed\". If I change a few lines of code and my tests are failing, I pretty much know what went wrong. It's just a matter of feedback loop length.\np.s. Sorry for offtopic.\n. @jakzal well... you right)\nBut then you shouldn't write such tests with phpspec since it really only good in unit testing.\n. ",
    "JHKennedy4": "I assumed as much. That's a bummer.\nWhat I'd love is a means of associating a given namespace segment to a given path segment. Thanks for pointing me to @jon-acker's work.\n. Not from what I can tell, but I might be misunderstanding.\nI've got a class in OFAccelerator/Util called Author. That class lives at wordpress/wp-content/plugins/OF-Accelerator/php/util/Author.php. Our naming convention is obviously less than ideal, but it is fairly consistent.\nTo clarify, I want to associate a partial namespace with a partial path.\nFor example, I'd like to be able to set /OFAccelerator to wordpress/wp-content/plugins/OF-Accelerator/, and Util to php/util/ in the autoloader configuration, but PHPspec (and the standard as I understand it) still expects OFAccelerator/Util/Author.php to exist at whatever I set the root via the config file (phpspec.yml and composer.json).\nThere might be a combination of configuration options that meet my requirements, but I haven't been able to find documentation indicating that is the case. Thus far my efforts to mix and match have been unsuccessful. My impression is that the PSR standards deliberately avoid dealing with this use case in favor of encouraging developers to conform to the standard.\n. Ah, fantastic. And here I was, erroneously fuming about how awful it was that this isn't supported.\n. can I just drop the develop phpspec in place of the current install and expect it to work?\n. Not working for me unfortunately, but my first guess is pebkac.\nMy phpspec.yml:\nsuites:\n    Util:\n        namespace: OFAccelerator\\Util\\\n        psr4_prefix: OFAccelerator\\Util\\\nand my composer.json\n{\n\"autoload\": {\n        \"psr-4\": {\n            \"OFAccelerator\\\\Util\": \"wordpress/wp-content/plugins/OF-Accelerator/php/util\"\n        }\n    }\n}\nDo I have this completely backwards?\nWhen I run bin/phpspec desc OFAccelerator/Util/Author, it generates\nspec/OFAccelerator/Util/ AuthorSpec.php\nWhen I run it, it tells me the class does not exist. When I generate the class, it generates it at wordpress/wp-content/plugins/OF-Accelerator/php/util/OFAccelerator/Util/Author.php\n. Unit testing got \"re-prioritized\" by the client :/ haven't actually had a\nchance to checkout that branch lately. I'll check.\nOn Aug 3, 2014 7:19 AM, \"Ciaran McNulty\" notifications@github.com wrote:\n\n@JHKennedy4 https://github.com/JHKennedy4 Does adding the \\ to the end\nof the composer autoload prefix solve the issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/issues/383#issuecomment-50987901.\n. @pyrech was correct @ciaranmcnulty. Thank you all for your help.\n. \n",
    "pyrech": "I think your psr-4 namespace should end with \\\\:\n\"psr-4\": {\n    \"OFAccelerator\\\\Util\\\\\": \"wordpress/wp-content/plugins/OF-Accelerator/php/util\"\n}\n. ",
    "samsonasik": "if we have project that uses travis as CI, it doesn't work, and keep shows 0 specs, but interestingly, it works locally... not sure if it a travis issue due read psr4_prefix config: https://twitter.com/samsonasik/status/648897902438428672\n. @ciaranmcnulty done ;), updated ;)\n. ",
    "paulodiovani": "Ok for describe command,\nBut for code generation, I think it should consider the spec_prefix also to find the correct suite (and then, the src_path.\n. ",
    "Nek-": "Here is the trace:\nException trace:\n () at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/phpspec/phpspec/src/PhpSpec/Locator/PSR0/PSR0Locator.php:282\n PhpSpec\\Locator\\PSR0\\PSR0Locator->validatePsr0Classname() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/phpspec/phpspec/src/PhpSpec/Locator/PSR0/PSR0Locator.php:213\n PhpSpec\\Locator\\PSR0\\PSR0Locator->createResource() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/phpspec/phpspec/src/PhpSpec/Locator/ResourceManager.php:76\n PhpSpec\\Locator\\ResourceManager->createResource() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/phpspec/phpspec/src/PhpSpec/Listener/ClassNotFoundListener.php:74\n PhpSpec\\Listener\\ClassNotFoundListener->afterSuite() at n/a:n/a\n call_user_func() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/EventDispatcher.php:164\n Symfony\\Component\\EventDispatcher\\EventDispatcher->doDispatch() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/EventDispatcher.php:53\n Symfony\\Component\\EventDispatcher\\EventDispatcher->dispatch() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/phpspec/phpspec/src/PhpSpec/Runner/SuiteRunner.php:70\n PhpSpec\\Runner\\SuiteRunner->run() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/phpspec/phpspec/src/PhpSpec/Console/Command/RunCommand.php:100\n PhpSpec\\Console\\Command\\RunCommand->execute() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/symfony/symfony/src/Symfony/Component/Console/Command/Command.php:252\n Symfony\\Component\\Console\\Command\\Command->run() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:887\n Symfony\\Component\\Console\\Application->doRunCommand() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:193\n Symfony\\Component\\Console\\Application->doRun() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/phpspec/phpspec/src/PhpSpec/Console/Application.php:83\n PhpSpec\\Console\\Application->doRun() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:124\n Symfony\\Component\\Console\\Application->run() at /home/maxime/Programmation/Sites/Neko-Wiki/vendor/phpspec/phpspec/bin/phpspec:23\nAnd I tested on my other configuration, indeed I have the same issue :o .\n. Ok here is the complete spec:\n``` php\n<?php\nnamespace spec\\App\\ParamConverter;\nuse App\\Entity\\Page;\nuse App\\Entity\\PageRepository;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter;\nuse Symfony\\Component\\HttpFoundation\\ParameterBag;\nuse Symfony\\Component\\HttpFoundation\\Request;\nclass PageParamConverterSpec extends ObjectBehavior\n{\n    public function let(PageRepository $pageRepository, ParamConverter $configuration, Page $page)\n    {\n        $pageRepository->findBySlug(Argument::any())->willReturn($page);\n        $this->beConstructedWith($pageRepository);\n    }\npublic function it_should_support_page_parameter_and_page_entity(ParamConverter $configuration)\n{\n    $configuration->getClass()->willReturn('App\\Entity\\Page');\n    $configuration->getName()->willReturn('page');\n    $this->supports($configuration)->shouldReturn(true);\n}\n\npublic function it_should_not_support_another_parameter(ParamConverter $configuration)\n{\n    $configuration->getClass()->willReturn('App\\Entity\\Page');\n    $configuration->getName()->willReturn('foo_parameter');\n    $this->supports($configuration)->shouldReturn(false);\n}\n\npublic function it_should_not_support_another_class(ParamConverter $configuration)\n{\n    $configuration->getClass()->willReturn('App\\Entity\\User\\User');\n    $configuration->getName()->willReturn('page');\n    $this->supports($configuration)->shouldReturn(false);\n}\n\npublic function it_should_return_a_page_when_apply(Request $request, ParameterBag $parameterBag, ParamConverter $configuration, Page $page, PageRepository $pageRepository)\n{\n    $pageRepository->findBySlug(Argument::any())->willReturn($page);\n    $request->attributes = $parameterBag;\n    $parameterBag->get(Argument::any())->willReturn('home');\n    $parameterBag->set('page', $page)->shouldBeCalled();\n\n    $this->apply($request, $configuration)->willReturn(true);\n}\n\n}\n```\nHere is the class I spec:\n``` php\n<?php\nnamespace App\\ParamConverter;\nuse App\\Entity\\PageRepository;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\ParamConverterInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nclass PageParamConverter implements ParamConverterInterface\n{\n    private $repository;\npublic function __construct(PageRepository $repository)\n{\n    $this->repository = $repository;\n}\n\n/**\n * Stores the object in the request.\n *\n * @param Request $request The request\n * @param ParamConverter $configuration Contains the name, class and options of the object\n *\n * @return bool    True if the object has been successfully set, else false\n */\npublic function apply(Request $request, ParamConverter $configuration)\n{\n    $slug = $request->attributes->get('page_slug');\n    $page = $this->repository->findBySlug($slug);\n    $request->attributes->set('page', $page);\n\n    return true;\n}\n\n/**\n * Checks if the object is supported.\n *\n * @param ParamConverter $configuration Should be an instance of ParamConverter\n *\n * @return bool    True if the object is supported, else false\n */\npublic function supports(ParamConverter $configuration)\n{\n    return $configuration->getClass() == 'App\\Entity\\Page' && $configuration->getName() === 'page';\n}\n\n}\n```\nYou can find every files here: https://github.com/Nekland/Neko-Wiki/\n. Ok here are paths for files:\n/spec/App/ParamConverter/PageParamConverterSpec.php\n/src/App/ParamConverter/PageParamConverter.php\n/src/App/Entity/Page.php\n/App/Entity/PageRepository\n(Doctrine param converter force you to add an annotation in your controllers)\n. Omg, I didn't saw it. That's what was wrong... Sorry.\n. ",
    "jaspernbrouwer": "PS: I'm using bded1df9e0302facf979509ffe12e4744fcbb371.\n. @ciaranmcnulty I think you're confusing beConstructedThrough() with beConstructedWith():\nbeConstructedWith() accepts an arbitrary number of arguments, which are collected using func_get_args() (in PhpSpec\\Wrapper\\Subject).\nbeConstructedThrough() accepts exactly 2 arguments, the first a callable, the second an array of arguments.\nSo that array I pass as second argument to beConstructedThrough() doesn't end op as array in the static factory method, but simply as first argument. And the error message I showed is coming directly from the call to the static factory method (not some code inside that method).\nI hope it's clear now this issue has nothing to do with iterating over arrays/traversables containing wrapped objects.\nI'd appreciate this issue reopened. I'll try to pinpoint the problem when I can find some time for it.\n. No problem! I've also updated the code in my original comment, to make it clear SomeClass is the subject in this case.\n. I've created PR #397 to fix this issue. I need a little more time to write a spec for this fix...\n. New PR #403 on master.\n. I've looked into writing a spec for this case, but I'm unable to do so :(\nI've tried to take it_can_be_instantiated_with_a_factory_method() as example:\nI see that callOnWrappedObject() is used to call beConstructedThrough(). callOnWrappedObject() will use PhpSpec\\Wrapper\\Subject\\Caller::call(), which will unwrap the arguments. This means the arguments are unwrapped before they reach beConstructedThrough().\nI also noticed that the Unwrapper is instantiated just before using it, it's not a dependency of WrappedObject. So I can't mock it by doing something like $unwrapper->unwrapAll(Argument::type('array'))->shouldBeCalled().\nSo I don't really see a way how to spec this...\n. And looking at the current features/scenario's, I'm not sure what you'd like me to add. The only thing I can think of is basically duplicating the it_can_be_instantiated_with_a_factory_method() spec as a feature, but that doesn't seem really useful to me.\n. Done! #403\n. I've added a scenario. It fails without this fix, succeeds with this fix!\n. Done :)\n. ",
    "GrahamCampbell": "If someone tried to install 2.1.*@dev, they want the latest dev changes - that's the whole point of a branch alias, so why would you alias the master too? Duplicated branch aliases results in a race condition at packagist, so undefined behaviour.\n. That's not the case. The composer install worked fine.\n. I don't see how dev-master solves anything? It's just a really bad practice, and in my experience, only causes issues. Are you sure the depenedncies issues in the \"IIRC projects\" weren't caused by people abusing the dev-master version constraint?\n. Sure.\n. This is ok isn't it?\n. Sure.\n. Could we leave this open for possible merging in a week or two then?\n. @whatthejeff So you think this should be merged, or maybe merged in a few days?\n. Yeh. I agree, yeh I still don't test against hhvm-nightly in my repos...\n. This was flagged in phpunit earlier too.\n. Should those extra spaces be removed for consistency?\n. I don't think we should include the autoload line. It has nothing to do with phpspec.\n. I see. Thanks.\n. I agree with @stof. Why would we make the docblocks wrong just to make scrutinizer happy?\n. The new travis php environment is now available. ;)\n. Should we be removing spaces in concatenation? You seemed to have changed quite a lot of code to add spaces.\nAlso, in my experience, it's probably safer to run the use statement fixers separately.\n. So this pull needs changing to use that option then. :)\n. Half support is better than no support? Full support and refactoring can be done on another branch, and merged could it not?\n. Half support isn't blocking full support. As I said, there's no reason someone can't rip out all the old code, and rewrite full support on a separate branch.\n. :+1:\n. @stof It's possible that people set lowest bounds in order to be able to run the majority of the code, not all of it, so this doesn't make much sense.\n. You'll need to update phpspec's own test cases for this.\n. As you can see by the failing travis build.\n. > Why would you do that?\nOtherwise the tests will fail...\n4f084079b7a1f6639ff35724b7aab7f8aeff60cd fixes this.\n. > it was intentional to leave the visibility keyword out?\nI never liked it without the visibility. :( It is a violation of psr-2.\n. It's fairly new to composer. The version of composer on travis must be too old. The version of composer on the container builds is slightly never - it supports this.\n. NB, the caret operator is documented here: https://getcomposer.org/doc/01-basic-usage.md#package-versions.\n. This shouldn't be an issue if we switch to the container builds like I said.\n. https://github.com/composer/composer/commit/f363f9d3701c9a5f4255e15e63c26c54776a0404\n. Just rebased.\n. Travis seems happy with this now. :)\n. Sure.\n. Will do later today.\n. I'm :-1: on this. Composer caches branch aliases incorrectly.\n. If behat were to make their master branch 4.0-dev, then we would start loading that instead of 3.0-dev because composer doesn't cache it correctly.\n. Yeh, it's been known for ~2 years but nobody's fixed it.\n. > As an aside I'd like to know also why the caching works on ciaranmcnulty/phpspec and not phpspec/phpspec :-/\nIt will work until they decide to update the their branch alias, then we're screwed as soon as they commit a breaking change.\n. > I've used this technique in past and never had issues with aliases.\nI see issues every day. I have constant bug reports on repos I maintain due to this bug.\n. It's difficult to find them because people normally report them as X method doesn't exist anymore, or whatever, and it's due to the fact composer loaded the master branch after I moved that version to another branch. I haven't had any reports in a few weeks, because I haven't moved by branches about recently. I'll see what I can find...\n. I can't even find the link to the issue on the composer repo. :/\n. Branch aliases are cached in the same way everything else is cached, in the same folder.\n. > Any evidence at all? lol.\nThere are around ~10 issues on my repos, or repos I'm involved in related to this bug, but I can't find any of them, because they have very unhelpful titles. If you can find any of them, be my guest.\n. Found one: https://github.com/barryvdh/laravel-debugbar/issues/216.\n. Thanks for the clarification @stof. In that case, this is probably a good idea. :+1:\n. Done.\n. This will mean we can't run the test suite on windows?\n. We'll need to skip if we're windows and if expect is not available?\n. Similar to phpunit's checks then. :)\n. Why not use https://styleci.io?\n. > -1 for running the style checks on Travis itself. I prefer keeping the Travis build status for the status of tests only.\nYep, agreed. You can use https://styleci.io/ to check pushed commits and php-cs-fixer locally.\n. If you set styleci to use the psr2 preset, that's the same as using the psr2 level on php-cs-fixer.\n. We can't use .phpcs config files on styleci because for obvious reasons, we can't allow user provided php code to be executed on our workers.\n. We're working on that, but we'd accept a pull request to add that feature in the meanwhile.\n. The trouble with scrutinizer is that it never actually fails the build for bad cs, so it's kind of pointless.\n. https://i.starbs.net/wL73 Looks like it's passing to me?\n. Nice.\n. Still, scrutinizer doesn't provide a diff for every fix, infact it doesn't for most fixes, unlike styleci, which provides a diff for everything.\n. Sure. I'll let you know when we ship that feature. The thing holding us is just none of us have enough free time, lol.\n. \"Failure condition met\". Not very useful really.\n. I think phpunit had this brought up recently. They decided not to implement a simelar fix.\n. @mahalay Just push to your branch, and they'll show up here. :)\n. @ciaranmcnulty 1 second difference. :)\n. :+1:\n. :+1: for dropping php 5.3 in 3.x. phpunit is dropping 5.3, 5.4, and 5.5 in it's 5.x release and will be dropping 5.6 in it's 6.x release.\n. > Is there any reason not to be dropping 5.4 as well?\nYes. It's no longer receiving security updates from the php core team very shortly.\n. That's a good reason as far as I'm concerned. I don't know about you, but I'm not prepared to run code that I know has massive vulnerabilities in it.\n. I'd really like to see php 5.3 dropped, but I'm not that fussed about 5.4 for now.\n. I'm REALLY :-1: on this. PHPDoc should be human readable IMO. It should be immediately obvious to a human on first read what the types are.\n. > Does the FQCN make it more obvious what the type is? I'm not convinced it does.\nFoo is totally non obvious, but Vendor\\Foo\\Baz\\Foo is super clear what the type is.\n. There is already one isn;t there?\n. Nice change. :+1:\n. Isn't the syntax | not ,?\n. I think , is the same as &&, ie, both conditions must be matched.\n. Is that not just a bug in php 5.6.12?\n. Do you have xdebug installed. That might be causing this? Just a wild guess. It could be anything, and I don't know a lot about the internals.\n. I expect it'll be released quite soon, based on previous habits.\n. Probably could do with being squashed to one commit too.\n. :-1: on this entire PR\n. :+1:\n. > I'm uncomfortable with requiring the Symfony polyfill because although I like to use it for projects it is not perfect and could cause confusion.\nAdding that could mess with the code we're testing.\n. Surely this needs reporting to PHP since this is a PHP bug?\n. > AFAIK, ~1.5 -> >=1.5 <1.6\nThat's not correct I'm afraid.\n. > That's not correct I'm afraid.\nThat describes what ~1.5.0 would do.\n. The fact you randomly have a ^2.7|~3.0 along with those ~2.7|~3.0 is very odd.\n. I don't think a 2.6 release is needed.\n. Keep both implementations, and use the old on on hhvm?\n. \ud83d\udc4e \n. > Using nightly builds keeps the project closer to the edge of the latest developments\nNot really significant. A new RC comes out every two weeks.\n. Bumping minimum package or php requirements does not constitute a breaking change, since composer will just resolve the version that you need for your environment.. phpunit just used ~1.0\n. I prefer it the original way. :(\n. It just seems clearer to be. It's personal preference though.\n. It is a BC break. All classes implementing this interface much change, including classes not provided by phpspec itself, is it definitely is a BC break.\n. @ciaranmcnulty I don't think you understand what I mean. PHP simply won't allow this. You'll get a fatal error: http://3v4l.org/DXRQD.\n. :+1: for a range\n. ?\n. This doesn't match psr2.\n. psr2...\n. This format is normally best for complying with psr-2, and still looking pretty.\nphp\n    public function emptyMethod()\n    {\n        //\n    }\n. Shouldn't we keep the new line at eof?\n. Shouldn't imports be alphabetically sorted?\n. New line at eof?\n. and here\n. ...\n. Also, there should be a space either side of the double arrow.\n. It's normal to put sudo after the php stuff.\n. Example: https://github.com/laravel/framework/blob/master/.travis.yml.\n. Better to use ^3.0.11. Given that it's a dev-dependency it shouldn't cause issues for people.\n. Yeh, definitely. I didn't notice it in there. We definitely shouldn't cache that.\n. Yeh, we can just remove --prefer-source from the command. Dist is default.\n. Oh right, ok. auto probably makes the most sense then. We don't want to will the cache with loads of dev releases.\n. Nah, not at all. dists are smaller too normally, that is if people have setup their .gitattributes correctly. They were just a bad idea because they'd bust the low api rate limit, which is selfish, because other people using the vm later might have a genuine need to use the api.\n. there shouldn't be an extra line before the closing brace\n. too many blank lines :P\n. ?\n. ?\n. braces need to be on a new line\n. ?\n. A sentence is still required by English to start with an uppercase letter.\n. Why have you locked this at 2.6.0?\n. I agree with @stof. There's no way we should be using the OS specific newline character.\n. all these changes are wrong, yeh\n. invalid phpdoc\n. same\n. etc\n. ?\n. No need for this, just try catch both exception and throwable.\n. eg https://github.com/laravel/framework/blob/v5.2.14/src/Illuminate/View/View.php#L80\n. do they have phpdoc though?\n. why not ~5.6|~7.0 to match every other version constraint in this file?\n. Why is that we have a ^ here, but ~ elsewhere. ~2.7 is the same as ^2.7.\n. Agreed. It was just something I noticed when I read the diff. :)\n. Yeh, that's the current convention. It's the semver version of ~.\n. I'm confused as why you're fine having this \"typo\" in here?\n. ",
    "mbfisher": "Recreated #355 against master.\nM\n. Sorry hadn't spotted the CI failure.\nDone; all passing for me!\nM\n. Oops! Friday night brain.\nI've cherry picked my commit onto master and force pushed the branch - better?\nM\n. Cheers!\nM\nOn 1 Aug 2014 19:49, \"Ciaran McNulty\" notifications@github.com wrote:\n\nMerged #406 https://github.com/phpspec/phpspec/pull/406.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/406#event-148295597.\n. \n",
    "rcwsr": "Ah, I see your point, thanks.\n. ",
    "respinoza": "@tomphp I wonder if you are still around. We have had this problem, see #354 \nAt this point I don't know if you are going to implement this or not but I would like to resurrect this fix to avoid the dangerous situation where the CI could execute phpspec and detect no problems but in reality no specs were run.\n. ",
    "thecrimpmaster": "Do you want me to remove any kind of constructor generation? Just leave in the bit that creates a static method that returns an instance of itself?\n. I haven't had a chance to look at this recently, but will try and update the PR to only do the code generation over the next few days, and have noted the points made too. Thanks lads.\n. @MarcelloDuarte @ciaranmcnulty what about when there is no constructor yet\nso given a class\nclass User\n{\n}\nand a spec file\nclass UserSpec extends ObjectBehavior\n{\n    function it_registers_a_user()\n    {\n        $this->beConstructedThrough('register', array('firstname', 'lastname'));\n        $this->getFirstname()->shouldBe('firstname');\n    }\n}\nwhat should it be, 1 or 2?\n1.\n    class User\n    {\n```\n    public static function register($argument1, $argument2)\n    {\n        $user = new User();\n    // TODO: write logic here\n\n    return $user;\n}\n\n}\n```\n2.\n    class User\n    {\n```\n    public static function register($argument1, $argument2)\n    {\n        $user = new User($argument1, $argument2);\n    // TODO: write logic here\n\n    return $user;\n}\n\n}\n```\n. I'm not really happy with the current implementation. The scenarios are there and it works, but I pushed the update since i was getting pressure from Marcello :-) and I knew I'd be away this weekend and I wasn't sure how much time pressure there was on getting a release. \nBut I had a bit of time today and I've extracted some of the concepts in NamedConstructorGenerator to collaborators, so if it can wait a few more days I can polish those collaborators and submit something better. \n. It's there, committed 2 days ago :-) Waiting for review\n. Ok, apologies for raising a non-issue :-)\n. It checks if a constructor exists when generating the message here\nhttps://github.com/phpspec/phpspec/pull/417/files#diff-aeaab0531377f83b2d8dbba529cefbeaR96\nBut very good point about another scenario, will add one\n. I feel like it would be a choice between having a public constructor OR a private constructor with named constructor methods. \nIf you were going down the route of having named constructors, you'd definitely like to have a private constructor to ensure your object can only be created in the way you intended. \nAnd if you changed your design down the road to have a public constructor, you'd most likely remove your named constructor method(s) and private constructor from your class, and then phpspec could generate your new public constructor with beConstructedWith()\n. Isn't the point of using named constructors that you usually have a couple of ways of constructing an object. So rather than having null arguments in a standard constructor, you create the named constructors. If you did that wouldn't you want to ensure that no one could construct the object in a way that might introduce inconsistencies?\n. Phpspec is already highly opinionated. But maybe this is too much of an 'opinion' :-)\n. ",
    "mikebronner": "I don't think it is -- is there a forum or other public location I should be posting to?\n. Thanks. :) Sorry to disturb, feel free to delete this.\n. ",
    "Warbo": "\na better way to indicate failure is to throw an exception\n\nThat's what this patch does; if the return value is truthy, a FailureException is thrown. Putting it in the ExampleRunner is just a case of Don't Repeat Yourself.\n. I agree that the polarity seems backwards, but truthy/falsy is just an implementation detail:\n- There's more than one way to fail, so failures need an explanation\n- There's only one way to succeed, so the method name suffices as explanation\n- None of PHP's falsy values can contain information (null, false, [], '', 0) so they're inappropriate as failure indicators\n- Every information-carrying value in PHP is truthy (error messages, error codes, arrays, objects (including exceptions)) so failures must be truthy\nIf this is flipped, such that falsy indicates failure, there would need to be a special-case for null and some way of reporting error messages via separate, truthy values. Not only is that more complex, but those separate, truthy values would carry enough information to make the primary success/failure indicator irrelevant. Hence, PHP's semantics naturally lead to truthy values for failures and falsy values for success, which is what this patch provides.\n. ",
    "freetuts": "I can not achieve what I want with that. My folder structure is: \"app\" is root. Inside it I have \"models\" folder and \"spec\" folder. Inside models folder all files shoud be namespaced with app\\models. So my spec files should fo inside spec/models, and real model files inside models folder and they should be namespaced with app\\models. But however i configure phpspec, I can not get this done. In best scenario I get this folder structure: app > models > app > models > Foo.php. And I want app > models > Foo.php where Foo.php will be namespaced with app\\models.\nIf I use this config: \nyaml\nsuites:\n    models_suite:\n        namespace: app\\models\n        spec_path: ./\n        src_path: ./\nphpspec will create app/models folders inside my app folder ( not good ! - structure will be : app > app > models > Foo.php )\nIf I tell it to use src_path: ./models - it will create app/models folders inside my models folder ( not good again! - app > models > app > models > Foo.php ). What I want is just to create files inside models folder, and namespace them with app/models. If I namespace them like this manualy, it will not work.\nI hope that you understand what I want to achieve here.\n. If I try this config: \nyaml\nsuites:\n    models_suite:\n        namespace: models\n        spec_prefix: app\n        spec_path: ./spec\n        src_path: ./\nspec files will be located under app > spec > app > models > FooSpec.php ( first \"app\" is root folder ). Models files ( files that phpspec usually generate inside src folder but I want them inside \"models\") will be located under app > models > Foo.php. That is good, except one problem. That Foo.php file is namespaced with just models, and I need it to be namespaced with app\\models. It would be nice if you can configure phpspec to prefix namespaces to generated files, but not to create extra folder structure for those prefix namespaces. That way I can tell it to prefix new generated files with \"app\" namespace, so my Foo.php will have app\\models namespace instead just models.\n. Well yeah, but I think that someone said that phpspec support PSR-4, so I am confused....\nSorry for closing, I've pressed the wrong button :D\n. ",
    "cebe": "\nphpspec will create app/models folders inside my app folder ( not good ! - structure will be : app > app > models > Foo.php )\n\nSo this is basically about supporting PSR-4 autoloading, right?\n. ",
    "tabbi89": "setChildren() : https://github.com/KnpLabs/KnpMenu/blob/master/src/Knp/Menu/MenuItem.php#L420\nand match():\n``` php\nuse Knp\\Menu\\Matcher\\Voter\\UriVoter;\nuse Knp\\Menu\\ItemInterface;\n...\n/**\n * Match whole tree with current url\n *\n * @param ItemInterface $menu\n * @param string        $url\n */\npublic function match(ItemInterface $menu, $url)\n{\n    $this->voter = new UriVoter($url);\n    $this->matchMenu($menu);\n}\n\n/**\n * Match menu\n *\n * @param  ItemInterface $menu\n */\nprivate function matchMenu(ItemInterface $menu)\n{\n    foreach ($menu as $item) {\n        if ($this->voter->matchItem($item)) {\n            $item->setCurrent(true);\n        }\n\n        $children = $item->getChildren();\n        $this->matchChild($children);\n    }\n}\n\n```\n. @ciaranmcnulty I have made a mistake during copying code and pasting it here :) Wrapping object manually solve problem but it should be done automatically am I right ?\n``` php\nuse Knp\\Menu\\FactoryInterface;\nuse Knp\\Menu\\ItemInterface;\nuse Knp\\Menu\\MenuItem;\n...\nfunction it_matches_menu(ItemInterface $menu, FactoryInterface $factory)\n    {\n        $url = 'test';\n    $menuArr = [\n        'category' => $menu->getWrappedObject()\n    ];\n\n    $root = new MenuItem('root', $factory->getWrappedObject());\n    $root->setChildren($menuArr);\n\n    $this->match($root, $url);\n}\n\n```\n. ",
    "fenos": "No, same behaviour, i'm stuck with this problem.  I'm confusing why this happen. If you can help will be appreciated\n. Thanks so much! I didn't know about that. Thanks again for your help, now my test work :)\n. ",
    "sachinkiet": "Yeah..Solved my problem too...Thanks a lot. ",
    "varas": "@stof no, the vendor folder is created by composer and is named vendor as usual\nBut the issue appears when using globally installed composer phpspec, so it may not have a vendor on project folder.\n. @ciaranmcnulty no phpspec.yml, no suite\n@stof no vendor folder in project folder, launching commands from the globally installed version: ~/.composer/vendor/bin/ in the path\n. Great. I got it working just dumping the autoload from composer:\ncomposer dump-autoload.\nWith a simple composer.json:\n{\n    \"name\": \"xxx/yyy\",\n    \"description\": \"...\",\n    \"authors\": [\n        ...\n    ],\n    \"autoload\": {\n        \"psr-0\": { \"\": \"src/\" }\n    }\n}\nThis avoid the package installation and vendor folder is finally like this:\nvendor\n\u251c\u2500\u2500 autoload.php\n\u2514\u2500\u2500 composer\n    \u251c\u2500\u2500 autoload_classmap.php\n    \u251c\u2500\u2500 autoload_namespaces.php\n    \u251c\u2500\u2500 autoload_psr4.php\n    \u251c\u2500\u2500 autoload_real.php\n    \u2514\u2500\u2500 ClassLoader.php\nThis is works great for building domain models and evolve them in isolation from 3rd parties :)\n. ",
    "BitOne": "Nice, thanks @ciaranmcnulty . Looking forward to it !\n. ",
    "franzliedke": "I'm developing fluxbb/core, which is included as a dependency in fluxbb/fluxbb. I need the latter for testing in a browser. The PhpSpec tests I want to run reside in vendor/fluxbb/core.\n. ",
    "kimu": "@ciaranmcnulty \nFinally works well. The issue on php.net describes a edge case with two nested finally clauses that seems to be fixed in php 5.6, while is not clear if it has been back ported in php 5.5 as well, which could explain the differences among versions here.\nI don't know how phpspec works internally but I thought that it probably try-catch everything and so that issue might be related.\n@docteurklein \nThis clarify the specific behaviour for the code I've provided, but in the real scenario we always have mock objects with many methods defined and in that case with php 5.6 it seems to behave more correctly while with php 5.5 results are quite unpredictable.\nAlthough, in the example I've provided, just commenting the first line $client->setUrl('http://foo.com')->shouldBeCalled(); phpspec should complain about the missing defined method, but this doesn't happen if the finally clause isn't evaluated and therefore phpspec would see $client as a dummy object.\nI've changed the code of the main class as follow, adding another call to a new method of $client before throwing the exception.\n``` php\nclass Client\n{\n    public function setUrl($url)\n    {\n        // do something\n    }\npublic function setLimit($limit)\n{\n    // do something\n}\n\npublic function resetClient()\n{\n    //do something\n}\n\n}\n```\n``` php\nnamespace Kimu;\nclass FinallyPhpspecTest\n{\n    /*\n     * @var Client\n     /\n    private $client;\npublic function setClient(Client $client)\n{\n    $this->client = $client;\n}\n\npublic function sendRequest()\n{\n    try {\n        $this->client->setLimit(1);\n        $this->client->setUrl('http://foo.com');\n        throw new \\Exception();\n    } finally {\n        $this->client->resetClient();\n    }\n}\n\n}\n```\nLeaving the test as it is, this is the result with php 5.5\n```\n\u279c  phpspec-finally-bug git:(master) \u2717 bin/phpspec run                                                                                                                                                                                                                                                                                                          \nKimu/FinallyPhpspecTest                         \n  11  \u2718 it should throw an exception\n      some predictions failed:\n        Double\\Kimu\\Client\\P1:\n          No calls been made that match:\n            Double\\Kimu\\Client\\P1->setUrl(exact(\"http://foo.com\"))\n          but expected at least one.  No calls been made that match:\n            Double\\Kimu\\Client\\P1->resetClient()\n          but expected at least one.\n                   100%                        1\n\n1 specs\n1 example (1 failed)\n19ms\n```\nWhich is even more crazy, because now it doesn't detect the call made to setUrl. If anything it should have complained about setLimit missing.\nThis is the result with php 5.6\n```\nKimu/FinallyPhpspecTest\n  11  \u2718 it should throw an exception\n      some predictions failed:\n        Double\\Kimu\\Client\\P1:\n          No calls been made that match:\n            Double\\Kimu\\Client\\P1->setUrl(exact(\"http://foo.com\"))\n          but expected at least one.\n                   100%                        1\n\n1 specs\n1 example (1 failed)\n13ms\n```\nWhich you can see is slightly better, but not less wrong. At least with php 5.6 the finally clause seems to be correctly evaluated. \nNot sure if this a php or phpspec bug, but in the first case it clearly affects also phpspec.\n. @stof I'm not sure I'm following you. You say that setLimit throws an exception because is unexpected, is not that a Prophecy expectation exception? If it wins over the exception thrown in the execution I would rightly expecting that error message to bubble up, not the next call in the call tree.\nI'm probably missing something, but I understand this being the cause of the odd error messages.\nIt doesn't explain the bug with the finally clause though.\n. @stof Ok, thanks, much clearer now. \n\nOn the other hand, the unexpected call will throw another prophecy exception (and shoudl mark the spec as broken rather than failed)\n\nIn the real scenario we had this kind of unpredictable results, where sometimes the spec was marked as broken, something as failed, something it was not marked at all. \nWe were actually able to identify all the broken specs only running it with php 5.6.\n@ciaranmcnulty I've tried to simplify the example code to put in evidence only the relevant part, but in the real scenario into that try-finally we also return a value at the end of the try clause.\nThis could explain why we had a mixture of broken ad failing specs, where the latter was probably due to the exceptions thrown.\n. ",
    "marco-fiset": "I have a very dynamic class that implements the __set() magic method, and performs some validations that may throw an exception. So the code that might throw an exception is not a method called on my object, it's more like a property assignment :\nphp\n$obj->name = 'Marco';\nHow do I test this particular line of code using the during method?\n. @ciaranmcnulty Thanks, I did not know it was possible.\n@cordoval I can't achieve the level of flexibility I need if I have to define every method. Sometimes you just have to resort to using magic methods.\n. ",
    "pdeszynski": "@fesor I'm using Behat, but for acceptance tests. These are normal specs for controllers, just the same like I would spec any class in a system.\n. What about the extension that's in the PhpSpec documentation done especially for that (in the configuration part)?\n. ",
    "v0d1ch": "So what's the best practice? Should Symfony controllers even be tested with phpspec or just do it with Behat? \n. thanks! I just think that there should be more easily found content on testing Symfony and proper way of doing that\n. yup I'll get into it more now that I have the proper workflow cleared in my head\n. ",
    "erikthedeveloper": "Yeah, you're right. That is more of a personal preference. Probably doesn't belong here.\n. ",
    "rgembalik": "It's not a big problem to me, because we are using composer-installed tools and libs only for development - none of those must be installed on server side with our app. So I can use composer autoloading without affecting my app.\nI suggested this only because I'd like to have phpspec-oriented bootstrap loaded only when using phpspec (command line parameter is a bit annoying to use each time). I can easily imagine situation where it becomes an issue.\n. ",
    "vaidasm": "Well, separator is added to the end of paths in __construct and in the supportsQuery separator is removed. I think we need some consistency here.\n$this->srcPath       = rtrim(realpath($srcPath), '/\\\\').$sepr;\n$this->specPath      = rtrim(realpath($specPath), '/\\\\').$sepr;\nI'm not sure when (if) realpath returns / at the end, but there's lots of rtrim(realpath()) stuff in the code, could somebody explain this?\n. ",
    "Anahkiasen": "Any news on this one?\n. That was my exact use case also, JUnit + text for CircleCI. It doesn't work either when trying to run the specs of the original classes. Isn't there a way to just... run a file? Without any black magic being involved with PHPSpec trying to autoguess where stuff is?\nOr at least a way to debug things a little better than it failing saying \"0 specs\", like seeing where it thinks classes and specs should be with the current configuration\n. Ok so I added var_dump everywhere and found the issue, src_path: app should have been src_path: app/Foo. I thought I was supposed to mirror the composer way to declare the PSR4 namespace, my bad.\nI still think some better error handling in this case would be better like \"0 specs in path {path}\" or something, but it's not a bug per se nonetheless\n. ",
    "nesl247": "This would be fantastic for CI. Can't read the output in a user friendly manner in CI while also having it output with junit to integrate with Jenkins.. Any update? It's (PHP 7) getting really close to release.\n. ",
    "Sam-Burns": "@nesl247 @Anahkiasen Work has begun on an extension, here https://github.com/Sam-Burns/phpspec-multi-formatter .  Contributions welcome.. Is this issue fixed by the pull request?\n. I don't think there is anything in the docs that needs updating.\n. Fixed in https://github.com/phpspec/phpspec/pull/919\n. Could change it to ~4.4|~5.0 if you prefer, but it's going to install 5.3 in PHP 7 or 4.8 in PHP 5 anyway, isn't it?\n. Fixes https://github.com/phpspec/phpspec/issues/907\n. @ifdattic yeah, I will\n. @ifdattic @ciaranmcnulty Note about autoloading added to installation docs.\n. @ifdattic done\n. Ref https://github.com/phpspec/phpspec/pull/933\n. @ifdattic Reformatting of JSON done :-)\n. @ifdattic I'll do a separate PR for you, changing the format of all the headers.\nThe autoload-dev feature of Composer isn't relevant to what we're doing here.  You don't need to use Composer to make PHPSpec spec classes autoloadable - it is doing that itself with reference to the config file, or default settings relating to spec prefixes, folder paths etc.\n. @ciaranmcnulty Last commit makes autoloading examples consistent in both places.\n. Does this fix the packagist description automatically, or does someone have to log on and do it?\n. Well, there aren't just two... Would you prefer to see the authors section removed?  I'd rather it at least mentions the lead maintainer if it's staying.\n. I think @ciaranmcnulty is just too modest to push the merge button on this one.  Current authors section is a bit misleading though, to be fair.  Maybe current and previous leads should be mentioned, as well as 'various contributors'?\n. Will do\n. Will do - thanks @stof \n. @stof @ciaranmcnulty @param feature removal documented.\n. @ciaranmcnulty Rebase done\n. @ciaranmcnulty Docs amended as suggested, and branch rebased.\n. The container delegate mechanism does allow services to be overridden, which is why it is a popular choice for providing an extension point for large libraries.\n. Container-Interop worked just fine in a previous spike, and does nothing to prevent the use of a service ID to represent an array of other services. The use of the current container as a service locator and as a registry is something we need to think about seriously about reducing, and the delegate container feature will provide a perfect opportunity for extension authors to provide their own implementations of our interfaces.\nI'll provide a second PR, based on these changes, writing out the service location and allowing the use of delegate containers as an extension point, to demonstrate what I'm talking about.\n. Closing, as encompassed in https://github.com/phpspec/phpspec/pull/942\n. Closing, as encompassed in https://github.com/phpspec/phpspec/pull/942\n. The value is that using the service locator as a registry, and setting things to it in the application object, is a pretty serious code smell.  By using the ConsoleManager as a smaller, more manageable registry, we get closer to actual dependency injection.\n. This PR removes four uses of ServiceContainer::set() from inside the Application class.  Do you have an alternative suggestion as to how to get rid of those, so we can stop using the container as a registry pattern and service locator?\n. Closing, as encompassed in https://github.com/phpspec/phpspec/pull/942\n. There is no removal of an extension point, although the way that extensions interact with the application will change during these improvements, to be more standards-compliant.\nThe commit involving the shutdown process does not change the behaviour of PHPSpec.\nThe RunCommand was already calling configure() on the service locator, causing three different steps of service addition and alteration.  Clearly the configure() method is a bad thing, and getting rid of it means that the RunCommand is now container agnostic, and doesn't alter the configuration of the container.\n. @ciaranmcnulty Fine, I'll close the previous PRs and just leave one open, if that's easier for you.\n. Closing, as encompassed in https://github.com/phpspec/phpspec/pull/942\n. Closing in favour of https://github.com/phpspec/phpspec/pull/947 .\n. @ciaranmcnulty Yeah, we need a new version of the bossa/phpspec2-expects thing. I'll see what I can do.\n. The recent suggestion that we need more than one Behat test for the extension mechanism is a sensible idea.  I will work on that shortly.\n. Please note that the branch for this PR has been rebased from the branch for https://github.com/phpspec/phpspec/pull/948.\n. Further Behat tests are possible, based on the examples provided in documentation for this PR.\n. > it forces to instantiate all listeners and all their object graph, which means that a later extension would then be unable to overwrite any of these object\n@stof Could I encourage you to look again at the code?  In the documentation examples, and the Behat test provided, only the extension's custom listener is instantiated when the extension is loaded.  The PhpSpec listeners are instantiated later, by the Application object.  There are no performance implications here, and nothing is left in a broken state.  If you still disagree, perhaps you could try to provide some sort of test to show what you're talking about?\n. @moufmouf Thanks very much for the feedback!  I'm not sure I agree there is a minor performance penalty here, as our event dispatcher is in fact always instantiated (by a service locator in the application object, no less).  I do like the work you're doing on Service Providers - very exciting stuff!  I'll keep an eye on it.\n. @moufmouf Out of the second and third approaches suggested at https://github.com/Sam-Burns/phpspec/blob/ccd8f10e40685e0ce3da803ee3ed5066b3b197ca/docs/manual/writing-extensions.rst , do you have a favourite?\nThanks very much for your help with this!  Good to have you around :-)\n. @mnapoli That's a good suggestion - I'll give it some thought this evening.\nI had been leaning towards the solution at https://github.com/Sam-Burns/phpspec/blob/ccd8f10e40685e0ce3da803ee3ed5066b3b197ca/docs/manual/writing-extensions.rst#adding-a-matcher tbh (with reference to https://github.com/Sam-Burns/phpspec/blob/ccd8f10e40685e0ce3da803ee3ed5066b3b197ca/src/PhpSpec/Container/ServiceProvider/ServiceProvider.php#L621-L648).  I'll spend some time on it this evening and see which way we could go.\nThanks again for coming along to lend your insight - very much appreciated :-)\n. Scrutinizer's a bit miffed about coding standards; otherwise, definitely a :+1:\n. On a side note, the same thing could be done in Prophecy, with implications for supported language versions.\n. Am I right in thinking that it's only when our own specs run that $exception->getSubject() returns null?. @mbeccati Maybe another solution could be to make $exception->getSubject() return something in the tests failing in the 'PHP nightly' build?. @ciaranmcnulty Ready for merging?\n. I'm not sure if this really answers your question, but it may be the quickest way around this is not to mock the exception.  Can you do something like $realException->setRequest($mockRequest)?. What is callPrivateMethod supposed to do?  You would need to assert that it is doing whatever it should be.. Well, would it make sense for your spec to say $this->preUpdate($event)->shouldBe('expected string');?. Then try something like $entity->setSomething('xyz')-> shouldHaveBeenCalled(); at the end of your test, maybe?. PhpSpec 3, which was released early last summer, works fine with recent versions of Laravel.  You may, however, have trouble using brand new versions of PHPUnit and a very old version of PhpSpec, as they both require different versions of sebastian/exporter.  I recommend upgrading to a recent version of PhpSpec.. @ciaranmcnulty I wonder if you would consider removing the bc-break label from the PR, and consider it for merging into the master (PhpSpec v3) branch?. @avant1 \"And there is even PR to fix that issue, but it is not merged yet\" - update: a variant of that PR made it into Prophecy 1.7, released yesterday.. @ciaranmcnulty Retargeted to 2.5 branch. Added extra commit changing a Behat test and the symfony/console dependency version, to work in PHP 7.1 with composer install --prefer-lowest.. @ciaranmcnulty When I added a PhpSpec 2.5 build with composer update --prefer-lowest in PHP 7.1, the build failed.  It was Behat dying half way through with a 255 exit code.\nI've investigated again, and it turns out it only does this in 7.1 with symfony/console <=2.6, and only when Behat is run with the --format=progress flag.  Other formats of output are fine, making this basically a build problem and not an application problem.\nThat being the case, I'd suggest closing the PR, and I'll do another one that just changes the Doctrine dependency thing on its own.  Up to you though.. Looks like this has been taken care of in another PR already.. Oh, is it going to be done anyway?  I'll close my PR then :+1:. Docs changes pending. @ciaranmcnulty retargeted.. This is in relation to build breaks like https://travis-ci.org/phpspec/phpspec/jobs/238255558 .. If you're asking about the 'get_class' commit, the issue is that you are no longer allowed to call get_class() on null.  Therefore, several of our tests need $someException->getSubject() to return an object to pass in PHP 7.2.\nIf you mean the method signature thing, it is https://github.com/phpspec/phpspec/blob/2e969c7d8c6437490b7aa0ab51a3302d15bb7211/src/PhpSpec/IO/IO.php#L21 vs https://github.com/phpspec/phpspec/blob/2e969c7d8c6437490b7aa0ab51a3302d15bb7211/src/PhpSpec/Console/ConsoleIO.php#L184 which is causing issues in the 7.2 build lately.\n. In relation to the get_class() stuff, it is lines like https://github.com/phpspec/phpspec/blob/f5a8388e6d6ec0b279a8e09375c5dcf8975c4432/src/PhpSpec/Listener/MethodNotFoundListener.php#L73 which are causing issues.  This is avoided by changing the relevant spec, so that the exception stub actually returns something when you call getSubject() on it.  There are several others very similar to this.. Closing in favour of https://github.com/phpspec/phpspec/issues/1106 and https://github.com/phpspec/phpspec/issues/1107.. function it_calls_the_thing(Collaborator $collaborator)\n{\n    $this->beConstructedWith($collaborator);\n    $collaborator->importantMethod()->shouldHaveBeenCalled();\n}\nIs this what you are trying to do?. I suggest closing this bug now that https://github.com/phpspec/phpspec/pull/1224 has been merged.. I suggest rebasing the branch now the build has been fixed. @jakzal we fixed the tests, if you rebase your branch it will probably pass the build. @DonCallisto I can see your issue with the failing tests. We need to introduce a change such as https://github.com/phpspec/phpspec/pull/1224 to stop the tests from failing. The error was not caused by your PR.. @DonCallisto yeah, that's a good point. Do you think it would be better if I added that?. Happy to change the test in any way people like, if it will get the PR out the door. Quite keep to make the tests pass on master for the benefit of other contributors though.. @ciaranmcnulty PR retargeted. Will do\n. I'm pretty sure config file configurers outnumber CLI requirers - it isn't that complicated to test the config file.  I don't want 2.* though - we're trying to prepare the project for version 3.0 now.  Happy to change it to \"phpspec/phpspec\": \"[your preferred version]\" if that is preferred though?\n. These are the ones I've found while working on extension upgrades and looking at diffs in the project, but I'll have a more thorough look and see if I can do another PR if I find any more.\n. I added it because I was asked to by another contributor (https://github.com/phpspec/phpspec/pull/919#discussion_r64147357), but I don't believe it makes any difference either way.  I'll make sure the two things are consistent.\n. Yes, I'll change it.\n. More than happy to make this consistent within the file, but I think it's better if I do that in a separate PR.\n. IIRC ^2.7 is the convention, isn't it?  I'll do a PR in a bit.\n. I'm sorry, I'm not sure how that would work, unless there was another Container-Interop compliant container you would like us to use as PhpSpec's own container?  I chose this one because the (obviously unstandardised) configuration process was similar to the internal one it replaces, but I'm open to other suggestions.\n. That's true, although the PR isn't quite at the point where we can remove this interim measure just yet.  This is because I haven't put a composite container.  Hoping to get there very soon though.\n. As would I, and I'll think again to see if there is a way of sorting out the container situation without dealing with the existing IO snafu, but I wasn't able to come up with one originally.  Very happy to try again though, to see if the same advantages can be conferred by some slimmer changeset.\n. ThrownExpectation is not an Expectation\n. Ref https://github.com/phpspec/phpspec/pull/1024\n. Thanks for that.  I've upgraded the minimum PHPUnit version to 5.5, so the build passes with composer update --prefer-lowest.. Sure, can do.  Just sort of copied last year's really.\nDo spec authors need to worry about the return typehints in internal classes?  I thought that might be of more interest to extension authors.. ",
    "vilartoni": "@ciaranmcnulty I see. Ok, thanks for the tip! ;-)\n. ",
    "hanneskaeufler": "Yeah sorry, I realised too late that there are also some behat features touching this behaviour and actually exposing a regression I introduced :+1: Will try to look into this later today.\n. So this seems to get the specs passing, I added another example for the kind of empty methods that had me failing some behat features.\n. You make a good point, I'm not very fond of those empty methods either. But I guess we will still have one or two of them unless we have an interface for each method.\n. Lemme know if it's worth rebasing this?\n. No worries, rebase done.\n. My pleasure, I learned some things \ud83d\udc4c\ud83c\udfff\n\nOn 29 Aug 2016, at 09:51, Ciaran McNulty notifications@github.com wrote:\nI'm no longer sure this is the direction to go in, but thank you for the hard work implementing it\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi @stloyd, sorry, not quite sure what you mean. array_slice will silently yield as many elements as possible, even if $length exceeds the actual size of the array when the end of the file is reached for example?\n. \n",
    "huglester": "Hello @ciaranmcnulty \nwell I quite don't understand. because I also tried something like:\n$this->shouldReturn(null)->during('__construct', [1]);\nbut I am not able to test, that constructor does not throw an Exception... that is strange thing :/\nthe problem here is that the only thing the Class validates is in the constructor, so I can not call some other methods on the class\n. Well, I am trying approach with validating simple variables, like quantity etc. And I am just throwing exceptions, which are handled by app, if the value of specific variable is not valid.\nfor now I have just added dummy method, validate:\nphp\n$this->beConstructedWith(3);\n$this->validate()->shouldReturn(3);\nto check that there was no exception.\nBaybe there should be something like shouldNotThrowException() or maybe I, somehow, can overcome this?\nThanks\n. Thank you, that, indeed may help! I probably should file_put_contents later, so it will, for sure be easier to debug. Thank you! I think we can close this?\n. ",
    "MrNomNom": "Sorry. I tried to fix bug which was only in my env...\n. I agree with you. Just for clarification - how this fix blocks a release ?:)\n. :+1: \n. ",
    "dwickstrom": "Wow, I like that...\n. ",
    "clarkeash": "+1\n. ",
    "gnugat": "+1 for this feature. What about the spec for those collaborators? Should it also generate a spec skeleton?\n. What kind of problems? I'm interested, because I've always felt that it had several limitations (e.g. templates not flexible enough, usage of regex+replace to insert new code).\n. Instead of putting the generation/edition logic in specialized classes, we could put it in templates (listeners would decide which one to render).\nThis would mean a better templating engine, maybe even a third party one, but this should be worth it.\nThat's the direction I've decided to go in medio, after struggling with many \"pretty printers\", basically the same issue you're having (changes involving the templating are not yet available in my repo).\n. @Markcial please note that the extension has a major downside: it doesn't support phpspec templates.\nMemio templates can be customized (they are twig templates), but I still have to figure out a way to allow this in the extension.\n. @Markcial That's because I wanted to release a Minimum Valuable Product for v0.1. Insertion of use statement is already on its way, should be released next week in v0.2 (I've already got a working prototype, I just need some time to finish the refactoring).\n. @stof: yes, that's what Puli's Composer plugin does.\nSo you think it should check if it's already defined? I'll close this issue and open one in the Puli's dedicated bug tracker.\n. Thanks @ciaranmcnulty, that means a lot to me :) \n. Same as all the above, spec-gen would be fine without a 2.6.\n. I feel the need to add: as long as BC breaks are documented in an \"upgrade\" documentation, but I think we all implied it.\n. Probably by using backticks instead of asterisks\n. Actually, it's double backticks (because we use RST). There's a working example in Prophet Objects\n. Looks like that wasn't the issue\n. Thank you @avant1, you're amazing!\n. Maybe we should worry about typehinted arguments later? In my humble opinion it deserves a whole Pull Request on its own.. I'm not sure why we get an error, since the tests are running with Symfony3.... @alcaeus oh you're right! Looks like the issue comes from Prophecy, I'll see what I can do there. Should be fixed once https://github.com/phpspec/prophecy/pull/373 has been merged to prophecy's master.. Thanks, it should be fixed now\n. ",
    "ubick": ":+1: \n. ",
    "rtuin": "Great feature, and +1 for doing this for interfaces only! :+1:\n. The method generation for collaborating interfaces only, that is.\n. Great idea, good discussion. I support generating final classes.\nSome thoughts:\n- Should be default behaviour\n- User should not be able to turn this off via configuration, but must change the template instead (or remove the final keyword on generated classes)\n- As this encourages design by contract the user could be asked to generate a belonging interface (with e.g. <concretename>Interface as name). I feel this will improve the workflow for users.\n- Introduce this only in a new major version\n- Reason behind this should be clear from the (getting started) docs.\n. > Being prompted to create an interface for every class would fast become a living nightmare, and calling it *Interface is something I'd actively discourage.\n@ciaranmcnulty I was just thinking out loud and I agree with you. We could perhaps generate the Interface from the shouldImplement() method, but that's a whole different feature. Not worth discussing further in here.\n. @ciaranmcnulty @MarcelloDuarte That's a great idea! But I agree with @everzet that we shouldn't give users too many choices. So how about the final keyword is automatically added after the generation triggered by a shouldHaveType() or shouldImplement(). If I'm not mistaken the entire suite is run after code generation, so this will instantly reveal the possible design flaws/inheritance abuse to the user.\n. Nice PR. If it is decided that this will be a config option I propose a more natural language approach: \"generate.final_classes\" for example.\nAlso an entry in the documentation would be good when the feature gets introduced.\n. Agreed. Of course the current phpspec code display these opinions, but is there a list of them somewhere to start off with?\n. ",
    "bgallagh3r": "I guess that will have to do for now.  Thanks for the tip.\n. ",
    "MarioBlazek": "Hi all, I would like to start contributing to phpspec project. This feature looks very interesting, can I go for approach 1 and implement \"shouldBeApproximately\" matcher ?\n. Level of precision should definitely be a parameter. I will implement it, and do PR.\n. ",
    "nocive": "+1\n. ",
    "andrewmclagan": "to make it clearer in Laravel I would use the call: App::bind('PropertyInterface', 'Property');\nNow whenever a call to PropertyInterface is called I actually get a class of type Property returned. This means if down the line I want to change out Property for another implimentation I can do that by simple calling: App::bind('PropertyInterface', 'MyNewPropertyImplimentation');\nInversion Of Control \n. ```\nfunction it_adds_property(PropertyInterface $property)\n{\n    $property->getKey()->willReturn(1);\n$this->addProperty($property);\n$this->properties->shouldHaveCount(1);\n\n}\n```\nAlthough i get method 'Double\\PropertyInterface\\P1::getKey()' is not defined.\nIm guessing this is because my implementation of PropertyInterface class extends Laravels Eloquent ORM model driver. So it inherits the getKey() function.\nPHPSpec knows that $property implements PropertyInterface although it has no idea that it extends Illuminate\\Database\\Eloquent\\Model and that I really want Property an implementation of PropertyInterface\n. getKey is just a generic Active Record function inherited by a model class.\nany actual domain / bussiness logic lives in the interface PropertyInterface\n. from PropertyInterface.php\n/**\n * Adds a property to the product.\n *\n * @param PropertyInterface $property\n */\npublic function addProperty(PropertyInterface $property);\nand yes, correct, it calls getKey()\n. why is that? Sorry I'm not doubting you at all. Im only using PHPSpec for the first time today.\nI would just love a further explanation. \n. Yes, that does. I just dont see how to get around an issue that basically is looking for a database. further investigation is required :-) thanks\n. ",
    "anagnam": "Yes, I get trapped by this and solved by putting bin/src instead of just src in the autoload portion of the composer.json file. Hope this helps fellow newbies out there starting out with phpspec\n. ",
    "codereviewvideos": "To add a little extra helper here, make sure your composer.json is as per the docs: \nhttp://www.phpspec.net/en/latest/\nAnd also, run composer dumpautoload after making any adjustments. Solved it for me :)\n. ",
    "gondo": "i found an issue. some other package referenced \"phpspec/php-diff\": \"dev-master\" what in fact is equal to v1.0.2 but is not matched by ~1.0.0\ni had to remove that package for now\n. thanks, just looking into that\n. ",
    "avant1": "When you check returned value of your subject class method, you should use should* matchers (shouldReturn in this case).\nSo the last line of your BackupManagerSpec::it_can_remove_old_backups method will be:\nphp\n$this->removeOldBackups(5)->shouldReturn(['foo1.sql', 'foo4.sql']);\nI had the same problem, and I spent some time to find a solution. \nMaybe error message can be made more clear?\n. If I understand problem correctly, everything working fine for me now:\npeople@people:~$ curl -I phpspec.net\nHTTP/1.1 302 Moved Temporarily\nDate: Sun, 25 Jan 2015 06:48:36 GMT\nConnection: keep-alive\nLocation: http://www.phpspec.net/\nServer: cloudflare-nginx\n. I think that would be useful feature for newcomers.\nWhen I started using phpsec I've wrote non-testing tests sometimes. Well, sometimes I do it even now :smile: \nIt could be implemented like not fatal warning with option to suppress them.\n. This seems to be resolved too.\n. I'd love to.\nProbably, I can find free time during next week.\n. I've bumped phpspec/prophecy version up to dev-master, tests are green.\nSo, before this PR can be merged, I should set stable prophecy dependency version, am I right?\n. Done.\n. @ciaranmcnulty Thanks for reviewing. I've made appropriate changes.\n. Reasons to omit public keyword can be found here: https://github.com/phpspec/phpspec/pull/590#issuecomment-67995169\n. > Maybe there is a way, that I can 'echo' real actual output from method (without diff or something).\nYou can use ObjectBehavior::getWrappedObject() for that. It will return object under specification.\nSo, your spec could look like\n``` php\n    function it_composes_single_fillable_array()\n    {\n        $actual = $this->getWrappedObject()->getFillabeFields();\n    $this->getFillableFields()->shouldReturn(\"\n    'question',\n    'answer',\n    'is_active',\n\");\n}\n\n```\nSpaces troubleshooting sometimes can be rather hard. Usually I put actual return string to file and view it with all symbols (spaces, new lines, carriage return) being shown. \nHope this helps.\n. Sure, feel free to close issue if it is solved.\n. phpspec assumes that everything you want to get in example (or let/letgo methods) arguments is a \"mock\" (or a spy, i'm actually not good at terminology) of actual object you will use in that example.\nWhen you don't type hint let method argument, special object (which is instanceof \\stdClass) is being passed to your constructor. But if __construct of actual class has array type hint, then php will generate error (cause object is not array obviously).\nWhen you type hint spec method argument as array, special object is being passed to spec method too, and error is being raised for the same reason.\nYou can solve this problem passing regular array (created manually) to beConstructedWith.\nYour spec file could contain:\nphp\nfunction let()\n{\n    $this->beConstructedWith(array());\n}\nUsually constructor array parameter infuences the object behaviour, so it makes sense to pass different arrays and test them separately. So usually you don't ask phpspec \"just give me any array I could create my object\". But if you need \"any array\" - you can easily create empty array manually. \nAlso I agree it is a bit confusing for phpspec newcomers. Probably more verbose error should be raised when example argument is type hinted as array. \n. Support for PHP versions prior to 5.6 was removed in 3.0, so the issue can be closed.\n. Changing console application terminal dimensions (method \\Symfony\\Component\\Console\\Application::setTerminalDimensions) probably will help with that issue. But that more looks like a hack, not a solution.\n. The same notice occurs when running phpspec using gitlab CI multi runner:\n\nPHP Notice:  Undefined index: HOME in D:\\path\\to\\project\\vendor\\phpspec\\phpspec\\src\\PhpSpec\\Console\\Application.php on line 243\n\nThe file and line are not the same because my project still uses phpspec 2.0.1 (see https://github.com/phpspec/phpspec/blob/2.0.1/src/PhpSpec/Console/Application.php#L243)\n. :+1:\n. Answering your questions:\n\nIs someone else able to reproduce this, or have I a botched php/phpspec installation or whatever? I'm surprised nobody has complained already.\n\nI've reprodused this issue on win7 with phpspec 2.3, version 2.2 works fine.\nI am using windows as my main OS, but usually I use Vagrant for development, there are some older projects runned on windows, but they used phpspec 2.2, so I haven't faced this problem before.\n\nPhpSpec works fine, the error message is annoying but I can live with it. But the question is:\nDo I keep trying to understand what's wrong, or maybe someone more clever than me already has the answer?\n\nQuick look at the code found several problems.\nGenerated command passed to passthru() on windows looks like\ncmd\nPHPSPEC_EXECUTION_CONTEXT=\"{ generated-types :[ Test ]}\" C:^\\WebServers^\\usr^\\local^\\php^\\php.exe \"c:\\WebServers\\home\\phpspec-win-bug\\vendor\\bin\\/../phpspec/phpspec/bin/phpspec\" \"run\"\nHere phpspec tries to set env variable and then rerun itself. Problems:\n- Windows thinks that PHPSPEC_EXECUTION_CONTEXT is a path to binary, it doesn't find this and fails with error on screenshot. Correct way to set env variable for session is to use SET command. \n- Generated json with types worth to be rerunned contains double quotes (because it is json :smile: ), but according to php.net\n\nOn Windows, escapeshellarg() instead removes percent signs, replaces double quotes with spaces and adds double quotes around the string.\n\nso json becomes invalid.\n- Even if we add SET before env variable name and solved problem with quotes, and command will look like\ncmd\nSET PHPSPEC_EXECUTION_CONTEXT={\"generated-types\":[\"Test\"]} C:^\\WebServers^\\usr^\\local^\\php^\\php.exe \"c:\\WebServers\\home\\phpspec-win-bug\\vendor\\bin\\/../phpspec/phpspec/bin/phpspec\" \"run\"\nthen SET command will think that everything that goes after = is value of env variable. So we should tell CMD that this is two commands. And command becomes (note && between commands).\ncmd\nSET PHPSPEC_EXECUTION_CONTEXT={\"generated-types\":[\"Test\"]} && C:^\\WebServers^\\usr^\\local^\\php^\\php.exe \"c:\\WebServers\\home\\phpspec-win-bug\\vendor\\bin\\/../phpspec/phpspec/bin/phpspec\" \"run\"\nThis command finally works as expected.\nSo rerun command format should be changed on windows, and json could be encoded again (with base64_encode for example) to work on windows. Probably after this fixes everything will work fine on Windows.\nFeel free to try yourself and to create pull request. If you will face difficulties you can always ask questions.\n\nShould I start using Unix-like systems for coding and not even noticing errors like these and live a happier life?\n\nIt sounds like a good idea, but no one should tell you what to do :smile:. Probably most of developers use unix-like systems (Linux or Mac), but also there are developers who use Windows. \nTools like Vagrant allow you to work on Windows with projects which should be runned on linux (still there can be windows-specific problems). \nSmall projects without complex environment can be developed on windows. And phpsec generally supports Windows.\nAnyway you can try both and pick OS you like more for development. \n. Fixed problem on php5.3 (callable type was introduced in 5.4).\n. Thought about that too. In php7 was added ReflectionType class, so check becomes even easier. I'll add appropriate changes later.\n. Added necessary changes.\n. Added some changes, also rebased on master.\n. There is an extension that implements this functionality: https://github.com/ciaranmcnulty/phpspec-typehintedmethods\nHere can be found reasons why is it not added to the core and link to original discussion.\n. Wow, great work!\nI've tried to set up similar script too, but I failed to unzip archive using PowerShell :smile: \nThere are mostly errors with directory separators and EOL's (there are some places in code where \\n is being used). \n. There is an existing issue for this problem: #773\n. I've started working on it, but there is a lot of failed tests on windows for now. I wanted to make existing tests pass on windows before implementing fix for this problem (CI env for windows was added in #797)\nBut I don't know when will I find time to work on it.\n. You can amend you last commit with this typo and then push changes to your branch with --force flag. Gihub will detect that PR is changed automatically.\n. I'm not sure if it is OK to ignore error of temp directories removing.\nAt the moment of directory removing it is already empty, but Windows keeps saying \"Directory not empty\".\nI cannot understand Scrutinizer errors, it refers to pull request that is not merged yet (#850), and as I can see that PR does not even change ObjectBehavior.php file (where coding style errors are found). \nTravis is being failed because openssl extension is disabled on 5.3.3 (note here). \nThe easiest way to fix this error is use 5.3 instead of 5.3.3, but maybe this extension is installed, but not included in .ini file, so we could enable it in before_install script, I'm not sure.\n. This is an option of run command of phpspec.\nTry executing this in command line:\nbash\nbin/phpspec run --help\nor simply \nbash\nbin/phpspec r -h\nReplace bin/phpspec with actual path to phpspec executable file.\nYou'll see --format option (with shortcut -f) and list of available formatters there.\nThis information is also available in documentation: http://www.phpspec.net/en/latest/cookbook/console.html#run-command\n. As for filter by example name - personally I am not sure if it would be very helpful for locating specs because:\n- Running single example using line number (as @ciaranmcnulty shown) is probably simplier way, cause we already have failing example line number in output.\n- Isolating several related examples for debugging usually is not needed, because with phpspec you usually do not store any state of your application, you just check if behavior of single subject class follows specification (at least, phpspec forces you to write specs in that way). Correct me if I am wrong.\n- Specs usually run quickly (my personal execution time record is about 20 seconds for 1k+ examples on dev machine), so you can just rerun whole class on namespace specs and receive quick feedback.\n- For grouping specs we already have suites, it is probably more reliable way to rerun set of specs using suites instead of example name fragment.\nBut this functionality may be implemented in extension.\n. If I understand the code correctly, the error you see (\"P1 does not exist\") is because of the fact that $view variable in \nphp\nfunction it_returns_json_from_tranformer(View $view, SimpleEntity $entity, TransformerInterface $transformer)\nis not actually instance of class View. It is an collaborator in terms of phpspec. \nAnd JsonViewTransformer::testTransformer will not receive View object as parameter, it will receive a special object of generated in runtime class with name like Double\\View\\P1.\nAnd when you extract name of  $view you receive P1, and there is no transformer for P1 (there will be transformer for P3 (incrementing counter is used for collaborators), cause when you add transformer, it is not transformer too, but one of those automatically generated classes).\nAll this magic is needed to make phpspec working.\nSo relying on class names is not the best path when using phpspec. I'm not sure if it can be easily fixed when using collaborators.\nBut you can add method supports(View $view) to TransformerInterface, which will check if transformer supports transforming of given $view. You can start with simple instanceof check inside it.\nIn fact, that approach will be much more flexible and less fragile. You can rename transformers without necessity to rename corresponding view class. You don't need to track naming collisions (if classes with the same name are defined under different namespaces).\nIt will be more easy to change logic of transformer choice in future.\nSo, phpspec is forcing you to write reliable and safe code.\n. Does it make sense to add a possibility to override used spec template via configuration?\nSome thing like \nyml\ntemplates:\n    specification: path/to/spec-template.tpl\n    class: path/to/class-template.tpl\nin phpspec.yml.\nThere could be a set of predefined templates (at least for specification templates) with type assertion, dummy example or example template without name and body.\nIt would allow developers to choose templates they need, and even introduce their own templates if it would be necessary for them. For now we should edit templates in vendor directory to use custom templates.\nHowever, the default template should be chosen anyway.\n. Ahh, I see, thanks!\n. Yeah, I've even discovered separate page in docs related to templates.\n. Good catch about scalars!\n\nIt occurs to me that callable shouldn't be allowed either.\n\ncallable and array are handled here: https://github.com/phpspec/phpspec/blob/32d0c02f0be297e2639682677adbcced5b7538a5/src/PhpSpec/Runner/Maintainer/CollaboratorsMaintainer.php#L146\nAnd the initial version of typehints protection was implemented there too, but it was moved from there during implementing PHP7 support.\nProbably things can be simplifed in CollaboratorsMaintainer, it makes sense to move all collaborators typehints checks to one place. Will do later.\n. Seems like we cannot remove typehint checks from CollaboratorsMaintainer as it is a guard for PHP5.6 since typehint rewriter is being used only for PHP7.\n\nPerhaps scalars and callable/iterable can have different messages in the error though, something user-friendly.\n\nDevelopers would see exception message of the following format:\nCollaborator must be an object: argument 0 defined in spec\\Path\\To\\ClassSpec::it_can_do\nDisallowedNonObjectTypehintException is being used only internally.\n. On Windows home directory is read here: https://github.com/phpspec/phpspec/blob/b7dde5f5bf4aa79ec18f00c91f59bf2d81ff80da/src/PhpSpec/Console/ContainerAssembler.php#L341\nHOMEDRIVE variable should be set to something like 'C:', and HOMEPATH to full path to fake home.\n. Using traits in specs on php7 is not supported for now because of the way how phpspec works on php7.\nYou can find more information in #825 and #966, looks like the issue you describe is similar.\n. Try unwrap exception collaborator using $exception->getWrappedObject() as an argument to willThrow():\n```php\nfunction (\n    \\GuzzleHttp\\Client $http,\n    \\GuzzleHttp\\Exception\\ClientException $exception,\n    \\Psr7\\Message\\ResponseInterface $response\n) {\n    $http->request(...)->willThrow($exception->getWrappedObject());\n    $exception->getResponse()->willReturn($response);\n    $response->getStatusCode()->willReturn(404);\n$this->someMethod()->shouldBe('Something related to 404');\n\n}\n. @BentCoder `will` calls are not assertions. They are predictions. Linephp\n$event->hasChangedField('message')->willReturn(true);\n```\nsays that when method $event->hasChangedField() with argument 'message' is called (in your event listener code) then it will return true.\nAssertions methods start with should (like shouldReturn, shouldBeCalled).\nIf I understand your question correctly, you expect that since no prediction calls (starting from will) on $entity were made then spec should fail.\nBut in your spec you create $entity by hand:\nphp\n$hello = new Hello();\nSo it is not special phpspec object, it is just instance of Hello class. You cannot make predictions on it using $hello->foo()->willReturn('bar'). And phpspec does not track calls on objects created manually.\nIf you want to check that some calls on $entity were made you should pass it as argument to the example:\n```php\nclass MessageEventListenerSpec extends ObjectBehavior\n{\n    function it_should_whatever(\n        PreUpdateEventArgs $event,\n        Hello $entity //<---------------\n    ) {\n        $old = 'Old hello';\n        $new = 'New hello';\n    $event->getObject()->willReturn($entity);\n    $event->hasChangedField('message')->willReturn(true);\n    $event->getOldValue('message')->willReturn($old);\n    $event->getNewValue('message')->willReturn($new);\n\n    $entity->setMessage($new)->shouldBeCalled();\n\n    $this->preUpdate($event);\n}\n\n}\n```\nAnd somewhere in event listener:\nphp\n$entity->setMessage($event->getNewValue('message'));\n. BTW there is an issue for similar situations which describes how we can improve usage experience for newcomers: #627\n. I agree, this could be useful.\nBut current implementation doesn't work for me too.\nFirst of all, seems like now desc command will offer to describe classes that belong to dependencies of project. I don't think that developers may want to describe third-party code (the code they do not own):\n\nAnother possible problem I see is that \\Composer\\Autoload\\ClassLoader::getClassMap() returns list of classes only for dependencies with \"classmap\" autoloader:\n\"autoload\": {\n    \"classmap\": [\"src/\"]\n},\nBut it is not the only (and not the most common) way you can define autoload config for composer: https://getcomposer.org/doc/04-schema.md#autoload.\nAt least this is how your code works for one of my projects (it uses psr-4 autoloading, and my project namespaces are not autocompleted).\nAnother possible problem is with multiple registered autoloaders (composer allows this). For example when you install phpspec globally or use it from phar binary. For now you use the last \\Composer\\Autoload\\ClassLoader autoloader, and it is probably the best we can do.\nAnd is it possible to write scenario to check autocomplete values?\n. There is an existing issue related to that problem in phophecy repository: https://github.com/phpspec/prophecy/issues/303\nAnd there is even PR to fix that issue, but it is not merged yet: https://github.com/phpspec/prophecy/pull/311. Try this:\nphp\nfunction it_ensures_me_i_am_not_pretty_at_all()\n{\n    $am_i = $this->ask();\n    $am_i->shouldThrow('Exception')->during__invoke(false);\n}\nYou return object of Closure class in ask() method. And it has __invoke() method.\nNot very elegant, but should work.\n. Try running phpspec in verbose mode, maybe it will show extended difference:\nbash\nbin/phpspec run -v. The related prophecy PR is not merged yet, but tests are green.\nIt is a bit strange, but that is even better, no need to check if installed prophecy version supports this functionality.. You cannot mock methods of class under specification with PhpSpec.\nThis is intentional limitation that forces you to avoid bad design decisions and generally leads to a more quality code.\nYour particular issue seems not to be related to PhpSpec directly. You define that action() should return string, but seems like you do not initialize $this->action with any value, so by default it is null.\nAnd when you return null from method which should return string PHP throws TypeError.\nSo you have several choices:\n- give any default value to $this->action (like empty string)\n- pass the initial value of $this->action to constructor of you class (and use $this->beConstructedWith('default-action-value') in spec) or set it via setter (don't forget to call setter in spec) if it makes sense\n- allow null or string to be returned from action() if it makes sense for your application:\nphp\npublic function action(): ?string\n. It looks the same with and without this changes on console with black background. So everything seems fine.. The issue seems to be related to doctrine/instantiator package, which is used by PHPSpec.\nWhich version of that package do you have installed? You can get version using this command:\nbash\ncomposer info | grep doctrine/instantiator\nSimilar issue was fixed in doctrine/instantiator 1.0.5 (see doctrine/instantiator#20).\nIf installed version is below 1.0.5 try to update it.\nAnd btw shouldn't we bump that package version requirement in composer.json too?. Well, then probably the issue should be reported to doctrine/instantiator repository.\n. Could you please provide minimal reproducible scenario?. Generated opcodes are different.\nAdding \\ prefix gives 2 opcodes less compared to version without it.\nSince there are less instructions, it should be executed faster, right?\n. > i assume there is no penalty for prefixing other methods? The plus is that it is consistent in styling, so i am tempted to leave it.\nFrom my point of view prefixing all function calls does not make much sense here. As I know it is not a common approach for modern PHP projects.\nSo it will be surprising to all new (and existing) contributors, and it will require us to add a code style check for that (not sure if Scrutinizer supports this) to make sure it will stay consistent in future.\nChanging several most frequently called places with a proper comment will bring performance improvement without forcing changes to code style.\n. I was thinking about following examples where strict types might be useful: https://3v4l.org/s3YGm\nWithout strict types all of those calls \"work\", and they may lead to unexpected results.\nNone of those examples will work with enabled strict types mode. You will get explicit error message, describing that you are doing something wrong (adding false to 4 does not make any sense).\nFrom other point of view enabling strict types by default may confuse developers who are not aware of primitive types in PHP (cause passing wrong types to builtin functions will not work anymore). But this will nudge them to read about that new features in PHP.\nThis also touches other arguable question: is throwing error as soon as possible better than trying to keep working as long as possible (though that may lead to unexpected results)?\nFor now I think that explicit and early errors are better than wrong calculation results. And even exceptions on production are useful if you monitor them carefully.\nBut I agree this might not be best choice for all teams and projects.\nSo feel free to close this PR if no other opinions appear.. Hello.\nAre you using phpredis/phpredis extension for Redis? I assume you are.\nA quick search over its source code shows that lRange method is defined in a lower case as lrange. I'm not strong in reading PHP extensions code, but seems like PHP_MALIAS means \"method alias\". Correct me if I am wrong.\nThere are also lower case lrange calls in extension tests.\nPHP itself allows you to call methods with case that is not equal to case used during method definition: https://3v4l.org/j6vtR\nBut PHPSpec will not register a call in that case. \n. You can try to open a PR against https://github.com/JetBrains/phpstorm-stubs/ repository (where stubs for such built-in classes are stored) to fix this problem.\nHowever extension README uses lRange name, so I'm not sure what should be fixed here:\n1. PHPStorm stubs\n2. Extension README\n3. Extension source code\n. What if you do not create owners by hand but require them as argument to example method? Something like this:\n```php\nfunction it_is_awesome(Policy $ownerIdentityPolicy, Owner $firstOwner, Owner $secondOwner)\n{\n}\n```\nIt should work fine in that case.\nHowever your case seems valid too for me. So probably this should be fixed.\n. All arguments that are equal to false (empty string/false/numeric zero) will be outputed as 'null' if I do so. I will use ternary operator instead of if here:\nphp\n$actualArgument = is_null($actualArgument) ? 'null' : $actualArgument;\n. Any suggestions? I don't have any ideas. This looks a little like a hack, but it is a small and easy to maintain hack :smile: \n. Agree.\n. This condition is being used twice, probably you could create a method which checks this or save result into a variable with meaning name.\n. File name seems to be incorrect.\n. You could use short array syntax in both places here.\n. I'm not native English speaker, but scenario name looks strange for me.\n. Since #910 have been merged, we can use ::class here, at least for new scenarios.\nAfter all, behat features also play a role of documentation.\nBut I'm not sure if it is worth to change in that case.\n. I'm not sure if removing namespace completely is a good idea.\nWhen you use only matchers defined in your project - it would be OK. \nBut if you use third-party matchers - class names (without namespaces) can be equal, and if you use two matchers with the same name the first will be overwritten. That can lead to issues that are hard to understand.\n. Also we can check if given classes exist and implement PhpSpec\\Matcher\\Matcher interface.\nFor now, if given matcher is not PhpSpec\\Matcher\\Matcher, phpspec silently exists with non-zero status code.\n. This double seems to be unused in example.\n. I'm wondering if white colors are readable on terminals with light colored background. Or we should not care about this (since there is white colored style for code and nobody complained about this)?\n. You can use https://img.shields.io/appveyor/ci/ciaranmcnulty/phpspec/master.svg\n2.5 branch works too, and other names return \"invalid\" state.\n. Do these changes bring any improvements (like removing code to support both 2.7 and 3.x, or we require 3.x because of useful features that we want to use but they exist only in 3.x)?\nIf I correctly understand how composer version constraints work this will forbid using future versions of phpspec with symfony 2.7 (which is LTS and will be maintained until mid 2018).\nI'm not sure if updates just for the sake of updates worth it.\n. Ah, now I see that PR target branch is 4.0. Probably by the time phpspec 4 will be released symfony 2.7 will be close to its end of life.\nNow this makes sense for me, thanks for the explanation.. As this method becomes more complex maybe it makes sense to introduce a separate class (or even interface) like NamespacesAutocompleteProvider and cover it with tests. What do you think?. This would work for most cases but will be broken for this code:\nphp\n<?php\nnamespace Foo {\n    class A {}\n}\nAlso pattern can match text occurrences.\nMore reliable way of fetching namespace is using php tokenizer: http://php.net/manual/en/function.token-get-all.php\nAnd BTW this would not work with projets that use PSR0 with underscores autoloading. I'm not sure if we should support it too for autoloading.. desc command takes class name as parameter, and class names use \\ as separator, but you use / here. Is it intentional?. Or maybe sources directory structure can be analyzed to provide autocompletion. \nThat could be more simple and edge-cases free method.. Tests and Resources dir names are commonly used in symfony bundles, right?\nResources can be a valid namespace part outside of bundles, so I'm not sure here.\nEven if phpspec will show them in autocomplete I think it would be fine.\n. NamespacesAutocompleteProvider was just a quick guess of possible name for that class, so feel free to change it if more suitable name can be found :smile: \n. You can add array type hint here.. Since phpspec requires PHP 5.6 or higher it makes sense to use short array syntax in new code.. This seems to be unused.. One thing that I'm worried about is the way of interaction with Symfony\\Component\\Console\\Question\\Question.\nThere is \\PhpSpec\\Console\\ConsoleIO class that implements work with console input/output.\nAnd there is also \\PhpSpec\\Console\\Prompter interface.\nMaybe this asking stuff should be moved there too.\nThis will allow us to reuse autocompletion functionality in other commands, and it will make possible to write behat scenario to check autocomplete values.\n. There is attempt to create namespaces provider interface in #1078\nIf it makes sense to merge autoloading namespaces provider and autocomplete namespaces provider then you can implement it and name it in a way telling that it collects list of namespaces for autocompletion.. To be honest I was thinking about something more simple like adding the following method to \\PhpSpec\\Console\\Prompter interface:\nphp\npublic function askQuestion(string $question, array $autocompleteValues = []): string;\nand implementing it in \\PhpSpec\\Console\\Prompter\\Question (it already has access to symfony QuestionHelper).\nBut creating hierarchy of questions may be useful too.\nI don't want to force you to specific design choice, just wanted to make sure that new console-specific code will be  reusable and testable.. Why have you replaced registerCustomMatchers() call with partial content of that method? You missed the code that ensured that passed matcher class is really a Matcher. Thats why the tests are red.\nFor me it makes sense to leave this block unchanged, as it seems to not be related to the PR.. Missing space in 'matchers'!== $key. Since ReflectionFactory parameter was removed from constructor it can be removed here too.. ",
    "driesvints": "@avant1 Ugh, you're totally right. Should have seen that.\nBut yeah, a clearer error message would be great.\nEdit: gonna close this since my problem was solved.\n. ",
    "yguedidi": "@GrahamCampbell Tests fixed! Sorry I edit the file quickly with the GitHub interface.\n@pjedrzejewski @MarcelloDuarte PSR-2 violation.\n. @MarcelloDuarte I understand.. Thank you\n. :+1: this can also help newcomers with best practices\n. ",
    "nexik": "Yes this fix the problem, so I'll close this PR\n. ",
    "pedrochaves": "Whoa, I don't know how I missed it, sorry :(\nI understand the motives now, thank you.\n. ",
    "trq": "Oh, I wasn't even aware of 2.1, thanks. The public static factory works as expected in 2.1, but the private construct example also still seems to instantiate without issue.\n. ",
    "acasademont": "Yep, hitting this issue too. Related to #610 \n. +1 please, this would be handy to have :)\n. How about another argument to the during call to mark that the method is a constructor even though it's not called __constructor (because it's a static method)? @ciaranmcnulty @stof \n``` php\n/\n * @param string $method\n * @param array  $arguments\n * @param bool   $isConstructor\n \n * @return mixed\n /\npublic function during($method, array $arguments = array(), $isConstructor = false)\n{\n    if ($method === '__construct' || $isConstructor) {\n        $this->subject->beAnInstanceOf($this->wrappedObject->getClassname(), $arguments);\n        $instantiator = new Instantiator();\n        $object = $instantiator->instantiate($this->wrappedObject->getClassname());\n    } else {\n        $object = $this->wrappedObject->instantiate();\n    }\nreturn $this->runDuring($object, $method, $arguments);\n\n}\n```\nThen I can call\n$this->shouldThrow(new \\InvalidArgumentException('Foo'))->during('fromBar', [], true);\n. I can work on a PR if you see fit, duringInstantiation seems a nicer solution than mine\n. Done in #699 @ciaranmcnulty \n. This would come handy! +1\n. great!\n. Yes, much cleaner, i'll try to do it ASAP!\n. @ciaranmcnulty done!\n. btw, if you're ok with the syntax and the code changes i'll update the docs too to reflect the new method in the Throw matcher :)\n. Updated docs, feel free to merge now :)\n. :+1: welcome, and thank you too!\n. sure!\n. ",
    "james75": "I see so what is the 100% on the bar used to indicate then?\n. got it :) thank you for clarification \n. ",
    "alexislefebvre": "It looks like it's a duplicate of #119. ",
    "willharrison": "Doing this does not fix the issue.  I can still comment out beConstructedWith() and receive a passing test.\n. I have other tests in the Spec, I just didn't list them.  These tests all pass regardless of if they are supposed to.\nFor example, if I change $this->all()->shouldReturn(true) to $this->all()->shouldReturn(false), this test should fail.  However, it still passes.\nfunction it_should_use_model_to_get_all(Model $model)\n{\n    $model->all()->shouldBeCalled()->willReturn(true);\n    $this->all()->shouldReturn(true);\n}\n. I found the issue.  The mock class needs to be defined under the Spec class.\n. ",
    "Saeven": "I know this is old, for what it's worth, when you are plugged into something like Codacy and are enforcing PSR-2, which includes PSR-1, which has that method names must be declared in camel case...  we are forced into a situation where we have to ignore the bundle folders that contain phpspec tests.\nIt'd be nice if we did indeed have the option to comply with PSR-1 when using phpspec.  The two streams don't seem that divergent.  I feel ignoring spec files isn't optimal.\nSeems common-sensical that if it is in a phpspec test, and starts with it(underscore) or it[A-Z] one can be pretty damned sure it's intended to be a test.\nThanks though, for a stellar component.\n. This would work! :)\nhttps://github.com/phpspec/phpspec/pull/850\n. Thanks for answering so quickly Ciaran!\nI've got a phpunit bootstrap, ported it over using the phpspec-laravel project you linked, and have it firing.  I'm not familiar with the innards of phpspec, but it looks to me that all I need to do now, is inject the bootstrapped service manager into the test container.\n```\n    /\n     * Setup the ZF2 extension.\n     \n     * @param  \\PhpSpec\\ServiceContainer $container\n     * @return void\n     /\n    public function load(ServiceContainer $container)\n    {\n        chdir(DIR);\n    self::chroot();\n    self::initAutoloader();\n\n    $zf2ModulePaths = array(dirname(dirname(__DIR__)));\n\n    if (($path = static::findParentPath('vendor'))) {\n        $zf2ModulePaths[] = $path;\n    }\n    if (($path = static::findParentPath('module')) !== $zf2ModulePaths[0]) {\n        $zf2ModulePaths[] = $path;\n    }\n\n    $app_config = require getcwd() . '/config/application.config.php';\n\n\n    // use ModuleManager to load this module and it's dependencies\n    $config = array(\n        'module_listener_options' => array(\n            'config_glob_paths'    => array(\n               getcwd() .'/config/autoload/{,*.}{global,local}.php',\n            ),\n            'module_paths' => array(\n                getcwd() . '/module',\n                getcwd() . '/vendor',\n            ),\n        ),\n        'modules' => $app_config['modules'],\n    );\n\n    $serviceManager = new ServiceManager(new ServiceManagerConfig());\n    $serviceManager->setService('ApplicationConfig', $config);\n    $serviceManager->get('ModuleManager')->loadModules();\n\n    // how do I stuff $serviceManager this into my test container?\n\n}\n\n```\nThe crux is on the last line there.\nIs there a simple solution?\nThanks!\nAlex\n. also, can I supplant methods?  I'd need to get the service manager into whatever is returned by:\n$this->getServiceLocator() within the tested classes...\nThanks again!\n. Ok!  I worked on it a bit this weekend, admittedly after a few too many drinks!\nI've got things working, with an extension here:\nhttps://github.com/Saeven/phpspec-zf2\nBut there are some niceties I'd like to integrate...\nFor example, there are two specific calls I need to make on controller types, my tests end up looking like this:\n```\n<?php\nnamespace Spec\\Application\\Controller;\nuse PhpSpec\\ZendFramework2\\ZF2ObjectBehavior;\nuse Prophecy\\Argument;\nclass IndexControllerSpec extends ZF2ObjectBehavior\n{\n    function it_returns_a_view()\n    {\n        $this->getWrappedObject()->setServiceLocator( $this->getServiceLocator() );\n        $this->getWrappedObject()->setPluginManager( $this->getServiceLocator()->get('ControllerPluginManager'));\n    $this->indexAction()->shouldReturn('Zend\\View\\Model\\ViewModel');\n}\n\n}\n```\nI thought that a listener would be appropriate, but it seems as though the getWrappedObject isn't available at the beforeSpecification event:\nhttps://github.com/Saeven/phpspec-zf2/blob/master/src/PhpSpec/ZendFramework2/Listener/ZendFramework2Listener.php#L42\nIs there any way I can tap into the wrapped object from a listener?\nThanks!\nAlex\n. Alright, I think I've got it (no drinking!).  I created objects that the specs can extend, so that I can call setup function before the views.\nIt'd be really nice if there were a means to modify the specification's wrapped object through a listener.  Checking through the events, it looks as though the objects that are passed in the events (e.g., beforeSpecification) don't actually impact the specification at all.\nThen I could:\n``\n/**\n     * Run thebeforeSpecification` hook.\n     \n     * @param  \\PhpSpec\\Event\\SpecificationEvent $event\n     * @return void\n     /\n    public function beforeSpecification(SpecificationEvent $event)\n    {\n        $spec = $event->getSpecification();\n    //if( the wrapped object is an instance of a controller ){\n    //    perform controller setup on the wrapped object\n    //}\n}\n\n```\n. An update, I did get one working for Zend Framework 2.\nhttps://github.com/Saeven/phpspec-zf2\n. https://github.com/phpspec/phpspec/pull/850\n. Hm. It marked some stuff as bugs, but they aren't.   Hopefully this is ok.\n. The parameter is distinctly different from a path, you don't feel it's safe to infer that if it matches a suite name, it's a suite?  (e.g., no slashes and so forth)\n. I'm relieved that you're open to it!  I'm in the very nascent stages of a multi-module app, and running entire test suites, by module, is necessary.  Running the whole lot of tests for all modules when you are working on one of ten or so, can be quite a time sink.\nI added some cursory tests.  It piggybacks on existing classes, I'm not sure how exhaustive it truly needs to be; it's really a 'does the suite exist or not?' type of question that it must answer.  The rest is deferred to the PSR0 locator.\n. I will fedex :beers: if you merge this! :)\n. I swapped the tabs for spaces, looks like Scrutinizer needs a restart though.\n. I'll double the amount of :beer: ! :)\n. Understood, will do -- just been busy with work these days...\n. Sure!\n. ",
    "juanmaorta": "+1\n. ",
    "Markcial": "+1, if you are using a static factory pattern is supposed to have a private constructor, so then why would you need to call the construct of the class?\n. +1, i am trying to write a phpspec extension, the plain strtr function had me disappointed a little :( i would like to render more complex snippets, like for example an array of params like \"[id, name, email]\" that would be converted to \nprivate $id;\nprivate $name;\nprivate $email;\nwould be great to have a templating engine plugged there or having a more complete templating capabilities.\n. Oh thanks, i was going through this path actually, i will check this out :D\n. @gnugat I am using the fluent interface for the methods you provide in the api, there is still no need for templates  but the lack of use statements got me a little bit stuck, maybe i will do a PR to your repo if i get to understand how your library works.\n. I already found a method to set the uses with the fully qualified names, until the next release it works, but i will be tuned for the next release it  helps a lot creating the code in our behat and phpspec workflow :)\n. Just a moment please, i will update the PR with a feature instead of a spec test\n. Oh sorry, i will add again the spec then. Thanks to you (the phpspec folks), the gherkin syntax is very cool and easy to use, at least the way that is used in this project :D\n. only a slight mention about the new feature of shared namespace between specs and classes might be fine. Thanks for the merge :)\n. ",
    "mbbender": "+1\n. ",
    "greg0ire": "Anyone working on this? I hear 3 people tried and went silent, what's up? Otherwise I'd be willing to provide a PR. Also, is there a Composer public api that could be used? Or should ComposerResource from Symfony be used?. > Also, is there a Composer public api that could be used? Or should ComposerResource from Symfony be used?\nOh you had written the solution here all along, read too fast: \n\nComposer ClassLoader is returned by autoload.php and can be queried for the list of autoloadable prefixes.. I made a PR to symfony to detect things as part of the project or part of the vendors : https://github.com/symfony/symfony/pull/21539/files#diff-551c3855d7f43179583069216759396aR64 . Would that help? Or maybe something should be done to make this part of the Composer API?. This closure is not part of the public Symfony API, and probably never will, so no need to bump anything, copypaste it will be.. BTW I actually stole if from here : https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Resource/ComposerResource.php#L84. See here how to tell vendors and non-vendors apart, I hope this can be of some help here.. I started something in #1078 . @ciaranmcnulty you may merge if you are ok with it.. Rebased @ciaranmcnulty . Can you try https://github.com/phpspec/prophecy/pull/369 ?. Ok, thanks for trying anyway.. Yeah this is a weird project, don't worry, I managed to get it to work by logging with another user :)\nAlso replaced the backslashes with forward slashes. Maybe the sf filesystem component could be used in this case? It probably has all the sensible exceptions built-in?. @ciaranmcnulty me too! Maybe a git hook could help (dunno if there is one for push --tags). @unfunco can you please test #1174? I'm not sure if it will fix your issue or not.. Hmm... it seems to be a priority issue, here is what I get when dumping the locators:\n\n```\narray(3) {\n  [0] =>\n  class PhpSpec\\Locator\\PSR0\\PSR0Locator#13 (8) {\n    private $srcPath =>\n    string(14) \"/var/www/html/\"\n    private $specPath =>\n    string(14) \"/var/www/html/\"\n    private $srcNamespace =>\n    string(28) \"Concat\\Http\\Middleware\\Test\\\"\n    private $specNamespace =>\n    string(33) \"spec\\Concat\\Http\\Middleware\\Test\\\"\n    private $fullSrcPath =>\n    string(14) \"/var/www/html/\"\n    private $fullSpecPath =>\n    string(19) \"/var/www/html/spec/\"\n    private $filesystem =>\n    class PhpSpec\\Util\\Filesystem#12 (0) {\n    }\n    private $psr4Prefix =>\n    string(28) \"Concat\\Http\\Middleware\\Test\\\"\n  }\n  [1] =>\n  class PhpSpec\\Locator\\PSR0\\PSR0Locator#11 (8) {\n    private $srcPath =>\n    string(14) \"/var/www/html/\"\n    private $specPath =>\n    string(14) \"/var/www/html/\"\n    private $srcNamespace =>\n    string(10) \"App\\Tests\\\"\n    private $specNamespace =>\n    string(15) \"spec\\App\\Tests\\\"\n    private $fullSrcPath =>\n    string(14) \"/var/www/html/\"\n    private $fullSpecPath =>\n    string(19) \"/var/www/html/spec/\"\n    private $filesystem =>\n    class PhpSpec\\Util\\Filesystem#12 (0) {\n    }\n    private $psr4Prefix =>\n    string(10) \"App\\Tests\\\"\n  }\n  [2] =>\n  class PhpSpec\\Locator\\PSR0\\PSR0Locator#10 (8) {\n    private $srcPath =>\n    string(18) \"/var/www/html/src/\"\n    private $specPath =>\n    string(14) \"/var/www/html/\"\n    private $srcNamespace =>\n    string(4) \"App\\\"\n    private $specNamespace =>\n    string(9) \"spec\\App\\\"\n    private $fullSrcPath =>\n    string(18) \"/var/www/html/src/\"\n    private $fullSpecPath =>\n    string(19) \"/var/www/html/spec/\"\n    private $filesystem =>\n    class PhpSpec\\Util\\Filesystem#12 (0) {\n    }\n    private $psr4Prefix =>\n    string(4) \"App\\\"\n  }\n}\n```. Link to the seemingly unrelated package: https://github.com/rtheunissen/guzzle-log-middleware. The issue is with realpath, and with the fact that the test directory for this package does not exist.. > Since realpath returns false because the directory doesn't exist at this point in time, the default src directory is resolved to ., causing the generated spec to fail.\nPossibly. I don't think it will fix it after all. The directory in question would be src here I think. Well... I don't know. It might work, I'm really not sure.. My PR on the other package was merged, so I now have 2 locators, but it still doesn't work, because the test namespace is picked first. Not sure how to fix that one. @ciaranmcnulty , why does it fail instead of trying the next locator? Or should there be only one locator?. I fixed my issue by removing the second autoload rule, but still, this does not sound very good.... False alarm, my  tests directory did not exist, so... same bug! Please merge :P. The name is indeed vague. First step towards naming it properly would be to describe what it is/does.. Or a TestPairLocation? Do you have a name describing a class and its spec?. Trying to extract good information from you by saying utter bullshit and waiting for your corrective instincts to kick in :P. @sroze should be Spec I guess :P But maybe we can do better than SpecPairLocation\u2026. Failing as early and noisily as possible sounds good. You could also do this:\nphp\n<?php\nthrow new \\Exception('wrapped object is null or does not have a classname', 0, $e);. The issue is that one suite is created for the test autoload rule, and it has the same spec path as the main one.. @ciaranmcnulty I think my former colleague (you may have noticed the matching style in our user pics ;) ) means that people are currently using PSR-4 regardless of what phpspec uses/is compatible with. The docs do not reflect this though.\n@roukmoute where is your PR?. My PR is not sufficient, and I don't know what is the right way (stay with PSR-0, or move on with PSR-4 and add something about creating a phpspec.yml file with the config option to make that work). Argh that's correct, I forgot it wasn't just about the spec autoloading.. Using the project itself as a fixture for now.. Not sure why one namespace gives potentially several prefixes here\u2026. Apparently, you can map a namespace to several directories. TIL. Not sure if this is really useful\u2026 what about using an srcPath argument?. My editor reordered the statements, I put that change in a separate commit in case you guys don't want it.. ATM there is only one namespace provider... tell me if you feel this is overkill, I will just remove the factory and simplify the configuration to something less forward compatible, like composer_namespace_provider: ~. That md5 is ugly, any recommendation for a slugification method I should use to generate a decent name for the suites?. Still not great, but better I guess :). I just fixed this expectation, that was plain wrong, and now see that I must compute the psr4 prefix by analyzing the location and the namespace.. Tell me if you prefer a simple array instead of this POPO. I don't know... less code?. I think I could, but you would still have to refer to this file because of the return FakeLoader(); statement that still would have to be here.. > Therefore maybe a boolean like detect_composer_namespaces is enough?\nI'm afraid it's not, because you can't pass configuration to the namespace provider with a boolean, which means you cannot customize the root_directory or the spec_prefix arguments.. I forgot to document this BTW, it seems, so let's do it. There are other instanciation of this class with strings in that spec, so I changed this one.. hmm indeed there's not much point to it.. I managed to catch a bug with this :). ",
    "BentCoder": "Nice one. Thanks\n. Solution.\n$this->createMessageModel($body, $files)->shouldBeLike($createMessage);\n. @stof Could you please show me a small example so that I can complete it?. @Sam-Burns nothing much so you can assume that it is not there! (Something like below)\nprivate function callPrivateMethod($message)\n{\n   return str_replace('...', '...', $message);\n}. @Sam-Burns I think I directed you wrong. It does this:\nprivate function callPrivateMethod($entity, $message)\n{\n   // Modify message ....\n   $entity->setMessage($message);\n   $entity->setWhateverColumn((new DateTime())->getTimestamp());\n   $entity->setAnotherColumn($entity->getAdditionalData());\n   // That's it! No return\n}. @Sam-Burns If all the if statements true then the test should not pass because I'm not testing $entity->set... lines at all although I'm (the listener) calls those lines. Shouldn't it fail? That's the root of my problem here. Elsewhere (other tests - not in event listeners), spec would raise error saying that expected calls are .... but these were called ....\n@stof What do you exactly mean by \"... you don't make any assertion in your spec.\"? Do you mean the ->willReturn(...) lines I'm using in my spec above are not \"assertion\"?. @avant1 I already tried Hello $entity //<--------------- version as well but nothing changed.\nThe test below will pass all times which is to me wrong or phpspec works in a strange way or I'm missing something.\n```\nnamespace ........;\nuse Doctrine\\ORM\\Event\\PreUpdateEventArgs;\nuse My\\Bundle\\Entity\\Hello;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass MessageEventListenerSpec extends ObjectBehavior\n{\n    function it_should_whatever(\n        PreUpdateEventArgs $event,\n        Hello $entity\n    ) {\n        // Whether I add or remove any of these lines, the test passes either way!\n        // $event->getObject()->shouldBeCalled()->willReturn($entity);\n        // $event->getObject()->shouldBeCalled();\n        // $event->getObject()->willReturn($entity);\n    $this->preUpdate($event);\n}\n\n}\n```\n```\nnamespace ........;\nuse Doctrine\\ORM\\Event\\PreUpdateEventArgs;\nuse My\\Bundle\\Entity\\Hello;\nuse PhpSpec\\ObjectBehavior;\nclass MessageEventListener\n{\n    /*\n     * @param PreUpdateEventArgs $event\n     /\n    public function preUpdate(PreUpdateEventArgs $event)\n    {\n        $entity = $event->getObject();\n    }\n}\n```. OK. I got it now. @avant1 Thanks for the example and very descriptive answer.\nI had to add ->shouldBeCalled() before ->willReturn(..).. My mistake!. ",
    "kanedo": "Hi,\nfirst of all getWrappedObject() does what I wanted. \nBut thanks @stof for pointing that out. I now see the design flaw and how to refactor it!\n. ",
    "eugene-dounar": "\nIs this breaking an extension you know of? It would be good to see the use case.\n\nThis one https://github.com/m00t/phpspec-phpunit-matchers/blob/master/src/M00t/PhpSpec/PHPUnitMatchers/Runner/Maintainer/PHPUnitMatchersMaintainer.php\nAlso this may be affected, but haven't checked https://github.com/coduo/phpspec-matcher-extension/blob/master/src/Coduo/PHPSpec/Matcher/Runner/Maintainer/StringPatternMatcherMaintainer.php\n. @ciaranmcnulty the author of the first one (@m00t) never tested the extension with 2.1.1 as he told me. So it never really worked with 2.1.1 and the reason is this particular bug.\n. @ciaranmcnulty yeah, the only thing to do on the side of extension is to set the maintainer priority to <50. \n. ",
    "angelsk": "It would be nice to have a warning if you set up a test, and then forgot to actually test anything in it :)\n. ",
    "dmecke": "I would call myself a learner about how to structure unit tests in a good way, so as this issue is meant for people like me I would like to tell my view on it.\nFirst, I really wasnt aware that I should mock all dependencies, not just the ones I absolutely need to get the tests running (I think I mainly actually wrote integration tests). phpspec made this immediately clear as I have no other chance.\nSo disallow mocking after an assertion seems very close to this for me. Though a different approach to this could be to instead mark the test yellow with a warning that this is not the intended way to do it.\n. @ciaranmcnulty This seems to become offtopic, but aren't it integration tests then? I mean, my SUT then depends on behaviour of its collaborators!?\n. ",
    "nchagrass": "Not everyone is familiar with the idea of having its classes final until you need to change it.\nWho is your audience? who are your users? are they interested in having this? does they want it ?\nMake sure they are confident with this concept, prepare a well made documentation ; )\n. ",
    "icambridge": "My question is what problem are you trying to solve here? It seems like this is just a matter of opinion?\n. Just thinking wouldn't make a lot of peoples code instantly breach the open/close principal or do you think people who care about that would know to remove final? Or am I missing something?\n. Well Open/Close principal is about being open to extension while closed to modification no? final instantly removes the ability to extend? For example I will no longer be able to extend PHPSpec for whatever reason, I would have to fork it and maintain my own copy. Obviously not a biggie since it's configurable. Just kinda popped into my head\n. That's because of Dependency Inversion which is different to Open/close no? Open/close is on classes and stuff no? Say there is a class in PHPSpec that does 90% of what I want I just want to add in something on top. Instead of being able to create my class by extending I have to copy and paste the class or fork the entire project just to remove the keyword final. Either option doesn't sound too fun.\n. Say https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/CodeGenerator/GeneratorManager.php had a final keyword.\nI wanted to extend it so I could get all generators. I don't want to modify how phpspec runs I just want to reuse your code within another phpspec related project or something. Other than being blocked because it's got a private keyword. I would also be blocked because of the final keyword. There is no interface (I assume rightfully so because there is no need for one) and even if there was I still wouldn't be able to access the protected member to allow me extend it. Not saying there is a need in the exact use case. More that wouldn't final by default be breaching open/close? I've been thinking a lot about open/close lately... \n. > I really don't think the open/closed principle is about extending classes to change the parts of them you don't like.\n@ciaranmcnulty  In the example I gave I wasn't changing anything, I was merely adding more things. \nOpen/Close is directly related to not changing the original class to add new features? No? \n\nthe open/close principle is about providing extension points\n\n@stof are you sure? http://www.objectmentor.com/resources/articles/ocp.pdf directly talks about inheritance and making things protected and public instead of private. I know this isn't from the original author of Open/Close and things change but it's still I think a pretty good resource for the definition. \n@jakzal I know that I constantly think I'll build something for one thing and I'll never need to do anything else and then someone else comes along with another task and they did need to do stuff with that code for valid reasons. Just because I never meant for it to be used for something else doesn't mean someone else hasn't seen it another use for it to solve another problem. \nAlso isn't the changes that are available to be made there because of Dependency Inversion and good design rather than obeying the Open/Closed principal? \n. > As far as I can see all of your examples can be achieved with composition solutions rather than inheritance.\nThe first example couldn't be, since there is no interface. To apply the interface would result in a change to the original source code which Open/Closed is designed to stop?\n\nThat's why most of the classes in ZF2 are doomed. It's a mess, don't do that, ever :-(\n\nWhen was the last time you seen someone successfully extend a Symfony class? Seriously I love the project but trying to extend core classes every time I've tried I've failed.\nI'll stop now... :smile:\n. Ok I lied about stopping I can't help myself...\n\n'I want to get all the generators' => get them from the place that passes them to GeneratorManager\n\nFor whatever reason the generators are generated in various places, there is no single point. Also I don't want to modify the original code that creates them?\n. @ciaranmcnulty I think you're thinking too closely to the application, being open/close instead of the units of code. For example say for whatever reason I somehow discovered that the perfect solution was to reuse phpspec as library for my own testing/code generation thing. I have a UI I want to display all the generators available. I wouldn't be able to use an extended GeneratorManager to do that. I would have to break DRY and create another class to hold all these Generators. While improbable it's not impossible that could happen. So improbable I wouldn't go out my way to change things, but still makes me wonder about Open/Close. As it seems there is no way to extend that class. It's closed from extension and from modification. \n. @MarcoDeBortoli Having an interface doesn't make GeneratorManager extendable, that class is simply not extendable. It has a single responsibility of providing generators upon request, adding the functionality of returning them all for whatever reason wouldn't be breaking that. Adding that functionality wouldn't break the original functionality so Liskov's principal wouldn't be broken, there is no interface so interface segregation isn't broken. The method wouldn't be breaking dependency inversion.  \nAlso adding interfaces doesn't make it OCP friendly, it means I can add can modify the existing functionality that is there by decorators but it still doesn't allow me to add this getAllGenerators I seem to want so much.\n@quimcalpe but this wouldn't be you choosing to, this would be it forced upon you because something simply wasn't open to being extended.\n. Guys I am not suggesting that we change GeneratorManager or anything for that matter. I was literally using that as an example class since it had no interface.  I am merely pointing out that if I was to use PHPSpec as a library to build on top of I couldn't extend that one class I would have to copy and paste it and then add that single feature. Maybe there is a use case for that, that no one knows yet. That would be why OCP exists.\n\nMy position is that your requirement is somehow beyond PhpSpec responsibility, if you really have the need of extend the GeneratorManager as of now fork is the only solution or maybe you can just simply proxy it. \n\nThat's exactly my point and why I don't think that class is OCP. It's just come to my attention that OCP is some how ignored misinterpreted in my opinion to mean if I use all the other principals OCP is suddenly happens.\nAnd as I said doesn't really matter in the long run since this option is configurable. \n. @jfmercer on a separate point but related to your comment. I think one thing I think we should always ask and that is what is Best Practice. What was best practice sudden isn't. Like it used to be the thing to use magic methods all over the place, now people don't do it. I personally don't think you should ever take one persons (or in this case lots of other people) word on if something is best practice or not. You should read the well defined tried and tested principals and then make your own decision.  \nRelying on PHPSpec to tell you what is best practice can result in your doing the wrong thing simply because everyone else thought it was a good idea for some reason. Just try not to follow in to the Groupthink trap. Not saying it's happening but it's possible.\n. @jfmercer My point was more related to not just listening to what others think to decide what you think is best practice. What makes it best practice? Questions should be asked such as do other programming languages that support this feature also do it like this if not why not? Etc. My comment was more general advice and not really related to PHPSpec. \n. I should just search more often...\n. PSR-0 does convert them, PSR-4 is the one that doesn't. \n. ",
    "mheki": ":+1: for the final plus documentation explaining why and how to change it.\nAs @jakzal said - shed loads of options would complicate clean phpspec's API. \n. Thanks for reporting @lukasoppermann. If you expect string and increase verbosity level (-v), you will see full strings compared. Looks like this doesn't work properly for arrays.\n. thanks @stof, that's also changed now.\n. Sure @ciaranmcnulty \n. Both added\n. Hi @sagikazarmark \nPhpSpec has some limitations, but encourages some good practices while designing the code.\n\"Large number of mocks\" sound like a design smell. How about reducing number of collaborators?\nHowever, you can still use PhpUnit for these doubles in the way you described. \n. You can run that explicitly with your spec path specified: phpspec run src/Project/Bundle/TwoBundle\n. Sorry, my fault, try adding spec at the end of your spec path. \nSo phpspec run src/Project/Bundle/TwoBundle/spec should do the trick here.\nHowever I can see your point with -s suitename option\n. There is a small problem in your example. Your spec path is the same as src_path. \nThanks for reporting, looks like there is an issue in file locating for this particular use case.\nI have played with different scenarios locally and found a quick fix for that. \nWill send PR soon.\n. I will add it today\n. @ciaranmcnulty any thoughts about it?\n. Have you tried to run composer dump-autoload?\n. Hmm... no idea about CodeIgniter, but I can see your spec path is the same as the source path. \nWhich version of phpspec do you use?\nAlso does phpspec run application/spec work as expected?\n. done\n. I've just found (and pushed changes) that CollaboratorMethodNotFoundListener needs the same functionality, now I'm almost certain this bugfix should be done with additional event listener instead of repeating functionality all over again\n. I've changed wording and the block itself, so now corresponds to the broken code indications. When the method is wrong, runner will not run the suite again.\n\n. :smile:  :+1: \n. Thanks for your work @hanneskaeufler !\nFrom the code use cases it looks like we could have slightly different interface segragation:\nafterExample method usually comes with the afterSuite, so having some kind of AfterExampleAndSuite interface would not introduce all these empty methods (beforeExample, beforeSuite). What do you think @ciaranmcnulty ?\n. I removed optional dependencies from all the classes I found with looking for ?: in the project.\nAlso moved Filesystem argument in PSR0Locator before those with default values.\n. Yeah, found one. Can't see anything else.\n. @ciaranmcnulty branch brought up to date\n. I've been on holiday. Will take a look into it in a few days.\n. well done @ciaranmcnulty \ud83d\udc4d\n. I can take care of it\n. the other issue is bugfixes touching files conflicted across versions. Example: https://github.com/phpspec/phpspec/issues/928 I left both PRs open as the code change is slightly different for 2.5 and 3.0\n. @Sam-Burns https://github.com/BossaConsulting/phpspec2-expect/pull/25\n. Personally, I'm \ud83d\udc4d  for option number 3\nfunction it_()\n      {      \n      }\npending example indicates there is an action for me to do. \nThis approach also saves me from deleting commented out line again and again.\n. thanks @mahalay! Would be great if new features were in sync with the docs. Can you describe your changes in docs, please?. @Mrkisha completely agree with Jakub, there is no need to use phpspec for your command if you delegate the logic to a service (which you can spec but then you test only your code). \nThere is a rule which you can follow Don't test what you don't own. \nIf you need to test it use integration tests instead.. @jakzal I need a cup of coffee this morning \ud83d\ude06 . whoops I missed not... \ud83d\ude36 \ud83d\ude09 \ud83d\ude1b (updated). Nope, @ciaranmcnulty you're right. I can get what I wanted with shouldBeApproximately().\nCheers.. http://php.net/manual/en/reserved.keywords.php\n. to be consistent with askConfirmation() https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Console/IO.php#L274\n. if we want to keep it more generic, it should be $indent * 2 tbh, then the error message is displayed with the same padding on both sides\n. missing doc block here\n. $matchScore = $matchScore = mistake here. out of curiosity - why @ here?. something is messed up with whitespaces here, could you make it more PSR-2 compliant, please?. this has to be higher than IdentityMatcher to execute this one first. bcmath extension is not loaded by default on linux distributions.. I wasn't sure what value to use for the scale parameter. Whatever we use it will have to be documented.. ",
    "quimcalpe": "@icambridge I happily break DRY when is worth it\n. ",
    "jfmercer": "\n@ciaranmcnulty New guy here (i.e., 1 year of PHP experience). I use PHPSpec because it forces me to follow best practices that I don't even know exist. Basically, when I want to write a test but can't do it in PHPSpec, I know that the problem is me, not the test framework. If making classes final is a best practice, then, IMHO, it should be the default behavior. \nPHPSpec is not merely a testing framework; it is also a pedagogical tool. It should default to best practices and let its users \"catch up\" to it, so to speak.\n\n. @icambridge I was not suggesting that PhpSpec is The Ultimate Judge of Best Practices Forever\u2122. Nor would I suggest that beginners should rely on it exclusively to learn best practices. However, it is an opinionated test framework, and this is one of its greatest strengths. It forces its users to write code in a particular way in order for it to be testable. In contrast, PhpUnit can test almost anything, ever the worst of code. Of course, that it just as it should be, given that the premises and goals of PhpUnit are quite different from those of PhpSpec. But this flexibility comes at a price: PhpUnit is a poor pedagogical tool, as whereas PhpSpec is.\nIt takes years of hard work, failure, and mentoring in order to understand how to write good, clean OO code. PhpSpec forces its users to write code well, much as a piano teacher forces his students to sit and breath and play in a certain way. Of course, once the student masters the piano, he may have very different opinions and styles than his former mentor. Nevertheless, the fully mature professional would never have achieved mastery without the strong opinions of his tutor. The same is true in programming: a beginner should follow the guidance of masters until he becomes a master himself. Only then does his programming style and philosophy bear any weight or authority. \nIt is obvious that PhpSpec is a testing framework. My comment above emphasizes that, however imperfect, it is also a pedagogical tool. If PhpSpec were to abandon the enforcement of best practices, and leave it to the user to enforce these practices himself in a config file, then PhpSpec might remain a good BDD framework. Perhaps it would be more successful, gain a wider audience, and even became the PHP industry-standard for testing. But it would cease to be a teacher; it would no longer have any pedagogical value. \nMy suggestion is that, amongst their other priorities, PhpSpec's developers should keep beginners in mind. As this framework becomes less and less opinionated, it will become less and less useful to apprentices in the craft of programming. \n. ",
    "strebl": "My bad... Composer not created the .bat file. I deleted composer.lock, the vendor directory and added my fork. the installation added the .bat file to the bin directory. I wasn't my change...\n. But why does, for example behat, add the file to their github repo and phpspec not, what do I miss?\n. Thanks for your help.\nI'll test better next time :disappointed:\n. ",
    "Elfiggo": "There is a PR, yes.\n. closing and resubmitting more streamlined PR\n. More Open, Honest Feedback required :)\n. Suggested changes made.\n. Please check last commit as a way checking for parse errors\n. From the what I can tell I can't see output from the process because it fails before the rubber boots up. So I end up testing PHP functionality. \nI seem to be missing a point here, should I be changing the boot up sequence or changing the isolated context to get the PHP Parse error in which case aren't I just testing PHP?\nThis is the circle of logic I am stuck in. Help.\n. I think the Container Assembler needs dicing up.\n. Going to recreate a new PR at some point. Closing for now.\n. Would be awesome if you could define a TypeHint at the same time\n. :8ball: Ship It!\n. Would appreciate a review on this, i'll remove the WIP monicker if happy.\n. @tomphp @sroze Thanks for reporting it, I will take a look.\n. Hi @tomphp would you be able to add your error_reporting level here?\nIt will help with the investigation.\n. @tomphp I have been able to reproduce.\nI have used your code for the Behat scenario to prove it works. I do see the error if I use a different formatter such as the \"junit\" one.\nThe fix is in this PR https://github.com/phpspec/phpspec/pull/819\nThanks for getting back to me.\n. Looks good.\n. Will look into this\n. Will look into this\n. Would be worth creating an ignore-fatals option, and in doing so we print a list of scenarios and the message after a run.\nWe could add a new metric to the output, something like ignored-fatals 10 \nI'm suggesting this as I don't see how you would cleanly manage a list, for example\nRun 1 fatal. Ignore\nRun 2 fatal. Ignore\nRun 3 All pass\nAt which point would I remove the list? \nI still feel it would be right to highlight how many fatals were ignored so no one releases their code accidentally with fatals in.\nI suppose the other realisation is that a user would run the spec file directly to then start repairing the fatals so is the list functionality still valuable?\n. Not according to the message interface, might be worth renaming the variable instead. Thoughts?\n. My thoughts were to allow other developers to build messages for any further integration (e.g a Warning Message, Error Message....)\n. Would those changes be better in a Shutdown Runner on Fatal to allow further configuration?\n. What if it fatals between Last Example and New Example? extreme edge case\n. Will remove\n. Should there be a separate SuiteListener that is handled differently?\nIf not, then I think this should accept messages to an interface and be called ConsoleWriter so I can send any message through and based on Object type display tailored output?\n. Yeah I was looking to move the error and hip hop checks elsewhere yesterday\n. Classic trap\n. I suppose this would interfere with Devs who have this on in development. Will remove.\n. Will make the updates. \nTravis CI passed the example for HHVM, I accepted it was the solution, will use defined as checking for a version makes sense.\nDoes HHVM_VERSION work if HHVM is off running PHP6 on the same box?\n. I believe I have on the latest commits\n. ",
    "echochamber": "@ciaranmcnulty Hey, thanks for the ping. I totally forgot I had opened this PR. I'm busy tonight but I'll make this my priority tomorrow.\n. @ciaranmcnulty Ok, I have fixed all the issues addressed in your comments and added a feature. If there are any other changes you'd like please let me know :smile: \n. @ciaranmcnulty Also regarding documentation, I can write some and open a PR once this one is merged.\n. @ciaranmcnulty Fixed now. \n. I totally forgot I had said I was going to write docs for this. My apologies @ciaranmcnulty. Thank you @franciscosantamaria for writing it!\n. ",
    "mirfilip": "Funnily enough, I've also noticed that running phpspec against source file not spec file works well\n```\n\nphpspec run module/Api/src/Api/Config/ProviderContext.php\n(...)\n1 specs\n5 examples (5 passed)\n16ms\n```\n\nbut it's not what latest cookbook recommends.\n. <?php\nnamespace spec\\Api\\Config;\n(...)\n@ciaranmcnulty \n. Any idea what can go wrong here ?\n. Is it a configuration problem or a bug ? If former, how can I accomplish having multiple suites ?\n. I'm not sure if it was fully fixed but the problem doesn't occur in 2.4.1. @ciaranmcnulty you may want to revisit & close this.\n. ",
    "fojuth": "The bug still exists, making it impossible to run multiple suite tests. Furthermore, if I comment-out the suite the problem is connected to, phpspec can't run tests that are combined with the commented-out suite (which is quite obvious, still, maybe it should ignore these tests?). This behaviour renders the whole process useless since there is no command (at least none that I know of) making it possible to run tests per suite.\n. The problem is probably with the PSR0Locator class (or the IoC).\nThe createResourceFromSpecFile method checks if the spec is in the correct namespace. The spec's path is correct but the whole PSR0Locator is not. It \"exists\" in the previous suite context although the ContainerAssembler creates a proper instance of the PSR0Locator.\nThis means that the PSR0Locator checks the spec's namespace against it's own improper context. Forgive me, if my explanation is a bit vague ;)\nWhen I commented-out the fragment below (PSR0Locator::createResourceFromSpecFile()) everything started to work fine:\nphp\nif (0 !== strpos($classname, $specNamespace)) {\n    throw new \\RuntimeException(sprintf(\n        'Spec class `%s` must be in the base spec namespace `%s`.',\n        $classname,\n        $this->getSpecNamespace()\n    ));\n}\nThe $classname is ok, but $this->getSpecNamespace() returns wrong namespace (previous test suite). Probably the PSR0Resource is created correctly, that's why it works properly.\nThis is not a fix, it's just a temporary solution. Still, it works and allows creating multiple test suites. Hope this helps you guys :)\n. ",
    "thomasruiz": "I'll work on the feature coverage during the afternoon.\nIf I find any problem with ReturnConstantGenerator I will try to fix it :)\n. Indeed, there was an error related to MethodReturnedNullListener.\nShould I clean the commit history with git rebase?\n. All done :)\n. Yes: if the trait is in the same file, there is no issue (due to ReflectionMethod::getStartLine() and ReflectionMethod::getEndLine() refering to the method defined in the trait). The bug is here only when the trait is in a different file.\n. It is returning a class. Maybe there could be improvements in the methods' names... In summary, there is:\n(public) getRealDeclaringClass: get the name of the real class (or trait) declaring the method\n(private) getDeclaringClass: get the ReflectionClass on the real class (or trait) declaring the ReflectionMethod\n(private) getDeclaringTrait: either return the trait defining a method or null if the method is defined in the class\n. Naming things is always a problem :)\nHow about getRealMethodOwner?\n. How would you mark it as skipped? I didn't find a way in Behat to do so\n. ",
    "maxcal": "No, I did not have one setup. \nAdding a autoloader resolved the issue although it might be nice to have a note in the readme.\n\"autoload\": {\n        \"classmap\": [\"src/\"]\n    }\nI was assuming that phpspec took care of autoloading generated classes.\n. ",
    "ifdattic": "Glad to help!\n. Glad to help!\n. Might have not translated in my comment, but personally myself I think it's not worth changing all examples to vendor/bin/phpspec. That I'm suggesting is just a adding a section explaining that it's possible to change the directory of the executable. If we want to get even fancier we can add that you can make a bash alias to just execute with phpspec :)\n. Wouldn't the same issue happen if the user is using method #2? phpspec not working due to autoloading is an issue, I constantly forget that and it leads to some wasted time before remembering the fix. The solution might be to do like a step based install or add a small section informing about setting up autoloading.\n. @Sam-Burns I would suggest adding a short snippet of code providing an example of what it means to set autoloading correctly and phpspec should be all in lower case\n. @ciaranmcnulty I always just looked at how it's most often used in documentation/website, and assume that it's in lowercase. Think that it would be good to mention somewhere how to write the name, as think had a same comment 1-2 years ago.\n@Sam-Burns made some suggestions\n. This is of course personal preference and not worth changing in already current documentation, but think that it might be worth to think about using # for headers rather than underlining syntax. Just makes things cleaner (if the header changes no need to modify the line after it).\nNow from writing an article about Composer remembered that it has autoload-devwhich is useful for removing tests from being autoloaded in the production (somehow no testing tools mention that). Might be useful to add a mention about it, but at the same time not sure about adding it as installation page is getting bigger and might start giving a view of being a complex tool (putting new users away).\n@Sam-Burns looks good \ud83d\udc4d \n. Yes, but phpspec is a name & most of the time it's used in lowercase letters (see the beginning of the file for example)\n. Add the --dev flag\n. Star isn't a very good choice for a dependency in my opinion. The better choice would be to make it specific ^2.5 or use a pseudo text insert-version-requirement.\nBut in the end, in my opinion, it would actually be best to remove config file installation completely, too complicated and too much chances for messing something up.\n. This would be better {\"autoload\": {\"psr-0\": {\"\": \"src/\"}}} (and that slash is important)\nPretty print would be even better:\njson\n{\n  \"autoload\": {\n    \"psr-0\": {\n      \"\": \"src/\"\n    }\n  }\n}\n. No benefit, it works the same either way\n. ",
    "egeriis": "The Config is not relevant for this test, it's legacy from another test.\nWhen Client is instantiated it will call set_exception_handler and point it towards it's own catchException method. But I haven't gotten that far yet, since this test method doesn't even run as failed. It returns this error: no beCalled([array:0]) matcher found for null\n. I want to spec that the Client should set an exception handler upon construction.\nThis works, but required me to expose a method which returns the callable exception handler:\nphp\nfunction it_should_register_exception_handler()\n{\n    $expectedHandler = [$this->getWrappedObject(), 'catchException'];\n    $this->exceptionHandler()->shouldReturn(set_exception_handler(null));\n}\n. ",
    "chentsulin": "php\nfunction it_should_set_something_to_response_header(Request $req, Response $res, Closure $next) {\n        //....\n        $next($req)->willReturn($res); // this line\n        //....\n}\nwill get a Fatal error: Function name must be a string\n. ",
    "ghola": "The solution provided by @ciaranmcnulty works fine for some situations but not for those in which you want to assert that a callable has been called. My solution for such a scenario was to create an invokable class like so:\n``` php\nclass MockableCallable\n{\n    public function __invoke()\n    {\n        return $this->invoke();\n    }\npublic function invoke()\n{\n\n}\n\n}\n```\nand then in my test i would do something like:\n``` php\nfunction it_tests_callable_being_called($request, MockableCallable $next)\n{\n    $next->invoke()->shouldBeCalled();\n// the rest of the code that actually triggers the call of the callable, for example:\n$this->handle($request, $next);\n\n}\n```\n. ",
    "frankdejonge": "@ciaranmcnulty judging by the PHP 7 release timeline (https://wiki.php.net/rfc/php7timeline) I'd say investing time into \"getting it to work\" would be somewhere around September-ish. Though I think it's good to see what the project does on this version regardless. In my project, the phpspec tests fail on php 7 (only), which has to do with the let() double resolving. I figured this would put that on the radar, if it still exists by that time.\n. @ciaranmcnulty you could specify the php version as ^5.3.3 which is the equivalent of >=5.3.3, <6.0.0.\n. I agree with @stof, especially at this time it's good to be able to install it, even if it fails. This way bugs can be found and fixed. Also, I reckon you'd want to get the project up to speed with that version eventually anyway.\n. ",
    "digitalkaoz": "its working with phpdoc as @stof stated...but its not the sweetest solution\n. i wrote a small tool to convert between typehints and docblocks...using it on travis only under php7. works great but is still in progress\nhttps://github.com/digitalkaoz/typehint-to-docblock\n. @stof that would be even more great, until then https://github.com/digitalkaoz/typehint-to-docblock can jump in...planning a phar which is easily downloadable on travis\n. its merged, so if you install master it should work\n. ",
    "ryanwinchester": "@digitalkaoz thanks, that is working for me at the moment.\n. ",
    "RyanHavoc": "Ah. That makes sense then. I'm using Laravel so I imagine it works with just the first if for me because phpspec is part of the Laravel autoload.\nThe question is then, under those circumstances how do I stop it choking on the second if?\n. Sure. Explained here: https://github.com/phpspec/phpspec/issues/668\n. I have vendor/bin included in my $PATH. Behat for example works fine.\nI'm running phpspec from the root of my Laravel folder. If I do:\n$ which phpspec\nvendor/bin/phpspec\nThe second if (on my machine) is looking here:\ndie(__DIR__ . '/../vendor/autoload.php');\n/Users/RyanT/Code/pmh.local/laravel/vendor/bin/../vendor/autoload.php\nAnd here:\ndie(__DIR__ . '/../../../autoload.php');\n/Users/RyanT/Code/pmh.local/laravel/vendor/bin/../../../autoload.php\nBefore elsing to the standard error...\n. Yes there is an vendor/autoload.php. I can confirm that if I run:\n$ vendor/phpspec/phpspec/bin/phpspec\nIt works. I had to chmod +x on it first though.\n. Just tried running through the different tools in Laravels vendor/bin:\nbehat = works\nphpspec = error above\nphpunit = very similar issue to phpspec\npsysh (i.e. php artisan tinker) = works\n. Agreed. This works though:\n```\n!/usr/bin/env php\n<?php\ndefine('PHPSPEC_VERSION', '2.1.1');\nif (is_file($autoload = getcwd() . '/vendor/autoload.php')) {\n    require $autoload;\n} elseif (is_file($autoload = getcwd() . '/../../autoload.php')) {\n    require $autoload;\n}\nif (is_file($autoload = DIR . '/../vendor/autoload.php')) {\n    require($autoload);\n} elseif (is_file($autoload = DIR . '/../../../autoload.php')) {\n    require($autoload);\n} elseif (is_file($autoload = DIR . '/../autoload.php')) {\n    require($autoload);\n} else {\n    fwrite(STDERR,\n        'You must set up the project dependencies, run the following commands:' . PHP_EOL .\n        'curl -s http://getcomposer.org/installer | php' . PHP_EOL .\n        'php composer.phar install' . PHP_EOL\n    );\n    exit(1);\n}\n$app = new PhpSpec\\Console\\Application(PHPSPEC_VERSION);\n$app->run();\n```\nShould I update my pull-request?\n. I was just checking phpunit and it does have a similar issue. Requires an additional:\n__DIR__ . '/../autoload.php'\nFor the autoload. Would appear that it's only broken when phpunit and phpspec are ran from vendor/bin.\nWhen ran from their package folder they work...\n. @stof it's a regular file, as if it's been copied in from vendor/phpspec/phpspec/bin/phpspec as it's a duplicate.\nHere's the contents by default:\n```\n!/usr/bin/env php\n<?php\ndefine('PHPSPEC_VERSION', '2.1.1');\nif (is_file($autoload = getcwd() . '/vendor/autoload.php')) {\n    require $autoload;\n} elseif (is_file($autoload = getcwd() . '/../../autoload.php')) {\n    require $autoload;\n}\nif (is_file($autoload = DIR . '/../vendor/autoload.php')) {\n    require($autoload);\n} elseif (is_file($autoload = DIR . '/../../../autoload.php')) {\n    require($autoload);\n} else {\n    fwrite(STDERR,\n        'You must set up the project dependencies, run the following commands:' . PHP_EOL .\n        'curl -s http://getcomposer.org/installer | php' . PHP_EOL .\n        'php composer.phar install' . PHP_EOL\n    );\n    exit(1);\n}\n$app = new PhpSpec\\Console\\Application(PHPSPEC_VERSION);\n$app->run();\n```\n. @stof Odd. I didn't actually place the files in there myself... I'm using this with Laravel, I'll try rebuilding it.\n. @stof I delete out all the vendor packages and the composer.lock and installed everything from scratch. This time phpspec is a symlink and working...\nI can't think of anything i've done that would have caused them to be copied files rather than symlinks. I did notice a slight increment in the Laravel version number when it downloaded it again though. Maybe they fixed this issue.\n. I'm using Homestead (so Vagrant) locally. I wonder if something got screwed up with the file syncing...?\nOther than that it hasn't been FTPed or ZIPed.\n. ",
    "franciscosantamaria": "Thanks Ciaran, if you need any more about this MR ping me.\n. ",
    "mahalay": "When you run:\nphpspec run app/tests/Foo/Bar\nYou kind of like tell phpspec to \"test those classes in app/tests/Foo/Bar\". You don't wanna test your spec files.\nHint:\nphpspec run app/Foo/Bar/\n. crap! how embarassing.\n. I'm calling it a night... Yup I agree that a feature coverage would be better. Closing it for now.\n. Because I don't know how to make changes to a pull request :P\n. Sorry guys... Newbie here. My first time to contribute to an open source project. Just realized that this is fun to do.\nAnd thanks for the tip.\n. The problem this solves is: ability to run the tests regardless of the current working directory. Wouldn't it be cool if you can share your codes (modules) without requiring your users to run the tests from a specific directory or requiring them to edit phpspec.yml? Imagine an independent, per module config.\n. @ciaranmcnulty, you know what, I knew that'd be the better approach, I actually started working on it. but... \nlet's agree on using the following:\n%paths.config%\n%paths.bin%\n%paths.base%\nI got the inspiration from Behat, it uses %paths.base% for the \"current working dir\". I don't have problems using the ones you suggested, this is in fact trivial, I'm just assuming that phpspec users are likely Behat users so using that convention they'll feel at home. What  do you think?\n. One last clarification... \nbin_dir being the one defined in composer.json?\n. Ok, I will\n. By the way, I have not included %paths.bin% and %paths.base% as I don't see any use case for it.\n. Only spacing issues remain and I'm clueless \n:question: \nPlease elaborate, so I may learn :D\n. First time to edit rst files, I'm not sure if I formatted the doc correctly\n. Thanks for the feedback. Corrections were made as suggested.. Will work on it after office... Why have I forgotten to update the docs. ;). hey @mheki, I've uncovered a scenario where the current implementation will fail. I'll fix that first then finish the docs.. Updated the docs and added the scenario where the implementation was failing.\nJust curious, what do you guys use for coding standard testing? I tried using squizlabs/php_codesniffer and specified PSR2 as the coding standard and there are a lot of codes with warnings.. Hey @ciaranmcnulty, installed PHP 7.2 from my end but did not get any errors when I run the tests. Will try to figure out the issue.. The error was due to the Exception class not being displayed along with the exception message. . Rebase done, but fails tests on Windows - will setup up a Win VM later. Thanks for pointing this out. Refactored it, that even resulted to this function being removed.\n. Newline added\n. Sorry, I don't follow, elaborate pls :)\n. Done - no longer using reference\n. Clueless here as well - which space? \n. Mentnioned it at line 71\n. Any prescribed phrasing... English is not my native tounge :D\n. ",
    "wheelsandcogs": "I have an object that should set a started_at property when instantiated, so I wanted to do:\nfunction it_is_created_with_a_started_at_date()\n{\n    $this->getStartedAt()->shouldReturnAnInstanceOf('\\DateTime');\n    $this->getStartedAt()->shouldBeLessThanOrEqualTo(new \\DateTime());\n}\n. I could've sworn I tried that earlier and it didn't work, but I've just tried again and it works, doh.\nCheers.\n. I've tried this, but I have more than one example, and I need a fresh $client for each example.\n. Oh wait, I could create a new client in each example, I see.\n. If anyone needs to do this, as @ciaranmcnulty says just use the Prophet object and remember to call ->reveal() instead of ->getWrappedObject().\nphp\n$client = $this->prophet->prophesize('Stripe\\HttpClient\\ClientInterface');\n$client->request(...)->willReturn(...);\nApiRequestor::setHttpClient($client->reveal());\n. Just for further context, this spec passes:\n```\nfunction it_can_load_documents_from_the_persistence_layer(\n    PersisterInterface $persister,\n    DocumentInterface $document\n) {\n    $persister->load('Foo', '123')->willReturn($document);\n    $persister->load('Bar', '123')->willReturn(null);\n$this->load('Foo', '123')->shouldBeLike($document);\n$this->size()->shouldReturn(1);\n$this->changes()->shouldReturn(0);\n\n$this->load('Bar', '123')->shouldReturn(null);\n$this->size()->shouldReturn(1);\n$this->changes()->shouldReturn(0);\n\n}\n```\n. Actually this might be working as it's meant to - if I comment out the second call to load it passes :D\n```\nfunction it_can_load_documents_from_the_managed_cache(\n    PersisterInterface $persister,\n    DocumentInterface $document\n) {\n    $persister->load('Foo', '123')->willReturn($document);\n$persister->load('Foo', '123')->shouldBeCalled();\n$this->load('Foo', '123')->shouldBeLike($document);\n\n//  $persister->load('Foo', '123')->shouldNotBeCalled();\n//  $this->load('Foo', '123')->shouldBeLike($document);\n}\n.\n    function it_can_load_documents_from_the_managed_cache(\n        PersisterInterface $persister,\n        DocumentInterface $document\n    ) {\n        $persister->load('Foo', '123')->willReturn($document);\n    $persister->load('Foo', '123')->shouldBeCalledTimes(1);\n    $this->load('Foo', '123')->shouldBeLike($document);\n    $this->load('Foo', '123')->shouldBeLike($document);\n}\n\n```\n149  \u2718 can load documents from the managed cache\n        some predictions failed:\n          Double\\PersisterInterface\\PersisterInterface\\P34:\n            Expected exactly 1 calls that match:\n              Double\\PersisterInterface\\PersisterInterface\\P34->load(exact(\"Foo\"), exact(\"123\"))\n            but 2 were made:\n              - load(\"Foo\", \"123\") @ src/ODM/UnitOfWork.php:133\n              - load(\"Foo\", \"123\") @ src/ODM/UnitOfWork.php:133\nPerfect! Thanks for the mega-quick response :D\n. ",
    "jakubzapletal": "I agree with @ciaranmcnulty , you should mostly (always) know exact output. In your case I would create factory for DateTime object and injected as a service, then you can easily expect exact DateTime object as a result.\n. Because the issue with backslashes isn't in phpspec but how arguments are handled in the shell, then the only solution would be to add a feature phpspec run MyApp/Whatever.\n. I forgot another solutions could be phpspec run MyApp\\\\Whatever or phpspec run \"MyApp\\Whatever\", but it depends if this functionality is desirable.\n. It's because you defined how you want to initialize the object but didn't call any matcher or anything what would start the initialization. The initialization can be run for example by $this->getWrappedObject().\nphp\nfunction it_can_be_constructed_from_a_cart(CartInterface $cart)\n{\n    $this->beConstructedThrough('fromCart', [$cart]);\n    $this->getWrappedObject();\n}\n. IMHO this arguments is confusing, it's the same like specifying a path to the file. I would suggest to use a parameter like Behat does -s and --suite=.\n. yeah, I don't think it's obvious enough. Maybe, I'm affected by Behat.\nAnyway, you're missing any tests.\n. It's clear what you explained but phpspec should be used for TDD, so test first. There is another potencial problem when the namespace of your class wouldn't be properly set in your config and phpspec wouldn't find original class during the run.\n. It does make sense, but we would lost compatibility with PHP 5.3 and 5.4. As it was already discussed, phpspec 2 will keep a compatibility with PHP 5.3\n. All is discussed here #725 \n. Unfortunately, all calls starting with should are used as an expectation.\nIt's defined in \\PhpSpec\\Wrapper\\Subject::__call.\n. Still I think that this testing doesn't belong to phpspec as it is a low\nlevel testing tool.\nOn Wed, 22 Jun 2016, 08:04 Ciaran McNulty, notifications@github.com wrote:\n\nClosed #950 https://github.com/phpspec/phpspec/issues/950.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpspec/phpspec/issues/950#event-700063205, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AA8BqDEtm3IspaN_HoMrQRk7KbhLXntVks5qON6XgaJpZM4Iwzfo\n.\n. \n",
    "zygous": "I was just looking for these matchers too.\nMy use case is implementing some comparison methods. I don't care what number the method returns as long as it's either negative, positive or zero, and I think the actual numbers are implementation details and therefore shouldn't be specified exactly.\nOf course, as I type this I realise I'd be just as happy with shouldBeNegative() and shouldBePositive(), and that PhpSpec itself has a Behat feature implementing shouldBePositive() as an inline matcher. So, all's good (but perhaps it's worth \"promoting\" shouldBeNegative() and shouldBePositive() to \"real\" matchers...).\n. ",
    "webkenny": "I'm so sorry for wasting cycles. Silly misunderstanding of what was what in the docs. Simply making a small change to my yml file fixed it. Here it is for those that encounter this in the future:\nsuites:\n    app_suite:\n        namespace: 'App\\Entity'\n        spec_path: 'tests/phpspec/'\nBecause, recall that src_path is always src by default. See this section of the documentation for the details and read it twice.\nI'll see myself out. :)\n. Thanks for the reply. I realized only minutes after posting that I wasn't reading the documentation correctly. phpspec is an excellent tool and I appreciate your work and response. Have a good weekend!\n. ",
    "remicollet": "\n...however I'm not clear why the system executing the tests doesn't know what PHP version it's using?\n\nBecause when you have multiple parallel installed versions, such as the ones provided by SCL in RPM distributions.\nI know other distro only provide a single PHP version, so, I understand you don't care... :(\n. > At first glance this would appear to be a PHP bug not a PhpSpec bug?\nPrototype are really different, PHP 7.2 is simply stricter.\n(IIRC this have been apply, then reverted in 7.1 to be strictly BC compliant). With 5.0.2, I got:\n```\n----  failed examples\n    PhpSpec/Matcher/IterateLikeMatcher\n\n62  \u2718 does not positive match generator while not iterating the same\n        expected exception message to be \"Expected subject to have ...\", but it is \"Expected subject to\n        have ...\".\n    @@ -1,5 +1,5 @@\n    -Expected subject to have element #0 with key \"0\" and value \"stdClass::__set_state(array(\n    +Expected subject to have element #0 with key \"0\" and value \"(object) array(\n        'foo' => 'bar',\n    -))\", but got key \"0\" and value \"stdClass::__set_state(array(\n    +)\", but got key \"0\" and value \"(object) array(\n        'foo' => 'foo',\n    -))\".\n    +)\".\n\n\n      77                 'iterateLike',\n      78                 $this->createGeneratorReturningArray([$first]),\n      79                 [$this->createGeneratorReturningArray([$second])],\n      80             ])\n      81         ;\n      82     }\n\n     0 /dev/shm/BUILDROOT/php-phpspec-5.0.2-1.fc27.remi.x86_64/usr/share/php/PhpSpec/Matcher/ThrowMatcher.php:152\n       throw new PhpSpec\\Exception\\Example\\NotEqualException(\"Expected exception `messa...\")\n     1 [internal]\n       spec\\PhpSpec\\Matcher\\IterateLikeMatcherSpec->it_does_not_positive_match_generator_while_not_iterating_the_same()\n     2 /dev/shm/BUILDROOT/php-phpspec-5.0.2-1.fc27.remi.x86_64/usr/share/php/PhpSpec/Runner/ExampleRunner.php:150\n       ReflectionMethod->invokeArgs([obj:spec\\PhpSpec\\Matcher\\IterateLikeMatcherSpec], [array:0])\n     3 /usr/share/php/Symfony4/Component/Console/Application.php:904\n       Symfony\\Component\\Console\\Command\\Command->run([obj:Symfony\\Component\\Console\\Input\\ArgvInput], [obj:Symfony\\Component\\Console\\Output\\ConsoleOutput])\n     4 /usr/share/php/Symfony4/Component/Console/Application.php:262\n       Symfony\\Component\\Console\\Application->doRunCommand([obj:PhpSpec\\Console\\Command\\RunCommand], [obj:Symfony\\Component\\Console\\Input\\ArgvInput], [obj:Symfony\\Component\\Console\\Output\\ConsoleOutput])\n     5 /dev/shm/BUILDROOT/php-phpspec-5.0.2-1.fc27.remi.x86_64/usr/share/php/PhpSpec/Console/Application.php:89\n       Symfony\\Component\\Console\\Application->doRun([obj:Symfony\\Component\\Console\\Input\\ArgvInput], [obj:Symfony\\Component\\Console\\Output\\ConsoleOutput])\n     6 bin/phpspec:21\n       Symfony\\Component\\Console\\Application->run()\n     7 bin/phpspec:23\n       {closure}(\"5.0.2\")\n\n```. Indeed using PHP_INT_MAX instead of 4209531264 in this file allow test suite to pass on i386 and x86_64\nsed -e 's/4209531264/PHP_INT_MAX/' -i spec/PhpSpec/Matcher/ScalarMatcherSpec.php. ",
    "felixkiss": "Functionality did already work with ArrayObjects. Only arrays were affected by this bug.\n. Looks good. More detailed error messages are always an improvement.\nAs for $this->method()->shouldNotHaveKeyWithValue('abc', 123): I would expect it to pass with [] based on the wording of the matcher.\n. I did some digging. The error occurs if I mock-by-typehint Illuminate\\Support\\Collection (v5.2) like so:\n``` php\n<?php namespace spec\\App;\nuse PhpSpec\\ObjectBehavior;\nuse Illuminate\\Support\\Collection;\nclass FooSpec extends ObjectBehavior\n{\n    function let(Collection $collection)\n    {\n        $this->beConstructedWith($collection);\n    }\nfunction it_is_initializable()\n{\n    $this->shouldHaveType('App\\Foo');\n}\n\n}\n```\n```\nPHP Parse error:  syntax error, unexpected '.0' (T_DNUMBER), expecting ')' in /Users/felix/code/foo-bar/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/ClassCreator.php(49) : eval()'d code on line 53\nParse error: syntax error, unexpected '.0' (T_DNUMBER), expecting ')' in /Users/felix/code/foo-bar/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/ClassCreator.php(49) : eval()'d code on line 53\n```\nLine 53 of the generated code looks like this:\nphp\npublic  function flatten( $depth = INF.0) {\n    return $this->getProphecy()->makeProphecyMethodCall(__FUNCTION__, func_get_args());\n}\n. Thanks. Travis did not have 7.0.3 the last time I tried (4 days ago). Now with 7.0.3 everything works. :+1: \n. ",
    "gstaniforthsessiondigital": "So if you have public properties in your specs you use var because thats more expressive than public/private/protected in the sense of meaning variable...\nSeems unrealistic to wave the magic hand and say they are not code... because they are, I don't see why we can't have consistency and write the code the same way. \nWhy can't we have nice things :(\nIs there a roadmap which replaces the specs with an expressive whitespace parsed language perhaps? :trollface: \n. ",
    "hendore": "Thank you @jakubzapletal that works, however I realised I could return anything from the factory method and the example would still pass, so instead of using getWrappedObject I'm asserting the object under test is of a specific type.\nphp\nfunction it_can_be_constructed_from_a_cart(CartInterface $cart)\n{\n    $this->beConstructedThrough('fromCart', [$cart]);\n    $this->shouldHaveType('Checkout\\Order');\n}\nThanks.\n. ",
    "sukei": "Hi, any thoughts on this?\n. ",
    "Sukhrob": "You are right, @avant1. Thanks\n. ",
    "greydnls": "Oh yes, that's a much better solution. Would we be able to pass a variable (the name of the file just created) to the command? \nI want to avoid having to use git add --all\n. It's something I run into constantly. If it's not a larger issue, I'd be happy to write an extension for it. \n. ",
    "sroze": "As PhpSpec is mainly used in development environment, I'd consider that the minimum PHP version can be bumped as part of a minor version update, especially given that PHP 5.3 is now extremely old to be present on many dev or CI environments.\n. I would actually remove this shouldHaveType thing... That's more testing PhpSpec that something else IMO.\n. @stof That's the PHP runtime's way of seeing that type hinting, but that would be extremely useful when writing specs to not have to write the FQCN or manually add the use as we can guess that it's probably an interface that the user didn't created yet.\n@ciaranmcnulty related to the point 2., if I understood correctly, you disagree with my example ? Which means that it would work for the some cases because you've only a two-level depth, but won't do for the rest ?\nAnd we could simply set the default value to false to prevent this new possible human failure.\n. :+1: \n. :tada:\n. That actually makes sense as all the typehints are removed. The easiest way to fix this bug is to keep the typehints in the anonymous declarations, as it makes non-sense to strip them.\n. The issue is fixed by #815 @ciaranmcnulty!\n. Closing in favor of #815.\n. @stof yop yop I'll have a look today \n. @ciaranmcnulty :tada: \n. Makes sense, addressed your points @stof.\n. @ciaranmcnulty I fixed the typo reported by @jon-acker :)\n. @tomphp are you running the suite with PHP 5 or 7?\n. @ciaranmcnulty FYI, the Scrutinizer failures are not related to this PR, except one duplication that is not really accurate. Obviously that would be better with the state machine but at the moment, that'll fix this problem with PHP7. \n. You can mock DateTime objects, you'll simply have to explicitly set the result of each method call. \nBut we don't consider it as a really good practice for many reasons, including the fact that for instance, if your implementation is not using the getDate method anymore but getTimestamp at some point, you'll need to change all your tests to match this. Your DateTime object is a Value Object (except that it is mutable... :(), so you shouldn't even need to mock it, but simply give an instance.\n. @ciaranmcnulty could you release a minor version for that?. @ciaranmcnulty anything special you'd like me to have a look to in this issue? \ud83d\ude03 . shouldIterateStartingLike ?. Thank you for taking it over @ciaranmcnulty!. Very nice way of moving classes while keeping the BC \ud83d\udc4f \n\nAn end goal may be to decouple into separate repos\n\nRead-only splits are literally other source repos? If it's the last one, I'm not sure it's a great target as it adds a huge management overhead. . Proposed #1181 to replace this PR, adding a few fixes to PhpSpec for Symfony 4 support.. Yes sir.. It's \ud83d\udc9a . Oh, just read your suggestion @greg0ire. I've suggested TestedPair to @ciaranmcnulty a few minutes ago... Seems like we are a few going to this direction.\nWhat's wrong with the Test word @ciaranmcnulty?. Exactly here: https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Loader/ResourceLoader.php#L69\nThe \"problem\" is that just isolating this regex in a method might be too much.\n. I'd argue that a continue after a return is useless :stuck_out_tongue:\n. as you can imagine, that wasn't suppose to be here, I just removed it.\n. Can you use 4 spaces instead of tabs for indentation?\n. The best option would be to have the ResourceInterface object inside this rewriter, but that's not possible because it come from a stream wrapper that just have the file path. \nThe second option can be to use the ResourceManager from the classname. If a resource is found, then we extract the tokens from that class. What do you think about that?\n. I would remove the coma\n. Why is this deprecated? What else should I use instead? When will it be removed?. Maybe you could name the extension \"DefaultMatchersExtension\"? Just feels weird to have an implementation named the same as the contract.. It's style but hey... we don't need this PhpDoc anymore :)). I mean, you should just answer these questions in the @deprecated comment I think. That's how deprecation comments are done in Symfony and that's quite helpful.. \ud83e\udd37\u200d\u2642\ufe0f . As well, yep!. ",
    "bamarni": ":+1: for dropping 5.4 support too, it would allow to update the specification template with a use statement and $this->shouldHaveType(ClassName::class), thus showing an example of how to avoid FQCN as strings in specs.\n. @adamelso : I had been switching to this and phpspec is still able to create the new class file when missing. Anyways that's not the topic of this issue, thanks for the info about roadmap @ciaranmcnulty :+1: \n. ",
    "pamil": "@adamelso @ciaranmcnulty the main reason behind leaving string FQCNs in it_is_initializable() method in Sylius was the ease of maintenance - changing to ::class would require everyone contributing to modify their templates or automatically generated specs manually. If PhpSpec uses ::class in the default templates, I'm almost sure that Sylius will adopt the same convention too.\n. @GrahamCampbell I'm not sure yet as it may be somehow connected with #884.\n. @GrahamCampbell @stof alright, going to report it tomorrow, thanks for help!\n. @kix can't you use yes 'Y' | phpspec run?\n. :+1:, but I guess we can unify the naming - there are both $config and $params now.\n. I tried to implement the solution proposed by @stof, but unfortunately Behat does not launch any subprocesses in order to run phpspec, it uses CommandTester from symfony/console instead.\n. I've named the new matchers shouldIterate and shouldStartIterating, but I'm open for any other names propositions.\n. @ciaranmcnulty all comments applied, but I've only changed SubjectElementDoesNotMatchException to extend FailureException, the other ones behave differently in each matcher.\n. I'd remove 2>/dev/null part, in case of phpenv failing to disable XDebug unexpectedly.\n. Nice, didn't think there is some function to set an environmental variable and restore it at the end of script execution.\n. I'll be grateful for a bugfix release containing this one :). Awesome, thanks! \ud83c\udf89 . ",
    "mike182uk": "@stof symfony/process uses proc_open under the hood. I agree though that using symfony/process would be better as it will handle more edge cases than my helper class. \nI have swapped out my helper for symfony/process.\n. This should work out of the box in 2.4 thanks to https://github.com/phpspec/phpspec/pull/730. Until 2.4 is stable you can always use https://github.com/mike182uk/phpspec-run-fqcn :)\n. Ah, i meant to lock it at 2.6.*. 2.7 requires php-5.3.9 but travis still runs tests against php-5.3.3 (so composer install would fail using 2.7 on 5.3.3). I've updated the PR.\n. ",
    "localheinz": "@ciaranmcnulty \nTo be honest, I'm a bit confused - there are so many fully qualified class names, while at the same time, these are imported, is there a reason I'm unaware of why that is done?\n. @ciaranmcnulty \nRebased!\n. You're welcome, @ciaranmcnulty!\n. ",
    "dadamssg": "unfortunately not. I just tried this and the same thing happened. \n``` php\n<?php\nclass CommandStatisticsMiddlewareSpec extends ObjectBehavior\n{\n    function let(ObjectNamer $namer, Gatherer $gatherer)\n    {\n        $this->beConstructedWith($namer, $gatherer);\n    }\nfunction it_is_initializable()\n{\n    $this->shouldHaveType(CommandStatisticsMiddleware::CLASS);\n}\n\nfunction it_gathers_increment_stat(ObjectNamer $namer, Gatherer $gatherer)\n{\n    $command = new \\stdClass();\n    $next = function ($arg) {};\n\n    $namer->name($command)->willReturn($statName = \"foobar\");\n\n    $gatherer->increment($statName)->shouldBeCalled();\n    $gatherer->time($statName, $next)->shouldBeCalled();\n\n    $this->handle($command, $next);\n}\n\n}\n```\n. ahh no you didn't. I realized i had some minor changes in my original post and edited it. The code in my original post is what i tried first and the code in the second one is what i tried and got the same result. Sorry for the confusion. \n. Ah yeah you're right.That works for me too. Strange. Thanks for looking into this! \n. ",
    "nsitbon": "running \nvendor/bin/phpspec desc Foo\ngenerates a spec file without ending empty line.\n. My bad : vim was hiding the trailing empty line. I'm sorry for having wasted your time.\nThe good point is that it allows me to catch a bug.\n. ",
    "ismailatkurt": "+1\n. ",
    "erdemkeren": "Hmm I'll check it out. Using 2.1 at the moment.\n. I updated to 2.3.0 beta; yes, the behavior changed but still buggy. When I add the comment at the end of the file, it placed the new function between the namespace and the use lines, causing a syntax error like;\n```\n<?php\nnamespace Foo\\Bar;\nuse Foo\\Baz;\nuse Foo\\Qux;\nuse Foo\\Ba\npublic function bugOnMethodCreate()\n{\n    // TODO: write logic here\n}\n\nrBaz;\nuse ...;\n/*\n * Class starts here\n /\nclass Quux \n{\n    // Class body here.\n}\n// End of quux class.\n```\n. Thanks, Here is an example which will cause some trouble (not fatal, but that was chance).\nPave the way for it:\nFile: Dev/app/Contracts/TestCalculatorInterface.php\n```\n<?php\nnamespace Dev\\Contracts;\ninterface TestCalculatorInterface\n{\n}\n```\nFile: Dev/app/Contracts/TestRepositoryInterface.php\n```\n<?php\nnamespace Dev\\Contracts;\ninterface TestRepositoryInterface\n{\n}\n```\nFile: Dev/spec/Services/TestServiceSpec.php\n```\n<?php\nnamespace spec\\Dev\\Services;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nuse Dev\\Contracts\\TestCalculatorInterface;\nuse Dev\\Contracts\\TestRepositoryInterface;\nclass TestServiceSpec extends ObjectBehavior\n{\n    function let(TestCalculatorInterface $testCalculator, TestRepositoryInterface $testRepository)\n    {\n        $this->beConstructedWith($testCalculator, $testRepository);\n    }\nfunction it_is_initializable()\n{\n    $this->shouldHaveType('Dev\\Services\\TestService');\n}\n\nfunction it_should_create_the_method_for_me_if_it_doesnt_exists()\n{\n    $this->methodToBeCreated();\n}\n\n}\n```\nFile: Dev/app/Services/TestService.php\n```\n<?php\n/\n * This file is a part of the phpspec test for\n * the issue #741@github.\n \n * Date: 14 July 2015\n * Hour: 10:50\n /\nnamespace Dev\\Services;\nuse Dev\\Contracts\\TestCalculatorInterface;\nuse Dev\\Contracts\\TestRepositoryInterface;\n/\n * The class being tested,\n * originally created by phpspec.\n \n * @author Hilmi Erdem KEREN\n * @package Dev\n /\nclass TestService\n{\n/**\n * The test repository.\n *\n * @var Dev\\Contracts\\Repositories\\Eloquent\\TestRepositoryInterface\n */\nprotected $testRepository;\n\n/**\n * Another dependency.\n *\n * @var Dev\\Contracts\\Calcs\\TestCalculatorInterface\n */\nprotected $testCalculator;\n\n/**\n * Init the test service.\n *\n * @param TestCalculatorInterface $testCalculator\n * @param TestRepositoryInterface $testRepository\n */\npublic function __construct(TestCalculatorInterface $testCalculator, TestRepositoryInterface $testRepository)\n{\n    $this->testCalculator = $testCalculator;\n    $this->testRepository = $testRepository;\n}\n\n}\n// End of the test class.\n```\nAnd here is the result when I run '$ phpspec r' from terminal:\n```\n<?php\n/*\n * This file is a part of the phpspec test for\n * the issue #741@github.\n \n * \npublic function methodToBeCreated()\n{\n    // TODO: write logic here\n}\n\nDate: 14 July 2015\n * Hour: 10:50\n */\nnamespace Dev\\Services;\nuse Dev\\Contracts\\TestCalculatorInterface;\nuse Dev\\Contracts\\TestRepositoryInterface;\n[...]\n```\nBtw, because it created the method between comment lines, a fatal error is not triggered and phpspec endlessly asks to create the method. Like this:\n```\n<?php\n/*\n * This file is a part of the phpspec test for\n * the issue #741@github.\n \n * \npublic function methodToBeCreated()\n{\n    // TODO: write logic here\n}\n\n\n\npublic function methodToBeCreated()\n{\n    // TODO: write logic here\n}\n\n\n\npublic function methodToBeCreated()\n{\n    // TODO: write logic here\n}\n\nDate: 14 July 2015\n * Hour: 10:50\n */\n[...]\n```\n. And that also continue to happen when I remove the comment at the end of file.\n. ",
    "pc-paul": "Seems to be only when I hit a 500 error.\n. You're right, sorry, long day. \nThink the issue is that PHP_CodeSniffer not compatible with current version of PhpSpec. Another user had a similar issue and it was suggested downgrading to a version of PhpSpec before 2.0. Is there still a version before 2.0 out there?\n. If my api returns a 200, nothing written to the PHP error log. Only when I hit a 500.\n. Going to try with 1.2 just to see if that helps.\n. FYI, 1.2 solved my problem, but issue not with PHPsec. Thanks for your help. Sorry for wasting your time.\n. ",
    "m1n0": "Should this throw an exception and stop the suite or just inform the user about the issue?\n. I tried debugging the $exitCode variable returned by Symfony\\Component\\Console::doRun but I got 1 returned when producing similar error and 0 for successful runs as expected, both for stable 2.5 version and the current-dev master branch. I am not sure if that is what you are referring to, maybe it's a setup issue with your CI?\n(Also, use format options when pasting code please, it's much easier to read, thanks)\n. I tried your example, but I had to change class TestClassSpec extends SilexObjectBehavior to extend ObjectBehaviour since I don't have your code base of course.\nWhen everything is correct, and I run vendor/bin/phpspec run, all tests pass and echo $? prints out 0.\nWhen I change the spec to pass string into the test method as you suggest, test fails with \n```\nvendor/bin/phpspec run\nTestNamespace/TestClass\n  11  - it is doing something\n      error: Argument 1 passed to TestNamespace\\TestClass::test() must be an instance of DateTime, string given in\n      /Users/m1n0/Sites/phpspec-playground/src/TestNamespace/TestClass.php line 7\n                     66%                                     33%             3\n\n2 specs\n3 examples (2 passed, 1 broken)\n20ms\n```\nand echo $? prints out 1 as expected. \n. ",
    "ladhadha": "Hi, I try to make my inline matchers based on this.\nuse PhpSpec\\ObjectBehavior;\nuse PhpSpec\\Matcher\\InlineMatcher;\nuse PhpSpec\\Exception\\Example\\FailureException;\nBut I can't find this class PhpSpec\\Matcher\\InlineMatcher. So where it is? Am I miss some dependency to install?\n. ",
    "gajdaw": "Thanks for you comments. I haven't thought about using the extension. But, of course, you are right. Including an extension in config doesn't call any methods defined in the extension.\nI included a new test case it_should_succeed_in_using_new_matcher() that uses the new matcher defined in the extension. This required the complete implementation of a new matcher.\n. @stof Done.\n. If I am not mistaken right now you can pass just anything as a matcher service. Even a callable that returns an object that does not implement PhpSpec\\Matcher\\MatcherInterface.\nIn that case phpspec will silently fail.\nUsing the trait included in this PR you will get an exception with clear message.\nSo it could be of some value for extension developers. However, the price is the additional step to validate the service. \n. Yes, that's good idea. I wasn't sure if this should go to the core either.\n. I solved this by creating identical private method getPrefixAndSid() in the trait.\nThe code is in my branch:\nhttps://github.com/gajdaw/phpspec/tree/base-extension-trait\nBecause PR is closed the code is not updated here. I wasn't sure if I would be able to fix broken tests on PHP 5.3. But I did it. \nIf you consider this solution valuable can you, please, reopen this PR?\n. ",
    "crmpicco": "@ciaranmcnulty Great, thanks for the quick reply.\n. ",
    "umpirsky": "@Ocramius True, I know, i just thought that in most cases class will not be empty. :)\nI guess more appropriate fix would be to have first method template and add empty line only if it's not the first thing after {.\n. @Ocramius But harder to implement. :trollface: \n. :smile: \n. @ciaranmcnulty Oh, it actually works in master, cool! Thanks. :+1: \n. I just gor:\nexception [err:TypeError(\"Argument 1 passed to PhpSpec\\Exception\\ExceptionFactory::methodNotFound() must be of the type string, null given, called in /www/sites/chess.com/current/vendor/phpspec/phpspec/src/PhpSpec/Wrapper/Subject/Caller.php on line 360\")] has been thrown.\nWith PHPSpec 5.0.1.\nOnly line changed from 363 to 360.. Here is the reproducer https://github.com/umpirsky/PermissionsHandler/tree/phpspec-1194\ngit clone git@github.com:umpirsky/PermissionsHandler.git\ncd PermissionsHandler\ngit checkout phpspec-1194\n./bin/phpspec run                                            \nUmpirsky/PermissionsHandler/Configuration                                         \n  28  - it gets writable dirs\n      exception [err:TypeError(\"Argument 1 passed to PhpSpec\\Exception\\ExceptionFactory::methodNotFound() must be of the type string, null given, called in /home/umpirsky/Projects/PermissionsHandler/vendor/phpspec/phpspec/src/PhpSpec/Wrapper/Subject/Caller.php on line 360\")] has been thrown.\nYes, we do use PHPSpec. ;). ",
    "skyellin": "Looks like the same as this issue: https://github.com/phpspec/phpspec/issues/354\n. ",
    "ChadSikorra": "I have a fix for this I could submit, but I'm not sure what to do with the specs. Currently the spec for ThrowMatcher will not work for PHP 7 because of issue https://github.com/phpspec/phpspec/issues/659. I could adjust the specs to use phpdoc notation, but I'm not sure if that is to be the suggested route to go or if someone was working on a separate fix for that.\n. ",
    "javi-dev": "@avant1 Thank you for confirming the bug. I usually use Vagrant/Homestead, and I'm even toying with Docker, but this was a quick and dirty \"I'm learning phpspec!\" project\u2026 that ended up with me digging through phpspec's own code, and the project is not even started :D\nAlso, thank you again for your detailed explanation, I feel like I'm learning lots of interesting things. I'm afraid I still don't know enough about the feature (Why the env variable? Won't this changes to the code break other systems? Etc.) to submit a PR, and it seems to me that @ciaranmcnulty has plans in mind for the feature.\n@ciaranmcnulty Sorry for giving you more work ;)\n. Oh, I understand now. I've been in the classic yellow loop before (more times than I would like to admit). I'll keep digging, for funsies, it's not like I had nothing better to do this weekend.\n. ",
    "chrisemerson": "I am looking at this at the moment, and have got it working, but don't like the solution I currently have. I have an additional issue with my setup as well because my PHP executable is in a path with a space in it, which also throws an error even once the environment variable issue is solved. I'll see where I get and open a PR if I work it out!\n. I've opened a PR for this, linked above.\n. Apologies, I did look through the list but didn't spot that.\n. Unfortunately, windows handles environment variables in a different enough way to unix based OS's that I think to fix in the existing rerunner would create a fair amount of mess - you have to call 'set' as a command, separate commands with && and not put the values in quotes (or they become part of the environment var itself).\nI'll fix the other couple of items you've mentioned.\n. @ciaranmcnulty A fix for what? Or just that you want the command parts escaped differently? I'm happy to look into that further, just awaiting some feedback on whether you want me to or not.\n. I'll take a look at it this evening if I get a chance, should be this week either way.\n. Apologies for delay - I've changed this now, used escapeshellarg() on the path instead of manually putting the quotes in there. I'll open a new PR.\n. This is odd. I get this issue with the 2nd onwards, but the first is fine. I was about to look at this.\n. The files generated all use LF so there should be no difference there.\n. Following your example, the code generated fine for me (whether it's the constructor or something else). Adding a 2nd method onwards though for me generates these outside the class. It's a problem I've seen quite a few times before, yet on other windows machines it works fine, and you have a different experience again! I'd love to try and get to the bottom of it.\n. I've found (and fixed) the issue - PR to follow. I just want to make sure it always works still. It was indeed to do with line endings, but it looks like it depends how you have your git set up - whether it checks files out as-is or auto-converts them to CRLF (I personally check out as-is, commit as LF, and have my IDE only ever use LF, as per PSR-2 standards).\n. See PR #831\n. Should have said in my commit message - it should fix #827, though I wasn't able to replicate the precise example.\n. OK, I'll see if I can find other examples and change this to match.\n. I've had a search through the codebase but can't find any other places you are detecting windows any ideas where it might be?\n. The quote marks either side of the call to the executable sort this out, though I am working on the assumption that the output of the getExecutablePath() method is 'clean' and doesn't have anything within it that needs escaping itself. The PHP escape functions cause the command not to run under windows for some reason. My PHP executable is in Program Files and this change works with it.\n. You don't need to escape spaces within the double quotes - the only issue would occur if getExecutablePath returned something with a double quote mark within it.\n. The escaping itself just didn't work. I did try this first but had no luck trying several different things.\n. OK, perhaps it's my misunderstanding of these functions then - do you want me to look further into it and PR again if I get it working using the escapeshellarg functions?\n. ",
    "guiwoda": "Weird it never broke that spec before, then.\n. In specs where the generator test wasn't there, I also added that test case separately from the output expectation tests.\n. Hey @ciaranmcnulty! I figured after your brainstorming you'd close it, so don't worry about it. \nI was trying to reuse the generators outside of the framework, so if you don't mind, here's my point of view on the subject:\n- A side-effect free generate(...): string method as @stof mentioned would be ideal. \n- IO could be handled outside the generator, and framework could decorate over each of them if knowing what failed or happened is a concern. (it seems that's the reason why each generator handles its own output).\n``` php\nclass ReportingGenerator implements GeneratorInterface\n{\n    private $io, $generator, $success, $failure;\npublic function __construct($io, $generator, $success, $failure){ /* ... */ }\n\npublic function generate(): string\n{\n    try {\n        $output = $this->generator->generate(...$args);\n        $this->io->writeln($this->success);\n\n        return $output;\n    } catch (Exception $e) {\n        $this->io->writeln($this->failure);\n        throw $e;\n    }\n}\n\n}\n```\n- Prompting could be reworked as a try - catch - prompt and retry cycle so generators don't really care about getting feedback in the middle of the process. \nAnd, of course, splitting them to a standalone package would be awesome! :-) \nThanks for all the great work you do! \n. ",
    "NigelGreenway": "@jon-acker Not sure I get what you mean?\n. @ciaranmcnulty Maybe I am using it incorrectly, but as I design/build my classes/objects I would find it helpful if the parameters added the semantic information and provide one less thing for me to change when I start to use the class.\n. I will have a look at spec-gen.\n. ",
    "dstockto": "+1 for the generator being able to name the parameter and typehint in the generated code\n. @ciaranmcnulty I think with the second spec test, it would blow up with a stack trace saying it tried to call a non-existent method initialize on some object if the code wasn't written properly. Then any following tests are not run. I'm also interested in ensuring that it would not call the initialize method if it existed on the object but the object doesn't implement the interface. That way a check like methodExists wouldn't be sufficient. (Or potentially on the other side, testing Duck Typed objects that don't implement the interface but do have the method and ensuring the method is called).\nThank you for considering it.\n. Sorry, I should have mentioned the formatter we normally use is dot.\n. Here's my results. I don't remember what we changed that made this be less of an issue, but I lowered my memory limit until I got it to fail. In this case, it was 77M for my current test suite without the code from the patch applied. At 78M it succeeds, at 77M, I get \nFatal error happened while executing the following\n     [exec]     it will not allow deleteList\n     [exec]     Allowed memory size of 80740352 bytes exhausted (tried to allocate 32768 bytes) in /vagrant_web/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/ClassCreator.php(49) : eval()'d code on line\nWith the patch applied, unfortunately, I get the exact same result. It fails on the same line of code asking for the same amount of memory. With 78M it passes.\n. No, unfortunately. I don't have the same situation I did before. We've changed some things, deleted some modules and thus some of the tests, so it's not blowing up with a 128M limit any more. If I get some time tomorrow or soon, perhaps I can do a git bisect to find the spot where it failing on 128M and see if the patch works there. It's much too late this evening, though.\n. It seems that just changing the command line parameters will prevent the segmentation fault. Adding --format=dot or --format=pretty seems to \"fix\" it too.\n. This is great news. @nick-jones, you're obviously under no obligation to do this, but if you could provide instructions on how you got the stack trace or point me to a place where I could could follow to get a stack trace for seg faults, I would be very appreciative.\nThank you.\n. @stof The issue @stringerbell mentioned above with the small repro steps still happens on PHP 7.0.7. Additionally, the large test suite can still run into segfaults. Sometimes I can make it run through by changing the formatter or changing the order of some of the tests.\n/cc @ciaranmcnulty \n. As best I can tell so far on this, there must have been some garbage left over. I removed and reinstalled all PHP packages and it's running now. I hope this one can be put to bed. Please disregard above. I am now on 7.0.7 again and it's working now.\n. ",
    "maryo": "I'd be very surprised if so. I guess phpspec doesn't parse it's own docblocks so it should be OK. IBut I'm using phpspec for the first time today so I am not sure.\n. Exactly. I don't know how many IDEs support it. But looks like it's valid phpDoc. See https://github.com/phpDocumentor/phpDocumentor2/commit/14510b1833ed3ca3467169e8e9f5f6924342a977\nBut it's probably undocumented.\n. That's hard to answer since I don't expect people to report issues when it's not merged. So the only solution is probably to test it.\nWhat IDEs you want me to check?\nBTW I wouldn't call it a hack, it's valid phpDoc which is parsed by most IDEs. A better solution is to use real variadic argument instead of func_get_args (which is the same) but ...$arguments (the same notation as it's in phpDoc) is supported since 5.6 so we would need to wait.\n. Not sure I agree with the hack part :) but thanks for merging :+1: \n. ",
    "lfbn": "It makes sense to have this in the ResourceLoader? Can be another option like '--shuffle', that is passed from the RunCommand to the ResourceLoader. ResourceLoader before return shuffles the suites. Shuffle can assume that the tests are independent from each other, right?\n. I thought better on this, and maybe makes more sense to do this in SuiteRunner->run(). Run would have an boolean param shuffle.\n. Ok @ciaranmcnulty . But what you think the issue 876 was?\n. ",
    "roelmonnens": "Ok will try it\nAnd that it doesn't work if I'm using the use statement? Class LoggerInterface not found. \nIs this related?\n. ",
    "nick-jones": "@ciaranmcnulty - For me it OOMs (memory_limit=1G) at phpspec/prophecy/src/Prophecy/Util/ExportUtil.php:145 (specifically the call into print_r). The $value it is trying to dump is particularly large; this is due to a trace being present in this case, as PHP is building this on Exception construction. There are a good number of references to the ObjectProphecy instance for the Exception double within the trace arguments, so ultimately when it's dumping these, it has a ton of stuff to get through (including going through the trace again in each case). I suspect this is why it's exhausting memory..\nIf this is indeed the case, then perhaps phpspec/prophecy#121 will fix this? There is no longer a print_r present in sebastianbergmann/exporter, so maybe the existing problem calling for a print_r to be used has been solved in a different fashion.\n@roelmonnens - Class LoggerInterface not found - that is probably due to PHPDoc being left in place without the full qualified class name in the @param tag.\n. For me @stringerbell's test case results in an assert failure in Zend/zend_variables.c, line 43:\n``\nphp: .../php-7.0.4/Zend/zend_variables.c:43: _zval_dtor_func: Assertion(arr)->gc.refcount <= 1' failed.\nProgram received signal SIGABRT, Aborted.\n0x00007ffff6dc30d5 in raise () from /lib/x86_64-linux-gnu/libc.so.6\n(gdb) bt\n0  0x00007ffff6dc30d5 in raise () from /lib/x86_64-linux-gnu/libc.so.6\n1  0x00007ffff6dc683b in abort () from /lib/x86_64-linux-gnu/libc.so.6\n2  0x00007ffff6dbbd9e in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n3  0x00007ffff6dbbe42 in __assert_fail () from /lib/x86_64-linux-gnu/libc.so.6\n4  0x000000000090d9f5 in _zval_dtor_func (p=0x7ffff65b2360, __zend_filename=0xf42c80 \".../php-7.0.4/Zend/zend_variables.c\", __zend_lineno=246) at .../php-7.0.4/Zend/zend_variables.c:43\n5  0x000000000090d863 in _zval_dtor (zvalue=0x7ffff6297780, __zend_filename=0xf42c80 \".../php-7.0.4/Zend/zend_variables.c\", __zend_lineno=246) at .../php-7.0.4/Zend/zend_variables.h:44\n6  0x000000000090e193 in _zval_dtor_wrapper (zvalue=0x7ffff6297780) at .../php-7.0.4/Zend/zend_variables.c:246\n7  0x000000000090d3cb in zend_stack_clean (stack=0x12a9388, func=0x90e16f <_zval_dtor_wrapper>, free_elements=1 '\\001') at .../php-7.0.4/Zend/zend_stack.c:156\n8  0x00000000008f81bd in shutdown_executor () at .../php-7.0.4/Zend/zend_execute_API.c:298\n9  0x00000000009102e6 in zend_deactivate () at .../php-7.0.4/Zend/zend.c:967\n10 0x000000000087d359 in php_request_shutdown (dummy=0x0) at .../php-7.0.4/main/main.c:1823\n11 0x00000000009d81aa in do_cli (argc=3, argv=0x12ad9e0) at .../php-7.0.4/sapi/cli/php_cli.c:1142\n12 0x00000000009d8932 in main (argc=3, argv=0x12ad9e0) at .../php-7.0.4/sapi/cli/php_cli.c:1345\n```\nGoogling the assertion yields PHP bug #71930, which describes similar circumstances (running phpspec), and the same backtrace. As you'll see from the report, a fix was committed (5b1bb41) yesterday and the bug is now closed. I gave things a quick test: I received a segfault with 5b1bb41^ checked out, but did not with 5b1bb41. So I'll suggest it's now fixed, and will no longer happen in PHP 7.0.6 once released... all assuming the segfaults experienced above are due to the same :)\n. Actually, I've just realised the failure I experienced is purely due to the --enable-debug configure flag being used, as ZEND_ASSERT appears to do nothing without ZEND_DEBUG being true (at least that is my understanding). So that might not be the cause after all..\nRegarding getting a backtrace, you'll need to compile PHP from source with the --enable-debug configure flag used (for debug symbols). You could try debugging against your local PHP install, but it's unlikely to have been compiled with debug symbols, so you wont get a useful backtrace. Also, you should probably compile ahead of 5b1bb41^ in the php-src repository to avoid that assert failure I was experiencing. Then gdb --args /path/to/php-src/sapi/cli/php ./vendor/bin/phpspec run, (gdb) run and (gdb) bt (assuming it segfaults).\n. ",
    "toby-griffiths": "But it already fails on pending, does it not? That's why I wanted to add\nthis as my gulp watcher kept failing for spec's I'd not completed yet.\nPlease correct me if I'm wrong?\n. Thinking about it, should the runner return different codes based on whether tests are pending/skipped/failed/broken?  Perhaps that's the topic for another PR.\n. I'm finding it useful to disable the 'failure' for pending tests during development, but want them to still error during final build checks.  Happy to implement another solution that works in this scenario, if we can agree on one?.\n. I guess another possibility is to have different bitwise error codes for each type of failure, and the final error code could AND the bits from all tests\u2026 or does that sound like bad practice?\n. Perhaps another option would be to define 'environments' or some such in the config file, that defined what is considered a pass, and then use a single command line switch to select which set of rules to use each time?\n. @ciaranmcnulty I'm finding it useful to disable these 'failures' during development, as my test runner watch tasks would keep telling me I have failures, when actually they're just tests I've not got around to.\nPerhaps an alternative solution would be to have different error codes & have gulp (or any other test runner) respond differently to each code?\n. I think I may have resolve this.  I think the problem was that I was using ->shouldBeCalled()->willReturn()\nI've removed the ->shouldBeCalled() and the test behaves as expected.\nI'm guessing you should use one or other in any instance.\nI've updated the code now, but if you think it's useful, I'll dig it out of the git logs?\n. Just come across this thread as I'm trying to get the presenter in a custom matcher, but it looks like this isn't possible.\nIs there any way to do this currently?. Thanks for the info :-)\n. I realise it should suppress the error from causing the script to terminate, but for some reason, in my case, it didn't, and the script terminated for some reason.  I think I worked around this by refactoring to remove the need for the @, so I'm afraid I can re-test.\n. Happy to close this as unable to investigate further at the mo.\n. Do you mean there is an extra one?  I'm guessing 1 line between variables & method definition then?\n. Before the return value?  Should that also relate to the supports() method in the same file as well?\n. Is this different to the comment above?  Am confused?\n. Ah, OK.\n. If we are keep the pending option (or adding others later), we would then need to ensure that each case statement returns something from each conditional control path if we move the default return into the default case.  Leaving outside means less control logic within the switch structure.\nHaving said that, if each error type was going to return it's own error code, this would make more sense.\n. ",
    "haneev": "When i was working on a solution, it occurred to me that my tests were not failing anymore. After trying to reproduce this bug, it seems like this is now working as i expected and it does not happens to be bug anymore. I will close this ticket. \n. ",
    "PWalkow": "@mheki it does not to see any of the specs inside of this bundle.\n0 specs\n0 examples \n0ms\n. @mheki Unfortunately same results (no specs found)\n. ",
    "lzakrzewski": "The same result with:\n``` php\n<?php\nnamespace spec;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass TestObjectSpec extends ObjectBehavior\n{\n    function it_can_be_constructed()\n    {\n        $this->beConstructedWith();\n    $this->shouldHaveType('TestObject');\n}\n\n}\n```\nbash\n1 specs\n1 example (1 passed)\n8ms\n. ",
    "DonCallisto": "@shanethehat nevermind, it was an \"out-dated\" version of PHPSpec. I've resolved it updating the bundle :) You can close this\n. We have ~ 6000 examples and we got, today for the first time, after adding couple of specs, the same memory issue reported above.\nWe don't use private members and all the things I've read here.\nAny thoughts? . To all interested, take a look at https://github.com/phpspec/prophecy/pull/420. ping @ciaranmcnulty . No feedback for this?. I suppose this can be closed.. That's also an issue if you change dirs and re-run whole test suite: if we don't pay attention to number of executed spec, we would never be aware of any \"skipped\" test.. I would like to work on this feature. I've make some tries and I've come to:\n\ndispatch an event (more or less like is everywhere done in whole PHPSpec) when a spec class does not exists (file name does not correspond to Spec class basically or class does not have a Spec suffix?)\nlisten on the StatisticsCollector for this event and collect it\nprovide in formatters a way to display those infos without making the suite fail (or should it fail?)\n\nMoreover how would infos be displayed? Only count if not verbose? For every formatter? Display class names only if verbose? \nLet's discuss about it.. If that's still an interesting feature, I can work on it as I've checked and it doesn't seem to be too complex to implement a solution based on config and console override (if no verbosity setted, take the one from config, otherwise take the level specified in console).\nIn the other case, I suppose we can close this.. This can be closed as we provided it an implementation for this use case.. Can't we simply use php-cs-fixer and integrate it with CI pipeline?. -v (or -vv or -vvv there's no difference from PHPSpec prospective) will show file and line.\nWe build the exception this way https://github.com/phpspec/phpspec/blob/9d592837d0fdbbdfd53168af0c9ef92bd200e6bc/src/PhpSpec/Exception/ErrorException.php#L20-L23\nWe can enhance message with file and code line, otherwise we can stay with verbose output.\n. I think we can close this.. It seems that failing tests are not related with this PR.. @ciaranmcnulty I've rebased to master after @Sam-Burns PR merge. Now should be ok to merge this . No, it's because we have typehint on the return type and none != null so this code will produce a fatal error. Yes, of course. I'll write them ASAP.. @ciaranmcnulty I've added requested tests. Can you take a look?\nThanks.. Did you get rid of\n\nexpected calls were: [...]\n\npart or did you forget it?. Yes, you have a valid POV and I agree.\nI was just asking if this \"forgetfulness\" was intentional or not. @ciaranmcnulty I've fix all you asked for in a separate commit, in order to let the review be easier. \nJust one thing: CI is broken. I've tried onto my laptop and if I run single behat test (so if I specify feature file) test will pass, otherwise it won't. I really don't know if, maybe?, behat w/o single feature file runs with any command options (like verbosity?).. @ciaranmcnulty your intuition (from our Slack converstation) was good. Take a look to last commit, it should fix it the right way.\nBTW we still have an unresolved conversation above, please check it out, thanks!. @ciaranmcnulty travis is green :tada: . @ciaranmcnulty if it LGTY, you can directly squash the commit via GitHub.\nThanks.. ps.: take a look at https://github.com/phpspec/phpspec/blob/53e364e64a789581b127641f055b27ec90d2f1a3/features/matchers/developer_uses_identity_matcher.feature\nThis works but is not coherent with this modification. I suppose I should fix this everywhere in order to make it coherent.\nLet me know what you think.. So you mean that accepted value should be vvv (or 3 that's debug value)? Is not counterintuitive? I mean, if I use vvv or whatever I would expect that also other levels are handled so I would try with v and vv.\nWDYT?. No, we can't due to this https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Application.php#L844-L849. ",
    "GeeH": "Basically, at some point either inside the IDE, or as part of the build\nprocess, a script would run that would resolve all the available matchers,\nand run getMatchers() (or similar) on every available matcher, creating an\nuber list of all available matchers. It would then generate @method\nannotations on a stub file, or if it's in the build process, on the\nObjectBehavior class.\nCurrently I'm working with the IDE team to try and find a way that library\noperators can bundle stubs in their own projects, or provide predictable\nscripts that the IDE can use to generate it, but it may be that adding the\n@methods to the ObjectBehavior automatically as part of your build\nprocess is viable.\nAnyway, until there's a way to resolve all matcher names it's actually\nimpossible to do anything :P\nG\nOn Sun, 29 Nov 2015 at 17:51 Ciaran McNulty notifications@github.com\nwrote:\n\nThis seems sensible, although for BC it will need to be a new interface.\nOf course, extensions may lag behind in providing support as well.\nHow would discovery work? PhpSpec only resolves the available matchers at\nruntime for the spec\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/phpspec/phpspec/pull/809#issuecomment-160438473.\n. \n",
    "javierseixas": "Thanks @jon-acker for your suggestion and example. I didn't know it was possible to do such a things with Prophecy. I evolved your proposal and I finally coded a new TokenInterface implementation that would compare each property in the passed class, except the ones specified as ignorables. My spec looks like this:\n``` php\nclass SignUpHandlerSpec\n{\n    public function it_should_add_a_user(UserRepositoryInterface $userRepository)\n    {\n        $user= User::named(\"javier\", \"seixas\");\n    $ignorableProperties = [\"id\"];\n    $userWrappedByIgnorable = new IgnorableExactValueToken($user, $ignorableProperties);\n\n    $userRepository->add($userWrappedByIgnorable)->shouldBeCalled();\n\n    $this->handle($command);\n}\n\n}\n```\nAnd the new ValueToken looks like this:\n``` php\nclass ExactIgnorableValueToken implements TokenInterface\n{\n    ...\npublic function scoreArgument($argument)\n{\n    $propertiesValue = (new \\ReflectionObject($this->value))->getProperties();\n    $propertiesArgument = (new \\ReflectionObject($argument))->getProperties();\n\n    if (count($propertiesArgument) !== count($propertiesValue)) {\n        return false;\n    }\n\n    foreach ($propertiesValue as $key => $property) {\n        if (in_array($property->getName(), $this->ignorableFields)) {\n            continue;\n        }\n        $property->setAccessible(true);\n\n        if ($property->getValue($this->value) != $property->getValue($argument)) {\n            return false;\n        }\n    }\n\n    return 10;\n}\n\n}\n```\nWith this new ExactIgnorableValueToken, I can reuse the logic of exact matching some fields, and ignoring that dynamic ones.\n. ",
    "weaverryan": "Indeed - previous releases seem to come 5-7 days after the RC1, which would be right now. That would be awesome (and well-planned!)\n. :+1: thanks :)\n. Thanks @ciaranmcnulty!\n. ",
    "jschreuder": "\nIs there a reason for using an anonymous class rather than a double, by the way?\n\nIt was a quick & dirty workaround. Those classes work with a Pimple container and assigning a Prophet object to them caused type errors if I remember correctly.\n. Awesome, thanks @sroze!\n. Ahh, sorry, I'm tired. Should post this to the Prophecy repo ofc.\n. ",
    "garethellis36": "I'm on Windows 7 and have just started a mini project to try out PHPSpec. I had the same issue which prompted this PR so I included dev-master in composer. phpspec run (after phpspec desc) results in the yellow \"class doesn't exist\" message, along with the prompt to create it. If I enter 'Y', the class is generated. However, the process seems to hang at the passthru() point (WindowsPassthruReRunner::reRunSuite() line 55). If I do CTRL-C out and phpspec run again, it still doesn't recognize that the class exists and I'm just stuck in a loop.\n. @ciaranmcnulty Yes you're right there. My composer.json wasn't set-up right - thanks!\n. I had a look at the method generator code but to be honest it's a little above my head :-) I wondered if it's something to do with line break characters.\n. I wondered whether it was something to do with Git - I believe I have mine defaulting to CRLF due to legacy stuff. Nice one :+1: \n. ",
    "Luciam91": "shouldBeAnInstanceOf is what you're looking for :)\n. ",
    "agarhy": "yeah.. and config in phpspec.yml are workin when create test file \"phpspec descr controllers/Movies\"\nbut.. phpspec is not able to load the CI controller or fetch the controller file location. that why it keeps asking to create the controller class on every \"php run\"\n. ",
    "l-bujakowski": "Thank You, for Your response, @ciaranmcnulty.\nI have read the docs, of course.\nI came up with following config (I should have probably include it initialy in issue description):\nsuites:\n    default:\n        namespace: App\n        psr4_prefix: App\n        spec_prefix: Spec\n        spec_path: tests\nIt seems to work, and results in expected file structure.\nI am however bothered with generated specs namespace: Spec\\App\\Foo.\nBut since You say, that specs don't need autoloading I guess there is no issue at all (and this can be closed).\n. ",
    "kuczek": "Is related to #858\n. Done.\n. It's more issue with cached data, composer folder should be cleared.\n. ",
    "Podbi": "Hi, any updates about this pull request? Running a specific suite by --suite option could be handy. :+1: . ",
    "afurculita": "@ciaranmcnulty yep, you're right here. I just wanted to avoid checks for php versions in code. But don't really see how this could mess with the code we're testing.\nI will replace the polyfill with checks for version 7 of php.\n. @ciaranmcnulty any news on this PR?\n. @ciaranmcnulty the tests are failing due to problems not related to this PR, it seems\n. The coding styles issues are caused by the Throwable interface, that doesn't exist on versions lower than 7\n. @ciaranmcnulty I've made all the changes\n. The other properties don't have an empty line between them, so just for consistency I removed this one\n. Yep, you're right\n. Yep\n. ",
    "subotajg": "@jakzal nope, OS X Yosemite 10.10.3\n. ",
    "Addvilz": "So perhaps it should be for 3.0 milestone then?\n. Okay!\n. ",
    "christickner": "thanks for clarifying @jakzal \n. ",
    "Aeolun": "@ciaranmcnulty @shanethehat I have this same issue with our suite, and regardless of whether I apply the change in the pull request, I still have the suite failing. It unfortunately fails at the same point too.\nAllowed memory size of 134217728 bytes exhausted (tried to allocate 72 bytes)\n. ",
    "gui-don": "Same problem here. It seems unrelated to the formatter for me. Each test (ExampleRunner::executeExample) adds between 50ko and 300ko to the total memory usage.\n. ",
    "naomigo": "I am also running into the memory issue, with approx 400 tests in 32 spec files:\nAllowed memory size of 134217728 bytes exhausted (tried to allocate 32 bytes)\nI have one spec class that has approx 70 tests in it which takes 19 seconds to run through (a lot longer than any of the other specs). Wondering if it's because I could be mocking too many objects?\n[I am using the pretty formatter]\n. Some further information on my spec class that is taking 20s to run - I suspect the let() method might be doing too much?\n``` php\n<?php\nnamespace spec\\Application\\Model;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass MyClassSpec extends ObjectBehavior\n{\n    private $diMock;\nprivate $class1Mock;\nprivate $class2Mock;    \nprivate $class3Mock;\nprivate $class4Mock;\nprivate $class5Mock;    \nprivate $class6Mock;\nprivate $class7Mock;\nprivate $class8Mock;    \nprivate $class9Mock;    \nprivate $class10Mock;\nprivate $class11Mock;   \nprivate $class12Mock;\nprivate $class13Mock;       \nprivate $class14Mock;\nprivate $class15Mock;\nprivate $class16Mock;\n\nprivate $value1Mock;\nprivate $value2Mock;\nprivate $value3Mock;\nprivate $value4Mock;\nprivate $value5Mock;\nprivate $value6Mock;\nprivate $value7Mock;\n\nfunction it_is_initializable()\n{\n    $this->shouldHaveType('Application\\Model\\MyClass');\n}\n\nfunction let(\\DI\\Container $di, \\Path\\To\\Class1 $class1, \\Path\\To\\Class2 $class2,\n        \\Path\\To\\Class3 $class3,\n        \\Path\\To\\Class4 $class4,\n        \\Path\\To\\Class5 $class5,\n        \\Path\\To\\Class6 $class6,\n        \\Path\\To\\Class7 $class7,\n        \\Path\\To\\Class8 $class8,\n        \\Path\\To\\Class9 $class9,\n        \\Path\\To\\Class10 $class10,\n        \\Path\\To\\Class11 $class11,\n        \\Path\\To\\Class12 $class12,\n        \\Path\\To\\Class13 $class13,\n        \\Path\\To\\Class14 $class14,\n        \\Path\\To\\Class15 $class15,\n        \\Path\\To\\Class16 $class16)\n{\n    $this->diMock = $di;\n\n    $this->diMock->get('class1')->shouldBeCalled()->willReturn($class1);\n    $this->class1Mock = $class1;        \n    $this->class2Mock = $class2;\n\n    $this->diMock->get('class3')->willReturn($class3);\n    $this->class3Mock = $class3;        \n    $this->diMock->get('class4')->willReturn($class4);\n    $this->class4Mock = $class4;        \n    $this->diMock->get('class5')->willReturn($class5);\n    $this->class5Mock = $class5;\n\n    $this->diMock->get('class6')->shouldBeCalled()->willReturn($class6);\n    $this->class6Mock = $class6;\n    $this->diMock->get('class7')->shouldBeCalled()->willReturn($class7);\n    $this->class7Mock = $class7;\n    $this->diMock->get('class8')->shouldBeCalled()->willReturn($class8);\n    $this->class8Mock = $class8;         \n    $this->diMock->get('class9')->shouldBeCalled()->willReturn($class9);\n    $this->class9Mock = $class9;\n\n    $this->diMock->get('class10')->willReturn($class10);\n    $this->class10Mock = $class10;      \n    $this->diMock->get('class11')->willReturn($class11);\n    $this->class11Mock = $class11;\n\n    $this->diMock->get('class12')->shouldBeCalled()->willReturn($class12);\n    $this->class12Mock = $class12;\n    $this->diMock->get('class13')->shouldBeCalled()->willReturn($class13);\n    $this->class13Mock = $class13;\n\n    $this->diMock->get('class14')->willReturn($class14);\n    $this->class14Mock = $class14;      \n    $this->diMock->get('class15')->willReturn($class15);\n    $this->class15Mock = $class15;\n    $this->diMock->get('class16')->willReturn($class16);\n    $this->class16Mock = $class16;\n\n    $this->diMock->get('value1')->willReturn('Value 1');\n    $this->value1Mock = 'Value 1';      \n    $this->diMock->get('value2')->willReturn('Value 2');\n    $this->value2Mock = 'Value 2';      \n    $this->diMock->get('value3')->willReturn('Value 3');\n    $this->value3Mock = 'Value 3';\n    $this->diMock->get('value4')->willReturn('Value 4');\n    $this->value4Mock = 'Value 4';\n    $this->diMock->get('value5')->willReturn('Value 5');\n    $this->value5Mock = 'Value 5';\n    $this->diMock->get('value6')->willReturn('Value 6');\n    $this->value6Mock = 'Value 6';\n    $this->diMock->get('value7')->willReturn('Value 7');\n    $this->value7Mock = 'Value 7';\n\n    $this->beConstructedWith($this->diMock);\n}\n\n}\n```\n. Thanks for the replies.\nI guess some of the reason \"why\" I'm doing things is how I've learnt/been taught them. My understanding is that I'm storing mocks as properties because I can then use the property within the tests, e.g.\n```\nfunction it_should_do_something()\n{\n    $this->class1Mock->getData()->shouldBeCalled()->willReturn(array());\n}\nfunction it_should_do_something_else()\n{\n    $this->class1Mock->getData()->shouldBeCalled()->willReturn(array(1,2,3));\n}\n```\nInstead of the above, should I be doing something like:\nfunction it_should_do_someting(\\Path\\To\\Class1 $class1)\n{\n    $this->diMock->get('class1')->shouldBeCalled()->willReturn($class1);\n    $class1->getData()->shouldBeCalled()->willReturn(array());\n}\nPerhaps I'm missing some fundamental understanding somewhere on how to mock objects?\nI've had concerns about this particular class for some time, in that it needs a lot of collaborators. I think part of the reason for this is that it's functionality is similar to that of a controller class (handling the flow of a registration process) and I have read previously that sometimes it is not possible (or becomes very difficult) to spec controller classes...\n. Thanks for the additional comments.\nJust to confirm my general phpspec understanding - are you saying that storing mocks as properties should never be done?\n(I have done this successfully in specs that only need a couple of collaborators for example)\n. Further to your advice above, through getting rid of the mocked object properties and only calling the mocks when I need them in the tests I have now managed to reduce the run time of the spec from 20s to 10s.\nHave learnt a bit along the way too so will hopefully be able to write more efficient spec files in future!\n. ",
    "MedAhamada": "thanks !\n. Thanks ! Keep up the good work.\n. ",
    "sebastianbergmann": "IMO, there is no need to stub/mock value objects such as DateTimeImmutable. But that is besides the point here.\nThe point is that if you stub/mock DateTimeImmutable then you need to configure its methods. I understand that it may be unexpected that the DateTimeComparator calls a method on a DateTimeImmutable object. But this is required for making the comparison of DateTimeImmutable objects work as expected.. The order in which the default comparators are tried was wrong. This has been fixed in https://github.com/sebastianbergmann/comparator/commit/2da53a8494af23b965a3c2fbcf98087ea53360f1 and apparently solves the problem when test doubles created using PHPUnit's createMock() etc. are used.\nMaybe Prophecy needs its own custom comparator?. ",
    "stringerbell": "I can reproduce this in certain cases. I'm on centOS centos-release-6-7.el6.centos.12.3.x86_64 running PHP 7.0.4, and phpspec 2.5.\nInterestingly, I can't reproduce this if I'm running phpspec on OSX. I have to be in my VM, on centOS to do it. I'm able to reproduce this regardless of the formatter.\nhere's a minimal test case:\nFooSpec.php\n```\n<?php\nnamespace spec\\Foo;\nuse Foo\\CollaboratorObject;\nuse Foo\\Foo;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass FooSpec extends ObjectBehavior\n{\n    public function let(CollaboratorObject $collaboratorObject)\n    {\n        $this->beConstructedWith($collaboratorObject);\n    }\nfunction it_is_initializable()\n{\n    $this->shouldHaveType('Foo\\Foo');\n}\n\npublic function it_will_segfault(CollaboratorObject $collaboratorObject)\n{\n    $collaboratorObject->method()->shouldBeCalled()->willThrow(new \\Exception());\n    // passing in an argument here seems to be what makes it segfault.\n    // it can be any type\n    $this->test([]);\n}\n\n}\n```\nFoo.php\n```\n<?php\nnamespace Foo;\nclass Foo\n{\n    /*\n     * @var CollaboratorObject\n     /\n    private $collaboratorObject;\npublic function __construct(CollaboratorObject $collaboratorObject)\n{\n    $this->collaboratorObject = $collaboratorObject;\n}\n\npublic function test()\n{\n    $this->collaboratorObject->method();\n}\n\n}\n```\nCollaboratorObject.php\n```\n<?php\nnamespace Foo;\nclass CollaboratorObject\n{\n    public function method()\n    {\n}\n\n}\n``\n. @nick-jones Thank you! So helpful.\n. I can no longer reproduce this in PHP 7.0.7\n. Ack. I spoke too soon. I wasn't able to reproduce when building from src for whatever reason, but I just updated to the official PHP 7.0.7 via yum, and was able to reproduce. Sorry for the confusion. I think this should be re-opened.\n. Further, if I run my entire test suite, no segfault. If I run only the example from above, I get one consistently.\n. I uninstalled all of the things, and reinstalled all of the things, and can now confirm this issue is no longer reproducible inPHP >=7.0.6`.\n. This turned out to be an xdebug issue. I've filed a bug report over there. https://bugs.xdebug.org/view.php?id=1313\n. ",
    "unexge": "@ciaranmcnulty AFAIK, ~1.5 -> >=1.5 <1.6, ^1.5 -> >=1.5.0 <2.0.0, it also recommended by composer.\n. ",
    "Harrisonbro": "OK, that makes sense. Thanks for the speedy reply.\nDoes this mean that I can't set mocked behaviour on the Foo objects? I'll want to be able to do things like the example below, so does unwrapping the object given to me by return an actual instance of Foo or simply the double which will pass the instanceof guard?\nAlso, to check my own understanding, is it the case that the object given to me by adding a typehinted parameter to the spec method is a double wrapped in a collaborator, and that sometimes those doubles are unwrapped by phpspec before methods are called on them but I triggered a case where I added another collaborator (my Collection) which meant phpspec couldn't unwrap the Foo collaborators wrapped in my Collection collaborator?\n```\nfunction it_counts_the_number_of_complete_foo_objects(Foo $foo1, Foo $foo2)\n{\n    $foo1->isComplete()->willReturn(true);\n    $foo2->isComplete()->willReturn(false);\n$this->beConstructedWith(new Collection([\n    $foo1->getWrappedObject(),\n    $foo2->getWrappedObject(),\n]));\n\n$this->countCompletedFoos()->shouldBe(1);\n\n}\n```\n. Fantastic, I've got that working now. Thanks so much.\n. In case anyone else comes across this and wants to see the code I just used to test this out I've attached them here. You'll need to put them in the correct folders and sort out the namespaces.\nexample.zip\n. @ciaranmcnulty Out of interest, do you also know the answer to the second question I put in the code example? In the first code example, if I remove this test it_returns_false_by_default_as_bar() (so we're just left with let() and it_is_initializable() the example the spec passed even before I did the unwrapping fix, suggesting that it_is_initializable() doesn't actually instantiate the class under test (which also seems true since if I die and var_dump in MyClass::__construct I don't see anything). If that's true, why is that and what is it_is_initializable() actually supposed to test? \n. OK, that makes sense. Agreed that phpspec can't be in strict mode.\nI hadn't realised that it's the calling class that declares strict types, not the class being called (this is my first time using PHP7), so thanks for pointing that out.\nIn this case, then \u2014 where my class really does need to check that it's given a string as the argument and not an integer \u2014 would you suggest that I should remove the string $foo typehint and just check manually in MyClass::myFactoryMethod that $foo is a string (eg. just by using is_string)? \nAlso, what does the community consider best practice around using scalar type hints? Do you just use declare(strict_types=1); everywhere, or ignore them completely, or something in the middle? It seems like they're somewhat dangerous since a class doesn't (and shouldn't) necessarily know where it will be called from, and if it typehints against a string it might inadvertently cast something to a string that it should really have thrown a TypeError or InvalidArgumentException for.\n. Yep, makes sense to me. Thanks for the advice.\n. Afraid so, it didn't change the output at all.\u00a0\n. Yep, that makes sense.\u00a0\nIs that something that needs phpspec itself to be updated (ie. there's no configuration option or anything like that which can make it behave in the way you describe)?\nIf it does require an update, is there anything I can do to help with that?\n. Thanks, have done. See https://github.com/phpspec/phpspec/pull/915 and https://github.com/phpspec/phpspec/pull/916\n. Sure, will do. Will applying the change to 2.5 not mean it's not included in 3?\n. @ciaranmcnulty Could you point me to where I should look for existing tests song can write one for this new code? I did have a look at ThrowMatcherSpec but couldn't make much sense of it so a little guidance to get me started would be handy.\n. Hi @ciaranmcnulty Just a nudge re. my message above. I want to add tests for this but need a pointer to get started.\n. @ciaranmcnulty Last nudge on this. I've got time to add these tests if you point out how to get started, but am stuck at the moment. Do let me know if you can.\n. Hey @ciaranmcnulty  \u2014 OK, finally got my head around it and have added a test. Happy to change/extend it if you have any thoughts. It's late in the day so this is my first draft having only just got it working. Let me know what you think.\nPs. in case anyone else is reading this thread (and for my own future reference) to run phpspec's own tests you need to run ./bin/phpspec run from the project root.\n. Thanks. Do you have a timeline for when this PR will be in a stable release (ie. one that composer will install for me)?\nAlso, for a few other points we discussed but didn't action and/or other things I might suggest are you happy for me to open a PR for those, even if we just discuss and then reject them, or is there a better way to have discussions around proposed changes?\n. Thanks @stof. I've now removed it (https://github.com/phpspec/phpspec/pull/915/commits/d4485909b120ce3bcde383e3c4c6ef09d13816d1)\n. Done :) https://github.com/phpspec/phpspec/issues/978\n. Not in the technical sense, in that it isn't necessarily an Exception, but I'd guess most people would consider \"exception\" to mean that. What's the alternative \u2014 $errorOrException?!\n. OK, I've removed.\n. You mean because the 4th param of sprintf might not be used if $exceptionThrown is not an instance of \\Error?\nI guess the alternative would be to build the message for FailureException within the conditionals and just pass it in (shown below). That does end up with a fair bit of duplication. \n``` php\n// Option 1: move sprinf() inside conditional\nif (!$exceptionThrown instanceof $exception) {\n    $failure_message = sprintf(\n        'Expected exception of class %s, but got %s.',\n        $format,\n        $this->presenter->presentValue($exception),\n        $this->presenter->presentValue($exceptionThrown)\n    );\nif ($exceptionThrown instanceof \\Error) {\n    $failure_message = sprintf(\n        'Expected exception of class %s, but got %s with the message: \"%s\"',\n        $format,\n        $this->presenter->presentValue($exception),\n        $this->presenter->presentValue($exceptionThrown),\n        $exceptionThrown->getMessage()\n    );\n}\n\nthrow new FailureException($failure_message);\n\n}\n```\nAn alternative might be to just decided that the error message is always useful (since it's only shown when a test fails and it's prudent to show the developer more information if we can, not less)? That would be as shown below:\n``` php\n// Option 2: have a single sprinf() and remove conditional, always showing the error/exception message\nif (!$exceptionThrown instanceof $exception) {\n    $format = 'Expected exception of class %s, but got %s with the message: \"%s\".';\nthrow new FailureException(\n    sprintf(\n        $format,\n        $this->presenter->presentValue($exception),\n        $this->presenter->presentValue($exceptionThrown),\n        $exceptionThrown->getMessage()\n    )\n);\n\n}\n```\n. ",
    "kix": "Hm, perhaps this has been solved in master, and I'm using @stable. However, even in master it looks to me like code generation is always disabled when --no-interaction is on: https://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Console/ConsoleIO.php#L104\n. @stof, well, yes, this is a BC break, but what are the options? What if I want to save time during local development? I have a continuous runner in the background, and every time I save a spec that references non-existent methods, these methods are automatically generated. Could be a nice timesaver. \nThe only other option I see here is that we could add a separate flag to enable code generation explicitly, so that --no-interaction does not turn code generation off when the flag is passed.\n. @pamil, hm, yes, this could work as well.\n. @jakzal, agree. Updated the PR removing all whitespace before :.. @ciaranmcnulty, CS fixed, also bumped Prophecy to 1.7. @jakzal, this one is against 5.0, I can rebase and reopen against master if necessary. Ouch, missed this one :(. ",
    "grunch": "I think it would be great to print a message like \"the example 'it is ... ...' has passed\" when you ask for more verbosity\n. ",
    "theshaunwalker": "That doesnt solve it in this instance.\nI keep them as properties on the spec file purely out of writing convenience.\n. This turned out to be a case of multiple identical calls to a collaborator method clashing.\nDescribed in this issue https://github.com/phpspec/prophecy/issues/213\n. ",
    "deeky666": "This sounds like a good idea because that can also support custom matchers then I suppose.\n. Hmmm thinking about it again this approach still does not work for PhpStorm as it requires the stub methods in the code. Having a phpspec specific annotation doesn't give us the ability to have PhpStorm recognize the magic methods. We do require @method. Please see also this ticket.\n. @ciaranmcnulty yep, I could also live without having the method tags at all in the code and include those in my own code but then we should remove the others, otherwise the topic will likely come up over and over again and it's hard to argue against adding more then... Think about it and tell me your decision, I will update the PR eventually then :)\n. @ciaranmcnulty @stof okay redid the PR according to the discussion.\n. @ciaranmcnulty thank you for merging!\n. Yeah this was coming to my mind, too and is also the only solution I have to this problem. But I was not sure if that is really the right thing to do. If that is a solution I can totally live with it =) In more complex scenarios where Foo is composed out of many different collaborators it might get messy though...\n. Hmmm okay thanks for showing the different options. I will evaluate those and choose one :)\n. @ciaranmcnulty right so. Can you give me a hint then where to add the magic methods for method/property expectations? Because basically all of those calls are delegated to Subject and from there to Matcher objects no matter if it is an expectation on the described class, one of its methods or properties (if I understand the voodoo correctly).\n. I see two options how this could work:\na) Through @method tags for methods of the described class in the particular specification\n``` php\nclass Foo\n{\n    public function bar()\n    {\n        return 'foobar';\n    }\n}\n/*\n * @method \\PhpSpec\\Wrapper\\Subject bar()\n /\nclass FooSpec extends ObjectBehaviour\n{\n    function it_should_bar()\n    {\n        $this->bar()->shouldBe('foobar');\n    }\n}\n```\nb) Through an IDE plugin that already knows the method delegations of the described class and knows that those methods return Subject (I already have such a plugin for PhpStorm that supports this). So if we had the matcher magic methods in the Subject class then, autocompletion could work for most cases. Get what I mean?\n. Case a) would autocomplete if we had shouldBe() as @method tag in Subject or am I missing something here? Also case b) would also need shouldBe() as @method tag in Subject.\n. Sure I know that but that's exactly the whole point of having @method annotations for magic calls through __call()...\n. That is also true. It won't work for custom matchers and it won't work for matchers that depend on method names of the described class. What I wanted to achieve with this PR is to at least add those that are officially bundled anyways (and will most probably be the most used). But if you do not like this idea then feel free to close this PR :) I can totally understand your standpoint... But currently the only possible way to get some autocompletion with a PhpStorm plugin is to have those magic method annotation in the Subject class, because currently we cannot \"add\" those dynamically.\n. @stof agreed on that already. That was indeed a mistake of mine. But I would still like to wait for further opinions about having the other magic methods in Subject making expectations on SUT methods/properties. IMO it does not make sense having some in ObjectBehaviour but none in Subject (this seems weird). So as I stated before it should be all or nothing. The argument to say matchers are added at runtime and therefore should not be hard-coded / annotated also applies to ObjectBehaviour then...\n. @stof I am aware of that and those magic methods on Subject are intended to help building IDE support via a plugin. As I told before already, I already have a WIP plugin for PhpStorm which collects the SUT methods and makes them available via $this. Those methods then are typed to return Subject. The current problem is that we are stuck at this place because we do not have the available matcher methods as those are not present in the parse tree (missing @method annotations). And there currently is no way to add stub elements dynamically without having them somewhere in the code. Therefore it is mandatory to have those. Also I am not sure how it would be possible to \"support matchers properly rather than relying on @method\" as we do not know the matcher method names, arguments and return types. How would you infer that dynamically?\n. ",
    "moufmouf": "Hey @Sam-Burns ,\nI just reviewed your PR. I'm really not used to PhpSpec internals, but here is what I can say from a \"container-interop\" point-of-view.\nThe way you implemented your PhpSpecExtension extension (a load method that passes the composite container in parameter and that optionally returns an additional container) completely matches with the way I intended the \"delegate lookup feature\" to work when we designed it. I think Zend Expressive is doing something very similar too.\nThis approach will definitely work, but it has some drawbacks, that your current documentation is clearly highlighting.\nFor instance here: https://github.com/Sam-Burns/phpspec/blob/08b7f8fe0c9a65baa30a71a8e381dbf4422cab7d/docs/manual/writing-extensions.rst#adding-an-event-listener\nphp\n    public function load(ContainerInterface $compositeContainer)\n    {\n        $eventDispatcher = $compositeContainer->get('event_dispatcher');\n        $eventDispatcher->addSubscriber(new MyEventSubscriber());\n    }\nIn order to subscribe to an event in the event dispatcher, you have to resolve the event_dispatcher instance. This is a shame because you will always resolve the event_dispatcher instance, even if it is not used in your code. So there is a minor performance penalty here.\nThat being said, there are no easy workaround apart from standardizing service providers. We are working on that, but there is definitely some work left to be done.\nMeanwhile, This PR for PhpSpec extensions is working and solves your problem in a container-agnostic way so :+1:\n. Hey @stof ,\n\n@moufmouf the issue is bigger than the performance penalty, because it forces to instantiate all listeners and all their object graph, which means that a later extension would then be unable to overwrite any of these object (or rather, it will overwrite the service only for half of the PhpSpec object graph, leaving things in a broken state).\n\nMmmm.... ok, I understand what you mean. Here are my thoughts:\nIf the extension mechanism is adding containers provided by extensions at the beginning of the containers stack, then we indeed have a problem. An extension could provide a service that has already been resolved by a previous extension, which will leave things in a broken state.\nHowever, if the extension mechanism is adding containers provided by extensions at the end of the containers stack, then an extension is unable to override an existing service (because the composite container will always resolve the former service first). In this case, extensions loose the ability to override services (I don't know if this is important for PhpSpec), but we also solve our problem.\n\nand I totally agree with you that service providers are a better solution (I think you already know this based on our past discussions).\n\n:+1:\nAlso, on a side note, @stof, I'd be glad if you could have a look at this issue on container-interop/service-provider. I'd like to add the container as an argument to getServices() method, but I fear this could create the same kind of problems we have here. I'd be interested into knowing what you think about it.\n. ",
    "mnapoli": "\nIn this case, extensions loose the ability to override services (I don't know if this is important for PhpSpec), but we also solve our problem.\n\nWhat if a PhpSpec extension could do 2 separate things:\n- register services\n- extend services\nThose could be executed at different times, allowing the first one to work and the second one to execute when all entries are already defined? (starts to look like service providers ;))\n. So what about:\n``` php\nclass Extension implements PhpSpecExtension\n{\n    public function registerEntries(ContainerInterface $compositeContainer)\n    {\n        $container = new Container();\n        $container->set('process.shutdown', function (ContainerInterface $container) {\n            return new MyBetterShutdownImplementation();\n        });\n        $container->setDelegateContainer($compositeContainer);\n        return $container;\n    }\n// Only called after all `registerEntries()` methods are called (i.e. container is created)\npublic function extendEntries(ContainerInterface $compositeContainer)\n{\n    $eventDispatcher = $compositeContainer->get('event_dispatcher');\n    $eventDispatcher->addSubscriber(new MyEventSubscriber());\n}\n\n}\n```\nBut yes that would instantiate those extended entries no matter what, I don't know phpspec enough to know if it's a blocker or not.\n. Hi, just regarding this:\n\nIt looks like PSR-11 may have some BC breaks from container-interop\n\nIt shouldn't (well except the namespace), maybe you have something specific in mind?\n. Right though I would argue the containerexception wouldn't break anything for anybody since my point was exactly that it wasn't used ;)\nAnyway sorry for hijacking\n. ",
    "nomysz": "Ignore that comment - example in post below\n. Im sory for quality of that answer. I responded to email and forgot about markdown.\nI dont think its about CI configuration. I can easily replicate issue on my workstation console. Just run spec and then run in console command:\necho $?\nIt will return last runned application exit code and in this case it is 0 but I got stacktrace on screen mixed with phpspec output.\nI think to resolve this issue spec has to catch parse error and return code 1 in this case. Correct me if I'm wrong. Do you need more info to debug?\nTry this:\n```\n<?php\nnamespace spec\\TestNamespace;\nuse PhpSpec\\Silex\\SilexObjectBehavior;\nuse Prophecy\\Argument;\nuse Silex\\Application;\nclass TestClassSpec extends SilexObjectBehavior\n{\n    function it_is_doing_something()\n    {\n        $this->test(new \\DateTime)->shouldReturn('ok');\n    }\n}\n```\nwith\n```\n<?php\nnamespace TestNamespace;\nclass TestClass\n{\n    public function test(\\DateTime $dateTime)\n    {\n        return 'ok';\n    }\n}\n```\nand it pass ok\n```\ndocker exec -it testcontainer_1 bin/phpspec run\n  TestNamespace\\TestClass\n\n11  \u2714 is doing something\n1 specs\n1 examples (1 passed)\n5ms\n```\nbut then change spec into:\n```\n<?php\nnamespace spec\\TestNamespace;\nuse PhpSpec\\Silex\\SilexObjectBehavior;\nuse Prophecy\\Argument;\nuse Silex\\Application;\nclass TestClassSpec extends SilexObjectBehavior\n{\n    function it_is_doing_something()\n    {\n        $this->test('invalid')->shouldReturn('ok');\n    }\n}\n```\nand it should return exit code different than 0 (which is OK) but you get stacktrace on screen and code 0 as correct execution of script.\n```\n      TestNamespace\\TestClass\nhtml\n\n\n\n\n",
    "harikt": "cool. Thank you.\nSorry for the trouble. Have been looking for some time why it was always throwing an exception :D .\n. ",
    "texdc": "Duh, typo.  I swapped my arguments.  Please move along.  Nothing to see here!  :)\n. ",
    "brollypop": "Oh I see now, `i somehow missed the wrapped-objects part of the cook book. Thanks :) \n. ",
    "dimitri-koenig": "Weird... It contains 2 commits but Github doesn't show any file changes. Still wanna try to merge?\n. ",
    "roukmoute": "Thanks :)\n. What is your error?\nCould you give your example?\nIf you use psr-4, have you set it?\n. This is not a tutorial but only examples for differents situations.\nThis is why it is important to give us a concrete example of what you doing, is it on github?\nHave you previous tests it work?\n. Why would you like to rename the file?\nThis is not only a renaming file.\nYou must redefine images and links.\nFor example:\nBefore:\n.. image:: https://travis-ci.org/phpspec/phpspec.svg?branch=master\n   :target: https://travis-ci.org/phpspec/phpspec\n   :alt: Master Travis Build Status\nAfter:\n[![Master Travis Build Status](https://travis-ci.org/phpspec/phpspec.svg?branch=master)](https://travis-ci.org/phpspec/phpspec)\n. This is my complete test:\nSpec:\n```php\npublic function it_returns_serialized_data()\n{\n    $serializedData = serialize([null, '']);\n$this->action()->willReturn('');\n\n$this->serialize()->shouldBe($serializedData);\n\n}\n```\nClass:\n```php\npublic function serialize()\n{\n    return serialize(\n        [\n            $this->orderId(),\n            $this->action(),\n        ]\n    );\n}\npublic function action(): string\n{\n    return $this->action;\n}\n```. Thanks for your responses @stof and @avant1 :smiley: \nI have completely forgotten I can't do what I do and thanks to remind me this :+1: . ```\n\u25b6 composer info | grep doctrine/instantiator\ndoctrine/instantiator                 1.0.5   A small, lightweight utility ...\n```. Is there an interest in continuing to create it?\nWith phpunit this can be understood so that there are no conflicts, but with phpspec, is it the same things?\nPersonally I don't have this problem.. Because it is deprecated and everybody must use psr-4 now.. Police! Put your Hands Up!\nMore serisouly, I think all new project is defined in PSR-4.\nAnd the beginner can be destabilized.. No P.R. ccurrently @greg0ire.\nAnd you have already do this, so what can I do?\nIs there any code to update, is it not only documentation?. Is it possible to add a final class ?\n. uniqid($namespace) ?. Why prefer an array instead of immutable object?. ",
    "lchrusciel": "Why did you close this issue? Did you fix it? You can share what happen with us, so others would know what to do in the same situation :) \n. ",
    "senkal": "@ciaranmcnulty Ah yes, you are right.\nSilly mistake, sorry for that.\nClosing.\n. ",
    "spyl94": "Thanks!\n. ",
    "randompixel": "Hi Ciaran,\nI've updated the PR based on your suggestions. The regex seemed like the most sensible place to put the change (although what a regex!). I also added a spec to cover the use-case.\nI've tested on my Mac with a number of combinations of namespaces and line-breaks. Is this worth testing on a Windows machine too?\n\nDave\n. After rebase and a bit more investigation it seems\n\nwas being blocked successfully but\n\nwas being let through. This updated regexp I hope should fix that issue.\n\n. Thanks for the mentoring too \ud83d\ude42\n. OK. Happy to rework.\n. Yup. I went with \\z and updated the spec to better capture that.\n. Updated as requested :)\n. ",
    "jameshalsall": "We could possibly get around this by using reflection to ensure that the subject implements all of the methods in the interface(s) and, if not, then offer to generate those stubs. If this sounds like something you want to pursue then I don't mind having a run at it, just let me know.\n. Yeah you're right, it's obviously just going to try and autoload the class by name using reflection. So the only other way would be manually parsing the content of the class file, which would be horrendous.\nhttps://3v4l.org/8bLtI\n. That looks promising, I will take a look at that.\nCurrently if I have an interface Foo, and a class Bar that does not yet implement that interface, and my spec looks like this...\n```\n<?php\nnamespace spec;\nuse Bar;\nuse Foo;\nuse PhpSpec\\ObjectBehavior;\nclass BarSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType(Bar::class);\n    }\nfunction it_is_a_foo()\n{\n    $this->shouldHaveType(Foo::class);\n}\n\n}\n```\nThen I would expect PhpSpec to offer to update Bar for me so that it implements Foo. This workflow would remove the likelihood of encountering the issue in the first place. Currently the output would be\nBar\n  17  - it has type\n      expected an instance of Foo, but got [obj:Bar].\n. I see what you're saying, but this would be the case where an interface already existed, something like:\n1. Abstract type Foo already exists\n2. We create a new concrete type called Bar\n3. PhpSpec generates Bar for us\n4. We update our BarSpec so that it says it should be a Foo type\n5. PhpSpec then adds the extends or implements based on whether Foo is an abstract class or an interface, and any method stubs.\nBetween step 4 and 5 there is no state where the code would execute, so you would have to create empty method stubs in this example.\n. I've written a basic implementation of this, it's not all encompassing and there are edge cases I need to write specs for, but there is enough there to get some feedback on.\nExample, code before:\n``` php\n<?php\nnamespace PhpSpec;\nfinal class Person\n{\n}\n```\nThe spec:\n``` php\n<?php\nnamespace spec\\PhpSpec;\nuse PhpSpec\\Person;\nuse PhpSpec\\ObjectBehavior;\nuse PhpSpec\\SaysHello;\nclass PersonSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType(Person::class);\n    }\nfunction it_has_type()\n{\n    $this->shouldHaveType(SaysHello::class);\n}\n\n}\n```\nThe interface SaysHello:\n``` php\n<?php\nnamespace PhpSpec;\ninterface SaysHello\n{\n    public function saysHello();\n}\n```\nThe prompt after running the suite:\n\nAnd the code after...\n``` php\n<?php\nnamespace PhpSpec;\nfinal class Person implements SaysHello\n{\n    public function saysHello()\n    {\n        // TODO: write logic here\n    }\n}\n```\nInterested to here your thoughts @ciaranmcnulty \n. Yeah absolutely, this is just the happy path at the moment. I'll now start adding tests for all of the edge cases.\nFor the ImplementsGeneratorSpec I followed the MethodGeneratorSpec which uses a mock Filesystem object. I'll leave this as is but also add in integrations tests.\n. I agree with Ciaran, but I am in the process of writing scenarios for all of those Stof mentioned to cover any situations where people are using inheritance (and it's not always avoidable, eg. with Exceptions).\n. I think most of those scenarios will already work anyway, but I'll bear that in mind.\u00a0\n. I've added more scenarios now that cover the following:\n- generating methods from an interface in both an empty and a non-empty class, where the class and interface are in the same namespace\n- generating methods from an interface in an empty class, where the class and interface are from different namespaces\n- generating methods from an interface in a class that has a parent class\n- generating methods from an interface in a class that already implements another interface\n- specifying an abstract class for a concrete class (no code generation should take place and the suite should fail)\n- specifying an interface for a class that has a parent class already implementing that interface (no code generation should take place)\nI've removed the aim of adding abstract class support in this PR as there is a lot more involved than adding interface method generation.\n. @ciaranmcnulty be good to get some more feedback on this - the failure in Travis is on PHP 7.1 and doesn't look related to this, unable to replicate it locally on the same PHP version.\n. Wow, I can't believe I missed type hinted arguments in my scenarios. I'll get working on that.\n. @ciaranmcnulty - I think it would make sense for me to open another PR to bring your work from https://github.com/ciaranmcnulty/phpspec-typehintedmethods/blob/master/src/Generator/TypeHintedMethodGenerator.php into phpspec core.\nIf you're happy with that then I'll open the PR and commit with you as the author to maintain attribution.. Ok, I'll open a separate PR to bring the typehinting into core because this PR is blocked now - maybe as a future consideration we can look at @gnugat's extension. This will mean adding a new generator specifically for interface method generation, or modifying the current one which I'm less inclined to do.. I have added scenarios to cover type hinted arguments which is why the build is failing. I will pick this up again, it's been updated with latest from master.. I've added basic support for type hinted argument support, to do so I've added a new optional key in the MethodGenerator's $data argument, reflection_parameters. This is currently populated by the InvalidTypeListener::promptUserToImplementMethods() method with an instance of \\ReflectionParameters (we can always guarantee that the interface is \"reflectable\" unless it doesn't exist).\nWe can improve the MethodGenerator, but I think that is part of a wider piece of work to add true type hinted method support everywhere (I can work on this following this PR's completion).\nAlso for now I haven't added code to manipulate the use statements because of the work involved, this PR is already quite big. However it will shorten the type hint to just the class short name if the type hinted class shares the same namespace as the class we are updating.\nLet me know if there are any edge cases you think I've missed outside of what is in the feature file.. There are some things still left to finish. \nMy MacBook has died so I\u2019m unable to work on this right now, although I\u2019ll be trying to repair it tonight. If it works then I\u2019ll finish this PR. \nSent from my iPhone\n\nOn 15 Oct 2017, at 07:42, Ciaran McNulty notifications@github.com wrote:\n@jameshalsall are you able to fix the test failure?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I'm working on the argument modelling currently so that we don't have to rely on the check for the reflection_parameters key in MethodGenerator. I've updated this now so that there is an Argument value object, that can be created from ReflectionParam instances. The InvalidTypeListener now sets an array of Argument instances in the argument key, just like the MethodNotFoundListener  does, except the latter generates numbered arguments from call time values (see https://github.com/phpspec/phpspec/pull/1000/files#diff-8637c505497ce19a95ac11e456ada6b0R106). This has allowed me to clean up the implementation of MethodGenerator slightly by having the method argument string generation done entirely by PhpSpec\\CodeGenerator\\Generator\\Argument\\StringConverter and should make it easier down the line to add true type hinted method support / nullable types support.. I'm not sure about stubbing interface methods just for their return type given that PHP's return types will do this for us anyway. \n\nI think having examples for each method in the interface offers little to no value.. This is still on my list :) . Yeah I just haven\u2019t had the time to get back on it, but something that could easily be finished if someone else is keen. \nSent from my iPhone\n\nOn 28 Sep 2018, at 11:25, Ciaran McNulty notifications@github.com wrote:\nI'm inclined to close this just due to inactivity, although the work so far is good!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @ciaranmcnulty can this be merged?\n. That RFC is for 7.2 - not 7.1.\n. The above doesn't make sense, you aren't telling PhpSpec that Markdown should be constructed with an argument, but your Markdown class expects 1 argument in the constructor.\n\nAlso, I don't think using let() is the correct place to do that, you should have an example in your spec specifically for verifying that the exception is thrown.\n. Removed.\n. I've split that up now.\n. That works... some satanic black magic.\n. I will add a final class in one of the scenarios :) \n. The interface method wouldn't be type-hinting for a non-existent class or interface at the stage we're speccing the implementor, so we should check it exists which means we can also use reflection to get its argument list. I'm not happy with it either - I mentioned in a comment further up that it needs a refactor as part of bringing in type hints for all method generation. I have tried to keep all of type hinted method signature generator out of this class and in PhpSpec\\CodeGenerator\\Generator\\Argument\\StringBuilder, so it can be re-used easily after refactoring.\nIt's not as straightforward as just adding a new argument_types key, as we would need to map nullable and default values along with the types - also I've tried to avoid the $argument1, $argument2 ... style of naming with this generation as we know the interface method argument names.. I've called it argumentBuilder to reflect it's a builder for arguments, (PhpSpec\\CodeGenerator\\Generator\\Argument\\StringBuilder makes more sense when you read the FQCN) - I'll change the builder suffix.. I usually use switch for > 2 cases, just personal preference - I will change it to an if/else and extract it. writing the docs I found an issue with the method stub generation, it doesn't add the return type hint on method stubs if the interface has them, leaving out the return type hint doesn't break anything but it is still incomplete - I can add this to the PR or do it later after it's merged, up to you @ciaranmcnulty . ",
    "ioleo": "I was running via PhpStorm's terminal, no information about timeout. It simply returned the console control to me (just like I expected after succesfull program execution).\n. ",
    "brainrepo": "Sorry, my english is not good.\nI dont like CloseFloatMatcher name but i choose that because shouldBeApproximately can be referred to strings. What you think about?. There is no problem for me :) ,\nI am working to implement your proposals. ",
    "klipach": "Is there any workaround for traits and type hinting when php7 is used, or still not?. So there is no way to group some common tests in abstract class or trait when using phpspec?. ",
    "tomasliubinas": "Any progress with this one?. ",
    "Harincka": "I'm sorry for that, my teacher ask me to change a project on github for trying to contribute in a project. I saw a lot of a project which had .md. I don't know why it will be better than .rst, that is just a proposition. \nSorry about the disagreement.\n. Yes sorry for that, i understood what is the different between .md and .rst. My teacher ask me to contribute in a project like changing the extension of readme, but I didn't think that I should modify the file.\n. ",
    "zlikavac32": "@ciaranmcnulty I haven't checked the source code in detail but could the ThrowMatcher be aware of Wrapper? Also, that callback could be a second argument and the first one could be exception FQN.\nThat way the ThrowMatcher would check the second (optional) argument and if it's callable it would wrap the exception and pass it to callable?. ",
    "emilniklas": "Thinking about this, I realize that even though the matcher would accept the argument, the catch (ClientException $exception) handler won't catch the mocked exception...\nCan anyone think of a way to do this?. @Sam-Burns I was hesitant to do so, because the real exception needed both a Request and Response object to even be constructed. I ended up doing it anyway:\nphp\n->willThrow(new ClientException(\n    '',\n    new Request('GET', 'some url'),\n    new class($statusCode) extends Response {\n        public function __construct($code)\n        {\n            $this->statusCode = $code;\n        }\n        public function getStatusCode()\n        {\n            return $this->statusCode;\n        }\n    }\n));\nReally ugly...\nSince I found my solution, I won't complain if someone closes this issue. However this may be worth thinking about, since exceptions are often made to contain relevant data, which may be part of the logic that should be tested.. ",
    "mattsches": "You mean like this: ^1.0||^2.0?. ",
    "tobiassjosten": "Hah\u2026 Sorry for wasting your time \u2013 that's entirely correct. With the inheritance actually in place it works as expected. Now to figure out why it doesn't, in my actual project.\nThanks!. ",
    "dgafka": "Thought that shouldBeLike is synonym of shouldReturn.\nAnyways, thanks this solves my problem :). ",
    "DavidGarciaCat": "Done - new issue reported and environment details added here https://github.com/phpspec/prophecy/issues/310. So... should I just ignore that output (at least, for now) due PHPSpec returns green status everywhere? \ud83d\ude15. ",
    "Mrkisha": "@jakzal\nThat is what I've ended up doing it. I'm stil leveling up my TDD&BDD skills.\nI've seen some open source projects (sylius) write phpspecs for their commands and you mentioned integration tests. I'm confused, which way shoul i go?. @jakzal \nI've hread this so many times Don't mock what you don't own. Does this mean when ever you have 3rd  party code in you method, you should only do integration tests?. ",
    "thisleenoble": "No, that's the part I've established IS possible. My example on the StackOverlow site that I've got working uses a namespace, but I don't want a namespace if I can avoid it at this stage. If I use the global namespace in my composer file and omit the namespace from the yml file I get the error described, but the PHPSpec documentation says that you're allowed to omit the namespace.. That was it! Thank you.\nI already had a null string as my composer file's psr-4 key but I didn't think to omit all the other parameters from the yml file entirely. Null strings didn't work.. ",
    "carlosV2": "I've been thinking on potential fixes to this problem but I'm starting to think that not all Generators are testable.\nAs an example, take a look at the following code:\n```\n<?php\nclass GeneratorTest\n{\n    public function getGenerator()\n    {\n        for ($i = 0; $i < 100000000; $i++) {\n            yield $i;\n        }\n    throw new RuntimeException('Reached the end of the generator');\n}\n\n}\n```\nIn order to trigger the exception, phpspec will need to traverse 100.000.000 items which is impracticable in real time.. ### Changes made:\n1/ Combined both behat steps into a single one\n2/ Add a behat step to make sure that no extra questions are made\n3/ Create another decorator for confirming before generating code\n4/ Remove functionality out of the NamedConstructorNotFoundListener\nWhy the ConfirmingGenerator?\nIdeally I wanted it to be called the PromptingGenerator but it already exists (as an abstract class). Instead of reusing the PromptingGenerator I though creating a decorator would be better as it helps the testability, the composition of the generators and the single responsibility of each.\nWhat about the message?\nAt the moment, I am not convinced about injecting the message from the container but, potentially, it might help on collecting all the messages and, eventually, allow to easy translate them (if there is any will to). In order to not inject the message, it should be returned from the final generator which would look a bit odd in my opinion. Also I am not convinced about the placeholders like {CLASSNAME} in the message. Any ideas for both?\nFinal behaviour\nAfter those changes, the final logic is:\n1/ Ask the user for creating the named constructor\n2/ Ask the user for creating the private constructor\n3.../ Ask the user for creating any additional named constructor\nThanks to the OneTimeGenerator, it does not ask for creating the private constructor again regardless of the answer on the second question (even if the answer was to not create it). IMHO, I think this is a desired behaviour as if the user doesn't want the private constructor for the first named constructor, then it most likely means that he does not want the private constructor at all.. ",
    "bpolaszek": "Hello there,\nI am completely new to phpspec and in order to contribute to an open-source project already using it, my first spec was to assert that iterating over a generator returned by a method will not throw an exception.\nLet's assume the following class (to simplify the example, I directly implement IteratorAggregate):\n```php\nclass MyClass implements IteratorAggregate\n{\n    private $shouldFailWhenIterating;\npublic function __construct(bool $shouldFailWhenIterating = false)\n{\n    $this->shouldFailWhenIterating = $shouldFailWhenIterating;\n}\n\n/**\n * @inheritdoc\n */\npublic function getIterator()\n{\n    yield 1;\n    yield 2;\n    if (true === $this->shouldFailWhenIterating) {\n        throw new \\RuntimeException();\n    }\n    yield 3;\n}\n\n}\n``\nHow do you specify that aMyClassobject _shouldNotThrow_ an exception when$shouldFailWhenIteratingis set to falseand that it _shouldThrow_ an exception when$shouldFailWhenIteratingis set to true` ?\nI didn't find any way to do this in the documentation, so i may think it is related to that feature request.\n@carlosV2 I don't think this is an obstacle because I can already test a method which doesn't return a generator, in a very similar way:\n```php\nclass DoSomethingTest\n{\n    public function doSomething()\n    {\n        for ($i = 0; $i < 100000000; $i++) {\n            // do things\n        }\n    throw new RuntimeException('Reached the end of the loop');\n}\n\n}\n```\nThe issue is the same, isn't it? In real conditions, tests fixtures never reach 100.000.000 items, IMO.\n@ciaranmcnulty Beware that duringIteration() might behave weirdly since DuringCall::__call() will match any method beginning by during - thus a method called $myobject->iteration() (which may not obviously return an iterable). \nTo avoid this I suggest something like whenIterating() (which will traverse $object implementing Traversable) and whenIteratingOn('method') (which will traverse what $object->method() returns)\nPS: As I said, I'm a newcomer, but I heavily digged into the code to understand how things are done and how to achieve what I want to do :). Actually what I'm trying to specify is that it should throw an exception during iteration :). ",
    "Artistan": "thank you for pointing out my confusion. cheers.. ",
    "WillSkates": "Hi @pYr0x. Looking at the stack trace it seems like the error lies inside of the plugin for your IDE (see the file path at 1.). Are you on the latest version?. ",
    "pYr0x": "i wrote an issue on the PHPStorm bugtracker.\nhttps://youtrack.jetbrains.com/issue/WI-35034\nthe issue was that PHPStorm does not handle a .bat file (on windows) as the Path to PHPSpec executable correctly.. ",
    "fullpipe": "I'm getting ClassLoader from spl_autoload_functions, looks better. Problems mentioned by @avant1 are real. And best possible solution I see is direct scan of \"src\" dirs from suites.. @avant1 should I make some more fixes?. @ciaranmcnulty yes, sure. . Great! Thanks! If you'll get some troubles with this, let me know ). Sure.. Yes, token_get_all is safer. I'll use it.\ndirectory structure sounds interesting. But what to do with Test and Resources, just ignore them?. Your right. I just accustomed to use / with \"bin / phpspec desc\".. Something like this\n```\n\\PhpSpec\\Console\\ConsoleIO\n    askQuestion(\\PhpSpec\\Console\\QuestionInterface)\n\\PhpSpec\\Console\\QuestionInterface\n    askQuestion\n\\PhpSpec\\Console\\Question\\RequestDescribedClass implements QuestionInterface\n``\nAnd inDescribeCommand$classname = $container->get('question.request_decribed_class')->askQuestion()?.\\PhpSpec\\Console\\Provider\\NamespacesProvider? \nAnd I want to injectlocator.locators` in it directly.. ",
    "vitorf7": "I have managed to find a solution to hide that warning and submitted a Pull Request for the maintainers to have a look. It will be up to people like @ciaranmcnulty to now have a look and if accepted it would be merged in. . @bartosz-zasada The PR that I have made for this issue has been accepted and has been merged in by @ciaranmcnulty which means it should be in the next version that is launched.. @ciaranmcnulty thanks for letting me know through Carlos. I have changed the target of the PR to the branch 2.5.. @ciaranmcnulty Oh yeah :P oops sorry noob error. @ciaranmcnulty Everything seems to be fine now. Thanks to @CarlosV2 help :). Yes you are correct I made that small change as it makes more sense checking if it is not empty first.. ",
    "fgheorghe": "If it helps, the issue appears to originate in file ClassMirror.php, method reflectMethodToNode,         if (version_compare(PHP_VERSION, '7.0', '>=') && true === $method->hasReturnType()) {\n            $returnType = (string) $method->getReturnType();. After further digging, it turns out ReflectionMethod -> getReturnType will not account for nullable. . Awesome, thank you - nice fix btw. Had no clue about the allowsNull() method for ReflectionParameter.. ",
    "wout": "Not as elegant indeed but works as expected. Thanks!. ",
    "andreasciamanna": "My bad: I had another expectation right after the one I thought it was wrong.\nThe verbose option helped me finding it: thanks!. ",
    "Gladhon": "seems to be a local docker container problems, thx for answer. ",
    "TerjeBr": "But then will you be able to test that methods on $foo has been called?. I also tried to wirite this spec (assuming the same above hierachy):\n```\nuse Prophecy\\Argument;\nclass SubjectUnderSpecificationSpec extends ObjectBehaviour\n{\n  // ....\nfunction it_does_something()\n  {\n    $this->doSomething(Argument::type(MySpecialValue::class));\n  }\n}\n```\nThen I got this error when I ran phpspec:\n```\n  30  - it does something\n      exception [err:TypeError(\"Argument 1 passed to SubjectUnderSpecification::doSomething() must be an instance of MySpecialValue, instance of Prophecy\\Argument\\Token\\TypeToken given\")] has been thrown.\n```\nHow do I get around that?. Ok, thank you so much for your help. I really appreciate it.. ",
    "jay-rawal": "thanks @ciaranmcnulty that worked. . ",
    "alexlongshaw": "@ciaranmcnulty I can see this is in the docs here: http://www.phpspec.net/en/2.5.1/cookbook/wrapped-objects.html\nIt maybe isn't the clearest place (I didn't think to look there). Would it be beneficial to have a page  for \"gotchas\", FAQs or maybe something around reserved words/phrases and how to deal with them. I'm happy to write something up if you think it is worthwhile.. ",
    "timiTao": "Closing this, as I send question via StackOverflow. ",
    "jcdescy": "I think I have a very similar problem. I have moved curl functionality into a small class in order to be able to mock it. \n```php\n<?php\nnamespace SSL\\HTTPValidator;\nclass Reader\n{\n    public function __construct($url)\n    {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n    }\npublic function read()\n{\n    return curl_exec($this->curl_handle);\n}\n\npublic function __destruct()\n{\n    curl_close($this->curl_handle);\n}\n\n}\nMy spec codephp\n<?php\nnamespace spec\\SSL\\HTTPValidator;\nuse SSL\\HTTPValidator\\Reader;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\nclass ReaderSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->beConstructedWith('www.example.com');\n        $this->shouldHaveType(Reader::class);\n    }\n}\n```\nWhen I run phpspec I get \nSSL/HTTPValidator/Reader\n  11  - it is initializable\n      notice: Undefined property: SSL\\HTTPValidator\\Reader::$curl_handle in\n      /Users/jdescy/dev/pgsource/unicorn/sslservice/src/SSL/HTTPValidator/Reader.php line 21\nLine 21 is the one in the destructor. . ",
    "SerjoA": "how come when doing like so: when i set my expectations on the spec class and check if\n$ms->getMe has been called during both func's getHim and getHim2\nthen only the getHim functions passes\ngetAuthService and authService are the class members that holds MicrosoftAuth instance or var\nclass:\n```\npublic function getHim(MicrosoftAuth $ms)\n    {\n        $ms->getMe(\"35000451\", \"sdasd\",\"sdasd\",\"ads\");\n        $ms->newAdPerformanceReportRequest(\"35000451\", \"sdasd\",\"sdasd\",\"ads\");\n    }\npublic function getHim2()\n{\n    $this->getAuthService()->getMe(\"35000451\", \"sdasd\",\"sdasd\",\"ads\");\n    $this->authService->getMe(\"35000451\", \"sdasd\",\"sdasd\",\"ads\");\n}\n\nmy spec: \nfunction it_should_have_type_service(MicrosoftAuth $ms) {\n        $this->getHim($ms);\n        $ms->getMe(\"35000451\", \"sdasd\",\"sdasd\",\"ads\")->shouldHaveBeenCalled();\n        $ms->newAdPerformanceReportRequest(\"35000451\", \"sdasd\",\"sdasd\",\"ads\")->shouldHaveBeenCalled();\n        $this->shouldHaveType( MicrosoftService::class );\n}\n\nfunction it_should_implement_the_service_interface(MicrosoftAuth $ms) {\n\n//        $ms->newAdPerformanceReportRequest(\"35000451\", \"sdasd\",\"sdasd\",\"ads\")->shouldBeCalled();\n//        $this->getAuthService()->getWrappedObject()->getMe(\"35000451\", \"sdasd\",\"sdasd\",\"ads\");\n//        $this->getHim($ms);\n        $this->getHim2();\n        $ms->getMe(\"35000451\", \"sdasd\",\"sdasd\",\"ads\")->shouldHaveBeenCalled();\n        $this->shouldImplement(ServiceInterface::class);\n    }\n```. i tried both of the solutions but cant get it to work. both at the constructor and in other method.\nis there any guide or design principles pdf that php spec enforces on the programmer when starting to build new classes , or about object comminication.\ni mean what does phpspec consideres bad practice and good practice?. thank you very much for your help. thank you very much. ",
    "borNfreee": "Finally, tests are green. Please review it again @avant1 . > So you want to name the specific files to execute?\nyes\n\nbin/phpspec run spec/Foo.php:14 spec/Bar.php:16 ?\n\nthere is a command line length limit for each OS, I don't think this is a reliable solution.\ncan you suggest other solutions? and what about adding files to phpspec.yml as shown in the first comment like PHPUnit does?. > You could write a PhpSpec Extension that implements a Locator you have complete control over?\nThis is not a very good solution because \n\nin this case Mutation Testing Framework should depend on PHPSpec in order to have its interfaces\nin this case we need to write extension/listener and support this code from version to version\n\nAs I said, having built-in functionality to run only particular specs (as PHPUnit does) would be the best option. No dependencies on PHPSpec, no Extensions to be written, no potential BC breaks when extension interface is changed. This will just work fine out of the box.\nTo show what I mean:\nhttps://github.com/infection/infection/blob/0.6.0/composer.json#L28 - we don't depend on PHPUnit while can run particular unit tests just specifying them in phpunit.xml.dist. No listeners.\nI would like to have the same for PHPSpec in order to dramatically speed up Mutation Testing process.\n\nI'm not sure supporting extra config is a good option\n\nWhat are the concerns?\n/cc @theofidry @padraic . What is this file content will look like? Could you please give an example?. Ok, while I don't quite understand the reason why you don't want to have such functionality in the main config, I will be happy with this way using .specs file.\nAnyway, this will speed up mutation testing for PhpSpec, which is the goal of this RFC.. It's a stupid mistake, sorry about that. You are completely right. fixed. ",
    "theofidry": "Even if you have a config, you still depend on a specific version as the config can change from a version to another, so you actually end up with an implicit dependency although on the plus side this one is less likely to change.\nStill, I do think this is a good idea. I hope in the future some test frameworks like PHPUnit are going split themselves in two: an API for the consumer to be able to write their unit tests and do assertions which would be relatively lightweight and an executor which can afford to be used as a PHAR. The reason this is not viable yet is that the code bundled in the PHAR is not isolated, but this is changing thanks to PhpScoper.\nSo I'm \ud83d\udc4d  to try to reduce any direct code dependence on how to try to execute tests and stick to a configuration or CLI input.. ",
    "UrGuardian4ngel": "@stof Throwing a BadMethodCallException is yet another way of fixing the issue... :)\nThe comments are a bit confusing, as it looks like half of the conversation is missing? :-/\nBut just to clarify:\n- The problem is coming from PHPStorm wrapper calling the ExampleEvent::getTime() without the example being ran\n- It would return null (but that's failing, because PHP is expecting a float)\nI interpreted getTime as \"time elapsed\". And like a stopwatch, if you don't start it, it would stay at zero.\nBut, the other alternative you mentioned with the BadMethodCallException, would also make sense in this case (instead of 0.0). However, that would mean the 'problem' just gets shifted, and that the PHPStorm wrapper (and potentially others) would need to be patched as well. :). ",
    "bluebaroncanada": "I deleted my comments which contributed nothing.. ",
    "oxkhar": "Ok, specs defined for default values...\nDone!. ",
    "meridius": "This is duplicate of older #354 (PhpSpec should warn when a spec class does not match its expected name). \nAlso maybe #627 (Detect non-testing specs).. The tests are failing because they rely on phpspec/prophecy#408 being merged to phpspec/prophecy:\"^1.5\" (in composer.json), but it is not yet.. ",
    "arendjantetteroo": "In my case this happened because I referenced a method that did not exist yet in a function on a collaborator that was called by the spec. \nHard to explain, will try to add a reproducible scenario. . Reproducible scenario: https://github.com/arendjantetteroo/phpspec-issue-1147\nIt's clear this is a user error but the message does not help to understand what the problem is or where to find the issue. . @greg0ire it does not change the output of the message. 369 is for the className (if i read it correctly) while here it is a method that is missing. . Did something wrong with testing, that indeed fixes it for me. . ",
    "fabpot": "Does it give a significant impact on real-world scenarios? I mean, changing a function call by a cast will always have a big impact for Blackfire as the function call is instrumented (so slower), the cast is not.. ",
    "nicolas-grekas": "The correct fix for this (if there is anything to improve one Blackfire's overhead has been removed), is to prefix the call by a \\: this will allow opcache to use not a function call but a much faster instruction of the VM.\nSo: \\is_array() (works for a few basic functions: strlen, is_string, etc.). I'm not even sure this is an opcache-only optim, @jpauli wdyt?. @avant1 thanks! This means it doesn't rely on opcache, so all good (Yes, a type check is much faster than a function call). There are only a few functions where this is useful, you should not change all of them.\nHere is the list:\nhttps://github.com/php/php-src/blob/f2db305fa4e9bd7d04d567822687ec714aedcdb5/Zend/zend_compile.c#L3872. The Hack edition is free for everyone. For more advanced features, I don't think there is a plan for OSS.. this one won't change anything, that's always a function call.\non type-related functions are replaced by better opcodes.. @stof correct, which the benefit is not measurable in practice :). ",
    "drupol": "Hi @MarcelloDuarte !\nActually, nj on irc just gave me the solution:\n$this->shouldThrow(...)->during('__get', ['undefinedProperty'])\nI guess we can close the issue :-). I guess it would be possible, but I haven't found a proper way to remove a ExampleNode from a SpecificationNode... unless to create a new one.. Hi @jakzal , @ciaranmcnulty ,\nI added an entry in the extensions files so it would show up on the site.\nShould I do something else to push this thing forward ?\nThanks!. Ping @jakzal & @ciaranmcnulty ?. @ciaranmcnulty Should I do something to get this moving forward ?\nThanks!. Oooh I just noticed you merged this !!!\nThanks !!!!. Following this issue.. Prefer composition over it.. This is indeed not necessary, do you want me to remove it ?. ",
    "yvoyer": "Maybe it could be added using a configuration. It could be off by default unless the user explicitly enables it.. ",
    "sgolemon": "Adding strict types to generated files doesn't really push anything on end users since THEIR calling scopes can still be weak.  Turning it on in the generated files just enforces that THOSE files are correct.\nIf you're not confident in your generated code being correct then that's a separate problem.. ",
    "Cosmicist": "You're right, thanks! I updated prophecy on it's own and now I got the latest version.. ",
    "blacksaildivision": "Thank you for fast reply! Yes, I'm using https://github.com/phpredis/phpredis extension. I actually did not check source code for that, I was misled by PHPStorm autocomplete which has lRange instead of lrange! . ",
    "Nyholm": "Awesome, Behat just merged a PR to make them compatible with SF4. . Correct. \nCould this PR me updated and merged? There are a ton of other projects that depends on this library that are waiting for this.. ",
    "alcaeus": "I'd have to guess, but could the parent constructor in SplFileInfo have something to do with it?. @gnugat not quite - where not blocked by other dependencies, the dev build installs dev-master which is 4.0: https://travis-ci.org/phpspec/phpspec/jobs/304433561#L501. @gnugat Thanks!. The @beta suffix should be dropped: the CI build will test it in the DEPENDENCIES=dev matrix build.. ",
    "srosato": "I see, thanks for the reply, I guess it is something to look forward to!. ",
    "francescolaffi": "Looks like with this change its not possible to use alternative yml names such as phpspec.yml.dist anymore, as the removal of the empty check make so only the first path is checked\n/cc @jakzal. thanks @ciaranmcnulty and @jakzal! that was incredibly fast \ud83e\udd47 . ",
    "padalec": "OK never mind my mistake.. ",
    "luyandasiko": "Having followed your advice I could be able to get the behaviour out of my test I expected. I am starting to fall inlove with PHPSpec multiple million times than before. I will definitely blog about this one as I think it is a very important aspect of code writing when more people when on the code.\nAlso the context you've provided was of value to me to understand and correlate the intention of the library versus that which I am trying drive myself towards. Big thanks to you.. ",
    "kornrunner": "Any chance of tagging this as a patch? Thanks!. ",
    "lukewatts": "To be clear I'd be happy to do a pull request. Just say the word. And tell me where the report is for them. *repo. ",
    "ddziaduch": "I can try this one \ud83d\ude04 . Hi guys. I tried to fix this but it is not so easy with current layout. What about moving docs to https://docusaurus.io ?. v7.3 does not include to much changes https://ayesh.me/Upgrade-PHP-7.3. @jleaders what library did you chose?. You can use PhpSpec to do integration tests using https://github.com/BossaConsulting/phpspec2-expect ;). What is wrong with PSR-0? Is it not working?. If you create a new instance using ReflectionClass::newInstanceWithoutConstructor the dependencies will be empty, consider this example:\n```php\n<?php\nclass Foo\n{\n    private $prop;\n    public function __construct()\n    {\n        $this->prop = 'set!';\n    }\npublic function echo()\n{\n    var_dump($this->prop);\n}\n\n}\n$reflection = new \\ReflectionClass(\\Foo::class);\n$foo = $reflection->newInstanceWithoutConstructor();\n$foo->echo(); // null\nSo you have to use `beConstructedWith` to set the deps by yourself \ud83d\ude42. @chris-kruining you can always execute `__construct()` manually:php\n$this->getWrappedObject()->__construct();\n$this->prop->shouldBe(true);\n``\n\ud83d\ude0e. @Bilge it is very interseting that you have two different namespaces in thesrc` directory, never seen that :) . > Inheritance sucks, right?\nWhy?. All tests are correct, but they do different types of testing.\nThe V4 test looks like Functional Test. It tests the whole functionality of all 3 classes \ud83d\ude42\nI think V3 is the best as Unit Test. It focuses only on the behavior of tested class \ud83d\ude42. Hi mate, can you do var_dump($this->getWrappedObject()->isSatisfiedBy(array($emissionA));? It will dump what is the current output of the method \ud83d\ude42. Great! Yes, you got Error from my command because I copied wrong selection \ud83d\ude48 I have just edited that post\ud83d\ude42. ",
    "bartonhammond": "Ah!  It is actually in bin rather then vendor/bin. ",
    "Sevavietl": "Well, I was over thinking the problem. Exceptions, in this particular case, can be handled with matcher as well:\n```\npublic function getMatchers(): array\n{\n    return [\n        'failWith' => function (Promise $subject, $value) {\n            try {\n                wait($subject);\n            } catch (\\Exception $e) {\n                if ($e instanceof $value) {\n                    return true;\n                }\n            throw $e;\n        }\n\n        return false;\n    }\n];\n\n}\n```\nThe question can be closed.\nThank you.. ",
    "bitwombat": "Hi Ciaran,\nYep, that was my problem.  I'm PSR-4 in composer.json, but didn't tell PHPSpec that. \nFrustrating when you re-learn something!\nBefore restructuring my dirs, the PSR0Resource was happily finding things.\nIt's these lines in Loader/ResourceLoader.php\n        if (!class_exists($resource->getSpecClassname(), false)) {\n            continue;\n        }\n\nfailing (?) silently, which then makes an empty resource, which then ends up making an empty specifications list in SuiteRunner.\n. So, even though the problem was between the chair and keyboard, I'm wondering if that output could be more helpful?. Can you please explain what you mean by \"does not understand\" and \"impossible\"? Possibly with failing command examples?. ",
    "jdreesen": "Your link misses an \"s\" at the end. The correct link is: https://github.com/unfunco/phpspec-sort-use-statements. Wouldn't it be better to check for !empty() first?. ",
    "lifeofguenter": "@ciaranmcnulty version 1.1.0 requires php7.1+ - which I do not have installed. phpspec 2.5 only requires php5, meaning there is a version mismatch. Yes, but why would you want to specify a wrong version range, especially if it is known that versions >=1.1.0 are incompatible?\nBut all good, if you don't want to change :) . ",
    "jleaders": "Unfortunately I moved away from PHPSpec towards a library that didn't require verbose output for usage, so I can't test anymore easily. \nPerhaps if the exception type is ParseError it could be more verbose, or at least suggest to add -v?. PHPUnit. ",
    "kevincarrogan": "What are the installation steps that you are following?. ",
    "devsoul": "@ciaranmcnulty I use .phar on my development machines, and I just noticed that my ansible playbooks are not working because phpspec.phar is missing :). ",
    "chris-kruining": "@ciaranmcnulty I likely misunderstood something, but didn't all methods prefixed with should trigger the construstion of a new instance?. > create an instance without using the constructor\n@ciaranmcnulty could I bother you with the question to point me to the code that does this, because I do think myself a decent PHP programmer, but I have no clue how one would instantiate a class without calling the constructor(if defined) since the __constructor is a language hook. All i can imagine is somehow to use de-serialisation?. @ciaranmcnulty I'm very surprised that the PHP team would add a method that breaks OOP, but then again, consistency has never been there forte...\nThen again I do see why it is useful in this case, if the class being spec-ced has a huge/slow constructor it is nice to be able to skip it. I do wonder, since you can construct the class without a constructor, how are dependencies and initial property values solved? are dependencies only solved via the beConstructedWith?. ooooooh, wait, nvm, thats why this is a bug. exactly because of this \ud83d\ude1b . so short of inserting the default argument values via a beConstructedWith there is no way to test the default arguments?. @ciaranmcnulty why was there chosen to use the Initiator over calling instantiate on the wrapped object? https://github.com/phpspec/phpspec/blob/4328adf6e49a466d0bf4ebc4d5635bfb2396d16e/src/PhpSpec/Wrapper/Subject.php#L369\nbecause unless I'm missing something, that would solve this issue. It does have the drawback that all constructors will be called all the time, is this the reason perhaps?. It should be possible to write a test case around this, but I have no clue where to even start as I do not know the ins and outs of this change and what implications it has. Maybe a maintainer of the project could help me out?. @ciaranmcnulty ping. ",
    "Bilge": "@bitwombat Sure. I observed a few problems as follows.\nFirst, since src/Foo is nested inside src, multiple suite definitions cause tests in the Foo namespace to belong to both suites simultaneously, which confuses PhpSpec. Specifically, it will complain that the namespace of the tested file mismatches one of the suites, and if you correct it, the other suite will complain that it no longer matches its namespace. That is, it is not possible to satisfy the namespace requirements of both suites and PhpSpec is not smart enough to understand that they should be mutually exclusive (i.e. a given test should only belong to one suite).\nSecond, composer_suite_detection does not understand nor support multiple namespace definitions and appears to just adopt the last one defined. But regardless of whether it picks the first or last, this is a crippled implementation that does not properly support Composer autoloading. That is, it appears PhpSpec has a faulty assumption built into it that projects will only ever use one autoloading namespace, and this Composer integration has been retrofitted into that faulty assumption even though Composer supports (and always has supported) multiple autoloading namespace definitions.. ",
    "nmeirik": "I have the same setup (and the same problem).. ",
    "forikal-uk": "Thanks for your prompt reply. \nStrangely, I have just done a composer update (for some other reason) and the problem went away. So, is no longer an issue:\nHere is the composer update that fixed it:\n```\n$ composer update\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 1 install, 15 updates, 0 removals\n  - Updating doctrine/instantiator (1.0.5 => 1.1.0):Downloading (100%)         )\n  - Updating sebastian/diff (1.4.3 => 3.0.2): Downloading (100%)       \n  - Updating sebastian/comparator (2.0.0 => 3.0.2): Loading from cache\n  - Installing symfony/polyfill-ctype (v1.10.0): Loading from cache\n  - Updating webmozart/assert (1.2.0 => 1.4.0): Downloading (100%)       \n  - Updating phpdocumentor/reflection-common (1.0 => 1.0.1): Downloading (100%)   - Updating phpdocumentor/reflection-docblock (3.2.0 => 4.3.0): Downloading (100%)       \n  - Updating phpspec/prophecy (v1.7.0 => 1.8.0): Loading from cache\n  - Updating psr/log (1.0.2 => 1.1.0): Downloading (100%)       \n  - Updating symfony/debug (v3.3.5 => v4.2.4): Downloading (100%)       \n  - Updating symfony/polyfill-mbstring (v1.4.0 => v1.10.0): Downloading (100%)    - Updating symfony/console (v3.3.5 => v3.4.23): Downloading (100%)       \n  - Updating symfony/event-dispatcher (v3.3.5 => v3.4.23): Downloading (100%)     - Updating symfony/finder (v3.3.5 => v3.4.23): Downloading (100%)       \n  - Updating symfony/process (v3.3.5 => v3.4.23): Downloading (100%)       \n  - Updating symfony/yaml (v3.3.5 => v3.4.23): Downloading (100%)       \nWriting lock file\nGenerating autoload files\n```\nThen I did:\n$ composer require --dev phpunit/phpunit ^7\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 17 installs, 0 updates, 0 removals\n  - Installing sebastian/version (2.0.1): Downloading (100%)         \n  - Installing sebastian/resource-operations (2.0.1): Loading from cache\n  - Installing sebastian/object-reflector (1.1.1): Downloading (100%)         \n  - Installing sebastian/object-enumerator (3.0.3): Downloading (100%)         \n  - Installing sebastian/global-state (2.0.0): Downloading (100%)         \n  - Installing sebastian/environment (4.1.0): Downloading (100%)         \n  - Installing phpunit/php-timer (2.1.1): Downloading (100%)         \n  - Installing phpunit/php-text-template (1.2.1): Downloading (100%)         \n  - Installing phpunit/php-file-iterator (2.0.2): Loading from cache\n  - Installing theseer/tokenizer (1.1.0): Downloading (100%)         \n  - Installing sebastian/code-unit-reverse-lookup (1.0.1): Downloading (100%)     - Installing phpunit/php-token-stream (3.0.1): Downloading (100%)         \n  - Installing phpunit/php-code-coverage (6.1.4): Downloading (100%)         \n  - Installing phar-io/version (2.0.1): Loading from cache\n  - Installing phar-io/manifest (1.0.3): Loading from cache\n  - Installing myclabs/deep-copy (1.8.1): Downloading (100%)         \n  - Installing phpunit/phpunit (7.5.6): Downloading (100%)         \nsebastian/global-state suggests installing ext-uopz (*)\nphpunit/php-code-coverage suggests installing ext-xdebug (^2.6.0)\nphpunit/phpunit suggests installing phpunit/php-invoker (^2.0)\nphpunit/phpunit suggests installing ext-xdebug (*)\nWriting lock file\nGenerating autoload files\nAfter doing, that the problem went away.\n\nI did try to run the command you gave\nvar_dump($this->getWrappedObject()->array($emissionA));\nand am now getting the output:\n```\n$ bin/phpspec run\nModels_Domain_Rules_IsSulphurMissingFromEmissions                    \n  17  - it returns true when no sulphur in emissions\n      exception [err:Error(\"Call to undefined method Models_Domain_Rules_IsSulphurMissingFromEmissions::array()\")] has been thrown.\n                            95%                                    22\n\n10 specs\n22 examples (21 passed, 1 broken)\n28ms\n```\nHowever, as mentioned above. Perhaps this issue is resolved simply by running composer update and so perhaps is no longer an issue.. I have tried to echo out the line you ask:\n(My test method names don't make much sense, as I was part way through renaming when I ran the code - but, hopefully, that is not relevant to the matter here)\n```\n<?php\nnamespace spec;\nuse \\Models_Domain_Rules_IsSulphurMissingFromEmissions;\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Prophet;\nclass Models_Domain_Rules_IsSulphurMissingFromEmissionsSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType(Models_Domain_Rules_IsSulphurMissingFromEmissions::class);\n    }\nfunction it_returns_false_when_valid_sulphur_is_in_emissions(\n    \\Models_Domain_Emission $emissionA,\n    \\Models_Domain_Emission $emissionB\n){\n    //Create some mocks\n    //$emissionA->beADoubleOf('\\Models_Domain_Emission');\n    $emissionA->getName()->willReturn(1);\n    $emissionA->getCasNumber()->willReturn('7704-34-9');\n\n\n    $emissionB->getName()->willReturn('foo');\n    $emissionB->getCasNumber()->willReturn('foo');\n\n    var_dump($this->getWrappedObject()->isSatisfiedBy(array($emissionA)));\n\n    $this->isSatisfiedBy(array($emissionA, $emissionB))->shouldBe(TRUE);\n}\n\n```\n```\n$ bin/phpspec run --verbose\nModels_Domain_Rules_IsSulphurMissingFromEmissions                    \n  17  - it returns falase when valid sulphur is in emissions\n      error: Object of class Prophecy\\Prophecy\\MethodProphecy could not be converted to string in\n      /Users/jw/Documents/Training/emissiontools/app/src/Models/Domain/Rules/IsSulphurMissingFromEmissions.php line 32\n       0 vendor/phpspec/phpspec/src/PhpSpec/Runner/Maintainer/ErrorMaintainer.php:121\n         throw new PhpSpec\\Exception\\Example\\ErrorException(\"error: Object of class Pr...\")\n       1 spec/Models/Domain/Rules/IsSulphurMissingFromEmissionsSpec.php:30\n         Models_Domain_Rules_IsSulphurMissingFromEmissions->isSatisfiedBy([array:1])\n       2 [internal]\n         spec\\Models_Domain_Rules_IsSulphurMissingFromEmissionsSpec->it_returns_falase_when_valid_sulphur_is_in_emissions([obj:PhpSpec\\Wrapper\\Collaborator], [obj:PhpSpec\\Wrapper\\Collaborator])\n       3 vendor/phpspec/phpspec/src/PhpSpec/Runner/ExampleRunner.php:150\n         ReflectionMethod->invokeArgs([obj:spec\\Models_Domain_Rules_IsSulphurMissingFromEmissionsSpec], [array:2])\n       4 vendor/symfony/console/Application.php:978\n         Symfony\\Component\\Console\\Command\\Command->run([obj:Symfony\\Component\\Console\\Input\\ArgvInput], [obj:Symfony\\Component\\Console\\Output\\ConsoleOutput])\n       5 vendor/symfony/console/Application.php:255\n         Symfony\\Component\\Console\\Application->doRunCommand([obj:PhpSpec\\Console\\Command\\RunCommand], [obj:Symfony\\Component\\Console\\Input\\ArgvInput], [obj:Symfony\\Component\\Console\\Output\\ConsoleOutput])\n       6 vendor/phpspec/phpspec/src/PhpSpec/Console/Application.php:89\n         Symfony\\Component\\Console\\Application->doRun([obj:Symfony\\Component\\Console\\Input\\ArgvInput], [obj:Symfony\\Component\\Console\\Output\\ConsoleOutput])\n       7 vendor/phpspec/phpspec/bin/phpspec:25\n         Symfony\\Component\\Console\\Application->run()\n       8 vendor/phpspec/phpspec/bin/phpspec:27\n         {closure}(\"4.0.0\")\n                            95%                                    24\n\n10 specs\n24 examples (23 passed, 1 broken)\n40ms\n$ \n```\n. I am marking this Issue as Closed because the original issue seems to have been fixed by simply running:\ncomposer update. I have just noticed that this Uncaught TypeError appears when the test fails. \nPerhaps it became working, before, when the test expectation was altered instead of when the composer update occurred. Apologies that I cannot be more helpful but the problem 'went away' mysteriously after I had stopped trying to fix it, so I was not in 'methodological mode' to notice what I did.  . ",
    "jaylinski": "@ciaranmcnulty @jakzal It would be nice to have your input on this. Thanks!. ",
    "bookvik": "regular expression better than just trim?\n. I've highlighted the only way out of the inner loop. But in general it is not principal.\n. ok\n. It encapsulates some of them you use. Configure the system, take the agreement and forget about it.\nDo not have to then look at the code \"\\ n\"\n. Why? Of the code becomes less imperative?\n. I see.  Thank you.\n. exactly!\n. really!\n. ",
    "alreece45": "@stof Its been updated to not need the collaborator\n. ",
    "bryceray1121": "The methods are fulfilled through a magic method.  Isn't that the use-case for adding @method calls to the class definition?\n. Oh ok, I just copied the method names from the \"Type Matcher\" section of the documentation: http://www.phpspec.net/en/latest/cookbook/matchers.html\n. "
}