{
    "gabrielbull": "Yeah makes sense to add it so people contributing don't accidentally commit it.\nThanks for noticing!\n. Merged through git instead, will have to close this PR (sorry) but it IS merged!\nThanks for adding some tests, I did not get a chance yet to do much of that!\n. Oops I think the unit test is failing which prevents me from merging. \n\nAlso think maybe we should have a component loader/bootstrap of sorts so that we don't have to repeat all that code for a common component?\n\nWhat about the propsTypes? I think people are using them to know what props a component can receive.\n. Super cool, thanks!\n. Awesome!\n. Cool thanks! Yeah I guess we should add the eslint rules, that would make sense.\n. Makes sense. If you have time you should join us on gitter! \n. :+1: \n. @steelbrain Hi, do you mean it lacks a Linux UI? That is something that could be added in the future. Right now the focus is on OS X and Windows, but the library will work fine on Linux, you'll just end up with a UI that looks like OS X or Windows. I'm closing his now as it is not really an issue! Thanks!\n. Maybe, but this issue seems to indicate that the library does not work on Linux, which is false. Maybe you could create an issue to discuss the creation of a Linux UI.\n. @jamrizzi Please email me at me@gabrielbull.com to discuss collaboration. Thanks!. Oh yeah that is way cleaner! Thanks!\n. Fixed in current version.\n. Super! Thanks!\n. Fixed. Thanks for reporting.\n. Not fixable in browser, only in electron.\n. Fixed\n. Yeah, they're easier to read so :+1: \n. What about es7.classProperties?\n. Oh yeah good for event handling I suppose, yeah lets use it!\n. The reason was to keep dependencies count low and thus the footprint of the library low. I was hesitant to add Radium for styling but after struggling with all the needed styling I decided to include it. \n. Haha yeah, the blue conversion was the Windows \"blue\". But I figured it would be confusing as well. We should defiantly use that conversion chart, as long as the commas are at the end of the line ;-)\n. :+1: \n. window.process would be the same as process in a browser environment.\n. Thanks!\n. I guess we now have to add react and react-dom to devDependencies\n. yes, adding them to devDependencies should fix the unit tests\n. Wow that's great!\n. Currently, the library no longer detect the OS. It is up to the user to import the components properly.\n. :+1: \n. Hi @Wietsedv,\nThanks for chipping in.\n\nBut even if Gabriel agrees, I will probably wait until this project is a little more stable and documented.\n\nDefinitely wait until the project is at released, as I will be making some changes in the future that will break compatibility. I will keep you posted.\nCheers!\n. Forms have been removed for now.\n. Hi @stefanKuijers ,\nThis is still a work in progress and the most up to date documentation is available here: https://github.com/gabrielbull/react-desktop/tree/master/docs\nThe current state is that the Windows version is almost finished and the API should not change too much when released. The Mac version is being refactored and once it is finished, I should be able to release a first stable version. The current E.T.A. for the stable release is June. \nThere is no documentation for installation currently available but if you have an electron app running, it should be as simple as using the command npm install --save react-desktop. Then, you should be able to use the examples in the doc.\n. Thanks for reporting. It is now fixed!\n. Hi, thanks for letting me know! I've just publish a new version that will accept react 15.1 as a peer dependency. \n. Thanks! \ud83d\udc4d\ud83c\udffc\n. Hey, this has been fixed now, thanks for reporting!!\n. Hey @erichiller . Can you provide an example of typings for typescript that I could reference to? \n. @erichiller I separated your issue with NavMenu and TypeScript from this issue to keep things clear. Can you comment here to let me know if you are still having problems?\nCan you also provide the typings you started working on as a PR? This will give us a good starting point to create typings for all of React Desktop.\n. No they're not native. They are meant for use with Electron or node-webkit.\n. I transpiled by hand to ES6.\n. Cool thanks!\n. Can you zip and share the boilerplate you made?\n. Hi. I just released a new version containing a fix for your issue. Please update your react-desktop dependency to 0.2.12. Thanks for reporting the issue, let me know if there are any more issues.\n. You have two approches that works depending on what you want to do.\nThe first approach is to let Electron handle the chrome and titlebar of the window and just use react-desktop for the content inside that window. In this approach, you wouldn't need the Window component, like this: \njsx\n            <View\n                color={this.props.color}\n                theme={this.props.theme}\n                height=\"300px\"\n                padding=\"12px\"\n              >\n                <TitleBar title=\"This is EDH Title #1\" controls/>\n                <Menu></Menu>\n                <Text color={this.props.theme === 'dark' ? 'white' : '#333'}>HELLO WORLD</Text>\n            </View>\nThe second approach is to use react-desktop for the window's chrome and titlebar. In this case, you need to make the electron window frameless, here's a good explanation: http://stackoverflow.com/questions/35876939/frameless-window-with-controls-in-electron-windows\n. Yeah, this would be expected. You can declare your functions using the arrow function declaration or provide the this context to the callbacks. \nUsing arrow functions syntax on the functions:\n``` typescript\n    close = () => {\n        elog('close window');\n        let window = remote.BrowserWindow.getFocusedWindow();\n        window.close();\n}\n\n```\nUsing arrow functions on the callbacks:\ntypescript\n                    onCloseClick={() => this.close()}\n. Hey @sergeybekrin that looks fantastic! Do you have access to a retina screen? I know they are different on a retina screen and I started making two sets of icons for new components, one for 1x screens and another for 2x and more. Here's an example of a component containing two sets of icons: https://github.com/gabrielbull/react-desktop/tree/master/src/searchField/macOs\n. They're definitely different. Most of the icons by Apple I've seen are actually a set of two different icons, one for standard displays and one for retina displays. Take a look:\n\nSince I have a retina screen, I've made the retina versions myself and merged yours as the standard ones. \nThanks a lot for your time and effort, it is much appreciated. \ud83c\udf7e\ud83c\udf8a\ud83c\udf1f\n. Hi @luayalshawi. Thanks for reporting the issue. I will take a look when I have some more time. In the meantime, check out the React documentation for inputs, it could give you some clues on an alternative to refs. Like this example:\njsx\n  getInitialState: function() {\n    return {value: 'Hello!'};\n  },\n  handleChange: function(event) {\n    this.setState({value: event.target.value});\n  },\n  render: function() {\n    return (\n      <input\n        type=\"text\"\n        value={this.state.value}\n        onChange={this.handleChange}\n      />\n    );\n  }\n. You can now use ref to get value from input. Thanks for submitting the issue \ud83c\udf89!. Hey @steamIngenius, thanks for reporting the issue. I've published a new version with a fix for the duplicate onChange events. You need to update react-desktop to 0.2.14. Cheers!\n. @dotcarls Thanks for reporting. I'll investigate this tomorrow.\n. @dotcarls sorry for the delay, the issue has now been resolved. Thanks for reporting! \ud83c\udf89. You can now import components based on the current OS like so:\njsx\nimport { Window, TitleBar, Text } from `react-desktop`;. It decides what to import. If you want to decide you can import using react-desktop/macOs or react-desktop/windows\n```jsx\nimport * as macOs from 'react-desktop/macOs';\nimport * as windows from 'react-desktop/windows';\nconst platform = (process.platform === 'win32') ? 'windows' : 'macOs';\nconst TextField = platform === 'windows' ? windows.TextField : macOs.TextField;\n``. Awesome! Thanks! \ud83d\udc4d\ud83c\udffc\ud83c\udf7e\n. Hi @obedm503, while having it be library agnostic would be great, it would pivot too much from the goal of this one library and require too much change. Hope you find what you are looking for.. Hi, can you post a sample of code to reproduce the problem?. @tgds Thanks for digging deeper in this issue. I am no longer involved in this library and at the moment, no one really is. If you want, I can add you as a maintainer and you can fix this issue. Let me know. Thanks.. Agreed that we should only show 1 example per example files. There is no need to show off all attributes in the examples. Thanks for the great work, it is very appreciated as my time to commit on this project is limited!. Thanks for the work, if you have any more time to work on this project I am really short handed at the moment and would welcome any help.. Hi, thanks for submitting the issue. The label should now change color based on theme for version 0.2.16. On top of that, you now have the ability to specify a color using thelabelColorproperty and overwrite any label style using thelabelStyle` property. All info can be found in the docs. Cheers and happy new year! . Sorry for the late reply, but if someone is willing to submit a PR, I'd be happy to accept it.. Sorry for the late reply, but if someone is willing to submit a PR, I'd be happy to accept it.. Sorry for the late reply, but if someone is willing to submit a PR, I'd be happy to accept it.. Hey thanks for the help! Please continue contributing if you have any more issues or want to add features! \ud83c\udf89. Yes, everything is open for PR :). Currently, only Chrome is supported as this was build for Electron/NWJS but it would be nice to have support for all browser since all it requires is to make the CSS compatible. \nThere is already an issue open for this: Cross browser compatibility #51\nPlease feel free to contribute to the project if you have any time available.. It is not, it is for electron and nwjs to create native looking applications.. Done ! \ud83c\udf89. Sorry for the late reply, but if someone is willing to submit a PR, I'd be happy to accept it.. Please submit a PR and we will accept it.. Please submit a PR and we will accept it.. Please submit a PR and we will accept it.. Please submit a PR and we will accept it.. Thanks for contributing \ud83c\udf89. I'll check why the tests are failing.. Hi okonet, yes I would be open to switching to Jest. When I first created this project, I had not used Jest, but since then, I have and think it would be a good idea as well. Bring on the PR. Would you like to be part of this project as a maintainer, I am looking for help since my time is very limited?. Invited you, so now its your responsibility \ud83c\udfc3\u200d\u2642\ufe0f (runs away). J/K but any help is welcome at this point.. Hi okonet. I am open to switching to react-styleguidist as an alternative to generating documentation by hand. Let me know if you want to take on this milestone.. Thanks for contributing \ud83e\udd47. Thanks for contributing \ud83e\udd47. Thanks. Please submit a PR and we will be glad to accept it. Thanks.. Is one retina and the other one not? Anyway, if you should take a look and submit a PR that would be appreciated!. Hi @TimoSolo . If you want to contribute new components you are very welcome to do so. Please note that currently this library uses radium for styling components but we are planning to move away from it, so newer components should use something else. styled-components seems like a good choice but it is still open for debate.. Thanks!. Only blue is supported so far. PR is welcome. Thanks.. Looks good. I will merge tomorrow when I get some time. And I agree about the jsx extension being superfluous. \nMerci, c'est tr\u00e8s appr\u00e9cier. \ud83c\udf89. Seems like everyone is on-board with styled-components. As for styled-components vs emotion, if they are on par, I think it would be wiser to use styled-components as it has a much bigger user base, with 13 462 stars on Github vs 2 822 for emotion.. Looks like something we might try indeed. Keeping the dependency count low is also very important so  if it's something simple we might want to implement our own solution. If we do not use styled-system, we should inspire ourselves from styled-system so people coming to this library who have used it will find it familiar, and vice-versa.. Looks good, merged!\nParfait 10/10 \ud83d\udcaf. Ok, I reverted radium back to \"=0.19.6\" on the master branch. Can you publish a branch with your changes so I can play around as well? Maybe call it styled-components. Thanks!\n . You could pass style={{ display: 'block' }} to it or wrap it in a View/div element.. Thanks. Thanks. Does that file exists?\n/Users/yuditan/projects/personal_website/node_modules/react-desktop/src/Box/macOs/index.js. Can you try the new version, 0.3.5?. If you still experience the second issue, please open a separate issue for it. Thanks.. Can you elaborate, I do not understand the question.. Awesome thanks!. Windows 10 has the titles so I'd rather they stay. Maybe make a prop to disable, localize them though.. @davej Hello dave, I am no longer maintaining this project, are you interested in being added to the project so you can merge the changes yourself?. @davej Awesome! I've added you as a maintainer to the npm package so you can publish a new release. Amazing work!. Hello @1oginov. At this point, this library is not actively maintained and is looking for contributors. You seem to have good ideas on where to take this project and if you looking to contribute I would be happy to add you as a maintainer. Thanks.\n. This project is looking for contributors. Please submit a PR and request to be added to the contributors. Thanks.. @haivp3010 You can submit a PR if you'd like this behavior to change. I like the rephrasing, But I think we need to choose between to provide or to bring.\n. Go for it!\n. We'd need to have the same propTypes as the child buttons:\njs\n{\n  children: PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.array]).isRequired,\n  form: PropTypes.any,\n  color: PropTypes.string,\n  style: PropTypes.object,\n  onClick: PropTypes.func,\n  onPress: PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.func]),\n  visible: PropTypes.bool,\n  display: PropTypes.bool\n}\n. Got it! I made the change thanks!\n. Only one example, as discussed.. ",
    "Ehesp": "No worries, I fudged up by adding the gitignore file into here too, woops.\n. Commited :)\n. Woops!\n\nThis library has been created to bring a native desktop experience to the web.\n\nSounds better to me!\n. ",
    "Salakar": "Aye its because I renamed PushButton to Button, forgot to update the tests so its still looking for the old one\n. There we go, fixed\n. There we go, button props fixed and the conflicts also, ready to pull! The windows styles won't show on the playground btw as \njs\nDesktop.OS = 'win';\nwill no longer work because of that other pull request by @chentsulin made it a const.\n. Can you explain your issue please? If you mean the toggle to show Windows components on the demo then you should still see a window, there's just no more completed Windows comps yet, though I did push the start of a couple new ones today!\n. Ah ye, as above then :) still working on the windows components so there isn't any to show yet, there's a couple that are WIP (label, button, textfield etc), keep an eye out, they'll be there soon.\n. Aye it does work on linux, the description means only win 10 and OSX styled components are available, can still use the OSX or windows components on Linux.\n. @mikew +1 - there's so many variations.\n. ",
    "ShashankaNataraj": "Sorry if I wasn't clear, this is what I mean:\n\n. ",
    "chentsulin": "ok! thanks for making this awesome lib~\n. I think this works great on linux now, but just don't have linux style components.\n. :+1: \n. This one: https://github.com/babel/babel/issues/619, though still a stage 1 proposal, but autobinding is too attractive. https://github.com/babel/babel/issues/619#issuecomment-71856684\n. It will be awesome :+1: \n. Fair enough. BTW, I thought convertColor's implement is a little weird, in general, blue should be #0000ff. And I also found this, not sure whether this will be useful in this repo or not.\n. https://github.com/less/less.js/blob/master/lib/less/data/colors.js\nThis one convert colors to hex, not rgba\n. What about window.process variable? I've never heard of it before.\n. peerDependencies will not be auto-installed with npm@3\n. fixed.\n. Oops...sorry I forgot to remove ./ when rebase. should remove it again.\n. Here is another one.\n. ",
    "steelbrain": "@gabrielbull If you're gonna add the linux UI in the future, then I think it's better to keep this open till then\n. I would really appreciate if someone else would do it.\n. ",
    "gutenye": "Yes, change the name to 'Native Linux UI style support' is better, why everybody exclude Linux at the first place? Native Linux UI is as important as Mac OS X and Windows!\n. ",
    "mikew": "What is \"Native Linux UI style\" though? Qt? GTK? KDE? Wx?\n. ",
    "codejamninja": "I've been wanting to build a gtk react bridge for quite some time. Wondering if you'd be interested in me making it part of this project? . ",
    "JDAKing": "Lcool\n. ",
    "junland": "+1\n. ",
    "michaelb87": "+1\n. ",
    "yotamN": "+1\n. ",
    "olunx": "+1\n. ",
    "wietsedv": "The difficulty with this idea is that there is no real Gnome (Linux) look. The Mac OS X and Windows 10 styles in this project are hardcoded, which is not desirable when trying to make a Gnome theme. Being a Gnome 3 user myself, I would gladly commit to this project in the future by writing a modern GTK3 theme if Gabrielbull agrees. This theme will only support Linux DE's that support GTK3 themes. (This applies to most Linux users.)\nThe default look might be either the extremely ugly Ubuntu Ambiance theme (most Linux users use Ubuntu) or Adwaita, the default GTK theme for Gnome Shell users. For Electron applications it would be possible to see which GTK theme the user is using, and then look for the directory containing the CSS file and assets. Then I have to parse the CSS file and search for the needed styles so I can use these styles (and assets) for styling React Desktop.\nBut even if Gabriel agrees, I will probably wait until this project is a little more stable and documented.\n. ",
    "RoyTimes": ":+1:\n. ",
    "YurySolovyov": "Maybe it's possible to come up with theme that is generic enough that it looks ok on most popular DEs and provide some customization points so apps using it can tweak a bit to better match app style. \nThoughts?\n. @csterritt I like the idea, MD indeed fits into \n\ntheme that is generic enough that it looks ok on most popular DEs\n. \n",
    "csterritt": "@YurySolovyov I'd recommend against it -- Java tried this with Swing, and it was pretty much a disaster.  Not that apps didn't look good, they just looked... weird... non-native.  It was more of a PR disaster as a technical one.\nOn the other hand, Material Design has come out as a \"platform-independent\" design language, and it's doing pretty well, perhaps because it's Google behind it.\nSo maybe a MD theme?\n. ",
    "minexew": "+1 react-desktop on macOS already feels non-native and uncanny, so it shouldn't be that big of an issue on Gnome. ",
    "tofoli": "+1. ",
    "ArtGangsta": "The angst you have with regard \"what looks like Linux\" is self-imposed.    If you Google search \"Linux desktop\" images, you'll get a lot of Ubuntu -- It's recognizable.   That's what you make the theme look like.  End of story.\nAnyone wants something different -- it's an open source project.  They can create their own.. ",
    "stefanKuijers": "Thank you so much. I will see or I can get it working. \n. ",
    "necolas": "You may want to consider building this library on top of react-native-web in the future. You'd get an API more consistent with React Native and most of the building blocks for free, including decent cross-browser support.. ",
    "Manouchehri": "I'm having a hard time Google'ing for a sample repository; Google doesn't respect the dash in \"react-desktop\".\n. ",
    "Shahor": "I am considering using it for my project, but it's still at very early stages so I'll touch base again if I do :]\n. ",
    "geoffdutton": "I've started using it for this Electron project: DesktopLftp\nIt works quite well. I'm happy to answer any specifics as best I can.. Sounds good, I've gone ahead and removed them from the examples. Let me know if there's anything else I should change.. ",
    "denen99": "@geoffdutton how do you conditionally include macOS vs Windows components ?  I noticed you are including the macOS ones, but what happens when you build for windows? . @stdavis did you ever solve this ? Curious as well. . ",
    "zeke": "http://definitelytyped.org/\n. ",
    "erichiller": "@gabrielbull - Sure thing, having never written typing before and wanting to try to get this going I assembled a few good docs:\ntypings\ntypings overview\ntypings installation\nDefinitelyTyped is a central typings repository\ntypings for npm packages\ntypings generator\nfile structure best practices\ncreate typings - naming conventions\nCreating definition files (*.d.ts)\nGuide \nBest Practices\ncreate typings - naming conventions\n\nAlso, I started writing typings for react-desktop thinking it was the reason I couldn't get my NavMenu working, but it still didn't (called setstate() on an unmounted component) work (and my definitions are neither done nor guaranteed perfect).\nFor comparison/example, here are the typings for react-dom\n. No, unfortunately, I am still having the same issue. I am not sure on this one, is your gist from my typescript directly transpiled?\n. Here I've done one I transpiled into commonjs - one into es6 -- they look proper and nearly the same, but rather than maintaining the jsx syntax, it is replaced with the underlying javascript it would appear. (ala React.createElement( windows_1.NavPane, for <NavPane>. I can not see anything off here?\n. I figured this out on my side - it was user error - I was using it improperly, however it did cause me to write a lot more definitions for typescript - I will get these to you soon. Thanks - Eric\n. @gabrielbull Thanks! I did end up getting it running - the issue I'm having now is that this within the component is undefined or null.\nwindow.tsx:43 Uncaught TypeError: Cannot read property 'setState' of null\ntypescript source\n``` typescript\nimport * as React from 'react';\nimport { Window, TitleBar, Text } from 'react-desktop/windows';\nimport { Menu } from './menu';\nimport { CONFIG } from '../config';\nimport { elog } from '../lib/elog';\nimport electron = require(\"electron\");\nlet remote = electron.remote;\n//let BrowserWindow = remote.require('BrowserWindow'); \nexport const UIwindow = document.getElementsByTagName(\"app\")[0];\nexport { WindowFrame as UIlauncher };\nclass WindowFrame extends React.Component {\n    static defaultProps = {\n        color: '#cc7f29',\n        theme: 'light'\n    };\nstate = {\n    isMaximized: false\n}\n\nconstructor() {\n    super();\n}\n\nclose(){\n    elog('close window');\n    let window = remote.BrowserWindow.getFocusedWindow();\n    window.close();\n\n}\n\nminimize(){\n    elog('minimize window');\n    let window = remote.BrowserWindow.getFocusedWindow();\n    window.minimize();\n}\n\nmaximize(){\n    elog('minimize window');\n    let window = remote.BrowserWindow.getFocusedWindow();\n    window.maximize();\n}\n\ntoggleMaximize(){\n    elog('maximize window');\n    this.setState({ isMaximized: !this.state.isMaximized });\n    elog(`${this.state.isMaximized}`)\n}\n\n/*\n * Setting \n *  height\n *  width\n *  works in pixels not percentages\n * Not setting them causes them to expand to fit the entire body.\n * \n * Chrome being set (boolean) means there is a goldish border on focus\n /\n    render() {\n        return (\n            \n \n\nHELLO WORLD\n\n        );\n    }\n}\n```\ncompiled javascript:\njavascript\n\"use strict\";\nconst React = require('react');\nconst windows_1 = require('react-desktop/windows');\nconst menu_1 = require('./menu');\nconst config_1 = require('../config');\nconst elog_1 = require('../lib/elog');\nconst electron = require(\"electron\");\nlet remote = electron.remote;\n//let BrowserWindow = remote.require('BrowserWindow'); \nexports.UIwindow = document.getElementsByTagName(\"app\")[0];\nclass WindowFrame extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isMaximized: false\n        };\n    }\n    close() {\n        elog_1.elog('close window');\n        let window = remote.BrowserWindow.getFocusedWindow();\n        window.close();\n    }\n    minimize() {\n        elog_1.elog('minimize window');\n        let window = remote.BrowserWindow.getFocusedWindow();\n        window.minimize();\n    }\n    maximize() {\n        elog_1.elog('minimize window');\n        let window = remote.BrowserWindow.getFocusedWindow();\n        window.maximize();\n    }\n    toggleMaximize() {\n        elog_1.elog('maximize window');\n        this.setState({ isMaximized: !this.state.isMaximized });\n        elog_1.elog(`${this.state.isMaximized}`);\n    }\n    /**\n     * Setting\n     *  height\n     *  width\n     *  works in pixels not percentages\n     * Not setting them causes them to expand to fit the entire body.\n     *\n     * Chrome being set (boolean) means there is a goldish border on focus\n     */\n    render() {\n        return (React.createElement(windows_1.Window, {color: this.props.color, theme: this.props.theme, chrome: true, padding: \"12px\"}, React.createElement(windows_1.TitleBar, {title: config_1.CONFIG.Title, controls: true, isMaximized: this.state.isMaximized, theme: this.props.theme, background: this.props.color, onCloseClick: this.close, onMinimizeClick: this.minimize, onMaximizeClick: this.toggleMaximize, onRestoreDownClick: this.toggleMaximize}), React.createElement(menu_1.Menu, null), React.createElement(windows_1.Text, {color: this.props.theme === 'dark' ? 'white' : '#333'}, \"HELLO WORLD\")));\n    }\n}\nWindowFrame.defaultProps = {\n    color: '#cc7f29',\n    theme: 'light'\n};\nexports.UIlauncher = WindowFrame;\n//# sourceMappingURL=window.js.map\nDoes your javascript look the same as well? \n. ",
    "corysimmons": "thanks\n. ",
    "xgenvn": "This is just a basic boilerplate with some tweaks I mentioned above. Actually, the original repo suggests react-desktop for native looking, so I try to integrate into the sample project and there goes some UI issues.\nelectron-react-boilerplate.zip\n. Awesome! I have checked again and updated to last version, the issue is solved perfectly. Thank you.\n. ",
    "holgersindbaek": "@erichiller @gabrielbull Where exactly are you calling \"WindowFrame\" from? . Ok. I might do something. Thanks for the quick answer.. ",
    "sbekrin": "@gabrielbull Sadly I don't. I know only few cases when two different icons should be used for regular and retina icons (like playlist icon in iTunes). Aligned to pixel grid vector icons looks great when zoomed, so no extra 2x icon is required.\nZoomed version of new icons:\n\n. Did't know that! Thanks.\n. ",
    "luayalshawi": "```\n        \n```\nCurrently I am getting the value by having id as a prop then I can use the following line to get the input value:\ndocument.getElementById('thisInput').getElementsByTagName('input')[0].value)\n. Thanks. ",
    "steamIngenius": "Thanks for your quick attention to this!\n. ",
    "jaloo555": "Issue still seems to occur with react-desktop/windows?\nmy code\n```\n\n```. ",
    "fa7ad": "bump?! :worried: . ",
    "obedm503": "maybe because you forgot the $ in the template string?\n``` js\nconst platform = (process.platform === 'win32') ? 'windows' : 'macOs';\nimport { Window, TitleBar, Text } from react-desktop/${platform}\n```\nnot sure tho\n. so does 'react-desktop' decicide what to import or does it import both versions of the module for us to decide?. ",
    "stdavis": "Good catch. I'm still getting used to template strings and have updated my code. However, it didn't make any difference. :(\n. Nope. Let me know if you find anything.. ",
    "bushidocodes": "I'm not sure if this was resolved, but I'm currently hitting the same issue. Quite possibly user error. I'm experiencing the issue with all of my TextInputs, but I've snipped just one below to try to be concise. When I look at the Elements tab in devtools, it looks like all of the s are being redrawn when onChange is triggered on any single .\nContainer\n```jsx\n// @flow\nimport { connect } from 'react-redux';\nimport ConfigForm from '../components/ConfigForm';\nimport { setHostName, setFtpPort, setFtpUserName, setFtpPassword } from '../actions/configForm.js';\n...\nfunction mapStateToProps(state) {\n  return {\n...\n    ftpPassword: state.config.ftpPassword,\n...\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n...\n    setFtpPassword: (ftpPassword) => dispatch(setFtpPassword(ftpPassword)),\n...\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigForm);\n```\nComponent\n```jsx\nexport default function (props) {\n  let ftpPassword = props.ftpPassword;\n  const setFtpPassword = props.setFtpPassword;\nreturn (\n    \n...\n       setFtpPassword(evt.target.value)}\n        />\n...\n\n  );\n}\n```. After experimenting a bit more, the behavior happens when the height shrinks to try to fit all of the items on screen. When the height isn't compressed to fit in an area without overflowing, it is working fine.. ",
    "tgds": "Hi @gabrielbull, the background helper in the render function is the problem. On each call it creates BackgroundElement class, and then returns <BackgroundElement/>;. Because of that, on each value prop change, a new component is created and rendered => input element is completely redrawn and looses focus. styleHelper is doing the same thing and this is all very expensive and needs to be rewritten.\njsx\n    const input = (\n      <PlaceholderStyle placeholderStyle={this.placeholderStyle}>\n        {Background(\n          <input\n            ref=\"element\"\n            type={`${password ? 'password' : 'text'}`}\n            style={componentStyle}\n            {...props}\n          />,\n          this.props\n        )}\n      </PlaceholderStyle>\n    );\n. Thanks @gabrielbull. I could give it a shot contribute back as I currently need a library like this for a new project. Will send PR over the weekend.. ",
    "drew-wallace": "Nevermind. I missed something.. ",
    "AndrewKralovec": "I have yet to determine the cause, but just posting what i have seen thus far before i sign off for the day \nThe span style is defined here: \n\\NavPane\\windows\\Pane\\style\\windows10.js\nThe padding is defined in NavItem props and passed to Title using the StyleRoot.\nThis is where the span is, but as we can see the props are not being passed. \nWe could just pass the padding as another props to Title and see if that resolves the issue. That could tell us if its a style inheritance issue. \n(https://github.com/FormidableLabs/radium/tree/master/docs/api#styleroot-component). \n. @marcinkurek , Everything is open for PR. @ChannelJuanNews , is there a specific component you are having problems changing the color to? \nExamples of coloring \nButton:\n```\nimport React, { Component } from 'react';\nimport { Button } from 'react-desktop/windows';\nexport default class extends Component {\n  static defaultProps = {\n    color: '#cc7f29'\n  };\nrender() {\n    return (\n       console.log('Clicked!')}>\n        Press me!\n      \n    );\n  }\n}\n```\nWindow\n```\nimport React, { Component } from 'react';\nimport { Window, TitleBar, Text } from 'react-desktop/windows';\nexport default class extends Component {\n  static defaultProps = {\n    color: '#cc7f29',\n    theme: 'light'\n  };\nrender() {\n    return (\n      \n\nHello World\n\n    );\n  }\n}\n```\n. I can take this one.\nOriginally i was going to implement our color logic from the windows button. However, apple is very particle about their colors schemes (also evident in all our Windows components). So instead I'm thinking we create a map of the of the avilable colors options found here , Colors. \n@gabrielbull , are we basing the masOS colors off a source, or what we view from the applications themselves? \nFor example, the current blue style defines colors for the borders that I cant seem to find defined anywhere online. I took at stab at making the color pink, based on how the colors we defined on the blue class, but I'm not sure how to verify the color scheme for the top,bottom, etc, styles. \n```\n  blue: {\n    backgroundImage: '-webkit-linear-gradient(top, #6cb3fa 0%, #087eff 100%)',\n    borderTopColor: '#4ca2f9',\n    borderBottomColor: '#015cff',\n    borderLeftColor: '#267ffc',\n    borderRightColor: '#267ffc',\n    color: 'rgba(255, 255, 255, .9)',\n':active': {\n  backgroundImage: '-webkit-linear-gradient(top, #4c98fe 0%, #0564e3 100%)',\n  borderTopColor: '#247fff',\n  borderBottomColor: '#003ddb',\n  borderLeftColor: '#125eed',\n  borderRightColor: '#125eed',\n  color: 'rgba(255, 255, 255, .9  )'\n}\n\n},\n  pink: {\n    backgroundImage: '-webkit-linear-gradient(top, #FF365D 0%, #fc0030 100%)',\n    borderTopColor: '#ff4a53',\n    borderBottomColor: '#ff0031',\n    borderLeftColor: '#ff2852',\n    borderRightColor: '#ff2852',\n    color: 'rgba(255, 255, 255, .9)',\n    ':active': {\n      backgroundImage: '-webkit-linear-gradient(top, #ff2d55 0%, #ff0030 100%)',\n      borderTopColor: '#ff4053',\n      borderBottomColor: '#ce0026',\n      borderLeftColor: '#ed1141',\n      borderRightColor: '#ed1141',\n      color: 'rgba(255, 255, 255, .9)',\n    },\n    ...\n```\n. As mentioned in issue-129 , lets keep mind theming for the two operating systems. \nhttps://www.styled-components.com/docs/advanced\n. Yeah, \nI see that defaultChecked is passed in as a prop, but then it is read into checked in the Checkbox state. \nSo that value is really just for initialization. \n```\nconstructor(props) {\n    super();\n    this.state = {\n      checked: !!props.defaultChecked === true,\n      transition: true\n    };\n  }\n....\n  onChange = evet => {\n    this.setState({ checked: event.target.checked });\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n  };\n....\n\n```\n@gabrielbull , to resolve this,  what if we created a CheckBoxBase component. This component would be a styled-component with the current UI/styling as CheckBox, but having all the logic moved to props, so that the user can extent the CheckBox as they see fit. \nIn this case, the user could have used the CheckBoxBase  component, and passed the parent state values ( isCheckedTerminal, isCheckedHistory), as props so that the values are bound to the parent state, instead of the child state. The parent state can then be updated , and those values would then trigger the desired logic. \nex:\n``\nconst CheckBox = styled.input.attrs({ type: checkbox })\n  WebkitUserSelect: none;\n  userSelect: none;\n  WebkitAppearance: none;\n  appearance: none;\n  borderWidth: 1px;\n  borderStyle: solid;\n  borderColor: #b8b8b8;\n  borderRadius: 3px;\n  backgroundColor: #ffffff;\n  padding: 6px;\n  margin: 0 1px;\n  boxShadow: inset 0 1px 0 0 rgba(224; 224; 224; .4);\n  transition: all 0.4s;\n:focus {\n    outline: none;\n  }\n...\n`\n \n```. ",
    "Andrew1431": "I hope you figured it out in the 5 months it's been since you asked, but if not, just use state to determine the selected box / use refs to reference the react components.. ",
    "cnexans": "Is this open for PR? :). ",
    "reinhart1010": "In addition, here's what the font stack might be\nBased on similarity with Arial and Helvetica (good for using macOS application styles)\nfont-family: -apple-system, BlinkMacSystemFont, \"Helvetica Neue\", HelveticaNeue, Roboto, \"TeX Gyre Heros\", TeXGyreHeros, FreeSans, \"Nimbus Sans L\", \"Liberation Sans\", Arimo, Helvetica, Arial, sans-serif;\nBased on http://www.grputland.com/2013/11/multiplatform-helvetica-like-font-stack.html with few additions.\nHere's a breakdown of this font stack:\n+ Mac OS X 10.11 \"El Capitan\" and above will use San Fransisco system font.\n+ Mac OS X 10.10 \"Yosemite\" will use Helvetica Neue system font.\n+ Here, Roboto is prioritised as it offers multiple weights and similarity to Apple's San Fransisco font. Roboto will be used when the app includes its webfont or Windows and Linux users installed this font to their computers.\n+ Helvetica lookalikes, i.e. TeX Gyre Heros, GNU FreeSans and Nimbus Sans L are common to Linux users, but only have 2 styles: regular and bold. These fonts will be used when one of their webfonts are included or installed to computers, and in most Linux users.\n+ Liberation Sans and Arial are designed as alternatives to Arial, which Liberation Sans are common to LibreOffice, an open-source office suite. However, Arimo is common to Google's Chrome OS (alongside Roboto).\n+ Older versions of Mac OS X will use Helvetica. I do not recommend Lucida Grande (system font) as their metrics do not match with Apple's San Fransisco and Helvetica Neue.\n+ At last, Windows users will use Arial.. ",
    "marcinkurek": "Thanks. Just wanted to confirm before I spend time on it.. ",
    "okonet": "Unfortunately some unrelated tests are failing :(. Hey @gabrielbull! I'll try to do my best but maintaining one more project is off the table since I'm also fighting for me free time now.. By saying that I mean I wouldn't not take over it but I could be involved in some discussions. So up to you if you want to invite me as a member or not :). ",
    "ChannelJuanNews": "+1 anyone? lol . ",
    "Bunkerbewohner": "On second thought this seems unnecessary since you can just import from react-desktop/src/titleBar/[windows|mac]/controls/controls. So, nevermind!. ",
    "bedeho": "Yes, that is correct. I also tried looking at it on a separate computer with another screen, and it gives a similar bad quality result.\nI have tried to look into the component, but it was very complicated to figure out.. ",
    "aarjae": "Okay :). ",
    "alacroix": "@gabrielbull Glad I helped :) I will take as next task \"Capitalize file names for components (window.js -> Window.js)\". And after, maybe Jest as tests or switch to better style management like Styled-components or Emotion. I used styled-components for about 9 months now, I'm pretty convinced of the utility of CSS-in-JS. Writing pure SASS makes us lose a huge amount of flexibility.\nWhen you say \"missing features\" about emotion @yordis, do you have more details? All I can find on different issues is that both are pretty much the same, with emotion being more smaller and faster.. Let's go for styled-components then \ud83d\udc4d . @gabrielbull something like styled-system may fit our needs? Seems pretty cool to use with styled-components. (Never used it before though). Merci \ud83d\ude04 . @gabrielbull, sure! I'm on jest right now but when I'll resume my work on styled-components, i'll push what i've done \ud83d\udc4d . Fixed with 15c92fba7765a0a8077d6990d43a985da4ae5738. ",
    "yordis": "Between those,\nDefinitely styled-components.\nEmotion is fine as well but you will no have the same support and some missing features compare to styled-components.\nSASS, to be honest, I have almost a year without touching anything outside of JSCSS and unless I have to jump to something outside of React I will keep using styled-components or any other implementation of JSCSS. @alacroix https://github.com/emotion-js/emotion/issues/113#issuecomment-334955156. @gabrielbull also the version 3.1 is much faster than before https://twitter.com/mxstbr/status/957905553044463621. ",
    "bakhaa": "I can help with styled-components.. ",
    "davej": "Happy to review and merge PRs if anyone wants to make a start.. Added disableFullscreen option which will make the resize button default to the maximize mode instead of fullscreen. Using the option key will have no effect when fullscreen is disabled.\nUsage:\njsx\n<TitleBar\n  title=\"untitled text 5\"\n  controls\n  disableFullscreen\n/>\n\n. @gabrielbull Yes, sounds fine.. @gabrielbull: I've done a couple of PR merges and drafted a release. Could you look at doing a release? If you want to give me publish privileges then my npm username is also davej.. @gabrielbull Thanks \ud83d\udc4d . I could not reproduce this. Please provide a reproducible repository or CodeSandbox. Closing until repro is available.. Just tested this by the way and it works as described. I'll let @gabrielbull confirm that he's happy to merge.. Released in v0.3.8.. Fixed in #136.. Released in v0.3.8.. No plans AFAIK.\nPRs are accepted though if it's something that you wanted to work on.. Hi @langyo, I'm happy to review and merge a PR for you?. ",
    "98oktay": "Hi,\ntry this:\n<Text horizontalAlignment= 'center' color= 'white' style={{fontSize:'20px'}}>Photo</Text>. ",
    "sosunnyproject": "Yes this works! Thank you! . ",
    "gngeorgiev": "Maybe this can be documented? It's missing in the docs.. ",
    "aprilmintacpineda": "I found my answer at https://github.com/gabrielbull/react-desktop/issues/86. ",
    "YudiTan": "Yup! It exists. These are the steps to recreate this error: \n1) Start a new empty npm project with npm init, then \"npm install --save react react-dom next react-desktop\" \n2) Since i'm using next.js, i created a \"pages\" folder and have an \"index.js\" in that folder for the main \"/\" route. Then, I copied the example code from http://reactdesktop.js.org/docs/mac-os/window and this error is shown. I can probably try with create-react-app and see if the same error exists, but it may be a compatability issue with next.js?. So i created a brand new CRA and replaced App.js with the same codeblock from the website and the same error is shown \"./node_modules/react-desktop/macOs.js\nModule not found: /Users/yuditan/projects/personal_website/test/testapp/node_modules/react-desktop/src/Box/macOs/index.js does not match the corresponding path on disk box.\". Figured out -- the issue is with case sensitivity. For instance, i modified all the \"require\" statements in macOs.js such that the file paths (specifically, the folder names) match exactly to those in /src. For instance, instead of \"var _macOs = require(\"./src/Box/macOs\");\" , by changing it to \"var _macOs = require(\"./src/box/macOs\");\", fixes this error. However, there are simply too many instances where there is an inconsistency between the capitalization of the file path and the actual folder name. Is there a better way to deal with this?. 0.3.5 fixed the case sensitivity issues but there are some more bugs i found -- 1) i had to manually go to src/TitleBar/macOs/Controls and change the codes from \"window && window.devicePixelRatio > 1.5\" to \"this.window && this.window.devicePixelRatio > 1.5\" in order to resolve the new issues. Similarly for minimize.js and resize.js. \nOnce those issues were resolved, the components finally rendered, but there was still a bug that i'm unable to figure out. In the example code, the  component was supposed to be rendered inside the window box while the  component was supposed to be the title. And whenever i refresh the next.js server, every is displayed and mounted accurately, just like the example on the documentation website. However, after a split second, it automatically re-renders and things become messed up. I've attached a screenshot of how it looks like after the auto-refresh after a split second. The  component now resides in the title and the title can no longer be seen.\n\n. ",
    "haivp3010": "@gabrielbull OK I will look into it. ",
    "langyo": "If you need, I can help maintain the project, and I'll fix it myself.\n@gabrielbull . > Hi @langyo, I'm happy to review and merge a PR for you?\nYep, thanks!\nI'll remind you when I send PR.. ",
    "sappharx": "you seem to be testing for 'win' but the name of the test says 'works on Macintosh'\n. "
}