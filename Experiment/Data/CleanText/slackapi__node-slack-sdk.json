{
    "grantmd": "Yep, great idea. Added here: 4bf44ee947947dc886982bfc5feea6e288177296\nThanks!\n. Fixed by #6 ! Thank you both.\n. Yeah, I will! We're still playing catchup a bit from all the post-launch activity and trying to plan a new release. Thanks for all the help so far, we really appreciate it.\n. Released 1.2.2 with this in it. Did I do it right?\n. :+1: \n. ",
    "evansolomon": "That error event should probably be changed.  Standard Node behavior is to crash if an error event is emitted and doesn't have a listener.  A better way might be to try to reconnect and emit an error if that fails.  As it currently works, unless a consumer listens to the error (and itself doesn't exit) then the reconnect part will never run.\n. Good point.\nThe best way to do this is to add an npm prepublish script and npmignore the coffeescript files.  Checking in the compiled JS gets messy and is error prone, hooking it to publish makes it simpler.\nI'll leave the PR open but happy to do it if you want.\n. @grantmd want to take a look?  You're the owner of the package on NPM so you'll have to publish it for this to be useful anyway :)\n. @grantmd looks good to me\n. Nice find\n. Oh hi, sorry I never noticed this.  Thanks for adding tests.\nTwo nitpicks:\n1. Since you're upgrade the coffeescript dependency, can you use 1.8.0 (the latest)?\n2. The stubs variable in the test file isn't use, just kill it.\nOther than that it looks good to me.\n. I cleaned up the git history a bit and merged this in 9b454122951c5064624881de302f7f00f816e853\nThanks!\n. Any argument to channel.send is treated as text.\nTechnically you could send binary data over the websocket, but I the library doesn't really support it and I imagine it wouldn't show up on the other end in a useful way.\n. Sorry, I don't quite understand the example here.  Can you post more complete (ideally runnable) code?\n. Seems fine to me but from this comment it seems like maybe these specially-handled events are not meant to be public API's?  I'm not sure though, maybe one of the Slack guys can weigh in.\n. Makes sense.  I think it would actually be a good idea to support this for anything that ends up hitting _apiCall.\n. Here's a simple pass at exposing callbacks in anything that hits apiCall 92fcbf0e09768fc4d0344818b0082f3b4852e484\nIt's probably not the best solution in the world, but the API/behavior seems about right to me.\n. This was fixed in 7e7dac795bda4c39215b4334be21436c0bf1b334 but there hasn't been a new release yet\n. Pretty sure this is because the CoffeeScript isn't compiled and by default the example JavaScript file can't load it.  Can you try making the first line of code (before var Slack...) say require('coffee-script/register')?\nI think that should work.  Let me know, if so I'll update the example.\n(note: this is just an issue with the example, not with the actual package, because the CoffeeScript is compiled to JavaScript when it's published to npm)\n. Thanks.  I added that line to the example.\n. Is anyone using Node 08 these days?  I think I'd actually drop 0.8 support/testing, but someone from Slack should probably make that choice.\n. Bot users need to be invited to channels.  If you say @yourbotusername you will get a dialog to invite him/her/it.\n. Your coffeescript \"ternary\" is generally right in that you're using an if/else as an expression.  The maybe \"nicer\" way would be to one line it: result = if condition then truthyResult else falselyResult\nI'll leave a couple other comments on your commit with some more coffeescript tips (not that anything you did was wrong).\n. > Do you prefer I make a separate commit, or rebase onto this one?\nWhatever you like.\nI think it also makes sense to actually replace the JS version.  Having both in the source, especially when they're not actually the \"same\" code, seems confusing.  To do that it should be added to the grunt prepublish build step.\n. Let's not commit the compiled JS. It can be compiled by the same grunt task that handles the rest of the library. So the JS file should also be removed from Git and gitignored.\nLet me know if any of that doesn't make sense or if you want any help. \n. @jvelliott is this all ready to merge?\n. Thanks!\n. This PR looks a bit weird.  What commits were you trying to add?\n. I think that commit (actually all of these) are already in master.  Right?  Maybe I'm missing something though.\n. It's here\n. Channel#sendMessage takes a Message object, so I think you'd already have it.\n. I'm not sure.  Do you have any example code/error messages/etc?  I haven't personally use this feature, so I don't have much pre-existing knowledge.  What happens if you do something obvious like...\ncoffeescript\nchannel.sendMessage someMessage\nsomeMessage.updateMessage whatever\n. Are you sure you're supposed to pass strings to channel.sendMessage?\n. I have no specific experience but would guess it works like any other requests from behind the proxy. One difference may be that the client uses a web socket, not sure if that's the sort of thing that has to be explicitly whitelisted.\nAre you having trouble with it?  Any specific error messages?  Can you connect to other web socket servers (e.g. https://www.websocket.org/echo.html)?\n. In the StackOverflow example, they're making a request to an entirely different host.  Instead of https://x.com, they're requesting http://proxy:8080/x.com.  So I assume anything is going to require some configuration by the user since the library obviously can't know some other address to use.\nFrom a quick look at the Client class, it seems like two things might be a good start.\n1. Changing the host property of a client instance\n2. Allowing some way to prefix/customize the socketUrl\n. > The \"entirely different host\" is the proxy server\nYea, I got that.  Sorry if my comment about it was unclear.\nAs someone who never uses this sort of proxy, I don't really know enough to say exactly what the best way to do that is (my 2 steps above were a very rough guess of where one might start).  A PR for this feature would be cool :)\n. @nilsga you didn't sound rude at all!\n. @paulhammond can you make this version 1.4.1?\n. Can you explain this a bit more? In particular I'd be interested in how you measured memory usage and how quickly it increased. But really any information on what you did/what happened/what you expected would probably help make sure the problem you're describing is correctly reproducible.\nFwiw I tried a quick test with the code in the readme plus this:\n``` coffee\nstartedAt = Date.now()\ndumpMemoryUsage = () ->\n  console.log Math.round((Date.now() - startedAt) / 1000), process.memoryUsage()\nsetInterval dumpMemoryUsage, 1000\n```\nMy total heap size actually decreased after a few minutes \u00af_(\u30c4)/\u00af\n. If it caps out, I don't think think it's quite a \"leak\" in the usual sense. Whether 80-100mb is too much is hard to say. On one hand, sure it's just a web socket and some event listeners so what the hell is it doing with all those bytes. On the other hand, running a node program that is _just the piece of code I pasted above consumes something like 20mb of memory, which seems equally silly.\nIn my experience, node/v8 does not try particularly hard to be memory efficient. There are often good reasons for this, too. For example, in many use cases, more gc pauses are a worse problem than \"wasting\" memory. I am not familiar enough with the internals, but in my observations node often seems happy to burn a few tens of megabytes of memory usage in small programs running on systems with with plentiful memory available.\nSo I guess it's not totally clear to me that there's a memory leak here. Does that make sense?\n. Cool.\nNot to give you more work or anything, but an interesting comparison might be to leave open a program that's just connected to a websocket or something like that. There's a nice demo server provided by websocket.org (https://www.websocket.org/echo.html) that will respond with whatever you send it. A program that maintained a connection and periodically sent/received some data could be a useful baseline since that's sort of equivalent to what this library does. Just a thought.\n. I don't really have any specific thoughts myself. Whether 80 mb is very/too large seems like a matter of taste. If you have gigs of free memory I'd be inclined to say no big deal. If you're on a Raspberry Pi or something then maybe it's an important issue.\nDo you have some ideas to reduce memory usage? Going out and trying to find optimizations just to reduce this number doesn't seem very valuable to me unless there's some problem it's causing. Just my 2 cents.\n. You could do something like this as long as your logger conforms to the same (normal?) logging interface with info/debug/error/etc methods.\njs\nvar client = new Slack(...)\nclient.logger = yourOwnLogger\nclient.login()\nManually messing with instance variables like that probably isn't the greatest thing in the world, so maybe something like client.setLogger() or an argument in the constructor would be a little nicer. But it should be possible currently.\n. Can you give an example?\n. I'm trying to figure out how that overriding this behavior would be possible, even if you were trying to do it. I'd be very curious to see an example of how to reproduce that if you can come up with one.\n. It's not clear to me that this is the source of your problem, but one thing I noticed is that your inheritance setup looks a bit off. Usually when you use node's util.inherits you'd also have something like (in this case) EventEmitter.call(this) in your child class' constructor. I don't immediately see why that would be related, but figured I'd mention it. Also fwiw I don't immediately see how the Slack client is related either.\n. Are you maybe just forgetting to bind a function?\n``` js\nvar events = require('events')\nvar e = new events.EventEmitter()\nfunction C() {\n  this.a = 1\n}\nC.prototype.thing = function () {\n  console.log(this)\n}\nvar c = new C()\ne.on('wrong', c.thing)\ne.on('right', c.thing.bind(c))\ne.on('alsoright', function () {\n  c.thing()\n})\ne.emit('wrong')\n// logs the emitter instance\ne.emit('right')\n// logs the C instance\ne.emit('alsoright')\n// also logs the C instance\n``\n. Pretty sure [this](https://github.com/martindale/snarl/blob/bd50fbe2d31078749c59a237ceeb5109fb505312/lib/snarl.js#L80) unbound callback is your primary problem. If you replace it withself._interpret.bind(self)` I would expect it to work.\nI think you have a secondary problem in the way you're only partially handling the false-y case for self.triggers in _interpret.\n. Just a thought...\nThere are a bunch of these _on{{ApiMethod}} methods that just call the logger.  Not really bad but might be easier to just pass around the logger directly instead of a bunch of different methods that wrap it (unless there's some other purpose I'm missing).\n. Yea you definitely didn't start it here.  Not a big deal, just something I noticed.\n. If the request is going to be conditionally sent I think the logging should go in the same conditional.\n. There's a nice desctructuring syntax in cs: {type, ts, text} = message\n. This is probably getting on the verbose side for what I'd consider for a one liner.  It is correct, just might be a little more readable if it was split up.\n. You don't need this, CoffeeScript will handle the variable declaring for you.  This may actually throw a reference error at runtime, not sure though.\n. Would probably one line this one, channelName = if channel.is_channel then '#' else ''\n. Escaping double quotes is fine, or you can use multi-line strings and not have to.\ncoffeescript\nconsole.log \"\"\"\n  @#{slack.self.name} responded with \"#{response}\"\n\"\"\"\n. You don't need this unless the file is meant to be executable (which it probably shouldn't be).\n. Wrong extension.  Also probably simpler to compile this to JS and use node to run it (these instructions as is would also require having coffee-script globally installed).\n. :+1: \n. Not really.  You could leave it as a comprehension, you could do something like Object.keys(slack.channels).reduce(...), or you could stick .filter(Boolean) onto the end (I personally use this method a lot).\n. ",
    "dblandin": "Right now, the hubot-slack adapter will crash in a way that doesn't exit the process and leaves the program inert.\nSeems like the consumer (in this case the hubot-slack adapter) should be responsible for catching these errors that bubble up and retrying the operation or exiting to let the init system restart the process.\nDoes that sound about right? If so, I'll close this issue and open up another in the slackhq/hubot-slack repository.\n. Looks like you've already addressed this in slackhq/hubot-slack#112.\n. Addressed with slackhq/hubot-slack#112 and slackhq/hubot-slack#121.\n. ",
    "jasford": "@evansolomon #6 works great for me and is a better solution. Thanks!\n. I'm having this same issue. My bot stays connected for hours, sometimes days, then disconnects. It does not seem to be throwing any errors. I'm running on a t1.micro instance on AWS \u2013 so I should have a little more power than a raspi.\nI'm creating a new Slack client with new SlackClient(config.token, true, true) as part of a bigger Node app that does a few other things. My app does not die and continues to perform it's other duties, but the Slack client disconnects, cutting us off from interacting with the app via Slack. A restart always fixes the issue, forcing a reconnect.\n. I'm not using hubot-slack \u2013 just this node-slack-client directly. I just upgraded to the latest release though and will see if that helps. It will take a few days to know for sure...\n. ",
    "bobrik": "Logging in _apiCall could really help to figure out if Connecting... is actually happening.\n. This is really frustrating if hubot does deploys for qa :cry: \n. ",
    "ccoenen": "I have the same problem. Can i help debug it?\n[Sun Dec 28 2014 00:02:13 GMT+0100 (CET)] INFO Data for hubot brain retrieved from Redis\n[Sun Dec 28 2014 01:26:22 GMT+0100 (CET)] ERROR Last pong is too old: 12.156\n[Sun Dec 28 2014 01:26:22 GMT+0100 (CET)] INFO Reconnecting in 1000ms\n[Sun Dec 28 2014 01:26:22 GMT+0100 (CET)] INFO Slack client closed\n[Sun Dec 28 2014 01:26:23 GMT+0100 (CET)] INFO Attempting reconnect\n[Sun Dec 28 2014 01:26:23 GMT+0100 (CET)] INFO Connecting...\n[Sun Dec 28 2014 23:04:18 GMT+0100 (CET)] INFO Connecting...\n[Sun Dec 28 2014 23:04:19 GMT+0100 (CET)] INFO Logged in as [redacted], but not yet connected\n[Sun Dec 28 2014 23:04:20 GMT+0100 (CET)] INFO Slack client now connected\n[Sun Dec 28 2014 23:04:21 GMT+0100 (CET)] INFO Data for hubot brain retrieved from Redis\n[Mon Dec 29 2014 02:32:36 GMT+0100 (CET)] ERROR Last pong is too old: 15.235\n[Mon Dec 29 2014 02:32:37 GMT+0100 (CET)] INFO Reconnecting in 1000ms\n[Mon Dec 29 2014 02:32:37 GMT+0100 (CET)] INFO Slack client closed\nI put a few console.logs into ....slack-client/src/client.coffee:500 - i guess, this is what you referred to, right? clickable link to that location\nIf this turns something up, i'll get back to you.\n[edit] my log now looks like this:\n[Tue Dec 30 2014 00:53:40 GMT+0100 (CET)] INFO Connecting...\n_apiCall with  rtm.start { agent: 'node-slack' }\n_apiCall req ended regularly:  200\n[Tue Dec 30 2014 00:53:41 GMT+0100 (CET)] INFO Logged in as [redacted], but not yet connected\n(...)\n[Tue Dec 30 2014 00:53:42 GMT+0100 (CET)] INFO Data for hubot brain retrieved from Redis\n_apiCall with  channels.mark { channel: '[redacted]', ts: '1419897438.000015' }\n_apiCall req ended regularly:  200\n. This does not really help. It appears that the reconnect does in fact work, but my bot does not respond anymore:\n[Tue Dec 30 2014 00:53:42 GMT+0100 (CET)] INFO Data for hubot brain retrieved from Redis\n_apiCall with  channels.mark { channel: '[redacted]', ts: '1419897438.000015' }\n_apiCall req ended regularly:  200\n[Tue Dec 30 2014 05:19:23 GMT+0100 (CET)] ERROR Last pong is too old: 13.558\n[Tue Dec 30 2014 05:19:23 GMT+0100 (CET)] INFO Reconnecting in 1000ms\n[Tue Dec 30 2014 05:19:24 GMT+0100 (CET)] INFO Slack client closed\n[Tue Dec 30 2014 05:19:24 GMT+0100 (CET)] INFO Attempting reconnect\n[Tue Dec 30 2014 05:19:24 GMT+0100 (CET)] INFO Connecting...\n_apiCall with  rtm.start { agent: 'node-slack' }\n_apiCall req ended regularly:  200\n_apiCall with  channels.mark { channel: '[redacted]', ts: '1419926161.000017' }\n_apiCall req ended regularly:  200\nInteresting is, that the INFO Logged in as... is never printed. In the \"regular\" restart, it comes right after rtm.start. In the reconnect case, it does not print at all, it directly continues with the channels.mark. I'm not sure if this is important or not. If you could give me any pointers where to poke in next, i'd gladly go deeper.\n. Funny detail: The connection works alright: if i send messages, i can see a lot of channels.mark messages - so the bot does receive something. It just does not react anymore.\n. I'll try to catch the attention of @grantmd, maybe he has an idea how we can continue to debug this.\n. @jasford: i'm using it in a hubot installation, where i recently upgraded the intermediary layer (hubot-slack). For me, the problem is now much less of a hassle. Maybe that helps you find a workaround for you, too.\n. Yes, i realize that. I just meant, maybe you can copy their change over to your code.\n. possible duplicate of https://github.com/slackhq/node-slack-client/issues/5 - which has been unanswered for over a year :-(\n. ",
    "the-lay": "+1, has stumbled upon the same issue.\nLast logs:\n[Fri Dec 26 2014 23:28:46 GMT+0000 (UTC)] INFO Slack client now connected\n[Sun Dec 28 2014 03:17:38 GMT+0000 (UTC)] ERROR Last pong is too old: 14.915\n[Sun Dec 28 2014 03:17:38 GMT+0000 (UTC)] INFO Reconnecting in 1000ms\n[Sun Dec 28 2014 03:17:39 GMT+0000 (UTC)] INFO Attempting reconnect\n[Sun Dec 28 2014 03:17:39 GMT+0000 (UTC)] INFO Connecting...\n[Sun Dec 28 2014 03:17:47 GMT+0000 (UTC)] INFO Logged in as REDACTED of REDACTED, but not yet connected\n[Sun Dec 28 2014 03:17:47 GMT+0000 (UTC)] INFO Slack client closed\n. ",
    "nacyot": ":+1: \n. ",
    "sdhull": "Possibly related to https://github.com/slackhq/hubot-slack/issues/127 ? \n. ",
    "np0x": "running on a raspberrypi it takes a while to get through the startup routine.  Long enough that the 10,000ms time at startup is causing the hubot to die.\n[Thu Feb 12 2015 03:55:16 GMT+0000 (UTC)] INFO Connecting...\n[Thu Feb 12 2015 03:55:18 GMT+0000 (UTC)] INFO Logged in as hubot of **********, but not yet connected\n[Thu Feb 12 2015 03:55:19 GMT+0000 (UTC)] INFO Slack client now connected\n[Thu Feb 12 2015 03:55:43 GMT+0000 (UTC)] INFO Data for hubot brain retrieved from Redis\n[Thu Feb 12 2015 03:55:49 GMT+0000 (UTC)] INFO Using default redis on localhost:6379\n[Thu Feb 12 2015 03:55:50 GMT+0000 (UTC)] ERROR Last pong is too old: 11.059\n[Thu Feb 12 2015 03:55:50 GMT+0000 (UTC)] INFO Reconnecting in 1000ms\n[Thu Feb 12 2015 03:55:50 GMT+0000 (UTC)] INFO Slack client closed\nupdating the line 135 of client.js to:\nif ((_this._lastPong != null) && Date.now() - _this._lastPong > 30000) {\nallows my raspberrypi to startup hubot without any drama and stay running(output captured at debug log level)\n[Thu Feb 12 2015 04:27:31 GMT+0000 (UTC)] DEBUG Loading adapter slack\n[Thu Feb 12 2015 04:27:36 GMT+0000 (UTC)] INFO Connecting...\n[Thu Feb 12 2015 04:27:37 GMT+0000 (UTC)] INFO Logged in as hubot of **************, but not yet connected\n[Thu Feb 12 2015 04:27:38 GMT+0000 (UTC)] INFO Slack client now connected\n[Thu Feb 12 2015 04:27:38 GMT+0000 (UTC)] DEBUG Loading scripts from /myhubot/scripts\n[Thu Feb 12 2015 04:27:38 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/scripts/example.coffee\n[Thu Feb 12 2015 04:27:38 GMT+0000 (UTC)] DEBUG Loading scripts from /myhubot/src/scripts\n[Thu Feb 12 2015 04:27:38 GMT+0000 (UTC)] DEBUG Loading hubot-scripts from /myhubot/node_modules/hubot-scripts/src/scripts\n[Thu Feb 12 2015 04:27:38 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/ambush.coffee\n[Thu Feb 12 2015 04:27:40 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/asana.coffee\n[Thu Feb 12 2015 04:27:40 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/ascii.coffee\n[Thu Feb 12 2015 04:27:41 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/base64.coffee\n[Thu Feb 12 2015 04:27:41 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/dealwithit.coffee\n[Thu Feb 12 2015 04:27:41 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/demolition-man.coffee\n[Thu Feb 12 2015 04:27:44 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/devexcuse.coffee\n[Thu Feb 12 2015 04:27:44 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/geocodeme.coffee\n[Thu Feb 12 2015 04:27:45 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/insult.coffee\n[Thu Feb 12 2015 04:27:45 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/isup.coffee\n[Thu Feb 12 2015 04:27:45 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/lmgtfy.coffee\n[Thu Feb 12 2015 04:27:45 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/mindkiller.coffee\n[Thu Feb 12 2015 04:27:46 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/news.coffee\n[Thu Feb 12 2015 04:27:47 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/pomodoro.coffee\n[Thu Feb 12 2015 04:27:47 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/quote.coffee\n[Thu Feb 12 2015 04:27:49 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/redis-brain.coffee\n[Thu Feb 12 2015 04:27:50 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/reload.coffee\n[Thu Feb 12 2015 04:27:51 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/remind.coffee\n[Thu Feb 12 2015 04:27:54 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/sonos.coffee\n[Thu Feb 12 2015 04:27:54 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/spotify.coffee\n[Thu Feb 12 2015 04:27:54 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/stock.coffee\n[Thu Feb 12 2015 04:27:55 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/update.coffee\n[Thu Feb 12 2015 04:27:56 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/uptime.coffee\n[Thu Feb 12 2015 04:27:56 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/url.coffee\n[Thu Feb 12 2015 04:27:59 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-scripts/src/scripts/wikipedia.coffee\n[Thu Feb 12 2015 04:27:59 GMT+0000 (UTC)] DEBUG Successfully connected to Redis\n[Thu Feb 12 2015 04:27:59 GMT+0000 (UTC)] DEBUG Loading external-scripts from npm packages\n[Thu Feb 12 2015 04:28:02 GMT+0000 (UTC)] INFO Data for hubot brain retrieved from Redis\n[Thu Feb 12 2015 04:28:02 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-diagnostics/src/diagnostics.coffee\n[Thu Feb 12 2015 04:28:03 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-help/src/help.coffee\n[Thu Feb 12 2015 04:28:04 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-heroku-keepalive/src/heroku-keepalive.coffee\n[Thu Feb 12 2015 04:28:05 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-google-images/src/google-images.coffee\n[Thu Feb 12 2015 04:28:06 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-google-translate/src/google-translate.coffee\n[Thu Feb 12 2015 04:28:06 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-pugme/src/pugme.coffee\n[Thu Feb 12 2015 04:28:08 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-maps/src/maps.coffee\n[Thu Feb 12 2015 04:28:09 GMT+0000 (UTC)] INFO Using default redis on localhost:6379\n[Thu Feb 12 2015 04:28:09 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-redis-brain/src/redis-brain.coffee\n[Thu Feb 12 2015 04:28:10 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-rules/src/rules.coffee\n[Thu Feb 12 2015 04:28:10 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-shipit/src/shipit.coffee\n[Thu Feb 12 2015 04:28:10 GMT+0000 (UTC)] DEBUG Parsing help for /myhubot/node_modules/hubot-youtube/src/youtube.coffee\n[Thu Feb 12 2015 04:28:10 GMT+0000 (UTC)] DEBUG Successfully connected to Redis\n[Thu Feb 12 2015 04:28:10 GMT+0000 (UTC)] INFO Data for hubot brain retrieved from Redis\n. ",
    "jak": "I also ran into this issue when running hubot on a raspi - increasing the pong timeout allowed enough time for the startup. Would allowing a parameter to override the pong timeout be a suitable interim solution?\n. ",
    "ambikads": "I am trying to send messages to all the chat windows from a chat room and slack disconnects with this error message\n[Fri May 08 2015 15:08:27 GMT+0000 (UTC)] ERROR Last pong is too old: 21.788\n[Fri May 08 2015 15:08:27 GMT+0000 (UTC)] INFO Reconnecting in 1000ms\n[Fri May 08 2015 15:08:28 GMT+0000 (UTC)] INFO Slack client closed\n. ",
    "rubensayshi": "having same issue with node-slack-client :(\nMost of the time it just goes [Fri Jun 19 2015 11:55:28 GMT+0000 (UTC)] ERROR Last pong is too old: 11.226\nSometimes a Fri, 19 Jun 2015 11:55:28 GMT tipbot:user ERROR { [Error: socket hang up] code: 'ECONNRESET' } just before that.\nit reconnects fine, the open event is emitted again and it receives messages, but connected: false when debugging\nit seems to me the close from the ws should be handled to reconnect too?\nalso maybe the client state needs to be reset after a reconnect? something like; \nthis.channels = {};\n    this.dms = {};\n    this.groups = {};\n    this.users = {};\n    this.bots = {};\n. same, but that's no fun :P\n. ",
    "bbn": "same problem here. i have resorted to restarting the bot frequently.\n. ",
    "Nesurion": "Having the same issue. Hope this get's fixed soon. Restarting the bot every other day isn't really a solution.\n. @vanm I used your version in our bot for a few days now and it looked promising for a few days, but then we had two open sockets. ie. the bot would react with PONG PONG on a single ping message.\n2015-08-14 19:52:10.021 +0000 UTC ERROR Last pong is too old: 14.938\n2015-08-14 19:52:10.023 +0000 UTC INFO Reconnecting in 1000ms\n2015-08-14 19:52:11.023 +0000 UTC INFO Attempting reconnect\n2015-08-14 19:52:11.024 +0000 UTC Connecting...\n2015-08-14 19:52:11.171 +0000 UTC INFO Slack client closed, waiting for reconnect\n2015-08-14 19:52:15.947 +0000 UTC INFO Logged in as *** of ********, but not yet connected\n2015-08-14 19:52:27.269 +0000 UTC INFO Slack client now connected\nI don't see whats gone wrong here, but I hope the logs help. Ping if I can provide you with any more info or logs.\n. ",
    "ulion": "when the pong timeout, it call reconnect, but which should not do that if autoConnect is false.\n. reconnect is a bad function, which increase the sleep wait each time, and multiple calls to reconnect may cause more problem\n. There is other issue: each reconnect it sleep longer, I don't think things will go to better in this re-connect way for a long running app.\n. well, maybe it's not an issue, I do remember for some case it retry sleep longer each time, but I did checked code it did reset _connAttempts after ws open, so never mind, it's not a big problem.\n. ",
    "betzerra": "+1\n. ",
    "fordnox": "Same issue here:\n[Fri Jul 17 2015 23:48:32 GMT-0400 (EDT)] ERROR Last pong is too old: 14.756\n[Fri Jul 17 2015 23:48:32 GMT-0400 (EDT)] INFO Reconnecting in 1000ms\n[Fri Jul 17 2015 23:48:32 GMT-0400 (EDT)] INFO Slack client closed\n. ",
    "vanm": "I'd appreciate it if people tested #66 and posted their thoughts.  Adopting that branch would require you to abandon any explicit reconnect calls in Slack close events you may have set, as it shifts the reconnect responsibility into this Client.  \nIf you want to test this + some websocket upgrades and fixes, I've been using https://github.com/vanm/node-slack-client/tree/ws-and-team-migration-fixes in production.\n. Thanks @l12s!\n. Haven't experienced any issues caused by this version bump.  Been running in production since around mid-June.\n. Rebased with master and updated to ws 0.8.1. \n. @grantmd @paulhammond @evansolomon Any chance you guys can review this PR #54?  I've been logging this event and am seeing it regularly. Slack-client isn't reconnecting w/o this change.\n. @grantmd @paulhammond This should help clear up confusion around the module's npm presence.\n. In my testing, this proposed reconnect on close can result in multiple (duplicate) open websocket connections over time.  Seems like we need to dive in on the root cause of these \"silent\" websocket close events or make a more robust reconnect method.  Interested what other people find after trying this approach over a few days, too - for me, it always results in duplicate websockets after a few days.\n. I started debugging by using a forked version of this library that logs the error code + message from websocket close events.  See PR #61 \nThe websocket error code I'm seeing for these silent connection closed events is 1000, which maps to \"normal\" in the ws npm.  I was hoping for a more descriptive error code (for example, there are \"going away\" or \"protocol error\" codes), but I think the \"normal\" error code backs up how widespread this is and why it doesn't trigger any error handlers.\n. Right, I was mainly logging the error code for added context to the \"closed silently\" claim - I think the error codes back that up that there are no errors or specific websocket issues - it's just Slack closing the connection cleanly (for whatever reason).  I figured we'd tackle the \"Reconnect doesn't work\" claim in the other ticket #5 - but I agree with you, reconnect on close / error should be something this library handles.\n. @compulim Because the websocket close event emits a new close event on the Slack client itself.\nhttps://github.com/slackhq/node-slack-client/blob/master/src/client.coffee#L128\nIf you are calling reconnect in the slack client close handler, you are going to be calling websocket close again.  \nNow, if the websocket was actually terminated, there isn't an issue, because the readyState is 3 (CLOSED) and the .close() operation will be a no-op (there is a guard clause in the WS library).  No harm done and no subsequent websocket close or slack close events.\nHowever, if the websocket is still open, as it is in the case of \"Last Pong too old\" scenario, this will result in the current websocket being closed in multiple reconnects being called almost simultaneously.\n1. The reconnect triggered by the \"last pong too old\" will trigger a websocket close that in turn calls reconnect again, resulting in a login() call.\n2. The reconnect triggered by the \"last pong too old\" continues after that websocket close, calling login().\nThese simultaneous logins are the issue.  I think the slack client close event should be independent / not be relied upon to have the information necessary to trigger a reconnect and everything related to reconnect should be handled within the slack client itself.\nCheck out https://github.com/slackhq/node-slack-client/pull/66 and let me know what you think.\n. Rebased w/ master last week so this should be good to merge.  Unless there is a different preferred approach @l12s \n. Nice. Unrelated to your code, but something to keep in mind for the JSON examples is that the structure for reaction.item is totally different for file and file_comment types.  Specifically, you can't rely on item.channel or item.ts - in my experience, no channel information was included in file reaction item types.\nThese aren't perfect examples because they are from the \"list\" endpoint, but they demonstrate the different structures.   Just posting this because I got bit by it, not expecting other types to be missing channels.\n```\n  \"type\": \"file\",\n  \"file\": { ... },\n    \"reactions\": [\n       {\n         \"name\": \"thumbsup\",\n         \"count\": 1,\n         \"users\": [ \"U1\" ]\n       }\n    ]\n\"type\": \"file_comment\",\n  \"file\": { ... },\n  \"comment\": { ... },\n  \"reactions\": [\n    {\n      \"name\": \"facepalm\",\n      \"count\": 1034,\n      \"users\": [ \"U1\", \"U2\", \"U3\", \"U4\", \"U5\" ]\n    }\n  ]\n```\nhttps://api.slack.com/methods/reactions.list\n. #47 Fixes this, just needs to be merged. @grantmd @paulhammond \n. Agreed - this is definitely a short term patch.  I'm not a fan of tracking state as an instance variable between method calls and that wouldn't be required if the slack close event wasn't tightly bound to ws.close / or we had more expressive flow as you outlined above.\n. @ulion can you create a new Issue for your concern re: no limit on retries?  Agreed there should be a cap but trying to keep this branch contained to a reconnect patch.\n. OK, cool.\n. Thoughts @grantmd ?\n. @Nesurion Hmm, I don't see duplicate \"Slack client now connected\" log messages in your output.  The \"Slack client closed...\" right after Connecting is suspect.  I can step through the code again later this week to see if anything stands out, but if anyone else has ideas, please chime in.\n. I haven't seen any suspect duplicate connections.  @Nesurion did you run into any further issues?  I haven't had time to create a test for all of this library's reconnect behavior yet.  My advice is still to run this fork in a test environment and see if it results in an improvement for you.  In my experience this works fine to reconnect and I haven't seen any dups.\n. Thanks @l12s. :+1: \n. Thanks for bumping this.  I reviewed the PRs I created and rebased the ones that need it.  They are good to go:\n47 - Bump WS to latest\n48 - Remove a no-op\n54 - Handle team migration started\n61 - Basic pass through of error code and message\n66 - Fix reconnect / pong issues\ncc @l12s \n. :+1: thanks, Leah.  Excited to beta test the new client when it's ready.\n. @brunosiqueira You can listen for events that this library handles internally (and doesn't emit out) by attaching a general listener for \"raw_message\" - it emits every message (including noisy ping/pong cycle messages)\nhttps://github.com/slackhq/node-slack-client/blob/master/src/client.coffee#L345\nYou can also submit a PR to this library that does emit the event for consumers - see my example of doing this for team_migration_started: \nhttps://github.com/slackhq/node-slack-client/blob/master/src/client.coffee#L501\nHope that helps.\n. @brunosiqueira no problem.  The best path forward is:\n- Use \"raw_message\" in the current published version of this library and check for \"type\" in your production code i (it will work just fine).\n- Submit a pull request to this repo slack/node-slack-client to include new emitters for those events and ping @l12s for review & merge (she is the maintainer).\nOtherwise, to use a git hash in production via npm you'll need to grunt coffee locally and commit the JS files (this is not ideal and is a short-term hack until your pull request is merged and published on npm, so I don't recommend it).\nSince raw_message works I think the best path is to listen to that and switch on type until your PR is merged.\n. @brunosiqueira we listen for an \"account_inactive\" error and that seems to do the trick.\njavascript\nslack.on 'error', (err) ->\n  if err && err is 'account_inactive'\n    # Handle inactive here...\n. @brunosiqueira re: the duplicate connections on reconnect(), I have a brute force (and hacky) approach to prevent that here: #66.  I think 2.0.0 aims to address this in a more comprehensive overhaul with tests but I haven't checked it out yet.\n. I did a hacky \"release\" just by generating the JS and committing it in this\nbranch. It's a bit outdated.\nhttps://github.com/vanm/node-slack-client/tree/ws-and-team-migration-fixes\nI think the best course of action is to use the beta as you are attempting\nbut you can always test this branch and see how it works for you.\nOn Thu, Jan 21, 2016 at 2:16 AM Bruno Siqueira notifications@github.com\nwrote:\n\nThank you, @vanm https://github.com/vanm ! But in the #93\nhttps://github.com/slackhq/node-slack-client/issues/93 issue we\ndiscussed how complex it is to install other options other than the central\nnpm repo for the slack-client due to the coffee script compiler. To test\nyour version shouldn't you have a release in your repo?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slackhq/node-slack-client/issues/99#issuecomment-173525622\n.\n. Check out\nhttps://github.com/peernohell/node-slack-client/commit/9ba870044c6083800f6129c4bd064b1ab99583c3\nOn Thu, Jan 21, 2016 at 2:02 AM Bruno Siqueira notifications@github.com\nwrote:\nHey guys,\nI'm trying to install the 2.0.0-beta1 version via npm install and it is\ngenerating a version not found error.\nWasn't suppose to be a release called 2.0.0-beta1?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slackhq/node-slack-client/issues/113.\n. \n",
    "l12s": "Ok, first off, I apologize for how long it's taken us to resolve these issues.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also includes substantially improved reconnection logic and handling, for both routine disconnects as well team_migration events and similar. I'll also be making sure to expedite fixes for any issues with reconnection logic in particular, as I know that's been a pain for folks in the past.\nSo, I'd suggest that the best way to resolve these issues is to upgrade to the latest version. If you have any problems in doing that, please create a new issue and I'll try and help you in there.\n. Ok, first off, I apologize for how long it's taken us to resolve this issue and that we didn't respond to the PR you submitted, less than :100: on our part\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also caches information on bots to the data store implementation.\nSo, I'd suggest that the best way to resolve these issues is to upgrade to the latest version. If you have any problems in doing that, please create a new issue and I'll try and help you in there.\n. The >= 2.0.0 release will now check this for you, so should be a little easier to use, you can see where it's doing that here\n. You can do this with Slash commands in some cases, check out the \"In Channel\" vs \"Ephemeral\" responses section of https://api.slack.com/slash-commands\nIf that's not what you're looking for, I'd suggest reaching out via our support channels as it's a core API feature request rather than the node client.\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIn particular, it also moves the in memory data store out to its own location in the code and moves away from having it be so tightly coupled to the user on the client. So, now instead of stripping properties, the user is only removed from the members array.\nThe model objects (Channel etc) are also decoupled from the client in the new implementation, so they are treated as wrappers around the underlying JSON and nothing else.\nThe combination of those two things should mean that the error you ran into in this issue should no longer occur in >= 2.0.0, so probably the best solution would be to update the client version.\n. Ok, first off, I apologize for how long it's taken us to resolve this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt decouples the model objects (channels and so forth) from the client layer, moving the send and sendMessage functionality onto the RTM client itself.\nHowever, the RTM client also doesn't support raw messages right now, so I've created an issue to track this: https://github.com/slackhq/node-slack-client/issues/138\n. I've merged in #52 which should clarify this. Thanks for your patience!\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nThat update doesn't include support for what you're describing here yet, but unfortunately deprecates your PR. I've created https://github.com/slackhq/node-slack-client/issues/140 to track the work required to make this happen.\n. Thanks, I'll check this out and confirm the upgrade looks good.\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also includes standardized event names as well as object refs to allow you to use them. They're documented in https://github.com/slackhq/node-slack-client/tree/master/lib/clients/events\nSo, I'd suggest that the best way to resolve this issues is to upgrade to the latest version. If you have any problems in doing that, please create a new issue and I'll try and help you in there.\n. I'm going to give a proper update on this soon, but we're working on doing some significant client refactoring that'll address this issue and more. I'll be putting together a full update and change log in the next week or so that'll talk to what that will look like.\nI appreciate your patience while we work on this!\n. Ok, first off, I apologize for how long it's taken us to resolve these issues.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also includes substantially improved reconnection logic and handling, for both routine disconnects as well team_migration_started events and similar. I'll also be making sure to expedite fixes for any issues with reconnection logic in particular, as I know that's been a pain for folks in the past.\nSo, I'd suggest that the best way to resolve this issue is to upgrade to the latest version. If you have any problems in doing that, please create a new issue and I'll try and help you in there.\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also includes substantially improved reconnection logic and handling, for both routine disconnects as well team_migration events and similar. I'll also be making sure to expedite fixes for any issues with reconnection logic in particular, as I know that's been a pain for folks in the past.\nSo, I'd suggest that the best way to resolve these issues is to upgrade to the latest version. If you have any problems in doing that, please create a new issue and I'll try and help you in there.\n. Can you link me to the hubot issue where that's discussed?\nRight now, you can upload files via something like:\nwebClient.files.upload({\n  file: ...,\n  channels: ['...'],\n});\nThe way the PR is currently structured would need to be changed around quite a bit, as the pattern of mixing the model objects with API actions (e.g. file.setComments) isn't one the >= 2.0.x client is going to support.\nSo, if the issue is the general one of getting an API call to use to upload files, that's pretty simple and I can add a full example to the /examples directory later today. If the richer support around file comments etc is needed, that'll take a while longer.\n. Gotcha. I'll write up a proper example this week. Thanks for the clarification.\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also provides much better handling for JSON parse errors\n. Ok, first off, I apologize for how long it's taken us to resolve this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nThat release now passes through all messages from the RTM API by default as well as providing handlers for reactions against objects in the in-memory data store. Hopefully that gives you what you need, but if not, please raise an issue or create a new PR.\n. Hi there,\nSo, I'm a little confused on this one. I'd have expected the item object to have a message property that looks like https://api.slack.com/events/message\nI'll try and take a look into what the response is early next week.\nLeah \n. Sorry, I'll take a look tomorrow!\n. Sorry about the delay in getting to this today. We're in the process of wrapping up a proposed refactor that would address this issue in a more fundamental way by separating the caching logic from the client layer, so you could do the work you're proposing above to get the message in an event handler.\nI'm hoping to wrap up that proposed refactor this weekend and have a changelog + commits ready for comments and review within a couple weeks. So, if you can wait a while, I'd suggest doing so.\n. Ok, first off, I apologize for how long it's taken us to resolve this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nThat release now passes through all messages from the RTM API by default as well as providing handlers for reactions against objects in the in-memory data store. Hopefully that gives you what you need, but if not, please raise an issue or create a new PR.\n. Not yet - my rough plan on this is to have the >= 2.0.x release out for 2-4 weeks to shake out any bugs and then work with botkit and hubot to transition them over. I'll create an issue to track that work.\n. Ok, first off, I apologize for how long it's taken us to resolve this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also moves the web API into a separate client, with individual function calls for addressing each of the API endpoints. That includes a channels.create method\n. Ok, first off, I apologize for how long it's taken us to address this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also refactors the way that the web API is handled, providing individual function calls for each API endpoint. In the case of the chat.postMessage call it also adds in an optional callback.\n. @vanm - we chatted about the update, so I'll save the full comment, but apologies for the fact we never got to this. The plan is for 2.0.0 to be a better experience for us as maintainers and everyone who's been generous enough with their time to commit too.\n. Ok, first off, I apologize for how long it's taken us to resolve this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also moves the web API into a separate client, with individual function calls for addressing each of the API endpoints. The fetch history functions for channels, groups etc now also support all parameters the web API does, for example channels.history\n. Hi,\nI'm not sure how to replicate this, when I try (using the latest release) with a blank string or random text as my token, I see logging to terminal like:\n[Mon Sep 28 2015 22:33:08 GMT-0700 (PDT)] INFO Connecting...\nError: invalid_auth\n[Mon Sep 28 2015 22:33:08 GMT-0700 (PDT)] INFO Reconnecting in 1000ms\n[Mon Sep 28 2015 22:33:09 GMT-0700 (PDT)] INFO Attempting reconnect\n... and the client continuously attempts to reconnect with an increasing backoff.\nCould you let me know what you did to get the error you're mentioning above to be thrown?\nThanks!\n. So, I think what you were seeing with this was an error event from the API. The line of code that was throwing the error was the client's handler for messages with type error.\nThis will be followed by any events that occurred between the call to rtm.start and the connection to the message server. If you're reconnecting after a network problem this initial set of events may include a response to the last message sent on a previous connection (with a reply_to) so a client can confirm that message was received.\nPer the docs:\nIf there was a problem connecting an error will be returned, including a descriptive error message:\n{\n    \"type\": \"error\",\n    \"error\": {\n        \"code\": 1,\n        \"msg\": \"Socket URL has expired\"\n    }\n}\nMy guess is that you were running into some issues with the old reconnection logic. You were likely being disconnected and then having some kind of problems getting re-authed - which was what the unspecified error was representing.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also includes substantially improved reconnection logic and handling, for both routine disconnects as well team_migration events and similar. I'll also be making sure to expedite fixes for any issues with reconnection logic in particular, as I know that's been a pain for folks in the past.\nSo, the best way to resolve this issue is probably to upgrade to the latest version. If you have any problems in doing that, please create a new issue and I'll try and help you in there. If you see this problem after updating, let me know and I can see what I can do.\n. @ghostsquad - thanks for answering this!\n. Would you mind giving me an example of what you'd like to do here? I don't quite understand why you can't do something like:\n``` js\nvar Team = require('./src/team');\n```\n... so I'm guessing I'm missing something in what you're trying to do?\n. You should be able to do require('slack-client/src/group'); I believe.\nI recognize it's not ideal and the general structure of the client is something we'll be looking into more going forwards. As part of that I'll define a clearer top level contract for what the module offers that can define a clearer way of doing this.\n. Closing this one for now - I'll drop you an update once we have a plan in place for how to work with this longer term.\n. Hey there, hope you're doing well.\nSorry for the fact we totally ignored this issue :(\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nThe handleWsError function on the new RTM client should now pass that error through for you.\n. Ok, first off, I apologize for how long it's taken us to resolve this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also moves the web API into a separate client, with individual function calls for addressing each of the API endpoints. That includes a channels.create method\n. Ok, first off, I apologize for how long it's taken us to resolve this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also move the web API into a separate client, with individual function calls for addressing each of the API endpoints. In the case of channels.history that function also supports passing in the inclusive and counts params.\n. Thanks! I'll pass that on to the folks who work on docs in our DevRel team to check out.\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nFor this particular issue, you should be able to create a client without attaching a memory data store. That way your bot will simply receive messages, but not attempt to cache the data from the team attached to it, which should reduce the overall memory footprint.\nSo, I'd suggest that the best way to resolve these issues is to upgrade to the latest version. If you have any problems in doing that, please create a new issue and I'll try and help you in there.\n. The default client doesn't create a memory data store, so likely something else is going on.\nCan you give me a sense of:\n- what size team are you attached to?\n- how long has the client been attached to that team?\n- what are you doing with the client, e.g. just listening to RTM events, sending messages etc.?\n. I'm not familiar with the Visual Studio TFS plugin, could you give me a sense of what it's doing in this context?\nI'm running memwatch-next on an RTM connection against a roughly 500 person team, so should have a sense of if there are any obvious memory leaks from that.\n. Thanks again @Everesty for that explanation.\nClosing this issue for now.\n. Hey there. The best place to get help on that is https://get.slack.help/hc/en-us\nThis repo is for the node client for the Slack APIs\n. Thanks - that's a great fix for now. We're looking into doing some re-design work on the client and I'll ensure that getting a better logging setup gets wrapped into the feature bucket for that\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also allows you to pass in your own logger function when you construct a client, for example:\n```\nvar RtmClient = require('slack-client').RtmClient;\nvar token = process.env.SLACK_API_TOKEN || '';\nvar rtm = new RtmClient(token, { logLevel: 'debug', logger: function() {} });\nrtm.start();\nrtm.on('message', function handleRtmMessage(message) {\n  console.log(message);\n});\n```\nSo, I'd suggest that the best way to resolve these issues is to upgrade to the latest version. If you have any problems in doing that, please create a new issue and I'll try and help you in there.\n. So, I'm not super familiar with the way that the new bot scopes work, so I'm going to ask one of the folks on our platform team to answer this PR.\nMy initial reaction is that there should be a safer way to do this than requiring users to give you tokens against their accounts.\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nIt also includes substantially improved reconnection logic and handling, for both routine disconnects as well team_migration events and similar. I'll also be making sure to expedite fixes for any issues with reconnection logic in particular, as I know that's been a pain for folks in the past.\nSo, I'd suggest that the best way to resolve this issue is to upgrade to the latest version. If you have any problems in doing that, please create a new issue and I'll try and help you in there.\n. Hi there,\nSorry about the delayed response.\nWe're actively working on improving our support for the opensource clients for the Slack API - we've recently added some really great folks to our DevRel and platform teams who are going to help push these forwards.\nFor node-slack there's a couple things going on:\n- I've refactored the existing client to bring it up to a point where it's easier to use, easier to maintain and easier to contribute to. You can see that work in my own repo here: https://github.com/l12s/node-slack-client. I'll be posting a note to this repo in the next couple days inviting folks to beta test the new client. It has major breaking changes, so it'll be released as a 2.0.0 release and under a new package name. My post to this repo's README will cover the reasoning behind that in more detail\n- I'm going to take a look at @vanm PRs above later today and see which of them I can quickly incorporate to spin a 1.5.0 release out to get you some short-term improvements while the 2.0.0 version is in beta\nWe know that the current progress on our open source clients isn't where it should be and really appreciate everyone who's using them to build cool apps and integrations. Thanks for your patience while we get organized around supporting them better and figuring out how to push them forwards faster and with fuller community involvement.\nLeah\n. Ok, I've merged in #47, #48, #54 and #61\nI'm going to update the changelog later today and update the package to a 1.5.0 version and push that to npm. My intention is that we then pause work on this version of the client while I wrap up the last couple of event handlers for the 2.0.0 version and get eyes on that code + some sample implementations written  for it to root out some of the bugs.\n. Ok, 1.5.0 update is prepped and should be on npm shortly.\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nI'm pretty certain that will resolve the issue you ran into. I'm fairly sure that the error you saw was due to the Channel object being constructed from a JSON object without the members property. The new client updates model objects when messages are received, rather than replacing them, so that the members property that was received during rtm.start will be retained. That means that the leave handler shouldn't error in this way going forwards.\n. What was the actual crash that happened here? I'm pretty sure that >= 2.0.0 won't have it anymore, but it would be great to know so I can check.\n. Thanks for the update. The new version decouples model objects from the clients, so this shouldn't be possible in the latest.\nGiven that, I'm going to archive this PR as I'd suggest the best way to address this is to update to >= 2.0.0. Apologies that it took us so long to respond to this PR originally.\n. Yes - essentially a ground up rewrite to get it to a place where it's easier to test, maintain and develop. We're going to try and follow semver pretty tightly going forwards, too, so you can follow the major / minor / patch bumps for details on this too.\nhttps://github.com/slackhq/node-slack-client/blob/master/CHANGELOG.md v2.0.0 entry has a TLDR on what's changed, but please open issues if you run into anything that's unclear and I'll either fix or add an item to the \"Migrating ...\" section in the README\n. Have you tested establishing an RTM connection via the websocket with this? \n. That doesn't return the Slack client context for me, instead giving:\n```\n\nsnarl.testContext();\n{ token: 'xoxp-xxx-xxx-xxx-xxx' }\n```\n\nWhat version of the client are you running?\n. How do you trigger that function? Is it listening for a string from within a slack client it's attached to?\n. Do you need to reconnect in the case of a team domain change or rename?\nOther than that, the new client should provide the behavior you're looking for as it'll pass the event through.\n. Ok, great. Closing this PR.\n. Ok, first off, I apologize for how long it's taken us to resolve this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nThat refactor moves the web API interface out to its own client, with separate functions for each of the API endpoints. That includes an endpoint for reactions.add which should allow you to do what you're looking for with this PR.\n. Ok, first off, I apologize for how long it's taken us to resolve this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nThat release now passes through all messages from the RTM API by default as well as providing handlers for reactions against objects in the in-memory data store. Hopefully that gives you what you need, but if not, please raise an issue or create a new PR.\n. I've added an issue to track this: https://github.com/slackhq/node-slack-client/issues/141\nTLDR is I'd like the >= 2.0.x release to be in use for at least 2-4 weeks to shake out any bugs and then I'll talk to the folks who are running other OSS projects (botkit, hubot etc.) about what a transition plan should look like.\n. Clients can send a typing indicator to indicate that the user is currently writing a message to send to a channel:\n{\n    \"id\": 1,\n    \"type\": \"typing\",\n    \"channel\": \"C024BE91L\"\n}\nThis can be sent on every key press in the chat input unless one has been sent in the last three seconds. Unless there is an error the server will not send a reply, but it will send a \"user_typing\" event to all team members in the channel.\n. Good question - let me ask our dev team and get back to you.\n. So, I think that >= 2.0.0 should resolve part of this issue. The RTM client in that release checks the error type if it's unable to connect.\nIf it's one of the unrecoverable errors it will disconnect, (passing an error message starting with unrecoverable failure...)[https://github.com/slackhq/node-slack-client/blob/03743068caa535f15a636da164953f402d1899c5/lib/clients/rtm/client.js#L224]\nThat's only helpful when you're reconnecting though. I'll look into what RTM events are sent if / when the bot is removed and see what the best way to handle the removal, aside from responding to the failure to rtm.start, should be.\n. There's a thread here that may solve your issues: https://github.com/nodejs/nan/issues/414\n. Closing for now - let me know if that link didn't help or if we can give you any more insight into how to install.\n. Do you know if this affects clients that aren't running ws server-side? 1.0.1 only supports node >0.12 and above, whereas the client is (currently) specced for >0.10, which gives me a little hesitation\n. Ok, first off, I apologize for how long it's taken us to resolve this issue.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nI meant to include the jump to ws >= 1.0.1 as part of the 2.0.0 release, but it slipped my mind, so I'll leave this PR open as a prompt to do so. The 2.0.0 release targets node >= 0.12, so my concern above isn't an issue anymore.\n. https://github.com/slackhq/node-slack-client/commit/88b504e73f25c3254e820488a769beaea0f2f320 fixes this\n. Thanks, will check this out today\n. Sorry for the delay on this, I got busy and then was on vacation for a week.\nI believe the above PR fixes this.\n. Closing this as it's been fixed in a previous PR - apologies for the bad README!\n. The intention was to support multiple teams on a single datastore. I'm not sure that I'm going to get to the work that's required to make that happen for the 2.0.0 release though. I'm going to put a milestone in for a 2.1.0 release and add this to it.\n. Sorry, let me re-open this one!\n. Ok, first off, I apologize for how long it's taken us to resolve this PR.\nI just pushed the 2.0.0 release for this library, which is a ground up refactor with the aim of building a lib that both Slack and our external contributors can easily work with and improve.\nThat refactors the web API out to a separate client, with function calls for each of the methods it supports. Those methods also have the full set of options you can pass documented in the docstring. In the case of link_names you can pass it in to both the postMessage and update functions to get the behavior you want.\n. Sorry, my bad.\nOnce we get the release done I'm going to script up the release process so that I stop missing things like this.\n. Fixed by updating the makeAPICall function to correctly handle opt params here: https://github.com/slackhq/node-slack-client/commit/8608ee3844233225d4c123ee5ff09619844d23e2\n. Yep, my bad - just released one.\n. I can't remember why I had this there. I think it was back when DMs were using the same object, so there could be cases where it would be empty.\nI've pushed a separate PR that ditches that logic, so closing this one.\n. Sounds good. I'll be updating the model logic to actually get JSON representations working properly at some point soon.\n. Thanks!\n. npm install slack-client@2.0.0-beta.5 --save is now a thing too\n. Looking at the old implementation now\n. Ok, so the old function did this:\ngetDMByName: (name) ->\n    for k of @dms\n      if @dms[k].name == name\n        return @dms[k]\nSo, as far as I can tell, this function didn't create a new DM when you call it. Can you explain a bit more by what you mean by it creating and updating in the client?\n. The commit above adds getDMByName back in. I'm not certain what you're asking on the other part though, so will wait to hear back before I close this issue.\n. Sorry, I didn't notice this PR! Totally my bad - given the somewhat painful merge / rebase given I've now brought 2.0.0 to master I'm going to create a separate commit with this change in - thanks for catching it!\n. Fixed by https://github.com/slackhq/node-slack-client/commit/bff52b93d131b64bbe07a8d437f200abfff0811e\n. shiny!\n. Yeah, the new model objects are designed to avoid being tightly coupled with the client, so they don't have things like send attached to them.\nYou have a couple options for this. The closest analogy to what the old client did would be to use the sendMessage function I just added to the RTM Client with this commit: https://github.com/slackhq/node-slack-client/commit/1231d83242cd1d762c19822820b7c059c622686a\nI'll push a new beta shortly, that'll wrap that + a few other changes for you to use.\n. Ok, you can now npm install slack-client@2.0.0-beta.8 and use the sendMessage function on the rtm client.\nJust make sure that the client has connected fully before you try - you can listen for it to emit the RTM_CONNECTION_OPENED event to be sure.\n. Thanks, this is actually pretty badly written by me. I'm going to update this so that it throws client events that make more sense. I'll update that so you get the actual Slack error passed back through when appropriate.\nWill link to that commit once I've written it.\n. See https://github.com/slackhq/node-slack-client/commit/65228f30662b964abae6c87ca9101e64ea8c0c11\n. 2.0.0-beta.8 has the fix for this + the other issue you reported to me directly. Let me know if that covers what you need and I'll close this PR.\nThanks,\nLeah\n. Ok, will take a look at what's happening.\n. Ok, I took a quick look at this.\nSo, two things:\n- the close event is now more specific and is ws_close or require('slack-client').EVENTS.CLIENT.RTM.WS_CLOSE\n- the callback you have to deal with the disconnection should be invoked much much less frequently as the reconnect behavior within the app has been made a lot more robust\nI need to do a few things in response I think:\n- make the events namespaces a bit less verbose\n- document the RTM client event lifecycle\n- add an event for \"we retried a whole bunch and things are still broken\", so your call what you want to do\n- add some logging to cover events in the RTM client\nThat's a moderately involved change, so I'll try and take a look this evening\n. https://github.com/slackhq/node-slack-client/commit/ef00728d948aeff940c821c38632cab39c2a249b addresses this.\nYou'll need to listen to the DISCONNECT event to get the behavior you used to have.\n. Yep, that makes a lot of sense.\nhttps://github.com/slackhq/node-slack-client/commit/24e5c96033632ac148f30364c03f89f66f69a46d adds this. I have some other PRs and issues to check out, so if there are some other small changes I'll batch them up and push out 2.0.2\n. I believe that call actually has a signature like:\njs\n/**\n * Lists all users in a Slack team.\n * @see {@link https://api.slack.com/methods/users.list|users.list}\n *\n * @param {?} optPresence Whether to include presence data in the output\n * @param {function} optCb Optional callback, if not using promises.\n */\nUsersFacet.prototype.list = function list(optPresence, optCb) {\n... so would take a boolean rather than an opts object there.\n. Given that the first arg is an opt, it should check the # of args passed, so I'm going to reopen this and add some logic to do that.\n. https://github.com/slackhq/node-slack-client/commit/2a13901b5e7d94bc154d05d89efd5a4d8cbe0d6f fixes this properly\n. I think I was actually confused on this one. I don't think you can pass a parse param to the RTM message send, but that you were referring to the chat.postMessage endpoint instead.\nSo, you can pass a parse param through the web client in the new version, see https://github.com/slackhq/node-slack-client/blob/master/lib/clients/web/facets/chat.js#L54\n. Correct. It was in an earlier version of the 2.0.0 rewrite but I removed it to focus down on what the change would do. Apparently I forgot to clean up some JSDoc though.\nI'll be adding promise support back in for 2.1.0 though.\n. Ok, so https://github.com/slackhq/node-slack-client/tree/add_promises adds in promise support for web API calls.\nQuestion for you - would you want to see results where the Slack API response looks like:\n{ok: false, error: \"blah\"}\n... go to the promise error handler or the then handler?\nMy inclination is to have those cases go to the then and have users have an if statement to pick the issue up.\n. @paulcbetts / @Everesty - agreed, that seems reasonable. I've updated the PR to reflect that.\nI need to update the RTM client so that it won't break if you create one with usePromises true, or default it to false, but this should be ready for use this weekend.\n. Yep, that sounds totally reasonable. I already have a check for if a callback was passed in, so I can just put the logic for creating promises there.\n. This is now fixed. I'll close this once I release the 2.1.0 version\n. Ok, quick response from me:\nOther libraries\nThe idea is to eventually support botkit and hubot-slack with this library. I wanted to have this in use for a little while before that though, to find any bugs / issues.\nEvent Wrapping\nI don't understand what you mean here. Can you explain a bit more about why you would wrap the client object here? The RTM client is a subclass of eventemmiter3 and as you show in your snippet, you can listen to events it emits directly.\nPromises\nThese are coming, see https://github.com/slackhq/node-slack-client/issues/139\nData access and helper functions\nThe new client breaks out the responsibility for storing information and managing connections into two objects:\n- the RTM client\n- the MemoryDataStore\nThe MemoryDataStore has the old methods like getChannelGroupOrDmByID and, if you attach one, will cache the rtm.start data.\nYou can attach that data-store by creating a client like:\njs\nvar rtm = new RtmClient(token, { logLevel: 'debug', dataStore: new MemoryDataStore() });\nrtm.start();\n... and then access the data-store like:\njs\nvar channel = rtm.dataStore. getChannelById(channeld);\nconsole.log(channel);\nAlso, one request: if you have further questions, could you create a new issue? This is intended to track the work that's involved in getting botkit etc. using this library, so isn't a great location for this conversation.\n. Yep, that's a totally fair point. Getting more docs in place is definitely something we need to work on.\n. Merged - thanks!\n. I'd suggest you check out:\n- https://github.com/slackhq/node-slack-client/blob/master/CHANGELOG.md\n- https://github.com/slackhq/node-slack-client/blob/master/README.md\n- https://github.com/slackhq/node-slack-client/tree/master/examples\nIf there are specific questions that you don't see answered in there that you'd like more detail on, please create another issue requesting docs for that area and I can write something up and add it to the README / examples directory.\n. For the general API, there's https://api.slack.com/methods\nThe individual methods in the web client facets also have JSDoc annotations that provide a similar level of detail. If you wanted, you could run a JSDoc generator over those? At some point we'll get to doing that on our side and have a github pages or similar location for it.\n. Closing this for now, let me know if there are specific documentation areas that you'd like to see addressed and I can see what I can do.\n. Hey there, I've updated the RTM client to also emit the rtm.start payload. You can see an example of how to capture that in the README: https://github.com/slackhq/node-slack-client/blob/master/README.md#capturing-the-rtmstart-payload\n. This is actually my bad. it should have been a function, but I forgot that and did a tidy-up commit at one point that switched off using the raw function like logger(level, item) to use logger.verbose(item) instead.\nI'll try and look at swapping that back so the JSDoc is correct tomorrow.\n. It's the way you access environment variables in node. You can also pass in a string in it's place.\nvar token = process.env.SLACK_API_TOKEN || ''; is equivalent to var token = '...';\n. Yep, what @Everesty highlights is also important. It's generally good practice to make sure your tokens / secrets etc are referenced in a way that means you won't accidentally check them in or otherwise expose them publicly.\nIn the examples, I did this by referencing an environment variable, but you could also try using a library like https://github.com/lorenwest/node-config\n. I assume that you're writing a bot, so I'd suggest checking out:\n- https://api.slack.com/bot-users (especially the \"Setting up your bot user\" section)\n- https://api.slack.com/tokens\n. Ok, well I'd start at the \"Writing an App\" page on the API site: https://api.slack.com/slack-apps\nThat has documentation and info on what's involved.\n. Can you give me a bit more context on what you're passing in as an app token and where you got that token from?\n. Which version of slack-client are you running?\n. Ok, so the below code snippet works for me:\n```\nvar RtmClient = require('slack-client').RtmClient;\nvar token = 'xoxp-12611402179-12617794258-14984632099-ccb7dd07db';\nvar rtm = new RtmClient(token, {logLevel: 'debug'});\nrtm.start();\n```\n(for reference, that token has been revoked, so won't work for you)\n. Could you send me the full stacktrace that you're getting? What I'm suggesting is that the error is probably somewhere else given that my sample code is working there.\n. When you see the [Error: invalid_array_arg] undefined error, is there any other context around it? Any other lines printed out etc?\nCould you also try accessing this URL https://slack.com/api/rtm.start?token=xoxp-xxx&pretty=1 (replacing xoxp-xxx with your token) and let me know what happens?\n. Is the token you're using not an oauth tester token? You can create them via https://api.slack.com/docs/oauth-test-tokens\n. Ok, do you mind sending me the token you're using via email to leah@slack-corp.com?\nYou can revoke it once I've figured out what the issue is\n. Ok, so your code snippet works for me. Would you mind trying the following:\nUpdate to the latest version of the client (2.0.4). This requires a package name change, so you'll do npm install @slack/client --save\nTry the following code:\njs\nvar RtmClient = require('@slack/client').RtmClient;\nvar token = 'xoxp-...';\nvar rtm = new RtmClient(token, {logLevel: 'debug'});\nrtm.start();\n... and let me know what happens?\n. Ok, great, glad that worked out. Have fun developing your app!\n. That's an amazing write-up - thanks so much @Everesty \nI've added a more specific issue to track documentation - https://github.com/slackhq/node-slack-client/issues/149 - which tracks getting useful JSDoc docs generated from the code. The existing output isn't especially helpful and is less useful than just reading the code itself.\n. Hey, sorry for the slow reply.\nThis is actually a deliberate decision - DM is interchangeable with IM in the documentation, and DM is the preferred term. So, I decided to use that instead of IM for the client. I get that the inconsistency is a bit confusing though and it's something we'll try and address with some better documentation.\nFor now though, I'm going to close this PR.\n. Do you want to get the default data store attached to the RTM client or pass in one that you'll create / configure yourself?\n. @Everesty - good catch, I play around with a version that I've set up with some defaults, so I was getting that mixed up with the actual implementation.\nI'll push a change to fix that JSDoc issue momentarily - thanks :)\n. Thanks, I'll take a look at what's happening this evening. I've seen this issue before with the way the requeue logic works, so it maybe a bug in the way that works.\n. Ok, I'm fairly sure that you hit a retry limit with the number of calls that you were making and that there's a bug in the way the current request retry logic works. I'm tweaking the way the retry logic works now.\n. Try using the 2.0.6 version and see if this still happens.\n. What is the function you've registered as created in your code snippet?\nrtm.on(RTM_EVENTS.CHANNEL_CREATED,created);//go do stuff with the channel\nweb.channels.create(U.username);\nThe crash you're seeing looks like it indicates that it's a null value. I'd check in your code to see whether it's getting nulled out anywhere.\n. You can look at the removeListener call on https://github.com/primus/eventemitter3\n. 2.0.6 is now available, which has this fix\n. You can use the proxiedRequestTransport to do this, see https://github.com/slackhq/node-slack-client/blob/master/lib/clients/transports/request.js\nAn example of doing this is:\nvar rtmClient = new RtmClient(token, { transport: proxiedRequestTransport } );\n. Hi there - the current version of the client should emit reaction_xxx messages.\nWe emit an event https://github.com/slackhq/node-slack-client/blob/master/lib/clients/rtm/client.js#L424 for every message type (bar the RTM_CLIENT_INTERNAL_EVENT_TYPES ones). So, you should be able to do:\nvar RTM_EVENTS = require('@slack/client').RTM_EVENTS;\nrtm.on(RTM_EVENTS.REACTION_ADDED, function() {\n  ...\n});\nOur docs really aren't great right now though, so if you wanted to add the updates you have to the example-rtm-client.js file, that'd be great.\n. Great - thanks!\n. Ok:\n- the API method you're looking for is channels.archive There isn't a way to permanently delete a channel via the API, but you can as a team admin, you can see the docs to do so here: https://get.slack.help/hc/en-us/articles/213185307-Deleting-a-channel\n- the link you were running into is in JSDoc format, which means you need to take the part to the left of the pipe character | The part after the pipe character is how the link will display when JSDoc is rendered\n- unarchive is the opposite of archiving; it would restore a channel that you've archived back to being usable again\n. Looking at this now.\n. Ok, thanks for that context @Everesty - I think I understand what the issue is.\nSo, two possible scenarios you'll want to have a message callback trigger on:\nFail\nthe websocket send fails, callback is called with the error object and a null response\nSuccess\nthe message succeeds and the websocket (quickly, but async from the send acknowledgement on the client socket) replies with a message that looks like:\njson\n{\n    \"reply_to\": 1,\n    \"type\": \"message\",\n    \"channel\": \"C0CHZA86Q\",\n    \"user\": \"U0CJ5PC7L\",\n    \"text\": \"test\",\n    \"ts\": \"1457305861.000002\"\n}\nThe failure case is currently handled, with the optCb function from sendMessage passed through. However, it's also treating the successful send of the message as equivalent to the success case.\nSo, I'm going to do two things:\n- add promise support to sendMessage + send, as a I forgot to when I added it to the web API\n- track any callback that's passed through and call it with the message object from the success case when that returns\n. Ok, the above PR should fix this for you. I'd appreciate some :eyes: on it if you have a moment to check it out.\nI'll add a couple tests for the new behavior too.\n. Ok, I have a question out to the folks who work on our websocket servers to clarify what the expected behavior here should be.\nDepending on how this should work, I have a couple thoughts on how to make the behavior work cleanly with this PR. I'll likely not be able to write a fix until mid-end of this week though, so will likely be somewhat delayed getting this out as a 2.2.0\n. I actually got a super quick reply, so I've added another commit that contains the logic for how I'd propose to address this.\n. That's actually an undocumented feature of the API. It returns the last known message when the connection first opens. That message will have a reply_to id set, although the id may not make any sense in the context of the local client, as it could be from a prior node process or from the web client if the user also has that open.\nSo, couple of options:\n- the client can simply ignore events with type message and a reply_to key (the simplest option)\n- the client can strip the reply_to and treat the last message as a regular message\n- the client can check to see if it has a message handler registered for that reply_to id and then fire it if it does (ultimately the correct solution)\nThe other issue that comes up with this is that the client needs to (and doesn't currently) deal with message reply callbacks when the connection is dropped. I have some thoughts on how to do that gracefully, but they're kind of incomplete right now.\n. I believe that it's a convenience for cases where the client loses connection while a message is pending.\nI'm going to implement option 2 and leave a TODO + create an issue to figure out the logic around managing handlers when the client disconnects / reconnects.\n. Thanks, I'm likely going to be a bit slow merging this as I'm slammed for time to work on the client this week. Will try and pick this up and have a think about what might be happening with the pong connections mid-week.\n. So, I spent some time thinking about this and I don't think that function actually makes any sense anymore.\nIt was something I translated directly from the old coffescript client, which may have been using an old enough version of ws when it started that the underlying ping / pong control frame back and forth wasn't automatic. At this point, it seems like all the standard node websocket libraries deal with that automatically, e.g. https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L830, so I can't figure out what value having a handler for the underlying websocket ping event gives us.\nSo, I'm going to remove that event handler for now. Note that the logic for handling the Ping / Pong exchange at the RTM level, as discussed in https://api.slack.com/rtm will still be there.\nhttps://github.com/slackhq/node-slack-client/commit/7f658e9971fd63b565c0aacc7dd32c7c1778fc16 does that work. I'll push out a 2.3.0-beta.1 release shortly. Would be great if you could try that out and see if it fixes things for you.\n. Ok, you can npm install @slack/client@2.3.0-beta.2 to get the version with that function removed.\nI'm going to close this PR - could you update https://github.com/slackhq/node-slack-client/issues/176 if you have issues with that beta release?\n. Which version of the client are you using?\nI'll check in with the folks who maintain our RTM API about whether there's a flat connection limit too.\n. Hi there, so you should only be able to create 16 connections from the same API token. Unfortunately, that's a general limit across all of Slack's RTM APIs - I'd suggest reaching out via Slack's general support channels if you want to ask about an exception to that.\n. #224 partially addresses this\n. Closing this. As I haven't heard back that there are issues with the beta release, I'm going to upgrade it to a full release.\n. Thanks for answering this!\n. Yep, my bad. Want to write up a quick PR to fix?\n. Thanks so much!\n. https://github.com/slackhq/node-slack-client/tree/1.5.0 is now a thing\nI'd be interested in chatting about what kind of upgrade path to future versions of the node-client you're thinking of. There's been a lot of work on handling reconnection logic since 1.4.1 and there'll be some additional features around that coming shortly as well.\n. 1.x is up at https://github.com/slackhq/node-slack-client/tree/1.x. I'll write up a response to the other questions this weekend.\n. Sorry about the slow reply, things have been super busy recently.\nSo, we have some folks using the new version of the client in production currently. I believe @acemtp at Talkus is doing so and may be able to give you some additional info.\nMy general feeling is that it should be ready to use at scale, but that it's ultimately your call on if it's suited for what your system is doing. That said, I'd really like to get more folks using this, so if you do go live with it, I'll try and be as responsive as I can be for any issues you see.\n. Sorry for letting this issue go for so long.\nDoes https://github.com/slackhq/node-slack-sdk/pull/229 fix this for you?\n. I merged the PR, but let me know if you want anything different\n. Thanks @Everesty!\n. Hey, sorry for the slow reply. I'm going to ask @DEGoodmanWilson to take a look at this\n. Ok, I think Don's busy, so I'll take a look. Apologies for the delay.\nIf you don't mind, I'd prefer to keep everything ES5 until we make the cutover in the code itself. Otherwise, looks great.\n. Thanks!\n. The reasoning here was that some folks were concerned about the amount of memory the client was using.\nI'll flip the behavior around so that if it's undefined you get one, but if it's falsy you don't\n. Fixed by #225\n. Hi there, I tried npm install @slack/client on a fresh laptop (no login to NPM, no slack creds) and it installed ok for me.\nMind retrying? \n. @DEGoodmanWilson - let's chat through this tomorrow / Friday?\n. By convention in the API we use opts style arguments for any optional argument to the API call, so you can do a file upload like:\n```\nvar opts = {\n  content: fs.readFileSync(filePath)\n};\nweb.files.upload('api_test.csv', opts, function(err, res) {\n  console.log(res);\n});\n```\nThe full arguments the opts arg takes are:\n* @param {Object=} opts\n * @param {?} opts.file - File contents via `multipart/form-data`. If omitting this parameter, you\n *   must submit `content`.\n * @param {?} opts.content - File contents via a POST variable. If omitting this parameter, you\n *   must provide a `file`.\n * @param {?} opts.filetype - A [file type](/types/file#file_types) identifier.\n * @param {?} opts.title - Title of file.\n * @param {?} opts.initial_comment - Initial comment to add to file.\n * @param {?} opts.channels - Comma-separated list of channel names or IDs where the file will be\n *   shared.\nNOTE: the above was written with the 3.0.0 version of the client, it's the same basic principle for 2.3.0, but I haven't looked at the old JSDoc there.\n. I'll add an example to the README of how to do a file upload in a sec and close this issue once I have.\n. Hey there, sorry for not replying. This seems pretty reasonable to me. I think that it makes most sense to have this return when RTM_CONNECTION_OPENED fires, so the socket is ready and has been acked.\nBasically, wrap all of the back and forth logic with the socket opening and hello events.\n. Hmm, so it's a little more complicated than I thought.\nThe issue is that with the auto-reconnect logic it's sort of unclear when the failure function should be invoked. Let me think about this a bit more.\n. Yep - that should definitely emit.\nRelated to #170 - I think the current retry policies are probably a bit aggressive - 5 minutes feels a little long. Thoughts?\n. https://github.com/slackhq/node-slack-sdk/pull/223 addresses the bad throw error\n. Thanks for contributing!\n. Looks great - thanks!\n. Hey, I couldn't replicate this on either the current client or the 2.3.0 client. Mind sending me a code snippet where you'd expect to see this happen?\nAlso, how are you changing your presence?\n. Thanks for the context, will take a look\n. Ok, and to confirm. You've used an API token for coder.swartz account to connect to the RTM API? I believe you should only see manual_presence_change when the user who manually changes their presence is the same as the user that connects to the RTM API stream.\n. Yep, I just checked this and you should only see manual_presence_change when you're connected as the user who's manually changing their presence. I'm going to close this issue, but please reopen if you're both connected as that user and not seeing the event.\n. Thanks for catching that!\n. Hi there, this repo is for the Node slack client, which is a library that allows you to connect to Slack's APIs in Node.\nI'd suggest checking out our (Help Center)[https://get.slack.help/hc/en-us] to get help on the mac client.\n. So, it should only fire when the user connected to the API joins a channel. So if you use your own token to connect to the API and then join a channel, you'd expect to see a channel_joined come through. channel_join is for the more general case of a team member joining a channel.\n. If what you mean is:\n- you connect to the RTM API as a bot user\n- as the same bot user you make a channels.join API call\n... you'd expect to see a channel_joined event come down over the RTM stream. If the users don't match, you'd expect to see a channel_join event instead.\n. Oof, this is a big oversight on my part - sorry about that :(\nThe codegen approach I'm using shouldn't have generated the DM facet in this case - it should be a synonym for the IM facet, which is updated per your suggestion. I'm going to close this PR and remove the DM facet and update it to be a link to the IM facet instead.\n. https://github.com/slackhq/node-slack-sdk/compare/fix_dm_facet?expand=1\n. You should only get channel_leave events when someone else leaves a channel.\nYour user should have received a channel_left event though, although I'm not 100% sure of the behavior when you're kicked by someone else. Mind checking your logs to see if you got that?\n. Ok, sounds good.\n. which version of the client are you running?\n. Thanks, oversight on my part. I'll do that and update the README.\n. Ok, fixed, thanks for catching this.\n. Thanks!\n. Awesome, thanks!\n. The PR above will fix this.\nIt should, in theory, be very hard to get to that state. Any extra info on how it happened?\n. I've been on vacation, so sorry about the slow response. Will check it out properly later this week - thanks!\n. Are we guaranteed that getting an error of the WS means that it's actually either closed or needs to be reopened?\n. Yep, this sounds great. The wrinkle here is that you'll also need to adjust the way the store is called from the RTM API, otherwise you can pass an event that the developer would expect to have cached data that's fetchable from the data store, but which is handled before the data store promise is resolved.\n. Nitpick, but if (user) {\n. Can you move the set outside the if block so it executes in either case? I'm going to be updating the way data stores function at some point so that a redis / memcache store could also be used.\n. This is the callback for the websocket's send function. The reason we don't call the callback for success here is that we're treating message success as being when the server responds to us with a message object containing a reply_to key and a ts key.\n. Can you give me an example of the calling code where you're not seeing the success cb fire? It was working for me in some simple tests, so not sure what's happening there...\n. What's the channel id value there? I'm wondering how the response handler will work if it's given information that couldn't work, e.g. a channel id that doesn't exist.\n. Ok, weirdly, it seems like it will default to posting to the general channel if you pass in an invalid or non-existent channel id, so my thought there doesn't seem to make sense.\n. Hmm, thanks. I think it may be a misunderstanding on my part about how the reply_to ack is handled. Looking into that now.\n. Yep, that'd be it. Thanks for catching this! I'm not sure where the message with message type of message I tested against came from...\n. I can work around the response not having a type. The thing that's confusing me right now is that I get a message with type message back from the RTM API with the contents of the message that I pushed, but only on reconnect.\nI'm going to chat to the folks who work on our websocket code tomorrow to try and understand what the correct behavior here should be.\n. ",
    "silentrob": "Sweet. I was just about to add this!\n. Rise of the bots! Looking forward to getting this working with SuperScript https://github.com/silentrob/superscript/issues/9\n. This is super useful. Just a side note, Bot users are not authorized to call this endpoint. \n(I know you know that. Just saying generally to anyone else wanting this.)\n. :beers: :+1: \n. @l12s is right, I was able to get it to work by sending a command directly to the private client method.\nvar Slack = require(\"slack-client\");\nvar slack = new Slack(token, true, true);\n// login dance \nslack._send({id: 1,\n  type: \"typing\",\n  channel: \"CHANNEL_ID\"\n});\nGood luck and reopen if you need any more help!\n. ",
    "guiceolin": "hey guys! just submitted a patch for this: #43 \n. ",
    "natesilva": "To clarify: This fix is needed because getChannelsWithUnreads is broken due to a bad assumption in the code about the CoffeeScript question mark operator.\n. ",
    "sukima": "Any word on this? Seems my scripts have broken also.\nFor those of us who's script depend on messaging a room there is a workaround that you could use till someone magically merges and releases this (seems that usually takes a long time)?\ncoffee\nchannel = channel.replace /^#/, \"\"\nrobot.messageRoom channel, \"my message\"\n. ",
    "yozlet": "Pinging @evansolomon & @grantmd - any chance of feedback or merge?\n. @evansolomon Sorry for the slow response - done!\n. ",
    "paulhammond": "Thanks for noticing this and pointing it out with an easy to reproduce bug report.\nI've done some digging internally about what went wrong here, and I've taken a slightly different approach to fixing it, which is in #19. We'll get that merged into the next release!\n. There isn't a way to update a message using the real time API, but the API token used by node-slack-client can also make calls to the web API, including the chat.update method. Take a look at the places in the code where @_client._apiCall appears for some examples!\n. I just realized you already implemented this in #14. Thanks!\n. I think #15 (along with some changes to the server documented in slackhq/hubot-slack#148) will fix this? Can you confirm?\n. star_added and star_removed are both documented, supported parts of our public API!\n. Oops, I just hit the merge button by mistake and messed up this pull request. I'm sorry about that!\nSO: while star_added and star_removed are both documented events, the code here only handled the case where a message was starred. But, other things can be starred in Slack too - including files, file comments, and channels.\nI'd love to merge a pull request that handles star_added or star_removed on any of these objects!\n. #27 is the follow up pull request\n. Nice! Thanks for sharing your code!\n. Actually, as of a few minutes ago, they are. As I mentioned over in slackhq/hubot-slack#148 this is provisional and might change but probably won't...\n.  We should probably do this everywhere instead of this one method.\nWe should also find a way to keep the internal callback and have it call the user specified callback if one is provided. Today the internal callback only does logging, but there's no guarantee that will be true in the future...\n. I like @evansolomon's approach, so I just merged it! I think it solves all of the needs people have brought up here...\n. This is not well documented on our side - but yes, the dms list contains a list of existing DM channels - which in almost all cases are created when the user DMs the bot.\nIf there's no existing channel and the bot would like to create a DM with a user it can call the im.open web API method. In fact, they could even call this method when there is an existing DM, it'll do the right thing.\nI'm closing this issue as I think you have all the information you need. If my description wasn't clear enough or I've missed something please feel free to reopen it!\n. Amazing! Please tell us (feedback@slack.com or @slackapi) when it's all working...\n. Hi! thanks for sharing this!\nUnfortunately some of the other changes we've just merged mean that we can't merge this as is. Would you mind updating so it's merge-able? While you're at it, you'll probably want to include the changes to add custom callbacks to your new functions (see #20 and #30 for details)\nI'm also not sure about the eventCamelName function - it means it's much harder to grep the code for where a particular function is called, and it doesn't improve the readability of the code. I think\n@emit @eventCamelName(message.type), f\nis more confusing than:\n@emit \"fileCreated\", f\nIf you can fix both I'd be happy to get this merged!\n. 1.4.0 was just released, fixing this bug.\n. We're ok with dropping it!\n. No, bots cannot join channels by themselves. This is something we're talking about changing in the future but we have no firm plans yet.\nWe're tracking that as a bug inside Slack, so I'm going to close this out here. We'll make an announcement on the SlackAPI twitter account if this situation changes...\n. Thanks for working through this - this updated version looks great (and sorry again for messing up your last pull request!)\n. A fair point - I was just copying the existing pattern. I'm open to other approaches here!\n. Good point, fixed in bdfb0fa60dabb09988e331a4aade2f6fb8cd9b36\n. ",
    "dcsan": "so channel.sendtMessage should send attachments but i haven't been able to get that to work via the web API either. is there a working example/json anywhere? I couldn't find.\nthis is what i'm sending:\n```\n{ type: 'message',\n  text: 'TEST MESSAGE',\n  icon_url: 'http://lorempixel.com/48/48/',\n  attachments: \n   [ { title: 'Title',\n       fallback: 'Title: testing right now!',\n       text: 'Testing right now!',\n       mrkdwn_in: [Object] } ],\n  token: 'xoxp-2662813184-3515663524-3515664302-b8a82e',\n  channel: 'C03F38ZCN' }\nIgnoring... { id: 1,\n  type: 'message',\n  channel: 'C03F38ZCN',\n  text: 'TEST MESSAGE' }\npostMessage result: { ok: true, channel: 'C03F38ZCN', ts: '1422399323.000004' } \n```\nand what i see:\n\nis there a different type: 'message',  ?\n. here's the method which sends the JSON above.\nslack._apiCall\nis a method in your lib.\n``` js\nfunction testAttachment(channel) {\nvar att2 = {\n    \"title\": \"Title\",\n    \"fallback\": \"Title: testing right now!\",\n    \"text\": \"Testing right now!\",\n\"mrkdwn_in\": [\"text\", \"title\", \"fallback\"]\n\n}\nmsgpack = {\n    type: \"message\",\n    text: \"TEST MESSAGE\",\n    icon_url: \"http://lorempixel.com/48/48/\",\n    attachments: [att2]\n  }\nmsgpack.token = token\n  msgpack.channel = channel.id\nconsole.log(\"msgpack\", msgpack);\n  slack._apiCall(\"chat.postMessage\", msgpack, function(err, res){\n    console.error(\"postMessage result:\", err, res)\n  })\n}\n```\n. ",
    "podviaznikov": "I think I'm having the same problem.\nI was able to send attachments before using Incoming Webhook functionality, but can't do it with Web API.\nShould\n```\n{\n    \"fallback\": \"Required plain-text summary of the attachment.\",\n\"color\": \"#36a64f\",\n\n\"pretext\": \"Optional text that appears above the attachment block\",\n\n\"author_name\": \"Bobby Tables\",\n\"author_link\": \"http://flickr.com/bobby/\",\n\"author_icon\": \"http://flickr.com/icons/bobby.jpg\",\n\n\"title\": \"Slack API Documentation\",\n\"title_link\": \"https://api.slack.com/\",\n\n\"text\": \"Optional text that appears within the attachment\",\n\n\"fields\": [\n    {\n        \"title\": \"Priority\",\n        \"value\": \"High\",\n        \"short\": false\n    }\n],\n\n\"image_url\": \"http://my-website.com/path/to/image.jpg\"\n\n}\n```\nfrom https://api.slack.com/docs/attachments work with Web API?\n. Does anyone know when this will be fixed? And https://github.com/slackhq/hubot-slack/pull/148 to be merged.\n. ",
    "bobalazek": "Any news on this? Seems that it still doesn't work on the Web API.\n. I found out, what the problem was / is. You NEED to JSON encode the 'attachments' argument, so the 'attachments' is actually a string and not an object. Then it should work. At least for me that worked.\n. ",
    "mmattax": "I ran into this as well. Attachments do not work when using the web api (though I'm not even using the node client, I'm making a raw curl request), switching to an incoming webhook made the attachments appear. \nSomething is broken at a lower level than the client. Hope it gets fixed.\n. ",
    "jkresner": "@bobalazek stringifying worked thanks. Pretty peculiar solution :)\n. Perhaps mention in the readme. Or rename the repo. There are so many node-slack, slack-node alternatives could help!\n. ",
    "jtatum": "What if _apiCall took two callback parameters? Or an array of callbacks?\n. Updated Travis build at https://travis-ci.org/jtatum/node-slack-client/builds/51156823\n. The list of methods available to bot users is at the bottom of: https://api.slack.com/bot-users. Not sure why channel.join is prohibited to bots...\n. One could argue that it's part of the slack security model. Because bots may not be trusted (e.g. a third party app), allowing them to join any channel (even public) and read history is not desirable.. Not sure if this belongs here, but there was something I was going to poke at the sample code about. There are a variety of things that will crash the javascript sample, like deleting a message. Some 'message' subtypes have no user or text associated with them so the console.log throws.\n. The requests library has a bunch of code for proxy support and might be a good place to find inspiration. It's a little surprising the functionality isn't built into node. https://github.com/request/request\n. There is not. Sometimes you appear to see slackbot doing something like that, but it is a client-side response to errors and other events received, not slackbot actually sending you a message that only you can see.\n. Is this a typo? Calling onStarRemoved when star_added is emitted?\n. ",
    "sillygwailo": "I definitely want user-specified callbacks on anything that's an API call, channel.send() in particular. \n. Typo fixed. Now that I test it again, Slack's API isn't sending me 'star_added' or 'star_removed' events in my test app. Hmm.\n. I think I have it now. The confusion lay in what what the ws module calls messages and what the Slack app calls messages.\nThe latest commit added the event to the onMessage() handler, which handles ws messages. That handler switches on events Slack sends along. It stores the raw message object in the 'message' variable, so the star_added and star_removed events send that along too (and not, as I had in a previous PR, just sent along the object of class Message).\nDoes that make sense? This commit sends along the more abstract 'message' that ws sends to onMessage, and the app using this library will have to handle the object it receives by looking at the item.type property.\n. That's right, the RTM API doesn't return a channel ID for the file type, though it will for the message type, and that's something the RTM API does. Your app would have to use the API https://api.slack.com/methods/files.info to get information about the file based on its the item.file property (which is the ID of the file), from which you'd get channel information.\n. #59 might be the pull request to watch instead of this one. That one incorporates the API requests to add/remove reactions as well as listen for them.\n. ",
    "chrismo": "Through experimentation, it seems the user has to have DMed the bot first.\n. cool - hacking on a texas hold 'em game, where the bot deals the hole cards via DM, and since the player has to request a deal, would be nice if the bot could just DM them directly without the user having to have first established a dm channel.\n(https://github.com/chrismo/hubot-poker/blob/master/js/card-poker/README.md)\n. it's working now :) needs a little love, have some open issues and needs more play testing - our LivingSocial team is too work focused (whatever) to help me suss out bugs, though a lot of the internals have been around for a while already and are fairly solid. i don't have an npm published package as I'm hoping the current owner of hubot-poker will lemme have that name - but a git reference in package.json for your bot will bring it in just fine.\n. ",
    "ekmartin": "Are you still planning to finish this @yahsan2? Would be nice, especially since it adds file events :)\n. It's published under the name slack-client.\n. This would be really helpful.\n. The reason postMessage completes is that it uses the Web API, while send uses websockets. The latter requires the bot to be connected to Slack's realtime API, while the former, postMessage, does not.\nThere's a few issues that could cause the bot to lose connection, such as #54. If you set the environment variable SLACK_LOG_LEVEL to debug you'll see a few additional events in stdout, such as team_migration_started.\n. Think it would be web.reactions.add('thumbsup', { channel: channel, timestamp: ts }, function(err, data) {});. See https://github.com/slackhq/node-slack-client/blob/2.0.0-beta/lib%2Fclients%2Fweb%2Ffacets%2Freactions.js#L20-L39 for more information.\n. A bit off-topic for the issue, but maybe it would be nice to move the usage instructions and similar to a hosted doc-website, using something like https://readthedocs.org/ or similar?\n. Another option would be to throw an error with a helpful message if the user tries to access the non-existent dataStore's methods.\n. Sounds like a good solution - definitely agree that it should be easy to turn off.\n. You can actually use the web client without a token, so you could actually do something like this right now:\njs\nconst client = new WebClient();\nreturn client.oauth.access(clientId, clientSecret, code)\n  .then(data => {\n    const authClient = new WebClient(data.access_token);\n  });\nBut I agree that it's unclear.\n. While you're waiting for more docs, it might be helpful to know that the web client's method names are equal to the API methods defined here. Arguments that are listed as required in the docs are passed as positional arguments, while optional ones are passed through the options object, which all the web client functions accept. \nThe ordering of the required arguments also seem to be the same as what's defined in the Slack docs, but here it's probably easier to check the code itself. All the API methods are defined in the facets folder, here.\nOther than that, all the methods accept an optional callback. If no callback is provided, the methods return a promise. The resolved promise value (and the second callback argument) matches the response object in the Slack docs (i.e. the \"Response\" section here).\nExample:\n``` js\nconst webClient = new WebClient(token);\nwebClient.chat.postMessage('channel-id', 'friendly message', { username: 'cat' })\n  .then(response => handleMessage(response.message))\nwebClient['files.comments'].add('file-id', 'what a comment', (err, response) => {\n  // do something\n});\n``\n. No problem. As for when to resolve/reject, wouldn't it be possible to resolve whenRTM_CONNECTION_OPENED` fires but only reject when all the reconnection attempts have been used?\nUnrelated to promises, shouldn't this nonetheless emit an error instead of throwing? Seeing as an error is emitted here: https://github.com/slackhq/node-slack-sdk/blob/master/lib/clients/rtm/client.js#L250\n. rtm.activeUserId should contain the ID you're looking for: https://github.com/slackhq/node-slack-client/blob/b4f18a482e7a34d3d03c89f221e61a669c94b643/lib/clients/rtm/client.js#L267\njs\nrtm.on(RTM_EVENTS.MESSAGE, message => {\n  if (message.text.includes(`<@${rtm.activeUserId}>`)) {\n    // handle message\n  }\n});\nUse text.indexOf/text.match if you're in an environment without .includes.\n. No problem, quick response!\n. #193 \n. Would help if npm deprecate was used on the old package though.\n. Wouldn't it be better to slowly move towards only supporting Node 4 and upwards? This is similar to what libraries like ESLint has done recently. Both Node 0.10 and 0.12 are after all going out of maintenance mode during 2016.\nThen node-slack-sdk could incrementally start using ES2015+ features as supported by the latest LTS release (currently version 4).\nAlso see the LTS schedule: https://github.com/nodejs/LTS#lts_schedule\n. Shouldn't slack be rtm here?\n. ",
    "Tehnix": "Was wondering what the progress on this was? Else I might try to take a stab at this, since I would really like attachments etc to show up (am currently using @ekmartin's slack-irc integration) :)\n. This would be awesome to have support for! Any updates on what is missing, if anything is?\n. ",
    "jvelliott": "I'm up to date on master as of https://github.com/slackhq/node-slack-client/commit/7e7dac795bda4c39215b4334be21436c0bf1b334\nhttps://github.com/slackhq/node-slack-client/blob/7e7dac795bda4c39215b4334be21436c0bf1b334/examples/simple.js\n. Confirmed working.\nThanks so much!\n. Thanks for the feedback.  I'll update it over the weekend.\nDo you prefer I make a separate commit, or rebase onto this one?\n. > I think it also makes sense to actually replace the JS version.\nOK, that sounds good to me.  Should I go through and comment on the new compiled version, or just leave it alone?\nYou do actually want it committed, right?\n. Hah, it's a fair point.  Guess I never noticed that deleting/editing/a bunch of other stuff all hits the on \"message\" callback.\nSeems to me like either the project or the APIs are being pretty overbroad with those things, but it can't hurt to do a bit of null checking.\nAfter some experimenting.. it looks like message.subtype is not set when it's a normal message, but that doesn't feel like a safe condition to reason on.\n. As far as I know!\n. Rebased commits so they all show up together after merge.\n. Hope this looks good. Never worked with grunt before!\n. Just noticed that this expanded loop, as opposed to the comprehension, seems to be adding an \"void 0\" to the end of the groups array.\ngroups = (function() {\n  var ref, results;\n  ref = slack.groups;\n  results = [];\n  for (id in ref) {\n    group = ref[id];\n    if (group.is_open && !group.is_archived) {\n      results.push(group.name);\n    } else {\n      results.push(void 0);\n    }\n  }\n  return results;\n})();\nI can prevent this with an empty else block\ngroups = (for id, group of slack.groups\n    if group.is_open and not group.is_archived\n      group.name\n    else\n      #Do nothing\n  )\n```\ngroups = (function() {\n  var ref, results;\n  ref = slack.groups;\n  results = [];\n  for (id in ref) {\n    group = ref[id];\n    if (group.is_open && !group.is_archived) {\n      results.push(group.name);\n    } else {\n}\n\n}\n  return results;\n})();\n```\n, but that seems gross.  Is there a nicer way?\n. I'm going to put it back as a comprehension, then.  I rewrote it slightly to be a bit more obvious what it was doing.\n. ",
    "wiggly": "Similarly a node newbie and having the same problem on Linux.\n. ",
    "wiggly-admedo": "Yes, adding that allows the example to work.\n. ",
    "buley": "I seemingly cannot post \"complex messages\" as a bot user. \nI'd love to be able to have a bot user call a slash command. I'm not sure if this is possible with complex messages, but I ran into errors while trying.\nThe bot docs say (with original bolding):\n\nTo post more complex messages as a bot user, clients can use the Web API methodchat.postMessage. Be sure and set as_user to true and use your bot user token.\n\nAnd yet when I set this field:\n\n{ ok: false, error: 'not_in_channel' }\n\nWhen I try to join the channel:\n\n{ ok: false, error: 'user_is_bot' }\n. \n",
    "kristg": "Is adding bots to individual channels still not supported? The bot I integrated sends messages to \"slackbot\" only. Inviting the bot as you'd invite members does not seem to work.. ",
    "hpg-mheck": "Sad that this is not supported while coding for the Global Legal Hackathon, 2018, in Chicago.. ",
    "AashrithChilkepalli": "\nBot users need to be invited to channels. If you say @yourbotusername you will get a dialog to invite him/her/it.\n\nI wanted to ask how do i disable the bot being added to channels . Is this possible ? Also is there a way i can edit the dialog that comes up when i say @botusername . Thanks! @evansolomon \n. ",
    "aoberoi": "@AashrithChilkepalli nope, unfortunately you cannot prevent the bot from joining a channel programmatically. this is something we're aware of as something users need, but we don't have a built in solution for this yet.\ni have a workaround suggestion: you can make your bot completely non-functional in channels it doesn't recognize. in addition, when it joins a channel it shouldn't be in, you can post a message telling the channel that it won't work there and asking a human user to please /kick itself so that it can leave.. @lhelminiak you would add this to your main file, which be default is index.js, but in your app might be server.js or app.js.. @bradennapier this was a little unclear, but let me try to clarify.\nSlack has deprecated usernames in favor of display names. If you're receiving messages over the RTM API, you'll have to parse the mention syntax (explained in the previous link) to extract a user ID. You should never use a username to programmatically refer to a user or bot, only this ID. Mentioning that user in a message is just a matter of formatting your message using the mention syntax. If you'd like to display the user name (like on a web page) then you can use the users.info Web API method to find that user's display name.. @pOoOf glad you asked. there's the users.lookupByEmail Web API method that can be used to find a user by the email address.\nSince we're discouraging the use of username, I don't think its likely that we'd create a similar new lookup Web API method to do the same for usernames.\nJust so I understand your use case, is the problem that you've now persisted a bunch of username values in some database or storage, and now each time your app needs to use the ID, you'll have to make this expensive call/iteration to translate that to a user ID? If so, I have some recommendations:\n\n\nWould it be feasible to do a migration on your database so that this expensive operation doesn't happen in the runtime of you application, but rather happens in a one-off migration script that writes the user ID back to the record that contained the username earlier. Then you can deploy an update to your app code that starts depending on the user ID directly.\n\n\nIf the above isn't possible, maybe you can change your schema to add a user ID field with a default value (like NULL), and then change your application code to look at the user ID for its use, but when it finds the default value, it does this expensive operation for just that first time, and writes the resulting user ID it finds back to the database. That way the expensive operation only takes place once per user.\n\n\nIf the use case is not related to persisted data, then I believe Slack's APIs all provide the user ID alongside anywhere the user name would have been before, so you shouldn't need to make that expensive call/iteration. If you find a place where that's not true, I'd love to hear about it so we can help make that easier.. We value building this Slack SDK in open source so that we are held accountable, because in the end of the day, our aim is to give developers the best slack client they can get.\nI see some confusion in the terminology, so let me help define a few things:\n\n\nSlack Developer Kit for Node / Slack SDK for Node / Node Slack client / Slack client: this is a package developers use to work with the Slack API and Platofrm from Node.js. its the thing you get when you npm install @slack/cleint.\n\n\nSlack Desktop App / Slack App / Slack for macOS / Slack for Windows: this is the thing a user of Slack downloads and runs to communicate with his or her Team. Its built (for Mac) on top of Electron.\n\n\nThis is the place to talk about memory usage for the first thing, but it is NOT for the second thing. I think this issue is quite a bit off track. If there are specific memory concerns about the first thing, we should make more specific issues (such as #252). If there are memory concerns with the second thing, @Everesty's comment has a good list of places to look. Seeing as that covers all cases, and that this issue is closed, i'm going to lock it for conversation. This is not meant to silence our community, its merely a way of routing everyone to the places where they can find the best help.. there's currently a larger discussion going on around the future of the datastore API. i'd like to consolidate that discussion into #330. specifically, i think the problems stated here are covered by the point about Enterprise Grid and not having knowledge of the entire team.. this issue contains some valuable information, but i've tried to link to it from more specific issues that can be individually worked on for progress.\nthe original intent was to track the progress of hubot and botkit adoption. hubot is now built on top of this package \ud83c\udf89 , while botkit is not and doesn't plan on it (i think botkit's needs are to be a general abstraction on top of many platforms and this package is not well suited to address that need). closing for these reasons.. i'm going to say this is a dup of #294 and close. If you disagree, please feel free to comment.. i see some tests that now demonstrate the use of the clients with and without options. we could always use some more. in the larger scheme of things, i don't think this issue is necessary to track that any longer.. you must be a team owner or admin to delete a channel. you should still be able to archive the channel.. fixed in #349 . just stopping by to triage against our new labels. @nicutimofte i've never seen this issue, but i can add one clarification. the RTM client does not need ports to be open for incoming connections. it does need to be able to lookup the hostname (DNS) and make outgoing connections to the internet. basically, if you can get curl to work inside your docker container, you should be able to use the RTM client in this package.. i have a few comments about scalability, specifically horizontal scalability.\n\n\nusing the new Events API for processing events rather than RTM gives you the ability to use traditional HTTP load balancers to scale. we released a dedicated node module for using it: @slack/events-api.\n\n\nthe biggest challenge for scaling the RTM client would be the datastore API, since getting state out of the process is necessary for the approach you mentioned (spawning new processes). if you have any thoughts or input about this problem, join the discussion in #330.. i think this is a legitimate use case for the slack client, but i'd like to solve for it using the approach in the referencing issue above.. de-duplication of events is going to require considerations in the DataStore layer. i don't have an answer of how we will accomplish this yet, but i think implementing it will require a very new approach.\n\n\nthere's an open discussion about what the future of that DataStore API will be in #330, and this use case is important for that discussion.. The data store has officially been deprecated. Closing this issue.. i think @andrewpbrett has got the right idea. ideally you are storing your access tokens in some persistent storage, and you read from that storage whenever you need to instantiate a client. i think its valid to keep this issue around as a docs issue, and we potentially need to surface better examples or even a step-by-step guide.\ni'm going to take @xWee's mention of the ruby bot framework as a request for a higher level framework take this information to that issue. #409 . worth noting: there is the @aoberoi/passport-slack package that is useful for handling the OAuth flow. its likely to become an officially supported package sometime in the future.. @jdcauley ping! can you provide any more details?. @mhahn ping! are there any clear next steps here? i'm not totally up to speed, but it seems like in order to do this right, we need to keep track of whether an error event corresponding to a case that we determine should cause a reconnect occurs, wait until the corresponding close event (when the websocket resource is in fact released) and then begin reconnection. so it sounds like the PR as-is shouldn't be merged.\nalso, i want to note that the next major version of ws exists. it might present a more favorable API for us to implement this specific feature, so it might be worthwhile to investigate.. also, dat CLA.. closing as duplicate of #410. @mwildehahn, if you're still interested, i'd love your feedback and continued help in that issue.. @DEGoodmanWilson correct me if i'm wrong, but it seems like Travis will invoke npm test, npm test will invoke npm lint, npm lint will invoke eslint, and our current .eslintrc configuration is on \"airbnb/legacy\", which is just ES5.\nDoesn't that mean Travis is already checking?\nSimilar to @ekmartin, I'd also like to start planning how to move to ES2015 and later. We should come up with and document a migration plan. If you agree that the first issue is accomplished, I'd like to rename this issue \"Define ES2015 compatibility plan\".\n. here's my proposal:\n\nv3.x versions are the last to support node < 4.2 (the oldest LTS at the moment).\nv4.x versions and beyond are authored in the latest accepted ECMAScript syntax (ES2017 at the moment). a transpiler (most likely typescript, or possibly babel) is used to output syntax that is compatible with node v4.2.0 and above (the oldest LTS at the moment).\nafter the release of v4.0.0, the v3.x versions are marked as deprecated, and a branch is maintained only for absolutely critical security fixes. 6 months later, that branch gets marked as unsupported.\neach time an LTS release's maintenance period ends, we evaluate what is to be gained by ending support for that version in this package, and are able to drop support so long as we increment the major version number.. the above proposal is how we've decided to proceed in our roadmap. thanks for the discussion y'all!. thanks for the reports everyone. i haven't had a chance to try reproducing this one yet. it doesn't seem urgent but we will eventually try to narrow this one down.. i've been able to reproduce it, so it is a confirmed bug. i'll leave more notes when i've understood more about what's happening.. background:\n\nat a high level there are two ways a client might reconnect to the RTM API:\n1) when the previous connection ended and the process terminated.\n2) when the network connection was interrupted, so within the same process a retry is initiated and succeeds.\nthe client generates an id for each message it sends to the server. when the server \"commits\" it or when it wants to inform the client of an error, it will send the client a reply using that same id. this RtmClient implementation uses the ids in those replies to trigger the callback or Promise you might attach when sending a message.\nin this implementation those ids are just a monotonically increasing integer, starting from 1 for the first message. the client stores a map of ids : handlers (where handlers are either a callback function or functions to complete the Promise). every sent message gets a handler, so if you don't specify one, the implementation will just use a no-op callback.\nnow some specifics regarding this issue:\nwhen a client connects to the RTM API, in order to help the it recover from network interruptions (case 2), the server will send the last reply over again (let's call this the resume ACK). this helps the client understand which of its sent messages weren't \"committed\". this implementation does so by succeeding the handler with the id received in the resume ACK and failing all handlers whose id is greater than that.\nbut what happens when the connection is fresh from startup (case 1)? the server still sends the resume ACK relative to the ids from the previous run. this client starts its ids over from 1. so there is a collision. the message the server refers to in the resume ACK is most definitely not the message with that id now, and the handlers it succeeds or fails as a consequence are wrong. this is a bug.\nthe symptom you've all experienced is that at some point the resume ACK consumed the handler that is supposed to be triggered, so at the point where slack is acknowledging the message you just sent, that handler is no longer found and an error is logged.\nso how do we fix this?\none idea is to stop using monotonically increasing integers for IDs. if each message is identified by a UUID then the probability of a collision is almost 0. but that complicates failing each of the handlers that were not \"committed\" by the server since we cannot directly compare ids.\nanother idea is to store some state related to reconnection so that we can determine if a specific resume ACK should be operated on as in case (1) or case (2). the downside is: more state and state is hard. the reconnection logic is already kinda convoluted and i'm not 100% confident we could manage that state, and our testing ability for the RtmClient isn't super.\ndoes anyone else have any better ideas?\ncc @CharlieHess . HO'KAY i think i got a better solution. shower thoughts ftw.\non startup we can store a unique id for each RtmClient instance. then when we create the id for each message, we encode both the unique instance id AND a monotonically increasing integer (e.g. {instanceId}:1. now after an initial connect (case 1) the resume ACK message's id won't match because there's a different instance ID. and in the interrupted condition (case 2) we can still compare the ID's directly. :tada:. plans are foiled. id has to be an integer \ud83d\ude22 .\nthe only viable plan i can think of is the one i described above where we keep some state on initial connect and check that.. @chenfanggm at this point i'm open to accepting PRs that can resolve the issue and/or implement tests that verify the correct behavior. we haven't begun to work on a fix yet, and i personally consider this a medium priority issue because its an annoyance but hasn't caused complete failure in the wild.. it sounds like what we need is a good reproduction case. if anyone who has experienced this issue (@mvaragnat, @mpcowan) has an guidance on how i'd be able to set up a test case for this, would you mind adding some implementation details? i could try spinning up a Docker container with a tiny mem limit, set up a couple hundred connections to the RTM API in my node process, and then simulate a disconnect. Does that sound adequate?\n. So I ran an experiment and I have some results to share:\n\nI ran my experiment program locally to analyze the memory behavior. What happens is that 1000 RTM connections are made, and as they all finally connect, i disconnect the network. Then when they are all in an ATTEMPTING_RECONNECT state, and a couple of GC events have occurred, I reconnect the network. I did this cycle ~7 times to observe the above.\nIf there were a memory leak, I would expect to see the memory usage rise unboundedly. Instead, the memory usage seems stable, except for during the first occurrence of reconnection attempts. I believe this is the expected behavior, and since the memory usage does not seem unbounded in other retries, I don't think we have a memory leak.\nYou can take a look at my raw results here: https://docs.google.com/spreadsheets/d/1wCKtZtOyTMFgIwG0fVoJCVN0DeJFWrErZHQcbucYLxM/edit?usp=sharing.\nFeel free to give the experiment a go yourself, or even better, take a look at it and see if I am missing anything. I'd love to see your results.\nAs far as next steps go:\n1.  Can you all tell me which versions of the SDK and versions of node you have observed your issues? I used the latest SDK: 3.6.0 and node v7.0.0 for this graph.\n2.  Do you believe its possible that your dynos/containers/VMs/droplets/instances are just under-provisioned? Perhaps you are running into the memory ceiling of the resources you have in your environment and the process is crashing simply because it cannot service this type of demand. The data I collected suggests that you will need ~20%-~25% headroom on memory to deal with a massive disconnect event, but that the memory usage will return to a normal level.\ncc @mvaragnat @thbar @DEGoodmanWilson @mpcowan \n. i just wanted to leave a link here to a tool i thought might be useful for any future analysis: https://github.com/andywer/leakage. seeing as how we haven't had any other recent reports of this issue, i'm moving it to the \"needs feedback\" category. i'll need more data or reports of this issue in the wild in order to make progress.. i'm going to close this issue because it hasn't gotten any engagement in a long time, and its probably only relevant to v3. if you do find this issue is impacting you, feel free to comment and i will reopen.. thanks for filing, its definately a bug we need to address, and also sounds like a duplicate of #251. so i'm going to close and we can continue working on it there.\n. @Starfox64 thanks for taking the time to sketch an API design for us, that is super helpful!\nPersonally, I think prototyping this as a separate module makes a lot of sense. I hope that it's something that would compose well with this SDK, or even be included in this SDK.\nI'll keep this thread updated with any developments, and you should expect something about this topic in the next couple weeks.\n. good news! we've just released a new Slack Event Adapter module for Node. you can get it on npm with npm install @slack/events-api).\nits a pretty basic utility that helps you set up listeners and adhere to some best practices. we look forward to enhancing it with new features (read: you feedback and ideas welcome) and potentially integrating it into this package in the future.. since the module was released and is being used by many developers, i'm closing this issue.. Oops I missed this mention! I'll find a better way to deal with the notifications moving forward. \n. @Roach it exists, just on a different page: https://slackapi.github.io/node-slack-sdk/auth#handling-tokens-and-other-sensitive-data. this was likely just a copy/paste mistake that i'm now correcting.\n. This issue seems to be more broadly part of #294. I'm going to rename it to give it a more precise action step, but please see the linked issue for more context.. fixed in #439 . @Everesty I just wanted to say we really appreciate you spelling out the steps in detail. I'm fairly new to this project here at Slack and I hadn't pieced that much together myself yet.\nI'm going to change some of the metadata on this issue so we can prioritize your suggestions.\n. related issue: #370. this might even be a dup with an oversimplified view of how things work. i think this issue may be more authoritative.. Hey @dsimmons, thanks for providing a detailed recount of your experience. This sort of thing really helps us understand where the rough edges are.\nI agree that you shouldn't have to check both the truthiness of the error parameter and the truthiness of the ok property before deciding there was an error. I'll mark this as a bug so we can fix that. \nOne thing I noticed is that you said you were wrapping the API call in a Promise, but you should know that when you don't pass in a callback, we already return a Promise. That might save you some time. . :+1:. closed in #347 . @BerndErnst thanks for the feedback. Your experience is valuable, since as maintainers it\u2019s harder for us to unlearn ideas to document them in the best way. \nWhich information did this issue have that you thought should have been more clear in the documentation? Any suggestions on changes?\n. you can now completely customize the retry behavior by passing a configuration object as opts.retryConfig to the WebClient constructor. the shape of this object is as defined in https://www.npmjs.com/package/retry as the \"options\" object.\nchanging this issue into a docs issue to make this more clear.. you should be able to read the bot user ID from the RtmClient instance itself: rtm.activeUserId.\nyou can find details about the your bot user's profile in the data store using rtm.dataStore.getUserById(rtm.activeUserId).. @clavin i want to say thank you so much for your help in pinpointing this problem! you rock!\n\nim triaging old issues and since this is reproducible, im labeling it as a bug. i hope that someone in the community can pick it up (it seems fairly obvious now that you've spelled out the solution) and send a PR. if not, it may take a little while for it to get picked up given our current prioritization.. i think the SDK could provide a helper function to download actual files. what i'm imagining is a function web.helpers.fileDownload(fileId, [opts]) and the opts could allow you to specify if you want the return value to be a readable stream or a Buffer.. I'm glad you asked. The work for it has been ongoing and almost complete!\nWe thought really hard about how the SDK could and should work with the Events API, and in short, we decided on making a separate module that could be used standalone and then we'd plug it into this SDK to give you a complete package; your choice. \nThe standalone module is feature complete and you can take a look at it https://github.com/slackapi/node-slack-events-api. It's not released yet because we need to put some finishing touches on it, but we'd love to hear any feedback you might have today. \nI anticipate the full support to land in this SDK in no more than a couple weeks. . good news! we've just released a new Slack Event Adapter module for Node. you can get it on npm with npm install @slack/events-api).\nits a pretty basic utility that helps you set up listeners and adhere to some best practices. we look forward to enhancing it with new features (read: you feedback and ideas welcome) and potentially integrating it into this package in the future.. @pakastin that's because 'reply_broadcast' isn't a subtype. its meant to be a property itself with a boolean value. but tbh, i'm not sure that works with the RTM API, but it def is an option with the Web API.. @bastienrobert: I believe the solution in the comment above works. Have you tried it? Was there an error or some unexpected outcome?. @bastienrobert I'm glad you asked! I overlooked the fact that the API of RTMClient has changed quite a bit since the messages above, specifically the v3.x to v4.x transition. That guidance is no longer valid, so allow me to provide a working example:\n``javascript\n// Before: sending a simple text message\nrtm\n  .sendMessage('Poke', conversationId)\n  .then(res => console.log(Message sent: ${res}`)\n  .catch(console.error);\n// After: sending a simple text message in a specific thread\nrtm\n  .addOutgoingEvent(true, 'message', { text: 'Poke', channel: conversationId, thread_ts: parent_ts })\n  .then(res => console.log(Message sent: ${res})\n  .catch(console.error);\n```\nIn the above example, parent_ts is the ts of the root message of the thread.. For future reference, you can find a complete discussion about this change in v4 in the migration guide. Its a good reference when thinking about older comments in issues.. to close the loop, there's two different efforts going on:\n\n\nin #329 we have typings that are authored outside the source code. individuals can pull these into their own project manually for now, but we will most likely get them published to npm as @types/slack__client. for an immediate need, that is the issue to follow.\n\n\nin #352 we have the beginning of the work to author in typescript. this is the long term solution and will likely land in the next major version (v4) of this library. this will be better for typescript users because the types can never mismatch if the library is authored in typescript. stay tuned to this issue and plan to migrate appropriately when it lands.\n\n\nthat should cover all concerns for now, so i'm closing this issue.. this might be a really dumb question, but i don't see where RTM_EVENTS is being used. why are we making this change?. @Roach cool cool. should we revert this one then? it doesn't seem like it needs to be there.. hi @sarabsilveira, sorry for taking so so long to find this issue. can you supply some sample code that reproduces this issue? i haven't experienced this, and i haven't found any other reports that could be related, so i don't have a starting point to look at.. it turns out text actually is optional if you add an attachment. i can see how the API of this SDK makes using this functionality difficult. i think the best way to address this would actually be with #381 . I was able to reproduce this issue using the API tester on api.slack.com. This is a platform issue, and not an issue in the SDK.\n@raoradica your code is using jQuery's $.ajax(), not the WebClient of this package. We'll try to help you out, but this issue doesn't really belong here.\nthis issue comes down to the fact that you're sending arguments as GET params (also known as query params) using a POST request. this isn't strictly wrong, but it's not how most people would use the API. the problem can be avoided if you put the arguments in the request body (as how POST requests typically are used). an even easier solution: use the WebClient from this package. we serialize arguments in a supported (and often better, more secure) way.. i'm very sorry for taking so long to respond!\nmy advice is to initialize the WebClient() when you receive the token you wish to use, and to keep it around in memory (so long as its not becoming a bottleneck).\nfor a distributed (aka App Directory) app, this would be at the end of the OAuth flow. you might get a single token or multiple (with a bot user) so you might actually end up creating two instances.\nfor an app for a single team, you probably have the token when the program starts up (environment variable or other configuration) so you'd just instantiate the client(s) on startup.. i agree, i think this would be a great feature to support. if anyone is willing to contribute, i'd be happy to merge it in.. turns out this is a duplicate of #237, which i closed in favor of #381. so i'll be closing this issue as well.. @frrakn this might be a stupid question, but can you give me an example of a case where there is no err but the message was not sent?. LGTM. sorry, we've had some offline discussions about this PR and i could have been more transparent about where we are with this. here's my recap. opinions and discussion welcome.\nafter talking to @bmajz, he asked that i hold off merging this PR because he'd like to improve it. he has some changes in mind, but i'll let him fill us in here if he can.\ni also commented that im not sure going down this path is the right thing to do for our typescript community. there's no way we (as maintainers) can be certain that the definitions aren't broken because they are never tested against the actual library. we need something to gate us from making a change that breaks the interface definition because, in my opinon, wrong defs would be worse than no defs at all (anys are better than wrong types). and so, i'd like to discuss the pro's and con's of authoring the entire SDK in .ts files. this means the typescript compiler or linter will barf if we do anything inconsistent with our types. we could do this incrementally, but we have to be prepared to add yet another build step.. The next major version of this module will be authored in TypeScript. Until that version is out, I'm going to leave this PR open and actively point people to it when they ask for TypeScript definitions.\nI feel like this is the best approach in the short term because it should signal to consumers that these are not maintained in a testable way, and if you choose to pull down the definitions, you're taking responsibility for them in your own app.. @bmajz what do you think about contributing these typings to the @types npm organization? the guide to doing this is here: http://definitelytyped.org/guides/contributing.html. it seems like the scoped packages issue has been resolved, and this would have to be published as @types/slack__client.\nto be clear, we still plan to author in TypeScript in a future major version. i see publishing to @types as a stop-gap solution. since installing that package is strictly opt-in, i don't think my previous reason for not merging (no types is better than wrong types) applies. if the types are wrong, the community can either self-correct by working together in the DefinitelyTyped repo, or you can uninstall the package and fallback to dealing with anys again.. hey everyone! take a look at v4.0.0, which is written using TypeScript! i hope you like it.\ni'll close this issue now, but if you're looking for type definitions for v3.x, this is still the right place to find them.. @Everesty thanks so much for your thorough and well structured thoughts. i tend to agree with what you've said.\nmy biggest fear with Plan B is that we will build it and they won't come. but i'm optimistic because users get so many advantages beyond getting a better Data Store API from Plan B. also, since Slack is involved here, there's a decent chance that we can get the community to migrate: we can add links to the official documentation site (api.slack.com) to drive new users to the preferred package, we can hopefully get more people to write tutorials and blog posts that use those modules, and maybe since the lower level modules will mostly be utilities and opinion-less, we can get 3rd party tools to build on top and depend on them.\nthis discussion is definitely still open to more opinions and i can be persuaded otherwise.\n\nmy thoughts on some of the points you raised:\n\nmigrating to ES6: the @slack/events-api module is already written in ES6. i already live in an ES6 world, so i'm not going to start new packages that don't hit that minimum bar. that being said, until node core transitions the ES Modules EPS to ACCEPTED status, and even for some time after, we'll need to continue to transpile down to ES5. i'd like to adopt the minimum target of node 4.x across all newer modules, and if your app has to run on something less, then this module might be the answer for you. there's actually one more build change i'm considering and that's authoring in TypeScript. its become apparent to me that the community wants types and doing them out of band of the authoring of the package is a pain from a maintenance point of view, but we might need to save that for another discussion.\nwhat do we call it? how about @slack/sdk? also, @brianleroux owns the slack package on npm and has previously offered for us to use it for another purpose, so that could be possible. if we use a new name, we'll start the version number over.\nwhat's being split? here's a hypothetical list:\nRTM client (potentially use slack implementation, which i think is great)\nWeb client (potentially use slack implementation, which i think is great)\nEvents API\nInteractive Messages (TBD, but similar to Events API)\nIncoming Webhook (for migratability, could prob just use code from here)\nSlash Command + Outgoing Webhook (prob a ~30 line helper, plugs in like Events API)\nOAuth helpers (@aoberoi/passport-slack can be cleaned up and reused)\nSlack Store  (inspired by express-session with pluggable backends and options to turn on/off certain models, behave as a team cache versus an org cache)\nMessage helpers (similar to a templating library specific to outputting JSON suitable for Slack messages)\nwhere do docs live? i think each module needs reference docs and a good README at a minimum. the umbrella module should get a little more in depth treatment with guides for different kinds of usage (similar to the gh-pages site for this module). the umbrella module could also have a listing of its individual deps and a short description about what they are used for.\n\n. maybe instead of an umbrella package, there's a generator for yeoman. or, maybe its something more like create-react-app.. i wanted to leave some updates here regarding how some of these thoughts have evolved.\nmigrating the community: i now believe this is a larger challenge than initially anticipated. i'd like to use a stronger hand to guide users to the latest and greatest. i still prefer Plan B, but when the umbrella package is ready, i'd like to officially deprecate @slack/client (so that npm warns you on install).\nrepository migration : i'd like to reuse this GitHub repository for the umbrella package so we don't end up losing the 100+ watchers and collaborators. the npm name would change, but the github repo would stay the same, we would just leave the old sources in a branch that isn't master. this way all the links on the internet (first party and third party) will bring users to the latest and greatest.\nmodular repositories: there's a non-trivial amount of overhead in the tooling that comes with each new repository. we're in agreement that transpiling (with TypeScript) will be done. there is some efficiency we can gain by only doing this once and publishing the individual modular npm packages and the umbrella package from the same github repo.\n\nnow to bring back to the initial topic: we should begin designing the Slack Store module mentioned above. here are some questions:\n how do we deal with relational and key-value type backends with one interface? should it actually be two backend interfaces?\n which backends are most important to address at first? initial thoughts: mysql, postgresql, redis, mongodb.. it seems appropriate to close this issue and redirect any conversation about a new API into #410.. ditto. can you post a code snippet to reproduce the issue?. The v3 line of this project is no longer supported, so we're closing all issues that were specific to those releases. If this issue still persists in current releases, please open a new issue.. good catch, thanks @frejos!. @KTachibanaM to be honest, i couldn't tell you why. i agree its confusing. hopefully the error messages you got back were helpful enough that it didn't waste too much of your time.\nout of curiosity, would you mind sharing why you would be moving from using the web API method to the RTM method?. as a follow up to this issue, i think what we need is better validation of arguments so we can give users better errors.\none idea is to create new Error types with code properties that belong to an enumeration so you can deal with them programmatically.. new error types are in v4! if there's some shortcoming with those, please open a new issue with a specific idea or bug.. hi @mazerab, i understand that appears frustrating not to have the same feature support. it turns out you're actually comparing two different things. the method you're showing in the Python SDK is actually a call to the Web API, which supports more rich message formatting. This Node SDK has that exact same functionality, but as a different method. see: https://slackapi.github.io/node-slack-sdk/basic_usage#posting-a-message-with-web-api. @mazerab im happy to take feature requests. out of curiosity, is there something preventing you from using the Web API method?. @againer thanks for the contribution! i left a review for you to address before i can merge this in. we also need a signature on the CLA before that too.. Hi @lukeb-uk, sorry for not getting to this PR for so long. Can I ask why you'd like to limit the responses to just when someone says \"Hello.\"?\nI could see actually using this example as being problematic because it would essentially spam your #general channel, but that's not really the intention. The way I see it, the example is meant to illustrate how to use the SDK with as little extra logic as possible. But since I don't expect people to run the example for more than a few seconds to verify that it works, I think its not necessary to filter the messages.. oh, you're absolutely right. i missed that. thanks!. looks like your parameters might be mixed up. try something like:\nslack.chat.unfurl(message_ts, channel, {\n      [link.url]: { text: \"blah\" }\n    }, (err, info) => {\n      if (err)\n        throw new Error(err)\n      console.log(info)\n    });\nnote: token isn't an parameter. since you instantiate the WebClient with it, its not necessary to pass in again. . unfortunately, the docs on this library are not as clear as they can be.\nin general, the WebClient instance holds onto the token so that each time you use it, you don't need to pass it in explicitly. the parameters for any Web API method are those that are listed as required in the docs, and then an object hash containing any parameters that are optional. there are a few exceptions, but they are pretty rare.\nglad we figured this out!. LGTM!. note: will need to regenerate the docs after this merge.. i believe your code should look more like this:\n```\nconst slackWebhook = 'https://hooks.slack.com/services/...';\nexport const wh = new IncomingWebhook(slackWebhook);\nwh.send({\n   text: '',\n   attachments: [\n      { text: error.message },\n   ],\n    channel: '#error',\n  }, callback);\n```\ni might have misunderstood, and if i have, please show me what type of error you are getting in the callback (or the rejected Promise).\ni also wanted to add that i highly discourage you from using a channel name in the incoming webhook in this manner. in fact, this could be a reason for your error as well. from the documentation:\n\nYou cannot override the default username, icon, or channel for incoming webhooks attached to Slack apps. Instead, these values will stubbornly inherit from the associated Slack app configuration.. Thanks for the feedback @markcarey. I've taken this back to the rest of the team. We're also discussing possibly just defaulting \"fallback\" to something like \"Preview not available\" or something sufficiently generic.\n\nA side note: I haven't come up with a great way to surface warnings from the API response within the SDK overall. If you have any thoughts regarding that, I'd welcome that discussion.\nClosing because I don't think there's any action necessary in the SDK at this point.. thanks for the issue report @Akujin. i agree that 500 errors on large teams is quite unacceptable. unfortunately, without a pagination solution as you recommended at the API Platform level, there's nothing we can do in the SDK to mitigate this situation. but be aware that we are working on a pagination solution at Slack so we can prevent these types of issues from happening.\ni also agree that the fix should be made here, and not at the hubot-slack adapter. i'll keep this issue open until we have a pagination solution and as a place to update users about where the implementation is.\nas far as the data list being loaded into memory, there are two issues here:\n  1. this SDK uses a concept of a DataStore, of which the default implementation is the MemoryDataStore. this abstraction has become less and less useful, especially for those using large teams. we've started a discussion about this issue here in #330. you can get all the user data out of memory by simply setting the dataStore option to null.  this is available to you in hubot-slack too by setting the SLACK_CLIENT_OPTIONS environment variable.\n  2. hubot itself offers on a \"brain\" abstraction and the users are being stored there too. we used to opt out of populating the users into the brain, but that meant that users of the hubot-slack adapter ended up with a deficient hubot and they couldn't take advantage of all its features. recently we made a release that restored that functionality. you can get all that user data out of memory by using one of hubot's brain persistence adapters (there are a few here: https://www.npmjs.com/browse/keyword/hubot-brain, and hubot-redis-brain is quite popular too).. @hparadiz that's my fault actually, i always thought it was read from an environment variable and now i see that it's not. i've created slackapi/hubot-slack#421 to track getting this implemented. if you have the ability and would like to help, i'd be happy to assign the task to you. otherwise it might take a few weeks to get this out given current priorities.\nthe undocumented pagination technique is not something i'm willing to implement in the SDK because it will break and the new pagination technique is right around the corner. in the meantime, i'm thinking the following changes would comprise support for this feature:\n\nchange the implementation of paginated endpoints to use a reasonable default page size (e.g. 1000) and only invoke the callback or resolve their promise once all pages are iterated.\nif pagination options are passed into the individual method calls (e.g. { limit: 20 }), then invoke the callback or resolve the promise after the first call. this should allow the user to iterate with custom logic.\n\nfeedback on this feature is welcome!. This has become more relevant since the pagination spec is now standard across API methods. See https://slack.engineering/evolving-api-pagination-at-slack-1c1f644f8e12.\nHere are a few of the methods that could benefit:\n conversations.history\n conversations.list\n conversations.members\n conversations.replies. note: this will have an impact on the usefulness of the dataStore, but that API will also be going through some redesign.. LGTM too, thanks @chapmanc!. fixed in #349 . words cannot express how excited i am for this change.\n@CharlieHess, this one's for you:\n\n. one constraint i'd have for a migration to typescript-authored source is that i'd want that fact to remain an implementation detail. a goal of this project is to have maximum reach with our developers and therefore, all the examples / guides / documentation should talk about the interfaces as JavaScript-first.\nhere's a question related to this: how do we go about generating reference documentation? its clear that JSDoc annotations are the infrastructure for nearly all tools in the ecosystem, and i'd love for reuse. while investigating a solution, i came across Microsoft/TypeScript#10. it seems like this is not a solved problem, so i'm open to other solutions as well.\nmore interesting links:\n https://github.com/angular/tsickle: does this sort of transform but for Google Closure Compiler annotations rather than JSDoc\n  https://github.com/develar/ts2jsdoc: a fairly new project that does this transform outside of the compiler.\n*  https://github.com/typhonjs-node-tjsdoc/tjsdoc: a yet-to-be-released documentation generator that has goals that seem to align with this issue.. @kwonoj i like your idea about trying out tsdoc and then inspecting whether it suits the needs of a JavaScript only developer. we can refer back to this conversation to try out other options when we know what worked and what didn't.. @kwonoj so i've gone ahead and created a dev-v4 branch. would you mind opening this PR against that branch so we can start merging the pieces that work and continue to collaborate on this (along with other v4 goals)? i'm going to start publishing a roadmap in the form of GitHub Milestones, and we can track the progress there.. @kwonoj thanks for these very excellent contributions. i'm very happy to say we're rolling forward with the typescript pipeline and this really helps establish a base. of course i might tweak some of the details ahead.. @matanlb i definitely understand your use case and the value these enum exports would provide.\nuntil now, these have been purposely left out in order to allow for flexibility. if we were to start encoding these into enum types as you suggested, the chance for platform changes to introduce new types that aren't met with an SDK release at the exact same time grows. in my opinion, it would be worse for your application code to mix the use of hard-coded strings and SDK defined enums than just using strings for your enum values. in fact, using strings for enums is a common JavaScript pattern in many libraries (and probably will remain until we all start using Symbol more pervasively).\nI think the solution to this use case will come from an effort we have internally to generate machine-readable descriptions of the Slack API. if and when that happens, we should have a source of information that always at parity with the platform. i can't tell you today exactly how this will turn into a solution for the need, but i'm confident that that would be a step in the right direction.\nif you feel differently, or have a use case you think is super-important that i'm not seeing, id be happy to hear about it!. @matanlb i appreciate your thoughtfully explained argument, but i still have some reservations about this proposal.\nto start, we're moving in a direction to make the APIs more strongly typed. enums can actually support that goal! but in particular, we're planning to write the next major version of the SDK in TypeScript (#352). that should largely remain an implementation detail and all users of the SDK should think of it as a JavaScript API. but users of TypeScript will enjoy additional benefits when it comes to tooling and static analysis. but what this means is we have to try to express these enumerated types as strong types the way TypeScript considers them.\nin typescript, there is a built-in enum keyword for making enumerated types, but it is limited to only number values, not strings as we would need. the general recommendation is to use string literal types to represent a string value enum (see here). this also looks great! but what happens when a new property is added and the SDK doesn't have that property yet. because its not defined as part of the type in the origin definition, the user-application code cannot add a new value to the type. now you are stuck. in the best case, the SDK is updated, a new version is published, and the application just updates (you are right that it would be a minor or patch). but what about the worst case? the worst case is that you are using some undocumented properties, something we never plan to add as an option in the SDK. now you are completely stuck. i want to avoid this.\nyes, typescript would impose a limitation on the normal javascript capabilities here. but i actually think this limitation is a good one. it results in APIs that are more static and easier to reason about.\nbut to be honest, im not a typescript expert, so let me pull in @kwonoj to see if he has any thoughts or opinions.. @kwonoj as a user of a library, is it possible to \"mask\" the definition of a type with your own definition? let's say we use the string-based enums in TS 2.4, and the library's enum definition is incomplete, can i as a user tell the typechecker that i have a defintion of that type i'd rather use?. @matanlb\nRegarding 1:\nNo we are not deprecating this library at all. And I am only willing to accept a move to authoring in TypeScript so long as the APIs are just as usable and idiomatic in JavaScript. I consider the JavaScript API as the first-class citizen of this library now and in the foreseeable future. We will begin to work on the TypeScript authored version in a new branch (and continue to ship 3.x versions that are authored in JS until that branch and other 4.x features are ready). I would love JavaScript developers like you to give us feedback on that work, and I'll make sure there's at least one RC release to make it as easy to try out as possible. I'm not willing to downgrade the experience of a JS-only developer.\nRegarding 2:\nNow that I've started thinking about this in more detail, and with @kwonoj's feedback, i'm not super confident that a tightly defined type makes sense either. Would you mind helping me understand what you're after a little better? It sounds like the main thing you want to avoid is running back to the documentation website to know which events are available or which errors are possible.\nThe events are only really exposed in this module using the RtmClient (we have @slack/events-api that deals with the Events API, but that's not what we are discussing). There's already an enum in the package here. these are available in the package as require('@slack/cleint').RTM_EVENTS and require('@slack/client').RTM_MESSAGE_SUBTYPES. does this satisfy what you are looking for regarding events?\nThe error types are not enumerated at all, but I would assume that if you were to receive an error, you'd be at a point where you are debugging and looking these up in the documentation is the safest place to get the most up to date information regarding that error. How would having the error types enumerated help you? I feel like fully describing the Slack platform's error hierarchy in JavaScript is a lot of effort for a rather small return.. I've marked this issue as a discussion so we can continue to refine until we get to one or more specifications for enhancements (which we can turn into new issues).\nit sounds like the need for runtime-available event types is already being met to your satisfaction.\ni like the idea of Error extending types for some coarse-level error categories (ones which you might want to switch on in a catch). the more fine-level error types could be specified in a code property of the error. I think this is more \"node-friendly\". in that case, having all codes available in an enumeration would be possible. if this seems to fit your need, i'm happy to create a new enhancement issue to track it.\nlastly, i just wanted to say that since i last participated in this discussion, string enums are now available in typescript 2.4. \ud83c\udf89 . there's one more dimension to consider here, which are \"lifecycle\" events (not the events emitted from Slack, but events that have to do with the objects themselves). there's already a dedicated issue to address enumerating types for that: #371.. now that v4 is out, it makes sense to kick off this discussion again.\nis the new API meeting expectations for Error types? All errors in the SDK now have a code property, and there is a top-level export called ErrorCode, which can be used as a dictionary to compare for available error types.\nwe haven't solved for event types in an enum, but there is some kind of a precident set that this could be something we support, especially since all the methods argument type information is being codified. we haven't done any typing of responses or events yet, but i'd like to hear if this is something that is important to the community.. #509 is relevant to this discussion.. closing for lack of feedback.. hey @matanlb thanks for the bug report. you're totally right. i believe what happened here is that those optional parameters were added later and the SDK wasn't updated. and actually i can see at least one reason why: this would have to be released as a breaking change (semver:major). previous code that uses the callback parameter would stop working if i merge a fix.\nthe good news is that we've been working on a roadmap that will give us some timelines. but we're looking at a couple months for a new semver:major version.\nin the meantime, fortunately the SDK has affordance for a workaround:\njavascript\n// `slack` is an instance of `WebClient`\nslack._makeAPICall('channels.create', { name: 'channel_name' }, { validate: true }, callback);\nslack._makeAPICall('groups.create', { name: 'group_name' }, { validate: true }, callback);\nthis does use \"private\" API, so its not ideal, but i don't imagine the _makeAPICall() method changing before any semver:major updates.. @CharlieHess anything i can do to help this progress?. hi @navratill \nthe documentation page you linked is for the general use of receiving (not sending) messages over the RTM or the Events API.\nif you consult the documentation for sending messages over RTM, found here, it says the following:\n\nThe RTM API only supports posting simple messages formatted using our default message formatting mode. It does not support attachments or other message formatting modes.\n\nI suggest you instead use the WebClient to send your message. And I'm just curious, is there a reason you preferred to use the RtmClient?. thanks for the bug report, i was able to reproduce, so i'm labeling it accordingly.\nhere is a debug dump i captured while reproducing:\nREQUEST { url: 'https://slack.com/api/users.profile.set',\n  headers: { 'User-Agent': '@slack:client/3.10.0 darwin/16.6.0 node/4.7.0' },\n  form: \n   { profile: \n      { status_text: 'riding a train',\n        status_emoji: ':mountain_railway:' },\n     token: 'xoxb-REDACTED' },\n  callback: [Function: wrapper],\n  method: 'POST' }\nREQUEST make request https://slack.com/api/users.profile.set\nREQUEST onRequestResponse https://slack.com/api/users.profile.set 200 { 'content-type': 'application/json; charset=utf-8',\n  'content-length': '40',\n  connection: 'close',\n  'access-control-allow-origin': '*',\n  date: 'Mon, 19 Jun 2017 17:54:16 GMT',\n  'referrer-policy': 'no-referrer',\n  server: 'Apache',\n  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',\n  vary: 'Accept-Encoding',\n  'x-content-type-options': 'nosniff',\n  'x-slack-backend': 'h',\n  'x-slack-req-id': '783239fc-d103-4511-8616-4afaeb69d4fc',\n  'x-xss-protection': '0',\n  'x-cache': 'Miss from cloudfront',\n  via: '1.1 d5da2738774b6f83465e13845679d084.cloudfront.net (CloudFront)',\n  'x-amz-cf-id': 'bsZ50ZBkUjW9AYnqQpvqhtu6N2jqLr4W7kRRPLBXom4f4iQBPr7Fbw==' }\nREQUEST reading response's body\nREQUEST finish init function https://slack.com/api/users.profile.set\nREQUEST response end https://slack.com/api/users.profile.set 200 { 'content-type': 'application/json; charset=utf-8',\n  'content-length': '40',\n  connection: 'close',\n  'access-control-allow-origin': '*',\n  date: 'Mon, 19 Jun 2017 17:54:16 GMT',\n  'referrer-policy': 'no-referrer',\n  server: 'Apache',\n  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',\n  vary: 'Accept-Encoding',\n  'x-content-type-options': 'nosniff',\n  'x-slack-backend': 'h',\n  'x-slack-req-id': '783239fc-d103-4511-8616-4afaeb69d4fc',\n  'x-xss-protection': '0',\n  'x-cache': 'Miss from cloudfront',\n  via: '1.1 d5da2738774b6f83465e13845679d084.cloudfront.net (CloudFront)',\n  'x-amz-cf-id': 'bsZ50ZBkUjW9AYnqQpvqhtu6N2jqLr4W7kRRPLBXom4f4iQBPr7Fbw==' }\nREQUEST end event https://slack.com/api/users.profile.set\nREQUEST has body https://slack.com/api/users.profile.set 40\nREQUEST emitting complete https://slack.com/api/users.profile.set\nerror: Response not OK:  invalid_array_arg\n[Error: invalid_array_arg]\nit looks like the value for profile is getting serialized as profile[status_text]=...&profile[status_message]=... rather than profile={\"status_text\":\"...\",\"status_message\":\"...\"}. This serialization is done for similar greater-than-one level JSON arguments in the assignApiArgs() function. My suggested fix is to add an additional condition in there for when key === 'profile'. I can probably get around to this in the next week or so, but PRs welcome too!. @slavahatnuke would you be able to capture a similar dump  to above by running your script with the environment variable NODE_DEBUG=request set?. @slavahatnuke  on closer inspection, i think i see the issue. you're calling the method with the wrong arguments. it should be: web.chat.postMessage('#mychannel, message.text, { attachments: message.attachments }, callback) (text is the second argument, and all optional arguments including attachments are put in the third argument) . @shanedewael i like it! thanks \ud83d\udcaf . hi @gczene, thanks for the contribution!\nwe're not interested in adding new helper methods like this one to the RtmClient. in general, we're moving in the direction of decoupling the RtmClient from the WebClient. while i do understand that its nice to have a simple rtm.chat.delete() available, its not actually required to get this done. with some additional effort, you could do the following:\njavascript\nconst slackWeb = new slackClient.WebClient(token);\nslackWeb.chat.delete(message.ts, message.channel, callback);\nbut i am curious, is there any reason you prefer using the RtmClient to the WebClient? have you worked with the Events API at all yet?. done in #439 . i think this ticket is good for collecting documentation issues regarding the WebClient. let's use this as the canonical issue on the topic. \nin #193 we discussed how its not documented that the token is optional, and leaving it out would be useful when using the SDK to complete the OAuth flow.. hi @DominikPalo, thanks for the feedback.\nThe RTM API isn't receiving many of the new enhancements the Slack Platform has to offer. We're encouraging most developers (outside specific use cases and scenarios) to use a combination of the Web API and Events API instead.\nIn this case, the app_uninstalled event is exactly what you want, and its exclusively part of the Events API. I recommend integrating our Events API adapter into your app and handling the scenario that way. (BTW, we welcome feedback on that module and its documentation too, its still pretty new!)\nHowever, I am concerned about this:\n\nit's not possible to catch internal error thrown by handleHttpResponse in call-transport.js so it fills my node.js error logs.\n\nCan you give me an example so I can reproduce this? handleHttpResponse is used by the WebClient, and all calls from that client either take a callback which should supply you with the error, or it returns a Promise, which should reject with the error.\nLastly, I'm curious about whether you've tried the Events API. do you have a scenario in which the RTM API is preferrable? one of the known ones are when you are behind a corporate firewall and cannot handle incoming connections, but I'm curious to find out other reasons our developers might not be moving to the Events API.. Great, thanks for the feedback about user_typing. We don't have any plans to port that into the Web API at the moment, so I think the best solution is to use the Events API in addition to the RTM API in your App.\nAs for the errors, I think we are talking about two different things: (1) the ability to programmatically handle the disconnection after a token is revoked, (2) the output on stdout that you have captured in your log files.\nI think (1) is not an issue because you have code that can programmatically respond to this situation in your issue report. Let me know if there's something else you would have hoped for.\nI think (2) can also be dealt with by setting options on the RtmClient instance. You can change the logLevel option to 0 (or 'error') to reduce the log messages to just those that are considered errors. In this case, that won't be enough to get rid of the lines you are seeing, so what you could do is pass a custom logger as an option for the RtmClient instance. You then get full control of what gets output, and you can even use a noop function if you want nothing output at all.. Hi @Redblueflame,\nThe WebClient supports the following methods: reactions.add, reactions.get, reactions.list, reactions.remove\nHere is an example of it being used:\n```javascript\nconst WebClient = require('@slack/client').WebClient\nconst slackWeb = new WebClient(SLACK_TOKEN);\nslackWeb.reactions.add(':thumbsup:', { channel: channelId, timestamp: messageTs })\n  .then(console.log)\n  .catch(console.error);\n```. Let us know if you have any problem with that.. good thinking, i'll try and whip something up (prob not immediately) and add it to this PR.. out of date. Next step: create test case(s) that can demonstrate the problem.. related: #251. hi @husnulhamidiah, i understand why you expected this to work that way, the documentation isn't clear on how the subtypes work.\nif you want to attach a handler for just the subtype of a message, you would actually do it like this:\nrtm.on(`${RTM_EVENTS.MESSAGE}::${RTM_MESSAGE_SUBTYPES.FILE_SHARE}`, handlerFn);\ni'm going to leave this issue open because i think we need to at least improve the documentation of this feature, but even perhaps rethink how those constants work.. we've improved the documentation around subscribing to message subtypes. i haven't heard of any further desire to add another technique, so i'm closing this issue.\ndocs: https://slackapi.github.io/node-slack-sdk/rtm_api#listening-for-message-subtypes. i assume since you closed the issue that you found the solution, but for others that find this question i'll go ahead and spell it out.\nyou probably saw Slack API Test because you were using a tester token. You need to generate your own tokens. You can use a Bot access token (xoxb-...), a User access token (xoxp-...), or the new type we just introduced, a Workspace token (xoxa-...). Depending on which type of token you use, the method you are calling, and the options you pass in, the Authorship of your message will change.\nyou most likely want to create an app with a bot user, so that you can get a bot access token, and then post without any additional options to use the bot's identity.. @jannhama the .npmrc file is usually either created by a user running npm config [--global] or by hand-editing it to suit a specific project. there's more info in the documentation here.\nis there a problem that happened that we can help with?. you're totally right. didn't already happen mostly because the we didn't get ahead of Threads when that feature launched. thanks for finding that!\nit's a relatively easy copy/paste job to implement this. i will put it in the queue to be worked on, but that queue is kind of slow these days, so contributions welcome.\nFYI we're working on a solution that will autogenerate these facets in the future so this sort of an issue doesn't happen again.. fixed in #398!. the arguments for rtm.sendMessage() are actually (text, channelId, optCb). you are just passing in an object with some keys defined.\nyou either want to separate out reply.text and reply.channel properties and pass just them in, or use rtm.send() instead (note: you have some extraneous properties like ts that shouldn't be sent to the Slack API, because it should determine the ts of the message and send it back in the ack; also you're missing an id property). i suggest just using rtm.sendMessage() because it handles those concerns intelligently (with queuing, with callback association, etc).\nin general though, it looks like you are starting on a new and interesting project, and i recommend moving away from the RtmClient unless you have very specific needs. The Events API and Web API provide a superior set of functionality.. there\u2019s a great discussion of the choices you have here: https://medium.com/slack-developer-blog/getting-started-with-slacks-apis-f930c73fc889.\nmy TL;DR of it is the RTM API has some pretty important disadvantages:\n\nno rich slack message formatting - you can\u2019t use attachments or any of the rich formatting you see in message builder\nno interactive messages - you cannot build an app that responds to button clicks or message menus using RTM.\nlimited access to events - many of slack\u2019s events just don\u2019t come down the RTM API. you can compare them here, but IMHO the ones that are exclusive to Events API are much more useful than the ones that are exclusive to RTM.\nenterprise org duplication - RTM connections are tied to a team (or workspace), and there\u2019s no solid and deterministic way to deduplicate events that you might receive twice because two workspaces can have shared objects (channels, files, emojis, etc). the Events API will deduplicate them for you.\nhard to scale - theres no great way to scale persistent websocket connections. scaling horizontally isn\u2019t an option because each connection is stateful. scaling vertically is usually cost prohibitive and there are some OS level limitations with number of open sockets.\ntoo much traffic - your app will end up getting lots of data it isn\u2019t actually interested in, because RTM is sort of a firehose. this is wasteful from a bandwidth resource POV.\n\nbut there are some advantages to the RTM API that make it better in limited scenarios:\n\ncorporate firewalls - because the RTM API doesn\u2019t require any incoming connections, only outgoing, it may be easier to deal with in very controlled IT environments.\nmimicking a client (strongly discouraged) - if you\u2019re application functions more like a client with an end user logged in than an app, the RTM API fits that paradigm a little more smoothly.. one more use case for this enhancement: override the token that was used to instantiate the client with one provided as an optional argument. see #237.. Hi @rophy, we think of the Web API arguments in that table as a set, without a natural order. Sorry this is confusing to you. We're considering #381 to help solve this kind of confusion. Your feedback is welcome.. @yousefissa i'm not sure what you mean by the \"RTM session\", can you clarify?\n\nFYI the the RTM client currently supports a SlackDataStore interface for storing team data associated with a specific connection. It sounds like this is what you want, and you'd have to implement an object with that interface that can store to a mongo backend.\nHowever, keep in mind that we've been having discussions about redoing or removing the DataStore abstraction in the next major version of this package.. Got it, thanks for clarifying.\nFirst, I would avoid calling that a session, its an instance of the RtmClient class, so I'd call it a client.\nSecond, it's not something that can be \"saved\" and then \"loaded\" to a database because it doesn't represent data. It represents a stateful connection to Slack. The way we typically work with these in node is to keep references to client objects in memory. Since the process is long running, those objects will stay alive as long as the process does, and they won't disappear unless you specifically discard/delete the reference. If you have many clients in your program, the simplest thing to do would be to store them in an object that is keyed by some identifying information (like a user ID), look up the reference to the client when you need it, and then call whatever methods on it that you need.\nLastly, I just want to add that if you are handling many connections, its almost always a better design to use a combination of the Events API and the Web API rather than the RTM API. You wouldn't have any stateful connections to worry about. All the events would be delivered through HTTP requests to your application and your app's actions would be sent as HTTP requests to Slack.. LGTM, but its failing the tests because of a linting error with trailing spaces. can you fix that @shanedewael?. @gunar released!. @gterras: unfortunately, none of these packages support slash commands. but fortunately slash commands are super easy in node. here is an example from one of our template apps: https://github.com/slackapi/template-slash-command-and-dialogs/blob/9a459e8494b88245eb63e33db3ba298ea5cb701c/src/index.js#L27. let me know if there's anything specific you might need help with.. thanks for the correction... we probably should write a topic about sensitive data, for now this is def an improvement \ud83d\udc4d . There are two known workarounds:\n\n\nUse the conversations.* methods instead. These have support for locale awareness and work across many of the families of methods for \"channel-like\" entities.\n\n\nUse the internal method webClient._makeAPICall(methodName, requiredArgs, optionalArgs, optionalCallback). This is subject to change so it is not recommended outside of a temporary patch.. thanks for the contribution @boctor! are you able to sign the CLA? If so, I'm happy to merge. If not, I may merge #399 instead.. thanks for the contribution @hyeomans! this functionality is also covered in #398 and that PR was made first, so i'm going to give the author of that change a chance to accept the CLA. if that doesn't happen soon, i'm happy to merge yours instead.. that was fast! i still really appreciate the contribution, but i'm going to close as duplicate.. @markcarey thanks for the issue report. you're totally right. i think a great solution would be to pass on all extra options to the API.. @markcarey i'd like to merge this PR in, thanks! i'm not sure why codecov is not reporting on the coverage and i've pinged their support about it.. forcing the merge. i don't think there's any point in waiting on codecov.. @nogurenn that seems like a reasonable enhancement request!\n\n\njust FYI, you could instantiate a WebClient without a token and invoke the web.oauth.access() method. i know you are asking for a static method.\nif we do implement this API, it seems like the most straightforward path would be instantiate a \"temporary\" instance of the WebClient and just invoke that method. otherwise, we would have to initialize a whole bunch of resources/state and that would duplicate the code in the constructor.. closing since this seems to work in v3, and v4 is now out. issue #482 is relevant. . CI is failing for an unrelated issue (see #405). for inspiration: this ruby based framework seems to be popular and mature. there's probably quite a few lessons we can take from it.. this hasn't been a useful venue for a conversation, so i'm closing. if anyone has thoughts they'd like to contribute, feel free to comment and we'll reopen.. another use case to possibly incorporate: #306. it seems the datastore wasn't exactly designed well to handle bot users. we should help developers reason about the differences between Bot IDs and Bot User IDs. we may also need to think about how this works in an XOXA token world (Workspace Token Apps).. another requirement: disambiguate private groups from MPIMs (or MPDMs). handle the G->C conversion problems.. @clavin thanks for speaking up!\nwhile i personally feel fluent in both reading and writing code with Promises, i'm still not sure about the larger node and JavaScript community. i get the feeling that the majority of developers are still unfamiliar with (and aren't interested in learning to write) promise-based code.\nthis motivates me to think that if we had to pick one, it would probably be callbacks. that goes against my personal preference, but if it was callbacks or both, which would you choose?\nPS. i know about util.callbackify(), but that's only available since node v8.2.0, and i assume the audience that's not interested in adopting promises is also mostly not building on the latest versions of node.. found a neat library that has the potential to power part of this solution: https://github.com/lukechilds/keyv. closing in favor if #428 . we're not 100% sure that this issue is reproducible in this package, but its better to be safe than sorry, so we're triaging as bug.\ndiscussed in the PR above, but the summary is we will solve this in v4 after we can drop support for node v0.12 and update our dependencies.. thanks for the PR. we're aware of this issue and we absolutely want to fix this, but its going to be batched into our next semver release. there's been some speculation about whether this particular issue is actually exploitable with the SDK code written as-is now, but its better to be safe than sorry. we're targeting January for the release.. @lmammino thanks. just to update those who are following along, we're still tracking for end of Jan for v4.. thanks for the report @jhale0810!\ncould you tell me which line number the stack trace contains for the BaseAPIClient frame? i can't tell what happened from the screenshot.\nalso, we've updated the docs to remove the code snippet you used. if the value is undefined because the environment variable is not set, then the constructor should succeed.. The v3 line of this project is no longer supported, so we're closing all issues that were specific to those releases. If this issue still persists in current releases, please open a new issue.. thanks for reporting. please see #428 for follow on steps.. @krewllobster thanks for reporting! your issue is beautiful and very clear \ud83d\udc4d \nso, the crux of this issue is already identified in #395, but you did add some relevant information. there's a few methods that i didn't catch in that issue, so i'll add them. also, the conversations.info  issue can be resolved with a quick update.\nregarding the dynamic argument type-checking solution, i'm more in favor of the solution in #381. that being said, i'm open to a discussion and can be convinced otherwise. unfortunately, we don't have a release planned until late January that will address that, but we would welcome and accept a contribution.\ni'll close this issue as a duplicate, because that's how i feel it mostly is, but i'll be sending a PR to fix the method where its easy. feel free to discuss any other points in this issue.\nupdate: im.info is not a documented method.\nupdate 2: users.list includes an options parameter, so you should be able to pass in include_locale.. hey @cbilliau thanks for the request!\nin general i'm \ud83d\udc4d  on getting JSON-based write methods implemented in the WebClient, but I'm confused about how you see documenting this functionality would look. users of this SDK wouldn't really see any changes because the API for interacting with the Web API through the SDK is identical. is there something i'm missing?\nas far as getting this implemented, at this point i see it as a low priority clean-up task since there's no new functionality here. if someone is keen and wants to contribute though, i'd be happy to merge that in.. thanks for the analysis folks. i agree, it would be great to upgrade ws. i'm hoping to attack this (and other dependency updates) after we ship v3.15.0. i don't think updating this package would break the module's API since this module isn't exposed directly, but if its grouped with updating many other deps, the total effect is likely to change some behavior and i feel better about doing it in a major version bump.\nhow does that sound?. @t3h2mas that's exactly the issue, unfortunately.\nmost users find the web client's chat.postMessage just as simple (if not more simple) to use as a workaround.. @markcarey @Finkes @Elyx0 apologies for the inconsistency. its one the major the challenges we have been facing by manually adding code for every facet (web API method).\nunfortunately, when mistakes like these land in the API, its impossible to revise them in the same major version number. but we take this mistake and the time you developers lost due to it very seriously. that's why for the next major version (which we are ramping up development effort for right now) will do two things to rectify this in the future:\n1. we will favor an API where the order of the arguments does not matter. the proposal for this is described in #381 and your feedback is welcome.\n2. we are investigating the feasibility of programatically generating our facet code using the recently released OpenAPI spec.\nfor now, all we can do is document the inconsistencies to hopefully save others from wasting their time. i will now change this issue to capture this documentation item. i'll close related issues as duplicates of this one.. @khuezy thanks for filing the issue. i'm not sure i completely understand the request. are you asking for the API to give you an option to not send any mentions in the user's Slack app (or web app) when the topic is changed?\nif so, that's not a feature request for the SDK, but more of a feature request for the Web API. i'm happy to take feedback to the team. can i ask more about why the notification is an issue for your users?\nthere's a few other ways i can think of to get a countdown that's less \"visible\". how about a slash command that responds with an ephemeral message?. @khuezy thanks for the feedback! i've made the folks internally aware, and i'll update this ticket if we make any decisions about this feature request. for now, since this repo is focussed on SDK development, i will close this issue.. @DominikPalo thanks for the contribution! if you can address the comments in the review above, i'd be happy to merge these changes in :). \ud83d\ude4c thanks for the quick turnaround! i'm hoping to deploy these changes tomorrow.. @bertrandom this is great! i have a couple questions for ya.\n\n\nthe user argument isn't documented on the reference. will it be? if so, when? if not, then i'm not too keen on adding \"hidden\" arguments into the SDK's API. if those arguments change, we will break users, and hidden arguments are subject to change with no announcement.\n\n\nwe've had a number of issues trying to \"upgrade\" a facet from having only explicit position arguments to later accepting an object for optional arguments. i'd like to future proof where we can. this would be API gymnastics, but how do you feel about an implementation that supports all these call sites?\n\nweb.users.identity()\nweb.users.identity(callback)\n~web.users.identity(user)~\nweb.users.identity(user, callback)\nweb.users.identity(user, options)\nweb.users.identity(user, options, callback). Update: i'm dumb.\n\nuser would be an optional argument, not a required one (which we translate into positional arguments in the facet).\nwe actually want to support these call sites then:\n  *  web.users.identity()\n  *  web.users.identity(callback)\n  *  web.users.identity(options)\n  *  web.users.identity(options, callback)\n. thanks so much @bertrandom!. thanks for catching this @pine! if you agree to the CLA using the link in the message above, i'd be happy to merge.. this looks good to me except for the linting errors and the missing opts argument.. Thanks!. Thanks!. Hi @soramichi! This is an interesting use case that I hadn\u2019t previously considered. Are you using webpack on your server side code? Or are you trying to use this SDK from the client (browser)?. closing as dup (even though this issue came first) of #466. that issue has more information regarding solutions.. good catch!!. thank's for the report. i just noticed this myself as i was writing the example here: https://slackapi.github.io/node-slack-sdk/rtm_api#subscribing-to-presence-updates.\nsorry about the misleading code comments. the truth is these values used to be generated via a script, but for the last 18 months have been maintained by hand. that leads to some of the newer event types and facets going out of date.\nat the moment, the workaround is to just use the strings directly as the event names (as i did in the example i liked above).\ni'm happy to take a PR to fix this. it would be awesome if the PR could also update that example, too! i'm not prioritizing this into a feature release at the moment because the majority of our development bandwidth right now is focused on shipping v4.. thanks for point that out @gunar. you're right, and the docs don't specify whether the retry configuration should apply for rate-limited requests. the key information is buried in the code comments:\nhttps://github.com/slackapi/node-slack-sdk/blob/1dfe3ea63bf6bf803ba6031790bfd22c7bab41e0/lib/clients/transports/call-transport.js#L141-L145\n@rodrigo4244 can i take this issue to mean that you have a feature request for turning rate-limit handling off in the WebClient?. @rodrigo4244 lets try to define what \"working properly\" might mean for you. do you simply want an on/off switch so you can say \"do not retry any rate-limited requests\"? or do you want the existing retryConfig to apply to rate-limited requests just the same as requests that fail for other reasons (network interruptions, minor service downtime, etc)? or do you want a fully independent rateLimitRetryConfig that applies differently to rate-limited requests (leaving retryConfig to only apply to the other failure reasons)?. thanks for the feedback @rodrigo4244 and @gunar! i'm happy to work on getting this feature into master on a v4 version of this package. if you'd rather see it landed on v3, please let me know so we can make another issue to track that separately.. Hey folks, I've refactored the code where retries occur in a substantial way for #596. This has opened the door for me to build a new option to address this need too. I'd like to confirm with you all whether you'd be satisfied by what I'm planning on adding.\nproposal: a new rejectRateLimitedCalls boolean configuration option for the WebClient constructor. the default would be false, but when set to true, the client would return a rejected promise (or invoke your callback) with an Error. This error would be of interface (in the TypeScript sense) WebAPIRateLimitedError. The error would also have a retryAfter property, that contains the number of seconds to wait, according to the HTTP response from Slack.\nEdit: Changed interface from WebAPIPlatformError to a new WebAPIRateLimitedError.. thanks for digging into this @clavin! it seems like we have a reasonable workaround for v3, so i'm hoping to land a fix for this in v4. it unfortunately uses the same trick to coerce the body to multi-part content type. maybe we can come up with something better.\nmy proposal is to just special case the method name files.upload. this feels sloppy to me because i'd like the apiCall() method to stay as generic as possible. the risk is that someday there may be another method that accepts files in the same shape of arguments as files.upload and then we have to grow the list of special cases. but still, i can't think of anything better.. you're totally right! thanks for pointing this one out.. this didn't make it into v4. my understanding is that its totally dependent on the personal preference of the developer. yes, you can gain efficiency, but no its not required. if this is a feature you'd like to see landed, please +1.. @clavin i really appreciate how thorough your contribution is. There are some larger changes happening in the next semver:major release and i'm not sure the current events dictionary is going to make it into that transition. if you're willing to change this PR to only additions to make it a non-breaking change, i'm happy to merge and release it in a 3.16.0 release.. thanks @clavin!. welp, it seems like this is pointless. GitHub proxies all image requests through an anonymizer. see: https://help.github.com/articles/about-anonymized-image-urls/. @gunjpan, i can't reproduce this problem. can you try running the following command to see if its still a 404: curl https://registry.npmjs.org/@slack%2fclient? if it outputs a big JSON blob, you should be good. if not, this might be an issue on your system (firewalls?). to further investigate could you try installing some other package (e.g. npm i express)?. stupid question: did you try npm i @slack/client again after the rimraf success?. hi @baybal. I'm sorry we didn't meet your expectation on the quality of the documentation. I admit, the reference docs are a little lacking.\nthe example in the guide for WebClient is a little more useful: https://slackapi.github.io/node-slack-sdk/web_api#uploading-a-file. but specifically, i'm not sure what you expected in terms of mentioning an example file? isn't it obvious that if you're trying to upload a file, that you need a file? also, i've incorporated a fix in 3.15.0 so that you shouldn't need to use the fix that you mentioned from #307. I hope the guide's explanation is complete.\nnow that we've released v4, this issue might be a moot point. we're still supporting v3 for at least another 60 days, but i suggest moving your application to use v4 as soon as you can. the old docs should be back up after #486 is fixed. if there's anything you think we can specifically improve, i'm happy to take suggestions.\nif you have any improvements in mind for the v4 docs, or any questions about using the file related methods, please open a new issue so we can triage these things separately.\n. The v3 line of this project is no longer supported, so we're closing all issues that were specific to those releases. If this issue still persists in current releases, please open a new issue.. facets have been removed in v4. i'd be happy to merge into the v3 branch, if you can rebase this PR onto that.. i'll do a release for v3 on monday morning!. @clavin thanks for digging into this!\nin my development branch of v4 with TypeScript, i migrated from using pkginfo to using pjson. that gives me a loose type definition so it resolves one problem i was having, but it works about the same as pkginfo (depends on __dirname), so this issue would still exist.\nthe two options i see right now are:\n1. convince the typescript compiler not to complain on import * as pkg from '../package.json';. the error in my relatively vanilla project configuration is Cannot find module '../package.json'.\n2. as @clavin said: write the abbreviated package metadata to another file on build, and then worry about how to import that without the typescript compiler complaining.\nthese two solutions seem roughly equivalent, so i'm inclined to go with the first.\ni do wonder though, is there some conventional behavior of all major bundlers (browserify, webpack, rollup, etc) to \"blacklist\" a dependency (or transitive dependency) such that the bundler excludes it and replaces it with a stub? i see that browserify uses the package.json field \"browser\" to accomplish this, but is that respected across bundlers? if so, one very hacky but easy to implement solution is to just wrap a require('../package.json') in a try/catch, and silently fail building the version string. this is used for instrumentation purposes, but would have no functional impact. it still requires this package's maintainers to implement a fix.. relevant: https://hackernoon.com/import-json-into-typescript-8d465beded79. i'm going to tag this issue as v3 so that we can separate the pkginfo problem from the pjson problem.. i'd like to move forward with the fix that @clavin has suggested (just requiring the package.json directly).\ndoes anyone anticipate problems using this in v3? i've seen some clever, webpack-specific solutions that involve the IgnorePlugin and DefinePlugin, but i think they won't be necessary.. The v3 line of this project is no longer supported, so we're closing all issues that were specific to those releases. If this issue still persists in current releases, please open a new issue.. thanks for sharing the idea! also, for clarification we are talking about the WebClient here, right?\nmy first impression: i'm not a huge fan of dynamically generated (via the platform's response) event names. would something like the following still interest you?\njavascript\nweb.on('error', (e) => e.data && e.data.error === 'is_archived' && disableSubscriptions());\nwe could also consider going one step further, by emitting specific ErrorCode types:\njavascript\nweb.on(`error:${ErrorCode.PlatformError}`, (e) => e.data.error === 'is_archived' && disableSubscriptions());. cool! this isn't on the immediate action list right now, but if a PR shows up, I'd gladly merge \ud83d\ude04 . @bkeepers @wilhelmklopp i have a question for you both on the use case. would it make sense for the 'error' event to fire for each retry, or when the retires are complete and the client is giving up? i'm leaning towards the latter, since you probably wouldn't expect to handle duplicate errors for the same underlying call to WebClient#apiCall() (or any of its named aliases).\nthis implies that if you want to know about the error relatively soon, you'd have to utilize the retryConfig option on initialization. the default retry policy could (in the worst case) retry for up to 30 minutes (maybe we should add a feature so this can be overriden for individual calls).\nalso, as alluded to in #451, if the request is being retried due to rate-limiting, the client doesn't follow the retryConfig policy. right now, we queue up essentially a new task to make the API request. you can already observe this using the 'rate_limited' event, so i'm leaning towards no 'error' event for rate limit triggered retries. does that sound right?. the best place to find information to help you migrate your bot is the dedicated migration guide.\nthe documentation in the README.md file, and on the website is updated a handful of examples. if there's anything in particular you find missing, do let us know.\nits true that the examples/ directory was removed. they hadn't been kept up to date in quite some time, and i hadn't seen issues reported, so i figured that people were using the documentation instead. sorry about that!\nthe docs/ directory is still in the project tree. can you double check that you see it?. @dustingraves oh gosh, thanks for letting me know!. @dustingraves #476 is a crude but effective fix, for now. i'll make a ticket to track getting the method aliases back into the docs.. good catch!!. You're right, it is supposed to work by getting the name and version of @slack/client. I'll have to take a look into how pjson is not doing what I expected it to do. This is definitely related to #466.. the solution i'm proposing involves directly requiring package.json (same as #466). i'm open to other ideas. otherwise i anticipate having a fix out early next week.. thanks for reporting! this is indeed an issue. let me know if you'd like to submit a PR. if not, i'd like to get this fixed within the next day.. today!. i've left a feature request with ts2jsdoc for documenting events: https://github.com/develar/ts2jsdoc/issues/6. The v3 line of this project is no longer supported, so we're closing all issues that were specific to those releases. If this issue still persists in current releases, please open a new issue.. thanks so much @clavin, i'm happy with this fix. i was thinking about doing roughly the same thing. the tradeoff here is that argument names that have typos (chanel instead of channel) will not trigger an error. that's less than ideal, but i think once all the methods have an interface for their arguments, we can try to remove AuxilaryArguments (but we might want to preserve it for direct calls to .apiCall() so that can always be seen as an \"escape hatch\" if you know what you're doing).. Hello there! This error is expected if you're running the same code from the v3.x series. This package has had a few big changes in v4 that we described in the Migration Guide. The DataStore has been removed, so if your code depends on it, there's a more specific migration guide that should also be helpful.\nPS. That's a pretty cool app you got there. We might even want to use it here at the Slack office.. Cool! I'm not sure anyone here will have the time to contribute a migration PR, but I've let the team know in case someone is interested.. What kind of error are you getting? Is this in a TypeScript project, and is the complaint from the compiler?. thanks for the details! this is the same issue as #484, so lets use that to track the fix.. @bilby91 yep! and lucky for us there's an existing PR that i quite like. so we should have a fix out pretty soon!. Thanks for reporting. We're aware of the issue and are tracking it in #482. I hope to have a fix available in the next couple days.. thanks for reporting! this was a tricky bug, but its actually already been fixed via #480. the underlying cause was a silly typo (util instead of ./util).. @glajchs: thanks for being willing to run on the bleeding edge and giving us constructive feedback. This is very valuable to the community. \nThat\u2019s not going to work because the repo doesn\u2019t contain the final built JS. Instead, you could clone the repo to another local folder, npm install to download the dependencies, and the npm run build to convert the TypeScript to JavaScript. Then in your package.json, specify the path to that local folder instead of the git URL. \n\"@slack/client\": \"file:///home/user/src/foo/bar\". This is quite the ambitious proposal, I like it! In spirit, I'm totally aligned with the vision of providing useful static analysis checks that save our users the round-trip to the docs in order to understand which combinations of arguments are valid, and which aren't. The intention to make the argument types as self-describing as possible is why I left comments like the following in the code: https://github.com/slackapi/node-slack-sdk/blob/c49ba78068c359e2a75951f69198256d20bfa895/src/methods.ts#L200.\nI think the ideas outlined here serve that vision very well. I have a few concerns, but i think they are addressable:\n\n\nOut of practicality, I think its more important to finish defining the existing argument types with some basic level of fidelity (all argument names specified, required/optional expressed, common \"protocol\" argument sets abstracted). #505 \n\n\nWe should also think about how we might be able to machine-generate type information. Another part of our vision is to get out of the business of hand-tweaking these types, but rather using a process to generate them from the OpenAPI Spec. If we take a look at chat.postMessage's arguments, to follow the example above, you'll notice that there's no metadata about which combinations of arguments are acceptable (except in the description strings). I'm not expert on the specification, but from my read, I don't see how this even could be expressed. I'm not trying to say that the OpenAPI Spec should be a limiting factor, but we should plan on how to build a process that is in harmony with it. This could mean the first pass of the process generates the basic information, while we maintain a smaller set of hand-tweaked enhanced types that apply over those in a second pass. This is just an early idea.\n\n\nWe need to give a nod to readability of the source. I don't consider myself a sophisticated TypeScript developer, but one with an intermediate level of experience. I will admit that the conditions (&s, |s, and ()s) are non-trivial for me to parse. If that's the case for me, it could be potentially much worse for others. Are there other means of expressing the same information in a syntax that is more readable? i explored the got library definitions (not perfect) and noticed the technique of using generics to help expand the type for options. I don't think that would work for these argument types, but I just wanted to spark some creativity. I do think using the optional type argument as you mentioned above is a step in the right direction.\n\n\nHow might these input types relate to a future output type that we could provide? right now, all properties of the return value (aside from the generic ones in WebAPICallResult) have to be asserted to exist before they can be used, and this is annoying. This might be a place where we need to introduce generics.\n\n\nHappy to continue this discussion! When we have a specification for the work we actually want to merge, lets start a new enhancement issue. A change this large would definitely warrant a minor version increment.. some thoughts:\n\nOverload Modification\n\nThis is an interesting proposal. I like it, but I have a competing idea. Here's the challenge:\n```\n// first form\nweb.chat.postMessage(argument); // this should work only if the argument is strictly of type ChatPostMessageArguments\n// second form\nweb.chat.postMessage(argument); // this should work only if argument is strictly of type MyInterface, and MyInterface extends ChatPostMessageArguments\n// third form\nweb.apiCall('chat.postMessage', argument); // this should work only if argument extends WebAPICallOptions, and since this is an empty interface it basically means it cannot be a scalar (number, string, boolean) or an array\n```\nI think these could be all the use cases we want. for an ordinary user, you'll just use the first form. If you're an expert you'll either use the second or third form. The second form works if you have some knowledge of a hidden argument but you still want the safety of the type system to do some work for you. The third form works if you have some knowledge of a hidden method so basically all bets are off.\n\nOpenAPI Compatibility\n\nEven if we utilize the schema options, it sounds like we'd have to \"expand\" all the conditional dependencies into a set of schema for all the valid combinations (e.g. MessageAttachmentWithHeader, MessageAttachmentWithHeaderWithFooter, etc). I say this because the only mechanism I see that can do the sorts of conditions we need is in the composition and inheritance section, and i think it might be too simple to describe our formats. Again, I'm not an expert on this, so I could be wrong.\nWhat I am pretty sure of, is that we are highly unlikely to get that kind of detailed specification out of Slack's official OpenAPI spec. It's just too intricate and it would be a nightmare to maintain (given the knowledge I have about how that schema is built). So I think the logical next step is to explore/prototype a sort of 2-pass process where we could start with the OpenAPI spec and decorate/modify the types it gives us with as much information as we can about those object shapes.\n\nMessageAttachment sample\n\nWow, the MessageAttachment is probably one of the most complicated structures in the entire API. Kudos to you for taking it on to describe it.\nI still think the way you've implemented the type is hard to read, and therefore error prone. Let's take this part for example:\n(\n  // author properties: `author_link` and `author_icon` depend on `author_name`\n  {\n    author_name: string;\n    author_link?: string;\n    author_icon?: string;\n  }\n)\nI don't think this is accurate. The docs say author_name must be present for author_link or author_icon to also be present. I have to start expanding this in my head:\n{ author_name: string, author_link: undefined | string, author_icon: undefined | string } | { author_name: undefined | string, author_link: undefined | never, author_icon: undefined | never }\nsimplify, which requires memorizing the identity rules for the type system. i believe SomeType | never => SomeType\n{ author_name: string, author_link: undefined | string, author_icon: undefined | string } | { author_name: undefined | string, author_link: undefined, author_icon: undefined }\nwell now these two types completely overlap and it reduces further\n{ author_name: undefined | string, author_link: undefined | string, author_icon: undefined | string }\nI think we could fix this by instead using:\n(\n  // author properties: `author_link` and `author_icon` depend on `author_name`\n  {\n    author_name: string;\n    author_link?: string;\n    author_icon?: string;\n  }\n)\nI can't even be sure this is right until i evaluate it with the rest of the expression. The concern is that it took that many mental steps for a reader to figure just this part out, with quite a bit of set theory and type system knowledge memorized (or looked up). And I'm not even done.\nOn top of that concern, do we even know what the Intellisense completion offers when the structure is that complicated? If the real-time type hints show me that entire blob on top of my cursor, I'm likely to be more confused about what is valid than the structure we currently have. Maybe this can be mitigated by giving the sub-expressions (things inside the ()) a name, and joining the names with the logical operators.. Wow, the generics example is very interesting, and does go a long way to improve the readability. They seem so useful that I'd almost suggest publishing them in a dedicated package, with tests to prove their properties, and then we may take that package as a dependency.\nAlso, thanks for investigating the Intellisense capabilities. I agree that the hover-over hints are not ideal, so I think we should provide some feedback to Microsoft about that. (Partial is probably treated differently because its a built-in, but I'm not sure I like that.) I also agree that the completion hints representing the fully expanded type makes the most sense. I haven't given it a shot yet, but I'd also like to know how useful the error messages are when you don't get something right. I believe the compiler might give you every step of the expansion in the error message, so the generics would be helpful there too.. You\u2019re totally right that this is broken in v4.0.0! We had an earlier report (#479) and have since fixed the issue. We\u2019re working on getting a release out soon. I\u2019ll close this ticket as duplicate. . @nxz91 thanks for reporting. are you in a package that either doesn't have a package.json, or the package.json lacks a \"name\" or \"version\" property? If so, this is probably a duplicate of #478 . @KharitonOff thanks for your contribution! can you help clarify by answering my comments above?. @KharitonOff its a small world. I just noticed that you work on CLA Assistant (which we use) and you helped review an implementation for a feature i requested, way back when (https://github.com/cla-assistant/cla-assistant/issues/246). \ud83d\ude4c . This is so great!! Extra thanks for cleaning up the style issues and some incorrect behavior in the existing tests.\nI'm going to follow up with a PR that addresses the \"note to self\" comments above.. thanks for the report @jdforsythe!\ni think this issue has already been resolved in master, and it sounds like you are willing to run a patched version, so i suggest incorporating #480 into your code and see if that resolves it.\notherwise, we should have a release out that includes that fix today!. BTW, it looks like from your usage that you'd prefer a Promise-based API. If you want to contribute code to this project, I'd be happy to accept that! we could do essentially the same thing that WebClient.apiCall() does to detect whether to return a Promise or to invoke a callback.. FYI: the oauth.token Web API endpoint will likely be consolidated into oauth.access, and then disappear.. tested locally in a project without a \"name\" or \"version\" defined in the package.json with this script:\n```javascript\nconst { WebClient } = require('@slack/client');\nconst web = new WebClient('xoxb-REDACTED');\nconsole.log(web.userAgent);\nweb.channels.list()\n  .then(console.log)\n  .catch(console.error);\n```\noutput:\n@slack:client/4.0.0 node/8.10.0 darwin/17.4.0\n{ ok: true,\n  channels: \n   [ /* SNIP */ ],\n  acceptedScopes: [ 'channels:read', 'read' ] }. taking a look at the codecov failure, it looks like the uncovered part of the diff is in typically hard to reach code paths - ones that are not covered for the same reason in WebClient. i think this warrants an exception to the checks so i'm overriding that block.. @bilby91 I\u2019m glad to see your migration continue!\nWe\u2019re having a discussion about a few different ways to get richer types in another issue. Specifically, I mentioned exactly what you\u2019re asking for in point (4) in this comment. I\u2019d really appreciate your participation in that discussion so we can potentially come up with the steps to get there and divide the work. . while i was able to reproduce this, this actually is the expected behavior. you're sending a message with the channel set to a user ID (Uxxxxxx). the docs say the following:\n\nYou can send a message to a private group or direct message channel in the same way, but using a Group ID (C024BE91L) or DM channel ID (D024BE91L).\n\nso what you'll need to do is invoke im.open to get a DM channel ID.\njavascript\nasync function getUserId(user) {\n    for(let member of (await web.users.list()).members) {\n        if(member.name == user) {\n            return (await web.im.open(member.id)).channel.id\n        }\n    }   \n}. thanks for fixing this!. \ud83d\ude2e \nthis is so amazing. thanks so much @clavin!. i like the fact that this makes sending binary data arguments via the WebClient less dependent on the argument name or method name (this fixes bug #452 - and as you said enables users.setPhoto to work).\ni'm not sure how i feel about creating the new top-level export of WebClientBinaryData since it seems a bit heavy for the functionality it actually adds -- which is a randomly generated filename if none is specified. IMHO this could be achieved simply by swapping out the this.logger.warn() call for the bit of code that generates the name. is there some other benefit of this type that I am missing?\ni see these two changes as orthogonal and so i'd like to discuss them separately (unless you see some reason they make more sense being grouped into one change).. > It's important to remember that WebClientBinaryData is not only there to generate a name, but also store the name and the file data--it's a container that can be recognized.\nSure, its implemented as a container, but does the user care? The user just wants to use the method. Wrapping things up in another container is an additional cognitive step towards reaching that goal. AFAICT the ability to be recognized is only to the benefit of the RTMClient, not to the user or the user's application. However, the RTMClient can just as easily recognize a Buffer or a Stream (as your PR already shows). For instance, I can't imagine a scenario where an application would keep around a data structure of WebClientBinaryDatas around.\n\nThe container approach makes changing the implementation somewhat trivial, as seen in this PR: just wrap any binary parameters in the container, then only supply options to form.append for anything that's in the container.\n\nI guess my point is, its more trivial for the user without a new type. Just supply a file argument that has the binary data and optionally a filename argument to override what may or may not be specified in the binary data (the detection code inside the WebClientBinaryData constructor seems useful for this).\n\nIn contrast, I find the above breaks some kind of unspoken rule about the API method bindings, wherein we've added our own unique structure to the method...\n\nI agree, I'd like to preserve the structure as much as possible, the chief reason being that the general reference documentation at https://api.slack.com/methods should map cleanly to the methods and arguments presented by this library.\n\nYou make multiple appeals to the idea that the WebClientBinaryData container \"attaches\" a name field to the binary data, and that's why this container is useful. I just want to illustrate that the Slack Web API (and HTTP) already solve this problem:\nIn the multipart/form-data body, each part has a header. For file uploads the part's header contains name=\"file\". It may (and is recommended) also contain filename=\"foo.txt\". If you think of that part as a \"container\" it wraps both the file and filename. The Slack Web API allows for an additional part, whose header has name=\"filename\" that behaves as an override for the (only optionally present) filename attribute in the part I previously described.\nNow from the perspective of this package, the most clean mapping to HTTP is to map the file argument to the part with name=\"file\" (lets call this part A), and the filename argument to the part with name=\"filename\" (lets call this part B). When the value of the file argument is some binary type that has hints of its filename, use some \"magic\" to populate the filename=\"\" attribute of part A.\nIf there are no hints, that's fine, its optional anyway. The filename argument already allows the user to specify an explicit override anyway.\nSo you see, file on its own is a container.\n\nIt might be useful to compare this implementation with the one I'm theoretically suggesting. I'm happy to open a new PR based on this branch to illustrate, and then we'd have something concrete to compare.\n\nedit: i've learned that the statement about the filename attribute being optional isn't entirely correct. while in HTTP it is optional, Slack doesn't accept parts with binary data that don't include that attribute.. @clavin #519 is where I'm suggesting we go with this. please take a look if you have a chance. if we can agree on it being a valid next step (whether or not you'd still like to go further with the new class), then i'd like to make a release today (4.1.0). there's some demand for a release that contains landed patches like #500.\nupdate: i'm pretty happy with #519 now, would like to merge ASAP.. Thanks for reporting! Can you share the contents of your tsconfig.json file?. One solution I can think of would be to move the @types/node dependency from devDependencies to dependencies. However, this worries me because it would be technically incorrect when running on older node versions. In practice, as long as our tests passed on all supported versions of node, any issues that stem from that should be caught before a bad release is made. It would be up to the code maintainers to make sure all the older versions of node are considered.\nRight now, I prefer this solution over copying the type from the @types/node package into this package, because keeping definitions in sync is a worse problem.. There is some guidance regarding when to put a @types package in dependencies versus devDependencies in the following issue: https://github.com/Microsoft/types-publisher/issues/81\nThe advice I see there is to put @types/node in dependencies, but to use a specifier like >= 6. I don't think this would help in our case, because the consumer of the package would presumably install @types/node@6.x, in which util.callbackify still will not have a type.\nI think its worth implementing the solution in my previous comment because at worst, the consumer of the package will end up with 2 versions of @types/node in their node_modules tree, but the right version will be exposed to the right packages. As long as at runtime there is an implementation that works on lower versions of node (checked by CI) then we should be safe.. @lipp i haven't seen this issue myself, but it would be expected behavior that the presence updates stop emitting after a reconnect.\ncan you try placing the rtm.subscribePresence(ids) part of your code inside a handler for the ready event? i'd love to know if that fixes your problem. while you're at it, if you can turn the logLevel to debug, it might help us track down any other unexpected issues.\ni just noticed this would also be a problem in the following documentation example: https://slackapi.github.io/node-slack-sdk/rtm_api#subscribing-to-presence-updates\nlastly, i can imagine implementing a feature to more intuitively handle presence subscriptions in RTMClient. besides issuing the presence_sub message on reconnects, the client could also store the list of user IDs for which a subscription is active and provide methods to add or remove IDs to that list. i'll start a new ticket to capture this idea.. @lipp any news?. blocker: i just tried using this implementation with a Buffer (with or without a filename argument) and it failed with the following error:\n{ ok: false,\n     error: 'no_file_data',\n     acceptedScopes: [ 'files:write:user', 'post' ] } }. okay, i've learned an interesting thing. the following is true for files.upload (i haven't checked against other methods, but i will):\nif in the multipart body, the part that contains the binary data does not specify a filename attribute in the header, the upload will fail. if another part contains a filename that will override whatever was specified in the filename attribute of the first part.. and the same is true for users.setPhoto. that is that if no filename attribute is specified, it will fail. in this case, there's no need for an additional filename part, since the filename is generated by Slack.. side note: love it when you implement a new feature with more deletions than additions \ud83d\udcaf . Hi @benjamin-hil \ud83d\udc4b \nUnfortunately, there's no event dispatched for the user canceling submission of a dialog at this time. We've seen this feedback and agree that this is something we should provide. Keep an eye on our blog and changelog to find out when updates are made to the Dialogs API.. @twiclo from the stack trace, it looks like your using v3 of this package, and the docs have been updated to v4 - see the migration guide for differences. \nUnfortunately, we don\u2019t have the older v3 docs hosted anywhere, but we have an issue open to track this. #486. Oh sorry for the confusion. That\u2019s your version of NPM. I meant the version of the @slack/client package, which is usually specified in your package.json file under the key dependencies.\nIf you want to upgrade to the latest you could just run npm install @slack/client@4. It should handle updating your package.json as well. . hey @kioksy,\ni wasn't able to reproduce this issue. could you provide an example of code that shows this problem?\nhere is what i used:\n```javascript\nconst { WebClient, RTMClient } = require('@slack/client');\nconst token = process.env.SLACK_BOT_TOKEN;\nconst web = new WebClient(token);\nconst rtm = new RTMClient(token);\nrtm.on('message', (event) => {\n  if (event.text === 'hello') {\n    web.chat.postMessage({\n      channel: event.channel,\n      text: 'hello to you too!',\n      attachments: [\n        {\n          text: 'This is powered by https://slack.com|Slack'\n        }\n      ]\n    })\n  }\n});\nrtm.start();\n```\nand here is what it looked like in Slack:\n\n. @gunslingerfry thank you for reporting. it's difficult to know where to start here, but i will try to reproduce this issue and see if we can identify the cause. i think the biggest clue is the socket is in the closing state. if you wouldn't mind, since you're able to reproduce the issue, can you increase the logLevel in your code to debug and share the logs?. @gunslingerfry thanks for the stacktrace. the most valuable bit i see is A websocket error occurred: Unexpected server response: 503. i'm going to look into what the possible causes of that are, and how we can anticipate and handle it properly.\ncan you show us what was occurring in the logs before that point? i'm trying to determine which state each of the objects were in so i can trace or reproduce the issue. please redact anything that is sensitive to your app/users.\nat this point this issue seems identical to #531, so i'm going to close this one as a duplicate. the only reason i'm choosing that one is because it has more logs.. @gunslingerfry have you tried v4.2.0? Any better than the previous version? At the very least we should have more meaningful logging. . @gunslingerfry i'm sorry you have to make such a radical jump. we have a fix on master that's i can release today. if i get that out in the next couple hours, would that be helpful?. @brianeletype sorry for the wait, we'd like to release the next version ASAP too. right now i'm holding on the investigation of #531 since its been observed in the wild by a few developers and it seems pretty critical. if we think fixing that is going to take longer a day or two, then we'll release without fixing it, definitely before the end of the week.. Can you provide a script that exhibits this memory leak issue? I\u2019ll do some memory profiling on the script to narrow down the cause of any leaks. . yay! that's a tricky one. i'm glad you were able to get to the bottom of it \n\n. thanks for finding this inconsistency!. thanks for reporting @malonecm \nthis sounds like its potentially related to #527, since they both have to do with the websocket being in a closing state unexpectedly. we're a little low on data around how this would happen, but that stack trace is definitely useful, thanks for that.\nare you able to increase the logLevel in the RTMClient instance and share those logs in case you see this happen again? i think it would be nice to compare to #527 and also help me trace the steps in order to reproduce.. @malonecm looks like you found another issue to me. the new one seems a little more insidious, too.\nfor this second one, it would be useful to see the log statements from the KeepAlive class. did you filter those out or turn them off specifically? if you're able to get in there and tweak things, mind turning them on too for the next occurrence?. it looks like the OP in #527 also had a similar issue with KeepAlive as demonstrated in the last log and stacktrace. i'd like to combine these two issues since they seem related.. we think v4.2.0 fixes this issue. please update and give it a try! if not' feel free to comment and we'll reopen.. @malonecm have you tried v4.2.0? Any better than the previous version? At the very least, we should have more meaningful logs now. . thanks!. @FrancescoPolitano thanks for bringing this to our attention. it looks like you are using the example from the @slack/events-api documentation, which has not been updated to use v4 of this package. i'll make a note of this on the issue tracker for that package.\nin the meantime, the fix is to change the postMessage line to the following:\n// Respond to the message back in the same channel\nslack.chat.postMessage({ channel: message.channel, text: `Hello <@${message.user}>! :tada:` })\n  .catch(console.error);. @FrancescoPolitano the value that line is referring to is part of the options that you have passed in, so it seems like you need to look closer at what you've passed in.\nfor example, an options parameter like the following would cause the same kind of error:\njavascript\nconst attachment = {\n  text: 'My attachment',\n  fields: [\n    {\n      title: 'Something',\n      value: attachment,  // ERROR: this is a circular reference, JSON.stringify() will fail\n    },\n  ],\n};\nweb.chat.postMessage({\n  channel: 'C12345',\n  text: `Hello, world',\n  attachments: [attachment],\n}).then(console.error);\nThere's no good way to turn a circular reference into a JSON object to send to Slack. It's likely a bug in your code. Take a closer look and try to flatten the structure as much as possible.. @franckbrignoli Great find, and thanks for sending the PR!\nWould you mind implementing a test in src/IncomingWebhook.spec.js?\nAlso before we can merge, we\u2019ll need you to sign the CLA. . \ud83c\udf89 . @shanedewael i know there's no testing rig for RTMClient at the moment, but it would be useful to know if you're done manual testing, and what that manual testing code might have looked like.. @shauryam it looks like you\u2019re trying to use this package with the v3 API after updating to v4. \nCheck out the migration guide to update your code accordingly. Alternatively you could downgrade your version of @slack/client to the latest v3. . thanks for beating us to it!. looks great to me!. @DominikPalo these are all great suggestions. thanks for your in-depth review. if anyone has a PR to address these comments, i'm happy to merge.. @clavin thanks for digging into this! it seems like you've already spent the time to reproduce, so i have a question: are you sure its the template literal that causes the build failure, and not the pkg.name or pkg.version reference which occurs on the same line?. @clavin here's one thought i just had: if we set up a new tsconfig to extend the current one but change the target to es5 (trivial), and on npm run build add an es5 compatible build into a different directory (let's call it dist-es5), then we should be able to use the \"module\" key in package.json, right?\npros:\n*  should help solve the immediate issue without waiting for react-scripts@2\ncons:\n  increased build time (negligible)\n  package size cost: anyone who runs npm install will need to download some more bytes. this shouldn't impact apps which bundle, since the bundle will only capture the bytes they specifically need. i'd like to say this is negligible too, but can we think of an audience that would specifically care about this?. that's some good food for thought.\ni \ud83d\udcaf agree that compiling to an ES5 target in the main version is a loss we shouldn't tolerate. the downlevel support for many JavaScript features is much worse from a performance point of view than the native VM implementation. i wasn't suggesting this outcome.\ninstead, i was suggesting the \"module\" target be ES5 compatible while the \"main\" target remain compatible with the oldest engine in package.json's \"engines\".\"node\" (as is done today).\n@clavin's argument makes a ton of sense to me. on top of that, it would be hard to define how long we need to support the alternative \"module\" build (probably cannot remove until semver:major bump). and lastly, if the \"module\" key in package.json ends up being adopted for ESM support (officially or unofficially), we would have degraded the performance of that build by constraining it to ES5 compatibility.\ni'm going to rule in favor of keeping the build as-is, and pointing users to the solutions mentioned above. @Coolranch, please speak up if there's any concern of yours i missed.. @clavin thanks for the update!\ngiven this new information, i think we can close this issue. the preferred fix is to update to react-scripts@2 in the application.. @alcmontejo: thanks for updating us! So was the fix just to upgrade from an old npm? Or, was it something related to the escaped /?. resolved in #590 . @royts i just tried to reproduce this issue and was not able to. i had to slightly modify your example because it looked like there's a typo retrun instead of return. also, i added logging to see the result. could you make the same changes and let me know if you're still having a problem?\n```javascript\nconst { IncomingWebhook } = require('@slack/client');\nconst webhook = new IncomingWebhook('https://hooks.slack.com/services/XXXXXXXXX');\nwebhook.send({text: 'some content @ankur', link_names: true}, (err, result) => {\n  if (err) {\n    // report error\n    console.log(err);\n    return;\n  }\n  // report success\n  console.log(result);\n});\n```\nanother issue to check is if you actually have the right username, because Slack is saying farewell to usernames in favor of localizable and easier to personalize display names. i recommend you reconsider using the link_names option at all. its tied to the now outdated concept of usernames, so especially if this is new code, you should instead try to create mentions from user IDs. if you need help with how to achieve that, let me know!. thanks @DominikPalo, this looks great to me.\n@clavin, since you last edited these lines, thoughts?. awesome! since this is a step in the right direction for #496, i think it should be \ud83d\udc4c to merge.. @bmajz thanke for reporting. this seems like a tricky one to reproduce, but the 503 was a really good hint. @shanedewael and i spoke about possible causes and we identified a few things that should be handled better. i'll let him weigh in on the changes.. @anfilat the logging is definitely strange, good catch! did the application crash? did you terminate the app? i don't see an error in your output.. I think the above PR should actually fix this issue now.. @dperez3 i'm not sure I understand the problem you're describing. the two code snippets you provided seem identical (except for the additional console.log). \ncould you help me understand what the awaitResponseAsync() function is supposed to do? it seems like you might be trying to wait for a specific message you already sent to be acknowledged by listening to the RTM stream and waiting for it. if that's the case, i can offer a few improvements for you.\n\n\nif you sent the message using RTM, you should just await the Promise returned from RTMClient.sendMessage(). For example:\n(async () => {\n  const rtm = new RTMClient(BOT_TOKEN);\n  const response = await rtm.sendMessage('a simple message', channelId);\n  // any code here executes after the message is sent\n}());\n\n\nthe problem with how you've written the code currently is that the \"message\" event will trigger for all incoming messages that the bot can see. it seems like you're looking for a response to a very specific message in a specific channel. changing a .once() to a .on() is just helping your handler run on more messages, because the first one it sees might not be in the right channel.\n\n\nif you don't use the previous suggestion, it still looks like you can eliminate wrapping your code in a new Promise(). you're already in an async function, which will always return a Promise, even when you just return a string.\n\n\nin the next version, you don't need to pass in null as an argument to rtm.start(). we had an issue where we accidentally typed that argument as required instead of optional, but this will be resolved in the next release (likely to occur on Monday).\n. @dperez3 okay great, thanks for clarifying! now that i understand a little more about what you're trying to accomplish, i have some further suggestions.\n\n\n\nHere I'm trying to receive a response to the message from a user on a channel. Or is that what the code you provided would actually do? If so, that'd be great! If not, is there a way to just listen for messages on a specific channel? (I'm gonna try it anyway though).\n\nNo, that's not how the code I provided works; the promise resolves when the message being sent is acknowledged by Slack. Your problem is different.\nHow did you send the message you are awaiting on for a response? If you sent the first message with an RTMClient, you shouldn't need to instantiate a whole new RTMClient for listening for the user's response message. You can just listen on that same instance used to send the message. However, if instead you sent the message with a WebClient or IncomingWebhook, then there's two more options I suggest: 1) use the Events API to receive incoming messages (see @slack/events-api module) or 2) instantiate the RTMClient object and connect before you send the message (then there's no chance that you'd miss the message). In all of these cases, you want match messages generally (using .on() instead of .once()) and use a condition to check if its a message you need (e.g. check if its from the right channel).\n\ni don't understand the experiment above. if you start an RTM connection and then disconnect before it finishes, then its a useless RTMClient (but I do think we should do better and not throw an error - i'll create a separate issue for that). why would you want many connections with the same token? if its because you are waiting for separate responses concurrently, then i think it would be better to store information about the separate responses you are waiting for, and then use the message handler to check against that set. without knowing too much more about your app, here's an example that might be useful:\n```\nconst rtm = new RTMClient(BOT_TOKEN);\nrtm.start(null);\n// This object maps channel ID keys to values that are shaped as { promise, resolveFn, rejectFn }\nconst channelsAwaitingUserResponse = new Map();\nrtm.on('message', (event) => {\n  if (channelsAwaitingUserResponse.has(event.channel)) {\n    const val = channelsAwaitingUserResponse.get(event.channel);\n    val.resolveFn(event);\n  }\n});\nasync function sendMessageAndAwaitResponse(message, channelId) {\n  await rtm.sendMessage(message, channelId);\n  const userResponded = new Promise((resolve, reject) => {\n    channelsAwaitingUserResponse[channelId] = {\n      promise: userResponded,\n      resolveFn: resolve,\n      rejectFn: reject,\n    };\n  });\n  return await userResponded;\n};\n// Now you can send a message and await for the user's response\nconst userResponse = await sendMessageAndAwaitResponse('hello world', 'C12345');\n```\nYou'll notice that in this example, the RTMClient is only instantiated once, and stays connected for as long as the application is running. It also only has one message listener, which essentially \"routes\" the incoming message with an appropriate action. In more complex apps you might have many independent message handlers.\nNote that the example above is limited to allowing only one \"unresponded\" message per channel. I'm not sure if this is a realistic constraint for your app, but it seems like you were already making that assumption in your code examples, so it carried over into my example. You could remove that constraint by creating a different condition to identify whether a specific message is a \"response\" to the message you send, besides just checking the channel ID.. thanks for the report and the stacktrace @zcbenz! i'm fairly confident that this is actually the same issue as #531, so i'm going to consolidate by closing this as a duplicate.\ni'm working on a fix now and hopefully we can release that before the end of the week.. @renjithvk besides the compile-time warnings, are there actually any functional issues with running your application?\nthe two dependencies mentioned are not direct dependencies of @slack/client, they are actually dependencies of ws. in fact, they are native modules written in C++, and are optional dependencies of ws that are meant to improve performance. you wouldn't be able to depend on them in a browser context, so this warning should be expected.\nat this moment, this package isn't truly tested for browser contexts. i'm happy to support that need, but i'll have to rely on use cases from users like yourself to guide me. thanks for reporting.. I'm glad you found a package that works for your needs!\nThis package and slack-node differ in many ways, which explains the difference in dependencies. In case anyone else that reads this wants to understand, slack-node does not provide a client for the RTM API (which is why choosing it helps avoid ws). It also doesn't have most of the features listed at the top of this page for the Web API.. Out of curiosity, I wanted to see how the bundle sizes of these packages compare. The number of dependencies doesn't really say much, since all the transitive dependencies of one package can easily outweigh many direct dependencies.\n@slack/client bundles down to 60.3kb (min+gz) - this is probably too large for most client-side use cases. \u26a0\ufe0f \nslack-node won't compile properly \ud83e\udd37\u200d\u2642\ufe0f . @clavin i'm interested in breaking this package into smaller ones. there is at least one downside to that, which is explaining to developers where to find which pieces. we could actually have the best of both worlds if we're willing to keep shipping @slack/client as a package of packages just to keep things simple for newcomers.\nand in terms of client-side use cases, i'm kind of in the dark. one use case i know about is targeting Electron, but i'm still not very familiar with the motivations for that.. my first thought is \"why is the error message undefined, that should never happen!\" i think that's probably worth looking into separately, so if you have any more information regarding how i might be able to reproduce this specific error, i'm very interested. i'll try to trace the possible code paths myself, but i'm not sure i have enough info.\nbut onto your actual point: i think you do have the entire stack trace, WebClient is calling into got, and that goes all the way down to process._tickDomainCallback() which is the top of the event loop. i think the real complaint is that there's no async stack trace. AFAIK, this is a problem with node itself. there are some libraries which exist to monkey-patch errors in order to provide a stack trace that survives async calls. i'm hesitant to adopt a third party monkey-patch solution because i know Chrome DevTools can do this, so there must be some mechanism in V8. if the solution that DevTools uses is available but just not surfaced in node yet, i'd prefer to wait for that to surface and adopt that (or inherit it for free).\nif you have any concrete suggestions about which library or technique you'd like to see adopted, or any info to the contrary of what i know, i'm all ears!. it looks like if you were to reproduce your error with the inspector protocol enabled (--inspect) and the additional --inspect-brk is specified, you would get async stack traces. source: https://github.com/nodejs/node/pull/16260\nis this a solution for your problem? i think the resistance of using the async_hooks API to enable this all the time is that there is a performance overhead. if that's true, i wouldn't feel comfortable opting into that for the entire process from library code, that should be an application programmers choice.. others have referred to this package: https://github.com/amio-io/await-trace. i'm not sure how, or if, that will be useful.. as if this wasn't already complicated enough, another fact to keep in mind is that this project is compiled with typescript to target ES2015, where async/await are not available natively (the lowest supported node version, v6, cannot support this feature). therefore, any solution which specifically depends on async functions will not be available from this package.\ni believe all the solutions powered by async_hooks (like using the inspector protocol) work with Promises, so the ES2015 compiler target should not limit them.. one more possible solution: https://medium.com/front-end-hacking/stack-traces-for-promises-in-node-js-46bf5f490fe4. for reference, here's two errors i created from the WebClient just now. its notable that the error.code is quite descriptive. when there is an underlying error, the error.original value is also helpful.\n{ Error: A request error occurred: ENOTFOUND\n    at requestErrorWithOriginal (/Users/ankur/Developer/@slack/client/dist/WebClient.js:514:5)\n    at got.post.catch (/Users/ankur/Developer/@slack/client/dist/WebClient.js:354:31)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\n  code: 'slackclient_request_error',\n  original: \n   { RequestError: getaddrinfo ENOTFOUND slack.com slack.com:443\n    at ClientRequest.req.once.err (/Users/ankur/Developer/@slack/client/node_modules/got/index.js:182:22)\n    at Object.onceWrapper (events.js:315:30)\n    at emitOne (events.js:116:13)\n    at ClientRequest.emit (events.js:211:7)\n    at TLSSocket.socketErrorListener (_http_client.js:387:9)\n    at emitOne (events.js:116:13)\n    at TLSSocket.emit (events.js:211:7)\n    at emitErrorNT (internal/streams/destroy.js:64:8)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\n     name: 'RequestError',\n     code: 'ENOTFOUND',\n     host: 'slack.com',\n     hostname: 'slack.com',\n     method: 'POST',\n     path: '/api/chat.postMessage',\n     protocol: 'https:',\n     url: 'https://slack.com/api/chat.postMessage' } }\n{ Error: An API error occurred: not_authed\n    at got.post.catch.then (/Users/ankur/Developer/@slack/client/dist/WebClient.js:383:62)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\n  code: 'slackclient_platform_error',\n  data: \n   { ok: false,\n     error: 'not_authed',\n     acceptedScopes: [ 'chat:write:user' ] } }. @mledom would you be willing to sign our contributor agreement? you can do so by clicking the link to it in the comment above.. whoa, thanks for this contribution! i'm so glad you're willing to help further the goals of #509 (and more general #496)\ni think this approach is very nice. i like that method types and response types don't directly depend on one another, and that the WebClient actually pairs them up. \nyou said this output was generated, would you mind sharing the script? i think it would be useful to keep in the repo to \"sync\" with the OpenAPI spec every once in a while. was there much manual manipulation of the output after the script was run? i'm really interested in understanding the process.\nreviewing a change this big will definitely take some time. i'd like to build the package and try using it locally to see what the typescript language service has to offer with all these awesome types to work with! i don't expect to have time to do this in the next week or so. i encourage other community members to check out this patch and leave some feedback.\nsince i see this as a change that might take some iteration before landing, and since potentially more people may like to get involved, perhaps it makes sense to retarget this PR onto a new feature branch (e.g. feat-webclient-response-types). that way this PR could land on that branch and others could make additional PRs to continue to add polish. @neekolas wdyt?\n\ni saw that you tried to undo the style changes introduced by prettier, thanks. the majority of the style changes i'd probably want to revert before this lands on master. some were great though, and i think we can contribute some changes to our tslint rules to enforce them! happy to have that discussion in a separate PR or issue.. @clavin i'd love to hear your thoughts, if you have a chance.. superseded since #620 . hi @krishna-koushik, sorry about the difficulties. so, we're dealing with an out of memory situation. is there any other code in this program that could cause memory usage to spike? was there a version of this package that did not cause the memory to spike in this app (a last known good state)? it seems highly unlikely to me that a simple call to channels.list would take over 1 GB of memory. i'm going to run a test myself to see if i can figure out what the expected memory use for a simple call like this should be.. as far as i can tell (and i am fairly novice in memory debugging), i ran the same program and saw about 482k worth of allocations, and they seem to all be reclaimed by the GC. i also ran on the same version of node (8.7.0).. thanks!. \ud83c\udf89 . that's a new one! sorry about the issue you're having. i think its especially interesting that it works locally but not on AWS.\nit may take me some time to reproduce this one since i don't have an AWS instance to play with, so if you can narrow down the reproduction scenario to something a little easier to get to, that would be swell!\ni took a look at the transpiled output from typescript, and i presume the generator function the error message is referring to is implementation below. (RTMClient depends on WebClient, so its actually located in WebClient#apiCall())\njavascript\n    apiCall(method, options, callback) {\n        this.logger.debug('apiCall() start');\n        // The following thunk is the actual implementation for this method. It is wrapped so that it can be adapted for\n        // different executions below.\n        const implementation = () => __awaiter(this, void 0, void 0, function* () {\n            if (typeof options === 'string' || typeof options === 'number' || typeof options === 'boolean') {\n                throw new TypeError(`Expected an options argument but instead received a ${typeof options}`);\n            }\n            const requestBody = this.serializeApiCallOptions(Object.assign({ token: this.token }, options));\n            // The following thunk encapsulates the task so that it can be coordinated for retries\n            const task = () => {\n                this.logger.debug('request attempt');\n                return got.post(urlJoin(this.slackApiUrl, method), \n                // @ts-ignore using older definitions for package `got`, can remove when type `@types/got` is updated for v8\n                Object.assign({\n                    form: !canBodyBeFormMultipart(requestBody),\n                    body: requestBody,\n                    retries: 0,\n                    headers: {\n                        'user-agent': this.userAgent,\n                    },\n                    agent: this.agentConfig,\n                }, this.tlsConfig))\n                    .catch((error) => {\n                    // Wrap errors in this packages own error types (abstract the implementation details' types)\n                    if (error.name === 'RequestError') {\n                        throw requestErrorWithOriginal(error);\n                    }\n                    else if (error.name === 'ReadError') {\n                        throw readErrorWithOriginal(error);\n                    }\n                    else if (error.name === 'HTTPError') {\n                        throw httpErrorWithOriginal(error);\n                    }\n                    else {\n                        throw error;\n                    }\n                })\n                    .then((response) => {\n                    const result = this.buildResult(response);\n                    // log warnings in response metadata\n                    if (result.response_metadata !== undefined && result.response_metadata.warnings !== undefined) {\n                        result.response_metadata.warnings.forEach(this.logger.warn);\n                    }\n                    // handle rate-limiting\n                    if (response.statusCode !== undefined && response.statusCode === 429) {\n                        const retryAfterMs = result.retryAfter !== undefined ? result.retryAfter : (60 * 1000);\n                        // NOTE: the following event could have more information regarding the api call that is being delayed\n                        this.emit('rate_limited', retryAfterMs / 1000);\n                        this.logger.info(`API Call failed due to rate limiting. Will retry in ${retryAfterMs / 1000} seconds.`);\n                        // wait and return the result from calling `task` again after the specified number of seconds\n                        return delay(retryAfterMs).then(task);\n                    }\n                    // For any error in the API response, treat them as irrecoverable by throwing an AbortError to end retries.\n                    if (!result.ok) {\n                        const error = errors_1.errorWithCode(new Error(`An API error occurred: ${result.error}`), errors_1.ErrorCode.PlatformError);\n                        error.data = result;\n                        throw new pRetry.AbortError(error);\n                    }\n                    return result;\n                });\n            };\n            // The following thunk encapsulates the retried task so that it can be coordinated for request queuing\n            const taskAfterRetries = () => pRetry(task, this.retryConfig);\n            // The final return value is the resolution of the task after being retried and queued\n            return this.requestQueue.add(taskAfterRetries);\n        });\n        // Adapt the interface for callback-based execution or Promise-based execution\n        if (callback !== undefined) {\n            util_1.callbackify(implementation)(callback);\n            return;\n        }\n        return implementation();\n    }. @mousemke would you be able to turn on the debug logging and let me know what the program's output looks like? you just need to change the instantiation to const _bot = new RTMClient( token, { logLevel: LogLevel.DEBUG });. LogLevel is available as an export from the top-level, so you can prob just add that to your destructuring assignment.. i think i might know the cause. it looks like you've enabled experimental V8 features using the --harmony flag: https://github.com/mousemke/_val/blob/3704d807ead47b376fda745c74c09bef394faf3c/package.json#L9\ni found the following typescript issue, which links to the following V8 issue. it concludes as closing because the --harmony behavior is known to be broken but the stable generator support works. if you have --harmony turned on for some other JavaScript feature, it may be worth looking into whether a more specific flag for that feature exists, or if it can be eliminated.. \ud83d\ude4c . thanks for the proposal @LaurentVB. this seems pretty reasonable to me.\ni thought about this some more and realized that the IncomingWebhook class is essentially already a wrapper around a response_url. although conceptually, an incoming webhook and response URL are two different things, functionally they are more or less the same. that is, depending on where the response URL originated from (a slash command, a dialog submission, a button click) the arguments might differ, but the code to invoke the URL is the exact same.\nin light of that information, i wonder if it makes sense for the WebClient to internally depend on IncomingWebhook and offer the static method as just an alias for constructing the an instance and invoking send() immediately.. Actually, I'm going to back-pedal on my previous comment. The less the implementation depends on IncomingWebhook, the better. If they both depend on some UrlInvoker, that might be okay (depending on how much functionality exactly is pushed down to that object). But I don't think its a priority to solve this problem together IncomingWebhook. IMHO the IncomingWebhook abstraction hasn't aged well, and we should think about how we might do it completely differently today (and that should be a separate GH issue if that's what someone needs).. @bmajz that's a good question. the only state that can handle an explicitly disconnect is connected, so the following should work in place of rtm.disconnect():\njavascript\nif (rtm.connected) {\n  rtm.disconnect();\n} else {\n  // if it eventually succeeds, immediately disconnect\n  rtm.once('ready', () => rtm.disconnect());\n  // if it eventually fails, don't try to reconnect\n  rtm.autoReconnect = false;\n}\ni haven't tested this, but logically, as long as this is exception is only being thrown while in the connecting state in your code, this should work.. @bmajz I don't think it should be marked as public. given that it would take a release to do so, i'd rather actually fix this bug than to create a new public property.\nmy reasoning is that making this a supported public property would be tricky, since the connection process is very stateful. we'd have to test what toggling that property means for each state and during each transition to feel confident about its usage. that's not a goal for us at this time.. i disconnected my network connection to observe what happens. i don't see a crash, but i do some odd behavior:\n```\n[DEBUG] @slack/client:KeepAlive received pong, clearing pong timer\n[DEBUG] @slack/client:KeepAlive ping timer expired, sending ping\n[DEBUG] @slack/client:RTMClient send() in state: connected,ready\n[DEBUG] @slack/client:KeepAlive setting ping timer\n[DEBUG] @slack/client:RTMClient sending message on websocket: {\"type\":\"ping\",\"id\":48}\n[DEBUG] @slack/client:KeepAlive setting pong timer\n--- disconnect network connection ---\n[DEBUG] @slack/client:KeepAlive pong timer expired, recommend reconnect\n[DEBUG] @slack/client:KeepAlive ping timer expired, sending ping\n[DEBUG] @slack/client:RTMClient send() in state: connected,ready\n[DEBUG] @slack/client:RTMClient sending message on websocket: {\"type\":\"ping\",\"id\":49}\n[ERROR] @slack/client:RTMClient failed to send message on websocket: WebSocket is not open: readyState 2 (CLOSING)\n[ERROR] @slack/client:KeepAlive Unhandled error: Failed to send message on websocket: WebSocket is not open: readyState 2 (CLOSING). Please report to @slack/client package maintainers.\n--- reconnect network connection ---\n[DEBUG] @slack/client:RTMClient received message on websocket: {\"type\":\"pong\",\"reply_to\":48}\n[DEBUG] @slack/client:RTMClient transitioning to state: reconnecting\n[DEBUG] @slack/client:RTMClient transitioning to state: connecting\n```\nimmediately after the 'recommend reconnect', i'd expect to see the RTMClient transition to reconnecting but instead it stays in the connected,ready state. continuing to investigate.. currently, the RTMClient depends on the behavior of calling websocket.close() results in the websocket object emitting a 'close' event. however, this doesn't appear to work.\ni'm not sure whether this behavior is correct to expect. i can't find much in the spec about this, but from my read of the following test code, i think it should work:\nhttps://github.com/websockets/ws/blob/bf9b2ececbe42dd07ef9619d2b4953f57243c843/test/websocket.test.js#L241-L258\nUpdate: actually, in the above test, its the server that initiates the closing of the websocket. according to the protocol specification, clients \"SHOULD NOT\" close the connection (but still may): https://tools.ietf.org/html/rfc6455#section-7.3. however, according to the DOM API, the close event should be fired: https://html.spec.whatwg.org/multipage/web-sockets.html#closeWebSocket\nUpdate 2: i think it is expected behavior: https://github.com/websockets/ws/blob/bf9b2ececbe42dd07ef9619d2b4953f57243c843/test/websocket.test.js#L1194-L1210. there's something to debug here.. i think i figured it out! when you call websocket.close(), that initiates the close handshake. but that actually requires sending a close frame on the wire before the close event can fire. if the connection is truly down, that's not going to happen (at least anytime soon). therefore, stopping the KeepAlive monitoring only after the close event fires means theres plenty of time to send new pings that essentially have no purpose. the last commit in this PR just preemptively stops the monitoring so that there aren't issues sending these futile pings. we've already committed to tearing down the websocket connection, so a keep-alive process doesn't make any sense.. hey @keksipurkki, thanks for your feedback. this is a request we've heard from a good number of developers, so you're in good company. there's a few issues around programmatically provisioning app features that we haven't solved yet. we don't have any new features to address this issue to share with you now. if and when we do, it would not necessarily be communicated through this repository. the best way to follow along would be to subscribe to our roadmap and changelog. please continue to give us your valuable feedback!. You\u2019re not missing anything, this is a known issue. WebAPICallResult wasn\u2019t designed to be a \u201cclosed\u201d interface, just a minimal common interface for results of all different method calls. For now, you'd have to do casts on the inner properties you know to exist based on the method's documentation (e.g. const channels = result.channels as any[]). We hope to do better soon. \nThis is a duplicate of #509, so I\u2019ll close this to consolidate. There\u2019s been some progress in #563, and some relevant discussion in #496. . Thanks for raising this point! I'm not certain what the right solution would be at this point.\nIf we were to bump the version to 10.x, then another consume using a lower version of node would likely end up in the same position that you are in now.\nIf we were to move @types/node to the devDependencies, then any values returned by this package's APIs that are derived from node's types would not be defined for consumers.\nIf we were to remove @types/node all together, the problem above would still occur.\nIt seems like the best option might be to use * for the version specifier as you suggested, but I haven't found any other examples of this so I am hesitant. I'm going to ask around to get more opinions.. @kbiedrzycki thanks for the data point! I also want to leave a reference to #514, an issue where this was discussed in the past. . @clavin IMHO peerDependencies don\u2019t really provide much value beyond emitting a warning. For many users (non TS) the warning adds to confusion. For the others (TS) it\u2019s not enough; easy to ignore and doesn\u2019t actually force npm to install anything. That solution is roughly equivalent to removing @types/node from package.json. @clavin typeDependencies is an interesting idea. I\u2019d like to get that in front of some of the TypeScript core team to see what they think.\nAnd yep, the minimum compatibility range is what I\u2019ve implemented in #605. ~I think this range should be okay because we no longer depend on typeof util.callbackify~ actually, we still do. However, this seems like a good reason not to. . @clavin i made some changes to my PR. i've copied the type of util.callbackify into this project so that we no longer depend on the definition coming from @types/node, to mirror the fact that we don't depend on the implementation being in node. this isn't the perfect solution, but i think it will be better for the project and its users than the alternatives we've explored. i'd appreciate your feedback, if you have any concerns.. Thanks!. Were you using the RTMClient or the WebClient?. seems like this is the fix we'd like to see land in got: https://github.com/sindresorhus/got/pull/490. thanks so much @lukechilds!. @wilg i think this issue is now fixed. you should be able to get the latest updates by running npm update in your project. can you confirm that it works for me? even though slack isn't down, your second example (not being connected to the network) should be sufficient.. @wilg sorry for my delay in response! somehow this one got buried for me.\ncan you do an npm ls got to see which version of got is in your dependency tree? You want it to be at least 8.3.2.. @wilg we could make that change, but according to semver the caret range will match all releases less than 9.0.0. So we shouldn\u2019t need to make any changes to pick up that release up. \nIt\u2019s likely that you have a lock file that\u2019s preventing your yarn from matching to the latest got release. You may need to manually run yarn upgrade to re-resolve to the latest. \nWhat\u2019s confusing to me is that your shown tree doesn\u2019t include got inside of @slack/client. Can you explain why?. Okay, it looks like we need to reopen the investigation into this issue. Thanks for the helpful info and the link to the code where it occurs! I'm sure that will help us resolve this faster.. i tried to reproduce this one again. i wasn't able to observe the error. here is what i ran:\n```javascript\nconst { WebClient, retryPolicies } = require('@slack/client');\nconst web = new WebClient(\n  'xoxp-xxxxxxxxxxxxxxx',\n  {\n      logLevel: 'debug',\n      retryConfig: retryPolicies.fiveRetriesInFiveMinutes,\n  }\n);\nweb\n  .channels\n  .list({\n      exclude_members: true,\n      exclude_archived: true,\n      limit: 10\n  })\n  .then(res => {\n     console.log('channels', res.channels);\n  })\n  .catch(error => {\n      console.error('Error: ', error);\n  });\n```\ni ran this with the network interface of my machine turned off, and got the following output.\nankur:node-sdk-playground/ $ node web-channel-list.js\n[DEBUG] @slack/client:WebClient initialized\n[DEBUG] @slack/client:WebClient apiCall() start\n[DEBUG] @slack/client:WebClient request attempt\n[DEBUG] @slack/client:WebClient request attempt\n[DEBUG] @slack/client:WebClient request attempt\n[DEBUG] @slack/client:WebClient request attempt\n[DEBUG] @slack/client:WebClient request attempt\n[DEBUG] @slack/client:WebClient request attempt\nError:  { Error: A request error occurred: ENOTFOUND\n    at requestErrorWithOriginal (/Users/ankur/Developer/play/node-sdk-playground/node_modules/@slack/client/dist/WebClient.js:519:5)\n    at got.post.then.catch (/Users/ankur/Developer/play/node-sdk-playground/node_modules/@slack/client/dist/WebClient.js:373:31)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\n  code: 'slackclient_request_error',\n  original: \n   { RequestError: getaddrinfo ENOTFOUND slack.com slack.com:443\n    at ClientRequest.req.once.err (/Users/ankur/Developer/play/node-sdk-playground/node_modules/got/index.js:182:22)\n    at Object.onceWrapper (events.js:315:30)\n    at emitOne (events.js:116:13)\n    at ClientRequest.emit (events.js:211:7)\n    at TLSSocket.socketErrorListener (_http_client.js:387:9)\n    at emitOne (events.js:116:13)\n    at TLSSocket.emit (events.js:211:7)\n    at emitErrorNT (internal/streams/destroy.js:64:8)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\n     name: 'RequestError',\n     code: 'ENOTFOUND',\n     host: 'slack.com',\n     hostname: 'slack.com',\n     method: 'POST',\n     path: '/api/channels.list',\n     protocol: 'https:',\n     url: 'https://slack.com/api/channels.list' } }\nthis is exactly what i would have expected. the printing of the error is from my own catch clause, not from the process crashing.\nhere's my dependency tree for got:\nankur:node-sdk-playground/ $ npm ls got\nsdk-playground@1.0.0 /Users/ankur/Developer/play/node-sdk-playground\n\u2514\u2500\u252c @slack/client@4.3.1\n  \u2514\u2500\u2500 got@8.3.2. @wilg not that i think this is the cause of your issue, but i noticed that the following code you linked seemed like it could be cleaned up a little. here's an example:\nhttps://github.com/looker/actions/blob/c9b60baffac86a7228b8c13b0b60f2360e5273a9/src/actions/slack/slack.ts#L46-L61\ntypescript\n    let response\n    const slack = this.slackClientFromRequest(request)\n    try {\n        await slack.files.upload(options) // when you don't pass a callback, this returns a Promise\n    } catch (e) {\n        response = { success: false, message: e.message }\n    }\n    return new Hub.ActionResponse(response). @wilg FYI, the latest versions of this package no longer use got. it might be worth another try to see if you can still reproduce this crash.. @iamtmrobinson thanks for reporting and especially for leaving the important clues about how this occurred (.append()). i've got a fix i'm working on and i should be able to have it out shortly.. @LaurentVB thanks for communicating this issue with us. i appreciate that you tried to gather data and reproduction scenarios. memory issues for libraries can be very tricky.\ni want to make sure i'm understanding one thing correctly: you are running the same exact application and just swapping the v3.x SDK for the v4.x SDK, and the result is that the v4.x SDK spikes memory usage so much more that it causes crashes on Heroku. that also means you did not add or remove any functionality in the app, so these two scenarios are roughly comparable. is that right?\nif so, i think the next step here would be asking you to share a similar memory graph as the image above (so running the exact same calls API calls with the same or similar data if possible) but using the v3.x SDK. that way we can make a determination of how much worse the v4.x SDK is performing from a memory consumption POV.\nas far as i can tell, this is not a leak, because it seems that the memory usage does return back to its equilibrium after a spike. rather, it seems this is an issue with a specific call stack running very expensive on memory.\nwhat we  may be able to do in the meantime is try to reproduce these results using a simple app that just uses WebClient#chat.postMessage() to verify the problem exists and is understood, but i'd appreciate your help in first measuring how great a gap it is that we're trying to cover, as described above.\nthanks!. i've been trying to reproduce this issue and haven't yet been able to find a reason for the memory spike.\nhere is the entirety of my test application:\n```javascript\nconst { createServer } = require('http');\nconst { WebClient } = require('@slack/client');\nconst slack = new WebClient(process.env.SLACK_TOKEN);\nconst server = createServer((req, res) => {\n  slack.chat.postMessage({ channel: 'C72V3BUG5', text: 'Hello world' })\n    .then(console.log)\n    .catch(console.error);\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('ok');\n});\nserver.listen(process.env.PORT);\n```\nas you can see, i'm also just using chat.postMessage. each time a request comes into my server, i invoke it once. i hosted this application on Heroku and used node v8 so we can compare apples to apples. here's my memory usage graph:\n\nit looks like my apps steady state resident memory is about 14MB, and while i sent about 30 concurrent requests (so about 30 calls to chat.postMessage were in flight at about the same time), the memory usage topped at around 16MB. i think these are totally reasonable results.\nsince this is so wildly different than what you found, can you help us understand more details about how your app is behaving?. Thanks for updating us @LaurentVB. I'll close this issue now so it doesn't distract us in the meantime. If you do find a reproduction case, feel free to keep commenting here, or create a new issue (mentioning this one).. hi @stevepeak, thanks for catching these and contributing a fix. i'd be happy to merge as soon as you can accept the contributor license agreement (click the yellow badge in the first comment). \nPS. thanks for working on codecov! as you can see, we use it on all our packages!. @stevepeak ping for the CLA :smile:. Fixed in #665 . This sounds like a dup of #576. @Ahlid Yes, that is correct.\nIn my experience, for apps connecting to more than one workspace, its been a worthwhile transition to move away from the RTM API and start to use the Events API in combination with the Web API. The benefit is that you won't have to maintain those connections, the events from all workspaces (all bot tokens) will arrive as HTTP requests to your Request URL.. Closing since the initial question was pretty straight forward to answer, but if you have any more questions, feel free to ask!. thanks!. thanks again!. Overriding codecov/project status check, since it seems to be a rounding error.. i don't know why codecov isn't reporting status on the latest commit. the coverage should be no diff still (we didn't add any lines of executable code). i'm overriding that status check to merge.. On principle, I don't think there's anything wrong with sending secure information over Slack (all user data is handled with security controls). However, most software treat passwords as so sensitive that they don't even appear on a screen (masked with **** in UI controls instead of the text). Slack doesn't currently have a support for this masking, but I'd be happy to bring your feedback to the team. My instinct is that masked fields aren't likely to be added to the platform soon.\nI'd like to learn more about what your chatbot is doing before I make a recommendation on how to handle this. Is your bot taking passwords as input because that password has to be forwarded onto some other system? . The best option I can think of would be semi-painful to implement, but here's what I'm thinking:\nYou generate a nonce of some sort and store data about the action that must be performed associated to that nonce in a database. You should probably save its creation time so that you can expire this nonce after a certain timeout.\nWhen you need the password from the user, you send them a link to a URL with the nonce included. An example would be https://my.app/installs/authorize?id=xxxxx (where xxxxx is the nonce).\nWhen a request comes to that URL, you serve a page with an HTML form that has the required fields, such as username and password. In this form, you are free to use the <input type=\"password\" /> HTML tag, so that the input is masked. You also render the nonce into the value of a hidden input.\nWhen the form is submitted by the user, you validate the inputs (lookup the nonce to find the other details of the operation, check that the operation has not timed out, etc), then kick off the remote installation. Remove the entry for this operation from your database.\nJust before you delete the data, you can send the Slack user a confirmation message. Just remember to store enough information in your database (such as the user ID).. feel free to continue discussion in this issue, however i'm going to close it because its not an issue that we can resolve through this package alone.. thanks for the feedback @jd0920 \nI've got an implementation in #609 that uses actor. I'll hold out on merging to leave time for additional feedback regarding the name.. I think impersonate isn't going to work for us. It has a potentially negative connotation, and its often in reference to how apps can masquerade as a user when calling chat.postMessage. notably, chat.postMessage is not one of the methods that supports this feature. I don't think @shanedewael is as strongly in favor of this choice anymore either.\nat this point, i'm also leaning towards on_behalf_of because it would be most closely aligned to the terminology in the api.slack.com documentation.\ni know this is a short timeline, but i'd like to get this feature (and many more sitting on master) released today. so i'll wait a few more hours before moving forward.. updating this PR to use the preferred on_behalf_of option name, and adding some docs.. Thanks. I was able to reproduce this one (I don't see the transitioning... log statement as we would expect).. @clavin looks like we're really close! i'd like to make a release soon, since #619 adds a type definition change that would be helpful. if you're willing the address the last outstanding comment by Friday, i'll hold off for that. otherwise i'll release at latest then, and we can continue to work on getting this PR landed.. thanks!. @igrayson p-cancelable is used inside the RTMClient.\nthanks for reporting, i'll try digging into what exactly should be done to resolve this, but i'm open to ideas.. yes, this is something i've heard before, but as far as i can tell the jury is still out on whether this is truly a best practice.\nthe question of dependencies versus devDependencies has been discussed in previous issues such as #514 and #582 (although these were about @types/node, it was a similar problem). the guidance from the TypeScript team themselves seems to be for package authors to include all the @types/* packages in the dependencies section of package.json. See: https://github.com/Microsoft/types-publisher/issues/81. currently, we're following this guidance and haven't run into something that couldn't be fixed without bending that.\nin this case, i believe the typings for bluebird are not correct. in its declarations, they are merging their own method definitions into the native JavaScript Promise<T> interface, instead of defining their own type that extends Promise<T> (see merging interfaces). this creates a requirement on all other types that extend Promise<T>, such as PCancellable<T>, to be only provide compatible API. the error message you've shared shows that PCancellable's and bluebird's definitions of the cancel() method are incompatible because the return type void is not assignable to some Promise<U>.\ni think the best way to resolve this issue would be to improve the type declarations for bluebird. from reading through the source, it seems like the author(s) of that declaration file know they've done some things wrong, and have even marked this particular cancel() method with a cryptic TODO. https://github.com/DefinitelyTyped/DefinitelyTyped/blob/7c7d2678b43959f5b59dd7af9974c9ff911de99c/types/bluebird/v2/index.d.ts#L478. @freezy i'm fairly certain that the solution to your problem would be to include the esnext.asynciterable value in the lib option.\nthis is a new requirement since the v4.4.0 release, so thanks for catching it! i'm not sure how to document this appropriately, but i'll create a new issue to capture the need. . @freezy i agree, and making dependents maintain the deps was not the intention.. @igrayson i understand your point about internal versus exported or exposed types. i also think its valid.\nbut the downside of separating specific @types/* packages into those that are internal versus exported is the likely unnecessary maintenance burden. my point of view is based on following the guidelines set fourth by the typescript publishing guidelines. i think these guidelines represent, on balance, what's currently thought to be best for the entire ecosystem. in order to take the approach you're suggesting, every package publisher in the entire ecosystem should take on the burden of introspecting their package for internal versus exported types. to be honest, i think a future version of typescript might be able to solve this issue. the alternative seems both achievable and much more reasonable to me.\nit's clear that we can debate this forever, so i think a reasonable approach would be to at least bring visibility to the problem with the bluebird types and inquire as to whether there is good reason for them to be doing what seems \"bad\" right now. its quite likely that a contribution to fixing those types (which the maintainers of this package may be able to help with) is much more valuable to the entire typescript community than for this package to make an exception to make it play better with bad actors.. i'm making my way through the DefinitelyTyped repo and looking at the bluebird type definitions. i noticed that in the latest major version (v3.x), the issue i cited is resolved. namely, in this version the Bluebird<R> (the main export) implements PromiseLike<R> instead of using declaration merging.\nit seems like nobody has touched the 2.x type declarations in about a year.\nif this is a blocker for you, it might be a potentially faster resolution to upgrade your usage to v3.x of bluebird.. @madltd The unfurl_links and unfurl_media arguments are not valid for chat.postEphemeral. But I do think that links to YouTube media should unfurl automatically. I'll investigate whether this is a bug. Thanks for reporting.\n. This is a confirmed bug in the Slack platform. It's not a bug we can fix from within the SDK, so I'll close this issue. If you'd like to check up on this in the future, feel free to comment.\nI don't have any workarounds for this issue at this time.\nInternal Slack bug: PAS-544. note: it looks like in typescript 3.1, esnext.asynciterable will actually become es2018.asynciterable (and included in just es2018) - see https://github.com/Microsoft/TypeScript/pull/26220.. i wasn't aware of the technique for declaring a lib dependency the way you mentioned in #612. from reading the documentation on this feature, it seems reasonable to me. just to be safe, if you have any other examples of libraries that use this technique to declare their own lib requirements, would you be able to link me to them?. okay, sounds reasonable to me. thanks for helping improve our (my) understanding of TypeScript \ud83d\udcaf!. @freezy i've created the PR for this, and i realized there's a risk with this change. if when typescript 3.1 is released, this lib is no longer named esnext.asynciterable and instead named es2018.asynciterable, then how can this library declare a reference that works across both old versions of typescript and new?\nfor now, i think merging this is still better than not. but i'd like to leave this issue open until we figure out the solution for this upcoming problem.. hmm its not as simple as adding the line to util.ts. it seems like the tsc is responsible for emitting triple slash directives into the resulting declarations file (util.d.ts). for example, without the above PR, util.d.ts starts with:\n/// <reference types=\"node\" />\nof course, we could post-process util.d.ts to add the lib reference, but that feels like the wrong way to do this. i'm searching the web for more information about this.. oh i think that syntax is first introduced in typescript 3.0... \ud83e\udd14 . i think this means we cannot adopt this syntax until we officially do not support typescript <3.0. my gut feeling is that its way too soon to drop version support so soon. but this is the first time there's been a major version transition in typescript since this project became written in typescript, so i admit we've got some learning ahead of us to understand how to do this transition smoothly.. for now the workaround is still to add esnext.asynciterable to the lib compiler option.. after consulting a few colleagues who have more typescript experience than me, its clear that the resolution to this issue is better documentation.\nin short, we'd love to use all the new hotness in TypeScript 3.0+, but it would be too soon to force that upon all users of this package. i'm going to create a separate issue to contain discussion around how and when exactly we can make TypeScript 3.0+ (or any version really) a requirement for this package. we can implement the triple-slash directive based solution at that time.. this doesn't work as expected.\n```\nsrc/util.ts:1:1 - error TS1084: Invalid 'reference' directive syntax.\n1 /// \n  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```. ah, you're right! i overlooked the fact that methods with no arguments still require that parameter when writing the example in the documentation.\nthe intention of the API is to still require the options parameter as seen in the overload signature below:\nhttps://github.com/slackapi/node-slack-sdk/blob/b207d885cae73aef97301de8b1b65f7b1195ffb7/src/WebClient.ts#L133\nso i'd describe this as a documentation issue. if you'd like us to consider making options optional, then let's open a separate feature request issue for that.. thans @mistydemeo. i agree, this is worth publishing.. @tkazec oh, that\u2019s not good. Is that how npm publish is supposed to work? It should have been a prerelease version, of a lower major version than the latest. \ud83e\udd14. okay fixed! @tkazec thanks for pointing that out!!!. @shanedewael can you target this PR at the feat-short-lived-tokens branch, instead of master?. whoa i didn't even know you could do that without closing the PR and opening a new one! \ud83c\udf89 . Some notes from this implementation:\nIdea: isTokenRefreshing as a Promise.\nWhat if the token refresh is in progress when the optimistic token refresh conditions are checked? With this implementation when the API call fails, the code will check the request time and determine that the token should be refreshed (again) and the API call will be tried again.\nBut another option would be to prevent the first attempt to the API call in the first place by waiting on the token refresh in progress to finish (if we represent isTokenRefreshing not as a boolean, but as a Promise that this API call can await (a mutex of sorts, or maybe a barrier, i can't remember the right terminology). The failure logic doesn't change, but it would be an optimization.\nIdea: Only use optimistic checks to perform token refresh\nWhat's the point in doing a token refresh right before a retry if the retry will do an optimistic check anyway? The refresh could just occur in one place.\n. Hello @ran-j \ud83d\udc4b \nTo receive incoming events, you have two options: the Events API and the RTM API. The recommended approach is to use the Events API, and for that there's another package here: https://github.com/slackapi/node-slack-events-api. If you chose the RTM API, you can use the RTMClient class from this package, see those docs here: https://slackapi.github.io/node-slack-sdk/rtm_api#receiving-messages. \nIf you need help deciding or understanding the differences, take a look at this helpful blog post.. Okay, no problem. I can help you understand why you're seeing this error.\nFirst, the error is saying invalid channel id. When you called the rtm.sendMessage() function, the second parameter is supposed to be a conversation (channel) ID, and you are passing, event.user, a user ID. This will not work. You have two options: you can send a message back in the same conversation where the incoming message event happened, or you can create a new DM with the user based on the user ID to get a conversation ID. The first option is easier, and you can do that by replacing event.user with event.channel. The second option would require using the WebClient to call the im.open method, and in the result you'll find the conversation ID. It's up to you.\nSecond, calling rtm.sendMessage() returns a Promise. You should never allow a Promise to get created without some kind of error handler. The simplest way to do this is to add a catch: rtm.sendMessage('hi', event.channel).catch(console.error). This will log any error that occurs back to the console.. IMHO mutability (allowing to change the value after initialization) makes the implementation much more difficult. The WebClient needs to know how to deal with a queue of many requests being executed (or paused) at the same time. What happens when you change the custom headers but there\u2019s already a few requests in queue? This is why the code for token refresh is so complex. \nI don\u2019t see any use cases at the moment for updating the values for the custom headers. So let\u2019s start with the simplest thing possible, just setting them on initialization. If a use case for changing the headers comes up later, we can always come back and add that. I\u2019d like to avoid unnecessary complexity. . @ethan0920 thanks so much for jumping onto this one! its always exciting to land a new community contribution. i've left some comments for you on the PR. let us know if you need any clarifications or help \ud83d\ude04 . closed in #629 . @ethan0920 no problem! thanks for being so diligent. one small comment left for you.. this looks great, thanks for the contributions and your patience to stick with this. \ud83d\udc4d . Hi @Tjird,\nI just want to make sure I'm understanding what is happening first. At first your bot is connected, then after some time you notice that it disconnects. When it tries to reconnect, it shows the error messages you shared above (Unexpected server response: 408, etc). Is this correct?\nI also don't know what you mean when you say \"Take all messages that are being send in a channel\". When you connect to Slack using the RTMClient, the client will receive all messages from all channels where the bot is a member. It will also receive events of types that are not \"message\". Can you show me some example code of how you're using the RTMClient?\nI've never seen a status 408 response before, but if you're in the process of connecting to the websocket (like the error shows) that means you've already successfully gotten a response from the Slack Web API's rtm.connect method. So your network is probably okay.. @Tjird thanks for providing the code. in addition to verifying my description above was correct, can you tell me if the issue ongoing for your bots or if it is intermittent? Has it stopped occurring?. Okay, it seems like there might have been a brief network issue in your region or on the network between your host and our data center.\nThe RTMClient did retry the connection several times. It seems like it was functioning as expected. If you expect it to retry forever, you should change the default retryPolicy in the RTMClient constructor.\nIf the issue is resolved, do you think we can close this?. this is a good question @ryosebach. for now, you have two options:\n1. cast individual properties you know should exist on the result to the type you know they will have by looking at the api reference (https://api.slack.com/methods/channels.list)\n2. define a type for the entire result object which extends WebAPICallResult, including the properties you want to use, and cast res to this type.\nboth of these are less than ideal, and we're trying to figure out the best solution for the future in #496. we'd love to hear your thoughts or feedback about this there.. If this answers your question, can you close this issue?. Hi @ChaddPortwine \ud83d\udc4b \nThis is just a guess, but I think you might just need to change the app.get() to app.post(), since Slack's slash command requests are mostly POST requests. For legacy custom integrations you chose between GET or POST, but for Slack Apps its always going to be POST.\nJust FYI: i don't mind helping out with stuff like this, but I think a better avenue is the Bot Developer Hangout or emailing us (developers@slack.com) for questions that aren't actually related to this package. mostly because there are more \ud83d\udc40 in those places so your question would get answered even faster!. i wasn't actually able to reproduce this issue!. This would totally be a great addition. At the moment, the core maintainers don\u2019t see enhancements to IncomingWebhook as a priority, but PRs for this functionality would be happily accepted. . wow thanks for catching this!. Hi @nicgordon, I'm having trouble reproducing this issue. There was a short period of time where we accidentally left the v3.x released tagged as latest, but we resolved that fairly quickly. I just tried to create a new project and I got v4.6.0.\n```\nankur:play/ $ mkdir blaah                                            [12:08:38]\nankur:play/ $ cd blaah                                               [12:08:41]\nankur:blaah/ $ npm install @slack/client                             [12:08:47]\nnpm WARN saveError ENOENT: no such file or directory, open '/Users/ankur/Developer/play/blaah/package.json'\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN enoent ENOENT: no such file or directory, open '/Users/ankur/Developer/play/blaah/package.json'\nnpm WARN blaah No description\nnpm WARN blaah No repository field.\nnpm WARN blaah No README data\nnpm WARN blaah No license field.\n\n@slack/client@4.6.0\nadded 46 packages from 75 contributors and audited 91 packages in 2.654s\nfound 0 vulnerabilities\n```\n\nwhat version of npm do you have? can you try deleting the node_modules directory in your project and try again?. @romanbalayan thanks so much for your contribution! i think this is great, as long as we don't end up repeating too much code if we can avoid it. also, i want to point out that there's currently an issue with the way proxies are handled that is being discussed in #642. depending on how fast that issue is addressed, the changes might overlap with the lines of code you have modified.. hey @romanbalayan, that was an impressively quick turnaround time. i can see there's still an issue with a merge conflict on this PR and i had one comment about changing the string in a log. let me know when you're ready for me to review this PR again.. thanks @romanbalayan, this is really great. i'm especially impressed with your attention to detail to make sure the functionality has good test coverage and persistence to keep this PR up to date through several changes on master.\n\n. Thanks!!. Thanks for the info and sorry for the inconvenience, @jbsil. For now, the workaround is to use an earlier version until we can fix this up. We\u2019ll let you know if we need any more info from you. . I just heard from another user experiencing this issue. they were able to workaround without downgrading by setting the agent option to an object with key(s) http and/or https.\nfor example, change {agent: proxyAgent} to {agent: { http: proxyAgent, https: proxyAgent } }.\ni just want to be clear, this still sounds like a bug and we should fix it, but i wanted to make the more preferred workaround known.. thanks for reporting and providing the sample code @DornieDortsch. i'm reopening the issue now.\nthis issue will likely get attention from our team in the next week or two. as always, feel free to dig in in the meantime.. @DornieDortsch i'm not able to reproduce this one, but let me describe what i'm doing and maybe you can help me see where your set up is different.\ni'm using Charles Proxy on my mac, which is using the default proxy configuration (port 8888). i clone your repo, and created a new .env file. i put the following contents in that file:\nTOKEN=xoxb-REDACTED\nPROXY_URL=http://localhost:8888\nthen i did an npm install and started the application with node index.js. everything worked.\nnext, i downgraded to @slack/client@4.4.0 by updating the entry in package.json, wiped out the package-lock.json and the node_modules directory, did another npm install and ran once again using node index.js. everything worked again.\none random thought: if your proxy has its own self-signed certificate, you might need to use the tls options in the SDK to get the code talking to that proxy properly. however, that shouldn't have changed between v4.4.0 and v4.8.0. . @DornieDortsch yay! thanks for digging deeper and sharing your findings back with the rest of us. this is super helpful and it makes sense.\ni'm going to make another issue to discuss your suggestion of disabling the automatic proxy detection using the environment variable.\nin terms of logging, i'm not sure if its wise to output that level of detail, but i can be convinced. in theory, the promise would be rejected with an error that contains that detail, so you should be able to log it yourself. i think the only reason that wasn't apparent here is because automatic retries were going to occur for the next ~30 minutes before you saw the final rejected error, but this is the expected behavior. i think a good debugging step should have been to turn retries off to see what the underlying error was, but neither of us thought of that. \ud83e\udd14 . @smaeda-ks thanks so much for this contribution. you caught a very important best practice that we didn't previously mention in the documentation. your code example and explanation is very thorough and complete.\ni have one recommendation: i'd prefer to keep pagination out of this code example so that we can present the simplest way first, and then lead the reader to understanding pagination separately (as you already did with the link to that heading). we can instead mention that the response will be limited to 100 results, and for the full list they can read about [pagination](#pagination). i think this keeps the example clear so the reader doesn't need to learn about too many things at once.\nwe could also change the example code in the pagination section to also use conversations.list so that a reader coming from this section can more simply follow along.\nif you need any help, let us know. i think what you already changed is really good, so i'm happy to let you finish the changes yourself if you'd like to.. Ah, okay it seems I should have done a little more homework. Thank you @ronjouch for checking my work.\nhttps://github.com/Microsoft/TypeScript/issues/26218 was at one point set to milestone TS 3.1 - and so the information here was anticipated to be right, but it looks like the typescript team moved the goal post to TS 3.2. Not a problem, we'll just remove the part about es2018.asynciterable for now and hope we can catch up soon after that change lands.. thanks @melisdogan! i think i was a little unclear in the issue, but even users of TS 3.1 or greater need to use \"esnext.asynciterable\" in lib. sorry about the confusion.\nif we were to add that lib, then the whole config would look exactly like the config above it. so i think we could just remove the second config and the line about \"For versions of TypeScript < 3.1:\". what do you think?. awesome \ud83e\udd47 . Thanks for spotting the mistake and sending us the fix. \ud83d\ude47 . @jharrilim thanks for the improvement. \ud83c\udf7b . @TracerYT i'm not sure how we can help.\nFirst, the error you're linking to is a server error about not listening to a port. I know Heroku will generate this error when your server web process doesn't call server.listen(process.env.PORT). however, this repo is a slack client, and we're not the right place to look for help with your server. that seems like a general node.js / Heroku issue. (but my suggestion is to change the worker in your Procfile to web)\nSecond, the code you linked to doesn't use Slack at all. it uses Discord. I think you'd get help if you were to ask Discord for support.. @keitakn are you running this code in the front-end of a web application? this package doesn't officially support browser execution, but it has worked for some people. i can try to help, but the issue might just end up being that you aren't using the right package for your use case.\nthe error's stack trace indicates that its being thrown in the code for js-dom. perhaps js-dom does not support setting the User-Agent header for outgoing HTTP requests. that is a capability this package needs, so is it possible for you to remove js-dom from this part of your code?. We still need to rewrite the Getting Started guide to remove these references.. @JanmejayPattanaik sorry you\u2019ve had trouble getting this to work. The v3.x versions of this package are no longer supported. Please upgrade your package to a supported version (preferably the latest). This guide should help you migrate existing code from v3.x to v4.x. \nPS. I know it\u2019s not easy to migrate code you\u2019ve already written, but please take some time to read and understand the support schedule of our packages here: \nhttps://github.com/slackapi/node-slack-sdk/wiki/Support-Schedule. If you have any questions about the schedule or migration, feel free to open another issue. . @tcd156 thanks for pointing out the lack of info in the documentation. I\u2019d still be open a PR for the thread_ts being added to the arguments type definition. It would be nice to leave a comment next to it indicating that the channels argument is required when using it, as you stated here. . @tcd156 thanks for reporting and fixing!\n\nLet me know how you feel about my comment, and I'll be happy to merge the PR and make a release :). @tcd156 just responded, thanks for your patience.. @ronjouch good question. you can find the answer in the formatting docs for variables.. In short, you should use the following in the text string:\n\n<!here|here>\n. Hi @CoreyCole \ud83d\udc4b \n\nI apologize that it's taken our team so long to respond to this issue, and thank you for reporting!\nAre you by any chance trying to use a hidden (undocumented) API method? If not, it would be useful to know which method (or methods) you saw this occur with. If it is hidden, unfortunately it's not meant to be used through the platform so we're not likely to change the behavior (but I'm always open to hearing which kinds of methods people do want to use, so I'd still like to hear \ud83d\udc42).. Thanks for following up!. I think I've gotten to the bottom of this one, and I think it comes down to a documentation issue.\nYou should be connecting to the RTM API using a bot token. These are tokens that start with the letters xoxb-. More info about what a bot token is can be found here.\nEach of these occurrences seem to come down to using a user token (start with xoxp-) to connect to the RTM API. And for completeness, I do want to acknowledge that its possible to use a user token for the RTM API, but its discouraged because there is usually a better way to do what you're trying to do. So unless you have some specialized use case and you know what you're doing, avoid this. In that case, your xoxp- token needs to contain the client scope for it to work. We have logged an internal bug for changing the error payload to something a little more clear, because rtm:stream is an internal scope that's used for some other purpose, and this error message is not accurate or helpful.. @ptmt is your app already distributed in the App Directory? One limitation I\u2019m aware of is that the client scope is not available for App Directory apps. \nFor the record, the technique I\u2019ve used to successfully request the client scope is just a matter of pointing the browser to the OAuth authorization URL with client in the scope GET param (query string). . My colleague just reminded me of another possible issue. You cannot request the client scope in the same installation as a \u201ctraditional\u201d scope (e.g. channels:read). If you need both kinds of scopes for your app, you need to facilitate the user performing 2 installations. Each one will be additive, so the resulting token will be the same each time, but the token will have all the scopes granted. . Thanks everyone! Merged the fix just now. . Glad it worked out!. @ghostec thanks for bringing this up. i can see why this becomes an issue across a project where the loglevel package is used. we are using the documented suggestion for \"plugins\", but maybe we need to find another technique for generating the output we desire without affecting other code. if you have any ideas about how we can do this, we would be happy to help work on that.. @clavin this is great! if you're willing to work on that patch, we can land it.\nand yeah, i think the TODO for logger name prefixing is just residue from before the prefixing was implemented, feel free to remove it.. @jharrilim thanks so much for contributing to making our documentation better and clearer. we really appreciate it.\ni left a few comments about pieces i think we can improve upon. let me know how you feel about those -- if you could update the PR to address them it would be great!. @jharrilim   thanks so much for following through! \ud83d\ude4c . @jayjanssen thanks for reporting the issue and having thorough reproduction steps. i haven't gotten a chance to reproduce it on my own just yet, but i wanted you to know that we would look into this soon.. @jayjanssen i was able to reproduce this issue locally. i did it with a very similar program written in javascript rather than coffeescript:\n```javascript\nconst { WebClient } = require('@slack/client');\nconst token = 'my-token';\n(async () => {\n  const slack = new WebClient(token);\nfor (let _ of Array(100)) {\n    try {\n      const result = await slack.users.profile.set({\n        user: 'my user id',\n        profile: {\n          status_text: 'node sdk test',\n          status_emoji: ':robot_face:',\n          status_expiration: 0,\n        },\n      });\n      console.log(got profile);\n      console.log(result);\n    } catch (error) {\n      console.error(got error: ${error.message});\n    }\n  }\n})();\n```. Yup, I work for Slack and we\u2019ve logged this one as a bug on the platform level. I\u2019m leaving this issue as a bug to more or less track the progress on that internal issue. \nJust some info for those curious, this is an internal rate limit mechanism meant for a different purpose that is \u201cleaking\u201d through the public API because it happens to be more aggressive of a limit than the public one. We have discussed our options and selected one. It\u2019s just a matter of implementing it, testing it, and releasing it. I suspect that will all happen early next week. \nUntil then, rate limiting for this one method is broken, and the work around would be to manually retry failures that result in a error.data.error === \u2018ratelimited\u2019 condition being true. \nAlso, I don\u2019t mind the coffeescript! I\u2019m just glad you took the time out to report your findings. . @nylen the issue hasn't been fixed yet. its a medium priority right now, which means it may be several weeks before its fixed. i'll update here when i hear more.\nfor now, i think the workaround i mentioned above should be your strategy to deal with this error. are you coming across any difficulties with this? if you're hitting the rate limit very often, we should probably discuss how you can reduce the need for your app to call that method so many times.. Good news friends(@nylen and others interested)! We shipped a change on Friday that fixed this issue. :tada:\nI\u2019ll close the issue now, but it would be helpful for someone who experienced it to confirm that it\u2019s back to working as expected. . i think this is a duplicate of #668 . thanks @clavin!. @Shegox unfortunately, i don't have a quick workaround right now. even if we depend on the beta release of axios and utilize the no_proxy option, this would result in a breaking change for existing users who depended on the environment variables to set their slack proxy.\nis it possible to modify the parts of your application that use the environment variables to configure the proxy to instead use explicit configuration?\ni feel that we should address this issue with the next major version of the package, but i'm not sure when the axios 0.19.0 release will stable. we are hoping to ship our next major version before the end of February.. Thanks for your detailed thoughts @clavin and @Shegox!\nMy perspective is that axios is an implementation detail, and we should declare (and document) our intended interface for those without knowledge of our implementation.\nToday, our declared interface states that we do not handle proxies (out of scope) and that in order to configure one, you should add a dependency to your own app and then leverage the agent option. So in terms of our declared interface, we have a bug \ud83d\ude26 (not an undocumented feature).\nThe question remains, what will tomorrow's interface become? Here's what I see as the options:\n1) Continue to call proxy config out-of-scope and fix the bug: this means setting proxy: false so that automatic detection doesn't kick in and break the abstraction.\n2) Adopt proxy config as a first class feature: This could be @clavin's suggestion (pass proxy: false to axios when WebClient option agent is set to false), but I actually think a better experience would be to take the proxy URLs directly as a whole new option on WebClient and RTMClient, and to promote that as the way to use the functionality. We would then keep the automatic detection from environment variables. At that point, it might be worth considering also deprecating the agent option because I'm not sure which use cases require that aside from proxying.\nI don't see others that look favorable, but I'm willing to hear more ideas.\nNow we've got to weigh the pros and cons of these options.\nPro Option 1: The smaller we keep the scope, the less vulnerable this package is to risks of breaking API contracts. For example, in v4.5.0 we were able to swap out got for axios with relatively little pain because we limited our scope and were very careful about leaking the abstraction - and we still introduced this bug!\nPro Option 2: Proxying is (by anecdotal accounts) a popular need, especially for developers who deploy inside corporate controlled environments - lots of Slack developers. Taking away the extra dependency and step they need to make it work is nice.\nCon Option 2: Providing proxy support may add complexity to eventually targeting the browser or Electron platform (possible future goal). Even if we decided that it was only supported in a subset of environments, communicating this and documenting it is not free - and some users will still always have questions.\nPro Option 2: When the SDK is embedded inside a framework (instead of being directly depended on by the app developer), then the app developer could retain the ability to set the proxy using environment variables, whether the framework (intermediary) was aware of the options or not.\nI'm leaning more towards Option 2 now, but would like to hear more thoughts.. By the way, we're preparing for a new major version release soon. So if we wanted to drop the agent option in favor of a proxy option, now would be a good time.. As I started working on this change, I learned about a few more pros and cons.\nPro Option 1: The agent option can be configure to set a larger variety of proxy protocols than the proxy option in axios offers: HTTP, HTTPS, SOCKS. They would all be separate dependencies the developer needs to add in their app ([https-proxy-agent](https://www.npmjs.com/package/https-proxy-agent), [http-proxy-agent](https://www.npmjs.com/package/http-proxy-agent), [socks-proxy-agent](https://www.npmjs.com/package/socks-proxy-agent)).\nCon Option 2: In order to support the proxy option directly for the RTMClient, we would need to require at least one of the previously mentioned packages as a direct dependency of this package, and use it to configure the agent. This is the best (only?) way to support proxies for websockets.\nThere's also one more option:\n\nKeep agent supported in both WebClient and RTMClient, add proxy option to only WebClient. This option feels strange to me because its not clear wha the interaction between proxy and agent options would be. For example, if I configure an HTTPS proxy with the proxy option, but also configure a SOCKS proxy using the agent option, what is the expected behavior? Ultimately, it feels like axios's proxy support is designed for use inside the browser environment, where the full power of agent is not available. But since this package targets node and not the browser, it feels like we should just (and only) directly support the more powerful construct.\n\nWith these new data points, I'm starting to lean towards leaving the functionality as is (not deprecating agent), and fixing the bug (by passing proxy: false to axios initialization).\nAny thoughts?. Thanks for the input. I'm reclassifying this issue as a bug (explained in the previous two comments).\nThere's nothing stopping us from introducing proxy as a first-class option in a feature release in the future. We welcome that conversation! If that's something you want to discuss, please open another issue.. @SpencerKaiser we should have a fix released before the end of the week, and possibly as soon as tomorrow.. @SpencerKaiser the next one \ud83d\ude09. Haha, if all goes well, it should be shipping before the end of the day.. Ah, sorry that you're having this difficulty. Let's try to track this down. If it ends up being in the Slack client (browser/desktop), then I can also bring this issue to that team.\nFirst thing's first: I'd set the log level to DEBUG in order to see all the intermediate states that the client is transitioning through. The next time you notice an offline presence, you can then consult the logs.\nQuestions: If you message the bot while it appears offline, will it become online? Will it respond in a way you expect (if you programmed it to respond)?. Hi @Startouf \ud83d\udc4b \nI think what you're asking is out of the scope for the interactive-messages package, since its not a feature that we can deliver in the package unless the Platform APIs support that usage. Also, this is not the right repo for issues related to that package (the respond() callback isn't part of this package). But I do appreciate the feedback, and I'll take it back to the team.\nIf you're looking for a workaround or a way to do this today, there is a way. You can use the chat.postMessage method, and set the thread_ts argument equal to the message_ts property in the payload from the action. This does involve using the Web API, so you will likley have to request an additional scope with installation. I recommend you use a bot user, so that your app has its own identity within the workspace, and to use the bot user access token.\nLet me know if there's anything else I can do to help you.. Hi @JanmejayPattanaik \ud83d\udc4b,\nThis error is related to request signing. That means it doesn't have anything to do with the WebClient calls you are making (with or without a proxy). Instead, its related to the @slack/events-api (or possibly the `@slack/interactive-messages) package. This repo isn't the right place for those issues. Don't worry, I'll still help you here.\nDid you use the request signing secret when initializing the event adapter in your code? Please see the example to understand how this is done.\nPS. Please use code fences (``) around the code you put in any issues. Reading code the way you've posted is really difficult, especially with indentation and callbacks. This made it take more time to understand what you're doing.. 1. Please open a new issue when you have unrelated problems. In this case, again it would be an issue in the [@slack/interactive-messages`](https://github.com/slackapi/node-slack-interactive-messages/issues) project.\n\nLooks like you've tried to use the markdown code fences, but might need a little more help. Check out this guide. Also the \"Preview\" tab in the editing area is useful to check if it looks right \ud83d\ude04 \n\nIt would be helpful to everyone in the community if you closed an issue when you've resolved it, and let people know what solution worked. In this case, I'm going to close the issue because the original question is solved, but please do reach out in the other project!. @benoitlavigne this looks great! thank you for contributing and improving the getting started experience \ud83e\udd47 . thanks for your thoughts @clavin! i'm glad to see that we've got a similar vision. i wanted to respond to some of your comments directly, so here we go.\nThanks for doing the research and sharing what you learned about... lerna.\n\nThe typical response to this is to have a root-level tsconfig.json, and then one in each package that extends from the root tsconfig.json.\n[...]\nBut what if you add another tool, and another tool? You can easily find yourself having configuration files for TypeScript, TSLint, Prettier, Testing Coverage, and more, in each package. \n\nI think this is true, but in many cases a single configuration is all that we will need. For example, if we standardize on TSLint for linting across each of the packages, then a single tslint.json can specify a set of files that include all packages (through a combination of globs, excludes, tsconfig, etc). In fact, I think this will extend to almost all of these tools. Even if we have child configs for individual packages, the inheritance seems like a win because we'd only have to define the differences from one config to another, and most settings will be common.\nI'm being optimistic, but I think all devDependencies could likely be moved up to a parent package.json, and then the individual packages might not need any.\n\nI'm not particularly fond of @slack/server for a few reasons\n[...]\nI feel like the name for the merging of these two packages mostly depends on what the API that respects the differences of the APIs while still managing their common behavior looks like in practice. I was thinking @slack/incoming, but that's likely to be confused with incoming webhooks. Maybe just @slack/middleware?\n\nPoints taken. My thought process behind that name is that while the WebClient, RTMClient, and IncomingWebhook objects all behave like HTTP clients (they make requests), the SlackEventAdapter and SlackMessageAdapter behave like HTTP servers (and also support being used as a listener/middleware in an existing HTTP server). In my mind, the simplest distinction is \"who makes the request\" vs. \"who serves the request.\" I think @slack/incoming sounds a bit unintuitive (inventing new terminology?). I think @slack/middleware sounds better, but middleware is a pretty specific concept mostly associated with express/connect in Node. The package actually offers a requestListener in terms of the standard library, which is a more generic construct (all requestListeners are middleware but not all middleware are requestListeners).\nFor now, I'll leave this point open for discussion. We don't have a strong vision for the future roadmap for those packages, so I'd prefer to make as little change as possible until we know its benefits. I see benefit in factoring out the verifyRequestSignature for reuse, but that's about all right now.\n\nRename @slack/client to @slack/sdk\n[...]\nMaking a change like this could easily become the cherry on the cake of migration tasks that keeps developers from upgrading.\n[...]\n @slack/sdk can be better fit as the umbrella package, exporting from and linking together the major packages (whichever those may be).\n\nI understand this rationale, and if I thought there was a need for distributing the collection of classes as one package, I would agree! But actually, I'd rather push developers to install only the bits they need to use. We should make that the happy path, and make that easier (lower bundle size, cold start time). This also has the benefit of getting more granular stats from npm (if you haven't observed the rise in downloads, its pretty amazing) - which helps maintainers understand the impact of changes we make and overall trends for our users without putting any \"phone home\" code in the runtime.\nPS. I do however think there are opportunities in grouping functionality if it wasn't simply a collection of classes, but instead a higher-level framework with opinions and a more complete solution out of the box. But these packages are destined to fill a different purpose: relatively low-level utilities, with broad application (by keeping controversial opinions to a minimum).\nPPS. There's plenty of interesting ideas like \u261d\ufe0f and more, we won't run out before the summer \ud83d\ude09 .. Looks like the TypeScript project will be contributing to ESLint, and plan for it to supercede TSLint. (see \"Linting\" header https://github.com/Microsoft/TypeScript/issues/29288). Great new npm feature that we should take advantage of: https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md. https://github.com/typicode/husky/blob/master/DOCS.md#multi-package-repository-monorepo. Hi @bitsflew \nIt looks like you\u2019re trying to reuse some code that was written with v3.x of this package. We\u2019re now shipping v4.x, and there are some changes that you\u2019ll need to understand to adjust the code to work. You can find details about those changes in the migration guide.\nSpecifically, there is no longer a CLIENT_EVENTS constant. You can use the string 'authenticated' directly.\nCan you point out where the code you\u2019re reusing came from? I\u2019d like to get it updated so that others who find the same code know about the changes in v4.x. \n. @bitsflew I\u2019m glad you asked. This is because the default value of the useRtmConnect value changed from false to true in v4.x. \nWhile you could just set the option back to false yourself, i strongly recommend not to do this. The reason we changed the default is that in large teams, the connection has a greater chance of failing when this value is false. Instead, we recommend using the WebClient class to get a list of channels. There is an example of that here: https://slackapi.github.io/node-slack-sdk/web_api#getting-a-list-of-channels\nIf you only need to send messages to a single channel, one that the user picks when installing the app, then an IncomingWebhook is the easiest option. There\u2019s an example here: http://slackapi.github.io/node-slack-sdk/incoming_webhook. \nIs there some other reason you\u2019d like to use RTM to get this list? I\u2019m happy to discuss other options too. . once again, any reason for using the RTMClient to send a message? I'd recommend using the example here: https://slackapi.github.io/node-slack-sdk/web_api#posting-a-message\nit looks like you are either migrating old code of your own, or following an outdated example. can you share where this code is coming from? i'd like to update any old examples.. > Why RTMClient?\n\nI want to implement a Slack message post with continuously updating content and RTMClient seems the right choice for that.\n\nSure, you can use the RTMClient to send these messages, but I recommend the WebClient because it can also do this, and with less limitations (maybe you want to add attachments, or blocks, or something else in the future; WebClient knows how to retry when there's a network issue, etc).\nRTMClient can still be used for the part of your app where you need to know when something happens in Slack. From your description, I'm not sure if \"continuously updating\" means \"after every x amount of time\", or \"when something happens in some other system\", or \"when something happens in Slack\". If its the last case, then RTMClient makes sense for just that part, but WebClient can still be used to send the message.\n\nGlad you found the issue with the channel membership. I think we can improve the documentation to mention that when using the bot scope, you should make sure the bot user is in the channel.. @CoreyCole could you enable debug logging in your code to see if the client recently transitioned to disconnected or some other unexpected state before this error occurs?\nyou only need to set the logLevel option to LogLevel.DEBUG. there's an example here: https://slackapi.github.io/node-slack-sdk/rtm_api#customizing-the-logger (don't worry about the logger option/function).. Glad you figured this out!\nJust a bit of advice, if you're going to be posting messages with structured content like that, I think using attachments would be really helpful. It would make it so that the content is collapsible in Slack (a \"Show More\" link appears at the bottom). You can do this with the WebClient.\nIf preserving the monospace code block would also be nice, you can use files.upload using the content argument. Slack can detect that this is JSON content and make it look nice and pretty.\nEDIT: you already did the following \ud83d\ude04\nI'm opening a separate issue, because I think its a bug that posting content that is too long can cause the RTM client to disconnect. Thanks for spotting this!. Wow, you already made the issue I was thinking of making. Thanks so much!. Here is one place this needs to be mentioned: https://slackapi.github.io/node-slack-sdk/web_api#posting-a-message. \ud83e\udd26\u200d\u2642\ufe0f I'm embarrassed, but extremely grateful for your help to correct these mistakes!. I'm not sure the suggestion is entirely accurate.\nAre you saying that when a message is sent by a bot (using chat.postMessage, with a bot token (xoxb), as_user as the default false), that you cannot find that message when calling search.messages (with a user token (xoxp) whose user can access the channel where the message was sent)?. > And, yes, the bot(app) using the same token to post was unable to find and update a message where as_user was set to false for the original post.\nI'm not sure if there was a recent change that correlates to this (but I will ask around internally), but search.messages is not supposed to work with a bot token, only user tokens (see: https://api.slack.com/methods/search.messages). So if you were using the same token to post, search, and update, that shouldn't have worked. Can you double-check and confirm? Maybe I'm misunderstanding.. > To confirm, we have been using the same OAuth xoxp token generated by our Alert Reporter App to post a message, search for message, and update message for over a year and it was working until last Friday, 2/1/19.\nOkay this makes more sense now. Not your fault because it is confusing, but this is a user token not a bot token.\nMy theory is that the authenticated user for the xoxp token that authorized Alert Reporter App either left the team or otherwise could not access the channel where these messages were being posted, and that could be a cause for this behavior.\nFor background: the xoxp token's \"power\" is limited to those of the user who authorized the installation of the app into your workspace. This isn't immediately intuitive for many developers, but it is a useful security guarantee for users and admins.\n\nBut, now the bot is posting as me, the person who installed and authorized the bot.\n\nThe problem with this theory is that you said that you're the authorizing user, and it doesn't sound like you've left the team. \n\nIt appears that on Friday afternoon the program was unable to find the alert with the unique ID on slack that it had previously found and was returning every post on slack (all 7000+) except posts the App had posted.\n\n~If my theory is correct, then I'm still not sure I understand this effect. Even if the authorizing user left the team, I don't think messages created by them should become unsearchable.~ Edit (2): This doesn't completely make sense. The search.messages call itself would be made with a user token that cannot access the previous messages (if the user left the team or no longer has access to this channel), but then the search results shouldn't work at all or exclude all messages from that channel (as opposed to just the ones posted by the app).\nI'm going to keep investigating and gathering information, I just wanted to share what my current thoughts are so that you might be able to fill in any blanks or misconceptions I'm having.. I'm glad you figured it out! Can I ask to know a little more about what was going wrong, and how this setTimeout() based delay works?\nIt sounds like you were doing something like the following:\n```javascript\nfunction messageSearch(alertIdentifier) {\n  return slack.search.messages({ query: alertIdentifier, count: 100, sort: 'score', sort_dir: 'asc' })\n    .then((result) => {\n      for (match in result.matches) {\n        if (match.text.contains(alertIdentifier)) {\n          return match.ts;\n        }\n      }\n      // No match found, wait and try again\n      return new Promise((resolve) => { setTimeout(resolve, 3000); })\n        .then(() => messageSearch(alertIdentifier));\n    });\n}\n// Example:\nmessageSearch('abcdef-12345')\n  .then((ts) => updateMsg(ts, someNewContent));\n```\nDoes that look like what you had? If so, I don't see how just waiting and trying again would work. I'm also not sure why you'd get 7000+ results, if you're pretty sure the alert identifier is only used once (or a few times).\nI think you should be using the pagination controls in the search.messages method. I'd like to help create a \"recipe\" for you and others to use, and share it on our documentation website.\nThis is how I'd do it, given what you've told me, but let me know if this would help:\n```javascript\n// Given some initialized WebClient\nconst web = new WebClient(process.env.SLACK_TOKEN);\n/*\n * Paginated search: finds messages containing a query until the predicate\n * says the search is done.\n * @param {string} query - the term to search for\n * @param {Function} predicate - a function that is called with each result and expected to return true when searching should end.\n * @param {object} options - other options to send to the search.messages method\n * @returns {Promise} - resolves when the search is complete.\n /\nfunction paginatedSeachMessages(query, predicate, options) {\n  function recursiveSearch(searchArgs) {\n    return web.search.messages(searchArgs)\n      .then((result) => {\n        for (match of results.messages.matches) {\n           if (predicate(match) === true) {\n             return;\n           }\n        }\n        if (result.messages.paging.page !== result.messages.paging.pages) {\n          return recursiveSearch(Object.assign({}, searchArgs, { page: result.messages.paging.page + 1 }));\n        }\n      });\n  }\n  return recursiveSearch(Object.assign({ count: 100 }, options, { query }));\n}\n// Using the paginatedSeachMessages to find the message ts for all the messages\n// that have an alert identifier mentioned in them\nconst alertId = 'ALERT-12345';\nconst messageIds = [];\npaginatedSeachMessages(alertId, (message) => {\n  // Make sure this message mentions the the alert as the first part of the text\n  // This is just an example of how you might want to do it.\n  // You might also want to make sure the message was sent by this app.\n  if (message.text.indexOf(alertId) === 0) {\n    messageIds.push({ ts: message.ts, channel: message.channel.id });\n  }\n  // We only care to update the last 10 mentions of the alertId, so stop if we have that many\n  return messageIds.length >= 10;\n}).then(() => {\n  for (messageId of messageIds) {\n    // Given that you have some newMessageText for this alert.\n    web.chat.update(Object.assign({ text: newMessageText }, messageId));\n  }\n});\n``. i think storing thetsandchannelis a superior solution too!. If you have any concerns or feedback, feel free to comment below!. in theConsoleLoggerconstructor, there is logic that can also be removed once node < 8 versions are dropped.. As per conversation in #672, we're not sure if this is something we're pursuing anymore.. we might also want to remove the use of theX-Slack-Userheader.. Problem with this design: there's no way to know what method to call for the next page, and with which options. Should we assume the options are static (the same for every page) except for thecursor`?. Thanks for the feedback!\nWhen you say pass the method itself, I think that would work, but that's just an alias to WebClient.apiCall() with the first argument bound to a specific string method name. Do you think it would be any more or less helpful if instead it was like this:\njavascript\nconst done = web.paginate(\n  'conversations.list', // method name\n  { types: 'public_channel' }, // then the options\n  (res) => // predicate as before\n});\nNotice that I changed it from a static helper method on the WebClient class to an instance method, and then changed the function into a string.\nI think the advantage to this approach is we could do all the pre-request work that happens in WebClient.apiCall() only once, where as if the argument was the function and the helper was a static function, we'd end up calling all the pre-request work before every page.. Labeling as good first issue because we have some convergence on the API design (minus probably bike-shedding on the names). However, I do think this is a pretty advanced contribution, so its probably best for someone who understands async iteration and recursion pretty well.. One more idea: an optional fourth argument that is a reducer function (as specified for Array.prototype.reduce).\nIf its supplied, then the returned Promise (done in the example above) would resolve to the accumulator value when the predicate indicated that pagination should stop.. Updated initial post to reflect current consensus.. Updating the title to reflect the fact that if this is implemented, we should also log deprecation warnings for any usage of automatic pagination found at runtime.\nIf we get an implementation of this feature (before v4 is EOL), we should create another issue to track the removal of automatic pagination in v5.. Other thoughts:\n\n\nHow can I choose the page size? By inspecting the options (second argument), a limit value will be captured and used as the page size for all subsequent requests. If there isn't one specified, we'll use a default (200 was the default from automatic pagination).\n\n\nIs there an API that will return an AsyncIterator so that I might use the for-await-of loop in my esnext code? \ud83e\udd14 . An idea about the AsyncIterator: If the third argument (predicate) is optional, and its not passed in, the method can return an AsyncIterator that is suitable for a for-await-of loop.\n\n\nThe implementation would be pretty gnarly. There would probably be two diverging code paths, and one of those might be recursive.. let channelId = undefined;\nfor await (page of web.paginate('conversations.list', {  })) {\n    for (channel of page.channels) {\n      if (channel.name === channelName) { channelId = channel.id; break; }\n    }\n}\nconst channelId = undefined;\nawait web.paginate('conversations.list', { types: 'public_channel' }, (res) => \n  return res.channels.some((c) => {\n    if (c.name === channelName) {\n      channelId = c.id;\n      return true;\n    }\n  }),\n});. \ud83d\udc46 that was just an accidental click. thanks for the thorough review. these comments are spot on!. > 89.36% of diff hit (target 91.97%)\ni'm going to override this failure because the lines that are not hit are lines that will be likely removed in v5 (they are in the compatibility layer for logging functions).. @joshstrange thanks for asking the question. unfortunately, the answer is exactly what you expected - we don't support a \"typingStopped\"-like message on RTM, and don't have any plans to add more message types to RTM. As you know, the Web API can do much more than RTM when it comes to sending message, so that's where I'd recommend you stick.\nI think its interesting that the typing indicator is so important to your desired user experience. Out of curiosity, how long does your app typically spend in \"typing\" mode before the response is ready? Most bots I've seen can prepare the actual response in less than 3 seconds, and at that point, its not that beneficial to me as a user to see \"Generic Chat Bot is typing...\". If it gets longer than that (>5 seconds), I can see how it is important to let the user know something is happening. You could (I know its less similar to a human user) send a message right away that subtly says your bot is typing (or thinking or whatever) in an italics font so its not to be confused with an actual message. Then when the actual response is ready, you could either update that message, or delete it and send the actual message.\nAnother strategy could be to use Interactive Messages (buttons, menus, dialogs, etc) instead of a conversational UI. For example, when Slack shows the user a button and its clicked, the message is in an inactive state (all interactive elements are disabled) until the app has responded. This is the kind of cue a user understands as \"it's still performing the action\". Another benefit of this strategy is that it improves the user experience by allowing the user to type less (which can be especially tricky on mobile).\nSorry I couldn't give you the answer you wanted, but I'm glad you asked because I'm sure others have the same question and I'll be able to refer to this message later \ud83d\ude04 .. @travisghansen the presence_sub and presence_query messages don\u2019t receive a reply, so that is the expected behavior. Instead, you should expect to receive \u201cpresence_change\u201d events which contain the data you\u2019d need.\nThe example in the documentation should give you an explanation of how this works. If you\u2019re looking for request/response semantics, using the WebClient (as shown) is still an option. . > is there a comprehensive (indexed) list of which events are writable and of those which are expected to send responses?\nThere's only 5 (public) writable events on RTM: message, presence_sub, presence_query, ping, and typing. The comprehensive list is here, but it's not indexed in the way you prefer. The only two that expect responses are message and ping. You'd have to look at each event type to know this. Instead, we usually guide developers to the RTM guide to understand the capabilities.\nThe RTMClient implementation is meant to make understanding all of that not-strictly necessary. We expose a method for each of the writable events that generally \"do the right thing\" (the porcelain), and two lower-level methods (addOutgoingEvent() and send()) for experts who need very specific behavior (the plumbing).\nBut wait, there's no method for presence_query, right? Yes, that is intentional. The functionality provided by the RTM API's presence_query is superseded by the introduction of the users.getPresence Web API method - so there's no porcelain method for using it in RTMClient.\nTL;DR: The RTMClient's API is supposed to expose all the functionality and steer users towards the intended usage. We're open to feedback on whether or not its meeting this goal, and to understanding what might have been confusing.\n\nSeems like odd behavior to not respond at all even if the response is \"thank you we'll start sending events now and not an actual dataset\".\n\nThe main use case for RTMClient.addOutgoingEvent() is to send a message event that is queued but where we don't need to await the reply. This was possible in earlier versions of the client, and so its still public to preserve that functionality.\nThe truth is that everything over a Websocket (underlying transport for RTM) is fire-and-forget. The server-side of the API has made special considerations to \"ack\" only the requests where there's client-side behavior that is strictly dependent on it (e.g. message events because a Slack client for users would want to render the message as pending right away, but after some time if the server doesn't acknowledge it, it can offer the user a quick way to retry). If we tried to \"ack\" every message, we'd quickly get into a situation where you're trying to ack an ack, and that seems rather pointless, right? Instead, the paradigm is that you trust the message was delivered, and that all messages you're receiving are correct and reflect what you asked for, except when you can detect that the connection is flaky (which is the reason for ping and pong).\nThis means RTM isn't a great transport for anything that can be described as a query. Another way of saying this is RTM is not good for situations where you are looking to group a certain call with a certain result. That's okay, because that's what the Web API is exactly well-suited for.\nI hope I didn't bore you with all these details. I'm glad you asked because I feel like this is an area of the platform that's usually a little tricky for people understand.. > As it is, I always end up just being lazy and using the legacy Verification Token because then I can just req.body.token === legacyVerificationToken and get on with it instead of validating the hmac properly. I feel slightly guilty about it.\n@malonecm good! you should feel guilty! (\ud83d\ude06 just kidding)\nBut really, I'm glad you're doing some verification, which is way way better than none. Many developers take the temptation to skip this in the pursuit of getting something working quickly and then they never revisit it.\nI think this is an interesting request. The @slack/events-api package exports a verifyRequestSignature function, specifically for use cases like this one. There isn't a good reason why that isn't also exported from @slack/interactive-messages, so we made this issue to track it: https://github.com/slackapi/node-slack-interactive-messages/issues/82.\nThe APIs (methods) you've proposed do look interesting, too. I think they are out of scope for that package because slash commands aren't considered interactive messages.\nBut I totally understand the temptation to just group this functionality into the same package because its so similar. In fact, I'm also tempted to combine the @slack/events-api package with it because its also so similar. While I'm going to stick to my opinion that its out of scope for now, I think that in the future we should be considering if we should pair these packages down into fewer (maybe just one) package(s). The motivation for making @slack/interactive-messages and @slack/events-api separate was to help guide people to the right package since the names more clearly match what's documented on api.slack.com, and to make sure you don't take on large dependencies whose code you won't need (if you're only building with the Events API, but do nothing with Interactive Messages, why should you have that code in your node_modules?). I think these reasons might not be strong enough to keep the packages separate much longer.. closing as out of scope. please feel free to keep discussing.. @Lemmmy would the feature described in https://github.com/slackapi/node-slack-sdk/issues/701 help? any feedback you have for that would be gladly accepted.. No prob! Closing as duplicate to keep things tidy then \ud83d\ude04 . > With the above request in place I could implement an independent 'watchdog' process to watch for a long-running connecting state and eventually say \"ok, let's start over\" without losing all the created listeners etc (ie: trying to completely destroy the instance and re-setup listeners, initialize things, etc, etc).\nThis approach doesn't seem like a solution to me. What's to say that the way you initialized things (added listeners, toggled configuration, etc) isn't causing (even indirectly) the issue in the first place? Instead of treating the symptom, I'm more interested in fixing (or at least understanding) the issue, so that the symptoms don't occur.\nI'm not super familiar with node-red (although I'd like to learn!), but maybe we should try eliminating that from the equation to see if it still occurs. It seems like you able to reliably able to reproduce the perpetual connecting state. If you use the same steps in another context (outside a docker container, or using a more generic docker container like ubuntu), does the same issue occur?\nIf its still occurring, we can keep trying to reduce the variables until I (or anyone else) can also reproduce the issue, and then we can figure out what an appropriate fix would be. This type of behavior is meant to never occur, and its exactly why we have autoReconnect in place. The next step would be to turn on DEBUG logging to see if we can get any more useful info out of the process.\nIf it no longer occurs outside the node-red environment, there's likely some interaction that we haven't accounted for. I'm still happy to keep investigating and getting my hands a little more dirty on the node-red side of things.. Thanks @travisghansen, looking forward to seeing those logs or hearing more when the issue comes up again.. @travisghansen yes, there is some retry logic with exponential backoff when the rtm.connect method doesn't succeed in obtaining a websocket URL to connect to. you can disable this by initializing an RTMClient like this:\njavascript\nconst rtm = new RTMClient(token, {\n  retryConfig: {\n    retries: 0,\n  },\n});\nIf you want to keep retrying around, but want a different policy, you can do that too. You just need to describe your policy using the options described by the retry package.\nthe default policy will maxes out at 30 minutes.. Sorry for being a little ambiguous, 30 minutes is the max time between retries. However, with the maximum number of retries at 10 (the default), I just did the summation on Wolfram Alpha and it turns out that the final attempt would happen after around 17 minutes. That means it would completely give up after 17 minutes.\nThe policy you described can be achieved using the following code:\njavascript\nconst rtm = new RTMClient(token, {\n  retryConfig: {\n    retries: Infinity,\n    minTimeout: 5 * 1000,\n    maxTimeout: 60 * 1000,\n  },\n});. I\u2019ll take a closer look at the source of retry to figure out why this policy would affect memory allocation in any meaningful way. \nThe forever option sounds like it\u2019s for repeating the intervals (from short to long) when the maxTimeout is reached. . Ah-hah! It looks like Infinity would make this an infinite loop: \nhttps://github.com/tim-kos/node-retry/blob/88548b9cd3b00948bd5cb4c4e460c2c8aacb85ae/lib/retry.js#L33\nWould it be reasonable in your case to just define some finite but really long max timeout? Since the implementation statically calculates all the timeout lengths, I think this isn\u2019t something we can provide. Also, if repeating the pattern is a reasonable way for you to get indefinite retrying, the forever option would make sense. . The following should suit your needs:\njavascript\nconst rtm = new RTMClient(token, {\n  retryConfig: {\n    forever: true,\n    minTimeout: 5 * 1000,\n    maxTimeout: 60 * 1000,\n  },\n});. I tried answering this above.\n\nThe forever option sounds like it\u2019s for repeating the intervals (from short to long) when the maxTimeout is reached.\n\nThe retries option is the number of retries in the \"pattern\", while forever: true tells the package that it can repeat the \"pattern\" over and over.\n. so thorough! so good!. @arjun27 I know that Team Chat for VSCode uses this package in this way. Do you have any thoughts to add?. @arjun27 nope, i just didn't know whether the extension used the node context or the browser context when creating an RTM connection. thanks for pointing that out! i agree that the extension should also remain unaffected in that case.. fixed in #728 . \n\n. Reference docs generation is borked on dev-v5. There's an incompatibility between one of the tools we depend on (ts-jsdoc) and typescript@3.\nI don't think we should spend time overhauling and rebuilding our reference documentation generation process. The output is already very bare bones, and I don't think a whole lot of people find it valuable. I propose that we just remove the generated reference documentation from the site until we can find a decent alternative.. this looks p good p good. just one small correction for the plural-ness of the method arguments interface.. you built this array as a literal, why are you checking for this?. oh i see, its because the appendToVersionString() function adds user-generated values.. can we put some JSDoc on this function so that its surfaced by our reference docs? the intention is for this to be used by \"higher-level\" users of the SDK, right?. i think the right way to do this would be to add an opts parameter, rather than explicitly putting userAuthRequired as a param in the signature. then you could transparently pass that through to this.makeAPICall() below. You can look above at the update() method to see an example of this pattern.. the style checker doesn't allow for this blank line, can you please remove it?. i think this line is wrong. the parameter name should be defaults.linkNames (notice the camel case). and the description isn't clear. I suggest: \"The default setting for the link_names format option to use when sending a webhook. If no value is specified, the one chosen when creating the webhook will be used.\". you are a saint for fixing things like this \ud83d\ude4f . were there arguments that were previously undocumented, or actually no arguments?. maybe not be so specific, since it could be an rtm.connect() instead of rtm.start(), right?. one concern here: removing these options from the API is backwards-incompatible. can we give some thought to how we might be able to turn these options into a parameterized retry policy on the fly?. we can also mark them @deprecated. again, might be too specific. got it \ud83d\udc4d . yay!. @CharlieHess help me understand this, please. RTM_CLIENT_INTERNAL_EVENT_TYPES includes 'pong', so pong messages will not keep the socket connection alive?. nevermind, i think i see how this works now.. props for fleshing it out though!. there's some code duplication here with L61-L63. but honestly, that can be cleaned up with a later pass.. what if the scopes are relevant to the error that just occurred, and the client wanted this data in the jsonResponse object?. yikes, is this a breaking change?. YEEE! unreleasssed :). ehh, i don't agree with this. this module covers the Web API, RTM API (which you mention above) and Incoming Webhooks. it does not cover Events API, Interactive Messages, Outgoing Webhooks, or Slash Commands. want to try again?. prefer the word module to library, its more standard in node land. i don't think the full docs have much more than this (they are just more wordy). you don't pass text into this method. also, you haven't exposed the optional params like as_user.. this will change the order in which the observable events arrive, but i think its more consistent to fire the message before firing something that (might) happen as a result of that message.. please change thread_ts to threadTs (above in the JSDoc too). can we say \"irrecoverable error types for the RTM client\"?. the order of the params should be as listed on the documentation page. we've had plenty of issues from people who find the SDK to not be consistent in this way and its caused frustration.. can we also change the function name from delete_() to getPermalink()?. can you add an opts argument, and pass it through to makeAPICall()?\nwe've been facing a number of issues that stem from Web API methods that gain optional arguments after they are first released, and then we have to break the API to update that method to include another argument.. could this line be outside of the inner _requestOptionsTransport function? or in other words, what's the point in cloning the options each time a request is fired, as opposed to just cloning it once per transport \"constructed\"?. ah! i was assuming defaults() is a pure function. silly lodash developers. \ud83d\udc4d . OH SHIT. good catch. i'm not 100% sure if this is a boolean, or if it should be '0' | '1'. waiting for confirmation.. it does not support boolean.\n\nCurrently it\u2019s implemented to support specifically 1.  Anything else will resolve to boolean false behind the scenes.. was this actually causing a failure? i think your change is more technically correct, but i'm wondering if you actually got a test run where the timers were so perfect that r.diff and minDiff were actually equal.. i think this could fit in a single line rather than a block.. i was trying to avoid this usage all together, because it seems redundant to have to specify the filename twice. can you see any advantage to doing it this way?. still not asserting that the filename field exists, and removed the comment that would remind us to improve the tests so that it is asserted. why?. still not asserting that the filename field exists.. if its going to be a Promise of something, why not a promise of a string (the response text), or better yet, define a type for it (an object that might get more properties in the future).. maybe a catch() to change errors into a CodedError?. maybe the best place to override this value is in test/mocha.opts, so that it doesn't just apply to this one case. i don't see anything unique to this case that should make it run longer than the other. its my guess that Travis generally has unpredictable speed and we should make the ceiling high enough to accomodate.. i also want to make sure the implementation accounts for those who used the old style, but i prefer that the path we take to get there is not to redo the same hack, but to smooth out the API so that you don't need to redundantly specify the filename.\n\ni wouldn't call it a hack if there was legitimately a use case or need for using the { value, options } format for file. i don't see any benefit from exposing contentType and/or knownLength at this time, since that only has the potential to force to incorrect values and cause the upload to fail (but I'm happy to be corrected if there is a real use case).\nmaybe we can channel this effort towards investigating why the following code didn't behave as we want: https://github.com/slackapi/node-slack-sdk/blob/a206c3e1286be958c963795f9ce80a18cb85ce7d/src/WebClient.ts#L530-L537\nAFAICT it should result in the same thing...\nalso, have you tried this implementation to upload actual files? i'm not 100% confident that the nock expectations are correct.. @KharitonOff thanks so much for your clarification. i missed that diff amidst the rest of the changes but i now see where the issue was before.\nyes, i'd prefer removing the backup solution so that we don't unnecessarily expand the API contract. if you can do that, i'm happy to land this PR!. note to self: should the assertion with filename work now?. note to self: the following assertion is probably redundant now. an open point we should resolve before merging this.. heh, if we had generated docs for the individual methods at all, then i'd say yes.. hahaha. typeof null === 'object' so that would pass this check. that being said, it passes this check right now too. \ud83e\udd14 . im afraid of weird javascript quirks so i like the idea of opting into things we know are bad, rather than passing things we think are good. and this is more explicit regardless.\nnulls would still pass this check, but null never has been a valid argument value, so i'm not too afraid of that case. this still represents an improvement from where we are today, and we can make this even stricter in the future if we find that people are still getting tripped up.. while i see that this is an accepted field, there are no values other than 'default', so i don't think it adds any value to type it (i'm not sure there will ever be any other possible values, and each additional property has a visual cost when your editor is trying to give you hints). this works and its right, but i was a little confused by the syntax. would you mind making a named string-based enum type and then setting this type to an array of that?. oh that's really cool! i'd love to make sure there's a great experience when integrating with Walkiebot, we recommend their product to loads of designers/developers.\nwhat kind of error are you getting when you have the additional property in your API call? if you're in a javascript project, the client shouldn't care about additional properties. if you're in a typescript project, i thought our addition of the AuxiliaryArguments type would make this usage valid as well (interesting use case for the discussion @ #496). \ud83d\ude2e i guess i never really gave any thought to the intricate differences between a union type and an enum. i always thought that enums were a \"more powerful\" union type because TypeScript would generate a symbol with the actual map, but didn't realize the compiler would complain when you use the literal values like in your example. i tried it out here.\nin light of this fact, i agree that the union type is a better solution. thanks!. \u2764\ufe0f  the attention to detail in the comments!. maybe WebAPIResultCallback needs a generic type constraint of ResponseType?. could some of these interfaces be unified with interfaces defined in src/methods.ts? i know that these define the API outputs, and those the API inputs. unifying them could come with the potential win that similar structures only need to be updated in one place. keeping them separate comes with the win of decoupling. just food for thought at this point.. maybe CursorPaginationEnabled instead?. hmmm... not quite. we would only ever see retry-after when the response has a status code of 429. i'm not 100% sure what the body would contain, but { ok: true } seems wrong to me, too.. probably not { ok: true }. how can we verify that the request actually occurred after the specified timeout (1 second)?. i don't think this reflects the intention of the test case. the idea is: given a WebClient with a request concurrency of 2 (just to keep things simple), you fire three requests concurrently (without waiting for the promises to resolve). the first request gets rate-limited, for a specified amount of time, let's say 1 second. the second request would have already been triggered (the concurrency allows for 2 requests to be in flight at the same time) and let's say it completes very quickly (~10ms), but the third request should not even start until after the 1 second timeout from the first request has elapsed. does this make sense?. it makes sense that you're setting up responses that are never meant to trigger in the scope, and therefore you check scope.isDone() rather than calling scope.done(). do you think we should also be cleaning up these test cases in a teardown method with scope.cleanAll()?. ah-hah. i think you found an issue that actually resides within the tests. the case should allow rate limit triggered retries to be turned off was noted assuming that's functionality we intend to support. but some time after that note, it was made clear that the retryConfig has nothing to do with the rate-limit control built into this object. see: https://github.com/slackapi/node-slack-sdk/issues/451\nspecifically, i think we need to remove this condition and think about that problem more holistically. right now you check a very specific retries property of the retryConfig, but its actually a complex object that's meant to be interpreted by a more sophisticated library like retry. long story short: we need to solve for that test case in a different way, and we should probably remove its implementation for now.\nwe can start work on resolving #451, but i think that should happen in a separate PR.. can we rephrase the description of this test case a bit? how about should fail with platform errors when the API response is an error?. this works since you have indirectly checked the truthiness of error in the preceding line. but i think this ca be improved as assert.nestedPropertyVal(error, 'data.ok', false); since then the order of the assertions wouldn't be significant.. this response isn't sufficient to test the code. there should be an error property in the response, the way the actual API would provide one.. we're missing an assertion on error.data.error, which should be equal to the error property in the response (as commented above).. ah, lets get rid of this .only(). i think this is okay since each log line is prepended with the object name (e.g. KeepAlive), and in that context, monitoring only really has one meaning.. OptionField[] isn't actually right, since it defines the text property which cannot be used here. What we actually want is SelectOption[]. meh, i think i'll leave that comment in there.\nright now we don't need a version of this function that doesn't take an initialValue because i'm manually passing {} as WebAPICallResult into it. but, since this lives in util.ts, it would be more reusable if it didn't need an initial value, the way that Array.prototype.reduce also doesn't require an initial value.. any reason to kick this event off inside the returned Promise's constructor, as opposed to the line before the return statement?. it seems like this could have effects greater than passing through the error on disconnect. i'd like to be a little more explicit about what this argument will contain for each kind of transition.. \ud83d\udc4csounds reasonable to me!. it seems like the intention is to only emit the context.eventPayload when transitioning to `\"disconected\". if that's true, i think it would be clearer to do something like:\njavascript\nif (state === 'disconnected') {\n  // when arriving at this state due to failure, the eventPayload will contain an error.\n  // otherwise, like after a force disconnect, this value will be undefined\n  const errorOrUndefined = context.eventPayload;\n  this.emit(state, errorOrUndefined);\n} else {\n  this.emit(state);\n}\nits more explicit, and gives us a chance to document the intention.. this basically can never happen, but its the one time we'd reject the returned promise and the code property would be undefined. so for consistency, it would be cool to one day have a code like InconsistentState or something that intentionally says \"this should never happen\".. spelling (non-distribted -> non-distributed).\nbut actually, i think we don't have to be that specific here, maybe:\n\nThe WebClient can automatically handle token rotation for your app. Learn more about why you should enable token expiration (hint: its required for App Directory distribution).. > Workspace apps support Slack's latest-and-greatest platform features and will be required for distributed apps in the (near) future.\n\nspicy. is this true? it's likely, but i don't think we can state this for sure yet.. Install (or Reinstall) App -> Install App. be taken to your app installation page. This page is asking you for permission to install the app in your development workspace with specific capabilities. That's right, the development workspace is like every other workspace -- apps must be authorized by a user each time it asks for more permissions. Go ahead and click \"Continue\". The next page asks you for which conversations the app should have access to create messages within. In this case, choose \"No channels\", which still allows the app to directly message users who install the App -- which means you.\nResume from \"When you...\". Create a file called tutorial.js and add the following code:. ```javascript\n// The current date\nconst currentTime = new Date().toTimeString();\n// Use the apps.permissions.resources.list method to find the conversation ID for an app home\nweb.apps.permissions.resources.list()\n  .then((res) => {\n    // Find the app home to use as the conversation to post a message\n    // At this point, there should only be one app home in the whole response since only one user has installed the app\n    const appHome = res.resources.find(r => r.type === 'app_home');\n// Use the `chat.postMessage` method to send a message from this app\nreturn web.chat.postMessage({\n  channel: appHome.id,\n  text: `The current time is ${currentTime}`,\n});\n\n})\n  .then((res) => {\n    console.log('Message posted!');\n  })\n  .catch(console.error);\n``. Then the [apps.permissions.resources.list](https://api.slack.com/methods/apps.permissions.resources.list) Web API method is called to find a conversation where the app can send a message. There will be one resource that represents your own DM with the app (since you were the installing user). We find that resource by finding the first in the list with atypethat equals\"app_home\"`. Lastly, the chat.postMessage method is called using the conversation ID we just found to send a simple string message.. change link to the live API site link (when it launches). ummm... i think there was maybe a formatting issue.\nadd:\n\nTokens are an important part of using the Slack platform. Learn about the\n  different types of tokens.\n\ndelete everything after that.. Maybe right after the first sentence: \"This can increase the security of your app, since in the event of a token accidentally being exposed, that token cannot be used against your app or your users after a short time.\". the event also contains team_id and enterprise_id.. the response contains expires_in, you're right. but the client only stores that value after it adds it to the current time, so this is still correct. it wouldn't be useful to store just the expires_in because we would have to compute the future time that the expiration will occur on every request. this way, we only do that computation once and store it. my biggest concern was also clearing this value at the appropriate time, which is handled by the setter.. i've got multiple suggestions here but i think it would be easier to talk about in person.. ~handle~ make calls. maybe a comment here to say \"this error could have occurred because of an expired token, refresh and try again\". directly message users who install the App. line above still references a dev instance in the URL, change that.. example is great!. IMHO i don't think we should keep this property. i think you've got the right idea about mixing the object provided in the options into the axios instance inside the constructor, and that's all we need right now.. i don't think this is a particularly useful test, since you declared the staticHeaders property private. and, if we remove that property as discussed in the comment you added, this would no longer pass. i think we should remove this test case.. i don't think we should initialize with the static headers for all test cases inside this describe block. instead, i think we should add another describe block inside this one (as done for other specific features), maybe describe('when using custom static headers', function () { /* ... */ }); Within that block, we should have at least one test case where a client is constructed with custom static headers, and the request is checked for the existence of those headers (using nock). We probably also don't need staticHeaders to be declared globally in this file. Let me know if you disagree or if you'd like any further help.. this is a pretty clever way to check for headers, cool!\ni think it would be a little more straight-froward if you were to use nock's reqheaders option, which was designed for this purpose. check it out here: https://github.com/nock/nock#specifying-request-headers. Maybe these functions can be moved to util.ts so that it\u2019s not repeated across many objects?. Yes, I think using this PR is good. . Change \u201ctoken\u201d to \u201curl\u201d in the log message. Thanks for being so comprehensive!\nI don't feel like these belong here, since (file OR content) are required, while channels OR (channels and thread_ts) are optional. This example is meant to show the simplest of scenarios for developers who just want a quick recipe to copy and paste. If we wanted to be exhaustive, we'd have to write quite a bit more to describe all the arguments.\nI'm open to feedback through. Do you think most developers would expect to post files within a conversation? Going further, do you think the majority of those would want to understand how it would be done for within a thread?. Thanks for adding your point of view. I'm convinced now that channels deserves a mention. I wouldn't say that it's common to upload a file without this, just that it's simpler. But I think you're right that its likely they want to see the uploaded file in a conversation.\nHow about the example keeps the comment with the channels argument (as you added), but instead of putting an explanation in the string value, we use something that looks like a real channel ID (e.g. C123456).\nI'm not as convinced about thread_ts being needed in the example, but I think it could be mentioned in the comment. Maybe something along the lines of Specify channel(s) where the uploaded file should be shared. This is optional, except when also specifying a thread_ts for putting the message in a thread. I don't love that sentence, but I think it includes the important pieces.\n. Sounds good!. I think removing this section (and the following section) would leave users who have already built a Workspace App without information about how these options work. Instead, I think we can add warnings (similar to how the reference documentation on the options to the constructor were given warnings) to help users understand that this usage only works with the now-deprecated workspace app tokens (xoxa).. For consistency, we should invent the new term \"Personal tokens\". Let's just stick with \"user tokens\".. suggestion\nThis code creates an instance of the `WebClient`, which uses an access token to call Web API methods. The program reads the app's access token from an environment variable. Then the [auth.test](https://api.slack.com/methods/auth.test) method is called on the `WebClient` to find the installing user's ID.  Lastly, the [chat.postMessage](https://api.slack.com/methods/chat.postMessage) method is called using the found user ID as the `channel` argument to send a simple message.. no range? i'm cool with that. there was probably some jekyll helper to get the current year, but again, i'm cool with that.. > top-level blocks\nmissing link? . remove this type. use string. add a type for KnownAction (or pick a better name) that is the union of all the types that extend Action.. use (KnownAction | Action)[]. use (KnownAction | Action | ...)[]. thinking about the future-proofing scenario, if we don't have an explicit type for the block in  the Block union, then this would be a type checker error. i think we might also need to use the trick we've been applying where you rename Block to KnownBlock, and then change this to (KnownBlock | Block)[] (or pick better names). is there anything we know all Block objects should have (probably just type: string, right)?. if we want to use (KnownBlock | Block)[] in all these places, maybe its worth giving that a type alias. so maybe its type Block = KnownBlock | OtherBlock (where type KnownBlock = ImageBlock | ContextBlock | ..., and interface UnknownBlock { type: string; }.. i have mixed feelings about adding any friction to the README. tbh, i was thinking of removing the whole \"Requirements\" section, because i think that's sort of a detail that better positioned after you understand what the package even does.\nthere is a one-liner here: https://github.com/slackapi/node-slack-sdk/pull/702/files#diff-7c888464716dcf5504f56ea45fdeb29cR35\ndo you feel strongly that we need to discourage RTM use? i don't actually think that's helpful for people who are just getting off the ground. i'd rather them use something, anything - and then we can talk to them about how to choose the most appropriate technology for their needs (and sometimes this will be RTM!).. its SLACK_TOKEN all over the web_client.md page, so i made this change for consistency. i don't feel like the word access conveys any real meaning, because for the purposes of this document, there's only one token. i think it starts to matter when you talk about how OAuth works. open to changing that though.. this is interesting feedback. we added those lines into almost every example in web_client.md based on feedback that it wasn't already clear which lines were required to make the code in any given example work. this was sort of stiking a compromise by just showing the imports at a minimum, but not showing the instantiation because it can become visually \"heavy\".\ni was adding this here because rtm_client.md didn't get the same love of retreatment. but now i'm curious if its helpful at all, and if we should make all of the examples shorter. \ud83e\udd14 . suggestion\n      (this.apiCall.bind(this, 'chat.deleteScheduledMessage')) as Method<methods.ChatDeleteScheduledMessageArguments>,\nremoving the s since the method name isn't plural.. suggestion\nexport type ChatDeleteScheduledMessageArguments = TokenOverridable & {\nditto. ",
    "tjhorner": "Mostly cc157c5, but the others look production-ready.\n. That's weird... last time I checked, the updateMessage method wasn't in master...\n. Exactly why I closed it\n. I'm a bit confused on how to use updateMessage. How would I get a Message from sending one on Channel.sendMessage? It doesn't look like I can.\n. Sorry, I meant how do I get a timestamp from the server once the message is sent? It's needed for Message#updateMessage.\nFor example, something like Channel.sendMessage(message, callback)\n. javascript\nchannel.sendMessage(\"hello\");\n=> undefined\n. ",
    "kachizukanne": "Hi,\nI reckon this update may be necessary to elegantly manage this exception. Given the trace for the call (see above image) I'm unable to trap and manage the exception from the caller\n. ",
    "davidkassa": "+1. Also, should this check be made on the disconnect method?\n. ",
    "nilsga": "I have been investigating this some more, and I have come to the following conclusion. To be able to use this library through a proxy, it needs to:\n- Use the http module instead of https module, and connect to the API-server through a proxy, as described here: http://stackoverflow.com/questions/16459751/calling-a-https-web-service-in-node-js-behind-proxy\n- Somehow achieve the same with the ws module, which also uses https module instead of http module when using the wss:// protocol.\n. The \"entirely different host\" is the proxy server, and the format of the request is apparently how a request is proxied through a http proxy at the http level. So the supporting http/https libraries used by this module, and the websocket module does not transparently support proxy configuration. That would have to be done by this module, or depend on modules that can handle it, I suppose.\n. Sorry, didn't mean sound rude. I just wanted to clarify the usage of proxy through the node http/https module. I don't think it's a quick solution to this either. It's more of a general NodeJS issue I guess.\n. ",
    "structAnkit": "@nilsga I have been having this issue for a few months and decided yesterday to finally roll up my sleeves and figure this out.\nI found that modifying slack-client to take an agent parameter to use in its https.request options works, assuming you supply something like the HttpProxyAgent module as the agent. Unfortunately this only gets you past the initial rtm.start call; the ws module also needs the agent. I tried hacking around and found out that ws uses a module called Options which messes with any agent object you pass into the WebSocket initializer.\nMy final solution was to test modules that globally forced all https/http requests through my proxy, such as tunnel, global-tunnel, proxy-tunnel, and proxy-out. All of the ones I tested failed miserably for a variety of reasons (the first three haven't been updated in years to support Node 0.12.x, and proxy-out for some reason is yielding 503 API errors for me). So what I did was simply override the https.request method to add the HttpsProxyAgent as the agent before creating the request:\n``` js\nvar HttpsProxyAgent = require('https-proxy-agent')\nvar agent = new HttpsProxyAgent('http://127.0.0.1:3128')\nvar https = require('https')\nvar httpsRequest = https.request\nhttps.request = function(options, callback) {\n  // Set agent if agent not already supplied and if HttpsProxyAgent is instantiated\n  if (!options.agent && agent) {\n    options.agent = agent\n  }\n  return httpsRequest(options, callback)\n}\n```\n. ",
    "GrandPubba": "@structAnkit I need this feature as well and am going to start working on an implementation shortly.  It appears you have done some work on this already.  Do you have any patches you could share?\n. No thanks for pointing that out.  I'll update the pull request when I have the change made and tested.\n. I have added support for configuring the WebSocket to proxy.  I've tested it locally and it is working.\n. Excellent thank you.  How do we go about getting a release to npmjs.org so I can finish the required patch for hubot-slack?\n. ",
    "programble": "+1\n. Oops, duplicate of #36.\n. ",
    "saetia": ":+1: \n. ",
    "rileydutton": "+1 Ran into this myself tonight\n. ",
    "dfarr": "This would be a cool feature to have! Personalized responses to other messages in the right context.\n. ",
    "danbovey": "+1\n. ",
    "tnws": "+1, I'd like this too.\n. If you use an attachment and text within the attachment it'll work out. The only issue with it is that it'll give you the grey bar on the left denoting that it's an attachment.\n\nOr you could try it as pretext in an attachment, but there'll be an empty line underneath.\n\nTo send messages, make sure you use postMessage. Let me know if there's a way that I can help.\n[update] Sorry! I meant for when you send attachments, to make sure you use postMessage. Hopefully wording didn't come off as \"only send messages with postMessage\". send is just fine for non-attachments!\n. My bad, I should've said that as well. Was just about to post the snippet as you figured it out haha\n. Data store of an RTM client, yeah.\nI've tried require('@slack/client').MemoryDataStore, however, I'm not seeing where to go from there. The attempts I've made have failed.\n. The default one.\n. @Everesty Thank you.\n. Detecting @-mentions meaning, towards the bot/user account running the client or just a message mentioning a user?\n. I honestly think that's your best bet: grabbing the ID on startup, then using it against incoming messages from Slack, like you said. You probably could leave this open to see if anyone else can weigh in, but I don't believe there's any mention events just yet.\n. ",
    "scottmont": "I have been trying to implement this in many ways even hijacking errors codes to no avail.  Would be great if this worked.  response_type: ephemeral does nothing :(\n. ",
    "khanh-nguyen": "I got it working. Turn out it must be an app.\n. ugh, changing event name or combining events together without document is not fun :(\n. Yeap, @jschuur, as you've seen in my code, they combined team_join and user_change into user_change. I don't know how different it is to use \"hubot powered Slack bot\" but if you want to another eye on your code, let me know. \n. ",
    "shyshy": "Hey @khanh-nguyen, does this still resolve the issue for you? I tried changing my Procfile and I still get the error.\n. ",
    "Carpetfizz": "Hey @khanh-nguyen did you resolve your issue by simply creating an app and not using it, or does the node-slack-client somehow integrate with it? Thanks.\n. ",
    "iostreamer-X": "Had the exact issue with my bot on heroku. I just added a server that heroku could bind to and it worked perfectly.\n``` javascript\nhttp = require 'http'\nhandle = (req, res) -> res.end \"hit\"\nserver = http.createServer handle\nserver.listen process.env.PORT || 5000\n```\n. ",
    "lhelminiak": "What file did you add this code to?\n. ",
    "jschuur": "@khanh-nguyen I ran into this exact same problem yesterday. Were you able to solve it? I there a new naming convention for events?\n(Edit: Just saw your code.\nI'll give this a shot. I'm actually using a hubot powered Slack bot, so I don't know if this helps me, considering it uses the slack adapter that might change things up here.)\n. ",
    "keoghpe": "+1\n. ",
    "97-109-107": "@atmos could you please share an example of how you used this change to read history? Is this just a regular event that can be interpreted with:\n```\nthis.slack.on('message', function(msg) {\n    ...\n  });\n```\nIf yes, how do you differentiate between a 'real' message in the room versus a result of fetch history?\n. @lstoll I believe that might be beneficial to other users. In my attemts to solve this for my own use case I tried adding a subtype like so:\n_onFetchHistory: (data) =>\n    for message in data['messages']\n      message['channel'] = @id\n      message['subtype'] = 'history'\n@atmos thanks for the example\n. @brandonhorst I don't remember how exactly I solved this issue, but a quick search on the codebas suggest that I haven't used fetchHistory in the end. I could however see that I must've moved the history fetching aspect to be a request made on the api directly, by hand. Hope this helps.\n. ",
    "atmos": "I'm calling this method after the login event is emitted and backfilling the channels that I want.\nOne drawback is definitely the interaction w/ resetting messages as marked as read. I'm unsure if that's something I need to fix in the client library or if there's a better way to query the API to avoid changing this state.\n. I figured out the problem w/ marking messages as unread, we were using the autoMark attribute on the client incorrectly.\n. @97-109-107 Here's an example of how I'm using it. https://github.com/atmos/peonies/blob/71cdceecc98af8b8496e4424d3395a38fdc88565/src/main.coffee#L22-L28\n. Are there a lot of places that switch on message subtype? I was trying to avoid having to add another special case and I believe subtype is useful to preserve.\n. ",
    "lstoll": "@97-109-107 we don't differentiate between historical and new messages on events, they're just messages to be handled. Maybe we could set a field on it to indicate that it's historic?\n. ",
    "brianantonelli": "+1\n. ",
    "brandonhorst": "+1\nIs this possible?\n. Yeah, I ended up doing the same. Thanks!\n. ",
    "ChrisCinelli": "Can we bump ws version please?\nIt is still broken on node 0.12.\n. ",
    "adamgoose": "This is one of those times when you just ignore me... class Group extends Channel\n. ",
    "barnumbirr": ":+1:\n. ",
    "voneiden": "Also seeing this happening.. on average perhaps once a month.\n. ",
    "ngtjah": "Seeing this problem almost daily..\n[Thu Nov 05 2015 20:41:02 GMT-0700 (MST)] DEBUG pong\n[Thu Nov 05 2015 20:41:07 GMT-0700 (MST)] DEBUG ping\n[Thu Nov 05 2015 20:41:08 GMT-0700 (MST)] DEBUG pong\n[Thu Nov 05 2015 20:41:12 GMT-0700 (MST)] DEBUG ping\n[Thu Nov 05 2015 20:41:12 GMT-0700 (MST)] DEBUG pong\n[Thu Nov 05 2015 20:41:14 GMT-0700 (MST)] DEBUG Unknown message type: team_migration_started\n[Thu Nov 05 2015 20:41:14 GMT-0700 (MST)] DEBUG { type: 'team_migration_started' }\npong ping stops and then I have 1-way communication\n. ",
    "igorantun": "[+1]\nOh, good (somehow) to know I'm not the only one with this. I have the exact same issue, usually every 2~3 days the app will just disconnect without sending any notice or exceptions or anything. Thanks for your 'remedy', I'll implement it until it gets fixed for good :)\n. ",
    "shepelt": "@vanm the same behavior was observed for me as well.\nI tried slack.login() on close event as well, which resulted in the same behavior (multiple websocket created)\nI believe we need a more proper, full-blown reconnect mechanism instead of this kind of monkey patching.\n. @vanm I think the root cause of this issue lies in the fact that there is no coping mechanism for connection closed events.\nAccording to the current implementation, node-slack client is not supposed to reconnect for any kind of closed event.\nhttps://github.com/slackhq/node-slack-client/blob/master/src/client.coffee#L127-130\njavascript\n@ws.on 'close', =\n    @emit 'close'\n    @connected = false\n    @socketUrl = null\nThe same is true for error event.\nhttps://github.com/slackhq/node-slack-client/blob/master/src/client.coffee#L123-125\njavascript\n@ws.on 'error', (error)=>\n    # TODO: Reconnect?\n    @emit 'error', error\nNode-slack-client reconnect is triggered by ping-pong mechanism only.\nhttps://github.com/slackhq/node-slack-client/blob/master/src/client.coffee#L111-115\njavascript\nif @_lastPong? and Date.now() - @_lastPong > 10000\n        @logger.error \"Last pong is too old: %d\", (Date.now() - @_lastPong) / 1000\n        @authenticated = false\n        @connected = false\n        @reconnect()\n. ",
    "compulim": "@vanm I am wondering why calling reconnect() would result in multiple WS connections. As in client.coffee:160, calling reconnect() will kill previously opened WS connection before opening a new one (and also ping-pong).\n@shepelt You should call reconnect() instead of login() after connection close.\n. This is good enough for short term. But I think in the long term, we need to rewrite the connection logic.\nTo make the connection robust and easy to debug, the connection logic should be driven by a singleton worker (per instance of Client). It will be signaled by calling login, connect, reconnect, and disconnect.\nIn additional to existing \"ping timeout\" scenario, we also need to add timeouts to rtm.start, establishing WebSocket connection, and wait for {\"type\":\"hello\"}.\n. @vanm I am working on a full rewrite of connection logic in https://github.com/compulim/node-slack-client/tree/feat-robust-connection, with the mentioned pattern above. It is still in the work and not fully compatible with current implementation yet.\n. ",
    "meteormanaged": "any hope in getting this merged?\n. sry. wrong post.\n. https://api.slack.com/rtm\nit's all in the API docs for the RTM.\n. ",
    "SJAnderson": "any word on this getting merged?\n. ",
    "halkeye": "@alexkwolfe do you have time to fix the merge conflicts? I want to start nudging people for this again but it seems like its no longer a clean merge. If you don't have time, lemme know and I'll take a stab.\n. ",
    "jeffclyne": "I'd love to see this merged as well so slackhq/hubot-slack#62 can proceed.\n. I think the issue is just having an API call to use to upload files, so the hubot-slack adapter can provide the hook for scripts to utilize.\n. ",
    "crookedneighbor": "Is this PR needed any more? I see an example for how to upload files in the example directory.\n. :+1:\n. Any update on this?\n. No worries, I understand how that goes. Happy to help any way I can. \n. Just checking on the status of this. Anything I can do to help?\n. :+1:\n. Any idea when you'll publish this to NPM?\n. There was no test coverage around this file that I could find. Is it cool to add this?\n. I had this be injectable for easy stubbing. Could also accomplish the same thing by stubbing the transportRequests object directly. This was the pattern I saw elsewhere, but am happy to change it. \n. I figured you wanted the properties to be in camelcase, and have the module convert this one to snakecase.\n. Also, should this do some convenience checking so you can pass with or without : and have it work? Ie, make robot_face and :robot_face: both valid values?\n. Had to shorten this function name because eslint wasn't happening about how long it was. \n. I saw in some other places, there were things like RTMSlackError. Should this be a new kind of Slack Error? Or does it matter?\n. Should this return a Promise if a callback isn't provided? Or just leave that up to the user to wrap it if they prefer promises?\n. ",
    "DEGoodmanWilson": "I'm going to assume not\u2014I'll open an issue to track this should it turn out that uploading files on 3.x isn't working so hot.\n. This forum is not an appropriate place to discuss the Slack client itself. Please, let us limit ourselves to the topic of this discussion: Memory usage of the Node SDK.\n. I'm going to close this, because new features like this should be focused on the 3.x branches. However, this is a good and interesting point you raise that deserves further attention. Would you be willing to open an issue for discussing it further? (I am very familiar with bot tokens, and how they are issued along side a more standard bearer token.)\n. \ud83d\ude47\n. I think @silentrob 's instructions are for a much older version. Currently, it would look more like this, modified from the documentation:\nvar RtmClient = require('@slack/client').RtmClient;\nvar rtm = new RtmClient(bot_token);\nrtm.start();\n// you need to wait for the client to fully connect before you can send messages\nrtm.on(RTM_CLIENT_EVENTS.RTM_CONNECTION_OPENED, function () {\n    rtm._send({id: 1,\n    type: \"typing\",\n    channel: \"CHANNEL_ID\"\n  });\n});\nYou'll need to fill in bot_token and CHANNEL_ID on your own.\n. Just to check\u2026you are replacing CHANNEL_ID with an actual channel ID?\n. I'm going to recast this as a more general question about: How can you access the underlying RTM mechanism to do things that aren't officially supported by the SDK\u2026because it looks like none of us, myself included, have the right notion of how this works\u2026\n. The feature is most definitely not deprecated ;). There are at this time no events sent with a bot is removed. Rather, the bot's connection is dropped, and it is up to the bot to detect the failure upon reconnect. So, Leah's solution is the only one available. At this time.\n. We're in the process of revisiting how the datastore works, just to keep y'all abreast. Using a single datastore for each team is something that is on the table, as it should make implementing Events API easier.. Could you provide a little more detail on what you were hoping to achieve?\n. Is this issue resolved?\n. I'm going to close this issue, as we are currently working to port hubot-slack to the latest node-slack-client, which provides this functionality: https://github.com/slackhq/hubot-slack/pull/309\n. Howdy! Just want to let y'all know that we're starting to allocate dedicated engineering resources to this stuff. Documentation is very high on our priority list!\n. Howdy! Sorry for the late reply. A mechanism for hitting incoming webhooks would be very welcome, I think. If you have a PR you can issue, I'd be happy to have a look at it!\n. Very interesting. Just updating this to let you know that as I build out better documentation for this project, that I'll be considering this. Thank you!\n. @lipp Now that the new documentation is out, I'm guessing you'll need to update this PR to reflect the new reality? Could you consider reworking and resubmitting?. Specifically, I guess I mean: CHANGELOG.md isn't really the changelog anymore. The real changelog is now an RSS feed\u2026how does that affect things?. @PaulAsjes Looks like there is a merge conflict with your latest commit, can you fix?\n. \ud83d\udc4d \n. No, that event is only fired for your bot. Watch for message.channel_join for other members. This is a subtype of the message event.\n. Bots are not allowed to @mention groups or @here. This is a limitation of the Slack platform itself, and not the SDK, I'm sorry to say.\n. Closing as a duplicate of #193\n. Howdy! Could you be more specific about what you are seeing, and what you were expecting to see? Along with steps to reproduce?\n. Hello! My apologies for not commenting sooner. I think this is an interesting and valuable feature, but I first need to get through a backlog of more pressing tasks. I promise that I am going to come around and have a look at this PR in the coming weeks, and I want to give this PR the attention it deserves. But I've got to find the time to do that first ;)\n. No worries. Finally had a chance to look. Thanks for pinging me! I'm going to approve this, looks good.\n. Closing, as this is a general Slack help request, rather than something specific to the project. You might also consider joining the Dev4Slack Slack team (sign up at dev4slack.xoxco.com), channel #sdk-node-slack-sdk\n. (Thanks for this, will help in tracking the issue, will have more to say later today.)\n. Later that day: apparently not.\nSo, I've had some time to go through the way tokens are handled in the code, and I'm not convinced that node-slack-sdk is the right level to address this issue, as in general I think this SDK should not have strong opinions about how to use your tokens. Please tell me if you disagree, but it seems to me the Thing to Do\u00ae would be to create two Slack objects, one with each of the two tokens returned by oauth.access, and then decide which object to use depending on the call.\n. This is an excellent question. I don't have a good answer for you at the moment, but I'll be researching this and getting back to you\u2014and then sharing the result in our documentation as well! Meanwhile, if others here have solutions they'd like to share, I think hearing a number of different voices might be helpful.\n. Did you close this because you resolved the issue, @jadesym?\n. No worries, just wanted to make sure!!\n. Could you say a little more about what you are experiencing? Is it that you receive a  file_shared event, and then find that you cannot download the file? This might be an authentication issue, perhaps\u2014I don't know if we properly handle authenticated file downloads. Anyway, more details on the nature of the failure would help!\n. That seems clearly wrong to me as well.\nQuick question: Does it work as expected when you use callbacks instead of promises?\n. Ah, I now understand the difficulty! I was a little lost before.\nThe problem is that the SDK has no way of knowing which message is a reply to the one you send. So, yes the callbacks and the promises are all about reporting that the message your bot is sending was delivered. If you want to get what people type in response to your bot's message, you're going to need to do a lot of interpretation on your own (or using one of many NLPaaS options!). You'll need to listen for messages in the same channel, possibly that include an @-mention of your bot (if in a group channel), and work out for yourself whether the message constitutes a response to your bot.\nAm I reading you right?\nWelcome to the central technical problem of conversational UX ;D node-slack-sdk is a thin, modestly-opinionated wrapper around the Slack core APIs, and nothing more. You might consider using a more opinionated, bot-specific framework like BotKit to achieve your goals?\n. \ud83d\ude47 \n. I'm going to look into this PR today, as improvements to the reconnect logic are important! Before I accept this, however, I would like for you to include tests around this new functionality.\n. Depending on the source of this particular error, it might mean the token used to open the connection is no longer valid, in which case we shouldn't reconnect. That's one of the things I want to investigate. There are some simple things we can do to mitigate against reconnecting in that case.\n. Good to know.\n. Where do we stand on this, y'all? Is it looking like the current logic is more or less the right logic? I still feel that not every disconnection deserves a reconnect attempt (specifically when tokens are invalidated because of uninstall)\u2014is this the right place to be thinking about crafting that logic improvement?. Interesting. Could you perhaps work up a an example timeline that illustrates the ambiguity that arises from the current use of UNABLE_TO_RTM_START, and the kinds of issues that arise? What you are proposing is a breaking change, so I want to think very carefully about the ramifications of the proposal\n. Very helpful! Thank you! \n. I'd be interested in seeing how this is implemented. I'd like to extend the cacheing system to be a little more flexible in the backing layer used (as well as turning it off when not wanted), so it would be fun and informative to see what you have!\n. @mhahn A hypothetical question: Would it be easier to implement something like this at a different layer? Perhaps if we provided a middleware architecture for cacheing?\n. There are enough other issues with the existing interface anyway that a re-write of this layer might well be called for, so I'm not really bothered by this :)\n. #111 is the biggie here.\n. @acemtp you might enjoy this conversation, BTW.\n. I really should add CI checks for that. Thanks for noticing.\n. I honestly do not recall why I opened this issue. I think this was meant as a reminder to myself to check that we are doing this? \u2639\ufe0f \ud83e\udd14 \n. From an admin user, or from the user who posted the message, presuming that message deletion hasn't been disabled. Yup!\n. No worries!\n. I'm going to go out on a limb here and say: The code's behavior as-is appears correct. What concerns me is that you are getting these message echos. That should basically not happen. Of course, when it does, yes it will get deleted and the ack will fail for sure. But, in truth that error message is harmless\u2014annoying at worst.\nWhat I'd like to understand is why you are seeing these echos. That's most definitely an issue, albeit with our Message Servers. Do you have some server logs you can share with us?. @aoberoi ? I'm going to bow out of this conversation :(. Thanks for the heads-up! Let us know what your research turns up!\n. Well poo.\n. Can y'all log the events you are receiving that triggers this behavior? Also, I am having a hard time seeing how _msgResponseHandlers would be empty\u2014it seems more likely that the reply_to field in the received event is out of order, or perhaps even missing (undefined)?, which makes me think the cause might be something else\u2026maybe. Anyway, it would be helpful to get some logging around this issue to help me diagnose it.. Howdy. That's simply because I hadn't released those changes yet. I have a couple of bugs I'm looking at first, and I'll try to get a release out today or Monday.\n. Thanks for this, y'all! I'll be following up just as soon as I fix one blocking issue\u2026\n. Oh geez, I see the problem. I've pushed a new release, 3.5.2, which addresses this issue.\n. I've verified it works with 3.5.3. Can you also verify?\n. Looks like this is still an issue for the original reporter. @twellspring could you share concrete steps to reproduce? So far, I haven't been able to.\n. Hi, sorry to be a pain, but would you reopen #256 with this new information, instead of opening a new issue?\n. NP \ud83d\ude04 \n. I'm going to close this one as solved!\n. I'd like to think a little more about the structure of this, but in general: Hells yes!\nIt would be cool if we could do something similar with the RTM api, so you could pick which method to use to connect as a bot.\n. Sorry for the long delay in returning to this. Adding this feature is now in the planning stages, and we hope to start actively working on building it very soon!\n. @christophehurpeau Looks like you need to merge master into your PR. Can you do that? Everything else looks good to me.\n. Well, this should have gone out in today's release, but it didn't and I apologize. I'll get this out next week!\n. Well, \ud83d\udca9 can you rebase on master? I'm working to close out issues on Thursdays (last Thursday was Thanksgiving, something I failed to take account of), and I seriously do, honestly earnestly want to get this out today.. @christophehurpeau sigh I'm so sorry. One more time, it looks like?. @denouche Check out v3.7.0 ;). Sorry y'all, been on vacation. Will get something new pushed out to NPM this week.\n. Out as of just now! v3.6.0\n. I'm going to close this PR, because it will shortly be superseded by a somewhat more comprehensive PR that covers a closely related issue.\n. Howdy! Thanks for filing this report. Could I ask a favor? I don't have a suitable firewall available for testing\u2014since you seem to have figured out where the problem lies, could I convince you to publish your fix in a PR? This would be a lot easier than me guessing at the right fix, and passing it to you for verification and testing.\n. I am very sorry that it is annoying, but it is for your protection as much as ours. Unfortunately, I cannot accept a patch without a signed CLA either :sob:\n. Version 2.0.6 is quite old\u2014have you checked to see that this issue still exists in the latest version (3.5.4 as of just now)?\n. Ah, sorry about that! I didn't do a good job of cross-referencing these two PRs :(\n. @aoberoi Could I convince you give this a review? I'm inclined to :+1: but I'd like your eyes on it too.\n. In the meantime, @liuweichu I see that the linter is rejecting your changes. In particular, we require string literals to use single-quotes, and all lines to be terminated with semi-colons. These issues must be resolved before we can accept this PR.\nI apologize that this has taken me so long to come back around to, and I am eager to get this merged in!\n. Oh, this is lovely!\n. I am sorry to say that it is not possible to upload a snippet with incoming webhooks. You must use the files.upload API and set the type to snippet.\n. So, although it looks like you can react to messages with the RTM API, actually this is an illusion. You can only do it with the Web API\u2014rtmClient.__chat.makeAPICall just calls out to the Web API. Properly, you should be using an instance of webclient to do that, as you are digging around in object internals that are subject to change.\nSo, try this instead:\n```\nvar web = new WebClient(token);\nweb.reactions.add(\"joy_cat\", {\n    channel: \"C1234\",\n    timestamp: \"123.456\"\n});\n``\n. Hello! This is actually a very welcome PR. The facets are usually auto-generated, but the autogenerator has broken and so it is hard for us at the moment to keep these up to date.\n. @dimashirokov Your PR is failing our linter. Can you please correct? Eager to merge this.\n. https://docs.google.com/a/slack-corp.com/forms/d/e/1FAIpQLSfzjVoCM7ohBnjWf7eDYQxzti1EPpinsIJQA5RAUBwJKRUQHg/viewform\n. I'm going to close this PR for lack of activity. Please feel free to repoen if/when you're willing to sign the CLA.. Hello, at the moment we don't have an explicit method to call this endpoint. However, you can call any arbitrary endpoint, likeusers.profile.getwith theWebClient.makeAPICall()` method, as such:\n```\nvar WebClient = require('@slack/client').WebClient;\nvar web = new WebClient(token);\nweb.makeAPICall('users.profile.get', null /no required args to this call/, {\n    user: \"U123\", //optional user param\n    include_labels: false //optional include_labels param, defaults to false\n}, function(err, info) {\n   //err is set if there was an error \n   //otherwise info will be an object that contains the result of the call\n   if (!err) {\n       console.log(info.howdy);\n   }\n});\n```\n. :facepalm: you are of course absolutely correct on that, thank you. As it happens, a closely related issue was fixed in #289 and released as part of v3.7.0. A similar fix can be made here as well\u2014I'll get on that this morning.. @DevanB @e-founders Please have a look at #297 and tell me if this sorts out your issue! If so, I'll add some tests and merge it in.. Thanks for this! We'll have a look at your PR soon!\n. Hello! Questions about how to use the Slack Web API itself are best answered by going to the source, in this case https://api.slack.com/methods/chat.postMessage\nThat said, we could probably add this fact to the documentation, and I'll put it on the list to do so for our weekly sprint.\n. :bow: Thanks for this!. It looks like there is an inconsistency in the way that promises vs callbacks are handled that is leading to this behavior? I.e., it looks like a bug? @aoberoi thoughts?\nhttps://github.com/slackapi/node-slack-sdk/blob/master/lib/clients/client.js#L147. @dsimmons Would you have a look at #296 and see if this helps resolve your issue?. :bow: It is our pleasure!. This is quite good, thanks for this! We should look into adding returning that information to the callbacks for sure. Shouldn't be hard, I think!. @benjie Would you have a look at #296 and see if this helps resolve your issue?. @benjie Thanks for your comments, I've updated the header keys to be lowercase.. A fair question, thank you for raising it! At the lowest level, the RTM API only allows you to specify a channel/group/DM id. You cannot use a channel name, a user name, or a user id. This is clearly a problem with the documentation for this project.\nPlease note that chat.postMessage is a different API from the RTM API\u2014and it is much more permissive about what it will accept.. You need to know the DM id. Each DM conversation has a DM id that is separate from the participants' user ids. To participate in a DM using the RTM API, you'll need to start a DM using the im.open web API endpoint, and then cache the resulting DM id for future use.. Right. I did not expect that NPM would actually alter the package.json file. TIL. Getting a fix out now.. @Rauno56 @palmerabollo Can you confirm the issue is resolved?. Hello! It should execute your CB when it retries the endpoint. If it is not, that is a bug for sure!\nAt the moment, there is no way to disable retrying\u2014is the existing logic not working for you? It might be a nice feature if we added a web api retry policy so you could specify how throttling should be handled. What do you think?. Why did you remove this option from the readme? This is still a valid option.\n. Why these changes? This seems outside the scope of your PR's discussion (removing invalid options from documentation)\n. Could you say a little more about this design decision? Connection to the MS isn't necessary for a call to chat.update to succeed, being a web API call.\n. Probably the thing to do\u2014at least what I do with the client I develop on my own\u2014is simply require a valid token in the environment. And then provide one to a test team you've set up for the purposes of running tests.\n. Sorry, I forget that's internal terminology. MS = Message Server = the thing you connect to with the RTM API. My question is on the if (this.connected) condition\u2014you can call chat.update without a live RTM connection.\n. Unfortunately, at this time, it is not. The only way to test this functionality is with a live team. I agree it's far from ideal :( But this might be a good feature to consider for the platform to build!\n. There are a lot of whitespace changes in this PR\u2026would you mind adjusting that? Just to keep things clean?\n. yeah, each of the clients has its own kind of error defined in errors.js. Let's add one for incoming webhooks. But the thing is, we don't throw errors, rather we either call error handling callbacks, or emit error events as the case may be. Of course, we aren't doing checking of required parameters in the other client constructors, so maybe this is a fine thing to do, actually. Let's leave this as you have it until we have a good reason to do this differently.\n. I think this is fine.\n. I would be of the mind to require the :emoji: form, and then do some checking to make sure what we got passed is of that form. We can add that later ;)\n. Yeah, this is fine. We should write some tests around this whole file tho\n. It's not\u2014it is from request, but thank you for pointing this out! I'll look up what the best practices for handling headers passed by request are.. ",
    "josephpage": ":+1: \n. ",
    "visnup": ":+1: \n. ",
    "Connoropolous": "Is there a plan/timeline for merging this in?\n. ",
    "albatrocity": ":+1: this would be handy\n. ",
    "msabramo": "This is pretty awesome! Thanks!\nOne thing that would be nice is if the reaction_added event could give me more information about the message that the reaction was added for.\nCurrently, it gives me data like:\njson\n{\n  \"type\": \"reaction_added\",\n  \"user\": \"U02AXCUAJ\",\n  \"item\": {\n    \"type\": \"message\",\n    \"channel\": \"C0CA0D74M\",\n    \"ts\": \"1446213270.001126\"\n  },\n  \"reaction\": \"simple_smile\",\n  \"event_ts\": \"1446217125.132010\"\n}\nbut I don't know what the message text is for the item that the reaction was to. Is it possible for it to pass the message text to the callback?\n. Anyone from Slack looking at this yet? @l12s perhaps?\n. I'm playing around with using this:\ncoffeescript\n      when 'reaction_added'\n        channel = @getChannelGroupOrDMByID message.item.channel\n        if channel._history[message.item.ts]\n          message.item = channel._history[message.item.ts]\n        m = new Message @, message\n        @emit 'reaction_added', m\nThis is nice because then I can do:\ncoffeescript\nslack.on 'reaction_added', (message) ->\n    channel = message._client.channels[message.item.channel].name\n    console.log(\n      \"Reaction added: message.reaction=#{message.reaction} \" +\n      \"channel=\\\"#{channel}\\\" \" +\n      \"message.item.text=\\\"#{message.item.text}\\\"\")\nand get:\nMessage received: channel=\"test_devopsbot\" user=\"marca\" text=\"Hello world!\"\nReaction added: message.reaction=simple_smile channel=\"test_devopsbot\" message.item.text=\"Hello world!\"\n. I'd love to get some feedback on the approach that I took if someone has time to take a look.\nI have a forked/hacked environment that I've built a little upon and I don't want to build too much on it if the foundation is going to change.\n. OK -- thanks, @l12s! Yeah that's what I figured -- that what I was doing was probably not the best approach and that you folks could probably do it in a better way. I will wait a bit for the nicer solution.\nThanks!\n. reation => reaction\n. ",
    "CaptainPalapa": "We appreciate y'all's work!\n. Verified also with:\nchannel.send('This is a <https://www.google.com|link> test sample.')\nSent the text to the chat window just like it appears in code.\n\n. I added these functions to the 'slack' object in my primary script.  If a\nvalue you pass to either function is what its supposed to return then it\njust returns the same value.\n```\nSlack.prototype.convertToUserID = function(key){\n  // Send either a U123456 UserID or bob UserName and it will return the U123456 value all the time\n  if(key in this.users) {\n    return key;\n  } // This string must already be a user ID\nfor( var userid in this.users ){\n    if( this.users[userid].name == key ){\n      return userid;\n    }\n  }\n}\nSlack.prototype.convertToUserName = function(key){\n  // Send either a U123456 UserID or bob UserName and it will return the bob value all the time\n  for( var userid in this.users ){\n    if( userid == key || this.users[userid].name == key ){\n      return this.users[userid].name ;\n    }\n  }\n}\n```\n. Jox...what was your solution?\n. ",
    "hildjj": "Are you already working with the Hubot folks to transition to the new version?\n. ",
    "izeau": "I don\u2019t know if it\u2019s safe to use (tbh this whole lib looks like an early WIP \u2013 which is a good thing), but there's an internally used method to communicate using the REST API: Client#_apiCall.\n```\nvar Slack = require('slack-client');\nvar slack = new Slack(token);\nslack._apiCall('channels.join', { name: 'general' }, callback);\n```\nPlease note that your token is added automatically and you should not set it in the params.\nAlso the callback does not follow Node convention and the first parameter includes a property ok which you should rely on for error handling.\nCheers\n. ",
    "kurisubrooks": "This is exactly what I needed, thank you so much @izeau. \nI wish they would add some Documentation... It's very needed.\n. To measure memory usage i was using PM2. \nVia their status command, here are the results i've collected over time.\n13m    \u2502 45.734 MB\n102m   \u2502 55.215 MB\n2h     \u2502 60.563 MB \n2h     \u2502 64.199 MB\nLast time I had this running it seemed to cap out around 80-100mb after a couple hours.\nOver a period of about 2 months (the time i've had my bots), it's generally been the same. some variation in memory use, but, this is for an absolute minimum program. Which, is kind of silly.\n. In the 17 minutes that have passed since I sent the last message, the memory continues to go up:\n2h     \u2502 67.805 MB\n2h     \u2502 71.906 MB\n. I understand. I'm going to leave my program open over night and check the memory usage in the morning. I still don't quite understand why the memory usage goes up over time for something that I wouldn't expect to. \n. Hello. Just ran the command to check memory usage and it seems to have stuck around the 80mb mark, as I predicted before.\n17h    \u2502 79.211 MB\nThe issue might not be a memory leak, but rather just a very large memory memory footprint. Let me know what you think.\n. I host on a very cheap vps, which only has about the same amount of ram as a raspberry pi. Memory usage is quite important for something with as low memory as this. \nI've read through the code but I don't see anything obvious that would cause such high memory, this might be a problem with websocket or one of the dependencies that the client runs on, who knows. \nI think i'll change the title of the issue and leave it open to see if anyone else can provide some input.\n. Your memory usage would be from the Chromium Wrapper that Slack runs on, and not the API itself. I think your issue is seperate. This repo is for the Node.js implementation of the Slack API.\n. This repo's for the backend API of Slack through Node.js, serves an API for Bots and Integrations. The client is closed source embedded webkit. The repo itself is poorly named, but that's not our problem. \nThe reason the desktop client, the program (not the API) has such a high memory footprint, is due to the fact that it runs on Chrome's WebKit Engine. High Memory use is to be expected.\n. The reason Slack's desktop app uses so much memory is because of the underlaying Electron wrapper. Electron is based on Chromium, which is Chrome, which is where the ridiculous memory usage would be coming from. \n. Changing the name in hopes people will bother reading up what this issue is actually for before commenting.... ",
    "Penagwin": "A pale, or slightly transparent white dot might fit the color scheme nicely too.\n. ",
    "Hunchmun": "Is there any news on this?\n. ",
    "labeneko": ":+1: \n. I tested https://github.com/vanm/node-slack-client/tree/ws-and-team-migration-fixes for defects and it works fine for me.\nI can't reproduce the duplicate problem.\n. ",
    "kylepaulsen": "Well I figured out an answer... not sure if it is the correct one. I just ended up calling the im.open slack api method. That returns a json response with the channel id (or in this case the user's DM id). Then I can send a direct message with that.\n. ",
    "MForMarlon": "If you know the userId:\nslack.openDM(userId, function(openDmData) {\n    if (openDmData.ok) {\n        var dmChannel = slack.getChannelGroupOrDMByID(openDmData.channel.id);\n        dmChannel.send('blah blah blah');\n    }\n});\n. ",
    "pvenkatakrishnan": "Referred the https://api.slack.com/docs/formatting for formatting. Also i tried escaping the < and > characters and still doesnt work.\n. I got it to work but my bot's name is not shown in the message posted. Instead it just posts as 'bot'... would you know why my bot's name got dropped as author while posting\n. figured out, just need to add user name and set as_user:true in the payload\n. ",
    "langerhans": "I don't think this has anything to do with the token. It happens to a bot of mine randomly but apparently once per day to bi-daily. Can't reproduce it tho :neutral_face:  Full stacktrace here:\n```\nbot-0 (err): events.js:87\nbot-0 (err):       throw Error('Uncaught, unspecified \"error\" event.');\nbot-0 (err):             ^\nbot-0 (err): Error: Uncaught, unspecified \"error\" event.\nbot-0 (err):     at Error (native)\nbot-0 (err):     at Client.emit (events.js:87:13)\nbot-0 (err):     at Client.onMessage (/home/node/playstore-bot/node_modules/slack-client/src/client.js:468:21)\nbot-0 (err):     at WebSocket. (/home/node/playstore-bot/node_modules/slack-client/src/client.js:140:24)\nbot-0 (err):     at WebSocket.emit (events.js:110:17)\nbot-0 (err):     at Receiver.self._receiver.ontext (/home/node/playstore-bot/node_modules/slack-client/node_modules/ws/lib/WebSocket.js:697:10)\nbot-0 (err):     at Receiver.opcodes.1.finish (/home/node/playstore-bot/node_modules/slack-client/node_modules/ws/lib/Receiver.js:397:14)\nbot-0 (err):     at Receiver.expectHandler (/home/node/playstore-bot/node_modules/slack-client/node_modules/ws/lib/Receiver.js:384:31)\nbot-0 (err):     at Receiver.add (/home/node/playstore-bot/node_modules/slack-client/node_modules/ws/lib/Receiver.js:93:24)\nbot-0 (err):     at TLSSocket.firstHandler (/home/node/playstore-bot/node_modules/slack-client/node_modules/ws/lib/WebSocket.js:678:22)\n```\n. ",
    "ptarjan": "It looks like this is because of https://github.com/substack/https-browserify/pull/2\n. No worries. And nice meeting you the other day Leah.\n. ",
    "ghostsquad": "listen to all messages, and your first line can check which channel that message is coming from. This would essentially be the same code that would be implemented in here.\nif message.channel.name == 'my_channel'\n   # do stuff\n. you mean like require('./node_modules/slack-client/src/team') I suppose I could do that, but this makes the test a bit brittle. This file is technically considered a \"private\" module, because it doesn't get exported. If it were to ever be moved/replaced, my tests would break. I suppose I could do that, but I think it's not a good practice to refer directly to src files.\n. ",
    "udayms": "Thanks @CaptainPalapa :+1: This is exactly what I was looking for! :) Let me check this out.\n. ",
    "jonmcoe": "multiple users (having distinct ids) are now allowed to have the same name, so the above will return the first one it encounters. this probably wasn't true at time of writing, but it is now. ",
    "bradennapier": "This is counter-intuitive because if you use a tag @bradynapier it doesnt translate that to a user id automatically so there would be no way then to know the actually user being mentioned?. ",
    "pOoOf": "Iterating over thousands of users to get one of the user's id from his username is too resource intensive. Is there is any other way of getting users id form email or username ??. Thanks a lot, I have been looking for this.\nand also thanks for the suggestions, but i don't have a database yet. ",
    "ybv": "@l12s / @vanm ping!\n. ",
    "dudarino": "80MB? that's adorable. My guess is this client just caches everything and why invalidate cache because memory is an infinite resource? What's going on here, i have only one channel and it's not terribly busy. A dozen users, tops. what's going on here?\nhttp://i.imgur.com/0Ns8tnt.png\n. ",
    "Brain2000": "Version 2 is still running over 400MB with 6 processes.  I don't know how to \"create a client without attaching a memory data store.\"\nThe only preference that looked like it might be similar is \"Disable Local Storage\" under advanced.  However, Local Storage indicates the local hard drive, not RAM.  So this can't be it.\n. Actually, version 2 is taking up over 500MB.\n. Our team is made up of 10 people.  We just started using slack about two months ago.  I just listen to events.  I have sent about three messages using it.  We have the Visual Studio TFS plugin.\n. We have the TFS plugin set up as a channel which sends a message every time a build takes place, which ends up being around 20-30 messages a day in our environment.  I notice the memory when first opening the Slack app.  It doesn't seem to go up, so I don't think there is a memory leak.\n. Oh.  That would be my fault, I didn't realize you had a Node.js client.  All clients must follow the same versioning too, since they are both on 2.0.\n. ",
    "clavin": "So, I feel like there's some confusion happening here. I'm going to just requote something @Brain2000 said:\n\nThe only preference that looked like it might be similar is \"Disable Local Storage\" under advanced.\n\nThis shows he's talking about the actual slack client. App. The thing you get from https://slack.com/downloads. I've unpacked it, it doesn't use the module this repository hosts, so his issue shouldn't really go here.\nFurthermore, @l12s is talking about the module that this repository is dedicated to, hence the whole \"testing a RTM connection\".\nBasically, this ordeal should've been mentioned to one of the awesome people at the Slack Help Center-- if anywhere. I will agree that 500 MB is quite a lot of memory being used as my client always hovers right under 60 MB and I'm connected to 4 different teams.\nI can also see where the confusion comes from. The only thing in the name of this repository that indicates it's a node module is the \"node-\" prefix. That leaves \"Slack Client\", with which most would imagine the slack app.\n. There's more than just public help topics; the right choice here is to contact one of the lovely supporters. It's not public, but it does allow you to get your message to Slack and a response from them, which is a lot less likely here.\nEven then, I know of only one slacker in this repository, and I believe he's more of a back-end dude.\n. That still doesn't take away from the fact that this isn't the appropriate place to discuss the issue for various crucial reasons:\n\nPeople who work on and look at this repository don't work on the actual Slack client. As such, we have no control over what happens with the official Slack client.\nThat also means that people who do work on the Slack client don't check here for their todo list.\nSimilarly, we don't have control over electron, which Slack runs on.\nAgain, we don't have control over chromium, which electron (and therefore Slack) runs on.\n\nWe can't fix your Slack client issues and nothing posted here about the client is likely to be seen by anyone who works on the client.\nIf you want to see changes to the issue at hand, then choose one of the following:\n\nPublish your own changes to Chromium.\nPublish your own changes to electron.\nTalk to Slack support (if it's a Slack-specific issue).\n\nIf there is an issue with the module this repository provides (which, mind you, is not used in the official Slack client) then this is the place to discuss that issue.. To answer the question about sending a message to indicate the bot is typing, use rtm.sendTyping:\njs\nrtm.sendTyping(channelId);\nHowever, given that rtm._send didn't work, you likely are running into an issue with your channel ID not being correct or the RTM client not being connected yet.\n\n\nHow can you access the underlying RTM mechanism to do things that aren't officially supported by the SDK\n\nAlthough this isn't the current case, if you wanted to send an unsupported message type through the RTM client, I'd suggest using rtm.send and not rtm._send as rtm.send has some helpful error checks (and could have more stuff in the future).\n. Weird, official documentation for the RTM api shows the type field for sending a message indicating the bot is typing.. I answered how to do it earlier: rtm.sendTyping.\nAs noted in the botkit issue that references this issue, this only works with the RTM API currently. Why, I can't tell you, and it doesn't revolve around an issue with this repository.\nIf you'd like to question it then your best bet may be contacting Slack support and hoping to get to one of the super-cool Slack Engineers. They might already know about this, however.. See my answer to #307 for uploading a buffer via the files.upload facet.. I think it would make more sense to recognise it and give it  to the promise error handler, then do the same for regular callbacks.\nAfter all, giving it to the then handler just forces users to clog up code with an extra if statement to recognise an error, which really shouldn't happen.\nAdded on to that, getting an ok: false is technically still an error, as it stops you from getting any of the data you request for, so it should be treated as one, regardless of promise or callback.\n. I don't think you understand what process.env is. Basically, it allows access to the shell environment variables.\nIn the example, they use it to indicate that a string should be given, but that string can be many different things (and should be private), so they put that there instead. The example works if you set that environment varible.\nIn any case, the token is a string.\n. First and foremost, there technically are docs (see #144). All of the source for the project is documented via jsdoc. The jsdocs aren't exported, though. That means if you want documentation for something specific to this node module, all you have to do is a little looking around in the code that this repository provides.\nHowever, there are another set of docs: https://api.slack.com/. More specifically, you're looking for https://api.slack.com/methods. Any method listed there should be a function of a web client object. As for the arguments you need to pass to each function, you'll have to reference the corresponding faucet file, though most are fairly straightforward.\nI hate doing this, but for your sake I believe an example would be the best way to explain how to use the web client. Do note that none of this is tested. I simply wrote it up in an effort to explain how you should go about trying to use the module and api. Furthermore, it's been some time since I've used this module. There may be better ways of doing what you want than what I'm say.\n\nCreating a channel\nSo, assuming you already have your web client created (let's call it webClient), we want to create a channel. Looking at http://api.slack.com/methods, it's obvious that we want to use the channels.create method. So, let's do that:\njs\n// Create a channel named \"guest-user123\"\nwebClient.channels.create('guest-user123', function(err, channelResponse) {\n    // TODO check for errors\n    // Channel was created!\n});\nFor the sake of example, I did skip checking err and checking channelResponse.ok; if ok is false then there'll be a corresponding error field to the response object. Nevertheless, just know that you should always check for errors and handle them if they're thrown.\nPosting to the channel\nSo, we created the channel. Checking back to the Response section of channels.create we see that it gives us a plethora of information, ranging from the channel id, to the name, it's creator id, and various other data.\nWe want to post to the channel, so we'll need to use chat.postMessage. We'll need the channel id (channelResponse.channel.id) and some text to post. If we want to post as the user \"guest-user123\" then we'll need to provide username: \"guest-user123\" as an option.\nPicking up where we left off last time:\njs\n// Channel was created!\nwebClient.chat.postMessage(\n    response.channel.id,\n    'The Law of Dominance of Knives is quite interesting to think about',\n    { username: 'guest-user123' },\n    function(err, messageResponse) {\n        // TODO check for errors\n    }\n);\nAs for listening for messages on the new channel, I believe the RTM client should do that automatically.\n\nThe lack of knowledge about how to use this node module, however, does seem to be something I'd consider an issue (good thing there's already one for that: #144). Maybe using the GitHub wiki? http://readthedocs.org? In any case, I think some docs (or more/better examples) specific to this project would be a good idea.\n. Are you trying to access the data store of a RTM client? If so, the client has a dataStore field for that.\nIf you are referring to accessing the MemoryDataStore class, it's exported with the rest of this module; require('@slack/client').MemoryDataStore\n. So, the RtmClient accepts a dataStore option. That option must be a DataStore object-- more specifically, it must be a type that inherits the abstract SlackDataStore class (at least, theoretically). So, in our case, MemoryDataStore. Additionally, MemoryDataStore doesn't take any parameters to construct.\njs\nvar rtm = new RtmClient(TOKEN, {\n    // If you wanted, you could store the data store in it's own variable. Since the RTM client\n    // provides a field for it, I'll use that.\n    dataStore: new MemoryDataStore()\n});\nFrom there, using the data store is simple. You can access it via the client's dataStore field (or by variable, in the case you chose to do that).\nFor example, in the case that I wanted to get data about a user whenever they send a message, I'd want to use the getUserById method of the MemoryDataStore.\njs\nrtm.on(RTM_EVENTS.MESSAGE, function(data) {\n    var user = rtm.dataStore.getUserById(data.user);\n    console.log(user.name + ' said \"' + data.text + '\"');\n});\nAs of writing, I don't believe there are any docs on what methods MemoryDataStore contains (though that's being worked on). For now, I'd recommend looking at the source for the object, /lib/data-store/memory-data-store.js.\n\n@l12s \"default data store attached to the RTM client\"? The only default data store I see is for the legacy client.\n(Also, I just noticed that the jsdoc for the constructor of the RTM client lists opts.dataStore twice. I'm a lazy-butt and don't wanna submit a pull request for it.)\n. Just to add some info to this issue, it seems that queueCb (in /lib/clients/client.js, the _callTransport function) is being called twice (at least). The error being thrown is automatically thrown by the async module.\n. They do exist! They're methods of the MemeoryDataStore object-- more specifically the SlackDataStore which is an abstract class used to make data store classes, in which MemoryDataStore is the only one that exists currently.\nI did write up an tutorial/example on another issue a few days ago. If you want to see a list of methods that the MemoryDataStore supports, the only option you have is to check it's source.\nAs for the the lack of documentation that caused this issue, it's already been mentioned in the past/other issues that JSDoc should be generated, plus other documentation being needed.\n. Ah, I see where I went wrong. I failed to indentify that SlackDataStore implements those methods you were looking for, not the MemoryDataStore.\nhttps://github.com/slackhq/node-slack-client/blob/master/lib/data-store/data-store.js#L338\nBut the MemoryDataStore does implement all methods that SlackDataStore does, so those methods should be present in a MemoryDataStore object.\n. So, I did a little research into it, and i found some good information that would help with this: messages always have unique time stamps (versus ids, which I don't think they have at all in the same sense that a channel has an id), and that time stamp is sent back via RTM api.\nThe issue with this is that you have to wait for the RTM client to receive the ok from the server to know what that timestamp is. The callback (and message id) should be held until that ok comes back.\nAlso, I found, in my search, that there was a TODO for this exact functionality. @l12s the slack api doesn't indicate that a type is given in responses to RTM messages, so is that a bug in this module or is it an oversight in the api docs?\nAs for now, it seems that the RTM client will emit a CLIENT_EVENTS.RTM.MESSAGE event whenever a message that is sent is recieved. Listen to that event and check for a \"reply_to\" field. That'll be the id that the client generated to be assigned to that message. How you'll make all of this knowledge work together, I don't know.\n. I feel like I've written something like this before, but I'll do it again. Do be warned, however, that I've been awake for less than an hour and this whole post may be but a jumble of words to you. Basically, check the aforementioned write-up if any of the below is confusing.\nFirst and foremost, the Slack API docs is (are?) your best friend when using this module. Specifically, the methods and events sections, as they tell you what the names of events and methods are, plus they also detail what data is sent back/requried.\nSecond, you should make sure you understand the difference between the RTM client and the web client; the RTM client is used for accepting events, the web client is used for sending methods.\nLooking at the method listing, it's quite obvious we want the im.open method. So, since it's a method, we'll use the web client.\nwebClient.im.open(someUserId, function(err, resp) {\n    // Check `err` for any errors.\n    // `resp` is the parsed response from the api.\n    // Check API docs for what `resp` can be.\n});\n:balloon: :tada: :balloon:\n\nI did lie a little earlier in implying that you can't use the RTM client for sending methods, you actually can. Both clients (the RTM client and web client) inherit from a BaseAPIClient class, which has a makeAPICall method. Using that method, you can make a method call, so long as you provide an endpoint and optionally parameters and/or a callback.\nWhat the RTM client doesn't do is create the facet instances as children of itself. Basically put, you can't access methods via the RTM client like you can with the web client by calling the endpoint as a child of the client.\nSide note: The im facet is special in that you can either call it im or dm when using the module. Nothing about this info is really needed to be able to do something, just a nice tidbit of knowledge.\n. Quick question, are you reporting an issue about the official Slack client (the one you get from Slack's download page) or are you reporting an issue about the module that this repository hosts? The two are, indeed, different and the official Slack client (last I checked) doesn't run on this module.\nIf you're reporting an issue for the official Slack client, then you're in the wrong place. Instead, send a ticket to one of the lovelies at Slack Support.\nIf you're having an issue with the client, then you'll have to use the proxy transport located in /lib/clients/transport/request.js.\n```\nvar proxiedRequestTransport = require('@slack/client/lib/clients/transports/request').proxiedRequestTransport;\n// Supply the transport as an option to your client\nnew someKindOfClient(token, {\n    transport: proxiedRequestTransport\n});\n```\n. Proxy support is there for the RTM client, it's just a little different.\nThe RTM client uses objects called \"transports\" to send requests given certain information. The transport classes can be found in the lib/clients/transports/ directory of this repository.\nThe RTM client accepts a socketFn transport option and the BaseAPIClient instance that the RTM client inherits accepts a transport option. The socketFn option handles opening a socket for the RTM api and the transport option handles the call to the rtm.start slack api method (in the case of a rtm client).\nThere is only one transport for sockets (unless you make your own): @slack/client/lib/clients/transports/ws.js which returns a wsTransport function. The wsTransport function accepts a proxyURL option (just like you stated in the issue :D). The issue with this is that you can't really use the two options together as the RTM client only supplies a socket url to the socketFn.\nAn easy workaround to the above is to supply a socketFn that passes it's first parameter to wsTransport and appends it's own proxyURL option:\njs\nvar wsTransport = require('@slack/client/lib/clients/transports/ws');\nnew RTMClient(token, {\n    socketFn: function(socketUrl) {\n        return wsTransport(socketUrl, {\n            proxyURL: yourProxyUrl,\n            // there's a mistake in transport/ws.js that tries to use both \"proxyURL\" and \"proxyUrl\"\n            // so just submit both options for now as a temporary workaround.\n            proxyUrl: yourProxyUrl\n        });\n    }\n});\n@l12s Might wanna fix that to be a little easier? Also, in transports/ws.js, the function attempt to use both proxyURL and proxyUrl. Definitely needs to be fixed.\nAs for applying a proxy to get the rtm.start method call to work, the process is a ton easier; just use a proxiedRequestTransport:\njs\nvar proxiedRequestTransport = require('@slack/client/lib/clients/transports/request.js').proxiedRequestTransport;\nnew RTMClient(token, {\n    transport: proxiedRequestTransport(yourProxyUrl)\n});\n. Are you positive that you didn't accidentally try to install slack/client, which points to a github repository that doesn't exist? When trying to install slack/client, I got the same \"Permission denied (publickey).\" issue.\nThe correct name to install would be @slack/client.\n. There is a part of the old package's readme that states the move over (-- even though that's in the original post)? I guess it doesn't really mention that the transfer has already happened, but assuming they take the advice and move over, they'll likely notice.\n. Yes, it is doable. I don't really have the time to go into how right now, so I apologize on that note.\nIt has to be hosted by you, Slack won't host the bot for you.\nI do, however, want to ask you why you want to do this? I don't see any purpose, but I may just be missing something.\n. Uh, there is a feature that shows you a list of times you've been mentioned (with basically everything you just asked for)\nIn fact, there's even a Slack Help Center article on it.\nOn Desktop\n'Tis simple, there's a little @ button in the upper right corner of a chat: \n\nCongrats, you are now looking at a list of mentions involving you! :tada:\nIt should show you a list of times you've been mentioned. If you'd like, there's also an option to include @channel mentions.\nOn Mobile\n(sorry for no images, too tired atm)\n1. In the upper left you should see your team's icon, tap that.\n2. Again, in the upper left of the drawer that slides out you should see \"Home\".\n3. Tap it and one of the options will be \"Mentions\".\n\nAs for other issues you may have in the future, consider looking at the Help Center or (if you can't find the resolution to a slack issue on the Help Center) consider opening a support request. While it doesn't necessarily de-isolate customers from each other, it sure does give them someone to ask for help from.\n. Ahaha, this is probably caused because the facet defines it's name as \"files.comments\" and the web client sets facets on itself with this[newFacet.name] = newFacet;. That means that what you want is actually web['files.comments'].delete currently.\nI suspect this is just a bug and should be fixed in the future, though.\n\nFor possible fixes, maybe just set the field \"comments\" of the FilesFacet object, probably in it's constructor, to a FilesCommentsFacet object. Same for the usergroups.users facet!\n. > great, indeed that's exactly the point... impressed from your quick root cause findings! :P\nI've gone through the library quite a number of times :P Recognized what the issue was from prior knowledge.\n\nshall I close the issue now?\n\nNah, keep it open. One of the maintainers will see it and fix it (or label it), or someone else will submit a pull request fixing it. After that pull request is accepted, the maintainer should also close this issue.\nI'd go ahead and submit the pull request but I'm busy for a little. If nobody gets around to it in a few hours, I'll probably do it then.\n. This response looks long but it really only takes like two to three minutes to read. Sorry about that.\n\nHow do I find the list of DMs using the RTM client?\n\nThe data store of the RTM client has a field named dms which holds all known DM (see footnote 1) channels by the client.\n``` js\n// side note: currently, a MemoryDataStore is created for the client if none is\n// supplied, so you don't really need to provide one yourself\nvar client = new RtmClient(token);\nclient.start();\nclient.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, function() {\n    console.log(client.dataStore.dms);\n});\n```\n\n\nHow do I list all channel messages?\n\nDepends on what kind of channel you want to list messages from. Here's a small little table of the channel type and the web method you should use for that channel type to get message history:\n| Channel Type | Web Method |\n| --- | --- |\n| Regular | channels.history |\n| Group | groups.history |\n| DM/IM | im.history |\n| Multi-Party DM/IM | mpim.history |\nTo use these, you'll need to use the WebClient. Given your last question was about DMs, I'll show off a small example of the web client myself:\n``` js\nvar web = new WebClient(token);\n// using a filler dm channel id\nweb.im.history('DXXXXXXXX', function(err, result) {\n    // Regular error-handling for web request callbacks\n    if (err)\n        return console.log(err);\n    if (!result.ok)\n        return console.log(result.error);\n    if (result.warning)\n        console.log(result.warning);\nconsole.log(result.messages);\n\n});\n```\nYou also have the choice of promises with the web client if you prefer that fashion:\n``` js\nweb.im.history('DXXXXXXXX')\n    .then(function(result) {\n        if (result.warning)\n            console.log(result.warning);\n    console.log(result.messages);\n})\n.catch(function(err) {\n    // Slack API errors are handled by the client in the case of promises.\n    console.log(err);\n});\n\n```\nHave fun.\n\n[1]: the repository refers to person-to-person messages as DMs while the actual web API that Slack provides uses the term IM. The only time you will (or, better yet, should) see IM in this repository is if it relates to the actual web API, like in the case of web API method names or properties (key names) in responses from the API.\n. Is it possible you're calling getDMByName for people who haven't spoken with the bot before? I believe in that case there is no DM channel yet, and you'd instead need to either send a message to them to create the channel, or use the im.open method, via the WebClient.\nJust pure speculation, though.\n. The version with the IncomingWebhook client hasn't been pushed to npm yet. Web hook support for this package was added 2 days ago, but the package hasn't been pushed since 2 weeks ago.\n. > Sorry if this isn't the place for this as I have a sneaking suspicious it's related to the client and not the sdk.\nYou are indeed correct in your suspicion: this isn't the right place to be reporting this. None the less, it's super cool that you found this bug!\nYou should, however, totally report this to the right people. Those people would be the lovlies who handle Slack's help desk: https://slack.com/help/requests/new\n. I've actually answered this exact question in the past, but my previous answers aren't very great so I'm going to abuse this opportunity and give you a great answer.\nThe answer you're looking for depends on whether or not you're using the RTM client or the web client (they both have separate ways of proxying requests).\nIf you're trying to proxy with the web client then you need to pass a proxy transport to the web client (or RTM client) through the transport option.\nThis SDK does provide such a proxied transport: proxiedRequestTransport in lib/clients/transports/request.js. proxiedRequestTransport is a function that accepts a URL and returns a function that you can pass to the web client (or RTM client) to proxy requests to the slack API through your provided proxy URL.\nPut in easy-to-understand-code code:\n``` js\nvar WebClient = require('@slack/client').WebClient;\nvar proxiedRequestTransport = require('@slack/client/lib/clients/transports/request').proxiedRequestTransport;\nvar client = new WebClient(token, {\n  transport: proxiedRequestTransport('your proxy url')\n});\n```\nIf you're trying to proxy with the RTM client, however, then you have two steps:\n1. Making the RTM websocket go through the proxy.\n2. Making the call the RTM client makes to the web go through the proxy. (see above)\nThe second step is easy and is the same as the above case with the web client: supply the RTM client with a transport option that uses the function returned by proxiedRequestTransport.\nAs for the first step, it's very needlessly complicated (in reference to what it could be). Currently, you need to pass a function that accepts a socket URL and pass that socket URL to the transport exported by lib/clients/transports/ws.js that URL and an options object that contains an option named proxyURL.\n(technically you can also just do the socket transport implementation yourself, but I'm going to ignore that option because it seems silly)\nSo, in whole, this (currently) has to be done like this:\n``` js\nvar RtmClient = require('@slack/client').RtmClient;\nvar proxiedRequestTransport = require('@slack/client/lib/clients/transports/request').proxiedRequestTransport;\nvar wsTransport = require('@slack/client/lib/clients/transports/ws');\nvar client = new RtmClient(token, {\n  // To proxy opening the client.\n  transport: proxiedRequestTransport('your proxy url'),\n  // To proxy RTM messages.\n  socketFn: function(socketURL) {\n    return wsTransport(socketURL, { proxyURL: 'your proxy url' });\n  }\n});\n```\nObviously, this is a pain and could very well change (hopefully for the better) in the future so keep an eye open.\n\nProxying with the clients is really hard, especially importing the proxy objects.\nIn general, what's needed to be done:\n- Export lib/clients/transports/ws and lib/clients/transports/request in index.js (aka what people get when they require('@slack/client.js') so they're easier to access.\n- Add an option that'll help pass a proxy url to the RTM client's _socketFn (be it a proxyURL option in the client or an option for an object that'll be passed to the transport function like it expects).\n  - Maybe likewise in theory with the RTM client for the web client: don't force the user to provide a proxy transport and instead just make the default transport accept a proxy URL/options object. Whichever is chosen, make it consistent with the RTM client.\n. Took me quite a bit of searching to look for the issue, but it lies in the fact that the module request uses, form-data, only recognizes certain stream objects as files when evaluating what is a file and what is a multi-part data parameter:\n\nForm-Data can recognize and fetch all the required information from common types of streams (fs.readStream, http.response and mikeal's request), for some other types of streams you'd need to provide \"file\"-related information manually:\n\nSo the fix would be to supply the extra information that form-data expects (just the file name at minimum) when submitting a buffer.\nThis should be implemented by the SDK in the future, but in the meantime, here's how you'd go about uploading a buffer as a file:\njs\nweb.files.upload(\n  fileName,\n  {\n    file: {\n      value: fileBufferData,\n      options: {\n        filename: fileName,\n        contentType: 'mime-type', // optional, will be guessed by `form-data` module\n        knownLength: fileBufferData.length // optional, will be deduced by `form-data` module\n      }\n    }\n  }\n);\n\nNote: I'm using an undocumented (but 2-year-old) method of forwarding formData options to the form-data module. I chose this method as it is the best choice when it comes to modifying this SDK as the way the request module suggests (using the requestObj.form() method) would require quite a bit of refactoring of how the SDK generates and sends requests.. First off, this repository is for handling the client that uses the Web API, which is produced by some lovely engineers at Slack. We have no control over what is and isn't in the API. Nonetheless, such a method (one that downloads files) isn't exactly possible with the Web API (can't force a client to download something, you can only send data).\nBut, there is a way to do what you're looking for: simply use an http client (such as request) to go to the file's url (which you can get using the files.list method) and save the file's response to disk.\nFurther, there's a special little bit of authentication you need to do in your request to get the file (using it's url_private field), as specified by the file type documentation. Simply, there must be an Authorization header present in the request that's set to Bearer YOUR_TOKEN (which may be the bot's token or a OAuth token).\nHere's an example of what all of that would look like:\n```js\nconst fs = require('fs');\nconst request = require('request');\nconst WebClient = require('@slack/client').WebClient;\nconst web = new WebClient(your token and options);\nweb.files.list({}, function(err, fileListResp) {\n  if (err)\n    return console.log(err);\n// Strategically choose a file to download.\n  let filePrivateUrl = fileListResp.files[Math.floor(\n    Math.random() * fileListResp.files.length)].url_private;\n// If you don't want to write the returned data to a file then just remove the\n  // pipe call and supply request with a callback.\n  request({\n    url: filePrivateUrl,\n    headers: {\n      'Authorization': 'Bearer ' + YOUR_TOKEN // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    }\n  }).pipe(fs.createWriteStream('./thefile'));\n});\n```\nI didn't test the code, it could error. I'm also unaware of any situation in which a file doesn't have a url_private field. You'll have to do your own testing to make sure the above approach is sound (sorry). It should still be a solid basis for what you're attempting to achieve. Good luck!. Thanks for noticing that @eelkeh! I edited my response to help anyone else who looks at it in the future.. npm should be requesting an escaped version of @slack/client (e.g. \"@slack%2Fclient\"), which does return a valid result and your error log does indicate that npm is escaping the name correctly (log message 14) and sending the request to the right url (log message 20).\nFurther, I attempted running npm install @slack/client (I am also on node 7.2.1, and this was after a cache clear via npm cache clean) and it succeeded.\nSo, simply put, this is a you problem. I have absolutely no idea why this would happen outside of your network blocking the request to the registry.. I believe the description given isn't fully accurate: fs.createReadStream(filePath) should indeed be itself, but filePath should instead point to a file rather than a directory.\nThe file name and path are different (or at least can be, and that should be shown off) so the change should definitely not remove the filePath variable.\nJust clarifying.. This is a great thing for us to know, especially if someone asks about it in the future! However, this isn't the place to report this.\nYou should send a help request to Slack themselves about this issue, as we have nothing to do with it.\nNice job finding this, though!. As someone who's been around through all of the JS era (RIP Leah) of this package and a little bit of the CoffeeScript era, I'm going to say Plan B\u00ae is the way to go.\n\nMaybe its the overdosing of babel (presets) and webpack (loaders/plugins) I'm accustomed to, but I very much favor that second option for a few reasons:\n\nIf you only need the RTM package or the web + events packages, you can get just that. No need for the other 3/5ths of the pie taking up storage space in your poor, already-crowded node_modules.\nMost of the code here doesn't really warrant being in the same repository. Sure, the RTM and web clients share the inheritance of a lovely BaseAPIClient class, but there's no reason behind it, especially after you consider both clients only use one method from it (_makeAPICall) and, rather abstractly, one property/option (transport).\n\nI do see one issue, though: splitting up a partially-inactive repository is like chopping up a partially-dying person; it'll just kill it. If you're only planning on working on the datastore implementation (which, from what you said, isn't necessarily the case: performance concerns), then plan B might be more work for both you and users than is warranted.\nStill, in the long run B is the fad to go with, and I hope that it's what happens.\n(side note/plea: please check usage statistics and/or consider the feasibility of migrating to es6. please.)\n\nOther food for thought relating to Plan B\u00ae:\n\nWhat do we call and version it?\nIf we keep the name, what do we do with the versioning?\nIf we change the name, should we reset the version? (yes. the answer is yes.)\nWhat is being split? Obviously the different clients are separated, but where do the ~~shared~~ models and helpers go?\nWhere does documentation live? Per-package or in its own package (for general concepts like choosing packages/clients)?. > one more build change i'm considering and that's authoring in TypeScript\n\nI was reading the other discussion on TS and I just remembered that this issue exists.\nI honestly also agree with making a change like this--in the scope of this issue specifically. If we're planning on transpiling down to ES5 (because of writing in ES6), we may as well throw in TypeScript to help ease development; both add virtually the same build step. Even more, when working on a large number of packages, I feel TypeScript would help with avoiding type issues between the packages.\nThis would also be consistent with the fact that Slack uses TypeScript internally, regardless of the fact that this package isn't (and likely won't be) used for the desktop client.\n\nOne other issue that comes to mind is where the packages'/modules' sources will be. Will each module get its own repository on this account? If so, does that not somewhat undermine the other projects this organization has to show? Or is that not really important? I'm leaning to separate repositories, especially since pinning repositories is a feature that exists, but I feel that having all modules in one repository may have its own other benefits, and I feel it should be thought about.\nAlso, assuming Plan B\u00ae happens, how will initial development work? I believe it's important to have community input and help while working on the overwhelming task that is Plan B\u00ae, so my question is more along the lines of where will the development occur?\nMy best guess and recommendation is to host a repository/repositories on this organization (@slackapi), or wherever the modules will end up living. I don't really see a reason behind repeating the same approach that Leah did when working on this SDK originally in which the repository, while in infancy, was on her account, and was eventually migrated here.. This is definitely not an issue on our end, but rather with npm (ish--it's really likely that it's your end). My guess is that you're having some kind of (company?) proxy issues, i.e. npm is trying to access its registry but can't because it can't authorize to the local proxy. Check your npm-debug.log to see if there's anything fishy-looking.\nUpon a simple google for \"npm 401\" I also felt like this might be a possible solution, though it stems from the same idea of not being able to authorize.\nNevertheless, this issue technically isn't related to this repository/package.\n(also, sorry about the delay in response!). > Ideally, this means both with callbacks and with Promises.\nI don't like this, not one bit. It feels completely redundant to have both. I opt for choosing and sticking with Promises, but that's just a blind choice based on my personal preference. Nonetheless, I don't see a reason to support both.. Ah, I guess it's just me blinding myself. I was (and still am) under the illusion that Promises have been widely well-received and commonplace; I didn't realize that the wider Node/JS community might not really be interested/comfortable. In that case, I say go all out with a duplex asynchronicity implementation (both promises and callbacks) to make happy as many people as possible.\nAs an added benefit, I can see that having both means:\n Attraction to well-rounded Node/JS devs who are comfortable with the latest technology, including promises\n  * i.e. easy to work with in async-await environments\n Attraction to newer JS devs who are just barely grasping the ropes of asynchronicity\n  * And then there's also people who live in a world without the graciousness of promises on purpose (maybe due to compatibility with past versions of node)\nThis is only a good thing, however, if your target audience for the SDK includes not-so-versed/past-dwelling developers.\nAlso, I was a little ambiguous (my fault) in my comment; I've continued to feel that the public interaction from SDK-consumer (a developer) to SlackStore should totally be versatile in order to adapt to all types of developers. Anyone who wants to use the SDK overall should be able to do so with ease, and having both promises and callbacks is a pretty amazing way of making the SDK easy to use for all.\nI was more-so caught up in the implementation details, wherein I felt that it would be weird having a system where the internal back-end for handling data storage has both promises and callbacks. That is, making available to those who implement storage back-ends, i.e. Redis or in-memory or file system or SQL, both implementations of asynchronicity would be a weird choice. A bit of a niche complaint, though. I suppose it's better to support both for internal actions too simply for widening the range of support for the SDK.\nAll in all, as long as the details of implementation are figured out, I'm happy. Regardless of what they are, figuring out the details paves the way for actually implementing those details, leading to an amazing, new SDK \u2728\ud83d\ude0e. Can't wait to see what's in store \ud83d\udc4d.. If full: 'true' is passed then the error is avoided.\nYour request is sent as mutli-part data rather than URL-encoded data (explained below), hence the option has to be encodable, thus it has to be a string or Buffer.\n\nThe reason any of this is happening is because of this one line:\nhttps://github.com/slackapi/node-slack-sdk/blob/67c154888398fe0cb8bf9fcca418372564742667/lib/clients/transports/request.js#L32\nThat one line assumes that the file key of any options sent through the client will refer to file contents, rather than a file ID. Because of this, it loads all the API arguments to be sent as a multi-part request rather than just regular URL-encoded form data.\nThis is problematic because file more often refers to a file ID rather than file contents (the only case of which that I know of is files.upload). Further, any file-related API request currently made with the SDK is essentially being unnecessarily inflated by being transmitted as multi-part form data rather than regular URL-encoded form data, which is a waste of bandwidth and processing in my eyes.\nIf I simply make that one line above evaluate to false for the API call in question, the call succeeds in being sent. Thus, the problem lies in the logic of the request transport's getRequsetTransportArgs function.\n\ntl;dr: it should be brought to the attention of the maintainers that the request transport's getRequestTransportArgs function must be changed so only file contents are sent as mutli-part form data as many API methods that use a file key to identify a file ID are having their requests being needlessly inflated (multi-part data is longer than URL-encoded data) and constrained (the form-data module is more harsh about what can be passed versus URL-encoded data).. Readded the removed events, therefore averting breaking anything. \ud83d\udc4f\u2728. ## Why the Error is Thrown\nThis entire issue stems from the use of the pkginfo module by this SDK. The SDK currently uses pkginfo to get some information from this package\u2019s package.json file, namely the version and package name. This information is used as part of the User-Agent header when accessing the Slack API.\nIn this issue, the SDK is being imported in a browser environment. pkginfo works by using the native path module to locate the parent module\u2019s (the SDK\u2019s) package.json, then reads it using require as an attempt to be bundler-friendly. pkginfo attempts to locate the directory of the SDK by using the filename and id fields of the module object for the SDK (like module.exports).\nThe problem arises when the bundler used by the user does not provide these fields on the module object. This means that undefined is ultimately passed to path.dirname, which ends up throwing.\n\nHow to Fix It\nAs a user of the SDK, there\u2019s really no way to fix this as of right now, other than finding a different bundler or to configuring yours current one differently.\nAs for the maintainers and contributors for this repository, something can be done: drop the use of pkginfo in favor of a build task that generates a file containing the data used in the User-Agent header. This is a viable solution because the SDK is already planned for TypeScript migration, and since that requires the library to be \u201cbuilt\u201d before publishing, adding an extra build step is very appropriate\u2014though a workaround should be found for testing (implementing an option?).\nAlternatively, an options object can be passed as the second argument to pkginfo with the dir option set to the directory of the file using pkginfo or the root directory of the SDK package (either works). I\u2019d advise against this because this can really only be done using some variation of __dirname, which can cause the same problem showcased in this issue.\nEdit: as another solution, I don\u2019t see why we can\u2019t just import the package.json directly from its relative path to whatever file needs that info. After all, pkginfo does just that in a more convoluted (with the goal of convenience, mind you) fashion currently.. I\u2019d opt for simply requiring package.json:\ntypescript\nconst packageMetadata: IPackageMetadata = require(\u2018../package.json\u2019);\nimport syntax should be used when importing ECMAScript modules; JSON files are not ES modules; therefore, JSON files shouldn\u2019t be imported using import syntax.\nThis also has the added benefit of making it easy for bundler a to identify exactly which package.json file they should be bundling, avoiding bloat and reducing the (likely) possibility that a bundler fails to recognize the package metadata should be included in the bundle.\nNot really sure if bundlers still support require, by my intuition is that they do. Nonetheless, I haven\u2019t checked, and thus don\u2019t know.\ntl;dr: just require it.. So, this error stems due to the arguments of the WebClient.files.delete function. To clarify, WebClient.files.delete takes only one argument, and that argument is the file ID--not an object with a file field.\nAs a rule of thumb, with this SDK, all required arguments tend to be direct arguments of WebClient methods, and all optional arguments are in an opts object. See the note of this example for more clarification.\nSince the file ID is a required argument of the files.delete method, the ID is an argument of the method, not an option.\ntl;dr: Call web.files.delete with the file ID, not an object.\n// ...\nweb.files.delete('F4545RVL0')\n    .then(/* ... */)\n    .catch(/* ... */);. As a note, this repository focuses around the Node.js package for the Slack API. For future questions about the API (rather than this package), I'd recommend looking at the Support article in the official API documentation, or asking in the Bot Developers Hangout, mentioned at the bottom of this repository's README. \ud83d\ude0a\n\nThe ID of the conversation is literally just that: the conversation's ID; it identifies the conversation. How you get that ID is completely up to you.\nIf you're trying to get the history of a conversation in response to an event, it's likely that event will have an ID linked to that event; i.e. the message.channels event has a channel ID as one of the event arguments.\nIf you're trying to get the conversation ID given some other data, then a method like channels.list or im.list will get you a list of conversations, including conversation IDs, along with other metadata about those conversations that you can use to narrow your search down to one ID.\nLikewise, the same applies to users and all other IDs. The IDs are ultimately passed to you in some way from the API, either via event arguments, or by inquiring yourself with methods.. This has technically already been reported and already been fixed. I can confirm the latest version of the code currently in the repository (not on npm) works using the configuration mentioned in this issue as I was able to get the demo code to work using node v9.1.0 on macOS 10.13.3, as per the environment in this issue.\nTo get the code in the docs to work, either wait until the next release, or (for now) supply an empty object as the second argument to the IncomingWebhook constructor:\njs\nconst web hook = new IncomingWebhook(url, {}); // Verbose second argument needed until >4.0.0. ### MessageAttachment Sample\nTo foster discussion, here's a sample typing for MessageAttachment:\n\n`MessageAttachment` sample\n\n\n```ts\nexport type MessageAttachment = {\n  color?: string;\n  pretext?: string;\n  actions?: MessageAttachmentAction[]; // actions are complicated, so they get their own type\n} & (\n  // message text: at least one of `fallback` or `text`\n  {\n    fallback: string;\n    text?: string;\n  } | {\n    text: string;\n    fallback?: string;\n  }\n) & (\n  // author properties: `author_link` and `author_icon` depend on `author_name`\n  {\n    author_name: string;\n    author_link?: string;\n    author_icon?: string;\n  } | {\n    author_name?: string;\n    author_link?: never;\n    author_icon?: never;\n  }\n) & (\n  // title properties: `title_link` depends on `title`\n  {\n    title: string;\n    title_link?: string;\n  } | {\n    title?: string;\n    title_link?: never;\n  }\n) & {\n  // fields: at least one of `title` or `value`\n  fields?: {\n    short?: boolean;\n  } & (\n    {\n      title: string;\n      value?: string;\n    } | {\n      value: string;\n      title?: string;\n    }\n  )[];\n} & (\n  // thumbnail/image: `image_url` takes precedence over `thumb_url`\n  {\n    image_url?: string;\n    thumb_url?: never;\n  } | {\n    thumb_url?: string;\n    image_url?: never;\n  }\n) & (\n  // footer: `footer_icon` depends on `footer`\n  {\n    ts?: string | number;\n  } & (\n    {\n      footer: string;\n      footer_icon?: string;\n    } | {\n      footer?: string;\n      footer_icon?: never;\n    }\n  )\n);\n```\n\n\n\n\nMind you, this code doesn't really take into account the suggestions mentioned in the last comment.\nFeel free to use this code as a starting point to explain (with specific examples) possible issues, solutions, and insights.\n\nOverload Modification\nAlso, I'd recommend altering the overload signature previously proposed to be a union (|) rather than an intersection (&):\nts\nexport default interface Method<MethodArguments extends WebAPICallOptions> {\n    <MethodArgsOverload = never>(options?: MethodArguments | MethodArgsOverload): Promise<WebAPICallResult>;\n    <MethodArgsOverload = never>(options: MethodArguments | MethodArgsOverload, callback: WebAPIResultCallback): void;\n}\nThis is because it actually fulfills the idea that users can overload types by specifying their own type. The definition in the original issue message wouldn't work when a user to specified { key: type; } as the overload would be intersected (thus the provided arguments had to match both the original args [bad] and the overload) rather than one, the other, or both (the intended behavior).\nSpecifying any as the overload still works, but specific overloads also work. For example:\nts\nconst attachment: Overload<MessageAttachment, { image_url: string; thumb_url: string; }> = {\n    text: 'hi',\n    image_url: 'https://cats.images/random',\n    thumb_url: 'https://dogs.images/random'\n};\n...can be written to assert that certain arguments are correct, while still providing the ability to check other arguments, i.e.:\nts\nconst attachment: Overload<MessageAttachment, { image_url: string; thumb_url: string; }> = {\n    text: 'hi',\n    image_url: 'https://cats.images/random',\n    thumb_url: 'https://dogs.images/random',\n    footer_icon: 'https://animals.images/random' // causes error !!!\n};\n(Overload<A, B> is just A | B)\n\nOpenAPI Compatibility\nJust from taking a quick look at the linked OpenAPI spec, it seems there is a supported schema field which can define the (modified JSON) Schema of an object. Since this schema field is based off the JSON schema spec, I feel it's likely possible to describe many of these combinations via this field.\nThis does, however, make the process of writing the OpenAPI Slack spec steeply more difficult, and would be a lot to be expected of.. ### Generics\nI actually originally wanted a way to express these constraints as generics originally (possibly different than what @aoberoi meant by \"generics\") but I couldn't remember a way to use the keys of a generic type.\nWell, I just remembered how (there's this lovely operator called keyof), so I quickly got to work on making a few generics to convey some of the more common constraints I used in my MessageAttachment example:\n``ts\n// Makes all keys of T of typenever`\ntype Not = { [K in keyof T]: never; };\n// Requires matching exactly one of A or B\ntype OneOf = (A & Partial>) | (B & Partial>);\n// Requires matching at most one of A or B\ntype MaxOneOf = Partial>;\n// Requires matching at least one of A or B\ntype MinOneOf = (A & Partial) | (B & Partial);\n// Requires all properties of Required to be present before any properties of Dependent can be present.\ntype Requires = (Required & Partial) | Partial>;\n```\nHere's a rewrite of my previous MessageAttachment sample using these generic types, which heavily shows off their (wonderful \u2728) powers:\nts\nexport type MessageAttachment = {\n  color?: string;\n  pretext?: string;\n  actions?: MessageAttachmentAction[];\n  fields?: (\n    { short?: boolean; } &\n      MinOneOf<{ title: string; }, { value: string; }>\n  )[];\n  ts?: string | number;\n} &\n  MinOneOf<{ fallback: string; }, { text: string; }> &\n  Requires<{ author_name: string; }, { author_link: string; author_icon: string; }> &\n  Requires<{ title: string; }, { title_link: string; }> &\n  MaxOneOf<{ image_url: string; }, { thumb_url: string; }> &\n  Requires<{ footer: string; }, { footer_icon: string; }>;\n\nfields is defined here for the sake of example; in actuality, it should be made its own type in order to appear more simply in intellisense.\n\nI think these generics (which I wrote yesterday, funny enough) should help the point of readability, so long as the names of these generics make sense. Names are hard; feel free to change the ones I chose if there's something you feel makes more sense (especially Requires, which I feel is misleading).\nIntellisense\nI'm at a bit of a crossroads on this one.\nWhen hovering over the MessageAttachment type, intellisence will show whatever that attachment's expanded source is. Oddly, the generics I defined above aren't preserved, but Partial is. This means that the definition given to the user when they hover over MessageAttachment is akin to the source of a compiled executable: gibberish that shouldn't be read by humans.\nOn the other hand, the auto-complete intellisense essentially shows the real type of all arguments:\n\nI feel like this outcome would be my choice as a user as I'd like to be able to see all arguments and their types here without having to check the API docs.\n\nSide note: even if color is defined as 'x' | 'y' | 'z' | string (as it currently is in the repo), intellisense will always simplify this to just string, including auto-complete and hovering over the type. This is why I dropped the verbose options of color in my definitions thus far.\nI can see having those options defined being useful in one case: when a user reads the source of the type. Thus, I feel the best place for these options are in comments, somewhere next to the argument--especially a doc-comment, if those ever come along.\n\n\nI'd also like to draw some attention to the TypeScript Playground. This tool is super useful for testing out these types and making sure they do/don't throw errors. Further, this playground is built on Monaco Editor, the web-based editor that powers VS Code (complete with TypeScript intellisense already set up), which is where I expect most (obviously not all) TypeScript development to happen.. I have a few spare hours that I could spend twiddling my thumbs, so I figure I can do all of these instead. \ud83d\udc4d. tl;dr: because implementation logistics and developer experience (DX) \ud83d\udc4f \ud83d\udc4d \u2728.\n\nIt's important to remember that WebClientBinaryData is not only there to generate a name, but also store the name and the file data--it's a container that can be recognized.\nI made a personal call on the random name generation because:\n The multipart/form-data file name will probably never matter outside of file uploads (be it files.upload or a new method); thus, a user shouldn't be forced to supply a file name in these (notably less common) cases.\n When the filename is significant, the user will either be using a file stream from fs where they expect the filename to transfer (which it does), or they're supplying data from a different stream where one wouldn't expect this SDK to magically guess the name, hence a developer should be willing to supply a name (via filename or by using the WebClientBinaryData container).\n\nBut why make a whole new type?\n\nSwapping out the this.logger.warn call with some code to generate a name field on the accompanying Buffer isn't the only work to be done in this change. You also need to:\n Recognize binary fields once to set containsBinaryData to true\n Recognize them once more when adding them to the form so proper options can be forwarded to form.append.\nThe container approach makes changing the implementation somewhat trivial, as seen in this PR: just wrap any binary parameters in the container, then only supply options to form.append for anything that's in the container.\n\nSo why can't we just use some kind of special object shape?\n\nA practical solution would be to have the user just supply an object with name and data fields, i.e.:\njs\nweb.files.upload({\n    file: {\n        data: someBuffer,\n        name: 'magical kitten gifs'\n    }\n});\nIn contrast, I find the above breaks some kind of unspoken rule about the API method bindings, wherein we've added our own unique structure to the method, which has some consequences:\nAn application that accepts key-value pairs based on user data (i.e. { [username]: someValue }) then a malicious attacker could force API requests to be sent as multipart/form-data simply by targeting the right key (i.e. with a username of data) for any method (remember, this solution is generic!). While this would probably never lead to any security holes, it might cause false positives and is a waste of resources. \nIf a developer is reading the source of an application that uses this SDK, but making their app/bot in anything but this library, they can't really transfer ideas from the application they're attempting to learn from. I can say I've personally learned about numerous concepts and APIs just by reading open source code, be it in a different programming language or with a different library than what I might use. Making this SDK's structure differ from the official API's parameter structure breaks this ability to learn about the Slack API from consumers' apps.\n\nAn example situation of the above\n\nConsider this situation: you want to write a Slack application in Lua, but you know nothing about Slack's API. You get some of the gist from the official API documentation, but you really want to see some code to solidify the idea.\n\nSo you search on GitHub for some other Slack apps. You come across [GitHub's slack integration](https://github.com/integrations/slack). You know some JS, so you're able to read the source and transfer the ideas.\n\nAt some point, you want to use the `files.upload` method in your Lua app. You see this in the (theoretically v4-based) code:\n\n```js\nweb.files.upload({\n    file: {\n        data: someBuffer,\n        name: 'magical kitten gifs'\n    }\n});\n```\n\nSo you believe that the Slack API accepts a `file` **object** with two fields. Thus, you write for your app:\n\n```lua\nweb.files.upload({\n    file = {\n        data = someDataObject,\n        name = 'magical kitten gifs'\n    }\n})\n```\n\nAlas, you run into an API error.\n\n---\n\n\n\nThe WebClientBinaryData type solves this issue by signalling to users that binary fields aren't handled by Slack's API, but rather an implementation detail of whatever library is used to communicate with the API, as other object-like fields \nThis also somewhat carries over in code readability; it's easier to identify the data source of a binary field at a quick glance if the data field is always a single object (Stream/Buffer/WebClientBinaryData), not sometimes a Stream/Buffer, sometimes an object shape.\nI'll agree, functionality-wise, the WebClientBinaryData type is shallow and at first glance seems like an odd choice of making a single function into an entire class; however, the class also exists to satisfy much stronger and subliminal psychological and logistical constraints as I've shown above.\n\nSide note: one more possible \"solution\"\nThere is one solution that I haven't mentioned above: exporting a function that somehow attaches the name field to an input data source (a Stream or Buffer), i.e.:\n```js\nimport { attachNameMetadata } from '@slack/client';\nweb.files.upload({\n    file: attachNameMetadata(bufferOrStream, \"super top-secret kitten gif\")\n});\n```\nThis function is limited to not being able to return an object because either it returns an object shape, which I've debunked above, or it returns a custom type, which is the solution I've already suggested above, without the need to call a function.\nThe other option is for the function to set the name field of the input data source and then returning the source, but behavior like this (mutating function parameters) is generally considered bad, and is unreliable.\nAlso, it's actually surprisingly hard to name this function in a way that both conveys its functionality and also keeps developers at ease knowing it doesn't do anything bad (i.e. setFileName is a bad name because it implies the bad behavior of setting the name field on the input data source).\nFor those reasons, I eliminated this solution early on.\n\nThese reasons are very niche and opinionated, and if you're not sold, I'm more than happy with implementing any of the other solutions I mentioned. I found that the runtime cost of creating one object in the uncommon case of binary data was worth improving the developer experience for consumers and helping consumers write intuitive code for others, all at what feels like little to no cost.. @aoberoi That PR has my approval \ud83d\udc4d\n519 turns my \"it works\" PR into a \"it just works\" solution, which I like. I was definitely too caught up in the idea of giving the consumer an option to specify the multipart/form-data filename to consider a solution that doesn't have that kind of unneeded/contrived configurability.\nI also commend you on the extra details in the comments and test names, some of that flew right over my head \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f . I was able to reproduce this issue, except I could only do so using an old version of @types/node--obviously, any version in which util.callbackify doesn't exist.\nI figured out that the version of @types/node that util.callbackify was added was 8.0.33. Thus, the compatible range of versions of @types/node is >=8.0.33.\nIn this specific case, I feel that the solution is probably to just run npm install --save-dev @types/node@^8.0.0 (modifying for your specific environment, i.e. yarn or --save if needed).\n\nWhile testing, I also found that our target version of @types/got is incompatible with  @types/node@<=8.0.15:\nnode_modules/@types/got/index.d.ts(34,19): error TS2694: Namespace '\"http\"' has no exported member 'IncomingHttpHeaders'.. I can definitely agree with the statement about the required @types/node: it\u2019s confusing to have these mismatched requirement versions.\nIn theory, as long as you compile your TypeScript sources ahead of time and run the generated JS output (which, on GCF and Lamda you should do as compilation on the server would be a waste of resources) then you won\u2019t run into this type error, and your code should run fine (again, as you said, watch out for unimplemented APIs). Versions of node that don\u2019t have util.callbackify are [safely] polyfilled as needed for this package, so 6 and 7 are good to go runtime-wise.\nAlas, I have no other solution for you except to use these newer node typings in the meantime while this issue is sorted out.\n\nAs for resolving this issue with the package, it\u2019s easy enough to fix the original problem by giving the callbackify export in util.ts an explicit type so the generated type definitions (.d.ts files) don\u2019t try to use a reference to the @types/node package:\n```ts\ninterface CallbackifyType {\n  // ...\n}\nexport const callbackify: CallbackifyType = // ...\n```\nThis, however, doesn\u2019t resolve the issue I was getting with using the @types/got package with older node typings\u2014a problem that I can\u2019t think of a great solution for.. ### For the Issue Creator:\nAs of current, there is support for compiling dependencies (node_modules) using Babel in react-scripts@2, the module used by create-react-app for building apps. Check this issue for instructions on upgrading your project to use these new features.\n\n~~It should be noted that react-scripts@2 is technically experimental; but, for what it's worth, it seems that v2 of react-scripts is decently stable, and you probably won't run into any huge, breaking issues.~~\nSince writing this, v2 of react-scripts has released. This version of create-react-app should be safe to use.\n\n\nFor Maintainers:\nHere's the relevant part of the link from the screenshot/build log.\nBasically, create-react-app's v1 production minifier (more on this later, but essentially v1 is currently the default)  is purposefully set up to not run Babel on an application's dependencies. The line referenced by this issue's build log uses a template literal (`...`), which is an ES6 feature, which is thus \"unminfiable\" by the ES5 minifier.\nThe Fix\nThe build process should be tweaked to generate fully ES5-compatible code. From what I can tell, this is a guaranteed step in resolving this issue.\n\nWhat about supporting the \"module\" key in package.json?\n\nI'm not sure that this wouldn't work, but from checking out a different package's compiled ES module code (referenced by the \"module\" package key) seemed like it was all ES5 code with one export statement at the end, making me think that even this entry point requires code to be ES5-compatible.\nHOWEVER, I'd consider this solution to be a step in the wrong direction. This forces us to compile releases to ES5, giving up features that're supported by our minimum target version of Node. As seen by the first part of this comment, users running into this issue already have a valid and relatively non-dangerous workaround, plus this specific issue will essentially resolve itself when react-scripts eventually updates.\nReally, this issue will solve itself in time, and thus should be closed.\nComplete Reproduction Steps\nbash\n$ npx create-react-app temp_project_name\n$ cd temp_project_name\n$ npm i -S @slack/client\nThen, while the package is installing, go to src/index.js and add these two lines (preferably just after the default list of imports):\n```js\nimport { WebClient } from '@slack/client';\nconst web = new WebClient();\n```\nAnd finally, build:\nbash\n$ npm run build. I'm 100% positive it's the template literal, simply because the issue was so widespread and was highly in demand for react-scripts@2. Just to be certain, I did test my previous repro steps using react-scripts@2 and the module built just fine, no errors. It could still be either, but the solution largely remains the same.\nAs for the workaround, I too considered this, and initially had that written in my initial comment, but my personal vote is against transpiling to pure ES5:\nI feel like the majority of users of this package are running on Node, and even of those that are using webpack and Babel to transpile their web apps that use this package, only a portion of those are using create-react-app with completely default settings. From there, there's two solutions these users have to be able to still use this package in its current state:\n\nEject (open up the project to manual configuration). It's understandable why some would want to avoid this, though it's also very common, and not necessarily out of the picture--though I do find it less optimal than...\nUpgrading to the react-scripts@2 alpha, which is currently without any known bugs or prominent issues (according to the issue for it)--and will eventually be the default.\n\nMy question is: can we think of an audience that is using create-react-app and refuses to either eject or upgrade to the seemingly-stable react-scripts@2? And further, are they large enough to justify requiring everyone else to download a second build of the package?\nAgain, I'd like to emphasize that this issue can very easily be mitigated by users that are affected by this by just not using react-scripts@1, something that I feel is probably very common.\n\nI will give in some and say that my opinion isn't set in stone. For one, my biggest (and maybe even only) concern here is just package size, and like @aoberoi said, this might just be negligible. Further, the audience I'm talking about might just be monuments bigger than I imagine, in which case my opinion definitely changes to support them.\nIf we do go down this path, then I'm also against compiling to two targets. Here's the situation we end up with:\n\nOne version (the \"main\" field in package.json) will have to be CommonJS modules, and completely ES5-compatible code\nThe other version (\"module\" field in package.json) will be exactly the same, but the module syntax will change from CommonJS's require and module.exports to ES Modules' import and export. Code is still completely ES5-compatible.\n\nIn this case, both compiled versions are, more or less, exactly the same, save for a few lines at the start/end. Most of the code is duplicated, and I don't know what the benefit is in this case, as the transformation is almost 1:1 (each import is a require, each export is an exports), plus the bundler is likely to transform it all back to a CommonJS-like syntax when compiling for browsers.\nI don't know if using CommonJS modules affects common bundle strategies like tree shaking, which I know is supported using ES Modules, but I'm unsure of the support for CommonJS modules, which is definitely a fair concern to have.\nReally, it'd probably just be better to make sure the current tsconfig.json compiles to ES5-compatible code. I still dislike this idea, because we're giving up syntax supported by what I presume to be the dominating (not just majority, dominating) group of users that can support this ES6+ syntax--even on Node; though it's still at essentially a negligible cost.. As a quick update, this issue's surface cause has been resolved since create-react-app recently hit 2.0.0. This fixes this specific case this issue presents, as v2 of react-scripts is now used in React projects created using create-react-app.\nThe deeper issue is still lingering, but the need to fix it has greatly diminished since it now seems to be a far more trivial issue.\nSome \"older\" projects (this essentially just released) might still run into this issue, but in the release article, there's a section dedicated to updating to v2, helping mitigate this.. Everything looks well and good to me. \ud83d\udc4d\u2728 The only thoughts I have are completely related to #496.. This inspires the question: what's the most common client-side use cases in the first place? Would a separation of this package into smaller chunks aid this issue? (which I talked a bit about in #410). One solution might be to just set @types/node as a peerDependency set to >=8.0.33 or so.\n\nThose who don't use TypeScript don't actually have to install the package (though they do have an annoying warning saying its not installed)\nThose who do use TypeScript are ensured that a compatible version is used. Yeah \ud83d\ude15... this might just be a tooling issue that has no solution, as it currently stands. I feel like there'd need to be some kind of typeDependencies magic going on with TypeScript/npm for this issue to be resolved.\n\nAccording to this SO answer, the way the dependencies are as of right now are correct.\nMaybe the current situation can be aided by changing the supported @types/node version to be a minimum compatibility (>=x.x.x) range, rather than an equal compatibility (^x.x.x) range?. You can retrieve the result of rtm.start (or rtm.connect) from the authenticated event (source)\n```ts\nconst rtm = new RTMClient(token);\nrtm.once('authenticated', result => {\n  // do stuff with result of rtm.start method\n});\nrtm.start();\n```\n\nBeware that authenticated will be called every time the client reconnects, hence the use of once.\n\nIt does make sense that start could return a promise that resolves on authenticated and rejects on error. This request is (technically) covered in an ancient issue, #198--which is still open.. From the article on dialogs:\n\nTriggers expire 3 seconds after being issued to your app.\n\nFrom your logs, it's apparent that it's taking over 3 seconds to respond to slack.\n4:57:12.443 PM | info | helloWorld | body: { ok: false, error: 'trigger_expired' } \n4:57:04.163 PM | outlined_flag | helloWorld | Function execution took 254 ms, finished with status code: 200\nBoth log entries have a timestamp. That first one (the info line), when you get a response from Slack, shows a timestamp 8 seconds after your function ends, which is shown in the second line.\nMoving forward, I believe this StackOverflow answer might shed some light as to what's occurring here.\nThat \"254 ms\" is not entirely false, but it's misleading. That measurement is done when your function returns (and resolves), rather than when it completes execution. In your function, you return a Promise, but that Promise resolves pretty much immediately.\nThe line before your return your 200 response, you make a request using response-promise, but you never wait for it to resolve. Here's a more basic example of what's happening:\n```js\nfunction washClothes() {\n  return new Promise((resolve, reject) => {\n    // put clothes in machine\n    // add bleach/detergent\n    // etc.\n  });\n}\nfunction doChores() {\n  return new Promise((resolve, reject) => {\n    // !! this call to washClothes starts an asynchronous process,\n    // !! but you never wait for it to complete!\n    washClothes();\n    // !! thus, the function continues onward before you finish (or even start!)\n    // !! washing your clothes.\nreturn response.to(mom).message(\"finished chores!\");\n// you just told mom you've finished something that you haven't even started!\n\n});\n}\n```\nThis isn't how Promises work--or at least, not how they should work. An amazing overview to using promises is explained in this Google Developers article on them.\nTo fix this, you should wait for the intermediate promise, then work off its result:\njs\nfunction doChores() {\n  // !! ta-da! we use the promise that `washClothes` returns, and wait for it to finish!\n  return washClothes()\n    .then(() => {\n      // now the clothes (and other chores) are done!\n      return response.to(mom).message(\"finished chores!\");\n    })\n}. This is more of a question about the Slack API than it is about the node SDK (for the API). In the future, I'd recommend looking into the wonderful API community and official Developer Support with questions about the API.\n\nI'm guessing this type of functionality is unsupported because Slack doesn't want to be responsible for securely transferring passwords to API consumers/users. Maybe look for a different way of implementing your app.\nI don't know what your use case is, but hopefully this recommendation might shed some light: If you're trying to auth a Slack user and connect them to a user on your service, I'd recommend looking into Sign in with Slack. It's essentially an easy way to link Slack users with users of your service.. I feel like it might just make  the most sense to simply expose a field/property on WebClient called customHeaders or similar.. Good catch! \ud83d\udc4d\nIt looks like this sample was updated a couple months back when the v4 rewrite of the docs were made, but only the event signature was changed (the body of the event stayed the same). Therein, the name of the event's parameter changed, but the name the rest of the event's code referenced was still the old name.\nI've submitted a PR (#665) to fix this so others don't run into this issue. Thanks!. To get rid of the presence of \"undefined\" in the log message, it's trivial to change the method factory to only append loggerName when it's not undefined. That doesn't really hit the core issue, though.\nIt seems like implementing a plugin on the logger is the right path, but there's more to it. Instead of mutating the global logger, the loggers created by the getLogger export should be mutated:\n```ts\ninterface LoggerMethod {\n    (...msg: any[]): void;\n}\ninterface LoggerMethodFactory {\n   (methodName: LogLevel, logLevel: 0 | 1 | 2 | 3 | 4 | 5, loggerName: string): LoggerMethod;\n}\n// could do with some better naming, the idea is this function generates LoggerMethodFactorys\nfunction loggerMethodFactoryFactory(name: string, originalFactory: LoggerMethodFactory): LoggerMethodFactory {\n    // return a LoggerMethodFactory\n    return (methodName: LogLevel, logLevel: 0 | 1 | 2 | 3 | 4 | 5, loggerName: string) => {\n        // chain with the original factory\n        const logMessage = originalFactory(methodName, logLevel, loggerName);\n    // return a LoggerMethod\n    return (...msg: any[]) => {\n        const segments = [`[${methodName.toUpperCase()}]`, loggerName].concat(msg);\n        // TODO: something with `name`?\n\n        // daisy chain with the original method factory\n        logMessage.apply(undefined, segments);\n    };\n};\n\n}\n/*\n * INTERNAL method for getting or creating a named Logger\n /\nexport function getLogger(name: string): Logger {\n    // get a logger id\n   const instanceId = instanceCount;\n   instanceCount += 1;\n// get the logger instance and patch its methodFactory\nconst logger = log.getLogger(name + instanceId);\nlogger.methodFactory = logMethodFatoryFactory(name, logger.methodFactory);\n\nreturn logger;\n\n}\n```\nThis makes it so no globals are mutated by @slack/client, leaving users / other libraries unaffected by the SDK's changes.\nThis also opens up \"implement[ing] logger name prefixing\", but I couldn't quite figure out what that meant since the logger's name is already included.. The output suggests that the SDK is receiving a response from the API that looks a little like:\nHTTP/1.1 200 OK\n{\n    \"ok\": false,\n    \"error\": \"ratelimited\"\n}\nWhereas the Web API client is expecting that rate limited responses look more like what the docs describe, e.g.:\nHTTP/1.1 429 Too Many Requests\nRetry-After: 30\nI went and actually tested this, and I did notice that the ok: false payload was being delivered with a 200 OK response. Further, this 200 OK response didn't have a Retry-After header.\n\nI'm not really sure if this SDK should be supporting this behavior because it's completely undocumented (as far as I could research), making it feel more like a bug with the platform API.. My two cents: keep this not only enabled, but ensure it keeps working (i.e. through a test).\nMore than anything, I see the problem not as an undocumented feature, but rather as an undocumented feature. How to combat it? Document it!\n```diff\nCustom agent for proxy support\n...\n\n\n\n\ud83d\udd75\ufe0f\u200d\u2640\ufe0f If no agent is provided, a proxy may be established using the\n\n\n\n\nhttp_proxy and https_proxy environment variables. Supply agent: false\n\n\n\n\nto disable this behavior.\n\n\n\n\n.....\n```\n\n\n\nAdd in a reference to GNU's specification (maybe a bit too terse to use as reference in docs) or axios' specification (i.e. the comments in this issue's initial post), and it's documented. I can see the visibility of a note like this being up for debate, but I still feel like documentation is the key issue here.\nMy justification lies in two observations:\nFirst \u261d\ufe0f, these variables are opt-in. Setting these environment variables is akin to enabling a linter rule: you get what you ask for (at least, that's the hope when setting it). \n\n... a user who doesn't expect these variables to interfere with the operation of this package ...\n\nThis feels like a direct consequence of the lack of documentation (not the feature itself!). I can see why someone might be curious as to whether http(s)_proxy does work with this package, but setting it and assuming it won't affect your WebClient calls is where I'm lost. Why set it if you don't want it?\nSecond \u270c\ufe0f, it'd be odd to have to opt in to \"automatic\" detection (e.g. via proxy: true as a WebClient option) of these environment variables, which are mentally already opt-in when you set them--or, worse, have to migrate from a working app to having to parse process.env.https_proxy using url.parse, and supplying it to https-proxy-agent (after adding that package as a dependency on top of all this).\n\nSpecial case: RTMClient\nI feel like the real case that's being discussed here has to do with RTMClient, yet it's not mentioned in this issue so far. \ud83d\udc40\nIt more logically follows that a developer might not expect the RTMClient to be affected by these environment variables. The rationale is that the RTMClient works primarily off a WebSocket connection (wss://...), and it's not immediately obvious that an https://... request is made.\nI feel like the current behavior is correct: the internal call to the Web API should continue to detect the proxy from the environment, as that is what the variable is meant to control (re: opt-in). As it is now, ~~passing agent: false to either WebClient or RTMClient should disable this automatic detection~~ in case you specifically want to opt out (specifically) @slack/client instances after opting in to this behavior.\nAgain, one more time: I feel like the real issue resolves to awareness on this one. I'm curious as to thoughts on how visibility in the docs could affect this issue.\n\nObservation: this issue's title (and, inherently, topic) is vulnerable to self-selection bias \ud83d\udcc9.\n\n\n>[Example:] Take [for instance] a poll which measures level of confidence in parenting among university graduates. **Those who are proud of their parenting are more likely to want to talk about it, and therefore more likely to fill in the survey.**\n>\n> -- https://www.statisticshowto.datasciencecentral.com/self-selection-bias/\n\nI would expect this issue to only be seen/responded to mostly by people who have had issues with automatic proxy detection, and thus favor \"disabl[ing] automatic proxy detection in axios\". Those who are dependent the detection on are unlikely to go out of their way to survey this repo's issues, thus unlikely to find issues like this one. Sounds like an echo chamber \ud83d\ude05.\n\nThe body of this issue does a very good job at being impartial and objective, but I feel like the nature of this discussion alone is bound to end up biased in its responses.\n\n\n. Ah, you'd be correct! It's the axios option proxy: false (rather than what I incorrectly believed, agent) that disables automatic proxy detection, which WebClient doesn't forward from its opts.\nI feel like it'd be justified for WebClient to set proxy: false when the agent option supplied to WebClient is false, yes? Likewise, RTMClient should accept & handle false as a valid value for agent only for passing to WebClient (RTMClient#agentConfig would just be undefined if its agent option is false). I'd be happy to open a PR for a change as simple as this \ud83d\ude0a.\nAs for current workarounds, there's nothing I know of that you can do with @slack/client to avoid this bug \ud83d\ude41. Your process of manually upgrading the axios package used by @slack/client to the latest beta so it can identify your no_proxy env var is probably your best option currently.. I love this idea! I've thought it over a couple times in the past (see #330 and #410). In my time thinking, here's some possibly useful conclusions I've drawn:\n\nMany strategies and notes for maintaining a monorepo should be taken/inspired from popular projects that are monorepos, such as babel and React\nBabel has a good read on why it's structured as a monorepo. This SDK's case of juggling so many packages harmonizes perfectly with others' reasons for being monorepos.\n\nWorking with lerna\nFirst, a practical description, because it took me (personally) a longtime to grasp what it actually does. Lerna essentially boils down to a cli app that helps developers do a couple of tasks across a bunch of packages in a single monorepo:\n\nRelease packages to npm\nLink internal packages (within the monorepo) that depend on each other\ne.g. @slack/client depends on @slack/web-api; lerna manages making the correct symlinks when developing\nRunning npm scripts in each package (e.g. lint or doc)\nOther tasks like generating changelogs\n\nWhat lerna does not do is provide or facilitate similar package structures. This means lerna doesn't help reduce the TypeScript boilerplate required across the packages in this monorepo. The typical response to this is to have a root-level tsconfig.json, and then one in each package that extends from the root tsconfig.json.\nBut what if you add another tool, and another tool? You can easily find yourself having configuration files for TypeScript, TSLint, Prettier, Testing Coverage, and more, in each package. This might be feasible for the mere six or seven packages outlined in this issue, but it becomes a problem when we want to add new packages. I can definitely see myself asking \"did I forget any config files?\" if I were to ever add a package to a monorepo like this. This is also somewhat in contrast with goal 2.\n@slack/server and \"group\" packages\nI'm going to hold the idea of merging the events API & interactive messages packages. I'm not particularly fond of @slack/server for a few reasons:\n\nLooking at the 6 proposed packages in this issue, all 6 seem equally valid to be in server code for Slack apps, meaning @slack/server would end up just being a kind of \"group\" of all SDK packages.\nThe name might be confusing to new developers, who might mistake the name as being an implementation of Slack's app server\n\nI have a somewhat controversial suggestion that's completely up for debate: \nRename @slack/client to @slack/sdk\nHere's my elevator pitch:\n\nIt's shorter* and easier to type\nName better fits what the package offers\nName makes it easier to find this repository from a google search (meaning easier help!)\n\nThere's one obvious con: migrating developers from @slack/client to @slack/sdk. Making a change like this could easily become the cherry on the cake of migration tasks that keeps developers from upgrading--even if it's completely facilitated by a simple codemod. This also somewhat aligns with the fact that this would be a major semver change.\nI feel it might be more likely that @slack/client continues to be supported, probably just reexporting from @slack/rtm-client and @slack/web-api (etc.), whereas @slack/sdk can be better fit as the umbrella package, exporting from and linking together the major packages (whichever those may be).\nEvents and Interactions\n\nThis could, maybe ideally, be separated into another issue that's dealt with after the monorepo is initially set up\n\nI feel like there's a good point raised, that the Events API and Interactive Messages API are nearly the same model:\n\nSomething happens: a user interacts clicks a button, leaves a channel, pins a message, etc.\nSlack sends a payload to your server\nYour server responds to the payload request with a 200 OK (interactive messages have a slightly different response protocol)\nHandle the incoming event\n...which might include firing off a Web API method or two\n\nThere are some key differences with how developers can use these APIs:\n| Difference | Interactive Messages API | Events API |\n|-|-|-|\n| HTTP Response | 200 OK, but allows: in-conversation messages, ephemeral messages, no message | 200 OK with a challenge sometimes. No response message, not even ephemeral messages. |\n| Action Response | response_url or Web API | Only Web API |\nI feel like the name for the merging of these two packages mostly depends on what the API that respects the differences of the APIs while still managing their common behavior looks like in practice. I was thinking @slack/incoming, but that's likely to be confused with incoming webhooks. Maybe just @slack/middleware?\nGoing forward\nSome other topics that came to my mind:\n\nWhat a single package actually looks like, i.e. the small details like testing alongside source code or in a separate directory\nDocumentation\nIt's given that there'll still be doc comments in source files\nMaybe docs generated from source code comments should be centralized in one ultimate resource, similar to how different Slack APIs (e.g. RTM API, Web API, Events API, etc.) are all centralized on https://api.slack.com/\nIndividual packages should have guides with their APIs, similar to how the Events API has a guide before it lists the events\n???\nProfit\n\n\nAll in all, I feel like this is definitely the right direction for this project! I was previously hoping to propose something like this during my summer internship, but now I'm hoping to get to work on it \ud83d\ude04.. > My thought process behind that name is that while the WebClient, RTMClient, and IncomingWebhook objects all behave like HTTP clients (they make requests), the SlackEventAdapter and SlackMessageAdapter behave like HTTP servers (and also support being used as a listener/middleware in an existing HTTP server). [...] I think @slack/incoming sounds a bit unintuitive (inventing new terminology?).\nYour distinction between client & server sound a lot like the Features section of the current readme, which (now that I look at it) also already uses the terminology \"incoming\" and \"outgoing\". \ud83e\udd37\u200d\u2640\ufe0f But I digress, it doesn't quite feel right as a package name.\nOtherwise, good points, notes taken! \ud83d\udc4d\nOne last thing I totally forgot about: versioning! Would the monorepo use fixed versioning or independent versioning? I personally like the idea of fixed versioning, and would be happy to see it here; however, I haven't quite yet thought out the pros and cons of both.. So the api docs were right, though I find that a bad thing in this case. I feel like that'd be a cause of a high number of issues for anyone trying to make their own client to use with the RTM api (most people would probably throw an error if they got a message without a type that wasn't an error). That, or I'm crazy.\nI have math to do so I won't be able to test this for a solid hour, but I'll be sure to throw my best worst-cases at it. \nEdit: Ahaha, I lied, the math questions were lacking tons of context, seems I'll do this the day after I wrote this. Night.\n. I can confirm that I've run into the issue of getting a test run where the timers matched up and a false positive was thrown--just once, but it has happened.. While I agree that something should be returned, I somewhat feel that's out of the scope of the issue I was originally targeting.\nI simply was aiming to expose the already-existing implementation (which already intentionally doesn't return anything) as a Promise, rather than change the implementation to be of more aid.\nAnyhow, I'll gladly tack this on \ud83d\udc4d\u2728. Oh, good catch! (I apologize for that pun.)\n. If the web socket immediately errors on closing (that is, on the same tick of the event loop as handle is called) then the event handler won't be registered by the time the state machine transitions, and the promise will never reject.\nAlternatively, the web socket could also immediately close (e.g. when mocked for testing) and the same problem would happen, though the promise wouldn't resolve.\nI'm just being cautious that the reactive bit of code is set up before I set off the chain reaction. Don't want any race conditions happening \ud83d\ude05. Just looking through the code, the only other case I could see where something else passes through would be the event payloads for web socket events, specifically the non-existent open event's payload and the web socket closing code and reason from the close event.\nI agree, though, that this could end up leaking something else through. Is there a better course of action? Like guarding that only eventPayload instanceof Error passes?. I think \"it should begin with xoxp\" \ud83d\ude05. ",
    "bewitchingme": "Running the Slack client on Kubuntu 16.04 and after 3.5 hours of running it consumed vast amounts of system memory, causing my desktop to nearly grind to a halt.  I have a 64bit Core i7 processor and 8GB of dual-channel RAM.  I wanted to recommend this for the team I'm working with, but given that we're all running the same OS and hardware, I can't support use of the desktop application.\n. ",
    "NikolayS": "Meanwhile (Slack app 2.0.3 for MacOS):\n\nThe link https://get.slack.help/hc/en-us is useless, it says just this:\n```\nApp uses a lot of memory\nLots of unread channels? Reading them (or marking them as read) should help. \nUse the /collapse command in channels with lots of images and videos.\nSign out of any inessential teams.\n```\n-- and that's it, nothing more. \nI have 5 teams and 22+19+1=42 unread messages. It's not worthing 2.1GB of RAM.\nDo you really think that I'll be sitting checking RAM consumption each hour and being ready to type /collapse in each channel? \nHere is the public discussion and hey you, Slack team, pay attention to this issue, it's so important that you're losing clients. \nIt's very important, just escalate this question on your next team meeting.\n. UPDATE:\nMarked everything as \"read\", and restarted the app, it quickly (less than in 1 minute) grown to 462MB:\n\n462MB for what?!\nNotice the Gitter app -- I have dozens of teams and channels there, it's running for couple of weeks and has hundreds of unread messages. Still 180MB of memory.\n. @mvaragnat thanks for pointing this out, I see, but I wanted to discuss it publicly and haven't found better place than this one.\nSo two cases already, Linux and Mac.\n. Very good, @kurisubrooks but the problem of RAM consumption in Slack client is so annoying.. and definitely there is a lack of places where people would express their feeling publicly. So I'm afraid that you need to do more changes (like delete all our comments and avoid phrases such \"memory usage\" next to \"slack\") to completely get rid of commenters like me.\nNot long ago Slack client devs decided to use multiple processes -- like in Chrome. So now we can easily observe several hundreds of MBs times # of teams you work with -- sometimes it takes gigabyte or even more. So things became even worse.\nIf Slack developers don't bother to listen to their customers, and if the continue doing so, there will probably no need in developing any API, bots or smth else for Slack because some other project will win.. ",
    "mvaragnat": "It's true, but this is a thread related to the Node API client, not the Mac app...\n. The crash can be reproduced by inviting the bot to a public channel, then archiving the channel. This causes a exception, apparently _client.logger is undefined in that case \n. No problem. Thanks !\nIs update to 2.0.0 from the v1 client breaking ?\n. Hello Everesty,\nThank you so much, by the way, for the example you gave. I read it some time ago and it allowed my to get started.\nMaybe I was not clear enough. I am aware that there are getChannelById and getGroupById methods, but before you had things like getChannelOrGroupOrDMByID, which was a more flexible approach (whichever type of source, you were able to capture the object). I don't think that this method exists anymore. I suggested to recreate it. Is it clearer?\n. Awesome ! I did not see them. Closing the issue, then\n. I just upgraded my client from 2.0.6 to 3.5.1, and I now notice the memory leak as well. This is very annoying, as it always ends up crashing against the Heroku limit. I'm trying to fix it, will report if I find something\n. For the record, adding autoReconnect: false to the RTM client does not change the problem\n. Downgrading back to 2.0.6 has solved the problem (@DEGoodmanWilson, if I were you I'd bump up the priority of that issue)\n. Hello @thbar I think the title is appropriate because most memory issues I have seen of late are linked to Slack API disconnects. When Slack forces many connections to close (several hundreds at once - like a server hiccup) my app would usually explode in memory usage and crash. However, it's kind of good thing, because it cleans the state and sets up a clean reconnect...\nI am still on 2.0 but more because of \"if it works, don't fix it\". I think I traced the most aggravating issue to the New Relic monitoring module (go debug a memory leak when it's caused by the monitoring tool!)\nPing @DEGoodmanWilson by the way\n. I think that would be a good way. I suggest you test with 1000 connections disconnecting at the exact same moment (like when the RTM server freezes, pong gets too old, and all connections reset at the exact same time).\nTry to compare 3.6 to 2.0.6 in terms of memory management, perhaps. I found that 2.0.6 was not giving nearly as many problems as 3.X\n. Thank you @aoberoi for this great analysis. I agree that it's well possible that the spike of memory could lead to crashing the app. Perhaps, if my app is already running high in terms of dyno memory (hence slower to respond), or if there is a long running task, it could skip sending \"ping\" to the server, and the server thinks the connection is dead. Reconnection attempts would increase the memory load, slowing even more the app - until it crashes. Would that make sense?\nOne more thing I'd like to ask you, perhaps, would be to run again these tests in SDK 2.0.6. I saw much less issues with 2.0.6 versus 3.x, and I have the impression that something is different in terms of memory usage. I use Node 5 in both cases.\n. This, or a dedicated events API client ?\nIn any case, it would be great. I want to test the new API :-D\n. ",
    "vedmant": "Yeah, I'm forced to close slack client when I'm using virtual machines and need more memory.... ",
    "njakob": "Having a method to change the logger is indeed a better solution while changing the instance variable is a nice temporary hack. In case this feature is added to the client, would be just necessary to clearly define the logging interface since there is multiple standards for the methods names (error vs. err, warn ing vs. warn).\n. ",
    "justin97530": "Hey, could you guys consider this pull request?\n. Sure, here it is: https://github.com/slackhq/node-slack-sdk/issues/237\n. ",
    "kesne": "It might be advantageous to make a PR against the 2.0.0-beta branch.\n. ",
    "evil-shrike": "Ok, thanks, I've enabled logging and leave the bot running. We'll see in a day or two.\n. ",
    "RafaelCosman": "Uh oh, this seems to be a heisenbug -- I just took a break for an hour, came back, didn't change anything and then it ran just fine. Now I'm scared :fearful: \n. ",
    "paulcbetts": "ms410 in particular had some Difficulties\u2122 that weren't related to your code, sorry about that! \n. For sure the error handler, we should turn all ok: falses into a SlackApiError that has the error text as the message\n. ",
    "brunosiqueira": "Hey @l12s ! How is the evolution to the 1.5.0 going? Curious to start using it!\n. Hey, @vanm \nThanks for your feedback. I forked the code and created the two events. And also I am trying to call my rep directly in my app dependencies to test it before submitting to your repo. :\n\"slack-client\": \"git+https://github.com/brunosiqueira/node-slack-client.git#release_1.4.2\"\nThe thing is that is not downloading the coffee script files. I saw that you have a grunt prepublish task, which generates the js files. But I have to confess that I got a little confuse on how requiring it properly. \nThanks for your help (sorry if this is kinda an stupid question :-) )\n. After team domain,name changed there's no need to reconnect.\nThank you!\nBruno Siqueira\n2016-02-16 0:02 GMT+00:00 Leah Jones notifications@github.com:\n\nDo you need to reconnect in the case of a team domain change or rename?\nOther than that, the new client should provide the behavior you're looking\nfor as it'll pass the event through.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slackhq/node-slack-client/pull/94#issuecomment-184446950\n.\n. Hey Leah, thank you for your response.\n\nI know that the \"account_inactive error\" is raised when the app is not\ninstalled, but this happens only when the bot is connecting. After it is\nconnected already, the \"error\" callback is not called anymore. The bot\nstays up and working as if the communication with slack was working\nproperly. The only difference is that the client stops pinging.\nBruno Siqueira\n2016-01-14 23:26 GMT+00:00 Van Miranda notifications@github.com:\n\n@brunosiqueira https://github.com/brunosiqueira we listen for an\n\"account_inactive\" error and that seems to do the trick.\nslack.on 'error', (err) ->\n  if err && err is 'account_inactive'\n    # Handle inactive here...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slackhq/node-slack-client/issues/99#issuecomment-171815633\n.\n. Revisiting this issue, I did some tests with the autoReconnect true and false.\nIf the autoReconnect is true, it ignores account_inactive errors. It doesn't even emits the error callback. If the autoReconnect is false, it does emit the error when connecting, but if I am already connected and I remove the app it generates no info.\n\nI tried in the 'close' callback calling the reconnect() method. And it does work perfectly (calling the 'error' callback). The problem is that if I call reconnect() when the internet connection is off, I can generate duplicated connections and messages when reconnected. This happen because, as far as I understood, the socket client reconnects automatically when the internet is off (independently of the autoReconnect param).\nDoes the version 2.0.0 works differently from this one in that matter?\n. Thank you, @vanm ! But in the #93 issue we discussed how complex it is to install other options other than the central npm repo for the slack-client due to the coffee script compiler. To test your version shouldn't you have a release in your repo? \n. @l12s : should there be a new beta package version? Eg: @2.0.0-beta.4 \n. @l12s I guess you are right. This is what the method di. Thanks for recreating it\n. Hey, @I12s. Thank you for the feedback. I tested the disconnect callback and it is being called correctly when the app is removed from slack.\nBut I am receiving the following parameter: \"unrecoverable failure connecting to the RTM API: account_inactive\".\nIt would be interesting to have a parameter as the text reason and another with the error code from slack. Like the WS_ERROR event that has the error param with just the code (eg: error = 'account_inactive')\n. Thanks, @Everesty \nI am using the rtm client and makeAPICall did the trick!\n. ",
    "martindale": "From snarl:\n``` js\nvar Slack = require('slack-client');\nfunction Snarl(config) {\n  this.token = config.slack.token;\n}\nSnarl.prototype.start = function() {\n  var self = this;\n  var slack = new Slack(self.token, true, true);\n}\nSnarl.prototype.testContext = function() {\n  console.log(this); // logs out a Slack client instance\n}\nmodule.exports = Snarl;\n```\nto test:\n``` js\nvar Snarl = require('./snarl'); // from above\nvar snarl = new Snarl({ slack: { token: '...' } });\nsnarl.start();\nsnarl.testContext();\n``\n. You're right, I'm testing that locally and not getting the same issue.  I just upgraded to 1.5.  In snarl, I've worked around this, so I'm tracing back to the problem I was having last night.  Give me just a few minutes and I'll give you a better test case.\n. Okay, it seems a bit more nuanced than I previously thought.  I didn't think it was possible either, and maybe I'm just completely incompetent... but I've stared at this code for almost a day now with no luck.  I've committed the changes that cause it to happen on thebroken` branch of snarl: https://github.com/martindale/snarl/tree/broken\nApologies for dumping a repo on you, and I don't really expect much.  This is just a really, really weird bug.  Running snarl on the broken branch, he'll connect, but then attempting to trigger any of the available commands (I've been testing with !erm) causes the following error:\n/home/eric/snarl/lib/snarl.js:34\n      var command = self.triggers[x];\n                                 ^\nTypeError: Cannot read property 'erm' of undefined\n    at /home/eric/snarl/lib/snarl.js:34:34\n    at Array.forEach (native)\n    at Client.Snarl._interpret (/home/eric/snarl/lib/snarl.js:30:8)\n    at Client.emit (events.js:95:17)\n    at Client.onMessage (/home/eric/snarl/node_modules/slack-client/src/client.js:483:14)\n    at WebSocket.<anonymous> (/home/eric/snarl/node_modules/slack-client/src/client.js:140:24)\n    at WebSocket.emit (events.js:98:17)\n    at Receiver.ontext (/home/eric/snarl/node_modules/slack-client/node_modules/ws/lib/WebSocket.js:816:10)\n    at /home/eric/snarl/node_modules/slack-client/node_modules/ws/lib/Receiver.js:477:18\n    at Receiver.applyExtensions (/home/eric/snarl/node_modules/slack-client/node_modules/ws/lib/Receiver.js:364:5)\nThe relevant function sets the self context to this, but then self.triggers (which should be attached to the Snarl instance) is undefined.  \ud83d\ude20\n. I'm going to work my way backwards to reduce this to a much more clear test case.  I'll admit this is one of the strangest cases indeed, but when I removed the Slack client the this context was indeed preserved in that method.  EventEmitters were added later as an attempt to circumvent the problem.  Give me just a bit longer to reduce this down...\n. snarl uses inline triggers; this example message asking for !help would trigger them.  So they should be called from the context of a Snarl instance, but despite expectations, this inside of that function still points to the Slack instance.\nedit: the workaround on master is currently to just attach everything to the Slack instance, but that's obviously not ideal.\n. ",
    "mbland": "Thanks, @l12s! Any idea when this upgraded client will get integrated into slackhq/hubot-slack?\n. ",
    "danielravina": "Thanks. So this is what happen when a human user is writing a message.\nMy question was referring to a typing action from the bot.\nThe bot i'm working on connects to couple of services and it takes him 4 - 5 seconds to reply. I think It would be kinda cool to show \"@bot is typing...\" in the meanwhile\n. ",
    "elirazBusi": "@silentrob- I 'm trying to use the code you wrote and get:\nERROR TypeError: Slack is not a constructor\nI'm using slack-client version \"version\": \"2.0.6\"\n. @DEGoodmanWilson big thank you :+1:\nwhen I'm trying to do rtm.start() I get : \ndebug: { '0': 'unable_to_rtm_start', '1': 'missing_scope' }\n. well , I was needed to grant authorization to my slack app using \nhttps://slack.com/oauth/authorize?\n  client_id=...&\n  scope=client\nand that solved the problem, so rtm.start is working ..\nbut still it doesn't work for me. i send \n rtm._send({id: 1,\n    type: \"typing\",\n    channel: \"CHANNEL_ID\"\n  });\nand nothing happens ...\n. Yes indeed\n. ",
    "agamrafaeli": "The official documenation as seen here (at time of posting, 26 Nov, 2016 21:50 UTC): https://api.slack.com/methods/chat.postMessage \nthere is no support for the type field on posting messages. Could Slack have deprecated this option for bots?. @DEGoodmanWilson can you help us to figure out how to send an event so that our bots seem to be typing?. ",
    "webus": "It's not working still. I tried to send a picture in chat but Slack sees it as a text and it shows as text.\njavascript\nlet WebClient = require(\"@slack/client\").WebClient;\nlet web = new WebClient(accessToken);\nlet opts = {\n    content: fs.readFileSync(imageFilePath),\n    filename: 'image.jpg',\n    title: 'image.jpg',\n    channels: 'demo'\n};\nweb.files.upload(msg.photo.caption, opts, (err, res) => {\n    if (err) {\n        // no errors here\n    } else {\n        // here i receive the data about the uploaded file, and there it is listed as plain text\n    }\n});\nOf course, I found the solution on the advice of @pveyes. \n. ",
    "pveyes": "@webus shouldn't you use file instead of content in opts? \n. ",
    "jsarafajr": "@l12s \nGetting Error: no_file_data while uploading Buffer object with files.upload. Seems that this is connected with issues above.\n```js\n// doesn't work (see trace log below)\nconst image = fs.readFileSync('image.png');\nawait bot.files.upload('image.png', {\n  file: image\n});\n// text buffer doesn't work too\nawait bot.files.upload('text.txt', {\n  file: new Buffer('hello world');\n});\n// uploads image as Plain Text (incorrect)\nawait bot.files.upload('image.png', {\n  content: image\n});\n// works well with streams\nconst imageStream = fs.createReadStream('image.png')\nawait bot.files.upload('image.png', {\n  file: imageStream\n});\n```\nbash\n2016-12-27T13:58:29.415Z - error:  Error: no_file_data\n     at handleHttpResponse (/bot/node_modules/@slack/client/lib/clients/transports/call-transport.js:105:17)\n     at handleTransportResponse (/bot/node_modules/@slack/client/lib/clients/transports/call-transport.js:155:19)\n     at apply (/bot/node_modules/lodash/lodash.js:499:17)\n     at wrapper (/bot/node_modules/lodash/lodash.js:5356:16)\n     at Request.handleRequestTranportRes (/bot/node_modules/@slack/client/lib/clients/transports/request.js:20:5)\n     at apply (/bot/node_modules/lodash/lodash.js:499:17)\n     at Request.wrapper [as _callback] (/bot/node_modules/lodash/lodash.js:5356:16)\n     at Request.self.callback (/bot/node_modules/request/request.js:186:22)\n...\n. ",
    "GyozaGuy": "I can also verify that no_file_data is returned when using readFileSync, but using createReadStream does work.. ",
    "acemtp": "Perfect\n. i sent a PR about this https://github.com/slackhq/node-slack-client/pull/118\n. The PR was applied so it's fixed\n. Hello @brunosiqueira,\nWe use the 2.0 version in production on Talkus http://talkus.io for a few months and it's more stable than the 1.5 version.\nYou should not have issues (but we never try with 1000 bots).\n. ",
    "peernohell": "Hi,\nIs there some news about this issue?\nDoes the current version support multiple teams on a single datastore?\nthanks\n. it's fixed.\nthanks for your comments it's explain to me we you keep using setters on store when I thought update was enough. \n. I'm not fan of adding a boolean to enable/disable promise. Libs I see offering both options and detect if the last arguments (the callback) is defined and if it is not the case it return a promise.\nif (apiCallArgs.cb === noop) {\n  return promise = (...);\n}\nOr you can always use a promise: \nvar promise =  ...;\nif (apiCallArgs.cb !== noop) {\n  promise.then(function (result) {\n    optCb(null, result)\n  }, function (error) {\n    optCb(error);\n  });\n}\nreturn promise;\n. ",
    "remipou": "thank you!\n. ",
    "larsklevan": "https://github.com/slackhq/node-slack-client/commit/65228f30662b964abae6c87ca9101e64ea8c0c11 addresses my issue. Thanks for the quick fix!\n. just fixing a typo here\n. ",
    "lonelyclaud": "My bad. I was not passing an opts parameter (empty in this case):\nweb.users.list({}, function userListCb(err, response) {\n    if (err) return console.log('Error:', err);\n    console.log('List', response);\n})\n. ",
    "pcothenet": "The inline jsdoc code says: \n* @param {function} optCb Optional callback, if not using promises.\nbut I  get Uncaught TypeError: Cannot read property 'then' of undefined. \nShould I assume this is not actually implemented?\n. ",
    "gregorskii": "Hi there,\nI am currently trying to update to the new client. I am running into some things that may be helpful.\nThe main thing I am seeing so far is that the new client is simply a client, it is more low level than the previous library and does not afford some of the same conveniences.\nThat could be the goal entirely, but I am finding it is a bit more complex to use it in a simple application that the previous library and may necessitate a wrapper library to make it more use friendly. I could be wrong, or maybe this is premature. But this is what I am finding... :)\nIf I am wrong in any of these assumptions below please correct me, and maybe update the documentation.\nAlso I do see that this may be explaining some of these things:\nThis library does not attempt to provide application level support, e.g. regex matching and filtering of the conversation stream. If you're looking for those kinds of features, you should check out one of the great libraries built on top of this.\nBut I do not see a link to any higher level libraries that are built on this one, unless that comment is for future libraries to come?\nThank you,\nGreg\n\nI see the new client does not provide the same event wrapper as the old, where it does not export a eventing slack object that has:\nslack.on('open', function() {});\nslack.on('message', function(message) {});\nslack.on('teamJoin', function(user) {});\nslack.on('error', function(error) {});\nAfter connecting to the client in the old version using:\nvar autoMark = true;\nvar autoReconnect = true;\nvar slack = new Slack(process.env.SLACK_TOKEN, autoReconnect, autoMark);\nOne was off to the races sending and receiving messages. It is quite confusing using the new library to get running quickly.\nThe new project includes the CLIENT_EVENTS and RTM_EVENTS enumerations but requires that one wrap a new object to include the same eventing that older clients were expecting:\n```\nmodule.exports = function() {\n    var events = require('events'),\n        util = require('util'),\n        RTM_EVENTS = require('@slack/client').RTM_EVENTS\n    ;\nvar Slack = function(rtm) {\n    events.EventEmitter.call(this);\n\n    // Proxy RTM event to slack object event\n    rtm.on(RTM_EVENTS.MESSAGE, function(message) {\n        this.onMessage(message);\n    }.bind(this));\n};\n\nutil.inherits(Slack, events.EventEmitter);\n\nSlack.prototype.onMessage = function(data) {\n    this.emit('message', data);\n};\n\nreturn Slack;\n\n};\n```\nThe goal of this change presumably is to extract the rtm client from a slack helper object with eventing. But it is quite confusing to push the RTM_EVENTS actions back on the object in a usable way.\n\nThe new client does not automatically merge the connection data with the returning object.\nThe old client had keys like slack.self.name where the new client returns similar data in the rtmStartData object after calling rtm.start(). The data that is returned in that object could be merged with a parent object like the previous library.\n\nThe new client has an event that is triggered on connect, (which was my main reason for switching to the new), this event ideally (and all events) would be better if they returned a promise, or a callback, depending on how they are called.\nExample of what I am doing now:\n```\nmodule.exports = function(log) {\n    var Promise = require('bluebird'),\n        RtmClient = require('@slack/client').RtmClient,\n        CLIENT_EVENTS = require('@slack/client').CLIENT_EVENTS,\n        token = process.env.SLACK_TOKEN,\n        rtm = new RtmClient(token, {logLevel: 'error'}),\n        Slack = require('./slack')(log),\n        _ = require('lodash')\n    ;\nif (!token) {\n    log.fatal('Missing slack token');\n}\n\nreturn {\n    connect: function() {\n        return new Promise(function(resolve, reject) {\n            rtm.on(CLIENT_EVENTS.RTM.AUTHENTICATED, function(rtmStartData) {\n                var slack = new Slack();\n                resolve(_.extend(slack, rtmStartData));\n            });\n\n            rtm.on(CLIENT_EVENTS.RTM.UNABLE_TO_RTM_START, function(err) {\n                reject(err);\n            });\n\n            rtm.start();\n        });\n    }\n}\n\n}\n```\ninterfaces.slackRtm.connect()\n    .then(function(slack) {\n        log.info(\"Welcome to Slack. You are @\" + slack.self.name + \" of \" + slack.team.name);\n    })\n    .catch(function(error) {\n        log.fatal(error, 'ERROR Unable to start Slack RTM');\n    })\n;\nPromises are useful because they can be chained with existing app startup events that utilize Promises.\n\nThe new library drops some of the helper functions that were used to get channels to send messages back on:\nClient.prototype.getUserByID = function(id)\nClient.prototype.getUserByName = function(name)\nClient.prototype.getChannelByID = function(id)\nClient.prototype.getChannelByName = function(name)\nClient.prototype.getDMByID = function(id)\nClient.prototype.getDMByName = function(name)\nClient.prototype.getGroupByID = function(id)\nClient.prototype.getGroupByName = function(name)\nClient.prototype.getChannelGroupOrDMByID = function(id)\nClient.prototype.getChannelGroupOrDMByName = function(name)\nClient.prototype.getUnreadCount = function()\nClient.prototype.getChannelsWithUnreads = function()\nThese functions were used in the old libraries example 'onMessage' callback to determine the user and the channel of the incoming message, it could then use these channels and users to send back messages:\n```\nvar ts = message.ts;\nvar type = message.type;\nvar userID = message.user;\nvar text = message.text;\nvar channel = slack.getChannelGroupOrDMByID(message.channel);\nvar user = slack.getUserByID(userID);\nvar userName = (user && user.name) ? '@' + user.name : 'UNKNOWN_USER';\nvar isMention = slackHelpers.isDirect(slack.self.id, message.text);\nvar isDirect = channel.id.charAt(0) === 'D';\nvar isUserBot = (userID === slack.self.id);\n```\n. @l12s,\nWill not respond here. From the comment it seemed like it could be a discussion per \"then talk to folks who depend on the old slack-client module about what a transition plan would look like to upgrade.\"\nWas prematurely chiming in then.\nWill review these notes. Does indeed look like the same functionality is in place. Likely the general OSS community just need to give it time for the documentation to get added/kinks to be worked out.\nThanks\n. ",
    "Lokeh": "I find the lack of documentation the hardest part in migrating/creating a new project. Data stores and models are not explained anywhere, and in general I find myself needing to read source code in order to get much done.\n. ",
    "sa-mao": "thanks for your reply :) but it could be nice to have some reference for the API generally speaking.\n. ",
    "pekim": "When the RTM_CONNECTION_OPENED event has fired, your datastore will be populated with the received data.\nAlthough it doesn't appear to be available immediately, but is in the next event loop tick (hence the setImmediate in my snippet below). I suspect that this is because the event is triggered right before the datastore is populated, but I haven't looked at that bit of code.\nPerhaps there's a better, slightly later, event to wait for? I think that I need to look in to the source a bit more.\n``` javascript\n  const dataStore = new MemoryDataStore({\n    logger: log\n  });\nconst rtm = new RtmClient(getPreferenceToken(), {\n    dataStore,\n    logger: log\n  });\nrtm.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, () => {\n    setImmediate(() => {\n      console.log(dataStore.channels);\n    });\n  });\nrtm.start();\n```\n. Thank you.\n. ",
    "mxrlkn": "Thank you. Just what I needed. I'll let the the issue remain open until someone from slack can confirm whether or not there is any other way to do it.\n. ",
    "benzmuircroft": "or a string\nanything normal? like most if not all other apis...\n. look at this http://stackoverflow.com/questions/35687284/hard-code-slack-api-token-into-javascript-code/35687332#35687332 I have already tried to put my token as a string\n. my code is private server side code. i wont accidentally expose them publicly lol\n. no im writing an app\n. connecting to you with the apps token as a string fails with [Error: invalid_array_arg]\n. I'm using your code on the README.md I have registered my app already, read all of that about the apps...\nI got my token here https://api.slack.com/docs/oauth-test-tokens\n. var RtmClient = require('slack-client').RtmClient;\nvar token = 'xoxp-xxxxxxxxxxx-xxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx';\nvar rtm = new RtmClient(token, {logLevel: 'debug'});\nrtm.start();\ngives me [Error: invalid_array_arg]\n. \"version\": \"2.0.2\" installed today\n. that's the same code mate!\n. don't know how with that code it's weird all your code is very weird! LOL\n. console.trace(what goes here) ?\n. yeah just this [Error: invalid_array_arg] undefined\n. not very informative... what if i could throw an error somehow?? maybe we would get more info (not sure)\n. or could i create a token with oauth?\n. it is, as, I gave you the link to the test token page earlier where slack generated it for me\n. sent\n. verbose: attempting to connect via the RTM API\ndebug: { '0': 'connecting' }\nverbose: rtm.start successful, attempting to open websocket URL\ndebug: { '0': 'authenticated',\n  '1': \n   { ok: true,\n     self: \n      { id: 'U0PB4E1NZ',\n        name: 'benzmuircroft',\n        prefs: [Object],\n        created: 1456586277,\n        manual_presence: 'active' },\n     team: \n      { id: 'T0PB4ENP5',\n        name: 'xxxx',\n        email_domain: '',\n        domain: 'xxxx',\n        msg_edit_window_mins: -1,\n        prefs: [Object],\n        icon: [Object],\n        over_storage_limit: false,\n        plan: '',\n        over_integrations_limit: true },\n     latest_event_ts: '1456696090.000000',\n     channels: [ [Object], [Object], [Object], [Object], [Object] ],\n     groups: [],\n     ims: [ [Object], [Object], [Object] ],\n     cache_ts: 1456696690,\n     subteams: { self: [], all: [] },\n     dnd: \n      { dnd_enabled: true,\n        next_dnd_start_ts: 1456696800,\n        next_dnd_end_ts: 1456732800,\n        snooze_enabled: false },\n     users: [ [Object], [Object], [Object], [Object] ],\n     cache_version: 'v13-tiger',\n     cache_ts_version: 'v1-cat',\n     bots: \n      [ [Object],\n        [Object],\n        [Object],\n        [Object],\n        [Object],\n        [Object],\n        [Object] ],\n     url: 'wss://ms633.slack-msgs.com/websocket/6uKAcpmUqHzzMibFCh5DECECXw4sAJe9s0zekkpdlF_9VB4tFexqyGghE-IeSMiZkCmflUp38iYJVj1Q_amfQgDQ67uymJMNqtUW0ZWUaGdnt7wC1pJZqPPpUPsd1G2Ydx_TMmInfbKKhavESq7_nQ==' } }\ndebug: { '0': 'ws_opening' }\ndebug: { '0': 'ws_opened' }\ndebug: {\"type\":\"hello\"}\ndebug: { '0': 'raw_message', '1': '{\"type\":\"hello\"}' }\ndebug: { '0': 'open' }\ndebug: {\"reply_to\":2502,\"type\":\"message\",\"channel\":\"cccc\",\"user\":\"uuuu\",\"text\":\"you\",\"ts\":\"1456680489.000044\"}\ndebug: { '0': 'raw_message',\n  '1': '{\"reply_to\":2502,\"type\":\"message\",\"channel\":\"cccc\",\"user\":\"uuuu\",\"text\":\"you\",\"ts\":\"1456680489.000044\"}' }\ndebug: {\"type\":\"reconnect_url\",\"url\":\"wss://ms633.slack-msgs.com/websocket/bcxC_lyrhs_eu_kJSa5txLJzKisTy-dzVJeVmQ1gaTfGLX6ATEXzzURegmCVhrzxYEQ50pC7p7jOAYcReJp2LUXDQLRnNv6c7qvo68H_jH5vRM0MLEnBys-CsZGBDh8xwXcXmI0N3E0fwIjxODr6TQIF6Ilet84uY9-6zKXMcY0=\"}\ndebug: { '0': 'raw_message',\n  '1': '{\"type\":\"reconnect_url\",\"url\":\"wss://ms633.slack-msgs.com/websocket/bcxC_lyrhs_eu_kJSa5txLJzKisTy-dzVJeVmQ1gaTfGLX6ATEXzzURegmCVhrzxYEQ50pC7p7jOAYcReJp2LUXDQLRnNv6c7qvo68H_jH5vRM0MLEnBys-CsZGBDh8xwXcXmI0N3E0fwIjxODr6TQIF6Ilet84uY9-6zKXMcY0=\"}' }\ndebug: { '0': 'reconnect_url',\n  '1': \n   { type: 'reconnect_url',\n     url: 'wss://ms633.slack-msgs.com/websocket/bcxC_lyrhs_eu_kJSa5txLJzKisTy-dzVJeVmQ1gaTfGLX6ATEXzzURegmCVhrzxYEQ50pC7p7jOAYcReJp2LUXDQLRnNv6c7qvo68H_jH5vRM0MLEnBys-CsZGBDh8xwXcXmI0N3E0fwIjxODr6TQIF6Ilet84uY9-6zKXMcY0=' } }\ndebug: {\"type\":\"presence_change\",\"user\":\"uuuu\",\"presence\":\"active\"}\ndebug: { '0': 'raw_message',\n  '1': '{\"type\":\"presence_change\",\"user\":\"uuuu\",\"presence\":\"active\"}' }\ndebug: { '0': 'presence_change',\n  '1': \n   { type: 'presence_change',\n     user: 'uuuu',\n     presence: 'active' } }\ndebug: {\"type\":\"ping\",\"id\":1}\ndebug: {\"type\":\"pong\",\"reply_to\":1}\ndebug: { '0': 'raw_message', '1': '{\"type\":\"pong\",\"reply_to\":1}' }\ndebug: {\"type\":\"reconnect_url\",\"url\":\"wss://ms633.slack-msgs.com/websocket/3CDnlM7LPq2P75lqCi3xZo2fW9xhkX2q6jIMPpusQqTzCMU_GinB5VdnxPjkyKRvXDZ7DcDw9xwKQw-T8rBJOeDLLwIzLiEl1wLMEArGxEWIV7CTkDQ_vrUiGIic5KiooX2TwQl1Awpl8OzzGLEsQDRzDCqrP_kGOXtVcnDxxUM=\"}\ndebug: { '0': 'raw_message',\n  '1': '{\"type\":\"reconnect_url\",\"url\":\"wss://ms633.slack-msgs.com/websocket/3CDnlM7LPq2P75lqCi3xZo2fW9xhkX2q6jIMPpusQqTzCMU_GinB5VdnxPjkyKRvXDZ7DcDw9xwKQw-T8rBJOeDLLwIzLiEl1wLMEArGxEWIV7CTkDQ_vrUiGIic5KiooX2TwQl1Awpl8OzzGLEsQDRzDCqrP_kGOXtVcnDxxUM=\"}' }\ndebug: { '0': 'reconnect_url',\n  '1': \n   { type: 'reconnect_url',\n     url: 'wss://ms633.slack-msgs.com/websocket/3CDnlM7LPq2P75lqCi3xZo2fW9xhkX2q6jIMPpusQqTzCMU_GinB5VdnxPjkyKRvXDZ7DcDw9xwKQw-T8rBJOeDLLwIzLiEl1wLMEArGxEWIV7CTkDQ_vrUiGIic5KiooX2TwQl1Awpl8OzzGLEsQDRzDCqrP_kGOXtVcnDxxUM=' } }\ndebug: {\"type\":\"ping\",\"id\":2}\ndebug: {\"type\":\"pong\",\"reply_to\":2}\ndebug: { '0': 'raw_message', '1': '{\"type\":\"pong\",\"reply_to\":2}' }\ndebug: {\"type\":\"ping\",\"id\":3}\ndebug: {\"type\":\"pong\",\"reply_to\":3}\ndebug: { '0': 'raw_message', '1': '{\"type\":\"pong\",\"reply_to\":3}' }\n. i'll delete that in a sec\n. looks like it works\n. wow you are cool\n. tiny mention\nhttps://github.com/slackhq/node-slack-client/blob/master/examples/example-web-client.js\n. yeah thanks dude!!\n. I've made an attempt to contain your module under a node.js domain to try to catch and restart the slack-client on your errors (the errors seem very low level - within your node_modules)\n. LOL It is! I nulled it after as I wanted to stop listening after it's created!\nfunction created(ch){\n    console.log('created',ch);\n    if(ch.channel.name==U.username){\n        \u2d4c.cid=ch.channel.id;\n        \u2d4c.rtm.on(\u2d4c.RTM_EVENTS.CHANNEL_CREATED,null);//stop listening <<<<<-------- here\n        G.SLACK[\u2d4c.cid]={uid:U.id,'suid':s[1].uid};//saved a note of the connected user\n        post();\n        }\n    return;\n    }\nHow do I stop listening properly without causing this error?\n. node-slack-client/lib/clients/web/facets/channels.js\nlines 5 - 18 are dead api documentation  links (404 pages)\nexample: https://api.slack.com/methods/channels.unarchive%7Cchannels.unarchive\n. I literally want to destroy/obliterate the channel\n. If the api can create a channel then it should be able to delete it! otherwise my team is stuck having to spend time deleting channels (and hating me for constantly making them have to do a redundant clean up task)\n. the only thing I can think of is sending in phantomjs to headlessly login as myself and physically delete the channels via navigating through the UI using jquery selectors...\n. ",
    "spideynr": "I tried renaming all functions to IM from DM as well but figured it would maybe cause some mayhem in development and when i reverted everything it came back to just changing the this.name of the faucet\n. ",
    "anskaal": "You are right @l12s :) Thanks\n. ",
    "nitintt1991": "Hey I have the same problem. I created one channel and now I would no longer need it.\nI went through this link https://get.slack.help/hc/en-us/articles/213185307-Delete-a-channel\nbut it's of no help, the reason being I can only find two options in additional settings of the channel, one being edit name and other being edit channel purpose.\nPlease note the channel has been created by me.\nCould anyone please help on this?\n. ",
    "AkiTensai": "As the \"Primary Owner\", I can't delete the channel that was originally #general. I have since renamed it to something else, have a new #general, and don't see an option to promote a new channel to the undeletable general channel. The help article doesn't state that #general is not delete-able. . ",
    "PaulAsjes": ":+1: Exactly what I was hoping for, thanks!\n. Did a quick test this morning and it seems to be working as expected. Although I did notice that when restarting my node process the last RTM_EVENTS.MESSAGE event would immediately fire, with the last known message as the payload.\nI'll have another look this evening to see if I can figure out why the above is happening.\n. It seems a little odd to me that the API would return the last known message on connection open, as it was sent before the local client started and thus can probably be ignored. However it's certainly not a huge issue and it might be useful in certain scenarios.\nI think a combination of options 2 and 3 is probably best. The reply_to key is ultimately useless in the local client so should be omitted. All this is definitely out of scope for this particular PR so I say :+1: and thanks for turning this around so quickly!\n. Two things:\n- To detect whether you've connected you need to use the CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED event:\nrtm.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, () => {\n console.log('Connected!');\n});\n- Is your bot in the channel that you're sending messages to? The MESSAGE event will only trigger when a message is sent in a channel the bot resides in.\n. They switched to using NPM organizations, so to install the latest version use:\nnpm install @slack/client\n. Yup, you'll need to use a dataStore to get access to those helper functions now:\n```\nconst RtmClient = require('@slack/client').RtmClient;\nconst RTM_EVENTS = require('@slack/client').RTM_EVENTS;\nconst MemoryDataStore = require('@slack/client').MemoryDataStore;\nlet slack = new RtmClient(YOUR_TOKEN_HERE, {\n  logLevel: 'error', \n  dataStore: new MemoryDataStore(),\n  autoReconnect: true,\n  autoMark: true \n});\nslack.on(RTM_EVENTS.MESSAGE, (message) => {\n  let channel = slack.dataStore.getChannelGroupOrDMById(message.channel);\nconsole.log(channel);\nslack.sendMessage(Hello ${channel.name}!, channel.id);\n});\n``\n. @l12s No worries, I switched everything to ES5. \n. Phew, lot of commits that didn't merge nicely. That'll teach me to be inactive.\n. I'm a little confused here, surely we'd want to call the callback fromsendMessage` with the response if there's no ws error? \nI tested this out and found that the callback was not invoked when a message is sent successfully. \n. Okay I see where I got turned around, I thought this was where we get the response object from the server containing the reply_to and ts keys.\nHere's the code that I'm running: \nrtm.sendMessage('Hello!', channel.id, (err, msg) => {\n  console.log('ret:', err, msg);\n});\nThat log never fires despite the bot posting the message on Slack.\n. I might have found a clue as to what's going on. \nI added a log here:\nconsole.log('messageType:', messageType, message);\nAnd got this:\nmessageType: undefined { ok: true, reply_to: 2, ts: '1457315835.000510', text: 'Hello!' }\nThe message is the one sent by the bot, but that undefined value is intriguing, it should be of the type RTM_API_EVENTS.MESSAGE I believe. I also logged the msgId value in _send, and it corresponds to the one in the returned object above.\n. Yup, the message object here is missing a type parameter oddly enough.\n. @Everesty is right, this is technically Working As Intended. A workaround could be to check here whether message.type is undefined and if ok is true. If so, use the timestamp provided to grab the message via getMessageByTs (how you would gain access to that particular method I don't know) and use that instead.\n. Whoops, thanks for catching!\n. I'm a little unclear on what you mean by MS, but my goal here was to expose the already existing update function of the ChatFacet. \n. The only issue with this approach is that it's very hard to test \"out of the box\". Ideally someone should be able to clone the repo and run tests without having to set up a team. Is it possible to generate some sort of fake test token which returns the correct payload but otherwise does nothing?\n. Ah I didn't realise! I'll remove that and have a rethink about the testing before updating this PR.\n. ",
    "ernestgwilsonii": "Hi, looking at package.json I see:\nhubot-slack 3.4.2\nslack-client 1.4.0\nI thought this calls node-slack-client, maybe it only relies on slack-client, not sure?\nPlease let me know after you speak with the folks who maintain our RTM API about whether there's a flat connection limit too, that would hurt.\n. ",
    "suresh1271": "@PaulAsjes can't we send message to User by User Id ot IM Channel Id ? Please help me in this\nrtm.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, function () {\n      rtm.send( 'message','D6KNFR329',function (err, res) {\nconsole.log(\"error : \"+err);\nconsole.log(\"response : \"+res);\n});\n});\n//D6KNFR329 IM channel id\nI user the above code but i didn't get any message. If I replace the IM channel id with normal channel ID(#general) I'm able to receive. But i want to send to an user please help me in this. Hello @jasonTheNorris  can't we send direct message through Client.send api. I tried by giving DM channel Id in the place of channel Id but it did't work. can you please suggest me with suitable api's.\nNote: I want to send direct message to user by his ID not by name\nThanks in advance :). ",
    "hadios": "Hi @jadesym,\nHad the same problem. Stringify the array seems to solve it.\nconst data = {username: 'braintreebot', as_user: true, attachments: JSON.stringify[{}]}\nTook me hours to figure this out. Not sure if this is the intended way of passing the attachment. Hope that helps.\n. ",
    "jadesym": "Oh wow, thank you! That fixed my problem completely!\n. Yeah, sorry about that. I fixed my error after I played with it a bit longer.\n. ",
    "alax": "This is to fix #178 \n. ",
    "technicalpickles": "Actually, it'd be better to make it 1.x rather 1.4.x, assuming we are using semantic versioning.\n. > https://github.com/slackhq/node-slack-client/tree/1.5.0 is now a thing\nThanks. I was actually thinking to literally call it 1.x so if there's any other changes, that can effectively be the master of the 1.x line, so PRs can be made from that. That way, it's a little more future proof than just this one change, specifically so we don't have to make more branches named like that or have it be confusing if we keep making changes against it. Also: I think it would conflict with a 1.5.0 tag whenever that happens.\n\nI'd be interested in chatting about what kind of upgrade path to future versions of the node-client you're thinking of. There's been a lot of work on handling reconnection logic since 1.4.1 and there'll be some additional features around that coming shortly as wel\n\nI'd ask you the same thing since you've been working on this :grin:  If you are using semantic version, 2.0 is a major release, and does allow for breaking API changes. However, that doesn't necessarily make it easy for people to upgrade to it.\nI'd start with upgrading an existing application using 1.x to 2.x, and just see what breaks. hubot-slack would be a good one, but maybe it's too complicated to try for the first pass. I think that would highlight a bunch of changes. If there are a lot of things breaking, it'd be worth asking backwards compatability should be added to the 2.x branch.\nIf there are specific things that are definitely changing in 2.x, it's worth adding deprecation messages in 1.x. If it's functions or events being rename, you can keep the old one there, log the deprecation, and then pass it onto the new thing. If it's function parameters changing (ie adding more parameters), you can check the function arity to conditionally do an old behavior and log the warning, vs doing the new behavior. By doing this, something using the older version of the library would get hints on how to upgrade.\n. This particular issue, ie having a 1.x branch is resolved, see https://github.com/slackhq/node-slack-sdk/tree/1.x\n. ",
    "aaronblythe": "I would be interested in seeing the other responses.  :) Trying to gauge if I use a work around or wait for #183 \n. ",
    "rdlh": "Hey @brunosiqueira,\nI don't know if that's still a current question, but:\nWe're using the 2.3.0 version here at Slaask with several thousands of bots and everything is working like a charm. We're using node clustering (with pm2) to scale our bot user growth and that's really stabler than 1.5.\nContact me at remi@slaask.com if you've got any questions about that scale.\n. It works!\nReally thank you for your fast answer :heart: \n. Same problem here!\n\nat RTMClient._handleMsgResponse (@slack/client/lib/clients/rtm/client.js line 761 col 22) responseHandler.fulfill(res);\nat RTMClient._handlePong (@slack/client/lib/clients/rtm/client.js line 595 col 8) this._handleMsgResponse(message.reply_to, null, message);\nat RTMClient._handleWsMessageInternal (@slack/client/lib/clients/rtm/client.js line 415 col 10) this._handlePong(message);\nat RTMClient.handleWsMessage (@slack/client/lib/clients/rtm/client.js line 399 col 10) this._handleWsMessageInternal(message.type, message);\nat WebSocket.wrapper (@slack/client/node_modules/lodash/index.js line 3095 col 19) return fn.apply(thisArg, arguments);\nat WebSocket.emit (events.js line 110 col 17)\nat Receiver.ontext (@slack/client/node_modules/ws/lib/WebSocket.js line 841 col 10) self.emit('message', data, flags);\nat <unknown> (@slack/client/node_modules/ws/lib/Receiver.js line 536 col 18) self.ontext(messageBuffer.toString('utf8'), {masked: state.masked, buffer: messageBuffer});\nat Receiver.applyExtensions (@slack/client/node_modules/ws/lib/Receiver.js line 371 col 5) callback(null, messageBuffer);\nat <unknown> (@slack/client/node_modules/ws/lib/Receiver.js line 508 col 14) self.applyExtensions(packet, state.lastFragment, state.compressed, function(err, buffer) {\nat Receiver.flush (@slack/client/node_modules/ws/lib/Receiver.js line 347 col 3) handler(function() {\nat Receiver.opcodes.1.finish (@slack/client/node_modules/ws/lib/Receiver.js line 541 col 12) this.flush();\nat Receiver.expectHandler (@slack/client/node_modules/ws/lib/Receiver.js line 499 col 31)  opcodes['1'].finish.call(self, null, data);\nat Receiver.add (@slack/client/node_modules/ws/lib/Receiver.js line 103 col 24) this.expectHandler.call(this, bufferForHandler);\nat TLSSocket.realHandler (@slack/client/node_modules/ws/lib/WebSocket.js line 825 col 20)  self._receiver.add(data);\nat TLSSocket.emit (events.js line 107 col 17)\n. \n",
    "fabriziopandini": "Thanks! I will contact slack support.\nI will close the issue\n. ",
    "coveralls": "\nCoverage remained the same at 76.724% when pulling ee9ae836b8d8cadda3903f6afe5ed03fb80f01e9 on PaulAsjes:paul/more-docs into 6689dc69d6580fdb4a21c1967541d32b78cf7eac on slackhq:master.\n. \nCoverage remained the same at 76.724% when pulling 3b10ca02e7dfbc5e2a02eb4550967cd6be230691 on PaulAsjes:paul/more-docs into 6689dc69d6580fdb4a21c1967541d32b78cf7eac on slackhq:master.\n. \nCoverage remained the same at 76.724% when pulling 3b10ca02e7dfbc5e2a02eb4550967cd6be230691 on PaulAsjes:paul/more-docs into 6689dc69d6580fdb4a21c1967541d32b78cf7eac on slackhq:master.\n. \nCoverage increased (+0.8%) to 77.498% when pulling ac427ed87d70ede86b69cfc1748204f17a3dd900 on update_api_facets into 6689dc69d6580fdb4a21c1967541d32b78cf7eac on master.\n. \nCoverage increased (+0.8%) to 77.498% when pulling 2e3abee37c8acccf82e777e44c1cd76af67d46a0 on update_api_facets into 6689dc69d6580fdb4a21c1967541d32b78cf7eac on master.\n. \nCoverage increased (+0.8%) to 77.498% when pulling 2b5db551bd7c0e117e8c7dbb9df2c549ec34129b on update_api_facets into 6689dc69d6580fdb4a21c1967541d32b78cf7eac on master.\n. \nCoverage remained the same at 76.724% when pulling da44d2d158e61c96f8069f73e35ba562ac558f37 on ggauravr:master into 6689dc69d6580fdb4a21c1967541d32b78cf7eac on slackhq:master.\n. \nCoverage increased (+0.07%) to 77.572% when pulling a6620879e3cfff5fcf4fc0904556f8c9c7895bd3 on SimantovYousoufov:find_user_by_profile_dot_email into d3d9f264d491173868b2b8d07dac3e7f8c3d5094 on slackhq:master.\n. \nCoverage remained the same at 77.572% when pulling 8f5c8ca3c01707ec5f5126bd257485b03f815555 on lipp:add-to-doclets into b3d5f98cff5fb0f14ef9fcbf40494622b67f7a33 on slackhq:master.\n. \nCoverage remained the same at 77.572% when pulling 60ca6692a2ae49337d6c0401294afeac924f6b82 on ekmartin:lint into b3d5f98cff5fb0f14ef9fcbf40494622b67f7a33 on slackhq:master.\n. \nCoverage decreased (-1.5%) to 76.022% when pulling ce284d424f4bc6b4a72ca19bb4f061c6644e01d1 on ekmartin:add_facets into b3d5f98cff5fb0f14ef9fcbf40494622b67f7a33 on slackhq:master.\n. \nCoverage decreased (-1.5%) to 76.022% when pulling ce284d424f4bc6b4a72ca19bb4f061c6644e01d1 on ekmartin:add_facets into b3d5f98cff5fb0f14ef9fcbf40494622b67f7a33 on slackhq:master.\n. \nCoverage increased (+0.2%) to 75.881% when pulling 20bed6f181701df5677a6533caa039d7e4f8c611 on PaulAsjes:paul/update-message into 4708d064da76e1e7a599bd3d1ba809e4bfe87423 on slackhq:master.\n. \nCoverage decreased (-0.03%) to 84.145% when pulling ed80aec55003b095e273359a656abeba315bb54f on PaulAsjes:paul/update-message into 4fb8614a1793e874060139ebdf4615d9b195a8b1 on slackhq:master.\n. \nCoverage decreased (-0.03%) to 84.145% when pulling af193640d6f477ede00f2a4f3d6331836bdc6ec5 on PaulAsjes:paul/update-message into 4fb8614a1793e874060139ebdf4615d9b195a8b1 on slackhq:master.\n. \nCoverage remained the same at 75.702% when pulling 66ebf33e76d123241e0e3049fbc0f9aec9f71c05 on larsklevan:fix-dm-args into 82762ade52190530e2bf993327c433a373df7beb on slackhq:master.\n. \nCoverage remained the same at 76.125% when pulling c7e8af78c126fbc1c489183de37e47a0be648f73 on examples into 372da029d8a7c57b402527235fc5d3996f5f509f on master.\n. \nCoverage increased (+0.1%) to 76.265% when pulling 24c0d8daa87b5967a9292ba04b9cf9d5a83dc01a on api_updates into a56c0852e8ebc0e34b1f74cf55a3796583a6db5f on master.\n. \nCoverage remained the same at 76.265% when pulling 9360461142cb493c92179fb37ef8fcaf290ef05d on ekmartin:stub_logger into 8b5cb3d90a91c5d340529e1ede3a0a4ada7c61b7 on slackhq:master.\n. \nCoverage remained the same at 76.265% when pulling 595ee9e9b22990712702ddd92796f0ceb38933be on fix_error_throw into a1c32b000fae22300c4e2d9b8ae79d03954aa33f on master.\n. \nCoverage increased (+0.08%) to 76.346% when pulling a91974f27b51c4656b8367e4057c7e3e227da183 on aliased-retry-policies into 6191c768ae5e413554358303f0914075cda9e737 on master.\n. \nCoverage increased (+0.3%) to 76.615% when pulling 039752b7689967f5386697edb91d0e2668920e62 on default_to_memory_data_store into f68e4236a8876fd5a4b76b05b425bcfcfd4406b0 on master.\n. \nCoverage decreased (-0.09%) to 76.526% when pulling 238e88134fe7b1fc1c170764aef4a6f1497f9bb3 on fix_missing_response_handler_err into 161feab2b4b10d87281aabb39b1c441b069b01d2 on master.\n. \nCoverage decreased (-0.09%) to 76.439% when pulling c2bd6623f5137d187d3d3b3b65b69319fa81039e on add_me_message_endpoint into ebcec0ed9495f6b4a9a28c7f2eb88c104757f05d on master.\n. \nCoverage increased (+0.2%) to 76.597% when pulling 25ea70454c04f7e0d311c7095a36fc2873351889 on add_bot_lookups into 8bd8b080c78e7c3f552f03965533ba95f83851f1 on master.\n. \nCoverage remained the same at 76.597% when pulling 5b06ff93e3f54410b282177253db53cfa42c597c on fvargas:fix-datastore-examples into 43500e86af8155b6ea73bec929713a0a27622ec0 on slackhq:master.\n. \nCoverage increased (+0.4%) to 76.979% when pulling 7eb13bb0739f9566789fee687342e55ff5c5747a on crookedneighbor:incomingwebhook into 43500e86af8155b6ea73bec929713a0a27622ec0 on slackhq:master.\n. \nCoverage increased (+0.02%) to 76.613% when pulling 43546295cb5caf1718a26964bec4ed9717ba56db on crookedneighbor:upgrade_lodash into 43500e86af8155b6ea73bec929713a0a27622ec0 on slackhq:master.\n. \nCoverage decreased (-0.009%) to 76.589% when pulling d9cb65f0e4b421865d33874c4a92d6c14b3e9228 on update_api_facets into 43500e86af8155b6ea73bec929713a0a27622ec0 on master.\n. \nCoverage increased (+7.6%) to 84.164% when pulling e163fb155eb0c0803317ac9fd20da4059c598409 on update_api_facets into 43500e86af8155b6ea73bec929713a0a27622ec0 on master.\n. \nCoverage remained the same at 84.164% when pulling 95faaa570f847c39bfa9597f0e94c75b6c2e7419 on fvgs:fix-readme into b267569b13b4d7623223ef4f04becab6cc184fed on slackhq:master.\n. \nCoverage remained the same at 84.164% when pulling 95faaa570f847c39bfa9597f0e94c75b6c2e7419 on fvgs:fix-readme into b267569b13b4d7623223ef4f04becab6cc184fed on slackhq:master.\n. \nCoverage decreased (-0.4%) to 83.805% when pulling e0203d75453064eb0b1cf0632dd94cccc9b3bcfc on lunohq:auto-reconnect-socket-failures into 4fb8614a1793e874060139ebdf4615d9b195a8b1 on slackhq:master.\n. \nCoverage remained the same at 84.145% when pulling 274d661b4315e0fe34455f67b1eef92ecd474c7b on PaulAsjes:paul/fix-update-readme into 8438d3d33bc7eacf89dfdd73a90a2abb1043585d on slackhq:master.\n. \nCoverage remained the same at 84.145% when pulling 5c9d3c94c33ecfb1772104c783925aee7be52714 on bertrandom:model-object-fix into 8de69c68410ca33bbef6901555dd7640f0589922 on slackhq:master.\n. \nCoverage remained the same at 84.145% when pulling 3d7dbf16daca0be29d957fe7104891ee63a4d90e on bertrandom:additional-user-types into 3ea97e42e9b87517f051df928380a17108437985 on slackhq:master.\n. \nCoverage increased (+1.2%) to 85.385% when pulling 213faac4dd74bad48abb6705a843b133845a8d7b on bertrandom:model-object-fix-user-ids-unit-tests into 28e56babdff1abdbbca95272ce3d766d799cdd3b on slackhq:master.\n. \nCoverage increased (+0.04%) to 85.702% when pulling ff3cbd87ae525ed8210c132d5c7a6ae6ecae7b34 on christophehurpeau:get-dm-by-user-id into ce618b1eb5d5936498e9c597d186614ee16dacbf on slackapi:master.\n. \nCoverage remained the same at 85.665% when pulling 775c3af8be202028763c951654b4ae88f97d070f on mgoffin:wsjs-proxyURL into 2ee794cd31326c54f38c518eef2b9d223327d939 on slackhq:master.\n. \nCoverage decreased (-0.06%) to 85.603% when pulling e0ccfc766cb11a8b3da09c6bab7ca9f7bc666063 on liuweichu:master into ce618b1eb5d5936498e9c597d186614ee16dacbf on slackapi:master.\n. \nCoverage decreased (-0.06%) to 85.603% when pulling e0ccfc766cb11a8b3da09c6bab7ca9f7bc666063 on liuweichu:master into ce618b1eb5d5936498e9c597d186614ee16dacbf on slackapi:master.\n. \nCoverage decreased (-0.06%) to 85.603% when pulling 4181511358552adb5ddf3f277e97078ee65016e1 on liuweichu:master into fdd3717579a5b6866628da9aa6982ea1f4fd0606 on slackapi:master.\n. \nCoverage remained the same at 85.665% when pulling 87e9c5d4a8bde8da06e19290d4dfd09cbf14a628 on tnws:fix-contributing-link into cbe9da5fbd38a22cbf7fe7b7253a6fdefe6a4df3 on slackhq:master.\n. \nCoverage remained the same at 85.665% when pulling faabc0ca7f70d84bb82903b7d1606bcee2feb4f7 on aoberoi:exp-travis into ce618b1eb5d5936498e9c597d186614ee16dacbf on slackapi:master.\n. \nCoverage remained the same at 85.665% when pulling faabc0ca7f70d84bb82903b7d1606bcee2feb4f7 on aoberoi:exp-travis into ce618b1eb5d5936498e9c597d186614ee16dacbf on slackapi:master.\n. \nCoverage increased (+0.01%) to 85.677% when pulling 3fdd61340246ea829ed1073eb49cd594f442c87f on markoshust:patch-1 into ce618b1eb5d5936498e9c597d186614ee16dacbf on slackapi:master.\n. \nCoverage increased (+0.01%) to 85.616% when pulling 002d74f1ea402de5ff335aec6189377fecbedc3a on markoshust:patch-1 into 1f241ac920deb4349ecd8fd617d57c15b863ead7 on slackapi:master.\n. \nCoverage remained the same at 85.665% when pulling fb84ac8377dd7811a7b9bc55a62b9dd70d7c8bde on aoberoi:changelog-debris into ce618b1eb5d5936498e9c597d186614ee16dacbf on slackapi:master.\n. \nCoverage remained the same at 85.665% when pulling abba38e693f074894b66578b69206f1bc8a6de71 on aoberoi:changelog-debris into 7bff5f4592e64128a52c57da6093cb9557404009 on slackapi:master.\n. \nCoverage remained the same at 85.665% when pulling 239ae3d9ac93e6412f8d4e1d66ee5446eb9e6577 on aoberoi:docs-remove-nonexistent-section into 1db1251f377ecefc2ad2d0e5829d85389661cde8 on slackapi:master.\n. ",
    "tomoyukim": "Thank you!\nI can pass my proxy url.\n. ",
    "davidkarlsen": "Could this be done easier by picking up https_proxy from the environment?. ",
    "alemjc": "Hi,\nIt started working when I used the client scope.\nThanks\n. ",
    "ddelnano": "Yea it seemed to install fine this time.  I used a different laptop so maybe that had something to do with it?\n. You didn't change anything with the package?\n. Yea I guess it's possible. Well since this is clearly not an issue in closing this. \n. ",
    "wittnl": "For anyone that also happens to come across this problem, I found that just a minor version difference (3.9.x/3.10.x) caused npm install to fail with an unhelpful message \"Invalid package name\"\nUpdating npm did the trick npm i npm -g\n. ",
    "HieJulia": "@wittnl : thanks I tried your solution and it worked!. ",
    "tylucaskelley": "Bumping this; somewhat disappointing that the official client library contains almost no useful documentation. Having to search through the code and guess isn't exactly efficient. Any updates from the maintainers?\n. Glad to hear it! And yeah, for now just reading the web api docs is good enough for what I'm doing but looking forward to seeing some real docs / examples from you guys!\n. ",
    "tr4nquility": "Bump: I somehow got in the same situation here. \nDocumentation of Web Client usage is too minimal, which can also be considered as non-existant.\nIs there any update on this documentation?\n. ",
    "stanfeldman": "You guys broke this API, upgraded from 2.3.0 and my files uploading just stopped working.\nIf anybody experiences you can downgrade to 2.3.0 version, files uploading works there.\n. ",
    "ggauravr": "Awesome. Thanks!\n. ",
    "ctsstc": "I'm setting my away status via /away command as well as the UI\nHere's an example of the code & a video: \nhttp://pastebin.com/GyDFALVj\nhttp://screencast.com/t/N7HPQj22Y\nI wouls assume this would fire when a user manually sets their presence vs idling out.\n. Whoops used two accounts to create the ticket and comment. \nThanks for the heads up about this and confirming the functionality. \n. ",
    "lipp": "@DEGoodmanWilson Great! Thanks for keeping me updated! Cheers\n. Maybe the subscribePresence is not automatically re-issued on \"reconnect\"?. thanks @aoberoi . started a new test with the suggested modifications. reaching back in 1 - 2 days \n\ud83d\ude03 . @aoberoi yes, sorry for responding late! resubscribing on \"ready\" works like a charm.\njs\nrtm.on('ready', () => {\n  rtm.subscribePresence(ids)\n})\nwould be nice to have this happen automatically behind the scenes as described in #517  :)\nthanks!. ",
    "codecov-io": "Current coverage is 85.60% (diff: 100%)\n\nMerging #202 into master will not change coverage\n\ndiff\n@@             master       #202   diff @@\n==========================================\n  Files            44         44          \n  Lines          1167       1167          \n  Methods         215        215          \n  Messages          0          0          \n  Branches        168        168          \n==========================================\n  Hits            999        999          \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update a1bc169...218c4a7. ## Current coverage is 85.64% (diff: 100%)\nMerging #264 into master will increase coverage by 0.03%\n\ndiff\n@@             master       #264   diff @@\n==========================================\n  Files            44         44          \n  Lines          1167       1170     +3   \n  Methods         215        217     +2   \n  Messages          0          0          \n  Branches        168        168          \n==========================================\n+ Hits            999       1002     +3   \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update 9760045...3b59d43. ## Current coverage is 85.60% (diff: 100%)\nMerging #289 into master will increase coverage by 0.02%\n\ndiff\n@@             master       #289   diff @@\n==========================================\n  Files            44         44          \n  Lines          1165       1167     +2   \n  Methods         215        215          \n  Messages          0          0          \n  Branches        168        168          \n==========================================\n+ Hits            997        999     +2   \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update f1a2b69...53b52da\n. ## Current coverage is 85.60% (diff: 100%)\nMerging #293 into master will not change coverage\n\ndiff\n@@             master       #293   diff @@\n==========================================\n  Files            44         44          \n  Lines          1167       1167          \n  Methods         215        215          \n  Messages          0          0          \n  Branches        168        168          \n==========================================\n  Hits            999        999          \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update a1bc169...2040d52. ## Current coverage is 85.64% (diff: 100%)\nMerging #295 into master will not change coverage\n\ndiff\n@@             master       #295   diff @@\n==========================================\n  Files            44         44          \n  Lines          1170       1170          \n  Methods         217        217          \n  Messages          0          0          \n  Branches        168        168          \n==========================================\n  Hits           1002       1002          \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update d61082a...07723b1. ## Current coverage is 85.77% (diff: 93.33%)\nMerging #296 into master will increase coverage by 0.13%\n\ndiff\n@@             master       #296   diff @@\n==========================================\n  Files            44         44          \n  Lines          1170       1181    +11   \n  Methods         217        217          \n  Messages          0          0          \n  Branches        168        173     +5   \n==========================================\n+ Hits           1002       1013    +11   \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update e9eb2bd...7686099. ## Current coverage is 85.65% (diff: 100%)\nMerging #297 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #297   diff @@\n==========================================\n  Files            44         44          \n  Lines          1170       1171     +1   \n  Methods         217        217          \n  Messages          0          0          \n  Branches        168        168          \n==========================================\n+ Hits           1002       1003     +1   \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update e9eb2bd...91b96b5. ## Current coverage is 85.64% (diff: 100%)\nMerging #298 into master will not change coverage\n\ndiff\n@@             master       #298   diff @@\n==========================================\n  Files            44         44          \n  Lines          1170       1170          \n  Methods         217        217          \n  Messages          0          0          \n  Branches        168        168          \n==========================================\n  Hits           1002       1002          \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update e9eb2bd...9cc57df. ## Current coverage is 85.64% (diff: 100%)\nMerging #299 into master will not change coverage\n\ndiff\n@@             master       #299   diff @@\n==========================================\n  Files            44         44          \n  Lines          1170       1170          \n  Methods         217        217          \n  Messages          0          0          \n  Branches        168        168          \n==========================================\n  Hits           1002       1002          \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update e9eb2bd...89816f1. ## Current coverage is 85.65% (diff: 100%)\nMerging #301 into master will not change coverage\n\ndiff\n@@             master       #301   diff @@\n==========================================\n  Files            44         44          \n  Lines          1171       1171          \n  Methods         217        217          \n  Messages          0          0          \n  Branches        168        168          \n==========================================\n  Hits           1003       1003          \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update 0c1d59d...824f1a6. ## Current coverage is 85.82% (diff: 88.23%)\nMerging #302 into master will increase coverage by 0.16%\n\ndiff\n@@             master       #302   diff @@\n==========================================\n  Files            44         44          \n  Lines          1171       1185    +14   \n  Methods         217        219     +2   \n  Messages          0          0          \n  Branches        168        168          \n==========================================\n+ Hits           1003       1017    +14   \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update e102f74...e5fbb44. ## Current coverage is 85.92% (diff: 100%)\nMerging #304 into master will not change coverage\n\ndiff\n@@             master       #304   diff @@\n==========================================\n  Files            44         44          \n  Lines          1194       1194          \n  Methods         219        219          \n  Messages          0          0          \n  Branches        173        173          \n==========================================\n  Hits           1026       1026          \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update d19aadb...2a40505. ## Current coverage is 85.92% (diff: 100%)\nMerging #313 into master will not change coverage\n\ndiff\n@@             master       #313   diff @@\n==========================================\n  Files            44         44          \n  Lines          1194       1194          \n  Methods         219        219          \n  Messages          0          0          \n  Branches        173        173          \n==========================================\n  Hits           1026       1026          \n  Misses          168        168          \n  Partials          0          0\n\nPowered by Codecov. Last update fdfe871...93318df. \n",
    "andrewpbrett": "Towards the bot/user account running the client is what I had in mind. \n. \ud83d\udc4d thanks @ekmartin, that works great!\n. The bot I've been working on is installed across ~100 teams right now and runs on Heroku: https://github.com/beeminder/beebot\nIt might be terribly, terribly wrong, but I created an endpoint to store the tokens in Redis and then when the app restarts, fetch all those keys and create a Slack RTM client for each one. If people have ideas or suggestions for improvement let me know! Hope it's helpful for you to see. \n. That is, in fact, exactly what was happening. Impressive debugging from afar!\n. ",
    "marceloschmidt": "Ah, I see! Is that a \"confirmation\" message for when we issue a bot join that room command, then? \n. Thank you!\n. ",
    "rickul": "Hi, I have a similar issue.\nchannel_joined is only fired when the bot joins a channel.\nchannel_join is never fired. Shouldn't this be fired when any team member joins any channel?\n. ",
    "pukhalski": "Yes. As for events, everything's ok. But apart from event you're receiving that kind of message as well. So it feels like a duplication. I decided to go on with listening to RTM_EVENTS.MESSAGE only, since in any case it sends all the events too.\n. ",
    "Starfox64": "Looks like npm did not update to 3.1.0 on my other computer, it was still running 2.1.0.\n. > It would be cool if we could do something similar with the RTM api, so you could pick which method to use to connect as a bot.\nI don't quite understand, would you rather have two distinct clients or just a single one where you can choose how to receive events?\n. ",
    "yalelikeyale": "I just got this same error minutes after installing the client and running a basic request that i had tested via api.slack.com/methods/files.list/test? \n. var WebClient = require('@slack/client').WebClient;\nvar slack = new WebClient(token);\nslack.files.list(token, file_id, function(err, info) {\n   //err is set if there was an error \n   //otherwise info will be an object that contains the result of the call\n   if (!err) {\n       console.log(info.file.url_private_download);\n   }\n});. ",
    "esses": "I will do a little bit of digging for you.\nto the PS... you may want to try the Slack Developer Hangout\n. ",
    "foiseworth": "np - many thanks for the speedy action\n. ",
    "dharness": "I believe this is an issue with DNS inside docker containers. Closing.\n. ",
    "nicutimofte": "Anyone knows how to solve this issue ?. ",
    "johnagan": "LGTM \ud83d\udc4d \n. ",
    "vamichael": "I get extremely frustrated when I see or hear a notification and then I\ncan't find out what caused the action. When you have dozens of channels and\nred dots galore, slack becomes overwhelming. I'd just like to see a log of\nall recent public events that I can jump too and see what caused the ding.\nI've looked for slack user forums, but haven't seen anything useful. I wish\nslack would create a forum. I don't like it when companies don't have one,\nbecause it isolates their customers.\nOn Thu, Jun 23, 2016 at 02:27 Everesty notifications@github.com wrote:\n\nYes, it is doable. I don't really have the time to go into how right now,\nso I apologize on that note.\nIt has to be hosted by you, Slack won't host the bot for you.\nI do, however, want to ask you why you want to do this? I don't see any\npurpose, but I may just be missing something.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/slackhq/node-slack-sdk/issues/236#issuecomment-227961261,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AF4MU_frt7pc2qZrt9--OzPr3KKqASvYks5qOidQgaJpZM4I8Iaq\n.\n. \n",
    "mwildehahn": "There is also this comment which I hope doesn't get implemented :) https://github.com/slackhq/node-slack-sdk/blob/3.3.0/lib/clients/rtm/client.js#L343\n. I've been getting a couple of these every few days and the error is usually something along the lines of \"socket hang up\". i am not sure if it always means the connection is closed though, i'll check on that.\n. when the token is no longer valid, the DISCONNECT event is emitted with the code account_inactive\n. Some of the specific errors I've seen:\n```\nError: write EPROTO 140405736589120:error:140790E5:SSL routines:ssl23_write:ssl handshake failure:../deps/openssl/openssl/ssl/s23_lib.c:177:\nat exports._errnoException (util.js:890:11)\nat WriteWrap.afterWrite (net.js:767:14)\n\n```\nError: socket hang up\n    at TLSSocket.onHangUp (_tls_wrap.js:1097:19)\n    at TLSSocket.g (events.js:273:16)\n    at emitNone (events.js:85:20)\n    at TLSSocket.emit (events.js:179:7)\n    at endReadableNT (_stream_readable.js:913:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickDomainCallback (internal/process/next_tick.js:122:9)\nError: socket hang up\n    at createHangUpError (_http_client.js:250:15)\n    at TLSSocket.socketOnEnd (_http_client.js:342:23)\n    at emitNone (events.js:85:20)\n    at TLSSocket.emit (events.js:179:7)\n    at endReadableNT (_stream_readable.js:913:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickDomainCallback (internal/process/next_tick.js:122:9)\n}\nafter reading througth the ws code, i think @l12s has a point, we're not guaranteed that the connection has been closed and it looks like most times an error is emitted, the close event is also emitted during cleanup: https://github.com/websockets/ws/blob/e591ba61022ffc7a6c0c865c8759309c2b2a35c3/lib/WebSocket.js#L712.\ni have more monitoring and logging setup around these errors so i'll keep and eye on it and see if WS_ERROR is actually resulting in a closed connection, or if it is already being reconnected because of WS_CLOSE being emitted on cleanup.\n. Sure.\nScenario 1: Connecting with a token that is no longer valid (ie. account_inactive is returned)\n- emit CLIENT_EVENTS.CONNECTING\n- start fails with account_inactive which is listed within https://github.com/slackhq/node-slack-sdk/blob/master/lib/clients/rtm/client.js#L24\n- emit CLIENT_EVENTS.UNABLE_TO_RTM_START\n- emit CLIENT_EVENTS.DISCONNECT\nthis token is invalid and something should be done (ie. deactivating the team in your system to prevent future connections)\nScenario 2: Network failure, auto-reconnect not enabled\n- emit CLIENT_EVENTS.CONNECTING\n- start fails with some error not listed in https://github.com/slackhq/node-slack-sdk/blob/master/lib/clients/rtm/client.js#L24\n- emit CLIENT_EVENTS.UNABLE_TO_RTM_START\nyou wish you would have enabled auto reconnecting\nScenario 3: Network failure, auto-reconnect enabled\n- emit CLIENT_EVENTS.CONNECTING\n- start fails with some error not listed in https://github.com/slackhq/node-slack-sdk/blob/master/lib/clients/rtm/client.js#L24\n- emit CLIENT_EVENTS.UNABLE_TO_RTM_START\n- emit CLIENT_EVENTS.ATTEMPTING_RECONNECT\n- connection attempts exceed MAX_CONNECTION_ATTEMPTS (https://github.com/slackhq/node-slack-sdk/blob/master/lib/clients/rtm/client.js#L346)\n- emit CLIENT_EVENTS.UNABLE_TO_RTM_START\nIn Scenario 2, UNABLE_TO_RTM_START is what i would listen to in order to log an error message about connection issues. In Scenario 3, UNABLE_TO_RTM_START doesn't indicate that the connection will never get established, unless I check the string error message of:\nhttps://github.com/slackhq/node-slack-sdk/blob/master/lib/clients/rtm/client.js#L349, since reconnection attempts can occur after an UNABLE_TO_RTM_START.\nIf we wanted to be backwards compatible, we could add a code that gets emitted with UNABLE_TO_RTM_START that indicates no more connection attempts will occur. Alternatively, a slightly less breaking change than raising a new error message would be to set this: https://github.com/slackhq/node-slack-sdk/blob/master/lib/clients/rtm/client.js#L349 to some constant code that could be checked against.\nDoes that help?\n. cool, i'm going to implement something similar to https://github.com/graphql/graphql-js/blob/39744381d5173795d3b245dcb5d86e78bb3638fe/src/execution/execute.js#L920, ie. isThenable, but need to play with some ways not to make this a pain in all of the message handlers\n. hm, this is going to be more annoying than i thought within the message handlers, especially ones like this: https://github.com/slackhq/node-slack-sdk/blob/master/lib/data-store/message-handlers/user.js#L14 where you could technically have a mix of promise/non promise methods on the store.\nthe cleanest thing to do IMO would be to change the signature of SlackDataStore methods to always return a promise. then implementing a store backed by a db is much simpler. but that would need to go in a 4.0 release and i'm not sure how you all feel about that.\nI implemented a redis data store here: https://github.com/lunohq/slack-redis-data-store. I mostly just want to cache the rtm start data so am going to use an adjusted MemoryDataStore that also writes to this redis store, but only for the https://github.com/slackhq/node-slack-sdk/blob/master/lib/data-store/data-store.js#L387 method.\nIn my ideal world I would setup something like:\nMultiWriteDataStore, a data store that gets init'd with an array of stores. All reads will come from the first store provided, all writes will be sent to all the stores in the array. This would let the local process read from a memory store and support propagating changes to a redis store which can be used by other processes within my app. ie:\nconst dataStore = new MultiWriteDataStore([new MemoryDataStore(), new RedisDataStore()])\n. I think the data store is the right layer to do this. It already does a great job of reacting to changes sent from the RTM client and keeping the state in sync, the only issue is it isn't built to support remote stores. I don't think it would be hard to fix, but doing so in a way that doesn't change the signature of the data store interface seems like more work than it's worth.\n. Cool, I'm happy to help with this. Are there other issues you can point me to? @l12s do you have any words of wisdom before starting out on this?\n. ",
    "CharlieHess": "So our reconnect policy is more legit after #349, but I think we've decided we're not gonna try to reconnect on just any ole error (since not all errors will result in a d/c).. Given\n\nAre we guaranteed that getting an error of the WS means that it's actually either closed or needs to be reopened?\n\nI think we're in agreement that the current behavior is \ud83d\udc4c.. It was a bit of a PITA but I split the RTM tests into separate categories (Connection logic, Retry policy, and Message handling) and added the following tests for the retry policy:\nRetry policy\n      \u2713 should call the rtm.start error callback if attempts exceed retries\n      \u2713 should disconnect if the error is unrecoverable\n      \u2713 should disconnect if autoReconnect is set to false\n      \u2713 should use max attempts and backoff options in place of a retryConfig\n      \u2713 should support retrying forever with exponential backoff\nThis fixes #245 and maintains backwards compatibility for folks who were using maxReconnectionAttempts or reconnectionBackoff.. @aoberoi after further consideration, we don't need this method. Just need to be sure to call disconnect before you reconnect.. i gotchu dawg. previously undocumented.. good call, I think we can turn them into a retry policy. Important to note that the current retry behavior is to use FIVE_RETRIES_IN_FIVE_MINUTES first, and only once that has failed do we count it as a \"connection attempt\" and apply the backoff defined here. In other words, we're already way off-base in terms of applying these variables.. so the idea is, pong messages will still keep it alive, but if we don't receive a pong message because we are being flooded with so many other legitimate messages, we'll treat those messages like a pong and not close the socket. yes, but we just added connect in #344 (we haven't done a release with it yet) \ud83d\ude1b . ",
    "buob": "js\nrtm.sendMessage('yo', dm.id, (reply) => {\n  console.log(reply);\n})\nActually, it just consoles null each time (that is, each time the bot sends the yo message).\nOn second glance, I didn't know if the promise was once the message was actually delivered, which would make a little more sense.  If so, I might just not know how to access reply_to stuff.\n. Understood.  I think BotKit actually will serve me well.\nThanks for a point in the right direction!\n. ",
    "nohir0": "ok, think I got it now.\nSlack bot with RTM API allows only deletion of its own messages, not from other members.\nTo be able to call methods like chat.delete, a token from an admin account is necessary (with custom integration) to delete other users messages from a channel.\nTo be able to call a web api method like chat.delete, a personalized token from an admin user is required.  With this, a webhook configuration within slack is not necessary...\n. Hey @bolekkerous yes I figured it out and added some additional features like an \"admin interface\" too.\nSure, why not will push my code to github and let you know - just give me until next week cause Im still on holidays.... @bolekkerous here my code for the Slack Read Only Channel with possibility to invite other member to post for admins...\nhttps://github.com/nohir0/slack-channel-readonly. great, indeed that's exactly the point... impressed from your quick root cause findings! :P\nas a github newbie I may ask:\nshall I close the issue now, since it is solved for me with your workaround - or keep it open? because it is still to verify how to handle this properly...\n. ",
    "bolekkerous": "Hey, @nohir0 - I haven't found your email, so that's why I'm commenting here.\nHave you managed to figure out the bot in the end? Would you be willing to share the source for that \"read only\" channel functionality bot? It's something that would help me since I'm looking for the same functionality and I don't know code very well yet. . @nohir0 - thanks a lot, I really appreciate it!. ",
    "aendrew": "Err, it wasn't this package in the end with that dependency; thought that was a bit weird... Never mind, my fault entirely!\n. ",
    "lrettig": "Unfortunately I no longer have access to the slack instance in question. Will revert if I have a chance to test this on another instance.. ",
    "jwulf": "Yeah, I'm getting this.\nI'm using the code from the README.md, with my modification from https://github.com/slackapi/node-slack-sdk/issues/300#issuecomment-270806014 to get the actual channel id of #general. \nHere's what I get:\nLogged in as gandelf of team Magikcraft Servers, but not yet connected to a channel\nMember of general at C3NF1QWLE\nConnected!\nnull\nUnhandled rejection Error\n    at RTMClient.handlePendingMessage (/shire/node_modules/@slack/client/lib/clients/rtm/client.js:570:25)\n    at wrapper (/shire/node_modules/lodash/lodash.js:4968:19)\n    at arrayEach (/shire/node_modules/lodash/lodash.js:537:11)\n    at forEach (/shire/node_modules/lodash/lodash.js:9359:14)\n    at RTMClient._handleMostRecentMsgReply (/shire/node_modules/@slack/client/lib/clients/rtm/client.js:563:3)\n    at RTMClient._handleWsMessageViaEventHandler (/shire/node_modules/@slack/client/lib/clients/rtm/client.js:461:12)\n    at RTMClient.handleWsMessage (/shire/node_modules/@slack/client/lib/clients/rtm/client.js:419:10)\n    at WebSocket.wrapper (/shire/node_modules/lodash/lodash.js:4968:19)\n    at emitTwo (events.js:106:13)\n    at WebSocket.emit (events.js:191:7)\n    at Receiver.ontext (/shire/node_modules/ws/lib/WebSocket.js:841:10)\n    at /shire/node_modules/ws/lib/Receiver.js:536:18\n    at Receiver.applyExtensions (/shire/node_modules/ws/lib/Receiver.js:371:5)\n    at /shire/node_modules/ws/lib/Receiver.js:508:14\n    at Receiver.flush (/shire/node_modules/ws/lib/Receiver.js:347:3)\n    at Receiver.finish (/shire/node_modules/ws/lib/Receiver.js:541:12)\nerror: message received with unknown reply_to: {\"ok\":true,\"reply_to\":1,\"ts\":\"1483703111.000007\",\"text\":\"Hello!\"}\nerror: message received with unknown reply_to: {\"ok\":false,\"reply_to\":2,\"error\":{\"msg\":\"message text is missing\",\"code\":2}}. And if I send no message, here is what I get:\nLogged in as gandelf of team Magikcraft Servers, but not yet connected to a channel\nMember of general at C3NF1QWLE\nConnected!\ninfo: message received on reconnect with no registered callback:\n{\"reply_to\":1,\"type\":\"message\",\"channel\":\"C3NF1QWLE\",\"user\":\"U3NEE6YKH\",\"text\":\"Hello!\",\"ts\":\"1483703111.000007\"}. The docs are broken.\nPut this in the README.md example:\n```\nlet channel;\nrtm.on(CLIENT_EVENTS.RTM.AUTHENTICATED,  (rtmStartData) => {\n  for (const c of rtmStartData.channels) {\n      if (c.is_member && c.name ==='general') { channel = c.id }\n  }\n  console.log(Logged in as ${rtmStartData.self.name} of team ${rtmStartData.team.name}, but not yet connected to a channel);\n});\n```\nThen the example will work with a copy and paste.. ",
    "junior-ales": "I just tried the code from README.md and I'm seeing the same Unhandled rejection Error mentioned here. The result of console.log inside the event AUTHENTICATED is the one expected but the command rtm.sendMessage('Hello!', channel); is throwing the error mentioned.. ",
    "adamk33n3r": "As mentioned in https://github.com/slackapi/node-slack-sdk/issues/300#issuecomment-266804306 you can only use channel/group/DM id's. You cannot use channel names, user names, or user id's.. ",
    "MattGoldwater": "@adamk33n3r I'm using the channel id, but its still not working.. ",
    "yousefissa": "I am also having this exact problem. Any fix?. Still getting this, not really a problem, it's just annoying.. Has anyone figured this out? It's causing problems with my sockets by sending duplicate messages.. Ooh, that sounds good! . Thanks for the reply!\nWhen I call this: rtmSession = new RtmClient(their slack access token) I want to keep track of that session in the database so I do not create a new one every time the same user connects to a socket. Is there a better way to do that?. Perfect. Thanks so much for the advice!. ",
    "joshuaquek": "so.... any updates? I keep getting the same error.\nI am using this example from the Readme.md:\n```\nvar RtmClient = require('@slack/client').RtmClient;\nvar CLIENT_EVENTS = require('@slack/client').CLIENT_EVENTS;\nvar bot_token = process.env.SLACK_BOT_TOKEN || '';\nvar rtm = new RtmClient(bot_token);\nlet channel;\n// The client will emit an RTM.AUTHENTICATED event on successful connection, with the rtm.start payload\nrtm.on(CLIENT_EVENTS.RTM.AUTHENTICATED, (rtmStartData) => {\n  for (const c of rtmStartData.channels) {\n      if (c.is_member && c.name ==='general') { channel = c.id }\n  }\n  console.log(Logged in as ${rtmStartData.self.name} of team ${rtmStartData.team.name}, but not yet connected to a channel);\n});\n// you need to wait for the client to fully connect before you can send messages\nrtm.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, function () {\n  rtm.sendMessage(\"Hello!\", channel);\n});\nrtm.start();\n```\nMy bot works fine.\nHowever, I get this error in my terminal:\nerror: message received with unknown reply_to: {\"ok\":true,\"reply_to\":1,\"ts\":\"1499931980.242327\",\"text\":\"Hello!\"}\nHow can we fix this? Even though its not affecting my bot, it is a bit worrying to be seeing this error.. ",
    "joshmanders": "Getting it also.\ninfo: message received on reconnect with no registered callback:\n{\"reply_to\":1,\"type\":\"message\",\"channel\":\"C6MMF4ZRB\",\"user\":\"U6T6C7C31\",\"text\":\"Hello Josh\",\"ts\":\"1503432803.000112\"}. ",
    "chenfanggm": "Not really get what to do now? I can reproduce this too.. ",
    "thbar": "Is this issue still happening? I'm looking at node-slack-sdk to implement a bot with a very large number of connections, so any feedback is most welcome :smile: @mvaragnat are you still on 2.0.X? Thanks!\n. Also maybe worth renaming the issue from \"Memory leak on RTM client automatic reconnects\" to \"Memory leak on RTM\", if it is confirmed that the leak occurs even without automatic reconnect?\n. ",
    "acrodrig": "I am also being affected by this. @mattlo have you discovered any work arounds?\n. ",
    "twellspring": "Here is debug\n0 info it worked if it ends with ok\n1 verbose cli [ '/usr/bin/nodejs',\n1 verbose cli   '/usr/bin/npm',\n1 verbose cli   'install',\n1 verbose cli   '@slack/client',\n1 verbose cli   '--save' ]\n2 info using npm@3.8.6\n3 info using node@v5.12.0\n4 silly loadCurrentTree Starting\n5 silly install loadCurrentTree\n6 silly install readLocalPackageData\n7 silly fetchPackageMetaData @slack/client\n8 silly fetchNamedPackageData @slack/client\n9 silly mapToRegistry name @slack/client\n10 silly mapToRegistry scope (from package name) @slack\n11 verbose mapToRegistry no registry URL found in name for scope @slack\n12 silly mapToRegistry using default registry\n13 silly mapToRegistry registry http://npm-ord.riskalyze.com/\n14 silly mapToRegistry data Result {\n14 silly mapToRegistry   raw: '@slack/client',\n14 silly mapToRegistry   scope: '@slack',\n14 silly mapToRegistry   name: '@slack/client',\n14 silly mapToRegistry   rawSpec: '',\n14 silly mapToRegistry   spec: 'latest',\n14 silly mapToRegistry   type: 'tag' }\n15 silly mapToRegistry uri http://npm-ord.riskalyze.com/@slack%2fclient\n16 verbose request uri http://npm-ord.riskalyze.com/@slack%2fclient\n17 verbose request no auth needed\n18 info attempt registry request try #1 at 4:21:58 PM\n19 verbose request id b69706b50ce0abd0\n20 http request GET http://npm-ord.riskalyze.com/@slack%2fclient\n21 http 403 http://npm-ord.riskalyze.com/@slack%2fclient\n22 verbose headers { 'x-powered-by': 'Sinopia/1.4.0',\n22 verbose headers   'content-type': 'application/json; charset=utf-8',\n22 verbose headers   'content-length': '84',\n22 verbose headers   etag: 'W/\"54-d795a792\"',\n22 verbose headers   vary: 'Accept-Encoding',\n22 verbose headers   'x-status-cat': 'http://flic.kr/p/aV6jFK',\n22 verbose headers   date: 'Mon, 25 Jul 2016 16:21:58 GMT',\n22 verbose headers   connection: 'keep-alive' }\n23 silly get cb [ 403,\n23 silly get   { 'x-powered-by': 'Sinopia/1.4.0',\n23 silly get     'content-type': 'application/json; charset=utf-8',\n23 silly get     'content-length': '84',\n23 silly get     etag: 'W/\"54-d795a792\"',\n23 silly get     vary: 'Accept-Encoding',\n23 silly get     'x-status-cat': 'http://flic.kr/p/aV6jFK',\n23 silly get     date: 'Mon, 25 Jul 2016 16:21:58 GMT',\n23 silly get     connection: 'keep-alive' } ]\n24 silly fetchPackageMetaData Error: unregistered users are not allowed to access package @slack/client : @slack/client\n24 silly fetchPackageMetaData     at makeError (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)\n24 silly fetchPackageMetaData     at CachingRegistryClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)\n24 silly fetchPackageMetaData     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)\n24 silly fetchPackageMetaData     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:199:22)\n24 silly fetchPackageMetaData     at emitTwo (events.js:100:13)\n24 silly fetchPackageMetaData     at Request.emit (events.js:185:7)\n24 silly fetchPackageMetaData     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1036:10)\n24 silly fetchPackageMetaData     at emitOne (events.js:95:20)\n24 silly fetchPackageMetaData     at Request.emit (events.js:182:7)\n24 silly fetchPackageMetaData     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:963:12)\n24 silly fetchPackageMetaData  error for @slack/client { [Error: unregistered users are not allowed to access package @slack/client : @slack/client] pkgid: '@slack/client', statusCode: 403, code: 'E403' }\n25 silly rollbackFailedOptional Starting\n26 silly rollbackFailedOptional Finishing\n27 silly runTopLevelLifecycles Starting\n28 silly runTopLevelLifecycles Finishing\n29 silly install printInstalled\n30 verbose stack Error: unregistered users are not allowed to access package @slack/client : @slack/client\n30 verbose stack     at makeError (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)\n30 verbose stack     at CachingRegistryClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)\n30 verbose stack     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)\n30 verbose stack     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:199:22)\n30 verbose stack     at emitTwo (events.js:100:13)\n30 verbose stack     at Request.emit (events.js:185:7)\n30 verbose stack     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1036:10)\n30 verbose stack     at emitOne (events.js:95:20)\n30 verbose stack     at Request.emit (events.js:182:7)\n30 verbose stack     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:963:12)\n31 verbose statusCode 403\n32 verbose pkgid @slack/client\n33 verbose cwd /home/web/node/chatops.80\n34 error Linux 3.13.0-79-generic\n35 error argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\" \"@slack/client\" \"--save\"\n36 error node v5.12.0\n37 error npm  v3.8.6\n38 error code E403\n39 error unregistered users are not allowed to access package @slack/client : @slack/client\n. Just tried it again and it is working now.\n. Not a pain.  I thought I had reported this but could not find the case so I figured I had not submitted it and closed the tab by mistake ... so I re-submitted. \n. ",
    "elliottcarlson": "Since the response does not address the ticket question, and this is the first entry in google that covers private channels, I want to add that Slack private channels are not handled internally as channels but as groups. If you are looking for a listing of private channels, you would find them in slack.datastore.groups; or can retrieve the channel object via getGroupByName()/getGroupById().\nSome caveats to be noted, is that while proper channels can accept the name with or without a leading # sign, since it gets stripped out within getChannelByName(), this is not the case with getGroupByName() - a group does not include a leading #. If you are attempting to allow passing in either a valid channel name, or a private channel name at the same time, you should pre-sanitize the channel name, and then call them after each other to find a proper channel object; i.e.\nfunction getChannelEntity(channel) {\n    channel = channel.replace(/^#/, '');\n    return slack.dataStore.getChannelByName(channel) || slack.dataStore.getGroupByName(channel);\n}. ",
    "LaurentVB": "related ? https://github.com/johnagan/express-slack. Hello,\nCame here to open this issue, found that you already thought about adding it.\nIt seems a bit weird to use the WebClient everywhere in my code, and just sometimes having to\n```\nconst fetch = require('node-fetch');\nasync function respond(responseUrl, message) {\n  return fetch(responseUrl, {\n    method: 'POST',\n    body: JSON.stringify(message)\n  });\n}\n...\n```\nJust to get the ball rolling, what about a static .respond(response_url, message) method on the WebClient?\n```\nconst {WebClient} = require('@slack/client);\nWebClient.respond(response_url, {text: 'This is my response'});\n```\nCheers,\nLaurent. Hello @aoberoi , thanks for your reply.\nOn a code reuse perspective, it totally makes sense. But as you said the two are very different conceptually. \nWouldn't it be more correct to have them both depend and build upon a common UrlInvoker or whatever you would name it?. Hey there @aoberoi \nThanks for giving it a try. Indeed, the results you get are perfectly reasonable. \nI haven't been able to investigate any further, I worked around the issue by downgrading to v3 at the moment. I'll let you know if I can build a reproducible test case when I have time to tackle this.\nBest regards\nLaurent. ",
    "christophehurpeau": "@DEGoodmanWilson rebased. thanks :)\n. Hello @DEGoodmanWilson ! You said next week 12 days ago ?. @DEGoodmanWilson rebased. @DEGoodmanWilson rebased. ",
    "denouche": "Any news about the release of this feature?\nThanks in advance!\n. Please this time don't postpone this feature of 1 more week. I really need this feature. I can rebase the branch for you if you want.. ",
    "StefanoMagrassi": "@Everesty ooooook  :wink:\nThe version number misled me \ud83d\udc4d \n. ",
    "sneakersgames": "Yeah, well, maybe it would be time to update npm since following the docs/github leads to\nTypeError: IncomingWebhooks is not a function\n. ",
    "alperg": "@DEGoodmanWilson, any update for the fix?\n. ",
    "danielmapar": "any news on this?\n. thanks a lot! :)\n. ",
    "liuweichu": "@DEGoodmanWilson Hi, here is my patch. Feel free to use it \ud83d\ude3a\nIf you insist however I can make a PR. (Just a little bit annoying to sign CLA)\n``` diff\nnode-slack-sdk (master) $ git diff\ndiff --git a/lib/clients/transports/ws.js b/lib/clients/transports/ws.js\nindex a62a622..f50f657 100644\n--- a/lib/clients/transports/ws.js\n+++ b/lib/clients/transports/ws.js\n@@ -16,9 +16,11 @@ var WebSocket = require('ws');\n var wsTransport = function wsTransport(socketUrl, opts) {\n   var wsTransportOpts = opts || {};\n   var wsOpts = {};\n+  var proxyURL = wsTransportOpts.proxyURL || process.env.https_proxy;\n\nif (wsTransportOpts.proxyURL) {\nwsOpts.agent = new HttpsProxyAgent(wsTransportOpts.proxyUrl);\nif (proxyURL) {\nconsole.log(\"Using https proxy: \" + proxyURL)\nwsOpts.agent = new HttpsProxyAgent(proxyURL);\n   }\n\nreturn new WebSocket(socketUrl, wsOpts);\n``\n. PR created. Please kindly review :-D\n. Hi, I resubmitted the CLA again.\nIt's been a while so I forgot why CLA was not successfully submitted.\n. @DEGoodmanWilson Thanks for lintering\n- Rebased on current master\n-\"->'-;` added\n. ",
    "arbind": "Oh yea - that would prolly help!\nWill integrate the latest in and keep an eye on it.\nThanks much.\n. ",
    "BarryCarlyon": "I did have a PR that had like 5 commits in it, but then I collpased them down into one to deal with the \"Atomic Commits requirement\" hopefully this is correct?\n. This must of changed recently as the opposite was the case\u2026 @thiren \nThen\n\nicon_url did override icon_emoji\n\nNow\n\nemoji to use as the icon for this message. Overrides icon_url. Must be used in conjunction with as_user set to false, otherwise ignored.\n\nThis \"as_user\" stuff is new also\nI will revise the PR\u2026\nHOWEVER: you have linked to the \"chat.postMessage\" does the same apply to https://api.slack.com/incoming-webhooks as this is a PR against incoming webhooks, not against RTM itself.\nAs such message-attachaments apply https://api.slack.com/docs/message-attachments and I've used the observed behaviour as the documented behaviour is somewhat lacking from the docs\n. Sure @DEGoodmanWilson will make some adjustements over the weekend\n. \nHave confirmed that icon_emoji always wins with a webbook.\n. in fact i see that PR #280 has been accepted over mine so my PR does nothing useful over the PR already accepted and merged.\n. ",
    "justinsoliz": "+1 to see this PR merged\n. ",
    "thiren": "According to the api documentation the icon_emoji argument overrides the icon_url argument when present. I think that this PR should be updated to mirror the api more closely before being merged. https://api.slack.com/methods/chat.postMessage\n. ",
    "Roach": "Builds successfully: https://travis-ci.org/slackapi/node-slack-sdk\nMerging \ud83c\udf89 \n. IMO we should add that section instead of removing the bad link \ud83e\udd14 \nExample content: http://slackapi.github.io/python-slackclient/auth.html#handling-tokens-and-other-sensitive-data\n. @omidkrad not on npm, but we posted an API spec file over here: https://github.com/slackapi/slack-api-specs/blob/master/web-api/slack_web_openapi_v2.json\n. @mydigitalself thanks for calling this out, I've merged an updated version of the docs. Please let us know if you run into any more issues \ud83d\udc4d . @aoberoi I may have mixed up this request and https://github.com/slackapi/node-slack-sdk/pull/319. @mismith thanks for adding this \ud83d\udc4d \nWould you mind signing the CLA (linked in the comments above) so we can get this merged?. @mismith ah, I see the problem. You need to add that email to your github account: https://github.com/settings/emails\nIf you look at the commit log, you can see that it's associated with the email and not your github account: https://github.com/slackapi/node-slack-sdk/pull/380/commits/d4b7438bf997f15f4cadbd832b3b763b91c574a0. @shawnpetros do you get the same result if you pass true as a string full: 'true' instead of a bool?. I vote for on_behalf_of \ud83d\ude0e . delete?. . Should we add a note to the docs for this?. Fancy spelling \ud83d\udc85\ud83c\udffc. Could you check for is not an object rather than is x, or x, or x?. Should we make these a little less vague so they make more sense in the context of all the other debug logging an app will be doing?. Should be accessTokenExpiresIn, it's a countdown TTL, not an absolute timestamp of the time of expiration.\nhttps://tools.ietf.org/html/rfc6749#section-4.2.2\n\nexpires_in\n         RECOMMENDED.  The lifetime in seconds of the access token.  For\n         example, the value \"3600\" denotes that the access token will\n         expire in one hour from the time the response was generated.\n         If omitted, the authorization server SHOULD provide the\n         expiration time via other means or document the default value.\n. Ah. I missed that. Carry on!. \n",
    "e-founders": "Looks like the makeAPICall is actually prefixed by an underscore so use web._makeAPICall :). Works like a charm, thanks @DEGoodmanWilson !. ",
    "markshust": "@DEGoodmanWilson sorry about that -- just submitted the CLA!\n. ",
    "dempfi": "@DEGoodmanWilson thank you for pointing out to right docs\n. ",
    "dsimmons": "As a follow-up, I found the following mention in the docs for chat.postMessage specifically:\n\nThis table lists the expected errors that this method could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the ok params in the response.\n\nI admittedly must have missed that originally. Accordingly, per my above question, I'm assuming that it is intended from a design perspective. At the very least, I think it'd be worth highlighting in the postMessage code snippet I linked above -- at face value, it looks like the fact that err isn't populated is itself an indication that the post was successful.\nAs far as changes outside of that, I'm still personally of the opinion that it could be made slightly more intuitive!. Great! I sincerely appreciate the quick and diplomatic response.\nAlso, thanks for making the note about the promise point -- ironically, I'd come across that in the documentation shortly after creating this issue \ud83d\ude04 \nFWIW, just in terms of my personal opinion as an API consumer, major \ud83d\udc4d  \ud83d\udc4d  \ud83d\udc4d  for exposing both callback and promise-based functions. The latter helps me eliminate unnecessary wrapper code, but I fully realize that there's a nontrivial sector of the JS community that still uses the former exclusively. So having it work as it does, it's definitely the best of both worlds! \ud83d\udcb0 . FWIW I haven't tried running the code, but just quickly eyeballing the diff, that's exactly what I had in mind / had proposed above! Looks to unify the error handling with the callback approach.\nI've since switched to using the promise interface (once I realized that was as thing), and like mentioned above, it doesn't appear to have said issue.\nI do appreciate the swift response and you guys addressing this so quickly! \ud83c\udf89 \ud83d\udc4d . ",
    "benjie": "Looks like it should solve it; I also like the improvements to error handling, the previous behaviour was not idiomatic. Thanks! \ud83d\udc4d . Headers should be accessed in a case-insensitive way. If this is a node http.IncomingMessage then the headers will have been lowercased:\n\nKey-value pairs of header names and values. Header names are lower-cased. \n-- https://nodejs.org/api/http.html#http_message_headers. \n",
    "choujar": "Hi folks, any update on this? I'm struggling with the current docs...\nfor example, according to this page, I should be fine with this:\nslackWeb.channels.create(name, {validate: true}, function(err, res) {\n    if(err) return console.error(error);                        \n    console.log(res);                               \n});\nBut this doesn't work.\nI get the following error: \nTypeError: apiCb is not a function\n. ",
    "mmmulani": "ahh cool, docs problem then.\nhow do you go about messaging a private user then? is there a way to DM them without having to check if you already have a conversation with them?. ",
    "saifalfalah": "So if I understand this correctly, in order to send a DM to a user, I need to use the im.open web API endpoint. But a custom bot user (internal integration) which does not have the authorization token required to use the web API endpoint, how does it send a DM? Or in order to send a DM, I have to attach the bot user to a Slack app and do the OAuth dance? Or is xoxb- token enough for using the web API?. So, I got around this issue by using the Web API im.open to get the DM ID and then use the RTM API to send a DM to a user. Apparently, it's possible to use the Web API with a custom bot user's auth token.. ",
    "BerndErnst": "I want to reopen this case.\nI've spent days to find this information.\nIt's still not clear how limited the RTM API is from the regular documentation.. ",
    "palmerabollo": "Same here. The module is broken now.. It works now. Thank you @DEGoodmanWilson.. ",
    "lazopm": "Hi! Thank you for the quick reply, I hope you are enjoying the holidays!\nI saw some weird behavior from our bot that would be explained by requests going through but not triggering the callback. There was also some weird stuff going on with slack on Thurday with reactions and editing being broken, so it might have been related to that.\nI will do some testing on Tuesday when I'm back from the holidays.\nI think the existing retry logic works great for most projects, but mine would benefit from being able to turn it off.\nThe slack bot I'm working on posts the progress of our Jenkins builds to several channels. And updates the messages as the builds' state changes.\nOften there are several jobs building simultaneously, and that is when I hit the API limits.\nThe problem with not being able to cancel the retry is that X seconds after the API call failed that message probably contains stale data and I would rather cancel that API call and make new one with fresh data.\nIt's really not that big of a deal, but I would like to use the 60 calls per minute as efficiently as possible.. ",
    "linuxfreakus": "I too am interested in how to make this happen.  I've tried wrapping the Buffer as a Readable stream... no dice.  It works if I write my buffer to a temp file and then use fs.createReadStream but that is really messy, slow, and not fun.  I just want to send my data that is already available in memory without having to jump through hoops.. ",
    "eelkeh": "Small correction: Authentication should be Authorization . ",
    "GGYaX": "Thanks, I will check.. ",
    "jfyzhao": "That's awesome to hear! Would it be possible to put the events module in the npm registry so we can start development with it?\nThanks for all the hard work!. ",
    "jasonTheNorris": "Hello @Js41637!\nYou are correct that sendMessage does not support additional options. sendMessage is intended to be a dead simple wrapper for the most common use case of send.\nBut there is still hope! You can use send to reply to a thread via the RTM. Porting your current code over to something like this should take care of business:\n```js\nvar RTM_EVENTS = require('@slack/client').RTM_EVENTS;\nclient.send({\n    text:      text,\n    channel:   channelId,\n    thread_ts: thread_ts,\n    type:      RTM_EVENTS.MESSAGE,\n});\n```\nGive that a try and let us know if you run in to any more issues!. ",
    "pakastin": "I can't get subtype: 'reply_broadcast' to work \ud83d\ude1e. ",
    "bastienrobert": "Any update about replying to threads from RTM api?. @aoberoi: I was sending messages using @slack/client like:\nrtm\n  .sendMessage(('Poke', conversationId))\n  .then(res => {\n    console.log('Message sent: ', res)\n  })\n  .catch(console.error)\nBut in this example you're editing the sendMessage method in the RTMClient instance, didn't you?\nSo it should look like:\nRTMClient.prototype.sendMessage = function sendMessage(text, channelId, thread_ts, optCb) {\n  return this.send({\n    text: text,\n    channel: channelId,\n    thread_ts: thread_ts,\n    type: RTM_EVENTS.MESSAGE\n  }, optCb)\n}\nNot sure I'm understanding all of this very well \ud83d\ude15. ",
    "nistvan86": "Is there a branch where we can follow the development or contribute?. I wonder if two weeks qualify as \"soon\"? :D\nJokes apart, can we get some update on this? :). ",
    "bmajz": "Not yet, but will be publishing an initial PR soon. @nistvan86 thanks for the reminder. Will get the PR up today.. https://github.com/slackapi/node-slack-sdk/pull/329. hey @ashubham, I think it would be incumbent to then maintain those definitions and it seems like a pain to do that in two places for what should hopefully be a quick review. I also need to do an update to these defs, hopefully later this week to clean them up some more. Yes, I do need to push updates since there were some broken scenarios in there. Unfortunately, the team has been short handed recently and we haven't been able to circle back quickly. My sincere apologies.\nHowever, I do agree with @aoberoi in that bad TS defn's can be worse than none at all. Ideally there isn't an extra translation step and the code matches the types. As a third party writing type definitions, I almost think it would've been less work to convert the code natively. I would enthusiastically support the conversion given the rest of the great work Slack is doing there:\nhttps://slack.engineering/typescript-at-slack-a81307fa288d. Not sure why this caused a test to fail, should pass on retry by the looks of it. How does everyone feel about pushing the types into DefinitelyTyped/@types in the meantime?. I'll pull this change into my branch since I think that's where people will get it in the future. Will also look into what it takes to get this into DefinitelyTyped. I'll look into it ASAP\nSent from my phone\n\nOn Oct 3, 2017, at 3:52 PM, Ankur Oberoi notifications@github.com wrote:\n@bmajz what do you think about contributing these typings to the @types npm organization? the guide to doing this is here: http://definitelytyped.org/guides/contributing.html. it seems like the scoped packages issue has been resolved, and this would have to be published as @types/slack__client.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I saw something that looks related on 4.2.2. This caused an unhandled exception that took down the whole worker unfortunately :(\n\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      | Error: no client found\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at KeepAlive.attemptAcknowledgePong (/home/node_modules/@slack/client/dist/KeepAlive.js:92:54)\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at RTMClient.emit (/home/node_modules/eventemitter3/index.js:182:35)\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at RTMClient.onWebsocketMessage (/home/node_modules/@slack/client/dist/RTMClient.js:463:14)\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at WebSocket.onMessage (/home/node_modules/ws/lib/event-target.js:120:16)\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at emitOne (events.js:96:13)\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at WebSocket.emit (events.js:188:7)\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at Receiver._receiver.onmessage (/home/node_modules/ws/lib/websocket.js:137:47)\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at Receiver.dataMessage (/home/node_modules/ws/lib/receiver.js:409:14)\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at Receiver.getData (/home/node_modules/ws/lib/receiver.js:347:12)\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at Receiver.startLoop (/home/node_modules/ws/lib/receiver.js:143:16)\nJun 04 07:25:28 a1c9e0384b32 ecs-rtmworker-19-rtmworker-c8f2d1adf5f7faeff301: 14:25:28 0|rtm      |     at Receiver.add (/home/node_modules/ws/lib/receiver.js:117:10). I have numerous repros of the above and I occasionally see them prefaced with something like this:\n[ERROR] @slack/client:RTMClient A websocket error occurred: read ECONNRESET. Yeah \u2014 just wanted to point out the version number. In my case this is not a machine that\u2019s going down \u2014 happening in an always on cloud environment.. Sweet \u2014 let me know when we\u2019re good to retest! For now we jumped back to v3. Just to return to the original topic at hand. I just got the following KeepAlive errors on 4.2.2\n```\nJun 04 22:14:01 d3ace470e8cc ecs-rtmworker-19-rtmworker-f482e18cdabd8ed69f01: 05:14:01 1|rtm      | [ERROR] @slack/client:RTMClient failed to send message on websocket: WebSocket is not open: readyState 2 (CLOSING)\nJun 04 22:14:01 d3ace470e8cc ecs-rtmworker-19-rtmworker-f482e18cdabd8ed69f01: 05:14:01 1|rtm      | [ERROR] @slack/client:KeepAlive Unhandled error: Failed to send message on websocket: WebSocket is not open: readyState 2 (CLOSING). Please report to @slack/client package maintainers.\n```. Is there a guard we can place around our disconnect calls to prevent this from happening?. One follow up:\nrtm.autoReconnect is marked private. Should it perhaps not be if callers can be expected to use it?. Indeed it does!. ",
    "philcockfield": "+1 (+many!!).  Yes please to TypeScript support for this!!!!. +1 Please could we have this merged!!!. I'm with you both on this.  Massive and emphatic support for converting directly to .ts.  After reading the \"TypeScript at Slack\" medium post a while back (that you also referenced @bmajz) I figured the SDK would be part of all that.  \nhttps://slack.engineering/typescript-at-slack-a81307fa288d\nTypeScript really shines for SDK's and third party libraries, so given the internal move Slack is making toward TypeScript, having the outward facing SDK with Typescript generated .d.ts files makes a ton of sense.  \nViva la Slack.\n. This sounds smart. Super glad to hear your re-authoring in typescript itself. Solid! \ud83d\udcaa. ",
    "omidkrad": "Is any of these type definitions published on npm? Thanks!. @Roach thanks, but that only documents the REST API. I suppose the reason @slack/client npm module exists is to abstract away the REST API and give developers a JavaScript API instead. TypeScript definitions would document the JS API.. ",
    "codecov[bot]": "Codecov Report\n\nMerging #318 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #318   +/-\n=======================================\n  Coverage   85.92%   85.92%         \n=======================================\n  Files          44       44         \n  Lines        1194     1194         \n  Branches      173      173         \n=======================================\n  Hits         1026     1026         \n  Misses        168      168\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7cc5e87...bb52343. Read the comment docs.. # Codecov Report\nMerging #319 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #319   +/-\n=======================================\n  Coverage   85.92%   85.92%         \n=======================================\n  Files          44       44         \n  Lines        1194     1194         \n  Branches      173      173         \n=======================================\n  Hits         1026     1026         \n  Misses        168      168\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ac22aab...d1b5616. Read the comment docs.. # Codecov Report\nMerging #322 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #322   +/-\n=======================================\n  Coverage   85.92%   85.92%         \n=======================================\n  Files          44       44         \n  Lines        1194     1194         \n  Branches      173      173         \n=======================================\n  Hits         1026     1026         \n  Misses        168      168\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d784c2...3a9cea4. Read the comment docs.. # Codecov Report\nMerging #326 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #326   +/-\n=======================================\n  Coverage   88.97%   88.97%         \n=======================================\n  Files          44       44         \n  Lines        1234     1234         \n  Branches      183      183         \n=======================================\n  Hits         1098     1098         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e1014fb...f57ddc2. Read the comment docs.\n. # Codecov Report\nMerging #327 into master will decrease coverage by 0.2%.\nThe diff coverage is 25%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #327      +/-\n==========================================\n- Coverage   85.92%   85.72%   -0.21%   \n==========================================\n  Files          44       44            \n  Lines        1194     1198       +4   \n  Branches      173      175       +2   \n==========================================\n+ Hits         1026     1027       +1   \n- Misses        168      171       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/helpers.js | 92.3% <25%> (-7.7%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9990892...c140ae6. Read the comment docs.. # Codecov Report\nMerging #328 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #328   +/-\n=======================================\n  Coverage   85.72%   85.72%         \n=======================================\n  Files          44       44         \n  Lines        1198     1198         \n  Branches      175      175         \n=======================================\n  Hits         1027     1027         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fb4bc6f...3ef3ea3. Read the comment docs.. # Codecov Report\nMerging #329 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #329   +/-\n=======================================\n  Coverage   88.97%   88.97%         \n=======================================\n  Files          44       44         \n  Lines        1234     1234         \n  Branches      183      183         \n=======================================\n  Hits         1098     1098         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cecf343...7efd3d8. Read the comment docs.\n. # Codecov Report\nMerging #332 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #332   +/-\n=======================================\n  Coverage   85.72%   85.72%         \n=======================================\n  Files          44       44         \n  Lines        1198     1198         \n  Branches      175      176    +1   \n=======================================\n  Hits         1027     1027         \n  Misses        171      171\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/data-store/memory-data-store.js | 80.35% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c6d711d...993e5a3. Read the comment docs.. # Codecov Report\nMerging #336 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #336   +/-\n=======================================\n  Coverage   85.72%   85.72%         \n=======================================\n  Files          44       44         \n  Lines        1198     1198         \n  Branches      176      176         \n=======================================\n  Hits         1027     1027         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 652e68b...07267cf. Read the comment docs.\n. # Codecov Report\nMerging #337 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #337   +/-\n=======================================\n  Coverage   85.72%   85.72%         \n=======================================\n  Files          44       44         \n  Lines        1198     1198         \n  Branches      176      176         \n=======================================\n  Hits         1027     1027         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 652e68b...b555c33. Read the comment docs.\n. # Codecov Report\nMerging #339 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #339   +/-\n=======================================\n  Coverage   85.72%   85.72%         \n=======================================\n  Files          44       44         \n  Lines        1198     1198         \n  Branches      176      176         \n=======================================\n  Hits         1027     1027         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 652e68b...c7b825d. Read the comment docs.\n. # Codecov Report\nMerging #342 into master will increase coverage by 0.28%.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #342      +/-\n========================================\n+ Coverage   85.72%    86%   +0.28%   \n========================================\n  Files          44     44            \n  Lines        1198   1208      +10   \n  Branches      176    179       +3   \n========================================\n+ Hits         1027   1039      +12   \n+ Misses        171    169       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/incoming-webhook/client.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/data-store/data-store.js | 94.17% <0%> (+0.23%) | :arrow_up: |\n| lib/clients/rtm/client.js | 72.79% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bf23b38...9a5bcc8. Read the comment docs.\n. # Codecov Report\nMerging #344 into master will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #344      +/-\n=========================================\n+ Coverage   85.72%   85.8%   +0.08%   \n=========================================\n  Files          44      44            \n  Lines        1198    1205       +7   \n  Branches      176     178       +2   \n=========================================\n+ Hits         1027    1034       +7   \n  Misses        171     171\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/data-store/data-store.js | 94.17% <100%> (+0.23%) | :arrow_up: |\n| lib/clients/rtm/client.js | 71.85% <100%> (+0.31%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bf23b38...b42eb0a. Read the comment docs.\n. # Codecov Report\nMerging #346 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #346   +/-\n=======================================\n  Coverage   85.72%   85.72%         \n=======================================\n  Files          44       44         \n  Lines        1198     1198         \n  Branches      176      176         \n=======================================\n  Hits         1027     1027         \n  Misses        171      171\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/client.js | 89.28% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bf23b38...5728892. Read the comment docs.\n. # Codecov Report\nMerging #347 into master will increase coverage by 0.18%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #347      +/-\n==========================================\n+ Coverage    85.8%   85.99%   +0.18%   \n==========================================\n  Files          44       44            \n  Lines        1205     1207       +2   \n  Branches      178      178            \n==========================================\n+ Hits         1034     1038       +4   \n+ Misses        171      169       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/rtm/client.js | 72.79% <100%> (+0.94%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6f46169...3968f9c. Read the comment docs.\n. # Codecov Report\nMerging #349 into master will increase coverage by 1.77%.\nThe diff coverage is 96.87%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #349      +/-\n==========================================\n+ Coverage   85.99%   87.77%   +1.77%   \n==========================================\n  Files          44       44            \n  Lines        1207     1219      +12   \n  Branches      178      177       -1   \n==========================================\n+ Hits         1038     1070      +32   \n+ Misses        169      149      -20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/client.js | 89.83% <100%> (+0.54%) | :arrow_up: |\n| lib/clients/retry-policies.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/clients/rtm/client.js | 80.36% <95.45%> (+7.56%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c42de6e...2896727. Read the comment docs.\n. # Codecov Report\nMerging #349 into master will increase coverage by 2.96%.\nThe diff coverage is 98.3%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #349      +/-\n==========================================\n+ Coverage   85.99%   88.96%   +2.96%   \n==========================================\n  Files          44       44            \n  Lines        1207     1232      +25   \n  Branches      178      183       +5   \n==========================================\n+ Hits         1038     1096      +58   \n+ Misses        169      136      -33\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/client.js | 89.83% <100%> (+0.54%) | :arrow_up: |\n| lib/clients/transports/call-transport.js | 93.65% <100%> (+6.34%) | :arrow_up: |\n| lib/clients/retry-policies.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/clients/helpers.js | 92.3% <100%> (\u00f8) | :arrow_up: |\n| lib/clients/rtm/client.js | 84.04% <97.43%> (+11.24%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c42de6e...cc450f6. Read the comment docs.\n. # Codecov Report\nMerging #350 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #350      +/-\n==========================================\n+ Coverage   88.96%   88.97%   +0.01%   \n==========================================\n  Files          44       44            \n  Lines        1232     1234       +2   \n  Branches      183      183            \n==========================================\n+ Hits         1096     1098       +2   \n  Misses        136      136\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/rtm/client.js | 84.15% <100%> (+0.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33b8776...5abc740. Read the comment docs.\n. # Codecov Report\nMerging #352 into dev-v4 will increase coverage by 10.79%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndev-v4     #352       +/-\n===========================================\n+ Coverage   88.97%   99.77%   +10.79%   \n===========================================\n  Files          44       24       -20   \n  Lines        1234      900      -334   \n  Branches      183        0      -183   \n===========================================\n- Hits         1098      898      -200   \n+ Misses        136        2      -134\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/helpers.js | 100% <0%> (\u00f8) | :arrow_up: |\n| lib/models/file.js | | |\n| lib/data-store/message-handlers/helpers.js | | |\n| lib/data-store/message-handlers/user.js | | |\n| lib/clients/transports/request.js | | |\n| lib/models/mpdm.js | | |\n| lib/models/index.js | | |\n| lib/data-store/message-handlers/message.js | | |\n| lib/clients/errors.js | | |\n| lib/models/user.js | | |\n| ... and 57 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e1014fb...bd18ca2. Read the comment docs.\n. # Codecov Report\nMerging #356 into master will increase coverage by 2.96%.\nThe diff coverage is 95.94%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #356      +/-\n==========================================\n+ Coverage   85.99%   88.96%   +2.96%   \n==========================================\n  Files          44       44            \n  Lines        1207     1241      +34   \n  Branches      178      184       +6   \n==========================================\n+ Hits         1038     1104      +66   \n+ Misses        169      137      -32\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/retry-policies.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/clients/transports/call-transport.js | 93.65% <100%> (+6.34%) | :arrow_up: |\n| lib/clients/client.js | 90.62% <100%> (+1.33%) | :arrow_up: |\n| lib/clients/helpers.js | 92.3% <100%> (\u00f8) | :arrow_up: |\n| lib/clients/rtm/client.js | 83.91% <93.87%> (+11.12%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c42de6e...1d6bb9a. Read the comment docs.\n. # Codecov Report\nMerging #357 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #357   +/-\n=======================================\n  Coverage   88.97%   88.97%         \n=======================================\n  Files          44       44         \n  Lines        1234     1234         \n  Branches      183      183         \n=======================================\n  Hits         1098     1098         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 945a79e...7c19274. Read the comment docs.\n. # Codecov Report\nMerging #358 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #358   +/-\n=======================================\n  Coverage   88.97%   88.97%         \n=======================================\n  Files          44       44         \n  Lines        1234     1234         \n  Branches      183      183         \n=======================================\n  Hits         1098     1098         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b5cebec...5455b22. Read the comment docs.\n. # Codecov Report\nMerging #361 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #361   +/-\n=======================================\n  Coverage   88.97%   88.97%         \n=======================================\n  Files          44       44         \n  Lines        1234     1234         \n  Branches      183      183         \n=======================================\n  Hits         1098     1098         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cecf343...e9bbe48. Read the comment docs.\n. # Codecov Report\nMerging #362 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #362   +/-\n=======================================\n  Coverage   88.97%   88.97%         \n=======================================\n  Files          44       44         \n  Lines        1234     1234         \n  Branches      183      183         \n=======================================\n  Hits         1098     1098         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e1014fb...be65a58. Read the comment docs.\n. # Codecov Report\nMerging #369 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #369   +/-\n=======================================\n  Coverage   88.97%   88.97%         \n=======================================\n  Files          44       44         \n  Lines        1234     1234         \n  Branches      183      183         \n=======================================\n  Hits         1098     1098         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5bcdcd0...2d057f7. Read the comment docs.\n. # Codecov Report\nMerging #372 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #372   +/-\n=======================================\n  Coverage   88.97%   88.97%         \n=======================================\n  Files          44       44         \n  Lines        1234     1234         \n  Branches      183      183         \n=======================================\n  Hits         1098     1098         \n  Misses        136      136\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/rtm/client.js | 84.15% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 94d25f2...e25f742. Read the comment docs.\n. # Codecov Report\nMerging #373 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #373      +/-\n==========================================\n+ Coverage   88.97%   88.98%   +<.01%   \n==========================================\n  Files          44       44            \n  Lines        1234     1235       +1   \n  Branches      183      184       +1   \n==========================================\n+ Hits         1098     1099       +1   \n  Misses        136      136\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/rtm/client.js | 84.21% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 94d25f2...571cbef. Read the comment docs.\n. # Codecov Report\nMerging #384 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #384   +/-\n=======================================\n  Coverage   88.97%   88.97%         \n=======================================\n  Files          44       44         \n  Lines        1234     1234         \n  Branches      183      183         \n=======================================\n  Hits         1098     1098         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 021bff7...6551e35. Read the comment docs.\n. # Codecov Report\nMerging #385 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #385   +/-\n=======================================\n  Coverage   88.98%   88.98%         \n=======================================\n  Files          44       44         \n  Lines        1235     1235         \n  Branches      184      184         \n=======================================\n  Hits         1099     1099         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ef495d...3c23a62. Read the comment docs.\n. # Codecov Report\nMerging #386 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #386   +/-\n=======================================\n  Coverage   88.98%   88.98%         \n=======================================\n  Files          44       44         \n  Lines        1235     1235         \n  Branches      184      184         \n=======================================\n  Hits         1099     1099         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ee821a...24beac0. Read the comment docs.\n. # Codecov Report\nMerging #387 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #387   +/-\n=======================================\n  Coverage   88.98%   88.98%         \n=======================================\n  Files          44       44         \n  Lines        1235     1235         \n  Branches      184      184         \n=======================================\n  Hits         1099     1099         \n  Misses        136      136\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 145d7f0...c3c29ce. Read the comment docs.\n. # Codecov Report\nMerging #389 into master will decrease coverage by 0.06%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #389      +/-\n==========================================\n- Coverage   88.98%   88.92%   -0.07%   \n==========================================\n  Files          44       44            \n  Lines        1235     1237       +2   \n  Branches      184      185       +1   \n==========================================\n+ Hits         1099     1100       +1   \n- Misses        136      137       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/data-store/data-store.js | 93.33% <50%> (-0.85%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 145d7f0...88bea0f. Read the comment docs.\n. # Codecov Report\nMerging #390 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #390   +/-\n=======================================\n  Coverage   88.92%   88.92%         \n=======================================\n  Files          44       44         \n  Lines        1237     1237         \n  Branches      185      185         \n=======================================\n  Hits         1100     1100         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b8ee61...5b82a5d. Read the comment docs.\n. # Codecov Report\nMerging #392 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #392      +/-\n==========================================\n+ Coverage   88.92%   88.96%   +0.03%   \n==========================================\n  Files          44       44            \n  Lines        1237     1241       +4   \n  Branches      185      187       +2   \n==========================================\n+ Hits         1100     1104       +4   \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/helpers.js | 93.02% <100%> (+0.71%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32fbdf0...c73b1eb. Read the comment docs.\n. # Codecov Report\nMerging #394 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #394   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d6145b...597a56e. Read the comment docs.\n. # Codecov Report\nMerging #396 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #396   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5518375...80498a4. Read the comment docs.\n. # Codecov Report\nMerging #397 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #397   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b447d93...6559708. Read the comment docs.\n. # Codecov Report\nMerging #398 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #398   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 508ad3b...4555180. Read the comment docs.\n. # Codecov Report\nMerging #399 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #399   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 508ad3b...93cdda9. Read the comment docs.\n. # Codecov Report\nMerging #405 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #405   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 27d20ac...68ce9dc. Read the comment docs.\n. # Codecov Report\nMerging #406 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #406   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 368e1c8...81e982e. Read the comment docs.\n. # Codecov Report\nMerging #407 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #407   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b613fcf...364da20. Read the comment docs.\n. # Codecov Report\nMerging #408 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #408   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 86b7a8a...93fe2a1. Read the comment docs.\n. # Codecov Report\nMerging #415 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #415   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/rtm/client.js | 84.15% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 855f6ec...08f7c8e. Read the comment docs.\n. # Codecov Report\nMerging #416 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #416   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          44       44         \n  Lines        1241     1241         \n  Branches      187      187         \n=======================================\n  Hits         1104     1104         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update eeb0400...af1df2d. Read the comment docs.\n. # Codecov Report\nMerging #425 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #425      +/-\n==========================================\n+ Coverage   88.96%   89.01%   +0.05%   \n==========================================\n  Files          44       44            \n  Lines        1241     1247       +6   \n  Branches      187      187            \n==========================================\n+ Hits         1104     1110       +6   \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/transports/request.js | 83.33% <100%> (+3.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 47ce689...c980a60. Read the comment docs.\n. # Codecov Report\nMerging #429 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #429   +/-\n=======================================\n  Coverage   89.01%   89.01%         \n=======================================\n  Files          44       44         \n  Lines        1247     1247         \n  Branches      187      187         \n=======================================\n  Hits         1110     1110         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update afe0fa0...80dba94. Read the comment docs.\n. # Codecov Report\nMerging #431 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #431      +/-\n==========================================\n+ Coverage   89.01%   89.03%   +0.01%   \n==========================================\n  Files          44       44            \n  Lines        1247     1249       +2   \n  Branches      187      189       +2   \n==========================================\n+ Hits         1110     1112       +2   \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/incoming-webhook/client.js | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ec04e5d...59bc180. Read the comment docs.\n. # Codecov Report\nMerging #432 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #432      +/-\n==========================================\n+ Coverage   89.01%   89.03%   +0.01%   \n==========================================\n  Files          44       44            \n  Lines        1247     1249       +2   \n  Branches      187      189       +2   \n==========================================\n+ Hits         1110     1112       +2   \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/incoming-webhook/client.js | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ec04e5d...574d242. Read the comment docs.\n. # Codecov Report\nMerging #433 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #433   +/-\n=======================================\n  Coverage   89.01%   89.01%         \n=======================================\n  Files          44       44         \n  Lines        1247     1247         \n  Branches      187      187         \n=======================================\n  Hits         1110     1110         \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/web/client.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ec04e5d...e48dffc. Read the comment docs.\n. # Codecov Report\nMerging #434 into master will increase coverage by 0.07%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #434      +/-\n=========================================\n+ Coverage   89.03%   89.1%   +0.07%   \n=========================================\n  Files          44      44            \n  Lines        1249    1258       +9   \n  Branches      189     190       +1   \n=========================================\n+ Hits         1112    1121       +9   \n  Misses        137     137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/transports/ws.js | 82.35% <0%> (-2.27%) | :arrow_down: |\n| lib/data-store/memory-data-store.js | 80.35% <0%> (\u00f8) | :arrow_up: |\n| lib/clients/web/client.js | 100% <0%> (\u00f8) | :arrow_up: |\n| lib/helpers.js | 100% <0%> (\u00f8) | :arrow_up: |\n| lib/clients/rtm/client.js | 84.21% <0%> (+0.05%) | :arrow_up: |\n| lib/data-store/data-store.js | 93.39% <0%> (+0.06%) | :arrow_up: |\n| lib/clients/client.js | 90.16% <0%> (+0.33%) | :arrow_up: |\n| lib/clients/transports/request.js | 86.84% <0%> (+3.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 97c534b...6253081. Read the comment docs.\n. # Codecov Report\nMerging #435 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #435      +/-\n==========================================\n+ Coverage   89.03%   89.12%   +0.09%   \n==========================================\n  Files          44       44            \n  Lines        1249     1251       +2   \n  Branches      189      190       +1   \n==========================================\n+ Hits         1112     1115       +3   \n+ Misses        137      136       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/transports/request.js | 86.84% <100%> (+3.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2b7f417...25c8da1. Read the comment docs.\n. # Codecov Report\nMerging #436 into master will decrease coverage by 0.03%.\nThe diff coverage is 90.62%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #436      +/-\n==========================================\n- Coverage   89.12%   89.09%   -0.04%   \n==========================================\n  Files          44       44            \n  Lines        1251     1256       +5   \n  Branches      190      190            \n==========================================\n+ Hits         1115     1119       +4   \n- Misses        136      137       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/web/client.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/helpers.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/clients/client.js | 90% <100%> (+0.16%) | :arrow_up: |\n| lib/clients/rtm/client.js | 84.21% <100%> (+0.05%) | :arrow_up: |\n| lib/clients/transports/ws.js | 82.35% <76.92%> (-2.27%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aa34560...4a51a78. Read the comment docs.\n. # Codecov Report\nMerging #437 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #437      +/-\n=========================================\n+ Coverage   89.09%   89.1%   +0.01%   \n=========================================\n  Files          44      44            \n  Lines        1256    1258       +2   \n  Branches      190     190            \n=========================================\n+ Hits         1119    1121       +2   \n  Misses        137     137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/web/client.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/data-store/memory-data-store.js | 80.35% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/clients/rtm/client.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/data-store/data-store.js | 93.39% <100%> (+0.06%) | :arrow_up: |\n| lib/clients/client.js | 90.16% <100%> (+0.16%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8bd1de7...fc34cbb. Read the comment docs.\n. # Codecov Report\nMerging #438 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #438   +/-\n======================================\n  Coverage    89.1%   89.1%         \n======================================\n  Files          44      44         \n  Lines        1258    1258         \n  Branches      190     190         \n======================================\n  Hits         1121    1121         \n  Misses        137     137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/web/client.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5eb9e29...fd46aeb. Read the comment docs.\n. # Codecov Report\nMerging #439 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #439   +/-\n======================================\n  Coverage    89.1%   89.1%         \n======================================\n  Files          44      44         \n  Lines        1258    1258         \n  Branches      190     190         \n======================================\n  Hits         1121    1121         \n  Misses        137     137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 257d8e6...3fbd77c. Read the comment docs.\n. # Codecov Report\nMerging #440 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #440   +/-\n======================================\n  Coverage    89.1%   89.1%         \n======================================\n  Files          44      44         \n  Lines        1258    1258         \n  Branches      190     190         \n======================================\n  Hits         1121    1121         \n  Misses        137     137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 12595af...3b8b59c. Read the comment docs.\n. # Codecov Report\nMerging #441 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #441   +/-\n======================================\n  Coverage    89.1%   89.1%         \n======================================\n  Files          44      44         \n  Lines        1258    1258         \n  Branches      190     190         \n======================================\n  Hits         1121    1121         \n  Misses        137     137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0ebfd85...19fa028. Read the comment docs.\n. # Codecov Report\nMerging #442 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #442   +/-\n======================================\n  Coverage    89.1%   89.1%         \n======================================\n  Files          44      44         \n  Lines        1258    1258         \n  Branches      190     190         \n======================================\n  Hits         1121    1121         \n  Misses        137     137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2c0ed07...bdbe196. Read the comment docs.\n. # Codecov Report\nMerging #443 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #443   +/-\n======================================\n  Coverage    89.1%   89.1%         \n======================================\n  Files          44      44         \n  Lines        1258    1258         \n  Branches      190     190         \n======================================\n  Hits         1121    1121         \n  Misses        137     137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7ac2f6e...5f3f273. Read the comment docs.\n. # Codecov Report\nMerging #444 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #444   +/-\n======================================\n  Coverage    89.1%   89.1%         \n======================================\n  Files          44      44         \n  Lines        1258    1258         \n  Branches      190     190         \n======================================\n  Hits         1121    1121         \n  Misses        137     137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ae7fa11...5257387. Read the comment docs.\n. # Codecov Report\nMerging #446 into master will increase coverage by 0.14%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #446      +/-\n==========================================\n+ Coverage    89.1%   89.25%   +0.14%   \n==========================================\n  Files          44       44            \n  Lines        1258     1275      +17   \n  Branches      190      194       +4   \n==========================================\n+ Hits         1121     1138      +17   \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/transports/request.js | 90.9% <0%> (+4.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 36191ab...2276c1d. Read the comment docs.\n. # Codecov Report\nMerging #447 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #447   +/-\n======================================\n  Coverage    89.1%   89.1%         \n======================================\n  Files          44      44         \n  Lines        1258    1258         \n  Branches      190     190         \n======================================\n  Hits         1121    1121         \n  Misses        137     137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 36191ab...d927dfc. Read the comment docs.\n. # Codecov Report\nMerging #449 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #449   +/-\n======================================\n  Coverage    89.1%   89.1%         \n======================================\n  Files          44      44         \n  Lines        1258    1258         \n  Branches      190     190         \n======================================\n  Hits         1121    1121         \n  Misses        137     137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68602f5...e557f27. Read the comment docs.\n. # Codecov Report\nMerging #450 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #450      +/-\n==========================================\n+ Coverage    89.1%   89.12%   +0.01%   \n==========================================\n  Files          44       44            \n  Lines        1258     1260       +2   \n  Branches      190      190            \n==========================================\n+ Hits         1121     1123       +2   \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/transports/request.js | 87.5% <100%> (+0.65%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 081d79c...9910f64. Read the comment docs.\n. # Codecov Report\nMerging #454 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #454   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/rtm/client.js | 84.21% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a6c7283...9edfc55. Read the comment docs.\n. # Codecov Report\nMerging #457 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #457   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/events/rtm.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1dfe3ea...c7ff2fd. Read the comment docs.\n. # Codecov Report\nMerging #458 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #458   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1dfe3ea...7d50ae1. Read the comment docs.\n. # Codecov Report\nMerging #460 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #460   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1dfe3ea...dc840c2. Read the comment docs.\n. # Codecov Report\nMerging #461 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #461   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1dfe3ea...cad09bd. Read the comment docs.\n. # Codecov Report\nMerging #462 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #462      +/-\n==========================================\n+ Coverage   89.12%   89.14%   +0.01%   \n==========================================\n  Files          44       44            \n  Lines        1260     1262       +2   \n  Branches      190      190            \n==========================================\n+ Hits         1123     1125       +2   \n  Misses        137      137\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/clients/events/rtm.js | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f380330...e9ca0d1. Read the comment docs.\n. # Codecov Report\nMerging #464 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #464   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67c1548...a1c7b4f. Read the comment docs.\n. # Codecov Report\nMerging #469 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #469   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67c1548...0767349. Read the comment docs.\n. # Codecov Report\nMerging #470 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #470   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a4aa26f...964b1e6. Read the comment docs.\n. # Codecov Report\nMerging #473 into master will decrease coverage by 8.59%.\nThe diff coverage is 80.53%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #473     +/-\n=========================================\n- Coverage   89.12%   80.53%   -8.6%   \n=========================================\n  Files          44        5     -39   \n  Lines        1260      226   -1034   \n  Branches      190       35    -155   \n=========================================\n- Hits         1123      182    -941   \n+ Misses        137       28    -109   \n- Partials        0       16     +16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/retry-policies.ts | 100% <100%> (\u00f8) | |\n| src/errors.ts | 100% <100%> (\u00f8) | |\n| src/util.ts | 67.56% <67.56%> (\u00f8) | |\n| src/WebClient.ts | 78.62% <78.62%> (\u00f8) | |\n| src/logger.ts | 87.87% <87.87%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e032a9...cbd9d21. Read the comment docs.\n. # Codecov Report\nMerging #475 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #475   +/-\n=======================================\n  Coverage   80.53%   80.53%         \n=======================================\n  Files           5        5         \n  Lines         226      226         \n  Branches       35       35         \n=======================================\n  Hits          182      182         \n  Misses         28       28         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ce06b1e...2c13523. Read the comment docs.\n. # Codecov Report\nMerging #476 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #476   +/-\n=======================================\n  Coverage   80.53%   80.53%         \n=======================================\n  Files           5        5         \n  Lines         226      226         \n  Branches       35       35         \n=======================================\n  Hits          182      182         \n  Misses         28       28         \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 78.62% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c5e4dd2...882d9dd. Read the comment docs.\n. # Codecov Report\nMerging #480 into master will decrease coverage by 0.44%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #480      +/-\n==========================================\n- Coverage   80.53%   80.08%   -0.45%   \n==========================================\n  Files           5        6       +1   \n  Lines         226      241      +15   \n  Branches       35       37       +2   \n==========================================\n+ Hits          182      193      +11   \n- Misses         28       30       +2   \n- Partials       16       18       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/IncomingWebhook.ts | 73.33% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df85321...3cc464f. Read the comment docs.\n. # Codecov Report\nMerging #487 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #487   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files           6        6         \n  Lines         241      241         \n  Branches       37       37         \n=======================================\n  Hits          193      193         \n  Misses         30       30         \n  Partials       18       18\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9e5d144...0c6cc9e. Read the comment docs.\n. # Codecov Report\nMerging #494 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #494   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files           6        6         \n  Lines         241      241         \n  Branches       37       37         \n=======================================\n  Hits          193      193         \n  Misses         30       30         \n  Partials       18       18\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 474878a...b34c18e. Read the comment docs.\n. # Codecov Report\nMerging #499 into master will increase coverage by 1.24%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #499      +/-\n==========================================\n+ Coverage   80.08%   81.32%   +1.24%   \n==========================================\n  Files           6        6            \n  Lines         241      241            \n  Branches       37       37            \n==========================================\n+ Hits          193      196       +3   \n+ Misses         30       29       -1   \n+ Partials       18       16       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 80.91% <\u00f8> (+2.29%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c49ba78...9d0801c. Read the comment docs.\n. # Codecov Report\nMerging #500 into master will decrease coverage by 0.37%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #500      +/-\n=========================================\n- Coverage   80.08%   79.7%   -0.38%   \n=========================================\n  Files           6       6            \n  Lines         241     271      +30   \n  Branches       37      42       +5   \n=========================================\n+ Hits          193     216      +23   \n- Misses         30      38       +8   \n+ Partials       18      17       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 81.88% <100%> (+3.25%) | :arrow_up: |\n| src/util.ts | 67.56% <100%> (\u00f8) | :arrow_up: |\n| src/IncomingWebhook.ts | 60% <0%> (-13.34%) | :arrow_down: |\n| src/errors.ts | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c49ba78...7c89cac. Read the comment docs.\n. # Codecov Report\nMerging #502 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #502   +/-\n=======================================\n  Coverage   81.32%   81.32%         \n=======================================\n  Files           6        6         \n  Lines         241      241         \n  Branches       37       37         \n=======================================\n  Hits          196      196         \n  Misses         29       29         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 805dd6f...5ce84bb. Read the comment docs.\n. # Codecov Report\nMerging #503 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #503   +/-\n=======================================\n  Coverage   81.32%   81.32%         \n=======================================\n  Files           6        6         \n  Lines         241      241         \n  Branches       37       37         \n=======================================\n  Hits          196      196         \n  Misses         29       29         \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 80.91% <0%> (\u00f8) | :arrow_up: |\n| src/util.ts | 67.56% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dee4b03...501b0af. Read the comment docs.\n. # Codecov Report\nMerging #504 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #504   +/-\n=======================================\n  Coverage   81.32%   81.32%         \n=======================================\n  Files           6        6         \n  Lines         241      241         \n  Branches       37       37         \n=======================================\n  Hits          196      196         \n  Misses         29       29         \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 80.91% <100%> (\u00f8) | :arrow_up: |\n| src/util.ts | 67.56% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dee4b03...8e4da08. Read the comment docs.\n. # Codecov Report\nMerging #506 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #506   +/-\n=======================================\n  Coverage   81.32%   81.32%         \n=======================================\n  Files           6        6         \n  Lines         241      241         \n  Branches       37       37         \n=======================================\n  Hits          196      196         \n  Misses         29       29         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6902c4e...8ce3b61. Read the comment docs.\n. # Codecov Report\nMerging #508 into master will decrease coverage by 2.16%.\nThe diff coverage is 58.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #508      +/-\n==========================================\n- Coverage   81.32%   79.16%   -2.17%   \n==========================================\n  Files           6        6            \n  Lines         241      264      +23   \n  Branches       37       39       +2   \n==========================================\n+ Hits          196      209      +13   \n- Misses         29       38       +9   \n- Partials       16       17       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/errors.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| src/IncomingWebhook.ts | 60% <52.38%> (-13.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a206c3e...b73f0a4. Read the comment docs.\n. # Codecov Report\nMerging #511 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #511   +/-\n=======================================\n  Coverage   81.32%   81.32%         \n=======================================\n  Files           6        6         \n  Lines         241      241         \n  Branches       37       37         \n=======================================\n  Hits          196      196         \n  Misses         29       29         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a206c3e...cb70211. Read the comment docs.\n. # Codecov Report\nMerging #512 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #512   +/-\n=======================================\n  Coverage   81.32%   81.32%         \n=======================================\n  Files           6        6         \n  Lines         241      241         \n  Branches       37       37         \n=======================================\n  Hits          196      196         \n  Misses         29       29         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a206c3e...32fd154. Read the comment docs.\n. # Codecov Report\nMerging #513 into master will decrease coverage by <.01%.\nThe diff coverage is 85.71%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #513      +/-\n==========================================\n- Coverage   81.32%   81.32%   -0.01%   \n==========================================\n  Files           6        6            \n  Lines         241      257      +16   \n  Branches       37       43       +6   \n==========================================\n+ Hits          196      209      +13   \n- Misses         29       30       +1   \n- Partials       16       18       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 80.95% <85.71%> (+0.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a206c3e...ad2c4d3. Read the comment docs.\n. # Codecov Report\nMerging #516 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #516   +/-\n======================================\n  Coverage    79.7%   79.7%         \n======================================\n  Files           6       6         \n  Lines         271     271         \n  Branches       42      42         \n======================================\n  Hits          216     216         \n  Misses         38      38         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68c0874...5d4d11c. Read the comment docs.\n. # Codecov Report\nMerging #518 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #518   +/-\n======================================\n  Coverage    79.7%   79.7%         \n======================================\n  Files           6       6         \n  Lines         271     271         \n  Branches       42      42         \n======================================\n  Hits          216     216         \n  Misses         38      38         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e46bab9...b940bee. Read the comment docs.\n. # Codecov Report\nMerging #519 into master will decrease coverage by 0.28%.\nThe diff coverage is 88.88%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #519      +/-\n==========================================\n- Coverage    79.7%   79.42%   -0.29%   \n==========================================\n  Files           6        6            \n  Lines         271      277       +6   \n  Branches       42       42            \n==========================================\n+ Hits          216      220       +4   \n- Misses         38       39       +1   \n- Partials       17       18       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 81.25% <88.88%> (-0.64%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b957324...7a97825. Read the comment docs.\n. # Codecov Report\nMerging #520 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #520   +/-\n=======================================\n  Coverage   79.42%   79.42%         \n=======================================\n  Files           6        6         \n  Lines         277      277         \n  Branches       42       42         \n=======================================\n  Hits          220      220         \n  Misses         39       39         \n  Partials       18       18\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e9a5e2d...7246076. Read the comment docs.\n. # Codecov Report\nMerging #522 into master will increase coverage by 0.14%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #522      +/-\n==========================================\n+ Coverage   79.42%   79.56%   +0.14%   \n==========================================\n  Files           6        6            \n  Lines         277      279       +2   \n  Branches       42       43       +1   \n==========================================\n+ Hits          220      222       +2   \n  Misses         39       39            \n  Partials       18       18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 81.5% <100%> (+0.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d42a3e5...36dc334. Read the comment docs.\n. # Codecov Report\nMerging #523 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #523   +/-\n=======================================\n  Coverage   79.56%   79.56%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          222      222         \n  Misses         39       39         \n  Partials       18       18\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b3eabbf...8f541d1. Read the comment docs.\n. # Codecov Report\nMerging #528 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #528   +/-\n=======================================\n  Coverage   79.56%   79.56%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          222      222         \n  Misses         39       39         \n  Partials       18       18\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3bed1fc...951fe41. Read the comment docs.\n. # Codecov Report\nMerging #530 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #530   +/-\n=======================================\n  Coverage   79.56%   79.56%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          222      222         \n  Misses         39       39         \n  Partials       18       18\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3bed1fc...561d523. Read the comment docs.\n. # Codecov Report\nMerging #532 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #532   +/-\n=======================================\n  Coverage   79.56%   79.56%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          222      222         \n  Misses         39       39         \n  Partials       18       18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 81.5% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fb19909...b331a6f. Read the comment docs.\n. # Codecov Report\nMerging #535 into master will increase coverage by 0.71%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #535      +/-\n==========================================\n+ Coverage   79.56%   80.28%   +0.71%   \n==========================================\n  Files           6        6            \n  Lines         279      279            \n  Branches       43       43            \n==========================================\n+ Hits          222      224       +2   \n+ Misses         39       38       -1   \n+ Partials       18       17       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/IncomingWebhook.ts | 65.71% <100%> (+5.71%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 62dfd81...ef12abb. Read the comment docs.\n. # Codecov Report\nMerging #537 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #537   +/-\n=======================================\n  Coverage   80.28%   80.28%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          224      224         \n  Misses         38       38         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 017ef50...2c21341. Read the comment docs.\n. # Codecov Report\nMerging #539 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #539   +/-\n=======================================\n  Coverage   80.28%   80.28%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          224      224         \n  Misses         38       38         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7cef7ec...8bea620. Read the comment docs.\n. # Codecov Report\nMerging #540 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #540   +/-\n=======================================\n  Coverage   80.28%   80.28%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          224      224         \n  Misses         38       38         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7906dc9...7e32e5e. Read the comment docs.\n. # Codecov Report\nMerging #541 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #541   +/-\n=======================================\n  Coverage   80.28%   80.28%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          224      224         \n  Misses         38       38         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 80a9294...92f55d1. Read the comment docs.\n. # Codecov Report\nMerging #543 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #543   +/-\n=======================================\n  Coverage   80.28%   80.28%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          224      224         \n  Misses         38       38         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 80a9294...8bee044. Read the comment docs.\n. # Codecov Report\nMerging #544 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #544   +/-\n=======================================\n  Coverage   80.28%   80.28%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          224      224         \n  Misses         38       38         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 81e3936...624534b. Read the comment docs.\n. # Codecov Report\nMerging #549 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #549   +/-\n=======================================\n  Coverage   80.28%   80.28%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          224      224         \n  Misses         38       38         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fbf1ae5...2bbb510. Read the comment docs.\n. # Codecov Report\nMerging #551 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #551   +/-\n=======================================\n  Coverage   80.28%   80.28%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          224      224         \n  Misses         38       38         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6317d8c...f5a4541. Read the comment docs.\n. # Codecov Report\nMerging #554 into master will increase coverage by 1.43%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #554      +/-\n==========================================\n+ Coverage   80.28%   81.72%   +1.43%   \n==========================================\n  Files           6        6            \n  Lines         279      279            \n  Branches       43       43            \n==========================================\n+ Hits          224      228       +4   \n+ Misses         38       36       -2   \n+ Partials       17       15       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 84.24% <100%> (+2.73%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 290ea7a...65ef2b5. Read the comment docs.\n. # Codecov Report\nMerging #555 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #555   +/-\n=======================================\n  Coverage   81.72%   81.72%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          228      228         \n  Misses         36       36         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6675917...c0fd185. Read the comment docs.\n. # Codecov Report\nMerging #556 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #556   +/-\n=======================================\n  Coverage   81.72%   81.72%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          228      228         \n  Misses         36       36         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1722ed5...cf663c7. Read the comment docs.\n. # Codecov Report\nMerging #557 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #557   +/-\n=======================================\n  Coverage   81.72%   81.72%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          228      228         \n  Misses         36       36         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f90bbd8...07116d5. Read the comment docs.\n. # Codecov Report\nMerging #558 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #558   +/-\n=======================================\n  Coverage   81.72%   81.72%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          228      228         \n  Misses         36       36         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 69d974f...97382a3. Read the comment docs.\n. # Codecov Report\nMerging #560 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #560   +/-\n=======================================\n  Coverage   81.72%   81.72%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          228      228         \n  Misses         36       36         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e8a5781...84e2c70. Read the comment docs.\n. # Codecov Report\nMerging #562 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #562   +/-\n=======================================\n  Coverage   81.72%   81.72%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          228      228         \n  Misses         36       36         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e8a5781...e0c1407. Read the comment docs.\n. # Codecov Report\nMerging #563 into master will not change coverage.\nThe diff coverage is 84%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #563   +/-\n=======================================\n  Coverage   81.72%   81.72%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          228      228         \n  Misses         36       36         \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 84.24% <84%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b257599...64e7c76. Read the comment docs.\n. # Codecov Report\nMerging #564 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #564   +/-\n=======================================\n  Coverage   81.72%   81.72%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          228      228         \n  Misses         36       36         \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 84.24% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update deafed7...a996ec6. Read the comment docs.\n. # Codecov Report\nMerging #567 into master will increase coverage by 2.66%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #567      +/-\n==========================================\n+ Coverage   81.72%   84.38%   +2.66%   \n==========================================\n  Files           6        6            \n  Lines         279      333      +54   \n  Branches       43       52       +9   \n==========================================\n+ Hits          228      281      +53   \n- Misses         36       39       +3   \n+ Partials       15       13       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 88% <0%> (+3.75%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update deafed7...a91d397. Read the comment docs.\n. # Codecov Report\nMerging #568 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #568   +/-\n=======================================\n  Coverage   81.72%   81.72%         \n=======================================\n  Files           6        6         \n  Lines         279      279         \n  Branches       43       43         \n=======================================\n  Hits          228      228         \n  Misses         36       36         \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 84.24% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update deafed7...c3b5ae8. Read the comment docs.\n. # Codecov Report\nMerging #569 into master will increase coverage by 0.42%.\nThe diff coverage is 42.85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #569      +/-\n==========================================\n+ Coverage   81.72%   82.14%   +0.42%   \n==========================================\n  Files           6        6            \n  Lines         279      280       +1   \n  Branches       43       43            \n==========================================\n+ Hits          228      230       +2   \n  Misses         36       36            \n+ Partials       15       14       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 85.03% <42.85%> (+0.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 97e2456...a920440. Read the comment docs.\n. # Codecov Report\nMerging #570 into master will increase coverage by 4.14%.\nThe diff coverage is 90%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #570      +/-\n==========================================\n+ Coverage   81.72%   85.86%   +4.14%   \n==========================================\n  Files           6        6            \n  Lines         279      276       -3   \n  Branches       43       42       -1   \n==========================================\n+ Hits          228      237       +9   \n+ Misses         36       27       -9   \n+ Partials       15       12       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 92.3% <90%> (+8.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 97e2456...51c0074. Read the comment docs.\n. # Codecov Report\nMerging #573 into master will increase coverage by 0.91%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #573      +/-\n==========================================\n+ Coverage   85.86%   86.78%   +0.91%   \n==========================================\n  Files           6        6            \n  Lines         276      280       +4   \n  Branches       42       43       +1   \n==========================================\n+ Hits          237      243       +6   \n+ Misses         27       26       -1   \n+ Partials       12       11       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 93.87% <100%> (+1.56%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d8a115...f10a0f8. Read the comment docs.\n. # Codecov Report\nMerging #574 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #574   +/-\n=======================================\n  Coverage   86.78%   86.78%         \n=======================================\n  Files           6        6         \n  Lines         280      280         \n  Branches       43       43         \n=======================================\n  Hits          243      243         \n  Misses         26       26         \n  Partials       11       11\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 24488bb...4b50d20. Read the comment docs.\n. # Codecov Report\nMerging #578 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #578   +/-\n=======================================\n  Coverage   86.78%   86.78%         \n=======================================\n  Files           6        6         \n  Lines         280      280         \n  Branches       43       43         \n=======================================\n  Hits          243      243         \n  Misses         26       26         \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/errors.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/logger.ts | 87.87% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 008402b...265aa97. Read the comment docs.\n. # Codecov Report\nMerging #579 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #579   +/-\n=======================================\n  Coverage   86.78%   86.78%         \n=======================================\n  Files           6        6         \n  Lines         280      280         \n  Branches       43       43         \n=======================================\n  Hits          243      243         \n  Misses         26       26         \n  Partials       11       11\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c8789a...5f8abc9. Read the comment docs.\n. # Codecov Report\nMerging #584 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #584   +/-\n=======================================\n  Coverage   86.78%   86.78%         \n=======================================\n  Files           6        6         \n  Lines         280      280         \n  Branches       43       43         \n=======================================\n  Hits          243      243         \n  Misses         26       26         \n  Partials       11       11\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 263f530...5d0332f. Read the comment docs.\n. # Codecov Report\nMerging #588 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #588      +/-\n==========================================\n+ Coverage   86.78%   86.83%   +0.04%   \n==========================================\n  Files           6        6            \n  Lines         280      281       +1   \n  Branches       43       44       +1   \n==========================================\n+ Hits          243      244       +1   \n  Misses         26       26            \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 93.91% <100%> (+0.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 426c8f8...e8ffc33. Read the comment docs.\n. # Codecov Report\nMerging #589 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #589      +/-\n==========================================\n+ Coverage   86.78%   86.83%   +0.04%   \n==========================================\n  Files           6        6            \n  Lines         280      281       +1   \n  Branches       43       44       +1   \n==========================================\n+ Hits          243      244       +1   \n  Misses         26       26            \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 93.91% <100%> (+0.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 426c8f8...11510fd. Read the comment docs.\n. # Codecov Report\nMerging #590 into v3 will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nv3     #590   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 969a7b6...c2af28e. Read the comment docs.\n. # Codecov Report\nMerging #591 into v3 will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nv3     #591   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 73bd1ce...659d2f6. Read the comment docs.\n. # Codecov Report\nMerging #593 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #593   +/-\n=======================================\n  Coverage   86.83%   86.83%         \n=======================================\n  Files           6        6         \n  Lines         281      281         \n  Branches       44       44         \n=======================================\n  Hits          244      244         \n  Misses         26       26         \n  Partials       11       11\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f51bdda...805a46e. Read the comment docs.\n. # Codecov Report\nMerging #596 into master will increase coverage by 1.43%.\nThe diff coverage is 91.25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #596      +/-\n==========================================\n+ Coverage   86.83%   88.26%   +1.43%   \n==========================================\n  Files           6        7       +1   \n  Lines         281      409     +128   \n  Branches       44       70      +26   \n==========================================\n+ Hits          244      361     +117   \n- Misses         26       31       +5   \n- Partials       11       17       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/IncomingWebhook.ts | 65.71% <\u00f8> (\u00f8) | :arrow_up: |\n| src/retry-policies.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/methods.ts | 100% <100%> (\u00f8) | |\n| src/util.ts | 73.33% <100%> (+5.76%) | :arrow_up: |\n| src/logger.ts | 89.74% <100%> (+1.86%) | :arrow_up: |\n| src/WebClient.ts | 91.26% <87.38%> (-2.66%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f51bdda...e28cc36. Read the comment docs.\n. # Codecov Report\nMerging #599 into master will increase coverage by 0.3%.\nThe diff coverage is 90.24%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #599     +/-\n=========================================\n+ Coverage   88.23%   88.54%   +0.3%   \n=========================================\n  Files           7        7           \n  Lines         408      419     +11   \n  Branches       70       72      +2   \n=========================================\n+ Hits          360      371     +11   \n  Misses         31       31           \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/errors.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| src/WebClient.ts | 91.63% <90%> (+0.36%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d5fafe7...5138a8b. Read the comment docs.\n. # Codecov Report\nMerging #600 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #600   +/-\n=======================================\n  Coverage   86.83%   86.83%         \n=======================================\n  Files           6        6         \n  Lines         281      281         \n  Branches       44       44         \n=======================================\n  Hits          244      244         \n  Misses         26       26         \n  Partials       11       11\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d53000d...8495516. Read the comment docs.\n. # Codecov Report\nMerging #601 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #601   +/-\n=======================================\n  Coverage   86.83%   86.83%         \n=======================================\n  Files           6        6         \n  Lines         281      281         \n  Branches       44       44         \n=======================================\n  Hits          244      244         \n  Misses         26       26         \n  Partials       11       11\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d53000d...b5df464. Read the comment docs.\n. # Codecov Report\nMerging #602 into master will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #602      +/-\n==========================================\n- Coverage   88.26%   88.23%   -0.03%   \n==========================================\n  Files           7        7            \n  Lines         409      408       -1   \n  Branches       70       70            \n==========================================\n- Hits          361      360       -1   \n  Misses         31       31            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fec7950...fc55cc8. Read the comment docs.\n. # Codecov Report\nMerging #603 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #603   +/-\n=======================================\n  Coverage   88.54%   88.54%         \n=======================================\n  Files           7        7         \n  Lines         419      419         \n  Branches       72       72         \n=======================================\n  Hits          371      371         \n  Misses         31       31         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ba5d1b4...1bea2a1. Read the comment docs.\n. # Codecov Report\nMerging #604 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #604      +/-\n==========================================\n+ Coverage   88.54%   88.59%   +0.05%   \n==========================================\n  Files           7        7            \n  Lines         419      421       +2   \n  Branches       72       73       +1   \n==========================================\n+ Hits          371      373       +2   \n  Misses         31       31            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 91.7% <100%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2b4ea6...a5e77be. Read the comment docs.\n. # Codecov Report\nMerging #605 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #605   +/-\n=======================================\n  Coverage   88.83%   88.83%         \n=======================================\n  Files           7        7         \n  Lines         421      421         \n  Branches       73       73         \n=======================================\n  Hits          374      374         \n  Misses         31       31         \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/util.ts | 73.33% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ac5ff8c...cd2c068. Read the comment docs.\n. # Codecov Report\nMerging #606 into master will increase coverage by 0.23%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #606      +/-\n==========================================\n+ Coverage   88.54%   88.78%   +0.23%   \n==========================================\n  Files           7        7            \n  Lines         419      419            \n  Branches       72       72            \n==========================================\n+ Hits          371      372       +1   \n  Misses         31       31            \n+ Partials       17       16       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 92.05% <0%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2b4ea6...cd53dcf. Read the comment docs.\n. # Codecov Report\nMerging #609 into master will increase coverage by 0.13%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #609      +/-\n==========================================\n+ Coverage   88.83%   88.96%   +0.13%   \n==========================================\n  Files           7        7            \n  Lines         421      426       +5   \n  Branches       73       74       +1   \n==========================================\n+ Hits          374      379       +5   \n  Misses         31       31            \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/WebClient.ts | 92.27% <100%> (+0.16%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 842c7a7...c1bdf0f. Read the comment docs.\n. # Codecov Report\nMerging #611 into master will increase coverage by 3.18%.\nThe diff coverage is 94.87%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #611      +/-\n==========================================\n+ Coverage   88.83%   92.01%   +3.18%   \n==========================================\n  Files           7        7            \n  Lines         421      426       +5   \n  Branches       73       78       +5   \n==========================================\n+ Hits          374      392      +18   \n+ Misses         31       19      -12   \n+ Partials       16       15       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/WebClient.ts | 94.4% <100%> (+2.28%) | :arrow_up: |\n| src/IncomingWebhook.ts | 87.09% <71.42%> (+21.38%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 842c7a7...ddadd39. Read the comment docs.\n. # Codecov Report\nMerging #613 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #613   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files           7        7         \n  Lines         426      426         \n  Branches       74       74         \n=======================================\n  Hits          379      379         \n  Misses         31       31         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update da4b0ec...86d4727. Read the comment docs.\n. # Codecov Report\nMerging #619 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #619   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files           7        7         \n  Lines         426      426         \n  Branches       74       74         \n=======================================\n  Hits          379      379         \n  Misses         31       31         \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b207d88...7d01010. Read the comment docs.\n. # Codecov Report\nMerging #620 into master will increase coverage by 3.05%.\nThe diff coverage is 94.28%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #620      +/-\n==========================================\n+ Coverage   88.96%   92.01%   +3.05%   \n==========================================\n  Files           7        7            \n  Lines         426      426            \n  Branches       74       78       +4   \n==========================================\n+ Hits          379      392      +13   \n+ Misses         31       19      -12   \n+ Partials       16       15       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 94.4% <100%> (+2.12%) | :arrow_up: |\n| src/IncomingWebhook.ts | 87.09% <71.42%> (+21.38%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d98aef7...df2786d. Read the comment docs.\n. # Codecov Report\nMerging #621 into v3 will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nv3     #621   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          44       44         \n  Lines        1260     1260         \n  Branches      190      190         \n=======================================\n  Hits         1123     1123         \n  Misses        137      137\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cf0317a...1bf6c33. Read the comment docs.\n. # Codecov Report\nMerging #622 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #622   +/-\n=======================================\n  Coverage   92.01%   92.01%         \n=======================================\n  Files           7        7         \n  Lines         426      426         \n  Branches       78       78         \n=======================================\n  Hits          392      392         \n  Misses         19       19         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ea73ad...52df0c6. Read the comment docs.\n. # Codecov Report\nMerging #622 into feat-short-lived-tokens will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@                   Coverage Diff                    @@\nfeat-short-lived-tokens     #622   +/-\n========================================================\n  Coverage                    92.01%   92.01%         \n========================================================\n  Files                            7        7         \n  Lines                          426      426         \n  Branches                        78       78         \n========================================================\n  Hits                           392      392         \n  Misses                          19       19         \n  Partials                        15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ea73ad...c9c13dc. Read the comment docs.\n. # Codecov Report\nMerging #623 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #623   +/-\n=======================================\n  Coverage   92.01%   92.01%         \n=======================================\n  Files           7        7         \n  Lines         426      426         \n  Branches       78       78         \n=======================================\n  Hits          392      392         \n  Misses         19       19         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fc6371c...fde80c7. Read the comment docs.\n. # Codecov Report\nMerging #624 into feat-short-lived-tokens will decrease coverage by 0.54%.\nThe diff coverage is 92.22%.\n\n\n```diff\n@@                     Coverage Diff                     @@\nfeat-short-lived-tokens     #624      +/-\n===========================================================\n- Coverage                    92.01%   91.47%   -0.55%   \n===========================================================\n  Files                            7        7            \n  Lines                          426      481      +55   \n  Branches                        78       89      +11   \n===========================================================\n+ Hits                           392      440      +48   \n- Misses                          19       22       +3   \n- Partials                        15       19       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/errors.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| src/WebClient.ts | 93.42% <92.13%> (-0.98%) | :arrow_down: |\n| src/util.ts | 71.11% <0%> (-2.23%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ed5ac1f...f5109e1. Read the comment docs.\n. # Codecov Report\nMerging #625 into master will decrease coverage by 0.12%.\nThe diff coverage is 92.22%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #625      +/-\n==========================================\n- Coverage   92.01%   91.89%   -0.13%   \n==========================================\n  Files           7        7            \n  Lines         426      481      +55   \n  Branches       78       89      +11   \n==========================================\n+ Hits          392      442      +50   \n- Misses         19       22       +3   \n- Partials       15       17       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/errors.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| src/WebClient.ts | 93.75% <92.13%> (-0.66%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e95f59c...bbcb2ef. Read the comment docs.\n. # Codecov Report\nMerging #626 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #626   +/-\n=======================================\n  Coverage   91.89%   91.89%         \n=======================================\n  Files           7        7         \n  Lines         481      481         \n  Branches       89       89         \n=======================================\n  Hits          442      442         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d76a7be...38b4ca8. Read the comment docs.\n. # Codecov Report\nMerging #629 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #629      +/-\n=========================================\n+ Coverage   91.89%   91.9%   +0.01%   \n=========================================\n  Files           7       7            \n  Lines         481     482       +1   \n  Branches       89      90       +1   \n=========================================\n+ Hits          442     443       +1   \n  Misses         22      22            \n  Partials       17      17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 93.77% <100%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 934a4fd...d1754dc. Read the comment docs.\n. # Codecov Report\nMerging #631 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #631   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 96933ac...c2f5955. Read the comment docs.\n. # Codecov Report\nMerging #637 into master will decrease coverage by 2.69%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #637     +/-\n=========================================\n- Coverage    91.9%   89.21%   -2.7%   \n=========================================\n  Files           7        7           \n  Lines         482      482           \n  Branches       90       90           \n=========================================\n- Hits          443      430     -13   \n- Misses         22       36     +14   \n+ Partials       17       16      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/util.ts | 46.66% <0%> (-26.67%) | :arrow_down: |\n| src/WebClient.ts | 93.44% <0%> (-0.33%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34c4150...8880ed4. Read the comment docs.\n. # Codecov Report\nMerging #637 into master will decrease coverage by 2.48%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #637      +/-\n==========================================\n- Coverage    91.9%   89.41%   -2.49%   \n==========================================\n  Files           7        7            \n  Lines         482      482            \n  Branches       90       90            \n==========================================\n- Hits          443      431      -12   \n- Misses         22       36      +14   \n+ Partials       17       15       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/util.ts | 46.66% <0%> (-26.67%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34c4150...8880ed4. Read the comment docs.\n. # Codecov Report\nMerging #637 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #637   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34c4150...8880ed4. Read the comment docs.\n. # Codecov Report\nMerging #637 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #637   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34c4150...8880ed4. Read the comment docs.\n. # Codecov Report\nMerging #637 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #637   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34c4150...8880ed4. Read the comment docs.\n. # Codecov Report\nMerging #639 into master will decrease coverage by 1.27%.\nThe diff coverage is 41.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #639      +/-\n==========================================\n- Coverage    91.9%   90.63%   -1.28%   \n==========================================\n  Files           7        7            \n  Lines         482      491       +9   \n  Branches       90       94       +4   \n==========================================\n+ Hits          443      445       +2   \n- Misses         22       28       +6   \n- Partials       17       18       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/IncomingWebhook.ts | 72.5% <41.66%> (-14.6%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 759bfa6...1e5973c. Read the comment docs.\n. # Codecov Report\nMerging #640 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #640      +/-\n==========================================\n+ Coverage    91.9%   91.94%   +0.03%   \n==========================================\n  Files           7        7            \n  Lines         482      484       +2   \n  Branches       90       90            \n==========================================\n+ Hits          443      445       +2   \n  Misses         22       22            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/IncomingWebhook.ts | 87.5% <100%> (+0.4%) | :arrow_up: |\n| src/util.ts | 77.77% <100%> (+4.44%) | :arrow_up: |\n| src/WebClient.ts | 93.6% <100%> (-0.17%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3ab54de...d17132c. Read the comment docs.\n. # Codecov Report\nMerging #641 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #641   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 759bfa6...89299f7. Read the comment docs.\n. # Codecov Report\nMerging #643 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #643   +/-\n=======================================\n  Coverage   91.94%   91.94%         \n=======================================\n  Files           7        7         \n  Lines         484      484         \n  Branches       90       90         \n=======================================\n  Hits          445      445         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 299cdf5...68d06cd. Read the comment docs.\n. # Codecov Report\nMerging #644 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #644   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 148c94c...18053d7. Read the comment docs.\n. # Codecov Report\nMerging #645 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #645   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 93.77% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 148c94c...480ef7b. Read the comment docs.\n. # Codecov Report\nMerging #646 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #646   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6a37f3d...b72984c. Read the comment docs.\n. # Codecov Report\nMerging #647 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #647   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9153ce0...60d9bf7. Read the comment docs.\n. # Codecov Report\nMerging #648 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #648   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8040ac...3e0752a. Read the comment docs.\n. # Codecov Report\nMerging #650 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #650   +/-\n======================================\n  Coverage    91.9%   91.9%         \n======================================\n  Files           7       7         \n  Lines         482     482         \n  Branches       90      90         \n======================================\n  Hits          443     443         \n  Misses         22      22         \n  Partials       17      17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4bd5f6a...eeddfd1. Read the comment docs.\n. # Codecov Report\nMerging #651 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #651   +/-\n=======================================\n  Coverage   91.94%   91.94%         \n=======================================\n  Files           7        7         \n  Lines         484      484         \n  Branches       90       90         \n=======================================\n  Hits          445      445         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 26337d3...59eb00b. Read the comment docs.\n. # Codecov Report\nMerging #652 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #652   +/-\n=======================================\n  Coverage   91.94%   91.94%         \n=======================================\n  Files           7        7         \n  Lines         484      484         \n  Branches       90       90         \n=======================================\n  Hits          445      445         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 92730aa...4d7e8c6. Read the comment docs.\n. # Codecov Report\nMerging #653 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #653   +/-\n=======================================\n  Coverage   91.94%   91.94%         \n=======================================\n  Files           7        7         \n  Lines         484      484         \n  Branches       90       90         \n=======================================\n  Hits          445      445         \n  Misses         22       22         \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 299cdf5...d4bf94c. Read the comment docs.\n. # Codecov Report\nMerging #658 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #658   +/-\n=======================================\n  Coverage   91.94%   91.94%         \n=======================================\n  Files           7        7         \n  Lines         484      484         \n  Branches       90       90         \n=======================================\n  Hits          445      445         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0eb4c69...b5acd97. Read the comment docs.\n. # Codecov Report\nMerging #661 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #661   +/-\n=======================================\n  Coverage   91.94%   91.94%         \n=======================================\n  Files           7        7         \n  Lines         484      484         \n  Branches       90       90         \n=======================================\n  Hits          445      445         \n  Misses         22       22         \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0eb4c69...d757283. Read the comment docs.\n. # Codecov Report\nMerging #665 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #665   +/-\n=======================================\n  Coverage   91.94%   91.94%         \n=======================================\n  Files           7        7         \n  Lines         484      484         \n  Branches       90       90         \n=======================================\n  Hits          445      445         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d74f3ec...04c4460. Read the comment docs.\n. # Codecov Report\nMerging #668 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #668      +/-\n==========================================\n- Coverage   91.94%   91.92%   -0.02%   \n==========================================\n  Files           7        7            \n  Lines         484      483       -1   \n  Branches       90       90            \n==========================================\n- Hits          445      444       -1   \n  Misses         22       22            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/logger.ts | 89.47% <100%> (-0.27%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4024612...4d9caf3. Read the comment docs.\n. # Codecov Report\nMerging #671 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #671      +/-\n==========================================\n- Coverage   91.94%   91.92%   -0.02%   \n==========================================\n  Files           7        7            \n  Lines         484      483       -1   \n  Branches       90       90            \n==========================================\n- Hits          445      444       -1   \n  Misses         22       22            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/logger.ts | 89.47% <100%> (-0.27%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4024612...aaec7c0. Read the comment docs.\n. # Codecov Report\nMerging #676 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #676   +/-\n=======================================\n  Coverage   91.92%   91.92%         \n=======================================\n  Files           7        7         \n  Lines         483      483         \n  Branches       90       90         \n=======================================\n  Hits          444      444         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3bbba95...5eaed8f. Read the comment docs.\n. # Codecov Report\nMerging #678 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #678   +/-\n=======================================\n  Coverage   91.92%   91.92%         \n=======================================\n  Files           7        7         \n  Lines         483      483         \n  Branches       90       90         \n=======================================\n  Hits          444      444         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3bbba95...83e55ca. Read the comment docs.\n. # Codecov Report\nMerging #683 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #683   +/-\n=======================================\n  Coverage   91.92%   91.92%         \n=======================================\n  Files           7        7         \n  Lines         483      483         \n  Branches       90       90         \n=======================================\n  Hits          444      444         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6389b63...4cf09ba. Read the comment docs.\n. # Codecov Report\nMerging #684 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #684   +/-\n=======================================\n  Coverage   91.92%   91.92%         \n=======================================\n  Files           7        7         \n  Lines         483      483         \n  Branches       90       90         \n=======================================\n  Hits          444      444         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c84a44c...c10f9b8. Read the comment docs.\n. # Codecov Report\nMerging #686 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #686   +/-\n=======================================\n  Coverage   91.92%   91.92%         \n=======================================\n  Files           7        7         \n  Lines         483      483         \n  Branches       90       90         \n=======================================\n  Hits          444      444         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7ee1141...9fcbf81. Read the comment docs.\n. # Codecov Report\nMerging #688 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #688   +/-\n=======================================\n  Coverage   91.92%   91.92%         \n=======================================\n  Files           7        7         \n  Lines         483      483         \n  Branches       90       90         \n=======================================\n  Hits          444      444         \n  Misses         22       22         \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/IncomingWebhook.ts | 87.5% <\u00f8> (\u00f8) | :arrow_up: |\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 72f0c30...d9399c7. Read the comment docs.\n. # Codecov Report\nMerging #698 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #698      +/-\n==========================================\n+ Coverage   91.92%   91.97%   +0.04%   \n==========================================\n  Files           7        7            \n  Lines         483      486       +3   \n  Branches       90       91       +1   \n==========================================\n+ Hits          444      447       +3   \n  Misses         22       22            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 93.66% <100%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 21cc97e...c4d8061. Read the comment docs.\n. # Codecov Report\nMerging #700 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #700   +/-\n=======================================\n  Coverage   91.97%   91.97%         \n=======================================\n  Files           7        7         \n  Lines         486      486         \n  Branches       91       91         \n=======================================\n  Hits          447      447         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2133f0...d33b7f8. Read the comment docs.\n. # Codecov Report\nMerging #702 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #702   +/-\n=======================================\n  Coverage   91.97%   91.97%         \n=======================================\n  Files           7        7         \n  Lines         486      486         \n  Branches       91       91         \n=======================================\n  Hits          447      447         \n  Misses         22       22         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e4bf6a0...503e793. Read the comment docs.\n. # Codecov Report\nMerging #703 into master will increase coverage by 1.97%.\nThe diff coverage is 89.36%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #703      +/-\n==========================================\n+ Coverage   91.97%   93.94%   +1.97%   \n==========================================\n  Files           7        7            \n  Lines         486      446      -40   \n  Branches       91       43      -48   \n==========================================\n- Hits          447      419      -28   \n- Misses         22       25       +3   \n+ Partials       17        2      -15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/util.ts | 80.85% <\u00f8> (+3.07%) | :arrow_up: |\n| src/WebClient.ts | 95.8% <100%> (+2.13%) | :arrow_up: |\n| src/logger.ts | 89.79% <87.8%> (+0.32%) | :arrow_up: |\n| src/retry-policies.ts | 100% <0%> (\u00f8) | :arrow_up: |\n| src/IncomingWebhook.ts | 92.59% <0%> (+5.09%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 374fd1e...0bff647. Read the comment docs.\n. # Codecov Report\nMerging #711 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #711   +/-\n=======================================\n  Coverage   93.94%   93.94%         \n=======================================\n  Files           7        7         \n  Lines         446      446         \n  Branches       43       43         \n=======================================\n  Hits          419      419         \n  Misses         25       25         \n  Partials        2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a7b8682...5ffdd96. Read the comment docs.\n. # Codecov Report\nMerging #713 into dev-v5 will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\ndev-v5     #713      +/-\n==========================================\n- Coverage   94.68%   94.65%   -0.03%   \n==========================================\n  Files           7        7            \n  Lines         376      374       -2   \n  Branches       34       33       -1   \n==========================================\n- Hits          356      354       -2   \n  Misses         18       18            \n  Partials        2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/WebClient.ts | 96.11% <\u00f8> (-0.04%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 96be6ce...d2d5c38. Read the comment docs.\n. # Codecov Report\nMerging #714 into dev-v5 will decrease coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\ndev-v5    #714      +/-\n=========================================\n- Coverage   93.94%   93.9%   -0.04%   \n=========================================\n  Files           7       7            \n  Lines         446     394      -52   \n  Branches       43      35       -8   \n=========================================\n- Hits          419     370      -49   \n+ Misses         25      22       -3   \n  Partials        2       2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/errors.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/WebClient.ts | 96.2% <100%> (+0.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a7b8682...2c085e0. Read the comment docs.\n. # Codecov Report\nMerging #715 into dev-v5 will increase coverage by 0.77%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\ndev-v5     #715      +/-\n==========================================\n+ Coverage    93.9%   94.68%   +0.77%   \n==========================================\n  Files           7        7            \n  Lines         394      376      -18   \n  Branches       35       34       -1   \n==========================================\n- Hits          370      356      -14   \n+ Misses         22       18       -4   \n  Partials        2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/logger.ts | 97.05% <\u00f8> (+7.26%) | :arrow_up: |\n| src/WebClient.ts | 96.15% <100%> (-0.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 22c0756...97ba345. Read the comment docs.\n. # Codecov Report\nMerging #716 into dev-v5 will increase coverage by 2.17%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\ndev-v5     #716      +/-\n==========================================\n+ Coverage   94.65%   96.82%   +2.17%   \n==========================================\n  Files           7        7            \n  Lines         374      347      -27   \n  Branches       33       33            \n==========================================\n- Hits          354      336      -18   \n+ Misses         18        9       -9   \n  Partials        2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/util.ts | 100% <\u00f8> (+19.14%) | :arrow_up: |\n| src/IncomingWebhook.ts | 92% <100%> (-0.6%) | :arrow_down: |\n| src/WebClient.ts | 96.05% <100%> (-0.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e0892a8...f85b48d. Read the comment docs.\n. # Codecov Report\nMerging #717 into dev-v5 will decrease coverage by 0.31%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\ndev-v5     #717      +/-\n==========================================\n- Coverage   96.82%   96.51%   -0.32%   \n==========================================\n  Files           7        7            \n  Lines         347      344       -3   \n  Branches       33       32       -1   \n==========================================\n- Hits          336      332       -4   \n- Misses          9       10       +1   \n  Partials        2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/retry-policies.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/WebClient.ts | 96.03% <100%> (-0.02%) | :arrow_down: |\n| src/util.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| src/logger.ts | 93.93% <100%> (-3.12%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 71aebba...21b1a93. Read the comment docs.\n. # Codecov Report\nMerging #719 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #719      +/-\n==========================================\n+ Coverage   93.94%   93.95%   +0.01%   \n==========================================\n  Files           7        7            \n  Lines         446      447       +1   \n  Branches       43       43            \n==========================================\n+ Hits          419      420       +1   \n  Misses         25       25            \n  Partials        2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/IncomingWebhook.ts | 92.85% <100%> (+0.26%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c640509...1813a8f. Read the comment docs.\n. # Codecov Report\nMerging #720 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #720   +/-\n=======================================\n  Coverage   93.94%   93.94%         \n=======================================\n  Files           7        7         \n  Lines         446      446         \n  Branches       43       43         \n=======================================\n  Hits          419      419         \n  Misses         25       25         \n  Partials        2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 95.8% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c640509...2ef09df. Read the comment docs.\n. # Codecov Report\nMerging #724 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #724      +/-\n==========================================\n+ Coverage   93.95%   93.97%   +0.01%   \n==========================================\n  Files           7        7            \n  Lines         447      448       +1   \n  Branches       43       43            \n==========================================\n+ Hits          420      421       +1   \n  Misses         25       25            \n  Partials        2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 95.81% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e62f4e5...7fb6457. Read the comment docs.\n. # Codecov Report\nMerging #725 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #725   +/-\n=======================================\n  Coverage   93.97%   93.97%         \n=======================================\n  Files           7        7         \n  Lines         448      448         \n  Branches       43       43         \n=======================================\n  Hits          421      421         \n  Misses         25       25         \n  Partials        2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e650d63...27ef07d. Read the comment docs.\n. # Codecov Report\nMerging #726 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #726   +/-\n=======================================\n  Coverage   93.97%   93.97%         \n=======================================\n  Files           7        7         \n  Lines         448      448         \n  Branches       43       43         \n=======================================\n  Hits          421      421         \n  Misses         25       25         \n  Partials        2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/WebClient.ts | 95.81% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e650d63...75a013f. Read the comment docs.\n. # Codecov Report\nMerging #727 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #727   +/-\n=======================================\n  Coverage   93.97%   93.97%         \n=======================================\n  Files           7        7         \n  Lines         448      448         \n  Branches       43       43         \n=======================================\n  Hits          421      421         \n  Misses         25       25         \n  Partials        2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ff75c31...1cc1a72. Read the comment docs.\n. # Codecov Report\nMerging #743 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #743   +/-\n=======================================\n  Coverage   93.97%   93.97%         \n=======================================\n  Files           7        7         \n  Lines         448      448         \n  Branches       43       43         \n=======================================\n  Hits          421      421         \n  Misses         25       25         \n  Partials        2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/methods.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/WebClient.ts | 95.81% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1d40496...156ae36. Read the comment docs.\n. # Codecov Report\nMerging #744 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #744   +/-\n=======================================\n  Coverage   93.97%   93.97%         \n=======================================\n  Files           7        7         \n  Lines         448      448         \n  Branches       43       43         \n=======================================\n  Hits          421      421         \n  Misses         25       25         \n  Partials        2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 91050ef...8d8a3a5. Read the comment docs.\n. \n",
    "beardouglas": "LGTM. ",
    "raoradica": "Hi,\nI am having the same issue with chat.postMessage not working with attachments parameter. It stopped working around 4th-5th February. These are the return values.\n{ error: \"no_text\",\nok: false}\nAttachments should work regardless of the text parameter. Is there any workaround or fix for this?. Hi Shane,\nHere are the details.\n\n1st log is attachment object\n2nd is the attachment object stringified using JSON.stringify:\n{\"attachments\":[{\"footer\":\"Narenthira Rao\",\"footer_icon\":\"\nhttps://vecta.io/images/Vectalogo_notif.png\",\"ts\":1550644742.832,\"title\":\"Untitled\ndrawing created \",\"title_link\":\"\nhttp://vecta.test/app/edit/-LZ8cDj-G3LvItm06JJP\"}]}\n3rd is the stringified json presented as a URL encoded string using\nencodeURIComponent():\n%7B%22attachments%22%3A%5B%7B%22footer%22%3A%22Narenthira%20Rao%22%2C%22footer_icon%22%3A%22https%3A%2F%2Fvecta.io%2Fimages%2FVectalogo_notif.png%22%2C%22ts%22%3A1550644742.832%2C%22title%22%3A%22Untitled%20drawing%20created%20%22%2C%22title_link%22%3A%22http%3A%2F%2Fvecta.test%2Fapp%2Fedit%2F-LZ8cDj-G3LvItm06JJP%22%7D%5D%7D\n4th is the slack response data.\nMy ajax:\n\nI removed my token and channel id , Please let me know if you guys need\nmore information. Thank you.\nRegards,\nOn Thu, Feb 21, 2019 at 3:54 AM Shane DeWael notifications@github.com\nwrote:\n\n@raoradica https://github.com/raoradica \ud83d\udc4bSorry you've had recent\nproblems sending attachments - I'm looking into it to determine if\nsomething on our end caused this error to recently pop up.\nIn the meantime, it'd be really helpful if you could provide your message\npayload so I can try to reproduce this myself. I tried a few different\npayloads but wasn't able to get the same error while using attachments.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/slackapi/node-slack-sdk/issues/321#issuecomment-465729714,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AflaC5J67leqkRnOS1Ii9C2zVbDyqTN_ks5vPafjgaJpZM4MI3Ue\n.\n. Hi Ankur,\n\nSorry for posting at the wrong place, was looking for immediate help. The\nproblem: there was a change in how the attachment array is structured and\nsent out but the documentation was not updated. The docs stated prefer POST( https://api.slack.com/methods/chat.postMessage). I already contacted the\nslack support about it, and hopefully they will make changes needed. And\nupcoming  https://api.slack.com/messaging/composing is the preferred\nchannel to refer to. Thanks again for the effort and suggestion, may\nconsider the sdk in the near future.\nOn Wed, Feb 27, 2019 at 4:04 AM Ankur Oberoi notifications@github.com\nwrote:\n\nI was able to reproduce this issue using the API tester on api.slack.com.\nThis is a platform issue, and not an issue in the SDK.\n@raoradica https://github.com/raoradica your code is using jQuery's\n$.ajax(), not the WebClient of this package. We'll try to help you out,\nbut this issue doesn't really belong here.\nthis issue comes down to the fact that you're sending arguments as GET\nparams (also known as query params) using a POST request. this isn't\nstrictly wrong, but it's not how most people would use the API. the problem\ncan be avoided if you put the arguments in the request body (as how POST\nrequests typically are used). an even easier solution: use the WebClient\nfrom this package. we serialize arguments in a supported (and often better,\nmore secure) way.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/slackapi/node-slack-sdk/issues/321#issuecomment-467592041,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AflaC0VpfSfC5mBEmwm2ZBBjm9VX1Qirks5vRZNUgaJpZM4MI3Ue\n.\n. \n",
    "shanedewael": "@raoradica \ud83d\udc4bSorry you've had recent problems sending attachments - I'm looking into it to determine if something on our end caused this error to recently pop up. \nIn the meantime, it'd be really helpful if you could provide your message payload so I can try to reproduce this myself. I tried a few different payloads but wasn't able to get the same error while using attachments.. @aoberoi Made some changes based on your suggestions.. @aoberoi I manually hacked together a way to reproduce the bugs by emitting a handshake event in RTMClient.ts, listening to that event, and then forcibly closing the websocket in that state. This let me develop a solution to handle the error, and then by thinking through race conditions in KeepAlive.ts, prevent it from happening in the first place.. @bmajz We saw the errors you received as two different issues (both of which should be addressed). For the unhandled websocket close event, it seems related to #537. In the state machine, it looks like the websocket close event isn't properly handled in the authenticated substate of connecting. It will (hopefully) be a pretty simple fix. \nWhen we looked into the second error you saw in KeepAlive, it seemed as if the stop() function wasn't clearing state properly. This seems less critical than the state machine bug, but should also be a fairly quick fix.. Though it's a little bit of a longer name, maybe impersonate could be an alternative? I think it more clearly connotes what is taking place inside of the app.. @janniks Thanks for raising this \ud83d\ude47This is in fact a bug on the platform and I've reported it to the team. The bug is that no user mentions should be rendering inside of a plain_text object (rather than both).\nTo render user mentions with blocks, you'll have to use the mrkdwn text object instead of the plain_text one. mrkdwn is supported within the context block so this should be a fairly simple fix but let me know if you run into any issues \ud83d\ude42\nThere's some relevant documentation and examples for mentioning users with blocks on the API site.. Good call @aoberoi \ud83d\ude47 . This verbiage was copied from the original README, but I will try to make more clear.. \ud83d\ude0e . Should this be deleted?. \ud83e\udd14 . ??. oops I was thinking of refresh tokens when I wrote this \ud83d\ude13 . Should we add a one-liner recommending against the RTM API except in special cases? Right now it reads as if it's recommended.. replace \"tons of scopes\" with \"over 60 scopes\". Do we really want to remove the word access? Not opposed to this, but since it's an \"OAuth Access Token\", there's a certain level of continuity by using SLACK_ACCESS_TOKEN. This confused me more than helped (especially the word SNIP). I feel like you can just remove this line and the line above and just show how the message::channel_name event is used. This sentence is confusing. Maybe \"When the program is running and you rename a channel your bot is a member of, you should see the logged message.\". \"Try these examples out for yourself by cloning (or downloading) this repository and running npm install in this directory\". Can we list out the options here?. Same as above comment. Suggested edit: \"While the use of logging functions is deprecated, the logger option will still currently accept a function if the method signature matches fn(level: string, message: string).\"\nThe main thing I want to change is for the deprecation part to be at the beginning of the note.. ",
    "fnky": "This would be very useful for cases where we might get tokens asynchronously. Instead of having to create a new WebClient every time. For example, if we'd like to retrieve the token from a database before doing the request:\njs\nconst web = new WebClient(<default token>)\nconst getMembers = (teamId) =>\n  getTeam(teamId)\n    .then(team => web.users.list({ presence: false, token: team.accessToken }))\n    .then(response => response.members)\nWhere token would override the default token provided to WebClient and remove it from the request body.. ",
    "AnimaMundi": "Will take a look at this tonight, as far as I remember it's a fairly simple fix.. ",
    "frrakn": "This was a while back, so difficult to remember. As I vaguely recall, err comes up when theres a network / communication error, whereas if you successfully make a request that results in a 4XX or 5XX it will not return an error, but will return a bad status code.\nFeel free to close, this information isn't particularly fresh in my mind - however, the method signature was the main point of my update - the callback should match the callback on line 11 here:\nhttps://github.com/slackapi/node-slack-sdk/blob/master/lib/clients/transports/request.js. ",
    "CLAassistant": " All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Murray Smith seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Roman Balayan seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA.. ",
    "ashubham": "@bmajz While we wait for the slackers to review this. It would be beneficial to the community if you submit this to DefinitelyTyped and/or roll out a @types/@slack/client package on npm ?\nAlthough, there are some issues with this typescript definition files. For e.g. required params following optional params, some typings are wrong for example SlackChatPostMessageParams should not have channel but its a required prop in that interface. You might want to resolve these.. ",
    "DominikPalo": "@bmajz I think it is not possible yet, because @types still can not support types for scoped packages (and the slack client module is scoped under @slack). See: https://github.com/Microsoft/types-publisher/issues/155. @aoberoi thank you for a detailed explanation. I know about pros of the Events API, but I need to stick with the RTM API for now because with the Web API it's not possible to simulate \"typing indicator\" user_typing (which we need to show in bot conversations). And error in the handleHttpResponse method is fired when my bot is trying to reconnect (after token was revoked).\nwarn: Reconnecting, on attempt 1\nerror: Response not OK:  account_inactive\nerror: Disconnecting because account_inactive is not recoverable\nerror:  Error: account_inactive.... @aoberoi thank you :) Done. Thanks, done :). Done. It seems that the same problem affects also other WebClient methods - e.g. chat.postMessage. After a few hours of investigating, debugging and trying to isolate a minimal example from our project I found that the problem was caused by the combination of HAPI.js and a specific version of the newrelic module. Memory leaks were happening only when a method of Slack WebClient was called in a HAPI.js route handler with await. But, after removing  the newrelic module library I wasn't able to replicate the problem. Then I updated the newrelic module from the version 2.4.0 to the version 2.9.1 and it helped - now all works fine, no memory leaks.. @brianeletype sorry, I already made it https://github.com/slackapi/node-slack-sdk/pull/551 :). thanks, I understand, but our UX team uses Walkiebot for designing flows and messages. We also plan to fetch those messages designed by Walkiebot automatically to our integrations (using the Walkiebot API), but there is a problem - Walkiebot generates JSON/JS of designed attachments with attachmet_type field included (see the attached screenshot), therefore the output is not compatible with this SDK and we have to manually remove this field from every exported message. I can contact Walkiebot and ask them to remove this field, but it seems, they strictly stick to Slack API specs, so maybe as a first step is good to remove this unnecessary field from Slack API documentation.\n\n. I would prefer to use a union type instead of an enum, because if a declare it as an enum type, e.g.:\n```\nexport enum MrkdwnIn {\n  Pretext: 'pretext',\n  Text: 'text',\n  Fields: 'fields'\n}\nMessageAttachment {\n  //...\n  mrkdwn_in?: MrkdwnIn[];\n}\nit won't be possible to define mesages in this \"plain\" way\nconst attachment: MessageAttachment = {\n  mrkdwn_in: ['pretext']\n}\nand forces a user to use this style:\nconst attachment: MessageAttachment = {\n  mrkdwn_in: ['MrkdownIn.Pretext']\n}\n```\nso it won't be compatible with exports from tools like Walkiebot (and also with old projects, based on the older SDK).\nBut I can write it as a separate union type instead, to make it more readable:\n```\nexport type MrkdwnIn = 'pretext' | 'text' | 'fields';\nMessageAttachment {\n  //...\n  mrkdwn_in?: MrkdwnIn[];\n}\n```\nwhat do you think?\n. thanks, we use TypeScript for all our projects - but I thought before that our attachments were incompatible with the MessageAttachment because of missing the attachment_type field, but as I see now, my assumption is not true (thanks to the AuxiliaryArguments). Our incompatibility comes from missing types in the nested field MessageAttachment.actions - the current type definition for actions contains only two fields:\nactions?: {\n    type: string;\n    text?: string;\n  }[];\nbut the attachment actions in our project contains additional fields. So I will prepare a separate PR also with complete definitions for the attachment actions.. This field is optional, so I think it should be defined as min_query_length? instead of min_query_length. This field is optional, so I think it should be defined as selected_options? instead of selected_options. Please, add also the optional field url?: string (used with link buttons, see https://api.slack.com/docs/message-attachments#link_buttons). This field is optional, so I think it should be defined as name? instead of name (it's required only for standard actions, but it's not used with link buttons - see https://api.slack.com/docs/message-attachments#link_buttons)\n. ",
    "bilby91": "Has anyone actually used this typings ? I'm having some trouble to use them. Not sure if is the problem with the scoped modules.. I managed to get the typings working. I had to include the ws references and import them inside.\n```\n// Type definitions for node-slack-sdk\n// Project: https://github.com/slackapi/node-slack-sdk\n// Definitions by: Bilal Aijazi https://github.com/bmajz\n/// \ndeclare module '@slack/client' {\n  import * as WebSocket from 'ws'\n  ....\n```\nBTW. I think that the scope packages issue is resolved. If I understood correctly this package need to be named slack__client. It would be awesome to have it DefinitelyTyped! Typings are working perfectly . Any progress on this ? I had made some improvements to the typings provided in the thread but it's complicated to contribute if we don't have them in the @types repo.. Awesome! We have a few enhancements to the previously posted typing that we want to contribute back.. We managed to solve the issue. Bug on our end. https://github.com/suttna/botbuilder-slack/pull/19. Any ETA for a new release ?. \ud83c\udf89. I'm getting the following error that based on the interfaces is seems accurate.\nArgument of type '{ channel: string; }' is not assignable to parameter of type 'TokenOverridable'.\n  Object literal may only specify known properties, and 'channel' does not exist in type 'TokenOverridable'.\nOn the other side, client.channels.info accepts the channel option.. @aoberoi Great! So, if #484 is a generic issue, a lot of method arguments will probably be wrong right ?. @aoberoi Awesome, let me know if I can help!. ",
    "slawiko": "@bmajz how it goes? Did you add these types in DefinitelyTyped? Could I help you with it?. ",
    "orta": "There is already the start of a type definition for this SDK ( https://github.com/DefinitelyTyped/DefinitelyTyped/pull/12195 ) in definitely typed, it'd need updating to use the new @slack/client module name, but updating that is probably the right way to go at this point. \ud83c\udf89 . ",
    "brianleroux": "cc'ing @ryanblock for context and further deep thots\nGoing to spend some time collecting some (not too deep) thoughts in this conversation myself this weekend. Quickly tho\u2026\nDefinitely open to, and would like to encourage, the basis of https://github.com/smallwins/slack for the lower level layers. Its already built in a modular fashion enabling opt-in to specific bits and that should probably continue. Having some extra eyeballs would be great tho we have found it really easy to maintain since its 99% generated code. (I've had a long desire to make that 100% by way of a bot just because it'd be fucking awesome and meta.)\nWRT to esmodules. I regret supporting them but feel that lib should continue to do so. I hesitate to introduce a breaking change for aesthetics which in itself is ironic because esmodules of the future will break current transpiled semantics. Very unfortunate for all of JavaScript. Good news is require works now with billions of packages, and will continue to do so for the foreseeable future so transpile to ES5 really isn't that bad of a thing. Its boring. And boring is good when it comes to module systems! ;) Besides all this banter there is no minification tooling for esnext yet so a transpile is required to ES5 for any app serious about performance (which\u2026should be all of them).\nThat leads me to another high level goal I'd like to propose: small payload! \nWe are based on AWS Lambda and keeping our cold execution startup times reasonable means we need to keep the JS lean. I had to rip out request a while back because it bloated our lib up to 10mb, making our cold start on lambda 3s, making Slack Events API retry our endpoint, making our bot respond to everything three times. Not awesome. Replacing it was easy though and now the lib has only two dependencies. Super tiny: and it would be awesome to keep it that way; not just for Lambda but browser based apps too. \nMore soon! But have a rad weekend all. \ud83d\udc95 \n. ",
    "jyotman": "I can successfully send attachments in the webhook @samosale.. ",
    "KTachibanaM": "The error message returned back wasn't helpful neither, because in case of passing in the wrong order of parameters in RTM method, the error message doesn't say what channel id is wrong, but merely the channel id is wrong. I couldn't find the source code on the SDK itself, so I believe the error message is concatenated on server-side.\n\nUsing a bot token to send a message on behalf of a bot via Web API doesn't seem to show the bot's avatar (maybe name as well? Couldn't remember) on the Slack UI, so I switched from web API to RTM method.\n. @kubik369 Good to know that thanks. ",
    "kubik369": "@KTachibanaM You don't need to move to RTM method for that, just pass {as_user: true} to optional parameters of the postMessage method :). ",
    "mazerab": "Thank you for the prompt reply and it does make sense. It would be nice to have this logged as a feature request. . @aoberoi There is nothing preventing me from using Web API and it is working fine. I just find it more natural to continue using the RTM API since this is what I'm using in the script throughout. It would be nice not to have to switch to the Web API to accomplish this simple request.. ",
    "againer": "@aoberoi, CLA signed.  Thanks!. @aoberoi updated.. ",
    "lukeb-uk": "I was just correcting the example to do what the text above it said it was actually doing.. ",
    "matthewdias": "ah ok. i will try that. I wasn't sure of the parameter order, as I was going off of the docs. is there a different place i can reference to see the proper order?\nAlso the unfurling guide gives the following description for the token param:\n\ntoken - the user token granted to you when installing your app for the team you're acting on behalf of.\n\nDoes this mean i need to instantiate the WebClient with that same token i got from auth? I was under the impression that I was supposed to pass my slack api token there. (edit: yes, i need to use the token from auth). ",
    "markcarey": "Through trial and error I discovered the issue was that my attachment was missing a fallback element.  After adding a fallback element, it worked.\nAn error or warning would be helpful in such cases. FWIW, I also tried botkit, with the same results: no attachment posted without a fallback and also no error/warning.. Thanks @aoberoi \n+1 for the idea of defaulting fallback -- I like it.. Any update on the PR from Sept 26th? ;). Just noticed that ts and channel are in the wrong order for chat.delete as well..... ",
    "mozamimy": "I executed npm run make-docs and there were more differences than I thought ( https://github.com/slackapi/node-slack-sdk/pull/342/commits/9a5bcc86c12a4e7709eb93380ea9ec7ce2870444 ).\nIs it ok?. Thank you for reviewing the description.\nI updated it in https://github.com/slackapi/node-slack-sdk/pull/342/commits/11e401c76c79e0a6385bcf3fa00ce8f7e012c7b8. ",
    "hparadiz": "Thank you for the detailed response.\nSo when I submitted a support ticket initially I was actually told of undocumented API variables for users.list.\n\n\nPass a limit argument to restrict the number of entries returned. This should just be a number \u2014 \"1000\" is probably a good one to start with.\nWhen a subsequent page exists, we will return an offset\nfield in the response. You can then call the next set of results with the \noffset from the previous response to get to the next page. If no offset is provided, you have reached the last page. This way, you can recursively call the API for as long as an \noffset exists in our response.\n\n\nI know this isn't true pagination since you can't just call page N but it would allow users.list to handle large orgs and at least in this use case you're trying to pull the entire list anyway. And it can be done now with no changes to the slack api.\n\nI'm a little perplexed by SLACK_CLIENT_OPTIONS. I can't find where it reads process.env.SLACK_CLIENT_OPTIONS.\nI tried searching for it in https://github.com/slackapi/hubot-slack/ but only found it as a regular variable and not an environmental variable.\nRight now I'm just commenting out these three lines of code to prevent users.list from being called\nhttps://github.com/slackapi/hubot-slack/blob/master/src/bot.coffee#L56-L58\nI want to avoid forking hubot-slack just to edit SLACK_CLIENT_OPTIONS so if there's some example usage of SLACK_CLIENT_OPTIONS as an environmental variable that'd be great.. ",
    "chapmanc": "Nice, thanks.  How long does it usually take to get these changes into the wild? . ",
    "kwonoj": "@aoberoi I've peek into existing documentation (i.e: https://slackapi.github.io/node-slack-sdk/reference/SlackDataStore), and I don't think there is strong differences between documentation generated by typedoc (https://github.com/TypeStrong/typedoc).\nIn a high level, there could be possibly few differences - \n- Object can be detailed interface or types \nfor example, think of simple function like () => { a: 1}; then typedoc will represent return type as {a: string}. This is just enhanced represenation of object as similar to other (ESDoc, i.e) can do as well.\n\nGenerics can appear documentation\nfunctions like listify(arr: Array<T>, conj?: \"or\" | \"and\"): Array<T> will still have generic representation in documentation. As plain javascript doesn't have concept of generics, this is one thing could possibly different to plain JS based documentation, but I guess this can be sufficiently explained by supplied doc comment to each generic means.\n\nMy suggestion in here is not to limit options to transform TS codes to JS-doc-compatible but try out other ooto documentation as well. If those results are highly different to plain JS then considering transformation should be way to go.. Also in addition to ng's tsickle, it's worth to visit ng's documentation tool itself (https://github.com/angular/angular/tree/master/aio), which generates documentation like https://angular.io/docs/ts/latest/api/http/index/Http-class.html . Those tool internally uses Dgeni (https://github.com/angular/dgeni). Dgeni itself is highly configurable, so this would be probably best solution if we want customized documentation for specific purposes.. @aoberoi yes, makes sense. Let's try to find out if things are not working with tsdocs.. absolutely \u2728  I'll prep changes.. Rebased, and target base changed to dev-v4.. > it is limited to only number values, not strings as we would need. the general recommendation is to use string literal types to represent a string value enum \nI may need to re-read thread again to understand crux of issue, but for above specific only - thanksfully 2.4RC now support long-waited string based enum (https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-enums) and probably once sdk starts actual migration, it'll be available in public release. \n. @aoberoi for case of interfaces there's way so called augumentation, but that doesn't work with enums so far I know. I have to check once 2.4 released to ensure it though.\naside from possibility, I'd generally not consider as good practices to push forward. While there are some debates around managing versions of types, but it is generally safe type changes are also part of semver changes. If we really want to ship incomplete definition as aligned with current releases, it'd better to make type check loosened instead of strong typed one and let user customize it. i.e,\n``\ntype messageType = 'type1' | 'type2';\n//instead of strong type constraint tomessageType`\nconst interfaceA = (mType: messageType, ...args: Array);\n//loosened to accept string. This doesn't provide strict type checking to block value \n//other than specific type, but messageType is already incomplete\n//once messageType is completes and next time bump up major semver, interface can be narrowed down to typeof interfaceA\nconst interfaceB = (mType: messageType | string, ...args: Array);\n``\n. So after I read through issue itself, I came to realize this actually needs to be separated with a discussion of TS migration. For this specific matter, typescript has nothing to related to original feature request. It only becomes relevant if we're going to use exported enum list into some of constraint for interfaces, but as we're nowhere to close to export any type definition yet, it's not current scope of discussion. if it's non-runtime type export (i.e,type` only or either interface only) then it's something diverge between TS users and JS user that need to be reconsidered. (I'd personally think this is more feasible way to go, but that's personal opinion and should be discussed separately).\nBack to original issue, I'm getting impression that request is export run-time-accessible list of types being used in sdk. I can't say if it's useful or not in terms of purpose of sdk and I believe @aoberoi can fullfil this subject. To clarify, if it's going to be runtime values to be exported, either JS or TS will have same access cause TS is just javascript. (Especially to javascript user, there should not be any differences).. ",
    "tijs": "ok never mind. the file ID is required so it should be a separate argument not part of the object with extra arguments. \nreally not a fan of this api design btw but to each his own :). ",
    "matanlb": "@aoberoi thanks for the replay.\nI have to say I not sure I'm following to way would the SDK fall back behind the platform when it comes to simple enums. But even if we assume that it does, why is a temporary partial definition is worst then a full user-application side implementation. \nAssuming that an enum value had be changed or edited, a re-deployment of to the user-application is required, regardless of whether the events enum is defined in the user code or the SDK.\nIf the enums are defined in the SDK, most changes to these can be released as a minor or even a patch. Assuming most applications set there update policy to auto-update minor & patch, the user-application will not require any code changes, just a redeployment of the application reinstalling the packages.\nIn cases when the update to the enum cannot be considered a minor or a patch (can u give an example when this is the case?) user-application can for a short while define them in there own code (which they will have to do anyway in the other scenario) until the SDK catch up. This way most application can enjoy ease of mind when it comes to keeping up with the changing API. (I say most seance I assume changes that require a major update relate to bleeding edge features, so applications using them need to keep track either way).\nThe alternative to that, where all enums are defined in the user-application code, I think is more fragile. Each change to the enum will require all users to do update the application code.\nAnd while the string-enum pattern is very common, many developers still hard-code these kind values in there code. I agree that this is a bad habit, but aside from the fact then it's still in use, it can provide stability to application how do use enums such as that.\n\nWhen would an update the these enum require a major update?\n\nIn what way a temporary user-application patch of the missing enums values is worst?. @aoberoi thank you for taking the time to read in and explain a bit about TypeScript limitations (I work mainly in JS), but I'm not sure how this is relevant to the issue here.\n\n\nAre you planning to completely deprecate the JS library?\nYes, TS is transpiled to JS, but in my experience the packages end up being a more difficult to use in a vanilla JS application.\nShould I take from this that this repo is to forsaken (or turn completely TS) in the near future?\n\n\nWhy would you want to restrict yourself to a tightly defined enum-type?\nI completely agree with your reasoning regarding the problems of using strongly typed TS enums for this. But since tight-coupling is what we are trying to avoid here, why not just use the classic JS-like \"enum\" as we've talked earlier? It still solves all of the issues raised here and is completely doable in TS, assuming the methods describe a simple string parameter instead of the typed enum. Only difference is users can choose to either rally on the package defined literals for stability if they want to, and temporarily add missing values between versions. Users how want to define the literals in there own code can still do just that.\n\n\nI think we can all agree that using string literals directly in the code is bad, especially when used in more then one place. Savvy users of this package are proboblsy already maintaining a version of these enums in there own applications, so why not simply move the implementation inward?. @aoberoi\nMy primary use case for this is reuse/centralization of this string literals.\nHaving these declared at the application is an unneeded duplication and makes the integration with the SDK more fragile.\nHaving them declared just in the example you gave is great. As long as the SDK keeps pace with the backend people can simply upgrade the package version to deal with changes, and in the chance the SDK falls back users needing these new/changed literals can simply add/edit those in the application side (as they need to do now).\nRegarding the errors, the use case for that is not for debug, This can definitely be done by digging in the docs. What I'm more concern about is error handling, for places where different behaviors are needed for different errors.\nFor example for looking for information about a group. If a group is not found, in one of my use cases this is a non issue, so looking at the error message I can suppress it while logging and bubbling all other errors.\nAnd so instead of defining these error message in the application side, it be better to be able to import them from the SDK.\nA better but a more development heavy approach would be to create a different Error extending type so it could be leveraged by libraries like bluebird that offer catch error type filtering.. ",
    "Finkes": "I can confirm this issue.\nsee @slack/client/lib/clients/web/channels.js 45-58:\n```\n/\n * Creates a channel.\n * @see {@link https://api.slack.com/methods/channels.create|channels.create}\n \n * @param {?} name - Name of channel to create\n * @param {function=} optCb Optional callback, if not using promises.\n /\nChannelsFacet.prototype.create = function create(name, optCb) {\n  var requiredArgs = {\n    name: name\n  };\nreturn this.makeAPICall('channels.create', requiredArgs, null, optCb);\n};\n```. i reported this issue as well in #420 . ",
    "eiriksf": "I am experiencing the same error, invalid_array_arg while trying to update the profile of an slack user. \nThe code i am using is this: \nvar opts = {\n        user  : userprofile.user,\n        profile : userprofile.profile\n      };\n      console.log(opts);\n      web.users.profile.set(opts, function (err, userprofile) {\n        if (err) {\n          console.log(\"Err: \" +err)\n      } else {        \n        return callback(info);\n      }});``. ",
    "slavahatnuke": "@DominikPalo @aoberoi I see same picture with:\n```javascript\nvar WebClient = require('@slack/client').WebClient;\nvar web = new WebClient('xoxp-........-18377996225-213988902994-9bf9fc28........');\nvar message = {\n  \"text\": \"Would you like to play a game?\",\n  \"attachments\": [\n    {\n      \"text\": \"Choose a game to play\",\n      \"fallback\": \"You are unable to choose a game\",\n      \"callback_id\": \"wopr_game\",\n      \"color\": \"#3AA3E3\",\n      \"attachment_type\": \"default\",\n      \"actions\": [\n        {\n          \"name\": \"game\",\n          \"text\": \"Chess\",\n          \"type\": \"button\",\n          \"value\": \"chess\"\n        },\n        {\n          \"name\": \"game\",\n          \"text\": \"Falken's Maze\",\n          \"type\": \"button\",\n          \"value\": \"maze\"\n        }\n      ]\n    }\n  ]\n};\nweb.chat.postMessage('#mychannel', message, function(err, res) {\n  if (err) {\n    console.log('Error:', err);\n  } else {\n    console.log('Message sent: ', res);\n  }\n});\n```\nGot Error:\nerror: Response not OK:  invalid_array_arg\nError: Error: invalid_array_arg\n    at handleHttpResponse (/Users/slava/project/GitProFlow-2/node_modules/@slack/client/lib/clients/transports/call-transport.js:103:17)\n    at handleTransportResponse (/Users/slava/project/GitProFlow-2/node_modules/@slack/client/lib/clients/transports/call-transport.js:153:19)\n    at apply (/Users/slava/project/GitProFlow-2/node_modules/lodash/lodash.js:499:17)\n    at wrapper (/Users/slava/project/GitProFlow-2/node_modules/lodash/lodash.js:5356:16)\n    at Request.handleRequestTranportRes (/Users/slava/project/GitProFlow-2/node_modules/@slack/client/lib/clients/transports/request.js:20:5)\n    at apply (/Users/slava/project/GitProFlow-2/node_modules/lodash/lodash.js:499:17)\n    at Request.wrapper [as _callback] (/Users/slava/project/GitProFlow-2/node_modules/lodash/lodash.js:5356:16)\n    at Request.self.callback (/Users/slava/project/GitProFlow-2/node_modules/request/request.js:188:22)\n    at emitTwo (events.js:106:13)\n    at Request.emit (events.js:191:7)\n    at Request.<anonymous> (/Users/slava/project/GitProFlow-2/node_modules/request/request.js:1171:10)\nVersion:\n\"name\": \"@slack/client\",\n  \"version\": \"3.10.0\",\n  \"description\": \"A library for creating a Slack client\",\n@aoberoi should I create new issue or is it related?\n. ",
    "MohamadAtieh": "I'm experiencing the same issue when updating the status. ",
    "gczene": "hi @aoberoi !\nThanks for the reply!\nWhen we implemented our custom slackbot user ~1.5 years ago it seemed to be a good way to use RTM to trigger some actions on the server. We didn't intend to build a slack app for this purpose since it was started as a have-fun-lets-see tool only for our company. However I can say this tool is improved and used in several teams (I mean channels) happily and as a new feature we need to implement delete functionality to maintain messages.\nFor short term I am implementing your recommendation and I am going to reconsider to move to webclient where it is possible. \nThanks you for your help!\n . ",
    "Rolias": "I would also like to cast a vote for some better examples. EVEN MORE IMPORTANTLY - In the docs on the Slack Developer Kit for Node.js in the General Web API patterns  There is an example showing how to handle optional parameters HOWEVER it would appear to be quite misleading (aka wrong). It shows a JSON object being passed in directly after the required objects but I found I had to JSON.stringify() any JSON object first. I couldn't find this documented anywhere other than StackOverflow. I was working with the webClient.users.profile.set() API and a good example here would have been hugely valuable. . ",
    "Redblueflame": "I'm trying to get timeStamp from message.id, but it's returning this error : \nerror: Response not OK:  no_item_specified\nMy code (cutted): \njavascript\nrtm.on(RTM_EVENTS.MESSAGE, function handleRtmMessage(message) {\n     [...]\n          slackWeb.reactions.add(':thumbsup:', { channel: message.channel, timestamp: message.id });\n     [...]\n}\n. ",
    "Restuta": "alright, thanks for explaining. ",
    "jannhama": "@clavin Do you know who creates .npmrc file? This happened to me as well with a project that was working just fine earlier.. ",
    "josephrexme": "Thanks @aoberoi it works as expected now. I'd thought the Events API might be limited to specific events only meanwhile I wanted to be able to reply to anything asked. I'll look into them closely again and I'd be able to make a decision from there.. Is there a particular reason you recommend against RTM?. Thanks. ",
    "mismith": "I have signed both :)\nOn Tue, Aug 8, 2017 at 16:03 Roach notifications@github.com wrote:\n\n@mismith https://github.com/mismith thanks for adding this \ud83d\udc4d\nWould you mind signing the CLA (linked in the comments above) so we can\nget this merged?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/slackapi/node-slack-sdk/pull/380#issuecomment-321094724,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAm_YH0zbFxEBYmgiu4FLEr09vU9lf84ks5sWNsRgaJpZM4OrbL8\n.\n. Sorry I no longer have time to work on this :(. \n",
    "gunar": "Nice! @aoberoi when can I expect a new version published to npm? Thank you.. > https://nodesecurity.io/advisories/550. I've asked nsp to update the advisory regarding 1.1.15, just in case.\nNot sure their format accepts such conditions (>=3.3.1 or>=1.1.5).. Fixed! https://nodesecurity.io/advisories/550. It seems handleRateLimitResponse is a special case and doesn't really use the library retry.. same here. @aerobi whatever is fastest. Thank you!!. ",
    "garthk": "~I've tried a few patterns, with no luck:~ Turned out all these were subtle lies:\n// https://github.com/slackapi/node-slack-sdk/blob/5bcdcd02fd181516a9227dc82438d30efd4d62d5/README.md#posting-a-message-with-incoming-webhooks\nwebhook.send('payload', (err, header, statusCode, body) => {\n // never gets called\n});\n// https://slackapi.github.io/node-slack-sdk/basic_usage#posting-a-message-with-web-api\nwebhook.send('Hello there', function(err, res) {\n  // never gets called\n});\n// if it also supported Promises:\nwebhook.send('Hello there') // returns undefined\n});\n. ",
    "boctor": "@aoberoi Done!. ",
    "hyeomans": "No worries, this was pretty much copy paste hehe! Thanks for adding it!. ",
    "nogurenn": "It feels more natural to invoke it \"statically.\" If it works, it works! \ud83d\udcaf . ",
    "lmammino": "This fails in node 0.12, do you still want to support this version?. Closing this one to be removed from my currently open PRs\nFeel free to clone my branch and open a dedicated PR if you still find this useful. ",
    "wilg": "I'm seeing this issue flagged in security software as well. How can I help get this fixed?. WebClient. Thanks @aoberoi! I set\"@slack/client\": \"^4.3.1\", but still get the same error message when I disable the internet to my app. I have all the Slack calls wrapped in try/catch.\nThis is the entire stacktrace:\nError: getaddrinfo ENOTFOUND slack.com slack.com:443\n    at errnoException (dns.js:50:10)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:91:26). This package only asks for \"got\": \"^8.0.3\", https://github.com/slackapi/node-slack-sdk/blob/master/package.json#L62 Shouldn't that be \"^8.3.2\"?\nMy project (using Yarn) says:\n\u203a yarn list got\nyarn list v1.3.2\nwarning Filtering by arguments is deprecated. Please use the pattern option instead.\n\u251c\u2500 got@8.3.1\n\u2514\u2500 package-json@4.0.1\n   \u2514\u2500 got@6.7.1\n\u2728  Done in 0.49s.. Oh yeah, duh. I assumed for some reason that doing yarn install after bumping the slack-client version would have updated the dependencies also, but I think it makes sense that it wouldn't.\nI'm not sure why it doesn't show up in yarn list. In yarn.lock it shows as a dependency:\n\"@slack/client@^4.3.1\":\n  version \"4.3.1\"\n  resolved \"https://registry.yarnpkg.com/@slack/client/-/client-4.3.1.tgz#5caa1eaf753e4fcd23d8c04bcdc215336867a233\"\n  dependencies:\n    \"@types/delay\" \"^2.0.1\"\n    \"@types/form-data\" \"^2.2.1\"\n    \"@types/got\" \"^7.1.7\"\n    \"@types/is-stream\" \"^1.1.0\"\n    \"@types/loglevel\" \"^1.5.3\"\n    \"@types/node\" \"^9.4.7\"\n    \"@types/p-cancelable\" \"^0.3.0\"\n    \"@types/p-queue\" \"^2.3.1\"\n    \"@types/p-retry\" \"^1.0.1\"\n    \"@types/retry\" \"^0.10.2\"\n    \"@types/url-join\" \"^0.8.2\"\n    \"@types/ws\" \"^5.1.1\"\n    delay \"^2.0.0\"\n    eventemitter3 \"^3.0.0\"\n    finity \"^0.5.4\"\n    form-data \"^2.3.1\"\n    got \"^8.0.3\"\n    is-stream \"^1.1.0\"\n    loglevel \"^1.6.1\"\n    object.entries \"^1.0.4\"\n    object.getownpropertydescriptors \"^2.0.3\"\n    object.values \"^1.0.4\"\n    p-cancelable \"^0.3.0\"\n    p-queue \"^2.3.0\"\n    p-retry \"^1.0.0\"\n    retry \"^0.10.1\"\n    url-join \"^4.0.0\"\n    ws \"^5.2.0\"\nMaybe its just how yarn list works? The full project is here: https://github.com/looker/actions/blob/master/yarn.lock\nI was able to properly bump the version with yarn upgrade @slack/client.\nMaking sure the version bump fixes the issue now.... Unfortunately my app still crashes the same way with got 8.3.2:\n```\nError: getaddrinfo ENOTFOUND slack.com slack.com:443\n    at errnoException (dns.js:50:10)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:91:26)\n[nodemon] app crashed - waiting for file changes before starting...\n^C\nruby-2.3.3 in actions/ on master \n\u203a yarn list got   \nyarn list v1.3.2\nwarning Filtering by arguments is deprecated. Please use the pattern option instead.\n\u251c\u2500 got@8.3.2\n\u2514\u2500 package-json@4.0.1\n   \u2514\u2500 got@6.7.1\n\u2728  Done in 0.49s.\n```\nThe code that's crashing is here (calling the execute method) https://github.com/looker/actions/blob/master/src/actions/slack/slack.ts#L26:L63. Interesting, thanks for investigating. I can't reproduce it with your script either (using the same node_modules as my main project), but I am still seeing it crash in my project. I'm trying to figure out what's different. It's definitely crashing during slack.files.upload, but I'm scratching my head for what could be causing it.. ",
    "cbilliau": "OK. I wasn't sure if the JSON changes impacted anything. I'll close this out then.. All of a sudden last Friday afternoon (EST) our bot(app) was unable to update any post that it was the author of. We believe we tracked the problem down to the search.message results which were no longer able to find any message posted by itself. So we changed the post object to include as_user: true. But, now the bot is posting as me, the person who installed and authorized the bot. \nAnd, yes, the bot(app) using the same token to post was unable to find and update a message where as_user was set to false for the original post.. Thank you.\nTo confirm, we have been using the same OAuth xoxp token generated by our Alert Reporter App to post a message, search for message, and update message for over a year and it was working until last Friday, 2/1/19. \nHow we use the App:\nWe have a program that will post an alert to a channel with a unique ID. A user clicks on the link in the post. The user evaluates the alert and selects a status for the alert. The program then searches for unique ID and updates the original post with the selected status. All this was being done by one App and all function calls were happening with one OAuth xoxp token.\nWhat Happened:\nIt appears that on Friday afternoon the program was unable to find the alert with the unique ID on slack that it had previously found and was returning every post on slack (all 7000+) except posts the App had posted.\n. Thank you.\nI have narrowed our issue down. The xoxp token posts, searches, updates as it has been. But, in order to have a successful search, we must put the search in a for-loop and have each search followed by a setTimeout() of 2-4 secs in order to find the alert. Also, if I include 'count', 'score', 'sort_dir' the search results in over 7000+ results. If those are left out of the search obj then it finds the correct post but only after 2-4 loops.\nEdit: What had been happening is in search.messages we had 'count', 'score', 'sort_dir' set in search query and it worked fine until Friday Feb 1. After Feb 1 it started resulting in 7000+ msg returns. This would prevent our updateMsg function from working and thus the program stopped. Removing 'count', 'score', 'sort_dir' from query and inserting a setTimeout between in our for-loop seemed to help.. Thanks. I will attempt adapting your recommended example above. In the meantime, the function we use to search is below. The Alert ID we search for is unique so we do not iterate over results from the search.message method as there is only one message that should contain that Alert ID. \nUp until 2/1/19 this function would find the unique Alert ID searched for. Now, the result from the search finds nearly all messages (thus the 7000+ number of results). If I drop \"count, sort, sort_dir\" from the query object it sometimes finds the Alert ID message but its hit or miss. I have a test that runs the function and maybe it finds the Alert ID message 2 out of every 5 times. very strange.\nFor now, we are planning to just rewriting our function that posts the alert to store the chat.postmessage return obj ts and channel ID in the database table with the alert's data and then call the ts and channel id from the db to use in chat.update instead of doing a search.\n```\nfunction sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function searchSlackMsgs(alertId: number): Promise {\n  const queryString: string = Alert ID: ${alertId};\n  const client: WebClient = new WebClient(SLACK_TOKEN_ALERT_REPORTER);\n  const resObj: IMessageText = {\n    ts: '',\n    text: '',\n    channelId: '',\n  };\n  const searchQuery: any = {\n    query: queryString,\n       count: 1,\n       sort: 'score',\n       sort_dir: 'dsc',\n  };\n  for (let i: number = 0; i < 5; i += 1) {\n    const searchResult: any = await client.search.messages(searchQuery);\n    if (searchResult && searchResult.messages.total > 0) {\n      const msg: any = searchResult.messages.matches[0];\n      resObj.ts = msg.ts;\n      resObj.text = msg.text; // refreshUrl(msg.text);\n      resObj.channelId = msg.channel.id;\n      return resObj;\n        }\n        // console.log(\" Pause 2 sec \")\n        await sleep(2000);\n  }\n  return false;\n}\ninterface IMessageText {\n  ts: string;\n  text: string;\n  channelId: string;\n}\n```. ",
    "lpinca": "ws@1.1.5 is not vulnerable. Also I guess ws is only used as a client here in which case it doesn't really matter as the vulnerability is on the server.\nIt would be nice to update ws to the latest version nonetheless.. @aoberoi I agree on the major version bump. ws >= 2 only supports Node.js 4 or greater.. The correct range of vulnerable versions is >=0.6.0 <3.3.1 excluding 1.1.5. ",
    "jdforsythe": "This is now passing the nsp check. Thanks!. ",
    "t3h2mas": "After further looking, I am not sure this is possible with the websocket API, not specific to the node implementation. While I don't understand the limitation, if that's the case, this issue could be closed as a non issue. ",
    "Elyx0": "This one got me too.... ",
    "khuezy": "@aoberoi Thank you for responding!\nYes, I would like the Web API to allow topic changes w/o sending notifications to all the users and w/o posting a comment in the channel of the topic change\nMy use case: Display the current price of a cryptocurrency (eg Bitcoin) every minute as the topic. \nRight now, when I update the topic, it spams the channel with the topic change and it also notifies my users.\nThank you for forwarding to the team!. ",
    "bertrandom": "@aoberoi Let me try to get that parameter unhidden before we change this. And you make a good point, using options instead of user will help us future-proof if we add more params later, I'll update the PR.. @aoberoi Okay, I modified this to pass an options object, would you mind reviewing it one last time and then merging it in when you get a chance? Thanks.. I think the problem is that the way defaults works is by putting instanceOptions as the base of requestArgs and then layering the args on top of it. This means that after the args are layered on top, instanceOptions has now been overridden with the args specified by the caller.\nThis is problematic for the next request because then instanceOptions now also includes the args from the previous request. By ensuring that the original options object doesn't mutate and cloning it for each request, we avoid this issue.. ",
    "pine": "Hello @aoberoi. I've signed CLA \ud83d\ude4c . ",
    "soramichi": "@aoberoi thanks for the comment. We use our webpacked version of the sdk (with the patch I described above) in the client-side on electron. The reason why we use webpack is that Angular is based upon webpack and we cannot really separate them.. ",
    "rodrigo4244": "Thanks @aoberoi! I already edited the title and the message to reflect that! Let me know as soon as this is up and running. Thanks! . @aoberoi I want rateLimitRetryConfig! \nI just didn't want rate limited requests to be automatically retried and, instead, I want them to throw.. ",
    "shawnpetros": "Any update on this?. Honestly, I hadn\u2019t thought to try that yet, when I get back to my computer I\u2019ll try it.\nCheers!\nShawn Petros\nDevOps Engineer\nNorthwestern Mutual\nSent from my iPhone\n\nOn Feb 16, 2018, at 2:10 PM, Roach notifications@github.com wrote:\n@shawnpetros do you get the same result if you pass true as a string full: 'true' instead of a bool?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "gunjpan": "@aoberoi thoughts? FWIW, I updated my npm and reinstalled as well.. Yup.. that curl gives me a blob. \n\nto further investigate could you try installing some other package (e.g. npm i express)?\n\nI did install rimraf as a test.. It's working now, I had my enterprise creds in global .npmrc file. \ud83d\ude48 . @aoberoi Thanks for a timely response! Appreciate that, have a great day! \ud83d\udc4d . ",
    "SebastianEdwards": "Related to this issue: I use serverless-webpack, which creates a small package.json file for each lambda function (containing only the dependencies object). While the new pjson solution in v4 can load these files, it still errors in util.ts which assumes the package.json will contain both name and version keys.. ",
    "bkeepers": "I think web.on('error', fn) would be sufficient for our needs.. ",
    "wilhelmklopp": "\nthanks for sharing the idea! also, for clarification we are talking about the WebClient here, right?\n\nyep \ud83d\udc4d . \ud83e\udd18 Thanks!. ",
    "dustingraves": "@aoberoi The markdown is broken on the website https://slackapi.github.io/node-slack-sdk/reference/WebClient. ",
    "BeauBouchard": "Thanks ! :D @aoberoi . ",
    "SpencerKaiser": "@clavin sorry I missed that issue! Thanks for the feedback, I\u2019ll definitely go with the empty object param until y\u2019all publicly update. Thank you!. @aoberoi any idea when y\u2019all might ship? We have an issue against our project to implement a workaround, but I\u2019d rather fix it with an update if possible! Thanks!. Fantastic, thanks @aoberoi!. @aoberoi which version will this fix be released in?. ",
    "htilly": "Aha, that explains a few things! Thanks for pointing that out.\nGlad that you like the app. It sure bring some music discussions around the office =)\nI would more than love some PLs! Maybe a pull request with some optimazation of the node/slack implementation and uplift to 4.0 ;)\nBR\nTilly. ",
    "glajchs": "I stupidly put a stack-overflow question for this here https://stackoverflow.com/questions/49261409/node-slack-sdk-tutorial-wont-run-with-typeerror-cannot-set-property-text-of.  Anyways, in trying to grab the latest master version, I can't get it to run (require complains that it can't find \"@slack/client\").  Am I doing this wrong in my package.json \"@slack/client\": \"git://github.com/slackapi/node-slack-sdk.git#master\"?  If I change the version back to \"3.16.0\", it works fine.. I logged a stack overflow question before coming across this issues section, oops.  Full details on my workflow can be found there as well https://stackoverflow.com/questions/49261409/node-slack-sdk-tutorial-wont-run-with-typeerror-cannot-set-property-text-of/49262292#49262292.. ",
    "nxz91": "@aoberoi you were right, didn't see that one \ud83d\ude48 thanks!. ",
    "KharitonOff": "I've changed your test again in order to fix the build. I hope it is ok for you.\nThe last travis build failed because of timeout. This seems to be an occasional fail:\nbuild for node v9 succeeds:\n\nbuild for node v8 fails:\n\nhttps://travis-ci.org/slackapi/node-slack-sdk/builds/353822357. @aoberoi yes, indeed, glad to meet you again! It is nice to see that you are using CLA Assistant and it was very interesting to have a contributer role and sign your CLA \ud83d\ude04\n. Cool! Thanks for merging it \ud83d\udc4d\nI hope you'll release it soon, our \ud83e\udd16 is eagerly waiting for the fix \ud83d\ude03 . The main advantage I see is the current implementation state of all the folks who used the old style. I don't know whether there is a need for someone to provide further attributes in the  options field (e.g. contentType or knownLength). yes, I added this fix to the PR, because the build of my first commit broke accidentally  . sorry, I've overseen this assertion statement and felt that the fix solved the problem pointed in the comment. I'll bring your TODO and assertion back.. Sorry, but I don't really understand your comment... this code snippet, you mentioned above works now as well. Off course I have tried it before I've opened this PR. And the problem with it, why it didn't work before was in the implementation of \nhttps://github.com/slackapi/node-slack-sdk/blob/a206c3e1286be958c963795f9ce80a18cb85ce7d/src/WebClient.ts#L556-L561\nI've added this part in order to provide the attribute options to the form builder.\nif (key === 'file' && value.value) {\n    form.append(key, value.value, value.options);\n    return form;\n}\nhttps://github.com/KharitonOff/node-slack-sdk/blob/45c77022a81cd2631a5a2bd3ee0dd29e401f51d7/src/WebClient.ts#L554-L563\nThis is actually the main goal of this PR and all other things we talked here about, were done with intention not to break the current state. As I mentioned in the PR description, you can upload files now with no need of additional/redundant information\nlet file = fs.readFileSync('../file.png')\nslackClient.files.upload({ channels, file, filename: 'file.png' })\nShould i remove the 'backup' solution to restrict the file upload to only one way?\n. Agree! I didn't find this setting before, that's why I added it only to this test.. ",
    "twiclo": "My mistake. Thanks for pointing that out.. $ npm @slack/client --version\n5.6.0\nIs that version different than what I should be running? How do I check the real version to make sure I'm good?. Okay thanks for the help. ",
    "developer239": "I just want to point out that @aoberoi solution is bad. Use this link: https://api.slack.com/methods/users.list/test. ",
    "assafshp": "I'm also getting this error. ",
    "swftvsn": "This is what I have:\njson\n{\n  \"compilerOptions\": {\n    \"lib\": [\"es6\", \"es2015.promise\", \"dom\"],\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": false,\n    \"outDir\": \"build\",\n    \"sourceMap\": false,\n    \"target\": \"es6\",\n    \"typeRoots\" : [\"./src/_shared/types\", \"./node_modules/@types\"]\n  },\n  \"include\": [\n    \"src/**/*.ts\",\n    \"spec/**/*.ts\"\n  ]\n}. Thanks @clavin and @aoberoi ! I can confirm that adding the node types as dev dependency gets rid of this error.\nIt is somewhat counter intuitive though, as if I understand correctly node version 6 and above is supported, but you must have types from 8 or later? This also makes developing against 6 or 7 more error prone, as you might use stuff that is not available in reality.\nThis I think is a problem, as we run our code in Firebase Cloud Functions (Google Cloud Functions) and they are still on version 6. I just checked AWS Labmda too, and they support either 4 or 6.\nWould it be possible to express the typing some other way to properly support 6 and 7?. ",
    "kioksy": "Hi again!\nIt seems to be working now. It seems that the key parse: 'full' was causing this for us. ",
    "gunslingerfry": "Here's the output with the DEBUG logLevel.\n```\n[04/13/2018 10:51:17.546] [ERROR] [ERROR] @slack/client:RTMClient A websocket error occurred: Unexpected server response: 503\n/home/matthew/chatbot/node_modules/finity/lib/core/StateMachine.js:76\n      throw new Error('Unhandled event \\'' + event + '\\' in state \\'' + this.currentState + '\\'.');\n      ^\nError: Unhandled event 'websocket close' in state 'connecting'.\n    at StateMachine.handleUnhandledEvent (/home/matthew/chatbot/node_modules/finity/lib/core/StateMachine.js:76:13)\n    at /home/matthew/chatbot/node_modules/finity/lib/core/HierarchicalStateMachine.js:79:33\n    at TaskScheduler.execute (/home/matthew/chatbot/node_modules/finity/lib/core/TaskScheduler.js:29:7)\n    at TaskScheduler.enqueue (/home/matthew/chatbot/node_modules/finity/lib/core/TaskScheduler.js:19:12)\n    at HierarchicalStateMachine.handle (/home/matthew/chatbot/node_modules/finity/lib/core/HierarchicalStateMachine.js:72:24)\n    at WebSocket.websocket.addEventListener.event (/home/matthew/chatbot/node_modules/@slack/client/dist/RTMClient.js:375:77)\n    at WebSocket.onClose (/home/matthew/chatbot/node_modules/ws/lib/event-target.js:124:16)\n    at WebSocket.emit (events.js:159:13)\n    at WebSocket.finalize (/home/matthew/chatbot/node_modules/ws/lib/websocket.js:187:12)\n    at ClientRequest._req.on (/home/matthew/chatbot/node_modules/ws/lib/websocket.js:641:12)\n```. I'll update and get back to you.. Problem still exists.. I've just moved back to v3 because I know it's reliable. I can't seem to find the correct magic in nodemon / forever to get my bot back up and running when it crashes.. Might have seen this too late, but yeah that would be great.\nOn May 18, 2018 11:52:46 AM Ankur Oberoi notifications@github.com wrote:\n\n@gunslingerfry i'm sorry you have to make such a radical jump. we have a \nfix on master that's i can release today. if i get that out in the next \ncouple hours, would that be helpful?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n. ",
    "ghadaezzat": "i tried v4.2 and the problem still exists. ",
    "sandro-pasquali": "This happens pretty regularly for me, as described by @gunslingerfry. In my case I'm running it locally (off my local box) and I think it's happening when my box goes to sleep/turns off its connection. Maybe a subscribable online/offline check for the client?. ",
    "brianeletype": "Does anyone have any idea when the next release will go out that has this update in it?  \nThanks. Very timely and perfectly reasonable response.  Thank you very much.  I've put  in a work around for the time being.  Keep up the good work, @aoberoi . I agree.  I'll make those handful of updates tonight.. Even better!. ",
    "malonecm": "I've enabled debug logLevel now. If I get another StateMachine issue with websocket close I will post more logs. Thank you!. bot.log\nDifferent crash this time. Debug log doesn't seem to help much to me. The \"goodbye\" thing I had never noticed before.\n[DEBUG] @slack/client:RTMClient transitioning to state: reconnecting\n[DEBUG] @slack/client:RTMClient transitioning to state: connecting\n[DEBUG] @slack/client:RTMClient transitioning to state: connecting:authenticating\n[DEBUG] @slack/client:RTMClient transitioning to state: connecting:authenticated\n[DEBUG] @slack/client:RTMClient transitioning to state: connecting:handshaking\n[DEBUG] @slack/client:RTMClient received message on websocket: {\"type\": \"hello\"}\n[DEBUG] @slack/client:RTMClient transitioning to state: connected\n[DEBUG] @slack/client:RTMClient transitioning to state: connected:resuming\n/opt/local/slack-bot/node_modules/@slack/client/dist/KeepAlive.js:90\nthrow errors_1.errorWithCode(new Error('no client found'), _1.ErrorCode.KeepAliveInconsistentState);\n^\nError: no client found\n   at KeepAlive.attemptAcknowledgePong (/opt/local/slack-bot/node_modules/@slack/client/dist/KeepAlive.js:90:54)\n   at RTMClient.emit (/opt/local/slack-bot/node_modules/eventemitter3/index.js:182:35)\n   at RTMClient.onWebsocketMessage (/opt/local/slack-bot/node_modules/@slack/client/dist/RTMClient.js:430:14)\n   at WebSocket.onMessage (/opt/local/slack-bot/node_modules/ws/lib/event-target.js:120:16)\n   at emitOne (events.js:116:13)\n   at WebSocket.emit (events.js:211:7)\n   at Receiver._receiver.onmessage (/opt/local/slack-bot/node_modules/ws/lib/websocket.js:137:47)\n   at Receiver.dataMessage (/opt/local/slack-bot/node_modules/ws/lib/receiver.js:409:14)\n   at Receiver.getData (/opt/local/slack-bot/node_modules/ws/lib/receiver.js:347:12)\n   at Receiver.startLoop (/opt/local/slack-bot/node_modules/ws/lib/receiver.js:143:16)\n   at Receiver.add (/opt/local/slack-bot/node_modules/ws/lib/receiver.js:117:10)\n   at emitOne (events.js:116:13)\n   at TLSSocket.emit (events.js:211:7)\n   at addChunk (_stream_readable.js:263:12)\n   at readableAddChunk (_stream_readable.js:250:11)\n   at TLSSocket.Readable.push (_stream_readable.js:208:10)\n   at TLSWrap.onread (net.js:607:20). And still leaving debug on looking for the first one. If adding this onto this is inappropriate I can open a different issue. Just let me know. Thank you!. Yeah, I did upgrade. I have no seen any further crashes. I do still have debug logging on. If I see anything I will let you guys know!. ",
    "FrancescoPolitano": "Thank you! I have another problem, postmessage give me an error for circular structures on WebClient.ts  line 528, but I don't know how to resolve circular dependency on your \"value\" structure \n...\nif (Buffer.isBuffer(value) || isStream(value)) {\n          containsBinaryData = true;\n        } else if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean') {\n          // if value is anything other than string, number, boolean, binary data, a Stream, or a Buffer, then encode it\n          // as a JSON string.\n          serializedValue = JSON.stringify(value);\n        }\n.... Thank you for your help and for your good code. . ",
    "vleipnik-consensys": "Guys, I am still getting an error with 4.2.0:\n\nThis seems related?\n. ",
    "alcmontejo": "Hello, Just found workaround. Please withdraw found this thread -> https://github.com/npm/npm/issues/5239\n. @aoberoi for workaround, I created .npmrc config file and define our company artifactory registry. And yes it sort of related to escaped /\n\nthanks. . \n",
    "royts": "hi @aoberoi  - thanks for your answer.\nI tried to use use ID (according to this: https://api.slack.com/changelog/2017-09-the-one-about-usernames#prepare) and it works great.\nThank you for that.\n. ",
    "anfilat": "it still doesn't work with 4.2.2. I wrote simplest rtm bot\n```\nconst { RTMClient } = require('@slack/client');\nconst SLACK_BOT_TOKEN = 'xoxb-...';\nconst rtm = new RTMClient(SLACK_BOT_TOKEN, {logLevel: 'debug'});\nrtm.start();\nrtm.on('message', (event) => {\n    console.log(event);\n});\nand it cannot connect to Slack servers. Start log -\nanfilat@afcomp:~/slack/node-js-getting-started$ node ind.js \n[DEBUG] @slack/client:WebClient initialized\n[DEBUG] @slack/client:RTMClient transitioning to state: disconnected\n[DEBUG] @slack/client:RTMClient pausing outgoing event queue\n[DEBUG] @slack/client:RTMClient initialized\n[DEBUG] @slack/client:RTMClient start()\n[DEBUG] @slack/client:RTMClient transitioning to state: connecting\n[DEBUG] @slack/client:RTMClient transitioning to state: connecting:authenticating\n[DEBUG] @slack/client:WebClient apiCall() start\n[DEBUG] @slack/client:WebClient request attempt\n[DEBUG] @slack/client:RTMClient transitioning to state: connecting:authenticated\n[ERROR] @slack/client:RTMClient A websocket error occurred: connect ETIMEDOUT 52.59.24.122:443\n[DEBUG] @slack/client:RTMClient transitioning to state: connecting:reconnecting\nanfilat@afcomp:~/slack/node-js-getting-started$ \nThere is strange thing intransitioning to state: connecting:reconnectingI think there must betransitioning to state: reconnecting```. It's the full log. Application is self-terminated. There is something wrong with transitions from a child to a parent machine.\nYes, PR-560 is usefull fix. ",
    "dperez3": "This issue might still exist in some form or another. I'm not sure if there's a better place to put this, but I ran into a similar issue with version 4.2.0.\nI had multiple async uses of the following method... (in typescript)\n```ts\n    async awaitResponseAsync():Promise {\n        var promise = new Promise(async (resolve, reject) => {\n            let rtmClient = new RTMClient(BOT_TOKEN);\n        let channelId = await this._communicationEntity.getChannelIdAsync();\n\n        rtmClient.start(null);\n        // wait for response\n        rtmClient.once(`message`, (event) => {\n            console.log(event);\n            if(event.channel == channelId) {\n                this._responseText = event.text;\n                resolve(event.text);\n                rtmClient.disconnect();\n            }\n        });\n        rtmClient.once(`error`, (err) => {\n            console.error(event);\n            reject(err);\n            rtmClient.disconnect();\n        });\n    });\n\n    return promise;\n}\n\n```\nIt seemed as though the happenings in 1 instance of RTMClient affected all other instances resulting in the other RTMClient instances no longer invoking subscribers when 1 instance was done with. Changing it to use on subscriptions instead of once fixed it...\n```ts\n    async awaitResponseAsync():Promise {\n        var promise = new Promise((resolve, reject) => {\n            let rtmClient = new RTMClient(BOT_TOKEN);\n        rtmClient.start(null);\n        // wait for response\n        rtmClient.on(`message`, async (event) => {\n\n            let channelId = await this._communicationEntity.getChannelIdAsync();\n\n            if(event.channel == channelId) {\n                console.log(`Response received for ${this.communicationEntity.name}`, event);\n                this._responseText = event.text;\n                resolve(event.text);\n                rtmClient.disconnect();\n            }\n        });\n        rtmClient.on(`error`, (err) => {\n            console.error(event);\n            reject(err);\n            rtmClient.disconnect();\n        });\n    });\n\n    return promise;\n}\n\n``. @aoberoi thank you for the quick response! I apologize, I did paste the wrong code in the second portion and I have updated it. However, you did seem to understand what I was trying to do pretty well anyway. Theonvsoncepoint you made makes total sense now. Of courseonce` would result in it not receiving the intended message if it already heard an ignored message first.\nThis did break again today and ill respond to your other points now...\n1) Again, great point with on vs once. However, I'm not trying to await the http success of a message being sent to a channel. That happens elsewhere via WebClient. Here I'm trying to receive a response to the message from a user on a channel. Or is that what the code you provided would actually do? If so, that'd be great! If not, is there a way to just listen for messages on a specific channel? (I'm gonna try it anyway though).\n2) I suppose this is true if const response = await rtm.sendMessage('a simple message', channelId); returns a user response. I'm not sure how I could do this if I have to filter over the many possible messages I could receive until I get one from a specific channel though. Might be my inexperience with EventEmitters though.\n3) Great! I'll be installing the update asap.\nEdit: The fundamental thing I'm trying to do is asynchronously ask channels (dm and otherwise) a question and wait for an answer to the question per channel.. ### Update\nI've updated to ^4.2.2 and modified my code for a bit of an experiment...\n```ts\n    async awaitResponseAsync():Promise {\n        return await new Promise(async (resolve, reject) => {\n            let rtmClient = new RTMClient(BOT_TOKEN);\n        rtmClient.start(null);\n\n        try {\n            for (var i = 0; i < 30; i++) {\n                let rtmClient = new RTMClient(BOT_TOKEN);\n                rtmClient.start(null);\n                rtmClient.disconnect();\n            }\n        } catch (err) {\n            console.error('Error', err);\n        }\n\n        // wait for response\n        rtmClient.on(`message`, async (event) => {\n\n            let channelId = await this.communicationEntity.getChannelIdAsync();\n\n            if(event.channel == channelId) {\n                console.log(`Response received for ${this.communicationEntity.name}`, event);\n                this._responseText = event.text;\n                resolve(event.text);\n                rtmClient.disconnect();\n            }\n        });\n        rtmClient.on(`error`, (err) => {\n            console.error(event);\n            reject(err);\n            rtmClient.disconnect();\n        });\n    });\n}\n\n```\nThe bit surrounded by a try catch generates this error...\nlog\nError Error: Unhandled event 'explicit disconnect' in state 'connecting'.\n    at StateMachine.handleUnhandledEvent (~\\node_modules\\finity\\lib\\core\\StateMachine.js:76:13)\n    at ~\\node_modules\\finity\\lib\\core\\HierarchicalStateMachine.js:79:33\n    at TaskScheduler.execute (~\\node_modules\\finity\\lib\\core\\TaskScheduler.js:29:7)\n    at TaskScheduler.enqueue (~\\node_modules\\finity\\lib\\core\\TaskScheduler.js:19:12)\n    at HierarchicalStateMachine.handle (~\\node_modules\\finity\\lib\\core\\HierarchicalStateMachine.js:72:24)\n    at RTMClient.disconnect (~\\node_modules\\@slack\\client\\dist\\RTMClient.js:284:27)\n    at Promise (~\\src\\standup\\meeting\\response.js:27:31)\n    at new Promise (<anonymous>)\n    at Response.awaitResponseAsync (~\\--\\response.js:20:22)\n    at Question.askAsync (~\\src\\--\\question.js:32:49). One issue I have found is that I am not waiting for RTMClient to be connected before listening. Another issue is... since I am spawning off multiple instances, instances start taking almost a minute to connect. A disconnect during this time would yield an error like the above. However, a disconnect would only happen if a message was received or an error occurred. If a message is being received before it actually connected that would lead me to believe that multiple instances get confused over some shared resource.\nAnyway, I'm going to clean up some things like refactor for as little instances as possible since they can take so long to connect.. ",
    "renjithspace": "@aoberoi Yes. The development server not getting started because of those warnings. So, I removed @slack/client and now using slack-node package instead.\nI saw @slack/client has 28 dependencies and slack-node has only one. Yet the slack-node package working fine. I'm suggesting the @slack/client developers make sure the 28 dependencies are actually needed to get worked the @slack/client package modules.\nThanks. ",
    "9renpoto": "@neekolas Hi. If you do not have a problem, could you please rebase it ? \ud83d\udc4d \nrefs: https://github.com/neekolas/node-slack-sdk/pull/2. ",
    "smaeda-ks": "Also, from what I can see on the Slack's document page, I'd rather not use channels.list API anymore, but conversations.list instead.\n\nDon't use this method. Use conversations.list instead.. Hi @aoberoi , Thank you so much for your detailed advice! I've changed my PR as you mentioned. Please review it again, Thanks.. \n",
    "mousemke": "@aoberoi perfection. Harmony removed. Works like a charm. I appreciate the help!. ",
    "ethan0920": "Sorry about that, accidentally created a pr in my own fork. :stuck_out_tongue: . actingAs seems good. I can't think of any other name to use :+1: . Hi @aoberoi, \nI have been working on this. And I was wondering if it would be useful to include a way to change the headers with a method on the WebClient. Or retrieve them with a method. I was also wanting to ask about implementing the tests. Would just testing if the static headers are in the WebClient be enough? Thanks!\nEthan. @clavin I agree with you on that :+1: . @aoberoi Sounds good, I will make open a PR for this :+1: . Thank you @aoberoi for the reviews, I will make these changes shortly :smile: . Hey @aoberoi,\nI am having some troubles implementing the test for this. If you could give a brief explanation how I could tackle this (if you have any ideas). I do have to go to work for a a few hours and then I will be back to work on these changes further.\nEthan. Sorry for the late changes, I was struggling to figure out the test case but finally got one implemented and working. \nEthan. Okay, I have done the changes. Sorry for the delay, been a little busy :+1: . I'm curious if there is any purpose of even making it a property on the WebClient? I only use is in the constructor when the axios instance is created.. Ah, thank you! Didn't notice that when looking over Nock :+1: . ",
    "malmaud": "Ah, thank you. Sorry for missing those closed issues.\nOn Tue, Jun 12, 2018 at 11:25 AM Ankur Oberoi notifications@github.com\nwrote:\n\nYou\u2019re not missing anything, this is a known issue. WebAPICallResult\nwasn\u2019t designed to be a \u201cclosed\u201d interface, just a minimal common interface\nfor results of all different method calls. We hope to do better soon.\nThis is a duplicate of #509\nhttps://github.com/slackapi/node-slack-sdk/issues/509, so I\u2019ll close\nthis to consolidate. There\u2019s been some progress in #563\nhttps://github.com/slackapi/node-slack-sdk/pull/563, and some relevant\ndiscussion in #496 https://github.com/slackapi/node-slack-sdk/issues/496\n.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/slackapi/node-slack-sdk/issues/581#issuecomment-396630593,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA8SvR2MQAZo_LjN48ydG7fNWxKusjYvks5t791ogaJpZM4Ukgpr\n.\n. \n",
    "kbiedrzycki": "So currently we finished up with making fork and changing @types/node version to * which is resolved properly now. There's also another way - we can manually update package.json file with resolutions section and force other version of node, I guess that will do the trick as well. Anyway, if you find out some other solution, more universal, we will be very happy about that.. ",
    "arjun27": "Thanks @clavin, that works for me. This returns the response of rtm.connect [1], and not rtm.start [2] - perhaps that is something to clarify in the documentation. Closing this one for now in lieu of #198 \n[1] https://api.slack.com/methods/rtm.connect\n[2] https://api.slack.com/methods/rtm.start. Actually I take that back. It is possible to use rtm.start by passing useRtmConnect as false in the constructor.\nconst rtm = new RTMClient(..., { useRtmConnect: false });. Thanks for tagging me, @aoberoi. I'm not 100% sure if this applies to Team Chat, because the RTMClient is only used in the node extension host process. The web view (which is the browser environment) renders the UI and communicates with the node extension host process over VS Code's messaging passing. It seems to me that Team Chat will be unaffected with the upgrade to v6.x. Am I missing something?. ",
    "lukechilds": "That fix is merged into Got. Will publish a new release shortly.. I don't actually have permissions to publish to npm but I've looped in the rest of the team.. @aoberoi Done.. ",
    "Ismaw34": "No errors found during test on a RocketChat 0.67.0.. ",
    "ChaddPortwine": "I tried JSON.stringify:\ntrigger_id: JSON.stringify(json.trigger_id),\nNow the logs and error are different:\n```\n5:33:24.512 PM | info | helloWorld | body: { ok: false, error: 'internal_error' }\n5:33:23.565 PM | outlined_flag | helloWorld | Function execution took 13 ms, finished with status code: 200\n5:33:23.559 PM | info | helloWorld | json.trigger_id: \"406895248231.7467239747.7490e460213b3d65a44eef9f2e30c168\"\n5:33:23.553 PM | outlined_flag | helloWorld | Function execution started\n```\nI must be doing something dumb. Any guesses what?. @clavin Thank you for graciously providing support beyond the scope of the API. I've made some silly mistakes misusing promises and misreading logs. Once the code is sorted, I'll post what's working.\nThanks again!. app.post() is the answer!\n@aoberoi Thank you for the tip about using the Hangout and email for support.. ",
    "Robby29": "@clavin and @aoberoi  : thanks for the reply guys.\nJust to provide more info on what I am trying to achieve here. My chatbot collects information from user in form of various dialogs (more like what we usually would do in a html form ) and in the final dialog I append all the inputs in a post request (JSON format) and make a call to one of my API's hosted on a different server. The API basically runs an installation of a particular software , which requires a username and password for its installation. SO I dont wan the password types by the user to be visible in plain text on the screen. \nAs Ankur said that there are no features supporting masked fields in slack as of now so can you guys suggest some other way to achieve this.\nThanks much.. Thanks a lot Ankur for the suggestion. I like your solution but I guess it will not be a good experience for the user to have to navigate to another page for keying in the password. Though honestly at this point it seems to be the most viable solution. I will give it a shot and also look at OAuth as an alternative.\nCheers!!\n. ",
    "igrayson": "Is there a reason that @slack/client declares @types/p-cancelable under dependencies?. In our vended packages, we only put @types/* in our package.json under dependencies if they're being re-exported by that package. \nThe rest are declared as devDependencies, as they're only needed to compile the package, not consume it.\nFor @slack/client, I would try moving all of your @types/* to devDependencies (except for @types/retry; re-exported by your retry-policies interface).\nWe've actually learned to entirely avoid re-exporting types (can get you in different kind of trouble), but that's not an immediate concern here.. @aoberoi \nBluebird typings may be improve-able (although there could be a reason they took the approach they did; they more scrutiny than most libraries), but that is perhaps orthogonal to this issue. \nI think @slack/client should be as un-opinionated as possible about the technique used to declare typings of libraries that are not themselves relevant to any interface exported by @slack/client.\nRe: @types/node references -- there's a fundamental difference between those issues and this one: p-retry does not occur in @slack/client's exported interface; it is wholly an internal, implementation detail of the library, and consumers of your interface probably should be as ignorant as possible that you use it. (I express this as an assertion, but I'm curious if you agree). \n@types/node on the other hand is directly re-exported by your interface, and consumers wouldn't be able to compile with @slack/client without also installing @types/node.\nWhat do you think?. ",
    "freezy": "I got a similar problem in my CI with latest v4.4.0.\n```\n$ mkdir demo\n$ cd demo\n$ npm install typescript@3.0.1 @slack/client@4.4.0\n$ echo import { RTMClient } from '@slack/client'; > index.ts\n$ tsc --lib es2017 index.ts\nnode_modules/@slack/client/dist/util.d.ts:32:56 - error TS2304: Cannot find name 'AsyncIterable'.\n32 export declare function awaitAndReduce(iterable: AsyncIterable, callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): Promise;\n                                                          ~~~~~~~~~~~~~\nPosting it here because it's a Typescript related problem, let me know if you prefer me creating a new issue.. How about just adding\n/// \n`` \nto yourutil.d.ts? I don't think the dependents of your lib should maintain your dependencies.... Can't you just reference the lib inutil.d.ts`?. Off the top of my head, no. But from the doc:\n\nBuilt-in lib files are referenced in the same fashion as the \"lib\" compiler option in tsconfig.json (e.g. use lib=\"es2015\" and not lib=\"lib.es2015.d.ts\", etc.).\n\nSo if you previously only had it in your tsconfig.json, moving it to the file directly should have the same effect.. ",
    "mistydemeo": "@CLAassistant I've got a corporate CLA signed.. ",
    "tkazec": "@aoberoi Seems like this caused v3 to be marked as latest instead of v4.. ",
    "ran-j": "Hello @aoberoi thanks for help.\nSo I traing to use RTM, the demo code, but when I trai this:\n// Log all incoming messages\nrtm.on('message', (event) => { \n  rtm.sendMessage('hi',event.user)\n  console.log(`Message from ${event.user}: ${event.text}`);\n})\nI got this error \nMessage from UAQ8WKYV8: oi\n(node:4980) UnhandledPromiseRejectionWarning: Error: An API error occurred: invalid channel id\n    at RTMClient.eventHandler (C:\\Users\\Ranieri\\Documents\\Projetos\\Node Js\\slackbotnode\\node_modules\\@slack\\client\\dist\\RTMClient.js:334:66)\n    at RTMClient.emit (C:\\Users\\Ranieri\\Documents\\Projetos\\Node Js\\slackbotnode\\node_modules\\eventemitter3\\index.js:182:35)\n    at RTMClient.onWebsocketMessage (C:\\Users\\Ranieri\\Documents\\Projetos\\Node Js\\slackbotnode\\node_modules\\@slack\\client\\dist\\RTMClient.js:474:14)\n    at WebSocket.onMessage (C:\\Users\\Ranieri\\Documents\\Projetos\\Node Js\\slackbotnode\\node_modules\\ws\\lib\\event-target.js:120:16)\n    at emitOne (events.js:116:13)\n    at WebSocket.emit (events.js:211:7)\n    at Receiver.receiverOnMessage (C:\\Users\\Ranieri\\Documents\\Projetos\\Node Js\\slackbotnode\\node_modules\\ws\\lib\\websocket.js:720:20)\n    at emitOne (events.js:116:13)\n    at Receiver.emit (events.js:211:7)\n    at Receiver.dataMessage (C:\\Users\\Ranieri\\Documents\\Projetos\\Node Js\\slackbotnode\\node_modules\\ws\\lib\\receiver.js:414:14)\n(node:4980) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\n(node:4980) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n. Yes, worked, thanks :). ",
    "Tjird": "I recieve all messages with the type \"message\". https://i.imgur.com/1s8cr1J.png\nThe screenshot is the part that the RTMClient is being used, the other part of my code is not useful in this case.. The issue is out of my own experience after ~24 hours, also fyi there are 3 bots that are using the same token. Maybe handy to know.. Yes you can close it, sorry for the late reaction @aoberoi . ",
    "ryosebach": "@aoberoi \nI see, thank you a lot!. ",
    "nicgordon": "Thanks for the response @aoberoi. I can confirm that this issue is no longer needed as running npm install @slack/client@latest installed v4.8.0.. ",
    "romanbalayan": "Hey @aoberoi, caught me at the right time a while ago!\nAlso, I already fixed the log message on the latest commit. The merge request had a conflict due to the migration of isAgent and agentForScheme functions to util.ts. \nWill you be the one manually resolving the conflict on WebClient.ts?. Hi @aoberoi,\nAlready resolved the merge conflict! Thanks!. Got it. Was considering that, actually, but was not sure if I should change the code for WebClient. Should I include the changes on this same pull request?. Checked the change on #642 issue. The current implementation of isAgent is same as in the latest merge; checking if addRequest is a function.. ",
    "DornieDortsch": "Looks like Fix #642 not working for me.\nI try to connect with RTMClient behind a http proxy. I use Version 4.8.0 of node-slack-sdk. The Client request fails and retries forever. No error is reported! With Version 4.4.0 everything is OK. \nHere is the log when I execute sample Project: https://github.com/DornieDortsch/node-slack-sdk-bug\n```\n\"@slack/client\": \"^4.8.0\"\n\nnode ./index.js\n\n@slack/client:WebClient0 \"initialized\"\n@slack/client:RTMClient2 \"transitioning to state: disconnected\"\n@slack/client:RTMClient2 \"pausing outgoing event queue\"\n@slack/client:RTMClient2 \"initialized\"\n@slack/client:RTMClient2 \"start()\"\n@slack/client:RTMClient2 \"transitioning to state: connecting\"\n@slack/client:RTMClient2 \"transitioning to state: connecting:authenticating\"\n@slack/client:WebClient0 \"apiCall() start\"\n@slack/client:WebClient0 \"shouldAutoPaginate: false\"\n@slack/client:WebClient0 \"will perform http request\"\n@slack/client:WebClient0 \"http response received\"\n@slack/client:WebClient0 \"http request failed\"\n@slack/client:WebClient0 \"will perform http request\"\n@slack/client:WebClient0 \"http response received\"\n@slack/client:WebClient0 \"http request failed\"\n@slack/client:WebClient0 \"will perform http request\"\n@slack/client:WebClient0 \"http response received\"\n@slack/client:WebClient0 \"http request failed\"\n@slack/client:WebClient0 \"will perform http request\"\n@slack/client:WebClient0 \"http response received\"\n@slack/client:WebClient0 \"http request failed\"\n```\n```\n\"@slack/client\": \"4.4.0\"\n\nnode ./index.js\n\n@slack/client:WebClient0 \"initialized\"\n@slack/client:RTMClient2 \"transitioning to state: disconnected\"\n@slack/client:RTMClient2 \"pausing outgoing event queue\"\n@slack/client:RTMClient2 \"initialized\"\n@slack/client:RTMClient2 \"start()\"\n@slack/client:RTMClient2 \"transitioning to state: connecting\"\n@slack/client:RTMClient2 \"transitioning to state: connecting:authenticating\"\n@slack/client:WebClient0 \"apiCall() start\"\n@slack/client:WebClient0 \"shouldAutoPaginate: false\"\n@slack/client:WebClient0 \"will perform http request\"\n@slack/client:WebClient0 \"http response received\"\n@slack/client:RTMClient2 \"transitioning to state: connecting:authenticated\"\n@slack/client:RTMClient2 \"transitioning to state: connecting:handshaking\"\n@slack/client:RTMClient2 \"received message on websocket: {\\\"type\\\": \\\"hello\\\"}\"\n@slack/client:RTMClient2 \"transitioning to state: connected\"\nConnected!\n@slack/client:RTMClient2 \"transitioning to state: connected:resuming\"\n@slack/client:RTMClient2 \"transitioning to state: connected:ready\"\n@slack/client:KeepAlive1 \"start monitoring\"\n@slack/client:KeepAlive1 \"setting ping timer\"\n@slack/client:RTMClient2 \"resuming outgoing event queue\"\n@slack/client:KeepAlive1 \"ping timer expired, sending ping\"\n@slack/client:RTMClient2 \"send() in state: connected,ready\"\n@slack/client:KeepAlive1 \"setting ping timer\"\n@slack/client:RTMClient2 \"sending message on websocket: {\\\"type\\\":\\\"ping\\\",\\\"id\\\":1}\"\n@slack/client:KeepAlive1 \"setting pong timer\"\n@slack/client:RTMClient2 \"received message on websocket: {\\\"type\\\":\\\"pong\\\",\\\"reply_to\\\":1}\"\n@slack/client:KeepAlive1 \"received pong, clearing pong timer\"\n@slack/client:KeepAlive1 \"ping timer expired, sending ping\"\n@slack/client:RTMClient2 \"send() in state: connected,ready\"\n@slack/client:KeepAlive1 \"setting ping timer\"\n@slack/client:RTMClient2 \"sending message on websocket: {\\\"type\\\":\\\"ping\\\",\\\"id\\\":2}\"\n@slack/client:KeepAlive1 \"setting pong timer\"\n@slack/client:RTMClient2 \"received message on websocket: {\\\"type\\\":\\\"pong\\\",\\\"reply_to\\\":2}\"\n@slack/client:KeepAlive1 \"received pong, clearing pong timer\"\n@slack/client:KeepAlive1 \"ping timer expired, sending ping\"\n@slack/client:RTMClient2 \"send() in state: connected,ready\"\n@slack/client:KeepAlive1 \"setting ping timer\"\n@slack/client:RTMClient2 \"sending message on websocket: {\\\"type\\\":\\\"ping\\\",\\\"id\\\":3}\"\n@slack/client:KeepAlive1 \"setting pong timer\"\n@slack/client:RTMClient2 \"received message on websocket: {\\\"type\\\":\\\"pong\\\",\\\"reply_to\\\":3}\"\n@slack/client:KeepAlive1 \"received pong, clearing pong timer\"\n@slack/client:KeepAlive1 \"ping timer expired, sending ping\"\n@slack/client:RTMClient2 \"send() in state: connected,ready\"\n@slack/client:KeepAlive1 \"setting ping timer\"\n@slack/client:RTMClient2 \"sending message on websocket: {\\\"type\\\":\\\"ping\\\",\\\"id\\\":4}\"\n@slack/client:KeepAlive1 \"setting pong timer\"\n@slack/client:RTMClient2 \"received message on websocket: {\\\"type\\\":\\\"pong\\\",\\\"reply_to\\\":4}\"\n@slack/client:KeepAlive1 \"received pong, clearing pong timer\"\n```\nReproducible in:\n@slack/client version: 4.8.0\nnode version: v8.11.3\nOS version(s): macOS 10.14.1\nSteps to reproduce:\n\nRun sample Project\n\nExpected result:\nConnecting to Slack or log error\nActual result:\nNot connecting to slack and not reporting error. @aoberoi the steps you take to reproduce the error are correct.\nI think it's a special problem with my proxy setup. We have to use http proxy for http and https requests. Looks like axios didn't play well with this setup.\nI added print to get the error message at WebClient makeRequest function. Here is the message:\nhttp request failed Error: An HTTP protocol error occurred: statusCode = 403\nI take some time to get the right axios setup.. Yeah I found the problem!\nThere is a \"automatic proxy detection\" feature at axios library. Therefore axios take the https_proxy environment variable configured on my system. This will interfere with the agent setup. So axios will use https for the proxy host, which is not accessible on my system.\nYou can reproduce this by setting environment variable https_proxy=http://localhost:8888. If I remove this variable, everething works fine!\nMaybe it's a good option to disable automatic proxy detection by default.\naxios.create({\n    ...\n    proxy: false\n});\nThis article bring me on the right path https://janmolak.com/node-js-axios-behind-corporate-proxies-8b17a6f31f9d\nPS: Logging the exact error message at debug level would help finding errors faster.. ",
    "ronjouch": "@aoberoi @RodneyU215 are you sure about that? https://github.com/Microsoft/TypeScript/pull/26220 is still unmerged, and here on my machine with tsc 3.1.1, the correct flag is still esnext.asynciterable; compiling with es2018.asynciterable results into this error:\n```\ntsconfig.json:9:23 - error TS6046: Argument for '--lib' option must be: 'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'esnext', 'dom', 'dom.iterable', 'webworker', 'webworker.importscripts', 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl'.\n9     \"lib\": [\"es2017\", \"es2018.asynciterable\"],\n                        ~~~~~~~~~~~~~~~~~~~~~~\nnode_modules/@slack/client/dist/util.d.ts:32:56 - error TS2304: Cannot find name 'AsyncIterable'.\n```. ",
    "RodneyU215": "@ronjouch My over sight as well; I should have dug deeper. Thanks a lot for the feedback Ronan!. @aoberoi Thanks for breaking down the issue and the available options so well. From everything that's mentioned and what I've recently experienced troubleshooting proxies in the Python Slack SDK I'd recommend first fixing the bug by implementing option 1 above.\nIn another PR I'd explore and test how well it would work if you made proxy configs a first class feature like you mentioned. One concern I'd have with making proxy configs work is the number of existing axios issues that are currently open related to this.. ",
    "melisdogan": "I'll do this.. oh, you are completely right, I just got overexcited it seems. my apologies! . ",
    "keitakn": "@aoberoi I am running this code from a Mac terminal.\n```\nimport { WebAPICallResult, WebClient } from \"@slack/client\";\ndescribe(\"SlackNotifier\", () => {\n  it(\"should send message to Slack's channel\", async () => {\n    const client = new WebClient(\"My Token\");\n    const channel = \"#my-channel\";\nconst message = \"hello\";\n\nconst params = {\n  channel: channel,\n  text: message\n};\n\nawait client.chat\n  .postMessage(params)\n  .then((result: WebAPICallResult) => {\n    return Promise.resolve(result);\n  })\n  .catch((error: Error) => {\n    return Promise.reject(error);\n  });\n\n});\n});\n```\nWhen this code was executed with Jest, I got an error that I reported.\nhttps://travis-ci.org/nekonomokochan/aws-lambda-node-logger/builds/443031141?utm_source=github_status&utm_medium=notification. @aoberoi Succeeded by setting testEnvironment to Node as in this article.\n:jest.config.json\n{\n  \"collectCoverageFrom\": [\n    \"src/**/*.{ts,tsx}\"\n  ],\n  \"moduleFileExtensions\": [\n    \"ts\",\n    \"tsx\",\n    \"js\",\n    \"jsx\",\n    \"json\",\n    \"node\"\n  ],\n  \"moduleNameMapper\": {\n    \"^src/(.*)$\": \"<rootDir>/src/$1\"\n  },\n  \"roots\": [\n    \"test\"\n  ],\n  \"testRegex\": \"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(js|jsx|ts|tsx)$\",\n  \"transform\": {\n    \"^.+\\\\.tsx?$\": \"ts-jest\"\n  },\n  \"verbose\": true,\n  \"testEnvironment\": \"node\"\n}\nApparently it was caused by js-dom being used by default of Jest.\nThank you, this problem has been solved\ud83d\udc4d. ",
    "tcd156": "Uploading a file to a thread works - I had to specify the channels as well as the thread_ts in order to get it to work. I was only specifying the thread_ts previously.\nIn the documentation, this is not instantly obvious, as they are all considered Optional, and nowhere does it state you need both values.. Great, opened #661 . @aoberoi let me know about the docs, I can get rid of them so we can get this closed.. alright @aoberoi, changes are made \ud83d\udc4d . That totally makes sense. I guess I didn't immediately understand the use case for just uploading files to Slack without having the intention of posting them to a channel. Is that a common use case?\nI do agree it felt odd here - but since there wasn't any other documentation directly in this repo, I felt like I should add it somewhere. I will say - our use case was to use Hubot, and uploading files into threads was such a perfect scenario for us because we would be absolutely destroying our chat with images otherwise. Having hubot answer in threads reduces the clutter by orders of magnitude.\nIMO, posting images into threads seems like a pretty useful feature, so even if it isn't front and center, I think it should absolutely be documented in the SDK. But this is coming from our use case, so I'm not sure if that's the exception.. What about something like Specify channel(s) to upload the file to. Optional, unless also specifying a thread_ts value. \nI think that may be clear enough in that - if you want to upload to a channel, the thread value doesn't matter to you, but if you want to upload to a thread, at least some information is there.. ",
    "CoreyCole": "It was so long ago I don't remember what I was doing to get the error message. But, it is working now and I just grep'd the production logs and don't see the error. This is the code I'm using now and it's working great!\ntypescript\nthis.rtm = new RTMClient(this.env.getSlackToken());\nthis.rtm.on('message', (message) => {\n    if (this.validSendMsgCmd(message)) {\n        this.handleSendMsgCmd(message.text, message.user);\n    } else {\n        console.log(JSON.stringify(message, null, 2));\n    }\n});\nthis.rtm.on('connecting', () => console.log('[SlackService][constructor]: connecting to slack API...'));\nthis.rtm.on('disconnecting', () => console.log('[SlackService][constructor]: disconnecting from slack API...'));\nthis.rtm.on('disconnected', () => console.error('[SlackService][constructor]: disconnected from slack!'));\nthis.rtm.on('reconnecting', () => console.log('[SlackService][constructor]: reconnecting to slack API...'));\nthis.rtm.on('unable_to_rtm_start', (error) => console.error(JSON.stringify(error, null, 2)));\nthis.rtm.on('error', (error) => {\n    console.error(JSON.stringify(error, null, 2));\n    if (this.rtm.connected) this.postErrorMessage(JSON.stringify(error, null, 2));\n});\nthis.rtm.start()\n    .then((res: WebAPICallResult) => {\n        console.log(`[SlackService][constructor]: connected to slack!`);\n    })\n    .catch(err => {\n        console.error(`[SlackService][constructor]: err = ${err}`);\n    });. @kaweah have you installed the bot to your workspace and granted it permission to read messages? Have you added that bot user to the slack channel you're trying to read from? There is more info here if you haven't seen this https://api.slack.com/bot-users. So it all looks normal in the debug logs, pings and pongs, until I try sending a message. After sending a message, it looks like it does disconnect:\n// looks normal above\n// send message here:\n[DEBUG] @slack/client:RTMClient2 sending message on websocket: ~~~\n[DEBUG] @slack/client:KeepAlive1 stop monitoring\n[DEBUG] @slack/client:RTMClient2 transitioning to state: reconnecting\n[SlackService][constructor]: reconnecting to slack API...\n[DEBUG] @slack/client:KeepAlive1 stop monitoring\n[DEBUG] @slack/client:RTMClient2 transitioning to state: connecting\n[SlackService][constructor]: connecting to slack API...\n[DEBUG] @slack/client:RTMClient2 transitioning to state: connecting:authenticating\n[DEBUG] @slack/client:WebClient0 apiCall() start\n[DEBUG] @slack/client:WebClient0 shouldAutoPaginate: false\n[DEBUG] @slack/client:WebClient0 will perform http request\n[DEBUG] @slack/client:WebClient0 http response received\n[DEBUG] @slack/client:RTMClient2 transitioning to state: connecting:authenticated\n[DEBUG] @slack/client:RTMClient2 transitioning to state: connecting:handshaking\n[DEBUG] @slack/client:RTMClient2 received message on websocket: {\"type\": \"hello\"}\n[DEBUG] @slack/client:RTMClient2 transitioning to state: connected\n[DEBUG] @slack/client:RTMClient2 transitioning to state: connected:resuming\n[DEBUG] @slack/client:RTMClient2 transitioning to state: connected:ready\n[DEBUG] @slack/client:KeepAlive1 start monitoring\n[DEBUG] @slack/client:KeepAlive1 setting ping timer. ! Just tested something and it looks like the content of the message is causing the error. I replaced my long message string with \"test\" and it sent it.. This is the content of the message that was causing the error. It was JSON.stringify(obj, null, 2) of the following object (the [Object] parts are more sub-objects):\n{\n  deviceEventId: '58',\n  deviceId: 'n/a',\n  creationDate: 2019-01-17T21:09:15.931Z,\n  event: 'ERROR',\n  userId: 'n/a',\n  userName: 'n/a',\n  client: 'google',\n  type: 'Error',\n  message: 'test error',\n  metadata:\n   { conv:\n      { id: 'ABwppHFIge30FG7aJhhj2a-ZQjT5h5r-cJF9yT-fWCvC7xHOJr_n7mK2Nywi0PmTAeI7PWXmm_0',\n        body: [Object],\n        data: {},\n        type: 'NEW',\n        user: [Object],\n        _init: {},\n        input: [Object],\n        query: 'GOOGLE_ASSISTANT_WELCOME',\n        action: 'input.welcome',\n        device: {},\n        intent: 'LaunchIntent',\n        screen: true,\n        headers: {},\n        request: [Object],\n        sandbox: true,\n        surface: [Object],\n        version: 2,\n        contexts: [Object],\n        digested: false,\n        incoming: [Object],\n        noInputs: [],\n        arguments: [Object],\n        available: [Object],\n        responses: [],\n        _responded: false,\n        parameters: {},\n        speechBiasing: [],\n        expectUserResponse: true },\n     stack:\n      [ 'Error: test error',\n        '    at MapSubscriber.conv$.sessionService.get.pipe.operators_1.map [as project] (/Users/corey/Halloo/src/clients/google/src/dialogflow-intents/launch.intent.ts:42:31)',\n        '    at MapSubscriber._next (/Users/corey/Halloo/src/clients/google/node_modules/rxjs/src/internal/operators/map.ts:81:29)',\n        '    at MapSubscriber.Subscriber.next (/Users/corey/Halloo/src/clients/google/node_modules/rxjs/src/internal/Subscriber.ts:101:12)',\n        '    at TapSubscriber._next (/Users/corey/Halloo/src/clients/google/node_modules/rxjs/src/internal/operators/tap.ts:116:22)',\n        '    at TapSubscriber.Subscriber.next (/Users/corey/Halloo/src/clients/google/node_modules/rxjs/src/internal/Subscriber.ts:101:12)',\n        '    at MapSubscriber._next (/Users/corey/Halloo/src/clients/google/node_modules/rxjs/src/internal/operators/map.ts:86:22)',\n        '    at MapSubscriber.Subscriber.next (/Users/corey/Halloo/src/clients/google/node_modules/rxjs/src/internal/Subscriber.ts:101:12)',\n        '    at CatchSubscriber.Subscriber._next (/Users/corey/Halloo/src/clients/google/node_modules/rxjs/src/internal/Subscriber.ts:141:22)',\n        '    at CatchSubscriber.Subscriber.next (/Users/corey/Halloo/src/clients/google/node_modules/rxjs/src/internal/Subscriber.ts:101:12)',\n        '    at MapSubscriber._next (/Users/corey/Halloo/src/clients/google/node_modules/rxjs/src/internal/operators/map.ts:86:22)' ],\n     requestData:\n      { conv: [Object],\n        client: 'google',\n        reqDate: '2019-01-17T21:09:15.918Z',\n        reqSession: {} },\n     creationDate: '2019-01-17T21:09:15.924Z' } }\nI normally don't have a problem posting JSON.stringify() on json object in slack, I wonder what is different about this one. Maybe it is just too large? What is the maximum lenght allowed for a message?. Yeah, it looks like it had to do with message length. I deleted off some of the larger sub-objects before calling JSON.stringify() and the message sent to slack. Maybe a new issue should be opened about a better error message for this?. ",
    "kaweah": "This thread looks fresh some I'm adding my two cents ... I'm just starting on slackbot development, and I'm encountering this issue. Perhaps I should just come back in a month. :-)\nI'm trying to do something very basic with a newly-created workspace. I create an app with 'bot' scope, I install it and feed the token to botkit's example slack_bot.js:\ntoken=xoxp-***************** node slack_bot.js\nHere's what I get back:\nGot response null {\"ok\":false,\"error\":\"missing_scope\",\"needed\":\"rtm:stream\",\"provided\":\"identify,bot\"}\nIt looks like I'm given the 'identify' scope without selecting it, plus the 'rtm:stream' scope is required but I have no way to select it. Anyway, it's clear that I have no idea what I'm talking about!\nThanks for your time.. I\u2019ll try it out. Thanks \nSent from my iPhone\n\nOn Dec 17, 2018, at 2:22 PM, Ankur Oberoi notifications@github.com wrote:\nI think I've gotten to the bottom of this one, and I think it comes down to a documentation issue.\nYou should be connecting to the RTM API using a bot token. These are tokens that start with the letters xoxb-. More info about what a bot token is can be found here.\nEach of these occurrences seem to come down to using a user token (start with xoxp-) to connect to the RTM API. And for completeness, I do want to acknowledge that its possible to do to use a user token for the RTM API, but its discouraged because there is usually a better way to do what you're trying to do. So unless you have some specialized use case and you know what you're doing, avoid this. In that case, your xoxp- token needs to contain the client scope for it to work. We have logged an internal bug for changing the error payload to something a little more clear, because rtm:stream is an internal scope that's used for some other purpose, and this error message is not accurate or helpful.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "ptmt": "@aoberoi I've managed to add client scope if it's not available for selecting from permissions selectbox, but I'm getting Cannot request object scopes with deprecated scopes error now:\n\nIs there any way to use RTM with user's token?. > You cannot request the client scope in the same installation as a \u201ctraditional\u201d scope (e.g. channels:read)\nThanks! It seems that is the case!. ",
    "rojcyk": "This seems to be working now, without me having to do anything about it. It seems like it was an error on the Slack API side.. ",
    "jharrilim": "Sorry for taking awhile to update it. I made the requested changes. Happy holidays!. amended fix for \n(it should begin with p)\nto\n(it should begin with xoxp). Sounds good!. ",
    "jayjanssen": "Sorry for the coffeescript, just what I\u2019m most comfortable with.\nI kind of suspected it was just a non-standard implementation of rate limiting.     @aoberoi \u2014 I\u2019m presuming you work for Slack?  Is this just something that can be filed internally with your platform api team?. @aoberoi absolutely no complaints about having a projected fix so quickly!  I like the auto-rate limiting handling feature, I have to write it into my library wrappers for most of my other services. . @aoberoi understood.  The problem reproduced today (alas before I had DEBUG set) and restarting my client with no other action didn't do anything.  The issue does seem to be more with the my RTM connection from my bot.  I'm deploying DEBUG on my test bot now to see if I can get anything useful -- I may not get back to you until January as I only have a few working days left this year.  . @aoberoi just a quick update on this -- there is one possibility that may be in play -- I am now running multiple bots connected to the same RTM for HA purposes.  (before they react to a message, the bots essentially do a NX set in a common redis instance on the _ of the message -- the winner who can set that handles the message).\nWhat I'm wondering is how well supported simultaneous connections are here or not.  Just an idea.  I've seen one instance of the offline status on my testing bot and it was when I was running a few instances including one locally on my laptop that would have been connecting/disconnecting.  FTR there was nothing interesting in the debug log on the remaining instance when that happened.\nApart from that, I'll wait until I see it again and report in here with more data.\n. I didn't have any repeat of the issue over the holidays.  I'll close this now and re-open/submit new if needed.. ",
    "nylen": "It is now \"next week\", for some definition of \"next\" \ud83d\ude09 \n@aoberoi Any update on this issue?. > the work around would be to manually retry failures that result in a error.data.error === 'ratelimited' condition being true.\nThis is fine for now, just unexpected and less than ideal.  Thanks for the update!. ",
    "Shegox": "Hey, \nwe just run into the same issue of not wanting to use the proxy for slack calls. Unfortantly axios@0.18.0 only implements the http(s)_proxy env variables and not the no_proxy variables. Resulting in breaking our setup when updating to a newer slack/client.\nIt would be really great if this can be released rather quick or by adding the new axios@0.19.0-beta.1 which adds no_proxy support.  \nDo you by chance know a quick workaround for this issue? . Hey @aoberoi, \nthanks for the response. We now opted to upgrade the dependency locally to the axios beta release for our deployment. That worked without problems so far. \nFrom my perspective it would be good to ignore the env variables from axios (if no stable release is released) and let the slack client set the proxy, if desired.  \n. @clavin general I'm 100% on your side. It would be inline with everything if the proxy is detected correctly. \nHowever with the current implementation it is lacking two major things. I think support for the NO_PROXY environment variable would be critical. \nAlso in the current implementation (4.8.0) agent:false doesn't seem to work for the WebClient. \nI tried overriding it and it can't reach the the slack api: \nthis.appWebClient = new WebClient(slackAppToken, {agent: false }).\nPlease correct me, if I'm wrong, but with the current package it is not possible to disable the proxy when you set the https_proxy environment variable? \nIf there is an way to disable it and it is documented, I would find it okay behavior. \n. ",
    "JanmejayPattanaik": "Hi Ankur,\nThank you for your guidance. I am able to resolve the signing issue.\nPost signing, I need to open the dialog. It was working fine for the earlier version of Slack Node SDK but after upgrading the Slack Node SDK version, the same is not working. \nPlease help me in resolving the same. The below code supposed to open a Slack dialog. I am unable to see any error in the console while executing the code\nSample Code:\n`const { WebClient } = require('@slack/client');\nweb: new WebClient(process.env.SLACK_BOT_TOKEN);\nconst dialogForm = this.getDialog();\nopenDialog(triggerId, dialogForm) {\n    console.log('openDialog::', triggerId);\n    const dialog = JSON.stringify(dialogForm);\n    this.web.dialog.open(dialog, triggerId).then((res) => {\n        if (res.status === 200 && res.data.ok) {\n            return Promise.resolve('Successfully posted the dialog');\n        }\n        return Promise.resolve('Dialog could not be opened');\n    }).catch(\"222 :: \", console.error);\n},`\n`\ngetDialog(callbackId, title = '', details = '', priority) {\nreturn {\n    title: 'Header',\n    callback_id: callbackId,\n    submit_label: 'Request',\n    elements: [\n        {\n            label: 'Title',\n            type: 'text',\n            name: 'title',\n            value: title,\n            placeholder: 'Summary of the request'\n        },\n        {\n            label: dvPriority,\n            type: 'select',\n            name: 'priority',\n            value: priority,\n            options: [\n                { label: 'Low', value: 'Low' },\n                { label: 'Medium', value: 'Medium' },\n                { label: 'High', value: 'High' },\n            ],\n        },\n        {\n            label: 'Description',\n            type: 'textarea',\n            name: 'details',\n            value: details,\n            optional: true,\n        },\n    ],\n};\n\n}\n`. ",
    "bitsflew": "That fixes the 'indefined' issue, but the v4.x reponse has no 'channels' attribute!\nNext problem: how can I get a list of channels using RTM?\nbtw I only need to send  messages to a given channel, some (working) sample code showing how to accomplish that would be very helpfull. . Almost there\nweb.channels.list() returns 'CFG2W9DAZ'   for the channel.\nHowever the following code throws an 'invalid channel id' error:\nconst message = { type: 'message', channel: 'CFG2W9DAZ', text: 'hello' };\nconst result = await rtm.addOutgoingEvent(true, message.type, message);\n. I've used the following tutorial\nhttps://code.tutsplus.com/articles/building-a-slack-bot-using-nodejs--cms-29444\nThat tutorial uses RTMClient.\nWhy RTMClient?\n I want to implement a Slack message post with continuously updating content and RTMClient seems the right choice for that.\nSo back to the problem, whats the correct way to send messages using RTMClient?\nI've not been able to find any working samplecode and/or documention.\nFor example:\nhttps://slackapi.github.io/node-slack-sdk/rtm_api#connecting-and-sending-a-message\nThat uses rtm.sendMessage instead of rtm.addOutgoingEvent but it returns the same 'invalid channel id)' error.\nIt clearly states that the 'conversationId' parameter can be a channel ID, a DM ID, a MPDM ID, or a group ID.\nSo why is the channel id returned by web.channels.list not valid?\nFYI The actual codeI'm using to test\n```\nasync function channelWithName(name: string): Promise {\nconst web = new WebClient(slackToken);\nconst result: any = await web.channels.list();\nreturn result.channels.find((channel: any) => {\n    return channel.name === name;\n});\n\n}\nasync function sendMessage(channelName: string,message: string) {\nconst channel = await channelWithName(channelName);\nif(!channel) {\n    throw new Error('Channel not found')\n}\n\nconst rtm = new RTMClient(slackToken);\n\nawait rtm.start();\n\n// the following line throws:  'An API error occurred: invalid channel id'\n    const sendResult = await rtm.sendMessage(message, channel.id);\n}\n```\n. I found the reason for the error!\nThe bot was not a member of the channel.. ",
    "Lemmmy": "I think it would be reasonable to assume the options are static - changing the options mid-pagination is going to change the cursor in most cases anyway. As for the method - perhaps pass the method and the options separately, like this:\njs\nconst done = WebClient.paginate(\n  web.conversations.list, // pass the method itself\n  { types: 'public_channel' }, // then the options\n  (res) => // predicate as before\n});. That would work too, and seems much more efficient as you pointed out.. For what it's worth, I managed to get the desired result with _.takeWhile(history.messages, m => m.ts !== oldest.ts), however this still fetches as many pages as it can, so it's still running more API requests than ultimately necessary. . Yes, that seems to be what I'm looking for. I'll direct feedback there, thanks!. ",
    "travisghansen": "@aoberoi fair enough, is there a comprehensive (indexed) list of which events are writable and of those which are expected to send responses?  Seems like odd behavior to not respond at all even if the response is \"thank you we'll start sending events now and not an actual dataset\".. @aoberoi That explanation is fantastic!  I've been reading both the Web/RTM code/guides extensively and they've been generally very helpful.\nI understand all the implications/etc you've described.  I'm trying to put together a library/integration for node-red to slack.  In doing so I've made the consumer-side of the API very dynamic (methods and inputs are set by 'consumers' dynamically) which is exactly why I'm using the generics RTMClient.addOutgoingEvent() and WebClient.apiCall() in my code as the specific methods/options are being generated 'outside' the library and sent in as 'arguments'.\nThe expectation in flow-based programming is that the output would generally be consistent which is why I was hoping for a consistent response to all methods.  I'll either make up a fake response following the 'normal' response structure or just document it as \"don't expect an output if you're invoking x, y, or z methods\".. @aoberoi yeah I agree it's a hack...just assumed the issue may be deeper than even your library.  I'll try to get some debug logs setup and see if I can get it to reproduce but it's tough.  That's what's even tougher is node-red is meant to be a long-running process so random (or not 100% bullet proof) on a long running process of that nature is challenging.\nI'm confident it's not in node-red as other connection-based services seem to reconnect without issue etc.\nMy connection process is as generic as it gets: this.rtmClient = new RTMClient(this.credentials.token);\nFull code is here for review if you care: https://github.com/travisghansen/node-red-slack/blob/master/slackpost.js. @aoberoi I've been watching this pretty closely and things appear to be in somewhat decent shape.  I've had some occasions where the time it took slack to reconnect was substantially longer than some others.  Is there a timer that keeps doubling the time between tries or something of that nature?  What's the max it should take after connectivity has been restored?. @aoberoi what exactly maxes out at 30 minutes?  The time between tries? Or it completely gives up and will not attempt another retry after 30 total minutes of lost connectivity?\nIs it possibly to retry infinitely?  Ideally I'd have something like:\n1. retry Infinity\n1. start with X seconds between retries\n1. exponentially increase from X up to Y\nFor example, retry every 5 seconds and max out at 60 seconds between retries, and do it forever.  What would that look like?\nThanks!. @aoberoi the above produces this for me:\nnodered_1                 | FATAL ERROR: invalid array length Allocation failed - JavaScript heap out of memory\nnodered_1                 | \nnodered_1                 | <--- Last few GCs --->\nnodered_1                 | \nnodered_1                 |     1384 ms: Scavenge 67.0 (89.7) -> 56.1 (92.7) MB, 6.3 / 0.0 ms [allocation failure].\nnodered_1                 |     1546 ms: Mark-sweep 100.1 (133.8) -> 80.7 (126.4) MB, 5.4 / 0.0 ms (+ 33.3 ms in 6 steps since start of marking, biggest step 12.5 ms) [GC interrupt] [GC in old space requested].\nnodered_1                 |     3118 ms: Mark-sweep 748.8 (794.7) -> 545.4 (589.2) MB, 12.5 / 0.0 ms (+ 29.1 ms in 2 steps since start of marking, biggest step 29.1 ms) [GC interrupt] [GC in old space requested].\nnodered_1                 | \nnodered_1                 | \nnodered_1                 | <--- JS stacktrace --->\nnodered_1                 | \nnodered_1                 | ==== JS stack trace =========================================\nnodered_1                 | \nnodered_1                 | Security context: 0xbdf8dbcf781 <JS Object>\nnodered_1                 |     2: timeouts [/data/node_modules/node-red-slack/node_modules/retry/lib/retry.js:~12] [pc=0x6d11699e0c] (this=0x1d3dfc3f83d9 <an Object with map 0x45ca1a34f59>,options=0x310fe493efc9 <an Object with map 0x146ee837e121>)\nnodered_1                 |     3: operation [/data/node_modules/node-red-slack/node_modules/retry/lib/retry.js:4] [pc=0x6d1169719a] (this=0x1d3dfc3f83d9 <an Object with map 0x45ca1a34f59>,options=0x310fe...\nnodered_1                 | \nnodered_1                 |  1: node::Abort() [node-red]\nnodered_1                 |  2: 0x7d017c [node-red]\nnodered_1                 |  3: v8::Utils::ReportApiFailure(char const*, char const*) [node-red]\nnodered_1                 |  4: v8::internal::V8::FatalProcessOutOfMemory(char const*, bool) [node-red]\nnodered_1                 |  5: v8::internal::Heap::AllocateUninitializedFixedDoubleArray(int, v8::internal::PretenureFlag) [node-red]\nnodered_1                 |  6: v8::internal::Factory::NewFixedDoubleArray(int, v8::internal::PretenureFlag) [node-red]\nnodered_1                 |  7: 0xb67a50 [node-red]\nnodered_1                 |  8: v8::internal::Runtime_GrowArrayElements(int, v8::internal::Object**, v8::internal::Isolate*) [node-red]\nnodered_1                 |  9: 0x6d10b079a7\nLooking at retry-policies.ts maybe I should be not setting retries and instead do this forever: true,?. @aoberoi I'd rather have true forever in whatever form it takes.  I have instances of Node-RED that run for months/years on end without being restarted.  It's important to have reconnects happen with 100% assurance.\nIf you could send over a true forever scenario (whatever it looks like) that would be great.  I'm unclear how forever and retries conceptually differ.  Ultimately it doesn't really matter to me as long as I can get something that will retry as long as it has to...including the original request of this issue, implementing a watchdog outside the library if absolutely necessary.. @aoberoi for others stumbling across this in the future, how do retries and forever correlate?. @aoberoi ah.  Thanks!. ",
    "janniks": "Hi Shane,\nI understand - that makes more sense! Thanks for the quick response \ud83e\udd18\ud83c\udffb\nKeep up the great work \ud83c\udf89\nOn Mon, Mar 4, 2019 at 20:24 Shane DeWael notifications@github.com wrote:\n\n@janniks https://github.com/janniks Thanks for raising this \ud83d\ude47This is\nin fact a bug on the platform and I've reported it to the team. The bug is\nthat no user mentions should be rendering inside of a plain_text object\n(rather than both).\nTo render user mentions with blocks, you'll have to use the mrkdwn text\nobject instead of the plain_text one. mrkdwn is supported within the\ncontext block so this should be a fairly simple fix but let me know if you\nrun into any issues \ud83d\ude42\nThere's some relevant documentation and examples for mentioning users with\nblocks on the API site\nhttps://api.slack.com/messaging/composing/formatting#mentioning-users.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/slackapi/node-slack-sdk/issues/712#issuecomment-469386730,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGEUJn1QetXPoJy-Ud-fek8p3y1X89NTks5vTXLRgaJpZM4bY5L_\n.\n. \n",
    "eamodio": "Sounds reasonable to me. In theory it shouldn't affect us at CodeStream either, since we do all our slack communication from within a node process.. ",
    "fvgs": "The option is certainly valid, however it defaults to true. Therefore, having autoReconnect: true is redundant.\nI could see value in demonstrating the existence of the option since this is an example. However, there are several other options not in the example which a user would need to find in the source code documentation. Thus, since the option is non-essential and redundant, I think it is most intuitive to consistently use only those options which are essential.\n. This was done to make the example consistent with the code in the readme. Consistent examples give the user a better idea of what sensible defaults to use. The purpose of the PR is also to improve consistency.\n. ",
    "ggruiz": "my bad; i was supposed to change that to 429, but forgot about it. Thanks!. Will change this and every instance thereof. note: time specific, not existence. i get it, will change to reflect this. rephrased. taken care of in latest commit; changed line 202 to assert.nestedPropertyVal. taken care of in latest commit; added the property error: 'bad error' to line 197's test response object. taken care of in latest commit; along with error: 'bad error' to line 197, also added assert.nestedPropertyVal(error, 'data.error', 'bad error') to inner function of the catch. oops. ",
    "harveyr": "\ud83d\udc4d fixed!. "
}