{
    "sheerun": "Of course. I just thought Vim already includes exhaustive c/c++ syntax support.\nWhat lang pack do you prefer? I found:\n- https://github.com/vim-scripts/c.vim\n- http://www.vim.org/scripts/script.php?script_id=3064\n- https://github.com/vim-jp/cpp-vim\n- https://github.com/vim-scripts/cpp.vim--Skvirsky\n- https://github.com/octol/vim-cpp-enhanced-highlight\n. Hmm. \noctol/vim-cpp-enhanced-highlight seems to be superset of vim-scripts/cpp.vim--Skvirsky\nvim-scripts/c.vim seems not about syntax, but c development utilities.\nvim-jp/cpp-vim has support for both c and c++, and should play nicely with octol/vim-cpp-enhanced-highlight because later only extends cpp syntax.\nI'll go with both https://github.com/vim-jp/cpp-vim and https://github.com/octol/vim-cpp-enhanced-highlight\n. Of course, I forgot about jade. I'm not sure about protobuf, but judging on number of stars on Google Code, it's also quite popular (and syntax file is quite small anyway). I think I'll include both. Thanks for the feedback!\n. Looks good. Thank you for contributing!\n. Whoops, I didn't notice you didn't edit build file. For future: it is enough to change repository name in ./build script and run it to automatically update / switch language package.\n. I confirm. spf13/PIV ftplugin relies on plugin (not autoload) folder which is always loaded during vim startup. This is not in vim-polygolot spirit, so I think the best solution is to switch to more lightweight StanAngeloff/php.vim. You can always use sp13/PIV for full-fledged PHP support. \nI'm open for other ideas. One possible solution is to disable ftplugins for all language packs, but I'm not sure about  that.\n. By the way, thank you for reporting this issue. I'll work on some test coverage of imported language packs.\n. @ajpaulson I made automated Travis CI test suite to make sure such issue won't happen again.\n. This is only temporary, as I want to know the audience of plugin.\n. Thank you so much for reporting this issue. \nAs it turns out specs doesn't cover all file extensions, I've opened issue #7. It'll be fixed soon, but for now, I'm just fixing latex syntax to more lightweight (but pretty solid) https://github.com/LaTeX-Box-Team/LaTeX-Box\n. Btw. this type of error occurred also for PHP extension. It's because vim-polyglot doesn't include plugin folder because of performance reasons. I've opened #8 to test all such plugins manually, and then #7 automatically.\n. I made visual inspection of all filetypes. Still no idea how to trigger error on ':set filetype=xxx' in Vimrunner...\n. As it turns out Erlang had the same issue. I switched provider to oscarh/vimerl as it doesn't use plugin folder 0fcd0566\n. - I removed bundler because as it turns out it doesn't introduce new syntax\n- csv plugin looks like shit, but works\n- erlang works, plugin folder is only for generating templates\n- go-lang works, plugin folder is only for documentation lookup\n- rspec highlighter turned out to not be working, but for different reason. I forked it and fixed.\n- Scala plugin folder turned out to be for import sorting etc. syntax is working.\n. Thank you for that suggestion.\nI'm little reluctant to do this because vim-polyglot is meant to be mainly syntax/indent plugin, and that probably needs no documentation (only in clojure case I found configuration to indentation).\nFrom inspecting doc folder from sub-plugins they mainly document functionality from plugin directory, and vim-polyglot doesn't include that folder. Moreover currently only ruby, clojure, git, csv, and scala have any documentation at all (very short, 50 lines mean).\nHere is list of compiled files merged from doc folder: \nLaTeX-BoX-Team.png  coffee-script.txt        latex-box.txt\nLaTeX-BoX-Team.svg  ft-csv.txt               scala.txt\nLaTeX-BoX.png       ft-gitcommit-plugin.txt  textile.txt\nLaTeX-BoX.svg       ft-ruby-omni.txt         vim-ruby.txt\nclojure.txt         ft-ruby-syntax.txt\nAll to all, I think including documentation will introduce more mess than add some value.\n. Looks good. Thank you for contributing!\n. That's exactly what I was going to say :) vim-ruby already sets file type of *.rabl to ruby, so the only usable part from vim-rabl is plugin section, but I'd rather not include it on vim-polyglot, because it's loaded each time it starts.\n. Thanks for reporting this. New version is available.\n. vim-polyglot serves mainly as syntax-highlighting.\nwmgraphviz doesn't introduce any syntax coloring, but custom functions and snippets.\nIf you want grapviz support in vim-polyglot, you need to find syntax-only plugin, sorry.\n. - ChrisYip/Better-CSS-Syntax-for-Vim is advocated to be not compatible with other plugins\n- hail2u/vim-css3-syntax uses too many files. I want startup to be fast, so no :(\n- fremff/vim-css-syntax was updated 10 months ago, no stars\n- lepture/vim-css was updated 3 months ago, 10 stars\nI guess I'll go with lepture/vim-css\n. I've added opencl. 1.6.0 is released.\n. Probably because default indent version served with Vim is good enough according to author of vim-scripts/python.vim--Vasiliev which I'm using for build.\nI don't want to change default vim's python indentation with https://github.com/hynek/vim-python-pep8-indent. I think it's too intrusive :)\n. jasmine.vim is full-pack while vim-polyglot is syntax,indentation only plugin.\nI cloud include https://github.com/glanotte/vim-jasmine though.\n. I guess it's quite popular? OK for me.\n. It's quite minimalistic and popular, so OK from me.\n. I guess Vasiliev is quite old now, and no one is complying on vim-python combined, so OK from me.\n. vim-polyglot is syntax and indentation only plugin\n. Bummer. I'll revert back to css-color.\n. Here's github port of c syntax extensions:\nhttps://github.com/vim-scripts/aftersyntaxc.vim\nCould you compare those two systemd extensions?\n- https://github.com/Matt-Stevens/vim-systemd-syntax\n- https://github.com/kurayama/systemd-vim-syntax\nFormer seems simpler and will load faster, but maybe we should use more advanced second?\nMaybe even something different?\n. I finally found time for review. It's systemd and c-extensions are now part of distribution.\n. Hello,\nPlugins needs to be available on github to be used in vim-polyglot. It also needs to have some stars, so I'm sure people use it and don't have any problems with it. So for now I pass.\nThanks for suggestion :)\n. I tested it and:\n1. The syntax highlighting is poor and distracting:\n   https://www.dropbox.com/s/m11ra856pyrz6t4/Screenshot%202014-06-08%2013.38.06.png\n2. It affects load time of all yml files, because ftdetects scans directories on disk to determine if it's ansible script or not.\nI'm not sure if it's worth it ;/ Closing for now.\n. I think we should drop support for autoload files and leave only indentation and syntax support.\nIf you wanted to use autocomplete feature, you could include one of go packs manually.\n. @ciarand Do you know any go-lang plugin that supports only syntax and indent?\n. I guess it's work a try. It seems pretty popular and langpack seems good too.\n. Doesn't vim support liquid out of the box? For sure it's part of MacVim runtime.\n. I found .liquid support even on my server in vim 7.3.429 from 2010.\nI'm sorry, but I don't want to add superfluous packages :( I'm closing this.\n. Actually it's tpope's plugin that I found on my server :)\nWhat vim version are you using? What system? It's weird liquid.syntax is not available.\n. Oh, I guess different vendors include different runtime files.\nI guess it won't hurt to include liquid because there were few fixes since 2010.\nI released 1.9.1 with liquid support.\n. I tried sample PHP file and I didn't experience the error. Could you send it or at least part of it that causes the error?\n. vim-polyglot doesn't support any of this variables.\nvim-polyglot provides only syntax file. You can see available variables in https://github.com/sheerun/vim-polyglot/blob/master/syntax/php.vim\n. I see. Probably syntax shipped with vim-polyglot is overriding your syntax file.\nCould you try to navigate to directory where vim-polyglot is installed and move syntax/php.vim to after/syntax/php.vim and check if it fixes your setup?\n. It should be fixed now.\n. Sure\n. I'm not sure if this language is popular enough. For example mediawiki is more popular, yet we don't support it. Also there are many many wiki languages ;/ I'll wait for some +1\n. Sorry, tshirtman/vim-cython is using plugin to detect file type instead ftdetect.\nLoading plugins has load time penalty.\n. vim-polyglot is syntax-only plugin, no fancy stuff\n. I released new version with updates\n. I guess powershell is ok :)\n. Vim-polyglot only aggregates other plugins. Please send PR to https://github.com/travitch/hasksyn\n. Repository you suggested it too heavy for vim-polyglot (it should be only indent and syntax)\nI changed provider to hcs42/vim-erlang-runtime\n. Hey @vmaatta, your subtree selector landed in 8e26e6e. Thank you :)\n. Yeah, too fancy :(  I think R current highlighting is good enough\n. Landed in master, thanks :)\n. Do you mean like ENV variable for skipping syntax loading?\n. Sounds good. How about disabling syntax highlighting for too large files automatically?\nhttp://stackoverflow.com/questions/178257/how-to-avoid-syntax-highlighting-for-large-files-in-vim\n. Did you try using vim --noplugin -u NONE?\n. I think it may be ftplugin we provide: https://github.com/sheerun/vim-polyglot/blob/master/ftplugin/csv.vim\nCould you try removing vim-polyglot and checking if it improves performance? \nAlso the result of vim --noplugin -u NONE\n. I have little spare time temporarily, so a PR is welcome!\n. @dirtyrottenscoundrel Yup. I'm also thinking about something like following on top of each file:\nif exists('g:polyglot_disabled') and index(g:polyglot_disabled, 'protobuf') != -1\n  finish\nendif\n. Thank you for PR! It is now implemented (and will be released soon in v1.0.0)\n. Concealing disabled would need to be a default :(\n. I forked vim-json, removed concealing at all, and switched provider of JSON syntax.\nvim-polyglot v1.13.0 is now released. Thanks guys :)\n. Do you know what should be the solution? What works for you?\n. Disabling concealing when using original plugin works for me. Here is what I use:\nlet g:vim_json_syntax_conceal = 0\nPlug 'sheerun/vim-polyglot'\nPlug 'elzr/vim-json'\nIf it doesn't work for you, please provide me a way to reproduce this bug.\n. Could you try to find cpp syntax that doesn't experience this issue?\n. github repository with cpp syntax\n. I'll put it another way. Currently we use https://github.com/vim-jp/cpp-vim for CPP syntax. Could you find replacement that has correct folding behavior?\n. vim-polyglot cpp syntax seems exactly the same as vim's official...\n- https://raw.githubusercontent.com/b4winckler/vim/master/runtime/syntax/cpp.vim\n- https://raw.githubusercontent.com/sheerun/vim-polyglot/master/syntax/cpp.vim\n. NVM, there are different after syntaxes..\n. I tried to reproduce this issue and I unable to do so.\nvim-polyglot also uses: https://github.com/octol/vim-cpp-enhanced-highlight\nPlease try to uninstall vim-polyglot, install vim-cpp-enhanced-highlight, and check if it introduces error.\nIf so, you can try to fix it and send them PR or we can try to find better package..\n. I updated all packages and released new version. Please try now.\nAny help with pinpointing this bug is appreciated, as I cannot reproduce.\n. Maybe. Try to install vim-polyglot as the only plugin and check if it works.\n. What is your vim version?\n. Sorry, really I cannot reproduce: https://v.usetapes.com/PIdygAOJAa\nSomething is wrong with your environment...\n. Still, cannot reproduce: https://v.usetapes.com/MN0J0oK7Pj\n. Thanks. I finally managed to reproduce issue..\nI pinpointed issue to c-extensions plugin. I removed it entirely from vim-polyglot.\nYour example seems to work now.  New version is available. Cheers!\n. vim-tmux does little to much. this is syntax-only plugin.\nI've sent PRs to tmux plugins vim-polyglot uses: https://github.com/tejr/vim-tmux/pull/2\n. I've released v1.13.1 with this fix applied. Cheers\n. Hey. Thanks for suggestion, but this is syntax-only plugin.\nI'll consider creating another one for completions, though :)\n. vim-polyglot actually uses StanAngeloff/php.vim. I don't know how to fix it :)\n. Could you send .php file that reproduces this issue? What's your vim\nversion?\nOn Tue, Mar 17, 2015 at 9:00 AM, Yavor Ivanov notifications@github.com\nwrote:\n\nThe syntax files are identical, but renaming the one used by polyglot (as\na means of disabling it) and loading StanAngeloff/php.vim after polyglot\nmagically makes everything work.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/sheerun/vim-polyglot/issues/55#issuecomment-82434200.\n. You probably need to provide a way to reproduce, or a fix.. I don't know what's wrong.\n\nMaybe send offending file.\n. Could you find a plugin that provides only syntax for Julia? vim-polyglot doesn't want extra complexity\n. I've released 1.14.0 with julia-minimalist-vim syntax, but sincerely it doesn't look extremely nice :) \nIf you want you want, you can suggest/create another repository.\n. Yes, I'm somewhat concerned about ragel, but I decided to add it anyway..\nI'll reiterate this integration when I find free time.\n. Could you provide example file that causes this error?\n. Yup. Could you paste tst.xpt.vim somewhere?\n. Are you sure it's because if vim-polyglot? I can't reproduce. I get no error.\n. What happens when you uninstall vim-polyglot, and install derekwyatt/vim-scala instead?\n. Well, it's not vim-polyglot issue then. Please report it to vim-scala :)\n. Please note I can't reproduce your problem, so it's quite likely problem with your setup, and not vim-scala.\n. @icholy This should be fixed in typescript repo. vim-polyglot only aggregates plugins.\n. I've released 1.3.13 with updates\n. Hey. Vim-polyglot offers only syntax highlighting (and proper indentation setting).\nIf you want extra features like concealing, you need to install specific plugins.\nFor example:\nlet g:vim_json_syntax_conceal = 1\nPlug 'sheerun/vim-polyglot'\nPlug 'elzr/vim-json'\n. Please suggest some :) Preferably only syntax + indentation\n. Hey. You can create cron job on your computer that runs ./build script periodically.\nNo need for too many releases from my side :)\n. Hey. Could you just live changes to the build file? I'd like to compile it myself.\n. Sorry guys for late reaction.. I've updated my yajs fork so it plays nicely with original yajs. I've also updated vim-polyglot, so v2.2.1 should work for you.\n. It's probably ok now\n. Added :)\n. Hey! Thrift is already a part of vim-polyglot and django syntax is missing ftdetect.\n. We need a github repository\n. Can you find repository with good objc syntax?\n. Hey. Please note that this part of README is auto-generated from build script, so you'd need to fix it as well :)\n. I've merged sorting of packages, but I needed to remove sass/scss entry, because it duplicates vim-haml plugin. \n. It had too much \"candy\". For example it highlighted native JS functions like \"find\" or \"map\", even it they were't native..., the same for DOM functions. I've stripped down it a little, so it's more pleasant.\nIt not perfect though by any means.. For example indentation is still screwed up in many places.\nI'd be glad to accept something more barebone and polished than othree/yajs\n. @pmpbar It does in default setup\n. @craigp Could you send example file where highlighting is destroyed? Preferably with screenshots\n. @craigp I am the repo owner by the way\n. Yes!\n. I can't notice any lag when editing with latest vim-polyglot. Can you confirm?\n. It seems to be an issue vim vim-jade itself. It run javascript syntax for each parenthesis block:\nsyn region  jadeAttributes start=\"(\" end=\")\" contains=@htmlJavascript\nI'd gladly add more performant jade syntax repository if you'll find one. Or maybe you can contribute to jade.vim and make it faster :) Either way, it's not something I can solve here.\n. I've updated this repo, maybe it is ok now? \n. Implemented on master\n. Thanks!\n. I think we're using this one already ;)\n. Actually it's just a matter of adding repository name to build script and running it.\n. Could you check v2.7.2 and if it doesn't work, attach your vim configuration (either .vimrc or zip) \n. README is always up to date, because it's written by a script.\nscss seems to be a part of haml package.\nIf you find a way to automate such documentation, please send a PR.\n. Merged\n. I'm afraid you need to resolve it with upstream repositories or suggest alternative one.\n. Proper way to include it is Plugin 'sheerun/vim-polyglot'\n. or if you use Plug 'sheerun/vim-polyglot'\n. vim-polglot handles only syntax and indent, not autoformatting\n. yes, we filter out unnecessary stuff\n. To get full support for go-lang you can use go plugin directly. vim-polyglot deals only with syntax and indent so it can load quickly. We don't plan to fully support all languages including tooling.\n. I've updated the readme\nOn Fri, Oct 27, 2017 at 5:22 PM, Juanjo Alvarez Martinez \nnotifications@github.com wrote:\n\nYou should be more explicit about that (only dealing with syntax an\nindent) in the README.md file. I was wondering why a bunch of things (among\nthem gofmt) stopped working with this plugin even while it bundles the\nplugins I was using previously.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/sheerun/vim-polyglot/issues/105#issuecomment-340002439,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAR2DcXg1GsoZG1eor2n_HBPkJlzZ59Sks5swfVDgaJpZM4HZ5_c\n.\n. vim-polyglot just gathers different plugins, please send PR to appropriate repo listen in README\n. I've removed jinja syntax from vim-plyglot until I find fixed package\n. @joaoponceleao As for issue you're mentioning, I'm not sure how to fix it from my side.\n. Every few weeks or so. I don't update every time any project is updated\n. As for how log - as long as I use vim, so forever :)\n. By the way, you can update locally if you want to, just run ./build script.\n. no prob :)\n. It is an artifact of build process, but we use vim files from this repo indeed: https://github.com/nginx/nginx/tree/master/contrib/vim\n. Hey. You need to change it in repository listed in ./build script instead\n. the same as for fluxkeys\n. Sorry, it's too specific and requires annotation at the end of file\n. This is too specific as well (and includes too much files), as it's only useful for someone that develops gtk. Such person can add gtk syntax support directly via vim-plug.\n. You need these patches against upstream repositories. vim-polyglot just gathers plugins together.\n. I've pushed updated build\n. that's because I want to keep conceal off by default (I removed concealing in my fork)\n. See: https://github.com/elzr/vim-json/issues/59\n. Maybe you're using different plugin? Could you post your .vimrc somewhere?\n. Added on master, thanks :)\n. Could you select good syntax package on github?\n. Java is not JacaScript\n\nOn Monday, 18 July 2016, joeytwiddle notifications@github.com wrote:\n\nThe best one I have seen is: pangloss/vim-javascript\nhttps://github.com/pangloss/vim-javascript\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/sheerun/vim-polyglot/issues/129#issuecomment-233289304,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAR2DYAfIJgJ-010yw0BQyV3FBYVgauyks5qW05XgaJpZM4Ij9Kx\n.\n. Hey! We only accept entries in ./build file. Repositories are fetched automatically by executing it\n. Just please point the repo you'd like to include in this plugin\n\nOn Tuesday, 19 July 2016, Ali Aliyev notifications@github.com wrote:\n\n@sheerun https://github.com/sheerun Hi! Thanks for response!\nWhat should I do? Should I also create a PR for ./build with my\npython-compiler repo? Could you help me pls :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sheerun/vim-polyglot/pull/130#issuecomment-233571762,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAR2DUsRotnw-6bpoNJczEcYKN9f8_8sks5qXJHEgaJpZM4IpvM9\n.\n. The only thing you need (and can) modify is ./build script, sorry :)\n. Could you find appropriate plugin on github?\n. Hey,\n\nMy focus with vim-polyglot is on reliable syntax support, not advanced features like auto-indentation. If you often need to auto-indent tabular data in markdown, you can use plasticboy's plugin directly on top of vim-polyglot :) While I find plasticboy's syntax files superior to tpope's (for example they better handle * character), I intentionally stripped it from tabular.\n. Could you try to install any individual package instead? I think it's problem with your setup, not vim-polyglot\n. Good idea, I've added info about syntax on to the README. Feel free to add any extra info in PR :)\n. ./build script is for fetching source from repositories listed there. We don't modify source files directly.\nFeel free to run ./build script on master and push add new tags. Just please don't edit source directly.\n. We do updates by running ./build script from the root of the project + tag release + push\n. I just did that on master\n. If you'll find better syntaxes for javascript, please let me know :) I cannot modify anything directly here, as vim-polyglot is just bundle of other syntax plugins.\n. Not sure what doesn't work for you, but we don't include plugin as it is loaded even if someone doesn't use rust. ftplugin on the other hand is executed only when you open rust file.\nStartup time is a priority for vim-polyglot, so unfortunately I won't include it.\n. Syntax & indentation works for rust files, I review the changes\n. Gotcha, I've added a comment about it in the readme. Thanks :)\n. Hey. Probably this snippet is compatible only with native markdown syntax. You can disable syntaxes individually like described in the README.md. I cannot help here otherwise.\n. Hey. Unfortunately I cannot reproduce this. I am JS developer myself and I never had issue with vim-polyglot. If you still experience this issue, please make sure it's vim-polyglot's bug, and send your .vimrc configuration and sample .js file to reproduce.\n. This is just syntax + indentation + maybe compiler plugin, and vim-rails mostly adds extra commands to deal with Rails, what is out of scope for vim-polyglot. You can always use it directly. Thanks for suggestion :)\n. Lik @whitelynx says. If you can find better markdown package, please send PR that updates repository name in build file. You can also send PR with better default options to config.vim.\n. Hey. I think wrapping whole file with is should be enough. Could you confirm? I've commited changes on master branch.\n. ok then, I'll use your code instead\n. @BlakeWilliams I've released a version of vim-polyglot that incorporates your fix, thanks!. Fixed :) Thanks for report!\n. You could either disable polyglot provided yaml syntax (see README), or fix upstream package vim-polyglot uses. Vim-polyglot just gathers different syntax packages.\n. I've updated elm bundle in vim-polyglot, hope it helps. If not, please try to resolve with upstream. I guess it can be if jsx syntax uses javascript filetype instead. I'd need to be solved in respective plugins, though. Not here.\n. I want jsx to be supported by default in .js files by default in vim-polyglot. It is very uncommon to name files .jsx if they contain jsx syntax. Usually they are just named .js.\nCurrently including jsx:mxw/vim-jsx and enabling mentioned flag is the easiest way to achieve it. If you'll have a solution that enables jsx syntax by default without changing filetype, please let me know.\nProbably it would involve changing jsx:mxw/vim-jsx upstream so it doesn't change filetype.. I've added this to master. Unfortunately it's hard to merge PRs to this repo. Thanks!. Sure, your version looks better maintained. I've added this to master, unfortunately it's hard to merge PRs to this repo. Thanks!. could you find a vim plugin for it?. I've updated all packages, including elixir's. Hope it helps. I fixed it here and submitted a patch against elixir repo:\nhttps://github.com/elixir-lang/vim-elixir/pull/277. I've forked tpope's plugin and removed scss/sass references. Then I added cakebaker/scss-syntax.vim. It's all on in master already so I'm going to close this PR. Thanks!. Both are used, as one defines syntax/{c,cpp}.vim and second one after/syntax/{c,cpp}.vim. This is something I could consider including if you found a plugin that implements it. Otherwise vim-polyglot is just an aggregation of other packages and doesn't implement its own functionality. Hey. I suggest raising this issue in upstream repository. We just aggregate other plugins. See:\nhttps://github.com/othree/nginx-contrib-vim\n. I'm afraid this needs to be resolved in upstream repository. You need to post this change to elixir package. We just aggregate plugins.. Is https://github.com/blockloop/vim-swigjs better? . Any other options?. It seems it's pointless to add swig syntax if none of existing plugins support mixed code.. Please let me know if you find something else, or manage to patch https://github.com/vim-scripts/SWIG-syntax/. I'm little hesistant, as it tries to autodetect filetype based on contents, which slows down every file open in vim: https://github.com/kylef/apiblueprint.vim/commit/8fbefdb2e397b130a86ab3929321ce698ca45cce\nLet's see if they are willing to change it, at last we can fork it.. . It's to make bundle smaller. We include only syntax, indentation, and compilers.. Do you experience the same issue when using just vim-ruby/vim-ruby without vim-polyglot?. Then please raise this issue there. Vim-polyglot is just bundling other plugins. othree/nginx-contrib-vim we currently use has far better keyword support. I suggest merging hexchain/vim-openresty into it, so we can get best of both worlds. Sure, I release updated version every month or so. Mind you can always use ./build script locally. It seems vim 8 supports pandoc and rmd by default. Could you try to upgrade?\nAs for the concealing features, unfortunately I don't want to include it as more often than not users don't like it. I don't think it's possible in git in general, isn't it?. vim-polyglot already supports extracting just subdirectories, the syntax to put in build script is like so:\ndocker:honza/dockerfile::contrib/syntax/vim. Hey, thank you :)\nI think 7.x is more than enough. Generally update process can be blocking, as it's quite fast (~30 seconds) and rarely used. I think you could borrow some codebase from vim-plug as it does similar thing (downloading packages from GitHub). I'd ask that the packages shoudn't be git cloned but rather downloaded as .zip or .tar.gz packages and unpacked (it's way faster, and that's how it's currently done in build.sh). I've added you to collaborators to maybe make things easier :). Also, it's unfortunately obligatory that .tar.gz or .zip packages are downloaded in parallel, as it takes way to much time to download them sequentially.. There can be simpler version of this task: :PolyglotUpdate that just runs build script inside vim-polyglot directory. @h-michael Feel free to send a PR. I needed to commit by myself, as I accept PRs only with changes in build, thanks!. I believe you need to send PR to vue syntax plugin, not here. Hm?. Unfortunately I cannot add jinja, see #108 I'll add caddy though :) . Could you describe how are you switching between buffers exactly, and maybe post example files that affect this? Could you also try to reproduce with only vim-polyglot enabled and no other plugins?\nAlso, I've updated all the packages recently, could you try to update first?. This is something that needs to be fixed in https://github.com/pangloss/vim-javascript\nCould you raise issue there?. Unfortunately I can't merge it as this plugin includes quite heavy autoload that slows down experience for all vim-polyglot users upon each file load: https://github.com/tweekmonster/django-plus.vim/tree/master/autoload\nYou can still use it as separate plugin though. Isn't it what this code does? It checks whether someone set this variable, and only if it's not set, it defaults to 0. If I'm wrong, can you suggest different approach by submitting a PR?. I think we could disable setting this variable if let g:polyglot_disabled = ['json'], so you can use original plugin with the defaults. Do you want to send a PR?\nOf course you can also load polyglot after json, or set the variable at the top of .vimrc. Seems to work for me without any slowdown:\nsh\nmkdir -p ~/.vim/pack/default/start\ngit clone https://github.com/sheerun/vim-polyglot ~/.vim/pack/default/start/vim-polyglot\nPlease make sure there's no .vimrc or .vim folder before that.. I update vim-polyglot with changes from upstream packages every few weeks. I've done it again, so it should be available. Note you can just run ./build in vim-polyglot directory to update manually.. You just use package manager for vim like vim-plug, and include them normally. Something like Plug \"digitaltoad/vim-pug\" in your .vimrc. Unfortunately I get some errors when trying to include it. Also it seems to do more than just highlighting - vim-polyglot is plugin pack just for syntax / indentation, no advanced features.. Sure thing, looks awesome :). want to debug this?. whether pug plugin that polyglot uses works for you, without polyglot\nalso if not, what is the plugin I should use. it isn't the issue with polyglot then. maybe try to remove all plugins except polyglot. I'd rather not fix anything, but use a different plugin. Which one should I use to fix your issue?. @RenatoUtsch Maybe you want to extract is as github repository, so I can include it here?. I've changed python syntax providers to:\n- vim-python/python-syntax\n- aliev/vim-compiler-python\n- Vimjas/vim-python-pep8-indent\nwith let g:python_highlight_all = 1\nIf you find issues with your syntax highlighting, indentation or compiler support, please contribute to these repositories, vim-polyglot will fetch these changes periodically.. Hmm. I cannot find syntax plugin for this on GitHub. Could you find something?. Sorry I don't do it. It seems that this plugin runs for every opened file, and the promise vim-polyglot makes is to not slowdown loading of files in general case. A great plugin nonetheless!. it should be in master now. I think it's already on master :). thanks. also vim-polyglot adds just basinc syntax and highlighting. if you'd like advanced language support you'd need to install specific plugins. It's now updated :) btw. You can use ./build to update manually (maybe even as a hook to Plug).. thank you :). I've removed css syntax and added all syntax files from upstream vim repository, thanks!. I've updated the upstream so it should be present. this needs to be fixed in upstream package, isn't it?. This breaks the build for scala files, you'd need to fix it first. I'll close it for now, but feel free to send fixed PR :). Please submit this PR to upstream package. This package just aggregates different plugins.. The same story as with other PR. Sorry, I needed to commit it myself on updated master. thanks for noticing, I've pushed a fix. This should be now fixed, please update. I've reverted inlining upstream vim syntax files, it should be fine now.. I've reverted inlining upstream vim syntax files, it should be fine now.. I think we had csv.vim but it caused performance issues when editign csv, and generally didn't to much good. As for LargeFile, nobody suggested it yet.. I tried to add chrisbra/csv.vim but it makes loading big csv files considerably slower (even with LargeFile)\nAlso, I tries LargeFile plugin for 800mb csv file, but it doesn't make any difference.. Sorry, I can't include in vim-polyglot that makes file loading considerably slower by default. Ideally you'd (@chrisbra) modify csv syntax plugin so it checks whether file has more than few megabytes and prevent parsing in such case. Then I'd have no problems including it.\nCSV is an unfortunate exception from other languages as their files tend to be huge, you don't store tenths megabytes of data in .py or .rb file for example. That's why we need this \"feature\".. OK, let me check. I tried it with:\nif !exists('g:csv_start')\n  let g:csv_start = 1\nendif\nif !exists('g:csv_end')\n  let g:csv_end = 10\nendif\nand largefile plugin, but loading of large csv files is still slow, sorry. Hmm on second thought it's something different than these two as without them loading is slow as well.... Okay, I've checked once more and it doesn't slow down anything, I've merged csv plugin :) thank you. Hey @lervag awesome work :)\nPlease remember that the build script tries to strip things that are not syntax highlighting, indentation config, or compiler config.\nI'd love to switch vim-polyglot to vimtex, but currently the blocker is a lot of warnings vimtex gives while latex-box shows none: https://i.imgur.com/B4f7eLF.png\nPlease consider not showing these warning and treating extra features as opt-in.\nAlso, the startup for .latex files is quite slow (especially ftplugin/tex.vim and first screen update), as shown by vim --startuptime start.log foo.latex\n149.737  004.049  004.049: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex.vim\n150.758  000.155  000.155: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/util.vim\n170.958  000.719  000.719: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/state.vim\n172.204  000.255  000.255: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/re.vim\n172.430  000.882  000.627: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/parser.vim\n193.118  000.141  000.141: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/paths.vim\n193.532  000.190  000.190: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/view.vim\n193.865  000.174  000.174: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/view/general.vim\n194.409  000.326  000.326: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/view/common.vim\n195.404  000.728  000.728: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/compiler.vim\n197.853  002.290  002.290: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/compiler/latexmk.vim\n198.243  000.233  000.233: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/log.vim\n198.885  000.205  000.205: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/debug.vim\n227.781  000.249  000.249: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/echo.vim\n287.088  000.318  000.318: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/qf.vim\n287.476  000.289  000.289: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/qf/latexlog.vim\n288.506  000.753  000.753: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/toc.vim\n289.087  000.473  000.473: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/toc/matchers.vim\n289.595  000.401  000.401: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/index.vim\n289.949  000.249  000.249: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/labels.vim\n290.300  000.234  000.234: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/fold.vim\n290.712  000.292  000.292: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/fold/envs.vim\n290.987  000.115  000.115: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/fold/cmd_single_opt.vim\n291.204  000.088  000.088: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/fold/markers.vim\n291.381  000.069  000.069: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/fold/preamble.vim\n291.791  000.242  000.242: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/fold/sections.vim\n292.185  000.145  000.145: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/fold/cmd_addplot.vim\n292.436  000.102  000.102: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/fold/env_options.vim\n292.643  000.093  000.093: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/fold/cmd_multi.vim\n292.901  000.120  000.120: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/fold/cmd_single.vim\n296.558  000.380  000.380: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/cmd.vim\n298.151  001.149  001.149: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/complete.vim\n322.744  000.112  000.112: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/debug.vim\n325.313  002.397  002.397: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/delim.vim\n326.319  000.484  000.484: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/doc.vim\n328.035  000.085  000.085: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/echo.vim\n328.393  000.197  000.197: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/env.vim\n328.850  000.254  000.254: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/format.vim\n329.150  000.195  000.195: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/imaps.vim\n332.940  000.100  000.100: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/include.vim\n333.427  000.327  000.327: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/index.vim\n333.873  000.268  000.268: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/info.vim\n334.123  000.075  000.075: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/kpsewhich.vim\n334.503  000.120  000.120: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/matchparen.vim\n335.076  000.153  000.153: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/pos.vim\n335.911  000.139  000.139: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/misc.vim\n336.270  000.192  000.192: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/motion.vim\n336.975  000.311  000.311: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/parser.vim\n337.209  000.081  000.081: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/paths.vim\n337.467  000.112  000.112: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/pos.vim\n337.877  000.254  000.254: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/process.vim\n338.226  000.145  000.145: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/re.vim\n338.495  000.107  000.107: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/scratch.vim\n339.019  000.305  000.305: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/text_obj.vim\n339.893  000.193  000.193: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/autoload/vimtex/util.vim\n344.797  199.356  176.897: sourcing /Users/sheerun/.vim/plugged/vim-polyglot/ftplugin/tex.vim\n345.573  000.040  000.040: sourcing /Users/sheerun/.vim/plugged/splitjoin.vim/ftplugin/tex/splitjoin.vim\n618.267  119.185: VimEnter autocommands\n618.296  000.029: before starting main loop\n1520.463  000.215  000.215: sourcing /Users/sheerun/.vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim\n1551.687  000.344  000.344: sourcing /Users/sheerun/.vim/plugged/vim-airline/autoload/airline/async.vim\n1589.430  971.575: first screen update\n1589.451  000.021: --- VIM STARTED ---. OK then\nWhat I mean that vim-polyglot is meant to provide syntax and indentation support, nothing more.\nI could add your plugin and set extra options like vimtex_complete_enabled = 0, but it would mean when users install your plugin for full latex support they'd need to explicitly enable these options again, as vim-polyglot would set the defaults to disable these advanced features.\nInstead I prefer to cherrypick only parts of packages that are responsible for syntax and indentation, and that's what build script tries to do.\nUnfortunately I cannot determine subset of directories for your package as:\n1. indent support depends on variables set in autoload\n2. autoload loads features I don't want to load in vim-polyglot. Also, I'd prefer to even include it, as autoload directory is executed for every file type (not only latext) which means that loading of every file type is slowed down a bit\nIdeally I'd be able to cherry-pick following directories: syntax compiler indent after and everything would work. And then if someone would like to have full latex support then she could install your package with VimPlug.\nAll to all, not sure if switch to vimtext is worth the effort from your side. \nMaybe setting let g:polyglot_disabled = ['latex'] in your plugin would help to resolve any clashes with LaTeX-BoX vim-polyglot includes? Even better you could detect that Latex-box is loaded and show a warning that something probably won't work.. isn't the issue with latex-box itself, and not vim-polyglot? in this case you need to recognize latex-box instead, probably by reading one of the variables it sets. . I'm glad you've resolved it. Could you post screenshot that shows improvement in syntax highlighting? Also I'm reluctant as vim-polyglot aims to include only syntax and indentation, without advanced features.. Sorry, I need to draw line somewhere and Apex is a \"language\" for propertiary, commercial system.\nBesides it seems apex is just html/css.. I've added it manually but ideally you could try to add it to the upstream project :). Thank you :) I needed to commit it myself because it's too difficult to merge. This should be contributed to upstream plugin :). I can't reproduce. Could you update once more? Is it still happening could you post .erb file?. For now I'll remove this plugin. @Armavica if you'd like me to reintroduce it, please contribute upstream removal of this side effect, thanks :). What is exactly your test setup and output? What is the file you're trying to open? 17 seconds is too much for anything, but please mind that vim-polyglot will slow down load time a little bit for each file type individually (e.g. when loading .slim file, vim needs to load slim syntax, obviously).. btw. 17 seconds seems to be aggregated amount so slowdown is probably is a matter of milliseconds, not seconds. Also please notice I write in the README: \"To be completely honest, concatenated ftdetect script takes around 3ms to load.\", which potentially could went little bit up since I wrote it.. Here's startup log as measured with vim --startuptime startup.log: https://gist.github.com/sheerun/5c89eda37d4138fb97a21161aeb4d835\nAs you can see loading vim-polyglot takes 17ms which is indeed greather than 3ms I write about in the readme, but far less than 17 seconds. Of course if you run vim 10000 times it adds up to 17 seconds. I'll edit the README to tell 17ms instead of 3ms.\n. Vim-polyglot takes 14ms  (not 17 seconds) to load on your computer, as expected. 99% of time is consumed by other plugins, noticably half a second by persistent-undo.vimrc . It is also worse in few important ways:\n\ndoesn't highlight html blocks in markdown\ndoesn't properly handle nested inline code blocks like\n\n* [`left` alignment](#left-alignment)\n- Doesnt' properly highlight multiline code blocks as strings\n- requires plugin directory that is loaded when opening file of any extension in vim (a big no-no for vim-polyglot)\nI'd suggest contributing changes you like to the current upstream plugin: plasticboy/vim-markdown\n. Could you update vim-polyglot and send here example file that causes this issue when opening? If it doesn't happen immediately after opening, please post steps that lead to reproducing this issue.. It's not necessary to disable plugins as they don't affect load time until you open such a such filetype. If the slowdown occurs, it is considered a bug in vim-polyglot.\nAs for your issue, it seems julia plugin does something that I don't accept in vim-polyglot: autocmd FileType *  and autocmd BufEnter * that executes on every file and buffer open..\nhttps://github.com/JuliaEditorSupport/julia-vim/blob/master/ftdetect/julia.vim\nI'm going to disable ftdetect parts of all plugins that do such thing, it should resolve this issue\n. @ahmedelgabri Please upgrade to v3.3.1 and check if it solves your issue\nI also encourage you to remove all polyglot_disabled as they should not matter as far as performance is considered. This should be added to upstream project. github.com/vim-scripts/groovy.vim. Plus, if you'll find better language pack for groovy, feel free to submit it. Maybe please post your .vimrc. I wasn't able to reproduce. You can disable loading python stuff via vim-polyglot by adding following to your vimrc: let g:polyglot_disabled = ['python']. I've added an example in the readme. This might happen for hashbang file detection, but we have separate issue for it here: #274. bfc6ed9 should fix detecting by file extension, but I need a volunteer to fix detecting by first line of file (i.e. do single getline(1) and then match or result).. Moved issue about detecting filetype given first line to: #274 \nClosing this one, thank you for reporting :). Depending on plugin implementation you can install it either before or after vim-polyglot and it'll override the settings. If there's really a conflict, you can disable single language with flag, please see the README. this should be fixed when you update to newest version of polyglot, if not please reopen :). This won't be merged unfortunately as markdown plugin is slow already and this plugin modifies default behavior of handling .md files because pandoc files don't have their own extension.\nIf you want md files to support pandoc highlighting I suggest contributing to upstream https://github.com/plasticboy/vim-markdown . vim-polyglot includes syntax, indent and compiler configuration\nthis is indeed a bug of not including indentation for markdown that I fixed in v3.3.2\nThank you for reporting!. The language pack for PHP we use doesn't have indent files: https://github.com/StanAngeloff/php.vim\nYou can suggest better one if you want, but it should be simple and include mostly syntax, indent, and compiler configuration. Advanced IDE-like plugins aren't welcome in vim-polyglot to avoid bloat.. Please try to submit pull request to the tomlion/vim-solidity first. I think it's fine to incorporate both in vim-polyglot (list of foldable syntaxes and automatically setting foldmethod=syntax if syntax supports it. Unfortunately the build script is in bash, not vim-script, maybe you'd like to prepare a PR? Only changes in ./build script are necessary.. btw. sometimes filetype isn't what vim-polyglot has as a key in configuration (e.g. javascript+jsx) . After thinking more about this it isn't something vim-polyglot should do. It would require me to review each plugin to see if it supports folding or not and write proper code for enabling it. Better approach would be to open PRs to plugins so they automatically set foldmethod=syntax given some agreed on global variable like let g:auto_foldmethod=1. It turns out default vim plugins have this already covered, mostly, so no action from vim-polyglot is necessary. If someone misses this for some filetype, please comment. When you install plugins, you put each one in separate directory. I don't get how you  can get conflict.\nMaybe try to use package manager like vim-plug?. Docker provider is now switched to the suggested one. I think it's fine but someone would need to create github repository with vim plugin and maintain it, if anyone badly wants this syntax, please do so. sure. Thank you for reporting. Now we need to find the offender.\nOn Mon, 5 Mar 2018 at 05:44, Jerome Dalbert notifications@github.com\nwrote:\n\nI am not sure the issue above is fixable, since it is seems related to the\nnumber of language plugins.\nIndeed, when I replace vim-polyglot with only the language plugins I need\n(all cherry-picked from vim-polyglot's selection):\nPlug 'vim-ruby/vim-ruby', { 'for': ['ruby', 'eruby'] }\nPlug 'pangloss/vim-javascript', { 'for': ['javascript', 'html', 'eruby.html'] }\nPlug 'mxw/vim-jsx', { 'for': 'javascript' }\nPlug 'othree/html5.vim', { 'for': ['html', 'eruby.html'] }\nPlug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }\nPlug 'wavded/vim-stylus', { 'for': 'stylus' }\nPlug 'plasticboy/vim-markdown', { 'for': 'markdown' }\nPlug 'keith/swift.vim', { 'for': 'swift' }\nPlug 'StanAngeloff/php.vim', { 'for': 'php' }\nMy HTML startup times get ~120ms faster on a 10 starts average.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sheerun/vim-polyglot/issues/280#issuecomment-370308406,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAR2DdjnhZFF9Xh-AHqxfXJBgCCEc1bQks5tbMKSgaJpZM4Sbhh0\n.\n. I've removed all after plugins for html. Now the only slowdown compared to your setup is css plugin which I think is reasonable to load for .html files. (so 20ms difference in loading time). @CH-DanReif If plugin is working fine without some directory you can just configure it in build instead of forking. At the top you have different presets possible: https://github.com/sheerun/vim-polyglot/blob/master/build#L5-L10\n\nYou can set them as so: https://github.com/sheerun/vim-polyglot/blob/master/build#L151. For now I've rejected all file names with non alphanumeric characters. Thank you :). Sorry you need to contact upstream plugin, vim-polyglot just gathers them. vim-polyglot now uses newest vim-markdown :) thank you!. Hmm, OK I've re-read that some people still have this issue, reopening. Sorry no idea, this seems like an upstream issue, not vim-polyglot's. :+1:. I'd rather avoid such case, let's see if there's a way to resolve this differently first.. @dsifford It seems this plugin has hard focus on backward compatibility. Vim-polyglot is more about updates so I think it's reasonable to create different repository for php synax. Idaelly it would use the one that is shipped with newest vim: https://jasonwoof.com/gitweb/?p=vim-syntax.git;a=blob;f=php.vim;hb=HEAD\nMaybe you could prepare this repository? It can be from scratch, no need to fork.. Closing this for now. Sure. Maybe you want collaborator access and do it yourself?. Yes, for more advanced go features you need to install appropriate plugin. We just handle syntax indentation and compilers.. vim-polyglot is not only for people who have the newest vim installed. the purpose of vim-polyglot is to get access to updated versions of syntaxes regardless whether vim you're using is on your computer or on server you can't upgrade vim because you don't have admin account.\nThat said I'm up to importing syntax files shipped with newest vim to vim-polyglot. Unfortunately I tried it in the past and it's not that straightforward. For example see https://github.com/sheerun/vim-polyglot/issues/237. Because of it all upstream vim syntaxes would need to be considered one-by-one unfortunately.. There are already some CI tests but they just check if each syntax is able to load. It's really hard to catch errors like in #237 so not sure if it's possible to create any more generalized tests. When I change something I just fiddle a bit with language and if everything seems OK I commit. As soon as someone complains I rollback instead of fixing. It works so far.. Closing this feel free to open another issue. I think it's best to first remove go from vim-polyglot and then try to re-introduce it, when time allows. I can confirm it produces the same output :) Probably good to merge. Thank you for suggestion, I've switched the provider. This should be now fixed, please update. It seems like upstream issue, please post this issue to jwalton512/vim-blade. I'm unable to reproduce original error so I'm going to close it. This plugin doesn't add much, is not used by many, and can execute python scripts while loading files: https://github.com/freitass/todo.txt-vim/blob/master/syntax/todo.vim#L53-L65\nSorry, but no. I've added support for moonscript. Thank you I've added moonscript support to master branch. Sure you'd need to provide link to github repository that hosts plugin with this syntax. The same, if someone would like this syntax, a github repository with plugin needs to be created. This will be pulled from upstream as soon as https://github.com/leafgarland/typescript-vim/pull/140 is merged, I don't vim-polyglot to modify bundled plugins. Okay I guess it won't hurt to add this filetype. I've added it for now manually but I hope @leafgarland will merge this PR soon so I can remove my code. Vim support for this woul dneed to be extracted to separate repository with standard structure. If someone needs badly this syntax, please create standalone plugin as github repository . maybe we should remove this plugin then... can you find faster alternative?. Thank you for suggesting this, of course we could use a logo :). Hello! Thank you for logo proposals.\nHere are some things I'd like logo to have:\n\nBe simple because vim is simple (first proposal looks too complex)\nHave the same color scheme as official vim logo (green/gray/black)\nHave monospace font because vim is used in terminal\n\nI'm thinking about something like this:\n\n@orlant Do you want to iterate on this?. Hey! good, but I'd leave the gradients because you don't encounter them in terminals.\nIf you want more grey then maybe something like this?\n\nOr this:\n\nBy the way font I used is Menlo, not sure which one is better.. Or maybe some 3d effect like:\n. One more:\n. Probably black letters with 3d effect looks best to me. Sorry, it won't happen as it slows down loading of JS files. We update every month or so. thanks I've just did it myself. Thank you it's now in master. Thank you I've added orgmode support. tsx should now be supported. It's been a long time so maybe it's now fixed if you update vim & all plugins including vim-polyglot. I tried to reproduce it once more, but no luck: https://asciinema.org/a/VB0yrocRoeK2SmVjsvN9pGUHW\nI guess if someone experiences it, I'd need Dockerfile to reproduce it. It's not possible if you provide just .vimrc, sorry!. Thank you I've added rst support to master branch. It's not, thank you :). Thank you this change is on master branch now. This plugin has different structure than standard one and your method of changing the repository doesn't work here. This change requires more advanced modifications to build script or forking this repository and using standard directory structure for plugins.. Thank you, I've fetched your changes to my fork that removes scss and sass support (vim-polyglot supports only different plugins for different languages) https://github.com/sheerun/vim-haml/\nI also updated this repo. Thank you packages are updated now. For now I've overwritten ftdetect part . This is released, just update your plugins. Yes I did something stupid, but it should work now. Also upstream accepted my PR with fixed ftdetect  vim-polyglot uses this plugin unmodified. Thank you, it's in master branch now. Thank you, I've updated all packages and this one should be updated as well. Hey, thanks for reminding, I've just pushed an update. thanks :). Thank you I've added pony support. please raise this issue in upstream plugin or suggest better plugin for markdown. sorry it's too specific. Thank you but it should be committed as a change in build script. Do you know some faster alternative to GetPythonPEPIndent?\nOn Tue, Nov 6, 2018 at 6:18 AM icersong notifications@github.com wrote:\n\nSuggested Resolution\uff1a\nvim-polyglot/indent/python.vim   (114)      set timeout 30ms\n    let next = searchpairpos(\n       \\ '\\V'.p[0], '', '\\V'.p[1], 'bnW', s:skip_special_chars, stopline, 30)\n\nprofile\nFUNCTIONS SORTED ON TOTAL TIME\ncount  total (s)   self (s)  function\n    4   1.834822   0.537933  264_find_opening_paren()\n    1   0.922344   0.000299  GetPythonPEPIndent()\n    1   0.494092   0.002312  264_indent_like_previous_line()\n    1   0.490175   0.000044  264_find_start_of_multiline_statement()\n    1   0.427524   0.000032  264_indent_like_opening_paren()\n  493   0.380871             264_is_concealed()\n    1   0.140895   0.000027  221_on_exit_vim()\n    1   0.140868   0.000175  gitgutter#diff#handler()\n    1   0.140016   0.000188  gitgutter#sign#update_signs()\n    2   0.099125   0.000279  ale#Lint()\n    2   0.096740   0.000513  ale#engine#RunLinters()\n    4   0.095702   0.000252  283_RunLinter()\n    8   0.081243   0.000478  ale#python#FindExecutable()\n    8   0.080405   0.047873  ale#python#FindVirtualenv()\n    7   0.070680   0.001247  airline#check_mode()\n    1   0.068972   0.010614  airline#highlighter#highlight()\n    6   0.065554   0.000129  ale_linters#python#flake8#GetExecutable()\n    1   0.060615   0.060550  227_add_dummy_sign()\n  164   0.059721   0.029622  airline#highlighter#exec()\n    1   0.058793   0.058719  227_remove_signs()\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sheerun/vim-polyglot/issues/354, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAR2DRQiZ2FbUWQDBLXTBHUbNBdx0RILks5usRuSgaJpZM4YPxaS\n.\n. Your patch has been merged from upstream so I believe this is fixed now: https://github.com/Vimjas/vim-python-pep8-indent/issues/116. thank you, by the way :). Sure, you'd need to provide github repository that is vim plugins that adds this syntax though. I'm fine with including it but it would need to be extracted as github repository and maintained\n\nIf someone would badly like support for this, please become maintainer of this syntax and create repository with plugin. I think it is fixed if you update both neovim and vim-polyglot. If not, please comment. I believe this is fixed now if you update vim-polyglot. If not, please comment. I've included xml plugin that fixes xml syntax but I won't include othree because vim-polyglot doesn't add anything except syntax, indent and compiler support.\nI've just added compiler support for gradle from tfnico/vim-gradle. thank you but it should be committed as a change in build script. Fixed this with 1597b7b766ee3999cdfea862af14999c37041d0e but I'm also removing orgmode plugin because it isn't lightweight anymore and requires python to set ORGMODE variable. Hello,\nThank you for raising this issue, it was indeed because I build this plugin on MacOS. This should be now fixed on master. vim-polyglot switched to @amadeus fork and his xml plugin for now, hope it fixes some things. I hope @mxw will find time to merge changes to original repository, then we'll probably switch back. It's now fixed, thanks for raising this issue. Thank you. Closed by https://github.com/sheerun/vim-polyglot/commit/efa1a55dc7bee05e67da8830732bf9b70f3a3b19. I think this is fixed after update from upstream. This needs to be fixed in upstream repository, please raise this issue there:\nhttps://github.com/stephpy/vim-yaml. Thank you. Sorry I need to revert this as llvm repository takes too long to download for build. Feel free to extract vim plugin to separate repository and I'll include it instead. I'll recheck but whole build slowed down 2x when I merged this. Sounds better, I've added it to vim-polyglot, thanks!. vim-polyglot's main concern is syntax and indentation support, for more advanced plugins users are required to install specific plugins. unfortunately I need to close this. It\u2019s installed by default in vim\nW dniu pon., 11.03.2019 o 18:58 Henrik Larsson notifications@github.com\nnapisa\u0142(a):\n\nCant find any mention about Java. Is this not suppoted and if not why?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sheerun/vim-polyglot/issues/382, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAR2DRqi8ZIbx-KAtRfQKM83yi0LgjXfks5vVplQgaJpZM4bpOLq\n.\n. \n",
    "ajpaulson": "There are some things that the standard C syntax doesn't highlight.\nI don't personally do C++ development so I can't speak for the most useful C++ resource.\nAs far as C goes I am currently using\n- https://github.com/vim-scripts/std_c.zip\nC.vim (https://github.com/vim-scripts/c.vim) adds a lot of extra features to the editor that maybe a lot of users either don't want or have provided via other plugins.\ncpp-vim (https://github.com/vim-jp/cpp-vim) covers both C and C++ and has been recently updated so it might be the best choice.\n. @sheerun - Thanks, you've been really great at adapting to people's requests. \nThis is a really great project. \n. I second this - even though a lot of swift dev work will be done directly in Xcode there are a number of Mac devs who still prefer vim and adding this support will definitely be a good thing.\n. :+1: \nHope this can be in the next release\n. I've found http://github.com/dcjones/julia-minimalist-vim\nWhich is the closest thing on github to \"Just syntax\" for Julia. The author mentions that it is less complete than the JuliaLang official sources.\nIf it's not suitable then let me know and I'll get to work separating out the official syntax into a simple repo and mixing in anything useful from @dcjones repo\n. I've begun a stripped down fork of the official JuliaLang vim plugin to just syntax: https://github.com/ajpaulson/julia-syntax.vim\nIf that looks good it could possibly be a better alternative\n. ",
    "wellbredgrapefruit": "Yeah, I just saw that too. Thanks for catching it for me.\nOn Sep 14, 2013 12:18 PM, \"Adam Stankiewicz\" notifications@github.com\nwrote:\n\nWhoops, I didn't notice you didn't edit build file. For future: it is\nenough to change repository name in ./build script and run it to\nautomatically update / switch language package.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/sheerun/vim-polyglot/pull/3#issuecomment-24450071\n.\n. \n",
    "jojojames": "Thanks for the quick update.\n. ",
    "mindriot101": "It looks like the specs don't cover the tex/latex situation either. I've forked to see what I can do\n. Excellent glad I could help. I started drafting a pull request to sort it out (just with the mind to fixing the latex mode) and each change I made felt hacky and disgusted me, and also did not fix the entire problem. \nI agree I don't think that the latex-box directory structure or installation method really suits polyglot which is an otherwise very elegant plugin!\n. More like a vim excludes list so I can add packages I do not want and they will not loaded when required, e.g. g:polyglot_excludes = ['csv']\n. So I tried this solution and my vim was slow suggesting that the problem is not with vim-polyglot but with my unrealistic expectations when opening a 2.1GB csv file!\n. ",
    "alex-ross": "Closing this. The syntax files did use plugin and not ftplugin directories and therefore not work as expected. I may create a new PR when i fixed it.\n. ",
    "cg433n": "No problem!\nThanks anyways.\n. lepture/vim-css seems to be working fine.\n. ",
    "sjuxax": "Hello. Graphviz syntax highlighting is available in many Vim installations under the filetype \"dot\".\nI added this to my vimrc to get automatic detection:\n\"set *.gv files to dot syntax\nau BufRead,BufNewFile *.gv set filetype=dot\n\nReplying here mainly for people doing searches, but I have vim-polyglot installed, and still had to make this change manually. It may be worth considering adding to the plugin.. ",
    "leycec": "You rock, @sjuxax.\nThe layout-specific .dot filetype has long been deprecated in favour of the layout-agnostic .gv filetype. It saddens the graph theoretician in me that Vim only associates the former with the GraphViz filetype. Bram should transparently support both out-of-the-box. Thankfully, Florida Man saves the day... yet again.\nNote, though, that the high-level setfiletype builtin should usually be used in lieu of the low-level set filetype= statement. Doing so prevents a single buffer from being iteratively reassociated with multiple filetypes and hence reassigned to multiple settings and syntax files. Ergo, the above filetype alias might be more safely defined as:\n```\naugroup my_filetype_detect\n    autocmd!\n\" Associate both \".dot\" and \".gv\" filetypes with GraphViz mode.\nautocmd BufNewFile,BufRead *.gv setfiletype dot\n\naugroup END\n```. ",
    "Dewdrops": "Thx!\n. ",
    "jfelchner": "perfect!\n. ",
    "prurigro": "@sheerun: Sorry about the wait to reply- was doing family stuff for Easter.\nre: c-syntax extensions- Oh sweet, nicely done finding that on Github! Think you'll add it to Polyglot?\nre: systemd syntax- Oh man, yeah, https://github.com/kurayama/systemd-vim-syntax is definitely worth using over the Matt-Stevens one; it highlights valid values which is completely worth the difference between the two. Another nice find on your part :)\n. thanks!\n. ",
    "ciarand": "Afaik none of the Go plugins work together, which means this language pack breaks anything that uses gocode, including vim-go and vim-gocode.\nAm I being clueless, or is there a way of disabling these plugin files on a case-by-case basis? Everything else seems ok, but breaking proper autocompletion is a dealbreaker.\n. That would be my preference\n. I think the official package comes with just syntax and indent. There's a mirror here. They've got it setup so you only need to include the indent and syntax file, others are optional. Would that work?\nAlso pinging @renstrom for feedback\n. ",
    "lithammer": "The official package is probably the best option, and then if someone needs more stuff they can just install for example vim-gocode or vim-go separately like you guys are suggesting.\n. It currently includes https://github.com/pangloss/vim-javascript so I'm not sure what this is about?\n. My only objection is that the conceal feature is on by default. It's a bit weird if you don't know about it. \n. I don't have that problem, are you sure you don't have both installed?\n. Scratch that, I'm also getting this. It seems like this is the culprit: https://github.com/sheerun/vim-polyglot/blob/master/syntax/json.vim#L20\n``` diff\ndiff --git a/syntax/json.vim b/syntax/json.vim\nindex fbfbff4..9f93c2c 100644\n--- a/syntax/json.vim\n+++ b/syntax/json.vim\n@@ -17,7 +17,7 @@ syntax match   jsonNoise           /\\%(:\\|,)/\n \" Syntax: Strings\n \" Separated into a match and region because a region by itself is always greedy\n syn match  jsonStringMatch /\"([^\"]\\|\\\\\")+\"\\ze[[:blank:]\\r\\n]*[,}]]/ contains=jsonString\n-syn region  jsonString oneline matchgroup=jsonQuote start=/\"/  skip=/\\\\\\|\\\"/  end=/\"/ concealends contains=jsonEscape contained\n+syn region  jsonString oneline matchgroup=jsonQuote start=/\"/  skip=/\\\\\\|\\\"/  end=/\"/ contains=jsonEscape contained\n\" Syntax: JSON does not allow strings with single quotes, unlike JavaScript.\n syn region  jsonStringSQError oneline  start=+'+  skip=+\\\\\\|\\\"+  end=+'+\n``\n. https://github.com/vim-python/python-syntax together withlet g:python_highlight_all = 1is probably the most complete and up-to-date.. This happened to me as well when opening a regular JavaScript file. A quick fix is to just define it yourself in your.vimrc`:\nvim\nlet g:graphql_javascript_tags = []. Or just disable it.\nvim\nlet g:polyglot_disabled = ['graphql']. ",
    "Doppp": "The support isn't that great though. Here's a screenshot using the out of the box support:\n\nIt might just be me seeing weird liquid support but here's using the tpope plugin:\n\nIt's more consistent, imo and perhaps there's a reason why tpope made that plugin. What do you think? :)\n. Haha, that would explain it. :) I'm using the out of the box Vim - Vi IMproved 7.3 (2010 Aug 15, compiled Aug 24 2013 18:58:47) that comes with my MacBook Air.\n. Thanks so much! :)\n. ",
    "cvlmtg": "It happens on any php I'm opening, even empty ones.\nI don't have any file I can send you right now, as they are all my company's files. I can just send you the empty file I used for the test :)\nhere's my .vimrc regarding php:\n```\nlet php_folding = 2\n\" Syntax highlight HTML code inside PHP strings.\nlet php_htmlInStrings = 1\n\" Syntax highlight SQL code inside PHP strings.\nlet php_sql_query = 1\n\" Disable PHP short tags.\nlet php_noShortTags = 1\n\" indentiamo gli switch come si deve\nlet g:PHP_vintage_case_default_indent = 1\n\" remove \":\" as it is considered a separator\nau FileType php\n            \\ setlocal iskeyword-=58 |\n            \\ setlocal makeprg=php\\ -l\\ % |\n            \\ setlocal errorformat=%m\\ in\\ %f\\ on\\ line\\ %l,%-GErrors\\ parsing\\ %f,%-G\n```\nI've tried removing the setlocal iskeyword, php_htmlInStrings and php_sql_query but I still have the problem.\n. those variables are supported by the php plugin that's shipped with vim\n. it didn't solve my problem. btw I see that in vim-polyglot/syntax/javascript.vim there's this command:\nsetlocal iskeyword+=$\nso looks like the '-' is added by some other syntax file.\n. if I erase that line from javascript.vim here's what happens:\niskeyword=@,48-57,_,192-255,-                                                                                                                                                                                                     \n        Last set from ~/.vim/bundle/vim-polyglot/ftplugin/html.vim\nIIRC I saw something similar on vim mailing list, about the php plugin loading other syntax files for embedded html and js, but I don't remember how it got solved :(\n. ok found it. the thread (started by me btw, I didn't even remember it) is \nhttps://groups.google.com/forum/#!topic/vim_use/Eriw3hz-Kf0\nand it was considered an error of the syntax plugin:\narticle.gmane.org/gmane.editors.vim.devel/42742\n. ",
    "neersighted": ":+1:\n. Any progress on merging this?\n. ",
    "kepbod": "How about this fork of vim-cython?\n. ",
    "vmaatta": "Great. I'm sure that will be just fine.\n. I decided to go with @honza's dockerfile.vim myself as it seems to be kept more up to date. I.e. I'm now using the sheerun:master myself without any modifications.\nFor what it's worth I've rebased this anyway. The subtree location support might be useful on its own and I could separate that to its own PR if you're interested.\n. Yeah, I think it the upstream location would be the most logical and best for everyone. Also the discussion on vim proper linked above seemed to be turning towards non-inclusion. Which I agree with, upstream Docker would just be the logical place.\n. Ok, nice :).\n. ",
    "honza": "I find it somewhat frustrating that the upstream isn't more dynamic or receptive. I guess I shall continue with my repo as the official, most up-to-date version.\n. ",
    "faceleg": ":dancer: \n. ",
    "stevenbarragan": "I think it's an issue with other plugging configuration.\n. ",
    "tvjg": "I would also find an exclude list quite useful. Your project significantly cut down the number of plugins I had to manage manually, but occasionally, I'd like to try a different plugin for a language. For example, the included vim-protobuf plugin is quite out of date. I found a new one that I'd like to test, but I don't see a simple way to avoid conflicts with the included version. I could fork this project, update the source list, and build a new version, but that's fairly heavy to run a quick test.\n. I'm willing to take a crack at it if you can point me in the general direction @sheerun .\nIt looks like you're concatenating individual files from ftdetect/ into ftdetect/polyglot.vim during the build process. Would it be possible to wrap each appended file in a conditional check against a list of disabled plugins? Feels a little ugly, but I didn't see any other clear place to short-circuit the loading process.\nSomething like:\nviml\n\" ~/.vimrc\nlet g:polyglot_disabled = ['protobuf']\nviml\n\" ftdetect/polyglot.vim\nif index(g:polyglot_disabled, 'protobuf') != -1\n  autocmd BufNewFile,BufRead *.proto setfiletype proto\nendif\n. Finally got around to making a branch. Seems to work nicely and the tests are passing, but I've accidentally introduced a non-obvious bug too.\nAs discussed, a guard is prepended to the top of each downloaded file. This occurs before the language packs are copied. Then, as files are copied, any identically named files get joined. For example, vim-coffee-script and vim-css-color both include after/syntax/html.vim. This leads to an undesirable result. We get two overlapping guards. In effect, if coffee-script is added to g:polyglot_disabled, some bit of css-color will be unintentionally disabled as well.\nAny thoughts @sheerun ?\n. I think I got it now. I went back to the original idea of wrapping the file contents instead of exiting the file early. Opened a PR.\n. Updated to remove all of the generated files.\n. ",
    "jasonmobley": "+1\n(for basically the same reason given by @dirtyrottenscoundrel)\n. ",
    "onemanstartup": "But it possible to disable this in polyglot and making this default\n. ",
    "lfilho": "Sounds good! +1\n. +1 for react/jsx\n. ",
    "naquad": "Looks like its not :( I'm on master and still can't turn the damn conceal level off.\n. [15:54:22] (001) naquad@nq.od.ua ~/.vim \u276f\u276f\u276f ls -l bundle | grep json | wc -l                                                                                                                                     \u23ce\n0\n[15:54:22] (000) naquad@nq.od.ua ~/.vim \u276f\u276f\u276f\nafter installing polyglot I've removed old repos.\n. ",
    "yoshuawuyts": "Alternatively :set cole=0 will disable conceal for all plugins. :set cole=2 will restore the original setting. I used this method to disable both markdown and json concealing.\n. rad, thanks!\n. ",
    "theNerd247": "A temporary fix for this issue is removing all c and cpp.vim files from the after/ and syntax directories (at least those installed by polyglot). I'm not sure why this works as I'm not familiar with the vim language nor the syntax files.\n. Do you mean a cpp syntax file? or cpp source code?\n. I'm not sure what you mean. I haven't found any CPP source code (.h, .cpp files etc.) that this doesn't experience this issue, if that's what your looking for. I did notice that nested function calls does not generate this bug: \nint func1()\n{\n    int func2()\n    { //<--- when folding here ...\n    } //<-- the fold ends here as  it should.\n}\n. I'll look for a replacement. It appears that the default syntax files (in my ../vim74/{syntax/, after/} work properly\n. ok, maybe it's the c.vim as well? since both files import c.vim\n. Oddly that did not generate any errors.I un-installed vim-cpp-enhanced-highlight and reinstalled polyglot and the errors were regenerated.\n. If the error can't be reproduced with vim-polyglot alone could it be something in another package or my vimrc? here is mine: https://github.com/theNerd247/vimrc\n. Alrighty. I've confirmed after removing everything but Vundle (which shouldn't be an issue any way). It is polyglot - or something in my .vim/\n. vim 7.4.580-1 I'm on ArchLinux\n. try using\nnamespace \n {\n    func1()\n    {\n    }\n   func2()\n   {\n   }\n }\nthe above example doesn't seem to be reproducing the error as well. I apologize for that. Also I removed polyglot and saved the after/syntax and syntax/ c.vim and cpp.vim (installing them as if they were installed without Vundle) and this reproduced the error. In this case I think it is something within these files (or an order of operations -- something is getting loaded when it shouldn't or vis-versa) \n\nEDIT\nAlso, this error seems to generate when using either tabs or spaces (where 4 spaces = 1 tab)\n. you didn't indent your functions\n. try it with this file\nhttps://github.com/theNerd247/NoteCleaner/blob/master/NoteCleaner.cpp\n. I'm noticing that this is also causing the issue\n```\nnamespace\n{\n    class\n    {\n        func()\n        {\n     }\n}\n\n}\n```\n. Excellent! Thanks!\n. ",
    "rspeicher": "Alternatively we could switch the tmux plugin to vim-tmux which supports commentstring correctly.\n. ",
    "Yavor-Ivanov": "Okay, now I'm scared.\n. The syntax files are identical, but renaming the one used by polyglot (as a means of disabling it) and loading StanAngeloff/php.vim after polyglot magically makes everything work.\n. I've reinstalled vim and now the problem only appears when I run vim somefile.php directly. If I run vim first, then open the same file with :e somefile.php everything works as expected.\n. I fixed it by accident when reordering my plugin load order. I would provide the fix for posterity, but then I have no idea which plugin was clashing with it. I guess you can close this.\n. ",
    "jgallen23": "+1\n. After the latest update, my javascript syntax highlighting is much worse for me now too.  I ended up disabling and using othree/yajs.vim instead.\n. ",
    "dcjones": "I threw those syntax files together for my own personal use because I thought the official ones, at least last time I used them, were overly complex and slow.\nI should warn you, it's not kept as up to date as the official ones. For example, julia added multiline comments a while ago, but I never got around to adding support because I don't really care for multiline comments. There are also some idiosyncratic features you may want to remove: specifically support of ragel syntax.\n. ",
    "bstaint": "command:\n:e test.xpt.vim\nmessage:\nMessages maintainer: Bram Moolenaar <Bram@vim.org>\n\"[No Name]\" --No lines in buffer--\nError detected while processing D:\\\\...\\xptemplate\\ftplugin\\xpt\\xpt.xpt.vim:\nline   31:\nE688: More targets than List items\n. It's just empty file.\n. screenshot:\n\nI think xptemplate load scala.xpt.vim but can't split filetype, some code:\nlet [ ft, snip ] = split( v, '/' )\nThe v should be scala/scala.xpt.vim.\n. The same problem.\n. OK, I found https://github.com/derekwyatt/vim-scala/issues/28\n. ",
    "icholy": "@sheerun  ping\n. @sheerun I didn't find an vim plugins in the TypeScript repo so I assumed you're pulling from https://github.com/leafgarland/typescript-vim If so, can you update it to the latest version?\n. That's what I've done too.\n. ",
    "nobe4": "Thanks !\n. ",
    "samvv": "Hmm ... as far as I can tell haskell-vim looks like the best alternative.\n. ",
    "ldong": "This is happening to me when I vim a.html. In the mean while, by disabling othree/yajs.vim to get rid of the error prompts.\n. ",
    "edwardsmit": "I disabled javascript within polyglot let g:polyglot_disabled = ['javascript'] and install the othree/yajs.vim separately. No more problems ever since.\nvim-polyglot uses a build script that I think is failing. But I'm afraid nobody is actively maintaining this repo, as I've had no response from anyone for over a month.\n. ",
    "othree": "Since sheerun/vim-polyglot#68 is closed. I think I don't need to do any change?\n. ",
    "pvinis": "there is cocoa.vim, but it hasnt been updated in 6 years..\n. ",
    "KabbAmine": "Done & force-pushed.\n. Good, but how to know that vim-polyglot supports sass/scss? Using the same plugin, even if the languages are not related, why not use something like haml/sass/scss?\n. ",
    "mikker": "It's already there. Sorry. Move along :smile: \n. ",
    "taybart": "I don't care if you don't do the othree branch. But, the current version does not highlight else...\nedit: Also doesn't highlight document.\n. ",
    "craigp": "Wow, this destroyed working with javascript for me, highlighting is really much worse now (obviously entire a personal preference, will override).\nEDIT: I see that even the repo owner has deprecated in favour of pangloss/vim-javascript, didn't realise that.\nEDIT2: Why did you switch to pangloss/vim-javascript rather than othree/yajs.vim?\nEDIT3: Okay, I see your reason above.\n. ",
    "joeytwiddle": "I switched to pangloss a while back and have not regretted it.\nHere are the updates I had to make to get highlighting how I expected it to be: https://github.com/joeytwiddle/rc_files/compare/cc6479e897b019553eb13784ca6561237c098255...57c2f563aaa88cd67495d9d0bcddaf247cc6dbf3#diff-24\n. The best one I have seen is: pangloss/vim-javascript\nEdit: Oops!. Nice designs!\nI was wondering whether the VP could be made softer. Then I wondered if the P could become the bubble of your speech bubbles.\nBut I don't think I quite managed it. :stuck_out_tongue:\n. This \"language extension\" doesn't have a specific file extension. So how can polyglot detect when it is needed?\nIf any lines like these appear (usually near the top of the file), that is a good indication that styled-components are being used.\njs\nimport styled from 'styled-components'\n... require(\"styled-components\") ...\n... require('styled-components/native') ...\n(Of course those could use \" instead of ', may or may not be followed by a semicolon, and might even have additional whitespace.)\nRealistically this search would only need to be done on Javascript or compile-to-Javascript files, such as JSX, TypeScript, CoffeeScript.\nAnother way to detect the presence of styled-components would be to look for a folder \"$(npm root)/styled-components\" but that doesn't seems very efficient.. ",
    "martin-svk": "+1 for this.\n. ",
    "moonglum": "Thanks :blue_heart: \n. Thanks to you both! Added @codeinabox's snippet to my vimrc, fixes it for me.. ",
    "smarquez1": "I can confirm. I have to disable javascript syntax highlighting to make jade usable:\nlet g:polyglot_disabled = ['javascript']\n. @sheerun: I have no lag in smaller files, but on bigger files it's still slow. You can try this example: https://gist.github.com/smarquez1/9e3b2a281b7a2679a5db\n. Related issue: https://github.com/digitaltoad/vim-jade/issues/80\n. ",
    "kevcenteno": "@smarquez1 @icholy Do y'all mind checking out my fix?  https://github.com/digitaltoad/vim-pug/pull/102. ",
    "ReadmeCritic": "\ud83d\ude0a\n. ",
    "jagtesh": "Sorry about this guys! Was trying something that didn't work as I expected.\n. ",
    "svenstaro": "Oh, excuse me then.\n. ",
    "clessg": "Opened a PR #95 \n. ",
    "ninrod": "@sheerun It works with v2.7.2. Thank you. \n. ",
    "wildskyf": "So it is! Thank you for telling me that scss is a part of haml!\nI didn't know that before :-S\n. ",
    "engelju": "Not sure what to do about ftdetect...\nhttps://github.com/beyondwords/vim-twig/blob/master/ftdetect/twig.vim\nhttps://github.com/evidens/vim-twig/blob/master/filetype.vim\n. ",
    "donileo": "I have done Plugin 'sheerun/vim-polyglot' and am failing to get the autoformating (gofmt) that the go plugin provides on saving go files. Doing a Plugin 'fatih/vim-go' install and then the auto go formatting works.\n. fatih/vim-go which is bundled by vim-polyglot does the goftmt on save of go files yet vim-polyglot cant do it even though it bundles fatih/vim-go ?\n. I dont see why you believe gofmt is unneccessary :) gofmt is a core part of writing go code. I would suggest including it in vim-polyglot as many gophers would not use vim-polyglot simply because this is missing.\n. ",
    "juanjux": "You should be more explicit about that (only dealing with syntax an indent) in the README.md file. I was wondering why a bunch of things (among them gofmt) stopped working with this plugin even while it bundles the plugins I was using previously.. ",
    "patrickng": "This also happens with HTML files with handlebars/mustache syntax when jinja is left enabled. This is because line 198 checks for {{.*}} in the regex.. \nThe correct syntax to disable seems to be let g:polyglot_disabled = ['jinja'] \nMake sure it's in an array and not a string. \nIf you're like me and you're using something like The Ultimate Vimrc, you can't put that in my_configs.vim since the plugin gets loaded first which does the check against the array before the array is even defined. You'll have to add another file to source in ~/.vimrc or define the array to disable before plugins_config.vim.\nI've never used plug but it seems like maybe plug is also loading the plugin first. Try putting let g:polyglot_disabled = ['jinja'] before the plug section in your ~/.vimrc\n. ",
    "joaoponceleao": "Thanks @patrickng.\nI can confirm that putting the let g:polyglot_disabled = ['jinja'] before the plug section solves the issue. Will reference this issue in the vim-plug repo for other users.\n. Reopening issue as vim-plug developer suggests that the problem lies in polyglot.\nThe polyglot_disable line just needs to come before the filetype line, regardless of whether vim-plug is used. See his note on the referenced thread.\n. ",
    "smarnv": "I think this might have been solved after you removed jinja support, see https://github.com/Glench/Vim-Jinja2-Syntax/pull/13. I am currently running both plugins and files are correctly recognised if they are pure HTML or jinja.\n@sheerun can you reconsider re-adding it back to your repository?. ",
    "SaswatPadhi": "+1 for this! Please merge soon.\n. ",
    "ewilazarus": "+1\n. ",
    "QMonkey": "\nBy the way, you can update locally if you want to, just run ./build script.\n\nNice, I really like it! :)\n. ",
    "leolord": "Found it's a vim bug, and resolved in latest version. \n. ",
    "digitaltoad": "On the issue of filetype detection, I actually don't maintain vim-polyglot. The performance issue while editing Jade files is known but I haven't had a chance to look at it.\n. ",
    "retrone": "Apologies, I did more debugging - and the issue is with Vim CSS Color, even with non-CSS files - switching over to a fork fixed my problem per the issues noted in the vim-css-color repo.\nClosing.\n. ",
    "zerocool4u2": "@retrone thanks, i was also blaming polyglot, sorry about that, regards!\nby the way, this fork improves the loading time https://github.com/ap/vim-css-color\n. ",
    "marceloboeira": "@sheerun thanks \ud83d\udc83\n. ",
    "robhurring": "Fair enough. For the JSON syntax, the upstream already has this functionality (here but not in your fork), I was trying to back-port to here since I wasn't sure how you were handling the syntax files.\nThe markdown I can definitely put a PR against the main repo.\n. This was merged into https://github.com/tpope/vim-markdown/pull/99. It should be available here next update. (Not sure what the cycle for that is)\n. Same deal, next pull from upstream should bring this functionality in. @sheerun would you be able to update the json and markdown packages for us?\nAlso worth noting, in the https://github.com/tpope/vim-markdown/pull/99/files I renamed the setting to let g:markdown_syntax_conceal = 0 to be more consistent within the package itself, and not what this PR mentions at the top.\n. @sheerun your sheerun/vim-json repo looks out of date from its upstream (elzr/vim-json) which has those settings so the g:vim_json_syntax_conceal setting never made it in.\n. Whoops. Missed that part -- \ud83d\udcaf agree, concealing is obnoxious IMO.\n. ",
    "ahmedelgabri": "Any updates on this? \n. What about JSON? since the upstream plugin already supports the option to disable this?\n. Thanks @robhurring \n. For some reason I still can't disable concealing in .json files, I see that you disabled it here https://github.com/sheerun/vim-json/commit/fe4596e0b2d351b47e8ae14e8d36547357e2dafc and I do have this in my .vimrc but still it's not disabled.\n. Not the most organized but here you go https://github.com/ahmedelgabri/dotfiles/blob/master/vim/vimrc.local#L60 the other json plugin is already commented out.\n. @sheerun I think I had a problem with my tmux session, not sure how. But it works now. Thanks & sorry for the false alarm.\n. Short answer: yes\nLong answer: It depends, if you don't like what comes with vim-polyglot then you can disable that & use whatever you like instead. Or if the language is not supported in vim-polyglot then you will need to install that yourself or even better maybe open a PR to add it.. You are right, I opened an issue there https://github.com/lumiliet/vim-twig/issues/7. This was fixed here https://github.com/lumiliet/vim-twig/pull/8 . @sheerun it doesn't matter which file type.\nSteps:\n\nUpdated vim-polyglot & exit vim\nopen vim or neovim (it doesn't matter which file type), vim or nvim or vim foo or nvim foo, etc... all will produce the same error\n\nError detected while processing BufEnter Auto commands for \"*\":\nE117: Unknown function: LaTeXtoUnicode#Refresh\nHere is an recording https://asciinema.org/a/rvkHQY0Gum2gJyAOvClDXX4Qo\nAnd here are my settings for vim-polyglot:\nvim\nPlug 'sheerun/vim-polyglot'\n\" These are enabled, the rest is disabled. Maybe I should install them separately instead\n\" https://github.com/sheerun/vim-polyglot#language-packs\n\" https://github.com/jackfranklin/dotfiles/blob/6c0ba96b20f70d63a8dbb2652d8ebe2241355552/vim/vimrc#L3-L22\n\" \\ 'ansible', Needed for Jinja2?!\n\" \\ 'clojure',\n\" \\ 'coffee-script',\n\" \\ 'dockerfile',\n\" \\ 'elm',\n\" \\ 'git',\n\" \\ 'go',\n\" \\ 'graphql',\n\" \\ 'html5',\n\" \\ 'javascript',\n\" \\ 'json',\n\" \\ 'jsx',\n\" \\ 'lua',\n\" \\ 'markdown',\n\" \\ 'php',\n\" \\ 'python-compiler',\n\" \\ 'python',\n\" \\ 'ruby',\n\" \\ 'scss',\n\" \\ 'tmux',\n\" \\ 'twig',\n\" \\ 'yaml',\nlet g:polyglot_disabled = [\n      \\ 'apiblueprint',\n      \\ 'applescript',\n      \\ 'arduino',\n      \\ 'asciidoc',\n      \\ 'blade',\n      \\ 'c++11',\n      \\ 'c/c++',\n      \\ 'caddyfile',\n      \\ 'cjsx',\n      \\ 'cql',\n      \\ 'cryptol',\n      \\ 'crystal',\n      \\ 'css',\n      \\ 'cucumber',\n      \\ 'dart',\n      \\ 'elixir',\n      \\ 'emberscript',\n      \\ 'emblem',\n      \\ 'erlang',\n      \\ 'fish',\n      \\ 'glsl',\n      \\ 'gnuplot',\n      \\ 'groovy',\n      \\ 'haml',\n      \\ 'handlebars',\n      \\ 'haskell',\n      \\ 'haxe',\n      \\ 'i3',\n      \\ 'jasmine',\n      \\ 'jst',\n      \\ 'julia',\n      \\ 'kotlin',\n      \\ 'latex',\n      \\ 'less',\n      \\ 'liquid',\n      \\ 'livescript',\n      \\ 'mako',\n      \\ 'mathematica',\n      \\ 'nim',\n      \\ 'nix',\n      \\ 'nginx',\n      \\ 'objc',\n      \\ 'ocaml',\n      \\ 'octave',\n      \\ 'opencl',\n      \\ 'perl',\n      \\ 'pgsql',\n      \\ 'plantuml',\n      \\ 'powershell',\n      \\ 'protobuf',\n      \\ 'pug',\n      \\ 'puppet',\n      \\ 'purescript',\n      \\ 'qml',\n      \\ 'r-lang',\n      \\ 'racket',\n      \\ 'ragel',\n      \\ 'raml',\n      \\ 'rspec',\n      \\ 'rust',\n      \\ 'sbt',\n      \\ 'scala',\n      \\ 'slim',\n      \\ 'slime',\n      \\ 'solidity',\n      \\ 'stylus',\n      \\ 'swift',\n      \\ 'sxhkd',\n      \\ 'systemd',\n      \\ 'terraform',\n      \\ 'textile',\n      \\ 'thrift',\n      \\ 'tomdoc',\n      \\ 'toml',\n      \\ 'typescript',\n      \\ 'vala',\n      \\ 'vbnet',\n      \\ 'vcl',\n      \\ 'vm',\n      \\ 'vue',\n      \\ 'xls',\n      \\ 'yard'\n      \\ ]. @sheerun last update looks like it fixed the issue yes, thanks! And I'll also remove polyglot_disabled too  . ",
    "aliev": "@sheerun Hi! Thanks for response!\nWhat should I do? Should I also create a PR for ./build with my python-compiler repo? Could you help me pls :)\n. ",
    "BlitzKraft": "Could elaborate on that a little bit? \n~~Do you mean the spec/build_spec.rb?~~ What changes should I make? \nEdit: Found it. Looking through. Thank you.\n. I understand it now. Now that I run build, there are other scripts that were updated along with fetching openscad.vim.\nShould I include all the changes in my current commit (for pull request), or only add that are relevant to openscad?\n. ",
    "jc00ke": "@sheerun what about https://github.com/vim-scripts/SQLUtilities ?. @sheerun any chance this can get merged? I'm new to vim-polyglot and this bug is the only issue I've encountered.. ",
    "uarun": "@timfeirg https://github.com/uarun/vim-protobuf/pull/5 has been merged\n. ",
    "jmsherry": "Thanks @sheerun ,\nIt transpires that in my .vimrc I needed syntax on near the start of the file.\nI don't know if that's a setting of vim-polyglot or vim in general. If it's for this then maybe putting this somewhere in a troubleshooting guide or the installation guide would be helpful to people? :)\n. ",
    "yalesov": "@sheerun rebased against master for conflicts resolution\n. I wonder how this would logic interact with the build script\n. ",
    "qcam": "Fixed with https://github.com/pangloss/vim-javascript/issues/527\n. ",
    "mbyio": "Nevermind, sorry! I was using the wrong source (vim-polyglot instead of sheerun/vim-polyglot).\n. Okay, thanks for the response. You should consider noting this in the README because omitting parts of plugins can keep them from working properly.\n. Right, but there are other features that don't work, such as the ability to automatically run rustfmt when a file is saved. I imagine many of the other plugins you have also are missing some functionality because of this. I realize this was an explicit decision you made, but you may want to consider noting in your README that only some parts of plugins are included and that this isn't a drop-in replacement. I didn't realize it was intentional and not a bug until I made this issue, and other people might too.\n. ",
    "icatalina": "Just realised how this works... hehe\n. ",
    "metakirby5": "I just tried updating and the issue seems to be gone now. Thanks!\n. ",
    "whitelynx": "Since this repo just aggregates code from other repos for each language, you probably want to look at plasticboy/vim-markdown instead.\nThe README.md there shows that it has a g:vim_markdown_fenced_languages option (similar to the g:markdown_fenced_languages option in Vim's builtin markdown.vim) that provides this functionality.\n. @sheerun just curious if this one fell through the cracks \ud83d\ude09. ",
    "scwood": "When I install plasticboy/vim-markdown as a standalone package fenced code blocks work, however when I use vim-polyglot they aren't working. Any ideas?\n. ",
    "hmohamad": "Same here, no fenced code block highlighting with vim-polyglot. ",
    "IonicaBizau": "Yes, same here.... ",
    "peter50216": "Seems that the feature is implemented in ftplugin, and vim-polyglot only get the syntax folder.. ",
    "BlakeWilliams": "@sheerun That's what I had tried after adding it to each, but it doesn't work when everything is wrapped.\n. ",
    "jlebon": "Thanks!\n. ",
    "jcmdln": "Hmm, this seems to not be loaded properly in some scenarios. Closing for now while I work on this.\n. I apologize for the incomplete thought @munyari though I'm happy to clarify! When I attempted to add support for this initially, I was able to load .rkt files though when opening such files I had to source my vimrc, though to be honest I've been using another editor as my daily driver. I'll take a look and see if I can resolve the issue and report back when I'm able to confirm it works correctly. Thanks for checking on this!. That is exactly correct @munyari.. I've merged the appropriate contents of vim-racket into https://github.com/jcmdln/vim-polyglot and confirmed that it is working using the examples from https://learnxinyminutes.com/docs/racket/ while confirming that this time I did not experience my prior issues. I believe it would be possible to simply copy over the appropriate files based on my testing as multi-line comments and other such features of racket are working correctly as shown in the following:\nBefore:\n\nAfter:\n\nI will take a look at the results of this rather dirty attempt at adding racket support and ensure that it follows the design methodology of vim-racket before I submit a pull request.. ",
    "munyari": "@jcmdln can you expand on what you meant with the above comment? Did you make any progress?. Thanks for coming back to it @jcmdln! In my experience, vim-racket seems to work fine as a standalone plugin. Did you only have to manually source your vimrc when you used it as a part of polyglot?. ",
    "CrashyBang": "@yigitozkavci both links points to wrong place. This plugin also works: https://github.com/elmcast/elm-oracle\n. ",
    "yigitozkavci": "Updated, thanks @CrashyBang \n. ",
    "codeinabox": "I noticed that this change https://github.com/sheerun/vim-polyglot/commit/7dd62806a06af3cf2410cd8a4f83205269f279de causes .js files to be treated as JSX which isn't the default behaviour for https://github.com/mxw/vim-jsx but a simple fix is to add the following to your .vimrc\nviml\nlet g:jsx_ext_required = 1. ",
    "isobit": "Can this issue be reopened to revert 7dd6280? It's clear the issue here is with that change rather than the respective plugins. Why should vim-polyglot change mxw/vim-jsx's default behavior?. ",
    "ciases": "javascript.jsx filetype is really annoying. Please fix it.. Hello!\nIt doesn't work for me for unknown reason. I've try *.njk, *.nunjucks, *.jinja extensions, no success. Then I've install lepture/vim-jinja and it works as expected.. ",
    "bronzdoc": "Ping @sheerun :grimacing: . ",
    "ellisonleao": "hey @sheerun  any thoughts on this one?. ",
    "aleprovencio": "there you go, https://github.com/PotatoesMaster/i3-vim-syntax. ",
    "geofflane": "Didn't realize they were updated with the build script, ignore this.. ",
    "scottgrayson": "i think i must have not reloaded vim after updating, it seems to be working now. ",
    "kostacoffee": "Just realised this pull request should go to the html.vim maintainers. Closing this.. ",
    "iansowinski": "Okok, thanks :). ",
    "dajuno": "Apparently that's for a javascript package (https://github.com/paularmstrong/swig) with the same name. I was referring to this: http://swig.org/ (an interface between C/C++ and high level languages).\nThe only other option I found is this: http://www.vim.org/scripts/script.php?script_id=1247, but doesn't seem better.. How about indenting though? Default config is a mess.\nMaybe this: https://github.com/Vimjas/vim-python-pep8-indent. ",
    "dominikduda": "Yes\n. ",
    "chr4": "Referencing https://github.com/sheerun/vim-polyglot/issues/205. Thanks!. ",
    "danielepiccone": "As far as I know I don't think it's possible to fetch only a part of the repo, but this could be a general case to support in vim-polyglot since the assumption in the download function is that each pack is basically a repo which is not always the case. That is exactly what I was looking for :) if you don't mind I'll open a PR to update the docker plugin and the source. ",
    "vaz": "Commenting out of potential interest so I can see myself as \"participating\". I'll let you know if I get to working on something. (Also thanks for this package, it's brilliant considering the package management situation in Vim is... what it is.)\nWhat's the min Vim version to support? I assume it's 7.x (more specific might be important, not sure). So no Vim 8 async support (though then you probably end up needing to write separate support for NeoVim's plugin platform instead of the old workarounds that work on all of them) so your thought about looking at something like vim-plug is a good one, since it does a good job handling and displaying an update process without locking up on Vim 7.x+ and works just as well on NeoVim.. ",
    "h-michael": "I'm interested in this topic.. ",
    "goschevski": "Thanks.. ",
    "JackyChiu": "For sure. ",
    "chauncey-garrett": "It looks like vim-json has similar logic: https://github.com/elzr/vim-json/blob/f5e3181d0b33a9c51377bb7ea8492feddca8b503/ftplugin/json.vim#L9-L12\nThus it would depend on which plugin was loaded first as to what the variable ends up being. I load polyglot before anything else. . ",
    "dojoteef": "I'm posting this here in case anyone runs into the same issue, because it certainly surprised me!\nIf you use both vimtex and vim-polyglot you must add the following to your vimrc if you want to be able to use vimtex (see for more info):\nvim\nlet g:polyglot_disabled = ['latex']\n@sheerun Considering you said\nvim-polyglot is plugin pack just for syntax / indentation, no advanced features\nI would urge you to remove LaTeX-Box from vim-polyglot, as it DOES more than just syntax/indentation. Basically it installs a number of key mappings. Those mappings happen to interfere with vimtex. It took some time to debug the issue, since I assumed vimtex was the culprit, when in fact it turns out vim-polyglot was. That definitely took me by surprise as I thought vim-polyglot was only for syntax/indentation (as you stated above).\nLaTeX-Box: https://github.com/LaTeX-Box-Team/LaTeX-Box. Having just looked at ftplugin/latex-box/mappings.vim#5-7, I see you have:\nvim\nif exists(\"g:LatexBox_no_mappings\")\n    finish\nendif\nI guess the other option is to disable LaTeX-Box mappings by default. That way it does not have unintended consequences, yet people can opt-in if they want.",
    "albertnetymk": "Bitten by the mappings introduced by LatexBox; could be beneficial to mention this conflict (with vimtex) in readme.. ",
    "delijati": "+1. ",
    "sandrodz": "Of course! tell me what you need.. with or without polyglot result is the same.\nThe only thing I noticed though:\n:set ft? -> filetype=pug\nbut if I manually set :set ft=pug on open file syntax comes back. I removed plugins and reinstalled them and problem got resolved.. ",
    "RenatoUtsch": "If you take a look at vim's source, you'll notice that the default python.vim was completely refactored, and is newer than all other Python syntax plugins I could find on the web:\nhttps://github.com/vim/vim/blob/master/runtime/syntax/python.vim\nhttps://github.com/vim/vim/blob/master/runtime/ftplugin/python.vim\nSo for newer vim/neovim versions, the default syntax plugin is actually very good. It fixes many highlighting problems and has good python 2/3 support.\nWhat might be a good idea is to ship these newer default python plugins to people that have older vim/neovim versions, instead of using a not mantained and outdated plugin that doesn't support python 3 correctly.. +1\nOn Tue, May 30, 2017, 05:32 Peter Renstr\u00f6m notifications@github.com wrote:\n\nhttps://github.com/vim-python/python-syntax together with let\ng:python_highlight_all = 1 is probably the most complete and up-to-date.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/sheerun/vim-polyglot/issues/209#issuecomment-304810788,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAzC7Wv0OzzZfPdzhXa4p6DRBKg4KzOEks5r-9QCgaJpZM4NS04e\n.\n. \n",
    "radimsuckr": "+1, this bothers me too. ",
    "Julian": "I haven't taken time to investigate, but both of the options mentioned above seem to have regressions compared to what's here now.\ndef foo():\n    bar(\n        bla=1,\n        baz=2,\n        spam=3,\n    )\nseems to have one of them align the closing paren with the end of args, instead of leaving it where it is, and the main thing that brought me here:\ndef foo():\n    bar(\n        something=\"\"\"\n            <some>\n                 <xml>\n                  stuff\n                 </xml>\n             </some>\n        \"\"\"\n     )\nhas everything here ruin the indentation in the string literal.. ",
    "LnL7": "I'm noticing similar problems as #321, not sure if this is since https://github.com/sheerun/vim-polyglot/commit/17ad302c54063be1871c7f82d75b77e7c595e10c or a recent upstream issue but removing share/vim-plugins/vim-polyglot/indent/python.vim makes it much better.\nHowever https://github.com/vim-python/python-syntax is also unusable for larger files and it drops highlighting when jumping to the end of files. Using let g:python_slow_sync = 0 makes this better but even then it's still a noticeably slower.\nI feel like polyglot shouldn't override any of the builtin syntaxes provided by vim itself, and provide lightweight implementations for missing languages.. The older https://github.com/vim-scripts/indentpython.vim has similar indentation functionality from what I can tell, and doesn't seem to have any performance issues.. ",
    "herrbischoff": "Scratch that, it's actually extremely easy. The script does all the work already. I'm going to open a new pull request properly adding it to the build script.. ",
    "chris-fran": "Is this still a thing?. ",
    "fozcodes": "I had tried to do it manually but didn't seem to have any effect. Awesome, thanks!. ",
    "arthurxavierx": "Ref purescript-contrib/purescript-vim#40.. ",
    "Cypher1": "Thanks @sheerun . ",
    "MichaelAquilina": "Cool, thanks @sheerun :). ",
    "naggie": "As far as I can see this is no longer in master. Am I missing something?. OK thanks -- I will try to fix the issue so it can be re-introduced when I have time... ",
    "Armavica": "@naggie this: #249 \nAs far as I am concerned I haven't used openscad since then, so I haven't tried to get it back.. That's okay, I just wanted to save you time. Thank you for the update!. ",
    "mcmillion": "Same thing here, started with commit 8b3418cab8eb5267b3a5743e4d5fe5f698d48bc8. ",
    "ShashankaNataraj": "@sheerun @mcmillion Im still seeing this issue!\n\n. ",
    "McKean": "Just encountered the same after an update today.. ",
    "squaresurf": "I just started getting this when opening typescript files.\nMore specifically this error when I open a typescript file:\nVim(execute):E121: Undefined variable: g:graphql_javascript_tags. I wouldn't mind it so much if I could find any documentation regarding what should set that variable to.. Thank you! It's fixed for me when opening typescript files :smile:. ",
    "jamestomasino": "This error just started getting thrown for me as well after an update to the latest.. ",
    "eidge": "Same here, reverting to the commit that fixed this issue initially fixes it for me.\nTemporary workaround:\n$ cd $VIM_DIR/bundle/vim-polyglot\n$ git checkout 7673a61990d4062adebbe49f71067b0aad90382a. ",
    "giulioroggero": "I have the same problem and I fixed it adding to .vimrc\n\" disable graphql\nlet g:polyglot_disabled = ['graphql']. ",
    "Carpetsmoker": "\nI'm unable to capture the errors, because they are gone after few seconds.\n\nAre they shown when you use :messages?. Maybe not related, but the syntax/go.vim file has:\nif !exists('g:polyglot_disabled') || index(g:polyglot_disabled, 'vim') == -1\n\nShouldn't that be go instead of vim?. ",
    "brendanjerwin": "let g:polyglot_disabled = ['go'] didn't seem to fix it for me. had to disable polyglot to get it to stop breaking things. . ",
    "ik5": "@Carpetsmoker sorry for the late response.\nthank you @sheerun . ",
    "kristijanhusak": "Thanks! . ",
    "Henri-Lo": "With LargeFile, you won't encounter performance issues with resource-intensive extensions such as CSV.vim. CSV.vim is brilliant but you need to know how to use it, like not using intensive commands such as ArrangeColumn with large files.. ",
    "chrisbra": "author here. That solely depends on your csv file and the feature (e.g. auto-arranging) you use for it. But in general, it has to parse the csv file to setup the syntax rules, so depending on your data (and attributes) this is kind to be expected. But this should only affect csv files and no other ones.. I forgot to document how to make the plugin faster, done now. Setting at least g:csv_end to e..g 100 will considerably improve the loading performance of a file.\nAlso if you have enabled the LargeFile plugin, it will disable the csv plugin for huge files.. ",
    "ivegotasthma": "I'd also be interested in this. ",
    "lervag": "Me too (developer of vimtex here). I've been helping quite a lot of people, at least 5 or 6 (according to my issue tracker), with problems related to plugin conflicts between vimtex and LaTeX-Box.. First, I know nothing of the polyglot build script, so your first comment does not really mean anything to me.\nSo, the warnings from vimtex are actually quite important. Removing them would mean that relatively essential features will not work, and most people would start to complain and ask what is wrong with vimtex. However, I could accept to add a minor option to allow the messages not to be printed. This setting should not be used by default for users, but could be useful for testing scripts.\nNote that not showing warnings is not in itself a good thing. That LaTeX-Box does not show warnings about system properties that will prevent the plugin from working properly is IMHO a bad thing. If you want to use vimtex without all the features, you can disable them as desired. This will also remove the related warnings.\nAnd yes, I am aware that there is a slightly high startup time. This is one of my current concerns, but I still feel that the features provided are worth this delay. It also, of course, only affects LaTeX files. One of the reasons for this delay is that I parse the loaded LaTeX project during initialization in order to set an initial state. This is necessary in order to e.g. provide LaTeX package specific options.. First, thanks for clearing up for me how polyglot works. I was not aware of the details, and things make more sense now.\nIn this case, I also agree with your conclusion that it seems not worth the effort to change vimtex to fit the polyglot build script, so I won't. However, I will add a new warning as you suggest which explains how to disable LaTeX-Box if one uses polyglot.\nDo you have a surefire way of detecting polyglot?. Thanks, I've found a way that seems good. Just need to test it some more before I push. In any case, thanks for the discussion. I think you could close this issue now.. I'm now adding a warning if LaTeX-Box is detected, and an additional hint if vim-polyglot is detected as well. The warnings look like this:\nvimtex: Conflicting plugin detected: LaTeX-Box\n        vimtex does not work as expected when LaTeX-Box is installed!\n        Please disable or remove it to use vimtex!\nvimtex: LaTeX-Box is included with vim-polyglot and may be disabled with:\n        let g:polyglot_disabled = ['latex']. ",
    "superDuperCyberTechno": "Ran ./build.. ",
    "partounian": "Here's my startup.log https://gist.github.com/partounian/47893da97c2a5418b1103ea7382a7f70\nI have updated the OP with the test setup.. Thank you. I need to make a note that the time is ms not seconds haha my mistake.. Please create a PR for this :). ",
    "GenaBitu": "Works like a charm, thank you very much!. ",
    "stellarhoof": "I get the same. For me the problem is that LatexToUnicode#* are autoload functions from the julia filetype and I disabled julia. Temporary fix by surrounding the relevant code in ftdetect/polyglot.vim, lines 497-518 with if index(g:polyglot_disabled, 'julia') == -1 | ... | endif. ",
    "cory-klein": "Before:\n\nAfter: \n\n. ",
    "tgzhou98": "```\nset nocompatible              \" required\nfiletype off                  \" required\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\" let Vundle manage Vundle, required\nPlugin 'gmarik/Vundle.vim'\n\" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)\n\"********\n\" Track the engine.\n\" ppets are separated from the engine. Add this if you want them:\"\n\" \n\"Plugin 'vim-scripts/taglist.vim'\nPlugin 'rizzatti/dash.vim'\nPlugin 'rsmenon/vim-mathematica'\nPlugin 'Shougo/vimproc.vim'\nPlugin 'wookayin/vim-typora'\nPlugin 'xolox/vim-easytags'\nPlugin 'xolox/vim-misc'\nPlugin 'kshenoy/vim-signature'\nPlugin 'scrooloose/nerdcommenter'\nPlugin 'godlygeek/tabular'\nPlugin 'plasticboy/vim-markdown'\nPlugin 'shime/vim-livedown'\n\"Plugin 'JamshedVesuna/vim-markdown-preview'\n\"Plugin 'lazywei/vim-matlab'\n\"Plugin 'vim-scripts/Conque-GDB'\nPlugin 'tpope/vim-surround'\nPlugin 'lervag/vimtex'\nPlugin 'flazz/vim-colorschemes'\nPlugin 'terryma/vim-multiple-cursors'\nPlugin 'vim-scripts/matchit.zip'\nPlugin 'tell-k/vim-autopep8'\nPlugin 'ervandew/supertab' \nPlugin 'vim-latex/vim-latex'\nPlugin 'honza/vim-snippets'\nPlugin 'SirVer/ultisnips'\nPlugin 'scrooloose/nerdtree'\nPlugin 'Xuyuanp/nerdtree-git-plugin'\n\"Plugin 'jistr/vim-nerdtree-tabs'\nPlugin 'indentLine.Vim'\nPlugin 'sheerun/vim-polyglot' \"language packages\nPlugin 'hdima/python-syntax'\nPlugin 'dyng/ctrlsf.vim'\nPlugin 'majutsushi/tagbar'\nPlugin 'vim-airline/vim-airline'\n\"Plugin 'Lokaltog/vim-powerline'\nPlugin 'tmhedberg/SimpylFold'\nPlugin 'vim-airline/vim-airline-themes'\nPlugin 'kien/rainbow_parentheses.vim'\nPlugin 'ctrlpvim/ctrlp.vim'\nBundle 'terryma/vim-expand-region'\nBundle 'gmarik/vundle'\nBundle 'tpope/vim-fugitive'\nPlugin 'Lokaltog/vim-easymotion'\n\"Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}  \"Html writting\n\"Bundle 'thinca/vim-quickrun'\n\"Bundle 'tpope/vim-rails.git'\nPlugin 'nvie/vim-flake8'\n\"Bundle 'TabBar'\n\"Bundle 'L9'\nPlugin 'valloric/YouCompleteMe'\nPlugin 'scrooloose/syntastic'\n\"Bundle 'FuzzyFinder'\nPlugin 'Shougo/unite.vim'\nset omnifunc=syntaxcomplete#Complete\n\"set tags=/Users/zhoutiangang/Documents/Tools/tags\nset tags+=~/.vimtags\n\"manuual\n\"dictionary  \nset dictionary+=/usr/share/dict/words\n\"spelling file\nfunction! SpellLocalCheck()\n    setlocal spell spelllang=en_us\nendfunction\ninoremap jk \nnnoremap ,cd :cd %:p:h:pwd\nautocmd! FileType python,c,cpp,tex,fortran,ncl noremap   :call Autopep8()\nlet g:ycm_server_python_interpreter ='/usr/local/bin/python3'\nlet g:ycm_python_binary_path = '/usr/local/bin/python3'\nlet g:ag_prg=\" --vimgrep\"\n\"let g:ctrlsf_default_root = 'cwd'\nlet gLeaderlFold_docstring_preview = 1\nlet g:ycm_global_ycm_extra_conf = \"~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py\"\n\"\nlet g:ycm_key_invoke_completion = ''\nnnoremap  ,st :call SetTitle()\nnnoremap  ,td :call TitleDet()\n\"Syntastic\nset statusline+=%#warningmsg#\nset statusline+=%{SyntasticStatuslineFlag()}\nset statusline+=%*\nlet g:syntastic_always_populate_loc_list = 1\nlet g:syntastic_auto_loc_list = 1\nlet g:syntastic_check_on_open = 1\nlet g:syntastic_check_on_wq = 0\nlet g:syntastic_loc_list_height=3\nlet g:syntastic_tex_checkers = ['lacheck']\nlet g:syntastic_python_checkers = ['flake8']\nlet g:syntastic_cpp_checkers = ['gcc']\nlet g:syntastic_c_checkers = ['gcc']\nlet g:syntastic_matlab_checkers = ['mlint']\nautocmd FileType python set =python3complete#Complete\n\"\" I have poly \n\"------------Start Python PEP 8 stuff----------------\n\" Number of spaces that a pre-existing tab is equal to.\nau BufRead,BufNewFile py,pyw,.c,.h set tabstop=4\n\"spaces for indents\nau BufRead,BufNewFile .py,pyw set shiftwidth=4\nau BufRead,BufNewFile .py,.pyw set expandtab\nau BufRead,BufNewFile .py set softtabstop=4\n\" Use the below highlight group when displaying bad whitespace is desired.\nhighlight BadWhitespace ctermbg=red guibg=red\n\" Display tabs at the beginning of a line in Python mode as bad.\nau BufRead,BufNewFile .py,.pyw match BadWhitespace /^\\t+/\n\" Make trailing whitespace be flagged as bad.\nau BufRead,BufNewFile .py,.pyw,.c,.h match BadWhitespace /\\s+$/\n\" Wrap text after a certain number of characters\nau BufRead,BufNewFile .py,.pyw, set textwidth=100\n\" Use UNIX (\\n) line endings.\nau BufNewFile .py,.pyw,.c,*.h set fileformat=unix\n\" Set the default file encoding to UTF-8:\nset encoding=utf-8\n\" Keep indentation level from previous line:\nautocmd! FileType python set autoindent\n\" make backspaces more powerfull\nset backspace=indent,eol,start\n\"Folding based on indentation:\nautocmd! FileType python set foldmethod=indent\n\"use space to open folds\n\"nnoremap  za \n\"\n\"----------Stop python PEP 8 stuff--------------\n\"js stuff\"\nautocmd FileType javascript setlocal shiftwidth=2 tabstop=2\nset cursorline\nnnoremap  \nnnoremap  \nnnoremap  \nnnoremap  \nnnoremap  \nlet g:SimpylFold_docstring_preview=1\nlet python_highlight_all=1\nsyntax on\nlet g:autopep8_disable_show_diff=1\n```\nThese are some of my .vimrc that I think may contribute to the problem.\nAnd it is the full version of my vimrc\nvimrc\nI have tried to delete the python PEP8 configuration in my vimrc, but not work.\nWish for your help. ",
    "codercodingthecode": "Would that work with Vundle as well?\nPlugin 'sheerun/vim-polyglot'. ",
    "lasseebert": "It is fixed in master (commit https://github.com/sheerun/vim-polyglot/commit/bfc6ed9fbafc0758aaab228df70a3656368d8497)\nRelated issue: https://github.com/sheerun/vim-polyglot/issues/262. I'm seeing the same thing with .exs files in Elixir. .ex files works as expected. I just updated vim-polyglot and it was working before.. Perhaps related to this commit: https://github.com/sheerun/vim-polyglot/commit/cef5e2d93100c4b765d276914658eab75906f4c9\nIt works on 3.3.0 and breaks on 3.3.1. I can confirm that the latest master fixes the issue for me. Thanks :+1:\nI'm affraid I can't be of much help implementing the getline(1)-thing, since I can't VimScript.. ",
    "happiness9721": "thanks for reply, it works now\ud83e\udd18. ",
    "iovis9": "Confirmed working now for CoffeeScript. ",
    "meain": "The issue is still present. Ping me if you need more information on this. @sheerun \nFor some reason, I am unable to reopen the issue.. ",
    "CH-DanReif": "Seems legit.  https://github.com/wgwoods/vim-systemd-syntax/commit/5a4282446c1bdcf25bc3bf0e64fe38d4bcdad94e taught me a neat shortcut for \"optional single letter\".  Thanks!. Resolved by #294 ?. \n. Resolved by #294 ?. @Eduruiz This should be an issue open on https://github.com/StanAngeloff/php.vim; we just use @StanAngeloff's syntax as-is.  If you can identify the issue and Stan won't fix it, fork Stan's repo, and we can switch to using yours, instead.  #OpenSource #Forks4Lyfe. This belongs in https://github.com/vim-python/python-syntax .  Once it's updated there, open an issue here and we'll rebuild and pull in the changed version.  If @vim-python won't accept your update to make this change, the next step is to fork that repo, make the change in your fork, and then make a PR to change https://github.com/sheerun/vim-polyglot/blob/e2404449e4f961c5e6c0e2689078612b36d776c2/build#L220 .\nEither way, there's not much I can do about this at the moment, here.. The plugin appears to be gated properly (see https://github.com/sheerun/vim-polyglot/blob/master/syntax/json.vim#L1).  Are you sure the syntax you're seeing is from polyglot?  An easy test: edit polyglot's json.vim to be empty.  Do you still see the behavior you describe here?. @thejohnfreeman In that case, you have another copy of json.vim floating around somewhere, most likely.\nOne handy hack:\nvim --startuptime \"$(tf=\"$(mktemp)\"; echo \"$tf\"; echo \"$tf\" >&2)\" -c 'quit' foo.json\nThen look in the tempfile that was printed out; you should see several lines like:\n060.883  000.115  000.115: sourcing /usr/share/vim/vim80/ftplugin/json.vim\nThat'll tell you where it's finding that file.  Working backwards, you can see where that is being referenced from, etc.\nWith that, closing this issue.  If it's reproducible without any content in the vim-polyglot syntax file, then disabling polyglot's copy of the file won't really do much; working as expected.. I'm not particularly comfortable with the ftplugin in that repo.  Can you fork and make a cleaner version of that syntax with ftdetect but without the plugin?. Fixed in https://github.com/sheerun/vim-polyglot/pull/301 .. @sheerun Mind testing this when you have a spare \n?\n. @timfeirg Nah, it's just where it happened to hit a timeout in the test.  I've restarted the job.. Confirmed; vim $(mktemp).js used to break, now works.. @tonywoode What's your g:polyglot_disabled?. @tonywoode vim $(mktemp).js WfM.  How're you getting the error?  Ideally, it should happen with a blank file and we just need the extension you're using, but otherwise, we'll need the file it's happening with.  We'll also need your .vimrc and your vim --version.  Please open a new issue for this; it's not related to #303.. The reason is these two lines: https://github.com/sheerun/vim-polyglot/blob/a26134de3c09f9725667e14e7073a701bcff4e19/build#L152-L153 .  c++11, as you noted, only adds those two files in after.  So my first thought is that disabling c++11 should disable only c++11, but disabling c/c++ should also disable c++11.  But then I think about it a bit more; surely someone, somewhere might want to bring in their own replacement for c/c++, while continuing to use our c++11.\nIf we had a good way to raise a one-time warning to the user, lint-style, this would be a perfect fit to raise there.  But outside of that, I'm not sure what fix I'd be comfortable with.  What would you suggest?. This is because autoload is giving up and going home.  It's looking for go/config and finding it at https://github.com/sheerun/vim-polyglot/blob/master/autoload/go/config.vim .  But that file doesn't define anything (because you've disabled polyglot's go support).  It then doesn't attempt to find that same file anywhere else.\nPerhaps https://github.com/junegunn/vim-plug supports the concept of setting a special value in our autoload file that would indicate that it's disabled, but still present.  Perhaps vim-plug would honor ordering in its searching of autoload directories, if you put fatih/vim-go first.  Perhaps manually loading the autoload file from fatih/vim-go would preclude vim from subsequently searching the autoload path.  I'm not sure about any of these, but I don't see how it would be possible for us to solve this in this project.. I think this is a good change, but it needs to be proposed over here.  We don't maintain our own versions of plugins; they come from upstream contributors.\nOnce your change is accepted in the upstream project, open an issue here and we can re-run the import to pick up on the update.. Can you see if you can repro with https://github.com/CH-DanReif/dotfiles/blob/disable-everything/.vimrc active?  I'm not able to.. ",
    "MindTooth": "Would be nice to see this included.. ",
    "idbrii": "polyglot only contains a syntax file for markdown. Since there's no ftplugin, this behavior is not because polyglot breaks something, it's because it doesn't add it! vim-markdown provides a markdown indent file so it does special indent handling for markdown. polyglot does not.\nThe vimrc you're providing is not setting up any indent behavior, so vim does the dumb thing and provides none. I'd recommend doing barebones tests like this with sensible so you have something close to a realistic workspace. That would give you set autoindent which fixes the issue.\npolyglot claims:\n\nSolid syntax and indentation support (other features skipped). Only the best language packs.\n\nSo maybe it's a bug that indent support is not included?\nEdit: If you mean * bar is now at the first column, I don't see that behavior. Your test vimrc still references your ~/.vim (since it's not removed from rtp), so something else local may be interfering.. Sorry, I double-submitted this as #286. Closing this one as dupe.. @CH-DanReif Is the problem with the ftplugin that it's there at all, that it provides commands for running a script, or something more specific about the code?\nI'll look into configuring it away.. Applescript is now using _SYNTAX.. vim-markdown provides ftdetect rules for markdown (vim-liquid does too, but it uses a different filetype), but vim also has them built-in:\naugroup filetypedetect\n\" markdown:plasticboy/vim-markdown:_SYNTAX\n\" markdown filetype file\nau BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=markdown\nau BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn}.{des3,des,bf,bfa,aes,idea,cast,rc2,rc4,rc5,desx} set filetype=markdown\naugroup END\n\nMy version of Vim (8.1) also detects markdown in filetype.vim:\n\" Markdown\nau BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown\n\nSince vim-markdown uses set filetype instead of setfiletype (no space), they are both invoked and the filetype is modified twice (files are sourced twice). If you have your own autocmd for detecting markdown, then you'd see the filetypes applied thrice.\nThis would show you where your ftdetect rules are defined:\n:verb au BufRead *.md\n\nSee some discussion and timings here.\nI'm not sure if polyglot should convert set ft= into setfiletype, but in this case vim-markdown should be fixed since vim now includes proper markdown detection.\n. This issue can be resolved by updating polyglot to use the latest version of vim-markdown.. @frioux \nI'd guess it's because it loads a syntax file for each code block in your markdown. For a quick test, try let g:vim_markdown_fenced_languages = {} in your vimrc. I think that should disable the corresponding code in vim-markdown.\nYou're profiling vim code, so it doesn't reveal that anything in polyglot is causing problems.\nDo you get the slowdown if you have a blank vimrc and only polyglot installed?\nWhat if you remove vim-markdown from polyglot?  Then report a bug (including your markdown file's contents) on vim-markdown.\n. @lytedev Does that occur if you remove polyglot and install vim-markdown?. What behaviour do you expect to be mapped to <CR>? (I don't see anything in current fugitive help for what CR does in a fugitive-object.)\nFugitive never checks b:did_ftplugin and doesn't have a ftplugin/git.vim so I don't get how this is happening.\nFYI, polyglot's git ftplugin is the same as the one distributed by vim. Vim's ftplugins are lower priority than user installed ones, so I guess that's why we don't see the issue without polyglot.\nFor me on tpope/vim-fugitive@02c26619c4d42d874216943eb9ad69cff371a109, doing :Gedit HEAD~ also shows no fugitive command mapped to CR, but I didn't try removing polyglot or adding git to polyglot_disabled. Also, I have no expectations that CR would do anything.. > you are not following the repro steps. try disabling polyglot then repeat your steps. it should now show you something like n <CR> *@:<C-U>exe <SNR>106_GF(\"edit\")<CR>\nNope. Neither removing polyglot nor stripping everything out doesn't show anything mapped to <cr>:\nmv ~/.*vim* vimarchive/.\ngit clone vimarchive/.vim/bundle/fugitive ~/.vim\ncp vimarchive/.vim/bundle/sensible/plugin/sensible.vim ~/.vimrc\n(tpope/vim-sensible@7aa7dba2a2594c209d8063c4c1c56de130c362d3 and tpope/vim-fugitive@02c26619c4d42d874216943eb9ad69cff371a109)\nWhen use your workaround, what do you get from :verbose map <cr>?\nWhat version of fugitive are you using? Perhaps tpope removed this feature (that vimcast article is 8 years old)?. > I see you have sensible above. sanity check. did you follow my repro as is, or some equivalent form? trying to understand what's causing the discrepancy we see.\nNo, I don't have Plug. But I get the same behaviour as you (no map) when both plugins installed, so I wasn't testing the plugin install scenario.\nIt looks like you're not removing your .vim files so it's possible something is leaking in there. (Example: if you had a ~/.vim/ftplugin everything in there would be loaded.) If you follow my steps it will give you a truly vanilla install (I use sensible for basic common settings like filetype on).\n\njudging from the mapped command, I think it came from this line in vim-fugitive. and tpope's commit message says Map <CR> in blobs to jump to blamed commit, so it's pretty obvious the enter key carries a designed feature.\n\nTry removing conditions around calls to fugitive#MapJumps(). If I do :Gedit c161994e9607399a7b365ab274592bfc4f100306 | echo b:fugitive_type I get commit not blob and some calls check for blob. Also, these lines look related. If installing polyglot changes when/how the filetype is detected then that could mess something up?\n. I use pathogen. But in my test steps above cloning fugitive into ~/.vim is using no plugin manager.\n\nwithout the sensible part, so vim-fugitive is the only plugin\n\nDoing that (no ~/.vimrc) may mean that basic settings like filetype plugin indent on aren't executed (depends on your version of vim and I'm not sure when defaults.vim was introduced). That's why I use sensible as a test vimrc. \n\ntried. it makes no difference. the only effective workaround is to comment out this line as I found earlier.\n\nCommenting out that line didn't make nmap <CR> return anything for my normal config. Same for disabling git support from polyglot:\nlet g:polyglot_disabled = get(g:, 'polyglot_disabled', [])\ncall add(g:polyglot_disabled, 'git')\n\nExecuting :edit in the buffer does make <CR> mapped to the GF(\"edit\") function like you've shown.\nCan you remove polyglot from the equation? Try installing vim-git directly:\nset nocompatible\ncall plug#begin('~/.vim/bundle')\n Plug 'tpope/vim-fugitive'\n Plug 'tpope/vim-git'\ncall plug#end()\nIf you can demonstrate the problem with that, then you can close this bug and rename your bug with tpope to be \"CR doesn't work in Gedit commit buffer\" or something.. @ri-aje If it's fixed, do you want to close both bugs?. ",
    "frioux": "good call re ~/.vim, will check that when I get a chance.. This is fixed; what a relief!. Even if I run ./build in a checkout of the latest polyglot I still find that markdown files are really slow to load.  You can see the time being taken in this small bit of a profile:\n```\nFUNCTION  4_SynSet()\n    Defined: /usr/share/vim/vim81/syntax/synload.vim line 33\nCalled 7 times\nTotal time:   0.392857\n Self time:   0.011350\ncount  total (s)   self (s)\n                              \" clear syntax for :set syntax=OFF  and any syntax name that doesn't exist\n    7              0.003539   syn clear\n    7              0.000043   if exists(\"b:current_syntax\")\n                                unlet b:current_syntax\n    7              0.000009   endif\n7              0.000034   let s = expand(\"<amatch>\")\n7              0.000016   if s == \"ON\"\n                            \" :set syntax=ON\n                            if &filetype == \"\"\n                              echohl ErrorMsg\n                              echo \"filetype unknown\"\n                              echohl None\n                            endif\n                            let s = &filetype\n7              0.000012   elseif s == \"OFF\"\n                            let s = \"\"\n7              0.000005   endif\n\n7              0.000010   if s != \"\"\n                            \" Load the syntax file(s).  When there are several, separated by dots,\n                            \" load each in sequence.\n\n14              0.000248     for name in split(s, '.')\n    7   0.388787   0.007280       exe \"runtime! syntax/\" . name . \".vim syntax/\" . name . \"/*.vim\"\n   14              0.000015     endfor\n    7              0.000004   endif\n```. ",
    "taq": "Seems that on the language pack another plugin is specified to use with indent: https://github.com/2072/PHP-Indenting-for-VIm\nWill try to install that plugin and see if works well, thanks!. Seems so, thanks!. ",
    "ratorx": "I managed to fix this for myself, so I'll close the issue. The file conflict still remains, but apparently it can be circumvented by specifying this plugins build script as a build script (an optional argument).\nAlthough the plugins are initially cloned into different directories, at some point, the plugin manager tries to speed up loading by copying from the plugin directories into a generated init directory.\nThis fails when trying to copy the build script and replace the build folder of the other plugin with it.. ",
    "anowlcalledjosh": "@sheerun I have created a repository for Lilypond's Vim plugin files at https://github.com/anowlcalledjosh/vim-lilypond, with the files from the official Lilypond distribution. I intend to keep it up to date as new Lilypond versions are released, though obviously it's hard to demonstrate that when I've only just created it :)\nWould you consider adding it to vim-polyglot?. Reported as stephpy/vim-yaml#19. ",
    "jeromedalbert": "I am not sure the issue above is fixable, since it is seems related to the number of installed language plugins in vim-polyglot.\nIndeed, when I replace vim-polyglot with only the language plugins I need (all cherry-picked from vim-polyglot's selection):\ncall plug#begin('~/.vim/plugged')\n...\nPlug 'vim-ruby/vim-ruby', { 'for': ['ruby', 'eruby'] }\nPlug 'pangloss/vim-javascript', { 'for': ['javascript', 'html', 'eruby.html'] }\nPlug 'mxw/vim-jsx', { 'for': 'javascript' }\nPlug 'othree/html5.vim', { 'for': ['html', 'eruby.html'] }\nPlug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }\nPlug 'wavded/vim-stylus', { 'for': 'stylus' }\nPlug 'plasticboy/vim-markdown', { 'for': 'markdown' }\nPlug 'keith/swift.vim', { 'for': 'swift' }\nPlug 'StanAngeloff/php.vim', { 'for': 'php' }\n...\ncall plug#end()\nMy HTML startup times get ~120ms faster on a 10 starts average.. ",
    "Eduruiz": "@CH-DanReif seems so! :+1:\nThanks!!. Ops! Ma bad.\nIt's still happening here, I just haven't reload the configs properly.\nIt happens on inline scripts with the src attribute too.\nI can contribute with more information, just give me the directions. :)\n\n. ",
    "thejohnfreeman": "Yes, I still see it, but it also goes away if I set let g:vim_json_warnings = 0 and nothing else, even if vim-polyglot is missing from my ~/.vim. I guess I have no idea what is going on.. ",
    "BMDan": "@idbrii Much better, thanks.  I'll merge this as soon as I'm back on my other account.. @dsifford Functionality and ease of iteration are maximized in the current configuration; the biggest benefit of make that I know of is its handling of dependencies, but here the penalty of recompilation is pretty low, encountered just once per commit, and only on the maintainer's machine.  I think make isn't being used for lack of a compelling reason to use it.  But I'm always willing to review PRs, of course.\n[This is @CH-DanReif 's other account.]. ",
    "alecdwm": "Do you use vim-sleuth? This issue hasn't been fixed, but could be relevant.\nDisabling either vim-polyglot or vim-sleuth fixed the slow loading for me (but obviously means I can't use both plugins simultaneously).\nI also have the issue when combining vim-sleuth with just vim-markdown in place of vim-polyglot.. ",
    "dylan-chong": "@alecdwm Thank you! Disabling sleuths save three hundred milliseconds i start up time! Is a shame that we can't tell that it's this plugin from the start up time log. @idbrii  thank you for your hard work investigating and fixing this issue :). ",
    "seeARMS": "vim-polygot is slow loading markdown files for me too, and I don't use vim-sleuth.. ",
    "lytedev": "I'm seeing this issue when I open multiple markdown files, the Nth time I enter a ft=markdown buffer, I see N^2-ish load times. I'm using Neovim 0.4.0 beta and a handful of other plugins, but commenting vim-polyglot fixes the slowness.\nYou can see what I'm seeing by doing this:\n```\nmkdir -p /tmp/mds/\ncd /tmp/mds/\nseq 20 | sed 's/$/.md/' | xargs touch\nnvim ./*\ninside vim, :bn over and over again and watch it get progressively slower\n``. @idbrii It does! I guess it's safe to say that this bug is withvim-markdown`. Good call. I'll file an issue over there.. ",
    "tyok": "Sorry, I know it was ages ago but I want to mention that disabling coffee-script (not coffee) fixed it:\nlet g:polyglot_disabled = ['coffee-script']\nIn case anyone has the same problem.. ",
    "dsifford": "Sure. I'll try to get something started when I get some extra free time.\nIdeally, I'd like to hand off the maintenance to someone else more interested in the language if possible though. I don't particularly like PHP (I use it on rare occasions, this week being one of those times). I'm mostly just a uniformity nut when it comes to syntax highlighting.\nI'll chime back here with updates once I'm able to get something started / halfway decent :+1: \nEdit: To be clear: I'll maintain it until the time comes that we can find a new maintainer. So no worries.. Happy to collaborate if help is needed.\nFor this particular issue: disregard for now. The syntax is pretty great, but it unfortunately has some performance issues. \nI'll revisit this down the road if anything changes.. @sheerun Thank god you're around to maintain a level head, because that is a gooooooood point that I hadn't even considered.\nThanks for the info. I'll dive into #237 here later this afternoon and take a look.\nI'm wondering if there might be a way to implement a standardized set of tests using vader or something that could be ran on all syntax updates through CI that might make managing some of these backwards compat issues more streamlined.\nI just finished up my winter semester and have about a month of downtime before the next one begins. So, maaaaaybe if I'm feeling particularly bold I'll see if I can look into getting something like that fleshed out and shoot a PR over... (stressing the word maybe).. Noted. Thanks for clarifying.\nGot the contribution invitation. Thanks. I'll try to dig into this specific issue later this week. :+1: . Outsider looking in: Why aren't you guys just using make for this? Seems like you're doing a ton of heavy lifting for things that just come out of the box with make.. ",
    "devinalvaro": "If I'm not wrong, vim-polyglot only integrates syntax, compiler, and indent from vim-go. You can look it up in the README, at go section.. ",
    "timfeirg": "I don't think my PR breaks .rbw parsing but travis indeed says so, interesting. RFC @CH-DanReif . ",
    "mwhite": "This causes the error \"Undefined variable: g:graphql_javascript_tags\" in javascript files.. ",
    "codeaholicguy": "The same problem here. I think this commit https://github.com/sheerun/vim-polyglot/commit/e2404449e4f961c5e6c0e2689078612b36d776c2 causes problem. I think we should assign default value for g:graphql_javascript_tags if there are not, does'n it?.. ",
    "tonywoode": "I just updated and now get the following:\nError detected while processing /Users/username/.vim/bundle/vim-polyglot/after/syntax/javascript/graphql.vim:\nline   12:\nE121: Undefined variable: g:graphql_javascript_tags\nE116: Invalid arguments for function join(g:graphql_javascript_tags, '\\|') . '\\)'\nE15: Invalid expression: '\\%(' . join(g:graphql_javascript_tags, '\\|') . '\\)'. unset. ok thanks moved to #331. with that .vimrc, no error\nbut vim-polyglot is disabled in that .vimrc\nif I re-enable it, and re-enable also only the basics of vundle so it can load, I get the error. ",
    "muziqiushan": "\n. commmit 30c87b73deff05c7dd9590228c0615a3299f39ff (Sun Nov 19 21:51:33 2017)is ok,but the latest version break the indent;  please reopen it . ",
    "SicariusNoctis": "Ah, OK, so I had to add:\nlet g:polyglot_disabled = ['python-ident']\n\n. ",
    "talha131": "@sheerun Can you please merge this PR.. This issues is solved via https://github.com/sheerun/vim-polyglot/pull/318. ",
    "cBournhonesque": "Actually it was the python-pep8-indent plugin that was extremely slow, I was mistaken.. ",
    "bbtdev": "This seems to be a neovim issue. ",
    "vincentzhezhang": "Maybe just add peitalin/vim-jsx-typescript to the package?. ",
    "maln0ir": "There are some config variables in the Python syntax file. Just set this one to 0 in your vimrc. . ",
    "rafikdraoui": "The README for PotatoesMaster/i3-vim-syntax also explicitly mentions that it is not maintained anymore and that mboughaba/i3config.vim should be used as an alternative.. The link for i3 in the Language Packs section of the README would need to be updated too.. ",
    "thewatts": "Looks the the build failed for reasons outside of the changed file - closing and re-opening to re-trigger a Travis Build.. ",
    "trevordmiller": "Although for this to be in vim-polyglot, @jxnblk should probably remove https://github.com/jxnblk/vim-mdx-js/blob/4bf61b0728a387a241b48691f5b5adf0b03e1ea2/ftdetect/mdx.vim#L8, so only .mdx files are detected as markdown.mdx filetype.. Awesome! I\u2019m looking forward to this being released. cc @jxnblk. @sheerun I removed vim-mdx-js from my plugins, upgraded my vim-polyglot plugin, restarted Vim, and now .mdx files are not being recognized correctly. :set filetype? in an .mdx file shows filetype=conf.. Works great! Thanks :). ",
    "mgutz": "what was the fix? I'm having similar error. ",
    "hujianxin": "@mgutz I just put Plug 'sheerun/vim-polyglot' let g:polyglot_disabled = ['go'] after Plug 'fatih/vim-go'. ",
    "lerrua": "Same issue here, also using :GoInfo command.. ",
    "thatjames": "Same issue when using :GoInfo. @JCepedaVillamayor @lerrua by chance are you guys running vim-go as well?. @JCepedaVillamayor I have a feeling there's a conflict with the two plugins but I'm not familiar with vim script :/ \nI've managed to get guru working by adding let g:go_info_mode='guru' to my init file, but I'm pretty certain that's a function defined by vim-go. YMMV. ",
    "jecepeda": "Yes, I'm using it @thatjames . Seems that lately there have been changes in vim-go repository. I'm sure this has something to do with this.\n. Ok, I've made some insights about this. In your vim-configuration, is vim-go before or after vim-polyglot? @thatjames \nI've just changed the order in my .vimrc and now it works perfectly. . Since nobody has answered and the error (at least for me) has been solved, I proceed to close the issue. \nThank you for all the help given!. ",
    "berfarah": "\ud83d\udc4b just wanted to check back in to see if there's anything I can do here. ",
    "alex-shamshurin": "Thanks,  could you fix merge issues?. ",
    "w0rp": "It looks like this file is just built from the vim-vue plugin, so I'll come up with some better defaults in ALE and fix this in that plugin instead.. ",
    "Neur1n": "Err... The link I attached is the only place I found them. And it is more like a \"FYI\" than a requirement. So it's fine to not include it if you think it is inappropriate or it is required by few people. (Even I am using using it so frequently.) Thanks.. ",
    "rliebz": "I've run into a similar issue using vim-plug. I was able to get it working without any of those errors by plugging vim-polyglot after vim-go, although I'd call this a workaround rather than a fix.\nSnippet from my vimrc:\n```vim\ncall plug#begin('~/.vim/plugged')\n\" ...\nPlug 'fatih/vim-go'\n\" polyglot can cause issues if not plugged last\nPlug 'sheerun/vim-polyglot'\nlet g:polyglot_disabled = ['go']\ncall plug#end()\n```\nI'm not 100% if the change to polyglot_disabled is required or not.\n. ",
    "DarrienG": "I too am using vim-plug. It's not a solution I like, but I suppose it will do. . ",
    "danielgatis": "Sorry. Can you explain this approach better? So with some context about it I can open a new pull request. thanks.\n. ",
    "jethrosun": "Yeah I have this problem too. Unfortunately doing a polyglot_disabled org can't help here . ",
    "gpanders": "Confirmed. Setting g:polyglot_disabled = [\"org\"] does not make the problem go away.\nChanging line 110 of ftplugin/org.vim to\nvim\npython << EOF\nsolves it.. ",
    "Oddegamra": "The whole orgmode folder containing the necessary python files from the original orgmode plugin is missing in this collection, which may be the root cause of the problems.. ",
    "b-ggs": ":syntax output:\n\n\nmacOS Mojave\n:syntax\n--- Syntax items ---\ndockerfileKeywords xxx USER SHELL RUN ADD WORKDIR ONBUILD\n                   ENTRYPOINT HEALTHCHECK CMD EXPOSE MAINTAINER\n                   ARG VOLUME LABEL FROM COPY AS\n[...]\n\n\nDebian 9\n:syntax\nNo Syntax items defined for this buffer\n\n\n\nAlso if it's worth mentioning, if I manually run :set syntax=dockerfile, the correct highlighting shows up.. Moving syntax/dockerfile.vim to syntax/Dockerfile.vim seems to fix this. Will make a PR for this.\n. Nice, I wasn't aware of the build process and all. I'll close my PR in favor of yours. Thanks @jimmyharris!. Closing in favor of #373 where the issue is fixed in the build script instead of in the files themselves.. ",
    "nickjj": "Just popping in to say that I noticed the same exact behavior and your proposed fix worked. Thanks!. ",
    "jimmyharris": "This appears to be the correct solution, I wonder if the compilation scripts need to be modified to make sure that this auto-generation works?. I created a pull request (#373) to correctly address the package naming issue at the root of the problem in the build script where it is introduced. @sheerun please spin a new build as quickly as possible.. I wonder if the issue is: @sheerun is building on MacOS. that uses a case preserving but case insensitive file system.  The automated build script wouldn't actually change the file names correctly with the current build script, and the test suite doesn't throw an error if the syntax plugin isn't actually loaded.  The spec script isn't super sophisticated in determining if the plugins did actually load. It is mostly checking for errors at load time. I'm going to close my PR because it doesn't actually fix the issue.. Sorry for the confusion. #374 is the correct fix here. It would be helpful if the build script could run on a case sensitive file system MacOS does support creating HFS+ file systems that are case sensitive see https://coderwall.com/p/mgi8ja/case-sensitive-git-in-mac-os-x-like-a-pro for an example of how to do this. Official builds of this repo probably should be conducted on Case sensitive file systems.\nIf you are using this on MacOS you will need to re-clone/reinstall your repo to make sure the file name change actually takes effect.\n@b-ggs I guess your pull request was the correct solution.\n@sheerun  could we get this solution merged quickly? I would prefer to be able to support newer updates as they become available.. thanks!. Whoops. Looks like this doesn't fix the issue, the correct fix would be to rename the files in Git so that the build script actually works on case insensitive file systems. (or perform future builds/releases on case sensitive file systems.). ",
    "vitaly": "hey @sheerun , can you merge this? ;). ",
    "ri-aje": "\nWhat behaviour do you expect to be mapped to <CR>? \n\nas I mentioned in the issue report, it should n  <CR>        *@:<C-U>exe <SNR>25_GF(\"edit\")<CR>\n\n(I don't see anything in current fugitive help for what CR does in a fugitive-object.)\n\ncheck out this article. search for enter in the page. or :h fugitive_<CR>\n\nFugitive never checks b:did_ftplugin and doesn't have a ftplugin/git.vim so I don't get how this is happening.\nFYI, polyglot's git ftplugin is the same as the one distributed by vim. Vim's ftplugins are lower priority than user installed ones, so I guess that's why we don't see the issue without polyglot.\n\nlater I found a workaround. if I comment out this line, then the issue goes away. does that lead to any solution?\n\nFor me on tpope/vim-fugitive@02c2661, doing :Gedit HEAD~ also shows no fugitive command mapped to CR, but I didn't try removing polyglot\n\nyou are not following the repro steps. try disabling polyglot then repeat your steps. it should now show you something like n  <CR>        *@:<C-U>exe <SNR>106_GF(\"edit\")<CR>\n\nor adding git to polyglot_disabled. \nAlso, I have no expectations that CR would do anything.\n\nplease check out the article or vim help I mentioned above.. > > you are not following the repro steps. try disabling polyglot then repeat your steps. it should now show you something like n <CR> *@:<C-U>exe <SNR>106_GF(\"edit\")<CR>\n\nNope. Neither removing polyglot nor stripping everything out doesn't show anything mapped to <cr>:\n\nok. then I am not sure why it doesn't repro on your end.\n\nmv ~/.*vim* vimarchive/.\ngit clone vimarchive/.vim/bundle/fugitive ~/.vim\ncp vimarchive/.vim/bundle/sensible/plugin/sensible.vim ~/.vimrc\n(tpope/vim-sensible@7aa7dba and tpope/vim-fugitive@02c2661)\n\nI see you have sensible above. sanity check. did you follow my repro as is, or some equivalent form? trying to understand what's causing the discrepancy we see.\n\nWhen use your workaround, what do you get from :verbose map <cr>?\n\nI got this with my workaround or when only loading vim fugitive without polyglot.\nn  <CR>        *@:<C-U>exe <SNR>27_GF(\"edit\")<CR>\n        Last set from ~/.vim/bundle/vim-fugitive/autoload/fugitive.vim\njudging from the mapped command, I think it came from this line in vim-fugitive. and tpope's commit message says Map <CR> in blobs to jump to blamed commit, so it's pretty obvious the enter key carries a designed feature.\n\nWhat version of fugitive are you using? \n\nI am up-to-date on both repo.\nvim-fugitive HEAD a489c6e1d3fc265242fabfd171021b0ea02dacf8\nvim-polyglot HEAD c161994e9607399a7b365ab274592bfc4f100306\nin case it matters, my vim is\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Apr 10 2018 21:31:58)\nIncluded patches: 1-1453\n\nPerhaps tpope removed this feature (that vimcast article is 8 years old)?\n\nI don't think so, the article is linked in https://github.com/tpope/vim-fugitive readme which is up-to-date. you may find it by searching Browsing the git object database. plus, :h fugitive_<CR> also hints the existence of the mapping.. > Hi,\n\nI can reproduce this on neovim using the same revisions.\nvim-fugitive HEAD a489c6e1d3fc265242fabfd171021b0ea02dacf8\nvim-polyglot HEAD c161994e9607399a7b365ab274592bfc4f100306\nNVIM v0.3.1\n\nlater I found a workaround. if I comment out this line, then the issue goes away. does that lead to any solution?\n\nThis workaround works on my system as well.\n\n\n\nyou are not following the repro steps. try disabling polyglot then repeat your steps. it should now show you something like n <CR> *@:<C-U>exe <SNR>106_GF(\"edit\")<CR>\n\nNope. Neither removing polyglot nor stripping everything out doesn't show anything mapped to <cr>:\n\nok. then I am not sure why it doesn't repro on your end.\n\nJust to make sure, did you run :verbose map <cr> after Gedit? The mapping is set only on git filetypes.\n\ncorrect. I see that mapping after running Gedit, and to be clear, I don't see that mapping before running Gedit. as you found, it's only available on git filetypes which makes sense since vim-polyglot/ftplugin/git.vim should only be loaded for such buffers. I can see airline prints [git] in status line after running Gedit.\n. > > I see you have sensible above. sanity check. did you follow my repro as is, or some equivalent form? trying to understand what's causing the discrepancy we see.\n\nNo, I don't have Plug. But I get the same behaviour as you (no map) when both plugins installed, so I wasn't testing the plugin install scenario.\nIt looks like you're not removing your .vim files so it's possible something is leaking in there. (Example: if you had a ~/.vim/ftplugin everything in there would be loaded.) If you follow my steps it will give you a truly vanilla install (I use sensible for basic common settings like filetype on).\n\nI just followed your steps (without the sensible part, so vim-fugitive is the only plugin). I then navigate to vim-polyglot repo and issued vim to open an instance. then :Gedit c161994e9607399a7b365ab274592bfc4f100306 and I can still see <cr> is mapped to:\nn  <CR>        *@:<C-U>exe <SNR>25_GF(\"edit\")<CR>\n        Last set from ~/.vim/autoload/fugitive.vim\nto be extra certain, I made a new user with absolute minimum setting (install vim-plug and then paste the min repro vimrc on top of this thread) and observe the bug too.\n\n\njudging from the mapped command, I think it came from this line in vim-fugitive. and tpope's commit message says Map <CR> in blobs to jump to blamed commit, so it's pretty obvious the enter key carries a designed feature.\n\nTry removing conditions around calls to fugitive#MapJumps(). \n\ntried. it makes no difference. the only effective workaround is to comment out this line as I found earlier.\n\nIf I do :Gedit c161994e9607399a7b365ab274592bfc4f100306 | echo b:fugitive_type I get commit not blob and some calls check for blob. Also, these lines look related. \n\nwith the vanilla setting suggested by your way, :Gedit c161994e9607399a7b365ab274592bfc4f100306 | echo b:fugitive_type also gives me commit, which makes sense in reference of fugitive#MapJumps definition since the GF(\"edit\") appears in the else branch and we want control enters there in the case of commit.\n\nIf installing polyglot changes when/how the filetype is detected then that could mess something up?\n\nit seems like we are discussing whether <cr> is mapped by vim-fugitive to begin with, which I am sure it is since I have provided several evidence. @gmnimrod also confirmed the issue and my workaround from his end. but somehow, this bug just doesn't appear in your setting? maybe it's caused by the plugin managers we use since that appears the only meaningful difference we have. which plugin manager you use?. > I use pathogen. But in my test steps above cloning fugitive into ~/.vim is using no plugin manager.\n\n\nwithout the sensible part, so vim-fugitive is the only plugin\n\nDoing that (no ~/.vimrc) may mean that basic settings like filetype plugin indent on aren't executed (depends on your version of vim and I'm not sure when defaults.vim was introduced). That's why I use sensible as a test vimrc.\n\ntried. it makes no difference. the only effective workaround is to comment out this line as I found earlier.\n\nCommenting out that line didn't make nmap <CR> return anything for my normal config. Same for disabling git support from polyglot:\nlet g:polyglot_disabled = get(g:, 'polyglot_disabled', [])\ncall add(g:polyglot_disabled, 'git')\nExecuting :edit in the buffer does make <CR> mapped to the GF(\"edit\") function like you've shown.\nCan you remove polyglot from the equation? Try installing vim-git directly:\nset nocompatible\ncall plug#begin('~/.vim/bundle')\n Plug 'tpope/vim-fugitive'\n Plug 'tpope/vim-git'\ncall plug#end()\nIf you can demonstrate the problem with that, then you can close this bug and rename your bug with tpope to be \"CR doesn't work in Gedit commit buffer\" or something.\n\nhi, I just tired under a newly created user with min repro .vimrc. turns out the bug is not there this time, with either your above short vimrc or the one I posted originally. since vimplug just pulled all updates, this drove me to think some recent change fixed the bug. I looked at my plugins that received updates and noticed vim-fugitive has some new commits and binary searched its latest commits. I was able to identify the fix commit 666c4abc from fugitive checked in today.\nto be fair, I wasn't sure this has to be polyglot bug, and I made it clear in my original post. I also opened issue to vim-fugitive (https://github.com/tpope/vim-fugitive/issues/1174), but didn't receive any reply from tpope so far.\nin any event, the bug is fixed. thanks for your time and patience.\n. ",
    "gmnimrod": "Hi,\nI can reproduce this on neovim using the same revisions.\nvim-fugitive HEAD a489c6e1d3fc265242fabfd171021b0ea02dacf8\nvim-polyglot HEAD c161994e9607399a7b365ab274592bfc4f100306\nNVIM v0.3.1\n\nlater I found a workaround. if I comment out this line, then the issue goes away. does that lead to any solution?\n\nThis workaround works on my system as well.\n\n\n\nyou are not following the repro steps. try disabling polyglot then repeat your steps. it should now show you something like n <CR> *@:<C-U>exe <SNR>106_GF(\"edit\")<CR>\n\nNope. Neither removing polyglot nor stripping everything out doesn't show anything mapped to <cr>:\n\nok. then I am not sure why it doesn't repro on your end.\n\nJust to make sure, did you run :verbose map <cr> after Gedit? The mapping is set only on git filetypes.. > Can you remove polyglot from the equation? Try installing vim-git directly:\n@idbrii is right. With vim-git the bug is reproduced, without it fugitive works fine.\n\nFugitive never checks b:did_ftplugin and doesn't have a ftplugin/git.vim so I don't get how this is happening.\nFYI, polyglot's git ftplugin is the same as the one distributed by vim. Vim's ftplugins are lower priority than user installed ones, so I guess that's why we don't see the issue without polyglot.\n\nTurns out, the ftplugins are not the same. polyglot's and vim-git's versions are slightly newer than vim's and neovim's.\nThe bug is present only in the newer version of ftplugin/git.vim. When polyglot is not disabled via g:polyglot_disabled, it overrides the default ftplugin. It does it by setting did_ftplugin. That is the way recommended in the docs.\n(:h ftplugin-overrule or :h write-filetype-plugin)\nWith the workaround suggested by @ri-aje, the default ftplugin is executed after the user plugin, undoing the bug.\nThis commit makes the difference between versions. The added regex causes the ftplugin not to set b:git_dir when the current directory is a fugitive URL (any path that starts with \"fugitive://\"). Here, in fugitive's code fugitive checks for b:git_dir before defining its mapping. Since it is missing, it skips the mapping.\n(fugitive#MapJumps is also called in a bunch of other places, but I find that this is where it is called, when polyglot/vim-git are not interfering).\nIn summary, is a vim-git and/or fugitive bug (until proven otherwise of course :wink:).. ",
    "sodiumjoe": "I'm also running into this issue. It looks like https://github.com/mxw/vim-jsx is no longer maintained, might need to find an alternative.. ",
    "mars90226": "I've created a merge request to fix this issue in https://github.com/mxw/vim-jsx/pull/187. After merging, I'll create another merge request to fix this issue here.. I also notice this fork, but I'm not sure if it's good to create a merge request that replace vim-jsx with this fork. Currently, I think the best way is disabling jsx in vim-polyglot and manually using this fork.. Thanks!. ",
    "afk-mcz": "A fork was made by @amadeus https://github.com/amadeus/vim-jsx. ",
    "krobelus": "don't mind me, re-opened upstream in https://github.com/dag/vim-fish/pull/44. ",
    "wdv4758h": "How long are we talking about ? I run the build on my laptop here, the whole build processing took about 30 seconds. Probably it's the internet speed ?\nSince I'm not the maintainer of llvm repo and I don't want to maintain another llvm vim support repo. I will run the build on my local with this then.\nI've been using my fork of vim-polyglot for a while, I'm fine with it. :smile: . ",
    "myfreeweb": "You don't need the LLVM repo itself, there's a very nice vim repo I've been using: https://github.com/rhysd/vim-llvm. ",
    "favetelinguis": "Ok thanks. "
}