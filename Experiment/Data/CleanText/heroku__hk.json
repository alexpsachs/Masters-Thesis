{
    "kr": "+1\n. It would be nice to add a sentence to the help output explaining this behavior.\n. Symbol syscall.Exec probably doesn't exist on Windows, which\nhas no way I know of to replace the program in a running process.\nWe could use os/exec on all platforms, but it's nice to avoid an\nextra process on unix when possible.\nThis approach looks reasonable to me. I'd suggest two stylistic changes:\n- rename sysExec to exec.\n- add a comment to the windows implementation explaining why it's there.\nAlso, calling exec.Command like this discards args[0]. Instead it\nshould initialize the Path and Args in the Cmd directly, e.g.:\ngo\ncmd := exec.Cmd{Path: path, Args: args}\n. (In general, package syscall should be considered not portable.\nAny time you see a file importing syscall without also having a\nbuild constraint, that's a smell.)\n. Oh cool. Hey @parkr, gofmt will walk directories recursively,\nso you can probably get travis to fail with something like this:\ntest -z \"$(gofmt -l .)\"\nNo need to echo a message, since travis prints the commands\nas it runs them. It'll be clear what failed.\n. Is there a way to avoid those backslashes?\nPerhaps by using single-quotes?\nAre the outer quotes even necessary?\n. Yay! So nice. :)\nUgh, sucks having a dependency with non-gofmt'd code.\nI have an outstanding pull request for @cyberdelia's fork:\ncyberdelia/pat#1. We should get @bmizerany to apply it as well.\nI guess we should also reconsider filtering out the dependency\ncode from this check. The go fmt form does this, but it also\nwrites the files in place, so running it a second time will give\ndifferent results. Maybe that's ok. In that case, the command\nwould be test -z \"$(go fmt ./...)\". Or we could write some\nmore complicated shell code to prune the _workspace and\nrun plain old gofmt (omitting flag -w).\nWhat do you folks think?\n. We shouldn't put package names (e.g. hkdist) in the command.\nIf we did, we'd have to change this every time we create or\ndelete a package.\nCommand go fmt ./... does the right thing, since it ignores all\nthe vendored code in Godeps/_workspace.\nGofmt can take input from stdin, but not a list of file names.\n. Looks good to me.\n. Nice.\n. Wow, nice. Congrats.\n. My contribution to the syntax bikeshed is @, because it means \"at\".\nSo worker=5@2X means \"how many workers? I want five at 2X\".\n. You might consider a map of categories instead of adding\na field to struct Command.\nvar categories = map[string][]*Command {\n  \"app\":  {cmdApp, cmdApps, etc},\n  \"dyno\": {cmdDynos, cmdRestart, etc},\n  etc\n}\nA matter of taste, I suppose, but if the categories are there\nfor the benefit of the style guide, then it's easier to keep the\nassignments collected all in one place.\nJust a thought.\n. Heroku's usage of \"logs\" to refer to an app's log is unusual.\nYou're only accustomed to it because you work there. ;)\nAn app only has one log. If you really want to consider\nthe output of this command as a list, it's a list of lines.\n. My only reservation about singular \"log\" is that it's also a verb.\n. Try having main add -a into the FlagSet before it calls Parse.\nFor a plugin, you can make a new FlagSet with just one flag defined.\nThat'll give you the unambiguous behavior for plugins and run, and\nstill allow builtin command flags to appear before -a.\n. > @kr so I'd stick with the NeedsApp field on the Command struct and just have main() add the flag to commands that need it?\nYes. Or even maybe add it unconditionally to all commands.\n. Nice.\nBtw my 2\u00a2 is not to split Usage into a separate name field.\nIt's like two lines of code to insert -a into the help text, and\nthe command definitions will stay readable.\n. go\nusage := c.Name() + \" [-a app]\" + strings.TrimPrefix(c.Usage, c.Name())\n. Alternatively, you could include the [-a app] in the literal\nusage text for every command, and get rid of the separate\nNeedsApp flag, and instead use\nstrings.Contains(c.Usage, \"[-a app]\").\nBut that might be a little too magical. Just another option.\n. I know you guys are intentionally moving away from unix\ndesign, but this still makes me a little sad.\n. Yeah the basic unix principle is that a command's output should\nbe useful and parsimonious. That's all. So a command whose\nwhole purpose is to produce output (for example, ls) should print\nexactly the information the user asked for. A command that gets\nrun purely for side effects (for example, cp) should produce no\noutput at all. If there's an error, the error needs to be described\n(on stderr), but if it worked then no output is needed.\nA command that is mainly used for its side effects but also\nproduces new information needed by the user (for example,\nhk create produces an app name), it should print that info,\npreferably unadorned so it's easy to pipe into other tools, like\nhk create | pbcopy.\nGit is a pretty sketchy interface to imitate. It's inconsistent in\nmany areas, including whether to print superfluous output. For\nexample, git branch x prints nothing, but git checkout x prints\nSwitched to branch 'x' (which provides no information).\nThere's no consistent rule there for hk to use.\nAs for the specific case of hk run, I still argue that ssh is the\nbest model to follow.\nI understand hk's output has become confusing, so I'm not really\nsaying you should change direction. Just wanted to register\nsome feedback that this design direction will hurt hk's usability\nfor me. I don't know how unusual I am in this respect. I must\nadmit I find it hard to understand that people are confused that\n\"it's unclear whether some commands actually did anything\".\nDo they feel the same way about cp or mv? I certainly understand\nthat people are accustomed to the heroku gem, and hk is\ndifferent, and that's important to respect at least in the short\nterm. I'm just a little sad to see long term repeat usability being\nsacrificed to clear up short term confusion.\n. > What do you think of @parkr's proposal of a \"quiet mode\" which may in effect be a \"unix mode\"?\nI'd rather live with the output and have fewer flags to learn.\nIn cases where I really want no output (for example in an\nif test in a shell script), hk whatever >/dev/null works\nwell enough.\n. Eh, it means more surface area, more branches in the code\n(and hence more chances for bugs) more documentation to\nread, more general background noise. A \"quiet\" flag rarely\ncarries its weight.\n. That paper does not appear to be publicly available, but the\nabstract seems to be about users in an extremely narrow\nand specialized domain. Is it really applicable here?\n. Awesome! I will use this every day.\n(I sort of wish it were called hk psql, but that's just me.)\n. The error message tells you exactly what to do.\nUse 'godep go install' instead.\nI'm open to suggestions on how to make this more clear.\nAlso, I'm not sure exactly what you mean by \"update a project's dependencies with godep\". Do you mean compiling a project after you've git pulled the latest version of its code? Or do you mean altering the project's dependencies to include updated versions of various packages that it uses?\n. > I still wouldn't recommend godep go install for this part\nAgreed, godep go build is good (since it used to be go build).\nLet me try to explain why 'godep go get' makes no sense and is blocked:\nIf you're using the vanilla go tool, and you want to compile and install the code and all the dependencies are already downloaded, then 'go get' and 'go install' do the same thing. This is a common situation, and many people (myself included), often use 'go get' in this situation, since it works. When you're using godep, the dependencies are always already downloaded by the time the go tool runs, so there's never any reason to use 'godep go get' instead of 'godep go install'. Plus, there's another command, 'godep get', that does something different (roughly 'go get X && godep go install X'), so, prompted by an offhand comment by @bradfitz, I disabled 'godep go get' to try to avoid confusion. Maybe my attempt backfired?\nI know it's still confusing. I'm very open to suggestions on how to make it better.\n. @brandur, it sounds like you may have no GOPATH or haven't set up your work space as described in http://golang.org/doc/code.html (screencast version at http://www.youtube.com/watch?v=XCsL89YtqCs).\n\ngo install: no install location for directory /Users/brandur/Documents/heroku/hk outside GOPATH\n\nI'd expect this to happen whenever you try to run go install, for any package, regardless of hk or godep being involved. Is that right?\n(I also recommend installing go from the tarballs on https://code.google.com/p/go/downloads/list. Just untar it in /usr/local. It's easier than homebrew and you don't have to wait for it to build, and you know you're getting the right thing.)\n. This reminds me of something I noticed recently, filed as #70.\n. Also, yay! Thanks for this change! :dancer: \n. @mattn if you want to use a different path, such as $HOME/.hk/plugins, you can set HKPATH in your shell. The original choice of /usr/local/lib/hk/plugin was deliberate.\nSeparately, if we do decide we want hk to search two directories by default, then I think it's better to simply use a two-element list as the default value for the search path. The logic to search the search path already needs to do filesystem operations, so it's not necessary to duplicate some of that logic when setting the default value for hkPath.\nThirdly, I doubt any changes to the current plugin system will be merged. It seems hk is being taken in a different direction.\n. Oh, heh. I guess that decision shouldn't be considered final for all time. :)\nThe rational wasn't super elaborate. Just that starting with a single directory would be simple, and picking a directory name that is constant (rather than containing the username) is also simple. It doesn't account for Windows though. :/\n. Personally I think it's easier to follow. It's more idiomatic in Go,\njudging by the standard library.\n. It's either check whether they're runnable, or do two passes,\none for each list (commands and help). Six of one, half a\ndozen of the other.\n. Long ago, @max and I talked about this and vaguely\nconcluded that listing and removing ssh keys in the CLI\nis more awkward than useful, and we would just leave it\nto dashboard, with hk only adding keys.\nNot trying to suggest that's still the right answer, just\nwanted to give a bit of historical context.\n. For hk plugins alone, credentials are supplied for you in env vars.\nHk deliberately normalizes access so you don't know or care where\nthey came from; they are always in HKUSER and HKPASS (etc).\nIMO this still seems like a nice refactoring. Just wanted to mention\nthat plugins don't have to worry about finding credentials.\n. HERKOU_API_URL is already passed to plugins, as you've probably noticed.\nHKUSER and HKPASS are purely redundant, to make life easier on plugin authors who don't have a good way to parse URLs. For example, a shell script.\n. I don't feel strongly either way.\n(BTW, the existing behavior is all documented. Check out hk help plugins.)\n. Something something special cases.\nFWIW, this change would make my life worse.\n. $ hk run bash -a myapp\nerror: ambiguous -a flag provided\nThis is a small thing, but it's obnoxious, and not how ssh works.\n(The ssh precedent isn't just conceptual, for example\nhttps://github.com/kr/runx actually runs ssh, passing through\nthe rest of the args.)\nAlso, accepting flags after arguments in some commands but\nnot others? Come on, it's 2014, we should know better by now.\nSpecial cases often seem like a good idea at the time, but they\nmake everything more complicated. For example, this patch\nas-is neglects to update the usage text.\nUsage: hk <command> [-a app] [options] [arguments]\nIt should instead be something like\nUsage: hk <command> [-a app] [options] [arguments] [more options]\nAlso also, I'm not sure even that is correct, since it could be that\n-a is allowed in between arguments, like\n$ hk unset FOO -a myapp BAR\nI'm not sure whether that would set the app or not, and a quick\nscan of parseAppFromArgs makes me think it would, but I'm not\nentirely sure.\nPoint is, why is this even a question??? I shouldn't have to worry\nabout whether or not that works. Accepting optional flags before\nthe rest of the arguments is a common convention. If you would\njust use the flag package as intended, there would be no confusion.\nAlso also also, it looks like parseAppFromArgs doesn't take the\n-a=foo form, even further diverging from behavior of other flags.\nUgh.\n. > there would be no confusion\nMaybe that prediction is too strong. There's always the\nchance for confusion no matter what. But at least it\nwould be easier to explain the true behavior.\n. $ hk run bash -a myapp\nerror: ambiguous -a flag provided\nThis example is deliberately chosen to be confusing, by\nusing the string \"myapp\" for something that's not an app name.\nIt should run a process with argv [\"bash\", \"-a\", \"myapp\"].\nThat's what ssh does, and the behavior falls naturally out of\nthe simple rules for flag parsing. A user can predict this will\nhappen once they know how hk works. No need for elaborate\ndocumentation, though of course examples never hurt to help\neducate people with different pedagogical preferences.\n. > That didn't actually work before these commits\nYes, it did work. It worked just like ssh, in the obvious and predictable way.\n. > stepping around -a is really annoying\nYou can already do\n$ HKAPP=foo hk info\n$ HKAPP=foo hk run whatever\netc\n. > Unfortunately, based on the amount of feedback I've gotten around the inflexibility of hk's opt parsing, that's not the case.\nI think a lot of this stems from people assuming that hk will be just like the heroku gem. It's a different product, and hk might do a better job of setting expectations.\nWith simple, regular behavior, at least you have a chance of explaining how to use it.\n\nI'm not convinced that our users will be quick to adapt to strict option ordering.\n\nAn awful lot of commands they run every day already work this way.\n. Basically, I'm just saying that special cases take their toll in the long run, in the form of extra code complexity and user-visible behavior that's harder to form an accurate mental model around.\nThis can be worth it, but you have to have a really good reason. \"The simple thing is annoying\" is generally not sufficient justification.\n. And what about plugins?\n$ hk run bash -a foo\nerror: ambiguous -a flag provided\n$ hk runx bash -a foo\n???\nWhat should hk do here? With simple flag parsing, the\nanswer is obvious. With this patch? It's anyone's guess.\n. > but this one complaint comes up over and over\nFrom whom? Remember most non-herokai usually don't even use -a. Be careful about optimizing for the wrong persona. (Breaking e.g. hk run ls -a src for normal users.)\n. > I don't want it to be so straightforward to accidentally fuck up your production environment.\nOk, now that is an interesting problem, but this patch doesn't solve it.\nA user could just as easily make the same mistake with a plugin, and it would go undetected.\nOr they could mistype the -a as -s.\nYou can't always second-guess the user's intent. This is getting uncomfortably close to DWIM territory.\n. I'm just imagining myself introducing new coworkers to heroku and hk.\nHaving to sheepishly explain this weird behavior (this patch is not just\n\"make it work like getopt\", it's weirder than that) and apologize to each\nnew person. That would be embarrassing.\n. > True, but how does accepting -a against hk alone break any use case of yours\nIt doesn't. That would be far preferable to me than this patch.\nHk had that behavior for a while, and I found it perfectly tolerable.\nThe code and documentation was slightly more complicated than\nthe current stock hk, but not by a huge margin.\n. Yeah, I have to agree the ssh style is but one of several possiblities.\nIt's just the most similar analogue to 'hk run' I can think of, and the\nworkarounds that other commands use, such as -- or a quoted string\nfeel both ugly and inconvenient to me. Rather than su -c 'foo bar',\nI prefer the more modern sudo foo bar. True, this means you can't\nuse sudo whoami -u tim to run the command as tim.\nThis is mostly personal preference, though I'd argue that readability\nalso plays a role across most or all of our target audience.\nI don't have a good answer for how to solve @fdr's original issue.\nPutting -a first feels conceptually wrong, but it's damn practical.\nConsider supporting -a in both places, before and after the\ncommand name? Documenting that to avoid confusion will be\nmore challenging. But maybe worth it? (This would also be more\nreason to try to avoid splitting -a into two flags, one for app name\nand one for git remote name.)\n. Regarding\n\nThe app flag really isn't a global option\n\nI find it increasingly difficult to take a hard-line stance\nagainst putting -a before the command, since we also\nsupport env var HKAPP, which is even more \"outside\"\nthe containment hierarchy. True, some commands\ndon't apply to an app. They'd have to ignore -a, just\nlike they ignore HKAPP.\n. LGTM\n. Personally I think the approach heroku-accounts uses to juggle multiple\naccounts could be improved upon. I'm not sure it's worth pursuing.\n. The ideal would be for heroku to provide a way to manage apps among multiple organizations (including your personal self) without more than one set of credentials. Switching between multiple heroku accounts is a hack to workaround this lack. I don't know if heroku is currently working on improving such support. If not, I suppose it might be worthwhile to deploy a workaround. But any workaround should still be made cleanly if possible.\n. You already know how I feel about interspersed flags and non-flags.\nBut given that as a requirement, this approach looks reasonable to me.\n. > I'd still like to improve the help output for run to provide some examples of the -- or quoted forms.\nGood call.\nOne question, what is the behavior of this:\n$ hk run ls -a myapp /\ngiven that myapp is an app I have access to?\n. This seems confusing to me. We don't have hk scale-up web=5 and hk scale-down web=1. But for some reason that's what has been proposed for addon plan changes. I don't really understand it.\n. As for whether \"upgrade\" and \"downgrade\" more closely match users' mental models, I think that argument is best made based on evidence. (For example, @max says it matches his mental model, while @kr says it doesn't match his. Probably neither of them is representative of the typical user.)\nLet's not forget that it's also hk's job to help users create their mental model in the first place. How many users come to us with little or no preconception of how addon plan changes work? Probably most of them? (Most don't even know what a Dyno is, let alone a Heroku Add-on, before they use Heroku.) In that case we're helping them build a mental model from scratch.\nIn general, all else being equal, it's better if the user's mental model more closely matches the underlying mechanism, because that'll give them more powerful intuition about what is and isn't possible, what they can do with the service.\n. It's discourteous to spew pages of output when the user makes a typo. FWIW, I've heard many people express annoyance at such a practice, it's not just my preference.\n. I think it's better to exclude particular methods.\nThe http spec is a little vague on this point. Section 4.3 says:\n\nA message-body MUST NOT be included in\n   a request if the specification of the request method (section 5.1.1)\n   does not allow sending an entity-body in requests.\n\nHowever, of the request methods in sections 9.2 through 9.9,\nonly TRACE prohibits a request body. Of course, GET, HEAD,\nand DELETE conventionally don't include a body. I think the\nspirit of the spec is to assume that methods may take a body\nby default, and that we should exclude just the ones known\nnot to.\n. And fwiw you can work around this now (and for any method in the future)\nby sending an empty body with $ </dev/null hk api delete .... There is no\npossible workaround in the other direction for those methods where hk\ndoesn't read a body.\n. Also, however this goes, don't forget to update the documentation:\nhttps://github.com/dpiddy/hk/blob/84e512f1d036e7772ffe527c4a8d619d65cacc6f/api.go#L19\n:)\n. What about excluding GET, HEAD, DELETE, and TRACE?\nI think that would be in line with platform conventions and\nstill allow for unforeseen additional methods in the future.\nI'm not trying to prescribe which methods should take a body,\nonly suggesting that it should be a blacklist rather than a\nwhitelist.\n. I guess it makes little practical difference, given that hk can\nbe updated and deployed so quickly. Even future platform\napi changes can be accommodated that way.\nLGTM\n. LGTM, though I think you don't have to define another flag.\nYou can test for err == ErrHelp.\n. I can do a code review, but I'm not sure this is appropriate to have in hk in the first place.\nNow that we can belong to multiple organizations, it's better to have just one Heroku account. (Heroku still needs to let us associate more than one email address per account, but at least now the basic requirement is met.)\n. Nice.\nPartly out of curiosity: what would this look like as a plugin? If it's only for Herokai, then maybe we should avoid shipping it to all users???\n. At this point you can just print to stderr or stdout.\n(Preferably with log.Print). The \"update\" command\nis run with its output going to logger.\n. If we're just logging the error in either branch, why branch at all?\n. Is this variable helping? How about putting the verifySha call inline here?\n. That's a janky attempt to mimic the output of 'git describe' but\nfor mercurial. Unlike with git, it doesn't degrade to the empty\nstring when there are no tags.\n. https://github.com/kr/godep/blob/05aebf2/vcs.go#L58\n. Better to put that distinguishing information in the error value,\nso it gets shows up with a simple log.Print(err).\n. In fact, it's already in the error value.\nThis if statement does nothing.\n. Ah yes, but still the if statement doesn't contribute anything:\nlog.Println(\"update: patching binary,\", err)\nvs\nlog.Println(\"update: fetching full binary,\", err)\nYou'd get:\nupdate: patching binary, new file hash mismatch after patch\nor\nupdate: fetching full binary, new file hash mismatch after patch\n(As a matter of style, I'd suggest changing the ErrHashMismatch\nvalue to \"hash mismatch\", which seems to say enough.)\n. > Suppose I want to store this on a web service in a somewhat structured form, indicating what kind of error happened, and at what part of the update process it occurred. Should I create a custom error struct that holds the details I need?\nWe'd need more specific details about how to get the error information\nfrom here to the web service. Will it be an inline http call here in the code?\nOr a separate process that reads log output from this process?\nAnyway, YAGNI. If/when that situation arises, then deal with it. But\nmeanwhile don't write code for something we're not doing.\n. TrimSpace?\n. Yikes, I would not do it that way.\nThe \"nearly always\" intentional race condition is scary. When it loses the race, printing unexpected things to stdout will break scripts.\nCheck if stdin (not stdout or stderr) is a tty. If so, print the prompt to the tty (not stdout or stderr) before reading anything. No goroutines or timeouts. That should work in all cases, even if an interactive user has redirected output to a file.\nI'm not generally a fan of changing behavior based on tty-ness, but it's better than this.\n. Even windows can do this, apparently:\nhttp://msdn.microsoft.com/en-us/library/aa364960(VS.85).aspx\nYou can check if the handle is of type FILE_TYPE_CHAR.\n. If you happen to have a newer version of some other dependency sitting in your GOPATH, running godep save will pick it up as well. To avoid that, you can run:\n$ godep restore\n$ godep save ./...\nDoes that command sequence make sense? Is it intuitive why it works?\nAnd is it inconvenient? I've also contemplated making save only add new things and leave existing deps alone (like go get default behavior) and having a save -u flag or something similar when you do want to update.\nI'm very interested in opinions about this.\n. This name is a little weird, and has stutter for users: hkclient.HkClients(\u2026).\nConsider New or Open or something if you can find an appropriate one.\nAn plain verb like that would be good if Clients is the primary type of this\npackage, which it seems to be.\nSame goes for HkNetRc and any other prefixed exported symbols.\nI'd suggest Netrc (or NetRc if you prefer that capitalization) instead.\nJust remember users will see it as hkclient.Netrc.\n. > Are you aware of any terminal packages\nI'm not, sorry. I spend most of my days in denial, trying to\npretend that terminals don't exist. :sweat: \nBtw, some of the stuff in hk/term is questionable. For example,\nfunc Restore is badly named \u2013\u00a0it doesn't restore anything,\nit turns echo on. Echo may or not have been on to begin with,\nso \"restore\" is misleading.\nI think everything there is somehow possible on windows, but I\ndon't know enough about windows programming to say how.\n. This should be switch rec := rec.(type), and the error case below should be message = rec.Error().\n. Not sure about the order here. I think we made a vague attempt to put common/important commands at the top of this list, but who knows. It certainly wasn't based on any evidence or even particularly careful thought on my part. Also, if ~100% of users (aka all non-Herokai) won't ever run this command, maybe it should be kept out of the list or put in the \"extra\" list (or pulled into a plugin)?\n. Oh oops, I missed the + extra above. Since that's already the case, this line should just be moved down to the \"more\" section below.\n. Changes inside Godeps/_workspace should not be made by hand. If this change happens as-is, the code here won't match the commit hash listedn in Godeps.json. Instead, you can run godep update github.com/bgentry/heroku-go to pick up your new commit. (You don't have to wait for the change to be merged upstream.)\n. Yeah. Add your fork as another remote in $GOPATH/src/github.com/bgentry/heroku-go, and make your changes there, so you keep the original import path.\nThis is not quite ideal, since another person wouldn't be able to run godep restore, so it's best when you know there's a good chance the change will be merged upstream. People have also suggested having godep record alternate git sources so that unmerged changes will be reachable by all users, but until then at least it's somewhat ameliorated by having the source code itself present.\n(If you want to really fork the project, as in going your separate ways from the original project and never merging upstream, that would be a good time to change the import path.)\n. You should use a raw string literal here:\n`heroku\\.com(\\..*)`\nSame goes for the other places with double backslashes.\n. This variable should be called s.\nhttps://code.google.com/p/go-wiki/wiki/CodeReviewComments#Variable_Names\nhttp://research.swtch.com/names\n. Probably don't want a blank line here. And the other places.\n. This test needs to start with a capital T. Currently it isn't being run by 'go test'.\n. If I fix the name, this test fails. And it causes another test to fail, presumably because it's altering HEROKU_GIT_HOST. (Maybe it should be HEROKU_GIT_HOST_REGEX instead.)\n--- FAIL: TestAppNameFromGitURL (0.00 seconds)\n    git_test.go:33: expected company_name, got \n    git_test.go:39: expected account, got myapp\n--- FAIL: TestParseGitRemoteOutput (0.00 seconds)\n    git_test.go:65: expected 2 results, got 0\n    git_test.go:71: expected remote  not found\n    git_test.go:71: expected remote  not found\n. Reading the code for appNameFromGitURL I would expect this to return \"myapp\", not \"company_name\". I suspect the test is just wrong, but it could be the function being tested. Same goes for below.\n. This is questionable. It misses escaping several other regexp metachars. See http://godoc.org/regexp/syntax.\nIt would be better to treat the literal hostname case separately, using the same logic that was here before this patch.\n. ",
    "parkr": ":+1: , :+1: ^^\n. Maybe 80 char width constraint?\n. Done.\n. @bgentry Should be fixed. Squashed into 1 commit so it wouldn't litter your Git history with fixes.\n. Works for me if it works for you.\n. Yep.\n. Build will fail as the following files are listed by gofmt:\ntext\nGodeps/_workspace/src/github.com/bmizerany/pat/example/hello.go\nGodeps/_workspace/src/github.com/bmizerany/pat/example/hello_appengine.go\nGodeps/_workspace/src/github.com/bmizerany/pat/mux.go\n. It looks like @cyberdelia has accepted your patch as of 12 hours ago. Do you install via @cyberdelia's fork or @bmizerany's original repo.\nIf gofmt takes input from stdin, we could run ls {hkdist,.}/*.go | gofmt -l instead. Using go fmt on Travis wouldn't be a problem insofar as it's run once.\nUltimately, I think testing the code that this repo has control over is more productive than letting its Travis builds fail because someone writing a dependency didn't bother to properly format his or her code.\n. I like it.\n. :+1: :dancer: :tada: :heart: :dancers: :sparkles: :fireworks: :sparkling_heart: \n. @bgentry One thing you might consider is a -q/--quiet flag which will mute this output and can be set as a default via an env var (e.g. HK_QUIET=true). git offers a -q flag which only prints out ERROR and FATAL messages.\n. Fair enough. As long as the output is very clear, it shouldn't make a difference. Any ambiguity in the output will lead to considerable confusion (the user may classify a positive outcome as a negative, or a negative outcome as a positive, as Matt Staats, Shin Hong, Moonzoo Kim, and Gregg Rothermel found in their 2012 study of user perception of invariants in output).\n. :+1: \n. :+1: \n. :+1: \n. Fixed the formatting and squashed to one commit.\n. No problem! Seemed like a low-hanging fruit I could tackle with my limited knowledge of Go. Thanks for making hk!\nUpdated.\n. Thanks, mate! :metal: \n. :heart: \n. @dominic Is this still failing?\n. :+1:\n. As a user who has adored hk, I'm :sob: to see this go. Fare thee well, ol' venerable hk! We hardly knew ye. Tonight, I raise a glass to your legacy. :beer: :wine_glass: :cocktail: \n. Interesting! I am relatively new to Go, so style nitpicks are awesome to me.\nI wish I could do this though:\ngo\nherokuGitHost := os.Getenv(\"HEROKU_GIT_HOST\")\nherokuHost := os.Getenv(\"HEROKU_HOST\")\nif herokuGitHost or herokuHost {\n    return herokuGitHost or herokuHost\n}\nbut alas, it is not valid.\n. ",
    "bgentry": "yeah, after thinking about this some more, I think this would be a convenient change. HTTP method names are case-sensitive (per RFC2616 Section 5.1.1), and curl preserves the casing provided for method names, but I don't think that matters for this specific-purpose tool.\n@jclem can you amend this commit to include a small addition to the help text for this command, mentioning that method name input is always upcased? Also please rebase on master. I'll get this merged as soon as that's done, thanks! :)\n. Merged, thanks! :v: \n. I fixed this in 506b7d7, thanks @naaman. You should clean up your hk forks ;)\n. Hi, can you give an explanation for these changes and why they are necessary? Maybe some reference links? Thanks!\n. Also, is there a reason to have separate windows/unix code paths, or could we just use os.Exec for all operating systems?\n. This was merged into another branch as e573071. Should get it into master soon. Thanks for the fix!\n. Hi,\nI'll add a CONTRIBUTING.md soon, though it would be impossible for me to enumerate the full list of things we don't want to do (such as not having multiple commands to do the same thing). I created #11 to track this.\nThanks!\n. @parkr thanks for getting this started. I don't think this covers files in subpackages though, right? At least for the time being, we still have an hkdist subpackage. Maybe just a 2nd line in the .travis.yml that runs against ./hkdist/*.go ?\n. @parkr looks like this is breaking the builds currently due to invalid yml: https://travis-ci.org/heroku/hk/builds/13267339\n. @kr not sure if you saw this PR but I know you have some thoughts on implementation details\n. Merged as 1ea85ec653fa47b53a11719b472c6d29ae07229f, thanks!\n. Thanks @mattonrails !\n. Merging this one in a bit of a rush, happy to address any feedback after the fact though.\n. Thanks @dpiddy !\n. A couple things bug me about the proposed syntax. One of them being that the X in e.g. 2X is capitalized, which makes it blend together with the number more than 2x would. The code currently accepts either form, though the examples all display a capitalized X. Maybe @max has thoughts since he was involved in the design of this for the 2X dynos project.\nThe other, as @mattsoldo pointed out, is that the : separator might not be the most legible option (nor the easiest to type). One alternative is a ,, which would look like:\n``` bash\n$ hk scale web=2 worker=5\n$ hk scale web=2,1X worker=5,2X\n$ hk scale web=2X worker=,1X\n```\nAlso, compare with lowercase x:\n``` bash\n$ hk scale web=2 worker=5\n$ hk scale web=2,1x worker=5,2x\n$ hk scale web=2x worker=,1x\n``\n. @deafbybeheading points out that showing bothhk scale web=2Xandhk scale web=,2Xmight not be the clearest way to demonstrate this.\n. Also, I'll probably want to amend this to reject scale commands where the same process type is specified more than once.\n. Funny timing as https://github.com/heroku/heroku/pull/959 happens to be getting pushed through at the same time as this PR :)\n. I cleaned up the usage as @deafbybeheading suggested, and added a check to make sure the user doesn't try to modify the same ps type twice in the same command. I'm going to merge this as-is for now since the syntax is consistent w/ heroku/heroku#959. We'll re-evaluate once it's had some usage.\n. Merged as 6ff705a, thanks @cyberdelia :v:\n. Unfortunately, theaddon-remove` command doesn't work with the documented examples:\n$ hk addon-remove heroku-postgresql:standard-tengu\nBecause the heroku-postgresql addon uses a different internal interface than other addons. You can remove these using the color config names (i.e. HEROKU_POSTGRESQL_BLUE), but there is no way in the v3 API to determine which color corresponds to which postgres addon (in the case of multiple dbs on a single app).\nAlso, the addon-add command currently requires full plan names, not just addon names. If that remains the case on the API side, we should make the client-side behavior cleaner when the user doesn't specify the plan name.\nWorking on resolving these on the API side first.\n. @markpundsack added an addon-open command. Turns out that not even the one in toolbelt supports heroku-postgresql addons, and it would be impossible to do so here due to the color issues discussed above.\n. Going to merge this in for now. Opened #29 to track the issues w/ heroku-postgresql addons.\n. This is running here now. I opted to replace our old pat router with gorilla's router since it is maintained and provided out-of-the-box support for wildcard routes. Need to fix the travis build before merging.\n. Build is broken due to travis-ci/travis-ci#1727, going to move forward with this anyway.\n. Thanks @max, I'll work on getting this auto-generated.\n. @brandur yeah I agree they're quite hard to see. @max thoughts?\n. @kr not that it really changes your recommendation, but I also plan to use these categories for help topic organization when we get to that.\nAnyway, I do see one drawback to the map-based approach.. If somebody forgets to add a command to the help map, it won't show up in the styleguide. As it's currently written, it would just show up with an empty category header, which would make it more clear that it needs a category added.\n. can you change the target branch for this to master? the diff should be smaller now :)\n. I was afraid not, though maybe there's a way to do that with the API..\n. /cc @max\n. Making great progress closing the diff on this.\n. @max @jclem re: the \"nobody says 'check the log'\", Google disagrees overwhelmingly:\n\n\n. @jclem what's a better source if you discount both Google and the dictionary? Trends shows that \"log\" is much more popular even within programming searches.\n. We're considering this pass of design review to be completed. Going to close this issue as it was merely a place to track that work.\n. @kr so I'd stick with the NeedsApp field on the Command struct and just have main() add the flag to commands that need it?\nIf that's what you mean, I think I like that approach... It's cleaner than the per-command app flags in #39.\n. @kr updated with that change. I like it, and it works great for builtin commands.\nHowever, the flag does not get parsed for plugins, and I think we still end up with the same problems trying to make that work. Maybe that's ok. We can provide that as part of the plugin frameworks that we've talked about building to make plugin development easier.\n. @kr after comparing what this looked like before 7bb0a6b8e4a26782f76344ea04d535c8533ac970, I agree, so I backed it out.\nAlso added c7ae924 to properly show usage w/ the app flag.\n. I'm happy enough with where this is at now. Going to :shipit:, and as always, we'll continue to iterate :)\n. #38 is merged so this is not needed.\n. Went ahead and brought this in now as I'm ok with the current implementation. Thanks @tt :v: :tada:\n. It felt ok when I was implementing it.. I'm still not sure on the implications with orgs, though. I'd like to talk those through before merging this just to make sure there aren't any major gotchas that will be hard to fit with this style.\n. /cc @markpundsack \n. @kr it's been a pretty common point of confusion so far that it's unclear whether some commands actually did anything. Tools like git have trained users to expect output from basically any command they run (though less common tools like hg have stayed truer to unix design here). And since ~100% of Heroku's users are git users, breaking that expectation would not be easy.\nI'm sympathetic to the notion that some commands shouldn't produce extraneous output. The create command is a clear example to me. But commands like addon-add have multiple pieces of relevant information to return, such as app name, addon name, and addon plan (which could have been defaulted to). See #46 for more on that. I'm not sure there's a consistent design principle that would satisfy all of our commands.\nIt's made worse in hk by the nature of the -a flag and the fact that, due to git remotes, it's not always clear what app the command ran on. That's especially true with commands that take free-form arguments like run. Maybe that brings us back to discussing whether that argument should be quoted ala su -c \"command\".\nI just don't think we can ignore these issues and pretend that they won't confuse many (most?) of Heroku's users.\nI also do understand the concern from the perspective of advanced users who know what they're doing, and want the tool to behave in a more \"unix-y\" fashion. The best compromise I can think of is a settings file ala .gitconfig that lets you enable a \"unix mode\". That doesn't feel great to me though :neutral_face: I suspect you'll feel the same due to your distaste for options and configs.\nThoughts? /cc @max \n. @kr I am certainly sympathetic to your argument, especially this part:\n\nI certainly understand that people are accustomed to the heroku gem, and hk is different, and that's important to respect at least in the short term. I'm just a little sad to see long term repeat usability being sacrificed to clear up short term confusion.\n\nI just think the hurdle is too high with respect to our users' expectations, and especially with the ambiguity that -a and git remotes introduce.\nUltimately it may be the case that we can't satisfy all of Heroku's users with a single style. What do you think of @parkr's proposal of a \"quiet mode\" which may in effect be a \"unix mode\"?\n. @kr I certainly wouldn't want it to be required for every command, but possibly as an env or config that can persist between runs.\n. If you google for the paper's title, you'll find some copies of it. I skimmed through it and had a hard time finding any concrete recommendations for our situation.\nOn Thu, Dec 19, 2013 at 12:19 AM, Keith Rarick notifications@github.com\nwrote:\n\nThat paper does not appear to be publicly available, but the\nabstract seems to be about users in an extremely narrow\nand specialized domain. Is it really applicable here?\nReply to this email directly or view it on GitHub:\nhttps://github.com/heroku/hk/pull/45#issuecomment-30911975\n. Specifically, can you elaborate on the mismatch you perceive?\n\nDid you follow the discussions around this problem last week and understand why such a change was necessary?\nOn Wed, Dec 18, 2013 at 10:16 AM, Brandur notifications@github.com\nwrote:\n\n@markpundsack Any thoughts on how we can improve that? I think it adds\nvalue if only in the way that addons now behave consistently with other\ntypes of objects in that they can be addressed by both an ID and a name.\nOn Wed, Dec 18, 2013 at 09:51:47AM -0800, Mark Pundsack wrote:\n\nGreat to support those names, but I gotta say, the output there doesn't seem great to me. The name doesn't add any obvious value to me since it's redundant with the middle column, and it's still not clear that I have to use the name when referring to it. As a user, this doesn't match my mental model.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/heroku/hk/pull/46#issuecomment-30863963\nReply to this email directly or view it on GitHub:\nhttps://github.com/heroku/hk/pull/46#issuecomment-30866034\n. Updated to use the addon's created_at rather than updated_at. Also updated the example text now that the name migration has completed.\n. > This does have the nice benefit that when I list the add-ons, I can then copy and paste the name of the add-on into the remove command. I hated when that didn't work with the toolbelt and you had to manually strip the _URL suffix.\n\n\nThat's the benefit that consistency gives you here. As I said, it's a change, but I think it moves us slightly in the right direction for now.\n\nHow do deployhooks look?\n\n\u279c  ./hk addons -a myapp\nheroku-postgresql-copper  heroku-postgresql:ika  Oct 28  2012\nheroku-postgresql-ivory   heroku-postgresql:ika  Sep 10  2012\nheroku-postgresql-silver  heroku-postgresql:ika  Sep 11  2012\nairbrake                  airbrake:production    May  2 13:14\ndeployhooks               deployhooks:http       Apr 11 15:25\ndyno-analyzer             dyno-analyzer:test     Oct 25 17:22\nlibrato                   librato:gold-60        Oct  3 11:32\nmemcachier                memcachier:10000       Mar 25 12:03\nnewrelic                  newrelic:parker        Nov  1 16:16\npapertrail                papertrail:fredrik     Dec  3 08:47\npgbackups                 pgbackups:auto-month   Sep 10  2012\nscheduler                 scheduler:standard     Mar  5 13:17\nSo deployhooks are broken here, but I believe that is a known issue being tracked somewhere. @brandur can confirm that.\n. Bringing this in for now since it at least allows you to interact with attachable addons like heroku-postgresql, which is broken on the current release of hk (#29).\nWould love to continue this discussion if there are any concrete suggestions for improving the experience in light of the constraints we face w/ regular and attachable addons.\nWe will of course continue to track fixes to things like deployhooks which do not yet work with named addons.\n. @jkakar oh hell yes! I'm not a bash user anymore (enjoying zsh :) but perhaps somebody else who is can weigh in on this? Maybe give it some testing? Even better, record a short video clip / gif of this in action? :smiley: \n. Sorry for the delay on merging this, thought I had already. Thanks! :v:\n. Thanks @dpiddy, merged as 52b474103a2c592da9e7559ccfa52dcfd77b3ab2 and 7c902b2d90b11cb35baa0d728f1fc6c2cc09671c\n. One thing I wasn't sure about here was the naming, and whether we should use enable/disable vs on/off. After feedback from @markpundsack and @raulb, I opted for enable/disable in the command names, and also in the output of hk maintenance.\nHowever, the toolbelt returns on/off from this command even though the commands to toggle maintenance mode are enable/disable:\n\u279c  ~  heroku maintenance -a hkdist\noff\nThis feels inconsistent to me and I'd like to stick with the same word pairs everywhere they apply.\n. @max and I discussed on Slack.. These are called \"app features\" and \"account features\" in API v3, which is what I'd like to stick with here. There's also some talk about having a feature toggle mechanism that's not solely for experimental features, and sticking with the more general \"features\" name will allow for more flexibility if/when we want to have features that are not considered experimental.\nOther than that we agreed that I should :shipit:\n. /cc @max \n. @max oh, I didn't end up adding linebreaks or special indentation of any kind yet. Did you have a preference based on the samples we put together in #54?\n. Sorry to waste time on the indentation issue, but now that I have a better understanding of what it'd take to implement this.. IMO, the complexity to implement the indentation & line break behavior with the ANSI colorized output we've chosen is not worth the engineering cost.\nIn the event that an error or warning is longer than $COLUMNS, it will simply wrap as shown:\n\nI think this is good enough for now and not worth the hours and dozens of lines of code it will take to produce the format from our final design. If we decide this is important enough in the future, we can easily come back to this issue and reference our earlier design discussions.\nGonna go ahead and ship this as-is.\n. Nice, will check this out first thing tomorrow. Thanks for taking care of this.\nOn Wed, Jan 15, 2014 at 8:58 PM, Parker Moore notifications@github.com\nwrote:\n\n:+1:\nReply to this email directly or view it on GitHub:\nhttps://github.com/heroku/hk/pull/59#issuecomment-32442501\n. thanks :v:\n. Added the color -> heroku-postgresql-color translation and styleguide update.\n\nAlso: hello, speed:\n$   ./hk pg-info -a hkdist crimson  0.06s user 0.01s system  7% cpu 1.054 total\n$ heroku pg:info -a hkdist crimson  0.47s user 0.07s system 20% cpu 2.694 total\n. Here's what this looks like now:\n$ hk pg-info crimson\nName:         heroku-postgresql-crimson\nEnv Vars:     DATABASE_URL, HEROKU_POSTGRESQL_CRIMSON_URL\nPlan:         Crane\nStatus:       Available\nData Size:    6.3 MB\nTables:       3\nPG Version:   9.1.11\nConnections:  5\nFork/Follow:  Available\nRollback:     Unsupported\nCreated:      2013-11-19 20:40 UTC\nFollowers:    none\nForks:        heroku-postgresql-copper\nMaintenance:  not required\nI think we're good to go for now :hammer:\n. Merged.\nI also added a log-drain-info command for detailed info, and removed the token display from the log-drains command. Let me know what you think about that stuff, I'm very open to changing it.\nThanks @dpiddy :v:\n. Sweet, it actually already takes STDIN:\n```\n\u279c  hk git:(pg) \u2717 echo \"SELECT 1;\" | ./hk pg-psql -a hkdist\n ?column? \n\n    1\n\n(1 row)\n```\n. It's quite a bit faster, too:\nheroku pg:psql -a hkdist  0.46s user 0.08s system 20% cpu 2.595 total\n  ./hk pg-psql -a hkdist  0.07s user 0.02s system  6% cpu 1.383 total\n. Gonna go ahead and ship this now. The refactoring will happen when I add another command that shares this functionality.\n. Might not be a bad name. To be honest I didn't even think twice about the name for this command, was just excited to make it real. I will definitely think hard about it :)\nOn Fri, Jan 17, 2014 at 11:52 PM, Keith Rarick notifications@github.com\nwrote:\n\nAwesome! I will use this every day.\n(I sort of wish it were called hk psql, but that's just me.)\nReply to this email directly or view it on GitHub:\nhttps://github.com/heroku/hk/pull/64#issuecomment-32676862\n. Hmm, should this be replaced with godep get instead?\n\n```\n\u279c  ~  godep help get\nUsage: godep get [packages]\nGet downloads to GOPATH the packages named by the import paths, and installs\nthem with the dependencies specified in their Godeps files.\nIf any of the packages do not have Godeps files, those are installed\nas if by go get.\nFor more about specifying packages, see 'go help packages'.\n```\n. @kr I've had issues like @catsby described after updating a dependency in my project.\nI still wouldn't recommend godep go install for this part of the readme because it will install a dev binary that will never get updated. I've been doing local builds with godep go build just to drop a bin in my hk dir so I can still have the proper  release installed w/ no conflicts.\n. Thanks @brandur, squashed and merged as d77415a.\n. @kr awesome! I wonder if this functionality can/should be extended to things other than command names in the future.\n@hgmnz This doesn't really handle \"translation\" unless the command names are very similar. For example:\n\u2717 ./hk list\nUnknown command: list\nPossible alternatives: set unset log get\nRun 'hk help' for usage.\nThe analogous command in hk is apps, which doesn't get suggested. And in general the suggestions are a bit strange for short command names:\n\u279c ./hk app\nUnknown command: app\nPossible alternatives: api apps env run log\nRun 'hk help' for usage.\nBut I think this is a definite improvement over the current state, so I'm going to move forward with merging it. I do still think there is a whole bucket of discoverability and transitioning issues to tackle in the future.\n. Merged as 750215e32ade64a3faa1765a3d5f4411d6e5f422 and 79f3e56f5342ecd8a5b1d4a4fe87fbaf89b6861b, thanks @kr!\n. Hi @mattn,\nSo as I discovered yesterday, it turns out that we can't use user.Current().HomeDir with cross-compiling, which is currently how hk binaries are distributed. See 7882c4e for more info on that. Instead you'd have to use homePath(), which was refactored slightly in #77.\nBut now I'm wondering whether this needs to be so complicated. It seems confusing that the default plugin dir could be:\n1. $HKPATH\n2. /usr/local/lib/hk/plugin\n3. ~/.hk/plugins\nUsing homePath() would get rid of the other option, which is the error case where you default to a plugin dir of ./.hk/plugins.\nI'm not sure why both 2 and 3 need to be options. Shouldn't we decide on one option and stick with it?\nWe'd also need to consider Windows in this decision and make sure that there's a default that works well in Windows too. It looks like the Toolbelt uses the same path on all platforms, specifically ~/.heroku/plugins.\nI'm ok with having different default locations for Windows and Unix systems if it makes sense, but I'm hesitant to have multiple default options on a single platform.\nI should also add, the plugin system is very likely to undergo substantial change in the future (before a wide release) so I'd prefer to just keep the existing system as simple as possible until we're ready to make changes.\n. Looks good to me.\nHow do you feel about the understandability of this style of code? Breaking it out into platform-specific files instead of switching on runtime.GOOS ? My first reaction is that it's slightly harder to follow this sort of code.\n. Thanks @dpiddy :v:\n. @kr mentioned this on #78, but.. What do you think about removing these from the commands slice altogether? Then their implementation would be entirely confined to help.go, and you wouldn't need to denote whether they were Runnable or not\n. Merged as d0685fe, thanks @kr :v:\n. Ah, very interesting. I will chat this over with him then :)\nWhen looking at heroku keys and its sub commands, I definitely felt weird about it. Mostly because I wasn't sure how to reference the keys to remove them.\nOn Thu, Jan 23, 2014 at 7:21 PM, Keith Rarick notifications@github.com\nwrote:\n\nLong ago, @max and I talked about this and vaguely\nconcluded that listing and removing ssh keys in the CLI\nis more awkward than useful, and we would just leave it\nto dashboard, with hk only adding keys.\nNot trying to suggest that's still the right answer, just\nwanted to give a bit of historical context.\nReply to this email directly or view it on GitHub:\nhttps://github.com/heroku/hk/pull/81#issuecomment-33194335\n. I talked this over with @max. We agree that the experience of removing keys in hk is not ideal, but neither is the one in dashboard :) We also feel that seeing a fuller set of commands helps inform our design decisions and see where the cracks emerge. Also, the ability to automate this stuff in the CLI strikes me as important enough to include it for now.\n\nIf it ends up being confusing and used much less often than the same functionality in Dashboard, I'm very open to removing it.\n. One thing I'd like to add before shipping this is the ability to note with auth errors that the user should use heroku login to fix those.\n. Shipping this now. I'll be more than happy to address any feedback afterward though!\n. I forgot about that feature actually :)\nYou should be able to provide a full URL already (check out the tests I added). But I may also think about supporting the app:dbname syntax for cross-app followers.\nI think something like that exists in the toolbelt? /cc @fdr\nOn Fri, Feb 7, 2014 at 6:08 AM, Clint notifications@github.com wrote:\n\nCross-application following and forking is done by supplying the full postgres:// url, will that be supported here?\nReply to this email directly or view it on GitHub:\nhttps://github.com/heroku/hk/pull/96#issuecomment-34438968\n. I'll need to verify that the pq changes don't break anything in hkdist. As we discussed yesterday, I'll also want to move the client-related tests (such as env var settings) into a test file in the hkclient subpackage.\n. @fdr I think the big thing I was wanting out of this was to move the client-related tests (such as env var settings) into a test file in the hkclient subpackage rather than keeping them in main_test.go or util_test.go.\n\nI think you also discussed doing something with HKUSER and HKPASS env vars in the credential setup stuff so this package would work cleanly for both hk and its plugins.\n. @fdr I would love to pull this in if you'd make those last changes to move client-related tests to the hkclient subpackage.\n. Oh, and also rebase since there are probably some conflicts at this point =/\n. @fdr I'm trying to test this out so I can make the test changes myself (rather than let this rot again). I ran into an issue in staging that I'm not sure is related. I emailed you about that, so please lmk if you think it's something else.\nOtherwise it appears to be working fine for me.\n. @fdr resent, sorry, I lumped it in with another thread before\n. @fdr ugh, no, I hadn't actually tried the same thing with the existing version. Same thing happens, so it's not a regression in this PR. I'll move forward with merging this in today after I move the tests around.\n. @fdr on second thought, I'm ok with how the tests are laid out. The stuff in hkcilent/creds is \"untested\" directly, but it's covered by the stuff in util_test.go, which is required for testing of non-hkclient code. So the way it is now gives us some coverage over both aspects without having to duplicate a bunch of tests.\nMerging as-is, thanks again!\n. merged as 44cc64f :v:\n. This now uses term.IsTerminal() to determine whether or not to output a prompt for the user.\n. I also added confirmation on addon-remove since it is also destructive and irreversible.\nRelated: I think we should consider naming this command addon-destroy instead of addon-remove since it has similar destructive properties to destroy. I opened #102 for this.\n. @parkr thanks so much for taking care of this. I added one very minor style nitpick, so if you can fix that and squash again, I'll merge this in.\nThanks! :v:\n. Thanks, merged as 25f220c502988dc5ed56e9384b22b2ff7ccde36d\n. @fdr if you want to try out a staging build of hk that has this functionality included:\nbash\nL=/usr/local/bin/hks && curl -sL -A \"`uname -sp`\" https://hkdist-staging.herokuapp.com/hkstaging.gz | zcat >$L && chmod +x $L\n. > FWIW, this change would make my life worse.\n@kr how?\n. bash\n$ hk run bash -a myapp\nerror: ambiguous -a flag provided\nThat didn't actually work before these commits, so this change is not actually taking it away.\n\nif you would\u00a0just use the flag package as intended, there would be no confusion.\n\nUnfortunately, based on the amount of feedback I've gotten around the inflexibility of hk's opt parsing, that's not the case. There are a lot of people that have been trained by the flexibility of getopt, such as you find in the Toolbelt.\nI'm not convinced that our users will be quick to adapt to strict option ordering.\n. @kr this hasn't been illustrated yet, but here is the most dangerous thing about the current implementation. Running from a dir where my-prod-app is your git default:\n$ hk run rake destroy-all-my-data -a my-app-staging\nRunning `rake destroy-all-my-data -a my-app-staging` on my-app-prod...\nI don't want it to be so straightforward to accidentally fuck up your production environment.\n. wow, github's inability to properly format markdown sent via email is crazy. Even editing after the fact won't make it render correctly.\n. @kr after thinking about this more, and ignoring the obvious bugs with this approach (such as -f=val not working), I do agree that this PR is a special-case hack and don't wish to proceed with it as-is.\n@tt I still don't think a global -a flag is a better option. The app flag really isn't a global option (it doesn't apply to all commands), so treating it like one doesn't really make sense. I also don't believe that ordering will be better or less confusing for the common user.\nIMO it seems like the three real options are:\n1. Change nothing\n2. Switch to a more flexible getopt-style flag parsing for all flags & args\nOption (1) would keep the simple, yet strict, hk command [flags] [args] ordering.\nOption (2) would allow flags and args to be specified in basically any order after the command name, which afaik is how the Toolbelt does it today.\nWith either option, I'm still concerned about the confusing nature of the run command and the potential for accidentally running a dangerous command against the wrong app without even realizing what you've done. Anybody have thoughts on how that could be addressed?\n@kr I understand your desire to mimic the ssh command, but there are other common idioms for passing in commands to be run verbatim: su with its -c 'command' syntax, and other tools that use -- to provide remaining args as-is. Why is the ssh form the only one you see working for this case?\n. @fdr if you want to try it out with a -a being allowed at the front, you can use this zsh snippet that @tt uses:\nbash\n    hk() {\n        (\n            if test \"$1\" = \"-a\" -o \"$1\" = \"--app\"; then\n                export HKAPP=$2\n                shift 2\n            fi\n            command hk $@\n        )\n    }\n. I'm hoping #129 will take care of the underlying issue here. Closing this PR.\n. I also just realized that the changes I made to the DBInfo and InfoEntryList structs have broken the ordering of the info list in pg-info responses, so I'll need to fix that.\n. Any thoughts on which layout is preferred to indicate which database is attached to DATABASE_URL ?\n\u279c hk pg-list  \nheroku-postgresql-green              standard-tengu  Available  3\nheroku-postgresql-olive*             standard-tengu  Available  3\n\u251c\u2500\u2500\u2500> heroku-postgresql-gray         standard-tengu  Available  3\n\u251c\u2500\u2500\u2500> heroku-postgresql-orange       standard-tengu  Available  3\n\u251c\u2500 \u2500\u2524 heroku-postgresql-rose         standard-tengu  Available  3\n\u2502     \u2514\u2500\u2500\u2500> heroku-postgresql-white  standard-tengu  Available  3\n\u2514\u2500 \u2500\u2524 heroku-postgresql-teal         standard-tengu  Available  3\n\u279c  hk pg-list\n  heroku-postgresql-green              standard-tengu  Available  3\n* heroku-postgresql-olive              standard-tengu  Available  3\n  \u251c\u2500\u2500\u2500> heroku-postgresql-gray         standard-tengu  Available  3\n  \u251c\u2500\u2500\u2500> heroku-postgresql-orange       standard-tengu  Available  3\n  \u251c\u2500 \u2500\u2524 heroku-postgresql-rose         standard-tengu  Available  3\n  \u2502     \u2514\u2500\u2500\u2500> heroku-postgresql-white  standard-tengu  Available  3\n  \u2514\u2500 \u2500\u2524 heroku-postgresql-teal         standard-tengu  Available  3\n. I'm opting for the 2nd form, with indentation or an asterisk for the db corresponding to DATABASE_URL.\nGoing to go ahead and ship this.\n. Merging this in. It's still a WIP so I'm looking forward to improving it more soon.\n. As far as I know, there is no straightforward way to auto-update a completion script. The user can place the script anywhere in their $fpath and it would be very unconventional to attempt to find and update that file from hk.\nIf it were packaged as an oh-my-zsh plugin, it would get auto updating for free. However, that requires that users install those ZSH extensions.\nThe other approach that might make sense in the long run is to lean on hk itself for completion. Npm does completion this way by always calling out to npm to get completion results. It has the benefit that the completion script only needs to be a simple shell wrapper that never needs updating, and the completion stays up-to-date with the executable.\nDo you have any better ideas to solve this issue? Even if we lean on oh-my-zsh, that leaves bash users out in the cold. This completion is already quite a bit more powerful than what we've got for bash because of its reliance on awesome zsh-specific features like completion caching.\nAt some point we may be able to cache responses at the hk level, which would let us lean on the binary for that instead. Might be a while away though.\n. Auto-completion of addon services and plans in action:\n\n\nNone of this will be usable until I ship this PR, though.\n/cc @will \n. I'm going to go ahead and ship this so folks can get addon completion. Happy to adjust the design after.\n. Released in v20140307.1\n. Thanks! I merged this and then added completion for the other options that command as well\n\n\n. merged, thanks for the :+1: \n. @markpundsack it does not come from the API. It shows locally IFF you're running the command from the directory where your git repo is. The commit SHA hashes are matched against local git tags.\nSo I don't think you can do this in Dashboard, unless maybe they've linked their Github repo.\n. @neilmiddleton did you also have to add some other stuff to your zshrc for completion to work? Such as:\n``` shell\nLoad and run compinit\nautoload -U compinit\ncompinit -i -d \"${ZSH_COMPDUMP}\"\n```\nor:\n```\nUse caching so that commands like apt and dpkg complete are useable\nzstyle ':completion::complete:' use-cache 1\nzstyle ':completion::complete:' cache-path $ZSH/cache/\n```\nThe above is included by default with oh-my-zsh.\n. I rebased and merged this as f4c32aee03575e53484f6ad8663b64ab0571eaf1. I also added some notes about compinit and caching setup. Thanks! :v:\n. Thanks @esebastian. At a glance, the code looks good. I'm just not certain that we want to continue to support this functionality in the future, so I'll need to have some discussions with our product folks.\n. @esebastian I had actually merged this as 3b3667c, but shortly thereafter I realized that I misunderstood what this was doing. I thought it was a fix to make hk compatible with the sorts of hosts used by heroku-accounts. However, it looks like that plugin works via a heroku.account setting.\nI've gone ahead and reverted this commit. Thank you for submitting it, though! The code definitely looked great, it's just a feature I don't think we need right now :v:\n. @kr Based on feedback we've received, I do in fact think the interspersed args are a requirement at this point.\n\nOne question, what is the behavior of this:\n$ hk run ls -a myapp /\ngiven that myapp is an app I have access to?\n\nas-is, that particular case will attempt to run ls / on the app myapp. I always disliked that surprising behavior of the ruby CLI and I've treated that as a huge issue so far, but I'm starting to think I've worried too much about it as it probably doesn't cause much actual pain (only being felt by a few users). That said, of course I'd like to avoid it if the solution isn't too difficult or confusing.\nThe one alternative I've thought of is to disallow interspersed args on only the run command. It feels like a hack and obviously introduces some inconsistency, but at least it's confined to a single command that has a good reason to be different IMO.\nThat would make hk run bash -a myapp not work, but would cleanly handle the case you've asked about (resulting in running ls -a myapp / on whatever the default git remote is).\n. @max do you think the forced quoting option is preferable to just not allowing interspersed flags and non-flag args on the run command? That seems like a simpler and clearer solution overall, since users could still attempt to run hk run -- bash -a myapp with the proposal you've shown. The dashes don't really prevent them from making the same kind of mistake.\n. We're talking past each other.\n\nRequiring one and only one argument for run is easy to understand.\n\nMaybe? It's also very unconventional and I think it's more complicated than necessary.\n\nI don't specifically want interspersed arguments, but I do want to be able to put arguments at the end.\n\nI'm not exactly sure what you mean by you \"want to be able to put arguments at the end.\" This PR gives you interspersed arguments on all commands. You can of course put arguments at the end too, that has always been allowed.\n\nBeing able to pluck -a APP out of the middle of run command is NOT a feature.\n\nStrongly agree, which is why I said \"I always disliked that surprising behavior of the ruby CLI and I've treated that as a huge issue so far\"..\n\nWith the example you mention, hk run -- bash -a myapp, everything after the -- should be passed to run. That's the whole point.\n\nYou can already run the command as shown above with --, and everything after the -- would be taken as the command to run. With this PR, you can still do that. The -a app would only be pulled out if it came before the -- (or there was no -- at all).\nWhat I'm proposing is that we simply disallow interspersed arguments on the run command. I think it gives you basically all the benefits of the \"forced quotes\" or \"-- required solutions, but without the pain of forcing the user to type extra stuff.\nTo avoid any more confusion on how that would work, here are a ton of examples:\n``\n$ hk run -a myapp bash                  # runsbash` on myapp\n$ hk run -a myapp -- bash               # same as above\n$ hk run -a myapp \"bash\"                # same as above, quotes are removed by the shell\n$ hk run -a myapp -- \"bash\"             # same as above, quotes are removed by the shell\n$ hk run bash                           # runs bash on whatever the default git remote is\n$ hk run -- bash                        # same as above\n$ hk run \"bash\"                         # same as above\n$ hk run ls -a myapp                    # runs ls -a myapp on whatever the default git remote is\n                                        # because we stop parsing flags after the first non-flag arg (ls)\n$ hk run -- ls -a myapp                 # same as above\n$ hk run \"ls -a myapp\"                  # same as above\n$ hk run -a myapp ls -a bin             # runs ls -a bin on myapp\n$ hk run -a myapp -- ls -a bin          # same as above\n$ hk run -a myapp \"ls -a bin\"           # same as above\n$ hk run -a myapp -- \"ls -a bin\"        # same as above\n$ hk run rake db:migrate                # runs rake db:migrate on the default git remote\n$ hk run -- rake db:migrate             # same as above\n$ hk run \"rake db:migrate\"              # same as above\n$ hk run -- \"rake db:migrate\"           # same as above\n$ hk run -a myapp rake db:migrate       # runs rake db:migrate on myapp\n$ hk run -a myapp -- rake db:migrate    # same as above\n$ hk run -a myapp \"rake db:migrate\"     # same as above\n$ hk run -a myapp -- \"rake db:migrate\"  # same as above\n```\nNote that I'm not doing anything special to enable this. The behavior of -- and quoted arguments is how all flag parsers already work. In the case of quoted arguments, it's the shell that removes the quoting so that the app never even sees it.\nAll I would do to make this work is disallow interspersed arguments on the run command, meaning as soon as it encounters an argument that's not part of a flag (i.e. ls or bash above), it stops parsing flags and passes the remainder in untouched (save for unquoting) to the app.\nDoes that make sense and seem like a reasonable solution?\nOtherwise I end up implementing an even more specialized hack, such as forcing people to always use -- (I can't actually enforce quotes). I don't see a benefit to doing that, only negatives.\n. In the interest of testing this with actual users and not spending any more time debating about this in a vacuum, I'm going to ship this PR as-is. It does have the surprising magical flag parsing behavior, which sucks, but I've documented that case.\nIt at least allows you to do the type of quoting you desire, and it's consistent with other commands (as much as that might suck here). It's also by far the simplest & cleanest implementation of any of the proposals since it's just using standard flag parsing.\nOf course I'm happy to revisit this if we get some better data on the actual pain this is causing users.\nEither way I can't justify waiting any longer to get this net improvement out to customers.\n. Merged as f1f2e4e, thanks for catching this.\n. Bleh, thanks @fdr!\n. @max yeah, I thought of addon-change-plan or addon-plan-change, but they didn't feel as nice to me (too verbose). Happy to switch this back if you'd prefer one of those or have a better/more concise idea.\n. @max ugh, yeah, that's not great. The fact that addon plans are only presented as service:plan is makes dealing with them a bit annoying.\nWould you prefer that I change the output, or instead change the input to something like:\nhk addon-update newrelic:gold\nhk addon-update heroku-postgresql-blue:kappa\nThat feels weird too, unfortunately =/\n. Yeah, we list them like that because that's the format that API v3 uses: https://devcenter.heroku.com/articles/platform-api-reference#add-on-create-response-example\n\u279c  ~  hk addons -a bgfaketestapp \nheroku-postgresql-cobalt  heroku-postgresql:crane      Mar 25 17:02\nheroku-postgresql-onyx    heroku-postgresql:ronin      Mar 28 17:45\nheroku-postgresql-silver  heroku-postgresql:ronin      Mar 28 17:46\nheroku-postgresql-yellow  heroku-postgresql:hobby-dev  Mar 25 17:03\nredistogo                 redistogo:small              Apr  2 14:52\nssl-endpoint              ssl:endpoint                 Apr  2 16:20\n. Updated this to addon-plan-change, now looks like this:\n$ hk addon-plan-change redistogo small\nChanged redistogo plan to small on myapp.\n. I don't think it's nicer to have two different commands (addon-upgrade and addon-downgrade) when they do exactly the same thing under the hood. You could use addon-upgrade to downgrade to a lower plan, and vice versa.\nThat's just unnecessarily increased surface area.\n. > On single command vs two commands, I think @max should probably make the call. I also agree with his earlier comment that implementation similarity has little to do with our users' conceptual model.\nI'm not sure the upgrade/downgrade is a better fit for our users' mental models than \"change plan\". Are plan changes always strictly an \"upgrade\" or a \"downgrade\"? What if you move to a plan that's not clearly up or down from your current plan?\n. Also, is there any kind of action a user might take on an addon that would conceptually feel like an \"upgrade\" or \"downgrade\", yet not require a plan change?\n. @max came up with the idea to call this simply addon-plan. Decided to go with that, will reevaluate if it turns out to be confusing.\n. Ugh, an unfortunate oversight. This was brought in with #97. /cc @fdr\nThanks for the fix @koron! :v:\n. Updated, renamed both the add and rollback commands to be consistent with other hk command names:\n```\n\u279c  ~ hk ssl\nHostname:        akita-1234.herokussl.com\nCommon Name(s):  bgentry.io, www.bgentry.io\nExpires:         2016-01-02T23:59:59Z\n\u279c  ~ hk ssl-cert-add cert.pem key.pem\nAdded cert for myapp at miyagi-7234.herokussl.com.\n\u279c  ~ hk ssl-destroy\nwarning: This will destroy the SSL endpoint on myapp. Please type \"myapp\" to continue:\n\nmyapp\nDestroyed SSL endpoint on myapp.\n\n\u279c  ~ hk ssl-cert-rollback\nRolled back cert for myapp.\n``\n. @brandur I don't likessl-addoverssl-cert-add. I played around with that while building this, but it doesn't feel right to me because of what's happening under the hood. You're not adding SSL, you're adding an SSL cert. Same thing w/ rollback IMO.\n. @brandur onssl-destroy, yeah, you are actually removing SSL from your app. I guess in thessl-add` scenario, it's confusing because it may add SSL to your app (if you don't have it yet). Otherwise it just updates the cert on your existing endpoint.\nI guess I don't really have a strong preference either way. I dislike all of the options because I dislike the entire flow, but you know that already :)\n. @max something else that needs to be considered here. History tells us that we will probably change SSL solutions at least a few more times. Is this design flexible enough accommodate a new SSL solution (along with a transition from the existing solution), or will we end up needing a new command space?\n. > Every time I hear the phrase: \"because that's much closer to what happens under the hood\" I cringe. A user couldn't care less about what happens under the hood.\nThat's a fair point, but I actually misspoke in this case. It's not closer to what's happening under the hood; it's closer to what the user is doing. They are adding a cert, and they have to specify the file for the cert they're adding when they run this command. Naming the commands in a way that makes this obvious feels like good UX.\nWith this command, you may or may not be getting SSL added (depending on whether you already have it). It's confusing to me to suggest that I'm \"adding SSL\" when I already have it. In fact, all apps come with free piggyback SSL, so the command is really always confusing.\nWhat you're adding is SSL with a custom cert, or a new custom cert to your existing SSL.\n. :v:\n. We switched away from os/user because it doesn't work with cross-compiling,\nwhich is currently the way hk is built and distributed.\nWe won't be able to switch back until we've overhauled our build\ninfrastructure.\nOn Saturday, April 5, 2014, MURAOKA Taro notifications@github.com wrote:\n\nAs I reported in #140 https://github.com/heroku/hk/pull/140, homePath()is not perfect for Windows (+MSYS).\nAnd old issue #7 https://github.com/heroku/hk/issues/7 and 2e314c6https://github.com/heroku/hk/commit/2e314c66c2c084dc8a110119cccea40f04077c11had solved it by using\nos/user package.\nBut those changes are lost imperceptibly.\nThis pull request uses os/user again to determine homePath.\nYou can merge this Pull Request by running\ngit pull https://github.com/koron/hk windows-home-2\nOr view, comment on, or merge it at:\nhttps://github.com/heroku/hk/pull/141\nCommit Summary\n- use os/user to determine home directory on Windows\nFile Changes\n- M hkclient/windows.gohttps://github.com/heroku/hk/pull/141/files#diff-0(13)\n- M windows.go https://github.com/heroku/hk/pull/141/files#diff-1(10)\nPatch Links:\n- https://github.com/heroku/hk/pull/141.patch\n- https://github.com/heroku/hk/pull/141.diff\n\nReply to this email directly or view it on GitHubhttps://github.com/heroku/hk/pull/141\n.\n. @koron you are correct in that cgo is not used for Windows for user.Current(). It appears to be used for all unix systems, while plan9 and Windows do not require cgo: http://golang.org/src/pkg/os/user/lookup_unix.go\n\nIf you'd like to submit this as a PR that makes the change only for Windows users, that seems like a good change to me.\n. Oh, heh, it looks like you've already done that here. In that case this change looks good to me.\nAt a glance I'm not sure why we have the homePath() logic duplicated between hk and hk/hkclient, so I'll try to clean that up after merging this PR.\n. @max right now the main criteria for a usage error is when the user provides the wrong number of arguments.\nYou raise an interesting point, that usage examples are important for inexperienced users. Yet another divide on what's good for new vs. experienced users.\nThat being said, new users can always view usage examples by running hk help <cmdname>. Maybe it's better to teach them how to find help when they need it? The alternative is to always tell them things that might be unnecessary.\n. I think this is good enough as-is. We are of course designing hk api to work specifically with the Heroku API, so it's ok if we adopt its conventions rather than trying to support more generic HTTP usage. And I think the whitelist/blacklist distinction doesn't really matter in this case. Going to flatten these and merge.\n. Merged as ab6e5ad, thanks @dpiddy :v:\n. Thanks @cyberdelia! I need to get go vet into my workflow, maybe as part of a git hook and in .travis.yml :)\n. @kr awesome, I had no idea that existed but it's quite handy. Updated, thanks!\n. Thanks! I added the rest of the flags while I was at it:\n\nCouldn't find any other potential sources while I was at it but I think I'm happier having an incomplete list than no list.\n. the method issue should be resolved by the new heroku-go in 76cc036\n. thanks! :v:\n. huh, alright. IIRC the entire point of these APIs was that they would return the same serialization whether or not the app was in an org. There may be other assumptions like that baked in, so I can't say for sure whether this will break stuff.\n. Cool, that's more than I've done at this point, so go for it :beers:\n. Just ran into this issue today. Any reason not to merge this?\n. @kr what's the deal w/ the \"Comment\": \"null-9\" bit?\n. Want to be able to distinguish these errors when we're collecting update logs.\n. No, there's not enough info in the error to say whether the hash mismatch came from the initial diff-based update, or the full binary update. That's the bit I want to distinguish between.\nSuppose I want to store this on a web service in a somewhat structured form, indicating what kind of error happened, and at what part of the update process it occurred. Should I create a custom error struct that holds the details I need?\n. Feel free to add the fix to existing code as a separate commit. I will take a look at merging this tomorrow once those changes are made. Thanks!\nOn Sun, Dec 1, 2013 at 10:14 PM, Timoth\u00e9e Peignier\nnotifications@github.com wrote:\n\n\n@@ -230,6 +231,14 @@ func app() (string, error) {\n     return gitRemoteApp, nil\n }\n+func remoteFromGit() string {\n-    b, err := exec.Command(\"git\", \"config\", \"heroku.remote\").Output()\n-    if err != nil {\n-        return \"heroku\"\n-    }\n-    return strings.Trim(string(b), \"\\r\\n \")\n  That would do the trick yes, good catch.\n  appFromGitRemote should probably use it too.\n\nReply to this email directly or view it on GitHub:\n  https://github.com/heroku/hk/pull/23/files#r8018221\n. I know we talked about the fact that this check should be sufficient.. but I don't think we discussed it in terms of Windows users. Should this work fine on Windows command prompt and power shell?\n. I did at least test this on Windows in the regular command prompt, and the log output is just regular text with no escape codes or anything. :+1:\n. Mind tweaking this to:\n\nhk requires Go 1.1 or later and uses Godep to manage dependencies.\n\nOtherwise :+1: \n. Fixed by 7d19d6f, thanks!\n. Should just need to run godep save ./...\n. @kr is this a fairly idiomatic way to do this?\nIf I don't have the time.After(), I'm not waiting long enough for the goroutine to read a single line. The time of 20ms seems long enough to nearly always work in the case of echo myapp | hk destroy, but short enough that it still seems instant to the user.\n. Yeah, heh, basically the same as @fdr said at lunch.\nAre you aware of any terminal packages I should be using for this beyond what's in hk/term? I notice the windows-specific file there just stubs everything.\n. A very minor nitpick: my understanding of idiomatic Go style is that we should avoid unnecessary usage of else where you're already returning in the : http://golang.org/doc/effective_go.html#if\nWould you mind tweaking this commit to the following?\ngo\n    if herokuGitHost := os.Getenv(\"HEROKU_GIT_HOST\"); herokuGitHost != \"\" {\n        return herokuGitHost\n    }\n    if herokuHost := os.Getenv(\"HEROKU_HOST\"); herokuHost != \"\" {\n        return herokuHost\n    }\nAlthough it would add an extra line, I think the result would be slightly more obvious & easier to scan.\n. Thanks! pushed a new version with that change.\n. @dickeyxxx I don't think my version of heroku-go is something that should be carried forward indefinitely. Its generator is far inferior to the one produced by @cyberdelia, and I don't plan on rewriting mine, so his heroku-go should ultimately be the way forward. So that's my recommendation.\n. ",
    "jclem": "@bgentry All set.\n. @bgentry Google has never been deemed an accurate reflection of common usage, and we don't make design decisions based off of it.\n. ",
    "mattn": "\nrename sysExec to exec.\n\nexec is assigned as name of pachakge os/exec.\n. Windows does't have syscall.Exec, so on windows it should be wrapped with exec package.\n. done\n. Merged master\n. I'm thinking this must not work for ./.hk/plugins. This is dangerous if we don't know repository contains hacks. Do you mind that i remove the ./.hk/plugins from this patch?\n. Any update on this?\n. @dickeyxxx yes, you can create your own plugin.\n. Ah, I didn't look share word. If are you thinking HKPATH should have multi path like below?\nHKPATH=/usr/local/bin:$HOME/.hk/plugins\n. It's simple. I want to change hk to work with ~/.hk/plugins like below.\nhttps://github.com/heroku/heroku/blob/master/lib/heroku/plugin.rb#L38\n. I can contribute windows code\n. new plugin system still not exists?\n. done\n. ",
    "inconshreveable": "@bgentry It is my plan to include checksum verification and diff-based updating as part of go-update. The last time I was working on it, I was 1. trying to get the API right and 2. figuring out the protocol for coordinating updates. (How does the remote server specify the new binary's checksum, if it's a diff, if the user should update manually, etc) I need to take a deeper look at Omaha's protocol (Google's update protocol) and decide whether it's best to reuse that or roll my own. If you have any thoughts on that, I'd be keen to hear them.\n. ",
    "brandur": "In prod. You're all set!\n. Can I whiten the h2's a bit? I'm having a really hard time reading them at lower brightness levels.\n. Thanks! Lightened in 9d894ca.\n. @markpundsack Any thoughts on how we can improve that? I think it adds\nvalue if only in the way that addons now behave consistently with other\ntypes of objects in that they can be addressed by both an ID and a name.\nOn Wed, Dec 18, 2013 at 09:51:47AM -0800, Mark Pundsack wrote:\n\nGreat to support those names, but I gotta say, the output there doesn't seem great to me. The name doesn't add any obvious value to me since it's redundant with the middle column, and it's still not clear that I have to use the name when referring to it. As a user, this doesn't match my mental model.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/heroku/hk/pull/46#issuecomment-30863963\n. I still get this with when using install instead of build, which is why I left it:\n\n$ godep go install\ngo install: no install location for directory /Users/brandur/Documents/heroku/hk outside GOPATH\ngodep: go exit status 1\nIt's probably because I'm using Homebrew-built Go and don't have some env var set, but I figured other people might be trying to build hk in the same position as me.\n@bgentry Copy updated!\n. @kr:\n\nI'd expect this to happen whenever you try to run go install, for any package, regardless of hk or godep being involved. Is that right?\n\nYep! My GOPATH was okay, but I was just fundamentally not grokking the idea of Go workspaces and was just following my own conventions by running godep go install from an hk directory outside of a workspace.\nBTW, I just switched to the tarball, and it is cleaner. Thanks for the help on this one.\n. Nice! Personally the add-on name + target plan name combination feels way better to me (and makes a lot more conceptual sense too).\n. I think we ended up making the decision to keep the colons because it allows clients to create a new add-on installation by only referencing a single name (the plan name, which includes the service). If we stripped the colons, they'd have to reference both a service and a plan name, or perform a lookup on the plan to get its UUID before sending it in.\n. FWIW, agreed that addon-update feels like the right compromise between function and correctness. The word \"update\" could potentially be ambiguous, but I think that users will get it.\n. BOSS!\nOn a similar note, maybe we could make it ssl-destroy-cert to fit in better with add and rollback? Also, if it helps, don't feel locked into the word \"cert\" here. The user is uploading a cert but each of these commands is actually performing an operation on an SSL Endpoint. IMO, this would be pretty nice as just ssl, ssl-add, ssl-destroy, and ssl-rollback.\n. @bgentry You're not adding or rolling back SSL, but you are destroying SSL? It seems a little weird that I wouldn't be able to guess the destroy command from the add the command.\n. So awesome :)\n. @dickeyxxx BTW, are you maintaining this project these days, or is it considered unmaintained? Thanks!\n. @dickeyxxx You're awesome! Thank-you :)\n. @kr Great point! I thought about adding it as a plugin, but decided to put it in mainline for two reasons\n1. Although the class of app that requires extra security measures for access is currently limited to internal use, I think there's a reasonable chance that we'll release this as a feature eventually, especially for our enterprise-class customers.\n2. The error message: I wanted to tack on a usage hint at the end of errors that are the result of a two factor requirement (i.e. try hk authorize), and wasn't sure how to make this happen from a plugin. I could put the error in mainline and have it refer to a plugin, but that really doesn't seem great either.\n@dickeyxxx As usual, thank-you for the merge!\n. @dpiddy @dickeyxxx Thanks guys!\n. @dickeyxxx +1! Thank-you.\nOn Fri, Sep 26, 2014 at 08:15:54AM -0700, Jeff Dickey wrote:\n\nMerged #174.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/heroku/hk/pull/174#event-170767463\n. @dickeyxxx What do you think about pulling this one in for the time being? Thanks!\n. @bgentry Ah, yes, +1. Things have changed a little bit since that Manager API is now fully retired so instead of re-implementing a new set of /organizations/* endpoints, I really want to take us back in the opposite direction and just make our existing V3 endpoints orgs aware.\n\nI took a token pass to see where else this particular lookup was used, and it looked like these changes would patch those places up as well.\n. Excellent find. Thanks Eric!\n. @kr @dickeyxxx Ah, +1, thanks guys! I somehow missed the organization of this array. Just for general cleanliness of house, I moved this down to the extra section on master in 63cc095.\n. @kr Ah, +1! I suspected that what I was doing was poor practice.\n\n(You don't have to wait for the change to be merged upstream.)\n\nBut my commits won't even be in that repo yet I think? Do you mean that I should run a godep update pointing to my own fork? Thanks!\n. @kr Ah! Thanks a lot for explaining, I think I understand the general process now.\n@dickeyxxx If it's all the same to you, I'll correct my little Godep faux pas on master. I tried running the update, but because it pulls in a lot of other changes that occurred in heroku-go, it makes this diff about 100x larger, with very little of it relevant to the changes proposed.\n. ",
    "uhoh-itsmaciek": "@kr For what it's worth, I suggested the exact same thing earlier this morning. The only thing I don't like about it is that it seems to be visually noisy in many fonts (maybe it's just that numbers are \"denser\"--most e-mail addresses don't seem to have this problem).\n. ",
    "markpundsack": "Yes, Dashboard special-cased Postgres. API has not exposed that functionality. \n\nOn Dec 4, 2013, at 3:39 PM, Blake Gentry notifications@github.com wrote:\n@markpundsack added an addon-open command. Turns out that not even the one in toolbelt supports heroku-postgresql addons, and it would be impossible to do so here due to the color issues discussed above.\n\u2014\nReply to this email directly or view it on GitHub.\n. Great to support those names, but I gotta say, the output there doesn't seem great to me. The name doesn't add any obvious value to me since it's redundant with the middle column, and it's still not clear that I have to use the name when referring to it. As a user, this doesn't match my mental model.\n. This does have the nice benefit that when I list the add-ons, I can then copy and paste the name of the add-on into the remove command. I hated when that didn't work with the toolbelt and you had to manually strip the _URL suffix.\n. How do deployhooks look?\n. Awesome! Following git as an example, it's probably fine to just have instructions for how people can optionally source in the tab completion script.\n. Is this something that should be exposed in Dashboard as well? We just redid the activity page and didn't consider this. Maybe it's something that only shows up in v3?\n\n/cc @max \n. Gotcha. We could query GitHub, but that seems a bit expensive on Dashboard. If people really make use of tags, it could be pretty useful. Not sure how prevalent that is.\n. I'm with Max on this one. Requiring one and only one argument for run is easy to understand. I don't specifically want interspersed arguments, but I do want to be able to put arguments at the end. Being able to pluck -a APP out of the middle of run command is NOT a feature.\nWith the example you mention, hk run -- bash -a myapp, everything after the -- should be passed to run. That's the whole point.\n. Gotcha. I agree with most of the above except, I want to be able to do:\n$ hk run \"rake db:migrate\" -a myapp                # runs `rake db:migrate` on myapp\nOr more specifically:\n$ hk run \"rake db:migrate\" -a !$                # runs `rake db:migrate` on whatever app was used in the previous command\nand in order to do that I am willing to require quotes around:\n$ hk run \"rake db:migrate\"                # runs `rake db:migrate` on the default git remote\n$ hk run -a myapp \"rake db:migrate\"       # runs `rake db:migrate` on myapp\nThat is what I thought we had agreed to when the three of us last talked about it. My interpretation of that discussion was that we were going to make run take one and only one argument, and thus allow options to be on either side of the argument, as long as there was a single argument. \nThis has the added benefit of failing on $ hk run rake db:migrate -a myapp with a parse error where we can explain the need for quoting, rather than performing an operation on the wrong app.\nNow, if that is some horrible non-convention, and it really is better to follow your proposal, then fine. But the above is what I feel like I want. I use the -a !$ convention a LOT, and being able to do so on every command except run feels wrong whereas having to quote multi-word commands feels right.\n. Was this deployed? \n```\n$ hk members\nUnknown command: members\nRun 'hk help' for usage.\n$ hk version\n20140515\n```\n. ",
    "max": "Yep, sure.\nOn Mon, Dec 9, 2013 at 2:18 PM, Blake Gentry notifications@github.comwrote:\n\n@brandur https://github.com/brandur yeah I agree they're quite hard to\nsee. @max https://github.com/max thoughts?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/heroku/hk/pull/32#issuecomment-30179721\n.\n. Oh, wow. You can't do this after the fact?\n. Never mind. Issued a new one.\n\nOn Wed, Dec 11, 2013 at 10:36 AM, Blake Gentry notifications@github.comwrote:\n\nI was afraid not, though maybe there's a way to do that with the API..\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/heroku/hk/pull/35#issuecomment-30348672\n.\n. That's why I don't like \"log\". It is ambiguous as to whether we mean the\nverb or noun.\n\nOn Thu, Dec 12, 2013 at 7:20 PM, Keith Rarick notifications@github.comwrote:\n\nMy only reservation about singular \"log\" is that it's also a verb.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/heroku/hk/pull/37#issuecomment-30483489\n.\n. That's a nice parallel.\n. What made you change your mind re access? Orgs?\n\nOn Mon, Dec 16, 2013 at 12:17 PM, Blake Gentry notifications@github.comwrote:\n\naccess, access-add, access-remove.\n/cc @max https://github.com/max\nYou can merge this Pull Request by running\ngit pull https://github.com/heroku/hk access\nOr view, comment on, or merge it at:\nhttps://github.com/heroku/hk/pull/42\nCommit Summary\n- print usage on usage errors\n- add access commands\nFile Changes\n- A access.go https://github.com/heroku/hk/pull/42/files#diff-0(157)\n- M domains.go https://github.com/heroku/hk/pull/42/files#diff-1(7)\n- M main.go https://github.com/heroku/hk/pull/42/files#diff-2 (3)\nPatch Links:\n- https://github.com/heroku/hk/pull/42.patch\n- https://github.com/heroku/hk/pull/42.diff\n. OK. I'll either write something up tonight or we can discuss tomorrow\nduring our design session.\n\nOn Mon, Dec 16, 2013 at 1:26 PM, Blake Gentry notifications@github.comwrote:\n\nIt felt ok when I was implementing it.. I'm still not sure on the\nimplications with orgs, though. I'd like to talk those through before\nmerging this just to make sure there aren't any major gotchas that will be\nhard to fit with this style.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/heroku/hk/pull/42#issuecomment-30702328\n.\n. @bgentry What where the reasons for enable/disable vs on/off? I don't have a strong opinion either way but I'm curious if I'm missing something.\n\nOverall this looks good to me. The only question I have is around \"features\". The word \"features\" doesn't indicate to me that these are experimental. \"Labs\" makes that clearer.\n. ```\nerror: Cannot scale to more than 100 1X size dynos per process type. If you\n       need MOAR dynos please contact our sales team:\n   https://heroku.com/contact\n\n```\n. I like the 2nd one better too.\n. @bgentry We had previously discussed only allowing quoted run commands:\n``` bash\nThis works as expected because it's just a single word\nhk run bash -a my app\nRunning bash on myapp as run.2034:\nThis fails because it needs to be quoted\nhk run rake db:migrate -a myapp\nerror: Something about needing quotes\nThis works because it's now properly quoted\nhk run 'rake db:migrate' -a myapp\nThis also works\nhk run -a my app -- rake db:migrate\n```\nI think it's acceptable to type quotes or -- to run commands. If we can be more explicit about what was wrong with hk run rake db:migrate -a myapp and explain to the user how it can be fixed I think it will be a better experience overall.\n. @markpundsack :thumbsup:\n. I don't really think of updating an add-on when I change the plan. I have an upgrade or a downgrade in mind. But I also understand why you made that call. Let's give it a try and see how it feels. We can always iterate.\nIn Dashboard we use \"change plan\":\n\n. I don't have a strong preference or a better solution right now but wanted to record my reaction.\nOne other thing I noticed. The command is hk addon-update newrelic gold but then the output shows newrelic:gold.\n. The : notation feels like a relic from the toolbelt in this case. I don't know what other ramifications changing the output has (for example: Do we list plans like addon:plan somewhere else?).\n. :thumbsdown: \nI think as a user I'd rather learn about addon-upgrade and addon-downgrade than addon-plan-change. A close second is still addon-update. addon-plan-change sounds like a method name in my application not something that I would like to type out as a command.\nThe lines are also blurry between \"the plan change\" and \"plan\"...\"change it\".\n. @bgentry I understand why we wouldn't want that in our code. As a user I don't make that distinction though. I don't even know if it does the same thing or not. I want to either upgrade or downgrade an add-on. Those are the commands I would look for first.\naddon-update is an acceptable compromise. I don't likeaddon-plan-change. It's not intuitive at all.\n. I would appreciate it if we increase the surface area of the code a little and went with addon-upgrade and addon-downgrade.\n. Why is it ssl-add-cert instead of ssl-cert-add? By that logic shouldn't it be add-addon?\n. I agree with @brandur here. ssl, ssl-add, ssl-destroy, and ssl-rollback are much more predictable.\nEvery time I hear the phrase: \"because that's much closer to what happens under the hood\" I cringe. A user couldn't care less about what happens under the hood.\n. Let's go with ssl-cert-add and see how it feels.\n. How do you know it is a usage error? When are you showing the long vs the short output?\nFor inexperienced command line users it's a lot easier to adjust the examples they see than to understand: Usage: hk scale [-a <app>] <type>=[<qty>]:[<size>]....\nI do like the specific error message.\n. ",
    "raulb": ":+1: logs\n. :dancer: \n. @bgentry BAWSS\n. I like it.\n. :dancers: :dancers: :dancers: :dancers: \n. :thumbsup: \n. ",
    "rwdaigle": "logs\n. ",
    "jkakar": "Another data point: Git, Hg and Bazaar all use log.  As a result, I\ntype heroku log almost everytime I use it and the have to go back\nand correct it to logs.  Considering Hg and Bazaar might be going to\nfar, but since Heroku users use Git all the time making the names\nuniform between the tools would be nice.\n. Thanks for the quick fix.  This looks nice!\n. ",
    "catsby": "I recently ran into an issue with the pg namespace on the current toolbelt that was a huge pain because each command did not already have the app information at the time it ran. From what I can tell, the current toolbelt commands all run the Heroku::Command::Base.app method to get the app information at some point in their individual execution. The pg namespace was not :panda_face: doing so...\nHaving this already done for me would be awesome, in my opinion. \n. I was confused by this when I first ran into it. As it stands now I'm still not sure how I should update a project's dependencies with godep. This morning I updated from GitHub and ran these commands locally:\n```\nhk git:error_update \u276f godep go get\ngodep: invalid subcommand: \"go get\"\nUse 'godep go install' instead.\nRun 'godep help go' for usage.\nhk git:error_update \u276f godep get\ngithub.com/heroku/hk\n./log_drains.go:153: drain.Token undefined (type heroku.LogDrain has no field or method Token)\n./pg.go:70: addon.ProviderId undefined (type heroku.Addon has no field or method ProviderId)\ngodep: go exit status 2\ngodep: exit status 1\nhk git:error_update \u276f go get                                                                                                                                                    \nhk git:error_update \u276f godep get\nhk git:error_update \u276f\n```\nThe first godep get run errors out, but after I ran go get everything is fine?\n. > Also, I'm not sure exactly what you mean by \"update a project's dependencies with godep\". Do you mean compiling a project after you've git pulled the latest version of its code?\nI apologize for not being clear;  yes, that's what I meant by that comment. I rm -rf my local checkout of hk and then ran godep get and did not get an error this time. I assume related to kr/godep#45 then. \n. Should probably remove the $ mate main.go part right? \n. I'm late to the party here. You mention in #67 :\n\nthe case where the command is an obvious analogue to a regular command outside of hk\n\nI get that, but I'm curious what other commands you think could live outside of their current namespace. This is an obvious one sure, do you have any others in mind? \nMy thought here is that this will turn out to be an odd-ball. Looking at the existing set of pg namespaced commands in the Toolbelt I don't see many others that could be split out, I'm wonder what other namespaces have commands that could be broken out. \n. Cross-application following and forking is done by supplying the full postgres:// url, will that be supported here? \n. I also like the second format - more prominent indicator of \"primary\"\n. Minor style question: could this omit the home var and return inside the if block? \nif u, err := user.Current(); err != nil {\n   return filepath.Join(\".\", \".hk\", \"plugins\")\n } else {\n   return filepath.Join(u.HomeDir, \".hk\", \"plugins\")\n }\n. I may be wrong, but I believe in changing this you need to run godep save or something(?) to update Godeps.json, TravisCI failed:\n$ godep go build -v ./...\nhkdist/web.go:17:2: cannot find package \"github.com/lib/pq\" in any of:\n    /home/travis/.gvm/gos/go1.2/src/pkg/github.com/lib/pq (from $GOROOT)\n    /home/travis/gopath/src/github.com/heroku/hk/Godeps/_workspace/src/github.com/lib/pq (from $GOPATH)\n    /home/travis/gopath/src/github.com/lib/pq\n    /home/travis/.gvm/pkgsets/go1.2/global/src/github.com/lib/pq\ngodep: go exit status 1\n. ",
    "danp": "Very nice, thanks!\n. :+1: \n. :+1: Let's roll with it and see how it goes!\n. Probably related to https://github.com/kr/godep/issues/45. Try:\n$ rm -rf Godeps/_workspace/pkg\n$ godep go build # or install\n. I think it's ok, and it does feel better to have this done at build. My personal process for finding where homePath() is defined would have me git grep homePath which would show it defined in two files that have platform-ish names. A quick inspection of either and seeing the build directives at the top would seal the deal that they are platform-dependent.\nPlus I'd say this pattern is pretty common in the Go stdlib, see for instance how dial() is defined here for unix and here for windows.\n. :+1:\n. If there's a way to have zsh load a completion from output that can be eval'd you could get auto-update of the completion with something like:\nbash\neval \"$(hk zsh-completion)\"\nwhere the zsh-completion command outputs the completion script that's presumably bundled in the binary.\nMaybe it would work if you put that line into _hk in $fpath? Guessing zsh would only load/run/eval it once but I'm not really sure.\nSame could probably also apply to bash.\n. There are currently no platform API endpoints with methods other than PATCH/PUT/POST that take a body. I respect (the vagueness of) the general spec but hk api is for interacting with the platform API.\nI could see support for either side: only ignoring bodies for GET (and being future-proof to some new platform API endpoint which eg uses DELETE with a body) and only requiring bodies for today's body-using methods in the platform API.\nIt was my mistake not reading the hk api documentation more thoroughly but knowing in the back of my mind that the platform API doesn't mix DELETE and bodies it surprised me when my hk api delete ... hung.\nI will add a doc update to this PR but I'm fine with it being merged or just closed.\n. :+1:\nThis at leaves gives scripts a chance to detect when something failed due to needing a second factor and maybe prompt.\n. Similar to what you changed below, I think this could be:\ngo\nif fi, err := os.Stat(hkpath); err == nil && fi.IsDir() {\n  return hkpath\n}\n. Fingerprint is not optional.\n. \"Make another\" -> \"Add a\"?\n. ",
    "hgmnz": "hah +1. I keep typing old school toolbelt commands like heroku logs. Translation would be neato.\n. ",
    "jdxcode": "is this for multi-users sharing plugins?\n. that's not what I'm asking, what is this pull request for?\n. From a higher level, what functionality are you trying to add? Or is this fixing an issue? Sorry, there might be some context I am missing\n. @kr what was the rationale for /usr/local/lib/hk/plugin?\n. and @kr you are correct, we're looking for a plugin system that will be compatible with both the current toolbelt and hk. This probably means sticking to something similar to the current location, but I'm curious why the decision was made to put it there.\n. there's a lot to like about having a single location to lookup... but yeah... windows...\n. @mattn I'm going to have to reject. The plugin system is going to be replaced in hk. Note though that putting plugins into a directory of the home folder is likely something we'll do with the new one.\n. no, it exists, but it's in the v3 toolbelt. We should have some documentation on it soon.\n. @koenpunt thanks for submitting a contribution. As @kr hit on, we're looking at other ways to handle the needs for multiple accounts and this is a bit too complex of a feature to have in the main codebase. I hate to reject features like this since I totally see the use-case, but it's important to keep the project lean.\nYou should be able to accomplish this by setting environment variables though, I would look into something like direnv to help manage them.\n@kr thanks for the code review\n. lgtm\n. lgtm\n. yeah I am considered the maintainer, but I'm not doing any active work on it right now. Probably pick it up within the next month or so. In the meantime, feel free to submit PRs, but know it's probably going to go through some arch changes\n. lgtm, and this is something that should live inside the main codebase\u2014the plugin system is on a chopping block right now\n. lgtm\n. let's go with this solution, but we may want to rethink how we're doing the Dial bit\n. @ransombriggs ready for review\n. this structure will go through a big overhaul, so I'm not concerned about it\n. it's all the same to me, but I'm curious about the future of heroku-go. @bgentry is that something you'd like to continue owning?\n. thanks for the honest answer, you're referring to this? https://github.com/cyberdelia/heroku-go\n. no need to reply @bgentry. @cyberdelia and I should have this from here\n. ",
    "naaman": ":+1: \n. ",
    "fdr": "On Feb 7, 2014 8:26 AM, \"Blake Gentry\" notifications@github.com wrote:\n\nI forgot about that feature actually :)\nYou should be able to provide a full URL already (check out the tests I\nadded). But I may also think about supporting the app:dbname syntax for\ncross-app followers.\nI think something like that exists in the toolbelt? /cc @fdr\n\nTwo colons and can be reimagined, or not.  Thank @will.\n. On Fri, Feb 7, 2014 at 12:54 PM, Keith Rarick notifications@github.comwrote:\n\nFor hk plugins alone, credentials are supplied for you in env vars.\nHk deliberately normalizes access so you don't know or care where\nthey came from; they are always in HKUSER and HKPASS (etc).\nIMO this still seems like a nice refactoring. Just wanted to mention\nthat plugins don't have to worry about finding credentials.\nThat is good to know.  I think I'll accept those and maybe leave the\nrefactoring more or less as-is so that programs can also learn to be truly\nstand-alone, which has been nice for simplicity in development.\n\nOne change I was thinking about making is making \"HkClients()\" a\nsimplified-API that doesn't know about netrc (or indeed, any credential\nkeychain).  That's because in the common case nobody cares about that stuff.\nBut, to retain usefulness to \"hk\" proper, control over all those things\ndoes need to be exposed, so an advanced API would also be exposed for\nadvanced use cases.\n. On Thu, Feb 20, 2014 at 10:55 PM, Blake Gentry notifications@github.comwrote:\n\n@fdr https://github.com/fdr I think the big thing I was wanting out of\nthis was to move the client-related tests (such as env var settings) into a\ntest file in the hkclient subpackage rather than keeping them in\nmain_test.go or util_test.go.\nI think you also discussed doing something with HKUSER and HKPASS env\nvars in the credential setup stuff so this package would work cleanly for\nboth hk and its plugins.\n\nReply to this email directly or view it on GitHubhttps://github.com/heroku/hk/pull/97#issuecomment-35703674\n.\n\nMaybe.  We talked a bit about making HKUSER and HKPASS useful for the main\nCLI, but there are precedence problems with the creds in the URI.\n...what about passing API URL, creds and all, to the plugin?  Then there is\nno precedence problem and parity is achieved.  And, less code for me.\n. On Thu, Feb 20, 2014 at 11:27 PM, Daniel Farina daniel@heroku.com wrote:\n\nOn Thu, Feb 20, 2014 at 10:55 PM, Blake Gentry notifications@github.comwrote:\n\n@fdr https://github.com/fdr I think the big thing I was wanting out of\nthis was to move the client-related tests (such as env var settings) into a\ntest file in the hkclient subpackage rather than keeping them in\nmain_test.go or util_test.go.\nI think you also discussed doing something with HKUSER and HKPASS env\nvars in the credential setup stuff so this package would work cleanly for\nboth hk and its plugins.\n\nReply to this email directly or view it on GitHubhttps://github.com/heroku/hk/pull/97#issuecomment-35703674\n.\n\nMaybe.  We talked a bit about making HKUSER and HKPASS useful for the main\nCLI, but there are precedence problems with the creds in the URI.\n...what about passing API URL, creds and all, to the plugin?  Then there\nis no precedence problem and parity is achieved.  And, less code for me.\n\nAnd by this, I meant also killing off HKUSER and HKPASS in the same stroke.\n. On Fri, Feb 21, 2014 at 12:37 AM, Keith Rarick notifications@github.comwrote:\n\nHERKOU_API_URL is already passed to plugins, as you've probably noticed.\nHKUSER and HKPASS are purely redundant, to make life easier on plugin\nauthors who don't have a good way to parse URLs. For example, a shell\nscript.\n\nahhh, I see.  Okay.\nKnowing that, it would seem that HKUSER and HKPASS being left as vestigial\nparts if one writes a Go program linked against hkclient is the smallest\nevil (i.e. do not try to incorporate this into hkclient's model as it is\nnow).  What say you about that?\n. De-bitrotted; I'll try to scrape some time to move the tests around as you suggest.\n. Oh? I don't think I got your mail. The tests pass but I'll install hk-with-hkclient refactoring and abuse it for a while to see what's up.\n. Wait, is there a reproduction here that only happens with this patch applied? I can't really tell from that communication.  Thanks for your help, and let me know if you want me to move those tests.\n. yay.\n. $ hk run bash -a myapp\nerror: ambiguous -a flag provided\nI see, the implied-app use case is broken here.\nPersonally the main thing I wanted was to anchor the -a APP a fixed distance away from the beginning or end of the command line, e.g. for\n$ hk -a fdr-test run bash\nMost importantly so I can cleanly backspace away everything but the target of the command...I tend to context-switch applications less frequently than verbs on the application when working interactively.  Full blown flex-handling of -a may be too liberal to the point.\nWhat I don't like is having to hack up the middle of the command line to perform a series of actions against an application.\n. > What I don't like is having to hack up the middle of the command line to perform a series of actions against an application.\nLet me refine this:\n$ hk addon-add -a fdr-test <ARGS>\nWhen changing the verb (e.g. to \"run\" or \"addon-remove\") I also typically want to change the <ARGS>, and stepping around -a is really annoying.  Old heroku CLI at least allowed me to skip backwards and then hollow out the args and the command together.  The best, though, is to hit C-w a few times and be ready to do a new command against the same app. \n. $ HKAPP=foo hk info\n$ HKAPP=foo hk run whatever\netc\nI find this too drastic a verbosity for explicit specification of the app.\n. > This can be worth it, but you have to have a really good reason. \"The simple thing is annoying\" is generally not sufficient justification.\nNot in general, but this one complaint comes up over and over.  That said, I don't think it comes up in the form of \"allow -a anywhere and everywhere\", but rather to not force stepping around it to edit command-and-args together.  I hypothesize this is the real complaint.\nYou might think HKAPP=... is good enough, but I am not so sanguine.\nIf the flex-parsing is reduced to just allowing -a to sit one command earlier than it normally would -- after hk -- then your use case will work and maybe complaints will go away.\n. > From whom? Remember most non-herokai usually don't even use -a. Be careful about optimizing for the wrong persona. (Breaking e.g. hk run ls -a src for normal users.)\nTrue, but how does accepting -a against hk alone break any use case of yours (including that one), while avoiding the chaos of -a anywhere?   Herokai use -a a ton, but larger and more complex customers do, too, because of proliferated staging and dev environments.\n. > Hk had that behavior for a while, and I found it perfectly tolerable.\n\nThe code and documentation was slightly more complicated than\nthe current stock hk, but not by a huge margin.\n\nWell...I suggest it has a good chance of solving my annoyance at least.  I doubt people want to intersperse option in-between arguments for a command, but to be able to change the verb and args as one swathe of text seems reasonable (discounting HKAPP which lets one achieve a similar notation by fobbing off this use case to the shell)\n. If @bgentry is willing one (I) could try it for a while and see how it feels.  I know you had things this way before, but I've never gotten to experience it myself.  If the problem is programming time I can cough up the patch.\n. On Tue, Feb 18, 2014 at 1:23 PM, Blake Gentry notifications@github.comwrote:\n\n@fdr https://github.com/fdr if you want to try it out with a -a being\nallowed at the front, you can use this zsh snippet that @tthttps://github.com/ttuses:\nhk() {\n    (\n        if test \"$1\" = \"-a\" -o \"$1\" = \"--app\"; then                export HKAPP=$2\n            shift 2\n        fi            command hk $@\n    )\n}\nI do not use zsh and that is apparently one of my personal defects but I\nthink I will try it in bash anyway\n. On Mon, Feb 24, 2014 at 5:30 PM, Max Schoening notifications@github.comwrote:\nI like the 2nd one better too.\n\nReply to this email directly or view it on GitHubhttps://github.com/heroku/hk/pull/108#issuecomment-35964967\n.\n\nI have no informed opinions on this matter (or any, zing!) and I like that\nthe feature exists.\n. wups.  Thanks for that @koron.\n. On Feb 7, 2014 6:40 AM, \"Clint\" notifications@github.com wrote:\n\nIn hkdist/web.go:\n\n\"github.com/gorilla/mux\"\n \"github.com/kr/secureheader\"\n- \"github.com/lib/pq\"\n\nI may be wrong, but I believe in changing this you need to run godep save\nor something(?) to update Godeps.json, TravisCI failed:\n\nYou are totally right.\n. On Fri, Feb 7, 2014 at 12:59 PM, Keith Rarick notifications@github.comwrote:\n\nI'm very interested in opinions about this.\nRegretfully I, for one, don't have one...I just forgot about Godep\naltogether, which is probably a necessary evil to fix over (unless one\nstarts overriding \"go\" itself, much like \"gvm\" does).\n\nSpeaking of \"gvm\" it has some notion of \"pkgsets\" that I don't use but seem\ninteresting.  In general I like the tool, so I can test against different\ngos.\n. On Fri, Feb 7, 2014 at 1:07 PM, Keith Rarick notifications@github.comwrote:\n\nIn hkclient/client.go:\n\n\n\"github.com/bgentry/heroku-go\"\n\"github.com/heroku/hk/postgresql\"\n\"net/http\"\n\"net/url\"\n\"os\"\n\"strings\"\n  +)\n  +\n  +type Clients struct {\nApiURL string\nClient *heroku.Client\n  +\nPgClient _postgresql.Client\n  +}\n  +\n  +func HkClients(nrc *HkNetRc, agent string) (_Clients, error) {\n\n\nThis name is a little weird, and has stutter for users:\nhkclient.HkClients(...).\nConsider New or Open or something if you can find an appropriate one.\nAn plain verb like would be good if Clients is the primary type of this\npackage,\nwhich it seems to be.\nSame goes for HkNetRc and any other prefixed exported symbols.\nI'd suggest Netrc (or NetRc if you prefer that capitalization) instead.\nThat's a good idea.\n. I fixed the stutter, I think.\n. \n",
    "tt": "I hate to sound like a broken record, but I too agree that the parameter immediately after hk would address some of these concerns. One argument raised was mistyping -s for -a might issue the command against the wrong app; if the parameter is to hk itself, we can easily reject unknown parameters as errors. There is just no risk of ambiguity.\n. How do we plan to distribute this? Will it update alongside the binary?\n. I like the idea of putting the bulk of the completion support inside the binary. The wrapper could then be distributed in zsh-users/zsh-completions (which for OS X users can be installed with Homebrew).\n. ",
    "will": "I'm Will\nOn Fri, Mar 7, 2014 at 11:33 PM, Blake Gentry notifications@github.comwrote:\n\nAuto-completion of addon services and plans in action:\nhttps://github-camo.global.ssl.fastly.net/ed88ff18e752340ae363ab3f330096e3070bf18b/687474703a2f2f636c2e6c792f696d6167652f32363342306c3433336a31342f64617461\nhttps://github-camo.global.ssl.fastly.net/1f6c33b46a15e5335c6e434242caf5abdffe1851/687474703a2f2f636c2e6c792f696d6167652f337530313275304c325232472f64617461\nNone of this will be usable until I ship this PR, though.\n/cc @will https://github.com/will\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/heroku/hk/pull/117#issuecomment-37091600\n.\n. \n",
    "neilmiddleton": "I've not tried that on my basic zsh as I'm running oh-my-zsh right now as I\nflipped to test it out.\nIt seems that the core of the issue relies on the filenames.  If you're\nusing compinit I think this is a requirement.\n(I say that, but I've not tested it)\n. ",
    "esebastian": "@bgentry No problem, like I said, it was a fun exercise! :smile:\nAnyway, I don't think you misunderstood. The heroku-accounts plugin indeed uses a heroku.account setting to help automating things, but in the end it works by taking advantage of the SSH config file (where the custom hostnames are associated with the heroku.com hostname and the file with the user account's SSH key).\nSo being capable of specifying a custom hostname on a per repository basis with a heroku.host setting is a valid workaround to avoid the error: no apps in git remotes if we're using heroku-accounts, but it bears no other relationship with the plugin functionality (no need of any heroku.account setting, its presence is irrelevant).\nOne can definitively use the HEROKU_GIT_HOST or HEROKU_HOST environment variables to allow hk to achieve the same result, but then it would depend on the shell and one should remember to set the correct value when switching projects.\nThat said, to make hk compatible with the sorts of hosts used by heroku-accounts it should be enough to validate hosts in the form heroku.* as the plugin always uses the same pattern when assigning the names. Would you prefer something just addressing that?\n. @kr Well yeah, I suppose it could be improved. But I don't know of any convenient option to be able to use Heroku with different credentials on a per project/app basis other than fiddle with hostnames in the SSH config file.\nAt the moment that behaviour is supported by the Toolbelt (both manually or automatically with the aid of the plugin) but not in hk, as far I'm aware.\nSo, adding the ability to use an heroku.host setting would allow that, but I don't see it as vetting the use of heroku-accounts, more likely I see it as an extension to the fix introduced in #95.\nPlease excuse me if I'm missing something!\n. ",
    "bjeanes": "\nespecially if addon names diverge from the provider-color model\n\nYou should count on this changing; there's a good chance it will \u2014 but probably not for a while.\n. I think I prefer the single command over separate upgrade/downgrade commands. They really are the same thing except for a validation on the \"direction\" (which IMO, isn't obviously valuable anyway). However, addon-update feels like the wrong name. What am I updating? Am I updating it's config vars? It's name (which is a thing I want to make happen eventually)?\n\nWould you prefer that I change the output, or instead change the input to something like:\nhk addon-update newrelic:gold\nhk addon-update heroku-postgresql-blue:kappa\n\nI'd be a :-1: for this invocation, because it either makes assumptions about only having a single instance installed (e.g. newrelic) even though this may not hold in the future, or it conflates the service-name:plan-name syntax by replacing service-name with the name of the resource (heroku-postgresql-blue). The name of the resources may very well have a different scheme in the future (e.g. perhaps user provided names or globally unique names a la haikus); imagine typing hk addon-update heroku-data-warehouse:kappa. The : feels arbitrary and confused there compared to just hk addon-update heroku-data-warehouse kappa or hk addon-update heroku-data-warehouse [heroku-postgresql:]kappa.\nI like hk addons-plan-change identifier [service-name:]plan-name myself, where identifier is either the unique resource name or the service name, when unambiguous (and until such potential time as every add-on has a unique identifier/name).\n. addon-update closes doors on future types of updates. addon-plan-change does feel awkward as a name, but I don't think update is the right verb for a unified upgrade/downgrade.\n. On single command vs two commands, I think @max should probably make the call. I also agree with his earlier comment that implementation similarity has little to do with our users' conceptual model.\n. @bgentry We are working on some changes that allow us to \"upgrade\" to the same plan in order to refresh the price. The implementation might change and it almost certainly won't be user facing (and if it were should have a different name) because it's something we'll usually run automatically if a provider lowers their prices.\n. ",
    "glenngillen": "\nI don't think it's nicer to have two different commands (addon-upgrade and addon-downgrade) \n\nAt some point in the past it made sure the command parameters matched your stated intention (e.g., threw an error and said \"you're already on a higher plan than X, maybe you meant downgrade?\"). I don't think this is the case any more because people have raised tickets because an accidental invocation of heroku addons:upgrade blah actually downgraded to the free/default plan. The main failing with the current implementation is that heroku addons:upgrade blah doesn't just upgrade you to the next plan. It's not that we've mapped these commands to distinct concepts.\n\nwhen they do exactly the same thing under the hood\n\nTechnical implementation shouldn't be driving the UX so I don't consider this a good argument for changing what we have.\n\nAre plan changes always strictly an \"upgrade\" or a \"downgrade\"?\n\nYes.\n\nis there any kind of action a user might take on an addon that would conceptually feel like an \"upgrade\" or \"downgrade\", yet not require a plan change?\n\nNot that I'm aware of. If there were that would make the use of the update here even more confusing to me.\n. ",
    "koron": "Hmm.. It would be better using USERPROFILE as primary\n. #7 would be helpful for this issue.\nI'll write new patch.  So I closed this.\n. @bgentry Thank you to taught me it.  I want to know it.\nAnd a question comes to me.\nAccoring to 7882c4ee5fc6e522ab085fcdba7a37ccaaa8bdaa, the cause of problem is cgo.\nMy code uses os/user on Windows only,\nand according to go/pkg/src/os/user (go 1.2),\nit seems doesn't use cgo for Windows.\nSo my question is... Does it cause the problem when using os/user for Windows only?\n. Thank you! :smile_cat: \n. ",
    "cyberdelia": "@bgentry I desperately need to do it too, and also gofmt -s.\n. That would do the trick yes, good catch.\nappFromGitRemote should probably use it too.\n. ",
    "dominic": "Currently failing:\nsh\n$ hk member-add dominic-org ddagradi@gmail.com\nerror: Not Found\n. I believe this is the blocker: https://github.com/bgentry/heroku-go/issues/8\nThe method is being sent with POST instead of PUT as per the schema.\n. @parkr no clue :) I have no more access to any Heroku orgs. Seems unlikely though. \n. +1 thx!\n. ",
    "koenpunt": "Update; I'm fairly new to Go, and missed the fact that the tests were failing on the formatting.. But that's all fixed now and the tests are passing. So if anyone could review this PR, that would be great!\n. Thanks for the review. I'm running into some other issues now.. But I'll try some more and come back here when I know more \n. Clearly :)\n. I now reset the environment variable after the test\n. ",
    "amerine": "LGTM\n. ",
    "arfon": "(Please ignore, testing out https://github.com/github/linguist/pull/1549)\n. Beautiful:\n\n. ",
    "phobologic": "Just wanted to ping on this - any chance it could be merged?\n. ",
    "mathias": ":+1:\n. "
}