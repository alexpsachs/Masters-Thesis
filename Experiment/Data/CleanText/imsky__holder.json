{
    "imsky": "Custom labels will be specified with the following code:\nhtml\n<img src=\"holder.js/100x100/text:custom text\">\nThe text will be bound to a theme also, so you can have custom text \"classes\" i.e. columns, rows, etc.\n. Can you explain what you mean by this? Do you mean running Holder on images with specific classes, like this: Holder.run({images:\".custom-class\"}) or something different?\n. Holder has themes for this purpose. You can define custom themes and use them just like classes. \nIn your code sample, you have id:foo/class:bar, how does this differ from <img class=\"bar\" id=\"foo\"> and what would this mean in the context of Holder?\n. Can you give an example of how you'd want this to work?\n. It's an interesting idea, though it requires a fair amount of additional processing. I'll see if I can get this into 1.4.\n. @jasperkennis Compass encodes the image file using Base64 and embeds it using the data URI scheme. To mirror the same functionality, Holder would need to parse CSS, which at this stage would be unnecessary. I've already tested the CSS placeholder approach, it works, and will be included in 1.4 as soon as possible.\n. This is now implemented, see https://github.com/imsky/holder#background-placeholders\n. Test your changes before submitting a pull request in the future.\n. jsFiddle can be hit-or-miss with Github-hosted scripts. If you'd like to link to Holder remotely, use http://imsky.github.com/holder/holder.js Here's the updated fiddle: http://jsfiddle.net/wn6M9/3/\n. The code doesn't conform to how flags are set up. Also, I'm not sure specifying square images with one number is necessary, it would be extra code for a very limited use case. Let me know why you think this should be in Holder.\n. I'll consider it, thanks for taking the time to put the pull request together.\n. Thanks for finding this bug. It's now fixed in the latest source.\n. Yes, Holder offers a run method that can be customized: https://github.com/imsky/holder#using-custom-themes-and-domain-on-specific-images\nYou can run it on a specific selector like so: Holder.run({images:\".placeholder\"}).\nLet me know if that works or if you're specifically looking for jQuery integration.\n. I just ran some IE8 tests with .show() and Holder, they don't seem to affect each other. Please isolate the bug and paste your code on Gist.\n. Closing as inactive.\n. Currently the only way to do this is by re-rendering placeholders periodically and on resize events. I'll have to look into the performance implications of this and see if there's a better way of doing it.\n. This is now implemented: https://github.com/imsky/holder#fluid-placeholders\n. The reason background color is set is so that Holder can gracefully degrade on clients that don't support <canvas> (IE6, Android 2.*). It's possible that it'll also be used in the future as another way to implement fluid placeholders.\n. Yes you can, check https://github.com/imsky/holder#background-placeholders\n``` css\nimage {background:url(?holder.js/100x100/social)}\n```\nhtml\n<div id=\"image\" class=\"holderjs\"></div>\n. v1.7 has been updated with a new component.json. Let me know if you're still having issues.\n. I'll look into it and let you know what's possible.\n. Could you let me know how you aim to use lazyload.js with Holder?\n. I've added support for fluid placeholders, fixed-width placeholders work well with lazyload.js. Let me know how it works for you.\n. Yes, the font flag works just like the CSS font-family rule. If Monaco isn't available, the next font in the stack is used.\n. You can now use Holder.run({images: element.get(0)}), and use Nodes and NodeLists for the images property in general.\n. Just pushed a patch, now there's only one Holder style element per document.\n. I've added a nocss option, which will stop CSS generation. You can use it like this: \njs\nHolder.run({images:\".img\", nocss:true})\n. Passing the element to run is incorrect, the function expects a configuration object. You should test Holder.run manually to ensure you're not calling it with default options, since otherwise you're iterating over every img tag in the document.\n. Thanks for noticing, had to pull in the latest version for the site.\n. Fixed, thanks for letting me know.\n. Thanks for your kind words, the bug should be fixed now.\n. Hi @klihelp, please try the latest Holder file and let me know if you're still having issues.\n. This is fixed now.\n. This is fixed. I'll switch Holder to use semver from now on.\n. Looking into this.\n. Though I only saw a MIME notice, not a 404 error, the option to define background images as a data attribute is now available:\nhtml\n<div class=\"holderjs\" data-background-src=\"holder.js/100x100/industrial\"></div>\n. Could you post a live example please?\nOn Feb 27, 2013, at 7:59 AM, sebastianthomas notifications@github.com wrote:\n\nDon't know if anyone has seen this bug yet, if not I can upload an example somewhere.\nI'm using the Bootstrap example page with the carousel (which is where I found out about holder.js btw!), and using holder images in the carousel slides, only the holder images on the first slide displays the text (dimensions) correctly. The rest show 0x0 as the text (although the holders are the correct size), and the text isn't vertically centred, rather at the top of the placeholder.\nTried moving the js around from footer etc, doesn't seem to make a diff. \nThanks\n\u2014\nReply to this email directly or view it on GitHub.\n. I get a user/password dialog. Could you upload it to Dropbox or Google Drive please?\n. Let me know if the error's resolved. I'm closing the issue in 7 days if there's no further development.\n. I'll look into this.\n. It was a bug that's since been fixed. Please use the latest version.\n. Please provide a testcase I can download and replicate the issue with.\n. \n\nNo errors.\n. I'll look into it later this week.\n. Can you explain in more detail what the problem is? Retina placeholders should have predictable behavior.\n. Closing, no response.\n. I'll look into this.\n. This is the intended behavior. I'll add a switch to use literal size.\n. @creocoder This issue was closed as it is a duplicate of #40.\n. Right, I'll look into this.\n. Will take a look this weekend.\n. I removed the minified version, since it's just the output of a Grunt task. Please rely on the main holder.js file.\n. You'll have to run the Holder.run method. Please see this StackOverflow question: http://stackoverflow.com/questions/14915237/holder-js-get-back-dom-element\nThe code used there is the following:\n``` js\nvar image = $(\"\").attr({\n    \"data-src\": \"holder.js/300x200\"\n})\nHolder.run({\n    images: image[0]\n});\nimage.appendTo(\"body\");\n``\n. Please provide an example use case, I'll see what I can do.\n. The issue here is that the lightbox code responsible for wrapping the larger image should also be responsible for rendering the placeholder, i.e. for executingHolder.run`. As your example points out, you'd need at least a \"data-href\" attribute to ensure that the Holder URL is treated as an actual image. If you post the lightbox script you're using, I could write a plug-in or patch that fixes this issue, but this is not something that can be fixed within Holder.\n. I'll merge it as soon as I get around to adding the URL flags for it.\n. Since Holder now uses SVG by default, this will need to be reimplemented. I'm closing the issue, but the feature will be implemented as soon as possible.\n. Thanks.\n. Will look into this.\n. This should be fixed now. I've installed v2.1.0 with Bower on my system, let me know if there are still errors on your end: the package may need to be unregistered and re-registered.\n. Which browser are you using?\n. Have you tried any of the past releases, such as 1.9? Do they work?\n. Can you confirm that you're still seeing the bug?\n. Closing due to no response.\n. If you could, that would be great, thanks.\nOn Sep 6, 2013, at 5:46 AM, Rarst notifications@github.com wrote:\n\n@imsky as per my comments this is still not quite correct, seems @rthrfrd gravitated somewhere, want me to do a pull to fix it up?\n\u2014\nReply to this email directly or view it on GitHub.\n. It's up on Packagist now: https://packagist.org/packages/imsky/holder\n. You'll need to call Holder.run after changing the src attribute to data-src.\n. I can replicate the bug. The placeholders are rendered once the window is resized, which seems to be a clientHeight/clientWidth bug. I'll look into this.\n. Good idea, I'll think about how to set this up.\n. This is now implemented, see https://github.com/imsky/holder#automatically-sized-placeholders\n. This is now fixed.\n. Have you tried percentage widths for both dimensions? Something like <div style=\"width:500px;height:200px\"><img data-src=\"holder.js/100%x100%\"></div>\n. This is now implemented, using the auto flag on a fluid image, like so: <img data-src=\"holder.js/100%x100/auto\">\n. Have you downloaded the latest file?\nOn Oct 22, 2013, at 4:43 PM, Brad Shaw notifications@github.com wrote:\nI tried that, but it doesn't work. Height stays at whatever you set it to. In your example above the height stays pegged at 100px while the width adapts to the container width.\n\u2014\nReply to this email directly or view it on GitHub.\n. You shouldn't use Holder.run to replace the image. Use jQuery: $(\"#placeholder\").css(\"height\", \"auto\").attr(\"src\",\"image.jpg\").\n. Canvas still has wider support than SVG, especially in older Firefox versions. However, I did add a SVG renderer and it looks like there is a significant speed up:\n\n\nBrowserImagesCanvasSVGSVG speedup\n\nChrome 305013 ops/sec152 ops/sec12x\nChrome 301006.5 ops/sec80.8 ops/sec12x\nChrome 302003.3 ops/sec43.3 ops/sec13x\nFirefox 24502.4 ops/sec50 ops/sec21x\nFirefox 241001.2 ops/sec26.8 ops/sec22x\nFirefox 242000.6 ops/sec13.5 ops/sec23x\n\n\nI'll continue working on the SVG renderer and it may be included in the next version.\n. I'll push the SVG renderer as soon as the canvas fallback is implemented for older browsers.\n. Interesting idea, but the changes add some noise to the code. I'll see if it's possible to keep this idea with a cleaner implementation.\n. This is now implemented. When an invisible placeholder is encountered, Holder.invisible_error_fn is run with one argument, its caller. A closure is expected that takes one argument, the img element of the invisible placeholder. Here you can register the invisible placeholders and re-render them as necessary.\n. The reason an error is thrown on invisible elements is exactly because there is an inconsistency across browsers when getting the client dimensions for an element. The logic to get reasonable dimensions quickly becomes complicated (if the parent element is also invisible, for example). I'll look into this again, though it may require a more explicit workaround than just falling back to the parent element.\n. This likely won't have a permanent fix, due to the previously mentioned problems. The logic just gets too complicated when considering all possible cases. However, since an error callback has been introduced, there is a workaround that will continuously attempt to render all invisible placeholders. You'll have to override the error callback in the following way:\njs\nHolder.invisible_error_fn = function(fn){\n    return function(el){\n        setTimeout(function(){\n            fn.call(this, el)\n        }, 10)\n    }\n}\nThis workaround does not provide optimal performance, so it should only be used in special cases. You can also use the callback to create a solution that works in your case.\n. I've already implemented a SVG renderer which uses the DOM instead of string interpolation, see https://github.com/imsky/holder/issues/65. I'll commit it after I implement feature testing logic.\n. This is just the comma operator: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator.\n. I'll take a look at this.\n. I can't replicate this in Chrome or Firefox using v2.0. Can you post a minimal test case and the browser you're using?\n. Just tested v2.3.2 for this bug and still can't replicate it.\n. This bug should be fixed now, let me know if you see any other errors.\n. It seems you're getting this error because you're calling Holder.run() (without any options), though I can't reproduce the bug in any configuration. I pushed another fix, let me know if you're still seeing the error.\n. @iorigin you shouldn't have that problem anymore, the default Holder.run call now always uses an empty object. Please post a minimal test case if you're seeing this problem with the latest source.\n. Good idea, I'll look into it.\n. Icon font support is on the roadmap and this issue has been brought up before, so I'll definitely look into this.\n. This should be fixed now.\n. After much testing, here's what I found.\n1. Canvas web fonts work easily only in Firefox. Chrome and Opera require a re-render after a >10 ms delay to work, so this can be built as a special case for custom-font placeholders.\n2. SVG web fonts work fine when the svg element is part of the main body. However, when the SVG is an img source, it has its own DOM, and needs its own stylesheet, i.e. all the @font-face declarations from the parent document. Fortunately, this only requires the user to specify the stylesheet URL. I'll bake in the most common icon fonts, and add a parameter to specify additional stylesheets.\n3. Rendering icon fonts (especially FontAwesome) using either SVG or canvas produces a seeming \"overdraw\" effect - icons appear bolder than they should be, so white space between shapes is lost. Regular fonts don't have this problem, so if you need icon fonts in placeholders, make sure to render them bigger than normal.\n. Here's what I found after much more testing:\n1. Holder now supports including XML processing instructions, link tags, and @import directives in the same file for external resources, but none of those work anywhere except for Opera and it seems to be by design.  Opening the image in a new tab works, but that's not the general use case.\n2. The first solution to this problem is to automatically use canvas to render custom fonts inside placeholders. This is workable, but it is slower and  the image is not scalable.\n3. The second solution is for designers to use <object data=\"holder.js/300x200/...\"> instead of <img src=\"holder.js/300x200/...\">, since objects don't have the same restrictions as images.\nI'm likely going to implement both approaches (and keep the external stylesheet code as well) so that users can choose whichever approach fits them best.\n. Thanks.\n. @ooxi @license is the JSDoc style - https://developers.google.com/closure/compiler/docs/js-for-compiler#tag-license, while /*! is the YUI style - https://github.com/yui/yuicompressor/blob/master/README.md#notes.\n. Good catch, IE8 thinks it supports SVG for some reason. I'll look into it.\n. That, too, seems to be related to SVG. Thanks for the catch.\n. Good catch. I'm thinking whether to disable SVG for IE or introduce an alternate generator for it. This should be resolved within the next couple of weeks.\n. If you're running that inside a $(document).ready(), it's likely you're seeing a race condition. After your append, execute Holder.run().\n. You can run Holder.run on a set of images, so that if you update an element, you only have to iterate over images inside that element, if any exist. This can be automated if you register a callback for your rendering function as well.\n. I'll look into this.\n. This should be fixed now.\n. Holder doesn't affect any non-image elements and none of the images on the site seem to be using it. Please provide a reproducible test case.\n. Closing as seems to be a regression in Chrome Canary.\n. You have to run Holder.run every time new images are added to the DOM.\n. This can definitely be implemented.\n. OK, I'll add this to the 2.4 release.\n. You're welcome. Though I'm still wrapping up docs, the feature is available and ready to use.\n. Strange, I'll try to find out what's going on this week.\n. After setting up a test case, I can confirm that this is a Chrome regression. Firefox 27.0.1, Safari 7.0.2, Opera 12.16, Midori 0.4.3, and Safari Mobile 7.0 all render web fonts immediately.\nI tested several Chromium builds and narrowed down the problem to somewhere between builds 235XXX and 237XXX. The last working build tested was 235504 (Chrome 33.0.1711).\n@cplatteeuw: I can also confirm that enabling Dev Tools shows the fonts fine.\n\n. @jvannistelrooy Please post a test case, thanks.\n. @ucommerzdev3 That's an interesting fix, though it seems more and more like the problem is in Chrome itself: https://code.google.com/p/chromium/issues/detail?id=336476\n. Thanks!\n. Edit: since unescape provides UTF-8 to ISO 8859 mapping that is otherwise not easily available, I'll merge this, however unescape should likely be replaced later due to deprecation.\n. Thanks!\n. @ooxi If there is a generic way to support these libraries, I'm all for it.\n. Sure, this can be done. I'll look into this when outstanding bugs are resolved.\n. That's all right, I need to give this more thought before moving ahead. I've been thinking of changing several conventions in the file, so if a refactor happens, many things should change at once.\n. This is now implemented and will be documented shortly.\n. Third party code will be separated in time, I appreciate your input on this issue.\n. I'll look into it, seems like a SVG bug.\n. After working on this for a while, I don't think a consistent cross-browser solution is possible. Given that the latest Opera uses Blink and Opera 12's SVG rendering is inconsistent with Chrome and Firefox, this is a corner case. For legacy support, I think it makes sense to default Opera to a canvas renderer, where there are fewer problems.\n. js\nrequire([\"holder\"], function(Holder){\nHolder.add_image(\"holder.js/200x200/vine\", \"body\").run()\n})\n. You can definitely only run Holder on visible images. If you run a jQuery selector, for example, get the nodes from it, and pass them to Holder.run, you'll only iterate over visible images.\n. Switching to that behavior by default will incur some overhead. Iterating over only visible images means that each image has to be checked (and re-checked), which is costly. There are a couple of ways to reduce the performance costs of these checks, and I'm hoping to get them into Holder as soon as possible.\n. I'm looking to do a release as soon as line breaks are implemented.\n. Unfortunately I'm not a turbolinks or Rails expert, so I can't provide a solution immediately. This might take me a week or so to look into. If you get it resolved in the meantime, let me know.\n. I haven't had the chance to set up Rails/Turbolinks, so I'm closing this for now.\n. I'll add a fix to the issue you outlined, but please don't modify the code stylistically when doing a PR. It's hard to see what exactly was changed.\n. I'll accept the PR, however the debounce parameter should be in system_config not instance_config.\n. I've pushed the latest changes, thanks for the PR.\n. Could you describe a use case for this functionality? I think it may be useful, but since you point out that it's meant to be temporary, it might not be the best idea to modify the array.\n. That makes sense, though I think it's better to add this as a general feature, i.e. (un)registering for rendering. This way, .run doesn't double as a registration function,  and concerns are kept separate. I'll keep this issue open and will close it once a general approach to solving this is implemented.\n. Will do, thanks for the suggestion.\n. This is now implemented using the setResizeUpdate(el, value) method. Calling setResizeUpdate(img, false) on an img will prevent Holder from rendering it when the window is resized. When updates are re-enabled, Holder will automatically render the image, so no additional run calls are necessary. Let me know if this solves the issue you were seeing.\n. Thanks.\n. I'll look into this.\n. I've tested both the canvas and SVG renderers on 2.3.2 and your code works: http://jsfiddle.net/KpVpc/\nMake sure to add the holderjs class to all elements with a background placeholder, as described in https://github.com/imsky/holder#background-placeholders\n. Please make sure you're using 2.3.2 or later.\n. I'm minifying Holder in the 2.4 development branch and it works without problems. If you can replicate this problem with a minimal test case, please post a link to it.\n. Let me know if this is still causing problems.\n. Thanks.\n. Good to know everything was resolved :+1: \n. The official build for 2.4+ will be a minified version.\n. The 2.4 source has been heavily refactored, but thank you for the effort.\n. I've already marked it for the 2.5 release, will be sure to fast-track it when I finish 2.4.\n. This is now done. Holder can be downloaded with npm install holderjs. It is Browserify compatible.\n. Good idea, thanks.\n. Thanks for letting me know. Holder 2.4+ uses QSA, so these errors shouldn't happen anymore. I'll push a fix after releasing 2.4.\n. QSA isn't the bottleneck for rendering. I benchmarked QSA vs. the selector function (values in ops/sec):\n| Browser | Images | QSA | Selector | Relative Difference |\n| --- | --- | --- | --- | --- |\n| Chrome 36 | 1 | 640 | 722 | 12% |\n| Chrome 36 | 10 | 111 | 113 | 2% |\n| Firefox 31 | 1 | 1026 | 1173 | 13% |\n| Firefox 31 | 10 | 108 | 122 | 12% |\nIt's a minor hit compared to the extra power QSA provides.\nAlso, you can use a custom selector function and pass its return value to Holder:\nHolder.run({images: customSelector('.customClass')})\n. The jsPerf benchmark is very minimal, and only tests the selector functions, while my benchmark tests Holder.run, where the selector functions are only a small part of the entire call.\n2.4 coming very soon :watch: \n. 2.4 is now released, so the old selector function is no longer used.\n. Fluid background placeholders are not yet supported. This feature will likely be implemented after 2.5. In the meantime, you could either use a fluid placeholder that's \"under\" the actual element, or a listener that adjusts the background image URL to its current size.\n. Thanks for the report. Seems IE8 is not playing well with augment.js, I might replace it in the future.\n. Thanks.\n. The limit is there because legacy browsers don't display the ALT text properly if it's too long - have you tested this change?\n. The title fix is what I had in mind when testing this on older browsers. I'll take a look at the proposed behavior later today.\n. Yes. Icon fonts are supported as of 2.4. Example: http://jsfiddle.net/q23ty5d4/\nhtml\n<img data-src=\"holder.js/100%x100%/sky/text:\uf113/font:FontAwesome\">\n. Nothing up-to-date I'm afraid. Let me know if this is a must-have and I'll fast-track it for the 2.5 release.\n. OK,  it has been added as an issue: https://github.com/imsky/holder/issues/114\n. I think the plugin should be as pass-through as possible, which is what motivated this issue.\nThe current holder-wp syntax of [holder height=\"50\" width=\"100\" text=\"thumbnail\"] is less compact than the official syntax, e.g. [holder src=\"100x50/text:thumbnail\"], and would require more support.\nLet me know if you update holder-wp, I'll definitely take a look.\n. All right, I'll open the issue. Regarding WP shortcodes, I'd rather have one way of doing things - custom tags for Holder images is already a stretch, since it makes things like custom themes harder.\n. I'll take a look.\n. Yes, I'll try to push a fix within the next 2-3 days.\n. This is now fixed. The bug was due to the getComputedStyle polyfill using features unavailable in IE7.\n. I'll take a look.\n. This is now fixed. The problem was due to a Safari 8 bug covered in more detail here:\n- https://github.com/emberjs/ember.js/pull/5629\n- http://stackoverflow.com/questions/25174594/typeerror-attempted-to-assign-to-readonly-property-on-ios8-safari\n. Thanks, I'm closing this as it's directly related to #116.\n. I'll bring this up with cdnjs, had a similar issue with jsdelivr.\n. A minified build has now been added. cdnjs and jsDelivr will be updated with the 2.4.1 release shortly.\n. This is a feature for the 2.5 release: https://github.com/imsky/holder/issues/106\n. I can't quite replicate the issue you're seeing. Could you update the example with holder.js and perhaps also take before/after screenshots?\n. Checking in on this - could the example be updated?\n. Thanks, I'll take a look and respond within a week.\n. Updated jsFiddle: http://jsfiddle.net/otxwn7ne/\nLet me know whether this solves your problem.\n``` js\nvar holder = $('.fileinput-new img');\nfunction updatePlaceholder() {\n    var image = $('.fileinput-preview img');\n    holder.attr({\n        'data-src': 'holder.js/' + image.width() + 'x' + image.height()\n    });\n    Holder.run({\n        images: holder[0]\n    });\n}\nfunction alignPlaceholder() {\n    if ($('.fileinput-preview img').length) {\n        return;\n    }\n    if (angle % 180 != 0) {\n        holder.attr({\n            'data-src': 'holder.js/' + holder.height() + 'x' + holder.width()\n        });\n        Holder.run({\n            images: holder[0]\n        });\n    }\n    angle = 0;\n    $('.fileinput-frame').removeClass(\"rotate0 rotate90 rotate180 rotate270\").addClass(\"rotate\" + angle);\n}\nvar angle = 0;\n$('#rotate').click(function () {\n    angle = (angle + 90) % 360;\n    $('.fileinput-frame').removeClass(\"rotate0 rotate90 rotate180 rotate270\").addClass(\"rotate\" + angle);\n    $('#rotation').val(angle);\n    updatePlaceholder();\n    alignPlaceholder();\n});\n$('[data-provides=\"fileinput\"]').on('change.bs.fileinput', updatePlaceholder);\n$('[data-provides=\"fileinput\"]').on('clear.bs.fileinput', alignPlaceholder);\n``\n. That's a CSS issue unrelated to Holder. You'll have to make the container as tall as the largest dimension at the time, which can be calculated.\n. That seems like a cryptic error message, it seems it's failing on line 12. If you can't use the minified build as-is, please give me a week or so to look into this.\n. Thesrcdirectory is meant to keep parts of Holder separate. Since there is now an unminified official build (holder.js), please use that.\n. OK, will take a look. Bower release will be updated once this bug is fixed.\n. I'll need more time to set up a Java environment to test YUI compressor. This bug will be evaluated again early January.\n. Since this seems to be related to the third partygetComputedStyle` polyfill included in Holder, I've taken it out. Let me know if YUI errors out on another part of code.\n. Please provide a test case.\n. Checking on this. Please add a test case.\n. OK thanks, I'll take a look.\n. Thanks @osricmacon I'll reply about this shortly.\n. With a minimal test case like the codepen you provided, I could not replicate this issue:\nhtml\n<!doctype html>\n<html>\n<body>\n<div style=\"height:200px\">\n  <img src=\"holder.js/100%x100%/lava\">\n  <img src=\"holder.js/100%x100%/sky\">\n</div>\n<script src=\"http://cdnjs.cloudflare.com/ajax/libs/holder/2.4.1/holder.js\"></script>\n<script src=\"http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\nLet me know if this bug still occurs for you. I'm closing the issue in the meantime.\n. @osricmacon Feel free to email me the page where you're seeing the bug.\n. Good idea, this will be implemented.\n. Closed since fluid values are now set using 100px100p syntax instead of 100%x100%.\n. There's a combination of changes here. Please only submit what is essential to the PR, which is the SVG check. Version bumps should not be part of a PR.\n. Thanks.\n. Thanks for reporting this, it definitely needs a fix. I'll add it to 2.5.\n. Sure thing, let me know if you encounter the bug in the future.\n. I figured this may come up. I'll add this to 2.6.\n. This is now implemented.\n. I knew IE would somehow mess things up. Thanks.\n. @jschill I didn't use that one because of the issues outlined in comments. I may consider it or a simpler replacement. Thanks for the suggestion though.\n. This is now implemented.\n. @beowshawitz Could you clarify what you're not seeing? The rAF error should have been fixed.\n. Looking into it, thanks @chetzof \n. Can't replicate this bug with IE9 and 2.7.1. Please post a test case.\n. Excellent, thanks.\n. @ed-jimmy could you upload your example somewhere? git/gist/zip would be great. Thanks, I'll take a look at this.\n. Looks good to me for now, I'll look into the second option in the future.\n. Thanks for letting me know. Use either pcel's or dsyko's package in the meantime.\n. There is now an official imsky:holder package.\n. You're welcome, glad to get it resolved.\n. If using data-src works, please use that. If you'd like to only use src, please provide a live URL of the breaking page.\n. Closing this due to no response. If the bug is available to review live, please post the relevant URL.\n. thanks, I'll look into it\n. thanks @kaluznyo i'll take another look - had a related bug report this week\n. ok will take another look\n. fix has been pushed to 2.9.1. let me know if you encounter this issue again\n. I've just tested the size flag in the latest ESR, it appears to be working. Please post a live example.\n\n. The example still works with 2.6.0: http://jsfiddle.net/9vuvxfkn/17/\n. No problem, glad your issue was resolved.\n. Thanks for reporting this, I'll look into it.\n. You'll need to run Holder.run on the DOM node where the template is rendered.\n. Thanks for noting this, I'll make the change.\n. Will fix.\n. I'll look into it.\n. This should be fixed in 2.8. If you keep seeing this bug please post a link to a test case.\n. Good point, this will be fixed in addImage so that you'll be able to pass in a DOM node.\nIn the meantime, the second option you proposed is the recommended way of solving this: http://jsfiddle.net/brg6sdm1/\njs\n$(function () {\n    $('div').each(function (index, el) {\n        var img = $('<img/>').attr({\n            'data-src': 'holder.js/300x200?text=' + index\n        });\n        $(el).append(img);\n        Holder.run({images: img.get(0)});\n    });\n});\n. This is now implemented. The example code can be shortened to:\njs\n$(function () {\n    $('div').each(function (index, el) {\n        Holder.addImage('holder.js/300x200?text' + index, el).run();\n    });\n});\n. This is by design: https://github.com/imsky/holder/blob/v2.8.0/src/lib/holder.js#L467\nAuto-sized HTML placeholders (the kind IE8 renders) collapse to 0x0 dimensions without an explicit width and height.\nTo fix this, before you change the src, set the width/height properties to auto/initial.\n. Try doing this instead:\njs\n$('#previewImg').css({'width': 'auto', 'height': 'auto'});\n. Great to hear it works.\n. Here is the Codepen, updated with the correct JS source and src syntax:\nhttp://codepen.io/anon/pen/doWOWO\n. It's probably best to make this feature more generic, i.e. add the ability to put the dimensions of the placeholder anywhere within the text. I'll look into implementing it.\n. What OS? Have you looked at the Activity Monitor in OS X or Task Manager in Windows or Ubuntu? CPU usage goes to 100% while profiling - are you sure it's Holder-related and that it can't be replicated with any other library?\n. That seems unlikely. Can you replicate the issue in a different browser and answer my previous questions?\n. OK can you replicate it with just requestAnimationFrame? If it's a problem with rAF it's a Chrome bug and should be filed there.\n. Good catch - I'll look into using that snippet and throttling rAF calls if necessary.\n. This should be addressed on the latest build, let me know if you still see 100% CPU usage.\n. Great to hear, thank you for reporting this.\n. if there are any fluid or auto-sized placeholders, then there will be a loop running for the whole page.\ndo you have an example page?\n. Transparency will be added either in 2.9 or 3.0. Thanks for bringing this up.\n. It's difficult to predict releases, but if it's going into 2.9, probably in August.\n. Thanks, I appreciate that. I'll keep this issue open until the feature is implemented.\n. this is now implemented. you can set foreground or background to an rgba color, so a transparent placeholder can be created like this: holder.js/300x200?bg=rgba(0,0,0,0.0)\n. https://github.com/imsky/holder#automatically-sized-placeholders\n. It needs to be cleaned up a bit (there are extra comments and whitespace), and the wording could be a bit more specific, but this seems good.\nWhy is there a section on a Browserify shim? Holder should work with Browserify out of the box.\n. @hiddentao comments added\n. Excellent, thanks very much.\n. thanks, good to know it's necessary in some contexts\n. IMG won't support custom fonts - there's a cross-origin issue with SVGs. i'll confirm to see if anything's changed in the last few months.\nas far as the topic, this is only relevant to SVG placeholders. canvas placeholders should work fine.\n. Let me know if it still fails for you.\n. interesting, i'll check it out\n. i can't replicate the breaking case - i see a blue placeholder as in the attached screenshot\nwhat browser and what version of Holder are you using?\n\n. 2.8.0 unfortunately went out a bit too soon. can you try with 2.8.2 or 2.9.0?\n. ok, since this is fixed in a later release i'm closing the issue. please let me know if you see this bug again\n. not currently implemented, but it's a good idea, will do\n. will do\n. 2.9.0 is now up on Atmosphere\n. interesting idea, will look into it\n. good catch, i'll think of a way to escape it\n. why the delay?\n. fixed via https://github.com/twbs/bootstrap/pull/19336\n. React is tricky - you have to call Holder.run when the component mounts. i'll look into adding a React example\n. sure thing, will add\n. great, thanks, will get this merged asap\n. makes sense, i'll merge the PR. hopefully nothing breaks :)\n. will do\n. thanks\n. that should be straightforward to implement. could you provide an example, and how you'd want it to display? i'm not an expert on RTL rendering so i'd like to ensure it works with real-world use cases first.\n. ok i'll add that as a test, thanks\n. i'm not sure if it can be done manually. the only thing i can think of is reversing the string before passing is to Holder\n. thanks @PerseusTheGreat . will do\n. sure, that can be done\n. server-side rendering has definitely been on my mind - something to use in build processes for example. i'll be looking at it for 3.0.\nthanks for the wrapper - it does kind of go around the idea of the URL being the config - i'll see if it can be adapted natively, and if not, i'll reference it in docs\n. Yes, as the README states: \"To avoid console 404 errors, you can use data-src instead of src.\"\n. not currently. is there an issue with using the query string format?\n. not right now, but i think 2.8 or 2.7 supported both formats. let me know if neither of those work for you\n. ok i'll see if i can ship this as an add-on\n. I don't see this happening: https://jsfiddle.net/h3asubr3/\nThe only thing I can think of is Holder.run running before your second call. If there's a live URL where this can be reproduced with the current build, let me know.\n. great, thanks for checking\n. the reason that has to be specified is because auto (and fluid) placeholders are re-rendered constantly and are thus more expensive. it does make sense to make that an option for an entire set of placeholders though. i'll look into it.\n. ok i'll think about this\n. will look into it. can you try data-src in the meantime?\n. nice, thanks for the info @hiro20v . first time i'm seeing this, not sure why Github is redirecting. will look into setting up HTTPS on holderjs.com\nin the meantime please use the library from https://cdnjs.com/libraries/holder or http://www.jsdelivr.com/projects/holder\n. great to hear :+1:\n. will do\n. will take a look, thanks for reporting\n. nice, thanks. will merge after figuring out CI issue\n. try holder.js/100px380\n. excellent, glad to help \ud83d\ude04 \n. addImage appends the placeholder: https://github.com/imsky/holder/blob/v2.9.3/src/lib/index.js#L55\nyou can do one of several things:\n- use a <img> tag\n- add a blocking <script> tag (no $(document).on('ready')) immediately after opening <body>\n- add a containing <div> immediately after opening <body> and use it with addImage\n. :+1:\n. good question, that should be an option\n. could you post a jsfiddle that shows Holder not working?\ni don't think there's built-in support, but it's definitely something that should work.\n. will look at this, maybe worth putting it into v3 along with other general improvements. this may change the general processing logic too much to be a cheap addition.\n. great suggestion, will look into it for v3\n. will look into this, Holder should work with bundlers\n. @boogermann i'm not sure exactly what's causing this. can you put together a reproducible case in a gist or git repo?. thanks @boogermann - this will be useful to include in docs for other vue/webpack users as well. @LG0012 are you seeing the same bug as outlined in this issue? if so, could you provide a webpack config where you can replicate this bug? can be bare-bones, should just be able to replicate the issue.. thanks for following up @boogermann \nas i understand, the fix here is adding Holder/holder keys to the ProviderPlugin options. let me know if there's anything else.\nwill add a section on Webpack integration and vue-holderjs shortly.. :+1:\n. can you please add a jsfiddle?\nicon fonts should work, but this may be a weird edge case\n. Not sure why JSFiddle doesn't work, but JSBin does: https://jsbin.com/gaxadoxoji\nhtml\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" class=\"holderjs\">\n</head>\n<body>\n<img data-src=\"holder.js/200x200?theme=sky&text=&#xE7F2;&size=50&font=Material Icons\">\n<object data-src=\"holder.js/200x200?theme=sky&text=mood&size=50&font=Material Icons\"></object>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.4/holder.js\"></script>\n</body>\n</html>\n. @cliveb just a quick glance, but maybe change text=&#xE7F2 to text=&#xE7F2;?\n. @cliveb can you please create a JSBin test case with the fonts properly included?\n. that's weird. will look into it\n. @mikeatm .holderjs link tags are just used to grab the stylesheet URL to insert into the placeholder. i don't think there's any interaction (aside from obvious name collisions).\n. @cliveb please use jsbin instead of jsfiddle - there's some bug causing placeholders not to render correctly (with custom fonts) on jsfiddle\n. great, thanks! \ud83d\udc4d \n. Here you go: http://jsbin.com/cupesawula\nhtml\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css\">\n</head>\n<body>\n  <img data-src=\"holder.js/150x150?font=FontAwesome&text=&#xf067;&size=50\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.4/holder.min.js\"></script>\n</body>\n</html>\n. fairly sure this is implemented: https://github.com/imsky/holder/blob/master/test/index.html#L52\nlet me know if it doesn't work for you. hmm i guess that's annoying. i'll update the issue to fix that. it will be, it's been a long time coming. i'm probably going to release it as part of v3. interesting bug, will look into it. nice, thanks for the tip. @Haocen what was the reason for closing the PR? issue resolved?. thanks for the explanation, that makes sense. thanks @davidbielik !. hmm good question. i'm planning better integration for libraries like Angular, React, etc. for Holder 3\nsince i don't use Angular 2, i don't have an immediate answer for you, but i could investigate if you post a fiddle that can reproduce your issue (which seems to be placeholders not working with Angular 2).. nice one, thanks :+1:. this already exists, use outline=1, e.g. <img data-src=\"holder.js/300x200?outline=1\">\nexample: https://jsfiddle.net/m28ntzou/\n\n. sure thing @Quix0r, glad it worked out. @Quix0r i'm not 100% sure what you mean. can you post a jsfiddle with the issue?. you can use jsfiddle without signing up @Quix0r \ngood point about the rounded corners - that wasn't factored into the \"outline\" feature. i'll file an issue to support this.. Custom labels will be specified with the following code:\nhtml\n<img src=\"holder.js/100x100/text:custom text\">\nThe text will be bound to a theme also, so you can have custom text \"classes\" i.e. columns, rows, etc.\n. Can you explain what you mean by this? Do you mean running Holder on images with specific classes, like this: Holder.run({images:\".custom-class\"}) or something different?\n. Holder has themes for this purpose. You can define custom themes and use them just like classes. \nIn your code sample, you have id:foo/class:bar, how does this differ from <img class=\"bar\" id=\"foo\"> and what would this mean in the context of Holder?\n. Can you give an example of how you'd want this to work?\n. It's an interesting idea, though it requires a fair amount of additional processing. I'll see if I can get this into 1.4.\n. @jasperkennis Compass encodes the image file using Base64 and embeds it using the data URI scheme. To mirror the same functionality, Holder would need to parse CSS, which at this stage would be unnecessary. I've already tested the CSS placeholder approach, it works, and will be included in 1.4 as soon as possible.\n. This is now implemented, see https://github.com/imsky/holder#background-placeholders\n. Test your changes before submitting a pull request in the future.\n. jsFiddle can be hit-or-miss with Github-hosted scripts. If you'd like to link to Holder remotely, use http://imsky.github.com/holder/holder.js Here's the updated fiddle: http://jsfiddle.net/wn6M9/3/\n. The code doesn't conform to how flags are set up. Also, I'm not sure specifying square images with one number is necessary, it would be extra code for a very limited use case. Let me know why you think this should be in Holder.\n. I'll consider it, thanks for taking the time to put the pull request together.\n. Thanks for finding this bug. It's now fixed in the latest source.\n. Yes, Holder offers a run method that can be customized: https://github.com/imsky/holder#using-custom-themes-and-domain-on-specific-images\nYou can run it on a specific selector like so: Holder.run({images:\".placeholder\"}).\nLet me know if that works or if you're specifically looking for jQuery integration.\n. I just ran some IE8 tests with .show() and Holder, they don't seem to affect each other. Please isolate the bug and paste your code on Gist.\n. Closing as inactive.\n. Currently the only way to do this is by re-rendering placeholders periodically and on resize events. I'll have to look into the performance implications of this and see if there's a better way of doing it.\n. This is now implemented: https://github.com/imsky/holder#fluid-placeholders\n. The reason background color is set is so that Holder can gracefully degrade on clients that don't support <canvas> (IE6, Android 2.*). It's possible that it'll also be used in the future as another way to implement fluid placeholders.\n. Yes you can, check https://github.com/imsky/holder#background-placeholders\n``` css\nimage {background:url(?holder.js/100x100/social)}\n```\nhtml\n<div id=\"image\" class=\"holderjs\"></div>\n. v1.7 has been updated with a new component.json. Let me know if you're still having issues.\n. I'll look into it and let you know what's possible.\n. Could you let me know how you aim to use lazyload.js with Holder?\n. I've added support for fluid placeholders, fixed-width placeholders work well with lazyload.js. Let me know how it works for you.\n. Yes, the font flag works just like the CSS font-family rule. If Monaco isn't available, the next font in the stack is used.\n. You can now use Holder.run({images: element.get(0)}), and use Nodes and NodeLists for the images property in general.\n. Just pushed a patch, now there's only one Holder style element per document.\n. I've added a nocss option, which will stop CSS generation. You can use it like this: \njs\nHolder.run({images:\".img\", nocss:true})\n. Passing the element to run is incorrect, the function expects a configuration object. You should test Holder.run manually to ensure you're not calling it with default options, since otherwise you're iterating over every img tag in the document.\n. Thanks for noticing, had to pull in the latest version for the site.\n. Fixed, thanks for letting me know.\n. Thanks for your kind words, the bug should be fixed now.\n. Hi @klihelp, please try the latest Holder file and let me know if you're still having issues.\n. This is fixed now.\n. This is fixed. I'll switch Holder to use semver from now on.\n. Looking into this.\n. Though I only saw a MIME notice, not a 404 error, the option to define background images as a data attribute is now available:\nhtml\n<div class=\"holderjs\" data-background-src=\"holder.js/100x100/industrial\"></div>\n. Could you post a live example please?\nOn Feb 27, 2013, at 7:59 AM, sebastianthomas notifications@github.com wrote:\n\nDon't know if anyone has seen this bug yet, if not I can upload an example somewhere.\nI'm using the Bootstrap example page with the carousel (which is where I found out about holder.js btw!), and using holder images in the carousel slides, only the holder images on the first slide displays the text (dimensions) correctly. The rest show 0x0 as the text (although the holders are the correct size), and the text isn't vertically centred, rather at the top of the placeholder.\nTried moving the js around from footer etc, doesn't seem to make a diff. \nThanks\n\u2014\nReply to this email directly or view it on GitHub.\n. I get a user/password dialog. Could you upload it to Dropbox or Google Drive please?\n. Let me know if the error's resolved. I'm closing the issue in 7 days if there's no further development.\n. I'll look into this.\n. It was a bug that's since been fixed. Please use the latest version.\n. Please provide a testcase I can download and replicate the issue with.\n. \n\nNo errors.\n. I'll look into it later this week.\n. Can you explain in more detail what the problem is? Retina placeholders should have predictable behavior.\n. Closing, no response.\n. I'll look into this.\n. This is the intended behavior. I'll add a switch to use literal size.\n. @creocoder This issue was closed as it is a duplicate of #40.\n. Right, I'll look into this.\n. Will take a look this weekend.\n. I removed the minified version, since it's just the output of a Grunt task. Please rely on the main holder.js file.\n. You'll have to run the Holder.run method. Please see this StackOverflow question: http://stackoverflow.com/questions/14915237/holder-js-get-back-dom-element\nThe code used there is the following:\n``` js\nvar image = $(\"\").attr({\n    \"data-src\": \"holder.js/300x200\"\n})\nHolder.run({\n    images: image[0]\n});\nimage.appendTo(\"body\");\n``\n. Please provide an example use case, I'll see what I can do.\n. The issue here is that the lightbox code responsible for wrapping the larger image should also be responsible for rendering the placeholder, i.e. for executingHolder.run`. As your example points out, you'd need at least a \"data-href\" attribute to ensure that the Holder URL is treated as an actual image. If you post the lightbox script you're using, I could write a plug-in or patch that fixes this issue, but this is not something that can be fixed within Holder.\n. I'll merge it as soon as I get around to adding the URL flags for it.\n. Since Holder now uses SVG by default, this will need to be reimplemented. I'm closing the issue, but the feature will be implemented as soon as possible.\n. Thanks.\n. Will look into this.\n. This should be fixed now. I've installed v2.1.0 with Bower on my system, let me know if there are still errors on your end: the package may need to be unregistered and re-registered.\n. Which browser are you using?\n. Have you tried any of the past releases, such as 1.9? Do they work?\n. Can you confirm that you're still seeing the bug?\n. Closing due to no response.\n. If you could, that would be great, thanks.\nOn Sep 6, 2013, at 5:46 AM, Rarst notifications@github.com wrote:\n\n@imsky as per my comments this is still not quite correct, seems @rthrfrd gravitated somewhere, want me to do a pull to fix it up?\n\u2014\nReply to this email directly or view it on GitHub.\n. It's up on Packagist now: https://packagist.org/packages/imsky/holder\n. You'll need to call Holder.run after changing the src attribute to data-src.\n. I can replicate the bug. The placeholders are rendered once the window is resized, which seems to be a clientHeight/clientWidth bug. I'll look into this.\n. Good idea, I'll think about how to set this up.\n. This is now implemented, see https://github.com/imsky/holder#automatically-sized-placeholders\n. This is now fixed.\n. Have you tried percentage widths for both dimensions? Something like <div style=\"width:500px;height:200px\"><img data-src=\"holder.js/100%x100%\"></div>\n. This is now implemented, using the auto flag on a fluid image, like so: <img data-src=\"holder.js/100%x100/auto\">\n. Have you downloaded the latest file?\nOn Oct 22, 2013, at 4:43 PM, Brad Shaw notifications@github.com wrote:\nI tried that, but it doesn't work. Height stays at whatever you set it to. In your example above the height stays pegged at 100px while the width adapts to the container width.\n\u2014\nReply to this email directly or view it on GitHub.\n. You shouldn't use Holder.run to replace the image. Use jQuery: $(\"#placeholder\").css(\"height\", \"auto\").attr(\"src\",\"image.jpg\").\n. Canvas still has wider support than SVG, especially in older Firefox versions. However, I did add a SVG renderer and it looks like there is a significant speed up:\n\n\nBrowserImagesCanvasSVGSVG speedup\n\nChrome 305013 ops/sec152 ops/sec12x\nChrome 301006.5 ops/sec80.8 ops/sec12x\nChrome 302003.3 ops/sec43.3 ops/sec13x\nFirefox 24502.4 ops/sec50 ops/sec21x\nFirefox 241001.2 ops/sec26.8 ops/sec22x\nFirefox 242000.6 ops/sec13.5 ops/sec23x\n\n\nI'll continue working on the SVG renderer and it may be included in the next version.\n. I'll push the SVG renderer as soon as the canvas fallback is implemented for older browsers.\n. Interesting idea, but the changes add some noise to the code. I'll see if it's possible to keep this idea with a cleaner implementation.\n. This is now implemented. When an invisible placeholder is encountered, Holder.invisible_error_fn is run with one argument, its caller. A closure is expected that takes one argument, the img element of the invisible placeholder. Here you can register the invisible placeholders and re-render them as necessary.\n. The reason an error is thrown on invisible elements is exactly because there is an inconsistency across browsers when getting the client dimensions for an element. The logic to get reasonable dimensions quickly becomes complicated (if the parent element is also invisible, for example). I'll look into this again, though it may require a more explicit workaround than just falling back to the parent element.\n. This likely won't have a permanent fix, due to the previously mentioned problems. The logic just gets too complicated when considering all possible cases. However, since an error callback has been introduced, there is a workaround that will continuously attempt to render all invisible placeholders. You'll have to override the error callback in the following way:\njs\nHolder.invisible_error_fn = function(fn){\n    return function(el){\n        setTimeout(function(){\n            fn.call(this, el)\n        }, 10)\n    }\n}\nThis workaround does not provide optimal performance, so it should only be used in special cases. You can also use the callback to create a solution that works in your case.\n. I've already implemented a SVG renderer which uses the DOM instead of string interpolation, see https://github.com/imsky/holder/issues/65. I'll commit it after I implement feature testing logic.\n. This is just the comma operator: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator.\n. I'll take a look at this.\n. I can't replicate this in Chrome or Firefox using v2.0. Can you post a minimal test case and the browser you're using?\n. Just tested v2.3.2 for this bug and still can't replicate it.\n. This bug should be fixed now, let me know if you see any other errors.\n. It seems you're getting this error because you're calling Holder.run() (without any options), though I can't reproduce the bug in any configuration. I pushed another fix, let me know if you're still seeing the error.\n. @iorigin you shouldn't have that problem anymore, the default Holder.run call now always uses an empty object. Please post a minimal test case if you're seeing this problem with the latest source.\n. Good idea, I'll look into it.\n. Icon font support is on the roadmap and this issue has been brought up before, so I'll definitely look into this.\n. This should be fixed now.\n. After much testing, here's what I found.\n1. Canvas web fonts work easily only in Firefox. Chrome and Opera require a re-render after a >10 ms delay to work, so this can be built as a special case for custom-font placeholders.\n2. SVG web fonts work fine when the svg element is part of the main body. However, when the SVG is an img source, it has its own DOM, and needs its own stylesheet, i.e. all the @font-face declarations from the parent document. Fortunately, this only requires the user to specify the stylesheet URL. I'll bake in the most common icon fonts, and add a parameter to specify additional stylesheets.\n3. Rendering icon fonts (especially FontAwesome) using either SVG or canvas produces a seeming \"overdraw\" effect - icons appear bolder than they should be, so white space between shapes is lost. Regular fonts don't have this problem, so if you need icon fonts in placeholders, make sure to render them bigger than normal.\n. Here's what I found after much more testing:\n1. Holder now supports including XML processing instructions, link tags, and @import directives in the same file for external resources, but none of those work anywhere except for Opera and it seems to be by design.  Opening the image in a new tab works, but that's not the general use case.\n2. The first solution to this problem is to automatically use canvas to render custom fonts inside placeholders. This is workable, but it is slower and  the image is not scalable.\n3. The second solution is for designers to use <object data=\"holder.js/300x200/...\"> instead of <img src=\"holder.js/300x200/...\">, since objects don't have the same restrictions as images.\nI'm likely going to implement both approaches (and keep the external stylesheet code as well) so that users can choose whichever approach fits them best.\n. Thanks.\n. @ooxi @license is the JSDoc style - https://developers.google.com/closure/compiler/docs/js-for-compiler#tag-license, while /*! is the YUI style - https://github.com/yui/yuicompressor/blob/master/README.md#notes.\n. Good catch, IE8 thinks it supports SVG for some reason. I'll look into it.\n. That, too, seems to be related to SVG. Thanks for the catch.\n. Good catch. I'm thinking whether to disable SVG for IE or introduce an alternate generator for it. This should be resolved within the next couple of weeks.\n. If you're running that inside a $(document).ready(), it's likely you're seeing a race condition. After your append, execute Holder.run().\n. You can run Holder.run on a set of images, so that if you update an element, you only have to iterate over images inside that element, if any exist. This can be automated if you register a callback for your rendering function as well.\n. I'll look into this.\n. This should be fixed now.\n. Holder doesn't affect any non-image elements and none of the images on the site seem to be using it. Please provide a reproducible test case.\n. Closing as seems to be a regression in Chrome Canary.\n. You have to run Holder.run every time new images are added to the DOM.\n. This can definitely be implemented.\n. OK, I'll add this to the 2.4 release.\n. You're welcome. Though I'm still wrapping up docs, the feature is available and ready to use.\n. Strange, I'll try to find out what's going on this week.\n. After setting up a test case, I can confirm that this is a Chrome regression. Firefox 27.0.1, Safari 7.0.2, Opera 12.16, Midori 0.4.3, and Safari Mobile 7.0 all render web fonts immediately.\nI tested several Chromium builds and narrowed down the problem to somewhere between builds 235XXX and 237XXX. The last working build tested was 235504 (Chrome 33.0.1711).\n@cplatteeuw: I can also confirm that enabling Dev Tools shows the fonts fine.\n\n. @jvannistelrooy Please post a test case, thanks.\n. @ucommerzdev3 That's an interesting fix, though it seems more and more like the problem is in Chrome itself: https://code.google.com/p/chromium/issues/detail?id=336476\n. Thanks!\n. Edit: since unescape provides UTF-8 to ISO 8859 mapping that is otherwise not easily available, I'll merge this, however unescape should likely be replaced later due to deprecation.\n. Thanks!\n. @ooxi If there is a generic way to support these libraries, I'm all for it.\n. Sure, this can be done. I'll look into this when outstanding bugs are resolved.\n. That's all right, I need to give this more thought before moving ahead. I've been thinking of changing several conventions in the file, so if a refactor happens, many things should change at once.\n. This is now implemented and will be documented shortly.\n. Third party code will be separated in time, I appreciate your input on this issue.\n. I'll look into it, seems like a SVG bug.\n. After working on this for a while, I don't think a consistent cross-browser solution is possible. Given that the latest Opera uses Blink and Opera 12's SVG rendering is inconsistent with Chrome and Firefox, this is a corner case. For legacy support, I think it makes sense to default Opera to a canvas renderer, where there are fewer problems.\n. js\nrequire([\"holder\"], function(Holder){\nHolder.add_image(\"holder.js/200x200/vine\", \"body\").run()\n})\n. You can definitely only run Holder on visible images. If you run a jQuery selector, for example, get the nodes from it, and pass them to Holder.run, you'll only iterate over visible images.\n. Switching to that behavior by default will incur some overhead. Iterating over only visible images means that each image has to be checked (and re-checked), which is costly. There are a couple of ways to reduce the performance costs of these checks, and I'm hoping to get them into Holder as soon as possible.\n. I'm looking to do a release as soon as line breaks are implemented.\n. Unfortunately I'm not a turbolinks or Rails expert, so I can't provide a solution immediately. This might take me a week or so to look into. If you get it resolved in the meantime, let me know.\n. I haven't had the chance to set up Rails/Turbolinks, so I'm closing this for now.\n. I'll add a fix to the issue you outlined, but please don't modify the code stylistically when doing a PR. It's hard to see what exactly was changed.\n. I'll accept the PR, however the debounce parameter should be in system_config not instance_config.\n. I've pushed the latest changes, thanks for the PR.\n. Could you describe a use case for this functionality? I think it may be useful, but since you point out that it's meant to be temporary, it might not be the best idea to modify the array.\n. That makes sense, though I think it's better to add this as a general feature, i.e. (un)registering for rendering. This way, .run doesn't double as a registration function,  and concerns are kept separate. I'll keep this issue open and will close it once a general approach to solving this is implemented.\n. Will do, thanks for the suggestion.\n. This is now implemented using the setResizeUpdate(el, value) method. Calling setResizeUpdate(img, false) on an img will prevent Holder from rendering it when the window is resized. When updates are re-enabled, Holder will automatically render the image, so no additional run calls are necessary. Let me know if this solves the issue you were seeing.\n. Thanks.\n. I'll look into this.\n. I've tested both the canvas and SVG renderers on 2.3.2 and your code works: http://jsfiddle.net/KpVpc/\nMake sure to add the holderjs class to all elements with a background placeholder, as described in https://github.com/imsky/holder#background-placeholders\n. Please make sure you're using 2.3.2 or later.\n. I'm minifying Holder in the 2.4 development branch and it works without problems. If you can replicate this problem with a minimal test case, please post a link to it.\n. Let me know if this is still causing problems.\n. Thanks.\n. Good to know everything was resolved :+1: \n. The official build for 2.4+ will be a minified version.\n. The 2.4 source has been heavily refactored, but thank you for the effort.\n. I've already marked it for the 2.5 release, will be sure to fast-track it when I finish 2.4.\n. This is now done. Holder can be downloaded with npm install holderjs. It is Browserify compatible.\n. Good idea, thanks.\n. Thanks for letting me know. Holder 2.4+ uses QSA, so these errors shouldn't happen anymore. I'll push a fix after releasing 2.4.\n. QSA isn't the bottleneck for rendering. I benchmarked QSA vs. the selector function (values in ops/sec):\n| Browser | Images | QSA | Selector | Relative Difference |\n| --- | --- | --- | --- | --- |\n| Chrome 36 | 1 | 640 | 722 | 12% |\n| Chrome 36 | 10 | 111 | 113 | 2% |\n| Firefox 31 | 1 | 1026 | 1173 | 13% |\n| Firefox 31 | 10 | 108 | 122 | 12% |\nIt's a minor hit compared to the extra power QSA provides.\nAlso, you can use a custom selector function and pass its return value to Holder:\nHolder.run({images: customSelector('.customClass')})\n. The jsPerf benchmark is very minimal, and only tests the selector functions, while my benchmark tests Holder.run, where the selector functions are only a small part of the entire call.\n2.4 coming very soon :watch: \n. 2.4 is now released, so the old selector function is no longer used.\n. Fluid background placeholders are not yet supported. This feature will likely be implemented after 2.5. In the meantime, you could either use a fluid placeholder that's \"under\" the actual element, or a listener that adjusts the background image URL to its current size.\n. Thanks for the report. Seems IE8 is not playing well with augment.js, I might replace it in the future.\n. Thanks.\n. The limit is there because legacy browsers don't display the ALT text properly if it's too long - have you tested this change?\n. The title fix is what I had in mind when testing this on older browsers. I'll take a look at the proposed behavior later today.\n. Yes. Icon fonts are supported as of 2.4. Example: http://jsfiddle.net/q23ty5d4/\nhtml\n<img data-src=\"holder.js/100%x100%/sky/text:\uf113/font:FontAwesome\">\n. Nothing up-to-date I'm afraid. Let me know if this is a must-have and I'll fast-track it for the 2.5 release.\n. OK,  it has been added as an issue: https://github.com/imsky/holder/issues/114\n. I think the plugin should be as pass-through as possible, which is what motivated this issue.\nThe current holder-wp syntax of [holder height=\"50\" width=\"100\" text=\"thumbnail\"] is less compact than the official syntax, e.g. [holder src=\"100x50/text:thumbnail\"], and would require more support.\nLet me know if you update holder-wp, I'll definitely take a look.\n. All right, I'll open the issue. Regarding WP shortcodes, I'd rather have one way of doing things - custom tags for Holder images is already a stretch, since it makes things like custom themes harder.\n. I'll take a look.\n. Yes, I'll try to push a fix within the next 2-3 days.\n. This is now fixed. The bug was due to the getComputedStyle polyfill using features unavailable in IE7.\n. I'll take a look.\n. This is now fixed. The problem was due to a Safari 8 bug covered in more detail here:\n- https://github.com/emberjs/ember.js/pull/5629\n- http://stackoverflow.com/questions/25174594/typeerror-attempted-to-assign-to-readonly-property-on-ios8-safari\n. Thanks, I'm closing this as it's directly related to #116.\n. I'll bring this up with cdnjs, had a similar issue with jsdelivr.\n. A minified build has now been added. cdnjs and jsDelivr will be updated with the 2.4.1 release shortly.\n. This is a feature for the 2.5 release: https://github.com/imsky/holder/issues/106\n. I can't quite replicate the issue you're seeing. Could you update the example with holder.js and perhaps also take before/after screenshots?\n. Checking in on this - could the example be updated?\n. Thanks, I'll take a look and respond within a week.\n. Updated jsFiddle: http://jsfiddle.net/otxwn7ne/\nLet me know whether this solves your problem.\n``` js\nvar holder = $('.fileinput-new img');\nfunction updatePlaceholder() {\n    var image = $('.fileinput-preview img');\n    holder.attr({\n        'data-src': 'holder.js/' + image.width() + 'x' + image.height()\n    });\n    Holder.run({\n        images: holder[0]\n    });\n}\nfunction alignPlaceholder() {\n    if ($('.fileinput-preview img').length) {\n        return;\n    }\n    if (angle % 180 != 0) {\n        holder.attr({\n            'data-src': 'holder.js/' + holder.height() + 'x' + holder.width()\n        });\n        Holder.run({\n            images: holder[0]\n        });\n    }\n    angle = 0;\n    $('.fileinput-frame').removeClass(\"rotate0 rotate90 rotate180 rotate270\").addClass(\"rotate\" + angle);\n}\nvar angle = 0;\n$('#rotate').click(function () {\n    angle = (angle + 90) % 360;\n    $('.fileinput-frame').removeClass(\"rotate0 rotate90 rotate180 rotate270\").addClass(\"rotate\" + angle);\n    $('#rotation').val(angle);\n    updatePlaceholder();\n    alignPlaceholder();\n});\n$('[data-provides=\"fileinput\"]').on('change.bs.fileinput', updatePlaceholder);\n$('[data-provides=\"fileinput\"]').on('clear.bs.fileinput', alignPlaceholder);\n``\n. That's a CSS issue unrelated to Holder. You'll have to make the container as tall as the largest dimension at the time, which can be calculated.\n. That seems like a cryptic error message, it seems it's failing on line 12. If you can't use the minified build as-is, please give me a week or so to look into this.\n. Thesrcdirectory is meant to keep parts of Holder separate. Since there is now an unminified official build (holder.js), please use that.\n. OK, will take a look. Bower release will be updated once this bug is fixed.\n. I'll need more time to set up a Java environment to test YUI compressor. This bug will be evaluated again early January.\n. Since this seems to be related to the third partygetComputedStyle` polyfill included in Holder, I've taken it out. Let me know if YUI errors out on another part of code.\n. Please provide a test case.\n. Checking on this. Please add a test case.\n. OK thanks, I'll take a look.\n. Thanks @osricmacon I'll reply about this shortly.\n. With a minimal test case like the codepen you provided, I could not replicate this issue:\nhtml\n<!doctype html>\n<html>\n<body>\n<div style=\"height:200px\">\n  <img src=\"holder.js/100%x100%/lava\">\n  <img src=\"holder.js/100%x100%/sky\">\n</div>\n<script src=\"http://cdnjs.cloudflare.com/ajax/libs/holder/2.4.1/holder.js\"></script>\n<script src=\"http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\nLet me know if this bug still occurs for you. I'm closing the issue in the meantime.\n. @osricmacon Feel free to email me the page where you're seeing the bug.\n. Good idea, this will be implemented.\n. Closed since fluid values are now set using 100px100p syntax instead of 100%x100%.\n. There's a combination of changes here. Please only submit what is essential to the PR, which is the SVG check. Version bumps should not be part of a PR.\n. Thanks.\n. Thanks for reporting this, it definitely needs a fix. I'll add it to 2.5.\n. Sure thing, let me know if you encounter the bug in the future.\n. I figured this may come up. I'll add this to 2.6.\n. This is now implemented.\n. I knew IE would somehow mess things up. Thanks.\n. @jschill I didn't use that one because of the issues outlined in comments. I may consider it or a simpler replacement. Thanks for the suggestion though.\n. This is now implemented.\n. @beowshawitz Could you clarify what you're not seeing? The rAF error should have been fixed.\n. Looking into it, thanks @chetzof \n. Can't replicate this bug with IE9 and 2.7.1. Please post a test case.\n. Excellent, thanks.\n. @ed-jimmy could you upload your example somewhere? git/gist/zip would be great. Thanks, I'll take a look at this.\n. Looks good to me for now, I'll look into the second option in the future.\n. Thanks for letting me know. Use either pcel's or dsyko's package in the meantime.\n. There is now an official imsky:holder package.\n. You're welcome, glad to get it resolved.\n. If using data-src works, please use that. If you'd like to only use src, please provide a live URL of the breaking page.\n. Closing this due to no response. If the bug is available to review live, please post the relevant URL.\n. thanks, I'll look into it\n. thanks @kaluznyo i'll take another look - had a related bug report this week\n. ok will take another look\n. fix has been pushed to 2.9.1. let me know if you encounter this issue again\n. I've just tested the size flag in the latest ESR, it appears to be working. Please post a live example.\n\n. The example still works with 2.6.0: http://jsfiddle.net/9vuvxfkn/17/\n. No problem, glad your issue was resolved.\n. Thanks for reporting this, I'll look into it.\n. You'll need to run Holder.run on the DOM node where the template is rendered.\n. Thanks for noting this, I'll make the change.\n. Will fix.\n. I'll look into it.\n. This should be fixed in 2.8. If you keep seeing this bug please post a link to a test case.\n. Good point, this will be fixed in addImage so that you'll be able to pass in a DOM node.\nIn the meantime, the second option you proposed is the recommended way of solving this: http://jsfiddle.net/brg6sdm1/\njs\n$(function () {\n    $('div').each(function (index, el) {\n        var img = $('<img/>').attr({\n            'data-src': 'holder.js/300x200?text=' + index\n        });\n        $(el).append(img);\n        Holder.run({images: img.get(0)});\n    });\n});\n. This is now implemented. The example code can be shortened to:\njs\n$(function () {\n    $('div').each(function (index, el) {\n        Holder.addImage('holder.js/300x200?text' + index, el).run();\n    });\n});\n. This is by design: https://github.com/imsky/holder/blob/v2.8.0/src/lib/holder.js#L467\nAuto-sized HTML placeholders (the kind IE8 renders) collapse to 0x0 dimensions without an explicit width and height.\nTo fix this, before you change the src, set the width/height properties to auto/initial.\n. Try doing this instead:\njs\n$('#previewImg').css({'width': 'auto', 'height': 'auto'});\n. Great to hear it works.\n. Here is the Codepen, updated with the correct JS source and src syntax:\nhttp://codepen.io/anon/pen/doWOWO\n. It's probably best to make this feature more generic, i.e. add the ability to put the dimensions of the placeholder anywhere within the text. I'll look into implementing it.\n. What OS? Have you looked at the Activity Monitor in OS X or Task Manager in Windows or Ubuntu? CPU usage goes to 100% while profiling - are you sure it's Holder-related and that it can't be replicated with any other library?\n. That seems unlikely. Can you replicate the issue in a different browser and answer my previous questions?\n. OK can you replicate it with just requestAnimationFrame? If it's a problem with rAF it's a Chrome bug and should be filed there.\n. Good catch - I'll look into using that snippet and throttling rAF calls if necessary.\n. This should be addressed on the latest build, let me know if you still see 100% CPU usage.\n. Great to hear, thank you for reporting this.\n. if there are any fluid or auto-sized placeholders, then there will be a loop running for the whole page.\ndo you have an example page?\n. Transparency will be added either in 2.9 or 3.0. Thanks for bringing this up.\n. It's difficult to predict releases, but if it's going into 2.9, probably in August.\n. Thanks, I appreciate that. I'll keep this issue open until the feature is implemented.\n. this is now implemented. you can set foreground or background to an rgba color, so a transparent placeholder can be created like this: holder.js/300x200?bg=rgba(0,0,0,0.0)\n. https://github.com/imsky/holder#automatically-sized-placeholders\n. It needs to be cleaned up a bit (there are extra comments and whitespace), and the wording could be a bit more specific, but this seems good.\nWhy is there a section on a Browserify shim? Holder should work with Browserify out of the box.\n. @hiddentao comments added\n. Excellent, thanks very much.\n. thanks, good to know it's necessary in some contexts\n. IMG won't support custom fonts - there's a cross-origin issue with SVGs. i'll confirm to see if anything's changed in the last few months.\nas far as the topic, this is only relevant to SVG placeholders. canvas placeholders should work fine.\n. Let me know if it still fails for you.\n. interesting, i'll check it out\n. i can't replicate the breaking case - i see a blue placeholder as in the attached screenshot\nwhat browser and what version of Holder are you using?\n\n. 2.8.0 unfortunately went out a bit too soon. can you try with 2.8.2 or 2.9.0?\n. ok, since this is fixed in a later release i'm closing the issue. please let me know if you see this bug again\n. not currently implemented, but it's a good idea, will do\n. will do\n. 2.9.0 is now up on Atmosphere\n. interesting idea, will look into it\n. good catch, i'll think of a way to escape it\n. why the delay?\n. fixed via https://github.com/twbs/bootstrap/pull/19336\n. React is tricky - you have to call Holder.run when the component mounts. i'll look into adding a React example\n. sure thing, will add\n. great, thanks, will get this merged asap\n. makes sense, i'll merge the PR. hopefully nothing breaks :)\n. will do\n. thanks\n. that should be straightforward to implement. could you provide an example, and how you'd want it to display? i'm not an expert on RTL rendering so i'd like to ensure it works with real-world use cases first.\n. ok i'll add that as a test, thanks\n. i'm not sure if it can be done manually. the only thing i can think of is reversing the string before passing is to Holder\n. thanks @PerseusTheGreat . will do\n. sure, that can be done\n. server-side rendering has definitely been on my mind - something to use in build processes for example. i'll be looking at it for 3.0.\nthanks for the wrapper - it does kind of go around the idea of the URL being the config - i'll see if it can be adapted natively, and if not, i'll reference it in docs\n. Yes, as the README states: \"To avoid console 404 errors, you can use data-src instead of src.\"\n. not currently. is there an issue with using the query string format?\n. not right now, but i think 2.8 or 2.7 supported both formats. let me know if neither of those work for you\n. ok i'll see if i can ship this as an add-on\n. I don't see this happening: https://jsfiddle.net/h3asubr3/\nThe only thing I can think of is Holder.run running before your second call. If there's a live URL where this can be reproduced with the current build, let me know.\n. great, thanks for checking\n. the reason that has to be specified is because auto (and fluid) placeholders are re-rendered constantly and are thus more expensive. it does make sense to make that an option for an entire set of placeholders though. i'll look into it.\n. ok i'll think about this\n. will look into it. can you try data-src in the meantime?\n. nice, thanks for the info @hiro20v . first time i'm seeing this, not sure why Github is redirecting. will look into setting up HTTPS on holderjs.com\nin the meantime please use the library from https://cdnjs.com/libraries/holder or http://www.jsdelivr.com/projects/holder\n. great to hear :+1:\n. will do\n. will take a look, thanks for reporting\n. nice, thanks. will merge after figuring out CI issue\n. try holder.js/100px380\n. excellent, glad to help \ud83d\ude04 \n. addImage appends the placeholder: https://github.com/imsky/holder/blob/v2.9.3/src/lib/index.js#L55\nyou can do one of several things:\n- use a <img> tag\n- add a blocking <script> tag (no $(document).on('ready')) immediately after opening <body>\n- add a containing <div> immediately after opening <body> and use it with addImage\n. :+1:\n. good question, that should be an option\n. could you post a jsfiddle that shows Holder not working?\ni don't think there's built-in support, but it's definitely something that should work.\n. will look at this, maybe worth putting it into v3 along with other general improvements. this may change the general processing logic too much to be a cheap addition.\n. great suggestion, will look into it for v3\n. will look into this, Holder should work with bundlers\n. @boogermann i'm not sure exactly what's causing this. can you put together a reproducible case in a gist or git repo?. thanks @boogermann - this will be useful to include in docs for other vue/webpack users as well. @LG0012 are you seeing the same bug as outlined in this issue? if so, could you provide a webpack config where you can replicate this bug? can be bare-bones, should just be able to replicate the issue.. thanks for following up @boogermann \nas i understand, the fix here is adding Holder/holder keys to the ProviderPlugin options. let me know if there's anything else.\nwill add a section on Webpack integration and vue-holderjs shortly.. :+1:\n. can you please add a jsfiddle?\nicon fonts should work, but this may be a weird edge case\n. Not sure why JSFiddle doesn't work, but JSBin does: https://jsbin.com/gaxadoxoji\nhtml\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" class=\"holderjs\">\n</head>\n<body>\n<img data-src=\"holder.js/200x200?theme=sky&text=&#xE7F2;&size=50&font=Material Icons\">\n<object data-src=\"holder.js/200x200?theme=sky&text=mood&size=50&font=Material Icons\"></object>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.4/holder.js\"></script>\n</body>\n</html>\n. @cliveb just a quick glance, but maybe change text=&#xE7F2 to text=&#xE7F2;?\n. @cliveb can you please create a JSBin test case with the fonts properly included?\n. that's weird. will look into it\n. @mikeatm .holderjs link tags are just used to grab the stylesheet URL to insert into the placeholder. i don't think there's any interaction (aside from obvious name collisions).\n. @cliveb please use jsbin instead of jsfiddle - there's some bug causing placeholders not to render correctly (with custom fonts) on jsfiddle\n. great, thanks! \ud83d\udc4d \n. Here you go: http://jsbin.com/cupesawula\nhtml\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css\">\n</head>\n<body>\n  <img data-src=\"holder.js/150x150?font=FontAwesome&text=&#xf067;&size=50\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.4/holder.min.js\"></script>\n</body>\n</html>\n. fairly sure this is implemented: https://github.com/imsky/holder/blob/master/test/index.html#L52\nlet me know if it doesn't work for you. hmm i guess that's annoying. i'll update the issue to fix that. it will be, it's been a long time coming. i'm probably going to release it as part of v3. interesting bug, will look into it. nice, thanks for the tip. @Haocen what was the reason for closing the PR? issue resolved?. thanks for the explanation, that makes sense. thanks @davidbielik !. hmm good question. i'm planning better integration for libraries like Angular, React, etc. for Holder 3\nsince i don't use Angular 2, i don't have an immediate answer for you, but i could investigate if you post a fiddle that can reproduce your issue (which seems to be placeholders not working with Angular 2).. nice one, thanks :+1:. this already exists, use outline=1, e.g. <img data-src=\"holder.js/300x200?outline=1\">\nexample: https://jsfiddle.net/m28ntzou/\n\n. sure thing @Quix0r, glad it worked out. @Quix0r i'm not 100% sure what you mean. can you post a jsfiddle with the issue?. you can use jsfiddle without signing up @Quix0r \ngood point about the rounded corners - that wasn't factored into the \"outline\" feature. i'll file an issue to support this.. ",
    "kylekelly": "Excellent, sounds great.\n. Excellent, sounds great.\n. ",
    "su": "No, this would be custom classes on specific images, similar to the text feature. So, if I'm working on a new layout and have several image classes that I need to make sure are working properly(like left, center, and right), I could use holder to test them case-by-case. \nI just realized I didn't indent the code sample in my original message. Maybe that will clarify also.\n. Ugh. It's not different. I somehow convinced myself that the rest of the attributes on the tag weren't just passed through as-is. Ignore.\n. No, this would be custom classes on specific images, similar to the text feature. So, if I'm working on a new layout and have several image classes that I need to make sure are working properly(like left, center, and right), I could use holder to test them case-by-case. \nI just realized I didn't indent the code sample in my original message. Maybe that will clarify also.\n. Ugh. It's not different. I somehow convinced myself that the rest of the attributes on the tag weren't just passed through as-is. Ignore.\n. ",
    "pfk-beta": "I placed in css something like this:\nbackground-image: url('holder.js/200x300');\nThen Holder checks all element in DOM, in searching css atribute background-image. If found, it changes it. And I'm wondering whether is it worthwhile.\n. I will. Thanks.\n. I placed in css something like this:\nbackground-image: url('holder.js/200x300');\nThen Holder checks all element in DOM, in searching css atribute background-image. If found, it changes it. And I'm wondering whether is it worthwhile.\n. I will. Thanks.\n. ",
    "timiles": "I need this too - in the meantime, I have worked around this with custom js (requires jQuery):\nvar backgroundImageContainer = $(\"<div>\").attr(\"id\", <some_unique_id>).addClass(\"hidden\");\n            $(\"body\").append(backgroundImageContainer);\n            Holder.add_image(\"holder.js?200x200\", \"#\" + backgroundImageContainer.attr(\"id\")).run();\n            $(<my_element_selector>).css(\"background-image\", \"url(\" + $(\"img\", backgroundImageContainer).attr(\"src\") + \")\");\n            backgroundImageContainer.remove();\n. I need this too - in the meantime, I have worked around this with custom js (requires jQuery):\nvar backgroundImageContainer = $(\"<div>\").attr(\"id\", <some_unique_id>).addClass(\"hidden\");\n            $(\"body\").append(backgroundImageContainer);\n            Holder.add_image(\"holder.js?200x200\", \"#\" + backgroundImageContainer.attr(\"id\")).run();\n            $(<my_element_selector>).css(\"background-image\", \"url(\" + $(\"img\", backgroundImageContainer).attr(\"src\") + \")\");\n            backgroundImageContainer.remove();\n. ",
    "jasperkennis": "Compass allows for inline images to be declared right into the css. I don't know how it works, but it might be of help to have a look in te the source if the proposed functionality is to be included into holder.\n. Compass allows for inline images to be declared right into the css. I don't know how it works, but it might be of help to have a look in te the source if the proposed functionality is to be included into holder.\n. ",
    "qasimalyas": "Sweet. Thanks for the quick response. I'll bear that in mind for future.\n. Sweet. Thanks for the quick response. I'll bear that in mind for future.\n. ",
    "poor666": "I like the minimum syntax possible, holder.js/200 seems better than holder.js/200x200, but is a small improvement and if it doesn't conform how flags are set up, it's up to you, take the idea and implement by yourself.\nIt's my contribution to the project.\n. I like the minimum syntax possible, holder.js/200 seems better than holder.js/200x200, but is a small improvement and if it doesn't conform how flags are set up, it's up to you, take the idea and implement by yourself.\nIt's my contribution to the project.\n. ",
    "femesq": "You are welcome! Thank you for your software!\n. You are welcome! Thank you for your software!\n. ",
    "SlashmanX": "Aha, that's perfect. Thanks\n. Aha, that's perfect. Thanks\n. ",
    "mgdodge": "Much more concise. Can't believe I missed that, actually.\n. Much more concise. Can't believe I missed that, actually.\n. ",
    "RogueSkolar": "Thanks for your response imsky,\nYeah this feature would be great, would really make this library a great addition for my dev toolbox.  Still because it's a real time saver, I've \"hacked\" the core a bit to use 100% widths and I'm then controlling the width and  height of the images by setting a max width and max height on a parent element. In many of the cases I've got a figure/figcaption set so I can use that to control the image dimensions. Needless to say I'm not using the native image dimension caption. It would be awesome to dynamically calculate and output this value though.  It's not pretty but it's getting the job done for rapid prototyping. I'll be watching this space closely.\nBig props.\n. Thanks for your response imsky,\nYeah this feature would be great, would really make this library a great addition for my dev toolbox.  Still because it's a real time saver, I've \"hacked\" the core a bit to use 100% widths and I'm then controlling the width and  height of the images by setting a max width and max height on a parent element. In many of the cases I've got a figure/figcaption set so I can use that to control the image dimensions. Needless to say I'm not using the native image dimension caption. It would be awesome to dynamically calculate and output this value though.  It's not pretty but it's getting the job done for rapid prototyping. I'll be watching this space closely.\nBig props.\n. ",
    "mdo": "Thanks! <3\n. I'd go with http://getbootstrap.com as that's the URL we most often use. The GitHub.io link works, too, but could honestly change in the future if any repo moving is ever required again.\n. Thanks! <3\n. I'd go with http://getbootstrap.com as that's the URL we most often use. The GitHub.io link works, too, but could honestly change in the future if any repo moving is ever required again.\n. ",
    "AliGH": "wow, thanks men , i'll use this\nay to rohet madar asasname ba in codet :)\n. @t-visualappeal sry i missed that part and plz calm down ;)\n@imsky TNX, found it useful\n. wow, thanks men , i'll use this\nay to rohet madar asasname ba in codet :)\n. @t-visualappeal sry i missed that part and plz calm down ;)\n@imsky TNX, found it useful\n. ",
    "thelfensdrfer": "Probably you want to read the readme.... especially the section \"Background placeholders\"...\n. Probably you want to read the readme.... especially the section \"Background placeholders\"...\n. ",
    "ovax3": "Check my pull-request.\nHope it will help.\n. Nice, this is a more general solution.\nAny way to prevent holder to add a new style element into the head every time run is called ?\n. Cheers.\n. It's not very important but it seems their is still a leak with this code\nif(holdercss.styleSheet){\n    holdercss.styleSheet += options.stylesheet;\n}\nelse{\n    holdercss.textContent+= options.stylesheet;\n}\nEvery time run is invoked the default stylesheet is appended.\nMaybe adding the test options.stylesheet !== settings.stylesheet can help.\n. Thx!\n. Cheers.\n. Check my pull-request.\nHope it will help.\n. Nice, this is a more general solution.\nAny way to prevent holder to add a new style element into the head every time run is called ?\n. Cheers.\n. It's not very important but it seems their is still a leak with this code\nif(holdercss.styleSheet){\n    holdercss.styleSheet += options.stylesheet;\n}\nelse{\n    holdercss.textContent+= options.stylesheet;\n}\nEvery time run is invoked the default stylesheet is appended.\nMaybe adding the test options.stylesheet !== settings.stylesheet can help.\n. Thx!\n. Cheers.\n. ",
    "tim-peterson": "hi @imsky, I would just like to replace the Holder.js drawn <canvas> placeholders with the actual <img> or background-image as specified by lazyload.js. An example use would be in a newsfeed/endless scroll-like list like one sees on many popular sites.\nIdeally the canvases would be drawn responsively (% instead of px height/width) such that they, like the images which will replace them,  could fit multiple form factors. \n. hi @imsky this is awesome, i'll check it out!\n. hi @imsky, I would just like to replace the Holder.js drawn <canvas> placeholders with the actual <img> or background-image as specified by lazyload.js. An example use would be in a newsfeed/endless scroll-like list like one sees on many popular sites.\nIdeally the canvases would be drawn responsively (% instead of px height/width) such that they, like the images which will replace them,  could fit multiple form factors. \n. hi @imsky this is awesome, i'll check it out!\n. ",
    "tuupola": "Awesome. Thanks for the fix.\n. Awesome. Thanks for the fix.\n. ",
    "bumpux": "Sweet! And amazingly fast :-)  \nQuestion -- since we're rendering on the user's machine, how will it fallback if the font's not available?  Would it handle a stack like in CSS, e.g. font-family: Monaco, Consolas, \u201cLucida Console\u201d, monospace; ?\n. Awesome. Thanks.\n. Great...thanks!\n. Sweet! And amazingly fast :-)  \nQuestion -- since we're rendering on the user's machine, how will it fallback if the font's not available?  Would it handle a stack like in CSS, e.g. font-family: Monaco, Consolas, \u201cLucida Console\u201d, monospace; ?\n. Awesome. Thanks.\n. Great...thanks!\n. ",
    "mpaiva-tr": "Thanks for this pull request. Do you have any examples on how to implement this after the commit?\n. Thanks for this pull request. Do you have any examples on how to implement this after the commit?\n. ",
    "TrisDing": "@mpaiva-tr This works for me:\njavascript\nangular.module('myModule').directive('bsHolder', function() {\n    return {\n        link: function (scope, element, attrs) {\n            Holder.run({images:element.get(0), nocss:true});\n        }\n    };\n});\n. @mpaiva-tr This works for me:\njavascript\nangular.module('myModule').directive('bsHolder', function() {\n    return {\n        link: function (scope, element, attrs) {\n            Holder.run({images:element.get(0), nocss:true});\n        }\n    };\n});\n. ",
    "caleuanhopkins": "@TrisDing Brillant, thanks so much for sharing :)\n. @TrisDing Brillant, thanks so much for sharing :)\n. ",
    "abuechler": "It seems the API has changed. Using the above directive with AngularJS 1.2.13 I get: \"Object [object Object] has no method 'get'\". Passing just the element works fine:\nJavaScript\nangular.module('myModule', []).\n    directive('bsHolder', ['version', function (version) {\n        return {\n            link: function (scope, element, attrs) {\n                Holder.run(element);\n            }\n        };\n    }]);\n. It seems the API has changed. Using the above directive with AngularJS 1.2.13 I get: \"Object [object Object] has no method 'get'\". Passing just the element works fine:\nJavaScript\nangular.module('myModule', []).\n    directive('bsHolder', ['version', function (version) {\n        return {\n            link: function (scope, element, attrs) {\n                Holder.run(element);\n            }\n        };\n    }]);\n. ",
    "klederson": "A better approach is to have a AngularJS directive to handle it just like https://github.com/klederson/angular-chartjs-directive or something\n. A better approach is to have a AngularJS directive to handle it just like https://github.com/klederson/angular-chartjs-directive or something\n. ",
    "Letsan": "@abuechler :\nThe code by @TrisDing works fine for me on AngularJS 1.3.0-beta.1 and Holder.js 2.1 using the data-src attribute as shown in the original post\n. @abuechler :\nThe code by @TrisDing works fine for me on AngularJS 1.3.0-beta.1 and Holder.js 2.1 using the data-src attribute as shown in the original post\n. ",
    "NickClark": "Based on @TrisDing's approach, but I prefer a simpler and (in my opinion) more Angular way:\njavascript\nangular.module('MyModule').directive('myHolder', function() {\n  return {\n    link: function(scope, element, attrs) {\n      attrs.$set('data-src', attrs.myHolder);\n      Holder.run({images:element.get(0), nocss:true});\n    }\n  };\n});\nnow you can just do:\nhtml\n<img my-holder=\"holder.js/200x300\">\n. Based on @TrisDing's approach, but I prefer a simpler and (in my opinion) more Angular way:\njavascript\nangular.module('MyModule').directive('myHolder', function() {\n  return {\n    link: function(scope, element, attrs) {\n      attrs.$set('data-src', attrs.myHolder);\n      Holder.run({images:element.get(0), nocss:true});\n    }\n  };\n});\nnow you can just do:\nhtml\n<img my-holder=\"holder.js/200x300\">\n. ",
    "kevincobain2000": "@abuechler Thanks worked on v1.3.6\n<img data-src=\"holder.js/360x270\" bs-holder />\n.directive('bsHolder', function() {\n   return {\n      link: function (scope, element, attrs) {\n        Holder.run(element);\n      }\n  };\n})\n. @abuechler Thanks worked on v1.3.6\n<img data-src=\"holder.js/360x270\" bs-holder />\n.directive('bsHolder', function() {\n   return {\n      link: function (scope, element, attrs) {\n        Holder.run(element);\n      }\n  };\n})\n. ",
    "gubagu": "Great work  !!!\nThanks for sharing !\n. Great work  !!!\nThanks for sharing !\n. ",
    "klihelp": "Hi Ivan,\nThanks for your great plugin! Very very helpful! \nThere is a bug on IE7/IE8:\nMember not found (line 368, char 4): holdercss.styleSheet += options.stylesheet;\n( Quick fix for users to hide/comment out the line\nline368  // holdercss.styleSheet += options.stylesheet;\n)\n\n. Same error message in IE7 / IE8.\nline368 // holdercss.styleSheet += options.stylesheet;\nps if this helps: I'm using IETester on Win7\nhttp://www.my-debugbar.com/wiki/IETester/HomePage\nAfter this bug I would like to suggest other improvements:)\n. Yes, Thank you!\n. Hi Ivan,\nThanks for your great plugin! Very very helpful! \nThere is a bug on IE7/IE8:\nMember not found (line 368, char 4): holdercss.styleSheet += options.stylesheet;\n( Quick fix for users to hide/comment out the line\nline368  // holdercss.styleSheet += options.stylesheet;\n)\n\n. Same error message in IE7 / IE8.\nline368 // holdercss.styleSheet += options.stylesheet;\nps if this helps: I'm using IETester on Win7\nhttp://www.my-debugbar.com/wiki/IETester/HomePage\nAfter this bug I would like to suggest other improvements:)\n. Yes, Thank you!\n. ",
    "plonko": "http://defected.u-dox.com/wireframe/\nHope that's viewable!\nOn 27/02/2013 15:58, Ivan Malopinsky wrote:\n\nCould you post a live example please?\nOn Feb 27, 2013, at 7:59 AM, sebastianthomas \nnotifications@github.com wrote:\n\nDon't know if anyone has seen this bug yet, if not I can upload an \nexample somewhere.\nI'm using the Bootstrap example page with the carousel (which is \nwhere I found out about holder.js btw!), and using holder images in \nthe carousel slides, only the holder images on the first slide \ndisplays the text (dimensions) correctly. The rest show 0x0 as the \ntext (although the holders are the correct size), and the text isn't \nvertically centred, rather at the top of the placeholder.\nTried moving the js around from footer etc, doesn't seem to make a \ndiff.\nThanks\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/imsky/holder/issues/35#issuecomment-14181437.\n. Yeah sorry, havent had time to upload the site to host! :)\n. http://defected.u-dox.com/wireframe/\nHope that's viewable!\n\nOn 27/02/2013 15:58, Ivan Malopinsky wrote:\n\nCould you post a live example please?\nOn Feb 27, 2013, at 7:59 AM, sebastianthomas \nnotifications@github.com wrote:\n\nDon't know if anyone has seen this bug yet, if not I can upload an \nexample somewhere.\nI'm using the Bootstrap example page with the carousel (which is \nwhere I found out about holder.js btw!), and using holder images in \nthe carousel slides, only the holder images on the first slide \ndisplays the text (dimensions) correctly. The rest show 0x0 as the \ntext (although the holders are the correct size), and the text isn't \nvertically centred, rather at the top of the placeholder.\nTried moving the js around from footer etc, doesn't seem to make a \ndiff.\nThanks\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/imsky/holder/issues/35#issuecomment-14181437.\n. Yeah sorry, havent had time to upload the site to host! :)\n. \n",
    "bootnumlock": "just downloaded the latest file and this error is still present. Please advise.\n. visit this site: http://imsky.github.com/holder/ place browser in ie7 browser mode and ie7 standards mode. Error fires - thanks,\n. caching issue... so sorry to bother. Thanks for your quick responses.\n. just downloaded the latest file and this error is still present. Please advise.\n. visit this site: http://imsky.github.com/holder/ place browser in ie7 browser mode and ie7 standards mode. Error fires - thanks,\n. caching issue... so sorry to bother. Thanks for your quick responses.\n. ",
    "atep": "Hello, on your website http://imsky.github.io/holder/ is still link to older version (http://github.com/imsky/holder/zipball/v1.9) with the IE8 \"bug\" on line 316, on github version is a good new version, anyway thank you very much for nice tool, p.\n.   Hello, on your website http://imsky.github.io/holder/ is still link to older version (http://github.com/imsky/holder/zipball/v1.9) with the IE8 \"bug\" on line 316, on github version is a good new version, anyway thank you very much for nice tool, p.\n. ",
    "Barzmark": "I am new to Bootstrap, and I apologize if I don't understand but this error appears on the http://twitter.github.io/bootstrap/components.html site as well. Are IE 7 & 8 supported?\n\nThank you for your time\n. I am new to Bootstrap, and I apologize if I don't understand but this error appears on the http://twitter.github.io/bootstrap/components.html site as well. Are IE 7 & 8 supported?\n\nThank you for your time\n. ",
    "creocoder": "@imsky Please check it again. There was error in description.\n. @imsky No, no, this is another issue. Its not related to #40.\n. @imsky Please check it again. There was error in description.\n. @imsky No, no, this is another issue. Its not related to #40.\n. ",
    "geemang2000": "I'm having the same issue with: \n<img data-src=\"holder.js/100%x120/text:App1\" alt=\"App1\">\nThe thumbnail shows 203x120, not App1\n. I'm having the same issue with: \n<img data-src=\"holder.js/100%x120/text:App1\" alt=\"App1\">\nThe thumbnail shows 203x120, not App1\n. ",
    "rmorse": "Just discovered, the minified version does not include this fix, using holder.js though does work :+1:  found out the hard way...\n. Just discovered, the minified version does not include this fix, using holder.js though does work :+1:  found out the hard way...\n. ",
    "ganchan": "Sure, the problem i've encountered is with some gallery script that capture just image extension ended url but not something like http://placeholder.com/1280x960.\nSo this is my case with a gallery plugin that take the big image to show from the anchor href that wrap the small preview image, both image url should be generated by holder.js.\ncode in debug:\n<a href=\"\" data-href=\"holder.js/1280x960\" data-gallery=\"some-lightbox\"><img src=\"\" data-src=\"holder.js/800x600\"></a>\ncode on site:\n<a href=\"/img/big-image.jpg\" data-gallery=\"some-lightbox\"><img src=\"small-image.jpg\"></a>\nwhere data-href and data-src can be data-holder=\"\" to be generic maybe, or something similar.\n. Sure, the problem i've encountered is with some gallery script that capture just image extension ended url but not something like http://placeholder.com/1280x960.\nSo this is my case with a gallery plugin that take the big image to show from the anchor href that wrap the small preview image, both image url should be generated by holder.js.\ncode in debug:\n<a href=\"\" data-href=\"holder.js/1280x960\" data-gallery=\"some-lightbox\"><img src=\"\" data-src=\"holder.js/800x600\"></a>\ncode on site:\n<a href=\"/img/big-image.jpg\" data-gallery=\"some-lightbox\"><img src=\"small-image.jpg\"></a>\nwhere data-href and data-src can be data-holder=\"\" to be generic maybe, or something similar.\n. ",
    "asselin": "I noticed you haven't pulled this change-- is this something you're not interested in pulling in, or does the change need to be reworked before you'll accept it?\n. Ping.  Anything I can help with to get this merged?\n. I noticed you haven't pulled this change-- is this something you're not interested in pulling in, or does the change need to be reworked before you'll accept it?\n. Ping.  Anything I can help with to get this merged?\n. ",
    "ooxi": "+1 for merging\n. +1\n. I think going forward and releasing an SVG renderer based holder version would be great. Maybe doing it like jQuery and providing one file with canvas fallback and another without would be the way to go.\n. , is a multi assignment\n. @cvrebert  Isn't this what the @license tag was originally for? Could you provide some source whiche declares /*! ... */ as preservable (just asking because of interest and it's really hard googling for special characters ;)\n. Accents have to be URL encoded, try <img data-src=\"holder.js/100%x180/sky/text:%C3%81rv%C3%ADzt%C5%B1r%C5%91%20t%C3%BCk%C3%B6rf%C3%BAr%C3%B3g%C3%A9p\" /> instead\n. :+1:\n. I actually don't think that's such a good idea to support only Turbolinks since there are many alternatives for example InstantClick. Is there any generic way?\nMaybe just bind to the page:change event without checking the existence of Turbolink?\n. I don't actually get what you are saying. Holder is a client side library, therefore doesn't need server side rewrite rules.\n. \n\n. +1 for merging\n. +1\n. I think going forward and releasing an SVG renderer based holder version would be great. Maybe doing it like jQuery and providing one file with canvas fallback and another without would be the way to go.\n. , is a multi assignment\n. @cvrebert  Isn't this what the @license tag was originally for? Could you provide some source whiche declares /*! ... */ as preservable (just asking because of interest and it's really hard googling for special characters ;)\n. Accents have to be URL encoded, try <img data-src=\"holder.js/100%x180/sky/text:%C3%81rv%C3%ADzt%C5%B1r%C5%91%20t%C3%BCk%C3%B6rf%C3%BAr%C3%B3g%C3%A9p\" /> instead\n. :+1:\n. I actually don't think that's such a good idea to support only Turbolinks since there are many alternatives for example InstantClick. Is there any generic way?\nMaybe just bind to the page:change event without checking the existence of Turbolink?\n. I don't actually get what you are saying. Holder is a client side library, therefore doesn't need server side rewrite rules.\n. \n\n. ",
    "andrewmartin": "Seeing this as well.\n. Seeing this as well.\n. ",
    "Rarst": "Is canonical URL http://getbootstrap.com/ or http://twbs.github.io/bootstrap/ ? Seems different places link to one or the other... Old link to docs redirects to former, repository description links to latter.\n. 1. version should not be used (Composer strongly recommends against hardcoding it in composer.json)\n2. I think type should be component for installer to catch it\n. It seems you edited wrong file, last commit changed package.json, not composer.json :)\n. @imsky as per my comments this is still not quite correct, seems @rthrfrd gravitated somewhere, want me to do a pull to fix it up?\n. Thanks for merge.\nFinal touch in regards to Composer would be if you added it to https://packagist.org/ (main Composer repository), only needs to be done once and it will track versions from GitHub from there.\n. While I pulled it from official WP repo (because reasons), my plugin is still available \u2014 https://github.com/Rarst/holder-wp\nMight be a little dusty, I should perform a refresh pass. :)\n. That wouldn't be hard to implement, open issue with spec to follow in plugin's repo?\nAlthough I would say \"compact\" variant is semantically uncommon in WP shortcodes. They are often horribly verbose.\n. Is canonical URL http://getbootstrap.com/ or http://twbs.github.io/bootstrap/ ? Seems different places link to one or the other... Old link to docs redirects to former, repository description links to latter.\n. 1. version should not be used (Composer strongly recommends against hardcoding it in composer.json)\n2. I think type should be component for installer to catch it\n. It seems you edited wrong file, last commit changed package.json, not composer.json :)\n. @imsky as per my comments this is still not quite correct, seems @rthrfrd gravitated somewhere, want me to do a pull to fix it up?\n. Thanks for merge.\nFinal touch in regards to Composer would be if you added it to https://packagist.org/ (main Composer repository), only needs to be done once and it will track versions from GitHub from there.\n. While I pulled it from official WP repo (because reasons), my plugin is still available \u2014 https://github.com/Rarst/holder-wp\nMight be a little dusty, I should perform a refresh pass. :)\n. That wouldn't be hard to implement, open issue with spec to follow in plugin's repo?\nAlthough I would say \"compact\" variant is semantically uncommon in WP shortcodes. They are often horribly verbose.\n. ",
    "cvrebert": "/cc @mdo\n. Patch revised accordingly.\n. @imsky Ping?\n. Argh. We over at Bootstrap just ran into this. Broken in IE8 thru IE11.\nhttps://github.com/twbs/bootstrap/issues/12440\n. /cc @mdo\n. Patch revised accordingly.\n. @imsky Ping?\n. Argh. We over at Bootstrap just ran into this. Broken in IE8 thru IE11.\nhttps://github.com/twbs/bootstrap/issues/12440\n. ",
    "gera446": "Chrome 29.0.1547.59\nWebkit version\n537.36\nJavaScript version\nV8 3.19.18.20\n. Yes i can open the bootstrap 3 documentation and that version work perfect, actually I'm using this on,e but the last realise don't work.\n. Chrome 29.0.1547.59\nWebkit version\n537.36\nJavaScript version\nV8 3.19.18.20\n. Yes i can open the bootstrap 3 documentation and that version work perfect, actually I'm using this on,e but the last realise don't work.\n. ",
    "rthrfrd": "Ah sorry my mistake, went away. Thanks for pulling/fixing.\n. Ah sorry my mistake, went away. Thanks for pulling/fixing.\n. ",
    "Fatbat": "Too many unnecessary divs that way for my liking. Normally a responsive image only needs to be declared with:\nmax-width: 100%;\nheight: auto;\nTo fill the width of it's parent container automatically, assuming the image is wide enough, while the height works itself out. I'd rather not have to wrap each image in an extra div to accomplish the same thing.\n. Edit: sorry, misread the post. Downloaded the new version and it's great, thank you very much!\n. Yep, got it and it's working great. Thank you very much!\n. Too many unnecessary divs that way for my liking. Normally a responsive image only needs to be declared with:\nmax-width: 100%;\nheight: auto;\nTo fill the width of it's parent container automatically, assuming the image is wide enough, while the height works itself out. I'd rather not have to wrap each image in an extra div to accomplish the same thing.\n. Edit: sorry, misread the post. Downloaded the new version and it's great, thank you very much!\n. Yep, got it and it's working great. Thank you very much!\n. ",
    "davcpas1234": "For anyone having this issue more recently, this is now implemented like so: <img data-src=\"holder.js/100px100?auto\">.. For anyone having this issue more recently, this is now implemented like so: <img data-src=\"holder.js/100px100?auto\">.. ",
    "sarim": "Yes, Its true svg support is not complete is browsers but most of them supports very basic features of svg. Creating a rectangle and a textbox is supported AFAIK.\nYour test result is just \"wow\". 12x speedup !!!\nMaybe you can push your svg experiment in another branch ? I'm temporarily using this code in one of my project now.\n. Yes, Its true svg support is not complete is browsers but most of them supports very basic features of svg. Creating a rectangle and a textbox is supported AFAIK.\nYour test result is just \"wow\". 12x speedup !!!\nMaybe you can push your svg experiment in another branch ? I'm temporarily using this code in one of my project now.\n. ",
    "siamcomm": "I am also having a similar issue. It seems to happen on the BootStrap 3.0+ carousel, but only for slides that are not yet visible (set with the class of \"active\").\nIn Chrome, the size (hxw) seems to be maintained, but in FF, the size for the slides not yet visible is not honored at all.\nAny suggestions or progress on a potential fix?\n. I am also having a similar issue. It seems to happen on the BootStrap 3.0+ carousel, but only for slides that are not yet visible (set with the class of \"active\").\nIn Chrome, the size (hxw) seems to be maintained, but in FF, the size for the slides not yet visible is not honored at all.\nAny suggestions or progress on a potential fix?\n. ",
    "demisx": "Any update by any chance? Thanks. \n. Any update by any chance? Thanks. \n. ",
    "mdufresne": "Hi, thanks for the quick response.\nI downloaded the latest holder.js but still got the error:\nUncaught TypeError: Cannot read property 'use_canvas' of undefined                            holder.js:502\napp.run                                                                                                                   holder.js:502\n(anonymous function)                                                                                               holder.js:595\nr                                                                                                                             holder.js:613\nagain, i'm using latest bootstrap.js running on localhost and i'm using the carousel template from the \"getting started\" section of the bootstrap homepage.\nthanks\n. that fixed it.  Thanks so much ;)\nOn Tue, Dec 31, 2013 at 3:23 PM, Ivan Malopinsky\nnotifications@github.comwrote:\n\nIt seems you're getting this error because you're calling Holder.run()(without any options), though I can't reproduce the bug in any\nconfiguration. I pushed another fix, let me know if you're still seeing the\nerror.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/imsky/holder/issues/71#issuecomment-31409945\n.\n. Hi, thanks for the quick response.\n\nI downloaded the latest holder.js but still got the error:\nUncaught TypeError: Cannot read property 'use_canvas' of undefined                            holder.js:502\napp.run                                                                                                                   holder.js:502\n(anonymous function)                                                                                               holder.js:595\nr                                                                                                                             holder.js:613\nagain, i'm using latest bootstrap.js running on localhost and i'm using the carousel template from the \"getting started\" section of the bootstrap homepage.\nthanks\n. that fixed it.  Thanks so much ;)\nOn Tue, Dec 31, 2013 at 3:23 PM, Ivan Malopinsky\nnotifications@github.comwrote:\n\nIt seems you're getting this error because you're calling Holder.run()(without any options), though I can't reproduce the bug in any\nconfiguration. I pushed another fix, let me know if you're still seeing the\nerror.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/imsky/holder/issues/71#issuecomment-31409945\n.\n. \n",
    "Dreampie": "That didn't fix my problem, because 'o' is not defined, all need to add this code 'typeof (o)!= \"undefined\" '\n. That didn't fix my problem, because 'o' is not defined, all need to add this code 'typeof (o)!= \"undefined\" '\n. ",
    "limcross": "Still not working http://jsfiddle.net/WhfR8/1/\n. Still not working http://jsfiddle.net/WhfR8/1/\n. ",
    "hahmed": "@imsky as the comments are preserved, would that mean we have complied with the statement: Commercial use requires attribution.\nThanks :thumbsup: \n. @imsky as the comments are preserved, would that mean we have complied with the statement: Commercial use requires attribution.\nThanks :thumbsup: \n. ",
    "Nezz": "Holder doesn't seem to be working with IE10 and 11 either.\n\nThe error is this:\nXML5661\n\"Non-default namespace declarations must not have an empty URI.\"\n. Thanks for the fix :)\n. I've tried it, sadly it didn't help either.\n\n. Thanks :)\n. Holder doesn't seem to be working with IE10 and 11 either.\n\nThe error is this:\nXML5661\n\"Non-default namespace declarations must not have an empty URI.\"\n. Thanks for the fix :)\n. I've tried it, sadly it didn't help either.\n\n. Thanks :)\n. ",
    "diagramatics": "Just encountered the bug. I think it's because of how IE is unable to show SVG if it's using base64. Got http://jsfiddle.net/sebastienp/dhrrV/ from quick Googling and guess what, IE 11 in Win8.1 failed to show the button. \n. Just encountered the bug. I think it's because of how IE is unable to show SVG if it's using base64. Got http://jsfiddle.net/sebastienp/dhrrV/ from quick Googling and guess what, IE 11 in Win8.1 failed to show the button. \n. ",
    "Enelar": "Whoa.. unexpected.. feature. So i should run() after every EJS rendered, in hope that it contains image?\nWell, thanks!\n. Yep. Right now i am using http://placehold.it/, because my boss NEED solution NOW.\nBut later i am planning create jquery plugin.\n. Whoa.. unexpected.. feature. So i should run() after every EJS rendered, in hope that it contains image?\nWell, thanks!\n. Yep. Right now i am using http://placehold.it/, because my boss NEED solution NOW.\nBut later i am planning create jquery plugin.\n. ",
    "vdavyskiba": "I've created page on jsfiddle with Holder and Font-Face\nFull screen result - http://jsfiddle.net/S7gem/14/embedded/result/\nedit mode http://jsfiddle.net/S7gem/14/\nalert() before plugin is required to keep bug reproducible\nUpdate: seems like it's a browser bug\n. I've created page on jsfiddle with Holder and Font-Face\nFull screen result - http://jsfiddle.net/S7gem/14/embedded/result/\nedit mode http://jsfiddle.net/S7gem/14/\nalert() before plugin is required to keep bug reproducible\nUpdate: seems like it's a browser bug\n. ",
    "caneco": "The most wanted feature :+1: \n. Thanks!\n. @imsky any news on this? I've even tried in your own source and it doesn't work.\n. That was it\u2026 shoot.\nSorry about that and thanks for the help.\n. The most wanted feature :+1: \n. Thanks!\n. @imsky any news on this? I've even tried in your own source and it doesn't work.\n. That was it\u2026 shoot.\nSorry about that and thanks for the help.\n. ",
    "5tormTrooper": "I have a similar problem with Bootstrap's Glypicon's and fontAwesome icons not showing on reload. The space they occupy is blank. Then when I hover over where they should be they appear and stay put. This only happens with Chrome 33. The last version of Holder where this doesn't occur is 1.9\n. I have a similar problem with Bootstrap's Glypicon's and fontAwesome icons not showing on reload. The space they occupy is blank. Then when I hover over where they should be they appear and stay put. This only happens with Chrome 33. The last version of Holder where this doesn't occur is 1.9\n. ",
    "lantins": "I'm experiencing similar a issue and it is very strange:\n- Using Google Fonts.\n- Same problem with FontAwesome icons.\n- Chrome Version 33.0.1750.146\n- Holder.js v2.3.1\n- Works on the initial page load.\n- Does not work on refresh (doesn't matter if cache is enabled or disabled).\n- When a CSS media-query is \"triggered\" the page renders correctly (media-queries are just normal bootstrap ones).\n- ~~Only seems to effect pages not using Holder.js (loaded but not called); when used at least once problem does not occur.~~\n. I'm using the below jQuery code as a work around, it seems to force a redraw of the screen.\nI have a feeling this is a Chrome issue rather then holder.js\njavascript\n$(document).ready(function(){\n  var oldOffset = $('body').offset();\n  $('body').offset(oldOffset);\n});\n. I'm experiencing similar a issue and it is very strange:\n- Using Google Fonts.\n- Same problem with FontAwesome icons.\n- Chrome Version 33.0.1750.146\n- Holder.js v2.3.1\n- Works on the initial page load.\n- Does not work on refresh (doesn't matter if cache is enabled or disabled).\n- When a CSS media-query is \"triggered\" the page renders correctly (media-queries are just normal bootstrap ones).\n- ~~Only seems to effect pages not using Holder.js (loaded but not called); when used at least once problem does not occur.~~\n. I'm using the below jQuery code as a work around, it seems to force a redraw of the screen.\nI have a feeling this is a Chrome issue rather then holder.js\njavascript\n$(document).ready(function(){\n  var oldOffset = $('body').offset();\n  $('body').offset(oldOffset);\n});\n. ",
    "antonrodin": "Same thing... google fonts not loading using holder...\n:(\nBootstrap, Jquery and only with Chrome\n. Same thing... google fonts not loading using holder...\n:(\nBootstrap, Jquery and only with Chrome\n. ",
    "ghost": "Same problem. Using bootstrap. Initial page is not showing any Google font nor Glyphicon by bootstrap.  Commenting holder.js solves my font problem.\n. Does not occur in Chrome when the inspect bar is active. Not that sure it's chrome only. I've seen this behaviour on MSIE too. The only thing I can assure: it HAS worked with the holder.js that I was using. I haven't updated three similar sites since a long time, and they all have the same problem now. Both on Mac and Windows.\n. SCRIPT5009: \u201cWindow\u201d\u672a\u5b9a\u4e49 \nholder.js, \u884c12 \u5b57\u7b264912\n. \nIE8 show ...\n. could you fix it?\n. thank you\n. thank you. \n. Same problem. Using bootstrap. Initial page is not showing any Google font nor Glyphicon by bootstrap.  Commenting holder.js solves my font problem.\n. Does not occur in Chrome when the inspect bar is active. Not that sure it's chrome only. I've seen this behaviour on MSIE too. The only thing I can assure: it HAS worked with the holder.js that I was using. I haven't updated three similar sites since a long time, and they all have the same problem now. Both on Mac and Windows.\n. SCRIPT5009: \u201cWindow\u201d\u672a\u5b9a\u4e49 \nholder.js, \u884c12 \u5b57\u7b264912\n. \nIE8 show ...\n. could you fix it?\n. thank you\n. thank you. \n. ",
    "jvannistelrooy": "I just updated to version 2.3.2 with fix #81 in it, but it doesn't solve the problem at my end. Even when holder.js is not used, but just loaded, it prevents some web fonts from rendering. I'm not able to figure out why this happens.\n. I just updated to version 2.3.2 with fix #81 in it, but it doesn't solve the problem at my end. Even when holder.js is not used, but just loaded, it prevents some web fonts from rendering. I'm not able to figure out why this happens.\n. ",
    "potatskie": "Hi guys, hope this helps\nI've tried combination of this solution\n//js\n$(function() { $('body').hide().show(); });\n//css\nbody\n{\n    -webkit-animation-duration: 0.1s;\n    -webkit-animation-name: fontfix;\n    -webkit-animation-iteration-count: 1;\n    -webkit-animation-timing-function: linear;\n    -webkit-animation-delay: 0.1s;\n}\n@-webkit-keyframes fontfix{\n    from{   opacity: 1; }\n    to{ opacity: 1; }\n}\n//htaccess\nAddType application/vnd.ms-fontobject .eot\nAddType font/ttf .ttf\nAddType font/otf .otf\nAddType application/x-font-woff .woff\n. Hi guys, hope this helps\nI've tried combination of this solution\n//js\n$(function() { $('body').hide().show(); });\n//css\nbody\n{\n    -webkit-animation-duration: 0.1s;\n    -webkit-animation-name: fontfix;\n    -webkit-animation-iteration-count: 1;\n    -webkit-animation-timing-function: linear;\n    -webkit-animation-delay: 0.1s;\n}\n@-webkit-keyframes fontfix{\n    from{   opacity: 1; }\n    to{ opacity: 1; }\n}\n//htaccess\nAddType application/vnd.ms-fontobject .eot\nAddType font/ttf .ttf\nAddType font/otf .otf\nAddType application/x-font-woff .woff\n. ",
    "XhmikosR": "I can provide a pull request for this if you want. Just let me know how you want things to be?\n. Yeah I was referring to the Base64 snippet. I have already suggested to separate the 3rd party code from the main code, see https://github.com/imsky/holder/issues/85.\n. How about just doing this until then?\njs\n/* jshint ignore:start */\nthird party code\n/* jshint ignore:end */\n. I can provide a pull request for this if you want. Just let me know how you want things to be?\n. Yeah I was referring to the Base64 snippet. I have already suggested to separate the 3rd party code from the main code, see https://github.com/imsky/holder/issues/85.\n. How about just doing this until then?\njs\n/* jshint ignore:start */\nthird party code\n/* jshint ignore:end */\n. ",
    "pdias": "Would be nice to have this functionality and perhaps be able to apply a different theme per line.\n```\ndata-src=\"crop/168x168/auto/text:[{My Text, gray}, {My Second Text, vine}]\"\nor \ndata-src=\"crop/168x168/auto/text:[My Text/gray, My Second Text/vine]\"\n```\nPaulo\n. Would be nice to have this functionality and perhaps be able to apply a different theme per line.\n```\ndata-src=\"crop/168x168/auto/text:[{My Text, gray}, {My Second Text, vine}]\"\nor \ndata-src=\"crop/168x168/auto/text:[My Text/gray, My Second Text/vine]\"\n```\nPaulo\n. ",
    "arjan0307": "+1\n. +1\n. ",
    "iwarner": "+1\n. +1\n. ",
    "lacco": "+1\n. +1\n. ",
    "blairmorris": "+1 would be awesome.\n. +1 would be awesome.\n. ",
    "christianrondeau": "This Includes #87 (so if you merge this one, you can simply close mine)\n. @XhmikosR Are you talking about the Base64.js code? If so, you are correct in that it's only a cosmetic change. However I believe that leaving JSHint errors in the build will make it easier to overlook other errors later. I always make sure, before changing somebody else's code, to run their tests before doing any changes and again when I'm done. Maybe I'm being overly cautious, but hey, it's not my code!\n. That would be even better :)\n. This Includes #87 (so if you merge this one, you can simply close mine)\n. @XhmikosR Are you talking about the Base64.js code? If so, you are correct in that it's only a cosmetic change. However I believe that leaving JSHint errors in the build will make it easier to overlook other errors later. I always make sure, before changing somebody else's code, to run their tests before doing any changes and again when I'm done. Maybe I'm being overly cautious, but hey, it's not my code!\n. That would be even better :)\n. ",
    "sbtnh": "I know this is an option, but shouldn't it be the default behaviour ?\n. I know this is an option, but shouldn't it be the default behaviour ?\n. ",
    "JulienBier": "Thanks, I appreciate the fast answer.\n. Thanks, I appreciate the fast answer.\n. ",
    "overtrue": "i am sorry , it's my fault!\n. @imsky OK\uff0cThanks!  about the code, I just saw a lot of inconsistencies, so i modify the code stylistically, I am sorry about that!\n. i am sorry , it's my fault!\n. @imsky OK\uff0cThanks!  about the code, I just saw a lot of inconsistencies, so i modify the code stylistically, I am sorry about that!\n. ",
    "msealand": "Ah, yes, that makes sense.  I could change that if you'd like.\n. Ah, yes, that makes sense.  I could change that if you'd like.\n. ",
    "nathanhumphrey": "Sure. I'm using holder for an optional image on a resizable element.  If/when the img src is modified (e.g. the user chooses an image), holder will replace the modified src with its own again on window resize.\nFrom looking at the code, an image that's pushed in the resizable_images array is always rendered on resize, even if the src for that img has been changed.\nI thought about just adding a check for a valid holder src alongside the one for holder_data in update_resizable(), but that would only work for modified src attributes.  I figured it may be nice to have the option of preventing resize from rendering an image regardless of whether the src had been modified or not.\nI also mentioned that this may be temporary because the user may choose to discard their chosen image.  In this case I just call run() again, which renders and adds the image back into the array.\nIt might be that this is not a good feature/use case for holder; perhaps there's another way I can work this and I just haven't wrapped my head around it yet.  Sorry if my explanation is unclear.\n. Yeah that would be a better solution. It looks like you're planning some major revisions and it's probably best to wait rather than apply patches. Let me know if I can help. \n. Sure. I'm using holder for an optional image on a resizable element.  If/when the img src is modified (e.g. the user chooses an image), holder will replace the modified src with its own again on window resize.\nFrom looking at the code, an image that's pushed in the resizable_images array is always rendered on resize, even if the src for that img has been changed.\nI thought about just adding a check for a valid holder src alongside the one for holder_data in update_resizable(), but that would only work for modified src attributes.  I figured it may be nice to have the option of preventing resize from rendering an image regardless of whether the src had been modified or not.\nI also mentioned that this may be temporary because the user may choose to discard their chosen image.  In this case I just call run() again, which renders and adds the image back into the array.\nIt might be that this is not a good feature/use case for holder; perhaps there's another way I can work this and I just haven't wrapped my head around it yet.  Sorry if my explanation is unclear.\n. Yeah that would be a better solution. It looks like you're planning some major revisions and it's probably best to wait rather than apply patches. Let me know if I can help. \n. ",
    "Kaspis77": "Yes I do, and also I was wrong, it's working perfectly. It was my mistake. Thx\n. Yes I do, and also I was wrong, it's working perfectly. It was my mistake. Thx\n. ",
    "al-the-x": "I shall attempt to do so in isolation. Minified source, though. :(\nPerhaps related to the way that Holder is initialized, though? I didn't\nsee anywhere in the closure that assigned window['Holder'] = Holder, so a\nconcat+uglify operation that wrapped all the sources in a closure...? I'm\ngrasping at straws, really, but I'll still attempt to isolate and\nreproduce. Thanks.\nhttp://about.me/al_the_x\nhttp://about.me/al_the_x\nhttp://about.me/al_the_x\nDavid Rogers\nhttp://about.me/al_the_x\nabout.me/al_the_x\n[image: David Rogers on about.me]\nhttp://about.me/al_the_xNeed help now?\nCall me with Clarity (http://clarity.fm/althex) http://clarity.fm/althex\nBook me on AirPair (http://airpair.com/book/al_the_x)\nhttp://airpair.com/book/al_the_x\nOn Mon, Jun 16, 2014 at 7:11 PM, Ivan Malopinsky notifications@github.com\nwrote:\n\nI'm minifying Holder in the 2.4 development branch and it works without\nproblems. If you can replicate this problem with a minimal test case,\nplease post a link to it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/imsky/holder/issues/101#issuecomment-46249605.\n. I shall attempt to do so in isolation. Minified source, though. :(\n\nPerhaps related to the way that Holder is initialized, though? I didn't\nsee anywhere in the closure that assigned window['Holder'] = Holder, so a\nconcat+uglify operation that wrapped all the sources in a closure...? I'm\ngrasping at straws, really, but I'll still attempt to isolate and\nreproduce. Thanks.\nhttp://about.me/al_the_x\nhttp://about.me/al_the_x\nhttp://about.me/al_the_x\nDavid Rogers\nhttp://about.me/al_the_x\nabout.me/al_the_x\n[image: David Rogers on about.me]\nhttp://about.me/al_the_xNeed help now?\nCall me with Clarity (http://clarity.fm/althex) http://clarity.fm/althex\nBook me on AirPair (http://airpair.com/book/al_the_x)\nhttp://airpair.com/book/al_the_x\nOn Mon, Jun 16, 2014 at 7:11 PM, Ivan Malopinsky notifications@github.com\nwrote:\n\nI'm minifying Holder in the 2.4 development branch and it works without\nproblems. If you can replicate this problem with a minimal test case,\nplease post a link to it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/imsky/holder/issues/101#issuecomment-46249605.\n. \n",
    "Glaived": "Yes, I did forget to include the following:\n<script src=\"holder.js\"></script>\nAnd I thought it was a mistake of Apache, then it was a mistake to me >.<\n. Yes, I did forget to include the following:\n<script src=\"holder.js\"></script>\nAnd I thought it was a mistake of Apache, then it was a mistake to me >.<\n. ",
    "GrahamCampbell": "Sweet. Thanks. :)\n. Sure. Also, the effort from me was minimal, don't worry 'bout that. ;)\n. Sweet. Thanks. :)\n. Sure. Also, the effort from me was minimal, don't worry 'bout that. ;)\n. ",
    "mitranim": "Thanks!\n. Thanks!\n. ",
    "volkanunsal": "+1\n. +1\n. ",
    "msieurtoph": "You are welcome. \nSearching what you meant by \"QSA\", I found this jsperf. As you can see, it is very very very slower than the popular getElementByXxxx ... Performances will seriously be affected, don't you think ?\nWill you use it for all browsers or only for non-compliant ones ? \n. Ok ok. If you say so.\nWe will probably gain some extra time somewhere else using the simpler QSA selector.\nI still do not understand why your benchmark is so different from the jsperf one.\nAnyway, i Hope the 2.4 release will come soon. ;)\n. Great then.\nThx again for your work on this excellent plugin.\n. You are welcome. \nSearching what you meant by \"QSA\", I found this jsperf. As you can see, it is very very very slower than the popular getElementByXxxx ... Performances will seriously be affected, don't you think ?\nWill you use it for all browsers or only for non-compliant ones ? \n. Ok ok. If you say so.\nWe will probably gain some extra time somewhere else using the simpler QSA selector.\nI still do not understand why your benchmark is so different from the jsperf one.\nAnyway, i Hope the 2.4 release will come soon. ;)\n. Great then.\nThx again for your work on this excellent plugin.\n. ",
    "pateljj04": "Good point - I have tested it on IE 11 but not 9 and 10, as well as Chrome, Firefox and Safari. Looking at the JAWS the restriction is 150 characters. So I will restore it and change it to 150 and so another pull request. Perhaps adding longdesc or title to for longer text would be a better work around. Thoughts?\n. Good point - I have tested it on IE 11 but not 9 and 10, as well as Chrome, Firefox and Safari. Looking at the JAWS the restriction is 150 characters. So I will restore it and change it to 150 and so another pull request. Perhaps adding longdesc or title to for longer text would be a better work around. Thoughts?\n. ",
    "mmjaeger": "I was wondering whether there is also a way to use holder in wordpress if I just need the url to the image not including the image tag??\n. I think it would be useful\n. I was wondering whether there is also a way to use holder in wordpress if I just need the url to the image not including the image tag??\n. I think it would be useful\n. ",
    "dannywng": "\n. \n. \n. \n. ",
    "yoeluk": "Thanks. Also see that webjars actually pulls your github repo and there also the holder.min.js is named holder.js causing the referenced issue.\n. Thanks. Also see that webjars actually pulls your github repo and there also the holder.min.js is named holder.js causing the referenced issue.\n. ",
    "angel1st": "Yes, sure. Look at http://jsfiddle.net/cumqod2n/5/ and see enclosed two screenshots. Hope this helps.\nBR,\n\n\n. Hi,\nSorry for delay.\nProvided solution solves the issue partially. \nLet me give you an example:\nIf I rotate empty holder all is fine. See screenshot below:\n- portrait\n\n- landscape\n\nHowever, as long as I select image, the overlapping issue appears again:\n- landscape image\n\n- portrait image\n\nAs you can see the last image overlaps a button and becomes overlapped by another button.\n. Yes, sure. Look at http://jsfiddle.net/cumqod2n/5/ and see enclosed two screenshots. Hope this helps.\nBR,\n\n\n. Hi,\nSorry for delay.\nProvided solution solves the issue partially. \nLet me give you an example:\nIf I rotate empty holder all is fine. See screenshot below:\n- portrait\n\n- landscape\n\nHowever, as long as I select image, the overlapping issue appears again:\n- landscape image\n\n- portrait image\n\nAs you can see the last image overlaps a button and becomes overlapped by another button.\n. ",
    "rajibahmed": "Hi,\nI now have changed my code to use uncompressed version of holderjs.\nWhich works fine now. But maybe you can take look at it later or change the compression \nthat you are using. \nBTW, I didn't get one thing. When I use uncompressed holderjs from src dir should I include all the js files listed there to my web page ?\n. Found the bug on 2.4.1 release \nhttps://github.com/imsky/holder/blob/master/holder.js#L359\nyui compressor fails to compress when it sees style.float \ndon't know why. But changing it to style.flo worked for me.\nFYI, when I install this library via bower holder.js file is already compressed.\n//Best\n. Hi,\nI now have changed my code to use uncompressed version of holderjs.\nWhich works fine now. But maybe you can take look at it later or change the compression \nthat you are using. \nBTW, I didn't get one thing. When I use uncompressed holderjs from src dir should I include all the js files listed there to my web page ?\n. Found the bug on 2.4.1 release \nhttps://github.com/imsky/holder/blob/master/holder.js#L359\nyui compressor fails to compress when it sees style.float \ndon't know why. But changing it to style.flo worked for me.\nFYI, when I install this library via bower holder.js file is already compressed.\n//Best\n. ",
    "emarket-design": "+1\n. 1- Create two images with 100% set as image size\n2- Put them in a html file with BS3.2 linked\n3- Try to resize the document using browser\nImages don't get resized.\n. +1\n. 1- Create two images with 100% set as image size\n2- Put them in a html file with BS3.2 linked\n3- Try to resize the document using browser\nImages don't get resized.\n. ",
    "osricmacon": "1- Create two images with 100% set as image size\n2- Put them in a html file with BS3.2 linked\n3. The second image doesnt show up even. I will make a codepen if i get some time.\n. Here is a codepen\nhttp://codepen.io/osricmacon/pen/NPqOBp\nbut i dont see a problem in this it works perfect i dont know why its not working in local solution\ni dont think its a bug it must be some of my stupidity\n. It does occurs for me but i am not able to replicate on codepen so it is my own problem not a bug of holderjs. Good that you closed this. I assumed it's closed long back.\n:)\n. 1- Create two images with 100% set as image size\n2- Put them in a html file with BS3.2 linked\n3. The second image doesnt show up even. I will make a codepen if i get some time.\n. Here is a codepen\nhttp://codepen.io/osricmacon/pen/NPqOBp\nbut i dont see a problem in this it works perfect i dont know why its not working in local solution\ni dont think its a bug it must be some of my stupidity\n. It does occurs for me but i am not able to replicate on codepen so it is my own problem not a bug of holderjs. Good that you closed this. I assumed it's closed long back.\n:)\n. ",
    "edgardmessias": "@imsky Ok?\n. @imsky Ok?\n. ",
    "Gavin-Paolucci-Kleinow": "Sure. Thanks for fixing it so quickly!\n. Sure. Thanks for fixing it so quickly!\n. ",
    "jschill": "A quick fix is to replace the existing polyfills with this one:\nhttps://gist.github.com/paulirish/1579671 \nThat will fix the js-error, but i'm not sure if that will make holder IE9-compatible. \n. @imsky Ok! Note that performance.now in the current polyfill is also IE10+.\n. A quick fix is to replace the existing polyfills with this one:\nhttps://gist.github.com/paulirish/1579671 \nThat will fix the js-error, but i'm not sure if that will make holder IE9-compatible. \n. @imsky Ok! Note that performance.now in the current polyfill is also IE10+.\n. ",
    "beowshawitz": "For some reason, I am not seeing this in the latest 2.6 version. Was it pulled?\n. @imsky Yes, I am using IE9 and have version 2.6, but I was still getting this rAF error. I am using this in conjunction with jQuery 1.8 and Bootstrap 2.32. Let me see if I can get you some more details tomorrow morning.\n. @imsky Ok, I cleared my cache and browser history as a precaution. I'm using IE9 in both  and Holder.js Version 2.6.0+51ebp. Whenever I try to get the image I am getting this error...\nSCRIPT438: Object doesn't support property or method 'requestAnimationFrame' \nholder.js, line 22 character 1\nLine 22 refers to return /**/ (function(modules) { // webpackBootstrap\nThis is my call to holder\n\nSame code works on IE11 on a different machine.\n. I can confirm that in this latest release, 2.7.1+6hydf, the issue is gone for me in IE 9.\n. For some reason, I am not seeing this in the latest 2.6 version. Was it pulled?\n. @imsky Yes, I am using IE9 and have version 2.6, but I was still getting this rAF error. I am using this in conjunction with jQuery 1.8 and Bootstrap 2.32. Let me see if I can get you some more details tomorrow morning.\n. @imsky Ok, I cleared my cache and browser history as a precaution. I'm using IE9 in both  and Holder.js Version 2.6.0+51ebp. Whenever I try to get the image I am getting this error...\nSCRIPT438: Object doesn't support property or method 'requestAnimationFrame' \nholder.js, line 22 character 1\nLine 22 refers to return /**/ (function(modules) { // webpackBootstrap\nThis is my call to holder\n\nSame code works on IE11 on a different machine.\n. I can confirm that in this latest release, 2.7.1+6hydf, the issue is gone for me in IE 9.\n. ",
    "chetzof": "can confirm this issue on the latest version\n. can confirm this issue on the latest version\n. ",
    "ed-jimmy": "Hey, I know this is an old issue, but I'm currently running 2.9.4 and I have the same issue in IE 9.\nObject doesn't support property or method 'requestAnimationFrame'\n\n. https://gist.github.com/ed-jimmy/e46562545f3b2f48750aca6fec53fb77\nHere is the file at runtime, (node_modules/holderjs/src/lib/index.js). I also included the file that imports holderjs into my project (I'm using ES6). I pulled holder.js as an npm package. I'm Pulling all of my js files together with webpack.. Let me know if you need more. I can't show the entire project, but like I said it is the latest npm package of holder.js V2.9.4 and nothing has failed up until now when I tested it on IE9.. Hey, I know this is an old issue, but I'm currently running 2.9.4 and I have the same issue in IE 9.\nObject doesn't support property or method 'requestAnimationFrame'\n\n. https://gist.github.com/ed-jimmy/e46562545f3b2f48750aca6fec53fb77\nHere is the file at runtime, (node_modules/holderjs/src/lib/index.js). I also included the file that imports holderjs into my project (I'm using ES6). I pulled holder.js as an npm package. I'm Pulling all of my js files together with webpack.. Let me know if you need more. I can't show the entire project, but like I said it is the latest npm package of holder.js V2.9.4 and nothing has failed up until now when I tested it on IE9.. ",
    "joshvillbrandt": "Thanks! ng-holder essentially the same as @NickClark's code, but wrapped in a reusable bower package.\nAlternatively, you could take this angular directive and stick it directly into your source file with angular !== undefined wrapping the block.\n. Thanks! ng-holder essentially the same as @NickClark's code, but wrapped in a reusable bower package.\nAlternatively, you could take this angular directive and stick it directly into your source file with angular !== undefined wrapping the block.\n. ",
    "PulsarBlow": "Thank you\n. Thank you\n. ",
    "kaluznyo": "On older android default browser, webkitCancelAnimationFrame is not defined is still there\n. global.cancelAnimationFrame = window.webkitCancelAnimationFrame; at line 224 seems work\n. On older android default browser, webkitCancelAnimationFrame is not defined is still there\n. global.cancelAnimationFrame = window.webkitCancelAnimationFrame; at line 224 seems work\n. ",
    "jtammen": "@imsky I am also seeing this in my error logs \u2026 any chance you can take a look at it? Thanks! (-:\n. @imsky I am also seeing this in my error logs \u2026 any chance you can take a look at it? Thanks! (-:\n. ",
    "funtoosh": "Ivan, you are right, of course, no problem at all in the jsfiddle. \nEarlier, I was using the version of holder.js that came bundled w/ bootstrap (2.4.1+f2l1h), so I suppose it's down to that slightly oldish version \u2026\n\n. Oops, a PS: I can't make the size flag work with aforementioned v2.4.1+f2l1h, nor with the latest v2.6.0, but v2.5.2+2mg3u works like a charm ...\nCheers, -f\n. Wow, now that's weird! \nYour version works, but look at these two:\n\n\n. Autsch, my fault, i was using an incomplete holder.js with dependencies to libs and utils! \nVery sorry!\n. Ivan, you are right, of course, no problem at all in the jsfiddle. \nEarlier, I was using the version of holder.js that came bundled w/ bootstrap (2.4.1+f2l1h), so I suppose it's down to that slightly oldish version \u2026\n\n. Oops, a PS: I can't make the size flag work with aforementioned v2.4.1+f2l1h, nor with the latest v2.6.0, but v2.5.2+2mg3u works like a charm ...\nCheers, -f\n. Wow, now that's weird! \nYour version works, but look at these two:\n\n\n. Autsch, my fault, i was using an incomplete holder.js with dependencies to libs and utils! \nVery sorry!\n. ",
    "gjungb": ":+1: \n. :+1: \n. ",
    "GlassGruber": "Great! Thank you also for the example, helped me a lot really! ;)\n. Great! Thank you also for the example, helped me a lot really! ;)\n. ",
    "endichen": "I have try this : \n$(\"#previewImg\").style.width = 300;\n$(\"#previewImg\").style.height = 200; \nand  this:\n$(\"#previewImg\").style.width = \"auto/initial\";\n$(\"#previewImg\").style.height = \"auto/initial\";\nbefore I change the src.\nBut it still does not work.\nWhat do you mean \"set the width/height properties to auto/initial\" ? \n. Good, It works fine! Thanks!\n. I have try this : \n$(\"#previewImg\").style.width = 300;\n$(\"#previewImg\").style.height = 200; \nand  this:\n$(\"#previewImg\").style.width = \"auto/initial\";\n$(\"#previewImg\").style.height = \"auto/initial\";\nbefore I change the src.\nBut it still does not work.\nWhat do you mean \"set the width/height properties to auto/initial\" ? \n. Good, It works fine! Thanks!\n. ",
    "fpoirier1": "http://codepen.io/fpoirier1/pen/VLbKBY\nhttp://codepen.io/fpoirier1/pen/OVmRwW\n. http://codepen.io/fpoirier1/pen/VLbKBY\nhttp://codepen.io/fpoirier1/pen/OVmRwW\n. ",
    "jimaek": "http://www.jsdelivr.com/#!holder is the website, the actual file is https://cdn.jsdelivr.net/holder/2.8.0/holder.min.js\n. http://www.jsdelivr.com/#!holder is the website, the actual file is https://cdn.jsdelivr.net/holder/2.8.0/holder.min.js\n. ",
    "KrabsWong": "Forked this repo and made some updates here https://github.com/yPangXie/holder/commit/bf08a31dc11e57c838525a656160436364099a72\n. Awesome!\n. Forked this repo and made some updates here https://github.com/yPangXie/holder/commit/bf08a31dc11e57c838525a656160436364099a72\n. Awesome!\n. ",
    "anka-213": "This is sufficient to replicate the bug:\n<html>\n<head><script src=\"https://cdn.rawgit.com/imsky/holder/master/holder.js\"></script></head>\n<body>Hello</body>\n</html>\n. A git bisect using the html-file above and running gulp between each iteration tells me that the issue was introduced in commit 41c9258.\n. I said Windows 10 in the bottom of my post.\nNo, I haven't found any other library that causes the issue. I discovered it on the getbootstrap.com website and pinpointed it to holder by removing js code until the issue disappeared. And since just including the library on a webpage is sufficient I concluded that this was causing it.\n. No I can't replicate it in another browser.\n. I agree that it seems unlikely that the commit I mentioned is the cause, but it became visible after that commit.\nI guess it's some kind of bug in Google Chrome, but it is being triggered by your library.\n. (And no, I only started the profiling after I discovered that the webpage was using 100% cpu, so that is not the cause)\n. @imsky More specifically, I believe that the line: global.requestAnimationFrame(visibilityCheck); is the culprit. It seems likely since the 100% cpu usage is only an issue when the page is visible. If it is in a background tab, it is using normal amounts of cpu.\n. http://stackoverflow.com/questions/28390358/high-cpu-usage-with-canvas-and-requestanimationframe\n\"requestAnimationFrame() is supposed to run as fast as possible, and thus use a lot of CPU. if you need fewer updates, use a timer to target a reasonable FPS rate instead.\"\n. Yes, it seems so. The example (http://www.duckware.com/test/chrome/requestanimationframe.html) on https://code.google.com/p/chromium/issues/detail?id=321632 gives the same result. Thanks for the help.\n. Although I'm not entirely sure that the way you are using the function is correct. You are essentially polling for visibility on every frame instead of using some callback.\nWhat you are using the function for isn't actually animation as far as I can tell, which the function is meant for.\n. More details:\nThis code determines which framerate rAF uses:\n(function(){var a = 0;var af = function(){window.requestAnimationFrame(af);a +=1;};af();window.setTimeout(function(){af = function(){console.log(a)};},1000)})()\nOn Firefox it reports 60FPS as expected. But on Google Chrome on Win10 it reports 2000FPS, so it doesn't seem to limit the framerate at all.\n. Yes, it seems to be fixed. Thanks!\n. This is sufficient to replicate the bug:\n<html>\n<head><script src=\"https://cdn.rawgit.com/imsky/holder/master/holder.js\"></script></head>\n<body>Hello</body>\n</html>\n. A git bisect using the html-file above and running gulp between each iteration tells me that the issue was introduced in commit 41c9258.\n. I said Windows 10 in the bottom of my post.\nNo, I haven't found any other library that causes the issue. I discovered it on the getbootstrap.com website and pinpointed it to holder by removing js code until the issue disappeared. And since just including the library on a webpage is sufficient I concluded that this was causing it.\n. No I can't replicate it in another browser.\n. I agree that it seems unlikely that the commit I mentioned is the cause, but it became visible after that commit.\nI guess it's some kind of bug in Google Chrome, but it is being triggered by your library.\n. (And no, I only started the profiling after I discovered that the webpage was using 100% cpu, so that is not the cause)\n. @imsky More specifically, I believe that the line: global.requestAnimationFrame(visibilityCheck); is the culprit. It seems likely since the 100% cpu usage is only an issue when the page is visible. If it is in a background tab, it is using normal amounts of cpu.\n. http://stackoverflow.com/questions/28390358/high-cpu-usage-with-canvas-and-requestanimationframe\n\"requestAnimationFrame() is supposed to run as fast as possible, and thus use a lot of CPU. if you need fewer updates, use a timer to target a reasonable FPS rate instead.\"\n. Yes, it seems so. The example (http://www.duckware.com/test/chrome/requestanimationframe.html) on https://code.google.com/p/chromium/issues/detail?id=321632 gives the same result. Thanks for the help.\n. Although I'm not entirely sure that the way you are using the function is correct. You are essentially polling for visibility on every frame instead of using some callback.\nWhat you are using the function for isn't actually animation as far as I can tell, which the function is meant for.\n. More details:\nThis code determines which framerate rAF uses:\n(function(){var a = 0;var af = function(){window.requestAnimationFrame(af);a +=1;};af();window.setTimeout(function(){af = function(){console.log(a)};},1000)})()\nOn Firefox it reports 60FPS as expected. But on Google Chrome on Win10 it reports 2000FPS, so it doesn't seem to limit the framerate at all.\n. Yes, it seems to be fixed. Thanks!\n. ",
    "DenisKuplyakov": "For me it still drains battery too fast. I have two tabs opened with holder.js and they consume about 10% of CPU. Notebook is heating. Chromium profiler shows most times goes to setTimeout and requestAnimationFrame.\nThe point I can't understand where animation is done? Placeholders are static.\n. For me it still drains battery too fast. I have two tabs opened with holder.js and they consume about 10% of CPU. Notebook is heating. Chromium profiler shows most times goes to setTimeout and requestAnimationFrame.\nThe point I can't understand where animation is done? Placeholders are static.\n. ",
    "aaronhb": "AWESOME! and you knew this next question was coming...How long till you release it? :)\n. Awesome and thanks so much for all the hard work and effort you have put into this. Very cool!\n. AWESOME! and you knew this next question was coming...How long till you release it? :)\n. Awesome and thanks so much for all the hard work and effort you have put into this. Very cool!\n. ",
    "hiddentao": "I've removed the browserify section (I originally couldn't get it working unless I used the shim, but I just checked again now and it seems ok, so it must have been another issue).\nPlease let me know what other cleanup you'd like to see.\n. I've made the changes.\n. I've removed the browserify section (I originally couldn't get it working unless I used the shim, but I just checked again now and it seems ok, so it must have been another issue).\nPlease let me know what other cleanup you'd like to see.\n. I've made the changes.\n. ",
    "usamamuneeb": "I noticed this issue back in August 2015. Since no description is provided, I'll provide it here.\nIf we want to use custom fonts, we are forced to use <object> placeholders instead of <img>. Custom fonts do not load with <img>. I've uploaded an example at this URL. If viewed in Firefox, Opera or Chrome, you'll see two boxes. The one on the left uses <object> and the one on the right uses <img>. Custom font is only seen correctly in the one on the left.\nThe drawback of <object> is that it doesn't work in IE and Edge, which is another bug. Heck, if you view the same URL I linked above in IE, you will see only one box, the one that uses <img>. Either <object> should work in IE and Edge seamlessly or <img> should support custom fonts.\nI believe both issues should be fixed since the only advantage of using <object> is when you want to inspect the DOM with JavaScript or JQuery. <object> should definitely work in IE and Edge and <img> should support custom fonts, since if one wants to export a save-able image to the browser using holder, they are able to do so.\n@imsky please update the topic to IMG placeholder instead of SVG and add the bug label since custom fonts are a fundamental feature of holder.\n. I noticed this issue back in August 2015. Since no description is provided, I'll provide it here.\nIf we want to use custom fonts, we are forced to use <object> placeholders instead of <img>. Custom fonts do not load with <img>. I've uploaded an example at this URL. If viewed in Firefox, Opera or Chrome, you'll see two boxes. The one on the left uses <object> and the one on the right uses <img>. Custom font is only seen correctly in the one on the left.\nThe drawback of <object> is that it doesn't work in IE and Edge, which is another bug. Heck, if you view the same URL I linked above in IE, you will see only one box, the one that uses <img>. Either <object> should work in IE and Edge seamlessly or <img> should support custom fonts.\nI believe both issues should be fixed since the only advantage of using <object> is when you want to inspect the DOM with JavaScript or JQuery. <object> should definitely work in IE and Edge and <img> should support custom fonts, since if one wants to export a save-able image to the browser using holder, they are able to do so.\n@imsky please update the topic to IMG placeholder instead of SVG and add the bug label since custom fonts are a fundamental feature of holder.\n. ",
    "at0g": "It's all good, my mistake. Sorry for the false bug report.\n. It's all good, my mistake. Sorry for the false bug report.\n. ",
    "Trapets": "I use Holder.js ver.2.8.0+7srgw, machine runs Win 7 Pro, browsers Firefox 41.0.2 and Chrome 46.0.2490.80. \n\n. If i use this color value for only fg color, it works. If i use this color value for bg color, it breaks.\nI'm not code wise. But i see some error log in my LightTable console, maybe it helps:\nUncaught TypeError: Cannot read property 'toString' of undefined\nholder.js [2413] Color.toHex\n. With 2.9.0 it works. Didn't test with 2.8.2.\n. I use Holder.js ver.2.8.0+7srgw, machine runs Win 7 Pro, browsers Firefox 41.0.2 and Chrome 46.0.2490.80. \n\n. If i use this color value for only fg color, it works. If i use this color value for bg color, it breaks.\nI'm not code wise. But i see some error log in my LightTable console, maybe it helps:\nUncaught TypeError: Cannot read property 'toString' of undefined\nholder.js [2413] Color.toHex\n. With 2.9.0 it works. Didn't test with 2.8.2.\n. ",
    "julzmon": "Great thanks!\n. Great thanks!\n. ",
    "AminSarafraz": "second this. second this. ",
    "ilmente": "Just created a PR. Ignore it if you prefer to proceed your way.\nThanks a lot.\n. Great!\nSorry for bothering you again: can you update the npm registry as well?\nObviously, whenever you're ready to do it.\nThanks.\n. Just created a PR. Ignore it if you prefer to proceed your way.\nThanks a lot.\n. Great!\nSorry for bothering you again: can you update the npm registry as well?\nObviously, whenever you're ready to do it.\nThanks.\n. ",
    "redayoub": "I'm using it with arabic text, so for exemple the text : \"\u0627\u0644\u062f\u0627\u0631 \u0627\u0644\u0628\u064a\u0636\u0627\u0621\" is displayed like that \"\u0627\u0644\u0628\u064a\u0636\u0627\u0621 \u0627\u0644\u062f\u0627\u0631 \" inside a holder image. In css we can do that by setting text direction to rtl.\n. Thanks\n. How can I add this manually please ?\n. I'm using it with arabic text, so for exemple the text : \"\u0627\u0644\u062f\u0627\u0631 \u0627\u0644\u0628\u064a\u0636\u0627\u0621\" is displayed like that \"\u0627\u0644\u0628\u064a\u0636\u0627\u0621 \u0627\u0644\u062f\u0627\u0631 \" inside a holder image. In css we can do that by setting text direction to rtl.\n. Thanks\n. How can I add this manually please ?\n. ",
    "PerseusTheGreat": "The below link introduces you, useful references to rendering RTL text in SVG.\nW3C - SVG Text direction\nGood luck.. The below link introduces you, useful references to rendering RTL text in SVG.\nW3C - SVG Text direction\nGood luck.. ",
    "zang": "not really. There are too many files to change in my app to upgrade to the new format, just wondering if there's a shortcut. \n. Will try 2.8. \nActually, I need the support for old formats as the image setup strings are stored in our mongodb. :)\n. 2.7 works and 2.8 doesn't. It would be great if the old format can be supported in the future release. \nthanks for your help.\n. not really. There are too many files to change in my app to upgrade to the new format, just wondering if there's a shortcut. \n. Will try 2.8. \nActually, I need the support for old formats as the image setup strings are stored in our mongodb. :)\n. 2.7 works and 2.8 doesn't. It would be great if the old format can be supported in the future release. \nthanks for your help.\n. ",
    "ivancuric": "I did an npm update, but the package wasn't updated on NPM. Works now.\n. No need to constantly reload placeholders if they are being used like normal images. Would also be good to disable adding resize event listeners globally :)\n. I did an npm update, but the package wasn't updated on NPM. Works now.\n. No need to constantly reload placeholders if they are being used like normal images. Would also be good to disable adding resize event listeners globally :)\n. ",
    "rtv2222": "http://stackoverflow.com/questions/18447970/content-security-policy-data-not-working-for-base64-images-in-chrome-28 fixed it for me.  The CSP needs img-src 'self' data:;\n. http://stackoverflow.com/questions/18447970/content-security-policy-data-not-working-for-base64-images-in-chrome-28 fixed it for me.  The CSP needs img-src 'self' data:;\n. ",
    "hiro20v": "In my case, I could fix it with the following code.\njavascript\nexports.setAttr = function (el, attrs) {\n    for (var a in attrs) {\n        if('style' == a){\n            el.style.cssText = attrs[a];\n        }else{\n            el.setAttribute(a, attrs[a]);\n        }\n    }\n};\nErrors can be seen in this project.\nhttps://github.com/hiro20v/FinePlay\n2017/10/28 now, I haven't fixed it yet.\n. In my case, I could fix it with the following code.\njavascript\nexports.setAttr = function (el, attrs) {\n    for (var a in attrs) {\n        if('style' == a){\n            el.style.cssText = attrs[a];\n        }else{\n            el.setAttribute(a, attrs[a]);\n        }\n    }\n};\nErrors can be seen in this project.\nhttps://github.com/hiro20v/FinePlay\n2017/10/28 now, I haven't fixed it yet.\n. ",
    "wahoo189": "thanks for the updated link, it works and I am unblocked.\nOn Mon, May 23, 2016 at 7:50 PM, Ivan Malopinsky notifications@github.com\nwrote:\n\nfirst time i'm seeing this, not sure why Github is redirecting. will look\ninto setting up HTTPS on holderjs.com\nin the meantime please use the library from\nhttps://cdnjs.com/libraries/holder or\nhttp://www.jsdelivr.com/projects/holder\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/imsky/holder/issues/186#issuecomment-221128939\n. thanks for the updated link, it works and I am unblocked.\n\nOn Mon, May 23, 2016 at 7:50 PM, Ivan Malopinsky notifications@github.com\nwrote:\n\nfirst time i'm seeing this, not sure why Github is redirecting. will look\ninto setting up HTTPS on holderjs.com\nin the meantime please use the library from\nhttps://cdnjs.com/libraries/holder or\nhttp://www.jsdelivr.com/projects/holder\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/imsky/holder/issues/186#issuecomment-221128939\n. \n",
    "tasmanwebsolutions": "That worked \n. Solved thanks \n. That worked \n. Solved thanks \n. ",
    "samtrion": "Same problem for me...\nFiddle\n. If i add text on each srcset, i get the default value... strange :/\nFiddle\n. Same problem for me...\nFiddle\n. If i add text on each srcset, i get the default value... strange :/\nFiddle\n. ",
    "peterblazejewicz": "@saneef \nTry:\nbash\nyarn add holderjs\njs\nnew webpack.ProvidePlugin({\n            jQuery: 'jquery',\n            $: 'jquery',\n            jquery: 'jquery',\n            Tether: 'tether',\n            'window.Tether': 'tether',\n            'window.Holder': 'holderjs'\n        })\njs\n// 3rd party references\nvar jquery = require('jquery');\nvar tether = require('tether');\nvar bootstrap = require('bootstrap');\nvar holderjs = require('holderjs');. @saneef \nTry:\nbash\nyarn add holderjs\njs\nnew webpack.ProvidePlugin({\n            jQuery: 'jquery',\n            $: 'jquery',\n            jquery: 'jquery',\n            Tether: 'tether',\n            'window.Tether': 'tether',\n            'window.Holder': 'holderjs'\n        })\njs\n// 3rd party references\nvar jquery = require('jquery');\nvar tether = require('tether');\nvar bootstrap = require('bootstrap');\nvar holderjs = require('holderjs');. ",
    "boogermann": "@imsky any update on this issue? I have created a plugin for Vue.js that uses holder. Although I have it working while in the dev environment, once I pack a standalone version for production and import into another project I get the same error as @saneef \"Uncaught TypeError: Cannot read property 'document' of undefined\"\nHere is the block where the error is thrown:\nthe line that returns the error is: if (!global.document) return; if I change line 13 of your code reflects on this area of the packed version.\n```javascript\n/*\n * Generic new DOM element function\n *\n * @param tag Tag to create\n * @param namespace Optional namespace value\n /\nexports.newEl = function (tag, namespace) {\n    if (!global.document) return;\nif (namespace == null) {\n    return global.document.createElement(tag);\n} else {\n    return global.document.createElementNS(namespace, tag);\n}\n\n};\nI've tried a variety of methods and babel plugins for the last 2 days with no luck, I have even included jquery, bootstrap and tether to the pack, but I still get the same error.. @imsky while I was preparing something for you I think I have found the problem.\nI did a fine tuning on my webpack config file and was able to pack everything into a standalone version, but it will only work if I reference it in the html code. When I include the bundled version into another project, the error I've mention before happens. The problems seems to beonDomReady.js``` being executed before the Window Object is defined. I think it's the same problem mentioned on your readme about Meteor.\nWhen importing, Vue requires me to do a Vue.use(PLUGIN) to enable the plugin, but even without using it, and just doing the import the chunk of your code gets executed.\nSo I think the best way here is have it serving both ways, people that are not using a bundler or transpiler can just use the compiled version, and rest just need to import from the source.\nI'll finish the documentation, create an example on jsfiddle and publish it to npm on weekend.. @imsky sorry for the long wait, I had the package done for a long time but was busy and completely forgot to publish my vue-holderjs package. It's also published on npm.\n@LG0012 you can just use my plugin if you're using laravel with vue npm install vue-holderjs --save, otherwise you need to include this in your webpack config\nplugins: [\n    new webpack.ProvidePlugin({\n        $: 'jquery',\n        jQuery: 'jquery',\n        'window.jQuery': 'jquery',\n        Holder: 'holderjs',\n        holder: 'holderjs',\n        'window.Holder': 'holderjs'\n    })\n]. @LG0012 Yes, it's for vue2. I've setup a little demo\nwhen you import try vue-holderjs/src instead of just vue-holderjs and see if it works.. @LG0012 There you go! \ud83d\udc4d  I think I know where the problems is, the import gets the file from /dist. I'm doing some modifications here to have both options to use as a script source or import/require into a project.. @LG0012 Thanks, bumped to version 1.0.2 now it work as it suppose to. If you could give it a test I would appreciate it! JSFiddle was also updated to include more usage examples.. @imsky any update on this issue? I have created a plugin for Vue.js that uses holder. Although I have it working while in the dev environment, once I pack a standalone version for production and import into another project I get the same error as @saneef \"Uncaught TypeError: Cannot read property 'document' of undefined\"\nHere is the block where the error is thrown:\nthe line that returns the error is: if (!global.document) return; if I change line 13 of your code reflects on this area of the packed version.\n```javascript\n/*\n * Generic new DOM element function\n *\n * @param tag Tag to create\n * @param namespace Optional namespace value\n /\nexports.newEl = function (tag, namespace) {\n    if (!global.document) return;\nif (namespace == null) {\n    return global.document.createElement(tag);\n} else {\n    return global.document.createElementNS(namespace, tag);\n}\n\n};\nI've tried a variety of methods and babel plugins for the last 2 days with no luck, I have even included jquery, bootstrap and tether to the pack, but I still get the same error.. @imsky while I was preparing something for you I think I have found the problem.\nI did a fine tuning on my webpack config file and was able to pack everything into a standalone version, but it will only work if I reference it in the html code. When I include the bundled version into another project, the error I've mention before happens. The problems seems to beonDomReady.js``` being executed before the Window Object is defined. I think it's the same problem mentioned on your readme about Meteor.\nWhen importing, Vue requires me to do a Vue.use(PLUGIN) to enable the plugin, but even without using it, and just doing the import the chunk of your code gets executed.\nSo I think the best way here is have it serving both ways, people that are not using a bundler or transpiler can just use the compiled version, and rest just need to import from the source.\nI'll finish the documentation, create an example on jsfiddle and publish it to npm on weekend.. @imsky sorry for the long wait, I had the package done for a long time but was busy and completely forgot to publish my vue-holderjs package. It's also published on npm.\n@LG0012 you can just use my plugin if you're using laravel with vue npm install vue-holderjs --save, otherwise you need to include this in your webpack config\nplugins: [\n    new webpack.ProvidePlugin({\n        $: 'jquery',\n        jQuery: 'jquery',\n        'window.jQuery': 'jquery',\n        Holder: 'holderjs',\n        holder: 'holderjs',\n        'window.Holder': 'holderjs'\n    })\n]. @LG0012 Yes, it's for vue2. I've setup a little demo\nwhen you import try vue-holderjs/src instead of just vue-holderjs and see if it works.. @LG0012 There you go! \ud83d\udc4d  I think I know where the problems is, the import gets the file from /dist. I'm doing some modifications here to have both options to use as a script source or import/require into a project.. @LG0012 Thanks, bumped to version 1.0.2 now it work as it suppose to. If you could give it a test I would appreciate it! JSFiddle was also updated to include more usage examples.. ",
    "LG0012": "Still not working, any solution? Using laravel webpack out of the box.. Thanks i will give a shot. :). Well - http://prntscr.com/h6psau :)\nThis vue-holderjs is for vue2?\n. Its working now. I solved this by creating a new file with this content: http://prntscr.com/h6q0qv\nAnd used just like that: http://prntscr.com/h6q0yh\n. I pretty sure you right :) Good work ;). Still not working, any solution? Using laravel webpack out of the box.. Thanks i will give a shot. :). Well - http://prntscr.com/h6psau :)\nThis vue-holderjs is for vue2?\n. Its working now. I solved this by creating a new file with this content: http://prntscr.com/h6q0qv\nAnd used just like that: http://prntscr.com/h6q0yh\n. I pretty sure you right :) Good work ;). ",
    "cliveb": "On a related note. I can't get the text working (only holder box dimensions). http://socialmrp.com\nSuper to use material icons in place of \"the text\".\n. Copy and paste the JSBin into the JSFiddle and material icons work in place of text.... I can roll now. (thank you both). \n. I am not able to use material icons in javascript only in html. \nsite http://www.socialmrp.com \nrepo https://github.com/cliveb/socialmrpsite \nfrom themify.js\nvar q = a(p[0], p[1], p[2]), r = b(p, [0, 0, 0], .2), s = a(r[0], r[1], r[2]), t = $(\"\").attr(\"data-src\", \"holder.js/\" + f + \"x\" + e + \"?bg=\" + q + \"&fg=\" + q + \"font=Material+Icons&size=30&auto=true&text=&#xE7F2\").css({ top: i + \"px\", left: k + \"px\" });\nTried everything every which way, please what have I missed?\n. Still not working after made change to text=\ue7f2 \nHow to use Bootstrap Glyphicons in Holder.js images points towards key is selecting and passing the unicode character in the correct format for it to be interpreted? http://stackoverflow.com/questions/19250594/how-to-use-bootstrap-glyphicons-in-holder-js-images\nI tried to implement the Glyphicon fiddler http://jsfiddle.net/Samyoul/xH4fs/ in JSBin above https://jsbin.com/gaxadoxoji for Material Icon. I can only show placeholder with 140x140 text (material icon not showing).\n@mikeatm above changed to Holderjs.run( { renderer: 'canvas', object: some_react_ref_here }) to have  material icons working?  I am lost trying to implement this?\nHolder doc says:\n\"However, if you need to render a SVG placeholder using an externally loaded font, you have to use the object tag instead of the img tag and add a holderjs class to the appropriate link tags. Here's an example:\"\nI tried:\nvar q = a(p[0], p[1], p[2]), r = b(p, [0, 0, 0], .2), s = a(r[0], r[1], r[2]), t = $(\"\").attr().css({ top: i + \"px\", left: k + \"px\" });\nNo luck.             \n. Thank you, I added a new open issue to follow through.\n. Thanks for CORS correct css headers for Google's material icons.  Same story material icons works in html but do not work in Ivan's demo.js which I am trying to reuse as themify.js\nUsing text=\ue7f2 result is placeholder sizes at http://www.socialmrp.com\nUsing text=mood; result is placeholders spell out mood;\nInteresting <object data-src=\"holder.js/200x200?theme=vine&text=\ue7f2 also fails in JSFiddle \nhttps://jsfiddle.net/metalcactus/2uyztnyq/23/\nI changed default renderer to holderjs.run default render to  renderer: 'canvas', object: 'background' at repo https://github.com/cliveb/socialmrpsite\nChrome dev tools show placeholders never see the material icons fonts. Socialmrp.com almost same svg as holderjs.com  \n*** www.socialmrp.com / themify.js\nsrc=\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22231%22%20height%3D%22120%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20231%20120%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_158238adc22%20text%20%7B%20fill%3Anull%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A30pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_158238adc22%22%3E%3Crect%20width%3D%22231%22%20height%3D%22120%22%20fill%3D%22%231b2727%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%2237.640625%22%20y%3D%2273.2%22%3E231x120%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\"\n*** holderjs.com / demo.js \nsrc=\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22243%22%20height%3D%22120%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20243%20120%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_1582390179c%20text%20%7B%20fill%3A%2399c183%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A12pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_1582390179c%22%3E%3Crect%20width%3D%22243%22%20height%3D%22120%22%20fill%3D%22%23c0f2a4%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%2290.359375%22%20y%3D%2265.1%22%3E243x120%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\" \nI re-read holderjs doc and stackoverflow and experimented for a solution, no luck.  \nI am stumped?\n. @mikeatm Thanks for the guidance. Made no difference setting font=Material+Icons to font=Material Icons. I will try to create a fiddle that represents (no small feat for me, I am learning a lot).\n. On a related note. I can't get the text working (only holder box dimensions). http://socialmrp.com\nSuper to use material icons in place of \"the text\".\n. Copy and paste the JSBin into the JSFiddle and material icons work in place of text.... I can roll now. (thank you both). \n. I am not able to use material icons in javascript only in html. \nsite http://www.socialmrp.com \nrepo https://github.com/cliveb/socialmrpsite \nfrom themify.js\nvar q = a(p[0], p[1], p[2]), r = b(p, [0, 0, 0], .2), s = a(r[0], r[1], r[2]), t = $(\"\").attr(\"data-src\", \"holder.js/\" + f + \"x\" + e + \"?bg=\" + q + \"&fg=\" + q + \"font=Material+Icons&size=30&auto=true&text=&#xE7F2\").css({ top: i + \"px\", left: k + \"px\" });\nTried everything every which way, please what have I missed?\n. Still not working after made change to text=\ue7f2 \nHow to use Bootstrap Glyphicons in Holder.js images points towards key is selecting and passing the unicode character in the correct format for it to be interpreted? http://stackoverflow.com/questions/19250594/how-to-use-bootstrap-glyphicons-in-holder-js-images\nI tried to implement the Glyphicon fiddler http://jsfiddle.net/Samyoul/xH4fs/ in JSBin above https://jsbin.com/gaxadoxoji for Material Icon. I can only show placeholder with 140x140 text (material icon not showing).\n@mikeatm above changed to Holderjs.run( { renderer: 'canvas', object: some_react_ref_here }) to have  material icons working?  I am lost trying to implement this?\nHolder doc says:\n\"However, if you need to render a SVG placeholder using an externally loaded font, you have to use the object tag instead of the img tag and add a holderjs class to the appropriate link tags. Here's an example:\"\nI tried:\nvar q = a(p[0], p[1], p[2]), r = b(p, [0, 0, 0], .2), s = a(r[0], r[1], r[2]), t = $(\"\").attr().css({ top: i + \"px\", left: k + \"px\" });\nNo luck.             \n. Thank you, I added a new open issue to follow through.\n. Thanks for CORS correct css headers for Google's material icons.  Same story material icons works in html but do not work in Ivan's demo.js which I am trying to reuse as themify.js\nUsing text=\ue7f2 result is placeholder sizes at http://www.socialmrp.com\nUsing text=mood; result is placeholders spell out mood;\nInteresting <object data-src=\"holder.js/200x200?theme=vine&text=\ue7f2 also fails in JSFiddle \nhttps://jsfiddle.net/metalcactus/2uyztnyq/23/\nI changed default renderer to holderjs.run default render to  renderer: 'canvas', object: 'background' at repo https://github.com/cliveb/socialmrpsite\nChrome dev tools show placeholders never see the material icons fonts. Socialmrp.com almost same svg as holderjs.com  \n*** www.socialmrp.com / themify.js\nsrc=\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22231%22%20height%3D%22120%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20231%20120%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_158238adc22%20text%20%7B%20fill%3Anull%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A30pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_158238adc22%22%3E%3Crect%20width%3D%22231%22%20height%3D%22120%22%20fill%3D%22%231b2727%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%2237.640625%22%20y%3D%2273.2%22%3E231x120%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\"\n*** holderjs.com / demo.js \nsrc=\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22243%22%20height%3D%22120%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20243%20120%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_1582390179c%20text%20%7B%20fill%3A%2399c183%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A12pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_1582390179c%22%3E%3Crect%20width%3D%22243%22%20height%3D%22120%22%20fill%3D%22%23c0f2a4%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%2290.359375%22%20y%3D%2265.1%22%3E243x120%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\" \nI re-read holderjs doc and stackoverflow and experimented for a solution, no luck.  \nI am stumped?\n. @mikeatm Thanks for the guidance. Made no difference setting font=Material+Icons to font=Material Icons. I will try to create a fiddle that represents (no small feat for me, I am learning a lot).\n. ",
    "mikeatm": "here:\nhttps://jsfiddle.net/czwzoa02/\nand here\nhttps://jsfiddle.net/czwzoa02/2/\n. I had to change this on Holderjs.run( { renderer: 'canvas', object:  some_react_ref_here })\nseems the default renderer was not working. \n. @cliveb   I meant i changed the default renderer, holder can be initialized with two renderers. It defaults to svg renderer if you do not call Holder.run({}) with the non default renderer which is canvas . The \"object\" part is simply  passing the tag  referring to the html element Holder needs to turn to an image.  \nHolderjs.run( { renderer: 'canvas',  //   can be svg or canvas\n            object: some_selector_here //  your css selector,  for <object/>\n            images:  some_image_selector  // your css selector, use this if ur using <img/>\n             })\nSorry if i caused confusion.  i meant to emphasize the default render svg was having trouble, but canvas renderer was working. I  saw in one of an earlier issues  using icon fonts with holder someone had problems with svg but canvas worked (see this https://github.com/imsky/holder/issues/73#issuecomment-51996358)\n. @cliveb  im not sure how to import with css and specify the class  as is done with <link>,  this line from your fiddle looks like it will not work  though, its not a valid url\nsrc: url('//fonts.googleapis.com/icon?family=Material+Icons\" class=\"holderjs');\nHere is an edited version that seems to work:\nhttps://jsbin.com/voxaduraga/edit?html,css,output (and on fiddle)  https://jsfiddle.net/2uyztnyq/11/\n @imsky  can you comment on how the requirement to specify  class on the <link>  element affects a  css  src url?  here is something i tried:\n```\n@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Material Icons'), local('MaterialIcons-Regular'), url(https://fonts.gstatic.com/s/materialicons/v18/2fcrYFNaTjcS6g4U3t-Y5StnKWgpfO2iSkLzTz-AABg.ttf) format('truetype');\n}\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n```\nseems to work, but not sure whether it can be better.\n. So really it seems to me to be more of a problem with the url  and font-family name,  googles font servers are properly setup with CORS headers (its google after all).  this minimal change should work too:\n@font-face {\n  font-family: 'Material Icons';\n          src: local('Material Icons'), local('MaterialIcons-Regular'), url(//fonts.gstatic.com/s/materialicons/v18/2fcrYFNaTjcS6g4U3t-Y5StnKWgpfO2iSkLzTz-AABg.ttf) format('truetype');\n}\n. @cliveb  its hard to see whats going on without a simple case on jsfiddle which reproduces your case,\nbut  try changing on this line https://github.com/cliveb/socialmrpsite/blob/master/themify.js#L13\nfrom font=Material+Icons to font=Material Icons ,\nif that does not work,  create a fiddle that represents what you  have tried as exactly as possible.\n. here:\nhttps://jsfiddle.net/czwzoa02/\nand here\nhttps://jsfiddle.net/czwzoa02/2/\n. I had to change this on Holderjs.run( { renderer: 'canvas', object:  some_react_ref_here })\nseems the default renderer was not working. \n. @cliveb   I meant i changed the default renderer, holder can be initialized with two renderers. It defaults to svg renderer if you do not call Holder.run({}) with the non default renderer which is canvas . The \"object\" part is simply  passing the tag  referring to the html element Holder needs to turn to an image.  \nHolderjs.run( { renderer: 'canvas',  //   can be svg or canvas\n            object: some_selector_here //  your css selector,  for <object/>\n            images:  some_image_selector  // your css selector, use this if ur using <img/>\n             })\nSorry if i caused confusion.  i meant to emphasize the default render svg was having trouble, but canvas renderer was working. I  saw in one of an earlier issues  using icon fonts with holder someone had problems with svg but canvas worked (see this https://github.com/imsky/holder/issues/73#issuecomment-51996358)\n. @cliveb  im not sure how to import with css and specify the class  as is done with <link>,  this line from your fiddle looks like it will not work  though, its not a valid url\nsrc: url('//fonts.googleapis.com/icon?family=Material+Icons\" class=\"holderjs');\nHere is an edited version that seems to work:\nhttps://jsbin.com/voxaduraga/edit?html,css,output (and on fiddle)  https://jsfiddle.net/2uyztnyq/11/\n @imsky  can you comment on how the requirement to specify  class on the <link>  element affects a  css  src url?  here is something i tried:\n```\n@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Material Icons'), local('MaterialIcons-Regular'), url(https://fonts.gstatic.com/s/materialicons/v18/2fcrYFNaTjcS6g4U3t-Y5StnKWgpfO2iSkLzTz-AABg.ttf) format('truetype');\n}\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n```\nseems to work, but not sure whether it can be better.\n. So really it seems to me to be more of a problem with the url  and font-family name,  googles font servers are properly setup with CORS headers (its google after all).  this minimal change should work too:\n@font-face {\n  font-family: 'Material Icons';\n          src: local('Material Icons'), local('MaterialIcons-Regular'), url(//fonts.gstatic.com/s/materialicons/v18/2fcrYFNaTjcS6g4U3t-Y5StnKWgpfO2iSkLzTz-AABg.ttf) format('truetype');\n}\n. @cliveb  its hard to see whats going on without a simple case on jsfiddle which reproduces your case,\nbut  try changing on this line https://github.com/cliveb/socialmrpsite/blob/master/themify.js#L13\nfrom font=Material+Icons to font=Material Icons ,\nif that does not work,  create a fiddle that represents what you  have tried as exactly as possible.\n. ",
    "LarryAzevedo": "Ok so here's the issue. It only works if you have a leading zero in the alpha channel.  So it doesn't work with: bg=rgba(13, 97, 145, .1) but does work with bg=rgba(13, 97, 145, 0.1).. Great!  Thank you very much.. Ok so here's the issue. It only works if you have a leading zero in the alpha channel.  So it doesn't work with: bg=rgba(13, 97, 145, .1) but does work with bg=rgba(13, 97, 145, 0.1).. Great!  Thank you very much.. ",
    "Haocen": "For whatever reason shaven@1.1.0 still want node~0.12 which will cause holders fail to install on any morden node environment.\nLuckily this only affect user who has engineStrict set to 'true' in their project or npm globally.\nUnfortunately I have to enforce engineStrict in my project, but I find a walk around by move shaven into dev dependencies since I I need is dist version of holders. I haven't run into any problems so for.. For whatever reason shaven@1.1.0 still want node~0.12 which will cause holders fail to install on any morden node environment.\nLuckily this only affect user who has engineStrict set to 'true' in their project or npm globally.\nUnfortunately I have to enforce engineStrict in my project, but I find a walk around by move shaven into dev dependencies since I I need is dist version of holders. I haven't run into any problems so for.. ",
    "pliablepixels": "Hi @imsky,\nI've set up an example:\nhttps://plnkr.co/edit/ibOyJvmNWadQWOm6Ki7u?p=info\n(The code is in home.page.ts/html)\nThe problem is that using either data-binding or expression evaluation does not work in angular. Using a static text value does work\nso:\n<img holderjs data-src=\"holder.js/200x200/auto\"> works well\nhowever: (assuming myvariable=\"holder.js/200x200/auto\")\n<img holderjs data-src=\"{{myvariable}}\"> does not work - if I inspect source, I see that data-src contains the value of my variable but no src tag is added with data:image/<etc>\n<img holderjs [data-src]=\"myvariable\"> does not work, it says [data-src] is not a known property of img\nSo bottom line, I can't use dynamic placeholders\n(Note: I am aware I can just define an empty id in the template and use holderjs addImage to programmatically add an image, but for various reasons, I'd prefer to not do this)\nthanks!\n. Hi, this problem was resolved. I forked and created a version that works\nhttps://github.com/pliablepixels/angular-2-holderjs\nThank you for offering to look into a problem that was outside your library!\nThe problem was resolved by this post: https://stackoverflow.com/a/46673111/1361529\n. Hi @imsky,\nI've set up an example:\nhttps://plnkr.co/edit/ibOyJvmNWadQWOm6Ki7u?p=info\n(The code is in home.page.ts/html)\nThe problem is that using either data-binding or expression evaluation does not work in angular. Using a static text value does work\nso:\n<img holderjs data-src=\"holder.js/200x200/auto\"> works well\nhowever: (assuming myvariable=\"holder.js/200x200/auto\")\n<img holderjs data-src=\"{{myvariable}}\"> does not work - if I inspect source, I see that data-src contains the value of my variable but no src tag is added with data:image/<etc>\n<img holderjs [data-src]=\"myvariable\"> does not work, it says [data-src] is not a known property of img\nSo bottom line, I can't use dynamic placeholders\n(Note: I am aware I can just define an empty id in the template and use holderjs addImage to programmatically add an image, but for various reasons, I'd prefer to not do this)\nthanks!\n. Hi, this problem was resolved. I forked and created a version that works\nhttps://github.com/pliablepixels/angular-2-holderjs\nThank you for offering to look into a problem that was outside your library!\nThe problem was resolved by this post: https://stackoverflow.com/a/46673111/1361529\n. ",
    "Quix0r": "Thank you. Maybe I oversaw that option. And it works here.. Hmm, if I use border-size: xFOO like 5px, the border is not rendered on the rounded border corners. Maybe a general issue with CSS?. Again signing up somewhere ... :-/ I have uploaded a screenshot to my nextcloud instance:\nhttps://cloud.mxchange.org/index.php/s/149vSQYmDeENiuY?path=%2Fholderjs#/holderjs/20171102%20-%20Rounded%20Corner%20-%20001.png. Maybe I looked too fast. Anyway. Thank you for supporting this.. Thank you. Maybe I oversaw that option. And it works here.. Hmm, if I use border-size: xFOO like 5px, the border is not rendered on the rounded border corners. Maybe a general issue with CSS?. Again signing up somewhere ... :-/ I have uploaded a screenshot to my nextcloud instance:\nhttps://cloud.mxchange.org/index.php/s/149vSQYmDeENiuY?path=%2Fholderjs#/holderjs/20171102%20-%20Rounded%20Corner%20-%20001.png. Maybe I looked too fast. Anyway. Thank you for supporting this.. "
}