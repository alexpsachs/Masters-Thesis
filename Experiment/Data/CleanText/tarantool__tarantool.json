{
    "delamonpansie": "Do you read http://github.com/mailru/tarantool/wiki/protocol ?\n. I got your point. Such page will be written.\nAs for your questions: \n1. No, you can't push-pop to tuples. Support for lists, stacks and trees are planned in the next release.\n2. You may update fields of tuples. E.g. it is posible to add 42 to the third field of tuple.\n3. No, it isn't column based. No restrictions on tuple size are enforced.\nTake a look on perl client http://github.com/mailru/tarantool/wiki/client_perl\n. A wike page has been written http://github.com/mailru/tarantool/wiki/example\nand a toy ruby client added to unstable branch. hope this help.\n. use gmake (AKA GNU make) instead of make (AKA pmake or BSD-make)\n. ",
    "Deepwalker": "Of course : ) Its \"for bot\" specification about what fields can be.\nI need usage samples. I dont understand what this DB can to do - can I pop, push to tuples? Or I can only store tuples as is? Its column db?\nYes, its not clearly protocol description, but without fully understanding DB I cant decide how to implement interface to DB. Need I mimicry to lists, dicts or tuples? What operations I must implement?\nSummary:\n1. Place DB on right leaf in NOSQL tree\n2. Explain DB datatypes and operations on it;\n3. Write some DB usages.\n. ",
    "wagonza": "ahh - thanks, all compiled :)\n. ",
    "ademakov": "\u041a\u0430\u043a-\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043f\u0440\u044f\u043c\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u0436\u0435 \u044d\u0442\u043e \u0441\u043a\u043e\u0440\u0435\u0435 \u043d\u0435\u043a\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0439\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438, \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c\u044b\u0439 \u043f\u043e \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c.\n. \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e \u0432 \u041f\u043e\u0441\u0442\u0433\u0440\u0435\u0441\u0435 \u044d\u0442\u043e \u043d\u0430\u0437\u0432\u0430\u043b\u0438. \u0412\u0441\u0435 \u0442\u0430\u043a\u0438 \u044d\u0442\u043e \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043e\u0431\u0445\u043e\u0434\u0430.\n. ",
    "rtsisyk": "\u0422\u0430\u043c \u0438 \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b, \u0430 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438.\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438 \u043f\u043b\u0437 http://www.postgresql.org/docs/9.2/static/xindex.html\n. Pushed\n. fixed with MsgPack\n. Related issue: https://github.com/tarantool/tarantool/issues/61\n. there is no more connector, no --cat, no problems.\nMay I close this ticket?\n. Renamed and rescheduled to 1.6.4\n. blocked by #295 \n. ```\nlocalhost=> require('session').delimiter(';')\n\n...\nlocalhost=> 10 +\nlocalhost-> 20 + \nlocalhost-> 30;\n\n\n60\n...\nlocalhost=> require('session').delimiter();\n\n\n\n;\n...\nlocalhost=> require('session').delimiter('EOF');\n\n\n...\nlocalhost=> 10 + \nlocalhost-> 20 +\nlocalhost-> 30\nlocalhost-> EOF\n\n\n60\n...\nlocalhost=> require('session').delimiter('')\nlocalhost-> EOF\n\n\n...\nlocalhost=> 10\n\n\n10\n...\nlocalhost=> 20\n\n\n\n20\n...\n```\n. Implemented both for interactive mode && admin console. See also #275 comments.\n=> review\n. It works properly in both modes.\nerror() will display stdin:linenumber\n\n```\nlocalhost=> require('session').delimiter(';')\n\n...\nlocalhost=> function test()\nlocalhost-> error('Hello')\nlocalhost-> end\nlocalhost-> ;\n\n...\nlocalhost=> test();\n\n\nerror: '[string \"function test()...\"]:2: Hello'\n...\n```\n. @pgulutzan \n\n\nThe only problem with box.session.delimiter('...') is that it depends on the session, so I can't set it before starting a session, and I lose it (I suppose it returns to the default) if I close a session. Why not box.cfg instead?\n\nIt is a feature. Multiple clients can have different delimiters.\n. Confirmed.\n. Fix committed. Packages will be within a hour.\n. OK. I already reviewed this branch and unera fixed most problems that we found.\nI plan to review it again, fix all other things and merge.\n. Moved to module (http://github.com/tarantool/http). Works both with 1.5 and 1.6.\nPlease use bug tracker in http://github.com/tarantool/http for new issues.\n. Done in MsgPack during rewriting of lbox_index_count\n. 1.5:\n```\nlocalhost> lua box.space[0].index[0]:count()\n\nerror: 'index.count(): one or more arguments expected'\n...\n```\n1.6:\n```\nlocalhost> box.space[0].index[0]:count()\n\n\n1\n...\n```\n\nI can add test cases for 1.6 and close the ticket. @kostja ?\n. Seems that I have already added the test to MsgPack branch.\n. I promised to put some light on this bug.\ntuple_alloc shifts a tuple pointer and uses this extra space to store field_map:\nchar *ptr = (char *) salloc(total, \"tuple\");\n    struct tuple *tuple = (struct tuple *)(ptr + format->field_map_size);\nsalloc_index_to_ptr always returns the original pointer. \nThere is no way to get shifted pointer from original because the size of field_map cannot be determined.\n. test/box/bitset.lua works with (num, num) tuples. Such kind of tuples do not need the offset table, because offsets can be precalculated and saved in the tuple format definition.\nBITSET need a (tuple <-> some_number_id) mapping where the right space is very dense.\nptr_to_index is not so good approximation to the ideal mapping, but it was best that I could implement in our architecture. Replacing ptr_to_index with tuple pointer make BITSET very sparse and therefore ineffective.\nPossible ways to fix the bug:\n1. Remove the ugly hack which shifting pointers and move all offsets to the end of tuple\n2. Try to find a better way to enumerate tuples in the space\n. I added a workaround for 1.5 to fix bitset.\nAnyway, this bug is not fixed.\n. I'm not sure about offset in mhash,  but I totally agree with the idea.\nThis ticket should be re-scheduled to 1.5.x.\n. @bigbes92  works on Python3 support in mailru/tarantool-python driver. After finishing with the driver we probably can return to the test system.\n. Requires refactoring of recovery subsystem:\n- recover_snap() should raise exceptions instead of using panic().\n- box_init() should properly clean resources.\n- replication_relay_loop() should send IPROTO_ERROR to replica\n- replica should handle ERROR responses properly\nI don't think that it is good idea for now. \n. > replication_relay_loop() should send IPROTO_ERROR to replica\n\nreplica should handle ERROR responses properly\n\nthis two points were fixed.\n. New definition of the task sounds as (see #357):\n\nif the server fails to connect to a source, it should keep trying, even if it has not performed a join yet (right now it only keeps trying in SUBSCRIBE)\n. I need a separate option in config to start tarantool_box daemon without this idiomatic sandbox. Even for production.\n. Default value should be OFF (=sandbox is disabled). Such sandbox add nothing to security, it just make problems for everybody.\n. ```\nWas: 2013-10-14 13:29:25.988 [28407] 103/admin/127.0.0.1:60859 exception.cc:108 E> ClientError at /data/work/tarantool/stable/src/box/box_lua.cc:1204, Illegal parameters, Hello\nWith patch: 2013-10-14 13:29:44.012 [28780] 103/admin/127.0.0.1:60864 box_lua.cc:1204 E> ER_ILLEGAL_PARAMS: Illegal parameters, Hello\n\nWas: 2013-10-14 13:31:48.618 [29686] 103/admin/127.0.0.1:60871 exception.cc:76 E> SystemError in evio_bind_addrinfo(), called on fd 1: Interrupted system call\nWith patch: 2013-10-14 13:32:52.449 [30428] 103/admin/127.0.0.1:60876 box_lua.cc:1206 E> SystemError in evio_bind_addrinfo(), called on fd 1: Interrupted system call\n```\n. @unera makes 1.5 -> 1.6 proxy using replication protocol.\n. Please file luaL_Buffer bug and link to this issue. Thanks.\n. I think it is not so hard to implement.\nThe main problem is where which flag should be provided by the user.\n. \u0433\u0445\u043c, \u0432\u0438\u0436\u0443 \u0441\u043b\u0435\u0434\u044b palloc \u0432 \u044d\u0442\u043e\u043c \u043a\u043e\u0434\u0435, \u0432\u043f\u043e\u043b\u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0447\u0442\u043e \u043e\u043d \u0432 \u0438\u0442\u043e\u0433\u0435 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0447\u0438\u0441\u0442\u0438\u0442\u0441\u044f.\n\u0411\u0443\u0434\u0435\u043c \u0444\u0438\u043a\u0441\u0438\u0442\u044c.\n. Closed as a duplicate of #77\n. Confirmed. Sorry for the late reply.\nI realized that x86_64 static build from our web-site is actually dynamically compiled!\nI do not see any problems with CMake scripts and I think that the problem is related to buildbot configuration.\ntarantool-1.5.1-158-gd7d1e36-linux-x86_64/bin $ ldd tarantool \n        linux-vdso.so.1 (0x00007fff979ff000)   <!-- The binary is not statically compiled\n        libreadline.so.5 => not found\n        libtermcap.so.2 => not found\n        libc.so.6 => /lib64/libc.so.6 (0x00007ff04d1ed000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007ff04d594000)\ntarantool-1.5.1-158-gd7d1e36-linux-i686/bin $ ldd tarantool \n        not a dynamic executable <!-- OK\n. Fixed by esha.\n. Zloidemon got this output with \"-undefined dynamic_lookup\" added to the linker flags.\nAccording to OS X documentation this flag should force the loader to perform dynamic linking in runtime.\nWith the fix plugins are compiled without errors, but still can not be load properly.\n. Rebased on stable && merged\n5fc75199baad0237cec7c03aaaf5290425046dc6\n. > I think you should not throw an exception in build/beginBuild/endBuild but keep panic() in place. These functions are called only during startup and it's appropriate to crash during startup. \n@kostja What is about system spaces in 1.6?\n. We still need \"one click installer\" for OS X on the our web-site.\n. <sys/uio.h> from Solaris:\n```\nif defined(_XPG4_2)\ntypedef struct iovec {\n    void    *iov_base;\n    size_t  iov_len;\n} iovec_t;\nelse\ntypedef struct iovec {\n    caddr_t iov_base; <!-- HERE\nif defined(_LP64)\nsize_t  iov_len;\n\nelse\nlong    iov_len;\n\nendif\n} iovec_t;\nendif  / defined(_XPG4_2) /\n```\ncaddr_t is:\n/usr/include/rpc/types.h:83:typedef __caddr_t caddr_t;\n/usr/include/bits/types.h:82:typedef char *__caddr_t;\nThey use char* for iov_base.\nOK to merge with stable.\n. Need review.\n. dostring(\"=box.cfg\") \u0441\u0434\u0435\u043b\u0430\u0439 \u0431\u043b\u0438\u043d\n. \u0415\u0441\u0442\u044c \u043d\u043e\u0432\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0432\u0435\u0440\u0441\u0438\u044f\u043c OpenVZ \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u0440\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430?\n. Confirmed.\n. Confirmed.\n. @whalebot-helmsman: do you still need i386 build for CentOS 6?\n. HOST_CC and TARGET_CC are used instead of CC. It was changed to fix compilation flags.\nPlease see 82e3dfb787dbe177ed08fdb030c7885ef7336810\n```\nroman@work:~/tarantool/master$ gcc\nbash: gcc: command not found\nroman@work:~/tarantool/master$ cmake  -DCMAKE_C_COMPILER=\"clang\" -DCMAKE_CXX_COMPILER=\"clang++\"\n...\nroman@work:~/tarantool/master$ make VERBOSE=1 libluajit\n...\nCC        lj_vmmath.o\n/usr/bin/clang -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -msse2 -DLUAJIT_UNWIND_EXTERNAL=1  -O1 -I/data/work/tarantool/master/libobjc -Wall -DLUA_USE_APICHECK -DLUA_USE_ASSERT  -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -U_FORTIFY_SOURCE    -c -o lj_vmmath.o lj_vmmath.c\n...\n[100%] Built target libluajit\n```\n. Fixed with d7d1e36f6be8ad0352ac60786f1b436d88440a71\n. I think that -p option is OK.\nThanks for the patch. \n@kostja will review it.\n. wontfix?\n. Hi, @kostja . I developed your idea and posted an example to wiki:\nhttps://github.com/tarantool/tarantool/wiki/New-Configuration\n. Please review\n. Good catch!\nConfirmed.\n. Please review && merge\n. I fixed with problem in MsgPack branch.\n. Fixed in 1.6.\n```\nbox.tuple.new(1, 2, 3, 4, 5)\n\n\n[1, 2, 3, 4, 5]\n...\nbox.tuple.new({1, 2, 3, 4, 5})\n\n\n\n[1, 2, 3, 4, 5]\n...\nbox.tuple.new({'a', 'b'}, {'c', 'd'}, {'e', 'f'})\n\n\n\n[['a', b], ['c', 'd'], ['e', 'f']]\n...\nbox.tuple.new({{'a', 'b'}, {'c', 'd'}, {'e', 'f'}})\n\n\n\n[['a', b], ['c', 'd'], ['e', 'f']]\n...\nbox.tuple.new({1, 2}, 'x', 'y', 'z', {c = 3, d = 4}, {e = 5, f = 6})\n\n\n\n[[1, 2], 'x', 'y', 'z', {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]\n...\nbox.tuple.new({{1, 2}, 'x', 'y', 'z', {c = 3, d = 4}, {e = 5, f = 6}})\n\n\n\n[[1, 2], 'x', 'y', 'z', {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]\n...\n``\n.__gcproblem moved to #107.\n. I think that-lz` should be added for ALL platforms. \n. => proposed solution is to link with libz on ALL platforms (not only FreeBSD) if TRACE flag is enabled.\n@kostja ?\n. I want to fix it in 1.6.\n@kostja ?\n. My proposal is:\nRemove lbox_print - our custom version of print() from 1.6.\n   Lua print() works well and writes messages  to stdout which is redirected to a log file.\nAdd Lua bindings for say_xxx. See #126\n\nThese changes are needed for #124\n. Fixed in 1.6.\n. I implemented prototype.\ntarantool.cfg (#138 is needed to skip this step):\nslab_alloc_arena = 0.1\nprimary_port = 33013\nsecondary_port = 33014\nadmin_port = 33015\nA script:\n```\n!../../src/box/tarantool_box --\nprint(\"HELLO from\", arg[0]);\nfor k,v in ipairs(arg) do\n    print(k, v)\nend\n```\nstdout:\n./test.lua --help dsf dsaf dsaf dsa\nHELLO from      ./test.lua\n1       --help\n2       dsf\n3       dsaf\n4       dsaf\n5       dsa\nOn an error entire log file is dumped to stderr:\nA script with an error:\n```\n!../../src/box/tarantool_box --\nerror(\"boom!\")\n```\nstderr:\n./test.lua\n2013-12-01 13:23:49.490 [15619] 1/sched C> version 1.6.0-529-g43a1be2\n2013-12-01 13:23:49.492 [15619] 1/sched I> recovery start\n2013-12-01 13:23:49.495 [15619] 1/sched I> recover from `./00000000000000000001.snap'\n2013-12-01 13:23:49.496 [15619] 1/sched I> snapshot recovered, confirmed lsn: 1\n2013-12-01 13:23:49.497 [15619] 1/sched I> bound to primary port 33013\n2013-12-01 13:23:49.497 [15619] 1/sched I> I am primary\n2013-12-01 13:23:49.497 [15619] 1/sched I> bound to secondary port 33014\n2013-12-01 13:23:49.497 [15619] 1/sched I> bound to admin port 33015\n2013-12-01 13:23:49.498 [15619] 101/./test.lua F> ./test.lua:3: boom!\n. Implemented.\n. We already have box.fiber.find(id) and  fiber:cancel() functions. The only thing that we should add is to fix find by name (see #178).\n. box.fiber.find(id):cancel() is pretty easy to use.\nI think I can also add something like that:\nbox.fiber[id]:cancel()\n. Needed for @zlobspb\nSolution is to use mp_snprint() function from libmsgpuck.\n. 1.7.4-177-g0a7ca4b2e. OK. I will restore 1.5 semantics for for 'p' and 'w'.\n. I took a look on old box.pack code. IMHO, it is better to implement 1.5 packing using FFI (like msgpackffi.lua).\n. 1. All box.pack() format specifies except 'w' and 'p' are compatible with 1.5\n2. Nobody needs 'w' on 1.6.\n3. Restoring old legacy code is not possible because it should be rewritten to struct tbuf instead of luaL_Buffer.\n4. I don't think that keeping legacy code in Tarantool 1.6 is good idea.\n5.  For box.net.box() we create new ffi encode/decode module.\n. I also think we need a new module named, say, 'pickle' for box.pack(), box.unpack() and other related stuff. \nrequire('pickle').pack()\nrequire('pickle').unpack()\n. I tried to convert box.pack()/box.unpack() to a new pickle module in src/lua/.  It seems that old 'V' and 'R' are also incompatible with 1.5. 'V' and 'R' should be removed because they depend on box and box.cfg{}. I kept these modificators only for transition period from 1.5 format to MsgPack.\n. @pmwkaa  why we cannot fix this simple bug for last three months? I would take not more than one hour to do!\n. tarantar does not work on 1.6\n. @kostja  please review\n. @unera works on it.\n. I discussed with @unera today about box prefix for all our modules.\nWe need to make a decision how modules like fibers, socket, session, etc. will be accessed:\n1. local var = require('modname')\n2. local var = require('box.modname')\n3. global variable modname (_G.modname)\n4. box.modname - no changes\nPlease vote & comment. Thanks!\n. I vote for 1 for all modules that do not depend on database (box) and for 2 for all other.\n2 is same as 1 but adds extra unneeded prefix.\n3 clogs the global namespace\n4 is not Lua-ways and is not flexible (how to use require to load modules from disc?)\n. is it actual for 1.6?\n. => review\n. @pgulutzan I updated specification.\nPlease see https://github.com/tarantool/tarantool/wiki/Lua-Modularization-1.6 # List of Changes.\n. bad_trigger.test.py tests exception in session.on_connect() trigger. If such exception happens Tarantool sends an error message after IPROTO_GREETING:\ntelnet 127.0.0.1 3301\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\nTarantool 1.6.2-137-g6bc40f4                                   \ndIZpQWFs1VMlztISUWQ4e38OrgWr+Bpdavvna6wU7R8=                   \n[some msgpack]master/test/var/./box.lua:12: attempt to call global 'nosuchfunction' (a nil value)Connection closed by foreign host.\nThis is undocumented behaviour of Tarantool.\nClient usually don't except anything else IPROTO_GREETING on connect. \nMoreover, it is very tricky to implement such error check using blocking sockets (e.g. Python driver) because you don't know how many bytes should be read after greeting. I think most connect author will not implement it.\nWe need a design decision here. \n. I wonder how users should write connectors with such protocol?\n. Already fixed.\n. Is it actual?\n. Actual on FreeBSD  i386\n. any news? I changed. milestone to 1.6.4\n. Test case:\n```\n!./src/tarantool\nlocal fiber = require('fiber')\nbox.cfg{}\nfor i=1,2 do\n    fiber.create(function()\n        local space = box.schema.create_space(string.format('space_%d',\n            math.random(1, 100000)))\n        space:create_index('pk', { type = 'tree' })\n        space:drop()\n    end)\nend\n```\n. Well, I can review 158-box.ipc.close branch.\nFrom https://github.com/tarantool/tarantool/commit/68cee8442f7f15fc68a7e1aa6d51d502ca6c3607:\n\nAll following operation on closed channel will do nothing.\n\nI think that we should throw exception (abort Lua script) on put/get if channel was closed.\n@pgulutzan, how do you think?\n. Implemented.\n. box.fiber.find(107) returned nil because fiber with id=107 doesn't exist.\nThis is correct behaviour.\n```\nlocalhost> box.fiber.find(123213) <!-- some invalid id\n\n\nnull\n...\n```\n\nYou can rewrite your code as:\nlocal f = box.fiber.find(107)\nif f than f:cancel() end\n. I pushed the fix.\n. OK, I'll rebase it on 1.5.x and merge.\n. This ticket is not actual for 1.6, only for 1.5.x\n. seems to be my bug reported posted on launchpad\n. I fixed this bug long time ago by adding a hack to schema.cc (see  fix_lua(struct space *space, void * /* param */)). Since it is not so critical, I decide to remove this ticket from 1.6 beta list.\n. a) \u0425\u043e\u0440\u043e\u0448\u0430\u044f \u0438\u0434\u0435\u044f, \u0432\u043f\u043e\u043b\u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c\u0430\u044f. \u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0435\u043c\u0441\u044f  \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0440\u0435\u043b\u0438\u0437\u0430\u0445 1.5.x.\n\u0431) \u0411\u044b\u043b \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f \u0434\u043b\u044f 1.6.x (\u0441 \u0431\u0430\u0433\u0430\u043c\u0438). \u0414\u0443\u043c\u0430\u044e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043e\u0442\u043f\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f 1.5.x.\n\u0415\u0441\u043b\u0438 \u0441 \u0431) \u0432\u0441\u0451 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u043e, \u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e WAL \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 snapshot.\n. rolling feature => 1.7.3\n. Hi!\nWhich distribution do you use? RPM, deb, source build?\n. Please install tarantool-debug package for you distro and symbols will appear.\nPlease re-open this ticket if you still have this problem.\n. I installed Tarantool from our repo using yum install and it works properly.\nIt seems that topicstarter has disappeared and I can close this ticket.\n. Ohh, I had same problem with my fiber-cord patch.\nConfirmed.\nI asked @kostja to fix this problem, but he instead reimplemented my patch to eliminate operations with buggy slab cache :) \n. Currently we do not have a map of fibers by name and I'm not sure that we need it just for this feature.\nIs it ok to implement it in stupid inefficient way?\n. I discussed with @kostja and we decided that \"find fiber by string name\" is hard to implement because it obviously need additional (const char * => struct fiber *)  hash table to maintain in runtime. It in turn will lead to performance degradation for other use cases.\nWe can return to this ticket again if we have requests from our customers.\nClosing this ticket for now.\n. Use os.exit() to stop server during tests.\nSecond feature (wait until replica is synced) is hard to implement and is not related to test system at all.\n. Nice feature that can be easily implemented in 1.5.\nSince it is just improvement in logging messaging, we will schedule this fix to future minor releases of 1.5.x series.\n. It is my fault...\n. @kostja: you said that you already fixed this problem, but I cannot find commit git log\n. Already fixed in master:\nhttps://github.com/tarantool/tarantool/blob/08cce8387497536a9a49b6b6d2cc77a4e3d8fd4a/test/box/insert.test.lua\n. Can't reproduce. Both 1.5 and 1.6 work fine when built from sources.\nThis problem seems to be build-specific.\nCould you please provide more details about your distribution and build number?\n. release_disabled doesn't work at all!\nAffected tests:\n- box/errinj.test\n- big/tree_alloc_fail.test\nWays to reproduce (check travis):\nmkdir ./build && cd ./build && cmake .. -DCMAKE_BUILD_TYPE=RelWithDebugInfo\nmake -j8\nmake test\n. @esha- please take a look\n. It seems that the bug was fixed by @bigbes92 \n```\n1.5.3-100-g3838ab1\nTEST                                             RESULT\nbig/tree_alloc_fail.test                        [ disabled ]\n======================================================================\nTEST                                             RESULT\n\nbox/errinj.test                                 [ disabled ]\n```\n. Does not work on 1.6 due to changes in print()\n. We use sha1 only in tarantar.\nI think we can add it to tarantool_box and implement bindings using FFI.\n. Superseded by #203 \n. Done.\n. confirmed. \n. => review\n. just type box.space.name in admin console:\n```\nlocalhost> box.space[0]\n\n\nindex:\n    0: &0\n      unique: true\n      idx: ' index 0'\n      n: 0\n      type: HASH\n      key_field:\n        0:\n          type: NUM\n          fieldno: 0\n      name: primary\n      id: 0\n    primary: *0\n  temporary: false\n  n: 0\n  on_replace: 'function: 0x41a5de68'\n  enabled: true\n  name: tweedledum\n  arity: 0\n...\n```\n. index:bsize()  (previously known as index:memsize()) is good enough for now.\nPlease close the ticket after adding this method to the documentation.\n. What is box.space.G?\nCurrent API doesn't support changing space arity on the fly.\nThis feature is implemented on backend, but API doesn't provide bindings for it.\nspace.arity = XXX only updates a value in Lua table. \n\n```\nlocalhost> s = box.schema.create_space('main', { arity = 2 } )\n\n...\nlocalhost> s:create_index('primary', {parts = {0, 'STR'}})\n\n...\nlocalhost> s:insert{'G'}  \n\n\nerror: Tuple field count 1 does not match space 514 arity 2\n...\n```\n\nI think this ticket can be renamed to something like \"Implement space:alter() API\"\n. confirmed.\nMost space functions like space:select, space:insert, space:delete etc. also have the same problem.\n. I don't want to start a holy war, but IMHO dot notation in box.space was totally misused.\nFrom Lua 5.2 manual *\n\nTo represent records, Lua uses the field name as an index. The language supports this representation by providing a.name as syntactic sugar for a[\"name\"].\n\nIn other words, Lua Team designed dot syntax to access properties of complex structures/records.\nLet's take a look on two example:\nperson = { fullname = \"Alexander\", age = 35  };\nprint(person.fullname)\nperson is a complex data structure\nfullname is a property of person record\npersons_by_name = {}\npersons_by_name['Alexander'] = person\npersons_by_name.Alexander -- uncommon usage\npersons_by_name is a map of elements\nAlexander is a member of persons_by_name map.\nI think that box.space['users'].index['primary'] is more readable than\nbox.space.users.index.primary.  Please also note that you can't use reserved\nkeywords in dot notation!\nI suggest:\n1. Do not forbid dots in space names\n2. Use array subscription syntax to access box.space and box.space['name'].index members in our test and manuals.\n3. Save box.space['name'] to a local variable when a space is accessed multiple times (for performance reasons).\nLet's discuss this topic.\n. I checked Lua grammar.  Their grammar for identifiers is\n< NAME: [\"a\"-\"z\", \"A\"-\"Z\", \"_\"] ([\"a\"-\"z\", \"A\"-\"Z\", \"_\", \"0\"-\"9\"])* >\nI will add similar checks for space, index and user names.\n. IPROTO CALL currently supports object notation (: syntax) and we may add support for [] syntax as well. I think that _func table should support same conventions as IPROTO CALL. In other words, function name in _func table is not an identifier, it is an expression.\n. => review\n. ok, let me solve this problem with locale.\n. May be required_arity or something like that? We also use arity name the number of fields in the tuple. required_field_count is to many words IMHO\n. why don't just use this url as a repository (yum install ...)?\n. any progress?\n. cpuid.h is a standard header file which is shipped with gcc/clang (like <*mmintrin.h>). \nI don't think that we need this file in third_party/.\n. => 1.5.x\n. => work in progress\n. => review\n. @kostja Can I merge gh-206-fix-iproto? I remember we reviewed it and scheduled to merge after authorization.\n. what is wrong with gh-206-fix-iproto branch?\n. which version of compiler do you use?\n. @esha- will  fix it.\n. on stable\n/data/work/tarantool/stable/test/unit/avl_tree.c:15:1: error: unused function 'sptree_test_first' [-Werror,-Wunused-function]\nSPTREE_DEF(test, realloc);\n^\n/data/work/tarantool/stable/third_party/sptree.h:218:91: note: expanded from macro 'SPTREE_DEF'\nstatic inline void*                                                                       \\\n                                                                                          ^\n<scratch space>:132:1: note: expanded from here\nsptree_test_first\n^\n/data/work/tarantool/stable/test/unit/avl_tree.c:15:1: error: unused function 'sptree_test_last' [-Werror,-Wunused-function]\n/data/work/tarantool/stable/third_party/sptree.h:231:91: note: expanded from macro 'SPTREE_DEF'\nstatic inline void*                                                                       \\\n                                                                                          ^\n<scratch space>:135:1: note: expanded from here\nsptree_test_last\n^\n/data/work/tarantool/stable/test/unit/avl_tree.c:15:1: error: unused function 'sptree_test_random' [-Werror,-Wunused-function]\n/data/work/tarantool/stable/third_party/sptree.h:244:91: note: expanded from macro 'SPTREE_DEF'\nstatic inline void*                                                                       \\\n                                                                                          ^\n<scratch space>:138:1: note: expanded from here\nsptree_test_random\n^\n. clang -v\nDebian clang version 3.5-1 (trunk) (based on LLVM 3.5)\nTarget: x86_64-pc-linux-gnu\nThread model: posix\n. All clang warnings (at least for Linux) were fixed by fb2fc285c01cf97b99a419e7a56a0cff48eb94d0 \nPlease re-open if you still have problems.\n. ```\nunit/fiob.test                                  #   Failed test 'common open'\nin /data/work/tarantool/stable/test/unit/fiob.c at line 88\n[ fail ]\nTest failed! Result content mismatch:\n--- unit/fiob.result    Wed Mar 12 20:54:43 2014\n+++ /data/work/tarantool/stable/test/unit/fiob  Thu Sep  4 12:37:21 2014\n@@ -1,48 +0,0 @@\n-1..47\n-ok 1 - tempdir is created\n-ok 2 - common open\n-ok 3 - Hello world is written (12 bytes)\n-ok 4 - current position\n-ok 5 - set new position\n.\n1..47\nok 1 - tempdir is created\nok 2 - common open\nok 3 - Hello world is written (12 bytes)\nok 4 - current position\nok 5 - set new position\nok 6 - current position 0\nnot ok 7 - Hello world is read (0 bytes)\nFailed test 'Hello world is read (0 bytes)'\nin tarantool/master/test/unit/fiob.c at line 102\nnot ok 8 - data\nFailed test 'data'\nin tarantool/master/test/unit/fiob.c at line 103\nok 9 - set new position\nnot ok 10 - Hello world is read (0 bytes)\nFailed test 'Hello world is read (0 bytes)'\nin tarantool/master/test/unit/fiob.c at line 107\nnot ok 11 - data\nFailed test 'data'\nin tarantool/master/test/unit/fiob.c at line 108\nok 12 - set new position\nok 13 - set new position\nnot ok 14 - data is read\nFailed test 'data is read'\nin tarantool/master/test/unit/fiob.c at line 116\nnot ok 15 - data is read\nFailed test 'data is read'\nin tarantool/master/test/unit/fiob.c at line 117\nok 16 - fclose\nok 17 - reopened file\n. I unmounted tmpfs from /tmp and switched to root ext4 (rw,noatime,discard,errors=remount-ro,data=ordered). The problem still happens.\n.\n./unit/fiob.test \n1..47\nok 1 - tempdir is created\nok 2 - common open\nok 3 - Hello world is written (12 bytes)\nok 4 - current position\nok 5 - set new position\nok 6 - current position 0\nnot ok 7 - Hello world is read (0 bytes)\nFailed test 'Hello world is read (0 bytes)'\nin tarantool/master/test/unit/fiob.c at line 102\nnot ok 8 - data\nFailed test 'data'\nin tarantool/master/test/unit/fiob.c at line 103\nok 9 - set new position\nnot ok 10 - Hello world is read (0 bytes)\nFailed test 'Hello world is read (0 bytes)'\nin trantool/master/test/unit/fiob.c at line 107\nnot ok 11 - data\nFailed test 'data'\nin tarantool/master/test/unit/fiob.c at line 108\nok 12 - set new position\nok 13 - set new position\nnot ok 14 - data is read\nFailed test 'data is read'\nin tarantool/master/test/unit/fiob.c at line 116\nnot ok 15 - data is read\nFailed test 'data is read'\nin tarantool/master/test/unit/fiob.c at line 117\nok 16 - fclose\nok 17 - reopened file\nok 18 - move pos at finish\n``\n. For workaround I can add tonumber() forspacearguments tobox.net.box.\nIdeally, we should implement schema support inbox.net.box` (or add support for string space names). Please discuss with @unera about this.\n. Sorry for my late reply.\nThere are no more -dbg packages for Debian. Since debug symbols are required for normal server work (show fiber and other commands use it), we decided to stop stripping tarantool_box binary in the main package.\nPlease discuss with our Debian maintainer (@unera) if you need detail information.\n. We changed \\r\\n to \\n in admin protocol, but client should support both. Probably it's a bug.\n. @bigbes92 \n. is it actual? \n. @alyapunov is investigating this problem.\n. You can try #! feature in 1.6.\n. @esha- \n. Isn't actual.\n. Duplicate of #126 \n. Implemented, but we need tests.\n. See also #230 \n. Please also convert replication_source configuration option.\n. Example: https://github.com/tarantool/tarantool/wiki/New-Configuration\n. Updated spec after modularization: https://github.com/tarantool/tarantool/wiki/New-Configuration\n. I think that for 1.6 beta we can at least add sections as it was describe in the spec above.\n. => review\n. This idea is controversial. box.error() is a part of box. I can't raise box.error() in src/lua/ modules.\n. See also #225 \n. Duplicate of #235 \n. Replace 'primary' with what? May be remove this title at all?\n. I suggest:\ntitle(\"running\", NULL);\n    say_info(\"ready to accept requests\");\n- replica (follow) fibers will no more change proc title (because there can be multiple replica fibers).\n. Under discussion (see my email from 2014-10-01)\n. box.cfg { read_only = true | false; }\n. Superseded by #388\n. Fixed by 3838ab1066c3cfd6c8f32d05cb183079bf646081\n. ```\nbox/session.test.lua                            [ pass ]\nbox/sophia.test.lua                             [ fail ]\nTest failed! Result content mismatch:\n--- box/sophia.result   Tue Apr 22 13:01:12 2014\n+++ box/sophia.reject   Tue Apr 22 17:25:17 2014\n@@ -6,6 +6,7 @@\n ...\n for v=1, 10 do space:insert({v}) end\n ---\n+- error: Duplicate key exists in unique index 0\n ...\n t = space.index[0]:select({}, {iterator = box.index.ALL})\n ---\nLast 15 lines of Tarantool Log file:\nFatal error: Failed to run test box/sophia.test.lua: wrong test output. Execution aborted.\n```\n. please post detailed bug report.\n. I remember that problem was with fiob.cc.\nPlease post error report here!\n. Duplicate of #252 \n. @pgulutzan I'll change this message.\n. => review\n. makes sens, I think. It should work both with numbers and booleans if you use lua_checkinteger in Lua/C API,\n. Implemented in #29 \n. Same problem with box.session.user():\n```\n0  0x0000000000420dbb in mh_i32ptr_find () at /data/work/tarantool/gh-295-interactive-session/src/lib/salad/mhash.h:186\n1  0x000000000042184a in user_cache_find(unsigned int) () at /data/work/tarantool/gh-295-interactive-session/src/box/access.cc:123\n2  0x000000000047dbf0 in lbox_session_user(lua_State*) () at /data/work/tarantool/gh-295-interactive-session/src/lua/session.cc:76\n3  0x00000000004f315c in lj_BC_FUNCC ()\n4  0x00000000004ddc0a in lua_call ()\n``\n. box.info should be splitted to appserver and database parts\n. I have great idea how to fix it:\n1. remove _G.box - do not allow user to use box functions without configuration \n2. add support forrequire('box').\n  a)box = require \"box\" { options }loads box module, calls box.cfg{ options }, starts database and returns API object to user\n  b) box = require \"box\" - loads box module and start database with default configuration\n3. Now box.cfg{} can only be used for REconfiguration, because you need to callrequire('box')` first (=configure).\n. > I don't see how you can make require('box') without arguments work as well as require('box'){options}\nreturn  a table with __call method or use package.preloaded instead of package.loaded.\n. I think that overriding require is bad idea. require \"mod\" (params) is good enough.\nhttp://lua-users.org/lists/lua-l/2011-11/msg00177.html\n. You can put function to package.preloaded which will be called on require\n. => review\n. ```\ntarantool> require('box.info')()\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000456528 in lbox_info_recovery_lag (L=0x40000378) at /data/work/tarantool/master2/src/box/lua/info.cc:48\n48              lua_pushnumber(L, recovery->remote.recovery_lag);\n(gdb) bt\n0  0x0000000000456528 in lbox_info_recovery_lag (L=0x40000378) at /data/work/tarantool/master2/src/box/lua/info.cc:48\n1  0x0000000000456b86 in lbox_info_call (L=0x40000378) at /data/work/tarantool/master2/src/box/lua/info.cc:227\n2  0x00000000004ebeec in lj_BC_FUNCC ()\n3  0x00000000004d678f in lua_call ()\n4  0x000000000047b34d in lbox_call (L=0x40000378, nargs=0, nreturns=0) at /data/work/tarantool/master2/src/lua/utils.h:443\n5  0x000000000047c4a2 in run_script(typedef __va_list_tag __va_list_tag *) (ap=0x7ffff58001d0) at /data/work/tarantool/master2/src/lua/init.cc:421\n6  0x000000000048c0e4 in fiber_loop (data=0x0) at /data/work/tarantool/master2/src/fiber.cc:388\n7  0x000000000055ed2d in coro_init () at /data/work/tarantool/master2/third_party/coro/coro.c:96\n```\n. pcall() was improperly overridden in lua/init.cc to support Tarantool exception. I also noticed that vanilla luajit compiles (JITs) pcall(), but Tarantool doesn't.\nI re-implemented pcall() wrapper using Lua + FFI.\n=> review\n. blocked by #232 (uri for replication_source).\n. See also #343\n=> review\n. => review\n. => merged\n. Discussed with @kostja: server don't have to handle incorrect packets and must close connection.\n. any progress?\n. I need this bug to be fixed.\nPlease don't close.\n. I know how to fix it, but I need iterator parameter in tarantool-python to write tests.\n=> blocked by https://github.com/mailru/tarantool-python/issues/29\n. Hi,\nCurrently we have at least three benchmarks:\nnosqlbench - to benchmark performance via network protocol\ntarantool-c-bench - to benchmark internal C API\nLua Bench - to benchmark Lua procedures\nThe main problem of all these benchmark is that they are too synthetic and do not reflect the real performance.  Therefore, there is no sense to include it to Tarantool. We plan to make a new unified benchmark based on real workloads to reflect customers use-cases.\n. Please document behavior that I note in my commit message. \n. => review\n. Any progress?\nTwo weeks have passed.\n. Confirmed.\nLua object box.space[xxx].index[0]  contains reference to deleted space.\nProbably we should use space_id instead of pointer to space (no performance regression here).\n. Any progress?\n. Any progress?\n. Confirmed.\n. this is 1.5.4 problem!\nI can't run tests on my development laptop.\n. Duplicate of #206\n. - return 1 => [ [1]]\n- return 1, 2, 3 => [[1], [2], [3] ]\n- return true | false | nil => [[ true | false | nil ]]\n- return {} => ?\n- return {1} => [[1]] vs [[[1]]] ?\n- return {1, 2, 3} => [[1], [2], [3] ]  vs [ [1, 2, 3]] ?\n- return tuple => [tuple]\n- return tuple, tuple, tuple => [ tuple, tuple, tuple ]\n- return {tuple, tuple, tuple} => [ tuple, tuple, tuple ]\n. - idea: return arbitrary msgpack object instead of array of tuples in call.\n. Any progress? Why do not allow users to return arbitrary MsgPack objects from CALL?\n. 1. if select('#', ...) == 1 and type(select(1, ...)) == 'table'\n   for e in pairs(select(1)) do if is_tuple(e) pack_tuple(e) else pack_tuple({e})  end\n2. else\n   for e in ... do  if is_tuple(e) pack_tuple(e) else pack_tuple({e}) \n. Final decision is made by @kostja.\nCALL should return arbitrary MsgPack objects. Multireturn values (select('#', ...) > 1) should be encoded into MsgPack array.\nExample tests cases:\n- return 1 => 1\n- return 1, 2, 3 => [1, 2, 3]\n- return true | false | nil => true | false | nil\n- return nil => nil\n- return {} => [] - MsgPack array\n- return {1} => 1\n- return {1, 2, 3} => [1, 2, 3]\n- return {1, 2, 3}, {'a', 'b', 'c'}, {true, false} => [[1, 2, 3], ['a', 'b', 'c'], [true, false]]\n- return {key1 = 'value1', key2 = 'value2'} => {'key1': 'value1', 'key2': 'value2'} - MsgPack map\n- return tuple => tuple\n- return tuple, tuple, tuple => [ tuple, tuple, tuple]\n- return {tuple, tuple, tuple} => [ tuple, tuple, tuple ]\nmap vs array should be detected in the same way as it done in the current implementation of Lua MsgPack binding.\n. Requires new struct port API.\nUnder discussion.\n. Please review tbuf->obuf refactoring.\n. Tarantool 1.7.x will use EVAL-style output for CALL (#1296)\nHowever, this problem is still actual for users.\n. One more use-case from #1167:\nfunction f() local res = {} res[1] = 1 res[20] = 1 return res end\n. > The problem was in iterator. In previous versions of tarantool one could send a string as an iterator ('box.iterator.ALL', i.e.). But now it fails on this kind of request because it waits for UINT instead of string.\nIt was ignored by parser (see #273).\n. Server doesn't reply on malformed requests, see #272. \n. See https://github.com/tarantool/tarantool-c/issues/4 \n. I can't reproduce this bug.\n``\nroman@work:/data/work/tarantool/dirscan-fix/src$ ls -l *.snap\n-rw-r--r-- 1 roman roman 1351 May 19 14:59 bootstrap.snap\nroman@work:/data/work/tarantool/dirscan-fix/src$ \nroman@work:/data/work/tarantool/dirscan-fix/src$ ./tarantool \n./tarantool: version 1.6.2-79-g82e7b59\ntarantool> box.cfg{primary_port=3301}\n2014-05-19 15:15:58.659 [2125] main/101/interactive C> version 1.6.2-79-g82e7b59\n2014-05-19 15:15:58.659 [2125] main/101/interactive C> log level 5\n2014-05-19 15:15:58.659 [2125] main/101/interactive I> mapping 1073741824 bytes for a shared arena...\n2014-05-19 15:15:58.660 [2165] main/101/spawner C> initialized\n2014-05-19 15:15:58.660 [2125] main/101/interactive log_io.cc:300 W> can't parsebootstrap.snap', skipping\n2014-05-19 15:15:58.660 [2125] main/101/interactive I> initializing cluster\n2014-05-19 15:15:58.664 [2125] main/101/interactive I> synchronized with cluster\n2014-05-19 15:15:58.664 [2125] main/101/interactive I> done\n2014-05-19 15:15:58.665 [2125] main/101/interactive I> creating ./00000000000000000027.snap.inprogress'\n2014-05-19 15:15:58.665 [2125] main/101/interactive I> saving snapshot./00000000000000000027.snap.inprogress'\n2014-05-19 15:15:58.665 [2125] main/101/interactive C> 0.0M rows written\n2014-05-19 15:15:58.696 [2125] main/101/interactive I> done\n2014-05-19 15:15:58.696 [2125] main/101/interactive I> bound to primary port 3301\n2014-05-19 15:15:58.696 [2125] main/101/interactive I> I am primary\n\n...\n```\nMessage \" a snapshot file exists but can not be opened\" doesn't exist in sources.\n. => review\n. this header wasn't tested under C++.\n. Traceback (most recent call last):\n  File \"./test.py\", line 5, in <module>\n    server.select(256)\n  File \"/data/work/tarantool/master/test/lib/tarantool-python/tarantool/connection.py\", line 417, in select\n    response = self._send_request(request)\n  File \"/data/work/tarantool/master/test/lib/tarantool-python/tarantool/connection.py\", line 225, in _send_request\n    request)\n  File \"/data/work/tarantool/master/test/lib/tarantool-python/tarantool/connection.py\", line 169, in _send_request_wo_reconnect\n    response = Response(self, self._read_response())\n  File \"/data/work/tarantool/master/test/lib/tarantool-python/tarantool/response.py\", line 60, in __init__\n    raise DatabaseError(self._return_code, self._return_message)\ntarantool.error.DatabaseError: (36, 'Space 256 does not exist')\nTested with patched Python driver:\n-        space_name = self.schema.get_space(space_name).sid\n-        index_name = self.schema.get_index(space_name, index_name).iid\n+        #space_name = self.schema.get_space(space_name).sid\n+        #index_name = self.schema.get_index(space_name, index_name).iid\n. I can't reproduce it. Seems to be fixed.\n```\nIn 1: import tarantool\nIn [2]: a = tarantool.Connection('localhost', 3301)\nIn [3]: a.select(256, [])\n('space_name', 256)\n('index_name', 0)\n\nDatabaseError                             Traceback (most recent call last)\n in ()\n----> 1 a.select(256, [])\n/data/work/tarantool/master/test/lib/tarantool-python/tarantool/connection.pyc in select(self, space_name, key, **kwargs)\n    415         request = RequestSelect(\n    416             self, space_name, index_name, key, offset, limit)\n--> 417         response = self._send_request(request)\n    418         return response\n    419 \n/data/work/tarantool/master/test/lib/tarantool-python/tarantool/connection.pyc in _send_request(self, request)\n    223         self._opt_reconnect()\n    224         response = self._send_request_wo_reconnect(\n--> 225             request)\n    226 \n    227         return response\n/data/work/tarantool/master/test/lib/tarantool-python/tarantool/connection.pyc in _send_request_wo_reconnect(self, request)\n    167         for attempt in xrange(RETRY_MAX_ATTEMPTS):    # pylint: disable=W0612\n    168             self._socket.sendall(bytes(request))\n--> 169             response = Response(self, self._read_response())\n    170 \n    171             if response.completion_status != 1:\n/data/work/tarantool/master/test/lib/tarantool-python/tarantool/response.pyc in init(self, conn, response)\n     58         if self._return_code != 0:\n     59             if self._completion_status == 2 and self.conn.error:\n---> 60                 raise DatabaseError(self._return_code, self._return_message)\n     61         else:\n     62             self.extend(body[IPROTO_DATA])\nDatabaseError: (36, 'Space 256 does not exist')\n```\nServer is OK.\n. duplicate of #267\n. # Proposed Changes\nbox.fiber\nChanges:\nbox.fiber.id(obj) => box.fiber.id() (for current fiber) + obj:id()\nbox.fiber.name(obj) => box.fiber.name() (for current fiber) + obj:name()\nbox.fiber.status(obj) => box.fiber.status() (for current fiber) + obj:status()\nbox.fiber.resume(obj) => obj:resume()\nbox.fiber.find() => box.fiber[id]\nbox.fiber.cancel(obj) => box.fiber.cancel(id) + obj:cancel() (or box.fiber.kill(id) ?)\nNot changed:\nbox.fiber.create()\nbox.fiber.yield()\nbox.fiber.sleep()\nbox.fiber.info()\nbox.fiber.wrap()\nbox.fiber.create()\nbox.fiber.testcancel()\nbox.fiber.self()\nbox.session\nNew functions:\nbox.session[id] - finds session by id\nbox.session.self() - returns current session object\nChanges:\nbox.session.id() => obj:id()\nbox.session.fd() => obj:fd()\nbox.session.uid() => obj:uid() (or may be box.session.user():id() ?)\nbox.session.user() => returns current user\nbox.session.peer(id) => obj:peer()\nbox.session.exists(id) => remove\nNot changed:\nbox.session.su()\nbox.session.on_connect()\nbox.session.on_disconnect()\nbox.session.storage()\n. @kostja please comment and approve this spec\n. fiber.self():name('new name'), fiber.self():name() - current name\n. I updated spec for fibers.\nI added box.fiber.name(), box.fiber.id(), box.fiber.status() which return result for current (self) fiber.\n. I do not see functional syntax in box.tuple and box.socket. Anyway, I'll check again.\n. It is not clear for me how to define tt_uuid structure in ffi.\n. @pgulutzan: please update documentation.\nuuid = require 'uuid' -- load uuid module\nuu = uuid.new() -- create new UUID object\nuu = uuid() -- create new UUID object (an alias)\nuu = uuid.fromstring(str) -- parse UUID from RFC4122 format, returns nil on error\nuu = uuid.frombin(bin [, byteorder]) -- decode UUID from binary\nuu1 == uu2 -- compares two uuids for equality\nuu:str() -- format UUID to RFC4122 string\ntostring(uu) -- same as uu:str()\nuu:bin(byteorder) -- encode UUID to binary\nuu:isnil() -- true if UUID is nil (00000000-0000-0000-0000-000000000000)\nuuid.NULL -- null UUID object\nuuid.str() -- alias for uuid():str()\nuuid.bin([byteorder]) -- alias for uuid():bin([byteorder])\nbyteorder is 'l' - little, 'b' - big, 'h' - host (default), 'n' - network \nUUID library always generates RFC4122-compatible UUID version 1 (time + hw address) or version 4 (random), depending on platform. Please note in the documentation that generator makes at least one syscall. In other words, this operation is not so fast.\n. fresh idea: box.error(box.error()) - rethrow\n. => review\n. It also should be converted to a module (e.g. require('error')).\n. fixed after review.\n. Tarantool already have - see _G.yaml (and require('yaml') after modularization patch)\n. @pgulutzan could you please also mention in the documentation  yaml.NULL, json.NULL and msgpack.NULL constants. These constants can be used instead of nil in tables when passing as argument to {yaml|msgpack|json}.encode() . Lua doesn't store nil values in tables and therefore it is not possible encode NULL values properly.\nExample:\n```\ntarantool> print(yaml.encode({1, 2, nil, 4, 5}))\n\n1: 1\n2: 2\n4: 4\n5: 5\n...\ntarantool> print(yaml.encode({1, 2, yaml.NULL, 4, 5}))\n\n\n1\n2\nnull\n4\n5\n...\n\n. Please also note that this test is too slow (take 30sec on my host).\n.\nbox/bsdsocket.test.lua                          [ fail ]\nTest failed! Result content mismatch:\n--- box/bsdsocket.result        Mon Jul 14 12:53:00 2014\n+++ box/bsdsocket.reject        Mon Jul 14 15:14:09 2014\n@@ -796,7 +796,7 @@\n ...\n string.match(header, \"200 [Oo][Kk]\") ~= nil\n ---\n-- true\n+- false\n ...\n s:close()\n ---\n```\n. Fixed. Please don't write tests that tries to connect to some external server.\n. Let's look on this ticket after merging transaction branch. May be this place will gone.\n. Any comments or suggestions?\n. I updated ticket title\n. We discussed and decided:\n1. Re-schedule this ticker for 1.6.4 (test blocked by https://github.com/tarantool/rocks/issues/2)\n2. Move modules from server sources into rocks\n. Ticket renamed\n. I need stable coeio_custom() API to do that.\n. Fixed by 732c467efd5edfce70480ae3ae4d17cd180dc90b\n. review minor problems:\n- base64  #367\n- uri #368\n- Remove functions from box namespace:\n+box.ping = function() return true end\n+box.close = function() return true end - \u043e\u0448\u0438\u0431\u043a\u0443 \u043a\u0438\u0434\u0430\u0442\u044c, \u043d\u0435\u043b\u044c\u0437\u044f \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0431\u043e\u043a\u0441\n+box.call = function(_box, proc_name, ...)\n+box.wait_connected = function() return true end\n- +       /* 78 */_(ER_TIMEOUT,                   2, \"Timeout exceeded\"), may be ER_CONNECTION_TIMEOUT.\n. See also #285 \nHow it should be fixed?\n. OK, I plan to add a check inside session bindings.\n. Slow down what?  One if() will slow down session.su()? Who is need performance here?\n. I need another place to store delimiter. It should have some lifetime as fiber or session. May be we should implement fiber local storage first.\n. It seems that we finally found a good solution for this issue.\n1. Admin handler will be moved to console module and re-implemented using Lua, see #388 \n2. Delimiter will be moved to console.delimiter() and stored in fiber local storage, see #387.\n3. Session module will be a part of box (box.session).\n. I implemented \"Use string uuids in replication handshake\" yesterday, but forgot to push it.\n. gh-333-replication-string-uuid branch\n. I executed this instruction and got on third run:\n/data/work/tarantool/master/src/tarantool: version 1.6.2-258-ged402bb\ntarantool> box.cfg{}\n2014-06-11 15:51:05.567 [13897] main/101/interactive C> version 1.6.2-258-ged402bb\n2014-06-11 15:51:05.567 [13897] main/101/interactive C> log level 5\n2014-06-11 15:51:05.568 [13897] main/101/interactive I> mapping 1073741824 bytes for a shared arena...\n2014-06-11 15:51:05.568 [14012] main/101/spawner C> initialized\n2014-06-11 15:51:05.568 [13897] main/101/interactive I> recovery start\n2014-06-11 15:51:05.568 [13897] main/101/interactive I> recover from `./00000000000000000001.snap'\n2014-06-11 15:51:05.571 [13897] main/101/interactive I> synchronized with cluster\n2014-06-11 15:51:05.571 [13897] main/101/interactive I> recover from `./00000000000000000001.xlog'\n2014-06-11 15:51:05.571 [13897] main/101/interactive I> done `./00000000000000000001.xlog'\n2014-06-11 15:51:05.572 [13897] main/101/interactive I> recover from `./00000000000000000004.xlog'\n2014-06-11 15:51:05.572 [13897] main/101/interactive I> done `./00000000000000000004.xlog'\n2014-06-11 15:51:05.572 [13897] main/101/interactive I> I am primary\nWhen you press CTRL+C (SIGTERM) Tarantool needs some time to properly close active xlogs.\nI think in your case server was killed before it finished with xlog file (may be CTRL+C was trigger twice).\n. I have no idea what to do this ticket.\n@kostja  please comment.\n. ok, I got it.\nThis problem is only re-produced in interactive mode.\n. => review\n. We changed format of UPDATE command. Try to use :update(key, { {'op', args}, {'op',args}, ...}).\nhttps://github.com/tarantool/tarantool/blob/master/test/box/update.test.lua#L31\n. -  Extra 'p' modifier is not needed anymore:\n```\ntarantool> box.space.space0:insert({999, 1, 2, 3})\n\n\n[999, 1, 2, 3]\n...\ntarantool> box.space.space0:update({999}, {{'+', 2, 1}})\n\n\n\n[999, 1, 3, 3]\n...\n```\nbox.pack is not needed:\n\n```\ntarantool> box.space.space0:replace({999, 'splice <> test'})\n\n\n[999, 'splice <> test']\n...\ntarantool> box.space.space0:update({999}, {{':', 1, 8, 0, 'XXX'}})\n\n\n\n[999, 'splice  test']\n...\n```\n\n```\ntarantool> box.space.space0:replace({999, 'one', 'three'})\n\n\n[999, 'one', 'three']\n...\ntarantool> box.space.space0:update({999}, {{'!', 2, 'two'} })\n\n\n\n[999, 'one', 'two', 'three']\n...\n```\n. BTW, it is also possible to add tables and other types to tuple:\n\n```\ntarantool> box.space.space0:replace({999, 1, 2, 3})\n\n\n[999, 1, 2, 3]\n...\ntarantool> box.space.space0:update({999}, {{'!', -1, {1, 2, 3, { 'some', 'objects'} }} })\n\n\n\n[999, 1, 2, 3, [1, 2, 3, ['some', 'objects']]]\n...\n```\n\nPlease also note that :update({999}, ...) and :update(999, ...) are interchangeable for non-table keys. space:select() and other methods also supports key == nil (handled as {}).\n. | (OR) was broken, I fixed it.\n- is subtraction.\n# is deletion and it requires the second argument:  {'#', start field, number of fields to remove}.\n{'#', 1, 0} do nothing (zero fields to remove).\nPlease check out https://github.com/tarantool/tarantool/blob/master/test/box/update.result for examples.\n. Unfortunately, it is impossible in Lua to override table[key] = val operation for existing keys..\n. May I close this ticket?\n. I think that :call expects string as the first argument.\n. I think we have a lot of places in Lua API there argument types are not checked properly.\nI agree that in this case a proper error message is better than 'assertion failed'.\n. Multiline quoted string literals (\"string\" and 'string') are not supported by Lua. For multiline literals you can use [[string]] syntax.  Try to put your command to a file and run with Tarantool:\ndostring('return\n ...',\n1, 2, 3)\n./src/tarantool test.lua\n./a.lua: line 2: syntax error near unexpected token `$'\\'return\\n ...\\',''\n./a.lua: line 2: ` ...','\n\nIn Tarantool 1.5 it was possible to use SETOPT DELIMITER so that multi-line requests were possible even inside dostring(). In Tarantool 1.6 I cannot find an equivalent syntax that works.\n\nTarantool 1.5 doesn't support real multiline expressions in admin port. Admin console just removes all \\n (even from string literals inside) and sends command as a single-line request. Please also note that Tarantool 1.6 properly displays line numbers in error messages for multiline expressions. \n. @pgulutzan  is my explanation clear? May I close this ticket?\n. Same problem with admin_port\n. success: 0\nrequest codes: 1 to  (1<<16 - 1)\nrecoverable error: 1<<16 + ER_XXX constant\nunrecoverable error: 1<<17 + ER_XXX constant\n. => review\n. Duplicate of #338 \n. => review\n. > It seems that 'update' still thinks field indexes are 0-based.\nYes, update is still zero-based because IPROTO and C api are zero based. I will add a flag to protocol to support both zero and one-indexed UPDATE.\n. find() and findall() fixed.\n. update and transform => review (branch tuple-update-one-based)\n. splice in update is not fixed yet.\n@pgulutzan:\n\nNow I try to splice the second field, replacing the first\ncharacter with '@'.\n```\ntarantool> box.space.x:update(1,{{':',2,0,1,'!'}})\n\n\n[1, '!BC']\n...\n```\n\n\nI checked string:sub() in Lua. It is weird.\n```\ntarantool> s = \"abcde\"                                                                                                                                                                                                                       \n\n...                                                                                                                                                                                                                                        \ntarantool> s:sub(0)\n\n\nabcde                                                                                                                                                                                                                                    \n...                                                                                                                                                                                                                                        \ntarantool> s:sub(1)                                                                                                                                                                                                                         \n\n\n\nabcde                                                                                                                                                                                                                                    \n...                                                                                                                                                                                                                                        \ntarantool> s:sub(1, 5)                                                   \n\n\n\nabcde                                                                                                                                                                                                                                    \n...                                                                                                                                                         \ntarantool> s:sub(0, 5) \n\n\n\nabcde\n...\ntarantool> s:sub(-5, 0)\n\n\n\n...\ntarantool> s:sub(-5, -1)\n\n\n\nabcde\n...\ntarantool> s:sub(-4, 0)\n\n\n\n...\ntarantool> s:sub(-4, 1)\n\n\n\n...\n. SETLSN was removed.\n. Fixed\n. 'A' unpacks the end of buffer as string. It was modeled after Perl `pack` function: http://perldoc.perl.org/functions/pack.html. The difference is that Perl also support size modifiers (e.g. 'A5'), but Tarantool doesn't.  May be we should also add support for size modifiers.\n. May be also remove space numbers from Lua?\n. It is very hard to implement it both for spaces and indexes.\nlbox_fillspace() tries to find old object in box.space by id in order to re-use it.\nbox.space.xx.index[0] is used internally by many Lua bindings.\n.\ntarantool> '$a\\t $'\n\n\n\n\"$a\\t $\"\n...\n\ntarantool> #'$a\\t $'\n\n5\n...\n\ntarantool> \"$a\\t $\"\n\n\"$a\\t $\"\n...\n\ntarantool> #\"$a\\t $\"\n\n5\n...\n\ntarantool> [[$a\\t $]]\n\n$a\\t $\n...\n\ntarantool> #[[$a\\t $]]\n\n6\n...\n```\n\nConfirmed.\n. Results from Python:\n```\n\n\n\nimport yaml\nprint('$a\\t $')\n$a       $\nlen('$a\\t $')\n5\nyaml.dump('$a\\t $')\n'\"$a\\t $\"\\n'\nprint('$a\\t $')\n$a\\t $\nlen('$a\\t $')\n6\nyaml.dump('$a\\t $')\n'$a\\t $\\n...\\n'\n```\n. js-yaml:\n\n\n\n```\n\nyaml.dump(\"$a\\t $\")\n'\"$a\\t $\"\\n'\nyaml.dump(\"$a\\t $\")\n'\"$a\\\\t $\"\\n'\n. Need to port this logic: https://bitbucket.org/xi/pyyaml/src/ddf211a41bb231c365fece5599b7e484e6dc33fc/lib/yaml/emitter.py?at=default#cl-645\n.\ntarantool> t = box.tuple.new(\"\\x08\\x5c\\xc2\\x80\\x12\\x2f\")\n\n\n...\ntarantool> t\n\n[\"\\b\\\\x80\\x12/\"]\n...\n```\n\n'\\x5c' is missing\n. Can be fixed by #235 \n. From @pgulutzan:\n```\n\ntarantool> box.cfg{admin=4444,listen=5555}\n2014-07-18 09:23:18.836 [3648] main/101/interactive C> version 1.6.0-1562-g7f36af4\n2014-07-18 09:23:18.836 [3648] main/101/interactive C> log level 5\n2014-07-18 09:23:18.838 [3648] main/101/interactive I> mapping 1073741824 bytes for a shared arena...\n2014-07-18 09:23:18.838 [3708] main/101/spawner C> initialized\n2014-07-18 09:23:18.840 [3648] main/101/interactive I> recovery start\n2014-07-18 09:23:18.840 [3648] main/101/interactive I> recovering from `./00000000000000000000.snap'\n2014-07-18 09:23:18.857 [3648] main/101/interactive I> bound to primary port 0.0.0.0:5555\n2014-07-18 09:23:18.857 [3648] main/101/interactive I> ready to accept requests\n2014-07-18 09:23:18.857 [3648] main/101/interactive I> bound to admin port 0.0.0.0:4444\n```\nThat is, according to the initial display\n\"listen\" is still called \"primary port\",\n\"admin\" is still called \"admin port\",\n\"bound to admin port\" message comes after \"ready to accept requests\" messages\n. > replication_source should accept multiple sources, comma-separated\n\nI suggest to use Lua table here.\n\na connect should automatically establish a back-link, so any connection should be bi-directional. In other words, replication_source only tells which connections are initiaded by a server at start.\n\nIt should be discussed.\n. > if the server fails to connect to a source, it should keep trying, even if it has not performed a join yet (right now it only keeps trying in SUBSCRIBE)\nSee #58\n. Please use one-indexed (like Lua) field numbers.\n. Closing this ticket as a duplicate of #280 \n. Please also fix size calculation in net.box implementation:\nlocal function b64decode(str)\nlocal so = ffi.new('char[?]', string.len(str) * 2);\n. I prepared required refactoring in test suite to properly use URIs in all tests.\n. I resolved this problem only for UPDATE, but there is a lot of other places.\n. Mostly fixed by 5fdbc45c07dfbff0ebc1b604e467b510f076daaf\n. Why :new() should be used at module level? It is bad design.\nPlease convert to .new()\n. box.space[x]:insert/replace/delete return a Lua object which references original tuple, i.e. tuple data is shared and reference counted. These temporary objects live in Lua until the garbage collector will remove it.\nLet's explore your example.\nPopulate database. box.space[0]:insert will create some amount of temporary tuple objects.\n```\nlua i=0; while true do i=i+1; box.space[0]:insert( tonumber64(i), string.rep( \"x\", 100000), 0, 0, 0, 0) end\n\nerror: 'Failed to allocate 100048 bytes in slab allocator for tuple'\n...\nlua box.space[0]:len()\n\n\n7936\n...\nshow slab\n\n\nslab statistics:\n  classes:\n     - { item_size: 131072, slabs:    256, items:        7936, bytes_used:   1040216064, waste: 23.67%, bytes_free:     33525760 }\n  items_used: 96.88%\n  arena_used: 100.00%\n  waste: 23.67%\n  bytes_waste:    246206463\n...\n```\nRemove all tuples from space:\n```\nlua box.space[0]:truncate()\n\n...\nlua box.space[0]:len()\n\n\n0\n...\n```\n\nSome memory is still used by temporary tuples references from Lua:\n```\nshow slab\n\nslab statistics:\n  classes:\n     - { item_size: 131072, slabs:     33, items:         912, bytes_used:    119541360, waste: 23.67%, bytes_free:     18870672 }\n  items_used: 11.13%\n  arena_used: 100.00%\n  waste: 23.67%\n  bytes_waste:     28293982\n...\n```\nRun garbage collector:\n```\nlua collectgarbage('collect')\n\n\n0\n...\n```\n\nAll memory has been cleared:\n```\nshow slab\n\nslab statistics:\n  classes:\n  items_used: 0.00%\n  arena_used: 100.00%\n  waste: 0.00%\n  bytes_waste:            0\n...\n```\n. > Looks like a duplicate of the problem Alexander L has been working on.\nCould you please provide some details?\n. ok, I think that problem was caused by Lua GC.\n. Reproduced on arm-linux-gnueabihf\nbox/bad_trigger.test.py                         Traceback (most recent call last):\n  File \"/home/roman/tarantool/test-run/lib/test.py\", line 117, in run\n    self.execute(server)\n  File \"/home/roman/tarantool/test-run/lib/tarantool_server.py\", line 92, in execute\n    execfile(self.name, dict(locals(), **server.__dict__))\n  File \"box/bad_trigger.test.py\", line 34, in <module>\n    packet_len = unpacker.unpack()\n  File \"/home/roman/tarantool/test-run/lib/msgpack-python/msgpack/fallback.py\", line 570, in unpack\n    ret = self._fb_unpack(EX_CONSTRUCT, write_bytes)\n  File \"/home/roman/tarantool/test-run/lib/msgpack-python/msgpack/fallback.py\", line 498, in _fb_unpack\n    typ, n, obj = self._read_header(execute, write_bytes)\n  File \"/home/roman/tarantool/test-run/lib/msgpack-python/msgpack/fallback.py\", line 346, in _read_header\n    c = self._fb_read(1, write_bytes)\n  File \"/home/roman/tarantool/test-run/lib/msgpack-python/msgpack/fallback.py\", line 337, in _fb_read\n    raise OutOfData\nOutOfData\n. same problem on FreeBSD 10 with clang 3.3\n. Let's wait for new QEMU-KVM host to run new FreeBSD 10 image.\n. I fixed UINTXXX_MAX macroses\n. ```\n(gdb) bt\n0  0x080ac612 in ClientError (this=0x286b1000, file=0x816f2b4 \"/home/buildslave/tarantool/src/box/tree_index.cc\", line=274, errcode=3)\n1  0x0808a27b in TreeIndex::replace (this=0x2863e100, old_tuple=0x0, new_tuple=0x29002928, mode=DUP_INSERT) at object.h:40\n2  0x08074181 in space_replace_all_keys (space=0x2861aa80, old_tuple=0x0, new_tuple=0x29002928, mode=DUP_INSERT) at object.h:40\n3  0x0807857f in Engine::replace (this=0x28615300, space=0x2861aa80, old_tuple=0x0, new_tuple=0x29002928, mode=DUP_INSERT)\nat object.h:40\n\n4  0x08077dc8 in space_replace (space=0x2861aa80, old_tuple=0x0, new_tuple=0x29002928, mode=DUP_INSERT) at object.h:40\n5  0x08078148 in txn_replace (txn=0x28c200dc, space=0x2861aa80, old_tuple=0x0, new_tuple=0x29002928, mode=DUP_INSERT) at object.h:40\n6  0x0807685d in execute_replace (request=0x28c20020, txn=0x28c200dc, port=0x28c200d4)\n7  0x0805fb21 in process_rw (port=0x28c200d4, request=0x28c20020) at msgpuck.h:974\n8  0x0807c87b in lbox_insert (L=0x28750820) at object.h:40\n9  0x0812c617 in lj_BC_FUNCC ()\n10 0x08115f26 in lua_call ()\n11 0x080a706d in admin_dispatch (coio=0x28c1ff3c, iobuf=0x28c0803c, L=0x28750820) at trigger.h:59\n12 0x080a7357 in admin_handler (ap=0xbfbfe52c \"\") at trigger.h:59\n13 0x0809f9f6 in fiber_loop (data=0x0) at rlist.h:150\n14 0x080e20dd in coro_init () at /home/buildslave/tarantool/third_party/coro/coro.c:95\n15 0x0805d660 in ?? ()\n```\n```\n #0  0x2841666b in thr_kill () from /lib/libc.so.7\n1  0x282a3916 in pthread_kill () from /lib/libthr.so.3\n2  0x282a1393 in raise () from /lib/libthr.so.3\n3  0x284b96ca in abort () from /lib/libc.so.7\n4  0x2831da10 in __gnu_cxx::__verbose_terminate_handler () from /usr/lib/libstdc++.so.6\n5  0x2832221a in std::set_unexpected () from /usr/lib/libstdc++.so.6\n6  0x28322262 in std::terminate () from /usr/lib/libstdc++.so.6\n7  0x283220e8 in __cxa_rethrow () from /usr/lib/libstdc++.so.6\n8  0x08074287 in space_replace_all_keys (space=Could not find the frame base for \"space_replace_all_keys\".\n) at object.h:40\n9  0x286980d0 in ?? ()\n10 0x00000000 in ?? ()\n11 0x29002928 in ?? ()\n12 0x00000001 in ?? ()\n13 0x28c00050 in ?? ()\n14 0x00000034 in ?? ()\n15 0x28c1fd88 in ?? ()\n16 0x28c20130 in ?? ()\n17 0x286b1000 in ?? ()\n18 0x00000003 in ?? ()\n19 0x2863e100 in ?? ()\n20 0x00000000 in ?? ()\n21 0x287002c8 in ?? ()\n22 0x0805facd in port_send_tuple (port=Could not find the frame base for \"port_send_tuple(port, txn)\".\n) at msgpuck.h:974\n23 0x28c1fd68 in ?? ()\n24 0x0807857f in Engine::replace (this=0x424, space=0x458b0000, old_tuple=0x24048908, new_tuple=0xfff523e8, mode=2198899711)\nat object.h:40\n\nPrevious frame inner to this frame (corrupt stack?)\n``\n.-DLUAJIT_UNWIND_EXTERNAL=1is  enabled, I checked.\n. It was broken GCC build. I tested on latest FreeBSD 10 and all work properly.\n. => review\n. Blocked by #387\n. This path will also changesession.delimiter() toconsole.delimiter()\n. @kostja this ticket a breaking change and has high impact on the user experience. It would be nice to implement it in 1.7.3, but we don't have enough resource do to that :( . This feature is blocked by #1958, which has been moved to 1.8.. I propose minor changes to this spec:\n\n\nAdd an unique index to _sequence space to limit the maximum number of sequences attached to a space to 1.\n\n\nChange executeReplace()/executeInsert() to check the indexed field of primary key for NULL\n   and replace it by nextval() when field is NULL or update the linked sequence otherwise.\n   Multipart and non-numeric primary keys with sequences will not be supported.\n   This change can be implemented via virtual replace_all_keys implementation to avoid extra costs for existing users.\n\n\nDon't add auto_increment=true index option from this spec\n\n\nDon't add a new IPROTO command\n\n\nDeprecate space:auto_increment() method and remove it somewhere in the future.. We discussed with @unera.\nPackets should be renamed to 1.6.3.23.gabcde~sid-1_amd64.deb form.\n. 1.5.x is also affected.\n. Any progress?\n. -DLUA_USE_APICHECK and -DLUA_USE_ASSERT are already enabled.\nAll tests works fine.\n\n\ncd /data/work/tarantool/master/third_party/luajit && make BUILDMODE=static CCDEBUG= CFLAGS=\"\" CXXFLAGS=\"\" XCFLAGS=\"-DLUA_USE_APICHECK -DLUA_USE_ASSERT\" HOST_CC=\"/usr/bin/gcc\" TARGET_CC=\"/usr/bin/gcc -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -msse2 -DLUAJIT_UNWIND_EXTERNAL=1\" CCOPT=\"-O1\" Q='' LDFLAGS=\" \" clean\nmake[4]: Entering directory '/data/work/tarantool/master/third_party/luajit'\nmake -C src clean\nmake[5]: Entering directory '/data/work/tarantool/master/third_party/luajit/src'\nrm -f luajit libluajit.a libluajit.so host/minilua host/buildvm lj_vm.s lj_bcdef.h lj_ffdef.h lj_libdef.h lj_recdef.h lj_folddef.h host/buildvm_arch.h jit/vmdef.lua *.o host/*.o *.obj *.lib *.exp *.dll *.exe *.manifest *.pdb *.ilk\nmake[5]: Leaving directory '/data/work/tarantool/master/third_party/luajit/src'\nmake[4]: Leaving directory '/data/work/tarantool/master/third_party/luajit'\ncd /data/work/tarantool/master/third_party/luajit && make -C src BUILDMODE=static CCDEBUG= CFLAGS=\"\" CXXFLAGS=\"\" XCFLAGS=\"-DLUA_USE_APICHECK -DLUA_USE_ASSERT\" HOST_CC=\"/usr/bin/gcc\" TARGET_CC=\"/usr/bin/gcc -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -msse2 -DLUAJIT_UNWIND_EXTERNAL=1\" CCOPT=\"-O1\" Q='' LDFLAGS=\" \" libluajit.a\nmake[4]: Entering directory '/data/work/tarantool/master/third_party/luajit/src'\nHOSTCC    host/minilua.o\n/usr/bin/gcc  -O1 -Wall -DLUA_USE_APICHECK -DLUA_USE_ASSERT  -I. -DLUAJIT_TARGET=LUAJIT_ARCH_x64 -DLJ_ARCH_HASFPU=1 -DLJ_ABI_SOFTFP=0  -c -o host/minilua.o host/minilua.c\nHOSTLINK  host/minilua\n/usr/bin/gcc     -o host/minilua host/minilua.o -lm   \nDYNASM    host/buildvm_arch.h\nhost/minilua ../dynasm/dynasm.lua   -D P64 -D JIT -D FFI -D FPU -D HFABI -D VER= -o host/buildvm_arch.h vm_x86.dasc\nHOSTCC    host/buildvm.o\n/usr/bin/gcc  -O1 -Wall -DLUA_USE_APICHECK -DLUA_USE_ASSERT  -I. -DLUAJIT_TARGET=LUAJIT_ARCH_x64 -DLJ_ARCH_HASFPU=1 -DLJ_ABI_SOFTFP=0  -c -o host/buildvm.o host/buildvm.c\nHOSTCC    host/buildvm_asm.o\n. Ohh, it seems that flags were added to cmake/luajit.cmake but did't work.\nI rewrite XCFLAGS passing in cmake/luajit.cmake during fixing #394 and these flags started to work.\nbox/tuple.test.lua                              Traceback (most recent call last):\n  File \"/data/work/tarantool/master/test/lib/test.py\", line 111, in run\n    self.execute(server)\n  File \"/data/work/tarantool/master/test/lib/tarantool_server.py\", line 103, in execute\n    result = send_command(rescom)\n  File \"/data/work/tarantool/master/test/lib/tarantool_server.py\", line 78, in send_command\n    result = ts.curcon[0](command, silent=True)\n  File \"/data/work/tarantool/master/test/lib/tarantool_connection.py\", line 81, in __call__\n    return self.execute(command, silent)\n  File \"/data/work/tarantool/master/test/lib/tarantool_connection.py\", line 70, in execute\n    self.opt_reconnect()\n  File \"/data/work/tarantool/master/test/lib/tarantool_connection.py\", line 67, in opt_reconnect\n    self.reconnect()\n  File \"/data/work/tarantool/master/test/lib/tarantool_connection.py\", line 52, in reconnect\n    self.connect()\n  File \"/data/work/tarantool/master/test/lib/tarantool_connection.py\", line 38, in connect\n    self.socket.connect(self.port)\n  File \"/usr/lib/python2.7/socket.py\", line 224, in meth\n    return getattr(self._sock,name)(*args)\nerror: [Errno 111] Connection refused\n. It was bug in LuaJIT.\nhttp://www.freelists.org/post/luajit/LuaJIT-20x-regression,1\n. At first glance, this problem is produced due to #272.\nAnyway, box.net.box must check its arguments.\n. Dynamic schema synchronization in box.net.box is not implemented yet.\nThis  feature was postponed to next releases of 1.6.x series.\nA function to force schema reload can be added to conn as a temporary solution.\n. conn:reload_schema() doesn't work properly:\n```\n LISTEN = require('uri').parse(box.cfg.listen)\ncn = remote:new(LISTEN.host, LISTEN.service) \ncn:ping()\ncn:call('unexists_procedure') \nbox.schema.user.revoke('guest','execute','universe')\nbox.schema.user.revoke('guest','read,write,execute','universe')\ncn:reload_schema() <!-- STOPPED here\n```\n. We need a new namespace/module in app server for the following variables:\n- version: 1.6.3-82-g413b953\n-   build:\n  flags: ' -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables\n    -fopenmp -msse2 -std=c11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing\n    -fno-gnu89-inline -Werror'\n  target: Linux-x86_64-Debug\n  compiler: /usr/bin/gcc /usr/bin/c++\n  options: cmake . -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_TRACE=ON -DENABLE_BACKTRACE=ON\n- uptime\n- pid\nSolution 1\n\nversion - _G._TARANTOOL\nbuild - _G._BUILD\nuptime - uptime() (a function)\npid - just remove (bindings to POSIX will be added lately)\n\nSolution 2\nAdd a new module called app:\napp = require('app')\napp.build\napp.version\napp.uptime()\napp.coredump()\napp.background()\nusername, work_dir options from config\nI'm prefer solution 2.\nPlease comment!\n. Approved by @kostja \ns/app/tarantool/g\nIs it needed in 1.5?\n. May I implemented it?\n. Still actual.\n. I suggest box.connect(uri).\n. I suspect that that box.net.box is still uses zero-based indexes.\nWe planned to add a special flag to network protocol for this case.\n. Blocked by #416\n. I reused wrapper from space:update (see schema.lua).\nIt works but box.net.box now depends in src/box/lua/schema.lua.\n. Confirmed.\n. conn.space doesn't work if user don't have permission to query system spaces.\nBlocked by #323. \n. from @esha's Ubuntu 14.04:\n```\n$ sshd --version\nunknown option -- -\nOpenSSH_6.6.1p1 Ubuntu-2ubuntu2, OpenSSL 1.0.1f 6 Jan 2014\nusage: sshd [-46DdeiqTt] [-b bits] [-C connection_spec] [-c host_cert_file]\n            [-E log_file] [-f config_file] [-g login_grace_time]\n            [-h host_key_file] [-k key_gen_time] [-o option] [-p port]\n            [-u len]\n$ tarantool\ntarantool: version 1.6.3\ntype 'help' for interactive help\ntarantool> require('digest').sha1_hex()\n\n\nerror: 'builtin/digest.lua:100: libSSL was not loaded'\n...\n\ndpkg -L libssl1.0.0:amd64\n...\n/lib/x86_64-linux-gnu/libssl.so.1.0.0 <!-- no symlink to libssl.so\n...\n```\nAs you can see he has openssh-server installed, but digest still doesn't work.\nfrom CentOS 7:\n```\nldd /usr/sbin/sshd|grep ssl\n    libssl3.so => /lib64/libssl3.so (0x00007f55bb29b000)\n\nyum provides libssl.so\n...\nNo matches found\nyum provides libssl3.so\n...\nnss-3.15.4-6.el7.i686 : Network Security Services\nRepo        : base\nMatched from:\nProvides    : libssl3.so\nnss-3.15.4-7.el7_0.i686 : Network Security Services\nRepo        : updates\nMatched from:\nProvides    : libssl3.so\n```\nThere is no libssl.so at all.\n. OK, I realized that sockets internally use fiber_yield_timeout(), which already operates fractional seconds. @esha- experimentally investigated that values like 1000 give approximate one second timeout, so I decided that bsdsockets have problems with units. Anyway, it seems that timeout in tcp_connect() doesn't work at all. \nCould you please re-check logic of tcp_connect().\n. tcp_connect() logic was implemented incorrectly.\nI refactored this code and  fixed bugs by 01a6342ba70df6a1e5834e5c0002c323628bc0d0 commit.\n. console.connect() uses box.net.box as backend.\nI think that this hang problem is related to bugs in box.net.box.\n. console.connect(host, port) uses require('net.box'):new(host, port) which in turn uses require('socket').getaddrinfo(host, port, {protocol = 'tcp'}) under the hood.\nYou tried to connect to host 0 ==  '0.0.0.0' and port 3301. 0.0.0.0 usually means any ip address. I have no idea what RFC say about connection to \"any ip address\", but in practice it connects to one of local IP addresses.\nFurthermore, a number is fully valid ipv4 address. For example, 134744072 is equivalent to 8.8.8.8.\nTry to run ping 134744072 or open http://2915180686/.\n```\ntarantool> require('socket').getaddrinfo(0, 3313, {protocol = 'tcp'})\n\n\n\n\nhost: 0.0.0.0\n    family: AF_INET\n    type: SOCK_STREAM\n    protocol: tcp\n    port: 3313\n...\n```\n. Anyway, I agree with you that console must not hang if box.net.box fails.\nI occasionally fixed this problem during making #388.\n\n\n\n```\ntarantool> box.cfg{listen=3301}\nxxxx\n\n...\ntarantool> require('console').connect('127.0.0.1', 3301)\n\nerror: Execute access denied for user 'guest' to function 'dostring'\n...\n\n```\nI'll try to add a test case to our test suite if it is possible.\n. console.connect() uses box.net.box which depends on box.cfg{}. I agree that console module should work without invoking box.cfg{}.\nBlocked by #411\n. > The part that needs to be fixed in 1.6.4: correct error checking and reporting.\n\nIf a remote connection fails, console prompt should not change, instead, connect() should return an error. If the problem is in missing box.cfg{}, console.connect() should say this in the error message.\n\nDuplicate of #407.\nI already fixed it and added tests cases by https://github.com/tarantool/tarantool/commit/42eda622fc3cf0c2a8678dfd0a3f699dd4871031\n```\ntarantool> require('console').connect('127.0.0.1', 3313)\n./src/tarantool: Connection refused\n\n\nerror: '[string \"-- load_cfg.lua - internal file...\"]:97: Please call box.cfg{}\n    first'\n...\n\ntarantool> 1 + 1\n\n2\n...\n```\n\n```\ntarantool> require('console').connect('127.0.0.1', 3301)\n\n\nerror: Execute access denied for user 'guest' to function 'dostring'\n...\n``\n. You need permission to executedostring` on remote server in order to use console.connect().\nUnder the hood this method uses box.net.box:new([args to console.connect()]):call('dostring')\n. Blocked by #291\n. It already works:\n\nif rawget(box, 'tuple') ~= nil then\n                for i, v in pairs(response.body[DATA]) do\n                    response.body[DATA][i] =\n                        box.tuple.new(response.body[DATA][i])\n                end\n            end\n. See #424\n. client:readline({ \"\\n%.%.%.\\n\" }) solved this problem. \nThis behavior is  unexpected. Please document add tests.\n. Duplicate of #246\n. This problem is root cause of #410. Good catch!\n. I need to patch Lua CJSON (which is submodule) in order to fix it. I already patched yaml and msgpack to use common code base for type detection.\nAny ideas?\n. => review\n. Fixed.\n. I do not see any connection between EOF and trailing delimiter.\nOn EOF this function must return nil (it is another bug, see #412)\n. I think that static highlighting is better for our case.\n. Reproduced on 1.5.4.\nfunction test()\n    local fun, errmsg = loadstring('box.fiber.cancel(box.fiber.self())')\n    xpcall(fun, function() end)\n    xpcall(fun, function() end)\nend\nbox.fiber.wrap(test)\nI used xpcall because pcall is override by Tarantool implementation.\n. => review\n. > Remove box.info.build into a separate variable - it's too clumsy.\nPlease see #399\n. Supersedes #412, #413, #418\n. The root case is out of bounds memory access in bit_iterator.\n. This is a socket problem.\n```\n!./src/tarantool\nlocal socket = require('socket')\nserver = socket('AF_INET', 'SOCK_STREAM', 'tcp')\nserver:setsockopt('SOL_SOCKET', 'SO_REUSEADDR', true)\nif not server:bind(0, 3313) then\n    error('failed to bind')\nend\nserver:listen()\nprint('listen on 3313')\nserver:readable()\nlocal client = server:accept()\nclient:write(string.rep('a', 1000000))\n```\n$ ./test.lua \nlisten on 3313\n./test.lua: [string \"-- bsdsocket.lua (internal file)...\"]:676: bad argument #2 to 'sub' (number expected, got cdata)\nrlwrap nc 127.0.0.1 3313 > /dev/null\nI suppose that socket:syswrite returns FFI number instead of lua number.\nSome functions like string:sub doesn't support FFI types.\n. Confirmed on Valgrind 3.9.0 (after fixing #394)\n. Still actual.\n. I can't reproduce this problem.\n2014-08-07 11:39:51.558 [25027] main/101/test.lua C> version 1.6.3-48-gfc7259a\n2014-08-07 11:39:51.558 [25027] main/101/test.lua C> log level 5\n2014-08-07 11:39:51.559 [25027] main/101/test.lua I> mapping 1073741824 bytes for a shared arena...\n2014-08-07 11:39:51.559 [25028] main/101/spawner C> initialized\n2014-08-07 11:39:51.566 [25027] main/101/test.lua I> initializing an empty data directory\n2014-08-07 11:39:51.570 [25027] main/101/test.lua I> creating `./00000000000000000000.snap.inprogress'\n2014-08-07 11:39:51.570 [25027] main/101/test.lua I> saving snapshot `./00000000000000000000.snap.inprogress'\n2014-08-07 11:39:51.578 [25027] main/101/test.lua I> done\n2014-08-07 11:39:51.578 [25027] main/101/test.lua I> ready to accept requests\ntest_empty  \n2014-08-07 11:39:51.579 [25027] main/101/test.lua F> Supplied key type of part 0 does not match index part type: expected STR\n2014-08-07 11:39:51.581 [25028] main/101/spawner I> Exiting: master shutdown\n. Actual version was version 1.6.3-113-gfd0cb27\n. Requires background option to reproduce.\n. The actual problem is that STDOUT_FILENO fd is not dup'ed to logger fd.\nIt was extremely hard to find the root case, but I (proudly) did it:\n1. background() closes STDOUT_FILENO=1\n   https://github.com/tarantool/tarantool/blob/644c926a17d2760a1037b55e3cf50f5047fbe799/src/tarantool.cc#L384\n2. say_logger_init doesn't override STDOUT_FILENO (only STDERR_FILENO)\n   https://github.com/tarantool/tarantool/blob/644c926a17d2760a1037b55e3cf50f5047fbe799/src/say.cc#L225\n   I think that this fix was made for interactive mode.\n3. socketpair reuses STDOUT_FILENO=1 for AF_LOCAL replication relay socket\n4. Lua's print() prints some message to STDOUT_FILENO\n5. replication_relay asserts on unexpected  packet\n   https://github.com/tarantool/tarantool/blob/644c926a17d2760a1037b55e3cf50f5047fbe799/src/box/replication.cc#L512\n. I fix the problem, but I have no idea have to make test case.\n. Confirmed.\n. Confirmed.\n. I think that we need socket.tcp_server() function which will support uri.\nBTW, console.listen() supports \"host:port\" uris.\n. I added #450 for console.listen() and #451 for console.connect().\n. Already fixed.\n. console.listen('127.0.0.1', '3313') also doesn't work\n. I realized that sockets must not use URI.\nURI consist of many parts - scheme, login, password, host, service, path, query, fragment.\nconnect()/ bind() only need host and service.\nInstead of passing URI to connect()/bind() please parse URI in you module, check schema , pass host, service to sockets and save other fields for use after creating socket\n. Fix by 67e893abded4877b3d1d9024def4aaf5e4764a4f\n. Please fix and add a test case.\n. I have a talk with our customers. Their current usage in Tarantool 1.5 is:\nlocal field1, field2, field3 = tuple:slice(0, 3)\nIn Tarantool 1.6 they unpack each field separately because tuple:slice() doesn't working properly after moving to 1-based indexing:\nlocal field1 = tuple[1]\nlocal field2 = tuple[2]\nlocal field3 = tuple[3]\nIn other words, :slice() is only needed to unpack some tuple fields to Lua variables.\nslice() which returns a new tuple is also useful, but we don't have a feature request for that.\nDecision is:\n1. Add arguments to tuple:unpack() #506 to implement the feature request from the customer\n2. Remove current implementation of tuple:slice()\n3. Convert a proposal of new tuple:slice() to raw idea\n. I found another use-case:\nt = some tuple\nbox.space.test:replace({new value, new value, new value, t:slice(4)})\nI think that tuple:update() should be used instead.\nAny ideas?\n. =>  supercede with tuple:unpack(), remove from documentation\n. Blocked by #578 \n. It is obvious that JIT'ed code on Lua Tables is faster than box.space.\n. - copy the snapshot from master\n- replace \"Server: ${SOME_UUID}\" in snapshot header\n- box.space._cluster:replace{2, '${SOME_UUID}'} on master\n- start replica on the snapshot with box.cfg{replication_source=}\n- profit\n. I don't understand what should be done for this ticket.\n. Generally, console works without box.cfg{}.\nThe only console.connect() method needs box.cfg{} because it uses box.net.box as backend.\nClosed as duplicate of #411.\n. console uses box.net.box to connect to remote server.\nThere is nothing to change in console itself, instead #411 should be fixed.\n. Available benchmarks:\n- Lua bench https://gist.github.com/rtsisyk/9362736\n- Lua bench 2 https://github.com/mailru/tntlua/blob/master/benchmark.lua\n- nosqlbench https://github.com/tarantool/nosqlbench\n- C API bench https://github.com/tarantool/tarantool-c-bench\n. See also #448\n. Can't reproduce on my Debian jessie/sid.\n. SYNC for AUTH works for any non-zero values.\n. Replica will not try to reconnect after sending JOIN request. Any error except connection problem before sending JOIN will stop bootstrap process.\nThis was done intentionally. Otherwise replica will send a lot of JOIN requests and reach a limit of numbers of nodes in master-master cluster.\n. Insert to _cluster must be done AFTER sending bootstrap data.\n. There is only one small problem - bootstrap data sent from a replication fork.\nI can't insert to _cluster from forks. \nPlease re-schedule to 1.7.x.\n. Moved to 1.6.5 after discussion with @kostja\n. It is possible to fix it since we moved JOIN to a thread.\n. I don't understand what should be done in this ticket.\n. The only error then replica can reconnect is SocketError... I made a patch for this ticket in gh-729-multi-master\n. I added a test to check that replica reconnects on socket errors. My test checks only SUBSCRIBE.\nCurrently there is no way to test bootstrap/JOIN procedure in our test system. It is impossible even in Python. Anyway, replica uses common code both for JOIN/SUBSCRIBE after my replica-refactoring patch, so my test case should be enough.\nThere is no more to do with this ticket. Please file a feature request to http://github.com/tarantool/test-run if you want to add support for bootstrap tests.\n. This is OK. \nSome CFLAGS ignore during compiling *.S (assembly) files.\n. master.lua:\n``` lua\n!../../src/tarantool\nbox.cfg{\n    listen              = 3301,\n    slab_alloc_arena    = 0.1,\n    pid_file            = \"tarantool.pid\",\n    rows_per_wal        = 50\n}\nlocal space = box.space.test\nif not space then\n    box.schema.user.grant('guest', 'read,write,execute', 'universe')\n    space = box.schema.create_space('test', { id  = 0})\n    space:create_index('primary', { type = 'tree'})\n    space:replace({1, 'Hello!'})\n    box.snapshot()\nend\nrequire('console').start()\n```\nreplica.lua:\n``` lua\n!../../../src/tarantool\nbox.cfg{\n    slab_alloc_arena    = 0.1,\n    pid_file            = \"tarantool.pid\",\n    rows_per_wal        = 50,\n    replication_source  = '127.0.0.1:3301'\n}\nrequire('console').start()\n```\n1. Start master.lua\n2. Start replica.lua\n3. Type box.space.test:select() on replica - 'Hello' is present\n4. Restart replica.lua\n5. Type box.space.test:select() on replica - 'Hello' is missing\nThe bug is only reproduced on TREE index.\n. from box.cc;\nc++\n        } else if (recovery_has_remote(recovery)) {\n                /* Initialize a new replica */\n                replica_bootstrap(recovery);\n                snapshot_save(recovery);\n      }\n      ...\n     space_end_recover_snapshot();\n1. snapshot_save invokes snapshot_space\n2. snapshot_space uses initIterator(it, ITER_ALL, NULL, 0)\n3. initIterator is not consistent because endBuild() is not called\n4. index->endBuild() is called by space_end_recover_snapshot which is called after snapshot_save()\n. Do you want to re-invent standard UNIX cron?\nThis is systemd style.\n. => review\n. Duplicate of #435\n. confirmed\n. Fixed in #550 \n. Fixed by 8e10e462d16b2df3b89ca29005eedb6fe40880a5\nPlease re-open if you still have this problem.\n. Sorry, I can't repeat it right now.\nI just run make test on master and it failed on assertion.\n. Ohh, I forgot one important note: the obvious way to implement that is to use temporary table and unpack() function from Lua. But this implementation will broke all JIT traces.\n. I have failed to make it JIT-compiled.\nI sent a letter with code and questions to luajit maillist.\n. Any ideas?\n. YAML has more than one way to encode the same data.\nblock mode\nhttp://www.yaml.org/spec/1.2/spec.html#Block\n```\ntarantool> { 1, 2, {key1 = 'val1', key2 = 'val2', array = {'a', 'b', 'c'}}, 3}\n\n\n\n\n1\n\n\n2\nkey1: val1\n    key2: val2\n    array:\na\nb\nc\n\n\n3\n...\n```\n\nflow mode\nhttp://www.yaml.org/spec/1.2/spec.html#Flow\n```\ntarantool> box.tuple.new({ 1, 2, {key1 = 'val1', key2 = 'val2', array = {'a', 'b', 'c'}}, 3})\n\n\n[1, 2, {'key1': 'val1', 'key2': 'val2', 'array': ['a', 'b', 'c']}, 3]\n...\n```\n\nThe source string in your example was encoded to block style and the result string was encoded to flow style. However, both YAML strings are fully equivalent and are used to represent the same data structure.\nThird-party Lua-YAML library was extended by our team to support flow mode after complaints from customers to output from admin console and REPL in 1.6. Most people want to see Lua tables and Tarantool tuples to be encoded in flow mode. We also added a hint for serializers to choose between array vs map types and block vs flow modes properly: \n```\ntarantool> setmetatable({key1 = 'val1', key2 = 'val2'}, { __serialize='map' })\n\n\n{key1: val1, key2: 'val2'}\n...\n\ntarantool> setmetatable({key1 = 'val1', key2 = 'val2'}, { __serialize='mapping' })\n\nkey1: val1\n  key2: val2\n...\n\ntarantool> setmetatable({1, 2, 3}, { __serialize='seq' })\n\n[1, 2, 3]\n...\n\ntarantool> setmetatable({1, 2, 3}, { __serialize='sequence' })\n\n\n\n1\n\n\n2\n3\n...\n```\n\nThe __serialize feature is nearly fresh and isn't documented yet (WIP).\nYAML decoder sets __serialize='seq' and __serialize='map' to sequences and mappings correspondingly to force correct types and flow mode.  I'm not sure that another default value will be acceptable to all. We'll think about it.\nAnyway, at least decode() should set proper value based on source input.\n. We still can't properly deploy new version due to #517.\nPlease post all new issues for try.tarantool.org to tarantool/try repo. Thanks!\n. I think that panic_on_wal_error or panic_on_snap_error was set to false.\n. This problems broke our try.tarantool.org service!\n. A complaint from Debian's lintian:\nE: tarantool: embedded-library usr/bin/tarantool: libyaml\nN:\nN:    The given ELF object appears to have been statically linked to a\nN:    library. Doing this is strongly discouraged due to the extra work needed\nN:    by the security team to fix all the extra embedded copies or trigger the\nN:    package rebuilds, as appropriate.\nN:    \nN:    If the package uses a modified version of the given library it is highly\nN:    recommended to coordinate with the library's maintainer to include the\nN:    changes on the system version of the library.\n. This patch for 1.6.7 because it blocks Debian packages. The system library is used only if -DENABLE_BUNDLED_LIBYAML is OFF (default value is ON). All other changes are just moving of files and fixes in CMake scripts.\n. Postreview fixes:\n- Fork libyaml to tarantool/\n- Add .gitignore to avoid \"untracked content\" errors http://stackoverflow.com/questions/5126765/how-to-get-rid-of-git-submodules-untracked-status\n. Fixed\n. ok, I'll add a basic check for parameters.\n. Current plan: \n1. Exclude format_id bytes from hash value if it is possible (may cause performance regression)\n2. Add support for MP_BIN type in STR index (may cause performance regression)\n3. Patch tarantool-python to force use_bin_type flag\n4. Document this problem\n. Please note that box/iproto.test.py is affected by #530.\nAll test works ok if you comment out box/call.test.py.\n. Fixed by patching socket.tcp_server()  and re-basing console.listen() on this function.\nTests cases added to box/bsdsocket\n```\n/src/tarantool: version 1.6.3-405-g4aafaa1\ntype 'help' for interactive help\ntarantool> require('console').listen(3313)\n./src/tarantool: console: started on ::1:3313\n\n\nfd: 6\n  name:\n    host: ::1\n    family: AF_INET6\n    type: SOCK_STREAM\n    protocol: tcp\n    port: 3313\n...\n\ntarantool> ./src/tarantool: console: client ::1:51648 connected\n\n...\ntarantool> require('fiber').info()\n\nconsole/client/::1:51648:\n    fid: 103\n    csw: 5\n    backtrace:\n'#0  0x47c3e2 in fiber_yield()+193'\n'#1  0x47c4ed in fiber_yield_timeout(double)+149'\n'#2  0x49cf54 in lbox_bsdsocket_iowait(lua_State*)+314'\n'#3  0x511b3c in lj_BC_FUNCC+52'\n  console/listen/::1:3313:\nfid: 102\ncsw: 3\nbacktrace:\n'#0  0x47c3e2 in fiber_yield()+193'\n'#1  0x47c4ed in fiber_yield_timeout(double)+149'\n'#2  0x49cf54 in lbox_bsdsocket_iowait(lua_State*)+314'\n'#3  0x511b3c in lj_BC_FUNCC+52'\n  interactive:\nfid: 101\ncsw: 7\nbacktrace:\n'#0  0x40de8670 in ?'\n...\n\n\n\n```\n. console.connect() uses box.net.box which should re-connect automatically.\nAs far as I known, box.net.box was fixed in master. I don't think that we need a special test case for console itself. Moreover, it is not possible to make such test case before we have box.cfg { listen = nil } feature.\n. UNIX sockets also don't work:\nreplication_source  = '/tmp/tarantool.sock'\n2014-09-25 09:20:55.325 [17869] main/103/replica/unix:///tmp/tarantool I> can't connect to master\n2014-09-25 09:20:55.325 [17869] main/103/replica/unix:///tmp/tarantool !> SystemError connect, called on fd 11, aka 0.0.0.0:0: Address family not supported by protocol\n2014-09-25 09:20:55.325 [17869] main/103/replica/unix:///tmp/tarantool I> will retry every 1 second\n. I fixed \"Address family not supported by protocol\" by new uri-parser.\nI can't  write test case for it due to limitation of our test system (I need unix socket support on Python side). Probably @bigbes can try make a test case.\n. I updated entire test suite to use \"localhost:[random port]\" both for console and iproto. On most IPv6-enabled systems 'localhost' resolved to \"::1\" (IPv6). This is enough to test AF_INET6 support in Tarantool, so there is no special test case.\n. Replica attempts to connect ALL addresses from getaddrinfo().\nCould you please check output of socket.getaddrinfo('localhost') with and without AI_PASSIVE flag?\n. Fixed.\n. Which messages do you mean? Could you please point it out.\n. Tarantool 1.5.x has similar behavior.\n2014-10-22 15:57:47.975 [5434] 1/relay/127.0.0.1:34154 I> 0.1M rows processed\n2014-10-22 15:57:49.544 [5434] 1/relay/127.0.0.1:34154 I> 0.2M rows processed\n2014-10-22 15:57:51.538 [5434] 1/relay/127.0.0.1:34154 I> 0.3M rows processed\n2014-10-22 15:57:53.433 [5434] 1/relay/127.0.0.1:34154 I> 0.4M rows processed\n2014-10-22 15:57:55.402 [5434] 1/relay/127.0.0.1:34154 I> 0.5M rows processed\n2014-10-22 15:57:57.398 [5434] 1/relay/127.0.0.1:34154 I> 0.6M rows processed\n2014-10-22 15:57:59.349 [5434] 1/relay/127.0.0.1:34154 I> 0.7M rows processed\nThis code exists since the first public import (9b8dd7032d05e53ffcbde78d68ed3bd47f1d8081).\n. Confirmed.\n. Where? I can't find it.\n. Somebody decided to make hash by fiber name...\n. Confirmed.\n. I think that this feature should be added to box.net.box.new() function.\nFor admin protocol only call() method will work.\n. 1. Names of app/float_value.result amd app/boolean.test.lua are senseless\n2. app/float_value.result and app/boolean.test.lua can be replaced by single line in app/cfg.test.lua\n3. cfg is hard to test in box/ suite, please stop adding new tests to box/cfg.test.lua\n. quotes were fixed, please check.\n. snapshot_save() must not be invoked before box.cfg{} \n. This problem happens due to forgotten AI_PASSIVE flag in socket.tcp_server().\n+\n. 1.6.3-487-gf4722a6\n```\nbox.cfg{slab_alloc_arena = 0.2, wal_mode = 'none'}\n...\n2014-10-09 15:44:02.554 [26075] main/101/interactive small.h:281 E> ER_MEMORY_ISSUE: Failed to allocate 23 bytes in slab allocator for tuple\n\nerror: Failed to allocate 23 bytes in slab allocator for tuple\n...\n\ntarantool> #s:select{}!\n\n3401079\n...\n```\n\nProbably you have broken build.\nDid you use our official build from tarantool.org/dist/?\n. The problem is still actual.\n```\nbox/call.test.py                                [ fail ]\nTest failed! Result content mismatch:\n--- box/call.result Mon Oct 13 13:39:50 2014\n+++ box/call.reject Mon Oct 13 15:34:57 2014\n@@ -24,7 +24,7 @@\n - [False]\n - [-1]\n - [1.123]\n-- [1e+123]\n+- [9.9999999999999998e+122]\n - [None]\n ...\n f1=nil\nLast 15 lines of Tarantool Log file:\n```\n. The problem is still actual.\nPython 2.6.6\n```\nbox/cmdline.test.lua                            [ fail ]\nTest failed! Result content mismatch:\n--- box/cmdline.result Mon Oct 13 13:39:50 2014\n+++ box/cmdline.reject Mon Oct 13 15:35:13 2014\n@@ -16,7 +16,7 @@\n ...\n string.match(arg[-1], '/tarantool$') ~= nil\n ---\n-- true\n+- false\n ...\n string.match(arg[0], '/box%.lua$') ~= nil\n ---\n@@ -24,7 +24,7 @@\n ...\n io.type( io.open(arg[-1]) )\n ---\n-- file\n+- null\n ...\n io.type( io.open(arg[0]) )\n ---\nLast 15 lines of Tarantool Log file:\n```\nPython 2.6.6 is old, but CentOS 6 doesn't have newer.\n. You can use tail of _space to store information about fields.\n. box.net.box for 1.5 protocol?\n. Guava merged.\n. Thread from coeio_custom() continues to use fiber's stack after fiber_free() which invoked by exit(3).\nTarantool should kill all fibers using fiber_cancel() during fiber_free() and wait until coeio task will finish.\nI don't know how to implement it easily. Temporary solution is to stop calling fiber_free() from tarantool_free() - the kernel will free all resources anyway.\nSee also #364\n. I think we should fix coeio_custom #364 first and when return to this ticket.\n. Re-test after merging multi-master #729\n. I think admin should have permission to execute dostring\n. I discussed this problem with @bigbes:\n- Official homebrew repository doesn't allow live (e.g. git) formulas, so it is not possible to build Tarantool directly from GitHub using official brew.\n- brew validates hard-coded in the formula checksum to match the tarball checksum, so it is not possible to just create dynamic tarantool-1.6.tar.bz on our web-site with the latest version of Tarantool.\n- Any modification of formulas is only possible via GitHub pull requests. Review can take up to two weeks.\n=> There is no way to automatically upload latest Tarantool to official brew repository for each build using our buildbot. \nAcceptable solution:\n1) Create a custom brew repository (brew tap) on http://tarantool.org/dist/ with the latest version of Tarantool. \nhttps://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/brew-tap.md\n2) Push the current major release of Tarantool 1.6.7 to upstream repository. \n. Downstream ticket: https://github.com/Homebrew/homebrew/pull/47495\n. tarantool_free() calls box_free() every time, even if box.cfg{} wasn't called.\nvoid\ntarantool_free(void)\n{\n    /* Do nothing in a fork. */\n    if (getpid() != master_pid)\n        return;\n    signal_free();\n    tarantool_lua_free();\n    box_free();\n. I can't. It seems to be fixed.\n. A fix requires support for multi-statement autocommit transactions.\nI tried to implement it, but it seems that this feature requires major refactoring of txn code.\n. I think this problem caused by #587 .\nPlease re-test after fixing #587. \n. I re-tested this example on 1.7.3-477-g55685eaf2. A new space created from on_replace() trigger now quietly disappears.\n. Superseded by #1968. Which one?\nhttps://github.com/Neopallium/lua-zmq\nhttps://github.com/moteus/lzmq\n. Already fixed:\n``\ntarantool> box.cfg { listen = \"x!213213\" }\n2015-01-20 13:49:37.260 [5481] main/101/interactive C> version 1.6.4-139-g090445f\n2015-01-20 13:49:37.260 [5481] main/101/interactive C> log level 5\n2015-01-20 13:49:37.261 [5519] main/101/spawner C> initialized\n2015-01-20 13:49:37.261 [5481] main/101/interactive I> mapping 1073741824 bytes for a shared arena...\n2015-01-20 13:49:37.262 [5481] main/101/interactive I> recovery start\n2015-01-20 13:49:37.262 [5481] main/101/interactive I> recovering from./00000000000000000000.snap'\n\n\nerror: 'invalid uri for bind: x!213213, called on fd -1'\n...\n```\n. 1.7.5-29-gbb6170e4b. Please don't document wakeup() in public API until fixing all similar bugs.\n. Currently we don't allow to cancel non-Lua fibers:\n\nstatic int\nlbox_fiber_cancel(struct lua_State *L)\n{\n    struct fiber *f = lbox_checkfiber(L, 1);\n    if (! (f->flags & FIBER_USER_MODE))\n        luaL_error(L, \"fiber.cancel(): subject fiber does \"\n               \"not permit cancel\");\n    fiber_cancel(f);\n    return 0;\n}\n. I also suggest to rename fiber.time64() to fiber.utime() or something like that\n. I discussed this bug with @kostja. The best fix is to make drop/create index in single transaction to prevent fiber_yield() during wal_write();\n. => use transaction in space_truncate()\n. A quick idea from @kostja how to fix this problem:\n- Add version member to the space options in box.space._space\n- Truncate the space when version has changed. Now I have a system without locale support.\nroot@edison:~# locale -a\n-sh: locale: not found\nEven C.UTF-8 doesn't work here.\nPlease remove noise message or display it only in daemon mode.\n. I fixed this problem. Now I can run luarocks using tarantool without installing Lua 5.1/5.2.\n. OK. I agree.\n. Who said that we should add function name to error messages?\n```\ntarantool> require('yaml').decode()\n\n\nerror: 'bad argument #1 to ''?'' (must provide a string argument)'\n...\n\ntarantool> io.open()\n\nerror: 'bad argument #1 to ''?'' (string expected, got no value)'\n...\n\n```\n. This is a LuaJIT problem: http://www.freelists.org/post/luajit/Bad-stack-trace-from-lua-getstack-and-lua-getinfo,1\n```\ntarantool> loadstring('io.open()')()\n\n\nerror: '[string \"io.open()\"]:1: bad argument #1 to ''open'' (string expected, got\n    no value)'\n...\n\ntarantool> loadstring('return io.open()')()\n\nerror: 'bad argument #1 to ''?'' (string expected, got no value)'\n...\n```\n\nI can't add suggested workaround with parentheses here because it will break interactive mode:\n```\ntarantool> test()\n\n\n1\n2\n3\n...\n\ntarantool> loadstring('return test()')() <!-- current version\n\n1\n2\n3\n...\n\ntarantool> loadstring('return (test())')() <!-- suggested version\n\n1\n...\n.\n./src/tarantool: version 1.6.4-139-g090445f\ntype 'help' for interactive help\ntarantool> function f() return 5 end\n\n\n...\ntarantool> fiber = require('fiber')\n...\ntarantool> fiber.create(f)\n./src/tarantool: the fiber is dead\n```\nConfirmed.\n. ```\ntarantool> setmetatable({}, { __serialize = function() error('stop the world') })\n\n\nerror: '[string \"setmetatable({}, { __serialize = function() e...\"]:1: unexpected\n    symbol near ''}'''\n...\n\ntarantool> setmetatable({}, { __serialize = function() error('stop the world') end})\n```\nThis exception is caused by YAML serializer during handling died fiber object.\nFiber API throws exception if a fiber that referenced by a Lua variable has died.\n. Will be fixed after moving SUBSCRIBE operation to a thread.\n. The other part of the problem was broken logrotated script, it would not send SIGHUP to tarantool.\nRelay is now running in a thread, and logrotated script is fixed.\n. ```\nlog.info(\"shard: %s %s\", 1 + (num + i) % #servers, #servers)$\nmain/278/lua utils.h:449 E> ER_PROC_LUA: builtin/log.lua:29: attempt to concatenate 'uint64_t' and 'string'\n``\n. Fixed. I can't code with this bug.\n. YAML tries to serialize output as an array...\n. Fixed in 1.6.4-83-g61b507a\n. Unclear for me.\n. cat xx | tarantool don't start our console. Instead of processing input line by line, tarantool passes stdin descriptor to Lua to process entire input with loadstring()/dofile() interface. \n.console.connect()andconsole.delimiter()works only if you use an interactive console and/ortarantoolctl enter.cat lua.xx  | tarantool` works exactly as expected - like original Lua interpreter.\nWhy do you need delimiters for local files?\n. Discussed with @bigbes  and @kostja  =>\n```\n$ echo 'expression' | tarantoolctl eval instance\n\n\nresult\n...\n```\nOn success result should be printed to stdout as YAML and $? set to 0\nOn error (type(resp) == 'table' and resp.error ~= nil) result should be printed stderr and return code set to 1\n. May be we can add a new module called random.\n. What do you want to reload? We have only /etc/tarantool/instances.enabled/myapp.lua file.. \nThere is no sense calling dofile() on it.\n. - [x] Extend struct error to store an array of stack frame information ([filename, line]) \n[x] Patch luaT_call() to fill this array using lua_getinfo() code attached below\n[x] Extend Lua bindings to struct error to export traceback as a Lua table\n[x] Add the test cases using pcall() and Lua bindings to struct error\n[ ] Patch error_log() to print tracebacks\n[ ] (Complicated) Patch diag_set() to fill stack traces using BFD\n\nlua_tracebacks.diff\n. Fixed.\n. This is Lua behaviour:\n```\ntarantool> function test(...) return ... end                                                                                                                                                                                                   \n\n...\ntarantool> loadstring('a = 15; test(1); test(2); test(3)')()\n...\ntarantool> loadstring('a = 15; test(1); test(2); return test(3)')()\n\n3\n...\n```\n\nhttp://www.lua.org/pil/1.1.html\n. Fixed.\n. Raw idea: index:select({from, to}, { iterator = 'BETWEEN'} ). In progress. This feature already was implemented in 1.6.7. A test case is hard to make.\n. Tested explicitly by replication code.\n. I also vote for this feature.\n@17e I have an experimental code for that:\n```\nlocal function tomoney(str)\n    local sep = str:find(\".\", 1, true)\n    local kopecks = 0\n    if sep then\n        kopecks = str:sub(sep + 1)\n        local roubles = str:sub(1, sep - 1)\n        if #kopecks == 2 then\n            kopecks = tonumber(kopecks)\n        elseif #kopecks == 1 then\n            kopecks = tonumber(kopecks) * 10\n        elseif #kopecks == 0 then\n            kopecks = 0\n        else\n           die('Invalid amount: %s', str)\n        end\n        str = roubles\n    end\n    if #str == 0 then\n        return kopecks\n    else\n        return tonumber(str) * 100 + kopecks\n    end\nend\nlocal function frommoney(num)\n    num = 0LL + num\n    local roubles = tonumber(num / 100)\n    local kopecks = math.abs(tonumber(num % 100))\n    if roubles == 0 and num < 0 then\n        return string.format(\"-0.%02d\", kopecks)\n    end\n    return string.format(\"%d.%02d\", roubles, kopecks)\nend\n```\nI hope this example will help you.\n. 1.5 is OK and have tests for that.\nDo you mean 1.6?\n. socket.tcp_server() automatically removes old unix socket only after one event loop iteration (see tcp_server_loop function). I don't think that problem with delayed removal of unix socket file is very important for us. I'm adding a workaround to the test and closing this ticket.\n. loadcfg() already checks that value is different before invoking hook.\nI think it is possible to change sync/async mode only for newly open xlogs.\nKernel doesn't allow to change O_(D)SYNC dynamically on open descriptors.\n. Already done:\nsocket:peer() - getpeername()\nsocket:name() - getsocketname()\nI sent an email to Peter.\n. Duplicate of #640\n. This bug is fixed by a @kostja patch. A test case will be overcomplicated.\nMay I close this ticket?\n. Please merge multi-master first, I can't make review fixes\n. We need a specification for new version box.info.replication.\n. This feature break compatibility with 1.6.6 and it also depends on patches pushed to 1.7.0. \nRe-scheduled to 1.7.x.\n. Please note that ACKs from replica is not part of this ticket!\n. The first part was merged.  Relays are still not tracked.\n. This ticket is probably a breaking change (it MAY change box.info.replication() format).\n. ```\ntarantool> { status = \"bidirectional\" }\n\u2014-\n- status: bidirectional\n...\ntarantool> { status = \"follow\" }\n\u2014-\n- status: follow\n...\ntarantool> { status = \"relay\" }\n\u2014-\n- status: relay\n...\n```. I also think that any error in applier or relay should abort both.\n. It also would be nice to add hidden  upstream.socket / downstream.socket for  tests and debugging purpose:\n```\nbox.info.replication[0].upstream.socket\n\n\nfd: 6\n  name:\n    host: 1.2.3.4\n    family: AF_INET\n    type: SOCK_STREAM\n    protocol: tcp\n    port: 50806\n  peer:\n    host: 81.200.3.182\n    family: AF_INET\n    type: SOCK_STREAM\n    protocol: tcp\n    port: 80\n```\n\nOutput is the same as  in socket module.. Please note that I kept box.info.cluster.uuid and box.space._cluster names without changes, because there is no well-defined  long-term vision how all these cluster stuff will look like in 1.8.x+.\n. Code for hmac and aes is already exists in Mail.Ru Private repo.\nWe can open-source it. Please ask me for details.\n. The patch is pretty simple (after merging my previous patches) and backward compatible.\nSuitable for 1.6.7 (discussion with @kostja)\n. Reviewed by @kostja  and @alyapunov => review fixes\n. I'm waiting for comments from @alyapunov and @kostja. They wanted to review this patch.\n. I fixed this problem couple weeks ago.\n. OK!\n. => reset serializer hints on __newindex\n. I propose to add a global function hex which will make hexadecimal string from any object (like Python).\n. This code should be reviewed by @kostja\n. Fixed by 0f5c5265a2c4c6ece3d96c0290d22f599a312c40\n. Depends on replication-status #723\n. I encountered this problem on a customer installation.\n. Fixed by 1.7.4-79-ga0564b890. I can implement it.\n. I added .NULL to all serializers (msgpack, json, yaml). According to our code style conventions, all constants are named in upper case manner. Do you feel that we also need .null alias?\n. I've added .null.\n2 vs 2.0 is not a problem at all.\n. Duplicate of #786 \n. - tctl makes no sense, IMHO.\n- tarantoolctl enter uses console via unix socket. We don't have authorization on console port.\n- Auto completion for command line is nice feature \n- -le may be useful\n- Autocompletion for admin console is must have\n. I don't known how to use coeio_custom() via ffi because thread don't have lua_State,.\nPlease describe what do you want to get...\n. Discussed with @kostja => remove hot standby because it doesn't work on vinyl\n. I suggest to keep hot standby as is in 1.7.x for memtx-only instances and disable it if instance has vinyl spaces.\n. Duplicate of #786\n. At least two customers asked me how to profile Lua...\nI think we should try to port LuaJIT 2.1 profiler or update to 2.1:\nhttp://repo.or.cz/w/luajit-2.0.git/blob_plain/v2.1:/doc/ext_profiler.html\n. Test works for me.\n. I need this feature right now.\nThis is regression since 1.5.x. Please re-tag for 1.6.x.\n. it is very strange... Could you please test this bug againts vanilla LuaJIT? \n. It seems to be a broken build:\n```\nrt@freebsd:~/tarantool % ./src/tarantool \nFailed to set locale to C.UTF-8\n./src/tarantool: version 1.6.5-150-gdc14e23\ntype 'help' for interactive help\ntarantool> require('crash')\n\n\nerror: \"module 'crash' not found:\\n\\tno field package.preload['crash']\\n\\tno file\n    './crash.lua'\\n\\tno file './crash/init.lua'\\n\\tno file '/home/rt/.luarocks/share/lua/5.1/crash.lua'\\n\\tno\n    file '/home/rt/.luarocks/share/lua/5.1/crash/init.lua'\\n\\tno file '/home/rt/.luarocks/share/lua/crash.lua'\\n\\tno\n    file '/home/rt/.luarocks/share/lua/crash/init.lua'\\n\\tno file '/usr/local/share/tarantool/crash.lua'\\n\\tno\n    file '/usr/local/share/tarantool/crash/init.lua'\\n\\tno file './crash.lua'\\n\\tno\n    file '/usr/local/share/luajit-2.0.4/crash.lua'\\n\\tno file '/usr/local/share/lua/5.1/crash.lua'\\n\\tno\n    file '/usr/local/share/lua/5.1/crash/init.lua'\\n\\tno file './crash.so'\\n\\tno file\n    '/home/rt/.luarocks/lib/lua/5.1/crash.so'\\n\\tno file '/home/rt/.luarocks/lib/lua/crash.so'\\n\\tno\n    file '/usr/local/lib/tarantool/crash.so'\\n\\tno file './crash.so'\\n\\tno file '/usr/local/lib/lua/5.1/crash.so'\\n\\tno\n    file '/usr/local/lib/lua/5.1/loadall.so'\"\n...\n\ntarantool> \n```\nrt@freebsd:~/tarantool % uname -a\nFreeBSD freebsd.local 10.1-RELEASE FreeBSD 10.1-RELEASE #0 r274401: Tue Nov 11 21:02:49 UTC 2014     root@releng1.nyi.freebsd.org:/usr/obj/usr/src/sys/GENERIC  amd64\nrt@freebsd:~/tarantool % cc --version\nFreeBSD clang version 3.4.1 (tags/RELEASE_34/dot1-final 208032) 20140512\nTarget: x86_64-unknown-freebsd10.1\nThread model: posix\n. I can repeat it only with #! script:\n```\n0  0x0000000801cbe6ca in thr_kill () from /lib/libc.so.7\n1  0x0000000801d93149 in abort () from /lib/libc.so.7\n2  0x00000000004243b5 in sig_fatal_cb (signo=11) at /home/rt/tarantool/src/main.cc:211\n3  0x000000080112847a in swapcontext () from /lib/libthr.so.3\n4  0x0000000801128062 in sigaction () from /lib/libthr.so.3\n5  \n6  0x0000000801838c1e in __cxa_end_catch () from /lib/libcxxrt.so.1\n7  0x00000000004b2071 in lbox_call (L=0x1378, nargs=0, nreturns=0) at utils.h:455\n8  0x00000000004b1e0c in run_script (ap=0x803000150) at /home/rt/tarantool/src/lua/init.cc:440\n9  0x00000000004c22f7 in fiber_loop (data=0x0) at /home/rt/tarantool/src/fiber.cc:402\n10 0x00000000005bea74 in coro_init () at /home/rt/tarantool/third_party/coro/coro.c:96\n11 0x0000000000421f5c in geteuid@plt ()\n12 0x5050505050505050 in ?? ()\n13 0x5050505050505050 in ?? ()\n14 0x000000000087f698 in main_cord ()\n15 0x000000000087f698 in main_cord ()\n16 0x0000000000020000 in ?? ()\n17 0x50500005eec0ffee in ?? ()\n18 0x5050505050505050 in ?? ()\n```\n. https://github.com/nodejs/io.js/commit/b64983d77cc3ed2e4b585f3bfc8ed23802389a52\n. After fixing signals:\n```\n0  0x000000080183bc1e in __cxa_end_catch () from /lib/libcxxrt.so.1\n1  0x00000000004b3e01 in lbox_call (L=0x1378, nargs=0, nreturns=0) at utils.h:455\n2  0x00000000004b3b9c in run_script (ap=0x803000150) at /home/rt/tarantool/src/lua/init.cc:440\n3  0x00000000004c4137 in fiber_loop (data=0x0) at /home/rt/tarantool/src/fiber.cc:402\n4  0x00000000005c0974 in coro_init () at /home/rt/tarantool/third_party/coro/coro.c:96\n5  0x0000000000422554 in geteuid@plt ()\n6  0x5050505050505050 in ?? ()\n7  0x5050505050505050 in ?? ()\n8  0x0000000000882698 in main_cord ()\n9  0x0000000000882698 in main_cord ()\n```\n. Even this script crashes:\n```\n!/usr/bin/env tarantool\nerror('xxx')\n```\nI retested against vanilla LuaJIT - no problems.\n. http://www.freelists.org/post/luajit/External-unwind-is-broken-on-FreeBSD-10-x86-64\n. Temporary solution is to compile with gcc.\npkg install gcc48 works for me.\nWe support clang as well as gcc, but it seems that clang on FreeBSD has some problems.\nDo you know there is their bug tracker?\n. https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=201270\n. I already did. https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=201270\nCould you please provide some more details in that ticket?\n. It seems to be fixed in master.\nA test case added by 1c3f5a27eacb47ad977b1b2c3f25f0f02d6d1e71\n. This feature is only needed for secondary keys.\n. Why can't? I tried and it does work...\n. A add a tests case for lsn = 0.\njust replace master with replica in this test to check lsn > 0\n. Added a new test case.\n. I patched libev to use nanosecond precision in struct stat. It should be enough.\nA patch sent to upstream.\n. Still broken:\n- ./?.dylib;/Users/n.zavaritsky/.luarocks/lib/lua/5.1/?.dylib;/Users/n.zavaritsky/.luarocks/lib/lua/?.dylib;/usr/local/lib/tarantool/?.so;/usr/local/Cellar/tarantool/1.6.8-653/lib/tarantool/?.so;/usr/lib/tarantool/?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/Cellar/tarantool/1.6.8-653/lib/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;\n. Please review 6ed16af52f5a4c4fed00c63dd754442cbbabf6e9\n```\n./src/tarantool: version 1.6.8-753-geadfc3a\ntype 'help' for interactive help\ntarantool> package.cpath\n\n\n./?.dylib;/Users/roman/.luarocks/lib/lua/5.1/?.dylib;/Users/roman/.luarocks/lib/lua/?.dylib;/usr/local/lib/tarantool/?.dylib;/Users/roman/homebrew/lib/tarantool/?.dylib;/usr/lib/tarantool/?.dylib;/usr/local/lib/lua/5.1/?.dylib;/Users/roman/homebrew/lib/lua/5.1/?.dylib;/usr/lib/lua/5.1/?.dylib;\n```\n. Duplicate of #266.\n. +1 for this feature\n. @Mons wants a wrapper to execute a function in transaction:\n\nbox.txn(fun, ...) \n  box.begin()\n  local status, reason = pcall(fun, ...)\n  if not status then\n    box.rollback()\n    error(reason, 2)\n  end\n  box.commit()\n  return reason\nend. => Implement box.atomic() using the code from Mons' comment above ^^^.. 292cd479ba29cb9e28f1972f1917715291a1815e. I made an attempt to fix it.\nThe fix adds dependency to box for net.box....\n. Superseded by #1510\n. Fixed by 85281fc8cdfda4cd6d91b8e947e6f48be110173f\n. We updatded LuaJIT in 1.5.4-19-g3fe5e24.\nI suggested to update Tarantool to the latest 1.5.\n. ```\n(gdb) bt\n0  0x00007f21b41c6625 in raise () from /lib64/libc.so.6\n1  0x00007f21b41c7e05 in abort () from /lib64/libc.so.6\n2  0x000000000043dacc in sig_fatal_cb (signo=) at /usr/src/debug/tarantool-1.5.3-158-gbdee297-src/src/tarantool.cc:463\n3  \n4  0x0000000000475853 in lj_tab_newkey ()\n5  0x000000000048e78c in lj_BC_TSETS ()\n6  0x0000000000433710 in box_lua_execute (request=0x7f1bfdf41060, port=0x7f1bfdf58ee0)\nat /usr/src/debug/tarantool-1.5.3-158-gbdee297-src/src/box/box_lua.cc:1366\n\n7  0x000000000042e4b8 in request_execute (request=request@entry=0x7f1bfdf41060, txn=txn@entry=0x7f1bfdf41038, port=port@entry=0x7f1bfdf58ee0)\nat /usr/src/debug/tarantool-1.5.3-158-gbdee297-src/src/box/request.cc:263\n\n8  0x000000000042f487 in process_rw (port=0x7f1bfdf58ee0, op=22, reqdata=, reqlen=30)\nat /usr/src/debug/tarantool-1.5.3-158-gbdee297-src/src/box/box.cc:88\n\n9  0x000000000045bdc8 in iproto_reply (header=0x7f1c32fe2038, out=0x7f1bff5bbb08, callback=, port=0x7f1bfdf58ee0)\nat /usr/src/debug/tarantool-1.5.3-158-gbdee297-src/src/iproto.cc:662\n\n10 iproto_process_request (request=) at /usr/src/debug/tarantool-1.5.3-158-gbdee297-src/src/iproto.cc:687\n11 0x000000000045b891 in iproto_queue_handler(typedef __va_list_tag __va_list_tag *) (ap=)\nat /usr/src/debug/tarantool-1.5.3-158-gbdee297-src/src/iproto.cc:234\n\n12 0x000000000044b9c0 in fiber_loop (data=) at /usr/src/debug/tarantool-1.5.3-158-gbdee297-src/src/fiber.cc:383\n13 0x000000000046ea77 in coro_init () at /usr/src/debug/tarantool-1.5.3-158-gbdee297-src/third_party/coro/coro.c:95\n```\ntarantool-1.5.3-158-gbdee297\n. I uploaded coredump, binary, debug symbols and sources to /var/ftp/gh-828 on tt.\ngdb is very old and on tt prints only three first lines, try to use newer version.\n. Confirmed.\nCompile with -DCMAKE_BUILD_TYPE=RelWithDebugInfo \n. I hope I fixed this problem a long time ago....\n. Fixed in 1.6.x. I don't see any reasons to backport this fix.\n. Please try to fix this error and see what happens.. I remember that gcc 4.3 wasn't able to compile our scoped_guards. If you face with scoped guard problem after fixing row_handler please re-assign ticket to me and I will forbid gcc <= 4.6. \n. From https://github.com/tarantool/mysql/blob/master/README.md :\n```\nPrerequisites\nTarantool 1.6.5+ with header files (tarantool && tarantool-dev packages)\nMySQL 5.1 header files (libmysqlclient-dev package)\n\n```\nTarantool 1.6.5+ with header files (tarantool && tarantool-dev packages)\n(tarantool && tarantool-dev packages)\ntarantool-dev\n. May be also add schema version to responses?\n. I vote for 2. schema_id is closely connected with data in _space, _index, and _schema. It make no sense to store this value in text header of snapshot. Nobody uses alter space from IPROTO, so it is not a problem.  Current sc_version can live separately only for iterators.\n. BTW, it is also possible to add on_replace trigger which will make insert in case of local request.\n. We discussed with @unera. He needs persistent schema version to optimize re-connection to server. Please return to 2) proposal.\n. Please implement replication from in-memory queue in this ticket. \nSnapshot relaying from memory is a separate ticket.\n. Review\n. LuaJIT doesn't have JIT. This ticket is the waste of time. Please use C/C++ or even Swift/Rust to get faster code.\n. How to reproduce.\n1. Configure Tarantool with single space\nbox.cfg { listen = 3313 }\n_ = box.schema.create_space('test')\n_ = box.space.test:create_index('primary')\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\n1. Run nosqlbench with default configuration and wait couple seconds\n. :read() and :write() are not syscalls. Please take a look in implementation.\n. socket is non-blocking. :sysread() will not block event loop.\n. wakeup() is ok\nmoving bsdsocket_wdata to struct socket (see ffi) is eliminates needs for socket.waiters table.\nI need to use fiber->state rlist to do that (which breaks encapsulation of fibers module).\n. Suggested names: socket:notify() and socket:notifyall() or socket:wakeup() and socket:wakeupall().\n. Crashes on my machine:\npickle = require('pickle')\nt={}; for i=0,65536,1 do table.insert(t,pickle.pack( 'i', i)); end\n. My problem was caused by -DENABLE_VALGRIND=ON...\n. ``\ntarantool: version 1.6.5-335-ge33ac37\ntype 'help' for interactive help\ntarantool> box.cfg{}\n2015-11-13 12:40:52.010 [16519] main/101/interactive C> version 1.6.5-335-ge33ac37\n2015-11-13 12:40:52.010 [16519] main/101/interactive C> log level 5\n2015-11-13 12:40:52.010 [16519] main/101/interactive I> mapping 1073741824 bytes for a shared arena...\n2015-11-13 12:40:52.012 [16519] main/101/interactive I> initializing an empty data directory\n2015-11-13 12:40:52.022 [16519] snapshot/101/main I> creating./00000000000000000000.snap.inprogress'\n2015-11-13 12:40:52.022 [16519] snapshot/101/main I> saving snapshot `./00000000000000000000.snap.inprogress'\n2015-11-13 12:40:52.022 [16519] snapshot/101/main I> done\n2015-11-13 12:40:52.045 [16519] main/101/interactive I> ready to accept requests\n\n...\ntarantool> box.schema.user.grant('guest', 'read,write,execute', 'universe')\n2015-11-13 12:40:55.809 [16519] wal I> creating `./00000000000000000000.xlog.inprogress'\n\n...\ntarantool> box.cfg { listen = 3313 }\n2015-11-13 12:41:17.657 [16519] main/101/interactive I> binary: started\n2015-11-13 12:41:17.657 [16519] main/101/interactive I> binary: bound to 0.0.0.0:3313\n2015-11-13 12:41:17.657 [16519] main/101/interactive I> set 'listen' configuration option to '3313'\n\n...\ntarantool> require('console').connect(3313)\n2015-11-13 12:41:25.101 [16519] main/101/interactive I> connected to localhost:3313\n\n\ntrue\n...\n\nlocalhost:3313> pickle = require('pickle')\n...\nlocalhost:3313> t={}; for i=0,65536,1 do table.insert(t,pickle.pack( 'i', i)); end\n...\nlocalhost:3313> t\n Error in `tarantool: running': double free or corruption (fasttop): 0x0000000002371bc0 \nAborted\n```\nConfirmed.\n. Upstream bug https://bitbucket.org/xi/libyaml/issues/17/memory-corruption-in-emitter\n. Wednesday, June 24, 2015 12:00 PM -07:00 from bigbes notifications@github.com:\n\nMaybe we should accomodate  https://github.com/RedisLabs/memtier_benchmark.git to our needs?\n\u2014\nReply to this email directly or  view it on GitHub .\n\nLet's show that we faster than Redis even in Redis benchmark ;)\n\nWBR,\n   Roman Tsisyk roman@tarantool.org\n   http://tarantool.org/ - an efficient in-memory data store and a Lua application server\n. Discussed with @kostja: documentation will be written by @pgulutzan .\n. Default config file should have comments!\n. This task is actual - please add information about our new Docker containers.\n. https://hub.docker.com/r/tarantool/tarantool/\n. Proposed API:\n```\nvoid\ntarantoolopen_${MODULENAME}(void);\nvoid\ntarantoolclose_${MODULENAME)(void);\n```\nWhat's the syntax to flush a module?\nbox.schema.function.reload('module') ?\n. there is no more customer => wishlist\n. New customer is Platonov, re-scheduling to 1.7.x.\n. rolling feature => 1.7.3\n. => 1.7.4\n. 1.7.4-424-g96938fafb. OK, we can allow only module name as well as modulename.funcname.. Currently this package is internal. \nPlease don't add it to public documentation until we will have strong stable API.\n. Already done\n. => https://github.com/tarantool/doc/issues/17\n. net.box wasn't explicitly closed if error in console.connect(). on_disconnected trigger was only invoked after collectgarbage('collect') which destructed leaked net.box.\nIt is always better to free socket connections as soon as possible, without waiting for GC.\nI extended Andrew's fix to work both for iproto and console connection.\n. Don't need this ticket anymore. Moving to wishlist.. From #1093\n\"Why Tarantool uses so much memory?\" is the one of most popular question by our customers.\nReally, why? How to understand which subsystem is heavily utilizes memory on the production installation?\nCurrently Tarantool 1.6 totally lacks useful memory information utils.\nWe even dropped old \"show palloc\", which was last useful tool for investigating memory problems.\nLet's take a look on current tools.\nbox.runtime.info()\n- maxalloc: 4398046510080\n  used: 12582912\n...\n- maxalloc - a constant distance to a some remote galaxy.\n- used - indicates how many memory used by some internal subsystems but nobody knowns by which one.\nI don't think that our users want to grep our sources to understand that runtime means a special runtime arena for non-data allocations. Moreover, 99.99999% of our current and potential customers don't know WTF is arena. I think that our users should not care about details of Tarantool internal structure..\nbox.slab.info()\n```\n\nquota_used: 8388608\n  arena_used_ratio: 0.8%\n  items_used_ratio: 1.9%\n  arena_size: 2325384\n  quota_size: 1073741824\n  arena_used: 1102088\n```\n\nOhh, arena again. Anyway, let's take a look on arena_size, arena_used and arena_used_ratio:\n- arena_size is 2325384\n- arena_used is 1102088\n-  arena_used_ratio is 0.8%\nArena is utilized by 1102088 / 2325384 = ~ 47%. But why arena_used_ratio is 0.8% and not 47%?\nLet's move on to items. WTF is items? Tuples? Spaces? Whatever?\nNext. What is items_used_ratio?\nquota_size and quota_used is mostly OK. I'm just curious, how to change quota_size?\nI found nothing about quota on http://tarantool.org/doc/singlehtml.html\nslabs is mostly OK, except my note about items above.\nbox.fiber.info()\n```\n\n101:\n    memory:\n      total: 65760\n      used: 0\n    fid: 101\n    name: interactive\n    csw: 6\n```\n\nMostly OK. How to understand who used this memory?\nspace.space.index[x]:bsize()\n```\ntarantool> box.space._space.index[0]:bsize()\n\n\n49152\n...\n```\n\nOK. I think that users are also interested in total memory usage by space (e.g. space:bsize()).\nWhat should be done\n\nAdd a new box.memory.info():\n\n```\n- tx: -- per each cord\n    - indexes: xxx\n    - tuples: xxx\n    - fibers:  xxx-- including fiber stack and fiber->gc\n    - sessions: xx\n    - lua: xx\n    - malloc: xxx\n    - total:\n       - allocated: xxx\n       - used: xxx\n       - fragmentation: xx%\nassert(sum(categories) == used)\n\n\niproto:\n\ninput_buffers: xxx\noutput_buffers: xxx\nconnections: xxx\ncbus: xxxx\nfibers:  xxx-- including fiber stack and fiber->gc\nmalloc: xxx \ntotal:\nallocated: xxx\nused: xxx\nfragmentation: xx%\n\n\n\nwal:\n\nfibers:  xxx-- including fiber stack and fiber->gc\ntotal:\nallocated: xxx\nused: xxx\nfragmentation: xx%\n\n\n\nsophia_merger:\n\nmalloc: xxx\ntotal:\nallocated: xxx\nused: xxx\nfragmentation: xx%\n\n\n\ntotal:\n\nallocated: xxx\nused: xxx\nfragmentation: xxx\n\n\n\nassert(used == RSS in top(1))\nassert(allocated == VIRT in top(1))\n```\nTake a look on malloc_stats(3) for inspiration:\ntarantool> ffi.C.malloc_stats()\nArena 0:\nsystem bytes     =     860160\nin use bytes     =     714704\nArena 1:\nsystem bytes     =     135168\nin use bytes     =     134736\nTotal (incl. mmap):\nsystem bytes     =     995328\nin use bytes     =     849440\nmax mmap regions =          1\nmax mmap bytes   =     163840\n- Fix incorrect (mostly random) numbers in box.slab.info()\n- Remove box.runtime.info() as totally confusing and uninformative tool.\n- Add space:bsize()\nI understand that this ticket is very hard.\nPlease implement basic structure of box.memory.info() and then add sections step by step.\nSection names provided as for example.\n. Related ticket in libsmall - slab_get() bypasses quota accounting\n. Moving to 1.7.6. a) This ticket is not a breaking change\nb) Doesn't change internals significally\nc) Needed for almost all customers\n=> Please move back to 1.7.7\n. @locker it would be nice to add box.info.memory().tx = fiber.gc + struct txn + vinyl.tx\nbox.info.memory().fiber is useless, fiber->gc is used by box/txn and should be accounted as tx.\n. What is about schema objects, e.g. struct space, struct user? We also need to track all other allocation somewhere.  Anyway, I accept  box.info.memory() proposal.  All other statistics can be imlemented later.\nImplementation ideas: add kind parameter to slab_get() to track memory users.\n. @kostja ^^^. ```\ntarantool> box.info.memory()\n\n\nnet: 98304\n  data: 6288\n  tx: 393216\n  lua: 1307017\n  index: 1097728\n...\n. Works for me.. 1.7.6-123-g4240860fd. Duplicate of #916\n. Requires significant changes in box_init() process.\nProbably for 1.7.x, definitely not for 1.6.8.\nSee also #1213\n. It doesn't:\ntarantool\ntarantool: version 1.7.2-137-ge3069be\ntype 'help' for interactive help\ntarantool> box.cfg { slab_alloc_arena = 100500, background = true, logger = 'tarantool.log', pid_file='tarantool.pid' }\nroman@desktop:~$ <!-- TERMINAL IS BROKEN\nroman@desktop:~$ reset\nroman@desktop:~$ cat tarantool.log \n2016-11-22 11:11:41.059 [25639] main/101/interactive C> version 1.7.2-137-ge3069be\n2016-11-22 11:11:41.059 [25639] main/101/interactive C> log level 5\n2016-11-22 11:11:41.059 [25639] main/101/interactive I> mapping 107911053312000 bytes for tuple arena...\n2016-11-22 11:11:41.059 [25639] main/101/interactive F> failed to preallocate 107911053312000 bytes: Cannot allocate memory, check option 'slab_alloc_arena' in box.cfg(..)\n2016-11-22 11:11:41.059 [25639] main/101/interactive F> failed to preallocate 107911053312000 bytes: Cannot allocate memory, check option 'slab_alloc_arena' in box.cfg(..)\n\n```\nPlease note that it is not a problem of tarantooctl, it is problem of daemon itself.\nI propose to fix this problem via NOTIFY_SOCKET (#1923) on systemd-enabled systemd and then move this ticket to wishlist for all other systems.\n. Done. ```\ntarantool> require('uri').parse('unix:/tmp/socket.socket') \n\n\nhost: unix\n  scheme: unix\n  path: /tmp/socket.socket\n...\n```\n\nIs OK. Scheme is really \"unix\" here. \n. This task is related to #1534, moving to 1.7.x.\n. Discussed today: change str to string, keep str until 1.8.\n. This fix requires significant changes in privileges structure.\nRe-scheduling to 1.6.9, may be even for 1.7.x.\n. => add create and drop privileges in addition to read, write, execute.\n . Please move to the next major release. See also #1889\n. 4. Use a dedicated buffer for each response\n. What is wrong with  /usr/share/lua?\n/usr/share/tarantool/?.lua;\n/usr/share/tarantool/?/init.lua;\n./?.lua;\n/usr/local/share/luajit-2.0.4/?.lua;\n/usr/local/share/lua/5.1/?.lua;\n/usr/local/share/lua/5.1/?/init.lua 11\n. I hope that this problem is already fixed. Can I close this ticket?\n. The following sequence works for me:\ntarantool1> box.cfg { listen = 3313 }\ntarantool2> box.cfg { listen = 3314, replication_source = 3313 }\ntarantool3> box.cfg { listen = 3315, replication_source = 3314 }\ntarantool1> box.cfg { replication_source = 3315 }\ntarantool1> box.space._schema:insert({'hello'}. BTW, autobootstrap doesn't work in the following dead loop:\ntarantool1> box.cfg { listen = 3313, replication_source = 3315 }\ntarantool2> box.cfg { listen = 3314, replication_source = 3313 }\ntarantool3> box.cfg { listen = 3315, replication_source = 3314 }\n. ok, the described scheme above is not supported by autobootstrap. This problem will be fixed by introducing leader election via raft in 1.8 or later versions.\n. Moved to 1.8. https://tracker.debian.org/pkg/tarantool:\ntarantool 1.6.7.588.g76bbd9c-1 MIGRATED to testing\nFixed\n. Fixed by @bigbes \n. Please move to 1.7.8. Blocked by #1239 - can't create a proper test case.\n. Already fixed, but there is no test case.\n. replication/status.test.lua after 1dbef1c6780a091a96e9a447399d9f1d4ea4e59d effectively checks this feature for JOIN. SUBSCRIBE is still doesn't wait. Can I close this ticket?\n. Open questions about initial SUBSCRIBE from @GeorgyKirichenko:\n\nWhat to do when invalid REPLICASET UUID is received\nHow to handle network errors\nHow to handle ClientErrors (e.g. DuplicateKeys)\nWhat is about timeout?\n\n=> Complicated, moved to 1.7.5\n. Fixed by #1647\n. Blocked by #1261 and #1285 . #2652 is done, this ticket is not blocked anymore.\n. 1.7.5-144-g5f1a74c71. src/trivia/tarantool.h:98: warning: unable to resolve link to `say_level' for \\link command\nsrc/trivia/tarantool.h:760: warning: unable to resolve link to `iterator_type' for \\link command\nsrc/trivia/tarantool.h:891: warning: unable to resolve link to `iterator_type' for \\link command\nsrc/trivia/tarantool.h:969: warning: unable to resolve link to `box_error_code' for \\link command\nThere warnings are caused by\n```\ncommit 0b17f366a0aae82bd63791c76b9b3b887588f392\nAuthor: Konstantin Osipov kostja@tarantool.org\nDate:   Thu Sep 10 21:10:37 2015 +0300\nmodule api docs: remove double title, fix spelling\n\ndiff --git a/src/trivia/tarantool_header.h b/src/trivia/tarantool_header.h\nindex 2223de9..3a71302 100644\n--- a/src/trivia/tarantool_header.h\n+++ b/src/trivia/tarantool_header.h\n@@ -8,13 +8,7 @@\n #include \n #include  / ssize_t /\n-\n-/\n- * \\file\n- * Tarantool Module API\n- */\n-\n-/ Extern modificator for all public functions /\n+/ Extern modifier for all public functions /\n```\n\\file is mandatory here.\n. from @kostja \nreading sources... [100%] singlehtml\n/home/kostja/work/tarantool/doc/sphinx/reference/capi.rst:21: WARNING: Type must be either just a name or a typedef-like declaration.\nJust a name error: Invalid definition: Expected identifier in nested name, got keyword: void [error at 4]\nvoid(* sayfunc_t)(int level, const char *filename, int line, const char *error, const char *format,...)\n\u2014--^\nTypedef-like expression error: If declId, parameters, and qualifiers {\nInvalid definition: Expected identifier in nested name. [error at 4]\nvoid(* sayfunc_t)(int level, const char *filename, int line, const char *error, const char *format,...)\n\u2014--^\n} else If parenthesis in noptr-declarator {\nIf declId, parameters, and qualifiers {\nInvalid definition: Expecting \",\" or \")\" in parameters_and_qualifiers, got \"l\". [error at 22]\nvoid(* sayfunc_t)(int level, const char *filename, int line, const char *error, const char *format,...)\n\u2014--------------------^\n} else If parenthesis in noptr-declarator {\nInvalid definition: Expected ')' in \"( ptr-declarator )\" [error at 18]\nvoid(* sayfunc_t)(int level, const char *filename, int line, const char *error, const char *format,...)\n\u2014----------------^\n}\n}\n/home/kostja/work/tarantool/doc/sphinx/reference/capi.rst:21: WARNING: Error when parsing function declaration:\nIf no return type {\nInvalid definition: Expecting \"(\" in parameters_and_qualifiers. [error at 8]\nssize_t coio_call(ssize_t(*func)(va_list ap), ...)\n\u2014------^\n} else if return type {\nIf declId, parameters, and qualifiers {\nInvalid definition: Expected identifier in nested name. [error at 26]\nssize_t coio_call(ssize_t(*func)(va_list ap), ...)\n\u2014------------------------^\n} else If parenthesis in noptr-declarator {\nIf declId, parameters, and qualifiers {\nInvalid definition: Expecting \",\" or \")\" in parameters_and_qualifiers, got \"a\". [error at 41]\nssize_t coio_call(ssize_t(*func)(va_list ap), ...)\n\u2014---------------------------------------^\n} else If parenthesis in noptr-declarator {\nInvalid definition: Expected ')' in \"( ptr-declarator )\" [error at 33]\nssize_t coio_call(ssize_t(*func)(va_list ap), ...)\n\u2014-------------------------------^\n}\n}\n}\n. I tested doxygen 1.7.6 (precise), 1.8.6 (trusty), 1.8.8 (jessie), 1.8.9 (sid) - the problem didn't reproduced.\nI think your local version of Doxygen is buggy.\nPlease show me apt-cache policy doxygen, apt-cache policy python-breathe\n. Fixed by @kostja \n. All browsers support WebSocket. Even M$ IE. \nhttp://caniuse.com/#search=websocket\n. > Native WebSocket\n\nWebSocket is the fastest and best transport protocol, it supports cross-domain connections out of the box. Unfortunately it is not yet widely supported by browsers. Also, some browsers may have problems with proxies (for example, Firefox WebSocket implementation won't work through the majority of the proxies). It's going to take some time before the browser vendors agree on the protocol and proxy handling.\n\nSorry, I don't see any proof for that.\nThe author need a reason to justify his NIH syndrome.\n. OK, Let's discuss IPROTO over HTTP/2.\n. Fixed.\n. Why this API is not public Lua?\n. Added bool box_txn() to C API.\n. vspace.index[x]:len() wasn't implemented because it has O(N) complexity...\n. This fix requires copy-pasting of 100 lines of code from https://github.com/tarantool/tarantool/blob/1.6/src/box/index.cc#L160-L245\n@kostja please approve \n. I will be a copy-paste with index_str[index->type] replaced with space name.\n. 1) Close with WON'T FIX (will be done by default after 14 days)\n2) Copy-paste 100 lines of code from index.cc to sysview_index.cc (with replacing index_str[index->type] to \"sysview\")\n. I don't want to copy a half of class Index just to fix the single error message.\nI suggest to close this ticket as non important.... \n. OK\n. I introduced some new pattern which hasn't been used before. I hope you will like it.\nreview => @alyapunov\n. - Introduce new error codes: ER_INDEX_METHOD, ER_SPACE_METHOD, ER_ENGINE_FEATURE\n- Add index type to ER_INDEX_METHOD\n. Fixed.\n. > \"file:/path/to/file\" \u2014 log to file;\n\n\"pipe:/path/to/executable [param1 ...]\" \u2014 log to a helper process via a pipe;\n\"syslog:[key=value[,key=value...]]\" \u2014 log to syslog.\nThe legacy logger syntax is retained for compatibility. The legacy syntax will be dropped in a future release.\n\nPlease keep current syntax - logging to file is most common case.\n\nThe syntax is \"syslog:\" followed by an optional comma separated key=value list. The folowing keys are defined:\nidentity=... \u2014 a string prepended to every syslog message (default: tarantool);\n  facility=... \u2014 syslog facility (auth, authpriv, cron, daemon, ftp, kern, lpr, mail, news, security, syslog, user, uucp, local0 ... local7, default: user).\n\nWhy not to use Lua tables instead of this microlanguage?\nlogger = \"filename\";\nlogger = \"|pipe\";\nlogger = {\n    type = \"syslog\";\n    identity =  \"xxx\";\n    facility = \"yyy\";\n}\nlogger = {\n    type = \"file\";\n    path = \"/var/log/blabla\";\n}\nlogger = {\n    type = \"subprocess\";\n    path = \"/usr/bin/logcat\";\n    pass_signals = false; -- just for example\n}\n. A breaking change, should be done ASAP or moved to 1.8/2.0.\n. Moving cfg changes to 1.8\n. ## Proposed API\n```\n/\n * Fiber-friendly version of poll(2)\n * Easy to implement using libev, more flexible than bsdsocket_iowait.\n /\nint\ntnt_poll(struct pollfd *fd, nfds_t nfds, int timeout);\n/\n * Shortcut for tnt_poll()\n /\nint\ntnt_readable(int fd);\n/\n * Shortcut for tnt_poll()\n /\nint\ntnt_writable(int fd);\n/\n * Fiber-friendly version of getaddrinfo(3).\n * \\sa getaddrinfo().\n * NOTE: already in public API, just rename frm coio_getaddrinfo to tnt_\n * NOTE: Add support for host = \"unix/\" like in Lua to simplify the code.\n /\nint\ntnt_getaddrinfo(const char host, const char port,\n                const struct addrinfo hints, struct addrinfo res,\n                double timeout);\n/\n * Connect to remote server.\n * Lua: socket.tcp_connect().\n \n * \\return fd of connection\n /\nint\ntnt_client(struct addrinfo *connect_addr, double timeout);\n/\n * \\return fd of acceptor\n * Lua: socket.tcp_server().\n /\nint\ntnt_server(struct addrinfo *listen_addr, double timeout);\n```\nQA\nQ: Where is read/write/connect/close and other functions?\nA: Just use berkeley sockets. Berkeley sockets are well-known industrial standard.\nI don't see any reason to re-invet the wheel.\nQ: Why there is no coio_readahead()/coio_readn()/coio_readw()\nA: Because C doesn't have C++ exception. Since you always need to check\nresult of read(2)/write(2) for -1, you can also check returned size.\nPlease take a look on bsdsocket code, we don't use bsdsocket:read() and\nbsdsocket:write() even in Lua.\nQ: Why there is no functions to work with ibuf/obuf.\nA: Because I don't want to force developers to use our home-made\nbuffers. It is always possible to connect any buffer to berkeley sockets\nusing char *, size or struct iov. Let's discuss about that after adding ibuf/obuf to public API.\nQ: Can I create socket without using tnt_client()/tnt_server() functions\nA: Yes, just use socket(2) and set O_NONBLOCK flag.\nQ: Why tnt_poll()?\nA: Because Tarantool have own event-loop under the hood.\ntnt_poll() actally uses libev which uses epoll in Linux.\nQ: Should I check read(2)/write(2) for EWOULDBLOCK/EAGAIN/EINTR.\nA: You should, as usual with berkeley sockets.\nQ: Can I wake up fiber in tnt_poll()?\nA: You can with fiber_wakeup() (non public right now). tnt_poll() will return ETIMEOUT or EINTR for that case (TBD).\nQ: How to wait simulatensly for socket event and fiber_channel event?\nA: Probably tnt_poll can be extended to support channels too.\nI have no idea how to do that right now, but I think that we can always\nadd a new function for that (say, tnt_epoll()).\n. Exported coio_wait() only.\n. I have made a branch which fixes this problem: remove-tx-vclock \n. This problem will be fixed by #1865.. @kostja I planned to use vclock from WAL for box.info.vclock() in order to fix this problem. Lately we decided to use dirty replicaset_vclock for box.info.vclock(). How is this bug supposed to be fixed? Can I close it with \"wontfix\"?\n. +1\n. Fixed\n. I think this problem can be fixed by adding transaction boundary markers to xrow header.\n. Please add comments to /etc/default/tarantool and close the ticket.\n. I'm touching this file right now.\n. - log.cfg { level = } should accept strings instead of number (e.g. level = 'verbose').\n. Still not fixed.\n. This problem has been fixed as part of #1062. See 70e6e55322b6a11c8212e1d4cd6dd9c986aff9fe. Fixed\n. Potential pitfall: replicas should iterate over connections during JOIN.\nCurrent implementation was n fibers that tries to do JOIN in parallel.\n. Epic fail - UUID doesn't fit to greeting.\n```\n\n\n\n63 - len('Tarantool 1.6.7-194-g8f1b153 (Lua console)')\n21\n```\n. My branch proably should work after rebasing on the latest 1.7.x.\nI need time to try.\n. Blocked by #1114 \n\n\n\nCurrent implementation has broken box.once() because replica doesn't wait for xlogs in JOIN:\nbox.cfg({\n    listen = replicauri(INSTANCE_ID);\n    log_level = 7;\n    replication_source = {\n        replicauri(1);\n        replicauri(2);\n        replicauri(3);\n    };\n})\nbox.once(\"bootstrap\", function()\n    box.schema.user.grant('guest','read,write,execute','universe')\n    box.schema.space.create('test')\n    box.space.test:create_index('primary')\nend)\n. Fixed by 1.7.0-795-g70e6e55\n. This patch will fix #1051 - Wal_write_to_disk should stop using ftruncate\n. Anton also had to change rowreader to use mempool instead for fiber->gc.\n. This ticket require new options in box.cfg(). Otherwise there is no way to make a test case.\nPlease move it back to 1.7.6.. 1.7.4-473-ge3c5fde4b. Fixed by 0d49c28376b354e901711415619b061f079dc007\n. Wow, does travis support mac?\n. This bug is a duplicate of #999.\nKostja'a comment was about #1101.\n. Discussed with @kostja.  Nov 13, 2015 comment is a mistake. This ticket is similar to #999, but for 1.6.x and should be fixed in the different way:\nbox.cfg{}/box_init() should wait for LSN returned by SUBSCRIBE (see #691) before exiting to the caller.\nUnfortunately, required synchronization primitives for applier were pushed to 1.7 and won't be ported back to 1.6.8. Please try find a primitive workaround to wait for LSN in box_init(). \n. Fixed in 1.6.8-396-g32ff24d\n. Already implemented in 1.7.x.\n. Hi @pgulutzan, this behavior is correct. UPSERT is delayed operation. Phia applies UPSERTs when dumps memory structures to disk or when select() requests upserted key. Since this operation is delayed, there is no way to handle errors properly. Tarantool logs error message and ignores request.\n. > the appropriate number of times to report that fact is: once?\nI agree. Sorry for misunderstanding.\nI move this problem to a new #1571 ticket. \"switch eio thread pool to cords\" task is over.\n. See also #748 \n. Already fixed by upstream\n```\ncommit 519ef0cba7ebceb99e727da9655692d137854188\nAuthor: Mike Pall \nDate:   Tue Jul 9 17:25:05 2013 +0200\nAdd support for multilib distro builds.\n\n```\nhttps://github.com/LuaJIT/LuaJIT/commit/519ef0cba7ebceb99e727da9655692d137854188\nPlease add proper make options to our cmake/luajit.cmake.\n. Oh my bad, this problem is not like #1180.\n. Duplicate of #934\n. reviewed by @mejedi  => review fixes\n. Fails on Travis:\nhttps://travis-ci.org/tarantool/tarantool/jobs/106685538#L2984-L3006\n. Please also add a test case when you have only one descriptor available.\n. Fixed by upgrading LuaJIT to v2.1 and applying patch from https://github.com/LuaJIT/LuaJIT/issues/103. Thanks @mraleph for the fix in upstream.\n. This problem can be caused by missing box_txn_commit() / box_txn_rollback() in the store procedure code. Tarantool automatically rolls back uncommitted transaction at the end of CALL function.\n. Is not a bug. I added stored procedure name to \"a transaction is active at CALL return\" warning to simplify search for missing box.commit() in stored procedure code.\n. Confirmed.\n. Fixed in 1.6.7-257-gba82c62\n. Fixed by  a86cf012619a36f819edca5f1741a87e66a86926 and 168663df8c2f21567a20a6855e7ae757e74a160c (on branch sophia-integration). Please close after merging to upstream.\n. Discussed on-site. Topic starter wants an explicit method in Lua iterators to free memory, e.g. iterator:close() or iterator:recycle(). I agree that each Lua userdata/cdata should have such method to clean resources before waiting for unpredictable GC. \n. OMG, iterator->close() was removed by b5e873073e4c6c42bad1dcbe815c502eddd80d31.\nCould you please cleanup sophia resources just before returning NULL (=end of data) from iterator->next? \nstruct tuple *\nsophia_iterator_next(struct iterator *ptr)\n{\n    assert(ptr->next == sophia_iterator_next);\n        ....\n    obj = fiber_get_key(fiber(), FIBER_KEY_MSG);\n    if (obj == NULL)\n                /* No more data in iterator, cleanup Sophia resources here */\n        return NULL;\nThis workaround should help in the most common cases\n. unit/rtree_multidim.test                                        [ fail ]\nTest failed! Result content mismatch:\n--- unit/rtree_multidim.result  Tue Feb 16 08:20:00 2016\n+++ unit/rtree_multidim.reject  Fri Feb 19 13:46:21 2016\n@@ -1,14 +1,14 @@\n    *** rand_test ***\n-   DIMENSION: 1, page size: 512, max fill: 21\n+   DIMENSION: 1, page size: 512, max fill: 25\n    *** rand_test: done ***\n    *** rand_test ***\n-   DIMENSION: 2, page size: 1024, max fill: 25\n+   DIMENSION: 2, page size: 1024, max fill: 28\n    *** rand_test: done ***\n    *** rand_test ***\n-   DIMENSION: 3, page size: 1024, max fill: 18\n+   DIMENSION: 3, page size: 1024, max fill: 19\n    *** rand_test: done ***\n    *** rand_test ***\n-   DIMENSION: 8, page size: 4096, max fill: 30\n+   DIMENSION: 8, page size: 4096, max fill: 31\n    *** rand_test: done ***\n    *** rand_test ***\n    DIMENSION: 16, page size: 8192, max fill: 31\nFatal error: Failed to run test unit/rtree_multidim.test: wrong test output. Execution aborted.\n[INFO/MainProcess] process shutting down\nRPM build errors:\n+ cd tarantool-1.6.8.508\n+ CFLAGS='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m32 -march=i686 -mtune=atom -fasynchronous-unwind-tables'\n+ export CFLAGS\n+ CXXFLAGS='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m32 -march=i686 -mtune=atom -fasynchronous-unwind-tables'\n+ export CXXFLAGS\n+ FFLAGS='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m32 -march=i686 -mtune=atom -fasynchronous-unwind-tables -I/usr/lib/gfortran/modules'\n+ export FFLAGS\n+ FCFLAGS='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m32 -march=i686 -mtune=atom -fasynchronous-unwind-tables -I/usr/lib/gfortran/modules'\n+ export FCFLAGS\n+ LDFLAGS='-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld'\n+ export LDFLAGS\n+ /usr/bin/cmake -DCMAKE_C_FLAGS_RELEASE:STRING=-DNDEBUG -DCMAKE_CXX_FLAGS_RELEASE:STRING=-DNDEBUG -DCMAKE_Fortran_FLAGS_RELEASE:STRING=-DNDEBUG -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_INSTALL_PREFIX:PATH=/usr -DINCLUDE_INSTALL_DIR:PATH=/usr/include -DLIB_INSTALL_DIR:PATH=/usr/lib -DSYSCONF_INSTALL_DIR:PATH=/etc -DSHARE_INSTALL_PREFIX:PATH=/usr/share -DBUILD_SHARED_LIBS:BOOL=ON . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_LOCALSTATEDIR:PATH=/var -DCMAKE_INSTALL_SYSCONFDIR:PATH=/etc -DENABLE_BUNDLED_LIBYAML:BOOL=OFF -DENABLE_BUNDLED_MSGPUCK:BOOL=OFF -DENABLE_BACKTRACE:BOOL=OFF -DWITH_SYSTEMD:BOOL=ON -DSYSTEMD_UNIT_DIR:PATH=/usr/lib/systemd/system -DSYSTEMD_TMPFILES_DIR:PATH=/usr/lib/tmpfiles.d -DENABLE_DIST:BOOL=ON\n-- The C compiler identification is GNU 6.0.0\n-- The CXX compiler identification is GNU 6.0.0\nhttps://kojipkgs.fedoraproject.org//work/tasks/8489/13048489/build.log\n. Implemented by 1.7.0-781-g8211560\n. OK.\n. => box.info.cluster.uuid should contain tt_uuid cluster_id from cluster.h\nOne-liner fix.\n. dpkg automatically restarts daemons on upgrade.\nAre you sure that we should fix that?\n. I fixed this problem for systemd via #1264 .\n. I discussed with @unera.\nTarantool packages for Debian/Ubuntu have all init scripts in tarantool-common subpackage.\nAn upgrade of  main package (tarantool) doesn't lead to restart. \nLet's check. I have a running Tarantool instance:\ntaranto+  2014  0.6  0.0 1330080 7944 ?        Ssl  08:26   0:00 tarantool example.lua <running>\nA new version is available for my sid:\n```\napt-cache policy tarantool\napt-cache policy tarantool\ntarantool:\n  Installed: 1.6.7.551.ga5bafc5-1\n  Candidate: 1.6.7.588.g76bbd9c-1\n  Version table:\n     1.6.8.396.g32ff24d~sid-amd64-1 500\n        500 http://tarantool.org/dist/1.6/debian sid/main amd64 Packages\n     1.6.7.588.g76bbd9c-1 990\n        990 http://ftp.ru.debian.org/debian stretch/main amd64 Packages\n        500 http://ftp.ru.debian.org/debian sid/main amd64 Packages\n *** 1.6.7.551.ga5bafc5-1 100\n        100 /var/lib/dpkg/status\n```\nI'm updating Tarantool using apt-get install tarantool:\n```\napt-get install tarantool\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nThe following additional packages will be installed:\n  tarantool-dev\nThe following packages will be upgraded:\n  tarantool tarantool-dev\n2 upgraded, 0 newly installed, 0 to remove and 412 not upgraded.\nNeed to get 2 958 kB of archives.\nAfter this operation, 519 kB disk space will be freed.\nDo you want to continue? [Y/n] Y\nGet:1 http://ftp.ru.debian.org/debian stretch/main amd64 tarantool-dev amd64 1.6.7.588.g76bbd9c-1 [26,1 kB]\nGet:2 http://ftp.ru.debian.org/debian stretch/main amd64 tarantool amd64 1.6.7.588.g76bbd9c-1 [2 932 kB]\nFetched 2 958 kB in 0s (5 608 kB/s) \nReading changelogs... Done\n(Reading database ... 275748 files and directories currently installed.)\nPreparing to unpack .../tarantool-dev_1.6.7.588.g76bbd9c-1_amd64.deb ...\nUnpacking tarantool-dev (1.6.7.588.g76bbd9c-1) over (1.6.7.551.ga5bafc5-1) ...\nPreparing to unpack .../tarantool_1.6.7.588.g76bbd9c-1_amd64.deb ...\nUnpacking tarantool (1.6.7.588.g76bbd9c-1) over (1.6.7.551.ga5bafc5-1) ...\nProcessing triggers for man-db (2.7.5-1) ...\nSetting up tarantool (1.6.7.588.g76bbd9c-1) ...\nSetting up tarantool-dev (1.6.7.588.g76bbd9c-1) .\n```\nTarantool has been updated without restart:\ntaranto+  2014  0.6  0.0 1330080 7944 ?        Ssl  08:26   0:03 tarantool example.lua <running>\napt-get upgrade, obviously, will restart Tarantool as well as MySQL, PostgreSQL, cron, syslog, dbus and other daemons on your box.  \nDebian automatically starts new daemons after install. Debian automatically restarts daemons on upgrade. It is a Debian way. That was a reason @unera extracted init script into a separate  tarantool-common package :\n```\napt-cache search \"-common$\"|wc -l\n592\n```\nIt is possible to freeze current version of tarantool-common to prevent upgrades:\napt-mark hold tarantool\nNothing more can be done. Please use apt-get install tarantool to hold tarantool-common package. We follow best practices of distributions rather than re-invent the wheel.\nSee also #1120\n. RPM packages with sysvinit scripts also don't restart Tarantool on upgrade:\n[root@ade7eead564c instances.enabled]# ps axuf\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroman        1  0.0  0.0 108356  3076 ?        Ss   06:44   0:00 /bin/bash\nroot         8  0.0  0.0 168968  4724 ?        S    06:44   0:00 sudo -s\nroot         9  0.0  0.0 108360  3108 ?        S    06:44   0:00  \\_ /bin/bash\nroot       146  0.0  0.0 110208  2236 ?        R+   06:46   0:00      \\_ ps axuf\n499        133 26.0  0.0 1437660 7932 ?        Ssl  06:46   0:00 tarantool example.lua <running>\n```\n[root@ade7eead564c instances.enabled]# yum reinstall tarantool \nLoaded plugins: fastestmirror\nSetting up Reinstall Process\nLoading mirror speeds from cached hostfile\n * base: mirror.logol.ru\n * extras: mirror.corbina.net\n * updates: mirror.corbina.net\nResolving Dependencies\n--> Running transaction check\n---> Package tarantool.x86_64 0:1.6.7-463 will be reinstalled\n--> Finished Dependency Resolution\nDependencies Resolved\n===============================================================================================================================================================\n Package                               Arch                               Version                                  Repository                             Size\n===============================================================================================================================================================\nReinstalling:\n tarantool                             x86_64                             1.6.7-463                                tarantool                             2.9 M\nTransaction Summary\nReinstall     1 Package(s)\nTotal download size: 2.9 M\nInstalled size: 9.9 M\nIs this ok [y/N]: Y\nDownloading Packages:\ntarantool-1.6.7-463.x86_64.rpm                                                                                                          | 2.9 MB     00:00   \nRunning rpm_check_debug\nRunning Transaction Test\nTransaction Test Succeeded\nRunning Transaction\n  Installing : tarantool-1.6.7-463.x86_64                                                                                                                  1/1 \n  Verifying  : tarantool-1.6.7-463.x86_64                                                                                                                  1/1 \nInstalled:\n  tarantool.x86_64 0:1.6.7-463                                                                                                                                 \nComplete!\n```\n[root@ade7eead564c instances.enabled]# ps axuf|grep example\nroot       155  0.0  0.0 103360  2080 ?        S+   06:48   0:00      \\_ grep example\n499        133  1.2  0.0 1437660 7932 ?        Ssl  06:46   0:01 tarantool example.lua <running>\ntarantool-common:\n```\n[root@ade7eead564c instances.enabled]# yum reinstall tarantool-common \nLoaded plugins: fastestmirror\nSetting up Reinstall Process\nLoading mirror speeds from cached hostfile\n * base: mirror.logol.ru\n * extras: mirror.corbina.net\n * updates: mirror.corbina.net\nResolving Dependencies\n--> Running transaction check\n---> Package tarantool-common.noarch 0:1.6.7-463 will be reinstalled\n--> Finished Dependency Resolution\nDependencies Resolved\n===============================================================================================================================================================\n Package                                     Arch                              Version                              Repository                            Size\n===============================================================================================================================================================\nReinstalling:\n tarantool-common                            noarch                            1.6.7-463                            tarantool                             14 k\nTransaction Summary\nReinstall     1 Package(s)\nTotal download size: 14 k\nInstalled size: 27 k\nIs this ok [y/N]: y\nDownloading Packages:\ntarantool-common-1.6.7-463.noarch.rpm                                                                                                   |  14 kB     00:00   \nRunning rpm_check_debug\nRunning Transaction Test\nTransaction Test Succeeded\nRunning Transaction\n  Installing : tarantool-common-1.6.7-463.noarch                                                                                                           1/1 \ntarantool: Starting instances\n/usr/bin/tarantoolctl: Found example.lua in /etc/tarantool/instances.enabled\n/usr/bin/tarantoolctl: Starting instance...\n/usr/bin/tarantoolctl: the daemon is already running: PID 133\n  Verifying  : tarantool-common-1.6.7-463.noarch                                                                                                           1/1 \nInstalled:\n  tarantool-common.noarch 0:1.6.7-463                                                                                                                          \nComplete!\n```\n[root@ade7eead564c instances.enabled]# ps axuf\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroman        1  0.0  0.0 108356  3076 ?        Ss   06:44   0:00 /bin/bash\nroot         8  0.0  0.0 168968  4724 ?        S    06:44   0:00 sudo -s\nroot         9  0.0  0.0 108360  3108 ?        S    06:44   0:00  \\_ /bin/bash\nroot       186  0.0  0.0 110212  2292 ?        R+   06:50   0:00      \\_ ps axuf\n499        133  0.8  0.0 1437660 7932 ?        Ssl  06:46   0:02 tarantool example.lua <running>\n. Actually nothing to fix, closing this ticket.\n. > tarantool-common should be norach, arechitecture=all\nI fixed  that.\n\nWe should not build a new tarantool-common package on each push into tarantool tree.\n\nYou have to create a new source package to do that (=new spec file). \nWhat do you want to achieve?  It is possible to not restart daemons on upgrade.\nBTW, I think that tarantool-common is useless. It was copied from postgresql-common in Debian, but we actually don't support multiple versions of tarantool on the same system as it was done for postgres.\n. Ahh, I see #1119. \n. Own versioning requires  a new source package (=new spec file). \nProbably we need to merge tarantool-common into tarantool.\nThis ticket won't fix, sorry.\n. Detailed explanation:\n- Own versioning requires a new source package =>\n- A new source package requires a new debian/ folder =>\n- A new debian/ folder should be placed at the root directory of git repo for buildbots =>\n- Init scripts, tarantoolctl, logrotate, systemd configuration and so on should be extracted from the main git repo into a some new git repo =>\n- This change break RPM, homebrew, FreeBSD and other packages =>\n- Release engineering process become so much overcomplicated\n- I will have to add  some more Conflicts to the main package\n- Such big change requires a new review in Debian\nRPM doesn't need tarantool-common . I'll remove it in 1.6.8. See explanation of tarantool-common purpose in #1119.\n. Hi Peter,\nUnfortunately, we haven't implemented support for  nil in indexes yet. Thanks for the such detailed explanation of nil behavior, though. I hope this feature will be implemented  in 1.7.x (see #1257)\nCurrently Tarantool should raise an error about invalid data type (Supplied key type of part 1 does not match index part type: expected STR). \n```\ntarantool> box.space.T.index.T:select({'1',nil,'5'},{iterator='EQ'})\n\n\n\n\n['1', '2', '0']\n\n\n['1', '2', '3']\n...\n\ntarantool> box.space.T.index.T:select({'1',require('msgpack').NULL,'5'},{iterator='EQ'})\n\nerror: 'Supplied key type of part 1 does not match index part type: expected STR'\n...\n```\n\nIt seems that your problem is caused by a bug in msgpackffi code.\nI'll fix it.\nSee also #1167.\n. I need a decision on #1167 to implement the same logic in msgpackffi.\nBlocked by #1167\n. @pgulutzan  please use msgpack.NULL instead of nil:\nNULL = require('msgpack').NULL\nbox.cfg{}\nbox.schema.create_space('T',{engine='memtx'})\nbox.space.T:create_index('T',{parts={1,'str',2,'str',3,'str'}})\nbox.space.T:insert{'1','2','3'}\nbox.space.T:insert{'1','2','0'}\n```\ntarantool> box.space.T.index.T:select({'1', nil,'5'},{iterator='EQ'}) -- select#3\n\n\n\n\n['1', '2', '0']\n\n\n['1', '2', '3']\n...\n\ntarantool> box.space.T.index.T:select({'1', nil,'0'},{iterator='GT'}) -- select#4\n\n[]\n...\n```\n\nnil has been lost ....\n```\ntarantool> box.space.T.index.T:select({'1', NULL,'5'},{iterator='EQ'}) -- select#3\n\n\nerror: 'Supplied key type of part 1 does not match index part type: expected STR'\n...\n\ntarantool> box.space.T.index.T:select({'1', NULL,'0'},{iterator='GT'}) -- select#4\n\nerror: 'Supplied key type of part 1 does not match index part type: expected STR'\n...\n```\n\nI think we should add more information about nil and NULL in Lua.\n. One more example to illustrate this bug:\n```\ntarantool> msgpackffi = require('msgpackffi')\n\n...\ntarantool> msgpackffi.decode(msgpackffi.encode({1, nil, 3}))\n\n\n1 <!-- nil has been lost ....\n3\n...\n\ntarantool> msgpackffi.decode(msgpackffi.encode({1, msgpackffi.NULL, 3}))\n\n[1, null, 3]\n5\n...\n``\n. I checked msgpackffi code again. Unfortunately, it is not possible to implement luaL_serializer logic in msgpackffi, becausepairs()andnext()` functions break JIT trace. The core idea of msgpackffi was to allow JIT in selects. Since msgpackffi cannot be fixed, I close this ticket. Sorry.\n\nDocumentation => #1300\n. I discussed with @kostja . msgpackffi is buggy and we have no idea how to fix it.\nThis ticket should be open for a while, until this problem is fixed.\n. Fixed as part of #2036 using pairs().  pairs() is NYI, but it doesn't matter anymore. LuaJIT has never had a working JIT. . @bigbes works on xlog reader for 1.5 #1201\nxlog.cc for 1.6 will be refactored in similar way after finished with #1201\n. I pushed _xc refactoring, needed for Lua bindings.\n. Blocked by #1838 \n. => Split #999 feature from this patch and push to 1.7.\n. I remember that I unintentionally fixed this problem on replicaset branch. This logic needs to be fixed and covered by a test case.\n. @kostja this feature should go to 1.7, otherwise we will break box.cfg {}.\n. Fixed in 1.6.8-316-g974371e\n. A prototype has shown that async (batched) applier is required to properly implement this feature.\nPostponed.\n. Superseded by #2484. refactoring, rolling feature => 1.7.3\n. Finished.\nPlease see also packing task https://github.com/tarantool/tarantool/issues/1184\n. OutOfMemory + ClientError(MEMORY_ISSUE) is a mess. It needs to be discussed.\n. Fixed.\n. It is a bug, not feature.\n. Can you use getrusage() via FFI?\n. ljsyscall has bindings for rusage and many other syscalls.\nI think we should add this module to our rocks.\nhttps://github.com/tarantool/rocks/issues/7\n. Fixed.\n. ```\nengine/recover_snapshot_wal.test.lua            memtx           Traceback (most recent call last):\n  File \"/usr/lib64/python2.7/site-packages/gevent/greenlet.py\", line 327, in run\n    result = self._run(self.args, *self.kwargs)\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/tarantool_connection.py\", line 54, in _addOne\n    c = self._new_connection()\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/admin_connection.py\", line 47, in _new_connection\n    raise RuntimeError('Broken tarantool console handshake')\nRuntimeError: Broken tarantool console handshake\n>> failed with RuntimeError\nTraceback (most recent call last):\n  File \"/usr/lib64/python2.7/site-packages/gevent/greenlet.py\", line 327, in run\n    result = self._run(self.args, *self.kwargs)\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/tarantool_connection.py\", line 54, in _addOne\n    c = self._new_connection()\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/admin_connection.py\", line 47, in _new_connection\n    raise RuntimeError('Broken tarantool console handshake')\nRuntimeError: Broken tarantool console handshake\n>> failed with RuntimeError\nTraceback (most recent call last):\n  File \"/usr/lib64/python2.7/site-packages/gevent/greenlet.py\", line 327, in run\n    result = self._run(self.args, *self.kwargs)\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/tarantool_connection.py\", line 54, in _addOne\n    c = self._new_connection()\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/admin_connection.py\", line 47, in _new_connection\n    raise RuntimeError('Broken tarantool console handshake')\nRuntimeError: Broken tarantool console handshake\n>> failed with RuntimeError\nTraceback (most recent call last):\n  File \"/usr/lib64/python2.7/site-packages/gevent/greenlet.py\", line 327, in run\n    result = self._run(self.args, *self.kwargs)\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/tarantool_connection.py\", line 54, in _addOne\n    c = self._new_connection()\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/admin_connection.py\", line 47, in _new_connection\n    raise RuntimeError('Broken tarantool console handshake')\nRuntimeError: Broken tarantool console handshake\n>> failed with RuntimeError\nTraceback (most recent call last):\n  File \"/usr/lib64/python2.7/site-packages/gevent/greenlet.py\", line 327, in run\n    result = self._run(self.args, *self.kwargs)\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/tarantool_connection.py\", line 54, in _addOne\n    c = self._new_connection()\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/admin_connection.py\", line 47, in _new_connection\n    raise RuntimeError('Broken tarantool console handshake')\nRuntimeError: Broken tarantool console handshake\n>> failed with RuntimeError\nTraceback (most recent call last):\n  File \"/usr/lib64/python2.7/site-packages/gevent/greenlet.py\", line 327, in run\n    result = self._run(self.args, *self.kwargs)\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/tarantool_connection.py\", line 54, in _addOne\n    c = self._new_connection()\n  File \"/home/roman/rpmbuild/BUILD/tarantool-1.6.8.459/test-run/lib/admin_connection.py\", line 47, in _new_connection\n    raise RuntimeError('Broken tarantool console handshake')\nRuntimeError: Broken tarantool console handshake\n>> failed with RuntimeError\n[ pass ]\nengine/recover_snapshot_wal.test.lua            sophia          [ pass ]\n```\nI tired to see this garbage. Please fix ASAP.\n. ```\nengine/replica_join.test.lua                    sophia          Traceback (most recent call last):\nFile \"/usr/lib64/python2.7/site-packages/gevent/greenlet.py\", line 534, in run\nresult = self._run(*self.args, **self.kwargs)\n\nFile \"/home/travis/rpmbuild/BUILD/tarantool-1.7.0.723/test-run/lib/tarantool_connection.py\", line 54, in _addOne\nc = self._new_connection()\n\nFile \"/home/travis/rpmbuild/BUILD/tarantool-1.7.0.723/test-run/lib/admin_connection.py\", line 54, in _new_connection\nraise RuntimeError('Broken tarantool console handshake')\n\nRuntimeError: Broken tarantool console handshake\n>> failed with RuntimeError\nTraceback (most recent call last):\nFile \"/usr/lib64/python2.7/site-packages/gevent/greenlet.py\", line 534, in run\nresult = self._run(*self.args, **self.kwargs)\n\nFile \"/home/travis/rpmbuild/BUILD/tarantool-1.7.0.723/test-run/lib/tarantool_connection.py\", line 54, in _addOne\nc = self._new_connection()\n\nFile \"/home/travis/rpmbuild/BUILD/tarantool-1.7.0.723/test-run/lib/admin_connection.py\", line 54, in _new_connection\nraise RuntimeError('Broken tarantool console handshake')\n\nRuntimeError: Broken tarantool console handshake\n>> failed with RuntimeError\nTraceback (most recent call last):\nFile \"/usr/lib64/python2.7/site-packages/gevent/greenlet.py\", line 534, in run\nresult = self._run(*self.args, **self.kwargs)\n\nFile \"/home/travis/rpmbuild/BUILD/tarantool-1.7.0.723/test-run/lib/tarantool_connection.py\", line 54, in _addOne\nc = self._new_connection()\n\nFile \"/home/travis/rpmbuild/BUILD/tarantool-1.7.0.723/test-run/lib/admin_connection.py\", line 54, in _new_connection\nraise RuntimeError('Broken tarantool console handshake')\n\nRuntimeError: Broken tarantool console handshake\n>> failed with RuntimeError\n[ fail ]\nTest failed! Result content mismatch:\n--- engine/replica_join.result  Sat Apr  2 12:32:30 2016\n+++ engine/replica_join.reject  Sat Apr  2 12:37:13 2016\n@@ -283,6 +283,21 @@\n\n[123, 15129]\n\n...\ntest_run:cmd('switch default')\n+Handshake error {\n+Tarantool 1.7.0 (Binary) d7ebf5b3-9c62-48f9-929b-cd4cbaaa1df1  \n+TZHHT1AtfNlL2Th9LLRlp43YKtt2r/w7vkuS3TwmhAo=                   \n+\n+}\n+Handshake error {\n+Tarantool 1.7.0 (Binary) d7ebf5b3-9c62-48f9-929b-cd4cbaaa1df1  \n+mD5Ey5UfyqSysegGH5j8/peAepI+svkdBe+bMzoIqWE=                   \n+\n+}\n+Handshake error {\n+Tarantool 1.7.0 (Binary) d7ebf5b3-9c62-48f9-929b-cd4cbaaa1df1  \n+8Pj0+9WfNGj2EzO4HkNH5fFxaWESMSx5Ti+WaseG36o=                   \n+\n+}\n\n\ntrue\n\n...\n```\n. root cause:\n```\n2016-09-09 20:08:22.063 [11856] main/101/tarantoolctl I> ready to accept requests\n2016-09-09 20:08:22.063 [11856] main/101/replica I> Run console at unix/:/data/work/tarantool/1.7/test/var/replica.control\n2016-09-09 20:08:22.063 [11856] main/101/replica I> tcp_server: remove dead UNIX socket: /data/work/tarantool/1.7/test/var/replica.control\n2016-09-09 20:08:22.063 [11856] main/104/console/unix/:/data/work/tara I> started\n2016-09-09 20:08:22.064 [11856] main/101/replica tarantoolctl:415 E> Start failed: builtin/console.lua:372: failed to create server localhost:3302: Address already in use\n. Please use pcall() inside of lbox_getaddrinfo().\n. Fixed in 1.6.8-367-ge04413b.\n. Convert to \"raw idea\"?\n.\n    * luaL_tofield tries to classify table into one of four kinds\n * during encoding:\n \n *  + map - at least one table index is not unsigned integer.\n *  + regular array - all array indexes are available.\n *  + sparse array - at least one array index is missing.\n *  + excessively sparse arrat - the number of values missing\n * exceeds the configured ratio.\n \n * An array is excessively sparse when all the following\n * conditions are met:\n \n *  + encode_sparse_ratio > 0.\n *  + max(table) > encode_sparse_safe.\n *  + max(table) > count(table) * encode_sparse_ratio.\n \n * luaL_tofield will never consider an array to be excessively sparse\n * when encode_sparse_ratio = 0. The encode_sparse_safe limit ensures\n * that small Lua arrays are always encoded as sparse arrays.\n * By default, attempting to encode an excessively sparse array will\n * generate an error. If encode_sparse_convert is set to true,\n * excessively sparse arrays will be handled as maps.\n```\nMy code is more flexible and works for most cases. Even Redis uses the same code for detecting Lua arrays.  I can tune up encode_sparse_ratio and encode_sparse_safe. Is it enough?\n. Duplicate of #291.\nI've made a prototype where CALL never throw \"tuple is not array\" exceptions.\nThis prototype supports ALL use-cases from #291. I was able to do that without extra overhead.\n291 re-scheduled for 1.6.8.\n. It seems to be done. @Sulverus ?\n. long_run hasn't finished yet.\n. Already fixed.\n. Can't reproduce on 1.6.8-137-gf604478.\ngh1176.lua:\n```\n!/usr/bin/env tarantool\nbox.cfg { slab_alloc_arena = 0.010, wal_mode = 'none' }\nbox.once(\"bootstrap\", function()\n    box.schema.space.create('test', { engine = 'sophia' })\n    box.space.test:create_index('primary')\n    for i=0,1000000 do\n        box.space.test:insert{i}\n    end\n    box.snapshot()\nend)\nprint(require('yaml').encode(box.slab.info()))\nrequire('gh1176c').test(box.space.test.id)\nprint(require('yaml').encode(box.slab.info()))\nos.exit(0)\n```\ngh1176c.c:\n```\ninclude \ninclude \ninclude \ninclude \nstatic int\ngh1176_test(struct lua_State *L)\n{\n        if (lua_gettop(L) < 1)\n                luaL_error(L, \"Usage: test(space_id)\");\n    uint32_t space_id = lua_tointeger(L, 1);\n    char key[128];\n    char *key_end = mp_encode_array(key, 0);\n\n    box_iterator_t *it = box_index_iterator(space_id, 0, ITER_ALL,\n                                            key, key_end);\n    if (it == NULL) {\n            return 0;\n    }\n    uint64_t sum = 0;\n    box_tuple_t *tuple;\n    while (box_iterator_next(it, &tuple) == 0 && tuple != NULL) {\n            const char *field = box_tuple_field(tuple, 0);\n            sum += mp_decode_uint(&field);\n    }\n\n    box_iterator_free(it);\n\n    say_warn(\"sum: %lld\", (unsigned long long) sum);\n    return 0;\n\n}\nLUA_API int\nluaopen_gh1176c(lua_State *L)\n{\n        lua_newtable(L);\n        static const struct luaL_reg meta [] = {\n                {\"test\", gh1176_test},\n                {NULL, NULL}\n        };\n        luaL_register(L, NULL, meta);\n        return 1;\n}\n```\n```\nquota_used: 8388608\narena_used_ratio: 78.1%\nitems_used_ratio: 1.8%\narena_size: 2341680\nquota_size: 10737664\narena_used: 1003752\n...\n2015-12-02 16:07:17.070 [14354] main/101/gh1176.lua gh1176c.c:30 W> sum: 500000500000\nquota_used: 8388608\narena_used_ratio: 78.1%\nitems_used_ratio: 1.7%\narena_size: 2357976\nquota_size: 10737664\narena_used: 1003776\n...\n```\n. You need memory at least for temporary tuples returned by iterator.\n. Fixed.\n. > Tuesday, December 29, 2015 11:16 AM +03:00 from Konstantin Osipov kostja@tarantool.org:\n\n\nAlexandr Lyapunov a.lyapunov@corp.mail.ru [15/12/29 11:08]:\n/* Check field count in tuple */\nspace_validate_tuple_raw(space, request->tuple);\n+ tuple_validate_raw(space->format, request->tuple);\n\n\n\nBoth names are meaningless.\nHow am I to tell what's the difference between the two?\n\nWe discussed offline that Alex will open a new ticket for removing space_validate_**():\n```\nstatic inline void\nspace_validate_field_count(struct space sp, uint32_t field_count)\nvoid\nspace_validate_tuple_raw(struct space sp, const char data)\nvoid\nspace_validate_tuple(struct space sp, struct tuple *new_tuple)\nvoid\ntuple_field_count_validate(struct tuple_format format, const char data). <!-- removed by this patch\n+void\n+tuple_validate_raw() <!-- added by this patch\n```\nspace->def.field_count (former \"arity\") should be moved to tuple format.\nAs result all checks above except tuple_validate_raw(tuple_data) + tuple_validate(tuple) will be removed from the code.\nPlease open a new ticket for space->def.field_count -> tuple_format with \"refactoring\" tag and then close this.\n. Reproduced on x86.\n. https://github.com/tarantool/small/issues/2\nI discussed with @alyapunov. This problem can be easily to reproduced even on x86_64 and may crash on production during box.snapshot(). Sad, but true. A fix is one liner. => 1.6.7 (master).\nI don't wish to maintain multiple branches of libsmall, so I decided to upgrade 1.6.7 to the latest libsmall (nothing actually changed except renaming *_ex_cb() to _xc_cb()). \n- Fix libsmall and update matras unit test\n- Checkout branch  gh-1185-matras-crash-master in this repo and update libsmall to the fixed version\n- Push a test case for Tarantool to gh-1185-matras-crash-master\n- Push branch to master\n. Discussed with @kostja:\n- Re-schedule for 1.6.8 to simplify 1.6.x to 1.7.x upgrade\n- Regenerate bootstrap.bin to use the new format\n- Wrap 1.6.x compatibility code to  if (is_167_plus) {} blocks\n- Improve error messages ('Wrong index options (field 4): parameter ''holy'' is unexpected')\n- Discuss recursive options with @pmwkaa (memory.limit)\n. Implemented in 1.6.8-349-ga0dc412\n. Changelog has been fixed.\nI plan to upload new packages to the mainstream debian repository soon.\n. 1. Please implement 1.5 replication client instead of reading files from disk.\n2. You can use space:format() for schema\n. Moved to https://github.com/bigbes/migrate\n. Thank your for this pull request!\nI'll merge this patch soon (I plan to make some performance optimization).\n. Rebased && pushed to 1.6.\n. I'm sorry, but the second commit (https://github.com/daurnimator/tarantool/commit/7a6feb7d92454a2c9a600f335aac923055a64348) wasn't on branch after git pull, so I've missed it.\n. socket.iowait() without fd sounds a little bit strange for me.\nCould you please describe in which cases you want to use just timer?\n. > Convenience :)\n\nIf fd is nil or -1, it's nice to fall back to just doing a sleep.\n\nsocket.iowait(nil, nil, timeout) doesn't look nice for me. There is fiber.sleep(timeout) which actually uses ev_timer under the hood. I don't think that one function can fit all bindings to event machine.\n\nShould probably use luaL_optnumber (L, 3, HUGE_VAL) instead.\n\nFixed. Thanks!\n. Done.\nCould you please add more example how to use cqueues with Tarantool to your documentation?\nThanks!\n. > make all arguments optional.\nMy initial point was that one function can't fit all events of the world. iowait() semantics is to wait for some events (read, write or any) on a file descriptor with a specific timeout - socket.iowait(fd, events, timeout). It is clear, understandably and easy to use. I can accept iowait(nil, nil, timeout) because it looks like select(0, NULL, NULL, NULL, timeout) or poll(0, NULL, timeout). Any other combinations likes iowait(fd, nil, timeout) and iowait(nil, 'rw', timeout) are arguable.  uv.new_poll(cq:pollfd()):start(cq:events(), onready) also don't accept nil instead of fd. I don't see any reason to add more ambiguity to iowait() API. Sorry.  Let's try it as is first.\n\nif fd is nil or -1 or events is nil or 0 or the empty string, you don't actually need to watch\n\n-1 is invalid fd which must not be added to the event machine.  Lehman has an assertion for this case in libev and I completely agree with him on that point. 0 is valid file descriptor (usually STDIN), therefore zero must not be used as a special value.\n\nif timeout is nil default to no timer/infinite timeout\n\nIt already works in this way.\n\nif timeout is <=0 don't error; just yield the current slice to give other threads a turn e.g. you don't want things to fail if you do logic like: socket.iowait(myfd, \"r\", deadline - now()) => timeout may end up being negative due to a deadline in the past.\n\nIt makes sense. Thank you for pointing this out to me.\n. Your review fixes have been pushed, thanks!\n. xrow reader will be implemented in C, so I remove this ticket of of 1.6. scope.\n. I think Lua should do this automatically...\n. Very nice.\nDoes it actually work?\nYou can make a function in src/lua/utils.cc and use it everywhere.\n\nTuesday, December 22, 2015 12:53 PM -08:00 from Nick Zavaritsky notifications@github.com:\n--- a/src/box/tuple.cc\n+++ b/src/box/tuple.cc\n@@ -41,6 +41,9 @@\n #include \"errinj.h\"\n #include \"fiber.h\"\n\n+#include \n+#include  /* hack /\n+\n /* Global table of tuple formats _/\n struct tuple_format _tuple_formats;\n struct tuple_format tuple_format_ber;\n@@ -784,6 +787,7 @@ box_tuple_ref(box_tuple_t tuple)\n        assert(tuple != NULL);\n        try {\n                tuple_ref(tuple);\n-               G(tarantool_L)->gc.total += tuple->bsize;\n              return 0;\n      } catch (Exception e) {\n              return -1;\n  @@ -794,6 +798,7 @@ void\n  box_tuple_unref(box_tuple_t *tuple)\n  {\n        assert(tuple != NULL);\n-       G(tarantool_L)->gc.total -= tuple->bsize;\n      return tuple_unref(tuple);\n  }\n\n\u2014\nReply to this email directly or  view it on GitHub .\n\n\nWBR,\nRoman Tsisyk roman@tarantool.org\nhttp://tarantool.org/ - an efficient in-memory data store and a Lua application server\n. The same issue for mkdir()\n. I suggest to add tuple_newv(struct iovec *iov, int iovcnt) to our API in order to allow construction tuple from parts. Is it easy to do and it definitely will improve performance. I also was asked for this feature from A.Levshin for stored procedures.\n. I need this fix to update package in FreeBSD.\n. Fixed.\n. Fixed after sophia upgrade #1222. \n. https://github.com/tarantool/tarantool/blob/985d9fa05a094ad0601e5e869a35844f65daebcd/src/box/lua/snapshot_daemon.lua#L64 (one line above your fix) is also buggy.\nWhat is about a test case?\n. OK, now it is clear for me.\n. => review fixes\n. Yes, we plan to add SQL in the near future (work in progress).\n. Please you our mail list or facebook group fro questions!\nhttps://groups.google.com/forum/#!forum/tarantool\nhttps://www.facebook.com/groups/tarantool/\nThanks!\n. As it was mentioned above, Sophia from 1.6.8 doesn't handle 1.6.7 data files.  I'm very sad about that.  We had to upgrade Sophia to fix critical problems, but this upgrade also has broken compatibility. The compatibility was the lesser of two evils.\nWe've improved  Sophia release management procedures to avoid similar situations in the future. Unfortunately, some developers may already use Sophia spaces in Tarantool <= 1.6.7. I'll try to convince them to use 1.6.8 for the production. However, we need to check that Sophia data dir is old and display a proper error message.\nCurrent behavior:\n2016-01-20 09:54:03.632 [2299] main/101/init.lua sophia_engine.cc:62 E> ER_SOPHIA: sophia/index/si_node.c:129 db file '(null)' open error: No such file or directory\n2016-01-20 09:54:03.632 [2299] main/101/init.lua F> can't initialize storage: sophia/index/si_node.c:129 db file '(null)' open error: No such file or directory\n[Thread 0x7fffee3fe700 (LWP 2315) exited]\nPlease detect old version of data and print some sensitive error to the console.\n. A breaking change, must be done ASAP.\n. Fixed by 935e5681e73d8836b8e88a64c2cdc26811290458\n. => waiting for response from Mike Pall http://www.freelists.org/post/luajit/ffiistype-quirk\n. @kostja it can crash tarantool when you type something like \"require('net.box').new('localhost', 3313)\" in console. See https://github.com/tarantool/tarantool/issues/1177\nI've made fix for this problem and currently work on a test case.\n. Fixed.\n. +1\ntest-run definitely must be fixed to use a random port instead of 8080.\n. test-run fixed (port 8080), prune.test.lua fixed.\n@GeorgyKirichenko please try to fix socket.test.lua.\nThis test fails too often on Travis and locally.\n. socket.test also should not try to connect to remote servers\n. Please file a ticket for module upgrade documentation after implementing this feature.\n. @kostja we need a consistent solution to reload startup script from tarantoolctl.\n. Moved to 1.7.x\n. >  Reload was renamed to eval. I don't think this idea makes any sense after the rename. Why not flush package.loaded inside the loaded code?\n1.6.9:\n- tarantoolctl reload myapp should be an alias to tarantoolctl eval /etc/tarantool/instances.enabled/myapp.lua\n-  Add some examples how to reload code and flush caches to modulekit and example.lua\n- Help @lenkis with documentation\n. => customer switched to 1.7.x with vinyl\n. I can't reproduce this problem on the latest 1.6.7:\n```\n\n\n\nR = demo.call(\"hello\", [])\nprint R\n- [hello]\nserver.eval(\"return box.info.version\")\n[1.6.7-557-gb8fdd95]\n\n\n\nFreeBSD tt 10.2-RELEASE FreeBSD 10.2-RELEASE #0 r286666: Wed Aug 12 15:26:37 UTC 2015     root@releng1.nyi.freebsd.org:/usr/obj/usr/src/sys/GENERIC  amd64\n```\n1.6.7 is buggy when compiled by clang. We substantially improved support of FreeBSD forupcoming 1.6.8 release. Please compile 1.6.7 (branch master) using gcc or switch to 1.6.8 (branch 1.6.)\n. @zloidemon could you please update FreeBSD/ release?\n. Most problems with FreeBSD have been fixed in 1.6.8. @zloidemon  needs a source tarball to update FreeBSD ports. @stofel please wait https://github.com/tarantool/build/issues/5 to be closed and then ping @zloidemon or just compile tarantool from git (branch 1.6). \nI hope we will update FreeBSD ports soon.\n. I think we should save previous crc in 1.7 and force checks in 1.8/2.0.\n. Output is pretty nice, the patch is good.\nThe only one problem I see in this patch is modified libyaml code.\nCurrently we use vanilla libyaml and Tarantool can even be compiled with system libyaml via cmake . -DENABLE_BUNDLED_LIBYAML=OFF.  I added this option to pass lint checks on Debian.\nIt'll be great if you can make this fix without touching libyaml. I fixed similar problem for tutorial() long time ago and that fix works properly both with system and embedded libyaml. \nThanks!\n. > I would love to avoid touching libyaml if it was possible. Unfortunately, it didn't work.\nForking libyaml for the one line just not worth it to me.  Please try to find a workaround and/or open a ticket in libyaml if you feel that library is not flexible enough. \nThanks.\n. Please send your patch to libyaml.\n. It is a regression since 1.6.7 caused by src/fiber.c(cc) refactoring (fiber_loop() function):\n```\n./src/tarantool: version 1.6.7-562-g3dbc9ff\ntype 'help' for interactive help\ntarantool> fiber = require('fiber')\n\n...\ntarantool> fiber.create(function() fiber.sleep(2); error('XXX') end)\n\nstatus: suspended\n  name: lua\n  id: 102\n...\n\ntarantool> ./src/tarantool: LuajitError: [string \"return fiber.create(function() fiber.sleep(2)...\"]:1: XXX\n\n...\n```\n```\n./src/tarantool: version 1.6.8-282-gd629c07\ntype 'help' for interactive help\ntarantool> fiber = require('fiber')\n\n...\ntarantool> fiber.create(function() fiber.sleep(2); error('XXX') end)\n\nstatus: suspended\n  name: lua\n  id: 102\n...\n\ntarantool> fiber.info()\n\n101:\n    csw: 6\n    backtrace: []\n    fid: 101\n    memory:\n      total: 65776\n      used: 0\n    name: interactive\n...\n\n``\n. Fixed in 1.6.8-371-g6a7d814\n. We reverted commit in master, but it didn't work for 1.6+.\nhttps://github.com/tarantool/tarantool/commits/gh-1239-fix-join-1.6-tmp\n. Fixed in Sophia today.\n. Merged.\n. Temporary workaround is to usemsgpack.Marshal(uint(128))instead ofmsgpack.Marshal(128)`.\nPossible solutions:\n1. Download space formats from box.space._space and use on Go client for encoding (like we planned to fix Perl)\n2. Implement universal numeric index (unsigned + signed + float) \n3. Rewrite tuples on the fly\n1. is already needed at least for space names.\n2. is a complex feature, but 1.6.x is feature frozen.\n3. implies HUGE performance ovehead, although it is possible to replace typecodes in-place in some cases.\nI discussed with @mialinx and he promised to take a look on https://github.com/tarantool/go-tarantool/issues/7 on NY weekends.\nSuperseded by https://github.com/tarantool/go-tarantool/issues/7\n. I fixed this problem in deb/rpm packages for 1.6.8 (branch 1.6).\nPlease re-open this ticket if you still have problems.\n. https://github.com/tarantool/small/issues/8\n. I fixed compilation with musl libc. \nThe test suite can't be run due to limited amount of memory on the test box.\nIt would be nice if @d3m1gd can run our test suite on bigger Alpine Linux box.\n. Caused by grsecurity patches for kernel.\nI'll try to reproduce it on linux-image-4.3.0-1-grsec-amd64 (Debian).\n. > -ok - wal_mode fsync -> fsync\n\n+not ok - wal_mode fsync\n\n\nfilename: /home/loko/project/tarantool/test/app/cfg.test.lua\ntrace:\n\n\nline: 0\n\n\nsource: '@/home/loko/project/tarantool/test/app/cfg.test.lua'\nfilename: /home/loko/project/tarantool/test/app/cfg.test.lua\nwhat: main\nnamewhat:\nsrc: /home/loko/project/tarantool/test/app/cfg.test.lua\nline: 0\nexpected: 0\ngot: 256\n...\n\n\nThis problem caused by grsecurity kernel:\n[  296.896064] grsec: denied untrusted exec (due to not being in trusted group and file in non-root-owned directory) of /data/work/tarantool/1.6/extra/apigen by /data/work/tarantool/1.6/extra/apigen[sh:6656] uid/euid:1000/1000 gid/egid:1000/1000, parent /bin/dash[sh:6654] uid/euid:1000/1000 gid/egid:1000/1000\n[  248.936207] grsec: denied untrusted exec (due to not being in trusted group and file in non-root-owned directory) of /data/work/tarantool/1.6/third_party/luajit/src/host/minilua by /data/work/tarantool/1.6/third_party/luajit/src/host/minilua[make:6357] uid/euid:1000/1000 gid/egid:1000/1000, parent /usr/bin/make[make:5648] uid/euid:1000/1000 gid/egid:1000/1000\ngrsecruity denies to run compiled  binaries. I installed linux-image-4.3.0-1-grsec-amd64 on my Debian laptop and this kernel doesn't even boot properly. I spent some time to get linux console, but X server was still broken as well as wpa_supplicant.\nI also tried Alpine Linux in VirtualBox:\nERROR: http://dl-5.alpinelinux.org/alpine/v3.3/main: temporary error (try again later)\nThis error is permanent.  I was unable to fix it in reasonable time.\nI'm sorry, but Alpine Linux on grsecurity will no be fixed. We don't support platforms that can't even boot properly.\n=> I've fixed the test suite on Alpine Linux operated under regular rh6 kernel.\nSome replication tests still hang, but it seems to be a race condition inside these tests rather than a bug inside the server.\n. This bug is not fixed.\n. The first version was reviewed today.\n. Postponed, blocked by #1612\n. => 1.8.0\n. Blocked by #2798 . Backtraces make too many problems. This feature ignores best practices and violates existing policies on ALL Linux distros I've ever known. How our internal names of C functions are useful for our customers?\nThere is a lot of special solutions 1 for crash dumps. BTW, coredumps should be fixed to exclude database data, I remember it was possible at least on Linux.\n1 https://fedoraproject.org/wiki/StackTraces\n. A workaround:\n```\n-fPIE break backtraces\nhttps://github.com/tarantool/tarantool/issues/1262\n%undefine _hardened_build\n```\n. I've pushed this workaround to 1.6.8.\n@kostja what do you think about my comment above?\n. I'm discussed this problem in various maillists.\n. @kostja @lenkis It would be nice to add detailed instructions about creating useful bug reports:\n- https://techbase.kde.org/Development/Tutorials/Debugging/How_to_create_useful_crash_reports\n- https://techbase.kde.org/Development/Tutorials/Debugging/Debugging_symbols\n- https://techbase.kde.org/Development/Tutorials/Debugging/Debugging_with_GDB\nI'll make a new documentation ticket if you agree.\n. @kostja my thesis:\n1) tarantool-debuinfo RPM package provides all requires information needed for debugging, including source codes. @alyapunov agree with me that he can debug tarantool with data from tarantool-debuginfo package.\n2)  gdb automatically suggests to install debuginfo of required version:\n```\ngdb -p \n...\nMissing separate debuginfos, use: dnf debuginfo-install\ntarantool-1.6.8.564-1.fc24.x86-64 glibc-2.22.90-26.fc24.x86_64\nkrb5-libs-1.14-12.fc24.x86_64 libgcc-5.3.1-3.fc24.x86_64\nlibgomp-5.3.1-3.fc24.x86_64 libselinux-2.4-6.fc24.x86_64\nlibstdc++-5.3.1-3.fc24.x86_64 libyaml-0.1.6-7.fc23.x86_64\nncurses-libs-6.0-1.20150810.fc24.x86_64\nopenssl-libs-1.0.2e-3.fc24.x86_64\n```\n3)  gdb automatically loads debug information and source codes from -debuginfo packages.\n4) coredumpctl works for me. It produces readable stack traces with symbol names even if debuginfo was not installed.\n5) Tarantool buildbot keep history of all RPM packages for a while.\nFedora:\n\nPackages at final release are kept forever. Of course for updates only the current packages are included, so you could well have an update that isn't the current one that has no debuginfo on mirrors.\n\nSince I plan to upload only minor releases (1.6.x), it would not be a problem. Obviously, I can upload  -debuginfo  to our server after building a new version of package.\nFedora community develops some tools to simplify our life:\n- https://fedoraproject.org/wiki/Darkserver\n- https://github.com/abrt/abrt/wiki/overview\n6) fiber.info() is useless for our users. I can make a patch to produce Lua stack traces instead of C stack traces. Lua stack traces will significantly improve debugging of Lua stored procedures.\nYou can still use gdb and pstack to get C symbol names.\n7) I can also try to convince reviewers that we need unstrpped binaries, but I see that we don't.\n8) We can continue to build unstripped binaries on our buildbot, but experimentally add packages with debuginfo to Fedora and EPEL7 (= EL7 = CentOS7 ). I don't think that it makes sense since we keep history of -debuginfo forever.\n8) RPM packages for Fedora/EPEL7 are intended for new adopters. I think we can go even without fiber.info(). Our enterprise customers will continue to use our \"official\" repositories.\n=> Add packages with -debuginfo  and without fiber.info() to Fedora, implement proper fiber.info(), switch to -debuginfo scheme in our repositories.\n. Discussed with @kostja :\nAdd packages with -debuginfo and without fiber.info() to Fedora, keep unstripped binaries in our repositories, get some experience with -debuginfo in Fedora and switch or repos to this scheme too (1.7.x).\n. Fixed via a6997b0c4b0243fa7e5c110228a3128c9ffb8b39\n. Reviewed by @kostja (\"nothing criminal\")\nPushed as 1.6.8-390-ge15bc62\n. Needed for ZeroBraneStudio:\n\nRoman Kolchin\nIt's own lua works fine at the same time:\nDebugger server started at localhost:8172.\nProgram starting as '\"/Applications/ZeroBraneStudio.app/Contents/ZeroBraneStudio/bin/lua.app/Contents/MacOS/lua\" -e \"io.stdout:setvbuf('no')\" \"/var/folders/3r/t24hrs0x41b3q4bzc7zg8lwc0000gn/T/.chtduK\"'.\nProgram 'lua' started in '/Applications/ZeroBraneStudio.app/Contents/ZeroBraneStudio/myprograms' (pid: 14588).\nDebugging session started in '/Applications/ZeroBraneStudio.app/Contents/ZeroBraneStudio/myprograms/'.\n. This feature is nice to have for #2067.\n. 1.7.4-478-g8c2cf77ea. Fixed in 1.6.8-381-g924d356\n. How the system should decide that server_id is not used anymore?\n. A breaking change, should be done ASAP.\n. Moving cfg changes to 1.8\n. Please move this ticket to test-run.\n. Duplicate of https://github.com/tarantool/test-run/issues/19\n. rolling feature, moving to 1.7.3\n. I don't like the idea of using system spaces for information about runtime.\nAnyway, the ticket is great. \n\nMy TOP-2 list of customer questions:\n1. Where is my memory? (see #1093 #933)\n2. Why Tarantool consumes so much CPU time?\nI think we can tag this ticket with customer label.\n. I need dynamic peers in order to implement #723, which is in 1.7.x.  Let's try to fit it into 1.7.x.\n. Implemented.. tostring() is buggy for doubles:\n```\ntarantool> tostring(824708557567779)\n\n\n'8.2470855756778e+14'\n...\n```\n. This problem also presents in the stock LuaJIT:\n\n```\nLuaJIT 2.1.0-beta1 -- Copyright (C) 2005-2015 Mike Pall. http://luajit.org/\nJIT: ON SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse\n\n=tostring(824708557567779)\n8.2470855756778e+14\n```\n\n```\nLuaJIT 2.0.4 -- Copyright (C) 2005-2015 Mike Pall. http://luajit.org/\nJIT: ON CMOV SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse\n\n=tostring(824708557567779)\n8.2470855756778e+14\n```\n\nPlease investigate LuaJIT sources. Probably LuaJIT should use libc functions or switch to dtoa code by David M. Gay.\n. > I think this is bug in tonumber64() in tarantool and not in tostring() in lua, because\n\ntype(tonumber64(\"9223372036854775807\"))\ncdata\ntype(tonumber64(\"824708557567779\"))\nnumber\nand tostring() work correctly only with cdata\n\nThis is a desired behavior. The reason is that number is more lightweight then cdata<uint64_t>. \nWe've narrowed the range to [-1e14 + 1, 1e14 -1] to make tostring() to be happy. \nYou can always convert you numbers to uint64_t using this trick: 0ULL + lua number.\n. The workaround has been added to 1.6.8-380-g093828c\n. Confirmed on 1.6.7-592-g3fb2936 (latest) using Python 2.\n```\n0  sr_compare_u64 (b=, a=0x93fb6e \"\\001\") at sophia/runtime/sr_scheme.c:70\n1  sr_cmpu64 (a=0x93fb6e \"\\001\", asz=14, b=, bsz=, arg=0x954990)\nat sophia/runtime/sr_scheme.c:89\n\n2  0x000000000042700d in sr_schemecompare (a=0x93fb68 \"\\006\", asize=14, b=0x0, bsize=0, arg=) at sophia/runtime/sr_scheme.c:156\n3  0x00000000005c9291 in sr_compare (s=, s=, bsize=0, b=0x0, asize=14, a=) at sophia/runtime/sr_scheme.h:153\n4  si_qrange (q=0x7fffe6ff7d40) at sophia/index/si_query.c:360\n5  0x00000000005e4976 in si_query (q=q@entry=0x7fffe6ff7d40) at sophia/index/si_query.c:389\n6  0x00000000005eba00 in se_reqread (r=0x7ffff7fa5034) at sophia/environment/se_execute.c:59\n7  0x00000000005efd59 in se_dispatch (s=0x9423b8, t=0x7fffe6ff8970, w=0x9579b0) at sophia/environment/se_scheduler.c:765\n8  se_scheduler (s=s@entry=0x9423b8, w=w@entry=0x9579b0) at sophia/environment/se_scheduler.c:817\n9  0x00000000005f0480 in se_worker (arg=0x9579b0) at sophia/environment/se_scheduler.c:370\n10 0x00007ffff7345284 in start_thread (arg=0x7fffe6ffd700) at pthread_create.c:333\n11 0x00007ffff65ca74d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\n```\nIt seems that sophia_index doesn't handle keys with zero parts properly.\n1.6.8-364-gc5a9a91 is OK.\n. Fixed in 1.6.7-593-gc17fa86 / 1.6.8-366-g1d0c49e\nPlease consider to use 1.6.8 for new sophia deployments (see #1222)\n. Blocked by https://github.com/tarantool/test-run/issues/23\n. Yes, it is a  regression on gcc 4.7.\nOne liner, will fix today.\n. Fixed\n. https://github.com/tarantool/tarantool/blob/1.6/README.systemd.md\nhttps://groups.google.com/forum/#!topic/tarantool-ru/-zz_LvxfKnw (my long post)\n. Fixed in 1.6.8-382-gad66cbe\n. you has convinced  me that tarantoolctl connect is not so big deal.\nOK for 1.6.9. \n. Implemented:\n```\n[roman@work 1.6]$ tarantoolctl connect 'unix/:/var/run/tarantool/example.control'\n/usr/bin/tarantoolctl: connected to unix/:/var/run/tarantool/example.control\nunix/:/var/run/tarantool/example.control> \n\n...\nunix/:/var/run/tarantool/example.control> \n[roman@work 1.6]$ tarantoolctl connect '127.0.0.1:3313'\n/usr/bin/tarantoolctl: connected to 127.0.0.1:3313\n127.0.0.1:3313> \n```\nPlease note that unix pipes are still not implemented properly (see #672):\n```\n[roman@work 1.6]$ echo \"2 + 2\" | tarantoolctl connect '127.0.0.1:3313'\n/usr/bin/tarantoolctl: connected to 127.0.0.1:3313\n127.0.0.1:3313> 2 + 2  <-- should not display prompt\n\n\n4\n...\n\n127.0.0.1:3313> <-- should not display prompt\n``\n. 1. Rewrite inc()/dec() using upsert()\n2. Remove inc()/dec() in 1.7 and suggest to use upsert() directly\n. @kostja: need feedback for this ticket\n. inc()/dec() is Tarantool 1.5 legacy. We decided to remove it.\n- [ ] Remove implementation and tests from 1.7\n- [ ] Open a ticket in tarantool/doc to deprecate these functions in 1.6.9 and to remove in 1.7.x.\n. Is it used in 1.6.x? \n. Fixed\n. Hard to do because we use common debian/control file for all distributions and old ubuntas doesn't have systemd.\n. => 1.6.9, Ubuntu Xenial finally migrated to systemd and our customers have troubles with systemd-svsinit wrapper.\n. I implemented this feature, but it requires some QA before push:\n- [x] Check that new debian/ package can be build on old distros (wheezy, trusty, etc.)\n- [x] Check upgrade from sysvinit-only package to sysvinit + systemd package if systemd is installed\n- [x] Check upgrade from sysvinit-only package to sysvinit + systemd package if systemd is not installed\n- [x] Check fresh installation if systemd is installed\n- [x] Check fresh installation if systemd is not installed \n- [ ] Decide is it safe to push this feature to 1.6.9\n. ### Known limitations and possible caveats\n-/etc/init.d/tarantool startunder systemd starts only instances which were enabled before reboot or before lastsystemctl daemon-reload-/etc/init.d/tarantool stopunder systemd does nothing\n-systemctl start tarantool(without @instance) starts only instances which were enabled before reboot or before lastsystemctl daemon-reload-systemctl tarantool stop(without @instance) does nothing\n- tarantool-1.7.1.142+ package requires newer version oftarantool-commonpackage. An attemp to upgradetarantool-common` will automatically restart all instances.\nAll these problems are caused by Debian decision to support systemd alongside sysvinit.\nPlease blame them, not us. \nsysvinit -> systemd conversion guide for Debian/Ubuntu\n\nInstall new systemd-enabled packages\nFor each instancename in /etc/tarantool/instances.enabled/:\nsystemctl enable tarantool@instancename  - enable instance to autoload during systemd boot\n/etc/init.d/tarantool stop - actually does nothing, just for consistency\nsystemctl disable tarantool; update-rc.d tarantool remove - disable sysvinit-compatible wrappers\n\nNote that systemctl start tarantool (without @instance) is provided only for interoperability with sysvinit scripts only, please use systemctl start tarantool@instance instead. \nPlease refer \"Notes for systemd users\"  section in our manual for further information.\nDistros without systemd are not affected at all.\n. => 1.7.x\n. 1.7.1-145-g2e64a8c\n. I think we can change umask to make all files to be group-readable.\nAny better suggestions?\n. How do you plan to limit Lua memory? Moreover, there is no technology to set quotes per request for region_alloc, slab_cache and so on. This ticket is \"raw idea\", please consider to convert.\n. 3.7.0 is now OK.\nSee also #1626 \n. All breaking changes should be done ASAP.\n. Moved to 1.8.0 after discussion with @kostja \n. 1.7.2\n. > Call semantics (1.6 vs 1.7) is defined in connect options and is independent of the actual server version.\n\nDefault is 1.7.\n\nWhy don't use 1.6 for 1.6 server by default?\n. This problem is already fixed by c3b56b5b5944422e66372c25518e2ed772613d5a.. Fixed by 2df27115c683316d3b80eaf0df9a71208c1515e1\n. @kostja even @pgulutzan who has written all documentation doesn't known about this Lua pitfall (see initial report in #1123).\n. @pgulutzan Tarantool doesn't support NULLs in indexed fields.\nbox.space.T.index.T:select({'1',nil,'5'},{iterator='EQ'}) is completely equivalent to box.space.T.index.T:select({'1', '5'},{iterator='EQ'}) because Lua ignores nil in tables.\n. Discussed. Please make a patch to replace relative stack indexes (-1, -2, etc.) to absolute (1, 2, 3) for fiber.channel() bindings.\n. get(channel, nil) should be equivalent to get(channel) and  get(channel) is equivalent to get(channel, INFINITY) \n. Duplicate of  #883\n. @kostja we can run our new Docker-based build-bot on our hardware.\nI prepared a patch to tarantool/build to allow something like that:\nmake debian fedora ubuntu centos -j # run all builds in parallel to get packages\n. I have got SSH access to AARCH64 phisycal host.\n. Confirmed on Linux xxx 4.2.6-300.fc23.armv7hl #1 SMP Tue Nov 10 21:01:26 UTC 2015 armv7l armv7l armv7l GNU/Linux gcc version 5.3.1 20151207 (Red Hat 5.3.1-2) (GCC)\n. Upstream bug: https://github.com/LuaJIT/LuaJIT/issues/130\nI added a workaround.\n. any deadlines?\n. Now iterator uses three sp_set only for the first iteration.\n. Any news? Do we have a coredump or other information to reproduce this crash?\n. Pushed to 1.6.7. \n. => link with OpenSSL\n. Fixed\n. @kostja who need this feature? Why it was scheduled for 1.6.x?\nI don't think that we should re-invent GDB. Please convert to \"raw idea\" and/or 1.8.\n. I don't think that have enough time in this milestone to re-invent gdb.\n. libbfd  can be replaced by libunwind: http://www.nongnu.org/libunwind/docs.html\nlibunwind can unwind stacks based on DWARF information and print function names, registers and other information, even if -fomit-frame-pointer is enabled.. Please add -DENABLE_DIST=ON to cmake args.\n. This ticket is duplicate of #623\n. Actually this is not a regression.\n/etc/tarantool/instances.available contains all available instances managed by tarantoolctl (just by the definition). You can start and stop these instances manually using tarantoolctl start and tarantoolctl stop .\n/etc/tarantool/instances.enabled is used by /etc/init.d/tarantool sysvinit script to start instances during system boot. instances.enabled should contains symlinks to instances.available.\n. tarantool package from tarantool.org shouldn't depend on EPEL packages.\nI'll check CentOS 6 / CentOS 7.\n. CentOS 6 OK:\n```\n[root@03a4fe3ec98a 1.6]# yum repolist\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirror.h1host.ru\nrepo id                                                                                                        repo name                                                                                                                 status\nbase    Only Base repo is enabled                                                                                                        CentOS-6 - Base                                                                                                           6,575<br />tarantool                                                                                                      CentOS-6 - Tarantool                                                                                                        615\nrepolist: 7,190\n[root@03a4fe3ec98a 1.6]# yum install tarantool\nLoaded plugins: fastestmirror\nSetting up Install Process\nLoading mirror speeds from cached hostfile\n * base: mirror.h1host.ru\nResolving Dependencies\n Running transaction check\n---> Package tarantool.x86_64 0:1.6.8.487-1.el6 will be installed\n--> Finished Dependency Resolution\nDependencies Resolved\n===============================================================================================================================================================================================================================================\n Package                                                  Arch                                                  Version                                                         Repository                                                Size\n===============================================================================================================================================================================================================================================\nInstalling:\n tarantool                                                x86_64                                                1.6.8.487-1.el6                                                 tarantool                                                1.2 M\nTransaction Summary\nInstall       1 Package(s)\n```\n. A clean CentOS 6 from Docker Hub:\n```\nPackage                                                       Arch                                               Version                                                          Repository                                             Size\nInstalling:\n tarantool                                                     x86_64                                             1.6.8.487-1.el6                                                  tarantool                                             1.2 M\nInstalling for dependencies:\n hwdata                                                        noarch                                             0.233-14.1.el6                                                   base                                                  1.3 M\n initscripts                                                   x86_64                                             9.03.49-1.el6.centos                                             base                                                  945 k\n iproute                                                       x86_64                                             2.6.32-45.el6                                                    base                                                  367 k\n iptables                                                      x86_64                                             1.4.7-16.el6                                                     base                                                  254 k\n iputils                                                       x86_64                                             20071127-20.el6                                                  base                                                  120 k\n libgomp                                                       x86_64                                             4.4.7-16.el6                                                     base                                                  134 k\n libsemanage                                                   x86_64                                             2.0.43-5.1.el6                                                   base                                                  104 k\n libyaml                                                       x86_64                                             0.1.3-4.el6_6                                                    base                                                   52 k\n mingetty                                                      x86_64                                             1.08-5.el6                                                       base                                                   21 k\n module-init-tools                                             x86_64                                             3.9-25.el6                                                       base                                                  466 k\n policycoreutils                                               x86_64                                             2.0.83-24.el6                                                    base                                                  651 k\n psmisc                                                        x86_64                                             22.6-19.el6_5                                                    base                                                   81 k\n sysvinit-tools                                                x86_64                                             2.87-6.dsf.el6                                                   base                                                   60 k\n udev                                                          x86_64                                             147-2.63.el6                                                     base                                                  355 k\n upstart                                                       x86_64                                             0.6.5-13.el6_5.3                                                 base                                                  177 k\n util-linux-ng                                                 x86_64                                             2.17.2-12.18.el6                                                 base                                                  1.6 M\nTransaction Summary\nInstall      17 Package(s)\nTotal download size: 7.8 M\nInstalled size: 29 M\nInstalled:\n  tarantool.x86_64 0:1.6.8.487-1.el6                                                                                                                                                                                                           \nDependency Installed:\n  hwdata.noarch 0:0.233-14.1.el6           initscripts.x86_64 0:9.03.49-1.el6.centos   iproute.x86_64 0:2.6.32-45.el6      iptables.x86_64 0:1.4.7-16.el6            iputils.x86_64 0:20071127-20.el6         libgomp.x86_64 0:4.4.7-16.el6\n  libsemanage.x86_64 0:2.0.43-5.1.el6      libyaml.x86_64 0:0.1.3-4.el6_6              mingetty.x86_64 0:1.08-5.el6        module-init-tools.x86_64 0:3.9-25.el6     policycoreutils.x86_64 0:2.0.83-24.el6   psmisc.x86_64 0:22.6-19.el6_5\n  sysvinit-tools.x86_64 0:2.87-6.dsf.el6   udev.x86_64 0:147-2.63.el6                  upstart.x86_64 0:0.6.5-13.el6_5.3   util-linux-ng.x86_64 0:2.17.2-12.18.el6  \nComplete!\n[root@aa8bff707213 /]# tarantool\ntarantool: version 1.6.8-487-g2d8b6cb\ntype 'help' for interactive help\ntarantool> \n```\n. A clean CentOS 7 from DockerHub:\n```\n[root@37c3c2093d41 /]# yum repolist\nLoaded plugins: fastestmirror, ovl\nLoading mirror speeds from cached hostfile\n * base: centos-mirror.rbc.ru\nrepo id                                                                                                            repo name                                                                                                             status\nbase/7/x86_64                                                                                                      CentOS-7 - Base                                                                                                       9007\ntarantool/7/x86_64                                                                                                 CentOS-7 - Tarantool                                                                                                   954\nrepolist: 9961\n[root@37c3c2093d41 /]# yum install tarantool\nLoaded plugins: fastestmirror, ovl\nLoading mirror speeds from cached hostfile\n * base: centos-mirror.rbc.ru\nResolving Dependencies\n--> Running transaction check\n---> Package tarantool.x86_64 0:1.6.8.487-1.el7.centos will be installed\n--> Processing Dependency: libgomp.so.1(GOMP_2.0)(64bit) for package: tarantool-1.6.8.487-1.el7.centos.x86_64\n--> Processing Dependency: libgomp.so.1(GOMP_1.0)(64bit) for package: tarantool-1.6.8.487-1.el7.centos.x86_64\n--> Processing Dependency: libyaml-0.so.2()(64bit) for package: tarantool-1.6.8.487-1.el7.centos.x86_64\n--> Processing Dependency: libgomp.so.1()(64bit) for package: tarantool-1.6.8.487-1.el7.centos.x86_64\n--> Running transaction check\n---> Package libgomp.x86_64 0:4.8.5-4.el7 will be installed\n---> Package libyaml.x86_64 0:0.1.4-11.el7_0 will be installed\n--> Finished Dependency Resolution\nDependencies Resolved\n===============================================================================================================================================================================================================================================\n Package                                                Arch                                                Version                                                               Repository                                              Size\n===============================================================================================================================================================================================================================================\nInstalling:\n tarantool                                              x86_64                                              1.6.8.487-1.el7.centos                                                tarantool                                              1.2 M\nInstalling for dependencies:\n libgomp                                                x86_64                                              4.8.5-4.el7                                                           base                                                   130 k\n libyaml                                                x86_64                                              0.1.4-11.el7_0                                                        base                                                    55 k\nTransaction Summary\nInstall  1 Package (+2 Dependent packages)\nTotal download size: 1.4 M\nInstalled size: 3.6 M\nIs this ok [y/d/N]: \n[CUT]                                                          \nInstalled:\n  tarantool.x86_64 0:1.6.8.487-1.el7.centos                                                                                                                                        \nDependency Installed:\n  libgomp.x86_64 0:4.8.5-4.el7                                                                                         libyaml.x86_64 0:0.1.4-11.el7_0                                                                                        \nComplete!\n[root@37c3c2093d41 /]# tarantool\ntarantool: version 1.6.8-487-g2d8b6cb\ntype 'help' for interactive help\ntarantool> \n. EPEL is needed for python-msgpack\nFixed via 12e35278b467f448d1dc4b331aaad254575a938e\n. @bigbes @lenkis There is tarantool/tarantool-c project.\nPlease move this ticket to appropriate project. I granted permissions to all projects for @lenkis.\nDon't forget to remove milestone after closing the ticket.\n. Fixed in 1.6.8-498-g8e7a5bc\n.\nProgram received signal SIGABRT, Aborted.\n0xb6b637a0 in raise () from /lib/libc.so.6\n(gdb) bt\n0  0xb6b637a0 in raise () from /lib/libc.so.6\n1  0xb6b64d78 in abort () from /lib/libc.so.6\n2  0xb6b9f2e4 in __libc_message () from /lib/libc.so.6\n3  0xb6c2835c in __fortify_fail () from /lib/libc.so.6\n4  0xb6c28318 in __stack_chk_fail () from /lib/libc.so.6\n5  0x7f685a30 in si_profiler_histogram_temperature (p=p@entry=0x7f78ccf4) at sophia/index/si_profiler.c:102\n6  0x7f6b1700 in si_profiler (p=p@entry=0x7f78ccf4) at sophia/index/si_profiler.c:158\n7  0x7f6b3394 in se_confdb (rt=0xbeffe158, pc=, e=0x7f742878) at sophia/environment/se_conf.c:666\n8  se_confprepare (e=0x7f742878, e@entry=0x7f785250, rt=rt@entry=0xbeffe6c8, c=0x7f7c3824, serialize=2138843740, serialize@entry=0)\nat sophia/environment/se_conf.c:907\n\n9  0x7f6b4254 in se_confquery (e=0x7f785250, op=op@entry=1, path=0x7f6dcb24 \"performance.reqs\", valuetype=valuetype@entry=SS_I64,\nvalue=0xbeffec10, value@entry=0xbeffec08, valuesize=valuesize@entry=4, size=size@entry=0x0) at sophia/environment/se_conf.c:1051\n\n10 0x7f6b4504 in se_confget_int (o=, path=) at sophia/environment/se_conf.c:1112\n11 0x7f6c56e0 in sp_getint (ptr=, path=0x7f6dcb24 \"performance.reqs\") at sophia/sophia/sophia.c:227\n12 0x7f5d5db4 in sophia_queue (e=0x7f784e20) at /home/fedora/rtsisyk/rpmbuild/BUILD/tarantool-1.6.8.505/src/box/sophia_engine.cc:248\n13 sophia_async_schedule (loop=0x7f777480 , w=)\nat /home/fedora/rtsisyk/rpmbuild/BUILD/tarantool-1.6.8.505/src/box/sophia_engine.cc:272\n\n14 0x7f6cfc6c in ev_invoke_pending (loop=0x7f777480 )\nat /home/fedora/rtsisyk/rpmbuild/BUILD/tarantool-1.6.8.505/third_party/libev/ev.c:3171\n\n15 0x7f6d302c in ev_run (loop=0x7f777480 , flags=4)\nat /home/fedora/rtsisyk/rpmbuild/BUILD/tarantool-1.6.8.505/third_party/libev/ev.c:3571\n\n16 0x7f5778cc in main (argc=2137870892, argv=)\nat /home/fedora/rtsisyk/rpmbuild/BUILD/tarantool-1.6.8.505/src/main.cc:658\n\n``\n. compile on 32-bit platform in RelWithDebInfo with-Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong`:\n```\ndefine TARANTOOL_C_FLAGS \"-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -march=armv7-a -mfpu=vfpv3-d16  -mfloat-abi=hard  -fexceptions -funwind-tables -fno-common -fopenmp -std=c11 -Wall -Wextra -Wno-strict-aliasing -fno-gnu89-inline\"\n/* CXX compile flags used to build Tarantool /\ndefine TARANTOOL_CXX_FLAGS \"-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -march=armv7-a -mfpu=vfpv3-d16  -mfloat-abi=hard  -fexceptions -funwind-tables -fno-common -fopenmp -std=c++11 -Wall -Wextra -Wno-strict-aliasing -Wno-invalid-offsetof\"\n```\n. https://kojipkgs.fedoraproject.org//work/tasks/7510/13037510/build.log \n. Who need this feature in 1.6.x? Please consider to move to 1.7.x\n. There is no customer => wishlist\n. https://raphaelhertzog.com/2010/09/27/different-dependencies-between-debian-and-ubuntu-but-common-source-package/\n. Actual stack trace\n0   libsystem_kernel.dylib              0x00007fff948e4002 __pthread_kill + 10\n1   libsystem_pthread.dylib             0x00007fff87d225c5 pthread_kill + 90\n2   libsystem_c.dylib                   0x00007fff8d49e6e7 abort + 129\n3   tarantool                           0x0000000103b811f5 sig_fatal_cb(int) + 177\n4   libsystem_platform.dylib            0x00007fff9139aeaa _sigtramp + 26\n5   ???                                 000000000000000000 0 + 0\n6   tarantool                           0x0000000103bd7f52 ipc_value_new + 167\n7   tarantool                           0x0000000103be5e35 lbox_ipc_channel_put(lua_State*) + 169\n8   tarantool                           0x0000000103c16737 lj_BC_FUNCC + 52\n. @Vavilen we probably can't reproduce this crash without /path/to/file.lua content. Could you please extract a test case and post it to this ticket? You can also send it to roman@tarantool.org if your code has some sensitive information.\nThanks!\n. Fixed. Please add  a test case and close this ticket.\n. Confirmed.\n. Original LuajJIT doesn't crash:\n```\n./src/luajit \nLuaJIT 2.1.0-beta1 -- Copyright (C) 2005-2015 Mike Pall. http://luajit.org/\nJIT: ON SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse\n\nstring.rep('x', 1024 * 1024 * 1024)\n```\n. Discussed today => postpone.\nI fixed box/tuple.test.lua to avoid such problem.\n. Duplicate of #1350 \n. Fixed in 1.6.8-530-g9c48ea8\n. Please track tarantool-php tickets in tarantool-php project. Thanks! \n. Fixed\n. Fixed 1.6.8-543-ge1a0dee\n. Needed for #1821, moved to 1.7.3. => https://github.com/tarantool/small/issues/7\n. Reviewed today.\n. Pushed to 1.8\n. OK, moved to 1.8. I updated readme.\nhttps://github.com/tarantool/rocks/commit/f8b7fe83abd3aa6ec0727d36aad91133bbf8be86\n. https://github.com/tarantool/test-run/issues/29\n. /etc/tarantool/instances.enabled is the only registry of instances used by sysvinit script.\nIn other words, there is no magic under the hood.  Please stop an instance first and then remove it from /etc.\n\nThis behaviour is fixed in systemd configuration (centos 7, fedora, Debian/Ubuntu is coming soon), because systemd tracks started instances somewhere in its internals.\nI don't think that a fix of this problem for sysvinit is really important for the project. Sorry.\n. Please just omit pid_file option in box.cfg{} -  tarantoolctl creates a pid file automatically.\nWe will update example.lua and documentation.\n. This problem should be fixed in the same way as it was done for console.listen() - try to connect to existing socket file and than remove it on fail.\n. Affects me too.\n. fiber.join() should return a Lua object returned by fiber function or error.\n. :upsert() requires a tuple as the first argument, :update() requires a key.\nActually key is also tuple(=array), but Lua bindings automatically wrap scalars to one-element array for convenience, i.e. box.space.tester:update(1,{{'=',2,'B'}})  is equivalent to box.space.tester:update({1},{{'=',2,'B'}}).\nI don't think that wrapping scalars to one-element tuples for :upsert() and :replace() is very useful and needed for any real cases.\n. @kostja  do you think that box.space.tester:upsert(1 <!-- scalar,{{'=',2,'B'}}) actually makes sense?\n. My customer has the following configuration:\nbox.cfg {\n  work_dir = \"/mnt/some-tarantool-data/\";\n  wal_dir = \"wals/\";\n  snap_dir = \"snaps/\";\n}\ntarantoolctl creates /var/lib/tarantool/instance/wals|snaps/ instead of /mnt/some-tarantool-data/wals|snaps/\n. => Please use absolute paths in snap_dir, wal_dir and sophia_dir.\nwork_dir is legacy (see #1425).\n. 1.6.8-591-gc72dcf7\n. Please make box.snapshot() after performing DDL requests (box.schema.space.create and so on) with wal_mode = 'none'.\n. https://github.com/tarantool/tarantool/blob/1.7/src/lua/utils.c#L61\n. Pushed to 1.7.\n. Problem was caused by misusage of req->finish callback in coio_task().\nI'll prepare proper fix on Monday.\n. There are no reasons to fail on <1.6.9 data. Please consider to move to 1.7.4.\n. 1.7.4 is still backward-compatible with 1.6.x. Moved to 1.7.5.\n. Any progress?\n. sp_get, sp_cast and void*-style polymorphism were removed as part of #1452.\nTest cases will be added as part of #1484\n. Hi, \"./00000000000000000849.xlog wasn't correctly closed\" itself it is not a bug.\nProbably Tarantool was killed or crashed.\n. Superseded by #1452\n. Isn't it better to name this feature console.autocompletion() or console.completion() instead of console.ac()?\n. Confirmed.\n. Confirmed.\n. @kostja this fix was buggy. I sent my comments to @GeorgyKirichenko \n. tarantool> 2016-04-15 11:26:45.001 [4484] main/104/snapshot_daemon D> TimedOut at /data/work/tarantool/1.6/src/ipc.c:185\n2016-04-15 11:26:46.001 [4484] main/104/snapshot_daemon D> TimedOut at /data/work/tarantool/1.6/src/ipc.c:185\n2016-04-15 11:26:47.000 [4484] main/104/snapshot_daemon D> TimedOut at /data/work/tarantool/1.6/src/ipc.c:185\n2016-04-15 11:26:48.001 [4484] main/104/snapshot_daemon D> TimedOut at /data/work/tarantool/1.6/src/ipc.c:185\n2016-04-15 11:26:49.001 [4484] main/104/snapshot_daemon D> TimedOut at /data/work/tarantool/1.6/src/ipc.c:185\n. I don't think that anybody need a custom value for logger when tarantoolctl is used.\n. Anyway,  it is easy to fix than to document.\n. Probably 1.8... Definitely not for 1.7.0 (alpha).\n. https://github.com/tarantool/doc/issues/99\n. \nAlready implemented.\n. Pushed\n. Already fixed by #1452\n```\ntarantool> box.schema.space.create('test', { engine = 'phia' })\ntarantool> box.space.test:create_index('primary')\ntarantool> box.space.test:truncate()\n...\n```\nNeed a test case.\n. This problem is still actual:\n```\ntarantool> box.schema.space.create('vinyl',{engine='vinyl'})\ntarantool> box.space.vinyl:create_index('primary')\n\n\nunique: true\n  parts:\ntype: NUM\n    fieldno: 1\n  id: 0\n  space_id: 512\n  name: primary\n  type: TREE\n...\n\ntarantool> box.space.vinyl:insert({1, 2})\n...\ntarantool> box.space.vinyl:truncate()\n\nerror: 'index file ''./512:0/00000000000000000000.00000000000000000002.index.incomplete''\n    unlink error: No such file or directory'\n...\n. Duplicate of #940\n.\n2016-08-01 13:57:25.376 [18971] main/101/interactive C> version 1.7.1-117-ga6aa47c\n2016-08-01 13:57:25.376 [18971] main/101/interactive C> log level 5\n2016-08-01 13:57:25.376 [18971] main/101/interactive I> mapping 1073741824 bytes for tuple arena...\n2016-08-01 13:57:25.383 [18971] main/103/applier/:3313 I> connected to 1.6.8 at 0.0.0.0:3313\n\n2016-08-01 13:57:25.383 [18971] main/101/interactive I> bootstraping replica from 0.0.0.0:3313\n2016-08-01 13:57:25.385 [18971] main/103/applier/:3313 I> can't join/subscribe\n2016-08-01 13:57:25.385 [18971] main/103/applier/:3313 applier.cc:178 E> ER_UNKNOWN_REQUEST_TYPE: Unknown request type 2\n2016-08-01 13:57:25.385 [18971] main/101/interactive applier.cc:178 E> ER_UNKNOWN_REQUEST_TYPE: Unknown request type 2\n2016-08-01 13:57:25.385 [18971] main/101/interactive F> can't initialize storage: Unknown request type 2\n```\n. There is no test case - we don't have a framework to test 1.6 <-> 1.7 interoperability.\n. >  Out of order LSNs from phia at the first stage of JOIN\n\nMixed phia/memtx rows in WALs\n\nTested by #2001 \n\nDDL\n\nDDL will be tested by #1911\n=> This ticket is a duplicate. # \nSimple UDP echo server\nTarantool currently don't have :func:socket.udp_server(), but this\nfunction can be implemented using sockets and fibers:\n```\n!/usr/bin/env tarantool\nlocal socket = require('socket')\nlocal errno = require('errno')\nlocal fiber = require('fiber')\nlocal function udp_server_loop(s, handler)\n    fiber.name(\"udp_server\")\n    while true do\n        -- try to read a datagram first\n        local msg, peer = s:recvfrom()\n        if msg == \"\" then\n            -- socket was closed via s:close()\n            break\n        elseif msg ~= nil then\n            -- got a new datagram\n            handler(s, peer, msg)\n        else\n            if s:errno() == errno.EAGAIN or s:errno() == errno.EINTR then\n                -- socket is not ready\n                s:readable() -- yield, epoll will wake us when new data arrived\n            else\n                -- socket error\n                local msg = s:error()\n                s:close() -- save resources and don't wait GC\n                error(\"Socket error: \" .. msg)\n            end\n        end\n    end\nend\nlocal function udp_server(host, port, handler)\n    local s = socket('AF_INET', 'SOCK_DGRAM', 0)\n    if not s then\n        return nil -- check errno:strerror()\n    end\n    if not s:bind(host, port) then\n        local e = s:errno() -- save errno\n        s:close()\n        errno(e) -- restore errno\n        return nil -- check errno:strerror()\n    end\nfiber.create(udp_server_loop, s, handler) -- start a new background fiber\nreturn s\n\nend\n```\nUsage:\n.. code-block:: lua\n```\nlocal function handler(s, peer, msg)\n    -- You don't have to wait until socket is ready to sent UDP\n    -- s:writable()\n    s:sendto(peer.host, peer.port, \"Pong: \" .. msg)\nend\nlocal server = udp_server('127.0.0.1', 3548, handler)\nif not server then\n    error('Failed to bind: ' .. errno.strerror())\nend\nprint('Started')\nrequire('console').start()\n```\nThe example looks a little bit complicated because it actually check\nsocket errors.\n. The problem is resolved, can I close this ticket?\n. Fixed in tarantool/mysql\n. Sorry for the late answer.\nConfirmed, one liner.\n. Needed for Oracle Connector.. fiber_channel has problems with inline functions. The possible solution is to patch extra/apigen to cut everything between curly brackets ({}) for functions:\n```\n!/bin/sh\nsed -n '/^\\/** \\cond public *\\/$/,/^\\/** \\endcond public *\\/$/P'| \\\n    sed -e '/inline/{:1;N;s/{.*}/;/;T1}'\n```\nstatic inline bool\nfiber_channel_is_full(struct fiber_channel *ch)\n{\n        return ch->count >= ch->size;\n}\n=>\nstatic inline bool\nfiber_channel_is_full(struct fiber_channel *ch)\n;\nThe sed expression should also cut \"static inline\" too. \nI exported fiber_cond into public API. Since fiber_channel is not required for Oracle Connector anymore, I'm closing this ticket. Please send a pull requests with patched extra/apigen if you want fiber_channel too, I don't have time for that.. Splitted into separate tickets.\n. => https://github.com/tarantool/luaossl\n@Sulverus @GeorgyKirichenko can we close this ticket?\n. We decided to cease development of built-in 'crypto' module and switch completely to luaossl.\nOriginal patch for crypto/digest by @GeorgyKirichenko is attached below:\ngh_1456_crypto_rsa.patch.txt\n. pcall() usage is incorrect.\nUse pcall(function() box.space.K5:insert{1} end)) instead of pcall(box.space.K5:insert{1}). \n. Do you have a reproducible test case? Probably this bug can be fixed by someone else.\n. I can't reproduce this crash on Linux:\ncmake . -DCMAKE_BUILD_TYPE=Release\n./src/tarantool \n./src/tarantool: version 1.7.0-1031-g9d00ed7\ntype 'help' for interactive help\ntarantool> box.cfg{}\n. Fixed, tested by @bigbes \n. It was easy to fix the error messages than report this ticket.\n. Please just fix it and push.. Confirmed:\nbox.space.test:select({}, {iterator = 'BITS_ALL_SET' } )\n<HANGS>\nProbably 1.6.8 regression caused by my buggy refactoring.\n. Fixed in 1.6.8-702-g3136f5e\n. I don't understand this ticket\n. This ticket looks like a duplicate of #1916. > the checkpoint manager will automatically advance (write a message to .xctl file) the checkpoint to position x when it sees that all LSN > x are dumped.\nI don't understand  this idea. How is it supposed to work for memtx snapshots?\n. one liner\n. I can't reproduce this bug on the current code base.\nTest case is too large. Can I reduce the number of inserts from 100000000 to 1000000?\n. Fixed long time ago. Covered by vinyl/stress.test.lua\n. Please check behaviour of other implementations / programming languages for described problems first.\nIt is OK to change JSON defaults for the next major release (1.7.x or 1.8.x).\n. Indexing, Iteration, Features are finished, disk I/O moved to #1610\n. Please apt-get install apt-transport-https and use \ndeb https://packagecloud.io/tarantool/1_6/debian/ wheezy main\ndeb-src https://packagecloud.io/tarantool/1_6/debian/ wheezy main\ninstead of download.tarantool.org\n. ```\nTarantool client utility (1.7.3-47-gd200043)\nUsage:\n    tarantoolctl stop \n    tarantoolctl enter \n    tarantoolctl restart \n    tarantoolctl status \n    tarantoolctl connect \n    tarantoolctl start \n    tarantoolctl logrotate \n    tarantoolctl cat .. [--space=space_no ..] [--show-system][--from=from_lsn] [--to=to_lsn]\n    tarantoolctl reload  \n    tarantoolctl play  .. [--space=space_no ..] [--show-system] [--from=from_lsn] [--to=to_lsn]\n    tarantoolctl eval    # file version\n     | tarantoolctl eval  # pipe version\n    tarantoolctl check \n```. Ahh, they are ordered by a Lua hash table. In other words, the order is random. We need to fix it.\n. ###  \"Usage\" dialog\n1) ./extra/dist/tarantoolctl # displays extended help\n2) ./extra/dist/tarantoolctl -h\nbuiltin/internal.argparse.lua:142: unknown options: h\n3) ./extra/dist/tarantoolctl --help # displays extended help\nPlease display the list of commands only without extra help for cases 1 and 2.\nError messages\ngrep -E \"log.(error|warn|info)\" ./extra/dist/tarantoolct\nlog.error(\"Failed to check instance file '%s'\", err)\n            log.error(\"Failed to load defaults file: %s\", msg)\n            log.error('Failed to execute defaults file: %s', msg)\n            log.error('Unknown user: %s', d.username)\n            log.error('Group lookup by gid failed: %d', user_data.pw_gid)\n        log.error('Instance directory (instance_dir) is not set in %s', default_file)\n        log.error('Instance directory %s does not exist', instance_dir)\n        log.error(\"Can't stat %s: %s\", arg0, errno.strerror())\n    log.info(\"mkdir %s\", dirname)\n        log.error(\"Can't mkdir %s: %s\", dirname, errno.strerror())\n        log.error(\"Can't chown(%s, %s, %s): %s\", default_cfg.username,\n        log.error(\"Configuration failed: %s\", data)\n    log.info('Run console at %s', console_sock)\n        log.error(\"Can't chmod(%s, %s) [%d]: %s\", console_sock, mode, errno(),\n    log.info(\"Starting instance...\")\n        log.error(\"Error, while checking syntax: halting\")\n        log.error(\"The daemon is already running: PID %s\", pid)\n        log.error(\"Start failed: %s\", data)\n        log.info(\"Stopping instance...\")\n            log.error(\"Process is not running (pid: %s)\", pid_file)\n            log.error(\"Can't read pid file %s: %s\", pid_file, errno.strerror())\n            log.error(\"Broken pid file %s\", pid_file)\n            log.error(\"Can't kill process %d: %s\", pid, errno.strerror())\n    log.info(\"File '%s' is OK\", instance_path)\n        log.error(\"Error, while checking syntax: halting\")\n        log.error(\"Can't connect to %s (%s)\", console_sock_path, errno.strerror())\n            log.error(\"Please add $USER to group '%s': usermod -a -G %s $USER\",\n            log.error(\"failed to connect to tarantool\")\n            log.error(\"Error, while executing remote command:\")\n            log.error(error_response.error)\n            log.info('%s is stopped (pid file does not exist)', instance_name)\n        log.error(\"Can't access pidfile %s: %s\", pid_file, errno.strerror())\n        log.error(\"Pid file exists, but the control socket (%s) doesn't\",\n            log.warn(\"Can't access control socket '%s' [%d]: %s\", console_sock,\n    log.info('%s is running (pid: %s)', instance_name, default_cfg.pid_file)\n            log.error(\"Usage:\")\n            log.error(\" - tarantoolctl eval instance_name file.lua\")\n            log.error(\" - <command> | tarantoolctl eval instance_name\")\n            log.error(\"%s: %s\", filename, err)\n        log.warn(\"pid file exists, but the control socket (%s) doesn't\",\n        log.error(\"control socket exists, but tarantool doesn't listen on it\")\n        log.error(\"Error, while reloading config:\")\n        log.error(error_response.error)\n        log.error(\"Processing file '%s'\", file)\n        log.info((\"Processing file '%s'\"):format(file))\n        log.error(\"Not enough arguments for '%s' command\", command_name)\n        log.error('Instance %s is not found in %s', instance_name, instance_dir)\n        log.error(\"Unknown command '%s'\", command_name)\n        log.error(\"    \" .. line, name)\n    log.error(\"Tarantool client utility (%s)\", _TARANTOOL)\n            log.error(\"Usage:\\n\")\n            log.error(\"\")\n            log.error(command_struct.help.description)\n        log.error(\"Config file: %s\", default_file)\n    log.error(\"\")\n    log.error(\"Usage:\")\n                log.error(\"\")\n                log.error(cmd.help.description)\n    log.error(\"Error: not enough arguments for '%s' command\\n\", command_name)\nPlease review all these messages carefully and fix messages like \"Error, while checking syntax: halting\".\n. one more case:\n/lib/x86_64-linux-gnu/libc.so.6(+0x7811e)[0x7f9f20c0711e]\ntarantool parallel.test.lua <running>[0x4c7911]\ntarantool parallel.test.lua <running>[0x49c890]\ntarantool parallel.test.lua <running>[0x49d29f]\ntarantool parallel.test.lua <running>(phia_env_delete+0x14c)[0x49cfdc]\ntarantool parallel.test.lua <running>(_ZN10PhiaEngineD1Ev+0x40)[0x4960a0]\ntarantool parallel.test.lua <running>(_ZN10PhiaEngineD0Ev+0x19)[0x496199]\ntarantool parallel.test.lua <running>(_Z15engine_shutdownv+0xce)[0x448c2e]\ntarantool parallel.test.lua <running>(box_free+0x58)[0x458538]\ntarantool parallel.test.lua <running>(_Z14tarantool_freev+0x24)[0x42dca4]\n/lib/x86_64-linux-gnu/libc.so.6(+0x35e08)[0x7f9f20bc4e08]\n/lib/x86_64-linux-gnu/libc.so.6(+0x35e55)[0x7f9f20bc4e55]\ntarantool parallel.test.lua <running>[0x63c23c]\ntarantool parallel.test.lua <running>[0x5d615b]\ntarantool parallel.test.lua <running>(lua_pcall+0x1d8)[0x5a3638]\ntarantool parallel.test.lua <running>(lbox_call+0x23)[0x5209e3]\ntarantool parallel.test.lua <running>[0x519b98]\n. Duplicate of #1491 \n. Fixed in 1.7.0-1004-ga38b93b\n. Problem with -Wpointer-to-int-cast on musl libc was fixed in 1.7.x. 1.6.x is not affected.\nAlpine Linux / Docker feature request moved to  #1502\nSee also #1249 \n. Already fixed in 1.6.8+. \nI updated try.tarantool.org from 1.6.8-501 to 1.6.8-691 .\n. @racktear I think this ticket is finished.\n. one more problem:\n```\n0  0x000000000049faac in si_cachepool_pop (p=0x19f4790) at /data/work/tarantool/1.7/src/box/phia.c:8717\n1  0x000000000049ed25 in phia_index_read (db=0x1a456b0, key=0x1a41410, order=PHIA_EQ, result=0x7f1bcb7fa588, x=0x1a412f8, x_search=1, cache=0x0,\ncache_only=false, statget=0x7f1bcb7fa578) at /data/work/tarantool/1.7/src/box/phia.c:13481\n\n2  0x00000000004a5183 in phia_get (t=0x1a41240, key=0x1a60560, result=0x7f1c110504b8, cache_only=false)\nat /data/work/tarantool/1.7/src/box/phia.c:13904\n\n3  0x0000000000495f5e in phia_get_cb (ptr=0x7f1c110503b0) at /data/work/tarantool/1.7/src/box/phia_engine.cc:254\n4  0x00000000004f9a20 in coio_on_exec (req=0x7f1c110503b0) at /data/work/tarantool/1.7/src/coeio.c:157\n5  0x000000000054e6e1 in eio_execute (self=0x7f1bcb7fa748, req=0x7f1c110503b0) at /data/work/tarantool/1.7/third_party/libeio/eio.c:2015\n6  0x000000000054d4fd in etp_proc (thr_arg=0x9d2fb0 ) at /data/work/tarantool/1.7/third_party/libeio/etp.c:373\n7  0x00007f1c1256f454 in start_thread (arg=0x7f1bcb7ff700) at pthread_create.c:334\n8  0x00007f1c11a18eed in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\n```\n. one more problem:\n```\n0  0x000000000049faac in si_cachepool_pop (p=0x19f4790) at /data/work/tarantool/1.7/src/box/phia.c:8717\n1  0x000000000049ed25 in phia_index_read (db=0x1a456b0, key=0x1a41410, order=PHIA_EQ, result=0x7f1bcb7fa588, x=0x1a412f8, x_search=1, cache=0x0,\ncache_only=false, statget=0x7f1bcb7fa578) at /data/work/tarantool/1.7/src/box/phia.c:13481\n\n2  0x00000000004a5183 in phia_get (t=0x1a41240, key=0x1a60560, result=0x7f1c110504b8, cache_only=false)\nat /data/work/tarantool/1.7/src/box/phia.c:13904\n\n3  0x0000000000495f5e in phia_get_cb (ptr=0x7f1c110503b0) at /data/work/tarantool/1.7/src/box/phia_engine.cc:254\n4  0x00000000004f9a20 in coio_on_exec (req=0x7f1c110503b0) at /data/work/tarantool/1.7/src/coeio.c:157\n5  0x000000000054e6e1 in eio_execute (self=0x7f1bcb7fa748, req=0x7f1c110503b0) at /data/work/tarantool/1.7/third_party/libeio/eio.c:2015\n6  0x000000000054d4fd in etp_proc (thr_arg=0x9d2fb0 ) at /data/work/tarantool/1.7/third_party/libeio/etp.c:373\n7  0x00007f1c1256f454 in start_thread (arg=0x7f1bcb7ff700) at pthread_create.c:334\n8  0x00007f1c11a18eed in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\n```\n. Duplicate of #1077 which is already fixed in 1.7.x.\nYour example produces the following error in the latest 1.7.x:\n2016-05-31 22:55:50.793 [15315] coeio tuple_update.cc:946 E> UPSERT operation failed:\n2016-05-31 22:55:50.793 [15315] coeio tuple_update.cc:291 E> ER_ARG_TYPE: Argument type in operation '+' on field 1 does not match field type: expected a NUMBER\n. I have to admit that Sophia is not production-ready in 1.6.x. I don't think that back-porting this fix to 1.6.x makes sense. Sorry.\nCurrently our team works hardly to resolve all issues with disk engine in 1.7.x branch.\nPlease be patient, we will manage to release 1.7 alpha soon.\n. ```\npsql\npsql (9.5.3)\nType \"help\" for help.\npostgres=# SELECT 1;\n ?column? \n\n    1\n\n(1 row)\npostgres=# ^C\npostgres=# ^C\npostgres=# ^C\npostgres=# /q <!-- ^D\n```\n```\nPython 2.7.11+ (default, May  9 2016, 15:54:33) \n[GCC 5.3.1 20160429] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n1+1\n2\nKeyboardInterrupt\n<!-- ^D\n```\n\n\n\n```\n$ nodejs\n\n1+1\n2\n(To exit, press ^C again or type .exit)\n```\n\nswift\nWelcome to Swift version 3.0-dev (LLVM 752e1430fc, Clang 3987718dae, Swift 36739f7b57). Type :help for assistance.\n  1> 1+1\n$R0: Int = 2\n  2> ^C\n  2> ^C\n  2> ^D\n. rolling feature => 1.7.3\n. I suggest to move to 1.7.4\n. I don't have any ideas how to implement this feature, moved to 1.7.4\n. 1.7.2-283-g8c4f29b. Hi, our URI parser doesn't support such syntax:\n```\n require('uri').parse('admin:@localhost:3301')\n\n\nnull\n...\ntarantool>  require('uri').parse('admin@localhost:3301')\n\n\n\nhost: localhost\n  service: '3301'\n  login: admin\n...\n```\n\nYou need to patch src/uri.rl + add a test case in test/unit/uri.cc to fix it.\n. What is about a test case?\n. 1. uri.rl is OK\n```\ntarantool> uri.parse('admin@host')  <!-- NULL password\n\n\nhost: host\n  login: admin\n...\n\ntarantool> uri.parse('admin:@host') <!--  empty password\n\npassword: \n  host: host\n  login: admin\n...\n```\nThis workaround is unnecessary:\n\n```\nindex 4e22b04..baa4d84 100644\n--- a/src/lua/console.lua\n+++ b/src/lua/console.lua\n\nif u.login ~= nil and u.password == nil then\n-- Not specifying a password means empty password.\n-- Required for passwordless URI forms like admin@host\nu.password = ''\nend\n```\n\nNULL means 'password is not set'. \n'' (empty string) means that user explicitly set empty password.\nPlease pass MsgPack NULL in case of 'admin@host'.\nTarantool should allow AUTH for  'guest' with NULL password. Currently it is not implemented properly and there is no test case. You can fix this problem too or open a separate ticket.\nSee authenticate() in authenticate.cc for details.\n. You don't need to make a separate pull request to 1.7 branch, we usually push  bug fixes to 1.6 and then merge entire 1.6 branch to 1.7.\n. What is wrong with autocompletion on ffi.metatype()? I do not understand.\n. FFI metatypes:\ntarantool> ffi.cdef([[struct gh1517 {int a;}]])\ntarantool> ffi.metatype('struct gh1517', { __index = { method = function() return 'xx' end } })\ntarantool> data = ffi.new('struct gh1517')\ntarantool> data.<TAB> <!-- nothing\ntarantool> data:<TAB> <!-- nothing\nRegular metatables:\ntarantool > x = setmetatable({a = 10}, { __index = { method = function() return 'xx' end } })\ntarantool> x.<TAB>\nx.a        x.method(  \ntarantool> x:<TAB> <!-- x:method(\n. Fixed in 1.6.8-701-g11be0cd\n. Splitted to individual tickets.\n. ```\n0  0x00000000006a4d8f in LZ4F_isError (code=4) at /data/work/tarantool/1.7/third_party/lz4/lib/lz4frame.c:162\n1  0x000000000048f84c in vy_filter_lz4_next (f=0x7f95d6ff9fd0, dest=0x7f95d6ffa140, buf=0x7f95d023d9b8 \"\\004\\\"M\\030@@\\300\\226\\002\", size=1213)\nat /data/work/tarantool/1.7/src/box/vinyl.c:1055\n\n2  0x000000000048f1fa in vy_filter_next (c=0x7f95d6ff9fd0, dest=0x7f95d6ffa140, buf=0x7f95d023d9b8 \"\\004\\\"M\\030@@\\300\\226\\002\", size=1213)\nat /data/work/tarantool/1.7/src/box/vinyl.c:838\n\n3  0x00000000004a3e81 in vy_run_load_page (run=0x7f959c007a70, pos=92, file=0x1c16a15, compression=0xa5abc0 )\nat /data/work/tarantool/1.7/src/box/vinyl.c:3797\n\n4  0x00000000004b93ab in vy_run_iterator_load_page (itr=0x7f95d06ca251, page=92) at /data/work/tarantool/1.7/src/box/vinyl.c:8853\n5  0x00000000004b95dc in vy_iterator_pos_mid_next (itr=0x7f95d06ca251, mid=..., end=..., result=0x7f95d6ffa290)\nat /data/work/tarantool/1.7/src/box/vinyl.c:8929\n\n6  0x00000000004b9827 in vy_run_iterator_search (itr=0x7f95d06ca251, key=0x7f95943ed14f \"\\t\", vlsn=18446744073709551615, pos=0x7f95d06ca289,\nequal_key=0x7f95d6ffa2df) at /data/work/tarantool/1.7/src/box/vinyl.c:9005\n\n7  0x00000000004b9e1e in vy_run_iterator_start (itr=0x7f95d06ca251) at /data/work/tarantool/1.7/src/box/vinyl.c:9184\n8  0x00000000004ba097 in vy_run_iterator_get (itr=0x7f95d06ca251, result=0x7f95d6ffa370) at /data/work/tarantool/1.7/src/box/vinyl.c:9275\n9  0x00000000004ba86a in vy_tmp_iterator_get (virt_iterator=0x7f95d06ca249) at /data/work/tarantool/1.7/src/box/vinyl.c:9484\n10 0x0000000000491591 in sv_mergeiter_next (im=0x7f95d6ffa490) at /data/work/tarantool/1.7/src/box/vinyl.c:1824\n11 0x00000000004916df in sv_mergeiter_open (im=0x7f95d6ffa490, m=0x7f95d6ffa6f0, o=VINYL_LT) at /data/work/tarantool/1.7/src/box/vinyl.c:1861\n12 0x00000000004aeadd in si_range (q=0x7f95d6ffa6d0) at /data/work/tarantool/1.7/src/box/vinyl.c:5994\n13 0x00000000004b59ca in vy_index_read (index=0x1b1aea0, key=0x7f95943ed140, order=VINYL_LT, result=0x7f95d70a88b8, upsert=0x0,\ntx=0x7f95d7170200, cache_only=false) at /data/work/tarantool/1.7/src/box/vinyl.c:7667\n\n14 0x00000000004b83ef in vy_cursor_next_cb (ptr=0x7f95d70a87b0) at /data/work/tarantool/1.7/src/box/vinyl.c:8484\n15 0x00000000004d9613 in coio_on_exec (req=0x7f95d70a87b0) at /data/work/tarantool/1.7/src/coeio.c:163\n16 0x000000000051a849 in eio_execute (self=0x7f95d6ffa880, req=0x7f95d70a87b0) at /data/work/tarantool/1.7/third_party/libeio/eio.c:2015\n17 0x0000000000517372 in etp_proc (thr_arg=0xa81900 ) at /data/work/tarantool/1.7/third_party/libeio/etp.c:373\n18 0x00007f95d8887464 in start_thread (arg=0x7f95d6fff700) at pthread_create.c:333\n19 0x00007f95d7afd30d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\n```\ncoredump, binary, sources, data directory:\nhttps://cloud.mail.ru/public/MpVH/2w4Cviv8u\n. ztsd:\n```\n0  0x00007ffff5c1e1c8 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\n1  0x00007ffff5c1f64a in __GI_abort () at abort.c:89\n2  0x00007ffff5c17107 in __assert_fail_base (fmt=, assertion=assertion@entry=0x71b0b0 \"page < itr->run->index.header.count\",\nfile=file@entry=0x718cb8 \"/data/work/tarantool/1.7/src/box/vinyl.c\", line=line@entry=8849, \nfunction=function@entry=0x71c610 <__PRETTY_FUNCTION__.17218> \"vy_run_iterator_load_page\") at assert.c:92\n\n3  0x00007ffff5c171b2 in __GI___assert_fail (assertion=0x71b0b0 \"page < itr->run->index.header.count\",\nfile=0x718cb8 \"/data/work/tarantool/1.7/src/box/vinyl.c\", line=8849, \nfunction=0x71c610 <__PRETTY_FUNCTION__.17218> \"vy_run_iterator_load_page\") at assert.c:101\n\n4  0x00000000004b9357 in vy_run_iterator_load_page (itr=0x7ffff060f5b1, page=296) at /data/work/tarantool/1.7/src/box/vinyl.c:8849\n5  0x00000000004ba129 in vy_run_iterator_get (itr=0x7ffff060f5b1, result=0x7ffff53fa370) at /data/work/tarantool/1.7/src/box/vinyl.c:9290\n6  0x00000000004ba86a in vy_tmp_iterator_get (virt_iterator=0x7ffff060f5a9) at /data/work/tarantool/1.7/src/box/vinyl.c:9484\n7  0x0000000000491591 in sv_mergeiter_next (im=0x7ffff53fa490) at /data/work/tarantool/1.7/src/box/vinyl.c:1824\n8  0x0000000000491c90 in sv_readiter_forward (im=0x7ffff53fa440) at /data/work/tarantool/1.7/src/box/vinyl.c:1997\n9  0x00000000004aec6c in si_range (q=0x7ffff53fa6d0) at /data/work/tarantool/1.7/src/box/vinyl.c:6025\n10 0x00000000004b59ca in vy_index_read (index=0xaf0530, key=0x7ffff5920090, order=VINYL_GE, result=0x7ffff5480688, upsert=0x0,\ntx=0x7fff9e539a20, cache_only=false) at /data/work/tarantool/1.7/src/box/vinyl.c:7667\n\n11 0x00000000004b836f in vy_get_cb (ptr=0x7ffff5480580) at /data/work/tarantool/1.7/src/box/vinyl.c:8475\n12 0x00000000004d9613 in coio_on_exec (req=0x7ffff5480580) at /data/work/tarantool/1.7/src/coeio.c:163\n13 0x000000000051a849 in eio_execute (self=0x7ffff53fa880, req=0x7ffff5480580) at /data/work/tarantool/1.7/third_party/libeio/eio.c:2015\n14 0x0000000000517372 in etp_proc (thr_arg=0xa81900 ) at /data/work/tarantool/1.7/third_party/libeio/etp.c:373\n15 0x00007ffff6a5c464 in start_thread (arg=0x7ffff53ff700) at pthread_create.c:333\n16 0x00007ffff5cd230d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\n```\ncoredump, binary, sources, data directory:\nhttps://cloud.mail.ru/public/MpVH/2w4Cviv8u\n. Please try to update ztsd to the latest version: https://github.com/facebook/zstd\n. Duplicate of #1527 \n. box.connect() ;)\n. See also #401 \n. Add net.box.connect() for now and close this ticket.\n. Could we use uint name instead?\n. int => integer\nnum ? unsigned \n. 1.7.0-1186-g076a842\n. One more deadlock:\n```\n0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\n1  0x00007f022b3c8b05 in __GI___pthread_mutex_lock (mutex=0x28b9448) at ../nptl/pthread_mutex_lock.c:81\n2  0x00000000004af9bb in sx_get (x=0x28875b8, index=0x28b93c8, key=0x2887620, result=0x7f022a01f548)\nat /data/work/tarantool/1.7/src/box/phia.c:4808\n\n3  0x00000000004ad6b0 in phia_index_read (index=0x28b90e0, key=0x2887620, order=PHIA_EQ, result=0x7f022a01fa30, x=0x28875b8, x_search=1,\ncache=0x0, cache_only=true, statget=0x7f022a01f760) at /data/work/tarantool/1.7/src/box/phia.c:12011\n\n4  0x00000000004b47ea in phia_get (t=0x2887570, index=0x28b90e0, key=0x2887620, result=0x7f022a01fa30, cache_only=true)\nat /data/work/tarantool/1.7/src/box/phia.c:12679\n\n5  0x000000000049c7f3 in PhiaIndex::findByKey (this=0x28a5d20, phia_key=0x2887620) at /data/work/tarantool/1.7/src/box/phia_index.cc:117\n6  0x000000000049ac0d in PhiaSpace::executeReplace (this=0x28d3ee0, space=0x28aa110, request=0x7f022a008040)\nat /data/work/tarantool/1.7/src/box/phia_space.cc:133\n\n```\nstruct sxindex is not corrupted.\n. I fixed this deadlock, pthread_cond_wait itself is a separate problem, moving to #1601.\n. Need feedback.\n. Discussed with @kostja today, discarded.\n. lexer error is ok.\n. > Will break tarantool-avro and maybe other code.\nwhy?\n. There are post-review fixes:\n\n1) NULL has special meaning and semantics in databases. We don't implement this semantics properly, therefore this feature is misleading for most users.\nhttps://en.wikipedia.org/wiki/Null_%28SQL%29\nBelow are comments from @pgulutzan: \nWhen I have a SCALAR unique non-primary index, I cannot insert nil twice.\nI regard this as odd. Is it deliberate?\nWhen I have a SCALAR primary index, I can insert nil.\nI regard this as odd. Is it deliberate?\nWhen I have a SCALAR index, the order is: nil, booleans, numbers, strings.\nThis is wonderful, but is there a reason nil cannot also be in a NUMBER\nindex?\n=>  Please remove nil support for now.\n\n2) INT field type for HASH index\nI can create HASH index with 'INT', but there are no test cases for it.\n```\ntarantool> box.schema.space.create('fieldtypes')\ntarantool> box.space.fieldtypes:create_index(\"primary\", { type = 'HASH', parts = { 1, 'INT' }})\n\n\nunique: true\n  parts:\ntype: INT\n    fieldno: 1\n  id: 0\n  space_id: 513\n  name: primary\n  type: HASH\n...\n```\n\n=> Please add tests cases for HASH with INT field type. \n\n3) non-unique SCALAR, INT and NUMBER indexes\nI can't find test cases.\n=> Please add tests cases for unique=false with SCALAR, INT, NUMBER types\n\n4) NUMBER field type for HASH index\nIEEE 754 floating point values are senseless for HASH index. Exact comparison of two floats is always bad idea. Moreover, it is very easy to create two floats with the same text representation but different binary value.\n=> Please forbid NUMBER field type for HASH.\n\n5) SCALAR field type for HASH index\nSCALAR has the same problem as NUMBER (see above).\nThere are three options:\n- Keep it as it and add test cases\n- Forbid SCALAR field type for HASH index\n- Forbid float/double values in HASH index\nLet's discuss these options.\n\n. Discussed with @alyapunov and @kostja \n1, 2, 3 OK \n4 and 5: => allow non-unique NUMBER and SCALAR indexes and document that the behavior is implementation defined.\n. This problem is already resolved in 1.7.1. All required tests have been added.\n. > What will happen in case of creating table, where not all columns can be NULL?'\nI wanted to say spate:create_index(), not create_space(). Sorry.\n\nI think that we must define NULL/NOT NULL for each column separately.\n\nYes, I agree that it is even better to define this option per column in _space.format field.\nThanks for this note.\n. > I think that we must define NULL/NOT NULL for each column separately.\nYes, I agree that it is even better to define this option per column in _space.format field.\n. 1.7.5-193-g30ae14611. Is not critical for 1.7.0 (alpha), moving to 1.7.1 (beta).\n. cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo\nmake -j8\n./test-run.py vinyl/ --long\n```\n0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\n1  0x00007f5e13e9cb05 in __GI___pthread_mutex_lock (mutex=mutex@entry=0x1a66380) at ../nptl/pthread_mutex_lock.c:81\n2  0x00000000004febd4 in sc_ctl_shutdown (i=0x1aa1100, s=0x1a66380) at /data/work/tarantool/1.7/src/box/vinyl.c:8450\n3  vinyl_index_unref (index=index@entry=0x1aa1100) at /data/work/tarantool/1.7/src/box/vinyl.c:9486\n4  0x00000000004ff337 in vinyl_index_drop (index=0x1aa1100) at /data/work/tarantool/1.7/src/box/vinyl.c:9522\n5  0x00000000004d584d in VinylEngine::dropIndex (this=, index=0x1a8b350) at /data/work/tarantool/1.7/src/box/vinyl_engine.cc:262\n6  0x0000000000515a59 in DropIndex::commit (this=, alter=0x7f5e128081d0) at /data/work/tarantool/1.7/src/box/alter.cc:921\n7  0x0000000000515dd5 in alter_space_commit (trigger=) at /data/work/tarantool/1.7/src/box/alter.cc:637\n8  0x0000000000483d49 in trigger_run (event=0x7f5e12808098, list=0x7f5e12808110) at /data/work/tarantool/1.7/src/trigger.h:77\n9  txn_commit (txn=txn@entry=0x7f5e12808098) at /data/work/tarantool/1.7/src/box/txn.cc:250\n10 0x000000000048428e in txn_commit_stmt (txn=txn@entry=0x7f5e12808098, request=request@entry=0x7f5e12808040)\nat /data/work/tarantool/1.7/src/box/txn.cc:175\n\n11 0x00000000004862c8 in process_rw (request=request@entry=0x7f5e12808040, result=result@entry=0x7f5e1281fe88)\nat /data/work/tarantool/1.7/src/box/box.cc:168\n\n12 0x00000000004884ad in box_process1 (request=request@entry=0x7f5e12808040, result=result@entry=0x7f5e1281fe88)\nat /data/work/tarantool/1.7/src/box/box.cc:594\n\n. Related to #1592\n. Fixed by b82af8749709d74e8d7e676722d1799682c92b9e\n.\n update = function(self, str)\n        str = tostring(str or '')\n        self.value = ffi.C.crc32_calc(self.value, str, string.len(str))\n    end,\n```\ntostring(str or '') is a BUG.  \"any object\" to \"bytearray\" is a separate feature. Don't rely to tostring() for that. tostring() call should be removed. Since this change is not backward-compatible, I added 1.7.0 tag.\n. struct sinode -> struct vinyl_track\n. This feature has been removed from Sophia: https://github.com/pmwkaa/sophia/commit/0dfd1304344af22683a6acc3767c4e9ca3a38843\nI don't think that we have any questions anymore.\n. There is no loop() in coeio threads.  Please return to this ticket after removing vinyl_read_task #1672\n. Duplicate of #1541 \n. Superseded by #1599.\n. Discussed with @kostja: => log errors omly during merge, don't log errors on select(), get(), etc.\n. Postponed.\n. ## Stage 1\n- [x] Convert public vinyl API to accept struct tuple / (const char *key,  uint32_t part_count) and return struct tuple instead of struct vinyl_tuple, hide struct vinyl_tuple inside vinyl.c.\n. Stage 1 is finished, struct tuple conversion is postponed.\n. vy_tuple now used only from TX thread.\n. ## Stage 2\nActually, vy_tuple is an vinyl operation - REPLACE, DELETE, GET or UPSERT. I propose to supercede tuples with stamemts (stmt):\n- [x] Rename struct vy_tuple to struct vy_stmt\n- [x] Replace tuple->flags with uint32_t stmt->type\n- [x] Refactor all tuples methods to vy_stmt_new_TYPE()/vy_stmt_TYPE_action() style:\n  - * vy_tuple_from_data() => vy_stmt_new_replace()\n  - * vy_tuple_from_data_ex() => vy_stmt_new_upsert()\n  - * vy_tuple_from_key_key() => vy_stmt_new_get()/vy_stmt_new_delete()\n  - * vy_tuple_key_part() => vy_stmt_key_part()\n  - * vy_tuple_data() => vy_stmt_replace_tuple()\n  - * vy_tuple_data_ex() => vu_stmt_upsert_tuple() + vy_stmt_upsert_ops()\n  - * vy_tuple_compare() -> vy_stmt_compare()\nStage 3\n\n[x] Split vy_tuple_compare() to vy_stmt_compare_tuple(), vy_stmt_compare_key(), vy_stmt_compare_tuple_with_key().  Detect combination in runtime using stmt->type designator.\n[x] Split vy_tuple_key_part() to two parts (GET + DELETE, REPLACE + UPSERT)\n[x] Use const char *key, uint32_t part_count format for GET and DELETE\n[x] Use struct tuple format for tuple in REPLACE and UPSERT, raw msgpack for UPSERT ops\n. Stage 3 is over.\n\nstruct PACKED tuple\n{\n        /*\n         * sic: the header of the tuple is used\n         * to store a free list pointer in smfree_delayed.\n         * Please don't change it without understanding\n         * how smfree_delayed and snapshotting COW works.\n         */\n        /** snapshot generation version */\n        uint32_t version;\n        /** reference counter */\n        uint16_t refs;\n        /** format identifier */\n        uint16_t format_id;\n        /** length of the variable part of the tuple */\n        uint32_t bsize;\n        /**\n         * Fields can have variable length, and thus are packed\n         * into a contiguous byte array. Each field is prefixed\n         * with MessagePack packed field length.\n         */\n        char data[0];\n};\nstruct vy_stmt {\n        int64_t  lsn;\n        uint32_t size;\n        uint16_t refs; /* atomic */\n        uint8_t  type; /* IPROTO_SELECT/REPLACE/UPSERT/DELETE */\n        char data[0];\n};\nWe need 4 more bytes for lsn and one more byte for type to replace struct vy_stmt with struct tuple.\n. Actually format_id is not needed for vinyl, all index's tuples are always in the same format.\n. Discussed today => postponed\n. A spec based on @Gerold103 and @kostja proposals and layout designed by @alyapunov for the new tuple allocator in the former 1.8 branch:\n```\nstruct PACKED tuple {\n    / length of the variable part of the tuple */\n    uint32_t bsize;\n    / reference counter /\n    uint16_t refs;\n    / format identifier */\n    uint16_t format_id;\n    / offset of MessagePack array in ->raw /\n    uint8_t offset;\n    /*\n         * Format-specific metadata followed by MessagePack array\n         * @sa tuple_meta_memtx\n         * @sa tuple_meta_vinyl\n         /\n    char raw[0];\n};\nstruct PACKED tuple_meta_memtx {\n    / snapshot generation version */\n    uint32_t version;\n    / offsets table - see tuple_format **/\n    uint32_t offsets[0];\n};\nstruct PACKED tuple_meta_vinyl {\n    / lsn for MVCC */\n    int64_t lsn;\n    / statement type - IPROTO_SELECT/REPLACE/UPSERT/DELETE */\n    int8_t type;\n    / offsets table - see tuple_format /\n    uint32_t offsets[0];\n};\n```\nProfits:\n\nstruct vy_stmt and most vy_stmt wrappers are removed\nmemtx and vinyl memory levels are completely unified\nvinyl can return tuples to IPROTO and Lua without extra copies\nthis proposal requires just one extra byte in struct tuple\n\nNotes:\n\na designator of engine (tuple_meta_memtx vs tuple_meta_vinyl) can be stored in struct tuple_format. \nSELECT and DELETE statements doesn't require offsets. Please reserve a special format_id (e.g. 0) to check by assertions.\ntuple_meta_vinyl->type can be combined with tuple->format, but it is a trickly, let's try later.\ntuple->refs can be extended to 32 bit as @kostja wanted, but it is not mandatory for this ticket.\n. - [x] Introduce tuple_data() - a function to get MessagePack array from struct vy_tuple:\nconst char *\nstruct tuple_data(const char *tuple);\n[x] Remove direct access to tuple->data, rename tuple->data to tuple->raw\n[ ] Add tuple->offset member, split tuple->version into struct tuple_meta_memx\n[ ] Move offsets to struct tuple_meta_memtx, remove hacks with negative offsets\n[ ] Implement support for struct tuple_meta_vinyl in vy_stmt_XXX wrappers\n[ ] Discard vy_stmt (probably huge sed-style patch)\n[ ] Remove tuple -> tuple -> tuple conversion in vinyl public API (PROFIT!)\n\nSee fix-gh-1386-tuple-restructure-v7 branch from former 1.8 for inspiration for the first points.. vy_file removed by 16ae0d5441ab1a991c61c75c0711feea323e71d3\n. Fixed by 879743e987394498772d41fda0b3be30b1f08881\n. Implemented in 1.7.1-61-g39f9cc3\n. Excellent!\n. Duplicate of #910 \n910 re-scheduled to 1.7.x.\n. Please add a test case to vinyl/ suite.\n. Is not critical, moved to 1.7.3\n. I was able to reproduce this problem using the following command:\nwhile ./test-run.py app/fio.test.lua; do sleep 0.1; done\nPlease fix the race condition.\n. => review. 1.7.2-284-gc25e881. LuaJIT finalizers #562 ?\n. Implemented: https://github.com/tarantool/prometheus\n. We need to go deeper. \nI want to remove entire struct scheduler, but keep struct planner.\n. Postponed.\n. Hi, could you please find a workaround? This feature is hard to implement on the current code base and I don't expect that we can deliver it soon. :(\n. I mostly implemented this feature, only upsert is left. Blocked by #1570.\n. Discussed with @kostja , temperature may be needed for new planner, don't remove right now.\n. 6958           0 : vy_planner_peek_compact_temperature(struct vy_planner *p, struct vy_plan *plan)\n    6959             : {\n    6960             :         /* try to peek a hottest node with number of\n    6961             :          * branches >= watermark */\n    6962             :         struct vy_range *n;\n    6963           0 :         struct ssrqnode *pn = NULL;\n    6964           0 :         while ((pn = ss_rqprev(&p->temp, pn))) {\n    6965           0 :                 n = container_of(pn, struct vy_range, nodetemp);\n    6966           0 :                 if (n->flags & SI_LOCK)\n    6967           0 :                         continue;\n    6968           0 :                 if (n->branch_count >= plan->a)\n    6969             :                         goto match;\n    6970             :                 return 0;\n    6971             :         }\n    6972             :         return 0;\n    6973             : match:\n    6974           0 :         vy_range_lock(n);\n    6975           0 :         plan->explain = SI_ENONE;\n    6976           0 :         plan->node = n;\n    6977           0 :         return 1;\n    6978             : }\nProposal: remove vy_planner_peek_compact_temperature(), but keep metric collection for a new planner. Otherwise @feldsherov will make useless refactoring of  planner->temp ssrq (#1599).\n@kostja: need feedback\n. The same thing with vy_planner_peek_age().\n. 1) cbus has it own thread pool in a thread-local variable:\ncbus.c:41: static __thread struct fiber_pool fiber_pool;\n2) The fiber-pool uses fiber->state rlist entry to store fibers:\ncbus.c:97:  rlist_add_entry(&pool->idle, fiber(), state);\n3) cbus's fiber pool is never destroyed:\n$ grep -R fiber_pool_destroy .\n./cbus.c:fiber_pool_destroy(struct fiber_pool *pool) -- never called\n4) cord_destroy() tries to remove fibers from all lists using fiber->state rlist entry\n5) cord_destroy() is invoked from the different thread after pthread_join(), so thread-local memory of the cord contains garbage and  fiber->state points to this garbage.\nThere is no cbus_leave() or something like that so I have no idea where author of this code planned  to call fiber_pool_destroy().  I could add a workaround for this problem, but I want to discuss my WTF questions about this design first. @kostja, please ping me.\n. I can't move\n```\nstruct fiber_pool {\n    struct {\n        / Cache of fibers which work on incoming messages. */\n        struct rlist idle;\n        / The number of fibers in the pool. /\n        int size;\n        / The limit on the number of fibers working on tasks. */\n        int max_size;\n        /\n         * Fibers in leave the pool if they have nothing to do\n         * for longer than this.\n         /\n        float idle_timeout;\n        /* Staged messages (for fibers to work on) /\n        struct stailq output;\n        struct ev_timer idle_timer;\n    } attribute((aligned(CACHELINE_SIZE)));\n    struct {\n    /** The consumer thread loop. */\n    struct ev_loop *consumer;\n    /**\n     * Used to trigger task processing when\n     * the pipe becomes non-empty.\n     */\n    struct ev_async fetch_output;\n    /** The lock around the pipe. */\n    pthread_mutex_t mutex;\n    /** The pipe with incoming messages. */\n    struct stailq pipe;\n} __attribute__((aligned(CACHELINE_SIZE)));\n\n};\n```\ninto fiber.cc\n. breaking change, one liner\n. Let it be, upsert semantics can be changed in the future.\n. ssrq/heap should be in struct scheduler (global for indices), instead of per index.\n. it is a design bug, not a feature \n. This problem will be fixing after implementing new scheduler.\n. gh-1603.diff.txt\n```\nvinyl/hermitage.test.lua                                        [ fail ]\nTest failed! Result content mismatch:\n--- vinyl/hermitage.result      Thu Aug  4 14:48:24 2016\n+++ vinyl/hermitage.reject      Fri Aug  5 14:25:54 2016\n@@ -278,7 +278,7 @@\n ...\n c2(\"t:get{1}\") -- {1, 10}\n ---\n-- - [1, 10]\n+- - [1, 11]\n ...\n c2:commit() -- ok\n ---\n@@ -459,7 +459,7 @@\n ...\n c1(\"t:get{3}\") -- nothing\n ---\n-- \n+- - [3, 30]\n ...\n c1:commit() -- ok\n ---\n@@ -518,7 +518,7 @@\n ...\n c2(\"t:get{1}\") -- {1, 10}\n ---\n-- - [1, 10]\n+- - [1, 20]\n ...\n c2:commit() -- rollback -- conflict\n ---\n@@ -636,7 +636,7 @@\n ...\n c1(\"t:get{2}\") -- {2, 20}\n ---\n-- - [2, 20]\n+- - [2, 18]\n ...\n c1:commit() -- ok\n ---\n@@ -699,7 +699,7 @@\n ...\n c1(\"t:get{2}\") -- finds nothing\n ---\n-- \n+- - [2, 18]\n ...\n c1:commit() -- rollback\n ---\nLast 15 lines of Tarantool Log file:\nvinyl/info.test.lua                                             [ pass ]\nvinyl/large.test.lua                                            [ disabled ]\nvinyl/mvcc.test.lua                                             [ fail ]\nTest failed! Result content mismatch:\n--- vinyl/mvcc.result   Fri Aug  5 13:45:52 2016\n+++ vinyl/mvcc.reject   Fri Aug  5 14:25:55 2016\n@@ -542,7 +542,7 @@\n ...\n c1(\"t:get{1}\")\n ---\n-- - 1\n+- - [1, 'c2']\n ...\n c2:commit()\n ---\n@@ -553,7 +553,7 @@\n --\n c1(\"t:get{1}\")\n ---\n-- - 1\n+- - [1, 'c2']\n ...\n -- commits ok since is a read only transaction\n c1:commit()\n@@ -2684,7 +2684,7 @@\n --\n c2(\"t:get{1}\") -- finds nothing\n ---\n-- \n+- - [1, 10]\n ...\n --\n c2(\"t:replace{1, 15}\")\n@@ -3035,7 +3035,7 @@\n --\n c2(\"t:get{1}\") -- {1, 3}\n ---\n-- - [1, 3]\n+- - [1, 12]\n ...\n --\n c4(\"t:get{1}\") -- {1, 12}\n@@ -3045,7 +3045,7 @@\n --\n c5(\"t:get{1}\") -- {1, 9}\n ---\n-- - [1, 9]\n+- - [1, 12]\n ...\n --\n c6(\"t:get{1}\") -- {1, 12}\n@@ -3068,12 +3068,12 @@\n --\n c1(\"t:get{1}\") -- nothing\n ---\n-- \n+- - [1, 12]\n ...\n --\n c7(\"t:get{1}\") -- nothing\n ---\n-- \n+- - [1, 12]\n ...\n --\n c2:rollback()\n@@ -3088,7 +3088,7 @@\n --\n c5(\"t:get{1}\") -- {1, 9}\n ---\n-- - [1, 9]\n+- - [1, 12]\n ...\n --\n c6(\"t:get{1}\") -- {1, 12}\n@@ -3111,12 +3111,12 @@\n --\n c1(\"t:get{1}\") -- nothing\n ---\n-- \n+- - [1, 12]\n ...\n --\n c7(\"t:get{1}\") -- nothing\n ---\n-- \n+- - [1, 12]\n ...\n --\n c4:rollback()\n@@ -3126,7 +3126,7 @@\n --\n c5(\"t:get{1}\") -- {1, 9}\n ---\n-- - [1, 9]\n+- - [1, 12]\n ...\n --\n c6(\"t:get{1}\") -- {1, 12}\n@@ -3149,12 +3149,12 @@\n --\n c1(\"t:get{1}\") -- nothing\n ---\n-- \n+- - [1, 12]\n ...\n --\n c7(\"t:get{1}\") -- nothing\n ---\n-- \n+- - [1, 12]\n ...\n --\n c5:rollback()\n@@ -3182,12 +3182,12 @@\n --\n c1(\"t:get{1}\") -- nothing\n ---\n-- \n+- - [1, 12]\n ...\n --\n c7(\"t:get{1}\") -- nothing\n ---\n-- \n+- - [1, 12]\n ...\n --\n c6:rollback()\n@@ -3210,12 +3210,12 @@\n --\n c1(\"t:get{1}\") -- finds nothing\n ---\n-- \n+- - [1, 12]\n ...\n --\n c7(\"t:get{1}\") -- finds nothing\n ---\n-- \n+- - [1, 12]\n ...\n --\n c1:rollback()\n```\n. Fixed by 66f2df684cbd5c6312a851f9395b0d7b9b00b2e0\n. Probably fixed by 0aa81d87950069ea3f4eeba077e3fe8ec45b6507, please remove and add a test case.\n. See also #1530 - assertion is  same.\n. Fixed in 1.7.1-38-g324f15a\n. Fixed in 1.7.1-24-g58be1f4\n. Already fixed by d513f6e2598ff6ad96c8e8327398dc3de298eb25\n. Please add more injections:\n\n[x] vy_page_read()\n[ ] snap_io_rate\n[ ] crc32 errors\n[ ] bad metadata in xlog_cursor_open()\n\n. ./test/xlog/snap_io_rate.test.lua fails on Travis CI:\n```\nxlog/snap_io_rate.test.lua                                      [ fail ]\nTest failed! Result content mismatch:\n--- xlog/snap_io_rate.result    Mon Feb 13 13:01:54 2017\n+++ xlog/snap_io_rate.reject    Mon Feb 13 13:10:51 2017\n@@ -23,7 +23,7 @@\n ...\n t2 - t1 > 64 / box.cfg.snap_io_rate_limit * 0.95\n\n-- true\n+- false\n ...\n box.space.snap:drop()\n```\nI temporary disabled this test, please fix.\n. See also #2253. 1.7.4-386-g07e3608f6. This problem will be fixed automatically after switching to xlog format.\nSee #1720 \n. Confirmed.\n. Downstream ticket: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=831361\n. I failed to properly refactor this place  due to engine->recovery_complete logic.\n. => Discarded\n. Good catch.\n. See also #1069 \n. @pgulutzan, we've failed to fix this problem in the simple way. I move this ticket to 1.7.3.\n. Upstream bug: https://bitbucket.org/xi/libyaml/issues/23/\n. These warnings are false-positive. Let's wait Clang upstream or Fedora maintainers to fix it.\nRedHat Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1350086\n. Fixed in upstream: https://bugzilla.redhat.com/show_bug.cgi?id=1350086\n. Fixed in 1.6.8-744-g18481f3. A test is not added because it is very hard to to make.\n. See also #1618 \n. Already fixed.\n. Yes, there is not way to insert MP_BIN from Lua.\n. Related to #1592\n. I removed this code.\n. 1.6.8-631-g2e08d87\n1.7.1-191-g08ed210\n. Needed for #623 \n. Fixed via 0d675fd5b59effb310bd96ef2154d426afc2ee0e\n1.5.5-27-g0d675fd\n1.6.8-752-g8fc147c\n1.7.1-107-g8b5db04\n. => Use OpenSSL from homebrew\n. [ 63%] Linking CXX executable tarantool\ncd /Users/roman/tarantool/1.6/src && /Users/roman/homebrew/Cellar/cmake/3.4.3/bin/cmake -E cmake_link_script CMakeFiles/tarantool.dir/link.txt --verbose=1\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++    -Wno-unknown-pragmas -fexceptions -funwind-tables -fno-common -msse2 -std=c++11 -Wall -Wextra -Wno-strict-aliasing -Wno-unused-value -Wno-deprecated-declarations -Werror -g -ggdb -O0 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names -pagezero_size 10000 -image_base 100000000 CMakeFiles/tarantool.dir/main.cc.o CMakeFiles/tarantool.dir/ffisyms.cc.o CMakeFiles/tarantool.dir/title.c.o CMakeFiles/tarantool.dir/__/third_party/libutil_freebsd/flopen.c.o CMakeFiles/tarantool.dir/__/third_party/libutil_freebsd/pidfile.c.o  -o tarantool  box/libbox.a libserver.a libcore.a ../libmisc.a lib/bitset/libbitset.a lib/csv/libcsv.a ../libmsgpuck.a ../libeio.a ../libgopt.a ../third_party/libyaml/libyaml.a /usr/lib/libreadline.dylib /usr/lib/libtermcap.dylib ../third_party/luajit/src/libluajit.a /usr/lib/libssl.dylib /usr/lib/libcrypto.dylib ../third_party/sophia/libsophia.a lib/salad/libsalad.a lib/small/libsmall.a -lpthread ../libev.a -lm ../libcoro.a lib/bit/libbit.a \nUndefined symbols for architecture x86_64:\n/usr/lib/libreadline.dylib\nCan be reproduced using my account on our test Mac:\n$ uname -a\nDarwin tt-mac.local 13.4.0 Darwin Kernel Version 13.4.0\n. This problem is caused by incomplete installation of GNU Readline on tt-mac.\n. Discussed => add ER_UNSSUPPORTED in ALTER for 1.7.2 (beta), implement in 1.7.3+ (#1653).\n. wow!\nIt would be nice to make a module (rock) for Lua.\n. @gpryor could you please make a Lua module for ASCII plotting? It should be useful for Lua community as well as for Tarantool users. We have an example here.\n. Do you mean that server returns incorrect SYNC value for ERROR responses in case of DELETE/UPDATE? I just checked 1.6/1.7 code and I can't confirm that. \nPlease provide an information about your Tarantool version and a test case. Thanks! \n. Tarantool already has bindings for sha1/sha256/sha512 implementation from OpenSSL. Unfortunately, OpenSSL lacks support for SHA3. We don't have plans to add new hash functions to upcoming 1.7.x release, but please feel free to send a pull request. Our SHA bindings are implemented in digest.lua file. \nSee also: https://github.com/openssl/openssl/issues/439\n. @FuriouslyCurious are you still interesting in adding SHA-3 bindings to Tarantool?\n. Superseded by #1720 \n. auto_increment on vinyl is hard to fix - each operation will require disk lookup (index:max()).\n. Hi, could you please provide a test case, a coredump or a backtrace?\n. You can enable coredumps (ulimit -c unlimited).\nIt is even better to send us a reproducible test case.\n. @kostja:\n\nDo nothing for now. The whole concept of calling Lua functions to\nget this data is broken is too slow, we shouldn't materialize\nit every time.\n. Discussed on scrum, move to 1.7.3\n. Actually, this is a breaking changed. I need feedback on this ticket.\n. Postponed.. I implemented required infrastructure for space:info()/index:info().  Please review.. The first step is done - box.info.vinyl().db['512/0'] garbage has been moved toindex:info() without any changes. I also removed box.info.vinyl().vinyl and box.info.vinyl().metric sections.\n\nIt seems we are not ready to freeze box.info().vinyl() and index:info() format in 1.7.4. Let's keep this API for internal use only. Please don't document, it will change in the future. Since the API is for internal use, I remove \"breaking change\" label.. Confirmed, I can reproduce that\n. I need tag \"DNA bug\"\n. msgpack.NULL can be easily replaced by 0 in the most cases except one:\ntarantool> 0 == nil\n\u2014-\n- false\n...\n. I can't reproduce this crash on my host :(\n. This problem will be fixed by removal of coredump() function, see #1886. Fixed by #1886. Please re-open if it happens again.\n. ```\nbox-py/space_crash.test.py                                      Traceback (most recent call last):\n  File \"/home/travis/build/tarantool/tarantool/test-run/lib/test.py\", line 153, in run\n    self.execute(server)\n  File \"/home/travis/build/tarantool/tarantool/test-run/lib/tarantool_server.py\", line 152, in execute\n**server.__dict__))\n\nFile \"box-py/space_crash.test.py\", line 38, in \nprint select(iproto.py_con, 1, 0, [0])\n\nFile \"box-py/space_crash.test.py\", line 26, in select\nresponse = conn._send_request(data)\n\nFile \"/home/travis/build/tarantool/tarantool/test-run/lib/tarantool-python/tarantool/connection.py\", line 283, in _send_request\nrequest)\n\nFile \"/home/travis/build/tarantool/tarantool/test-run/lib/tarantool-python/tarantool/connection.py\", line 207, in _send_request_wo_reconnect\nresponse = Response(self, self._read_response())\n\nFile \"/home/travis/build/tarantool/tarantool/test-run/lib/tarantool-python/tarantool/connection.py\", line 191, in _read_response\nlength = msgpack.unpackb(self._recv(5))\n\nFile \"/home/travis/build/tarantool/tarantool/test-run/lib/tarantool-python/tarantool/connection.py\", line 174, in _recv\n\"Lost connection to server during query\"))\n\nNetworkError: (104, 'Connection reset by peer')\n[ fail ]\nTest failed! Last 10 lines of the result file:\n\nA test case for: http://bugs.launchpad.net/bugs/712456\nVerify that when trying to access a non-existing or\nvery large space id, no crash occurs.\n\nLast 15 lines of Tarantool Log file [Instance \"box\"][/home/travis/build/tarantool/tarantool/test/var/box.log]:\n2017-03-20 14:14:17.660 [10178] iproto xrow.cc:271 E> ER_MISSING_REQUEST_FIELD: Missing mandatory field 'tuple' in request\n2017-03-20 14:14:17.683 [10178] iproto xrow.cc:271 E> ER_MISSING_REQUEST_FIELD: Missing mandatory field 'tuple' in request\n2017-03-20 14:14:17.880 [10178] iproto xrow.cc:59 E> ER_INVALID_MSGPACK: Invalid MsgPack - packet header\n2017-03-20 14:14:17.881 [10178] iproto xrow.cc:271 E> ER_MISSING_REQUEST_FIELD: Missing mandatory field 'space_id' in request\nHello, world\nEhllo, world\n2017-03-20 14:14:17.962 [10178] snapshot/101/main I> saving snapshot `/home/travis/build/tarantool/tarantool/test/var/box/00000000000000000282.snap.inprogress'\n2017-03-20 14:14:17.962 [10178] snapshot/101/main I> done\n2017-03-20 14:14:17.992 [10178] main/108/console/unix/: I> vinyl checkpoint done\n2017-03-20 14:14:18.030 [10178] main/108/console/unix/: xlog.cc:705 !> SystemError file '/home/travis/build/tarantool/tarantool/test/var/box/00000000000000000282.snap' already exists: File exists\n2017-03-20 14:14:18.037 [10178] snapshot/101/main xlog.cc:728 !> open, [/home/travis/build/tarantool/tarantool/test/var/box/00000000000000000283.snap]: Permission denied\n2017-03-20 14:14:18.037 [10178] main/108/console/unix/: xlog.cc:729 !> SystemError failed to create file '/home/travis/build/tarantool/tarantool/test/var/box/00000000000000000283.snap': Permission denied\n2017-03-20 14:14:18.051 [10178] snapshot/101/main I> saving snapshot `/home/travis/build/tarantool/tarantool/test/var/box/00000000000000000286.snap.inprogress'\n2017-03-20 14:14:18.051 [10178] snapshot/101/main I> done\n2017-03-20 14:14:18.066 [10178] main/111/snapshot I> vinyl checkpoint done\nFatal error: Failed to run test box-py/space_crash.test.py: test execution aborted, reason '(104, 'Connection reset by peer')'. Execution aborted.\n[INFO/MainProcess] process shutting down\nmake: *** [test_linux] Error 255\nThe command \"make -f .travis.mk ${TARGET}\" exited with 2.\ncache.2\nstore build cache\n0.03s\n1.24snothing changed, not updating cache\nDone. Your build exited with 1.\n. Nobody cares => 1.7.4. 1.7.4-423-g738a6afd3.\nCOEIO:\nThread 19 (Thread 0x7fffb4bfe700 (LWP 24892)):\n0  0x0000000000512c60 in mp_load_u8 (data=0x7fffb4bf9320) at /data/work/tarantool/1.7/src/lib/msgpuck/msgpuck.h:232\n---Type  to continue, or q  to quit---\n1  0x000000000051385b in mp_compare_uint (data_a=0xc93a09 \"\", data_b=0x23df4ff2 )\nat /data/work/tarantool/1.7/src/lib/msgpuck/msgpuck.h:1386\n\n2  0x000000000044127e in tuple_compare_field (field_a=0xc93a08 ,\nfield_b=0x23df4ff2 <error: Cannot access memory at address 0x23df4ff2>, type=FIELD_TYPE_UNSIGNED)\nat /data/work/tarantool/1.7/src/box/tuple.cc:565\n\n3  0x00000000004b7cb4 in vy_tuple_compare (tuple_data_a=0xc939ff \"\\t\", tuple_data_b=0xbc2ccf \"\", key_def=0xac7560)\nat /data/work/tarantool/1.7/src/box/vinyl.c:8799\n\n4  0x000000000049df60 in txv_tree_key_cmp (rbtree=0xac5e28, a=0x7fffb4bf9490, b=0xd113f0) at /data/work/tarantool/1.7/src/box/vinyl.c:2990\n5  0x000000000049c57a in txv_tree_search (rbtree=0xac5e28, key=0x7fffb4bf9490) at /data/work/tarantool/1.7/src/box/vinyl.c:2954\n6  0x000000000049de71 in txv_tree_search_key (rbtree=0xac5e28, data=0xc939ff \"\\t\", size=14, tsn=14340)\nat /data/work/tarantool/1.7/src/box/vinyl.c:2964\n\n7  0x00000000004a0ad1 in tx_get (tx=0xd111e0, index=0xac5c50, key=0xc939f0, result=0x7fffb4bf96d8)\nat /data/work/tarantool/1.7/src/box/vinyl.c:3371\n\n8  0x00000000004b5b92 in vinyl_index_read (index=0xac5c50, key=0xc939f0, order=VINYL_EQ, result=0x7ffff55d36a8, tx=0xd111e0, cache=0x0,\ncache_only=false, statget=0x7fffb4bf9780) at /data/work/tarantool/1.7/src/box/vinyl.c:8291\n\n9  0x00000000004b8a25 in vy_get (tx=0xd111e0, index=0xac5c50, key=0xc939f0, result=0x7ffff55d36a8, cache_only=false)\nat /data/work/tarantool/1.7/src/box/vinyl.c:9094\n\n10 0x00000000004b8f8d in vy_get_cb (ptr=0x7ffff55d35a0) at /data/work/tarantool/1.7/src/box/vinyl.c:9233\n11 0x00000000004d8d5d in coio_on_exec (req=0x7ffff55d35a0) at /data/work/tarantool/1.7/src/coeio.c:163\n12 0x0000000000519f89 in eio_execute (self=0x7fffb4bf9880, req=0x7ffff55d35a0) at /data/work/tarantool/1.7/third_party/libeio/eio.c:2015\n13 0x0000000000516ab2 in etp_proc (thr_arg=0xa812c0 ) at /data/work/tarantool/1.7/third_party/libeio/etp.c:373\n14 0x00007ffff6a5c464 in start_thread (arg=0x7fffb4bfe700) at pthread_create.c:333\n15 0x00007ffff5cd230d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\nTX:\nThread 1 (Thread 0x7ffff7fc7d80 (LWP 24871)):\n0  0x0000000000512c7c in mp_load_u8 (data=0x7ffff579f458) at /data/work/tarantool/1.7/src/lib/msgpuck/msgpuck.h:232\n1  0x000000000051384c in mp_compare_uint (\ndata_a=0xcb2a39 \"\\001O\\261\\332\\317\\024g\\345NAq\\025_\\026\\302\\317\\024g\\345NAq\\025_\\317\\024g\\345NAq\\025_\\317\\024g\\345NAq\\025_\", \ndata_b=0xc8fa18 <incomplete sequence \\316>) at /data/work/tarantool/1.7/src/lib/msgpuck/msgpuck.h:1385\n\n2  0x000000000044127e in tuple_compare_field (\nfield_a=0xcb2a38 \"\\316\\001O\\261\\332\\317\\024g\\345NAq\\025_\\026\\302\\317\\024g\\345NAq\\025_\\317\\024g\\345NAq\\025_\\317\\024g\\345NAq\\025_\", \nfield_b=0xc8fa18 <incomplete sequence \\316>, type=FIELD_TYPE_UNSIGNED) at /data/work/tarantool/1.7/src/box/tuple.cc:565\n\n3  0x00000000004b7cb4 in vy_tuple_compare (tuple_data_a=0xcb2a2f \"\\t\", tuple_data_b=0xc8fa0f \"\\t\", key_def=0xac7560)\nat /data/work/tarantool/1.7/src/box/vinyl.c:8799\n\n4  0x000000000049b332 in tree_svindex_compare_key (a=..., key=0x7ffff579f6c0, index=0xaee115) at /data/work/tarantool/1.7/src/box/vinyl.c:2332\n5  0x00000000004932cb in bps_tree_svindex_find_ins_point_key (tree=0xaee115, arr=0xbcb9f8, size=24, key=0x7ffff579f6c0, exact=0x7ffff579f6bf)\nat /data/work/tarantool/1.7/src/lib/salad/bps_tree.h:1273\n\n6  0x0000000000493a70 in bps_tree_svindex_lower_bound (tree=0xaee115, key=0x7ffff579f6c0, exact=0x7ffff579f6bf)\nat /data/work/tarantool/1.7/src/lib/salad/bps_tree.h:1557\n\n7  0x000000000049bb07 in sv_indexiter_open (i=0xd35098, index=0xaee115, o=VINYL_GE, key=0xc8fa0f, key_size=14)\nat /data/work/tarantool/1.7/src/box/vinyl.c:2537\n\n8  0x00000000004afdeb in si_range (q=0x7ffff579faa0) at /data/work/tarantool/1.7/src/box/vinyl.c:6773\n9  0x00000000004b5ead in vinyl_index_read (index=0xac5c50, key=0xc8fa00, order=VINYL_GE, result=0x7ffff579fc28, tx=0xd34fc0, cache=0xbb8f10,\ncache_only=true, statget=0x7ffff579fbd0) at /data/work/tarantool/1.7/src/box/vinyl.c:8347\n\n10 0x00000000004b8a25 in vy_get (tx=0xd34fc0, index=0xac5c50, key=0xc8fa00, result=0x7ffff579fc28, cache_only=true)\nat /data/work/tarantool/1.7/src/box/vinyl.c:9094\n\n11 0x00000000004b9319 in vinyl_coget (tx=0xd34fc0, index=0xac5c50, key=0x7ffff56be0f9 , part_count=1,\nresult=0x7ffff579fc88) at /data/work/tarantool/1.7/src/box/vinyl.c:9305\n\n12 0x0000000000489e1b in vinyl_insert_one (index=0xaba760, tuple=0x7fffb34cc044 \"\\227\", ,\ntuple_end=0x7fffb34cc070 'P' <repeats 200 times>..., space_id=512, tx=0xd34fc0) at /data/work/tarantool/1.7/src/box/vinyl_space.cc:146\n\n13 0x000000000048a01d in vinyl_insert_all (space=0xac08a0, request=0x7fffb3432fc8, tx=0xd34fc0)\nat /data/work/tarantool/1.7/src/box/vinyl_space.cc:173\n\n14 0x000000000048a413 in VinylSpace::executeReplace (this=0xac09a0, space=0xac08a0, request=0x7fffb3432fc8)\nat /data/work/tarantool/1.7/src/box/vinyl_space.cc:261\n\n15 0x0000000000455be4 in process_rw (request=0x7fffb3432fc8, result=0x7ffff579fe88) at /data/work/tarantool/1.7/src/box/box.cc:123\n---Type  to continue, or q  to quit---\n16 0x00000000004572dd in box_process1 (request=0x7fffb3432fc8, result=0x7ffff579fe88) at /data/work/tarantool/1.7/src/box/box.cc:594\n17 0x0000000000477d05 in tx_process1 (m=0x7fffb3432f60) at /data/work/tarantool/1.7/src/box/iproto.cc:764\n18 0x0000000000505c2a in cmsg_deliver (msg=0x7fffb3432f60) at /data/work/tarantool/1.7/src/cbus.c:258\n19 0x0000000000504f7f in fiber_pool_f (ap=0x7ffff5402210) at /data/work/tarantool/1.7/src/cbus.c:76\n20 0x0000000000437b86 in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x504e02 , ap=0x7ffff5402210)\nat /data/work/tarantool/1.7/src/fiber.h:593\n\n21 0x0000000000502a3b in fiber_loop (data=0x0) at /data/work/tarantool/1.7/src/fiber.c:483\n22 0x00000000006ff869 in coro_init () at /data/work/tarantool/1.7/third_party/coro/coro.c:110\n```\n. Caused by #1603 \n. Already finished\n. Move to wishlist?\n. I hope that this problem will go away after adding new disk iterator.\n. This problem has been fixed.\n. Blocked by #1908 \n. Any news?\n. I'll check it.\n. > The suggestion look like a hack. It doesn't yield in memtx either, so what? \nTarantool totally stops responding on occasional index:count() call.\nI think than fiber_reschedule() for every 1000 rows is good hack.\n. This feature requires #1796, which is in the wishlist.\n. error: \u2018json_append_cdata\u2019 defined but not used [-Werror=unused-function]\n static void json_append_cdata(lua_State *l, json_config_t *cfg,\nI added cjson files to the tarantool source tree and removed submodule. Could you please re-base your patch on gh-1689-cjson-cdata-1.5 branch?\n. @orchaton patch is OK, thanks a lot! I ported latest version of pushcdata/checkcdata/pushint64/pushuint64/ and other cdata functions to src/lua/utils.c and rebased your patch. See gh-1689-cjson-cdata-1.5-v2 branch.\nLast but not least thing: please add minimum viable test cases for int64/uint64 encoding/decoding to test/box/cjson.test. \nhttps://github.com/tarantool/tarantool/blob/1.7/test/app-tap/lua/serializer_test.lua#L27\n. Fixed in 1.5.5-33-g38b2398\n. @kostja Probably we should use avro schema for space.format()\n. 1.5.5-29-g7b317d9\nI also fixed compilation under CMake 3.5. \n. @kostja I had to state that nobody works on this feature except @feldsherov \n. 1.7.3-123-g33b4f2d. Please also note that tree_svindex_XXX should be changed to memindex_XXX().\n. => 1.7.3\n. xlog now uses posix_fadvise() + sync_file_range() which flushes kernel caches immediately after writing chunk. Moving O_DIRECT support for writes to 1.7.4.\n. This is a bug of LuaRocks from EPEL6 repository.\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1367688\ncat << EOF > /etc/luarocks/config-5.1.lua\nrocks_trees = {\n   { name = [[user]], root = home..[[/.luarocks]] },\n   { name = [[system]], root = [[/usr]], lib_dir = [[/usr/lib64/lua/5.1]] }\n}\nEOF\n. => https://bugzilla.redhat.com/show_bug.cgi?id=1367688\nI think nothing more can be done, closing this ticket.\n. Are there any reasons to keep this simple sed-style ticket opened for a whole month?\n. Fixed\n. Please re-test on the latest 1.7\n. => prio1, needed for #1572\n. The same thing for range->begin and range->end:\n```\nstatic int\nvy_write_range_header(int fd, struct vy_range *range)\n{\n    struct vy_range_info info;\n    off_t offset = sizeof(info);\nmemset(&info, 0, sizeof(info));\n\nif (range->begin) {\n    if (vy_pwrite_file(fd, range->begin->data,\n               range->begin->size, offset) < 0)\n        return -1;\n    info.begin_key_offset = offset;\n    info.begin_key_size = range->begin->size;\n    offset += range->begin->size;\n}\nif (range->end) {\n    if (vy_pwrite_file(fd, range->end->data,\n               range->end->size, offset) < 0)\n        return -1;\n    info.end_key_offset = offset;\n    info.end_key_size = range->end->size;\n    offset += range->end->size;\n}\n\n```\n. We have outdated Gentoo Overlay for Tarantool 1.5: https://github.com/tarantool/gentoo-overlay \nIt would be nice if you can update this overlay to the latest Tarantool version.\n. > for this to work its imho needed to make each submodule a new ebuild ?\nI don't think that it makes sense.\n. Nobody cares about indexes with 63+ parts. Please consider to close this ticket.. Blocked by #2312. > Please provide some rationale behind disguising ENV as a table. How about a simple module with getenv() and setenv() functions?\nI vote for os.setenv() in addition to os.getenv().\nThe proposed module is also useful, but we need to collect more feedback from the community.\n. - [x] Check region_alloc() usage and add fiber_gc() to proper places\n      (see e1b20ca5a60c08c47e68b8de9e86a19be5719e46 )\n- [x] Remove useless malloc()\n      struct xlog data_xlog = (struct xlog )malloc(sizeof(struct xlog));\n- [x] Extract vy_stmt_encode()/vy_stmt_decode() functions\n- [x] Remove \"series\" from UPSERT and use the common format with WAL for\n      upserts\n- [ ] Report file names on error properly\n       xlog_cursor_openfd(&itr->cursor, run->fd, \"\" <!-- filename);\n. - [x] Convert .index files to xlog format.\n. Pushed.. Your problem is caused by #1899, which is already fixed.\n. 1.7.1-487-g5e1606f\n. I added test case by 813d76791b7803524b3581bab12219cc16faf4b5\n. test case:\n```\n!./src/tarantool\nos.execute(\"rm -rf .snap .xlog 51?/\")\nbox.cfg {\n    slab_alloc_arena = 0.1,\n    wal_mode = \"none\",\n    snap_dir = \".\",\n    work_dir = \".\";\n    rows_per_wal = 100000000;\n    vinyl = {\n        threads = 1;\n    };\n}\nbox.once(\"bootstrap\", function()\n    box.schema.space.create(\"vinyl\", { engine = 'vinyl' })\n    box.space.vinyl:create_index('primary', { parts = { 1, 'unsigned' } })\n    --box.snapshot()\nend)\nlocal fiber = require('fiber')\nlocal workers_n = 4\nlocal ch = fiber.channel(workers_n)\nlocal function worker()\n    for i=1,1000000 do\n        box.space.vinyl:replace({math.random(4294967295)})\n        fiber.sleep(0)\n    end\n    print('done')\n    ch:put(true)\nend\nfor i=1,workers_n do\n    fiber.create(worker)\nend\nfor i=1,workers_n do\n    ch:get()\nend\nos.exit(0)\n```\n. run two times:\n```\n!./src/tarantool\nbox.cfg {}\nbox.once(\"bootstrap\", function()\n    box.schema.space.create(\"vinyl\", { engine = 'vinyl' })\n    box.space.vinyl:create_index('primary', { parts = { 1, 'unsigned' } })\n    box.snapshot()\nend)\nos.exit(0)\n.  [20401] vinyl.worker/101/main vinyl.c:4000 E> ER_VINYL: index file close error: Bad file descriptor\n.\ndiff --git a/test/vinyl/info.test.lua b/test/vinyl/info.test.lua\nindex 5d6d4ec..7b3576a 100644\n--- a/test/vinyl/info.test.lua\n+++ b/test/vinyl/info.test.lua\n@@ -18,6 +18,7 @@ for _, v in ipairs({ 'path', 'build', 'tx_latency', 'cursor_latency',\n     test_run:cmd(\"push filter '\"..v..\": .*' to '\"..v..\": <\"..v..\">'\")\n end;\n test_run:cmd(\"setopt delimiter ''\");\n+box.snapshot()\n box_info_sort(box.info.vinyl())\n test_run:cmd(\"clear filter\")\n```\n/test-run.py vinyl/info\n. @kostja breaking changes ought to be finished before beta. I suggest to move this task back to 1.7.2 list.\n. Patch itself is OK, but it is  not safe to use vy_read_iterator from a non-TX thread.\nBlocked by #1757\n. 1.7.1-299-g57b641a\n. 1.7.1-299-g57b641a\n. This bug is probably already fixed. @locker please re-check . vinyl has been switch to xlog format. Please maintain I/O statistics in xlog cursor.\n. Needed to test tuple-cache.\nSee also #31. @alyapunov added struct vy_iterator_stat instead.\nHowever, this ticket is still actual to debug vinyl on the production.\n. This complicated bug doesn't fit into 1.7.3 time frame, please consider to move to 1.7.4. \n. 1.7.4-473-ge3c5fde4b. Extract a function from vy_range_iterator_start():\nstatic struct vy_range *\nvy_range_tree_find_by_key(struct vy_range_tree *tree, enum vy_order order, char *key, int key_size)\n. Looks like strange tar bug:\nwget http://download.tarantool.org/tarantool/1.6/src/tarantool-1.6.8.765.tar.gz\ntar tvzf tarantool-1.6.8.765.tar.gz |grep VERSION\n-rw-rw-r-- travis/travis    18 2016-09-01 12:46 tarantool-1.6.8.765/src/lib/small/VERSION\n-rw-rw-r-- travis/travis     19 2016-09-01 12:46 tarantool-1.6.8.765/VERSION\nhrw-rw-r-- travis/travis      0 2016-09-01 12:46 tarantool-1.6.8.765/VERSION link to tarantool-1.6.8.765/VERSION\nConfirmed.\n. 1.6.8.767+ is fixed.\n. Caused  by  8dfa71c25c52a25fc6ce52d8760734b2a027d944\n```\nAuthor: Konstantin Osipov kostja@tarantool.org\nDate: Tue Sep 6 10:11:25 2016 +0300\nvinyl: cleanup and actualize a few configuration parameters\n\nremove dump_age_period; not much added value compared to\ndump_age itself;\n```\n. Pushed.\n. I don't observe this problem anymore.\nProbably fixed by my and @locker patches.\n. I replaced read()/pread() with coeio_read()/coeio_pread():\n\n```\n0  0x00007ffff5bee1c8 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\n1  0x00007ffff5bef64a in __GI_abort () at abort.c:89\n2  0x00007ffff5be7107 in __assert_fail_base (fmt=, assertion=assertion@entry=0x6e38ce \"id < v->block_count\",\nfile=file@entry=0x6e3898 \"/data/work/tarantool/1.7/src/lib/small/small/matras.h\", line=line@entry=342, \nfunction=function@entry=0x6e5fd0 <__PRETTY_FUNCTION__.12387> \"matras_view_get_no_check\") at assert.c:92\n\n3  0x00007ffff5be71b2 in __GI___assert_fail (assertion=0x6e38ce \"id < v->block_count\",\nfile=0x6e3898 \"/data/work/tarantool/1.7/src/lib/small/small/matras.h\", line=342, \nfunction=0x6e5fd0 <__PRETTY_FUNCTION__.12387> \"matras_view_get_no_check\") at assert.c:101\n\n4  0x000000000044b864 in matras_view_get_no_check (m=0xabd710, v=0xabd710, id=11) at /data/work/tarantool/1.7/src/lib/small/small/matras.h:342\n5  0x000000000044b91b in matras_view_get (m=0xabd710, v=0x1083410, id=11) at /data/work/tarantool/1.7/src/lib/small/small/matras.h:360\n6  0x000000000044c120 in bps_tree_vy_mem_tree_restore_block_ver (tree=0xabd6d0, id=11, view=0x1083410)\nat /data/work/tarantool/1.7/src/lib/salad/bps_tree.h:1200\n\n7  0x000000000044c5f1 in bps_tree_vy_mem_tree_get_leaf_safe (tree=0xabd6d0, itr=0x1083408)\nat /data/work/tarantool/1.7/src/lib/salad/bps_tree.h:1421\n\n8  0x000000000044cd7f in vy_mem_tree_itr_get_elem (tree=0xabd6d0, itr=0x1083408) at /data/work/tarantool/1.7/src/lib/salad/bps_tree.h:1649\n9  0x000000000046c9b1 in vy_mem_iterator_check_version (itr=0x10833e8) at /data/work/tarantool/1.7/src/box/vinyl.c:7649\n10 0x000000000046cc1b in vy_mem_iterator_next_key (itr=0x10833e8) at /data/work/tarantool/1.7/src/box/vinyl.c:7716\n11 0x000000000046e090 in vy_mem_iterator_iface_next_key (vitr=0x10833e0) at /data/work/tarantool/1.7/src/box/vinyl.c:8298\n12 0x000000000046e808 in vy_merge_iterator_propagate (itr=0x7ffff552fc48) at /data/work/tarantool/1.7/src/box/vinyl.c:8596\n13 0x000000000046ee0b in vy_merge_iterator_next_key (itr=0x7ffff552fc48) at /data/work/tarantool/1.7/src/box/vinyl.c:8746\n14 0x000000000046f85d in vy_read_iterator_next (itr=0x7ffff552fbf0) at /data/work/tarantool/1.7/src/box/vinyl.c:9044\n15 0x000000000046fa5a in vy_read_iterator_get (itr=0x7ffff552fbf0, result=0x7ffff552fd08) at /data/work/tarantool/1.7/src/box/vinyl.c:9096\n16 0x000000000046fb90 in vy_index_read (index=0xabb0f0, key=0x2531280, order=VINYL_EQ, result=0x7ffff552fd08, tx=0x0)\nat /data/work/tarantool/1.7/src/box/vinyl.c:9129\n\n17 0x000000000046a03f in vy_get (tx=0x0, index=0xabb0f0, key=0x7ffff5509039 \"\\315\\036(PPPP\", part_count=1, result=0x7ffff552fd50)\nat /data/work/tarantool/1.7/src/box/vinyl.c:6355\n\n18 0x0000000000446995 in VinylIndex::findByKey (this=0xa68570, key=0x7ffff5509039 \"\\315\\036(PPPP\", part_count=1)\nat /data/work/tarantool/1.7/src/box/vinyl_index.cc:77\n\n```\nIt seems that iterator re-position is broken. Please see branch gh-1756-coeio-read\n. From #1761\n+- error: './test_run.lua:174: Failed to seek log file: /... full path .../build/test/var/vinyl.log\n+    : Invalid argument'\n. I can't reproduce\n```\nvyinfo().run_count == 2\n-- true\n+- false\n```\n. Should be discussed.\n. @kostja and @GeorgyKirichenko think that we should re-created offsets after reading pages from the disk.\n. > I would be grateful for any suggestions regarding testing of the changes.\n\nLocally, I performed make -j7 ; make test -j7 for Debug values of CMAKE_BUILD_TYPE and the tests passed. However, Travis points to failure on engine/snapshot.test.lua, which also passed successfully upon local make test. I am wondering about how could I reproduce the failure locally.\n\nThere was a problem caused by a bug in coio_close(), see 000b2c706c6ceaf4246f0357da16bbf9f76e0083\n\n+- error: './test_run.lua:174: Failed to seek log file: /... full path .../build/test/var/vinyl.log\n-    : Invalid argument'\n\nConfirmed, #1771\n\nAlso, it renames iterator -> itr in names of local variables to distinguish between interface / type and local names. What do you think about this part of changes?\n\nI don't think that it makes sense. I cherry-picked interface renaming from your patch, rebased and pushed as 1.7.1-360-gf18b96b\nThanks!\n. It was changed intentionally. example.lua grants universe permissions to guest user and it is not safe to listen on external interfaces in this case.\nSee #1602\nYou can change  listen = 'localhost:3301' to listen = '*:3301'.\n. Fixed by 85df49039857d897b3ed48bf52370399cf0ff2dc\n. Implemened (afd229393ecba61ce39e9c302fe3e7e7e0afa8c8)\n. Nobody cares => 1.7.4. Fixed by https://github.com/tarantool/test-run/commit/21af039764ff03a3a7f034492731e69904ba450f\n. Regression by 3b81e95948f1cde505eb30e42b1bc4ff32cfeaec \ntarantoolctl eval example \"xx.lua\"\n/usr/bin/tarantoolctl: unix/:/var/run/tarantool/example.control: Unsupported protocol: Lua console\n/usr/bin/tarantoolctl: /usr/bin/tarantoolctl:612: attempt to call method 'console' (a nil value)\n. Hi, we use Lua's string.format() under the hood.\n. Finished.\n. Do you use vinyl? I can't get proper backtrace from the coredump.\nIt would be nice to have:\n- A test case (Lua file) to reproduce the crash\n- Backtrace\n- vinyl directories (512/?) as well as snap and xlog files\nThanks!\n. Yes, 512/ directory is missing.\n. Please try to upgrade. Feel free to re-open this ticket if problem still exists.\n. Please paste output of cmake related to clock_gettime().\n. Please just add a test case.\n. This problem definitely blocks production - tarantool doesn't start (sometime).\nAny news about this ticket?\n. Blocked by #775 \n. This ticket is waiting for decision about #775. Do you have a customer for this feature? I suggest to move to 1.7.4 or to wishlist\n. Rolling feature => 1.7.4. 1.7.1-475-g899bc6d\n. Fixed\n. OOPS, \n\nFile Dependencies\nRPM gives you the ability to depend on files instead of packages. Whenever possible you should avoid file dependencies as they slow down dependency resolution and require the package manager to download file lists in addition to to regular dependency information. There are, however, times when other technical considerations outweigh these considerations. If the files you need are prone to moving between packages of different names, it can be useful to depend on those files directly. \n\nI'll ask a question in the maillist.\n. Deadline?. 1.7.4-422-gfa7597189. Already done.. Fixed.\n. 1.7.3 via 1.6.9\n. @kostja could you please review this patch? Thanks.\n. Should be discussed => postpone.\n. This ticket is still need feedback.\n. @kostja please propose new Lua API for this feature. I found it difficult to design without breaking changes.. This feature is rolling => 1.7.5. 1.7.2-18-g38e8b2d\n. Requires ASAN support #1765 \n. I don't see this problem anymore on my armhf host.\n. non-critical refactoring => 1.7.4. The idea is good, but we currently doesn't have enough time for it :(\n. range_size is being removing, there is a patch to set it 16Gb.\n. Please try to upgrade to the latest 1.7.2\n. Discussed yesterday => implement a prototype for 1.7.3 to ensure that the new disk format is suitable for this feature.\n . @Gerold103 @alyapunov please check that this problem still exists.\n. Any news?. OK. Blocked by #2090. Fixed. A test case is blocked by #1828, #1829\n. Fixed. A test case is blocked by #1828, #1829\n. Actually requires #1834 to integrate into vinyl.\n. Closed by a6d4801d16e4fd0bfc0e74a5264acc818480a6a7\n. This performance optimization is not critical for 1.7.3, moved to 1.7.4.. We discussed with @alyapunov that the background squasher with this optimization is more efficient than the foreground squasher in vy_range_set(). Probably it makes sense to remove foreground squasher completely.. Blocked by #2090 . Moved to 1.7.6 together with #2090. Fixed by a031c76a22fda6e9d53d91c795fcc43a6fb4cc9a. series are still used in vy_apply_upsert(). Fixed by f4615e732a28ea8dfb9b1ebecb5e539dc5cd48d3. /var/log/$name and /var/lib/$name are created automatically.\n /etc/tarantool/instances.available/$name.lua  makes sense\n. This ticket still need feedback. @pgulutzan already complained about this problem.\n. Superseded by #1927 . I can confirm this problem on the latest 1.7. There is an optimized test case:\n```\n!./src/tarantool\nbox.cfg({listen = '127.0.0.1:3701', slab_alloc_arena = 0.3, snapshot_period = 3600, snapshot_count = 3, wal_mode ='none'})\nbox.once(\"init\", function()\n    local tst_sp = box.schema.space.create('tst', {engine='vinyl'})\n    tst_sp:create_index('prj_user', { id = 0, unique = true, type = 'TREE', parts = { 1, 'NUM', 2, 'STR' }, if_not_exists = true })\nfor i = 1,1000000 do\n    local prj = i % 5 + 1\n    local key = tostring(i % 5 + 1) .. tostring(i) .. \"b\"\n    tst_sp:insert({prj,key,1})\nend\nbox.snapshot()\n\nend)\nfor i=1, 1000 do box.space.tst:count() end\n```\nTry to run this script and check to memory usage in top(1).\n. Blocked by #1908 and #1572 as @kostja said.\n. Discussed today. Moving to 1.7.5.\n. The primary problem that there is no way to use some key in memtx space for autoincrement  because 1.7.x doesn't have cross-engine transactions in 1.7.x (see #1958).  Moreover, even with the proposed new cross-engine transaction manager such types of transactions will be aborted by conflicts due to limitations of the transaction manager. Kostja suggests to implement autonomous transactions and perform this increment outside of the calling transaction. \nFrom https://oracle-base.com/articles/misc/autonomous-transactions:\n\nAutonomous transactions allow you to leave the context of the calling transaction, perform an independent transaction, and return to the calling transaction without affecting it's state. The autonomous transaction has no link to the calling transaction, so only commited data can be shared by both transactions.\n\nSince active transaction is currently bounded to the fiber, I have no idea how to implement two or more simultaneous transactions in the same fiber. This ticket is complicated and requires significant research.. ```\napp/ipc.test.lua                                                [ fail ]\nTest failed! Result content mismatch:\n--- app/ipc.result      Mon Dec  5 12:54:26 2016\n+++ app/ipc.reject      Tue Dec  6 15:05:37 2016\n@@ -425,7 +425,7 @@\n ...\n passed\n ---\n-- true\n+- false\n ...\n ch:get()\n ---\nLast 15 lines of Tarantool Log file:\nFatal error: Failed to run test app/ipc.test.lua: wrong test output. Execution aborted.\n```\n```\napp/ipc.test.lua                                                [ fail ]\nTest failed! Result content mismatch:\n--- app/ipc.result      Mon Dec  5 12:54:26 2016\n+++ app/ipc.reject      Tue Dec  6 15:05:41 2016\n@@ -334,7 +334,7 @@\n     - 2\n   - - tfbr\n     - 3\n-  - - tfbr2\n+  - - tfbr\n     - 4\n   - - tfbr\n     - 5\n@@ -425,7 +425,7 @@\n ...\n passed\n ---\n-- true\n+- false\n ...\n ch:get()\n ---\nLast 15 lines of Tarantool Log file:\n```\n```\napp/ipc.test.lua                                                [ fail ]\nTest failed! Result content mismatch:\n--- app/ipc.result      Mon Dec  5 12:54:26 2016\n+++ app/ipc.reject      Tue Dec  6 15:05:28 2016\n@@ -334,31 +334,31 @@\n     - 2\n   - - tfbr\n     - 3\n+  - - tfbr\n+    - 4\n   - - tfbr2\n-    - 4\n-  - - tfbr\n     - 5\n+  - - tfbr\n+    - 35\n   - - tfbr2\n-    - 35\n-  - - tfbr\n     - 36\n+  - - tfbr\n+    - 37\n+  - - tfbr\n+    - 38\n+  - - tfbr\n+    - 39\n   - - tfbr2\n-    - 37\n+    - 40\n+  - - tfbr\n+    - 41\n+  - - tfbr\n+    - 42\n+  - - tfbr\n+    - 43\n   - - tfbr2\n-    - 38\n-  - - tfbr2\n-    - 39\n-  - - tfbr\n-    - 40\n-  - - tfbr2\n-    - 41\n-  - - tfbr2\n-    - 42\n-  - - tfbr2\n-    - 43\n-  - - tfbr\n     - 44\n-  - - tfbr2\n+  - - tfbr\n     - 45\n ...\n ch = fiber.channel(1)\n@@ -425,7 +425,7 @@\n ...\n passed\n ---\n-- true\n+- false\n ...\n ch:get()\n ---\nLast 15 lines of Tarantool Log file:\nFatal error: Failed to run test app/ipc.test.lua: wrong test output. Execution aborted.\n.\nbox/select.test.lua                                             [ pass ]\nbox/session.storage.test.lua                                    [ fail ]\nTest failed! Result content mismatch:\n--- box/session.storage.result  Thu Mar 30 13:17:48 2017\n+++ box/session.storage.reject  Thu Mar 30 13:20:09 2017\n@@ -73,7 +73,7 @@\n ...\n all[session.id()]\n ---\n-- abc: def\n+- null\n. Root cause:\ntest_run:cmd(\"drop connection second\")\nrequire('fiber').sleep(.01)\nfor k,v in pairs(all) do table.insert(tres2, v.abc) end\n```\nPlease user on_disconnect() trigger instead of fiber.sleep(0.1).\n . I can't reporoduce this problem neither in a remote nor in a local console:\n```\ntarantool> for i=1,100000 do box.space.memtx:replace({i, string.rep('a', 5000)}) end\n\n\nerror: Failed to allocate 5023 bytes in slab allocator for memtx_tuple\n...\n\ntarantool> box.error.last()\n\nFailed to allocate 5023 bytes in slab allocator for memtx_tuple\n...\n```\n\nDid you have any background fibers?. This bug doesn't have a reproducible test case. Please re-open if problem still exists.\n. 1.7.2-119-ga98e90b\n. This problem is not fully fixed:\n```\ntarantool> for i=1,1000 do box.space.test:upsert({i}) end\n\n\nerror: '[string \"for i=1,1000 do box.space.test:upsert({i}) end\"]:1: Usage index:upsert(tuple_key,\n    ops)'\n...\n. OK, pushed. This problem was caused by box.cfg { background = false }.\n.\n--- a/test/box/schema_reload.test.lua\n+++ b/test/box/schema_reload.test.lua\n@@ -81,40 +81,48 @@ function bump_schema_id()\n end;\n test_run:cmd('setopt delimiter \"\"');\n\n+log = require('log')\n cn = net_box.connect(box.cfg.listen)\n+cn._schema_id\n-- ping\n schema_id = cn._schema_id\n+log.info(\"bump schema id: %s\", cn._schema_id)\n bump_schema_id()\n+log.info(\"before ping: %s\", cn._schema_id)\n cn:ping()\n-cn._schema_id == schema_id + 1\n+log.info(\"after ping: %s\", cn._schema_id)\n+cn._schema_id == schema_id + 1 or {cn._schema_id, schema_id}\n```\n2016-10-25 17:32:27.016 [17708] main/111/localhost:6113 (net.box) I> reload schema: nil\n2016-10-25 17:32:27.016 [17708] main/111/localhost:6113 (net.box) I> reload schema done: 58\n2016-10-25 17:32:27.017 [17708] main/106/console/unix/: I> bump schema id: 58\n2016-10-25 17:32:27.018 [17708] main/106/console/unix/: I> before ping: 58\n2016-10-25 17:32:27.019 [17708] main/102/main iproto.cc:824 W> 64 remote_schema_id: 58 my_schema_id: 59\n2016-10-25 17:32:27.019 [17708] main/111/localhost:6113 (net.box) I> reload schema: nil\n2016-10-25 17:32:27.019 [17708] main/106/console/unix/: I> after ping: 58 <!-- should be 59\n2016-10-25 17:32:27.020 [17708] main/111/localhost:6113 (net.box) I> reload schema done: 59\n2016-10-25 17:32:27.022 [17708] main/106/console/unix/: I> bump schema id\n. Please send a patch ;)\n. Pushed.\nA comments from @kostja - add --server-id option to filter by server_id\n. 1.7.2-193-g6950640\n. Discussed yesterday. A patch is implemented, but we don't have a proper benchmark to ensure that throttling really works as expected.\n. Blocked by #1907\n. - [ ] Use lsregion for extents\n- [ ] Fix quota calculation\n- [ ] Add a test case for quota. Need review, remove-tx-vclock branch\n. Complicated, but doesn't affect user visible behavior. Moved to 1.7.5. Decided to go with the simple solution, moved back to 1.7.4. Looks like bug for me.\n. We decided that it is OK that UPSERTS work on unique secondary keys. In case of vinyl it requires a disk lookup.\n. Discussed on Telegram Channel => https://github.com/tarantool/tarantool/issues/1511 (already scheduled fro 1.7.3)\n. space:truncate() drops and re-creates all indexes under the hood. As result, space:truncate() is actually DDL operation. Unfortunately, Tarantool doesn't support transactional DDL. This feature is very hard to implement and mostly useless (=there are no real customers for that).\nI move this request to wishlist. Let's return to this request again in Tarantool 1.8.\n. Hi, \nplease use CALL request to invoke Lua functions. \nCALL(\"function\", arg1, arg2) is significantly more efficient than EVAL(\"function(...)\", arg1, arg2).\n. - [ ] vy_read_iterator_next_range()\n. Blocked by #2090 . The decision is to add unit test for existing code first and start refactor/rewrite it after that, so this ticket is not blocked by #2090 anymore.\n. No  restores, no problem! Thanks for @locker \n. Confirmed. I noticed this problem on Debian Wheezy on Travis CI couple days ago. It seems that vinyl.c is too large and buggy gcc can't process it properly.\nI'll investigate possible options.\n. Hi @pgulutzan, could you please re-try on the latest 1.7?\nThis problem has gone away for me, but I don't have good explanation for that. Probably it was fixed after gcc upgrade.\nI also wonder do you have ccache enabled on your Ubuntu?\n$ apt-cache policy ccache\n$ whereis gcc\ngcc: /usr/bin/gcc /usr/lib/gcc # original gcc\n$ sudo apt-get install ccache\n$ export PATH=/usr/lib/ccache/:$PATH # enable ccache\n$ hash -r\n$ whereis gcc\ngcc: /usr/bin/gcc /usr/lib/gcc /usr/lib/ccache/gcc # gcc with enabled ccache \n. OK. We're splitting vinyl.c into multiple files to finally resolve this problem.\n=> #1906. I removed this prefix from say() implementation.\nThis is a \"breaking change\", but nobody cares about that.. @bigbes please fix this simple problem and close the ticket.\n. Discussed yesterday => use luaT_ prefix for all Tarantool extensions:\nluaT_istuple(), luaT_pushtuple(), etc.\n. Since this feature are not needed anymore, I'm moving this ticket to wishlist.\nA pre-requisite refactoring has been pushed to 1.6.\n. A definition already exists:\n/**\n * Push a tuple onto the stack.\n * @param L Lua State\n * @sa luaT_istuple\n * @throws on OOM\n */\nvoid\nluaT_pushtuple(struct lua_State *L, box_tuple_t *tuple);\nPlease resolve remaining problems and close this ticket:\n\n[ ] Symbols in extra/exports\n[ ] A test case in app-tap/module_api.test.lua\n[ ] A ticket in https://github.com/tarantool/doc\n\nNeeded for https://github.com/tarantool/shard/issues/14. This API already exists in 1.6. Please make your patch with test cases against 1.6.\n. Fixed by 67ccc2b5ef682ecb7ecbb7e5e22040a6acb4c490. Please merge via 1.6.\n. @alyapunov any news?. This problem will be fixed by #1908 . Fixed by @Darych \n. Should be discussed with @kostja \nSee also #933 #934\n. This is a breaking change which should be discussed.\n. My proposal is to add a new box.info.memory section and keep box.slab.info() as is:\n```\nbox.info.memory\n\n\nlua:\n    allocated: 1073741824\n    used: 23432432\n  runtime:\n    fragmentation: 0.22\n    quota: 1073741824\n    used: 23432432\n  memtx:\n    data:\n      fragmentation: 0.97\n      allocated: 211848\n      used: 211848\n    index:\n      fragmentation: 0.52\n      allocated: 2097048\n      used: 999424\n  vinyl:\n    cache:\n      fragmentation: 0.97\n      allocated: 211848\n      used: 211848\n    data:\n      fragmentation: 0.97\n      allocated: 211848\n      used: 211848\n    index:\n      fragmentation: 23.2\n      allocated: 2097048\n      used: 999424\n...\n```. > Fragmentation should be fractional, and not in %-s.\n\nGood catch, thanks!\n\nI'm confused about maxalloc vs allocated. What's the difference?\n\n\"box.runtime.info().maxalloc\" in the current implementation is a some arbitrary number.\nI remove it from the new specification.\n. box.info.memory() is a complicated rolling feature which can be added in 1.7.5. I suggest to don't touch box.slab.info() at all and move this ticket to 1.7.5.\n. This refactoring will allow to limit I/O rate for vinyl workers.\nRolling feature => 1.7.4. => remove coredump() function as suggested by @kostja \n. I use 8-16 Tarantool instances as Lua interpreteres with \"net.box\" and \"xlog\" modules. I don't plan to store any data on these Tarantool and create data directories, but it would be nice to have working \"log\" module.\n. OK, this ticket is a duplicate of #689\n. Yes, it is a feature.\n. Please push fix via 1.6\n. Probably duplicate of #748\n. Caused by #1912 \n. > to find the number of tuples in a particular index\nDo you mean index:count()?\nI remember that initial request was to find the position in the tree index.\n. index:get() only works will the full key on unique indexes. The error message is incorrect, see #1882 \n. Confirmed.\n. Hi, we can't detect and stop JIT-compiled while true do end loop. Please just don't do that.\n. Please add good comments to VinylEngine::buildSecondaryKey() and VinylSpace::prepareAlterSpace() before closing this ticket.\n. @andrew-statsenko I kept this ticket opened to add some good comments about this case to the source tree.\n. Please return to this ticket after #1908 and #1919.\n. Bloom filter (#1919) has been pushed, please re-check this problem under 1.7.3-269-g4c520cf or later version of Tarantool.\n. This problem has been fixed by #1908 and #1919.\n. We fixed problem with fio_filename().\n. Any progress?\n. Throttling is an experimental feature and it still hasn't merged into 1.7 yet (see #1862).\nI definitely agree with all of you that it must be logged. We will take it into account in the new version of this patch. Please subscribe to #1862 for updates.\n. See also #2090. @alyapunov I pushed your patch for extraction of vy_run. Please add comments to all functions and struct members in vy_run.h file as a follow-up patch.\n. vy_slice extraction is not important. Finally done.\n. Requires #1949 to continue. @kostja I think this problem is prio3 or even 1.7.4.\n. This problem will be automatically fixed by #1271 which is scheduled for 1.8. Does it make sense to spend time on it in 1.7.4? I would like to move this ticket to 1.8. \n. This problem will be fixed by consistent checkpoints.\n. @GeorgyKirichenko @kostja my fix is controversial, I need review for this patch.\n. Moved to 1.7.3 after discussion with @kostja. @locker is already working on the new metadata storage, needed for backups.. Some fresh ideas:\n\nAdd tarantoolctl <instance> backup <path to> and tarantoolctl <instance> restore <path from> commands\ntarantoolctl backup prepares the list of files, print cp -p <files> and then runs this script via shell.\ntarantoolctl backup --dry-run prints command cp -p <files> command line without running them\ntarantoolctl backup | sometool print the list of files into stdout and waits for EOF on pipe.\ntarantoolctl <instance> restore <dir> checks that instances is not started and its data directory is empty and then copies files from <dir>.\n\nrsync can be used instead  of \"cp -p\" to display the progress interactively.. Done. \ud83e\udd47 \n. 1.7.4 ?. This ticket MAY break disk format, please at least implement a prototype for 1.7.3\n. 1.7.3-269-g4c520cf. => 1.7.4. Blocked by #2312. Duplicate of #389. => 1.7.4. Implemented by  39c21a7e3e753f74f495546a42d0aaf227874e25. Lua implementation by @Boiler:\n```\nlocal log = require('log')\nlocal fiber = require('fiber')\nlocal socket = require('socket')\nif sd_fiber ~= nil then\n    fiber.kill(sd_fiber:id())\n    log.info(\"sd_fiber killed\")\nend\nsd_fiber = nil\nlocal sd_sock_path = os.getenv(\"NOTIFY_SOCKET\")\nif sd_sock_path == nil then\n    sd_sock_path = \"/run/systemd/notify\"\nend\nif sd_sock_path ~= nil then\n    sd_fiber = fiber.create(function()\n        fiber.self():name('sd_notify')\n        local sd_sock = socket('AF_UNIX', 'SOCK_DGRAM', 0)\n        sd_sock:sysconnect('unix/', sd_sock_path)\n        if sd_sock ~= nil then\n            sd_sock:write(\"READY=1\")\n            log.info(\"systemd notified\")\n            fiber.sleep(3) -- waiting for box\n            while true do\n                local str = box.info.status .. \" ; quota_usage: \" .. string.format(\"%.2f\", 100 / (box.slab.info().quota_size / box.slab.info().quota_used)) .. \"%\"\n                if box.info.replication.status ~= 'off' then\n                    str = str .. \" ; repl_status: \" .. box.info.replication.status .. \", lag: \" .. string.format(\"%.2f\", box.info.replication.lag)\n                end\n                sd_sock:write(\"STATUS=\" .. str)\n                fiber.sleep(1)\n            end\n        end\n    end)\nend\n```\n. rolling feature, 1.7.4. This feature is rolling. Postponed, we  don't have  enough time right now. \n. > Fix for 1.6 required\nOK\n. 1.7.3-125-g932db5f52. ```\napp-tap/tarantoolctl.test.lua                                   [ fail ]\nTest failed! Result content mismatch:\n--- app-tap/tarantoolctl.result Thu Jan 19 15:18:36 2017\n+++ app-tap/tarantoolctl.reject Thu Jan 19 15:58:22 2017\n@@ -27,21 +27,383 @@\n     ok - check 'start' command status for 'bad_script'\n     ok - check 'start' stderr for 'bad_script'\n     ok - check 'start' command status for 'good_script'\n-    ok - check 'eval' command status for 'good_script bad_script.lua'\n-    ok - check 'eval' stderr for 'good_script bad_script.lua'\n+    not ok - check 'eval' command status for 'good_script bad_script.lua'\n+      ---\n+      filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+      trace:\n+      - line: 99\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: upvalue\n+        name: check_ok\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 169\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: local\n+        name: fun\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 210\n+        source: '@builtin/tap.lua'\n+        filename: builtin/tap.lua\n+        what: Lua\n+        namewhat: method\n+        name: test\n+        src: builtin/tap.lua\n+      - line: 168\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: -1\n+        source: =[C]\n+        filename: eval\n+        what: C\n+        namewhat: global\n+        name: pcall\n+        src: '[C]'\n+      - line: 0\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: main\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      line: 0\n+      expected: 3\n+      got: 1\n+      ...\n+    not ok - check 'eval' stderr for 'good_script bad_script.lua'\n+      ---\n+      filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+      line: 0\n+      trace:\n+      - line: 99\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: upvalue\n+        name: check_ok\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 169\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: local\n+        name: fun\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 210\n+        source: '@builtin/tap.lua'\n+        filename: builtin/tap.lua\n+        what: Lua\n+        namewhat: method\n+        name: test\n+        src: builtin/tap.lua\n+      - line: 168\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: -1\n+        source: =[C]\n+        filename: eval\n+        what: C\n+        namewhat: global\n+        name: pcall\n+        src: '[C]'\n+      - line: 0\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: main\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      ...\n+Expected to find 'Error, while reloading config:' in 'unix/:./good_script.control: Can't decode handshake\n+builtin/box/net_box.lua:827: assertion failed!\n+'\n+1              unix/:./good_script.control: Can't decode handshake\n+builtin/box/net_box.lua:827: assertion failed!\n+\n     ok - check 'stop' command status for 'good_script'\n     # basic test for bad script: end\n-ok - basic test for bad script\n+not ok - failed subtests\n+  ---\n+  filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+  trace:\n+  - line: 236\n+    source: '@builtin/tap.lua'\n+    filename: builtin/tap.lua\n+    what: Lua\n+    namewhat: method\n+    name: test\n+    src: builtin/tap.lua\n+  - line: 168\n+    source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+    filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+    what: Lua\n+    namewhat: \n+    src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+  - line: -1\n+    source: =[C]\n+    filename: eval\n+    what: C\n+    namewhat: global\n+    name: pcall\n+    src: '[C]'\n+  - line: 0\n+    source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+    filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+    what: main\n+    namewhat: \n+    src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+  planned: 8\n+  failed: 2\n+  line: 0\n+  ...\n     # check answers in case of call\n     1..6\n     ok - check 'start' command status for 'good_script'\n-    ok - check 'eval' command status for 'good_script bad_script.lua'\n-    ok - check 'eval' stderr for 'good_script bad_script.lua'\n-    ok - check 'eval' command status for 'good_script ok_script.lua'\n-    ok - check 'eval' stdout for 'good_script ok_script.lua'\n+    not ok - check 'eval' command status for 'good_script bad_script.lua'\n+      ---\n+      filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+      trace:\n+      - line: 99\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: upvalue\n+        name: check_ok\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 205\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: local\n+        name: fun\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 210\n+        source: '@builtin/tap.lua'\n+        filename: builtin/tap.lua\n+        what: Lua\n+        namewhat: method\n+        name: test\n+        src: builtin/tap.lua\n+      - line: 204\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: -1\n+        source: =[C]\n+        filename: eval\n+        what: C\n+        namewhat: global\n+        name: pcall\n+        src: '[C]'\n+      - line: 0\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: main\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      line: 0\n+      expected: 3\n+      got: 1\n+      ...\n+    not ok - check 'eval' stderr for 'good_script bad_script.lua'\n+      ---\n+      filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+      line: 0\n+      trace:\n+      - line: 99\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: upvalue\n+        name: check_ok\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 205\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: local\n+        name: fun\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 210\n+        source: '@builtin/tap.lua'\n+        filename: builtin/tap.lua\n+        what: Lua\n+        namewhat: method\n+        name: test\n+        src: builtin/tap.lua\n+      - line: 204\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: -1\n+        source: =[C]\n+        filename: eval\n+        what: C\n+        namewhat: global\n+        name: pcall\n+        src: '[C]'\n+      - line: 0\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: main\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      ...\n+Expected to find 'Error, while reloading config' in 'unix/:./good_script.control: Can't decode handshake\n+builtin/box/net_box.lua:827: assertion failed!\n+'\n+1              unix/:./good_script.control: Can't decode handshake\n+builtin/box/net_box.lua:827: assertion failed!\n+\n+    not ok - check 'eval' command status for 'good_script ok_script.lua'\n+      ---\n+      filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+      trace:\n+      - line: 99\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: upvalue\n+        name: check_ok\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 205\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: local\n+        name: fun\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 210\n+        source: '@builtin/tap.lua'\n+        filename: builtin/tap.lua\n+        what: Lua\n+        namewhat: method\n+        name: test\n+        src: builtin/tap.lua\n+      - line: 204\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: -1\n+        source: =[C]\n+        filename: eval\n+        what: C\n+        namewhat: global\n+        name: pcall\n+        src: '[C]'\n+      - line: 0\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: main\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      line: 0\n+      expected: 0\n+      got: 1\n+      ...\n+    not ok - check 'eval' stdout for 'good_script ok_script.lua'\n+      ---\n+      filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+      trace:\n+      - line: 99\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: upvalue\n+        name: check_ok\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 205\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: local\n+        name: fun\n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: 210\n+        source: '@builtin/tap.lua'\n+        filename: builtin/tap.lua\n+        what: Lua\n+        namewhat: method\n+        name: test\n+        src: builtin/tap.lua\n+      - line: 204\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      - line: -1\n+        source: =[C]\n+        filename: eval\n+        what: C\n+        namewhat: global\n+        name: pcall\n+        src: '[C]'\n+      - line: 0\n+        source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+        filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+        what: main\n+        namewhat: \n+        src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+      line: 0\n+      expected: 0\n+      got: 1\n+      ...\n+Expected to find '---\n+- 1\n+...' in ''\n+1              unix/:./good_script.control: Can't decode handshake\n+builtin/box/net_box.lua:827: assertion failed!\n+\n     ok - check 'stop' command status for 'good_script'\n     # check answers in case of call: end\n-ok - check answers in case of call\n+not ok - failed subtests\n+  ---\n+  filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+  trace:\n+  - line: 236\n+    source: '@builtin/tap.lua'\n+    filename: builtin/tap.lua\n+    what: Lua\n+    namewhat: method\n+    name: test\n+    src: builtin/tap.lua\n+  - line: 204\n+    source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+    filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+    what: Lua\n+    namewhat: \n+    src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+  - line: -1\n+    source: =[C]\n+    filename: eval\n+    what: C\n+    namewhat: global\n+    name: pcall\n+    src: '[C]'\n+  - line: 0\n+    source: '@/mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+    filename: /mnt/data/data/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua\n+    what: main\n+    namewhat: \n+    src: '...ta/work/tarantool/1.7/test/app-tap/tarantoolctl.test.lua'\n+  planned: 6\n+  failed: 4\n+  line: 0\n+  ...\n     # check basic help\n     1..4\n     ok - check stderr of 'tarantoolctl' without config\n@@ -83,3 +445,4 @@\n     ok - check lsn after\n     # fill and test play output: end\n ok - fill and test play output\n+# failed subtest: 2\n.\napp-tap/tarantoolctl.test.lua                                   unix/:/tmp/u4F2q5/good_script.control: Peer closed\nunix/:/tmp/z05Rm2/good_script.control: Peer closed\n[ fail ]\nTest failed! Result content mismatch:\n\u2014- app-tap/tarantoolctl.result Tue Jan 31 11:32:02 2017\n+++ app-tap/tarantoolctl.reject Tue Jan 31 16:22:23 2017\n@@ -4,8 +4,104 @@\n     1..16\n     ok - check 'start' command status for 'script'\n     ok - check 'start' stderr for 'script'\n-    ok - check 'status' command status for 'script'\n-    ok - check 'status' stderr for 'script'\n+    not ok - check 'status' command status for 'script'\n+      \u2014-\n+      filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+      trace:\n+      - line: 125\n+        source: '@/opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+        filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: upvalue\n+        name: check_ok\n+        src: '.../local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+      - line: 163\n+        source: '@/opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+        filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: local\n+        name: fun\n+        src: '.../local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+      - line: 210\n+        source: '@builtin/tap.lua'\n+        filename: builtin/tap.lua\n+        what: Lua\n+        namewhat: method\n+        name: test\n+        src: builtin/tap.lua\n+      - line: 162\n+        source: '@/opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+        filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: \n+        src: '.../local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+      - line: -1\n+        source: =[C]\n+        filename: eval\n+        what: C\n+        namewhat: global\n+        name: pcall\n+        src: '[C]'\n+      - line: 0\n+        source: '@/opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+        filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+        what: main\n+        namewhat: \n+        src: '.../local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+      line: 0\n+      expected: 0\n+      got: 2\n+      ...\n+    not ok - check 'status' stderr for 'script'\n+      \u2014-\n+      filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+      line: 0\n+      trace:\n+      - line: 125\n+        source: '@/opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+        filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: upvalue\n+        name: check_ok\n+        src: '.../local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+      - line: 163\n+        source: '@/opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+        filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: local\n+        name: fun\n+        src: '.../local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+      - line: 210\n+        source: '@builtin/tap.lua'\n+        filename: builtin/tap.lua\n+        what: Lua\n+        namewhat: method\n+        name: test\n+        src: builtin/tap.lua\n+      - line: 162\n+        source: '@/opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+        filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+        what: Lua\n+        namewhat: \n+        src: '.../local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+      - line: -1\n+        source: =[C]\n+        filename: eval\n+        what: C\n+        namewhat: global\n+        name: pcall\n+        src: '[C]'\n+      - line: 0\n+        source: '@/opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+        filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+        what: main\n+        namewhat: \n+        src: '.../local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+      ...\n+Expected to find 'is running' in 'Pid file exists, but the control socket (./script.control) doesn't\n+'\n+2              Pid file exists, but the control socket (./script.control) doesn't\n+\n     ok - check 'start' command status for 'script'\n     ok - check 'start' stderr for 'script'\n     ok - check 'status' command status for 'script'\n@@ -19,7 +115,40 @@\n     ok - check 'status' command status for 'script'\n     ok - check 'status' stderr for 'script'\n     # basic test: end\n-ok - basic test\n+not ok - failed subtests\n+  \u2014-\n+  filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+  trace:\n+  - line: 236\n+    source: '@builtin/tap.lua'\n+    filename: builtin/tap.lua\n+    what: Lua\n+    namewhat: method\n+    name: test\n+    src: builtin/tap.lua\n+  - line: 162\n+    source: '@/opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+    filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+    what: Lua\n+    namewhat: \n+    src: '.../local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+  - line: -1\n+    source: =[C]\n+    filename: eval\n+    what: C\n+    namewhat: global\n+    name: pcall\n+    src: '[C]'\n+  - line: 0\n+    source: '@/opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+    filename: /opt/local/work/tarantool/test/app-tap/tarantoolctl.test.lua\n+    what: main\n+    namewhat: \n+    src: '.../local/work/tarantool/test/app-tap/tarantoolctl.test.lua'\n+  planned: 16\n+  failed: 2\n+  line: 0\n+  ...\n     # basic test for bad script\n     1..8\n     ok - check 'start' command status for 'script'\n@@ -83,3 +212,4 @@\n     ok - check lsn after\n     # fill and test play output: end\n ok - fill and test play output\n+# failed subtest: 1\n```. Please provide:\na) Tarantool version\nb) A repeatable test case.\n. See also #1840\n. Discussed with @kostja.\n\nAdd box.cfg { memtx = { memory_limit = xxx } }\n\nbox.cfg { memtx = { memory_limit = xxx } }\n\nKeep box.cfg { slab_alloc_arena } for compatibility.\n. An initial prototype is done. We need to collect feedback from the team and or users.\n. >Memory specification is not clear. If memtx.slab_alloc_arena includes\nanything except actual data stored in spaces, then it needs further\ndesign consideration.\n\nmemtx.memory is overall limit both for indexes and data.\n\nUnits should be specified in configuration entry name. E.g.:\n    min_alloc_bytes\n    max_alloc_bytes\n    snapshot_period_seconds\nwal.rescan_delay is better read as wal.rescan_delay_seconds\n\nDiscussed => use bytes and seconds as units everywhere and don't add _suffixes.\n\nIt is not clear what wal.rows does. Probably better to rename to\nwal.max_row_count. The same goes about wal.size. Probably better\nto have wal.max_size_bytes\n\nI agree. I changed it to wal_max_size in the new version.\n. > logger.pipe will be more obvious if named logger.pipe_to_cmd\nIt is not clear now if options in logger are mutually exclusive. If\nit's possible to configure multiple loggers at the same time, it will\nbe useful to be able to specify different logging levels for each logger.\nIf not, an explicit logger.engine option is required, and other options\nshould be prefixed by logging engine type. E.g. logger.pipe_cmd,\nlogger.syslog_identity, logger.syslog_facility.\nThese part of initial proposal has been discarded.\n. tarantool 1.7.3.351.gc386c19-1 from Debian package fails to start after this patch:\nsystemctl start tarantool@example:\ntarantoolctl[19878]: Deprecated option logger, please use log instead\ntarantoolctl[19878]: Configuration failed: Incorrect value for option 'logger': can not override a value for a deprecated opti\ntarantoolctl[19878]: 2017-02-26 21:02:58.586 [1803] main/101/tarantoolctl I> mapping 536870912 bytes for tuple arena...\napt-cache policy  tarantool:\ntarantool:\n  Installed: 1.7.3.351.gc386c19-1\n  Candidate: 1.7.3.351.gc386c19-1\n  Version table:\n *** 1.7.3.351.gc386c19-1 990\n        990 https://packagecloud.io/tarantool/1_7/debian stretch/main amd64 Packages\n        100 /var/lib/dpkg/status\ncat /etc/default/tarantool:\ndefault_cfg = {\n    pid_file   = \"/var/run/tarantool\", -- /var/run/tarantool/${INSTANCE}.pid\n    wal_dir    = \"/var/lib/tarantool\", -- /var/lib/tarantool/${INSTANCE}/\n    snap_dir   = \"/var/lib/tarantool\", -- /var/lib/tarantool/${INSTANCE}\n    vinyl_dir = \"/var/lib/tarantool\", -- /var/lib/tarantool/${INSTANCE}\n    logger     = \"/var/log/tarantool\", -- /var/log/tarantool/${INSTANCE}.log\n    username   = \"tarantool\",\n}\nPlease add a translation table to tarantoolctl.\n. 1.7.3-354-ge7550da. Pushed via 1.6, thanks!\n1.6.9-29-gddac212\n1.7.2-224-g7030662\n. I've fixed this problem, need to be re-checked on ARM.\n. Fixed by d02db77c2a58bd243eb2aca345c04ff9c4f87974.\nRe-tested on aarch64 hardware.. \u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0441 \u0447\u0435\u0433\u043e \u0432\u044b \u0432\u0437\u044f\u043b\u0438, \u0447\u0442\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0435\u0449\u0435 \u043d\u0435 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u044b? \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u043d\u044b\u0439 \u043b\u043e\u0433 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043b\u0437?\n. Rebased and pushed as 2d7a87065d7f7f41c1d23d1d8b046773c784ec60.\nThanks!\n. Did you try collectgarbage('collect') in Lua?\n. We can't reproduce this bug.\nserver.lua:\n```\n-- ulimit -n\n-- 255\nconsole = require('console')\nbox.cfg{log=\"tarantool.log\", work_dir=\"tnt\"}\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\nlocal NUMBER_SPACES = 200\nlocal NUMBER_ELEMS = 500\nfor i = 1, NUMBER_SPACES do\n    local space = box.schema.space.create('space' .. i, {if_not_exists=true, engine='vinyl'})\n    local idx = space:create_index('primary',{parts = {1,'unsigned', 2, 'unsigned'}})\n    for i = 1, NUMBER_ELEMS do\n        space:replace{math.random(10000), math.random(10000)}\n    end\n    box.snapshot()\nend\nlocal CONSOLE_SOCKET = '/tmp/tarantool-test-console.sock'\nos.remove(CONSOLE_SOCKET)\nlocal server = console.listen(CONSOLE_SOCKET)\n```\nclient.lua\n```\nlocal socket = require('socket')\nlocal fiber = require('fiber')\nlocal NUMBER_CONNS = 150\nlocal CONSOLE_SOCKET = '/tmp/tarantool-test-console.sock'\nfor i = 1, NUMBER_CONNS  do\n    fiber.sleep(0.01)\n    local client = socket.tcp_connect(\"unix/\", CONSOLE_SOCKET)\n    local handshake = client:read{chunk = 128}\n    client:write(\"box.info\")\n    client:close()\nend\nlocal client = socket.tcp_connect(\"unix/\", CONSOLE_SOCKET)\nlocal handshake = client:read{chunk = 128}\nclient:write(\"for i = 1, 200 do box.space[\\\"space\\\" .. i]:drop() end\\n\")\nclient:close()\nos.exit(0)\n```\n. => add console.on_connect() trigger and remove these messages.\n. Requires Lua triggers from fc0b1a85df089848d4170986609a6d04510efd7a. 1.7.3-294-g21252b1. I've just pushed a Docker Image with Fedora 25 to packpack (our build system):\nhttps://hub.docker.com/r/packpack/packpack/builds/\n. Tarantool 1.6.9 is on the way, see https://travis-ci.org/tarantool/tarantool/builds/178364889.\nTarantool 1.7.2 will be later after fixing builds of recently added Ubuntu Yakkety and Fedora 25.\n. PackageCloud still doesn't support Fedora 25. I've sent a feature request.. Tarantool 1.7 is already there: https://travis-ci.org/tarantool/tarantool/jobs/178566908#L3950. - [x] https://github.com/tarantool/tarantool\n- [x] https://github.com/tarantool/queue\n- [x] https://github.com/tarantool/http\n- [x] https://github.com/tarantool/expirationd\n- [x] https://github.com/tarantool/tarantool-python\n- [x] https://github.com/tarantool/small\n- [x] https://github.com/tarantool/msgpuck\n- [x] https://github.com/tarantool/memcached\n- [x] https://github.com/tarantool/connpool\n- [x] https://github.com/tarantool/shard\n- [x] https://github.com/tarantool/mqtt\n- [x] https://github.com/tarantool/migrate\n- [x] https://github.com/tarantool/curl\n- [x] https://github.com/tarantool/s3\n- [x] https://github.com/tarantool/tarantool-php\n- [x] https://github.com/tarantool/avro-schema\n- [x] https://github.com/tarantool/gis\n- [x] https://github.com/tarantool/gperftools\n- [x] https://github.com/tarantool/modulekit\n- [x] https://github.com/tarantool/luaossl\n- [x] https://github.com/tarantool/tarantool-c\n- [x] https://github.com/tarantool/pg\n- [x] https://github.com/tarantool/mysql\n. Postponed. I've updated .travis.yml on all repos.\n. The problem is already fixes. I added asserts in 1.7 to prevent in the future.\n. I think that this fix is good enough. Rebased and pushed as a1880ceebe8de17da015d0eca0b84c045b9ae6e2\nThanks!. Hi, there is no enough information to debug this bug. Do you have a test case? . Removed. The write iterator and point-lookup iterator already use the stack of UPSERT.\nOnly the read iterator remains, so this ticket is superseded by #1833.\n. Please ensure that:\n\n[ ] Metdata of .index file is checked on recovery\n[ ] meta->filetype of .index and .run files are checked on recovery. The root cause was char path[PATH_MAX] buffer inside struct xlog_cursor inside struct vy_run_iterator inside struct vy_merge_src. malloc() simple downgraded to mmap(2) on every call.\nWe removed struct xlog_cursor from struct vy_run_iterator and this problem has almost disappear. However, useless malloc() calls still need to be eliminates when possible.\n\nI tried to apply a patch by @alyapunov, but failed:\n\nstruct vy_cursor includes struct vy_read_iterator\nstruct vy_read_iterator includes struct vy_merge_iterator\nsruct vy_merge_iterator needs definition of struct vy_merge_src for the proposed optimization\nstruct vy_merge_src depends on struct vy_stmt_iterator, struct vy_run_iterator, struct vy_mem_iterator, struct vy_txw_iterator\nall these stuff can't be moved inside vinyl.c in any reasonable way without breaking all diffs.\n\n=> Blocked by #1906\nRelevant parts of original patch are attached: gh-1953-merge-malloc-v2.diff.txt\n. Blocked by #2090 . Moving to 1.7.6 with #2090. Superseded by #2958. We need consistent cursors in Memtx for SQL requests like DELETE FROM tab WHERE a = xxx.\n. @unera schema_id is updated only on the next request. I can confirm this problem.\nUnfortunately, there is no simple fix for this problem, so we decided to move this ticket to 1.7.4. Sorry.\n. @unera We've pushed a fix. Now net.box will start to load a new version of schema just after receiving some response with a new schema_id.  All subsequent requests will be blocked waiting for the new schema. In other words, we eliminated an extra road-trip between the client and the server for your case. \nHowever, conn._schema_id variable is updated only after actual schema has been loaded. It's an internal variable, please don't rely on it in your tests.. 1. There is a bug in a condition:\nhttps://github.com/tarantool/tarantool/blob/566842f01a8e434362f8c89ba9ba54ff09d25571/src/lua/init.c#L170\n\nstrtoull also supports \"base\":\n\nhttps://github.com/tarantool/tarantool/blob/566842f01a8e434362f8c89ba9ba54ff09d25571/src/lua/init.c#L169\n\nIt is easy to check for \"0b\" and \"0x\"\n. Some more test cases by @pgulutzan:\n\n```\n\ntarantool> tonumber(20,36)\n\n72\n...\n\ntarantool> tonumber64(20,36)\n\n36\n...\n\"\n\nExample #2:\n\"\ntarantool> tonumber('-43')\n\n\n-43\n...\n\ntarantool> tonumber64('-43')\n\n18446744073709551573\n...\n\"\n\nExample #3:\n\"\ntarantool> tonumber(\"\")\n\n\nnull\n...\n\ntarantool> tonumber64(\"\")\n\n0\n...\n.\n$ lua5.1\nLua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio\n=tonumber(10, 2)\n2\n\n$ lua5.3\nLua 5.3.3  Copyright (C) 1994-2016 Lua.org, PUC-Rio\ntonumber(10, 2)\nstdin:1: bad argument #1 to 'tonumber' (string expected, got number)\nstack traceback:\n        [C]: in function 'tonumber'\n        stdin:1: in main chunk\n        [C]: in ?\n^C\n```\n\nI don't care about this case anymore.  Let's add \"string expected, got number\" to finally close this ticket.. Impedes packages.\n. Can't re-produce this problem anymore.. See also #588. 1.7.4-348-g87fb9470d. Hi, I don't see any error messages in your build.log. I'll re-test your Dockerfile soon. . I waited a minute after 100% and cmake has successfuly finished:\ndocker run -t -i gh-1969 /bin/sh\n/ # tarantool\ntarantool: version 1.7.2-314-gedffdc00e\ntype 'help' for interactive help\nThis freeze is probably caused by #1968 \n. > [100%] Built target tarantool\ncc: internal compiler error: Killed (program cc1)\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nProbably gcc was killed by OOM killer. Please try to increase the available RAM or enable swap space. \n. oops, this API is used by S3 backup. Probably it makes sense to add coio_task to the public API first.. I can't find the initial error message in this output. Please post actual error message. . okay, I've fixed this problem by  d91264f9e29283a814f51649a9ce10196cc19e81. Duplicate of #1702. sd_notify will solve this problem.\nSee #1923\n. Fixed by #940. . We discussed this feature with @GeorgyKirichenko today and realized that it can't be implemented easily in the current replication architecture. Tarantool creates a hashmap of replicas on box.cfg() using replica_uuid from greeting. Received UUID is used as a primary key to identify replicas in the replicaset, so it can't be changed without reconstructing replicaset by box.cfg(). \nSuggested workaround is to call box.cfg { replication = \"\"} and then box.cfg { replication = { list of replicas }} to re-build replicaset. . Rolling => 1.7.5. How is it supposed to work? box.info.WHAT? Please elaborate your proposal.\n. IMHO, the most users will continue to call print() instead of  console.print() and see nothing. Shall we override print() instead? How to keep it compatible with PUC-Rio Lua.\n. Implemented.. This ticket is not actual after #1842. . 1.6.9-51-g6dff383\n1.7.2-381-gd8c6069\n. 1.6.9-51-g6dff383\n1.7.2-381-gd8c6069\n. I don't see this problem anymore. Please re-open this ticket if problem still exists.. Some of our module names are already cybersquattered. See \"http\" or \"socket\" for example.\n. Fixed. Blocked by https://github.com/packpack/packpack/issues/52. Probably fixed  by #2156, please re-check.\n. Please send a pull request ;). > Display squash current rps, as well as totals, in info.vinyl()\nIt sounds like rmean, see box.stats() for example.\n. ==14636== 56 bytes in 1 blocks are possibly lost in loss record 67 of 180\n==14636==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)\n==14636==    by 0x1A9CC0: vy_range_recover_run (vinyl.c:3010)\n==14636==    by 0x1AB2C4: vy_index_open_ex (vinyl.c:3469)\n==14636==    by 0x1B1539: vy_index_open_or_create (vinyl.c:5208)\n==14636==    by 0x1B15B9: vy_index_open (vinyl.c:5249)\n==14636==    by 0x192C71: VinylIndex::open() (vinyl_index.cc:70)\n==14636==    by 0x191205: VinylEngine::addPrimaryKey(space*) (vinyl_engine.cc:120)\n==14636==    by 0x1C5B82: AddIndex::alter(alter_space*) (alter.cc:1137)\n==14636==    by 0x1C4B1E: alter_space_do(txn*, alter_space*, space*) (alter.cc:791)\n==14636==    by 0x1C651A: on_replace_dd_index(trigger*, void*) (alter.cc:1398)\n==14636==    by 0x1CF0A3: trigger_run (trigger.h:77)\n==14636==    by 0x1CFBC7: txn_commit_stmt(txn*, request*) (txn.cc:178)\n==14636==. Duplicate of #1860. 1.7.2-450-ge15ae1f. Pushed, thanks!. Please re-open if you need additional help.\n. Great proposal! I'm moving this ticket to 1.7.4.\n. Pushed 70a610d1d267344f45f765e3078eb004522204e2. ```\nvinyl/quota_timeout.test.lua                                    [ fail ]\nTest failed! Result content mismatch:\n--- vinyl/quota_timeout.result  Thu May 18 12:31:26 2017\n+++ vinyl/quota_timeout.reject  Thu May 18 12:36:26 2017\n@@ -40,7 +40,6 @@\n-- and dump is disabled, it should fail with ER_VY_QUOTA_TIMEOUT.\n_ = s:auto_increment{pad}\n\n-- error: Timed out waiting for Vinyl memory quota\n...\n box.info.vinyl().memory.used\n\n```\n. macOS doesn't support DEB/RPM packages. Please try to use LuaRocks instead.\n. > A client transaction can be started with CALL(\"box.begin\").\nYes, it can. It will be rolled back just after the CALL():\n```\ntarantool> space = box.schema.space.create('test', { engine = 'vinyl' } )\n\n...\ntarantool> pk = space:create_index('pk')\n...\ntarantool> box.schema.user.grant('guest', 'read,write,execute', 'universe')\n...\ntarantool> remote = require('net.box')\n...\ntarantool> -- Check remote two-phase transactions.\n...\ntarantool> conn = remote.connect(3313)\n...\ntarantool> function callme()\n\nbox.begin()\nspace:replace({1, 2, 3})\nend\n\n\n...\ntarantool> conn:call('callme')\n2017-03-17 14:10:08.205 [62125] main/105/main box.cc:1066 W> a transaction is active at return from 'callme'\n```\n\nVinyl doesn't abort a transaction at fiber yield. But the same fiber may serve different connections of the binary protocol. It means that queries from different connections may end up in the same transaction, or that a subsequent query which is intended for a multi-statement transaction ends up committed prematurely.\n It means that queries from different connections may end up in the same transaction\n\nYes, fiber->fls[TXN] may contain a pointer to freed memory TXN in some situations. I made multiple attempts to fix this bug, all patches were rejected by @kostja.  Here is a diff from the latest one:\n```\ndiff --git a/src/box/iproto.cc b/src/box/iproto.cc\nindex bb9ab67..954750a 100644\n--- a/src/box/iproto.cc\n+++ b/src/box/iproto.cc\n@@ -307,6 +307,21 @@ tx_process_join_subscribe(struct cmsg msg);\n static void\n net_end_join_subscribe(struct cmsg msg);\n+static void\n+tx_fiber_init(struct session session, uint64_t sync)\n+{\n+ session->sync = sync;\n+ fiber_set_session(fiber(), session);\n+ fiber_set_user(fiber(), &session->credentials);\n+}\n+\n+static void\n+tx_fiber_clear(void)\n+{\n+ fiber_set_session(fiber(), NULL);\n+ fiber_set_user(fiber(), NULL);\n+}\n+\n /\n  * Fire on_disconnect triggers in the tx\n  * thread and destroy the session object,\n@@ -317,10 +332,12 @@ tx_process_disconnect(struct cmsg m)\n {\n  struct iproto_msg msg = (struct iproto_msg ) m;\n  struct iproto_connection con = msg->connection;\n+ tx_fiber_init(con->session, 0);\n  if (con->session) {\n  if (! rlist_empty(&session_on_disconnect))\n  session_run_on_disconnect_triggers(con->session);\n  session_destroy(con->session);\n+ tx_fiber_clear();\n  con->session = NULL; / safety /\n  }\n  /\n@@ -842,14 +859,6 @@ iproto_connection_on_output(ev_loop loop, struct ev_io watcher,\n  }\n }\n-static void\n-tx_fiber_init(struct session session, uint64_t sync)\n-{\n- session->sync = sync;\n- fiber_set_session(fiber(), session);\n- fiber_set_user(fiber(), &session->credentials);\n-}\n-\n static int\n tx_check_schema(uint32_t schema_id)\n {\n@@ -881,11 +890,13 @@ tx_process1(struct cmsg m)\n  iproto_reply_select(out, &svp, msg->header.sync,\n  tuple != 0);\n  msg->write_end = obuf_create_svp(out);\n+ tx_fiber_clear();\n  return;\n error:\n  iproto_reply_error(out, diag_last_error(&fiber()->diag),\n  msg->header.sync);\n  msg->write_end = obuf_create_svp(out);\n+ tx_fiber_clear();\n }\nstatic void\n@@ -915,11 +926,13 @@ tx_process_select(struct cmsg *m)\n  port_dump(&port, out);\n  iproto_reply_select(out, &svp, msg->header.sync, port.size);\n  msg->write_end = obuf_create_svp(out);\n+ tx_fiber_clear();\n  return;\n error:\n  iproto_reply_error(out, diag_last_error(&fiber()->diag),\n  msg->header.sync);\n  msg->write_end = obuf_create_svp(out);\n+ tx_fiber_clear();\n }\nstatic void\n@@ -959,11 +972,13 @@ tx_process_misc(struct cmsg *m)\n  msg->header.sync);\n  }\n  msg->write_end = obuf_create_svp(out);\n+ tx_fiber_clear();\n  return;\n error:\n  iproto_reply_error(out, diag_last_error(&fiber()->diag),\n  msg->header.sync);\n  msg->write_end = obuf_create_svp(out);\n+ tx_fiber_clear();\n }\n```\n\nImplementation\n\nThis part is actually a new feature specification for interactive transactions in IPROTO. I changed the type of this ticket to \"feature\" and moved to 1.7.5. \n. This problem has been fix a month ago.  Vinyl is still in active development, please try to use the latest version of Tarantool from 1.7 git branch/docker tag.\n. You can use replication to upgrade. Vinyl disk layout is still in flux, we're trying to stabilize it.\n. Superseded by #1742. Confirmed. \nThis problem reproduces only with # , . and other special characters.  Please choose a different character as a workaround. We'll fix this problem later.\n. This problem doesn't block @zlobspb anymore, so I'm moving this ticket to \"prio3\".. Please check after  #1842. I'll check it LinkBench soon.. I don't see this problem on our LinkBench instance anymore. I have  vinyl_memory = 512 * 1024 * 1024 and vinyl_cache = 2 * 1024 * 1024 * 1024; with 4G of RAM on my test host and Vinyl works fine.\n. Pushed. 1.7.3-153-g37e1c29. Implemented  by @rtokarev . OK, let's touch the last snapshot file.. Already implemented, but blocked by #2606.\n. 1.7.4-429-g1a85df725. ```\n!./src/tarantool\nbox.cfg{}\nengine = 'memtx'\n-- upsert with box.tuple.new\nlocal space = box.schema.space.create('test', { engine = engine })\nindex = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned', 2, 'unsigned'} })\nfor key = 1, 100 do space:upsert(box.tuple.new{key, key, 0}, box.tuple.new{{'+', 3, 1}}) end\nspace:drop()\ncollectgarbage('collect')\n```\n2017-08-21 09:50:59.472 [5211] main/105/checkpoint_daemon I> scheduled the next snapshot at Mon Aug 21 11:06:01 2017\ntarantool: /home/roman/tarantool/1.7/src/lib/small/small/slab_cache.c:59: slab_assert: Assertion `slab->magic == slab_magic' failed.\nAborted\n. oops, false alarm. It was caused by local changes in my source tree.. This optimization for sequential keys in tuple_extract_key_slowpath_raw() is not covered by tests: https://coveralls.io/jobs/25995975/source_files/1107615913#L262\nPlease add some functional tests to get code coverage for this optimization. tuple_extract_key_raw() is used by UPSERT in MemTX and by secondary keys in Vinyl.\ntuple_extract_key() is OK.\n. The coverage is still missing even after 653c9b96af810914340ae6cac165f233013f487d patch:\nhttps://coveralls.io/builds/11682499/source?filename=src%2Fbox%2Ftuple.c#L268. rewind in tuple_extract_key_slowpath_raw() is still not tested:\nhttps://coveralls.io/jobs/26142242/source_files/1131270764#L268\n. The proposed approach doesn't work - the replication will end with DUPLICATE KEY conflict. Please elaborate.\n. Blocked #1147 . @SivaDotRender please install clang 3.9 from http://apt.llvm.org/\n. @SivaDotRender you also need the latest llvm development files (heades, libraries and so on) in the system. Anyway, I'll try to reproduce your problem on Ubuntu 14.04.\n. Please feel free to contact us on Telegram Channel if you  have questions about Tarantool development.\n. 1.6.9-56-gafce2a6\n. 1.7.3-170-g2cc0053. Fixed via 9e72a15ee70e0f0f54657f1b767b5f94086fcaa1\n1.7.3-195-g9e72a15. Discussed that we will implemented truncate via space_version in space options.\n. I'd also like to enable --local by default for non-root users.\n. Thanks for your feedback, @hishamhm! Appreciate your input.\nI spent couple hours discussing this proposal with our users. Some of them have already re-invented the wheel with their homegrown package managers based on LuaRocks. \nHere is the final plan for the first stage of this ticket:\n\nLuaRocks will be integrated into tarantoolctl tool and shipped with the main tarantool package:\ntarantoolctl rock install\ntarantoolctl rock remove\ntarantoolctl rock search\ntarantoolctl rock list\ntarantoolctl rock install <name> will install modules into ${PWD}/.rocks directory, similar to node_modules in npm and vendor/bundles in gem. \n\ntarantool will have ./.rocks/ in package.path/package.cpath by default.\n. 1.7.4-294-g54d06d7bf\nUsage:\ntarantoolctl rocks install ROCK - install a rock\ntarantoolctl rocks remove ROCK - remove a rock\ntarantoolctl rocks show ROCK - show information about an installed rock\ntarantoolctl rocks search PATTERN - search repository for rocks\ntarantoolctl rocks list - list all installed rocks\n\n\n\nAll rocks are installed to ${PWD}/.rocks directory to support separate rocks trees per project, as proposed by #2067. Rockspec can use \"tarantool >= 1.7.x\" inside dependencies = {} block to depend on a specific Tarantool version.  See 9e7c421758af156d19a66cebf713e24b42d8654b for details.\n. 1.7.4-294-g54d06d7bf\n1.8.1-384-g39584f59e. This problem is not important, moving to 1.7.6. autoincrement is a simple Lua wrapper around index:max() + space:replace().\nThere is no protocol command for autoincrement.\n. 2 chars is actually 2 bytes, so 128 is more appropriate value than 99. \nAnyway, there were some good reasons to set this limit:\n\nstruct vclock has 32 bit unsigned int map used to speed up comparison and iteration over vclock\nstruct vclock is statically allocated and huge values of VCLOCK_MAX may cause stack overlow\nReplication relay is not optimized for the large number of replicas, see #1270\n\nPlease try to deal with the first problem before increasing VCLOCK_MAX limit.\n. This problem has already been fixed.\n. This problem is not showstopper for the customer anymore. Moving to 1.7.5.\n. This pull requests looks OK for me. \nI rebased it, fixed trailing space, removed duplicate code and pushed to hmac branch. \n@GeorgyKirichenko will make the second review today. \n. #725 has been moved to 1.7.4 milestone.\n. Your patch is OK. However, there is some controversy in the team about our built-in crypto module. A very similar patch for HMAC was implemented half a year ago, but we decided to discard it and use luaossl instead. The reason was obvious - OpenSSL has tons of ciphers, digests, encryption/decryption algorithms, etc. Wrapping all these features and re-implementing luaossl is a cost we can't afford.\n@amdei, could you please take a look on luaossl? Shall we implement our own luaossl or it is better to abandon our crypto module and go with luaossl instead? I see that you are from cryptopro.ru, so I need definitely to take your feedback on this topic into account ;) \n@wahern and @daurnimator, what do you think about it?. We discussed and decided to add this feature on-board to make our users happy. For advanced crypto features please use luaossl instead. \nPushed as 1.7.3-273-g6cc47f6. Thanks for the patch and your feedback.. Fixed  by 83a16be1eabb2f7f31503b81848aa691d5430718. 1.7.4-318-gb1cb4a1f3. 1.6.9-83-g7a0996c5a. 1.7.4-151-g7e62ac79b. The code above is misleading, but correct. I re-checked man pages:\nLinux\nFrom pthread_getattr_np(3):\n\npthread_getattr_np() initializes the thread attributes object referred to by attr.\n\nFrom pthread_attr_init(3)\n\n  Calling pthread_attr_init() on a thread attributes object that has already been initialized results in undefined behavior.\n\n\nI understand these sentences as  \"pthread_getattr_np() MUST NOT be preceded by  pthread_attr_init() call\". \nFrom pthread_getattr_np(3):\n\nWhen   the   thread  attributes  object  returned  by  pthread_getattr_np()  is  no  longer  required,  it  should  be  destroyed  using pthread_attr_destroy(3)\n\n=>\npthread_attr_t thread_attr;\n    pthread_getattr_np(cord->id, &thread_attr);\n    pthread_attr_getstack(&thread_attr, &cord->sched.coro.stack,\n                          &cord->sched.coro.stack_size);\n    pthread_attr_destroy(&thread_attr);\nBSD\nSee pthread_attr_get_np(3)\n\nThe pthread_attr_get_np() function   is used to get existent thread's\n     attributes.  Itis HIGHLY RECOMMENDED to use pthread_attr_init(3) function to allocate\n     attribute storage.\n\n=> \npthread_attr_t thread_attr;\n    pthread_attr_init(&thread_attr);\n    pthread_attr_get_np(pid, &attr);\n    pthread_attr_getstack(&thread_attr, &cord->sched.coro.stack,\n                          &cord->sched.coro.stack_size);\n    pthread_attr_destroy(&thread_attr);\nmacOS\nThere are neither pthread_attr_get_np() nor pthread_getattr_np().\n=>\ncord->sched.coro.stack_size = pthread_get_stacksize_np(cord->id);\n    cord->sched.coro.stack = pthread_get_stackaddr_np(cord->id);\nI refactored this piece of code in the foolproof way:\n```\ndiff --git a/src/fiber.c b/src/fiber.c\nindex 7b67ec6..cf5d44f 100644\n--- a/src/fiber.c\n+++ b/src/fiber.c\n@@ -739,13 +739,20 @@ cord_create(struct cord cord, const char name)\n    /* Record stack extents */\n\n#if (HAVE_PTHREAD_GET_STACKSIZE_NP && HAVE_PTHREAD_GET_STACKADDR_NP)\n+       / macOS /\n        cord->sched.coro.stack_size = pthread_get_stacksize_np(cord->id);\n        cord->sched.coro.stack = pthread_get_stackaddr_np(cord->id);\n-#elif (HAVE_PTHREAD_GETATTR_NP || HAVE_PTHREAD_ATTR_GET_NP)\n+#elif HAVE_PTHREAD_ATTR_GET_NP\n+       / BSD /\n        pthread_attr_t thread_attr;\n-#if HAVE_PTHREAD_ATTR_GET_NP\n        pthread_attr_init(&thread_attr);\n-#endif\n+       pthread_attr_get_np(pid, &attr);\n+       pthread_attr_getstack(&thread_attr, &cord->sched.coro.stack,\n+                             &cord->sched.coro.stack_size);\n+       pthread_attr_destroy(&thread_attr);\n+#elif HAVE_PTHREAD_GETATTR_NP\n+       / Linux /\n+       pthread_attr_t thread_attr;\n        pthread_getattr_np(cord->id, &thread_attr);\n        pthread_attr_getstack(&thread_attr, &cord->sched.coro.stack,\n                              &cord->sched.coro.stack_size);\ndiff --git a/src/trivia/config.h.cmake b/src/trivia/config.h.cmake\nindex db1368d..1c2731e 100644\n--- a/src/trivia/config.h.cmake\n+++ b/src/trivia/config.h.cmake\n@@ -181,10 +181,6 @@\n #cmakedefine HAVE_PTHREAD_GETATTR_NP 1\n #cmakedefine HAVE_PTHREAD_ATTR_GET_NP 1\n-#if defined(HAVE_PTHREAD_ATTR_GET_NP)\n-#define pthread_getattr_np pthread_attr_get_np\n-#endif\n-\n #cmakedefine HAVE_PTHREAD_GET_STACKSIZE_NP 1\n #cmakedefine HAVE_PTHREAD_GET_STACKADDR_NP 1\n``` \nI can push the patch if you wish. I have no idea how to implement common pthread_getattr_np()/pthread_attr_getstack() API for all platforms. Thus part of POSIX has been completely screwed up by guys from GNU, BSD and Apple.. ./sysdeps/nptl/pthread.h from glibc 2.2.4:\n```\n/ Initialize thread attribute ATTR with attributes corresponding to the\n   already running thread TH.  It shall be called on uninitialized ATTR\n   and destroyed with pthread_attr_destroy when no longer needed.  /\nextern int pthread_getattr_np (pthread_t __th, pthread_attr_t __attr)\n     __THROW __nonnull ((2));\nendif\n```\n\nIt shall be called on uninitialized ATTR and destroyed with pthread_attr_destroy when no longer needed\n\nI'll patch fiber.cc to remove #ifdefs from the code.. pthread_getattr_np() + pthread_attr_destroy() combination is totally broken on Glibc 2.12 (RHELL 6.x).\nPlease forget about ASAN on this platform.\n. This ticket requires range/gap locks in the tx manager.. Moving to 1.7.6. Refactored, the ticket is not actual anymore.\n1.7.6-26-gf6ec32e8b. ```\n~/work/tarantool> make libluajit VERBOSE=1\n/usr/local/Cellar/cmake/3.6.2/bin/cmake -H/Users/e.shebunyaeva/work/tarantool -B/Users/e.shebunyaeva/work/tarantool --check-build-system CMakeFiles/Makefile.cmake 0\n/Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/Makefile2 libluajit\n/usr/local/Cellar/cmake/3.6.2/bin/cmake -H/Users/e.shebunyaeva/work/tarantool -B/Users/e.shebunyaeva/work/tarantool --check-build-system CMakeFiles/Makefile.cmake 0\n/usr/local/Cellar/cmake/3.6.2/bin/cmake -E cmake_progress_start /Users/e.shebunyaeva/work/tarantool/CMakeFiles 0\n/Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/Makefile2 CMakeFiles/libluajit.dir/all\n/Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libluajit.dir/build.make CMakeFiles/libluajit.dir/depend\ncd /Users/e.shebunyaeva/work/tarantool && /usr/local/Cellar/cmake/3.6.2/bin/cmake -E cmake_depends \"Unix Makefiles\" /Users/e.shebunyaeva/work/tarantool /Users/e.shebunyaeva/work/tarantool /Users/e.shebunyaeva/work/tarantool /Users/e.shebunyaeva/work/tarantool /Users/e.shebunyaeva/work/tarantool/CMakeFiles/libluajit.dir/DependInfo.cmake --color=\n/Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libluajit.dir/build.make CMakeFiles/libluajit.dir/build\nGenerating third_party/luajit/src/libluajit.a\ncd /Users/e.shebunyaeva/work/tarantool/third_party/luajit && /Applications/Xcode.app/Contents/Developer/usr/bin/make BUILDMODE=static HOST_CC=\"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang\" TARGET_CC=\"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang\" TARGET_CFLAGS=\"-Wno-unknown-pragmas -fexceptions -funwind-tables -fno-common -msse2 -Wno-parentheses-equality -Wno-tautological-compare -Wno-varargs -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk\" TARGET_LDFLAGS=\"-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -Wl,-macosx_version_min,10.6\" TARGET_SYS=\"Darwin\" CCOPT=\"-O0\" CCDEBUG=\"-g -ggdb\" XCFLAGS=\"-DLUA_USE_APICHECK -DLUA_USE_ASSERT\" Q='' clean\n/Applications/Xcode.app/Contents/Developer/usr/bin/make -C src clean\nrm -f luajit libluajit.a libluajit.so host/minilua host/buildvm lj_vm.S lj_bcdef.h lj_ffdef.h lj_libdef.h lj_recdef.h lj_folddef.h host/buildvm_arch.h jit/vmdef.lua .o host/.o .obj .lib .exp .dll .exe .manifest .pdb .ilk\ncd /Users/e.shebunyaeva/work/tarantool/third_party/luajit && /Applications/Xcode.app/Contents/Developer/usr/bin/make -C src BUILDMODE=static HOST_CC=\"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang\" TARGET_CC=\"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang\" TARGET_CFLAGS=\"-Wno-unknown-pragmas -fexceptions -funwind-tables -fno-common -msse2 -Wno-parentheses-equality -Wno-tautological-compare -Wno-varargs -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk\" TARGET_LDFLAGS=\"-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -Wl,-macosx_version_min,10.6\" TARGET_SYS=\"Darwin\" CCOPT=\"-O0\" CCDEBUG=\"-g -ggdb\" XCFLAGS=\"-DLUA_USE_APICHECK -DLUA_USE_ASSERT\" Q='' jit/vmdef.lua libluajit.a\nHOSTCC host/minilua.o\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -g -ggdb -O0 -Wall -DLUA_USE_APICHECK -DLUA_USE_ASSERT -I. -DLUAJIT_TARGET=LUAJIT_ARCH_x64 -DLJ_ARCH_HASFPU=1 -DLJ_ABI_SOFTFP=0 -c -o host/minilua.o host/minilua.c\nhost/minilua.c:34:10: fatal error: 'math.h' file not found\ninclude \n^\n1 error generated.\nmake[4]:  [host/minilua.o] Error 1\nmake[3]:  [third_party/luajit/src/libluajit.a] Error 2\nmake[2]:  [CMakeFiles/libluajit.dir/all] Error 2\nmake1:  [CMakeFiles/libluajit.dir/rule] Error 2\nmake: *** [libluajit] Error 2\n```. Fixed by #2002.\n. OK, moved to  1.7.5.. Re-tested today. Still actual, blocks aarch64 packages.\n. Done. Both \"%ld\" and \"%lld\" are invalid for int64_t. Please use PRI_i64 macro or explicitly cast int64 to long long.. Duplicate of #1644. Please try to install GNU libreadline from homebrew.\n. BTW, it would be nice to support systems without bloated GNU readline.\n. libunwind: http://lists.nongnu.org/archive/html/libunwind-devel/2017-02/msg00013.html. 1.7.4-329-g2e4b6fddf. See also the test cases in #2144.. OMG\nDo you have a real use case for Tarantool on Android? We can add support for bionic libc, but does  it make sense?\n. - Amalgamate all *.c source files into one\n- Remove all typedefs and add \"curl_\" prefix to all names\n- Add ipc_cond to struct curl_request\n- Remove lua_ctx  from struct curl_request\n- In function check_multi_info() instead of calling lua_ctx->done_fn call ipc_cond_wakeup(request->cond);\n-  In function async_request remove handling of \"read\", \"write\", \"done\" arguments\n-  In function async_request add ipc_cond_wait() and then push response object onto Lua stack after the following code:\nCURLMcode rc = request_start(r, &req_args);\n    if (rc != CURLM_OK)\n        goto error_exit;\n\nRename async_request() into luaT_curl_request()\nInline request_pool_get_request() code into new_request()\nRemove request pool.\nUse luaT_curl_request() from Lua code\nRemove sync_request/async_request from Lua code\nRemove all callbacks from  Lua code\n\n. I think this ticket duplicates #2083. Let's move to #2083.\n. Fixed by c83f5f7ed1aee450613d07d8e33fa0ff7cd6e31f. Duplicate of #2472. ## Stage 1\n\n[x] Research on meta-control symbols used by various REPL implementations for meta-commands, e.g. \"\\command\", \".command\", \"#command\", \"!command\" and other:\npsql\nmysql\nSQL*Plus\nsqlite\nipython REPL\nNodeJS REPL\nSwift REPL\nRuby REPL\nPHP REPL\n...\nThe goal is to find \"the least common denominator\" for meta-control characters among the most popular read-eval-print-loops and ensure that this symbol is reserved in all most popular languages we would add in future. Please post your research results to this ticket, choose any character you think is the most appropriate and then move on.\n[ ] Add preprocessor to Lua console and implement \"\\delimiter\" command by wrapping console.delimiter() function.\n[ ] Add \"\\language lua\" and \"\\language sql\" preprocessor command to switch between Lua and SQL languages. We already have some state in  console, stored in box.session.storage (see box.session.delimiter() implementation). You can extend this state to store chosen language. SQL commands can be executed by invoking box.sql.execute()\n\nLimitations for the first version:\n\nSQL language outputs results in YAML format, we will change it by the next patches.\nSQL language doesn't support auto-completion, we will decide how to add it later. \n\nStage  2\n\n[ ] Figure out which output format is more appropriate for SQL mode and post results to this ticket.\n[ ] Replace YAML with selected output.\n[ ] Implement Lua/C function to return auto-completion by string for SQL mode.\n[ ] Enable autocompletion for SQL.\n\n. Please note that this feature should be implemented against \"kyukhin/sql2-exp\" branch. This branch will be rebased and renamed to 1.8 lately.. * mysql - already uses \\  as meta-character\n psql - already uses \\  as meta-character\n sqlite - uses . as meta-character\n SQL*Plus - uses SET XXX which can change both client and server options\n Lua 5.3 - OK\n\\ at the beginning of the line is invalid:\n```\n$ lua5.3\nLua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio\n\n\\\nstdin:1: unexpected symbol near '\\'\n```\n\n\nPython 3.5 - almost OK, requires some tricks\n\n\\ is  line continuation character, but it should work for us at the beginning of the expression\n```\n$ python3.5\nPython 3.5.3 (default, Jan 19 2017, 14:11:04)\n[GCC 6.3.0 20170118] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n\\\n...\n\\\n...\n\\command\n  File \"\", line 1\n    \\command\n           ^\nSyntaxError: unexpected character after line continuation character\n```\n\n\n\n\nipython* - OK\n\nThe same as Python.\n```\n$ ipython3 \n^[[APython 3.5.3 (default, Jan 19 2017, 14:11:04)\nType \"copyright\", \"credits\" or \"license\" for more information.\nIPython 5.1.0 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object', use 'object??' for extra details.\nIn 1: \\command\n  File \"\", line 1\n    \\command\n            ^\nSyntaxError: unexpected character after line continuation character\nIn [2]: \n```\n\nRuby - OK\n\n$ irb\nirb(main):001:0> \\command\nSyntaxError: (irb):1: syntax error, unexpected $undefined\n\\command\n ^\n        from /usr/bin/irb:11:in `<main>'\nirb(main):002:0>\n\nnodejs - OK\n```\n$ \n\\\nSyntaxError: Unexpected token ILLEGAL\n\\help\n...\n...\n...\n... <!-- WTF, how to exit from this mode?\n`\n. OK, let's go with`.\n\n\n\nMeta-Commands\nAnything you enter in console that begins with an unquoted backslash is a console meta-command that is processed by console itself. These commands make console more useful for administration or scripting. Meta-commands are often called slash or backslash commands.\nThe format of a console command is the backslash, followed immediately by a command verb, then any arguments. The arguments are separated from the command verb and each other by any number of whitespace characters.\n1.8.0\n\n\\q[uit] - quit interactive console (pgsql, mysql)\n\\h[elp] or \\? - display help\n\\c[onnect] uri -  connect to remote server\n\\s[et] lang[uage] sql or \\set lang lua - change the current language\n\\s[et] delim[iter] ; or \\s[et] delim[iter] \"$EOF\" or  \\s[et] delim[iter]\" - set statement delimiter\n\\s[et] autocompletion on; or \\s[et] completion off;  - enable/disable autocompletion.\n\nLimitations for the first version:\n\nSQL language outputs results in YAML format, we will change it by the next patches.\nSQL language doesn't support auto-completion, we will decide how to add it later.\n\n\n1.8.1+\n\n\\s[et] enc[oding] cp1251 - change the current encoding \n\\s format yaml,  \\s format json- change the serializer\n\\e[dit]  - Edit command with $EDITOR\n\\sh[ow] s[pace] [name]\n \\sh[ow] f[iber]  [id]\n \\sh[ow] r[eplication] [id]\n \\sh[ow] m[emory]. > 5. The metadata is visible to all sessions in INFORMATION_SCHEMA or equivalent. The data is not visible to all sessions, and one sometimes calls the temporary table's contents \"session-specific data\".\n\nThe implementation of \"session-local temporary table data rows \" requires significant changes of Tarantool internals. I don't think we can do it in the foreseeable future. I suggest to move this ticket into wishlist.\n. How do you want to print Lua stack trace from a signal handler? I don't understand the idea of this ticket.. Duplicate of #2104. 1.7.4-12-gfd5cd14e0. Fixed by a1c0d98911d96be0cce840d966de4170a3e6744c. Let's return to this ticket after finishing with benchmarks.\nSee #2400. Each page is already written as a single xlog transaction. Please see https://github.com/tarantool/tarantool/blob/a8e6b7204dee5eeb0832b5fe20cf0ba6a7511d47/src/box/vinyl.c#L2126-L2171\n. We use uint32_t almost everywhere in tuples. Shall we change it to int32_t?\n. This ticket is not actual anymore. See 13ec18c75794436f60807b8248fe14e511ed3df8 . Oops, \"box.cfg{ replication = {} }\" must work. This is a regression  since 1.6.x, moving back to 1.7.4.\n. Superseded by #2226.\n. Pushed, thanks!. Hi @rtokarev,\n@pgulutzan found a bug in your code:\n```\ntarantool> box.space.memtx:insert({1})\n\n\n1\n...\n\ntarantool> box.space.memtx:insert({2})\n\n[2]\n...\n\ntarantool> box.space.memtx:bsize()\n\n4\n...\n\ntarantool> box.space.memtx:truncate()\n...\ntarantool> box.space.memtx:bsize()\n\n4\n...\n```\n\nCould you please fix space:bsize() in case of DDL and add a test case? \n. This feature is not \"breaking change\", but it needed for the customer  => 1.7.4. ### Proposal\n\nExtend all requests with optional keyword arguments: \n\nconn.space:insert(tuple)  => :insert(tuple[, opts]) \nconn.space:replace(tuple) => :replace(tuple[, opts])\nconn.space.name.index:get(key) => :get(key[, opts])\nconn.space.name.index:select(key[, opts]) => no changes\nconn.space.name.index:delete(key) => :delete(key[, opts])\nconn.space.name.index:update(key, expr) => :update(key, expr[, opts])\nconn.space.name.index:upsert(key[, expr]) => :upsert(key[[, expr], opts])\n\nAdd a new per-request option buffer = <ibuf object>:\n\nconn.space.name.index:select(key, { buffer = <ibuf object> })\n\n\nIf buffer option is set then net.box skips msgpack.decode() on xrow->body and copies (memcpy()) entire  xrow->body directly to <ibuf object>. The buffer is not truncated before copying. The number of written bytes is returned from :requestname() functions.  \n\n\n{ buffer = nil } case is not changed and continues to return Lua tables as results.\n\n\nError handling is not changed in both cases.\n\n\nWe already have unofficial internal bindings to struct ibuf - see require('buffer').\nAlternative: copy only xrow->body[IPROTO_DATA] instead of just entire xrow->body.\n\nA follow up enhancement. Add timeout option to all requests and deprecate weird :timeout(): construction:\n\nconn:timeout(<timeout>).space:insert(tuple) => conn.space.insert(tuple, { timeout = <timeout> })\nReasonable\nRaw MessagePack output is needed  to workaround buggy GC in LuaJIT. For example, space:select(key, { limit = 100000}) may create 100000 cdata objects and kill LuaJIT by finalizers limit.  \n@Sulverus will be able to implement C function in tarantool/shard to merge multiple <ibuf> without producing Lua garbage.\nPros\n\n\nThis change is easy to implement and backward-compatible.\n\n\nThis proposal doesn't violate encapsulation of net.box and doesn't require merging of tarantool/shard into net.box and vice versa. \n\n\nI plan to extended require('buffer') as a replacement of slow Lua strings. For example, buffer can be used to implement encoding/decoding of raw types in MessagePack. socket module already supports buffer in some functions.\n\n\nopts can be used of other options in the future\n\n\nCons\nCurrent API of conn:call() and conn:eval() can't be extended with opts table:\nconn:call(funcname, arg1, arg2, arg3, ...)\nconn:eval(expr, arg1, arg2, arg3, ...)\nPossible solutions:\n\n\nDon't extend call() and eval() with opts and ignore problem for now.  Obviously :timeout: can't be deprecated in this case.\n\n\nWrap arguments into Lua table (a breaking change):\n\n\nconn:call(funcname, arg1, arg2, arg3, ...) => conn:call(funcname, {arg1, arg2, arg3, ... }[, opts]) \nconn:eval(expr, arg1, arg2, arg3, ...)  => conn:eval(expr, {arg1, arg2, arg3, ... }[, opts])\nPlease note that net.box already wraps ... into {...} under the hood:\n```\nfunction remote_methods:call_16(func_name, ...)\n    remote_check(self, 'call')\n    return self:_request('call_16', tostring(func_name), {...})\nend\nfunction remote_methods:call(func_name, ...)\n    remote_check(self, 'call')\n    return unpack(self:_request('call_17', tostring(func_name), {...}))\nend\n```\n{...} breaks JIT traces, but we already know that LuaJIT doesn't have real JIT.\nANyway, call(name, arg1, arg2, ...) is very conventional syntax. Builtin pcall() has the same syntax.\n\nThe same as 2, but use existing call_16 per-connection option to switch between old and new API:\n\nnet.box:connect(host, port, {call_16 = true}):call(funcname, arg1, arg2, ...)\nnet.box:connect(host, port):call(funcname, {arg1, arg2, ...}, opts)\nWe have already broken call() in 1.7.x, so call_16 is not big deal.\n\nAdd new functions:\n\nconn:xcall(funcname, {arg1, arg2, arg3, ...}[, opts]) \nconn:xeval(expr, {arg1, arg2, arg3, ...}[, opts]))\nI have no idea how to name these functions.\n\nPut opts table as the first argument:\n\nconn:call({ name = <funcname>, timeout = <timeout>, buffer = <buffer>}, arg1, arg2, arg3, ...) \nconn:eval({ expr = <expr>, timeout = <timeout>, buffer = <buffer>}, arg1, arg2, arg3, ...)\n\nDiscard the first part of my proposal and  continue in :timeout: style:\n\nconn:opts({timeout = <timeout>, buffer = <buffer>}.space:select(). @mejedi said that (4) is better than (6), but we need to find some better name than \"call_ex\".\n. > There's another issue @rtsisyk didn't mention. Currently, :select() argument is optional. Adding options create an ambiguity: how to treat :select() with 1 argument?\nselect(key) should be handled as select(key, {})\n. > Troubles with current implementation shouldn't bother us in API redesign.\nWe can (and should) use :opts construction like these:\n\nnb_object = net.box:connect('host:port')\nnb_wrapper = nb_object:opts()\nnb_wrapper:select(...)\nnb_wrapper:insert(...)\n\nLet's take a look on our real problem:\n```\nlocal ibuf = require('buffer').ibuf\nnb_object = net.box:connect('host:port')\nnb_wrapper = nb_object:opts({ buffer = ibuf, timeout = 100500 })\nibuf:reset()\nnb_wrapper:select(key)\nhandle_raw_msgpack(ibuf.rpos, ibuf.wpos)\nibuf:reset()\nnb_wrapper:insert(tuple)\nhandle_raw_msgpack(ibuf.rpos, ibuf.wpos)\n```\nvs\n```\nlocal ibuf = require('buffer').ibuf\nnb = net.box:connect('host:port')\nibuf:reset()\nnb_wrapper:select(key, { buffer = ibuf, timeout = 100500 })\nhandle_raw_msgpack(ibuf.rpos, ibuf.wpos)\nibuf:reset()\nnb_wrapper:insert(tuple, { buffer = ibuf, timeout = 100500 })\nhandle_raw_msgpack(ibuf.rpos, ibuf.wpos)\n```\nIn the second example per-request arguments are explicitly passed per request. It is so obvious that per-request arguments are per-request arguments, isn't it? I have no idea why buffer, which is an in-out argument to request, should be stored somewhere in a global state (nb_wrapper). The first example is simple more error-prone than the second one, especially for our buffer case.\nI vote for conn:call(name, {arg1, arg2, arg3, ...}, {opts}) with call_v16 per-connection option for compatibility:\n\nThe second example above looks more natural for me, because the request parameters are actually request parameters.\nI agree with @mejedi that :timeout: implementation is a mess and there is no way to fix it.\nvarargs to conn:call(name, ...) are implicitly packed to a Lua table under the hood and this operation is very inefficient in LuaJIT.\nconn:call(name, arg, nil, arg2, nil) doesn't work as expected and it can't be fixed in any efficient way.\nWe already transformed box.replace(space_id, part1, part, part3, ...) to space:replace({part1, part2, part3, ...}) somewhere  in the past and I have no motivation to keep legacy non-extendable call() API.\nCALL has already been broken in 1.7.x and the most 1.6.x users will need call_v16 per-option to migrate.\n\nLet's schedule a meeting today to find a consensus.. We forgot to change call() API. Re-opened.\n. This is a follow up for #1927, moving to 1.7.4 prio1.. > log.log_pid looks kind of ugly. Maybe it's better to rename log_pid to pid, to avoid unnecessary repetition?\nAlready done, see 1.7.\n. ```\nbox/session.test.lua                                            [ fail ]\nTest failed! Result content mismatch:\n--- box/session.result  Tue Mar 28 18:50:34 2017\n+++ box/session.reject  Tue Mar 28 18:56:39 2017\n@@ -228,7 +228,7 @@\n ...\n active_connections\n ---\n-- 0\n+- -2\n ...\n space:drop()\n ---\n```\nI fed up with this test. Please re-write using TAP to avoid interference of test-run.. I don't the idea of storing Lua code in data spaces. It would be better to allow SQL's CALL <name> to work like IPROTO_CALL and support all global Lua functions and defined C procedures.\n. We already have box_truncate() C API for that.\n. box_upsert() C API should be used instead of Lua's box.space.t:upsert(...)\n. There is no C API to rename tables, you can call  box_update() C API on _space meta-space for that:\n```\nbox.schema.space.rename = function(space_id, space_name)\n    check_param(space_id, 'space_id', 'number')\n    check_param(space_name, 'space_name', 'string')\nlocal _space = box.space[box.schema.SPACE_ID]\n_space:update(space_id, {{\"=\", 3, space_name}}) <!--- box_update()\n\nend\n```. Status: this patch requires the test cases. Please note that there are two functions:\n\n\nbox.schema.user.password(password)\n  Return a hash of a user\u2019s password.\n\n\nbox.schema.user.passwd(user-name, password)\n  Associate a password with the user who is currently logged in. or with another user. Users who wish to change their own passwords should use box.schema.user.passwd(password). Administrators who wish to change passwords of other users should use box.schema.user.passwd(user-name, password).\n\n\nI agree that password() vs passwd() are misleading. We will discuss possible removal or renaming of  password() lately.. Documentation problem => 1.7.5. Superseded by #2226.. Superseded by #2226.. A directive from @kostja: benchmark the performance of these extra checks using Lua benchmarks from https://github.com/tarantool/microbench.git.\n\n[ ] Interpreter performance\n[ ] Optimized JIT trace\n. I don't see any problems on microb.. I suggest to move these functions to require('tarantool').\n. API doesn't look finished:\n\n```\ntarantool> require('title').get()\n\n-\n- interpretor_name: ./src/tarantool\n...\n```\n\nWhy the first line is empty?\nWhy the output is an array instead of a key/value map?\ninterpretor_name is misspelled and very hard to type\n\n```\ntarantool> require('title').update('wtf')\n\n...\ntarantool> require('title').get()\n\n'tarantool: wtf'\ninterpretor_name: ./src/tarantool\n  custom_title: wtf\n...\n\ntarantool> require('title').update()\n...\ntarantool> require('title').get()\n\n'tarantool: wtf'\n\ninterpretor_name: ./src/tarantool\n  custom_title: wtf\n...\n```\n\n\nWhy now the first line is not empty?. 1.7.4-368-g064320516. It would be nice to see at least the stack trace. This crash is not caused by a bug in  space_bsize_update(). This assertion just demonstrate that we handle old/new tuples on rollback in the wrong way.\n. Follow up #2224\n. I want to rename sc_version and schema_id to schema_version. Does it work or you?. Fixed by 3906fb132d3de95023c93f06361000475cc2694b. while ./test-run.py replication-py/multi; do sleep 0.1; done get stuck on my machine.\n. 1.7.5-43-g753493581. Forbd DDL/DML when wal_mode is 'none' in 1.7.5-266-gb75ab0e03. > It accepts the following parameters:\n\nprepared statement text,\n   prepared statement parameters,\n   execution options.\n\n\n\nWhy \"prepared\"? It should be just \"statement text\" and \"statement parameters\".\n\nIPROTO_FIELD_NAME - a string with column name, e.g. \"*\", \"1\", \"address\"\n\nDoes \"*\" have any special meaning here?\n\nIPROTO_SQL_TEXT contains a query text. IRPOTO_SQL_BIND contains an array of tuples (positioned bind, e.g. :1, :2, etc) or array of maps (named binds, eg.. :field1, :field2)\n\nPlease specify exactly which format will be used for binding parameters:\n  - position arguments: $1 (:1, %s, :1, etc.)\n  - named arguments: $name (:name, %(name)s, etc.)\n. We need to find a way to remove index_lsn from box.space._index to fix this problem.\n. Fixed. da85fd2a0f0790915a0edace73ee1daed48d135e. This is not a bug. The zero value of LSN is not stored in vclock since 1.7.1.\n``\n./src/tarantool \nversion 1.7.3-516-ga15b4865d\ntype 'help' for interactive help\ntarantool> box.cfg{}\n2017-04-10 19:35:59.836 [984] main/101/interactive C> version 1.7.3-516-ga15b4865d\n2017-04-10 19:35:59.836 [984] main/101/interactive C> log level 5\n2017-04-10 19:35:59.837 [984] main/101/interactive I> mapping 268435456 bytes for tuple arena...\n2017-04-10 19:35:59.886 [984] main/101/interactive I> initializing an empty data directory\n2017-04-10 19:35:59.906 [984] snapshot/101/main I> saving snapshot./00000000000000000000.snap.inprogress'\n2017-04-10 19:35:59.906 [984] snapshot/101/main I> done\n2017-04-10 19:35:59.914 [984] main/101/interactive I> vinyl checkpoint done\n2017-04-10 19:35:59.919 [984] main/101/interactive I> ready to accept requests\n\n...\ntarantool> box.info.vclock[box.info.server.id]\n\nnull\n...\ntarantool> box.space._schema:insert({'hello'})\n\n\n\n['hello']\n...\n\ntarantool> box.info.vclock[box.info.server.id]\n\n1\n...\n```\n\nI added a test case to replication/status.test.lua to finalize this behavior.\n. Pushed as 1.7.3-510-g1ce51c810. + New write iterator should handle duplicated LSN properly (decided during meeting on 2017-04-17).\n. Looks too complicated. I'll review these patches later, let me finish with 1.7.4 first.. \n\nWednesday, April 12, 2017 6:27 PM +03:00 from Aleksandr Lyapunov notifications@github.com:\n@alyapunov requested changes on this pull request.\nAlmost perfect. I like the virtual table.\nI found one minor issue, see below.\n\nFixed.\n-- \nWBR,\nRoman Tsisyk roman@tarantool.org\nhttp://tarantool.org/ - an efficient in-memory data store and a Lua application server\n. Caused by \n```\ncommit 8116f2096fefdbda9684dbc1f5194d7038bd1b8a\nAuthor: Vladimir Davydov vdavydov.dev@gmail.com\nDate:   Wed Apr 5 18:32:01 2017 +0300\nvinyl: pin in-memory trees on tx prepare\n\nPin each in-memory tree which is going to be modified by a transaction\non Engine::prepare, unpin it on commit or rollback. Pinned in-memory\ntrees can't be dumped until they are unpinned - dump/compaction task\nconstructors wait until pin_count drops to 0 before handing the task\nover to a worker thread. Since the constructors rotate the in-memory\ntree before waiting and new transaction can only go to active in-memory\ntrees, they won't wait forever, only until all transactions that were\nstarted before the task was scheduled are over.\n\n.\n(gdb) bt\n0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:58\n1  0x00007f866ee0040a in __GI_abort () at abort.c:89\n2  0x000055ad9f85a48d in sig_fatal_cb (signo=11) at /data/work/tarantool/1.7/src/main.cc:198\n3  \n4  0x000055ad9f91c569 in tuple_format_id (format=0x2323232323232323) at /data/work/tarantool/1.7/src/box/tuple_format.h:161\n5  0x000055ad9f9274b7 in vy_mem_insert (mem=0x55ada0b5b6f0, stmt=0x7f8644400020) at /data/work/tarantool/1.7/src/box/vy_mem.c:152\n6  0x000055ad9f8f2c85 in vy_range_set (range=0x55ada0b6b790, mem=0x55ada0b5b6f0, stmt=0x55ada0c228f0, region_stmt=0x7f866e41fbb0)\nat /data/work/tarantool/1.7/src/box/vinyl.c:3652\n\n7  0x000055ad9f8f3a80 in vy_tx_write (index=0x55ada0b57f40, mem=0x55ada0b5b6f0, stmt=0x55ada0c228f0, region_stmt=0x7f866e41fbb0,\nstatus=VINYL_ONLINE) at /data/work/tarantool/1.7/src/box/vinyl.c:3879\n\n8  0x000055ad9f907a93 in vy_commit (e=0x55ada0afa7b0, tx=0x55ada0b69de0, lsn=65419) at /data/work/tarantool/1.7/src/box/vinyl.c:7267\n9  0x000055ad9f8d3809 in VinylEngine::commit (this=0x55ada0afa770, txn=0x7f866e537098, lsn=65419)\nat /data/work/tarantool/1.7/src/box/vinyl_engine.cc:223\n\n10 0x000055ad9f96afa7 in txn_commit (txn=0x7f866e537098) at /data/work/tarantool/1.7/src/box/txn.cc:248\n11 0x000055ad9f96a829 in txn_commit_stmt (txn=0x7f866e537098, request=0x7f866e537040) at /data/work/tarantool/1.7/src/box/txn.cc:181\n12 0x000055ad9f97067a in process_rw (request=0x7f866e537040, space=0x55ada0b45f40, result=0x7f866e41fe20)\nat /data/work/tarantool/1.7/src/box/box.cc:211\n\n13 0x000055ad9f973aae in box_process1 (request=0x7f866e537040, result=0x7f866e41fe20) at /data/work/tarantool/1.7/src/box/box.cc:688\n14 0x000055ad9f973fb2 in box_replace (space_id=515, tuple=0x7f866e537038 \"\\221\\001\\261\\240\\255U\", tuple_end=0x7f866e53703a \"\\261\\240\\255U\",\nresult=0x7f866e41fe20) at /data/work/tarantool/1.7/src/box/box.cc:742\n\n15 0x000055ad9f9a9890 in lbox_replace (L=0x41035230) at /data/work/tarantool/1.7/src/box/lua/index.c:70\n16 0x000055ad9fa3d8fb in lj_BC_FUNCC ()\n17 0x000055ad9fa6f706 in lua_pcall (L=0x41035230, nargs=3, nresults=0, errfunc=0) at lj_api.c:1055\n18 0x000055ad9fa02396 in luaT_call (L=0x41035230, nargs=3, nreturns=0) at /data/work/tarantool/1.7/src/lua/utils.c:954\n19 0x000055ad9f9f69a2 in lua_fiber_run_f (ap=0x7f866e4001b0) at /data/work/tarantool/1.7/src/lua/fiber.c:267\n20 0x000055ad9f859e35 in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x55ad9f9f6898 ,\nap=0x7f866e4001b0) at /data/work/tarantool/1.7/src/fiber.h:550\n\n21 0x000055ad9fa1de6d in fiber_loop (data=0x0) at /data/work/tarantool/1.7/src/fiber.c:557\n22 0x000055ad9fcc3cf8 in coro_init () at /data/work/tarantool/1.7/third_party/coro/coro.c:110\n```. Shall we move all extensions to LuaJIT repository?. Hi, it is not a bug, it was implemented in such way internally to keep compatibility with 1.6/1.7 output.\nLet's change __serialize for error objects in 1.8. . I added \"Version:\" to use it in the future versions of Tarantool. Currently xlog reader doesn't use it.. Added the full version including git hash instead \"1.7.x\".\n. Hi, we've fixed this problem in 1.7:\ndupreplica> \nmain/105/applier/ I> authenticated\nmain/105/applier/ I> can't read row\nmain/105/applier/ xrow.cc:430 E> ER_CFG: Incorrect value for option 'replication': duplicate connection with the same replica UUID\n. Are you sure? We don't have enough time to backport features which are already exist in 1.7.x.... Discussed with @kostja today: add a check that replica's UUID is not equal to self UUID.. OK, we'll try to reproduce this problem again.\n. Please re-open if problem still exists.. OMG, it seems that systemd versions are not compatible with each other... I'll check this problem on CentOS 7.\n. > It is probably worth changing the settings Restart=on-failure to Restart=always\nOK, we will check the best practices for this value on RPM and Debian systems and change our .service file according to the results.\nAs a temporary workaround, you can override this setting by creating a \"drop-in\" file in /etc/systemd/system/tarantool@example.service.d/. Please see comments in /usr/lib/systemd/system/tarantool.service and systemd documentation for additional information.\n. I researched this problem:\n\nPackageDebianFedora\nPostgreSQLRestart=alwaysdefault\nMySQLRestart=on-failure, RestartPreventExitStatus=1-\nMariaDBmissing systemd filesRestart=on-abort, RestartSec=5s\nRedisRestart=alwaysdefault\nMongoDBdefaultdefault\nnginxdefaultdefault\nApache2Restart=on-abortdefault\nPostfixdefaultdefault\nSendmailmissing systemd filesdefault\nSambadefaultdefault\n\nThe most packages have default settings for Restart= option both on Debian and Fedora.\nTarantool should follow the best practices of major distributions. Please use \"drop-in\" to override the default value.  See comments in /usr/lib/systemd/system/tarantool.service and refer systemd documentation for additional information. CoreOS website has a good tutorial about drop-ins.\n. 1. Yes, it should. We will investigate this regression.\n2. I don't understand what do you mean.\n3. Please see comment in box_process_join().\n. > 1. As i've understood it is in xrow.cc\nExactly. You are absolutely right. box_process_join() uses xrow_encode_header() to prepare response, but  xrow_encode_header() skips IPROTO_SYNC key during encoding. We commented out this block in order to avoid writing IPROTO_SYNC to disk files. As you can see, the function xrow_encode_header() is used both for network packets and disk rows.\n\n\nWhen i'm trying to join (send JOIN request) with UUID that is already in cluster space:\n    v1.6.9 response with snapshot and errror 40 duplicate uuid in cluster and no VCLOCK\n    v1.7 send VCLOCKs without any errors\n\n\nI've got it. There is a separate ticket for this problem. Please see https://github.com/tarantool/tarantool/issues/2327\n\n\nHave seen in source this morning already. Thank you.\n\n\nHere is a link to this comment:\nhttps://github.com/tarantool/tarantool/blob/1fd570cfeb048130f011d60cc99e87421f665992/src/box/box.cc#L1127-L1166\nThis comment is the ultimate source of truth about replication JOIN protocol in 1.7.x. \n\n\nWill fix be applied to v1.6.9 (not only 1.7.5)?\n\n\nI wonder why do you need SYNC value in IPROTO_JOIN response? Some admin commands, like IPROTO_JOIN and IPROTO_SUBSCRIBE can't be mixed with other DML requests, like  IPROTO_REPLACE, IPROTO_DELETE and others. The reason IPROTO_JOIN/IPROTO_SUBSCRIBE can't multiplexed is just technical - we transfer client's fd to a separate thread to send snapshots and xlogs from the disk. Due to fact that even our replication client doesn't need SYNC value, I don't think this problem is very important for us. Anyway,  pull requests && patches are always welcome :)\n. 1.7.4-332-gd5dfc597e. 92bb45f48be64167f2ed946a0624937c1e6b3832. 1.7.4-417-g362559ef3. 1.7.4-348-g87fb9470d. we don't have enough time to finish this feature in 1.7.5, moving to 1.7.6. I think we can disable -Wall -Wextra for this third-party code for 1.8.0 alpha release.\n. 1.7.3-590-g49f67f680. 1.7.4-473-ge3c5fde4b. I pushed the first patch. There was a separate ticket for this feature - #889.. Superseded by #2485. Any news?. Please start with making a patch for 1.7 to extract tuple_hash code into tuple_hash.h/c, I'll push it immediately. . Affects #2629. Looks good for me in general. Please convert this gist into a pull request to tarantool/doc and I'll comment it line by line.\n. Sorry I completely missed this breaking change when worked on #2195. Please review ASAP.\n. @GeorgyKirichenko Do you mean rename \"check_XXX\"  functions?. OK, I renamed check_call_16 to check_call_args, check_eval_16 to check_eval_args and remote_check to check_remote_arg to follow conventions in schema.lua. > Proposal -> add cfg_gets (values loaded, before loaded, custom) for systemd for user to send READY from Lua when it wants.\nSounds interesting, but raises a lot of questions. Let's finish sd_notify feature first and discuss this proposal later.\n. 1.7.4-368-g064320516. Yeah, we will try to upgrade our fork soon. . I've updated LuaJIT to 2.1.0-beta3 in 1.7 branch. Please note that LJ_GC64 is still off. We don't think that this feature makes sense with the current implementation of GC in LuaJIT. \n. It seems that error(x, 2) trick doesn't work in our case. All Lua API is implemented via FFI or Lua/C. C API creates a struct error object for every error, sets it into a global errno-like variable (struct diag) and returns -1. Both FFI and Lua/C calls C API, checks for -1, gets precreated struct error object and re-throws it to the upper levels as CDATA. Upper levels (IPROTO_CALL, IPROTO_EVAL, console, triggers, fiber.create()) extracts original struct error from Lua and saves back to our errno (struct diag). In this scheme any information added by Lua is simple discarded.\nThis problem can only be solved by adding tracebacks to struct error. I've updated https://github.com/tarantool/tarantool/issues/677 and attached code we made during investigation of this ticket.\nDuplicate of #677\n. OK, let's try to patch ALTER to re-use existing box.space objects, then apply the same fix to net.box.\n. 1.7.5-257-g300bc7dac. Duplicate of #1906. It should be prio1 instead of prio3.\n. Closed by 59a6eb3cdafc810556d56d7442c2967e829c5c22. Fixed by 9e5f37573b0887009349dbc9ca620e5696a9e387. Rebased and pushed as 4e993720bca5b84effed7a04ae455531554eec7d.\nThanks!. Fixed by 323f33b564b8fabf3ab853861f83d25c61babd7d. Fixed by  49293c4b121029c52b88ba6eab6c630f6caacdff. Rebased and pushed to 1.7 as 61f4c7167b1d87a3542b8e1192ad25b578134303. Fixed. #2253 has been pushed, this ticket is now unblocked.. Please move to 1.7.8. Now it fails on TARGET=coverage on Travis:\nunit/guard.test                                                 [ fail ]\nTest failed! Result content mismatch:\n--- unit/guard.result   Thu May 18 06:42:36 2017\n+++ unit/guard.reject   Thu May 18 06:50:57 2017\n@@ -1 +0,0 @@\n-# signal handler called\nmake: *** [coverage] Error 255\nThe command \"make -f .travis.mk ${TARGET}\" exited with 2.\ncache.2\nstore build cache\n0.01s\n0.61snothing changed, not updating cache. 1.\n\n\nTo crash the console, say \\set and an SQL statement\nwithout saying box.cfg{}. \n\ntarantool> values (1)\nbuiltin/box/load_cfg.lua:322: Please call box.cfg{} first\nstack traceback:\nbuiltin/box/load_cfg.lua:322: in function '__index'\nbuiltin/box/console.lua:153: in function 'eval'\nbuiltin/box/console.lua:325: in function 'repl'\nbuiltin/box/console.lua:373: in function \n\nFixed in 1.8.0-101-g8c8bdb42d:\n```\n./src/tarantool\nversion 1.8.0-100-g38c5400f0\ntype 'help' for interactive help\ntarantool> \\set language sql\n\n\ntrue\n...\n\ntarantool> SELECT * FROM _space;\n\nerror: \"builtin/box/load_cfg.lua:322: Please call box.cfg{} first\\nstack traceback:\\n\\tbuiltin/box/load_cfg.lua:322:\n    in function '__index'\\n\\tbuiltin/box/console.lua:153: in function \\n\\t[C]:\n    in function 'pcall'\\n\\tbuiltin/box/console.lua:153: in function 'eval'\\n\\tbuiltin/box/console.lua:325:\n    in function 'repl'\\n\\tbuiltin/box/console.lua:373: in function \"\n...\n\n```\nbox.cfg() can only be called from Lua. Console doesn't call it implicitly.\n\n\n\n\nClarification of the description in issue#2117:\n\\h[elp]\ndoes not mean you can enter \\h or \\he or \\hel or \\help.\nYou can only enter \\h or \\help.\nI assume this is deliberate, and it's fine.\nBut for documentation reasons I'd like confirmation\nthat it is deliberate.\n\nYes, only \\h and \\help forms are supported and that is deliberate.\n3.\n\nI believe it was agreed that upper case would be\nallowed, for example\n\\SET DELIMITER ;\nPerhaps there is already an issue report for this,\nbut I don't see it.\n\nBoth mysql and psql have case-sensitive backslash commands:\nMariaDB [(none)]> \\d ;\nMariaDB [(none)]> \\D ;\nERROR: Unknown command '\\D'.\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '\\D' at line 1\nMariaDB [(none)]>\npostgres=> \\set\nAUTOCOMMIT = 'on'\nPROMPT1 = '%/%R%# '\nPROMPT2 = '%/%R%# '\nPROMPT3 = '>> '\nVERBOSITY = 'default'\nSHOW_CONTEXT = 'errors'\nVERSION = 'PostgreSQL 9.6.2 on x86_64-pc-linux-gnu, compiled by gcc (Debian 6.3.0-10) 6.3.0 20170321, 64-bit'\nDBNAME = 'roman'\nUSER = 'roman'\nHOST = '/var/run/postgresql'\nPORT = '5432'\nENCODING = 'UTF8'\npostgres=> \\SET\nInvalid command \\SET. Try \\? for help.\npostgres=>\n\n\n\nUp-arrow (used to repeat previous statement) may not\nbe working in a way that everyone would expect. For example, say:\nbox.cfg{}\n\\set language sql\n\\set delimiter ;\nvalues (1);\nThat works fine.\nNow I press up-arrow. I see \"values (1)\". I don't see \"values (1);\".\nIs it deliberate to repeat the statement, but not repeat the delimiter?\n\n\n\nIt works in the same way as Lua console.\n5.\n\nThe delimiter does not apply to so-called meta-commands. For example:\nbox.cfg{}\n\\set language sql\n\\set delimiter ;\n\\set language lua;\nResult = - error: 'Invalid language \"lua;\", supported languages: lua and\nsql.'\nIs it deliberate to say delimiter does not apply for what begins with \"\"?\n\nYes, it is deliberate. Meta-commands ain't affected by delimiter.\n6.\n\nf I put two SQL statements on one line, the return from the\n\nfirst statement is ignored. For example (after saying box.cfg):\n   \"\n   tarantool> \\set language sql\ntrue\n   ...\ntarantool> \\set delimiter ;\n...\ntarantool> VALUES (1); VALUES (2);\n\nIt is not a problem of console:\n```\ntarantool> box.sql.execute(\"VALUES(1); VALUES(2)\")\n\n\n\n\n[2]\n...\n```\n\n\n\nWe plan to discuss this problem, I'll post an update later.. @Gerold103 console uses yaml to encode output.\n. > box/errinj.test.lua - sometimes, standalone\nhttps://github.com/tarantool/tarantool/issues/2270. > replication/autobootstrap.test.lua, tag: vinyl (sequencial run (with -j), probably some race condition) fails sometimes\nI can' re-produce this problem:\nwhile true; do ./test-run.py autobootstrap -j; done\n\nThese tests don't fails on Travis CI too. Please find a way how to re-produce this problem and open a separate ticket with instructions.\n. Closed by 19cda0fca86d791cf0fe829be607551cd9284423. Done. A test case by @Gerold103:\n0001-vinyl-add-test-on-incorrect-pk-lookup.patch.txt\nPlease apply this patch if you find a solution for this problem.. Blocked by #2090 . Yes, this ticket should be in 1.7.6, because it requires #2060.. Looks like a regression caused by LuaJIT upgrade. Moving to 1.7.5 prio1.. This problem is caused by buggy time_t definition in pwd.lua. Probably the same bug as we have in production.. I found that admin doesn't have permissions on universe:\nbox.schema.user.grant('admin', 'read,write,execute', 'universe'). This ticket is postponed. We want to create specialized write iterators for dump and compact to avoid working with formats from compaction threads.\n\n. Probably we need to implement online alter for memtx first.\n. We re-benchmarked all commits, there wasn't any regression.\n. This approach may not work, because vy_run can be used from multiple threads, but tuple_format is not thread-safe.. uint32_t space_id = lua_tointeger(L, n)  in net_box.c truncates the space number, because lua_Integer is ptrdiff_t which is signed 32-bit type on 32-bit platform.\n=> Implement luaT_checkuint32() like luaT_checkuint64().\n. 1.7.4-186-g3a13be1de. mp_snprintf() already escapes non-printable strings.\n. tarantool@.service provides an example to how to increase NoFILE limit under systemd. Anyway, I agree that we should increase the default value to 64k or something like that.\n. 1.7.4-460-ga362eff6a. > Does possible to give access into box from C Api? \nWe have box_XXX() family of functions to work with spaces, indexes and so on. Our Lua integration is fully based on this API.\n\nI wish to see cluster info and anyone else might wish to get more info about server/cluster into own module.\n\nDo you mean box.info.replication? We can export this information too, but it requires some new API which should be designed and discussed with the community. Could you please propose some API which will solve your problem? Remember that module.h API can't have structures to keep ABI compatibility.\nBTW, @tonyfreeman has already exported luaT_state() function which can be used to call Lua from C stored procedures. You can use it to query box.info.replication from C as a temporary workaround.\n. 1.7.4-186-g3a13be1de. prio3 ?. I think you saw OpenMP threads.. I re-checked this problem on CentOS 7 - it actually was OpenMP threads.. 1.7.5-112-gcd4e26d43. 1.7.5-112-gcd4e26d43. 1.7.4-317-gc533975dc. To implement this feature in backward-compatible way the replication client should check remote version first and start sending pings only when server supports them.. Our replication client is implemented in synchronous style using coio functions, so there is no easy way to send pings in background. This ticket is complicated (5+ days) and requires significant refactoring.. > I actually disagree. You don't send pings in the \"to\" channel, you send pings in the \"from\" channel, and then you respond to them in the \"to\" channel. So pings and acks are more or less the same.\n\"from\" channel doesn't know remote client's version, so this approach can't be implemented in backward-compatible way.\n. 1.7.4-444-gf672ce4e0. 1. How do you plan to expose _say() and  vsay() raw API?\nvsay(int level, const char *filename, int line, const char *error,\n     const char *format, va_list ap);\ntypedef void (*sayfunc_t)(int, const char *, int, const char *,\n            const char *, ...);\n/** Internal function used to implement say() macros */\nCFORMAT(printf, 5, 0) extern sayfunc_t _say;\n2.\n\n// Macros for use in conjuction - LOG_DEFINE/LOG_INIT\ndefine LOG_DEFINE(DEFNAME) ... // produces log_##DEFNAME##fatal macros .. and static > log_instance##DEFNAME\ndefine LOG_INIT(DEFNAME, NAME) ... // fills log_instance_##DEFNAME with log_find. Need to be checked for zero\n\nI think LOG_DEFINE() should define log_warn()/log_info()/log_error()/etc. instead of log_instance_##NAME. We will add LOG_DEFINE(default) somewhere in box.h in order to replace legacy say_XXX macroses.\n3.\n\ndefine say_fatal(...) log_fatal(log_default, ...)\ndefine say_syserror(...) log_syserror(log_default, ...)\ndefine say_error(...) log_error(log_default, ...)\ndefine say_crit(...) log_crit(log_default, ...)\ndefine say_warn(...) log_warn(log_default, ...)\ndefine say_info(...) log_info(log_default, ...)\ndefine say_verbose(...) log_verbose(log_default, ...)\ndefine say_debug(...) log_debug(log_default, ...)\n\nI think that say_xxx() should be replaced in our code by log_xxx() by a follow up patch. module.h will contain backward-compatible definitions until the next major release.\n\n\n\nOutput is modified (negotiable). Was:\n\n\n\nLet's do it later.\n5.\n\nstruct log log_iter(void pos); // make iteration step over all available logger, NULL on end\n\n=>  struct log * log_iter(struct log *prev)\n\nint log_get_level(struct log *log); // get output level for logger\n\n=> log_level(). f1862699a5802afe14ba53dd91a7cfabdbcc2e01. Fixed by 1.7.4-148-ge126d26cc. Done:\n```\nAvailable Packages\ntarantool.x86_64                        1.7.5.31-1.el7.centos                                    tarantool-enterprise_1_7\ntarantool.x86_64                        1.7.5.39-1.el7.centos                                    tarantool-enterprise_1_7\ntarantool.x86_64                        1.7.5.43-1.el7.centos                                    tarantool-enterprise_1_7\ntarantool.x86_64                        1.7.5.46-1.el7.centos                                    tarantool-enterprise_1_7\ntarantool.x86_64                        1.7.5.47-1.el7.centos                                    tarantool-enterprise_1_7\ntarantool.x86_64                        1.7.5.48-1.el7.centos                                    tarantool-enterprise_1_7\ntarantool.x86_64                        1.7.5.49-1.el7.centos                                    tarantool-enterprise_1_7\ntarantool.x86_64                        1.7.5.50-1.el7.centos                                    tarantool-enterprise_1_7\ntarantool.x86_64                        1.7.5.51-1.el7.centos                                    tarantool-enterprise_1_7\ntarantool.x86_64                        1.7.5.52-1.el7.centos                                    tarantool-enterprise_1_7\ntarantool.x86_64                        1.7.5.55-1.enterprise.el7.centos                         tarantool-enterprise_1_7\n[root@tt-dev r.tsisyk]# \n[root@tt-dev r.tsisyk]# yum --disablerepo='*' --enablerepo='tarantool-enterprise_1_7' install tarantool\nLoaded plugins: fastestmirror, priorities\nLoading mirror speeds from cached hostfile\nResolving Dependencies\n--> Running transaction check\n---> Package tarantool.x86_64 0:1.7.5.47-1.el7.centos will be updated\n---> Package tarantool.x86_64 0:1.7.5.55-1.enterprise.el7.centos will be an update\n--> Finished Dependency Resolution\nDependencies Resolved\n=========================================================================================================================\n Package            Arch            Version                                      Repository                         Size\n=========================================================================================================================\nUpdating:\n tarantool          x86_64          1.7.5.55-1.enterprise.el7.centos             tarantool-enterprise_1_7          4.2 M\nTransaction Summary\nUpgrade  1 Package\nTotal download size: 4.2 M\n[root@tt-dev r.tsisyk]# tarantool\nTarantool Enterprise 1.7.5-55-g8ce2041\ntype 'help' for interactive help\ntarantool> [root@tt-dev r.tsisyk]# tarantool --version\nTarantool Enterprise 1.7.5-55-g8ce2041\nTarget: Linux-x86_64-RelWithDebInfo\n```\n\nI plan to move repositories to Mail.Ru S3 later. It would be also nice to log \"too slow storage procedure \"%s\": %d\" message. Implementation is pretty simple and doesn't add any overhead (just compare ev_now() before calling box_process_call() and after that).. 1.7.4-323-gde11d68a4. Have you tried  \"systemctl enable tarantool@INSTANCE\"?. I symlinked tarantool.service into debian/ directory and now it works for me:\n\n```\ndpkg -i *.deb                                                                                               \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nSelecting previously unselected package tarantool.                                                                                           \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\n(Reading database ... 294626 files and directories currently installed.)                                                                     \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nPreparing to unpack tarantool_1.7.4.47.g06ee320-1_amd64.deb ...                                                                              \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nUnpacking tarantool (1.7.4.47.g06ee320-1) ...                                                                                                \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nSelecting previously unselected package tarantool-common.                                                                                    \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nPreparing to unpack tarantool-common_1.7.4.47.g06ee320-1_all.deb ...                                                                         \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nUnpacking tarantool-common (1.7.4.47.g06ee320-1) ...                                                                                         \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nSelecting previously unselected package tarantool-dev.                                                                                       \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nPreparing to unpack tarantool-dev_1.7.4.47.g06ee320-1_amd64.deb ...                                                                          \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nUnpacking tarantool-dev (1.7.4.47.g06ee320-1) ...                                                                                            \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nSetting up tarantool-common (1.7.4.47.g06ee320-1) ...                                                                                        \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nCreated symlink /etc/systemd/system/multi-user.target.wants/tarantool.service \u2192 /lib/systemd/system/tarantool.service.                       \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\n^^^^^ HERE\nSetting up tarantool (1.7.4.47.g06ee320-1) ...                                                                                               \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nSetting up tarantool-dev (1.7.4.47.g06ee320-1) ...                                                                                           \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nProcessing triggers for man-db (2.7.6.1-2) ...                                                                                               \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\nProcessing triggers for systemd (232-25) ... \n```\nSorry for the late answer.\n1.7.4-275-gd4ac637f9. @moknomo ^^^. 73a39ad338cc076858d6666f9297fc0073f73b13. One more nice test case:\n```\ntarantool> box.space._space:truncate()\n\n...\ntarantool> box.snapshot()\n2017-06-16 19:40:38.122 [2137] snapshot/101/main I> saving snapshot `./00000000000000000001.snap.inprogress'\n2017-06-16 19:40:38.122 [2137] snapshot/101/main I> done\n2017-06-16 19:40:38.127 [2137] main/101/interactive I> vinyl checkpoint done\n\n\nok\n...\n```\n\nRestart server.\n``\n./src/tarantool\nversion 1.7.4-159-g5a59353c6\ntype 'help' for interactive help\ntarantool> box.cfg()\n2017-06-16 19:40:45.030 [2646] main/101/interactive C> version 1.7.4-159-g5a59353c6\n2017-06-16 19:40:45.030 [2646] main/101/interactive C> log level 5\n2017-06-16 19:40:45.030 [2646] main/101/interactive I> mapping 268435456 bytes for tuple arena...\n2017-06-16 19:40:45.038 [2646] main/101/interactive I> recovery start\n2017-06-16 19:40:45.038 [2646] main/101/interactive I> recovering from./00000000000000000001.snap'\n2017-06-16 19:40:45.038 [2646] main/101/interactive I> recover from ./00000000000000000000.xlog'\n2017-06-16 19:40:45.038 [2646] main/101/interactive I> done./00000000000000000000.xlog'\n2017-06-16 19:40:45.038 [2646] main/101/interactive box.cc:1683 E> ER_UNKNOWN_REPLICA: Replica 9a607611-2f42-497e-be92-cdbc4dd40568 is not registered with replica set 00000000-0000-0000-0000-000000000000\n2017-06-16 19:40:45.038 [2646] main/101/interactive F> can't initialize storage: Replica 9a607611-2f42-497e-be92-cdbc4dd40568 is not registered with replica set 00000000-0000-0000-0000-000000000000\n``. 3e1b734ba78abed5c50ffcf41993dc43c384f147. 1f0b74e440bc6649d20768f3e272115c607f1f0f. 50a4a87a63cc9db9a162db8993548f3a473f6157. Please don't override built-in librarytable, otherwise console can't calltable.insert`.\n. Yes, it should, but it doesn't:\nstatic void\ntxn_on_yield_or_stop(struct trigger * /* trigger */, void * /* event */)\n{\n    txn_rollback(); /* doesn't throw */\n}. This bug can be test via box-tap suite. I fixed this bug, but failed to make a non-flaky test case:\n```\ntest:test(\"bugs\", function(test)\n    test:plan(1)\n--\n-- gh-2530: POST with empty body cause libcurl to read data from stdin\n--\nlocal function gh2530_handler(client, peer)\n    print('111')\n    print(client:read(1))\n    print('xx')\nend\nlocal s, addr = socketlib.tcp_server('127.0.0.1', 0,\n    { handler = gh2530_handler})\nlocal host, port = s:name().host, s:name().port\nlocal r = client.post(string.format(\"http://%s:%s/\", host, port), nil,\n                    { timeout = 0.02 })\ns:close()\ntest:is(r.status, 408, \"gh-2530 post with empty body\")\n\nend)\n```. 12bab610af0cbca08b975b44317c4a21dcf5e039. 1.7.4-180-g6cfefcd42. Duplicate of #2190. 1.7.4-280-g6833e7004. Confirmed\nProbably we should add an option to tarantoolctl to avoid daemonization, e.g. tarantoolctl start example --foreground. Actually I plan to remove /usr/bin/tarantoolctl wrapper for systemd case, but it is complicated task.. I realized that --foreground will break tarantoolctl start INSTANCE -> systemctl  start tarantool@INSTANCE redirect. Any better ideas how to detect systemd? Nothing from 1 is portable between all distros...\n. 1.7.4-319-g90a16b0e3. 1.7.4-193-g8681d0a60. 1.7.4-320-gfa056ad60. This is a systemd limitation, let's update documentation for this case.\nhttps://github.com/tarantool/doc/issues/276. Fixed by #2684. This test passes on my host and all Travis builds. Please provide additional details how to reproduce this problem.\n. 1456af17cb32e8f7af2c091532849fde2475b6a2. Let's invoke box.cfg() with default options on the first access to box.XXX instead of raising an error().\n . \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u043a\u0440\u0430\u0439\u043d\u0435 \u0437\u0430\u043d\u044f\u0442\u043d\u044b\u0439 pull request :)\n\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043c\u044b \u043d\u0435 \u0433\u043e\u0442\u043e\u0432\u044b \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0442.\u043a. cmake-3.9 \u043f\u043e\u043a\u0430 \u0435\u0449\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435 \u0432\u044b\u0448\u0435\u043b \u0438 \u043d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043d\u0438 \u0432 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u0430\u0445, \u043d\u0438 \u0432 Docker'\u0435.  \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0434\u043e\u0436\u0434\u0435\u043c\u0441\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u043b\u0438\u0437\u0430 cmake 3.9 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u044d\u0442\u043e\u0442 \u043f\u0430\u0442\u0447 \u0435\u0449\u0435 \u0440\u0430\u0437? \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0447\u0442\u043e \u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 cmake-3.9 \u0441\u0442\u0430\u043d\u0443\u0442 \u043d\u0435 \u043d\u0443\u0436\u043d\u044b \u0442\u0430\u043d\u0446\u044b \u0441 \u0431\u0443\u0431\u043d\u043e\u043c \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 gcc-ar/gcc-runlib/gcc-nm \u0438 \u0432\u0441\u0451 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u0430\u043a-\u0442\u043e \u0438\u043d\u0430\u0447\u0435. \u041a\u0440\u0430\u0439\u043d\u0435 \u0443\u0434\u0438\u0432\u043b\u0435\u043d, \u0447\u0442\u043e CMake \u0434\u043e \u0441\u0438\u0445 \u043f\u043e\u0440 \u043d\u0435  \u0443\u043c\u0435\u0435\u0442 lto \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438.. The primary challenge here is to find a good name for the proposed hex-to-bin function. Please research how this method was called in other languages/frameworks and paste results here. We need to be very careful with addition of custom extensions to Lua standard string library.\n. Tarantool intentionally doesn't provide special API for bulk operations. You can a) Send a batch of requests using network protocol, like HTTP pipelining b) Use Lua or C stored procedure.\n. This problem is caused by usage of slab_map() by lsregion_alloc(). slab_map() allocates slabs of size arena->slab_size (4mb by default), therefore lsregion can't allocate chunks larger than slab_size bytes. \nPossible solutions:\n\nUse malloc() for huge chunks in lsregion, like in slab_cache. Caveats: it will duplicate slab_get() logic from slab_cache().\nSwitch to slab_cache() in lsregion, like it was done in the first version of lsregion.\nCreate a separate arena for vinyl with configurable slab_size. Caveats:  huge slab_size is ineffective.\n\n. Blocked by #2588 (can't write a test case). >  So I still think that solution (3) is the best one.\nAccepted, let's go with a separate arena for Vinyl tuples.. we don't have enough  resources to implement this feature in the next couple months. Please send a pull request.\n . OK, we need to find a way to reproduce this problem.. Reproduces even after fixing #2589.. b9bdcd31905ae383d6e3ee0f42298ff7d4638c71. Hi, we plan to implement synchronous replication using raft consensus algorithm in Tarantool 1.8+.. 1.7.4-298-g5a8243d53. I pushed this fix via 1.6, because it affects module API users.\n1.6.9-84-g14b413c27\n1.7.4-298-g5a8243d53\n. free ?. Review comments from @kostja:  find a way to overload all malloc()/realloc()/free() calls with rtmalloc()/rtrealloc()/rtfree() in third_party libraries too, e.g. by using some LD hacks.\n. Moving to 1.7.6 together with #934 . Unfortunately, this idea doesn't work.  We tried two different approaches to do that and both of them have failed:\na) Override malloc()/free() globally by defining malloc()/free()/realloc()/calloc() symbols somewhere inside Tarantool binary. This is technically possible, because malloc()/free()/realloc()/calloc() are declared as week symbols in libc and LD will prefer our symbols instead of system's.  Problem: malloc() is used by internal allocations by libc which can happen before main() and before initialization of memory/quota/fiber subsystem. Checking for this case on every malloc/free can be expensive.\nb) Override malloc()/free()/realloc()/calloc() symbols using --Wl,-wrap,SYMBOL DL feature works. In this case libc continue to use original malloc of internal purposes, but all sources files in src and third/party use our wrapper. This approach has failed because there are a lot of functions in libc(), like strdup(), which allocates memory using libc's malloc and then this memory are freed by our wrapped free(), which causes negative quota. Patch attached. We can backport the fix from luarocks 3.0:  https://github.com/luarocks/luarocks/commit/e620a7e022c019ece6419446e6220d424aff9b42. 1.7.4-435-g0905310e1. 1.7.4-301-gef7a350a9. This problem has been partially fixed. However, setting count = 10000000 in the example above still crashes Vinyl :(\n. 1.7.4-372-gec8d56c58. 1.7.4-435-g0905310e1. ```C\nstruct box_function_ctx {\n    / Use either port or obuf fields. /\n    struct obuf out;\n    struct obuf_svp svp;\n    bool is_out_dirty;\n    struct port port;\n    uint64_t sync;\n    /\n     * Finalize can\n     * 1. Dump obuf to lua.\n     * 2. Write iproto_header into obuf.\n     * The concrete function depends on is_raw_mem_enabled\n     * and caller context.\n     /\n    int (dump)(void , size_t size);\n    void *dump;\n};\n/* Existing public C API definition - no changes /\ntypedef struct box_function_ctx box_function_ctx_t;\n/\n * Free input buffer and invalidate input arguments\n * Needed for gh-946\n /\nvoid\nbox_invalidate_request(struct box_function_ctx *ctx);\n/\n * Reserve memory for raw MessagePack output\n /\nchar \nbox_reserve_response(struct box_function_ctx *ctx, size_t size);\n/\n * Advance buffer position for written memory.\n /\nchar \nbox_alloc_response(struct box_function_ctx *ctx, size_t size);\n/\n * Finalize response and send it to network.\n * @param count number of MessagePack object written\n /\nint\nbox_finalize_response(struct box_function_ctx ctx, uint32_t count);\n/ Bad end of the function - port_destroy or obuf_rollback_to_svp. /\nvoid\nbox_discard_response(struct box_function_ctx ctx, size_t size);\n/\n * Existing public C API function - no changes.\n /\nAPI_EXPORT int\nbox_add_tuple(struct box_function_ctx *ctx);\n/ Existing public C API definition - no changes /\ntypedef int (box_function_f)(box_function_ctx_t ctx,\n             const char args, const char *args_end);\n/\n * New methods. User can use either port via box_return_tuple or\n * he can write directly into obuf via the following methods.\n * Example:\n /\nAPI_EXPORT int\npublic_C_function(struct box_function_ctx ctx, const char args,\n          const char args_end)\n{\n    / Handle input arguments /\n    handle_args(args, args_end);\n    / Discard input arguments /\n    box_invalidate_request(ctx);\nif TUPLES\nif (box_add_tuple(ctx, tuple1) != 0 ||\n   box_add_tuple(ctx, tuple2) != 0)\n     return 1;\n   return 0;\n\nelse\nchar *buf = box_reserve_response(ctx);\nchar *wpos = buf;\nchar *wpos = mp_encode_string(wpos, \"Hello\");\nchar *wpos = mp_encode_string(wpos, \"World\");\nbox_alloc_response(ctx, wpos - buf);\nreturn box_finalize_response(ctx, 2);\n\nendif\n}\nvoid\n- box_process_call(struct request request, struct obuf out);\n+ box_process_call(struct request request, box_function_ctx ctx);\nvoid\n- box_process_eval(struct request request, struct obuf out);\n+ box_process_eval(struct request request, struct box_function_ctx ctx);\nint\n- func_call(struct func func, struct request request, struct obuf out);\n+ func_call(struct func func, struct request request,\n        struct box_function_ctx ctx);\n/ call.h /\nint\n- box_lua_call(struct request request, struct obuf out);\n+ box_lua_call(struct request request, struct box_function_ctx ctx);\nint\n- box_lua_eval(struct request request, struct obuf out);\n+ box_lua_eval(struct request request, struct box_function_ctx ctx);\n``. We extractedstruct call_requestandstruct auth_requestfromstruct request, so these structures can be used instead ofbox_function_ctx`.\n. Please move to 1.7.8 . c504c89f3f97b55bb1f1b79ac36b18bcfd36d44c. We discussed this issue with @GeorgyKirichenko  and @kostja and decided that it is not critical and can be moved to wishlist. Please upvote if this problem affects you.. 1.7.4-435-g0905310e1. 1.7.4-353-g9e63e3ef4. Fixed. Please paste your sw_vers and system_profiler SPSoftwareDataType output.. OK, let's add fun.wrap() to this iterator.. There are no customer for this feature => wishlist. s/iproto/binary/g\ns/background/lua/g. This ticket is going to 1.7.6, because we want to implement 'collate' index option in 1.7.x, according to roadmap.. COLLATION is not just about case-insensitiveness, it is about the full set of comparison rules, e.g. language-specific compassion rules (a.k.a locale), case-sensitiveness (a.k.a \"string strength\") and other. \nCase-sensitiveness can be implemented via functional index (like Postgres) or by a separate option(like Mongo).\n. 1.7.5-157-ge260c2e33. This ticket is going to 1.7.6, because we want to implement 'collate' index option in 1.7.x, according to roadmap.. 1.7.5-157-ge260c2e33. We can add 'locale' index option without using tuple_format. This ticket is not blocked by #2647. Moving to 1.7.6, because we need local-aware indexes in 1.7.x for a customer.. This ticket is about locale comparison rules (e.g. ru_RU), #2648 is about case-sensitiveness.\n. 1.7.5-157-ge260c2e33. Column definitions have been implemented. NULLS && DEFAULT, COLLATIONS and ARRAY SIZE are parts of other features.. Confirmed, easy to fix.. A fix on the branch gh-2658-http-cookie. @IlyaMarkovMipt could you please add a test case using our gevent server?\n. http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n\nMultiple message-header fields with the same field-name MAY be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list [i.e., #(values)]. It MUST be possible to combine the multiple header fields into one \"field-name: field-value\" pair, without changing the semantics of the message, by appending each subsequent field-value to the first, each separated by a comma. The order in which header fields with the same field-name are received is therefore significant to the interpretation of the combined field value, and thus a proxy MUST NOT change the order of these field values when a message is forwarded.\n\n1.7.5-146-g375c16156\n. client.cookies[] parser moved to https://github.com/tarantool/tarantool/issues/2801. 70898fdd7f4880ebf5cb15de15b15d110508d198. 1.7.4-397-gb0fe277c2. 1.7.4-434-gac39d4b8f. 1.7.4-414-g70fe72dbf. box.cfg { worker_pool_threads = x }. >  use default /var/lib/tarantool/database_name/ directory if wal_dir not adjusted in configuration\n\nuse default /var/lib/tarantool/database_name/ directory if vinyl_dir not adjusted in configuration\n\nmemtx_dir, wal_dir and vinyl_dir are set to /var/lib/tarantool/${INSTANCENAME} by default. Changing memtx_dir and wal_dir to some custom values works well for me:\n```\nmkdir /tmp/memtxdir /tmp/waldir\nchown tarantool:tarantool  /tmp/memtxdir /tmp/waldir\npatch example.lua:\ngrep _dir /etc/tarantool/instances.enabled/example.lua\nmemtx_dir = \"/tmp/memtxdir\";\n-- vinyl_dir = nil;\nwal_dir = \"/tmp/waldir\";\n\nStart tarantool\nsystemctl start tarantool@example\n```\n\ncreate & init wal_dir & memtx_dir if they not exists but adjusted in configuration\n  create & init vinyl_dir if they not exists but adjusted in configuration\n\ntarantoolctl attempts to create memtx_dir, wal_dir, vinyl_dir on the start, but please remember, that tarantool is started from tarantool:tarantool user and may not have enough permissions.\n\ncustom wal_dir & memtx_dir in default example.lua =>\n[26552] main/101/example F> can't initialize storage: error reading directory '/var/lib/tarantool/snaps/example'\n\nThis problem is caused by missing '/var/lib/tarantool/snaps/example.\n\nafter creating wal_dir & memtx_dir tarantool also can not start with =>\nmain/101/facelessq F> failed to create vinyl environment\n\nThis problem is caused by missing or unwritable vinyl_dir.\nPlease ensure that directories exist and owned by tarantool:tarantool user.\n=> Nothing should be done for this ticket.. 1.7.5-102-ge8e7ed18e. 1.7.4-469-gd0e333191. memtx done - 1.7.4-429-g1a85df725\nvinyl in progress.\n. OK, confirmed.. 1.7.5-19-gbb358cbb3. 1.7.4-400-g3973ba45b. 1.7.4-437-gca361e204. 1.7.4-453-geb5cd536d. 1.7.4-417-g362559ef3. Duplicate of #2684. Segfault at exit is fixed by #2686 \n\"Commit order\" problem is move to #2682  which has a reproducible test case.\n. Confirmed. Segfault at exit is caused by #2686 . 1.7.4-458-g05eef5fa0. Duplicate of #2684 . > %i passes the argument, specially formatted (escaped)\n\n%I passes the argument verbatim without escaping\n. 1.7.4-433-g10e54768c. Coredump - https://cloud.mail.ru/public/KGBr/TmAFkU2Az\n\n. 1.7.4-422-gfa7597189. .peer. 1.7.6-64-g439102855. ```\ntarantool> box.info.replication\n\n\n1:\n    id: 1\n    uuid: cfcb8006-781b-4e2b-bbfb-c95594f15553\n    lsn: 91208\n    upstream:\n      status: follow\n      idle: 2.0781464660249\n      peer: 127.0.0.1:3313\n      lag: 0\n  2:\n    id: 2\n    uuid: 21dbba9d-39cd-484c-b49a-b647710992df\n    lsn: 0\n...\n```. Blocked by #389. 6c838dff83f21a5c7327715cf9f74e7087917c28. 1.7.5-80-gc1b2e89b2. 1.7.4-455-g8b26400a8. 1.7.5-255-gc383806d1. I propose net.box-style API:\n\nsmtp = require('smtp').connect(host, port, { user = 'xx', password = 'xx', tls = true })\n-- smtp client automatically re-establish connection\n-- on the first iteration - re-connect on every sendmail()\nmsg_id, err = conn.sendmail(from, to, body)\nif msg_id == nil then\n   print('failed to send email')\nelse\n   print('msg_id', msg_id)\nend\nconn:close()\nhttps://curl.haxx.se/libcurl/c/smtp-ssl.html. => https://github.com/tarantool/smtp. 1.7.5-43-g753493581. Please move to 1.8.x. Hi, C API is optimized for performance. We don't validate MessagePack in Release builds. Please use Debug build of Tarantool of debugging C procedures.\nThanks!. 1.7.5-19-gbb358cbb3. @bigbes can patch brewspec.. Any progress?. 1.7.5-281-g0a0731f4d. 1.7.6-6-ge4bcc2ba9. 1.7.5-29-gbb6170e4b. Blocked by #2727. Already done. . Actually def->sql was freed by space_def_delete(). I refactored the code to make it more clear.\n. ev_timer uses ev_now() (event loop time) instead of ev_time() (realtime clock), therefore fiber_yield_timeout() and all other functions calculate timeouts incorrectly.\n. What should be done in this ticket?. Shall we add some Lua module to working with date/time to tarantool-contrib?. @Totktonada could you please research luarocks.org for date/time module and post results here?. 1.7.5-30-g960aad6a0. Hi, please paste your tarantool version. \nThanks!\n. I've seen this problem couple times, but I still can't reproduct it. Please move to 1.7.x.. This feature has already been implemented during 1.7.6 development, but I decided to push it into 1.7.7 instead of 1.7.6.\nd7135403a8341e865b80519f13587ed32a73a359. 1.7.5-79-g50aeb77ea. fio  => https://github.com/tarantool/tarantool/issues/2960\nNo-exceptions  API has been discarded because it is a breaking change.\nibuf support for msgpack has been pushed.\n. Both problems have been fixed during 1.7.6 development, but I decided to push it into upcoming 1.7.7 instead of 1.7.6.. Rebased and pushed as 1.7.5-98-g563fcafcf. no brainer\n1.7.5-100-g873632f24\n. Let's add this library to our rocks.\n. Alternative: https://github.com/igormunkin/lua-re\n. Hi, there is already an isarray() implementation on-board used internally by msgpack/json/yaml. Shall we export it as table.isarray()?. luaL_serialize in utils.c. @Totktonada yeah, __serialize support is important. Let's export  lua_field_inspect_table() via table.isarray() (without underscore).\n. Discussed.\nThere is no way to implement universal is_array() in Lua. I tried different approaches and all of them can fail under certain conditions. The final solution was to add  encode_sparse_ratio and encode_sparse_safe serializing options (msgpack/json/yaml) and copy-cat sparse array detection logic from cjson. I don't think that we want this logic in built-in table module. However, I keep this feature request open until new array module is implemented or imported.\nSee also https://github.com/tarantool/tarantool/issues/1167#issuecomment-174489558. Duplicate of #2724. 1. Remove ${pwd}/.rocks from package.path/package.cpath\n2. Add a new package.loader() which will recursively search in the higher directories, like npm:\n\nIf the node_modules directory doesn't exist in your current directory, NPM will look for it in the higher directories until it finds it. So, if the parent directory has a node_modules directory, NPM will assume that's where it is to install modules.\n . 1.7.5-136-gc182cf3e8. 1.7.5-175-gb25c60f01. 702bcac2c9635005177f6a6db2e8994e55f8c17a\n1.7.5-86-g702bcac2c\n. Space identifiers < 512 are reserved for system spaces. Please don't use them for your spaces.. @Totktonada @racktear gh-2772-curl-homebrew should solve your problem, please check.\n. 1.7.5-99-g947b378dd. Confirmed.. 1.7.5-195-gcaacfef17. 1.7.5-92-g4d2b53afa. \u0430) Remove \\n delimiter \u0431) Replace + by - and / by  _.. 1.7.5-112-gcd4e26d43. 0854397f6f5ea26f62ed3e2c163f27bd07398c79. ccd451eb9652b27821dba0ff74e6443c296ae246. This buffer is thread-local, so configuration via box.cfg() is technically complicated. I can increase the default limit to 8192 for logger=. logger= will still be capped by 4096 bytes per message due to system limitations (PIPE_MAX).. I increased the buffer size to 16k, but messages now can interleave in some situation:\nFrom pipe(7):\n   POSIX.1 says that write(2)s of less than PIPE_BUF bytes must be atomic:\n  the output data is written to the pipe as a contiguous sequence. Writes\n  of more than PIPE_BUF bytes may be nonatomic: the kernel may interleave\n  the data with data written by other processes. PIPE_BUF is 4k on Linux.\nNevertheless, let's ignore the fact that messages can be interleaved in\n  some situations and set SAY_BUF_LEN_MAX to 16k for now.\n\nThe proper fix for interleaving is https://github.com/tarantool/tarantool/issues/2794, but that ticket is complicated and we don't have time for it right now.\n. @Totktonada did you try to start tarantoolctl from tarantool user?  . 1.7.5-139-g9297ec36d. box.schema.space.create('test2') inside box.begin()-box.commit() block raises and exception, so c:put(true) in fiber2 never happen and c:get() blocks on the second call.. 1.7.5-256-g6007e6dc9. https://github.com/tarantool/tarantool/issues/2795. ok, I think we can incorporate slog into built-in logger.. 1.7.5-183-g437e82ed6. Need feedback from @racktear, @kostja, @GeorgyKirichenko . AFTER SYNC can also be implemented without WAL changes using cascade rollback + WAL truncate, but I don't like this approach.\n. > a way to control sync timeout\nThere is box.cfg { replication_time =  } option.\n\na way to differentiate when insert/update/delete operations fail due to timeout or terminated connection to the slave\n\nAFAIK, master already sets different messages in box.info.replication[x].message for \"connection reset by peer\"  and  timeouts cases. I planned to add .error: object instead of .message: string to allow matching by error code (error.type == \"ClientError\" or error.type == \"Timeout\") instead of by error messages.\n\na way to make transactions arrive to slaves in one batch, to prevent the case of partial updates\n\nDefinitely makes sense. It is a serious gotcha in 1.6+ replication protocol which also blocks parallel applier. I filed a separate ticket for this issue. https://github.com/tarantool/tarantool/issues/2798\n. 1.7.5-140-g6c2097479. 2017-12-06 blocked by @kostja for unknown reason.\n. 1.7.5-193-g30ae14611. 1.7.5-153-g1651fc9be. box.schema.index.create() SHOULD use old format if space doesn't have collations or nulls.\n. 1.7.5-194-g2249764c3. We made similar fix on Friday. Pushed as 1.7.5-167-g8806aff1b.\nThanks!\n. Pushed. Thanks!. Duplicate of https://github.com/tarantool/tarantool/issues/2779. Replaced by #2993 . 1.7.5-173-g47c2fe45b. 1.7.5-173-g47c2fe45b. 1.7.5-171-g91b2dd4ce. Breaks Travis CI and 3 platforms, should be fixed ASAP.. 9c434a9f1f1bf65ceed98e0ccbda1b97d6831262. Scheduled to 1.7.6 according to @kostja request. \n. 1.7.5-286-g926a32f02. 1.7.6-4-g2d86127bd. Hi, do you a Lua script which reproduces this crash?\n. Can't reproduce.. Duplicate of https://github.com/tarantool/tarantool/issues/2832. Fixed by 69e94271bcd876e439e7be05af425278265ba238. 1.7.5-267-gf688ef36a. 1.7.5-239-g2427c360f. Duplicate of #2839 . 1.7.5-241-g40a7b0e2c. 1.7.5-275-g64a4b538f. Hi,\nIt is not possible technically in Lua :(\n. Hi, please change http://download.tarantool.org/tarantool/1.7/el/$releasever/$basearch/ to http://download.tarantool.org/tarantool/1.7/el/6/$basearch/ (explicit \"6\" instead of $releasever).. https://github.com/tarantool/doc/issues/327\n. Problem: how to rollback CALL effect in case of error?\n. I think that too_long_thresolhd option is enough for all cases.. af63fcbe3c0511359af20da4f888c1e843209a26. 1.7.5-264-g4d796a8c3. 1.7.5-265-g19ac10c99. Awaiting check from @Totktonada . ok. Pushed to upcoming 1.7.7 (1.7.6-47-g93980aeff). 1.7.6 is almost frozen, moving to 1.7.7. Requires https://github.com/tarantool/tarantool/issues/2897 for testing on the production. 1.7.5-278-gb18dd47f5. 1.7.5-268-g2f53308e9. Fixed in 1.7.6 67e3a34de7f2c3b43859cd647af05a7d4d8ab143. Block Vinyl adoption for Mail.Ru customer.. raw idea: add an option to force engine globally, then disable _space triggers, update space.engine value, save a snapshot.. > This problem will be fixed with #2993\nPlease elaborate. Pushed to upcoming 1.7.7.\n8ff671d4ad5dc452dc7a703900377ac08a6f7c97\nThanks!. ```\n[020] [Instance \"xlog\" killed by signal: 6 (SIGABRT)]\nSegmentation fault\nCurrent time: 1510835747\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed,\nthis may fail as well\n0 0x52a99d in print_backtrace+d\n1 0x40e0ba in _ZL12sig_fatal_cbi+10a\n2 0x7f5db8794390 in __restore_rt+0\n3 0x7f5db7a5cad0 in fileno_unlocked+0\n4 0x7f5dba054de3 in rl_resize_terminal+13\n5 0x40e298 in _ZL18signal_sigwinch_cbP7ev_loopP9ev_signali+18\n6 0x6fffd1 in ev_invoke_pending+c1\n7 0x700696 in ev_run+6a6\n8 0x40d678 in main+998\n9 0x7f5db7a07830 in __libc_start_main+f0\n10 0x40bfb9 in _start+29\n11 (nil) in +29\n```. Blocked by https://github.com/tarantool/tarantool/issues/2967\n. 1.7.6-4-g2d86127bd. 1.7.6-114-g3c61cd03a (1.7-next). Raw Idea 1: use 1.7.7.0+gitsha for pre-release packages and 1.7.1.x for releases and hotfixes.\nSee http://semver.org/. On @kostja review. libyaml doesn't support this feature. We need to fork libyaml to implement it... try to  add is_nullable = true to the third field:\nbox.space.formats:format({{'id', 'unsigned'}, {'name', 'string'}, {'deleted_utc', 'scalar', is_nullable=true}, {'is_private', 'boolean'}}\n. yeah, we forgot to push a fix.. Hi, -DLUAJIT_ENABLE_LUA52COMPAT is arguble, because it doesn't implement Lua 5.2 fully. We discussed this option long time ago and decided to stay away. Why do you need it?. I agree that message shoudn't be dropped.. fio.path.exists()\n. Status?. Copy-cat Python's os.path:\n\nos.path.exists()\nos.path.lexists()\nos.path.isfile()\nos.path.islink()\nos.path.isdir()\nos.path.ismount()\n. 44b4d7ec13716133b38c103fb52db0f98ddae726. any news?. Via 1.7.6. @bigbes Please ping me when it will be ready. This problem can only be fixed be re-bootstrapping a replica. See  https://github.com/tarantool/tarantool/issues/2908\n. There is no way to implement such behavior.. I can't fix this bug. Tarantool operates only with functions and I can't add an option to reload entire module because there are no such entity \"module\" in our data dictionary.. We have this bug for more than 3 years. It can't be critical.. One more customer with similar problem:\n\n017-12-06 21:00:18.982 [16882] main/106/applier/repl@10.10.34.10:3303 box.cc:294 E> error applying row: {type: 'DELETE', lsn: 127, space_id: 280, index_id: 0, key: [538]}\n2017-12-06 21:00:18.982 [16882] main/106/applier/repl@10.10.34.10:3303 alter.cc:1391 E> ER_DROP_SPACE: Can't drop space 'TEST': the space has indexes\n2017-12-06 21:00:18.982 [16882] wal/101/main F> LSN for 1 is used twice or COMMIT order is broken: confirmed: 126, new: 125\n2017-12-06 21:00:18.982 [16882] wal/101/main F> LSN for 1 is used twice or COMMIT order is broken: confirmed: 126, new: 125\n2017-12-06 21:00:18.982 [16882] wal/101/main F> LSN for 1 is used twice or COMMIT order is broken: confirmed: 126, new: 125\n2017-12-06 21:00:18.982 [16882] wal/101/main F> LSN for 1 is used twice or COMMIT order is broken: confirmed: 126, new: 125. He means use 9223372036854775807LL instead of 9223372036854775807. OK, thanks for the fast response! I invited to this meeting too.. Discussed with @kostja => wait 50%+1 of remote appliers.\n. Added replication_quorum option to box.cfg():\n\nbox.cfg { replication = {xx, yy, zz}, replication_quorum = 0 } - don't wait replicas (old 1.6 behaviour)\nbox.cfg {  replication = {xx, yy, zz, replication_quorum = 100500} - wait all replicas (new 1.7 behaviour)\nbox.cfg {  replication = {xx, yy, zz, replication_quorum = N} - wait N replicas (custom logic)\n\nProposed logic with replication_lag + read_only on box.cfg() doesn't solve the problem that replica can fall behind master AFTER box.cfg(). The comprehensive solution is needed to forbid read/write queries on stale replicas. Currently this logic can be implemented using Lua without patching server.\nbox.cfg { replication_quorum - X } - 1.7.6-140-gf1167c429 (1.7-next)\n. Completely unusable. I have to add a background fiber to recreate net.box instances.\n. a0fcaa8801f8a50c5aa1db38fe9360f8945ea11b. 1.7.6-11-gcd17b77f9. There are two uuids: instance uuid and cluster uuid. I actually wanted to override them all.\n. @kostja box.cfg { replicaset_uuid = xxx and instance_uuid = xxx } ?. 1.7.6-62-gf0200c1cd. Duplicate of #2958. Needed as a workaround for conflict resolution in M-M replication.\n. Approved for 1.7.7 by @kostja  2017-12-11.\n. 1. I agree, please don't allow to modify the value of the primary key, correct.\n2. Please make a table with possible result for each trigger type (see CREATE TRIGGER for example) and we will discussed it.\n3. Yes\n4. See 2\n5. Offtopic\n6. It is a showstopper, please try to find a solution for this problem.. v1:\n\n\nRequest\nOLD\nNEW\nreturn\nreturn NULL\nreturn OLD\nreturn NEW\nreturn TUPLE\n\n\nREPLACE\nold tuple\nnew tuple\nreplace NEW\ndelete OLD\nskip\nreplace NEW\nreplace TUPLE\n\n\nINSERT\nNULL\nnew tuple\ninsert NEW\nskip\nskip\nreplace NEW\nreplace TUPLE\n\n\nUPDATE\nold tuple\nnew tuple\nreplace NEW\ndelete OLD\nskip\nreplace NEW\nreplace TUPLE\n\n\nDELETE\nold tuple\nNULL\ndelete OLD\ndelete OLD\nskip\ndelete OLD\nreplace TUPLE\n\n\nv2 (PostgresSQL-like)\n\n\nRequest\nOLD\nNEW\nreturn\nreturn NULL\nreturn NOT NULL\n\n\nREPLACE/INSERT\nold tuple\nnew tuple\nerror\nskip\nreplace(result)\n\n\nUPDATE/UPSERT\nold tuple\nnew tuple\nerror\nskip\nreplace(result)\n\n\nDELETE\nold tuple\nNULL\nerror\nskip\ndelete(OLD), result must be OLD\n\n\nFrom PostgreSQL documentation:\n\nRow-level triggers fired BEFORE can return null to signal the trigger manager to skip the rest of the operation for this row (i.e., subsequent triggers are not fired, and the INSERT/UPDATE/DELETE does not occur for this row). If a nonnull value is returned then the operation proceeds with that row value. Returning a row value different from the original value of NEW alters the row that will be inserted or updated. Thus, if the trigger function wants the triggering action to succeed normally without altering the row value, NEW (or a value equal thereto) has to be returned. To alter the row to be stored, it is possible to replace single values directly in NEW and return the modified NEW, or to build a complete new record/row to return. In the case of a before-trigger on DELETE, the returned value has no direct effect, but it has to be nonnull to allow the trigger action to proceed. Note that NEW is null in DELETE triggers, so returning that is usually not sensible. The usual idiom in DELETE triggers is to return OLD.. Serious problem, should be in 1.7.7. ```\n* Vladimir Davydov vdavydov.dev@gmail.com [17/12/15 17:55]:\nThis patch looks good to me. I think it's OK to push.\n\nPlease wait. Sorry Vlad.\n``. Please move to 1.8.x. 1.7.6-136-gd1c537540. Already done:  https://github.com/tarantool/tarantool/issues/1938\n1.7.3-294-g21252b1. => use [ev_signal_cb](http://search.cpan.org/~mlehmann/EV-4.21/libev/ev.pod#ev_signal_-_signal_me_when_a_signal_gets_signalled!). One liner. 1.7.6-135-gf40ab7f1f. This fix was needed in 1.7.x.. Just bug. Please support both \"http+unix://path-to-file\" and \"http://unix/:/path/to/file\"\n. Use case:cfg.log = '|cronolog data/'..NAME..'.%Y%m%d.main.log.json'whencronologis installed to some directory added to PATH (i.e. cronolog is not available from default PATH=/bin:/sbin:/usr/bin/:usr/sbin used by /bin/sh).. box.cfg { read_only = true } ?. Looks good for me. \nPlease manage to fix compilation and tests on Travis CI:\nhttps://travis-ci.org/tarantool/tarantool/jobs/335095086#L3361\nhttps://travis-ci.org/tarantool/tarantool/jobs/335095098#L3260\nfrom /build/usr/src/debug/tarantool-1.7.7.187/src/httpc.c:32:\n/build/usr/src/debug/tarantool-1.7.7.187/src/httpc.c: In function \u2018httpc_set_unix_socket\u2019:\n/build/usr/src/debug/tarantool-1.7.7.187/src/httpc.c:269:43: error: \u2018CURLOPT_UNIX_SOCKET_PATH\u2019 undeclared (first use in this function)\n  curl_easy_setopt(req->curl_request.easy, CURLOPT_UNIX_SOCKET_PATH, unix_socket);\n                                           ^\n\ncd test && ./test-run.py http_client stucks on my laptop:\n\n```\nWORKR TEST                                            PARAMS          RESULT\nNo output during 10 seconds. List of workers not reporting the status: 1; Will abort after 120 seconds without output.\nNo output during 20 seconds. List of workers not reporting the status: 1; Will abort after 120 seconds without output.\nNo output during 30 seconds. List of workers not reporting the status: 1; Will abort after 120 seconds without output.\nNo output during 40 seconds. List of workers not reporting the status: 1; Will abort after 120 seconds without output.\n```\nI checked that httpd.py has been successfully, but test-run doesn't continue. log files are empty.\n. +1. https://lists.gnu.org/archive/html/info-gnu/2018-08/msg00000.html\n* IDN domain names in getaddrinfo and getnameinfo now use the system libidn2\n  library if installed.  libidn2 version 2.0.5 or later is recommended.  If\n  libidn2 is not available, internationalized domain names are not encoded\n  or decoded even if the AI_IDN or NI_IDN flags are passed to getaddrinfo or\n  getnameinfo.  (getaddrinfo calls with non-ASCII names and AI_IDN will fail\n  with an encoding error.)  Flags which used to change the IDN encoding and\n  decoding behavior (AI_IDN_ALLOW_UNASSIGNED, AI_IDN_USE_STD3_ASCII_RULES,\n  NI_IDN_ALLOW_UNASSIGNED, NI_IDN_USE_STD3_ASCII_RULES) have been\n  deprecated.  They no longer have any effect.. The total size of used memory by tuples should be an attribute of a space. Space is a collection (a relation in terms SQL and relational algebra) of tuples. Indexes don't own tuples. In other worlds, I suggest to make box_space_bsize(uint32_t space_id) method instead.. I think that just size_t bsize is OK.. It is OK that all space->bsize work is encapsulated by tuple_bsize_update(). However, this universal function adds two new branches (old_tuple != NULL and new_tuple != NULL) which are already handled by  MemtxTree::replace().  Please try to inline tuple_bsize_update() to corresponding places of MemtxTree::replace() to avoid extra branches on the performance-critical path.. BTW, as I already said above, tuples are owned by spaces. In this case it would be better to move space->bsize handling to MemtxSpace::executeReplace()/executeDelete()/executeUpdate()/eecuteUpsert().. luaT_error() raises an exception and unwinds C stack, so the code below is not called.\nPlease simplify your test case by using box_set_error() + luaT_error() instead.\n . good catch, thanks.. I asked the same question in Tarantool Dev and @kostja said what whitespaces are better for error messages. As result, I decided to keep whitespaces in iproto_key_strs for error messages and use underscores in Lua.. VY_INDEX_RUN_INFO, VY_INDEX_PAGE_INFO and VY_RUN_PAGE_INDEX xrow types have their own namespaces for xrow->body keys. For example, there is IPROTO_SYNC = 0x01, but at the same time we have VY_PAGE_INFO_OFFSET = 1, VY_RUN_INFO_MIN_LSN = 1 and VY_PAGE_INDEX_INDEX = 1. This change checks that request is DML (e.g REPLACE/INSERT/DELETE/UPSERT) first and only after that tries to use iproto_key_name().\n. We had .vyrun/.vyindex vs .run/.index discussion some time ago and decided to go with .run/.index and use the same meta.filetype as the file extension.\n. OOPS, I'll fix that.. Actually this is not needed, I'll remove it.. Fixed. Fixed. Here is O(n^2) where is the number of parts. This patch optimize nothing, because tuple_field_raw() is called even when key_def is sequential.\n. Why just don't use say_clousure() for say_syserror?. Semicolons are more convenient than commas because they don't require special handling for the last element.. Unrelated. The commit message doesn't match actual changes.. unrelated changes.. I don't think that we need this cache for loggers. Lua is not Java to write a code in the following way:\nLogger.getLogger(MySuperAbstractFactory.class.name).warn(\"Hello\")\n. Let's keep the fast path (log.warn()/log.info()/...) without extra wrapping.\n. Ack. Ack. Ack. Please use ffi.C.memmem() instead. str:sub() allocates a new string and do one extra memcpy().\n. This implementation is extremely inefficient because both gmatch and closure are extremely slow. Can we rewrite it using strstr()/memmem() instead?. Let's discard string.gsplit for now.\n. Can we rename it string.lua instead of ext_string.lua?. ```\ntarantool> string.startswith(\"abcd\")\n\n\nerror: 'builtin/ext_string.lua:182: attempt to get length of local ''head'' (a nil\n    value)'\n...\n```. I suggest to use the same convention for error messages like in builtin string library:\n\n'bad argument #1 to ''string.split'' (string expected, got nil)'. I don't think it makes sense. We especially added one extra MessagePack Array on the first level of CALL/EVAL result to support Lua multireturn:\n```\ntarantool> conn = require('net.box').connect(box.cfg.listen)\n\n...\ntarantool> function echo(...) return ... end\n...\ntarantool> conn:call(\"echo\", {1, 2, 3})\n\n1\n2\n3\ntarantool> conn:eval(\"return echo(...)\", {1, 2, 3})\n\n\n\n1\n2\n3\n...\n```. Unrelated, I'll push this fix directly to 1.7.. An artifact from the previous version.. From systemd documentation:\n\n\nNotifyAccess=\nControls access to the service status notification socket, as accessible via the sd_notify(3) call. Takes one of none (the default), main, exec or all. If none, no daemon status updates are accepted from the service processes, all status update messages are ignored. If main, only service updates sent from the main process of the service are accepted. If exec, only service updates sent from any of the main or control processes originating from one of the Exec*= commands are accepted. If all, all services updates from all members of the service's control group are accepted. This option should be set to open access to the notification socket when using Type=notify or WatchdogSec= (see above). If those options are used but NotifyAccess= is not configured, it will be implicitly set to main.\n\nProbably the default value (\"main\") should work for us, please check.. Non-critical, but currently we use _init()/_free() convention for libraries and subsytems.\n. Missing copyright headers. Missing Doxygen-style comments for functions.. There is a special macro for that in util.h. We try to avoid attribute to simplify porting to new compilers in the future.. I noted that systemd uses special cmsg types for messages with pids. Probably we need to implement systemd_notify and systemd_notify_with_pid() to support this business logic.\n. Please keep key_hash() and tuple_hash() static inline functions to wrap key_def.key_hash() magic.. Please follow the single convention here, e.g. key_def->fun = xxx_create(key_def) or xxx_set(key_def).. Invalid formatting, should be:\nstatic inline char *\ntuple_extract_key_sequential(const struct tuple *tuple, .... It would be nice to add an assertion that key_def is actually sequential here.. tuple_extract_key_sequential() can be re-implemented via tuple_extract_key_sequential_raw(). I wonder why do you use two while() loops here instead of one for(), like in tuple_extract_key_sequential()?. Please keep tuple_extract_key(), tuple_extract_key_raw() and tuple_hash() as static inline wrappers for key_def->xxx().. Please note * position:\ntypedef char *(*tuple_extract_key_t)(const struct tuple *tuple,...\n. Move Doxygen-style comments to typedefs above.. This loop can be integrated into for (; i < key_def->part_count - 1; i++) { above.. ffi.string(NULL, 0) returns an empty string:\n```\ntarantool> s = ffi.string(ffi.cast('void *', 0), 0)\n\n...\ntarantool> type(s)\n\nstring\n...\n\ntarantool> #s\n\n0\n...\n```. \"or p_end\" is an artifact. It didn't work as expected and I had to add the if above:\n\n```\ntarantool> NULL  = ffi.cast('void *', 0)\n\n...\ntarantool> NULL or 48\n\nnull\n...\n\ntarantool> nil or 48\n\n48\n...\n```\n\nI'll remove \"or p_end\", thanks! . ",
    "dgreenru": "nb output\nWAL and Archive\n.----------.---------------.---------------.---------------.\n|   type   |    minimal    |    average    |     maximum   |\n.----------.---------------.---------------.---------------.\n| read/s   |      24100    |      27158    |       28550   |\n| write/s  |      96432    |     108663    |      114227   |\n| req/s    |     120539    |     135830    |      142785   |\n| rtt/ms   |    0.07006    |    0.08365    |    0.132163   |\n'----------.---------------.---------------.---------------'\nNo WAL\n.----------.---------------.---------------.---------------.\n|   type   |    minimal    |    average    |     maximum   |\n.----------.---------------.---------------.---------------.\n| read/s   |      22799    |      31441    |       33659   |\n| write/s  |      91219    |     125798    |      134665   |\n| req/s    |     114028    |     157252    |      168331   |\n| rtt/ms   |    0.05943    |    0.06622    |    0.096169   |\n'----------.---------------.---------------.---------------'\nNo Archive\n.----------.---------------.---------------.---------------.\n|   type   |    minimal    |    average    |     maximum   |\n.----------.---------------.---------------.---------------.\n| read/s   |      30492    |      32000    |       32720   |\n| write/s  |     122005    |     128033    |      130916   |\n| req/s    |     152508    |     160045    |      163647   |\n| rtt/ms   |    0.06119    |    0.07060    |    0.105937   |\n'----------.---------------.---------------.---------------'\n. ",
    "kostja": "Hi, why don't you write a stored proc which returns the stuff you need? \nIn Lua you have box.index library, which is more powerful (and more low-level) than box.select, so we decided to \nnot port the iproto API as is.\nSo, the reason it's not there is that there are better ways to achieve the same result in Lua, but if you feel strongly it should be part of it, a pull request with box.select_many is OK, yes :)\n. Resolution is: use iterators and a lua procedure. \nAlternatively, write your own wrapper around box.process() and send it to us (box.select_multi())\n. Thanks, Stephane, I'll take a look at it.\n. Stephane, hi again.\nThere is no bug in Darwin 10.7.6 and up. Do you think we should still take this patch into the server? Is it still important? Could you please try our homebrew recipe and see how well it works for you?\n. - svaroqui notifications@github.com [13/04/26 15:54]:\n\nSure'll do the homebrew . No need for a patch this was just for my own laptop. \n\nHomebrew is trying to compile it as part of install, so if it breaks, it\nbreaks with homebrew as well.\nWhat laptop is it?\n\nhttp://tarantool.org - an efficient, extensible in-memory data store\n. Aha, so it's a the latest & greatest. Thanks!\nOn Fri, Apr 26, 2013 at 4:07 PM, svaroqui notifications@github.com wrote:\n\n\n\nsvaroqui notifications@github.com [13/04/26 15:54]:\nSure'll do the homebrew . No need for a patch this was just for my own\n  laptop.\n\n\n\nHomebrew is trying to compile it as part of install, so if it breaks, it\nbreaks with homebrew as well.\nWhat laptop is it?\n\nIt's a MacBook pro Core i7\nDarwin new-host-15.home 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23\n16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_6\n\n\nhttp://tarantool.org - an efficient, extensible in-memory data store\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mailru/tarantool/issues/13#issuecomment-17071055\n.\n. Fixed in 1.5.1\n. Judging by the error message (\"Staring instances\", not \"Starting instances\", you've got a rather ancient package.\nThis is perhaps a bug that has been fixed long ago.\n\nWhat's your server version? (tarantool_box --version)\nWhat's the version of your Ubuntu server?\n. Fixed in master, which now uses msgpack.\n. Other two patches are OK..\n. Merged manually.\n. https://bugs.launchpad.net/tarantool/+bug/1031241 is a duplicate\n. It's been a while and we haven't got a chance neither to repeat it nor fix. Closing as not important. Please feel free to reopen if you're using Tarantool on FreeBSD and need a static build.\n. - Pham Cong Dinh notifications@github.com [13/07/29 13:43]:\n\nIn MongoDB there is a feature called capped collections which\nare fixed-size lists that support high-throughput operations\nthat insert, retrieve, and delete values based on insertion\norder.\nIt is really nice feature that can be used in\n\nlogging window that shows last X logs\nmost X recent active users in a time windows (do not to store them all)\nlast X activities\nNewest articles in the front page\n\nIs there any efficient way to do it in Tarantool/Box?\n\nOur basic principle is that we try to teach people to fish,\nrather than giving them a fish :)\nThere are at least a couple of ways to do a capped collection in\nTarantool, depending on your average collection size.\nIf average collection size is small, say 5-10 elements, it's best\nto map a single collection to a single Tarantool tuple. There are\npush and pop operations on tuple, so you can append fields\nat the end of a tuple, and pop them from the beginning or at a\ngiven field index. Multiple tuple operations can be combined and\nare executed atomically in a single UPDATE.\nIf average collection size is bigger than a few dozen elements,\nit's better to map a single collection to a single space, and wrap\nspace change operations into stored procedures. \nTo get an idea how this could be done, please take a look at \nbox.auto_increment() implementation:\nhttps://github.com/tarantool/tarantool/blob/master/src/box/lua/misc.lua#L55\nThe reason it becomes more efficient is that tarantool tuples\nare immutable and are never updated in place, and this takes its\ntoll when average tuple size grows beyond a few kilobytes.\nThere is also a queue module for tarantool, it turns tarantool into\na queue server, it can also be of interest:\nhttps://github.com/tarantool/queue/blob/master/init.lua\n\nhttp://tarantool.org - an efficient, extensible in-memory data store\n. There is a third way to do capped collections in 1.6: space triggers, which can check constraints on each space.\n. Fix in two ways:\na) Do not allow abridged version of setopt\nb) Consider trying to be smarter in case of command line preprocessor failure, perhaps it is something that is actually not for preprocessor, but for the server itself. \n. @bigbes92  +1\n. Duplicate of https://github.com/tarantool/tarantool/issues/1131\n. Hi,\nI've now fixed the driver so that it at least properly packs 64 bit numbers. Unfortunately just by the looks of it there is no way for PHP driver to tell whether an integer should be packed as 32-bit or 64-bit value.\nIn all other drivers (Python, Perl, Ruby) we use a concept called 'Schema' which basically describes how to pack arguments of a command.\nI..e with a schema object your insert would look as follows:\n$schema = array('num64', 'num')\n$tuple = array(123, 5)\n$res = $tnt->insert(0, $tuple, $schema)\n. This is why in 1.6 we're changing tuple format to msgpack.\n. try:\ninsert into t0 values (1L, 5L)\n. Hi,\nsince we are moving to move to msgpack format in 1.6, doing a more intrusive fix is not a priority.\nBut we could perhaps implement a connection option, and take it into account.\nIf the option is not set, the current behavior is preserved. If the option is set, all numbers on this connection are packed as 64 bit.\nA full fix will come out in 1.6.\nShall we do such option for you?\n. This is now re-based to 1.6, which is already using MessagePack.\n. MsgPack is in 1.6\n. The delimiter is mentioned 17 times in the user guide. Since 1.6 doesn't ship a command line client, this becomes a mandatory feature of 1.6 and lack of a delimiter -  a regression from 1.5\n. In 1.6 we can't use SETOPT DELIMITER syntax for delimiter. We'll have to chagne the delimiter by calling a Lua binding.\nSometing like \nbox.session.delimiter('\\n\\n')\n. I pushed the patch, please add a test case. I tried to do it quickly, but failed - python test runner apparently hangs when delimiter is a non-default one.\n. for single-line tests - no, it should work. \nI did the following test:\n    session.delimiter('go')\n    os.exit() go\nThis worked ;)\nfor multiline, you need to do it on both sides, yes\n. I'm tired of waiting for a test case. \n. 4 years and not moving, and no likes. People upgrade using replica/slave fail-over.. Fixed \n. https://github.com/tarantool/tarantool/commit/544a7444a026aa2002f6725a92680e42bb25d043 is pruned since in 1.6 master/master we're going to have rw-access on replica to all spaces.\n. Duplicate of gh-44\n. big/box_httpd.test                              [ fail ]\nTest failed! Result content mismatch:\n--- big/box_httpd.result    Sat Nov  2 02:37:41 2013\n+++ /home/kostja/work/tarantool/test/big/box_httpd.reject   Sat Nov  2 02:40:55 2013\n@@ -499,7 +499,7 @@\n ...\n lua dump(res.headers)\n\n\n- '{\"server\":\"Tarantool\\/1.5.1-164-gb51faa4 box.httpd server\",\"content-type\":\"text\\/plain; charset=utf-8\",\"connection\":\"close\",\"set-cookie\":\"name=value;path=\\/cookie, time=a%20123;path=\\/cookie\",\"content-length\":\"5\"}'\n- '{\"server\":\"Tarantool\\/1.5.1-167-ga9cb8c6 box.httpd server\",\"content-type\":\"text\\/plain; charset=utf-8\",\"connection\":\"close\",\"set-cookie\":\"name=value;path=\\/cookie, time=a%20123;path=\\/cookie\",\"content-length\":\"5\"}'\n  ...\n  lua dump(res.headers['set-cookie'])\n\n\nFatal error: Failed to run test big/box_httpd.test: wrong test output. Execution aborted.\nmake[3]: * [test/CMakeFiles/test] Error 255\nmake[2]: * [test/CMakeFiles/test.dir/all] Error 2\nmake[1]: *** [test/CMakeFiles/test.dir/rule] Error 2\n. This looks like a true plugin, very few dependencies from the server core. Please correct me if I'm wrong. I can't find a single server include the plugin is using except tarantool_plugin.h. Is there any?\nIf it's clean, it can be pushed as soon as the code compiles on all our platforms and tests pass. \n. @rtsisyk or @pmwkaa can review the code, it's ok for 'stable' after the review\n. Dmitry, please add a test case (you could do it in 1.6 branch only, to simplify merge).\n. gh-39 is a duplicate of this\n. Another issue is that snap_io_rate_limit is, although dynamic, not updated with reload_config.\n. Please.\n. Original patch submitted by Yuri Nevinitsin and is tested extensively at ODKL.\n. This patch adds extra 4 bytes per tuple to store snapshot version. But since it reduces the overall memory overhead, this looks tolerable. The version  can be used for a lot of different things in the future.\n. Roman, why do tests pass in 1.5? What's wrong with tests that they don't verify this? 1.5 needs a test case to reproduce the problem. Then, for now, simply disable salloc_ptr_to_index in 1.5. In 1.6 we will solve this after adding msgpack.\n. I think we need to abandon allocator-based pointer translation, and store a translation hash in the bitset itself. The id in the bitset would be simply the offset in the hash with linear collision resolution.\nMore memory used, but significantly less headache.\nThoughts?\n. Pushed to master\n. Alternative fix: make panic_syserror() throw exception, instead of calling exit()\nAlternative fix (hack/workaround): change 'exit()' to '__exit()' in panic_syserror()\n. Merged, thanks for the patch!\n. unera, please provide a test case or close the bug.\n. The build passes now.\n. Moved to https://github.com/tarantool/test-run/issues/20\n. Added a test case, can't repeat any more.\n. This needs to be covered with a test.\n. The ticket does not specify where this option should be present: in the configuration file or on the command line. \nStill don't quite understand what this option is for, #124 does not need any extra options.\n. Since we plan to implement authentication in 1.6, the sandbox was removed completely for it. In 1.6 it's impossible to call any Lua except the one explicitly white-listed.\nFixed in https://github.com/tarantool/tarantool/commit/1ca1ba69e9884a03239aca12143f6b61b2100be9\n. Duplicate of gh-27\n. Branch merged into the master.\n. \u042d\u0442\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435. inprogress \u0444\u0430\u0439\u043b\u044b - \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0430\u0432\u0430\u0440\u0438\u0438, \u0438 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043f\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044e.\n\u0415\u0441\u043b\u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0443\u0434\u0430\u043b\u044f\u043b\u0438\u0441\u044c \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u043e\u043c, \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u044b\u0432\u0430\u043b\u0438\u0441\u044c, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u0442 \u0441\u043a\u0440\u0438\u043f\u0442, \u0442.\u0435. \u044d\u0442\u043e \u043d\u0435 \u0437\u0430\u0434\u0430\u0447\u0430 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430, \u0440\u0435\u0448\u0430\u0442\u044c \u0437\u0430 \u0432\u0430\u0441 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0430\u0432\u0430\u0440\u0438\u0438.\n. \u0412\u0435\u0440\u043d\u043e, \u043d\u0438\u0447\u0442\u043e \u043d\u0435 \u043c\u0435\u0448\u0430\u0435\u0442 \u043f\u043e\u0434\u043d\u044f\u0442\u044c\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u043e\u043c.\n. This ticket is closed in favour of English request, \nhttps://github.com/tarantool/tarantool/issues/88\n. Dmitry, I suggest we should not spend time on this. If you agree, please close the ticket.\n. Dmitry, please check if this bug is still present when changing the plugins to modules. \nIf yes, close. If no, close with 'To be fixed later'\n. In 1.6 we're not using our own plugin loading system any more.\n. Thank you for the patch. \nI think you should not throw an exception in  build/beginBuild/endBuild but keep panic() in place. These functions are called only during startup and it's appropriate to crash during startup. \nIn the test, once you received an allocation failure error, you should check that select/delete still work OK - this will verify that the data structure is  not left in corrupt state. You may repeat this ordeal a couple of times. Only then you should turn off the error injection, and repeat inserts - this will verify that once the intermittent allocation error is gone, the tree is again functional.\nInstead of using a specialized configuration file in 1.5, I would recommend you creating a separate test case in big/ in 1.5, and in 1.6 you don't have to use a separate config file for this and there is no need to restart the server either.\n. Even in 1.6, beginBuild/endBuild are not used after bootstrap.\n. The last patch is OK, I merged it to 1.6\n. Thank you for the patch. The branch needs to be rebased against 'stable' before it can be merged.\n. This was taken in.\n. +1 @zloidemon \n+1 beeline\n+1 Moscow Transport Department\n. Pushed into 1.6.9\n. This also breaks replication join in presence of a snapshot inprogress, so needs to be escalated.\n. Fixed in 1.6.4-626-g72bf1d6\n. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u041e\u041a \u043d\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u044d\u0442\u043e \u0443 \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u0441\u0438\u0439 OpenVZ \u0442\u0430\u043a \u0432\u0441\u0451 \u043f\u043b\u043e\u0445\u043e \u0438\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0443 \u0441\u0442\u0430\u0440\u044b\u0445. \u0418 \u0435\u0441\u043b\u0438 \u043f\u043e\u0447\u0438\u043d\u0438\u043b\u0438, \u0442\u043e \u0432 \u043a\u0430\u043a\u043e\u0439.\n. \u0414\u0430\u0439\u0442\u0435 \u043f\u043b\u0438\u0437 cat /proc/user_beancounters | grep shmpages\n\u0418 \u043a\u043e\u043d\u0444\u0438\u0433 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430.\n. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u0430\u0440\u044c\u0435\u0440 \u0438 \u043b\u0438\u043c\u0438\u0442  \u0432 1.5 \u0413\u0411 - \u0435\u0441\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442?\n. http://k001.livejournal.com/811864.html?thread=5180504#t5180504\n. \u0412 \u043e\u0431\u0449\u0435\u043c, \u0441\u0443\u0434\u044f \u043f\u043e \u0432\u0441\u0435\u043c\u0443, \u0434\u0435\u043b\u043e \u0432\u0441\u0451-\u0442\u0430\u043a\u0438 \u0432 bean counters. \n. Bug in OpenVZ: \nhttps://bugzilla.openvz.org/show_bug.cgi?id=2805\nWe will need to find a workaround. One way to do it is to detect OpenVZ environment at start (e.g. by trying to open beancounters file), or by providing a command line switch.\nOnce this is done, shared memory should be disabled, along with delayed garbage collection.\n. Merged a workaround into the tree, until the OpenVZ bug is fixed.\n. Pushed, 1.5.1-221\n. The patch breaks box.cfg output in Lua and, even if it fixes it, it is going to break RELOAD CONFIGURATION.\nThere is no single command line option which can be set in the configuration file, and vice versa. \nThis avoids a lot of ambiguity in monitoring and spares people from extra headache, where the current server option\ncame from.\nTo support external scripts, we need to come up with a include() directive for configuration files, or some other solution.\nIn 1.6 we can switch to lua for config, and thus get require('/path/to/config/piece.lua') for free.\nIf that's an OK solution, it can be done.\n. I think this should be fixed in 1.6 and by switching to Lua for configs.\n. In 1.6 we can remove pid_file from the configuration file and to the command line.\n. ## Bootstrap\n- check command line options, handle argc, argv in the following way:\n  if there is no shebang, handle --version --help, and exit\n  if there is shebang, check and open the file. Prepare\n  argc/argv to pass to shebang.\n--verbose option is gone\n  --cfg-check option is gone, since there is no formal \"config\"\n  any more\n  --cfg option is gone too\n- initialize fiber, lua and other runtime and other infrastructure and\n  fire off a fiber that will execute shebang. \nThis introduces a notion of \"core\" modules, which are config-less\n  and always available.\nSo we have always available:\nfiber, socket, ipc modules (the list could be continued).\nThis raiases a quiestion: what namespace do they occupy, where do they\n  reside if they are always available?\n  It's nice to leave 'box' namespace only available for storage,\n  which needs to be started separately.\n- when shebang ends, check if there are events. if there\n  are no events, exit, otherwise continue the event loop.\nWithin shebang provide the following facilities:\n- app server initialization:\n(available without any extra require)\nbox.background(\n    { username = name, \n      workdir = dir,\n      pid_file = pid_file, \n      logger = logger\n      log_level = ...\n      logger_nonblock = true\n      coredump = true/false\n      custom_proc_title = ?\n    }\n  )\nThis function can be called only once.\n  It sets appropriate members of box.info:\n  box.info.pid_file\nbox.info.username\nbox.info.logger\nbox.info.logger_pid\nQQQ: should we rename box.info to something different?\n  QQQ: should the missing options of the app server appear\n  there?\n- box initialization:\nbox.recover(\n    {\n     replication_source = , \n     too_long_threshold = ,\n     memtx = {\n         slab_alloc_arena = ,\n         slab_alloc_minimal= ,\n         slab_alloc_factor = ,\n     }\n     wal =  {\n        mode = snap_dir = ,\n        fsync_delay = \n        rows_per_wal = \n        panic_on_error = \n        rescan_delay = \n        snap_io_rate_limit = \n     }\n     -- note: local_hot_standby is gone, it's always on\n    }\n  )\nOnce box.recover is done, all these options are available in\n  box.cfg, and some of them are settable (via setindex hook).\n  box.recover() can be called only once\n- admin and iproto are protocols, which can be initialized\n  and destoryed any time, in any number of instances.\n  box.recover() sets box_process hook and this is how they check\n  that they can be available.\niproto options are: bind ip addr and port\n  amdin options are: bind ip addr and port\n- to help initialize box/app server there is a helper function\n  box.load_cfg(path). It returns a Lua table back, where path\n  points to a Lua script, defining tables:\ntarantool = {\n      coredump = true\n  }\n  box = {\n      memtx = {\n          slab_alloc_arena = 3\n      }\n  }\nSo a typical shebang script looks like:\nlocal cfg = box.load_cfg(\"my.cfg\")\nbox.background(cfg.tarantool)\nbox.recover(cfg.box)\nbox.iproto.start(cfg.iproto)\nbox.admin.start(cfg.admin)\nThe above lines are available in a function called\nbox.quickstart().\nIt searches for a config file called tarantool.cfg in the current\ndirectory, then /etc, and uses it to initialize tarantool.\n. See also gh-138 - that's where we should move the discussion about the new way to configure the server.\n. Hi,\nto summarize our skype chat:\n- we need to move towards compatibility with Debian start/stop/watch/instance management scripts, ideally - use the same scripts on RPM and DEB based distributions\n- the pull request should be made against stable, not master\n- backward compatibility with existing scripts needs to be preserved\n- the new scripts need to have man pages and enter the distribution, or be reworked\n  as patches to existing scripts.\n. Will be fixed in 1.6.3 by removal of wal_fsync_delay mode altogether, see gh-237\n. Fixed in 1.5.1-225-g633d875\n. Eugene, you forgot to run tests. They break.\n. Dont' fix in 1.5.1, add a test case in 1.6, close the bug\n. Fixed in 1.5.1-187\n. Compare with:\nmysql-client-5.5 - MySQL database client binaries\nmysql-client-core-5.5 - MySQL database core client binaries\nmysql-common - MySQL database common files, e.g. /etc/mysql/my.cnf\nmysql-server - MySQL database server (metapackage depending on the latest version)\nmysql-server-5.5 - MySQL database server binaries and system database setup\nmysql-server-core-5.5 - MySQL database server binaries\n. https://github.com/tarantool/tarantool/commit/eb05ff8acc48806d01406bc740b32c6947c22a3d\n. On the same token, remove libmr-tarantool-perl\n. Fixed in 1.5.1-200-g71d5dd2\n. esha, please create a virtual machine with the latest ubuntu (13) which has gcc 4.8, and repeat the problem.\n. As long as it doesn't break the linking I don't mind\n. Closing since we changed the specs to not strip the binaries.\n. The new policy is to strip and harden the binaries, we need this again.\n. Branch merged into 1.6\n. in 1.6 print goes to the log, so it's irrelevant\n. Don't do that. \n. http://people.csail.mit.edu/jaffer/Docupage/sharpbang.html\n. We don't need any switches, but can detect automatically when invoked in interpreter mode - the first option\nin this case would be a filename, followed by whatever options are given to the script itself.\nFor example:\n```\ntarantool_box ./file\nargv[0] = tarantool_box\nargv[1] = ./file\nfoo.tbx\n!/usr/bin/tarantool_box -a -b -c\nargv[0] = tarantool_box\nargv[1] = \"-a -b -c\"\nargv[2] = foo.tbx\n.\nkostja@olah ~ % cat foo.c \ninclude \nint main(int argc, char *argv[])\n{\n    int i;\n    for (i = 0; i < argc; i++) {\n        printf(\"%d: %s\\n\", i, argv[i]);\n    }\n}\nkostja@olah ~ % gcc foo.c     \nkostja@olah ~ % ./a.out \n0: ./a.out\nkostja@olah ~ % cat ./foo.out  \n!/home/kostja/a.out\nkostja@olah ~ % ./foo.out \n0: /home/kostja/a.out\n1: ./foo.out\n```\n. Roman, no, admins want to kill fibers quickly, with a short command.\nLike, box.fiber.kill(id)\n. Fixed in 1.5.3-166-g364be3b\n. Pushed into 1.6. Needs a documentation update.\n. Alexander, please post your research results here and close the ticket.\n. http://attractivechaos.awardspace.com/kbtree.h.html\n. http://research.microsoft.com/apps/pubs/default.aspx?id=178758\n. Merged into 1.6.2-31\n. Since we no longer need box.pack() for the protocol, we should restore 1.5 semantics so that it can be used to work with 1.5 server. Assigning back to you, Roman.\n. I agree with ffi approach, the point is to a) make it a separate module b) keep the format specifiers 1.5 compatible.\n. Roman, MP_FLOAT and MP_DOUBLE is not a type but a format. Update needs to support all integer operations correctly with negative integers just as well, otherwise it's a regression from 1.6 and a bug. Support for floating point data type needs to be done in a separate task, it's way more than just UPDATE changes.\n. Pushed.\n. I fixed this with msgpack transition.\n. Fixed\n. Apparently you need to be a slave trying to connect to master to reproduce this\ne.g.\nreplication_source=127.0.0.1:62342\n. Fixed\n. Without a config file, we need a dynamically growing arena. This is not implemented.\nWhat's the provisioning against a DBA mistake, when the server silently starts without a config file, whereas the opposite was intended? This patch will introduce a lot of silent mistakes into DBAs everyday work.\nWhat's the provisioning against starting multiple instances in the same data directory without \"seeing\" each other and corrupting the data directory or behaving in unpredictable ways?\nWhat is the use case this patch is trying to solve? Ease of use? Doesn't help, typically one starts/stops the server with 'service start/service stop', so doesn't operate with configuration file directly. Scripting? For scripting, it's perhaps safer to start with wal_mode = none. \nOverall, before writing a patch, it would be nice to see a spec for this feature describing its use and all the corner cases it introduces.\nA few comments also about the rationale for writing the patch:\n\nThe feature will simplify testing and development process and reduce the barrier to entry for newcomers. It is also needed for #124.\n\nHow exactly? And no, the way this feature is implemented is not needed at all for #124: what we do in interpreter mode can be completely different from what we do in the daemon mode, it can even be a different program.\nThe way to go\nFor #124, we may assume some defaults in the interpreter mode, and require an explicit path to snapshot file in box.snapshot(). We also need a dynamic arena first, otherwise this patch is useless. If we want this patch for the daemon mode, we need an explicit option, something like --skip-defaults, to skip looking for the configuration file. \nBTW: what does Redis have to do with it? Neither MySQL nor Postgres nor any other mature DBMS can start without a configuration file. Why did you choose Redis? Besides, this option is necessary for the app server, not for the database.\n. Yes, we need a new naming scheme for modules, and hide them all behind require().\n. Pushed into 1.5\n. This has been fixed by one of the RPM spec patches in 1.5.3\n. Eugene, this ticket is too vague and lumps together complete & incomplete tasks. Please split\n. Merged the fix.\n. We need to rewrite the test using plain sockets. The test should read data from the server till it gets a EOF.\nThe test should check that there is an EOF.\n. Merged into master\n. Fixed in 1.5.3-170-gcc10d68\n. Eugene, should not we fix the assertion in the server?\n. Fixed in https://github.com/tarantool/tarantool/commit/18b8e4e8b3714abdac9953a52beb6be77248b901\n. Hi, I merged it, I would only like to note that you were writing about the stable branch, but your pull request is against the master.\nIf you would like me to back port this to stable, just let me know.\nThanks!\n. Thanks for the patch! I think there may be other crashes though, we should ban simultaneous DDL or use locks.\n. Decision: document the restriction in 1.5\nRemove functional syntax in 1.6, see gh-309\n. Fixed in a separate patch.\n. This was a raw idea which shaped Tarantool into being a 100% Lua compatible drop-in replacement. \nIt was a great idea, but we did things differently (and I hope, better to the end user) in the end.\nI'm closing this now as \"Done\".\n. Roma, did you try your own example on an existing fiber? It doesn't work.\n. The patch is OK to push into 1.5 (it's scheduled for 1.5.4 milestone).\nYour fix is against 1.6.\n. Won't fix - it's just a master copy of the snapshot which is installed when creating the instance, so it does not matter where it resides. In 1.6 we write the snapshot out automatically.\n. Fixed in 1.5.2-32-g414a99b\n. This is now obsolete, since we don't have a command line client in 1.6 (yet). \n. Michael, I have fixed this they day you came to me. Please check out the latest stable.\n. tarantool-client should *\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c tarantool-client-debug, but not depend on tarantool-client-debug\ntarantool should recommend tarantool-debug and tarantool-client\n. Dmitry, please fix.\n. Fixed in 1.5.2-42\n. Pushed a fix into 1.5.3-165-g67b45d2\n. \u041f\u0440\u0438\u0432\u0435\u0442,\n\u041c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0442\u0435\u0441\u0442\u0430. \u0415\u0441\u043b\u0438 \u0432\u044b \u0432 Mail.Ru \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0432 Jira.\n. \u041f\u0440\u0438\u0432\u0435\u0442,\n\u041c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0442\u0435\u0441\u0442\u0430. \u0415\u0441\u043b\u0438 \u0432\u044b \u0432 Mail.Ru \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0432 Jira.\n. Roma, this bug was reported after we fixed fiber names. We need to check what's going on here - at least on one of our VMs.\n. I agree with Roman that synchronizing master and replica is not the task of the test system. And it's easy to do outside now, with box.net.box. For --# exit, @bigbes92 , will yo udo it? I think os.exit() is a reasonable wokkaround.  I am usually happy with -- out the parts i don't need, since I usually bi-sect the test, not just cut the tail.\n. Closing the ticket for now, @bigbes92 promises to do -- # exit if more than one person asks him to do it.\n. Fixed in 1.5.3-179-g56dc3f7\nNote that the patch is not applicable in 1.6: we use URIs for listen addresses, so the log already contains the URI, but we don't update the title with ports, since ports are now local to modules, and the titles are global.\n. I have removed --check-config from the sources in scope of gh-97 and becoming config-less.\n. There is a tap implementation for Lua already. Basically this proposal is to make a yet another thing available out-of-the-box in Tarantool, i.e. have it pre-installed. This is convenient, but we made a decision to move all Lua modules which do not strictly depend on Tarantool kernel out of its source tree. \nPlease help @bigbes92 improve our module/packaging story and use it for box.tap(). You can also put tap.lua in test/extra or test/lua_libs/, and require('') it manually in each *.lua test you want to use.\n. I'm closing this for now- to use tap with server tests, please open a feature request for test-run.py to have a shared lua_libs dir or simply put tap.lua into suite lua_libs/ dir of the suite you need.\n. There is no tap implementation in Lua - telemachus has deleted his project. Let's add this to Tarantool after all, we can't be dependable on somebody's ill will. Please fix to work with the latest 1.6\n. Pushed\n. Should work in the new implementation.\n. We need a better representation of memory stats, box.index package needs to be removed.\nThis patch can not be accepted, sorry.\n. The shortcuts are nice, but the patch is not doing what it should: showing index memory consumption information, like it is done in 1.5.\n. Peter, would yo ulike it more if the data was in a system space? The problem is that we want some of the stats to be available without box.cfg{}\n. I looked at the code. Peter, what do you think if I fix it the other way around, change key_field to 'parts' in the output of box.index.B.primary?\nWe mostly consistently refer to key field definitions as key parts, and to key field values as key fields. Should I change output of box.space.B.index.primary instead?\nOtherwise \"key field\" would be used both for field definitions and field values in the code, not very nice.\nThanks!\n. Roman, I think we should not allow special characters in space names. There is just no use for it. As for preferrable syntax, btw CALL syntax does not allow [] \n. - pgulutzan notifications@github.com [14/02/27 11:08]:\n\nTrue,\nconn:call('box.space.space0:insert',{2}) succeeds\nconn:call(\"box.space['space0']:insert\",{3}) fails\nbut is that a bug?\n\nWe're thinking about it, taking into account\nyour and Roman's discussion about reserved names.\nPerhaps we should allow this syntax as well.\n\nhttp://tarantool.org - an efficient, extensible in-memory data store\n. User names are affected as well\n. Please don't forget function names.\n. ```\ntarantool> \u0442\u0435\u0441\u0442 = \"\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\"\n\n...\ntarantool> \u0442\u0435\u0441\u0442\n\n\n\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n...\n```\n\nHowever:\n```\n  tarantool> \u0441\u043f\u0435\u0439\u0441 = box.schema.create_space('\u0441\u043f\u0435\u0439\u0441')\n\n\nerror: 'Failed to create space 512: space name contains invalid symbols'\n```\n\nPlease set locale to en_US.utf8 at start or use lj_char.[hc] from LuaJIT source tree. Interestingly, it's not strict, i.e. it allows some garbage in identifier names. Looking at it, I think we should not use it.\nThe problem with setlocale(LC_CTYPE), however, is that a utf8 locale may have different names on \ndifferent systems. We will have to try and find out.\nOr you coud simpy do:\nchar buf[100];\nstrcat(buf, name);\nstrcat(buf, \" = 1\");\nloadstring();  -> check the result.\nOn the same toke, please introduce a common error code, ER_IDENTIFIER, and use it instead.\n. Sorry, it's a nice idea, but we don't have time. I will open it when I get a second request. Thanks!\n. We need to change to cpuid.h from llvm:\nhttps://gitorious.org/freebsd/freebsd/source/4748f1ee96a22e1b9fd4ef0d872d5c1822f1c187:contrib/llvm/tools/clang/lib/Headers/cpuid.h\n. This needs a unit test.\n. Fixed in 1.5.3-168-gbd9b939\n. Pushed into 1.5.3-116-gb2f12a0, will be available in 1.5 (stable) in a few hours.\n. In 1.6, I suggest to change default port number to 30013. It's a prime number, just like 33013, only a 1 digit difference. 30103 is also a prime number, a good candidate as well.\n. Changed default ports in 1.6 to 3303 and 3313. Besides, we reduced the amount of ports in 1.6 to just 2: primary and admin, and admin port can be a UNIX socket.\n. Done.\n. This is a raw idea, and it's unclear whether it's usable or not.\n. Hi,\nIs it 1.5 (stable) or 1.6 (master)? \n\nhttp://tarantool.org - an efficient, extensible in-memory data store\n. Roman, since this is stable please check ASAP if this can cause\nany trouble (e.g. corrupted snapshot).\n\nhttp://tarantool.org - an efficient, extensible in-memory data store\n. @unera, please fix\n. Fixed in the latest implementation of net.box\n. We need a conflict, yes.\n. Dmitry, please update the spec and add Conflicts:\n. Fixed in the latest Debian spec (added Conflicts section). Tarantool 1.5 requires tarantool-client 1.5.\n. - wallarm notifications@github.com [14/02/28 21:55]:\nWe fixed in 1.5.3, are you sure the problem is still there?\n\nhttp://tarantool.org - an efficient, extensible in-memory data store\n. log_level is dynamic in 1.6, and it's settable in the configuration file:\nbox.cfg{log_level=1} - will only print critical errors.\nPlease reopen the bug if 1.6 API is insufficient for your needs.\n. Fixed with b+*-tree in 1.6\n. Implemented in light hash, which is now used for the primary ke.\n. light hash is pushed.\n. 1. Is very hard to do, since tuples are allocated in slab_alloc_arena and slab_alloc_arena is created when starting the database. It's a property of memtx storage engine right now, not even the database itself. While it's a possible feature request, it's too hard to do and it's unclear why we need to spend time on this right now.\n2. gopt stays.\n3. Use os.exit()\n4. Unreasonable feature request, nobody needs it.\n5. Wishy-washy\n6. gh#235\n. gh#242 describes what exactly needs to be done.\n. Implemented in 1.6.\n. \u041f\u0430\u043a\u0435\u0442 \u043d\u0430\u0434\u043e \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u044c.\n. \u041f\u0430\u043a\u0435\u0442\u044b \u043f\u043e\u0447\u0438\u043d\u0438\u043b\u0438. \u0422\u0435\u043f\u0435\u0440\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0430\u043a\u0435\u0442\u044b \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u0443\u044e\u0442 \u0441\u043e \u0441\u0442\u0430\u0440\u044b\u043c\u0438.\n. Done.\n. Done along with gh-138\n. We decided to abandon the idea for now.\n. This is implemented in a different spirit with removal of EXTERNAL_UNWIND.\n. It's actually a dup of #225.\n. running is ok, please fix it. fix replication to not modify the title. thanks!\n. Interface:\nbox.cfg{wal_mode=read_only}\n. There is a nosqlbench issue for this: https://github.com/mailru/nosqlbench/issues/6\n. Cancelling this, people need history for a sufficiently long time. \nWe may consider adding #public hash tag to commit messages if we want a certain build to be published in the archive. For now, we can continue publishing all builds.\n. Done.\n. This is fixed by removing module/sophia from 1.6\n. The manual has now been updated.\n. mprotect() is there as a safety net for bugs in box.snapshot(). It protects us from ourselves, trying to modify tuples that are being serialized to disk. This is why only the slab arena is protected, not the runtime memory.\n. Yes, thes packages are removed now from our Debian distribution. We no longer maintain libtnt, there is no one who wants to maintain it. We have switched to http://github.com/tarantool/tarantool-c for a C driver.\n. Please re-open the ticket if you think we should have not removed them.\n. The server doesn't even start with this patch.\n. I think I fixed it, the problem was that lua_tointeger converts true to 0 in Lua, not closing the bug sicne it needs a test case.\n. I don't see how you can make require('box') without arguments work as well as require('box'){options}\nAFAIU you can't know inside require('') whether there were options or not. \n. I think we'll have to overload require()  to fix this bug.\n. Before require runs a chunk, it defines a global variable _REQUIREDNAME containing the virtual name of the file being required. We can use these facilities to extend the functionality of require. In an extreme example, we may set the path to something like \"/usr/local/lua/newrequire.lua\", so that every call to require runs newrequire.lua, which can then use the value of _REQUIREDNAME to actually load the required file.\n```\n tarantool> require('session', {foo=3})\n\n\nexists: 'function: 0x410ba108'\n  id: 'function: 0x410c05a0'\n  user: 'function: 0x410b9f20'\n  delimiter: 'function: 0x410ba178'\n  su: 'function: 0x410b9fd0'\n  peer: 'function: 0x410ba150'\n  on_connect: 'function: 0x410ba1c8'\n  uid: 'function: 0x410c0600'\n  fd: 'function: 0x410ba018'\n  on_disconnect: 'function: 0x410ba3a0'\n```\n. __call is not invoked if there are no arguments. Nothing will prevent users from just using require('box'), and that will leave the box unconfigured.\n. Please recheck.\n. I can't repeat this bug on my box, please reopen if it is still repeatable.\n. Depends on gh-232\n. This was caused by installed config.h in the source build. Should be gone by now.\n. I am fixing it right now\n. Now that we put iproto into a separate thread fixing this bug is only a matter of not-so-major refactoring, so it's time has come.\n. Hi, \nby now we run lots of benchmarks, some of them on a daily basis. \nCheck out http://tarantool.org/benchmark.html\nWe also have a set of micro-benchmark which we execute & measure results on every run:\nhttps://github.com/tarantool/microb\n. This is fixed with listen becoming an optional argument, and the server can recover without any ports specified.\n. Apparently still somewhat broken, at least when it comes to logging and interactive mode.\nIn interactive mode, background should close stdin/stdout.\n. This is no longer repeatable. Hard to test in our suite, so closing without a test case.\n. Does brew install --use-clang http://tarantool.org/dist/master/tarantool.rb work?\n. Eugene, please delete this spec to avoid confusion. \n. I updated the link to the brew recipe in the README file, thanks for the pointer. \nAre there any problems left now?\n. The bug is in the new btree index implementation. bps_tree stores a pointer to Index::key_def in iterator structe and a s context in bps_tree_create(). ALTER in case of RENAME simply replaces the old key def with a new, keeping the old index. This makes it possble to rename an index without a full rebuild. However, the remembered reference still points to the old key def, which is freed.\n. Fixed by changing the way alter updates the index.\n. I wonder how would you like to see this bug fixed:\nproduce an error\nmake it possible to use box.tuple without box.cfg{}. \n\nWe plan to implement the first approach (pretty soon). The reason for this is: all tuples are allocated in slab_alloc_arena, and slab_alloc_arena size is unknown before box.cfg{}\n. We added EVAL command which is tailored specifically for safe RPC. See http://tarantool.org/doc/dev_guide/box-protocol.html for details.\n. I admit the cause of the problem was different.\n. ``\nkostja@olah ~/work/tarantool % ./tarantool\n./tarantool: version 1.6.2-47-g8ee746c\ntarantool> box.cfg{primary_port=3303}\n2014-05-15 23:35:58.740 [25254] main/101/interactive C> version 1.6.2-47-g8ee746c\n2014-05-15 23:35:58.740 [25254] main/101/interactive C> log level 5\n2014-05-15 23:35:58.740 [25254] main/101/interactive I> mapping 1073741824 bytes for a shared arena...\n2014-05-15 23:35:58.740 [25256] main/101/spawner C> initialized\n2014-05-15 23:35:58.741 [25254] main/101/interactive I> recovery start\n2014-05-15 23:35:58.741 [25254] main/101/interactive I> recover from./00000000000000000027.snap'\n2014-05-15 23:35:58.743 [25254] main/101/interactive I> synchronized with cluster\n2014-05-15 23:35:58.743 [25254] main/101/interactive I> bound to primary port 3303\n2014-05-15 23:35:58.743 [25254] main/101/interactive I> I am primary\n\n...\ntarantool> box.schema.user.create('test', {password='test'})\n2014-05-15 23:36:22.679 [25254] wal I> creating `./00000000000000000027.xlog.inprogress'\n\n...\ntarantool> box.schema.user.grant('test', 'read,write,execute', 'universe')\n\n\nerror: Read access denied for user 'guest'\n...\n```\n. Fixed by the patch for gh-253\n. Fixed in the latest connector-c repo.\n. I could of course patch the error message, but we're not paranoid and the checks in the code just follow each other, so  I simply switched the order.\nIt is perhaps less secure to reveal to a user that a function does not exist even if this user has no access to it, but it is more user friendly IMHO. The amount of time it can save day to day could be way greater than any potential trouble with a \"security violation\" like that.\n. dup of gh-261\n. Can't repeat - tarantool.error.NetworkError: (111, 'Connection refused')\n\n```\n\n\n\na = tarantool.Connection('localhost', 3303)\n a.select(256, [])\n  File \"\", line 1\n    a.select(256, [])\n    ^\nIndentationError: unexpected indent\na.select(256, [])\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"tarantool/connection.py\", line 411, in select\n    space_name = self.schema.get_space(space_name).sid\n  File \"tarantool/schema.py\", line 74, in get_space\n    space)\n  File \"tarantool/connection.py\", line 250, in call\n    response = self._send_request(request)\n  File \"tarantool/connection.py\", line 225, in _send_request\n    request)\n  File \"tarantool/connection.py\", line 169, in _send_request_wo_reconnect\n    response = Response(self, self._read_response())\n  File \"tarantool/response.py\", line 60, in init\n    raise DatabaseError(self._return_code, self._return_message)\ntarantool.error.DatabaseError: (53, \"Execute access denied for user 'guest' to function 'box.space._space.index.primary:s'\")\na.select(256, [])\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"tarantool/connection.py\", line 411, in select\n    space_name = self.schema.get_space(space_name).sid\n  File \"tarantool/schema.py\", line 74, in get_space\n    space)\n  File \"tarantool/connection.py\", line 250, in call\n    response = self._send_request(request)\n  File \"tarantool/connection.py\", line 225, in _send_request\n    request)\n  File \"tarantool/connection.py\", line 169, in _send_request_wo_reconnect\n    response = Response(self, self._read_response())\n  File \"tarantool/response.py\", line 60, in init\n    raise DatabaseError(self._return_code, self._return_message)\ntarantool.error.DatabaseError: (53, \"Execute access denied for user 'guest' to function 'box.space._space.index.primary:s'\")\na.select(256, [])\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"tarantool/connection.py\", line 411, in select\n    space_name = self.schema.get_space(space_name).sid\n  File \"tarantool/schema.py\", line 80, in get_space\n    temp_name))\ntarantool.error.SchemaError: There's no space with id '256'\n a.select('test', [])\n  File \"\", line 1\n    a.select('test', [])\n    ^\nIndentationError: unexpected indent\na.select(512, [])\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"tarantool/connection.py\", line 412, in select\n    index_name = self.schema.get_index(space_name, index_name).iid\n  File \"tarantool/schema.py\", line 98, in get_index\n    'in space \\'{1}\\''.format(index, space.name, temp_name))\ntarantool.error.SchemaError: There's no index with id '0' in space 'test'\na.select(512, [])\n\n\n\n\n...\n\n\n\na.select(512, [])\n```\n. Sophia will have to come in as a follow up.\n. What about box.tuple? \nFor fiber package, I suggest we remove object syntax, and only leave functional syntax in place. box.fiber.find() can be removed, box.fiber.self() too, and box.fiber.cancel() can be renamed to box.fiber.kill and begin accepting an id. All the other functions should access the current fiber.\n\n\n\nI believe box.socket also accepts functional notation. This should be fixed too.\nPerhaps, if the new socket is not having this feature, there is nothing to be done.\n. I agree with the rest of the suggestions in this ticket. Please write a report about performed changes once they are complete.\n. This ticket needs to be split into smaller pieces, most of which are backward compatible and need to go into 1.5.\n. Nothing to do for 1.6 betsa\n. The patches which add box.begin()/box.commit() support are in. Automatic rollback of the transaction\nin case of context switch is implemented. WAL support is pending, but some major WAL refactoring is necessary anyway, so it can get in along with it.\n. Obsolete by the way we implemented box.cfg{}, the API is inaccessible in absence of box.cfg{}\n. https://github.com/tarantool/expirationd\n. Docs were updated.\n. They are not in the manual. I will convert it to a documentation request then.\n. I was able to repeat this with make clean && make -j16\n. [ 32%] Generating ../../src/uri.cc\nmake[2]: ragel: Command not found\n. Please re-check this bug.\n. Can't repeat.\n. It seems we need two functions, all available to any user: \n- one maps object name to object id. It is a quick one:\n  box.schema.oid(type, name) - looks things up in the data dictionary\n- another indeed to list available grants; \nAuto-granting access to these functions seems to be a flawed design idea - better support (albeit limited) roles right from start. This way access to these and other functions can be granted to PUBLIC role in a managed way. And PUBLIC role is then auto-granted to every existing user. Recursive grants with roles don't need to be supported, and without recursive grants supporting roles doesn't seem to be too difficult.\n. Nothing to do :)\n. This will slow things down. Making session part of the box will not. \n. Nobody needs performance in this particular function, but nobody needs complexity either. We discussed it and decided to move session to box and delimiter to console. Let's proceed according to this plan.\n. Changed to 3301/3313 and updated the docs.\n. Useless.\n. @rtsisyk , your analysis of the problem is wrong. The server correctly receves the signal in the event loop, and begins terminating the loop. It has time to shut down properly. The problem is that we don't interrupt recovery properly in this case, so the file is left open withuot a eof marker. We need to fix sigterm-based shutdown to close the file the same way it's closed in daemon mode.\n. Since 1.5 version is mute on connect (doesn't send back version number), our only option is to try to read with a short time-out, which is not very reliable. As long as 1.5 user base is diminishing and ppl are switching to 1.6, and all new users start with 1.6, as well as all READMEs of all masters lead to 1.6, we decided not to bother. \nThank you for a feature request.\n. Peter, I didn't understand @rtsisyk explanation, so I asked him.\nHere's the deal:\n- in 1.5, the multi-line feature would concatenate multiple lines into one. So it would \"help\" you transform an otherwise invalid Lua into a valid Lua\n- in 1.5, the multi-line feature preserves the input as is, and passes it to Lua. This is necessary, for example, to report line numbers in error messages correctly.\nSo, when in 1.5 the interpreter didn't see \\n, in 1.6 it gets them as is. But an unescaped \\n is not allowed inside a Lua literal, hence a syntax error.\nIf you transform your example to:\ndostring('return ...',\n1, 2, 3)!\nThings should start working again.\n. Merged into master\n. Roman, please fix. On the same token, please fix the storage of 'parts' array in _space. Perhaps we need to make it more msgpack-like, and not store in a field tail while we are at it.\n. On the same token: \nbox.space[id] should be removed, only box.space[name] left in place.\nIndex ids should begin with 1 as well.\n. Pushed.\n. Pushed.\n. Not a priority since now it's in snapshot in text and can be edited.\n. Peter, no one seems to care - pack()/unpack() was useful only as part of the 1.5 binary protocol. The defect you've pointed out is \"broken by design\", and we will not redesign it in 1.5.\n. Yes.\n. This seems to be irrelevant, cancelling. \n. No likes -> closing.. Roman, please email Peter with all all required changes in the docs. This bug can be closed.\n. Done in various milestones.. Fixed in 1.5.3-178-g0b231d7 and 1.6.3-62-g7619d4f\n. Morale of the story - put a message on the channel after filing a bug :)\n. Thanks, ETA: 2 weeks.\n. Pushed into 1.6.4 branch\n. This issue and its test is fixed. We have gh-709, gh-616, gh-454 to cover the rest.\n. This is done, now we need to actually write the help material.\n. Looks like a duplicate of the problem Alexander L has been working on.\n. Thanks for spotting a typo, but this is not the docs, I have now edited the wiki to make this clear. \nThe wiki mostly contains new ideas and draft specification of new features. \nThe file you're pointing at  no longer exists, I renamed/moved it, and will translate to English soon.\n. We did a Lua based proxy prototyp (see http://github.com/tarantool/shard), and will continue with a C implementation in August\n. Right now I'm trying to reorganize and translate the wiki.\n. Duplicate of https://github.com/tarantool/tarantool/issues/1294\n. Re-scheduling to 1.7.5 in scope of auto-increment support in vinyl.. gh-1843 is a duplicate of this bug.. You have almost everything running in autocommit mode in this test case, except this pair:\nbox.begin()\namount_of_money = 1.00\nbox.space.tester:update({999}, {{'-', 3, amount_of_money}})\nIt's rolled back during the first yield that follows the update().\nNote, that box.begin() itself is not rolled back since it changes no data, so rollback trigger is not installed (should this be changed?)\nThanks,\nkostja\n. This is not a bug, there is an implicit yield before commit, it rolls the transaction back.\nUse delimiter or put the transaction into a Lua function.\n. kostja@atlas ~/work/tarantool % git describe --long\n1.6.4-0-ge3cad56\nWe should use git describe --long, rather than simple git describe in the build scripts.\n. Closing this as most of this is done.\n. Roman, this should not wait till Unera's return, hence assigned to you. \nPlease make sure to add a test case.\nWe should print a nice error message when . and : are misued.\n. Peter, for now we implemented connection:flush_schema() which you should use explicitly after a schema change on the remote server. We don't do automatic notifications about schema changes yet. This is gh-802.\n. Please check my recent commits, I added ffi.C.tarantool_version() and ffi.C.tarantool_uptime().\nPlease remove build options from box.info to an FFI binding, and leave everything else as is.\nI think this is all that needs to be done for this bug for now. \n. Remove. \nTo remove, rewrite http to use the new sockets.\n. I think it's not worth the time, and now it's too late in the life cycle.\nWon't fix.\n. Roman, how is this blocked by #323 ?\n. The part that needs to be fixed in 1.6.4: correct error checking and reporting. \nIf a remote connection fails, console prompt should not change, instead, connect() should return an error. If the problem is in missing box.cfg{}, console.connect() should say this in the error message.\nThe broader fix is for 1.6.5, after box.net.box is fixed to work without box.cfg{}\n. Roman, I don't understand your comment. And I clearly see at least two bugs:\n- admin user has no universal access, which would allow this user to execute dostring\n- the function name look up is done even though the user has universal access to execute any function (no function name look up in _func table is necessary and should be done in this case).\nPotentially I also see some messing with the current session of the itnteractive console, but this is unlikely. \n. This is another manifestation of gh-416.\nThank you for your report.\n. We discussed how to fix it - initialize tuple arena with dynamic limit before box.cfg\n. We discussed this and agreed to take a look at MySQL/PostgreSQL behavior for ideas.\nWe could also try to connect to the socket, and check this way whether it's dead or not. If it's dead, we could remove it automatically on start.\n. I'm cancelling this after learning Lua best practices at  Lua Workshop \n. I've seen this before and tried to fix it - and couldn't find any cause in our code. Seems to be valgrind + luajit issue. \nHardly relevant to our users. \nWon't fix.\n. A duplicate of gh-747, fixed by @zloidemon \n. % git diff\ndiff --git a/src/box/lua/schema.lua b/src/box/lua/schema.lua\nindex 7e6798a..af6ac71 100644\n--- a/src/box/lua/schema.lua\n+++ b/src/box/lua/schema.lua\n@@ -610,17 +610,15 @@ function box.schema.space.bless(space)\n         if space.index[0] == nil then\n             return -- empty space without indexes, nothing to truncate\n         end\n-        check_index(space, 0)\n-        local pk = space.index[0]\n-        while pk:len() > 0 do\n-            local state, t\n-            for state, t in pk:pairs() do\n-                local key = {}\n-                for _k2, parts in ipairs(pk.parts) do\n-                    table.insert(key, t[parts.fieldno])\n-                end\n-                space:delete(key)\n-            end\n+        local _index = box.space[box.schema.INDEX_ID]\n+        -- drop and create all indexes\n+        local keys = _index:select(space.id)\n+        for i = #keys, 1, -1 do\n+            local v = keys[i]\n+            _index:delete{v[1], v[2]}\n+        end\n+        for i = 1, #keys, 1 do\n+            _index:insert(keys[i])\n         end\n     end\n     space_mt.drop = function(space)\n. With the diff above, bps tree fails on an assertion in tree_pk_multipart.test\n. #1  0x00002b971f3dbc5b in __GI_abort () at abort.c:91\n2  0x000000000041cef2 in sig_fatal_cb (signo=11)\nat /home/kostja/work/tarantool-master/src/tarantool.cc:211\n\n3  \n4  0x000000000044856f in bps_tree_index_get_leaf_safe (tree=0xe749a8,\nitr=0xe6b8e8)\nat /home/kostja/work/tarantool-master/src/lib/salad/bps_tree.h:1327\n\n5  0x00000000004507b8 in bps_tree_index_itr_get_elem (tree=0xe749a8,\nitr=0xe6b8e8)\nat /home/kostja/work/tarantool-master/src/lib/salad/bps_tree.h:1526\n\n6  0x000000000044ec2b in tree_iterator_fwd (iterator=0xe6b8c0)\nat /home/kostja/work/tarantool-master/src/box/tree_index.cc:108\n\n7  0x000000000bdbe837 in ?? ()\n. Pushed.\n. Done.\n. Fixed in the latest master branch.\n. This is done. A duplicate of gh-2993. There is nothing to fix for now:\nThis bug can not reveal itself as long as only the owner of the object can grant access on it (in other words, there is no GRANT OPTION). In other words, a privilege can never be granted to a user via different paths of a directed grant graph. \n. All that remained to be done is to remove tuple:slice() from the docs, send a mail to Peter\n. Schema and data:\nbox.schema.create_space('banner', {temporary=true})\nbox.space.banner:create_index('primary', {type='HASH',unique=true})\nbox.space.banner:select()\n[27, 20, '1']\n[29, 20, '1']\n[31, 20, '3']\n. Roman, your instruction doesn't work. See gh-806. If it does, please add a test case and close the bug.\n. Fixed by the same patch as for gh-411\n. Once again stumbled over lack of this feature in a customer demo.... The versionof libmysqlclient.so.18.0.0 you're using is broken - apparently built withotu -pthread flags, or some how otherwise broken build.\nThe one that comes with stock Ubuntu 14.04 LTS is working, please use it instead.\nSee also:\nhttp://bugs.mysql.com/bug.php?id=69263\nhttp://sphinxsearch.com/forum/view.html?id=10017\n. Dmitry, slab arena is thread-safe, and you shouldn't need anything else in sophia.\nIf you really want small_alloc() to be thread safe, you should use jemalloc instead, but reset its alloc/free functions to use our slab allocator.\n. We will not do it - too much trouble.\n. See also https://github.com/tarantool/tarantool/issues/695 for implementation details. The solution of gh-695 should also decrease fragmentation quite a bit.\n. Fixed along with gh-695\n. Dup of gh-86\n. +1 @zloidemon \n+1 beeline\n+1 Moscow Transport Department\n. This is done actually.\n. Pushed.\n. This issue blocks nothing, and dist.lua is sufficiently broken already to not bother with this one.\nTo 1.7.\n. Can't reproduce.\n. Peter, sophia is being changed too quickly to expect this to not happen I'm closing this since I have no hope for a meaningful fix - the sophia we're going to have in the master tomorrow will be so different, you won't see a message like that again.\n. Great idea.\n. I simply changed the order of operations in box_process_join(), this fixed the problem with unnecessary records in cluster space. Don't understand the patch in 4867695. \nThis doesn't close the bug though, since the complaint is about the replica, not the master.\n. The replication code should be fixed to re-establish a connection and re-try downloading the snapshot if there is an error in JOIN. _Unless it's a fatal error (and what is a fatal error in JOIN? Seems to be none).\nThis is what still needs to be done here.\n. gh-729 patch is in\n. No likes -> won't do.. ```\n0  0x00002b47bdfd85c8 in ?? () from /lib64/libgcc_s.so.1\n1  0x00002b47bdfd9ee9 in _Unwind_RaiseException () from /lib64/libgcc_s.so.1\n2  0x00000000004dff3f in lj_err_throw ()\n3  0x00000000004e029b in lj_err_run ()\n4  0x00000000004e0653 in lj_err_callermsg ()\n5  0x000000000051c44c in lj_clib_load ()\n6  0x0000001b00000000 in ?? ()\n7  0x000000000e758b30 in ?? ()\n8  0x0000000000000021 in ?? ()\n9  0x0000000000000000 in ?? ()\n```\n. Not repeatable on CentOS 5.5, broken build on CentOS 5.4. \nPerhaps we should document it, not fix - after taking a look at why it's broken.\n. Merged into master.\n. The customer has cancelled their request for this feature. This is built-into systemd, supervisorctl, monit, and a bunch of other tools. Making it part of the server is not a good idea - there is more than one way to do it.\n. Pushed.\n. Please also check engine = option in schema.space.create and setuid option in schema.func.create\n. It would be nice to support ge (in lowercase) in iterators.\n. Please benchmark.\n. Perhaps it requires a parallel build.\nI can easily reproduce it on my host.\nERROR: Can't find plugin `plugins.documentation`: No module named BeautifulSoup\nERROR: Skipping pages/benchmark.rst: could not find information about 'date'\nERROR: Skipping pages/faq.rst: could not find information about 'date'\nERROR: Skipping pages/support.rst: could not find information about 'date'\nERROR: Skipping pages/index.rst: could not find information about 'date'\nERROR: Skipping pages/documentation.rst: could not find information about 'date'\nERROR: Skipping pages/download.rst: could not find information about 'date'\nERROR: Skipping pages/intro.rst: could not find information about 'date'\n. Clearly repeatable with non-parallel make and with BeautifulSoup installed:\nScanning dependencies of target www\nERROR: Skipping pages/benchmark.rst: could not find information about 'date'\nERROR: Skipping pages/faq.rst: could not find information about 'date'\nERROR: Skipping pages/support.rst: could not find information about 'date'\nERROR: Skipping pages/index.rst: could not find information about 'date'\nERROR: Skipping pages/documentation.rst: could not find information about 'date'\nERROR: Skipping pages/download.rst: could not find information about 'date'\nERROR: Skipping pages/intro.rst: could not find information about 'date'\n-> writing /opt/local/work/tarantool/doc/www/output/benchmark.html\n-> writing /opt/local/work/tarantool/doc/www/output/documentation.html\n-> writing /opt/local/work/tarantool/doc/www/output/download.html\n-> writing /opt/local/work/tarantool/doc/www/output/faq.html\n-> writing /opt/local/work/tarantool/doc/www/output/index.html\n-> writing /opt/local/work/tarantool/doc/www/output/intro.html\n-> writing /opt/local/work/tarantool/doc/www/output/support.html\n-> writing /opt/local/work/tarantool/doc/www/output/docs/user_guide.html\n. The error is caused by pelican 3.3.0. One needs to upgrade to pelican 3.4.0 to fix the problem.\n. The fix is pushed.\n. Please don't forget to file a documentation request once this is fixed.\n. ```Regarding the closing of issue #503 ...\nMr Tsisyk originally requested\n\"Please add support for |if_not_exists| options to\n|box.schema.index.create|, as it was done for spaces.\"\nand that is what has happened -- but it causes inconsistency.\nbox.space.tester:create_index('primary')\n... returns nothing, because create_index in general returns nothing\nbox.space.tester:create_index('primary',{if_not_exists=true})\n... returns a table, because that's consistent with \"as it was done\nfor spaces\"\n(create_space returns a table).\n\n. Pushed.\n. Please add \"How to repeat\" section.\n. Please reopen if you see this again.\nCan't repeat.\n. I don't understand what the problem is and why we need this in 1.6.4. Shifting off to 1.6.5\n. it's setuid, not suid in func.create\n. Peter,\nthis is a strange artifact of console implementation.\nHere's what happens: \nwhen you issue 'console.connect()' and connect to a port, and then invoke f1() or f2(), you actually invoke \"eval\" binary protocol command, which, in turn, evaluates an arbitrary Lua expresssion you pass to it, in your example, \"return f1()\" or \"return f2()\".\nsetuid user change only works when a function is invoked with CALL binary protocol command, so if you change your client code to:\n```\ntarantool> c = remote.new('3301')\n\n...\ntarantool> c:call('f2')\n\n\n\n\n[0]\n...\ntarantool> c:call('f1')\n\n\n\n\n\nerror: Read access denied for user 'guest' to space '_func'\n```\n\nthe code works as expected. \nActually, it doesn't. There was a bug with that code path too, but I will fix it now, before you get to read this message.\nSo I wonder if it's possible to document this artifact in the documentation for console? \nYou could perhaps say that in console, you can't expect setuid functions to work, since console always communicates with the server by way of passing an expression to execute, and as long as the server executes the expression, it can't know if it is necessary to change user id for some functions within it.\n. At least this ticket shows that sophia needs to initialize cord object in the threads it creates so that cord infrastructure is availalble in them.\n. Peter, please clarify, the default setting for panic_on_wal_error is false, so the server didn't refuse to start when reading rows from the binary log. If you save a snapshot, or change panic_on_wal_error to true, the server would refuse to start, as you expect. Do you still think this behavior is buggy and needs to be fixed? If so, how? Do you think we should exclude ER_MEMORY_ISSUE from the list of problems which are ignored in panic_on_wal_error = false mode? \n. Roman, this is badly specified. Normally you need to grep a log from a position, not just all of it. There is a single log file for all tests, so you can grep old stuff this way. A message may be lost due to buffering and non-blocking I/O. You need to clarify all these tricky cases. \n. We need to discuss this first.\n. A possible way to fix:\n- always fork before initializing coeio. Set up pipes/redirection to redirect stdin/stdout to a child.\n- if background option is set in box.cfg{}, exit from the parent process, which was attached to the terminal.\n  Alternatively, let the parent hang around so that it can work as a spawner/waitpid manager so that we can implement coio_*(fork/exec), popen in our API. We need fork/exec/popen for instance management, which is in turn necessary for automatic failover/replica reprovisioning and automatic testing.\nIt's best if this code is put into a library wiith a standard api in src/lib, and this library can be used by any fat process which needs to be able to daemonize/fork/exec and can't fork itself.\n+1 to this way to fix: we need to implement automatic restart on crash as a server option, and it's only possible if the guardian process is created at once at start up.\nOther stuff related to this problem:\n- just like nginx, support n_instances configuration option, which defines how many instances of the script to create (to support sharding out of the box)\n- this is also necessary to implement pipe() command in Lua (or make os.execute() non-blocking and non-forking the entire database instance).\n. - Nick Zavaritsky notifications@github.com [15/08/20 16:41]:\n\nOriginal issue as reported in the very first message was about fork breaking fibers sheduling on FreeBSD (sample code never makes it through to the \"after server\" line).\nThis happens because libev REQUIRES certain actions to keep the event loop operational after fork. This is because kqueue has a super weird fork semantics and has to be recreated after fork.\nThe fix: https://github.com/tarantool/tarantool/commits/gh-517\n\nOK to push.\n\nhttp://tarantool.org - a NoSQL database in a Lua script\n. Moving out to 1.7 since we decided to fix it by removing -b\n. We added re-initialization of coeio after fork.\nThe automatic restart feature is implemented in systemd.\nClosing as won't fix.\n. - Roman Tsisyk notifications@github.com [15/12/15 22:52]:\n\nThis patch for 1.6.7 because it blocks Debian packages. The\nsystem library is used only if -DENABLE_BUNDLED_LIBYAML is OFF\n(default value is ON). All other changes are just moving of\nfiles and fixes in CMake scripts.\n\nGo ahead and push it. \n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. I'm closing this ticket, since the core of sharding is complete. We need to add a join of a new node to this scheme, which we'll track separately in shard/ project.\n. Another obscure message from normalize_update_ops:\n```\ntarantool> test:update({1}, {'=', 3, 1}) \n\n\nerror: '[string \"-- schema.lua (internal file)...\"]:447: attempt to compare number\n    with nil'\n...\n```\n. Fix crash in 1.6.4. Allowing IPROTO_TIMESTAMP to be INT needs to be given a careful consideration. This won't solve all the Perl msgpack issues apparently, so we will have to deal with such cases consistently.\n. The crash is fixed, IPROTO_TIMESTAMP will stay double for now - seems to be no urgency as this is not needed for anything but compat-flow.\n. Was produced by a custom snapshot daemon, not written by us.\n. Pushed. \n. This is a duplicate of gh-132, which is fixed.\n. Look at the messages produced by recover_wal(), they are produced by every process that uses it - every relay.\n. I tried to merge the branch, but it breaks the test suite on my box, it begins to fail inside coeio in app/cfg.test.lua\nI don't quite understand the problem with coeio yet to fix this, but this has to wait, I guess.\n. Roman, I don't see the point, to be honest\n. Looks OK now.\n. we should perhaps on the same token rename snap_dir and panic_on_snap_error? \n. OK, I hope we'll get rid of snapshotting as such in a few months, so I won't rename old variables. snap_daemon has been fixed. \n. @unera, snapshot daemon starts even if both variables are 0:\n\n``\n./tarantool: version 1.6.3-477-g5599bda\ntype 'help' for interactive help\ntarantool> box.cfg{snapshot_period=0, snapshot_count=0}\n2014-10-02 22:59:01.839 [19052] main/101/interactive C> version 1.6.3-477-g5599bda\n2014-10-02 22:59:01.839 [19052] main/101/interactive C> log level 5\n2014-10-02 22:59:01.840 [19052] main/101/interactive I> mapping 1073741824 bytes for a shared arena...\n2014-10-02 22:59:01.841 [19054] main/101/spawner C> initialized\n2014-10-02 22:59:01.852 [19052] main/101/interactive I> recovery start\n2014-10-02 22:59:01.852 [19052] main/101/interactive I> recovering from./00000000000000000000.snap'\n2014-10-02 22:59:01.861 [19052] main/101/interactive I> ready to accept requests\n2014-10-02 22:59:01.862 [19052] main/102/snapshot_daemon I> started\n\n...\n```\n. If both options are disabled, the fiber should not start. Setting options to disabled from enabled should cancel the fiber. Disabling the message won't remove the fiber from the list of fibers. Generally, users shouldn't pay for a feature in no way whatsoever if they are not using it.\n. Pushed.\n. This is implemented already.\n. Pushed.\n. Pushed iproto_thread to 1.6.6, the last major piece of structural changes necessary to go GA.\n. They are not:\nkostja@ibbur ~ % rpm2cpio tarantool-1.6.3-459.x86_64.rpm| cpio -idmv \n./etc/init.d/tarantool                                  \n./etc/sysconfig/tarantool\n./usr/bin/tarantool\n./usr/bin/tarantoolctl\n./usr/lib64/tarantool\n./usr/share/doc/tarantool\n./usr/share/doc/tarantool/LICENSE\n./usr/share/doc/tarantool/README.md\n./usr/share/man/man1/tarantool.1.gz\n. We will not do this, too expensive for in-memory.. Thank you for a bug report.\n. Please add expect-fail test case to our test suite.\n. Irrelevant.\n. Please make sure the output is platform-independent. Use comparisons to check the result, not conversion to a string.\n. The cause was old Python version (2.6)\n. Fixed, it's a duplicate of a closed bug.\n. Please check with Anton Barabanov the details.\n. The cause was old Python version (2.6).\n. A duplicate of gh-557\n. Indeed, we need to think where to store this data. A separate space may be handier in certain cases (but I haven't thought carefully in which ones - perhaps triggers?). But storing all such data in a single space solves alter atomicity issues.\n. At this point we agreed to store this data in a column in space _space.\nWe need a way to describe the format of field description, the idea is that it's a Lua table like this:\n{\n   [0] = {name ='id',  type = 'num' },\n    [1] { name = 'owner', type = 'num'},\n}\nAdditionally, we need to implement space:format() function, which would get an array of format definitions like above, validate it and set it in the space.\nThe data in format field needs to be validated for bad input in alter.cc.\nOnce we store format metadata with the spaces, it is already available to an external langauge driver. \nApart from that, we need to update box.space and represent format in space metadata. We also need to update tuple_format object, to keep the format around - this is necessary to implement tuple field-by-name access in Lua.\n. Indeed.. no, this task is about porting mons implementation to 1.6 and making it the default\n. There were  numerous performance improvements in net.box in 1.6.5, the remaining todo items are recorded in  gh-799, gh-800, which supersede this task.\n. -w option can be deleted by the way\n. Indeed, and there is a respective grant entry in _priv table, something is broken so that it doesn't work.\n. I assume it's done on branch sophia-integration. If not, please open a separate report.\n. Have you tried\nbrew install https://raw.githubusercontent.com/tarantool/tarantool/stable/extra/tarantool.rb --devel\n?\n. This is a dup of gh-704, I discovered it in Avito and fixed.\n. This is perhaps in the spawner process? If this is the case, please assign back to me, since I will be removing the spawner soon.\n. box_free() should do nothing if box is not initialized.\n. You must escape such characters, but the problem is that our URI parser doesn't unescape escaped characters. \nSuch passwords work well in the binary protocol.\n. Roman:\n```\ntarantool> uri.parse('%20a@h')\n\n\nhost: h\n  login: '%20a'\n...\n```\n\nas you can see the parser recognizes escaped characters but doesn't unescape them.\nThis needs to be fixed.\n. Can you reproduce it now?\n. Please send an email to PeterG, with an example and the suggested changes in the manual.\n. Roman, what exactly is the problem you're trying to solve?\n``\ntarantool> box.schema.create_space('test'):create_index('primary')\n2014-11-12 20:26:16.160 [10442] wal I> creating./00000000000000000000.xlog.inprogress'\n\n\nunique: true\n  parts:\ntype: NUM\n    fieldno: 1\n  id: 0\n  space_id: 512\n  name: primary\n  type: TREE\n...\ntarantool> box.space.test:insert{1, nil, {nil, 3, 2}}\n\n\n\n[1, null, [null, 3, 2]]\n\n```\n. Please provide a rationale.\n. Please provide a way to repeat this.\n. We have implemented savepoints. It is now possible to do nested transactions with a bit of syntax sugar. I'm leaving it to the community to come up with a rock.. The fiber should not permit wakeup if it's waiting for wal writer. fiber.wakeup() should return an error for fibers which do not permit it. There is a flag in the fiber to this purpose, fiber_cancellable, it should be checked by wakeup.\n. Another part of the fix is to renmae FIBER_CANCELLABLE to FIBER_RESUMABLE.\nIf a fiber is not resumable(), wakeup returns asn error.\nFIBER_USER_MODE should be removed altogether, or set for almost all fibers except very critical ones. \nfiber.cancel() thus is this:\nfiber->flags |= cancelled (always)\niif (fiiber_is_resumable(fiber))\n  fiber_wakeup(fiber))\n. I fixed lbox_fiber_wakeup to not wakeup a fiber that is not cancellable.\nI don't think we should bother any more with this.\n. box.schema.user.passwd(user, password) syntax is now accepted when passwd is invoked by admin user.\n. Anton, do you still need this?\n. This is cancelled by the originator.\n. Obsolete.\n. - Roman Tsisyk notifications@github.com [15/01/15 16:58]:\n\nI also suggest to rename fiber.time64() to fiber.utime() or\nsomething like that.\n\nToo late for renames, unfortunately.\n\nhttp://tarantool.org - a NoSQL database in a Lua script\n. ```\n0x0000000000514989 in lj_alloc_free ()\n(gdb) bt\n0  0x0000000000514989 in lj_alloc_free ()\n1  0x0000000000515fe8 in lj_alloc_f ()\n2  0x000000000051002e in lj_cdata_free ()\n3  0x00000000004f8384 in gc_sweep ()\n4  0x00000000004f9317 in lj_gc_freeall ()\n5  0x00000000004fff2f in close_state ()\n6  0x000000000050039a in lua_close ()\n7  0x000000000049f76f in tarantool_lua_free ()\nat /home/kostja/work/tarantool/src/lua/init.cc:454\n\n8  0x000000000041e54e in tarantool_free ()\nat /home/kostja/work/tarantool/src/tarantool.cc:496\n\n9  0x00007ffff6699149 in __run_exit_handlers (status=0,\nlistp=0x7ffff6a1c6c8 <__exit_funcs>, \nrun_list_atexit=run_list_atexit@entry=true) at exit.c:82\n\n10 0x00007ffff6699195 in __GI_exit (status=) at exit.c:104\n11 0x000000000041df8d in background ()\nat /home/kostja/work/tarantool/src/tarantool.cc:370\n\n12 0x000000000041e3f4 in load_cfg ()\nat /home/kostja/work/tarantool/src/tarantool.cc:464\n\n13 0x000000000051cf02 in lj_vm_ffi_call ()\n14 0x000000000053d645 in lj_ccall_func ()\n15 0x0000000000518b7a in lj_cf_ffi_meta___call ()\n16 0x000000000051ad7c in lj_BC_FUNCC ()\n17 0x00000000005057aa in lua_call ()\n18 0x0000000000543d4b in lj_cf_dofile ()\n19 0x000000000051ad7c in lj_BC_FUNCC ()\n20 0x00000000005057aa in lua_call ()\n21 0x000000000049e593 in lbox_call (L=0x40000378, nargs=0, nreturns=0)\nat /home/kostja/work/tarantool/src/lua/utils.h:442\n\n22 0x000000000049f62a in run_script(typedef __va_list_tag __va_list_tag *) (\nap=0x7ffff5400138) at /home/kostja/work/tarantool/src/lua/init.cc:410\n\n23 0x000000000048521a in fiber_loop (data=0x0)\nat /home/kostja/work/tarantool/src/fiber.cc:391\n\n24 0x00000000004ccd56 in coro_init ()\nat /home/kostja/work/tarantool/third_party/coro/coro.c:9\n\n```\n. Pushed.\n. Fixed in 1.5.4-41\n. Hi, can we close this ticket?\n. Thanks, please feel free to reopen if you have any trouble, thanks!\n. This was regressed by 1e22f5ba7968fce4b3220fa08587b7856788d610.. truncate is executed by dropping and creating the primary key.\nWe need to wrap truncate() with some sort of lock or into a transaction to avoid this effect, or rather:\n- create a copy of the space object with the same definition\n- replace the current space object with a copy\n- (optionally) dispatch the old object to a background fiber to perform the truncate task\nThis problem also affects SQL implementation, see branch https://github.com/tarantool/tarantool/tree/c_public_api-truncate\n. Fixed in 1.7.4-139-g2561456. curious, move to what? memcache? If you just need memcache, why don't you use memcache?\n. Done, check out https://github.com/tarantool/memcached\n. https://github.com/tarantool/try/issues/6\n. Pushed.\n. Fixed.\n. Duplicate of gh-727\n. truncate/alter is there, but drop index is not. Please add.\n. Pushed into the master branch.\n. The message is there for a reason - we don't work well without UTF-8 locale.\nI see no reason to remove the message.\n. I don't think it's a good idea: we can go pretty far on that path, log filtering, etc.\nWe need more ways to test the server, since so many things are not testable well with the current framework, rather than try to make the current functional framework perfect for everything.\n. mejedi created an stdout filter which is now used almost everywhere, so I think this can be closed.\n. I'm closing this per above comment.\n. Please reopen if there are more unfixed problems.\n. Which command fails? cmake .. works fine if you're building in a clean git tree. Did you make git clean -qfxd first? Did you do git submodule update --init?\nI rechecked out-of-source builds with sophia, they work OK.\n. Please provide platform & build type. Can you repeat it now?\n. Thanks for the patch!\n. I expect there to be other problems on ARM - mainly with LuaJIT and exceptions. Please don't hesitate to let us know about your findings.\n. Peter, please update the docs re CRC32 seed.\n. Fixed in the latest manual.\n. A duplicate of gh-657\n. We could have ~/.tarantool/default file which could override /etc/tarantool/default\n. I pushed your changes but changed the semantics a bit so that  ~/.config/default and /etc/default are never merged: either one or the other is chosen. \nPlease let me know if You see any trouble with my fix.\n. This is still broken:\n```\ntarantool> fiber.create(function() while true do fiber.sleep(0) end end)\ntarantool> fiber.info()\n\n\n102:\n    backtrace:\n'#0  0x482564 in ?'\n'#1  0x482589 in ?'\n'#2  0x47872b in ?'\n'#3  0x4c41d6 in ?'\nfid: 102\nname: lua\ncsw: 4980\n  101:\nbacktrace:\n'#0  (nil) in ?'\nfid: 101\nname: interactive\ncsw: 11\n```\n. It works!\n\n\n\nThanks,\nk\n. Without this feature, if a function for which a trigger had been defined is redefined, there is no way to clear the trigger.\n. Fixed along with the patch for gh-669\n. Peter, please document this (you already did). We could make os.exit work, but overall Tarantool stored procedures code is runing in unprotected environment, you can do whatever you want, including shooting yourself in the foot.\n. This was needed for twemproxy, which needs to change sync in place to multiplex incoming connections to a single outgoing connection while using zero-copy api.\n. Doesn't look relevant any more.. Pushed.\n. Peter, role.info() should not be documented. Instead we came up with _vspace and _vindex tables. role.info() and user.info() are half-done and broken (I can come up with a number of cases when they don't show the necessary information, i.e. when privileges are inherited via a chain of grants/roles).\nSo, when it comes to role.info() and user.info() the decision is \"won't fix\", we will perhaps remove them from some future release.\n. In the end we return a Lua table with all triggers.\n. When you define a trigger, you get back an object which can be used to later on clear or reset this trigger. In theory the type of that object should not interest you, but it happens to be a Lua function which you passed in. In Lua a function is a first-class object. So, yes, instead of a numeric identifier, we return a handle - Lua function. Invoking the trigger-definition function (on_* function) with no arguments lists all triggers, i.e. returns handles of all trigger objects. We had a discussion internally when approaching the implementation, and decided to do it this way. Please document this, or, if you feel it's a bad solution, share what problems you see with it.\n. Relevant in SQL, where it is done. Nothing to be fixed here.. It was possible with Tarantool 1.5\n. @rybakit needs this feature as well, it's OK if it's available in tarantoolctl, not in tarantool itself.\n. Besides eval, it should work the same way for 'connect'. I'd actually say entire eval is unnecessary if we do it for connect, and allow instance names in connect.. Pushed.\n. https://groups.google.com/forum/#!topic/tarantool-ru/0M828Dw9rqs\n. The syntax is \ntarantoolctl reload path-to-file\nSimply does \"dofile(path-to-file)\" to it in the given instance.\nThis is a simple feature for tarantoolctl, just a time-saver.\n. Merged.\n. Please add a test case to app/ suite this time.\n. Dmitry, this fix contradicts what PeterG is asking for in gh-684.\nSophia should never auto-create its directory, it's the job of tarantoolctl. By default sophia_dir should be the same as work_dir, which is the same as CWD.\n. A ticket can be closed only when it's merged.\nYou should add 'Fixes gh-678' to the changeset comment, then it gets closed automatically when I push the change to the master. Otherwise you need to watch when the patch is merged and then close the ticket.\n. Pushed.\n. Progress?\n. Dmitry, sophia initialization must fail with an error if the directory does not exist.\n. Roman, please fix issue number 3 as well first.\n. Sorry, this is definitely won't fix now. 1.7 is frozen and we're focusing on 1.8 which has SQL.. I don't think it's such a popular case after all, so won't fix.\n. I fixed the matter, but it needs a test case.\n. gh-613 covers the QA part\n. @alyapunov, this is your domain, the fix is quite ugly, and we need nested configuration option for memtx, replication, write ahead logging, etc. \nPlease either tell Dmitry how to, or come up yourself with a generic fix.\nThis also needs a proper test case in app/cfg.test.lua.\n. I can repeat this.\n. The test still fails.\n. Fixed in 1.6.4-637-g5ef2b15\n. Pushed.\n. Fixed in 1.5.4-58-g4f21d0d\n. Set box.sandbox to nil to disable sandbox.\n. Merged.\n. Dmitry, I think it would be better if Sophia catches these exceptions, what do you think?\n. I have fixed this and added box.info.replication to box.info() output.\n. Roman, Andrey can quickly set up a virtual host for you.\n. Documented in the latest manual.\n. \u042e\u0440\u0430, \u0437\u0430\u0447\u0435\u043c \u044d\u0442\u043e \u0432\u0441\u0451?\n. \u0411\u044b\u043b \u043e\u0434\u0438\u043d \u0432\u044b\u0440\u043e\u0436\u0434\u0435\u043d\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u043c\u044b \u0435\u0433\u043e \u0437\u0430\u043a\u0440\u044b\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u043c. \u0412 production \u0442\u0430\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u0443 \u043d\u0430\u0441 \u043d\u0435 \u0431\u044b\u043b\u043e.\n. Now, this patch, unfortunately, needs to be re-done. The feature request wasn't specified  well enough.\nWe need to look around and see what others do too, before coming back to this.\nFirst of all, the user needs to see a single entry for a single node. I.e. if we have both a relay and a remote in a master-master setting, we need to display only 1 entry in replication status table.\nSecond, in case of multi-source, we need to find a way to index the output A quick index is needed so that we can display state of 1 replica only, without building an entire table. Apparently we need to index it with server ids (short ones). Perhaps we need to enforce human-readable names on nodes, and index the table using these names.\nFinally, we need to find a way to merge information from outgoing vclock (remote->vlcock) and incoming vclock (relay->vclock), as well as from outgoing lag and incoming lag into few comprehensible metrics. \nHow much is the remote behind and how much are we behind? We have the following data:\n- the time when we sent the last row to remote (idle1)\n- the time when we received last row from remote (idle2)\n- the timestamp of the last row received\n- the timestamp of the last row sent.\nCan we assume that link speed is uniform, and merge two idle times and two lag times and display the min (idle1, idle2) as idle, and min(lag1, lag2) as lag? I think we need to find a way to do it, since that's what the user is interested in. Making sense of two idle and two lag times is difficult even to us, not to mention users. \nFinally, we need to find a way to merge vclocks. We actually have 3 vclocks to sync: recovery->vclock, remote->vclock, relay->vclock. In a totally synchronous system, all vclocks are identical. So, if they are not, the difference tells us about events which have not reached the other side yet. So, perhaps we need to print a single vclock in the following form:\n{ 1: 32 (+3), 2: 33 (-3) }, showing how much the master is ahead or behind the replica.\nLast thing, we need to replace socket address with uri from the configuration file. Addresses and ports are useful, but take a lot of display space, and are perhaps useful for debugging, but not at all handy if one just needs to monitor replciation and do health checks. \nSomething to consider: \nhttp://galeracluster.com/documentation-webpages/monitoringthecluster.html\nhttps://dev.mysql.com/doc/refman/5.7/en/replication-multi-source-monitoring.html\nhttp://docs.continuent.com/tungsten-replicator-2.2/operations-status.html\n. Galera uses node names in configuration:\nhttp://galeracluster.com/documentation-webpages/dbconfiguration.html\nNeeds to be checked whether or not a node name is mandatory. Without names, the whole thing can become messy pretty easily.\n. Example where you need to check separately master and slave status:\nhttps://code.google.com/p/tungsten-replicator/wiki/Cheat_Sheet\nI think it's a bad idea - all the user cares about is divergence of master and slave, we should not be forcing him/her to merge master and slave status to find it out.\n. What's the difference between this bug an gh-728?\n. Closing, should be fixed by now.\n. See gh-625\n. How to fix: \n- put aside a set of blocks which are sufficient to cover insert-on-delete needs\n- if out of main index memory, switch to using the reserve, and disable the tree until the reserve is refilled\n- to calculate the necessary amount of the set-aside buffer, use a probablistic model, assuming page splits of pages are independent events, and simulation with stress testing.\n. Thank you for your bug report.\n. Affects mail.ru games\n. Viktor, bug database is not a discussion forum. If you have a feature request, please feel free to open it. But better yet, join our discussion channel and air your proposal there. As to the case when making a snapshot takes more than snapshot interval, just don't do it: choose your snapshot interval accordingly. \nAlternatively, snapshot daemon is 200 lines of Lua code. If snapshotting takes so long in your case, better don't use snapshot daemon at all - fire up a separate fiber which does it the way you need.\n. 2015-02-25 15:53:45.006 [30942] main/103/replica/avi-cluster85.se.avit C> connected to 10.7.176.132:2202\n2015-02-25 15:53:45.048 [30942] wal I> creating `/var/lib/tarantool/tarantool-ru-02/00000000000327431099.xlog.inprogress'\n2015-02-25 15:53:45.528 [30942] main/103/replica/avi-cluster85.se.avit memtx_hash.cc:297 E> ER_TUPLE_FOUND: Duplicate key exists in unique index 'primary'\n. Space name is still missing, your change replaced index id with index name.\n. Duplicate of gh-748\n. Let me clarify. Right now, to avoid double definition of spaces, users, grants, as well as conflicts between master script and a replica script, developers have to add if_not_exists = true clause to all grants, create/drop space, etc. \nPlus, to avoid conflict between masters and replicas they still are better off skipping DDL part\naltogether on replicas.\nThus, something which on a single-node master looks as straightforward as:\nbox.schema.space.create('myspace')\nbox.space.myspace:create_index('pk')\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\nbecomes something complicated when you make your startup script restart-aware and replication-aware.\nWhat we could offer our users, is something like run-once hook, in which they can register\ntheir functions. This hook would be guaranteed to execute only once in entire replica set,\nand on the first start of the first master.\nSomething like:\nbox.run_once(create_spaces_and_users)\nThe implementation could use a special key in _schema space to check whether or not\nthe hook has already executed. \nWe could even offer users some form of DDL versioning/schema upgrade with this approach, if we allow many hooks, each getting its own distinct/unique identifier:\nSo, to add new spaces, users could, in addition to an existing\nbox.run_once(create_spaces_and_users)\nsimply add\nbox.run_once(add_a_few_more_spaces_and_users)\nand thus get an automatic \"upgrade\" of schema, which runs only once, guaranteed.\n. Pushed.\n. Pushed.\n. Pushed into 1.7\n. Thanks!\n. Pushed.\n. This feature is on wishlist milestone. This milestone has no release date. Please like this feature to bump its priority.. Duplicate of gh-2677. Duplicate of gh-1028\n. Thanks!\n. This is already the case.\n. - Peter Gulutzan notifications@github.com [15/03/15 22:11]:\n\nI have Ubuntu 12.04 and Tarantool 1.6 pulled from source today.\nI start with a new installation, that is, there are no Tarantool-database files in the default directory.\nI start Tarantool and say\nbox.cfg{listen=3301}\nbox.schema.user.grant('guest','read,write,execute','universe')\nbox.schema.user.passwd('guest', 'sesame')\n... I do not close or exit.\nI start another shell, with a different default directory, I start Tarantool and say\nconsole = require('console')\nconsole.connect('localhost:3301')\nResult: success. I have connected without specifying that my\npassword is 'sesame'.\n\nYes, this is done on purpose, to support installations which don't need\nauthentication and access control. Guest is a special user. You should always\nbe able to connect as guest. In other words, you always have a\nCONNECT privilege in tarantool. You can't do anything if you are\nguest, though, unless you've been granted privileges.\nPlease document it.\n\nhttp://tarantool.org - a NoSQL database in a Lua script\n. Peter, in Tarantool, authentication is a standalone request, something like CHANGE-USER in MySQL. When you provide a password in URI, the client tries to issue AUTH request right after establishing a connection. In your case, it tries and it fails.  If you need to become guest, do not issue AUTH at all, it's the default user already. We can prohibit setting a password for guest user, so it will always fail.\nI don't think it's a good idea to always return 'success' to AUTH request when user == guest, so in this place 'guest' is treaded like any other user. \n. The idea of :get() is to always return one tuple. Use :select() if you need more.\n. The engine API is here: \nhttps://github.com/tarantool/tarantool/blob/master/src/box/engine.h\nYou could take a look at memtx_engine implementation, and play with our in-memory data structures. \nWe have never thought about applicability for graph analysis. But we have never thought about many other ways people use Tarantool.\n. Thank you for your feature request, for now we need to maintain focus - and it would be fair to say we do  not plan to do it in the near future. The storage engine API is there, with it, one can easily implement graph features (store pointers to connected objects in tuples, use tuple_format object to track all tuple modifications, use index iterator API for graph iteration). \n. Thanks!\n. I agree, this was a stupid idea, perhaps some signals can be handled this way but not all. \n. (done)\n. Pushed.\n. Elena, please check out branch gettext_support. This branch adds a feature to the server, so that its tutorial and interactive help becomes multi-lingual as well. Please take a look when you have a chance.\n. Attached the diff. Removing the branch since it's too old (and impossible to merge with the upstream thanks to the updated tutorial).\n1.txt\n. Alexander, please add a test case in 1.6, since it's fixed there.\n. Merged.\n. Veniamin, ctrl-d works just as well. ctrl-c is SIGINT.\n. @rybakit got affected by this\n. Please add a test case.\n. \u0421\u043f\u0430\u0441\u0438\u0431\u043e, \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u0434\u0440\u0443\u0433\u043e\u0439. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u043b \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u0441\u0435\u0439\u0447\u0430\u0441 \u0441\u0434\u0435\u043b\u0430\u044e \u0444\u0438\u043a\u0441.\n\u0425\u043c... \u0422\u043e\u0447\u043d\u0435\u0435.. \u0424\u0438\u043a\u0441 \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u044e, \u044d\u0442\u043e \u0434\u0443\u043f \u0432\u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u0431\u0430\u0433\u0430:\nhttps://github.com/tarantool/tarantool/issues/266\n\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 box.cfg{} \u0441\u043d\u0430\u0447\u0430\u043b\u0430.\n\u0421\u0430\u043c\u0443 \u0431\u0430\u0433\u0443 \u043c\u044b \u043f\u043e\u0444\u0438\u043a\u0441\u0438\u043c, \u043d\u043e \u0432 \u043c\u0435\u043d\u044c\u0448\u0435\u043c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0435 - \u043d\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0432 \u0433\u043e\u043b\u043e\u0432\u0443 \u043a\u0430\u043a \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u043f\u043e\u043a\u0430.\n. @mialinx , \u044f \u0432\u0441\u0435 \u0436\u0435 \u0434\u0443\u043c\u0430\u044e \u0447\u0442\u043e \u044d\u0442\u043e \u0431\u044b\u043b \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442 https://github.com/tarantool/tarantool/issues/687\n\u0421\u0438\u043c\u043f\u0442\u043e\u043c\u044b \u043e\u0447. \u043f\u043e\u0445\u043e\u0436\u0438\u0435. \u041f\u0435\u0440\u0435\u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0439\u0442\u0435 \u0435\u0441\u043b\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438.\n. Two years ago we did this:\n https://github.com/rtsisyk/tarantool_js_primer\nnobody got super excited. \nWe may bring it up to date in a few months from now.\nIs there any practical reason you need JS? \n. We work on this project  not to become rich, popular, likable, etc, but because we believe it's the best way to solve certain data management needs, and Lua handles itself very well for the cases at hand - better than JS,  in particular, especially when it comes to predictable garbage collection, low execution overhead, simplicity, extensibility.\nOur issues database is not a place to give free advice, and this advice is neither original nor new. \nThank you for your interest in Tarantool and a recommendation that could help increase its adoption. \n. Georgy, please consider implementing the server_id based filters - it should be a simple feature, but will make our full mesh architecture scalable.. I pushed the branch. Shall we close the ticket or wait for clang fixes?\n. I pushed a patch yesterday which removes LuaJIT external unwind on all platforms, so we're no longer dependent on the upstream fixes. Things should work like a breeze now on FreeBSD, please recheck.\n. Thanks!\n. This is affecting avito. Never think that something is a map if it has numeric keys, keys start with 1, and have no gaps. \n. Fixed in sophia-integration branch.\nThanks for a test case, I will add it when I merge the branch.\n. Fixed along with the patch for gh-1659\n. Fixed.\n. This is fixed with a patch for gh-916, only needs QA (on the same token the error injection could be added for writev() partial write).\n. This is done along with the fix for gh-1656\n. Pushed into 1.6, https://github.com/tarantool/tarantool/commit/d4984f98949aa1df4c18e6434f8b8c5dfc318d6c\n. Actually you can, needs a test case.\n. Pushed.\n. Pushed into 1.6\n. I think we need to patch LuaJIT build system instead.\n. https://github.com/LuaJIT/LuaJIT/issues/76\n. This is done in 1.6.6\n. Duplicate of https://github.com/tarantool/tarantool/issues/2677. Yes, but an ugly one :)\n. This is done.. Ok to push\n25 \u0434\u0435\u043a. 2015 \u0433. 10:20 PM \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"Roman Tsisyk\" \nnotifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\n+1 for this feature\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/818#issuecomment-167259253\n.\n. Name: box.atomic(). Pushed. Needs a doc entry for tarantoolctl.\n. The problem seems to be resolved with the upgrade.\n. Segmentation fault \n\u0412\u0435\u0440\u0441\u0438\u044f: tarantool-1.5.5-20\n\n2016-02-05 19:42:27.181 [7380] 112685/iproto I> Refresh:  by 55948/10.161.64.73:56641: exp=2016-02-05T19:43:26/+59s\nSegmentation fault\nCurrent time: 1454690547\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed, \nthis may fail as well\n0  0x43db00 in sig_fatal_cb(int)+112\n1  0x7efff49bc790 in ?\n2  0x48eddc in lj_BC_TSETS+189\n2016-02-05 19:42:46.102 [7382] 1/spawner I> Exiting: master shutdown\nGDB\nCore was generated by `tarantool_box: primary@fluor pri: 33016 sec: 33017 adm: 33018 rpl: 4301'.\nProgram terminated with signal 6, Aborted.\n0  0x00007efff387c625 in raise () from /lib64/libc.so.6\nMissing separate debuginfos, use: debuginfo-install tarantool-1.5.5-20.x86_64\n(gdb)\n(gdb) bt full\n0  0x00007efff387c625 in raise () from /lib64/libc.so.6\nNo symbol table info available.\n1  0x00007efff387de05 in abort () from /lib64/libc.so.6\nNo symbol table info available.\n2  0x000000000043db3c in sig_fatal_cb (signo=Unhandled dwarf expression opcode 0xf3\n) at /builddir/build/BUILD/tarantool-1.5.5-20-g91ba70b-src/src/tarantool.cc:467\n        in_cb = 1\n        sa = {__sigaction_handler = {sa_handler = 0, sa_sigaction = 0}, sa_mask = {__val = {0 }}, sa_flags = 0, sa_restorer = 0}\n3  \nNo symbol table info available.\n4  0x0000000000475e33 in lj_tab_newkey ()\nNo symbol table info available.\n5  0x000000000048eddc in lj_BC_TSETS ()\nNo symbol table info available.\n6  0x0000000000433780 in box_lua_execute (request=0x7efc093fe060, port=0x7efc09415ee0) at /builddir/build/BUILD/tarantool-1.5.5-20-g91ba70b-src/src/box/box_lua.cc:1366\n    scoped_guard = {m_fun = {__coro_ref = 48}, m_active = true}\n    nargs = 4\n    field_len = <value optimized out>\n    reqpos = 0x7efc093fe068\n    reqend = 0x7efc17357062 \"<personal data>\\001R\\002\\063\\065Lya29.fwIMWa8Mz4xxSr__CB_KuaU5ZibI_ajYs_4F3mCQ51M2S4guan17N2tVidibW0u6R2Y3yE0\\004\"\n    L = 0x407c1870\n    coro_ref = 48\n\n7  0x000000000042e528 in request_execute (request=0x7efc093fe060, txn=0x7efc093fe038, port=0x7efc09415ee0) at /builddir/build/BUILD/tarantool-1.5.5-20-g91ba70b-src/src/box/request.cc:263\nNo locals.\n8  0x000000000042f4f7 in process_rw (port=0x7efc09415ee0, op=22, reqdata=Unhandled dwarf expression opcode 0xf3\n) at /builddir/build/BUILD/tarantool-1.5.5-20-g91ba70b-src/src/box/box.cc:88\n        request = 0x7efc093fe060\n        txn = 0x7efc093fe038\n9  0x000000000045c128 in iproto_reply (request=Unhandled dwarf expression opcode 0xf3\n) at /builddir/build/BUILD/tarantool-1.5.5-20-g91ba70b-src/src/iproto.cc:662\n        body = 0x7efc17357044 \"\"\n10 iproto_process_request (request=Unhandled dwarf expression opcode 0xf3\n) at /builddir/build/BUILD/tarantool-1.5.5-20-g91ba70b-src/src/iproto.cc:687\n        iobuf = 0x7efc1e451240\n        session = 0x7efc1e450e48\n        header = 0x7efc17357038\n        port = {vtab = 0x7d9710, buf = 0x7efc1e451270, reply = {hdr = {msg_code = 22, len = 30, sync = 505012131}, ret_code = 0, found = 0}, svp = {pos = 0, iov_len = 0, size = 0}}\n        scope_guard = {m_fun = {__iobuf = 0x7efc1e451240, __header = 0x7efc17357038, __session = 0x7efc1e450e48}, m_active = true}\n11 0x000000000045bbf1 in iproto_queue_handler(typedef __va_list_tag __va_list_tag _) (ap=Unhandled dwarf expression opcode 0xf3\n) at /builddir/build/BUILD/tarantool-1.5.5-20-g91ba70b-src/src/iproto.cc:234\n        i_queue = 0x7edc40\n        request = {session = 0x7efc1e450e48, iobuf = 0x7efc1e451240, header = 0x7efc17357038, process = 0x45c0a0 }\n12 0x000000000044bb40 in fiber_loop (data=Unhandled dwarf expression opcode 0xf3\n) at /builddir/build/BUILD/tarantool-1.5.5-20-g91ba70b-src/src/fiber.cc:388\nNo locals.\n13 0x000000000046f007 in coro_init () at /builddir/build/BUILD/tarantool-1.5.5-20-g91ba70b-src/third_party/coro/coro.c:95\n    func = <error reading variable func (Cannot access memory at address 0xffffffffffffffd8)>\n    arg = 0x0\n\n. Only security fixes in 1.5.\n. Add clock_gettime() (optional) before switching to another fiber.\n. This task is obsolete with new IPC: wait_closed() is unnecessary, since the channel is closed without a wait now. wait_empty() is unnecessary, since 0-buffer channels ensure synchronous delivery, and wait_emtpy() is essentially a way to wait for a message to get delivered.\n. This is indeed the case, but it's hard to be smarter in this case: as long as there are no xlogs, we don't know maybe this master has no xlogs for this replica, and the replica may get xlogs from some other master, so it should hang.\n. Won't fix before we get multi-master.\n. @rtsisyk , @kostja\n. Fixed.\n. Removed in 1.6.6\n. Only security fixes in 1.5.\n. How I believe we should fix it:\n- use Tarantool memory allocation in LuaJIT\n- have a dedicated pool of set-aside allocator pages, the \"gray\" zone.\n- fail early when we're going to require memory for __gc and there is no memory available apart from the one set aside.\n. Pushed into master.\n. Pushed into 1.6.7\n. Since it's no longer infinite, closing.\n. See gh-853, I wrote an incorrect commit message and the patch went to a different bug.\n. I can see that linenoise has 25 open issues and 32 pull requests, and no one seems to be working on them. It's also unclear whether it supports national alphabets and character sets properly (check out stackoverflow comments and google for crash japanese linenoise). On FreeBSD we already use libedit in readline compatibility mode (thanks to @zloidemon for his patch for #747). \nSo I think it's a non-issue.\n. This is done.. Dup of gh-446\n. Don't know, but fetching a global variable in every response will make it very hot. \n. I think that now we need to restrict things to the following:\n- use sc-version coounter, which is volatile (non-persistent)\n- check and reply with the current sc-version only if sc-version field is present in the request\n. Pushed. \nSee also:\n- gh-1157 persistent schema id \n- gh-1158 sc_schema_id in sharding\n. Thank you for your pull request, this problem has been fixed in the master branch.\n. Superseded by gh-1270, gh-1271\n. - Roman Tsisyk notifications@github.com [15/06/08 22:59]:\nThis is not a leak. The memory is freed at txn commit.\n\nhttp://tarantool.org - a NoSQL database in a Lua script\n. Roman, 1.5 is frozen for features. \n. This is by design,  users and roles share the namespace\n. Apparently ppl began to use info() method, let's fix it.\n. Ok to push\n. Yes.\n. Renamed module from 'time' to 'clock' \n. I took it on board. require('strict').on() require('strict').off() to turn on/off. on() by default if compiled in Debug  mode.\n. I fixed it in 2d266be4bd792140a13305c3a5e7cfe516908ae3\n. (@unera is right)\n. 1. Use error injection for the test case (see errinj.test.lua)\n2. Please add a fix.\n. I found and fixed it in the recent branch.\n. Pushed\n. This isn't a hang, this is 100% cpu hog by yaml emitter. Perhaps it doesn't matter to you, but it matters if one wants to fix the bug, so what's the statement on which this hung for you?\n. Nobody cares -> won't fix.. OpenMP threads are evil because they make poor man's profiler tools difficult (pstack prints too many dead threads's stack traces).\n. Won't fix.\n. This is no longer relevant, it was needed mainly for angel process - now taken care by systemd.. - Roman Tsisyk notifications@github.com [15/07/01 16:18]:\nI did something similar for format() of strings AFAIR.\n\nhttp://tarantool.org - a NoSQL database in a Lua script\n. This goes to the master branch.\n. Pushed.\n. Sorry, this is a  known issue of 1.5, this is why in 1.6 we switched to a single-port approach, the default port being 3301, so below the incoming port range. \nWe will not fix this issue in 1.5.\n. Pushed.\n. Obsolete.. A duplicate of gh-916\n. Implementation details:\nupsert should be implemented in the same module as 'tuple_update', and, preferrably, using the same \"ops\" objects (but a different top-level executioner perhaps).\n. Alex, you will need to patch tuple_update() and provide implementation in memtx.\n. Pushed. See gh-966 for QA issues still pending.\n. Sounds good to me. I would, however, also add flush(), which flushes a\nfunction but doesn't load it.\n18 \u0434\u0435\u043a. 2015 \u0433. 8:47 PM \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"Nick Zavaritsky\" \nnotifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\nProposed API\nbox.schema.func.reload('package.function') \u2014> true, nil\n                                           \u2014> false, 'Error message'\nReload a shared library implementing the particular stored function. If\nthe function is implemented in Lua, reports success and does nothing.\nOther stored C functions from the same binary are implicitly reloaded as\nwell.\nReload unloads the currently loaded instance of the shared library\nfirst. If reload fails, future calls to the affected stored C functions\nmay fail as well.\nReload will fail if a library was loaded for other reasons rather than\nproviding an implementation for a Tarantool C stored function. (Ex: loaded\nin Lua script with ffi.load.)\nbox.schema.function.reload('package')\nReload entire package contents.\nbox.schema.function.reload()\nReload everything.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/910#issuecomment-165851016\n.\n. Peter, I believe this is done?\n. I'm closing this then, I don't want bugs hanging around forever until an indefinite moment.\n. Pushed sophia-integration.\n. Nobody cares -> won't fix.. We did a docker image, this should be more than sufficient.\n. This is done, in https://github.com/tarantool/doc/pull/192. This is http://tarantool.io\n. Didn't get any traction.. Could you please paste the backtrace here?\n. Thank you for your time, confirmed.\n. This is available in the C API, which should be used for performance-critical cases, so won't fix.\n. We need to bind libproctitle to Lua\n. This is done now on the script level, since proc title can be changed from Lua script, so one can export this manually with requier('title').set_custum(string)\n. Superseded by gh-1296\n. This is legacy from 1.5, we kept it this way since it was this way in 1.5. Scheduling for 1.7, where we are going to introduce consistent read views, so there will be changes in iteration api anyway.\n. Nobody cares -> won't fix. I think SQL makes the entire problem of using iterators from Lua obsolete.. Is this done?\n. Nobody cares -> won't fix.. Thank you for your patch, I pushed it into 1.6.6.\n. How to fix this bug:\n\nFirst of all, all DDL internally should use admin_credentials to avoid \"access denied\" errors when working with system spaces. Requiring explicit grants on system spaces was a poor man solution to fully fledged ACL implementation we should do now.\nWhile deploying admin_credentials, we should be careful to avoid privilege escalation wherever possible. I.e. it should be only possible to enforce admin_credentials in C code.\nSecond, we should introduce explicit ACL for all DDL statements. Not all ACL are meaningful for all objects, so we need to agree on a range of ACL we introduce. We should check with sqlite and SQL \nstandard, when deciding on the list of ACL:\nLegend: currently we have READ, WRITE, EXECUTE with the following meaning:\n\nREAD - read an object. If the object is a space, read data from any index. If the object is a universe, read from any space.\nWRITE - write data to an object. If an object is a space, write rows/update the space. If the object is a universe, modify any space in the universe\nEXECUTE - execute an object. Applicable to stored procedures/functions only. If the object is a universe, then execute any function in the universe.\n\nAdditionally, in the standard SQL, there are separate ACLs for INSERT, SELECT, UPDATE, DELETE. We should add them right away.\nOff the top of my head we need the following ACLs in addition to the existing ones:\n\nCREATE: create an object. If an object is a function or space, then create that space. If an object is UNIVERSE, then create any object in the universe\nDROP: drop an objet. If an object is a function or space, then drop that object. If an object is universe, then drop any object in the universe (except the system spaces of course, the suicide should be available to the superuser only).\nALTER: modify object metadata. E.g. modify space metadata - create indexes. As usual, for universe, implies modification of any object metadata.\n\nWe should scout other products to check whether they have useful general purpose privileges, but I don't think we need to many - this makes the system complicated. 7 kinds of actions should be enough. If not 7, then perhaps 11. But not more :)\nThis is patch 1 of the 3 in the patch set: its goal is to extend the list of ACLs and fix access_check_ddl() to use the new ACLs instead of the clutch it uses right now.\nStep 2 is implementing CREATE privilege properly.\nTo do it, we should change the grant implementation to maintain its own object cache, and not rely on space and func cache. This is necessary for CREATE to function properly - we should be able to find existence of create privilege while there is no object created yet. Alternatively, we should maintain only CREATE priivlege object cache, and keep privileges of created objects within these objects as before. The function to patch is access_find().\nStep 3 is implementing GRANT OPTION\nGRANT OPTION allows the owner of a privilege to grant it to another owner. GRANT OPTION is not a privilege, it is a property of a granted privilege. It should not be part of ACL. To implement GRANT OPTION we should extend _priv system space to reflect the option in it. As usual, the option goes as a yet another field in the space. If the tuple has no field, then it has no option, this is how we keep things backward compatible. We of course patch the upgrade script to explicitly add mp_nil to all old tuples in _priv system space, and patch the snapshots accordingly.\nPlease note that in Tarantool there is a 2-level model of objects: there is UNIVERSE and there are objects in the universe. This is why there are no separate ACLs for indexes or triggers: index or trigger names are local to a table name, so they are affected by the privileges on the table, and do not have their own ACLs.\nPS We should decide what privilege TRUNCATE requires - DROP or WRITE. In MySQL it requires DROP. In PostgreSQL there is an explicit TRUNCATE privilege (what's the point somebody needs to explain to me?). In Oracle, to truncate a table, the table must be in your schema or you must have DROP ANY TABLE system privilege. I thin we should be fine with DELETE.. This is done.. Fixed in 1.6.6-39\n. The patch is merged into 1.6.6 (1.6 branch)\n. The master is heavily used in production and featue frozen. 1.6.6 will\nmature in a couple of months.\nOn Aug 1, 2015 1:55 PM, \"Sokolov Yura\" notifications@github.com wrote:\n\nWhat with master? will it be solved in other way? or some other decision\nwill be chosen about updating by secondary index?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/pull/948#issuecomment-126899085.\n. Please check our google group for new release announcements: https://groups.google.com/forum/#!searchin/tarantool/released  they are all posted there.\n\nWe used to maintain a version history here: \nhttps://github.com/tarantool/tarantool/wiki/ChangeLog but stopped down that a while ago.\n. Alex, the problem of this bug is that index arena and tuple arenas are separate, and don't share slab caches. Thus, when you free data slabs, they can't be reused by index. The patch which implements a fix is on branch snapshot-crash. As you can see from the name, it crashes snapshot.test. Please find & fix the crash, and push the patch.\nThanks!\n. See gh-955 for fio.abspath(), the rest is already implemented in package 'fio'.\nThank you for your feature request.\n. @alyapunov , you fixed it in 1.6.6, and I finished up, but still needs a test case. \n. Mons, the idea is that you don't have to deal with cluster id in the config, it's an internal id. You can replace it by replacing the contents of _cluster table. Your problem should be solved by the new replication format with identical configs.\n. This is done.. This should work now. Please add a test case and close the bug.. Still repeatable :(. Not seeing a test for an attempt to modify the primary key in upsert.\n. Done. \n. I fixed it in a recent push, the problem was with old cmake.\n. @rtsisyk, @kostja - code review\n. This is Lua arithmetics. The result is represented as double, and you get a rounding error. \nTry -1ULL\n```\ntarantool> math.pow(2, 64)-1ULL\n\n\n18446744073709551615\n...\n```\n. We will not fix this,  sorry.\nOn Aug 17, 2015 5:17 AM, \"Alexander Golovko\" notifications@github.com\nwrote:\n\n\ntarantool> c = require('net.box'):new( '10.0.0.10', 3301)\ntarantool: Can't load schema: builtin/net.box.lua:856: attempt to perform\narithmetic on a table value\nnet.box from 1.6.6 can work with both 1.6.5 and 1.6.6\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/982.\n. The cause of this is not the version of net.box, but the version of the data dictionary. It should not be a problem during upgrade, since during upgrade the structure (schema) of the data dictionary will stay the same (1.6.5 format), so net.box from 1.6.5 will be able to work with 1.6.6 as long as 1.6.6 is running over the old format of the snapshot.\n. Thank you for the test case!\n. Why not use:\nbox.schema.user.grant('guest', 'read,write,execute', 'universe', '', {if_not_exists=true})\n. Thank you for a bug report and a test case. Fixed in 1.6.6-63\n. OK to push\n. Haven't seen this for a while.\n. @mejedi, please review and accet the patch if it's correct (or actually it can be unnecessary  subject to your last refactoring, so it's safe to close after it's pushed).\n. @kostja, @rtsisyk \n. @kostja, @rtsisyk \n. The idea of this ticket is that now, when master sends its vclock in response to SUBSCRIBE, box_init_done should not be set to true until applier reached the position of the master in the xlog it received and applied. In other words, the slave should at least fetch stuff that's accumulated on the master since it was off before it enters read-write mode.\n\nThe code to look at: applier_connect, look for  premature applier_set_state() (right after we've authenticated).. This is done while working on UCP prototype.\n. Pushed.\n. Pushed the partial fix, more tickets shall be opened when we have upsert QA done.\n. I can do box.space._index:insert{}, bypassing box.schema, and crash the server or get a silly error message. \nYour fix breaks encapsulation, all interaction with engine is done via engine API. For example, each alter calls handler->onAlter, which you can just throw from. Or you can add another hook into alter_space_do(), in which you will throw.\n. Now, how to measure: the test case above does not regress, there is even a small improvement. But once you add this:\nlocal t = box.tuple.new(i, string_value)\nand use \nbox.space.tester:replace(t)\nYou can observe the regression.\n. Pushed into 1.6.7\n. Pushed to 1.6.7.\n. This works as intended. If your expectation is that a directory is created automatically if it does not exist, you should use tarantoolctl.\nThe behaviour is identical btw to a non-existent work_dir.\n. Pushed.\n. Pushed.\n. This has been fixed differently by @mejedi \n. kostja@atlas ~ % sudo pip install --upgrade breathe\nRequirement already up-to-date: breathe in /usr/local/lib/python2.7/dist-packages\nRequirement already up-to-date: Sphinx>=1.0.7 in /usr/local/lib/python2.7/dist-packages (from breathe)\nRequirement already up-to-date: docutils>=0.5 in /usr/local/lib/python2.7/dist-packages (from breathe)\nRequirement already up-to-date: six>=1.4 in /usr/local/lib/python2.7/dist-packages (from breathe)\n. We fixed this differently in the end in our LuaJIT branch.. See also gh-751\n. I think we need to add subscriptions/out of bound commands to iproto, and implement websockets in nginx-upstream-module on top of that.\n. Moved to a separate project, see the link above.\n. Eugene, let's discuss this, I wonder why the errors are so numerous - is it a conversion error or something that was introduced later by Peter's changes? In any case if you can fix this it would be great.\n. Obsolete.. This is a duplicate of an older issue - gh-818\n. C API: box_txn()\nLua: not public, part of box.internal\n. Same reason fiber.wakeup()is not public. It should not be possible to access txn object explicity.\nOn Sep 21, 2015 6:27 PM, \"Roman Tsisyk\" notifications@github.com wrote:\n\nWhy this API is not public Lua?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1039#issuecomment-142015198\n.\n. This is works as intended. Duplicate key errors stop replication. It must be restarted again after an error like that.\n. Roman, the complaint about a bad error message is valid.\n. This is ok, but the error message should be fixed.\n. I disagree it's got to be a copy paste, but I agree sysengine should provide own, user friendly implementations for these functions.\n. - Roman Tsisyk notifications@github.com [15/12/21 12:26]:\nI don't want to copy a half of class Index just to fix the\nsingle error message.  I suggest to close this ticket as non\nimportant.... \n\nPlease copy for now. Being user friendly is important and if you have to\nwrite a lot of code for it it's the problem of the design not of\nthe user.\n. Another request coming from another corporate deployment.\n. Duplicate of gh-2283. Duplicate of gh-2283. We added transaction boundaries, and a test case will soon follow, closing.\n. Please open issues in  respective projects for eio and sophia\n. Duplicate of gh-2467. - Roman Tsisyk notifications@github.com [15/09/22 13:42]:\n\nA simple fix from bsync:\n```\n+bool\n replication_join(int fd, struct xrow_header _packet,\n                 void (_on_join)(const struct tt_uuid *))\n {\n    struct tt_uuid server_uuid = uuid_nil;\n    xrow_decode_join(packet, &server_uuid);\n\n\nif (tt_uuid_is_equal(&server_uuid, &recovery->server_uuid))\ntnt_raise(ClientError, ER_SERVER_ID_IS_LOCAL);\n\n\nOK to push.\n\nhttp://tarantool.org - a NoSQL database in a Lua script\n. Roman, please close if this is fixed in applier-wait-connection.\n. This is done.\n. We fixed this on a custom branch.\n. Irrelevant.. Please follow https://github.com/tarantool/tarantool-php/issues/46 instead.\n. Eugene, I believe you have fixed this today, if so, please close the bug.\n. This is probably not necessary in the new bsync arch.\n. We don't need this any more.. Roman, I believe replication acks supersedes this ticket, moving to 1.7.5 to close along.. Fixed in 1.6.7\n. Not reproducible in any of the recent build, asuming the current code is coping with it alright.\n. I disallowed upsert via a unique secondary key.\n. http://docs.travis-ci.com/user/osx-ci-environment/\nhttp://docs.travis-ci.com/user/multi-os/\n. - Andrew notifications@github.com [15/10/15 18:59]:\n\nTarantool build config updated with multi os support(linux, os x), pushed to gh-1073 branch and rebased https://github.com/tarantool/tarantool/commit/d65d30b219989f395335ae8bc403429d92f4a861\n\nOK to push.\n\nhttp://tarantool.org - a NoSQL database in a Lua script\n. This should be fixed by now. Please add a test.\n. Dmitry, if there was a test, it would break. If there is no test, and it breaks in Sophia only, it's an integration issue. If sophia threads are unaware of fibers, why do they use our exceptions? If they use our exceptions, can they use our cords?\n. - Nick Zavaritsky notifications@github.com [15/10/04 15:13]:\n\nConverting it to a libev signal watcher makes sense.\n(Pro: no restrictions on the code, Cons: processing delayed if\nevent loop is busy) \n\nWhat's wrong with?\nNo, converting it to libev is not a good idea, it should work \neven in a busy loop.\n\nhttp://tarantool.org - a NoSQL database in a Lua script\n. The size is now dependent on checkpoint count. . Since we're running multiple instances on a single partition, we should avoid limiting the total wal size of a single instance - some instances may be more heavily used than others. Instead, we could watch the total amount of free space on the wal partition and trigger a snapshot whenever we're running out of space. \nOnce a snapshot is triggered, it may or may not help - i.e. it may actually increate the total amount of space, not decrease it. . This was an atexit() problem fixed in scope of gh-726\n. An inconsistency is a bug.\n. http://github.com/tarantool/mqtt\n. Sorry, we will not fix, only security fixes will go into 1.5 from now on.\n. Affects another user, increasing priority.\nHow to fix: \n- for libev, initialize the pipe descriptor conservatively in cord_start, and exit the cord with error on error\n- for WAL, enter read-only mode, infinitely trying to rotate the WAL\n- for snapshot, exit snapshot thread with error\n. This is done (a contribution from the community).\n. It turns out the leak was in the integration layer on a custom branch (never part of any of the mainstream branches).\n. We can close the iterator automatically when the end is reached, this way we don't need an explicit method.\n. This is actually a dup of https://github.com/tarantool/tarantool/issues/1126\n. I fixed this in 1.7 with a cap on the number of requests in the input pipe for the transaction processor, please retest.\n. Should be solved after the last rebase.\n. Too old with no feedback.\n. We will release 1.6 soon and this problem will go away, since we already keep all builds in 1.6 branch.\n. Yes, it does. Is it an issue? This code is used for malformed update, we need to perhaps introduce a separate one..\n. Please provide an example how you would be able to rewrite net.box given you have this generealization.\n. Closing this as a duplicate of gh-1114, which is an earlier report of the same issue.\n. Affects Avito. Up.\n. The last patch is OK to push.\n. - Roman Tsisyk notifications@github.com [16/01/07 15:47]:\n\n@kostja this feature should go to 1.7, otherwise we will break box.cfg {}.\n\njust by having the binding we will not break anything. \npeople can use it at their own risk.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Pushed into 1.7.0 branch.\n. Fixed in 1.6.6-284-g02f6aa4\nShould be available in the next build.\n. The solution is simple - throw ClientError ER_OUTOFMEMORY in both cases, for this purpose use a box wrapper around raw matras API, similar to tuple_alloc().\n. This is a duplicate of a fixed bug gh-1057\n. @rtsisyk , @bigbes: Please do not hijack the ticket to discuss a different development tangent.\n@rushba , I presume the code provided by @bigbes works correctly without crashes? I am closing the ticket, please feel free to reopen if the code doesn't work. As @rtsisyk and @bigbes correctly note, it's not a good idea for us to take on board a partial binding for one of the UNIX system calls, we should look into a more systematic set of bindings. But we're always happy to provide support, so I hope you will have your issue resolved.\n. Roman, please attach the test case you created to this ticket and close the bug.\n. There was even a patch for it. Nobody asked for it though. Won't fix.. Nobody cares -> won't fix.. Sorry, I thought that some errors are formatted and others are not. Apparently it's just the table of contents which is highlighted and clickable.\n. This could also be a very good performance boost.\n. After a quick look this doesn't seem to be either easy to implement or maintain.\n. Roman, I have no clue how to do it. And I have no idea why this is a bug.\n. I'm closing this since, given the tests, we're more likely to run out of finalizers first.\n. We currently don't have any compression particularly suitable for time series. Otherwise we're just as good as any other database. \nPlease reopen this ticket if you have a more specific request.\nYou're welcome to sponsor the features you need in the product.\n. Ugh, a raw parameter string looks ugly. No syntax checks, dynamic/static checks, every engine has to invent their own way to handle defaults. Why not use a Lua table with options.\n. Upgrading to get features is what you normally have to do, yes.\n. I never doubted mongo\n10 \u0434\u0435\u043a. 2015 \u0433. 4:10 PM \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"kadavros\" notifications@github.com\n\u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\nBtw, MondoDB implements this feature the same way for WiredTiger engine\ntuning: just by transferring raw option string to the engine itself. The\nonly alternative is to duplicate them all and somehow to keep up with new\noptions, which is painful.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1188#issuecomment-163610100\n.\n. In MongoDB, storage_engine= spec can be a document, here's the link: \nhttps://docs.mongodb.org/manual/reference/method/db.createCollection/\n. Peter, I assume you realize that it should be : not .\n. Closing until a customer request.\n. MADV_DONTDUMP is too fresh;\nInstead of MADV_DONTFORK, we use MMAP_SHARED.\nMADV_NOHUGEPAGE is good for 1.5 only, where we should avoid huge pages for performance reasons.\nReclassifying this as an 1.5 issue, and a one liner at that.\n. Eugene, please add MADV_NOHUGEPAGES to the alloc in 1.5 to avoid performance issues in production.\nShould be a one liner change here:\nhttps://github.com/tarantool/tarantool/blob/stable/src/salloc.cc#L172\n. Nice feature, but will not happen in 1.5, and is irrelevant in 1.6+\n. See https://github.com/tarantool/tarantool/issues/750\n. Nobody cares -> won't fix.. - Nick Zavaritsky notifications@github.com [15/12/23 14:37]:\n\nThis is excellent, please push into 1.6.8\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. - Nick Zavaritsky notifications@github.com [15/12/24 15:20]:\n\n* Adding tuple size to gc.total counter on every addref from Lua is probably incorrect \u2014 we are accounting for the same tuple multiple times;\n* may result in gc.total overflowing.\n\nwhy not do it once per tuple? 'cause we don't know if this tuple\nis used in lua or not? \n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. This plan is not relevant any more.. Th.open should behave just like plain UNIX open: if the third paramete is omitted, the file is created in 777 & umask mode. This should be a one line fix, please just close it.\n. - Nick Zavaritsky notifications@github.com [16/03/23 21:32]:\n\n* fio.open, fio.mkdir and fio.chmod gets a mode, but only\n the first one implements symbolic modes, e.g.\n fio.open('pathname', { 'O_RDWR' }, { 'S_IXUSR', 'S_IWUSR' }\n );\n\nMaybe, when someone wants this feature.\n\n\nthe later style feels awkward, probably we can design a\n  better one? draw inspiration from other Lua libraries;\n\n\nDitto. Upon user request.\n\n\nmode parameter in fio.open and fio.mkdir not documented.\n\n\nPlease file a separate documentation request.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Superseded by deploying msgpack format.\n. Add a unit test and close this please.\n. Just do it.\n. There are other easy ways to crash LuaJIT or Tarantool. How is this relevant to users?\n. Reload was renamed to eval. I don't think this idea makes any sense after the rename. Why not flush package.loaded inside the loaded code?\n. - Roman Tsisyk notifications@github.com [15/12/30 23:33]:\nOK, but don't log FiberIsCancelled please, I tried to remove\nlogging of this error, and apparently killed all logging.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Diff:\n1242.txt\n. Please push to master.\n. Menawhile there is a workaround: you could use numactl to pin every tarantool instance to a particular numa node, this would solve the problem in all known cases. . Hi, we're happy to provide porting help. An ideal start would be giving us access to the box/vm you're using. \nPlease keep in mind that a single time effort is not sufficient, we need to include this distro into our build system to keep it up to date. \nCan I run Alpine Linux in Travis? \n. LuaJIT does the same:\n% ./luajit --help\nusage: ./luajit [options]... [script [args]...].\nAvailable options are:\n  -e chunk  Execute string 'chunk'.\n  -l name   Require library 'name'.\n  -b ...    Save or list bytecode.\n  -j cmd    Perform LuaJIT control command.\n  -O[opt]   Control LuaJIT optimizations.\n  -i        Enter interactive mode after executing 'script'.\n  -v        Show version information.\n  -E        Ignore environment variables.\n  --        Stop handling options.\n  -         Execute stdin and stop handling options.\nkostja@atlas ~/work/tarantool/third_party/luajit/src\nWe should at least support the common options of Lua and LuaJIT.\n. - Roman Tsisyk notifications@github.com [16/04/01 18:04]:\n\nHow the system should decide that server_id is not used anymore?\n\nUpdate _cluster table on every connect incoming or outgoing\nconnect. Remove the server id which has the oldest update time.\n\n. Done.. This is done to some extent, taking a pause now until extra funds are secured.\n. ok\n. What section of the manual do you want changed and in what way?\nWe already document NULL in many relevant places. \nhttp://tarantool.org/doc/search.html?q=null&check_keywords=yes&area=default\n. - Nick Zavaritsky notifications@github.com [16/01/29 14:07]:\n\nWe should accept nil timeouts as well (nil==none, infinite timeout). Comes in handy when you write a function, accepting an optional timeout and passing it further to a channel function, eg:\nlua\nfunction my_get(channel, optional_timeout)\n    -- do things\n    -- ...\n    channel:get(channel, optional_timeout)\nend \n\nnil != infinity!\nnil is nil; nowhere in tarantool nil means infinity; it's a common\ndesign principle\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. ok\n. Please re-open when the bug manifests again.\n. Thank you for your report. We will take a look at it. You should keep in mind that every update creates a copy of tuple in Tarantool, so, even though we allow larger slab_alloc_maximal settings, this is not a good design pattern with Tarantool in general. Are you sure you your data model needs tuples so large?\n. Hi, we've moved all our packaging & CI to travis + packagecloud. Do you know any cloud continuous integration service which has support for arm platform? We have our own buildbot infrastructure, but plan to phase it out. Running arm builds & tests in travis + qemu is a pain - it takes too much time.\n. Hi, thanks for the issue and the pull request, merged.\n. (Done as much as this rock is working)\n. This is done.. I accept this is inconsistent, what's your specific request? We can easily make package box.schema.function an alias for package box.schema.func. If this is what you want, please do in 1.6, otherwise close the bug.\n. openssl.txt\n. Hi, \ndo you have a core file? \n. \u0412\u0438\u0434\u0438\u043c\u043e, \u0435\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435 \u043a\u0430\u043a \u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c, \u0442\u043e \u0435\u0433\u043e \u0443\u0436\u0435 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f?\nPS \u041f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 core file, \u043d\u0430\u0447\u0430\u0442\u044c \u0441 ulimit -c unlimited\n. @gpryor, if you have core files or unique traces or a way to reproduce, please file a bug. Especially with sophia.\n. \u0421\u0431\u0440\u043e\u0441\u044c\u0442\u0435 \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430 \u043d\u0430 \u043f\u043e\u0447\u0442\u0443 support  \u0432 \u0434\u043e\u043c\u0435\u043d\u0435 tarantool dot org \u0441\u0432\u043e\u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u044b, \u0431\u0443\u0434\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u043e \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0443 \u0438\u043b\u0438 \u043f\u043e \u0441\u043a\u0430\u0439\u043f.\n. No feedback for more than a month. Please feel free to reopen the bug if it re-occurs.\n. Roman, I fail to see where we violate this licence. We don't distribute OpenSSL. In any case our bug tracker is not an appropriate forum for this sort of requests since licensing is generally badly understood and tickets like that create FUD (fear, uncertainty, doubt).\n. Pushed into 1.6 branch\n. I do. There is no gdb if there is no core file.\n1 \u0430\u043f\u0440. 2016 \u0433. 5:41 PM \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"Roman Tsisyk\" notifications@github.com\n\u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\n@kostja https://github.com/kostja who need this feature? Why it was\nscheduled for 1.6.x?\nI don't think that we should re-invent GDB. Please convert to \"raw idea\"\nand/or 1.8.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1325#issuecomment-204421873\n. This is done by Ivan Kosenko. Roman, this is a regression you introduced by changing tarantoolctl and sysconfig files to .in files, please fix ASAP.\n. Done.. Sorry, this is not an appropriate forum for general complaints. If you have a specific enhancement request, or a bug report, please don't hesitate to open a separate ticket.\n. Fixed in 1.6.8\n. No feedback for over a month. Please feel free to reopen if new data is collected.\n. Moved to a different tracker.. Can't reproduce:\n % ./tarantool \nTarantool 1.7.6-73-g51d56f8\ntype 'help' for interactive help\ntarantool> string.rep('x', 1024 * 1024 * 1024)\n\n\n\nerror: not enough memory\n...\n. Won't fix.\n. This is done.. Done by Peter.\n. We're not using libeio ./configure and you shouldn't either. What exactly are you trying to do?\nPlease see https://github.com/tarantool/tarantool/blob/1.6/cmake/BuildLibEIO.cmake for our libeio build.\n. Here's a discussion of the new option: \n\nhttps://groups.google.com/d/msg/tarantool/ZtL6fI7TZ0M/735fT32nBQAJ\nPlease check out the tests as well: \nhttps://github.com/tarantool/tarantool/blob/1.6/test/replication-py/multi.test.py#L44\n. I see that LuaVkApi uses https.lua in a single place in this file, would it be possible to use our http.client.request instead? \nhttps://github.com/tarantool/http/blob/master/http/client.lua#L24\n. - Evgeny Sureev notifications@github.com [16/03/11 15:53]:\n\nRewrited luaVKApi using tarantool's http module, like @kostja said.\n\nNice, could you fork it into our org or at least give me a link\nI'll tweet it? \nWe can also add it to our rocks repository at rocks.tarantool.org\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. This is done.. Hi, this bug is closed, could you please file a separate feature request?\n. Original patch: gh-1385-tuple-id-original.txt\nPatch rebased to 1.7: gh-1385-tuple-id.txt\n. We will not do this in the near future, since we integrated sophia for which it was necessary.. We'll just try to open the file and if it's dead, remove it. \n. I rebased the patch. I agree we need to pass the return value from the called fiber to fiber.join. For this purpose, we need to capture child_L lua state somewhere, perhaps in a fiber key. The patch should not duplicate fiber_recycle(), and call fiber_join() instead. . Roman, I thought it's easy to do so we could just do it.\n. Now that I think of it, no, it doesn't. We expect a tuple, not a key, and in no context in which we expect a tuple we accept a scalar. So I think we should stress the difference in the docs, rather than accept a scalar. If we do accept a scalar in this context, we may be tempted to add this feature to other places which now expect a tuple and fail on a simple scalar.\nPeter, please explain in the docs why we don't accept a scalar in this context.\n. - agent-0007 notifications@github.com [16/03/24 12:20]:\n\nMy tarantool was installed from epel. If i run yum update it will become 1.6.8 ?\nOr i need build by hands from branch master?\n\nThere is no branch master any more. yum update should be ok.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. - bigbes notifications@github.com [16/03/24 16:08]:\n\nI can't run YCSB because of this bug\n\nMaybe you could fix it?\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. It doesn't ignore it, it overrides it with the setting from /etc/sysconfig/default/tarantool\n. Roman, it's not an issue of absolute paths, it's an issue that work_dir is taken from /etc/sysconfig/default.\n. Done with the new Docker container implementation.\n. Peter, George fixed the 'file already exists' message, but the timed out message is in a pretty generic place which would be difficult to remove for this specific case.\n. I don't know why we should do this at all. Let's not spend time on this.. The logic of this error is that there is a checkpoint inside Sophia engine, which still exists even after you delete the snapshot file, which represents a checkpoint of the memtx engine.\nI agree this is not good design, and will check with Dmitry what can be done about it. We're changing the way sophia checkpointing works in 1.7. Does this problem affect production use? If not, it'll be fixed in 1.7 only.\n. Fixed in 1.6.8-618-g39df8a9\n. Pushed.\n. Duplicate of gh-85. I think a separate mechanism for suspended connections is not justified. Please simply ignore the quota if the connection has no chances of being woken up eventually. \nThank you for working on this.\n. Pushed.\n. Veniamin, could you please add the readme and assign this bug to @lenkis afterwards? We need to make your rock a proper citizen, there is an external demand for it.\n. Nobody seems to be wanting this, closing as won't fix.. Fixed in 1.7-1014\n. Done.\n. Repeatable in 1.6 and 1.7\n. Please re-check, my last patch should fix it.\n. This is a raw idea. The problem is alleviated by multi-level compaction. . Reopening after an explicit request from a user in the mailing list.. There is nothing left to do on this ticket.. Roman, I believe you fixed this, true?\n. Please check with bigbes what else needs to be done and close.\n. Haven't we done it?\n. - Peter Gulutzan notifications@github.com [16/07/13 19:17]:\n\nNow in version 1.7 ^D stops both server in interactive mode, and\ntarantoolctl connect. I see that ^C does the same thing, its\nbehaviour is unchanged. I'll assume this is intentional,\nalthough it doesn't exactly match the issue description.\n\nOops. We didn't fix this bug, nothing should have changed from\n1.6.\n\n. We do have tarantool/http for a server.. Fixed in the latest stable branch.\n. Done.\n. Update done, compression is now part of xlog infrastructure and has been removed from vinyl.\n. A decent reference was created when Eugene moved the docs to a separate repo.\n. Not relevant any more.. Partially in progress, partially done.\n. I removed this assert.\n. - Roman Tsisyk notifications@github.com [16/06/22 13:05]:\n\n4) NUMBER field type for HASH index\nIEEE 754 floating point values are senseless for HASH index. Exact comparison of two floats is always bad idea. Moreover, it is very easy to create two floats with the same text representation but different binary value.\n=> Please forbid NUMBER field type for HASH.\n\n5) SCALAR field type for HASH index\nSCALAR has the same problem as NUMBER (see above).\nThere are three options:\n- Keep it as it and add test cases\n- Forbid SCALAR field type for HASH index\n- Forbid float/double values in HASH index\n\nI believe we should not ban it but state in the manual that the\nbehaviour is implementation defined.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. We've done this.\n. - Roman Tsisyk notifications@github.com [16/06/30 19:09]:\n\n@alyapunov investigated that quotient filter in vinyl doesn't work algorithmically with configured parameters. I checked coverage result and figured out that \"optimal\" case of this filter is never triggered even by vinyl/stress.test.lua. @alyapunov proposes to replace QF with a simple bloom filter.\nI believe that it is possible to enable bloomfilter for all indexes and stop confusing our users with unclear amqf option.\n@kostja Could we remove this option? There is no free resources\nto maintain dead code.\nOne fool can write more code than four wise men can understand. \n\nGo ahead.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. - Aleksandr Lyapunov notifications@github.com [16/06/30 19:09]:\n\nI would add that QF implemented in vinyl is correct and I can\nexplain its every line of code, QF itself is very cool data\nstructure and could be useful somewhere else, but not in vinyl,\nat least not with used settings\n\nMove to salad then.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. - Roman Tsisyk notifications@github.com [16/06/30 19:09]:\n\ncompress_key option enables data deduplicaiton for ranges\n(pages).  Deduplication is not \"prefix compression\". There is no\nprefix compression feature in sophia/phia/vinyl at all. Please\nforget about it.\nVinyl collects ALL unique fields of all documents of a range in\na hash table and then replaces values with offsets. It is just a\nhomebrew \"dictionary compression\" algorithm with huge overhead -\n4 bytes are used to store offset for every value. This design is\ncaused by over-engineered phia_document. We can implement\nproper prefix compressions for entire tuple instead.\nThis \"compression\" feature requires a special disk format. I\nwould like to reduce the complexity and remove this feature.\n@kostja ?\n\nGo ahead.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Done.\n. Commented over email.. Duplicate of gh-562\n. - Roman Tsisyk notifications@github.com [16/07/21 10:53]:\n\n@kostja: need feedback\nWe can remove whatever when we begin to re-factor the planner.\nBut first we need to have a new scheduler architecture in place\nand secondary keys.\n\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Please move the pool to the cord and add to cord_destroy, that's it.\n. Fixed in the 1.7.1-1-gb4a4139\n. - Roman Tsisyk notifications@github.com [16/07/07 16:24]:\n\nI received negative feedback from a customer. Please start tarantool by default after apt-get install, like mysql, nginx, apache and other. \nThere are two options:\n* Add a configuration wizard to package to setup \"admin\" password (can be copypasted from somewhere)\n* Grant universe permissions for guests\nexample.lua instance should listen on 127.0.0.1:3313.\n\nLet's start with no listen port, only console port.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Test case missing, please add a test case and close.\n. This is possible, but generally we avoid doing anything serious on exit.\n. Please don't forget to add a test case to the multi-engine suite \nafter you fix this.\n\nkostja\n. Done.\n. This looks like a dup. I removed si_get() from transaction manager.\n. Done. This code was dead, no need for si_range().\n. Could you please also list your /etc/apt/sources.list.d/*tarantool*.list ?\n. Duplicate of gh-1589\n. Fixed.\n. @racktear doesn't want to pursue this anymore, when he changes his mind we'll reopen this :)\n. Fixed.\n. Ok\n15 \u0438\u044e\u043b\u044f 2016 \u0433. 7:07 PM \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"Roman Tsisyk\" \nnotifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\nVinyl has a special case for INSERT inside executeReplace():\nstruct tuple \nVinylSpace::executeReplace(struct txn_,\n              struct space space,\n              struct request request)\n{\n       ....\n    /_ unique constraint /\n    VinylEngine engine = (VinylEngine )space->handler->engine;\n    if (request->type == IPROTO_INSERT && engine->recovery_complete) {\n        uint32_t key_len;\n                ...\n}\n}\nI propose to separate executeInsert() and remove branching.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1621, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAdeXl4dZpTmYKatav7C9osZt6gr32jXks5qV6_zgaJpZM4JNjS6\n.\n. We need a way to mark an upsert which we failed to apply: this is also necessary for gh-1947, and store this information persistently. I think we should first fix gh-1947 then return to this bug in the light of the fix.. Thank you for your bug report, fixed in the latest 1.6 branch.\n. - Roman Tsisyk notifications@github.com [16/07/21 10:53]:\n\nsi_redistribute() redistributes the in-memory index of a pruned\nrange (e.g. when a range is split in two).\nThe way it's implemented, by locking the entire index (see\nvy_index_lock() in the caller function), and then trying to push\ntuple into related indexes one by one is utter crap.\nSo it's good it's not covered by tests - we need to make sure it's\nnever used (e.g. we never split a range before flushing its\nin-memory part to disk, etc),  and delete it.\n\n6205             : static int\n    6206           0 : si_redistribute(struct vinyl_index *index, struct sdc *c,\n    6207             :                 struct vy_range *node, struct vy_buf *result)\n    6208             : {\n    6209             :         (void)index;\n    6210           0 :         struct svindex *vindex = vy_range_index(node);\n    6211             :         struct vy_iter ii;\n    6212             :         sv_indexiter_open(&ii, vindex, VINYL_GE, NULL, 0);\n    6213           0 :         while (sv_indexiter_has(&ii))\n    6214             :         {\n    6215           0 :                 struct sv *v = sv_indexiter_get(&ii);\n    6216           0 :                 int rc = vy_buf_add(&c->b, &v->v, sizeof(struct svref **));\n    6217           0 :                 if (unlikely(rc == -1))\n    6218           0 :                         return vy_oom();\n    6219           0 :                 sv_indexiter_next(&ii);\n    6220             :         }\n    6221           0 :         if (unlikely(vy_buf_used(&c->b) == 0))\n    6222             :                 return 0;\n    6223             :         struct vy_bufiter i, j;\n    6224           0 :         vy_bufiter_open(&i, &c->b, sizeof(struct svref*));\n    6225           0 :         vy_bufiter_open(&j, result, sizeof(struct vy_range*));\n    6226           0 :         struct vy_range *prev = vy_bufiterref_get(&j);\n    6227             :         vy_bufiter_next(&j);\n    6228             :         while (1)\n    6229             :         {\n    6230           0 :                 struct vy_range *p = vy_bufiterref_get(&j);\n    6231           0 :                 if (p == NULL) {\n    6232             :                         assert(prev != NULL);\n    6233           0 :                         while (vy_bufiter_has(&i)) {\n    6234           0 :                                 struct svref *v = vy_bufiterref_get(&i);\n    6235           0 :                                 sv_indexset(&prev->i0, *v);\n    6236             :                                 vy_bufiter_next(&i);\n    6237             :                         }\n    6238             :                         break;\n    6239             :                 }\n    6240           0 :                 while (vy_bufiter_has(&i))\n    6241             :                 {\n    6242           0 :                         struct svref *v = vy_bufiterref_get(&i);\n    6243           0 :                         struct vy_page_info *page = vy_page_index_first_page(&p->self.index);\n    6244           0 :                         int rc = vy_tuple_compare(v->v->data,\n    6245           0 :                                 vy_page_index_min_key(&p->self.index, page),\n    6246           0 :                                 index->key_def);\n    6247           0 :                         if (unlikely(rc >= 0))\n    6248             :                                 break;\n    6249           0 :                         sv_indexset(&prev->i0, *v);\n    6250             :                         vy_bufiter_next(&i);\n    6251             :                 }\n    6252           0 :                 if (unlikely(! vy_bufiter_has(&i)))\n    6253             :                         break;\n    6254           0 :                 prev = p;\n    6255             :                 vy_bufiter_next(&j);\n    6256             :         }\n    6257             :         assert(vy_bufiterref_get(&i) == NULL);\n    6258             :         return 0;\n    6259             : }\n    6260             : \n    6261             : static inline void\n    6262           0 : si_redistribute_set(struct vinyl_index *index, uint64_t now, struct svref *v)\n    6263             : {\n    6264           0 :         index->update_time = now;\n    6265             :         /* match node */\n    6266             :         struct vy_rangeiter ii;\n    6267           0 :         vy_rangeiter_open(&ii, index, VINYL_GE, v->v->data, v->v->size);\n    6268           0 :         struct vy_range *node = vy_rangeiter_get(&ii);\n    6269             :         assert(node != NULL);\n    6270             :         /* update node */\n    6271           0 :         struct svindex *vindex = vy_range_index(node);\n    6272           0 :         int rc = sv_indexset(vindex, *v);\n    6273             :         assert(rc == 0); /* TODO: handle BPS tree errors properly */\n    6274             :         (void) rc;\n    6275           0 :         node->update_time = index->update_time;\n    6276           0 :         node->used += vinyl_tuple_size(v->v);\n    6277             :         /* schedule node */\n    6278           0 :         vy_planner_update(&index->p, SI_BRANCH, node);\n    6279           0 : }\n    6280             : \n    6281             : static int\n    6282           0 : si_redistribute_index(struct vinyl_index *index, struct sdc *c, struct vy_range *node)\n    6283             : {\n    6284           0 :         struct svindex *vindex = vy_range_index(node);\n    6285             :         struct vy_iter ii;\n    6286             :         sv_indexiter_open(&ii, vindex, VINYL_GE, NULL, 0);\n    6287           0 :         while (sv_indexiter_has(&ii)) {\n    6288           0 :                 struct sv *v = sv_indexiter_get(&ii);\n    6289           0 :                 int rc = vy_buf_add(&c->b, &v->v, sizeof(struct svref**));\n    6290           0 :                 if (unlikely(rc == -1))\n    6291           0 :                         return vy_oom();\n    6292           0 :                 sv_indexiter_next(&ii);\n    6293             :         }\n    6294           0 :         if (unlikely(vy_buf_used(&c->b) == 0))\n    6295             :                 return 0;\n    6296           0 :         uint64_t now = clock_monotonic64();\n    6297             :         struct vy_bufiter i;\n    6298           0 :         vy_bufiter_open(&i, &c->b, sizeof(struct svref*));\n    6299           0 :         while (vy_bufiter_has(&i)) {\n    6300           0 :                 struct svref *v = vy_bufiterref_get(&i);\n    6301           0 :                 si_redistribute_set(index, now, v);\n    6302             :                 vy_bufiter_next(&i);\n    6303             :         }\n    6304             :         return 0;\n    6305             : }\n    6306             : \n    6307             : static int\n    6308           0 : si_splitfree(struct vy_buf *result, struct vinyl_env *env)\n    6309             : {\n    6310             :         struct vy_bufiter i;\n    6311             :         vy_bufiter_open(&i, result, sizeof(struct vy_range*));\n    6312           0 :         while (vy_bufiter_has(&i))\n    6313             :         {\n    6314           0 :                 struct vy_range *p = vy_bufiterref_get(&i);\n    6315           0 :                 vy_range_free(p, env, 0);\n    6316             :                 vy_bufiter_next(&i);\n    6317             :         }\n    6318           0 :         return 0;\n    6319             : }\nPlease investigate what is si_redistribute() and add a test case or remove this code.\n\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/tarantool/tarantool/issues/1635\n\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Hi!\nI was able to repeat the problem, and it seems that the root cause is go client sending too many queries to the server, without reading the response. Previously, we had a bug that the input buffer of the server could grow despite cfg.readahead setting, so very large batches could be sent without reading output. We fixed it in 1.6.8-745, so now the server simply stops accepting input until some output is read. \nThe bug could be also caused by the Go driver for Tarantool, I will try to check it with the maintainer.\n. @kmansoft , please let me stress one point: the deadlock happens not because the server stops reading, but because the client stops reading.\nThe flood protection algorithm has two cfg.readahead  buffers for input, which it reuses as soon as a request is processed and a response is sent to the client. If the client does not read server output, the buffer can not be reused. So the trouble is with the client which keeps sending queries, but doesn't read server responses.\n. Yes, that is what I am observing in the debug get, there is data in out out\nbuffer but the client is not reading it (the socket is not available for\nwriting)\n29 \u0438\u044e\u043b\u044f 2016 \u0433. 10:22 PM \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"kmansoft\" notifications@github.com\n\u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\nThe client stops reading -- but server does keep sending responses?\nIf that's the case, then it sounds more like a client bug.\nAnd just want to note that I have tried setting the client side timeout\nto some ridiculously large value, and it did not help (it still failed,\njust took longer).\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1649#issuecomment-236270913,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAdeXiuzhIpBdIcLR9pkhOL0eizcP-RWks5qalLngaJpZM4JYFfN\n.\n. - kmansoft notifications@github.com [16/07/30 00:05]:\nAnd another thing worth noting, in favor of a client library bug:\nMy test app uses synchronous Tarantool calls -- I mean it does not queue up a large number of requests only then waiting for them to complete.\nAnd it's my understanding that every call to e.g. dbconn.CallTyped 1) sends a request to Tarantool and 2) waits for a response and 3) only then returns.\nAnd so, there should be at most 20 (the number of worker threads) outstanding requests in and at most 20 outstanding responses.\n\nYep, you're right, there should be no more than 20 queries in\nflight. Strangely enough, I can't repeat the problem with 1.7,\nonly  in 1.6. Will debug a bit more.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. I believe the above patch fixes it, could you please check? At least I can't repeat the hang any more.\n. - Evgeny M. notifications@github.com [16/08/01 14:33]:\n\nSorry, my initial description was incorrect. tarantool just closes the socket when it encounters non-integer value of index in otherwise correct packet.\nTest case - send a 'delete' packed with STR value in index field instead of INT. This packet is incorrect indeed, but I think closing socket it is not necessary for such errors, when there's a header, a body with all necessary fields but just one of the fields has incorrect type. In contrary, for the 'update' packet, if I send some incorrect ops, it just returns an error packet with \"Unknown UPDATE operation\".\nThe packet which makes tarantool close the socket (\"\" in index):  <<131,16,205,2,1,17,160,32,146,1,2>>\nCorrect packet (1 in index): <<131,16,205,2,1,17,1,32,146,1,2>>\n\nJust my curiosity, is the client a Perl one?\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. This is done (and covered by a test, vinyl/errinj.test, vinyl/gh.test)\n. OK, we agreed to move this to box.space.:info(). This is done.. Please re-open if you have any other trouble with this test case.\n. Merged with gh-1662\n. Done.\n. Fixed.\n. We resolved that this can't be done.. The idea is abandoned in favor of page cache, which is cursor-friendly.\n. Please try box.schema.user.grant(init_username, 'execute,read,write', 'universe', nil, {if_not_exists = true})\n. The suggestion look like a hack. It doesn't yield in memtx either, so what?\n11 \u0430\u0432\u0433. 2016 \u0433. 5:13 PM \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"Roman Tsisyk\" \nnotifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\nindex:count() may block TX thread for the long time if runs are cached in\nmemory.\nPlease add explicit yields.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1688, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAdeXlF89CaljRcvnt568lI7gA5sGaaSks5qey4AgaJpZM4JiKbh\n.\n. This is done.. Done.\n. Hence, won't fix.\n. What is the version of the server you're using? \n. Hi, I tried the steps described in the ticket and did not get a failure:\n\n``\n% ./tarantool \n./tarantool: version 1.7.1-300-gcbfb7e8\ntype 'help' for interactive help\ntarantool> box.cfg{}\n2016-09-08 21:19:26.081 [12714] main/101/interactive C> version 1.7.1-300-gcbfb7e8\n2016-09-08 21:19:26.081 [12714] main/101/interactive C> log level 5\n2016-09-08 21:19:26.081 [12714] main/101/interactive I> mapping 1073741824 bytes for tuple arena...\n2016-09-08 21:19:26.088 [12714] main/101/interactive I> recovery start\n2016-09-08 21:19:26.089 [12714] main/101/interactive I> recovering from./00000000000000000004.snap'\n2016-09-08 21:19:26.104 [12714] main/101/interactive I> ready to accept requests\n\n...\ntarantool> box.schema.space.create('test')\n\nerror: Space 'test' already exists\n...\n\ntarantool> box.space\n\ntest:\n    temporary: false\n    engine: memtx\n...\n\ntarantool> box.schema.space.create('t2', {engine='vinyl'})\n2016-09-08 21:19:46.529 [12714] wal/102/wal I> creating `./00000000000000000004.xlog.inprogress'\n\n\nindex: []\n  on_replace: 'function: 0x41913fd8'\n  temporary: false\n  id: 513\n  engine: vinyl\n  enabled: false\n  name: t2\n  field_count: 0\ncreated\n...\n\ntarantool> box.space.t2:create_index('pk')\n\nunique: true\n  parts:\ntype: unsigned\n    fieldno: 1\n  id: 0\n  space_id: 513\n  name: pk\n  type: TREE\n...\n\ntarantool> function f() box.begin(); box.space.test:insert{3} box.space.t2:insert{1} box.commit() end\n...\ntarantool> pcall(f)\n\nfalse\nA multi-statement transaction can not use multiple storage engines\n...\n\ntarantool> %                                                                    kostja@atlas ~/work/tarantool/src\n % ./tarantool\n./tarantool: version 1.7.1-300-gcbfb7e8\ntype 'help' for interactive help\ntarantool> box.cfg{}\n2016-09-08 21:20:32.010 [12745] main/101/interactive C> version 1.7.1-300-gcbfb7e8\n2016-09-08 21:20:32.010 [12745] main/101/interactive C> log level 5\n2016-09-08 21:20:32.010 [12745] main/101/interactive I> mapping 1073741824 bytes for tuple arena...\n2016-09-08 21:20:32.011 [12745] main/101/interactive I> recovery start\n2016-09-08 21:20:32.011 [12745] main/101/interactive I> recovering from ./00000000000000000004.snap'\n2016-09-08 21:20:32.016 [12745] main/101/interactive I> recover from./00000000000000000004.xlog'\n2016-09-08 21:20:32.019 [12745] main/101/interactive I> done ./00000000000000000004.xlog'\n2016-09-08 21:20:32.019 [12745] main/103/hot_standby I> recover from./00000000000000000004.xlog'\n2016-09-08 21:20:32.020 [12745] main/101/interactive I> done `./00000000000000000004.xlog'\n2016-09-08 21:20:32.021 [12745] main/101/interactive I> ready to accept requests\n\n...\ntarantool> box.space\n\ntest:\n    temporary: false\n    engine: memtx\n  t2:\n    temporary: false\n    engine: vinyl\n...\n```\n. What did I do wrong? Could you please retry the described steps on the latest version or send us a reproducible test case?\n. Crash uploaded to the support ftp, dew-bugdb.zip\n. We believe the problem is gone by now, could you please re-check?\n. - stepan-mitkin notifications@github.com [16/09/28 13:48]:\n\nHi,\nWe changed the binary layout of data in Vinyl.\nI'm afraid you can't start with this layout at all, so you need to\nstart from scratch, or connect to old server with a replica\nto get data converted to a new format.\nWe'll look into the core file to avoid a crash in the future (but\nit will be replaced with abort on start).\n\nWhen I start tarantool with the crash db, I get this in the console:\n$ tarantool dbgcfg.lua\nstarting console...\ntarantool> Segmentation fault\nCurrent time: 1475047391\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed, \nthis may fail as well\n0  0x40f351 in sig_fatal_cb(int)+129\n1  0x7fe85e563330 in ?\n2  0x468ee2 in vy_scheduler_f+738\n3  0x40eecc in fiber_cxx_invoke(int ()(__va_list_tag), __va_list_tag*)+12\n4  0x4c0300 in fiber_loop+48\n5  0x5e56bf in coro_init+63\n6  (nil) in ?\nAvbrutt (SIGABRT) (kjerne lagret i fil) == \"core saved in file\"\nNote that I commented out line \"require(\"init\")\" in dbgcfg.lua.\nUploaded the core file to ftp://build.tarantool.org\ncore.tarantool.3266.anton.1475047391.zip\ntarantool: version 1.7.1-489-ge5f67b9\nuname -a\nLinux anton 4.4.0-38-generic #57~14.04.1-Ubuntu SMP Tue Sep 6 17:20:43 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n\nYou are receiving this because you were assigned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/tarantool/tarantool/issues/1723#issuecomment-250092864\n\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. This is done by @locker already.. This is done.\n. - Roman Tsisyk notifications@github.com [16/09/20 13:16]:\n\nI don't observe this problem anymore.\nProbably fixed by @locker patches.\n\nI fixed it ;)\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. RB_CMP_TREE_ARG is completely unnecessary today, container_of can be replaced with txv->index->key_def or range->index->key_def in comparators.\n. Dennis, we need to change your benchmark script. Better yet if you have your own .lua file which you use in the benchmark.\n. Useful for megafon SQL deployment.\n. This is being worked on.. See http://github.com/tarantool/graphql. @lenkis please move this to tarantool/doc. Fixed.\n. We removed range index files, should be fixed by now.\n. Fixed by 0e4c6dfa725281f883b8d1fe0287768e1b5afdf8. 1.7.4-189-g3902661. This is done in Tarantool Enterprise.. Split to multiple tickets, closing.. Needed for alfa-bank.. Depends on the success of the POC. We will know the deadline in a couple of weeks.. This is not a bug. BITSET index expects integer arguments, but strings are passed instead.. This is an incorrect test. select{} returns an empty table, which is not nil. Please use get() instead.\n. This change is no longer relevant, we squash upsert series into a single upsert, which then can be processed at once.. We can implement autonomous transactions in vinyl scheduler for this, or implement INCREMENT statement.. For vinyl, we will implement it using an autonomous transaction in memtx. For memtx, we will continue using a single-engine transaction. All other comments on this will be added in scope of gh-389. Closing as duplicate of gh-389. - Roman Tsisyk notifications@github.com [16/10/18 15:05]:\nI agree.\n\n```\ndefine say(level, format, ...) ({ _say(level, FILE, LINE, format, \\\n    ##__VA_ARGS__); })\n\ndefine say_debug(format, ...) say(S_DEBUG, NULL, format, ##VA_ARGS)\n\nsay_debug(\"optimize upsert fast: %s: %s\", vy_range_str(range),\nvy_stmt_str(stmt, index->key_def));\n```\n\nsay_debug() arguments are evaluated even if log_level > DEBUG.\nI propose to add if (say_log_level_is_enabled(S_DEBUG))) to ({ _say(level, __FILE__, __LINE__, format, ##__VA_ARGS__); })\n\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. We need to update the docs when it's fixed, and explain why this is useful. Please open a ticket against the reference when this is closed.. Quota timeouts seems to cover this problem quite well for now. Moving to wish list to collect some customer stories first.. I pushed a series of patches which together close this bug.. \n1.txt\nWe agreed to implement a new function, box.memory.info(), largely along the lines of the attached diff.\nDifferences from the attached diff: \n- malloc memory, as well as Lua and runtime memory, in a single view\n- vinyl/memtx memory each in its own group\n. We decided to not touch box.slab.info() to not break existing usage. So this ticket is a duplciate of #934 . OK to remove.. - Roman Tsisyk notifications@github.com [16/11/02 10:13]:\nThis works as intended. \n\n```\ntarantool> log.info('hello')\ntarantool: hello\n\n...\ntarantool> box.cfg{}\n2016-11-02 09:37:11.043 [30206] main/101/interactive C> version 1.7.2-140-g8f7d929\n2016-11-02 09:37:11.043 [30206] main/101/interactive C> log level 5\n2016-11-02 09:37:11.043 [30206] main/101/interactive I> mapping 1073741824 bytes for tuple arena...\n2016-11-02 09:37:11.091 [30206] main/101/interactive I> recovery start\n2016-11-02 09:37:11.091 [30206] main/101/interactive I> recovering from `./00000000000000000000.snap'\n2016-11-02 09:37:11.099 [30206] main/101/interactive I> ready to accept requests\n\n...\ntarantool> log.info('hello')\n2016-11-02 09:37:12.380 [30206] main/101/interactive I> hello\n\n...\n```\nlogger is unusable without box.cfg({}).\n\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. - Roman Tsisyk notifications@github.com [16/11/02 13:41]:\n\nI use 8-16 Tarantool instances as Lua interpreteres with\n\"net.box\" and \"xlog\" modules. I don't plan to store any data on\nthese Tarantool and create data directories, but it would be\nnice to have working \"log\" module.\n\nThere is a separate ticket for this problem, about making 'logger'\nseparate from box.\n\nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. This ticket is to rewrite INSERT with REPLACE and UPDATE with UPSERT during xlog recovery, i.e. make sure xlog recovery is non-reading as much as possible.. Yes.. Won't fix: we use these options for debug/testing purposes. . * Roman Tsisyk notifications@github.com [16/12/09 15:30]:\n\nDiscussed with @kostja.\n\nAdd box.cfg { memtx = { memory_limit = xxx } }\n\nbox.cfg { memtx = { memory_limit = xxx } }\n\nslab_alloc_factor, slab_alloc_minimal, slab_alloc_maximal are also\nmoved to memtx. \n\n\nKeep box.cfg { slab_alloc_arena } for compatibility.\n\n\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. * Victor Luchits notifications@github.com [16/12/15 12:27]:\n\n\u0414\u0430, \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043e\u0442\u0446\u0435\u043f\u043b\u0435\u043d\u0438\u0435\u043c box.cfg{listen=...} \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u041f\u043e \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u043c\u0435\u0440\u0435 \u044d\u0442\u043e \u043a\u043e\u043d\u0442\u0440-\u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430, \u0430 \u043f\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0439 - \u0431\u0430\u0433 \u0432 \u043f\u043e\u043b\u043d\u044b\u0439 \u0440\u043e\u0441\u0442.\n\n\n\u0412 1.7 bind & listen \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0437\u043d\u0435\u0441\u0435\u043d\u044b, bind \u0431\u0443\u0434\u0435\u0442 \u0434\u0435\u043b\u0430\u0442\u044c\u0441\u044f \u0434\u043e \u043d\u0430\u0447\u0430\u043b\u0430\nrecovery, \u0430 listen \u043f\u043e\u0441\u043b\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f.\n\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0443\u0439\u0434\u0451\u0442.\n\u0412 1.6 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u043a\u043e\u0440\u043d\u044f\u043c\u0438 \u0443\u0445\u043e\u0434\u0438\u0442 \u0432 \u0440\u0435\u0436\u0438\u043c hot standby, \u043a\u043e\u0442\u043e\u0440\u044b\u0439\n\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c recovery \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441 \u043f\u043e\u043f\u044b\u0442\u043a\u0430\u043c\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c bind &\nlisten \u043d\u0430 \u043f\u043e\u0440\u0442 \u0438 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u0440\u0435\u0436\u0438\u043c \u043c\u0430\u0441\u0442\u0435\u0440\u0430.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 1.7, \u043c\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c bind \u043d\u0430 \u043f\u043e\u0440\u0442, \u043f\u043e\u0442\u043e\u043c \u043f\u043e\u0434\u043d\u044f\u0442\u044c \u0441\u043d\u0430\u043f\u0448\u043e\u0442 \u0438 \u0436\u0443\u0440\u043d\u0430\u043b\u044b, \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u0434\u0435\u043b\u0430\u0435\u043c listen. . The fix was backported to 1.6. The whole thing happens only a few hours after restart. I guess we'll need to construct a stress test to reproduce the problem. I will also re-enable console on one of the masters  to see if the problem is still repeatable.. The key to reproducing this ticket is to have a lot of files in vinyl - many spaces and indexes is an easy way to achieve that. The key suspicion is Lua garbage collector, which doesn't collect file descriptors quickly enough, so vinyl starts running out of file descriptors.. * Ilya Markov notifications@github.com [17/05/29 19:46]:\n\nTried to run the described case. Mentioned bug was not reproduced.\nScripts\n\nPlease try with low ulimit -n\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Closing as can't repeat.. Please read my comment in gh-1622 about this bug.. You can do it. This ticket is not relevant to what you're trying to do. Let's discuss in the community channel!. gh-2079 is high-prio, we'll do it in 1.7.4 as you can see. for gh-723, could you send us a patch? and anyway, this is not relevant to this ticket, please use the telegram chat :). One option re this ticket is to make box.cfg{repilcation_source=} non-blocking when called second time.. It's not useful, it also prints registers now.. I don't think this should still bother us.. * Roman Tsisyk notifications@github.com [16/12/06 13:15]:\n\nLet's try to enable O_DIRECT for vy_page_read() after implementing tuples cache #1692.\n\n\nLooks like a bad idea: we need a cache for both, compressed and\nuncompressed pages. The filesystem cache is naturally the fs cache\nfor compressed pages. The user can already limit its size by\ngrowing the size of tuple cache.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Pushed.. Use box.info.status, it's the status of recovery exactly.. Let's make sure the manual examples can be copy-pasted, and worry about abuse of print() separately.. When we implement https://github.com/tarantool/tarantool/issues/2677 this will become possible.. Many Lua packages are broken when used with Tarantool, since they use blocking IO, http is one such example. \nWe don't have to install our packages to Lua path, we can extend package search paths with our own (and we do already, I believe).\nHence, use unprefixed names. \nPS A history lesson - we used to have prefixed names. And it was a pain.\nPPS Coming back to prefixed names is a backward incompatible change. Hence essentially this request is a no-brainer, even if we ever decide to go back, it's a major effort which will take us a couple of releases to do, and incur pains to our existing community. . This can be fixed in luarocks upstream. @hishamhm is open to extending luarocks to support various Lua distributions.. The message is coming from the relay thread trying to read an empty xlog and relay it to the master. Should be simply suppressed.. Duplicate of gh-2067. Sorry, we will not be able to fix this - we changed the code too significantly to be able to guess the cause of the error, and we couldn't reproduce it. Please reopen the bug if you experience it with the latest 1.7.\nThanks!. Hi, what you're looking for is BETWEEN here, really. Please check this part of the manual: \nhttps://tarantool.org/doc/1.7/book/box/box_index.html#example-showing-a-user-defined-iterator\nor join our telegram channel to get help.\nThanks!. We will not require box.cfg{} at start any more, so won't fix.. Hi,\nPlease try Tarantool 1.7, you can download it here: https://tarantool.org/download.html. box.once() first inserts a guard tuple and then performs the action. We need to wait until the guard tuple reaches all connected replicas before performing the action.. We were not checking the input in 1.6.7 and substituting all the incorrect input with a default.\nWe fixed this in 1.6.9, and your statement started to fail. 'NUMBER' is no a correct type alias in 1.6 (neither it is in 1.7). \nSorry for this gotcha.. Hi, we will support this in SQL in 1.8.0.. This is done with the new sequences, simply pass nil for the sequence column in the binary protocol.. Sorry, this has been hanging around for too long. Please join our telegram chat to figure out what's wrong with this PR. I must close it now (please open a new PR afterwards).. The patch looks good and can be cherry-pick to 1.6.. See also https://github.com/tarantool/doc/issues/166. I don't think you can fix it well. You could perhaps pre-create a read-only session at start, or add panic() call. . Already works for the primary key, we simply need to do it for secondary keys during recovery as well. Seems to be a low hanging fruit which will improve recovery of secondary keys.. Please specify the server version. Are you using brew?. Please join telegram or slack  where we can give you proper support. If you can't C, finding out what went wrong over github issues, minding the time zone difference is going to be painful.. Closing as duplicate.. Vinyl secondary key lookups will work exactly in the same way as memtx. We will not push any differences up the storage engine API. I spent some time pondering that, and there are more issues trying to make vinyl different than benefits. One issue is that the logic in which secondary keys work in vinyl changed 3 times in the past 6 months. And we plan for more changes in the future. The case of covering index optimization for now seems too narrow to optimize for, plus secondary key lookups in vinyl may return obsolete version of the secondary key value in some cases. In the future we may hide it behind the tuple api and perform full-tuple look up on demand. In other words, there is nothing useful about secondary keys we can push up into VDBE.. There are no SQL optimizers built from scratch for LSM trees, so it's not comparing apples to apples. Vinyl secondary key lookup may return a deleted key. You need a lookup in the primary index just to make sure the LSN of the key is actually visible to the transaction. Maybe-sometime-in-the-future we will have a different implementation, but then, as I said, it would be easier to hide all the complexity behind struct tuple, perform the primary key lookup on demand and spare VDBE from the headache.. We will support this by documenting a way to copy and carry the snapshot to a replica. . This is done in 1.7.6. We will not fix this, this is a handy extension to the standard and I don't see how it can break compatibility.. We need to make sure that space name is effecitvely unlimited (i.e. is a dynamic string). We need to store SQL in system spaces and space cache anyway, so space_def, as well as index_def becomes a non-copyable object. The only way to ensure that there are no memory leaks is to remove OPT_STR (static size buffers) altogether, and make sure all space and index buffers are dynamic. Setting as top priority since it's a refactoring.. Duplicate of gh-2158. This breaks force-recovery mode. Won't fix.. We no longer depend on libbfd, we use libunwind.. Duplicate of gh-2253. * Roman Tsisyk notifications@github.com [17/09/08 10:26]:\n\nWe use uint32_t almost everywhere in tuples. Shall we change it to int32_t?\n\nLet's do it.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Duplicate of https://github.com/tarantool/tarantool/issues/2853. You can always use WHERE pk IN (subquery expr) - this is the standard alternative.\nORDER BY ... LIMIT is only useful if your optimizer is very weak, otherwise you can do it efficiently with a standard compliant SQL, in relational spirit.. FTS support was removed.. Pushed.. Please provide a test case. You'll learn that the problem is really hard to reproduce in real life - you need to create an index, and then drop the previous one.\nThere is a simple fix in schema.lua (we need to fill the gaps and recycle old ids, but only when we reach max index id).. The problem has no known effects.. Has to be fixed in 1.6. A duplicate of gh-2024. Roman, please open a new issue with a relevant description.. gh-2156 was marked a duplicate of this issue.. OK with me. box.space. This is done.. Fixed in 1.7.5-266. This is now much easier to do since we implemented replication_skip_conflict for whoever wants to skip conflicting rows on replica. We should stop skipping rows from the master in case of any kind of failure, and control row skipping with replication_skip_conflict option.. kostja@chai ~/work/tarantool % git diff\ndiff --git a/src/box/applier.cc b/src/box/applier.cc\nindex ff4af95e5..36b23a518 100644\n--- a/src/box/applier.cc\n+++ b/src/box/applier.cc\n@@ -355,8 +355,8 @@ applier_join(struct applier *applier)\n                coio_read_xrow(coio, ibuf, &row);\n                applier->last_row_time = ev_monotonic_now(loop());\n                if (iproto_type_is_dml(row.type)) {\n-                       vclock_follow_xrow(&replicaset.vclock, &row);\n                        xstream_write_xc(applier->subscribe_stream, &row);\n+                       vclock_follow_xrow(&replicaset.vclock, &row);\n                        if (++row_count % 100000 == 0)\n                                say_info(\"%.1fM rows received\", row_count / 1e6);\n                } else if (row.type == IPROTO_OK) {. * Vladislav Shpilevoy notifications@github.com [17/04/26 21:28]:\n\nI think, that we need add IPROTO_LANGUAGE also for IPROTO_CALL,\nbecause SQL also has functions, like SUM, AVG, COUNT etc.\n\nThe language of the stored procedure is part of the stored\nprocedure definition in the data dictionary, so you don't need to\npass it over the client protocol.\nYou can't have two procedures with the same name but different\nlanguages.\nSUM/AVG/COUNT are aggregate functions, not procedures, in SQL, you\ncan't invoke them as a standalone functions.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Merged into gh-2285. I was able to reproduce this. Replication simply hangs, status: follow. This goes on until the xlog is reopened.. ```\nkostja@atlas ~ % cat master.lua\n!/usr/bin/env tarantool\nbox.cfg{}\nbox.schema.user.grant('guest', 'replication')\nbox.cfg{listen=3303}\nbox.schema.space.create('test')\nbox.space.test:create_index('pk')\nfiber = require('fiber')\nfunction f()\n    while true do\n        box.space.test:auto_increment{fiber.time()}\n        fiber.sleep(3)\n    end\nend\nfiber.create(f)\nrequire('console').start()\nkostja@atlas ~ % cat slave.lua \n!/usr/bin/env tarantool\nbox.cfg{replication=\"3303\"}\nrequire('console').start()\nkostja@atlas ~ % \n. Master relay is stuck on the xlog which has no eof:\n(gdb) info thread\n  Id   Target Id         Frame \n  1    Thread 0x7f0e29cbfac0 (LWP 3892) \"tarantool\" 0x00007f0e2778e9d3 in epoll_wait () at ../sysdeps/unix/syscall-template.S:84\n  2    Thread 0x7f0e0a7ff700 (LWP 3903) \"iproto\" 0x00007f0e2778e9d3 in epoll_wait () at ../sysdeps/unix/syscall-template.S:84\n  3    Thread 0x7f0e097ff700 (LWP 3904) \"wal\" 0x00007f0e2778e9d3 in epoll_wait\n    () at ../sysdeps/unix/syscall-template.S:84\n  4    Thread 0x7f0e03fff700 (LWP 3905) \"coio\" pthread_cond_wait@@GLIBC_2.3.2\n    () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\n  5    Thread 0x7f0e037fe700 (LWP 3906) \"vinyl.reader.0\" 0x00007f0e2778e9d3 in epoll_wait () at ../sysdeps/unix/syscall-template.S:84\n* 6    Thread 0x7f0e02ffd700 (LWP 3907) \"relay/127.0.0.1\" 0x00007f0e2778e9d3 in epoll_wait () at ../sysdeps/unix/syscall-template.S:84\n(gdb) bt\n0  0x00007f0e2778e9d3 in epoll_wait ()\nat ../sysdeps/unix/syscall-template.S:84\n\n1  0x00000000006ad6dc in epoll_poll (loop=0x25252a0,\ntimeout=0.94375749599930714)\nat /home/kostja/work/tarantool/third_party/libev/ev_epoll.c:153\n\n2  0x00000000006a8843 in ev_run (loop=0x25252a0, flags=0)\nat /home/kostja/work/tarantool/third_party/libev/ev.c:3542\n\n3  0x00000000005378e4 in cord_costart_thread_func (arg=0x257f780)\nat /home/kostja/work/tarantool/src/fiber.c:1173\n\n4  0x00000000005365f7 in cord_thread_func (p=0x7f0e2283e628)\nat /home/kostja/work/tarantool/src/fiber.c:974\n\n5  0x00007f0e27ff06ba in start_thread (arg=0x7f0e02ffd700)\nat pthread_create.c:333\n\n6  0x00007f0e2778e3dd in clone ()\nat ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\n\n(gdb) frame 3\n3  0x00000000005378e4 in cord_costart_thread_func (arg=0x257f780)\nat /home/kostja/work/tarantool/src/fiber.c:1173\n\n1173            ev_run(loop(), 0);\n(gdb) p ((struct relay*) ctx.arg)->r->cursor.name\n$22 = \"./\", '0' , \"20.xlog\", '\\000' \n```\n. OK, we tried this and changed back to email.. @rtsisyk we've agreed with mons to backport the fix to 1.6. Duplicate of gh-2540. * Peter Gulutzan notifications@github.com [17/04/21 19:12]:\n\nI certainly never would have suggested \"w/o Lua at all\".\nSQL's Unicode escaping (inside U&\"...\" and U&'...') would\nnot conflict with Lua escaping. I think the issue here is:\nshould invalid UTF-8 characters be legal in text/char?\n\nOh hell Peter please don't start it here.  We're a small shop and\nwill bother with it when there is a real customer affected by the\nproblem.\nIn other words, the answer to your question is: whatever.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Isn't this issue a placeholder for re-work of triggers/constraings as native to tarantool storage?. There can't be a ticket about re-implementing anything: most tickets have clear/measurable/user visible behavior change requests. This ticket is as good as any other to mandate moving trigger implementation into the core. . We decided this problem is not imporant enough to fix it. We will return to it in scope of performance tests.. Won't fix.. * Eugine Blikh notifications@github.com [17/05/03 19:57]:\n\nEverything is done\n\nHow does it work on BSD*?\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Hello guys, it is a very general description of the problem, so it's hard to help. We need steps to reproduce the problem to be able to look into it. Or we could provide support. The ticket database is not a good place for free support requests however, we try to provide support of this kind on our telegram channel. Could we continue there? . As discussed during support meeting: please check if your snapshot daemon works correctly and your xlog files are not deleted before they are relayed to the slave. 1.6.9 does not check for a \"gap\" in xlog files history created by incorrectly configured snapshot daemon. This is addressed in 1.7 with gh-748. This is impossible. LuaJIT has tail recursion elimination which leaves no trace of the original frame on the interpreter stack.. The ticket as such is irrelevant, since it's a technical proposal, and needs to be justified with benchmark results. Closing with \"Won't fix\".. This is done.. Blocked by gh-2253. The only remaining problem of this issue was moved out to gh-2559. @alyapunov the fix is necessary to avoid starting openmp threads by a simple alter/create space with no rows.. Do you mean hot standby instances?  Hot standby instances still don't work in vinyl. . @Gerold103, I meant it's a metamethod, so it's a method of the metatable really, not the real Lua method.. I don't think we should spend time on this, sorry.. This is done.. I keep this bug open since it's for vinyl.. * Conrad Steenberg notifications@github.com [17/05/21 08:30]:\n\nCalling a tarantool server side function that returns a table that includes functions returns a serialization error to the client:\n\"unsupported Lua type 'function', server: localhost:3301 ... etc\"\nI think it would be more useful in the general case to do what e.g. pl.pretty does and replace function values with e.g. function: 0x413f00a0\n\nThe reason it's not done is that it may lead to subtle programming\nerrors when one stores a function persistently in a tuple and will\nexpect it to retrieved back safely.\nYou can set actions for serialization errors by extending the \nencoder, I will look up how.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Roman, this seems to be not documented. Please dig up how to do it and open a documentation bug.. What is not real with the current stats?. I don't know what's wrong with the current stats and I will never find out it seems.. ./test-run --suite=list of suites. Implemented 1 new log level: VERBOSE. * Vladislav Shpilevoy notifications@github.com [17/07/13 18:22]:\n\nCan not reproduce. Possibly, the problem is not actual. May I close it?\n\nYes.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. This byte is harmless but makes the result look good. What is your problem with it?. * larets notifications@github.com [17/05/26 16:35]:\nPlease specify your Tarantool version. I believe this is fixed in\n1.7.4\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. I actually disagree. You don't send pings in the \"to\" channel, you send pings in the \"from\" channel, and then you respond to them in the \"to\" channel. So pings and acks are more or less the same.. As discussed on the phone:\n- we patch relay's reader fiber to keep reading and decoding anything that comes from the applier\n- the applier knows the relay version, it comes in the greeting. If the version is > 1.7.5, the applier creates a \"heartbeat\" fiber, to send acks to the relay. Alternatively, the heartbeat fiber can be created at all times, but do nothing if the version is old.\nThe heartbeat fiber runs an infinite loop, in which:\n- it definitely sends a message back even if there are no rows from the master once in heartbeat_timeout\n- it the meanwhile, it sleeps on the cond, and if there is a row from the master, applier fiber signals the cond (after applying the row).\nA new configuration variable is introduced, replication_heartbeat_interval, which is 1 by default (we need to benchmark it (c) :)). 0 means that we send individual message acks, non-zero means we only send acks once in an interval. We should always send acks once in a while even if there are no messages!\nWhat the ack contains: replicaset_vclock.. @Mons please comment. Please add a test case to reproduce this bug. This is not OK, we will look into this.. This is no longer true.. No feedback -> please reopen if we still can help you with this bug.. This is necessary for gh-2016. This issue depends on gh-2025. This is done.. Roman, you could make a local table  = table in console. wouldn't that work?. What exactly needs to be fixed?. I assume the problem is resolved. . 1.7.4-198-g0acb9b6. Test case is still pending.. It shouldn't silently fail. We need to check instance name and give a warning.. If you fixed it, please remove from the docs that this is not supported. . We can add additional log messages before connecting to a replica, unless we have one already. I'm not sure your analysis of the problem is correct.. I don't know what happened here. E.g. it could be a timeout in connect to replica, or somewhere else. @zloidemon please come up with a test case and reopen the bug.. Only Alex could reproduce it.. math.mod was removed in Lua 5.1. If you wish to put it back, please reopen the bug.. Hi, I assume this is no longer urgent. Closing with  \"won't fix\". Needed for Avito, cloud.mail.ru, target.mail.ru and many others.. Duplicate of gh-980. I'm ok with the approach, but there is no such thing as unlease. With lease, you simply end it. . * Vladislav Shpilevoy notifications@github.com [17/07/21 14:11]:\n\nWe realized, that\n1) Free() does not explicitly know size of a memory to free.\n2) A malloced memory can travel into another thread and can be freed in its quota != original thread quota.\nProposals:\n1) Add 8-byte header for each malloc and store size here. Or pass malloced size in free().\n2) It is ok, because the freed in another thread memory will be returned to the one global runtime quota anyway.\n\nUgh.\nUse malloc debug options available on systems with glibc malloc.\nOn other systems, explore system specific options or do nothing.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. The first  key part can not be nil. You can omit other key parts. . Let's close this then.. This is not a bug. LuaJIT supports __eq metatable method so we could perhaps use it to compare with bools. Please feel free to send us a patch.. This is in the context of expirationd, which uses fiber.name() to identify tasks. If a name is truncated, expirationd silently misses the fact. It should handle the situation gracefully instead: e.g. fail to set the name. We can do this by adding a check to fiber.name(). A test should be added to expiraitond, though. Requested by ICQ. I spent a lot of time thinking about this and found no good solution.. Thank you for your feature request. SQL solves this and a lot of similar requests to iterators (BETWEEN, LIKE, etc).. This is fixed.. @lenkis, please document. tarantool does not create any directories by default, it's done by tarantoolctl.\nIf you use tarantool without tarantoolctl, you should create the necessary directories manually.\nWhat should be done in scope of this ticket:\n- make sure all error messages are clear. Print the system error code and name of the system call that failed. \n- vinyl_dir should not be used if there are no vinyl spaces (please try to initialize vinyl engine on demand), we already do this with vylog files, they are created on demand.. I don't see why CALL should be retried at all. . @Gerold103 , we need a test case which tests overflow of fiber pool in tx thread with too-many long polling requests. I  guess for this purpose we need to make FIBER_POOL_SIZE dynamic and configurable.. We have had a bug with uniqueness of cord names when used human-readable names, and switched to pointers.. This actually seems to be a bug in PHP driver. Which PHP driver have you been using?. @zloidemon up. I believe this is done by a contributed patch by Ivan Kosenko. * Roman Tsisyk notifications@github.com [17/08/31 11:27]:\nThis can be removed now, since SQL is now on board and not a git\nsubmodule/fork\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Please use fio instead of io.. Please make your request more specific. Feel free to reopen the bug.. Have you seen this issue since? Unfortunatley, without steps to reproduce we will not be able to fix it.. Sorry, we will not be able to spend more time on this without some insight into how to reproduce it.. Won't fix, as discussed with AT.  May be necessary for Megafon.. This is done.. Please do not wrap box.cfg{}. Simply patch the server Lua source to start a new background fiber  which will send the report. Eugene will be able to show the details. The fiber should send the report every 60 minutes.\n. \u041d\u0430\u0434\u043e \u0434\u043e\u0434\u0435\u043b\u0430\u0442\u044c.. I don't know what this is for. Please explain why it breaks and why we should forbid it at all.. In Tarantool, users are allowed to do this - but they should know what they are doing.. We will not be able to fix it without feedback.. Just don't do that.. This is not an SQL bug.. We will remove box.sql.execute() altogether, as well as box.sql. net.box, in other words, the local api will be the same as remote api. there is a ticket to return tuple from remote api, a separate one.. Georgy, please review this patch.. This works as documented, UPSERT is executed after commit.. There is extern int log_level; which should be checked before calling a function to skip logging if log level is not enabled.\nlog_error() means log all messages of level ERROR and below, e.g. CRIT, the name should not be used for general purpose access to tarantool log, e.g. INFO level.\nsay_* wrappers are already part of the public API.\nWhat exactly is the point of this pull request?\n. Please remove from the docs. The new cbus doesn't have peer-specific events.. I like the idea, but I think it's a feature request to LuaRocks. Why not file it there?\n. @racktear please try filing this feature request with luarocks and paste here a link to it.. This affects all newbies.. @GeorgyKirichenko , please check out if it's feasible. If not, let's fix it, otherwise let's close it with won't fix.. We don't need this any more as long as we have BEFORE REPLACE triggers.. OK, thank you for your feedback. I'll see what can be done, for now I'm closing this bug.. Hi, care to send a pull request?. ping. Enable is_nullable should not require a rebuild, so it's easy to do.\nPlease report a separate ticket for this.\nDisable is_nullable requires a check/rebuild. So this is hard. Deserves an own ticket.. Why is not logical replication listed among alternatives?. I talked @rtsisyk out of this idea, I hope.. This problem will be fixed with https://github.com/tarantool/tarantool/issues/2993. Set a before trigger which skips DDL if box.session.type() == applier.\nAnd create any spaces and indexes you like - they will differ in any way you like.. Please provide steps to reproduce.. No steps to reproduce for over a month. Please feel free to reopen when they appear.. This is already reflected in a more complicated issue, https://github.com/tarantool/tarantool/issues/461\ntarantoolctl is a quick fix. Whoever does this ticket, let's not forget to clean the old replica's uuid from the master as soon as we rebootstrap.\nRe name of the command: we should perhaps call it \"bootstrap\" instead of rebootstrap, since it will be usable both for bootstrap and rebootstrap.. Won't fix - an instance automatically rebootstraps itself in the patch for gh-461 which is in review.. Why should we fix it?. Until there is a clear idea what to do, it should sit on wishlist.\nWe're not following semver for an entirely different reason:\nPatch version Z (x.y.Z | x > 0) MUST be incremented if only backwards compatible bug fixes are \n  introduced. A bug fix is defined as an internal change that fixes incorrect behavior.. A pre-release version MAY be denoted by appending a hyphen and a series of dot separated identifiers immediately following the patch version. Identifiers MUST comprise only ASCII alphanumerics and hyphen [0-9A-Za-z-]. Identifiers MUST NOT be empty. Numeric identifiers MUST NOT include leading zeroes. Pre-release versions have a lower precedence than the associated normal version. A pre-release version indicates that the version is unstable and might not satisfy the intended compatibility requirements as denoted by its associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.. Won't fix - we changed the release policy.. I'm not sure we'll do it for the following reasons:\n- you complain about an effect, not the cause. What you're really asking for is to have an option which automatically removes a replica from _cluster and box.cfg{} if it's gone for a long time. As soon as we do it, xlogs will be removed automatically\n- what you're asking for, is a legal permission to shoot one self in the foot. Please monitor your replicas and tell us when they are gone. As soon as we know the replica is gone for good (it's not listed in box.cfg), we'll kill the write ahead logs we've been keeping for it.\nPutting to wishlist because now it seems to be:\n- a feature request\n- with two straightforward workarounds (cron job or manually remove a replica when it's gone)\n- the solution has a caveat - it allows one to shoot oneself in the foot\nPlease feel free to comment if you disagree.. We used to skip type checking for all but indexed fields. Now type checking is performed as soon as you specify the types in space:format{}. This is fixed now.. Please use 'strict' mode. I don't see how we can distinguish none from a non-existing variable.. If variable is nil, we use the default mode.. +1 for strict being the default.. Pushed in 1.7.7. There is an easy workaround for this - rename the file to vclcok sum found in  head -5 filename, so won't fix, sorry.. @GeorgyKirichenko, please write a summary here about your findings. After that I believe the ticket can be closed.. Please let's continue using instant messaging, the results are not reproducible on our hardware.. @zloidemon , I don't understand what exactly is the problem here? Please note that we fixed a bunch of bugs in replication in the past two weeks, including failed force_recovery. If you're missing an xlog, replication can't recover indeed. Please tell us how you got a missing xlog, so that we can look at the problem another time.. We will not do that, sorry.. To force-reload everything introduce '.so' function versioning, and bump the version to force eventual reload of all function.. First, please, this is not a data loss, this looks like an upgrade issue. Beginning with 1.7.6 we started to enforce space:format data types, so if you have a string column in space:format, you won't be able to insert a number in it.\nPlease downgrade to the original version you used, fix the conflicting data or remove space formatting, then you should be able to upgrade OK.. You could also use 'force_recovery' to skip the offending tuple, but it is of course the last resort.. Hi, no. But you can use a TLS tunnel if you need it.. Thank you for your report. . I chatted with Mons, there are several possible ways to fix, we'll meet Monday 7pm to discuss. . We need another replication_timeout variable, using the same variable for everything doesn't work.\nPlease try setting a broken box.cfg.replication second time, and you'll see that it doesn't try to reconnect, because reconnect timeout = replication timeout. This is broken, reconnect_timeout should be < replication_timeout, to allow for at least a few reconnects.. I'm already getting used to \"completely unusable\" complaints about stuff which actually works :-/. I disagree with the approach. Details are sensitive to our customers to not disclose here.. Why do you refer to table in 'stat' by name and not by id? Please use id instead.. Good to go. Let's call replication uuid 'replication_uuid' in box.cfg{}, and allow to assign it as well.\nThe assignment should work as follows:\n- at bootstrap, we use the assigned values, rather than generate values\n- at restart, we verify that assigned values mach the ones written to the snapshot, and fail if they don't match.. This is exactly what I'm saying. But cluster_uuid as name is ambiguous - I removed it from 1.7. The uuid is now called replica_set_uuid. cluster_uuid is reserved for uuid of entire sharded cluster.. I'm still not sure what should be done about this request.. The module has not been tested with Tarantool. Naturally it can make assumptions about environment which are not correct when working inside tarantool, e.g. use fork(). Do you care to investigate and submit a patch for the module?. This is a feature request and we are not planning to do it any time soon.. I believe this is a duplicate of https://github.com/tarantool/tarantool/issues/2767 Please try again.. Please provide a more detailed test case, using a fresh version of the server (1.7.6) and then reopen this bug. Thank you!. 1) Don't allow to modify the value of the primary key, correct.\n2) Right\n3) Yes\n4) The trigger takes a pair of tuples, old, new. And returns the new value of \"new\". If the new value of \"new\" is nil, then it's a delete when old is non-nil or a no-op if old is nil. Otherwise it's a replace (if old was non-nil) or an insert (if old was nil). In other words, the trigger can turn one statement into another.\n5) Let's move this discussion out, it's about the application of the feature, not the feature itself.\n6) I don't know how to solve this and this is a showstopper.. In scope of this fix, please ensure the user story described in https://github.com/tarantool/tarantool/issues/2897 works. This is tracked in http://github.com/tarantool/doc. It's fixed now.. Please add a test case and close the bug.. We don't need to know vclock any more, box.ctl.wait_rw() will handle this, no?. Let's begin with a patch for Lua library cfg.lua, and see how it goes. . There is no 1.7.x, Roman, 1.7.7 will become 1.9.0. Does not support all the platforms we need to build for.. Do you care to submit us a patch?. * Tasos Soukoulis notifications@github.com [18/01/05 23:10]:\n\nIs this desired behavior or a bug?\n\nThis is not a bug.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Please feel free to send us a patch for this.. I believe we added that, but have not documented yet.. Won't fix - will release 1.9.0 instead.. Duplicate of gh-3111. Please don't do that.. This is fixed.. This is a duplicate of https://github.com/tarantool/tarantool/issues/3076. The patch is looking good but we need to finalize the api. Please check with Mons re specific module name, API, and put into a separate module in http://github.com/moonlibs org. What would you like to check it for?. Please specify tarantool version or branch and your operating system.. turned out to be hard to do since backtrace calls mmap.. Whatever is the behaviour, we have no documentation and no tests for it. Please fix it whichever way you like (or don't fix, if you feel the current behaviour is OK), add a test case and file a documentation request.. Pushed the test cases. . Please reopen this bug if there is still a memory leak.. I added extra info on stackoverflow.. Lua libraries which use coroutines will continue working with Tarantool. The problem is not with use of coroutines, but of blocking system calls. A library using  blocking I/O rather than Tarantool fio/socket libraries doesn't work well with Tarantool built-in event loop. This is why we can't take lua-websocket, as an example.. Could you please give a link to the docs or describe the idea in  a greater detail for those who never used luvit?. Use is_nullable instead please. The docs will be updated soon. and it's in 1.7.7 only.. BTW, the ETA to respond in a ticket is a couple of weeks. If you need help, using telegram channel usually works faster.. Maybe we should simply add box.space.name.index:compact(). Sorry, we will have not time to look at this, please feel free to send us a patch.. You can specify key parts which makes any prefix of index definition. In your case valid combinations are 2 and 2,3. If you need 3 or 3, 2 as well, you need to add another index, with opposite key part order.. Hi,\ncurrently you can't log SELECTs.\nhttps://github.com/tarantool/tarantool/issues/2138\nNo feature request for a list of connections.. See also https://github.com/tarantool/tarantool/issues/1607. Please provide a test case.. Abort please, or, even better, exit quickly and remove the garbage which is left around during garbage collection. . I agree with Dmitry, never was the intent. Let's try to fix it.. @IlyaMarkovMipt please try ./test-run console console console. Moved to docs. Please make a short, clear and easy fix and close this in any branch you want.. We discussed this and agreed @zloidemon needs to re-test it with a never version.. Use 1.9 branch please.. Views belong to the same namespace as base tables in SQL. By putting their definition in a separate space, you'll have to enforce unique constraints on views/table names manually. You also may complicate access control, for the same reason - you may need to differentiate grants on views and grants on tables in access control system. Yes, views being stored in _space system space is not relational, so what. BTW, we need to make sure views are visible in Lua as spaces - otherwise they are useless in NoSQL part of the platform. . Suggestion: won't fix.. Thanks, I opened a documentation request - it's not in the docs.. This is pushed into 1.7 and upwards.. I disagree with the proposed solution for the problem. Before adding page cache let's make sure the page size is variable and higher levels are not compressed. We also need to make sure compression can be disabled for wal and vinyl, for the latter on per-index basis.. Alec, do you still care about this pull request?. + Add to this a way to detect that it's a systemd restart. @mons please provide us with steps to reproduce.. Hi Kirill, we discussed this during scrum, we need a wrapper in third_party/compat/ or in trivia/config.h, not a platform-specific define.. Please feel free to send us a patch.. What exactly is broken? nc_tarantool.c referenced is fine, it won't break anything.. This does not seem broken.. This is a duplicate of https://github.com/tarantool/tarantool/issues/1807. * cbalano notifications@github.com [18/03/12 08:38]:\n\nI issued \"tarantoolctl rocks install luacrypto\" at the OS prompt and it completed fine. But when I tried to use it,  I get an error essentially saying that luacrypto.decrypt is a non-existing index.\nTurns out that Tarantool 1.8.3 comes with its own module called luacrypto - which is nothing like the one I need to use - and that tarantool's luacrypto is actually picked up by require \"luacrypto\" evry time.\nSo my question is how can I tell Lua Interpreter to pick up luarock's luacrypto over tarantool's luacrypto?\nForking and changing the name of the luarocks library is not an\noption, because there are many other luarocks (example: luajwt)\nlisting it as a dependency, and that means changing all those\nluarocks as well to depend on the renamed library.\n\nWe don't have a built-in luacrypt module. Could you attach a short\nLua script that fails?\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. Fix the docs.. This is actually a very good idea, and we need it in SQL as well.. Yes, it would be great. Do you want to encode/decode compress in tarantool thread pool?\nCare to submit a rockspec pull request to https://github.com/tarantool/rocks?. Basically, all you need to do to integrate it is to fork it into our organization and add .travis.yml which would build it along with our docker, as well as in our rpm/deb reposytories.. 1) It's not possible to do - there are no static versions of some of the libraries we depend on.\n    linux-vdso.so.1 =>  (0x00007ffe3c72e000)\n    libicui18n.so.55 => /usr/lib/x86_64-linux-gnu/libicui18n.so.55 (0x00007f3c35bfd000)\n    libicuuc.so.55 => /usr/lib/x86_64-linux-gnu/libicuuc.so.55 (0x00007f3c35869000)\n    libreadline.so.6 => /lib/x86_64-linux-gnu/libreadline.so.6 (0x00007f3c35623000)\n    libncurses.so.5 => /lib/x86_64-linux-gnu/libncurses.so.5 (0x00007f3c35401000)\n    libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f3c351d8000)\n    libform.so.5 => /usr/lib/x86_64-linux-gnu/libform.so.5 (0x00007f3c34fc8000)\n    libssl.so.1.0.0 => /lib/x86_64-linux-gnu/libssl.so.1.0.0 (0x00007f3c34d5f000)\n    libcrypto.so.1.0.0 => /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 (0x00007f3c3491b000)\n    libcurl-gnutls.so.4 => /usr/lib/x86_64-linux-gnu/libcurl-gnutls.so.4 (0x00007f3c346ae000)\n    libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f3c344aa000)\n    librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f3c342a2000)\n    libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f3c33f99000)\n    libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f3c33d7c000)\n    libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f3c33b66000)\n    libunwind.so.8 => /usr/lib/x86_64-linux-gnu/libunwind.so.8 (0x00007f3c3394b000)\n    libunwind-x86_64.so.8 => /usr/lib/x86_64-linux-gnu/libunwind-x86_64.so.8 (0x00007f3c3372c000)\n    libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f3c333aa000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f3c32fe0000)\n    libicudata.so.55 => /usr/lib/x86_64-linux-gnu/libicudata.so.55 (0x00007f3c31529000)\n    libidn.so.11 => /usr/lib/x86_64-linux-gnu/libidn.so.11 (0x00007f3c312f6000)\n    librtmp.so.1 => /usr/lib/x86_64-linux-gnu/librtmp.so.1 (0x00007f3c310da000)\n    libnettle.so.6 => /usr/lib/x86_64-linux-gnu/libnettle.so.6 (0x00007f3c30ea4000)\n    libgnutls.so.30 => /usr/lib/x86_64-linux-gnu/libgnutls.so.30 (0x00007f3c30b74000)\n    libgssapi_krb5.so.2 => /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 (0x00007f3c3092a000)\n    liblber-2.4.so.2 => /usr/lib/x86_64-linux-gnu/liblber-2.4.so.2 (0x00007f3c3071b000)\n    libldap_r-2.4.so.2 => /usr/lib/x86_64-linux-gnu/libldap_r-2.4.so.2 (0x00007f3c304ca000)\n    libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f3c302b0000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f3c3605f000)\n    liblzma.so.5 => /lib/x86_64-linux-gnu/liblzma.so.5 (0x00007f3c3008e000)\n    libhogweed.so.4 => /usr/lib/x86_64-linux-gnu/libhogweed.so.4 (0x00007f3c2fe5b000)\n    libgmp.so.10 => /usr/lib/x86_64-linux-gnu/libgmp.so.10 (0x00007f3c2fbdb000)\n    libp11-kit.so.0 => /usr/lib/x86_64-linux-gnu/libp11-kit.so.0 (0x00007f3c2f977000)\n    libtasn1.so.6 => /usr/lib/x86_64-linux-gnu/libtasn1.so.6 (0x00007f3c2f764000)\n    libkrb5.so.3 => /usr/lib/x86_64-linux-gnu/libkrb5.so.3 (0x00007f3c2f492000)\n    libk5crypto.so.3 => /usr/lib/x86_64-linux-gnu/libk5crypto.so.3 (0x00007f3c2f263000)\n    libcom_err.so.2 => /lib/x86_64-linux-gnu/libcom_err.so.2 (0x00007f3c2f05f000)\n    libkrb5support.so.0 => /usr/lib/x86_64-linux-gnu/libkrb5support.so.0 (0x00007f3c2ee54000)\n    libresolv.so.2 => /lib/x86_64-linux-gnu/libresolv.so.2 (0x00007f3c2ec39000)\n    libsasl2.so.2 => /usr/lib/x86_64-linux-gnu/libsasl2.so.2 (0x00007f3c2ea1e000)\n    libgssapi.so.3 => /usr/lib/x86_64-linux-gnu/libgssapi.so.3 (0x00007f3c2e7dd000)\n    libffi.so.6 => /usr/lib/x86_64-linux-gnu/libffi.so.6 (0x00007f3c2e5d5000)\n    libkeyutils.so.1 => /lib/x86_64-linux-gnu/libkeyutils.so.1 (0x00007f3c2e3d1000)\n    libheimntlm.so.0 => /usr/lib/x86_64-linux-gnu/libheimntlm.so.0 (0x00007f3c2e1c8000)\n    libkrb5.so.26 => /usr/lib/x86_64-linux-gnu/libkrb5.so.26 (0x00007f3c2df3e000)\n    libasn1.so.8 => /usr/lib/x86_64-linux-gnu/libasn1.so.8 (0x00007f3c2dc9c000)\n    libhcrypto.so.4 => /usr/lib/x86_64-linux-gnu/libhcrypto.so.4 (0x00007f3c2da69000)\n    libroken.so.18 => /usr/lib/x86_64-linux-gnu/libroken.so.18 (0x00007f3c2d853000)\n    libwind.so.0 => /usr/lib/x86_64-linux-gnu/libwind.so.0 (0x00007f3c2d62a000)\n    libheimbase.so.1 => /usr/lib/x86_64-linux-gnu/libheimbase.so.1 (0x00007f3c2d41b000)\n    libhx509.so.5 => /usr/lib/x86_64-linux-gnu/libhx509.so.5 (0x00007f3c2d1d0000)\n    libsqlite3.so.0 => /usr/lib/x86_64-linux-gnu/libsqlite3.so.0 (0x00007f3c2cefb000)\n    libcrypt.so.1 => /lib/x86_64-linux-gnu/libcrypt.so.1 (0x00007f3c2ccc3000)\n2) It's not possible to do for a reason: it breaks any sane security policy.\nKonstantin, please use docker.. Won't fix.. Please add an alias in 1.10, update the docs in 1.10, remove the old alias in 2.0.. Please update. This is some very strange mistake, this is an append-only folder, I will investigate what happened.. The branch is obsolete, as is the ticket.. Pushed.. TARANTOOL_RESTARTED environment variable is set during restart in 1.10. @locker, please fix in 1.9 if it's a one-liner, it's a production issue at rambler. This is a bug in an old version of libcurl.. 1-2GB  limit on max packet size is ok. Please base the patch off the branch that matches the milestone the issue is assigned to.. This was fixed in 1.10 and I cherry-picked a fix to 1.10 (gh-3400). Moved to tarantool/doc. Won't fix.. You have been using 1.7.4 and hit a bug with broken 1.7.4 -> 1.7.5 upgrade.\nPlease upgrade manually with this script:\n```\nfunction setmap(table)                                                        \n    return setmetatable(table, { __serialize = 'map' })                       \nend                                                                           \nfunction update_existing_users_to_1_7_5()                                     \n    local def_ids_to_update = {}                                              \n    for , def in box.space._user:pairs() do                                  \n        local new_def = def:totable()                                         \n        if new_def[5] == nil then                                             \n            table.insert(def_ids_to_update, new_def[1])                       \n        end                                                                   \n    end                                                                       \n    for , id in ipairs(def_ids_to_update) do                                 \n        box.space._user:update(id, {{'=', 5, setmap({})}})                    \n    end                                                                       \nend                                                                             \nbox.space._user:run_triggers(false)                                           \nupdate_existing_users_to_1_7_5();                                             \nbox.space._user:run_triggers(true)                                              \nbox.space._space:run_triggers(false)                                          \nold_format = box.space._space:get{box.space._space.id}:totable()              \nold_format[7][6].type = 'map'                                                 \nbox.space._space:replace(old_format)                                          \nold_format = box.space._space:get{box.space._index.id}:totable()              \nold_format[7][5].type = 'map'                                                 \nbox.space._space:replace(old_format)                                          \nbox.space._space:run_triggers(true)                                             \nold_format=nil                                                                \nsetmap=nil                                                                    \nupdate_existing_users_to_1_7_5=nil                                            \nbox.snapshot() \n```. @zloidemon please provide more steps to reproduce this bug. We should not crash in any case.. That's a behaviour change in 2.x. You need to explicitly grant CREATE acl in 2.x in order to be able to create objects.. Please do in scope of MF paid task.. Please make sure the implementation does not slow down updates for everybody.. Nikita, have we really decided to be closer to Oracle, or it's an interpretation? Please provide a more extended comment, e.g. what the majority does, what the standard says? Oracle is option NN. 3. Thank you for your report. We have fixed over 100 bugs sicne 1.9.1 release. The current stable release is 1.10.2. Please upgrade and let us know if the problem re-occurs.. Accounting the total number of SQL statements is not of much use. DML, queries and DDL statements should be accounted separately at least. Let's add box.stat.sql() with a separate table of SQL stats.. The event loop stall may happen on a huge select as well, or when writing a huge tuple to WAL, then compression may take a while. A workaround for long event loop cycles is setting replication_timeout to a higher value. Besides, applier is being moved out of tx thread, so event loop stalls in tx thread will not affect it in the future. So I don't think we should fix the problem with replication disconnect: a user can change replication_timeout setting. But we do need to find this bug in sio.. Please change the signature of handle_eval_result() to avoid unpack. We may go one step forward and change the return  value convention as well.. Please find out the industry standard name for this module - talkback? And name the module accordingly. I think the word \"daemon\" is redundant, it doesn't convey too much extra info.. All configuration variable names should be in singular form. Please check the names with Elena, as well as all error messages.. Please check the message with Elena. Every line in this function can throw. How about a plan for it? You could unit-test it btw, using tap, by exporting part of the api of the daemon via box.internal, and adding a test to box-tap/ suite. This should be \"verbose\", not \"debug\". The log level should be VERBOSE. I believe \"reload\" function is invoked on each box.cfg{} invocation. Please try to avoid spurious reloads on every box.cfg invocation.. Who's going to restart this fiber if it dies? . Please double check that this doesn't block/slow things down too much. . You \"pcall\" box.info.status, in fill_report, and access it without pcall here. Please try to invoke box.info once, to minimize performance overhead, box.info has a metatable, and each time you invoke it, even to retrieve a single member, all members are filled.. ",
    "svaroqui": "Hi Konstantin ,\nSure'll do the homebrew . No need for a patch this was just for my own laptop. \nThanks again \nSt\u00e9phane .\nStephane Varoqui | Senior Consultant EMEA\nSkySQL Ab | www.skysql.com Location: Paris -France | Tel  : +33 6 95 92 64 01\nSkySQL - The first choice in affordable MySQL\u00ae Database solutions for the Enterprise and Cloud\nLe Apr 25, 2013 \u00e0 8:26 PM, Konstantin Osipov a \u00e9crit :\n\nStephane, hi again.\nThere is no bug in Darwin 10.7.6 and up. Do you think we should still take this patch into the server? Is it still important? Could you please try our homebrew recipe and see how well it works for you?\n\u2014\nReply to this email directly or view it on GitHub.\n. > - svaroqui notifications@github.com [13/04/26 15:54]:\n\nSure'll do the homebrew . No need for a patch this was just for my own laptop. \n\nHomebrew is trying to compile it as part of install, so if it breaks, it\nbreaks with homebrew as well.\nWhat laptop is it?\n\nIt's a MacBook pro Core i7\nDarwin new-host-15.home 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_6 \n\n\nhttp://tarantool.org - an efficient, extensible in-memory data store\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "IlyaM": "On Mon, Mar 18, 2013 at 5:59 PM, Konstantin Osipov <notifications@github.com\n\nwrote:\nJudging by the error message (\"Staring instances\", not \"Starting\ninstances\", you've got a rather ancient package.\nThis is perhaps a bug that has been fixed long ago.\nWhat's your server version? (tarantool_box --version)\nWhat's the server version?\n\nYou are right - apparently I'm using old version\nilya@denmark:~$ tarantool_box --version\nTarantool/Box 1.4.4\nI've just realized that package repository at\nhttp://tarantool.org/dist/ubuntu seems to contain only packages for 64 bit\nUbuntu so adding it to my apt.sources.list didn't work because I'm testing\non 32 bit Ubuntu. Instead of installing the latest version apt-get instead\ndownloaded the older version from standard Ubuntu repository. I've just\nupgraded to  1.4.8 and the problem doesn't seem to be present there.\n\nIlya Martynov, ilya@iponweb.net\nCTO IPONWEB\n. ",
    "unera": "not only numbers: each string with length=4 or length=8 will be decoded as NUM or NUM64.\ntarantool-client doesn't know anything about Your data scheme :)\n. ```\napache:[~]$ cat init.lua \nfunction server()\n    ms = box.socket.tcp()\n    ms:bind('127.0.0.1', 8080)\n    ms:listen()\nwhile true do\n    local s = ms:accept( .5 )\n    if s ~= 'timeout' then\n        print(\"accepted connection \", s)\n        print(s:readline(100, {'\\n\\n', '\\r\\n\\r\\n'}, 100))\n        s:close()\n    end\nend\n\nend\nbox.fiber.wrap(server)\napache:[~]$ cat tarantool.cfg \nprimary_port = 12345\nspace = [\n    {\n        enabled = 1,\n        index = [\n            {\n                type = TREE,\n                unique = 1,\n                key_field = [\n                    {\n                        fieldno = 0,\n                        type = STR\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n. \u043a\u0430\u043a \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438:\n1. \u0441 \u0434\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u043e\u043c \u0438 lua \u0441\u0442\u0430\u0440\u0442\u0443\u0435\u043c\n2. \u0442\u0435\u043b\u043d\u0435\u0442 \u043d\u0430 \u043f\u043e\u0440\u0442 8080\n3. \u0436\u0434\u0435\u043c 5 \u0441\u0435\u043a\n4. \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 111111 \u0438 \u0436\u043c\u0435\u043c enter\n5. \u0436\u0434\u0435\u043c \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434\n6. \u0441\u043e\u043a\u0435\u0442 \u0441\u0430\u043c \u0441\u043e\u0431\u043e\u0439 \u0437\u0430\u043a\u0440\u043e\u0435\u0442\u0441\u044f\n. See the util\n. I have no idea where I can find postgresql 8.4. \n. I think so, too.\npostgresql 8.4 is a very old release. like mysql 4.x.\nI doubt that we need to support the version\n. \u0443 \u0441\u0430\u043c\u043e\u0439 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 VZ \u044d\u0442\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0435\u0441\u0442\u044c. \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0435\u0435 \u0447\u0435\u043c 2.6.32 \u044f \u043f\u043e\u043a\u0430 VZ \u043d\u0435 \u0432\u0438\u0434\u0435\u043b (\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430 \u0432 \u0440\u0430\u0441\u0447\u0435\u0442 \u0431\u0440\u0430\u0442\u044c \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0438\u0431\u043e \u0438\u0445 \u0432\u0440\u044f\u0434\u043b\u0438 \u043a\u0442\u043e-\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u0435\u043d\u0435)\n. \u0432\u043e\u0442 \u043c\u043e\u0439\nshmpages                    19464                19495  9223372036854775807  9223372036854775807                    0\n\u0432\u0438\u0434\u043d\u043e \u0447\u0442\u043e \u0431\u0430\u0440\u044c\u0435\u0440 \u0438 \u043b\u0438\u043c\u0438\u0442 \u0441\u0442\u043e\u044f\u0442 \u0432 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \"\u043b\u0438\u043c\u0438\u0442\u0430 \u043d\u0435\u0442\" (9223372036854775807)\n\u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u0430\u0440\u0435\u043d\u044b 1Gb \u043d\u0435 \u0441\u0442\u0430\u0440\u0442\u0443\u0435\u0442.\n\u043a\u043e\u043d\u0444\u0438\u0433 - \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0439. \u0432\u0430\u0436\u0435\u043d \u0440\u0430\u0437\u043c\u0435\u0440 \u0430\u0440\u0435\u043d\u044b.\n\u0430\u0440\u0435\u043d\u0430 100\u041c\u0431 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\n. \u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0435\u0433\u043e \u043f\u043e\u0432\u044b\u0448\u0430\u043b. 1\u0413\u0438\u0433 - 2\u0413\u0438\u0433 - 4\u0413\u0438\u0433 - unlimited\n. \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e, \u0449\u0430 \u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0446\u0435\u043d\u0442\u043e\u0441\u044c \u043f\u0440\u043e\u0441\u0442\u043e\n```\nrproxy:[~/result]$ uname -a                             \nLinux rproxy 2.6.32-17-pve #1 SMP Wed Nov 28 07:15:55 CET 2012 x86_64 GNU/Linux\nrproxy:[~/result]$ sudo cat /proc/user_beancounters     \nVersion: 2.5\n       uid  resource                     held              maxheld              barrier                limit              failcnt\n      100:  kmemsize                 18502472             56995840           1951399936           2147483648                    0\n            lockedpages                     0                   16               524288               524288                    0\n            privvmpages                392380              1596201  9223372036854775807  9223372036854775807                    0\n            shmpages                   341762               341762  9223372036854775807  9223372036854775807                    0\n            dummy                           0                    0                    0                    0                    0\n            numproc                        27                   63  9223372036854775807  9223372036854775807                    0\n            physpages                  993969              1048601                    0              1048576                    0\n            vmguarpages                     0                    0  9223372036854775807  9223372036854775807                    0\n            oomguarpages               241921               419849  9223372036854775807  9223372036854775807                    0\n            numtcpsock                     13                   35  9223372036854775807  9223372036854775807                    0\n            numflock                        2                    8  9223372036854775807  9223372036854775807                    0\n            numpty                          1                    5  9223372036854775807  9223372036854775807                    0\n            numsiginfo                      0                   27  9223372036854775807  9223372036854775807                    0\n            tcpsndbuf                  226720              3249760  9223372036854775807  9223372036854775807                    0\n            tcprcvbuf                  478024              8376384  9223372036854775807  9223372036854775807                    0\n            othersockbuf                 2312                67368  9223372036854775807  9223372036854775807                    0\n            dgramrcvbuf                     0                 9248  9223372036854775807  9223372036854775807                    0\n            numothersock                   35                   50  9223372036854775807  9223372036854775807                    0\n            dcachesize               10367049             49935966            975175680           1073741824                    0\n            numfile                       317                  585  9223372036854775807  9223372036854775807                    0\n            dummy                           0                    0                    0                    0                    0\n            dummy                           0                    0                    0                    0                    0\n            dummy                           0                    0                    0                    0                    0\n            numiptent                      47                   47  9223372036854775807  9223372036854775807                    0\n```\n\u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b (1.5.1-151-g3120f1f) \u0432\u0437\u043b\u0435\u0442\u0430\u0435\u0442 \u0441 \u0430\u0440\u0435\u043d\u043e\u0439 \u0438 1G \u0438 4G\n\u0449\u0430 \u043f\u043e\u043f\u044b\u0442\u0430\u044e\u0441\u044c \u0443 \u0430\u0434\u043c\u0438\u043d\u043e\u0432 \u0432\u044b\u044f\u0441\u043d\u0438\u0442\u044c \u0447\u0435\u043c \u044f\u0434\u0440\u0430 \u0445\u043e\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043c\u043e\u0433\u0443\u0442 \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f (\u043d\u043e \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u044e \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u0435\u0440\u0443\u0442 \u0438\u0437 \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u0430\u0440\u0438\u044f \u0434\u043b\u044f \u0446\u0435\u043d\u0442\u043e\u0441\u0438)\n. \u043d\u0435\u0442 \u0434\u0435\u043b\u043e \u043d\u0435 \u0432 beancounters.\n\u0432\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f\n\u0432 beancounters \u0432\u0435\u0437\u0434\u0435 \u0432 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430\u0445 \u043d\u0443\u043b\u0438. \u0432 \u043b\u0438\u043c\u0438\u0442\u0430\u0445 - unlimited.\n- \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 VZ \u043d\u0435 \u0432\u0437\u043b\u0435\u0442\u0430\u0435\u0442 \u0441 \u0430\u0440\u0435\u043d\u043e\u0439 >= 1G\n- \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 VZ \u0432\u0437\u043b\u0435\u0442\u0430\u0435\u0442 \u0441 \u0430\u0440\u0435\u043d\u043e\u0439 >= 1G\n- \u043d\u0430 \u0442\u043e\u0439 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0437\u043b\u0435\u0442\u0430\u0435\u0442 \u0441 \u0430\u0440\u0435\u043d\u043e\u0439 >= 1G \u043f\u0440\u0438 \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u0438 \u0437\u0430\u043d\u044f\u0442\u043e\u0441\u0442\u0438 \u0430\u0440\u0435\u043d\u044b \u0432 1G \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 SIGBUS\n\u0438 \u0434\u0430\u043b\u0435\u0435\n``` txt\nrproxy:[~]$ sudo gdb /usr/bin/tarantool_box /var/lib/tarantool/snapshot/tarantool.rproxy/core\nGNU gdb (GDB) 7.4.1-debian\nCopyright (C) 2012 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/...\nReading symbols from /usr/bin/tarantool_box...Reading symbols from /usr/lib/debug/usr/bin/tarantool_box...done.\ndone.\n[New LWP 16828]\nwarning: Could not load shared library symbols for linux-vdso.so.1.\nDo you need \"set solib-search-path\" or \"set sysroot\"?\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\nwarning: no loadable sections found in added symbol-file system-supplied DSO at 0x7fffad56b000\nCore was generated by `tarantool_box: loading pri: 33020 sec: 33021 adm: 33022 rpl: 33023         '.\nProgram terminated with signal 7, Bus error.\n0  0x00007fb750e303b9 in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n(gdb) bt\n0  0x00007fb750e303b9 in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n1  0x00000000004187cc in tuple_new (format=,\nfield_count=<optimized out>, data=<optimized out>, \nend=0x7fb751dbd538 \"ate\\\":\\\"2013-10-11 23:12:27+0400\\\",\\\"oid\\\":\\\"e71cbeec300446f39365725b0d1656a3\\\",\\\"message\\\":\\\"\u0421\u043f\u0438\u0441\u0430\u043d\u043e 40, \u0440\u0430\u0437\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u043e 60\\\"}4\\b\\310,\")\nat /tmp/buildd/tarantool-1.5.1.150.g029f82f/src/box/tuple.cc:387\n\n2  0x000000000042bf80 in recover_snap_row (data=0x7fb751dbd44d)\nat /tmp/buildd/tarantool-1.5.1.150.g029f82f/src/box/box.cc:132\n\n3  recover_row (param=, row=0x7fb751dbd44d \"\\016\",\nrowlen=<optimized out>)\nat /tmp/buildd/tarantool-1.5.1.150.g029f82f/src/box/box.cc:171\n\n4  0x0000000000453893 in recover_snap (r=0x7fb751ddd1b9)\nat /tmp/buildd/tarantool-1.5.1.150.g029f82f/src/recovery.cc:317\n\n5  0x000000000042c6b1 in box_init (init_storage=false)\nat /tmp/buildd/tarantool-1.5.1.150.g029f82f/src/box/box.cc:344\n\n6  0x0000000000417413 in main (argc=1, argv=)\nat /tmp/buildd/tarantool-1.5.1.150.g029f82f/src/tarantool.cc:887\n\n(gdb) \n```\n\u043f\u0440\u0438 \u044d\u0442\u043e\u043c beancounters \u0433\u0434\u0435 \u0432\u0441\u0435 \u044d\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0447\u0438\u0441\u0442\u044b\u0435:\n``` txt\nrproxy:[~]$ sudo cat /proc/user_beancounters \nVersion: 2.5\n       uid  resource                     held              maxheld              barrier                limit              failcnt\n      100:  kmemsize                 15971222             56995840           1951399936           2147483648                    0\n            lockedpages                     0                   16               524288               524288                    0\n            privvmpages                 14773              1748852  9223372036854775807  9223372036854775807                    0\n            shmpages                     1410               866690  9223372036854775807  9223372036854775807                    0\n            dummy                           0                    0                    0                    0                    0\n            numproc                        26                   66  9223372036854775807  9223372036854775807                    0\n            physpages                  777145              1048601                    0              1048576                    0\n            vmguarpages                     0                    0  9223372036854775807  9223372036854775807                    0\n            oomguarpages                 4422               419849  9223372036854775807  9223372036854775807                    0\n            numtcpsock                      9                   35  9223372036854775807  9223372036854775807                    0\n            numflock                        2                    8  9223372036854775807  9223372036854775807                    0\n            numpty                          2                    5  9223372036854775807  9223372036854775807                    0\n            numsiginfo                      0                   27  9223372036854775807  9223372036854775807                    0\n            tcpsndbuf                  164688              3249760  9223372036854775807  9223372036854775807                    0\n            tcprcvbuf                  147456              8376384  9223372036854775807  9223372036854775807                    0\n            othersockbuf                 4624                67368  9223372036854775807  9223372036854775807                    0\n            dgramrcvbuf                     0                 9248  9223372036854775807  9223372036854775807                    0\n            numothersock                   36                   50  9223372036854775807  9223372036854775807                    0\n            dcachesize               11424492             49935966            975175680           1073741824                    0\n            numfile                       330                  660  9223372036854775807  9223372036854775807                    0\n            dummy                           0                    0                    0                    0                    0\n            dummy                           0                    0                    0                    0                    0\n            dummy                           0                    0                    0                    0                    0\n            numiptent                      47                   47  9223372036854775807  9223372036854775807                    0\n```\n\u0442\u043e \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 mmap(SHARED) \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u043d\u0435 beancounters\n. \u0432\u043e\u0442 \u0442\u0430\u043a\u043e\u0439 \u0442\u0435\u0441\u0442:\n``` c\nnb:[~]$ cat mmap.c \ninclude \ninclude \ninclude \ndefine ARENA_SIZE  (3ULL * 1024 * 1024 *1024)\nint\nmain(const char argv, int argc)\n{\n    puts(\"Try mmap arena\");\n    char a = mmap(NULL, ARENA_SIZE, PROT_READ | PROT_WRITE,\n        MAP_SHARED | MAP_ANONYMOUS, -1, 0);\n    if (a == MAP_FAILED) {\n        perror(\"mmap\");\n        return -1;\n    }\n    puts(\"Try fill arena with data\");\nsize_t i;\nfor (i = 0; i < ARENA_SIZE; i++)\n    a[i] = (char)i;\n\nputs(\"Arena was filled\");\n\nsize_t cksum = 0;\nfor (i = 0; i < ARENA_SIZE; i++)\n    cksum += a[ ARENA_SIZE - i - 1 ];\nprintf(\"cksum %zu\\n\", cksum);\nreturn 0;\n\n}\n```\n\u0442\u0430\u043a\u043e\u0439 \u043b\u043e\u0433 \u043f\u043e\u0434 VZ:\n``` txt\nrproxy:[~]$ ulimit -c unlimited\nrproxy:[~]$ ./mmap           \nTry mmap arena\nTry fill arena with data\nzsh: bus error (core dumped)  ./mmap\nrproxy:[~]$ echo bt|gdb ./mmap core \nGNU gdb (GDB) 7.4.1-debian\nCopyright (C) 2012 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/...\nReading symbols from /home/unera/mmap...(no debugging symbols found)...done.\n[New LWP 21891]\nwarning: Could not load shared library symbols for linux-vdso.so.1.\nDo you need \"set solib-search-path\" or \"set sysroot\"?\nCore was generated by `./mmap'.\nProgram terminated with signal 7, Bus error.\n0  0x000000000040064a in main ()\n(gdb) #0  0x000000000040064a in main ()\n(gdb) quit\n```\n\u0432\u043d\u0435 VZ \u0442\u0435\u0441\u0442 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442.\n\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e \u0432\u044b\u044f\u0441\u043d\u0435\u043d\u043e \u0447\u0442\u043e \u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0438 \u0437\u0430\u044e\u0437\u0430\u043d\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432 1Gb\n\u0431\u0438\u043d\u043a\u0430\u0443\u043d\u0442\u0435\u0440\u044b \u0432\u044b\u0448\u0435 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 - \u043d\u0438 \u043e\u0434\u0438\u043d \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\n. http://k001.livejournal.com/811864.html?thread=5180504#t5180504\n. \u044f\u0434\u0440\u043e 2.6.32-17 (Centos)\n. \u043e\u0431\u043d\u043e\u0432\u0438\u043b\u0438 \u044f\u0434\u0440\u043e \u0434\u043e 2.6.32-114.\n\u0432\u043a\u043b\u044e\u0447\u0438\u043b\u0438 swap\n\u043f\u043e\u0438\u0433\u0440\u0430\u043b\u0438\u0441\u044c \u0441 \u043e\u043f\u0446\u0438\u044f\u043c\u0438 /proc/sys/vm/overcommit_memory = 0/1, overcommit_ratio = 0, 50, 100\nSIGBUS \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0438 1Gb \u0440\u0443\u0431\u0435\u0436\u0430\n. Debian doesn't use -dbg packages since 1.5.2.16\n. a test case showed problem in fibers\n. 1. ./ \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \u043b\u0443\u0447\u0448\u0435 \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0442\u043e\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u0435\u0449\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0433\u0435\u043c\u043e\u0440\u0440\u043e\u0439 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441\u0442\u0440\u043e\u043a\u0443 \u0448\u0435\u0431\u0430\u043d\u0433\u0430 \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430 (\u0432\u0441\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442 \u0442\u0435\u0441\u0442\u044b \u0432 \u0441\u0432\u043e\u0438\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u0445)\n2. \u0432\u043e \u0432\u0441\u0435\u043c unix \u043c\u0438\u0440\u0435 \u0448\u0435\u0431\u0430\u043d\u0433 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440.\n   \u0430 \u0443 \u043d\u0430\u0441 \u0440\u0435\u0447\u044c \u0438\u0434\u0435\u0442 \u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0435\n. \u043a\u043e\u0433\u0434\u0430 \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e\n``` bash\n!/bin/bash\necho 123\n```\n\u0442\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0441\u043a\u0440\u0438\u043f\u0442 \u0432 \u0432\u0438\u0434\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0431\u0430\u0448\u0443\n/bin/bash /path/to/script.name\n\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0443, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0432 \u0448\u0435\u0431\u0430\u043d\u0433\u0435.\nso \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 shebang \u0434\u043b\u044f \u0438\u043c\u0435\u043d\u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 - \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0438 \u044f \u0435\u0433\u043e \u0432\u044b\u043f\u0438\u043b\u044e \u0432 \u0442.\u0447. \u0438 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u043e\u0432 tarantool.cc, \u043d\u043e \u0435\u0441\u043b\u0438 \u0442\u0435\u0431\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \u0441\u043b\u043e\u0432\u043e shebang \u043f\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 - \u044f \u043d\u0435 \u043d\u0430\u0441\u0442\u0430\u0438\u0432\u0430\u044e\n. \u0434\u0430 \u0438 \u0432\u043e\u0442 \u0435\u0449\u0435 \u0447\u0442\u043e, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432 \u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u043f\u043e\u0440\u0442 \u0437\u0430\u043d\u043e\u0432\u043e, \u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0430 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0448\u0435\u0431\u0430\u043d\u0433\u043e\u043c \u043d\u0435\u0442, \u0442\u043e \u0445\u043e\u0440\u043e\u0448\u043e \u0431\u044b primary_port \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u0430.\n\u0442\u043e \u0435\u0441\u0442\u044c \u0432 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0437\u0430\u043f\u0443\u0441\u043a \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a:\n/path/to/tarantool_box $script_name $primary_port $secondary_port $admin_port $replica_port\n\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0441\u043b\u0435 $script_name \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b (\u0442\u043e\u0433\u0434\u0430 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b \u0431\u0443\u0434\u0435\u0442 \u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0434\u043b\u044f \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430 \u043f\u043e\u0440\u0442\u0430\u0445)\n. \u044d\u0442\u0430 \u0444\u0438\u0447\u0430 \u043d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430 \u0431\u0443\u0434\u0435\u0442 \u0434\u0430\u043b\u0435\u0435 \u0443 \u043d\u0430\u0441 - \u043b\u0443\u0430\u0441\u043a\u0440\u0438\u043f\u0442 \u0441 \u0448\u0435\u0431\u0430\u043d\u0433\u043e\u043c. \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u044b \u0412\u0421\u0415 \u0442\u0435\u0441\u0442\u044b \u0432 \u0438\u0442\u043e\u0433\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u043e\u043f\u0446\u0438\u0438 (\u043c\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f script) \u043a\u0440\u043e\u043c\u0435 \u044e\u043d\u0438\u0442\u0442\u0435\u0441\u0442\u043e\u0432\n. \u0441\u0435\u0439\u0447\u0430\u0441 \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u0440\u0442\u043e\u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 tarantool.cfg, \u0430 \u043d\u0430\u0434\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0449\u0435 \u0442\u043e \u0447\u0442\u043e \u044f \u0432\u044b\u0448\u0435 \u043e\u043f\u0438\u0441\u0430\u043b: \u0447\u0442\u043e\u0431\u044b \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u0440\u0442\u043e\u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u043b\u0438\u0441\u044c \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \n. 1.5 has no command 'show index'\nI made all commands that were in 1.5\n- show slab  - \\m (and \\m+)\n- show stat - \\s\n- show spaces (not in 1.5) - \\d (and \\d[S][+])\n- show fiber - \\f[+]\n- show index - \\i space_name\n. show info - will be realised after box.info will be extracted from box\nshow config - do we need shortcut for the option? I can add \\c shortcut.\n. > I can see \"show index\", it is a documented client request.\nYes, I see, too.\nIt was added in latest 1.5 version.\n```\nindex:\nspace: 0 memsize: 140 index:\n    { n: 0, keys: 2, memsize: 140 } memsize: 140 ... \"\n\n```\nI don't know what is memsize. I'll look through the code tomorrow.\n. ``` txt\n0  0x00007f4bd56411d5 in raise () from /lib/x86_64-linux-gnu/libc.so.6\n(gdb) #0  0x00007f4bd56411d5 in raise () from /lib/x86_64-linux-gnu/libc.so.6\n1  0x00007f4bd5644388 in abort () from /lib/x86_64-linux-gnu/libc.so.6\n2  0x000000000041b106 in sig_fatal_cb (signo=11)\nat /home/unera/work/tarantool/src/tarantool.cc:220\n\n3  \n4  0x0000000000481b18 in mp_decode_strl (data=0x7f4bd501fe10)\nat /home/unera/work/tarantool/src/lib/msgpuck/msgpuck.h:1536\n\n5  0x000000000042b8e7 in execute_auth (request=0x7f4bd5040188)\nat /home/unera/work/tarantool/src/box/request.cc:222\n\n6  0x000000000041c74c in process_rw (port=0x7f4bd501feb0,\nrequest=0x7f4bd5040188) at /home/unera/work/tarantool/src/box/box.cc:94\n\n7  0x000000000045cc38 in iproto_process_dml (ireq=0x7f4bd5040120)\nat /home/unera/work/tarantool/src/iproto.cc:695\n\n8  0x000000000045b761 in iproto_queue_handler(typedef __va_list_tag __va_list_tag *) (ap=0x7f4bd5000110) at /home/unera/work/tarantool/src/iproto.cc:209\n9  0x000000000044cf83 in fiber_loop (data=0x0)\nat /home/unera/work/tarantool/src/fiber.cc:379\n\n10 0x000000000049045e in coro_init ()\nat /home/unera/work/tarantool/third_party/coro/coro.c:95\n\n(gdb) quit\n```\n. \u044d\u0442\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0433\u0440\u043e\u0445\u043d\u0443\u043b\u0438 \u0433\u0434\u0435-\u0442\u043e \u043d\u0430 \u0441\u0442\u0430\u0434\u0438\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043e\u0442 \u0432\u0435\u0440\u0441\u0438\u0439 1.4 \u043a 1.5\n\u043a\u043b\u0438\u0435\u043d\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u0432 \u043e\u0434\u043d\u043e\u043c h-\u0444\u0430\u0439\u043b\u0435, so-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u043d\u0435\u0442\u0443\n. it was fixed when the package was renamed.\n. FHS defines several directories for PID-files. /var/lib is not fit for PID-file.\n. > return {} => ? - [] (no tuples)\n\nreturn {1} => [[1]] vs [[[1]]] ? - unrecognizable xception \nreturn {1, 2, 3} => [[1], [2], [3] ] vs [ [1, 2, 3]] ? - unrecognizable xception \n. \u043d\u0430\u0434\u043e \u043d\u0430\u0432\u0435\u0440\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a:\n1. \u0435\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0438\u043b\u0430 0 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 1 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0442\u043e \u043e\u0431\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0435\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443\n2. \u0435\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0438\u043b\u0430 1 (\u043e\u0434\u043d\u0443) \u041d\u0415 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 (\u0432 \u0442.\u0447. \u0445\u0435\u0448), \u0442\u043e \u043e\u0431\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0435\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443\n3. \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u043b\u0438 \u043e\u0431\u0435\u0440\u0442\u043a\u0443 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0444\u043b\u0430\u0433 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u043e \u0442\u043e\u043c \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e (\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 \u0442\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u0436\u0435 \u0441\u043f\u0438\u0441\u043e\u0447\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442)\n4. \u0438\u0434\u0435\u043c \u043f\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0438 \u043f\u0430\u043a\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:\n   - \u0441\u043a\u0430\u043b\u044f\u0440\u044b \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0430\u043a \u0435\u0441\u0442\u044c\n   - \u0445\u0435\u0448\u0438 \u043f\u0430\u043a\u0443\u0435\u043c \u0432 map\n   - \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u043f\u0430\u043a\u0443\u0435\u043c \u0432 array\n   - \u0442\u0430\u043f\u043b\u044b \u043f\u0430\u043a\u0443\u0435\u043c \u0432 array\n\n\u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c\n- return \u0438 return {} \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u044b\n- return a \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u0435\u043d return {a} \u0435\u0441\u043b\u0438 a \u044d\u0442\u043e \u0441\u043a\u0430\u043b\u044f\u0440 \u0438\u043b\u0438 \u0445\u0435\u0448\n- return 1,2,3 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u0435\u043d return {1,2,3}\n. > -  - box.digest\nI think that You have wrong revision of source.\nTry git pull last master and try remove cmake cache \n. It was closed long ago (#397 - the same), sorry \n. its not a bug is a feature, drop branch\n. Old API was removed.\n. Not in the life.\n. 1. remote.space will appear after reading two remote spaces: _indexes, _spaces\n2. these permissions should be already exists at connection time\n. It is not a bug :)\ndelimiters are regexps.\n. The behaviour can be wrong: it can remove socket of the other undead server.\n. It behaviour like Lehman's push_read, full string allows to check eof's and the other cases.\n. If EOL is not included in data, You will not be able to check if the block is the last or not.\n. Russian documentation here.\n@pgulutzan, please add English version of the documentation.\n. Fixed 05c31233f3ba28b0b079cc2786a4f1fddd2b21c6\n. Russian version here\n. The latest master\n``` log\nProgram terminated with signal 6, Aborted.\n0  0x00002b13739853a9 in __GI_raise (sig=sig@entry=6)\nat ../nptl/sysdeps/unix/sysv/linux/raise.c:56\n\n56      ../nptl/sysdeps/unix/sysv/linux/raise.c: \u041d\u0435\u0442 \u0442\u0430\u043a\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430.\nwarning: File \"/home/unera/work/tarantool/.gdbinit\" auto-loading has been declined by your `auto-load safe-path' set to \"$debugdir:$datadir/auto-load\".\nTo enable execution of this file add\n        add-auto-load-safe-path /home/unera/work/tarantool/.gdbinit\nline to your configuration file \"/home/unera/.gdbinit\".\nTo completely disable this security protection add\n        set auto-load safe-path /\nline to your configuration file \"/home/unera/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n        info \"(gdb)Auto-loading safe path\"\n(gdb) bt\n0  0x00002b13739853a9 in __GI_raise (sig=sig@entry=6)\nat ../nptl/sysdeps/unix/sysv/linux/raise.c:56\n\n1  0x00002b13739884c8 in __GI_abort () at abort.c:89\n2  0x00002b137397e4c6 in __assert_fail_base (\nfmt=0x2b1373ab5668 \"%s%s%s:%u: %s%sAssertion `%s' failed.\\n%n\", \nassertion=assertion@entry=0x574583 \"rc != 0\", \nfile=file@entry=0x574572 \"store/ss_track.c\", line=line@entry=62, \nfunction=function@entry=0x57458b <__PRETTY_FUNCTION__.6442> \"ss_trackcmp\")\nat assert.c:92\n\n3  0x00002b137397e572 in __GI___assert_fail (assertion=0x574583 \"rc != 0\",\nfile=0x574572 \"store/ss_track.c\", line=62, \nfunction=0x57458b <__PRETTY_FUNCTION__.6442> \"ss_trackcmp\") at assert.c:101\n\n4  0x0000000000479b6f in ss_trackcmp (a=0xddc460, b=0xddc468, c=0xe007f8)\nat store/ss_track.c:62\n\n5  0x0000000000482514 in sr_qsort (a=0xddc460, n=3, es=8,\ncmp=0x479ac6 <ss_trackcmp>, arg=0xe007f8) at rt/sr_qsort.c:123\n\n6  0x0000000000479bb9 in ss_tracksort (t=0xddc2d8, cmp=0xe007f8)\nat store/ss_track.c:68\n\n7  0x0000000000472ece in sd_recover (db=0xe008b8, s=0xddc2d8)\nat database/sd.c:50\n\n8  0x000000000045afa0 in se_dbopen (o=0xe007c0, args=0x2b137481f958)\nat env/se_db.c:207\n\n9  0x0000000000457626 in sp_open (o=0xe007c0) at env/sophia.c:59\n10 0x0000000000433076 in SophiaIndex::SophiaIndex (this=0xe00730,\nkey_def_arg=0xdd9050)\nat /home/unera/work/tarantool/src/box/sophia_index.cc:138\n\n11 0x0000000000431fa1 in SophiaFactory::createIndex (this=0xddaa70,\nkey_def=0xdd9050)\nat /home/unera/work/tarantool/src/box/engine_sophia.cc:138\n\n12 0x00000000004348c8 in space_new (def=0x2b13748091f0,\nkey_list=0x2b1374809240) at /home/unera/work/tarantool/src/box/space.cc:106\n\n13 0x00000000004535cd in alter_space_do (txn=0x2b13748090b8,\nalter=0x2b13748091e0, old_space=0xdfd120)\nat /home/unera/work/tarantool/src/box/alter.cc:439\n\n14 0x0000000000454c69 in on_replace_dd_index (event=0x2b13748090b8)\nat /home/unera/work/tarantool/src/box/alter.cc:1114\n\n15 0x000000000043a1d9 in trigger_run (list=0xddfe78, event=0x2b13748090b8)\nat /home/unera/work/tarantool/src/trigger.h:60\n\n16 0x000000000043aab5 in txn_replace (txn=0x2b13748090b8, space=0xddfe50,\nold_tuple=0x0, new_tuple=0x2b1374c04e88, mode=DUP_INSERT)\nat /home/unera/work/tarantool/src/box/txn.cc:110\n\n17 0x00000000004389c9 in execute_replace (request=0x2b137481fe10,\nport=0x2b137481fe60) at /home/unera/work/tarantool/src/box/request.cc:63\n\n18 0x000000000041ea06 in process_rw (port=0x2b137481fe60,\nrequest=0x2b137481fe10) at /home/unera/work/tarantool/src/box/box.cc:81\n\n19 0x000000000044008a in lbox_insert (L=0x40903ac8)\nat /home/unera/work/tarantool/src/box/lua/call.cc:324\n\n20 0x0000000000520f0c in lj_BC_FUNCC ()\n21 0x000000000050b9ba in lua_call ()\n22 0x00000000004a32d5 in lbox_call (L=0x40903ac8, nargs=1, nreturns=-1)\nat /home/unera/work/tarantool/src/lua/utils.h:213\n\n23 0x00000000004a3c3a in box_lua_fiber_run_detached(typedef __va_list_tag __va_list_tag *) (ap=0x2b1374800128)\nat /home/unera/work/tarantool/src/lua/fiber.cc:273\n\n24 0x0000000000485139 in fiber_loop (data=0x0)\nat /home/unera/work/tarantool/src/fiber.cc:391\n\n25 0x00000000004d1d57 in coro_init ()\nat /home/unera/work/tarantool/third_party/coro/coro.c:95\n\n(gdb) \n. It is old socket bug: it must be wakeup all fibers that read/write the socket if it is closed.\n. It seems the same problem: https://github.com/tarantool/tarantool/issues/364\n. systemd for idiots\n. @bigbes, open new ticket, i dont want see my tickets here\n. manpage is created, wiki page ASAP\n. Russian documentation [here](https://github.com/tarantool/tarantool/wiki/%D0%9E%D1%81%D0%BD%D0%B0%D1%81%D1%82%D0%BA%D0%B0-%D0%B4%D0%BB%D1%8F-init.d)\n. socket:read is fixed, next is the httpd problem\n. lua\n!tarantool\nfio = require 'fio'\nlog = require 'log'\nfh = fio.open('/etc/passwd', {'O_RDONLY'}, 0)\nlog.info(\"/etc/passwd len: %d\", #(fh:read(32768)))\nfh:close()\ndir = fio.tempdir()\nlog.info(\"use tempdir: %s\", dir)\nlogfile = fio.pathjoin(dir, \"tarantool.log\")\nlog.info(\"logfile: %s\", logfile)\nbox.cfg{\n    wal_dir     = dir,\n    snap_dir    = dir,\n    work_dir    = dir,\n    background  = true,\n    pid_file    = fio.pathjoin(dir, 'tarantool.pid'),\n    logger      = logfile\n}\nlog.info(\"server is started\")\nfh = fio.open('/etc/passwd', {'O_RDONLY'}, 0)\nlog.info(\"/etc/passwd len: %d\", #(fh:read(32768)))\nfh:close()\n```\neio creates threads on demand.\nIf You use any eio methods before box.cfg, these threads will be already created.\nA child will not be able use these threads because fork doesn't create/copy them.\nSo our fork need reinit eio.\n. Unreproducible.\nI have no idea how to configure snap_daemon to reproduce the bug.\nCould You show me Your box.cfg{table} and tarantool version?\n. > c = net.new('test:test@localhost:3303')\nnet.box is not provided uri-syntax yet\n. Wrong documentation.\nIt should be rewritten:\n1. snapshot_count=0 disables cleanup wal/snap directories (.xlog and .snap won't be removed). Snapshots will be created using snapshot_period option.\n2. snapshot_period=0 disables snapshot daemon.\n@pgulutzan could You fix documentation?\n. > snapshot daemon starts even if both variables are 0:\nstarts (init) and sleeps until box.cfg{snapshot_option} wakeup the daemon.\nDo You want remove the log message?\n. You are testing old version of tarantool.\nThe problem was solved several commits ago.\nHere You can see tests\nHere You can see results\n. ```txt\n0  0x4e68c9 in print_backtrace+9\n1  0x4ceb29 in tarantool_panic_handler+29\n2  0x500823 in lj_err_throw+73\n3  0x500a1b in lj_err_mem+3b\n4  0x500478 in lj_mem_realloc+48\n5  0x502d35 in lj_tab_resize+f5\n6  0x5030ad in rehashtab+1ad\n7  0x4fff5d in gc_onestep+59d\n8  0x500134 in lj_gc_step+54\n9  0x50d368 in lua_pushcclosure+e8\n10 0x4c0b63 in box_lua_call+43\n11 0x4bf249 in box_process_call+129\n12 0x410b42 in _ZL15tx_process_callP4cmsg+d2\n13 0x4e8194 in cmsg_deliver+14\n14 0x4e8d19 in fiber_pool_f+c9\n15 0x40e73c in ZL16fiber_cxx_invokePFiP13__va_list_tagES0+c\n16 0x4e3630 in fiber_loop+30\n17 0x613f3f in coro_init+3f\n18 (nil) in +3f\n2018-03-24 06:08:56.351 [24160] main/134492/main C> not enough memory\n```\n\nI don't select more than 150 tuples per select\nI don't use iproto select/insert/etc, only iproto lua call\nThe application doesn't use any fibers.\ndatabase size - 26 Mb, arena 6Gb, Host RAM - 10Gb\n\ntuple example:\n```\n\n\n\n[1, '7637666', 'da4cebb246c8fe108ca0ff12c5a52a06', 1521021450, 37.657672, 55.823722,\n    'cancelled_user']\n\n\n[2, '7640375', 'ed5b3a4784628a6e5bde1479676db882', 1521021444, 37.523618, 55.773072,\n    'cancelled_user']\n...\n```\n\nbefore dead situation (box.runtime):\n. nobody cares\n. nobody cares\n. don't reopen my tickets.\nI needn't the feature anymore\n. also it would be nice to create/alter space in nested transactions #599\n. It was an jubilee ticket: #600\n. nobody cares\n. > Raw idea: index:select({from, to}, { iterator = 'BETWEEN'} )\nRaw idea: index:select({from}, { iterator = 'LT|GT|LE|GE', to = {to}}). writeable - \u0442\u0430\u043a\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 \u043d\u0435\u0442 \u0432 \u043e\u043b\u0431\u0430\u043d\u0441\u043a\u043e\u043c \u0435\u0437\u044b\u043a\u0430\n\u0435\u0441\u0442\u044c writable\n\u043a\u0441\u0442\u0430\u0442\u0438 \u0443 \u041c\u0430\u0440\u043a\u0430 \u041b\u0435\u043c\u0430\u043d\u0430 \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0442\u043e\u0436\u0435 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f writable\n. Yesterday discussion. There was my test case here. if You change tarantool's default user, You should change user/group in /etc/logrotate.d/tarantool.d, too.\n. Also tarantool should start event loop if replication_source is unavailavle.. The problem is reproducible for methods\n- ping\n- call_lua\nMethods work properly:\n- select\nThe other methods are not tested.\n. Sorry for my mistake.\n. \nlua\nbox.cfg{\n    memtx = {\n        dir = <path>; -- box.cfg.snap_dir\n        memory = <bytes>; -- box.cfg.slab_alloc_arena\n        ?? alloc_minimal = <bytes>; -- box.cfg.slab_alloc_minimal\n        ?? alloc_maximal = <bytes>; -- box.cfg.slab_alloc_maximal\n        snapshot_count = <integer>; -- box.cfg.snapshot_count;\n        snapshot_period = <float>; -- box.cfg.snapshot_period;\n        ?? panic_on_error = <bool>; -- box.cfg.panic_on_snap_error\n    };\n\nEvil! hellish inferno!\nMemtx is tarantool's mainstream, so it would be nice keep these options at root config hash.\nDo not break backward compatibility!\nit is a bad practice. > It is not possible technically in Lua :(\n\u041f\u043e\u0447\u0435\u043c\u0443?\n\u044f \u0434\u0443\u043c\u0430\u044e \u043d\u0430\u0434\u043e \u0448\u0438\u0440\u0435 \u0438\u0434\u0442\u0438:\n\u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043d\u0441\u0442\u0430\u043d\u0441\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435 \u0434\u0432\u0430, \u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432:\n\nreadonly (\u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043f\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043d\u043e \u043d\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0435\u043f\u043b\u0438\u043a\u0435)\nreadwrite\ninaccessible - \u043d\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c (\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u043f\u043b\u0438\u043a\u0430\u043c)\n\n\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u0412 \u041b\u042e\u0411\u041e\u0419 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u044c \u0438\u043d\u0441\u0442\u0430\u043d\u0441 \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0435\u0439\u0442\u0430\u043c\u0438.\n\u0414\u0430\u043b\u0435\u0435:\n\n\u0434\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0442\u0440\u0438\u0433\u0433\u0435\u0440 \u043d\u0430 \u043a\u043e\u043d\u043d\u0435\u043a\u0442/\u0434\u0438\u0441\u043a\u043e\u043d\u043d\u0435\u043a\u0442 \u0440\u0435\u043f\u043b\u0438\u043a\n\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u0443 \u043f\u043e \u0441\u0442\u0435\u0439\u0442\u0443 \u0432\u0441\u0435\u0445 \u0440\u0435\u043f\u043b\u0438\u043a: \u043f\u0440\u0438\u043a\u043e\u043d\u043d\u0435\u043a\u0447\u0435\u043d\u0430 \u0438\u043b\u0438 \u043d\u0435\u0442\n\n\u0418 \u0434\u0430\u043b\u0435\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 box.cfg \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0434\u0435\u0440\u0433\u0430\u0435\u0442\u0441\u044f \u0438\u0437 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u0430.\n\u0422\u043e\u0433\u0434\u0430:\n\n\u0421\u0442\u0430\u0440\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435: \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u0432 rw\n\u0422\u0435\u043a\u0443\u0449\u0435\u0435 (\u0440\u0435\u043f\u043b\u0438\u043a\u0438 \u043d\u0435\u044e\u0437\u0430\u0431\u0435\u043b\u044c\u043d\u044b): \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u0432 rw \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u0432\u0441\u0435 \u0440\u0435\u043f\u043b\u0438\u043a\u0438 \u0432 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0435 \u043f\u043e\u043c\u0435\u0447\u0435\u043d\u044b \u043a\u0430\u043a \u043f\u0440\u0438\u043a\u043e\u043d\u043d\u0435\u043a\u0442\u0438\u0432\u0448\u0438\u0435\u0441\u044f\n\u041c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u0438 \u0441 \u043a\u0432\u043e\u0440\u0443\u043c\u0430\u043c\u0438: \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 \u043f\u0440\u0438\u043a\u043e\u043d\u043d\u0435\u043a\u0447\u0435\u043d\u043d\u044b\u0445\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438\n\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0444\u0438\u0447\u0443 \u0431\u0435\u0437\u043f\u0440\u043e\u0441\u0442\u043e\u0439\u043d\u043e\u0433\u043e \u0430\u043f\u0433\u0440\u0435\u0439\u0434\u0430 \u0411\u0414:\n\n\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 inaccessible\n\u0430\u043f\u0433\u0440\u0435\u0439\u0434\u0438\u043c/\u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c\n\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 ro/rw\n\n\u0441\u0442\u0430\u0442\u0443\u0441 inaccessible:\n\n\u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u0440\u0435\u043f\u043b\u0438\u043a \u0432 \u043e\u0431\u044b\u0447\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435\n\u043f\u0440\u043e\u0447\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 iproto \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442 \u0432\u044b\u0447\u0438\u0442\u043a\u0443 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440 \u043f\u043e\u043a\u0430 \u0440\u0435\u043f\u043b\u0438\u043a\u0430 \u043d\u0435 \u0441\u0442\u0430\u043d\u0435\u0442 readonly \u0438\u043b\u0438 readwrite\n\n\u043a\u0430\u043a-\u0442\u043e \u0442\u0430\u043a \u043d\u0430\u0434\u043e \u0434\u0435\u043b\u0430\u0442\u044c.\n\u043d\u043e \u043f\u0440\u0435\u0436\u0434\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0430\u0434\u043e \u0431\u044b \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u044c \u043c\u0430\u0441\u0442\u0435\u0440-\u043c\u0430\u0441\u0442\u0435\u0440 \u0440\u0435\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u044e. \u0410 \u0442\u043e \u0442\u0438\u043a\u0435\u0442 \u0437\u0430\u043a\u0440\u044b\u043b\u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0445\u043e\u0440\u043e\u0448\u043e. \u041d\u043e \u0440\u0435\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u044e\u0437\u0430\u0431\u0435\u043b\u044c\u043d\u0435\u0435 \u043d\u0435 \u0441\u0442\u0430\u043b\u0430. ### Example 1\nBackup/reserve replica, that is used for only backups.\nExample 2\nMemcache-like applications (for example: each backend has its own RO replica, so backend can be turned on/off)\nPS: It would be nice if temporary spaces was accessible as readwrite.. Example box.cfg option:\nlua\nbox.cfg{\n    cluster = false,\n}\nThe replica will not be present in _cluster space.\n. box.session.storage destructor is broken:\n```txt\n\nc = 0 for sid in pairs(getmetatable(box.session).aggregate_storage) do if not box.session.exists(sid) then c = c + 1 end end\n\n\n...\n> c\n\n12602\n```. cleanup test case:\n\n```lua\n!/usr/bin/tarantool\nbox.cfg{ listen = 3302 }\nbox.schema.user.create('test', { password = 'test', if_not_exists = true })\nbox.schema.user.grant('test', 'read,write,execute', 'universe', nil, {if_not_exists=true})\nlocal r = require 'net.box'\nlocal log = require 'log'\nlocal fiber = require 'fiber'\nlocal json = require 'json'\nlocal uri = 'test:test@localhost:3302'\nlocal no = 0\nwhile true do\n    local c = r.connect(uri)\nc:eval [[\n    for i = 1, 10000 do\n        box.session.storage[i] = math.random()\n    end\n]]\n\n\nno = no + 1\n\nif no % 1000 == 0 then\n    local info = box.runtime.info()\n    log.info('%6d: Lua mem: %10d, used: %10d',\n        no / 1000, info.lua, info.used)\nend\n\nif no % 10000 == 0 then\n    log.info('%6d: Collecting garbage', no / 1000)\n    collectgarbage('collect')\nend\n\nc:close()\n\nend\n```\nresult:\n```txt\n2018-03-25 18:47:57.889 [29750] main/101/leak.lua C> version 1.7.2-388-g51c2d55\n2018-03-25 18:47:57.889 [29750] main/101/leak.lua C> log level 5\n2018-03-25 18:47:57.889 [29750] main/101/leak.lua I> mapping 1073741824 bytes for tuple arena...\n2018-03-25 18:47:57.890 [29750] main/101/leak.lua I> recovery start\n2018-03-25 18:47:57.890 [29750] main/101/leak.lua I> recovering from ./00000000000000000000.snap'\n2018-03-25 18:47:57.893 [29750] main/101/leak.lua I> recover from./00000000000000000000.xlog'\n2018-03-25 18:47:57.893 [29750] main/101/leak.lua I> done ./00000000000000000000.xlog'\n2018-03-25 18:47:57.893 [29750] main/101/leak.lua I> recover from./00000000000000000002.xlog'\n2018-03-25 18:47:57.894 [29750] main/101/leak.lua I> done ./00000000000000000002.xlog'\n2018-03-25 18:47:57.894 [29750] main/102/hot_standby I> recover from./00000000000000000002.xlog'\n2018-03-25 18:47:57.894 [29750] iproto/102/iproto I> binary: started\n2018-03-25 18:47:57.895 [29750] iproto/102/iproto I> binary: bound to 0.0.0.0:3302\n2018-03-25 18:47:57.895 [29750] main/101/leak.lua I> done `./00000000000000000002.xlog'\n2018-03-25 18:47:57.895 [29750] main/101/leak.lua I> ready to accept requests\n2018-03-25 18:47:59.846 [29750] main/101/leak.lua I>      1: Lua mem:  133597306, used:   12582912\n2018-03-25 18:48:01.670 [29750] main/101/leak.lua I>      2: Lua mem:  276262724, used:   12582912\n2018-03-25 18:48:03.347 [29750] main/101/leak.lua I>      3: Lua mem:  451157223, used:   12582912\n2018-03-25 18:48:05.201 [29750] main/101/leak.lua I>      4: Lua mem:  569303284, used:   12582912\n2018-03-25 18:48:07.041 [29750] main/101/leak.lua I>      5: Lua mem:  744340031, used:   12582912\n2018-03-25 18:48:09.111 [29750] main/101/leak.lua I>      6: Lua mem:  819163529, used:   12582912\n2018-03-25 18:48:11.013 [29750] main/101/leak.lua I>      7: Lua mem:  994217584, used:   12582912\n2018-03-25 18:48:12.689 [29750] main/101/leak.lua I>      8: Lua mem: 1168973874, used:   12582912\n2018-03-25 18:48:14.510 [29750] main/101/leak.lua I>      9: Lua mem: 1344191076, used:   12582912\n2018-03-25 18:48:16.696 [29750] main/101/leak.lua I>     10: Lua mem: 1342927643, used:   12582912\n2018-03-25 18:48:16.696 [29750] main/101/leak.lua I>     10: Collecting garbage\n2018-03-25 18:48:18.643 [29750] main/101/leak.lua I>     11: Lua mem: 1487792468, used:   12582912\n2018-03-25 18:48:20.410 [29750] main/101/leak.lua I>     12: Lua mem: 1662641843, used:   12582912\n2018-03-25 18:48:22.167 [29750] main/101/leak.lua I>     13: Lua mem: 1837843241, used:   12582912\n2018-03-25 18:48:23.571 [29750] main/101/leak.lua F> not enough memory\n```. It seems the bug is appeared when the bug was fixed.\nI used queue and lp applications with tarantool 1.7, they didn't leak. Then i upgraded tarantool to 1.9 and began stumble on OOM killer.\nOf cource I can mistake.. ",
    "pmwkaa": "Thank you for your report.\nFix commited.\n. Functions that you mentioned has been commited among with https://github.com/mailru/tarantool/issues/16 fix.\nThank you.\n. There was a bug in reallocation function, which doesn't account a possible usage of current position (so, documentation example were usable, until the bug been introduced).\nYour code example has been added as the test.\nSpeaking about the b case: tp_reply() originally been written with an idea that it should work with supplied buffer which should already contain completely read reply. Using tp_req() it is only possible to match only single reply from buffer which were tp_init initialized with (or allocated during usage, thus it always looks at a start of a buffer).\ntp_reqbuf() can be used with any separate buffering scheme to handle this properly.\nThank you.\n. ``` lua\nfunction server()\n    ms = box.socket.tcp()\n    ms:bind('127.0.0.1', 8080)\n    ms:listen()\nwhile true do\n    local s = ms:accept( .5 )\n    if s ~= 'timeout' then\n        print(\"accepted connection \", s)\n        print(s:readline(100, {'\\n\\n', '\\r\\n\\r\\n'}, 100))\n        s:close()\n    end\nend\n\nend\nbox.fiber.wrap(server)\n```\n. space[0].enabled = 1\nspace[0].index[0].type = \"HASH\"\nspace[0].index[0].unique = 1\nspace[0].index[0].key_field[0].fieldno = 0\nspace[0].index[0].key_field[0].type = \"NUM\"\n. OK to push\n. hello, where can i get tarantar_bugreport.tar to reproduce the fault?\n. stable benchmark to comare\n|   type   |    minimal    |    average    |     maximum   |\n| write/s  |     165653    |     170525    |      176573   |\n| req/s    |     165653    |     170525    |      176573   |\n| rtt/ms   |    0.05664    |    0.05867    |    0.061187   |\n. This issue is related to #438\n. fixed on master.\n. This is an old issue, which is not been fixed here for some reason. Thanks\n. This happened probably because there were identical space created with different key, but no log record in tarantool (eg. they were deleted). In other words, recover happened on create space, since sophia repository has been exists.\nThis situation is no longer possible on master, sophia uses different repository layout.\n. fixed on the branch sophia-update.\n. Couldn't reproduce, but found another issue which could be the reason.\ngh-463\n. After discussion, decided to support memory limits in tarantool. Following works will be done in gh-573.\n. fixed by 'sophia: create repository on a write' commit.\n. Closing due move to the new codebase (sophia-update branch).\nTried to reproduce as in #501: \nhttps://github.com/tarantool/tarantool/issues/501#issuecomment-56800979\n. pushed.\n. This is no longer actual on the latest sophia-dev changes; test case added.\n. Closing ticket due to decision of using sophia limits, instead of using a global allocator scheme. See: gh-440.\n. Is this issue still actual? Moving stable to new sophia branch, required to write new module\n. With Tarantool 1.6, pulled from source today,\nI have encountered this assertion:\n\"\n/home/pgulutzan/tarantool-master/src/tarantool: version 1.6.0-1806-g49e1ece\ntype 'help' for interactive help\ntarantool> box.cfg{}\n2014-08-31 18:45:08.244 [13319] main/101/interactive C> version 1.6.0-1806-g49e1ece\n2014-08-31 18:45:08.245 [13319] main/101/interactive C> log level 5\n2014-08-31 18:45:08.246 [13319] main/101/interactive I> mapping 1073741824 bytes for a shared arena...\n2014-08-31 18:45:08.246 [13321] main/101/spawner C> initialized\n2014-08-31 18:45:08.246 [13319] main/101/interactive I> start sophia recover\nstore/ss_db.c:61: ss_dbrecover: Assertion `0' failed.\n2014-08-31 18:45:10.940 [13321] main/101/spawner I> Exiting: master shutdown\nAborted (core dumped)\n\"\n. It actually uses clang in that case. \ncc is a semantic reference to the $(CC) (not /usr/bin/cc), which is obviously misleading here.\nExtended information on build.\n. implemented in branch sophia-update.\n. I'm not sure that this is sophia-related.\nFollowing tests are passing on tt-dev (sophia-update branch):\nfor i in seq 1 100; do python2.7 ./test-run.py box/sophia; done\nfor i in seq 1 10; do python2.7 ./test-run.py box; done\n. closing until repeated.\n. Notes about the implementation:\nSophia space:len() shows a total number of keys in database. This includes various number of duplicates, keys that been scheduled for merge and deletes.\nUnique number of keys will be shown only when a final merge process happen. This might be fixed in future. (using LogLog techniques or similar)\n. This is no longer actual, due to move to the new sophia-dev code base. Sophia error-injection based crash tests are going to be added soon.\n. implemented on branch sophia-gh-577\n. fixed on branch sophia-gh-577\n. implemented on branch sophia-snapshot\n. fixed on branch sophia-gh-577\n. blocked by #605\n. implemented on branch sophia-gh-577\n. implemented on brach sophia-integration\n. Fixed by 72fc87759349d285edb99034b4e46d25cd97e7cc commit\n. This is only get/cursor related, since put can't block an event loop - it doesn't need to do any disk operations\n. implemented on brach sophia-integration\n. implemented on brach sophia-integration\n. implemented on branch sophia-snapshot\n. fixed on branch sophia-gh-678\n. I do not think that is a good idea. It will create a directory in CWD for every sophia space. Plus sophia might need to store additional data in her work dir in future.\n. Please review\n. Thank you for report\n. fixed on branch sophia-snapshot\n. Thank you,  i'll take a look\n. implemented on brach sophia-integration\n. Thank you. This is related to gh-680.\n. fixed on branch sophia-snapshot (as part of #680)\n. fixed on branch sophia-gh-694\n. I've tried to run this test script a couple of times but could not reproduce:\n``\ntarantool> dofile('test.lua')\n2015-01-26 15:27:57.741 [10885] wal I> creating./00000000000000583502.xlog.inprogress'\nOK\n100000  3       EISYZSTXKHBIALYHRHCE    BUPYVKWEHVEFKSZFAQIK\nOK\n100000  3       DTZNAFACLDNDJDZSJYBM    UHMBETMEPMQWOIHLAOSR\nOK\n100000  1       KORRWYSPZQSWVGKQQMUN    RSMFJYXLNSOILKDEFJZW\nOK\n100000  3       OKLKZHUBWTMIJIXZSNPR    RXXYWNPDXVVGONOGTEZK\n2015-01-26 15:28:35.123 [10885] wal I> creating `./00000000000001083502.xlog.inprogress'\nOK\n100000  3       LCWTFMIHEVZCCRBYAYZI    HKBELZCRRWNZHFIRAHJD\n\n...\ntarantool> dofile('test.lua')\nOK\n100000  3       EISYZSTXKHBIALYHRHCE    BUPYVKWEHVEFKSZFAQIK\nOK\n100000  3       DTZNAFACLDNDJDZSJYBM    UHMBETMEPMQWOIHLAOSR\nOK\n100000  1       KORRWYSPZQSWVGKQQMUN    RSMFJYXLNSOILKDEFJZW\n2015-01-26 15:34:21.459 [10885] wal I> creating `./00000000000001583502.xlog.inprogress'\nOK\n100000  3       OKLKZHUBWTMIJIXZSNPR    RXXYWNPDXVVGONOGTEZK\nOK\n100000  3       LCWTFMIHEVZCCRBYAYZI    HKBELZCRRWNZHFIRAHJD\n\n...\ntarantool> dofile('test.lua')\nOK\n100000  3       EISYZSTXKHBIALYHRHCE    BUPYVKWEHVEFKSZFAQIK\nOK\n100000  3       DTZNAFACLDNDJDZSJYBM    UHMBETMEPMQWOIHLAOSR\n2015-01-26 15:35:44.549 [10885] wal I> creating `./00000000000002083502.xlog.inprogress'\nOK\n100000  1       KORRWYSPZQSWVGKQQMUN    RSMFJYXLNSOILKDEFJZW\nOK\n100000  3       OKLKZHUBWTMIJIXZSNPR    RXXYWNPDXVVGONOGTEZK\nOK\n100000  3       LCWTFMIHEVZCCRBYAYZI    HKBELZCRRWNZHFIRAHJD\n\n...\ntarantool> \n```\nBut i've found that test script tries to successfully update a primary key. This operation should be banned by tarantool, and i believe could be the cause of the issue.\nI've posted a ticket: gh-699\nif random_number == 6 then\n      box.space.tester:update({string_value_2}, {{'=', 2, string_value_3}})\n end\n. Fixed by the referenced commit\n. Couldn't repeat, please check that you are using 'sophia-integration' branch and sophia submodule points to the latest commit (i think that the problem).\nI've added test case with some fixes: sophia index doesn't return old tuple on replace (due to performance consideration). Thank you\n. test case is on branch sophia-ddl-view\n. implemented on sophia-integration branch, please review\n. gh-726 crashes on Ctrl+C during script run.\ngh-728 crashes by executing lua statement (several attempts) from parallel admin console during script run.\n. implemented on branch gh-744-space-opts\n. As i understand any system space access is done via box.schema. On replace trigger will be called if one will try to access the space directly.\nCould you be more specific about index API changes and the place in alter.cc it should be called.\n. Seems to be a new diagnostic facility has been very recently added to Tarantool which now tries to access fiber()->diag from every exception. The one who made this patch forget that\nsophia threads are unaware about any fibers.\nI may try to fix by setting cord_ptr = NULL during upsert operation and do check to skip diag_add_error().\n. They use common tarantool upsert operation, which throws ClientError. I agree about test, i'm not sure how this passed.\n. Sophia switched to use tarantool thread pool by #1358.\nThe crash replayed this time from coeio thread pool, because it does not using cords.\nPlease make tarantool eio pool to use cords.\n```\n0  0x00000000004ba6ae in diag_get () at /home/pmwkaa/dev/tarantool/src/diag.c:60\n1  0x0000000000433455 in op_adjust_field_no (update=0x7fffb4ff8240, op=0x96ae70, field_max=2) at /home/pmwkaa/dev/tarantool/src/box/tuple_update.cc:371\n2  0x0000000000433c0f in do_op_set (update=0x7fffb4ff8240, op=0x96ae70) at /home/pmwkaa/dev/tarantool/src/box/tuple_update.cc:498\n3  0x0000000000435e24 in upsert_do_ops (update=0x7fffb4ff8240) at /home/pmwkaa/dev/tarantool/src/box/tuple_update.cc:944\n4  0x0000000000436064 in tuple_upsert_execute (alloc=0x47e006 , alloc_ctx=0x7fffb4ff82c0,\nexpr=0x96ad83 \"\\221\\223\\241=\\004\\005y\", expr_end=0x96ad89 \"y\", old_data=0x96ada0 \"\\222\\001\\002g\\377\\177\", old_data_end=0x96ada3 \"g\\377\\177\", \np_tuple_len=0x7fffb4ff86d4, index_base=1) at /home/pmwkaa/dev/tarantool/src/box/tuple_update.cc:1006\n\n5  0x000000000047e376 in sophia_upsert (result=0x7fffb4ff87f8, tuple=0x96ada0 \"\\222\\001\\002g\\377\\177\", tuple_size=3, tuple_size_key=2,\nupsert=0x96ad7e \"\\001\", upsert_size=11) at /home/pmwkaa/dev/tarantool/src/box/sophia_index.cc:431\n\n6  0x000000000047e537 in sophia_upsert_callback (result=0x7fffb4ff87f8, key=0x7fffb4ff8820, key_size=0x7fffb4ff8800, src=0x95598e \"\\002\\205z\", src_size=1,\nupsert=0x96ad7e \"\\001\", upsert_size=11, arg=0x961db0) at /home/pmwkaa/dev/tarantool/src/box/sophia_index.cc:482\n\n7  0x00000000005be6b5 in sv_upsertdo (u=0x968938, r=0x968d38, a=, b=0x968938) at sophia/version/sv_upsert.h:186\n8  0x00000000005beb4c in sv_upsert (u=0x968938, r=0x968d38) at sophia/version/sv_upsert.h:235\n9  0x00000000005bee93 in sv_readiter_upsert (i=0x7fffb4ff8aa8) at sophia/version/sv_readiter.h:54\n10 sv_readiter_next (i=i@entry=0x7fffb4ff8aa0) at sophia/version/sv_readiter.h:86\n11 0x00000000005cbd01 in sv_readiter_open (save_delete=0, vlsn=, u=, iterator=0x7fffb4ff8a00, r=,\ni=0x7fffb4ff8aa0) at sophia/version/sv_readiter.h:134\n\n12 si_range (q=0x7fffb4ff8bb0) at sophia/index/si_read.c:416\n13 0x00000000005eaa56 in si_read (q=) at sophia/index/si_read.c:456\n14 0x00000000005ef886 in sc_readindex (r=r@entry=0x7fffb4ff9860, index=, key=0x0, key@entry=0x7fffb4ff8b90, keysize=keysize@entry=0,\nprefix=0x0, prefixsize=0) at sophia/scheduler/sc_read.c:110\n\n15 0x00000000005f1b0b in sc_read (r=r@entry=0x7fffb4ff9860, s=s@entry=0x9528e0) at sophia/scheduler/sc_read.c:168\n16 0x00000000005f9d54 in se_dbread (db=, o=0x0, x=0x96acd0, x_search=, cache=0x96a2f0, order=SS_GTE)\nat sophia/environment/se_db.c:520\n\n17 0x00000000005fc39b in sp_get (ptr=, v=0x96a5d0) at sophia/sophia/sophia.c:283\n18 0x000000000047abcc in sophia_read_cb (ptr=0x7ffff5828080) at /home/pmwkaa/dev/tarantool/src/box/sophia_engine.cc:154\n19 0x0000000000495ee6 in coio_on_exec (req=0x7ffff5828080) at /home/pmwkaa/dev/tarantool/src/coeio.c:137\n20 0x00000000004d3d06 in eio_execute (self=0x955870, req=0x7ffff5828080) at /home/pmwkaa/dev/tarantool/third_party/libeio/eio.c:1981\n21 0x00000000004d0adb in etp_proc (thr_arg=0x955870) at /home/pmwkaa/dev/tarantool/third_party/libeio/etp.c:385\n```\n. today on the same instance\n2015-10-19 17:26:54.144 [31259] main/24831/iproto tuple.cc:294 E> ER_MEMORY_ISSUE: Failed to allocate 26070 bytes in slab allocator for tuple\n2015-10-19 17:26:54.146 [31259] main/24831/iproto tuple.cc:294 E> ER_MEMORY_ISSUE: Failed to allocate 26070 bytes in slab allocator for tuple\n2015-10-19 17:26:54.147 [31259] main/24831/iproto tuple.cc:294 E> ER_MEMORY_ISSUE: Failed to allocate 26070 bytes in slab allocator for tuple\n2015-10-19 17:26:54.149 [31259] main/24831/iproto tuple.cc:294 E> ER_MEMORY_ISSUE: Failed to allocate 26070 bytes in slab allocator for tuple\n2015-10-19 17:26:54.150 [31259] main/24831/iproto tuple.cc:294 E> ER_MEMORY_ISSUE: Failed to allocate 26070 bytes in slab allocator for tuple\nThis is odd, because sophia engine doesn't allocate tuples on replace, but do so for iterations, etc.\n. The fix made as a part of #1318 ticket. Automatically close the cursor after last statement has been read.\n. fixed in #1318 \n. I suggest to switch box.cfg{ sophia = } to the same format too. From Sophia side i will handle the parsing.\nAdditionally, configuration string must be saved with space information and reused during recover.\n. Syntax check will be done by Sophia. Sophia knows about configuration var types. String value is easy to serialize also (in _space). But I agree that this way may not fit for 'universal configuration'.\nAnyway, right now we distinct Sophia configuration from others: box.cfg{ sophia = } and probably should do also box.schema.space.create('test, { sophia = }). Can this solve the problem?\nI believe we are not talking about one-liner here (but it also supported):\nsophia_config = [[\ncompaction.node_size = 123456;\ncompaction.page_size = 123451;\nmemory.limit = 1234;\n]]\nbox.cfg{sophia = sophia_config)\n. Closing, since this is already implemented: https://github.com/tarantool/tarantool/blame/1.7/src/box/sophia_engine.cc#L128\n. index:get() also\n. I believe Iterator options will be not enough to provide synchronous reads, because there are also blocking INSERT and UPDATE operations.\nClosing the ticket in favor of https://github.com/tarantool/tarantool/issues/1357\n. patch made against 1.6.8, should be also merged into 1.7\n. Hi, yes it is planned. I believe the secondary indexes support will be available for testing in following 1-2 month time. thanks\n. related task: https://github.com/tarantool/tarantool/issues/623\n. patch made for 1.6.8\n. merged\n. ref: https://github.com/tarantool/tarantool/issues/1222\n. implemented in #1357 \n. implemented on branch gh-1356-sophia-cache.\nPlease merge into 1.6 and 1.7\n. patch made against 1.7, please review\n. ref: https://github.com/tarantool/tarantool/issues/1077\nplease merge this into 1.6 and 1.7.\n. There are been some issues which could result in such behavior in older versions of tarantool.\nSorry for that. Could you please update to the latest 1.6.8 master? \n. fix merged into 1.6 and 1.7\n. These situation happened due to wal_mode = 'none', i'm not sure whether this is a bug or a feature in that case.\n. sp_get() crash related to incorrect usage from Tarantool side (create/destroy race).\nref #1416.\n. This does not look like corruption. This happens when tarantool being killed intentionally or crashed.\nrelated to https://github.com/tarantool/tarantool/issues/1416\n. ",
    "bigbes": "We don't support binary memcahced protocol. Please use text protocol instead.\n. (A) Fixed in:\nfor master - https://github.com/tarantool/tarantool/commit/ec3c76bad201f85aad01d3b10d3f7a4b971ef029 - branch tt-port-master\nfor stable - https://github.com/tarantool/tarantool/commit/eb56eca8ecdbbfe5102972707cf0754f27f86ead - branc tc-port\n. We need to write this part of client, even if it's not the separate tool.\nWe need write 'lua' library that can read xlogs and snaps without loading\nthem all into memory.\n2014-07-08 14:16 GMT+04:00 Roman Tsisyk notifications@github.com:\n\nthere is no more connector, no --cat, no problems.\nMay I close this ticket?\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n. How it reacts on errors? It gives you line number? or it reacts exactly\nlike client delimiters - turning '\\n' into ' '?\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n2014-06-05 17:54 GMT+04:00 Roman Tsisyk notifications@github.com:\n\nlocalhost=> require('session').delimiter(';')\n...\nlocalhost=> 10 +\nlocalhost-> 20 +\nlocalhost-> 30;\n\n60\n  ...\n  localhost=> require('session').delimiter();\n\n\n\n;\n  ...\n  localhost=> require('session').delimiter('EOF');\n\n\n...\n  localhost=> 10 +\n  localhost-> 20 +\n  localhost-> 30\n  localhost-> EOF\n\n\n60\n  ...\n  localhost=> require('session').delimiter('')\n  localhost-> EOF\n\n\n...\n  localhost=> 10\n\n\n10\n  ...\n  localhost=> 20\n\n\n\n20\n  ...\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/29#issuecomment-45221504.\n. @kostja it won't be so easy to move (in test-run.py) from client side delimiter to server\nside. We must support delimiter at both levels.\n. fix on branch tc-tarantool-newf\n. fix in latest stable\n. on latest stable looks like:\n\nInsert, lsn: 2, time: 1380898946.801074, len: 39, space: 0, cookie: 127.0.0.1:34165 [2, 2, 3]\nInsert, lsn: 3, time: 1380898948.664802, len: 39, space: 0, cookie: 127.0.0.1:34165 [1, 2, 3]\nInsert, lsn: 4, time: 1380898964.320821, len: 34, space: 0, cookie: 127.0.0.1:35392 [56, 7]\non previous stable looks like:\nInsert, lsn: 2, time: 1380900971.201052, len: 34, space: 3, cookie: 0.0.0.0:0 [2, 2]\nInsert, lsn: 3, time: 1380900982.963965, len: 34, space: 3, cookie: 0.0.0.0:0 [3, 3]\n. also:\nreplication/hot_standby.test.lua                [ fail ]\nTest failed! Result content mismatch:\n--- replication/hot_standby.result Fri Oct  4 20:29:20 2013\n+++ ../test/replication/hot_standby.reject Fri Oct  4 20:29:23 2013\n@@ -129,18 +129,6 @@\n\n...\n_select(11, 20)\n-- [11, 'the tuple 11']\n-- [12, 'the tuple 12']\n-- [13, 'the tuple 13']\n-- [14, 'the tuple 14']\n-- [15, 'the tuple 15']\n-- [16, 'the tuple 16']\n-- [17, 'the tuple 17']\n-- [18, 'the tuple 18']\n-- [19, 'the tuple 19']\n-- [20, 'the tuple 20']\n-...\n --# stop server hot_standby\n --# stop server replica\n --# cleanup server hot_standby\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n2013/10/4 Konstantin Osipov notifications@github.com\n\nreplication/consistent.test.lua [ fail ]\nTest failed! Result content mismatch:\n--- replication/consistent.result Tue Oct 1 18:36:41 2013\n+++ /home/kostja/work/tarantool-master/test/replication/consistent.reject\nFri Oct 4 17:49:21 2013\n@@ -66,16 +66,8 @@\n--# set connection replica\n_select(1, 10)\n-- [1, 'master - 1']\n-- [2, 'master - 2']\n-- [3, 'master - 3']\n-- [4, 'master - 4']\n-- [5, 'master - 5']\n-- [6, 'master - 6']\n-- [7, 'master - 7']\n-- [8, 'master - 8']\n-- [9, 'master - 9']\n-- [10, 'master - 10']\n+- error: '[string \" function _select(_begin, _end) a = {} ...\"]:1: wrong\nnumber\n- of arguments to ''insert''' ... --# set connection default\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tarantool/tarantool/issues/50\n.\n. fixed in tt-repl-sync-fix\n. More details in #119, #120 and #121(done)\n. Fix in gh-59 branch, need CR\n. Final fix in https://github.com/tarantool/tarantool/commit/cb7ddc246fa2fbd4c3808c5883c8eb8c8180662b, please merge.\n. Now, when we moved from plugins to modules - we need to recheck this issue.\n. We need to embed terminal into our homepage.\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n2014-08-21 12:44 GMT+04:00 esha notifications@github.com:\n\nNow we have try.tarantool alpha)\nhttp://try.tarantool.org/\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/82#issuecomment-52893602.\n. ```\nlocalhost> lua box.cfg()\n\n\nerror: '[string \"return box.cfg()\"]:1: attempt to call field ''cfg'' (a table value)'\n...\nlocalhost> lua box.cfg\n\n\ntable: 0x4043e690\n...\nlocalhost> call box.cfg()\nCall ERROR, Procedure 'box.cfg' is not defined (ER_NO_SUCH_PROC)\n```\n\n\u0423 \u043d\u0430\u0441 \u043d\u0435\u0442 \u043f\u0443\u0442\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e box.cfg()\n\u043d\u0443\u0436\u043d\u043e, \u043b\u0438\u0431\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 __call \u043a \u043c\u0435\u0442\u0430\u0442\u0430\u0431\u043b\u0438\u0446\u0435 box.cfg, \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 get_field, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043f\u043e\u043b\u044f \u0431\u0443\u0434\u0435\u0442 \u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c.\nfunction get_field(t_str, f_str)\n    return loadstring(string.format('return %s.%s', t_str, f_str))()\nend\n\u0438\u0442\u043e\u0433:\n```\nlocalhost> lua function get_field(t_str, f_str) return loadstring(string.format('return %s.%s', t_str, f_str))() end\n\n...\nlocalhost> call get_field('box.cfg', 'admin_port')\nCall OK, 1 rows affected\n[33015]\n```\n. Done in https://github.com/tarantool/tarantool/commit/196afd3b1496f98c929d46ec6c264319ababff81 , need CR\n. Fixed in https://github.com/tarantool/tarantool/commit/6c8a01d26a46be24fa66a7049b9cb20957f2cb85 , need CR\n. Fixed:\nhttp://tarantool.org/dist/master/centos/6/os/i386/CentOS/\nhttp://tarantool.org/dist/stable/centos/6/os/i386/CentOS/\n. there is no tarantool-sophia-module in master - it's now in the core of tarantool\n. Fixed in https://github.com/tarantool/tarantool/commit/cc4e6f04ebebde3fdd42851da72db1f49bdc6d01 , need CR. Branch.\n. fixed in https://github.com/tarantool/tarantool/commit/63e47e556d79f1223b62cd3681365071a84c2537 , need CR\n. fixed in https://github.com/tarantool/tarantool/commit/50a443025251c1e1d88873ab85f7ebb9f19ee75e , need CR\n. How it suppose to work? It seems to me, that:\nbox.tuple.new({'abc', 'cde'}) otherwise it took only first element and make it's ugly magic:\n```\nlocalhost> lua box.tuple.new({'abc', }):bsize()\n\n\n4\n...\nlocalhost> lua box.tuple.new({'abc'}):bsize()\n\n\n\n4\n...\nlocalhost> lua box.tuple.new({'abc', 'cde'}):bsize()\n\n\n\n8\n...\nlocalhost> lua box.tuple.new('abc', 'cde'):bsize()\n\n\n\n4\n...\n```\n\ni've asked this question and the answer was: \"it feature, not bug\"\n. Normal way of box.net.box:\nlua\n168:2013-11-19 21:57:55.390 [12572] 103/admin/127.0.0.1:50408 I> box_net_box_new\n169:2013-11-19 21:57:55.391 [12572] 556/lua I> create_socket\n170:2013-11-19 21:57:55.391 [12572] 556/lua I> connect_with_socket\n171:2013-11-19 21:57:55.391 [12572] 557/lua I> rch : userdata: 0x4177f1e8\n172:2013-11-19 21:57:55.391 [12572] 557/lua I> wch : userdata: 0x417743e0\n173:2013-11-19 21:57:55.391 [12572] 556/lua I> connect_ok\n174:2013-11-19 21:57:55.391 [12572] 556/lua I> put_into_queue_(rch)_true\n175:2013-11-19 21:57:55.391 [12572] 556/lua I> put_status_(rch)_true\n176:2013-11-19 21:57:55.391 [12572] 556/lua I> prepare_read_response\n177:2013-11-19 21:57:55.391 [12572] 557/lua I> rch:get() : true\n178:2013-11-19 21:57:55.391 [12572] 103/admin/127.0.0.1:50408 I> start_process_22\n179:2013-11-19 21:57:55.391 [12572] 103/admin/127.0.0.1:50408 I> put_into_queue_(wch)_\"\\u0016\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\ufffd_set_pri_lsn\ufffd\ufffd8\ufffd\"\n180:2013-11-19 21:57:55.391 [12572] 103/admin/127.0.0.1:50408 I> put_status_true\n181:2013-11-19 21:57:55.391 [12572] 557/lua I> wch:get() : \"\\u0016\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\ufffd_set_pri_lsn\ufffd\ufffd8\ufffd\"\n182:2013-11-19 21:57:55.391 [12572] 557/lua I> sending_request\n183:2013-11-19 21:57:55.391 [12572] 557/lua I> send_ok_request\n184:2013-11-19 21:57:55.391 [12572] 557/lua I> rch : userdata: 0x4177f1e8\n185:2013-11-19 21:57:55.391 [12572] 557/lua I> wch : userdata: 0x417743e0\n186:2013-11-19 21:57:55.392 [12572] 556/lua I> read_header\n187:2013-11-19 21:57:55.392 [12572] 556/lua I> read_body\n188:2013-11-19 21:57:55.392 [12572] 556/lua I> done_read\n189:2013-11-19 21:57:55.392 [12572] 556/lua I> prepare_read_response\n190:2013-11-19 21:57:55.393 [12572] 103/admin/127.0.0.1:50408 I> closing_boxnetbox\n191:2013-11-19 21:57:55.393 [12572] 103/admin/127.0.0.1:50408 I> put_into_queue_(rch,rcw)_true\n192:2013-11-19 21:57:55.393 [12572] 103/admin/127.0.0.1:50408 I> put_status_(rch,rcw)_true true\n193:2013-11-19 21:57:55.393 [12572] 103/admin/127.0.0.1:50408 I> closing_done\n194:2013-11-19 21:57:55.393 [12572] 557/lua I> wch:get() : true\n205:2013-11-19 21:57:56.280 [12572] 556/lua I> read_header\nwrong:\nlua\n207:2013-11-19 21:57:56.348 [12572] 103/admin/127.0.0.1:50408 I> box_net_box_new\n208:2013-11-19 21:57:56.348 [12572] 558/lua I> create_socket\n209:2013-11-19 21:57:56.348 [12572] 558/lua I> connect_with_socket\n210:2013-11-19 21:57:56.348 [12572] 559/lua I> rch : userdata: 0x407f5ef0\n211:2013-11-19 21:57:56.348 [12572] 559/lua I> wch : userdata: 0x417848a8\n212:2013-11-19 21:57:56.349 [12572] 558/lua I> connect_ok\n213:2013-11-19 21:57:56.349 [12572] 558/lua I> put_into_queue_(rch)_true\n214:2013-11-19 21:57:56.349 [12572] 558/lua I> put_status_(rch)_true\n215:2013-11-19 21:57:56.349 [12572] 558/lua I> prepare_read_response\n216:2013-11-19 21:57:56.349 [12572] 103/admin/127.0.0.1:50408 I> start_process_22\n217:2013-11-19 21:57:56.349 [12572] 103/admin/127.0.0.1:50408 I> put_into_queue_(wch)_\"\\u0016\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\ufffd_set_pri_lsn\ufffd\ufffd8\ufffd\"\n218:2013-11-19 21:57:56.350 [12572] 103/admin/127.0.0.1:50408 I> put_status_true\n219:2013-11-19 21:57:56.350 [12572] 559/lua I> rch:get() : \"\\u0016\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\ufffd_set_pri_lsn\ufffd\ufffd8\ufffd\"\n220:2013-11-19 21:57:56.350 [12572] 559/lua I> wch:get() : null\n221:2013-11-19 21:57:56.350 [12572] 559/lua I> rch : userdata: 0x407f5ef0\n222:2013-11-19 21:57:56.350 [12572] 559/lua I> wch : userdata: 0x417848a8\n224:2013-11-19 21:57:57.350 [12572] 559/lua I> wch:get() : null\n225:2013-11-19 21:57:57.350 [12572] 559/lua I> rch : userdata: 0x407f5ef0\n226:2013-11-19 21:57:57.350 [12572] 559/lua I> wch : userdata: 0x417848a8\n....previous three lines in cycle(trying to get from wch)\nAs we may see we get from RCH message, that we put into the WCH, but\n217:2013-11-19 21:57:56.349 [12572] 103/admin/127.0.0.1:50408 I> put_into_queue_(wch)_\"\\u0016\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\ufffd_set_pri_lsn\ufffd\ufffd8\ufffd\"\n219:2013-11-19 21:57:56.350 [12572] 559/lua I> rch:get() : \"\\u0016\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\ufffd_set_pri_lsn\ufffd\ufffd8\ufffd\"\nwhen all is ok\n179:2013-11-19 21:57:55.391 [12572] 103/admin/127.0.0.1:50408 I> put_into_queue_(wch)_\"\\u0016\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\ufffd_set_pri_lsn\ufffd\ufffd8\ufffd\"\n181:2013-11-19 21:57:55.391 [12572] 557/lua I> wch:get() : \"\\u0016\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\ufffd_set_pri_lsn\ufffd\ufffd8\ufffd\"\ndebug output description is here\nall log is here\n. Reopened: closed on error\n. ha ha ha, stop.\nhttps://travis-ci.org/tarantool/tarantool/jobs/14323732\nmaybe reopen?\n. Change milestone from 1.7 to 1.6.3\n@rtsisyk we need to prioritise this for logging purposes (many 3rd-party libraries use print for logging in the 1.5). We must have some means for logging of scripts. \n. ```\nbigbes@bigbes-laptop:~/src/stable/client/tarantool$ ./tarantool\nlocalhost> lua box.cfg.wal_mode\n\n\nfsync_delay\n...\nlocalhost> lua box.dostring('box.cfg.wal_mode')\n\n\nerror: '[string \"box.cfg.wal_mode\"]:1: ''='' expected near '''''\n...\nlocalhost> lua box.dostring('return box.cfg.wal_mode')\n\n\nfsync_delay\n...\nlocalhost> call box.dostring('return box.cfg.wal_mode')\nCall OK, 1 rows affected\n['fsync_delay']\nlocalhost> call box.dostring('box.cfg.wal_mode')\nCall ERROR, Lua error: [string \"box.cfg.wal_mode\"]:1: '=' expected near '' (ER_PROC_LUA)\n```\n. This is log for centos-i386\n\n```\nTEST                                             RESULT\nbox/lua.test.py                                 [ fail ]\nTest failed! Result content mismatch:\n--- box/lua.result  Tue Dec  3 17:43:11 2013\n+++ ../test/box/lua.reject  Tue Dec  3 18:06:20 2013\n@@ -1259,7 +1259,7 @@\n ...\n tonumber64(-1)\n ---\n-- 18446744073709551615\n+- 4294967295\n ...\n tonumber64('184467440737095516155')\n ---\n@@ -1407,7 +1407,7 @@\n ...\n box.update(0, 1, '=p=p=p', 1, 'new field string value', 2, 42, 3, 0xdeadbeef)\n ---\n-- [1, 'new field string value', 42, 3735928559]\n+- [1, 'new field string value', 42, -559038737]\n ...\n# test update's arith opearations\n@@ -1505,22 +1505,22 @@\nbox.insert(0, 4, 8, 16)\n\n-- [4, 8, 16]\n+- error: 'No index #0 is defined in space 0'\n ...\n# Test insert from init.lua\nbox.select(0, 0, 1)\n\n-- [1, 2, 4, 8]\n+- error: 'No index #0 is defined in space 0'\n ...\n box.select(0, 0, 2)\n\n-- [2, 4, 8, 16]\n+- error: 'No index #0 is defined in space 0'\n ...\n box.select(0, 0, 4)\n\n-- [4, 8, 16]\n+- error: 'No index #0 is defined in space 0'\n ...\n# Test bug #1002272\n@@ -2132,31 +2132,31 @@\n # A test case for Bug#1131108 'tonumber64 from negative int inconsistency'\n tonumber64(-1)\n\n+- 4294967295\n+...\n+tonumber64(-1LL)\n+---\n - 18446744073709551615\n ...\n-tonumber64(-1LL)\n+tonumber64(-1ULL)\n\n\n18446744073709551615\n ...\n-tonumber64(-1ULL)\n+-1\n+---\n+- -1\n+...\n+-1LL\n+---\n+- -1\n+...\n+-1ULL\n\n\n\n18446744073709551615\n ...\n--1\n\n\n-- -1\n-...\n--1LL\n----\n-- -1\n-...\n--1ULL\n----\n-- 18446744073709551615\n-...\n tonumber64(-1.0)\n ---\n-- 18446744073709551615\n+- 4294967295\n ...\n 6LL - 7LL\n ---\n------------------------------------------------------------\n```\nFirst bug is bad number representation.\nSecond bug is that truncate also drops indexes (IMHO)\n. This is log for centos-i386\nbox/msgpack.test.lua                            [ fail ]\nTest failed! Result content mismatch:\n--- box/msgpack.result  Tue Dec  3 17:43:11 2013\n+++ ../test/box/msgpack.reject  Tue Dec  3 18:12:44 2013\n@@ -84,11 +84,11 @@\n ...\n test(4294967294)\n ---\n-- 4294967294 ok\n+- 4294967294 fail, got -2\n ...\n test(4294967294LL)\n ---\n-- 4294967294LL ok\n+- 4294967294LL fail, got -2\n ...\n test(4294967294ULL)\n ---\n@@ -96,11 +96,11 @@\n ...\n test(4294967295)\n ---\n-- 4294967295 ok\n+- 4294967295 fail, got -1\n ...\n test(4294967295LL)\n ---\n-- 4294967295LL ok\n+- 4294967295LL fail, got -1\n ...\n test(4294967295ULL)\n ---\nit's relevant to lua bug (IMHO)\n. It's actual on centos-i386@tt-dev2 on branch stable, and there's many other failing tests.\n. Ok, i'll do it\n. It's related to non closed socket (ms on line 575)\n. @kostja , I've tried to trace the place where assertion occures, but i can't.\n. Tarantool now uses random ports in testing.\n. Current progress:\nRun suites in parallel\nP.S. already found bug in Tarantool (#155) :) \n. Ok, when i've returned to tt-parallel i've completely rewrite this branch. Now it's new-tt-parallel. @kostja, plese, review.\n. 17 \u044f\u043d\u0432\u0430\u0440\u044f 2014 \u0433., 13:36 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c whiteglasses <notifications@github.com\n\n\u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\u042d\u0442\u043e \u043d\u0435 \u0434\u0430\u0451\u0442 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c tarantool-client \u0431\u0435\u0437 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f tarantool, \u0430 \u0431\u044b\u0432\u0430\u0435\u0442\n\u043d\u0443\u0436\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0431\u0430\u0433 \u0438\u043c\u0435\u043d\u043d\u043e \u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0435.\n\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u0435\u0437\u0431\u043e\u043b\u0435\u0437\u043d\u0435\u043d\u043d\u043e, \u0430 \u0432\u043e\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0441\u0430\u043c \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e\n\u0432\u0435\u0441\u044c\u043c\u0430 \u0437\u0430\u0442\u0440\u0430\u0442\u043d\u043e \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043e\u0442\u043e\u0440\u0432\u0451\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c tarantool-client \u043e\u0442 tarantool-debug.\n\nclient version must be >= server version.\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n. You need build of tarantool with debug symbols and enabled backtrace\n(usually it's dbg package)\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n2014/1/24 whiteglasses notifications@github.com\n\ntarantool-1.5.2-41\nfibers:\n- fid: 11328 csw: 395 name: admin/127.0.0.1:33487 stack:\n  0x7f67fa573000 backtrace: #0 0x7f6d024ac4f9 in ? #1https://github.com/tarantool/tarantool/issues/10x444a53 in ?\n  #2 https://github.com/tarantool/tarantool/issues/2 0x445cdb in ? #3https://github.com/tarantool/tarantool/issues/30x4532a5 in ?\n  #4 https://github.com/tarantool/tarantool/pull/4 0x4452c8 in ? #5https://github.com/tarantool/tarantool/pull/50x464f77 in ?\n  #6 https://github.com/tarantool/tarantool/pull/6 0x413478 in ?\n- fid: 11034 csw: 162 name: iproto stack: 0x7f67fa593000 backtrace: #0\n  0x454a6d in ? #1 https://github.com/tarantool/tarantool/issues/10x4452c8 in ?\n  #2 https://github.com/tarantool/tarantool/issues/2 0x464f77 in ? #3https://github.com/tarantool/tarantool/issues/30x413478 in ?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tarantool/tarantool/issues/176\n.\n. We've fixed bug with libbfd can't find debug-symbols\n. @rtsisyk, so it's fixed or not? Can we close this issues?\n. @kostja, please, notify us on problem status. It's priority issue, because configuration of Tarantool/Box is moved to init.lua.\n. from Unera:\n\n[3:48:45 PM] Dmitry E. Oboukhov: Failed 1 tests: replication/hot_standby.test.lua.======================================================================\n[3:48:54 PM] Dmitry E. Oboukhov: \u043d\u0435 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e\u0441\u043b\u0435 Failed 1 tests: \u0438\u043c\u044f\n[3:49:36 PM] Dmitry E. Oboukhov: \u044d\u0442\u043e \u0435\u0441\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0442\u0435\u0441\u0442 \u0431\u044b\u043b\n[3:49:40 PM] Dmitry E. Oboukhov: 'new'\n. last is fixed in grand tarantool_server merge.\n. 1) No need /path/to/tarantool_box, it seems to me.\n2) Shebang is ok.\n. Right now tarantool-lts conflicts with tarantool-dbg, so everything must be OK.\n. I'm sorry, I completely forgot that this fix must be for stable too.\nOn Mar 20, 2014 8:07 PM, \"Roman Tsisyk\" notifications@github.com wrote:\n\nhttps://travis-ci.org/tarantool/tarantool/jobs/21185063#L932\nmkdir ./build && cd ./build && cmake .. -DCMAKE_BUILD_TYPE=RelWithDebugInfo\n  make -j8\n  make test-force\n\nTEST                                             RESULT\nmodule/net_sql.common.test                      Traceback (most recent call last):\n  File \"/data/work/tarantool/modules-pg-fix-stable/test/lib/tarantool_server.py\", line 48, in execute\n    execfile(self.name, dict(locals(), server.dict**))\n  File \"module/net_sql.common.test\", line 6, in \n    exec admin \"lua type(box.net.sql)\"\n  File \"/data/work/tarantool/modules-pg-fix-stable/test/lib/tarantool_connection.py\", line 69, in execute\n    return self.execute_no_reconnect(command, silent)\n  File \"/data/work/tarantool/modules-pg-fix-stable/test/lib/admin_connection.py\", line 42, in execute_no_reconnect\n    buf = self.socket.recv(bufsiz)\nerror: [Errno 104] Connection reset by peer\n[ fail ]\nTest failed! Last 10 lines of the result file:\n@esha- https://github.com/esha- @bigbes92 https://github.com/bigbes92you recently commited\ndd567a3https://github.com/tarantool/tarantool/commit/dd567a3537fc9571f3c5dd53f3058ebed64327d5, but this fix doesn't help!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tarantool/tarantool/issues/221\n.\n. We've some work to do, still - enable this tests in travis:\n- Install/configure services postgresql and mysql\n- Set environmental variables PG and MYSQL\n- On master we must enable comparing of strings internally, because of dump function hyphenation.\n. Anyone can do it with:\n\nlua\nffi.cdef[[\nextern int is_ro;\n]]\nfunction set_ro()\n    ffi.C.is_ro = true;\nend\n. Fixed in f6b31ded08.\n. Hi, pcdinh. We, recently, replace configuration file with Lua, but documentation is inconsistent.\nYou can start with this:\n\nhttps://github.com/tarantool/tarantool/blob/master/test/box/box.lua\n. debian/control:79\ntarantool-sql-module (= ${binary:Version}),\ndebian/control:92\ntarantool-sql-module (= ${binary:Version}),\n. Fixed by @esha- \n. Possibly this is one of side effects of this line still exists:\n\n./tarantool: version 1.6.2-14-g068a995\ntarantool> box.cfg{snap_dir='./lalala'}\n2014-04-22 11:41:13.779 [31757] main/101/interactive C> version 1.6.2-14-g068a995\n2014-04-22 11:41:13.779 [31757] main/101/interactive C> log level 5\n2014-04-22 11:41:13.780 [31757] main/101/interactive I> mapping 1073741824 bytes for a shared arena...\n2014-04-22 11:41:13.780 [31762] main/101/spawner C> initialized\n2014-04-22 11:41:13.780 [31757] main/101/interactive I> recovery start\n2014-04-22 11:41:13.780 [31757] main/101/interactive !> error reading directory `./lalala': No such file or directory\n2014-04-22 11:41:13.780 [31757] main/101/interactive recovery.cc:358 E> can't find snapshot\n2014-04-22 11:41:13.780 [31757] main/101/interactive !> error reading directory `./lalala': No such file or directory\n2014-04-22 11:41:13.780 [31757] main/101/interactive C> didn't you forget to initialize storage with --init-storage switch?\n2014-04-22 11:41:13.781 [31762] main/101/spawner I> Exiting: master shutdown\n. We need to replace active_connections with waiting of second connection trigger, like:\n--# setopt delimiter ';'\nwhile active_connections < 2 do\n    box.fiber.sleep(0.001)\nend\nactive_connections;\n--# setopt delimiter ''\n. Probably dup of this https://github.com/tarantool/tarantool/issues/263\nP.S. It's not broken. Value must be 1, not true\n. Hi, this is template rb-spec, please, use http://tarantool.org/dist/master/tarantool.rb or http://tarantool.org/dist/stable/tarantool.rb for master or stable respectively.\n. It's some kind of Debian Community introduced bug, i can't reproduce it on Vanilla CPython 2.7.6, \nplease file them this bug.\n. See also https://github.com/tarantool/tarantool-c/issues/2 and https://github.com/tarantool/tarantool-c/issues/4 .\nDuplicate.\n. It's some kind of misunderstaning in Tarantool's command line mode. When you start it that way you must get admin rights. That's kind of information, that i get from clear tarantool with python connector:\n```\nIn [2]: import tarantool\nIn [3]: a = tarantool.Connection('localhost', 33013)\nIn [4]: a.call('box.session.uid')\n\nDatabaseError                             Traceback (most recent call last)\n in ()\n----> 1 a.call('box.session.uid')\n\nDatabaseError: (53, \"Execute access denied for user 'guest' to function 'box.session.uid'\")\n``\n. sorry, can't find this bug today\n. We already have it.\n. what's aboutbox.fiber.detach()?\n.box.fiber.name(obj) => obj:name().\nIf i'm not wrong, then we have two options:\n- In the first casebox.fiber.name(name)we set up name of fiber.\n- In the second casebox.fiber.name()` we get the name of fiber.\n, but your obj:name() means that we take name from OBJ fiber - it differs from current way of working with fiber.\nI suggest to create metafiber - box.fiber.current (or to use existing box.fiber.self()), that points onto current fiber and do every current fiber OP with it.\n. OK, right now we have an ability to run 1.5 and 1.6 on one station with:\n- SCL builds on Fedora/EL(RHEL/CentOS/OEL) - just install mailru-15 package from master repo, that will install all other tarantool packages. Then run it with scl enable mailru-15 tarantool_box for server . (right now we can't use init-scripts, so we won't ship them, you must write them yourself)\n- tarantool-lts package for Debian/Ubuntu.\n. it's not corruption, it's simply how it unpacks 2, 4 and 8 byte strings. In\n1.5 we don't have any signatures of what field type is - str, num or num32,\nso client makes assumptions based on field size.\n2014-06-05 12:48 GMT+04:00 Eugene Leonovich notifications@github.com:\n\n\n1: {1, 1, 1, 1, 1, 1, 'x'}\n2: {1, 1, 1, 1, 1, 1, 30840}\n3: {1, 1, 1, 1, 1, 1, 'xxx'}\n4: {1, 1, 1, 1, 1, 1, 2021161080}\n5: {1, 1, 1, 1, 1, 1, 'xxxxx'}\n6: {1, 1, 1, 1, 1, 1, 'xxxxxx'}\n7: {1, 1, 1, 1, 1, 1, 'xxxxxxx'}\n\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n. In 1.6 we use msgpack, that has some kind of schema for every type.\nEvery connector in 1.5 has schema -> (1->str, 2->str, 3->num, 4->num), that\nis stored on client side and does all the conversion for incoming tuples.\nYou may look at it's implementation in Python and Perl drivers.\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n2014-06-05 15:12 GMT+04:00 Eugene Leonovich notifications@github.com:\n\nIs there any recommended way to bypass this limitation? Check strings and\nadd an extra character if it length equals 2/4/8, or always add 8-character\nsuffix/prefix? And how it handled in 1.6?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/336#issuecomment-45207024.\n. We now have eval - maybe we'll close this ticket?\n. Since we don't have debuginfo any more package,  I'm closing it.\n. It's not a bug, but will destroy debuginfo packages, so there'll be no sources soon.\n. Since we don't have any debuginfo packages - bug must be closed\n. @rtsisyk: everything works fine for me on your example. Can't reproduce. Reopen if you can.\n. Empty string is ok in scripting languages.\nBut it's OK for Python where empty string is equivalent for False, but for Lua it's not.\n. We, now, use Sphinx - it already has pygments for syntax highlightning\n. UPD: it affects latest 1.6 and 1.5\n\nbox.cfg{}                                                                                      \nif not box.space.test then                                                                     \n   space = box.schema.space.create('test')                                                     \n   space:create_index('primary', {type = 'tree', parts = {1, 'NUM'}})                          \n   space:create_index('secondary', {type = 'bitset', parts = {2, 'STR'}, unique = false})      \nend                                                                                            \nspace = box.space.test                                                                         \nspace:insert{1, 'hi'}                                                                          \nspace:insert{2, ''}\n``\nbigbes@ubuntu-server:~/1.lua$ ../src/tarantool/src/tarantool 1.lua\n2014-08-04 20:35:26.214 [24584] main/101/1.lua C> version 1.6.3-89-g13544a5\n2014-08-04 20:35:26.214 [24584] main/101/1.lua C> log level 5\n2014-08-04 20:35:26.214 [24584] main/101/1.lua I> mapping 1073741824 bytes for a shared arena...\n2014-08-04 20:35:26.214 [24585] main/101/spawner C> initialized\n2014-08-04 20:35:26.218 [24584] main/101/1.lua I> initializing an empty data directory\n2014-08-04 20:35:26.221 [24584] main/101/1.lua I> creating./00000000000000000000.snap.inprogress'\n2014-08-04 20:35:26.221 [24584] main/101/1.lua I> saving snapshot ./00000000000000000000.snap.inprogress'\n2014-08-04 20:35:26.250 [24584] main/101/1.lua I> done\n2014-08-04 20:35:26.250 [24584] main/101/1.lua I> ready to accept requests\n2014-08-04 20:35:26.251 [24584] wal I> creating./00000000000000000000.xlog.inprogress'\nSegmentation fault\nCurrent time: 1407170126\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed,\nthis may fail as well\n0  0x41cbb4 in sig_fatal_cb(int)+191\n1  0x7f149e3cfbb0 in ?\n2  0x49c11d in bitset_pages_search+98\n3  0x49b6ac in bitset_set+52\n4  0x49ad66 in bitset_index_insert+336\n5  0x450eba in BitsetIndex::replace(tuple, tuple, dup_replace_mode)+340\n6  0x43437d in space_replace_all_keys(space, tuple, tuple*, dup_replace_mode)+220\n7  0x43b1d7 in Engine::replace(space, tuple, tuple*, dup_replace_mode)+53\n8  0x439d3e in space_replace(space, tuple, tuple*, dup_replace_mode)+57\n9  0x439ead in txn_replace(txn, space, tuple, tuple, dup_replace_mode)+111\n10 0x438083 in execute_replace(request, port)+199\n11 0x41e628 in process_rw(port, request)+70\n12 0x43f70a in lbox_insert(lua_State*)+164\n13 0x4fc8cc in lj_BC_FUNCC+52\n2014-08-04 20:35:26.350 [24585] main/101/spawner I> Exiting: master shutdown\nAborted (core dumped)\nbigbes@ubuntu-server:~/1.lua$\n``\n. Maybe it's better to use{host, port, type}` instead of simple host/port in the function definitions?\nJust like that:\nsocket.tcp_server = function(uri, handler_callback, opts) \n    if type(uri) == 'string' then\n        -- URI STRING\n    elif type(uri) == 'table' then\n        -- TABLE WITH HOST/PORT/...\n    end\n...\nend\nAnd use it everywhere where we take URI strings?\n. And, also, why we have transform/slice as c functions in src/box/lua/tuple.cc?\n. tuple.slice = function (self, begin, ending)\n    assert(begin != 0)\n    assert(ending != 0)\n    local len = #self\n    begin = begin or 1\n    ending = ending or len\n    if begin < 0 then\n        begin = len + begin + 1\n    end\n    if ending < 0 then\n       ending =  len + ending + 1\n    end\n    local new = {}\n    while (begin != ending) do\n        if begin > len then\n            begin = 1\n        end\n        table.insert(new) = self[begin]\n        begin += 1\n    end\n    return box.tuple.new(new)\nend\n. Now we have some kind of systemd init script, but systemd can do more:\nWe must have good systemd scripts, like ones, that apache or nginx or postgresql have.\n. Not new branch. May be old, but in the same repository.\n. Fixed in latest master\n. Why we need to remove tuple:slice?\nWhy we need to remove tuple:transform?\n. Where is it? I can't find. Here everything is okay\n. -  \n2014-09-15 11:47:50.439 [5912] snap/106/dumper I> saving snapshot `./00000000000000001799.snap.inprogress'\nSegmentation fault\nFatal Fatal 11Current time: 11 while backtracing while backtracing1410767270\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed,\nthis may fail as well\n2014-09-15 11:47:50.481 [5912] snap/106/dumper I> done\n. Ok, it's next generation of bug-reporting. Let's use Twitter with hashtag #tarantool_bug as our bug-tracker?\nAlso, we have another project - try where this bug must be posted\n. I came to understanding, that between server starts and server stops we\nneed to store tarantool.log in the memory. In the __del__  we will dump\nlog to the disk\nEOF\n2014-09-24 14:25 GMT+04:00 Konstantin Osipov notifications@github.com:\n\nRoman, this is badly specified. Normally you need to grep a log from a\nposition, not just all of it. There is a single log file for all tests, so\nyou can grep old stuff this way. A message may be lost due to buffering and\nnon-blocking I/O. You need to clarify all these tricky cases.\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n. Also, this applies to test output. I started this refactoring in the\nnew-tt-parallel branch. But only for parallel execution. We'll apply this\ntechnich to the all testing system in the future.\n. We already have such functionality BTW:\n``` python\nIn the server core:\nserver.logfile_pos.seek_from() # seeks from position, where server is started\nFor the use in files:\nfrom tarantool_server import TarantoolLog\nlog = TarantoolLog(server.logfile)\nlog.positioning() # pin to the end of the log\nflag = log.seek_from('message')\n```\n. Ok, i've been waiting this for too long.\nThere's three parts of work that needed to be done:\n- [x] Set up sphinx\n- [x] Migrate our documentation\n- [x] Embedding of sphinx generated HTML into our site\n- [x] Create style for sphinx for embedding into our site\n. Finished\n. start/stop scripts are in tarantool-common already.\n. Yes, i get it, they never were in tarantool-common.\n. >  We should also add sysconfig variable which disables server restart when upgrading the scripts. \n@kostja: Are you sure? No one do this, i suppose (or i don't see anyone doing this)\n. >  special space for instance management\nIs there any need to make it into the core?\nWe may simply create a space '_instance' from the library.\n\ndist.lua on board as a package\n\nWe may provide dist.lua as RPM/DEB package or Lua rock\n. Done\n. I confirm existence, but i have no idea why.\n. There's already ffi bindings, we need simply to add interface for\nnon-blocking functions\n. No, i was misled by lua \"NativeObject\" files in 'Neopallium/lua-zmq'\n. 181 is very old - please, try to update tarantool, it seems to me that this bug was already fixed\n. https://gist.github.com/089854ba4788a7a47e96cbe07ca5d2d8\n. The reason for the message is too low rows_per_wal\n. Fixed in https://github.com/tarantool/tarantool/commit/1d7895ed06c8e55f7946f83ebee277cb53b64d9e\n. +1, maybe if build is in 'debug', then save stack in c plugins?\n. https://github.com/wahern/luaossl/blob/master/src/openssl.c#L6291 - for HMAC in OpenSSL\nhttp://dev.kryo.se/iodine/browser/src/base32.c - for BASE32\n. - [x] Preface\n- [x] Getting Started\n- [x] Triggers\n  - [x] connection\n  - [x] replace\n- [x] Replication\n- [x] Server administration\n- [x] Configuration Reference\n- [x] Connectors\n- [x] App A - List of errcodes\n- [x] App B - ProcTitles\n- [x] App C - Lua Tutorial\n- [x] App D - Plugins\n. Finished, already.\n. It's deprecated, since we have new module named crypto\n. -1 Not found: The data is invalid. : Unknown error  https://googlegroups.com/group/tarantool    Tarantool Google group\n404 Not Found   http://tarantool.org/doc/book/box/:ref:`wal_mode`   wal_mode\n404 Not Found   http://tarantool.org/doc/book/:ref:`replication_source` replication_source\n404 Not Found   http://tarantool.org/doc/book/:ref:`snapshotdaemon` snapshot daemon\n404 Not Found   http://tarantool.org/doc/book/:ref:`snap_dir`   snap_dir\n404 Not Found   http://tarantool.org/doc/book/:ref:`wal_dir`    wal_dir\n404 Not Found   http://tarantool.org/doc/book/:ref:`URI`    URI\n404 Not Found   http://tarantool.org/doc/book/connectors/dev_guide/box-protocol.rst`    doc/box-protocol.html\n404 Not Found   http://tarantool.org/doc/book/:ref:`settingdelimiter`   declare a delimiter\n404 Not Found   http://tarantool.org/doc/book/:func:`box.space.space-name.index[.index-name]:pairs` index.iterator\n404 Not Found   http://tarantool.org/doc/book/:doc:`/dev_guide/building_from_source`    Building from source\n404 Not Found   http://tarantool.org/doc/reference/:ref:`URI`   URI\n404 Not Found   http://tarantool.org/doc/reference/:ref:`logger`    logger\n404 Not Found   http://tarantool.org/doc/:dev:`/dev_guide/building_from_source` Building from source\n404 Not Found   http://tarantool.org/doc/:mod:`box.cfg` configure\n404 Not Found   http://tarantool.org/doc/:mod:`box.index`   index\n404 Not Found   http://tarantool.org/doc/book/box/:func:`box.space.space-name:create_index` create an index\n404 Not Found   http://tarantool.org/doc/book/box/:doc:`authentication` authorization feature\n404 Not Found   http://tarantool.org/doc/book/box/:doc:`replication`    replication feature\n404 Not Found   http://tarantool.org/doc/book/box/:ref:`snap_dir`   snap_dir\n404 Not Found   http://tarantool.org/doc/book/box/:ref:`slab_alloc_arena`   slab_alloc_arena\n404 Not Found   http://tarantool.org/doc/book/box/:ref:`URI`    URI\n404 Not Found   http://tarantool.org/doc/book/box/:ref:`admin_port  admin\n404 Not Found   http://tarantool.org/doc/book/box/:doc:`../connectors/index`    connectors\n404 Not Found   http://tarantool.org/doc/book/box/:doc:`triggers`   Triggers on connect and disconnect\n404 Not Found   http://tarantool.org/doc/book/box/:doc:`../configuration`   Configuration\n404 Not Found   http://tarantool.org/doc/book/box/:doc:`../app_d_plugins`   SQL DBMS plugins\n404 Not Found   http://tarantool.org/doc/book/box/:func:`connection_object:close`   conn:close\n. Rename all packages to packets in box-protocol.html\n. http://try.tarantool.org/blank\ndone\n. No place for WinAPI, right now :D\n2015-04-23 15:47 GMT+03:00 Aleksey Akulovich notifications@github.com:\n\nReadDirectoryChangesW\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n. Now brianfrankcooper/YCSB is alive again and we don't need to do this anymore. But automation and memcached are still needed\n. About memcached in YCSB: https://github.com/brianfrankcooper/YCSB/issues/326\n. memcached support for YCSB is partially done\n. Tutorial slide 6 is obsolete too - there's no need in delimiter at all\n. Fixed in latest master.\n. - socket_methods.read uses local readchunk or local readline.\n- They use :sysread.\n- :sysread uses ffi.C.read\nffi.C.read is syscall\n. ok, i get it, my bad.\n. Then assign it to documentation\n. box.cfg panics on all errors (if box_config_check can't detect them):\n-- box.cfg{ arena = 5* 1024 * 1024 }\n-- box.cfg{ listen = \"11:11\"}\n. What should be done here?. @rtsisyk @kostja Two ways, both must be implemented:\n\nusing sd_notify for support of systemd systems\ninside box_init, probably\nMust be ifdef'ed for platforms without systemd\n\n\nusing waiting in the parent process (for platforms with systemd)\nIf box.cfg{ background = true }, then we're running daemonize.\nInside daemonize we're waiting for event from child process (using unix socket or pipe or something). @limadm latest 1.6 must already support this:\n\n\n\n```\n[06:50 AM]-[vagrant@machine1]-[~/memcached/test]-[git sasl]\n$ LUA_CPATH='lol1' LUA_PATH='lol2' tarantool\ntarantool: version 1.6.8-757-g5f7df77\ntype 'help' for interactive help\ntarantool> package.cpath\n\n\nlol1\n...\ntarantool> package.path\n\n\n\nlol2\n...\n``\n. I think that everything may be fixed by environment variables now, so close it.\n. won't fix\n. GAT(K) operations are (Get and Touch (with Key))\n. (Get and )Touch - move from update to replace\n. need: convert tests from perl to python\n. done on branchmemcached. Moved to tarantool/memcached#4\n. need: convert tests from perl to python\n. done on branchmemcached. Moved to tarantool/memcached#3\n. basic version is onmemcachedbranch\n. Moved to tarantool/memcached#2\n. Moved to tarantool/memcached#1\n. done\n.src/module.h` appears when you're building Tarantool. We've renamed it in\nversion 1.6.6\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n2015-12-25 12:44 GMT+03:00 David Yu notifications@github.com:\n\nThere is no src/trivia/tarantool.h in both master and 1.6 branch.\nLikewise doing a make install does't have a tarantool.h in\n$INSTALL_DIR/include/tarantool\nI was trying to install your luarocks modules (makes me wonder if they are\nused at all) and the rocks install fails because of that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1061#issuecomment-167216516\n.\n. It seems to me that they're not related:\nthis ticket is about new infrastructure of docker - builds inside\ncontainer, not VM's.\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n2015-11-17 15:47 GMT+03:00 Eugene Leonovich notifications@github.com:\n\nAnd here is an example of how I use docker to test Tarantool queue:\nhttps://github.com/tarantool-php/queue/blob/master/.travis.yml\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1072#issuecomment-157362494\n.\n. So, i guess, i've lost ability to test my php driver on every available PHP\nthat's given in travis?\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n2015-11-28 1:01 GMT+03:00 Andrew notifications@github.com:\n\ndemo repository: https://packagecloud.io/tarantool/modules\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1072#issuecomment-160218280\n.\n. Pushed by hand\n. It seems like dup of https://github.com/tarantool/tarantool/issues/27\n. Inherited by https://github.com/tarantool/tarantool/issues/1201\n. @rushba try this code, instead:\n\n``` lua\nlocal ffi = require('ffi')\nlocal log = require('log')\nif ffi.os == 'OSX' then\n  ffi.cdef[[\n    typedef int32_t suseconds_t;\n    struct timeval {\n      long        tv_sec;     / seconds /\n      suseconds_t tv_usec;    / microseconds /\n    };\n  ]]\nelse\n  ffi.cdef[[\n    struct timeval {\n      long tv_sec;     / seconds /\n      long tv_usec;    / microseconds /\n    };\n  ]]\nend\nffi.cdef[[\n  struct rusage {\n    struct timeval ru_utime; / user CPU time used /\n    struct timeval ru_stime; / system CPU time used /\n    long   ru_maxrss;        / maximum resident set size /\n    long   ru_ixrss;         / integral shared memory size /\n    long   ru_idrss;         / integral unshared data size /\n    long   ru_isrss;         / integral unshared stack size /\n    long   ru_minflt;        / page reclaims (soft page faults) /\n    long   ru_majflt;        / page faults (hard page faults) /\n    long   ru_nswap;         / swaps /\n    long   ru_inblock;       / block input operations /\n    long   ru_oublock;       / block output operations /\n    long   ru_msgsnd;        / IPC messages sent /\n    long   ru_msgrcv;        / IPC messages received /\n    long   ru_nsignals;      / signals received /\n    long   ru_nvcsw;         / voluntary context switches /\n    long   ru_nivcsw;        / involuntary context switches /\n  };\n  int getrusage(int who, struct rusage usage);\n  int gettimeofday(struct timeval tv, struct timezone *tz);\n]]\nlocal RUSAGE_SELF = 0\nlocal shared_rusage = ffi.new(\"struct rusage[1]\")\nfunction ss_get_rusage()\n    if ffi.C.getrusage(RUSAGE_SELF, shared_rusage) < 0 then\n        return -1\n    end\nlocal ru_utime = tonumber(shared_rusage[0].ru_utime.tv_sec) +\n                 (tonumber(shared_rusage[0].ru_utime.tv_usec) / 1000000)\nlocal ru_stime = tonumber(shared_rusage[0].ru_stime.tv_sec) +\n                 (tonumber(shared_rusage[0].ru_stime.tv_usec) / 1000000)\n\nreturn {\n  ru_utime = ru_utime,\n  ru_stime = ru_stime,\n}\n\nend\n``\n. @rtsisyk It's codebase is a hell of a mess.. We already use some of their FFI bindings, it seems to me we'll catch error fromffimodule when someone will useljsyscall. @rushbastruct rusage[1]is a pointer andstruct rusageis not. You need pointer forgetrusage` function.\n. What does that means?\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n2015-11-28 1:08 GMT+03:00 Konstantin Osipov notifications@github.com:\n\n[image: screenshot from 2015-11-28 01 07 42]\nhttps://cloud.githubusercontent.com/assets/482910/11448601/80b77c30-956c-11e5-8913-a04b30f85e50.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1172.\n. Fixed in latest stable - 1.5.5-21\n. Our build system uses dch to update version of package.\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438, \u0415\u0432\u0433\u0435\u043d\u0438\u0439.\n2015-12-10 14:06 GMT+03:00 coldze notifications@github.com:\n\nI've cloned repo, switched to tag 1.6.8, built deb-package and was\nsurprised to see 1.6.5 in package name :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1197.\n. @rtsisyk \n1) 1.5 replication client may be the second part of this framework\n2) space:format() schema is not enough for old schema\n. It's located in repo https://github.com/bigbes/migrate. CR neded\n. Universal proto, as i guess: https://github.com/pubsubhubbub\n. It depends on adding :sysread and :syswrite into fio_object for adding support of streaming API.\n. It's planned in the next version: https://github.com/tarantool/tarantool/issues/1209\n. Approved by rtsisyk. Ways to implement this:\n1. Make use of .po files for supporting of gettext (http://www.sphinx-doc.org/en/stable/intl.html)\n2. Make use of ifconfig for including files with different suffixes (http://www.sphinx-doc.org/en/stable/ext/ifconfig.html)\n. > you has convinced me that tarantoolctl connect is not so big deal.\n\nIt is a big deal, it must be tarantoolcli, ctl - means control, cli -\nmeans command line interface.\nWith best regards, Eugene.\n2016-04-01 17:53 GMT+03:00 Roman Tsisyk notifications@github.com:\n\nAssigned #1288 https://github.com/tarantool/tarantool/issues/1288 to\n@bigbes https://github.com/bigbes.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1288#event-611375484\n. It's used, so we better document how to implement it/\n. Also we need to document that msgpack.NULL is not equal nil. example:\n\n``` lua\ntarantool> if msgpack.NULL then return 1 end\n\n\n1\n...\ntarantool> if nil then return 1 end\n\n\n...\n``\n. What is output oftarantool --versionand what's your OS?\n. Done in https://gist.github.com/7009ab1dd2030c158fd5.\n. Bypass was found (when used{{ toc }}in templates, not{{ toctree() }}`).\nI've opened issue for this bug: https://github.com/sphinx-doc/sphinx/issues/2363\n. test/var/box.log:\n2016-03-04 13:21:28.902 [35898] main/104/console/unix/:/Users/blikh/sr I> started\n2016-03-04 13:21:28.902 [35898] main/105/console/unix/:/Users/blikh/sr I> started\n2016-03-04 13:21:28.902 [35898] main C> entering the event loop\n2016-03-04 13:21:28.904 [35898] main/106/console/unix/: I> client unix/: connected\n2016-03-04 13:21:28.905 [35898] main/106/console/unix/: I> client unix/: disconnected\n2016-03-04 13:21:33.113 [35898] main C> got signal 2 - Interrupt: 2\ntest/var/sql.result\ntest_run:cmd('restart server default')\n. Problem was in atomic loads (that weren't atomic) and in parsing code of read_reply.\ntnt->read_reply needs to be documented.\n. 1) You better use http://github.com/tarantool/http for means of http server/client. It uses our socket API, that doesn't blocks Tarantool.\n2) Our socket module is interfiering with LuaSocket. It's not initialized properly\nSo, my advice is you should use our socket API and HTTP parsing/creation. \n. You may unload preloaded socket module using\npackage.loaded['socket'] = nil\nand then you may try to require() what depends on custom (not embedded) socket.lua\n. Please, let us know if it'll work for you.\n. It's not rocks related, it's related to packages. And it's described in every package\n. @hengestone now I get it, it's not tarantoolctl related.\n. It was done by @dreadatour (Vladimir Rudnyh) - https://github.com/dreadatour/tarantool-locksmith . We need to fork this rock to our repo - author gave us his \"blessing\"\n. I can't run YCSB because of this bug\n. I see a couple of bugs:\n1) sp_get(0x2889470): attempt to use destroyed object - sophia crash\n2) log.error(tupleAAAA); -- make mistake at this string ;( - lua is dynamic language, this error can be found only at runtime (or you may use linter).\nResolution for this issue:\n1) sophia error must be investigated separately\n2) add check that script syntax(!!) is OK, then restart tarantool\n. > How i can check syntax before start ?\nIt will be added into tarantoolctl\n\nIf error in lua scripts appears on production via puppet, and tarantool on restart say to puppet \"OK\" (really not started) - it will be BIG FAIL!!!\n\nAgain, there's two types of errors:\n1) syntax errors - that can be found at compile time\n2) semantics errors - can be found only at runtime.\nTarantool can't fight with semantics errors, but it can check for syntax errors before restart.\n. @pmwkaa i meant Sophia related, not tarantoolctl related.\n. > I don't think that anybody need a custom value for logger\nAre you sure?\n. box.cfg{} is a test case, itself.\n. blikh@bigbes-laptop:~/src/work/tarantool$ ./src/tarantool\n./src/tarantool: version 1.7.0-1031-g9d00ed7\ntype 'help' for interactive help\ntarantool> box.cfg{}\n2016-06-01 12:33:20.987 [62369] main/101/interactive C> version 1.7.0-1031-g9d00ed7\n2016-06-01 12:33:20.988 [62369] main/101/interactive C> log level 5\n2016-06-01 12:33:20.988 [62369] main/101/interactive I> mapping 1073741824 bytes for tuple arena...\nSegmentation fault\nCurrent time: 1464773600\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAbort trap: 6\nAlso, it's Release build\n. This bug is on MacOS X, as I get\n. TREE index is not affected\n. We have deep integration with LuaJIT, so it'll be problematically to use PUC-Rio Lua, instead.\n. I don't understand the problem, sorry\n. @lenkis please, check usage messages. @lenkis is this ok? Or logical order is preferred?\n```\nblikh@bigbes-laptop:~/src/work/tarantool$ ./extra/dist/tarantoolctl\nTarantool client utility (1.7.3-92-g1ff44aa)\nUsage:\n    cat cat .. [--space=space_no ..] [--show-system] [--from=from_lsn] [--to=to_lsn]\n    check check \n    connect connect \n | connect connect \n    enter enter \n    eval eval    # file version\n     | eval eval  # pipe version\n    logrotate logrotate \n    play play  .. [--space=space_no ..] [--show-system] [--from=from_lsn] [--to=to_lsn]\n    reload reload  \n    restart restart \n    start start \n    status status \n    stop stop \n```. It's not entirely so:\n1) It looks in ./.tarantoolctl\n2) then it looks in ~/.config/tarantool/tarantool\n3) then it looks in predefined dir (@CMAKE_INSTALL_FULL_SYSCONFDIR@\n/@SYSCONFIG_DEFAULT@/tarantool, where [@CMAKE_INSTALL_FULL_SYSCONFDIR@ is,\nbasically, /etc], [@SYSCONFIG_DEFAULT@ is 'sysconfig'/'defaults' in\nrpm'based/deb'based distros])\nWith best regards, Eugene.\n2016-05-19 17:20 GMT+03:00 Konstantin Osipov notifications@github.com:\n\ntarantoolctl has a search order for it's 'defaults' file. First it looks\nfor a defaults file in ~/.config/tarantool/tarantool, then in\n/etc/sysconfig/tarantool/ Please confirm with the source code to find out\nthe exact order:\nhttps://github.com/tarantool/tarantool/blob/1.7/extra/dist/tarantoolctl.in#L18\nhttps://github.com/tarantool/tarantool/blob/1.7/extra/dist/tarantoolctl.in#L214\nhttps://github.com/tarantool/tarantool/blob/1.7/extra/dist/tarantoolctl.in#L198\nThis allows one to use it for instance management while instances are\nlocated in a home directory. This can be quite useful for development, or\nwhen there is no access to /var or other system-wide directories.\nPlease document this.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1492\n. You can build 1.5 on Mac? As I know, Mac OS X is not supported.\n. If you can build it, then you may use brew install https://github.com/tarantool/tarantool/blob/stable/extra/tarantool.rb command to install Tarantool using Homebrew\n. Applied your patches with some fixes. Works now. Thanks.\n. Thank you!\n. I wasn't been able to reproduce this bug, but I guess that it's problem with numbers, that you've inserted.\nSchema of tuple is:\n\nTuple <length is 6>:\n    <MP_STR>  key,        -- key to insert\n    <MP_UINT> expiration, -- expiration (in seconds since the epoch)\n    <MP_UINT> time,       -- time of creation\n    <MP_STR>  val,        -- value to insert\n    <MP_UINT> cas,        -- check and select value (newly generated on every change)\n    <MP_UINT> flags,      -- flags field\nso try this, instead: \nbox.space.__mc_spname:replace{\n    \"test_key\", \n    0ULL + fiber.time() + 10,\n    0ULL + fiber.time(),\n    \"test_value\",\n    0ULL + math.random(),\n    0ULL\n}\n(means insert pair \"test_key\":\"test_value\", that'll expire in 10 seconds (and was created right now) with random cas and without flags)\nIt'll force to insert MP_UINT (nor MP_INT/MP_LONG/MP_DOUBLE). \nAbout Lua API: https://github.com/tarantool/memcached/issues/8\n. Need full test case to repeat problem\n. https://github.com/derElektrobesen/tntlua/blob/bernadette/bernadette.test.lua#L696-L703\nexpected 4, got 6. That's what is written in the log:\nplanned: 4\nrun: 6\n. it doesn't work with metatables set with ffi.metatype\n. It's reasonable to mention https://github.com/tarantool-php/queue in queue\nrepository. Mapper is for general Tarantool usage, but php-queue is for\nqueue only.\nhttps://github.com/tarantool-php/queue\nWith best regards, Eugene.\n2016-06-15 13:01 GMT+03:00 Eugene Leonovich notifications@github.com:\n\n@kostja https://github.com/kostja Would it also have sense to add\nhttps://github.com/tarantool-php/queue?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1547#issuecomment-226143048,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAeQFBEzJXuwS00mWJdMI_vajOWdLPSRks5qL81mgaJpZM4I0KI5\n.\n. It's not duplicate, since it's about Lua C modules, and #910 is about\nnative C stored procedures, no?\n\nWith best regards, Eugene.\n2016-06-30 11:18 GMT+03:00 Roman Tsisyk notifications@github.com:\n\nClosed #1579 https://github.com/tarantool/tarantool/issues/1579.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1579#event-708823880, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAeQFP7OhD_05S8V80cBO_OTny6428AZks5qQ3vrgaJpZM4JBHay\n.\n. \u0411\u044b\u043b\u043e-\u0431\u044b \u043d\u0435 \u043f\u043b\u043e\u0445\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u0440\u043a\u0443, \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u044e \u0422\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430. \u041e\u0447\u0435\u043d\u044c \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0435\u0441\u0442-\u043a\u0435\u0439\u0441 \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f.\n. unneeded uint32_t index_id\n. It's not what you want?\n\nconn.space.<space-name>:upsert{field-value, ...}\n. But it doesn't show indexes and their methods\n. This must be fixed now\n. Environment is a table, after all. With keys and values. It's not good enough for rationale?\n. BTW, you can access all environment variables here with one function call here.\n. https://github.com/tarantool/tarantool/tree/gh-1718-env\n. @rtsisyk \n1) environment is a dictionary, so it's a legacy of c languages to use it with set/get env functions\n2) python language, for example, have both of them:\n- os.getenv(varname[, def_value]), os.putenv(varname, value), os.unsetenv(varname)\n- os.environ\n. Not a bug.\nIn [4]: connection.call('box.space.auth_user:auto_increment', [[\"8\", 7, 7, 7]])\nOut[4]:\n- [1, '8', 7, 7, 7]\n. Debian 8, x86_64\n. duplicate of https://github.com/tarantool/tarantool/issues/618\n. @sgnrslv well, this rule simply applies to EQ, but not applies to LT/GT(E). If first part of key is suitable (lesser/greater respectively), than it's sufficient condition.\nSo I've assigned this to documentation project.\n. closing as duplicate of https://github.com/tarantool/tarantool/issues/1131\n. Similar problems with Python were related to bad loaded library (linked to brew, loaded from apple sdk). Also this bug is presented in 1.6\n. Also available in 1.6.9\n. Of course it's not the only problem in making net.box to work without the box.\n. Hello, Andre!\nRight now we don't have Tarantool connector for lua language. But we have a couple of different things that may help you (but they all related to nginx and resty):\n1) https://github.com/perusio/lua-resty-tarantool and https://github.com/ziontab/lua-nginx-tarantool . You may adapt one of this connectors for your application. (Any PR is much appreciated!)\n2) You may use https://github.com/tarantool/nginx_upstream_module as HTTP proxy between Tarantool and you application, that will convert http queries to msgpack.\n. All documentation tickets are now part of tarantool/doc repository. And that's one is: tarantool/doc#85\n. This command must be executed: cmake . -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl/ -DREADLINE_ROOT=/usr/local/opt/readline.\nWe may add /usr/local/opt/<package-name> to list of directories to search in and describe variables of CMAKE somewhere\n. Duplicate of https://github.com/tarantool/tarantool/issues/946\n. Ehm, it's normal behaviour.\n. Closing as duplicate of https://github.com/tarantool/tarantool/issues/725 .\n. Failed to reproduce:\nblikh@bigbes-laptop:~/src/work/2$ cat .tarantoolctl\ndefault_cfg = {\n    pid_file   = \"var/run/tarantool\", -- /usr/local/var/run/tarantool/${INSTANCE}.pid\n    wal_dir    = \"var/lib/tarantool\", -- /usr/local/var/lib/tarantool/${INSTANCE}/\n    snap_dir   = \"var/lib/tarantool\", -- /usr/local/var/lib/tarantool/${INSTANCE}\n    vinyl_dir  = \"var/lib/tarantool\", -- /usr/local/var/lib/tarantool/${INSTANCE}\n    logger     = \"var/log/tarantool\", -- /usr/local/var/log/tarantool/${INSTANCE}.log\n    username   = 'blikh'\n}\ninstance_dir = \"instances\"\nblikh@bigbes-laptop:~/src/work/2$ cat instances/instance.lua\nos.exit(0)\nblikh@bigbes-laptop:~/src/work/2$ cat ^C\nblikh@bigbes-laptop:~/src/work/2$ tarantoolctl start instance\n/usr/local/bin/tarantoolctl: Starting instance...\nblikh@bigbes-laptop:~/src/work/2$ tarantoolctl start not_instance\n/usr/local/bin/tarantoolctl: Instance not_instance is not found in instances\nProbably was fixes in latest 1.7. 1) user.cc -> user.c\n1) session.cc -> session.c\n3) box.session without box.cfg\n4) lua/console.c -> box/lua/console.c\n5) triggers in the console\n. > Were there any problems with the old notification daemon? Because they\nboth use the same tool/algorightm.\nYes, they were.\n@rtsisyk why can't you simply ignore it?\nWith best regards, Eugene.\n2016-12-06 0:04 GMT+03:00 Konstantin Nazarov notifications@github.com:\n\nDoes it behave this way for all pull requests or only for this one?\nWere there any problems with the old notification daemon? Because they\nboth use the same tool/algorightm.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1971#issuecomment-264976644,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAeQFJlUQqmCvmPi34JGSEz8nIewVSYDks5rFHxRgaJpZM4LEocK\n.\n. I've pasted it into chat. Maybe it's better to replace prints with aggregation and return?\n. http://lua-users.org/wiki/StoringNilsInTables\n\nUse msgpack.NULL/json.NULL/yaml.NULL to store nil in tables.\nOpened ticket for documentation: https://github.com/tarantool/doc/issues/64. Also,\nTest:auto_increment{1, nil, nil, nil, nil, nil, nil, nil, nil, 1}\n-- error: Tuple/Key must be MsgPack array --O_O<--------------------------------------------------\nit becames not an array table, but map table and Tarantool thinks that it's map {[1] = 1, [10] = 1}. macOS have a problem with LuaRocks too. It must be build and shipped with\nTarantool (in homebrew). Building LuaRocks for Tarantool depends on ticket\nwith Lua CLI flags: https://github.com/tarantool/tarantool/issues/1265\n2017-01-10 13:52 GMT+03:00 Roman Tsisyk notifications@github.com:\n\nmacOS doesn't support DEB/RPM packages. Please try to use LuaRocks instead.\n\n\nWith best regards, Eugene.\n. Are you using Clang with version >=3.9?. Looks, like you're trying to build with clang 3.9 with older header files (that were installed before).. duplicate of https://github.com/tarantool/tarantool/issues/2055. We may override loader with our custom.\nEvery command accepts flags, that contains rock-trees, for example (https://github.com/luarocks/luarocks/blob/master/src/luarocks/config_cmd.lua).\nFor example install accepts flags, name, version. I've described flags before (command line arguments), name is name of a rock, version is a rock version.. Also, site_config.lua can be overriden using cfg module. We can use tarantoolctl as one entry point:\ntarantoolctl rock install\ntarantoolctl rock search\n...\nWe should be able to maintain local instances by using .tarantoolctl configuration. If started using tarantoolctl we can use local LUA_PATH/LUA_CPATH.. Try to install readline package with headers/library and provide it to to cmake using READLINE_ROOT variable.\nThis should solve your problem.. Please, provide more information. Cmake log, where readline is installed.. error: 'builtin/uri.lua:41: bad argument #2 to ''uri_parse'' (cannot convert ''table'' to ''const char *'')'\non double call of box.cfg{ replication = {} }. Interface (6) seems ok.. Troubles with current implementation shouldn't bother us in API redesign.\nWe can (and should) use :opts construction like these:\nnb_object = net.box:connect('host:port')\nnb_wrapper = nb_object:opts()\nnb_wrapper:select(...)\nnb_wrapper:insert(...)\n\nIt's technically legal to have invocation like :opt({A=1}):opts({B=2}):opts({C=3}), with every subsequent opts creating a new context based on existing one.\nRuntime overhead is due to the need to create a new object for each :opts and :timeout call.\n\nopts API has all this problems, but we can describe this overheads and show what is the \"Right Way\". Everyone who'll do differently will be \"his own worst enemy\".\nBTW: subsequently opts may not be based on the existing ones.\nPS: Desing of call-like functions func( options, name_or_code, param1, ... ) leads to ambiguity (select and other requests uses different convention) and looks drearily since options (not only in lua) are located, usually, in the end of function signature (natural and well-established method of function declaration).. log.log_pid looks kind of ugly. Maybe it's better to rename log_pid to pid, to avoid unnecessary repetition?. > Already done, see 1.7.\nIf it's done it doesn't mean it's not ugly.. Proposal: add new metamethod __copy. It'll provide ability to make deepcopy for objects other than raw tables/numbers/strings (base types).. Proposal: add shallow copy (named copy) (in case we need to duplicate only one level of table). In tarantoolctl we need to replace (\"\\\\x%2x\") --with--> (\"\\\\x%02x\").. Fixed. I'll merge them by hand, thx.. > Do you propose that in future we will do development in forks?\nWe can develop in fork and we can develop in place - that doesn't matter for creating of PR (local/remote ones). Doesn't seem like much of a problem to me.\nGatekeeper can delete branches, or this can do committer... For now it's ok, we don't have automatic testing of LuaJIT, so we shouldn't\ndo it now.\n. Done. @rtsisyk \nPossible enchancements:\n1) copy functions, their environment (if set) and upvalues (it's possible)\n2) copy metatables\n3) replace recursion with functions with recursion with tables\n4) copy table key values\nPossible inspiration - https://gist.github.com/Deco/3985043\nSummarizing: we need to decide whether we need any of these features or not. Don't see why we should do these. That seems.. unlikely.\nHere is manual:\n\nhttps://www.freedesktop.org/software/systemd/man/systemd.service.html\n\nAnd here is our systemd file (hint: no USec here):\n\nhttps://github.com/tarantool/tarantool/blob/1.7/extra/dist/tarantool%40.service.in\n\nMoreover, I've unpacked our RPM (provided from packagecloud) and found nothing about  \"RestartUSec\":\n```\n2017-04-14 14:40:59 bigbes-laptop in ~/Downloads/temp\n[\u25cb] \u2192 rpm2cpio.pl tarantool-1.6.9.80-1.el7.centos.x86_64.rpm | cpio -idmv\n...\n./usr/lib/systemd/system/tarantool@.service\n...\n2017-04-14 14:41:02 bigbes-laptop in ~/Downloads/temp\n[\u25cb] \u2192 cat ./usr/lib/systemd/system/tarantool@.service | grep Restart\n4. Restart tarantool@example service\nRestart=on-failure\nRestartSec=100ms\n```\n. @rtsisyk (1 and 5)\nSupport of different loggers and log levels before (!!) start:\nUsing proxy logger objects:\n```\nlocal log = require('log')\n-- we may define name for each logger (it creates new or obtaines existing one with the same name)\nlocal logger = log('name', { logger_cb = , ... })\n-- optional log level modifier\nlogger:log_level(...)\nlogger:info(...)\nlogger:error(...)\nlogger:<...>\n``\nOld way logger still presents (log.*), moreover, new logger may still be used with old file (it'll use_sayby default, if nologger_cb` will be passed).\nUpdate: name may be used in logger line (or not), configured line may be written in the future. Superseeds https://github.com/tarantool/tarantool/issues/1054. @racktear if logger_cb will be implemented, then your proposal is very simply implemented, otherwise.. well we must implement this on the c side and it'll be very hard. 2 EVR1: new configuration API for logging box.cfg style v.s. different methods for every options\n \ud83d\udc4d, on log = logger.new({name=..., ) + log:cfg\n \ud83d\udc4e,  on log:set_loglevel, log:set_formatter etc. @kostja review\n1) Document API\n2) Make it C compatible\n3) Facility manipulation. Sorry, something bad happened. So what about other commits?. Done. Rebased onto latest 1.7 and pushed gh-2341 fix. Everything is done. @kostja what is different on *BSD?. Oh, I've investigated: no systemd - no problems.. Well, LJ_GC64 is still in heavy beta and is limited to x64/arm64 only.. @zloidemon swift should use _say function like it's done in https://github.com/tarantool/tarantool/blob/1.8/src/lua/log.lua. Moreover, this is discussion for another thread.. Duplicate of https://github.com/tarantool/tarantool/issues/2414. > result:__pairs() - returns a Lua compatible iterator over result set rows;\n__pairs/__ipairs are ignored in LuaJIT without COMPAT_52 (+ it's metamethods, not methods). We are using :pairs() for now\n\nAll functions return an object on success or nil on error\nThe status is nil on error. In this case res contains an error message, and non-nil\n...\n\nfalse is better for this cases. It's standard practice in Lua community.. Updated.  parallel test-run additionally can be enabled for next suites: wal_off, vivnyl, xlog. Should be fixed by now with https://github.com/tarantool/tarantool/commit/39c4fea621eae538d5cfd46640e71aafa5a7d712. Probably I was wrong with that. We will write our own syslog client implementation (that'll support our needs) as described https://tools.ietf.org/html/rfc5424\nWhy? We won't have any way for syslog to behave like our \"file\" logging. It assumes, that we can write at most \"PIPE_BUF\" bytes at once in a \"sync\" way.\nThis operation can't be ported to socket IO, so it can't be ported to be a part of current syslog API.\nSumming up: simple enough option is to support part of syslog API in library, that'd suit us well.. BTW I suggest to implement this first, since it'll help us to design our new logging API. It's not broken, it follows the specification - https://tools.ietf.org/html/rfc4648#section-3.3. It documents both (newline and pads). 1. sayfunc is the same at the first iteration\n2. LOG_SAY/LOG_DEFINE shouldn't interfere with each other\n3. say_xxx() should be replaced, but not in the first patch (since it's used in submodules, for example, no need to hurry and replace every occurence, as I see it)\n4. maybe\n5. fixed\n6. it's negotiable - I think log_level is general function name, it confuses me. @kostja what do you think?. Well, this is regression caused by https://github.com/tarantool/tarantool/commit/8c3b6310abdbf2ef74b93324797dcf0b27c6b0dd commit.. LuaRocks installs to /usr/local/share/lua/5.3/, but tarantool search\npackages in /usr/local/share/lua/5.1/. Use our RPM repository, please.\nWith best regards, Eugene.\n2017-07-03 11:52 GMT+03:00 Konstantin Molchanov notifications@github.com:\n\nHi! I have some trouble with Lua 5.3.4.\nModule 'http.server' not found.\n~ cat /etc/redhat-release\nFedora release 25 (Twenty Five)\n~ lua -v\nLua 5.3.4\n~ tarantool --version\nTarantool 1.6.9-52-g9ad22b7\nTo reproduce:\ntarantool> require('http.server')\n\nerror: \"module 'http.server' not found:\\n\\tno field package.preload['http.server']\\n\\tno\n    file './http/server.lua'\\n\\tno file './http/server/init.lua'\\n\\tno file '/home/mkv/.luarocks/share/lua/5.1/http/server.lua'\\n\\tno\n    file '/home/mkv/.luarocks/share/lua/5.1/http/server/init.lua'\\n\\tno file '/home/mkv/.luarocks/share/lua/http/server.lua'\\n\\tno\n    file '/home/mkv/.luarocks/share/lua/http/server/init.lua'\\n\\tno file '/usr/local/share/tarantool/http/server.lua'\\n\\tno\n    file '/usr/local/share/tarantool/http/server/init.lua'\\n\\tno file '/usr/share/tarantool/http/server.lua'\\n\\tno\n    file '/usr/share/tarantool/http/server/init.lua'\\n\\tno file '/usr/local/share/lua/5.1/http/server.lua'\\n\\tno\n    file '/usr/local/share/lua/5.1/http/server/init.lua'\\n\\tno file '/usr/share/lua/5.1/http/server.lua'\\n\\tno\n    file '/usr/share/lua/5.1/http/server/init.lua'\\n\\tno file './http/server.so'\\n\\tno\n    file '/home/mkv/.luarocks/lib/lua/5.1/http/server.so'\\n\\tno file '/home/mkv/.luarocks/lib/lua/http/server.so'\\n\\tno\n    file '/usr/local/lib64/tarantool/http/server.so'\\n\\tno file '/usr/lib64/tarantool/http/server.so'\\n\\tno\n    file '/usr/local/lib64/lua/5.1/http/server.so'\\n\\tno file '/usr/lib64/lua/5.1/http/server.so'\\n\\tno\n    file './http.so'\\n\\tno file '/home/mkv/.luarocks/lib/lua/5.1/http.so'\\n\\tno file\n    '/home/mkv/.luarocks/lib/lua/http.so'\\n\\tno file '/usr/local/lib64/tarantool/http.so'\\n\\tno\n    file '/usr/lib64/tarantool/http.so'\\n\\tno file '/usr/local/lib64/lua/5.1/http.so'\\n\\tno\n    file '/usr/lib64/lua/5.1/http.so'\"\n...\n\n\"http.server\" was installed by this command:\nluarocks install https://raw.githubusercontent.com/tarantool/http/master/\nhttp-scm-1.rockspec --local\ntarantool> package.path\n\n./?.lua;./?/init.lua;/home/mkv/.luarocks/share/lua/5.1/?.lua;/home/mkv/.luarocks/share/lua/5.1/?/init.lua;/home/mkv/.luarocks/share/lua/?.lua;/home/mkv/.luarocks/share/lua/?/init.lua;/usr/local/share/tarantool/?.lua;/usr/local/share/tarantool/?/init.lua;/usr/share/tarantool/?.lua;/usr/share/tarantool/?/init.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua;\n...\n\nExpected normal 'http.server' module loading.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/2560, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAeQFM6hgyYJZXhi2uTgnG13yUhb79qKks5sKKvYgaJpZM4OMALT\n.\n. Luarocks problem is superseeded by this issue: https://github.com/tarantool/tarantool/issues/2067. @kostja documentation on __eq metamethod says:\n__eq - Check for equality. This method is invoked when \"myTable1 == myTable2\" is evaluated, but only if both tables have the exact same metamethod for __eq.\n\nSo it can't be fixed this way.. I was in full confidence, that example.lua is, automatically, installed.\nOk, I'll put it with the next brewspec update. But I need some help with this https://github.com/tarantool/tarantool/issues/2930. Why aren't you using ffi + https://en.wikipedia.org/wiki/C_date_and_time_functions?\nAre you using posix library a lot, or this is one task?. Couple of problems with this kind of attack:\n1) You need to know internal structure of a project\n2) You need to know space structure of instance\n3) You need to know hashing algorithm\n4) You need to calculate collisions - not so simple task, after all\nSo, not so big problem after all.. Proposal: do not touch fio.rename as low-level counterpart and create some analogue of shutil python library:\n copy between file-systems\n rmtree - already used in tests. Probably the duplicate of https://github.com/tarantool/tarantool/issues/2724. Don't you think, that it's brew spec problem?. @rtsisyk the problem shows, when we're running tarantool from root (and it later downgrade its permissions to user, for example tarantool).\nIt's common case, don't you think so?\n. https://github.com/tarantool/tarantool/issues/2852#issuecomment-338832430. ```diff\ndiff --git a/test-run b/test-run\nindex a50b0b537..1b20509ff 160000\n--- a/test-run\n+++ b/test-run\n@@ -1 +1 @@\n-Subproject commit a50b0b5376188c6bce65a84620d20b2540408a5a\n+Subproject commit 1b20509ffbfab468e02d52390d93785043508a64\ndiff --git a/test/app-tap/clock.test.lua b/test/app-tap/clock.test.lua\nindex 0076788f8..fd1c4f272 100755\n--- a/test/app-tap/clock.test.lua\n+++ b/test/app-tap/clock.test.lua\n@@ -2,7 +2,7 @@\nclock = require(\"clock\")\n test = require(\"tap\").test(\"csv\")\n-test:plan(9)\n+test:plan(10)\n test:ok(clock.realtime() > 0, \"realtime\")\n test:ok(clock.thread() > 0, \"thread\")\n test:ok(clock.monotonic() > 0, \"monotonic\")\ndiff --git a/test/app-tap/console.test.lua b/test/app-tap/console.test.lua\nindex 2f16d2186..68000ca28 100755\n--- a/test/app-tap/console.test.lua\n+++ b/test/app-tap/console.test.lua\n@@ -21,7 +21,7 @@ local EOL = \"\\n...\\n\"\ntest = tap.test(\"console\")\n-test:plan(50)\n+test:plan(57)\n-- Start console and connect to it\n local server = console.listen(CONSOLE_SOCKET)\ndiff --git a/test/app-tap/minimal.test.lua b/test/app-tap/minimal.test.lua\nindex c0a90df74..e44a0f6a7 100755\n--- a/test/app-tap/minimal.test.lua\n+++ b/test/app-tap/minimal.test.lua\n@@ -50,12 +50,17 @@ for , env in ipairs({\n }) do\n     for , res in ipairs({\n         {' is empty', '', ''},\n-        {' isn\\'t empty (without \";;\")', 'bla-bla.lua', 'bla-bla.lua'},\n-        {' isn\\'t empty (without \";;\")', 'bla-bla.lua;', 'bla-bla.lua;'},\n-        {' isn\\'t empty (without \";;\")', 'bla-bla.lua;;', 'bla-bla.lua;' .. env[3] .. ';'},\n+        {' isn\\'t empty (without \";;\")', 'bla-bla.lua',      'bla-bla.lua'            },\n+        {' isn\\'t empty (without \";;\")', 'bla-bla.lua;',     'bla-bla.lua;'           },\n+        {' isn\\'t empty (with \";;\")',    'bla-bla.lua;.*;;', 'bla-bla.lua;' .. env[3] },\n     }) do\n-        local fh = io.popen(env[1] .. \"='\" .. res[2] .. \"' tarantool ./\" .. env[2])\n-        tap:is(fh:read(), res[3], env[1] .. res[1])\n+        local cmd = table.concat({\n+            (\"%s='%s'\"):format(env[1], res[2]),\n+            ('tarantool %s'):format(env[2]),\n+        }, ' ')\n+        local fh = io.popen(cmd)\n+        local rv = fh:read():gsub('-', '%%-'):gsub('+', '%%+'):gsub('?', '%%?')\n+        tap:like(res[3], rv, env[1] .. res[1])\n         fh:close()\n     end\n end\ndiff --git a/test/app-tap/module_api.test.lua b/test/app-tap/module_api.test.lua\nindex 8ee89873e..d55f67c3b 100755\n--- a/test/app-tap/module_api.test.lua\n+++ b/test/app-tap/module_api.test.lua\n@@ -33,7 +33,7 @@ local function test_pushcdata(test, module)\n end\nlocal test = require('tap').test(\"module_api\", function(test)\n-    test:plan(21)\n+    test:plan(22)\n     local status, module = pcall(require, 'module_api')\n     test:is(status, true, \"module\")\n     test:ok(status, \"module is loaded\")\ndiff --git a/test/box-tap/session.storage.test.lua b/test/box-tap/session.storage.test.lua\nindex 6e1cd1913..51065954d 100755\n--- a/test/box-tap/session.storage.test.lua\n+++ b/test/box-tap/session.storage.test.lua\n@@ -7,7 +7,7 @@ local net_box = require(\"net.box\")\n local test_run = require('test_run')\n local inspector = test_run.new()\n-test:plan(9)\n+test:plan(15)\ntest:is(\n     inspector:cmd(\"create server session_storage with script='box/tiny.lua'\\n\"),\n``. pushed https://github.com/tarantool/test-run/commit/1b20509ffbfab468e02d52390d93785043508a64. Probably needs another name for macrosay_file_line:\nhttps://github.com/tarantool/tarantool/commit/24c30fbc0a4dfa0684940f15ee86ef826833af9b#diff-7734d9c6491bb50b71207beb440b711eR133. Not a bug, sincefiber.storageisn't cleaned upon returning fiber to iproto fiber pool. Probably need to openfeaturefor request local storage. Disagree, YAML doesn't support escaping, so we can't copy/paste yaml output, and useyaml.decode` and expect that everything will be ok.\nIn other words - output of console will became 1.5 \"YAML-like\" format. @Mons your example contains escaped string, mostly, not raw one.. Confirmed on latest XCode. Full logs: \n00.options.out.txt\n01.cmake.txt\n02.make.txt\nCMakeCache.txt\n01.cmake.cc.txt\n02.make.cc.txt\nWe can add -Wno-c++11-narrowing, but this should be fixed differently, I guess.\n. Right now Homebrew was patched back, to automatically add -Wno-c++11-narrowing. This may be closed?. Ok, now I can't reproduce it too. @rtsisyk LGTM, what do you think?. It shouldn't work - VERSION file is autogenerated from git describe command.  Use https://github.com/tarantool/tarantool/releases/download/1.7.6/tarantool-1.7.6.0.tar.gz link, instead, or from tarantool tar.gz archive.. Not a bug of pickle, rather than large numbers in Lua - use LL suffix.\nBTW: 'd' flag wont work\n```\ntarantool> p.unpack('d', p.pack('d', 9223372036854775807LL))\n\n\n0\n...\n\ntarantool> p.unpack('q', p.pack('q', 9223372036854775807LL))\n\n9223372036854775807\n...\n\ntarantool> p.unpack('l', p.pack('l', 9223372036854775807LL))\n\n9223372036854775807\n...\n``. LGTM. Try to use latest version of docker container and tell if your problem is gone. It's due tobox_index_maxis implemented using:select(key, { iterator = 'LE', limit = 1}). Probably checking:count(key) > 0is OK for this case. @aleclarson this won't work, since mt on mt will givespace_mtasself, notspace. But nothing stands in the way of storing per-space methods in the space object and global methods in the__index` field of metatable.. It's regression, isn't it? It was, probably, fixed there (https://github.com/tarantool/tarantool/issues/1801). Whats wrong with this?. Isn't it - what role is for?\n\nYou create role my_app, grant my_app.get, my_app.put, my_app.delete for role my_app and then grant role to your user:\n```\nbox.schema.role.create('my_app')\nbox.schema.role.grant('my_app', 'execute', 'my_app.get')\nbox.schema.role.grant('my_app', 'execute', 'my_app.put')\nbox.schema.role.grant('my_app', 'execute', 'my_app.delete')\nbox.schema.user.grant('guest', 'my_app')\n. but `tarantoolctl rocks install` installs into `./.rocks/` by default. Ehm, probably you'll need to provide minified testcase - maybe it's memcached module problem (but I haven't encountered it before). @GhOsTMZ I'll see what I can do. `fiber.storage` won't be nullified, since fibers aren't killed, but reused (https://github.com/tarantool/tarantool/issues/2901). Same thing in 1.9.1-52. For example, old behaviour was:\ntarantool> fiber.create(error, 'help')\nLuajitError: help\ntarantool> fiber.create(error, { message = 'help' })\nLuajitError:\ntarantool> fiber.create(error, setmetatable({ message = 'help' }, {\n                          __tostring = function(self) return self.message end\n                        }))\nLuajitError:\n```\nNew behaviour is:\ntarantool> fiber.create(error, 'help')\nLuajitError: help\ntarantool> fiber.create(error, { 'help' })\nLuajitError: table: 0x0108fa2790\ntarantool> fiber.create(error, setmetatable({ message = 'help' }, {\n                          __tostring = function(self) return self.message end\n                        }))\nLuajitError: help. So what's with example:\nt = tuple({ 1,  { a = 1, b = 2 } })\nt[2].c = 3\nprint(t[2].c)\nWhat would be printed values? Tuples are Immutable, so t[2].c should be nil after all, but it'll returned cached value. Not?. So main idea is: cache must be immutable too. Mutability of data types in Lua will do some dirty tricks.. @opomuc : I guess it's https://github.com/tarantool/tarantool/blob/47969ef684b1bb3f4c93aa308a919f2b0758f9a6/src/httpc.c#L325-L335\n\"Ok\" is the only thing that's set.. duplicate of https://github.com/tarantool/tarantool/issues/3682. Small addition is: kqueue seems to be \"broken\" as Marc Lehmann wrote in libev documentation, poll uses kqueue, and select has \"hack\" to use more than 1024 fds.. It's gone after adding proxy object. I don't get it. They both don't require special handling of the last element, they're simply separators. We're using commas everywhere, so why don't we use it there?\nLast element and comma is a better way not to allow error in the code (in case when you're adding another key-value to the last line). Nope, it's not. But we may once init object in the init.lua and use it everywhere in the code. simple and convenient. Ehm, duplicating of logic? Bad idea.. OK. OK. require('string') is already busy by luajit itself. fixed. fixed. fixed. No need to do this, in case if pid==0. It's exactly this case. ok, sorry, will fix. I've guessed that because antonym for init is shutdown. free is antonym for allocate. Move them from .c to .h file?. done. Unneeded newline - not function. ",
    "pcdinh": "@bigbes92 It works well with text-based protocol. Thanks \n. It is strange that there is nothing in /tmp after running tarantoolctl. As you can see in strace output, tarantool quits before it can open a log file.\nYes, azureuser exists. I am using Ubuntu 13.3. Tarantool 1.5 has been installed in that system before. However I removed it then run Tarantool 1.6.4's tarantoolctl\n. I already launched a new Azure Ubuntu VM to test Tarantool 1.6. Same procedure. It works\nMy guess is: Tarantool 1.5 installation caused issue even when it had been removed. If it is the case, Tarantool upgrade can be a non-trivial problem. Is there any idea to debug in that issue?\nPS: I noticed that tarantool_box -background is still available in 1.6\n. root@server1:/tmp/tarantool# ./extra/dist/tarantoolctl start my_session\n./extra/dist/tarantoolctl: Starting instance...\nroot@server1:/tmp/tarantool#\nroot@server1:/tmp/tarantool#\nroot@server1:/tmp/tarantool#\nroot@server1:/tmp/tarantool# ls -al /tmp\ntotal 2660052\ndrwxrwxrwt  5 root      root            4096 Mar 16 13:13 .\ndrwxr-xr-x 25 root      root            4096 Mar 13 10:20 ..\n-rw-rw-r--  1 azureuser azureuser  108673079 Mar 16 13:14 freetds_dev1.log\n-rw-r--r--  1 root      root      2611595302 Mar 16 13:14 freetds.log\ndrwxrwxrwt  2 root      root            4096 Mar 12 02:49 .ICE-unix\n-rw-rw-r--  1 azureuser azureuser        188 Mar 16 05:28 my_session.lua\ndrwxrwxr-x 12 azureuser azureuser       4096 Mar 16 13:12 tarantool\n-rw-rw-r--  1 azureuser azureuser    3584814 Mar 12 09:59 tarantool-1.6.4-472-g53b61a8-src.tar.gz\ndrwxrwxrwt  2 root      root            4096 Mar 12 02:49 .X11-unix\n. Here is the result on the new Ubuntu VM\n```\nazureuser@fdbtest:/tmp$ ps -eaf | grep taran\n1000     33171     1  0 05:25 ?        00:00:04 tarantool tarantoolctl: running@my_session\n1000     33263 28481  0 05:40 pts/2    00:00:00 grep --color=auto taran\nazureuser@fdbtest:/tmp$ ls -al\ntotal 42132\ndrwxrwxrwt 13 root      root          4096 Mar 16 06:25 .\ndrwxr-xr-x 24 root      root          4096 Nov 19 02:46 ..\n-rw-rw-r--  1 azureuser azureuser 42074112 Jan 26 13:18 azure_connection.log\n-rw-rw-r--  1 azureuser azureuser   862164 Mar 12 14:56 freetds.log\ndrwxrwxrwt  2 root      root          4096 Nov 19 02:46 .ICE-unix\nrwxrwxr-x   2 azureuser azureuser     4096 Mar 16 05:23 my_session.lua\ndrwx------  2 azureuser azureuser     4096 Mar 12 14:27 pymp-hVXJKw\ndrwx------  2 azureuser azureuser     4096 Mar 12 14:27 pymp-NIpYAF\ndrwx------  2 azureuser azureuser     4096 Mar 12 14:28 pymp-p1gs7o\ndrwx------  2 azureuser azureuser     4096 Mar 12 14:27 pymp-pbSz1D\ndrwx------  2 azureuser azureuser     4096 Mar 12 14:54 pymp-vIFUoi\ndrwx------  2 azureuser azureuser     4096 Mar 12 14:30 pymp-vsBesd\ndrwxrwxr-x 12 azureuser azureuser     4096 Mar 16 05:17 tarantool\n-rw-------  1 azureuser azureuser    63368 Feb 26 09:41 tmp06d_o4\n-rw-------  1 azureuser azureuser    22200 Mar 12 14:23 tmp7AREUj\n-rw-------  1 azureuser azureuser    19043 Mar 12 14:27 tmpIVjdGm\n-rw-------  1 azureuser azureuser    22178 Feb 26 09:41 tmpQAAHA0\ndrwxr-xr-x  3 azureuser azureuser     4096 Mar 16 05:25 my_session\nsrwxrwxr-x  1 azureuser azureuser        0 Mar 16 05:25 my_session.control\n-rw-r-----  1 azureuser azureuser     1294 Mar 16 05:25 my_session.log\n-rw-rw-r--  1 azureuser azureuser        6 Mar 16 05:25 my_session.pid\n-rw-r--r--  1 root      root             5 Nov 19 02:48 uwsgi.pid\nsrwxr-xr-x  1 root      root             0 Nov 19 02:48 uwsgi.sock\ndrwxrwxrwt  2 root      root          4096 Nov 19 02:46 .X11-unix\n``\n. Because the same procedure is applied in both VM (samemy_sesssion.lua, same Tarantool code base, same/etc/default/tarantoolwhich points to/tmp`, Ubuntu 13.3), the difference is that the VM that Tarantool 1.6 refuses to run had Tarantool 1.5 installed and run before.\nAccording to strace output, I wonder what happened here\n[pid 59351] ioctl(0, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, {B38400 opost isig icanon echo ...}) = 0\n[pid 59351] rt_sigaction(SIGCHLD, {SIG_DFL, [CHLD], SA_RESTORER|SA_RESTART, 0x7fdca836bff0}, {0x55a945, ~[KILL STOP RTMIN RT_1], SA_RESTORER|SA_RESTART, 0x7fdca9139bb0}, 8) = 0\n[pid 59351] close(5)                    = 0\n[pid 59351] close(4)                    = 0\n[pid 59351] close(3)                    = 0\n[pid 59351] exit_group(0)               = ?\n[pid 59352] +++ exited with 0 +++\n. I already installed the binary package as you said. It works\nroot@server1:/tmp# tarantoolctl start my_session\n/usr/bin/tarantoolctl: Starting instance...\n/usr/bin/tarantoolctl: mkdir /var/lib/tarantool/my_session\n/usr/bin/tarantoolctl: mkdir /var/lib/tarantool/my_session/sophia\nroot@server1:/tmp#\nroot@server1:/tmp#\nroot@server1:/tmp#\nroot@server1:/tmp#\nroot@server1:/tmp# ls -al /var/log/tarantool/\ntotal 12\ndrwxr-s---  2 tarantool adm  4096 Mar 16 14:09 .\ndrwxr-xr-x 18 root      root 4096 Mar 16 13:50 ..\n-rw-r-----  1 tarantool adm  1272 Mar 16 14:09 my_session.log\nroot@server1:/tmp# ps -eaf | grep taran\n112       8009     1  0 14:09 ?        00:00:00 tarantool tarantoolctl: running@my_session\nroot      8025 58442  0 14:09 pts/5    00:00:00 grep --color=auto taran\n. Hi,\nI stopped the instance using kill -TERM then started it again. However it said Space 'session' already exists in the log file and failed to launch an instance. What am I missing here?\n. Got it. So, if I want to keep the data every time the server is rebooted, I just need to add a parameter that is described here\nhttp://tarantool.org/doc/user_guide/sp-box-schema.html\nbox.schema.space.create('session', {if_not_exists = true})\nbox.space.session:create_index('primary', {type = 'hash', parts = {1, 'STR'}, {if_not_exists = true}})\n. Thanks. I just want to make notes on my case\n- To compile Tarantool 1.6 on a machine which a binary package of Tarantool 1.5, you have to uninstall Tarantool 1.5 first. My mistake is that I didn't remove tarantool-common. After removing that library, I managed to compile and run Tarantool 1.6 normally.\napt-get remove tarantool tarantool-common tarantool-modules\n- If your lua script has errors, it won't produce error log in some cases. Interactive tarantool is your friend\nMy final script is\nbox.cfg{listen = 33016}\nbox.schema.space.create('session', {if_not_exists = true})\nbox.space.session:create_index('primary', {type = 'hash', parts = {1, 'STR'}, if_not_exists = true})\nif box.schema.role.exists('guest') then box.schema.user.grant('guest', 'read,write,execute', 'universe') end\nI hope it helps for someone who are trying Tarantool 1.6 on development server like me. \n. Is it equivalent to SQL's WHERE expression with multiple AND conditions?\n. Interesting question. What feature do you want to see in particular?\n. ",
    "etalot": "Thanks! I will check soon.\nBut i think problem is not only in PHP:\n[root@matrix ~]# tarantool\nlocalhost> insert into t0 values (1, 5)\nInsert ERROR, Supplied key field type does not match index type: expected NUM64 (ER_KEY_FIELD_TYPE)\n. This works.\n. Hi, thanks for PHP driver fix!\nNow if key looks like 1234567890123 no error.\nBut if key 123 still old error. And i understand why. I spied your changes and did some ultralight tuning in function io_buf_write_tuple_array:\nif ((unsigned long)long_value <= 0xffffffffllu) {\nreplace with:\nif (((unsigned long)long_value <= 0xffffffffllu) && (!first)) {\nCompile and renamed to tarantool64.so\nNow any number in key will be interpreted like NUM64(seems to work). That's what i need! Big thanks.\n. Hi,\nthank you for caring. My opinion is the option must work only for key. This is important. For all other numbers in cortege please keep autodetection by size, that now realized in tarantool php driver.\nAt all, maybe this only applies to php driver and this option need only for driver?\n. ",
    "pgulutzan": "The only problem with box.session.delimiter('...') is that it depends on the session, so I can't set it before starting a session, and I lose it (I suppose it returns to the default) if I close a session. Why not box.cfg instead?\n. Hi!\nOn 10/30/2013 04:15 AM, Dmitry Simonenko wrote:\n\nhello, where can i get tarantar_bugreport.tar to reproduce the fault?\n\nReply to this email directly or view it on GitHub \nhttps://github.com/tarantool/tarantool/issues/93#issuecomment-27377631.\nI'm sorry if I caused confusion.\nI'm forwarding the mail that I sent to Mr Konstantin Osipov\non October 25, and attaching the tar file.\n\nPeter Gulutzan\n-------- Original Message --------\nSubject:    Re: FYI, tarantar explanation doesn't mention problems\nDate:   Fri, 25 Oct 2013 15:20:45 -0600\nFrom:   Peter Gulutzan pgulutzan@ocelot.ca\nTo:     Konstantin Osipov kostja@tarantool.org\nHi,\nI filed a report at\nhttps://github.com/tarantool/tarantool/issues/93\nI saw no way to attach a binary file,\nso I just waved my arms and said\n\"Get file tarantar_bugreport.tar. Size = 20480 bytes.\"\nI'm attaching it to this email.\nIf there's a preferable way to send a bug-report file,\nlet me know.\nThe --version problem will be in a different report.\nPeter Gulutzan\nOn 10/25/2013 01:46 PM, Konstantin Osipov wrote:\n\n\nPeter Gulutzan pgulutzan@ocelot.ca [13/10/25 22:46]:\n\nPlease file bugs. Thanks!\n\nHi,\nFYI,\nThe recent \"git push #5\" for tarantar explanation doesn't mention problems.\nWhat actually happened, in my case, initially, was:\n\"\nsnap_dir: /home/pgulutzan/tarantool_test/work_dir\nwal_dir:  /home/pgulutzan/tarantool_test/work_dir\nspaces:   1\ninterval: 0\nmemory_limit: 0M\nSTART SNAPSHOTTING Fri Oct 25 09:02:36 2013\nlast snapshot lsn: 1\n(xlog) 00000000000000000002.xlog 0.000M processed\n(xlog) 00000000000000000003.xlog 0.000M processed\n(xlog) 00000000000000000005.xlog 0.000M processed\n( >> ) 00000000000000000006.snap 0.000M processed\nSegmentation fault (core dumped)\n\"\nI'm trying now to make a repeatable test for a bug report.\nAlso, --version does nothing.\nPeter Gulutzan\n. Here is another way to reproduce the fault. No tar file is needed.\n\n\nMy platform is Ubuntu 12.04.\nMy home directory is /home/pgulutzan.\nI installed Tarantool 1.5.1 stable in ~/tarantool-stable.\nMy test directory is /home/pgulutzan/tarantool_test.\nIt contains nothing except the configuration file, tarantool.cfg.\nThis is what is in tarantool.cfg:\n\"\nslab_alloc_arena = 0.1\npid_file = \"box.pid\"\nprimary_port = 33013\nsecondary_port = 33014\nadmin_port = 33015\nrows_per_wal = 50000\nspace[0].enabled = 1\nspace[0].index[0].type = \"HASH\"\nspace[0].index[0].unique = 1\nspace[0].index[0].key_field[0].fieldno = 0\nspace[0].index[0].key_field[0].type = \"STR\"\nlogger = \"tee --append tarantool.log\"\nwork_dir = \"/home/pgulutzan/tarantool_test/work_dir\"\nsnap_dir = \"/home/pgulutzan/tarantool_test/work_dir\"\nwal_dir = \"/home/pgulutzan/tarantool_test/work_dir\"\n\"\nI start three shells: Terminal #1, Terminal #2, Terminal #3.\nOn terminal #1 I say:\ncd /home/pgulutzan/tarantool_test\nrm -R work_dir\nmkdir work_dir\n~/tarantool-stable/src/box/tarantool_box --init-storage\nsleep 5\n~/tarantool-stable/src/box/tarantool_box\nOn terminal #2 I say:\ncd /home/pgulutzan/tarantool_test\n~/tarantool-stable/client/tarantool/tarantool\ninsert into t0 values ('a')\nsave snapshot\ninsert into t0 values ('b')\nOn terminal #3 I say:\ncd /home/pgulutzan/tarantool_test\n~/tarantool-stable/client/tarantar/tarantar  -c tarantool.cfg\nResult:\n\"\nsnap_dir: /home/pgulutzan/tarantool_test/work_dir\nwal_dir:  /home/pgulutzan/tarantool_test/work_dir\nspaces:   1\ninterval: 0\nmemory_limit: 0M\nSTART SNAPSHOTTING Wed Nov 13 14:00:45 2013\nlast snapshot lsn: 2\n(snapshot) 00000000000000000002.snap 0.000M processed\n(xlog) 00000000000000000002.xlog 0.000M processed\nSegmentation fault (core dumped) 0.000M processed\n\"\n. I assume you mean EBADF for any get/put (including broadcast) which is blocked at the time of the close() or which occurs after the close(). I think you're right. I also think the same error should occur for close() if the channel is already closed, but don't feel strongly about it.\n. My comment was about number of keys and amount of memory used.\n. I have Tarantool 1.5 (stable), pulled from source today.\nI can see \"show index\", it is a documented client request.\nExample:\n\"\npgulutzan@pgulutzan-TECRA-M10:~/tarantool_sandbox$ ~/tarantool-stable/client/tarantool/tarantool\nlocalhost> show index\nindex:\n- space: 0\n  memsize:             140\n  index: \n  - { n:   0, keys:               2, memsize:             140 }\n    memsize:                 140\n    ...\n    \"\n. As I understand the \"other way around\" suggestion: an index structure has has one or more parts (not including a pointer), a key is a value, a key field is a value for one of the parts. I think that's fine.\n. The rtsisyk comment shows that my original comment was wrong. And indeed the fact that I can say \"arity = 3\" is only causing the unfortunate illusion that I can change the arity to 3. So now the question is: should it be possible to alter the arity? I didn't really want to ask for that, so I will drop this.\n. True,\nconn:call('box.space.space0:insert',{2}) succeeds\nconn:call(\"box.space['space0']:insert\",{3}) fails\nbut is that a bug?\n. I would like an error saying that it is necessary to execute box.cfg first. I believe there are other situations where the same error message would be applicable.\n. Alas, despite the fix, the problem still exists as described.\n. I repeated the instructions with Tarantool 1.6 pulled from source today.\nEach time I pressed control-C only once, waited at least 10 seconds and then pressed carriage return.\n(I assume that, like me, you have to press carriage return to get back to the shell prompt.)\nAs before, I saw a bunch of warnings about xlog \"has no EOF marker\", xlog \"wasn't correctly closed\",\nand \"rename unfinished\".\nI repeated the instructions using os.exit() rather than control-C, and the warnings did not appear.\n. The \"How to repeat\" instructions are changed due to one-based indexing:\nmkdir ~/tarantool_mess\ncd ~/tarantool_mess\nrm -R *\n~/tarantool-master/src/tarantool\nbox.cfg{}\ns = box.schema.create_space('space19')\ns:create_index('primary', {unique = true, parts = {1, 'NUM', 2, 'STR'}})\nbox.schema.user.grant('guest', 'read write execute', 'universe')\nStop with control-C.\n~/tarantool-master/src/tarantool\nbox.cfg{}\nbox.space.space19:insert{2,'b',5}\nStop with control-C.\n~/tarantool-master/src/tarantool\nbox.cfg{}\n. Unless I am misunderstanding, the form that I am using in the above example is :update(key, { {'op', args}, {'op',args}, ...}).\n. Okay, suppose I take out the irrelevant 'p' and the\nunnecessary 'pack'. The example then is:\nbox.space.space0:update(999, {{'=', 1, 'B'}})\nbox.space.space0:update({999}, {{'=', 1, 'B'}})\nbox.space.space0:update({999}, {{'=', 2, 1}})\nbox.space.space0:update({999}, {{'+', 2, 1}})\nbox.space.space0:update({999}, {{'|', 2, 1}, {'=', 1, 'C'}})\nbox.space.space0:update({999}, {{'#', 1, 0}, {'-', 1, 3}})\nbox.space.space0:update({999}, {{'=', 1, 'XYZ'}})\nbox.space.space0:update({999}, {{':', 1, 1, 1, '!'}})\nand the end value is:\nfield[0] = 999, field[2] = 18446744073709551615,\nfield[1] = 'X!Z' ...\nand the result still appears to indicate that:\n'|' (OR) doesn't work,\n'-' (delete) doesn't work.\nI didn't check other update operations.\n. I think this ticket should be closed.\n. Right -- I had bad syntax. The only difficulty is the words \"assertion failed!\" rather than a regular-looking error message.\n. @rtsisyk, thank you, the explanation is clear, and so\nis your suggestion about enclosing the string in double\nsquare brackets.\nThe Lua documentation http://www.lua.org/pil/2.4.html\nsays such strings \"may run for several lines\", which is\nwhat I need. So an example with a realistic workaround is:\ntarantool> session = require('session'); session.delimiter('!')\n...\ntarantool> dostring([[return\n>  ...]], 1, 2, 3)!\n\n1\n2\n3\n  ...\n\nTherefore closing this issue is fine.\n. It seems that 'update' still thinks field indexes are 0-based.\nFrom an example in the manual ...\ns=box.schema.create_space('space0')\ni=box.space.space0:create_index('primary',{})\nbox.space.space0:insert{999, 'Taranto'}\nbox.space.space0:update({999}, {{'=', 2, 'Tarantino'}})\nResult:\n\"\n- [999, 'Taranto', 'Tarantino']\n\"\nAlso it seems that 'insert' thinks fields are 0-based.\nContinuing with the same space ...\n```\ns:insert{'T'}\n\n\nerror: 'Tuple field 0 type does not match one required by operation: expected NUM'\n```\n\nAlso it seems that 'find' thinks fields are 0-based ...\n```\ntarantool> t = box.tuple.new({'a','b','c','a'})\n\n...\ntarantool> t:find('a')\n\n\n0\n...\n```\n\nAlso it seems that 'transform' thinks fields are 0-based ...\n```\ntarantool> t = box.tuple.new({'Fld#1','Fld#2','Fld#3','Fld#4','Fld#5'})\n\n...\ntarantool> t:transform(2,2,'x')\n\n\n['Fld#1', 'Fld#2', 'x', 'Fld#5']\n...\n```\n\nAlso it seems that 'slice' thinks fields are 0-based ...\n```\ntarantool> t = box.tuple.new({'Fld#1','Fld#2','Fld#3','Fld#4','Fld#5'})\n\n...\ntarantool> t:slice(2, 4)\n\n\nFld#3\nFld#4\n...\n```\n\nI am using Ubuntu 12.04 and Tarantool 1.6 pulled from source today.\n. I don't understand why this item has a \"need feedback\" label. Is there a question that someone must answer?\n. Duplicate of https://github.com/tarantool/tarantool/issues/280?\n. Yes, checking the arguments will help ... another example:\nconn:call(f()) -- hangs\nbut the update request in the initial example should be okay.\n. Unfortunately the second example (the one with update) still hangs on my machine. Did I make a mistake in thinking it was due to the same bug?\n. Perhaps I should have explained more clearly when I said \"The conn.space.tester request says there is no space named tester.\" What I see is this:\n\"\ntarantool> conn.space.tester\n\nnull\n  ...\n  \"\n  That is the sort of thing that happens when a space is not found. But the space exists.\n. A slight error in my description: the last sentence should have ended with the words \"except control-C or control-D\".\n. I apologize if I failed to make it clear why I thought this was a problem. It's not about whether box.cfg is necessary, it's about why the switch should occur despite a failure, and despite the fact that box.cfg can't be done. There is no feature request here.\n. I apologize if I failed to make it clear why I thought this was a problem. It's not about whether a privilege is necessary, it's about whether the system should tell the 'admin' user that the privilege is missing. There is no documentation request here.\n. Is this perhaps a duplicate of issue #410 password disappears?\n. It appears that console.connect works without box.cfg,\nbut there is a message saying \"Please call box.cfg{} first\".\nIs the original request here -- \"Make console work without box.cfg{}\" --\nimpossible?\n. As the earlier comments show, this is not a bug. I incorrectly believed that panic_on_wal_error only applied for an error reading the file, not for an error while reading the file. I'll correct this.\n. I had not considered snap_dir or panic_on_snap_error or snap_io_rate_limit. Ideally they'd all be consistent, but I don't know how much trouble that would cause.\n. Also please look at box.schema.role.drop('R1','R2')\n. I am looking at this detail in the original issue description: \"But in either case, it [i.e. box.schema.role.info] should not show grants to the current user.\" In fact box.schema.role.info does show grants to the current user. For example, as user admin, I did these requests:\nbox.schema.role.info()\nbox.schema.create_space('t')\nbox.schema.user.grant('admin','read','space','t')\nbox.schema.role.info()\n... And I see the grant on space t.\nIt probably is acceptable to reply \"we decided to ignore that\" and close this again.\n. I do not understand the comment on this issue =\n\"In the end we return a Lua table with all triggers.\"\nAs user admin I did these requests:\nbox.schema.create_space('t')\nbox.space.t:create_index('primary',{})\nfunction f1 () x = x + 1 end\nfunction f2 () x = x + 1 end\nbox.space.t:on_replace(f1)\nbox.space.t:on_replace(f2)\nx = 0\nbox.space.t:insert{0}\nx\nThe second on_replace request returns this:\n\"\n\ntarantool> box.space.t:on_replace(f2)\n\n'function: 0x40f701f8'\n  ...\n  \"\n  ... That is not a Lua table with all triggers.\n  (The later display of x shows that two triggers exist.)\n  It is probably acceptable to say \"we decided not to\n  return either a number or a Lua table with all triggers\",\n  and close this issue again.\n. I am assuming that this bug report is about this error message:\n\n```\nlocalhost:3301> console.delimiter('!')\n\n\nerror: 'builtin/console.lua:229: console.delimiter(): need existing console'\n...\n```\n\nThe message is cryptic and the situation is surely common, so I regret that this is called a \"feature\" request.\n. Okay, glad to know it might be part of something that's already known. It's potentially serious though, because it happens even if I never never create a sophia space.\n. It's up to you to ban changes of primary key, but I removed those lines, ran again, and still saw a duplicate-key error followed by a segmentation fault. Is it possible that I am not using the correct sophia version (I said \"git submodule update\" when I pulled but perhaps that's not enough)? Or is it possible that our random number generation methods differ in some significant way?\n. Today, I do not see the crash, but I do see the duplicate-key error. The following script will produce a duplicate-key error on my machine, reliably after about 58000 iterations. For example immediately after key USPTCRITLOCBZSEZHJMR is successfully deleted, an attempt to insert with key USPTCRITLOCBZSEZHJMR fails.\nmkdir ~/tarantool_sandbox\ncd ~/tarantool_sandbox\nrm -R *\n~/tarantool-master/src/tarantool\nbox.cfg{}\nengine_name = 'sophia'\nconsole = require('console'); console.delimiter('!')\nfunction string_function()\n  local random_number\n  local random_string\n  random_string = \"\"\n  for x = 1,20,1 do\n    random_number = math.random(65, 90)\n    random_string = random_string .. string.char(random_number)\n    end\n  return random_string\n  end!\nfunction delete_replace_update()\n  local string_value\n  if (box.space._space.index.name:select{'tester'}[1] ~= nil) then\n    box.space.tester:drop()\n    end\n  box.schema.space.create('tester', {engine=engine_name})\n  box.space.tester:create_index('primary',{type = 'tree', parts = {2, 'STR'}})\n  counter = 1\n  while counter < 1000000 do\n    string_value = string_function()\n    string_table = box.space.tester.index.primary:select({string_value}, {iterator = 'GE', limit = 1})\n    if string_table[1] == nil then\nprint (1, ' insert', counter, string_value)\n      string_value_2 = box.space.tester:insert{counter, string_value}[2]\n      else\n      string_value_2 = string_table[1][2]\n      end\n    if string_value_2 == nil then\nprint (2, ' insert', counter, string_value)\n      string_value_2 = box.space.tester:insert{counter, string_value}[2]\n      end\nprint (3, ' delete', counter, string_value_2)\n      box.space.tester:delete{string_value_2}\nprint (4, ' insert', counter, string_value_2)\n      box.space.tester:insert{counter, string_value_2}\n    counter = counter + 1\n    end\n  print('OK')\n  end!\nconsole.delimiter('')!\ndelete_replace_update()\n. I am unable to agree enthusastically with the comment from Konstantin Osipov for two reasons.\nOne: if I try to connect with 'guest@wrong_password@localhost:3301') I do not succeed, which shows that the guest password is check in other circumstances.\nTwo: nobody is going to give a password to guest unless they expect that the password for guest will be checked. If it's intended that the password will be unchecked, then passwd should fail.\n. Konstantin Osipov wrote: \"We can prohibit setting a password for guest user, so it will always fail.\"\nGood, then nobody will be able to think they've added protection for the guest user when they haven't.\nThank you for your patient consideration.\n. As far as I can tell, {grantor=user-name} is only possible if I am user 'admin'. Is that correct?\n. done\n. The manual currently says:\n\"\nTarantool replication is row-based: each data change command is fully deterministic and operates on a single tuple.\n...\nA stored program invocation is not written to the write-ahead log. Instead, log events for actual data-change requests, performed by the Lua code, are written to the log. This ensures that possible non-determinism of Lua does not cause replication to go out of sync.\n\"\n. it's mentioned that they are row-based\n. I should have remembered issue 684 Inconsistency with box.cfg and directories. Not a bug. Sorry for the false alarm.\n. This is waiting for a fix of #855.\n. I don't know about Konstantin Osipov's arrangement, but here is mine, on Ubuntu 12.04.\ndoxygen:\n  Installed: 1.7.6.1-2ubuntu1\n  Candidate: 1.7.6.1-2ubuntu1\n  Version table:\n *** 1.7.6.1-2ubuntu1 0\n        500 http://us.archive.ubuntu.com/ubuntu/ precise/main amd64 Packages\n        100 /var/lib/dpkg/status\npython-breathe was brought in with \"sudo pip install breathe\" not apt-get\n. All that we can mention currently is box.info.replication.status.\n. I am not sure that this should be declared \"fixed\".\nWith Ubuntu 14.04, with Tarantool 1.7 pulled from source today, doing an upsert with \"+\" for a field that does not exist, I get no segmentation fault -- but the tuple is ruined. How to repeat (using the slightly different version-1.7 syntax):\nbox.schema.space.create('t',{engine='phia'})\nbox.space.t:create_index('primary',{})\nbox.space.t:insert{1}\nbox.space.t:replace{1,2}\nbox.space.t:upsert({1},{{'=',4,5}})\nbox.space.t:select{}\nbox.space.t:select{}\n... Now, even if I stop the server and restart, I will always see this error message after I type box.space.t:select{}:\ntarantool> box.space.t:select{}\n2016-06-02 12:22:14.377 [27048] coeio tuple_update.cc:946 E> UPSERT operation failed:\n2016-06-02 12:22:14.377 [27048] coeio tuple_update.cc:372 E> ER_NO_SUCH_FIELD: Field 4 was not found in the tuple\n. Hi @rtsisyk, I apologize for not being clear why I am whining. I do not have to request the upserted key, I get the same error message for box.space.t:select{0}. And the complaint is not \"I will see an error message\", it is \"I will always see an error message\", that is, the error message happens every time I select. If an upsert has failed once, then perhaps you will agree that the appropriate number of times to report that fact is: once?\n. It has happened again, with Tarantool 1.6 built from source today.\n. I comment here about why at some time Tarantool should support warnings with SQL.\nSuppose one says SELECT AVG(s1) FROM t; and table t has NULLs in column s1.\nThe standard says\n\"\nIf one or more null values are eliminated,\nthen a completion condition is raised:\nwarning \u2014 null value eliminated in set function.\n\"\nI mentioned this in issue#2364\nSQL clauses related to groups and aggregates\nhttps://github.com/tarantool/tarantool/issues/2364\nand that was closed, with Kirill Shcherbatov\nsaying that other DBMSs don't do it. Quoting him:\n\"\nMySQL - no warning\nOracle - no warning\nPostgres - no warning\nSQLite - no warning\nMSSqlServer - no warning\n\"\nActually SQL Server does have a warning but it\ncan be missed if warnings are not enabled\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/set-ansi-warnings-transact-sql?view=sql-server-2017\nAlso DB2 has a warning\nhttps://www-01.ibm.com/support/docview.wss?uid=swg21285374\nSo I'd express it as \"two of the big three DBMSs do it\".\nI realize, the real problem is that Tarantool cannot\ndo warnings. There are only 3 warning conditions that\nthe standard SQL/Foundation document mentions that\nI think are relevant to what Tarantool might support soon:\n string data, right truncation (sometimes) >> * privilege not granted\n When null values are eliminated in set functions.\nSo, someday, Tarantool must support warnings.\nMeanwhile in Tarantool's list of mandatory SQL-standard features\nthe E091 items could be marked as \"not fully supported\".\n. Yes, the table of contents looks bad to some people. Won't fix this year.\n. Kostja: yes, in other words \"there is a bug in this bug report\". The example in the manual actually says t:bsize().\n. This is a matter of name qualification. I think (hope) that I discussed all the important issues in this blog post: http://ocelot.ca/blog/blog/2016/01/08/sql-qualified-names.\n. I can make the error disappear by editing\ncompiler.cmake, and adding on line 165:\n\"-Wno-sign-compare\"\nIn other words, the cause is the \"fix\" of issue#1221.\n. The following is not the same as the main example, but I believe it might have the same cause.\nI execute these requests:\nbox.schema.space.create('X',{engine='sophia'})\nbox.space.X:create_index('X',{parts={1,'NUM'}})\nbox.space.X:insert{1,-1}\nbox.space.X:dec{1}\nbox.space.X:select{}\nThe dec() request returns an error, but the select() request shows that it succeeded.\n. What is the specific \"Lua pitfall\" that is relevant for Issue#1123? I suggested in the description of issue#1123 (original title = Comparing nil for select() searches) that comparisons and conversions that involve missing values or explicitly nil/null values are inconsistent. I do not think this has been solved, and I do not think that it can be solved by saying again that msgpack.NULL exists -- for issue#1123, using msgpack.NULL would only cause error messages.\n. @rtsisyk Could you please try your example on the T space that I used for the issue#1123 example? If you really are getting exactly the same result for both requests, then something about our environments is different.\n. For me, test.run.py is hanging on Ubuntu 12.04.\n. @Sulverus --Yes I used the latest Tarantool 1.6 sources, yes I said git submodule update --init --recursive, and test-run.py is still hanging today. However, I now believe that the relevant issue report for this problem is issue#1341, not issue#1362.\n. It is not fixed. Although it works okay in the simple test case above, there is a way to make it fail -- and destroy the primary index. I am using Tarantool 1.7, pulled from source today. Try:\nbox.schema.space.create('t5',{engine='vinyl'})\nbox.space.t5:create_index('primary')\nbox.space.t5:insert{44}\nbox.space.t5:truncate()\nbox.space.t5:insert{55}\nNotice that the first insert succeeds, then the truncate fails, then the second insert fails.\n. I interpret this as: it's now impossible to use tarantoolctl unless it's been installed on a subdirectory of /usr. This is regrettable, but it simplifies the description somewhat. There were a few other details that also needed editing in this area.\n. I notice that the file mysql-scm-1.rockspec also contains a reference to mysqlclient_r. Does it matter, and if so, should it be classified as a separate issue?\n. Thank you for your contribution! Your suggested changes will appear soon in the version-1.6 documentation.\n. When I try, with Tarantool 1.6 pulled from source today,\nI get two tuples.\nMethod:\nbox.cfg{}\nbox.schema.space.create('T')\nbox.space.T:create_index('primary')\nbox.space.T:create_index('secondary',{unique=false,parts={2,'STR'}})\nbox.space.T:insert{1,'A'}\nbox.space.T:insert{2,'A'}\nbox.space.T.index.secondary:select('A')\nResult:\n```\ntarantool> box.space.T.index.secondary:select('A')\n\n\n\n\n[1, 'A']\n\n\n[2, 'A']\n...\n```\n\nI wonder what we're doing differently.\n. A similar complaint re MySQL's command-line client https://bugs.mysql.com/bug.php?id=66583 was followed by a change, but not in MariaDB.\n. Now in version 1.7 ^D stops both server in interactive mode, and tarantoolctl connect. I see that ^C does the same thing, its behaviour is unchanged. I'll assume this is intentional, although it doesn't exactly match the issue description.\n. The new field types are documented.\n. Example 3:\nI have Ubuntu 14.04 and Tarantool 1.8, pulled from source today.\nI execute these requrests:\nbox.cfg{}\nmsgpack = require('msgpack')\nbox.schema.space.create('X')\nbox.space.X:create_index('primary')\nbox.space.X:create_index('secondary',{parts={2,'scalar'}})\nbox.space.X:insert{1,msgpack.NULL}\nbox.space.X:insert{2,0/0}\nbox.space.X.index.secondary:select()\nbox.space.X.index.secondary:select(0,{iterator='LT'})\nResult:\nbox.space.X.index.secondary:select(0,{iterator='LT'})\ntarantool: /home/pgulutzan/tarantool-1.8/src/box/tuple_compare.cc:162: int mp_compare_double_uint64(double, uint64_t, int): Assertion `lhs < 9007199254740992.0' failed.\nAborted (core dumped). The problem has gone away for me too. I have not recently upgraded gcc, it is still 4.7.3. I do not have ccache enabled on my Ubuntu machine.\n. Milestone 1.8.3 should include these \"Top Five\" matters:\n1. Data Types -- Column definition in SQL #2351\n2. Identifiers-- Identifiers in SQL #2345\n3. ICU -- Integrate ICU into Tarantool. #2121\n4. Arithmetic -- Division by zero should yield error or infinity. #2135\n5. Temporary Tables -- Need to make temporary tables session-local. #2119\n. The SQL standard document, section \"token and separator\", says\na \"key word\" is either a \"reserved word\" or a \"non-reserved word\".\nIt goes on to list non-reserved words (for example BEFORE), and\nreserved words (for example BEGIN). I interpreted the words\n\"Make all ANSI SQL keywords reserved\" as a reference to\nboth standard reserved words and non-reserved words.\nI think Mr Yukhin has confirmed that he did not mean that.. If we were trying to be compatible with PostgreSQL and MySQL,\n\"local\" might be important. But if we're trying to be compatible\nwith standard SQL and the rest of the world, \"temporary\" is what\nis important. I tried to describe the difference in a blog post:\nhttp://ocelot.ca/blog/blog/2014/11/02/temporary-tables-standard-sql/. Summary of work involved:\n Persuade everyone to acknowledge that session-local\ntemporary table definitions are not required, but\nsession-local temporary table data rows are required.\n Require the word GLOBAL, that is, the statement is\nCREATE GLOBAL TEMPORARY TABLE ...;\n Remove support for the \"temp\" schema. Temporary\ntables go in the main schema. This means Tarantool\nhas only one schema, but qualifying, for example\n\"main.table1\", is harmless.\n Since the default is ON COMMIT DELETE ROWS, there\nis some compatibility with Tarantool's NoSQL temporary\ntables, that is, there is no need to write to the WAL.\nThe difficult part is that each connection sees only\nthe rows that it has inserted.\n. The standard specifies that temporary-table definition must be either local or global. It says: \"table scope ::= global or local TEMPORARY\". That is, neither global nor local is \"implicit\", you must specify. Oracle and DB2 both require GLOBAL TEMPORARY.\n. In regard to the suggestion above \"Check other DBMS\", I recently wrote a blog post which answers part of the question. http://ocelot.ca/blog/blog/2017/04/11/mysql-mariadb-international-components-for-unicode/. Summary of work involved:\n Get confirmation from a developer that building\nwith SQLITE_ENABLE_ICU does not break builds or tests.\n Get confirmation from a legal expert that the licence\ndoesn't present a problem.\n Get confirmation from someone experienced with\nnegotiating with distro makers that it would be okay\nto provide a frozen ICU copy with Tarantool instead of\nuse the distro's ICU copy -- and if not, allow for\nextra work whenever a new ICU version appears.\n Get confirmation from a manager that it will be\nokay to increase the size of a Tarantool download\nby perhaps 15MB.\n Get confirmation from a benchmark tester that\nICU claims about speed (relative to strcoll) are\ncorrect as applicable to a sample Tarantool database.\n Get confirmation from a PostgreSQL expert that their\nexperience with the recent ICU switch is not smooth.\n* Support UPPER(), LOWER(),\ncomparisons of identifiers with system tables\n(see also Issue#2295 Properly encode UTF strings in system table),\nand validity tests that characters are valid UTF-8 byte sequences\n(see https://en.wikipedia.org/wiki/UTF-8#Invalid_byte_sequences).\nBut not new collations, UCS_BASIC (\"binary\") is okay.\nThere is an assumption that BINARY and CHAR are not\nthe same data type.\n. I think we disagree about what the priority is. I said that FOR EACH ROW should not be optional, that is, it should be a mandatory clause. That's simple, eh? It does not require that we have support for FOR EACH STATEMENT soon.. \nFixing this so it will say \"error\" makes for standard-SQL\ncompatibility, but not compatibility with Lua (\"7/0 = inf\"),\nand not compatibility with SQLite. Incompatibility and\nloose rules are behind several problems with arithmetic.\nOthers are\nThe ABS() failure (see issue#2347 Functions in SQL)\nThe ROUND() failure (see issue#2347 Functions in SQL)\nIncompatibility with big Lua numbers (see issue#2469\nSQL returns wrong data for int64 values and issue#2363\nSQL select statement, with big numbers).\nSee also issue#1701 nan. This was closed in May 2017\nwith an explanation:\nsNaN < qNaN < -inf < normal number < +inf;\nsNaN == sNaN;\nqNaN == qNaN;\naNaN != qNaN;\n-inf == -inf;\n+inf == +inf;\nbut we know that is incompatible with standard-SQL\nrequirements, so we should be asking: how to represent,\nwhether to add a BINARY_FLOAT data type, what the\norder is compared to NULL, what the keywords are,\nwhy lists like this don't include -NaN,\nand what to do about what is typically regarded as\noverflow such as 1E500, or arithmetic-overflow.\n. It isn't only transactions. Statements are not atomic. For example\n  INSERT INTO table1 VALUES (30,\"A\"),(30,\"B\");\n  Result = \"unknown error\" because the first\n  column is unique -- but the first row is inserted\n  anyway, meaning Tarantool executes half a statement.\n  The same thing is true if a trigger execution fails.. I think it only happens for an indexed field.. MySQL, another DBMS group supporting BEGIN to start a transaction, got into parsing trouble when attempting to support BEGIN in the standard way to start a compound statement (bug#42597). It's fixed, but the trouble could have been avoided by not supporting BEGIN to start a transaction. MySQL and PostgreSQL support both BEGIN and START TRANSACTION for historical reasons, but we don't have historical reasons.\n. This does not work:\nCREATE VIEW te44 AS SELECT * FROM te43;\nUPDATE te44 SET s2 = s1 + 10;\nbecause views are not updatable in Tarantool.\nI think this statement is similar:\nWITH te44 AS (SELECT * FROM te43) UPDATE te44 SET s2 = s2 + 10;\ntherefore it is consistent that it does not work either.\nIt's not wonderful to create temporary tables for such cases, but it's not a bug.\nI think that this bug report is based on a mistake that I made, I had forgotten that limitation.\n. VACUUM Is worse than useless, it makes all tables disappear.\nbox.sql.execute(\"CREATE TABLE te7 (s1 INT PRIMARY KEY);\")\nbox.sql.execute(\"VACUUM;\")\nbox.sql.execute(\"SELECT * FROM te7;\")\nResult = error: 'no such table: te7'\n. A redundant grant should not cause an error, so, if there is an underlying box.schema.user.grant request, it should contain {if_not_exists=true}.. OK with me. I certainly never would have suggested \"w/o Lua at all\".\nSQL's Unicode escaping (inside U&\"...\" and U&'...') would\nnot conflict with Lua escaping. I think the issue here is:\nshould invalid UTF-8 characters be legal in text/char?\n. I'll interpret Konstantin's remark  as \"yes, invalid UTF-8 characters should be legal in text/char\". This means that one of the reasons that we would distinguish text/char from blob, is no longer a reason.. Right.. See also:\nMake all ANSI SQL keywords reserved. #2116\nAllow ANSI SQL delimiters only #2123\nOnly allow identifiers which are valid in Tarantool. #2126\nIncrease identifier maximal length. #2127\n. I am somewhat more fanatical -- a string is not a number.\nWhy would I ever want to say '1' (string) when I can say 1 (number)?\nOr, to turn this into a big question:\nDo you want to be compatible with NoSQL (in that case '1' is not 1)?\nDo you want to be compatible with standard SQL (in that case '1' is not 1)?\nDo you want to be compatible with SQLite (in that case '1' can be 1)?\nFor 1.8.0 I suppose the temporary answer is no,no,yes.\nBut for 1.8.1 I hope the final answer is yes,yes,no.\n. (1) is fixed. While checking this, I noticed that\n\"select (9223372036854775809);\" returns 9223372036854775808,\nso I think there is something wrong still with the extreme\nlimit of integers. Perhaps you already knew that.\n(2) returns \"integer overflow\". Is that the right result?\nI think you had a choice here: you could have promoted to\na float instead of returning an error. Perhaps you already\ndecided that is not what users want.\n(3) and (4) and (5) and (6) and (7) are not fixed in 2.0, but\nyou are making new issues or fixing them in 2.1, which should\nmake everyone happy. After all, these are minor issues.\n. Yes. If you are on Moscow time, that is a 9-hour difference\n(from UTC-6 to UTC+3). Therefore this supposed error is not\nrepeatable, something must be wrong with my computer.\nHowever, I think WEEKDAY should not depend on locale,\nbecause then two computers with the same data could\nproduce different results.\n. I'm sure it would be easier to just make it\nillegal to default to anything except a literal.\nOf course it's great to have column values generated\nfrom expressions of any kind, but that's not what\nthis issue is about.\n. Moving to SQL-standard data support does not require\nsignificant change to underlying structures.\nIt's mostly a matter of: some definitions that are\noptional should be mandatory, some operations\nthat are legal should be illegal.\n\n\nIt is mandatory to state a data type.\nTherefore this becomes illegal:\nCREATE TABLE t (s1 PRIMARY KEY);\n\n\nIt is mandatory to state a data type by its\nname or by its synonym. The current method\nallows for stating any string at all, with\nrules about what substrings can be searched.\nTherefore this becomes illegal:\nCREATE TABLE t (s1 xcharx PRIMARY KEY);\n\n\nThe stated data type is a statement of a\nrequirement not an option.\nTherefore affinity rules do not exist.\n\n\nThe mandatory data types are\nCHAR (synonyms CHARACTER),\nVARCHAR (synonyms CHAR VARYING, CHARACTER VARYING),\nSMALLINT,\nINT (synonyms INTEGER),\nFLOAT,\nREAL,\nDOUBLE PRECISION (non-standard synonym DOUBLE),\nNUMERIC,\nDECIMAL (synonym DEC),\nDATE,\nTIME,\nTIMESTAMP.\nCurrently all these data types can be stored,\nthe only problems are: enforcing the maximum\nvalue ranges and size limits, and (sometimes) formats.\n(Here we are only considering storage and comparison\nof the values, not operations on them.)\n\n\nIt is illegal to assign or compare\nvalues of incompatible data types.\nThere are no automatic incompatible-to-compatible\nconversions.\nRanges of values and lengths are limited by their\ndefinitions and those limits are to be enforced.\nTherefore these become illegal:\nUPDATE t SET integer_column = 'x';\nUPDATE t SET character_column_with_length_4 = 'ABCDE';\nUPDATE t SET smallint_column = 999999;\n\n\nIt is mandatory to enclose character literals\nin single quotes. Double quotes are not allowed\nbecause \"xxxx\" is an identifier, not a literal.\nAnd anything that is enclosed in single quotes is\na character literal, not an identifier.\nTherefore this becomes illegal:\nUPDATE t SET 'column1' = \"literal-value\";\n(updated comment: this was fixed, it is no longer an issue)\n\n\nAssuming that we are claiming to support UTF8,\nall UTF8 \"noncharacters\" should cause exceptions.\nTherefore this becomes illegal:\nUPDATE t SET char_column = CAST(X'FFFF' AS CHAR);\n(This requirement is pre-rejected, and will be mentioned\nagain in the description of issue#2121 Integrate ICU into Tarantool.)\n\n\nINT.\nSynonyms: INTEGER.\nRange is conventionally -2147483648 to 2147483647.\nTherefore this becomes illegal:\nUPDATE t SET int_column = 1e50;\n\n\nSMALLINT.\nRange is conventionally -32768 to +32767.\nTherefore this becomes illegal:\nUPDATE t SET smallint_column = 32768;\n\n\nFLOAT [(n)], REAL, DOUBLE PRECISION.\nThe requirements mostly correspond to what everybody\ndoes with IEEE754, except that\nthe approximate-numeric ranges do not include Inf\nor NaN. (This requirement is pre-rejected, and will\nbe mentioned again in the description of issue#2135\nDivision by zero should yield error or infinity.)\n\n\nx. DECIMAL(x,y) and NUMERIC(x,y)\nSynonyms: DEC.\nThese are not floating-point numbers, they are\nexact numbers which may be big and have multiple\npost-decimal positions. Range is not specified yet\nbecause the maximum precision and scale will depend\non looking more at the existing code.\n\n\nDATE.\nRange: '0001-01-01' to '9999-12-31'.\nProleptic Gregorian; invalid dates cause errors.\nLiterals can have the form '0001-01-01' (the\nactual requirement is DATE '0001-01-01' but nobody\nbothers with that).\n(updated comment: nobody will mind negative dates.)\n\n\nTIME.\nRange: '00:00:00' to '23:59:59'.\nNo need for fractions of seconds, they're optional.\n\n\nTIMESTAMP.\nRange: '0001-01-01 00:00:00' to '9999-12-31 23:59:59'.\n(updated comment: nobody will mind negative dates)\n\n\nBLOB.\nBLOB and BINARY and VARBINARY are not mandatory in\nstandard SQL. But they differ from CHAR / VARCHAR.\nAssume they will be supported as a new data type.\n\n\nSee also:\nFollow ANSI SQL quotation rules. #2120\nImprove values comparison of different types. #2210  -- I'm suggesting the opposite\n[strict typing] INTEGER column allows string values. #2315\nString literals in SQL #2344\nAutomatic data type conversion in SQL #2352\n. There has been a behaviour change. Now the result of the example statements is an assertion:\ntarantool: /home/pgulutzan/tarantool-2.0/src/box/sql/expr.c:4230: sqlite3ExprCodeTarget: Assertion `op == 118' failed.\nAborted (core dumped)\n. You're right, my suggestion is bad.\nI'll close it myself.\n. Okay.\nPrimary key can be declared with NULL #3473\nConstraint definition errors create unwanted objects #3474\nForeign keys can be declared with CASCADE #3475\n. The big question is: for any type of object,\nif object#1 refers to object#2, and object#2\nis dropped or altered, what should happen to\nobject#1? The standard's usual answer is:\nyou should specify RESTRICT (it's illegal to\ndrop unless you drop object#1 first), or\nCASCADE (you must drop object#2 -- and if\nobject#3 depends on object#2 you must also\ndrop object#3 and so on). But for this small\nquestion: it's not a disaster if the view is\ndepending on something that doesn't exist.\nSo you can close -- but if so, please say \"it is a\npolicy decision that we will not restrict or\ncascade\", so I can document it.\n. Also: I can create a view that refers to a table column that doesn't exist.\nCREATE TABLE te44 (s1 INT PRIMARY KEY);\nCREATE VIEW ve44 AS SELECT s2 FROM te44;. The example that I gave works correctly now. However, the comment that I made was: \"What matters here is: it seems that the foreign-key check happens after the firing of the AFTER INSERT trigger.\" So try this example:\nbox.sql.execute([[CREATE TABLE b1 (s1 INT PRIMARY KEY, s2 INT UNIQUE);]])\nbox.sql.execute([[CREATE TABLE b2 (s1 INT PRIMARY KEY, s2 INT, FOREIGN KEY (s2) REFERENCES b1 (s1));]])\nbox.sql.execute([[PRAGMA foreign_keys=on;]])\nbox.sql.execute([[CREATE TRIGGER b2_2 AFTER INSERT ON b2 FOR EACH ROW BEGIN INSERT INTO b1 VALUES (1,1); END;]])\nbox.sql.execute([[INSERT INTO b2 VALUES (1,1);]])\nResult: The insert into b2 succeeds.\nConclusion: FOREIGN KEY check is happening after AFTER trigger.\nTherefore I believe this is not fixed.. Now the FOREIGN KEY check happens at an earlier stage, so the original description of the \"bug\" is no longer applicable. I have corrected the descriptions of execution order in the SQL manual. I did not follow the description in https://github.com/tarantool/tarantool/wiki/SQL:-constraints-checks-order. If the description in the manual is now what will continue to be supported, then, although in my opinion the order is strange, this issue can be closed.. Surely what's correct from my point of view is unimportant, but\nI think you mean: why did I say that in my opinion the order\nthat is described in the Tarantool 1.8 SQL manual is strange?\nI'll quote from it:\n\"\nWhen INSERT or UPDATE or DELETE occurs for table X, Tarantool usually operates in this order:\nFor each row\n  Perform constraint checks for any UNIQUE or PRIMARY KEY or CHECK clauses defined for table X.\n  For each BEFORE trigger that refers to table X\n       Check that the trigger's WHEN condition is true.\n       Execute what is in the trigger's BEGIN|END block.\n  Insert or update or delete the row in table X.\n  For each AFTER trigger that refers to table X\n       Check that the trigger's WHEN condition is true.\n       Execute what is in the trigger's BEGIN|END block.\n  Perform constraint checks for any FOREIGN KEY clauses defined for table X.\nHowever, Tarantool does not guarantee execution order when there are multiple constraints,\n or multiple triggers for the same event (including NoSQL on_replace triggers\n or SQL INSTEAD OF triggers that affect a view of table X).\n\"\nI have not checked today whether this is still true.\nEverything is done within the main \"For each row\" loop;\nthis is unfortunate and non-standard but not a disaster.\nThe constraint checks, other than foreign-key constraint\nchecks, are happening so early that, if a foreign key or\nan after trigger can cause a change, it can\ncause a violation of the non-foreign-key constraints\n-- that is what I think is strange.\nI did say, though, that I suppose this can be closed.. Also I can add COLLATE collation-name after the column name. To my surprise, it seems to work. But someone should guarantee that this is intentional behaviour.. It is a bug, although not important.. The first problem (setting the same column twice) is fixed. The third problem (unique constraint failure) is not a bug. So only one problem remains: changing the primary key.. Nikita Pettik is correct. So there are no more problems. I think that this can be closed.\nRegarding my statement that \"An optional clause OR ROLLBACK|ABORT|REPLACE|FAIL|IGNORE is legal but does nothing.\" -- now the clauses cause deleting, I decided that is a separate issue, #3566. Regarding Mr Yukhin's comment above ... I don't think this can be solved by any change to the console. My problem is, as I tried to explain, getting column names of a result set with a client program written in C. I hope this will be cleared up soon. Additional remarks ... \"VALUES(1);\" returns a column named \"column1\" but \"SELECT 1 ...\" returns a column named \"1\", I don't see why there is a difference. And some clients will also want more metadata than just the column name, for example the data type.\n. Yes, HAVING should still be possible.\nOf course there's only one group, so\nSELECT SUM(s1) FROM t HAVING SUM(s1) > 0;\nwould either return the sum, or nothing.\n. Yes, HAVING should still be possible.\nOf course there's only one group, so\nSELECT SUM(s1) FROM t HAVING SUM(s1) > 0;\nwould either return the sum, or nothing.\n. \"SELECT 1 from te40 having min(s1) > 0;\", where the select list has only a literal, fits the suggested requirement that the select list can contain aggregates and/or literals but nothing else. The other two examples do not fit that requirement. There are a few other things that could also be acceptable but I don't want to suggest that non-trivial implementation work would be worth the time. If you can do aggregates e.g. \"SELECT MIN(s1) FROM te40  HAVING MIN(s1) > 0;\", but you cannot do \"SELECT 1 from te40 having min(s1) > 0;\", I agree that is good enough for this year.. I call it a bug, but expect you'll want to\nget other opinions.. In standard SQL it would be an error.\nMy suggested solution is: don't allow \"=\".\n. Yes, sometimes the answer will be correct (assuming correct = standard). My belief is that, if you know that sometimes the answer will not be correct, you should disallow \"=\". Of course there is a third possibility -- make sure it always is correct -- but I assumed that would be too hard to be worth the trouble.\n. Also, if I want to use AUTOINCREMENT, the only thing that seems to work is:\nbox.schema.user.grant('guest','create','universe'). The comment by Gerold103 is correct. So, is this a duplicate of an issue that developers are already aware of?. The above comments are correct, new.column1 is legal and my example was bad, sorry.\nAnd I don't see a reason to care whether the parentheses are optional or old.column1 fails.\nSo I suppose it could be closed as \"not a bug\".\n. I cannot reproduce it on latest 1.8.. See also Issue #2351 Column definition in SQL. Gerold103is of course correct so I apologize for my careless introductory remark. However, look at the title of this issue \"box.savepoint() sometimes causes an incorrect error message\" and the example. When there is no active transaction, box.savepoint() returns an error. When there is no active transaction, box.rollback() does not return an error. Why is behaviour different?\n. I won't argue further about it, please close the issue in whatever way you think is appropriate.. I believe that what I aid about ROLLBACK applies also for COMMIT. I used this as an example of a statement that does not appear to comply with the SQL standard:\n\"E151-01    COMMIT statement    commit; Fail. We have to say START TRANSACTION first.\"\nIt's a bit tricky and I might be wrong, but my reasoning is: (a) this is direct SQL, (b) COMMIT is an \"SQL transaction\" statement, (c) an SQL transaction statement is a \"directly executable statement\", (d) a directly executable statement is a \"direct SQL statement\". (e) COMMIT and ROLLBACK are \"transaction-initiating SQL statements\" when they are legal. Therefore it should be possible to say COMMIT; if no transaction is active. The effect is: a transaction is initiated and then immediately terminated.. This might be a duplicate of issue#2835.. I have encountered this error message twice in the last few days. It is true that often I don't properly shut down the computer, but that has always been true, and yet I did not encounter this message until the lat few days. So I hope it is not due to a change in behaviour.. Oops, I forget this is already documented behaviour so it's not a bug. Forget it.. I changed the example in the manual so that people won't try these statements while the bug exists.. The invalid X'A5' isn't causing the hang, the valid X'' is.. Should this be reported in https://github.com/tarantool/doc/issues rather than https://github.com/tarantool/tarantool/issues?. It happens in Tarantool version 2.0.4. In an earlier version, nothing interesting happens:\n\"\nTarantool 1.10.0-123-g130cb45\ntype 'help' for interactive help\ntarantool> box.cfg{log = 'syslog:identity=tarantool'}\nstarted logging into a syslog, SIGHUP log rotation disabled\n\". You are right. CASCADE works now with simple cases, and\neven with some complicated cases (I tried to find major\nproblems and I failed). However, I see four minor problems.\nIf you decide they are not bugs, then please close this report.\n1: If I have ON UPDATE CASCADE, and I set referenced-key value to NULL,\nthere's no cascade, there's an error. Actually making a reference to\na nullable column is bad anyway, so you can say \"this is deliberate\".\nDROP TABLE t2;\nDROP TABLE t1;\nCREATE TABLE t1(a INT PRIMARY KEY, b INT UNIQUE);\nCREATE TABLE t2(a INT PRIMARY KEY, b INT REFERENCES t1(b) ON UPDATE CASCADE);\nINSERT INTO t1 VALUES (1, 2);\nINSERT INTO t2 VALUES (1, 2);\nUPDATE t1 SET b = NULL;\n2: REPLACE causes \"ON DELETE CASCADE\" action. Actually that is the\ncorrect thing to do according to our definition (that REPLACE can\nbe equivalent to a DELETE and an INSERT). And that is consistent\nwith the way that REPLACE affects triggers (both the DELETE trigger\nand the INSERT trigger are activated). My only worry is: I forget,\nwas there a conscious decision that SQL REPLACE will do this?\nIf there was, you can say \"this is deliberate\".\nDROP TABLE t3;\nDROP TABLE t2;\nDROP TABLE t1;\nCREATE TABLE t1(a INT PRIMARY KEY, b INT UNIQUE);\nCREATE TABLE t2(a INT PRIMARY KEY, b INT REFERENCES t1(b) ON UPDATE CASCADE ON DELETE CASCADE);\nINSERT INTO t1 VALUES (1, 1);\nINSERT INTO t2 VALUES (1, 1);\nINSERT INTO t2 VALUES (2, 1);\nCREATE TABLE t3 (a INT PRIMARY KEY);\nINSERT INTO t3 VALUES (0);\nCREATE TRIGGER t1a BEFORE INSERT ON t1 FOR EACH ROW BEGIN UPDATE t3 SET a = a + 1; END;\nCREATE TRIGGER t1b BEFORE DELETE ON t1 FOR EACH ROW BEGIN UPDATE t3 SET a = a + 1; END;\nREPLACE INTO t1 VALUES (1, null);\n-- The following select returns 0 rows\nSELECT * FROM t2;\n-- The following select shows that t3 was updated twice\nSELECT * FROM t3;\n3: I can repeat ON UPDATE CASCADE without seeing a syntax error.\nI admit, though, that this sort of \"error\" is so common that it\ncan be considered normal behaviour. So you can say \"this is deliberate\".\nDROP TABLE t2;\nDROP TABLE t1;\nCREATE TABLE t1(a INT PRIMARY KEY, b INT UNIQUE);\nCREATE TABLE t2(a INT PRIMARY KEY, b INT REFERENCES t1(b) ON UPDATE CASCADE ON UPDATE CASCADE);\nOrdinarily I have to refer to UNIQUE columns, because it\nshould not be possible to have one foreign-key site that\nmatches two referenced-key sites. But using the\nstrange \"affinity\" rules, I can cause that situation.\nThese are weird results, but if there's\nno plan to fix the data type assignment/comparison rules, I can\nunderstand if you say \"this is deliberate\".\nDROP TABLE t2;\nDROP TABLE t1;\nCREATE TABLE t1(a INT PRIMARY KEY, b CHAR(5) UNIQUE);\nCREATE TABLE t2(a INT PRIMARY KEY, b int REFERENCES t1(b) ON UPDATE CASCADE);\nINSERT INTO t1 VALUES (0, '2');\nINSERT INTO t2 VALUES (0, '2');\nINSERT INTO t1 VALUES (1, '02');\n-- The following select will say there are 2 matching rows\nSELECT COUNT(*) FROM t1 WHERE b IN (SELECT b FROM t2);. The suggestion above \"Do not allow to name anything but UNIQUE, PRIMARY KEY, CHECK, FOREIGN KEY/REFERENCES\" is good regardless of the result of this issue. That is, default clauses and collate clauses are not constraints so they do not need constraint names.. There is nothing wrong with CREATE UNIQUE INDEX, I\nonly added it to show that there is no duplicate.\nThe bug is not there, the bug is in the first UPDATE,\nafter the comment \" -- The following update will fail\nsaying there's a duplicate in T1\". That is wrong,\nbecause there is no duplicate, so UPDATE should not fail.\nHowever, I see now that my original theory is nonsense.\nI thought that this is due to using numerics in a CHAR.\nWrong. It is merely a variant of this:\ncreate table t2 (s1 int primary key);\ninsert into t2 values (1),(2);\nupdate t2 set s1 = s1 + 1;\nResult = duplicate-key error.\nProbably there is already an old bug report about\nthat, although I don't see it. Perhaps you remember.\n. I suppose this no longer matters because issue#3572 \"LIKE & GLOB operators\" will remove like() and glob().. Oh. Then I'm sorry, I was mistaken. Anyway, I hope you solve this issue by removing support for LIKE().. I am suggesting removing support for the LIKE() function, since I believe that is the easiest way to solve the problem that LIKE is a reserved word Of course, if somebody can point to a reason that users would want to use LIKE() instead of the LIKE operator, then fine, don't fix, and I'll document that they have to use quote marks.. Okay, now the SQL manual says:\n\"LIKE\"(string-expression-1, string-expression-2 [, string-expression-3])\n           -- \"LIKE\"(a,b[,c]) -- notice the quote marks -- is equivalent to b LIKE a [ESCAPE c]\n           Example: \"LIKE('%Rain',The Rain') is 1 because it is true\n. The above comment seems correct. I didn't see the similarity of #3499, sorry. I'll close this issue since it is a duplicate.. I assume everyone agrees that \"unicode\" has default strength, so your question is important.\nI doubt that 'identical' is the most appropriate default strength.\nNo. I believe what I read in http://unicode.org/reports/tr10/ UTS #10 Unicode Collation Algorithm:\n\"The default for strength in UCA is tertiary; it can be changed for different locales in CLDR.\"\nand what I read in ICU's concepts page http://userguide.icu-project.org/collation/concepts:\n\"This level should be used sparingly, as only code point values differences between two strings is an extremely rare occurrence. Using this level substantially decreases the performance for\nboth incremental comparison and sort key generation (as well as increasing the sort key length).\"\nThis might be a good time to remind everyone that, although deterministic sort order\nis desirable, 'identical' does not guarantee it. For example:\nbox.internal.collation.create('RUSSIAN_S5', 'ICU', 'ru_RU', {strength='identical'});\nbox.sql.execute([[DROP TABLE \"k\";]])\nbox.sql.execute([[CREATE TABLE \"k\" (s1 INT PRIMARY KEY, s2 CHAR(1));]])\nbox.space.k:insert{5,'\u0401'}\n-- Insert \u0415 and Combining Diaeresis\nbox.space.k:insert{2,string.char(0xd0)..string.char(0x95)..string.char(0xcc)..string.char(0x88)}\nbox.sql.execute([[SELECT s1,s2,length(s2) FROM \"k\" WHERE s2 = '\u0401' COLLATE \"RUSSIAN_S5\";]])\nThe SELECT result is:\ntarantool> box.sql.execute([[SELECT s1,s2,length(s2) FROM \"k\" WHERE s2 = '\u0401' COLLATE \"RUSSIAN_S5\";]])\n\n\n\n\n[2, '\u0415\u0308', 2]\n\n\n[5, '\u0401', 1]\n...\n\nSo: feature request: 'deterministic' strength? Maybe it's actually not bad\nif the comparison operator is '=' and there's no index, because then you'd\nonly need to memcmp the UTF-8 strings.\n. I was only complaining that the description that I see with _collation:select() seemed unclear.\nI worry that the proposed patch will change the actual collation strength of \"unicode\" and of new collations created with default options, and those are unnecessary changes.\nNow I regret that I created this issue, and suggest it should be closed with \"won't fix\".. I guess that when LIKE depends on column collations, it will use ICU. So I suggest this test:\nCompare Long S with S.\nSELECT UPPER('\u017f') = 'S', '\u017f' LIKE 'S', '\u017f' = 'S' COLLATE \"unicode_ci\";\nCurrently the result is: 1, 0, 1. Even '\u017f' LIKE 'S' COLLATE \"unicode_ci\" is false.\n. Korablev77 is 100% correct, the matter is solved easily with ALTER TABLE. I apologize for not thinking clearly, and I will cancel this non-bug.. The RETURNING clause may not be the best way to do this, there is a standard option. See the second half of this blog post: https://ocelot.ca/blog/blog/2014/02/23/a-glance-at-a-mariadb-release-candidate/. I apologize for not also giving examples of what I thought was\nTarantool's normal behaviour. Try these two.\nSQL\ndrop table t5;\nCREATE TABLE t5 (s1 INT PRIMARY KEY AUTOINCREMENT, s2 int, CHECK (s1 < 1));\nINSERT INTO t5 VALUES (NULL, NULL);\nINSERT INTO t5 VALUES (NULL, NULL);\nSELECT * FROM t5;\nThe first INSERT succeeds. The second INSERT succeeds, and s1 = 2.\nThus \"INSERT INTO t5 VALUES (NULL, NULL);\" is not equivalent to\n\"INSERT INTO t5 (s2) VALUES (NULL);\".\n+\nSQL\ndrop table t5;\nCREATE TABLE t5 (s1 INT PRIMARY KEY AUTOINCREMENT, s2 int, CHECK (s2 < 1));\nINSERT INTO t5 VALUES (NULL, 1);\nINSERT INTO t5 VALUES (NULL, 0);\nSELECT * FROM t5;\nThe first INSERT fails.\nThe second INSERT succeeds, and s1 = 1.\nNot 2 but 1.\nSo:\n(a) It is okay to say that the non-standard autoincrement depends on\nsequences which are unaffected by transaction commit|rollback. We have\nnot clearly said so, but the SQL manual does use the word \"sequence\" and\nMr Shpilevoy is clearly saying so in his comment now.\n(b) It is okay to say that a sequence's value is incremented at the start of\na statement's execution and abortion of statements does not affect it.\nWe have not explicitly said so, but it is implied by Mr Shpilevoy's example,\nwhere he suggests that the original statement-abortion example can be rewritten as\na transaction-rollback example.\n(c) It is okay to say that Tarantool autoincrement is not like MySQL\nauto_increment (because MySQL would return s1 = 1 for the first example),\nand that Tarantool autoincrement is not like SQLite autoincrement (because\ntarantool does not re-use numbers after insertion of 9223372036854775807).\n(d) It is okay to say that CHECK clauses are sometimes evaluated before\nthe sequence value goes up, and that CHECK clauses are sometimes evaluated after\nthe sequence value goes up, depending on what appear to be trivial\nsyntax differences.\n(e) But it is not okay to say nothing. So call it a documentation error,\nbut please clarify that (a) and (b) and (c) and (d) are really expected.\n. With non-standard syntax you can do whatever you decide is necessary, but of course it would be better if CHECK clauses were always enforced. Ignore my remark about MySQL -- I had forgotten that MySQL doesn't enforce CHECK clauses. I think the immediate issue with (d) can be solved by explaining why the results differ.. yes. Korablev77 is correct. I was confused by the title of issue#2963 \"sql: ban ON CONFLICT REPLACE for secondary indexes\", This is not banned. So the error was in the documentation. Sorry. I'll close.. Yes.. I was going to write this as a new issue report, but I see now\nthat the intent of issue#3733 is to do something about all pragmas,\nso I will merely add this as a comment.\nI have Ubuntu 18.04. I have Tarantool 2.1 pulled from source oday.\nI execute these statements:\nCREATE TABLE J (S1 INT PRIMARY KEY);\nCREATE INDEX I ON J (S1);\nPRAGMA INDEX_LIST('J');\nResult = pk_unnamed_J_1, not I.\nPRAGMA INDEX_INFO('J.I');\nResult = nothing.\nPRAGMA INDEX_XINFO('J.I');\nResult = nothing.\nI execute this statement:\nPRAGMA;\nThe result goes to the server console, not to the client.\nI execute this statement:\nPRAGMA query_only(true);\nThe result is \"okay\" but I can still do CREATE and INSERT statements.\nI execute this statement:\nPRAGMA parser_trace;\nPRAGMA server_trace(true);\nResults go to the server console when I execute statements later.\nI realize that they should not go to the client.\nBut the client has to be able to access them, perhaps in a parse table or a warning message.\nI execute this statement:\nPRAGMA sql_default_engine(memtx);\nThe result is \"okay\", that is, this is the same as PRAGMA sql_default_engine('memtx');\nBut it is bad to accept something that is not a string.\nConsider what will happen when, someday, Tarantool allows variable names.\nOf course I'm not asking that these statements should be fixed.\nI believe they should be removed.\n. Yes, PRAGMA index_list(('J') now shows index I, and that is okay.\nNo, PRAGMA INDEX_INFO('J.I'); should not be an error -- but I\nthink I reported this incorrectly. I suppose this should be like\nSELECT index_name FROM information_schema.statistics WHERE table_name='J.I';\nand Tarantool should return an empty result set. Instead I see NULL.\nYes, PRAGMA INDEX_XINFO() doesn't work. Hurrah.\nYes, if PRAGMA; is fixed with #3832, good.\nHmm, it is good to remove PRAGMA query_only(true); but someday we\nmight want SET SESSION TRANSACTION CHARACTERISTICS AS TRANSACTION READ ONLY;.\nMaybe this is possible by temporarily setting box.cfg{read_only=true} whenever\nthis session does any statement or Lua request?\nHmm, for PRAGMA parser_trace; you mention \"debug\" and \"release\" build,\nbut should it be legal if I build with -DCMAKE_BUILD_TYPE=RelWithDebInfo?\nI think your reply re PRAGMA sql_default_engine(memtx); means\nit could be fixed but it will not be fixed.\nRe information_schema and SET statements: of course you are right.\n. I agree that is wrong, as the standard document says \"If the declared type of both operands of a dyadic arithmetic operator is exact numeric, then the declared type of the result is an implementation-defined exact numeric type ...\" and I am assuming nobody wants to implement an exact numeric type that could handle such a large number.. For anyone who has no access to the SQL manual on docs.google.com,\nthe example is:\nbox.sql.execute(\"CREATE TABLE tester (s1 INT PRIMARY KEY, s2 VARCHAR(10))\")\nfunction string_function()\n  local random_number\n  local random_string\n  random_string = \"\"\n  for x = 1,10,1 do\n    random_number = math.random(65, 90)\n    random_string = random_string .. string.char(random_number)\n  end\n  return random_string\nend\nfunction main_function()\n  local string_value, t, sql_statement\n  for i = 1,1000000,1 do\n    string_value = string_function()\n    sql_statement = \"INSERT INTO tester VALUES (\" .. i .. \",'\" .. string_value .. \"')\"\n    box.sql.execute(sql_statement)\n  end\nend\nstart_time = os.clock()\nmain_function()\nend_time = os.clock()\n'insert done in ' .. end_time - start_time .. ' seconds'\n. I too probably misunderstood what Gerold103 said earlier:\n\"I vote for monolithic namespace of all constraints of one table: indexes, checks, foreign keys.\"\nThe constraint namespace should be for the whole schema, not merely one table.\nIndexes are not constraints so I am only commenting about checks, foreign keys, etc.. Re compound_select_limit(-1): yes I believe an error would be appropriate.\nRe confusing \"number of operations\" with \"number of operands\": yes I believe your explanation.\nRe compound_select_limit(0): I believe 0 should mean \"0 set operators\" not \"infinite set operators\".\nRe SET instead of PRAGMA: yes I hope that eventually users can use SET and SELECT|VALUES for variables.\nRe naming: I guess you mean at least that it won't be compound_select_limit, good.\nRe display: thank you.\n. I do not understand the premise: \"According to standard, it is not allowed to name column constraints ...\".\nI interpreted the clause in the column definition section that begins \"If a  is specified ...\" to be saying that the column constraint definition including the name will be taken as equivalent to a table constraint definition. Perhaps we are looking at different sections?. This looks in part like a response to a comment that I made on a different issue, Issue#3503 sql: check constraint name for duplicate, where I said:\nThe suggestion above \"Do not allow to name anything but UNIQUE, PRIMARY KEY, CHECK, FOREIGN KEY/REFERENCES\" is good regardless of the result of this issue. That is, default clauses and collate clauses are not constraints so they do not need constraint names.\n... The comment that I made on this issue was solely in reference to your opening sentence \"According to standard, it is not allowed to name column constraints ...\". Now you appear to agree that in fact it is allowed in the standard, good. As for NOT NULL, my opinion does not matter, I was only commenting about the standard.. I have made changes in sql.txt section \"Calling Lua routines from SQL\".. Konstantin Osipov asked me about this on 2019-01-11 in dev thread\nRe: Basic acceptance tests for SQL features 00 Part 2.\nI decided to put my reply as a comment on this issue.\nSince Roman Khabibov can read the standard document,\nhe obviously already understands this -- but perhaps\nit is useful for checking that we understand the same details.\nI have Ubuntu 18.04. I have Tarantool 2.1, pulled from source today.\nI try to execute these statements:\nSELECT TRIM(FROM 'a ');\nSELECT TRIM(' ' FROM 'a ');\nSELECT TRIM(TRAILING ' ' FROM 'a ');\nThey all result in syntax errors.\nTarantool supports TRIM(). However,\nStandard syntax: TRIM ([LEADING|TRAILING|BOTH] [trim character] FROM string1)\nTarantool syntax: TRIM (string1 [, trim-string])\nIt is possible to support \"TRIM (string1 [, trim-string])\"\nif SQLite compatibility is important. But that's not common.\nMySQL + DB2 + Oracle are reasonably close to the standard:\nhttps://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_trim\nhttps://www.ibm.com/support/knowledgecenter/en/SSGU8G_12.1.0/com.ibm.sqls.doc/ids_sqs_1556.htm\nhttps://docs.oracle.com/database/121/SQLRF/functions235.htm#SQLRF06149\nSQL Server is vaguely similar but does not have LEADING|TRAILING|BOTH:\nhttps://docs.microsoft.com/en-us/sql/t-sql/functions/trim-transact-sql?view=sql-server-2017\nIf [LEADING|TRAILING|BOTH] is omitted, assume BOTH.\nIf trim_character is omitted:\nif arguments are char|varchar, assume ' ' (0x20)\nif arguments are blob etc., assume 0x00.\nThis is not happening now, Tarantool always assumes 0x20.\n(Currently Tarantool cannot handle TRIM correctly with BLOBs\nbecause it thinks strings end with 0X00, but that is a different issue.)\nA related issue,\nIssue#3543 sql: LTRIM(X'004100',X'00') does not trim X'00'\nis fixed.\nIf [LEADING|TRAILING|BOTH] is omitted,\nand trim_character is omitted:\nthe standard document doesn't allow for that.\nHowever, SELECT TRIM(FROM 'a '); looks like an easy extension.\nIn standard SQL the arguments must be strings (char/varchar/blob),\nbut Tarantool allows TRIM(3.5). This seems harmless but useless.\nThe resulting data type should be the same as the data type of string1,\nexcept of course that it may be shorter.\nWhat I do not understand about this proposal is:\n? is it saying that LTRIM and RTRIM should be removed?\n? is it saying th at SQLite-style syntax dhould be removed?\n. It is true that user-defined functions will not know some things about what an SQL caller is passing. We don't promise that they will, so I think it is okay that it is the caller's responsibility to make sure relevant information is passed explicitly. A possible issue is that the function cannot use the utf8 module for all possible collations, but that is not an SQL issue.. A possible \"reason\" would be that LIKE blob-value is legal in standard SQL. But is an optional feature and it does not work properly, so I suppose that it is correct to disallow it.. That is correct behaviour but add one more request to the\nexample that you call \"case_insensitive\". That is, execute this:\ns2 = box.schema.space.create('t2')\ns2:format({{name='s1', type='string', collation = 'unicode_ci'}})\ns2:create_index('pk', {unique = true, type='tree', parts={{'s1', collation = 'unicode_ci'}}})\ns2:insert{'\u0401'}\ns2:insert{'\u0451'}\ns2:insert{'\u0415'}\nThe attempt to add '\u0415' will fail.\n. The SQL manual currently says:\n\"\nMAX(expression-1, expression-2, [expression-3 ...])\n-- return the largest of the supplied expressions, or, if any expression\nis NULL, return NULL\nDo not confuse with MAX(expression), which is an aggregate function.\nExample: MAX(7, 44, -1) is 44\nExample: MAX(1E308, 'a', 0, X'00') is '\\0', the nul character\nExample: MAX(3, NULL, 2) is NULL\n\"\nI believe that is correct.\n. OK, my bad too, because I should have explained that the problem isn't the vocabulary, it is: why do I think the examples in the SQL manual are correct? I do not mean that an integer should be implicitly cast to a char, and I believe it will be wonderful if that is restricted by issue#3809. But when I say \"SELECT TYPEOF(MAX(1E308, 'a', 0, X'00'));\" I see that the data type is not integer and not char, it is BLOB. And the underlying Tarantool/NoSQL type of BLOB is 'scalar'. And in 'scalar' all those values are legal and comparable. Obviously the standard does not allow that syntax or that combination (I use the word \"combination\" in the way that the standard document uses it for section \"\"Result of data type combinations\") but this is a Tarantool extension. If you still disagree, then I think this might require some discussion about policy, that is, what to do with 'scalar'.. Okay, I replied in dev mailing list, subject line = The rules for the scalar data type in SQL.. The results in that example look correct to me. What results were expected?. ",
    "ilnarb": "\njust use modern allocator, like tcmalloc\n. also I need performance information, e.g. throughput\n. \u0415\u0441\u043b\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 \u0441\u043d\u0435\u043f\u0448\u043e\u0442 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 xlog, \u0432\u0440\u043e\u0434\u0435 \u043a\u0430\u043a \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043c\u0435\u0448\u0430\u0435\u0442 \u043f\u043e\u0434\u043d\u044f\u0442\u044c\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u043e\u043c?\n\u0412\u0441\u0435\u0433\u043e 2 \u0443\u0441\u043b\u043e\u0432\u0438\u044f:\n\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0441\u043d\u0430\u043f\u0448\u043e\u0442\n\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0432\u0441\u0435 xlog, \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u0430 \u0434\u043e \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u0430 inprogress\n. best one https://github.com/bingmann/stx-btree\n. 1. \u0441\u043d\u0430\u043f\u0448\u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0435 \u043d\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u0434\u0438\u0441\u043a \u043f\u0438\u0448\u0435\u0442\u0441\u044f ?\n\u0430\u0440\u0435\u043d\u0430 \u0432 \u0448\u0430\u0440\u0435\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442?\n. 1. \u0435\u0441\u043b\u0438 \u0434\u043e\u043b\u0433\u043e \u0438 \u0443\u0441\u0438\u043b\u0435\u043d\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u0434\u0438\u0441\u043a, \u043b\u0438\u043d\u0443\u0445 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0442\u043e\u0440\u043c\u043e\u0437\u0438\u0442\u044c\n\u0432\u044b\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0448\u0430\u0440\u0435\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438\n. \n",
    "zloidemon": "I seem need improve also network information like ip address and protocol v4/v6. For example, i can launch tarantool:\nbox.cfg {listen=3301}\nBut that configuration will listen on all IPs in system, good point to see which ip uses at the moment.. Please merge, fixed: https://github.com/tarantool/tarantool/commit/8f4e4ad0a931b2e682f77ed453a6c9d898ebbd10\n. You would see centos 5 or oracle linux\n. Fixed in the commit https://github.com/tarantool/tarantool/commit/42116f77250ce0b1381fe4524d2a404cbd598bb4 please merge with gh78-CMake_cannot_find_mysqlclient.\n. Added at the commit https://github.com/tarantool/tarantool/commit/8bae11559f93d4a7f1dbad2e4c9dcb48f4def66b\n. I've just moved to gh80-add_dmg_packages_for_osx-stable  branch, feel free to remove gh80-add_dmg_packages_for_osx. I'm work on the gh80-add_dmg_packages_for_osx-stable.\n. Please merge gh80-add_dmg_packages_for_osx-stable, ready to use.\nAlso need remove the branch: gh80-add_dmg_packages_for_osx\n. I'll able to make it asap, if that isn't high status you can sign task to me.\n. Fixed at the https://github.com/tarantool/tarantool/commit/518ce3a9bf54b5243c5bde4ea3aa6cf993e2520b , please merge.\n. Fixed, please merge https://github.com/tarantool/tarantool/commit/b6d62599b9f6c90c10a353692fd8aa8ff752fdbe\n. Fixed, please merge with https://github.com/tarantool/tarantool/commit/091bcc7bd10e2896de4b81370a3dfba82389acd7\n. Added, please merge with https://github.com/tarantool/tarantool/commit/eddb51b509f56420086d9166558c631d51673904\n. Fixed at https://github.com/tarantool/tarantool/commit/5f53741dd56d4ba55b2e07e7d9abd06574eac1fd\n. Please merge with master.\n. Please merge with https://github.com/tarantool/tarantool/commit/e61d67f71149070fc5655fc9123cb32a1a84c6fd\n. Please review and merge https://github.com/tarantool/tarantool/commit/28c77e97e2dff5596579246d4a9c4502000d1d77\n. ```\napt-get install libmysqlclient18=5.5.35+dfsg-1ubuntu1\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nlibmysqlclient18 is already the newest version.\nlibmysqlclient18 set to manually installed.\n0 upgraded, 0 newly installed, 0 to remove and 1 not upgraded.\nroot@rtb:/srv/banner# apt-cache policy libmysqlclient18\nlibmysqlclient18:\n  Installed: 5.5.35+dfsg-1ubuntu1\n  Candidate: 5.5.38-0ubuntu0.14.04.1\n  Version table:\n     5.5.38-0ubuntu0.14.04.1 0\n        500 http://mirror.corbina.net/ubuntu/ trusty-updates/main amd64 Packages\n        500 http://mirror.corbina.net/ubuntu/ trusty-security/main amd64 Packages\n *** 5.5.35+dfsg-1ubuntu1 0\n        500 http://mirror.corbina.net/ubuntu/ trusty/main amd64 Packages\n        100 /var/lib/dpkg/status\ngdb tarantool\nGNU gdb (Ubuntu 7.7-0ubuntu3.1) 7.7\nCopyright (C) 2014 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/.\nFind the GDB manual and other documentation resources online at:\nhttp://www.gnu.org/software/gdb/documentation/.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from tarantool...done.\n(gdb) r\nStarting program: /usr/bin/tarantool\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n/usr/bin/tarantool: version 1.6.3-321-gf802d3d\ntype 'help' for interactive help\n[New Thread 0x7ffff57ff700 (LWP 5966)]\ntarantool> box.cfg{}\n2014-09-11 10:34:10.947 [5962] main/101/interactive C> version 1.6.3-321-gf802d3d\n2014-09-11 10:34:10.948 [5962] main/101/interactive C> log level 5\n2014-09-11 10:34:10.952 [5967] main/101/spawner C> initialized\n2014-09-11 10:34:10.953 [5962] main/101/interactive I> mapping 1073741824 bytes for a shared arena...\n2014-09-11 10:34:10.953 [5962] main/101/interactive I> start sophia recover\n[New Thread 0x7ffff4ffe700 (LWP 5968)]\n[New Thread 0x7fffafbff700 (LWP 5969)]\n[New Thread 0x7fffaf3fe700 (LWP 5970)]\n[New Thread 0x7fffaebfd700 (LWP 5971)]\n[New Thread 0x7fffae3fc700 (LWP 5972)]\n2014-09-11 10:34:10.964 [5962] main/101/interactive I> complete\n[New Thread 0x7fffadbfb700 (LWP 5973)]\n2014-09-11 10:34:10.970 [5962] main/101/interactive I> recovery start\n2014-09-11 10:34:10.971 [5962] main/101/interactive I> recovering from `./00000000000000000000.snap'\n[New Thread 0x7fffad3fa700 (LWP 5974)]\n2014-09-11 10:34:10.986 [5962] main/101/interactive I> ready to accept requests\n2014-09-11 10:34:10.986 [5962] main/102/snap_daemon I> started\n\n...\ntarantool> require(\"box.net.sql\")\n\ntrue\n...\n\ntarantool> require(\"box.net.mysql\")\n\ntrue\n...\n\ntarantool> dbh = box.net.sql.connect('mysql', '127.0.0.1', 9306, 'root', '', '')\n[New Thread 0x7fffacbf9700 (LWP 5975)]\n[Thread 0x7fffacbf9700 (LWP 5975) exited]\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7ffff57ff700 (LWP 5966)]\n0x00007ffff4319e2a in my_stat () from /usr/lib/x86_64-linux-gnu/libmysqlclient.so.18\n(gdb) thread apply all bt\nThread 9 (Thread 0x7fffad3fa700 (LWP 5974)):\n0  0x00007ffff7982414 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib/x86_64-linux-gnu/libpthread.so.0\n1  0x00000000004270d4 in wal_writer_pop (writer=writer@entry=0x7b7820 , input=input@entry=0x7fffad3f5e30)\nat /tmp/buildd/tarantool-1.6.3+321+gf802d3d+20140910+2149/src/box/recovery.cc:907\n\n2  0x000000000042725a in wal_writer_thread (worker_args=0x7dc6d0) at /tmp/buildd/tarantool-1.6.3+321+gf802d3d+20140910+2149/src/box/recovery.cc:1045\n3  0x00007ffff797e182 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\n4  0x00007ffff6a77fbd in clone () from /lib/x86_64-linux-gnu/libc.so.6\nThread 8 (Thread 0x7fffadbfb700 (LWP 5973)):\n0  0x00007ffff6f62b42 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1\n1  0x00007ffff6f6135e in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1\n2  0x00007ffff797e182 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\n3  0x00007ffff6a77fbd in clone () from /lib/x86_64-linux-gnu/libc.so.6\nThread 7 (Thread 0x7fffae3fc700 (LWP 5972)):\n0  0x00007ffff79827ce in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib/x86_64-linux-gnu/libpthread.so.0\n1  0x00000000004699a8 in sr_threadwait_tm (t=0x7da700, secs=1) at rt/sr_thread.c:64\n2  0x000000000045e6f9 in se_processwait_timeout (p=0x7da700, secs=1) at env/se_process.h:39\n3  0x000000000045e980 in se_scheduler (arg=0x7da700) at env/se.c:50\n4  0x00007ffff797e182 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\n5  0x00007ffff6a77fbd in clone () from /lib/x86_64-linux-gnu/libc.so.6\nThread 6 (Thread 0x7fffaebfd700 (LWP 5971)):\n0  0x00007ffff7982414 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib/x86_64-linux-gnu/libpthread.so.0\n1  0x0000000000469928 in sr_threadwait (t=0x7da460) at rt/sr_thread.c:52\n2  0x000000000045e6d7 in se_processwait (p=0x7da460) at env/se_process.h:34\n3  0x000000000045e86c in se_compaction (arg=0x7da460) at env/se.c:26\n4  0x00007ffff797e182 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\n5  0x00007ffff6a77fbd in clone () from /lib/x86_64-linux-gnu/libc.so.6\nThread 5 (Thread 0x7fffaf3fe700 (LWP 5970)):\n0  0x00007ffff7982414 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib/x86_64-linux-gnu/libpthread.so.0\n1  0x0000000000469928 in sr_threadwait (t=0x7da1c0) at rt/sr_thread.c:52\n2  0x000000000045e6d7 in se_processwait (p=0x7da1c0) at env/se_process.h:34\n3  0x000000000045e86c in se_compaction (arg=0x7da1c0) at env/se.c:26\n4  0x00007ffff797e182 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\n5  0x00007ffff6a77fbd in clone () from /lib/x86_64-linux-gnu/libc.so.6\n---Type  to continue, or q  to quit---\nThread 4 (Thread 0x7fffafbff700 (LWP 5969)):\n0  0x00007ffff7982414 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib/x86_64-linux-gnu/libpthread.so.0\n1  0x0000000000469928 in sr_threadwait (t=0x7d9f20) at rt/sr_thread.c:52\n2  0x000000000045e6d7 in se_processwait (p=0x7d9f20) at env/se_process.h:34\n3  0x000000000045e86c in se_compaction (arg=0x7d9f20) at env/se.c:26\n4  0x00007ffff797e182 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\n5  0x00007ffff6a77fbd in clone () from /lib/x86_64-linux-gnu/libc.so.6\nThread 3 (Thread 0x7ffff4ffe700 (LWP 5968)):\n0  0x00007ffff7982414 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib/x86_64-linux-gnu/libpthread.so.0\n1  0x0000000000469928 in sr_threadwait (t=0x7d9c80) at rt/sr_thread.c:52\n2  0x000000000045e6d7 in se_processwait (p=0x7d9c80) at env/se_process.h:34\n3  0x000000000045e86c in se_compaction (arg=0x7d9c80) at env/se.c:26\n4  0x00007ffff797e182 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\n5  0x00007ffff6a77fbd in clone () from /lib/x86_64-linux-gnu/libc.so.6\nThread 2 (Thread 0x7ffff57ff700 (LWP 5966)):\n0  0x00007ffff4319e2a in my_stat () from /usr/lib/x86_64-linux-gnu/libmysqlclient.so.18\n1  0x00007ffff4312042 in ?? () from /usr/lib/x86_64-linux-gnu/libmysqlclient.so.18\n2  0x00007ffff43123f0 in ?? () from /usr/lib/x86_64-linux-gnu/libmysqlclient.so.18\n3  0x00007ffff7983a90 in pthread_once () from /lib/x86_64-linux-gnu/libpthread.so.0\n4  0x00007ffff4312989 in get_charset_by_csname () from /usr/lib/x86_64-linux-gnu/libmysqlclient.so.18\n5  0x00007ffff42fc277 in mysql_init_character_set () from /usr/lib/x86_64-linux-gnu/libmysqlclient.so.18\n6  0x00007ffff42fd140 in mysql_real_connect () from /usr/lib/x86_64-linux-gnu/libmysqlclient.so.18\n7  0x00007ffff5c50ec1 in ?? () from ./box/net/mysql.so\n8  0x000000000048e6f7 in coeio_custom_cb (req=0x7e4f10) at /tmp/buildd/tarantool-1.6.3+321+gf802d3d+20140910+2149/src/coeio.cc:134\n9  0x00000000004c7114 in eio_execute (req=0x7e4f10, self=0x7d9310) at /tmp/buildd/tarantool-1.6.3+321+gf802d3d+20140910+2149/third_party/libeio/eio.c:2475\n10 etp_proc (thr_arg=) at /tmp/buildd/tarantool-1.6.3+321+gf802d3d+20140910+2149/third_party/libeio/eio.c:2211\n11 0x00007ffff797e182 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\n12 0x00007ffff6a77fbd in clone () from /lib/x86_64-linux-gnu/libc.so.6\nThread 1 (Thread 0x7ffff7fec780 (LWP 5962)):\n0  0x00007ffff6a78653 in epoll_wait () from /lib/x86_64-linux-gnu/libc.so.6\n1  0x00000000004c11c8 in epoll_poll (loop=0x7d3fe0 , timeout=)\nat /tmp/buildd/tarantool-1.6.3+321+gf802d3d+20140910+2149/third_party/libev/ev_epoll.c:153\n\n2  0x00000000004c351a in ev_run (loop=0x7d3fe0 , flags=0) at /tmp/buildd/tarantool-1.6.3+321+gf802d3d+20140910+2149/third_party/libev/ev.c:3143\n3  0x0000000000420404 in main (argc=1, argv=) at /tmp/buildd/tarantool-1.6.3+321+gf802d3d+20140910+2149/src/tarantool.cc:630\n(gdb) q\nA debugging session is active.\nInferior 1 [process 5962] will be killed.\n\nQuit anyway? (y or n) y\n```\n. Also, if you have an url which contains '{}\"' and etc, you will have a parse error. For \" that I converted symbols to %22 and etc\n. I think https://github.com/tarantool/tarantool/commit/2f2b585269804e5455c76705aba6d45b407e3d3b is more well for that task.\n. Decimal implementation in python is good, you can see links below:\nPEP 327\ndecimal\n. Commit with fix https://github.com/tarantool/tarantool/commit/38a5d8e725597ce1d820fd782df4a4bee1ff3024\n. Please review and merge https://github.com/tarantool/tarantool/commit/f1bf9af40b747475f9f5d1a04771c30e29d37ca7\n. Fixed in https://github.com/tarantool/tarantool/commit/ccdd1538fc382c7d30e33c6c64dd32e2f1b7e203\n. Need to link with https://github.com/tarantool/http/issues/8\n. I think tarantool/http module have to support extensions/modules to expand functionality, and then write a module which will support websocket.\n. We also can porting that code on tarantool https://github.com/openresty/lua-resty-websocket\n. If use:\njson = require 'json'\njson.encode({x=json.NULL})\nit works, but why it not compatible with cjson?\n. Yes, I suggest that is good way to use json.null. Because people might used to cjson early and have a code which they might to wish port on tarantool. \n. Not absolutly, i suggest to use :get() which is mean one returned tuple. That is (like SQL's WHERE):\nlua\nfor _, k in  box.space.test.index.oid:pairs(111, 'test', {iter = EQ}) do\nprint(k)\nend\n. Please merge.\n. I think FreeBSD related to OSX crash.\n. Please, review and merge.\n. I think is not good idea, more well use like ipython:\n```\nKeyboardInterrupt\n\n\n\nKeyboardInterrupt\nKeyboardInterrupt\nKeyboardInterrupt\nprint \"123\"\n123\nprint \"123\"\nKeyboardInterrupt\n```\n\n\n\nctrl+c is clean line and not close shell. To close shell more good way to use ctrl+d.\nIf it's possible to good way add that in configuration ~/.tarantool than use that always.\n. This code will crash tarantool:\n```\n!/usr/bin/env tarantool\nbox.cfg{slab_alloc_arena=0.2}\nhosts = box.space.hosts\nif not hosts then\n    hosts = box.schema.create_space('hosts')\n    hosts:create_index('primary',\n            {parts = {1, 'STR'}})\nend\nlocal function handler(self)\n    local host = self.peer.host\n    local response = {\n        host = host;\n        counter = hosts:inc(host);\n    }\n    return self:render{ json = response }\nend\nhttpd = require('http.server')\nserver = httpd.new('127.0.0.1', 8080)\nserver:route({ path = '/' }, handler)\nserver:start()\nprint('CRASH_')\ncrash = httpd.new('8.8.8.8', 8080)\ncrash:route({ path = '/' }, handler)\ncrash:start()\n```\n. benagricola, ProFi based on sytemtap or dtrace. Unfortunately my branch with dtrace has deleted. It might have a lot time to make that again.\n. I have just tested lua versions:\n```\nLuaJIT 2.0.3 -- Copyright (C) 2005-2014 Mike Pall. http://luajit.org/\nJIT: ON CMOV SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse\n\nrequire('crash')\nstdin:1: module 'crash' not found:\n    no field package.preload['crash']\n    no file './crash.lua'\n    no file '/usr/local/share/luajit-2.0.3/crash.lua'\n    no file '/usr/local/share/lua/5.1/crash.lua'\n    no file '/usr/local/share/lua/5.1/crash/init.lua'\n    no file './crash.so'\n    no file '/usr/local/lib/lua/5.1/crash.so'\n    no file '/usr/local/lib/lua/5.1/loadall.so'\nstack traceback:\n    [C]: in function 'require'\n    stdin:1: in main chunk\n    [C]: at 0x004040b0\n```\n\n```\nLua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio\n\nrequire('crash')\nstdin:1: module 'crash' not found:\n    no field package.preload['crash']\n    no file './crash.lua'\n    no file '/usr/local/share/lua/5.1/crash.lua'\n    no file '/usr/local/share/lua/5.1/crash/init.lua'\n    no file '/usr/local/lib/lua/5.1/crash.lua'\n    no file '/usr/local/lib/lua/5.1/crash/init.lua'\n    no file './crash.so'\n    no file '/usr/local/lib/lua/5.1/crash.so'\n    no file '/usr/local/lib/lua/5.1/loadall.so'\nstack traceback:\n    [C]: in function 'require'\n    stdin:1: in main chunk\n    [C]: ?\n```\n\n```\nLua 5.2.3  Copyright (C) 1994-2013 Lua.org, PUC-Rio\n\nrequire('crash')\nstdin:1: module 'crash' not found:\n    no field package.preload['crash']\n    no file '/usr/local/share/lua/5.2/crash.lua'\n    no file '/usr/local/share/lua/5.2/crash/init.lua'\n    no file '/usr/local/lib/lua/5.2/crash.lua'\n    no file '/usr/local/lib/lua/5.2/crash/init.lua'\n    no file './crash.lua'\n    no file '/usr/local/lib/lua/5.2/crash.so'\n    no file '/usr/local/lib/lua/5.2/loadall.so'\n    no file './crash.so'\nstack traceback:\n    [C]: in function 'require'\n    stdin:1: in main chunk\n    [C]: in ?\n^D\n```\n. Tarantool chrashes when run itself by script. If use console, it correct handle errors:\n\n```\n\ntarantool\nFailed to set locale to C.UTF-8\ntarantool: version 1.6.4-612-gc140c36\ntype 'help' for interactive help\ntarantool> box.cfg{slab_alloc_arena=0.1}\n2015-04-17 11:40:16.108 [19699] main/101/interactive C> version 1.6.4-612-gc140c36\n2015-04-17 11:40:16.108 [19699] main/101/interactive C> log level 5\n2015-04-17 11:40:16.108 [19699] main/101/interactive I> mapping 107374184 bytes for a shared arena...\n2015-04-17 11:40:16.109 [19699] main/101/interactive I> recovery start\n2015-04-17 11:40:16.109 [19699] main/101/interactive I> recovering from `./00000000000000000000.snap'\n2015-04-17 11:40:16.113 [19699] main/101/interactive I> ready to accept requests\n\n\n...\ntarantool> require('crash')\n\nerror: \"module 'crash' not found:\\n\\tno field package.preload['crash']\\n\\tno file\n    './crash.lua'\\n\\tno file './crash/init.lua'\\n\\tno file '/home/vg/.luarocks/share/lua/5.1/crash.lua'\\n\\tno\n    file '/home/vg/.luarocks/share/lua/5.1/crash/init.lua'\\n\\tno file '/home/vg/.luarocks/share/lua/crash.lua'\\n\\tno\n    file '/home/vg/.luarocks/share/lua/crash/init.lua'\\n\\tno file '/home/vg/opt/share/tarantool/crash.lua'\\n\\tno\n    file '/home/vg/opt/share/tarantool/crash/init.lua'\\n\\tno file './crash.lua'\\n\\tno\n    file '/usr/local/share/luajit-2.0.3/crash.lua'\\n\\tno file '/usr/local/share/lua/5.1/crash.lua'\\n\\tno\n    file '/usr/local/share/lua/5.1/crash/init.lua'\\n\\tno file './crash.so'\\n\\tno file\n    '/home/vg/.luarocks/lib/lua/5.1/crash.so'\\n\\tno file '/home/vg/.luarocks/lib/lua/crash.so'\\n\\tno\n    file '/home/vg/opt/lib/tarantool/crash.so'\\n\\tno file './crash.so'\\n\\tno file\n    '/usr/local/lib/lua/5.1/crash.so'\\n\\tno file '/usr/local/lib/lua/5.1/loadall.so'\"\n...\n\ntarantool>\n```\nSame commands, but run from script:\n```\n\ncat app.lua \n\n!/usr/bin/env tarantool\nbox.cfg{slab_alloc_arena=0.1}\nrequire('crash')\n\n./app.lua \nFailed to set locale to C.UTF-8\n2015-04-17 11:40:50.095 [19701] main/101/app.lua C> version 1.6.4-612-gc140c36\n2015-04-17 11:40:50.095 [19701] main/101/app.lua C> log level 5\n2015-04-17 11:40:50.095 [19701] main/101/app.lua I> mapping 107374184 bytes for a shared arena...\n2015-04-17 11:40:50.095 [19701] main/101/app.lua I> recovery start\n2015-04-17 11:40:50.095 [19701] main/101/app.lua I> recovering from `./00000000000000000000.snap'\n2015-04-17 11:40:50.099 [19701] main/101/app.lua I> ready to accept requests\nSegmentation fault\nCurrent time: 1429260050\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed, \nthis may fail as well\nzsh: abort (core dumped)  ./app.lua\n```\n. Build with GCC 4.8:\n\n```\n-- The C compiler identification is GNU 4.8.5\n-- The CXX compiler identification is GNU 4.8.5\n-- Check for working C compiler: /usr/local/bin/gcc48\n-- Check for working C compiler: /usr/local/bin/gcc48 -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/local/bin/g++48\n-- Check for working CXX compiler: /usr/local/bin/g++48 -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Check if the system is big endian\n-- Searching 16 bit integer\n-- Looking for sys/types.h\n-- Looking for sys/types.h - found\n-- Looking for stdint.h\n-- Looking for stdint.h - found\n-- Looking for stddef.h\n-- Looking for stddef.h - found\n-- Check size of unsigned short\n-- Check size of unsigned short - done\n-- Using unsigned short\n-- Check if the system is big endian - little endian\n-- Building for FreeBSD\n-- Performing Test HAVE_STD_C11\n-- Performing Test HAVE_STD_C11 - Success\n-- Performing Test HAVE_STD_GNU99\n-- Performing Test HAVE_STD_GNU99 - Success\n-- Performing Test HAVE_STD_CXX11\n-- Performing Test HAVE_STD_CXX11 - Success\n-- Performing Test HAVE_STD_GNUXX0X\n-- Performing Test HAVE_STD_GNUXX0X - Success\n-- Performing Test HAVE_OPENMP\n-- Performing Test HAVE_OPENMP - Success\n-- Performing Test CC_HAS_WNO_UNUSED_CONST_VARIABLE\n-- Performing Test CC_HAS_WNO_UNUSED_CONST_VARIABLE - Success\n-- Performing Test CC_HAS_WNO_UNUSED_RESULT\n-- Performing Test CC_HAS_WNO_UNUSED_RESULT - Success\n-- Performing Test CC_HAS_WNO_UNUSED_VALUE\n-- Performing Test CC_HAS_WNO_UNUSED_VALUE - Success\n-- Performing Test CC_HAS_FNO_STRICT_ALIASING\n-- Performing Test CC_HAS_FNO_STRICT_ALIASING - Success\n-- Performing Test CC_HAS_WNO_COMMENT\n-- Performing Test CC_HAS_WNO_COMMENT - Success\n-- Performing Test CC_HAS_WNO_PARENTHESES\n-- Performing Test CC_HAS_WNO_PARENTHESES - Success\n-- Performing Test CC_HAS_WNO_UNDEFINED_INLINE\n-- Performing Test CC_HAS_WNO_UNDEFINED_INLINE - Success\n-- Looking for __gcov_flush in gcov\n-- Looking for __gcov_flush in gcov - found\n-- Found Termcap: /usr/lib/libtermcap.so\n-- Found GNU readline: /usr/local/lib/libreadline.so, include dir /usr/local/include\n-- Could NOT find Sphinx (missing:  SPHINX_EXECUTABLE) \n-- checking for module 'systemd'\n--   package 'systemd' not found\n-- Looking for MAP_ANON\n-- Looking for MAP_ANON - found\n-- Looking for MAP_ANONYMOUS\n-- Looking for MAP_ANONYMOUS - found\n-- Looking for sys/time.h\n-- Looking for sys/time.h - found\n-- Looking for unwind.h\n-- Looking for unwind.h - found\n-- Looking for cpuid.h\n-- Looking for cpuid.h - found\n-- Looking for sys/prctl.h\n-- Looking for sys/prctl.h - not found\n-- Looking for O_DSYNC\n-- Looking for O_DSYNC - not found\n-- Looking for fdatasync\n-- Looking for fdatasync - not found\n-- Looking for pthread_yield\n-- Looking for pthread_yield - found\n-- Looking for sched_yield\n-- Looking for sched_yield - found\n-- Looking for memmem\n-- Looking for memmem - found\n-- Looking for memrchr\n-- Looking for memrchr - found\n-- Looking for sendfile\n-- Looking for sendfile - found\n-- Looking for open_memstream\n-- Looking for open_memstream - found\n-- Looking for fmemopen\n-- Looking for fmemopen - found\n-- Looking for funopen\n-- Looking for funopen - found\n-- Looking for fopencookie\n-- Looking for fopencookie - not found\n-- Looking for uuidgen\n-- Looking for uuidgen - found\n-- Performing Test HAVE_STRUCT_STAT_ST_MTIM\n-- Performing Test HAVE_STRUCT_STAT_ST_MTIM - Success\n-- Performing Test HAVE_STRUCT_STAT_ST_MTIMENSEC\n-- Performing Test HAVE_STRUCT_STAT_ST_MTIMENSEC - Failed\n-- Looking for __libc_stack_end in \n-- Looking for __libc_stack_end in  - not found\nCMake Warning at CMakeLists.txt:142 (message):\n  Using version from version file\n  /usr/local/FreeBSD/head/databases/tarantool16/work/tarantool-1.6.5-212-g49781b3-src/VERSION\n-- Module sources:   /usr/local/share/tarantool\n-- Module libraries: /usr/local/lib/tarantool\n-- Module includes:  /usr/local/include/tarantool\n-- Module package.path: /usr/local/share/tarantool/?.lua;/usr/local/share/tarantool/?/init.lua\n-- Module package.cpath: /usr/local/lib/tarantool/?.so\n-- Use LuaJIT includes: /usr/local/FreeBSD/head/databases/tarantool16/work/tarantool-1.6.5-212-g49781b3-src/third_party/luajit/src\n-- Use LuaJIT library: /usr/local/FreeBSD/head/databases/tarantool16/work/tarantool-1.6.5-212-g49781b3-src/third_party/luajit/src/libluajit.a\n-- Use bundled libev includes: /usr/local/FreeBSD/head/databases/tarantool16/work/tarantool-1.6.5-212-g49781b3-src/third_party/tarantool_ev.h\n-- Use bundled libev library: ev\n-- Use bundled libeio includes: /usr/local/FreeBSD/head/databases/tarantool16/work/tarantool-1.6.5-212-g49781b3-src/third_party/tarantool_eio.h\n-- Use bundled libeio library: eio\n-- Use bundled libcoro includes: /usr/local/FreeBSD/head/databases/tarantool16/work/tarantool-1.6.5-212-g49781b3-src/third_party/coro/coro.h\n-- Use bundled libcoro library: coro\n-- Use bundled libgopt includes: /usr/local/FreeBSD/head/databases/tarantool16/work/tarantool-1.6.5-212-g49781b3-src/third_party/gopt/gopt.h\n-- Use bundled libgopt library: gopt\n-- Use bundled Lua-CJSON library: cjson\n-- Use bundled Lua-YAML library: yaml\n-- Use bundled Sophia: /usr/local/FreeBSD/head/databases/tarantool16/work/tarantool-1.6.5-212-g49781b3-src/third_party/sophia/\n-- Using compiler version of bit operations\n-- \n-- Tarantool configuration is complete:\n-- \n-- VERSION: 1.6.5-212-g49781b3\n-- BUILD: FreeBSD-amd64-Rel\n-- C_COMPILER: /usr/local/bin/gcc48\n-- CXX_COMPILER: /usr/local/bin/g++48\n-- C_FLAGS:-O2 -pipe  -DLIBICONV_PLUG -fstack-protector -Wl,-rpath=/usr/local/lib/gcc48 -fno-strict-aliasing -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -std=c11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -fno-gnu89-inline\n-- CXX_FLAGS:-O2 -pipe -DLIBICONV_PLUG -fstack-protector -Wl,-rpath=/usr/local/lib/gcc48 -fno-strict-aliasing  -DLIBICONV_PLUG -Wl,-rpath=/usr/local/lib/gcc48 -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -std=c++11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -Wno-invalid-offsetof\n-- PREFIX: /usr/local\n-- MODULE_DIR: \n-- ENABLE_SSE2: \n-- ENABLE_AVX: \n-- ENABLE_GCOV: OFF\n-- ENABLE_GPROF: OFF\n-- ENABLE_VALGRIND: OFF\n-- ENABLE_TRACE: ON\n-- ENABLE_BACKTRACE: OFF (symbol resolve: False)\n-- ENABLE_BUNDLED_LUAJIT: True\n-- ENABLE_BUNDLED_LIBEV: ON\n-- ENABLE_BUNDLED_LIBEIO: ON\n-- ENABLE_BUNDLED_LIBCORO: ON\n-- ENABLE_DOC: OFF\n-- \n-- WITH_SYSTEMD=OFF\n-- \n-- To view or modify configuration results, check out CMakeCache.txt.\n-- \n-- Configuring done\n-- Generating done\nCMake Warning:\n  Manually-specified variables were not used by the project:\nCMAKE_CXX_FLAGS_RELEASE\nCMAKE_C_FLAGS_RELEASE\nCMAKE_LOCALSTATE_DIR\nCMAKE_MODULE_LINKER_FLAGS\nTHREADS_HAVE_PTHREAD_ARG\n\n-- Build files have been written to: /usr/local/FreeBSD/head/databases/tarantool16/work/tarantool-1.6.5-212-g49781b3-src\n```\nBuild fail\n[ 58%] Building C object src/box/CMakeFiles/box.dir/vclock.c.o\nIn file included from /usr/include/_ctype.h:94:0,\n                 from /usr/include/ctype.h:46,\n                 from /usr/local/FreeBSD/head/databases/tarantool16/work/tarantool-1.6.5-212-g49781b3-src/src/box/vclock.c:33:\n/usr/include/runetype.h:92:22: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'const'\n extern _Thread_local const _RuneLocale *_ThreadRuneLocale;\n                      ^\n/usr/include/runetype.h: In function '__getCurrentRuneLocale':\n/usr/include/runetype.h:96:6: error: '_ThreadRuneLocale' undeclared (first use in this function)\n  if (_ThreadRuneLocale) \n      ^\n/usr/include/runetype.h:96:6: note: each undeclared identifier is reported only once for each function it appears in\nsrc/box/CMakeFiles/box.dir/build.make:873: recipe for target 'src/box/CMakeFiles/box.dir/vclock.c.o' failed\ngmake[4]: *** [src/box/CMakeFiles/box.dir/vclock.c.o] Error 1\n. GCC49 configure log:\n```\n-- The C compiler identification is GNU 4.9.3\n-- The CXX compiler identification is GNU 4.9.3\n-- Check for working C compiler: /usr/local/bin/gcc49\n-- Check for working C compiler: /usr/local/bin/gcc49 -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/local/bin/g++49\n-- Check for working CXX compiler: /usr/local/bin/g++49 -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Check if the system is big endian\n-- Searching 16 bit integer\n-- Looking for sys/types.h\n-- Looking for sys/types.h - found\n-- Looking for stdint.h\n-- Looking for stdint.h - found\n-- Looking for stddef.h\n-- Looking for stddef.h - found\n-- Check size of unsigned short\n-- Check size of unsigned short - done\n-- Using unsigned short\n-- Check if the system is big endian - little endian\n-- Building for FreeBSD\n-- Performing Test HAVE_STD_C11\n-- Performing Test HAVE_STD_C11 - Success\n-- Performing Test HAVE_STD_GNU99\n-- Performing Test HAVE_STD_GNU99 - Success\n-- Performing Test HAVE_STD_CXX11\n-- Performing Test HAVE_STD_CXX11 - Success\n-- Performing Test HAVE_STD_GNUXX0X\n-- Performing Test HAVE_STD_GNUXX0X - Success\n-- Performing Test HAVE_OPENMP\n-- Performing Test HAVE_OPENMP - Success\n-- Performing Test CC_HAS_WNO_UNUSED_CONST_VARIABLE\n-- Performing Test CC_HAS_WNO_UNUSED_CONST_VARIABLE - Success\n-- Performing Test CC_HAS_WNO_UNUSED_RESULT\n-- Performing Test CC_HAS_WNO_UNUSED_RESULT - Success\n-- Performing Test CC_HAS_WNO_UNUSED_VALUE\n-- Performing Test CC_HAS_WNO_UNUSED_VALUE - Success\n-- Performing Test CC_HAS_FNO_STRICT_ALIASING\n-- Performing Test CC_HAS_FNO_STRICT_ALIASING - Success\n-- Performing Test CC_HAS_WNO_COMMENT\n-- Performing Test CC_HAS_WNO_COMMENT - Success\n-- Performing Test CC_HAS_WNO_PARENTHESES\n-- Performing Test CC_HAS_WNO_PARENTHESES - Success\n-- Performing Test CC_HAS_WNO_UNDEFINED_INLINE\n-- Performing Test CC_HAS_WNO_UNDEFINED_INLINE - Success\n-- Looking for __gcov_flush in gcov\n-- Looking for __gcov_flush in gcov - found\n-- Found Termcap: /usr/lib/libtermcap.so\n-- Found GNU readline: /usr/lib/libreadline.so, include dir /usr/include\n-- Could NOT find Sphinx (missing:  SPHINX_EXECUTABLE) \n-- Looking for MAP_ANON\n-- Looking for MAP_ANON - found\n-- Looking for MAP_ANONYMOUS\n-- Looking for MAP_ANONYMOUS - found\n-- Looking for sys/time.h\n-- Looking for sys/time.h - found\n-- Looking for unwind.h\n-- Looking for unwind.h - found\n-- Looking for cpuid.h\n-- Looking for cpuid.h - found\n-- Looking for sys/prctl.h\n-- Looking for sys/prctl.h - not found\n-- Looking for O_DSYNC\n-- Looking for O_DSYNC - not found\n-- Looking for fdatasync\n-- Looking for fdatasync - not found\n-- Looking for pthread_yield\n-- Looking for pthread_yield - found\n-- Looking for sched_yield\n-- Looking for sched_yield - found\n-- Looking for memmem\n-- Looking for memmem - found\n-- Looking for memrchr\n-- Looking for memrchr - found\n-- Looking for sendfile\n-- Looking for sendfile - found\n-- Looking for open_memstream\n-- Looking for open_memstream - found\n-- Looking for fmemopen\n-- Looking for fmemopen - found\n-- Looking for funopen\n-- Looking for funopen - found\n-- Looking for fopencookie\n-- Looking for fopencookie - not found\n-- Looking for uuidgen\n-- Looking for uuidgen - found\n-- Performing Test HAVE_STRUCT_STAT_ST_MTIM\n-- Performing Test HAVE_STRUCT_STAT_ST_MTIM - Success\n-- Performing Test HAVE_STRUCT_STAT_ST_MTIMENSEC\n-- Performing Test HAVE_STRUCT_STAT_ST_MTIMENSEC - Failed\n-- Looking for __libc_stack_end in \n-- Looking for __libc_stack_end in  - not found\n-- Module sources:   /usr/local/share/tarantool\n-- Module libraries: /usr/local/lib/tarantool\n-- Module includes:  /usr/local/include/tarantool\n-- Module package.path: /usr/local/share/tarantool/?.lua;/usr/local/share/tarantool/?/init.lua\n-- Module package.cpath: /usr/local/lib/tarantool/?.so\n-- Looking for bfd_init in bfd\n-- Looking for bfd_init in bfd - found\n-- Looking for cplus_demangle in iberty\n-- Looking for cplus_demangle in iberty - not found\n-- Looking for bfd.h\n-- Looking for bfd.h - not found\n-- Use LuaJIT includes: /home/vg/tarantool/third_party/luajit/src\n-- Use LuaJIT library: /home/vg/tarantool/build/third_party/luajit/src/libluajit.a\n-- Use bundled libev includes: /home/vg/tarantool/build/third_party/tarantool_ev.h\n-- Use bundled libev library: ev\n-- Use bundled libeio includes: /home/vg/tarantool/third_party/tarantool_eio.h\n-- Use bundled libeio library: eio\n-- Use bundled libcoro includes: /home/vg/tarantool/third_party/coro/coro.h\n-- Use bundled libcoro library: coro\n-- Use bundled libgopt includes: /home/vg/tarantool/build/third_party/gopt/gopt.h\n-- Use bundled libgopt library: gopt\n-- Use bundled Lua-CJSON library: cjson\n-- Use bundled Lua-YAML library: yaml\n-- Use bundled Sophia: /home/vg/tarantool/third_party/sophia/\n-- Using compiler version of bit operations\n-- \n-- Tarantool configuration is complete:\n-- \n-- VERSION: 1.6.5-212-g49781b3\n-- BUILD: FreeBSD-amd64-Debug\n-- C_COMPILER: /usr/local/bin/gcc49\n-- CXX_COMPILER: /usr/local/bin/g++49\n-- C_FLAGS: -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -std=c11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -fno-gnu89-inline -Werror\n-- CXX_FLAGS: -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -std=c++11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -Wno-invalid-offsetof -Werror\n-- PREFIX: /usr/local\n-- MODULE_DIR: \n-- ENABLE_SSE2: \n-- ENABLE_AVX: \n-- ENABLE_GCOV: OFF\n-- ENABLE_GPROF: OFF\n-- ENABLE_VALGRIND: OFF\n-- ENABLE_TRACE: ON\n-- ENABLE_BACKTRACE: ON (symbol resolve: False)\n-- ENABLE_BUNDLED_LUAJIT: True\n-- ENABLE_BUNDLED_LIBEV: ON\n-- ENABLE_BUNDLED_LIBEIO: ON\n-- ENABLE_BUNDLED_LIBCORO: ON\n-- ENABLE_DOC: OFF\n-- \n-- WITH_SYSTEMD=OFF\n-- \n-- To view or modify configuration results, check out CMakeCache.txt.\n-- \n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/vg/tarantool/build\n```\nBuild fail:\n[ 67%] Built target module_api\nScanning dependencies of target arena_mt.test\n[ 67%] Building C object test/unit/CMakeFiles/arena_mt.test.dir/arena_mt.c.o\n/home/vg/tarantool/test/unit/arena_mt.c: In function 'run':\n/home/vg/tarantool/test/unit/arena_mt.c:21:22: error: cast from pointer to integer of different size [-Werror=pointer-to-int-cast]\n  unsigned int seed = (unsigned int) pthread_self();\n                      ^\ncc1: all warnings being treated as errors\ntest/unit/CMakeFiles/arena_mt.test.dir/build.make:54: recipe for target 'test/unit/CMakeFiles/arena_mt.test.dir/arena_mt.c.o' failed\ngmake[2]: *** [test/unit/CMakeFiles/arena_mt.test.dir/arena_mt.c.o] Error 1\nCMakeFiles/Makefile2:1416: recipe for target 'test/unit/CMakeFiles/arena_mt.test.dir/all' failed\ngmake[1]: *** [test/unit/CMakeFiles/arena_mt.test.dir/all] Error 2\nMakefile:137: recipe for target 'all' failed\ngmake: *** [all] Error 2\n. Fix for build with GCC 4.9:\n```\ndiff --git a/test/unit/arena_mt.c b/test/unit/arena_mt.c\nindex b8eca23..6974fb8 100644\n--- a/test/unit/arena_mt.c\n+++ b/test/unit/arena_mt.c\n@@ -6,6 +6,7 @@\n #include \n #include \"unit.h\"\n #include \n+#include \nstruct slab_arena arena;\n struct quota quota;\n@@ -18,7 +19,7 @@ int FILL = SLAB_MIN_SIZE/sizeof(pthread_t);\n void \n run(void p attribute((unused)))\n {\n-       unsigned int seed = (unsigned int) pthread_self();\n+       unsigned int seed = pthread_getthreadid_np();\n        int iterations = rand_r(&seed) % ITERATIONS;\n        pthread_t **slabs = slab_map(&arena);\n        for (int i = 0; i < iterations; i++) {\n```\n. Good news, It probably solve issue with GCC 4.9:\n```\n\nLD_PRELOAD=/usr/local/lib/gcc49/libgomp.so ./tt.lua\n2015-07-03 15:18:27.001 [49479] main/101/tt.lua C> version 1.6.5-212-g49781b3\n2015-07-03 15:18:27.002 [49479] main/101/tt.lua C> log level 5\n2015-07-03 15:18:27.002 [49479] main/101/tt.lua I> mapping 107374184 bytes for a shared arena...\n2015-07-03 15:18:27.003 [49479] main/101/tt.lua I> recovery start\n2015-07-03 15:18:27.003 [49479] main/101/tt.lua I> recovering from `./00000000000000000000.snap'\n2015-07-03 15:18:27.012 [49479] main/101/tt.lua I> ready to accept requests\n2015-07-03 15:18:27.013 [49479] main/101/tt.lua F> /usr/home/vg/tmp/./tt.lua:5: module 'crash' not found:\n    no field package.preload['crash']\n    no file './crash.lua'\n    no file './crash/init.lua'\n    no file '/home/vg/.luarocks/share/lua/5.1/crash.lua'\n    no file '/home/vg/.luarocks/share/lua/5.1/crash/init.lua'\n    no file '/home/vg/.luarocks/share/lua/crash.lua'\n    no file '/home/vg/.luarocks/share/lua/crash/init.lua'\n    no file '/home/vg/opt/share/tarantool/crash.lua'\n    no file '/home/vg/opt/share/tarantool/crash/init.l\ncat tt.lua \n\n!/usr/bin/env tarantool\nbox.cfg{ slab_alloc_arena = 0.1 }\nrequire('crash')\n```\n. Branch 786-fix_build_gcc49 with build fix.\n. I will wait clang fix because FreeBSD version only depended by GCC 4.9 which so flat.\n. I think cvs has to has export too.\n. If implement it with (7) inotify. Tarantool will lost support all OS instead Linux.\n. Good variants, but who will do all variants for that case?\n. We also can try to use that library https://github.com/dmatveev/libinotify-kqueue on OSX and FreeBSD.\n. Please merge https://github.com/tarantool/tarantool/commit/a337efd821f290b415038c01e1689ffa895db26f\n. FreeBSD\n```\npkg update \npkg install tarantool\nor\nmake -C /usr/ports/databases/tarantool install clean\n```\n. Please merge branch gh-1019-gcc_build_FreeBSD \n. That is related to https://github.com/tarantool/tarantool/issues/797 because UDP Api  has changed and not fully ported on 1.6.X\n. I seem that solution should involve signals handling and give opportunity to define some actions on signals.. Yeah, a lot MIPS processors, btw need to use quemu with mips 64 bit emulation. FreeBSD has automation of process to build packages on arm/mips via poudriere.\n. Moved to https://github.com/tarantool/doc/issues/91\n. Moved to https://github.com/tarantool/doc/issues/90\n. I seem tarantoolctl should extended by user scripts via configuration. For example we have a script:\nlua\nfunction xxx(self, ...)\n    for k, v in pairs({...}) do\n        print(k, v)\n    end\nend\nWhich will call like tarantooctl xxx 1 2 3 4 and do your code.\n. Please review and merge that patch.. Swift can not resolve some say commands from say.h like any others tarantool.c because it is macros say.h.. I need box.info.uuid, box.info.replication, box.info.cluster, box.info.uptime at the moment and fast access to that values without handling Lua api by swift.  (i discussed with that question with @tonyfreeman before make that request).. Problem is implementation JWT server side on tarantool. While making signature of header and payload you will get incorrect signature. JWT.io has debugger to check your signature and data in requests. For example, if you have more than one backends and pass through token to python backend which has generated by tarantool. Token will invalid in process of validation.. @bigbes Hmmm.. I seem you are missed with task. This issue isn't related to https://github.com/tarantool/tarantool/issues/2479 where need to add support to trim paddings.. It even doesn't work with the lo device\nox.cfg {\n    listen = '127.0.0.1:3301',\n    memtx_memory = 134217728,\n    checkpoint_interval = 3600,\n    checkpoint_count = 3,\n    force_recovery = true,\n}\nTarantool version is 1.7.6-9-g4e960f7\n2017-11-23 17:23:44.835 [1202] main/101/test evio.cc:339 !> SystemError can't resolve uri for bind, called on fd -1: Success\n2017-11-23 17:23:44.836 [1202] main/101/test F> can't initialize storage: can't resolve uri for bind, called on fd -1. Works for me now\n[Unit]\nDescription=Tarantool Database Server\nAfter=network.target\nRequires=network-online.target\nDocumentation=man:tarantool(1). So old, no need more.. Might more better add that function to clock module? . I need it but it might conflict with this https://github.com/tarantool/tarantool/issues/2485. @locker I didn't try to update, because tarantool had an issue with schema after adding new features and drivers can not load schema from the server. I still stay on that version to that deploy. @rtsisyk knows that issues with clients and fixed.\nUPDATE:\nYou can reproduce issue if you configure tarantool with small amount of memory. Example might contain 2 M<-> tarantools and memory limit to memtx to 100mb or less. You must write data to two nodes until memory reach limit and stats will show like that on both instances:\nid: 5\n      uuid: de299ab3-826d-4b27-a53e-9adb4e269a4e\n      lsn: 55535905\n      upstream:\n        status: follow\n        idle: 386303.5813904\n        message: Failed to allocate 290 bytes in slab allocator for memtx_tuple\n        lag: 0.0074071884155273\n      downstream:\n        vclock: {2: 149079, 5: 55563085, 4: 11700190, 7: 6273930, 1: 149116, 8: 164,\n          9: 16581740}\nAfter you have to continue write to both tarantools and do snapshot in the same time.  (i actually have limit to 10 snapshots and save every 3600s). When you will see a lot snapshots and xlogs in dir, you have to shutdown one of the M<->M instances and increase limit of memory +100 mb as example, and run it. It will call issue like this:\n9:\n      id: 9\n      uuid: 21880fe5-fae6-4ff1-ae8d-4660f711b4fe\n      lsn: 16581739\n      upstream:\n        status: stopped\n        idle: 197.67536700703\n        message: 'Missing .xlog file between LSN 91212953 {1: 149116, 2: 149079, 4:\n          11700190, 5: 56358735, 7: 6273930, 8: 164, 9: 16581739} and 90423362 {1:\n          149116, 2: 149079, 4: 11700190, 5: 55535904, 7: 6273930, 8: 164, 9: 16614979}'\nNot possible to fix without removing all snashots from one node and boostrap from scratch new one node. I have more info from tarantool channel to test option in this case. If i'll get the issue again i check new option to resolve my troubles with replication.. It also related to #2413, #2485, #2340. Users #2974, #1728 issues. Main issue with BITSET is not enough documentation with real world use cases to understand that index.. Is work to you?\n```\ntarantool> x =p.pack('L', 9223372036854775807)\n\n...\ntarantool> p.unpack('L', x)\n\n\nerror: 'pickle.unpack: unsupported format specifier ''L'''\n...\n```. I seem, that is related to #2471. Main issue is using hombrew installed libs instead system. By default curl complied without openssl, issue might solved by recompile curl:\n\nbrew upgrade --with-openssl curl\nI thing more better use system curl and etc libraries more as possible than homebrew or optionally defined homebrew libraries to link.. Yes, I updated to latest tarantool version in repository 1.7.6.19.g9f35a12-1, but still don't understand where is package 1.7.7 with fixes.\nI seem that patch need to backport into 1.7.6(stable) https://github.com/tarantool/tarantool/commit/be558f206cb92c3888ce30901c1ca46ca4d21215\n1.7.7 is actually 1.9 branch.. n = nc_scnprintf(mbuf->last, IPROTO_GREETING_SIZE + 1,\n                     \"Tarantool %-20s %-32s\\n%-63s\\n\",\n                     \"1.6.0\", \"(\"PACKAGE_STRING\")\", base64buf);. ",
    "esha-": "Also tests fails (tarantool 1.5 stable):\nbox/configuration.test\nbox/lua.test\nbox/lua_box_uuid.test\nbox/session.storage.test\nbox/session.test\nbox/socket.test\nmodule/sophia.test\n. Now we have try.tarantool alpha.\nhttp://try.tarantool.org/\n. binutils-devel are installed\nClosed\n. Confirmed\n. Fixed\n. closed\n. Anatol, which version of compiler do you use?\n. fixed\n. Now, you can \nbrew install https://raw.githubusercontent.com/tarantool/tarantool/master/extra/tarantool.rb\nhttps://github.com/tarantool/tarantool/blob/master/README.MacOSX\n. done\n. not supported static\nclose\n. /Users/esh/temp_tarantool/tarantool/src/fiob.c:314:14: warning: incompatible pointer types assigning to\n      'int (*)(void *, char *, int)' from 'int (void *, const char *, int)' [-Wincompatible-pointer-types]\n        f->io.write     = fiob_write;\n                        ^ ~~~~~~~~~~\n/Users/esh/temp_tarantool/tarantool/src/fiob.c:321:22: warning: incompatible pointer types passing\n      'int (*)(void *, char *, int)' to parameter of type 'int (*)(void *, const char *, int)'\n      [-Wincompatible-pointer-types]\n                       f->io.read, f->io.write, f->io.seek, f->io.close);\n                                   ^~~~~~~~~~~\n/usr/include/stdio.h:469:24: note: passing argument to parameter here\n                 int (*)(void *, const char *, int),\n                       ^\n2 warnings generated.\n[ 41%] Building CXX object src/CMakeFiles/core.dir/ffisyms.cc.o\n[ 41%] Building CXX object src/CMakeFiles/core.dir/lua/init.cc.o\n/Users/esh/temp_tarantool/tarantool/src/lua/init.cc:502:29: error: use of undeclared identifier 'basename'\n        const char *title = path ? basename(path) : \"interactive\";\n                                   ^\n1 error generated.\nmake[2]: *** [src/CMakeFiles/core.dir/lua/init.cc.o] Error 1\nmake[1]: *** [src/CMakeFiles/core.dir/all] Error 2\nmake: *** [all] Error 2\n. No feedback for more than a month\n. Added tests in test/app \n. In progress https://github.com/tarantool/microb/wiki\n. fixed\nhttps://github.com/tarantool/try/commit/1078fac2284b6921ce6344ae6af9d510f27220b4\n. ",
    "sir-Gollum": "\u0412\u0435\u0440\u0441\u0438\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0435: \n 1.5.1-95-gfff2d17\n 1.5.1-66 \n\u0438, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435.\n. ",
    "monolithed": "+1 \n```\n\u279c tarantar --version\n\u279c tarantool_box --version\nTarantool 1.5.1-157-gc55247e\nTarget: Darwin-x86_64-None\nBuild options: cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/Cellar/tarantool/1.5.1 -DENABLE_STATIC=OFF -DENABLE_TRACE=ON -DENABLE_BACKTRACE=OFF -DENABLE_CLIENT=true\nCompiler: /usr/local/Library/ENV/4.3/cc /usr/local/Library/ENV/4.3/c++\nC_FLAGS: -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -msse2 -std=c11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing\nCXX_FLAGS: -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -msse2 -std=c++11 -fno-rtti -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing\n```\n. ",
    "whalebot-helmsman": "Where is no binaries for tarantool-sophia-module in master\n. It is great, thank you\n. Some progress?\n. Sorry, pinged the wrong issue, want to ping https://github.com/tarantool/tarantool/issues/95\n. ",
    "daurnimator": "__gc should set the contents to NULL; lua_checktuple should be silent if contents is NULL\n. > socket.iowait() without fd sounds a little bit strange for me.\n\nCould you please describe in which cases you want to use just timer?\n\nConvenience :)\nIf fd is nil or -1, it's nice to fall back to just doing a sleep.\n. btw I noticed in your refactor: I don't think timeout is optional any more?\nShould probably use luaL_optnumber (L, 3, HUGE_VAL) instead.\n. > socket.iowait(nil, nil, timeout) doesn't look nice for me. There is fiber.sleep(timeout) which actually uses ev_timer under the hood. I don't think that one function can fit all bindings to event machine.\nCode like this will be common to write (wrapped up in a library):\nlua\nlocal res\nwhile true do\n   local err, errno\n   res, err, errno = someobject:operation()\n   if res ~= nil then\n       break\n   elseif errno ~= EAGAIN then\n       return nil, err, errno\n   end\n   socket.iowait(someobject:pollfd(), someobject:events(), someobject:timeout())\nend\nWhere depending on runtime envitonment; :pollfd() might be nil. (or :events() might be empty!)\nAn example: tailing a group of files. If there is a file on the local file system, you can have an inotify file descriptor to wait for events on. However if the files are only on an NFS mounted file system, you need to fall back to a timeout only. In this sense: as you add and remove files from the \"watch\" set, the :pollfd() may appear/disappear.\nBy allowing the fd argument to be nil you don't have to add local variables and an if around every socket.iowait call.\n. > Done\nI'd simplify the check: \n- make all arguments optional.\n- if fd is nil or -1 or events is nil or 0 or the empty string, you don't actually need to watch the fd (just sleep instead).\n  - e.g. I have had situations before where pollfd is valid, but events is 0 because I'm not interested in any events this step/loop.\n  - Using the \"watch a group of files\" example from before, I wouldn't be suprised at code like socket.iowait(myobject:getfd(), \"r\", myobject:gettimeout()) in which fd is nil but events is valid (because it's hard-coded).\n- if timeout is nil default to no timer/infinite timeout\n- if timeout is <=0 don't error; just yield the current slice to give other threads a turn\n  - e.g. you don't want things to fail if you do logic like: socket.iowait(myfd, \"r\", deadline - now()) => timeout may end up being negative due to a deadline in the past.\n. > Could you please add more example how to use cqueues with Tarantool to your documentation?\n\"your documentation\" where do you mean?\nWith e.g. luv I made a PR into their repo with short examples. see cqueues-main.lua/cqueues-slave.lua in https://github.com/luvit/luv/tree/master/examples\n. > iowait(fd, nil, timeout) \nI see this as equivalent to: poll((struct pollfd*)(struct pollfd[]){{.fd=fd,.events=0}}, 1, ceil(timeout*1000))\n\nand iowait(nil, 'rw', timeout) are arguable.\n\nThis one I don't care about as much. But I feel like having all arguments being optional is simpler to code+understand the checking for this condition and throwing an error.\n\n-1 is invalid fd which must not be added to the event machine. Lehman has an assertion for this case in libev and I completely agree with him on that point. 0 is valid file descriptor (usually STDIN), therefore zero must not be used as a special value.\n\nI think you misunderstood what I said. -1 is an invalid descriptor and should not ever be passed to the underlying event loop.\nI was saying to skip the call (don't throw an error) to add the fd to the event loop if any of the following are true:\n- fd is nil\n- fd is -1\n- events is 0 \n\n0 is valid file descriptor (usually STDIN), therefore zero must not be used as a special value.\n\nYes. this is what I was saying in https://github.com/tarantool/tarantool/commit/8b2e48c5c5ff684e176bae43ec31905cde66e90c#commitcomment-15041247\nPlease fix it :)\n. Great; thanks!\n. > @wahern and @daurnimator, what do you think about it?\nThe API is similar (but not totally the same e.g. result vs finish, luaossl takes a vararg of strings) as luaossl's \"openssl.hmac\" module.\nAs you note: luaossl does offer most of the functionality that OpenSSL is capable of (including everything added in this PR), I'm not sure why you would choose to maintain your own implementation vs using luaossl's: but that is up to you.\n\n.... especially important for AWS V4 auth.\n\nOh? I'm curious what you might be doing with AWSv4 auth.\nI was recently looking into implementing/forking an AWS library for lua (using https://github.com/daurnimator/lua-http) for a few things that use awsv4 including Kinesis and S3.. ",
    "Mons": "It is ok not to have V and R, because they are not standard for packing, but BER-integer (w) and string pointer (p) are extremely required.. For now I propose the following:\n```lua\ndo\n    local function tail(status, ...)\n        if not status then\n            box.rollback()\n            error((...), 2)\n        end\n        box.commit()\n        return ...\n    end\nfunction box.txn(fun, ...)\n    box.begin()\n    return tail(pcall(fun, ...))\nend\n\nend\n``. It seems there is a lack of lua/lua-gc information\nCurrently, when a problem encounters,collectgarbage('count')` is one of the diagnostic option.\nBut I'm sure, there are some hidden options, that may be exposed for diagnostics. There is nothing wrong with /usr/share/lua\nIt is absent in package.path in tarantool.\nThere is /usr/local/share/lua instead\n. To be clear: presentation (https://speakerdeck.com/3rdeden/websuckets) was written 2+ years ago.\nThe world of browsers \"slightly\" changed since that time )\nCurrent version of Chrome - 45, FF - 40, Safari - 8, Opera - 32, IE - 11. (http://browsehappy.com/)\nSo, a percent of success cases must be much bigger.\nBut I'll agree: there is still a problem with proxies, which successfully could be solved with wss://.\nAfter all: this would be very useful feature for tarantool as an app, if there would be an access to all layers of http control (http headers, cookies, basic/digest auth etc.)\n. https://github.com/Mons/tnt-package-reload\n. I propose the following:\n1. override _G.print\n2. print always is written to log\n3. every print duplicate information to every connected console. touch would be semantically correct. HTTP RFC states, that 2 headers are equivalent to single header with 2 values, separated with ,.\nSo, common approach for hash/dict is to store such headers as comma-separated values\nBut!\nSadly, cookie values could contain unquoted date with comma inside, which makes parsing not so easy. So the proposal is either to store 'set-cookie' header always as array (while other headers as comma-separated values) or to store 'set-cookie' also as raw, comma-separated single value (for those, who wants to parse it by theirselves) and also provide container with decoded value of set-cookie. Why not?\n```lua\ntarantool> local actual = { read_only = false } cfg = setmetatable({}, { __index = function(self,k) return actual[k] end, __newindex = function() error(\"Restricted\",2) end, __serialize = function() return actual end })\n\n...\ntarantool> cfg                                                                                                                                                                  ---\n- read_only: false\n...\ntarantool> cfg.read_only\n\nfalse\n...\n\ntarantool> cfg.read_only = true\n\nerror: '[string \"cfg.read_only = true\"]:1: Restricted'\n...\n. @unera, I think your ideas are not for this ticket. They are reasonably good, but create it as another ticket. YAML does support escaping\ntarantool> yaml.decode(\"---\\n- \\\"xx\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\xffx\\\"\\n\")\n\n\n\n[\"xx\\0\\x01\\x02\\x03\\x04\\x05\\x06\u00ffx\"]\n. @bigbes, yes, after some investigation I found, that hex escaping is about unicode, not raw.\nSo, closing this. Please, revert this https://github.com/tarantool/tarantool/commit/4c4c1ccbe422e1420ce0c0b36194fc61bb857ed4. \u0443 \u043c\u0435\u043d\u044f \u0435\u0441\u0442\u044c \u0438 \u0434\u043b\u044f 1.6. Strictly disagree. Please, **don't** create global and single metatable for all spaces!\nCurrently there is a possibility to add different features to different spaces\nEx: https://github.com/moonlibs/xqueue. Why to break backward compatibility, if you introduce new functionality?\nJust add metatable to space metatables (as do me)lua\nlocal superspace_mt = {}\n\nfor id,space in pairs(box.space) do\n    if type(id) == 'string' then\n        setmetatable(getmetatable(space),{ __index = superspace_mt })\n    end\nend\n```. But... You created a new one...\nSo there will be 2 of them: that works on 1.6-1.10 and that works on 1.10.1+. It seems we can't reproduce raising an error during box.cfg\nclose for now. If hostname means ip+port, then ok ). + for Mac default location should be /var/run/syslog if there is no /dev/log. I think it would be sufficient to limit output to max 1 message per second. Don't you have a look to increase default readahead size? 16Kb seems to be unreasonable small. ",
    "alyapunov": "The connected problem is that after this situation running\nlua box.select(0, 0, 99999)\nwill lead to the same crash\n. Unreproduced w/o WAL\nCan't test with WAL due to gh-434\n. I've tested it, and could not reproduce. Perhaps some other fixed covered this bug.\nWith WAL disabled:\n[  1 sec] [10 threads]  598676 req/s       0 read/s  598676 write/s  0.02 ms\n[  2 sec] [10 threads]  550202 req/s       0 read/s  550202 write/s  0.02 ms\n[  3 sec] [10 threads]  570007 req/s       0 read/s  570007 write/s  0.02 ms\n...\n[148 sec] [10 threads]  617282 req/s       0 read/s  617282 write/s  0.02 ms\n[149 sec] [10 threads]  614660 req/s       0 read/s  614660 write/s  0.02 ms\n[150 sec] [10 threads]  619199 req/s       0 read/s  619199 write/s  0.02 ms\nWith WAL enabled:\n[  1 sec] [10 threads]  285220 req/s       0 read/s  285220 write/s  0.04 ms\n[  2 sec] [10 threads]  275293 req/s       0 read/s  275293 write/s  0.04 ms\n[  3 sec] [10 threads]  331087 req/s       0 read/s  331087 write/s  0.04 ms\n...\n[148 sec] [10 threads]  286302 req/s       0 read/s  286302 write/s  0.04 ms\n[149 sec] [10 threads]  283611 req/s       0 read/s  283611 write/s  0.04 ms\n[150 sec] [10 threads]  285220 req/s       0 read/s  285220 write/s  0.04 ms\nSo I close the ticket.\n. I followed the instructions, but failed to reproduce:\n2014-09-24 17:02:17.590 [8492] main/102/leave_local_hot_standby I> recover from `./00000000000000000000.xlog'\n2014-09-24 17:02:17.590 [8492] main/102/leave_local_hot_standby I> done `./00000000000000000000.xlog'\n2014-09-24 17:02:17.590 [8492] main/102/leave_local_hot_standby I> recover from `./00000000000000000003.xlog'\n2014-09-24 17:02:17.590 [8492] main/102/leave_local_hot_standby I> done `./00000000000000000003.xlog'\n2014-09-24 17:02:17.590 [8492] main/102/leave_local_hot_standby I> recover from `./00000000000000000005.xlog'\n2014-09-24 17:02:17.590 [8492] main/102/leave_local_hot_standby recovery.cc:337 E> can't apply row: Duplicate key exists in unique index 0\n2014-09-24 17:02:17.590 [8492] main/102/leave_local_hot_standby I> done `./00000000000000000005.xlog'\n2014-09-24 17:02:17.591 [8492] main/102/leave_local_hot_standby I> ready to accept requests\n2014-09-24 17:02:17.591 [8492] main/103/snap_daemon I> started\n2014-09-24 17:02:17.591 [8492] main/101/run3 I> console: started on 127.0.0.1:33014\n2014-09-24 17:02:17.591 [8492] main C> entering the event loop\n```\nbox.stat()\n\n\nDELETE:\n    total: 0\n    rps: 0\n  SELECT:\n    total: 0\n    rps: 0\n  REPLACE:\n    total: 0\n    rps: 0\n  INSERT:\n    total: 0\n    rps: 0\n  AUTH:\n    total: 0\n    rps: 0\n  CALL:\n    total: 0\n    rps: 0\n  UPDATE:\n    total: 0\n    rps: 0\n```\n\nAnd as I could see in code, the call of void stat_cleanup(..) is inavoidable.\n. Rtsisyk, yes, such an error message would be nice\n. copy of https://github.com/tarantool/tarantool/issues/362\n. This comparison is unfair. During test:init() we create a lot of lua objects - tuples, which are cdata(s) with a pointer to tuple in tarantool. Then, in test.test2, we call box.space.banner:get(v), thus creating another temporary tuple object. Additional memory consumption leads to periodical garbage collection, and it costs very much due to lots of unreleasable objects. At the same time, test:test1 does not create additional objects (as I could see disabling garbage collection via collectgarbage(\"stop\") and observing memory consumption via collectgarbage(\"count\")) an thus does not have these troubles.\nTo make this test fair, we can modify test:test1 in such way:\ntest.test1 = function(self)\n    local cnt = 0\n    for _,v in pairs(self.t) do\n        local tuple = self.index[v]\n        local another_tuple = box.tuple.new{tuple[1]}\n        if another_tuple[1] > 0 then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\nThen the tests results seem to be identical.\nThe behaviour of tuple objects and garbage collection is a feature that should be noticed during writing stored lua functions for tarantool. Another feature is that existing (not garbage-collected) lua tuple object prevents tuple to be freed after its deletion from space, and on huge tuples this matters.\nAnother problem in this test is that we traverse a hash table in the order, that we traverse another hash table. I mean that part:\nfor _,v in pairs(self.t) do\n        local tuple = self.index[v]\nIn common case of incrementally growing key (in the 'banner' space) this loop make sequential access to memory of both self.t and self.index hash tables. In this case the performace results have nothing common with usual random access to hash table.\nBut even with the original test I failed to get 250 times difference in performace. I've tested different big sets of data, but got differences from 4 to 20. Maybe lua garbage collector work faster or called fewer times on my machine. In test:test2 performance of temporary space with on million tuples was about 500000 rps (0.5 Mrps).\n. I've made my own tests to compare performance of lua tables and tarantool temp spaces.\nFirst of all, here is sequential access to lua table:\nfunction luatabtest1()\n    local tab = {} \n    for i = 1,1000000 do\n        tab[i] = i\n    end\n    local t = os.time()\n    local res = 0\n    for j = 1,10000 do\n        for i = 1,1000000 do\n            if tab[i] > 0 then --always true\n                res = res + 1\n            end\n        end\n    end\n    t = os.time() - t\n    return res, t, (res / t / 1000000) .. \" Mrps\"\nend\n```\nluatabtest1()\n\n\n10000000000\n8\n1250 Mrps\n...\n```\n\nOmg, over 1000 000 000 rps!\nBut tarantool stores not simple numbers but tuples. Let's replace number to table in the previous test:\nfunction luatabtest2()\n    local tab = {} \n    for i = 1,1000000 do\n        tab[i] = {i}\n    end\n    local t = os.time()\n    local res = 0\n    for j = 1,2000 do\n        for i = 1,1000000 do\n            if tab[i][1] > 0 then --always true\n                res = res + 1\n            end\n        end\n    end\n    t = os.time() - t\n    return res, t, (res / t / 1000000) .. \" Mrps\"\nend\n```\nluatabtest2()\n\n\n2000000000\n9\n222.22222222222 Mrps\n...\n```\n\nThis simple change is dramatically reduces performace, but it's still good!\nTarantool tuples are packed with msgpack wich is optimized for low memory consumption, let's test it, i'll replace lua tables with tarantool tuples:\nfunction luatabtest3()\n    local tab = {} \n    for i = 1,1000000 do\n        tab[i] = box.tuple.new({i})\n    end\n    local t = os.time()\n    local res = 0\n    for j = 1,200 do\n        for i = 1,1000000 do\n            if tab[i][1] > 0 then --always true\n                res = res + 1\n            end\n        end\n    end\n    t = os.time() - t\n    return res, t, (res / t / 1000000) .. \" Mrps\"\nend\n```\nluatabtest3()\n\n\n200000000\n10\n20 Mrps\n...\n```\n\nYeah, that costs a lot..\nOk, but what about random access? Let's roll back to the first test and randomize requested values:\nfunction luatabtest4()\n    local tab = {} \n    for i = 1,1000000 do\n        tab[i * 17] = i\n    end\n    local t = os.time()\n    local res = 0\n    for j = 1,500 do\n        for i = 1,1000000 do\n            if tab[i * 17] > 0 then --always true\n                res = res + 1\n            end\n        end\n    end\n    t = os.time() - t\n    return res, t, (res / t / 1000000) .. \" Mrps\"\nend\n```\nluatabtest4()\n\n\n500000000\n18\n27.777777777778 Mrps\n...\n```\n\nIt's almost 50 times slower than sequential access! That's the big difference.\nNow let's store tables instead of numbers:\nfunction luatabtest5()\n    local tab = {} \n    for i = 1,1000000 do\n        tab[i * 17] = {i}\n    end\n    local t = os.time()\n    local res = 0\n    for j = 1,500 do\n        for i = 1,1000000 do\n            if tab[i * 17][1] > 0 then --always true\n                res = res + 1\n            end\n        end\n    end\n    t = os.time() - t\n    return res, t, (res / t / 1000000) .. \" Mrps\"\nend\n```\nluatabtest5()\n\n\n500000000\n23\n21.739130434783 Mrps\n...\n```\n\nThe slowdown is not very big.\nNow let's store tuples instead of numbers or tables:\nfunction luatabtest6()\n    local tab = {} \n    for i = 1,1000000 do\n        tab[i * 17] = box.tuple.new({i})\n    end\n    local t = os.time()\n    local res = 0\n    for j = 1,500 do\n        for i = 1,1000000 do\n            if tab[i * 17][1] > 0 then --always true\n                res = res + 1\n            end\n        end\n    end\n    t = os.time() - t\n    return res, t, (res / t / 1000000) .. \" Mrps\"\nend\n```\nluatabtest6()\n\n\n500000000\n82\n6.0975609756098 Mrps\n...\n```\n\nSeems that storing tuples in lua table is not a good idea..\nNow let's test temporary space in sequental access:\nbox.schema.create_space('banner', {temporary=true})\nbox.space.banner:create_index('primary', {type='HASH',unique=true})\nfunction tarantest1()\n    local tab = {}\n    s = box.space.banner\n    s:truncate()\n    for i = 1,1000000 do\n        s:insert{i}\n    end\n    collectgarbage()\n    local t = os.time()\n    local res = 0\n    for j = 1,20 do\n        for i = 1,1000000 do\n            if s:get{i}[1] > 0 then --always true\n                res = res + 1\n            end\n        end\n    end\n    t = os.time() - t\n    return res, t, (res / t / 1000000) .. \" Mrps\"\nend\n```\ntarantest1()\n\n\n20000000\n15\n1.3333333333333 Mrps\n...\n```\n\nAnd with random access:\nfunction tarantest2()\n    local tab = {}\n    s = box.space.banner\n    s:truncate()\n    for i = 1,1000000 do\n        s:insert{i * 17}\n    end\n    collectgarbage()\n    local t = os.time()\n    local res = 0\n    for j = 1,20 do\n        for i = 1,1000000 do\n            if s:get{i * 17}[1] > 0 then --always true\n                res = res + 1\n            end\n        end\n    end\n    t = os.time() - t\n    return res, t, (res / t / 1000000) .. \" Mrps\"\nend\n```\ntarantest2()\n\n\n20000000\n15\n1.3333333333333 Mrps\n...\n```\n\nThe same result in both tests. That is about normal tarantool performance, over one million rps. By the way, in this test there is no difference between temporary or not temporary spaces - they are the same in-memory data structures.\nI think it is reasonable to compare resutls from luatabtest5() and luatabtest6(), wich testes random access to something like tuples, with tarantest1() or tarantest2(). In this way, tarantool spaces are 5-15 times slower that lua tables. I think that difference is ok if we remember that we compare database and simple data structure\n. Arithmetic update rules:\n0. There are 6 operations (+, -, *,&, |, ^) that may apply to a numeric tuple field with a numeric second operand. Numeric in terms of msgpack is DOUBLE, FLOAT, INT or UINT.\n1. Bit operations (&, |, ^) are only alowed on positive integers.\n2. If one of the operands is double - both of the operands are converted to double and result is double\n3. Else if one of the operands is float - both of the operands are converted to float and result is float\n4. Else - integers. Integer operands are threated as real integer, but if the result of the operation outbound ragne [INT64_MIN, UINT64_MAX] - an error is occured\n. It seems to be a luajit problem. Luajit crashes when someone creates a table with big amount of cdata objects with finalizers, tarantool tuples as an example.\nWe've delivered the problem to luajit team, and one day it'll be fixed.\nhttp://www.freelists.org/post/luajit/PANIC-in-lj-cdata-setfin-on-out-of-memory\nhttp://www.freelists.org/post/luajit/PANIC-in-lj-cdata-setfin-on-out-of-memory,1\nNow we can only suggest avoiding huge (>10^5) tables with tuples. And I also think that huge tables with tuples is always a bad idea despite of this issue is solved or not.\n. Added drop test, but is was boring: as I understand, drop could not fail\n. We've established the cause and fixed this bug.\n. done\n. Github does not support file attaching?..\nHere are logs:\nhttp://pastebin.com/G2WUJHEx\nhttp://pastebin.com/pCzERkJn\n. There are several necessary aspects\n1) If schema changes, schema_id must be changed atomically; if schema_id was changed, schema could be changed or not.\n2) schema_id of the server should be restored during restart of tarantool\n3) schema_id of the server and it's replica should be identical (if their current schema are identical)\n4) If user does not use IPROTO_SCHEMA_ID, any cpu and network overhead must be avoided.\nWe discussed the problem with rtsisyk, and discovered two solutions\n1)Use already defined global variable sc_version, but store it in header of snapshot and restore it during recover. If network request contains IPROTO_SCHEMA_ID then it should be checked, and if it is wrong, server must response with an error and current sc_version of the server. User can obtain initial sc_version by sending any request with definitely invalid IPROTO_SCHEMA_ID = 0.\n2)Add a new record to _schema space, ['schema_version', ..]. User can easy obtain it with one simple select. If network request contains IPROTO_SCHEMA_ID then it should be compared with a value in that record, raising an error on mismatch. Lua schema procedures automatically increment the schema_version, but if the user modifies schema by direct modification of system spaces, he must manually increment 'schema_version' record in the same transaction.\n. I'm on a way to fix it\n. Now if the key the updating tuple was not found, the operations is totally ignored and thus not checked for errors; and inserting tuple is not tested for compliance with the given key\n. Index arena and tuple arena merged, #996 pending\n. Now if the key the updating tuple was not found, the operations is totally ignored and thus not checked for errors; and inserting tuple is not tested for compliance with the given key\n. After latest commit my box.net.box test failes:\n```\nTEST                                            RESULT\nbox/net.box.test.lua                            Traceback (most recent call last):\n  File \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/test-run/lib/test.py\", line 115, in run\n    self.execute(server)\n  File \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/test-run/lib/tarantool_server.py\", line 82, in execute\n    result = send_command(rescom)\n  File \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/test-run/lib/tarantool_server.py\", line 57, in send_command\n    result = ts.curcon0\n  File \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/test-run/lib/tarantool_connection.py\", line 91, in call\n    return self.execute(command, silent)\n  File \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/test-run/lib/tarantool_connection.py\", line 80, in execute\n    self.opt_reconnect()\n  File \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/test-run/lib/tarantool_connection.py\", line 74, in opt_reconnect\n    self.reconnect()\n  File \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/test-run/lib/tarantool_connection.py\", line 59, in reconnect\n    self.connect()\n  File \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/test-run/lib/admin_connection.py\", line 61, in connect\n    super(AdminConnection, self).connect()\n  File \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/test-run/lib/tarantool_connection.py\", line 46, in connect\n    self.socket.connect(self.port)\n  File \"/usr/lib/python2.7/socket.py\", line 224, in meth\n    return getattr(self._sock,name)(*args)\nerror: [Errno 111] Connection refused\n[ fail ]\nTest failed! Last 10 lines of the result file:\n\n...\nnet = require('net.box')\n\n...\nc = net:new(box.cfg.listen)\n\n...\nr = c.space.test:select(nil, {limit=5000})\nbox.space.test:drop()\nLast 15 lines of Tarantool Log file:\nFatal error: Failed to run test box/net.box.test.lua: test execution aborted, reason '[Errno 111] Connection refused'. Execution aborted.\n```\nwith an error in log:\n``\ntarantool: /home/alyapunov/Work/tarantool_tmp_tmp/tarantool/src/box/iproto.cc:553: int iproto_flush(iobuf*, iproto_connection*): Assertionbegin-\n\nused < end->used' failed.\n```\n\ngdb bt:\n```\n0  0x00007fe2fddb7f79 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56\n1  0x00007fe2fddbb388 in __GI_abort () at abort.c:89\n2  0x00007fe2fddb0e36 in __assert_fail_base (fmt=0x7fe2fdf02718 \"%s%s%s:%u: %s%sAssertion `%s' failed.\\n%n\",\nassertion=assertion@entry=0x596e2a \"begin->used < end->used\", \nfile=file@entry=0x596d20 \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/src/box/iproto.cc\", line=line@entry=553, \nfunction=function@entry=0x597420 <iproto_flush(iobuf*, iproto_connection*)::__PRETTY_FUNCTION__> \"int iproto_flush(iobuf*, iproto_connection*)\") at assert.c:92\n\n3  0x00007fe2fddb0ee2 in __GI___assert_fail (assertion=0x596e2a \"begin->used < end->used\",\nfile=0x596d20 \"/home/alyapunov/Work/tarantool_tmp_tmp/tarantool/src/box/iproto.cc\", line=553, \nfunction=0x597420 <iproto_flush(iobuf*, iproto_connection*)::__PRETTY_FUNCTION__> \"int iproto_flush(iobuf*, iproto_connection*)\")\nat assert.c:101\n\n4  0x0000000000437efb in iproto_flush (iobuf=0x7fe2f08223c0, con=0x7fe2f08082d8)\nat /home/alyapunov/Work/tarantool_tmp_tmp/tarantool/src/box/iproto.cc:553\n\n5  0x0000000000438150 in iproto_connection_on_output (loop=0x7fe2ec0008c0, watcher=0x7fe2f0808320)\nat /home/alyapunov/Work/tarantool_tmp_tmp/tarantool/src/box/iproto.cc:598\n\n6  0x000000000058d16e in ev_invoke_pending (loop=0x7fe2ec0008c0) at /home/alyapunov/Work/tarantool_tmp_tmp/tarantool/third_party/libev/ev.c:2777\n7  0x000000000058e048 in ev_run (loop=0x7fe2ec0008c0, flags=0) at /home/alyapunov/Work/tarantool_tmp_tmp/tarantool/third_party/libev/ev.c:3177\n8  0x00000000004a4df8 in cord_costart_thread_func (arg=0x231c2f0) at /home/alyapunov/Work/tarantool_tmp_tmp/tarantool/src/fiber.cc:710\n9  0x00000000004a46e5 in cord_thread_func (p=0x7fe2fcc1f840) at /home/alyapunov/Work/tarantool_tmp_tmp/tarantool/src/fiber.cc:621\n10 0x00007fe2feb7e182 in start_thread (arg=0x7fe2f17ff700) at pthread_create.c:312\n11 0x00007fe2fde7c30d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111\n```\nlink to core: https://cloud.mail.ru/public/7atj/JhUHcR3xK\n. There was a test in ./test/wal_off :\nhttp://pastebin.com/5dEnbPak\nGood result is:\nhttp://pastebin.com/kgcjr7xz\nThe problem is that the test fails if some tests was runned before it. I guess it happens due to described issue.\n. The issue was originated during #952 investigation\n. The test fails with probability about 5-10%\n```\nTEST                                            RESULT\nbox/net.box.test.lua                            [ fail ]\nTest failed! Result content mismatch:\n--- box/net.box.result  Mon Aug 31 15:59:27 2015\n+++ box/net.box.reject  Tue Sep  1 10:59:02 2015\n@@ -448,7 +448,7 @@\n ...\n cn.state\n ---\n-- closed\n+- error\n ...\n cn:ping()\n ---\nLast 15 lines of Tarantool Log file:\nFatal error: Failed to run test box/net.box.test.lua: wrong test output. Execution aborted.\n```\n. Additionally, double run of the test definitely fails:\n```\nTEST                                            RESULT\nbox/net.box.test.lua                            [ pass ]\nbox/net.box.test.lua                            [ fail ]\nTest failed! Result content mismatch:\n--- box/net.box.result  Mon Aug 31 15:59:27 2015\n+++ box/net.box.reject  Tue Sep  1 11:01:36 2015\n@@ -594,7 +594,7 @@\n ...\n cn.error\n ---\n-- User 'netbox' is not found\n+- Incorrect password supplied for user 'netbox'\n ...\n cn.state\n ---\n@@ -602,9 +602,11 @@\n ...\n box.schema.user.create('netbox', { password  = 'test' })\n ---\n+- error: User 'netbox' already exists\n ...\n box.schema.user.grant('netbox', 'read, write, execute', 'universe');\n ---\n+- error: User 'netbox' already has read, write, execute access on universe 'nil'\n ...\n cn = remote:new(LISTEN.host, LISTEN.service, { user = 'netbox', password = 'test' })\n ---\nLast 15 lines of Tarantool Log file:\nFatal error: Failed to run test box/net.box.test.lua: wrong test output. Execution aborted.\n```\n. Hi,\nThanks for report,\nCould you please provide more details about the accident:\n1)how many spaces are used, what kind of indexes and number of tuples in them\n2)workload at a time of crash, probable RPS, especially modifying RPS\n3)log file for the time of crash\n. Can't reproduce\n. Script reproducing this stuff (I think it should be added to test/box/misc.test.lua:\n```\nrlim_save = ffi.new('struct rlimit')\nffi.C.getrlimit(7, rlim_save)\nrlim = ffi.new('struct rlimit')\nffi.C.getrlimit(7, rlim)\nrlim.rlim_cur = 1\nffi.C.setrlimit(7, rlim)\nd = ffi.C.open('tmp.log', 66, 511)\nd >= 0 --false\nbox.snapshot()\nffi.C.setrlimit(7, rlim_save)\nd = ffi.C.open('tmp.log', 66, 511)\nd >= 0 -- true\nffi.C.close(d)\n```\n. my backtrace:\n```\n(gdb) bt\n0  0x00007ffff67abf79 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56\n1  0x00007ffff67af388 in __GI_abort () at abort.c:89\n2  0x0000000000600ed1 in ev_syserr (msg=0x6bb258 \"(libev) error creating signal/async pipe\")\nat /home/alyapunov/Work/tarantool/third_party/libev/ev.c:1570\n\n3  0x0000000000601f35 in evpipe_init (loop=0x7fffa00008c0) at /home/alyapunov/Work/tarantool/third_party/libev/ev.c:2270\n4  0x0000000000609187 in ev_async_start (loop=0x7fffa00008c0, w=0x7ffff54220b8) at /home/alyapunov/Work/tarantool/third_party/libev/ev.c:4757\n5  0x00000000004b4350 in cord_init (name=0x61a8b1 \"snapshot\") at /home/alyapunov/Work/tarantool/src/fiber.c:604\n6  0x00000000004b44be in cord_thread_func (p=0x7ffff541fc60) at /home/alyapunov/Work/tarantool/src/fiber.c:646\n7  0x00007ffff7572182 in start_thread (arg=0x7fffb3bfc700) at pthread_create.c:312\n8  0x00007ffff687030d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111\n```\n. opened new issue gh-1353\n. It also seems that the parser got problems with parsing snap files:\nFile \"/usr/local/bin/tnt_parse\", line 108, in <module>\n    for i in log:\n  File \"/usr/local/bin/tnt_parse\", line 86, in next\n    body = self.upck.next()\n  File \"_unpacker.pyx\", line 377, in msgpack._unpacker.Unpacker.__next__ (msgpack/_unpacker.cpp:377)\n  File \"_unpacker.pyx\", line 323, in msgpack._unpacker.Unpacker._unpack (msgpack/_unpacker.cpp:323)\nValueError: Unpack failed: error = -1\n. I really think that such an error message\n- error: 'Type of first argument in the upsert request does not match index part type: expected NUM'\nwill certainly confuse the user, because first argument must be a tuple (i.e. table in lua)\nAnd I think the error message in upsert must exactly be the same, as in insert:\n- error: 'Tuple field 1 type does not match one required by operation: expected NUM'\n. The plan:\n- [ ] https://github.com/tarantool/tarantool/issues/1385 (struct tuple_id) \n- [ ] https://github.com/tarantool/tarantool/issues/1386 (tuple restructure)\n- [ ] https://github.com/tarantool/tarantool/issues/1251 (this)\nThen in any order:\n- [ ] https://github.com/tarantool/tarantool/issues/1387 (Real-time checkpointing)\n- [ ] https://github.com/tarantool/tarantool/issues/1284 (Interactive transactions)\n. I would add that QF implemented in vinyl is correct and I can explain its every line of code, QF itself is very cool data structure and could be useful somewhere else, but not in vinyl, at least not with used settings\n. Reorder members in struct PACKED sdv: uint64_t, uint32_t, uint32_t, uint8_t for better align\n. Add key size to vy_page_info\nAdd number-of-deleted records to vy_page_info\nRemove all DUP counts\n. Alternative\nbox.space.vinyl.index:io()\n--\n-IN_WRITE_THROUGHPUT: 1Mb/min\n-DISC_WRITE_THROUGHPUT : 4Mb/min\n-DISC_READ_THROUGHPUT : 7Mb/min. In terms of brainstorm\nbox.space.vinyl.index:iter_stats()\n--\nRANGE:\n  lookups:\n    total: 100\n    rps: 10\n  steps:\n    total: 100\n    rps: 10\nTXW:\n  lookups:\n    total: 100\n    rps: 10\n  steps:\n    total: 100\n    rps: 10\nCACHE:\n  lookups:\n    total: 100\n    rps: 10\n  steps:\n    total: 100\n    rps: 10\nMEM:\n  lookups:\n    total: 100\n    rps: 10\n  steps:\n    total: 100\n    rps: 10\nRUN:\n  lookups:\n    total: 100\n    rps: 10\n  steps:\n    total: 100\n    rps: 10. There is at least one case when the conflict manager in secondary index is needed\n```\ns = box.schema.space.create('test', {engine = 'vinyl', if_not_exists = true})\ni1 = s:create_index('test', {parts = {1, 'uint'}, if_not_exists = true})\ni2 = s:create_index('test2', {parts = {2, 'uint'}, if_not_exists = true})\ni = i1\npcall(box.schema.user.grant, 'guest', 'read, write, execute', 'universe')\ns:truncate()\nc1 = txn_proxy.new()\nc1:begin()\nc1(\"i2:select{20}\") -- select from secondary, found nothing\nc1(\"s:replace{10, 10}\") -- set value 10\nc2 = txn_proxy.new()\nc2:begin()\nc2(\"i2:select{10}\") -- select from secondary, found nothing\nc2(\"s:replace{10, 20}\") -- set value 20\nc1:commit() -- ok\nc2:commit() -- must be failed:\n-- it cannot be after c1 because it read nothing by 10 that was changed by c1\n-- and even before c1 because it changes 20\nI think the issue must be either closed or reformulated. Merge_iterator is not ready now for duplicated statements\nI'd put forward another way. Every range could simply hold max_lsn value. During recovery every statement finds its range and the statement must be skipped if the statement->lsn <=  the range->max_lsn and must not be skipped otherwise\n. depends on #2476. It's strange, but with cfg {wal_mode = 'none'...} I got run_count = 0\n. Is not reproducible now, must be closed\n1   range_count 1\n1   run_count   0\n2   range_count 1\n2   run_count   0\n3   range_count 1\n3   run_count   0\n4   range_count 1\n4   run_count   0\n5   range_count 1\n5   run_count   0\n. I disagree with \"incorrect\". It is correct but simplified \nIt should also remove DELETE that followed by another DELETE.\nIt also might completely replace UPSERT with REPLACE if that possible.\nEach of these could be done but is not so simple - write iterator must look to future statements to decide whether the current statement must be output or not or how\n. That will also fix a problem:\ns = box.schema.space.create('test', {engine = 'vinyl'})\ni = s:create_index('test')\ns:replace{1, 0}\ns:replace{2, 0}\nbox.snapshot()\ns:upsert({1}, {{'+', 2, 1}})\ns:upsert({2}, {{'+', 2, 1}})\ntasks_done = 0\nroadmap = {}\nfunction f1()\n    table.insert(roadmap, \"1 start\")\n    box.begin()\n    local t = s:get{1}\n    s:replace{2, t[2]}\n    box.commit()\n    tasks_done = tasks_done + 1\n    table.insert(roadmap, \"1 end\")\nend\nfunction f2()\n    table.insert(roadmap, \"2 start\")\n    box.begin()\n    s:replace{1, 15}\n    s:replace{2, 15}\n    box.commit()\n    tasks_done = tasks_done + 1\n    table.insert(roadmap, \"2 end\")\nend\nfb1 = fiber.create(f1)\nfb2 = fiber.create(f2)\nwhile tasks_done ~= 2 do fiber.sleep(0.01) end\nprint(s:get{1}[2])\nprint(s:get{2}[2])\n\n15\n1\n```\nThe invariant s:get{1}[2] == s:get{2}[2] is broken. We also need to support read_views between two prepared, but not committed transactions. That ruins the idea of using the same LSN_INFINITY for all tuple. The steps are:\n1. Apply locker's patch 'freeze mems' or however it is called.\n2. Make possible to delete records from mems (the main trouble is mem_iterator).\n3. Rename tsn member of vy_tx and vy_xm to tx_id.\n4. Add prepare_sn member to vy_tx; assign it in tx during prepare to the next incremented value.\n5. Create a linked list of prepared transactions on order by preparing time (i.e. by prepare_sn).\n6. Enable collecting of a read set for conflicted txs.\n6.1. Create a list of directly depended transactions in a transaction. The list must contain conflicted transactions which has a visibility of the transaction but doesn't have a visibility of the next later transaction.\n6.2. on conflict (during prepare), in addition to setting vlsn of the conflicted tx to lsn - 1, try to find previous prepared tx, and (if it exists), add the conflicted tx into the directly-dependent-list of the found tx.\n6.3. on commit of a transaction, traverse trough it's directly-dependent-list, an set all vlsns as lsn that was provided by WAL.\n6.4. on abort of a prepared transaction, abort all it's directly-dependent txs. It is also possible to rebind it to the previous prepared tx, if there is no intersection in the read set of the dependent tx and the write set of the aborting tx.\n7. Store replace_stmt and delete_stmt pointer (replace/delete variables in vy_commit) in txv. Implement rollback of prepared tx in the same order as now vy_commit does.\n8. Think about deconflicting some txs on about of the cause of the conflict.. 2nd part of 6.4 must go to another ticket.. The original task was to allow empty ops.\n Now I've allowed to omit ops at all in lua, but not in IPROTO.. After that a tx_conflict test could check this situation\n. Alternatively add a bloom filter to entire run. That is equal algorithmically but could be easier to implement/store.\n. Once fixed it will be possible to remove ignore_unnecessary_conflict1 branches in vinyl/tx_conflict.test.lua. Once fixed it will be possible to remove ignore_unnecessary_conflict2 branches in vinyl/tx_conflict.test.lua. After fixing the test below also should be added to box/bitset.test.lua\ns = box.schema.space.create('test')\n_ = s:create_index('primary', { type = 'hash', parts = {1, 'unsigned'}, unique = true })\ni = s:create_index('bitset', { type = 'bitset', parts = {2, 'unsigned'}, unique = false })\nfor i=1,10 do s:insert{i, math.random(8)} end\ngood = true\nfunction is_good(key, opts) return #i:select({key}, opts) == i:count({key}, opts) end\nfunction check(key, opts) good = good and is_good(key, opts) end\nfor j=1,100 do check(math.random(9) - 1) end\nfor j=1,100 do check(math.random(9) - 1, {iterator = box.index.BITS_ANY_SET}) end\nfor j=1,100 do check(math.random(9) - 1, {iterator = box.index.BITS_ALL_SET}) end\nfor j=1,100 do check(math.random(9) - 1, {iterator = box.index.BITS_ALL_NOT_SET}) end\ngood\ns:drop()\ns = nil. It will not work until struct xlog_cursor cursor is removed from struct vy_run_iterator. I added some additional logs:\nhttps://gist.github.com/alyapunov/f66be0188a4c609610dcca794b456e9b\nAnd found that:\nTransactions create tuples of size 48B along with tuples of size 2kB.\nInternally memtx allocates blocks of size 16kB from indexes.\nThese object classes are allocated by mempools that uses slabs of sizes 16kB, 256kB and 2MB correspondingly.\nIf (when) there's not enough memory for index block the code starts to delete random 2kB tuples form another space. Since deletions are random, lots of deletions must be made before one random 256kB slab becomes free and is evicted. And more deletions must be made before randomly located 256kB slabs will form 2M continuous free space that can be used for index slab mempool to allocate one (!) 16k index block. \nTherefore, from about 500 000 tuples about 95% must be deleted for the fist 256kB block is evicted and 98% of the rest tuple must be deleted to allow 3,496 256kB slab form one continuous 2MB slab. Thus the deletion process that deletes 99.9% tuples evicts 3,488 256kB slabs that is 870MB of space..\nYou have to delete almost entire database if you delete from one space trying to get some some free space for insertion into another space.\nThe problem can be fixed only implementing new iterator.. #1251. Do not search in write_set in vy_tx_track(..), just pass source info flags from read-merge iterator.\nNote that read iterator must pass binary OR of all sources from merge iterator in case of UPSERT sequence. 1. Make independent write iterator.\n2. In order to bury restoring:\n2.1. make new API of the low-level iterators:\n * get_next_key\n * get_next_lsn\n * step_to_next_key\n2.2. add different keys for initial positioning and for EQ/REQ limit\n3. Use light refts for run/mem (allow them to free resources but not free vy_run/vy_mem structure)\n4. Use heap in merge iterator. Thanks!. After fix, it might be good to clean up the func:\nstatic inline struct tuple \niterator_next(struct iterator base_it)\nin vinyl_index.cc. Fixed, but I found no difference in performance neither for tests nor for a simple tnt launch.. #2090 goes to 1.7.6, this must go too.. >re-introduce some kind of next_key() to the write iterator source interface (aka stream):\nHaving a mem with N tuples means we have already spent O(N log(N)) time in TX thread building it. After that skipping even N tuples in worker thread doesn't matter since we dump a mem only once. Even complete optimization will not be seen in overall CPU usage. It also must be clear that skipping a significant number of tuples during a dump is already the best possible case for a dumper.\nNevertheless it can be optimized but I suggest the lowest priority.\n\neliminate duplicates from the trees at update time\n\nUpsert squash is important because a user can select same key any amount of times. Unlike upserts, tons of replaces of the same key cannot affect point queries' performance. They can affect range scans, and read iterators must handle the case properly (now they don't). Removing one useless statement from the mem's tree\n - will cost O(log(N)) in TX instead of  O(1) in dump worker.\n - will not free memory because of lsregion.\n - can improve logarithmic complexity of a tree in case of domination of hot data over cold data (Memtx must be used in this case).\nRemoval of a group of K still is worse than O(K) in dumper.\nSo I guess removing of useless is useless.\nSee #2500. RO transaction were removed by 9c57ed6191cf3ebb8ad769f5aaa73d5c88a9e1ed.\nMy original fix was aba925a17405562a3f51f0f339c8b60b2c30940b and it worked fine with the :pairs() case but it didn't get through code review.\nI think we can arise my original fix.. Blocked by #2700. I think that memory management in vinyl must be similar to memtx. Memtx doesn't use 'malloc' feature of slab_get, all memtx tuples are allocated inside memtx arena. If the tuple size exceeds limit, a proper error message comes:\nER_MEMTX_MAX_TUPLE_SIZE: Failed to allocate 10485787 bytes for tuple in the slab allocator: tuple is too large. Check 'memtx_max_tuple_size' configuration option.\nStoring long-live tuples in runtime arena is not a good idea, I'm sure.\nSo I still think that solution (3) is the best one. With options and error messages similar to memtx's.. Comparator perf comparison https://pastebin.com/JX1B9p4N\nOrder of different comparators https://pastebin.com/TXSbpMFy\n+nunicode https://pastebin.com/iGjLKFqU (MYSQL means mariaDB here). Could you please upload logs for at least 30 minutes?\nInformation about engines, spaces and indexes also could help.. I would also like to see \nparts = {field_id1, field_id2}\nworking.\n. I think this idea can be also used in conflict-free TX manager. Just retry stored procedure on conflict. But (in vinyl) this approach would also require cache improvement - update cached value on write instead of throwing away.. * stepan-mitkin notifications@github.com [17/11/27 23:21]:\n\nDowngrade to 1.7.5 did not work.\n2017-11-27 21:15:23.531 [16508] main/101/dbg.lua I> recovery start\n2017-11-27 21:15:23.531 [16508] main/101/dbg.lua I> recovering from `/home/stipan/tmp/tara//00000000000093350726.snap'\n2017-11-27 21:15:23.555 [16508] main/101/dbg.lua schema.h:184 E> ER_NO_SUCH_SPACE: Space '276' does not exist\n2017-11-27 21:15:23.555 [16508] main/101/dbg.lua F> can't initialize storage: Space '276' does not exist\n\nthis is not a data loss, this looks like an upgrade issue.\n\nThis is an upgrade issue that lead to a data loss.\n\nCould you send us your snapshot? We'll see what can be done.\nThanks.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. * Peter Gulutzan notifications@github.com [17/12/06 20:17]:\n\nI have Ubuntu 14.04. I have Tarantool 1.8, pulled from source today.\nI execute these requests:\nCREATE TABLE A (s1 int primary key, s2 int);\nCREATE INDEX A ON A (s2);\nThe result is an error with the message \"there is already a table named A\".\n\nLooks like it should be a bug.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. * Konstantin Nazarov notifications@github.com [18/01/18 14:20]:\n\nI often need to check the type of arguments in a function and return a sane error. This is a recurring pattern in most of our libraries.\nCases:\n- check that first parameter of object's method is really 'self' and warn the user that they should call the method as obj:method() instead of obj.method()\n- check that parameter is a table\n- check that parameter is string or nil\n- etc...\nIt would be extremely useful to have argument checking onboard.\nMost of the closed-source projects can live with the hand-rolled implementation, but stand-alone modules can't afford to write it from scratch every time.\n\nWe already have this in box.schema, we could generalize it into a\nlibrary.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. * Konstantin Nazarov notifications@github.com [18/01/18 14:20]:\n\nI often need to check the type of arguments in a function and return a sane error. This is a recurring pattern in most of our libraries.\nCases:\n- check that first parameter of object's method is really 'self' and warn the user that they should call the method as obj:method() instead of obj.method()\n- check that parameter is a table\n- check that parameter is string or nil\n- etc...\nIt would be extremely useful to have argument checking onboard.\nMost of the closed-source projects can live with the hand-rolled implementation, but stand-alone modules can't afford to write it from scratch every time.\n\n\nUltimately, you should use avro-schema. \n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. * Mons notifications@github.com [18/01/24 19:53]:\n\n\u0443 \u043c\u0435\u043d\u044f \u0435\u0441\u0442\u044c \u0438 \u0434\u043b\u044f 1.6\n\n\u0414\u043e\u0431\u0430\u0432\u044c \u0432 \u0442\u0438\u043a\u0435\u0442.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. * Nikita Pettik notifications@github.com [18/02/08 23:22]:\n\nIt is easy to remove/replace usage of collations from struct Index and struct sqlite3 (after space creation). As for struct Column, it turns out that in Tarantool collation is specified only for keys, not for all tuple fields. Meanwhile in SQL it is allowed to set collation for any column. Thus, it is unclear how to substitute those usages (at least now).\n\nWe can extend field_def with collation - this sets the collation\nfor each tuple field.\n-- \nKonstantin Osipov, Moscow, Russia, +7 903 626 22 32\nhttp://tarantool.org - www.twitter.com/kostja_osipov\n. I guess it must be void. I guess it must be void too. ",
    "anatol": "'master' branch is fine. So it means it is fixed there and change should be cherry-picked to stable.\n. I did not know whether it is qualified for stable. If it is please cherry-pick the python change (and the fix for tests mentioned in the mail thread).\n. 'stable' branch\n. Actually I was using 'development' mode compilation that adds '-Werror'. Using release mode allows me to compile but the warnings still present. There are a few more:\n```\n/src/tarantool/include/mutex.h:1:9: warning: 'TARANTOOL_MUTEX_H_INCLUDED' is used as a header guard here, followed by #define of a different macro\n      [-Wheader-guard]\nifndef TARANTOOL_MUTEX_H_INCLUDED\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\n/src/tarantool/include/mutex.h:2:9: note: 'TARNATOOL_MUTEX_H_INCLUDED' is defined here; did you mean 'TARANTOOL_MUTEX_H_INCLUDED'?\ndefine TARNATOOL_MUTEX_H_INCLUDED\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~\n    TARANTOOL_MUTEX_H_INCLUDED\n\n/src/tarantool/src/lua/lua_socket.cc:506:1: warning: unused function 'readline_state_try' [-Wunused-function]\nreadline_state_try(struct readline_state *rs, int i, char chr)\n^\nsrc/admin.cc:85:18: warning: unused variable 'admin_first_final' [-Wunused-const-variable]\nstatic const int admin_first_final = 139;\n                 ^\nsrc/admin.cc:86:18: warning: unused variable 'admin_error' [-Wunused-const-variable]\nstatic const int admin_error = 0;\n                 ^\nsrc/admin.cc:88:18: warning: unused variable 'admin_en_main' [-Wunused-const-variable]\nstatic const int admin_en_main = 1;\n```\n. I use latest version of clang. But the warnings should be clean from the text above. e.g.\n\"TARNATOOL_MUTEX_H_INCLUDED\" is clearly a typo, it should be \"TARANTOOL_MUTEX_H_INCLUDED\"....\n. Following sysusers file should work for you\nu tarantool\ng tarantool - \"Tarantool Server\" /var/lib/tarantool. ",
    "Sulverus": "Moved to test-run https://github.com/tarantool/test-run/issues/6\n. fedora 20 x86_64 testrunner is available:\nhttp://master.farm.tarantool.org/builders/0_Testrunner%20%28master%29\n. Now buildbot farm can build docker containers with tarantool and run tests for all supported platforms. \n+docker hub repository added\nhttps://registry.hub.docker.com/u/tarantool/tarantool/\n. @rtsisyk \n\n\nPackets should be renamed to 1.6.3.23.gabcde~sid-1_amd64.deb form.\n\n\nbuild must be separated with '.' or like git describe --long?\nlike 1.6.4-291-g58f2645\n. done. awaiting for check\nnew names will be generated like this: tarantool_1.6.4.311.ge0ff949~jessie-1_amd64\n. Merged from gh-806. Close?\n. Microbench updated and integrated with tarantool buildbot: http://bench.farm.tarantool.org/\n. Base sharding api for 1.6 done:\n1. All nodes connections\n2. Heartbeat table\n3. Monitoring and nodes kill\n4. After connect node checking\n5. Basic oprations implementation\nHot to use it:\n- luarocks: http://rocks.tarantool.org/\n- package is avalable in tarantool rpm/deb repositories:\nbash\nsudo yum install tarantool-shard\n- Docker images contains tarantool shard package\n  https://registry.hub.docker.com/u/tarantool/tarantool/dockerfile/\nPlease review\nAPI - https://github.com/tarantool/shard/blob/master/shard.lua\nExmaple - https://github.com/tarantool/shard/blob/master/demo.lua\nExample 2 - https://github.com/tarantool/shard/tree/master/debug\n. Reproduced in centos6 with release mode:\n```\n(env)[vagrant@st91 test]$ python --version\nPython 2.6.6\n(env)[vagrant@st91 test]$ ./test-run.py box/\nStarted ./test-run.py box/\nCollecting tests in 'app': application server tests.\nFound 0 tests.\nCollecting tests in 'big': lua big tests.\nFound 0 tests.\nCollecting tests in 'box': tarantool/box, minimal configuration.\nFound 54 tests.\nCollecting tests in 'module': tarantool/box, optional lua modules.\nFound 0 tests.\nCollecting tests in 'replication': tarantool/box, replication.\nFound 0 tests.\nCollecting tests in 'sophia': sophia integration tests.\nFound 0 tests.\nCollecting tests in 'unit': unit tests.\nFound 0 tests.\nCollecting tests in 'wal_off': tarantool/box, wal_mode = none.\nFound 0 tests.\nCollecting tests in 'xlog': tarantool write ahead log tests.\nFound 0 tests.\nInstalling the server ...\n    Found executable at /home/vagrant/tests/tarantool/src/tarantool\n    Creating and populating working directory in /home/vagrant/tests/tarantool/test/var ...\n    Found old vardir, deleting ...\nStarting the server ...\nStarting /home/vagrant/tests/tarantool/test/var/box.lua \nTarantool 1.6.4-606-g7a8668d\nTarget: Linux-x86_64-RelWithDebugInfo\nBuild options: cmake . -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TRACE=ON -DENABLE_BACKTRACE=ON\nCompiler: /opt/rh/devtoolset-2/root/usr/bin/cc /opt/rh/devtoolset-2/root/usr/bin/c++\nC_FLAGS: -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -msse2 -std=c11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -fno-gnu89-inline\nCXX_FLAGS: -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -msse2 -std=c++11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -Wno-invalid-offsetof\n======================================================================\nTEST                                            RESULT\n\nbox/args.test.py                                [ pass ]\nbox/bad_trigger.test.py                         [ pass ]\nbox/bootstrap.test.py                           [ pass ]\nbox/call.test.py                                [ pass ]\nbox/finalizers.test.py                          [ pass ]\nbox/iproto.test.py                              [ pass ]\nbox/print.test.py                               [ pass ]\nbox/snapshot.test.py                            [ pass ]\nbox/sql.test.py                                 [ pass ]\nbox/access.test.lua                             [ pass ]\nbox/access_bin.test.lua                         [ pass ]\nbox/access_misc.test.lua                        [ pass ]\nbox/admin.test.lua                              [ pass ]\nbox/admin_coredump.test.lua                     [ pass ]\nbox/alter.test.lua                              [ pass ]\nbox/alter_limits.test.lua                       [ pass ]\nbox/bsdsocket.test.lua                          [ pass ]\nbox/cfg.test.lua                                [ pass ]\nbox/cmdline.test.lua                            [ pass ]\n...\n```\nI think, cmdline.test can be enabled in release mode. https://github.com/tarantool/tarantool/commit/cc48fc269d395192ec463882693c057774dc874b\n. tarantool-15 was renamed to mailru-15-tarantool. SCL Meta package for tarantool 1.5 became depricated, but for centos 5(i386, x86_64) and centos6(i386, x86_64) it will be enabled in new build farm. Old packages are available in repos\n``` bash\n$sudo yum install mailru-15\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirror.h1host.ru\n * epel: mirror.datacenter.by\n * extras: mirror.h1host.ru\n * updates: mirror.h1host.ru\nResolving Dependencies\n--> Running transaction check\n---> Package mailru-15.noarch 0:1.0-1 will be installed\n--> Processing Dependency: scl-utils for package: mailru-15-1.0-1.noarch\n--> Processing Dependency: mailru-15-tarantool-sql-module for package: mailru-15-1.0-1.noarch\n--> Processing Dependency: mailru-15-tarantool-sophia-module for package: mailru-15-1.0-1.noarch\n--> Processing Dependency: mailru-15-tarantool-pg-module for package: mailru-15-1.0-1.noarch\n--> Processing Dependency: mailru-15-tarantool-mysql-module for package: mailru-15-1.0-1.noarch\n--> Processing Dependency: mailru-15-tarantool-dev for package: mailru-15-1.0-1.noarch\n--> Processing Dependency: mailru-15-tarantool-client for package: mailru-15-1.0-1.noarch\n--> Processing Dependency: mailru-15-tarantool for package: mailru-15-1.0-1.noarch\n--> Running transaction check\n---> Package mailru-15-tarantool.x86_64 0:1.5.4-61 will be installed\n---> Package mailru-15-tarantool-client.x86_64 0:1.5.4-61 will be installed\n---> Package mailru-15-tarantool-dev.x86_64 0:1.5.4-61 will be installed\n---> Package mailru-15-tarantool-mysql-module.x86_64 0:1.5.4-61 will be installed\n---> Package mailru-15-tarantool-pg-module.x86_64 0:1.5.4-61 will be installed\n--> Processing Dependency: postgresql-libs >= 9.0 for package: mailru-15-tarantool-pg-module-1.5.4-61.x86_64\n--> Processing Dependency: libpq.so.5()(64bit) for package: mailru-15-tarantool-pg-module-1.5.4-61.x86_64\n---> Package mailru-15-tarantool-sophia-module.x86_64 0:1.5.4-61 will be installed\n---> Package mailru-15-tarantool-sql-module.x86_64 0:1.5.4-61 will be installed\n---> Package scl-utils.x86_64 0:20130529-9.el7_0 will be installed\n--> Running transaction check\n---> Package postgresql-libs.x86_64 0:9.2.7-1.el7 will be installed\n--> Finished Dependency Resolution\nDependencies Resolved\n===================================================================================================================\n Package                                     Arch             Version                    Repository           Size\n===================================================================================================================\nInstalling:\n mailru-15                                   noarch           1.0-1                      tarantool           1.7 k\nInstalling for dependencies:\n mailru-15-tarantool                         x86_64           1.5.4-61                   tarantool           847 k\n mailru-15-tarantool-client                  x86_64           1.5.4-61                   tarantool           148 k\n mailru-15-tarantool-dev                     x86_64           1.5.4-61                   tarantool           134 k\n mailru-15-tarantool-mysql-module            x86_64           1.5.4-61                   tarantool            21 k\n mailru-15-tarantool-pg-module               x86_64           1.5.4-61                   tarantool            18 k\n mailru-15-tarantool-sophia-module           x86_64           1.5.4-61                   tarantool            51 k\n mailru-15-tarantool-sql-module              x86_64           1.5.4-61                   tarantool           4.7 k\n postgresql-libs                             x86_64           9.2.7-1.el7                base                229 k\n scl-utils                                   x86_64           20130529-9.el7_0           updates              23 k\nTransaction Summary\nInstall  1 Package (+9 Dependent packages)\nTotal download size: 1.4 M\nInstalled size: 4.0 M\nIs this ok [y/d/N]: y\nDownloading packages:\n(1/10): mailru-15-1.0-1.noarch.rpm                                                          | 1.7 kB  00:00:05   \n(2/10): mailru-15-tarantool-client-1.5.4-61.x86_64.rpm                                      | 148 kB  00:00:00   \n(3/10): mailru-15-tarantool-1.5.4-61.x86_64.rpm                                             | 847 kB  00:00:05   \n(4/10): mailru-15-tarantool-dev-1.5.4-61.x86_64.rpm                                         | 134 kB  00:00:00   \n(5/10): mailru-15-tarantool-mysql-module-1.5.4-61.x86_64.rpm                                |  21 kB  00:00:00   \n(6/10): mailru-15-tarantool-pg-module-1.5.4-61.x86_64.rpm                                   |  18 kB  00:00:00   \n(7/10): mailru-15-tarantool-sql-module-1.5.4-61.x86_64.rpm                                  | 4.7 kB  00:00:00   \n(8/10): mailru-15-tarantool-sophia-module-1.5.4-61.x86_64.rpm                               |  51 kB  00:00:00   \n(9/10): scl-utils-20130529-9.el7_0.x86_64.rpm                                               |  23 kB  00:00:05   \n(10/10): postgresql-libs-9.2.7-1.el7.x86_64.rpm                                             | 229 kB  00:00:05     \n\nTotal                                                                              127 kB/s | 1.4 MB  00:00:11   \nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Installing : mailru-15-tarantool-mysql-module-1.5.4-61.x86_64                                               1/10 \n  Installing : mailru-15-tarantool-sql-module-1.5.4-61.x86_64                                                 2/10 \n  Installing : postgresql-libs-9.2.7-1.el7.x86_64                                                             3/10 \n  Installing : mailru-15-tarantool-pg-module-1.5.4-61.x86_64                                                  4/10 \n  Installing : mailru-15-tarantool-client-1.5.4-61.x86_64                                                     5/10 \n  Installing : mailru-15-tarantool-1.5.4-61.x86_64                                                            6/10 \n  Installing : mailru-15-tarantool-dev-1.5.4-61.x86_64                                                        7/10 \n  Installing : scl-utils-20130529-9.el7_0.x86_64                                                              8/10 \n  Installing : mailru-15-tarantool-sophia-module-1.5.4-61.x86_64                                              9/10 \n  Installing : mailru-15-1.0-1.noarch                                                                        10/10 \n  Verifying  : mailru-15-tarantool-sophia-module-1.5.4-61.x86_64                                              1/10 \n  Verifying  : scl-utils-20130529-9.el7_0.x86_64                                                              2/10 \n  Verifying  : mailru-15-tarantool-pg-module-1.5.4-61.x86_64                                                  3/10 \n  Verifying  : mailru-15-tarantool-dev-1.5.4-61.x86_64                                                        4/10 \n  Verifying  : mailru-15-1.0-1.noarch                                                                         5/10 \n  Verifying  : mailru-15-tarantool-1.5.4-61.x86_64                                                            6/10 \n  Verifying  : mailru-15-tarantool-client-1.5.4-61.x86_64                                                     7/10 \n  Verifying  : postgresql-libs-9.2.7-1.el7.x86_64                                                             8/10 \n  Verifying  : mailru-15-tarantool-sql-module-1.5.4-61.x86_64                                                 9/10 \n  Verifying  : mailru-15-tarantool-mysql-module-1.5.4-61.x86_64                                              10/10 \nInstalled:\n  mailru-15.noarch 0:1.0-1                                                                                         \nDependency Installed:\n  mailru-15-tarantool.x86_64 0:1.5.4-61                  mailru-15-tarantool-client.x86_64 0:1.5.4-61           \n  mailru-15-tarantool-dev.x86_64 0:1.5.4-61              mailru-15-tarantool-mysql-module.x86_64 0:1.5.4-61     \n  mailru-15-tarantool-pg-module.x86_64 0:1.5.4-61        mailru-15-tarantool-sophia-module.x86_64 0:1.5.4-61    \n  mailru-15-tarantool-sql-module.x86_64 0:1.5.4-61       postgresql-libs.x86_64 0:9.2.7-1.el7                   \n  scl-utils.x86_64 0:20130529-9.el7_0                   \nComplete!\n```\n. Done. Awaiting for check.\n1. for lua modules(queue, http, expirationd) added travis spec to run tests suites with tarantool.\n2. writed tests for expirationd\n3. queue-collection moved to tarantool/queue master branch(old code in stable branch)\n4. travis ping feature added in tarantool buildbot to test modules after build.\nN.B> travis-ping feature enabled only for ubuntu trusty_64 builder(travis-ci works on it)\n. travis spec added to stable branch for tarantool/queue\n. Done. Need review for 5 cases:\n- double update in master and replica - replication status: stopped\n- insert different values with same id - replication status: stopped\n- auto increment different values - replication status: stopped\n- CRDT increment with update - replication is correct\n- delete not existing key - replication is correct\n. Awaiting for review\n. Done. Awating for check. Tested in trusty 64. \n```\ntarantool> fiber = require(\"fiber\")\n\n...\ntarantool> fiber.create(function() while true do fiber.sleep(0) end end)\n\nstatus: suspended\n  name: lua\n  id: 102\n...\n\ntarantool> fiber.info()\n\n102:\n    backtrace:\n'#0  0x483554 in fiber_yield_timeout(double)+100'\n'#1  0x483579 in fiber_sleep(double)+9'\n'#2  0x47971b in lbox_fiber_sleep(lua_State*)+59'\n'#3  0x4c51c6 in lj_BC_FUNCC+52'\nfid: 102\nname: lua\ncsw: 1442\n  101:\nbacktrace:\n'#0  (nil) in ?'\nfid: 101\nname: interactive\ncsw: 6\n...\n```\n. Done. Please review.\nThere is 2 ways:\n\n\ndo box.errror for role.revoke('X1','read','role','X2')\nreplace it with execute and revoke\nI think second way is more user-friendly.\nAlso box/role.test was updated with this case\n. Done:\nImplemented in gh-668 branch\nreviewed with Kostia\nMerged\n. on_replace() without arguments returns lua table, for example:\n\n```\ntarantool> f = function() print('hello') end\n\n...\ntarantool> f2 = function() print('world') end\n\n...\ntarantool> box.space.test:on_replace(f)\n\n\n'function: 0x402c6e40'\n...\ntarantool> box.space.test:on_replace(f2)\n\n\n\n'function: 0x402c7e58'\n...\ntarantool> box.space.test:on_replace()\n\n\n\n\n\n'function: 0x402c6e40'\n\n\n'function: 0x402c7e58'\n...\n```\n. Awaiting for review\n. Awaiting for review\n. Awaiting for code review.\ninterface:\n\n``` lua\nlog = require('log')\nlog.debug('DEBUG TEST')\nlog.info('TEST')\nlog.warn('WARN TEST')\nlog.error('ERROR TEST')\nlog.info(log.logger_pid())\n```\n. It's already up on farm\n$cd vmach/test/\n$vagrant ssh\n. if run it separately, it working correctly. Test fails only if we run it with others:\napp/boolean.test.lua                            [ pass ]\napp/cfg.test.lua                                [ pass ]\napp/console.test.lua                            2015-02-05 15:32:10.142 [10656] main/101/console.test.lua F> builtin/console.lua:328: failed to create server unix/:/tmp/tarantool-test-console.sock: Address already in use\n[ fail ]\n. Hi, it's looks strange. \n1. In what operation system you try to do it?\n2. What is in /tmp dir? after app start it must be:\nbash\n[root@localhost tarantool]# ls /tmp/\nmy_session          my_session.log  my_session.pid      my_session.control  my_session.lua\nif my_session.log exists can you paste it there?\n1. Does \"asureuser\" exists?\n2. If you starts your lua script multiple times  - after sencond start you can see error in logs:\n`` bash\n2015-03-16 11:20:03.919 [3934] main/101/tarantoolctl C> version 1.6.4-473-g5f71e8a\n2015-03-16 11:20:03.922 [3934] main/101/tarantoolctl C> log level 5\n2015-03-16 11:20:03.923 [3934] main/101/tarantoolctl I> mapping 1073741824 bytes for a shared arena...\n2015-03-16 11:20:03.934 [3934] main/101/tarantoolctl I> recovery start\n2015-03-16 11:20:03.934 [3934] main/101/tarantoolctl I> recovering from/tmp/my_session/00000000000000000000.snap'\n2015-03-16 11:20:04.029 [3934] main/102/hot_standby I> recover from /tmp/my_session/00000000000000000000.xlog'\n2015-03-16 11:20:04.029 [3934] main/102/hot_standby I> done/tmp/my_session/00000000000000000000.xlog'\n2015-03-16 11:20:04.029 [3934] main/101/tarantoolctl I> binary: started\n2015-03-16 11:20:04.032 [3934] main/101/tarantoolctl I> binary: bound to 0.0.0.0:33016\n2015-03-16 11:20:04.034 [3934] main/101/tarantoolctl I> ready to accept requests\n2015-03-16 11:20:04.035 [3934] main/101/my_session I> Run console at /tmp/my_session.control\n2015-03-16 11:20:04.036 [3934] main/101/my_session I> tcp_server: remove dead UNIX socket: /tmp/my_session.control\n2015-03-16 11:20:04.037 [3934] main/103/console/unix/:/tmp/my_session I> started\n2015-03-16 11:20:04.038 [3934] main/104/console/0.0.0.0:33014 I> started\n2015-03-16 11:20:04.041 [3934] main/101/my_session F> Space 'session' already exists\n2015-03-16 11:20:04.041 [3934] main/101/my_session F> Space 'session' already exists\n```\n. you can install 1.6 easy using apt-get. Your config with tmp is not default, perhaps this is the point. \n`` bash\nwget http://tarantool.org/dist/public.key\nsudo apt-key add ./public.key\nrelease=lsb_release -c -s`\ncat > /etc/apt/sources.list.d/tarantool.list <<- EOF\ndeb http://tarantool.org/dist/master/ubuntu/ $release main\ndeb-src http://tarantool.org/dist/master/ubuntu/ $release main\nEOF\nsudo apt-get update\nsudo apt-get install tarantool\n```\nThen, move you lua code in /etc/tarantool/instances.enabled/my_session.lua and run\nbash\nsudo tarantoolctl start my_session\ni think it's good idea to create windows azure image for tarantool 1.6\n. Nice. By default tarantool use this config:\n```\ndefault_cfg = {\n    pid_file   = \"/var/run/tarantool\", -- will become pid_file .. instance .. '.pid'\n    wal_dir    = \"/var/lib/tarantool\", -- will become wal_dir/instance/\n    snap_dir   = \"/var/lib/tarantool\", -- snap_dir/instance/\n    sophia_dir = \"/var/lib/tarantool\", -- will become sophia_dir/sophia/instance/\n    logger     = \"/var/log/tarantool\", -- logger/instance .. '.log'\n    username   = \"tarantool\",\n}\ninstance_dir = \"/etc/tarantool/instances.enabled\"\n```\n. you run my_session.lua with\nlua\nbox.schema.space.create('session')\nyou not drop app workdir with snapshots(/var/lib/tarantool/my_session/) after \"tarantoolctl stop\" your namespace is saved to hdd snapshot. We need to create space only if space is not exist. Same point with grants. \nif you want cleanup snapshots do(attention it drops all data for your app):\nbash\ntarantoolctl stop my_session\nrm -rf /var/lib/tarantool/my_session/\nor you can turn off wal_mode in your app:\nlua\nbox.cfg{listen = 33016, wal_mode=\"none\"}\n. Awesome! Can i close this issue?\n. call.test updated with workaround for centos6\n. More broken links:\nhttp://tarantool.org/doc/book/box/box_space.html\nin space index section:\nbox.space._user\u00b6\n_user is a new system tuple set for support of the authorization feature.\nbox.space._priv\u00b6\n_priv is a new system tuple set for support of the authorization feature.\nbox.space._cluster\u00b6\n_cluster is a new system tuple set for support of the replication feature.\nhttp://tarantool.org/doc/book/box/:doc:%60authentication%60 -> 404\nhttp://tarantool.org/doc/book/box/:doc:%60replication%60 -> 404\n. Nice, i think -le flags will be useful.\n. quick fix with vm reload. debian builder is available. need to update kernel in debian-slave\n. debian-slave kernel was updated for latest linux-image for debian 7.6:\nbash\nvagrant@debian-slave:~$ uname -a\nLinux debian-slave 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u1 x86_64 GNU/Linux\n. Fixed in https://github.com/tarantool/tarantool/commit/0f1a8228180dc48344899557d0ba57275e296c61\n. Done. Please review\n. Reproduced in Tarantool 1.6.4-581-gf89c1ce\n. Not reproduced in Tarantool 1.6.5-29-g69198fd in release mode\n. Implemented with new test-run:\n1. Create max replicas and join\n2. Try to add one more replca\n3. Delete all replicas from box.space_.cluster and stop it\n4. Create 30 replicas again and join\n5. Check results\n. https://github.com/tarantool/tarantool/commit/8a633b8d3a0eb9d4ab5c4aacfaeebb533c340743\nIt works, but sometimes i see max replica errors in log(test passed):\n$grep -R MAX var/*.log\nvar/replica10.log:2015-10-27 21:07:39.484 [16807] main/105/applier/localhost:5012 vclock.h:286 E> ER_REPLICA_MAX: Replica count limit reached: 32\nvar/replica10.log:2015-10-27 21:07:39.485 [16807] main/105/applier/localhost:5012 vclock.h:286 E> ER_REPLICA_MAX: Replica count limit reached: 32\nvar/replica11.log:2015-10-27 21:07:39.487 [16834] main/105/applier/localhost:5012 vclock.h:286 E> ER_REPLICA_MAX: Replica count limit reached: 32\nvar/replica11.log:2015-10-27 21:07:39.492 [16834] main/105/applier/localhost:5012 vclock.h:286 E> ER_REPLICA_MAX: Replica count limit reached: 32\n. Totaly:\n1. catch.test.lua (insert on master, delete on replica)\n2. error injection in relay_send()\nN.B.> now it's possible to delete row before catching up with the master\nPlease review gh-809 branch: https://github.com/tarantool/tarantool/commits/gh-809\n. Dynamic libraries format is defined in tarantool init.cc and in luajit/src/luaconf.h\nPatch for tarantool is ready to review https://github.com/tarantool/tarantool/commit/269b005b69956b8db189a20a6ee0bfc696534fc6, but .so hardcoded in luajit:\n``` c\ndefine LUA_LCDIR   LUA_LROOT \"/\" LUA_LMULTILIB LUA_LUADIR\ndefine LUA_LLPATH  \";\" LUA_LLDIR \"?.lua;\" LUA_LLDIR \"?/init.lua\"\ndefine LUA_LCPATH1 \";\" LUA_LCDIR \"?.so\"\ndefine LUA_LCPATH2 \";\" LUA_LCDIR \"loadall.so\"\ndefine LUA_PATH_DEFAULT    \"./?.lua\" LUA_JPATH LUA_LLPATH LUA_RLPATH\ndefine LUA_CPATH_DEFAULT   \"./?.so\" LUA_LCPATH1 LUA_RCPATH LUA_LCPATH2\n```\nWe have 2 ways:\n1. Patch https://github.com/tarantool/luajit/ \n2. Workaround it in init.lua with replace(is it good idea?)\nneed @rtsisyk review\n. Done. Please review:\n1. tarantoolctl reads file \n2. send file to the server via control socket\n3. run it on the server side using loadstring\n. Added session trigger for successful authentication  + test case. Please review https://github.com/tarantool/tarantool/commit/85240dc3ab780b1a3125baf7f45877dfd3d48c85\nUsage example:\nlua\nmy_fun = function() print('hello world') end\nbox.session.on_auth(my_fun)\nN.B> Auth trigger is not called if we use guest connection without password\n. Feature updated:\ntrigger can be used with event argument:\nlua\nmy_fun = function(user_name) print('hello ' .. user_name) end\nbox.session.on_auth(my_fun)\n. Please update tarantool to latest version.\nProbably we must add some prefix to role names to fix first case. Problem with drop, create and revoke fixed in https://github.com/tarantool/tarantool/commit/200112ccc2d4601fc2c9d7b0ec780a53fc5c100d\n. merged\n. Hires clock: https://github.com/Mons/tnt-luas/blob/master/hires.lua\nAns we need add wrapper in hires.lua to compute time diff like this:\nlua\nlocal function diff (fun, ...)\n    local start_time = now()\n    fun(...)\n    local diff = now() - start_time\n    return diff\nend\nAfter that we can use bindings in microbench\n. Updated in iproto_perms branch. test included into errinj.test and implemented with ERRINJ_WAL_WRITE error injection \n. new netbox version https://github.com/tarantool/tarantool/blob/gh-892/src/lua/net_box.lua\nnet.box.test passed, but in logs we can see something strange:\ntarantool: /home/adrozdov/tarantool/tarantool/src/lib/small/slab_cache.c:70: slab_assert: Assertion `slab->magic == slab_magic' failed.\nNeed review\n. Pushed in gh-906 branch https://github.com/tarantool/tarantool/commit/4b9643928e53752b9c43eda72b2c7ed59458a9f2\n. Implemented with getpwnam and getgrgid ffi bindings: we get user data and default user group.\n. Merged\n. Fixed workaround  for test-run. If we run tests without build - there is no module_api.so file. \nSkipcond updated: now test is enabled for any builds and for package testing if module_api.so exists\n. done. buildbot updated. packages are ready\nhttp://tarantool.org/dist/master/fedora/22/\n. +1.6.6 and 1.7 branches\n. In new build system we use aptly for debian/ubuntu packages\nhttps://github.com/tarantool/build/blob/master/mirror/repo.py\nhttps://github.com/tarantool/build/commit/9fdde00fc076d61645c8c8e7b3970456928deef8\n. Fixed with latest test-run update. https://github.com/tarantool/test-run/blob/0bc891e3dde7629622052f85d889a4b7a7a1ad01/lib/test.py#L169\n. Pure lua version\nhttps://github.com/Sulverus/tdb\n. Done: https://github.com/tarantool/tarantool/commit/ff8f1e47782874cc48a5a559f04d2ccb343fbebe\n. merged to 1.6\n. Looks like we need to add comment before username option in /etc/default/tarantool?\n. Done. Now cloud builds are in beta and it works in parallel with buildbot. \nhttps://travis-ci.org/tarantool/tarantool/builds/96773594\nAll drivers and lua modules rpm/deb specs have been updated and their builds have been moved to the cloud. New docker-based build system available in https://github.com/tarantool/build repo.\nDemo repo in packagecloud:\ntarantool only https://packagecloud.io/tarantool/1_6\nmodules, libraries and drivers https://packagecloud.io/tarantool/master\nWe can switch old and new builds after ~4 weeks of beta period\n. Implemented for drivers, using travis-ci+docker+packagecoud.io \nExample: https://travis-ci.org/tarantool/tarantool-php\n. demo repository: https://packagecloud.io/tarantool/modules\n. No, it's possible to add multiple compilers and exclusion matrix in travis.yml\n. Implemented in https://github.com/tarantool/tarantool/issues/1071\n. Tarantool build config updated with multi os support(linux, os x), pushed to gh-1073 branch and rebased https://github.com/tarantool/tarantool/commit/d65d30b219989f395335ae8bc403429d92f4a861\nExample:\nhttps://travis-ci.org/tarantool/tarantool/builds/85551674\nFound crash in os x app/cfg.test like in buildbot(https://travis-ci.org/tarantool/tarantool/jobs/85551682)\n. merged to 1.6\n. Seems like fix is not working: after night benchmark:\n```\n0  0x42a500 in sig_fatal_cb(int)+112\n1  0x7fbf261bb340 in ?\n2  0x48f011 in coeio_async_cb(ev_loop, ev_async, int)+17\n3  0x56b09d in ev_invoke_pending+93\n4  0x56e319 in ev_run+2089\n5  0x49c9dc in tarantool_lua_run_script(char, int, char*)+108\n6  0x428fdb in main+299\n```\nVersion:\n```\n$ tarantool --version\nTarantool 1.6.7-195-gcd200c6\nTarget: Linux-x86_64-RelWithDebugInfo\nBuild options: cmake . -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TRACE=ON -DENABLE_BACKTRACE=ON\nCompiler: /usr/bin/x86_64-linux-gnu-gcc /usr/bin/x86_64-linux-gnu-g++\nC_FLAGS: -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -msse2 -std=c11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -fno-gnu89-inline\nCXX_FLAGS: -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -msse2 -std=c++11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -Wno-invalid-offsetof\n``\n. It works! http://sh5.tarantool.org/?first=1.6.6-221-g7142aad&last=1.6.7-197-g008c20c\n. Implemented in https://github.com/tarantool/tarantool/issues/1071\nMean build time for tarantool packaging(measurements described [there](https://github.com/tarantool/build/blob/master/README.md) )  is less then15 minutesfor 12 os + linux tests + mac os tests versus old builds~1,2 hour`\nExample: https://travis-ci.org/tarantool/tarantool/builds/96773594\nNow it works in beta for 1.6 branch.\nAfter beta period we can move tests into docker and cache all python dependencies in dockerhub\nhttps://hub.docker.com/r/tarantool/build/\n. Test run updated: https://github.com/tarantool/test-run/commit/babae1315fc5671dea13ef8f0f17f5555fb8b8f9\n. Implemented soft automatic schema reload + tests. Awaiting for review: https://github.com/tarantool/tarantool/commit/082d26ceec29ea9f656a6e3cc399ba2d3cfe1cae\n. - after review fixes\n- system space/index constants replaced with box.schema.VSPACE_ID/VINDEX_ID\n. Moved to https://github.com/tarantool/cloud\nStatus:\n- POC: ready\n- Alpha: in progress\n  https://github.com/tarantool/cloud/milestones\nRoadmap:\nhttps://github.com/tarantool/cloud/issues\n. Done. Old user_guide removed from 1.6 site.\n1.6: http://tarantool.org/doc/\n1.5: http://stable.tarantool.org/doc/mpage/\n. Seems like this file is included in 1.6 site deploy. @bigbes ?\n. old cached files in build slave removed. \n. After little research:\nin new net.box we use box.schema.VSPACE_ID, it doesn't works without box.cfg{}. \n. merged to 1.6 branch\n. Merged. Confirmed in travis https://travis-ci.org/tarantool/tarantool/builds/116362765\n@pgulutzan please check, that you use latest tarantool 1.6 sources and latest test-run (git submodule update --init --recursive)\n. ```\nbox/misc.test.lua                                               [ fail ]\nTest failed! Result content mismatch:\n--- box/misc.result Mon Dec 19 15:11:07 2016\n+++ box/misc.reject Mon Dec 19 15:11:44 2016\n@@ -290,6 +290,7 @@\n   - 'box.error.NO_SUCH_TRIGGER : 34'\n   - 'box.error.CLUSTER_ID_IS_RO : 65'\n   - 'box.error.injection : table: \n+  - 'box.error.DECOMPRESSION : 124'\n   - 'box.error.DROP_SPACE : 11'\n   - 'box.error.ROLLBACK_IN_SUB_STMT : 123'\n   - 'box.error.COMMIT_IN_SUB_STMT : 122'\nLast 15 lines of Tarantool Log file:\nFatal error: Failed to run test box/misc.test.lua: wrong test output. Execution aborted.\n```. Interface (6) is looking good and is easy to understand(imho). Also in the future we'll be able to add more options.. ",
    "whiteglasses": "\u0411\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u0430 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0440\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0415\u0441\u043b\u0438 \u043d\u044b\u043d\u0435\u0448\u043d\u044f\u044f \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0435\u0447\u0451\u0442. \u0410 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441 nodeps \u043b\u043e\u043c\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u043a\u0435\u0442\u0430\u043c\u0438.\n. 1. \u0414\u0438\u0441\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439. \u041d\u043e \u043d\u0430 \u043c\u0430\u0448\u0438\u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043a\u0440\u043e\u043c\u0435 \u043d\u0438\u0445 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0435 \u043a\u043e\u043c\u0443 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c.\n2. \u041a\u0430\u043a \u043f\u043e\u043d\u044f\u0442\u044c \u0432 \u0448\u0430\u0440\u0435\u043d\u043e\u0439 \u043b\u0438 \u043f\u0430\u043c\u044f\u0442\u0438 \u0430\u0440\u0435\u043d\u0430?\n. I forget local requests\nbox.stat_by_source()\n  total:\n    DELETE:\n      total: 1873949\n      rps: 123\n    SELECT:\n      total: 1237723\n      rps: 4099\n...\n  local:\n    DELETE:\n      total: 1873949\n      rps: 123\n    SELECT:\n      total: 1237723\n      rps: 4099\n...\n  3: #(index of replication source)\n    DELETE:\n      total: 20\n      rps: 1\n    SELECT:\n      total: 0\n      rps: 0\n  4: #(index of replication source)\n    DELETE:\n      total: 25\n      rps: 1\n    SELECT:\n      total: 0\n      rps: 0. ",
    "funny-falcon": "\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b\u043e\u0441\u044c\n. For example, Ruby streaming msgpack decoder has following api:\n``` ruby\ndeserialize objects from an IO\nu = MessagePack::Unpacker.new(io)\nu.each do |obj|\n  # ...\nend\n```\nSo that, there is no way to use length.\nPython client also cannot use length: https://github.com/tarantool/tarantool-python/blob/master/tarantool/response.py#L53\n. pushed with force. Previous version has error.\n. \u041f\u0440\u043e\u0448\u0443 \u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f, \u043d\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u043b, \u0447\u0442\u043e \u0441\u0442\u0430\u0442\u0443\u0441 \u043f\u043e\u043c\u0435\u043d\u044f\u043b\u0441\u044f, \u0438 \u043f\u0443\u0448\u043d\u0443\u043b \u0441 \u0444\u043e\u0440\u0441\u043e\u043c.\n. \u0430 \u0437\u0430\u0447\u0435\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0442\u044c \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0441\u0441\u044b\u043b\u043e\u043a? \u041a\u0430\u043a \u044f \u043f\u043e\u043d\u044f\u043b, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u043b\u0438 \u043b\u0438\u043c\u0438\u0442\u0430 \u0432 65\u043a.\n. shell script from a gist starts gdb and make SIGSEGV happen right to your hands.\n```\n$ sh test.sh\nGNU gdb (Ubuntu 7.9-1ubuntu1) 7.9\n...\nReading symbols from tarantool...done\n...\nProgram received signal SIGSEGV, Segmentation fault.\n0x000000000044c01c in alter_space_commit (trigger=0x7ffff5821355)\n    at /home/yura/Projects/tarantool/tarantool/src/box/alter.cc:301\n301                                     old_index->key_def) == 0) {\n(gdb) bt\n0  0x000000000044c01c in alter_space_commit (trigger=0x7ffff5821355)\nat /home/yura/Projects/tarantool/tarantool/src/box/alter.cc:301\n\n1  0x000000000045585d in trigger_run (list=0x7ffff5821180, event=0x7ffff5821138)\nat /home/yura/Projects/tarantool/tarantool/src/trigger.h:60\n\n2  0x0000000000456322 in txn_commit (txn=0x7ffff5821138)\nat /home/yura/Projects/tarantool/tarantool/src/box/txn.cc:168\n\n3  0x00000000004541c9 in txn_commit_stmt (txn=0x7ffff5821138)\nat /home/yura/Projects/tarantool/tarantool/src/box/txn.h:123\n\n4  0x00000000004549f9 in execute_delete (request=0x7ffff589fe00, port=0x7ffff589fe50)\nat /home/yura/Projects/tarantool/tarantool/src/box/request.cc:137\n\n5  0x0000000000454ee1 in process_rw (request=0x7ffff589fe00, port=0x7ffff589fe50)\nat /home/yura/Projects/tarantool/tarantool/src/box/request.cc:211\n\n6  0x00000000004581a7 in lbox_delete (L=0x400c7370)\nat /home/yura/Projects/tarantool/tarantool/src/box/lua/call.cc:350\n\n7  0x00000000004f7d5a in lj_BC_FUNCC ()\n8  0x00000000004e2590 in lua_call ()\n9  0x0000000000487c73 in lbox_call (L=0x400c7370, nargs=3, nreturns=-1)\nat /home/yura/Projects/tarantool/tarantool/src/lua/utils.h:447\n\n10 0x0000000000488640 in box_lua_fiber_run(typedef __va_list_tag __va_list_tag *) (ap=0x7ffff5800540)\nat /home/yura/Projects/tarantool/tarantool/src/lua/fiber.cc:286\n\n11 0x0000000000496b1b in fiber_loop (data=0x0) at /home/yura/Projects/tarantool/tarantool/src/fiber.cc:402\n12 0x0000000000580598 in coro_init () at /home/yura/Projects/tarantool/tarantool/third_party/coro/coro.c:96\n```\n. Simplified test case a little. Things that matters:\n- two secondary indices\n- call to truncate from two concurrent console connections\n. (same for deletion)\n. \u0432\u043e\u043e\u0431\u0449\u0435\u043c, \u044f \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435 \u0441\u043c\u043e\u0433 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0430, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043c\u043e\u0433 truncate\nlua\nbox.schema.user.grant('test', 'read,write,create,drop,alter', 'space', 'test')                                                                                                                                      \nbox.schema.user.grant('test', 'read,write', 'space', '_index')                                                                             \nbox.schema.user.grant('test', 'read,write', 'space', '_space')\n\u0438 \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e\nFailed to truncate: Create, drop or alter access on space is denied for user 'test'\n\u0427\u0442\u043e \u044f \u0435\u0449\u0451 \u0437\u0430\u0431\u044b\u043b?\n. looks like \"index:update\" and \"index:delete\" is not documented.\n. What with master? will it be solved in other way? or some other decision will be chosen about updating by secondary index?\n. and here https://github.com/tarantool/tarantool/blob/1.6/src/box/iproto.cc#L622\n. ~~What happens, if you add \"if_not_exists\" option to all those create_space and create_index?~~\n. \u041b\u044e\u0431\u043e\u043f\u044b\u0442\u043d\u043e, \u0447\u0442\u043e unique=false \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f.. Why tarantool doesn't do mmap(BIG_HINT_ADDRESS) ?\n#define BIG_HINT_ADDRESS = (void*)(uintptr_t)0x432100000000 should work quite well (if OSX supports it well).. It will be extraordinary difficult to support in connectors... But I still +1 for this .. Why sync could not be storred in C fiber running current lua function?. I didn't mean to store it twice. If it is already reachable from fiber, then it is ok.\nI mean, why this stored sync could not be implicitly used? Without need in fetching and passing as argument by hands?. How you suggestion with lua map differs from storing sync in fiber itself?\nIf fiber is bound with request, then fiber is the right place to store sync (and sync can be implicitly fetched from). If not, then your map doesn't work either.\nWhat am I missing?. And don't forget about C api, Swift, Rust, etc.. > Not identical, because the weak map avoids storing application-specific data on the abstract fiber.\nNot application data, but internal implementation detail, because there is no single need for application code to know \"sync\".\n\nForgive my ignorance, but is the overhead really bad?\n\nMaps are hugely inefficient compared to local variables. Weak maps are much more expensive than regular map. If weak map could be avoided, it should be avoided.\n\nAre there not weak maps in these languages?\n\nDid you program in C? Rust? Swift probably has weak maps. C has no GC, so it has no.\nAnd it is ridiculous: all languages has access to fiber, but you suggest to store common piece of internal information in language specific way. LOL.. 1. latest commit in 2.0 branch\n2. 4 cores HT (8 virtual cores).\n16GB RAM (although some consumed by browser/editor/etc, but at least 10GB available) .\nConsumer grade, but quality SATA SSD (Dell's native option for workstations).\n3. Go 1.10.1 . I didn't change GOMAXPROCS.\n4. Ok, I will run it again.\nAre this questions because issue is not reproducible in your environment? . Oh, sorry, that was Tarantool 1.10.1-254-gac590da85 from branch 1.10.\nI've attached z_tarantool.log and z_test_tarantool.out to gist. SSD disk capable to 40k random iops as fio reported.\nI runned on encrypted volume and encrypted folder, therefore, performance was lower, and directio doesn't work.\nI've rerunned on non-encrypted partition.\nIt takes longer time to reproduce, but still after 6 minutes it failed (ie 10 second timeout exceeded).. > The issue has nothing to do with vinyl memory quota (and so throttling wouldn't help), otherwise we would see a lot of messages like the one below (there's none in the log you attached):\n\nvy_quota.h:170 W> waited for 555 bytes of vinyl memory quota for too long: 0.535 sec\n\nDamn :-( looks like I didn't copy whole log :-( most probably, clipboard buffer is too small for them. And Gist doesn't allow to attach buffer in web interface.\nIn fact there were a lot of such records.\nI will rerun that again. And will try to attach files to gist using git.\nExcuse me for that.. btw, it is a really bad idea to limit down vm.dirty_(bytes|ratio).\nIt is much better to set vm.dirty_background_(bytes|ratio). And also reduce vm.dirty_expire_centisecs and vm.dirty_writeback_centisecs.. Ok, I've runned again.\n- xa_tarantool.log , xa_test_tarantool.out - from default on non-encrypted partition\n- xb_tarantool.log, xb_test_tarantool.out - with vm.dirty_background_ratio=1, vm.dirty_expire_centisecs=100 and vm.dirty_writeback_centisecs=10.\n- xc_tarantool.log, xc_test_tarantool.out - same as previous, but also set vm.dirty_bytes=$((10<<20)) as you recommended. It runs for 13 minutes with longest stall for 7 seconds. Much better, but 7 seconds is still too much for production. And setting vm.dirty_bytes to such low value is still bad decision, imho.\nAt this moment I recognize, that snapshoting is a trigger. You can see it also by comparing times of stallness in test_tarantool.out and saving snapshots in tarantool.log\n\nxd_tarantool.log, xd_test_tarantool.out - same as before, but also set snap_io_rate_limit=10 in config.lua (documentation says, it is value in MB/sec). As you can see, things became worse. I previously tested snap_io_rate_limit=30 and it certainly were worse than without setting this value. And snap_io_rate_limit=10 is worse than snap_io_rate_limit=30. And I also repeated it with default sysctl parameters. Result is same.\n\nNote: 10 seconds is just to demonstrate awfulness of issue. In practice, even 2 seconds is already issue.\ncheckpoint_interval is so low because otherwise log files quickly eats whole space. Any way, snapshot should not trigger such huge delay even being on the same disk. It doesn't matter, happens it six times a minute or once a hour - issue is the issue.\nAt least, there should be workable configuration options to throttle snapshot and to not throttle vynil at the same time.\nYou can see that i had commented vinyl_write_threads in config.lua . So all logs are with default value (it should be equal to 2 according to documentation).. As far as I remember, there were no stalls on memtx.. ",
    "wallarm": "no, i can't reproduce it in 1.5.3.\n. ",
    "vbauer": "Thank you very much!\n. Another problems:\n``` bash\nVladislavs-MacBook-Air:Applications vbauer$ brew install http://tarantool.org/dist/stable/tarantool.rb\n################################################################## 100.0%\n==> Installing tarantool dependency: cmake\n==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/cmake-2.8.12.2.mavericks.bottle.2.tar.gz\n################################################################## 100.0%\n==> Pouring cmake-2.8.12.2.mavericks.bottle.2.tar.gz\n\ud83c\udf7a  /usr/local/Cellar/cmake/2.8.12.2: 701 files, 36M\n==> Installing tarantool\n==> Downloading http://tarantool.org/dist/tarantool-1.5.3-92-g6c51efd-src.tar.gz\ncurl: (22) The requested URL returned error: 404 Not Found\nError: Failed to download resource \"tarantool\"\n```\n``` bash\nVladislavs-MacBook-Air:Applications vbauer$ brew install http://tarantool.org/dist/master/tarantool.rb\n################################################################## 100.0%\n==> Downloading http://tarantool.org/dist/master/tarantool-1.6.2-29-g5e387fd-src.tar.gz\n################################################################## 100.0%\nWarning: MD5 support is deprecated and will be removed in a future version.\nPlease switch this formula to SHA1 or SHA256.\n==> cmake . -DCMAKE_BUILD_TYPE=RelWithDebugInfo -DCMAKE_LOCALSTATE_DIR=/usr/local/Cellar/tarantool/1.6.2/var -DCMAKE_SYSCONF_DIR=/usr/local/Cellar/tarantool/1.6.2/etc -DCMAKE_I\n==> make\nAR        libluajit.a\nar rcus 2>/dev/null libluajit.a lj_vm.o lj_gc.o lj_err.o lj_char.o lj_bc.o lj_obj.o lj_str.o lj_tab.o lj_func.o lj_udata.o lj_meta.o lj_debug.o lj_state.o lj_dispatch.o lj_vmevent.o lj_vmmath.o lj_strscan.o lj_api.o lj_lex.o lj_parse.o lj_bcread.o lj_bcwrite.o lj_load.o lj_ir.o lj_opt_mem.o lj_opt_fold.o lj_opt_narrow.o lj_opt_dce.o lj_opt_loop.o lj_opt_split.o lj_opt_sink.o lj_mcode.o lj_snap.o lj_record.o lj_crecord.o lj_ffrecord.o lj_asm.o lj_trace.o lj_gdbjit.o lj_ctype.o lj_cdata.o lj_cconv.o lj_ccall.o lj_ccallback.o lj_carith.o lj_clib.o lj_cparse.o lj_lib.o lj_alloc.o lib_aux.o lib_base.o lib_math.o lib_bit.o lib_string.o lib_table.o lib_io.o lib_os.o lib_package.o lib_debug.o lib_jit.o lib_ffi.o lib_init.o\n/usr/local/Cellar/cmake/2.8.12.2/bin/cmake -E cmake_progress_report /tmp/tarantool-orvs/tarantool-1.6.2-29-g5e387fd-src/CMakeFiles  70\n[ 40%] Built target libluajit\nmake: *** [all] Error 2\nREAD THIS: https://github.com/Homebrew/homebrew/wiki/troubleshooting\n```\nPS: Could you please also update documentation? https://github.com/tarantool/tarantool/blob/master/README.MacOSX\n. ",
    "locker": "This is a duplicate of #2634.. For vinyl, index drop is already fast enough as we only need to drop key ranges, not individual tuples. For memtx, the issue will be fixed in the scope of #3408.. I suggest to add per-subsystem statistics first which could be used not\nonly for querying information about memory consumption but also for\nreporting other subsystem statistics similarly to how it is done in case\nof vinyl (see box.info.vinyl()) and then use this information to show\naggregated memory usage in Lua.\nHere's the list of subsystems and the proposed statistics output:\n\nVinyl. It already has its own statistics, reported by index:info()\nand box.info.vinyl(), but they lack memory usage information. I propose\nto extend the existing statistics with the following counters:\n\nbox.info.vinyl()\n    memory\n      data          # Size of user data stored in memory.\n      index         # Index size.\n      page_index    # Page index size.\n      bloom_filter  # Bloom filter size.\n      allocated     # Total amount of memory allocated for vinyl.\n                    # (vinyl arena + bloom filters + page indexes)\n\nMemtx. Similarly to Vinyl, let's add box.info.memtx() with the\nfollowing output:\n\nbox.info.memtx()\n    memory\n      data          # User data size.\n        used\n        total\n      index         # Index size.\n        used\n        total\n      allocated     # Size of the memtx arena.\n\nFiber. We already have per fiber memory usage. Let's also account\nthe total size of memory consumed by all fibers and report it via\nfiber.info():\n\nfiber.info()\n    memory\n      used\n      total\n\nNetwork. What we really need to know is how much memory is used by\nnetwork buffers. Let's add appropriate information to box.info:\n\nbox.info.net()\n    input_buffer\n      used\n      total\n    output_buffer\n      used\n      total\nAggregated statistics should look like this:\nbox.info.memory()\n    data            # = vinyl.data + memtx.data.total\n    index           # = vinyl.index + vinyl.page_index +\n                    #   vinyl.bloom_filter + memtx.index.total\n    fiber           # = fiber.memory.total\n    net             # = input_buffer.total + output_buffer.total\n    lua             # = box.runtime.info().lua\nIt should be enough for the admin (and us) to narrow down the problem\nso that he knows which subsystem to examine next.. After pondering over the proposed design for a while we've agreed that aggregating memory statistics of all engines in one table is a dubious idea, because the two existing engines are way too different. To name a few, memtx allocator is susceptible to memory fragmentation while vinyl is not; vinyl has interactive transactions while memtx doesn't; vinyl has tuple cache while for memtx it wouldn't make any sense. So we've decided to separate memtx and vinyl statistics and hand over statistics aggregation to the tarantool stat module so as not to pollute the core API.\nVinyl statistics are already present and show more-or-less sane info - see box.info.vinyl(). For memtx, I suggest to add box.info.memtx() which would return a table with the following fields:\nbox.info.memtx()\n  memory\n    data\n      used\n      size\n    index\n      used\n      size\nThe fields would map to the output of box.slab.info() as follows:\nmemory.data.used = items_used\nmemory.data.size = items_size\nmemory.index.used = arena_used - items_used\nmemory.index.size = arena_size - items_size\nWe also need net statistics as network buffers can grow large and consume a significant amount of the server memory. I propose the following format for net statistics:\nbox.info.net()\n  input         # input buffer statistics\n    used        #   memory in use\n    size        #   memory allocated\n  output        # output buffer statistics\n    used        #   memory in use\n    size        #   memory allocated\n  connections   # number of active connections\nRegarding tx statistics, I don't think we need them right now as amount of memory consumed by active transactions should be negligible in comparison to the total memory used for storing data.. We had a face-to-face discussion with @kostja and @rtsisyk. We agreed that although aggregated statistics are not suitable for detailed analysis (for that we need per subsystem stats similar to those proposed above), they can be really useful for our users to get a general knowledge about what's going on with a tarantool instance. That said, we need both subsystem-specific and aggregated stats. In fact, these are two independent tasks.\nRegarding the aggregated stats, here's the table with a description of each field:\n- data - size of memory in bytes used for storing user data (i.e. tuples) in memtx and in vinyl level 0, without taking account fragmentation.\n- index - size of memory in bytes used for indexing user data. This includes memtx and vinyl memory tree extents, vinyl page index, vinyl bloom filters.\n- cache - size of memory in bytes used for caching user data. Memtx doesn't have cache so basically this is the size of the vinyl tuple cache.\n- tx - size of memory in bytes used up by active transactions. For vinyl it is the total size of all allocated struct txv, struct vy_tx, struct vy_read_interval, plus tuples pinned by those objects. For memtx it is going to be 0 for now as memtx transaction manager shouldn't consume much memory. We may want to account struct txn and struct txn_stmt there too in future.\n- net - size of memory in bytes used up by network input and output buffers.. What remains to be done:\n1. Count references to iproto connections explicitly. Currently, we assume that a connection is idle if it has no data in the input buffer. This won't hold if we discard the input of a call request before completing the call. Hence we need to reference connections explicitly, e.g. by counting messages allocated for each connection. This should be pretty easy to do.\n2. Refactor box_process_call() and box_process_eval() so that they are not passed the iproto output buffer explicitly. Why: the output buffer can be rotated while a call is in progress, in which case the call will write its result to a wrong buffer. To avoid that, we can use struct port to store the result of a call and write the result to the output buffer upon call completion, without a yield.\n3. Apply the patch by @Gerold103 that makes call request discard input right after pushing call arguments to Lua stack. See 4206ec7228410fbf576a839320e6649d18f3f206.. @TarantoolBot document\nTitle: Document that vinyl supports altering non-empty spaces\nspace.format, space.create_index and index.alter can now be used for non-empty vinyl spaces with one exception: primary index definition can't be altered.. Proposal\n1. Both per index and global stats:\n```\n   keys\n   bytes\n   keys_read\n   bytes_read\n   keys_written\n   bytes_written\nmem_keys\n   mem_bytes\n   mem_keys_read\n   mem_bytes_read\n   mem_keys_written\n   mem_bytes_written\ncache_keys\n   cache_bytes\n   cache_keys_read\n   cache_bytes_read\n   cache_keys_written\n   cache_bytes_written\n   cache_keys_evicted\n   cache_bytes_evicted\nbloom_hit\n   bloom_miss\ndisk_pages\n   disk_keys\n   disk_bytes\n   disk_pages_read\n   disk_keys_read\n   disk_bytes_read\n   disk_pages_written\n   disk_keys_written\n   disk_bytes_written\n   disk_pages_written_compact\n   disk_keys_written_compact\n   disk_bytes_written_compact\n   disk_pages_written_dump\n   disk_keys_written_dump\n   disk_bytes_written_dump\nwrite_ampl       (write amplification)\nread_ampl        (read amplification in bytes read from disk)\n   read_ampl_seeks  (read amplification in disk seeks)\nread_latency_avg\n   read_latency_max\nbloom_size       (in memory)\n   page_index_size  (in memory)\nupsert_applied\n   upsert_squashed\n2. Global stats (box.info.vinyl)\n   quota_used\n   quota_watermark\n   quota_limit\nwrite_rate\n   dump_bandwidth\ntx_commit\n   tx_rollback\n   tx_conflict\n   tx_active\n3. Index stats (index.info)\n   range_count\n   run_count\n   runs_in_range    (histogram)\ndump_count\n   compact_count\n   maj_compact_count\n   range_split_count\n   range_coalesce_count\n4. Range stats (index.info.ranges)\n   begin_key\n   end_key\nrun_count\npages_approx (this and the following two counters are estimated)\n   keys_approx\n   bytes_approx\ncompact_count\n   maj_compact_count\n. This is how it will look in yaml:\ntarantool> box.info.vinyl()\n\n\nmem_keys_read: 2008\n  cache_bytes_written: 3245343\n  bytes: 1288069\n  read_latency_max: 0.11\n  cache_keys_read: 3244\n  cache_used_ratio: 87%\n  write_ampl: 11.2\n  cache_keys_written: 2343\n  read_latency_avg: 0.02\n  disk_keys: 23424\n  cache_keys: 323\n  tx_active: 0\n  quota_used_ratio: 55%\n  bytes_written: 40404586\n  tx_rollback: 23\n  mem_keys_written: 44000\n  dump_bandwidth: 34535\n  page_index_size: 2342452\n  quota_watermark: 7000000\n  cache_keys_evicted: 2342\n  disk_keys_written: 23422\n  tx_conflict: 12\n  quota_used: 5500000\n  disk_pages_written_dump: 1231\n  mem_bytes: 4008080\n  upsert_applied: 234243\n  bloom_miss: 324\n  write_rate: 12321\n  mem_bytes_read: 2003888\n  read_ampl_seeks: 6.8\n  bloom_size: 123143\n  disk_pages_read: 3245\n  disk_bytes_written_dump: 234234\n  cache_bytes: 3243245\n  quota_limit: 10000000\n  mem_bytes_written: 44099307\n  disk_pages_written_compact: 12334\n  disk_bytes_written_compact: 2342425\n  disk_keys_written_dump: 12313\n  tx_commit: 1322\n  cache_bytes_read: 4324536\n  read_ampl: 5.5\n  keys: 1233\n  mem_keys: 400\n  keys_written: 40300\n  bytes_read: 2004004\n  disk_keys_written_compact: 234255\n  cache_bytes_evicted: 23453254\n  keys_read: 20040\n  upsert_squashed: 32342\n  bloom_hit: 23423\n  disk_bytes_read: 2342432\n  disk_pages: 2342\n  disk_bytes: 2342324\n  disk_keys_read: 34324\n  disk_pages_written: 2342\n...\nIt would look better if we sorted it:\ntarantool> box.info.vinyl()\n\n\n\nbloom_hit: 23423\n  bloom_miss: 324\n  bloom_size: 123143\n  bytes: 1288069\n  bytes_read: 2004004\n  bytes_written: 40404586\n  cache_bytes: 3243245\n  cache_bytes_evicted: 23453254\n  cache_bytes_read: 4324536\n  cache_bytes_written: 3245343\n  cache_keys: 323\n  cache_keys_evicted: 2342\n  cache_keys_read: 3244\n  cache_keys_written: 2343\n  cache_used_ratio: 87%\n  disk_bytes: 2342324\n  disk_bytes_read: 2342432\n  disk_bytes_written_compact: 2342425\n  disk_bytes_written_dump: 234234\n  disk_keys: 23424\n  disk_keys_read: 34324\n  disk_keys_written: 23422\n  disk_keys_written_compact: 234255\n  disk_keys_written_dump: 12313\n  disk_pages: 2342\n  disk_pages_read: 3245\n  disk_pages_written: 2342\n  disk_pages_written_compact: 12334\n  disk_pages_written_dump: 1231\n  dump_bandwidth: 34535\n  keys: 1233\n  keys_read: 20040\n  keys_written: 40300\n  mem_bytes: 4008080\n  mem_bytes_read: 2003888\n  mem_bytes_written: 44099307\n  mem_keys: 400\n  mem_keys_read: 2008\n  mem_keys_written: 44000\n  page_index_size: 2342452\n  quota_limit: 10000000\n  quota_used: 5500000\n  quota_used_ratio: 55%\n  quota_watermark: 7000000\n  read_ampl: 5.5\n  read_ampl_seeks: 6.8\n  read_latency_avg: 0.02\n  read_latency_max: 0.11\n  tx_active: 0\n  tx_commit: 1322\n  tx_conflict: 12\n  tx_rollback: 23\n  upsert_applied: 234243\n  upsert_squashed: 32342\n  write_ampl: 11.2\n  write_rate: 12321\n...\nAlternatively, we could group statistics in tables by category:\ntarantool> box.info.vinyl()\n\n\n\nwrite_rate: 12321\n  bytes_written: 40404586\n  page_index_size: 2342452\n  bytes: 1288069\n  cache:\n    keys_evicted: 2342\n    keys: 323\n    bytes_written: 3245343\n    bytes: 3243245\n    bytes_evicted: 23453254\n    bytes_read: 4324536\n    keys_read: 3244\n    keys_written: 2343\n    used: 87%\n  write_ampl: 11.2\n  dump_bandwidth: 34535\n  read_ampl: 5.5\n  keys: 1233\n  keys_written: 40300\n  read_latency:\n    avg: 0.02\n    max: 0.11\n  quota:\n    watermark: 7000000\n    used_ratio: 55%\n    limit: 10000000\n    used: 5500000\n  mem:\n    keys: 400\n    bytes_written: 44099307\n    bytes_read: 2003888\n    keys_written: 44000\n    bytes: 4008080\n    keys_read: 2008\n  upsert:\n    applied: 234243\n    squashed: 32342\n  read_ampl_seeks: 6.8\n  disk:\n    pages_read: 3245\n    bytes_written_compact: 2342425\n    keys_written: 23422\n    pages_written_compact: 12334\n    bytes: 2342324\n    bytes_written_dump: 234234\n    keys_written_compact: 234255\n    pages_written_dump: 1231\n    pages_written: 2342\n    keys_written_dump: 12313\n    bytes_read: 2342432\n    pages: 2342\n    keys: 23424\n    keys_read: 34324\n  tx:\n    conflict: 12\n    active: 0\n    commit: 1322\n    rollback: 23\n  bytes_read: 2004004\n  bloom_size: 123143\n  bloom:\n    hit: 23423\n    miss: 324\n  keys_read: 20040\n...\n.\n\n\nThe following stats are accounted both per index and database-wise\n\nrows        # total number of statements\nbytes       # size of all statements, in bytes\nread        # rows/bytes read from the index/database\n  rows\n  bytes\nwritten     # rows/bytes written to the index/database\n  rows\n  bytes\nmem\n  rows      # number of in-memory statements\n  bytes     # size of in-memory statements, in bytes\n  read      # rows/bytes read from memory\n    rows\n    bytes\n  written   # rows/bytes written to memory\n    rows\n    bytes\ncache\n  rows      # number of cached statements\n  bytes     # size of cached statements, in bytes\n  read      # rows/bytes read from cache\n    rows\n    bytes\n  written   # rows/bytes written to cache\n    rows\n    bytes\n  evicted   # rows/bytes evicted from cache\n    rows\n    bytes\nbloom\n  hit       # number of times bloom filter spared disk read\n  miss      # number of times bloom filter failed to spare disk read\n  size      # total size occupied by bloom filters in memory, in bytes\ndisk\n  rows      # number of on-disk statements\n  bytes     # size of on-disk statements, in bytes\n  pages     # number of pages on disk\n  runs      # number of run files\n  read      # rows/bytes/pages read from disk\n    rows\n    bytes\n    pages\n  written       # rows/bytes/pages/runs written to disk\n    rows\n    bytes\n    pages\n    runs\n  written_compact   # rows/bytes/pages/runs written to disk by compaction\n    rows\n    bytes\n    pages\n    runs\n  written_dump      # rows/bytes/pages/runs written to disk by dump\n    rows\n    bytes\n    pages\n    runs\n  index_size    # total size occupied by page index in memory, in bytes\n  latency   # disk read latency, in seconds\nlatency     # latency of reading a key from the index/database, in seconds\n        # latencies are calculated as 99-percentile of all measurements\n        # alternatively, we could report a histogram\nseeks_per_read  # number of seeks per read request\n        # computed as disk.read.pages / read.rows\nwrite_amp   # write amplification\n  rows      #   disk.written.rows  / written.rows\n  bytes     #   disk.written.bytes / written.bytes\nread_amp    # read amplification\n  rows      #   disk.read.rows  / read.rows\n  bytes     #   disk.read.bytes / read.bytes\n\nDatabase stats (box.info.vinyl)\n\nquota\n  used          # quota used, in bytes\n  watermark     # quota watermark, in bytes\n  limit         # quota limit, in bytes\n  use_rate      # quota consumption rate, bytes per sec\n  dump_bandwidth    # quota release rate, bytes per sec\ntx\n  commit        # number of transactions committed\n  rollback      # number of transactions roll-backed\n  conflict      # number of transactions aborted due to conflict\n  active        # number of transactions in-flight\n\nIndex stats (index.info)\n\ndump_count      # number of times the index has been dumped\ncompact_count       # number of range compaction events\nmajor_compact_count # number of range major compaction events\nsplit_count     # number of range split events\ncoalesce_count      # number of range coalesce events\nruns_in_range       # histogram: run count => range count\nrange_count     # number of ranges in the index\nrange_list      # array of all index ranges\n\nRange stats (index.info.range_list)\n\nbegin           # range begin key\nend         # range end key\nrows            # number of rows stored in the range (approximate)\nbytes           # number of bytes stored in the range (approximate)\npages           # number of pages in the range (approximate)\nruns            # number of run slices in the range\ncompact_count       # number of times runs in the range have been compacted\nmajor_compact_count # number of times all runs in the range have been compacted\n``. Temporary reopen - we need to add a test case for this issue.\n. Similar crash, may be related. Triggered by./test-run.py vinyl/stress --long` at commit cbfb7e8ce3906:\n```\n0  0x00007ff2a1011067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56\n1  0x00007ff2a1012448 in __GI_abort () at abort.c:89\n2  0x00007ff2a100a266 in __assert_fail_base (fmt=0x7ff2a1143238 \"%s%s%s:%u: %s%sAssertion `%s' failed.\\n%n\", assertion=assertion@entry=0x62568c \"tnode != &rbtree->rbt_nil\",\nfile=file@entry=0x624a00 \"/home/vlad/src/tarantool/src/box/vinyl.c\", line=line@entry=2859, function=function@entry=0x6278a0 <__PRETTY_FUNCTION__.14430> \"vy_range_tree_next\") at assert.c:92\n\n3  0x00007ff2a100a312 in GIassertfail (assertion=0x62568c \"tnode != &rbtree->rbt_nil\", file=0x624a00 \"/home/vlad/src/tarantool/src/box/vinyl.c\", line=2859, function=0x6278a0 <PRETTY_FUNCTION.14430> \"vy_range_tree_next\")\nat assert.c:101\n\n4  0x000000000045bb69 in vy_range_tree_next (rbtree=0x166a2d0, node=0x7ff26d5da300) at /home/vlad/src/tarantool/src/box/vinyl.c:2857\n5  0x000000000045de13 in vy_rangeiter_next (ii=0x7ff2a09dfb18) at /home/vlad/src/tarantool/src/box/vinyl.c:2982\n6  0x000000000046f1a1 in vy_read_iterator_next_range (itr=0x7ff2a09dfaf0) at /home/vlad/src/tarantool/src/box/vinyl.c:9004\n7  0x000000000046f59e in vy_read_iterator_get (itr=0x7ff2a09dfaf0, result=0x7ff2a09dfbf8) at /home/vlad/src/tarantool/src/box/vinyl.c:9073\n8  0x000000000046f870 in vy_index_read (index=0x166a0a0, key=0x26beff0, order=VINYL_GT, result=0x7ff2a09dfbf8, tx=0x7ff2a09b0080) at /home/vlad/src/tarantool/src/box/vinyl.c:9137\n9  0x0000000000469eaa in vy_cursor_next (c=0x7ff2a09b0080, result=0x7ff2a09dfc38) at /home/vlad/src/tarantool/src/box/vinyl.c:6723\n10 0x00000000004466b0 in VinylIndex::iterator_next (this=0x1626170, iter=0x4b84950) at /home/vlad/src/tarantool/src/box/vinyl_index.cc:249\n11 0x0000000000446949 in vinyl_iterator_next (ptr=0x4b84950) at /home/vlad/src/tarantool/src/box/vinyl_index.cc:332\n12 0x000000000043a8cd in Handler::executeSelect (this=0x15e53a0, space=0x1668f10, index_id=0, iterator=5, offset=0, limit=1415, key=0x7ff2a09b9039 \"\\315\\004\\222PPPP@na\", port=0x7ff2a09dfdf0)\nat /home/vlad/src/tarantool/src/box/engine.cc:250\n\n13 0x000000000048297e in box_select (port=0x7ff2a09dfdf0, space_id=514, index_id=0, iterator=5, offset=0, limit=1415, key=0x7ff2a09b9038 \"\\221\\315\\004\\222PPPP@na\", key_end=0x7ff2a09b903c \"PPPP@na\")\nat /home/vlad/src/tarantool/src/box/box.cc:608\n\n14 0x000000000049d7d7 in lbox_select (L=0x406c0770) at /home/vlad/src/tarantool/src/box/lua/misc.cc:95\n15 0x00000000004e142b in lj_BC_FUNCC ()\n16 0x00000000005023dc in lua_pcall (L=0x406c0770, nargs=2, nresults=0, errfunc=0) at lj_api.c:1055\n17 0x00000000004c20bf in lbox_call (L=0x406c0770, nargs=2, nreturns=0) at /home/vlad/src/tarantool/src/lua/utils.c:946\n18 0x00000000004bc3a1 in lua_fiber_run_f (ap=0x7ff2a08018d0) at /home/vlad/src/tarantool/src/lua/fiber.c:267\n19 0x000000000040acb3 in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x4bc2e1 , ap=0x7ff2a08018d0) at /home/vlad/src/tarantool/src/fiber.h:593\n20 0x00000000004cf8cf in fiber_loop (data=0x0) at /home/vlad/src/tarantool/src/fiber.c:477\n21 0x000000000060f2b7 in coro_init () at /home/vlad/src/tarantool/third_party/coro/coro.c:110\n```\n. It seems that the problem occurs, because (1) dump task has a higher prio than compact and (2) there's a strict limit on the size of a range's in-memory index - cfg.vinyl.range_size. The Lua script inserts new statements so quickly that dump doesn't catch up and so there's always a range to dump. As a result, we never call compact and hence have the number of ranges growing without bounds.\nPer se, prioritizing dump over compact looks reasonable to me, because if we don't offload in-memory data in time, we will get throttled hitting the quota hard. However, I find the cfg.vinyl.range_size limit to be artificial and unnecessary. I think we should get rid of it and schedule dump only on global quota shortage (or checkpoint). If there's no risk of hitting the quota, it should be up to compact to decide when a range's in-memory index should be dumped (by compacting it with one or more on-disk runs). For example, it might be worth scheduling compaction of a range if its in-memory index is as big as the smallest run on disk. That said, this problem is sort of tied to the multi-level design.\nIt should also be noted that just removing cfg.vinyl.range_size limitation wouldn't be enough, because if the client is so fast that it manages to consume the global quota before a range is dumped, then we would face the exactly same problem. To avoid that, we should throttle the client when dump doesn't catch up.\n. Accidentally fixed by 1e1c1fdbeddb7677b8bbde318ca85eabff78ca3c. todo: log whenever throttling is enabled\n. Fixed by commit c0d8063b6a2d8141ca4064c2b76101fb28ea3479. We already replace INSERT with REPLACE during recovery - see src/box/vinyl.c. Regarding UPDATE vs UPSERT, we can't do that, because UPSERT contains a full tuple to insert while UPDATE doesn't.. Needed for #1821. # Implementation draft\nRUN_TABLE {index_lsn, run_id, space_id, index_id, state, begin, end}\nindex_lsn - lsn of index creation [part of the primary key]\nrun_id - ID of the run, unique index-wide [part of the primary key]\nspace_id - ID of the space this run is for\nindex_id - ID of the index this run is for\nstate - run state, one of COMMITTED, DELETED, RESERVED, FAILED\nbegin, end - boundaries of the range this run is for\nINDEX CREATE\n1. Create new mem spanning (-inf, +inf).\n2. Insert record {COMMITTED, -inf, +inf} for the new mem.\nINDEX DROP\nUnref the index's in-memory structure.\nDUMP PREPARE\n1. Create a new mem spanning the range being dumped.\n2. Insert record {COMMITTED, begin, end} for the new mem.\nDUMP EXECUTE\nWrite all mems, but the newest one (i.e. the one allocated on DUMP PREPARE), to separate files, named after their IDs.\nDUMP COMPLETE/ABORT\n1. Add runs produced by DUMP EXECUTE to the range.\n2. Delete all dumped mems.\nCOMPACT PREPARE\n1. Create a new run spanning the range being compacted.\n2. Insert record {RESERVED, begin, end} for the new run.\nCOMPACT EXECUTE\nCompact on-disk runs and write them to the file, named after the new run's ID.\nCOMPACT COMMIT\n1. Update records of compacted runs to {DELETED} and update the record for the new run to {COMMITTED}, all in one transaction. If it fails, we need to abort compaction.\n2. Delete compacted runs from the range and insert the new run instead.\nCOMPACT ABORT\n1. Delete the new run.\n2. Update the record of the new run to {FAILED}. Don't care if it fails.\nSPLIT PREPARE\n1. Create new ranges which will replace the original range, each having one mem and one run.\n2. Link mems of the new ranges to the old range, so that new inserts will be dispatched to the new ranges.\n3. For each new mem, insert record {COMMITTED, begin, end}. For each new run, insert record {RESERVED, begin, end}. All in one transaction.\nSPLIT EXECUTE\n1. Dump mems of the original range to the files named after their IDs.\n2. Compact runs and mems of the original range, split the result into N parts and write each part to the file named after the corresponding new run's ID.\nSPLIT COMMIT\n1. In one transaction, update records corresponding to new ranges' runs to {COMMITTED} and update records corresponding to the old range's mems and runs to {DELETED}.\n2. Unlink new ranges from the old range and delete the latter.\nSPLIT ABORT\n1. Mark all records corresponding to runs of new ranges as {FAILED}. Don't care if it fails.\n2. Link mems of new ranges to the original range, delete new ranges along with their incomplete runs.\nCOALESCE (NOT IMPLEMENTED YET)\n1. Create a new range spanning one or more neighboring ranges.\n2. Try to insert record {COMMITTED, begin, end} for the new range and mark records corresponding to the old ranges as {DELETED}. All in one transaction. If it fails, abort the operation.\n3. Relink the old ranges' mems and runs to it, insert it to the tree, and delete the old ranges.\nSNAPSHOT\nIterate over the RUN_TABLE and delete all {DELETED} and {FAILED} records, removing the corresponding files on disk if any. Do not remove {RESERVED} records as they may be still in use - remove such records only after successful recovery.\nRECOVERY\n1. Install triggers on the RUN_TABLE at the start of recovery, uninstall the triggers after recovery completes.\n2. When recovering from snapshot, ignore all records except {COMMITTED}. When recovering from xlog, ignore all records except {COMMITTED} and {DELETED}.\n3. When a {DELETED} record is encountered, lookup the range spanning the run being deleted, then the run with the given ID, and delete it.\n4. When a {COMMITTED} record is encountered, lookup the range intersecting the run being inserted, check if the intersection is correct (i.e. it could really happen), replay dump or compact or split or coalesce as necessary, insert the run or the mem depending on whether the file with the given ID exists on disk.\n5. On a normal record from xlog (like insert to a table), lookup the range the record should go to, check its max_lsn (as read from the file). If the record's lsn is less than max_lsn, ignore it.. Fixed by f69907db0e4258c7ded242f672f0b2c1c664652c. Fixed by a6edd4559bca4b7df480cb54874ad517f0719591. @nekufa Blackhole engine, which is used for _vinyl_deferred_delete space, doesn't support indexes so I guess you should skip validation for this space or, even better, for all spaces that don't have any indexes.. To fix this issue, we need to introduce say_ratelimited(), which takes a rate limit state as an additional argument and suppresses the message if the rate limit is exceeded, similarly to how it is done here. This way, for each particular say() call site, we can decide whether it needs rate limiting or not and if it does how many messages can be printed per unit of time tops.\nSocketError, which is the source of log spamming in this issue, should have a rate limit state shared among all objects of this class. The class then should override Exception::log() method so that it uses say_ratelimited() with the shared rate limit state instead of say(). This should resolve the log spamming problem described here and lay the foundation for fixing similar issues that may be reported in future.. I think we should raise priority of this issues, because I'm seeing customers complaining to logs being quickly inflated to dozens of gigabytes, because of millions of messages like this:\n2018-11-12 03:44:02.144 [20] main/420404/main vy_quota.c:245 W> waited for 760 bytes of vinyl memory quota for too long: 6.874 sec\n2018-11-12 03:44:04.273 [20] main/402386/main txn.c:295 W> too long WAL write: 1 rows at LSN 1216903745: 0.823 sec\n2018-11-12 03:44:04.508 [20] iproto/101/main iproto.cc:532 W> stopping input on connection fd 646, aka 10.0.0.1:3800, peer of 10.0.0.3:52656, net_msg_max limit is reached\n2018-11-12 03:44:23.360 [20] iproto iproto.cc:521 W> stopping input on connection fd 68, aka 10.0.0.1:3800, readahead limit is reached\nThis makes the problem really difficult to investigate. We should suppress similar messages, something like this:\n2018-11-12 03:44:23.360 [20] iproto iproto.cc:521 W> stopping input on connection fd 68, aka 10.0.0.1:3800, readahead limit is reached\n2018-11-12 03:44:23.360 [20] iproto iproto.cc:521 W> 1021 messages suppressed\n. Also, printing those useless messages seem to eat quite a bit of cpu time.. Fixed by b4b40411198007ff446f4e307399e7ffc8400033. > Already done:\n\n\nstatistics\nsplit\ndump\n\nTo add:\n- coalesce\n\nTo test that, make vinyl/coalesce.test.lua restart the server and check the space content after recovery. Actually, we should test range splitting there as well, as this test needs to split ranges before it\ncan coalesce them, anyway.\n\n\ndata is restored fully -  for every index (so, multiple indexes)\ndata from mem filies is not lost\nempty space is recovered correctly\ntest that infiniruns are added correctly\n\nAll this works while:\n\nshutdown happens during dump\nshutdown happens during compact\n\n\nThis is already tested by vinyl/errinj_gc.test.lua: it checks that incomplete run files don't break recovery.\n\n\nshutdown happens during split/coalesce\n\n\nThis doesn't make sense: split/coalesce doesn't involve a worker thread anymore - it is done instantly in tx.\n\n\nthe number of worker threads is > 2, so that there may be more than one compact in progress\n\n\nAlready done: vinyl/vinyl.lua sets vinyl_write_threads to 3.\n\n\nthe number of secondary keys is large and shutdown happens at dump of any key\n\n\nAlready tested by vinyl/partial_dump.test.lua\n\n\nmemory quota is lowered after restart (Vinyl must not stall while replaying WAL in this case, it should forcefully consume quota instead)\n\n\nExtend vinyl/recovery_quota.test.lua. Fixed by d40d611d57dd00b1a580c6df146cde9a9a8a0485. What should be done here as well, as requested by @kostja:\n\nPlease add a test case for vinyl_index_abort_create() during recovery, with force_recovery set to true and error which leads to abort.. MyRocks seems to have a similar feature. Should be fairly easy to implement. In particular, it would be useful for storing logs on vinyl.. If we removed row index from .run files, we could update page_size index option on disk by simply removing all .index files and restarting tarantool with box.cfg.force_recovery=true to force regeneration of .index files with the new page size. Although such a procedure would imply a significant downtime (tarantool wouldn't listen to connections until regeneration is complete), it would take much less time than forcing major compaction (see #3139), besides it wouldn't disrupt the LSM structure, which is really useful for performance testing and tuning.. Duplicate of #1653. Fixed by b4b40411198007ff446f4e307399e7ffc8400033. Currently, the log_nonblock option doesn't work if logging is done via syslog (although it's going to be fixed soon - see #2466), i.e. it only makes sense for pipe- and file-based loggers. Write to a file opened with O_APPEND is guaranteed to be atomic - see write(2). Write to a pipe of size PIPE_BUF or less (<= 4K, typically) is guaranteed to be atomic as well - see pipe(7). That said, the issue described here doesn't seem to have ever existed.. Fixed by e8e7ed18ea40e155639b7de77573ff1b46da0097. The first crash should be fixed by commit 053f8335b3f873734663e4ed25e98ad8a621b341\nThe second crash should be fixed by commit 3a73e5dcaa8c5e6cf647e94eb6dab98964c0193c. Another manifestation of the same bug:\n$ ./test-run.py -j -1 replication/catch.test.lua replication/gc.test.lua --conf memtx --long\nresults in\n```\n\n0  0x00007fea548be067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56\n1  0x00007fea548bf448 in __GI_abort () at abort.c:89\n2  0x000000000040c3f9 in sig_fatal_cb (signo=11) at /home/vlad/src/tarantool/src/main.cc:186\n3  \n4  0x000000000050419e in stailq_concat (head1=0x7fea5443f688, head2=0x7fea5444f730) at /home/vlad/src/tarantool/src/lib/salad/stailq.h:142\n5  0x0000000000505a02 in cpipe_flush_cb (loop=0xa85900 , watcher=0x7fea5444f748, events=16777216) at /home/vlad/src/tarantool/src/cbus.c:239\n6  0x00000000006b677c in ev_invoke_pending (loop=0xa85900 ) at /home/vlad/src/tarantool/third_party/libev/ev.c:3176\n7  0x00000000006b766a in ev_run (loop=0xa85900 , flags=0) at /home/vlad/src/tarantool/third_party/libev/ev.c:3576\n8  0x000000000040d889 in main (argc=3, argv=0x14814b8) at /home/vlad/src/tarantool/src/main.cc:646\n``. So, this issue is actually about interactive transactions (#2016). Currently, transactions usefiber()->gc` for storing statements so we can't start a transaction in one fiber and commit it in another fiber, which is what interactive transactions are about in a nutshell. There is a number of things we have to take into account when implementing interactive transactions:\n\nI think we should leave fiber()->gc as is, because it's quite useful as extra stack - fiber stack is quite limited so having a practically inexhaustible stack extension comes in handy.\nI don't think we can move fiber()->gc to cord()->gc, because there are places in the code where we allocate something on the region, then yield, then use it. Moving the region to cord()->gc wouldn't allow us to do that, which looks like a rather artificial limitation to me.\nCreating a new region per each transaction (txn->gc) is rather expensive both from cpu and from memory consumption point of view, because we would have to allocate a slab per each active transaction. Even non-interactive transactions would be affected.\n\nKeeping those in mind, I suggest the following implementation:\n\nAdd a region to struct txn. Left it uninitialized when a transaction is started. As before, allocate transaction data from fiber()->gc.\nC\nstruct txn {\n    /* ... */\n    struct region gc;\n}\nAdd new method for detaching/attaching a transaction from/to a fiber. The methods will move all slabs and stats from fiber()->gc to txn->gc or vice versa (this is what region_swap is supposed to do):\nC\nvoid txn_detach(struct txn *txn)\n{\n    assert(in_txn() == txn);\n    region_create(&txn->gc, &cord()->slabc);\n    region_swap(&txn->gc, &fiber()->gc);\n    fiber_set_txn(fiber(), NULL);\n}\nvoid txn_attach(struct txn *txn)\n{\n    assert(in_txn() == NULL);\n    region_swap(&txn->gc, &fiber()->gc);\n    region_destroy(&txn->gc);\n    fiber_set_txn(fiber(), txn);\n}\nUse txn_detach on an interactive transaction upon returning from CALL/EVAL. Use txn_attach on an interactive transaction upon the next CALL/EVAL.\n\nSuch a design will introduce absolutely no overhead if interactive transactions are not used. For interactive transactions, we will have to allocate and maintain a slab, but this is what we have to do anyway.. Fixed by a6c87bf9ac99a633c578aeb3919a09293bc235e3. Fixed by a31c2c10347cbd131395ebdd93d64069923f5286. Invalid usage of iconv.new(): it expects the first argument to be the target encoding, the second argument to be the source encoding. So you should call iconv.new('UTF8', 'CP1251'), not vice versa.. Fixed by 71c18042c3a80e4ff98793b4489c8959a42593c9. Fixed by bad0484d03ab5e87cef4c257ff3c6e9d57c23615. Can't reproduce anymore:\nTarantool 1.7.5-126-g223c6265\ntype 'help' for interactive help\ntarantool> box.cfg{}; os.exit(0)\n2017-09-28 13:39:16.172 [12807] main/101/interactive C> Tarantool 1.7.5-126-g223c6265\n2017-09-28 13:39:16.172 [12807] main/101/interactive C> log level 5\n2017-09-28 13:39:16.173 [12807] main/101/interactive I> mapping 268435456 bytes for memtx tuple arena...\n2017-09-28 13:39:16.173 [12807] main/101/interactive I> mapping 134217728 bytes for vinyl tuple arena...\n2017-09-28 13:39:16.181 [12807] main/101/interactive I> initializing an empty data directory\n2017-09-28 13:39:16.216 [12807] snapshot/101/main I> saving snapshot `./00000000000000000000.snap.inprogress'\n2017-09-28 13:39:16.217 [12807] snapshot/101/main I> done\n2017-09-28 13:39:16.217 [12807] main/101/interactive I> ready to accept requests\n2017-09-28 13:39:16.217 [12807] main/104/checkpoint_daemon I> started\n2017-09-28 13:39:16.218 [12807] main/104/checkpoint_daemon I> scheduled the next snapshot at Thu Sep 28 15:35:22 2017\nLooks like the issue was caused by invalid bootstrap.snap and fixed when it was regenerated.. Fixed by 43ba81b4f68ffb3538bbe3b42848bc158ced10b1. Proposed API extension:\n\nmsgpack.encode(obj) -> str\n\n(This function already exists, no changes made to it)\nEncode a Lua object as msgpack and store the result in a Lua\n  string. Return the new Lua string.\n\nmsgpack.ibuf_encode(ibuf, obj) -> number of bytes\n\n(New function)\nEncode a Lua object as msgpack and store the result in the\n  provided buffer. Return the number of bytes stored in the\n  buffer.\n\nmsgpack.decode(str, offset) -> obj, new_offset\n  msgpack.decode(buf, size) -> obj, new_buf\n\n(1st variant already exists, 2nd is new)\nDecode a Lua object from msgpack.\nBoth variants return the decoded Lua object on success.\nThe first variant works with a Lua string and an offset in the\n  string. It returns the new offset in the second argument.\nThe second variant works with a C buffer and its size. It\n  returns a pointer to the position following the last written\n  byte in the buffer in the second argument.\nOn failure, return {nil, error message}. Strictly speaking,\n  this breaks backward compatibility, because currently these\n  functions raise an error, but error paths should be rare so\n  let's try it and see what users say.\n\nmsgpack.decode_unchecked(str, offset) -> obj, new_offset\n  msgpack.decode_unchecked(buf) -> obj, new_buf\n\n(New function, supposed to replace msgpack.ibuf_decode)\nSame as msgpack.decode(), but don't check the buffer with\n  mp_check() before decoding it. It is intended to be used in\n  hot paths where the caller is sure that the decoded data are\n  not corrupted.\n\nfio.write(fh, str)\n  fio.pwrite(fh, str, offset)\n\nfio.write(fh, buf, size)\n  fio.pwrite(fh, buf, size, offset)\n(Added variants for working with a C buffer)\nWrite a Lua string (1st variant) or a C buffer (2nd variant)\n  to a file. Return true on success, {false, error} on failure.\n\nfio.read(fh, size) -> str\n  fio.pread(fh, size, offset) -> str\n\nfio.read(fh, buf, size) -> number of bytes read\n  fio.pread(fh, buf, size, offset) -> number of bytes read\n(Added variants for working with a C buffer)\nRead a file to a Lua string (1st variant) or to a C buffer\n  (2nd variant).\nThe first variant returns a new string on success while the\n  second variant returns the number of bytes stored in the\n  buffer. On failure both functions return {nil, error}.. Fixed in 1.7.5-126-g223c6265. Fixed by 223c62650ca4528f5ad2e14c4c63a0afb4895284. Fixed in 1.7.5-277-gdb5146111. @zloidemon Please post the tarantool version you use (including git commit hash).\nDid you update tarantool (on master or slave) before trying to bootstrap the new replica?\nIt would also be helpful if you could attach tarantool log from both servers and the new replica.. We remove old xlog files as soon as we have sent them to all replicas. However, the fact that we have successfully sent something to a replica doesn't necessarily mean the replica will have received it. If a replica fails to apply a row (for instance, it is out of memory), replication will stop, but the data files have already been deleted on the master so that when the replica is back online, the master won't find appropriate xlog to feed to the replica and replication will stop again.\nOne way to mitigate this problem is to delete old xlog files not as soon as they have been sent, but rather on receiving a confirmation from all replicas that the data sent have been successfully applied. Actually, it was the original behavior of the garbage collection procedure before it was changed by commit ba09475f5f5518629c71c97993a0d80afd48a54e. Nevertheless, even reverting the aforementioned commit won't help in case the master is restarted, because the garbage collection state (i.e. information about xlog/snap file consumers) is transitory and doesn't persist through restarts. Perhaps, we should store it in the _cluster system space.. Fixed in 1.7.5-196-g77db87ce. @fsitedev Which version was used before the upgrade?. @fsitedev Thanks. Could you please also post here the output of box.cfg and box.slab.info()?. Could you please run the following script on your tarantool instance along with box.slab.info()? It just prints len/size of all spaces, should be very cheap. It will help us understand where memory goes.\nfor _, s in pairs(box.space) do has_len, len = pcall(s.len, s) print(s.id, s.name, s:bsize(), has_len and len or 0) end\nAlso, have you tried to run collectgarbage('collect') in Lua? If yes, does it reduce memory usage? If no, is it acceptable for you to try it in your environment?. > spaces are repeated in the output. is that normal?\nYes. Each space is referenced twice in box.space table: by id and by name.\n\nResult\n\nThanks. So according to the data you posted, you have about 4.5K records in all your spaces which consume about 800KB while box.slab.info() reports that there are about 26MB of memory occupied by tuples (items_used). Since you claim that garbage collection doesn't help, it looks like tuples are leaking.\nI haven't managed to reproduce the issue locally so far. By looking at the difference between commits 6cfefcd and 24b70de I haven't found anything suspicious, but the difference is so big that I could've easily overlooked something.\nCould you please provide us with more info about your use case. I'm interested in:\n\nIndex configuration, i.e. the output of box.space.<space_name> for each of your spaces.\nAn example of an upsert operation you use.\nDo you use space.truncate()?. Thanks a lot. I think I managed to reproduce the problem. Looks like we may leak tuples if DML races with box.snapshot(). The bug seems to have been introduced between 1.7.4 and 1.7.5 with tarantool/small update. We are working on the fix.. The commit that introduced the leak: https://github.com/tarantool/small/commit/b68e9323e0860877c940e090b698515d65d43dbe. Fixed in 1.7.5-254-g685416d9. Fixed by 6f33c8a62e4c1d6f75798b6f92864b3362bef024. Fixed in 1.7.5-272-g4c10b711. Proposed API:\nAdd a new box.cfg() option, replication_type = [ 'call' | 'row' ]. If replication_type is set to 'row', use the conventional (row-based) replication, otherwise replicate function calls, see below. This option must be set to the same value on all replicas of the cluster.\nIn case of call-based replication write iproto function calls (IPROTO_CALL, name, arguments) to xlog. These records are ignored on recovery and when saving a snapshot, but they are sent to all subscribed replicas instead of DML records. All iproto function calls are logged and replicated. It's up to the replica to filter certain function calls.\nOnly 'subscribe' stage is affected by replication_type = 'call'. When joining a replica, we send rows, not function calls, irrespective of the value of replication_type.\nThe replica must define all functions that may be called during 'subscribe' stage before setting up replication (i.e. before calling box.cfg()).. > Problem: how to rollback CALL effect in case of error?\n\nI don't understand why we should rollback anything in case of error? The function was called so it should be logged and replicated. Whether the call was successful or not from the user point of view is a different story IMO - AFAIU our responsibility is to blindly replicate function calls while it is completely up to the user how to react to them on the replica.. It also make sense to discard REPLACE + DELETE pairs for primary keys, but this is more sophisticated, because in contrast to secondary keys, there may be two successive REPLACE statements for the same key in a primary index.\nOne way to deal with it is to introduce SingleDelete operation, similarly to how it is done in RocksDB. SingleDelete acts like conventional Delete, but instead of appending a DELETE statement to the memory level, it removes the last REPLACE for the deleted key. SingleDelete is only safe to call if there is no REPLACE statements preceding the deleted statement. It is not a very elegant solution as it shifts responsibility to the user.\nAnother option is to discern INSERT from REPLACE in memory. For instance, space:insert() may not succeed if the last statement for the inserted key is REPLACE. This means that when the key is deleted, we can safely drop the new REPLACE from the memory level instead of appending a DELETE.. Fixed by ea2a11391e900609376c3bfaa1d4d929eef46782. Upgrade from 1.7.4 to 1.7.5 was marked automatic, which means that box.schema.upgrade() is invoked implicitly by the first call to box.cfg(). This was done, because initially it just created the _truncate system space and didn't modify existing tables, neither user nor system. However, after a while some extras were added to the upgrade procedure in preparation for strict space format checking. In particular, the _user system space was modified so that now every tuple has to have the auth map (field 5) while before only users had that field and an attempt to set the auth data for a role resulted in the error you observed:\nER_CREATE_ROLE: Failed to create role 'public': authentication data can not be set for a role\n(see commits a6128fcd224f506138f1a3959d8505ee0bc97287, 5ac86f763d7b038eda94edc088a34f6d8694865b)\nWe should probably have disabled auto-upgrade to 1.7.5 after this change, but we didn't and this broke replication in your case: the master running tarantool 1.7.5 sets auth to an empty map for all existing roles during auto-upgrade, but this is not permitted by replicas, which are still running 1.7.4. Unfortunately, it doesn't seem there is anything we can do about it now. The only feasible solution seems to be upgrading all your tarantool instances to the same version first and only then enabling replication.. Sorry, I was wrong. Upgrading all replicas simultaneously won't work either, because it will result in a conflict on an attempt to create the _truncate space (it's done with insert). I see no solution apart from upgrading one replica and then bootstrapping others from it.. So, the cause of all troubles is auto upgrade. It seems that we should disable it in case of replication, otherwise it will inevitably result in replication conflicts.. Alternatives:\n1. Add a new box.cfg() option, say replication_override_engine = [ 'vinyl' | 'memtx' ], that would override the engine in all tuples corresponding to user spaces inserted into _space by applier threads.\n2. Same as 1, but override engine for all user spaces, not just for those created by replication. The option is called engine_override.\n3. Same as 2, but do not change tuples in _space, just override the engine. Ugly as the user can't drop this option even after replication has been disabled and the replica has been set to be used in production.\n4. Add a new space trigger that would allow to filter/update tuples inserted into the space it is set on. Then use this trigger to change 'memtx' to 'vinyl' in tuples inserted into the _space system space. The problem is the trigger should be set before box.cfg(), when _space is not available, so we should add a configuration option for setting the trigger anyway. It's unclear if the trigger can be reused for any other purposes.\n5. Split join and subscribe replication stages (i.e. allow to perform join without subscribe on replica). After joining a replica, call space.alter to change the engine. Then subscribe. Problems: alter doesn't allow to change space engine; the configuration procedure is likely to look cumbersome.\nI vote for no. 1.. > Why is not logical replication listed among alternatives?\nBecause logical replication implies that the user calls stored procedures for data manipulation, which is not always the case. AFAIU in the scope of this issue we are talking about an automatic solution that would minimize user efforts.. MySQL provides three ways of overriding the table engine on the replica:\n1. If the master database was created using mysqldump, edit the dump file to change the table engine, then bootstrap the replica.\n2. Stop replication, change the table engine on the slave with ALTER, restart replication.\n3. Do not specify the table engine explicitly on the master, use default_storage_engine configuration option instead. On the replica, set the option to another value.\nNo. 2 looks promising, but it can't be used in case of master-master replication.. It already does - see commit 76b6e1100e7e342a9a7788d4e7a8b23925483830.. Duplicate #2862. Instead of adding new box.cfg options, such as replication_quorum, we could add new functions for replication configuration with clear semantics and let users decide what to do. The functions could be:\n- box.subscribe(addr, timeout) Subscribe to events from a master at addr. Try to connect for timeout seconds. On success, return the master id that could be used to track the subscription state via box.info.replication. To cancel the function before timeout, cancel the current fiber.\n- box.unsubscribe(id | uuid) Remove the master with the given id (or uuid) from the replication configuration.\nAssume the cluster has already been bootstrapped. Then a replica's workflow could look like this:\n1. Call box.cfg without specifying replication for local recovery. Replication will be configured later. To prevent the instance from processing user requests before replication configuration is complete, do not set listen (alternatively, one could set read_only flag or write some code in Lua to reject client requests in case the instance hasn't been fully initialized).\n2. Create a fiber per each configured master. Call box.subscribe in each fiber to connect to a master. In the main fiber (or a special monitoring fiber), wait until the instance is connected to a sufficient number of masters, then complete configuration either by setting listen or clearing read_only flag depending on the decision made on step 1. One could also wait until the replication lag (as reported by box.info.replication) to be small enough before proceeding to handling user requests (see #999).\n3. After configuration has been completed, the fibers created on step 2 could be left for monitoring subscription. For instance, they could be used for removing masters by calling box.unsubscribe that are found to be permanently down or they could switch the instance to the read-only mode if the replication lag gets too high.\nIt would definitely require writing more code in Lua, but at the same time it would be more flexible, as the users could decide for themselves what they want to do in various extreme cases. This would also spare us from adding a bunch of new configuration options for each use case and then maintaining them for good. To ease the initial setup, we could probably ship a script implementing the default behavior right in the Tarantool package.. Fixed by ab7260317a8c1cf0e475c091ea955c15be701ddc. Fixed by 51fcffb777ccf41cee449524113304348b8c812a. Fixed by ab321959f7e911f4eaa9c9b1b0ecad20c9f4b6b5. I have a few questions regarding the new trigger implementation:\n1. Is it true that an attempt to modify the value of the primary key from BEFORE trigger must be prohibited? For example, let the primary key index field 1, then if we replace {1, 1} with {1, 2}, the trigger callback can return {1, 3}, but an attempt to return {2, 2} should fail.\n2. The trigger is supposed to be called not only on REPLACE or UPDATE but also on INSERT and DELETE, in which case it is be passed nil for the old/new tuple, right?\n3. If UPDATE is called for a non-existent key, it is silently ignored and BEFORE trigger is not executed. Is that correct?\n4. Obviously, we can discard a REPLACE by returning the old tuple from the trigger. Can we discard an INSERT by returning nil? Can we discard DELETE by returning the old tuple? Can we turn a REPLACE into DELETE by returning nil or vice-versa?\n5. AFAIU we are going to use this trigger for conflict resolution during asynchronous replication as follows. The user is supposed to store a timestamp in each tuple and install BEFORE trigger on each space. The trigger callback should return either the old tuple or the new tuple depending on which one has a newer timestamp. This scheme is going to work only provided there's no DELETE statements. Is my understanding correct?\n6. We can't install BEFORE trigger before the box is configured. Since replication is started during configuration, there's a time window in which a replication conflict can occur. How are we going to deal with that? Should we split box.cfg, may be?. Regarding issue no. 6 (how to install the trigger before subscription), right now I see two possible ways to resolve this:\n1. A new trigger called upon bootstrap completion. The trigger callback is passed to box.cfg() along with other server options. It is invoked right after the server configuration has been complete, but before the is_box_configured flag is set (see box_cfg_xc()) or subscription starts so that when it is being invoked the server will refuse any requests with ER_LOADING.\n2. A new Lua function box.bootstrap(). If invoked, the function executes the bootstrap sequence (either remote or local) or local recovery in case the server has already been bootstrapped. The server will not start subscription, neither will it accept any user requests, before box.cfg() is called.. Fixed by 85299d97db4a8253fbf67bceb971f28cadae5e91. Fixed by 310e0715fa7a97bf8565e34be9b4bb0f3a6687e7. Related problem: on_replace trigger chaining doesn't work as expected if callbacks create statements.\n```\nyaml = require 'yaml'\nbox.cfg{log_level = 4}\ns1 = box.schema.space.create('test1')\n = s1:create_index('pk')\ns2 = box.schema.space.create('test2')\n = s2:create_index('pk')\ns3 = box.schema.space.create('test3')\n_ = s3:create_index('pk')\n_ = s1:on_replace(function(old, new) s2:insert(new:update{{'!', 2, 2}}) end)\n_ = s1:on_replace(function(old, new) s3:insert(new:update{{'!', 2, 3}}) end)\ns1:insert{1}\nprint(yaml.encode{s1 = s1:select(), s2 = s2:select(), s3 = s3:select()})\nos.exit(0)\nproduces the following output\n2018-01-22 11:40:44.106 [23570] main/101/test.lua C> Tarantool 1.7.6-166-g8fcec8e4\n2018-01-22 11:40:44.106 [23570] main/101/test.lua C> log level 4\n\ns3:\n- [1, 3]\ns1:\n- [1]\ns2:\n- [1, 2, 3]\n...\n``. Fixed by 99c7a971df04d7234ee88da501b291497c4dd43f. This bug seems to be the real cause of replication failures described in #2825 and #2940. Fixed by e755ad247c0f8b9ec0c05fdf4091b738864f8ff1. Fixed by 04e75f2c99d7b28299463830c8131391e7558586. Fixed by dd7ce9881a1613225e224addb88def3d0aca5b2a. Fixed by be558f206cb92c3888ce30901c1ca46ca4d21215. To be honest, I don't see much point in it. AFAIK virtual memory is practically free. If one still feels uncomfortable about it, they can decrease the value ofbox.cfg.vinyl_memory`. Apart from mapping some memory, initializing vinyl subsystem doesn't leave any user-visible traces. I suggest to close this issue as \"Won't fix\".. Fixed by d6a6190437df8edf90aaf6fc02f753c8666afb96. Fixed by 48f55559f2a1c1934f6202927beea5faf10d7a51. Fixed by 674c10581193dc7c5127e33cb995d0dc0ed58a68. Fixed by 6b49134d9f07cac3de6f394cce9e5f209273c739. Fixed by db9e214a54caeef7d63578a511a48c9f14de322f. Fixed by 7e652c220b85663c2185021d24e0c2f306754e1b. Fixed by 3171288c5d77888ba6de0e2a68b59fdd09b6afde https://github.com/tarantool/luarocks/commit/b2dde9a4cede89aa985e26aa339e4ea340199101. > // Removed vinyl, because it works for memtx too.\nFor memtx the uniqueness check comes for free, because insertion of a new tuple into an index implies a lookup - see memtx_tree_index_replace and replace_check_dup. So no, this is purely a vinyl issue.. Fixed by ad562340ce2978124e1162e0289306a989be3d38. Hmm... The description isn't quite correct - disabling compaction will reduce the amount of work done (in terms of bytes written) rather than the duration of the initial join stage, because if compaction is invoked while join is in progress rather than after it is complete, the disk will be utilized more efficiently during the join stage. Need to think about it. May be \"wontfix\".. Fixed by a6a22f1bfc1cf5ec688f73b99d283ee5f41cfa85. This is a documented behavior:\n\nReturn:\nthe tuple for the last key in the index. If optional key-value is supplied, returns the last key which is less than or equal to key-value.\n\nI'm afraid \"fixing\" it may break existing users.. It still fails: https://travis-ci.org/tarantool/tarantool/jobs/380299138. Fixed by 400277bf22fe8d5ac34f7597a690153d3a1e88a1. Fixed by 632592bf21da6a1f2f666dc186f4ec4f4319e43f. Fixed by eae84efbfbf9e504660eba26c013487c7991459b. Fixed by a1d685f35dce1a0c01a9b8a186332731e7fc32f4. @TarantoolBot document\nTitle: Document how box.cfg.snap_io_rate_limit affects vinyl\nbox.cfg.snap_io_rate_limit now affects not only .snap files, but also .run and .index files written by vinyl engine.. We actually ran into this problem while investigating #3603: running the random insertion test attached to the above-mentioned issue on a space with two indexes resulted in about 15M records in the primary index and more than 250M records in the secondary index after several hours of run time while the number of unique keys was 10M, i.e. space amplification for the secondary index exceeded 25, which is huge even for an LSM-tree based design. Probably, we need to take into account the number of DELETE statements and force compaction if there are too many of them.. > Should this iterator walk only over a continuous range of tuples? Or skip unsuitable tuples?\n\nE.g imagine data:\n1. [1, 2]\n2. [1, 3]\n3. [2, 1]\n4. [2, 2]\n5. [2, 3]\nWhat should the iterators return?:\n\n[GE=1, EQ=2] ([[1,2]] or [[1,2][2,2]]?)\n\n\n[[1,2][2,2]]\n\n\n[GE=1, LE=1] ([[2,1]] or [[]]?)\n\n\n[[2,1]]\n\n\n[GE=1, LE=2] ([[1,2]] or [[1,2],[2,2]]?)\n\n\n[[1,2],[2,1],[2,2]]\nIn other words, a multi-directional iterator should return all tuples matching the given criteria, even if they don't constitute a singe range. That would match the behavior of SQL SELECT statement.. The issue was fixed by commit 25b9f0f05d204f719af21a05cdb9d42fdcd9a278. Fixed by 3bb5a4b114ca123fc55c59f0e7250c5787a76b64. Fixed by 10af1cb104420d9f3148bccf0c988ca27e600ac5. Fixed by fbd80f706ee092de7e69830c3db17f9f17bbaeac. The issue was fixed by commit 1046f8516bc11a15b16b27e70e6a442398971fcf. Fixed by e6bd7748b7a9265c97c0fbe0b7d62452f08d6ddf. Fixed by c88058582ea5d4bfae3a23bb30164452791a932b. Fixed by 8a1bdc8263e9ff0550e257e088f767ca3f998f0e. Fixed by f41aac61ae081e064b69cd8fc9c4620824f86bbb. Fixed by 35db70fac55c86f44b822104f361ddb825a3a48d. Fixed by 2a1482f33fa0476c7371ff550499608265704a34. @TarantoolBot document\nTitle: Document optional argument of box.backup.start()\nbox.backup.start() can now accept an optional argument that specifies which checkpoint to backup: if it is 0 or omitted, the function will backup the newest checkpoint, if it is 1, next to last, and so on.. Turns out this optimization has already been implemented:\n- Unique check is skipped on recovery - see #2099.\n- In case there's no secondary indexes, REPLACE doesn't require read.\n- If there are secondary indexes, REPLACE statements relayed to a replica on initial join are turned into INSERT statements on the master by write iterator so no reads is issued either - see #2875.. Fixed by a2d1d2a2e06904a7cb3472bc083c5d0052635ba2. > Can Tarantool make the default stack size larger if a recent readline version is detected (can it be done?) maybe with a documentation caveat that Fedora is not optimal for production.\nIt's not just about readline/ncurses. We have a similar issue with other third part libraries, e.g. libcurl. Increasing the stack unconditionally for all of them would bloat memory usage. We are planning to make stacks dynamically shrink and grow. In fact, we're already working in this direction.. > Will that be only in 2.0 / 2.1 series - or are there plans to backport to 1.10 (for example) or 1.11 whatever?\nThe milestone says it will be backported to 1.10.. A related crash is occasionally reproduced by Travis CI:\n```\nSegmentation fault\n  code: SEGV_MAPERR\n  addr: 0x3a8\n  context: 0x7fc586d1f240\n  siginfo: 0x7fc586d1f370\n  rax      0x0                0\n  rbx      0x3a0              928\n  rcx      0x0                0\n  rdx      0x3a0              928\n  rsi      0x0                0\n  rdi      0x7fc586d1f9e0     140486347192800\n  rsp      0x7fc586d1f7d0     140486347192272\n  rbp      0x7fc586d1f800     140486347192320\n  r8       0x4                4\n  r9       0x7fc586cc31be     140486346813886\n  r10      0x2c               44\n  r11      0x7fc58c2aef10     140486436908816\n  r12      0x7fffffffffffffff 9223372036854775807\n  r13      0x7fc586d1f9e0     140486347192800\n  r14      0x3f4ff            259327\n  r15      0x4ce8d0           5040336\n  rip      0x48e171           4776305\n  eflags   0x10206            66054\n  cs       0x33               51\n  gs       0x0                0\n  fs       0x0                0\n  cr2      0x3a8              936\n  err      0x4                4\n  oldmask  0x0                0\n  trapno   0xe                14\nCurrent time: 1535397068\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed, \nthis may fail as well\n0  0x4f4a59 in print_backtrace+9\n1  0x40fa67 in _ZL12sig_fatal_cbiP9siginfo_tPv+c7\n2  0x7fc58d37e370 in _L_unlock_13+34\n3  0x48e171 in vy_tx_conflict_iterator_next+41\n4  0x46b624 in vy_tx_prepare+114\n5  0x43e1d1 in vinyl_engine_prepare+81\n6  0x4b0386 in txn_commit+26\n7  0x4b2edb in _ZL10process_rwP7requestP5spacePP5tuple+20b\n8  0x4b6dc0 in box_delete+40\n9  0x4ce9a2 in lbox_index_delete+d2\n10 0x50e147 in lj_BC_FUNCC+34\n11 0x51f604 in lua_pcall+34\n12 0x4e0643 in luaT_call+13\n13 0x4daee6 in lua_fiber_run_f+56\n14 0x40eefc in ZL16fiber_cxx_invokePFiP13__va_list_tagES0+c\n15 0x4f1770 in fiber_loop+30\n16 0x62b22f in coro_init+3f\n[007] vinyl/bloom.test.lua                                            [ pass ]\n[007] vinyl/cache.test.lua                                            [ pass ]\n[007] vinyl/compact.test.lua                                          [ pass ]\n[007] vinyl/constraint.test.lua                                       [ pass ]\n[007] vinyl/ddl.test.lua                                            \n[007] \n[007] [Instance \"vinyl\" killed by signal: 6 (SIGABRT)]\n[007] [ fail ]\n. Another test failure caught by Travis CI that seems to be related:\n[007] vinyl/ddl.test.lua                                              [ fail ]\n[007] \n[007] Test failed! Result content mismatch:\n[007] --- vinyl/ddl.result  Mon Aug 27 18:38:41 2018\n[007] +++ vinyl/ddl.reject  Mon Aug 27 18:44:53 2018\n[007] @@ -708,7 +708,7 @@\n[007]  ...\n[007]  box.space.test.index.pk:count() == box.space.test.index.sk:count()\n[007]  ---\n[007] -- true\n[007] +- false\n[007]  ...\n[007]  box.space.test.index.pk:count() == box.space.test.index.tk:count()\n[007]  ---\n[007] @@ -717,7 +717,7 @@\n[007]  test_run:cmd(\"restart server default\")\n[007]  box.space.test.index.pk:count() == box.space.test.index.sk:count()\n[007]  ---\n[007] -- true\n[007] +- false\n[007]  ...\n[007]  box.space.test.index.pk:count() == box.space.test.index.tk:count()\n[007]  ---\n[007] @@ -729,7 +729,7 @@\n[007]  ...\n[007]  box.space.test.index.pk:count() == box.space.test.index.sk:count()\n[007]  ---\n[007] -- true\n[007] +- false\n[007]  ...\n[007]  box.space.test.index.pk:count() == box.space.test.index.tk:count()\n[007]  ---\n```. > @locker Can we disable the test on Travis CI until the issue will be fixed (using skipcond like 1)?\nI don't mind.. Fixed by 1785e79cae9723979979aa9abe15502c803b525a. Fixed by 113ade24e5dc2f13251289c3018de700fdedda19. Fixed by 5b68c5f5b995e89cfc2e8846463c56ca80d64508. Fixed by f9299c43d4fcc918a98c45563a5f96bb13863337. Fixed by dcac64afd2b71ff720153e141283f2ceffcff546. Fixed by ec84f36bef9e67c1fd1e59f618d4bc891dc847ed. To make the issue nearly 100% reproducible, apply the following patch:\n```\ndiff --git a/test/vinyl/ddl.result b/test/vinyl/ddl.result\nindex 3e65e232..bb4fc984 100644\n--- a/test/vinyl/ddl.result\n+++ b/test/vinyl/ddl.result\n@@ -656,7 +656,6 @@ last_val = 1000;\n ---\n ...\n function gen_load()\n-    fiber.sleep(0.001)\n     local s = box.space.test\n     for i = 1, 200 do\n         local op = math.random(4)\ndiff --git a/test/vinyl/ddl.test.lua b/test/vinyl/ddl.test.lua\nindex 45c5cf8e..f7bf03bb 100644\n--- a/test/vinyl/ddl.test.lua\n+++ b/test/vinyl/ddl.test.lua\n@@ -253,7 +253,6 @@ box.commit();\n last_val = 1000;\nfunction gen_load()\n-    fiber.sleep(0.001)\n     local s = box.space.test\n     for i = 1, 200 do\n         local op = math.random(4)\n(Actually, I put that sleep there just to make the test pass :-). Fixed by c602cc2c82963ca34d71a55e94c36306b854460e. Blocks #2129. May be related: #3458. I can't reproduce the issue, neither can I figure out how it could occur by looking at the code. Theoretically, it could be explained by memory corruption caused by #3420. Closing it as invalid. If you ever run into it again, feel free to reopen it.. Due to this issue, tarantool may fail at shutdown with:\n/src/cbus.c:287: cpipe_flush_cb: Assertion e__ == 0' failed.\n```. For the record, another failure of the kind:\n```\n/src/cbus.c:210: cbus_endpoint_create: Assertione__ == 0' failed.\n. Fixed by 4f8c988c717d8bf84c5be93cb6fc62c68fcb0b05. Fixed by 6854ea19b0d50b741b3dad74f4cca9acd66e7c22. Duplicate #3528. Fixed by 3f14e31934a2f88612fec388ef50f26d62660915. See madvise:MADV_DONTDUMP. Related crash:\nsrc/box/replication.cc:342: void replica_on_applier_disconnect(replica*): Assertion 0' failed.\n```. The issue can be reproduced with the following script:\n```\nbox.cfg{\n    log_level = 4,\n    listen = 44440 + arg[1],\n    replication = {44441, 44442}\n}\nif box.info.id == 1 then\n    box.schema.user.grant('guest', 'replication')\n    box.space._cluster:delete(2)\nend\nos.exit(0)\n```\nRun it from two terminals:\n- Terminal 1:tarantool reproduce.lua 1- Terminal 2:tarantool reproduce.lua 2`\nOne of the instances will crash:\n2018-07-17 19:37:57.914 [19674] main/101/test.lua C> Tarantool 1.9.1-52-g1f187cacaabb\n2018-07-17 19:37:57.914 [19674] main/101/test.lua C> log level 4\n2018-07-17 19:37:57.926 [19674] main/105/applier/ xrow.c:792 E> ER_LOADING: Instance bootstrap hasn't finished yet\n2018-07-17 19:37:58.928 [19674] main/105/applier/ coio.cc:104 !> SystemError connect, called on fd 12, aka [::1]:33652: Connection refused\ntarantool: /home/vlad/src/tarantool-1.9/src/box/replication.cc:334: void replica_on_applier_disconnect(replica*): Assertion `0' failed.\nAborted (core dumped). This crash\ntarantool: /opt/tntsrc/src/box/applier.cc:748: void applier_pause(applier*): Assertion `fiber() == applier->reader' failed.\nwas fixed in the scope of #3606.. The other assertion\ntarantool: /opt/tntsrc/src/box/replication.cc:234: void replica_on_applier_sync(replica*): Assertion `replica->applier_sync_state == APPLIER_CONNECTED' failed.\nwas caught here: https://github.com/tarantool/tarantool/issues/3610#issuecomment-410322819\nSo I guess we can close this issue as soon as the pending patch gets committed.. Fixed by c939ca8aad365a19f8da3a835238f76b61cefec8. Fixed by c46702ff499fd50fcffdb854ccb36639bd97c885. Fixed by commit 0ecabde8981500886bf5be16cfabe4d1d1a33db4. Fixed by 5b00d6465bcc3fa39318ffb00b9cd16a6dc6660f. Fixed by commit 3846d9b2d4d43e9b4c777b1959a2240b3437bb15. Fixed by commit ea28a925d1cbe1c4f931d1db16712514d0634dd1. Another failure got caught by Travis CI.\nDetailed log\n```\n[004] app-tap/tarantoolctl.test.lua                                   [ fail ]\n[004] Test failed! Output from reject file app-tap/tarantoolctl.reject:\n[004] TAP version 13\n[004] 1..6\n[004]     # basic test\n[004]     1..16\n[004]     ok - check 'start' command status for 'script'\n[004]     ok - check 'start' stderr for 'script'\n[004]     ok - check 'status' command status for 'script'\n[004]     ok - check 'status' stderr for 'script'\n[004]     ok - check 'start' command status for 'script'\n[004]     ok - check 'start' stderr for 'script'\n[004]     ok - check 'status' command status for 'script'\n[004]     ok - check 'status' stderr for 'script'\n[004]     ok - check 'stop' command status for 'script'\n[004]     ok - check 'stop' stderr for 'script'\n[004]     not ok - check 'status' command status for 'script'\n[004]       ---\n[004]       filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]       trace:\n[004]       - line: 125\n[004]         source: '@/Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]         filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]         what: Lua\n[004]         namewhat: upvalue\n[004]         name: check_ok\n[004]         src: '...d/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]       - line: 163\n[004]         source: '@/Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]         filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]         what: Lua\n[004]         namewhat: local\n[004]         name: fun\n[004]         src: '...d/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]       - line: 218\n[004]         source: '@builtin/tap.lua'\n[004]         filename: builtin/tap.lua\n[004]         what: Lua\n[004]         namewhat: method\n[004]         name: test\n[004]         src: builtin/tap.lua\n[004]       - line: 162\n[004]         source: '@/Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]         filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]         what: Lua\n[004]         namewhat: \n[004]         src: '...d/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]       - line: -1\n[004]         source: =[C]\n[004]         filename: eval\n[004]         what: C\n[004]         namewhat: global\n[004]         name: pcall\n[004]         src: '[C]'\n[004]       - line: 0\n[004]         source: '@/Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]         filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]         what: main\n[004]         namewhat: \n[004]         src: '...d/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]       line: 0\n[004]       expected: 1\n[004]       got: 2\n[004]       ...\n[004]     not ok - check 'status' stderr for 'script'\n[004]       ---\n[004]       filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]       line: 0\n[004]       trace:\n[004]       - line: 125\n[004]         source: '@/Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]         filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]         what: Lua\n[004]         namewhat: upvalue\n[004]         name: check_ok\n[004]         src: '...d/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]       - line: 163\n[004]         source: '@/Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]         filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]         what: Lua\n[004]         namewhat: local\n[004]         name: fun\n[004]         src: '...d/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]       - line: 218\n[004]         source: '@builtin/tap.lua'\n[004]         filename: builtin/tap.lua\n[004]         what: Lua\n[004]         namewhat: method\n[004]         name: test\n[004]         src: builtin/tap.lua\n[004]       - line: 162\n[004]         source: '@/Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]         filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]         what: Lua\n[004]         namewhat: \n[004]         src: '...d/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]       - line: -1\n[004]         source: =[C]\n[004]         filename: eval\n[004]         what: C\n[004]         namewhat: global\n[004]         name: pcall\n[004]         src: '[C]'\n[004]       - line: 0\n[004]         source: '@/Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]         filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]         what: main\n[004]         namewhat: \n[004]         src: '...d/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]       ...\n[004] Expected to find 'is stopped' in 'Pid file exists, but the control socket (./script.control) doesn't\n[004] '\n[004] 2     Pid file exists, but the control socket (./script.control) doesn't\n[004] \n[004]     ok - check 'stop' command status for 'script'\n[004]     ok - check 'stop' stderr for 'script'\n[004]     ok - check 'status' command status for 'script'\n[004]     ok - check 'status' stderr for 'script'\n[004]     # basic test: end\n[004] not ok - failed subtests\n[004]   ---\n[004]   filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]   trace:\n[004]   - line: 244\n[004]     source: '@builtin/tap.lua'\n[004]     filename: builtin/tap.lua\n[004]     what: Lua\n[004]     namewhat: method\n[004]     name: test\n[004]     src: builtin/tap.lua\n[004]   - line: 162\n[004]     source: '@/Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]     filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]     what: Lua\n[004]     namewhat: \n[004]     src: '...d/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]   - line: -1\n[004]     source: =[C]\n[004]     filename: eval\n[004]     what: C\n[004]     namewhat: global\n[004]     name: pcall\n[004]     src: '[C]'\n[004]   - line: 0\n[004]     source: '@/Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]     filename: /Users/travis/build/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua\n[004]     what: main\n[004]     namewhat: \n[004]     src: '...d/tarantool/tarantool/test/app-tap/tarantoolctl.test.lua'\n[004]   planned: 16\n[004]   failed: 2\n[004]   line: 0\n[004]   ...\n[004]     # basic test for bad script\n[004]     1..8\n[004]     ok - check 'start' command status for 'script'\n[004]     ok - check 'start' stderr for 'script'\n[004]     ok - check 'start' command status for 'bad_script'\n[004]     ok - check 'start' stderr for 'bad_script'\n[004]     ok - check 'start' command status for 'good_script'\n[004]     ok - check 'eval' command status for 'good_script bad_script.lua'\n[004]     ok - check 'eval' stderr for 'good_script bad_script.lua'\n[004]     ok - check 'stop' command status for 'good_script'\n[004]     # basic test for bad script: end\n[004] ok - basic test for bad script\n[004]     # check answers in case of call\n[004]     1..6\n[004]     ok - check 'start' command status for 'good_script'\n[004]     ok - check 'eval' command status for 'good_script bad_script.lua'\n[004]     ok - check 'eval' stderr for 'good_script bad_script.lua'\n[004]     ok - check 'eval' command status for 'good_script ok_script.lua'\n[004]     ok - check 'eval' stdout for 'good_script ok_script.lua'\n[004]     ok - check 'stop' command status for 'good_script'\n[004]     # check answers in case of call: end\n[004] ok - check answers in case of call\n[004]     # check basic help\n[004]     1..4\n[004]     ok - check stderr of 'tarantoolctl' without config\n[004]     ok - check stderr of 'tarantoolctl help' without config\n[004]     ok - check stderr of 'tarantoolctl --help' without config\n[004]     ok - check stderr of 'tarantoolctl' with config\n[004]     # check basic help: end\n[004] ok - check basic help\n[004]     # fill and test cat output\n[004]     1..29\n[004]     ok - check 'start' command status for 'filler'\n[004]     ok - cat result\n[004]     ok - cat line count\n[004]     ok - cat + --space=512 result\n[004]     ok - cat + --space=512 line count\n[004]     ok - cat + --space=666 result\n[004]     ok - cat + --space=666 line count\n[004]     ok - cat + --show-system result\n[004]     ok - cat + --show-system line count\n[004]     ok - cat + --format=json result\n[004]     ok - cat + --format=json line count\n[004]     ok - cat + --format=lua result\n[004]     ok - cat + --format=lua line count\n[004]     ok - cat + --from=3 --to=6 --format=json result\n[004]     ok - cat + --from=3 --to=6 --format=json line count\n[004]     ok - cat + --from=3 --to=6 --format=json --show-system result\n[004]     ok - cat + --from=3 --to=6 --format=json --show-system line count\n[004]     ok - cat + --from=6 --to=3 --format=json --show-system result\n[004]     ok - cat + --from=6 --to=3 --format=json --show-system line count\n[004]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 1 result\n[004]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 1 line count\n[004]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 1 --replica 2 result\n[004]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 1 --replica 2 line count\n[004]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 2 result\n[004]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 2 line count\n[004]     ok - cat + --space=280 result\n[004]     ok - cat + --space=280 line count\n[004]     ok - cat + --space=288 result\n[004]     ok - cat + --space=288 line count\n[004]     # fill and test cat output: end\n[004] ok - fill and test cat output\n[004]     # fill and test play output\n[004]     1..6\n[004]     ok - check 'start' command status for 'filler'\n[004]     ok - check lsn before\n[004]     ok - execution result\n[004]     ok - check lsn after\n[004]     ok - execution result\n[004]     ok - check lsn after\n[004]     # fill and test play output: end\n[004] ok - fill and test play output\n[004] # failed subtest: 1\n[004] \n[004] Last 15 lines of Tarantool Log file [Instance \"app_server\"][/Users/travis/build/tarantool/tarantool/test/var/004_app-tap/tarantoolctl.test.lua.tarantool.log]:\n[004] Netbox console API is deprecated since 1.10, please use require('console').connect() instead\n[004] Netbox text protocol support is deprecated since 1.10, please use require('console').connect() instead\n[004] Netbox console API is deprecated since 1.10, please use require('console').connect() instead\n[004] Netbox text protocol support is deprecated since 1.10, please use require('console').connect() instead\n[004] Netbox console API is deprecated since 1.10, please use require('console').connect() instead\n[004] Netbox text protocol support is deprecated since 1.10, please use require('console').connect() instead\n[Main process] Got failed test; gently terminate all workers...\n[004] Worker \"004_app-tap\" got failed test; stopping the server...\n\nStatistics:\n fail: 1\n skip: 1\n* pass: 102\nFailed tasks:\n- [app-tap/tarantoolctl.test.lua, null]\nlogfile:        /Users/travis/build/tarantool/tarantool/test/var/log/004_app-tap.log\nreproduce file: /Users/travis/build/tarantool/tarantool/test/var/reproduce/004_app-tap.list.yaml\n\n\n[app-tap/clock.test.lua, null]\n[app-tap/table.test.lua, null]\n[app-tap/string.test.lua, null]\n[app-tap/msgpackffi.test.lua, null]\n[app-tap/inspector.test.lua, null]\n[app-tap/iconv.test.lua, null]\n[app-tap/errno.test.lua, null]\n[app-tap/msgpack.test.lua, null]\n[app-tap/logger_pipe.test.lua, null]\n[app-tap/console.test.lua, null]\n[app-tap/csv.test.lua, null]\n[app-tap/init_script.test.lua, null]\n[app-tap/info.test.lua, null]\n[app-tap/json.test.lua, null]\n[app-tap/tap.test.lua, null]\n[app-tap/pwd.test.lua, null]\n[app-tap/logger.test.lua, null]\n[app-tap/uri.test.lua, null]\n[app-tap/minimal.test.lua, null]\n[app-tap/trigger.test.lua, null]\n[app-tap/http_client.test.lua, null]\n\n[app-tap/tarantoolctl.test.lua, null]\n...\n```\n. Fixed by 9bf93573fdf8b669f7ebe70b2934ef12ac025aa7. Fixed by commit dc648b9965e419bca86762d7f7e7c0b9bc62a7f4. Fixed by ba5aec56944e0ea86e91fa670bff41b8e0cddc00. Fixed by commit fc3834c01e9e6b5e62e0c86a0e5584060fdf679d\nTest added by commit 25b61bc5c9171ebc3fc5d2cc1f94049aa0f8cc76. Fixed by 8c06a069d764740b3ed5759c6b9a1ddd1d60f133. I can't reproduce this test failure locally. The issue description doesn't provide any details I could use for investigation. Closing the issue as invalid. Feel free to reopen if you ever run into it again.. This doesn't look like a problem in the test. Seems the failure was caused by a dirty test environment. I'm closing the bug now. Feel free to reopen it if you encounter it again.. Looks like this happens, because we don't have tx throttling: #1862. @funny-falcon I've a few question regarding the issue, would appreciate if you could answer them.\n\n\nWhat version of tarantool did you use for running the test?\n\n\nWhat hardware did you run the test on? Here by \"hardware\" I mean number of CPU cores, RAM size, disk IOPS. If you don't know your disk IOPS, just tell us whether it's SSD, HDD, or RAID.\n\n\nWhat version of golang did you use for running the client? Did you change GOMAXPROCS?\n\n\nAlso, could you please attach the tarantool log to the ticket? I ask, because the issue may also be caused by vinyl dump/compaction tasks preempting WAL writes; tarantool log could help us pinpoint the problem you're experiencing.\n\n\nThanks.. @funny-falcon thanks for the update.\n\nAre this questions because issue is not reproducible in your environment?\n\nI couldn't reproduce the issue on my laptop (which is rather sluggish I must admit) or on a test server (Xeon 24 logical CPUs, 100 GB of RAM). However, both machines have rotational disks.\nWell, I could get the client timeout, but it took several hours and it happened, because tarantool ran out of disk space, but apparently this isn't what happened in your case (it would be obvious from the log).\n\nI've attached z_tarantool.log and z_test_tarantool.out to gist\n\nThe issue has nothing to do with vinyl memory quota (and so throttling wouldn't help), otherwise we would see a lot of messages like the one below (there's none in the log you attached):\nvy_quota.h:170 W> waited for 555 bytes of vinyl memory quota for too long: 0.535 sec\nWhat I can see is tons of messages similar to this one:\ntxn.c:295 W> too long WAL write: 1 rows at LSN 8093436: 0.852 sec\nAt the first glance, looks like vinyl consumed all available disk bandwidth while doing dump/compaction, which caused WAL writer starvation. Ideally, WAL files (xlog; see box.cfg.wal_dir) and data files (snap, run; see box.cfg.memtx_dir, box.cfg.vinyl_dir) should be stored on different physical devices. If it is not an option, you can try to tweak box.cfg.snap_io_rate_limit (it limits the bandwidth of both memtx snapshot writer and vinyl dump/compaction tasks) and box.cfg.vinyl_write_threads (set it to minimum 2). This can result in vinyl memory quota errors I mentioned above though.\nHowever, what is curious, I saw lots of such messages when I ran the test on my machine and I did experience RPS drops, but they were minor, not enough to trigger timeout. So the issue may also be caused by your SSD drive. May be, you don't have TRIM enabled or the IO scheduler is misconfigured? (Just guessing, I'm not an expert in this kind of thing).\nAnother interesting thing is that I saw too long WAL write warnings (and hence RPS drops) even after I increased box.cfg.vinyl_memory up to 20 GB and reset box.cfg.checkpoint_interval to the default value (1 hour; you have 10 seconds) or even completely switched to memtx. That is, the issue manifests itself even if WAL thread is the only disk writer. I'm going to investigate this. Looks like it may be unrelated to vinyl, after all. Could you rerun your test on memtx to check that? (Don't forget to reset box.cfg.checkpoint_interval to make sure snapshot writer doesn't eat up all disk bandwidth).. @funny-falcon Here's what happened on my hardware. Since my server has a lot of memory, the OS sets a rather lenient dirty memory limit (it is configured as some percentage of total memory). So tarantool manages to accumulate a lot of dirty pages before they are finally flushed to disk. As a result, flushing takes quite some time, consuming all disk bandwidth and stalling tarantool. I lowered the dirty memory limit down to 10 MB and stalls disappeared. Could you try it out and report back if it helps in your case?\n```\nsysctl vm.dirty_bytes=$[10<<20]\n```. @funny-falcon Thanks a lot for the update, you've been really helpful. Looks like the problem is caused (at least partially) by absence of throttling in vinyl. We will escalate the priority of the corresponding issue (#1862).\nFor the record, what I see from the logs you provided:\n- Default setup. Both vinyl memory quota errors and WAL errors are present in the log. Last distinct errors before the timeout:\n2018-08-09 19:41:01.324 [11818] main/1692/main txn.c:295 W> too long WAL write: 1 rows at LSN 35915253: 1.715 sec\n2018-08-09 19:41:02.486 [11818] main/303/main vy_quota.h:170 W> waited for 555 bytes of vinyl memory quota for too long: 0.934 sec\n2018-08-09 19:41:34.366 [11818] main/1267/main txn.c:295 W> too long WAL write: 1 rows at LSN 38493255: 1.838 sec\n2018-08-09 19:41:46.763 [11818] main/616/main vy_quota.h:170 W> waited for 555 bytes of vinyl memory quota for too long: 10.542 sec\n- vm.dirty_background_ratio=1, vm.dirty_expire_centisecs=100, and vm.dirty_writeback_centisecs=10.\nAgain, both vinyl memory quota errors and WAL errors are present in the log, but WAL timeouts look less severe. Last distinct errors before the timeout:\n2018-08-09 19:49:26.045 [13442] main/1894/main txn.c:295 W> too long WAL write: 1 rows at LSN 11639470: 0.543 sec\n2018-08-09 19:49:17.783 [13442] main/1278/main vy_quota.h:170 W> waited for 555 bytes of vinyl memory quota for too long: 2.652 sec\n2018-08-09 19:49:26.045 [13442] main/1894/main txn.c:295 W> too long WAL write: 1 rows at LSN 11639470: 0.543 sec\n2018-08-09 19:50:03.522 [13442] main/2041/main vy_quota.h:170 W> waited for 555 bytes of vinyl memory quota for too long: 15.917 sec\n- Same as before + vm.dirty_bytes=$((10<<20)). There are many fewer WAL errors; actually, there's just one distinct error:\n2018-08-09 20:09:23.756 [15858] main/674/main txn.c:295 W> too long WAL write: 1 rows at LSN 34206947: 0.707 sec\nThere are as many vinyl memory quota errors as before, but they look less severe:\n2018-08-09 20:14:22.177 [15858] main/2045/main vy_quota.h:170 W> waited for 554 bytes of vinyl memory quota for too long: 3.206 sec\n2018-08-09 20:14:57.243 [15858] main/157/main vy_quota.h:170 W> waited for 555 bytes of vinyl memory quota for too long: 4.955 sec\n2018-08-09 20:15:26.645 [15858] main/678/main vy_quota.h:170 W> waited for 554 bytes of vinyl memory quota for too long: 2.848 sec\n2018-08-09 20:16:01.857 [15858] main/1731/main vy_quota.h:170 W> waited for 555 bytes of vinyl memory quota for too long: 6.053 sec\n- Same as before plus snap_io_rate_limit=10. There are no WAL errors, but vinyl memory quota timeouts are much higher:\n2018-08-09 20:26:45.334 [18349] main/1827/main vy_quota.h:170 W> waited for 555 bytes of vinyl memory quota for too long: 31.584 sec. @funny-falcon Could you please also re-run the test for a memtx space? I ask, because there seems to be two issues here: absence of throttling in vinyl and absence of throttling in WAL (or may be sub-optimal syncing?). I'd appreciate if you could answer the questions below:\n- Do you experience the same stalls on memtx?\n- If yes, can you mitigate them by tweaking sysctl knobs (vm.dirty_bytes and others)?\n- If yes, is such tweaking fine with you or would you prefer tarantool to adapt and throttle requests and/or force syncing WAL to disk in case WAL doesn't catch up?. Please note that currently transactions are throttled only if there's a risk of long stalls caused by hitting box.cfg.vinyl_memory limit (#1862). For now, we don't take into account compaction progress, which means that the read and space amplification may grow if the write load is high. The only way to resolve it now is increase the number of writer threads (box.cfg.vinyl_write_threads), however we're planning to fix it soon (#3721).. On debug build, tarantool crashes with\ntarantool: /home/centos/tarantool/src/box/applier.cc:746: void applier_pause(applier*): Assertion `cord_ptr->fiber == applier->reader' failed.\nLooks like the assertion failure filed in #3510\nStack trace:\n```\n0  0x00007f2171efa277 in raise () from /lib64/libc.so.6\n1  0x00007f2171efb968 in abort () from /lib64/libc.so.6\n2  0x00007f2171ef3096 in __assert_fail_base () from /lib64/libc.so.6\n3  0x00007f2171ef3142 in __assert_fail () from /lib64/libc.so.6\n4  0x00000000004cf858 in applier_pause (applier=0x108bd80) at /home/centos/tarantool/src/box/applier.cc:746\n5  0x00000000004c98b0 in applier_on_connect_f (trigger=0x7f2166a7f6f0, event=0x108bd80) at /home/centos/tarantool/src/box/replication.cc:548\n6  0x000000000051e728 in trigger_run (list=0x108c590, event=0x108bd80) at /home/centos/tarantool/src/trigger.cc:41\n7  0x00000000004cca46 in trigger_run_xc (list=0x108c590, event=0x108bd80) at /home/centos/tarantool/src/trigger.h:127\n8  0x00000000004cd373 in applier_set_state (applier=0x108bd80, state=APPLIER_OFF) at /home/centos/tarantool/src/box/applier.cc:60\n9  0x00000000004cf4f2 in applier_stop (applier=0x108bd80) at /home/centos/tarantool/src/box/applier.cc:687\n10 0x00000000004c9c43 in replicaset_connect (appliers=0xa38200 , count=1, timeout=30, connect_all=true)\nat /home/centos/tarantool/src/box/replication.cc:634\n\n11 0x00000000004b6f0a in box_sync_replication (timeout=30, connect_all=true) at /home/centos/tarantool/src/box/box.cc:656\n12 0x00000000004b6f78 in box_set_replication () at /home/centos/tarantool/src/box/box.cc:675\n13 0x00000000004d7406 in lbox_cfg_set_replication (L=0x4157a4b8) at /home/centos/tarantool/src/box/lua/cfg.cc:83\n14 0x000000000052cf1b in lj_BC_FUNCC ()\n15 0x000000000054e898 in lua_call (L=0x4157a4b8, nargs=1, nresults=-1) at lj_api.c:1121\n16 0x00000000004d6cab in execute_lua_call (L=0x4157a4b8) at /home/centos/tarantool/src/box/lua/call.c:302\n17 0x000000000052cf1b in lj_BC_FUNCC ()\n18 0x000000000054ea10 in lua_pcall (L=0x4157a4b8, nargs=1, nresults=-1, errfunc=0) at lj_api.c:1139\n19 0x00000000004f3795 in luaT_call (L=0x4157a4b8, nargs=1, nreturns=-1) at /home/centos/tarantool/src/lua/utils.c:931\n20 0x00000000004d71e2 in box_process_lua (request=0x7f213fc084d8, base=0x7f21668cfe40, handler=0x4d6b7d ) at /home/centos/tarantool/src/box/lua/call.c:440\n21 0x00000000004d7228 in box_lua_call (request=0x7f213fc084d8, port=0x7f21668cfe40) at /home/centos/tarantool/src/box/lua/call.c:450\n22 0x00000000004d567a in box_process_call (request=0x7f213fc084d8, port=0x7f21668cfe40) at /home/centos/tarantool/src/box/call.c:201\n23 0x0000000000411e8a in tx_process_call (m=0x7f213fc08468) at /home/centos/tarantool/src/box/iproto.cc:1461\n24 0x000000000050c1c7 in cmsg_deliver (msg=0x7f213fc08468) at /home/centos/tarantool/src/cbus.c:353\n25 0x000000000050d175 in fiber_pool_f (ap=0x7f2166800818) at /home/centos/tarantool/src/fiber_pool.c:64\n26 0x000000000040c015 in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x50cfdb , ap=0x7f2166800818)\nat /home/centos/tarantool/src/fiber.h:657\n\n27 0x0000000000507c9e in fiber_loop (data=0x0) at /home/centos/tarantool/src/fiber.c:640\n28 0x00000000006ca198 in coro_init () at /home/centos/tarantool/third_party/coro/coro.c:110\n. I managed to get the same assertion failure with the following script:\nfiber = require('fiber')\nbox.cfg{replication_connect_timeout = 1}\nf = function()\n    fiber.create(function()\n        box.cfg{replication={12345}}\n    end)\nend\nf()\nf()\nfiber.sleep(5)\n. Fixed by e72867cb916966aebe31c27d0054eb9316bced98. Another assertion of the kind:\nTarantool 1.9.1-60-ga9695b98\ntype 'help' for interactive help\ntarantool> box.cfg{replication={44441, 44441}, replication_connect_quorum=0, replication_connect_timeout=1}\n2018-08-03 20:27:23.527 [13197] main/101/interactive C> Tarantool 1.9.1-60-ga9695b98\n2018-08-03 20:27:23.527 [13197] main/101/interactive C> log level 5\n2018-08-03 20:27:23.527 [13197] main/101/interactive I> mapping 268435456 bytes for memtx tuple arena...\n2018-08-03 20:27:23.528 [13197] main/101/interactive I> mapping 134217728 bytes for vinyl tuple arena...\n2018-08-03 20:27:23.537 [13197] main/101/interactive I> recovery start\n2018-08-03 20:27:23.537 [13197] main/101/interactive I> recovering from `./00000000000000000002.snap'\n2018-08-03 20:27:23.569 [13197] main/105/applier/ I> can't connect to master\n2018-08-03 20:27:23.569 [13197] main/105/applier/ coio.cc:104 !> SystemError connect, called on fd 14, aka [::1]:54808: Connection refused\n2018-08-03 20:27:23.569 [13197] main/105/applier/ I> will retry every 1.00 second\n2018-08-03 20:27:23.569 [13197] main/106/applier/ I> can't connect to master\n2018-08-03 20:27:23.569 [13197] main/106/applier/ coio.cc:104 !> SystemError connect, called on fd 14, aka [::1]:54810: Connection refused\n2018-08-03 20:27:23.569 [13197] main/106/applier/ I> will retry every 1.00 second\n2018-08-03 20:27:24.569 [13197] main/101/interactive C> failed to connect to 2 out of 2 replicas\n2018-08-03 20:27:24.569 [13197] main/101/interactive I> ready to accept requests\n2018-08-03 20:27:24.570 [13197] main/109/checkpoint_daemon I> started\n2018-08-03 20:27:24.570 [13197] main/109/checkpoint_daemon I> scheduled the next snapshot at Fri Aug  3 22:10:08 2018\n\n...\ntarantool> 2018-08-03 20:28:38.680 [13197] main/107/applier/ I> remote master is 1.9.1 at 0.0.0.0:44441\n2018-08-03 20:28:38.681 [13197] main/108/applier/ I> remote master is 1.9.1 at 0.0.0.0:44441\n2018-08-03 20:28:38.681 [13197] main/108/applier/ replication.cc:262 E> duplicate connection to the same replica: instance uuid 19806873-9809-4ce8-9462-3f4f34a0834a, addr1 44441, addr2 44441\ntarantool: /home/vlad/src/tarantool/src/box/replication.cc:238: void replica_on_applier_sync(replica*): Assertion `replica->applier_sync_state == APPLIER_CONNECTED' failed.\nAborted\nHow to reproduce:\n1. Start a tarantool instance and configure replication privilege for the guest user:\nbox.cfg{listen=44441}\nbox.schema.user.grant('guest', 'replication')\n2. Bootstrap another tarantool instance from the instance started at step 1:\nbox.cfg{replication=44441}\n3. Stop both instances.\n4. Start the slave instance with the following configuration parameters:\nbox.cfg{replication_connect_quorum=0,\n        replication_connect_timeout=1,\n        replication={44441,44441}}\n5. Start the master instance:\nbox.cfg{listen=44441}\n6. The slave instance will crash.. Fixed by 03a9bb1a25a99e8545e03a2fc995027644e46ddc. Fixed in the scope of #3606. Fixed by 11fb3ab98d8568636cb68f70b17e1a3e0be73dc2. Reproduce file:\n- [box/access_bin.test.lua, null]\n- [box/backup.test.lua, null]\n. The culprit: 8e710090fcbc7506b0785ae90599eae38a363142. Fixed by 2457be7115fe3a6557d64bab3191480b15a77844. Fixed by 43b4342d0b9b243687af0c6e26b17ecd98308f44. Fixed by b2b84f47dfd7d010e56d0b960f02471b130abda9. Fixed by aa7831c25ad6fbf530b89c4b4a825c3f1cc3ff63. Fixed by 50a0f1e87e6c6fd90b6472b420c330cec0325ce9. I stumbled upon this issue during my investigation of the following test failure:\nwal_off/lua.test.lua                                            [ fail ]\nTest failed! Result content mismatch:\n--- wal_off/lua.result  Mon Sep 18 13:55:15 2017\n+++ wal_off/lua.reject  Tue Sep 25 19:44:39 2018\n@@ -91,7 +91,7 @@\n ...\n mktuple(100000)\n ---\n-- count 100000 len 368553\n+- error: Failed to allocate 368569 bytes in slab allocator for memtx_tuple\n ...\n space:drop()\n ---\nReproduce file /home/vlad/src/tarantool/test/var/reproduce/001_wal_off.list.yaml\n\n[wal_off/tuple.test.lua, null]\n[wal_off/lua.test.lua, null]\n...\n```\nNote, it occurs only if wal_off/lua runs after wal_off/tuple. The latter allocates tuples of increasing sizes, similarly to how it's described in this issue.\n\nThe allocation fails, because the small allocator, which is used for allocating tuples, maintains a memory pool for different allocation sizes, and a memory pool never frees the last slab, even if it's empty. According to the comment in the code, this is needed to prevent oscillations when a single object is repeatedly allocated and freed:\nC\nstruct mempool\n{\n    /**\n     * A completely empty slab which is not freed only to\n     * avoid the overhead of slab_cache oscillation around\n     * a single element allocation.\n     */\n    struct mslab *spare;\n};\nWe should probably limit the total amount of memory that can be used up by such spared slabs. May be, we could delete this logic altogether - after all, although it does prevent oscillations when there's a single object in a mempool, it doesn't help in case there's a single object in a slab allocated for a mempool.\nHere's a simple script that can be used to reliably reproduce this issue:\n```Lua\nbox.cfg{\n    memtx_memory = 512 * 1024 * 1024,\n    memtx_max_tuple_size = 1024 * 1024\n}\nbox.schema.space.create('test')\nbox.space.test:create_index('primary')\nsize = 1\nwhile size < box.cfg.memtx_max_tuple_size - 128 do\n    box.space.test:insert{1, string.rep('x', size)}\n    box.space.test:delete{1}\n    collectgarbage('collect')\n    size = size * 1.05\nend\n. Fixed by 4baa71bcb82e690776b5dd7f273d685c40260712. The issue was fixed in 1.10. Here's the log after the second call to box.cfg:\ntarantool> box.cfg{\n         > listen = 3313,\n         > replication = {'localhost:3313', 'localhost:3314'},\n         > read_only = true,\n         > }\n2018-10-03 15:29:54.408 [15377] main/101/interactive I> set 'read_only' configuration option to true\n2018-10-03 15:29:54.408 [15377] main/101/interactive I> connecting to 2 replicas\n2018-10-03 15:29:54.410 [15377] main/117/applier/localhost:3313 I> remote master is 1.10.1 at 127.0.0.1:3313\n2018-10-03 15:29:54.410 [15377] main/118/applier/localhost:3314 I> remote master is 1.10.1 at 127.0.0.1:3314\n2018-10-03 15:29:54.410 [15377] main/101/interactive I> connected to 2 replicas\n2018-10-03 15:29:54.411 [15377] main/101/interactive I> synchronizing with 2 replicas\n2018-10-03 15:29:54.411 [15377] main/118/applier/localhost:3314 I> can't join/subscribe\n2018-10-03 15:29:54.411 [15377] main/118/applier/localhost:3314 xrow.c:892 E> ER_CFG: Incorrect value for option 'replication': duplicate connection with the same replica UUID\n2018-10-03 15:29:54.411 [15377] main/118/applier/localhost:3314 I> will retry every 1.00 second\n2018-10-03 15:29:55.416 [15377] main/101/interactive I> replica set sync complete\n2018-10-03 15:29:55.416 [15377] main/101/interactive I> set 'replication' configuration option to [\"localhost:3313\",\"localhost:3314\"]\n\n...\ntarantool> 2018-10-03 15:29:55.520 [15377] relay/127.0.0.1:49778/101/main C> exiting the relay loop\n2018-10-03 15:29:56.524 [15377] relay_0x55ab2f7941b0/101/main I> recover from ./00000000000000000000.xlog'\n2018-10-03 15:29:56.524 [15377] relay_0x55ab2f7941b0/101/main I> done./00000000000000000000.xlog'\n\n...\ntarantool>\n```\nNote, an error message is still printed to the log, because the old relay is running on the master when we call box.cfg and we can't do anything about it, as Georgy pointed out. However, the error is transient: the applier says that it will keep trying to connect and in a second it does connect and successfully completes synchronization so that the instance doesn't enter the oprhan mode (\"failed to synchronize with 1 out of 2 replicas\" on 1.9 vs \"replica set sync complete\" on 1.10).. Fixed by 33950162f3e766d413567cd75aaa7e6c384831bd. This should also fix the following test failure (reproduced by Travis CI from time to time):\n```\nvlad@esperanza test$ cat reproduce.yaml\n- [box/blackhole.test.lua, null]\n- [box/net_msg_max.test.lua, null]\nvlad@esperanza test$ ./test-run.py --reproduce reproduce.yaml\nStarted ./test-run.py --reproduce reproduce.yaml\nRunning in parallel with 8 workers\nInstalling the server ...\n    Found executable   at /home/vlad/src/tarantool/src/tarantool\n    Found tarantoolctl at /home/vlad/src/tarantool/extra/dist/tarantoolctl\nTarantool 1.10.1-320-g4e0ab1f9\nTarget: Linux-x86_64-Debug\nBuild options: cmake . -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_BACKTRACE=ON\nCompiler: /usr/bin/cc /usr/bin/c++\nC_FLAGS: -fexceptions -funwind-tables -fno-omit-frame-pointer -fno-stack-protector -fno-common -fopenmp -msse2 -std=c11 -Wall -Wextra -Wno-strict-aliasing -Wno-char-subscripts -Wno-format-truncation -fno-gnu89-inline -Werror\nCXX_FLAGS: -fexceptions -funwind-tables -fno-omit-frame-pointer -fno-stack-protector -fno-common -fopenmp -msse2 -std=c++11 -Wall -Wextra -Wno-strict-aliasing -Wno-char-subscripts -Wno-format-truncation -Wno-invalid-offsetof -Werror\n======================================================================================\nWORKR TEST                                            PARAMS          RESULT\n\n[001] box/blackhole.test.lua                                          [ pass ]\nNo output during 10 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 20 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 30 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 40 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 50 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 60 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 70 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 80 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 90 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 100 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 110 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\nNo output during 120 seconds. List of workers not reporting the status: [1]; Will abort after 120 seconds without output.\n[Main process] No output from workers. It seems that we hang. Send SIGKILL to workers; exiting...\nStatistics:\n* pass: 1\nCount of didn't processed tasks: 1\n``. Blocked by https://github.com/tarantool/test-run/issues/117. Fixed by 2e87902e6aab66697ff36004b78c8f72daef9492. Fixed by ca9fc33a0ff20313dc8c73cf7a54c56da0890d1e. Fixed by 16faada1855e6e8dd15709383cb2f3e6088b35da. Fixed by 6dd0d2fb7e0eff306f141fc867fa5b1b3e4fa3b1. Fixed by ac77418fc53bccb46eb8b8f8e2853dcb079f53a0. Fixed by 24a87ff2b41d71e5c18db1d84c3781643b8bd001. Fixed by 311e8fce90011fd7aad930c02b79804d2d6050f7. Fixed by f8956e057c8a9aaf05d09993bea7b47e922fc239. Fixed by 6f6a30401099aea6d8e028cb73dad1f9bb9f9c4a. Fixed by 4e70508557849a344f140b11b85e99b753277943. Fixed by 4baa71bcb82e690776b5dd7f273d685c40260712. Fixed by bae6f037c0df9bcde56611d411bf600341e008b3. This is howbox.cfg{replication}works by design - it doesn't return until it has synchronized withbox.cfg.replication_connect_quorumreplicas orbox.cfg.replication_sync_timeout` occurs. In the example above the replica can't subscribe until the old relay exits, but it got stuck in WAL.\nMay be, you wonder why we have to reconfigure replication even if the value of box.cfg.replication doesn't actually change? Well, that happens, because the replication configuration is given as a Lua table and no two Lua tables are equal to each other and hence box/lua/load_cfg.lua:reload_cfg assumes that the replication configuration has changed while it hasn't and reconfigures replication while it doesn't need to. I guess we could rectify that by making reload_cfg more thorough. Would it work for you?. After all, I think it's kinda strange that we reconfigure replication even if the user passes exactly the same value, i.e. box.cfg{replication = box.cfg.replication}. We try not to for all other options, e.g. box.cfg{listen = box.cfg.listen} is a no-op. I've opened another issue for this: #3711.. Fixed by 3de37476ef5f2a5ddd00ba85729423a3b379523d. box.cfg.force_recovery is set to true in the reproducer script - looks very much like #3910.. Fixed by 480c55b67ee9c3f8c0ae04d1946eb54b366eae35. Yep, turns out I've already fixed this issue, see commit 23e71c6e4156294db74e830290e59f10616c509c.. Superseded by 311e8fce90011fd7aad930c02b79804d2d6050f7 and 46e4c702b09dc3ad03d528d5bf8447a41b8c9d6d. Fixed by 52b84d2eb0bfa7dae5fba1e4d7015a683bbb65db. Cherry-picked to 1.10: 55dcde00d15553c897fc99f1e24124a4393c453b. Fixed by 46e4c702b09dc3ad03d528d5bf8447a41b8c9d6d. Fixed by 022a3c5026fffcecd9bc85f5484d5b5c53ae887d. The commit that intended to fix this issue introduced a regression resulting in crash - see #3902 - so I'm reverting it and reopening the issue.. Duplicate #3420. Fixed by 031aea109f8831ea2dca0920c9241579373db9ad. Fixed by 38845d6edf940dae1795bf847959db4bf7237307. The crash is similar to #3910.. See #2218. Actually, no records was lost except the one that Tarantool failed to write due to ENOSPC, which is expected. The thing is tarantool doesn't rollback vclock on WAL errors so there may be LSN gaps in xlog files - this is OK. However, before commit cd0a26966eaa495c12a40bdf56124fcd8acd68cd we would panic on recovery in case a gap happened to be between two xlog files, which is not OK. Seems that this is what happened in your case. The above-mentioned commit made the check more thorough - now we store the vclock of the previous xlog in each xlog and panic only if a whole xlog file is missing.. May be related to #3725, #3751. Found by Mail.Ru FRS.. Another crash encountered by the same customer:\n```\n0  0x00007ff6e5c425f7 in raise () from /home/vlad/tmp/frs-issues/lib64/libc.so.6\n1  0x00007ff6e5c43ce8 in abort () from /home/vlad/tmp/frs-issues/lib64/libc.so.6\n2  0x000000000040f8e3 in sig_fatal_cb (signo=, siginfo=, context=) at /build/usr/src/debug/tarantool-1.10.1.227/src/main.cc:258\n3  \n4  0x000000000050deb9 in gc_marktrace (traceno=16590, g=0x40cda3b8) at lj_gc.c:230\n5  gc_traverse_trace (g=g@entry=0x40cda3b8, T=T@entry=0x406fb830) at lj_gc.c:251\n6  0x000000000050e55c in gc_traverse_trace (T=0x406fb830, g=0x40cda3b8) at lj_gc.c:243\n7  propagatemark (g=0x40cda3b8) at lj_gc.c:340\n8  0x000000000050e789 in gc_onestep (L=L@entry=0x406ed288) at lj_gc.c:643\n9  0x000000000050edb4 in lj_gc_step (L=0x406ed288) at lj_gc.c:725\n10 0x000000000050ee66 in lj_gc_step_fixtop (L=L@entry=0x406ed288) at lj_gc.c:748\n11 0x00000000005127ab in lj_func_newL_gc (L=0x406ed288, pt=0x4011eb30, parent=0x4011e3b0) at lj_func.c:159\n12 0x000000000050acd1 in lj_BC_FNEW () at buildvm_x86.dasc:539\n13 0x000000000051cef4 in lua_pcall (L=L@entry=0x406ed288, nargs=, nresults=, errfunc=errfunc@entry=0) at lj_api.c:1139\n14 0x00000000004de683 in luaT_call (L=0x406ed288, nargs=, nreturns=) at /build/usr/src/debug/tarantool-1.10.1.227/src/lua/utils.c:931\n15 0x00000000004d9026 in lua_fiber_run_f (ap=) at /build/usr/src/debug/tarantool-1.10.1.227/src/lua/fiber.c:301\n16 0x000000000040ed3c in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=, ap=) at /build/usr/src/debug/tarantool-1.10.1.227/src/fiber.h:657\n17 0x00000000004ef070 in fiber_loop (data=) at /build/usr/src/debug/tarantool-1.10.1.227/src/fiber.c:640\n18 0x0000000000628a0f in coro_init () at /build/usr/src/debug/tarantool-1.10.1.227/third_party/coro/coro.c:110\n. Another crash from the same customer:\n0  0x00007f5dd38e05f7 in raise () from /home/vlad/tmp/frs-issues/lib64/libc.so.6\n1  0x00007f5dd38e1ce8 in abort () from /home/vlad/tmp/frs-issues/lib64/libc.so.6\n2  0x000000000040f8e3 in sig_fatal_cb (signo=, siginfo=, context=) at /build/usr/src/debug/tarantool-1.10.1.227/src/main.cc:258\n3  \n4  lj_tab_dup (L=0x4189fd80, kt=0x33) at lj_tab.c:187\n5  0x000000000050ad8b in lj_BC_TDUP () at buildvm_x86.dasc:567\n6  0x00000000004c860d in execute_lua_call (L=0x4189fd80) at /build/usr/src/debug/tarantool-1.10.1.227/src/box/lua/call.c:302\n7  0x000000000050ba37 in lj_BC_FUNCC () at buildvm_x86.dasc:809\n8  0x000000000051cef4 in lua_pcall (L=L@entry=0x4189fd80, nargs=, nresults=, errfunc=errfunc@entry=0) at lj_api.c:1139\n9  0x00000000004de683 in luaT_call (L=0x4189fd80, nargs=, nreturns=) at /build/usr/src/debug/tarantool-1.10.1.227/src/lua/utils.c:931\n10 0x00000000004c8a65 in box_process_lua (handler=0x4c8540 , base=0x7f5c4134feb0, request=request@entry=0x7f5dc6c0f9e0) at /build/usr/src/debug/tarantool-1.10.1.227/src/box/lua/call.c:440\n11 box_lua_call (request=request@entry=0x7f5dc6c0f9e0, port=port@entry=0x7f5c4134feb0) at /build/usr/src/debug/tarantool-1.10.1.227/src/box/lua/call.c:450\n12 0x00000000004c70bf in box_process_call (request=request@entry=0x7f5dc6c0f9e0, port=port@entry=0x7f5c4134feb0) at /build/usr/src/debug/tarantool-1.10.1.227/src/box/call.c:201\n13 0x000000000041240a in tx_process_call (m=0x7f5dc6c0f970) at /build/usr/src/debug/tarantool-1.10.1.227/src/box/iproto.cc:1461\n14 0x00000000004f3c24 in cmsg_deliver (msg=msg@entry=0x7f5dc6c0f970) at /build/usr/src/debug/tarantool-1.10.1.227/src/cbus.c:353\n15 0x00000000004f47ef in fiber_pool_f (ap=) at /build/usr/src/debug/tarantool-1.10.1.227/src/fiber_pool.c:64\n16 0x000000000040ed3c in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=, ap=) at /build/usr/src/debug/tarantool-1.10.1.227/src/fiber.h:657\n17 0x00000000004ef070 in fiber_loop (data=) at /build/usr/src/debug/tarantool-1.10.1.227/src/fiber.c:640\n18 0x0000000000628a0f in coro_init () at /build/usr/src/debug/tarantool-1.10.1.227/third_party/coro/coro.c:110\n. More similar traces from the customer:\nAnton Plokhotnyuk (21.02.2019 19:34):\n[root@cld-frs-db1 ~]# gdb /usr/bin/tarantool -c /var/core/tarantool.6884.189.core \nGNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-114.el7\nCopyright (C) 2013 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/...\nReading symbols from /usr/bin/tarantool...done.\n[New LWP 6884]\n[New LWP 6885]\n[New LWP 6887]\n[New LWP 7197]\n[New LWP 7204]\n[New LWP 6886]\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\nCore was generated by `tarantool tagger_014_01.lua               '.\nProgram terminated with signal 6, Aborted.\n0  0x00007f4caeff2207 in raise () from /lib64/libc.so.6\nMissing separate debuginfos, use: debuginfo-install tarantool-1.10.2.146-1.el7.centos.x86_64\n(gdb) bt\n0  0x00007f4caeff2207 in raise () from /lib64/libc.so.6\n1  0x00007f4caeff38f8 in abort () from /lib64/libc.so.6\n2  0x000000000040fb43 in sig_fatal_cb (signo=, siginfo=, context=) at /build/usr/src/debug/tarantool-1.10.2.146/src/main.cc:258\n3  \n4  gc_marktrace (traceno=16799, g=0x415e93b8) at lj_gc.c:232\n5  gc_traverse_trace (g=g@entry=0x415e93b8, T=T@entry=0x419f3630) at lj_gc.c:251\n6  0x00000000005157bc in gc_traverse_trace (T=0x419f3630, g=0x415e93b8) at lj_gc.c:243\n7  propagatemark (g=0x415e93b8) at lj_gc.c:340\n8  0x00000000005159e9 in gc_onestep (L=L@entry=0x414145f8) at lj_gc.c:643\n9  0x0000000000516014 in lj_gc_step (L=L@entry=0x414145f8) at lj_gc.c:725\n10 0x0000000000516113 in lj_gc_step_jit (g=, steps=0) at lj_gc.c:758\n11 0x000000002a5fc2a2 in ?? ()\n12 0x00000000414145f8 in ?? ()\n13 0x0000000000512c97 in lj_BC_FUNCC () at buildvm_x86.dasc:809\n14 0x00000000004cea6d in execute_lua_call (L=0x414145f8) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/call.c:302\n15 0x0000000000512c97 in lj_BC_FUNCC () at buildvm_x86.dasc:809\n16 0x0000000000524154 in lua_pcall (L=L@entry=0x414145f8, nargs=, nresults=, errfunc=errfunc@entry=0) at lj_api.c:1139\n17 0x00000000004e51c3 in luaT_call (L=0x414145f8, nargs=, nreturns=) at /build/usr/src/debug/tarantool-1.10.2.146/src/lua/utils.c:956\n18 0x00000000004ceec5 in box_process_lua (handler=0x4ce9a0 , base=0x7f4c9caefeb0, request=request@entry=0x7f4c9f0085e0) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/call.c:440\n19 box_lua_call (request=request@entry=0x7f4c9f0085e0, port=port@entry=0x7f4c9caefeb0) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/call.c:450\n20 0x00000000004cd06f in box_process_call (request=request@entry=0x7f4c9f0085e0, port=port@entry=0x7f4c9caefeb0) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/call.c:201\n21 0x00000000004121d7 in tx_process_call (m=0x7f4c9f008570) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/iproto.cc:1495\n22 0x00000000004fb044 in cmsg_deliver (msg=msg@entry=0x7f4c9f008570) at /build/usr/src/debug/tarantool-1.10.2.146/src/cbus.c:353\n23 0x00000000004fbc0f in fiber_pool_f (ap=) at /build/usr/src/debug/tarantool-1.10.2.146/src/fiber_pool.c:64\n24 0x000000000040ef9c in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=, ap=) at /build/usr/src/debug/tarantool-1.10.2.146/src/fiber.h:653\n25 0x00000000004f6460 in fiber_loop (data=) at /build/usr/src/debug/tarantool-1.10.2.146/src/fiber.c:650\n26 0x000000000063018f in coro_init () at /build/usr/src/debug/tarantool-1.10.2.146/third_party/coro/coro.c:110\n(gdb)\nAnton Plokhotnyuk (21.02.2019 19:35):\n[root@cld-frs-db1 ~]# gdb /usr/bin/tarantool -c /var/core/tarantool.7229.189.core\nGNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-114.el7\nCopyright (C) 2013 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/...\nReading symbols from /usr/bin/tarantool...done.\n[New LWP 7229]\n[New LWP 7231]\n[New LWP 7688]\n[New LWP 7230]\n[New LWP 7692]\n[New LWP 7232]\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\nCore was generated by `tarantool tagger_016_01.lua               '.\nProgram terminated with signal 6, Aborted.\n0  0x00007f3f7f37a207 in raise () from /lib64/libc.so.6\nMissing separate debuginfos, use: debuginfo-install tarantool-1.10.2.146-1.el7.centos.x86_64\n(gdb) bt\n0  0x00007f3f7f37a207 in raise () from /lib64/libc.so.6\n1  0x00007f3f7f37b8f8 in abort () from /lib64/libc.so.6\n2  0x000000000040fb43 in sig_fatal_cb (signo=, siginfo=, context=) at /build/usr/src/debug/tarantool-1.10.2.146/src/main.cc:258\n3  \n4  gc_marktrace (traceno=11823, g=0x4045f3b8) at lj_gc.c:232\n5  gc_traverse_trace (g=g@entry=0x4045f3b8, T=T@entry=0x403dc358) at lj_gc.c:252\n6  0x00000000005157bc in gc_traverse_trace (T=0x403dc358, g=0x4045f3b8) at lj_gc.c:243\n7  propagatemark (g=0x4045f3b8) at lj_gc.c:340\n8  0x00000000005159e9 in gc_onestep (L=L@entry=0x419551e8) at lj_gc.c:643\n9  0x0000000000516014 in lj_gc_step (L=L@entry=0x419551e8) at lj_gc.c:725\n10 0x00000000004e3780 in luaL_pushcdata (L=L@entry=0x419551e8, ctypeid=) at /build/usr/src/debug/tarantool-1.10.2.146/src/lua/utils.c:94\n11 0x00000000004d15c8 in luaT_pushtuple (L=L@entry=0x419551e8, tuple=0x7f3d185b6f40) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/tuple.c:496\n12 0x00000000004d2e87 in luaT_pushtupleornil (tuple=, L=0x419551e8) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/tuple.h:77\n13 lbox_index_get (L=0x419551e8) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/index.c:169\n14 0x0000000000512c97 in lj_BC_FUNCC () at buildvm_x86.dasc:809\n15 0x00000000004cea6d in execute_lua_call (L=0x419551e8) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/call.c:302\n16 0x0000000000512c97 in lj_BC_FUNCC () at buildvm_x86.dasc:809\n17 0x0000000000524154 in lua_pcall (L=L@entry=0x419551e8, nargs=, nresults=, errfunc=errfunc@entry=0) at lj_api.c:1139\n18 0x00000000004e51c3 in luaT_call (L=0x419551e8, nargs=, nreturns=) at /build/usr/src/debug/tarantool-1.10.2.146/src/lua/utils.c:956\n19 0x00000000004ceec5 in box_process_lua (handler=0x4ce9a0 , base=0x7f3f6e00feb0, request=request@entry=0x7f3f6fc0b8c0) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/call.c:440\n20 box_lua_call (request=request@entry=0x7f3f6fc0b8c0, port=port@entry=0x7f3f6e00feb0) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/call.c:450\n21 0x00000000004cd06f in box_process_call (request=request@entry=0x7f3f6fc0b8c0, port=port@entry=0x7f3f6e00feb0) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/call.c:201\n22 0x00000000004121d7 in tx_process_call (m=0x7f3f6fc0b850) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/iproto.cc:1495\n23 0x00000000004fb044 in cmsg_deliver (msg=msg@entry=0x7f3f6fc0b850) at /build/usr/src/debug/tarantool-1.10.2.146/src/cbus.c:353\n24 0x00000000004fbbd1 in fiber_pool_f (ap=) at /build/usr/src/debug/tarantool-1.10.2.146/src/fiber_pool.c:64\n25 0x000000000040ef9c in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=, ap=) at /build/usr/src/debug/tarantool-1.10.2.146/src/fiber.h:653\n26 0x00000000004f6460 in fiber_loop (data=) at /build/usr/src/debug/tarantool-1.10.2.146/src/fiber.c:650\n27 0x000000000063018f in coro_init () at /build/usr/src/debug/tarantool-1.10.2.146/third_party/coro/coro.c:110\n(gdb)\nAnton Plokhotnyuk (21.02.2019 19:36):\n[root@cld-frs-db1 ~]# gdb /usr/bin/tarantool -c /var/core/tarantool.1210.189.core\nGNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-114.el7\nCopyright (C) 2013 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/...\nReading symbols from /usr/bin/tarantool...done.\n[New LWP 1210]\n[New LWP 1211]\n[New LWP 1213]\n[New LWP 1490]\n[New LWP 1443]\n[New LWP 1212]\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\nCore was generated by `tarantool tagger_002_01.lua               '.\nProgram terminated with signal 6, Aborted.\n0  0x00007fe9c0aac207 in raise () from /lib64/libc.so.6\nMissing separate debuginfos, use: debuginfo-install tarantool-1.10.2.146-1.el7.centos.x86_64\n(gdb) bt\n0  0x00007fe9c0aac207 in raise () from /lib64/libc.so.6\n1  0x00007fe9c0aad8f8 in abort () from /lib64/libc.so.6\n2  0x000000000040fb43 in sig_fatal_cb (signo=, siginfo=, context=) at /build/usr/src/debug/tarantool-1.10.2.146/src/main.cc:258\n3  \n4  gc_marktrace (traceno=28160, g=0x4005e3b8) at lj_gc.c:232\n5  gc_traverse_trace (g=g@entry=0x4005e3b8, T=T@entry=0x412aae18) at lj_gc.c:251\n6  0x00000000005157bc in gc_traverse_trace (T=0x412aae18, g=0x4005e3b8) at lj_gc.c:243\n7  propagatemark (g=0x4005e3b8) at lj_gc.c:340\n8  0x00000000005159e9 in gc_onestep (L=L@entry=0x41adf7e8) at lj_gc.c:643\n9  0x0000000000516014 in lj_gc_step (L=L@entry=0x41adf7e8) at lj_gc.c:725\n10 0x000000000056bd70 in lj_cf_ffi_new (L=0x41adf7e8) at lib_ffi.c:526\n11 0x0000000000512c97 in lj_BC_FUNCC () at buildvm_x86.dasc:809\n12 0x00000000004cea6d in execute_lua_call (L=0x41adf7e8) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/call.c:302\n13 0x0000000000512c97 in lj_BC_FUNCC () at buildvm_x86.dasc:809\n14 0x0000000000524154 in lua_pcall (L=L@entry=0x41adf7e8, nargs=, nresults=, errfunc=errfunc@entry=0) at lj_api.c:1139\n15 0x00000000004e51c3 in luaT_call (L=0x41adf7e8, nargs=, nreturns=) at /build/usr/src/debug/tarantool-1.10.2.146/src/lua/utils.c:956\n16 0x00000000004ceec5 in box_process_lua (handler=0x4ce9a0 , base=0x7fe9b69ffeb0, request=request@entry=0x7fe9b500ac08) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/call.c:440\n17 box_lua_call (request=request@entry=0x7fe9b500ac08, port=port@entry=0x7fe9b69ffeb0) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/lua/call.c:450\n18 0x00000000004cd06f in box_process_call (request=request@entry=0x7fe9b500ac08, port=port@entry=0x7fe9b69ffeb0) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/call.c:201\n19 0x00000000004121d7 in tx_process_call (m=0x7fe9b500ab98) at /build/usr/src/debug/tarantool-1.10.2.146/src/box/iproto.cc:1495\n20 0x00000000004fb044 in cmsg_deliver (msg=msg@entry=0x7fe9b500ab98) at /build/usr/src/debug/tarantool-1.10.2.146/src/cbus.c:353\n21 0x00000000004fbbd1 in fiber_pool_f (ap=) at /build/usr/src/debug/tarantool-1.10.2.146/src/fiber_pool.c:64\n22 0x000000000040ef9c in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=, ap=) at /build/usr/src/debug/tarantool-1.10.2.146/src/fiber.h:653\n23 0x00000000004f6460 in fiber_loop (data=) at /build/usr/src/debug/tarantool-1.10.2.146/src/fiber.c:650\n24 0x000000000063018f in coro_init () at /build/usr/src/debug/tarantool-1.10.2.146/third_party/coro/coro.c:110\n(gdb)\n. A similar failure caught by [Travis CI](https://travis-ci.org/tarantool/tarantool/jobs/492052525):\n[003] box/net.box.test.lua                                            [ fail ]\n[003] \n[003] Test failed! Result content mismatch:\n[003] --- box/net.box.result    Tue Feb 12 09:10:41 2019\n[003] +++ box/net.box.reject    Tue Feb 12 09:20:17 2019\n[003] @@ -2308,7 +2308,7 @@\n[003]  ...\n[003]  disconnected -- nil, on_disconnect is not called second time.\n[003]  ---\n[003] -- null\n[003] +- true\n[003]  ...\n[003]  box.session.on_disconnect(nil, on_disconnect)\n[003]  ---\n[003] \n[003] Last 15 lines of Tarantool Log file [Instance \"box\"][/Users/travis/build/tarantool/tarantool/test/var/003_box/box.log]:\n[003] 2019-02-12 09:20:16.601 [87371] main/485/nil:38608 (net.box) net_box.lua:907 W> :38608: Peer closed\n[003] 2019-02-12 09:20:16.722 [87371] main/485/nil:38608 (net.box) net_box.lua:907 W> :38608: Connection refused\n[003] 2019-02-12 09:20:16.732 [87371] main/484/console/unix/: I> set 'log_level' configuration option to 6\n[003] 2019-02-12 09:20:16.733 [87371] main/484/console/unix/: I> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n[003] 2019-02-12 09:20:16.840 [87371] main/485/nil:38608 (net.box) V> :38608: Connection refused\n[003] 2019-02-12 09:20:16.863 [87371] main/495/console/unix/: I> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n[003] 2019-02-12 09:20:16.959 [87371] main/485/nil:38608 (net.box) V> :38608: Connection refused\n[003] 2019-02-12 09:20:16.990 [87371] main/508/console/unix/: I> set 'log_level' configuration option to 5\n[003] 2019-02-12 09:20:17.013 [87371] iproto iproto.cc:732 E> ER_INVALID_MSGPACK: Invalid MsgPack - packet length\n[003] 2019-02-12 09:20:17.013 [87371] main/509/localhost:38085 (net.box) net_box.lua:907 W> localhost:38085: Peer closed\n[003] 2019-02-12 09:20:17.041 [87371] main/510/localhost:33333 (net.box) net_box.lua:907 W> localhost:33333: Connection refused\n[003] 2019-02-12 09:20:17.247 [87371] iproto iproto.cc:732 E> ER_INVALID_MSGPACK: Invalid MsgPack - packet length\n[003] 2019-02-12 09:20:17.247 [87371] main/539/localhost:38085 (net.box) net_box.lua:907 W> localhost:38085: Peer closed\n[003] 2019-02-12 09:20:17.313 [87371] iproto iproto.cc:732 E> ER_INVALID_MSGPACK: Invalid MsgPack - packet length\n[003] 2019-02-12 09:20:17.317 [87371] iproto iproto.cc:732 E> ER_INVALID_MSGPACK: Invalid MsgPack - too big packet size in the header: 18400000000000000000\n[Main process] Got failed test; gently terminate all workers...\n[003] Worker \"003_box\" got failed test; stopping the server...\n\nStatistics:\n fail: 1\n skip: 1\n* pass: 82\nFailed tasks:\n- [box/net.box.test.lua, null]\nlogfile:        /Users/travis/build/tarantool/tarantool/test/var/log/003_box.log\nreproduce file: /Users/travis/build/tarantool/tarantool/test/var/reproduce/003_box.list.yaml\n\n\n[box/transaction.test.lua, null]\n[box/admin.test.lua, null]\n[box/sql-update-with-nested-select.test.lua, null]\n[box/rtree_misc.test.lua, null]\n[box/tree_pk.test.lua, null]\n[box/info.test.lua, null]\n[box/hash.test.lua, null]\n[box/func_reload.test.lua, null]\n[box/function1.test.lua, null]\n[box/rtree_point.test.lua, null]\n[box/alter.test.lua, null]\n[box/hash_multipart.test.lua, null]\n[box/leak.test.lua, null]\n[box/sequence.test.lua, null]\n[box/stat.test.lua, null]\n\n[box/net.box.test.lua, null]\n...\n. Duplicate #3855.. The issue was introduced by commit 76110901471e8db0e02b1c4966015abef7bab97c.. Reported by Mail.Ru Cloud FRS..C\nsize_t\ntx_manager_mem_used(struct tx_manager *xm)\n{\n    struct mempool_stats mstats;\n    size_t ret = 0;\nret += xm->write_set_size + xm->read_set_size;\nmempool_stats(&xm->tx_mempool, &mstats);\nret += mstats.totals.used;\nmempool_stats(&xm->txv_mempool, &mstats);\nret += mstats.totals.used;\nmempool_stats(&xm->read_interval_mempool, &mstats);\nret += mstats.totals.used;\nmempool_stats(&xm->read_view_mempool, &mstats);\nret += mstats.totals.used;\nreturn ret;\n}\n\n(gdb) p ((struct vy_env )0x29a9670).xm.read_set_size\n$66 = 451\n(gdb) p ((struct vy_env )0x29a9670).xm.write_set_size\n$67 = 18446744073685028953\n. The issue is not reproduced on Tarantool 1.7.6-27-g7ef5be2e.. Reverting commit 022a3c5026fffcecd9bc85f5484d5b5c53ae887d fixes the issue.. Actually, the issue has nothing to do with spaces. It can be reproduced even without `box.cfg()`:Lua\n!/usr/bin/env tarantool\nt1 = box.tuple.new(1)\nt1 = t1:update{{'+', 1, 1}}\ncollectgarbage()\nt2 = box.tuple.new(2)\nt1 = t1:update{{'+', 1, 1}}\n```. 1.10 is affected as well.. This was requested by Mail.Ru FRS in 1.10.2. In Lua, Tarantool always encodes integer numbers as MP_INT. SQL, on the other hand, seems to encode any number as MP_FLOAT in case the column type is REAL, even if the number is in fact integer. Technically, Tarantool is able to correctly compare MP_FLOAT with MP_INT - that's why memtx isn't affected - however it always calculates hash using plain msgpack as source so that hash(MP_INT) != hash(MP_FLOAT). Vinyl engine stores hashes of all keys inserted into an index in a bloom filter, to speed up lookups by absent keys. So when you look up 0 in Lua, it look ups for integer 0 hash in the bloom filter and finds none, because it hashed float 0.\n\n\nPossible solutions:\n- Fix Tarantool hash function (see tuple_hash_field). This is complicated as hashes calculated by the current hash function are already stored on disks of our customers. However, this is doable - we can introduce a new version of the vinyl bloom filter and deprecate the old one. A bad thing about this solution is that making the hash function treat MP_FLOAT integers as MP_INT integers will probably slow it down.\n- Fix SQL to use MP_INT for integer numbers, even if the column type is REAL.. Reopening as @kostja is convinced that Tarantool hash function should work exactly as comparators, i.e. treat MP_REAL 0 the same way as MP_INT 0.. Can be reproduced even without SQL - see #3919 - although the test case looks kinda artificial and is unlikely to happen in practice.. Memtx hash index is affected as well:\n```Lua\nffi = require('ffi')\nyaml = require('yaml')\nbox.cfg{log_level = 4}\ns = box.schema.create_space('test')\ns:create_index('pk', {type = 'hash', parts = {1, 'number'}})\ns:replace{ffi.new('double', 1)}\nprint('SELECT 1:\\n' .. yaml.encode(s:select(1))) -- not found\nprint('SELECT 1.0:\\n' .. yaml.encode(s:select(1.0))) -- not found\nprint('SELECT ffi 1.0:\\n' .. yaml.encode(s:select(ffi.new('double', 1)))) -- found\nos.exit(0)\nOutput:\n2019-01-22 13:25:45.881 [25970] main/101/test.lua C> Tarantool 2.1.1-185-gf583b6c8\n2019-01-22 13:25:45.881 [25970] main/101/test.lua C> log level 4\nSELECT 1:\n--- []\n...\nSELECT 1.0:\n--- []\n...\nSELECT ffi 1.0:\n\n\n[1]\n...\n```. Looks similar to #3883. Please try to reproduce using the latest Tarantool-1.10 build.. Looks similar to #3718. Steps to reproduce (debug build is required):\n\n\nDeploy a Tarantool instance with box.cfg.force_recovery set to true and create a test space:\nLua\nbox.cfg{listen = 12345, force_recovery = true}\nbox.schema.user.grant('guest', 'replication')\nbox.schema.space.create('test')\nbox.space.test:create_index('pk')\n\nIn another terminal, deploy a replica:\nLua\nbox.cfg{replication = 12345}\nInject a WAL delay on the replica:\nLua\nbox.error.injection.set('ERRINJ_WAL_DELAY', true)\nFill the replication channel on the master (it's important to write a lot of data so that the relay thread blocks on the replication socket):\nLua\nbox.begin() for i = 1, 1000000 do box.space.test:replace{1, i} end box.commit()\nWait a few seconds until the master starts spamming the log with:\nrelay/127.0.0.1:51826/101/main recovery.cc:280 E> can't apply row:\nrelay/127.0.0.1:51826/101/main I> fiber `main' has been cancelled\nrelay/127.0.0.1:51826/101/main I> fiber `main': exiting\nDisable the WAL delay on the replica:\nLua\nbox.error.injection.set('ERRINJ_WAL_DELAY', false)\nYou'll see something like this in the replica's log:\nmain/107/applier/ txn.c:301 W> too long WAL write: 1 rows at LSN 6: 11.915 sec\nmain/107/applier/ I> can't read row\nmain/107/applier/ xrow.c:99 E> ER_INVALID_MSGPACK: Invalid MsgPack - packet header\n\nUPD: without force_recovery the master crashes:\n```\n0  0x55be8b8b287e in print_backtrace+9\n1  0x55be8b793e1d in _ZL12sig_fatal_cbiP9siginfo_tPv+1e7\n2  0x7fdb12d3e0c0 in __restore_rt+0\n3  0x55be8ba6c4d4 in slab_put+14\n4  0x55be8ba76e6b in ibuf_destroy+43\n5  0x55be8ba00d06 in xlog_tx_cursor_destroy+18\n6  0x55be8ba01a9d in xlog_cursor_close+99\n7  0x55be8b865596 in recovery_delete+69\n8  0x55be8b86ad48 in _ZL10relay_stopP5relay+bf\n9  0x55be8b86c1dd in _Z15relay_subscribeP7replicaimP6vclockj+1ca\n10 0x55be8b8526d6 in _Z21box_process_subscribeP5ev_ioP11xrow_header+754\n11 0x55be8b79a353 in _ZL25tx_process_join_subscribeP4cmsg+7b\n12 0x55be8b8b52ac in cmsg_deliver+30\n13 0x55be8b8b62f7 in fiber_pool_f+19d\n14 0x55be8b7937e2 in ZL16fiber_cxx_invokePFiP13__va_list_tagES0+1e\n15 0x55be8b8af695 in fiber_loop+82\n16 0x55be8ba86bac in coro_init+4c\n17 (nil) in +4c\nAborted\n. Fixed in 1.10.2-95-gb23ee2fb and 2.1.1-160-g847aab99. According to the stack trace, the issue has nothing to do with vinyl - it looks like a Lua JIT issue.. Duplicates #3907. Fixed by 3f57564c3cd541268002cd437b52cfbe26342ab8. WAL thread removes xlog files by itself, which results in blocking WAL writes while garbage collection is in progress. if unlink is slow for some reason, as it seems to be the case in this case, WAL writes can be blocked for quite some time, resulting in a warning. Perhaps, we could hand garbage collection over to coio threads to avoid that.. Cherry-picked to 1.10, see 21f87c30d0353727e01149ba49846ae6ef669302. Cherry-picked to 1.10 - see commit ceb941796a6f08ccd450b810e2c82a913bf7c7b0. Affects Mail.ru FRS.. Those are not leaks, those are false-positive. The problem is Trantool doesn't free memory on shutdown. For instance, try to do `select` in Lua and exit and you'll see that ASAN reports that all selected tuples leaked although they did not. We could probably call `collectgarbage` before shutdown to fix that. Anyway, we have #2058 and #3419 for that.. Yeah, it definitely is. For some reason it doesn't show up in [the search results](https://github.com/tarantool/tarantool/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+iproto_stress+).. Requested by Mail.ru FRS.. Affects master-replica switching logic when hosting a Vinyl database.. Blocked by #3418. Looks like the problem is caused by big checkpoint signatures:\n-rw-r--r-- 1 push push 13M Mar  6 00:10 00000000007482838489.snap\n-rw-r--r-- 1 push push 13M Mar  6 02:13 00000136076343052970.snap\n-rw-r--r-- 1 push push 13M Mar  6 09:32 00000136076347248456.snap\n. 2.1 shouldn't be affected as there's no checkpoint_daemon.lua (it was rewritten in C), but need to check. We may either backport that patch or fix checkpoint_daemon.lua.. Fixed by b3656d459244c193053ae6ad9686d1cbd875a6f1. If 123456789123 is used instead of 4294967294 as the xlog signature, the system won't crash, but will still refuse to recover:\n2019-03-07 12:32:53.642 [22022] main/102/interactive C> Tarantool 2.1.1-362-g37d66377\n2019-03-07 12:32:53.642 [22022] main/102/interactive C> log level 5\n2019-03-07 12:32:53.642 [22022] main/102/interactive xlog.c:468 E> XlogError: ./00000000123456789124.snap: signature check failed\n2019-03-07 12:32:53.642 [22022] main/102/interactive F> can't initialize storage: ./00000000123456789124.snap: signature check failed\n``. This is a degradation introduced by commit 8031071efa94. Looks like due to a long WAL write on the replica, it didn't send an ACK to the master in time (configured bybox.cfg.replication_timeout`). As a result the connection was broken by the master.\nSee the code:\n\nHere's the replica sends ACKs to the master. Note, it only sends it if applier->writer_cond is signaled.\nhttps://github.com/tarantool/tarantool/blob/352e1f7c7dda61d22d0c0c0b1fc34c5e5ea11c47/src/box/applier.cc#L131\nThe applier->writer_cond is signaled upon applying a row on the replica.\nhttps://github.com/tarantool/tarantool/blob/352e1f7c7dda61d22d0c0c0b1fc34c5e5ea11c47/src/box/applier.cc#L556\nJudging by the replica log, it looks like the applier was stalled due to long WAL write:\n2019-03-11 16:18:24.095 [1565171] main/28584/applier/ W> too long WAL write: 1 rows at LSN 713876302: 3.188 sec\n2019-03-11 16:18:28.443 [1565171] main/28584/applier/ W> too long WAL write: 1 rows at LSN 713878358: 2.154 sec\n2019-03-11 16:18:28.443 [1565171] main/28584/applier/ W> too long WAL write: 1 rows at LSN 713878359: 2.151 sec\n2019-03-11 16:18:28.681 [1565171] main/29085/applierw/ sio.cc:303 !> SystemError writev(2), called on fd 16, aka [::1]:49549: Connection reset by peer\n2019-03-11 16:18:28.779 [1565171] main/28584/applier/ I> can't read row\n2019-03-11 16:18:28.779 [1565171] main/28584/applier/ xrow.c:554 E> ER_MISSING_REQUEST_FIELD: Missing mandatory field 'tuple' in request\nAs a result, the master didn't receive an ACK in time and closed the connection:\nhttps://github.com/tarantool/tarantool/blob/352e1f7c7dda61d22d0c0c0b1fc34c5e5ea11c47/src/box/relay.cc#L483\n\nWhy the connection wasn't reestablished though is a mystery to me. It looks like a bug somewhere in coio/sio causing the replica read and try to decode an incomplete row sent by the master right before closing the connection.\nThus there are two problems here to be fixed. The first one is the above-mentioned bug in sio. It will ameliorate the problem by making the error recoverable. The other problem is too long WAL writes causing the replication timeout. I don't think it's a replication issue: the problem is we write WALs to the system page cache without syncing them to disk; once there are too many dirty pages, the OS starts throttling writers until enough dirty pages have been flushed to disk. We've run into this problem before, e.g. see https://github.com/tarantool/tarantool/issues/3603#issuecomment-411815429. A workaround would be setting sysctl vm.dirty_bytes Linux option to a small value, say 10 MB. I think we should sync WALs explicitly, similarly to how we do it in case of SNAP files, see\nhttps://github.com/tarantool/tarantool/blob/352e1f7c7dda61d22d0c0c0b1fc34c5e5ea11c47/src/box/xlog.c#L339\nhttps://github.com/tarantool/tarantool/blob/352e1f7c7dda61d22d0c0c0b1fc34c5e5ea11c47/src/box/xlog.c#L1257. > The event loop stall may happen on a huge select as well, or when writing a huge tuple to WAL, then compression may take a while.\nStalling the event loop for several seconds by a CPU intensive workload smells like a bug in the application code, which is pretty easy to fix - just add fiber.yield() where appropriate. As for WAL compression - for it to stall the event loop for that long, we must insert hundreds megabytes per second, which is hardly possible.\nToo long WAL writes caused by dirty page throttling is a completely different beast though - it may happen even if the application is designed perfectly well and the CPU is never overloaded. In fact, I have to set vm.dirty_bytes for write-intensive performance testing to avoid latency spikes. I think it's unfair to hand this problem over to users rather than fixing it in the server code, similarly to how we fixed #1359.. Looks like #3910. Please upgrade. If the crash happens again after upgrade, feel free to reopen the issue.. Nit: this hunk rather belongs to the previous patch.. You forgot to fix this test.. Why not just replace all whitespaces with underscores in iproto_key_strs?. Looks like black magic to me. And what's the point of this change anyway?. I don't understand this change. What is it for?. FWIW I think RUN and INDEX are too generic names for vinyl specific meta types. IMHO we'd rather call them VYRUN and VYINDEX. BTW what is DATA supposed to mean?. Looks like you forgot to call box.backup.stop(): if another test using box.backup is run after this one, it will fail.. What for?. And what about DATA? I don't see it is used anywhere. May be, just drop it?. ",
    "CameronNemo": "Sorry, wrong branch.\n. Not wrong branch. I assumed you had a separate debian packaging branch for some reason.\n. ",
    "fl00r": "The problem was in iterator. In previous versions of tarantool one could send a string as an iterator ('box.iterator.ALL', i.e.). But now it fails on this kind of request because it waits for UINT instead of string.\n. Thanks to @coxnegative\n. \u0410 \u043f\u043e\u0447\u0435\u043c\u0443 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u043b\u043e \u0437\u0430\u043b\u0438\u043f\u0430\u043d\u0438\u0435? \u041a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0442\u0430\u043c \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0431\u0443\u0444\u0435\u0440 \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u044f\u043b\u0441\u044f. \n\u041d\u0443 \u0438 16\u043a\u0431 \u043d\u0430\u043c\u0435\u043a\u0430\u0435\u0442\n. ",
    "rybakit": "Is there any recommended way to bypass this limitation? Check strings and add an extra character if it length equals 2/4/8, or always add 8-character suffix/prefix? And how it handled in 1.6?\n. Thanks.\n. I get msgpack.decode: unsupported extension: 199 when I send extension-encoded data. Btw, I'm not sure what does 199 mean in this message?. This issue might be related to https://github.com/tarantool/tarantool-php/issues/89.. My use case was about executing arbitrary lua code for the concrete instance, something like \necho 'print(box.session.id())' | tarantoolctl eval instance\nAs a workaround, I use \necho \"box.session.id()\" | socat - UNIX-CONNECT:/var/run/tarantool/instance.control\nbut, besides it's not intuitive, it also outputs some garbage, which I need to take care of:\n```\nTarantool 1.6.8-102-g094d13b (Lua console)\ntype 'help' for interactive help\n\n\n8\n...\n```\n. :+1: \n\nRef: http://nodejs.org/docs/v0.4.6/api/child_processes.html \n. Related tickets:\nhttps://github.com/Sulverus/tarantool-docker/issues/4\nhttps://github.com/Sulverus/tarantool-docker/issues/3\nWould be great to fix them as well ;)\n. And here is an example of how I use docker to test Tarantool queue:\nhttps://github.com/tarantool-php/queue/blob/master/.travis.yml\n. @kostja @bigbes could Sulverus/tarantool-docker#3 be added to 1.6.8 milestone then? Right now it's not possible to run tests against the stable 1.6 branch with Docker.\n. :+1:  thanks\n. Does the fix also change the error code? It was 20 before and now it's 1.\n. It's not an issue, I just wanted to make sure it was intended.\n. @kostja Would it also have sense to add https://github.com/tarantool-php/queue?\n. I'm also curious if local is needed at https://github.com/rybakit/tarantool/blob/256cef941fcbcef223aca0bee9a8cc11c4e316e6/extra/dist/example.lua#L186.\n(see this question on SO).. ",
    "mejedi": "Actually, \\xc2 is missing, it happens because utf8('\\x80') == '\\xc2\\x80'. Libyaml implements the following encoding logic:\n1. If input is a malformed UTF-8 sequence, encode as !!binary.\n2. Consume 1, 2, 3 or 4 bytes from the input string depending on the next UTF-8 character width. Convert to Unicode code point. If the code point is printable, emit bytes as is. Otherwise, emit \\x??, \\u???? or \\U??????? escape sequence, depending on the code point's range.\n3. Repeat until the whole input is consumed.\nThe fix: encode as !!binary if any code point above 0x7f needs to be escaped during step 2.\n. worksforme\n. Also predictably fails on osx.\n. Coeio is already reinited on fork.\nReinit proc just literally re-initializes eio library, discarding the previous state altogether. In case there were any async tasks posted they won't complete, ever (hung fibers).\nWe can extend eio with a function to wait until async task queue drains and we can call it before fork.\nIn order for this bug to manifest itself, one has to spawn additional fibers calling coeio before doing fork/box.cfg{background=true}/. Since we are having a race condition here the failures won't be deterministic.\nWhether it's worth fixing is questionable. Personally I believe it SHOULD be impossible to write a code exploiting this issue, even if the code is convoluted and it is highly unlikely to be encountered in practice.\nNote 1: calling box.cfg{} again complains about setting option 'background' dynamically, hence it is probably safe to assume fork happens only once. No test for setting 'background' option dynamically, there are tests for other similar options (custom_proc_title, etc).\nNote 2: initialising database engine spawns threads. The engine fails to initialise unless box.cfg{} was already called, hence the issue doesn't apply to these threads.\nNote 3: initialising db before calling box.cfg{} fails with somewhat wordy error (due to traceback). It would be more friendly to just say 'Please call box.cfg{} first'. Maybe it makes sense to call box.cfg{} implicitly in this case?\n. Original issue as reported in the very first message was about fork breaking fibers scheduling on FreeBSD (sample code never makes it through to the \"after server\" line).\nThis happens because libev REQUIRES certain actions to keep the event loop operational after fork. This is because kqueue has a super weird fork semantics and has to be recreated after fork.\nThe fix: https://github.com/tarantool/tarantool/commits/gh-517\n. On FreeBSD 10, iproto binds to ::1 (IPv6) while replica attempts to connect to 127.0.0.1. Reproduced consistently in replication test bundle.\n. Presumably a718d469100a2992707c16cd251a56e5e5159be2\u2028\u2028 fixes this issue\n. It's sorta recursive. Txn thread may get busy preventing signal handlers in libev from running. Fine, move them to another thread. However the code triggered by the signal MUST run in the txn thread. We need some form of IPC with the txn thread. The busy event loop in the txn thread, which is the problem we were trying to sole in the first place, will render the IPC inoperable.\nSidenote: logrotate doesn't use libev and hence it doesn't suffer from the busy event loop.\n. This was narrowed down to a bug in libcxxrt.\nGo check __cxa_free_exception code.\nc++\nextern \"C\" void __cxa_free_exception(void *thrown_exception)\n{\n    __cxa_exception *ex = reinterpret_cast<__cxa_exception*>(thrown_exception) - 1;\n    ...\n}\n__cxa_exception memory layout [def]:\n__cxa_exception: { ...  { _Unwind_Exception: unwindHeader } }\ni.e. unwind layer operates with _Unwind_Exception struct which is embeded inside __cxa_exception.\n__cxa_free_exception gets a pointer to __Unwind_Exception but it does the math wrong while computing a pointer to the enclosing __cxa_exception.\nWe should file a bug for libcxxrt.\n. https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=204786\n. - from now on, package.cpath on OS X should mention dylib-s only, don't put so-s there;\n- LuaJIT, when probing for something.dylib, will try something.so as well.\n. Looks like a problem with exception handling to me (lj_err_unwind_dwarf stack frame present means that stack unwinding is in progress).\n. Fixed as a side effect of implementing #86.\nIf a script fiber is cancelled, interactive session terminates.\n. ### Proposed API\nlua\nbox.schema.func.reload('package.function') \u2014> true, nil\n                                           \u2014> false, 'Error message'\nReload a shared library implementing the particular stored function. If the function is implemented in Lua, reports success and does nothing.\nOther stored C functions from the same binary are implicitly reloaded as well.\nReload unloads the currently loaded instance of the shared library first. If reload fails, future calls to the affected stored C functions may fail as well.\nReload will fail if a library was loaded for other reasons rather than providing an implementation for a Tarantool C stored function. (Ex: also loaded in Lua script with ffi.load.)\nlua\nbox.schema.func.reload('package')\nReload the entire package contents.\nlua\nbox.schema.func.reload()\nReload everything.\n. Crashes virtually identical in 1.6 and 1.7.\n```\n==58151==ERROR: AddressSanitizer: heap-use-after-free on address 0x611000000a9c at pc 0x0001000b8785 bp 0x00000385f470 sp 0x00000385f468\nREAD of size 4 at 0x611000000a9c thread T0\n    #0 0x1000b8784 in space_index(space, unsigned int) space.h:171\n    #1 0x1000c5e9d in alter_space_commit(trigger, void) alter.cc:615\n    #2 0x1000e0e5b in trigger_run(rlist, void) trigger.h:67\n    #3 0x1000e1136 in txn_commit(txn) txn.cc:243\n    #4 0x1000e077f in txn_commit_stmt(txn, request) txn.cc:175\n    #5 0x1000e40ff in process_rw(request*, tuple) box.cc:183\n    #6 0x1000e68a6 in box_process1(request*, tuple) box.cc:583\n    #7 0x1000e7606 in box_delete box.cc:650\n    #8 0x1001310f9 in lbox_index_delete index.c:133\n    #9 0x1003095ca in lj_BC_FUNCC (tarantool+0x1003095ca)\n0x611000000a9c is located 92 bytes inside of 248-byte region [0x611000000a40,0x611000000b38)\nfreed by thread T0 here:\n    #0 0x5bf39 in wrap_free sanitizer_malloc_mac.inc:107\n    #1 0x1000b2e9f in space_delete(space) space.cc:148\n    #2 0x1000c6349 in alter_space_commit(trigger, void) alter.cc:652\n    #3 0x1000e0e5b in trigger_run(rlist, void) trigger.h:67\n    #4 0x1000e1136 in txn_commit(txn) txn.cc:243\n    #5 0x1000e077f in txn_commit_stmt(txn, request) txn.cc:175\n    #6 0x1000e40ff in process_rw(request*, tuple) box.cc:183\n    #7 0x1000e68a6 in box_process1(request*, tuple) box.cc:583\n    #8 0x1000e7606 in box_delete box.cc:650\n    #9 0x1001310f9 in lbox_index_delete index.c:133\n    #10 0x1003095ca in lj_BC_FUNCC (tarantool+0x1003095ca)\npreviously allocated by thread T0 here:\n    #0 0x5c2f6 in wrap_calloc sanitizer_malloc_mac.inc:118\n    #1 0x1000b1d9b in space_new(space_def, rlist) space.cc:103\n    #2 0x1000c52c1 in alter_space_do(txn, alter_space, space) alter.cc:755\n    #3 0x1000bf96b in on_replace_dd_index(trigger, void) alter.cc:1421\n    #4 0x1000e0e5b in trigger_run(rlist, void) trigger.h:67\n    #5 0x1000e06a0 in txn_commit_stmt(txn, request) txn.cc:171\n    #6 0x1000e40ff in process_rw(request, tuple) box.cc:183\n    #7 0x1000e68a6 in box_process1(request*, tuple) box.cc:583\n    #8 0x1000e7109 in box_insert box.cc:623\n    #9 0x1001308d7 in lbox_insert index.c:55\n    #10 0x1003095ca in lj_BC_FUNCC (tarantool+0x1003095ca)\nSUMMARY: AddressSanitizer: heap-use-after-free space.h:171 in space_index(space*, unsigned int)\n```\n. Current master builds on Ubuntu 12 / i386 with gcc4.6 just fine. And so does 1.6.\nHowever, the core issue is us not setting the target architecture explicitly. The 'architecture' means the subset of the hardware features the compiled code relies upon (ex: i686(Pentium Pro) vs. core i7). Compiling for advanced architectures results in a binary that is generally running faster on recent hardware but it fails to run on older hw.\nWe depend on atomic instructions being present and it means -march=i686 or better. If the target architecture is an older one atomic instructions are n/a and the compiler inserts calls to emulation functions that are nowhere to be found, hence the linker error.\nIf -march= option is missing, the default architecture specified when gcc itself was built is used. To query the default do gcc -Q --help=target | grep -- -march. Some distributions have sensible defaults but some don't.\nThe suggestion is to specify target architecture explicitly. It must be decided what our min hardware requirements are. We shouldn't probably exceed the minimal hardware requirements of the distributions me are providing binary packages for.\n. It looks like we are compiling with SSE2 by default (simd.cmake).\n. The following is the summary of an internal discussion.\nLogger key (string) specifies the logging destination. In order to support different destinations in a uniform way the following syntax is adopted:\n- \"file:/path/to/file\" \u2014 log to file;\n- \"pipe:/path/to/executable [param1 ...]\" \u2014 log to a helper process via a pipe;\n- \"syslog:[key=value[,key=value...]]\" \u2014 log to syslog.\nThe legacy logger syntax is retained for compatibility. The legacy syntax will be dropped in a future release.\nSyslog Destination\nThe syntax is \"syslog:\" followed by an optional comma separated key=value list. The folowing keys are defined:\n- identity=... \u2014 a string prepended to every syslog message (default: tarantool);\n- facility=... \u2014 syslog facility (auth, authpriv, cron, daemon, ftp, kern, lpr, mail, news, security, syslog, user, uucp, local0 ... local7, default: user).\nNote: the severy level of a message logged to syslog is set automatically.\nNote: the proposed syntax is based on [1] and [2].\n. # RFC: Cfg Module\n1 Basic Usage\nA config is a flat key-value dictionary. Valid keys must be registered.\nIf configuration data contains an unknown key the error is reported. If\na key is missing the default value is assumed (provided during\nregistration.)\nCreating empty config object: \nlua\ncfg = require('config').new()\nRegistering keys:\nlua\ncfg.reg('work_dir', '.', 'string') -- name, default value (optional),\n                                   -- type(s) (optional)\nLoading data:\nlua\ncfg.load_file('my.conf') -- or\ncfg.load(lua_table) -- or\ncfg.update(lua_table) -- load replaces data while\n                      -- update merges new data with existing one\nBoth load and update validate the data. If validation fails existing\ndata is left intact.\nAccessing the data:\nlua\ncfg.get('work_dir') -- or\ncfg.data.work_dir\n2 Nested Tables\nA value is either of a primitive type (ex: a string, a number) or another\ntable. By default a nested table is treated as an opaque blob, i.e. if a\nvalue was provided it is used as-is (not merging with defaults). However\nif the nested table structure is known, the same rules apply as for\nthe root table (no unknown keys rule, merging with defaults):\nlua\ncfg.reg('sophia.memory_limit', 0, 'number')\n3 Frozen Keys\nThis feature prevents changes to a certain key. If a load or update\nchanges a frozen key operation fails in the validation stage. \nlua\ncfg.freeze('work_dir') -- prevent changes of the specific key\ncfg.freeze('<set_once>') -- prevent changes of any tagged key,\n                         -- tags are set during key registration,\n                         -- ex: conf.reg('<tag>name', ...)\n4 Listening for Changes\nThe following method enables to receive notifications when a certain key\nchanges due to a load or update operation:\nlua\ncfg.add_listener(function (cfg_data)\n    print('Listen URI is now ' .. cfg_data.listen)\nend)\nA listener is invoked immediately upon registration. The function\nis passed the configuration data. The list of keys accessed is built\ntransparently (internally cfg_data is a proxy object). \nLater if any key on the list changes the listener is invoked again\n(building the updated keys list as a side effect). Listeners run after data validation in\nupdate or load operation. \nListeners MUST be prepared for spurious invocation, i.e. a config\nimplementation is technically permitted to invoke a listener even if no\nrelevant keys changed.\n5 Preprocessing and Custom Validation\nThis feature enables preprocessing a value before it is assigned to a\nkey:\nlua\ncfg.reg('listen', nil, 'string, number', process_uri)\nThe function is invoked as follows:\nlua\nprocess_uri(new_value, old_value)\nA function either accepts the new value or rejects it. If a function\nretuns a value it is stored in the key (preprocessing). The\nold_value is passed just in case a function decides to implement its own\nstrategy for merging changes.\n. Cfg module POC: https://gist.github.com/mejedi/a61c4e2a0140bf1f0401\n. Done for cord_start-ed threads. TODO: eio pools, sophia threads.\n. Done for eio pool (Linux). TODO: eio pool, sophia threads.\n. The crash is being investigated in gh-1107\n. Fixed in the patch for gh-1043\n. 1. There is code that's totally unprepared to handle errors due to file descriptor limit \u2014 like evpipe_init in the posted stack trace. It happens because pipe allocation (used for async notifications) happens on demand in ev_async_start, and there is absolutely nothing it can do. Can fix that by eager pipe allocation.\n2. Xlog or snapshot file may fail to open due to the descriptor limit as well. Can fix it by carefull coding and 'emergency' descriptors, like dummy /dev/null fds that can be closed when we've reached the limit. Expect issues due to threads.\n. Fixed as a side effect of #86.\n. Fixed in 1.6 branch.\n. Internally, if work_dir is set, Tarantool does chdir() to that dir. This is when any symlinks are replaced with the target path, that's simply how chdir() works [1].\nOP was doing code reload without restarting Tarantool. The following schema was implemented:\n- code is deployed in a directory with a generated name;\n- /var/lib/tarantool/scripts/service/data symlink was pointing to the current deploy dir;\n- multiple versions can coexist; switching them is as easy as changing a single symlink.\nIn order for the code to properly load it was necessary to cd to the deploy dir (dependencies). However doing it through work_dir doesn't work because work_dir chdir()-s once and chdir() resolves symlinks.\nSolution\nProvide bindings for chdir(), to be called explicitly before reloading code. (#1141)\n. ### Design Issues\nMultiple fibers could get blocked waiting for the same object (fd). An object often provides an explicit close() method. Close invalidates the file descriptor; before closing it is necessary to unblock all fibers waiting for the descriptor and to prevent more fibers from getting blocked.\nThis logic is already implemented in highlevel wrapper in the socket module; we are going to need it in database connectors as well and probably all over the place.\nLibev is easily hackable to enumerate and kill all watchers associated with a file descriptor.\nThe suggestion is to wrap a fd in a C structure (structure lifetime == object lifetime) and to change coio_wait() interface. This structure wrapper thing will allow for:\n- associating flags with fd (to avoid ev_io_init overhead \u2014 see above);\n- preventing fibers from blocking on an object that is about to die;\n- allowing for coio_wait() generalizations: see next section.\ncoio_wait generalization\ncoio_wait() allows to wait for a fd + timeout. When it is necessary to wait for a larger set of events one has to write complex code involving libev watchers and fiber magic.\nThe suggestion is to implement coio_wait_N and polymorphic waitable objects (the suggested fd wrapper will be the first one).\nThis will provide a convenient coroutine-friendly interface and will allow to abstract from libev.\n. Doesn't feel like a good idea any more :)\n. Suggest splitting the object in two; the user will be holding a reference to the 'facade', while the workers are referencing the 'backend'. Once the user releases the last reference, facade will be garbage collected eventually, killing the 'backend' in gc handler.\n. Posting a little design spec to outline the direction we are going with net.box.\nWe are doing the major refactoring/rewriting with the following goals in mind:\n- improve code structure making it more maintainable and approachable;\n- the design must allow for an active net.box to be GC-ed, implicitly closing the connection;\n- the performance is super important, it looks like the major source of overhead is fiber coordination; remove as much overhead as possible.\nThese goals are closely related, actually. To allow for GC, object graph must be carefully designed. If done carelessly, we will reproduce the situation we are currently facing \u2014 a background fiber referencing the connection prevents GC. Abstraction layers and similar features of a good design should be treated with extreme caution to avoid performance degradation.\n1. Extracting net_connector\nTarantool speaks 2 network protocols:\n1. console \u2014 a text protocol, human readable & writable (think telnet);\n2. iproto \u2014 a binary protocol, DB queries + remote Lua code execution.\nIn both protocols a server speaks first. The initial server message mentions the protocol being used. The initial server message is compatible between protocols, allowing for a protocol-oblivious client. For instance, a remote console can work on top of both protocols.\nHowever, iproto is a much more feature-rich protocol. Currently, console is implemented on top of the net.box. The later speaks both protocols, but unless the wire protocol is iproto, net.box is in the special degraded mode with all requests but EVAL failing.\nWe are extracting the basic connection facility into net_connector object. The later is responsible for establishing the connection, multiplexing simultaneous requests and parsing responses. The client API is relatively low level \u2014 a client obtains a send buffer with begin_response(). She renders the request in the buffer provided. Finally, the client invokes wait_response() obtaining a response.\nlua\nm = net_connector('<url>', { <options> } )\nstatus, buf, id = m.begin_request(timeout);\nif (status) then\n  format_request(buf, id, 'SELECT', ...)\n  return m.wait_response(id, timeout)\nend\nThe connector performs implicit close on GC. In the absence of user references it is collected, eventually.\nBoth remote console and net.box build on top of net_connector.\n2. The Internals of a net_connector\nThe connector employs a single background fiber. The later executes the following procedure:\n1. connect;\n2. read handshake;\n3. invoke a protocol-specific procedure.\nThe iproto procedure goes as follows:\n1. do auth;\n2. repeatedly extract a response, and dispatch it to the matching fiber;\n3. (while waiting for a response, send buffered outgoing data;)\n4. (if a response code indicates an outdated schema, run update-schema procedure.)\nThe programming model is as follows:\n- There is a socket, plus a send buffer plus a receive buffer.\n- The background fiber is responsible for moving data between the socket and buffers.\n- The task is accomplished with send_and_recv() primitive. It flushes send_buf and puts incoming data in recv_buffer until either N bytes are available or a boundary string is encountered. Send and receive activities are happening concurrently.\n- Protocol-specific routines recv_console_response() and recv_iproto_response() are built on top of the send_and_recv() primitive.\n- The background fiber has direct access to both buffers.\n- User obtains send_buf form begin_request() method. It is mandatory to begin a request with begin_request(). The method waits if requests aren't allowed in the current state or if send_buffer usage exceeds a limit. The method also ensures that an ongoing send_and_recv() will notice the newly queued data (we assume yield doesn't happen until the request is rendered).\nWait_response() inserts the calling fiber into an internal table keyed by id. The fiber then sleeps until woken by a protocol-specific procedure.\n3. C Aid\nFor the reasons of simplicity and efficiency, several parts are implemented in C.\n3.1 Fiber.event\nA light-weight sibling of the fiber.channel, this object is not unlike POSIX condition variable.\n- wait() \u2014 puts the current fiber to sleep, until explicitly woken;\n- signal() \u2014 wake all waiting fibers (FIFO order).\nThe intended pattern is to wait() in a loop while a condition is false.\n3.2 Iomux\nIO multiplexer implements the core of begin_request() and send_and_recv() primitives. Precisely,\n- imx_sender_checkin() \u2014\n  - waits for the proper state;\n  - waits until send_buf usage is below a threshold;\n  - notifies an ongoing send_and_receive.\n- imx_line_service() \u2014 send_and_receive.\nA few IO multiplexer fields are exposed to Lua via FFI, allowing for efficient buffer access. The multiplexer setups socket IO using libev watchers in the most efficient manner possible (not a single syscall wasted!)\nOften, a sender will bypass the overhead of imx_sender_checkin() Lua-C call (fast field, see sources). Last but not least, wakeups in IO multiplexer are efficient (think thundering herd).\nlua\nffi.cdef([[\n    struct tarantool_iomux\n    {\n        ptrdiff_t   fast;\n        struct ibuf send;\n        struct ibuf recv;\n        char        _[?];\n    };\n]]);\n. Preliminary results arrived: 15%  to 20% performance improvement!\n1M pings in 10K concurrent fibers (-20%):\nThis one measures the overhead of fibers coordination and exchanging requests and responses. The messages themselves are very small.\n$ time ./tarantool benchmark_new_net.lua\nreal    0m2.288s\nuser    0m2.127s\nsys     0m0.065s\n$ time ./tarantool benchmark_old_net.lua\nreal    0m2.899s\nuser    0m2.793s\nsys     0m0.092s\n100K selects in 1K concurrent fibers (-15%):\nPerforming the real requests here! Each result is ~700 bytes, expanding into ~250 objects on 3 nesting levels.\n```\n$ time ./tarantool benchmark_new_net.lua\nreal    0m1.877s\nuser    0m1.749s\nsys     0m0.056s\n```\n$ time ./tarantool benchmark_old_net.lua\nreal    0m2.193s\nuser    0m2.109s\nsys     0m0.084s\nWhat Did the Profiler Say?\nPING results were hardly surprising. However in SELECT test we were expecting to see little to no difference since the major time is spent performing msgpack serialisation. Check out the flame graphs:\nhttps://www.dropbox.com/s/h6bz1tw8avm73lu/new_box.svg?dl=0\nhttps://www.dropbox.com/s/zsqlolc771xeuxv/old_box.svg?dl=0\nIt appears that msgpack serialisation indeed takes up to 80% time.\nHowever there is on important difference: lj_tab_newkey stack that is responsible for more than 8% running time in the current implementation is virtually missing from the new implementation's flame graph!\nIt appears that SELECT has a significantly higher latency than PING, hence more fibers are waiting for a response simultaneously. In the current implementation there are ~10 insert operations involving a hash table sized proportional to the number of waiting fibers, per requests (lj_tab_newkey).\nThe new implementation performs only 2 inserts per request.\nTo validate our hypothesis we've tested the current implementation again reducing concurrency to 100 fibers, lj_tab_newkey disappeared completely, supporting our conclusions.\nrehashtab\nYou may wonder, why does the size of a hash table matter if insert complexity is O(1). The reason is LuaJIT growing/shrinking the hash table dynamically as the size changes. The flame graph shows that the majority of lj_tab_newkey running time is spent in the nested call to rehashtab.\n. Fixed by 65ecebccb8ea95f4b35837cc32864633a1284c73\n. This is a duplicate of  #910.\n. ```\n--- a/src/box/tuple.cc\n+++ b/src/box/tuple.cc\n@@ -41,6 +41,9 @@\n #include \"errinj.h\"\n #include \"fiber.h\"\n+#include \n+#include  / hack /\n+\n / Global table of tuple formats */\n struct tuple_format tuple_formats;\n struct tuple_format tuple_format_ber;\n@@ -784,6 +787,7 @@ box_tuple_ref(box_tuple_t tuple)\n        assert(tuple != NULL);\n        try {\n                tuple_ref(tuple);\n+               G(tarantool_L)->gc.total += tuple->bsize;\n                return 0;\n        } catch (Exception e) {\n                return -1;\n@@ -794,6 +798,7 @@ void\n box_tuple_unref(box_tuple_t tuple)\n {\n        assert(tuple != NULL);\n+       G(tarantool_L)->gc.total -= tuple->bsize;\n        return tuple_unref(tuple);\n }\n```\n. Confirmed that with this patch garbage collection frequency depends on the tuple size.\nlua\ndata = '0123456789abcdef'\ndata = data .. data .. data .. data\ndata = data .. data .. data .. data\ndata = data .. data .. data .. data\ndata = data .. data .. data .. data -- removing this line results in GC skipped\nprint (#data)\nbox.cfg{}\nfor i = 1,106 do box.tuple.new{data} end\nprint 'done loop'\nos.exit()\nNote: original patch was incomplete, box.tuple.new doesn't use box_tuple_ref.\n. There is still one issue left to resolve.\n- Adding tuple size to gc.total counter on every addref from Lua is probably incorrect \u2014 we are accounting for the same tuple multiple times;\n- may result in gc.total overflowing.\nWe can add another counter in tuple for Lua references (can get away with just a few bits, use saturation airthmetic, modify gc.total on transitions from zero to non-zero and back). We can also implement it as is on x86_64, since 64 bit gc.total is unlikely to overlow.\n. Precisely.\n. > Th.open should behave just like plain UNIX open: if the third paramete is omitted, the file is created in 777 & umask mode.\nI believe UNIX open will just lift random garbage from stack if the third param was omitted.\n. A few notes:\n- fio.open, fio.mkdir and fio.chmod gets a mode, but only the first one implements symbolic modes, e.g. fio.open('pathname', { 'O_RDWR' }, { 'S_IXUSR', 'S_IWUSR' } );\n- the later style feels awkward, probably we can design a better one? draw inspiration from other Lua libraries;\n- mode parameter in fio.open and fio.mkdir not documented.\n. Filed #1404 \n. CONFIRMED: this happens due to a stack overflow, the defect was fixed in Sophia upstream.\nPlease consider merging fiber-stack-quard-pages, this tool is useful.\n. Backporting it to master.\n. Backporting complete.\n. We already have a rather thorough test case. Why does it pass? Due to the sheer luck. Snapshot daemon failed due to undefined snaps global. Coincidently, the test defined snaps variable.\nI feel the test is ok. We should check for this kind of errors in compile time, see #1234.\nShall we close the issue?\n. Actually in recent Tarantool versions delimiter is unnecessary (#1133).\nPlease tell if it works for you.\n. Filed bug #9 against try.tarantool.org\n. The following holds true\nlua\nt = ffi.ctype(\"struct tuple\")\nffi.istype(t,t) == true\ni.e. the type system fails to capture the difference between a type and an instance of that particular type.\nAccording to the type system, ffi.ctype(\"struct tuple\") IS a tuple (remember, type===type instance).\nIt's not clear how to fix that in a clean way; the straight-forward solution would be peeking into the internals (see ffi_ckecktype() in luajit/src/lib_ffi.c.) Note: already doing exactly that in src/lua/utils.c. \n. What about all these? Even if this is not considered to be of a high priority, it is still a bug.\n\nsrc/box/lua/schema.lua:    if not ffi.istype(iterator_t, state) then\nsrc/box/lua/tuple.lua:    if not ffi.istype(tuple_t, tuple) then\nsrc/lua/buffer.lua:    if not ffi.istype(ibuf_t, buf) then\nsrc/lua/init.lua:    if not ffi.istype('struct error', err) then\nsrc/lua/init.lua:    if not ffi.istype('struct error', err) then\nsrc/lua/init.lua:    if ffi.istype('struct error', (...)) then\nsrc/lua/msgpackffi.lua:    elseif ffi.istype(const_char_ptr_t, str) then\nsrc/lua/socket.lua:    if not ffi.istype(socket_t, socket) then\nsrc/lua/uuid.lua:    if not ffi.istype(uuid_t, uu) then\nsrc/lua/uuid.lua:    if not ffi.istype(uuid_t, uu) then\nsrc/lua/uuid.lua:    if not ffi.istype(uuid_t, uu) then\nsrc/lua/uuid.lua:    if not ffi.istype(uuid_t, rhs) then\nsrc/lua/uuid.lua:    if not ffi.istype(uuid_t, lhs) then\n. > It'll be great if you can make this fix without touching libyaml. I fixed similar problem for tutorial() long time ago and that fix works properly both with system and embedded libyaml.\n\nI would love to avoid touching libyaml if it was possible. Unfortunately, it didn't work.\nBasically, lua-yaml decides on the formatting style (that very part you've tweaked for tutorial()), and then it asks libyaml to use that particular style. However, if libyaml thinks that requested style is inappropriate for the data at hand, it will pick another one.\nLibyaml is being overconservative about the TAB character (used in lua error messages).\nYAML 1.1\n\nTabs may appear inside comments and quoted or block scalar content.\n Tabs must not appear elsewhere, such as in indentation and separation spaces.\n. FYI: currently the error message looks plain scary.\n\n```\ntarantool> box.info()\n\n\nerror: \"[string \\\"-- load_cfg.lua - internal file...\\\"]:242: Please call box.cfg{}\n    first\\nstack traceback:\\n\\t[string \\\"-- load_cfg.lua - internal file...\\\"]:242:\n    in function '__index'\\n\\t[string \\\"return box.info()\\\"]:1: in main chunk\\n\\t[C]:\n    in function 'pcall_lua'\\n\\tbuiltin/tarantool.lua:133: in function 'pcall'\\n\\tbuiltin/console.lua:78:\n    in function 'eval'\\n\\tbuiltin/console.lua:225: in function 'repl'\\n\\tbuiltin/console.lua:274:\n    in function \"\n...\n```\n. Did the benchmarks, observed no difference. BTW: code also lives in memory and there is a single instance of each shared library, so we end up with say libc loaded into one Numa domain and libssl loaded into another, and there is absolutely nothing we can do with it. Also it is possible to run out of memory in the desired Numa node while there are still lots of memory in 'wrong' nodes.\n\nTry numactl + taskset shell commands to achieve the desired effect.\n. LuaJIT uses sprintf(\"%.14g\") to format its numbers.\nStandard library implementation (tostring, etc) is in luajit/src/lib_base.c.\nFollowing the breadcrumbs it becomes apparent that lua_number2str defined in luajit/arc/luaconf.h is responsible for formatting. \n. +1\nAlso, trace always ends in lj_BC_FUNCC because of the custom stack layout in hand-coded assembler interpreter routines.\n. Re-opening for discussion.\nThe burning question is how to introduce new features in connectors while maintaining backwards compatibility. We should decide how to implement it in net.box and use it as a model for other connectors.\nBasically we have three options:\n1. Leave call method as is, add call_17 to request new marshalling for early adopters.\n2. Modify call to behave in 1.7 semantics, add call_16 for back compat.\n3. Smart call behaving as call_16/call_17 depending on the server version + call_16 and call_17.\nOption 1 is conservative and doesn't break things.\nOption 2 may work but requires complex migration procedure which needs to be documented:\n- Tarantool team neads to implement call_16 in 1.6 branch;\n- the latest 1.6 Tarantool is deployed;\n- application is updated to use call_16 in place of call;\n- finally update Tarantool to 1.7.\nOption 3 doesn't work because of the scalars (net.box user has to write different code depending on the server version, even more broken code.)\nPersonally, I like option 1 most. We could do option 2 but we should update connectors first for consistency and that's hard to do in a timely fashion because of the connectors maintained by the community.\n. Summing up discussion with @kostja:\n- Call semantics (1.6 vs 1.7) is defined in connect options and is independent of the actual server version.\n- Default is 1.7.\n- Connectors must implement similar option, starting with Python. Consistency matters!\n- Migration procedure will be included in the docs.\nOnce the interested parties agree on this, I am updating the linked tickets and creating one in docs.\n. > Why don't use 1.6 for 1.6 server by default?\nBecause it's more complex and adds non-determinism.\n. We should accept nil timeouts as well (nil==none, infinite timeout). Comes in handy when you write a function, accepting an optional timeout and passing it further to a channel function, eg:\nlua\nfunction my_get(channel, optional_timeout)\n    -- do things\n    -- ...\n    channel:get(channel, optional_timeout)\nend\n. We can probably rescue https://github.com/tarantool/tarantool/commit/a0852b53756d0e5a108f99f976eed3df82fe12cc, contains smart pathjoin removing .. components.\n. We still need a reliable loading, the current approach with explicit listing of every version of the openssl library doesn't work well (currently broken on Debian Stretch).\n. Outdated.. View is test passes.. Related: #1322\n. libssl.so.1.0.2 still not loaded, please fix that\n. Listing all versions explicitly is unreliable and doesn't scale well. Additionally, Stretch is scheduled for release later this year \u2014 making this a minor issue. \nReliable OpenSSL loading is #1322\n. We've recently added TAB-completion in console (#86).\nUnfortunately, pasting a text with TABs triggers completion.\nBTW, the following code doesn't work as expected:\n```\nunix/:/var/run/tarantool/grepmaillog_sofia.control> local res = {}\n\n...\n```\nlocal variable scope is limited to that particular line of input. This is actually a Lua quirk.\nWhen pasting multi-statement code, please enclose it in do ... end to ensure that a local variable is visible in subsequent statements in that code.\n. We can suppress completion screens if TAB is immediately followed by another char, will work most of the time (though not 100% reliable). Please upvote if it sounds reasonable.\n. Implemented a knob to turn auto-completion off: require(\"console\").ac(false).\n. Too much typing to my taste.\n. Initial patchwork done: https://github.com/mejedi/libeditline-color\n. View test is passing.. View test is passing.. View test is passing.. Outdated.. Fixed in 916f1b8d58\n. Dup of #1210.\n. Patch prepared and sent to LuaJIT mailing list; awaiting response.\n. Applied patch to Tarantool LuaJIT mirror.\n. Impossible to implement with public C or Lua API.\n- unable to query the list of a ctype members (ex: record field name completion);\n- can't get ctype metatable;\n- rawget for ctypes missing \u2014 i.e. getattr will invoke meta-methods. No arbitrary code execution during completion!\nCan hack a solution in reasonable time using internal LuaJIT APIs (based on ffi_meta___index code).\n. Please, deprecate box.new as well :)\n. Outdated.. Please elaborate on your proposal. What should be done differently? May be a lexer error?\n. Will break tarantool-avro and maybe other code.\n. Works for me.\n. Confirmed that this issue was yet another manifestation of #1638.\n. It's a quirk of the current fiber scheduler; not a bug.\nBasically, when the parent fiber spawns a child via fiber.create, the new fiber starts executing immediately. Once the child reaches fiber.sleep(), it yields allowing for the parent to resume. At this point, the next line following fiber.create() executes and f.storage.xxx is set.\nBTW, the behaviour is described in the docs: https://tarantool.org/doc/reference_lua/fiber.html#lua-function.fiber.create\n. Apple introduced clock_gettime in latest MacOS. By the time anyone approaches this ticket it's going to be dominant :)\n. Please provide some rationale behind disguising ENV as a table. How about a simple module with getenv() and setenv() functions?\n. Please try a later build, 8b23c8d has known issues.\n. Removed all packages derived from 8b23c8d. Closing the issue, feel free to reopen if the crash occurs again.\n. eb1cebeb30\n. Please pass reconnect_after=<timeout> to net_box.new.\nWe will improve the documentation (https://github.com/tarantool/doc/issues/33)\n. @viciious \nAvailable in 1.6 as well.\n. It seams to work with the latest build.\nCould you please confirm that updating to the latest build fixes your issue?\n```\ntarantool> box.space.test.index.secondary:update({2},{})\n\n\nerror: More than one tuple found by get()\n...\n\ntarantool> pcall(box.space.test.index.secondary.update, box.space.test.index.secondary, {2},{})\n\nfalse\nMore than one tuple found by get()\n...\n\ntarantool> _TARANTOOL\n\n1.7.1-490-g81f3f35\n...\n\ntarantool> os.execute('lsb_release -a')\nNo LSB modules are available.\nDistributor ID: Debian\nDescription:    Debian GNU/Linux 8.5 (jessie)\nRelease:        8.5\nCodename:       jessie\n\n\n0\n...\n\n```\n. No response, closing.\n. Necessary changes committed to Tarantool LuaJIT mirror.\n. ASAN comes in two parts \u2014 compiler support + a runtime library.\nWe need a modified runtime to understand Tarantool fibers. No need to build a patched compiler :)\nFiber support was introduced in https://reviews.llvm.org/D20913, successfully backported the patch to XCode 7.3.0 tree.\n. > The parent fiber is subsequently killed even though the orphaned connection object is still alive.\n\nIn my opinion, it is pretty obvious that in case the reconect_after option is specified, timeout errors should be inhibited.\n\nWell, the connection wasn't re-established within 4 seconds hence the request didn't complete in 4 seconds hence the timeout error. I don't get why timeouts should behave any different when connection is reconnecting.\nYou may use pcall to catch errors.\n. Also export lua_istuple and think of more consistent names.\n. > Hi, we can't detect and stop JIT-compiled while true do end loop. Please just don't do that.\nWe can probably implement the feature but the required effort is non-trivial. From the top of my head, it will take at least 1 person-month to implement and the incentive is non-clear. We will do it once the demand for the feature is high enough.\n- A mechanism for async interruption of JIT-compiled Lua code is needed;\n- some sort of a watchdog to detect runaway tasks is necessary.\n. Note: 1.7 comes with a brand new net.box which doesn't suffer from these issues. If upgrading is an option that is the definite route to pursue.\nWe will fix 1.6 too.\n. lua\nF = require('fiber')\nF.create(function()\n  F.wakeup(F.self())\nend). Could you please share a core dump?. No longer relevant, since sql was rebooted.. >Vinyl will work exactly in the same way as memtx. We will not push any differences up the storage engine API.\nIn memtx, fetching the entire tuple is virtually free. But in vinyl, it's not. It would be great if it was possible to process the query using the secondary index only, without hidden lookups into the primary index for fields that aren't even going to be accessed! Other SQL products have this feature, by the way.. Once this is fixed, update tests for #2112 to check boundary values.\n18446744073709551616.0 == 2.0**64, i.e. INT64_MAX+1. Right now the example yields\n```\ntarantool> box.sql.execute('create table \u042f\u042f$ (s1 int, primary key (s1));')\n\n\nerror: Invalid identifier '\u042f\u042f$' (expected letters, digits or an underscore)\n...\n```\n\nFixed?. Works w/o a crash in current sql2 branch.. Fixed by 6576b004d5c6411629a1e03257bdc6b777c50067. Fixed?. We don't set this option. The reason this feature is turned off by default is because the implementation is incomplete.\nBTW, ORDER BY and LIMIT in DELETE statement are useful. I wonder if standard SQL offers any alternatives.. Fixed in ab8c1a76117a93dcb72d4f924cce25d0389a084b. > @mejedi said that (4) is better than (6), but we need to find some better name than \"call_ex\".\nI'd like to elaborate. I like @rtsisyk proposal for adding extendable options a lot. \nThe downside of :opts and :timeout interface is implementation complexity and runtime overhead. The complexity is due to the fact that :opts and :timeout must be aware of each other. This interface resemble currying concept \u2014 i.e. given a function, create a new one taking fewer arguments. The new function invokes the original one, passing constants for missing arguments. Ex: add_1 = curry(add, 1).\nIt's technically legal to have invocation like :opt({A=1}):opts({B=2}):opts({C=3}), with every subsequent opts creating a new context based on existing one.\nRuntime overhead is due to the need to create a new object for each :opts and :timeout call.\n\nA side note. The current :timeout implementation is a mess. Timeout uses the global table keyed by the calling fiber. It would be reasonable to expect that :timeout sets a default timeout for any connection method. Once we did c_t_1 = conn:timeout(1), the expectation is that c_t_1:methodA() will fail if it takes longer than 1 second to complete. No matter how methodA fared, the subsequent c_t_1:methodB() should still have 1 second timeout applied.\nActually, the timeout is 1 second minus methodA execution time! If methodA timed out, the timeout is cleared and methodB will never timeout even if it hangs forever!\nSince the global table is keyed by the calling fiber, passing c_t_1 to another fiber will clear the timeout.\nEnd side note.\n\nIf we were re-designing the API from scratch, I would suggest making every API call use named parameters (there's no such thing in Lua, hence a table.) That way, extending the API with new optional parameters in a consistent way would be easy.\nThe less radical approach would be retrofitting options table into existing API in a consistent fashion.\nSince call and eval take variable number of arguments, I suggest adding new functions with the following signature:\nfunc( options, name_or_code, param1, ... )\nI.e. options go first!\nThere's another issue @rtsisyk didn't mention. Currently, :select() argument is optional. Adding options create an ambiguity: how to treat :select() with 1 argument?. Dup of #2202 . ",
    "0xBF": "with slab_alloc_arena = 1 all ok.\nwith slab_alloc_arena = 0.2 i have a problems.\nAfter executing lua collectgarbage('collect') all ok (with slab_alloc_arena=0.2).\n. hmm. on some data it can crash...\n```\n127.0.0.1:3301> pickle = require('pickle')\n127.0.0.1:3301> t={}; for i=0,65536,1 do table.insert(t,pickle.pack( 'i', i)); end\n127.0.0.1:3301> t\n glibc detected  tarantool: double free or corruption (fasttop): 0x0000000000f53bd0 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x75be6)[0x7fd0260a7be6]\n/lib/x86_64-linux-gnu/libc.so.6(cfree+0x6c)[0x7fd0260ac98c]\ntarantool(yaml_event_delete+0x13b)[0x4a76bb]\ntarantool(yaml_emitter_delete+0xa0)[0x4a7780]\ntarantool[0x4a547a]\ntarantool[0x4d6016]\ntarantool(_Z12box_lua_evalP7requestP4obuf+0x12b)[0x45c26b]\ntarantool[0x435207]\ntarantool[0x435596]\ntarantool[0x494c89]\ntarantool[0x55186f]\n======= Memory map: ========\n...\ntarantool: 127.0.0.1:3301: Remote host closed connection\n\nerror: Remote host closed connection\n```\n. crash was on debian wheezy package: 1.6.5.208.g815a486~wheezy-1\n. \n",
    "syaroslavtsev": "I can review all wiki, docs and other notes  for checking erros and mistakes.\nDo you have any plans for implementing development plan to tarantool-proxy? It`s very intresting for me and my colleagues\n. ",
    "yolkov": "openssh-server depends on libssl1.0.0\n\n$ dpkg -L libssl1.0.0 | grep libssl.so\n/usr/lib/x86_64-linux-gnu/libssl.so.1.0.0\n\n$ dpkg-query -Wf '${Package;-40}${Priority}\\n' |  grep libssl1.0.0\nlibssl1.0.0                             important\n\nimportant\nImportant programs, including those which one would expect to find on any Unix-like system. If the expectation is that an experienced Unix person who found it missing would say \"What on earth is going on, where is foo?\", it must be an important package.[6] Other packages without which the system will not run well or be usable must also have priorityimportant. This does not include Emacs, the X Window System, TeX or any other large applications. The important packages are just a bare minimum of commonly-expected and necessary tools.\nhttps://www.debian.org/doc/debian-policy/ch-archive#s-priorities\n\n3.7 Base system\nThe base system is a minimum subset of the Debian system that is installed before everything else on a new system. Only very few packages are allowed to form part of the base system, in order to keep the required disk usage very small.\nThe base system consists of all those packages with priority required or important. Many of them will be tagged essential (see below).\nhttps://www.debian.org/doc/debian-policy/ch-binary#s3.7\n. ",
    "ingeniarius": "Build fail in new place\nHEAD is now at 3dde7ea\n[ 41%] Building CXX object src/CMakeFiles/core.dir/lua/fio.cc.o\ncd /Library/Caches/Homebrew/tarantool--git/build/src && /usr/bin/c++   -DCORO_ASM -DNDEBUG -DNVALGRIND -D__STDC_CONSTANT_MACROS=1 -D__STDC_FORMAT_MACROS=1 -D__STDC_LIMIT_MACROS=1 -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -msse2 -std=c++11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -I/Library/Caches/Homebrew/tarantool--git/src -I/Library/Caches/Homebrew/tarantool--git/build/src -I/Library/Caches/Homebrew/tarantool--git/src/lib -I/Library/Caches/Homebrew/tarantool--git -I/Library/Caches/Homebrew/tarantool--git/third_party/luajit/src -I/Library/Caches/Homebrew/tarantool--git/build/third_party -I/Library/Caches/Homebrew/tarantool--git/third_party -I/Library/Caches/Homebrew/tarantool--git/third_party/coro -I/Library/Caches/Homebrew/tarantool--git/build/third_party/gopt    -o CMakeFiles/core.dir/lua/fio.cc.o -c /Library/Caches/Homebrew/tarantool--git/src/lua/fio.cc\n/Library/Caches/Homebrew/tarantool--git/src/lua/fio.cc:300:51: error: no member named 'st_ctim' in\n      'stat'\n        PUSHTABLE(\"ctime\", lbox_fio_pushtimespec, &stat->st_ctim);\n                                                   ~~~~  ^\n/Library/Caches/Homebrew/tarantool--git/src/lua/fio.cc:281:12: note: expanded from macro 'PUSHTABLE'\n        method(L, value);                       \\\n                  ^\n/Library/Caches/Homebrew/tarantool--git/src/lua/fio.cc:301:51: error: no member named 'st_mtim' in\n      'stat'\n        PUSHTABLE(\"mtime\", lbox_fio_pushtimespec, &stat->st_mtim);\n                                                   ~~~~  ^\n/Library/Caches/Homebrew/tarantool--git/src/lua/fio.cc:281:12: note: expanded from macro 'PUSHTABLE'\n        method(L, value);                       \\\n                  ^\n/Library/Caches/Homebrew/tarantool--git/src/lua/fio.cc:302:51: error: no member named 'st_atim' in\n      'stat'\n        PUSHTABLE(\"atime\", lbox_fio_pushtimespec, &stat->st_atim);\n                                                   ~~~~  ^\n/Library/Caches/Homebrew/tarantool--git/src/lua/fio.cc:281:12: note: expanded from macro 'PUSHTABLE'\n        method(L, value);                       \\\n                  ^\n3 errors generated.\n. Thanks!\n. ",
    "toidi": "[root@win91 tarantool_box1.4]# tarantool_box --version\nTarantool 1.5.3-79-g71c78d3\nTarget: Linux-x86_64-RelWithDebugInfo\nBuild options: cmake . -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_STATIC=OFF -DENABLE_TRACE=ON -DENABLE_BACKTRACE=ON -DENABLE_CLIENT=ON\nCompiler: /home/buildslave/local/bin/cc /home/buildslave/local/bin/c++\nC_FLAGS: -fopenmp -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -msse2 -std=gnu99 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -pthread\nCXX_FLAGS: -fopenmp -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -msse2 -std=gnu++0x -fno-rtti -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -Wno-invalid-offsetof -pthread\n. ",
    "zlobspb": "update of libgcc_s library helped to solve this problem\n. @rtsisyk showed me better way for this\n``` lua\nlocal function atomic_tail(...)\n    box.commit()\n    return ...\nend\nlocal function atomic(func)\n    return function(...)\n        box.begin()\n        return atomic_tail(func(...))\n    end\nend\n```\n. one more\n``` lua\nbox.schema.role.create('test')\n\n...\nbox.schema.role.info('test')\n\n\n[]\n...\nbox.schema.user.drop('test')\n\n\n...\nbox.schema.role.info('test')\n\n\nerror: User 'test' is not found\n```\n. 1.6.5-174 helps with \n\n``` lua\nbox.schema.role.create('test')\nbox.schema.user.drop('test')\nbox.schema.user.drop('test')\nbox.schema.role.create('test')\n```\nbut still\nwhat about box.schema.user.create and box.schema.role.create\nand this one:\n``` lua\nbox.schema.user.create('test')\nbox.schema.role.info('test')\n\n\n\n\n\n\nexecute\n\n\nrole\npublic\n...\n```\n\n\n\nand here is an error message says \"User\" instead of \"Role\"\n``` lua\nbox.schema.role.info('foo')\n\n\nerror: User 'foo' is not found\n...\n```\n. Yes I know that. Check all my examples through carefully please. \n. it works even better, thank you\nbut it doesn't work in try.tarantool.org\n. \n",
    "vlebedev": "So, if I understood it right, currently yaml.encode() can't produce the output in block mode. Which is kind of sad, but I can get by somehow. :)\n. ",
    "Anei": "Tarantool was installed from official debian repository (http://tarantool.org/dist/master/debian/ wheezy/main)\nTry to set larger value for slab_alloc_arena, 4.0 will be fine.\n. +1\n. ",
    "nabihach": "One way to fix this is to install torch with Lua 5.2 instead of LuaJIT, as described here: http://torch.ch/docs/getting-started.html#_\n. One way to fix this is to install torch with Lua 5.2 instead of LuaJIT, as described here: http://torch.ch/docs/getting-started.html#_\n. ",
    "nekufa": "@kostja looks like this issue was resolved. @locker, i collect schema metadata on application server bootstrap and it validates schema for all spaces (including system). is there a way to add primary key on _vinyl_deferred_delete space? or it's better to skip validation for that space?. @locker thanks, i learned that it is a way of replica broadcasting. i decide to disable that check for any system spaces. in addition, docker container is getting environment variables only during startup.\nit will be good to sync instance config with environment from time to time.. Sounds good!. Thanks a lot!. Maybe you can keep it in current implementation without any improvements?\nWe use bitset for entity state persistence and flexible data selection... In addition, it will be good to have ability to enable/disable is_nullable on a not empty space.\n@rtsisyk, should i create another ticket or this enhancement can be a part of this one?. workaround is to reinitialize format with: space:format({}) and then space:format(newFormat). For example, we have huge load on instance and i want to see details - what's going on.\nWith fiber.list i got all fibers and information that is useless in this case, because i see, for example 50 fibers with name equals 'main'.\nAll of them were produced by calls or evaluate request through iproto, but this is not clear. It will be good to see clear names for them. For example, \"evaluate\" (for evaluate requests), \"moduleX.functionY\" (for call requests). ",
    "Totktonada": "@bigbes Done in https://github.com/tarantool/tarantool-zmq ?\n(Also filed https://github.com/tarantool/rocks/issues/52 ). We can create a tuple from already encoded data like so:\n```\n!/usr/bin/env tarantool\nlocal ffi = require('ffi')\nlocal buffer = require('buffer')\nlocal msgpackffi = require('msgpackffi')\nlocal yaml = require('yaml')\nffi.cdef([[\n    struct box_tuple_format_t;\n    struct box_tuple_t;\nbox_tuple_format_t *\nbox_tuple_format_default(void);\n\nbox_tuple_t *\nbox_tuple_new(box_tuple_format_t *format, const char *data,\n              const char *end);\n\nint\nbox_tuple_ref(box_tuple_t *tuple);\n\nstruct ibuf;\n\n]])\n-- prepare data\nlocal source_data = {1, 2, 3}\nlocal buf = buffer.ibuf()\nmsgpackffi.internal.encode_r(buf, source_data, 0)\nlocal data_start = buf.buf\nlocal data_end = buf.buf + buf:size()\n-- create tuple\nlocal def_format = ffi.C.box_tuple_format_default()\nlocal tuple = ffi.C.box_tuple_new(def_format, data_start, data_end)\nffi.C.box_tuple_ref(tuple)\ntuple = ffi.cast('const box_tuple_t &', tuple)\nprint(type(tuple))\nprint(tostring(tuple))\nprint(yaml.encode(tuple))\n```. Note: referenced openssl issues were updated with 'all done' comments recently.. The issue seems to be fixed.\n\nEbuilds for a git live version and for several releases are available in an overlay: https://github.com/tarantool/gentoo-overlay\nThe overlay was added to layman (Gentoo repositories infrastructure): https://github.com/gentoo/api-gentoo-org/commit/9c796454286c40c1ca8c6cf5fa520a4a9b2cf102. The following script\n\n```\nlocal fio = require('fio')\nlocal ffi = require('ffi')\nlocal obj = ffi.new('char1', 42)\nffi.gc(obj, function()\n    fio.open('notexists', {'O_RDONLY'})\nend)\nobj = nil\nfio.open('notexists', {'O_RDONLY'})\nfio.open('notexists', {'O_RDONLY'})\nfio.open('notexists', {'O_RDONLY'})\n```\nAfter the following patch (to trigger gc in the specific place):\ndiff --git a/src/lua/utils.c b/src/lua/utils.c\nindex c53c8c31d..6263fcd99 100644\n--- a/src/lua/utils.c\n+++ b/src/lua/utils.c\n@@ -901,6 +901,7 @@ luaT_pusherror(struct lua_State *L, struct error *e)\n        assert(CTID_CONST_STRUCT_ERROR_REF != 0);\n        struct error **ptr = (struct error **) luaL_pushcdata(L,\n                CTID_CONST_STRUCT_ERROR_REF);\n+       lua_gc(L, LUA_GCCOLLECT, 0);\n        *ptr = e;\n        /* The order is important - first reference the error, then set gc */\n        error_ref(e);\nGive the following (on the Debug build):\ntarantool: /home/alex/p/tarantool-meta/tarantool/src/lua/utils.c:875: luaL_iserror: Assertion `e->refs' failed.\nAborted\nI'm also able to reproduce it w/o patching with the following script:\n```\nlocal fio = require('fio')\nlocal ffi = require('ffi')\nlocal fiber = require('fiber')\nfiber.create(function()\nfor i = 1, 1000000 do\n    local obj = ffi.new('char1', 42)\n    ffi.gc(obj, function()\n        if i % 3 == 0 then return end\n        fio.open('notexists_' .. tostring(i), {'O_RDONLY'})\n    end)\nend\nend)\nfor i = 1, 1000000 do\n    fio.open('notexists', {'O_RDONLY'})\nend\n```\nfio.open() calls lbox_fio_pushsyserror with luaT_pusherror(L, diag_get()->last) in case of an error. There are also other usages of luaT_pusherror().\nI think additional ref/unref should be moved from luaT_error() to luaT_pusherror().. @bigbes provided the initial example how to achieve this: 1.\n1: https://gist.github.com/bigbes/47e9e5c5cfb9245dbda94fd0d6c3ed11. Related: https://github.com/tarantool/test-run/commit/a50b0b5376188c6bce65a84620d20b2540408a5a. I propose to perform the clean up from test-run instead of pushing a developer to doing all needed cleanup manually in the end of each test.. We discussed the issue with @kyukhin. Now we want to ban the statement (within 2.1.0 scope of tasks) and implement support of REINDEX later (wishlist milestone). That issue is about ban (remove from parser, write test), #3195 is about support of REINDEX.. The test still flaky after applying eebfc15. I got the following result from time to time:\n```\n$ ./test-run.py m\n...\nvinyl/update_optimize.test.lua                                  [ fail ]\nTest failed! Result content mismatch:\n--- vinyl/update_optimize.result    Tue Mar 14 14:18:56 2017\n+++ vinyl/update_optimize.reject    Tue Mar 14 14:29:34 2017\n@@ -287,7 +287,7 @@\n ...\n new_stmt_count - old_stmt_count == 15\n ---\n-- true\n+- false\n ...\n old_stmt_count = new_stmt_count\n ---\nLast 15 lines of Tarantool Log file:\nFatal error: Failed to run test vinyl/update_optimize.test.lua: wrong test output. Execution aborted.\n.\n$ for i in $(seq 1 20); do ./test-run.py m || break; done\n```\nPassed for me on e1d3759 rebased at top of 1.7 branch.. Seems already fixed in 1.7 by 491ad0c8fa5ec5ba844b71c77807d841abad5f88.. Tried with pause:\nDiff:\n```\ndiff --git a/test/replication-py/multi.test.py b/test/replication-py/multi.test.py\nindex 13245503d..75a490afc 100644\n--- a/test/replication-py/multi.test.py\n+++ b/test/replication-py/multi.test.py\n@@ -81,9 +81,9 @@ print 'inserted %d records' % ROW_N\n print\nprint 'Synchronize'\n-for server1 in cluster:\n+for server in cluster:\n     for server2 in cluster:\n-        server1.wait_lsn(server2.id, server2.get_lsn(server2.id))\n+        server.wait_lsn(server2.id, server2.get_lsn(server2.id))\n     print 'server', server.id, 'done'\n print 'done'\n print\n@@ -91,7 +91,17 @@ print\n print 'Check data'\n for server in cluster:\n     cnt = yaml.load(server.admin(\"box.space.test:len()\", silent = True))[0]\n-    print 'server', server.id, 'is', cnt == ROW_N and 'ok' or 'not ok'\n+    print 'server', server.id, 'is', cnt == ROW_N and 'ok' or ('not ok: ' + str(cnt) + ' excepted ' + str(ROW_N))\n+print 'Done'\n+print\n+\n+import time\n+time.sleep(1)\n+\n+print 'Check data'\n+for server in cluster:\n+    cnt = yaml.load(server.admin(\"box.space.test:len()\", silent = True))[0]\n+    print 'server', server.id, 'is', cnt == ROW_N and 'ok' or ('not ok: ' + str(cnt) + ' excepted ' + str(ROW_N))\n print 'Done'\n print\n```\nOutput:\n```\nTest failed! Result content mismatch:\n--- replication-py/multi.result Tue Apr  4 15:36:06 2017\n+++ replication-py/multi.reject Tue Apr  4 16:03:49 2017\n@@ -60,15 +60,15 @@\n done\nCheck data\n-server 1 is ok\n-server 2 is ok\n-server 3 is ok\n+server 1 is not ok: 58 excepted 60\n+server 2 is not ok: 58 excepted 60\n+server 3 is not ok: 57 excepted 60\n Done\nCheck data\n-server 1 is ok\n-server 2 is ok\n-server 3 is ok\n+server 1 is not ok: 58 excepted 60\n+server 2 is not ok: 58 excepted 60\n+server 3 is not ok: 57 excepted 60\n Done\n ```\nNote: server1 \u2192 server is just fix of typo, doesn\u2019t have strict relation to that issue.. Not very related, but here is autocompletion for non-latin letters for lua: https://github.com/tarantool/tarantool/commit/6b1ed726f10008be00c85182508c735a15807d8e. Yep, was banned in the scope of #2165.. cmake generation of such make rules was the concern in context of out-of-source build. Now workarounded using environment variables, see the corresponding test-run issue: https://github.com/tarantool/test-run/issues/59. There are at least two cases when user expects non-formatted base64: generating JWT tokens, passing base64 within HTTP headers.\nOn the other side, formatted base64 is needed for convenience in interactive usage and for prettify at writing to a file.\nMy guess is that formatting should be optional and disabled by default.\nMy http-headers case workarounded for now with base64_str = base64_str:gsub('\\n', '').. It would be convenient to have such function, but IMO it should raise exception on incorrect input (odd length, unexpected symbols) or return two args: bool, res. Currently I use the following code:\nfunction utils.fromhex(str_hex)\n    local err_msg = 'bad hex string'\n    local matches = {string.match(str_hex, '^([0-9A-Fa-f]+)$')}\n    if #matches ~= 1 then return false, err_msg end\n    if str_hex:len() % 2 ~= 0 then return false, err_msg end\n    local res_lst = {}\n    for i = 1, str_hex:len() / 2 do\n        local byte_str = string.sub(str_hex, 2 * i - 1, 2 * i)\n        res_lst[i] = string.char(tonumber(byte_str, 16))\n    end\n    return true, table.concat(res_lst)\nend. Note: string.hex implementation: 0ca6cb87dfd69b3f39024c714c8fde9b2dd9acbf.. Notes for implementation:\n\nIt is better to avoid creating a capture (tonum) per each fromhex invoke.\nYou can use local ans = table.new(len, 0) to avoid redundant reallocs.\nIt is possible to use explicit array local ans = ffi.new('char[?]', len) and make lua string like so: ffi.string(ans, len). This approach seems to be is 3x\u20135x faster. At least it worth to try;\ntonum can be implemented with at least two ways (see below); it worth to bench both:\nlike now using three if's for [0-9], [a-f] and [A-F];\nusing lua table {['0'] = 0, \u2026, ['F'] = 15} lookup;\n\n\nWe can use bit.bor(bit.lshift(first, 4), second) instead of first * 16 + second, but the lua bit operations seems to be slower than regular arithmetic.\n\nNotes for benchmark:\n\ndigest.crc32 has new function allows you to update the hash and then get a result.\nYou can test with certain degree of randomness using a code like so:\n\n11 for i = 1,num do\n 12     local d = 10\n 13     local len = (100 + ((i * 17911 + 9137) % (d / 2)) - d) * 2\n 14     print(len)\nGeneral notes:\n\nAre you comfortable with reading unindented code above? I don\u2019t. Please, use markdown preformatted blocks.\nPost certain results: average result for each bench case + noise level (deviation from average). It would allow to reduce hand-work needed to decide to proceed with some implementation. You can even plot graphs to show how the function {average len, average len deviation} \u2192 execution time of implementation X behaves (or get rid of average len deviation in results / on graphs, but shows it does not matter significantly).\nPlease, describe all implementation variant you tried during an effort to achieve maximum performance, including failed ones (preferably with numbers).. @TarantoolBot document\nTitle: string.fromhex(str) function\nThe function decodes hex-encoded string: say, '48656c6c6f' (it is case-insensitive) will be decoded to 'Hello'. Any parsing error will be thrown with error(), the successful result will be returned as a first return value.. Nice report, Gleb, thanks!\n\nNote for implementation:\n\nYou can use tonum (by the way, the name is subject to discuss) function, but you should not create it per each invoke. The module-local function is okay. Maybe also moving string.byte(\u2026)-created constants to being module-local ones can give some extra performance boost (I don\u2019t sure).\nAre you tried 2nd approach (table lookup) to implement tonum (table should be created once)? I don\u2019t, so cannot say whether it will be faster.\n\nNote for benchmark:\n\nI would benchmark small strings (~20 bytes) as well as long ones (I tried that already, so don\u2019t insist you should too.)\n\nI think now the time to clean up the code and move to tarantool-patches@ to review it. Also, please, bench lua table lookup approach to implement tonum.. > requires additional memory\n22 key-value pairs of one-char lua strings. It is something in order of 100 bytes. Static ones. It is nothing.\n\nit will be not faster\n\nWhy do you think has map lookup slower than series of jumps? It is possible, yep, but I would benchmark it.. @TarantoolBot document\nTitle: string.fromhex(inp)\nConvert hex-encoded string into binary string. It is the reverse operation for string.hex().\n@param String to convert. It should be [a-fA-F0-9]* string with even count of symbols, otherwise an error will be raised.\n@retval Converted string.. This follows up #2165.. @rtsisyk How current format of headers will be changed?. It would be good to update documentation accordingly.. @Gerold103 Are there error cases when it is worth to continue reading messages from a future object?. It works good for me with a mail.ru box. Georgy, thanks!\nJust two tiny notes:\n\nlocal smtp = require('smtp.client') (from the commit message) didn\u2019t work for me, but local smtp = require('smtp.client').new() does;\nmail.ru box does not store copies of email sent by smtp, so I added the box itself to bcc (it is out of topic of smtp client implementation, yep).\n\nI tried the 816e1c37023f39efa7da2e85e0c786d8730c6bda patch upon Tarantool 1.7.5.101.. @sitnikovv Compatibility with what? It is how most interactive interpreters works and I want especially note that bash in interactive mode works in that way.. EOF situation on stdin causes exit as well as in shell. It can be sent with Ctrl+D (as far as I know in most terminal implementations).. Looks similar to #2530, but appears on an actual version of http.client.. My implementation (a little dirty, yep) for giving an idea what I want to achieve:\n[dropped, was broken]. Can be replaced with ffi, yep.. @rtsisyk Do we want list of modules resolving the exact problem (have unix time related parse/format functions) or list of modules can assist with that task?\nYep, I can look into this.. os.time(), os.date() is correct, it was my misunderstanding, sorry. The one problem is get seconds since the Epoch from ISO 8601 string with a timezone.. Now we have tarantool/date (fork of Tieske/date), but I don\u2019t see a way to get epoch time from specific date object. Also I don\u2019t see ability to restrict specific ISO 8601 format. Maybe we need to just add strptime + mktime implementation into the clock module.. We can look into https://github.com/GUI/lua-icu-date , because we have on-board libicu.. Updated the description and title.. Tried icu-date:\n```\nlocal icu_date = require('icu-date')\nlocal format_date = icu_date.formats.pattern(\"yyyy-MM-ddTHH:mm:ssZZZ\")\nlocal d = icu_date:new()\nd:parse(format_date, \"2018-09-17T02:40:00+0300\")\n\n\nerror: '...mp/try-icu-date/.rocks/share/tarantool/icu-date/init.lua:38: Invalid\n    status: U_PARSE_ERROR. Result: nil'\n```\n\nThe only date I can parse is 2018-09-17, w/o a time. Tried custom formatters and icu_date.formats.iso8601().. Thanks! It works:\n```\n!/usr/bin/env tarantool\nlocal icu_date = require('icu-date')\nlocal format_date = icu_date.formats.pattern(\"yyyy-MM-dd'T'HH:mm:ssZZZ\")\nlocal d = icu_date:new()\nd:parse(format_date, \"2018-09-17T14:20:00+0300\")\nprint(tostring(d:get_millis() / 1000))\n```\nSo I'll close the issue. The decision is to use tarantool/icu-date.. Points 1\u20133 are about security via obscurity and unrelevant for opensource projects.. @bigbes Okay for me, but in the case the documentation of fio.rename should state explicitly it does not work over filesystems.. Ouch, I missed @bigbes proposed don\u2019t add rename-over-fs at all. I guess it would be convenient for users to use general-purpose function working like mv unix command. As separate function, of course.. Requested mv functionality now can be implemented using rename || copytree + rmtree. Good enough. I would note that into documentation.. lua-re seems being pretty small and works for me except arguments validation (causes segfault for now).. lrexlib-pcre and lrexlib-pcre2 are in our rocks. lua-re stalled for the year and is not ready for production use due to lack of validation.\n@kyukhin, we can close the issue?. @rtsisyk How this internal isarray() implementation behaves (what is considered as an array)?. @rtsisyk I guess you mean lua_field_inspect_table(). The approach looks similar to lua-cjson one, but it\u2019s possible to set type manually using __serialize metatable field (set it to 'seq' or 'map'). Is marking a table array or map documented somewhere?. NB: We can add it to https://github.com/tarantool/checks. Seems work good when tarantoolctl called from tarantool user manually.. This blocks me from drop ebuild for 1.7.5 to gentoo-overlay, because causes unability to start tarantool from OpenRC init scripts.. @racktear Is a format string with json output simultaneously supported?\nlog.info('my_table: %s', {\u2026some table here\u2026}). I guess we target centos6? Now 1.3.3 already released and release notes have the following line:\nbuild: fix : compilation under rhel6 and centos6, reported by @pixelb. test-run fix: https://github.com/tarantool/test-run/pull/66\ntarantool tests fix (1.7): https://github.com/tarantool/tarantool/compare/gh-2852-fix-test-plans\n@bigbes, please review it.. @IlyaMarkovMipt I use the following trick:\n```\nlocal rawpairs = pairs\n--- Replacement for global pairs function to call __pairs() if it exists.\nfunction pairs(table) -- luacheck: ignore\n    local mt = getmetatable(table)\n    local p = mt and mt.__pairs or rawpairs\n    return p(table)\nend\n```. \u0414\u0430 \u0438 \u0434\u043b\u0438\u043d\u0443 \u0445\u044d\u0448\u0430 \u044f \u0431\u044b \u0442\u043e\u0436\u0435 \u0432\u044b\u043d\u0435\u0441 \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440.. @IlyaMarkovMipt, thanks!\nI observed the behaviour unexpected for me: length of a resulting hash differs in dependence of iterations count. Consider the following example.\n```\ntarantool> digest.pbkdf2('text', 'salt', 1000000, 128):hex():len() / 2\n\n\n8\n...\n\ntarantool> digest.pbkdf2('text', 'salt', 100000, 128):hex():len() / 2\n\n128\n...\n\ntarantool> digest.pbkdf2('text', 'salt', 10000, 128):hex():len() / 2\n\n60\n...\n```\n\n@IlyaMarkovMipt, can you please explain that?. I performed the following tests:\n\nThe time needed for hashing depends of iterations count.\nSame input+salt \u2014 same output.\nDifferent output for different salt.\nRun the following command:\n\nfiber.create(function() for i = 1, 10000 do digest.pbkdf2('text', 'salt', 100000, 128) end end)\nI can use tarantool from the console as before, while hashing performed in \u201cbackground\u201d. Looks good!. The hash for an empty string can be short too.\n```\ntarantool> digest.pbkdf2('', 'sadfdfdffdlt', 100000, 128):hex()\n\n\nb420fd\n...\n\ntarantool> digest.pbkdf2('', 'salt', 100000, 128):hex()\n\n\n378a8bda976ade0a4497d2a04bd1ce352bc66c389947624ae5fab8c62074a37118a459e7ee26a8d225b5433aa06dd391daafdc9e5aaab2985b8c0e45a52b5dbd61fabd527fe65e66b7d902f66b6607358c3ed34a6b5fb812cbe334f90bcee2407d323550fc1fb4dfb4a771e1a58304644866ef779887096bd2b676f3d68837e4\n``. Observed random segfaults after this patch applying (more info was provided via the chat).. The hash length now is one that expected! As the last check I\u2019ll try it in the cofiguration where I got segfaults previously.. Checked, seems work.. I suggest to define the behaviour strictly before implementing. Should it behaves liketest -e? Or liketest -f`? The checklist I have in the head right now is:\n\n\nHow we intended to treat valid symlinks (-e, -f give true)?\n\n\nHow we intended to treat broken symlinks (-e, -f give false)?\n  . I didn't made wide research, but look at CPython and Redis, both use memchr:\n\n\nhttps://github.com/python/cpython/blob/0e5f771f38138714415f665651de7e674fcebc38/Objects/bytearrayobject.c#L1790-L1808\n\nhttps://github.com/antirez/sds/blob/8dc8d6fb373bdc08eb82a72904841998d30b7cf2/sds.c#L700-L713\n\nPyPy uses memchr-like loop (in RPython!) and separate implementations for single-character case and ascii spaces:\n\nhttps://github.com/mozillazg/pypy/blob/50d6bf76ef1f93c234ab42d4dd4a3b974f9665d6/rpython/rtyper/rstr.py#L137-L161\nhttps://github.com/mozillazg/pypy/blob/50d6bf76ef1f93c234ab42d4dd4a3b974f9665d6/rpython/rtyper/lltypesystem/rstr.py#L460-L521\nhttps://github.com/mozillazg/pypy/blob/50d6bf76ef1f93c234ab42d4dd4a3b974f9665d6/rpython/rtyper/lltypesystem/rstr.py#L1102-L1112\n\nBoost just iterate over a string and call a predicate:\n\nhttps://github.com/boostorg/algorithm/blob/1cbe285841e073f4e7c685662c74bb6cf5be934b/include/boost/algorithm/string/trim.hpp. I have added plain C implementation, benchmarked them all again and created the simple harness (poor-fast-bash-make-gnuplot-written): https://gist.github.com/Totktonada/f9420530a3697dfa90e0b66170a97be2 . Download SVG files to see them.\n\nI think we should use uint8_t array in C. It has quite good performance across different inputs (length of input strng, length of chars string). The plain C implementation could outperform it in case of #chars == 1, but it is so until around #inp == 50, then uint8_t array is faster. I think we should use most universal implementation (at least while we have no real feedback from an application developers) and it is uint8_t array in C.\nMaybe it worth to run separate implementation in case of #chars == 1 and #inp > some_const (use one level loop to compare with char), but determining this constant requires more effort: benchmarking on many inputs and on many machines. I propose to skip this step until it will requested explicitly by users.\nRe code:\n\nNeed to reformat in according to our C code style.\nI think we can use it for the case when chars parameter is not provided too (instead of regexps). It should be faster.\nStrip can be implemented as lstrip + rstrip (and, please, try to minimize code duplication).\n\n1: https://tarantool.io/en/doc/2.1/dev_guide/c_style_guide/. @knazarov See the graphs.. AFAIK, ffi calls don't break traces. I don't see NIY in luajit -jv output for the c_uint8_array function. Penlight uses lua re, it is the slowest way to do so, see the graphs.. Fixed by @ASverdlov. Thanks!. Related doc re decorators in lua: http://lua-users.org/wiki/LuaTypeChecking. Now we have https://github.com/tarantool/checks\n@kyukhin Is this issue can be closed?. See also #3751 and 022a3c5026fffcecd9bc85f5484d5b5c53ae887d.. Please, add verbose parameter to the options ( https://tarantool.org/en/doc/1.7/reference/reference_lua/http.html ) and post output here.. Veniamin sent me the following snippet:\n```\n SSLRead() return error -9806\n Closing connection 2\n\n\nerror: 'curl: Failure when receiving data from the peer'\n...\n```\n\nGoogle gives me the following links for now:\n\nhttps://gist.github.com/entropiae/a899d8a78dc8a38f505e. As I know we use curl from homebrew due to #2772.. 1. We support only clang's ASAN: https://github.com/tarantool/tarantool/wiki/Address-Sanitizer\n\nUse git clean -xfd; git submodule foreach --recursive git clean -xfd before CC=clang CXX=clang++ cmake . <...> -DENABLE_ASAN=ON && make -j.\n\nSure, there are some reports from ASAN. Don't sure whether they are false positives or real. We'll investigate them in the scope of #2058.. > > We support only clang's ASAN: https://github.com/tarantool/tarantool/wiki/Address-Sanitizer\nit'd probably be great to build this knowledge into the build system.\n\n\n\nOk, I'll create follow up patch.. Tried like so:\ncmake . -DSQL_MAINTAINER_MODE=1 -DCMAKE_BUILD_TYPE=Debug -DENABLE_VALGRIND=ON && make -j\nvalgrind --leak-check=full --show-leak-kinds=all --track-origins=yes -v --suppressions=./third_party/luajit/src/lj.supp ./src/tarantool < <(echo \"print('hello'); collectgarbage()\")\nWith and without collectgarbage() call. Got 654 errors with collectgarbage and 710 errors w/o. A lot luajit errors still reported, the overall picture does not changed significantly. We need either investigate luajit futher and deeper, or skip this effort for now and close the issue.\n@kyukhin, what do you think?. Don\u2019t make typos? The case is about typo in a module name (foo does not exists) when using hand-make relative import.. Classes we need:\n\nletters;\nuppercase letters;\nlowercase letters;\nnumber.. Note re the initial example with lrexlib-pcre: it counts chars with a certain property as expected when rex.flags().UTF8 (or rex.flags().UTF for rex_pcre2) is passed as the third parameter. Sorry for possible confusion.. This is the bug on the shard side. The reason of this issue was fixed here: https://github.com/tarantool/shard/commit/58cbb50532f1f43b7e36a33f202bfdec0de80d9e. The wording sounds like we want to have tests only with static types (or even phohibit non-typed tables at all). As I know we don\u2019t want neither of that options. So, I think the plan should sounds like:\n\n1. Assign types for tables in existing tests + your pount 2 and 3.\n4. Create suites with non-typed tables and mixed typed/non-typed tables.\nThere is the interesting option to achieve 4th point: preprocess a well-typed suite with cutting down type information (entirely or partially) and run the generated suite as a separate one.. In case of linker-related problems it worth to try to use gold instead of bfd: -fuse-ld=gold.. It can be added for testing purposes like so:\ndiff --git a/cmake/compiler.cmake b/cmake/compiler.cmake\nindex 05d33ab48..ce2458003 100644\n--- a/cmake/compiler.cmake\n+++ b/cmake/compiler.cmake\n@@ -308,3 +308,5 @@ else()\n     set(CMAKE_HOST_C_COMPILER ${CMAKE_C_COMPILER})\n     set(CMAKE_HOST_CXX_COMPILER ${CMAKE_CXX_COMPILER})\n endif()\n+\n+SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold\"). @Khatskevich The link to the wiki page seems to be broken now.. The goal is to support more the net.ipv4.ip_local_port_range simultaneous outgoing connections, right? It is not clear for me whether it can be achieved by just using SO_REUSEADDR option w/o bind source port (just using connect). As I understand (correct me if I\u2019m wrong), tricks are needed (only?) if you want to bind source port before connect.. What revision are you using? fio.read() w/o arguments supported since 1.7.7-208-gdf2387b36. See #2925 for details.. @rosik We use the following hack intensively in tests:\n-- require in-repo version of graphql/ sources despite current working directory         \npackage.path = fio.abspath(debug.getinfo(1).source:match(\"@?(.*/)\")                      \n    :gsub('/./', '/'):gsub('/+$', '')) .. '/../../?.lua' .. ';' .. package.path\nI would prefer to use short instruction like relative_require().. Maybe it also worth to include cmake file to determine tarantool PREFIX that does not require headers to be installed and uses tarantool --version to get the PREFIX. It used now only in stat, but maybe will be used more widelly.\nhttps://github.com/tarantool/stat/commit/cd70219fffc549fa6cb4e10f71e1b3cce4df8a22#diff-16f208f7b20f554ef44b9c081adce08d. I reproduced it locally on current 1.9. The following command failed for me 5 times after 5 runs:\nTEST_RUN_TESTS=$(for i in $(seq 1 1000); do echo -n 'app-tap/console.test.lua '; done) make test\nI observed the output is like following 3 times:\n[016] Test failed! Last 15 lines of the result file:\n[016] ok - on_auth argument\n[016] ok - on_auth argument 2\n[016] ok - eval with triggers\n[016] ok - on_disconnect session.user()\n[016] ok - on_disconnect session.id()\n[016] ok - on_connect session.user()\n[016] ok - on_connect session.peer()\n[016] ok - on_connect session.id()\n[016] ok - on_auth aborts connection\n[016] ok - on_connect -> on_auth_error order\n[016] \n[016] Last 15 lines of Tarantool Log file [Instance \"app_server\"][/home/alex/p/tarantool-meta/tarantool-2/test/var/016_app-tap/console.test.lua.tarantool.log]:\n[016] 2018-06-08 23:08:25.517 [26867] main/101/console.test.lua F> ...tarantool-meta/tarantool-2/test/app-tap/console.test.lua:234: attempt to index local 'client' (a nil value)\n1 time I got:\n[016] Test failed! Last 15 lines of the result file:\n[016] ok - on_connect session.peer()\n[016] ok - on_connect session.id()\n[016] ok - on_auth session.user()\n[016] ok - on_auth session.peer()\n[016] ok - on_auth session.id()\n[016] ok - on_auth argument\n[016] ok - on_auth argument 2\n[016] ok - eval with triggers\n[016] ok - on_disconnect session.user()\n[016] ok - on_disconnect session.id()\n[016] \n[016] Last 15 lines of Tarantool Log file [Instance \"app_server\"][/home/alex/p/tarantool-meta/tarantool-2/test/var/016_app-tap/console.test.lua.tarantool.log]:\n[012] app-tap/console.test.lua                                        [ pass ]\n[016] 2018-06-08 23:08:46.696 [30182] main/101/console.test.lua F> ...tarantool-meta/tarantool-2/test/app-tap/console.test.lua:223: attempt to index local 'client' (a nil value)\n1 time I got:\n[004] Test failed! Last 15 lines of the result file:\n[004] ok - admin connect\n[004] ok - admin eval\n[004] ok - gh-1177 __serialize\n[004] ok - console.listen stopped\n[004] ok - console.listen uri support\n[004] ok - console.listen uri support\n[004] ok - console.listen uri support\n[004] ok - console.listen uri support\n[004] ok - console.listen uri support\n[004] ok - console.listen uri support\n[004] \n[004] Last 15 lines of Tarantool Log file [Instance \"app_server\"][/home/alex/p/tarantool-meta/tarantool-2/test/var/004_app-tap/console.test.lua.tarantool.log]:\n[004] 2018-06-08 23:08:49.054 [30343] main/101/console.test.lua F> builtin/box/console.lua:382: failed to create server unix/:/home/alex/projects/tarantool-meta/tarantool-2/test/var/004_app-tap/tarantool-test-console.sock: Address already in use. The connection state dump each 10 seconds or like so can be useful in the case.. @Gerold103 I mean state dumps in case when something going wrong or, in other words, only for 'bad' states.. We don\u2019t use bash/perl/python during build as I see. sh does not support arrays and regexps (w/o fork to run grep), so to use sh we need to rewrite mkopcodeh.tcl using several (constant number) grep invocation per needle line type and emulate tcl\u2019s associative arrays via declare ARRAY_${key}=value. The way to go?. @TarantoolBot document\nTitle: index_info and index_xinfo changes\n Syntax of index_info was changed from pragma index_info = t1.i1; to pragma index_info(t1.i1);.\n index_xinfo was removed.\n index_info works as index_xinfo now (see 1), but 6th column (whether index columnt is key/aux one) was removed (it is not actual for tarantool) and the additional 6th column was added: type of the index column.\n Note: we have no pragma index_info documentation for now, so I suggest to start with copy of the sqlite documentation page 1 (if the license allows it) and made the changes described above to match the current code state.\n1: https://www.sqlite.org/pragma.html#pragma_index_xinfo. Can be related: https://github.com/tarantool/tarantool/issues/3733#issuecomment-431705550. Let consider this issue as 'we need to fix support of REINDEX statement' while it will be banned in the scope of 2.1.0 in #2174.. Are not this issue is duplicate of #2846?. Dupe of #2436, but the description here is more clear.. Only vinyl test suite has is_parallel = False now.. Ok, I investigated a bit deeper and found that:\n\nWe have enabled -Werror only for Debug target (-O0) with note that other targets should not lead to extra troubles.\nGCC has more warnings for higher optimizations levels (say, -O2).\n\nProposed to add 'trouble release target' and use it in CI. Now we use RelWithDebInfo in CI and have no gain from -Werror at Debug target.. Argon2i is interesting option to have it (more or less) on-board for strict security apps with password hashing. Don\u2019t sure why not Argon2id was implemented, though.. Possibly related, got during make test on fresh 2.0 (43e03e634e11629af6f54d00e0970cdf868fc649):\n buffer overflow detected : /home/alex/p/tarantool-meta/1.8/tarantool/test/unit/say.test terminated\n[006] unit/say.test                                                   [ pass ]. 0022 umask drops 'w' for a group.. The same test for C:\n$ gcc -x c <(echo -e '#include <stdio.h>\\n#include <sys/types.h>\\n#include <sys/stat.h>\\n#include <fcntl.h>\\nint main() { printf(\"%d\\\\n\", open(\"/tmp/c-test\", O_CREAT | O_WRONLY | O_TRUNC, 0664)); return 0; }') && ./a.out && rm a.out\n3\n$ ll /tmp/c-test\n-rw-r--r-- 1 alex users 0 Mar 21 11:58 /tmp/c-test. @racktear Is our number64 has enough bits for such applications? If so, are there problems with number64 that prevent using in these applications?. Note: we need such information available from lua, so I filed related issue #3080.. Parallel map phase was implemented by @Gerold103 in the scope of #3107 with assisting of the tiny patch to shard in the PR tarantool/shard#73. So it is worth to integrate merger into tarantool in general way: on top of arbitrary buffers (ibufs) with tuples. The plan is the following.\n\nMove shard/shard/driver.c to src/lua/merger.c with appropriate changes to get it built and working as the internal module.\nIntegrate the debugging patch to allow to investigate further problems under Debug built type.\nEnable finalizer.\nMake reasonable API changes to eliminate need of converting index key parts on shard side.\nAllow to pass space format to use it after #2978, but deduce it from index key parts when it does not provided.\nAccept non-converted index key parts and support nullable and collation options (see the PR tarantool/shard#65).\n\n\n\nThis issue should be followed up with #3311.. Benchmarks for the merger module and the table.sort merging, results, mine interpretation of the results and patches needed for reproducing are here. In short: the merger beats all other approaches.\n1: https://gist.github.com/Totktonada/d0a23707d80c929915546e9eb5187d2a. > Allow to pass space format to use it after #2978, but deduce it from index key parts when it does not provided.\nDecided to skip ability to use a user provided format (at least for now), because it does not clear how to guarantee fast comparisons in the case.. Related: #3081.. I\u2019m against of delivering spying code to Gentoo even when it is disabled (one cannot statically check whether it is really so). Now several sed / rm commads removes the daemon on src_prepare stage. I\u2019ll maintain that approach externally.. Another option: save line number in lexer.. Yep, it was closed along with #3251.. The first letter in 'Closes' in the commit message is the Russian letter '\u0421', that is why the commit (and #3251 too) was not closed automatically.. @Korablev77 Are there tests where the order is matter or we can use order-unaware compare within do_execsql_test?. It worth to also allow to return raw msgpack from a function.. Is it more or less analogue to https://github.com/tarantool/mkrepo ?. It will (at least partially) eliminated by fixing https://github.com/tarantool/test-run/issues/68. FYI: it seems that #2431 tried to solve the similar problem.. The commit included in the 1.9 branch as ab4416f8aaad18ff56feed66195e24b8e940ccdb. It requires the additional fix 8925b8622f381378684de633e917229051e3482f for the new debhelper (included in 1.9 too).. Tarantool allocates memtx_memory bytes to store tuples at start and never free this memory. You can adjust this parameter to better fit your needs.. Merged https://github.com/tarantool/memcached/pull/45 .. Reproducer:\nClient:\n```\n!/usr/bin/env tarantool\nlocal net_box = require('net.box')\nlocal c = net_box.connect('localhost:3301')\nwhile true do\n    c:eval([[\n        require('log').info(require('digest').pbkdf2('', 'salt', 100000, 128):hex())\n    ]])\nend\nos.exit(0)\n```\nServer:\nbox.cfg{listen=3301}\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\nI got two different hashes when run two clients:\n2018-05-13 22:24:28.585 [23954] main/114/main I> 378a8bda976ade0a4497d2a04bd1ce352bc66c389947624ae5fab8c62074a371f0cda4a15234a16b867dbdf6ab021718e81314d3cbded8730bc2d96a6a8bb56461fabd527fe65e66b7d902f66b6607358c3ed34a6b5fb812cbe334f90bcee2407d323550fc1fb4dfb4a771e1a58304644866ef779887096bd2b676f3d68837e4\n2018-05-13 22:24:28.803 [23954] main/115/main I> 378a8bda976ade0a4497d2a04bd1ce352bc66c389947624ae5fab8c62074a37118a459e7ee26a8d225b5433aa06dd391daafdc9e5aaab2985b8c0e45a52b5dbd86d0236db2099f78ea5d63ec8a2b9b8757a9e85398faf935b7826c2e2a0d53ca7d323550fc1fb4dfb4a771e1a58304644866ef779887096bd2b676f3d68837e4. It seems to work fine after the following patch:\n```\ndiff --git a/src/lua/digest.c b/src/lua/digest.c\nindex bf738b3f5..b0572baf7 100644\n--- a/src/lua/digest.c\n+++ b/src/lua/digest.c\n@@ -79,7 +79,7 @@ lua_pbkdf2(lua_State L)\n        const char salt = lua_tostring(L, 2);\n        int num_iterations = lua_tointeger(L, 3);\n        int digest_len = lua_tointeger(L, 4);\n-       static __thread unsigned char digest[PBKDF2_MAX_DIGEST_SIZE];\n+       unsigned char digest[PBKDF2_MAX_DIGEST_SIZE];\n    if (coio_call(digest_pbkdf2_f, password, strlen(password), salt,\n                              strlen(salt), digest, num_iterations, digest_len) < 0) {\n\n```. @kyukhin Sent.. Easier test case:\nf = function() for i = 1, 10 do print(digest.pbkdf2('', 'salt', 100000, 128):hex()) end end\nfiber.create(f) fiber.create(f)\nI will follow up with the patch with such test.. Can be related: https://github.com/tarantool/tarantool/commit/488d07cf95ec3f1e4bc87bd59a42ec43a60d607e#diff-2ed524f6383779e86c2e39e431472a46R337. It is tricky to create key_def from lua and even impossible to set is_nullable/collation for the key_def's field for external lua modules. So the function you link is not the solution for lua land.. Hm, box_key_def_new is in exports, so yep it is possible. But tricky. Maybe it is better to leave compare function in merger's code when we'll include the merger into tarantool.. Now has on the branch Totktonada/gh-3276-on-board-merger.. I'll try to clarify the task:\n\nCompare two tuples.\nCompare tuple with a key.\nMerge two key_def's.. These ones: https://github.com/tarantool/tarantool/blob/0fd1f537b9989ee1ecf330ebbc5e70d9a4e4d367/src/box/identifier.c#L60 and 0xfffd.. Note: lua_close() helps with curl_multi 'indirect leak' that ASAN reports even for ./src/tarantool <<< ''. It was disabled (as part of tarantool_lua_free()) in a718d469100a2992707c16cd251a56e5e5159be2.. @locker Can we disable the test on Travis CI until the issue will be fixed (using skipcond like 1)?\n\n1: https://github.com/tarantool/tarantool/blob/ef322002baf81fa9e39fea7445a71d6e6e0c2224/test/app-tap/http_client.skipcond. NB: don't forget to enable the test in CI when the bug will be fixed.. Dupe of #3046?. @kbelyavs aggreed to take this task.. Fixed by @GeorgyKirichenko in 5c3b30016bc65a77804f995de0024a66a699ccc1.. Cannot reproduce locally. Where do you observe the result? What is the output?. It is okay for me when I run it locally on Gentoo/amd64 on Debug and RelWithDebInfo both. That is why I ask you where do you observe the result. Maybe it is some Mac OS specific. Don't sure.\nI tried to run it w/o test-run:\n$ LUA_PATH='test/sql-tap/lua/?.lua;test/sql/lua/?.lua;;' test/sql-tap/gh2548-select-compound-limit.test.lua\nTAP version 13\n1..8\nok - Positive COMPOUND UNION\nok - Negative COMPOUND UNION\nok - Positive COMPOUND UNION ALL\nok - Negative COMPOUND UNION ALL\nok - Positive COMPOUND INTERSECT\nok - Negative COMPOUND INTERSECT\nok - Positive COMPOUND EXCEPT\nok - Negative COMPOUND EXCEPT. .result file should not exists normally. The result of TAP13 test will be compared with the empty file that will lead to fail in case of correct TAP13 output. ( Yep, that is annoying; there is the issue: https://github.com/tarantool/test-run/issues/68 ). FYI: Reproduced on Linux (Gentoo/amd64) with clang-6.0.1.. Format string and data are the different arguments:\ntap.lua\n39 local function diag(test, fmt, ...)\n 40     io.write(string.rep(' ', 4 * test.level), \"# \", string.format(fmt, ...),\n 41         \"\\n\")\n 42 end\nUsage example:\n```\ntarantool> require('tap').test('test'):diag('%s', '%2C')\nTAP version 13\n%2C\n\n...\n. First, check whether it was fixed / reported in the upstream (related: #3275)..\n+test:is(type(yaml.decode(yaml.encode('false'))), 'boolean')\n+test:is(type(yaml.decode(yaml.encode('true'))), 'boolean')\n+test:is(type(yaml.decode(yaml.encode('false1'))), 'string')\n+test:is(type(yaml.decode(yaml.encode('true1'))), 'string')\n+test:is(type(yaml.decode(yaml.encode({a = 'false'})).a), 'boolean')\n+test:is(type(yaml.decode(yaml.encode({a = 'false'})).a), 'boolean')\n```\nYour test shows incorrect behaviour.. local is_in_txn = not pcall(box.begin)\nIt surely did the work before 1.9.1-40-g131121c99 and I guess still works.. @Gerold103 Sure, one should close it then. But I\u2019m agree that a ready to use function w/o side effects would be covenient.. LIKE is the standard operator, we are not going to remove it. GLOB was broken is some way and we decided to remove it now, but implement REGEXP instead in the future.. Ouch, I misread you message (I did read LIKE() as LIKE). Are you propose to don't fix the issue? Maybe I don't get the idea.. Thanks, I understand now.. It was closed by PR #3586 in 1.10.1-236-g0746fdb4a.. I think we should either find a way to test this code or (more likely) remove it. I agree.. Related (Redis way to handle strings): https://github.com/antirez/sds. @locker Pushed new version of test-run (printing whole reject file, tarantool/test-run#102) into tarantool (1.9, 1.10, 2.0).. Seems to be dupe of #3418, #3973 and #4005. The following patch helps me on a Mac OS machine:\n```diff\ndiff --git a/src/lib/core/fiber.c b/src/lib/core/fiber.c\nindex abd6c6b11..529acf2d5 100644\n--- a/src/lib/core/fiber.c\n+++ b/src/lib/core/fiber.c\n@@ -95,7 +95,7 @@ enum {\n        / The minimum allowable fiber stack size in bytes /\n        FIBER_STACK_SIZE_MINIMAL = 16384,\n        / Default fiber stack size in bytes /\n-       FIBER_STACK_SIZE_DEFAULT = 65536\n+       FIBER_STACK_SIZE_DEFAULT = 8388608,\n };\n/* Default fiber attributes /\n```. I got 401 from tarantool on your example on Gentoo. My libcurl version:\n$ curl --version\ncurl 7.60.0 (x86_64-pc-linux-gnu) libcurl/7.60.0 OpenSSL/1.0.2o zlib/1.2.11 nghttp2/1.32.0\nRelease-Date: 2018-05-16\nProtocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smtp smtps telnet tftp \nFeatures: IPv6 Largefile NTLM SSL libz TLS-SRP HTTP2 UnixSockets HTTPS-proxy\nI suggests to add verbose option to http:request and check the output.. It seems that the problem is because a tarantool package is built against libcurl with GnuTLS backend. Don't sure whether we able to change it in a binary distro.. 1. I don't think we should support LIKE for anything except TEXT / VARCHAR / CHAR.\nAt least we should elaborate how and why one can want to use LIKE for BLOBs before discussing whether we should going to support them.. Remaining tasks:\n\n[#3589] Follow collations in LIKE operator.\n[#3523] Remove like() function.\n[#3954] Forbid anything except TEXT for LIKE operator.\n\nI think this issue can be closed (as superseded by the issues above).. Use xpcall + debug.traceback to print the stacktrace.. I don't think we should set the second parameter of error(): https://www.freelists.org/post/tarantool-patches/PATCH-02-v2-fio-show-function-name-in-all-fio-errors,2. Similar to #3476.. See also #3662.. I think it worth to place it in ${REPO}/.github/ISSUE_TEMPLATE.md (consider 1) to show this text in the new issue form and sync with @sergw, because he has the task to add such text. Alternatively it is possible to place the file to ${REPO}/ISSUE_TEMPLATE.md, but many auxiliary files in a project root is not good, IMHO.\n1: https://blog.github.com/2016-02-17-issue-and-pull-request-templates/. @lenkis \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b .github/ISSUE_TEMPLATE.md, \u043e\u0442\u043a\u0440\u043e\u0439 \u043d\u043e\u0432\u044b\u0439 PR \u0432 master.. @stek29 It was closed unintentionally, because of changing the default branch. The notes seems to be useful. Can you, please, resend the patch?. Decided to:\n\nevaluate the input buffer size (for UDP) when no explicit size provided;\ntruncate the datagram and discard the tail if it is larger then explicitly provided input buffer size (as we do now).\n\nCite from the Yaroslav's (@rosik) message:\n\nI've tested the new behavior.\nThe recvfrom(nil) now works great.\nHowever I doubt about returning nil instead of truncated message.\nIt breaks backward compatibility and it is not worth of it:\nWhen a user writes recvfrom(32) I guess he is ready to get truncated message.\nIf he is not, it's easier to call new version of recvfrom(nil) than to check return value every time.. @TarantoolBot document\nTitle: socket:recv() / socket:recvfrom() updates\n- API change (for a UDP socket after #3619): a datagram will not be truncated to 512 bytes and the input buffer size will be evaluated when no explicit size was passed (but the evaluating leads to extra syscall); check the commit message for more information.\n- API undocumented (for a UDP socket): a datagram will be truncated to size length in case when explicit size was passed, but the datagram length is larger then the size; the tail of the datagram will be discarded in the case; don't forget to note TCP behaviour (it is very different); check the commit message for more information.\n- Recommendation missed: recommended to set size explicitly for recv and recvfrom; don't forget to give recommendations whether it is possible to determine the size (message format, network conditions) and how to do so depending of network conditions (add note that datagram sizes above MTU will lead to IP fragmentation that can be inefficient; add note that there is tuneable sysctl net.inet.udp.maxdgram on Mac OS); check the commit message for more information.\n- Minor: update 'Use of a UDP socket on localhost' to use explicit size (say, 512), because we will recommend it for readers.\n- Minor: ToC sorting is such that recv is far away from recvfrom.\n- Monor: inconsistency in parameters naming: recv(size) vs recvfrom(limit). The size term should be preferred IMHO, because AFAIK the word 'size' usually applied for the size of a buffer (while 'length' usually applied to a message length).\n\nFeel free to ask more informatiom from @Totktonada.. @vanessasmith We have the repository for Ubuntu Bionic, but the documentation doesn\u2019t reflect it for now (tracked by 1). You can replace all words xenial with bionic in the instruction from your first link and it should work.\n1: https://github.com/tarantool/doc/issues/536. Dupe of your #2977.. Superseded by #3641.\n@kyukhin Should be close this PR?. I think the patch should be discarded, while it is unclear whether we really need it.\nThe discussion was here: https://www.freelists.org/post/tarantool-patches/PATCH-lua-show-locals-when-a-tap-test-fails,8. AFAIU we want to store BLOB data as bin8/bin/16/bin32 in msgpack and forbid other ones (including DML from Lua side). Then we need to introduce new tarantool format data type: it will allow bin mp types, but disallow fixstr/str ones. @Korablev77 Are this issue assumes this scope of work?\nNow strings are inserted are fixstr/str, but X'...' values as bin:\n```\nbox.cfg{}\n\\set language sql\ncreate table t(id int primary key, v blob);\ninsert into t values(1, 'abcd');\ninsert into t values(2, X'61626364');\n\\set language lua\ntuple_mp_hex = function(t) local ffi = require('ffi') local o = (ffi.cast('const uint16_t ', t) + 4)[0] local s = (ffi.cast('const uint32_t ', t) + 1)[0] local d = ffi.cast('const char *', t) + o return ffi.string(d, s):hex() end -- gh-3909\ntarantool> tuple_mp_hex(box.space.T:get(1))\n\n\n9201a461626364\n...\n\ntarantool> tuple_mp_hex(box.space.T:get(2))\n\n9202c40461626364\n...\n```\n\na461626364 is fixstr of length 4 with characters 61, 62, 63, 64 ('a', 'b', 'c', 'd'). c40461626364 is bin8 of length 4 with the same bytes. The decoding table: https://github.com/msgpack/msgpack/blob/master/spec.md#overview\nWhy it even matter? It affects what we send in the binary protocol and so we have no strong representation of our SQL types for connectors. See https://github.com/tarantool/tarantool-java/issues/45. I see even more: bin8 from iproto sql_execute stored as fixstr: https://github.com/tarantool/tarantool-java/issues/45#issuecomment-457449618. @kyukhin It is a part of #4019, so should be in 2.1.2 milestone.. The example above is valid for scalar (we replaced blob with scalar and going to support blob separately in the future).\nNow I have a problem with scalar: if I bind bin8 to, say, insert into x values(2, ?) and try to select it, I got str8. It is not a part of this issue.. sock:errno() and sock:error() will give an actual error. But the doc looks like it should be returned from the function, you are right. I don't know what should be changed too.. Symbols we don't export from luajit:\n-lua_copy\n-lua_hash\n-lua_hashstring\n-lua_isyieldable\n-lua_tointegerx\n-lua_tonumberx\n-lua_version\nGroup them by the Lua API version introduces the symbol:\nLua 5.2:\n- lua_copy\n- lua_tointegerx\n- lua_tonumberx\n- lua_version\nLua 5.3:\n- lua_isyieldable\nNot a Lua API:\n- lua_hash / lua_hashstring (see commit)\nTarantool (as well as LuaJIT) supports Lua 5.1. lua-protobuf supports lua 5.1 too, check the code (it is under #if LUA_VERSION_NUM < 502).\nI tried to install lua-protobuf from the rockspec using tarantoolctl rocks install (it installs pb.so into a location where tarantool cannot find it, but it is a separate issue) and luarocks install (successfully). Then I successfully run the example (with replacing require \"serpent\".block with require('yaml').encode).\n@edam So, what steps you perform and what is going wrong with lua-protobuf?\nUDP 2018-11-26: fixed link to lua-protobuf code.\n[4]: https://github.com/starwing/lua-protobuf#example. For the reference: lua_tonumber and lua_tonumberx code; lua_tointeger and lua_tointegerx code.\nIt seems that lua_tointegerx set ok to 1 when truncates double to integer, so \"0\" is only case in which x functions help. Right implementations of x functions for Lua 5.1 should check this case manually, I think. I would consider it as lua-protobuf bug (look at the code, I fixed the link in my previous message).\nSecond point: even if we'll export these functions we still report LUA_VERSION_NUM as 501 and lua-protobuf will not use them. Only modules that are written specifically for luajit and/or tarantool will able to use them.\n@edam So, what is the problem we trying to solve here?\n\nIf it is lua-protobuf behaviour, so it should be an issue in lua-protobuf to fix it against Lua 5.1 compliant lua implementations.\nIf it is about other modules around lua land, they will not use *x functions when linked against luajit/tarantool, so we cannot solve it from our side.\nIf it is about tarantool-specific module we should decide anything after seeing certain cases and I don't know one.\n\n2: https://github.com/tarantool/luajit/blob/3de8f282ab6c50270e6fd0db2c9f7fc9f6277f9b/src/lj_api.c#L385-L435. We look into that with Sergei together.\n\n\nI think PERIOD constant should depend on workers count (test-run need to be updated to pass it via environment), because tarantool servers of different workers vie for resources and becomes less responsible. Absolute value of PERIOD is small on Linux and can be smaller then delays in parallel test run. Proposed to try PERIOD *= workers_count. Hope the test logic does not depend on absolute value of PERIOD.\n\n\nIt is undesirable to sleep for long time period, so I propose to implement one of this following ways to mitigate it:\n\nsave deadline time, call grep_log in a loop with small sleep and deadline time check; if a condition does not match until deadline time reached, then raise an error.\nmore general and reusable approach: make a wrapper to block until a condition meet or timeout reached, provide wrapped version of grep_log (with timeout parameter), use it accross tests.\n\nHope it helps.. We can use ICU facilities to convert dates from / to internal format.. DATETIME is non-standard and should be removed. TIMESTAMP should be supported instead.. Sure. I\u2019ll proceed.. It is due to improper fix of #3685.. Thanks for the report!\nA file handle is the third parameter of csv.dump() (the second one is table of options or nil). The wiki page was fixed.. Can be done under -DENABLE_VALGRIND=ON.. Differences btw 1.1 and 1.2: https://yaml.readthedocs.io/en/latest/pyyaml.html#defaulting-to-yaml-1-2-support. More tricky yaml peculiars: https://github.com/cblp/yaml-sucks. I have it reproduced on 2.1.0-3-g6ca97fd5a (Debug build, Linux).. Fixed in https://github.com/tarantool/luajit/commit/d92380ffa50098bc0a1eec3d1c0b6cd404591fcf and propagated into tarantool in be0506db66976ab85cdc05d497a19a8d4e39d2ac (2.1) and e5e259a82f8ef771818b97f5f8ca8ab601e9e2c4 (1.10).. We have no any SQL_MAINTAINER_MODE usages across sources. I tried your reproducer on fresh 2.0 (8e94f9713c89d89bda490e7c3cee95a185d04c47) on Debug build on Linux + gdb and things seems to work fine.\nAre that reproduced on a fresh 2.0? Build type is Debug? Is non-sql code has debug symbols? If all that are true, so it is something Mac OS (or lldb) specific.. The PR is closed due to moving to trunk-based development. 2.0 branch was deleted. Now developers should base its changes on top of master branch.. @vasiliy-t It was closed unintentionally, because of changing the default branch. Can you, please, rebase it on top of 1.10 and resend the patch to 1.10 branch?\nPlease, push Georgy and Kostya to give their comments.. FYI: Changed target branch to 1.10 (please rebase the source branch appropriately), reopened.. To sum Yaroslav's message against variants above:\n\ntarantoolctl is okay.\nluarocks/cfg.lua is not okay, because luarocks knows nothing about possible tarantool layouts (installed or portable);\nsite_config.lua is not okay, because it is strange to have if's in the template.\n\nMy answer in the defence of 3rd variant:\nI propose to add -DPORTABLE_LAYOUT=ON/OFF option and change MODULE_FULL_INCLUDEDIR, CMAKE_INSTALL_FULL_BINDIR and CMAKE_INSTALL_PREFIX (if needed) accordingly. No if's are needed then. It is possible that some other things will be changed for the portable layout, so all of them can be wrapped in such way and will be known at build time.\nWe don't know where the tarantool executable will be placed when performing the portable build. So maybe we anyway need some runtime checks inside tarantoolctl, luarocks or site_config.\nIt seems we need one more discussing round.. > > Hmm, for PRAGMA parser_trace; you mention \"debug\" and \"release\" build,\n\n\nbut should it be legal if I build with -DCMAKE_BUILD_TYPE=RelWithDebInfo?\n\nI guess not, it shouldn't be legal (and it matches current behaviour).\n\nAll our official packages are built as RelWithDebInfo. This build is de-facto release, -DCMAKE_BUILD_TYPE=Release is just the option for third-party packages to match distro-specific requirements. So we must treat both as release.\nNB: I don't know anything about the context of this discussion.. We discussed this a bit with Georgy. It seems we should wait for cluster agains after replication_timeout change, because there is the time period when replication_timeout is different on the cluster nodes that can lead to replicas reconnection. Then check in the loop that replicas do not leave from the 'follow' status (any other status should lead to an error immediately). I think that timings should not be changed here.\nAnyway, I would ask Georgy as author of the test case to provide a fix as the separate patch.. @sergw I answered in the mailing list.\n1: https://www.freelists.org/post/tarantool-patches/PATCH-v2-45-test-use-wait-cond-to-check-follow-status,1. I think any implicit cast with precision loss should raise an error. Don't sure whether we should forbid to implicitly cast (INTEGER 42) to (DOUBLE 42.0) and vice versa, but we definitely should forbid to implicitly cast (INTEGER 9223372036854775807) to (DOUBLE 9223372036854775808.0) and (DOUBLE 42.1) to (INTEGER 42). So I propose to treat the issue as bug about precision loss during expression evaluation.\n@pgulutzan What do you this about type implicit casting from, say, (INTEGER 42) to (DOUBLE 42.0)? Don't sure about the case to consider here.. 1_7 packagecloud bucket was updated w/o proper handling of signatures verification errors. 20C3A9DB75CC7EDE is the right key. Instructions can be found here (centos, how to remove a gpg key) and here (debian, how to add a gpg key).\n2: https://www.tarantool.io/en/download/os-installation/1.7/debian/. We can update yum repos (but not APT) smoothly for both 1.6 and 1.7, because they don't store gpg keys locally, but fetch them each time from the 'gpgkey' parameter, which is URL on download.tarantool.org. Debians store keys locally, so we cannot provide an update for 1.7 (it was already migrated, it was not mine decision), we have two options:\n\nAdd postint with curl http://download.tarantool.org/tarantool/1.6/gpgkey | sudo apt-key add - for 1.6. Leave instructions for 1.7 in mailing lists / chats.\nJust migrate 1.6 too. Leave instructions for 1.6 and 1.7 in mailing lists / chats.\n\nIt seems it worth to do the 2nd.. Now on debian / ubuntu for the 1.6 repository:\nGet:1 https://packagecloud.io/tarantool/1_6/debian stretch InRelease [23.7 kB]\nErr:1 https://packagecloud.io/tarantool/1_6/debian stretch InRelease\n  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY DCF5FADF3C1D16C1\nFetched 23.7 kB in 3s (6917 B/s)\nReading package lists... Done\nW: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: https://packagecloud.io/tarantool/1_6/debian stretch InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY DCF5FADF3C1D16C1\nW: Failed to fetch http://download.tarantool.org/tarantool/1.6/debian/dists/stretch/InRelease  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY DCF5FADF3C1D16C1\nW: Some index files failed to download. They have been ignored, or old ones used instead.\nFix:\ncurl http://download.tarantool.org/tarantool/1.6/gpgkey | sudo apt-key add -. > _ = box.schema.space.create('test1', { id = 555 })\n2.0 has no {id = 555} here. Are you able to reproduce it on a clean 2.0?. Related issue: #3677.. @sunpoet I proposed the patchset with adding the header, but I did not include iconv-related change you proposed here. Feedback is needed to proceed with this change somehow.\n1: https://www.freelists.org/post/tarantool-patches/PATCH-03-Fix-FreeBSD-build. There is report it is possible with Qemu/KQemu: http://erouault.blogspot.com/2016/09/running-freebsd-in-travis-ci.html\nIt is also possible with agrant, but only for 32-bit images: https://stackoverflow.com/questions/37307114/launching-a-vagrant-vm-inside-travis-ci\nAlternatively we can setup CI on our own machines with Jenkins.. We have the same problems with modules (say, avro-schema).. Bisect:\n```\ncda3cb55df464d58bfccc7f067450bded6202d88 is the first bad commit\ncommit cda3cb55df464d58bfccc7f067450bded6202d88\nAuthor: GeorgyKirichenko kirichenkoga@gmail.com\nDate:   Mon Nov 21 18:23:14 2016 +0300\nxlog cursor refactoring. Issue #1720\n\nAdd xlog_create function. xdir-create_xlog will work via xlog_create\nAdd reuse_fd flag to reuse fd after xlog close.\n\n```\nMax latency:\n1.7.2-86-g0859f06ed   Max  latency:  5.00    msecs\n1.7.1-359-gc0171969c  Max  latency:  5.00    msecs\n1.7.2-191-g950e532c6  Max  latency:  5.00    msecs\n1.7.2-245-g2d7a87065  Max  latency:  4.00    msecs\n1.7.2-246-gf379a783b  Max  latency:  5.00    msecs\n1.7.2-247-gcda3cb55d  Max  latency:  143.00  msecs\n1.7.2-248-gfe6d4a2ab  Max  latency:  136.00  msecs\n1.7.2-251-g9b8116056  Max  latency:  148.00  msecs\n1.7.2-257-ge50a4974c  Max  latency:  142.00  msecs\n1.7.2-270-ga1880ceeb  Max  latency:  350.00  msecs\n1.7.2-315-ge6da77184  Max  latency:  643.00  msecs\n1.7.3-283-g5a4ef6dbc  Max  latency:  344.00  msecs\nIt seems we have several problems, I had to bisect the first one. The second one exists somewhere between 1.7.2-257 and 1.7.2-270. Max latency ~30-60ms (within a step) is within (1.7.2-247\u20141.7.2-257) almost all time. On <1.7.2-247 always ~1-5ms. On >1.7.2-270 ~1-10ms, but sometimes strikes up to ~150-300ms.. ```\n$ cat script_1_6.lua \n!/usr/bin/env tarantool\nbox.cfg({\n    listen = 3303,\n    slab_alloc_arena = 1, -- 1 GiB\n})\nbox.schema.space.create('test')\nbox.space.test:create_index('primary')\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\n```\n```\n$ cat script_1_9.lua \n!/usr/bin/env tarantool\nbox.cfg({\n    listen = 3303,\n    memtx_memory = 1024 ^ 3, -- 1 GiB\n})\nbox.schema.space.create('test')\nbox.space.test:create_index('primary')\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\n```\nUse script_1_9.lua after 1.7.3-351-gc386c1932 (inclusive).\nUPD: script_1_6.lua works on all tarantool versions, no need to conditionally switch to script_1_9.lua.. About the second problem (or maybe not a problem, but some behaviour change).\nBisect:\n```\n1900c58b8d3a737e8e862c6bc64c9f427b440aed is the first bad commit\ncommit 1900c58b8d3a737e8e862c6bc64c9f427b440aed\nAuthor: GeorgyKirichenko kirichenkoga@gmail.com\nDate:   Wed Nov 23 13:00:49 2016 +0300\nUse sync_interval from dir for memtx wal/snapshot. Issue #1720\n\n```\nUpdated max latency:\n1.7.2-86-g0859f06ed   Max  latency:  5.00    msecs\n1.7.1-359-gc0171969c  Max  latency:  5.00    msecs\n1.7.2-191-g950e532c6  Max  latency:  5.00    msecs\n1.7.2-245-g2d7a87065  Max  latency:  4.00    msecs\n1.7.2-246-gf379a783b  Max  latency:  5.00    msecs\n1.7.2-247-gcda3cb55d  Max  latency:  143.00  msecs\n1.7.2-248-gfe6d4a2ab  Max  latency:  136.00  msecs\n1.7.2-251-g9b8116056  Max  latency:  148.00  msecs\n1.7.2-257-ge50a4974c  Max  latency:  142.00  msecs\n1.7.2-263-g1f3f7acf7  Max  latency:  136.00  msecs\n1.7.2-264-g1900c58b8  Max  latency:  371.00  msecs\n1.7.2-265-g787f866f9  Max  latency:  360.00  msecs\n1.7.2-266-gfd0bcac72  Max  latency:  347.00  msecs\n1.7.2-270-ga1880ceeb  Max  latency:  350.00  msecs\n1.7.2-315-ge6da77184  Max  latency:  643.00  msecs\n1.7.3-283-g5a4ef6dbc  Max  latency:  344.00  msecs. Requests per second (minimal / average / maximum):\n1.7.2-86-g0859f06ed   |      req/s  |       144969  |       147581  |       154639  |\n1.7.1-359-gc0171969c  |      req/s  |       144344  |       148690  |       155644  |\n1.7.2-191-g950e532c6  |      req/s  |       144400  |       147698  |       157351  |\n1.7.2-245-g2d7a87065  |      req/s  |       138445  |       147279  |       156479  |\n1.7.2-246-gf379a783b  |      req/s  |       144886  |       148482  |       154079  |\n1.7.2-247-gcda3cb55d  |      req/s  |       107736  |       128184  |       148196  |\n1.7.2-248-gfe6d4a2ab  |      req/s  |       109317  |       129870  |       149091  |\n1.7.2-251-g9b8116056  |      req/s  |       96290   |       129792  |       148534  |\n1.7.2-257-ge50a4974c  |      req/s  |       96190   |       132348  |       150571  |\n1.7.2-263-g1f3f7acf7  |      req/s  |       100127  |       123588  |       143218  |\n1.7.2-264-g1900c58b8  |      req/s  |       77076   |       136155  |       152216  |\n1.7.2-265-g787f866f9  |      req/s  |       60029   |       135039  |       151005  |\n1.7.2-266-gfd0bcac72  |      req/s  |       80764   |       134627  |       148789  |\n1.7.2-270-ga1880ceeb  |      req/s  |       79656   |       138404  |       151065  |\n1.7.2-315-ge6da77184  |      req/s  |       70863   |       137707  |       151169  |\n1.7.3-283-g5a4ef6dbc  |      req/s  |       33586   |       121570  |       154035  |\nIt seems we can bisect between 1.7.2-315-ge6da77184 and 1.7.3-283-g5a4ef6dbc using minimal req/s to find some other (third) possible problem.. I have measured average RPS across 15 benchmarking iterations on 1.6 and 1.9 on the another machine (this numbers cannot be compared with previous ones). This machine has 12 hyperthreaded cores (24 logic cores) within 2 numa nodes (all tasks were binded to 2nd numa node), HDD for the tarantool workdir (xlogs), 94GiB of RAM.\n```\n---- results_clean/1.6.9-93-g54ff183.result ----\nAverage RPS:\ncnt: 15\nmin: 95134\nmax: 96007\navg: 95507.6\nvar: 873 (0.914063%)\n---- results_clean/1.9.2-2-gcea113c.result ----\nAverage RPS:\ncnt: 15\nmin: 87271\nmax: 92664\navg: 89365.7\nvar: 5393 (6.03475%)\n---- results_experiment/1.9.2-2-gcea113c.result ----\nAverage RPS:\ncnt: 15\nmin: 95541\nmax: 96669\navg: 96293.6\nvar: 1128 (1.17142%)\n---- results_vm.dirty_bytes.10485760/1.6.9-93-g54ff183.result ----\nAverage RPS:\ncnt: 15\nmin: 94659\nmax: 95728\navg: 95054.4\nvar: 1069 (1.12462%)\n---- results_vm.dirty_bytes.10485760/1.9.2-2-gcea113c.result ----\nAverage RPS:\ncnt: 15\nmin: 94440\nmax: 95569\navg: 94994.8\nvar: 1129 (1.18849%)\n```\nresult_clean is testing on a clean branch w/o any modifications. We see that 1.6 is good (no latency spikes), but 1.9 is worse (-6% average RPS, 500ms latency spikes).\nresult_experiment is 1.9 with the following patch (thanks @locker for the investigation):\n```diff\ngit diff\ndiff --git a/src/box/xlog.c b/src/box/xlog.c\nindex f258e4c..ae0dcef 100644\n--- a/src/box/xlog.c\n+++ b/src/box/xlog.c\n@@ -895,7 +895,8 @@ xdir_create_xlog(struct xdir dir, struct xlog xlog,\n        if (xlog_create(xlog, filename, dir->open_wflags, &meta) != 0)\n                return -1;\n\n/ set sync interval from xdir settings /\n/ set sync interval and is_async from xdir settings /\nxlog->sync_is_async = dir->sync_is_async;\n        xlog->sync_interval = dir->sync_interval;\n        / free file cache if dir should be synced /\n        xlog->free_cache = dir->sync_interval != 0 ? true: false;\n```\n\nresults_vm.dirty_bytes.10485760 is set of results with dirty bytes set to 10MiB (vm.dirty_bytes = 10485760). We see here that the issue cannot be reproduced with such sysctl settings, the results are good in both cases. I observed 50ms max latency with 10MiB value on 1.9, but it does not affect average RPS in any significant way.\nAll other results are got with vm.dirty_ratio = 20 (20% of RAM is ~18.8GiB).\nN. B.: I have wrote the helper to perform several runs with logging results and show average + variance across these runs.\n1: https://gist.github.com/Totktonada/cca58306b7952739beeac1caa70dd6ec. Local SMP 8 logical, 4 physical core machine with SSD and 15.5GiB RAM gives the following results:\n```\n---- results_clean/1.6.9-93-g54ff183e3.result ----\nAverage RPS:\ncnt: 15\nmin: 136755\nmax: 145951\navg: 143373\nvar: 9196 (6.41404%)\n---- results_clean/1.9.2-2-gcea113cf9.result ----\nAverage RPS:\ncnt: 15\nmin: 117140\nmax: 128846\navg: 123325\nvar: 11706 (9.49203%)\n---- results_experiment/1.9.2-2-gcea113cf9.result ----\nAverage RPS:\ncnt: 15\nmin: 142903\nmax: 146856\navg: 145339\nvar: 3953 (2.71984%)\n```\n1.6 is good, 1.9 is 14% worse (average RPS), the fix does the work.\nThese numbers, in turn, can be compared with all except the comment above.. nosqlbench config for the last two messages above:\ndiff --git a/src/nosqlbench.conf b/src/nosqlbench.conf\nindex 9fcd5b3..1f5a9fa 100644\n--- a/src/nosqlbench.conf\n+++ b/src/nosqlbench.conf\n@@ -15,10 +15,10 @@ configuration {\n        # time_limit - stop benchmarking after time_limit\n        # thread_limit - stop bencharking after client_max reach\n        # (client_creation_policy interval should be specified also)\n-       benchmark 'no_limit'\n+       benchmark 'time_limit'\n        # benchmarking time limit\n        # (only for time_limit benchmarking)\n-       time_limit 10\n+       time_limit 30\n        # workload request count\n        request_count 4000000\n        # receive server replies every batch count requests. Tried to build from source on FreeBSD 11.2 and all seems to be fine. Are you have any other information how to reproduce the issue?. Reproduced on FreeBSD 10.4.. /usr/bin/cc  -Wno-unknown-pragmas -fexceptions -funwind-tables -fno-common -DCURL_SUPPORTS_SSL    CMakeFiles/cmTC_d99a3.dir/src.c.o  -o cmTC_d99a3 -Wl,-rpath,/usr/local/lib /usr/local/lib/libcurl.so /usr/lib/libssl.so /usr/lib/libcrypto.so -lpthread -ldl \n/usr/bin/ld: cannot find -ldl\ncc: error: linker command failed with exit code 1 (use -v to see invocation). Fixed in https://github.com/tarantool/luajit/commit/d92380ffa50098bc0a1eec3d1c0b6cd404591fcf and propagated into tarantool in be0506db66976ab85cdc05d497a19a8d4e39d2ac (2.1) and e5e259a82f8ef771818b97f5f8ca8ab601e9e2c4 (1.10).. @sergw, please try:\ndiff --git a/src/box/relay.cc b/src/box/relay.cc\nindex 81f2b821c..17d85c6ba 100644\n--- a/src/box/relay.cc\n+++ b/src/box/relay.cc\n@@ -632,7 +632,7 @@ static void\n relay_send(struct relay *relay, struct xrow_header *packet)\n {\n        struct errinj *inj = errinj(ERRINJ_RELAY_SEND_DELAY, ERRINJ_BOOL);\n-       while (inj->bparam) {\n+       while (inj != NULL && inj->bparam) {\n                fiber_sleep(0.01);\n                inj = errinj(ERRINJ_RELAY_SEND_DELAY, ERRINJ_BOOL);\n        }\nFor more info:\n<_ZL10relay_sendP5relayP11xrow_header>\npush   %rbp\nmov    %rsp,%rbp\nsub    $0x30,%rsp\nmov    %rdi,-0x18(%rbp)\nmov    %rsi,-0x20(%rbp)\nmovq   $0x0,-0x8(%rbp) ; move 0 to local var \nmov    -0x8(%rbp),%rax ; move 0 from the var to %rax\nmovzbl 0x10(%rax),%eax ; !! SIGSEGV\n```\n(gdb) bt\n0  0x0000561b17600b3e in relay_send(relay, xrow_header) ()\n1  0x0000561b17600c40 in relay_send_initial_join_row(xstream, xrow_header) ()\n2  0x0000561b175fb98c in xstream_write ()\n3  0x0000561b175690b1 in memtx_initial_join_f ()\n4  0x0000561b17546d9f in fiber_cxx_invoke(int ()(__va_list_tag), __va_list_tag*) ()\n5  0x0000561b17636321 in fiber_loop ()\n6  0x0000561b1779a86f in coro_init ()\n```. More from https://lists.gnu.org/archive/html/info-gnu/2018-08/msg00000.html:\n* The AI_IDN_ALLOW_UNASSIGNED and NI_IDN_ALLOW_UNASSIGNED flags for the\n  getaddrinfo and getnameinfo functions have been deprecated.  The behavior\n  previously selected by them is now always enabled.\n* The AI_IDN_USE_STD3_ASCII_RULES and NI_IDN_USE_STD3_ASCII_RULES flags for\n  the getaddrinfo and getnameinfo functions have been deprecated.  The STD3\n  restriction (rejecting '_' in host names, among other things) has been\n  removed, for increased compatibility with non-IDN name resolution.\n. I hope we should follow glibc deprecation and remove these flags.. @kyukhin Can you, please, review it finally and merge?. tuple.data is the new lua table decoded from tuple's internal msgpack when acquired.. I think it is possible to set metatable with __newindex that'll raise an error, but:\n\nIt is API change (someone can use and change the new table and so avoids extra copies);\nIt can have performance consequences (but I don't sure).\n\nWe possibly should have some warning about that in the documentation.. I don't know why current design is that, so cannot estimate cons and pros of your proposal.. Reproduced in Travis CI: https://travis-ci.org/tarantool/tarantool/jobs/449371042#L3392. Now I found it is optional in JDBC.. It is optional in JDBC, so I think there is no reason to track it here. We have no enough demand to pay time to the feature, at least now. I think the issue can be closed. I'll close the linked tarantool-java issue.. Now I found it is optional in JDBC.. It is optional in JDBC, so I think there is no reason to track it here. We have no enough demand to pay time to the feature, at least now. I think the issue can be closed. I'll close the linked tarantool-java issue.. My inderstanding is that SQLXML is Java pair of the XML type in SQL. The latter is described in Part 14 of the SQL standard 2011. But I think we can implement JDBC part on top of BLOB type and rewrite it when/if Tarantool will support XML type.. Now I found it is optional in JDBC.. It is optional in JDBC, so I think there is no reason to track it here. We have no enough demand to pay time to the feature, at least now. I think the issue can be closed. I'll close the linked tarantool-java issue.. Now I found it is optional in JDBC.. It is optional in JDBC, so I think there is no reason to track it here. We have no enough demand to pay time to the feature, at least now. I think the issue can be closed. I'll close the linked tarantool-java issue.. Thanks! We just provide the lua wrapper around iconv functions, so I think the libc implementation should be good enough for most cases and a cmake option like -DUSE_LIBC_ICONV should be provided for maintainers (but see testing results below).\nHowever I found that enabling of libc iconv is tricky in presence of installed /usr/local/include/iconv.h, because of default include paths order (or something around).\nAnyway, I hacked it around to test:\n```\ndiff --git a/cmake/FindICONV.cmake b/cmake/FindICONV.cmake\nindex 2ae9c8197..973faf268 100644\n--- a/cmake/FindICONV.cmake\n+++ b/cmake/FindICONV.cmake\n@@ -4,7 +4,7 @@\n # ICONV_LIBRARIES\n #\n-if (TARGET_OS_LINUX)\n+if (TARGET_OS_LINUX OR TARGET_OS_FREEBSD)\n     set(ICONV_LIBRARY \"\")\n else()\n     find_library(ICONV_LIBRARY iconv)\n@@ -13,9 +13,11 @@ else()\n         set(ICONV_LIBRARY \"\")\n     endif()\n endif()\n-find_path(ICONV_INCLUDE_DIR iconv.h)\n-if(NOT ICONV_INCLUDE_DIR)\n-    message(FATAL_ERROR \"iconv include header not found\")\n+if (NOT TARGET_OS_FREEBSD) # temp hack\n+    find_path(ICONV_INCLUDE_DIR iconv.h)\n+    if(NOT ICONV_INCLUDE_DIR)\n+        message(FATAL_ERROR \"iconv include header not found\")\n+    endif()\n endif()\n set(ICONV_LIBRARIES ${ICONV_LIBRARY})\n set(ICONV_INCLUDE_DIRS ${ICONV_INCLUDE_DIR})\ndiff --git a/src/lua/tnt_iconv.c b/src/lua/tnt_iconv.c\nindex c91fef140..266ee8fd3 100644\n--- a/src/lua/tnt_iconv.c\n+++ b/src/lua/tnt_iconv.c\n@@ -1,4 +1,9 @@\n-#include \n+#include \n+struct __tag_iconv_t;\n+typedef        struct __tag_iconv_t    iconv_t;\n+iconv_t iconv_open(const char , const char );\n+int iconv_close(iconv_t);\n+size_t iconv(iconv_t, char , size_t *, char , size_t );\niconv_t\n tnt_iconv_open(const char tocode, const char fromcode)\n```\nAnd run ./src/tarantool test/app-tap/iconv.test.lua:\n```\nTAP version 13\n1..11\nok - check ascii->utf8 on simple string\nok - check utf8->ascii on simple string\nok - UTF conversion with ascii string\nok - UTF conversion with non-ascii symbols\nok - UTF conversion with non-ascii symbols\nok - complex multi-format conversion\nok - huge string\nok - error was thrown on bad encoding\nok - correct error\nnot ok - error was thrown on sequence\n\nfilename: test/app-tap/iconv.test.lua\n  trace:\n  - line: 0\n    source: '@test/app-tap/iconv.test.lua'\n    filename: test/app-tap/iconv.test.lua\n    what: main\n    namewhat: \n    src: test/app-tap/iconv.test.lua\n  line: 0\n  expected: false\n  got: true\n  ...\nnot ok - correct error\n\nfilename: test/app-tap/iconv.test.lua\n  line: 0\n  trace:\n  - line: 0\n    source: '@test/app-tap/iconv.test.lua'\n    filename: test/app-tap/iconv.test.lua\n    what: main\n    namewhat: \n    src: test/app-tap/iconv.test.lua\n  ...\nfailed subtest: 2\n```\nTried to run the last test case manually:\n```\ntarantool> require('iconv').new('ASCII', 'UTF-8')('\u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u0442\u0435\u043a\u0441\u0442')\n\n\n??????? ?????\n...\n```\n\nWhile with libiconv.so I got the following (as well as on Linux):\n```\ntarantool> require('iconv').new('ASCII', 'UTF-8')('\u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u0442\u0435\u043a\u0441\u0442')\n\n\nerror: 'builtin/iconv.lua:52: Incomplete multibyte sequence'\n...\n```\n\nDon't sure what to do, to be honest. Maybe we really should stick with libiconv.so to avoid possible compatibility issues, at least while there are such differences in implementations.. > There is commit 16a636f (and its follow up dcac64a) which stated that there are some incompatibilities between libc's iconv on FreeBSD and libc's iconv on Linux.\n@kbelyavs says it was about function names and .so name where the functions are placed and not about functions behaviour differences across implementations.. Afair, you intend to update the branch in order to send your patchset. Please, refer a specific commit or create separate branch with the commit where the issue can be reproduced. BTW, is the segfault appears each time?. Please, check ulimit -n.. Please, post require('tarantool').version and reproducer (lua code).. @kostja says it should be INT, so it seems we'll going with the first way.. Note re ODBC:\n\nThe C Data Types part of ODBC standard explicitly states that\nSQLINTEGER is defined as long int and SQLUINTEGER is defined as\nunsigned long int. How to expose our INTEGER (-2^63..2^64-1) SQL\ntype?\n\nAFAIR, there is also a document around JDBC that provide some recommendations for mapping SQL types to Java ones that recommends to map INTEGER into long or int (don't sure), but it seems it is not mandatory. (TBD: find the document.)\nHowever ODBC wording looks as requirement rather then recommendation. There is the sense here: we have native BigInteger in Java, but have no a native (and standard) type in C broader then int64_t / uint64_t.. There are two tracks, both are important. The first one is integrate ANSI SQL facilities into Tarantool (ANSI SQL types in this context). The second one is provide native Tarantool facilities via SQL (native Tarantool types in this context). #3812 is about the first track, but this issue is about the second one.\nANSI SQL is more important when some kind of interability with external tools or applicaitons is needed. Integration with Tarantool is important to provide user possibilities to expand existing application using SQL.\nBTW, are not that is about DD integration?. Note: FLOAT and DOUBLE is expected to be float64, REAL is expected to be float32.\nhttps://docs.oracle.com/javase/1.5.0/docs/guide/jdbc/getstart/mapping.html. Yep, all numbers in Lua are doubles, but Tarantool has some kind of workaround for lua land: LL and ULL suffixes to store a number as cdata or cdata. Anyway, it is out of scope, IMHO.. @Korablev77 So you propose to parse the literal to numeric/decimal w/o any precision loss and then raise an error only when converting to double/int?\nConsider also current behaviour when parsing integer values:\n```\ntarantool> SELECT 9223372036854775808\n\n\nerror: 'oversized integer: 9223372036854775808'\n...\n```. So, floating-point literals are numeric with any length and any precision, but integral literals are int32 and the reason is 'Integer features quite different nature' means 'no reason'. Cannot get your logic here.\n\n\nFunny thing: if you call it 'loss', then even '0.1' is not valid value, since it hasn't precise binary representation: 0.1 is really 0.100000001490116119384765625 according to IEEE 754 and error due to conversion is 1.490116119384765625E-9.\n\nIt is loss, so I call it loss. I don't say anywhere that 0.1 is valid. Implicit cast it to double should produce an error, IMHO.. > But not any precision - it is not possible I guess, there should be limit.\nSo parsing a number beyond this limit should give an error, I think.\n\nLoss of double is expected behaviour\u2026\n\nIt is (when a value casted to / specified as double). Loss of precision of a numeric literal is not somewhat expected, I guess.\n\ninteger literals are of type int64\n\nInt64 is not enough to represent uint64 range, which is part of our built-in 'integer' space format type (it is uint64 + int64). Now you cannot update an integer field in a space to a value in the [2^63; 2^64] range, but able from Lua.\n\nThey should both be numeric when we introduce that type.\n\nSure. And I don't see any differences in behaviour integral and fp types should have against precision loss. But now they have.. Tarantool uses cooperative multitasking and primitive named fiber. It is quite similiar to greenlets in Python. fiber_cond and fiber_channel can be used to syncronized communications. Please, refer the documentation. We also have queue module to persist tasks in the datadase and proceed with them from multiple worker fibers.\nFeel free to ask any questions in our Telegram channels in English or [in Russian][4].\n[4]: https://t.me/tarantoolru. It seems lsn in sequencial within records with the same replica_id, but it is not when the replica_ids are different. Maybe we should allow --from and --to only with --replica_id or smth like, the output would be confusing otherwise.. I guess it is an instance that was started from default example.lua, see extra/dist/example.lua in the repo.. On Debug Tarantool:\ntarantool> debug.getinfo(1, '>S')\ntarantool: lj_debug.c:432: lj_debug_getinfo: Assertion `(((func)->it) == (~8u))' failed.\nAborted. > In tarantool it doesn't stop at that: if you do box.space.foo:select(), then de-serialize the result from yaml back to tuple, and then try to box.space.foo:put() the result back, you may get an error if your tuple is sparse enough to not be an array.\nI think it should work with sparse arrays (with nils) too and it is another issue.. It seems we should use tagged value for box.NULL in yaml output.. Maybe replacing grep_log with wait_log will help with the latter error.. Fixed in https://github.com/tarantool/luajit/commit/d92380ffa50098bc0a1eec3d1c0b6cd404591fcf and propagated into tarantool in be0506db66976ab85cdc05d497a19a8d4e39d2ac (2.1) and e5e259a82f8ef771818b97f5f8ca8ab601e9e2c4 (1.10).. Kostya says that the following tests timed out too:\n\nsort.test.lua;\nreplication/ddl.test on vinyl;\ngh-3083-ephemeral-unref-tuples;\ngh-3332-tuple-format-leak.. Way to exclude: explicitly list them in suite.cfg with one engine.. We have Debug, RelWithDebInfo, RelWithDebInfoWError now. I think we need a proof that Release build target can increase coverage.. Raw thoughts: Packages built with RelWithDebInfo, so maybe target name Release is confusing and maybe we should name it in some other way.. I think we should consult with @kostja, because only he knows the history.. It is already enabled in third_party/libev/ev.c.\n\n```c\n/ OS X, in its infinite idiocy, actually HARDCODES\n * a limit of 1024 into their select. Where people have brains,\n * OS X engineers apparently have a vacuum. Or maybe they were\n * ordered to have a vacuum, or they do anything for money.\n * This might help. Or not.\n /\ndefine _DARWIN_UNLIMITED_SELECT 1\n``. The output looks similar to #3855. Cast @locker.. Ouch, the title confuses me. It was about box/backup.test.lua too. Sure, dupe of #3855.. Any reproducer (script)? Are that reproduced on 1.10.2-80-g0b6e25f46 (it fixes 32B/req memleak in the built-in http_client)?. Dupe of #2058..parts` is an array, so one more nesting level is needed:\nspace:create_index('primary', {unique = true, parts = {{1, 'unsigned'}}})\nspace:create_index('optional', {unique = false, parts = {{2, 'string',  is_nullable = true}}}). There was the memory fragmentation issue in luajit (see 1 and 2), but it was fixed a long time ago. So it is not the case.\nI tested for the lua memory difference with RSS of the process and it is always aroud 20 MiB (at start as well as after 3.5 hours of string.rep's). It is so as when you call collectgarbage() periodically as well as when you don't. The script is attached (it is messy, just to test the case).\nSo there are no memory leaks (memory that luajit does not count, but RSS does) for the case above.\nThere are two problem we can consider about:\n\nWithout explicit collectgarbage() call the amount of taken lua memory increases more and more.\nWhen the limit of available lua memory is reached (2 GiB AFAIR), tarantool says 'not enough memory' and can stop processing incoming requests instead of aggressively collect garbage.\n\nThe first one is not trackerized AFAIK. The second one is pointed by #843 (#562 also seems to be related). I think we should clarify the problem(s) we want to fix and file clear issues/tasks. This is subject to discussion btw team leaders, I think.\nSo I cast @kostja, @kyukhin and @knazarov here.\ngh-3890-leak.zip\n2: https://github.com/LuaJIT/LuaJIT/commit/d61e9e5d895fcf9443bd02a7a8dedcd41dd700a6. Related: #1207.. Now the test-run commit is really come into tarantool repository (2.1 and 1.10 branches) and the problem should be fixed.. I met the same problem when implementing cursors for chunked data transfer for tarantool/graphql. Pagination/cursors on the secondary non-unique indexes can be implemented (using count parameter), but it is surprisingly tricky (and so error-prone) when trying to cover all cases (to be honest, I shy to share my current code for that and ask to believe me). Moreover, using count is not optimal.\nSo I strongly vote to implement this!\nWhen I first think about that I imagine that the API can allow to add primary key parts at and of the secondary key ones or the API where they are provided via different parameters (like Konstantin writes above). I don't think it is matter. Maybe separate params are more safe in case of alter / migration.. On avro side (numbers from make benchmark):\n0.184478 M RPS unflatten(lua t)\n0.389317 M RPS unflatten(mp)\nHere we don't count economy from avoid decoding before call to unflatten.\nUpdate: unflatten_msgpack receives and returns msgpack, so the comparison is not fair: we also need to decode resulting msgpack. Below I measured unflatten (not unflatten_msgpack) function: it also can receive a string with raw msgpack, but returns a lua table result.. Measured on graphql workloads, found stable gains (~10% for 100 unflattens per request on a local tarantool instance).\nCommit: https://github.com/tarantool/graphql/commit/ae3e7dd0886a7c50d44328af7857bb3401fc470f\nResults: https://gist.github.com/Totktonada/d7d894cd260070dc1388ee0d432b843a. Now I think it is due to attempts count at the end of test: see the discussion. But I don't sure we should increase it.\n1: https://www.freelists.org/post/tarantool-patches/PATCH-test-fix-flaky-fails-of-boxiproto-stress,2. Note: don't forget about 'struct foo &' types (need to 'dereference' it).. sh\n$ objdump -T /usr/lib/libprofiler.so | grep _ZN11ProfileData10FlushTableEv\n0000000000008730 g    DF .text  000000000000007d  Base        _ZN11ProfileData10FlushTableEv\nIt is in the google-perftools library. Try to comment require('gperftools') and all its usages.\nMaybe we should move this issue to  tarantool/gperftools.. The commit https://github.com/tarantool/luajit/commit/d92380ffa50098bc0a1eec3d1c0b6cd404591fcf (propagated into tarantool in be0506db66976ab85cdc05d497a19a8d4e39d2ac (2.1) and e5e259a82f8ef771818b97f5f8ca8ab601e9e2c4 (1.10)) states that it fixes this problem, however it looks as a gperftools problem. Don't sure. Maybe the bug in LuaJIT really causes this segfault. I'll open an issue in gperftools repo and close this one.. AFAIK, -DLUAJIT_ENABLE_GC64 is experimental LuaJIT feature and should not be considered as production ready.. The msgpack module accepts only char *, so it seems it is worth to restrict msgpackffi input to char * too and return only char *.. @TarantoolBot document is verbatim text. Kinda that:\n@TarantoolBot document\nTitle: 'interface' http.client option\nIt allows to set a network interface for an outgoing\nconnection using the interface name or IP address.\nSee https://curl.haxx.se/libcurl/c/CURLOPT_INTERFACE.html. @kyukhin Please, proceed.. #3518 was not cherry-picked to 1.10 despite milestones.. It also worth to handle the case when we connect to a quite old tarantool w/o _collation system space at all. It should not lead to an error, but parts should be shown w/o 'collation' field instead.. If the key_def module created in the scope of #3276 will land before this patch it is necessary to remove collation_id parameter support in the module.. Whether setting of keepalive_idle and keepalive_interval helps?\nIt automatically sets TCP options and adds Connection: Keep-Alive and Keep-Alive: timeout=<keepalive_idle> headers (and removes Connection: close one): https://github.com/tarantool/tarantool/blob/f583b6c82749262199ef8fd2b7616f2bb0adcd7e/src/httpc.c#L210-L235. Try to increase the max_connections option (default is 5): https://curl.haxx.se/libcurl/c/CURLMOPT_MAXCONNECTS.html. @akudiyar Is there any success with investigation of this case?. The test cases are reproducible. It really looks as a problem. AFAIK @akudiyar working around non-blocking / asyncronous (don't sure about terms) http client and will likely find a root of this problem. I think it would be good to track progress here.. I don't mind to forward to Lua any libcurl option that would be useful for the http client users.\nIn the scope of this issue we're waiting for results from Alexey.. You referred to Lua 5.0 manual. Using arg in vararg functions was deprecated in Lua 5.1 and was removed in Lua 5.2. LuaJIT and then Tarantool does not support it.\nHowever Tarantool sets _G.arg to table of command line arguments, that is why you got arg as a table and arg.n as a nil.\nUse select('#', ...) and select(N, ...) to count and get such arguments. Consider that there are some problems with nil arguments. I suggest to read the wiki page on the topic.\n2: http://lua-users.org/wiki/VarargTheSecondClassCitizen. I think two things should be done here:\n\nIncrease the maximum header size to 8 KiB.\nRaise an error if a header exceeds this size.. I don't mean that there is user-controllable limit. It is due to TT_STATIC_BUF_LEN, which is used via tt_vsprintf() in httpc_set_header().. Of course. My phrase was just the idea of changes we should do as I think. Nothing about the code.. Please, don't mix different changes into one PR. Send the another one.. > I should split one commit on two? One for fix httpc_set_header and second for rise error?\n\nI don't think so.\n\nI see. It put to other request. Revert it\n\nYep. File a separate PR.. Force-pushed fixes. @locker, can you look, please?. @sergw Any details?. It is likely due to fiber stack size limit. See similar reports: #3569, #3418.. @Korablev77 Thank you for the clarification. I'm okay.. Whether you look at RSS of tarantool or tarantool-c?. Like so:\nsh\nwhile true; do ps aux | grep '[R]SS\\|[t]arantool'; sleep 1; done\nBut it would be better if you'll provide a full test case.. It seems that the search pays attention to word boundaries, because this way the issue was found.. Is this stable in reproducing? If so does increase of the fiber stack size helps? Maybe this is the same as #3569, #3418, #3973.. I think it is due to feedback daemon and does not depend of a workload. It is configurable via box.cfg.feedback_* options.. See #3650 re BLOBs.. Not blocked anymore.. For the record: Triggered rebuild of packpack/packpack:fedora-29 image, because libcurl packages were updated since the last build (3 months ago) and the libcurl version in image's metadata (7.61.1-6) is not more available on Fedora mirrors. Should be built soon.. ```\nTarantool 2.1.1-410-g0c7a3e396\ntype 'help' for interactive help\ntarantool> digest = require('digest')\n\n...\ntarantool> digest.sha('')\n\n\nerror: 'builtin/digest.lua:251: Digest method \"sha\" is not supported'\n...\ntarantool> digest.sha_hex('')\n\n\n\nerror: 'builtin/digest.lua:257: Digest method \"sha\" is not supported'\n...\n```\n\nHowever digest.sha and digest.sha_hex functions are present (see below), so I'll prepare a patch to remove them.\n```\ntarantool> digest = require('digest')\n\n...\ntarantool> digest.sha\n\n\n'function: 0x41e37d90'\n...\ntarantool> digest.sha_hex\n\n\n\n'function: 0x41e37df8'\n...\n```. Let's continue in the mail thread.\n\n1: https://www.freelists.org/post/tarantool-patches/test-switched-on-pretest-clean-routine. It is from cluacov: https://github.com/mpeterv/cluacov/blob/ca8e019e1f61b7f3f2c2d37f2728a741dc167cc5/src/cluacov/deepactivelines.c#L91. Maybe #include <netinet/in.h> is forgotten, see 311e8fce90011fd7aad930c02b79804d2d6050f7.. Maybe also worth to revert changes that are needed to require luarocks at tarantool initialization to simplify this and future updates. AFAIR, this ability was planned to be used with luazip to install bundled rocks, but we decided to proceed in another way (#3641).\n1: https://github.com/tarantool/luarocks/pull/2. BTW, libcurl aware of environment variables afair. Just note.\nSee, there are conflicting files.. Don't leave two blank lines, just one.. I would set '${module}_lua' as default value for '${symbolname}' to avoid\nextra changes.. Double whitespaces.. I think a file that is needed during tarantool build should not be placed in extra/. I think ideally it should be part of our lua-zlib distribution.. Nit: period should be at the end, comments should be restricted to 66 symbols.. It does not matter whether the build is static or dynamic, but the layout matters. Maybe we should choose some other wording to refer local/self-packaged/portable layout.. For what?. I have built and successfully run tarantool 2.1.0-56-g0cccd5bde on FreeBSD 11.2 without this modification. Why this is needed?\nI found that that was added in 16a636f29b98a986da902cbf81b8ca9cf3fa1214 and that moved to its own FindICONV.cmake file in dcac64afd2b71ff720153e141283f2ceffcff546. It seems that the purpose was to find libiconv.so in /usr/local (but don't sure).. I asked from @kbelyavs and he answers this is no-op on Linux, because Linux has iconv_* functions in libc. But I see the same on FreeBSD 11.2. Maybe FreeBSD 10 differs, I will check.. FreeBSD 10.4 contains iconv functions in libc too.. We need to elaborate what are the incompatibilities that was stated in 16a636f29b98a986da902cbf81b8ca9cf3fa1214 and decide finally. Filed #3791 to discuss it further. Please, participate if you have some details about the problems with base iconv or any other details. I don't use FreeBSD personally, so can miss primer approaches.. BTW, checked 12.0-BETA-3: built and run tarantool from source successfully.. Nit: package.path ends with ;, so you'll add ;; in the middle (at least on my system). Should be package.path = package.path .. path .. ';' I think.. The same here.. 1. Why using two names for the same function? I think it should be package.foo = foo.\n2. Why setpath? At least it adds (not replaces) search paths. I would name it add_rel_searchpath or kinda.. Why packagepath.lua? Don't understand naming.. General comments about your approach.\n\nIt is good crutch, but it is crutch. Loader functions are in src/lua/init.lua and its behaviour should be changed here.\nFinding rocks not via traverse_rocks(), but via the default loader (w/o actual upward traversal) make visible behaviour different for cwd-relative and script-relative loaders.\n.so paths adding on Mac OS is not performed for our cwd-relative loaders, so should not be performed here. At least it is another problem and if it is exists is should be fixed consistently (our of the scope of this PR).\nWe cannot set parent directory as base for loaders. It is useful for, say, test/ subdirectory of projects to ensure it'll use in-repo package sources even if they are installed in the system.\nTo more on above: there are no toogle to choose whether cwd or scriptdir should have precedence. Cases could be different, so general approach shouldn't use one of these ways as the single one.\n\nTo sum up: I think you should either:\n\nAdd options (and corresponding setters/getters) to src/lua/init.lua which control how loaders work. I think it worth to allow to set base directory or base directories. We can add helper to determine a script dir, but I guess it is more approprite in fio. Base directories (when there are many of them) will set predecense, so no additional flags are needed. Neat.\nOr add a function, which will add loaders with another base dir, but here we'll meet predecence problems (where to add: begin of end?), so I don't like much this way.\n\nSo I'll push you to implement it in general and flexible way, not only to support 'portable layout'.. I think it is better to provide explicit value (8192) here. You can define it at the top of the file and use here.. vsnprintf() will return a number more then 8191 (because doesn't count '\\0') if the output was truncated. It worth to check it here and set a diag (diag_set(IllegalParams, <\u2026>)) in the case and return -1.. This check can be removed if you'll check a vsnprintf() return value above.. ",
    "jonywtf": "i need the feature too...\nPlease implement it!\n. ",
    "R-omk": "Also feature:\n```lua\nhandler1 = function()\n -- some\nend\nhandler2 = function()\n -- some\nend\nbox.begin()\n  box.begin()\n    box.on_commit(handler1)\n  box.commit()\n  box.on_commit(handler2)\nbox.commit()\n--  invoke handler1 and handler2\n```\non_commit invokes all handlers after zero level of nested transaction has been committed. Also do not save empty string (press enter key) into history. ",
    "farwayer": "One more problem is before_replace/on_replace executes in transaction context. So It is not possible to create space inside handler :disappointed: . ",
    "ilejn": "Cap file of the interaction (sorry, it is not the same sessions as for stacktrace) https://dl.dropboxusercontent.com/u/18362882/tara.cap\nThe issue is reproducibe if DB is initially empty.\nIn the beginning of the session we retrieve all spaces from 280.\nbox.cfg{listen=3301}\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\nif not box.space.pref then\n     box.schema.create_space('pref')\n     box.space.pref:create_index('primary', {type = 'tree', parts = {1, 'NUM'}})\nend\n. Thanks a lot. \nI'll check it more carefully a bit later, but it seems that the issue does not exist in 1.6.3-566-g5d69281\n. Hello, I am sorry, I am slightly distracted these days and have no time to test it properly, but lets assume that everything is fine (which is likely).\nAnd many thanks for correcting my markup and for supersonic response, of course.\n. ",
    "sklochkov": "+1 on that. If the new version of tarantool will lack memcache compatibility, we'll have to move avay from tarantool. \n. There are various alternatives that support memcached interface, from memcachedb to Oracle Coherence.\n. ",
    "init": "Reasons:\n- memcache is more widespread protocol comparing with iproto (1.5) and messagepack (1.6)\n- tarantool in memcached mode is more CPU and memory effective comparing to original memcached\n- memcached with persistance is very popular usage pattern\n. ",
    "khmelevskii": "tarantool test.lua\ntarantool: builtin/console.lua:271: console.connect() need existing console\n. ",
    "Khatskevich": "I propose to reopen this ticket because it is not only \"nice\" thing, but it also increases speed.\nWe do not want to compare each tuple with the key while iterating over the range. Particularly, we have unicode collations and this comparison can be expensive.. why not - for delete?. That was taken from ISO ANSI WG3:HBA-003 H2-2003-305 August, 2003 :\n```\n ::= \n ::=| | \n ::= \n ::=  [ ... ]\n ::=| \n ::= !! See the Syntax Rules\n ::= !! See the Syntax Rules\n ::=   \n ::= ...\n ::=| \n ::=U  \n ::= [ UESCAPE  ]\n ::= ...\n ::=| \n ::=| | \n ::= \n ::=\n ::= \n ::= !! See the Syntax Rules\n ::= !! See the Syntax Rules\n ::= \"\" !! two consecutive double quote characters\n5.2 SYNTAX RULES\n1) An  is any character in the Unicode General Category classes \u201cLu\u201d, \u201cLl\u201d, \u201cLt\u201d, \u201cLm\u201d,\n\u201cLo\u201d, or \u201cNl\u201d.\n2) An  is U+00B7, \u201cMiddle Dot\u201d, or any character in the Unicode General Category classes \u201cMn\u201d, \u201cMc\u201d, \u201cNd\u201d, \u201cPc\u201d, or \u201cCf\u201d.\n3)  is any consecutive sequence of characters each of which satisfies the definition of whitespace found in Subclause 3.1.6, \u201cDefinitions provided in Part 2\u201d.\n6) A  is any character of the source language character set other than a .\n12) In a , the number of s shall be less than 128.\n13) The  of a  shall not comprise more than 128 s.\n23) simplified for the reader: case-normal = upper case\n24) The case-normal form of the  of a  is used for purposes such as and including determination of identifier equivalence, representation in the Definition and Information Schemas, and representation in diagnostics areas.\n26) Two s are equivalent if the case-normal forms of their s, considered as the repetition of a  that specifies a  of\nSQL_IDENTIFIER and an implementation-defined collation IDC that is sensitive to case, compare equally according to the comparison rules in Subclause 8.2, \u201c\u201d.\n27) A  and a  are equivalent if the case-normal form of the  of the  and the  of the  (with\nall occurrences of  replaced by  and all occurrences of \nreplaced by ), considered as the repetition of a  that specifies a\n of SQL_IDENTIFIER and IDC, compare equally according to the comparison rules in Subclause 8.2, \u201c\u201d.\n```\nSo, as you can see, the standard says: that there are 3 types of identifiers:\n1) regular identifier (eg table1, \u0442\u0430\u0431\u043b\u0438\u0446\u04301)\n2) delimited identifier (eg \"table1\", \"table 1\", \"\u0442\u0430\u0431\u043b\u0438\u0446\u0430 1\", \"1table\", \"table\"\"1\" -> table\"1)\n3) Unicode delimited identifier (eg U&\"\\FF83\\FF70\\FF8C\u2028\\FF9E\\FF99\") not supported by sqlite\nSqlite identifiers:\n1) as in standard\n2) as in sdandard + two delimiters : ' , [ ] which allow eg 'table''1' -> table'1\n3) not supported\nTarantool identifiers:\n1) as in standard\n2) as in sdandard + two delimiters : ' , [ ] , but only letters(not only ascii), digits, underscore allowed inside\n3) not supported\nWhat are suggestions?. in sqlite parse.c the following constructions are declared as identifiers:\n1. pragma smth=identifier\n2. RAISE(ABORT, identifier);\nbut accordint to standard, identifiers should be delimited by \", which makes us use eg\n1. pragma characterset=\"utf-8\"\n2. RAISE(ABORT, \"some error\");\nBut I think that in those cases we are dealing not with identifiers, but with strings, and correct syntax is:\n1. pragma characterset='utf-8'\n2. RAISE(ABORT, 'some error');\nIf nobody answers me soon, I go to the ANSI ISO again\nUpdate\nI have not found any information on it in ANSI ISO 2003, so I suppose this statements should not be treated as identifiers. I have made some refactoring on Kirills comment:\nIdentifier validation as in tarantool:\nIdentifiers in tarantool allow only [a-Z0-9_], SQL identifiers should follow the same rules so that identifiers can be easily used from Lua.\nHere are some points that should be considered:\n- [x] table names as in tarantool\n- [x] index names as in tarantool\n- [ ] ? column names as in tarantool (it do not work in tarantool itself #2914) I suppose this point could be solved automatically after SQL starts using formats.\n- [ ] ? virtual tables. Should its names have the same constraints? Cause it is not accessible from tarantool.\n- [ ] ? collation names, aliases, and other identifiers. Should they also follow these rules?\nChousen solution\n\nValidate every identifier with the same function in Tarantool and in SQL\nUse sql standard rules for validation (see #2123  for more info)\n\nExtra issues:\n\n[x] All delimited identifiers are specified using symbol (\")\n[x] All string literals are specified using symbol (')\n[x] Any other quotation is prohibited\n[x] +- true Rules for all identifiers are the same. (not implemented at least for collations and col names)\n[x] All keywords mentioned in Chapter 5.2 (\" and \") cannot\nbe used as identifiers, both delimited and regular\n[ ] Maximal length of identifier is limited to 64KB (what for? check needed)\n[ ] Support UESCAPE, with lower priority though\n\nSome clarification needed:\n\n[ ] We will allow using UTF-8 identifiers: only delimited (I see only\nin the standard). Comparison of\nsuch identifiers will be done using libICU facilities\nWhy should they be delimited? \nFor now, they should not be delimited. For now, the uppercase function is not applied for non-ASCII.\nIf as you say we allow use non-ASCII only delimited, then they should be compared case-sensitive and ICU is not necessary (only for a limited number of cases, but should we sacrifice performance for it?). it would be easy to do something like this\nselect lua('box.cfg.wal_mode');\nselect lua('2 + 2');\nHowever, it CONTRADICTS with static types.\n@kyukhin  . I believe we should add at least one extra indexing method first (#2997) :). In my opinion, ability to call any global function is redundant.\nI suppose that it is easy enough to register function you want to call with box.internal.sql_create_function.\nAm I wrong?. After resolving #1557 a5ce84855a5936578a258e7f45674b7e04678051 should close this issue.. The real problem in this snippet is that  8.1.3 test uses i1 which should be deleted at this point.\nBut this approves that everything is ok:\n```\ncat my_test1.lua \n\nbox.cfg{}\njson = require(\"json\")\nbox.sql.execute(\"CREATE TABLE t2(idt2 primary key, a INT, b INT, ex CHAR(100));\")\nbox.sql.execute(\"CREATE INDEX i1 ON t2(a);\")\nr = box.sql.execute(\"explain query plan SELECT count() FROM t2\")\nprint(json.encode(r))\nbox.sql.execute(\"DROP INDEX i1\")\nbox.sql.execute(\"DROP TABLE t2\")\nbox.sql.execute(\"CREATE TABLE t2(id primary key, a, b, c);\")   \nr = box.sql.execute(\"explain query plan SELECT count() FROM t2\")\nprint(json.encode(r))\nbox.sql.execute(\"DROP TABLE t2\")\n\n./tarantool my_test1.lua\n[[0,0,0,\"SCAN TABLE t2\"]]\n[[0,0,0,\"SCAN TABLE t2\"]]\n. fixed in 2420040b1787b55dddebd52f58567f358d007b9b. blocked by #1557. commit 48a75cba738d999bddf795c450b4623bfb4602ab fixed explicit insertions to secondary indexes (tarantool do it while value inserted into pk), but sqlite still uses opcodes \"MakeRecord\" and \"NoConflict\" to check constrains of secondary indexes on each insert.\nTo delete this opcodes we should delete pk from secondary indexes first() #2255. Just tested, It works (possibly after stable iterators fix). It looked strange that unicode's order of special characters is different from ascii, so I have conducted a small research. There are weights of some special characters according to unicode standard.\n  0020  ; [0209.0020.0002] # SPACE\n: 003A  ; [023A.0020.0002] # COLON\n! 0021  ; [0261.0020.0002] # EXCLAMATION MARK\n) 0029  ; [0319.0020.0002] # RIGHT PARENTHESIS\n[ 005B  ; [031A.0020.0002] # LEFT SQUARE BRACKET\n} 007D  ; [031D.0020.0002] # RIGHT CURLY BRACKET\n@ 0040  ; [038F.0020.0002] # COMMERCIAL AT\n/ 002F  ; [0395.0020.0002] # SOLIDUS\n` 0060  ; [0498.0020.0002] # GRAVE ACCENT\n< 003C  ; [0630.0020.0002] # LESS-THAN SIGN\n```\nIt proves that everything is allright. See collations.test.lua for more information.. It is not obvious how to set locale for UPPER/LOWER and other functions\nHere is some info on this issue from 2003 standard:\nSyntax\n```\n ::= ||\n ::= COLLATE \n ::=| \n ::=   \n ::=\n   | | | \n   | | | | \n   | | | | \n   | | | | \n   | | | \n ::=| \n ::=| \n ::=   \n ::=  [  ]\n ::=| \n ::=  | \n ::=  |  \n    | | | | \n    | | | \n ::= { UPPER | LOWER }   \n```\nGeneral Rules\nIf <fold> is specified, then:\n\nLet S be the value of the .\nIf S is the null value, then the result of the  is the null value.\nLet FRML be the length or maximum length in characters of the declared type of .\nCase:\nIf UPPER is specified, then let FR be a copy of S in which every lower case character that has\na corresponding upper case character or characters in the character set of S and every title case\ncharacter that has a corresponding upper case character or characters in the character set of S is\nreplaced by that upper case character or characters.\nIf LOWER is specified, then let FR be a copy of S in which every upper case character that has\na corresponding lower case character or characters in the character set of S and every title case\ncharacter that has a corresponding lower case character or characters in the character set of S is\nreplaced by that lower case character or characters.\n\n\nIf the character set of  is UTF8, UTF16, or UTF32, then FR is replaced by\nCase:\nIf the  S IS NORMALIZED evaluated to True, then NORMALIZE (FR)\nOtherwise, FR.\n\n\nLet FRL be the length in characters of FR.\nCase:\nIf FRL is less than or equal to FRML, then the result of the  is FR. If the declared type of\nFR is fixed-length character string, then the result is padded on the right with (FRML \u2013 FRL)\ns.\nIf FRL is greater than FRML, then the result of the  is the first FRML characters of FR\nwith length FRML. If any of the right-most (FRL \u2013 FRML) characters of FR are not \ncharacters, then a completion condition is raised: warning \u2014 string data, right truncation.\n\n\n\nIt can be inferred from here that the only way to pass locale to UPPER/LOWER functions is to get it from expression.\nIt has 2 problems:\n1. It is hard to implement\n2. It require additional colculations in case of JIT, because collation can not be inferred at compile time (due to functions. case when clauses...)\n. #### Two approaches to implement upper/lower:\n\nUPPER( string, locale_name) (e.g. UPPER('hello', 'ru_RU'))\nUPPER(string, collation_name_in_tarantool) (e.g. UPPER('hello', \"unicode_ci\"))\n\nFirst solution\nDisadvantages:\n- The locale name is not checked by icu. In case of invalid locale - the default locale is chosen silently.\nSecond solution\nDisadvantages:\n- We can not get UCaseMap object from our struct coll, so to create UCaseMap we need to:\n  - query tuple from _collation space by name\n  - create UCaseMap based on fetched locale\n- Create collation is not a public API, so it would require some patience to do UPPER with locale which is not in our _collation space\n- The locale name is not checked by icu when creating collation too\nWhich locale to use if it is not set\nThere is a case: UPPER(\"hello\")\nWhich locale to use?:\n- binary (default in sqlite, do upper only for ASCII) (Kirill for it)\n- unicode (default icu) (Kostya for it)\n. Ok.\nWe finally decide to support only\nUPPER(str)\nwithout additional arguments to work always in the default locale.. blocked by #2741. I have created a new issue for concurrent ddls: #2793\nFor simple queries (dml), concurrent executions work pretty fine.. The thing is that box api (box.cc) which is currently in use by sqlite engine takes msgpack as an argument.\nIf Op_MakeRecord produces tuple, the box.cc takes only msgpack part of this tuple and will create a new tuple and copy all data to it. At this point, we have already copied the data at least three times (to sqlite registers, to create msgpack and to create tuple).\nAt the same time, tuples we can create by now (of default type) do not give us any advantages over msgpacks, because it does not store offsets to the fields.\nAll these points convinced us to create an intermediate layer for direct tuple insertions in box api.. ## We discussed this topic once again.\nThere were two reasons to replace msgpack with tuples:\n1. to retrieve fields in O(1) time, because tuples are indexed (now O(n))\n2. to copy data as less as possible\nAbout the reason 1.:\nWe decided to store in Mem struct retrieved by select from tarantool not only msgpack but optional tuple too. When we need to retrieve a column from this Mem we try to use tuple first.\nAbout the reason 2.:\nIt is a little bit bad to insert tuples to memtx, because memtx know which tuple format it needs to store and creates it from msgpack as it should be.\nIn case of vinyl, the copying cannot be eliminated because it has more complex tuple format.\nResults:\n\nto not replace msgpacks with tuples\nto add optional tuple to the data structure which is the result of select from tarantool engine to improve indexing (Op_Column) speed\nthe ticket renamed to hold optional tuple next to the msgpack (op_column -> O(1)). Since 2e6c945bbeeeebf1ea1d771c7915e698ab44bd87 this test is working.\nI have created a new issue for concurrent ddls: #2793. There was an idea to just generate salt on each startup and not store it in image.\n\nA side effect of this is that if pk is hash index, it changes sequence of tuples in memory. (so it is different from  order in snapshot file)\nI performed a simple test:\n200M tules of 15b size each.\nAvg. startup time with the same salt: 133s\nAvg. startup time with different salt: 188s\n. I think that b01baad373fa3bcbbf12c7ba3d350c3b7e8f617a is the best solution, because current implementation has several disadvantages:\n1. It silently rollbacks, while we expect at least an error (see #2528)\n2. It cancels transaction, as a side effect, and next command in sql which is COMMIT fails due to an absence of transactions (while failed statement must not cancel transaction).. we still have app-tap/minimal.test.lua not working on this version of test-run. The reason is that whereLoopAddBtree function estimates nOut wrong. In this particular case, we cat estimate nOut using statistics, but it is hard to implement for a general case.\nPlanning tool tries to choose the best where loop order, however as all of them have the same cost, it just chooses the order provided by a user.\n. Actually, it is a bug in analyze, which was introduced in one of our commits.. Idea:\npossible it is because interprocedural optimisations are turned off. Main reason - different data layout.\nFor example that is why Tarantool is faster in case of random inserts.\nSome numbers can be found here. As we decided to allow any identifier (#2126), we need only to check that identifier is a printable Unicode (utf8) string.\nThere would possibly be some issues with auto-completion in Lua.. Lua autocomplete possibly do not support utf8 symbols (symbols assumed to be 1 byte). Already fixed.. Thesis:\nAbort rollbacks the whole last statement, even if it fires in some statement in the trigger. Here is how it works in sqlite3:\nsqlite>  create table t1(a primary key);\nsqlite> create table t2(a primary key);\nsqlite>  create trigger trig1 after insert on t1 begin insert or abort into t2 values(new.a); end;\nsqlite> insert into t1 values(1);\nsqlite> insert into t1 values(2);\nsqlite> select * from t1;\n1\n2\nsqlite> select * from t2;\n1\n2\nsqlite> insert into t2 vAlues(3);\nsqlite> insert into t1 values(3);\nError: UNIQUE constraint failed: t2.a\nsqlite> select * from t2;\n1\n2\n3\nsqlite> select * from t1;\n1\n2\nsqlite>. ## Implementation overview:\nWhere to store details on SQL transaction\n\nDetails on transaction should not be stored in VDBE, because single transaction may interact with many VDBEs\nDecision: Put structure sql_txn to Tarantool txn as an attribute.\nHow to name the attribute?\nWhat should the type of the attribute be? (void * or directly sql_txn?)\n\n\n\nHow to store named savepoints?\n\nSQLite's savepoints contain extra info in addition to Tarantool's ones, so it should be an additional structure with a pointer to box_txn_savepoint_t.\nHow to organize them so that it is still fast (in the case of name=Null) and searchable by name.\nglobal hash key(txn_id, name)\nlocal for txn hash on region key(name)\nlocal list on region. Blocked by #2680\n(The patches intersect heavily). Chosen solution:\n\n\nAllocate msgpacks (in Op_MakeRecord) directly on region\nAllocate msgpacks for ephemeral tables by malloc, so that it is possible to free them before box.commit?\nStop using box api (due to begin_ro_stmt -> fiber_gc). You can just do insert values(1,1,'hello') to any table and debug Op_MakeRecord.\nCompare values of nByte and pOut->n.. I do not really need it, but it can be useful in some situations.\nI have tested it under lua5.1 -> the same result as with lua5.2 (supports this feature).. The reason was simple: strict mode by default in tarantool builded in debug mode.\nThanks to @rosik . The case with '\u0130' is solved by just converting to the lower case instead of upper case (even in default locale).\nThere is a problem with German 'SS', but I believe it is context dependent and too expensive to implement by now.\nThe only problem I leave for this ticket is locations for upper/lower.. Right you are. The last error is returned. But for now it is not ok for 2 reasons:\nIf an error occurred previously in Tarantool - then you will get wrong error message (about the last problem)\nIf there were no errors before - you get a segfault.\n\nI do not think that I should spend time for snippets which lead to the segfault, because it is easier just to fix the bug, then create those test cases.\nAs an example: here is what I had to fix to continue work on another ticket:  https://github.com/tarantool/tarantool/commit/354e7e4d348b274f1d3dbc8b5eded24c7f167c72. here is main perf research page\nhttps://github.com/tarantool/tarantool/wiki/performance-research-(SQL)\nHere you can find LTO research status. https://github.com/tarantool/tarantool/wiki/performance-research new link. Some extra cases should be considered\nA table which would be used for examples\nCREATE TABLE t4a(a TEXT, b TEXT COLLATE \"unicode_ci\", c PRIMARY KEY);\nINSERT INTO t4a VALUES('ABC','abc',1);\n1. Expressions\nSELECT c FROM t4a WHERE b || \"END\"=a;\n2. String constants\nSELECT c FROM t4a WHERE b = \"constant\";\n3. Type deviations (possibly should be banned\nSELECT 1 = \"1\" collate whatever;\nThere are two approaches to implement is.\n1. Once we have static types we can do it in compile time.\n2. We can make collation a part of the type and make any Mem object store it and check it in exec time.\n@GeorgyKirichenko do you have thoughts on it?. Is it really true, that it is hard to guess whether you are inserting to ephemeral space or not at compile time?\nI insist that if the final solution, for now, is 3, then the new high priority issue is created for further investigations. (Because we are dealing with the most frequent opcode). 1. We do not have 1.7.6-stable branch in gh repository\n2. This feature is not available in 1.7\n3. This snippet works on 1.9 and higher\nPosibble solutions:\n1. Backport to 1.7\n2. Fix the docs. Docs are fixed.. Should this iterator walk only over a continuous range of tuples? Or skip unsuitable tuples?\nE.g imagine data:\n1. [1, 2]\n2. [1, 3]\n3. [2, 1]\n4. [2, 2]\n5. [2, 3]\nWhat should the iterators return?:\n1. [GE=1, EQ=2] ([[1,2]] or [[1,2][2,2]]?)\n2. [GE=1, LE=1] ([[2,1]] or [[]]?)\n3. [GE=1, LE=2] ([[1,2]] or [[1,2],[2,2]]?)\n4. Some other (more complex) cases.. Here is a test for incorrect OP_NextIdEphemeral behavior:\nCREATE TABLE t1(a primary key);\nCREATE TABLE t2(a primary key, b);\ninsert into t1 values(12);\ninsert into t2 values(1, 5);\ninsert into t2 values(2, 2);\ninsert into t2 values(3, 2);\ninsert into t2 values(4, 2);\nselect * from ( select a from t1 limit 1), (select b from t2 limit 10);\nreturns\n```\n\n\n[12, 2]\n[12, 5]\ninstead of\n\n\n\n[12, 2]\n[12, 2]\n[12, 2]\n[12, 5]\n```. Discussed verbally with\n@kyukhin , @Korablev77 , @kostja  and decided, that the unique rowid should be encapsulated into\nvtab method of ephemeral space.. Test fails on my machine until the b2afe208d12d0e02aa6ede4e3411128e30e87b1b .\nWorks well after the patch.. I do not think that we should delete recursive triggers. Those can be useful.\nThough postgres and db2 allow those, the only restriction is recursion depth.. It is possible to turn them on at runtime. By default, they are turned off.\nThat means that second trigger frame just do nothing by default.. It was decided to just leave the rec_triggers be enabled by default.. \n",
    "filonenko-mikhail": "Implemented using decnumber library\nhttps://github.com/tarantool/ldecnumber/. Issue can be closed\nhttps://github.com/tarantool/websocket. done \nhttps://github.com/tarantool/icu-date. format_date = icu_date.formats.pattern(\"yyyy-MM-dd'T'HH:mm:ssZZZ\")\nEscape regular symbol in pattern by single quote.. d:get_millis()\n. previous discussion\nhttps://github.com/tarantool/tarantool/issues/1028. # Other test case\n```\n!/usr/bin/env tarantool\nrequire('strict').on()\nlocal http = require('http.server')\nlocal server = http.new(\"0.0.0.0\",9090)\nlocal test_el = [[\n  % if error then\n    <%= error %>\n  % end\n\n]]\nlocal function test(req)\nlocal resp = req:render({})\nresp.status = 200\nreturn resp\n\nend\nserver:route({path='/', template=test_el}, test)\nserver:start()\n```. please close due to https://tarantool.io/en/doc/1.10/dev_guide/reference_capi/tuple/#capi-tuple-box-tuple-compare. Assume we already call ffi.cdef(all tarantool headers)\n```\n-- unicode collation object\nlocal def = ffi.new('coll_def')\nffi.fill(def, ffi.sizeof('coll_def'))\nlocal unicode = ffi.C.coll_new(def)\nffi.gc(unicode, ffi.C.coll_unref)\nlocal function key_def(fields, types, options)\n    options = options or {}\n    local count = #fields\n    local cfields = ffi.new(\"uint32_t[?]\", count, fields)\n    local ctypes = ffi.new(\"uint32_t[?]\", count, types)\n    local keydef = ffi.C.box_key_def_new(cfields, ctypes, count)\n    ffi.gc(keydef, ffi.C.box_key_def_delete)\nfor partno, value in pairs(options.collations or {}) do\n    if partno >= count  then\n        error('Usage error. Collation fieldno more than count')\n    end\n    if value == 'unicode' then\n        keydef.parts[partno].coll = unicode\n    end\nend\nreturn keydef\n\nend\n``. Yeah, but it's fully unworkable prototype because of non-publiccoll coll_new(coll_def)`\nSo I just leave here pure-lua workaround.\n```lua\nlocal utf8 = require('utf8')\nlocal function eq(left, right)\n    return left == right\nend\nlocal function lt(left, right)\n    return left < right\nend\nlocal function bool_lt(left, right)\n    return (not left) and right\nend\nlocal function unicode_lt(left, right)\n    return utf8.cmp(left, right) < 0\nend\nlocal function unicode_eq(left, right)\n    return utf8.cmp(left, right) == 0\nend\nlocal function unicode_ci_lt(left, right)\n    return utf8.casecmp(left, right) < 0\nend\nlocal function unicode_ci_eq(left, right)\n    return utf8.casecmp(left, right) == 0\nend\nlocal function sort_tuples(index, primary_index, tuples, reverse)\n    for , cmpindex in ipairs({index, primary_index}) do\n        for , part in ipairs(cmpindex.parts) do\n            if part.type == 'boolean' then\n                part.lt = bool_lt\n                part.eq = eq\n            elseif part.type == 'string' then\n                if part.collation == 'unicode' then\n                    part.lt = unicode_lt\n                    part.eq = unicode_eq\n                elseif part.collation == 'unicode_ci' then\n                    part.lt = unicode_ci_lt\n                    part.eq = unicode_ci_eq\n                else\n                    part.lt = lt\n                    part.eq = eq\n                end\n            else\n                part.lt = lt\n                part.eq = eq\n            end\n        end\n    end\nlocal lessthan =\n    function (left, right)\n        for _, cmpindex in ipairs({index, primary_index})  do\n            for _, part in ipairs(cmpindex.parts) do\n\n                if part.lt(left[part.fieldno], right[part.fieldno]) then\n                    return true\n                elseif not part.eq(left[part.fieldno], right[part.fieldno]) then\n                    return false\n                end\n            end\n        end\n        return false\n    end\n\nif reverse == true then\n    local original_lessthan = lessthan\n    lessthan = function(left, right) return not original_lessthan(left, right) end\nend\n\ntable.sort(tuples, lessthan)\n\nend\n``. > Hm,box_key_def_new` is in exports, so yep it is possible. But tricky. Maybe it is better to leave compare function in merger's code when we'll include the merger into tarantool.\nSeems that merger also has no collation handling, isntit?. Yes.\nI want to ask about convenient lua API.\nAssume we have space tasks with index task_id\nI want to compare tuple with value by index task_id\n```lua\ntuple:lt_key({ID}, box.space.tasks.index.task_id.parts)\ntuple:lt(OTHER_TUPLE, box.space.tasks.index.task_id.parts)\ntuple:eq_key({ID}, box.space.tasks.index.task_id.parts)\ntuple:eq(OTHER_TUPLE, box.space.tasks.index.task_id.parts)\n```\nIndex parts is just map with options. So it will be possible to compare tuple with arbitrary index definition.\nlua\ntuple:lt_key({ID}, {{type=string collation='unicode'}}). ``\ntime tarantool repro.lua \nStarting configuration of replica 8a274925-a26d-47fc-9e1b-af88ce939412\nI am master\nTaking on replicaset master role...\n2018-10-21 10:55:39.070 [11183] main/101/repro.lua C> Tarantool 1.10.1-354-g8bf936f7d\n2018-10-21 10:55:39.071 [11183] main/101/repro.lua C> log level 5\n2018-10-21 10:55:39.071 [11183] main/101/repro.lua I> mapping 117440512 bytes for memtx tuple arena...\n2018-10-21 10:55:39.071 [11183] main/101/repro.lua I> mapping 134217728 bytes for vinyl tuple arena...\n2018-10-21 10:55:39.072 [11183] iproto/101/main I> binary: bound to 127.0.0.1:3301\n2018-10-21 10:55:39.072 [11183] main/101/repro.lua I> connecting to 1 replicas\n2018-10-21 10:55:39.073 [11183] main/105/applier/storage@127.0.0.1:3301 I> remote master is 1.10.1 at 127.0.0.1:3301\n2018-10-21 10:55:39.073 [11183] main/101/repro.lua I> connected to 1 replicas\n2018-10-21 10:55:39.073 [11183] main/101/repro.lua I> recovery start\n2018-10-21 10:55:39.073 [11183] main/101/repro.lua I> recovering from./00000000000000000037.snap'\n2018-10-21 10:55:39.075 [11183] main/101/repro.lua I> recover from ./00000000000000000037.xlog'\n2018-10-21 10:55:39.087 [11183] main/101/repro.lua I> done./00000000000000000037.xlog'\n2018-10-21 10:55:39.087 [11183] main/101/repro.lua I> recover from ./00000000000000030037.xlog'\n2018-10-21 10:55:39.087 [11183] main/101/repro.lua I> done./00000000000000030037.xlog'\n2018-10-21 10:55:39.087 [11183] main/101/repro.lua I> Building secondary indexes in space '_bucket'...\n2018-10-21 10:55:39.087 [11183] main/101/repro.lua I> Adding 30000 keys to TREE index 'status' ...\n2018-10-21 10:55:39.088 [11183] main/101/repro.lua I> Space '_bucket': done\n2018-10-21 10:55:39.098 [11183] main/101/repro.lua I> ready to accept requests\n2018-10-21 10:55:39.098 [11183] main/101/repro.lua I> synchronizing with 1 replicas\n2018-10-21 10:55:39.098 [11183] main/101/repro.lua I> replica set sync complete\n2018-10-21 10:55:39.099 [11183] main/108/checkpoint_daemon I> started\n2018-10-21 10:55:39.099 [11183] main/108/checkpoint_daemon I> scheduled the next snapshot at Sun Oct 21 12:20:49 2018\n2018-10-21 10:55:39.099 [11183] main/101/repro.lua I> Box has been configured\n2018-10-21 10:55:39.099 [11183] main/113/lua I> gc_bucket_f has been started\n2018-10-21 10:55:39.099 [11183] main/114/lua I> recovery_f has been started\n2018-10-21 10:55:39.099 [11183] main/101/repro.lua I> Took on replicaset master role\n2018-10-21 10:55:39.099 [11183] main/115/lua I> rebalancer_f has been started\n2018-10-21 10:55:39.101 [11183] main/101/repro.lua I> Starting router configuration\n2018-10-21 10:55:39.101 [11183] main/101/repro.lua I> Calling box.cfg()...\n2018-10-21 10:55:39.101 [11183] main/101/repro.lua I> {\"memtx_memory\":104857600}\n2018-10-21 10:55:39.101 [11183] main/101/repro.lua I> Box has been configured\n2018-10-21 10:55:39.104 [11183] main/116/127.0.0.1:3301 (net.box) I> connected to 127.0.0.1:3301\n2018-10-21 10:55:39.104 [11183] main/117/127.0.0.1:3301 (net.box) I> connected to 127.0.0.1:3301\n2018-10-21 10:55:39.104 [11183] main/118/lua I> failover_f has been started\n2018-10-21 10:55:39.104 [11183] main/118/lua I> New replica instance(storage@127.0.0.1:3301) for replicaset(uuid=\"cbf06940-0790-498b-948d-042b62cf3d29\", master=instance(storage@127.0.0.1:3301))\n2018-10-21 10:55:39.104 [11183] main/118/lua I> All replicas are ok\n2018-10-21 10:55:39.104 [11183] main/118/lua I> Failovering step is finished. Schedule next after 1.000000 seconds\n2018-10-21 10:55:39.104 [11183] main/119/lua I> discovery_f has been started\n2018-10-21 10:55:39.139 [11183] main/119/vshard.discovery._static_router I> Updated replicaset(uuid=\"cbf06940-0790-498b-948d-042b62cf3d29\", master=instance(storage@127.0.0.1:3301)) buckets: was 0, became 30000\n2018-10-21 10:55:39.140 [11183] main/115/vshard.rebalancer I> The cluster is balanced ok. Schedule next rebalancing after 3600.000000 seconds\n2018-10-21 10:55:40.107 [11183] main/118/vshard.failover._static_router I> All replicas are ok\n0  0x1075418e0 in print_backtrace+9\n1  0x10752d1f5 in tarantool_panic_handler+2d\n2  0x10755c1ea in lj_err_throw+60\n3  0x10755c3db in lj_err_run+196\n4  0x10755c4d0 in lj_err_lex+0\n5  0x10755c403 in err_msgv+0\n6  0x10755e103 in lj_tab_resize+276\n7  0x10755e469 in rehashtab+1be\n8  0x10755e805 in lj_tab_newkey+129\n9  0x107595214 in lj_cdata_setfin+4a\n2018-10-21 10:57:55.412 [11183] main/132/main C> builtin/box/schema.lua:0: table overflow\n2018-10-21 10:57:55.412 [11183] main/132/main C> #2 (null) (), ...enko/work/.rocks/share/tarantool/vshard/storage/init.lua:847\n2018-10-21 10:57:55.412 [11183] main/132/main C> #3 (null) (), [C]:-1\n      136.58 real       124.98 user         6.51 sys\n```. But field 4 is nullable. sorry \nupdated description. ",
    "viciious": "A better solution would be to use a global lock using flock or a similar call/pattern. Random offsets are useless in cases when making a snapshot takes a substantial amount of time (>~ snapshot_interval).\n. @kostja I wasn't trying to start a discussion there or something, merely pointing. I wasn't aware that you (somewhat naively) view github merely as a bug database and not as a means for prominent Tarantool users to provide feedback on what's practical and what's not. Now that I'm aware of that, I will restrain myself from providing such comments here. Thanks.\n. Thanks! We'd been looking for a way to statically link Tarantool's xlog/snapshot utility functions which also brought in the dependency on libeio.\nWe ended up forking the functions we need and removing all libeio calls.\nMarking the issue as resolved.\n. Thanks!\nThis would greatly help us improve our monitoring/health-check system.\n. > It's not what you want?\nIt is, thanks to https://github.com/tarantool/doc/commit/ccc2aa497f1e94c6d5c74e65502ddf426d7ca32f\nYou got me there for a moment :)\n. $ tarantool --version\nTarantool 1.6.8-525-ga571ac0\nTarget: Darwin-x86_64-Release\nBuild options: cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/Cellar/tarantool/1.6.8-525 -DENABLE_TRACE=ON -DENABLE_BACKTRACE=OFF\nCompiler: /usr/local/Library/ENV/4.3/clang /usr/local/Library/ENV/4.3/clang++\nC_FLAGS: -fexceptions -funwind-tables -fno-common -fopenmp -msse2 -std=c11 -Wall -Wextra -Wno-strict-aliasing\nCXX_FLAGS: -fexceptions -funwind-tables -fno-common -fopenmp -msse2 -std=c++11 -Wall -Wextra -Wno-strict-aliasing\n. Is the new option only available on the development branch?\n. The problem here is that you don't get the timeout error until later when the connection is re-established. Doesn't make any sense to me but well, I can do with pcall alright.\n. The second test case is more complex and demonstrates how the second fiber never successfully exists the :close() call and involves cancellation of the \"hello\" fiber. Other than that, the steps are absolutely the same.\nt3.lua\n```\nlocal net_box = require('net.box')\nlocal fiber = require('fiber')\nbox.cfg{}\nlocal conn\n_, conn = pcall(net_box.new, '127.0.0.1:12123', {reconnect_after = 5})\ncf = function()\n    return fiber.create(function()\n        while true do\n            pcall(function() conn:timeout(10):call(\"hello\") end)\n            print('sleep')\n            fiber.sleep(1)\n        end\n    end)\nend\nf = cf()\nmon = fiber.create(function()\n    while true do\n        fiber.sleep(10)\n    print(f:status())\n    f:cancel()\n\n    if conn ~= nil then\n        print('close')\n        conn:close()\n        print('continue')\n        conn = nil\n    end\n\n    _, conn = pcall(net_box.new, '127.0.0.1:12124', {reconnect_after = 5})\n    f = cf()\nend\n\nend)\n```\nLog output:\n2016-11-09 18:51:08.435 [8824] main/105/net.box.read net_box.lua:503 W> 127.0.0.1:12123: Remote host closed connection\n2016-11-09 18:51:13.437 [8824] main/104/net.box.connector net_box.lua:503 W> 127.0.0.1:12123: Connection refused\nsuspended\nsleep\nclose\n2016-11-09 18:51:18.438 [8824] main/104/net.box.connector net_box.lua:503 W> 127.0.0.1:12123: Connection refused\n2016-11-09 18:51:23.439 [8824] main/104/net.box.connector net_box.lua:503 W> 127.0.0.1:12123: Connection refused\nSee how it doesn't print \"continue\" to console.\n. We're yet to fully upgrade from 1.5 to 1.6. Switching to a not so mature 1.7 is definitely not an option for us as we have hundreds of Tarantool instances running under high load.\n. Affects @rlomonosov (Mail.Ru)\n. Yeah, forgot to mention that this bug affects Tarantool v1.6.8\n. \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430, \u043f\u043e\u0445\u043e\u0436\u0435, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u0441\u044f box.cfg{listen=...}, \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0441\u0445\u0435\u043c\u0430\\\u0441\u043d\u0430\u043f\u0448\u043e\u0442\\\u043b\u043e\u0433\u0438. \u0422\u0430\u0440\u0430\u043d\u0442\u0443\u043b \u0431\u0438\u043d\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u043e\u0440\u0442 \u0438 \u043a\u043e\u043f\u0438\u0442 \u0440\u0435\u043a\u0432\u0435\u0441\u0442\u044b, \u043f\u043e\u043a\u0430 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u044b. \u0412 \u044d\u0442\u043e \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0435 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f.\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 workaround \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0446\u0435\u043f\u0438\u0442\u044c box.cfg{listen=...} \u043a\u0443\u0434\u0430-\u043d\u0438\u0431\u0443\u0434\u044c \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.. \u0414\u0430, \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043e\u0442\u0446\u0435\u043f\u043b\u0435\u043d\u0438\u0435\u043c box.cfg{listen=...} \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u041f\u043e \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u043c\u0435\u0440\u0435 \u044d\u0442\u043e \u043a\u043e\u043d\u0442\u0440-\u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430, \u0430 \u043f\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0439 - \u0431\u0430\u0433 \u0432 \u043f\u043e\u043b\u043d\u044b\u0439 \u0440\u043e\u0441\u0442.. A read-only replica with fixed client-side fake UUID ('0000...00') would also work in our case.. ",
    "AMDmi3": "The cause is #define _POSIX_SOURCE\n. ",
    "AlexMikhalev": "What is the current status? I would like to use this feature.\n. ",
    "excavador": "It should be tarantool rocks module, which allows:\n- stores inside geoip database\n- provides http interface for requests\n- stats queries \n- provide way/button for update database\n. ",
    "colorsocean": "Background: I used OrientDB in personal and work projects, and liked it graph capabilities and Direct Links/FetchPlan feature.\n1) Connect tuples from different spaces with typed 'edges'\nUse case: We can select all users and newsgroups that connected with edge 'subscribed' to current user in single database call.\n2) Friends n-depth (no comment)\nAnd I think 'Link'/'FetchPlan' is a strong concept.\nIn Orient I can Store link to 'Thumbnail' object in 'Gallery' object's 'Cover' field, and then query 'Galleries' with plan \"cover:1\" and fetch Gallery and it's Cover in single call. A good feature for denormalization.\n. Only some of such features will help to cover a lot more use cases.\nSorry for my English:)\n. ",
    "crudbug": "I was thinking about this same thing. OrientDB provides multi-model data persistence with Document, Object and Graph models. The idea is to treat vertices and edges as documents making relationships as first class citizens with no joining cost at runtime, traversals are O(1) . I haven't played in-depth with Tarantool, but from my understanding it can also provide multi-model data persistence : plugins for graph store.\n. ",
    "aleclarson": "@kostja Can this be reconsidered? I would love an officially supported way of having a field in one tuple point to another tuple (which may exist in the same space or another).. @bigbes explained:\n\nTuples are recreated when changed, so the pointer may change frequently. Even if it doesn't, the pointer is guaranteed to change when Tarantool restarts.. Here's what Tarantool is missing since it uses Lua 5.1 instead of 5.3:\n\nAlthough, I imagine LuaJIT implements some of these...\nLua 5.3\nMain changes\n\nintegers (64-bit by default)\nofficial support for 32-bit numbers\nbitwise operators\nbasic utf-8 support\nfunctions for packing and unpacking values\n\nLanguage\n\nuserdata can have any Lua value as uservalue\nfloor division\nmore flexible rules for some metamethods\n\nLibraries\n\nipairs and the table library respect metamethods\nstrip option in string.dump\ntable library respects metamethods\nnew function table.move\nnew function string.pack\nnew function string.unpack\nnew function string.packsize\n\nC API\n\nsimpler API for continuation functions in C\nlua_gettable and similar functions return type of resulted value\nstrip option in lua_dump\nnew function: lua_geti\nnew function: lua_seti\nnew function: lua_isyieldable\nnew function: lua_numbertointeger\nnew function: lua_rotate\nnew function: lua_stringtonumber\n\nLua standalone interpreter\n\ncan be used as calculator; no need to prefix with '='\narg table available to all code\n\nLua 5.2\nMain changes\n\nyieldable pcall and metamethods\nnew lexical scheme for globals\nephemeron tables\nnew library for bitwise operations\nlight C functions\nemergency garbage collector\ngoto statement\nfinalizers for tables\n\nLanguage\n\nno more fenv for threads or functions\ntables honor the __len metamethod\nhex and \\z escapes in strings\nsupport for hexadecimal floats\norder metamethods work for different types\nno more verification of opcode consistency\nhook event \"tail return\" replaced by \"tail call\"\nempty statement\nbreak statement may appear in the middle of a block\n\nLibraries\n\narguments for function called through xpcall\noptional 'mode' argument to load and loadfile (to control binary x text)\noptional 'env' argument to load and loadfile (environment for loaded chunk)\nloadlib may load libraries with global names (RTLD_GLOBAL)\nnew function package.searchpath\nmodules receive their paths when loaded\noptional base in math.log\noptional separator in string.rep\nfile:write returns file\nclosing a pipe returns exit status\nos.exit may close state\nnew metamethods __pairs and __ipairs\nnew option 'isrunning' for collectgarbage and lua_gc\nfrontier patterns\n\\0 in patterns\nnew option *L for io.read\noptions for io.lines\ndebug.getlocal can access function varargs\n\nC API\n\nmain thread predefined in the registry\nnew functions lua_absindex, lua_arith, lua_compare, lua_copy, lua_len, lua_rawgetp, lua_rawsetp, lua_upvalueid, lua_upvaluejoin, lua_version.\nnew functions luaL_checkversion, luaL_setmetatable, luaL_testudata, luaL_tolstring.\nlua_pushstring and pushlstring return string\nnparams and isvararg available in debug API\nnew lua_Unsigned\n\nImplementation\n\nmax constants per function raised to 226\ngenerational mode for garbage collection (experimental)\nNaN trick (experimental)\ninternal (immutable) version of ctypes\nsimpler implementation for string buffers\nparser uses much less C-stack space (no more auto arrays)\nLua standalone interpreter\nnew -E option to avoid environment variables\nhandling of non-string error messages\n. > I mean, why this stored sync could not be implicitly used?\n\nBecause the value of sync changes per request, and another request may be handled before box.session.push is called.\nWhat if the fiber was \"weakly mapped\" to sync? Then box.session.push could map fiber.self to the proper sync.\n```lua\n-- Stored wherever the Lua functions are called from.\nlocal sync_map = {}\nsync_map.__mode = \"k\"\n-- Do this for each request.\nsync_map[request_fiber] = sync\n-- Inside box.session.push\nlocal sync = sync_map[fiber.self()]\n```. > it is the same, as storing sync inside a fiber\nNot identical, because the weak map avoids storing application-specific data on the abstract fiber.\n\nIt is additional overhead to maintain this map (fiber count can be huge)\n\nForgive my ignorance, but is the overhead really bad? There's overhead with storing sync in a local variable, right? What's the reason a weak map is less efficient?\n\nAnd don't forget about C api, Swift, Rust, etc.\n\nAre there not weak maps in these languages?. @funny-falcon Sorry about the nonsense, then! :)\nLooks like sync as an argument is the best route, but how would you signal that the response has finished? Would the application handle that?. It looks like you're too far in to turn around, but I'm curious if Wren was ever considered (and your thoughts on it)?\n\nSimple syntax\nBuilt-in fibers\n\nPerformance details: http://wren.io/performance.html\nSorry, if this comment doesn't belong in this issue.. I would suggest even adding fio.read for automated .open and :close\nAnd perhaps even yaml.read and json.read are called for, too.. Workaround:\nlua\nlocal fh = fio.open(path)\nfh:read(fh:stat().size). Oh okay. I'm using 1.7.6-12-g2db448b. After further research, they now use a package loader instead of creating a dedicated require function per module via code-wrapping: https://github.com/luvit/lit/blob/master/luvit-loader.lua\nTheir require system works very similarly to NodeJS:\n\nRelative paths are supported (eg: ./init for sibling modules or ../init to traverse up directories)\nModule names still work (eg: foo/bar or foo.bar)\n\nThere's probably more to it than that, but luvit's documentation is sparse on the subject. Anyway, the relative require calls are reason enough to have something like this, in my opinion.\nSomeone made a npm-like package manager for luvit, called lum. Its benefits are listed here. Although it's not mature, perhaps there are some things to learn from its design that can be applied to Tarantool's package manager. Easy dependency declaration via package.lua and installation of project dependencies into the ./modules directory. And it might be compatible with luarocks packages.\n[5]: https://groups.google.com/d/msg/luvit/MPGM3rKzDrw/5TQw9jC6628J. This implementation works good in Tarantool: https://github.com/aleclarson/lula/blob/master/loader.lua\nIt's more comfortable for people coming from a NodeJS background.\n```lua\n-- Load 'foo.lua' or 'foo/init.lua' sibling\nrequire \"./foo\"\n-- Load 'foo.lua' or 'foo/init.lua' in parent directory\nrequire \"../foo\"\n-- Traverse multiple parents\nrequire \"../../foo/bar\"\n```\nTo keep the implementation lightweight, only modules within the working directory can use relative paths. The working directory is determined using os.getenv('PWD'), but that may be broken for some platforms (tested on OS X).\nWould a feature like this belong in Tarantool core, @kostja?. @rosik Packages in NodeJS use relative requires for all internal modules. The same use case exists in Lua (or any module-based language). There's no arguing against the usefulness of such a pattern.. I would prefer nullable by default, with a required=true to declare otherwise.. Worth noting that this returns true, yet no module found:\nlua\nmoon = require 'moonscript'\npackage.loaders[2] == moon.moon_loader. Okay, I found the problem.\npackage.path in Lua 5.1 and Lua 5.3 contains ./?.lua, and Tarantool does not.\nSo here's the workaround:\nlua\npackage.path = './?.lua;' .. package.path\nrequire 'moonscript'\nNow I'm wondering how modules relative to fio.cwd() are even working in Tarantool.... @bigbes said: \"tarantool doesn't have flags intentionally (other than lua once). you should write 3-4 lines of code to delete this folder in Lua script based on CLI flags of your application\"\nMaybe I'll write a tool that wraps tarantool with this functionality someday. For now, I'll be using a Makefile.. If there's any way to get a real error message, I'd love to know.. Tests are passing on my end!. Thanks for merging this! \ud83d\udc4d\nEdit: Oops not quite merged yet, but you can re-open this if you want.. @Mons You can manually give a space its own metatable like this:\nlua\nlocal shared_mt = getmetatable(space)\nlocal space_mt = setmetatable({}, {__index = shared_mt})\nsetmetatable(space, space_mt)\nWhy isn't that good enough for your use case?. Cool, nice job on the changes!\n. The main issue this would fix is the following scenario. I have a tuple where the last five fields are absent. I have to set the last field before I set the other four fields, but an error is thrown if I don't set the other four fields to nil or box.NULL first.. I've managed to implement this in userland.\n```moon\nspace_insert = space_mt.insert\nspace_mt.insert = (tuple) =>\n  format = get_format @id\nif #format > #tuple\n    for i = #tuple + 1, #format\n      val = format[i].default\n      tuple[i] = val if type(val) ~= 'nil'\nspace_insert self, tuple\n```\nThe get_format function checks a local table for the cached result of box.space._space:get(space_id).format.. The new commits add the following:\n\nfio.pathjoin('', 'a', 'b') now returns \"a/b\" instead of throwing\nfio.pathjoin('', '') now returns \".\" instead of nil\ncall tostring on every fio.pathjoin argument (instead of only the first)\nremove unnecessary gsub in join loop\nimprove path == \"/\" check (before removing a trailing /). This is ready to merge! Barring any formatting nits.. index_mt holds space-specific methods, which depend on the value of space.engine (see here). Testing what? Adding a new property to index_mt and space_mt?. \n",
    "KlonD90": "tarantool: version 1.6.4-523-gc890e72\ntype 'help' for interactive help\ntarantool> require('box.session').user()\nSegmentation fault\nCurrent time: 1428060458\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed,\nthis may fail as well\n0  0x8064a24 in sig_fatal_cb(int)+132\n1  0xb7768400 in ?\n2  0x809104e in session_create(int, unsigned long long)+30\n3  0x8091b04 in session_create_on_demand()+36\n4  0x809be35 in lbox_session_user(lua_State*)+101\n5  0x810705f in lj_BC_FUNCC+50\nAborted (core dumped)\n\u0422\u043e\u0436\u0435 segfault \u0432\u0441\u043f\u043b\u044b\u043b\u043e \u043d\u0430 ubuntu 14.04.\n. @kostja \u0441\u043f\u0430\u0441\u0438\u0431\u043e, \u043f\u043e\u043d\u044f\u043b \u0432 \u0447\u0435\u043c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430. \u0428\u0435\u043b \u043f\u043e \u0442\u0443\u0442\u043e\u0440\u0438\u0430\u043b\u0443, \u0430 \u0442\u0443\u0442 \u043e\u043d\u043e \u0443\u043c\u0435\u0440\u043b\u043e \u043f\u0440\u043e\u0441\u0442\u043e.\n. Same thing. I found i need tarantool-dev package.\n. +1 for arrays\n. ",
    "benagricola": ":+1: this. I'm using ProFi at the moment (pure lua) but it has a significant impact on cpu usage. \nI did have a quick try using Systemtap (specifically, with https://github.com/openresty/stapxx#lj-lua-stacks) since it's been excellent for creating flamegraphs of other luajit / openresty code in the past, but didn't have much luck there with tarantool. Might be worth some investigation?\nedit: looks like lj-lua-stacks needs luajit 2.1 anyway so this was a pointless comment :) Whoops!\n. ",
    "vmakhaev": "The reason is: JS is a way more popular than Lua and there is no need to learn one more language if you have read an article about Tarantool and want to play with it a little bit and see how it can be used in your new project.\n. It was vinyl. Crash on db startup (box.cfg{...}). Looks like I've attached wrong files and already deleted right ones. Next time will try to provide you everything you need.\n. I'm gonna close this, because this is not reproduced with data files, created with last tarantool version.. ",
    "Gerold103": "@TarantoolBot document\nTitle: example\ntest desc. Which limit is needed? And do we need any limit?. Remove limit.. Test:\nLua\nbox.cfg{listen=3313}\nfunction aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()\n    return 'kek'\nend\nname = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\nbox.schema.func.create(name). @IlyaMarkovMipt  and @GeorgyKirichenko , please, write a documentation request for privileges here.. Normal test case:\n```Lua\nbox.cfg{listen=3313, readahead=128}\nremote = require('net.box')\nfiber = require('fiber')\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\ncn = remote.connect(box.cfg.listen)\ncn:ping()\nfunction long_call(param)\n    fiber.sleep(100000)\n    return 'ok'\nend\nfunction normal_call(param)\n    return 'fast_ok'\nend\ncall1_ret = nil\ncall2_ret = nil\ncall3_ret = nil\nlongs = string.rep('a', 8192)\nfunction call1()\n    call1_ret = cn:call('long_call', {longs})\nend\nfunction call2()\n    call2_ret = cn:call('long_call', {longs})\nend\nfunction call3()\n    call3_ret = cn:call('normal_call')\nend\nf1 = fiber.create(call1)\nf2 = fiber.create(call2)\ncn:call('normal_call') -- HANGS\n```. 1. \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u043f\u0446\u0438\u044e 'is_long' \u043a iproto \u0437\u0430\u043f\u0440\u043e\u0441\u0443, \u0438 \u0435\u0441\u043b\u0438 \u043e\u043d \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d, \u0442\u043e \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c struct request \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432 ibuf.\n\u041f\u043b\u044e\u0441\u044b: \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e, \u0433\u0438\u0431\u043a\u043e, \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f call. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043b\u0443\u0447\u0448\u0435 \u0437\u043d\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0443 \u043d\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043e\u043b\u0433\u0438\u0435.\n\u041c\u0438\u043d\u0443\u0441\u044b: \u043e\u043f\u0446\u0438\u044e \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d\u043d\u043e \u0447\u0430\u0441\u0442\u043e.\n\n\n\u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0444\u0438\u0434\u0431\u0435\u043a \u043e\u0442 tx \u043f\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044e \u043f\u0440\u043e\u043f\u0430\u0436\u0438 \u043d\u0430\u0434\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0432 struct request.\n\u041f\u043b\u044e\u0441\u044b: \u0433\u0438\u0431\u043a\u043e, \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043d\u0435\u0442 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0433\u0434\u0430 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. \u0415\u0441\u043b\u0438 tx \u043f\u043e\u0442\u043e\u043a \u0437\u0430\u0432\u0438\u0441, \u0442\u043e \u043e\u043d \u043d\u0435 \u043f\u043e\u0448\u043b\u0435\u0442 \u0441\u0438\u0433\u043d\u0430\u043b \u043e\u0431 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0435\u043d\u0438\u0438 struct request, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442 iproto \u043d\u0435 \u043d\u0430\u0447\u0438\u0442\u0430\u0435\u0442 \u043b\u0438\u0448\u043d\u0435\u0439 \u0444\u0438\u0433\u043d\u0438, \u043f\u043e\u043a\u0430 tx \u043d\u0435 \u043e\u0442\u0432\u0434\u0443\u043f\u043b\u0438\u0442. \u041f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 - \u0442\u0430\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u0440\u0430\u0437\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0434\u043d\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0440\u0430\u0441\u043a\u0438\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c ibuf, \u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u0430\u0436\u0435 \u043e\u0442\u0442\u0443\u0434\u0430 \u0443\u0434\u0430\u043b\u044f\u0442\u044c\u0441\u044f. \u0422\u043e\u0433\u0434\u0430 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u043c\u043e\u0433\u043b\u0430 \u0431\u044b \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0430 \u043f\u043e\u0442\u043e\u043c \u0441\u043b\u0430\u0442\u044c \u0441\u0438\u0433\u043d\u0430\u043b \u043e\u0431 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0435\u043d\u0438\u0438 request.\n\n\n\u0412\u0441\u0435\u0433\u0434\u0430 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c struct request \u0434\u043b\u044f misc \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n\u041f\u043b\u044e\u0441\u044b: \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e.\n\u041c\u0438\u043d\u0443\u0441\u044b: \u043d\u0435 \u0440\u0435\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0441 interactive iproto tx, \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0432\u0430\u043b\u0438\u0442\u044c \u0437\u0430\u0441\u0442\u0440\u044f\u0432\u0448\u0438\u0439 tx \u043a\u0443\u0447\u0435\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0436\u0435 \u043d\u0430 \u0431\u044b\u0441\u0442\u0440\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0437\u0430\u043c\u0435\u0434\u043b\u044f\u044f \u0438\u0445.\n\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0431\u0443\u0444\u0435\u0440\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 lsregion.\n\u041f\u043b\u044e\u0441\u044b: \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e, \u0431\u0443\u0444\u0435\u0440\u044b \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430 \u043e\u0442\u0432\u044f\u0437\u0430\u043d\u044b, \u043c\u043e\u0436\u043d\u043e \u0442\u0440\u0443\u043d\u043a\u0435\u0439\u0442\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u0440\u0430\u0437\u0443 \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435.. Blocked by #2619.. \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f:\n\n\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c obuf[0] \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 obuf[1] - \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.\niobuf_reset_mt \u0443\u0434\u0430\u043b\u044f\u0435\u0442 obuf, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0438\u0434\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u044f \u043e\u0431\u043e\u0438\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c:\n1. - \u0414\u043b\u044f \u0437\u0430\u0449\u0438\u0442\u044b \u043e\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0442\u044c \u043d\u0435\u0434\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0431\u0443\u0444\u0435\u0440 \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044c \u0441 \u043d\u0435\u0433\u043e.\n   - \u0414\u043b\u0444 \u0437\u0430\u0449\u0438\u0442\u044b \u043e\u0442 iobuf_reset_mt race \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0444\u0430\u0442\u044c obuf \u043f\u0440\u0438 \u0435\u0433\u043e \u043e\u0442\u0434\u0430\u0447\u0435 \u0432 iproto_msg \u0438 \u0430\u043d\u0440\u0435\u0444\u0430\u0442\u044c \u043f\u0440\u0438 net_send_msg.\n   \u041c\u0438\u043d\u0443\u0441\u044b: obuf \u043c\u043e\u0436\u0435\u0442 \u0431\u0435\u0441\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u0442\u0438, \u0435\u0441\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0444\u0430\u0442\u044c\u0441\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u043e\u043b\u0433\u0438\u0445 call/eval.\n\n\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 - \u0441\u043c. 1.\n\n\n\n\u0414\u043b\u044f \u0437\u0430\u0449\u0438\u0442\u044b \u043e\u0442 iobuf_reset race box_process_call/eval \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432 iproto \u043f\u043e\u0442\u043e\u043a \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e obuf \u043e\u0442 reset. Iproto \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 obuf \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442. Tx \u0442\u0440\u0435\u0434 \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u0438\u0448\u0435\u0442 \u0432 obuf. \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u0432 net_send_msg. \u0424\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u0442\u043e\u0436\u0435 \u0440\u0435\u0444, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 obuf \u043c\u043e\u0436\u0435\u0442 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0440\u0430\u0437\u0443 \u043c\u043d\u043e\u0433\u0438\u043c\u0438 call/eval.\n\n\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 - \u0441\u043c. 1.\n\n\n\u041e\u0442\u0434\u0430\u0432\u0430\u0442\u044c \u0432 iproto_msg \u043d\u0435 obuf, \u0430 \u043e\u0431\u0435\u0440\u0442\u043a\u0443 \u043d\u0430\u0434 \u043d\u0438\u043c. \u042d\u0442\u0430 \u043e\u0431\u0435\u0440\u0442\u043a\u0430 \u0440\u0435\u0444\u0430\u0435\u0442 obuf. \u0415\u0441\u043b\u0438 obuf \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0440\u0430\u0437\u0440\u043e\u0441\u0441\u044f \u0438 \u0440\u0435\u0444\u043e\u0432 \u043d\u0435 \u043d\u043e\u043b\u044c, \u0442\u043e \u043f\u043e\u0434 \u043c\u0443\u0442\u0435\u043a\u0441\u043e\u043c \u0432\u043e \u0432\u0441\u0435\u0445 iproto_obuf, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0435\u0439\u0447\u0430\u0441 \u043d\u0435 \u0438\u0434\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c, obuf \u0438\u0437 iproto \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u043d\u043e\u0432\u044b\u0439 obuf \u0438 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u0442 \u0440\u0435\u0444. \u041c\u043e\u0436\u043d\u043e \u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043a\u0435\u0448 \u044d\u0442\u0438\u0445 per request obuf, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u043e \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437.\n\n\u0412 tx \u0442\u0440\u0435\u0434\u0435, \u043f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u0432 iproto_obuf, \u043f\u043e\u0434 \u043c\u0443\u0442\u0435\u043a\u0441\u043e\u043c \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c, \u0447\u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044c \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c, \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c, \u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 obuf \u0438\u043b\u0438 \u043d\u043e\u0432\u044b\u0439, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u042d\u0442\u043e \u043e\u0442\u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0430\u0435\u0442 pub sub, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u044d\u0442\u043e\u0442 per request obuf \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432 \u0441\u043e\u043a\u0435\u0442 \u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e reset. \u041b\u0438\u0431\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0442\u043e\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0432\u0430 \u0440\u043e\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0445\u0441\u044f obuf.\n\n\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 - \u0441\u043c. 1.\n\u041d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 obuf. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 obuf \u0432\u043c\u0435\u0441\u0442\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u0443\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u043a\u0435\u0448, \u043e\u0442\u043a\u0443\u0434\u0430 \u043e\u043d\u0438 \u0441\u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 - \u044d\u0442\u043e \u0437\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 \u043e\u0441\u0446\u0438\u043b\u043b\u044f\u0446\u0438\u0438 (obuf_create/reset \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441).. 5.\n\u041e\u0431\u0449\u0430\u044f \u0438\u0434\u0435\u044f - \u043e\u0434\u0438\u043d \u0442\u0440\u0435\u0434 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 \u043e\u0434\u043d\u0438\u043c obuf. Iproto \u0441\u0432\u043e\u0439 obuf \u043f\u0438\u0448\u0435\u0442 \u0432 \u0441\u043e\u043a\u0435\u0442, Tx \u0441\u0432\u043e\u0439 obuf \u043d\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u041a\u043e\u0433\u0434\u0430 Iproto \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0441\u043e\u043a\u0435\u0442, \u043e\u043d \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0440\u043e\u0442\u0430\u0446\u0438\u0438 \u0432 tx. Tx \u0440\u043e\u0442\u0430\u0446\u0438\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0438 \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 Iproto. Iproto, \u043f\u043e\u043b\u0443\u0447\u0438\u0432 \u043e\u0442\u0432\u0435\u0442, \u043f\u0438\u0448\u0435\u0442 \u0434\u0430\u043b\u044c\u0448\u0435 \u0432 \u0441\u043e\u043a\u0435\u0442, \u043d\u043e \u0443\u0436\u0435 \u0438\u0437 \u0434\u0440\u0443\u0433\u043e\u0433\u043e obuf.\n\u041a\u0430\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0440\u043e\u0442\u0430\u0446\u0438\u044e \u0432 tx? \u0422\u0430\u043c \u0436\u0435 \u044f\u0432\u043d\u044b\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043d\u0430 obuf \u0432\u0435\u0437\u0434\u0435. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 - \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044c obuf \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, iproto_buf. \u0412\u0441\u0435, \u043a\u0442\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u043f\u0438\u0448\u0435\u0442 \u0432 obuf \u0447\u0442\u043e-\u043b\u0438\u0431\u043e \u0434\u043b\u044f iproto, \u0431\u0443\u0434\u0443\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 iproto_buf. \u0412\u043d\u0443\u0442\u0440\u0438 \u044d\u0442\u043e\u0433\u043e iproto_buf \u043c\u043e\u0436\u043d\u043e \u0440\u043e\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c obuf \u043a\u0430\u043a \u0443\u0433\u043e\u0434\u043d\u043e.\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0440\u043e\u0442\u0430\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 Tx \u0442\u0440\u0435\u0434\u0435, \u044d\u0442\u043e \u043d\u0435 \u0441\u043b\u043e\u043c\u0430\u0435\u0442 \u0442\u0435 \u0444\u0430\u0439\u0431\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0435\u0439\u0447\u0430\u0441 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0436\u0435 iproto_buf.\n```C\n\n\n\n/ iproto.cc /\nstruct iproto_buf {\n    struct obuf *obuf;\n};\nstruct iproto_connection {\n    /* Wrappers to use in TX thread. /\n    struct iproto_buf obuf_wrappers[2];\n    struct cmsg rotate_buf_msg;\n    ....\n};\n/ box/call.h/.c /\nstruct obuf obuf -> struct iproto_buf buf;\nvoid\ntx_process_rotation(struct cmsg m)\n{\n     struct iproto_connection conn = container_of(m, struct iproto_connection, rotate_buf_msg);\n     struct obuf *tmp = conn->obuf_wrappers[0].obuf;\n     conn->obuf_wrappers[0].obuf = conn->obuf_wrappers[1].obuf;\n     conn->obuf_wrappers[1].obuf = tmp;\n}\n/ iproto.cc /\nvoid\nnet_end_rotation(struct cmsg *m)\n{\n    ev_io_feed_event(EV_WRITE);\n}\n. The previous idea was rejected after implementation because of complexity.\nNew proposal:C\n/ tx thread /\n/\n * Output buffer used by tx to write responses from one session,\n * and by iproto to flush data.\n /\nstruct connection_obuf {\n    struct iproto_connection conn;\n    struct obuf *buf;\n    bool is_scheduled_to_dump;\n    struct rlist in_batch;\n    /\n     * Message to send buffer or buffers batch to iproto thread.\n     */\n    struct cmsg flush_msg;\n};\ntx_current_obuf(struct iproto_connection *conn) {\n    if (conn->current_obuf == NULL)\n        conn->current_obuf = get_new_obuf();\n    return conn->current_obuf;\n}\nfinish_response(struct iproto_connection conn) {\n    static struct connection_obuf batch = NULL;\n    if (batch == NULL) {\n        batch = conn->current_obuf;\n        batch->is_scheduled_to_dump = true;\n        schedule_batch_dump(batch);\n        return;\n    }\n    if (!conn->current_obuf->is_scheduled_to_dump)\n        rlist_add_entry(batch, conn->current_obuf, in_batch);\n}\nschedule_batch_dump(struct connection_obuf *batch) {\n    cmsg_init(batch->flush_msg, {{net_flush_obufs, NULL}});\n    cpipe_flush_input(batch->flush_msg);\n}\ntx_proces_...() {\n    / return empty buffers back to the cache. /\n    if (! rlist_empty(msg->empty_buffers))\n        return_empty_buffers_to_the_cache(&msg->empty_buffers);\n    / execute request ... /\n    buffer = tx_current_obuf();\n    write(buffer, response);\n    finish_response();\n}\n/ iproto thread /\nstruct iproto_connection {\n    /*\n     * Empty buffers to send back to tx thread with a next\n     * client request.\n     /\n+   struct rlist empty_buffers;\n/**\n * List of tx buffers to flush. There must be list, not single\n * buffer, because (1) any buffer can be flushed partialy and\n * next buffer can not be flushed until the current is not;\n * (2) new buffers can come from tx thread during while the\n * current is partially flushed.\n */\n\n\nstruct rlist buffers;\n}\n\nnet_flush_obufs() {\n    rlist_foreach_entry_safe(buffer, batch, in_batch) {\n        rlist_add_tail_entry(conn->buffers, buffer, in_batch);\n        ev_feed_event(buffer->conn->output, EV_WRITE);\n    }\n}\niproto_flush(struct iproto_connection conn) {\n    struct connection_obuf current_buffer =\n        rlist_first_entry(conn->buffers, in_batch);\n    struct obuf *buf = current_buffer->obuf;\n    flush(buf);\n    if (obuf_used(buf) == 0) {\n        rlist_del_entry(current_buffer, in_batch);\n        rlist_add_entry(connection->empty_buffers, current_buffer,\n                        in_batch);\n    }\n}\niproto_enqueue_batch() {\n    struct iproto_msg first_msg;\n    / prepare iproto_msgs to send, remember first ... /\n    if (! rlist_empty(conn->empty_buffers)) {\n        first_msg->empty_buffers = conn->empty_buffers;\n        rlist_create(conn->empty_buffers);\n    }\n}\n```. Proposal for a new buffers:\nhttps://gist.github.com/Gerold103/76d81fa8cb5c20631b584bff5b7f68b7. The buffer above can not be used - too complex.. There is a problem with a shared_buffer. The current implementation stores in each shared_iov a max_pos to determine, to which position in the memory block a consumer must consume. But max_pos can be concurrently modified by consumer and producer threads. The proposal is to remove max_pos and use each shared_iov completely, with no gaps. It means, that any reserve() can return less memory that requested.\nIn such a case we can not do a simple mp_encode_uint, because reserve() can return at first 1 byte and other bytes on a second reserve().\nTo solve this problem we need a msgpack serializer, which can write message pack partially in different memory blocks. It is linked also with lua/msgpack.c mpstream, which writes lua objects to message pack.. The new plan:\n- To fix the problem, we need to send a special messages to discard ibuf;\nV\n- To discard ibuf, we need to unlink it with obuf;\nV\n- Unlinked obuf must be refactored to be cyclic (shared_buffer);\nV\n- To implement shared_buffer we need a msgpack serializer, which can write message pack in not monolite memory blocks.\nV\n- To implement a such mpstream we can refactor the existing one in lua/msgpack.h/.c. We need to add a virtual methods encode_uint/nil/array/map... together with virtual alloc/reserve. By this virtual methods, the partial message pack encoder can be implemented.. Discarded. The new proposal:\nCreate a shared_buffer_v2. It has iovec iov. Each iov is owned either by producer or consumer. When can not reserve new block (producer met begin of a producer), yield until memory become available.. \u041d\u043e\u0432\u043e\u0435 \u0443\u043b\u044c\u0442\u0440\u0430 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n\u041e\u0431\u0449\u0438\u0439 \u0432\u0438\u0434 \u0431\u0443\u0444\u0444\u0435\u0440\u0430 \u0432 \u043f\u0441\u0435\u0432\u0434\u043e\u043a\u043e\u0434\u0435 \u043d\u0438\u0436\u0435. \u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438\n\u0431\u0443\u0444\u0444\u0435\u0440\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0435\u0433\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0442\u044c \u0438\u043b\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0442\u044c. \u0411\u0443\u0444\u0444\u0435\u0440 - \u043a\u043e\u043b\u044c\u0446\u043e\niovec \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u043d\u0435\u043c \u043f\u043e \u043c\u0435\u0440\u0435 \u043f\u0440\u043e\u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f\nproducer-\u0430. \u0422\u043e\u0433\u0434\u0430 \u0431\u0443\u0444\u0435\u0440 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c. \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0435\u0433\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0442\u044c - realloc \u043a\u0430\u043a\u043e\u0433\u043e-\u043d\u0438\u0431\u0443\u0434\u044c iovec, \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u043b\u0438 \u043f\u0430\u043c\u044f\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u0432\u0441\u0435\u0445 iovec.\n\u0417\u0430\u0434\u0430\u0447\u0443 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 iovec \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f\n\u043f\u0435\u0440\u0435\u043b\u043e\u0436\u0438\u0442\u044c \u043d\u0430 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0432\u044b\u0448\u0435. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e iproto \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e\n\u043f\u0440\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u0431\u0443\u0444\u0435\u0440\u0430 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439\n\u0431\u0443\u0444\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 producer. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0442\u0430\u0440\u044b\u0439\n\u0431\u0443\u0444\u0435\u0440 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\nconsumer-\u043e\u043c. \u0423\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435 - \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0431\u0443\u0444\u0435\u0440\n\u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435, \u0441\u0442\u0430\u0440\u044b\u0439 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0430\u0435\u043c, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d.\n```C\nstruct shared_buffer {\n    struct slab_cache slabc;\n    / Currently used iov. /\n    struct iovec iov;\n    / Capacities of iovecs. /\n    size_t * const capacity;\n    / Size for a new memory blocks. */\n    size_t iovec_size;\n    / Max size for a realloc. */\n    size_t iovec_max_size;\n    int iov_count;\n};\nstruct buffer_consumer {\n    / Consumer owns iovecs [cur, end). */\n    int cur;\n    int end;\n    /\n     * Consume() makes iov[cur].iov_base += consumed to\n     * make iov[cur].iov_base point to the beginning of not\n     * consumed memory.\n     * After the iov[cur] is fully consumed, its iov_base must\n     * be restored to initial value. To do it, make\n     * iov[cur].iov_base -= consumed_in_current.\n     */\n    size_t consumed_in_current;\n};\nstruct buffer_producer {\n    / Producer owns iovecs [cur, end). */\n    int cur;\n    int end;\n    /\n     * Producer writes new data to unused part\n     * iov[cur].iov_base. Produced_in_current stores offset to\n     * the unused memory.\n     */\n    size_t produced_in_current;\n};\n/*\n * Savepoint to rollback to it, if an error on a user side occured\n * after reserve.\n /\nstruct buffer_producer_svp {\n    int cur;\n    size_t produced_in_current;\n};\nchar \nbuffer_producer_reserve(struct buffer_producer producer, size_t size)\n{\n    /\n     * Try to reserve in a current block.\n     * Try to reserve in a next block (it is empty,\n     * if exists).\n     * If not enough blocks or memory in a next block, realloc\n     * a current one, until a fixed limit.\n     * If a limit is reached, then out of memory.\n     /\n}\nchar \nbuffer_produce(struct buffer_producer producer, size_t size)\n{\n    / Reserve + propagate produced_in_current. /\n}\nvoid\nbuffer_consume(struct buffer_consumer consumer, size_t size)\n{\n    / Consume, restore iov_base in fully consumed iovecs. */\n}\nvoid\nbuffer_consumer_to_iovs(const struct buffer_consumer consumer,\n            const struct iovec iov1, int *iov1_count,\n            const struct iovec iov2, int iov2_count)\n{\n    /\n     * It is neccessary to return two iov, because a\n     * consumer end can be < consumer cur, and there is no\n     * single continuously iovec array owned by the consumer.\n     */\n}\n. Fixed in 1.7.2\n. Proposal:\n- Implement json path parser;\n- Integrate the parse into tuple_update/upsert_execute.\nIt allows to execute updates. Also for updates by tuple field names using space format a tuple_format can be used. For example:Lua\nformat = { {name = 'field1', type = 'unsigned'}, {name = 'field2}, {name = 'field3'} }\nspace = box.schema.space.create('test', {format = format})\npk = space:create_index('pk')\nspace:replace{1, {value = 2}, 3}\nspace:update({1}, { {'=', 'field2.value', 20} })\nspace:get{1} -- returns {1, {value = 20}, 3}\n. Blocked by #1285 . Possible update operations variant. Tuple field with name `f`:\nf = {\n    a = 100,\n    b = 200,\n    c = {\n        d = 400,\n        e = 500,\n        f = {4, 5, 6},\n        g = {k = 600, l = 700}\n    },\n    m = true,\n    g = {800, 900}\n}\nUpdate var 2:\n{'f', {\n    {'!', 'e', 1000},\n    {'c', {\n        {'=', 'd', 40},\n        {'#', 'e'},\n        {'#', 'f[2]'},\n        {'+', 'g.l', 100},\n    }},\n    {'g', {\n        {'!', 4, 300},\n        {'+', 4, 50}\n    }}\n}}\n. Update var 1:\n{'=', 'f.c.d', 40}\n{'!', 'f', {e = 1000}}\n{'#', 'f.c.e'}\n{'#', 'f.c.f[2]', 2}\n{'=', 'f.g[3]', 200}\n{'+', 'f.c.g.l', 100}\n{'!', 'f.g[4]', 300}\n{'+', 'f.g[4]', 50}\n. @Khatskevich because `-` is a subtraction. For deletion already `#` exists - it deletes specified field count starting from an index.. Proposal:\nLua does not allow to overwrite assignment operator. So on the current 1.7 for statement tuple.field1.field2 the tuple.field1 returns a lua table from which field2 is accessed. We can implement tuple[\"field1.field2\"] to effectively find a target value and return it to lua without returning separately field1 and field1.field2.\nBut there is ability to make tuple.field1.field2 work similar to tuple[\"field1.field2\"]. The proposal is to introduce a new cdata:C\nstruct lua_tuple_field {\n  / Original tuple to access field. /\n  struct tuple source_tuple;\n  / Byte offset to a field from tuple_data(). /\n  uint32_t field_offset;\n};\nTuple __index method must return this cdata for any given index (tuple[1], tuple.field1, ...). This cdata also have __index, which allows to access another fields from the current offset. For scalar fields we can return lua value without cdata.\nExample:Lua\ntuple = {1, 2, 3, { name = 'name', value = { field1 = 1, field2 = 2, field3 = 3 } }}\nvalue = tuple.value -- value is struct lua_tuple_field with offset on tuple.value.\nfield2 = value.field2 -- field2 is lua integer. It is simple object.\n```\nTo update tuple fields the tuple:update() function only must be used. It is the another ticket.. The patch is already done for non-unicode characters. The proposal is to use wchar instead of char in the json path parser to correctly process paths with hieroglyphs and other strange symbols.\n. \"What about flattening/unflattening support?\" you can ask, but I can answer, that the ticket about documents support is rather blocked by this ticket than this ticker is blocked by documents. We can not implement documents support while can not 1) access tuple fields by JSON, 2) update tuple fields by JSON, 3) index tuples by JSON.. @TarantoolBot doc. @TarantoolBot document\nTitle: Document tuple data access by JSON path\nUntil this moment in Lua a tuple data could be accessed in 3 ways:\n- get field by field number, decode into Lua,\n- get field by field name, decode into Lua\n- decode entire tuple into Lua.\nIt was impossible to decode into Lua only a part of the field to avoid Lua garbage creating. For example, consider the tuple: {1, 2, {key1 = value1, key2 = {key21 = {key211 = {key2111, key2112}}}}} with field names field1, field2, field3. To get key2112 it is necessary to decode into Lua the entire 3-th field, including key1, value1, key2, key21, key211, key2111 using the syntax key2112 = tuple.field3.key2.key21.key211[2]. Now the one can use the following syntax: key2112 = tuple[\"field3.key2.key21.key211[2]\"]. As you can see the difference is in placing all the path into quotes and brackets [\"...\"]. The Tarantool goes through this path and MessagePack tuple body, gets the needed tuple part and decodes into Lua only it.\nThe path must be valid JSON path with one exception - in Tarantool a path can start with .. For example: tuple[\".field3...\"] - it is done to lay emphasis that the JSON path here is just a suffix for the tuple.\nAt the same time tuple field names still work: tuple[\"field1\"], tuple.field2.\nIf the field name looks like JSON path, for example: my.field.name, then it works too. The path at first is checked to be a real JSON path, and if nothing is found, then the entire path is considered as a field name. To combine such names and path elements the one can use [\"...\"]. For example: tuple[\"['my.field.name'].key1.key2.['another.key.in.msgpack_map']\"].. This is not only select tests problem. Memory leaks appears also in other operations.\n. Error was in get_trntl_table_from_tuple in calling box_index_len on not existing index.\n. Problem was in Makefile.in in sqlite. There was one unicode space in flags.\n. Error was in sqlite3AddPrimaryKey - sqlite tried to use integer primary key as rowid, but in tarantool there is no rowid.\n. After fixing this issue, please, don't forgot to move tests with truncate calls from\nbox/lua.test.lua -> engine/lua.test.lua\nbox/transaction.test.lua -> engine/transaction.test.lua\nbox/tree_pk.test.lua -> engine/tree_pk.test.lua\nbox/tree_pk_multipart.test.lua -> engine/tree_pk_multipart.test.lua\nbox/tuple.test.lua -> engine/tuple.test.lua\nbox/update.test.lua -> engine/update.test.lua\n. Error was  with MoveToUnpacked in TarantoolCursor\n. Error was in deleting all indices\n. Fixed. Error was in TarantoolCursor::MoveToFirst(). If cursor was invalid but after moving to first became valid then corresponding flag was not set.\n. This is only sql problem and is already fixed\n. Error was fixed by adding check on NULL\n. Fixed by adding estimated size of space into struct Table. And fixed error with TarantoolCursor::MoveToFirst.\n. Fixed by adding more complex logic in sqlite3EndTable, sqlite3AddPrimaryKey and sqlite3VdbeOpIndexByID.\n. Error was with difference between sqlite3_free and sqlite3DbFree. If you allocate memory by one and trying to deallocate by another then you can get double free error.\n. > There are two options for us:\n\nAdd 'not_null = true' option to box.schema.space_create()\nPros: like SQL\nCons: default value must be 'true' for 1.6 -> 1.7 forward compatibility, not_null = false is inverted logic\nAdd null = true option tobox.schema.space_create()\nLet's discuss these options.\n\nWhat will happen in case of creating table, where not all columns can be NULL?\nExample: CREATE TABLE test(a PRIMARY KEY, b NOT NULL, c NULL)\nIf we add option not_null to entire space then we can't insert NULLs in column c but it contradict with \"CREATE\" statement.\nI think that we must define NULL/NOT NULL for each column separately.\n. NULLs proposal:\n1. Implement comparators, which allows NULL.\n2. In select() and get() check if index allows NULL (at least one indexed field allows NULL) and if a key contains NULL then return empty sey, becuse NULL in the key would not be equal, greater or lesser than any value in its column.\n3. Make an option for select(): {exact = boolean}. If exact == true, then do not check NULL in keys.\n4. Make for all NULL-possible indexes new comparators: tuple_compare(NULL, NULL) == -1,\ntuple_compare_with_key(NULL, NULL) == 0 (see struct key_def). In such a case select(exact = true) works automatically, because it uses tuple_compare_with_key(), and an unique NULL-possible index can store multiple NULLs, because to save a new tuple with NULL it used tuple_compare().. Assume, that there is a sequence of UPSERTs of the same key. And in the middle of the sequence one UPSERT is incorrect. What to do with the newer UPSERTs?\n- Drop all the newer UPSERTs. Then the user must explicitly REPLACE or DELETE the key to fix the error.\n- Skip only invalid UPSERT. This way seems to be unrealizable. Such sequence of UPSERTs can be merged in one UPSERT during compaction or dump, and it is impossible to split the merged UPSERTs back to delete only one invalid UPSERT.. Need some research. The main idea - if the UPSERT is broken and it had been commited, possibly the best solution is to discard all newer UPSERTs, including from newer transactions, until REPLACE/DELETE is commited.\nThe main problem is how to report this problem. We cannot report for each newer upsert the error, because upserts RPS can be very big and the log size would grow very fast.\nNeed more time to think about.. Duplicate of #1435 \n. Test case\nbox.cfg{\n    slab_alloc_maximal = 2 * 1024 * 1024,\n    logger = 'tarantool.log'\n}\nspace = box.schema.space.create('test', { engine = 'vinyl' })\nindex = space:create_index('pk')\nstr_val = 'a'\nfor i = 1, 20 do str_val = str_val..str_val end\nfor i = 1, 1000 do space:insert({i, str_val}) collectgarbage('collect') end\nbox.snapshot()\nfor i = 1001, 1100 do space:insert({i, str_val}) collectgarbage('collect') end\nbox.snapshot()\nfor i = 1101, 1200 do space:insert({i, str_val}) collectgarbage('collect') end\nbox.snapshot()\nfor i = 1201, 1300 do space:insert({i, str_val}) collectgarbage('collect') end\nbox.snapshot()\nfor i = 1301, 1400 do space:insert({i, str_val}) collectgarbage('collect') end\nbox.snapshot()\nfor i = 1401, 1500 do space:insert({i, str_val}) collectgarbage('collect') end\nbox.snapshot()\nfor i = 1501, 1600 do space:insert({i, str_val}) collectgarbage('collect') end\nbox.snapshot()\nfor i = 1601, 1700 do space:insert({i, str_val}) collectgarbage('collect') end\nbox.snapshot()\nfor i = 1701, 1800 do space:insert({i, str_val}) collectgarbage('collect') end\nbox.snapshot()\n. It is not blocked. Write iterator doesn't explicitly use the last bit of the column mask.. Now it is not only vinyl feature. When the column mask became the part of the key_def, we are able to use column mask in the memtx also.\nSee https://github.com/tarantool/tarantool/commit/f3aeb39832ea517423a578c7c6a5348c97ecf779. svwriteiter will not be fixed, but will be entirely replaced with new vy_write_iterator.\n. See file test/engine/iterator.test.lua, section 'test pairs()'.. The ticket still is actual.. It seems to be fixed in the #1920 patch.. Blocked by #1949 . min, max, count, select etc\n. - It is proposed to return array of merged statements from vy_merge_iterator_squash_upsert instead of one by one. It allows to delete last_not_squashed parameter and optimize last level.\n- Don't use this style:\nC\ndeclare param = value;\nif (condition)\n    param = another_value;\nUse:\nC\ndeclare param;\nif (condition)\n    param = another_value;\nelse\n    param = value;. Duplicate of #2109 . - [x] Implement chunked allocator\n- [x] Use chunked allocator per vinyl\n- [x] Add tests. The ticket is still actual.. Blocked by #2492 . Ticket is 100% not actual. See https://github.com/tarantool/tarantool/blob/084163c3713f065e51a1cb54ff52f748710ab033/src/box/vinyl.c#L3926\nOn the moment of the ticket creation the insertion of a new statement and upserts squashing were in the one function: vy_range_set_upsert, which was called on commit. But now insertion in a mem is doing in vy_prepare and optimization in vy_commit, between which the log write is executed.\nWe could save the insert position in prepare, but it is invalidating after the next insert before vy_prepare.. @kostja means, that we can use n_upserts to check, if there is a sense to optimize upsert.. Blocked by #2503.. Blocked by #946.. The extractor still is not template. And it is needed for #2988.. If run and mem iterators return raw message pack, you can't talk about tuples referencing in these iterators.. Can we use ephemeral tables for this? https://github.com/tarantool/tarantool/issues/3375\nThey do not clog system spaces.. ```Lua\ntarantool> \\set delimiter ;\n\n...\nThis must be default behaviour. A user has not to set delimiter `;` manually.\nAnd please, test, what will happen, for example, on a request like this:\nselect 'select \"abcd\";';\n. I have found two problems:\n1. When I use arrows on my keyboard to get a previous statement, its delimiter `;` is truncated:\ntarantool> select 'select \"abcd\";';\n\n\n\n\n['select \"abcd\";']\n...\n\n\n\ntarantool> select 'select \"abcd\";'\n``\nHere I gotselect 'select \"abcd\";'by pressing keyboard button 'arrow up'. I think, that such history is unusable. It must contain terminating;` as well.\n\nSpaces after ; surpass it.\ntarantool> select 'select \"abcd\";';     \n         >\nHere I put several spaces after ; and disabled its termination meaning.. Please, use the mailing list to send patches. I can not review them here.. Plan: https://docs.google.com/document/d/1FCncEfAVOdqbz9x2UVN02NHVBwdsJPdFSulZxA0CaeA/edit. https://github.com/tarantool/tarantool/commit/b3a3ddb571202c70171ac57a2f831e8bad00bf9b. Part of #2109 . We can not skip oldest LSNs because of recovery without vylog. Need to store LSN per run in run_info or page_info.. Summary for a student:\nGo to parse.y file.\nFind and remove ATTACH DATABASE and DETACH DATABASE, if these commands exists.\nRerun CMake with a flag: cmake . -DSQL_MAINTAINER_MODE=1.\nRebuild Tarantool: make -j.\nRun existing tests to check that nothing is broken: python test-run.py sql/ sql-tap/.\nAdd your own test to one of existing files, or better create a new one for all of this parser things: parser.test.lua for example.\nUpdate .result file of your test.. https://github.com/tarantool/tarantool/commit/0fd1f537b9989ee1ecf330ebbc5e70d9a4e4d367. Why the commit title is \"remove CHANGES()\", but the commit does not remove this function? It should not be available to user I think.. Now truncate is not used even for DELETE FROM table.. When a table has foreign keys, TRUNCATE must not use box_truncate. It must degrade to DELETE FROM.. 'readahead limit' also makes logs unreadable. Completely.. http://www.vldb.org/pvldb/vol11/p432-ramachandra.pdf. Duplicate of #2369. As @kostja decided, we should change behaviour of box_tuple_bsize function to return the whole size, and rename struct tuple.bsize to struct tuple.msgpack_size.. New decision - just create an issue to update the documentation.. @TarantoolBot document\nTitle: Update tuple:bsize() documentation\nIn the documentation it is said that tuple:bsize() returns size of tuple data and struct tuple, but actually it returns only tuple data size.. I think, that we need add IPROTO_LANGUAGE also for IPROTO_CALL, because SQL also has functions, like SUM, AVG, COUNT etc.. @rtsisyk said, that language for 'call' is useless, so do not pay attention to this idea.. We can cherry-pick patch about port.cc -> port.c. Do it at first.. @kostja  review:\nsql_execute -> execute;\n\u043d\u0430\u0434\u043e \u0434\u0435\u0440\u0431\u0430\u043d\u0438\u0442\u044c sql.c \u0443\u0436\u0435 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 \u043b\u0438\u0431\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e sql_execute \u0432 execute.c \u043a\u043b\u0430\u0441\u0442\u044c;\n\u043f\u0430\u0440\u0441\u0435\u0440 \u0441\u0432\u043e\u0439 \u0432\u0440\u043e\u0434\u0435 \u043a\u0430\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c, sql \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0431\u044b\u0432\u0430\u0435\u0442 \u0432 xrow, \u043b\u0443\u0447\u0448\u0435 \u0435\u0433\u043e \u043d\u0435 \u0437\u0430\u0441\u0438\u0440\u0430\u0442\u044c \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u0430;\nport: fix error checking in port_dump MERGE WITH port: implement port_add_tuple and port_add_tuple_xc;\nport: fix error checking in port_dump - \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c;\n. @kostja review:\nIPROTO_DESCRIPTION -> IPROTO_METADATA;\nDATA+METADATA \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c result set;\n\u0411\u0435\u0437 result set \u043e\u0442\u0434\u0430\u0432\u0430\u0442\u044c IPROTO_SQL_INFO: { IPROTO_SQL_ROW_COUNT: number};\n\u0441\u043c\u0435\u0440\u0436\u0438\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b xrow.c \u0432 enum \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0439\u043b\u0430;\nbody_key -> iproto_map_key;\n\u0432\u0441\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441 IPROTO_;. PRAGMA do not raise error, if PRAGMA is unknown. In fact, in the original sqlite I can write:\nsqlite> PRAGMA unexisting_pragma=ON;\nsqlite>\nand there is no an error.. It can't be deleted from memtx_tree.c, since memtx_tree comparators need key_def and is_unique, but bps tree API allows only one additional argument for comparators. So we must use index_def, or something like:\nC\nstruct compare_arg {\n    struct key_def *def;\n    bool is_unique;\n}. In MemtxTree we could create function pointers on each bps_tree function and union with two bps trees, but then each search in the tree will use calling function by pointer. It will slow the searching.\n\nAlso we can create two MemtxTree classes, but they will fully duplicate each other instead of bps functions. It is ugly.\nAlso we can create MemtxTree template c++ class and inherit from it two trees, but then template implementation must be defined in the header file.\nAlso we can create MemtxTree template using #defines, but then the implementation must also be in the header file.\nToo complex changes for deletion of the index_def.. I can reproduce it without yaml.\n```Lua\nfunction deepcopy(orig)\n    local orig_type = type(orig)\n    local copy\n    if orig_type == 'table' then\n        copy = {}\n        for orig_key, orig_value in next, orig, nil do\n            copy[deepcopy(orig_key)] = deepcopy(orig_value)\n        end\n        setmetatable(copy, deepcopy(getmetatable(orig)))\n    else -- number, string, boolean, etc\n        copy = orig\n    end\n    return copy\nend\npattern = {\n    type='record',\n    fields={\n         {type=\"long\"}\n    }\n}\nschema = deepcopy(pattern)\nprev = schema\nfor i=1,36 do\n    table.insert(prev.fields, {type=deepcopy(pattern)})\n    prev = prev.fields[2].type\nend\nschema\n. It is stack overflow. Our stack limit is 56Kb, but in the example above the stack size is >= 57440.. Why `__pairs()`? Why not `pairs()` or `next()`?. If a key was read from a read_iterator, then it appears in a cache. If the same key was updated during reading primary index, then in a secondary index the same key disappears from the cache. So the update can be detected by checking cache. If the key just read from the secondary index has disappeared from the secondary index cache, then it was updated and must be reread.. I have catched the another segfault already on first-second upsert.\ntarantool> space:upsert({200, 100, 200}, {{'+', 2, 300}})\nProcess 86434 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x85f03542)\n    frame #0: 0x0000000100244b9f tarantool`mp_load_u8(data=0x000000000182f228) at msgpuck.h:235\n   232      return data + sizeof(type);                     \\\n   233  }\n   234\n-> 235  MP_LOAD_STORE(u8, uint8_t, mp_identity);\n   236\n   237  #if BYTE_ORDER == ORDER_LITTLE_ENDIAN\n. Error is in read_iterator. It returns tuples in incorrect order.. New error. Maybe linked with this.\n(lldb) bt\n thread #8, name = 'initial_join_0x', stop reason = EXC_BAD_ACCESS (code=2, address=0x7ffef0001200)\n  * frame #0: 0x00007ffef0001200\n    frame #1: 0x0000000102698d94 tarantooltuple_compare(tuple_a=0x00007ffef0000000, tuple_b=0x00007ffeec822200, key_def=0x00007ffeed900048) at tuple_compare.h:88\n    frame #2: 0x00000001026979bb tarantoolvy_tuple_compare(a=0x00007ffef0000000, b=0x00007ffeec822200, key_def=0x00007ffeed900048) at vy_stmt.h:275\n    frame #3: 0x000000010269633a tarantoolvy_run_iterator_next_key(vitr=0x00007ffeec522270, ret=0x00007ffeec522310, stop=0x0000000024c1fbc7) at vy_run.c:1524\n    frame #4: 0x0000000102676efb tarantoolvy_merge_iterator_next_key(itr=0x00007ffeec5210d8, ret=0x0000000024c1fc48) at vinyl.c:7813\n    frame #5: 0x000000010267606a tarantoolvy_write_iterator_next(wi=0x00007ffeec521080, ret=0x0000000024c1fcd0) at vinyl.c:8333\n    frame #6: 0x0000000102680182 tarantoolvy_send_range_f(cmsg=0x00007ffeec601710) at vinyl.c:8870\n    frame #7: 0x000000010274a27d tarantoolcbus_call_perform(m=0x00007ffeec601710) at cbus.c:316\n    frame #8: 0x000000010274a1f8 tarantoolcmsg_deliver(msg=0x00007ffeec601710) at cbus.c:302\n    frame #9: 0x000000010274a7f2 tarantoolcbus_process(endpoint=0x0000000024c1fe50) at cbus.c:385\n    frame #10: 0x000000010274ab05 tarantoolcbus_loop(endpoint=0x0000000024c1fe50) at cbus.c:392\n    frame #11: 0x0000000102665738 tarantoolvy_join_f(ap=0x0000000024c001b0) at vinyl.c:9037\n    frame #12: 0x0000000102601901 tarantoolfiber_cxx_invoke(f=(tarantoolvy_join_f at vinyl.c:9026), ap=0x0000000024c001b0)(__va_list_tag*), __va_list_tag*) at fiber.h:559\n    frame #13: 0x00000001027449eb tarantoolfiber_loop(data=0x0000000000000000) at fiber.c:570\n    frame #14: 0x00000001028d67a7 tarantoolcoro_init at coro.c:110\n(lldb) f 1\nframe #1: 0x0000000102698d94 tarantooltuple_compare(tuple_a=0x00007ffef0000000, tuple_b=0x00007ffeec822200, key_def=0x00007ffeed900048) at tuple_compare.h:88\n   85   tuple_compare(const struct tuple tuple_a, const struct tuple tuple_b,\n   86             const struct key_def key_def)\n   87   {\n-> 88       return key_def->tuple_compare(tuple_a, tuple_b, key_def);\n   89   }\n   90 \n   91   /\n.\nBreakpoint 1: where = tarantoolvy_read_iterator_next + 981 at vinyl.c:8686, address = 0x000000010bd6efe5\nProcess 24815 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x000000010bd6efe5 tarantoolvy_read_iterator_next(itr=0x000000000c170158, result=0x000000000c01fb00) at vinyl.c:8686\n   8683         vy_tuple_compare_with_key(itr->curr_stmt, itr->curr_range->end,\n   8684                           index->key_def) > 0) {\n   8685         while(true) {\n-> 8686             fiber_sleep(1);\n   8687         }\n   8688     }\n   8689 \n(lldb) p vy_stmt_str(itr->curr_stmt)\n[(const char ) $0 = 0x00007fe32c81bcdn(lldb) p vy_stmt_str(itr->curr_range->end)\n(const char ) $1 = 0x00007fe32c81c0d2 \"SELECT([7], lsn=0)\"\n(lldb) p itr->iterator_type\n(iterator_type) $2 = ITER_GE\n```. Tuple is out of the range boundaries.. Fixed in https://github.com/tarantool/tarantool/commit/17eb36d7a2b7024ba5a671a159160f94a2139016. Can not reproduce. Possibly, the problem is not actual. May I close it?. Please, try to remove src/module.h and then rebuild. Sometimes it helps.. Yes. It is well known problem, that module.h must be regenerated after changes in the module api.. Blocked by #1920.. ---------------- \u041f\u043b\u0430\u043d \u043f\u043e gc \u0434\u043b\u044f cord, fiber \u0438 txn.\n-------- \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c fiber.gc:\n\u0423\u0434\u0430\u043b\u0438\u0442\u044c gc \u0438\u0437 fiber, \u0432\u0432\u0435\u0441\u0442\u0438 \u043d\u043e\u0432\u044b\u0435 regions \u0434\u043b\u044f cord \u0438 txn.\n```C\nstruct fiber {\n-   struct region gc;\n}\nstruct cord {\n+   struct region *region;\n}\nstruct txn {\n+   struct region *cord_region;\n}\n```\n\u0412 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 cord.region \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0440\u0435\u0433\u0438\u043e\u043d, \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432 \u0441\u0435\u0431\u0435.\n\u041f\u0440\u0438 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 memtx \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b yield.\n\u041f\u0440\u0438 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 vinyl:\nC\ntxn()->cord_region = cord()->region;\ncord()->region = region_new_in_self();\n\u041d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 yield: swap(txn()->cord_region, cord()->region), \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 yield - \u0441\u043d\u043e\u0432\u0430 swap.\n\u041d\u0430 commit/rollback:\nswap(cord()->region, txn()->cord_region);\nregion_destroy(txn()->cord_region);\n\u041c\u0435\u043d\u044f\u0435\u043c \u0432\u0441\u0435 fiber()->gc \u043d\u0430 cord()->gc.\n-------- \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u043e\u043c fiber.gc:\n```C\nstruct fiber {\n-   struct region gc;\n+   struct region *region;\n}\nstruct cord {\n+   struct region region;\n}\nstruct txn {\n+   struct region *region;\n}\n```\n\u0412 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 fiber.region \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 cord.region.\n\u041f\u0440\u0438 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 memtx \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b yield.\n\u041f\u0440\u0438 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 vinyl:\nC\ntxn()->region = region_new_in_self();\nfiber()->region = txn()->region;\n\u041f\u0440\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438:\nC\nfiber()->region = cord()->region;\nregion_destroy(txn()->region);\n\u0412\u0441\u0435 fiber()->gc \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u043c\u0435\u0441\u0442\u0430\u0445.. -------- \u0412\u0430\u0440\u0438\u0430\u043d\u0442 3: struct region \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u044c txn.\n```C\nstruct fiber {\n-   struct region gc;\n}\nstruct cord {\n+   struct region active_region;\n+   struct region saved_region;\n}\nstruct txn {\n+   struct region region;\n}\ntxn \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u043c\u0435\u043c\u043f\u0443\u043b\u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u043a\u0430\u043a\u043e\u0433\u043e-\u043b\u0438\u0431\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0430.\n\u0412 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `cord.active_region`. \u041a\u043e\u0433\u0434\u0430 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f, \u0442\u043eC\ncord.saved_region = cord.active_region;\ncord.active_region = &txn.region;\n``\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043ecord.active_region. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u043d \u0442\u0430\u043a \u0438 \u043d\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f.\n\u0414\u0430\u043b\u0435\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u044f fiber_yield/fiber_wakeup.\n---- fiber_yield.cord.active_region = cord.saved_region;`\n\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u0430\u0439\u0431\u0435\u0440 \u043d\u0435 \u0437\u0430\u0442\u0440\u043e\u043d\u0435\u0442 \u0440\u0435\u0433\u0438\u043e\u043d \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u0443\u0448\u043b\u0430 \u0432 yield.\n---- fiber_wakeup.\nC\ncord.saved_region = cord.active_region;\ncord.active_region = &txn.region;\n\u0415\u0441\u043b\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u0444\u0430\u0439\u0431\u0435\u0440\u0435, \u0437\u043d\u0430\u0447\u0438\u0442 \u043d\u0430\u0434\u043e \u0435\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c. \u0412 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435, \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0435\u0435 \u0440\u0435\u0433\u0438\u043e\u043d \u0432 cord.\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f. \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0432\u0430\u043b, \u0442\u043e \u044d\u0442\u043e \u043e\u0431\u044b\u0447\u043d\u044b\u0435 yield + wakeup, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 \u0432\u044b\u0448\u0435.\n\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c wal \u0443\u0436\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d. \u0422\u043e\u0433\u0434\u0430 \u0432\u0440\u0435\u043c\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0440\u0435\u0433\u0438\u043e\u043d \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0435\u0433\u0438\u043e\u043d \u043a\u043e\u0440\u0434\u0430:\nC\n+txn_delete() {\n+   region_destroy(&txn.region);\n+   mempool_free(&pool, &txn);\n+}. Can not reproduce after many many executions. Can you, please, update on the latest tarantool version and check, if the bug still exists?. Please, do not forget to describe a request for documentation update here, using TarantoolBot. @Totktonada . The cache do not affect the API.\nWhere to implement:\n- Inside sqlite3Prepare and sqlite3_finalize. Such way allows to use cache both for iproto and lua requests (sql_prepare_and_execute and lua_sql_execute);\n- Inside tarantool as a special subsystem.\nHow to implement:\n```C\nenum { PREPARED_STATEMENTS_MAX = 100 };\nstruct prepared_stmts {\n    hash_t table = new_hash(); / To fast search by SQL. /\n    heap_t heap = new_heap(); / To fast sort by id. /\n    uint32_t id_sequence = 0;\n};\nhash_key_t = const char ; / sql request. /\nhash_value_t = struct {\n    uint32_t schema_version;\n    uint32_t id;\n    sqlite3_stmt stmt;\n};\nheap_key_t = uint32_t; / id. /\nheap_value_t = hash_elem_t;\nIf the statement to prepare is new, then prepare it, save the prepared statement, the current schema version and the current `id_sequence` in the hash and in the heap. If the hash is full, then pop the statement with minimal `id` from the heap and from the hash. If the statement is found in the hash, then check schema version and update its id to the `++id_sequence`.\n- schema version from the hash == current schema version -> use the prepared statement;\n- schema version from the hash != current schema version -> reprepare the statement.. Linked with https://github.com/tarantool/tarantool/issues/3497. See #2435. We are going use pairs() to iterate over result rows. So the ticket is not actual.. Blocked by #2601 . To implement malloc/free wrappers the new quota must be implemented. The existing quota is not useful for each malloc/free, because (1) its precision is 1024 bytes and (2) it is thread-safe and uses patomic.\nKey idea is to implement special quota leaser, which gets big blocks from the global runtime quota and splits them into small blocks. The big block getting will be rare and thread-safe, while small block getting (leasing) will be frequent and per each malloc.C\nstruct quota_lessor {\n    struct qouta *source;\n    uint32_t available;\n};\nint\nquota_lease(struct quota_lessor *lessor, uint32_t size);\nvoid\nquota_end_lease(struct quota_lessor *lessor, uint32_t size);\n``. We realized, that\n1)Free()` does not explicitly know size of a memory to free.\n2) A malloced memory can travel into another thread and can be freed in its quota != original thread quota.\nProposals:\n1) Add 8-byte header for each malloc and store size here. Or pass malloced size in free().\n2) It is ok, because the freed in another thread memory will be returned to the one global runtime quota anyway.\n. Linux: http://man7.org/linux/man-pages/man3/malloc_usable_size.3.html\nMacOS: https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man3/malloc_size.3.html\n. (lldb) bt\n* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT\n  * frame #0: 0x00007fffabeb3d42 libsystem_kernel.dylib`__pthread_kill + 10\n    frame #1: 0x00007fffabfa1457 libsystem_pthread.dylib`pthread_kill + 90\n    frame #2: 0x00007fffabe19420 libsystem_c.dylib`abort + 129\n    frame #3: 0x00007fffabde0893 libsystem_c.dylib`__assert_rtn + 320\n    frame #4: 0x00000001000a24fc tarantool`vy_cache_add(cache=0x0000000000503cd8, stmt=0x0000000000321af0, prev_stmt=0x0000000000321ac0, key=0x000000001ae150d0, order=589505315) at vy_cache.c:329\n    frame #5: 0x000000010009e3eb tarantool`vy_read_iterator_next(itr=0x0000000002130328, result=0x000000000212fad8) at vy_read_iterator.c:1399\n    frame #6: 0x0000000100061756 tarantool`vy_cursor_next(env=0x0000000000804200, c=0x0000000002130230, result=0x000000000212fb18) at vinyl.c:4930\n    frame #7: 0x00000001000578e9 tarantool`iterator_next(base_it=0x000000001ae08840) at vinyl_index.cc:164\n    frame #8: 0x0000000100044d80 tarantool`Handler::executeSelect(this=0x0000000000503460, (null)=0x0000000000000000, space=0x00000000005038c0, index_id=0, iterator=4, offset=0, limit=10, key=\"?, (nullport=0x000000000212fd70) at engine.cc:203\n    frame #9: 0x00000001000d790b tarantool`::box_select(port=0x000000000212fd70, space_id=512, index_id=0, iterator=4, offset=0, limit=10, key=\"\\x91?, key_endat box.cc:775\n    frame #10: 0x0000000100103ba1 tarantool`lbox_select(L=0x0000000000784068) at misc.cc:94\n    frame #11: 0x00000001001535eb tarantool`lj_BC_FUNCC + 52\n    frame #12: 0x000000010017eea3 tarantool`lua_pcall(L=0x0000000000784068, nargs=0, nresults=0, errfunc=0) at lj_api.c:1129\n    frame #13: 0x0000000100118643 tarantool`luaT_call(L=0x0000000000784068, nargs=0, nreturns=0) at utils.c:931\n    frame #14: 0x0000000100111d55 tarantool`lua_fiber_run_f(ap=0x0000000002000670) at fiber.c:264\n    frame #15: 0x0000000100004521 tarantool`fiber_cxx_invoke(f=(tarantool`lua_fiber_run_f at fiber.c:259), ap=0x0000000002000670)(__va_list_tag*), __va_list_tag*) at fiber.h:644\n    frame #16: 0x000000010012897b tarantool`fiber_loop(data=0x0000000000000000) at fiber.c:626\n    frame #17: 0x00000001002ba0d7 tarantool`coro_init at coro.c:110. Forget my patch. It will not work. At first, we should learn which columns odbc really needs. I know about autoincrement only (like mysql last_insert_id). We should find other values, store them and return via iproto.. \u0414\u0435\u0442\u0430\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 obuf/port \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 func_call, box_lua_call, box_lua_eval, box_process_call, box_process_eval \u043d\u0430 \u043f\u0441\u0435\u0432\u0434\u043e\u043a\u043e\u0434\u0435 \u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 git diff:\n```C\n/ call.c /\nstatic int\nexecute_lua_eval(...)\n{\n-    if (iproto_prepare_select(out, svp) != 0)\n-    ctx->out_is_dirty = true;\n+    if (box_function_init_mem(ctx) != 0)\n\nmpstream_init(&stream, out, obuf_reserve_cb, obuf_alloc_cb,\nluamp_error, L);\nmpstream_init(&stream, ctx, box_function_reserve_mem, box_function_alloc_mem,\n\nbox_function_abort, L);\n\n\niproto_reply_select(out, svp, request->header->sync, schema_version,\n\nnrets);\nbox_function_finalize_mem(ctx);\n}\n\nstatic int\nexecute_lua_call(...)\n{\n     / Same. /\n}\nstatic inline int\nbox_process_lua(...)\n{\n-    if (ctx.out_is_dirty) {\n-        / ... /\n-    }\n+    box_function_abort(ctx);\n}\n/ iproto.cc /\nstatic void\ntx_misc_finalize_mem_cb(void arg, size_t size)\n{\n     struct box_function_ctx ctx = (struct box_function_ctx *) arg;\n     assert(ctx->is_raw_mem_enabled);\n     iproto_reply_select(ctx->out, ctx->svp, ctx->request->header->sync, schema_version, size);\n}\nstatic void\ntx_process_misc(struct cmsg m)\n{\n        / Presudocode /\n        box_function_ctx ctx;\n        box_function_ctx_init(msg->request, out /obuf/, ctx / fin arg /, tx_misc_finalize_mem_cb);\n       / Further almost the same as is. */\n}\n/ box.cc /\nint\nfunc_call(struct func func, struct request request, struct obuf out)\n{\n-    / Create a call context */\n-    struct port port;\n-    port_create(&port);\n-    auto port_guard = make_scoped_guard(&{ port_destroy(&port); });\n-    box_function_ctx_t ctx = { request, &port };\n\n/ Push results to obuf /\nstruct obuf_svp svp;\nif (iproto_prepare_select(out, &svp) != 0)\n\ngoto error;\n\n\nif (request->type == IPROTO_CALL_16) {\n\n/ ... /\n} else {\n/ ... /\n}\nif (box_function_finalize(ctx) != 0) / Incapsulate the logic about IPROTO_CALL into finalizator. /\ngoto error;\n}\n```. I can not find, where JDBC requires COLLATION, UNIQUE, IS_PK fields on SELECT.. In the patchset of the ticket IPROTO_FIELD_NAME has been changed to 0 from 0x29 - it must be documented together with new metadata keys after push into 2.0.. And IPROTO code changes must be applied in Java driver.. In progress, but already opened for comments and discussion.\n\nWhy?\n\n\nA client must not know which instance is master, and which is replica - these\ndetails must be hidden behind a proxy.\n\n\nWhen multiple clients exist, their client-to-proxy connections could be\nmultiplexed into more 'fat' proxy-to-storage connections.\n\n\nMain solved problems\n\n\nConnections can not be multiplexed, if they contains different credentials.\nEach 'fat' connection must serve only one Tarantool user (literaly user, from\nspace._user).\n\n\nProxy must use its own sync values, because multiple client-to-proxy\nconnections, multiplexed in a single proxy-to-storage connection, can send\nconflicting syncs. So the proxy must replace these syncs with its own when\nsending requests to a storage, and replace them back, sending response to a\nclient. This mechanism in a manner similar to NAT must work per one\nproxy-to-storage connection.\n\n\nIf a proxy is run in the same process as a replicaset master, then all its\nrequests must be sent to a master directly via cbus, with no overhead on sockets\nIO. It is the killer-feature of the Tarantool proxy.\n\n\nAPI\nProxy is a module, and can be configured like this:\nLua\nproxy = require('proxy')\nproxy.cfg{\n    replicaset = {\n        { uri = <instance URI>, is_master = <boolean> },\n        ...\n    },\n    -- Options, keept from storage --\n    listen\n    readahead,\n    log,\n    log_nonblock,\n    log_format\n}\nProxy on cfg with set listen starts an IProto thread, or joins to an existing\none, if box.cfg is already called and a master in proxy configuration is\nexactly this instance. All options are static on the first implementation.\nArchitecture\nclient, user1 ------*\n ...                 \\           proxy              master\nclient, user1 --------*----------* - *----------------*\n                         ---- SYNC -> proXYNC ---->\n                         <--- SYNC <- proXYNC -----\nConnecting, authorization\nAll proxy internals can be implemented inside IProto thread. Only\nconfiguration/reconfiguration details must stay in TX thread.\nIProto thread when started, knows which port is proxy, and to which storages it\nmust proxy incomming connections. IProto thread establishes connections to all\nstorages under a guest user, with no IPROTO_AUTH request. Despite of the fact\nthat proxy sends all requests to a master, it must be able to do fast failover\nto one of replicas. So it must connect to slaves too.\nOn connect a proxy for each proxy-to-storage connection saves salt - name it\nstorage salt further. When a client is connected, a proxy sends to him its\nown proxy salt, different from a storage salt.\nThen the client sends IPROTO_AUTH request. A proxy extracts a user name from the\nrequest, looks up in its local credentials storage for a password hash, salt it\nwith the proxy salt and compares them. If they mismatch, then authorisation\nerror is sent to a client. If they match, then salt the password hash with the\nstorage salt.\nThen search for a proxy-to-storage connection under the same user. If found,\nthen this modified IPROTO_AUTH request is sent to it. Further\nall requests are proxied with no changes.\nIf there is no a connection under this user, then create a new one.\nNote: if a proxy has out of date passwords, then authorization can be\nsuccess on a proxy, but not success on a storage. This is because each new\nclient-to-proxy connection must check a password again.\nSync translation\nIf a proxy-to-storage connection serves one client-to-proxy connection, then\nsync translation is not needed - there are no conflicts.\nWhen a proxy-to-storage connection serves multiple client-to-proxy connections,\nthe first one stores and maintains increasing sync counter. Consider the\ncommunication steps:\n1. A client sends a request to a proxy with sync = s1;\n2. A proxy remembers this sync, changes it to sync = s2, sends the request\nto a storage;\n3. A response with sync = s2 is received from the storage. The proxy replaces\ns2 back to s1 and sends the response to the client.\nQueuing\nConsider one proxy-to-storage connection. To prevent mixing parts of multiple\nrequests from different client-to-proxy connections, a proxy must forward\nrequests one by one. To do it fairly, a proxy-to-storage connection has a queue.\nIn the queue client-to-proxy connections are stored, those sockets are available\nfor reading.\nWhen a client socket with no available data becomes available for reading, it\nstands at the end of the queue. First client in the queue after sending ONE\nrequest is removed from a queue. If it has more requests, then it stands at the\nend of the queue to send them. It guarantees a fairness if one client will be\nalways available for reading.\nTo speed up sync translation, it can be done right after receiving a request\nfrom a client, with no waiting until a proxy-to-storage connection is available\nfor writing. It allows to do not dawdle with syncs when a client appears in\nthe front of the queue.\nStorage and proxy alliance\nThe main feature of the proxy is ability to merge a proxy and a storage. If in\nthe same process a master storage with no box.cfg.listen and a proxy are\nstarted, then the proxy could send requests to the master with no sockets,\ndirectly via cbus. To do it, a proxy on start must check, that UUID of a master\nin its proxy.cfg.replicaset is the same as the local UUID. If it is true, then\nall requests are sent directly to tx_pipe.. @kostja comments:\n- proxy must not do any automatic things - neither detect master change or initiate it;\n- some remarks about authorisation, that I can not understand now;\n- proxy must be a fully separate module;\n- look at another proxies: MariaDB proxy, haproxy, MySQL Router for MySQL, proxysql, redis-proxy, redis-sentinel;\n- cite:\n```\nAh, almost forgot: the proxy configuration should make it possible\nto forward some requests to the same tarantool which is operating\nthe proxy, without a round trip to the operating system/socket\ninterface. In other words, if one of the instances in proxy configuration\nis a loopback, the proxy should not need to perform any network\nI/O to deliver data to its local node, but push it right into tx\nthread.\nThis would make it possible to entirely replace box.cfg{listen=}\nwith require('proxy').listen() and make box.cfg{listen=}\nobsolete.\n. It is not possible. Test case, that provides, that a call is not retried:Lua\n-- Input\nbox.cfg{listen = 3313}\ncount = 0\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\nfunction do_smth()\n    count = count + 1\n    box.schema.create_space('test')\nend\nn = require('net.box')\nc = n:connect(3313)\nc:call('do_smth')\n```\n```Lua\n-- Output\ntarantool> c:call('do_smth')\n\n...\ntarantool> count\n\n1\n...\n. Since the ticket is not actual, I propose to close it.. I added a test in commit https://github.com/tarantool/tarantool/commit/e0f9cdc8dd4c3f326921c5dd7d717e6864a8bade. We cannot use box.session.push for console. Only for iproto, because now call/eval can not be used without iproto. The ticket #2619 proposed a refactoring, which could allow it, but you closed it. Summary: box.session.push can not work locally.. ## APILua\n--\n-- Send a message to a client with no finishing a request.\n-- @param data Data to send.\n-- @param opts Push options: {sync = }. Sync must be the same as in an\n--        original request.\n--\nbox.session.push(data, opts)\n```\n\nWhy is it needed?\nSometimes it is needed to send some intermediate results from long\npoll request. Or to create a watcher on a server side, which\nlistens for some events and sends notifications to a client.\nDesign and implementation\nCommon algorithm is quite simple: box.session.push encodes a\nmessage in IPROTO_PUSH key and sends it to a client socket.\nClient socket can be in a text mode (a client sends Lua code as a\ntext, and expects the same result as from Lua console), and in a\nbinary mode.\nIn a binary mode a socket can not be accessed directly by TX\nthread. And push must write its data into obuf, not to socket.\nObuf is not accessible from a session, so it is proposed to add\niproto to a struct session as a member of struct session owner.\nAnother issue with iproto is that just writing into obuf is not\nenough to triggers its flush into a socket. TX thread must notify\nIProto thread about new data. It can be done via special cmsg.\nIn a text mode a socket can be accessed from TX thread, so it is\nenough to write into it in blocking mode right in push call.\nAs the summary, there are at least two push types. Lets do it as\na virtual function in a struct session:\n```C\n/ session.h /\nstruct session_owner {\n    enum session_type type;\n    int (push)(struct session_owner owner, uint64_t sync,\n            struct port *port);\n};\nstruct session {\n-   int fd;\n-   enum session_type type;\n+   struct session_owner *owner;\n};\n/ iproto.cc /\n/\n * After a message notifies IProto thread about pushed data, TX\n * thread can have a new data in one of obufs. This function\n * checks for new pushes and possibly resends push notification\n * to IProto thread.\n /\nstatic void\ntx_end_push(struct cmsg msg);\nstatic const struct cmsg_hop push_route[] = {\n    { net_send_msg, &tx_pipe },\n    { tx_end_push, NULL }\n};\nstruct iproto_push_msg {\n    struct cmsg base;\n    struct iproto_connection *connection;\n};\nstruct session_owner_binary {\n    struct session_owner base;\n    bool has_new_pushes;\n    struct iproto_push_msg push_msg;\n    struct iproto_connection *connection;\n};\nvoid\ntx_end_push(struct cmsg msg)\n{\n    struct session_owner_binary session =\n        container_of(msg, struct session_owner_binary, push_msg);\n    if (session->has_new_pushes) {\n        cmsg_init(push_msg, push_route);\n        cpipe_push(&net_pipe, push_msg);\n        session->has_new_pushes = false;\n    }\n}\nint\niproto_session_push(struct session_owner owner, uint64_t sync,\n            struct port port)\n{\n    struct session_owner_binary session =\n        (struct session_owner_binary ) owner;\n    session->has_new_pushes = true;\n    / ... encoding, sending to iproto ... /\n}\n/ console.c /\nstruct session_owner_console {\n    struct session_owner base;\n    int fd;\n};\n```\nWhen a session is actually a binary connection, push() will store\ndata into obuf in iproto_connection. When a session is text,\npush() writes into a socket.. 1) Because fiber already stores session in its fiber local storage. Session already stores latest sync. So adding sync directly to a fiber storage leads to storing two syncs.\n2) Storing sync directly in struct fiber is strange, because in a common case a fiber is not linked with any remote long polling requests. It can be fully local. If you look at struct fiber, you do not see there any application specific things.\n3) You still can create a new fiber from a long polling request, and it is not obviously, must we set its sync to the same value, as in a \"father\" fiber, or not.. Mostly I do not like the first reason - store two syncs in a one place is a bad idea. Sync as argument is not a big deal - you can get your sync from box.session.sync(). If in a future it will be possible to set sync automatically, then perhaps we must move sync argument to push() options to be able to make it optional at any moment.\nLua\n--\n-- Send a message to a client with no finishing a request.\n-- @param data Data to send.\n-- @param opts Push options: {sync = <number>}. Sync must be the same as in an\n--        original request.\n--\nbox.session.push(data, opts). >> What if the fiber was \"weakly mapped\" to sync? Then box.session.push could map fiber.self to the proper sync.\n\nAs @funny-falcon said, it is the same, as storing sync inside a fiber.\nIt is additional overhead to maintain this map (fiber count can be huge).. >> And don't forget about C api, Swift, Rust, etc.\n\nFor this we need to ask @kostja. Now there are no session methods in a public API. In C you even can not get sync in a stored function. If we want to add C API for this, we must add at least two methods:\n```C\nint\nbox_session_push(uint64_t sync, const char *data, uint32_t size);\nuint64_t\nbox_session_sync();\n. In this C API I do not like that sync can not become optional in a future.. @aleclarson my proposal is return OK, if a message was wrote into an output buffer, like it is done in the `write()` syscall. But anyway, the final decision is rest with @kostja.. I paste here @kostja comments:\nIt's ok if pushers work with the sync explicitly.\nbox.session.push() should also work over text protocol.\nPlease also describe what happens (and how you're going to\nimplement) if push is invoked when there are no sessions\n(replication, background fibers, start script - please check\nbox.session.type() for details.\n. @TarantoolBot document\nTitle: Document box.session.push() and IPROTO_CHUNK code\n`box.session.push` is the API to send out of bound responses. Actually it is API for server -> client streaming.Lua\n--\n-- Push an object to the client with no request finalisation.\n-- @param data_to_push Any Lua object to send to the client.\n-- @param sync Sync of the parent request.\n-- @retval nil, err Error occurred. The error object is returned in the\n-- second value.\n-- @retval true Push message is written to the network buffer. Like\n-- libc write() to the socket.\n--\nbox.session.push(data_to_push, sync)\n``\nTo get the second parameter -syncyou should at the beginning of the request save result ofbox.session.sync()into a local variable, and use the saved value as the second push argument.\nWhen the session is binary, the data is sent with the same sync as the request usingIPROTO_CHUNK = 128code in the packet header. When the session is text, YAML tag is used for pushed data:%TAG !push! tag:tarantool.io/push,2018`, and on the client side the message is just printed to the stdout.\nNetbox supports pushes in two ways.\nFor any sync request (DML, call, eval - no matter) you can specify two options: on_push and on_push_ctx. When in the scope of the request a push message is received, on_push is called as on_push(on_push_ctx, new_message).\nFor async request (when is_async option is set and true) you can not specify on_push_[ctx], but can iterate over messages using this syntax:\nLua\nfuture = connection:<method_name>(<method_args>, {is_async = true})\nfor i, message in future:pairs(<per_step_timeout>) do\n    -- Process the messages and the final result.\nend\nHere pairs takes one optional argument - timeout per iteration. If no a new message or the final response during this timeout, the error is returned to the cycle. To check for an error a one can use i - the first loop parameter above. If i == nil (actually it is box.NULL - pure nil can not be returned as a loop key due to Lua language limitations) then message is actually the error object. You can check its type and error code like for any Tarantool error. For details see message:unpack(). After an error the iteration is stopped.. @Totktonada iteration is continued automatically on timeout only. And after this error it can be worth to continue reading.. It is not actual. Can I close it?. \"I'm using the server as a console.\nThis means that I don't have to send all requests\non one line or put them a function,\nI can do individual requests.\"\nIt is incorrect assumption. Interactive transactions do not work via console connection. You can check it, if call box.space.Q:select() right after insert():\n```\nunix/:/tmp/tarantool-test-console.sock> box.begin()\n\n...\nunix/:/tmp/tarantool-test-console.sock> box.space.Q:insert{1}\n\n[1]\n...\n\nunix/:/tmp/tarantool-test-console.sock> box.space.Q:select{}\n\n[]\n...\n```. Possibly because complete rollback can not fail by definition? And because box.savepoint() returns a savepoint object which can be used to rollback to it. What must box.savepoint() return if there is no an active transaction? If it returns not real savepoint object, then box.rollback_to_savepoint() fails. If it returns nil (same as return nothing), and we allow to give nil to box.rollback_to_savepoint() and make this operation as noop, then box.rollback_to_savepoint with no arguments would work without errors. It is not clear too.\nI think, it is temporary non-consistent effect, which will be fixed by #2016.. Proposals:\nAdd space_name or space_id to struct tuple_format special for this error messages;\nAdd space_name or space_id to tuple_validate_raw, tuple_field_with_type, tuple_field_i64, tuple_field_u32, tuple_next_xc, tuple_next_u32_xc and to all similar functions;\nAdd optional space_name to tuple_validate_raw and to tuple_init_field_map. It allows to validate all tuples on insertion and on update. And do not show space name in other cases.\n\nI vote for 3.\nNote, this error message can be shown for tuples from spaces, which were already dropped or for tuples with no source space. Or for spaces on bootstrap, when spaces cache building can be not finished.. Blocked by #1148. Test case.\nFirst tarantool:\nLua\nbox.cfg{listen = 3314}\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\ns = box.schema.space.create('test')\npk = s:create_index('pk')\nsk = s:create_index('sk', {parts = {2, 'unsigned'}})\nerrinj = box.error.injection\nerrinj.set(\"ERRINJ_RECOVER_XLOG_LIMIT\", 2)\nSecond tarantool:\nLua\nbox.cfg{replication = 3314}\nFirst tarantool:\nLua\nbox.begin() s:replace{1, 1} s:replace({2, 2}) s:replace({3, 3}) box.commit()\nSecond tarantool:\n```Lua\ntarantool> box.space.test:select{} -- must be 0 rows.\n\n\n\n\n[1, 1]\n\n\n[2, 2]\n...\n```. What to do with adding a new fields to a not empty space?\nForbid. Then bootstrap fails - system spaces at first are built and then formatted.\nAllow. Then an user can add a field with a such type to a format, that an existing tuple can be invalid for a new format. Then restart fails, on bootstrap also (on select for vinyl).\nAllow for memtx, disable for vinyl. For memtx go through all primary index tuples and check that a new field type is ok.. @kostja  I already have started review. Please, let me finish.. Proposal:\n1) Allow to specify format for not existing and not indexed fields.\n2) Such fields must have attribute 'is_nullable = true', because in lua access to such not existing fields will return 'nil'. So it seems logically to specify that they are nullable.. @Igorjan94 I think, that there must be either error on such format (with no 'type='), or correct processing (allow to do not write 'type=').\nBut here I wrote type='unsigned', and there is no error and the real type became 'any'.. You use modules in wrong way. When you define a function from '.so', you must prefix it with .so name. For example, when you load hello_swift_native() from libtest_loading_library.so, you must register this function as follows:\nLua\n-- Server --\nsw_mod = require('test_loading_library')\nbox.schema.func.create('test_loading_library .hello_swift_native', {language = \"C\", if_not_exists = true})\n\nAnd use as below:\nLua\n-- Client --\nc:call('test_loading_library .hello_swift_native')\nAnd I can not understand, how it works now, even if you add full path to .so to cpath. On my laptop it does not work. Only method that works is described above.\nThere is a proposal, while is not discussed with @kostja to add an option to func.create like cpath=... to declare a path to function not in its name. For example:\nLua\nbox.schema.func.create('hello', {language = \"C\", cpath = 'test_loading_library .hello_swift_native'}). @tonyfreeman I too talk about C. Module contains C function, which you register in func.create and then call via iproto. And for this functions you must use .so file name prefix, as I described above.. Or, you can \ud83d\udc4d my comment about cpath option for func.create, and perhaps @kostja would allow \nadd this option.. Talking about tutorial in https://tarantool.org/en/doc/1.7/tutorials/c_tutorial.html, it is not specified, but actually when you do not specify module name prefix (func instead of module_name.func), then func name is used as a prefix (func.func is used instead of func). This is because easy() function works in tutorial - because module name is too easy, and function easy.easy() exists.\nIn the first comment (about swift) it does not work, because @aensidhe registers function with no prefix and Tarantool tries to find it in hello_swift_native module, which does not exist. And this is because your code works with prefix, but does not work without.\nLua\n-- works without the library name in cpath\nbox.schema.func.create('function1_module.function1', {language = \"C\"}). Sorry, @kostja does not want to add cpath to func.create. The bug is moved to the documentation.. @tonyfreeman  Perhaps, it is luajit problems, which is very hard to change. Vote for this https://github.com/tarantool/tarantool/issues/3141, if you want more useful stored functions.. As I can see, ?N must be removed, and $V must be converted into $N. Other things must be kept.\n? - used in MySQL, :V - used in Oracle, @v - used in MySQL, MS Server.. It seems like you store in options of one of your spaces some data not allowed by a format. Can you please show your _space content? (You said, that you still have the same schema working on a production). It can be done by box.space._space:select{}.. I right now had tried to run 1.7.5 from 1.7.6 snapshot using force_recovery = true, and it has started ok.. Write me in the Telegram (@gerold103). I have wrote a script that can help.. It must not reconnect automatically. It has option 'reconnect_after', if you needed reconnection.. Type of an error does not matter, if you do not use reconnect_after option. In any case it will not reconnect automatically. The ticket must be closed.. @Korablev77 is this issue still actual?. My proposal:\n```C\n// txn.h\nstruct txn {\n+     void *sql_txn;\n};\ntxn_begin() {\n+     txn->sql_txn = NULL;\n}\n// sql files\n+ struct sql_savepoint {\n+     struct txn_savepoint savepoint;\n+     char name;\n+};\n\nstruct sql_txn {\nstruct mhash sql_savepoints;\nstruct trigger on_commit;\nstruct trigger on_rollback;\n};\n```\nAdd void *sql_txn to struct txn. Pointer to void must be used instead of explicit struct sql_txn because txn.h must not depend on any languages. And because struct txn can exists without sql;\nIn sql files define struct sql_savepoint which contains struct txn_savepoint * as member and char *name. Store named hash of savepoints in sql_txn - it allows to do not store names out of sql;\nsql_txn must contain on_commit and on_rollback triggers, becase a transaction can be started from sql, but commited from lua. In such a case sql_txn must be correctly destroyed. (On a first phase of implementation sql_txn consists of only savepoints on region, so on_commit/on_rollback can be added later and commit from lua can be ignored by sql).. It is a big matter, must we add tuple formats to a binary protocol or not. Consider both variants:\n\nDo not change protocol. Only Lua and netbox hacks.\nIf the binary protocol does not support format then, CALL/EVAL requests can not return tuples with names. Formats and field names for DML/DQL results can be build on a client side. (Via either switching netbox to box.tuple + tuple_format from lua tables, or adding names as attributes of lua tables);\nExtend binary protocol. IPROTO_TUPLE_FORMAT.\nIf the binary protocol supports format, then any tuple returned from any request can have names and other format features on a client side. But this extends the binary protocol in a complicated way with at least two problems:\n There are several requests, that return multiple tuples as array of arrays. And there is no place to insert a new field - format content or format id for each tuple. Two decisions of the problem exist:\n    * Reuse IPROTO_METADATA to store format identifiers for each tuple in the packet header like in SQL is done;\n    * Change format and store each tuple as map: {IPROTO_METADATA: <tuple_format>, IPROTO_TUPLE: <tuple_data>}. To provide back compatibility by default use the old protocol with no IPROTO_METADATA for each tuple. And to switch to a new protocol add a new iproto command: IPROTO_CTL, which apart from subcommands in #3055 will have IPROTO_CTL_RETURN_TUPLE_META: <boolean> subcommand.\n How to send tuple formats to a client? They can not be returned with each response because it is too expensive. And how to identify formats - by identifiers from a server, or generate another identifiers on a client? There are several decisions:\n    * The first and the most correct as I think - return tuple formats as results of IPROTO_CTL_RETURN_TUPLE_META: true;\n    * Add a new system temporary readonly space _format and simply select from it to get formats (including identifiers, nullability, types, names, is_key_part ...). A client must select formats, send IPROTO_CTL_RETURN_TUPLE_META: true to a server and use formats;\n    * Introduce a new iproto command: IPROTO_GET_FORMATS. It seems to be a crutch;\n    * Do not use identifiers from a server formats. Build them on a client side from _space and _index, and with each tuple return not format identifier, but space identifier (in IPROTO_METADATA).. With @kostja we have decided to do not modify a binary protocol. And it is enough to provide names for DML/DQL responses. Tuples, returned from it, must have tuple format with corresponding names. And a new problem is that tuple formats count is limited by UINT16_MAX. So if an instance have about 10k connections, tuple format count is already too big. The raw idea is to store tuple formats per connection. And do not store them in a global array - it is not necessary for tuples on a client side.. The same optimization can be applied to REPLACE. But it requires additional column mask calculation - now a REPLACE does not calculate column mask.. We have decided to remove 'is_optional' from key_part.. It is called, when outstanding input is processed. Test case:\n```Lua\n-- Server --\nbox.cfg{listen=3313}\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\ndisconnected = false\nlong_is_in_progress = false\nlong_fiber = nil\nfiber = require('fiber')\nfunction set_on_disconnect()\n    box.session.on_disconnect(function() disconnected = true end)\nend\nfunction long_poll()\n    long_fiber = fiber.self()\n    long_is_in_progress = true\n    fiber.sleep(3000)\nend\n-- Client --\nnetbox = require('net.box')\nfiber = require('fiber')\nc = netbox:connect(3313)\nc:call('set_on_disconnect')\nfiber.create(function() c:call('long_poll') end)\n```\nThen close connection from client:\nLua\nc:close()\nOn the server iproto_connection_close() is called. Then cancel the long fiber (which makes connection in not idle state).\nLua\nlong_fiber:cancel()\nRight after that the on_disconnect is called, and disconnected flag is set to true.. Closed in 32f1c3489990. More proposals for memtx:\n- Do not rebuild unique non-nullable index, if a new field is appended to parts - index can not change order;\n- Do not rebuild index, if non-nullable is changed to nullable for some fields;\n- Do not rebuild index, if a new part type values include values of an old part type (take into account not index parts only, but other parts and format).. Proposal:\nSpace creation initializes empty names storage.\nSpace alter checks, if any field has changed its name. If it did, then create ModifySpaceFormat operation. ModifySpaceFormat refs names hash in old names storage, creates a new names hash in the same names storage.\nModifySpaceFormat::rollback returns old names hash to the names storage.\nModifySpaceFormat's destructor deletes saved names hash.\nTuple format refs names storage in tuple_format_new.. * We can not pass region data. The tuples live time is longer, the a transaction live time. But region is truncated after transaction is finished.\n* Wal writes not tuples, but specially encoded structures (see struct xrow_header and xrow_encode_dml). And a tuple data is encoded here within a message pack map with key IPROTO_TUPLE. So it is not enough to reference tuple and pass its raw data. The entire xrow encoding mechanism must be redesigned to do it. And in any case tuple data will be copied during encoding xrow_header - it will be done either in tx thread or in wal thread. And the second case is even slower, because Wal thread has single fiber which will encode rows from all transactions, but tx thread is multifiber, and it encodes rows in different fibers - one per transaction. It allows to encode new rows in new transactions, while Wal thread is busy by commited transactions.\n  . Ok, I understood, that the first proposal is not for tuples, but for OP_MakeRecord and raw tuple data in btree payload. For this goal the proposal seems to be ok.. @TarantoolBot document\nTitle: box.error.new() - create an error object with no throw\nbox.error.new(error_code, args) - the way to create an error object and do not throw it, but just return as the simple object. It is useful when an error object must be saved to be got later, for example.\n``` YAML\ntarantool> e = box.error.new(box.error.CREATE_SPACE, \"space\", \"error\")\ntarantool> e\n\n\n'Failed to create space ''space'': error'\n...\ntarantool> e:unpack()\n\n\n\ntype: ClientError\n  code: 9\n  message: 'Failed to create space ''space'': error'\n  trace:\nfile: '[string \"e = box.error.new(box.error.CREATE_SPACE, \"sp...\"]'\n    line: 1\n...\n```. The problem is that tuple:update() creates a new tuple on runtime format, which has no names and is not linked with the original format.\nThere are two proposals:\nLets create a new tuple in update() with the same format that the original tuple has. It requires to allocate a new tuple on the same allocator, that the original tuple, because together with the format it inherits the destructor. The weak point is that memory for indexes is wasted for tuples which are actually runtime.\nLets store with each tuple_format another \"shadow\" format, which is the copy of the original one, but with default extra_size, field_map_size, field_count, fields and other tuple_format attributed except tuple dictionary. And its vtab.destroy works like runtime format's vtab destroy. When tuple:update() (/slice/transform/upsert) is called, it creates a new tuple with this shadow format. The shadow format can be created on demand to do not waste memory when a user does not use Lua tuple methods.\n```C\nstruct tuple_format {\n    / ... /\n/**\n\n\nA special tuple format to provide names of\n\n\n\n\nthe original format to runtime tuples.\n\n\n*/\nstruct tuple_format shadow;\n    / ... /\n};\n``. No, it is bad idea. Any service tuple_formats except global and space ones can clog the global tuple_format array.. Another idea is to create not new formats, but create astruct runtime_tuplewith hidden fieldstruct tuple_dictionary dict` and format_id == runtime\nformat id. When a runtime tuple is created, it references both a tuple_format\nand a dictionary. When field name is accessed, it uses direct pointer to the\ndictionary. On destroy it unreferences the dictionary.\n\nC\nstruct runtime_tuple {\n    struct tuple base;\n    struct tuple_dictionary *dict;\n}. After discussion with @kostja it is decided to allocate these tuples on the same allocator.\nIn the struct tuple_format virtual table a new method appears: struct tuple *(*new)(struct tuple_format *format, const char *data, uint32_t size);, which allocates a new tuple on the same allocator and with the same format. It will be used in Lua for results of tuple:update/upsert/transform. The another found problem is that this approach forces to respect tuple format restrictions. And if they are violated, then tuple:update fails.. ### Basic algorithm\nbox.ctl.promote() - a function to make the current replica to be master of a\nfullmesh replicaset. Master is a replica in read-write mode. Slave is a replica\nin read-only mode.\n1. Check mode of the replica: if it is already read-write, then follow through\n  on the steps of the algorithm to ensure all other replicas are read-only.\n2. Else a current master must be found by map-reduce via replication connections\n(details of replication connections usage are described below).\n3. If a found master already works with another box.ctl.promote, then a new\nbox.ctl.promote is aborted.\n4. If a master is found, set him to a read-only mode for timeout T seconds. The\nfound master remembers that his state is neither master or replica - this state\nis used in (3) to abort new box.ctl.promote calls.\n5. Wait full sync of data on the just disabled master. If time is out of T\nseconds, then abort: the old master automatically enters back in read-write\nmode, and the current replica finishes sync. If full sync is ok, then make the\nold master be replica and enter in read-write mode.\nVarious problems\nObviously, there are no problems, if:\n- a replica is down before sending any requests to a master - algorithm did not\n  manage to start;\n- a replica is down after a master respond with ok, and box.ctl.promote\n  returned OK - algorithm is already finished.\nAssume, an old master is down when he was syncing in read-only mode. In such a\ncase when it is restarted, it is back in read-write mode, because configuration\nis not persisted. A replica, called box.ctl.promote, returns error after T\nseconds, used as timeout.\nAssume, a replica, called box.ctl.promote, is down, when an old master already\nfinished sync and entered read-only mode. Then the cluster becomes read-only. This case is not distinguishable from one when a new master fails right after box.ctl.promote.\nImplementation\nA host, on which box.ctl.promote is called, must communicate with replicaset\nmembers. On each call create netbox connections to all replicas is too expensive\nand long. The idea of usage of existing replication connections seems to be very\ngood alternative way.\nConsider, how communication can be done via replication connections. At first,\nnew IPROTO commands family must be introduced: IPROTO_CTL (the name can be\ndiscussed). IPROTO_CTL is an array of maps. Each map is one command like\n\"enter into read-write mode\", or \"enter into read-only mode for T seconds\".\nIPROTO_CTL is a sequence of such commands, which is applied in one\n\"transaction\". It means, that either all commands are applied, or nothing.\nIn the code appears new structure for operations:\nC\nstruct iproto_ctl_op {\n    enum iproto_ctl_type type;\n    int (*do)(struct iproto_ctl_op *op);\n    void (*rollback)(struct iproto_ctl_op *op);\n    void (*destroy)(struct iproto_ctl_op *op);\n}\nSequence of these operations are applied one by one via do() calls. If any\ndo() returned not 0, then rollback is called for all already done operations\n(like AlterSpaceOp).\nWhen box.ctl.promote is called on a replica, it sends IPROTO_CTL commands from\nrelay thread. Applier processes requests and send response via the same\nreplication connection.\nIPROTO_CTL constants:\nIPROTO_CTL_MODE_RW,\nIPROTO_CTL_MODE_RO.\nIPROTO_CTL commands needed for box.ctl.promote:\n IPROTO_CTL_MODE: <nil> - get a replica mode: IPROTO_CTL_MODE_RW/RO;\n IPROTO_CTL_MODE: IPROTO_CTL_MODE_RW/RO - set a replica mode.\n* IPROTO_CTL_SYNC: <seconds> - an instance, received the message, waits full\nsync during . If no full sync, then error.\nFinal protocol of promotion:\n```\n      Replica                                           Master\n               IPROTO_CTL: [\n                 {IPROTO_CTL_MODE: IPROTO_CTL_MODE_RO};\n                 {IPROTO_CTL_SYNC: ;}\n               ] ------------------------------------------->\n           <-----------------IPROTO_OK-------------------\n\nset read-write mode;\n```\nFinal box.ctl.promote API:\nbox.ctl.promote({timeout = <seconds>}).. The ticket is mine.. @kostja  comments are wrote below as is. After fixing them I will paste a new design.\n\n\nCheck mode of the replica: if it is already read-write, then\nfollow through on the steps of the algorithm to ensure all\nother replicas are read-only.\n\n\nDid you notice my change here? \n\n\nElse a current master must be found by map-reduce via\nreplication connections (details of replication connections\nusage are described below).\n\n\nWhat happens if a master is not found? Sounds like nothing, we\njust need to mention this.\n\n\nIf a found master already works with another box.ctl.promote,\n  then a new box.ctl.promote is aborted.\n\n\nThen I think you missed a step in the algorithm which \"records\" \nthe fact that box.ctl.promote() has started. We need to identify\neach \"promote()\" round by a) uuid b) initiator uuid c) current\ntime d) round duration, which we grow exponentially on each\npromote failure.\nThere should be an API to abort a promotion which is stuck,\ninspect the current promotion in progress and its status.\n\n\nIf a master is found, set him to a read-only mode for timeout\n  T seconds.\n\n\nI don't understand this: \"for timeout T seconds\". I believe we\nshould simply instruct the master to switch to read-only in scope\nof the current \"promote()\" round. The round should get expired\nautomatically on each node when round duration expires (current\ntime is > than round start time + round duration).\n\nThe found master remembers that his state is\n  neither master or replica - this state is used in (3) to\n  abort new box.ctl.promote calls.\n\nThe master switches to ro mode, and remembers the round identifier\nin its local state (initiator uuid, round uuid, round start time,\nround duration). When the round expires, the master should switch\nback to rw, to ensure it can go on working even if the replica\nwhich initiated promotion has disappeared since.\n\n\nWait full sync of data on the just disabled master. If time\n  is out of T seconds, then abort: the old master automatically\n  enters back in read-write mode, and the current replica\n  finishes sync. If full sync is ok, then make the old master\n  be replica and enter in read-write mode.\n\n\nWhat happens if the round expires while we're waiting for full\nsync? What happens if one of the nodes goes away? What happens if\none of the nodes is restarted? \nPlease elaborate.\nI think there should be step 6, which is about finishing the promotion\nround on all replicas and switching the initiator to rw. There is \nalso an inherent race condition between these two operations in\nstep six. We can choose to first set oneself to rw and then\nexpire the promotion round. In this case we may end up with two rw \nnodes. We may choose the opposite, which means we may end up with\na cluster which is entirely read-only. I vote for the second,\nsince it's safer and we will at least notice the problem -\nbox.ctl.promote() will fail.\n\nAssume, an old master is down when he was syncing in read-only\nmode. In such a case when it is restarted, it is back in\nread-write mode, because configuration is not persisted. A\nreplica, called box.ctl.promote, returns error after T seconds,\nused as timeout.\n\nWe can't go on with implementation until we resolved these issues.\n\nImplementation\nA host, on which box.ctl.promote is called, must communicate\nwith replicaset members. On each call create netbox connections\nto all replicas is too expensive and long. The idea of usage of\nexisting replication connections seems to be very good\nalternative way.\n\nLet's not discuss the alternatives, but discuss the solution. \nI'm not sure this solution is feasible - did you check? \nI don't quite understand this description .Promotion needs at\nleast 3 scatter-gather rounds, as far as I understand:\n\n\nFind out the current state of the cluster: query each node with\n  its read-only mode and current promotion round. Each replica,\n  if it doesn't have a promotion round in progress, remembers the \n  received round id and responds with its state.\n\n\nSwitch replica to read-only mode and sync its vclock with other\n  instances.  This message is identified with round id as well, \n  and returns an error if the round has expired.\n\n\nEnd the current promotion round, switch the initiator of the\n  round to read-write.\n\n\nWhat messages are exchanged on each round?\nMoreover, it seems like we're reinventing Lua \"eval\" call with\nthis new command. We need to think a bit longer about designing\nit, so that it doesn't become a mess over time.. @TarantoolBot document\nTitle: Document utf8 module\nUtf8 is a globally visible Lua 5.3 and lua-utf8 compatible module. It is not needed to require() it - the module is visible everywhere like it works in Lua 5.3. It has the following methods:\n```Lua\n--\n-- Convert a UTF8 string into upper case.\n-- @param String to convert.\n-- @retval not nil String consisting of upper letters.\n-- @retval nil, error Error.\n--\nutf8.upper()\n--\n-- Convert a UTF8 string into lower case.\n-- @param String to convert.\n-- @retval not nil String consisting of lower letters.\n-- @retval nil, error Error.\n--\nutf8.lower()\n--\n-- Calculate length of a UTF8 string. Length here is symbol count.\n-- Works like utf8.len in Lua 5.3.\n-- @param String to get length.\n-- @param Start byte offset. Must point to the start of symbol. On\n--        invalid symbol an error is returned. Can be negative.\n-- @param End byte offset, can be negative. Can point to the\n--        middle of symbol.\n-- @retval not nil Symbol count.\n-- @retval nil, error Error. Byte position of the error is\n--         returned in the second value.\n--\nutf8.len(, [, []])\n--\n-- Get next symbol code by @an offset. Can be used\n-- as an iterator like this:\n-- for offset, code in utf8.next, ,  do ... end\n-- @param String to get symbol code.\n-- @param Byte offset from which get.\n--\n-- @retval - No more symbols.\n-- @retval not nil, not nil Byte offset and symbol code.\n--\nutf8.next(, [])\n--\n-- Convert a UTF8 char code (or codes) into Lua string. When\n-- multiple codes are provided, they are concatenated into a\n-- monolite string.\n-- @param Char codes.\n-- @retval Result UTF8 string.\n--\nutf8.char(, [, ...])\n--\n-- Get a substring from a UTF8 string.\n-- @param String to get a substring.\n-- @param Start position in symbol count. Optional, can be\n--        negative.\n-- @param End position in symbol count. Optional, can be negative.\n--\n-- @retval Substring.\n--\nutf8.sub(, [i, [j]])\n--\n-- Check that a symbol is in lower case by its UTF8 string or\n-- by its code.\n-- @param Either one-char string or char code.\n-- @retval True, if is lower. Else false.\n--\nutf8.islower( | )\n-- Same about utf8.isupper/isdigit/isalpha.\n--\n-- Compare two UTF8 strings.\n-- @param s1 First string.\n-- @param s1 Second string.\n--\n-- @retval <0 s1 < s2.\n-- @retval >0 s1 > s2.\n-- @retval =0 s1 = s2.\n--\nutf8.cmp(, )\n--\n-- Compare two UTF8 strings ignoring case.\n-- @param s1 First string.\n-- @param s1 Second string.\n--\n-- @retval <0 s1 < s2.\n-- @retval >0 s1 > s2.\n-- @retval =0 s1 = s2.\n--\nutf8.casecmp(, )\n```\n. @TarantoolBot document\nTitle: Document netbox is_async flag\nNow any netbox call blocks a caller-fiber until a result is read\nfrom a socket, or time is out. To use it asynchronously it is\nnecessary to create a fiber per request. Sometimes it is\nunwanted - for example if RPS is very high (for example, about\n100k), and latency is about 1 second. Or when it is neccessary\nto send multiple requests in paralles and then collect responses\n(map-reduce).\nThe patch introduces a new option for all netbox requests:\nis_async. With this option any called netbox method returns\nimmediately (but still yields for a moment) a 'future' object.\nBy a future object a user can check if the request is finalized,\nget a result or error, wait for a timeout, discard a response.\nExample of is_async usage:\nLua\nfuture = conn:call(func, {params}, {..., is_async = true})\n-- Do some work ...\nif not future.is_ready() then\n    result, err = future:wait_result(timeout)\nend\n-- Or:\nresult, error = future:result()\nA future:result() and :wait_result() returns either an error or\na response in the same format, as the sync versions of the called\nmethods.. https://github.com/tarantool/tarantool/commit/0f686829a89b87d4f8d10fd25d4acfdea9b3dc60. It is possible not only for primary parts included in secondary ones. It works for any unique index parts, included in any another index parts. To do minimal count of unique checks we must detect indexes, which uniqueness check we can avoid always. These indexes can be found during vinyl space creation.\nFor example, for unique indexes index1 parts = {1, 2, 3}, index2 parts = {2, 3}, index3 parts = {4, 5}, index4 parts = {5, 4, 3} we can always skip unique check of index1 and index4.\nNOTE: And the same is true for memtx!!!. // Removed vinyl, because it works for memtx too.. Duplicate of #3164 . I saw this in vshard logs, but do not know, how to repoduce. It was exactly empty string in message, not nil. Like {code = 77, message = \"\"}.. Workaround - if a connection is not needed, then unset its reconnect_after:\nLua\nn -- netbox connection\nn.opts.reconnect_after = nil\ncollectgarbage()\n-- now n is deleted. The patch is ready long ago.. Lets forbid this alter (now it is forbidden for empty spaces, but key_def of a primary index is already in vylog even if a space is empty).. I think, you must introduce types ARRAY and MAP at first, because ANY contains them.. @Totktonada good idea. This period could be configurable via connect() options, and could be math.huge to log any state change only once. The logging state only once is preferable for vshard, because its connections can be up very log. For example, Mons have vshard cluster with uptime 5 days - it is 43200 identical messages for each connection. His cluster consists of two replicasets, so each router would log 86400 log messages - log file becomes unreadable.. Already works\nhttps://github.com/tarantool/tarantool/blob/1.9/test/box/alter.result#L1171. If a collation is changed, index should be recreated automatically. REINDEX makes no sense for a user.. @Korablev77 No, I can not imagine how we can use it. To be honest, I thought that REINDEX is a way to reduce fragmentation in B-tree on disk. But even in such a way it is not applicable - the only disk storage is Vinyl and it is an LSM tree.. I have a test case:\n```Lua\ntarantool> box.sql.execute('SELECT a, b, a + b FROM test ORDER BY b')\n\n\n\n\n[1, 1, 2]\n\n\n[2, 2, 4]\n...\n\ntarantool> fiber.info()[fiber.self().id()].memory\n\ntotal: 61744\n  used: 82\n...\n\ntarantool> box.sql.execute('SELECT a, b, a + b FROM test ORDER BY b')\n\n\n\n[1, 1, 2]\n\n\n[2, 2, 4]\n...\n\ntarantool> fiber.info()[fiber.self().id()].memory\n\ntotal: 61744\n  used: 164\n...\n\ntarantool> box.sql.execute('SELECT a, b, a + b FROM test ORDER BY b')\n\n\n\n[1, 1, 2]\n\n\n[2, 2, 4]\n...\n\ntarantool> fiber.info()[fiber.self().id()].memory\n\ntotal: 61744\n  used: 246\n...\n\ntarantool> box.sql.execute('SELECT a, b, a + b FROM test ORDER BY b')\n\n\n\n[1, 1, 2]\n\n\n[2, 2, 4]\n...\n\ntarantool> fiber.info()[fiber.self().id()].memory\n\ntotal: 61744\n  used: 328\n...\n```\n\nAs it seen, fiber uses more and more memory.. The same is actual for iproto - it uses the same SQL API as Lua.. I like 3, because it allows to move more memory allocations to a region. For example, column metadata. Halt must in such a case do fiber_gc(), if there is no active transaction. But this does not work, when SQL iterators will be introduced. In any case, I very do not like, that now VDBE has many members on runtime memory.\nAt the second priority I like 1.\nAnd there is a second problem with region: even when it is for insert, it can leak, if VDBE fails before box_insert. As far as I know, we do not call box_txn_begin on autocommit statements? If we do not, then there is no box_txn_rollback, and a region leaks. @Korablev77 can you please check it?. \"Zabey, vse ravno ne peresporish\"\n\n1 \u043c\u0430\u0440\u0442\u0430 2018 \u0433., \u0432 2:43, Nikita Pettik notifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b(\u0430):\nIs it really true, that it is hard to guess whether you are inserting to ephemeral space or not at compile time?\nI would say yes. Anyway, you are able to investigate it yourself.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/tarantool/tarantool/issues/3199#issuecomment-369423027, or mute the thread https://github.com/notifications/unsubscribe-auth/AE_WK7WiqhDZLAKJPI4BV4aTQNeElZWiks5tZeSbgaJpZM4SUzSo.\n\n\n. err:unpack() returns error with code 109: ER_WRONG_SCHEMA_VERSION. It is netbox problems with DDL.. @aleclarson please, check my review, and fix these minor remarks. Thank you for contributing!. There is no struct Select * if you only parse. You should get only ExprList in parser struct. When struct Select * is generated, it resolves names, that is not needed. In fact, you should stop the parser before it starts search FROM clause.. SIGPIPE is not catched for an unknown reason, despite of SIG_IGN set in main.cc for SIGPIPE.. It was investigated, that SIGPIPE is not catched because of running under debugger. Possibly, it is ok, and the issue must be closed.. Please, describe a documentation request for TarantoolBot here.. @kbelyavs . Part of #2217.. Part of #2217.. Part of #2217.. Fixing of this will help also to return to a fullmesh topology in vshard: https://github.com/tarantool/vshard/issues/83. On my computer the box.cfg{replication = { '127.0.0.1:<not existing port>' },replication_connect_quorum = 0,replication_timeout = 1,read_only = false,} command just blocks the console. I even can not check box.info.status.. Still not works.. I am trying this:\nLua\nbox.cfg{\nreplication = { '127.0.0.1:33333' }, -- port 33333 is empty\nreplication_connect_quorum = 0,\nreplication_timeout = 1,\nread_only = false\n}\nThis call still blocks the thread.. @kostja @kbelyavs . Moreover, this \"fix\" breaks master-slave. Here is the simple test case:\nLua\n-- First node, master. --\nbox.cfg{\n    listen=3313,\n    read_only = false\n}\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\nLua\n-- Second node, slave. --\nbox.cfg{\n    replication = { '127.0.0.1:3313' },\n    replication_connect_quorum = 0,\n    read_only = true\n}\nAfter start I print replication info on the slave:\n```YAML\ntarantool> box.info.replication\n\n\n1:\n    id: 1\n    uuid: 37d7b710-16d8-46ac-b688-fb8a55ae1083\n    lsn: 2\n    upstream:\n      status: ready\n      idle: 3.18981299999\n      peer: 127.0.0.1:3313\n      lag: 0\n  2:\n    id: 2\n    uuid: 458f614d-ede6-40a5-a7c5-5e6c422bfad3\n    lsn: 0\n...\n```\n\nIf I remove replication_connect_quorum option, then the status is follow, but nothing is changed actually - both the master and the slave work and see each other.. It makes master-slave be unusable.. And this master-slave case: https://github.com/tarantool/tarantool/issues/3278#issuecomment-381733771 worked before the patch. Now it does not. Here the master is not absent.. See the second test case:\nLua\nbox.cfg{\n    listen = 33334,\n    replication = { '127.0.0.1:33333', '127.0.0.1:33334' },\n    replication_connect_quorum = 0,\n    replication_timeout = 1,\n    read_only = false\n}\nThis is correct master-master configuration of one of the cluster members. And it blocks the thread too.. Thanks.. The last case still does not work:\nLua\nbox.cfg{\n    listen = 33334,\n    replication = { '127.0.0.1:33333', '127.0.0.1:33334' },\n    replication_connect_quorum = 0,\n    replication_timeout = 1,\n    read_only = false\n}\nThis call hangs forever.. Create a ticket in tarantool/doc to publish this option on the site.. Duplicate #3280 . @TarantoolBot documen. @TarantoolBot document\nTitle: document new space method in Lua: frommap()\nSpace:frommap() allows to generate a well-formatted tuple ready to insert into the space from a Lua dictionary with pairs field_name = field_value.\nFor example:\nLua\nformat = {}\nformat[1] = {name = 'field1', type = 'unsigned'}\nformat[2] = {name = 'field2', type = 'unsigned'}\ns = box.schema.create_space('test', {format = format})\npk = s:create_index('pk')\nt = s:frommap({field1 = 100, field2 = 200})\ns:insert(t)\nBy default, it returns a tuple as cdata, but you can pass the option: frommap(tuple, {table = true}), and then the result will be a Lua tale.. The opt-in is compatible also - you can just skip IPROTO_OPTION_CHUNK_TUPLES, and will receive a single response message. But I do not think, that now compatibility matters. SQL is in alpha, so we can change its protocol as we want.. Duplicate of #3328.. @TarantoolBot document\nTitle: Document new box.cfg option - net_msg_max\nIn Tarantool maximal count of requests in fly is restricted by 768. It allows to do not produce too many fibers in TX thread, that would lead to too big overhead on fibers switching, their stack storing.\nBut some users have powerful metal on which 768 constant is not serious. The patch exposes it as\na configuration runtime parameter.\nnet_msg_max is its name. If a user sees that IProto thread is stuck due to too many requests, it can change net_msg_max in runtime, and IProto thread immediately starts processing pending requests.\nnet_msg_max can be decreased, but obviously it can not stop already runned requests, so if now in IProto thread request count is > new net_msg_max value, then it takes some time until some requests will be finished.\nDefault value is 768.. Fixed in 38b2a29ff8bc1041562fb9b48b5f3e7d1ef294b2. I can propose an API for server-side variant of the feature. If the function must take raw MessagePack, a user specifies raw_args = true in box.schema.func.create. Then the function must be ready to get the raw MessagePack as cdata in a first argument and its size in the second one.. The error can be reproduced on any Tarantool version, as far as I know. It happens because any netbox call waits for schema reloading before any request, but does not do it AFTER the request. So after the DDL call the netbox schema is out of sync for a short time.\nIt will be fixed in patchset for #3107, but it does not fix the case, when a schema is changed by DDL call in one fiber, and right after the DDL is finished and schema reloading is started, another fiber tries to use it.. It can not be fixed on 100% with not protocol changing, because a user can have two fibers using the same netbox connection. And when one fiber receives new schema version and tries to update it, another fiber can try to get a newly created space.\nAnother option is to extend IProto to send new schema (spaces/indexes) automatically, when the schema_version is changed. This will solve the issue.. It appeared, that fatal_assert does abort, that leads exactly to kill, so I think it is not a Tarantool bug. You can try to debug your application by printing not only ok/not ok, but also error message - it is a second retval of pcall, when it is failed.. As far as I know, you should not write replica uri in replication on master. It is enough to set replication on a slave. @kbelyavs please comment.. Can you provide a concrete test case?. What is 'p'?. I found I bug in base64.c:\nC\nif ((options & BASE64_URLSAFE) != 0)\n        encoding = urlsafe_encoding;\n    else\n        encoding = default_encoding;\nHere must be another check: if ((options & BASE64_URLSAFE) == BASE64_URLSAFE), because BASE64_URLSAFE consists of several bits.. You are right, ok. The feature is redundant.. Duplicate of this #2620. Duplicate of this #2620. No, it is a separate task.. Blocked by #3081 and #3290.. tarantool> Assertion failed: (src->front_id < itr->front_id), function vy_read_iterator_restore_mem, file /Users/v.shpilevoy/Work/Repositories/tarantool/src/box/vy_read_iterator.c, line 429.\nProcess 63708 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT\n    frame #0: 0x00007fff657abb6e libsystem_kernel.dylib`__pthread_kill + 10\nlibsystem_kernel.dylib`__pthread_kill:\n->  0x7fff657abb6e <+10>: jae    0x7fff657abb78            ; <+20>\n    0x7fff657abb70 <+12>: movq   %rax, %rdi\n    0x7fff657abb73 <+15>: jmp    0x7fff657a2b00            ; cerror_nocancel\n    0x7fff657abb78 <+20>: retq   \nTarget 0: (tarantool) stopped.. Diff with the new injection:\n```Diff\ndiff --git a/src/box/vy_run.c b/src/box/vy_run.c\nindex 587cb0029..b700ab5a9 100644\n--- a/src/box/vy_run.c\n+++ b/src/box/vy_run.c\n@@ -797,6 +797,11 @@ vy_page_read(struct vy_page page, const struct vy_page_info page_info,\n        struct errinj *inj = errinj(ERRINJ_VY_READ_PAGE_TIMEOUT, ERRINJ_DOUBLE);\n        if (inj != NULL && inj->dparam > 0)\n                usleep(inj->dparam * 1000000);\n+       inj = errinj(ERRINJ_VY_READ_PAGE_DELAY, ERRINJ_BOOL);\n+       if (inj != NULL) {\n+               while (inj->bparam)\n+                       fiber_sleep(0.01);\n+       }\n    /* decode xlog tx */\n    const char *data_pos = data;\n\ndiff --git a/src/errinj.h b/src/errinj.h\nindex 2f9d24087..2c6f84fe2 100644\n--- a/src/errinj.h\n+++ b/src/errinj.h\n@@ -110,6 +110,7 @@ struct errinj {\n        (ERRINJ_IPROTO_TX_DELAY, ERRINJ_BOOL, {.bparam = false}) \\\n        (ERRINJ_HTTPC_EXECUTE, ERRINJ_BOOL, {.bparam = false}) \\\n        (ERRINJ_LOG_ROTATE, ERRINJ_BOOL, {.bparam = false}) \\\n+       (ERRINJ_VY_READ_PAGE_DELAY, ERRINJ_BOOL, {.bparam = false}) \\\n. No necessity to fit into 3. We can extend to 5 and even up to 7 in small refactoring. It does not breaks the IProto protocol.. Part of #3505. ( Kostja has allowed me to assign the milestone ).. Can be linked with https://github.com/tarantool/tarantool/issues/1157.. We have decided to create a second schema version for internal usage, that grows faster than public one.. Not only because of multiple executions. When the parser does some functional and storage dependent things it is impossible to extract it to a library and use on client side.. The test is TAP, so it has no result. Below the output is presented:\n======================================================================================\nWORKR TEST                                            PARAMS          RESULT\n---------------------------------------------------------------------------------\n[001] sql-tap/gh2548-select-compound-limit.test.lua                   [ fail ]\n[001] Test failed! Last 15 lines of the result file:\n[001] \n[001] Last 15 lines of Tarantool Log file [Instance \"app_server\"][/Users/v.shpilevoy/Work/Repositories/tarantool/test/var/001_sql-tap/gh2548-select-compound-limit.test.lua.tarantool.log]:\n[Main process] Got failed test; gently terminate all workers...\n[001] Worker \"001_sql-tap\" got failed test; stopping the server...\n---------------------------------------------------------------------------------\n. After reverting the last test-run commit the test passes.. Maybe travis is ok, because it runs sql-tap tests in two builds only.. On Mac I got this:\nmsk-wifi-17fap4-v_shpilevoy-v:tarantool v.shpilevoy$ LUA_PATH='test/sql-tap/lua/?.lua;test/sql/lua/?.lua;;' ./src/tarantool test/sql-tap/gh2548-select-compound-limit.test.lua\nTAP version 13\n1..8\nBus error: 10\n. Even on the reverted test-run .... .result file after running the test is empty both on reverted and on the last test-run. No, here I got `Bus error: 10` when running out of test-run.. Funny stack:\nthread #1, stop reason = signal SIGSTOP\n  * frame #0: 0x000000010b6a5e1e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5f030008, pDest=0x000000010e4126b8) at select.c:2442\n    frame #1: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5f030008, pDest=0x000000010e4126b8) at select.c:5433\n    frame #2: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5f02f408, pDest=0x000000010e412cc8) at select.c:2601\n    frame #3: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5f02f408, pDest=0x000000010e412cc8) at select.c:5433\n    frame #4: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5f02e808, pDest=0x000000010e4132d8) at select.c:2601\n    frame #5: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5f02e808, pDest=0x000000010e4132d8) at select.c:5433\n    frame #6: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5f02dc08, pDest=0x000000010e4138e8) at select.c:2601\n    frame #7: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5f02dc08, pDest=0x000000010e4138e8) at select.c:5433\n    frame #8: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5f02d008, pDest=0x000000010e413ef8) at select.c:2601\n    frame #9: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5f02d008, pDest=0x000000010e413ef8) at select.c:5433\n    frame #10: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e6269e8, pDest=0x000000010e414508) at select.c:2601\n    frame #11: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e6269e8, pDest=0x000000010e414508) at select.c:5433\n    frame #12: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e6274d8, pDest=0x000000010e414b18) at select.c:2601\n    frame #13: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e6274d8, pDest=0x000000010e414b18) at select.c:5433\n    frame #14: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e6276e8, pDest=0x000000010e415128) at select.c:2601\n    frame #15: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e6276e8, pDest=0x000000010e415128) at select.c:5433\n    frame #16: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e627888, pDest=0x000000010e415738) at select.c:2601\n    frame #17: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e627888, pDest=0x000000010e415738) at select.c:5433\n    frame #18: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e627a48, pDest=0x000000010e415d48) at select.c:2601\n    frame #19: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e627a48, pDest=0x000000010e415d48) at select.c:5433\n    frame #20: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e627c18, pDest=0x000000010e416358) at select.c:2601\n    frame #21: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e627c18, pDest=0x000000010e416358) at select.c:5433\n    frame #22: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e627de8, pDest=0x000000010e416968) at select.c:2601\n    frame #23: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e627de8, pDest=0x000000010e416968) at select.c:5433\n    frame #24: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e627fb8, pDest=0x000000010e416f78) at select.c:2601\n    frame #25: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e627fb8, pDest=0x000000010e416f78) at select.c:5433\n    frame #26: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e628188, pDest=0x000000010e417588) at select.c:2601\n    frame #27: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e628188, pDest=0x000000010e417588) at select.c:5433\n    frame #28: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e628358, pDest=0x000000010e417b98) at select.c:2601\n    frame #29: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e628358, pDest=0x000000010e417b98) at select.c:5433\n    frame #30: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e628528, pDest=0x000000010e4181a8) at select.c:2601\n    frame #31: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e628528, pDest=0x000000010e4181a8) at select.c:5433\n    frame #32: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e6286f8, pDest=0x000000010e4187b8) at select.c:2601\n    frame #33: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e6286f8, pDest=0x000000010e4187b8) at select.c:5433\n    frame #34: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e6288c8, pDest=0x000000010e418dc8) at select.c:2601\n    frame #35: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e6288c8, pDest=0x000000010e418dc8) at select.c:5433\n    frame #36: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e628a98, pDest=0x000000010e4193d8) at select.c:2601\n    frame #37: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e628a98, pDest=0x000000010e4193d8) at select.c:5433\n    frame #38: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e628c68, pDest=0x000000010e4199e8) at select.c:2601\n    frame #39: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e628c68, pDest=0x000000010e4199e8) at select.c:5433\n    frame #40: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e628e38, pDest=0x000000010e419ff8) at select.c:2601\n    frame #41: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e628e38, pDest=0x000000010e419ff8) at select.c:5433\n    frame #42: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e629008, pDest=0x000000010e41a608) at select.c:2601\n    frame #43: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e629008, pDest=0x000000010e41a608) at select.c:5433\n    frame #44: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e6291d8, pDest=0x000000010e41ac18) at select.c:2601\n    frame #45: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e6291d8, pDest=0x000000010e41ac18) at select.c:5433\n    frame #46: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e6293a8, pDest=0x000000010e41b228) at select.c:2601\n    frame #47: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e6293a8, pDest=0x000000010e41b228) at select.c:5433\n    frame #48: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e629578, pDest=0x000000010e41b838) at select.c:2601\n    frame #49: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e629578, pDest=0x000000010e41b838) at select.c:5433\n    frame #50: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e629748, pDest=0x000000010e41be48) at select.c:2601\n    frame #51: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e629748, pDest=0x000000010e41be48) at select.c:5433\n    frame #52: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e629918, pDest=0x000000010e41c458) at select.c:2601\n    frame #53: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e629918, pDest=0x000000010e41c458) at select.c:5433\n    frame #54: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e629ae8, pDest=0x000000010e41ca68) at select.c:2601\n    frame #55: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e629ae8, pDest=0x000000010e41ca68) at select.c:5433\n    frame #56: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e629cb8, pDest=0x000000010e41d078) at select.c:2601\n    frame #57: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e629cb8, pDest=0x000000010e41d078) at select.c:5433\n    frame #58: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e629e88, pDest=0x000000010e41d688) at select.c:2601\n    frame #59: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e629e88, pDest=0x000000010e41d688) at select.c:5433\n    frame #60: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e62a058, pDest=0x000000010e41dc98) at select.c:2601\n    frame #61: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e62a058, pDest=0x000000010e41dc98) at select.c:5433\n    frame #62: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e62a228, pDest=0x000000010e41e2a8) at select.c:2601\n    frame #63: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e62a228, pDest=0x000000010e41e2a8) at select.c:5433\n    frame #64: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e62a3f8, pDest=0x000000010e41e8b8) at select.c:2601\n    frame #65: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e62a3f8, pDest=0x000000010e41e8b8) at select.c:5433\n    frame #66: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e62a5c8, pDest=0x000000010e41eec8) at select.c:2601\n    frame #67: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e62a5c8, pDest=0x000000010e41eec8) at select.c:5433\n    frame #68: 0x000000010b6a671e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5e62a798, pDest=0x000000010e41f698) at select.c:2601\n    frame #69: 0x000000010b6a2aee tarantoolsqlite3Select(pParse=0x000000010e41f8b0, p=0x00007f8f5e62a798, pDest=0x000000010e41f698) at select.c:5433\n    frame #70: 0x000000010b64c358 tarantoolyy_reduce(yypParser=0x00007f8f5f03e408, yyruleno=73) at parse.y:388\n```. ```\n(lldb) f 0\nframe #0: 0x000000010b6a5e1e tarantoolmultiSelect(pParse=0x000000010e41f8b0, p=0x00007f8f5f030008, pDest=0x000000010e4126b8) at select.c:2442\n   2439     / Make sure there is no ORDER BY or LIMIT clause on prior SELECTs.  Only\n   2440      * the last (right-most) SELECT in the series may have an ORDER BY or LIMIT.\n   2441      /\n-> 2442     assert(p && p->pPrior); / Calling function guarantees this much /\n   2443     assert((p->selFlags & SF_Recursive) == 0 || p->op == TK_ALL\n   2444            || p->op == TK_UNION);\n   2445     db = pParse->db;\n(lldb) p p && p->pPrior\n(bool) $5 = true\n. Maybe it is really duplicate of #3382. The backtrace almost the same.. 1. As far as I know, `fiber.storage` is cleaned up when the fiber is recycled. I have looked at the code of recycling - it nullifies the storage. Or do you have a test that it is wrong?\n2. To get the user you can use `box.session.uid()`.\n3. To get request id (sync) you can use `box.session.sync()` to store the value at the beginning of the request into a local variable. After #3450 will be fixed, you are able to use `box.session.sync()` directly with no saving its result.. After some investigation we have found that `size_t new_capacity` overflows in `ibuf.c` in `ibuf_reserve_slow`. It is because a bad connector had sent a corrupted header with invalid MessagePack so its first bytes occasionally  were interpreted as valid MessagePack very big unsigned value here:C\nstatic struct ibuf \niproto_connection_input_buffer(struct iproto_connection con)\n{\n    struct ibuf *old_ibuf = con->p_ibuf;\nsize_t to_read = 3; /* Smallest possible valid request. */\n\n/* The type code is checked in iproto_enqueue_batch() */\nif (con->parse_size) {\n    const char *pos = old_ibuf->wpos - con->parse_size;\n    if (mp_check_uint(pos, old_ibuf->wpos) <= 0)\n        to_read = mp_decode_uint(&pos);\n}\n\n...\nSee `to_read` above. This huge value is passed to `ibuf_reserve_slow` and reaches this place:C\n        while (new_capacity < used + size)\n            new_capacity = 2;\nHere `used + size` is a huge value near UINT64_MAX.`new_capacity` on i-th iteration has value < `used+size`, but on `i+1` iteration it overflows and becomes 0 (I am sure, I saw these things in GDB). And now `new_capacity` becomes 0 forever.. Test:Lua\nbox.cfg{listen = 3313}\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\nnetbox = require('net.box')\nmsgpack = require('msgpack')\ndata = msgpack.encode(18400000000000000000)..'aaaaaaa'\nc = netbox.connect(box.cfg.listen)\nc:ping()\nc._transport.perform_request(nil, nil, 'inject', nil, data)\nDiff:Diff\n--- a/small/ibuf.c\n+++ b/small/ibuf.c\n@@ -86,8 +86,11 @@ ibuf_reserve_slow(struct ibuf ibuf, size_t size)\n                if (new_capacity < ibuf->start_capacity)\n                        new_capacity = ibuf->start_capacity;\n\nwhile (new_capacity < used + size)\nwhile (new_capacity < used + size) {\nsize_t old_capacity = new_capacity;\n                        new_capacity *= 2;\nassert(old_capacity < new_capacity);\n}\nLeads to this:\nAssertion failed: (old_capacity < new_capacity), function ibuf_reserve_slow, file /Users/v.shpilevoy/Work/Repositories/tarantool/src/lib/small/small/ibuf.c, line 92.\nProcess 7346 stopped\nthread #2, name = 'iproto', stop reason = signal SIGABRT\n    frame #0: 0x00007fff788cab6e libsystem_kernel.dylib__pthread_kill + 10\nlibsystem_kernel.dylib__pthread_kill:\n->  0x7fff788cab6e <+10>: jae    0x7fff788cab78            ; <+20>\n    0x7fff788cab70 <+12>: movq   %rax, %rdi\n    0x7fff788cab73 <+15>: jmp    0x7fff788c1b00            ; cerror_nocancel\n    0x7fff788cab78 <+20>: retq \nTarget 0: (tarantool) stopped.\n```\n\nWith no my diff it asserts slightly later in slab_get.. I see three options how to solve the problem:\n forbid packet size > UINT32_MAX;\n expose max_packet_size option to box.cfg limited with UINT32_MAX;\n* throw an error on overflow only (but anyway a system will not allocate ~UINT64_MAX memory).. @rosik please, provide the test case.. It is not a trivial task to do not duplicate constraint name because of some non-trivial cases:\n1. I can assign a name to NULL/NOT NULL: box.sql.execute('CREATE TABLE test (id integer primary key, b integer constraint c1 NULL)'). Where should we store this c1 constraint? We have no any storage for this now.\n2. I can assign a name to DEFAULT: box.sql.execute('CREATE TABLE test (id integer primary key, b integer constraint c1 default 300)'). Where should we store this name?\n3. The same about COLLATE: box.sql.execute('CREATE TABLE test4 (id integer primary key, b text constraint c1 collate \"binary\")').\nAnd now realise that we can alter constraints set via adding/dropping indexes, foreign keys.\nPossible decisions:\nInternal hash table and new space definition\nAdd an explicit name to each constraint inside box. So is_nullable will have an optional name inside format, as well as collation name. I will allow us to insert named collations the same way as anonymous, and internally push them into a hash table per space. First rough and ready example of box API:\nLua\nformat = {}\nformat[1] = {name = 'field1', type = 'unsigned'}\nformat[2] = {name = 'field2', type = 'string', collation = 'unicode', collation_constraint = 'constr1'}\nformat[3] = {name= 'field3', type = 'unsigned', is_nullable = false, is_nullable_constraint = 'constr2'}\nbox.schema.create_space('test', {format = format})\n...\nLooks not okay because of too long names and mixed structure of names among other fields. Another example of API:\nLua\nformat = {}\nformat[1] = {name = 'field1', type = 'unsigned'}\nformat[2] = {name = 'field2', type = 'string', constraints = {constr1 = {collation = 'unicode'}, constr2 = {is_nullable = false}}}\nformat[3] = {name = 'field3', type = 'unsigned', constraints = {constr3 = {is_nullable = true}, constr4 = {default = '300 + 100'}}}\n...\nThis is better, but looks more complicated though. And does not allow to describe multi-column constraints like checks. Another option, which is more like classic SQL, when constraints are described in a separate section of CREATE TABLE statement:\nLua\nformat = {}\nformat[1] = {name = 'field1', type = 'unsigned'}\nformat[2] = {name = 'field2', type = 'string'}\nformat[3] = {name = 'field3', type = 'unsigned'}\nconstraints = {}\nconstraint[1] = {name = 'constr1', check = 'field1 < field3'}\nconstraint[2] = {name = 'constr2', column = 'field2', collation = 'unicode'}\nconstraint[3] = {name = 'constr3', column = 'field3', is_nullable = false}\nbox.schema.create_space('test', {format = format, constraints = constraints})\nThis is the best one as I think, but\n1) it requires changes in how to store checks. Now they are stored in _space as a checks field, but will be stored as a part of constraints field. It is easy to convert existing checks into this format in the upgrade script though.\n2) it does not allow to describe foreign keys and unique constraints (while). Mostly due to lack of a transactional DDL. But it is easy to allow these constraints later.\nNew system space\nAnother major option - create a system space _constraints, in which we will insert all constraint names and types in a format like {space_id, constraint_name, constraint_type}. Space_id + constraint_name are primary index and guarantee uniqueness of names inside a table. Type specifies unique, check, default, not null etc. This way looks 1) consuming one more system spaces slot, 2) consuming memory to store these things in tuples instead of a simple and compact hash table in struct space, 3) not working because we do not have transactional DDL to insert at the same time into _space/_index/_fk_constraints and into _constraints.\nDo not allow to name anything but UNIQUE, PRIMARY KEY, CHECK, FOREIGN KEY/REFERENCES\nIn such a case all things are much easier. Just do not allow to name other constraints, and store these ones in an internal hash table.. @Korablev77 proposed to add more constraint system spaces like here: https://docs.microsoft.com/ru-ru/sql/relational-databases/system-information-schema-views/check-constraints-transact-sql?view=sql-server-2017. @kostja agreed. But note, that it will destroy our 'transactional' DDL which is now executed usually in a single row, and afterwards each DDL operation will change one real system space (_index, _space ...) and one 'information schema' space (CONSTRAINT_TABLE_USAGE, CHECK_CONSTRAINTS ...).. An example of not atomic DDL.\nLua\nspace = box.schema.create_space('test')\npk = space:create_index('pk')\nsk = space:create_index('sk')\n-- Assume, that an index is stored in _index and\n-- in TABLE_CONSTRAINTS, CONSTRAINT_TABLE_USAGE.\n-- So there are 3 places.\nsk:rename('new_sk')\n-- This operation consists of replace into the three spaces\n-- above. But suddenly the server goes down due to power\n-- off, when replace into _index succeeded, but others didn't.\n-- After restart we will see this:\nbox.space._index:select({space.id, sk.id})\n- [... 'new_sk' ...]\nbox.space.TABLE_CONSTRAINTS:select({space.id})\n...\n- [... 'sk' ... ]\n...\nbox.space.CONSTRAINT_TABLE_USAGE:select({space.id})\n...\n- [... 'sk' ... ]\n...\nSo as you can see, information schema spaces are out of date.. From this discussion it is clear that column constraints shall not have a name: https://github.com/tarantool/tarantool/issues/3820. Propagation of _index to ischema spaces asynchronously, during recovery, puts a lot of complication into the recovery process. So I still vote for deferring ischema spaces creation until transactional DDL is available, rely only on _index, _space and _fk_constraint and store internal hash table to guarantee uniqueness.\niSchema is a goal, yes, but create it know, when our DD and transaction manager are not ready for this - it is a proposal.. Probably it is linked with box.call - local analogue of netbox.call. It would be great if we found a way to create a common decision.. @Totktonada such code opens a transaction if it was not opened before. I think, a check should not have any after-effects.. Sorry. Can be fixed by this command under LLDB:\nprocess handle SIGPIPE -n true -p true -s false.. I think, issues like #2419 makes no sense. It is a huge list of non-clearly described pseudo-features/refactoring plans, that is hard to maintain and fix. My opinion, that it should be split into separate issues and closed.. Why can not you just use unicode collation?. The basic complaint is libel. We do not rebuild index on any alter. On non-compatible changes only.. Linked with https://github.com/tarantool/tarantool/issues/2400 or duplicate of.. @stek29 It is not proposed to make them static and implement in the header. They could be declared in the header util.h and implemented once in util.c. Talking about your statement that qsort is used in the tests mostly - it does not matter. The fact that a file is a test does not mean that it can be shitty, full of duplicated code.. Already done here: https://github.com/tarantool/tarantool/pull/3596. As I remember, the problem emerged after this commit: https://github.com/tarantool/tarantool/commit/c1a16b26062522f1c92f6af602e82edea7dd1785. Why do you need my feedback and how does the comment above fix the bug? Regardless of reasons, the bug exists so the issue as well should not be closed.. The issue is not fixed. On the latest 1.9 I still see the error.\nInstance 1:\nLua\nbox.cfg{\n    listen = 3313,\n    replication = {'localhost:3313', 'localhost:3314'},\n    read_only = false,\n}\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\nInstance 2:\nLua\nbox.cfg{\n    listen = 3314,\n    replication = {'localhost:3313', 'localhost:3314'},\n    read_only = true,\n}\nInstance 1:\nLua\nbox.cfg{\n    listen = 3313,\n    replication = {'localhost:3313', 'localhost:3314'},\n    read_only = true,\n}\nInstance 2:\nLua\nbox.cfg{\n    listen = 3314,\n    replication = {'localhost:3313', 'localhost:3314'},\n    read_only = false,\n}\nOutput after the last step:\n```\n2018-10-03 15:20:40.949 [94399] main/101/interactive I> connected to 2 replicas\n2018-10-03 15:20:40.949 [94399] main/101/interactive I> synchronizing with 2 replicas\n2018-10-03 15:20:40.949 [94399] main/110/applier/localhost:3313 I> can't read row\n2018-10-03 15:20:40.949 [94399] main/110/applier/localhost:3313 xrow.c:792 E> ER_CFG: Incorrect value for option 'replication': duplicate connection with the same replica UUID\n2018-10-03 15:20:40.949 [94399] main/101/interactive C> failed to synchronize with 1 out of 2 replicas\n2018-10-03 15:20:40.949 [94399] main/101/interactive C> entering orphan mode\n2018-10-03 15:20:40.949 [94399] main/101/interactive I> set 'replication' configuration option to [\"localhost:3313\",\"localhost:3314\"]\n\n...\ntarantool>\n...\ntarantool> 2018-10-03 15:20:41.957 [94399] main/110/applier/localhost:3313 C> leaving orphan mode\n```. @kyukhin I do not think it is a bug - the sequence here works correctly - it grows and never decreases. The same example can be rewritten like this: begin, insert null, rollback - no errors, but sequence can not be rolled back, so next insert will use next sequence value.. It is not a bug - you can not throw errors from on_commit triggers. When a transaction is committed, it can not be rolled back by any error.. The same for other versions.. Nikita is right. We made row_count on DDL deliberately in order to flag that DDL actually was done. Also row_count == 0 can be returned if IF NOT EXISTS was used, but a DDL object was existing.. Thanks, replication_connect_quorum has worked.. I vote for an error as well.. The only drawback I see now: if a result consists of few tuples, then two searches in B+ tree (2 * O(log{b}(N)) can be more expensive than one search + a couple of comparisons for next tuples. This works ok when a key has multiple tuples.\nAlso, this can be applied for a unique index when a key is partial.. Also, this can be used for between selects and for this: https://github.com/tarantool/tarantool/issues/3309. Anyway we should count changes inside box, so #2181 makes no sense in its current implementation. I think, it should be reimplemented via fiber local storage. Lets just reword 2181 issue to make it clear. And after 2181 is implemented, this issue is unblocked. In-box accounting is needed not only buy SQL calling Lua, but also by SQL calling Lua calling SQL again - it will break sqlite3.nChanges counter even now.\nBy the way, any relocation into box should be consulted with @kostja. The proposal above is just MHO.. As I remember, Kostja was against accounting trigger changes. I do not remember why. Implementer of this issue should check what other databases do.. If triggers should not be accounted, then things are getting tricky. We should take into account txn.in_sub_stmt and store a separate counter for first-level changes, when in_sub_stmt == 1.. Now @kostja decided to forbid SQL_INFO from DQL. So in other words: a body has either INFO or METADATA, not both. If this decision is final, @ImeevMA, please, do not forget to update https://github.com/tarantool/tarantool/blob/2.1/doc/rfc/3328-wire_protocol.md document. Now in this document it is said that a response can have both INFO and METADATA.. After a discussion we decided to leave the document as is. Sure, now it is impossible to get both INFO and METADATA, but in future we will have a queries like this: INSERT ... RETURNING.. Hi! Since this commit simply propagates submodule version, there is nothing to review actually. But I have a question to the original commit. Here I pasted diff with my comments inlined.\nLua\n       -- stop searching repos if exact match was found\n      local query_version = nil\n      for _, constraint in pairs(query.constraints) do\n         if constraint.op == '==' then\n            query_version = constraint.version.string\n            break\n         end\n      end\nWhy do you look for query_version on each iteration of the outer cycle? As I understand, query_version depends on query only and can be detected at the beginning of the function. But here on each iteration of the cycle you rebuild this version regardless of its immutability.\nLua\n      if results[query.name] and results[query.name][query_version] ~= nil then\n         break\n      end\nNitpicking: I would rather cache results[query.name] in a local variable:\nLua\nlocal result = results[query.name]\nif result and result[query_version] then\n    break\nend\nBy the way, why do you compare with nil? Why not to use just the variable with implicit conversion to bool?. You are totally right, but the issue is about field_count. If exact_field_count is 0, then field_count is the only source of truth. If exact_field_count is not 0, then field_count is exactly the same.. If this things are not true, then it is a bug too.. But stop. I looked into source code and discovered, that exact_field_count can be bigger than field_count easily.. It is allowed to fetch these fields from tuple. It is not allowed to fetch struct tuple_field by such indexes from struct tuple_format, because, obviously, format.fields array is shorter.. It is hard to disagree. I vote for monolithic namespace of all constraints of one table: indexes, checks, foreign keys. But speaking about mangling index name, I do not think so. If a user explicitly specifies index name via CONSTRAINT <name>, then he will expect to have this name both available via box.space.index.<name> and in system spaces. Also, when the unique constraint fails, he will see mangled index name in an error message - it is not ok.. You probably misunderstood my point. I mean, CONSTRAINT <name> UNIQUE ... should create an index with exactly name <name>, as well as CONSTRAINT <name> PRIMARY KEY. Foreign key should not create an index, and it already works ok - when you do ALTER TABLE ... ADD CONSTRAINT <name>, it is inserted into _fk_constraint with exactly the specified name. I do not want to lost <name> for a constraint, and want to make it visible via Lua from appropriate system spaces, box.space attributes depending on constraint type.. Maybe you meant 'before description'?. @pgulutzan I opened 2011 standard, part 2, page 640, and I see, that DEFAULT and COLLATION are not column constraints. Honestly, I can not find even if these two things are constraints by definition. And despite that, SQLite allows their naming. I think, it should be forbidden in favour of the standard.\nTalking of NULL/NOT NULL - they are column constraints according to the standard, and even can be named, as I now see. But not sure if it is worth following the standard here, because we already have is_nullable tuple field option, which can not be named. And hardly I can image how painful it would be extending this particular constraint by allowance its naming. In terms of compatibility.\nSummary: COLLATION and DEFAULT are not constraints, and of course can not be named constraints. NULL/NOT NULL are discussable, but I think, that their naming also should be prohibited.\nWhat do you think?\nBelow I copy-paste a part of column definition grammar:\n```\n ::=\n   [  ]\n      [  |  | \n      | \n      |  ]\n      [ ... ]\n      [  ]\n ::=\n    \n  | \n ::=\n  [  ]  [  ]\n ::=\n    NOT NULL\n  | \n  | \n  | \n``. Yes. But I think the main problem of this issue is how to make it reusable for any other similar log messages. For example, do not print too long wal write on each occurrence - we can have 50k fibers, first made too long wal write and all others will have it too = 50k messages.. Number of such unique log messages is not too big, so a possible solution is add a static variable in a function, making such frequent logging in which we will store last log time and number of occurrences. If more than one message appeared in a small time interval, we will log it once with saying how many times it occurred. It will work for all cases.. In a discussion with @kostja we've decided that we should continue decoding ofsql_bindarray in iproto thread. But it is still unclear how to freesql_bindarray. Nowstruct iproto_msgis actually a union of different requests and has no clear inheritance and virtual methods. If we want to create a custom destructor for a concrete request type, we should either\n1) just add something likevoid (destroy)(struct iproto_msg )tostruct iproto_msgand initialise it iniproto_msg_decode;\n2) makeiproto_msgbase and inherit from it call, sql, dml and other msgs. But we still need to add a destructor to the baseiproto_msgin the same way as in point 1;\n3) add a destructor tostruct cmsg. This will allow to push destruction logic down to the routing level. It is much more complex, but we already have some crutches about it:struct cbus_call_msghasfree_cb,struct relay_gc_msgis allocated onmallocand then freed explicitly. A problem withstruct cmsgdestructor is how to call it from a specific thread, if cmsg is allocated on a specific slab cache (likeiproto_msg`). And do we really need it if most of cmsgs are now either on stack or are parts of a bigger structures? IMO, so far it makes no sense to complicate things so much.\nAlso it appeared that we could decode IPROTO_UPDATE operations in iproto thread in the same way as sql_bind array.. We have decided to move bindings decoding to TX thread.. https://github.com/tarantool/tarantool/commit/f041f2d093d28b1d100d2b3297eca104e67112f9. @Korablev77 found it.. Follows #3981 . Pushed to 2.1, 1.10.. Please, move next line args to the position after the opening bracket.\nC++\ntypedef char *(*tuple_extract_key_t)(const struct tuple *tuple,\n +                                   const struct key_def *key_def,\n +                   uint32_t *key_size);. Same as above.. Same as above.\n. Same as above - move \"tuple_extract_key_raw_sequential\" under the opening bracket of diag_set(). Why? It was correct.. \u0421oncretely here it is no difference - compiler will generate the same code. Please, stop increasing diff.. Please, move break with one Tab to the right, in the body of if. And add comment here, that you are skipping the sequential parts to avoid calling tuple_field_raw.. Same as above - stop increasing diff.. Same as above (about break and comment).. Same (about break and comment). Maybe it can be moved in a special function? - it is already third copypaste of the same code.. Why? It was correct. Now it is not.. No, please, remove it. Comment about a structure must be placed right before the structure. Most of autotools for documentation generating assume this.. Please, follow the existing code - use def->method = ......_create(def) instead of ...._set(def). No, please, leave the previous version. Stop increasing diff by unneccessary changes.. No. One empty line between functions declarations was ok.. First and last comment lines must be empty:\nC++\n/*\n * Text. ...\n * ...\n */. One whitespace after each *. No, previos version was correct.. Please, follow the our style identations.. No, tuple_extract_key must call this function.. Same.. Please, move it to a box.schema instead of box.. We do not use in tarantool functions that are called right after creation. Please, initialise box.index_mt with no closures. For example, like this:\nLua\nlocal index_mt = {}\nlocal function index_mt:len()\n-- 'index' here can be accessed as 'self'.\nend\nlocal function index_mt:min_ffi(key)\n-- ..\nend\n--..\n--..\nbox.schema.index_mt = { __index = index_mt }. Add a test for it, please.. Why do you need index_mt[key], if all of your extensions must be in box.schema.index_mt ?. Yes. That it does not raise error.. Ok.. ",
    "TarantoolBot": "@Gerold103: Accept.. @Gerold103: Invalid request type.. @Gerold103: Accept.. @locker: Accept.. @Gerold103: Accept.. @Totktonada: Accept.. @Totktonada: Accept.. @Gerold103: Accept.. @Gerold103: Accept edited.. @Gerold103: Accept edited.. @kshcherbatov: Accept.. @Gerold103: Accept.. @kshcherbatov: Accept.. @kshcherbatov: Accept edited.. @Gerold103: Accept.. @Gerold103: Accept.. @Totktonada: Accept.. @Totktonada: Accept edited.. @locker: Accept.. @kbelyavs: Accept.. @kbelyavs: Accept.. @Gerold103: Invalid request type.. @Gerold103: Accept.. @Gerold103: Accept.. @Gerold103: Accept edited.. @locker: Accept.. @Totktonada: Accept.. ",
    "atercattus": "inotify + kqueue + ReadDirectoryChangesW + fallback on current implementation ?\n. I suggested all variants that I know. Ok, inotify + kqueue + fallback.\n. ",
    "dedok": "For Mac OS X better choice is FSEvents API (Carbon), but while ago FSEvent did not trace some events, probably apple fixed this behaviour.\nP.S. And they did, since 10.7, https://developer.apple.com/library/mac/documentation/Darwin/Reference/FSEvents_Ref/index.html#//apple_ref/doc/constant_group/FSEventStreamCreateFlags, see kFSEventStreamCreateFlagFileEvents.\nFor BSD kqueue.\nKostia,\nI have already done such features for OSX/BSD before, so I can attach code from my previous project. But I guess I can do it not before this sunday.\n. I see few problems\n- WebSocket (Socket.IO, web-socket-js, etc) are simulate via HTTP 1.1 in few cases hence almost all browser developers can't use known libraries\n- Tarantool must read HTTP headers like X-Forwarded-For, Hots, Cookie, etc which is very important for web development\n- Most of client side developers don't like binary protocols. As an option we can output/input JSON\nlua\nbox.cfg\n{\n  websocket = {\n    uri = uri,\n    codec = [ json | msgpack ] -- optional field default is msgack\n  }\n}\n. For instance https://github.com/sockjs/sockjs-client/wiki/%5BArticle%5D-SockJS:-WebSocket-emulation-done-right don't forget about phonegap etc\n. Agree with @Mons and myself :)\nAlso. This feature needed only for web developers/web scale apps/etc, but if you do this feature w/o full HTTP support peoples won't use this hence they already have a code libraries which require from app server full HTTP support.\n. Me and @rtsisyk did find the point of misunderstood.\nMy first comment is not about browser support it's about in few cases and about support of web developers popular libraries/frameworks - @rtsisyk I hope you see my point now.\nSecond JSON needs for web developers and for their infrastructure - it could be implemented as JS lib or in tnt.\nIf I understand @rtsisyk correctly parsing of HTTP headers are present - which is nice.\n@rtsisyk about JSON - we could add this feature inside tarantool http (we can use codec json <-> msgpack from nginx module)?\n@rtsisyk about proxies problem - I see your point about difficult implementation - I agree with you.\nI guess until somebody needs this feature we can ignore problem of sumulation in few cases.\n. Our users try to use tarantool on mobile platforms.. I have spoken with the user and I have asked - 'can he gives any comments?'. Comments means he will give to us his explanation. . @rtsisyk I agree with all what you have gave except 'request pool' - we will not remove request pool.. Definitely we have to. Fixed into nginx module: https://github.com/tarantool/nginx_upstream_module/commit/2ca3f6ecfe7b731a440d5f4c772141fe57682c60. ",
    "airo": "similar problem with seqfault\n```\nSegmentation fault\nCurrent time: 1479385681\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed,\nthis may fail as well\n0  0x40e651 in sig_fatal_cb(int)+129\n1  0x7f57b6bc83e0 in ?\n2  0x50e7bd in lj_err_unwind_dwarf+253\n3  0x7f57b6104263 in ?\n4  0x50e66f in lj_err_throw+95\n5  0x50e87b in lj_err_mem+59\n6  0x50e2d8 in lj_mem_realloc+72\n7  0x51087c in lj_tab_resize+220\n8  0x510c02 in rehashtab+450\n9  0x50ddad in gc_onestep+1261\n10 0x50df8c in lj_gc_step+92\n11 0x54ac5c in lj_trace_exit+764\n12 0x50c8c0 in lj_vm_exit_handler+225\n```\nhow  reproduce: \nnow i use tarantool 1.5 and prepare to migrate to 1.7, sometime i used syntax from 1.5\nand i know that is wrong syntax, but if you try your tarantool server is going down.\n```\nunix/:/var/run/tarantool/master.control> link=box.space.ssp_links:select{2,'af8556f7-2caa-4360-8bf9-1fffdd83f7eb'}\n\n...\nunix/:/var/run/tarantool/master.control> link[0]\n\nnull\n...\n\nunix/:/var/run/tarantool/master.control> box.space.profiles:select{link[0]}\n```\nif you tried select null from space, you get seqfault. It's bad. \n. ",
    "lenkis": "What's the use to allow 'module.func-name' if we always reload the entire library? This is confusing. Let's take only module name as input.. Outstanding improvements (to do when @rtsisyk has time):\n1) add instructions for debugging with 'abrt' (in notes for 'systemd' users; now we have instructions only for 'coredumpctl')\n2) add example for flushing cashes after eval (during Tarantool prod update)\n3) add example for configuring deb/rpm assembly (during Tarantool prod update)\n. Issues transferred to tarantool/doc repository, see https://github.com/tarantool/doc/issues/64\n. Please verify & review language issues in this readme.\n. Updated README.md + README.PACK.md in this repo and PHP driver info in the main Tarantool manual.\n. Guys, what's the logic behind the new command order? General practice is either alphabetical order or (often controversial) some logical order. Here I see none...\nAs an attempt of logical arrangement, I'd suggest this:\nUsage:\n    tarantoolctl start <instance_name>\n    tarantoolctl stop <instance_name>\n    tarantoolctl restart <instance_name>\n    tarantoolctl reload <instance_name> <lua_file>\n    tarantoolctl status <instance_name>\n    tarantoolctl check <instance_name>\n    tarantoolctl logrotate <instance_name>\n    tarantoolctl enter <instance_name>\n    tarantoolctl connect <instance_uri>\n    tarantoolctl cat <filename>.. [--space=space_no ..] [--show-system][--from=from_lsn] [--to=to_lsn]\n    tarantoolctl play <instance_uri> <filename>.. [--space=space_no ..] [--show-system] [--from=from_lsn] [--to=to_lsn]\n    tarantoolctl eval <instance_name> <lua_file>  # file version\n    <command> | tarantoolctl eval <instance_name> # pipe version. Peter, I've fixed all code blocks in box_index.rst. Please help to find and fix similar occurrences elsewhere in the manual.\n. To be tracked in doc repo.. We also need this for documentation. We often use print() in examples, but these examples don't work in docker. Users get frustrated:\nAndrey Oleynik, [18 Apr 2017, 18:39 (18/04/2017, 18:39)]: \n\u0410 \u043f\u043e\u0447\u0435\u043c\u0443 print \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043a\u0435, \u0430 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0441 \u043f\u0440\u0438\u043d\u0442\u043e\u043c?\nKonstantin Osipov, [18 Apr 2017, 18:40]: \n\u0433\u0434\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0441 \u043f\u0440\u0438\u043d\u0442\u043e\u043c\nprint \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0432 stdout\nAndrey Oleynik, [18 Apr 2017, 18:41]: \nhttps://tarantool.org/doc/1.7/book/box/box_index.html#box-index-index-pairs\n\u041f\u043e\u0441\u043b\u0435 First Example of index pairs():\nKonstantin Osipov, [18 Apr 2017, 18:42]: \n@lenkis \u043e\u0442\u043a\u0440\u043e\u0439 \u0442\u0438\u043a\u0435\u0442 \u043f\u043b\u0438\u0437 \u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u043a\u0443\nprint \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0432 stdout\n\u0435\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435\u0442\u0435  \u0441 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u043e\u043c \u0432 \u0434\u043e\u043a\u0435\u0440\u0435, \u043a\u0430\u043a \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 try, \u0442\u043e stdout \u0443 \u043d\u0435\u0433\u043e \u0432 /var/log/tarantool. Clarified usage of these two functions in 1.6/1.7/1.8 manuals. Issue moved to doc repo.. related doc ticket: https://github.com/tarantool/doc/issues/276. We found that tarantoolctl start example works ok with clean Tarantool installations. That's enough for a beginner. Closing.. To be done within https://github.com/tarantool/doc/issues/326. Issue moved to doc repo.. Issue moved to doc repo.. \u0422\u0438\u043a\u0435\u0442 \u0442\u044b \u0437\u0430\u043a\u0440\u044b\u043b, \u0430 \u0442\u0435\u043c\u043f\u043b\u0435\u0439\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0438\u043a\u0435\u0442\u043e\u0432 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430 \u043d\u0435\n\u043f\u043e\u0434\u0442\u044f\u043d\u0443\u043b\u0441\u044f.\n\u041a\u043e\u0433\u043e \u043f\u043e\u043a\u043b\u0435\u0432\u0430\u0442\u044c \u0441 \u044d\u0442\u0438\u043c?\nOn Wed, Oct 17, 2018 at 2:40 PM Kirill Yukhin notifications@github.com\nwrote:\n\nClosed #3609 https://github.com/tarantool/tarantool/pull/3609.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/pull/3609#event-1909287300, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AP7fv_bUkRcFrba_UMQpwIJ_I4lKNTXRks5ulxcegaJpZM4VuEk0\n.\n. Please help to commit this file to the default repo branch:\nhttps://github.com/tarantool/tarantool/commit/0a1744c41e4dc8d1977c88153812f4e58c1236eb#diff-1a1c3dd142f76a5fad803a0c52839881. Fixed incorrect Russian text. Thanks for giving a shout!. \n",
    "GeorgyKirichenko": "Fixed by https://github.com/tarantool/tarantool/commit/5a200cb3a47b9d828e0f3aee8c82d66bfde4cf8b\nTest added by https://github.com/tarantool/tarantool/commit/1fca0ee287df38b2b6540b21aec076faf11a58f6. Can you attach list of preserved snap and xlog files?\n. Hi Paolo,\npossibly you should set bigger value to slab_alloc_arena, this worked for me.\nWith latest tarantool 1.6 this should be executed successfully:\nbox.cfg{slab_alloc_arena = 8,\n    slab_alloc_maximal = 256 * 1024 * 1024}\n-- a 192 Mb-long random string\nprint('Generate long random string')\nlong_str = require('digest').urandom(192 * 1024 * 1024)\nprint(long_str:len() .. ' bytes generated')\ns1 = box.schema.space.create('long_space')\ns1:create_index('pk')\nprint('Insert long tuple to space')\ns1:insert({1, long_str})\nprint('Inserted')\nos.exit()\nGeorgy\n. New version of tarantool mysql driver will use only one thread for each connection, so we can safely use libmysqlclient.so instead of thread safe _r version even for early versions of mysql.\n. New mysql driver version pushed, please try it now\n. Thanks for reporting, rockspec was fixed\n. Fixed in a32b83df0ff33d9600bc88312ceffd3ee3f0a9c9\n. Same error i have with lz4 compression\n. Luajit update fixed this.\n. Luajit update fixed this.\n. Doesn't reproduce after luajit update\n. #0  0x00007f30e8de5118 in raise () from /lib64/libc.so.6\n1  0x00007f30e8de656a in abort () from /lib64/libc.so.6\n2  0x00000000004dc98f in coredump (dump_interval=60) at /home/georgy/projects/tarantool-1/src/util.c:114\n3  0x00000000004befd7 in lbox_coredump (L=0x41be4050) at /home/georgy/projects/tarantool-1/src/lua/init.c:194\n4  0x00000000004e6f0b in lj_BC_FUNCC ()\n5  0x0000000000507f27 in lua_pcall (L=0x41be4050, nargs=3, nresults=0, errfunc=0) at lj_api.c:1055\n6  0x00000000004c682d in lbox_call (L=0x41be4050, nargs=3, nreturns=0) at /home/georgy/projects/tarantool-1/src/lua/utils.c:946\n7  0x00000000004c0980 in lua_fiber_run_f (ap=0x7f30e80001d0) at /home/georgy/projects/tarantool-1/src/lua/fiber.c:267\n8  0x000000000040a964 in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x4c08c0 , ap=0x7f30e80001d0)\nat /home/georgy/projects/tarantool-1/src/fiber.h:592\n\n9  0x00000000004d4236 in fiber_loop (data=0x0) at /home/georgy/projects/tarantool-1/src/fiber.c:509\n10 0x0000000000617880 in coro_init () at /home/georgy/projects/tarantool-1/third_party/coro/coro.c:110\n. Run meta tuple will have a flag if prefix compression is enabled.\nAll run keys are ordered, so if we have multipart key then we can have\nsame keys prefixes for adjacent tuples for example:\nx1 y1 z1 v1\nx1 y1 z2 v2\nx1 y1 z3 v3\nx1 y2 z4 v4\nx2 y2 z5 v5\nx2 y3 z6 v6\nx2 y3 z7 v7\nx2 y3 z8 v8\nwho x, y, z - keys, v - values.\nThis sequence can be encoded as:\n0 x1 y1 z1 v1\n2 z2 v2\n2 z3 v3\n1 y2 z4 v4\n0 x2 y2 z5 v5\n1 y3 z6 v6\n2 z7 v7\n2 z8 v8\nwho first item is the count of equal fields with previous tuple.\nIf there is no equal prefixes for adjacent tuples we will lose one byte for zero\nvalue (mp_stream encoded)\nIf we have equal key prefix with size l then we will won (l - 1) byte (zero, for\nunsigned keys less than 128, or more in any other cases).\nCompression should be done before xrow will be sent to xlog. We can store last\nwritten tuple and compare next tuple against it to decide count of matching\nfields.\nDecompression may be done while vinyl page restoration, we can store last\nrestored tuple to get appropriate values.\n. Can't reproduce on last 1.7. Will be fixed after #3800 . Can't reproduce on current 1.7 branch. Crash can be reproduced with lua script:\n```\nfiber = require'fiber'\nbox.cfg{}\nbox.schema.space.create('test', {if_not_exists = true})\nbox.space.test:create_index('pk', {if_not_exists = true})\nfunction fn2()\n    fiber.sleep(60)\n    -- f2 wait for wal, but wake from ready list (already added by f1)\n    box.space.test:replace({1})\nend\nf2 = fiber.create(fn2)\nfunction fn1()\n    fiber.sleep(60)\n    -- f1 was scheduled and not in ready list, add it\n    f2:wakeup()\nend\nf1 = fiber.create(fn1)\n-- push two fibers to ready list\nf1:wakeup() f2:wakeup()\n```. Now tarantool does not abort, but index contains inconsistent value and tarantool will not restart from snapshot/log. I disagree with this, but well, let's fix it later\n2017-02-14 14:24 GMT+03:00 Roman Tsisyk notifications@github.com:\n\nThis problem is not showstopper for the customer anymore. Moving to 1.7.5.\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/2075#issuecomment-279681692,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AP5SafV0oE7jHb__c-aOZMl9BaUdtLctks5rcY7agaJpZM4L9REa\n.\n. pthread_getattr_np can fail, and attr should not be destroyed. Please, add check for it. Some language consoles (python, ruby) use internal functions such as help() for special behaviour, but this is applicable for one-language applications with defined syntax and special function names\n\nsql plus and mysql consoles use special instruction like SET, SHOW, that can be well-matched against sql syntax, but this is not applicable for multi-language tarantool console.\npsql and mysqk consoles use special escape char \\ for internal console commands such as \\h \\t \\c and e.g.\nsqlite console uses special char '.' (dot) for special console behaviour\n\\ escape at first command string position can be used for entering console internal mode, if some language will use this symbol too then tarantool can support double escaping. ```\nox.cfg{}\nspace = box.schema.space.create('test', { engine = 'vinyl' })\nindex = space:create_index('primary')\nspace:upsert({2, 1, 1}, {{'+', 2, 10}})\nspace:upsert({2, 1, 1}, {{'-', 3, 20}})\nspace:upsert({2, 1, 1}, {{'=', 2, 20}})\nbox.snapshot()\n```\nwill assert to. input parameter for box.schema.user.password(password) is the password to hash but not the user name. Fixed by https://github.com/tarantool/tarantool/commit/e0d764f494ebf0354d1613d786f6f339962f0982. If snap_io_rate_limit was set while snapshoting then write speed will be recalculated from begin of snapshot.\nFor example, if 1mb of snapshot was written, then tarantool will wait for 1mb/40 seconds after io_rate_limit was set.. Can't reproduce on last 1.6. run index files are restored while database opening but not compaction, compaction does not use index files.. You got EAGAIN because all sockets operations are nonblocking by default. And there is no data in socket on time of a recvfrom call and EAGAIN is the expected behavior. Please try to use handle:nonblock(false)' after socket initializaion. works on 1.7.5-165-ge3d97f6d1. io module is a lua native module and does blocking call, so time is not evaluated correctly after this call, please don't use it. caused by https://github.com/tarantool/tarantool/commit/2fbaf. The new error message for 1.9 Debug is:\n/src/box/txn.c:148: txn_begin_in_engine: Assertionstailq_empty(&txn->stmts)' failed. Please export cookies as an array with values:\n{{cookie_name, cookie_value, cookie_option_1, ..},\n  {...},}\nwhere cookie option may be a plain flag or a pair like {option_name = option_value}.\nThe job may be done at lua level at httpc.lua.\nTake a look on a cookie_value quotation because a cookie_value may contain semicolon separators.. I don't like global pairs redefinition, and i'm not sure that we really need to protect box.cfg now. At least until box will be a separate library or some other global change.. @kostja i think you should make a decision about this ticket - will we do it now or later. @kmansoft i still can't reproduce the issue with exact same tarantool versions. But i can create two tarantool stands and open tarantool ports for you.. I assume that there is no point in waiting until all replicas are inserted in the case of the initial cluster load, because any of the replicas should not contain any data (for correct configurations, of course). So, if a 'bootsrap is not finished' status was received during initial bootstrap/join then box.cfg may be finished without all other masters.. The main case is an read-only master and hot-standby waiting for exchange. We don't know something about hot standby lag and can't make any decision about time to exchange with minimal downtime.\nFor example - maser can't do any write but still performing reads. We want to switch master and hot standby but first we should wait until hot standby has all recent datas.. Please paste more info about the memory leak, how you has detect that, your OS version and curl package version and with which library openssl/libressl/gnutls libcurl was built\n. @andrew-statsenko this is possibly libcurl issue, was some leak detected after libcurl upgrade?. I think there should be a bunch of events:\n\nsystem space creation event; it allows us to set a replace trigger on _space and then do anything what we want with user spaces (tracking a system space recovery)\nsnapshot and xlog recovery events\napplier state event\nrelay state event\nrw mode event\nexit event\n\nreplicaset changes might be tracked with _cluster replace trigger\nalso we could introduce a checkpoint event, but i'm not sure we really want it. If a local wal has changes only from a remote peer (and relay has nothing to send due to filtration) then relay won't send any heartbeats.. ER_DUP_KEY is a ER_TUPLE_FOUND code. What means ER_CONSTRAINT_VIOLATION, there is no error code with same name. Looks like bad output: logging time uses UTC and snapshot daemon message uses local timezone (3 hours delta).\nPlease check it.. Will be fixed after #3800 . It might be a cause for cluster inconsistency, because all new nodes SHOULD be bootstrapped from one master (at same time exactly).\nMy proposal is wait for all possible masters until timeout is reached but not raise an error if quorum is reached (this is changed). This allows us to choose the same leader from all currently working replicas. Timeout should be large enough to connect to all working replicas.. This is by design and couldn't be fixed without behaviour changes\nReplica closes existing applier and then creates a new one to the same master.\nMaster receives a socket close event in a relay thread and a subscribe request in tx thread that might lead to a race (networking and threading)\nPossible solutions:\n1. introduce disconnect and disconnect request into a replication proto\n2. move relay to the tx thread (but this doesn't solve a networking race)\n3. reuse applier if it has the same uri and OK status. Hi,\neach iproto connection might use up to 2x of bytes, so for your example i have up to 8gb of used rss.\nPlease reduce read ahead because long calls and evals don't block iproto after 1dcdc98e. Please attach a minimal case to reproduce. what return ffi.string for zero-length (if p == p_end in condition above). p can not be nil because you use \"or p_end\" at upper line. ",
    "YadrovSergey": "+1. tarantool --version\nTarantool 1.6.7-463-gfc14541\nTarget: Linux-x86_64-RelWithDebugInfo\nBuild options: cmake . -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TRACE=ON -DENABLE_BACKTRACE=ON\nCompiler: /opt/rh/devtoolset-2/root/usr/bin/cc /opt/rh/devtoolset-2/root/usr/bin/c++\nC_FLAGS: -fno-common -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -msse2 -std=c11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -fno-gnu89-inline\nCXX_FLAGS: -fno-common -fno-omit-frame-pointer -fno-stack-protector -fexceptions -funwind-tables -fopenmp -msse2 -std=c++11 -Wall -Wextra -Wno-sign-compare -Wno-strict-aliasing -Wno-invalid-offsetof\n. > do you have a core file\n\u041a\u0430\u043a \u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c? \n. \u0414\u0430\u043d\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0431\u044b\u043b\u0430 2 \u0440\u0430\u0437\u0430. \u0415\u0441\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f, \u0442\u043e \u043f\u0440\u0438\u0448\u043b\u044e core file\n. @kostja \u0414\u0430\u043d\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f.\n\u0412 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 ulimit -c unlimited \u0432\u0432\u0435\u043b. \n\u041a\u0430\u043a \u043c\u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 core files \u0434\u043b\u044f tarantool  (\u0443 \u043c\u0435\u043d\u044f \u0441\u0442\u043e\u0438\u0442 CentOS 6.7)(\u043f\u0440\u043e\u0448\u0443 \u043f\u0440\u043e\u0449\u0435\u043d\u0438\u0435 \u0437\u0430 \u043b\u0430\u043c\u0435\u0440\u0441\u043a\u0438\u0439 \u0432\u043e\u043f\u0440\u043e\u0441)?\n. ",
    "vitalyisaev2": "Are there any opportunities for doing the space truncate in 1.6.x  (except dropping all the *.snap and *.xlog files)?\n. ",
    "zaglex": "\nAre there any opportunities for doing the space truncate in 1.6.x (except dropping all the .snap and .xlog files)?\n\nThis workaround helped me:\nbox.session.su('admin')\nbox.space.myspace:truncate()\n. Please, help us with this issue. We can't switch from 1.6 to 1.7, because we have production deployment and moving to 1.7 can cause some problems (at least we've encountered this issue https://github.com/tarantool/tarantool/issues/2454 during 1.7. testing).\nDoes it look like replication bug in 1.6.9 or we are doing something wrong?. Problem is solved now.\nIndeed xlogs were being removed by snapshot daemon before relaying to the slave. This happened because we were using setting snapshot_count = 1.\nAnd actually relay was not silent: it wrote \"exiting relay loop\" to the log (but without any explanations).\n. ",
    "shemanov": "Another workaround or solution is create objects with owner\nhttps://tarantool.org/doc/book/box/box_schema.html\nbox.schema.create_space('test', {if_not_exists = true, user = 'guest_or_your_custom_user'}). ",
    "limadm": "Hello people,\nCouldn't tarantool support LUA_PATH and LUA_CPATH instead of hard-coded paths only?\nI use this to isolate lua environments per application.\nThanks!\n. ",
    "medvdanil": "new statistics added in box.stat.net()\n. I think that your problem is very long execution of one fiber, more than 1 second. Check it with my patch.\n. ",
    "condor-the-bird": "Hi all)\nThis issue seems more or less \"trivial\", and I decided to pick it to analyze the project & to let you, guys, have a closer look at me ;-).\nWhat I would suggest within the existing framework/structure is:\na) Removing appendix D (http://tarantool.org/doc/book/app_d_plugins.html?highlight=postgre) OR Editing it to indicate that the content is obsolete/applies to older versions. \nb) Adding two sections to the Reference Manual (it may need an overhaul, but that's another story). \nThese chapters could start like this: http://rst.ninjs.org/?n=55fa7e1674b0f82d42c3006099f7a76b&theme=nature & http://rst.ninjs.org/?n=f32f741e2022cce8d0cfafb516cea1f1&theme=nature and contain detailed examples/guidelines on deploying rocks.\nTo do the job, I would, first and foremost, need info on the subject matter & we would need to decide how I work with the framework (publishing, styles, etc.). Writing the text is more or less trivial, but the publishing procedure seems tricky.\nI guess, it'd take installing the latest version of Tarantool and playing with it. As you know, I'm an evil Windows person, so, before I get a decent VM configured and learn some of the ropes, I'd sugget using teamviewer (https://www.teamviewer.com) at an office PC where the solution is deployed/or where I could deploy it myself using the existing docs.\nBR,\nMaria Kondorskaya \n. ",
    "danikin": "A good document. I like it! Also we need to take into account the following things:\n\nSpecifying an algorithm for data distribution across shards\nSpecifying a field/key which is used as a parameter for the algorithm above\nSpecifying presence/absence of distributed transactions\nSpecifying a list of nodes that act as coordinators for distributed transactions\nAlso I'm not sure that we need to make specific shard numbers for a specific machine (like shard X). In my view, we just need to give machines zones and then the system decides automatically how to shard or how to replicate. This gives a user more flexibility as they just add or remove a machine to/from a specific zone and then the system decides either it needs to use it for retaining redundancy to to shard data. In that scenario we need to let a user configure it - which thing is more prioritized - to retain redundancy or to shard data within known limitations of having zones. Also we should have sub-zones. Say, if I can't restore redundancy to my target redundancy factor within zones (datacenters) then I might want to do that within a sub-zone ( separate buildings within a datacenter) or sub-sub-zone (separate halls within a building with a dedicated power outlet) or a sub-sub-sub zone (separate racks within a hall) or even a sub-sub-sub-sub zone (separate machine within a rack).\nSpecifying priority of a local configuration vs a cluster configuration. Sometimes I just want to get a machine out of a cluster and make it a separate machine. In this case I need to make sure that a cluster configuration does not substitute all the data on the machine with something else needed for the cluster to be working right now, even if I return a machine back to the cluster by accident.\n. It seems to be that tnt_stream::data is used for both forming requests and receiving responses. If that's true then the easiest way fix it is to split this buffer into two and to use each of them for read and write separately.\n. Got the same thing on a Digital Ocean instance:\n\nRequests per second: 870239, Responses per second: 20446755, Pending requests: -19576516, Latency in momentum: -957.438772 ms\nRequests per second: 704241, Responses per second: 42207688, Pending requests: -61079963, Latency in momentum: -1447.128850 ms\nRequests per second: 829902, Responses per second: 37152033, Pending requests: -97402094, Latency in momentum: -2621.716394 ms\nRequests per second: 719356, Responses per second: 46420286, Pending requests: -143103024, Latency in momentum: -3082.769115 ms\nRequests per second: 720833, Responses per second: 47102886, Pending requests: -189485077, Latency in momentum: -4022.791236 ms\nRequests per second: 717184, Responses per second: 47079204, Pending requests: -235847097, Latency in momentum: -5009.581237 ms\nRequests per second: 818475, Responses per second: 38924083, Pending requests: -273952705, Latency in momentum: -7038.128682 ms\nRequests per second: 1037869, Responses per second: 18598338, Pending requests: -291513174, Latency in momentum: -15674.151852 ms\nRequests per second: 1393542, Responses per second: 2068727, Pending requests: -292188359, Latency in momentum: -141240.656210 ms\n. I came up with an idea how to deal with this problem.\nAccording to this piece of code if there is nothing to read then read_reply returns immediately:\nstatic int\ntnt_net_reply(struct tnt_stream *s, struct tnt_reply *r) {\n    if (s->wrcnt == 0)\n        return 1;\n    pm_atomic_fetch_sub(&s->wrcnt, 1);\n    return tnt_reply_from(r, (tnt_reply_t)tnt_net_recv_cb, s);\n}\nSo what I need to do is just to check read_reply on 1 return value. If it is 1 then there is nothing to read and I should just wait.\nBut I'm still a little bit concerned about this feature. Is it documented?\n. ",
    "FZambia": "Hi, just to put my two cents into this discussion.\nFirst of all here is a link to a great list of existing real-time technologies\nModern real-time frameworks can't rely on Websocket only. Most (Meteor and others) players on this stage use polyfills to fallback to HTTP-based transports (persistent like Eventsource, xhr-streaming or polling like xhr-polling, jsonp-polling). The reason is not only browser support but bugs in browser implementations (mostly fixed to this moment), mobile browsers (some still not supporting Websockets), proxies (as real-time application goes to the wild some proxies do not pass websocket traffic - this mostly can be solved using wss:// instead of ws://), see https://speakerdeck.com/3rdeden/websuckets presentation to get more information.\nPolyfills also has some drawbacks to mention. For example SockJS HTTP transports require using sticky sessions when connecting to application backend (so client reconnected to the same node after receiving message in case of long-polling). HTTP transports limit you to using text communication protocol (binary support is a great win in case of dynamic multiplayer real-time games - see for example agar.io). And it's also more to develop both on client and server side.\n. ",
    "Sannis": "PHP7 version for 1.5 (but with some difference with upstream version): https://github.com/tony2001/tarantool-php/tree/php7\n. ",
    "dyu": "There is no src/trivia/tarantool.h in both master and 1.6 branch.\nLikewise doing a make install does't have a tarantool.h in $INSTALL_DIR/include/tarantool\nI was trying to install your luarocks modules (makes me wonder if they are used at all) and the rocks install fails because of that.\n. :+1: \n. ",
    "dreadatour": "It would be awesome.\n. ",
    "sharonovd": "This may be still useful for mitigating workload bursts, when big amount of WAL is generated in short amount of time.\nProposal: \n - introduce wal_max_count setting - combined with wal_max_size setting, this option can be used for transparent disk usage management:\n - if snapshot daemon discovers that limit is reached, it triggers snapshotting (to try and reduce amount of wals and total consumed disk space). Additional question - how are the records sorted in multikey index?\nBasic use-case is the following:\n - addresses are stored (e. g. '\u0420\u043e\u0441\u0441\u0438\u044f, \u041a\u0430\u043b\u0443\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u041a\u0430\u043b\u0443\u0433\u0430, \u041b\u0435\u043d\u0438\u043d\u0430, 25')\n - multikey index is created based on all words\n - user expects iterator output to be sorted based on full value (\u0435. g. \u041a\u0430\u043b\u0443\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c should come before  \u041a\u0430\u043b\u0443\u0433\u0430). Upvoting, this is disgusting. Strange - I don't see it in the sources (I honestly hope you're not talking about one-liners from json.test.lua etc.). This can be solved by using luacheck to control production code. \nI don't see the necessity.\nProbably, doc recommendation (to use luacheck) would be enough.. IMO, this is a documented bs.\nYou may leave it as it is - but it renders max() rather useless.. Regarding inserts - please also consider case when primary id is autogenerated (e g via sequence), and thus not provided by inserter. Regarding 2. - database user is interesting only rarely. More than often we are referring to app server user, authenticated by other means.. Should fit them. Alternative would be the following:\nProvide ability to link luarocks and zip to tarantool statically.. Problem is that when user updates from e. g. TT  1.10.2-48 -> 1.10.2-162 he does not expect that he should check (and maybe) update all the rocks he uses.\nSo this change breaks release policy - no features in patchset bumps.. The module is already updated, but bumping Tarantool LTS patchset should not require module version update!. ",
    "PSIAlt": "Can be reproduced when iterating BITSET\nfor v in box.space[0].index[1]:iterator(box.index.BITS_ALL_NOT_SET, 1) do\n  ...\n  if cond then\n       return box.update(0, v[0], .....\n  end\n  box.fiber.sleep(0)\nend\nNeed to make concurrent calls for this lua from different connections.\n. ",
    "derElektrobesen": "\u041a\u0441\u0442\u0430\u0442\u0438 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430 \u043d\u0435\u0442.\n\u0422\u0430\u043c \u0432\u0438\u0441\u0438\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0435\u043c\u043e\u043d.\n\u041f\u0430\u0434\u0430\u0435\u0442 \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0438 \u0447\u0442\u0435\u043d\u0438\u0438 wellcome-\u043f\u0430\u043a\u0435\u0442\u0430 =)\n. https://github.com/derElektrobesen/tntlua/blob/bernadette/bernadette.test.lua#L624\n. \u041e_\u043e\nThats why I ask you to remove this unreadable backtraces =)\nThanks!\n. Read-only mode should be enabled using another way:\nbox.cfg{read_only=true}\nNow it works.\n. ",
    "ghost": "Please let me know how I can contribute to this effort as a non-developer.\n. I'll look into it - - the best solution might be to find a way to get locally running boards into the infrastructure you refer. I have plenty of hardware on my side I have no problem dedicating / donating.\n. I have similar segmentation faults happening for me. If I have a Sophia backed space in the tarantool instance, the problem is much much worse. A memtx only situation has the problem, but it happens only very occasionally.\nI'll get a reproducible case for Sophia and file under another issue. \nIf I can get another crash in the memtx case I will post here.\n. I could use this ASAP! I apologize if I missed something in the manual, but could you comment on how this is done so that I can test this, now?\n. ",
    "rushba": "Sure, but we had some strange issues (Kostja noticed some finalizers), so we prefer you do the right things ;) We used to use the code like:\n``` lua\nffi.cdef[[\n          struct timeval {\n               long      tv_sec;     / seconds /\n               long tv_usec;    / microseconds /\n           };\n           struct rusage {\n               struct timeval ru_utime; / user CPU time used /\n               struct timeval ru_stime; / system CPU time used /\n               long   ru_maxrss;        / maximum resident set size /\n               long   ru_ixrss;         / integral shared memory size /\n               long   ru_idrss;         / integral unshared data size /\n               long   ru_isrss;         / integral unshared stack size /\n               long   ru_minflt;        / page reclaims (soft page faults) /\n               long   ru_majflt;        / page faults (hard page faults) /\n               long   ru_nswap;         / swaps /\n               long   ru_inblock;       / block input operations /\n               long   ru_oublock;       / block output operations /\n               long   ru_msgsnd;        / IPC messages sent /\n               long   ru_msgrcv;        / IPC messages received /\n               long   ru_nsignals;      / signals received /\n               long   ru_nvcsw;         / voluntary context switches /\n               long   ru_nivcsw;        / involuntary context switches /\n           };\n           int getrusage(int who, struct rusage usage);\n       int gettimeofday(struct timeval tv, struct timezone *tz);\n]]\nlocal RUSAGE_SELF = 0\nfunction ss_get_rusage()\n    local r = ffi.new(\"struct rusage\")\n    if ffi.C.getrusage(RUSAGE_SELF, r) < 0 then\n        return -1\n    end\n    local ru_utime =\n    tonumber(r.ru_utime.tv_sec) + tonumber(r.ru_utime.tv_usec) / 1000000\n    local ru_stime =\n    tonumber(r.ru_stime.tv_sec) + tonumber(r.ru_stime.tv_usec) / 1000000\nreturn {\n    ru_utime = ru_utime,\n    ru_stime = ru_stime,\n}\n\nend\n```\nCould you point me at mistake in this code?\n. @bigbes could you explain the difference between ffi.new(\"struct rusage[1]\") and ffi.new(\"struct rusage\") ? Is it related to garbage collection?\nI agree that there no reason to take all syscalls on board, but we need more detail stats. For example, we need snapshot thread rusage, how can we get this?\n@kostja, we run our code on prod now and there no crashes. And anyway, thanks a lot.\n. ",
    "kadavros": "\n\n\nUgh, a raw parameter string looks ugly.\n\n\n\nIf we map only given few params to lua table variables, then we'll need to upgrade tarantool for any new requested param, which is ugly too.\n. Ok, I just don't get this 'checks' and 'safety' issues - these are all runtime checks anyway, the difference is only in who does the check - tarantool or sophia. It seems like there is no need to duplicate those checks in tarantool, sophia will handle them. Plus you get all sophia params for free, without the need to duplicate them in tarantool too.\n. Btw, MondoDB implements this feature the same way for WiredTiger engine tuning: just by transferring raw option string to the engine itself. The only alternative is to duplicate them all and somehow to keep up with new options, which is painful.\n. Ok, then whatever ) we just need to pass some options to sophia per space, the most crucial options are: page_size, compression, node_size, compression_key. And more is better.\n. Unfortunately, no. I'll provide them if this behavior happens again.\n. ",
    "coldze": "Ok, but how does that correlate with outdated changelog-file in debian folder?\n. ",
    "stofel": "Yes, 1.6.7 from git (branch master) is work.\nSeems it is bug only freebsd database/tarantool.\n. In fresh ports\n]>tarantool -v\nTarantool 1.9.1-0\nTarget: FreeBSD-amd64-Release\nBuild options: cmake . -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_BACKTRACE=false\nCompiler: /usr/bin/cc /usr/bin/c++\nC_FLAGS:-O2 -pipe  -fstack-protector -fno-strict-aliasing -Wno-unknown-pragmas -fexceptions -funwind-tables -fno-common -std=c11 -Wall -Wextra -Wno-strict-aliasing -Wno-char-subscripts\nCXX_FLAGS:-O2 -pipe -fstack-protector -fno-strict-aliasing -Wno-unknown-pragmas -fexceptions -funwind-tables -fno-common -std=c++11 -Wall -Wextra -Wno-strict-aliasing -Wno-char-subscripts\n~]>tarantool\nPANIC: unprotected error in call to Lua API (builtin/iconv.lua:33: Undefined symbol \"libiconv_open\"). \u0414\u0443\u043c\u0430\u044e \u043e\u043d\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043a\u0430\u043a \u0442\u043e, \u043d\u043e \u043d\u0435 \u0434\u0443\u0431\u043b\u044c. ",
    "jobs-git": "I also experience this issue on a numa architecture. The latency randomly slows down to 10x - 200x which is saddening. On a non-numa, it works fine. I hope devs. can take a look at this.\nIf I do as mejedi suggested, i can get almost 6M Req/s which is very impressive for a database.. It turns out that there is an internal race conditions of files in my HDD, i recreated a new example.lua in a different directory and its working again.. Hi, this is not a question, but a suggestion, maybe new feature, but If tarantool has got something better, then that is already fine.. its the app developers job if he wants to join openresty w/ tarantool. Hi, I was able to reproduce it again, where do I get RSS information?. tarantool c already provides the fd using tnt_fd(). see above. ",
    "d3m1gd": "I arranged access to a vps with alpinelinux install, please contact me at email d3m1gd@gmail.com\nAlso I am willing to provide any additional support necesarry, but have no idea about Travis integration.\n. Tarantool builds ok, tarantool can be run, simple interaction works, but tests fail. \nCommands run\ncd tarantool\nmkdir build\ncd build\ncmake ..\nmake\npaxctl -c src/tarantool # alpine uses grsecurity kernel\npaxctl -m src/tarantool\nmake test\nOutput\n```\nCollecting tests in 'app': application server tests.\nFound 22 tests.\nCollecting tests in 'big': lua big tests.\nFound 9 tests.\nCollecting tests in 'box': tarantool/box, minimal configuration.\nFound 56 tests.\nCollecting tests in 'box-py': legacy python tests.\nFound 8 tests.\nCollecting tests in 'engine': tarantool multiengine tests.\nFound 32 tests.\nCollecting tests in 'long_run': long running tests.\nFound 4 tests.\nCollecting tests in 'long_run-py': long running tests.\nFound 1 tests.\nCollecting tests in 'replication': tarantool/box, replication.\nFound 6 tests.\nCollecting tests in 'replication-py': tarantool/box, replication.\nFound 6 tests.\nCollecting tests in 'sophia': sophia integration tests.\nFound 7 tests.\nCollecting tests in 'unit': unit tests.\nFound 39 tests.\nCollecting tests in 'wal_off': tarantool/box, wal_mode = none.\nFound 10 tests.\nCollecting tests in 'xlog': tarantool write ahead log tests.\nFound 3 tests.\nCollecting tests in 'xlog-py': legacy python tests.\nFound 5 tests.\n================================================================================\nTEST                                            PARAMS          RESULT\n\napp/cfg.test.lua                                                [ fail ]\nTest failed! Result content mismatch:\n--- app/cfg.result      Tue Jan 12 10:23:25 2016\n+++ app/cfg.reject      Tue Jan 12 10:58:17 2016\n@@ -23,8 +23,34 @@\n ok - wal_dir_rescan_delay new value\n ok - too_long_threshold default value\n ok - too_long_threshold new value\n-ok - wal_mode fsync\n-ok - wal_mode fsync -> fsync\n+not ok - wal_mode fsync\n+  ---\n+  filename: /home/loko/project/tarantool/test/app/cfg.test.lua\n+  trace:\n+  - line: 0\n+    source: '@/home/loko/project/tarantool/test/app/cfg.test.lua'\n+    filename: /home/loko/project/tarantool/test/app/cfg.test.lua\n+    what: main\n+    namewhat:\n+    src: /home/loko/project/tarantool/test/app/cfg.test.lua\n+  line: 0\n+  expected: 0\n+  got: 256\n+  ...\n+not ok - wal_mode fsync -> fsync\n+  ---\n+  filename: /home/loko/project/tarantool/test/app/cfg.test.lua\n+  trace:\n+  - line: 0\n+    source: '@/home/loko/project/tarantool/test/app/cfg.test.lua'\n+    filename: /home/loko/project/tarantool/test/app/cfg.test.lua\n+    what: main\n+    namewhat:\n+    src: /home/loko/project/tarantool/test/app/cfg.test.lua\n+  line: 0\n+  expected: 0\n+  got: 256\n+  ...\n ok - wal_mode fsync -> write is not supported\n ok - wal_mode write -> fsync is not supported\n ok - work_dir is invalid\n@@ -32,6 +58,20 @@\n ok - snap_dir is invalid\n ok - wal_dir is invalid\n ok - logger_nonblock default value\n-ok - logger_nonblock new value\n+not ok - logger_nonblock new value\n+  ---\n+  filename: /home/loko/project/tarantool/test/app/cfg.test.lua\n+  trace:\n+  - line: 0\n+    source: '@/home/loko/project/tarantool/test/app/cfg.test.lua'\n+    filename: /home/loko/project/tarantool/test/app/cfg.test.lua\n+    what: main\n+    namewhat:\n+    src: /home/loko/project/tarantool/test/app/cfg.test.lua\n+  line: 0\n+  expected: 0\n+  got: 256\n+  ...\n ok - dynamic listen\n ok - dynamic listen\n+# failed subtest: 3\nFatal error: Failed to run test app/cfg.test.lua: wrong test output. Execution aborted.\n[INFO/MainProcess] process shutting down\ntest/CMakeFiles/test.dir/build.make:57: recipe for target 'test/CMakeFiles/test' failed\nmake[3]:  [test/CMakeFiles/test] Error 255\nCMakeFiles/Makefile2:1382: recipe for target 'test/CMakeFiles/test.dir/all' failed\nmake[2]:  [test/CMakeFiles/test.dir/all] Error 2\nCMakeFiles/Makefile2:1389: recipe for target 'test/CMakeFiles/test.dir/rule' failed\nmake[1]:  [test/CMakeFiles/test.dir/rule] Error 2\nMakefile:561: recipe for target 'test' failed\nmake:  [test] Error 2\n```\n. ",
    "plandem": "+1 for arrays\n. ",
    "igorcoding": "+1 for partial index\n. Please, make tarantoolctl rocks look for rocks in the https://rocks.moonscript.org along with rocks.tarantool.org . Okay, got it.. ",
    "fsitedev": "+1 for mongo \"multikey\"\n. Yes, it's quite clear but maybe it will be safer if log will not do any formatting if only one argument is passed into it.\nI've faced with situation when simple log.info(var) call leads to application crash just because 'var' occasionally contains '%' symbol.\n. We have upgraded from 1.7.4.180. box.cfg\nlog_nonblock: true\ncheckpoint_count: 5\nrows_per_wal: 50000\nvinyl_range_size: 1073741824\nreadahead: 16320\nmemtx_dir: /var/lib/tarantool/collector-node1\nmemtx_min_tuple_size: 16\nvinyl_page_size: 8192\ncoredump: true\nvinyl_run_size_ratio: 3.5\nreplication_timeout: 10\nwal_max_size: 268435456\nvinyl_memory: 134217728\nlog: /logs/tarantool/collector-node1.log\nbackground: true\nvinyl_dir: /var/lib/tarantool/collector-node1\nvinyl_cache: 134217728\nvinyl_read_threads: 1\nvinyl_timeout: 60\nlisten: '9900'\ncheckpoint_interval: 7200\nvinyl_bloom_fpr: 0.05\nvinyl_max_tuple_size: 1048576\nvinyl_write_threads: 2\nforce_recovery: false\nmemtx_max_tuple_size: 1048576\nslab_alloc_factor: 1.05\ntoo_long_threshold: 2\nlog_level: 5\nwal_mode: write\nworker_pool_threads: 4\nhot_standby: false\nread_only: false\npid_file: /var/run/tarantool/collector-node1.pid\nmemtx_memory: 1073741824\nwal_dir: /var/lib/tarantool/collector-node1\nusername: tarantool\nvinyl_run_count_per_level: 2\nwal_dir_rescan_delay: 2. box.slab.info()\nitems_size: 854098104\nitems_used_ratio: 88.20%\nquota_size: 1073741824\nquota_used_ratio: 82.81%\narena_used_ratio: 87.9%\nitems_used: 753277448\nquota_used: 889192448\narena_size: 858292200\narena_used: 754620936. Yes, we constantly run collectgarbage('collect') in our fibers and it doesn't reduce memory.\nUnfortunatelly we run out of memory last friday so we had to reboot all instances. Obviously slab.info also has changed since the ticket-start message but dynamic persists event after reboot: we have stable quota used growth by few percents daily.. Here is our a little bit extended script:\nlua\n(function ()\nlocal res = {}\n  for _, s in pairs(box.space) do\n    local has_len, len = pcall(s.len, s)\n    table.insert(res, {id = s.id, name = s.name, bsize = s:bsize(), len = has_len and len or 0})\n  end\nreturn {slab = box.slab.info(), spaces = res}\nend)(). Result (spaces are repeated in the output. is that normal?):\n```\n\nslab:\n  items_size: 34900192\n  items_used_ratio: 73.97%\n  quota_size: 1073741824\n  quota_used_ratio: 6.25%\n  arena_used_ratio: 73.4%\n  items_used: 25814200\n  quota_used: 67108864\n  arena_size: 36997240\n  arena_used: 27141304\nspaces:\n- len: 262\n  bsize: 24147\n  name: socdem_1508762760\n  id: 256545\n- len: 262\n  bsize: 24147\n  name: socdem_1508762760\n  id: 256545\n- len: 0\n  bsize: 0\n  name: _vindex\n  id: 289\n- len: 35\n  bsize: 1497\n  name: _index\n  id: 288\n- len: 0\n  bsize: 0\n  name: _vpriv\n  id: 313\n- len: 65\n  bsize: 1295\n  name: site_config\n  id: 195678\n- len: 0\n  bsize: 0\n  name: _vfunc\n  id: 297\n- len: 1\n  bsize: 29\n  name: _func\n  id: 296\n- len: 16\n  bsize: 1622\n  name: _space\n  id: 280\n- len: 4\n  bsize: 86\n  name: _schema\n  id: 272\n- len: 4\n  bsize: 103\n  name: _user\n  id: 304\n- len: 13\n  bsize: 65\n  name: _truncate\n  id: 330\n- len: 1\n  bsize: 29\n  name: _func\n  id: 296\n- len: 13\n  bsize: 174\n  name: _priv\n  id: 312\n- len: 35\n  bsize: 1497\n  name: _index\n  id: 288\n- len: 4\n  bsize: 103\n  name: _user\n  id: 304\n- len: 1\n  bsize: 40\n  name: _cluster\n  id: 320\n- len: 1\n  bsize: 40\n  name: _cluster\n  id: 320\n- len: 13\n  bsize: 174\n  name: _priv\n  id: 312\n- len: 13\n  bsize: 65\n  name: _truncate\n  id: 330\n- len: 0\n  bsize: 0\n  name: _vindex\n  id: 289\n- len: 0\n  bsize: 0\n  name: _vspace\n  id: 281\n- len: 0\n  bsize: 0\n  name: _vuser\n  id: 305\n- len: 16\n  bsize: 1622\n  name: _space\n  id: 280\n- len: 0\n  bsize: 0\n  name: _vspace\n  id: 281\n- len: 4140\n  bsize: 755459\n  name: fact_1508762760\n  id: 256546\n- len: 4140\n  bsize: 755459\n  name: fact_1508762760\n  id: 256546\n- len: 0\n  bsize: 0\n  name: _vuser\n  id: 305\n- len: 4\n  bsize: 86\n  name: _schema\n  id: 272\n- len: 0\n  bsize: 0\n  name: _vpriv\n  id: 313\n- len: 0\n  bsize: 0\n  name: _vfunc\n  id: 297\n- len: 65\n  bsize: 1295\n  name: site_config\n  id: 195678\n...\n. Our common space structure:\nunix/:/var/run/tarantool/collector-node2.control> box.space.fact_1508838420\n\n\nindex:\n    0: &0\n      unique: true\n      parts:\ntype: unsigned\n    fieldno: 1\ntype: string\n    fieldno: 2\ntype: string\n    fieldno: 3\ntype: unsigned\n    fieldno: 4\n  id: 0\n  space_id: 514\n  name: primary\n  type: TREE\nprimary: *0\n  on_replace: 'function: 0x40e146d8'\n  temporary: false\n  id: 514\n  engine: memtx\n  enabled: true\n  name: fact_1508838420\n  field_count: 0\n...\n```. We have one cron-based lua script running once per minute and making following routines on such common space:\n\n\nconnect to tnt node and run box.snapshot\nparse resulting xlogs with xlog package\n\ndrop old spaces. The most load on this space come from nginx upstream module that constantly calls one lua procedure.\nLiterally this procedure makes only one upsert operation. How it looks like in general: \n\n\nBlank tuple made once on node startup with all fields\nlocal blank_tuple = box.tuple.new(...)\n\n\nIn procedure we prepare update and insert tuples \nlocal new_update = {{'+', 10, 1}}\nlocal new_insert = {\n  {'=', 1, x},\n  {'=', 2, y},\n  {'=', 3, z},\n  {'=', 10, 1},\n}\n\nUpsert in procedure at last\nspace_pointer:upsert(blank_tuple:update(new_insert), new_update)\n\nBackground fiber tracks each minute, creates new space if current minute changed and update space_pointer variable with newly created space. We are ready to provide more data needed to investigate the problem\n. Currently only 7.19.7-53 version officially available on C6 from redhat repo.\nIs that possible to fix tarantool in the way to support this version without crash?. ",
    "jmenhome": "array. ",
    "knazarov": "I would be nice if this thing also worked with functional index. e.g. I have a field with a space-separated string, and then a functional index splits it to an array of strings, and I have a string-array index on top of it. See 70185195015bd09ebde322141c86e579930d61d4\n. @anuriq do you need replication support in cookbooks?\n.  Write a chef cookbook to deploy Tarantool\n. Hi @bogatuadrian \nIt's currently not in the scope. . @epicfilemcnulty Could you please check this patch: https://github.com/tarantool/tarantool/pull/1504\nI did it in order to build official docker images based on Alpine Linux (see https://github.com/tarantool/tarantool-docker/tree/alpine-based-images)\nIf the patch is OK, I'll merge it to 1.6.\n. Sorry, the correct link to the patch is:  https://github.com/tarantool/small/commit/e59cf7c3e1d2c263ccd6d5aaf6d8ea3572b68c06\n. @epicfilemcnulty Do you plan to build a docker container with tarantool? Maybe we can coordinate our efforts... What are your requirements?\n. @saks Yeah, I already reconsidered that. See https://github.com/tarantool/tarantool-docker/tree/alpine-based-images\nI've implemented the 1.7 and 1.6 images based on Alpine. The only problem that exists so far is that I don't know how to generate C.UTF-8 locale. The locale-generating stuff is missing in the distro.\n. @saks Yes. That's what I'm up to. For the time being, you can use https://hub.docker.com/r/tarantool/tarantool/\nUPD: just do docker pull tarantool/tarantool\n.  Run bootstrap scripts once in Docker containers\n.  Add \"batteries\" to the docker container\n. This is a bug in uri library's BNF grammar. But the general form of user@host is supported (without colon). I believe it will be a good compromise to just treat the password as empty in this case.\n. The PRs above are just a partial solution. They don't cover the empty password in URI, just the missing one. Which should be enough for now.\n. Required for #1502\n. @rtsisyk please review. I've added parsing of \":@\" form and added a few tests for the empty password scenario.\n.  login for guest user with empty password\n.  Patch net.box to change nil password to empty string\n.  tarantoolctl connect doesn't report errors\n.  Race condition in master-master replication setup\n.  Prometheus endpoint for Tarantool\n. Patch is ready. Needs review by @rtsisyk.\n. Patch is ready. Waiting for review.\n. Implemented. Waiting for review.\n.    Some raw feedback:\n\nNumber of runs per ranges is in %-s. Why? If it's a fraction of maximum\n     number of runs per range, it should be a fraction, and not %-s. But\n     anyway, the meaning is puzzling.\npages will be clearer if named pages_total.\nCache hits and misses should probably go to box.stat. Right now we have\n     a separation of immediate and statistical values. The same goes for\n     disk seeks and reads.\ncount should be renamed to something like tuples_per_index\nAs with box.cfg, values that have units will look better with a unit\n     suffix, e.g. memory.used_bytes or memory.allocated_bytes\n. clang 3.9 release already includes support for fibers in address sanitizer\n. This will (probably) break the prometheus module, as it currently reports memory usage.\nWill there be backwards compatibility?.    - Fragmentation should be fractional, and not in %-s.\n\nI'm confused about maxalloc vs allocated. What's the difference?\n.    Here's my raw feedback:\n\n\nMemory specification is not clear. If memtx.slab_alloc_arena includes\n     anything except actual data stored in spaces, then it needs further\n     design consideration.\n\nUnits should be specified in configuration entry name. E.g.:\nmin_alloc_bytes\nmax_alloc_bytes\nsnapshot_period_seconds\n\n\nIt is not clear what wal.rows does. Probably better to rename to\n     wal.max_row_count. The same goes about wal.size. Probably better\n     to have wal.max_size_bytes\nwal.rescan_delay is better read as wal.rescan_delay_seconds\ndir in engine configuration will be more obvious either as data_dir\n     or base_dir, depending on the behavior of wal_dir and snap_dir\n     configuration variables. If they are relative to the engine's dir,\n     then e.g. memtx.base_dir will be more obvious\nlogger.pipe will be more obvious if named logger.pipe_to_cmd\n\nIt is not clear now if options in logger are mutually exclusive. If\n     it's possible to configure multiple loggers at the same time, it will\n     be useful to be able to specify different logging levels for each logger.\n     If not, an explicit logger.engine option is required, and other options\n     should be prefixed by logging engine type. E.g. logger.pipe_cmd,\n     logger.syslog_identity, logger.syslog_facility.. I will do it. But going further, you can add it for new repos like this:\n\n\nGo to repo Settings -> Webhooks\n\nClick \"Add a new webhook\"\nSet payload URL to http://farm.tarantool.org:8083/hooks\nSet content-type to application/json\nSet \"secret\" to the secret token which you may get from me\nSet events to just push event\nLeave \"active\" checked\n\nThat's it. There is no need to reconfigure the daemon itself.\n. Does it behave this way for all pull requests or only for this one?\nWere there any problems with the old notification daemon? Because they both use the same tool/algorightm.. I need a decision to go on with working on LuaRocks. I'm bringing up this because of recent patches to mysql and curl rocks.. @kostja if we do install luarocks to our own path, then luarocks will be unable to remove our packages. You have shown the related ticket in tarantool/curl a few days ago.. @hishamhm thanks for suggestion. I'll try it out.. Additional sources of inspiration:\nhttps://github.com/docker/libkv\nhttps://github.com/projectcalico/libcalico-go/tree/master/lib/backend\nhttps://github.com/gliderlabs/registrator\nPay special attention to how relabeling works in prometheus. Do you propose that in future we will do development in forks?. @bigbes with forks you don't have to clean up branches in the main repo. It becomes developers' responsibility.. It would be nice to have logging of structured data, e.g. lua tables. Some loggers like syslog may translate those to text, while structured backends like fluentd will send the data in json format to elasticsearch.. @kostja we are only doing it for proof-of-concept. Final implementation will be as you describe.. Please like my post if you think that is_array() should just check if table is a contiguous sequence of elements with numeric keys from 1 to n. (without holes). And dislike otherwise.\nAnd for the empty table corner-case:\nlua\nis_array({}) == true\nIn my opinion it is the most practical and useful definition.. Correction: make it possible to link with libcurl from homebrew. Even probably do it by default.. The issue #2485 is to set different log levels for loggers.\nMy need is to be able to modify the log entry format and to be able to put undecorated stuff to stdout/logfile/etc...\nThere is no major conflict in it. We can later add say_plain() to individual logger objects.. A prototype that demonstrates how I wish the log module to be extended:\nhttps://github.com/tarantool/slog. @Totktonada I doubt it. The built-in formatter doesn't support Lua tables. Well, it does, but it uses tostring(). . We need in addition:\n\na way to control sync timeout\na way to differentiate when insert/update/delete operations fail due to timeout or terminated connection to the slave\na way to make transactions arrive to slaves in one batch, to prevent the case of partial updates\n\nOverall I like the AFTER_COMMIT mode. It is not a fully-featured bsync, but we can develop storage-layer libraries in a way to minimize possible errors in edge cases.. @kostja because this is unlikely to happen in luarocks, for political reasons. \nPlus, it's trivially doable outside of luarocks: we need to just parse the file and delegate execution to the existing luarocks functionality.. @kostja Sorry, but I don't want it bad enough to negotiate the feature with luarocks authors. You can move it to general wishlist. . Discussed with @IlyaMarkovMipt \nAgreed to first implement PBKDF2, because it's in openssl already, and then bcrypt.. @rtsisyk \u0441\u0435\u0439\u0447\u0430\u0441 PBKDF2_ITERATIONS \u0437\u0430\u0445\u0430\u0440\u0434\u043a\u043e\u0436\u0435\u043d. \u041d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.. I still see this on latest homebrew. I still have \"-Wno-c++11-narrowing\" in my brew spec, and I don't want to reinstall tarantool right now, so feel free to close the ticket. I'll re-open it if I stumble upon it again.. I think it would be better to use plain lua for this, because calls to C break luajit performance. I don't have any hard evidence in favor of pure lua implementation, so feel free to dismiss this as insubstantial. The only reason I see for this is that less expensive C code can potentially prevent jitting of more expensive lua code that is around the call to string.rstrip().\nI personally wouldn't bother and just take the implementation from Penlight: https://github.com/stevedonovan/Penlight/blob/master/lua/pl/stringx.lua. Just in case, here's the PoC version:\nhttps://gist.github.com/racktear/fbf1c7b1ff2b6fc4acc171e11ea8e2bc. @rtsisyk how do you differentiate the second variant from a valid URL?. @kbelyavs try parsing the url \"http://unix/:/path/to/file\" by our URL parser and see how it will parse the components. It is not even a valid URL. \nUPD: while http+unix://path-to-file with \"path-to-file\" urlencoded is perfectly valid.\n. @kbelyavs I don't think we should support the case you mention. It's not a valid URI. @rtsisyk please consider it seriously. . @alyapunov are you serious?. We do have checks, but I believe something like checks should be onboard. Checking public module contract is just a nice coding style, and is done all over the internal tarantool's Lua code. If we do it ourselves, then it should be a no-brainer to standardize and document the API, so there is only one recommended way to do it.. Also, the protocol by which we do member discovery must also support symmetric encryption with a shared key. This will allow us to work in untrusted networks.. @kyukhin 2.x is not released yet, so I don't see anything criminal in breaking backwards compatibility there. Current \"cluster\" thing just confuses me to be honest.. Also, we probably should release such binary as a part of our regular release process. . @kostja I hope you understand that docker is essentially the same: baking everything into a package. You can't update openssl in a docker container without doing a rebuild. Well, you probably can, but then it's not what people will do with Docker.. Qualities I personally would like to see in logger:\n- support for long lines/objects (10-s to 100-s of kilobytes)\n- support for outputting all logs in JSON\n- support for arbitrary log line formatting (ideally user-defined) both for regular and audit logs\n- separate log levels for system messages, audit log and application messages (ideally set per-module)\n- ability to write system and application logs to the same FD (including stdout)\n- lack of output tearing/mixup, even when writing to stdout\n- don't yield when calling log.*()\n- support for special formatting escape sequence to convert lua tables to JSON. like log.info(\"Quick and dirty debug: %j\", lua_table_i_want_to_print_in_logs). Also discussed in #2738. The only problem with icu-date is that it doesn't understand nanoseconds.. Here's a project that pretty much accomplishes what I want: https://luapower.com/bundle\nIt can be partially integrated into tarantool or can be used as a basis for implementing something similar. You can make tarantoolctl rocks understand all luarocks options. I don't see any reason to move that to a separate utility, especially if it breaks the public API. It is possible to fix this behavior without modifying any (most of) externally visible stuff.. For merge-like functions I suggest table.update(), similar to Python that will work for both maps and arrays.. But let's not add more to this ticket. Better make it easy to implement and then ask for another portion in a separate one.. Answering my own question:\nThis is because luajit's build scripts prefer most of the compiler parts from OS X SDK, but some (namely, ar utility) from the regular system paths (if if finds them there). \nIn my case, I had gnu binutils installed from homebrew, and looks like ar from there is incompatible with OS X SDK.\nI don't think it's much of a bug in tarantool itself. I've removed gnu binutils and it build find.. @Totktonada still, yaml output loses information about box.NULL, so it's relevant for other cases. If you make box.space.insert accept sparse arrays - fine, it checks out. But it may be important for other functions. I'm only listing insert as the most convenient example of what's broken in REPL right now. Attaching a PoC patch that can be seen in video. It's very rough and needs improvement.\nhttps://gist.github.com/knazarov/6681c5055c1f6bf06eee8a6a09489f8b. It works as designed. We need some place to report file information, and \"file\" in your json will clash with whatever is inserted by log module itself.\n. See pull request. Reviewed by @Totktonada . I suggest that we make keep-alive the default thing within a connection pool. It should be done without requiring the user to write anything except pool.get(). I know nothing about other plans. To be honest, I still plan to keep luarocks bundled in the same binary in tarantool enterprise, for many reasons. The main one being that I want to be able to use luarocks commands when located inside production app bundle.. To clarify: I don't think that refactoring of tarantoolctl will likely happen in some foreseeable future, given other problems. . We can't expect package.path to end with semicolon, because for all we know the user could have added anything to the right part of package.path and not terminate it with said semicolon. I could've done string.rstrip(package.path, \";\"), but we don't have it implemented, and I didn't want to complicate the code to evade the extra symbol.\nIf you insist, I'd make an effort to clean it up.. I personally like the short \"setpath\" more (partly because standard lua and tarantool functions are less wordy), but again, I won't stand for it if you insist. I need the functionality, and don't care that much about the name.. Because I thought if there would be more package.path manipulation functions they could go there. . I made this on purpose: I want a thing that says \"this is an application, please treat its load paths in a special way\". Notice that it not only adds .rocks to load path, but also the module directory as well, which enables you to always load subpackages using relative \"paths\" even when your cwd() is physically somewhere else.\nYour suggestion to patch the loader only covers half of the thing I aim for (the .rocks). If you say that we should also patch the loader to magically handle the project root, then it likely goes against common intuition how regular load paths work (and I'd prefer to not have such magic)\nAs for what you write about \"We cannot set parent directory as base for loaders\" I didn't understand. Please elaborate. I only talk about application root here.\nThe \"cases\" shouldn't be different. We should push one preferred way for writing Tarantool apps, with \"relocatable app\" being the default (last time we discussed it with Kostya Osipov, he agreed with that). If the user doesn't want the \"default\" behavior, they are free to not use package.setpath() at all and be on their own. \nAnother argument for not patching the loader is that it will modify its current behavior, and break something for current users. Which I specifically don't want to do after we've passed v2 beta as there is just too little time left to collect feedback and act on it. Instead my plan is to add this package.setpath() and vote for total removal of \"recursive upwards rocks loader\" in 3.0.. ",
    "kshcherbatov": "Multikey indexes in memtex must be implemented over \"tuple hints\" code rework.\nSo, #3961 must be merged first. The reason for this behavior is that telnet sends a sequence \\r\\n as a separator. When you run the default values, \\n is used as the line separator; however, if you change it to a different # character, the new separator becomes #\\n. And the line that came from telnet contains bytes#\\r\\n, which does not correspond to #\\n.. This functionality seems to be already in Tarantool:\nThere is \"pragma delimiter\" introduced woth @GeorgyKirichenko  patch c3afd0 \"Add support for backslash commands in console\".\nUsage scenario:\n```\ntarantool> \\set delimiter ;\n\n...\ntarantool> \\set language sql\n\ntrue\n...\n\ntarantool> CREATE TABLE t2  (a int primary key,\n         > b int)\n         > ;\n```\n. Thank you for the comments,\nas for first comment I've accounted it in the patch bellow.\n```\ndiff --git a/src/box/lua/console.lua b/src/box/lua/console.lua\nindex e7cb50a..7644d33 100644\n--- a/src/box/lua/console.lua\n+++ b/src/box/lua/console.lua\n@@ -67,6 +67,7 @@ local function set_language(storage, value)\n         local msg = 'Invalid language \"%s\", supported languages: lua and sql.'\n         return error(msg:format(value))\n     end\n+    set_delimiter(storage, value == 'sql' and ';' or nil)\n     storage.language = value\n     return true\n end\n@@ -316,7 +317,11 @@ local function local_read(self)\n                 break\n             end\n         elseif #buf >= #delim and buf:sub(#buf - #delim + 1) == delim then\n-            buf = buf:sub(0, #buf - #delim)\n+            local sub_len = #buf - #delim\n+            if box.session.language == 'sql' and delim == ';' then\n+                sub_len = sub_len + 1\n+            end\n+            buf = buf:sub(0, sub_len)\n             break\n         end\n         buf = buf..\"\\n\"\n@@ -354,8 +359,12 @@ local function client_read(self)\n         -- Escape sequence to close current connection (like SSH)\n         return nil\n     end\n-    -- remove trailing delimiter\n-    return buf:sub(1, -#delim-1)\n+    -- remove trailing delimiter if it is not SQL ;\n+    if box.session.language == 'sql' and delim == ';' then\n+        return buf\n+    else\n+        return buf:sub(1, -#delim-1)\n+    end\n end\n```\nAs for second, we should trim every new data portion on read from console or socket using smth like this:\nfunction rtrim(s)\n  local n = #s\n  while n > 0 and s:find(\"^%s\", n) do n = n - 1 end\n  return s:sub(1, n)\nend\nBut I am not shure that it is a good idea.. won't implement for now\n@kostja confirmed\n. Tested on other databases:\nms sql: Divide by zero error encountered.\npgsql: ERROR: division by zero\nORA-01476: divisor is equal to zero\nmysql, sqlite: NULLs in count of rows amount \n@kyukhin lit's disallow divide by 0?\n```\ndiff --git a/src/box/sql/vdbe.c b/src/box/sql/vdbe.c\nindex 7a4d376..8a200b0 100644\n--- a/src/box/sql/vdbe.c\n+++ b/src/box/sql/vdbe.c\n@@ -1590,13 +1590,15 @@ case OP_Remainder: {           / same as TK_REM, in1, in2, out3 /\n        case OP_Subtract:  if (sqlite3SubInt64(&iB,iA)) goto fp_math;  break;\n        case OP_Multiply:  if (sqlite3MulInt64(&iB,iA)) goto fp_math;  break;\n        case OP_Divide: {\n-           if (iA==0) goto arithmetic_result_is_null;\n+           if (iA == 0)\n+               goto division_by_zero;\n            if (iA==-1 && iB==SMALLEST_INT64) goto fp_math;\n            iB /= iA;\n            break;\n        }\n        default: {\n-           if (iA==0) goto arithmetic_result_is_null;\n+           if (iA == 0)\n+               goto division_by_zero;\n            if (iA==-1) iA = 1;\n            iB %= iA;\n            break;\n@@ -1615,14 +1617,16 @@ case OP_Remainder: {           / same as TK_REM, in1, in2, out3 /\n        case OP_Multiply:    rB = rA;       break;\n        case OP_Divide: {\n            / (double)0 In case of SQLITE_OMIT_FLOATING_POINT... /\n-           if (rA==(double)0) goto arithmetic_result_is_null;\n+           if (rA == (double)0)\n+               goto division_by_zero;\n            rB /= rA;\n            break;\n        }\n        default: {\n            iA = (i64)rA;\n            iB = (i64)rB;\n-           if (iA==0) goto arithmetic_result_is_null;\n+           if (iA == 0)\n+               goto division_by_zero;\n            if (iA==-1) iA = 1;\n            rB = (double)(iB % iA);\n            break;\n@@ -1644,9 +1648,14 @@ case OP_Remainder: {           / same as TK_REM, in1, in2, out3 */\n    }\n    break;\n\narithmetic_result_is_null:\n+arithmetic_result_is_null:\n    sqlite3VdbeMemSetNull(pOut);\n    break;\n+\n+division_by_zero:\ndiag_set(ClientError, ER_SQL_EXECUTE, \"division by zero\");\nrc = SQL_TARANTOOL_ERROR;\ngoto abort_due_to_error;\n }\n\n/ Opcode: CollSeq P1 *  P4\n```\nExample\n```\ntarantool> CREATE TABLE te40 (s1 INT PRIMARY KEY);\n\n...\ntarantool> INSERT INTO te40 VALUES (4);\n...\ntarantool> INSERT INTO te40 VALUES (1);\n...\ntarantool> select 1/1 from te40;\n\n\n\n[1]\n\n\n[1]\n...\n\ntarantool> select 1/0 from te40;\n\nerror: 'Failed to execute SQL statement: division by zero'\n...\n\n```. Decided to introduce \npragma sql_engine_default='engine_name' first.. Require #3477 to be merged first.. 1. Warning:\nMySQL - no warning\nOracle - no warning\nPostgres - no warning\nSQLite - no warning\nMSSqlServer - no warning\n2. Having:\nOnly MySQL support such syntax:\nothers:\nOracle: ORA-00979: not a GROUP BY expression\nPostgreSQL: ERROR: column \"te40.s1\" must appear in the GROUP BY clause or be used in an aggregate function Position: 9\nSQLite: could not prepare statement (1 a GROUP BY clause is required before HAVING)\nMS SQL 2017: Column 'te40.s1' is invalid in the HAVING clause because it is not contained in either an aggregate function or the GROUP BY clause.\n. Won't fix.\nOk by @kostja . @pgulutzan please, give an correct example where \"HAVING without GROUP BY\" doesn't work, but should.. @pgulutzan, hi!\nShould we also support such cases?\nCREATE TABLE te40 (s1 INT, s2 INT, PRIMARY KEY (s1,s2))\nINSERT INTO te40 VALUES (1,1)\nINSERT INTO te40 VALUES (2,2)\nSELECT (SELECT s1 FROM te40 LIMIT 1) FROM te40 HAVING min(s1) > 0\nSELECT 1 from te40 having min(s1) > 0\nSELECT date() from te40 having min(s1) > 0\nIt is not so trivial to implement for SQLITE as a first part with aggregate functions only.\nDecided to merge patch containing only aggregates feature and create new task if required.. The patch to resolve this task is extra small:\n```\ndiff --git a/src/box/sql/whereexpr.c b/src/box/sql/whereexpr.c\nindex aa6d452..6eda429 100644\n--- a/src/box/sql/whereexpr.c\n+++ b/src/box/sql/whereexpr.c\n@@ -947,6 +947,21 @@ exprMightBeIndexed(SrcList * pFrom,        / The FROM clause /\n        return 0;\n }\n+/\n+ * This function is aimed to detection SELECTS in expr tree.\n+ * @param walker The Walker structure.\n+ * @param expr Expression tree to walk.\n+ * @retval WRC_Abort when SQL is finded to stop walker.\n+ * @retval WRC_Continue to continue walk.\n+ /\n+static int\n+select_lookuper(Walker * walker, Expr expr)\n+{\n+       (void)walker;\n+       return (expr->op == TK_SELECT) ?\n+              WRC_Abort : WRC_Continue;\n+}\n+\n /\n  * The input to this routine is an WhereTerm structure with only the\n  * \"pExpr\" field filled in.  The job of this routine is to analyze the\n@@ -1037,6 +1052,18 @@ exprAnalyze(SrcList * pSrc,      / the FROM clause */\n                        pLeft = pLeft->x.pList->a[pTerm->iField - 1].pExpr;\n                }\n\nif (op == TK_EQ) {\nWalker w;\nmemset(&w, 0, sizeof(w));\nw.xExprCallback = select_lookuper;\nif (sqlite3WalkExpr(&w, pLeft) != WRC_Continue ||\nsqlite3WalkExpr(&w, pRight) != WRC_Continue) {\nsqlite3ErrorMsg(pParse, \"SELECT inside \"\n\"of WHERE clause is forbiden\");\nreturn;\n}\n}\n+\n                if (exprMightBeIndexed\n                    (pSrc, op, prereqLeft, pLeft, &iCur, &iColumn)) {\n                        pTerm->leftCursor = iCur;\n\n```\nBut some tests already take into account described indeterminate, are you shre that we would like disallow such requests?! \n```\ntest:do_execsql_test(\n    \"misc5-3.1\",\n    [[\n        CREATE TABLE songs(songid primary key, artist, timesplayed);\n        INSERT INTO songs VALUES(1,'one',1);\n        INSERT INTO songs VALUES(2,'one',2);\n        INSERT INTO songs VALUES(3,'two',3);\n        INSERT INTO songs VALUES(4,'three',5);\n        INSERT INTO songs VALUES(5,'one',7);\n        INSERT INTO songs VALUES(6,'two',11);\n        SELECT DISTINCT artist \n        FROM (  \n         SELECT DISTINCT artist  \n         FROM songs    \n         WHERE songid IN (  \n          SELECT songid  \n          FROM songs  \n          WHERE LOWER(artist) = (  \n            -- This sub-query is indeterminate. Because there is no ORDER BY,\n            -- it may return 'one', 'two' or 'three'. Because of this, the\n        -- outermost parent query may correctly return any of 'one', 'two' \n            -- or 'three' as well.\n            SELECT DISTINCT LOWER(artist)  \n            FROM (    \n              -- This sub-query returns the table:\n              --\n              --     two      14\n              --     one      10\n              --     three    5\n              --\n              SELECT DISTINCT artist,sum(timesplayed) AS total    \n              FROM songs    \n              GROUP BY LOWER(artist)    \n              ORDER BY total DESC    \n              LIMIT 10  \n            )  \n            WHERE artist <> '' \n          )\n         )     \n        )\n        ORDER BY LOWER(artist) ASC;\n    ]], {\n        -- \n        \"two\"\n        -- \n    })\n. Don't care about duplicating values in SELECT OUTPUT; \nBut there is following amazing experience:\nCREATE TABLE t1(a int primary key, b int);\nINSERT INTO t1 VALUES(1,2);\nINTO t1 VALUES(3,4);\nINTO t1 VALUES(5,6);\ntarantool> SELECT b from t1 where a = (SELECT a FROM t1 WHERE b=2)\n\n\n\n[2]\n...\n\n\n\n```\nI suppose we should think well before we give up this functionality. Decided to implement another way and later. With RETURNING clause. #3649. Already fixed on 2.1 by @Totktonada  with a9695b98b6a6fa5e8c130577f274f97819d30bf4 #3489\n@kyukhin cherry-pick it please. Fixed in the latest 1.10 release. Please upgrade.. The binary search in whereKeyStats works incorrect as collected statistics is invalid.\nExample 1:\n\\set language sql\nCREATE TABLE t1(id INTEGER PRIMARY KEY AUTOINCREMENT, a, b, c, f, d, e);\nCREATE INDEX i1 ON t1(a, b, c, f, d);\n\\set language lua\ninsert_values = function()\n    for i = 0, 100 do\n        box.sql.execute(string.format(\"INSERT INTO t1 VALUES(null, 'x', 'y', 'z', 'a', %s, %s);\", i, math.floor(i / 2)))\n    end\nend\ninsert_values();\n\\set language sql\nANALYZE;\nselect * from \"_sql_stat4\";\nSELECT * FROM t1 WHERE a='x' AND b='y' AND c='z' AND f='a' AND d=55;\nResult 1:\n- ['T1', 'I1', '101 101 1 1 1', '0 0 44 44 44', '0 0 44 44 44', ['x', 'y', 'z',\n      'a', 44]]\n  - ['T1', 'I1', '101 101 1 1 1', '0 0 47 47 47', '0 0 47 47 47', ['x', 'y', 'z',\n      'a', 47]]\n  - ['T1', 'I1', '101 101 1 1 1', '0 0 50 50 50', '0 0 50 50 50', ['x', 'y', 'z',\n      'a', 50]]\n  - ['T1', 'I1', '101 101 1 1 1', '0 0 59 59 59', '0 0 59 59 59', ['x', 'y', 'z',\n      'a', 59]]\n  - ['T1', 'I1', '101 101 1 1 1', '0 0 64 64 64', '0 0 64 64 64', ['x', 'y', 'z',\n      'a', 64]]\n  - ['T1', 'I1', '101 101 1 1 1', '0 0 65 65 65', '0 0 65 65 65', ['x', 'y', 'z',\n      'a', 65]]\nI've expected to see:\n- ['T1', 'I1', '101 101 101 101 1', '0 0 0 0 44', '0 0 0 0 44', ['x', 'y', 'z',\n      'a', 44]]\n  - ['T1', 'I1', '101 101 101 101 1', '0 0 0 0 47', '0 0 0 0 47', ['x', 'y', 'z',\n      'a', 47]]\n  - ['T1', 'I1', '101 101 101 101 1', '0 0 0 0 50', '0 0 0 0 50', ['x', 'y', 'z',\n      'a', 50]]\n  - ['T1', 'I1', '101 101 101 101 1', '0 0 0 0 59', '0 0 0 0 59', ['x', 'y', 'z',\n      'a', 59]]\n  - ['T1', 'I1', '101 101 101 101 1', '0 0 0 0 64', '0 0 0 0 64', ['x', 'y', 'z',\n      'a', 64]]\n  - ['T1', 'I1', '101 101 101 101 1', '0 0 0 0 65', '0 0 0 0 65', ['x', 'y', 'z',\n      'a', 65]]\nAs all tupes has same ('x', 'y', 'z', 'a') values.\nThis doesn't match conceptual index stats structure:\n/ * List of integers: first one is the approximate number\n     * of entries in the index whose left-most field exactly\n     * matches the left-most column of the sample;\n     * second one - est. number of entries in the index where\n     * the first two columns match the first two columns of\n     * the sample; and so forth.\n     */\n. Another representative example:\n\\set language sql\nCREATE TABLE t1(id INTEGER PRIMARY KEY AUTOINCREMENT, a, b, c, d, f, e);\nCREATE INDEX i1 ON t1(a, b, c, d);\n\\set language lua\ninsert_values = function()\n    for i = 0, 100 do\n        box.sql.execute(string.format(\"INSERT INTO t1 VALUES(null, 'x', 'y', 'z', %s, %s, %s);\", i/3, i, math.floor(i / 2)))\n    end\nend\ninsert_values();\n\\set language sql\nANALYZE;\nselect * from \"_sql_stat4\";\ntarantool _sql_stat4:\n- ['T1', 'I1', '101 101 1 1', '0 0 11 11', '0 0 11 11', ['x', 'y', 'z', 3.6666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 13 13', '0 0 13 13', ['x', 'y', 'z', 4.3333333333333]]\n- - ['T1', 'I1', '101 101 1 1', '0 0 15 15', '0 0 15 15', ['x', 'y', 'z', 5]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 21 21', '0 0 21 21', ['x', 'y', 'z', 7]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 19 19', '0 0 19 19', ['x', 'y', 'z', 6.3333333333333]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 20 20', '0 0 20 20', ['x', 'y', 'z', 6.6666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 23 23', '0 0 23 23', ['x', 'y', 'z', 7.6666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 34 34', '0 0 34 34', ['x', 'y', 'z', 11.333333333333]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 35 35', '0 0 35 35', ['x', 'y', 'z', 11.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 47 47', '0 0 47 47', ['x', 'y', 'z', 15.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 49 49', '0 0 49 49', ['x', 'y', 'z', 16.333333333333]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 50 50', '0 0 50 50', ['x', 'y', 'z', 16.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 59 59', '0 0 59 59', ['x', 'y', 'z', 19.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 60 60', '0 0 60 60', ['x', 'y', 'z', 20]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 66 66', '0 0 66 66', ['x', 'y', 'z', 22]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 68 68', '0 0 68 68', ['x', 'y', 'z', 22.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 71 71', '0 0 71 71', ['x', 'y', 'z', 23.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 74 74', '0 0 74 74', ['x', 'y', 'z', 24.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 77 77', '0 0 77 77', ['x', 'y', 'z', 25.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 83 83', '0 0 83 83', ['x', 'y', 'z', 27.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 85 85', '0 0 85 85', ['x', 'y', 'z', 28.333333333333]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 89 89', '0 0 89 89', ['x', 'y', 'z', 29.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 95 95', '0 0 95 95', ['x', 'y', 'z', 31.666666666667]]\n  - ['T1', 'I1', '101 101 1 1', '0 0 97 97', '0 0 97 97', ['x', 'y', 'z', 32.333333333333]]\nsqlite3 sql_stat4:\n```\nt1|i1|100 100 100 3 1|0 0 0 3 3|0 0 0 1 3|      xyz\nt1|i1|100 100 100 3 1|0 0 0 6 6|0 0 0 2 6|xyz\nt1|i1|100 100 100 3 1|0 0 0 9 11|0 0 0 3 11|xyz\nt1|i1|100 100 100 3 1|0 0 0 15 17|0 0 0 5 17|xyz\nt1|i1|100 100 100 3 1|0 0 0 18 18|0 0 0 6 18|xyz\nt1|i1|100 100 100 3 1|0 0 0 21 23|0 0 0 7 23|xyz\nt1|i1|100 100 100 3 1|0 0 0 27 27|0 0 0 9 27|xyz\nt1|i1|100 100 100 3 1|0 0 0 33 35|0 0 0 11 35|xyz\n)1|i1|100 100 100 3 1|0 0 0 39 40|0 0 0 13 40|xyz\nt1|i1|100 100 100 3 1|0 0 0 42 44|0 0 0 14 44|xyz-\nt1|i1|100 100 100 3 1|0 0 0 45 47|0 0 0 15 47|xyz0\nt1|i1|100 100 100 3 1|0 0 0 48 49|0 0 0 16 49|xyz2\nt1|i1|100 100 100 3 1|0 0 0 51 52|0 0 0 17 52|xyz5\nt1|i1|100 100 100 3 1|0 0 0 54 55|0 0 0 18 55|xyz8\nt1|i1|100 100 100 3 1|0 0 0 57 59|0 0 0 19 59|xyz<\nt1|i1|100 100 100 3 1|0 0 0 60 60|0 0 0 20 60|xyz=\nt1|i1|100 100 100 3 1|0 0 0 69 71|0 0 0 23 71|xyzH\nt1|i1|100 100 100 3 1|0 0 0 72 74|0 0 0 24 74|xyzK\nt1|i1|100 100 100 3 1|0 0 0 75 75|0 0 0 25 75|xyzL\nt1|i1|100 100 100 3 1|0 0 0 78 78|0 0 0 26 78|xyzO\nt1|i1|100 100 100 3 1|0 0 0 81 83|0 0 0 27 83|xyz\nt1|i1|100 100 100 3 1|0 0 0 84 85|0 0 0 28 85|xyzV\nt1|i1|100 100 100 3 1|0 0 0 90 92|0 0 0 30 92|xyz]\nt1|i1|100 100 100 3 1|0 0 0 93 95|0 0 0 31 95|xyz`\n```. @TarantoolBot document\nTitle: Standards for template binding parameters.\nThe patch removes ?N binding,  $V converts into $N.\nUsage scenarios:\n```\nbox.cfg{listen = 8888}\nnetbox = require('net.box')\ncn = netbox.connect(8888)\nparameters = {}\nparameters[1] = {}\nparameters[1][':value3'] = 1\nparameters[2] = 2\nparameters[3] = {}\nparameters[3][':value1'] = 3\nparameters[4] = 4\nparameters[5] = 5\nparameters[6] = {}\nparameters[6]['@value2'] = 6\ntarantool> cn:execute('select :value3, ?, :value1, ?, ?, @value2, ?, :value3', parameters)\n\nmetadata:\nname: :value3\nname: '?'\nname: :value1\nname: '?'\nname: '?'\nname: '@value2'\nname: '?'\nname: :value3\n  rows:\n[1, 2, 3, 4, 5, 6, null, 1]\n\ntarantool> cn:execute('select ?1, ?2, ?3', {1, 2, 3})\n\nerror: 'Failed to execute SQL statement: near \"?1\": syntax error'\n...\n\nparameters = {}\nparameters[1] = 11\nparameters[2] = 22\nparameters[3] = 33\ntarantool> cn:execute('select $2, $1, $3', parameters)\n\nmetadata:\nname: $2\nname: $1\nname: $3\n  rows:\n\n[22, 11, 33]\n.... Would be solved as a part of #3850 patchset. \n```\n    sql: encode tuples with mpstream on Vdbe run\nIntroduced new sql_vdbe_mem_encode_tuple and\nmpstream_encode_vdbe_mem routines to perform Vdbe memory to\nmsgpack encoding on region without previous size estimation call.\nGot rid off sqlite3VdbeMsgpackRecordLen and\nsqlite3VdbeMsgpackRecordPut functions that became useless. This\napproach also resolves problem with invalid size estimation #3035\nbecause it is not required anymore.\nNeeded for #3850\nCloses #3035\n```. There is no such problem on actual releases 1.9, 1.10, 2.0\n\n\nTarget: FreeBSD 12\nBut I've found few problems with build: bitset struct name conflicts with system bitset macro.\nHere is a patch.. @TarantoolBot document\nTitle: Document Lost format while tuple update fix\nChanged tarantool behavior for update and upsert operations. Now the format of the updated tuples is preserved.\nTransform operation works differently and does not save the format. This is necessary because the new tuple may not correspond to the original format.\n```\nExample of usage:\nunix/:/var/run/tarantool/mediator-shard-3601.control> aa = box.space.tst_sample:get(1)\n\n...\nunix/:/var/run/tarantool/mediator-shard-3601.control> aa.VAL\n\nsss\n...\n\nunix/:/var/run/tarantool/mediator-shard-3601.control> aa = aa:update({{'=',2,'ssss'}})\n...\nunix/:/var/run/tarantool/mediator-shard-3601.control> aa.VAL\n\nsss\n...\n\n. If I correctly understood the description, we are talking about such errors:\ntarantool> s = box.schema.space.create('withdata')\n\n...\ntarantool> pk = s:create_index('pk')\n\n...\ntarantool> sk = s:create_index('sk', {parts = {{2, 'string', is_nullable = true}}})\n...\ntarantool> sk:delete({box.NULL})\n\n\nerror: 'Supplied key type of part 0 does not match index part type: expected string'\n...\n```\n\nWe really want a more detailed description for the degenerate special case box.NULL?\n@kostja . The only place where pCursor->hint is set NOW is OP_ReopenIdx, OP_OpenRead, OP_OpenWrite\n--> (pOp->p5 & (OPFLAG_BULKCSR|OPFLAG_SEEKEQ)) mask based on VDBE P5 VALUE:\n1. OPFLAG_BULKCSR  == BTREE_BULKLOAD\n2. OPFLAG_SEEKEQ    == BTREE_SEEK_EQ\n\nThe BTREE_BULKLOAD hint was used in src/box/sql/btree.c in balance function\nbalance_nonroot(MemPage * pParent,  / Parent page of siblings being balanced /\n        int iParentIdx, / Index of \"the page\" in pParent /\n        u8 * aOvflSpace,    / page-size bytes of space for parent ovfl /\n        int isRoot, / True if pParent is a root-page /\n        int bBulk   / True if this call is part of a bulk load /\n    )\nto fill last flag bBulk.\n\nWith @Korablev77 patch 7a56118b2f530b6ec994dd88b2042969c95d337d \nsql: remove original SQLite backend \nthis btree.c become useless and was dropped.\nSo, BTREE_BULKLOAD, same as OPFLAG_BULKCSR could be deleted.\n\na) First of all, part of code is wrapped in SQLITE_ENABLE_CURSOR_HINTS that is disabled in tarantool build. I've dropped all the code in such sections and going to review the remaining one.\n\nb) The flag is used in sqlite3CursorMovetoUnpacked (OP_SeekLE and OP_SeekGE) to setup iter_type, in (OP_SeekLT, OP_SeekLE, OP_SeekGE, OP_SeekGT), (OP_NoConflict, OP_NotFound, OP_Found), (OP_IdxDelete)\nc) The VDBE P5 argument is setted OPFLAG_SEEKEQ by (1)sql_create_index, (2)sqlite3WhereBegin.\nc.1:  sql_create_index\nsqlite3VdbeAddOp4Int(v, OP_OpenWrite, iCursor,  index_space_ptr_reg, 6);\nsqlite3VdbeChangeP5(v, OPFLAG_SEEKEQ);\nThis means that new cursor would have BTREE_SEEK_EQ==OPFLAG_SEEKEQ and then on lookup with OP_SeekLE (in getNewIid) that allows choose correct behavior on find and iter_type.\nIn other words, this match flag description\n* If the cursor P1 was opened using the OPFLAG_SEEKEQ flag, then this\n * opcode will always land on a record that equally equals the key, or\n * else jump immediately to P2.  When the cursor is OPFLAG_SEEKEQ, this\n * opcode must be followed by an IdxLE opcode with the same arguments.\n * The IdxLE opcode will be skipped if this opcode succeeds, but the\n * IdxLE opcode will be used on subsequent loop iterations.\nand this scenario is still in use. We should keep it.\n====================\nBelieve, I can drop SQLITE_ENABLE_CURSOR_HINTS macro and useless BTREE_BULKLOAD.. I've tested \n```\npwd\n\n\n/home/kir/tarantool\ncd third_party/libyaml\ngit remote add upstream https://github.com/yaml/libyaml.git\ngit fetch upstream\ngit checkout master\ngit merge -X theirs upstream/master\ngit commit\n```\n\n\nAnd all tests pass.\nBelieve, that I have no rules to force push to master:\n```\ngit push origin master\ncd ../..\npwd\n\n\n/home/kir/tarantool\ngit diff\ndiff --git a/third_party/libyaml b/third_party/libyaml\nindex b7a1bdd..2d29dfe 160000\n--- a/third_party/libyaml\n+++ b/third_party/libyaml\n@@ -1 +1 @@\n-Subproject commit b7a1bddc798fd8ab329785e913dc56534026d3f7\n+Subproject commit 2d29dfe23a18340831d5f334143a87f8c194b6eb\n\n\ngit add third_party/libyaml\ngit commit -m \"box: update libyaml submodule    \n\\\n\\\nCloses #3275.\"\n. Tarantool has been crashing when trying to go into an\ninteractive loop in ncurses-libs/libtinfo library via\nlbox_console_readline.\nNcurses on Fedora 28 is compiled with flag\n--fstack-clash-protection that use stack protection\nmechanism (strictly speaking configure option --enable-widec\nis also required, but it is not a part of problem we\ninvestigated): gcc inserting code to step the stack down\none page at a time, running a logical-OR with zero\nat each point, which doesn't affect any value on the stack\nbut forces a memory access:\n     lea r11,[rsp-frameSize]\n label:\n     sub rsp,pageSize\n     or QWORD PTR [rsp],0x0\n     cmp rsp,r11\n     jne label\n```\nwhere frameSize=32768 b and pageSize=4096 b\n(read also https://ldpreload.com/blog/stack-smashes-you)\nTarantool main interactive loop is working in fiber with\ndefault stack size 65536 b\n```\nBINARY IMAGE MEMORY MAP:\n\nSECTION      ADDRESSES       COMMENT\nDATA         0x0       ^\nHEAP                   |\n             0x0ec18   |  # < --fstack-clash-\n                       |  #   protection check\nSTACK: @               |  #\n       @     0x16c18   | $# < ncurses/readline\n       @               | $    internals, access\n       @               | $    syscall in wrapper\n       @               | $\n       @               | $\n       @     0x1ffe0   | $  < frame0 -- LUA\n             ....      |\n             0xffff    |\n+------+-----------------------------+-------------+\n| SIGN | DESCRIPTION                 | TOTAL SIZE  |\n+------+-----------------------------+-------------+\n|  @   | stack area region; (fiber)  |   65536 b   |\n+------+-----------------------------+-------------+\n|  $   | user-space application stack|   37832 b   |\n|      | memory usage                |             |\n+------+-----------------------------+-------------+\n|  #   | a memory that checked stack |   32768 b   |\n|      | probing generated with      |             |\n|      | --fstack-clash-protection   |             |\n+------+-----------------------------+-------------+\n\nIn other words, $ + # = 70600    >    65536 = @\nand we have segfault:\nSIGSEGV {si_signo=SIGSEGV, si_code=SEGV_ACCERR, si_addr=}\nSIGSEGV {si_signo=SIGSEGV, si_code=SI_KERNEL, si_addr=NULL}\n```\nI suppose to increase interactive console main loop fiber stack. This would fix problem reported as this bug. \nOn attempt to create console fiber(with default stack size), fiber would fail; but would not crash tarantool.\ntarantool> require('fiber').create(function() require('console').start() end)\nWe didn't have constructive discussion, and I have no constructive ideas that could resolve this problem systematically. Third-party libraries RPM compile flags are the part of distros and it could be reproduced in some other cases later.\n@GeorgyKirichenko please, keep on this ticket discussion thread.\n. Looks like bad bootstrap binary that was already fixed with\n```\ncommit 7cb3d2cfe6d2478dcf4a87527eb6e580ade90d6b\nAuthor: Kirill Shcherbatov kshcherbatov@tarantool.org\nDate:   Fri Jun 8 16:08:59 2018 +0300\nsql: new  _trigger space format with space_id\n\n```. I've fixed problem with tonumber64 function.\nAfter verbal discussion, we've decided to do not change string.format(\"%d\", 2^63) \"strange\" behavior as it is not really strange:\n1) it coincide what gcc generates in such scenarios\n2) don't want to change third_party/luajit once again\nIf you push uint64 number, use %u.. @Korablev77 you are right; with pathes fixing part of problems #3472 , this doesn't reproduce.. I've found two bugs in tests, and have fixed them(going to send them to patches).\nBut there is another one problem that I can't investigate for now:\n```\n--- sql/transitive-transactions.result  Wed Jun 20 18:34:37 2018\n+++ sql/transitive-transactions.reject  Wed Jun 20 18:47:05 2018\n@@ -107,15 +107,15 @@\n box.sql.execute('PRAGMA defer_foreign_keys = 1;')\n fk_defer();\n ---\n+- error: 'Operation is not permitted when there is an active transaction '\n ...\n box.space.CHILD:select();\n ---\n-- - [1, 2]\n+- []\n ...\n box.space.PARENT:select();\n ---\n - - [1, 1]\n-  - [2, 2]\n ...\n box.sql.execute('PRAGMA defer_foreign_keys = 0;')\n box.sql.execute('pragma foreign_keys = 0;');\nLast 15 lines of Tarantool Log file [Instance \"app\"][/home/kir/tarantool/test/var/005_sql/app.log]:\n2018-06-20 18:47:05.466 [7082] iproto/101/main I> binary: bound to 127.0.0.1:5174\n2018-06-20 18:47:05.467 [7082] main/101/app I> recovery start\n2018-06-20 18:47:05.467 [7082] main/101/app I> recovering from /home/kir/tarantool/test/var/005_sql/app/00000000000000000000.snap'\n2018-06-20 18:47:05.494 [7082] main/101/app I> recover from/home/kir/tarantool/test/var/005_sql/app/00000000000000000000.xlog'\n2018-06-20 18:47:05.505 [7082] main/101/app I> done /home/kir/tarantool/test/var/005_sql/app/00000000000000000000.xlog'\n2018-06-20 18:47:05.505 [7082] main/101/app I> recover from/home/kir/tarantool/test/var/005_sql/app/00000000000000001033.xlog'\n2018-06-20 18:47:05.517 [7082] main/101/app I> done /home/kir/tarantool/test/var/005_sql/app/00000000000000001033.xlog'\n2018-06-20 18:47:05.517 [7082] main/101/app I> recover from/home/kir/tarantool/test/var/005_sql/app/00000000000000001121.xlog'\n2018-06-20 18:47:05.519 [7082] main/101/app I> done `/home/kir/tarantool/test/var/005_sql/app/00000000000000001121.xlog'\n2018-06-20 18:47:05.520 [7082] main/101/app I> ready to accept requests\n2018-06-20 18:47:05.520 [7082] main/108/checkpoint_daemon I> started\n2018-06-20 18:47:05.520 [7082] main/108/checkpoint_daemon I> scheduled the next snapshot at Wed Jun 20 20:24:37 2018\n2018-06-20 18:47:05.520 [7082] main/101/app I> set 'memtx_max_tuple_size' configuration option to 5242880\n2018-06-20 18:47:05.521 [7082] main/113/console/unix/:/home/kir/taranto I> started\n2018-06-20 18:47:05.521 [7082] main C> entering the event loop\n\nThe reproduce file\n/home/kir/tarantool/test/var/reproduce/005_sql.list.yaml:\n- [sql/update-with-nested-select.test.lua, null]\n- [sql/persistency.test.lua, null]\n- [sql/sql-statN-index-drop.test.lua, null]\n- [sql/gh2808-inline-unique-persistency-check.test.lua, null]\n- [sql/view_delayed_wal.test.lua, null]\n- [sql/transitive-transactions.test.lua, null]\n```\ncan't reproduce this problem.. I'm working on #2199 at this moment and same error is raised permanently when we use vinyl backend for TABLE objects.\nOk, I've figured it out:\nvinyl doesn't rollback transaction automatically on failure.. We have no transactional DDL, so let's keep this bug and make good documentation for this scenario. . Won't fix #3499. @Totktonada \n3275 really solves this problem.\nI've make a branch kshch/gh-3275-update-libyaml-submodule with changes with submodule update and included this tests there.\nDuplicate.. There is no crash on branch sb/gh-3369-use-index-def-in-select-and-where with #3369.\nDelayed.. As there is no such problem with patch @SudoBobo is working on, let's close them on merge #3369 . It should be noted, that box.space.execute(\"DROP TABLE T99;\") won't work(untill restart) as sql object hasn't been created.\nSo, we should use LUA deletion from space like in example above.\nMaybe this bug would be fixed later, this code would be reworked a lot.. Should be closed with #3535 . Although lua-\u0441json is in the third_party folder, it differs significantly from the possible upstream; has the form of a rethought and a simplified fragment. That's why we will make the required changes to our version.\n(this folder is also not a submodule). Technically this is equal to concept\ntransaction;\nforeach tuple: tuple.b += 1;\ncommit;\nwhere b is unique,\nthat isn't supported in tarantool. \nThis problem was discussed with @kostja a month ago. I've returned to this problem today and believe this is the time to close this task.\nWon't fix.. The situation that led to the creation of this ticket is very specific (#2847). I checked all sqlReleaseTempRange uses and found no unsafe use like the one described above.. Came with @kyukhin path\ncommit 378658a567edaf5262b1f69cf18033a7a915e700\nAuthor: Kirill Yukhin kyukhin@tarantool.org\nDate:   Fri May 18 16:31:24 2018 +0300\nsql: refactor SQL delete to allow Lua spaces\n\nThis is a first step toward fully-featured deletion\nof spaces created in Lua by means of SQL language.\nThis change to handle most simple case:\nDELETE * FROM <space_name> and will be improved in\nnearest future.\nAlso, refactor (sqlite3ViewGetColumnNames()) to\nuse Tarantool's code style and naming convention.\n\nPart of #3235\n\n. This bug is not about netbox and grants,\nbox.sql.execute(\"create table t2 (s1 int primary key);\")\nbox.sql.execute(\"create trigger t2 before insert on t2 begin delete from t1; end;\")\nbox.sql.execute(\"insert into t2 values (0);\")\nis all you need to reproduce. The problem is following:\ntrigger contains \"delete from t1\" part that was changed with 378658a567edaf5262b1f69cf18033a7a915e700 patch.\nPreviously on code generation step sqlite3LocateTable used to set Parser error on target table not exists. Now it doesn't raise error at all.\n```\n-- table t1 doesn't exist\n delete from t1;\n\n...\n```\n```\nsql_table_delete_from:\nif (sqlite3LocateTable(parse, LOCATE_NOERR, tab_name) == NULL) {\n        space_id = box_space_id_by_name(tab_name,\n                        strlen(tab_name));\n        if (space_id == BOX_ID_NIL)\n            goto delete_from_cleanup;\n    } else {\n        table = sql_list_lookup_table(parse, tab_list);\n        if (table == NULL)\n            goto delete_from_cleanup;\n        space_id = SQLITE_PAGENO_TO_SPACEID(table->tnum);\n        trigger_list =sqlite3TriggersExist(table, TK_DELETE,\n                           NULL, NULL);\n        is_complex = trigger_list != NULL ||\n                 sqlite3FkRequired(table, NULL);\n    }\n```\nIt looks like it was made specially.\n@kyukhin ?. This message start being shown since @Korablev77 patch.\nThis is not an answer what the problem is (yet).\ncommit 4cbba96f32e1b1ae578ac4aefec7c5cf4dfe26a4\nAuthor: Nikita Pettik korablev@tarantool.org\nDate:   Thu Feb 8 02:54:47 2018 +0300\nsql: delegate SQL primary key check to Tarantool\n\nAs last point of removing colflag attribute from struct Column,\ntable_column_is_primkey() function is added. It checks via Tarantool\nfacilities whether column belongs to PK or not (after space creation).\nHowever, during initializing of SQL iternals and before actual creation\nof struct space, colflag attribute (as indicator of PK) still can be used.\nSince this is the only purpose of attribute, one has been renamed.\n\nCloses #3118. Hi! Now I'm working on this ticket.\n\n@donmikel Could you please send snapshot to me?\nIn general, your scenario must works for memtx (and is not relevant for vinyl as it does not support rebuilding the primary index of a non-empty space):\ns = box.schema.create_space('poned_good', {engine='memtx'})\nbox.schema.sequence.create('S', {min=5, start=5})\npk = s:create_index('primary', {sequence='S', parts = {{1, 'unsigned'}}})\nsk = s:create_index('wbuser_chrt', {parts = {{2, 'unsigned'}, {4, 'unsigned'}}})\ns:insert({nil, 11, 12, 13})\ns:insert({nil, 21, 22, 23})\ns:insert({nil, 31, 32, 33})\nbox.space.poned_good.index.primary:alter({sequence = false, unique = true, parts = {2, 'unsigned', 4, 'unsigned'}}). There is no error, just a warning.\nParsing is continued.\n```\nfor lsn, record in xlog.pairs(file) do\nfun.wrap(internal.pairs(...))\nxlog_meta_parse\nxlog_cursor_openfd\nxlog_cursor_open\nlbox_xlog_parser_open_pairs\nsay_warn(\"Unknown meta item: `%.*s'\", key_end - key, key);\n```\nCan't reproduce:\n--- a/extra/dist/tarantoolctl.in\n+++ b/extra/dist/tarantoolctl.in\n@@ -808,6 +808,7 @@ local function cat()\n                 io.stdout:flush()\n             end\n         end\n+        print(\"As you see, no fault here\")\n         if options.format == 'yaml' and is_printed then\n             is_printed = false\n             print('...\\n')\n$: PATH=../src:$PATH  ../extra/dist/tarantoolctl cat 00000000000000000003.xlog                              \nProcessing file '00000000000000000003.xlog'\nUnknown meta item: `PrevVClock'\nAs you see, no fault here. It's a bit strange, but this bug came with patch\ncommit 13df2b1f7a968dcb2e5e670e50749d2f749cc3f5\nMerge: 0ecdb0f 0665841\nAuthor: Kirill Yukhin kyukhin@tarantool.org\nDate:   Tue Jul 31 09:31:34 2018 +0300\nMerge branch '1.10' into 2.0\n\nI mean there is no sql-related changes there.\n(researching). There wAs an appropriate place to setup error in selectExpander:\nint space_id = box_space_id_by_name(t_name, strlen(t_name));\nif (space_id == BOX_ID_NIL) {\n    sqlite3ErrorMsg(pParse,\n            \"no such table: %s\",\n            t_name);\n    return WRC_Abort;\n}\nstruct space *space = space_by_id(space_id);\nBut after 13df2b1 patch box_space_id_by_name returns not BOX_ID_NIL here like space exists, but it doesn't.. Yep,\nthis patch include 0ecabde8981500886bf5be16cfabe4d1d1a33db4  from 1.10 that escalate the problem.. Finally, I've investigated what's going on:\nWith 9a543202c93ef903b07b293463650d78002ae866 we make sql_checks_resolve_space_def_reference as a part of on_replace_dd_space on space insertion.\nBefore Vova's path 0ecabde box_space_id_by_name returned BOX_ID_NIL thanks for Multi-engine transaction error that didn't rased(that omitted now).\nIn other word, box_space_id_by_name do _space lookup of space \"W2\" during \"W2\" insertion.\nI believe that the appropriate solution is to get rid of assumption that space_by_id returns not NULL at the same time box_space_id_by_name returned not BOX_ID_NIL.. First of all, \"We don't support SQLite's binding mechanism\" - it is not so. I've validated assigning variable and it works correctly. The problem is slightly different:\nsql_trigger_begin use reduced expression tree for WHEN clause:\ntrigger->pWhen = sqlite3ExprDup(db, when, EXPRDUP_REDUCE);\nso, iColumn that is below iTable field (#define EXPR_REDUCEDSIZE offsetof(Expr,iTable))\nis an invalid memory containing zero:\nu32 nSize = (u32) exprStructSize(p);\n            memcpy(zAlloc, p, nSize);\n            if (nSize < EXPR_FULLSIZE) {\n                memset(&zAlloc[nSize], 0,\n                       EXPR_FULLSIZE - nSize);\n            }\nas you see, EXPRDUP_REDUCE even doesn't save memory in this case!. And there is an other feature that cause this bug: sql{expr, view, trigger}_compile modify parser state, including allocated variables. This changes should affect main parser if any.\nBut we don't have parser on server side.. I think that DEFAULTS/VIEWS/CHECKS and other server-integrated(compiled with temporal parser) AST Variables would work improper way. \nI mean, assigned variables of all this parsers are uncorrelated, may overlap;\nVariables are looking like a thing that we should get rid off.. Moreover, I offer this diff\n```\n@@ -140,11 +141,10 @@ sql_trigger_begin(struct Parse parse, struct Token name, int tr_tm,\n    trigger->op = (u8) op;\n    trigger->tr_tm = tr_tm;\n\n\ntrigger->pWhen = sqlite3ExprDup(db, when, EXPRDUP_REDUCE);\ntrigger->pColumns = sqlite3IdListDup(db, columns);\nif ((when != NULL && trigger->pWhen == NULL) ||\n(columns != NULL && trigger->pColumns == NULL))\ngoto trigger_cleanup;\ntrigger->pWhen = when;\nwhen = NULL;\ntrigger->pColumns = columns;\ncolumns = NULL;\n(not a part of this bug; there is no reason to truncate structures like sqlite did now).. In the current architecture checks are performed before implicit type conversion on the side of the SQL.  \nE.g.\nCREATE TABLE t2(\n          id  INT primary key,\n          x INTEGER CONSTRAINT one CHECK( typeof(coalesce(x,0))=='integer'),\n          y REAL CONSTRAINT two CHECK( typeof(coalesce(y,0.1))=='real' ),\n          z TEXT CONSTRAINT three CHECK( typeof(coalesce(z,''))=='text' )\n        );\n\nINSERT INTO t2 VALUES(3, 1.1, NULL, NULL);\nWith the movement of checks to the server side, they are made after the casting and backward compatibility cannot be provided. Perhaps, It would be not relevant with tiket:\nhttps://github.com/tarantool/tarantool/issues/3809. @pgulutzan Hi!\nTell me please, Is the UPDATE {or IGNORE, ABORT, FAIL} ANSI-SQL an extension to the ANSI standard that we may get rid of?. What is example.conf? @anton-barabanov \nCan't reproduce with my Ubuntu 14.04 and 2000 dummy interfaces.\nNow I'll try with Centos 7.04. Can't reproduce with Centos 7.04 with default kernel and 2041 dummy interfaces:\n[root@gh-3831-kirill-shcherbatov run]# uname -r\n3.10.0-693.11.6.el7.x86_64\n[root@gh-3831-kirill-shcherbatov run]# ip addr | grep dummy | wc -l\n2041\n[root@gh-3831-kirill-shcherbatov run]# ./tarantool --version\nTarantool 1.10.2-147-g5a76d27\nTarget: Linux-x86_64-Debug\nBuild options: cmake . -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_BACKTRACE=ON\nCompiler: /bin/cc /bin/c++\nC_FLAGS: -fexceptions -funwind-tables -fno-omit-frame-pointer -fno-stack-protector -fno-common -fopenmp -msse2 -std=c11 -Wall -Wextra -Wno-strict-aliasing -Wno-char-subscripts -Wno-format-truncation -fno-gnu89-inline -Wno-cast-function-type -Werror\nCXX_FLAGS: -fexceptions -funwind-tables -fno-omit-frame-pointer -fno-stack-protector -fno-common -fopenmp -msse2 -std=c++11 -Wall -Wextra -Wno-strict-aliasing -Wno-char-subscripts -Wno-format-truncation -Wno-invalid-offsetof -Wno-cast-function-type -Werror\n```\nI'll try to setup kernel 4.18. kernel-ml also works fine:\n[root@gh-3831-kirill-shcherbatov run]# uname -r\n4.20.11-1.el7.elrepo.x86_64\n[root@gh-3831-kirill-shcherbatov run]# ip addr | grep dummy | wc -l\n2041\n[root@gh-3831-kirill-shcherbatov run]# ./tarantool --version\nTarantool 1.10.2-147-g5a76d27\nTarget: Linux-x86_64-Debug\nBuild options: cmake . -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_BACKTRACE=ON\nCompiler: /bin/cc /bin/c++\nC_FLAGS: -fexceptions -funwind-tables -fno-omit-frame-pointer -fno-stack-protector -fno-common -fopenmp -msse2 -std=c11 -Wall -Wextra -Wno-strict-aliasing -Wno-char-subscripts -Wno-format-truncation -fno-gnu89-inline -Wno-cast-function-type -Werror\nCXX_FLAGS: -fexceptions -funwind-tables -fno-omit-frame-pointer -fno-stack-protector -fno-common -fopenmp -msse2 -std=c++11 -Wall -Wextra -Wno-strict-aliasing -Wno-char-subscripts -Wno-format-truncation -Wno-invalid-offsetof -Wno-cast-function-type -Werror\nSo, can't reproduce.. > kernel was 4.18\n\nexample.conf is like example.lua. Probably you didnt reproduce it because you didnt start tarantool listen. Try to start tarantool and enter\nbox.cfg{ listen=3301; }\n\nI've used example.lua that makes  listen = 'localhost:3301'\nMaybe there is something else special about using the system?\nHow do use use dummy interfaces? I've created them like this:\nfor i in $(seq 1 2040); do                                                      \n        ip link add dummy$i type dummy                                          \ndone\nFinally, due to the fact that the drop occurs in stdlib, and the function seems to be called correctly, Tarantool may be affected by this drop due to insufficient fiber stack (#3418, #3973, #4005)\nTo exclude this option, try to build tarantool with a larger fiber stack: increase FIBER_STACK_SIZE_DEFAULT in src / fiber.c and try please.\nIf it helps, it can't be considered a solution to the problem, but we are working on it and it is possible (https://www.freelists.org/post/tarantool-patches/RFC-fiber-Increase-default-stack-size) we will solve it soon. Confirmed.\nBigger FIBER_STACK_SIZE_DEFAULT helps, so this is indirect duplicate of  #3418, #3973, #4005. @leksunin Hi! We closed #3418.\nNow I've checked your scenario and it works fine now :). Came with 6fefbb0. Tarantool doesn't know anything about \"logical_type\";\nField 4 \"createDate\" has 'unsigned' type, so error looks ok for me. The reason for this strange behavior is that luaL_serializer uses storage optimization to excessively sparse arrays - they are represented as a MP_MAP. Thus, in luamp_encode_tuple, the luamp_encode routine returns MP_MAP instead of MP_ARRAY. Due to the fact that the data in Tarantool tuples are represented as MP_ARRAY, this is unacceptable.\nI.e.: for this schema\ns2:frommap({bucket_id=12477, createDate=\"2018-12-13T12:46:10.000+0000\", id=\"617f257e-2add-4168-b7fa-0c21189981a1\", customerId=1, interactionItems={}})\nTuple is looking like this\n['617f257e-2add-4168-b7fa-0c21189981a1', 1, 12477, '2018-12-13T12:46:10.000+0000', null, null, null, null, null, null, null, null, []]\nWe must set encode_sparse_ratio in luaL_serializer instance to disable this optimization.. ```\nA simpler example in which this bug is related to a very different function box.tuple.new():\nt = {}\nt[1] = 1\nt[2] = 2\nt[15] = 15\nbox.tuple.new(t)\n\nerror: Tuple/Key must be MsgPack array\n...\n. Would be closed as a part of #3850 patchset.. The problem is that the \"Connection: Keep-Alive\" header is inserted if the keepalive_idle, keepalive_interval parameters have been specified; otherwise, \"Connection: close\"is set.  Along with this, all values from the headers section are added to the query.\nWith the same success, you can add a few contradictory headings Keep-Alive: timeout, and even in the same way to add additional \"Content-Length\"(conflict when real body exists).\nhttp:get('google.com', {\n    verbose=true,\n    headers={['Keep-Alive: timeout'] = 666}\n})\n\n\nGET / HTTP/1.1\nHost: www.google.com\nAccept: /\nKeep-Alive: timeout: 666\nConnection: close\n```\nLooks like you are not expected to set this header manually.  But it seems to me that some checks can really be introduced.. As I see, http.c manage {\"Accept\", \"Content-Length\", \"Connection\", \"Keep-Alive: timeout\"} headers.\nThe straightforward way is to disallow them to be specified in headers section.. > The Accept is not working for me with the patch.\n\nCould we have multiple Accept headers?\nPerhaps, we may do not append \"Accept\" to the exceptions list?. > No. We need one specific Accept header. We put that in the headers, but the Tarantool put Accept / too.\nThank you for feedback. I hope I fixed that now.. ",
    "neopaf": "Friends, one can achieve about same by using /dev/shm device on linux.\nWe do this with Couchbase, which also has no option to turn it off now.\n(And also crying in their bug-tracker to add it). ",
    "kyukhin": "This issue'll help to avoid creation of initial snapshots.\nAnd thus will allow not to create any snapshot in wal_mode=none mode.\nI'll set it as prio1.. Done.. All checks are performed in upgrade.lua script. No need to do such checks in core.. This contradicts w/ #2169.\nViews are permanent.. Test is now pass.. Depends on #2121.. Duplicate of more extensive #2121, #2653. Looks like a duplicate of #1284 . Looks like 'DROP VIEW' is working as well. - [ ] Support strict typing.\n\nCurrently I don't have to specify a data type\nduring CREATE TABLE. And even if I do specify\na type, I can override it -- if X is a VARCHAR(1)\ncolumn I can insert \"XX\" into it, or I can say\nUPDATE ... SET X = X + 1. This is SQLite's worst\ndesign mistake. So the expected behaviour change\nis: a decision to insist that data typing must\nbe respected, for both indexed and unindexed columns.\n . OK to me.. Could you pls mke meta commands case-insensitive as per Peter's request?. So, @pgulutzan, Standard doesn't specify if temporary table definition should be session-local or global?. IMHO, GLOBAL TEMPORARY TABLE might be implemented on current backend.\nI suppose @rtsisyk proposes to move LOCAL TEMPORARY TABLE to wishlist.. Closed by https://github.com/tarantool/tarantool/commit/56760585448f76aa72d0860df7bc6924089e1e77. SQLite collations only support ASCII [1].\nHowever it contains ICU extension [2, 3].\n\n[1] - http://www.sqlite.org/datatype3.html#collation\n[2] - https://www.sqlite.org/faq.html#q18\n[3] - https://www.sqlite.org/src/artifact?ci=trunk&filename=ext/icu/README.txt. Blocked by #2649. Not blocked anymore.. This is still an issue. sqlite-tcl/quote.test-1.0 fails because we do not support delimited identifiers.. Here's what I think we should do:\n  1. All delimited identifiers are specified using  symbol (\")\n  2. All string literals are specified using  symbol (')\n  3. Any other quotation is prohibited\n  4. Maximal length of identifier is limited to 64KB\n  5. Rules for all identifiers are the same.\n     This is not a limitation, ANSI says so, e.g. for table and columns names\n         ::= \n ::=\n        [   ] \n ::= \n ::= \n  6. We will allow to use UTF-8 identifiers: only delimited (I see only\n      in the standard). Comparison of\n     such identifiers will be done using libICU facilities\n  7. We will support UESCAPE, with lower prio though\n  8. All keywords mentioned in Chapter 5.2 (\" and \") cannot\n     be used as identifiers, both delimited and regular\n  9. In future, we'll consider support of array non-scalar type. To specify\n     it, square brackets (, [ ]) as well as left, right\n     bracket trigraphs (, ??( )??) will be used. Right now:\n```\ntarantool> box.schema.NAME_MAX\n\n\n64\n...\n```\n\nSo, I suppose 64 is good enough for 1.8.0. Rescheduling the issue to 1.8.1. Resolution of #944 should solve this issue.\nWe need to make sure that issue is solved and prepare tests\nwhich verify this.. This is much more extensive issue. Before making FOR EACH STATEMENT default,\nsuch trigger type should be implemented.\nSo, task is: implement new trigger type FOR EACH STATEMENT and make it default.. I verified this working, so closing the issue.\nHere is how I've checked (empty lines removed):\ntarantool> box.sql.execute(\"CREATE TABLE a (id PRIMARY KEY, a INTEGER);\");\ntarantool> box.sql.execute(\"CREATE INDEX i on a(a);\");\ntarantool> box.sql.execute(\"INSERT INTO a VALUES (1,2), (3,4), (5,6);\");\ntarantool> box.sql.execute(\"EXPLAIN SELECT id FROM a INDEXED BY i\");\n- - [0, 'Init', 0, 8, 0, '', '00', 'Start at 8']\n  - [1, 'OpenRead', 1, 526337, 0, 'k(2,,)', '00', 'root=526337 iDb=0; i']\n  - [2, 'Explain', 0, 0, 0, 'SCAN TABLE a USING COVERING INDEX i', '00', '']\n  - [3, 'Rewind', 1, 7, 1, '0', '00', '']\n  - [4, 'Column', 1, 0, 1, '', '00', 'r[1]=a.id']\n  - [5, 'ResultRow', 1, 1, 0, '', '00', 'output=r[1]']\n  - [6, 'Next', 1, 4, 0, '', '01', '']\n  - [7, 'Halt', 0, 0, 0, '', '00', '']\n  - [8, 'Transaction', 0, 0, 4, '0', '01', 'usesStmtJournal=0']\n  - [9, 'Goto', 0, 1, 0, '', '00', '']. I bet we want to be ANSI-complaint, so let's throw error.. The cases is working now. To make it complain, add:\nbox.sql.execute(\"PRAGMA foreign_keys = true;\");\nI propose to close the issue.. I've submitted #2377.\nClosing this issue as resolved.. Most of the sqlite-tcl/trigger9.test.lua is commented because of the issue.. I've extracted issue concerning non atomic insert into #2599 . Fixed. Follow up bug submitted #2656 . This might be changed.\nBulat, could you pls verify if this holds and if so  - fix it?\n. Resolved.. We need to support Clear opcode.. We're going to implement #2680, which will make this issue void.. Exactly, SQLite for some reason uses OP_SeekGT with NULL as compare value to seek to the first (last) element.\nLooks like this was some kind of optmization as SQLite byte code has OP_Last and OP_Rewind. \nComparing NIL and Int has no sense for Tarantool, so it fail. . Thanks for pointing.\nYes. https://github.com/tarantool/tarantool/commit/778b5abfaeb9c2c48c5c37cb4688ec6ce740cef9. kostja comments that this be likely won't be fixed.. Remove DETACH as well.. ATTACH/DETACH statements were removed.. Same for END TRANSACTION.\nOr maybe just keep both for SQLite compatibility. Same forROLLBACK [TRANSACTION].\nMaybe keep allowing of TRANSACTION to be SQLite compatible.. Maybe this is too aggressive to remove BEGIN TRANSACTION, maybe simply prohibit single worded synonym BEGIN. Same for END.. Done.. Comments are in #2177. Done by https://github.com/tarantool/tarantool/commit/43ed060f9539ed44a232ca81ad890b1099872cd9. Comments are in #2177. Ok, closing then.. Okay, closing then.. @pgulutzan, do you think that example provided in Ilya's comment proves feature is working (or semi-working)?. So, this is not an issue and I am closing it, right @pgulutzan?\nSame goes for #2177, #2173, #2171.. Closing then (and similar issues as well).. It is working and documented. Closing as resolved.. Also, remove LAST_INSERT_ROWID().. Removed couple of months ago.. Resolved.. > The SQL definition is\nCREATE FUNCTION function_name (parameter list)\nRETURNS data_type\nLANGUAGE LUA\nlua-text\n\nThe result is stored in a space, perhaps with\nthe name _function. Then it's invoked by saying\nfunction_name() in any SQL statement.\nSince the existing space _trigger seems to work\nokay, I'm guessing this is possible.\nThis can't be done until execute privileges\nare implemented, though.. Right, just need to make sure SQL FE uses it.. TRUNCATE TABLE is part of ANSI SQL 2008+. Here [1] is a description of the feature.\nOriginal SQL sources lack it. So, proposed to move it to the further milestones\n\n[1] - https://www.postgresql.org/docs/9.2/static/sql-truncate.html. Closing then.. Done. There's no proposal here. One of main goals of integration of SQL w/ Trantool is to merge data dictionaries of SQL w/ Tarantool's one. So, we're going to merge struct Table and struct Index of SQL w/ corresponding Tnt entities (space/index) and refactoring SQL sources to adopt the change.\nI think that this is a big deal and should be moved out of alpha-2 and scheduled to be implemented during alpha-2, beta-1 development slot.. At the end of the day, we'd like to use single data dictionary. Current vision is to remove most of legacy SQLite data structures, which represent data dictionary and extend backend's data structures w/ necessary fields.\nObvious mapping is (legacy -> TNT):\nstruct Table -> struct space;\nstruct Index -> struct index;\nFor struct Table, there're also field that have no sense to put inside struct space, unless corresponding feature is implemented inside of the server. Example: \nFKey *pFKey;            /* Linked list of all foreign keys in this table */, Tarantool have no FK so far.\nWe need to understand, how to implement fill of in-memory meta data as well.. Resolved by https://github.com/tarantool/tarantool/commit/3eb7475504903fd5588b42f60cd90d8306716b6a. This issue is too generic. I am closing it since it says nothing about\nwhat should be done in details.. This is post-1.8.0 feature.. sqlite-tcl/trigger6.test.lua wasn't converted to sql-tap because of this issue.. Not 1.8.0 feature. There's also set for working with JSON documents in SQL 2016. Prepared statements are not usable so far.\nSo, this issue is blocked by #2592 or even should be closed w/ \"won't be resolved\" status.. This simplified example doesn't do update at all:\n```\nbox.sql.execute(\"CREATE TABLE t1(a integer primary key, b UNIQUE, e);\");                                                                                                                                                                                                      \nbox.sql.execute(\"INSERT INTO t1 VALUES(1,4,6);\");                                                                                                                                                                                                                             \nbox.sql.execute(\"INSERT INTO t1 VALUES(2,5,7);\");  \nbox.sql.execute(\"UPDATE t1 SET e=e+1 WHERE b IN (SELECT b FROM t1);\");\nbox.sql.execute(\"SELECT e FROM t1\");\n\n\n\n[6]                                                                                                                                                                                                                                                                         \n\n\n[7]                                                                                                                                                                                                                                                                       \n...                                                                                                                                                                                                                                                                           \nRemoving `UNIQUE` hides the problem.\nI suspect that order of columns in index is wrong.\nHere is byte code:\n   7 OpenRead         6 524289    0 k(2,,)        00 root=524289 iDb=0; sqlite_autoindex_t1_1                                                                                                                                                                                 \n   8 Rewind           6   18    0               00                                                                                                                                                                                                                            \n   9 Column           6    0   12               00 r[12]=\nREG[12] =  i:1 \n```\nTarantool's index contains columns in the same order, while\nSQLite stores indexed fields first (referencing to PK at the end).\nThat said, looks like we missed to fix virtual machine to work with \nindex columns in Tarantool way.\n. Fixed.. Blocked by #1557 \n\nThe goal is to remove uniqueness check from SQL VM.\nThis is responsibility of Tarantool's indexes. . Not blocked anymore.. Sounds, like this is duplicate of #2495 . Autoinc is needed for surrogate rowids, which in turn are used in subqueries.\nThus, moving it to 1.8.2\nThis issue should be resolved using SQL machinery. Implementation of autoincrement\nusing Tarantool's facilities is subject of another issue (to be submitted).. Test added w/ the patch https://github.com/tarantool/tarantool/commit/d85e12ffc347dfb4584233276850826d33675a1c.. sqlite-tcl/index2.test is failing because of the same issue.. Here's detailed description of the issue: https://github.com/tarantool/tarantool/wiki/SQLite-Primary-Key-representation-differences. Fixed.. Fixed by https://github.com/tarantool/tarantool/commit/e36cf01475bff2c5e6fa9616db0e66d52471c4a5.. Fixed.. Fixed by https://github.com/tarantool/tarantool/commit/23fa57727d468f971988772f50249611e4560001.. Reduced test case:\n```lua\nkyukhin@titus:/export/kyukhin/tarantool/bld$ cat 1.lua\nbox.cfg{wal_mode='none'}\nbox.sql.execute(\"\\\n  CREATE TABLE t ( id integer primary key, c1, c2, c3); \\\n  INSERT INTO t VALUES(1,'d','e','f'); \\\n  \\\n  CREATE TABLE e ( id integer primary key, idt integer); \\\n  INSERT INTO e VALUES(1,1); \\\n  \\\n  SELECT c3 \\\n  FROM \\\n    (SELECT idt FROM e) AS ev, \\\n    (SELECT id, c1, c2, c3, Count(id) FROM t GROUP BY id) AS tv \\\n  WHERE tv.id = ev.idt \\\n\");\n```\nProduces:\nkyukhin@titus:/export/kyukhin/tarantool$ ./src/tarantool ./1.lua\n2017-04-20 15:26:50.742 [8848] main/101/1.lua C> version 1.7.3-708-ge3361f2\n2017-04-20 15:26:50.742 [8848] main/101/1.lua C> log level 5\n2017-04-20 15:26:50.742 [8848] main/101/1.lua I> mapping 268435456 bytes for tuple arena...\n2017-04-20 15:26:50.751 [8848] main/101/1.lua I> initializing an empty data directory\n2017-04-20 15:26:50.758 [8848] snapshot/101/main I> saving snapshot `./00000000000000000000.snap.inprogress'\n2017-04-20 15:26:50.758 [8848] snapshot/101/main I> done\n2017-04-20 15:26:50.766 [8848] main/101/1.lua I> vinyl checkpoint done\n2017-04-20 15:26:50.767 [8848] main/101/1.lua I> ready to accept requests\ntarantool: /export/kyukhin/tarantool/src/src/lib/sqlite/src/vdbe.c:2470: sqlite3VdbeExec: Assertion `p2<pC->nField' failed.\nAborted\n. Fixed.. \ntemptable.test.lua.zip\nFailing test. Tarantool's temporary spaces doesn't match SQL semantic.\nTicket #2119 was submitted asking to do so.\nHence this ticket seems irrelevant and probably should be closed.. Temporary tables are banned in SQL until #2119 is resolved.. Closed as duplicate of #2554. Fixed by https://github.com/tarantool/tarantool/commit/e36cf01475bff2c5e6fa9616db0e66d52471c4a5.. Fixed by https://github.com/tarantool/tarantool/commit/e36cf01475bff2c5e6fa9616db0e66d52471c4a5. That's it. We can't bear it anymore. Setting prio1 and assignee.. Lua escaping is not a solution. Main goal is to have dedicated SQL console, w/o Lua at all.\nWhat's your suggestion?. I think in future we'll extend maximal length of identifier.\nSo, the proposal is:\n1. equalize rules for table and column identifiers\n2. store non-delimited identifiers uppercase? This might be a problem, since those spaces are visible from within Tarantool. So, user should be aware that a would be visible from within Tarantool as A. \nright?\n. Fixed. Tested by 56d01c8   . Let's emit error if conversion of string literal to number is impossible?. So, moving to wishlist then.. @pgulutzan, what we have today:\n- 1 and 2 seems to be resolved\n- IMHO, 3 worse separate issue (for 2.1.1)\n- Same for 4 trim() routine always convert input argument to text, so it needs deep refactoring\n- 5 and 6 are fixed on branch and hopefully will hit 2.1.0 branch\n- 7 goes w/ 3 and 4: separate ticket (for 2.1.1) and deep refactoring of corresponding opcode.\nSo, if no objections, I'll submit 3 new issues (for 3. 4. and 7.) and will close this, once branch\nis reviewed and merged into 2.1.0 branch.. @pgulutzan, concerning (1) saturation of big integers and (2) error reporting on big integers in abs().\nI believe that promoting int to float is really dangerous. Moreover, silently saturating to MAX/MIN_INT\nis even more dangerous. So, I am going to report error when constant cannot fix in MAX/MIN_INT range.\nFor literals and for built-in functions like abs().. AFAIK, weekday depends on locale. Is it?\nFor me it returns:\n```\ntarantool> box.sql.execute(\"SELECT TIME('16:00:00-06:00', 'LOCALTIME');\")\n\n\n\n\n['01:00:00']\n```\nIs this correct?. #2607 submitted. Looks like this is a limitation of SQLite which prohibits changing UNIQUE columns.\nThis restriction should be removed.. Okay, probably we should check for constraint name duplication (post 1.8.0)\n\n\n\nI don't think this is critical.\nYes, agree. But I believe that we have no reserved prefixes at all. BUT for future, let's reserve tarantool_ prefix.\nConfirmed.. This issue was superseded by #3503, #3504.\nWe now allow any prefixes in table names.. So, should we default s2 to value s1?\nand select after insert you mentioned [1, 1] should be returned?. Closing as done.. Won't this break compatibility w/ major DBMS? and obfuscate customers migration to Tarantool SQL?. Confirmed.. @pgulutzan could you please submit separate issues for constraints altering?\nI've checked recent 2.0 branch and issue w/ foreign key violation seems to be solved:\n```\nbox.sql.execute(\"PRAGMA foreign_keys=on;\")\nbox.sql.execute(\"CREATE TABLE te18 (s1 INT PRIMARY KEY);\")\nbox.sql.execute(\"CREATE TABLE te19 (s1 INT PRIMARY KEY, s2 INT REFERENCES te18 (s1));\")\nbox.sql.execute(\"INSERT INTO te18 VALUES (1);\")\nbox.sql.execute(\"INSERT INTO te19 VALUES (1, 1);\")\nbox.sql.execute(\"UPDATE te19 SET s2 = 2;\")\n2018-06-20 14:22:39.562 [13951] main/101/3.lua F> FOREIGN KEY constraint failed\n```\nSo, to solve the issue we need to this three mentioned problems (verified):\n1. It is possible to say s1 INT NULL PRIMARY KEY.\nbox.sql.execute(\"CREATE TABLE te15 (s1 INT NULL PRIMARY KEY);\")\nResult = no error\n2.  If CREATE TABLE fails due to a constraint definition error,\nsomething is still created, so the error cannot be fixed.\nbox.sql.execute(\"CREATE TABLE t99 (s1 INT,UNIQUE(s1,s1),PRIMARY KEY(s1));\")\nbox.sql.execute(\"CREATE TABLE t99 (s1 INT,UNIQUE(s1),PRIMARY KEY(s1));\")\nResult = error in the first statement (good), error in the second statement (bad).\n3. ON UPDATE|DELETE CASCADE etc. are accepted, but they do not work.\nThey should cause syntax errors until support exists.\nbox.sql.execute(\"CREATE TABLE te16 (s1 INT PRIMARY KEY, s2 INT, FOREIGN KEY (s2) REFERENCES te16 (s1) ON UPDATE CASCADE);\")\nResult = no error. Superseded by other issues. . This bug should be re-pharased like that: Ban TEMPORARY tables in parser for alpha-2.. Temporary tables are already banned.. Should we drop related views when table is dropped? (even if view selects from multiple tables).. Superseded by #3491.. Confirmed.. @pgulutzan, we cannot reproduce it anymore. Could you pls check if it is working for you?. @pgulutzan, could you pls propose an order, which is correct from your point of view?. This still looks like a bug to me.\nLooks Oracle [1] FK checks are performed after AFTER trigger invocation.\nIn PostgreSQL [2] AFTER triggers are fired after all constraints are checked.\nAs I understand the Standard (4.39.2 Trigger execution):\nFor each state change SCj in SEC, the BEFORE triggers activated by SCj are executed before any of their triggering\nevents take effect. When those triggering events have taken effect, any AFTER triggers activated by the\nstate changes of SEC are executed.\nAFTER triggers are fired after triggered event is taken effect.  Triggered events are\nINSERT, UPDATE etc. So, AFTER triggers are fired after change takes place and\nhence all constraints are checked. So, I guess PostgreSQL for rigid w.r.t. ANSI here.\n@pgulutzan what do you think? Proposal is to defer AFTER triggers after all\nconstraints are checked.\nAnyway, moving to the next MS.\n[1] - https://www.postgresql.org/docs/9.1/static/sql-createtrigger.html\n[2] - https://hourim.wordpress.com/2014/07/30/on-table-constraint-execution-order/. > Ok, I won't argue. Could you then move this ticket to the next milestone?\nDone.. Confirmed (but still not 1.8.0).. Let's ban WHERE clause for CREATE INDEX. We don't have partial indexes so far.. It is banned, so waiting for partial indexes to be implemented in server.. is it a bug?. Confirmed. Changing PK's columns should be prohibited.\n.  @pgulutzan I agree w/ Nikita. I don't see why we should ban PK update.. Closing then.. Confirmed. I think this issues should be solved with mature SQL console.. Superseded by #3506.\nI guess different default column names for SELECT() and VALUES() statements\nnot necessary should be the same.\nVALUES() doesn't allow to rename column (as in SELECT: select a as b ...),\nso probably it should return no name at all.. This issue degraded.\nHere's what I see on recent 2.0 branch.\nConsole1:\n``\ntarantool> box.cfg{listen=3301}\n2018-07-04 17:17:54.977 [11198] main/101/interactive C> Tarantool 2.0.4-644-gb09f596\n2018-07-04 17:17:54.977 [11198] main/101/interactive C> log level 5\n2018-07-04 17:17:54.977 [11198] main/101/interactive I> mapping 268435456 bytes for memtx tuple arena...\n2018-07-04 17:17:54.977 [11198] main/101/interactive I> mapping 134217728 bytes for vinyl tuple arena...\n2018-07-04 17:17:54.989 [11198] iproto/101/main I> binary: bound to 0.0.0.0:3301\n2018-07-04 17:17:54.989 [11198] main/101/interactive I> initializing an empty data directory\n2018-07-04 17:17:55.028 [11198] snapshot/101/main I> saving snapshot./00000000000000000000.snap.inprogress'\n2018-07-04 17:17:55.090 [11198] snapshot/101/main I> done\n2018-07-04 17:17:55.091 [11198] main/101/interactive I> ready to accept requests\n2018-07-04 17:17:55.092 [11198] main/107/checkpoint_daemon I> started\n2018-07-04 17:17:55.092 [11198] main/107/checkpoint_daemon I> scheduled the next snapshot at Wed Jul  4 19:08:44 2018\n\n...\ntarantool> box.sql.execute(\"CREATE TABLE te37 (s1 INT PRIMARY KEY);\")\n...\ntarantool> box.sql.execute(\"INSERT INTO te37 VALUES (1);\")\n...\ntarantool> box.schema.user.grant('guest','write,execute','universe')\n...\ntarantool> box.sql.execute(\"select * from te37;\")\n\n\n\n[1]\n...\n\n\n\ntarantool> box.space.TE37:select()\n\n\n\n[1]\n...\n```\n\n\n\nConsole 2:\n```\n~/w/tarantool/bld$ PATH=~/w/tarantool/bld/src:$PATH ./extra/dist/tarantoolctl connect 3301\nconnected to localhost:3301\nlocalhost:3301> box.space.TE37:select()\n\n\nerror: Read access to space 'TE37' is denied for user 'guest'\n...\n\nlocalhost:3301> box.sql.execute(\"select * from te37;\")\n\n\n\n[1]\n...\n```. This was duplicate of #2469, looks like resolved now, right?. I think warning might significantly slow down execution time as extra checks would be injected in hot places. So, doubt it will be implemented nearest future.\n\n\n\nSo, this is a bug if HAVING requires GROUP BY?. According to @pgulutzan \nHowever, \"HAVING without GROUP BY\" actually works,\nnot only in MySQL, but also PostgreSQL and DB2 and\nInformix and Oracle and SQL Server, provided that\nthe select list contains only aggregates and literals.\nSo, let's reopen it, but move to net MS.. Is it a bug?. ORDER BY  is available in multiple DBMS, so let's keep it.\nLIMIT w/o ORDER BY may be needed to have a sneak peak from some table, w/o any warranties.\nSo, I guess this issue won't be implemented.. Looks like a bug. = should match and hence SQL should return exactly 1 row.\nIs it standard?. Confirmed. Let's block it.. I think that we need to emit warning message on any unknown PRAGMA. This is still a bug. But I think we should move forward with SQL's GRANT/REVOKE as we are going to have SQL console.. Confirmed.. Confirmed.. Confirmed.. This routine was removed at all.. This is mostly done.\nEverything which remains un-converted should be converted w/ corresponding feature implementations.. Should be fixed. @lenkis, could you pls verify?. Verified.. This issue is mostly implemented.\nNot implemented parts extracted into #3082 and #2592. Fix prepared.. Not blocked anymore. Bug is that INSERT OR REPLACE should actually do REPLACE, not INSERT. Let's try to cleanup sqliteInt.h/struct Index:\n Incorporate index_def reference\n This will make it possible to remove:\n  - zName\n  - aiColumn\n  - tnum\n  - nKeyCol\n  - nColumn\n* isCovering should be always 1 for Tarantool backend\nNeed to teach VDBE engine to understand that Tarantool's\ntable indexes actually always contain whole tuple (nKeyCol ==\nnColumn). This should resolve double reference issue.. Done w/ fix of #2255 . Confirmed.\nIssue is that Tarantool's SQL requires to specify new/old tables.\nThis works for me:\nCREATE TRIGGER trigger_on_table1_1 AFTER INSERT ON table1 FOR EACH ROW WHEN new.column1 > 0 BEGIN INSERT INTO table2 VALUES (1); END;. Closing then.. Issue is resolved, need to add a regression test.. SQLite test regexp.test.lua wasn't converted because this feature is not implemented.. I vote for fromhex(). Hello Alex,\n\nRight now the answer is NO, you always start w/ Lua console. However in the nearest future we'll commit an extension to binary protocol (IPROTO) which will allow to execute SQL w/o Lua marks\nAFAIK, sqlalchemy is based on ODBC, which is not yet implemented. We'll probably implement ODBC in future. Not blocked anymore.. The issue is not blocked anymore.. This issue is blocked due to lack of HW.. Done.. space:truncate() will clear a space:\nhttps://tarantool.org/doc/1.7/book/box/box_space.html#box-space-truncate. As mentioned above, this is SQLite issue dated decade ago. We doubt it'll be fixed in upstream SQLite anytime soon, so this need to be investigated and fixed by us.\nVery low prio though.. This issue is a watcher for upstream SQLite and exists as remainder to routinely check if it is fixed in mainline SQlite. Then merge it in.\n\nIt definitely doesn't belong to alpha-2. . This is optimisation. Moving it.. Blocked by #1260. Duplicate of #2597 . Fixed.. Fixed.. The alter statement is not going to be supported in alpha-2 and probably won't be part of 1.8 at all.\nLet's ban ALTER statement which adds new columns to a table so far.\n@kostja, if no objections, then I'd ask @pgulutzan to reflect it in docs and @iproha94 to do actual ban in src/box/sql/parser.y\nWe'll need a follow-up issue asking to implement ALTER statement (wishlist).. So, we're returning only types and generated ids. Closing this one.. ANALYZE's stat4 table is an artificial table which was initially if rowid type.\nIt should be persistent, hence moved into Tarantool universe.\nIn order to mimic rowid behaviour we need to have INTEGER PRIMARY KEY AUTOINCREMENTworking.\nThus this issue is blocked by #2263. #2263 resolved. Not blocked anymore. Let's pick first option.. This is duplicate of #2720, closing. Closing as duplicate of #2351 . Done.. AFAIU, this issue is mostly about forcing SQL engine to use column definitions from tuple_format.\nRight now struct Table contains an array of structures describing columns.\nHere is the struct:\nstruct Column {\n        char *zName;            /* Name of this column, \\000, then the type */\n        Expr *pDflt;            /* Default value of this column */\n        char *zColl;            /* Collating sequence.  If NULL, use the default */\n        u8 notNull;             /* An OE_ code for handling a NOT NULL constraint */\n        char affinity;          /* One of the SQLITE_AFF_... values */\n        u8 szEst;               /* Estimated size of value in this column. sizeof(INT)==1 */\n        u8 colFlags;            /* Boolean properties.  See COLFLAG_ defines below */\n};\nzName and notNull might be moved to tuple_format easily.\nzColl might be converted to collation ID and stored in tuple_format.\naffinity should be removed and replaced w/ field type.\ncolFlags looks useless:\n```\ndefine COLFLAG_PRIMKEY  0x0001 / Column is part of the primary key /\ndefine COLFLAG_HIDDEN   0x0002 / A hidden column. /\ndefine COLFLAG_HASTYPE  0x0004 / Type name follows column name /\n```\nOpen question is how to store following values:\n1. szEst: field size estimation, which might not be simple to calculate if field is of complex type\n2. pDflt: default value for column\nLet's start from removing zName and notNull fields from struct column. Done. Not blocked anymore. Partially done, partially this is duplicate of #1803. Done. Fixed by https://github.com/tarantool/tarantool/commit/a4b2080176c20c79b2efdb7fc2ed0a5d5498b9bf. Blocked by #2740 . Not blocked anymore. Issue resolved.. Not blocked anymore.. Resolved.. This is duplicate of #2680. Confirmed.. Duplicate of #2786 . Could you please update your Tarantool to recent 1.7 version.\nWe recently fixed similar bug and this one might be a duplicate.. This occurs due to lack of interactive transactions in Tarantool, so each time you hit !\\RET transaction auto commit. \nOn the other hand, it is prohibited to issue more than one SQL statement in a line. Like this:\n```\ntarantool> \\set language sql\n\n\ntrue\n...\n\ntarantool> \\set delimiter !\n...\ntarantool> select 1!\n\n\n\n[1]\n...\n\n\n\ntarantool> select 1; select 1!\n\nerror: 'near \"select\": syntax error'\n...\n\ntarantool> select 1! select 1!\n\nerror: 'unrecognized token: \"!\"'\n...\n\ntarantool> select 1; select 1;\n         > !\n\n\nerror: 'near \"select\": syntax error'\n...\n```\n\nSo, you're right.\nBut the issue is blocked by #1284 (#1958). Both blockers are in wishlist, so moving this one to the same place.\n. This is part of #3369 . TK_VARIABLE is necessary token for binding. Test suite contains no traces of this token.\nSo, I guess this issue is done.. Resolved by 1e6d7a2baf64fb96471ca0c7bc7524df5a89aff6. Duplicate. Closed by mistake. Fixed by 533ce8d7a2af4cd40e57bcf4f6cf6bd29e0f361e. This is an optimization. Let's move it out of 2.1.0.. Duplicate of #3119. Done by f92bc1e66. Fixed by 6c4060de7df4157238373fd93d6304367cc02915. Already fixed by 6c4060de7df4157238373fd93d6304367cc02915. Done.. ROOLBACK seems to be broken as well:\n```\ntarantool> box.sql.execute([[BEGIN TRANSACTION; ]]) box.sql.execute([[SAVEPOINT Q; ]]) box.sql.execute([[ROLLBACK TO SAVEPOINT Q; ]])\n\n\nerror: 'no such savepoint: Q'\n...\n```. Done @ c3d5944dd3a2e21e293912d6e4e052065da1982a. Case is not failing anymore. Done @ c3d5944dd3a2e21e293912d6e4e052065da1982a. We need an API which will allow us to index fields in the ephemeral tables in different orders.. Things are even worse: we do not have native DESC indexes.\nHowever we can mimic them.. I've extracted task on test suite adoption into #3102 \n\nPlease, put here some subset of set of types mentioned in #2351,\nwhich maps 1-1 to Tarantool's backend and which will be introduced\nin SQL in first place.\nAlso, please, put here a table of implicit type conversions which are about\nto be introduced.\nFinally, please, list of type conversion routines here (e.g. str2int and back).. After all, we still need to have ability to specify Tarantool's type ANY.\nSee #3174 . Not blocked anymore. @Khatskevich, could you pls provide more detailed test case?. luajit is lua-5.1 compatible.. So, proposal looks like that. In SQL console one could issue:\n1. pragma vdbe_setdump_file=dump.vdbe\n2. {issue DML statement}\n3. At this step, dump.vdbe should be filled with adopted VDBE. Adoption (performed by SQL engine) should contain at least:\n   -  OP_OpenWrite/OP_OpenRead should refer not to space_id (or tnum or pointer to struct space), but should contain table name literal\n   - any other reference to runtime data should be hardened\n4. Edit dump.vdbe in your preferable editor\n5. back in SQL console: pragma vdbe_execute=dump.vdbe\nAs result: it is possible to execute modified VDBE program instead of changing query optimizer by hand.. I guess 3 commits might be squashed into single.. kyukhin@titus:/export/kyukhin/tarantool/src/src/box$ grep SQLITE_TARANTOOL_ERROR sql.c |wc -l\n39. I think so. But, this is still temporal solution and all those errors should be integrated into Tarantool's backend in future.. It turns out, that it's time to split program logic for DDL and DML a bit.\nAny DDL operation lead to schema change, so any reference to space* or\nindex* would become invalid.\nProposal is to distinguish DDL operations like this:\n1. If operation is about to change schema ID (any update to _space, _index,\n_truncate), then special handling is needed. Any operation of such a king\nneed to use space_id/index_id explicitly\n2. New opcode to be introduced which will derive pointer to space/index\nfrom its identifier\n3. All DML operations should use references to space/index, not\nidentifiers\nSchema might only be changed during DDL request.\nSchema might not be changed during DML request.\nHowever, there're mixed statements.\nConsider example (opcodes are from vanilla SQLite, due to #3223).\nsqlite> create table t1 (id integer primary key);\nsqlite> insert into t1 values (1), (2), (3);\nsqlite> pragma vdbe_debug=1;\nsqlite> create table t2 as select * from t1;\nLast statement is compiled into:\nVDBE Program Listing:\n   0 Init             0   43    0               00 Start at 43\n   1 ReadCookie       0    3    2               00\n   2 If               3    5    0               00\n   3 SetCookie        0    2    4               00\n   4 SetCookie        0    5    1               00\n   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1\n   6 OpenWrite        0    1    0 5             00 root=1 iDb=0\n   7 NewRowid         0    1    0               00 r[1]=rowid\n   8 Blob             6    3    0 ^F             00 r[3]=^F (len=6)\n   9 Insert           0    3    1               08 intkey=r[1] data=r[3]\n  10 Close            0    0    0               00\n  11 Close            0    0    0               00\n  12 OpenWrite        1    2    0               10 root=2 iDb=0\n  13 InitCoroutine    4   21   14               00\n  14 OpenRead         2    2    0 0             00 root=2 iDb=0; t1\n  15 Explain          0    0    0 SCAN TABLE t1 00\n  16 Rewind           2   20    0               00\n  17 Rowid            2    7    0               00 r[7]=rowid\n  18 Yield            4    0    0               00\n  19 Next             2   17    0               01\n  20 EndCoroutine     4    0    0               00\n  21 Yield            4   26    0               00\n  22 MakeRecord       7    1    5 D             00 r[5]=mkrec(r[7])\n  23 NewRowid         1    6    0               00 r[6]=rowid\n  24 Insert           1    5    6               00 intkey=r[6] data=r[5]\n  25 Goto             0   21    0               00\n  26 Close            1    0    0               00\n  27 Null             0    8    9               00 r[8..9]=NULL\n  28 OpenWrite        3    1    0 5             00 root=1 iDb=0; sqlite_master\n  29 Explain          0    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00\n  30 SeekRowid        3   32    1               00 intkey=r[1]; pk\n  31 Rowid            3    9    0               00 r[9]=rowid\n  32 IsNull           9   40    0               00 if r[9]==NULL goto 40\n  33 String8          0   10    0 table         00 r[10]='table'\n  34 String8          0   11    0 t2            00 r[11]='t2'\n  35 String8          0   12    0 t2            00 r[12]='t2'\n  36 Copy             2   13    0               00 r[13]=r[2]\n  37 String8          0   14    0 CREATE TABLE t2(id INT) 00 r[14]='CREATE TABLE t2(id INT)'\n  38 MakeRecord      10    5   15 BBBDB         00 r[15]=mkrec(r[10..14])\n  39 Insert           3   15    9               00 intkey=r[9] data=r[15]\n  40 SetCookie        0    1    4               00\n  41 ParseSchema      0    0    0 tbl_name='t2' AND type!='trigger' 00\n  42 Halt             0    0    0               00\n  43 Transaction      0    1    3 0             01 usesStmtJournal=1\n  44 Goto             0    1    0               00\nSo, inside single VM program both DDL (stmts 1-10) and \nDML (rest) requests are put together.\nProposal is to use identifiers in DDL, pointers in DML and\nspecial opcode on the border, which will derive pointer from\nidentifier. Also separate opcode for insertion by identifier\nis needed. It will be used for insertions into spaces which might\nlead to schema ID change.\nHere's proposed pseudocode (for same create table as select):\n...\nMakeRecord r1, ... ; Prepare tuple for _space insertion\nInsertS <_space_id>, r1 ; Insert new tuple into _space space\n...\nMakeRecord r2, ... ; Prepare tuple for _index insertioon\nInsertS <_index_id>, r2 ; Insert new tuple into _index space\n...\nSIDtoPtr <t1>, r3; t1 is a table which if donor for values to new table\nSIDtoPtr <t2>, r4; t2 is newly created table. <t2> is on reg probably\n...\nOpenRead 1, r3 ; Open is performed by pointer\n...\nOpenWrite 2, r4; Open is performed by pointer\n;; Loop over 1 and insert into 2\nAt the end of the day, new opcodes are to be introduced:\n1. InsertS for insertions into tables which might change schema ID\n2. OpenRead/OpenWrite should use pointer to space/index as argument\n3. SIDtoPtr is new opcode which is a barrier between DDL and DML and\nshould convert space identifier to pointer.\n4. No subsequent schema changes are allowed. This should be checked\n(in debug mode) by assertions in OpenRead/OpenWrite\n. I've  extracted my comment into separate issue #3252. I've tried several different compilers (including stock) on OSX. And still unable to reproduce.\nLooks like my fault initially.. @Gerold103 , w/o a testcase I guess we should close this.. Closing. There's no way to reproduce.. No updates for 4 months. I guess issue resolved.. Superseded by #3235. More fields:\n- nKeyCol\n- nColumn\n-  idxType\n- aiColumn\n- aSortOrder: should be commented so far. Until #3016 is implemented. @nekufa, I suppose you meant \"name\", not \"main\"?\nWhen you create a fiber, fiber_object is returned.\nMaybe it'll be more convenient to add info() to this object?\nLike this:\nfiber_function = fiber.create(f)\nfiber_function.info(). We cannot reproduce that. If there'll be reproducer - feel free to reopen.. Done here: https://github.com/tarantool/tarantool/commit/490491d48e0b61b5d9d9bb29aba09f33bf11f36d. We see no updates for more than 3 months. Closing this one.\nFeel free to submit new PR, or (even better) to submit a patch to mail list.. This issue is duplicate of #3011, which was fixed recently.. Since we emit code for cursor open in the same VDBE, then we definitely might track if given cursor refers to generic or ephemeral space. However, this is not clear to me, at which situation we should allocate in which way? Could you pls elaborate on that?\nMoreover, I think that we need to invent need approach for streaming data from ephemeral to real space.\nI mean, that we should be able to retrieve whole row from ephemeral table and insert/replace it in to real one.\nIn this case we might optimize  the process, by ref-ing the tuple, avoiding one memory allocation at all.\nI think that separate allocation for ephemeral spaces may only work for SELECT stmts.. Closing then.. I am about to work on this in DELETE stmt area (src/box/sql/delete.c). Considered done.. I've grep-ed source of Tarantool and looks like crypto is only used by digest module.\nThis module is used in a single place (checkpoint_daemon), where urandom() digest's\nfunction is invoked. This function in turn does not depend on crypto.. So, right now your method is safe.. > This probably means that we need to rename our current \"cluster\" settings by something like \"replicaset\" to better reflect reality.\nThis will break backward compatibility. We can add a synonym to \"cluster\" and deprecate \"cluster\" in future major releases. Will it work?. F-2-f discussion:\n1. Need to understand if Exprs in DEFAULT can contain sub-queries\n2. High level plan: clean-up/refactor struct Expr, then integrate into Tarantool\n3. FOR EACH ROW constraints should be stored in Tarantool structs and ultimately invoked in Tarantool's triggers, not in VDBE\n4. FK constraints should be checked by VDBE, but stored in Tarantool . Let's start from integration of default column attribute into Tarantool core.\nThe default value is supposed to be executed from any execution environment:\neither Lua or SQL and perform AST invocation by VDBE instance.\nProposed changes:\n1. Add two new fields to struct field_def:\n  a) default_type. Type of default expression, string type. The only possible value so far:\nsql\n  b) default_value. Default expression itself, string type. Should contain string expression\n  to be compiled into AST and used when performing default insert. Example: date() * time()\n2. Add single field to struct tuple_field: default, type struct Expr. This field should\n  store compiled AST and VDBE executor should be invoked each time when default value\n  is needed.\n. The main part of this issue is exposing expressions-related parts of parser to Tarantool's core.\nI.e. make it possible to store SQL expression (string value) in, say, field_def structure and during\npreparation of tuple_fieldto be able to translate it into AST, struct Expr *.\nThis AST can be used during byte code generation if, say, a default value is to be inserted.\nNeed to introduce a flag which will tell to parser, that all is needed is AST, no bytecode should be\nemitted. This flag should also signal that no name resolution should be performed: default\nexpression is parsed during DDL and struct space* is not exists so far. Name resolution\nshould be performed later on.\nThe context of expression is really not wide: only constants and built-in functions are allowed\nfor DEFAULT and only table under construction columns for CHECK constraint. Hence,\napproach would be:\n1. Introduce a flag signalling that no name resolution to be performed by parser and no byte-code\nto be emitted\n2. Convert expression string to \"SELECT \" and invoke the parser\n3. Find parsed struct Expr* in result struct Select* or report error\nThis approach should work also for CHECK constraints and maybe partial indexes. \n. Need to ban such a cases: if transaction was initiated in Lua, then it should be finished in Lua.\nNo SQL transaction are allowed during Lua transactions and vice versa.. I guess we should fix docs then.. @SWSAmor, should we wait for PR?. Let's update release process and store such an artefact for all new releases.. Duplicate of #3445 . Patch should be accompanied w/ proper description, a testcase.\nAnd ideally submitted via mailing list.. I see no support for bignum in core Lua 5.3\nThere's a package for bignum here [1].\nIt should be compatible w/ Tarantool.\n@racktear, what's the issue?\n[1] - http://oss.digirati.com.br/luabignum/bn/index.htm. No feedback for two months. Closing.. We need to have exhaustive plan here.. You propose to duplicate the functionality or move it? If move - we'll break backward compatibility.. Moved to correct repo.. This works for me.\n```\ntarantool> s = box.schema.space.create('s')\n\n...\ntarantool> s:create_index('pk', {parts={1, 'unsigned'}})\ntarantool> s:insert({1})\n\n\n[1]\n...\ntarantool> s:insert({2})\n\n\n\n[2]\n...\ntarantool> s:insert({3})\n\n\n\n[3]\n...\ntarantool> s:select(nil, {limit=1, offset=1})\n\n\n\n\n\n[2]\n...\n```\n\n\n\n@sharonovd, could you pls provide failing test case?. Got it. You want to paginate this.\ntarantool> for _, v in s:pairs({limit=1, offset=1}) do print(require('yaml').encode(v)) end\n--- [1]\n...\n--- [2]\n...\n--- [3]\n...\n---\n.... IMHO,  you do not need struct View. struct Select is all-inclusive structure and everything else which VIEW might possess is aliases for columns in VIEW's SELECT.\nThose names are contained in space_def->fields. So, everything you need is to put struct Select * field into space_def and compile (using dedicated machinery, like sql_compile_expr()) on space_def create/duplicate in alter.cc. Depends on #3305 . Please use a configuration time default, feedback_daemon=true/false, not a compile-time option. You can put a different config to /etc/default or /etc/tarantool/instances.available. Please, after commit submit another issue asking to remove the change before release.. It's a known limitation. We will not fix until it breaks.. Done by 73e85ae. Duplicate of #1148.\nFeel free to + the original issue.. Pushes were implemented.\nRest is superseded by #2593 and #3283 . @pgulutzan , does this issue for 2-0 only?. Duplicate of #3502 . We need a reproducer.. @ctpo6 , does our changes help?. Assuming the fix from @Gerold103 helped. Thanks!. Moved to doc repo: https://github.com/tarantool/doc/issues/560. Duplicate #3186 . Closing.. Could you please propose an API for the feature?. Vlad, pls check if the case is works and close the bug if it is.\nFeel free to submit another issue on problem you mentioned in your comment.. Actually, no vinyl files are created by default.\nThey appear only when a vinyl space is created.\nMoreover, those files are deleted when no more vinyl space are present.\n. Could you pls explain the issue w/ more details?. @lenkis, could you pls move this to doc?. @Kasen, what's wrong here?. @Kasen how can I reproduce it?\nI see that everything is correct in output log.. To me, this looks like role feature as well.. Closed as duplicate.. Looks like this is not a bug. This is just current behaviour.\nEvery type  was hit current transaction is rolled back.\nBut this occurs when actual update occured.\nFor memtx such trigger set here:\n```\nmemtx_engine_begin(struct engine engine, struct txn txn)\n{\n        (void)engine;\n        /\n         * Register a trigger to rollback transaction on yield.\n         * This must be done in begin(), since it's\n         * the first thing txn invokes after txn->n_stmts++,\n         * to match with trigger_clear() in rollbackStatement().\n         /\n        if (txn->is_autocommit == false) {\n            trigger_create(&txn->fiber_on_yield, txn_on_yield_or_stop,\n                            NULL, NULL);\n            trigger_create(&txn->fiber_on_stop, txn_on_yield_or_stop,\n                            NULL, NULL);\n\n```\nSo, if no insertions were performed, no rollback will be fired on console's\nfiber yield.\nE.g.:\n```\ntarantool> commit;\n\n...\ntarantool> begin;\n...\ntarantool> select 1;\n\n\n\n[1]\n...\n\n\n\ntarantool> commit\n...\nHowever:\ntarantool> begin\n\n...\ntarantool> insert into t1 values (1)\n...\ntarantool> commit\n\nerror: cannot commit - no transaction is active\n...\n```\n\nThis issue should be fixed when common transaction manager will be introduced.\nSee #1958 . After verbal discussion, we come to conclusion that this issue is not mature enough.\nWe'll introduce similar functionality after #1958 is done. Now moving to wishlist. Duplicate.. Have you implemented this already in your json path update patch?. Hello, do you have a test case?. No test case for two months. Consider resolved. . Still no testcase.. Tarantool preallocates its memory to ensure there is no memory overcommit and speed up subsequent allocations. Please use RSS and not VSS in monitoring. Thanks.. @Totktonada, could you please submit the patch to mailing list?. Fixed by 06ec3d5. I've submitted an issue #3531 \nWhich asks for PR improvement.\nAlso, it'd be outstanding to submit a patch to mail list.. I'd avoid addition of any Tarantool specifics to utf8 module. Let's expose more classes instead.\n@Totktonada @Khatskevich , could you pls specify, which classes of ICU symbols should we expose additionally to make you happy?. This issue is actually about constructing a test case. Re-scheduling\nBlocked by #2129 . @kbelyavs , still occurs?\nI see no assertions on any of branches.. Duplicate of #3485. This is an intended side effect. Users should not manipulate with object ids directly, such manipulations are exactly reserved to the case when we want to migrate to a new schema without affecting client applications.. Fixed w/ #3273 resolution.. Hello, feel free to ask all you questions in Telegram channel https://telegram.me/tarantool. This is not a bug.\nCurrently, all DDLs related to temporary spaces are replicated.\nAny DQL is not.\nPlease see https://tarantool.io/en/doc/1.9/book/replication/repl_architecture/\nClosing.. Could you pls try w/ newer version of 1.9 release series? We cannot reproduce the issue,\nso it might be already fixed.. More than 2 wws w/o feedback. Consider resolved.. We need a reproducer.. Two weeks w/o feedback. Consider solved.. Okay, let's take 1 and 2 as deliberate.\nAnd let's fix 3 as a bug.. This issue is so far blocked by review of https://github.com/tarantool/tarantool/tree/sb/gh-3369-use-index-def-in-select-and-where.\nTo remove tnum from struct Index, pointer to struct index_def should be put into struct Index\n. Done. Thanks!. Confirmed. You're trying to read from space of sysview engine, this is what\nbox_space_id_by_name() does, and insert into space of memtx engine in\nthe same transaction.\nCurrently, we do not support such multi-engine transactions.. Superseded by https://github.com/tarantool/doc/issues/556. Closing then.. Duplicate of #3505 . Reproduce:\n./test-run.py -j1 box-tap/cfg.test  box-tap/cfg.test box-tap/cfg.test box-tap/cfg.test. @pgulutzan, I don't understand your concern.\nHere's what I have after last update statement:\n```\ntarantool>  UPDATE t1 SET b =  '0' || b;\n\n...\ntarantool> SELECT * FROM t1;\n\n\n\n\n[0, '02']\n\n\n[1, '002']\n...\ntarantool>  CREATE UNIQUE INDEX i1 ON t1 (b);\n\n\n...\nWhat's wrong w/ creation of unique index here? Values are different...\n. @opomuc , could you pls provide extended example, how it is going to be used?. We cannot do that so far. This issue heavily depends on #1148.\n. @kostja AFAIK, we're going to remove exceptions completely from Tarantool sources.\nIf so this issue is void, if not - it is makes sense.. I've asked privately.\nWe're about to remove dependency on libstdc++ at all in next release.\nSo, superseded by #3532. Issue is that starting from 1-10, to read space format we do (box/lua/schema.lua):\n-- space format - the metadata about space fields\nfunction box.schema.space.format(id, format)\n    local _space = box.space._space\n    local _vspace = box.space._vspace\n    check_param(id, 'id', 'number')\nif format == nil then\n    local tuple = _vspace:get(id)\n\n...\n``\nSo, we do read from_vspace, which belong to sysview engine.\nThat is why presented case fails withmulti-statement` error.. Resolved by a6dfdff4f8d2a67f73089b582125f3e25dd3ca0f. Second point will be solved w/ patch for FKs refactoring.\nThird point (about case) I wouldn't treat as a bug at all.\nSo, I'll close it when FKs refactoring patchset will hit 2.0 branch.. This part of #2419.. This issue should be solved w/ #2625 implementation.\nIt will allow to do net_box.listen() before box.cfg{}\nI'll put this to wishlist. After #2625 is solved, let's re-evaluate it\nand close if solved.. This won't be implemented. I've submitted #3561 instead. Hello, we need a reproducer.\nPlease feel free to contact us in public chat on Telegram or privately.\nUnfortunately these log messages says nothing.. No updates for more than month. Closing.. Tarantool 1.7.6 is not supported anymore.\nCould you please try to reproduce your issue w/ 1.9 +. Overflow starts from libcurl commit https://github.com/curl/curl/commit/4073cd83b2f3bcf93f1ce7f5d567d22175bad9af. Fixed.. 1. IMHO, this is due to type derivation. I think we should ever allow comparing blob and string.\n2. Need to look at other DBSMS/ANSI.\n3. No.. Superseded by issues in previous comment.. Feel free to ask your questions in:\n- Telegram channel\n    - (Russian) https://t.me/tarantoolru\n    - (English) https://t.me/tarantool\n- Google groups\n    - (Russian) https://groups.google.com/forum/#!forum/tarantool-ru\n    - (English) https://groups.google.com/forum/#!forum/tarantool. Feel free to ask your questions in:\n- Telegram channel\n    - (Russian) https://t.me/tarantoolru\n    - (English) https://t.me/tarantool\n- Google groups\n    - (Russian) https://groups.google.com/forum/#!forum/tarantool-ru\n    - (English) https://groups.google.com/forum/#!forum/tarantool. Feel free to ask your questions in:\n- Telegram channel\n    - (Russian) https://t.me/tarantoolru\n    - (English) https://t.me/tarantool\n- Google groups\n    - (Russian) https://groups.google.com/forum/#!forum/tarantool-ru\n    - (English) https://groups.google.com/forum/#!forum/tarantool. Feel free to ask your questions in:\n- Telegram channel\n    - (Russian) https://t.me/tarantoolru\n    - (English) https://t.me/tarantool\n- Google groups\n    - (Russian) https://groups.google.com/forum/#!forum/tarantool-ru\n    - (English) https://groups.google.com/forum/#!forum/tarantool. This is extensive effort. Re-scheduling.. space's format is starting to validate after restart only.\nschema upgrade doesn't do that for existing spaces, only for newly created.\nSo, that's not a bug.. Issue should be resolved in recent patches to 1.10.2. Could you pls give it a try?. Done.. Feel free to ask your questions in:\n- Telegram channel\n    - (Russian) https://t.me/tarantoolru\n    - (English) https://t.me/tarantool\n- Google groups\n    - (Russian) https://groups.google.com/forum/#!forum/tarantool-ru\n    - (English) https://groups.google.com/forum/#!forum/tarantool. Duplicate of #2977 . Closed by 19fc3e99b8355be5f779744fc59624dcd27c1cf1. No response for more than one month. Closing.. @Totktonada could you pls take a look at the branch?. Feel free to ask your questions in:\n- Telegram channel\n    - (Russian) https://t.me/tarantoolru\n    - (English) https://t.me/tarantool\n- Google groups\n    - (Russian) https://groups.google.com/forum/#!forum/tarantool-ru\n    - (English) https://groups.google.com/forum/#!forum/tarantool. @pgulutzan @Gerold103 @Korablev77 I am curious, is (d) is ever acceptable\nbehaviour? We state DB constraint: s1 < 1, and by using legal language capabilities\nwe are able to break it. Should this work so?\nI think, this will be solved after #3691 is implemented.. 12 days w/o answer. Closing.. @pgulutzan still reproduces?. Fixed by a8c214c. Done by 8bc1669. Need to cherry-pick this patch: https://github.com/openresty/luajit2/commit/6315a752274f3a4db6827b64788173f40733204e. Closed by cebcf21114f50141e8aa0a72f30ea47dfbfef16c. Closing then.. Might be connected w/ #3751 . Is there a reproducer?. What do expect?. No reproduce. Let's wait a bit.. stat1 actually contains useful data.. Could you pls provide a testcase?. @aromatov I need a script which when executed as tarantool <a_script.lua> will reproduce the issue.. Let's do this:\n1. SQL's INTEGER should cover same range as Lua's: -2^63..2^64-1\n2. In the scope of this issue we do not introduce new types in SQL\n3. In case, when calculated INTEGER value become out-of-range: runtime error is emitted by VDBE\n4. Output for type INTEGER should always be numeric, no conversion to FP value. Feel free to ask your questions in:\n- Telegram channel\n    - (Russian) https://t.me/tarantoolru\n    - (English) https://t.me/tarantool\n- Google groups\n    - (Russian) https://groups.google.com/forum/#!forum/tarantool-ru\n    - (English) https://groups.google.com/forum/#!forum/tarantool. They only think we need is a way to reproduce. Maybe some VM exists where it fails?. No answer, closing.. Setting MS back then.. Not a bug.. I guess, we should document it for 2.1 and fix for 2.2.\n@pgulutzan could you pls update docs?. Release -> RelWithoutDebInfo\nRelWithDebInfo -> Release ?. @bigbes what do you like to see?. No answer, closing.. We\\ve fixed #3902. Could you please re-check?. No answer for months, closing.. No answer, closing.. Could you please provide a reproducer or at least a coredump?. No answer for months, closing.. Could you pls provide a testcase?. No answer, closing.. Feel free to ask your questions in:\n\n\nTelegram channel\n\n\n(Russian) https://t.me/tarantoolru\n\n(English) https://t.me/tarantool\n\nGoogle groups\n\n\n(Russian) https://groups.google.com/forum/#!forum/tarantool-ru\n\n\n(English) https://groups.google.com/forum/#!forum/tarantool. Current proposal: \nin tuple_format_new() calculate a hash value of fields and look for the hash in a table\nof formats. This should be done when format's dictionary is NULL only.. Np response for 3 wws. Closing. Feel free to ask your questions in:\n\n\nTelegram channel\n\n\n(Russian) https://t.me/tarantoolru\n\n(English) https://t.me/tarantool\n\nGoogle groups\n\n\n(Russian) https://groups.google.com/forum/#!forum/tarantool-ru\n\n(English) https://groups.google.com/forum/#!forum/tarantool. No feedback for 2 wws. Closing.. Known issue w/ fiber's stack. Fixed.. Looks like, this is not a Tarantool's issue.. This was important for customer. Moreover, this change doesn't break backward compatibility since it introduces new field in report, not alters anything. Please, update corresponding module.. Too many complaints. Let's just revert the patch from 1.10 branch.. We need a reproducer anyway.. \n",
    "ptolomaues": "I think this is bug in tonumber64() in tarantool and not in tostring() in lua, because\ntype(tonumber64(\"9223372036854775807\"))\n- cdata\ntype(tonumber64(\"824708557567779\"))\n- number\nand tostring() work correctly only with cdata\n. ",
    "paoloach": "Unfortunately, I need to associate a key to a list of integer and so it seems to me that the more plain model is to use a tuple to contain this list.\nThank,\nPaolo\n. ",
    "feldsherov": "Memory system in sql was refactored by @Gerold103 Now it issue is not actual.\n. ",
    "evgeny-sureev": "socket.http not used in my code, it used in LuaSec's https.lua, which in turn used by LuaVkApi, which I use.\n. Rewrited luaVKApi using tarantool's http module, like @kostja said.\n. It seems that http://github.com/tarantool/http not support https requests.\n. ",
    "FuriouslyCurious": "Hi there, any plans to add SHA3 to the crypto module?\n. Hey @rtsisyk I switched to PyTorch for my project, so unfortunately not using Lua anymore. . ",
    "hengestone": "Since this is tangentially related to #1405 (tarantoolctl won't open control socket):\nWould it be possible to specify the connect uri as a tarantoolctl option, then have tarantool use that as the default to box.cfg.listen?\nThat would make it possible for tarantoolctl to use the same logic to remove a data socket if needed at the same time as the control socket.\nThanks :)\n. Yes this happens in the main 'tarantool' server :)  But my thinking was that it could be something that 'tarantoolctl' could handle elegantly since it deals with pid files and the control socket already.\nIf it's simple to determine if the current data socket is dead and remove it at server startup time, that's great :+1: \n. Agreed, ^C should cancel the current input line (interrupt) and ^D should exit (end of stream). I keep exiting too ;-) \n. Needed to adjust the slab_alloc_arena size to accomodate the database size. ",
    "agent-0007": "My tarantool was installed from epel. If i run yum update it will become 1.6.8 ?\nOr i need build by hands from branch master?\n. I have upgrade my tarantool to version: Tarantool 1.6.8-586-g504e151\nIn new version tarantool upsert command writes garbage to tuple:\n['XXXXXX@mail.ru', 114, 117, 114, 117, '3f9cf2f39e8c1caa25bc1265e80147b5',\n    1458816126.5608, '549209b0615160fab35a3b0c82e4cb12', 1458816217.0361, 'c7945da08da79e6492f1493f98de895d',\n    1458816406.7516, '7a3b4b93055eca47d164d271e112129d', 1458816452.0767, 'b3a1a8d9c9a60863981a22d40847ea08',\n    1458816701.9667, '7e53b54e5c7231e5b6083bf2fe7cd194', 1458816774.0969, '1061ef16c9b36cfe60d7775f6a159ac4',\n    1458817228.6487, '784db8623258cb9b75bbe06fb649583c', 1458817237.5723, '9482dfd7a77b5fcb5a73c5fd3c940abb',\n    1458817238.1713]\nlater:\n['XXXXXX@mail.ru', 114, 117, 114, 117, 114, 117, 114, 117, 114, 117, '3f9cf2f39e8c1caa25bc1265e80147b5',\n    1458816126.5608, '549209b0615160fab35a3b0c82e4cb12', 1458816217.0361, 'c7945da08da79e6492f1493f98de895d',\n    1458816406.7516, '7a3b4b93055eca47d164d271e112129d', 1458816452.0767, 'b3a1a8d9c9a60863981a22d40847ea08',\n    1458816701.9667, '7e53b54e5c7231e5b6083bf2fe7cd194', 1458816774.0969, '1061ef16c9b36cfe60d7775f6a159ac4',\n    1458817228.6487, '784db8623258cb9b75bbe06fb649583c', 1458817237.5723, '9482dfd7a77b5fcb5a73c5fd3c940abb',\n    1458817238.1713]\nThis is not my data: 114, 117, 114, 117, 114, 117, 114, 117, 114, 117 - it's garbage.\n. How i can check syntax before start ?\nIf error in lua scripts appears on production via puppet, and tarantool on restart say to puppet \"OK\" (really not started) - it will be BIG FAIL!!!\nI think: it's no a feature - it's a bug!\n. You collegue says that this not a crush, in\nhttps://github.com/tarantool/tarantool/issues/1409\nFYI ;)\n. ",
    "boiler": "Yes, this problem affect production use, because we run the risk of losing data.\n. It works! Thanks.\n. ",
    "e7e5": "Tarantool v1.7.1 is affected too (1.7.1-186-gfdc3f89)\n. ",
    "antonmes": "the issue is different behaviour with the \"\\r\\nConnection: close\" header.\nnot related to libev / tarantool.\n. > This patch actually reverts all CALL changes added to new CALL implementation in 1.7.4. \nNot all of them, just the C side. It's not about box_tuple_new, even if you return tuples directly from iterator, they will be wrapped into another(redundant)  array\nlua select result:\n[[1, \"foo\"], [2, \"bar\"]]\nc select result:\n[[[1, \"foo\"], [2, \"bar\"]]]. oh, now i have the same result in lua:\n[[[1, \"foo\"], [2, \"bar\"]]]\nSo this is the expected behavior? Thanks for your answer anyway.. ",
    "anuriq": "For the time being, I think not. Replication, cluster configuration is opinionated and hard to include all options. Same for Redis, Postgresql, MongoDB community cookbooks - there is only standalone installation support.\n. ",
    "bogatuadrian": "Hi, any status on this?. ",
    "vmarkovtsev": "Well, there is README.MacOSX in 1.5.5 with some instructions, I believe it is supported.\nUPD: it seems that there are some minor clang incompatibilities, I will see about them.\n. I was able to successfully build and install Tarantool 1.5 after applying 2 patches.\n`` ruby\n    ohai \"Preparing\"\n    version =git -C #{cached_download} describe HEAD`\nFile.open(buildpath/\"VERSION\", 'w') {|file| file.write(version)}\nsystem \"patch\", \"-p0\", \"third_party/libeio/ecb.h\", \"01_ecb.patch\"\nsystem \"patch\", \"-p0\", \"third_party/libev/ev.c\", \"02_ev.patch\"\n\n```\n01_ecb.patch\n```\n--- third_party/libeio/ecb.h    2016-05-23 16:41:55.000000000 +0300\n+++ third_party/libeio/ecb.h.patched    2016-05-23 16:41:43.000000000 +0300\n@@ -82,7 +82,7 @@\n#define ECB_C     (STDC+0) / this assumes that STDC is either empty or a number /\n #define ECB_C99   (STDC_VERSION >= 199901L)\n-#define ECB_C11   (STDC_VERSION >= 201112L)\n+#define ECB_C11   0  // (STDC_VERSION >= 201112L)\n #define ECB_CPP   (__cplusplus+0)\n #define ECB_CPP11 (__cplusplus >= 201103L)\n```\n02_ev.patch\n```\n--- third_party/libev/ev.c  2015-04-22 19:43:04.000000000 +0300\n+++ third_party/libev/ev.c.patched  2016-05-23 16:50:11.000000000 +0300\n@@ -559,7 +559,7 @@\n#define ECB_C     (STDC+0) / this assumes that STDC is either empty or a number /\n #define ECB_C99   (STDC_VERSION >= 199901L)\n-#define ECB_C11   (STDC_VERSION >= 201112L)\n+#define ECB_C11   0  // (STDC_VERSION >= 201112L)\n #define ECB_CPP   (__cplusplus+0)\n #define ECB_CPP11 (__cplusplus >= 201103L)\n```\n. To use it smoothly, I also had to change the following in tarantool.rb\n``\n--- tarantool.rb    2016-05-23 17:18:53.000000000 +0300\n+++ tarantool.rb.patched    2016-05-23 17:18:41.000000000 +0300\n@@ -50,6 +50,8 @@\n     version =git -C #{cached_download} describe HEAD`\n File.open(buildpath/\"VERSION\", 'w') {|file| file.write(version)}\n\n\nsystem \"patch\", \"-p0\", \"third_party/libeio/ecb.h\", \"01_ecb.patch\"\n\nsystem \"patch\", \"-p0\", \"third_party/libev/ev.c\", \"02_ev.patch\"\nohai \"Configuring:\"\n system \"cmake\", \".\", *args\n@@ -59,6 +61,8 @@\nohai \"Installing:\"\n system \"make install\"\n+    system \"mkdir\", \"-p\", \"#{prefix}/var/run\"\n+    system \"mkdir\", \"-p\", \"#{prefix}/var/lib/tarantool\"\nohai \"Installing man\"\n man1.install 'doc/man/tarantool.1'\n@@ -69,6 +73,7 @@\n ohai \"Installing config\"\n if build.stable?\n   inreplace prefix/\"etc/tarantool.cfg\", /^work_dir =./, \"work_dir = #{prefix}/var/lib/tarantool\"\n+      inreplace prefix/\"etc/tarantool.cfg\", /^pid_file =./, \"pid_file = #{prefix}/var/run/box.pid\"\n else\n   doc.install \"test/box/box.lua\"\n   inreplace doc/\"box.lua\" do |s|\n```\n. \n\n",
    "epicfilemcnulty": "well, apparently it only happens for 1.6.8.683 version, tarantool 1.6.8.525 (which is supposed to be stable version, I believe -- it is not exactly clear) builds just fine...\n. @racktear Successfully built versions 1.6.8.683 and 1.6.8.692 with this patch. Thanks!\n. @racktear Not exactly, actually I'm using alpine as a base container for lxc. Maybe it's worth to create an official tarantool apk package? I've created a draft APKBUILD file for tarantool while I was building it.\n. ",
    "saks": "Why not to use alpine image as base, since docker will use it for official images?\n. @racktear Thanks! Will try it out soon! Another question: any plans to make an \"official\" docker image that will be possible to pull with docker pull tarantool?\n. ",
    "zevlg": "0ULL decides, thanks!\n. ",
    "ruben-ayrapetyan": "@rtsisyk, what is expected behaviour in case of overflow during execution? Should it also be catched?\nFor example, lexer could catch overflow:\n```\ntarantool> 9223372036854775808LL\n\n\nerror: '[string \"9223372036854775808LL\"]:1: malformed number near ''9223372036854775808LL'''\n...\n\ntarantool> 9223372036854775807LL\n\n9223372036854775807\n...\n```\n\nThen, wouldn't lua behaviour seem inconsistent, if overflow is not checked during execution?\n```\ntarantool> x = 9223372036854775807LL\n\n...\ntarantool> y = 1\n...\ntarantool> x + y\n\n-9223372036854775808\n```\n\nWhat do you think about this?\n. Dear maintainers,\nThe patch renames itr -> iterator in names of interfaces as described in #1694.\nAlso, it renames iterator -> itr in names of local variables to distinguish between interface / type and local names. What do you think about this part of changes?\nAnother question is related to iterator names for interfaces / variables, which are not related to index functionality. Should the patch also rename them into itr-based version, from your view point? Particularly, I mean the following:\n- ./src/box/lua/misc.cc:85 - int iterator = lua_tointeger(L, 3);\n- ./src/lib/small/test/matras.cc:90 - std::set<void*>::iterator iterator = AllocatedBlocks.lower_bound(data);\n- ./src/lib/small/test/matras.cc:100 - likewise and same for ./test/small/matras.cc.\nI would be grateful for any suggestions regarding testing of the changes.\nLocally, I performed make -j7 ; make test -j7 for Debug values of CMAKE_BUILD_TYPE and the tests passed. However, Travis points to failure on engine/snapshot.test.lua, which also passed successfully upon local make test. I am wondering about how could I reproduce the failure locally.\nUpon running make -j7 ; make test -j7 for Release build, the snapshot test also passed, while one of the next tests - vinyl/compact.test.lua - failed. Further investigation showed that the failure is unstable and sometimes occurs on origin/1.7 (at moment of testing - 000b2c706c6ceaf4246f0357da16bbf9f76e0083) branch too - for both Debug and Release builds. Seems that failure of the test is a known issue (#1758), although local failure provides output that is a bit different from what is described in #1758:\n+- error: './test_run.lua:174: Failed to seek log file: /... full path .../build/test/var/vinyl.log\n+    : Invalid argument'\nWould it be useful to report the unstable failure with the output as a separate issue?\n. ",
    "taroff": "\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e \u043d\u0435 \u043c\u043e\u0433\u0443 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u044b. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c, + \u043d\u0430\u0448\u0435\u043b \u0432 \u0441\u0432\u043e\u0435\u043c lua \u043a\u043e\u0434\u0435 \u043f\u0430\u0440\u0443 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u0445 \u0431\u0430\u0433\u043e\u0432.\n\u041a\u043e\u0434 \u0431\u044b\u043b \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430\nhttp://pastebin.com/LKqFsJWK\n\u041f\u0440\u0438\u0447\u0435\u043c \u043f\u043e\u043a\u0430 \u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b \u0441\u0432\u043e\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u043b \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0447\u0435\u0440\u0435\u0437 tarantoolctl eval instance script.lua \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0447\u0435\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043b\u0430\u0441\u044c \u043f\u0430\u0447\u043a\u0430 \u0444\u0430\u0439\u0431\u0435\u0440\u043e\u0432 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445.\n\u0412\u0435\u0440\u0441\u0438\u044f 1.6.8-701-g11be0cd \u043f\u043e\u0434 centos 6 \u0438\u0437 \u043e\u0444 \u0440\u0435\u043f\u0430.\n\u0412 \u043b\u043e\u0433\u0435 \u043f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e PANIC: unprotected error in call to Lua API (not enough memory), \u043d\u043e \u043f\u043e\u0441\u043b\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043e \u043a\u0440\u0435\u0448\u0435 \u0438 \u044f \u043d\u0435 \u0441\u0442\u0430\u043b \u0434\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u044e\u0434\u0430.\n\u0418 \u0431\u044b\u043b space \u0434\u0440\u0443\u0433\u043e\u0439 \u0441 4-5\u043a\u043a \u0442\u0443\u043f\u043b\u043e\u0432 \u0438 \u0438\u0437 \u043d\u0435\u0433\u043e select \u0434\u0435\u043b\u0430\u043b\u0441\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e id \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 spaceDelete(id) \u0432 \u0441\u0430\u043c\u043e\u043c \u043d\u0430\u0447\u0430\u043b\u0435. \n. ",
    "kmansoft": "Sure:\n\ndeb http://download.tarantool.org/tarantool/1.6/ubuntu/ xenial main\ndeb-src http://download.tarantool.org/tarantool/1.6/ubuntu/ xenial main\n\nbinutils updated today, maybe your build server just missed the update?\n\u0418 \u0447\u0442\u043e\u0431\u044b \u0434\u0432\u0430 \u0440\u0430\u0437\u0430 \u043d\u0435 \u0432\u0441\u0442\u0430\u0432\u0430\u0442\u044c:\n\nLinux tammy 4.4.0-28-generic #47-Ubuntu SMP Fri Jun 24 10:09:13 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID:   Ubuntu\nDescription:  Ubuntu 16.04 LTS\nRelease:  16.04\nCodename: xenial\n$ ls -lh /usr/lib/x86_64-linux-gnu/libbfd*\n-rw-r--r-- 1 root root 1.3M Jun 30 12:14 /usr/lib/x86_64-linux-gnu/libbfd-2.26.1-system.so\nlrwxrwxrwx 1 root root   23 Jul 13 17:47 /usr/lib/x86_64-linux-gnu/libbfd-2.26-system.so -> libbfd-2.26.1-system.so\n\nThe symlink is not part of binutils, was added by me, and now tarantool runs again.\n. Yes, I use github.com/tarantool/go-tarantool which -- as far as I know -- is the official Go client library (?)\nYes, the test app is (partly) a benchmark, and yes, the rate at which it makes Tarantool requests is not limited by anything, it just goes as fast as it can.\nI don't think there is any throttling in the Go client library...\n... and IMHO it would be the wrong place to fix it (the client library can't possibly know if the server can accept more requests... unless you implement some sort of feedback loop, in every client driver for every language... complicating things...).\nCan readahead be dynamic? So box.cfg would specify the maximum size, not initial?\nPinging @mialinx Go client maintainer.\n. The client stops reading -- but server does keep sending responses?\nIf that's the case, then it sounds more like a client bug.\nAnd just want to note that I have tried setting the client side timeout to some ridiculously large value, and it did not help (it still failed, just took longer).\n. And another thing worth noting, in favor of a client library bug:\nMy test app uses synchronous Tarantool calls -- I mean it does not queue up a large number of requests only then waiting for them to complete.\nAnd it's my understanding that every call to e.g. dbconn.CallTyped 1) sends a request to Tarantool and 2) waits for a response and 3) only then returns.\nAnd so, there should be at most 20 (the number of worker threads) outstanding requests in and at most 20 outstanding responses.\n. FWIW -\nLast night I added debug printouts to go-tarantool's connection class, this is a \"thread\" that loops reading from a socket and decodes and dispatches server responses.\nThey are marked with \"kman\":\nhttps://gist.github.com/kmansoft/ca57b24a8b7a7cfc014834f7c1558eb0#file-connection-go-L286\nNone of the \"failure\" or \"interesting\" printouts triggered before the failure occurred.\nInterestingly, if I uncomment the \"log.Printf kman tarantool decoded the header\", slowing the reader down, then the issue is less likely to occur; it seems but I'm not entirely sure.\n. Cool!\nLooking at the change:\n-  return ibuf_used(&iobuf->in) == 0 && obuf_size(&iobuf->out) == 0;\n +  return ibuf_used(&iobuf->in) == 0 && obuf_used(&iobuf->out) == 0;\nSince buffer sizes are presumably > 0, the expression was always false, and so iobuf_is_idle always returned false?\nI will test as soon as it shows up in the Fedora repo.\nThank you for the quick fix!\n. Confirming fixed in 1.6.8-756-gd8d4ad0.\nTested on Ubuntu 16.04, regrettably there is no Fedora build(?)\n. The repo (tarantool 1.6, Fedora 25, x86_64) is now available. Thank you. Looking forward to actual builds :). Can Tarantool make the default stack size larger if a recent readline version is detected (can it be done?) maybe with a documentation caveat that Fedora is not optimal for production.\nBut then all other distros will probably catch up (to newer readline) sooner or later, even the more popular for servers Debian and Ubuntu (and eventually CentOS and RHEL, in 10 years maybe...)\nLooks like someone already attempted that, not sure if this change has been picked up:\nhttps://github.com/tarantool/tarantool/commit/f2677cd964b23aa4ef09dbad660d42f206ce8ab3\nPS:\nI have a funny feeling :bowtie: why it was me who filed the crash originally:\nhttps://github.com/tarantool/doc/issues/524 \n. > We are planning to make stacks dynamically shrink and grow. In fact, we're already working in this direction.\nAh OK thank you.\nWill that be only in 2.0 / 2.1 series - or are there plans to backport to 1.10 (for example) or 1.11 whatever?. Strange things:\n1 - The LSN increased by 128 billion between 0:10 and 2:13 - this is when I upgraded from 1.9 to 1.10\nI can't imagine that my code (even with theoretical bugs) - running on a 2 CPU VPS - really created 128 billion real write operations in 2 hours.\n2 - From 2:13 to 9:32, there isn't a similar \"outrageous\" increase in LSN.\nSo the increase by 128 billions only happened once, after upgrading 1.9 to 1.10.\n. Snapshotting is now broken:\n2019-03-06 11:13:31.492 [25904] main/107/checkpoint_daemon checkpoint_daemon.lua:87 E> builtin/box/checkpoint_daemon.lua:49: bad argument #2 to 'format' (number expected, got cdata)\n2019-03-06 12:13:31.493 [25904] main/107/checkpoint_daemon checkpoint_daemon.lua:87 E> builtin/box/checkpoint_daemon.lua:49: bad argument #2 to 'format' (number expected, got cdata)\n2019-03-06 13:13:31.493 [25904] main/107/checkpoint_daemon checkpoint_daemon.lua:87 E> builtin/box/checkpoint_daemon.lua:49: bad argument #2 to 'format' (number expected, got cdata)\nand there are no new .snap files - and .xlog files keep proliferating.\nPS - deleted whole database, went back to 1.9, our app side can deal with this and re-creates its data. Will stay with 1.9 for now.. ",
    "mialinx": "Here is a stacktrace of reader goroutine at the moment just after getting an error.\nGoroutine is reading from a socket. So I guess problem is not in the client.\ngoroutine 21 [IO wait]:\nnet.runtime_pollWait(0x7fc94b172608, 0x72, 0xc8200b0000)\n    /usr/lib/go/src/runtime/netpoll.go:160 +0x60\nnet.(*pollDesc).Wait(0xc82006a1b0, 0x72, 0x0, 0x0)\n    /usr/lib/go/src/net/fd_poll_runtime.go:73 +0x3a\nnet.(*pollDesc).WaitRead(0xc82006a1b0, 0x0, 0x0)\n    /usr/lib/go/src/net/fd_poll_runtime.go:78 +0x36\nnet.(*netFD).Read(0xc82006a150, 0xc8200b0000, 0x20000, 0x20000, 0x0, 0x7fc94b16d028, 0xc8200700a0)\n    /usr/lib/go/src/net/fd_unix.go:250 +0x23a\nnet.(*conn).Read(0xc820086030, 0xc8200b0000, 0x20000, 0x20000, 0x0, 0x0, 0x0)\n    /usr/lib/go/src/net/net.go:172 +0xe4\nbufio.(*Reader).fill(0xc82006e240)\n    /usr/lib/go/src/bufio/bufio.go:97 +0x1e9\nbufio.(*Reader).Read(0xc82006e240, 0xc820260085, 0x5, 0x5, 0xc820036de8, 0x0, 0x0)\n    /usr/lib/go/src/bufio/bufio.go:207 +0x260\nio.ReadAtLeast(0x7fc94b172718, 0xc82006e240, 0xc820260085, 0x5, 0x5, 0x5, 0x0, 0x0, 0x0)\n    /usr/lib/go/src/io/io.go:297 +0xe6\nio.ReadFull(0x7fc94b172718, 0xc82006e240, 0xc820260085, 0x5, 0x5, 0x419e17, 0x0, 0x0)\n    /usr/lib/go/src/io/io.go:315 +0x62\ngithub.com/tarantool/go-tarantool.read(0x7fc94b172718, 0xc82006e240, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /home/nuf/go/src/github.com/tarantool/go-tarantool/connection.go:337 +0xc6\ngithub.com/tarantool/go-tarantool.(*Connection).reader(0xc8200ac140)\n    /home/nuf/go/src/github.com/tarantool/go-tarantool/connection.go:298 +0x121\ncreated by github.com/tarantool/go-tarantool.Connect\n    /home/nuf/go/src/github.com/tarantool/go-tarantool/connection.go:68 +0x346\n. @kostja \n\nI believe the above patch fixes it, could you please check? At least I can't repeat the hang any more.\n\nFix works for me.\n. ",
    "brigadier": "Hi,\n version 1.7.1-89-g36a0cd1\nSorry, my initial description was incorrect. tarantool just closes the socket when it encounters non-integer value of index in otherwise correct packet.\nTest case - send a 'delete' packed with STR value in index field instead of INT. This packet is incorrect indeed, but I think closing socket it is not necessary for such errors, when there's a header, a body with all necessary fields but just one of the fields has incorrect type. In contrary, for the 'update' packet, if I send some incorrect ops, it just returns an error packet with \"Unknown UPDATE operation\".\nThe body of packet which makes tarantool close the socket (\"\" in index):  <<131,16,205,2,1,17,160,32,146,1,2>>\nCorrect packet (1 in index): <<131,16,205,2,1,17,1,32,146,1,2>>\nThese packets are with no header\n. Erlang one https://github.com/brigadier/tara/\nBut at the moment it is already impossible to send such bad packet without modification of the code\n. ",
    "stepan-mitkin": "Ahh... The coredump file is lost.\nSorry for not being useful.\nWhat can I do to get more info if (when) this problem occurs again?\n. I wrote a wrong version. Here's the right one:\ntarantool: version 1.6.8-761-g8b23c8d\n. I installed this version:\ntarantool: version 1.7.1-231-g20729da\nIt works. The problem does not show up.\n. When I start tarantool with the crash db, I get this in the console:\n$ tarantool dbgcfg.lua\nstarting console...\ntarantool> Segmentation fault\nCurrent time: 1475047391\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed, \nthis may fail as well\n0  0x40f351 in sig_fatal_cb(int)+129\n1  0x7fe85e563330 in ?\n2  0x468ee2 in vy_scheduler_f+738\n3  0x40eecc in fiber_cxx_invoke(int ()(__va_list_tag), __va_list_tag*)+12\n4  0x4c0300 in fiber_loop+48\n5  0x5e56bf in coro_init+63\n6  (nil) in ?\nAvbrutt (SIGABRT) (kjerne lagret i fil) == \"core saved in file\"\nNote that I commented out line \"require(\"init\")\" in dbgcfg.lua.\nUploaded the core file to ftp://build.tarantool.org\ncore.tarantool.3266.anton.1475047391.zip\ntarantool: version 1.7.1-489-ge5f67b9\nuname -a\nLinux anton 4.4.0-38-generic #57~14.04.1-Ubuntu SMP Tue Sep 6 17:20:43 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n. I started testing from an earlier snapshot file and the original error shows up.\nAs before, I do several writes both in memtx and vinyl inside a transaction and get an exception:\n\"A multi-statement transaction can not use multiple storage engines\"\nSo far so good.\nThen I shut down tarantool with Ctrl+C. \nWhen I start tarantool again, it does not start. Here is the log:\n2016-09-28 19:16:28.173 [5817] main/101/dbgcfg.lua C> version 1.7.1-489-ge5f67b9\n2016-09-28 19:16:28.173 [5817] main/101/dbgcfg.lua C> log level 5\n2016-09-28 19:16:28.173 [5817] main/101/dbgcfg.lua I> mapping 536870912 bytes for tuple arena...\n2016-09-28 19:16:28.199 [5817] main/101/dbgcfg.lua I> recovery start\n2016-09-28 19:16:28.199 [5817] main/101/dbgcfg.lua I> recovering from `/home/stipan/baddew/data/00000000000000205277.snap'\n2016-09-28 19:16:28.235 [5817] main/101/dbgcfg.lua memtx_engine.cc:288 E> rollback: Vinyl does not support altering not empty space\n2016-09-28 19:16:28.235 [5817] main/101/dbgcfg.lua vinyl_space.cc:594 E> ER_UNSUPPORTED: Vinyl does not support altering not empty space\n2016-09-28 19:16:28.235 [5817] main/101/dbgcfg.lua F> can't initialize storage: Vinyl does not support altering not empty space\n. Let me explain what \"does not start\" means in practice.\nIt means:\n\nAll data is lost forever.\nThe application does not work anymore.\n\nThis is the worst thing that can happen to a database\nThanks God it happened in the test environment, not in production.\nBut currently, if the production server stops, it will stop forever.\n. I did some debugging. Here is what the stack looks like:\ntuple_validate_raw (i == 5)\ntuple_validate\nmemtx_space_check_format (the space name is \"_space\")\nspace_check_format_xc\nModifySpace::alter\nalter_space_do\non_replace_dd_space. > First, please, this is not a data loss, this looks like an upgrade issue.\nHuff... Thanks.\n\nfix the conflicting data or remove space formatting\n\nIt's not data. It's metadata. A description of spaces in the database. The space name that tarantool complains on is \"_space\".\nSo 'force_recovery' does not help. I end up with an empty database if I use 'force_recovery'.\nI'll try to downgrade and see what happens.. Downgrade to 1.7.5 did not work.\n2017-11-27 21:15:23.531 [16508] main/101/dbg.lua I> recovery start\n2017-11-27 21:15:23.531 [16508] main/101/dbg.lua I> recovering from `/home/stipan/tmp/tara//00000000000093350726.snap'\n2017-11-27 21:15:23.555 [16508] main/101/dbg.lua schema.h:184 E> ER_NO_SUCH_SPACE: Space '276' does not exist\n2017-11-27 21:15:23.555 [16508] main/101/dbg.lua F> can't initialize storage: Space '276' does not exist\n\nthis is not a data loss, this looks like an upgrade issue.\n\nThis is an upgrade issue that lead to a data loss.\n. The script helped. Thanks a lot!\nHere is the script.\nRun tarantool 1.7.5 with this:\n```\nbox.cfg{force_recovery = true}\nbox.space._index:run_triggers(false)\nbox.space._space:run_triggers(false)\nbox.space._index:delete{276, 1}\nbox.space._index:delete{276, 0}\nbox.space._space:delete{276}\nbox.space._priv:delete{2, 'space', 276}\nbox.space._index:delete{284, 2}\nbox.space._index:delete{284, 1}\nbox.space._index:delete{284, 0}\nbox.space._space:delete{284}\nbox.space._index:delete{285, 0}\nbox.space._space:delete{285}\nbox.space._index:delete{340, 1}\nbox.space._index:delete{340, 0}\nbox.space._space:delete{340}\nbox.space._index:delete{330, 0}\nbox.space._space:delete{330}\nbox.space._schema:replace{'version', 1,7,4}\nbox.snapshot()\n```\nStop tarantool.\nRun tarantool 1.7.6 from that snapshot.\nbox.cfg { ... }\nbox.schema.upgrade(). Here is how I will upgrade tarantool from now on:\n\nUpgrade tarantool.\nStop tarantool.\nRun tarantool with only this script\nbox.cfg { ... }\nbox.schema.upgrade()\nStop tarantool\nStart tarantool with the normal application scripts.\n\nAny deviation from this scenario may lead to upgrade issues.. ",
    "orchaton": "Of course. Here: \nformat-patch.zip\nThat error was a mistake. Now it's been fixed.\n. Updating tests using \"old\" style. Path: test/box/cjson.test\nformat-patch.tests.zip\n. ",
    "xpunkt": "i have already maked 2 pulls :=)\ngit-2 is also to old, should be git-r3\neapi=4 should be eapi=5 now\nwiill try if i can solve it all\n. found that it have submodule in github, this submodules are fetched authmatic in git-r3 eclass\nfor this to work its imho needed to make each submodule a new ebuild ?\n. layman -a fidonet\nemerge --autounmask-write =tarantool-1.5.9999\netc-update\nemerge -av tarantool\nhere is my current problem\n. thanks cono, where is that ebuild just ?\nnote my work is based on HEAD in github, so the ebuild name should changed to tarantool-9999 with always will be HEAD in github\n. ",
    "cono": "I've made 1.5.5_p33 version:\nhttps://github.com/tarantool/gentoo-overlay/pull/5\nTried via new portage repos.conf feature. Successfully installed and started tarantool server.\n. @xpunkt I have provided a link to the merge request: https://github.com/tarantool/gentoo-overlay/pull/5\n. ",
    "zarya": "example.lua is still comming back with installing the updates (1.7.1.444.gef1bd18-1)\n. ",
    "ilovezfs": "```\nDetermining if the function clock_gettime exists passed with the following output:\nChange Dir: /tmp/tarantool-20160920-21540-1g36tpx/tarantool-1.7.1.401/CMakeFiles/CMakeTmp\nRun Build Command:\"/usr/local/Homebrew/Library/Homebrew/shims/super/gmake\" \"cmTC_ad457/fast\"\n/Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/cmTC_ad457.dir/build.make CMakeFiles/cmTC_ad457.dir/build\nBuilding C object CMakeFiles/cmTC_ad457.dir/CheckFunctionExists.c.o\n/usr/local/Homebrew/Library/Homebrew/shims/super/clang    -fexceptions -funwind-tables -fno-common -fopenmp -msse2 -DCHECK_FUNCTION_EXISTS=clock_gettime -mavx -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11   -o CMakeFiles/cmTC_ad457.dir/CheckFunctionExists.c.o   -c /usr/local/Cellar/cmake/3.6.2/share/cmake/Modules/CheckFunctionExists.c\nLinking C executable cmTC_ad457\n/usr/local/Cellar/cmake/3.6.2/bin/cmake -E cmake_link_script CMakeFiles/cmTC_ad457.dir/link.txt --verbose=1\n/usr/local/Homebrew/Library/Homebrew/shims/super/clang   -fexceptions -funwind-tables -fno-common -fopenmp -msse2 -DCHECK_FUNCTION_EXISTS=clock_gettime -mavx -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -Wl,-search_paths_first -Wl,-headerpad_max_install_names   CMakeFiles/cmTC_ad457.dir/CheckFunctionExists.c.o  -o cmTC_ad457\n```\n. The underlying cause is the new SDK's weak symbols:\niMac-TMP:SDKs joe$ pwd\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs\niMac-TMP:SDKs joe$ grep 'weak$os10.11' MacOSX.sdk/usr/lib/system/libsystem_c.tbd\n    symbols:         [ '$ld$weak$os10.11$_basename_r', '$ld$weak$os10.11$_clock_getres', \n                       '$ld$weak$os10.11$_clock_gettime', '$ld$weak$os10.11$_clock_settime', \n                       '$ld$weak$os10.11$_dirname_r', '$ld$weak$os10.11$_getentropy', \n                       '$ld$weak$os10.11$_mkostemp', '$ld$weak$os10.11$_mkostemps', \niMac-TMP:SDKs joe$\niMac-TMP:SDKs joe$ grep clock_gettime MacOSX.sdk/usr/include/time.h \nint clock_gettime(clockid_t __clock_id, struct timespec *__tp);\n__uint64_t clock_gettime_nsec_np(clockid_t __clock_id);\nSo it's defined but not actually available, and you won't find that out at build time unless you pass -no_weak_imports in LDFLAGS. But you can't easily do that because that flag is not supported on earlier versions of Xcode, including the CLT 7.3.1 which is the latest available for 10.11. So even if Xcode 8 is installed, using -no_weak_imports can still fail.\nBut assuming you don't pass -no_weak_imports it will find the symbol is defined in time.h and compile. But then crash at run time. So the most reliable check is that it both builds and executes, since simply successfully compiling does not mean you actually have the symbol available at runtime anymore.\n. ",
    "sgnrslv": "@bigbes ok, got it.\n. ",
    "rohitjoshi": ":1\n. ",
    "Darych": "I found that access_sysview and access_bin cause session.storage test fail.\nFor some reason session.id() in session.storage is 3.\nI researched access_bin and find that session.id() was increased in this block:\n-- OPENTAR-84: crash in on_replace_dd_func during recovery\n-- _func space recovered after _user space, so setuid option can be\n-- handled incorrectly\nbox.snapshot()\ntest_run:cmd('restart server default')\nremote = require('net.box')\nsession = box.session\nsetuid_func = function() return box.space.setuid_space:auto_increment{} end\nc = remote.connect(box.cfg.listen) -- here sid is increased\nbox.session.id()\nc:call(\"setuid_func\")\nBut if I wrap c-remote.connect(...) with box.session.id() like:\n```\nbox.session.id()\nc = remote.connect(box.cfg.listen) -- here sid is increased\nbox.session.id()\n```\nThen session id is 2 and not increased.. Hi guys.\nI created pull request for this ticket https://github.com/tarantool/tarantool/pull/1933\n. Sorry, forgot to change tests.\n. ",
    "roman-kozachenko": "Specification still said that UPSERT should fail on spaces with unique secondary index. I think that should be fixed.. ",
    "aensidhe": "I confirm issue.\nLog:\naensidhe@DESKTOP-KE96P1V  /d/Repos/OSS/tarantool-csharp/samples/docker-compose (fix/tests/cleanup)\n$ docker-compose up tarantool1\nCreating network \"dockercompose_default\" with the default driver\nCreating dockercompose_tarantool1_1\nAttaching to dockercompose_tarantool1_1\n\u001b[36mtarantool1_1  |\u001b[0m /usr/local/bin/tarantool-entrypoint.lua: Creating configuration file: /etc/tarantool/config.yml\n\u001b[36mtarantool1_1  |\u001b[0m /usr/local/bin/tarantool-entrypoint.lua: Config:\n\u001b[36mtarantool1_1  |\u001b[0m ---\n\u001b[36mtarantool1_1  |\u001b[0m snap_dir: /var/lib/tarantool\n\u001b[36mtarantool1_1  |\u001b[0m snapshot_period: 3600\n\u001b[36mtarantool1_1  |\u001b[0m log_level: 5\n\u001b[36mtarantool1_1  |\u001b[0m pid_file: /var/run/tarantool/tarantool.pid\n\u001b[36mtarantool1_1  |\u001b[0m listen: 3301\n\u001b[36mtarantool1_1  |\u001b[0m background: false\n\u001b[36mtarantool1_1  |\u001b[0m replication_source:\n\u001b[36mtarantool1_1  |\u001b[0m - replicator:234234@tarantool1:3301\n\u001b[36mtarantool1_1  |\u001b[0m - replicator:234234@tarantool2:3301\n\u001b[36mtarantool1_1  |\u001b[0m wal_dir: /var/lib/tarantool\n\u001b[36mtarantool1_1  |\u001b[0m ...\n\u001b[36mtarantool1_1  |\u001b[0m\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:15.835 [1] main/101/tarantool-entrypoint.lua C> version 1.7.2-1-g92ed6c4\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:15.835 [1] main/101/tarantool-entrypoint.lua C> log level 5\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:15.835 [1] main/101/tarantool-entrypoint.lua I> mapping 1073741824 bytes for tuple arena...\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:15.846 [1] iproto/102/iproto I> binary: started\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:15.846 [1] iproto/102/iproto I> binary: bound to 0.0.0.0:3301\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:15.863 [1] main/103/applier/tarantool1:3301 I> connected to 1.7.2 at 172.20.0.2:3301\n\u001b[36mtarantool1_1  |\u001b[0m\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:15.896 [1] main/104/applier/tarantool2:3301 I> can't connect to master\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:15.896 [1] main/104/applier/tarantool2:3301 coio.cc:205 !> SystemError getaddrinfo, called on fd -1: No error information\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:15.896 [1] main/104/applier/tarantool2:3301 I> will retry every 1 second\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:45.847 [1] main/101/tarantool-entrypoint.lua applier.cc:663 E> ER_CFG: Incorrect value for option 'replication_source': failed to connect to one or more servers\n\u001b[36mtarantool1_1  |\u001b[0m 2016-10-26 13:42:45.847 [1] main/101/tarantool-entrypoint.lua F> can't initialize storage: Incorrect value for option 'replication_source': failed to connect to one or more servers\n\u001b[36mdockercompose_tarantool1_1 exited with code 1\ndocker-compose.yml:\n```\nversion: '2'\nservices:\n  tarantool1:\n    image: tarantool/tarantool:1.7\n    command: tarantool /usr/local/share/tarantool/sample.init.lua\n    volumes:\n      - $PWD/tarantool:/usr/local/share/tarantool\n    environment:\n      TARANTOOL_REPLICATION_SOURCE: \"replicator:234234@tarantool1,replicator:234234@tarantool2\"\n      TARANTOOL_REPLICATION_USER: replicator\n      TARANTOOL_USER_PASSWORD: \"234234\"\ntarantool2:\n    image: tarantool/tarantool:1.7\n    command: tarantool /usr/local/share/tarantool/sample.init.lua\n    volumes:\n      - $PWD/tarantool:/usr/local/share/tarantool\n    environment:\n      TARANTOOL_REPLICATION_SOURCE: \"replicator:234234@tarantool1,replicator:234234@tarantool2\"\n      TARANTOOL_REPLICATION_USER: replicator\n      TARANTOOL_USER_PASSWORD: \"234234\"\n```\nLua:\n```\n!/usr/bin/env tarantool\nbox.cfg\n{\n    pid_file = nil,\n    background = false,\n    log_level = 5\n}\nlocal function init()\n    box.schema.user.create('replicator', {password = '234234', if_not_exists = true})\n    box.schema.user.grant('replicator','execute','role','replication', { if_not_exists = true })\nend\nbox.once('init', init)\n``\n. Yes,is_nullable` helped. Is it effect of specifying type of field? Or it is new functionality. If I remember correctly, it was possible to specify type and have nils in data until you have an index on this field.. Workaround is to use https://hub.docker.com/r/progaudi/tarantool/. {\"time\": \"2018-04-06T09:32:51.003+0000\", \"level\": \"SYSERROR\", \"message\": \"SystemError read(14887), called on fd 24, aka ip:3301\", \"error\": \"Operation timed out\", \"pid\": 1 , \"cord_name\": \"iproto\", , \"file\": \"\\/usr\\/src\\/tarantool\\/src\\/sio.cc\", \"line\": 278}. ",
    "anton-putau": "Thanks\n. ",
    "ivankosenko": "sorry. it's my mistake. Of course, I mean the position of the element. (it was an incorrect English translation of the phrase \"\u043d\u043e\u043c\u0435\u0440 \u0442\u0443\u043f\u043b\u0430\")\n. fixed in #2907 and #2920. I ran the program under gdb and put a breakpoint in the function xrow_decode_error to locate error.\nThis is backtrace I received:\n```#0  xrow_decode_error (row=0x7fffee46fe70) at /srv/tarantool-dev/src/box/xrow.c:714\n1  0x00000000004c1f85 in xrow_decode_error_xc (row=0x7fffee46fe70) at /srv/tarantool-dev/src/box/xrow.h:440\n2  0x00000000004c37ad in applier_subscribe (applier=0xa738f0) at /srv/tarantool-dev/src/box/applier.cc:376\n3  0x00000000004c3c54 in applier_f(typedef __va_list_tag __va_list_tag *) (ap=0x7fffee400540) at /srv/tarantool-dev/src/box/applier.cc:475\n4  0x000000000040bcbe in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x4c3bb1 , ap=0x7fffee400540) at /srv/tarantool-dev/src/fiber.h:665\n5  0x00000000004f5aad in fiber_loop (data=0x0) at /srv/tarantool-dev/src/fiber.c:631\n6  0x000000000068d36b in coro_init () at /srv/tarantool-dev/third_party/coro/coro.c:110```. I captured traffic from replica to master and decrypted it. Here's the data:\n[{code: 7 /* auth */}, {33: ['chap-sha1', '\\x8a\\xf5s&P\\x92#(\\xf2iE\\xdf\\x7fr\\xd6\\xf1;\\xce\\xeb\\x80'], 35: 'admin'}]\n[{code: 65 /* join */}, {36: '68791395-e830-470e-9eeb-05454d955fe9'}]\n[{code: 0}, {38: {1: 31499}}] // VCLOCK\n[{code: 0}, {38: {1: 62729}}] // VCLOCK\n[{code: 0}, {38: {1: 93978}}] // VCLOCK\n[{code: 0}, {38: {1: 124863}}] // VCLOCK\n[{code: 66 /* subscribe */}, {6: 67333, 36: '68791395-e830-470e-9eeb-05454d955fe9', 37: 'db4c7ef9-b3be-4c44-8c5b-e16b9a287521', 38: {1: 150005}}]\nAs I understand, master did not expect packets with vclock at this stage but they came and caused the error.. this is backtrace which send vclock packet\n```\n0  coio_write_xrow (coio=0x7fffee43fef0, row=0x7fffee43fea0) at /srv/tarantool-dev/src/box/xrow_io.cc:100\n1  0x00000000004c2615 in applier_writer_f(typedef __va_list_tag __va_list_tag *) (ap=0x7fffee400410) at /srv/tarantool-dev/src/box/applier.cc:121\n2  0x000000000040bcbe in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x4c2517 , ap=0x7fffee400410) at /srv/tarantool-dev/src/fiber.h:665\n3  0x00000000004f5ab5 in fiber_loop (data=0x0) at /srv/tarantool-dev/src/fiber.c:631\n4  0x000000000068d37b in coro_init () at /srv/tarantool-dev/third_party/coro/coro.c:110\n. this is backtrace from master, when unexpected command received#0  diag_add_error (diag=0x9e2b80 , e=0x7fffd0001218) at /srv/tarantool-dev/src/diag.h:172\n1  0x0000000000410052 in iproto_decode_msg (msg=0x7fffee008210, pos=0x7fffd5fe4a68, reqend=0x7fffee02006f , stop_input=0x7fffd5fe4a76) at /srv/tarantool-dev/src/box/iproto.cc:713\n2  0x000000000041031c in iproto_enqueue_batch (con=0x7fffee040100, in=0x7fffee040100) at /srv/tarantool-dev/src/box/iproto.cc:749\n3  0x00000000004107c3 in iproto_connection_on_input (loop=0xa725b0, watcher=0x7fffee040888) at /srv/tarantool-dev/src/box/iproto.cc:877\n4  0x000000000068312a in ev_invoke_pending (loop=0xa725b0) at /srv/tarantool-dev/third_party/libev/ev.c:3347\n5  0x0000000000684019 in ev_run (loop=0xa725b0, flags=0) at /srv/tarantool-dev/third_party/libev/ev.c:3750\n6  0x00000000004f76f1 in cord_costart_thread_func (arg=0xa63080) at /srv/tarantool-dev/src/fiber.c:1157\n7  0x00000000004f6a2a in cord_thread_func (p=0x7fffee41f9d0) at /srv/tarantool-dev/src/fiber.c:958\n8  0x00007ffff66c66ba in start_thread (arg=0x7fffd5fff700) at pthread_create.c:333\n9  0x00007ffff54ff3dd in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\n```. unfortunately the problem is still reproduced in build 1.7.6-0-g7b2945d. I confirm. The problem is not reproduced in 1.7.6-6-ge4bcc2ba9. fixed in 1.7.6-9-g4e960f7. ",
    "andrew-statsenko": "Code guarded via box.once()\n```\nlocal function bootstrap()\nlocal space = box.schema.create_space('hashdb', {engine='vinyl'})\nspace:create_index('cloud', {unique = true, parts = {1, 'string'}})\nspace:create_index('sha1',  {unique = true, parts = {2, 'string'}})\nspace:create_index('md5',   {unique = true, parts = {3, 'string'}})\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\n\nend\n-- for first run create a space and add set up grants\nbox.once('hashdb', bootstrap)\n```\nproblem is deeper and @alyapunov knows the details. \nHope, fix will be soon ;-)\n. fixed, please merge into 1.7\n. $ rpm -qi tarantool | grep Version\nVersion     : 1.7.4.372\n. Really need this tool. Thanks !. `$ cat /etc/centos-release\nCentOS Linux release 7.2.1511 (Core)\n$ rpm -qi tarantool | grep Version\nVersion     : 1.7.7.221\n$ rpm -qi libcurl | grep Version\nVersion     : 7.58.0`\n. After upgrade libcurl from 7.29.0 to latest 7.58.0 leak is slow done, but I think it still exist:\ninitial RSS: 33608 => 10^5 HTTPS GET requests => RSS: 34604\nLook's like not critical issue, but if you investigate this issue it will be good.. ",
    "lomik": "Fix for 1.6 required\n. ",
    "ilmarkov": "Tried to run the described case. Mentioned bug was not reproduced.\nScripts. tried with new description of test\nulimit -n\n255\nscripts\nBug was not reproduced.. err    V597 - ignored due to the fact it's used in debug mode.. Closed via https://github.com/tarantool/tarantool/commit/0137219d79d50a269c9ae319b73a157b287b2a8a. @cyanide-burnout  You should specify port in bind function. Otherwise, it will be bound to random port.\nAnother way to solve your problem is get that random port from handle:name()\nhandle:sendto(address, handle:name().port, request). This flaky test wasn't reproduced with the mentioned parameters.. This is caused by system timeout on tcp connection.. Plan:\n\n[x] Add test with error injection\n[x] rename report to feedback\n[x] add guardian fiber\n[x] ensure nothing is stuck when report.tarantool.org is down or not available due to firewall\n[x] Benchmarking the throughput of feedback sender\n[x] Add possibility to generate feedback file.\n[x] Benchmarking the throughput of feedback sender with bigger metrics table . I propose the following schema of cookies array in response object:\nlua\nresponse.cookies['key'] = {value, {opts, ...}}\nWhere value1 are value for specified key. According to RFC 6265, servers should not reply with the same cookie key within one response\nOpts are cookie options, mentioned in corresponding to value Set-Cookie header (HttpOnly, Expires=<date>) left as strings.. Closed by 1a0b0b9. @Mons The approach you propose reduces the abilities of the current box.cfg.\nLua 5.1 does not support __pairs, __ipairs, __next metamethods, so we can't redefine pairs/ipairs operators.\n. Moved to gitlab. Proposed solution:\nfor pre-release: 1.7.7.0.dev-0.\nfor releases: 1.7.7.1-1\nfor release fixes: 1.7.7.X-1, where (X - 1) is number of fix  . We have to validate combinations of parameters' values in box.cfg.\nE.g. it's impossible to have log=\"syslog:...\" and log_format=\"json\" (this issue)\nor it's useless to have log = \"file:...\" and log_nonblock = true(#3072).\n\nThere should be the way to configure that the certain combinations are prohibited.\nI see following ways of implementation:\n\n\nAdd to box_check_config function checking parameters' combination consistency.\nDisadvantage: It is non-configurable. Only adding additional ifs for each combination\n\n\nAdd table of parameters of prohibited combinations of config\nin lua code. Raise an error in case of appearing one the mentioned\npair in box.cfg.\nDisadvantage: Some of cfg parameters (e.g. log) are parsed in C code, so checking\ntheir values in Lua requires either rewriting this parsing in Lua or propagating\nparsing functions to lua.. Closed by 74ab44ae7657989a233abfda05a30fd4738afae6. @kostja Could you specify details of the failure. I can't reproduce it locally. . I can't reproduce it in docker, but as far as I can see from tap test error output and console.test.lua, it looks like failure in tcp connect to unix/ or /console://unix/: sockets. . @kostja Tracking times and vclocks in space _cluster may cause conflicts during replication of this space. Moreover, updates on replica will cause not only applying the updates, but also updates in _cluster table. Why can't we store this information in box.info.replication?\n\n\nAs far as I understand, this issue relates to #3110 and current implementation of that ticket highly relies on box.info.replication.. \n@pgulutzan Tarantool doesn't support granting create, revoke privileges, as specified in documentation.\nMore precisely, these grants have no effect.\nAbout the second issue. Tarantool outputs such error message, when user doesn't have privileges on the object at all. Otherwise, it just ignores.\nFor example,\nlua\nbox.space._priv.index.object:select{'universe'}\n[1, 0, 'universe', 0, 24] -- guest has only usage, session.\nbox.schema.user.revoke(\"guest\", \"write\", \"universe\")\n-- nothing happens\nYes, it looks like a bug, but it's not about inconsistency with output reported in #3417.. @gekpp @alekseyxxx Could you specify the version of libcurl? Does the update to newer versions of libcurl helps with your issue?. @alekseyxxx I reproduced the crash on centos6 with your script. But after update of libcurl to newer version it's not reproduced.\nbash\ncurl 7.60.0 (x86_64-redhat-linux-gnu) libcurl/7.60.0 OpenSSL/1.0.1e zlib/1.2.3 c-ares/1.14.0 libssh2/1.8.0 nghttp2/1.6.0\nRelease-Date: 2018-05-16. _set(def) sets two functions in one call and one run over key_def (in key_def_is_sequential), but each _create(def) has run over key_def. So set is more correct, I guess. . ",
    "YarickR": "Nope, there wasn't one (ulimit -c 0; will provide it when it'll happen next\ntime)\nOn Thu, Nov 24, 2016 at 12:56 PM, Nick Zavaritsky notifications@github.com\nwrote:\n\nCould you please share a core dump?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/1942#issuecomment-262735479,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ASy2LMxwej7VxCnsiM64i8abtoBtL4Svks5rBV9pgaJpZM4K7Ukr\n.\n. It will be great if tarantool could provide some kind of a LSN check between in-memory state and on-disk snapshot, so one could safely assume if he needs to call box.snapshot() to get fresh snapshot.. \n",
    "vtolstov": "Any news ? I'm use 1.7.3.227.g870e8d7-1 and need to start tarantool with empty replication_source, and after add some nodes - restart original server.. thanks, my issue now: #2079 and #723. ",
    "sergw": "Also will be cleaned up:\n- functions\n- globals\n- package.loaded. I'm reproducing it using: TEST_RUN_TESTS=$(for i in $(seq 1 20); do echo -n 'replication/autobootstrap.test.lua '; done) make test\nWhen changing TIMEOUT at autobootstrap.lua a little bit more (for example 0.2 instead of 0.1) then tests passed ok.\nBut after changing TIMEOUT to larger value (example 10) test slow down dramaticlly.\nThis two lines of log has a question:\n[011] 2018-08-22 13:32:24.470 [10448] main/107/applier/cluster@unix/:/tarantoo xrow.c:891 E> ER_LOADING: Instance bootstrap hasn't finished yet\n[011] 2018-08-22 13:32:24.582 [10448] main/107/applier/cluster@unix/:/tarantoo I> failed to authenticate\nwhy replica wants to authenticate until bootstraping master (with creating new user) was not done.. And sometimes polling doesn't work:\n--- vinyl/deferred_delete.result        2018-09-28 17:15:03.695350697 +0300\n+++ ~/build/test/var/032_vinyl/deferred_delete.result        2018-09-28 18:14:27.361790329 +0300\n@@ -150,17 +150,17 @@\n pk:compact()\n ---\n ...\n while pk:stat().disk.compact.count == 0 do fiber.sleep(0.001) end\n ---\n ...\n pk:stat().rows -- 5 new REPLACEs\n ---\n-- 5\n+- 10\n ...\n i1:stat().rows -- 10 old REPLACE + 5 new REPLACEs + 10 deferred DELETEs\n ---\n - 25\n ...\n i2:stat().rows -- ditto\n ---\n - 25. reproduced in 1.10 not in 2.x. This test case appears in 195d4462. @Totktonada @GeorgyKirichenko guys please take a look at my last commit.. https://github.com/packpack/packpack/pull/104\nhttps://github.com/packpack/packpack-docker-images/pull/24. > ```\n\ndiff --git a/src/box/relay.cc b/src/box/relay.cc\nindex 81f2b821c..17d85c6ba 100644\n--- a/src/box/relay.cc\n+++ b/src/box/relay.cc\n@@ -632,7 +632,7 @@ static void\n relay_send(struct relay relay, struct xrow_header packet)\n {\n        struct errinj *inj = errinj(ERRINJ_RELAY_SEND_DELAY, ERRINJ_BOOL);\n-       while (inj->bparam) {\n+       while (inj != NULL && inj->bparam) {\n                fiber_sleep(0.01);\n                inj = errinj(ERRINJ_RELAY_SEND_DELAY, ERRINJ_BOOL);\n        }\n``\nFixed. May be it's a flaky test, but reproduced with this command:python test-run.py $(for i in $(seq 1 24); do echo -n 'replication/ '; done)`\n\nLooks like it also somehow related:\n```\nSegmentation fault\n  code: SEGV_MAPERR\n  addr: (nil)\n  context: 0x7ffa82c9f240\n  siginfo: 0x7ffa82c9f370\n  rax      0x0                0\n  rbx      0x0                0\n  rcx      0xa30              2608\n  rdx      0x7ffa5a880010     140713237413904\n  rsi      0x7ffa5a880010     140713237413904\n  rdi      0x55fc357fc530     94541717685552\n  rsp      0x7ffa82c9f7e0     140713912825824\n  rbp      0x7ffa82c9f7e0     140713912825824\n  r8       0x140700           1312512\n  r9       0x4000000          67108864\n  r10      0x7ffa50000a90     140713060731536\n  r11      0x0                0\n  r12      0x0                0\n  r13      0x0                0\n  r14      0x0                0\n  r15      0x0                0\n  rip      0x55fc33e62ada     94541690841818\n  eflags   0x10206            66054\n  cs       0x33               51\n  gs       0x0                0\n  fs       0x0                0\n  cr2      0x0                0\n  err      0x6                6\n  oldmask  0x0                0\n  trapno   0xe                14\nCurrent time: 1542817559\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed,\nthis may fail as well\n0  0x55fc33cae2fd in print_backtrace+9\n1  0x55fc33ba147d in _ZL12sig_fatal_cbiP9siginfo_tPv+1e7\n2  0x7ffa88d810c0 in __restore_rt+0\n3  0x55fc33e62ada in rlist_add+42\n4  0x55fc33e6408c in slab_put_with_order+303\n5  0x55fc33e640c6 in slab_put+37\n6  0x55fc33e6ea3a in ibuf_destroy+43\n7  0x55fc33df9781 in xlog_cursor_close+7c\n8  0x55fc33c6afba in recovery_delete+69\n9  0x55fc33c7062b in _ZL10relay_stopP5relay+bf\n10 0x55fc33c70975 in _ZZ16relay_final_joinimP6vclockS0_ENKUlvE_clEv+1b\n11 0x55fc33c71edc in _ZN11ScopedGuardIZ16relay_final_joinimP6vclockS1_EUlvE_ED1Ev+24\n12 0x55fc33c70c14 in Z16relay_final_joinimP6vclockS0+28d\n13 0x55fc33c58123 in _Z16box_process_joinP5ev_ioP11xrow_header+69b\n14 0x55fc33ba7446 in _ZL25tx_process_join_subscribeP4cmsg+59\n15 0x55fc33cb0d2b in cmsg_deliver+30\n16 0x55fc33cb1d76 in fiber_pool_f+19d\n17 0x55fc33ba0e64 in ZL16fiber_cxx_invokePFiP13__va_list_tagES0+1e\n18 0x55fc33cab12f in fiber_loop+82\n19 0x55fc33e7e77b in coro_init+4c\n20 (nil) in +4c\n[001] replication/quorum.test.lua                     vinyl\n[001]\n[001] [Instance \"quorum2\" killed by signal: 6 (SIGABRT)]\n. Sometimes we have this issue:\n[010] replication/sync.test.lua                       memtx           [ fail ]\n[010] \n[010] Test failed! Result content mismatch:\n[010] --- replication/sync.result  Thu Dec  6 23:05:48 2018\n[010] +++ sync.reject  Thu Dec  6 23:12:16 2018\n[010] @@ -300,8 +300,7 @@\n[010]  ...\n[010]  test_run:grep_log('replica', 'ER_CFG.*')\n[010]  ---\n[010] -- 'ER_CFG: Incorrect value for option ''replication'': duplicate connection with the\n[010] -  same replica UUID'\n[010] +- null\n[010]  ...\n[010]  test_run:cmd(\"switch default\")\n[010]  ---\n```\nLooks like it need to increase bytes in grep_log. > Maybe replacing grep_log with wait_log will help with the latter error.\nLooks like it works. By using command: python test-run.py $(for i in $(seq 1 500); do echo -n \" replication/sync.test.lua\"; done) not always (sometimes):\n[005] replication/sync.test.lua                       vinyl           [ fail ]\n[005]\n[005] Test failed! Result content mismatch:\n[005] --- replication/sync.result   Tue Dec 11 07:43:20 2018\n[005] +++ sync.reject   Tue Dec 11 08:36:34 2018\n[005] @@ -288,15 +288,15 @@\n[005]  ...\n[005]  box.info.status -- running\n[005]  ---\n[005] -- running\n[005] -...\n[005] -box.info.ro -- false\n[005] ----\n[005] -- false\n[005] +- orphan\n[005] +...\n[005] +box.info.ro -- false\n[005] +---\n[005] +- true\n[005]  ...\n[005]  box.info.replication[1].upstream.status -- follow\n[005]  ---\n[005] -- follow\n[005] +- disconnected\n[005]  ...\n[005]  test_run:wait_log('replica', 'ER_CFG.*', nil, 1000). Version: 1.10.2-89-g671aada\n```\n2019-01-10 11:05:57.277 [31779] main/255/main D> vy_stmt_alloc(format = 26 12, bsize = 139736760975383) = 0x193ab90\n2019-01-10 11:05:57.277 [31779] main/255/main D> tuple_delete(0x195f830)\n2019-01-10 11:05:57.277 [31779] main/255/main D> vy_tuple_delete(0x195f830)\nSegmentation fault\n  code: 128\n  addr: (nil)\n  context: 0x7f1789a6e700\n  siginfo: 0x7f1789a6e830\n  rax      0x5                5\n  rbx      0x7f1789a6ed50     139739070393680\n  rcx      0x34346c846866b536 3761750904704251190\n  rdx      0x7f1789a6fad0     139739070397136\n  rsi      0x0                0\n  rdi      0x7f17d05e4930     139740256815408\n  rsp      0x7f1789a6ecc0     139739070393536\n  rbp      0x7f1789a6eff0     139739070394352\n  r8       0x0                0\n  r9       0x7f17c13f9cd0     139740003146960\n  r10      0x7f17c13febe0     139740003167200\n  r11      0x0                0\n  r12      0x7f1789a6ee40     139739070393920\n  r13      0x7f1789a6ed50     139739070393680\n  r14      0x7f1789a6f000     139739070394368\n  r15      0x0                0\n  rip      0x7f17ccc660b8     139740196528312\n  eflags   0x10246            66118\n  cs       0x33               51\n  gs       0x0                0\n  fs       0x0                0\n  cr2      0x0                0\n  err      0x0                0\n  oldmask  0x4000000          67108864\n  trapno   0xd                13\nCurrent time: 1547107557\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed,\nthis may fail as well\n0  0x512926 in print_backtrace+9\n1  0x40cb14 in _ZL12sig_fatal_cbiP9siginfo_tPv+1cb\n2  0x7f17cce7c5d0 in _L_unlock_13+34\n3  0x7f17ccc660b8 in _Unwind_GetTextRelBase+1bf8\n4  0x7f17ccc66fb9 in _Unwind_Backtrace+69\n5  0x7f17c11f316a in _ZN11ProfileData10FlushTableEv+da\n6  0x7f17c11f396c in _Z24GetStackTraceWithContextPPviiPKv+3c\n7  0x7f17c11f0aa9 in _init+ee1\n8  0x7f17c11f1613 in _ZN14ProfileHandler13SignalHandlerEiP9siginfo_tPv+83\n9  0x7f17cce7c5d0 in _L_unlock_13+34\n10 0x53a1bf in gc_finalize+88\n11 0x53acc0 in gc_onestep+2ca\n12 0x53add2 in lj_gc_step+8e\n13 0x5b9d9e in lj_trace_exit+2e5\n14 0x537837 in lj_vm_exit_handler+e1\n15 0x34346c846866b536 in +e1\nAborted\nSteps to reproduce:\n`./bin/linkbench -c LinkConfigTarantool.properties -r`.\nSegmentation fault\n  code: 128\n  addr: (nil)\n  context: 0x7f175741dbc0\n  siginfo: 0x7f175741dcf0\n  rax      0x5                5\n  rbx      0x7f175741e210     139738224910864\n  rcx      0xffffffffffffff   72057594037927935\n  rdx      0x7f175741fd90     139738224917904\n  rsi      0x0                0\n  rdi      0x7f1765fcd930     139738472044848\n  rsp      0x7f175741e180     139738224910720\n  rbp      0x7f175741e4b0     139738224911536\n  r8       0x0                0\n  r9       0x7f1757b87cd0     139738232683728\n  r10      0x7f1757b8cbe0     139738232703968\n  r11      0x0                0\n  r12      0x7f175741e300     139738224911104\n  r13      0x7f175741e210     139738224910864\n  r14      0x7f175741e4c0     139738224911552\n  r15      0x0                0\n  rip      0x7f176264f0b8     139738411757752\n  eflags   0x10246            66118\n  cs       0x33               51\n  gs       0x0                0\n  fs       0x0                0\n  cr2      0x0                0\n  err      0x0                0\n  oldmask  0x4000000          67108864\n  trapno   0xd                13\nCurrent time: 1547554923\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed,\nthis may fail as well\n0  0x512926 in print_backtrace+9\n1  0x40cb14 in _ZL12sig_fatal_cbiP9siginfo_tPv+1cb\n2  0x7f17628655d0 in _L_unlock_13+34\n3  0x7f176264f0b8 in _Unwind_GetTextRelBase+1bf8\n4  0x7f176264ffb9 in _Unwind_Backtrace+69\n5  0x7f175798116a in _ZN11ProfileData10FlushTableEv+da\n6  0x7f175798196c in _Z24GetStackTraceWithContextPPviiPKv+3c\n7  0x7f175797eaa9 in _init+ee1\n8  0x7f175797f613 in _ZN14ProfileHandler13SignalHandlerEiP9siginfo_tPv+83\n9  0x7f17628655d0 in _L_unlock_13+34\n10 0x7f17616585c0 in __GI___printf_fp_l+4f0\n11 0x7f1761657357 in _IO_vfprintf+4ed7\n12 0x7f1761681f39 in vsnprintf+79\n13 0x7f176165d3c2 in snprintf+82\n14 0x50b59b in say_format_plain+c9\n15 0x50d19b in log_vsay+88\n16 0x50c763 in say_default+cc\n17 0x6227c3 in tuple_delete+51\n18 0x622ac8 in tuple_unref+80\n19 0x62408d in box_tuple_unref+38\n20 0x4e0bb3 in lbox_tuple_gc+2d\n21 0x535c8b in lj_BC_FUNCC+34\n22 0x53a0ef in gc_call_finalizer+21f\n23 0x53a42c in gc_finalize+2f5\n24 0x53acc0 in gc_onestep+2ca\n25 0x53add2 in lj_gc_step+8e\n26 0x5b9d9e in lj_trace_exit+2e5\n27 0x537837 in lj_vm_exit_handler+e1\n28 0xffffffffffffff in +e1\nAborted\n. After loading phase, request fails with error:\nDEBUG 2019-01-16 03:00:45,563 [Thread-0]: getLinkBetween 5121.123456789.0.1544129179776.off=1.lim=10000\nERROR 2019-01-16 03:00:45,563 [Thread-0]: getLinkListrTime failed! org.tarantool.TarantoolException: Failed to dynamically load module '': /tmp/tntTsVHfi/linkbench.so: invalid ELF header\nERROR 2019-01-16 03:00:45,563 [Thread-0]: GET_LINKS_LIST error Failed to dynamically load module '': /tmp/tntTsVHfi/linkbench.so: invalid ELF header\norg.tarantool.TarantoolException: Failed to dynamically load module '': /tmp/tntTsVHfi/linkbench.so: invalid ELF header\n        at org.tarantool.TarantoolClientImpl.serverError(TarantoolClientImpl.java:403)\n        at org.tarantool.TarantoolClientImpl.complete(TarantoolClientImpl.java:416)\n        at org.tarantool.TarantoolClientImpl.readThread(TarantoolClientImpl.java:347)\n        at org.tarantool.TarantoolClientImpl$2.run(TarantoolClientImpl.java:163)\n        at java.lang.Thread.run(Thread.java:748)\nWhen I try do it manual: `linkbench.get_link_list(5121,123456789,0,1544129179776,1,10000)`\nSegmentation fault\n  code: 128\n  addr: (nil)\n  context: 0x7ff06885c000\n  siginfo: 0x7ff06885c130\n  rax      0x5                5\n  rbx      0x7ff06885c650     140670522476112\n  rcx      0xff180441ca6e88   71802525623938696\n  rdx      0x7ff06885d420     140670522479648\n  rsi      0x0                0\n  rdi      0x7ff07726c930     140670767909168\n  rsp      0x7ff06885c5c0     140670522475968\n  rbp      0x7ff06885c8f0     140670522476784\n  r8       0x0                0\n  r9       0x7ff068e26cd0     140670528548048\n  r10      0x7ff068e2bbe0     140670528568288\n  r11      0x0                0\n  r12      0x7ff06885c740     140670522476352\n  r13      0x7ff06885c650     140670522476112\n  r14      0x7ff06885c900     140670522476800\n  r15      0x0                0\n  rip      0x7ff0738ee0b8     140670707622072\n  eflags   0x10246            66118\n  cs       0x33               51\n  gs       0x0                0\n  fs       0x0                0\n  cr2      0x0                0\n  err      0x0                0\n  oldmask  0x4000000          67108864\n  trapno   0xd                13\nCurrent time: 1547597199\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed,\nthis may fail as well\n0  0x512926 in print_backtrace+9\n1  0x40cb14 in _ZL12sig_fatal_cbiP9siginfo_tPv+1cb\n2  0x7ff073b045d0 in _L_unlock_13+34\n3  0x7ff0738ee0b8 in _Unwind_GetTextRelBase+1bf8\n4  0x7ff0738eefb9 in _Unwind_Backtrace+69\n5  0x7ff068c2016a in _ZN11ProfileData10FlushTableEv+da\n6  0x7ff068c2096c in _Z24GetStackTraceWithContextPPviiPKv+3c\n7  0x7ff068c1daa9 in _init+ee1\n8  0x7ff068c1e613 in _ZN14ProfileHandler13SignalHandlerEiP9siginfo_tPv+83\n9  0x7ff073b045d0 in _L_unlock_13+34\n10 0x5417fc in lj_tab_set+17e\n11 0x53a347 in gc_finalize+210\n12 0x53acc0 in gc_onestep+2ca\n13 0x53add2 in lj_gc_step+8e\n14 0x5b9d9e in lj_trace_exit+2e5\n15 0x537837 in lj_vm_exit_handler+e1\n16 0xff180441ca6e88 in +e1\nAborted\n.\naa0ef4ad4ee8bca3ad9d38cb57c7f9ce1b83db9 is the first bad commit\ncommit 6aa0ef4ad4ee8bca3ad9d38cb57c7f9ce1b83db9\nAuthor: Ivan Koptelov ivan.koptelov@tarantool.org\nDate:   Tue Jan 29 17:27:19 2019 +0300\nsql: raise an err on CHECK constraint with ON CONFLICT action\n\nCurrently all on 'conflict' actions are silently\nignored for 'check' constraints. This patch add\nexplicit parse-time error.\n\nCloses #3345\n\n. It fails constantly. After `FIBER_STACK_SIZE_DEFAULT` is increased by 10 it's not reproduced.. Dublicate of #3569. Still reproduce with `FIBER_STACK_SIZE_DEFAULT = 655360` and `--time=54000`. It fails after 2 hours.\n[ 6632s ] thds: 1 tps: 85.96 qps: 1546.24 (r/w/o: 1202.41/343.83/0.00) lat (ms,95%): 24.38 err/s: 0.00 reconn/s: 0.00\n[ 6633s ] thds: 1 tps: 14.00 qps: 253.96 (r/w/o: 197.97/55.99/0.00) lat (ms,95%): 25.28 err/s: 0.00 reconn/s: 0.00\n[ 6634s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s: 0.00 reconn/s: 0.00\n```\n```\n(gdb) bt 20\n0  0x00007f628f28fd10 in ?? () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n1  0x00007f628f29145a in curl_maprintf () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n2  0x00007f628f277849 in ?? () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n3  0x00007f628f2778f7 in ?? () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n4  0x00007f628f277bd1 in ?? () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n5  0x00007f628f29fafa in ?? () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n6  0x00007f628f2a0df5 in ?? () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n7  0x00007f628f2a0f95 in curl_multi_socket_action () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n8  0x000055a211fb0da6 in curl_multi_process (multi=0x55a2125ca540, sockfd=-1, events=0) at /opt/tarantool/src/curl.c:62\n9  0x000055a211fb0f6c in curl_timer_cb (loop=0x55a2123e14e0 , watcher=0x41a5f648, revents=0) at /opt/tarantool/src/curl.c:109\n10 0x000055a211fb10f6 in curl_multi_timer_cb (multi=0x55a2125ca540, timeout_ms=0, envp=0x41a5f5c8) at /opt/tarantool/src/curl.c:142\n11 0x00007f628f29cedc in ?? () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n12 0x00007f628f2a0fb0 in curl_multi_socket_action () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n13 0x000055a211fb0da6 in curl_multi_process (multi=0x55a2125ca540, sockfd=-1, events=0) at /opt/tarantool/src/curl.c:62\n14 0x000055a211fb0f6c in curl_timer_cb (loop=0x55a2123e14e0 , watcher=0x41a5f648, revents=0) at /opt/tarantool/src/curl.c:109\n15 0x000055a211fb10f6 in curl_multi_timer_cb (multi=0x55a2125ca540, timeout_ms=0, envp=0x41a5f5c8) at /opt/tarantool/src/curl.c:142\n16 0x00007f628f29cedc in ?? () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n17 0x00007f628f2a0fb0 in curl_multi_socket_action () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n18 0x000055a211fb0da6 in curl_multi_process (multi=0x55a2125ca540, sockfd=-1, events=0) at /opt/tarantool/src/curl.c:62\n19 0x000055a211fb0f6c in curl_timer_cb (loop=0x55a2123e14e0 , watcher=0x41a5f648, revents=0) at /opt/tarantool/src/curl.c:109\n.\nbox.cfg{\nfeedback_enabled = false\n}\n```\nSolves this problem.. ",
    "AlexMasterov": "@rtsisyk I'm not so lucky. I have a perma-freeze.. @rtsisyk how can I debug this?\ntop\nsh\n  PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND\n 2288  2285 root     D    3222m 159%   0   1% /usr/libexec/gcc/x86_64-alpine-linux-musl/6.2.1/cc1 -quiet -I /tmp/tarantool/src -I /tmp/tarantool/src/lib -I /tmp/tarantool/src/lib/small -I /tmp/tarantool -I /tmp/tarantool/third_party/zstd/lib -I /tmp/tarantool/third_party/zstd/lib/common -I /tmp/tarantool/third_party/luajit/src -I /tmp/tarantool/src/lib/msgpuck -I /tmp/tarantool/third_party -I /tmp/tarantool/src/lib/msgpuck//test -D_REENTRANT -D CORO_ASM -D NDEBUG -D NVALGRIND -D _FILE_OFFSET_BITS=64 -D _GNU_SOURCE -D __STDC_CONSTANT_MACROS=1 -D __STDC_FORMAT_MACROS=1 -D __STDC_LIMIT_MACROS=1 -D NDEBUG /tmp/tarantool/src/lib/msgpuck/test/msgpuck.c -quiet -dumpbase msgpuck.c -msse2 -\n 2285  2284 root     S     1692   0%   0   0% /usr/bin/cc -DCORO_ASM -DNDEBUG -DNVALGRIND -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS=1 -D__STDC_FORMAT_MACROS=1 -D__STDC_LIMIT_MACROS=1 -I/tmp/tarantool/src -I/tmp/tarantool/src/lib -I/tmp/tarantool/src/lib/small -I/tmp/tarantool -I/tmp/tarantool/third_party/zstd/lib -I/tmp/tarantool/third_party/zstd/lib/common -I/tmp/tarantool/third_party/luajit/src -I/tmp/tarantool/src/lib/msgpuck -I/tmp/tarantool/third_party -fexceptions -funwind-tables -fno-common -fopenmp -msse2 -mavx -std=c11 -Wall -Wextra -Wno-strict-aliasing -fno-gnu89-inline -Wno-unused-parameter -Wno-unused -Wno-tautological-compare -O3 -DNDEBUG -I/tmp/tar\n 5491     0 root     S     1540   0%   5   0% sh\n    1     0 root     S     1536   0%   6   0% /bin/sh -c apk add --update --virtual .tarantool-build-dependencies     cmake     curl     g++     gcc\n   git     libressl-dev     make     perl     readline-dev     yaml-dev     zlib-dev   && apk add --virtual .tarantool-runtime-dependencies     libgomp     libstdc++     readline     yaml   && TERMCAP_VERSION=\"1.3.1\"   && TERMCAP_SOURCE=\"https://ftp.gnu.org/pub/gnu/termcap/termcap-${TERMCAP_VERSION}.tar.gz\"   && curl -fSL --connect-timeout 30 ${TERMCAP_SOURCE} | tar xz -C /tmp   && cd /tmp/termcap-${TERMCAP_VERSION}   && ./configure   && make   && make install   && TARANTOOL_GIT=\"https://github.com/tarantool/tarantool.git\"   && TARANT\n 2284  2277 root     S     1532   0%   0   0% /bin/sh -c cd /tmp/tarantool/test/unit && /usr/bin/cc  -DCORO_ASM -DNDEBUG -DNVALGRIND -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS=1 -D__STDC_FORMAT_MACROS=1 -D__STDC_LIMIT_MACROS=1 -I/tmp/tarantool/src -I/tmp/tarantool/src/lib -I/tmp/tarantool/src/lib/small -I/tmp/tarantool -I/tmp/tarantool/third_party/zstd/lib -I/tmp/tarantool/third_party/zstd/lib/common -I/tmp/tarantool/third_party/luajit/src -I/tmp/tarantool/src/lib/msgpuck -I/tmp/tarantool/third_party  -fexceptions -funwind-tables -fno-common -fopenmp -msse2 -mavx -std=c11 -Wall -Wextra -Wno-strict-aliasing -fno-gnu89-inline -Wno-unused-parameter -Wno-unused -Wno-\n 5502  5491 root     R     1532   0%   7   0% top -b\n 1704  1701 root     S     1496   0%   2   0% make -f CMakeFiles/Makefile2 all\n 1701     1 root     S     1216   0%   0   0% make -j 8\n 2277  1704 root     S     1112   0%   6   0% make -f test/unit/CMakeFiles/msgpack.test.dir/build.make test/unit/CMakeFiles/msgpack.test.dir/build\nsh\n[100%] Built target tarantool\ncc: internal compiler error: Killed (program cc1)\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee <http://gcc.gnu.org/bugs.html> for instructions.\nmake[2]: *** [test/unit/CMakeFiles/msgpack.test.dir/build.make:63: test/unit/CMakeFiles/msgpack.test.dir/__/__/src/lib/msgpuck/test/msgpuck.c.o] Error 4\nmake[1]: *** [CMakeFiles/Makefile2:2560: test/unit/CMakeFiles/msgpack.test.dir/all] Error 2\nmake: *** [Makefile:150: all] Error 2. @rtsisyk The problem was solved. Thanks!. ",
    "hishamhm": "It's a matter of having your own tarantool manifest in luarocks.org, and confoguring your luarocks client so that the tarantool manifest takes precedence over the root one. not in the tarantool manifest, right?. Since it's not a fork, it would be really nice (and less confusing for your users) if you didn't rename it completely. A name like luarocks-tarantool or tarantool-luarocks (tab-completion for the win :) ) would make it clearer for users what is it that they're using. After all, they will have to go to the LuaRocks documentation to read about writing rockspecs, etc.\nUsers seeing tarantoolpm will think that this is a further fragmentation of the package manager ecosystem, just like recently happened with OpenResty's opm. :-(\nAlso, I'm not sure if there are significant advantages in stripping the main script down. You'll have greater documentation overhead and users will lose useful features (like luarocks doc and luarocks show). If you say \"it's just vanilla luarocks configured to use the tarantool paths\" you'll be able to point users to the LuaRocks documentation as-is. I would really just use a wrapper with a custom config. It will make maintenance and packaging easier for you. No worries to keep the code in sync: note that the modules used by the main luarocks script are not a public API.\n\nInstall tarantool-version.rockspec stub into /var/lib/tarantoolpm/ to allow \"dependencies { tarantool = \"1.7.4\" }\n\nThis is not necessary. You can enter rocks_provided = { tarantool = \"1.7.4\" } in the config file and it will behave as such. :)\nBut overall, I think the idea of shipping an instance of LuaRocks configured for the tarantool specificities is in the right direction! \ud83d\udc4d . @rtsisyk Ah, that sounds like a very interesting approach! I like it! (And kudos for using the name rock as a pointer to LuaRocks. This could become a pattern for LuaRocks-embedded-in-applications in the future.)\nNote that we don't really provide a stable API for LuaRocks internals other than the command-line, so bundling an internal copy of LuaRocks and launching it via os.execute is the safest bet, while we don't have a library API. We do want to have a library API eventually, but running luarocks command is not a performance-critical operation anyway, so the os.execute approach should be enough at least as a first approach. If you do decide to plug into LuaRocks internals directly, well, you're free to do so of course, but since we don't have a public API I thought it would be responsible of me to say so. :). ",
    "dmitry-sobolev": "In release notes of Tarantool 1.7.3 has been written that vinyl disk layout was changed, so I didn't try to run it with my data. Do it run with old vinyl data files?. It seems like this issue was solved in latest versions of tarantool, so I'm closing it.. ",
    "crackerplace": "Thanks.Yes,I was able to get it work with 1.7.. @rtsisyk Thanks.If I have to even get an index:max() ,how can I do it from a connector end.I meant what should be the user command code for it(like insert= 0x02) at a binary protocol level.Or is this function only available in the tarantool server itself.\nI was trying to see if autoincrement in some form can be done with lua-resty-tarantool or if it has to be implemented.. ",
    "SivaDotRender": "I am getting the same error with clang 3.9\n$ which clang\n/home/clang/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-14.04/bin/clang\n$ clang --version\nclang version 3.9.0 (tags/RELEASE_390/final)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /home/clang/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-14.04/bin\n. @bigbes you are correct. That solved my issue.. ",
    "amdei": "@rtsisyk Thanks for fedback!\nIndeed, I overlooked vlock->map member and its purpose.\nChanged VCLOCK_MAX down to 64.\nPrimary reason is absence of safe analogue of __builtin_popcount for 128-bit integers (for vclock_size() implementation).\nLooking at the code I do not understand how my test with 99 replicas works. It looks for me that it shouldn't. Will double-check.\nThus:\n\nFixed. Does it looks any better?\nSize of struct vclock now is 544 bytes (without alignment), and there are no arrays of vclock allocations.\n\nAs I understand my changes would break compatibility with existing XLOG files.\nIs it a real issue for existing users?. > Shall we implement our own luaossl or it is better to abandon our crypto module and go with luaossl instead?\nHow do you see future of a crypto module? Now its looks like a light-weigth and easy-to-use implementation of basic things (well, except HMACs :-) ), provided out-of-the-box.\nFor me, as a tarantool user, it is better to have it, instead of using some other heavy monster. Which should be installed and maintained separately, what increase roll-out and maintenance cost.\nThus, as tarantool user, I would stay with simplest possible build-in crypto module. It should implement algorithms, not protocols. It has symmetric ciphers, hashes and hmacs. I could not think what else could be added there.\nFor advanced usage, users could go with luaossl or whatever they prefer.. Seems that dependency from libbfd can be eliminating at configure-time with:\ncmake . -DENABLE_BACKTRACE=OFF. Bugreport for related issue in cdbs package in Debian:\n\nhttps://bugs.debian.org/cgi-bin/bugreport.cgi?bug=864489. > Have you tried \"systemctl enable tarantool@INSTANCE\"?\nI tried systemctl enable tarantool. (Without instance name)\nAfter this command tarantool do start on system boot on Debain 9.\nBut the issue is about tarantool-common package build process itself.\ndh_systemd_enable called BEFORE dh_install, which installs file(s) (tarantool.service), required for dh_systemd_enable.\nIssue appeared only in cdbs comming with Debian 9.\nQuick workaround is simple:\nCopy tarantool/extra/dist/tarantool.service to tarantool/debian folder before package build starts.\n. Isn't it the same as #2513?. Well, after reading first comment again I think the issue is different - in case of #2513 tarantool even not attempt to start, as service is not enabled when package build.\nBut in this case - there is something in the logs, at least.. More logs:\n\n2017-07-07 19:07:25.325 [752] main/101/tarantoolctl C> log level 6\n2017-07-07 19:07:25.325 [752] main/101/tarantoolctl I> mapping 268435456 bytes for tuple arena...\n2017-07-07 19:07:25.326 [752] main/101/tarantoolctl evio.cc:339 !> SystemError can't resolve uri for bind, called on fd -1: Success\n2017-07-07 19:07:25.326 [752] main/101/tarantoolctl F> can't initialize storage: can't resolve uri for bind, called on fd -1\n. I changed in\n\n/lib/systemd/system/tarantool@.service\n\nfrom\nAfter=network.target\n\nto\nAfter=network-online.target\n\nbut it does not help. :(. Looks like easiest way to reproduce these issue is:\n\nConfigure host machine to get address from DHCP\nConfigure network interface with allow-hotplug option (default on Debian), so the corresponding /etc/network/interfaces would look like this:\n\n\nallow-hotplug ens33\niface ens33 inet dhcp\n\nIn this case networking.service will not know when this hotplug will happens, and return control immediately. So, trantool starts before DHCP obtains address.\nTo overcome the issue it is enough to configure interface with auto option.\nAlthough this is a way to reproduce the issue, it is clear miconfiguration - no one in reality will configure server to get address with DHCP and specify specific IP in listen address.\nHowever the same issue holds true for DNS name in listen address - in will not be resolved during tarantool startup in described scenario.\nMay be it is worth to mention proper interface configuration in documentation with warning about allow-hotplug option?. Also, it would be wonderful if local clients were able to connect using unix-socket, while replication works over TCP.. ",
    "monoflash": "I don't use brew, I use port. (brew is not convenient and creates a lot of debris, is difficult to clean os.)\nThis in not a server, this in workstation.\nOS is macOS Sierra 10.12.3 (16D30a)\nAbove I wrote a result of the command uname -a\nWhich the package/program/libs is not enough?. I forgot to say. This is the result of the build from source.\nCommands in order of execution:\ngit clone https://github.com/tarantool/tarantool.git .\ngit submodule init\ngit submodule update --init --recursive\ncmake .\nmake\n. It did not resolve problem, I see the same error. I don't know where to look this log.\nI do not program in C/C++ and I don't know cmake.\nThat's why I wrote the above, if be you have done together with the release version of binaries version, it's be to convenient, download binary file and not to suffer with the compilation from source.. ",
    "TheAviat0r": "Roger that. @pgulutzan , can you reproduce it on latest 1.8? I executed with column_count = 1900 and everything was ok, table was successfully created.\n```\nbox.sql.execute([[drop table t1]])\ncreate_statement = 'CREATE TABLE t1 ('\nfor i = 1,column_count do\nif i > 1 then create_statement = create_statement .. ',' end\ncreate_statement = create_statement .. 's' .. i .. ' INT'\nif i == 1 then create_statement = create_statement .. ' PRIMARY KEY' end\nend\ncreate_statement = create_statement .. ')'\nbox.sql.execute(create_statement)\n```. Unable to fix functional indexes now, because hidden fields in Tarantool are not implemented. Team came to agreement to move that issue to 1.8.3 release.. https://github.com/tarantool/tarantool/commit/18789d6d66259e1471ac0888123abf7b20da116f. Not actual anymore. Same as #2786, fixed now. @kostja the purpose is to save default SQLite behavior, where user is not able to create trigger on meta-data tables beginning with 'sqlite_' prefix. . Sometimes you catch an assertion fault with 3 analyzes, but sometimes not like in my case. But if you increase ANALYZEs amount from 3 to 100, assertion fault is guaranteed. Code below.\n```\n-- 2957-reproduce.lua\nbox.cfg{}\nbox.sql.execute(\"create table t1(a primary key, b, c, foreign key(b) references t2(id), foreign key(c) references t3(id)) without rowid;\")\nbox.sql.execute(\"create table t2(id primary key);\")\nbox.sql.execute(\"create table t3(id primary key);\")\nbox.sql.execute(\"insert into t2 values(1);\")\nbox.sql.execute(\"insert into t3 values(2);\")\nbox.sql.execute(\"insert into t1 values(1, 1, 2);\")\nbox.sql.execute(\"pragma vdbe_debug=1;\")\nfor i = 1,100 do\n        box.sql.execute(\"analyze;\")\nend\nrequire('console').start()\n```\nAssertion failed: (pMem->enc < 5), function sqlite3VdbeMemPrettyPrint,\nfile /Users/b.niatshin/tarantool/src/box/sql/vdbe.c, line 465.. There are two possible solutions:\nNo. 1:\nDo not do SQLite-style REPLACE logic for unique keys.\nDo it only for primary keys, as in Tarantool/NoSQL.\nTherefore ON CONFLICT REPLACE is only legal for one\nkey in the table (the primary key), and the problem\nof multiple ON CONFLICT REPLACE actions disappears.\nNo. 2\nCheck the ON CONFLICT REPLACE constraint, and if\nit says \"violation\" then DELETE with DELETE rules.\nDo the insert's BEFORE triggers.\nDo all constraint checks for unique, check, and foreign-key,\nincluding the ones that have ON CONFLICT REPLACE clauses, but this\ntime the result of conflict is always an error.\nDo the statement action itself (update|insert|delete).\nDo all AFTER triggers.\nThe problem with 2nd approach is that the order of execution also involves execution of Tarantool triggers, which happens after checking all constraints.\nSo we need to decide which approach we should take into account.. Blocked by #3293 . Now in SQL NOT NULL constraint is checked by bytecode. If we remove it and rely on Tarantool, it won't work. Example:\n```\ntarantool> create table t1(a int primary key, b NOT NULL);\ntarantool> insert into t1 values (1, 1);\ntarantool> insert into t1 values (2, NULL);\n\n...\ntarantool> SELECT * FROM t1;\n\n\n\n\n[1, 1]\n\n\n[2, null]\n```. Key problem is that we have syntax error and fallback error.\n\nFallback is when you use keyword in not appropriate place, for example you can execute next statement:\nCREATE TABLE ABORT(a int primary key);\nWe have \"ABORT\" keyword with token type TK_ABORT, we have fallback rule in parse.y which says to fallback TK_ABORT to TK_ID (identifier token type), therefore error doesn't happen. If you try something else without fallback rule, you will get an error.\nKey of the problem is that parser doesn't separate fallback errors and syntax errors, handling of that situation now is being done in the same parser state. If both happens and last processed keyword is reserved, we will see message 'keyword \"KEYWORD\" is reserved\" like in the example above, not 'syntax error ... '. \nWe need to implement %fallback_error clause for lemon and to distinct fallback error and syntax error and to make syntax error priority higher.\n. After discussion with @kyukhin we came to decision that 'not optimal execution analyze plan' is temporarily okay for us.. Patch is in 2.0, so that ticket should be closed.. First thing to do in order to accomplish that ticket is OP_OpenWrite removal, because Tarantool doesn't require opened cursor for executing write operation. The only necessary information is\nspace_id (for usual spaces) or struct space (for ephemeral spaces), pointer to tuple and tuple length.\nHowever, OP_OpenRead and OP_OpenWrite implementations are absolutely the same right now, for both READ and WRITE operations VDBE creates new cursor.\nThe main problem is that we have to overcome is dependence of OP_IdxInsert from OP_OpenWrite.\nThat problem consists of several components:\n1) OpenWrite extracts necessary information about space and fills it into pKeyInfo field inside cursor, assigns BTCF_TaCursor flag. But the only thing we need to know about index is the amount of fields inside.\n2) pKeyInfo will be used later during execution of IdxInsert. First of all, it is necessary to determine in which type of space we are inserting - usual or ephemeral (different API calls will be done). It is done by checking cursor flag.\n     Usual spaces have space_id attribute, so for them it is not necessary to have related cursor\n     in order to accomplish box_insert/box_replace operation, only space_id, tuple and tuple length.\n     However, ephemeral spaces doesn't have space_id attribute, you need to know pointer to\n     ephemeral space. And that pointer is stored inside ta_cursor structure, which is a part of VDBE\n    cursor.\n3) During query compilation we doesn't know in which type of space we are inserting - usual or ephemeral. Right know we are able to determine it only in real-time by checking cursor flags.\nWe need to get rid of cursors in IdxInsert for usual spaces and to open cursors only for ephemeral ones.\nPossible solution is to pass into p4 register (which a union, not an int register) a pointer to structure, which will contain space_id and struct space *. We may somehow know that information during compile time (I don't know how, need to ask @Korablev77 about that). That will allow us to separate ephemeral spaces from a usual ones. If space is usual, then that struct will have assigned space_id, if ephemeral - then pointer to struct space.\nAnyway, this is a non-trivial ticket which totally deserves team discussion.\n. ",
    "iproha94": "similarly #2177. similarly #2177 . INSERT OR REPLACE statement is working.\nREPLACE works like INSERT OR REPLACE, but that's beside the point.. WITH clause is working withing SELECT statement. See documentation common-table-expressions . SQLite also give error no such table: te44\nMySQL8 also give error ERROR 1288 (HY000): The target table te44 of the UPDATE is not updatable \nThe query \nWITH te44 AS (SELECT * FROM te43) UPDATE te44 SET s2 = s2 + 10;\nshould not work as it is not logical to update the temporary table te44.\nThere is an example of work WITH ... UPDATE\n```\nCREATE TABLE te43 (s1 INT PRIMARY KEY, s2 INT);\nINSERT INTO te43 VALUES (1, 1);\nINSERT INTO te43 VALUES (2, 2);\nCREATE TABLE  test1 (a  INT PRIMARY KEY, b INT);\nINSERT INTO test1 VALUES(1, 10);\nINSERT INTO test1 VALUES(2, 20);\nWITH te44 AS (SELECT s1 FROM te43) UPDATE test1 SET b = 100 WHERE a IN (SELECT * FROM te44);\n. I have segmentation fault sqlite3StatusDown: Assertion `N >= 0' failed.when executing box.sql.execute(\"ALTER TABLE te8 ADD COLUMN s2 INT;\") ```. reproduction bug\nbash:\n$ tarantool start-server.lua\n$ tarantool start-thread.lua & tarantool start-thread.lua &\nstart-server.lua\n```\nbox.cfg{}\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\nbox.sql.execute(\"DROP TABLE IF EXISTS sbtest1\")\nbox.sql.execute(\"CREATE TABLE sbtest1(id INTEGER, k INTEGER DEFAULT '0' NOT NULL, c CHAR(120) DEFAULT '' NOT NULL,  pad CHAR(60) DEFAULT '' NOT NULL, PRIMARY KEY (id))\")\nfor i=1,2000,1 do box.sql.execute(\"INSERT INTO sbtest1(id, k, c, pad) VALUES(\".. i ..\", \".. i ..\", 'blabla', 'bloblo')\") end\nbox.sql.execute(\"CREATE INDEX k_1 ON sbtest1(k)\")\nbox.cfg{listen=3301}\n```\nstart-thread.lua\n```\nremote = require('net.box')\ncn = remote.connect(3301)\nfor i=1, 1100 ,1 do cn:execute(\"UPDATE sbtest1 SET c='lalala' WHERE id=\"..i..\"\") end\n```\n. TK_VARIABLE - important token. It is necessary to bind the variables in the preparation of statements. I deleted code for tcl, which allows you to make variable name with double colon and brackets. Examples: :v::ar or :v(ar)\nSee commit sql: remove tcl legacy code in  branch iproha94/gh-2828-tcl-legacy. \u2022 research tpch-documentation ref\n\u2022 studied percona tpch implementation (python, mysql) ref\n\u2022 studied noname tpch implementation (shell, php, postgresql) ref \nConclusion: there is no simple way to implement tpch for tarantool. ## MySQL \nUser variables are written as @var_name, where the variable name var_name consists of alphanumeric characters, ., _, and $. A user variable name can contain other characters if you quote it as a string or identifier (for example, @'my-var', @\"my-var\", or @my-var).\nref1\nref2\nExample:\nPREPARE stmt1 FROM 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nSET @a = 3;\nSET @b = 4;\nEXECUTE stmt1 USING @a, @b;\nSET @col = \"c1\";\nSELECT @col FROM t;\nPostgreSQL\nWhen creating the prepared statement, refer to parameters by position, using $1, $2, etc. \nref\nExample:\nPREPARE fooplan (int, text, bool, numeric) AS\n    INSERT INTO foo VALUES($1, $2, $3, $4);\nEXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);\nOracle\nYou can use placeholders for input variables in any DELETE, INSERT, SELECT, or UPDATE statement, or PL/SQL block, in any position in the statement where you can use an expression or a literal value.\nref\nFor example, given the INSERT statement\nINSERT INTO emp VALUES\n    (:empno, :ename, :job, :sal, :deptno)\nand the following variable declarations\ntext     *ename, *job;\nsword    empno, sal, deptno;\nMS Server\nref\nCREATE PROCEDURE test @title_id int = 1, @quote char(30) AS <blah>\nIn this procedure, the first parameter, @title_id, has a default value of 1. An application can use the following code to invoke this procedure such that it specifies only one dynamic parameter. This parameter is a named parameter with the name \"@quote\".\n```\n// Prepare the procedure invocation statement.\nSQLPrepare(hstmt, \"{call test(?)}\", SQL_NTS);  \n// Populate record 1 of ipd.\nSQLBindParameter(hstmt, 1, SQL_PARAM_INPUT, SQL_C_CHAR, SQL_CHAR,\n                  30, 0, szQuote, 0, &cbValue);  \n// Get ipd handle and set the SQL_DESC_NAMED and SQL_DESC_UNNAMED fields\n// for record #1.\nSQLGetStmtAttr(hstmt, SQL_ATTR_IMP_PARAM_DESC, &hIpd, 0, 0);\nSQLSetDescField(hIpd, 1, SQL_DESC_NAME, \"@quote\", SQL_NTS);  \n// Assuming that szQuote has been appropriately initialized,\n// execute.\nSQLExecute(hstmt);\n```. ",
    "Korablev77": "I think it is a duplicate of #3195. @kyukhin should we close this?. @Gerold103 \n\nCheck why the functions are not working. Fix if easy, remove otherwise.\n\nSo the commit contains fix I guess. Actually, they worked before, but on rollback commit they didn't revert counter to its previous value.\nAnyway, this issue should be substituted with #3764.. Well, it seems that now it works fine:\n```\ntarantool> select length(zeroblob(6666))\n\n\n\n\n[6666]\n...\ntarantool> select zeroblob(111)\n\n\n\n\n\n\n\n[\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"]\n``\n. Currently, truncating can occur when executing simpleDELETE * FROM table;. To be more precise, if we need to \u0441lear whole table and there is no active transaction (since truncating acts as insertion into_truncate and can be interpreted as DDL), then truncate is used.\nWe have decided to add separate SQL statement for that:TRUNCATE TABLE table;` and prohibit such optimisation from traditional table clearing (i.e. simple deletion row by row).. There is no INSERT OT UPDATE in SQLite, but INSERT OR REPLACE statement uses vdbe opcode OP_IdxInsert, which in its turn calls box_replace(). Hence, I think it is confirmed and can be closed. . We have no more rowid since b61ee32eff9c216e13c1819c483dedc22be9db3c. Yet, it still may accept integer literals passed as strings:\n\n\n\ndb2 => create table t6(a int primary key not null)\nDB20000I  The SQL command completed successfully.\ndb2 => insert into t6 values('1')\nDB20000I  The SQL command completed successfully.\nOther DBs demonstrate the same behaviour.. Can't reproduce anymore on current 2.0 (even without patches on strict typing):\n``\nTarantool 2.0.4-946-gef322002b\ntype 'help' for interactive help\ntarantool> box.cfg{}\n2018-09-17 15:08:37.787 [4039] main/101/interactive C> Tarantool 2.0.4-946-gef322002b\n2018-09-17 15:08:37.788 [4039] main/101/interactive C> log level 5\n2018-09-17 15:08:37.791 [4039] main/101/interactive I> mapping 268435456 bytes for memtx tuple arena...\n2018-09-17 15:08:37.792 [4039] main/101/interactive I> mapping 134217728 bytes for vinyl tuple arena...\n2018-09-17 15:08:37.806 [4039] main/101/interactive I> recovery start\n2018-09-17 15:08:37.806 [4039] main/101/interactive I> recovering from./00000000000000000000.snap'\n2018-09-17 15:08:37.850 [4039] main/101/interactive I> ready to accept requests\n2018-09-17 15:08:37.852 [4039] main/107/checkpoint_daemon I> started\n2018-09-17 15:08:37.852 [4039] main/107/checkpoint_daemon I> scheduled the next snapshot at Mon Sep 17 16:52:53 2018\n\n...\ntarantool> \\set language sql\n\ntrue\n...\n\ntarantool> create table t1(id int primary key)\n...\ntarantool> insert into t1 values('xxx')\n\nerror: datatype mismatch\n...\n\n. Now we've introduced strict types and strings and numbers are compatible only if string literal is really number like '34'. So we can do things like:\nCREATE TABLE t (id INT PRIMARY KEY);\nINSERT INTO t VALUES ('123');\nSELECT * FROM t WHERE t 1 < '124';\n```\nMost DBs also allow to do such things, so we decided to follow their way. If we get many complaints from users, I guess this behaviour can be changed/updated.. I moved this bug to separate issue: https://github.com/tarantool/tarantool/issues/3695. @pgulutzan \nCurrently we are working on static types. I've checked your list and that is what we have now:\n\nIt is mandatory to state a data type.\nTherefore this becomes illegal:\nCREATE TABLE t (s1 PRIMARY KEY);\nIt is mandatory to state a data type by its\nname or by its synonym. The current method\nallows for stating any string at all, with\nrules about what substrings can be searched.\nTherefore this becomes illegal:\nCREATE TABLE t (s1 xcharx PRIMARY KEY);\nThe stated data type is a statement of a\nrequirement not an option.\nTherefore affinity rules do not exist.\n\nIt is done (but still not hit the trunk - it is on the branch). Now every column must feature type.\n\nCHAR (synonyms CHARACTER),\nVARCHAR (synonyms CHAR VARYING, CHARACTER VARYING),\nSMALLINT,\nINT (synonyms INTEGER),\nFLOAT,\nREAL,\nDOUBLE PRECISION (non-standard synonym DOUBLE),\nNUMERIC,\nDECIMAL (synonym DEC),\nDATE,\nTIME,\nTIMESTAMP.\n\nAlmost all of these types are supported by syntax, but they are mapped onto poor set of available types in Tarantool (in fact, only integer, number, string and scalar for blob).\nIssues below are aimed at extending this set:\nIntroduce SMALLINT and BIGINT types: https://github.com/tarantool/tarantool/issues/3687\nIntroduce scale and precision for numeric types: https://github.com/tarantool/tarantool/issues/3672\nIntroduce string type with fixed length: https://github.com/tarantool/tarantool/issues/3665\nIntroduce BOOLEAN type: https://github.com/tarantool/tarantool/issues/3648\nIntroduce DATETIME type: https://github.com/tarantool/tarantool/issues/3694\n\nIt is illegal to assign or compare\nvalues of incompatible data types.\nThere are no automatic incompatible-to-compatible\nconversions.\nRanges of values and lengths are limited by their\ndefinitions and those limits are to be enforced.\nTherefore these become illegal:\nUPDATE t SET integer_column = 'x';\nUPDATE t SET character_column_with_length_4 = 'ABCDE';\nUPDATE t SET smallint_column = 999999;\n\nFirst example now results in error:\n```\ntarantool> create table t2(id int primary key, a int, b char(10))\n\n...\ntarantool> insert into t2 values(1, 1, 'abc')\n...\ntarantool> update t2 set id = 'x'\n\nerror: Can't convert x to INTEGER\n...\n\n``\nOther two examples are related to issues mentioned above (so obviously now they don't raise an error). Note that query likeupdate t2 set id = '3'` will be successfully executed (in all DBs which I checked it is also legal: integer literal in quotes is converted to simple integer).\nThe rest of notes are irrelevant now, since they are related to not yet implemented types.\nYou can check branch with static types (it may be still raw): np/sql-static-types. Examples from original issue are invalid now, so I guess we can close this ticket.. I suggest to delay this ticket or close it at all. Explanation: now it makes no sense to rework order of FK verification and triggers processing, since we are going to (re-)implement FK constraints and SQL triggers as native on_replace Tarantool triggers. So, fixing this issue now may lead to a lot of unnecessary code which will be removed/substituted later.\n@kyukhin are you ok with my suggestion?. No, it's not. Can't find issue, it is unlikely to be created yet. But this one is about order of executing FK constraints and SQL triggers, not about their re-implementation.. Ok, I won't argue. Could you then move this ticket to the next milestone?. In SQL update consists from DELETE + INSERT, so I don't think that it is really problem.. This ticket is not relevant anymore: both queries result in \"datatype mismatch\":\n```\ntarantool> select * from t limit 'hello world';\n\n\nerror: datatype mismatch\n...\n\ntarantool> select * from t limit 1.5;\n\nerror: datatype mismatch\n...\n```. Currently, aliases of user functions don't work in the proper way and it is a problem of SQLite. In this respect, part of tests from alias.test can't be converted now.\n\nDetailed discussion of the problem:\n1. http://sqlite.1065341.n5.nabble.com/Common-subexpression-optimization-of-deterministic-functions-td97531.html\n2. http://sqlite.1065341.n5.nabble.com/User-function-s-alias-td98465.html. SQLite originally doesn't provide such optimization on WITHOUT ROWID tables. It is confirmed by Richard Hipp: http://sqlite.1065341.n5.nabble.com/Automatic-indexes-don-t-work-on-without-rowid-tables-td98428.html. \nCurrently, this feature is not in the main timeline of SQLite and seems to have low priority status. We should consider, do we really need this optimization and is it worth to implement it?. Since we have completely got rid of rowid tables (include ephemeral ones), autoindex optimization is turned off. In fact, autoindex is just an ephemeral table which is used for temporary sorting or fast retrieval. Need to investigate whether current ephemeral tables are capable of being used as such facility or not.. Related to #3016 . After completing DD integration, it makes no sense to hold string of 'CREATE TABLE ...' or 'CREATE INDEX ...' statement. Previously, it was used to restore initial format (i.e. column names, types etc) and add meta-data to internal DD. The only exception is VIEW, since it is parsed each time VIEW is involved to create AST of SELECT.. This is not relevant (and never was): you can drop table only if it isn't referenced by other tables. In SQLite it was possible to drop table if deleted rows don't violate FK constraints. So, program which you demonstrate just checks that.. Closed via https://github.com/tarantool/tarantool/commit/988dbb3775e2b4c63cfd6f02c61a4b89bfdca077. It seems that the problem is in flag in sqlite3WhereExplainOneScan() function. \nisSearch = (flags & (WHERE_BTM_LIMIT | WHERE_TOP_LIMIT)) != 0\n            || (pLoop->nEq > 0)\n            || (wctrlFlags & (WHERE_ORDERBY_MIN | WHERE_ORDERBY_MAX));\nThe query contains max aggregate function, so wctrglFlags & WHERE_ORDERBY_MAX != 0.. I guess, this ticket is related to #3119: \"Remove code under OMIT_AUTHORIZED ifndef\"\n@kyukhin should we close this as a duplicate?. Listing for INSERT INTO b1 VALUES (NULL);:\nVDBE Program Listing:\n 101>    0 Init             0   18    0               00 Start at 18\n 101>    1 OpenWrite        1 530432    0 k(1,)         00 root=530432 iDb=0; sqlite_autoindex_B1_1\n 101>    2 Null             0    6    0               00 r[6]=NULL\n 101>    3 Copy             6    7    0               00 r[7]=r[6]\n 101>    4 Affinity         6    1    0 D             00 affinity(r[6])\n 101>    5 Program          3   17    8 program       00 Call: B1_1.default\n 101>    6 Null             0    1    0               00 r[1]=NULL\n 101>    7 FCopy            7    2    3               00 reg[2@cur_frame]= reg[7@root_frame(O0LAG_SAME_FRAME)]\n 101>    8 Affinity         2    1    0 D             00 affinity(r[2])\n 101>    9 SCopy            2    4    0               00 r[4]=r[2]; S1\n 101>   10 IsNull           2   12    0               00 if r[2]==NULL goto 12\n 101>   11 MustBeInt        2    0    0               00\n 101>   12 MakeRecord       2    1    3               00 r[3]=mkrec(r[2]); for sqlite_autoindex_B1_1\n 101>   13 IsNull           2   16    0               00 if r[2]==NULL goto 16\n 101>   14 NoConflict       1   16    4 1             00 key=r[4]\n 101>   15 Halt          1555    2    0 B1.S1         02\n 101>   16 IdxInsert        1    3    4 1             11 key=r[3]\n 101>   17 Halt             0    0    0               00\n 101>   18 Transaction      0    1    3 0             00\n 101>   19 TTransaction     0    0    0               01 usesStmtJournal=1\n 101>   20 Goto             0    1    0               00\nTrace:\n101>    0 Init             0   18    0               00 Start at 18\nSQL-trace: INSERT INTO b1 VALUES (NULL);\n 101>   18 Transaction      0    1    3 0             00\n 101>   19 TTransaction     0    0    0               01 usesStmtJournal=1\n 101>   20 Goto             0    1    0               00\n 101>    1 OpenWrite        1 530432    0 k(1,)         00 root=530432 iDb=0; sqlite_autoindex_B1_1\n 101>    2 Null             0    6    0               00 r[6]=NULL\nREG[6] =  NULL\n 101>    3 Copy             6    7    0               00 r[7]=r[6]\nREG[7] =  NULL\n 101>    4 Affinity         6    1    0 D             00 affinity(r[6])\n 101>    5 Program          3   17    8 program       00 Call: B1_1.default\n 101>    0 Init             0    1    0 -- TRIGGER B1_1 00 Start at 1; Start: B1_1.default (BEFORE INSERT ON B1)\nSQL-trace: -- TRIGGER B1_1\n 101>    1 OpenWrite        1 531456    0 k(1,)         00 root=531456 iDb=0; sqlite_autoindex_B2_1\n 101>    2 Null             0    1    0               00 r[1]=NULL\nREG[1] =  NULL\n 101>    3 Integer          1    2    0               00 r[2]=1\nREG[2] =  i:1\n 101>    4 HaltIfNull    1299    2    2 B2.S1         01 if r[2]=null halt\nREG[2] =  i:1\n 101>    5 Affinity         2    1    0 D             00 affinity(r[2])\n 101>    6 SCopy            2    4    0               00 r[4]=r[2]; S1\nREG[4] =  i:1\n 101>    7 MustBeInt        2    0    0               00\nREG[2] =  i:1\n 101>    8 MakeRecord       2    1    3               00 r[3]=mkrec(r[2]); for sqlite_autoindex_B2_1\nREG[3] =  s2[9101..](8)\n 101>    9 NoConflict       1   11    4 1             00 key=r[4]\nREG[4] =  i:1\n 101>   11 IdxInsert        1    3    4 1             11 key=r[3]\nREG[3] =  s2[9101..](8)\n 101>   12 ResetCount       0    0    0               00\n 101>   13 Halt             0    0    0               00 End: B1_1.default\n 101>    6 Null             0    1    0               00 r[1]=NULL\nREG[1] =  NULL\n 101>    7 FCopy            7    2    3               00 reg[2@cur_frame]= reg[7@root_frame(O0LAG_SAME_FRAME)]. The order of action in case of DROP TABLE statement in original SQLite:\n1. Begin transaction\n2. Remove statistics from sql_stat1 and sql_stat4, if any exists\n3. Delete all rows from table and for each row which violates FK constraint emit OP_FkCounter += 1\n4. Check for foreign key constraint (OP_FkCounter and OP_FkIfZero)\n5. End transaction\nIf any stage fails(for instance due to presence of child table), then transaction will rollback. \nIn Tarantool there is no support for multi-statement transactions, so it is not possible to rollback. In this case, even if DROP TABLE failed, the table would remain empty after 3 stage.\nPossible solution:\nFirstly, check for all constraints and only then truncate table. But this seems to be too obvious, \nso there could be pitfalls.\nupd: Solution above fails due to several reasons. Firstly, to check foreign key violation VDBE uses special register-counter: when deleted/inserted row leads to violation, this counter is incremented. So if we want to immediately prevent from deleting rows which violate FK constraint from table, we should add OP_FkIfZero before each row removal. This could lead to significant increase of VDBE opcodes in each prepared statement. Moreover, all rows deleted before row which violates FK will be removed irretrievably. Another problem lies in ON CASCADE operation: we shouldn't raise an error, if all child table feature ON DELETE CASCADE option.. Can't reproduce anymore. @TheAviat0r could you please check if it still fails for you on current 1.8?. It should be closed when #3242 hits the trunk.. The problem lies in the counter, which displays number of foreign key violations. It is held in VDBE structure. Since each statement execution creates its own VDBE, currently there is no mechanism to pass this counter from one VDBE to another within one transaction. In original SQLite this counter was held in sqlite3* structure, which was global and shared among all VDBE's.. Done in scope of 27aaba6ae13d40d6d209e637f3e78ced09ac8f60. I guess, this ticket is related to #3119: \"Remove opcode OP_Transaction: it was superseded by Tarantool's specific OP_TTransaction\"\n@kyukhin should we close this as a duplicate?. Already done: https://github.com/tarantool/tarantool/commit/b080a7f09c6c679904ced120d6d8a4f39c16efdd. Closed since we decided to allow creating FK with other collations. The only restriction remained - they must match.. @kyukhin \nWell, I would provide more detailed explanation. When OP_MakeRecord allocates memory, it uses sqlite3VdbeMsgpackRecordLen() to estimate size of needed memory before place there encoded in msgpack record. However, this function relies on certain heuristics and return sort of upper bound of required memory. Later, when msgpack is put into this memory by sqlite3VdbeMsgpackRecordPut(), real size of msgpack is calculated. And it turns out to be less, than first estimation.\nIt is worth mentioning that the difference between these two values could be significant: up to 5-6 times for small records. Thus, a lot of memory is wasted, i.e. allocated but not used.\nOn the other hand, precise calculation of required memory would demand extra cpu cycles. Hence, even if this feature going to be implemented, it should be carefully benchmarked.. I also propose to add pragma vdbe_enable_dump=1 which would enable dumping VDBE listing. If user didn't specify file to dump, then dump would occur to default listing_dump.vdbe file.. We've already introduced strict types and reworked almost all tests. The only issues remained are connected with mixing types (e.g. column was declared as DOUBLE and we insert there strings). Currently disabled tests: selectA.test.lua, types2.test.lua, e_expr.test.lua\nThey should be reconsidered and we should manually check that they can be resurrected.. @Khatskevich Could you please provide example(s) which leads to segfault (as more as possible/you have)? I'm asking due to the fact that error handling routine in the vdbe contains following code:\nif (p->zErrMsg==0 && rc!=SQLITE_IOERR_NOMEM) {\n    const char *m = (rc!=SQLITE_TARANTOOL_ERROR) ? sqlite3ErrStr(rc) :\n        tarantoolErrorMessage();\n    sqlite3VdbeError(p, \"%s\", m);\n}\nIt can be seen that even if error is not set, the last one occurred in Tarantool will be emitted. Thus, segfault is only possible in case of returning SQLITE_TARANTOOL_ERROR without any error occurred in Tarantool. If it can really happen, whatever status should be returned except for an error.. > I do not think that I should spend time for snippets which lead to the segfault\nSorry, I thought you had already had them when you created this issue. \nWell, it seems that not all Tarantool routines use diag_set() when SQL-Tarantool interface returns SQL_TARANTOOL_ERROR -- it is a bug without any doubts . However, it wouldn't be informative enough, if always set SQL_ERROR code. Thus, in order to avoid passing Vdbe* structure to Tarantool-SQL interface functions (to set error message), I suggest to introduce additional set of errors (instead of one simple SQLITE_TARANTOOL_ERROR). For instance, it could be:\nSQL_TARANTOOL_ITERATOR_ERROR -- in case of failure of cursor_advance/seek functions;\nSQL_TARANTOOL_INSERT/REPLACE/DELETE_ERROR -- in case one of mentioned functions failed;\nEmit SQL_TARANTOOL_ERROR in other cases (when we definitely sure that Tarantool used diag_set()).\nIs this proposal OK for you?. Actually, they don't have to be unique. Reason for such behaviour is quite simple: SQLite uses rowid for stat tables, meanwhile Tarantool doesn't. Instead, PK consists of two (or three for stat4) columns: table, index and sample (for stat4). However, they might coincide: analyze updates information in stat tables in runtime.\nAs for your example, approximate execution plan of analyze consists of several stages:\n1. For t1b index only one sample exists -- 2.\n2. After first row has been procceeded, stat table looks like: (\"t1\", \"t1b\", 0, 0, 0, \"2\").\n3. After second row has been handled, new statistic to be inserted is: (\"t1\", \"t1b\", 1, 1, 0, \"2\").\n(It may be a little bit different, but the meaning is the same).\nAs you can see, without replacing we can't update tuple in stat table. That is why replace is used.\nAs concerning the fact that analyze routine doesn't work in optimal way -- yes, it seems to be not optimal. But we should carefully consider and discuss how to improve it before making some changes. Anyway, by design analyze should be run quite rarely, so I don't think that 'not optimal' execution plan can be a really significant issue.. Closed by:https://github.com/tarantool/tarantool/commit/a7b583842811e87919accbe28d4884434f16f23f. The suggestion is to hold struct space * andstruct index * in cursors instead of ids. Moreover, we decided to pass pointer to space/index to OP_OpenWrite/OP_OpenRead opcodes instead of ids, in order to get rid of redundant id lookups. . It is easy to remove/replace usage of collations from struct Index and struct sqlite3 (after space creation). As for struct Column, it turns out that in Tarantool collation is specified only for keys, not for all tuple fields. Meanwhile in SQL it is allowed to set collation for any column. Thus, it is unclear how to substitute those usages (at least now).\nRelated to #2937 . Hello! Thanks for contributing to Tarantool. However, I stick to the point that error message still aren't informative enough (and may be even confusing). IMO, it would be better, if it appears with column names which violate foreign key constraint. Moreover, I suggest to distinguish cases when FK constraint is violated due to the lack of PK/unique index and situation when their collations don't match.\nStyle comments: according to guidelines(*) commit message should fit 50 characters and body -- 72. Also, don't start subject message with capital letter if you have already specified topic (i.e. it should be sql: make ...).\n(*) https://tarantool.org/en/doc/1.7/dev_guide/developer_guidelines.html#how-to-write-a-commit-message. @kyukhin removing of idxType rather belongs to #3181. Well, even despite the fact that the usage of this feature leads to assertion fault, we already have tests on it!\ntest/sql-tap/reindex.test.lua\nTesting is one step ahead of developing.... @Gerold103 Are you able to come up with use case for \\? Or it can't be applied to Tarantool in any other way? If so, issue can be closed. . Ok, then I close this issue.. It turns out that bug was introduced by this commit: https://github.com/tarantool/tarantool/commit/a706e97eca134f8fb21a855eda5f3b6e1593ea08\nAlso, see original ticket: https://github.com/tarantool/tarantool/issues/3021\nThe idea to allocate memory on region while making record firstly seemed to be reasonable (moreover, it has passed through review and got to trunk). However, ephemeral spaces have nothing in common with txn routine. Thus, txn_commit() won't release memory which is allocated on region to hold tuples to be inserted into ephemeral spaces. So, for ephemeral spaces we MUST (and it is not kind of optimisation as we thought before) allocate memory for records using ordinary malloc.\nI can suggest following solutions:\n\n\nAttempt at pointing out to which table (ephemeral or not) we are making record at the compilation time by setting flag in fifth register of OP_MakeRecord. It may be not so easy, since at compilation stage we are operating only with cursor numbers, so I am not sure that we always can differ them.\n\n\nPassing cursor number (from which we are able to fetch space id) in the fifth register to OP_MakeRecord (almost like p.1, but we don't have to guess whether cursor with given number is ephemeral or not). On the other hand, it leads to additional moves at runtime (while executing this opcode). Meanwhile, it seems to be very hot and should be optimized as much as possible.\n\n\nBrutally release all region memory after vdbe's halt. (Actually, it sounds like a nonsense)\n\n\nSimply revert this patch. Without it allocation will always be using malloc, but before insertion to ordinary space tuple will be copied to region.\n\n\nContrary to p.4, always allocate on region, but before insertion to ephemeral space, tuple will be copied to malloc.. Well, p.3 really works (at least now, even if it is unlikely to be the most elegant solution).\n\n\nAlso, I can't reproduce/notice memory leaks, if box_insert fails itself or any routine before (with fiber_gc() in vdbeHalt()), even if I add goto abort_due_to_error in different places among opcodes handling routine (what ordinary happens when smth goes wrong).\n\nAs far as I know, we do not call box_txn_begin on autocommit statements?\n\nIt seems that we do call:\ncase OP_TTransaction: {\n    if (p->autoCommit) {\n        rc = box_txn_begin() == 0 ? SQLITE_OK : SQL_TARANTOOL_ERROR;\n    }\nAnd all inserts/deletes/updates start execution from OP_TTransaction.. > Is it really true, that it is hard to guess whether you are inserting to ephemeral space or not at compile time?\nI would say yes. Anyway, you are able to investigate it yourself.. @Khatskevich If you are using quote, please, underline it with markdown syntax.. After all, the only artefact remained is struct Table, struct Index and struct Column don't exist anymore. Despite removing table hash, struct Table is still used as a wrapper around struct space and appears for example in struct SrcList.. Closed via 19b64e013e8e7751e04f1916c80a89980ba361cb. It is worth mentioning, that file routine is used mainly for SQL sorter, which relies on merge-sort algorithm. If data to be sorted can't be fitted into heap memory, sorter dumps data to files.\nFor details see: src/box/sql/vdbesorter.c. Closed via https://github.com/tarantool/tarantool/commit/dc358cb014280f5835740b6c2b25608383b14763. The problem lies in xfer optimization: it opens cursors on ALL indexes and makes insertions to ALL of them.. Related: #3016 #3243. Moreover, some of them SQLite specific and can be removed (alongside with code which uses it).. Eventually, I have managed to write simple reproducer:\nbox.cfg{}\n\\set language sql\nCREATE TABLE t1(id UNSIGNED BIG INT PRIMARY KEY,max_players INTEGER,n_players INTEGER,flags INTEGER);\nCREATE INDEX IDX_MAX_PLAYERS ON t1(max_players);\nCREATE INDEX IDX_N_PLAYERS ON t1(n_players);\nCREATE INDEX IDX_FLAGS ON t1(flags);\n\\set language lua\nfor i = 1, 100 do\n    box.sql.execute(string.format(\"INSERT INTO t1 VALUES (%s, %s, %s, %s);\", i, 15, 6, 3));\nend\nfor i = 1, 100000 do\n    box.sql.execute(\"SELECT id,max_players,n_players FROM t1 WHERE flags=3 AND max_players>=15 ORDER BY id LIMIT 70\");\nend\nExecution ends in VDBE after error from Tarantool's core: 'Tuple format limit reached'. . @Totktonada \nAFAIK, without ORDER BY or GROUP BY clauses order of rows is not specified.. Hello. Unfortunately, now the only ALTER you are able to do via SQL is RENAME. Someday we are going to support other features of ALTER: #3075, #3097.. Now we allow ON CONFLICT REPLACE action only for PK: https://github.com/tarantool/tarantool/commit/f74f806d0fa40bb7b7ba461a6043e78a3adc16a4 So, this issue is resolved.. Closed via https://github.com/tarantool/tarantool/commit/dc358cb014280f5835740b6c2b25608383b14763. Let me summarise existing problems connected with VIEWs:\n1) As a part of DD integration, we should remove struct Select from struct Table.\n2) Storing column aliases in CHECK array seems to be extremely confusing.\n3) Now circularly defined views can't be resolved.\nThe suggestion is to resolve column names (including their types, collations, default values etc) right at the moment of VIEW creation and fill in space_def with appropriate values. However, to execute SELECT on VIEW we still once need original select statement in order to open cursors to existing tables. We can deal with this problem manually launching parser and extracting AST from CREATE VIEW statement. It seems that such approach is going to resolve all problems stated above.. It turns out that last word is threatened as column alias: AS clause in fact is optional. Hence, it is not a bug.. Now, we can tell only INT from other types: in fact, the rest are SCALAR. Situation is going to change after introducing static types (see tickets with label 'sql static types').. Is it a duplicate of https://github.com/tarantool/tarantool/issues/3382 ?. Closed by https://github.com/tarantool/tarantool/commit/e0ec7756542ce20800879520c2d1e8c310b443e8. I guess this issue is tightly connected with this one: https://github.com/tarantool/tarantool/issues/3472\nIt seems like table was created via SQL facilities, dropped by Lua and therefore insertion failed with assertion fault. But it is only guess, though.. @pgulutzan \nCould you please provide example of non-working CASCADE clause?\nI have checked out from fresh 2.0:\n```\nCREATE TABLE t1(id PRIMARY KEY, a UNIQUE, b);\nCREATE TABLE t2(id PRIMARY KEY, a REFERENCES t1(a) ON DELETE CASCADE);\nINSERT INTO t1 VALUES (1, 2, 3);\nINSERT INTO t2 VALUES (1, 2), (2, 2);\nDELETE FROM t1;\nSELECT * FROM t2;\n\n\n[]\n...\n\nThe same for ON UPDATE CASCADE:\ntarantool> CREATE TABLE t2(id PRIMARY KEY, a REFERENCES t1(a) ON UPDATE CASCADE);\n\n...\ntarantool> CREATE TABLE t1(id PRIMARY KEY, a UNIQUE, b);\n...\ntarantool> INSERT INTO t1 VALUES (1, 2, 3);\n...\ntarantool> INSERT INTO t2 VALUES (1, 2), (2, 2);\n...\ntarantool> UPDATE t1 SET a = 3;\n...\ntarantool> SELECT * FROM t2;\n\n\n\n[1, 3]\n\n\n[2, 3]\n...\n```\n\nThus, at least in simple case - they seem to work.. As for first point: I haven't dived into ANSI, but this behaviour looks satisfying (at least for me). Lets ask\nother members for their opinion.\nAs far as I remember, REPLACE causes DELETE + INSERT on purpose. Again, personally I see no problem in such behaviour.\nCurrently, we have following grammar for constraints definition (I simplified it a little bit):\nFK constraint ::= REFERENCES nm(T) eidlist_opt(TA) refargs(R)\nrefargs(A) ::= .\nrefargs(A) ::= refargs(A) refarg(Y) .\nrefarg(A) ::= ON INSERT | ON UPDATE | ON DELETE refact .\nrefact(A) ::= SET NULL | SET DEFAULT | SET CASCADE | RESTRICT | NO ACTION .\nOne can see that your example fits into this grammar. So, I guess if someday we decided to rework parser, we would fix grammar.. It turns out that SQLite already has kind of such feature, but it is disabled by default: see SQLITE_FactorOutConst define.. Closed via https://github.com/tarantool/tarantool/commit/0bc636749a282e50eb9ddcf7f5947d62d2215d66. Well, I would like to point out that it is not proposal, it is our goal - to implement informational schema. Hence, sooner or later we should cope with it. On the other hand, we can wait until transactional DDL is implemented.\nAlso why can't we rely only on _index space during recovery? I mean it doesn't matter what is in information schema (IS) spaces, we will always force values in _index space and propagate them to other IS spaces.. Closed in scope of #3535. Finally, we decided that fix doesn't worth the effort. So, let's simply consider this behaviour as a feature. @pgulutzan Could you document it?. Can't reproduce since 4fe0b8126f120bdaa3221ef279470c27b8a547e7..  Closed by deea069324f141c6ef4f80b58ba828a0aef9ce91: we got rid off pragma foreign_key_check.. Ok, this bug turns out to be severe: zeroblob() usage leads to assertion (sic!):\ntarantool> select zeroblob(5)\nAssertion failed: (0), function lua_push_row, file /Users/n.pettik/tarantoolOrigin/tarantool/src/box/lua/sql.c, line 61.\nAbort trap: 6\nI'm not going to open new issue, let's fix it in scope of current problem.. For the record: according to ANSI, if one of concatenation operands is of TEXT type, then the rest must have the same type. Otherwise, error is raised. The same for binary-like types. Now concatenation operator ('||') accepts even numeric types. I suggest to re-work concatenation operator to allow only string-like types and validate their type equivalence.. I guess ticket is quite similar to this one: https://github.com/tarantool/tarantool/issues/3499\nWithout transactional DDL fail during table creation doesn't result in removal of already created objects (at least now).. This bug seems to be temporary: now it is occurred due to forcing INT type only on PRIMARY KEY column, meanwhile other columns always have SCALAR type. It started to appear after we had introduced system space holding FK constraints and moved all validations on FK correctness straight to trigger on this space (alter.cc). For instance:\nCREATE TABLE int1 (s1 INT PRIMARY KEY);\nCREATE TABLE int2 (s1 INT PRIMARY KEY, s2 INT REFERENCES int1 (s1));\ntypeof int1.s1 == INT (since it is INT PK)\ntypeof int2.s2 == SCALAR (since it is not PK) \nAfter patches on static typing hit the trunk, this issue will be closed automatically.\n\nforeign keys can only be created with binary collations\n\nIt is behaviour of SQLite foreign keys. AFAIK ANSI doesn't promote this restriction. Now the only restriction on collations - they must match (e.g. both - parent and child can feature \"unicode_ci\").. Can't reproduce this bug anymore on fresh 2.1, since strict typing has hit the trunk.. Why this behaviour is supposed to be unexpected? Firstly, you should drop FK constraint with ALTER TABLE DROP CONSTRAINT and only then drop table. I tested this example on PostgreSQL and MySQL - both don't allow to drop table until it is referenced by another table.. After this type is introduced, we may force some conversions. For instance, most DBs require arguments of predicates be of type boolean (now they can be INT). For instance, 123 OR 0 is not allowed, but 123 != 0 OR false is OK.\n\n4.5.3.2 Other operators involving booleans\nEvery SQL \\, \\, and \\ may be considered as an operator that returns a boolean result.. Last proposal is considered to be self-sufficient and moved to separate issue: #3723. Another note concerning \\: in SQLite \\ and \\ are comparable, but \\ is always less than \\. So, even if we allow comparisons between these two types, we likely should remove this restriction.. @locker you accidentally closed wrong ticket. This one is not implemented yet.. This is expected behaviour. REPLACE (or its alias INSERT OR REPLACE) causes deletion and insertion to all unique indexes.. @kshcherbatov\n\nUnfortunately, mentioned issue is not related to this one: it doesn't affect order of checks.. We've removed support of DATE/TIME from parser alongside with built-in functions as a part of #4019. List of tests from suite which are affected and ergo partially or completely disabled (so they to be re-enabled after this issue is resolved):\nsql-tap/date.test.lua (completely)\nsql-tap/table.test.lua (table-13.1)\nsql-tap/tkt3791.test.lua (completely)\nsql-tap/tkt-bd484a090c.test.lua (completely)\nsql-tap/tkt2192.test.lua (tkt2192-1.1 and tkt2192-1.2)\n. @Khatskevich \nIs it possible to turn them off/on at runtime? Or they are simply always enabled? If they are always enabled, lets make our triggers to be always recursive. Other option is to specify type of trigger (recursive/non-recursive) during its creation, like: CREATE RECURSIVE TRIGGER .... Please, argue your idea. As far as I remember, it was made on purpose, in order to return rowcount as 1 on DDL requests (via IProto). See Vdbe->nChange and OPFLAG_NCHANGE.. Since there is no any explicit contradictions, I will close this ticket.. Well, I faced with very similar problem, but I managed to reproduce it in quite simple way:\n```\nbox.cfg{}\nbox.sql.execute(\"CREATE TABLE t1 (id INT PRIMARY KEY AUTOINCREMENT);\")\nbox.sql.execute(\"INSERT INTO t1 VALUES (NULL)\")\nbox.snapshot()\nos.exit()\n./src/tarantool\nbox.cfg{}\nbox.sql.execute(\"DROP TABLE t1;\")\n\n\nerror: 'Can''t drop sequence ''T1'': the sequence has data'\n...\n\n```. Hello. Thanks for bug reporting. Unfortunately, I can't reproduce your case. I do this:\nMain console:\nbox.cfg{}\nconsole = require('console')\nconsole.listen('127.0.0.1:3303')\n1 console:\nconsole = require('console')\nconsole.connect('localhost:3303')\nbox.internal.sql_create_function('WAITFOR', function (n) require('fiber').sleep(n) return n end)\nbox.sql.execute('select WAITFOR(30)')\n2 console:\nconsole = require('console')\nconsole.connect('localhost:3303')\nbox.internal.sql_create_function('WAITFOR', function (n) require('fiber').sleep(n) return n end)\nAnd nothing happens both on debug/release builds of fresh 2.1 (MacOS + clang). Could you, please, check if it still appears to you on very fresh 2.1. If so, could you provide information concerning your setup?\nAnyway, it looks like LuaJIT issue, rather than SQL.. @Totktonada\nNow I see that I really can't reproduce it again (nevertheless, when I created this issue, I definitely managed to reproduce it several times). Moreover, I've checked it on 2.0...\nWell, lets close this but if I ever reproduce it again, I will reopen it.. > CREATE TABLE J (S1 INT PRIMARY KEY);\nCREATE INDEX I ON J (S1);\nPRAGMA INDEX_LIST('J');\nResult = pk_unnamed_J_1, not I.\nIn fact (at least right now), result is:\n```\n\n\n\n\n[0, 'pk_unnamed_J_1', 1, '', 2049165187]\n\n\n[1, 'I', 0, '', 2049165187]\n...\n```\nIs it OK? Name for primary index is auto-generated. Last two arguments will be removed, they are uninitialised.\n\n\nPRAGMA INDEX_INFO('J.I');\nResult = nothing.\n\nWell, I guess we should raise an error, if index with given name doesn't exist.\n\nPRAGMA INDEX_XINFO('J.I');\nResult = nothing.\n\nThis pragma has been removed.\n\nPRAGMA;\nThe result goes to the server console, not to the client.\n\nThis is going to be fixed in https://github.com/tarantool/tarantool/issues/3832, patch is under review.\n\nI execute this statement:\nPRAGMA query_only(true);\nThe result is \"okay\" but I can still do CREATE and INSERT statements.\n\nThis pragma is going to be removed, it is legacy from SQLite.\n\nPRAGMA parser_trace;\nPRAGMA server_trace(true);\nResults go to the server console when I execute statements later.\nI realize that they should not go to the client.\nBut the client has to be able to access them, perhaps in a parse table or a warning message.\n\nIt is debug-only pragma, in release build it doesn't appear at all.\n\nPRAGMA sql_default_engine(memtx);\nThe result is \"okay\", that is, this is the same as PRAGMA sql_default_engine('memtx');\n\nI guess we can come up with fix for this problem.\nAnyway, I still believe that all pragmas should be replaced with informational schema for pragmas like 'index_info' and with 'SET' operator for pragma like 'sql_default_engine'.. > Hmm, it is good to remove PRAGMA query_only(true); but someday we\nmight want SET SESSION TRANSACTION CHARACTERISTICS AS TRANSACTION READ ONLY;.\nMaybe this is possible by temporarily setting box.cfg{read_only=true} whenever\nthis session does any statement or Lua request?\nUnfortunately, during integration SQLite into Tarantool, we removed functional part of this feature since it was bounded to SQLite memory engine (which in turn is way different from memtx/vinyl).\nSo, now the only remains of read_only pragma are left in parser.\n\nHmm, for PRAGMA parser_trace; you mention \"debug\" and \"release\" build,\nbut should it be legal if I build with -DCMAKE_BUILD_TYPE=RelWithDebInfo?\n\nI guess not, it shouldn't be legal (and it matches current behaviour).\n\nI think your reply re PRAGMA sql_default_engine(memtx); means\nit could be fixed but it will not be fixed.\n\nNo, it means that we will fix it (soon I guess).\nupd:\n\nNo, PRAGMA INDEX_INFO('J.I'); should not be an error -- but I\nthink I reported this incorrectly. I suppose this should be like\nSELECT index_name FROM information_schema.statistics WHERE table_name='J.I';\nand Tarantool should return an empty result set. Instead I see NULL.\n\nBut even now it returns empty set, not NULL:\n```\ntarantool> box.sql.execute(\"pragma index_info('t1.fake')\")\n\n\n[]\n...\n\n``\nSo, current behaviour is OK and we don't need to change smth. Am I right?. Personally I think that implicit conversion from int to float (in this particular case) is not what we deserve at all. I vote for throwing an overflow error. It is sort of obvious, isn't it?. @Totktonada \nLoss during conversion is already covered by this issue: #3809. JFYI: if you decide to store change counter within fiber, then this ticket https://github.com/tarantool/tarantool/issues/2181 (which unfortunately is already implemented) will become unnecessary and shouldn't be merged.. Ok, I'm not against throwing away #2181. What is more, storing change counter within fiber would allow us to account changes made by triggers (and as you already mentioned Lua <-> SQL interconnections).\nBTW, personally for me queries likeSELECT push_id()` look like nightmare...On the one hand nothing criminal here: it may be simple reimplementation of max(), sum() or whatever auxiliary Lua function. On the other hand, if I modify your example a little, Tarantool will get stuck:\nfunction push_id() box.space.TEST:insert{box.NULL, 0} box.space.TEST:insert{box.NULL, 0} return true end\nbox.internal.sql_create_function(\"push_id\", push_id)\n\\set language sql\ncreate table test (id integer primary key autoincrement, a integer)\nselect push_id()\nselect id, push_id() from test;. upd.: I talked today with @kostja and he suggested to separate these issues. It means that now we are pushing #2181 at its current state and later move change counter to fiber in order to account changes from Lua-land.. I took a quick look at this issue. AFAIU from source code:\nstruct tuple_format {\n    ...\n    /**\n     * If not set (== 0), any tuple in the space can have any number of\n     * fields. If set, each tuple must have exactly this number of fields.\n     */\n    uint32_t exact_field_count;\n    ...\nFor _space it is set to 0:\n- - [280, 1, '_space', 'memtx', 0, ...\nMoreover, assert above supports my thoughts: \nassert(format->exact_field_count == 0 || fieldno < format->exact_field_count);\nSo this doesn't seem to be bug. @Gerold103 Am I right?. Hmm, it is kind of strange...I set breakpoint at tuple_field_raw():\nuint32_t field_count = mp_decode_array(&tuple);\n(lldb) print field_count\n(uint32_t) $2 = 7\n(lldb) print *format\n(const tuple_format) $3 = {\n  vtab = {\n    tuple_delete = 0x000000010002ff70 (tarantool`memtx_tuple_delete at memtx_engine.c:1183)\n    tuple_new = 0x000000010002f780 (tarantool`memtx_tuple_new at memtx_engine.c:1129)\n  }\n  engine = 0x0000000105000000\n  id = 4\n  refs = 4\n  is_temporary = false\n  field_map_size = 0\n  exact_field_count = 0\n  index_field_count = 1\n  min_field_count = 1\n  field_count = 1\n  dict = 0x0000000103d00bf0\n  fields = {}\n}\nI guess, if it wasn't allowed to fetch fields with no > format->field_count, then this function would have the same assertion as Kirill added.. Note that XML is not a part of ANSI SQL, it is rather user-defined type.\nWhat is more, there is no native way to operate on XMLs in terms of Tarantool core. Still, we can simply store it as a string or blob.. A week ago we talked about unique constraints, indexes and compatibility of their names - in other words, should we be able to create unique constraint and unique index with the same name and should constraints and indexes share one namespace(?). I've checked three vendors (PostgreSQL, Oracle and MySQL) and all of them feature one namespace for unique constraints and indexes. On the other hand, it is clear that indexes are separated from SQL ANSI and the fact that unique constraint implements index under the hood is the question of DB design. Nevertheless, I'm not sure that we want separate these namespaces. I would better poll other members. Still, we can do it: all we need is to mangle unique constraint name, create index with mangled name and the original one save to constraint namespace.. >  If a user explicitly specifies index name via CONSTRAINT , then he will expect to have this name both available via box.space.index.\nWhy? As I already mentioned, index is only an implementation of unique constraint, so generally speaking creation of unique constraint may not lead to creation of index (I guess that all DBs follow this way, but it is not stated in standard). For instance, in MySQL (as far as I remember) creation of FK constraint also results in implicit creation of index, meanwhile in PostgreSQL it doesn't.\nStill, this is very specific nitpicking and I guess we really should simply maintain only one global namespace of constraints.. > I execute these statements:\nPRAGMA sql_compound_select_limit(-1);\nSELECT 5 UNION ALL SELECT 6;\n-- Result: PRAGMA does not say there is an error, the minus sign is ignored.\nIt seems that negative values are not taken into consideration and simply ignored, so the current value is not changed. I guess an error raise is more suitable here, isn't it? It can be easily fixed.\n\nPRAGMA sql_compound_select_limit(+1);\nSELECT 5 UNION ALL SELECT 6;\n-- Result: \"error: Too many UNION or EXCEPT or INTERSECT operations (limit 1 is set)\"\nalthough the number of UNION operations is 1, which is the limit\n\nProbably, it was confused with the number of UNION/EXCEPT/INTERSECT operands (which is +1). Should be fixed.\n\nI execute these statements:\nPRAGMA sql_compound_select_limit(0);\nSELECT 5 UNION ALL SELECT 6;\n-- Result: no error, although the limit has been exceeded.\n\n0 value removes any limits at all; this behaviour is also supported by SQLite (on the other hand, there it is compile-time option). Although it was mentioned in doc request within b2afe208d12d0e02aa6ede4e3411128e30e87b1b patch:\n\nSetting sql_compound_select_limit at 0 disables this limit at\nall.\n\nIs this behaviour OK? Or 0 should mean \"no compound queries at all\"?\n\nActually I think all PRAGMA statements are bad\n\nCould you suggest possible replacement for PRAGMA statement? As you may know, now we need it to set several quite important settings such as engine (memtx/vinyl), defer mode for foreign keys, displaying meta-information concerning indexes/tables, debug trace facilities and so on. It is unlikely that we are going to remove it soon, but we should keep in mind reasonable alternatives. For instance, we can use SET syntax like in PostgreSQL (e.g. SET enable_seqscan = true).\nFinally, I agree that naming should be fixed and current value of this pragma should be displayed in simple 'PRAGMA' list.. Due to this feature we may observe strange behaviour during Lua-SQL interaction:\n```\n\\set language sql\nCREATE TABLE t (id INT PRIMARY KEY, a INT);\n\\set language lua\nbox.space.T:insert{1, 18446744073709551615ULL}\n\\set language sql\nSELECT a + 1 FROM t;\n\n\n[1.844674407371e+19]\n...\n. Another one evidence that suggested by @kostja and supported by @kyukhin implementation is inappropriate. We are going to suffer if we attempt to follow such weird (and likely to be wrong) range for INTEGER.. upd.: I've banned opportunity to operate on integers in range [INT64_MAX, UINT64_MAX] in scope of this issue: https://github.com/tarantool/tarantool/issues/3735, even if they are fetched from space tuples. So examples like:\nbox.space.T:insert{1, 18446744073709551615ULL}\n\\set language sql\nSELECT a + 1 FROM t;\n\n\n\n[1.844674407371e+19]\n...\n``\nnow are resulting inerror: 'Failed to execute SQL statement: integer is overflowed' `\n\nIf this is enough for 2.1.1, I suggest to move this ticket to 2.2.. AFAIK chosen path is to follow ANSI specification. Hence, we should introduce in Tarantool kind of REAL and FLOAT subtypes. On the other hand, later we can extend basic types with NUMBER which would represent and behave as native Tarantool's NUMBER, but this feature seems to be very optional (in contrast to supporting floating point types).. > BTW, are not that is about DD integration?\nBecause it is already done - data dictionaries have been merged. This label should be deleted, but several follow-ups are still remained. You may create label like \"sql integration\", but it is not about DD.\n. Note that the same behaviour is observed during insertion of big numbers to NoSQL Tarantool:\n```\nbox.schema.create_space('t1')\nbox.space.t1:format({{name = 'id', type = 'number'}})\nbox.space.t1:create_index('i1', {parts = {1, 'number'}})\ntarantool> box.space.t1:insert({9007199254740993.0})\n\n\n[9007199254740992]\n...\n\n```\nHowever, other DBs (PostgreSQL, MySQL, MS SQL) throw an error (except for Oracle - it allows to operate on VERY big numbers). So, I guess we will throw an error as well (in Tarantool/SQL).. upd: I've reconsider my point of view. Mentioned DBs by default use numeric types for literals, not floating point. For example, in PostgreSQL:\nselect typname from pg_type where oid = pg_typeof(9007199254740992.0)\n\u00a0  | typname\n-- | --\n1  | numeric\nWe can force DOUBLE type and observe the same loss:\nSELECT 9007199254740992::DOUBLE PRECISION\nfloat8\n9,00719925474099E+15\nSince literals are threatened as doubles, they obey IEEE 754 standard. And by this standard loss is expected behaviour. Hence until numeric/decimal types are introduced, we can do nothing here.\nI suggest to document the fact that literals are threatened as floating point numbers (not as numeric ones - moreover, it should be obvious since we don't have numeric type at all) and close this issue.. Literal is parsed without loss, it is simply saved as a string. String is converted to double during byte-code generation (see codeReal() function). It is out of parser's business, you get the same 'loss' in C:\ndouble x = 9223372036854775807.0;\nprintf(\"%f \\n\", x);\n9223372036854775808.000000\nSo, when numeric appears on-board, we will define default parameters for numeric literals and convert string exactly to this precision. If it can't be converted without loss, we will throw an error.\nInteger features quite different nature, and this error seems to be OK. Again, if we had numeric type and literals were threatened as numeric, then no error would be raised. The same example from PosgtreSQL:\n```\nselect typname from pg_type where oid = pg_typeof(9223372036854775808)\n\u00a0  | typname\n-- | --\n1  | numeric\nselect 9223372036854775808::INTEGER\n22003: integer out of range\n```\nSo, I guess this error is fine.\nFunny thing: if you call it 'loss', then even '0.1' is not valid value, since it hasn't precise binary representation: 0.1 is really 0.100000001490116119384765625 according to IEEE 754 and error due to conversion is 1.490116119384765625E-9.. > So, floating-point literals are numeric with any length and any precision,\nSort of. But not any precision - it is not possible I guess, there should be limit:\n\nSo, when numeric appears on-board, we will define default parameters for numeric literals and convert string exactly to this precision.\nbut integral literals are int32 and the reason is 'Integer features quite different nature' means 'no reason'\n\nNow floating-point literals are of type double, integer literals are of type int64 (not 32). Loss of double is expected behaviour; overflow of integer is not - it is an error. They should both be numeric when we introduce that type.. So blocked until https://github.com/tarantool/tarantool/issues/3672 is resolved.. Second case is the right one: it was designed to raise an error. In the first example error is not thrown due to strange syntax (AS VALUES not AS SELECT - these two things are threatened in different ways inside parser). However, as far as I understand it doesn't contradict ANSI syntax.\nAlso, I've noticed that \n```\ntarantool> box.sql.execute(\"VALUES ((SELECT 'k' FROM b;))\")\n\n\n\n\n[null]\n...\ntarantool> box.sql.execute(\"SELECT 'k' FROM b\")\n\n\n\n\n\n[]\n...\n```\nIt is kind of obvious that SELECT returns empty set (because table 'b' is empty), but why VALUES returns null..? From ANSI:\n\n\n...\n\\ ::= VALUES \\\n\\ ::= \\ [ { \\ \\ }... ]\n...\nIf the result of any \\ or \\ is the null value, then an exception condition is raised: data exception \u2014 null row not permitted in table.\n\nIt is in direct contradiction to current behaviour, isn't it? Several DBs I've checked (PostgreSQL, MySQL, MS SQL, Oracle) don't support such syntax at all - I can't execute VALUES(SELECT ...), nevertheless it is allowed by standard:\n<row value special case> ::= <nonparenthesized value expression primary>\n<nonparenthesized value expression primary> ::= ... | <scalar subquery> .... One more found problem:\n```\nCREATE VIEW v1 AS SELECT 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;\nSELECT \"format\" FROM \"_space\" WHERE \"name\" = 'V1';\n\n\n\n\n[[{'affinity': 68, 'type': 'integer', 'nullable_action': 'none', 'name': '1',\n        'is_nullable': true}, {'affinity': 68, 'type': 'integer', 'nullable_action': 'none',\n        'name': '1:1', 'is_nullable': true}, {'affinity': 68, 'type': 'integer', 'nullable_action': 'none',\n        'name': '1:2', 'is_nullable': true}, {'affinity': 68, 'type': 'integer', 'nullable_action': 'none',\n        'name': '1:3', 'is_nullable': true}, {'affinity': 68, 'type': 'integer', 'nullable_action': 'none',\n        'name': '1:4', 'is_nullable': true}, {'affinity': 68, 'type': 'integer', 'nullable_action': 'none',\n        'name': '1:1726217889', 'is_nullable': true}, {'affinity': 68, 'type': 'integer',\n        'nullable_action': 'none', 'name': '1:329894854', 'is_nullable': true}, {\n        'affinity': 68, 'type': 'integer', 'nullable_action': 'none', 'name': '1:1336992365',\n        'is_nullable': true}, {'affinity': 68, 'type': 'integer', 'nullable_action': 'none',\n        'name': '1:3086607935', 'is_nullable': true}, {'affinity': 68, 'type': 'integer',\n        'nullable_action': 'none', 'name': '1:4103804459', 'is_nullable': true}, {\n        'affinity': 68, 'type': 'integer', 'nullable_action': 'none', 'name': '1:3282398331',\n        'is_nullable': true}, {'affinity': 68, 'type': 'integer', 'nullable_action': 'none',\n        'name': '1:2665007366', 'is_nullable': true}, {'affinity': 68, 'type': 'integer',\n        'nullable_action': 'none', 'name': '1:775762805', 'is_nullable': true}]]\n```\nOne can see that starting from fifth member enumeration seems to be broken.\n\n\n\nupd.: wow, this behaviour was made on purpose (see sqlite3ColumnsFromExprList):\nif (cnt > 3)\n                sqlite3_randomness(sizeof(cnt), &cnt);. > Looks like this might be a reason for SQL UPDATES being so slow.\nDo you have any benchmarks proving that? If so, lets attach them to this ticket, so that we make sure that after reworking UPDATE we will gain real performance improvements.. It turns out that problem seems to be more fundamental: to compile some specific queries (see example below) we fall into recursion consisting of two functions: sqlite3ExprCodeTemp and sqlite3ExprCodeTarget. These functions consume approximately 528 bytes (416 + 112) of stack memory per call. Since we are limited with 64kb of fiber stack, it results in ~110 depth recursion. To prove this point we can execute that simple query:\nbox.cfg{}\nsql = \"SELECT 1 \"\nfor i = 1, 106 do\n    sql = sql .. string.format(\"+ %s \", i)\nend\nbox.sql.execute(sql)\nBus error: 10\nMore sophisticated queries may require even less recursion depth to cause stack overflow.\nNow as a workaround we can restrict AST hight with 100, but surely - it is temporary solution.\nAs a radical solution - we should reimplement all recursion calls implementing AST traversal without recursion (for example - using stack). In addition, we also can increase fiber stack size for SQL parser processing.\nAlso, note that ASAN significantly increases stack memory consumption, resulting in 4353 bytes per two calls (256 and 4096 respectively). Hence even 10 members within expr can lead to stack overflow:\n```\nsql = \"SELECT 1 \"\nfor i = 1, 9 do\n    sql = sql .. string.format(\"+ %s \", i)\nend\nbox.sql.execute(sql)\nAddressSanitizer:DEADLYSIGNAL\n==44651==ERROR: AddressSanitizer: stack-overflow on address 0x00010f011ee8 (pc 0x00010881cc5c bp 0x00010f012080 sp 0x00010f011ef0 T0)\n    #0 0x10881cc5b in sqlite3VdbeAddOp3 vdbeaux.c:255\n    #1 0x10881dfb9 in sqlite3VdbeAddOp2 vdbeaux.c:320\n    #2 0x10870bd03 in expr_code_int expr.c:3292\n    #3 0x10870335a in sqlite3ExprCodeTarget expr.c:3715\n    #4 0x10870d4a1 in sqlite3ExprCodeTemp expr.c:4415\n    #5 0x10870481e in sqlite3ExprCodeTarget expr.c:3864\n    #6 0x10870d4a1 in sqlite3ExprCodeTemp expr.c:4415\n    #7 0x10870481e in sqlite3ExprCodeTarget expr.c:3864\n    #8 0x10870d4a1 in sqlite3ExprCodeTemp expr.c:4415\n    #9 0x10870481e in sqlite3ExprCodeTarget expr.c:3864\n    #10 0x10870d4a1 in sqlite3ExprCodeTemp expr.c:4415\n    #11 0x10870481e in sqlite3ExprCodeTarget expr.c:3864\n    #12 0x10870d4a1 in sqlite3ExprCodeTemp expr.c:4415\n    #13 0x10870481e in sqlite3ExprCodeTarget expr.c:3864\n    #14 0x10870d4a1 in sqlite3ExprCodeTemp expr.c:4415\n    #15 0x10870481e in sqlite3ExprCodeTarget expr.c:3864\n    #16 0x10870d4a1 in sqlite3ExprCodeTemp expr.c:4415\n    #17 0x10870481e in sqlite3ExprCodeTarget expr.c:3864\n    #18 0x10870d4a1 in sqlite3ExprCodeTemp expr.c:4415\n    #19 0x10870481e in sqlite3ExprCodeTarget expr.c:3864\n    #20 0x10870da8e in sqlite3ExprCode expr.c:4441\n    #21 0x1086b83ae in sql_finish_coding build.c:171\n    #22 0x10868c933 in yy_reduce parse.y:114\n    #23 0x10868b29c in sqlite3Parser parse.c:3991\n    #24 0x1087b8d25 in sqlite3RunParser tokenize.c:494\n    #25 0x10875a950 in sqlite3Prepare prepare.c:93\n    #26 0x1087595d9 in sqlite3LockAndPrepare prepare.c:189\n    #27 0x10875983e in sqlite3_prepare_v2 prepare.c:266\n    #28 0x107e4fc10 in lua_sql_execute (tarantool:x86_64+0x100365c10)\n    #29 0x107f5b90c in lj_BC_FUNCC (tarantool:x86_64+0x10047190c)\nSUMMARY: AddressSanitizer: stack-overflow vdbeaux.c:255 in sqlite3VdbeAddOp3\n==44651==ABORTING\nAbort trap: 6\n```. @kyukhin suggested to push temporary fix which restricts AST hight, and reschedule this issue to 2.2 milestone (which implies that all recursive routines should be re-implemented without recursion).. Well, 'none' collation is @kostja 's idea. It was needed for this issue: https://github.com/tarantool/tarantool/issues/3185 to tell binary collation from total absence of collation and meanwhile operate on collation objects in the same way.\nOther concerns are related mostly to output format, so I guess it is easy to fix.. We decided to adjust SQL to force int where it is possible, so I am closing this issue.. Ok, that's clear: in first case collation of function is not taken into consideration. We will fix it for built-in functions, since we know how its arguments affect resulting collation. But there is still issue with user-defined functions. For instance:\n```\ncustom_concat = function (str1, str2)\n return str1;\nend\nbox.internal.sql_create_function(\"custom_concat\", \"STRING\", custom_concat, 2)\n\\set language sql\nCREATE TABLE t(id INT PRIMARY KEY, s1 TEXT COLLATE \"unicode_ci\", s2 TEXT);\nINSERT INTO t VALUES (1, 'a', 'A');\nINSERT INTO t VALUES (1, 'A', 'a');\nSELECT DISTINCT (custom_concat(s1, s2) FROM t;\n```\nWithout \"deus ex machina\" we can't determine only by SQL means that \"custom_concat\" should inherit collation from column s2.\nSecond case is about aggregate misusing. I guess, we should raise runtime error like \"incompatible types\".. I guess the fact that comparison and IN operators must return the same result is not doubtful..? Main idea of this ticket is to fix different behaviour of their application.\nWhat about other vendors (in both cases, obviously):\nOracle: returns 1\nPostgreSQL: error (operator does not exist: text = numeric)\nMySQL: returns 1\nMS Server: returns 1\nDB2: error (SQL0420N  Invalid character found in a character string argument of the \nfunction \"DECFLOAT\".  SQLSTATE=22018)\nAFAIR we decided to ban implicit conversion from CHAR to numeric types (https://github.com/tarantool/tarantool/issues/3809), so it is part of another issue (since it requires to refactor a lot of tests).. Not confirmed on 2.1:\n``\nTarantool 2.1.1-210-g4df4a7894\ntype 'help' for interactive help\ntarantool> box.cfg{}\n2019-02-13 20:39:21.430 [23217] main/102/interactive C> Tarantool 2.1.1-210-g4df4a7894\n2019-02-13 20:39:21.430 [23217] main/102/interactive C> log level 5\n2019-02-13 20:39:21.430 [23217] main/102/interactive I> mapping 268435456 bytes for memtx tuple arena...\n2019-02-13 20:39:21.430 [23217] main/102/interactive I> mapping 134217728 bytes for vinyl tuple arena...\n2019-02-13 20:39:21.441 [23217] main/102/interactive I> initializing an empty data directory\n2019-02-13 20:39:21.479 [23217] snapshot/101/main I> saving snapshot./00000000000000000000.snap.inprogress'\n2019-02-13 20:39:21.479 [23217] snapshot/101/main I> done\n2019-02-13 20:39:21.480 [23217] main/102/interactive I> ready to accept requests\n2019-02-13 20:39:21.480 [23217] main/104/checkpoint_daemon I> scheduled next checkpoint for Wed Feb 13 22:28:24 2019\n\n...\ntarantool> \\set language sql\n\ntrue\n...\n\ntarantool> CREATE TABLE t (id INT PRIMARY KEY);\n...\ntarantool> INSERT INTO t VALUES (1), (2), (3), (4), (5);\n...\ntarantool> SELECT abs(random()) AS x FROM t;\n\n\n\n[2467935731651350913]\n\n\n[1266204910185345866]\n[8060774415037890208]\n[5430535088656468933]\n[3278541528434270828]\n...\n\n```. Your example doesn't explode on this branch: https://github.com/tarantool/tarantool/tree/imeevma/gh-3832-no-column-types\nWhen it hits 2.1, this issue will be closed.\nProblem is in absence of types for resulting set during 'pragma' execution.\n@Totktonada \nMay I close issue as a duplicate to #3832?. Isn't it a duplicate of #3911 ?. Duplicate of #3917. Last point\n\n4. [biggest part of the issue]  Suppoty new type BLOB, represented as BINARY in format.\n    There's no such a type in formats, so need to introduce new field type and patch whole\n    Tarantool thoroughly\n\nnow is blocked by #4023 . Ok, my bad. Indeed, in the first example it's not an aggregate. But still, result looks confusing: to determine largest of the supplied expressions, they must be comparable. String literal 'str' and integer literal 1 are unlikely to be comparable in any sense (ofc we can implicitly cast int to str and compare two strings '1' and 'str', but I suppose this way is not what we really want).. There is a huge mess with blob and scalar types. Fortunately, we've realised that and decided to remove blob as a valid type and allow instead scalar type (since we failed to provide decent support of BLOB using only SCALAR; we need independent type integrated into NoSQL as well). And it is in scope of 2.1.2 release. SCALAR is a type-aggregation for all other types (available in SQL: INTEGER, NUMBER and STRING), i.e. its behaviour is the same as in NoSQL. Anyway, some day we will have to introduce that type in SQL to make it consistent with NoSQL. BLOB as a term still exists in SQL internals and in fact it represents strings to be encoded as MP_BIN (which matches definition of BLOB in NoSQL internals). For details, see doc request on this subject: https://github.com/tarantool/doc/issues/735\nOk, back to your example. Since BLOB doesn't mean SCALAR now (in every sense), it should result in error. If you have any questions concerning SQL SCALAR type (mb you will notice some bugs or general misbehaviour) or this particular issue, we can discuss it in dev mailing list.. Oh, sorry, I've slightly modified example (forgot to add LIMIT clause).. ",
    "Skorpyon": "closed, I just have example.lua launched :(. ",
    "Igorjan94": "\nwhich makes it difficult to read the log\n\nFro me, when tarantool starts \"spam\" with these messages, CPU becomes 100% and tarantool refuses to response at all. How about adding fromMap function too?\n~~~~~\ntarantool> t = {subscriber_status_id = 42, subscriber_id = 1, phone = '79160000000', contract_id = 1}\n\n...\ntarantool> subscriber:fromMap(t)\n\n[1, 1, '79160000000', 42]\n...\n~~~~~\nOr even inserting a map?\n~~~~~\ntarantool> subscriber:insert(t)\n\n\n\n[1, 1, '79160000000', 42]\n...\n~~~~~. Is it intended, that format[1] = {name = 'field1', 'unsigned'} doesn't have type =? . \n",
    "gdrbyKo1": "FFmpeg is able to compress similar/same messages like this:\n[mpeg2video @ 0x7faf3b824200] Invalid frame dimensions 0x0.\nLast message repeated 14 times\nIt looks rather simple when considering the case when the messages are all exactly the same, because then you can just keep the last message string in-memory at all times, along with some counter, and when an attempt is made to log the same message a second time, just increment the counter and suppress the message.\nContinue until either:\n- a different message shows up\n- some arbitrary time passes, like 2 seconds or so\nthen print out Last message repeated n times, reset the counter, and set the stored message to the most recent one.\nObviously this gets much more complicated when filtering similar-but-not-equal messages.. @Totktonada and I looked into this issue recently, and we were able to come up with a couple of implementations, but it's still not clear which of these would work best in this case. Almost all of the variants we tried were faster compared to others for certain inputs, and at the same time slower when called with some other parameters.\nI created this gist to preserve most of what we've experienced so far: https://gist.github.com/gdrbyKo1/7716a1ee37277f7f1387aff2a955f1f0\nThere, you can see the benchmark results of all the implementations. I obtained these with Tarantool running inside an otherwise idle VM with Debian Stretch (GCC toolchain). It should be noted that due to LuaJIT's GC and/or some other unidentified factors, the timings can potentially vary greatly between multiple Tarantool instances. It's likely needed to run more tests to achieve greater accuracy.. PHP uses char mask[256], but only if there's more than one character to strip: https://github.com/php/php-src/blob/3b0f05119383fe21ee75adaed3d0239ba8976aef/ext/standard/string.c#L785-L875. [The documentation for log.info(message) says that message should be a string.][1] Maybe this could be solved simply by returning an error if the passed parameter is of a different type?\n[1]: https://tarantool.io/en/doc/2.1/reference/reference_lua/log/#log-ug-message. It fails if the space itself is created from Lua:\n```lua\nbox.cfg{}\nbox.schema.space.create(\"TEST2\", {\n    format = {\n        {name = \"ID\", type = \"unsigned\"}, \n        {name = \"A\", type = \"unsigned\"}\n    }\n})\nbox.space.TEST2:create_index\"primary\"\nbox.space.TEST2:create_index(\"secondary\", {\n    parts = {\n        2, \"unsigned\"\n    },\n    unique = false\n})\nbox.sql.execute\"EXPLAIN QUERY PLAN SELECT * FROM test2 WHERE a = 5\"\n\n\n\n[0, 0, 0, 'SCAN TABLE TEST2']\n...\nBut works correctly if the space is created with SQL:lua\nbox.sql.execute\"CREATE TABLE test3 (id INT PRIMARY KEY, a INT)\"\n\n\n\nbox.space.TEST3:create_index(\"secondary\", {\n    parts = {\n        2, \"unsigned\"\n    },\n    unique = false\n})\nbox.sql.execute\"EXPLAIN QUERY PLAN SELECT * FROM test3 WHERE a = 5\"\n\n\n\n[0, 0, 0, 'SEARCH TABLE TEST3 USING COVERING INDEX secondary (A=?)']\n...\n```\nTarantool 2.1.1-32-ge3d931e08. \n\n\n",
    "stepanbabenko": "version: 1.7.3-403-gfa14851. ",
    "man0xff": "https://github.com/tarantool/tarantool/pull/2287. ",
    "coveralls": "\nCoverage increased (+0.008%) to 87.116% when pulling 5bfcf69846f9872f0a8a3d366a48c8e33c4f14b8 on gh-2225-tuple-compare-with-key into 10fc2dd3af1310a00e01373074ca2def21c76dbe on 1.7.\n. \n\nChanges Unknown when pulling 9efef2eaee8446c5826cfd29dfa077c204c1a133 on gh-2254-systemd-usermode-off into  on 1.6.\n. \n\nCoverage decreased (-0.01%) to 87.106% when pulling 9efef2eaee8446c5826cfd29dfa077c204c1a133 on gh-2254-systemd-usermode-off into 1ce51c8105652b424f5529dd7b65783653028c21 on 1.7.\n. \n\nChanges Unknown when pulling a0a4d5f21dd2d93517cabca44b47633a3eb92c96 on string-extensions into  on 1.7.\n. \n\nCoverage increased (+0.002%) to 87.248% when pulling ad8fbbf9c1d7318a867975be444d29dc12510cd1 on string-extensions into 52dcd9c4e11e612607ec500ae6ad190897e71952 on 1.7.\n. \n\nCoverage increased (+0.02%) to 87.197% when pulling 771f2e682186a9bd29f714853d91d673d3c3224f on string-extensions into b37fc52e1bd8e941af4524f740546a42d9d132ec on 1.7.\n. \n\nCoverage increased (+0.009%) to 87.191% when pulling 771f2e682186a9bd29f714853d91d673d3c3224f on string-extensions into b37fc52e1bd8e941af4524f740546a42d9d132ec on 1.7.\n. \n\nChanges Unknown when pulling 205bdbfc9fffa4dfbc80fea9991d5f6ab8e61275 on gh-2291-luaT_error-export into  on 1.7.\n. \n\nCoverage increased (+0.04%) to 87.223% when pulling e05c557264493e6040424ac6394c710df221ccce on gh-2100-vinyl-layout-tests into 84be30394be1414e9ac7d2dfe994cfa06f83b40e on 1.7.\n. \n\nCoverage decreased (-0.005%) to 87.071% when pulling b8f17179f8f2eff9789c9a2771fcdbd79752823d on gh-1662-index-info-v4 into be89e652b44e24a685a0781875e673f5fbe72638 on 1.7.\n. \n\nCoverage increased (+0.09%) to 87.271% when pulling a326a792925da7fd0302ed69387759bae0a8a3ef on vinyl-add-run-test into 249598bdfe505141566c03d7bc4ea705daed411d on 1.7.\n. \n\nChanges Unknown when pulling 8c3195e0acff0651114796e87c09cbd388b2e811 on gh-2339-reuse-session-id into  on 1.7.\n. \n\nChanges Unknown when pulling 613ebd4b9d782871e6b39add3bca00277027902b on gh-2340-extend-logging into  on 1.7.\n. \n\nChanges Unknown when pulling 8d475a5c2d5ded887925083d8f6674909181c65b on gh-2340-extend-logging into  on 1.7.\n. \n\nCoverage remained the same at 87.166% when pulling 0ed917cd226f29aba13723158ffac7124f4626e6 on tarantoolctl-man into 7798c10cbb2d3a3a32b613813b5f4b89460bd3ea on 1.7.\n. \n\nCoverage decreased (-0.02%) to 87.204% when pulling 072688a2f4c443fd99b614f7d494fd01cb63507b on gh-2048-refactor-extract-key into 822582e7d683e5662a6686f1f1028ddd9c4688ff on 1.7.\n. \n\nCoverage increased (+0.006%) to 87.252% when pulling 0110c7bcd538d566375525f2982c1a7466171c2c on gh-2048-refactor-extract-key into 52dcd9c4e11e612607ec500ae6ad190897e71952 on 1.7.\n. \n\nCoverage increased (+0.0003%) to 87.246% when pulling fc2534023a71fd74c2f37013be0c008faa9a786f on gh-2048-refactor-extract-key into 52dcd9c4e11e612607ec500ae6ad190897e71952 on 1.7.\n. \n\nCoverage increased (+0.002%) to 87.232% when pulling 1a0e85f99aa54f9620fea20be8a2aec9f0a89216 on gh-2048-refactor-extract-key into c10874f4b376c11ace10fc0f30bc8c2f05708d17 on 1.7.\n. \n\nCoverage increased (+0.05%) to 87.363% when pulling c921ac9eee8e58d1df8b3309c3066cf972f744cc on gh-2048-refactor-extract-key into 72d810590d941bb5795ab5950781db61e1e36a78 on 1.7.\n. \n\nCoverage decreased (-0.009%) to 87.261% when pulling 0d3f2dff01bba95a59e400649c2f5d1d218ced53 on gh-2048-refactor-extract-key into b82d5ac833055a009e85eca31d3c3d89a6349935 on 1.7.\n. \n\nCoverage decreased (-0.04%) to 87.14% when pulling 769f535e11a68e8a3d8de25ff0c05ed5b2d8f304 on gh-2048-refactor-extract-key into a08f20ff5b24a31e6fce49f12f0ba6eeb1fa6770 on 1.7.\n. \n\nCoverage decreased (-0.04%) to 87.14% when pulling 769f535e11a68e8a3d8de25ff0c05ed5b2d8f304 on gh-2048-refactor-extract-key into a08f20ff5b24a31e6fce49f12f0ba6eeb1fa6770 on 1.7.\n. \n\nCoverage decreased (-0.02%) to 87.227% when pulling a969fbc683e4a5a5658022ca71ac18c59e38183e on parallel-test-run into 52dcd9c4e11e612607ec500ae6ad190897e71952 on 1.7.\n. \n\nCoverage decreased (-0.03%) to 87.211% when pulling c34b84527a299999f8b9f3bd452c3890321bfd50 on fix-ipc-test into fb270689f050c187b9688226521e946a8d395d9d on 1.7.\n. \n\nCoverage decreased (-0.04%) to 87.184% when pulling aa0a7beb0f3230238beee348e3d6ac9be1ac51d8 on gh-2213-pwd-module into 822582e7d683e5662a6686f1f1028ddd9c4688ff on 1.7.\n. \n\nCoverage decreased (-0.02%) to 87.23% when pulling 4796be9328c64305a82b7721012869edfb0ab6c7 on gh-2195-netbox-call into 52dcd9c4e11e612607ec500ae6ad190897e71952 on 1.7.\n. \n\nCoverage remained the same at 87.213% when pulling fc823a8af77debe5fb0641508a53e7f370dd0d3f on gh-2195-netbox-call into 11c729f6c3da809942cb1366459ebf6d555c550b on 1.7.\n. \n\nCoverage decreased (-0.1%) to 87.11% when pulling a90725e4073c0631d78b8a092cb8eca65ff0abf3 on gh-940-sd-notify-v2 into c10874f4b376c11ace10fc0f30bc8c2f05708d17 on 1.7.\n. \n\nCoverage decreased (-0.008%) to 87.247% when pulling d9c58321f4f415e2f8258cd71f79e2b331060da6 on gh-2386-index-key-def-api into de27e27883bd37daf8e43cb9ce6db014d3bc7496 on 1.7.\n. \n\nCoverage increased (+0.01%) to 87.165% when pulling 0ce01844b3c0864f7e1b615decff624248de2efe on kyukhin/gh-2406-init-ctype into d40d611d57dd00b1a580c6df146cde9a9a8a0485 on 1.7.\n. \n\nCoverage increased (+0.01%) to 87.056% when pulling 51b73efec4af2e7a639191a161a6765ddbf2be80 on gh-2420-failed-build-mac-os into e5d781f367a49a801a3cb2a6a723c3e98ae5beb6 on 1.7.\n. \n\nChanges Unknown when pulling 1168c7f9a6395c3f7125b02a82a949316380473b on kyukhin/oob-git-modules-update into  on 1.8.\n. \n\nCoverage increased (+0.006%) to 87.16% when pulling 752a31a8d256a1596b430682889cfb5313052a25 on tarantoolctl-systemd-fixes into cd9a82dc0bd0ef286310c24af1f2924f3569888a on 1.7.\n. \n\nCoverage increased (+0.006%) to 87.16% when pulling 752a31a8d256a1596b430682889cfb5313052a25 on tarantoolctl-systemd-fixes into cd9a82dc0bd0ef286310c24af1f2924f3569888a on 1.7.\n. \n\nCoverage increased (+0.02%) to 81.492% when pulling 3acacbaa1a8311d22ec3827f32d4f26a3a729dc9 on aantonov/upgrade_pip into 73d75ed1a3090106455b33af98260553104c2f53 on 1.9.\n. \n\nCoverage increased (+0.04%) to 81.505% when pulling 1b3dfca9c94d8b6c2973faee2a27821c6edc6cf0 on aantonov/1_9_upgrade_pip into 73d75ed1a3090106455b33af98260553104c2f53 on 1.9.\n. \n\nCoverage increased (+0.004%) to 81.462% when pulling e1095adf5b00a6a66c6518fead6949190d5c80b9 on bug-template into 29df7d30909a32fa5453a6c3a7dd8ed3dbcd8bb9 on 2.0.\n. \n\nCoverage decreased (-0.003%) to 82.463% when pulling 1d8fd101a90043311cc8f38145a2c24247b5998e on issue-template into 2c6929204970c13a669d1bf21ac72ecaeef56d01 on master.\n. \n\nCoverage increased (+0.05%) to 82.326% when pulling b5fec5d9db9bbfb3c195b02597ed236a79334faf on rosik/luarocks-server-scanning into b2ddd18a1d8aff6304a564724380a02d65358b14 on 1.10.\n. \n\nCoverage decreased (-0.02%) to 82.253% when pulling c0df0f68b0d4fda967cbd2d617270d47cac9a950 on knazarov/editorconfig into 897a4952ee3a97272a3efd102adc3d70b5eef007 on 1.10.\n. \n\nCoverage decreased (-0.1%) to 82.466% when pulling bc9c992655e0451ce369c5c603ca3995a30d9331 on knazarov/package-loadpath into 8e98c0caab202bfcf38a2526277305871655580a on 2.1.\n. \n\nCoverage increased (+0.01%) to 83.007% when pulling acbd981d79fe7b2ad5cdf5c2c1e9c1d3613d89c9 on gh-3863-runtest-clean into 6666db8d5b5736abcfc5b71d1f7e1ac3dd34e730 on 2.1.\n. \n\nCoverage increased (+0.004%) to 82.933% when pulling 2874eabecf79061ee229a3f0873b0c7126f5c792 on 2.1-tutorial-update into d902cd116469ad6e51717b2e183c53abf15a66c9 on 2.1.\n. ",
    "fb929": "$ systemctl show tarantool | grep -i restart\nRestart=no\nRestartUSec=100ms\nhttps://www.freedesktop.org/software/systemd/man/systemctl.html\n\nand time settings are always exposed as properties ending in the \"\u2026USec\" suffix even if a matching configuration options end in \"\u2026Sec\", because microseconds is the normalized time unit used by the system and service manager.\n\neverything works as it should =)\nbut, if I'm kill tarantool manually \"kill \\<pid>\", systemd not restart daemon\nIt is probably worth changing the settings Restart=on-failure to Restart=always. ",
    "rkravchik": "1) As i've understood it is in xrow.cc:\n  #if 0\n    if (header->sync) {\n        d = mp_encode_uint(d, IPROTO_SYNC);\n        d = mp_encode_uint(d, header->sync);\n        map_size++;\n    }\n  #endif\n  And it was added by https://github.com/tarantool/tarantool/commit/d130255ee28abc07c850f313ad6d38962d705d26 on #801.\n2) When i'm trying to join (send JOIN request) with UUID that is already in cluster space:\n  v1.6.9 response with snapshot and errror 40 duplicate uuid in cluster and no VCLOCK\n  v1.7 send VCLOCKs without any errors\n3) Have seen in source this morning already. Thank you.\n4) Will fix be applied to v1.6.9 (not only 1.7.5)?. > I wonder why do you need SYNC value in IPROTO_JOIN response?\nMaybe because that is said in docs? :)) \nIt wasn't \"needed\", but \"expected\".\nWell, it isn't critical at all. Waiting for v1.7.5\nHope, the docs will be more relevant to reality in the future.. This issue is connected with #2572 due to @viciious comment:\n\nA read-only replica with fixed client-side fake UUID ('0000...00') would also work in our case.\n\nAnd the story lasts over the year.... It would be nice if this feature would be backported to 1.6.9.. ",
    "mikkiek": "I've similar issue using docker container. After connection to container:\n```\nunix/:/var/run/tarantool/tarantool.sock> \\set language sql\n\n\ntrue\n...\nunix/:/var/run/tarantool/tarantool.sock> \\set delimiter ;\n\n\n\nerror: Can not install delimiter for net box sessions\n...\nunix/:/var/run/tarantool/tarantool.sock> CREATE TABLE table1 (column1 INTEGER PRIMARY KEY, column2 VARCHAR(100));\n\n\n...\nunix/:/var/run/tarantool/tarantool.sock> INSERT INTO table1 VALUES (1, 'A')\n\n\nerror: SQL logic error or missing database\n...\n``\nLooks like nothing work exceptCREATE TABLE`. \n",
    "morrme": "sql server has an addon clause to the CREATE VIEW statement: WITH SCHEMABINDING , that prevents this behavior.. The UNION statement may work . . ",
    "kevpie": "What are the possibilities of supporting a RETURNING clause from INSERT, UPDATE, DELETE and returning all the modified tuples?\nThis a most useful feature and could be a nice addition.  Also when used along with CTEs you have a good way to return the outcome of INSERTS, UPDATES or DELETES and pass them into INSERTS, UPDATES or DELETES.  Utilizing this type of SQL query can simplify many scenarios.\nAnother neat thing may be even a way to directly enqueue deleted or updated tuples into a queue if they where addressable through SQL. \n. ",
    "Fedora7": "@rtsisyk could you provide more information about why the LJ_GC64 feature doesn't make  sense with the current implementation of GC ?  Thanks. If I put  require('mobdebug').start(\"ip address\") in a abc.lua file or lua module,\nand then run it by dofile('abc.lua') or require('abc') on tarantool server's console ,\nthe debugger doesn't stop for debugging.\nBut if I run it as one time script in command line:  tarantool abc.lua , it worked and connected to zeroBrane studio for debugging.\nCan it be the way how MobDebug determine \"main\" in lua ? or it's not compatible with tarantool fiber since the MobDebug use luajit native coroutine inside ? Thanks. ",
    "tonyfreeman": "done. There are exactly two points described in Motivation, but I see your point.. This is true for a C module as well, I've tested with function1_module.so:\n```lua\n-- works without the library name in cpath\nbox.schema.func.create('function1_module.function1', {language = \"C\"})\n-- only works with the function1_module.so in cpath\nbox.schema.func.create('function1', {language = \"C\"})\n``\nalthough I expected?.so` means it should be searching in all of the libraries in the directory.. @Gerold103\nSorry about the term 'module'. We're talking about C stored procedures, not modules.. >And I can not understand, how it works now, even if you add full path to .so to cpath. On my laptop it does not work. Only method that works is described above.\nlua\nbox.cfg { listen = 4444 }\npackage.cpath = 'function1_module.so;function1_module.dylib;'..package.cpath\nbox.schema.user.grant('guest', 'read,write,execute', 'universe', nil, {if_not_exists = true})\nbox.schema.func.create('function1', {language = \"C\", if_not_exists = true})\nrequire('console').start()\n```lua\ntarantool> conn = require('net.box').connect('localhost:4444')\ntarantool> conn:call('function1')\n\n\n[]\n...\n``\nI'm just curious if it does work with full module name why don't support?.so`. \n",
    "larets": "a workaround is {parts={unpack(xuu)}} but hey. Yep my tarantool installed via pip was 1.6.7, checked that it's fixed in 1.7.4. ",
    "aleksej-paschenko": "Minimal amount of code that can reproduce then bug:\n```lua\nbox.cfg{\n    listen = 3304,\n    log = '2.log',\n    log_level = 6,\n    pid_file = '2.pid',\n}\nbox.once('init', function ()\n-- Sale tuple: (account_id, id, date, cost)\n\nlocal sale_space = box.schema.create_space(\"sale\", {engine = 'vinyl'})\nsale_space:create_index('primary',\n    {type = 'TREE', parts={1, 'int', 2, 'int'}})\n\nbox.schema.user.grant('guest', 'read,write,execute', 'universe')\n\nfor i=1,1000000 do\n    box.space.sale:insert{1, i, '2017-10-10', 0.0}\nend\n\nend)\nlocal msgpack = require('msgpack')\nprint ('press ctrl + c')\nbox.begin()\nfor _, t in box.space.sale.index.primary:pairs() do\n    box.space.sale:replace{t[1], t[2], t[3], msgpack.NULL}\nend\nbox.commit()\n```\nPlease run tarantool app.lua several times and press ctrl + c after the corresponding message. \nI have a second stacktrace for this app.lua\n```\n0  0x40ed41 in sig_fatal_cb(int)+129\n1  0x7f2ae616d390 in ?\n2  0x48500f in vy_mem_iterator_restore+1807\n3  0x464ab8 in vy_merge_iterator_next_key+984\n4  0x46e687 in vy_read_iterator_merge_next_key+55\n5  0x474211 in vy_read_iterator_next+113\n6  0x477ed6 in vy_cursor_next+278\n7  0x45faeb in iterator_next(iterator*)+27\n8  0x43ee4d in box_iterator_next+221\n9  0x4d48e8 in lbox_iterator_next+104\n10 0x50d577 in lj_BC_FUNCC+52\nAborted (core dumped)\n```. ",
    "cyanide-burnout": "@IlyaMarkovMipt\nIf you check my code, the binded port should be random. Destination port for sendto should be defined.\nOk, I tried to do next:\n```\n  handle:bind('0.0.0.0', handle:name().port)\n  handle:setsockopt('SOL_SOCKET', 'SO_RCVTIMEO', 200000000)\nfor _, request in pairs(requests) do\n    handle:sendto(address, port, request)\n    local response, sender = handle:recvfrom(256)\n    if response == nil then\n      result = handle:errno()\n      break\n    end\n```\nGot fail in the result and code 11 which is EAGAIN\nFully the same behavior if I set binded port manually:\nhandle:bind('0.0.0.0', 55555)\nGot code 11 again\n. ",
    "SudoBobo": "@pgulutzan can you please explain what is the exact issue? As far as I understand requirement to specify OLD/NEW table is an ansi standard requirement. Also standard does not provide any other way to access transient tables.\nI tried statements from the ticket in MySQL and IBM DB2, in both cases specifying NEW/OLD transient table was mandatory.. Ubuntu 17.10 artful, branch 1.8. As a temporary solution, we have banned different sorting orders in ORDER BY + LIMIT (#4038). Here are the tests which should be uncommented when the problem with ORDER BY + LIMIT would be solved:\ntest/sql-tap/orderby6.test.lua 1.21.* , 1.4.2, 1.4.3. I've tried to reproduce the problem in 2.1 and it appears that the problem is no more actual, so I close the ticket.. Well, commit message (of the commit which was supposed to close the ticket) contains lines:\n\u0421loses #3251\n\u0421loses #3334\nAs we can see, this did not close #3334. It's written here that something like 'closes #34, closes #23' should be used.. After verbal discussion we decided to expand ticket scope; now it includes fixing \n*Table->someProperty -> *Table->def->someProperty in both select.c and where.c\nAlso it includes the same change with Index and index_def. In branch  related to #3272 usage of Table->space_def for metadata in select.c and where.c is implemented. Also in this branch all usages of Table->some_property in select.c and where.c are fixed to Table->def->some_property. ",
    "quasilyte": "Can't reproduce with becd1e8260109e5775d07537e4cc9e1c4aaec577.\n```\ntarantool> create table t(a int primary key);\n\n...\ntarantool> insert into t values (1), (2);\n...\ntarantool> select * from t limit 1.5;\n\nerror: datatype mismatch\n...\n\ntarantool> select * from t limit \"hello world\";\n\nerror: 'no such column: hello world'\n...\n```. @kostja, as soon as I get more familiarity with the project.\nMaybe in a week or two.. I was distracted by other projects and activities, sorry.\n. \n",
    "moknomo": "Hmm, I can't reproduce it too.. ",
    "makorne": "```\ntarantool\nTarantool 1.9.1-55-g1046f8516\ntype 'help' for interactive help\ntarantool> csv = require('csv')\n\n...\ntarantool> csv.load('. ,')\n\nerror: string length overflow\n...\n```\n. \n",
    "RunsFor": "Hi!\nI also ran into this problem with docker-for-mac Version 17.06.0-ce-mac17 (18432).\nI hope this post will be helpfull for those playing with tarantool on their macs.\nSteps to reproduce:\n1. Start server from the documentation example\n2. Attach to the tarantool server using console command\n3. Put macbook into sleep mode\n4. Wake it up next day in the morning\n```\n\u21d2  docker run \\\n  --name mytarantool \\\n  --rm -d -p 3301:3301 \\\n  tarantool/tarantool:1.7\nec65045d270862299e079118abe3820d233d39aaadd9aa36e674fb631dfefc08\n\u21d2  docker exec -it mytarantool console\nconnected to unix/:/var/run/tarantool/tarantool.sock\nunix/:/var/run/tarantool/tarantool.sock> Segmentation fault\nCurrent time: 1500766540\nPlease file a bug at http://github.com/tarantool/tarantool/issues\nAttempting backtrace... Note: since the server has already crashed,\nthis may fail as well\n0  0x55fb3c511389 in ?\n1  0x7f801ea00e07 in ?\n2  0x55fb3c70fb9b in ?\n3  0x55fb3c7130ff in ?\n4  0x55fb3c5fffd7 in ?\n5  0x55fb3c5102c9 in ?\n```\nProbably, this relates to https://github.com/docker/for-mac/issues/17 issue.\nThey fixed it with the workaround explained in https://github.com/docker/for-mac/issues/17#issuecomment-300734810. But it seems it doesn't help for this use case since solution (time sync is done in guest vm) was not ideal. More info why they can't do any better right now can be found in https://github.com/moby/hyperkit/issues/110#issuecomment-289703916.. Description is very similar to #2527.\n@albenik which version of tarantool did you use?. @albenik This bug should be fixed in 1.7.6. Could you please try on the newer version? There is one available:\nbash\n$ brew info tarantool                                                                                                                                       \ntarantool: stable 1.7.6.12 (bottled), HEAD\nIn-memory database and Lua application server\nTo update use following commands:\nbash\n$ brew update\n$ brew upgrade tarantool. @Totktonada Do you mind as a possible solution to return not table but cdata object which would throw an error when trying to update any field?\nThis sounds like \"more breaking\" change than your proposition, but intuitively more consistent.. ",
    "isopov": "Maybe it will be helpful. On reboot with tarantool running in /var/log/tarantool/example.log there is\n2017-06-18 16:04:43.877 [6912] main C> got signal 15 - Terminated\n2017-06-18 16:04:43.877 [6912] main main.cc:478 !> failed to remove pid file '/var/run/tarantool/example.pid': No such file or directory\nHowever after starting tarantool this file is present:\n$ sudo ls /var/run/tarantool/\nexample.control  example.pid. I think yes. Should I close it as duplicate, or leave it for testing on Ubuntu?. failed to remove pid file is on stopping and is not an attempt to start, AFAIU. ",
    "graywolfxxx": "Even if box.once() finished successfully, I guess it couldn't save information about it to special service space because of read-only mode.. ",
    "mkv": "Thanks! Instructions from https://tarantool.org/en/download.html works fine!\n. ",
    "leo-yuriev": "\u0423\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044b\u0439 cmake 3.9 \u0442\u0430\u043c \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u0441\u043e\u0432\u0441\u0435\u043c.\n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0431\u043e\u0440\u043a\u0430 \u0441 LTO \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u044f\u0434\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0432 \u043a\u043e\u0434\u0435 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 cmake.\n\u041f\u0440\u043e\u0449\u0435 \u0433\u043e\u0432\u043e\u0440\u044f, CI \u0434\u043b\u044f pull-request \u043d\u0435 \u043f\u0440\u043e\u0448\u0435\u043b \u043d\u0435 \u0438\u0437-\u0437\u0430 \u0434\u0435\u0444\u0435\u043a\u0442\u043e\u0432 \u0432 LTO, \u0430 \u0438\u0437-\u0437\u0430 \u043d\u0435\u0434\u043e\u0447\u0435\u0442\u043e\u0432 \u0432 \u043a\u043e\u0434\u0435.\n\u0412 cmake 3.9 \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u0430 \u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0448\u0442\u0430\u0442\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 LTO/IPO, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432 3.8 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f Intel C/C++. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0432 \u043f\u0430\u0442\u0447\u0435 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c IPO \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 CMake, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e. \u041d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e.\n\u041e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u043c\u0435\u0447\u0443, \u0447\u0442\u043e \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c IPO \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 CMake 3.9-rc5 \u0434\u043b\u044f MSVC - \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.\n. @rtsisyk, @kostja, \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e.\n\u0417\u0430\u043a\u0440\u044b\u0432\u0430\u044e \u0437\u0430 \u043d\u0435\u0432\u043e\u0441\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c\u044e.\n\u041d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442/\u043e\u0442\u0432\u0435\u0442 \u0432\u044b\u0448\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u043d\u0443\u0436\u043d\u043e\u0441\u0442\u0438 cmake 3.9 \u0438 \u043d\u0435-\u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0438\u0437-\u0437\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0432 \u043a\u043e\u0434\u0435 tnt.. ",
    "pansershrek": "I found next realisation of this function in standard libraries of other languages\nstring.decode(\"hex\") in Python,\nHex.decodeHex in Java,\nEncoding.ASCII.GetString in C#,\nboost::algorithm::unhex in C++/boost,\nhex2bin in PHP,\nHexToBin in Delphi,\nlist_to_binary in Erlang.\nI prefer to use string.decodehex to name this function.. I write 2 version of this function without and with ffi, they are here https://github.com/tarantool/tarantool/blob/gh-2562-string-bin/src/lua/string.lua, and they names are string.fromhex and string.fromhex_ffi. The benchmark shows that the function with ffi is faster. So i think i should make function with ffi. The code of benchmark: \n!/usr/bin/env tarantool\nlocal str = {}\nlocal len = 1\nlocal base = \"40\"\nfor i = 1,50 do\n    str[len] = base\n    for i = 1,10 do\n        str[len] = str[len] .. str[len]\n    end\n    base = base + 1\n    len = len + 1\nend\nprint(\"GO\")\nlocal b = os.time()\nlocal e = 0\nfor j = 1, 10000 do\n    for i = 1,50 do\n        string.fromhex(str[i])\n    end\nend\ne = os.time()\ne = e - b\nprint(e)\nb = os.time()\ne = 0\nfor j = 1, 10000 do\n    for i = 1,50 do\n        string.fromhex_ffi(str[i])\n    end\nend\ne = os.time()\ne = e - b\nprint(e). I add more faster realisation function here https://github.com/tarantool/tarantool/blob/gh-2562-string-bin/src/lua/string.lua, and named as string.fromhex_new(it's temporary). Also i write new benchmark: \n!/usr/bin/env tarantool\nlocal digest = require('digest')\nlocal ffi = require('ffi')\nlocal fiber = require('fiber')\nlocal str = {}\nlocal step = 1000\nlocal num = 30\nlocal sumbl = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"}\nfor i = 1,num do\n    local len = ((i * 17911 + 9137) % 10317) * 2\n    local ptr = sumbl[(i * 7 + 13)% 15 + 1]..sumbl[(i * 5 + 27)% 15 + 1]\n    for j = 1,len do\n        ptr = ptr..sumbl[(i * 7 + j * 11 + 13)% 15 + 1]..sumbl[(i * 5 + j * 7 + 27)% 15 + 1]\n    end\n    str[i] = ptr\nend\nprint(\"GO\")\nlocal ans = 0\nlocal b = fiber.time()\nlocal e = 0\nfor j = 1, num do\n    for i = 1, step do\n        ans = ans + digest.crc32(string.fromhex(str[j]))\n    end\nend\nfiber.yield()\ne = fiber.time()\ne = e - b\nprint(\"Standart \"..e)\nans = 0\nfiber.yield()\nb = fiber.time()\ne = 0\nfor j = 1, num do\n    for i = 1, step do\n        ans = ans + digest.crc32(string.fromhex_ffi(str[j]))\n    end\nend\nfiber.yield()\ne = fiber.time()\ne = e - b\nprint(\"FFI \"..e)\nans = 0\nfiber.yield()\nb = fiber.time()\ne = 0\nfor j = 1, num do\n    for i = 1, step do\n        ans = ans + digest.crc32(string.fromhex_new(str[j]))\n    end\nend\nfiber.yield()\ne = fiber.time()\ne = e - b\nprint(\"Fast \"..e)\nprint(ans)\n. I add new version of this function and more comprehensive benchmark.\nIf i may add third-party files, then the code of benchmark and report is here\nBenchmark.zip\nReport.pdf\n. I bench 2 tests consist of 1000 string with length 50 and 20, and fromhex_fast is the best. As for table lookup  i think this way requires additional memory and it will be not faster to convert hex char to char.\n\n\n. Unexpectedly, but you was right. Function with table lookup is faster.\nReport_table.pdf\n. This is benchmark of function with and without table to convert hex-char to number.\nBenchmark.pdf\n. ",
    "ImeevMA": "At the end it was decided to return all auto-generated in current statement ids. It will be used in JDBC driver: getGeneratedKeys(). After some research I found out:\nODBC\nAccording to documentation:\nEach INSERT, UPDATE, and DELETE statement returns a result set containing only the number of rows affected by the modification.\nJDBC\nAccording to documentation:\nEach INSERT statement returns a result set. This result set can contain:\n1. Number of rows affected by the modification.\n2. All auto-generated in this statement keys. Method getGeneratedKeys() is used to get these auto-generated values. This method returns ResultSet object. However, what data contains this object should be decided by vendor.\nAfter this I read what other vendor returns. I found that in case flag RETURN_GENERATED_KEYS was used returned ResultSet contains:\nDB2: All values that were generated during this INSERT statement. Does not work with executeBatch().\nPostgreSQL: All columns of all inserted records. Works with executeBatch().\nMS SQL: Only one generated value. This is bug. Does not work with executeBatch().\nOracle DB: ROWID of inserted row. This ROWID can be used to retrieve other columns. Does not work with executeBatch().\nNow we have to decide what to return via IPROTO:\n1) Only auto-generated IDs.\n2) All rows in which ID was generated.\n3) All rows.\n4) Nothing (in this case getGeneratedKeys() should throw SQLFeatureNotSupportedException).. Hello, @pgulutzan!\nFrom your comment I can see two problems:\n1) We cannot see value of strength option. We can assume that it has some default value.\n2) We don't know what is this default value according to Comparison Levels\nNow I am going to make strength option visible. But before that, I'd like to ask you: what level should I use as default value? Personally, I think that identical is most appropriate one. But I am not sure about this.. Reproduce yaml:\n- [sql/iproto.test.lua, vinyl]\n- [sql/drop-index.test.lua, vinyl]\n- [sql/gh-3613-idx-alter-update-2.test.lua, vinyl]\n- [sql/drop-table.test.lua, vinyl]\n- [sql/errinj.test.lua, memtx]\n- [sql/gh-3199-no-mem-leaks.test.lua, vinyl]. Even though this works in a wrong way it allowed us to find another error - #3670 \nIt may be good idea to test mentioned there statements in patch for this issue.. One of the way to fix this issue is to fix #3796. ",
    "pjao": "This breaks a function of the expirationd (https://github.com/tarantool/expirationd/issues/22). ",
    "rosik": "I have two proposals:\n1. support command-line options --only-server and --server from luarocks\n2. make tarantoolctl rocks a separate utility, something like tarantoolrocks\nThe result I want to achieve:\nBe able to fetch rockspecs and it's dependencies from custom server\n. I dislike, because your definition of array differs from other languages and therefore may be misleading.\nIn C++ I can store nullptr in std::vector<void*>\nIn Python len([1, None, 3, None, None]) == 5. What do you think about the following concept api:\nlua\nclient_object:request('GET', 'http://localhost/route?args', nil, {unix_socket = \"/var/run/docker.sock\"})\nlike in curl:\nconsole\ncurl --unix-socket /var/run/docker.sock http://localhost/containers/json. Are you using strict mode?\n https://tarantool.org/en/doc/1.7/reference/reference_lua/strict.html\n https://github.com/tarantool/tarantool/blob/1.7-next/src/lua/strict.lua\n\nBy default strict mode is off, unless tarantool was built with the -DCMAKE_BUILD_TYPE=Debug option\n\nUnder strict mode you still can set _G.var from main().\nIf you really really need to work with globals you can use rawget, rawset.\n. Could you please provide an example when such syntax may be useful? Especially require('../foo'). For this problem to be solved the following requirements should be fulfilled:\n\n\nluarocks should be able to find CMAKE_INSTALL_PREFIX=/opt/tarantool-install through external_deps_dirs config parameter.\nIt could be done by adding it to the site_config.lua\n\n\nrockspec should pass TARANTOOL_DIR to cmake variables\nbuild = {\n    type = 'cmake';\n    variables = {\n        TARANTOOL_DIR=\"$(TARANTOOL_DIR)\";\n        -- ...\n    };\n}\n\n\nFindTarantool.cmake should properly use find_path() cmake function:\nfind_path(TARANTOOL_INCLUDE_DIR tarantool/module.h\n  HINTS ${TARANTOOL_DIR} ENV TARANTOOL_DIR\n  PATH_SUFFIXES include\n). I have already fixed items 2, 3 earlier in modulekit repo\nItem 1 is still to be fixed in tarantool repo. Please, trigger also relay state events. The same problem affects replicaset_uuid param, could you fix it together, please\n. x > ULLONG_MAX return nil, and it's ok.\nI think x < LLONG_MIN should behave the same. Further problem investigation has shown that there is no bug. Rights were not updated by the moment we encountered an error. Don't forget about unpack. This is an appropriate solution. I move the issue to https://github.com/tarantool/doc/issues/613. Yaroslav Dynnikov, [26.10.18 13:47]\n\u0427\u0442\u043e \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0441\u0430\u0439\u0434-\u043a\u043e\u043d\u0444\u0438\u0433\u0430, \u043c\u043d\u0435 \u043e\u043d \u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u043c \u043c\u0435\u0441\u0442\u043e\u043c.\n\u0412\u0441\u0435 \u044d\u0442\u0438 \u043f\u0443\u0442\u0438 \u043d\u0430\u0434\u043e \u0434\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0432 \u043a\u043e\u043d\u0444\u0438\u0433 \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442. \u0410 \u043f\u0438\u0445\u0430\u0442\u044c \u0438\u0444\u044b \u0432 \u0446\u043c\u0435\u0439\u043a\u043e\u0432\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u043a\u0430\u043a-\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u043e\n\n\nYaroslav Dynnikov, [26.10.18 13:56]\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043b \u0432 luarocks/cfg.lua, \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0442\u0443\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0432\u043b\u0435\u0437\u0442\u044c, \u043d\u043e \u043d\u0430\u0434\u043e \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441: \u0445\u043e\u0442\u0438\u043c \u043b\u0438 \u043c\u044b \u0432\u0438\u0434\u0435\u0442\u044c \u043f\u0430\u0442\u0447 \u0432 \u0440\u0435\u043f\u0435 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0430, \u0438\u043b\u0438 \u0432 \u0440\u0435\u043f\u0435 \u043b\u0443\u0430\u0440\u043e\u043a\u0441\nYaroslav Dynnikov, [26.10.18 13:57]\n\u043b\u0443\u0430\u0440\u043e\u043a\u0441, \u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u043f\u0440\u043e \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b \u043f\u043e\u0447\u0442\u0438 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\nrosik@rlap:/opt/tntsrc/third_party/luarocks$ grep -Ri tarantool\nsrc/luarocks/cfg.lua:if rawget(_G, '_TARANTOOL') then\nsrc/luarocks/cfg.lua:    -- Tarantool\nsrc/luarocks/cfg.lua:    local tarantool_version = _TARANTOOL:match(\"([^-]+)-\")\nsrc/luarocks/cfg.lua:    defaults.rocks_provided[\"tarantool\"] = tarantool_version..\"-1\"\nYaroslav Dynnikov, [26.10.18 13:59]\n\u0418 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0440\u044f\u0434 \u043b\u0438 \u0432 \u043b\u0443\u0430\u0440\u043e\u043a\u0441 \u0431\u0443\u0434\u0435\u0442 \u0443\u043c\u0435\u0441\u0442\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c if fio.path.is_dir(tarantool_include_dir) then. The only problem is that tarantoolctl parses options itself.\nPublic API can be kept with something like tarantoolctl rocks -> os.execute('tarantoolrocks ' .. args). It's not too simple, but it exists. I can share it privately (and logs too).. If you assign it to someone, I can share a reproducer directly to that person.. The doc says:\nSituation 3: configuration update\n...\n1. Try to connect to all nodes from box.cfg.replication,\nor to the number of nodes required by replication_connect_quorum,\nwithin the time period specified in replication_connect_timeout.\nI like this wording, and expect that box.cfg would return as soon as it reaches the quorum. In my case, quorum=0, it means it should return instantly.\n. I know this feature is connected with json output.\nCurrent behavior (string)\ntarantool> log.info(\"INFO Message\")\n{\"time\": \"2018-12-03T12:35:41.594+0300\", \"level\": \"INFO\", \"message\": \"INFO Message\", \"pid\": 9346 , \"cord_name\": \"main\", \"fiber_id\": 101, \"fiber_name\": \"interactive\", \"file\": \"[C]\", \"line\": -1}\nCurrent behavior (table):\ntarantool> log.info({foo='bar'})\n{\"time\": \"2018-12-03T12:36:02.819+0300\", \"level\": \"INFO\", \"foo\":\"bar\", \"pid\": 9346 , \"cord_name\": \"main\", \"fiber_id\": 101, \"fiber_name\": \"interactive\", \"file\": \"[C]\", \"line\": -1}\nProposed behavior:\ntarantool> log.info({foo='bar'})\n{\"time\": \"2018-12-03T12:36:02.819+0300\", \"level\": \"INFO\", \"message\":{\"foo\":\"bar\"}, \"pid\": 9346 , \"cord_name\": \"main\", \"fiber_id\": 101, \"fiber_name\": \"interactive\", \"file\": \"[C]\", \"line\": -1}. I dislike inconsistency between formats:\nWith json format both outputs are the same:\n```\ntarantool> log.info({message = 'foobar'})\n{\"time\": \"2018-12-04T12:26:44.096+0300\", \"level\": \"INFO\", \"message\":\"foobar\", \"pid\": 27657 , \"cord_name\": \"main\", \"fiber_id\": 101, \"fiber_name\": \"interactive\", \"file\": \"[C]\", \"line\": -1}\n\n...\ntarantool> log.info('foobar')\n{\"time\": \"2018-12-04T12:26:53.081+0300\", \"level\": \"INFO\", \"message\": \"foobar\", \"pid\": 27657 , \"cord_name\": \"main\", \"fiber_id\": 101, \"fiber_name\": \"interactive\", \"file\": \"[C]\", \"line\": -1}\n\n...\n```\nWith plain format output differs:\n```\ntarantool> log.info({message = 'foobar'})\n2018-12-04 12:27:52.382 [27657] main/101/interactive I> {\"message\":\"foobar\"}\n\n...\ntarantool> log.info('foobar')\n2018-12-04 12:28:06.096 [27657] main/101/interactive I> foobar\n\n...\n```\nI would not be surprised if it was\n```\ntarantool> log.info({message = 'foobar', file = 'bazz'})\n2018-12-04 12:34:10.584 [27657] main/101/interactive I> \"foobar\"\n\n...\n```. Btw this seems to be related with #781 . Also it would be nice to explicitly specify, which part is a sequence. ",
    "icamys": "@Mons +1 for provide container with decoded values. ",
    "vicpopov": "\u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 https://github.com/tarantool/tarantool/pull/2684. > Please use 'strict' mode\nOK, let's set 'strict' mode by default in tarantool? Of course with possibility to disable it.\n\ndistinguish none from a non-existing variable.\n\nSorry I was not aware that it is not distinguishable. No such things as variable != nil in lua ?\n. ",
    "ctpo6": "\u041a\u043e\u0434, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u0440\u0430\u0448\u0438\u0442\u0441\u044f, \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432:\n```\nlocal function start(self)\n    -- box.once('_init_lobby', function()\n        if box.space.rooms then\n            box.space.rooms:drop()\n        end\n        box.schema.create_space('rooms')\n    box.space.rooms:create_index(\n        'primary', {type = 'hash', parts = {schema.ROOM.id, 'unsigned'}}\n    )\n    box.space.rooms:create_index(\n        'name', {type = 'tree', parts = {schema.ROOM.name, 'str'}}\n    )\n--)\n-- box.space.rooms:truncate()\n\n\nif common.sql_table_exists(\"rmatch\") then\n    box.sql.execute([[DROP TABLE rmatch]])\nend\nif common.sql_table_exists(\"crmatch\") then\n    box.sql.execute([[DROP TABLE rmatch]])\nend\n\nbox.sql.execute([[\n\nCREATE TABLE rmatch(\nid UNSIGNED BIG INT PRIMARY KEY,\nmax_players INTEGER,\nn_players INTEGER,\nis_full BOOLEAN,\nis_open BOOLEAN,\nis_visible BOOLEAN)\n    ]])\n    box.sql.execute([[\n        create index idx_rmatch_max_players on rmatch (max_players)\n    ]])\n    box.sql.execute([[\n        create index idx_rmatch_n_players on rmatch (n_players)\n    ]])\n    box.sql.execute([[\n        create index idx_rmatch_is_full on rmatch (is_full)\n    ]])\n    box.sql.execute([[\n        create index idx_rmatch_is_open on rmatch (is_open)\n    ]])\n    box.sql.execute([[\n        create index idx_rmatch_is_visible on rmatch (is_visible)\n    ]])\nlocal res, schema_room = avro.create(schema.room)\nassert(res, 'room schema create failed')\nres, self.room_model = avro.compile(schema_room)\nassert(res, 'room schema compile failed')\n\nlocal tcp_server, addr = socket.tcp_server('0.0.0.0',\n    3311,\n    function(...) return self:tcp_handler(...) end )\n\nend\n```. Replacement for box.sql.execute()?. Documentation already updated? If not yet, when expected?. Provided.. \u041d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043b\u0438 \u043e\u043f\u0446\u0438\u0438 wait_connected \u0438 connect_timeout \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u043c\u0438? \u0415\u0441\u043b\u0438 \u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044e wait_connected=false, connect_timeout=1, \u0442\u043e \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0443 \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0447\u0435\u0440\u0435\u0437 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0443.. ",
    "xpk": "Guys, this is a major blocker for using Tarantool on arm64. Any suggestions on how one would fix / work around this?\nLuaJIT developers suggest replacing lightuserdata with FFI bindings (see https://github.com/LuaJIT/LuaJIT/pull/230 and https://github.com/torch/torch7/issues/1035), but not being overly familiar with C/Lua interaction and especially Tarantool internals, I'm not sure how tricky this would be and if there is a better way.... ",
    "sitnikovv": "It is better to do optional, so as not to break compatibility.. @Totktonada \nFor example, if you worked with the console through expect. There is no quit command in the current console, no exit commands.\n. ",
    "theonedemon": "any news ?. ",
    "greatGregLiu": "Tanrantool is great in-memory db and rust is memory-safe static strong typed language. Combining them We can see the power.\n@rtsisyk any progress on these\uff1fThanks. ",
    "gekpp": "- version: 1.7.5-0-g24b70de10\n  id: 1\n  ro: false\n  vclock: {1: 12}\n  uptime: 170672\n  lsn: 12\n  vinyl: []\n  cluster:\n    uuid: e547a080-f3b0-465e-b99a-5d2e9263fa2b\n  pid: 1\n  status: running\n  signature: 12\n  replication:\n    1:\n      id: 1\n      uuid: 2b518fea-d629-4f9c-b2e8-1cb43e826f70\n      lsn: 12\n  uuid: 2b518fea-d629-4f9c-b2e8-1cb43e826f70. Hello! No we haven\u2019t. It we have once again I\u2019ll give more details.\nThank you\n\nOn 27 Oct 2017, at 8:53 PM, Konstantin Osipov notifications@github.com wrote:\nHave you seen this issue since? Unfortunatley, without steps to reproduce we will not be able to fix it.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/tarantool/tarantool/issues/2749#issuecomment-340040589, or mute the thread https://github.com/notifications/unsubscribe-auth/ADk70gKjaYIhZn8H8wHyz-Ga0l4nT4xRks5swhiSgaJpZM4PQ98j.\n\n\n. libcurl is not installed on my host machine. In cocker container the version is:\n``` apk info libcurl\nlibcurl-7.60.0-r1 description:\nThe multiprotocol file transfer library\nlibcurl-7.60.0-r1 webpage:\nhttp://curl.haxx.se\nlibcurl-7.60.0-r1 installed size:\n446464. @kostja Thank you for reply.\nIn my case, when I use docker to run tarantool, should I update libcurl on my host system or build docker image with fresh libcurl? \nShall I create an issue in https://github.com/tarantool/docker?. ",
    "opomuc": "\n[x] Create prototype of server side\n\n\n[x] space format\n\n\n\n\n[x] post handlers\n\n\n\n\n[x] vinyl storage for raw reports\n\n\n\n\n[x] add report id to every incoming report\n\n\n\n\n[x] add report version field\n\n\n[x] Create prototype of client side\n\n\n[x] wrapper around box.cfg\n\n\n\n\n[x] create a new fiber to send a report after timeout\n\n\n[x] Try prototypes on a real set-up\n\n\n[x] configure nginx to forward requests\n\n\n[x] Consider performance issues\n\n\n[x] what is an assumed rps?\n\n\n\n\n[x] any regression?\n\n\n\n\n[x] http request timeouts?\n\n\n\n\n[x] server reload?\n\n\n[x] Consider security issues\n\n\n[ ] user privileges on database?\n\n\n\n\n[x] http authentication for reports?\n\n\n[x] Compose module description for review\n[x] Refactor prototypes and integrate them into Tarantool\n\n\n[x] configuration parameters\n\n\n\n\n\n\n[x] that allows users to opt-out\n\n\n\n\n\n\n\n\n[x] set report interval\n\n\n\n\n\n\n\n\n[x] server address\n\n\n\n\n\n\n[x] patch the server Lua source\n\n\n[x] Register domain\n[ ] Add note to EULA\n\nFront-end to reported data\n- [x] Create web endpoint on the same Tarantool instance\n- [x] Write stored procedures to extract all data/slices from space\n- - [x] \"unique users this week\" (will be enough for now)\n- [ ] consider security issues. Final schema v1.0:\n{\n    \"server_id\"        : \"ffa2d8e5-1ddf-45d1-9eb4-6f55e554eaaf\",\n    \"report_type\"      : \"version\",\n    \"report_version\"   : 1,\n    \"tarantool_version\": \"1.7.0-1badface\",\n    \"cluster_id\"       : \"bd77a845-ef72-4352-b6ae-27850061f0d3\"\n}. duplicate #2900 . In the commit above I changed HTTP method to POST and corrected report uri. duplicate of #3074 . Review started in #2969 . Can you add replica connection error/loss event as well? (as not in a controlled shutdown, but rather unexpected situation). moved to tarantool/shard. Currently all data that is beyond 16kB is truncated. See: #3248. The problem persists if return to version 1.9. Meaning when two versions are present in system. We use stateless fiber pool and a separate watchdog that monitors if timeout is reached while processing client request. That happens when fiber is in a loop (not on cpu-intesive tasks) or some externall call is taking too long. We want to catch fiber is cancelled correctly and process it accordingly by sending comprehensive response to a client.. #3527 contains an extended example. Discussed with @Totktonada, and I propose:\n\nif header value is a table, then check if it has __tostring method in its metatable\nif yes: return tostring(value)\nif no: throw an error\nif header value is neither a table nor a string then throw an error\n. @romanhabibov \nUPD: looks like you are running in strict mode, try\nlocal handler = function(req)\n      print(require('json').encode(req.headers))\n      return { status = 200 }\n    end\nalso\nlocal http = ...\nlocal server = ...\nand so on :). I've seen this countless times, never managed to find the reason behind though. It is invoked only when report daemon parameters are changed.. Considering we will have 1h as report_interval, there is no tcp_connection that lasts that long. Yes, there will be a handshake at each post, but it is a drop in the bucket. The function may throw exception and that situation is still has to be handled. \n",
    "mtrempoltsev": "I think array cannot be zero size (see C lang as example). I want the Tarantool to be more friendly. As example:\n```\nlocal json = require('json')\njson.decode(nil)\n```\nGood message:\n\n1.lua:3: bad argument #1 to 'decode' (string expected, got nil)\n\n```\nlocal fio = require('fio')\nfio.pathjoin(nil)\n```\nBad message:\n\nbuiltin/fio.lua:216: Undefined path part 1. I want to see a place in my code where function fails.. \n",
    "ASverdlov": "@rtsisyk Thanks! This solves the problem.. Fixed now.. ",
    "iGusev": "on Tarantool 1.8.2-150-g9fe1e71 all is well. Thanks.. ",
    "bofm": "So sad that you are throwing it away. The main reason nobody uses it may be the fact that it is not possible to set BITSET index on a PK tuple part. The overhead of HASH or TREE index on PK contradicts with the idea of saving space on large sets of integers with BITSET index.. Originally requested in #3528 . ",
    "hellower": "I'm testing tarantool with openresty + tarantool nginx_upstream_module\nopenresty (default :  luajit  2.1beta  + DLUAJIT_ENABLE_LUA52COMPAT option).\nbut tarantool (default: without  DLUAJIT_ENABLE_LUA52COMPAT )\nI just want to write the same version luajit script.\nsorry for my poor english.\n. ",
    "kbelyavs": "Can't reproduce it even without flag \"-Wno-c++11-narrowing\" in tarantool brew formula. High Sierra, Xcode 9.2 Apple LLVM version 9.0.0 (clang-900.0.39.2)\nBut probably we can change ptrdiff_t (long) to size_t (unsigned long) in opt_def structure:\n--- a/src/box/opt_def.h\n+++ b/src/box/opt_def.h\n@@ -57,7 +57,7 @@ typedef int64_t (*opt_def_to_enum_cb)(const char *str, uint32_t len);\n struct opt_def {\n        const char *name;\n        enum opt_type type;\n-       ptrdiff_t offset;\n+       size_t offset;\n        uint32_t len;. Last commit with 'merge' was just to check tests, since previous two failed with unknown reason (different reasons, but identical code, may be some bug with Travis CI?). As for now proposed to:\n1. Do not break recovery on empty xlog\n2. Try to recover as much as possible\n3. remove only empty xlog on recovery_finalize. Open new ticket #3076 regarding to expected force_recovery behaviour. Accidentally created a similar ticket #3210.\nClose, as implemented.. We can have an array of specific prefixes:\nconst char *const prefixes[] = {\n        \"http+unix://\",\n        \"http://unix/:/\",\n    };\nand just check in loop:\nif (strncmp(url, prefixes[i], strlen(prefixes[i])) == 0) { ... }. @racktear Yes, I see. It's decoded completely different way, but with code, based on your initial proposal it works fine.\n@rtsisyk Could you provide complete schema for http://unix/:/path/to/file or give us some examples?. Second type query is something like this: http://unix:/var/run/docker.sock:/v1.24/images/json in this schema socket isn't encoded and our library can't distinguish socket and path in this case. So each specific case should be solved its own way.. Agreed to use Yaroslav's version with compile time warning if UNIX_SOCKETS are not supported in installed curl version and also a runtime check.. Hi, need help with reproduction. Looks like old brew's curl version doesn't support https by default. But my version does, so suggest to add simple check and prints message with solution in case https is not supported.. Suggest to check during compilation. Current solution stop compilation on error. Should I just print an error message/warning?\nNeed feedback\nbranch: gh-3065-check-curl-ssl-support. Suggest to use TarantoolConfig.cmake as a part of tarantool-dev package.\nIt will be installed with tarantool:\ninstall(FILES TarantoolConfig.cmake DESTINATION ${MODULE_LIBDIR})\nand export TARANTOOL_INCLUDE_DIR and others \nThen module can use it as follows:\nfind_package(Tarantool CONFIG REQUIRED). I think we need to reopen this bug again since still need to do same for 1.6.. Update: no need for this in 1.6. Close.. It seems that this is not an error. This message appears when other side rejects connection because it has not yet been able to change state to 'disconnected' but after that tarantool catch this error and goes to reconnect loop, so after a little time connection will be established.\nTo prevent this message, you can add a small delay between two box.cfg { ... } call.. The following condition is wrong\n+       if (replica->applier->remote_is_ro &&\n+           replica->applier->vclock.signature == 0)\nsince there is no way to add a new UUID to cluster table for read-only master.\nReopen.. @TarantoolBot document\nTitle: document new config parameter: replication_skip_conflict\nIn case of attempting to insert a duplicate key, an error ER_TUPLE_FOUND\noccured, which led to disconnect.\nIntroduce new oftion: 'replication_skip_conflict', if set, then error of\nthis type will be ignored.. @Gerold103 write:\nI am trying this:\nLua\nbox.cfg{\nreplication = { '127.0.0.1:33333' }, -- port 33333 is empty\nreplication_connect_quorum = 0,\nreplication_timeout = 1,\nread_only = false\n}\nThis call still blocks the thread.\nIt's a different case. We still can't do box.cfg on replica with master absent. It's because bootstrap and leader election required same replication value across the cluster with all masters present.. Moreover, this \"fix\" breaks master-slave. Here is the simple test case:\n@Gerold103 second is true, investigating.. @Gerold103 thank you for finding that.\nIt seems that replication_connect_quorum should be ignored during bootstrap. Will discuss it with @locker and @kostja.. Is this a first run? I mean if you have no snapshot file, you start a cluster with some members missing, whether the replication_connect_quorum option is set or not, it will hangs forever and this is a different case. During bootstrap all cluster members should present.\n'replication_connect_quorum' allows to continue work after bootstrap.\nPlease explain your test case more carefully.\nHow I check?\n1. Run two master instances in a full mesh.\n2. Shutdown both\n3a. Run second with replication_connect_quorum = 0\nIt has status \"running\" and is read-write.\n3b. Run second without replication_connect_quorum\nIt has status \"orphan\" and is read-only.. @zlinwei, could you please provide more details, if you remove replica's URI from replication as @Gerold103 suggests, will it help you?\nIf not, please provide more details, like type box.info in master's console\nand where did you insert data, then you got this error, on mater? . The problem occurs due to offset, that we added to \"checkpoint_interval\" because this value is calculated only once. . Neither posix_fallocate() nor fallocate() exists on OSX. May be we can check available space periodically (say every 1min) or based on written data?. Regarding using fallocate under OSX, it can be substituted with\nfcntl(fd, F_PREALLOCATE, &store);\nfstore_t store = {F_ALLOCATECONTIG, F_PEOFPOSMODE, offset, len, 0};. Blocked by #3750. ",
    "xmonader": "setting the loaded socket package to nil worked for me.. ",
    "norguhtar": "Ok. Can you get me more info about docbot message? For example i don't understand about document. What is it?. \u041ek. thanks. Done.. Header size have limit? Can you tell me where is it? I can fix that. I see. But just increase this limit not good solution. May be add other buffer structure for http client?. I rewrite httpc_set_header. Can you check it? I change add header into curl and add length check in header from lua context. I should split one commit on two? One for fix httpc_set_header and second for rise error?. I see. It put to other request. Revert it. Done. I add new PR.. I add new define HTTP_HEADER_LEN in httpc.h for this. Change to HTTP_HEADER_LEN . Remove this check and add new check in httpc.c. ",
    "albenik": "@RunsFor homebrew tarantool 1.7.5.184 bottle. @RunsFor Confirm, there is no crashes anymore with new version. ",
    "deldoli": "I found that iproto_write_error_blocking is removed at 1.7-next branch. So I applyed that version and this problem is disapeard. \nThank you. ",
    "andreasbaumann": "As I can see it's the 'i' modifier for the function pointer which causes the problem.\nBut I don't know enough inline assembly to fix it right away..\n. ",
    "taosx": "@kostja I understand, thank you (I found some use cases for this). This can be closed.. ",
    "laserjump": "\u0438 \u0447\u0442\u043e \u043e\u0431\u0449\u0435\u0433\u043e \u044d\u0442\u043e \u0438\u043c\u0435\u0435\u0442 \u0441 \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043e\u0442\u0441\u0442\u0430\u0438\u0432\u0430\u043d\u0438\u044f \u0432 r/o?\n\u044f \u0441\u043a\u043e\u0440\u0435\u0435 \u0438\u043c\u0435\u043b \u0432\u0432\u0438\u0434\u0443 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u0430\u043f\u043e\u0434\u043e\u0431\u0438\u0435 https://gist.github.com/Mons/9dc4e2e3097c231551d4f0d130986149, \u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 \u043b\u0443\u0430 \u0432 \u0442\u0430\u0440\u0430\u043d\u0442\u0443\u043b\u0435 1.7 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438. ",
    "IzmaylovAndrey": "https://github.com/tarantool/docker/issues/43#issuecomment-359384546. ",
    "evverx": "Would you like me to do it or will you be squashing these commits via the merge button?. The tests seem to be failing because Zesty has reached End Of Life.. I would have preferred it if the question I asked had been answered in a form slightly different from silently closing the PR. Anyway, thank you for the feedback. I appreciate it.. Thank you! To judge from CMakeError.log the build system can tell the interfaces apart. tarantool itself seems to be failing to compile with:\nsh\nIn file included from lj_obj.h:13,\n                 from lj_str.c:9:\nlj_str.c: In function \u2018str_fastcmp\u2019:\nlj_def.h:242:28: error: inlining failed in call to always_inline \u2018lj_getu32\u2019: function attribute mismatch\n static LJ_AINLINE uint32_t lj_getu32(const void *p)\n                            ^~~~~~~~~\nlj_str.c:59:18: note: called from here\n     uint32_t v = lj_getu32(a+i) ^ *(const uint32_t *)(b+i);\n                  ^~~~~~~~~~~~~~\nlj_str.c: At top level:\ncc1: warning: unrecognized command line option \u2018-Wno-parentheses-equality\u2019\nmake[3]: *** [Makefile:683: lj_str.o] Error 1\nmake[2]: *** [CMakeFiles/libluajit.dir/build.make:62: third_party/luajit/src/libluajit.a] Error 2\nmake[1]: *** [CMakeFiles/Makefile2:68: CMakeFiles/libluajit.dir/all] Error 2\nmake[1]: *** Waiting for unfinished jobs....\n[ 19%] Building C object src/lib/small/test/CMakeFiles/quota.test.dir/unit.c.o\n[ 19%] Linking C executable lsregion.test\n[ 19%] Linking CXX executable quota.test\n[ 19%] Built target quota_lessor.test\n[ 19%] Built target lsregion.test\n[ 19%] Built target quota.test\nmake: *** [Makefile:152: all] Error 2. That was gcc (GCC) 8.2.1 20181105 (Red Hat 8.2.1-5) on Fedora 28. When built with  clang-6.0.1 it is failing with:\n```\nScanning dependencies of target ratelimit.test\n[ 33%] Building C object test/unit/CMakeFiles/ratelimit.test.dir/ratelimit.c.o\n=================================================================\n==18875==ERROR: LeakSanitizer: detected memory leaks\nDirect leak of 48 byte(s) in 1 object(s) allocated from:\n    #0 0x4e1240 in calloc (/home/vagrant/tarantool/extra/lemon+0x4e1240)\n    #1 0x5154ca in acttab_alloc /home/vagrant/tarantool/extra/lemon.c:608:26\n    #2 0x52f87f in ReportTable /home/vagrant/tarantool/extra/lemon.c:4143:13\n    #3 0x524cf6 in main /home/vagrant/tarantool/extra/lemon.c:1717:5\n    #4 0x7f37efe4411a in __libc_start_main (/lib64/libc.so.6+0x2311a)\nIndirect leak of 20896 byte(s) in 1 object(s) allocated from:\n    #0 0x4e14a0 in realloc (/home/vagrant/tarantool/extra/lemon+0x4e14a0)\n    #1 0x516220 in acttab_insert /home/vagrant/tarantool/extra/lemon.c:667:46\n    #2 0x53038a in ReportTable /home/vagrant/tarantool/extra/lemon.c:4166:22\n    #3 0x524cf6 in main /home/vagrant/tarantool/extra/lemon.c:1717:5\n    #4 0x7f37efe4411a in __libc_start_main (/lib64/libc.so.6+0x2311a)\nIndirect leak of 400 byte(s) in 1 object(s) allocated from:\n    #0 0x4e14a0 in realloc (/home/vagrant/tarantool/extra/lemon+0x4e14a0)\n    #1 0x515704 in acttab_action /home/vagrant/tarantool/extra/lemon.c:625:49\n    #2 0x52fcc8 in ReportTable /home/vagrant/tarantool/extra/lemon.c:4152:9\n    #3 0x524cf6 in main /home/vagrant/tarantool/extra/lemon.c:1717:5\n    #4 0x7f37efe4411a in __libc_start_main (/lib64/libc.so.6+0x2311a)\nSUMMARY: AddressSanitizer: 21344 byte(s) leaked in 3 allocation(s).\n```. > We support only clang's ASAN: https://github.com/tarantool/tarantool/wiki/Address-Sanitizer\nit'd probably be great to build this knowledge into the build system.\n\nWe'll investigate them in the scope of #2058.\n\nThat's good to know but technically tarantool still fails to compile when ENABLE_ASAN=on so I'd reopen the issue if I could :-). I've just taken a look at https://github.com/tarantool/tarantool/issues/2058 and as far as I can see it covers ASan only. I think it'd be also great to try UBSan (though it apparently isn't as easy as it seems to be). I built tarantool with it and the tests crashed somewhere in luajit\n[007] lj_obj.h:874:3: runtime error: member access within misaligned address 0x000041619444 for type 'union GCobj', which requires 8 byte alignment\n[007] 0x000041619444: note: pointer points here\n[007]   00 00 00 00 00 00 00 00  01 04 00 00 00 00 00 00  00 00 00 00 00 00 00 00  78 93 61 41 00 00 00 00\n[007]               ^\n[007]     #0 0x766017 in setgcVraw /home/vagrant/tarantool/third_party/luajit/src/lj_obj.h:874\n[007]     #1 0x766017 in setgcV /home/vagrant/tarantool/third_party/luajit/src/lj_obj.h:880\n[007]     #2 0x766017 in setstrV /home/vagrant/tarantool/third_party/luajit/src/lj_obj.h:888\n[007]     #3 0x766017 in lua_pushstring /home/vagrant/tarantool/third_party/luajit/src/lj_api.c:663\n[007]     #4 0x9913fe in luaL_openlibs /home/vagrant/tarantool/third_party/luajit/src/lib_init.c:44\n[007]     #5 0x661a16 in tarantool_lua_init /home/vagrant/tarantool/src/lua/init.c:434\n[007]     #6 0x41786f in main /home/vagrant/tarantool/src/main.cc:747\n[007]     #7 0x7fa69c08711a in __libc_start_main (/lib64/libc.so.6+0x2311a)\n[007]     #8 0x415af9 in _start (/home/vagrant/tarantool/src/tarantool+0x415af9)\n[007]\n[007] SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior lj_obj.h:874:3 in\n[Main process] Got failed test; gently terminate all workers.... Anyway, it's time for me to stop here. Thanks again for fixing this!. ",
    "OKriw": "https://www.freelists.org/post/tarantool-patches/PATCH-rfc-schema-add-possibility-to-find-and-throw-away-dead-replicas,5. facility=... is not implemented too.. Code: box.cfg{log = 'tarantool.log', log_nonblock = true} \nCode: box.cfg{log = 'syslog:', log_format = 'json'}  may be we should add new error type, smth like - Statement has no effect, and throw the second argument. Moreover, we need to state it clearly in documentation. What combinations are ok.\n box.cfg{log_format = 'html'} - we should add proper checks on configuration with error messages. Because at the moment - we have empty config and non informative exceptions.\nbox.cfg{log=':test:'} in this case I see two options - say smth about wrong file format and use some defaults (eg. tarantool.log) or just throw  normal exception.. Setting syslog is not an error, it is normal configuration. Problem happens when we set syslog and there is no syslog  configured.  So normal configuration leads to crash. I guess we should check if there is syslog available? And in box_check_cfg raise exception?. Setting syslog is not an error, it is normal configuration. Problem happens\nwhen we set syslog and there is no syslog configured. So normal\nconfiguration leads to crash. I guess we should check if there is syslog\navailable? And in box_check_cfg raise exception?\n\u0441\u0440, 15 \u0430\u0432\u0433. 2018 \u0433. \u0432 17:59, Serge Petrenko notifications@github.com:\n\nSetting syslog logging happens in load_cfg(). Every other error here\nresults in tarantool exiting. So why should this error result in some other\naction?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tarantool/tarantool/issues/3618#issuecomment-413224707,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADXuUHKrPYq8V4mqUCB0Me6VUr8fkkWiks5uRDdbgaJpZM4Vzldd\n.\n. My first guess  - fstat()? Maybe we can use it to check path we get? May be it also can be useful to check if we have rights to access file we want to log in in case if we set log to file with no access to it. \nBut I think we need someone else to discuss it.. Systemd/journald is rather popular logging service, that can be used along with syslog or replace it. Now it present in Debian, RHEL/CentOS, Ubuntu. So we can\u2019t leave it without attention.  It has compatibility with syslog logging and stream logging, so tarantool can easily use it with no additional work to do. In order to check log level filtration I used centOS 7 and syslog log option. All logs from syslog can be viewed with journactl.\nI have used journalctl to filter tarantool logs by level:\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive C> Tarantool 1.10.1-294-gb2b84f4\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive C> log level 5\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> mapping 268435456 bytes for \nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> mapping 134217728 bytes for \nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> recovery start\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> recovering from\u2026... \nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> recover from `\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> done \nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> ready to accept requests\nAug 21 08:06:34 centoshost tarantool[18441]: main/107/checkpoint_daemon I> started\nAug 21 08:06:34 centoshost tarantool[18441]: main/107/checkpoint_daemon I> scheduled the ne\n\nsystemd/journald have 7 log levels, they are similar to syslog ones.\nIn order to check filtration with tarantool log levels I used module log: from log.error() to log.debug(): \n\nAug 21 08:08:07 centoshost tarantool[18441]: main/101/interactive [C]:-1 E> Error\nAug 21 08:08:21 centoshost tarantool[18441]: main/101/interactive [C]:-1 W> Arn\nAug 21 08:08:25 centoshost tarantool[18441]: main/101/interactive [C]:-1 W> WArn\nAug 21 08:08:33 centoshost tarantool[18441]: main/101/interactive I> Info\nAug 21 08:12:21 centoshost tarantool[18441]: main/101/interactive V> Verbose\nAug 21 08:12:24 centoshost tarantool[18441]: main/101/interactive D> Debug\n\nResult of log level filtration (journalctl -p level -b):\nEmergency, Alert and Critical - show nothing, but it is not a problem.\nError:\n\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive C> Tarantool 1.10.1-294-gb2b84f4\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive C> log level 5\nAug 21 08:08:07 centoshost tarantool[18441]: main/101/interactive [C]:-1 E> Error\n\nWarning, Notice has the same output:\n\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive C> Tarantool 1.10.1-294-gb2b84f4\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive C> log level 5\nAug 21 08:08:07 centoshost tarantool[18441]: main/101/interactive [C]:-1 E> Error\nAug 21 08:08:21 centoshost tarantool[18441]: main/101/interactive [C]:-1 W> Arn\nAug 21 08:08:25 centoshost tarantool[18441]: main/101/interactive [C]:-1 W> WArn\n\n\nInfo:\n\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive C> Tarantool 1.10.1-294-gb2b84f4\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive C> log level 5\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> mapping 268435456 bytes for \nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> mapping 134217728 bytes for \nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> recovery start\nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> recovering from \nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> recover from \nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> done \nAug 21 08:06:34 centoshost tarantool[18441]: main/101/interactive I> ready to accept requests\nAug 21 08:06:34 centoshost tarantool[18441]: main/107/checkpoint_daemon I> started\nAug 21 08:06:34 centoshost tarantool[18441]: main/107/checkpoint_daemon I> scheduled the next \nAug 21 08:08:07 centoshost tarantool[18441]: main/101/interactive [C]:-1 E> Error\nAug 21 08:08:21 centoshost tarantool[18441]: main/101/interactive [C]:-1 W> Arn\nAug 21 08:08:25 centoshost tarantool[18441]: main/101/interactive [C]:-1 W> WArn\nAug 21 08:08:33 centoshost tarantool[18441]: main/101/interactive I> Info\nAug 21 08:12:16 centoshost tarantool[18441]: main/101/interactive I> set 'log_level' configuration \nAug 21 08:12:21 centoshost tarantool[18441]: main/101/interactive V> Verbose\n\nDebug = Info + one extra line\n\nAug 21 08:12:24 centoshost tarantool[18441]: main/101/interactive D> Debug\n\nSo, I am not sure about special log format for journald, because we do have level (I, V, D, etc), moreover journalctl can distinguish them. I guess the ticket was opened because of log level filtration, and it mostly works.\nIn case of stream output - there is no filtration. I sent stdout and stderr to journal.\n\nsystemd-cat tarntool\n\nThe output is indistinguishable for journal filtration.\nIf we really need this in server we can change plain format:\n * YYYY-MM-DD hh:mm:ss.ms [PID]: CORD/FID/FIBERNAME LEVEL> MSG\nto YYYY-MM-DD hh:mm:ss.ms [PID]: CORD/FID/FIBERNAME LEVEL> MSG\nBut if we do so, we should get rid of json format, because it will be useless(because journalctl has option json-pretty).\nSo, we need to decide what to do: do nothing and recommend to use syslog logging for journal, change plain format slightly or add additional format journal.. ",
    "sttyru": "Thank you for quick answer!. ",
    "ddosoff": "I'd like to have this option.. ",
    "maks83": "\nIt would be nice if temporary spaces was accessible as readwrite.\n\ni need this feature for implementing map/reduce on slave replicas. ",
    "msiomkin": "I have one more case. Default values are even more important when you add a non nullable field to an existing not empty space. This gives an error now:\nerror: Tuple field count 2 is less than required by space format or defined indexes\n    (expected at least 3)\nThis error could be eliminated if we had 'default' option in space format.. +1. ",
    "sergepetrenko": "@Mons for me only the second hack works right now, could you please give more info on how do you make the first one work?. > And, once again as user admin, I said:\n\nbox.schema.role.revoke('r','finkelgruber','space','t')\nThis fails with \"User 'r' does not have finkelgruber access on space 't'\".\nThere's a similarity to a situation reported in issue#3417, but there\nthe result was apparent success, in this case the result is failure,\nso this is inconsistent. Also it might be better to say that role 'r'\ndoes not have finkelgruber, instead of saying that user r does not have it.\n\nthis is solved together with #3417 \n\nbox.space.t:create_index('k')\nThis fails with \"Create access to space 't' is denied for user 'pg'\"\nBut admin granted 'create' on 't' to 'pg', so this is misleading.\n\nthis will be solved together with #3516, there's a small fix:\ncreating an index will require ALTER on space, which seems more intuitive.\nAnd granting CREATE on a single space has no effect, truly.\nActually this also needs to be solved separately. > In another scenario (sorry, not with the same sequence as above) I saw\n\n```\nlocalhost:3301> box.space.t:drop()\n\n\nerror: Revoke access to space 't' is denied for user 'pg'\n...\n```\nBut 'pg' had 'revoke' on 't', so that was misleading.\n\n\nThis is a real issue. \nYou can only drop an object which has no grants on it. That's why tarantool first\nrevokes all the privileges on object before dropping it. Granting and revoking\nprivileges on an object is allowed only for admin and object owner, that's why\nit demands REVOKE privilege, which can't be granted, as mentioned above.\nBut even if you try to drop an object which has no privileges on it, you will\nfail, because your DROP privilege on the object will already be revoked.\nSo the only way to drop an object is to have DROP access on entire entity,\nwhich allows you to drop any object of that type. This is obviously wrong.\n@GeorgyKirichenko, @kostja need to discuss how to fix this.. Blocked by #3800 . @rosik Hi\n\ntarantool: /opt/tntsrc/src/box/applier.cc:748: void applier_pause(applier*): Assertion `fiber() == applier->reader' failed.                                                           \nAborted\nHave you seen this assertion fail lately? What I tried is launching vshard example from the docs multiple times, but couldn't get such an error.\nMaybe you can give me some of the more recent examples of this crash?. Tests on the latest commit hang due to a bug in test-run: tarantool/test-run#109. (Kostja pushed a fix). Setting syslog logging happens in load_cfg(). Every other error here results in tarantool exiting. So why should this error result in some other action?. Yeah, I didn't express myself correctly.\nSetting syslog is non an error, but setting syslog when there is no syslog is an error.\nI don't like the idea to check for syslog availability in box_check_config(). \nI don't see a way of doing it other than trying to connect to syslog. If the connection fails, then raise an error, ok. But if syslog is present? Try to connect and then disconnect? No point in doing so only to reconnect back during load_cfg(). So probably if connection is successful don't disconnect? But then we start doing part of configuration in box_check_config(), where it shouldn't be.\nMaybe you can suggest another approach?. This can be reproduced on every start with such script:\n```\nbox.cfg({\n    listen=3301,\n    replication={\n        \"cluster:pass@localhost:3301\",\n        \"cluster:pass@localhost:3302\"\n    },\n    replication_timeout=0.1,\n    replication_connect_timeout=2.0\n})\n\nbox.once(\"bootstrap\", function()\n    require(\"fiber\").sleep(1)\n    box.schema.user.create(\"cluster\", {password=\"pass\"})\n    box.schema.user.grant(\"cluster\", \"replication\")\n    box.schema.space.create(\"test\")\n    box.space.test:create_index(\"primary\")\nend)\nSecond instance has the same script except that `listen=3302` (obviously).\nMy guess is the issue happens every time when `replication_timeout` is smaller than `box.once()` execution time.. Here's why an assertion failure instead of an error happens in 2.1:\nThe error is ignored in this line in `sql_analysis_load()`:\n`uint32_t index_count = box_index_len(BOX_SQL_STAT1_ID, 0);`\n`box_index_len()` returns `-1` on error, which happily becomes `4294967295`. A problem with the same cause is present in the latest 1.10-features:\n001] 2018-11-01 20:17:04.687 [10324] main/101/autobootstrap1 tarantoolctl:532 E> Start failed: User '589505315' is not found\n``. Here's what happens:\nDuringbox_cfg()net thread is initialized, then, during eitherbootstrap()orlocal_recovery()we begin listening on a port and thus accepting requests. So, from this point of time, other instances can send JOIN requests. Later on,gc_set_wal_watcher()is executed, which performscbus_pair()betweenwalandmainthreads. Whilecbus_pair()is in progress, all the pending messages intxendpoint are processed by the fiber which executesgc_set_wal_watcher(), i.e. the fiber which is executingbox_cfg(). Sometimes messages from iproto may arrive during this period of time, which will lead to fiber executing, for example,tx_process_join()callingtx_fiber_init()leading to session and credentials corruption.. Couldn't reproduce the crash. I'm seeing such errors again, ontarantool 1.10.2-138-g5c0a36c.\nIf an instance is processing large selects, applier fails occasionally withMissing mandatory field 'tuple' in requestInvalid MsgPack - packet body`. ",
    "cbalano": "I have created a test_crypto.lua file containing the following code:\n\ncrypto = require \"crypto\"\nfor k,v in pairs(crypto) do\n print (k, v)\nend\n\nIf I execute this code on the tarantool machine, I get:\n\ntarantool test_crypto.lua\ndigest  table: 0x403d8be0\nhmac    table: 0x403d99a8\ncipher  table: 0x417fdd68\n\nIf I execute it on a machine with luarocks,  lua5.1 and luacrypto installed ( but no tarantool), I get:\n\nlua test_crypto.lua\nrand    table: 0x560dd2c27460\n_DESCRIPTION    LuaCrypto is a Lua wrapper for OpenSSL\npkey    table: 0x560dd2c27ca0\nlist    function: 0x560dd2c203e0\nhmac    table: 0x560dd2c27b20\nencrypt table: 0x560dd2c24b40\nx509    table: 0x560dd2c27f00\nx509_ca table: 0x560dd2c1ab00\nx509_cert       table: 0x560dd2c19dc0\n_VERSION        LuaCrypto 0.3.1\nhex     function: 0x560dd2c24be0\n_COPYRIGHT      Copyright (C) 2005-2006 Keith Howe\nopen    table: 0x560dd2c258a0\ndecrypt table: 0x560dd2c25100\nsign    table: 0x560dd2c1b2a0\nseal    table: 0x560dd2c256a0\nverify  table: 0x560dd2c24ea0\ndigest  table: 0x560dd2c24c60\n\nI have no crypto module installed anywhere on the tarantool box.\nIf on the tarantool box I execute the following:\n\nfor k,v in pairs(package.loaded) do\n print (k, v)\nend\n\nI see (among other things):\nfiber   table: 0x4063e848\nffi     table: 0x4063d898\nio      table: 0x40637eb0\nconsole table: 0x40afc4d0\ndigest  table: 0x4052ee50\njson    table: 0x40647e18\nuri     table: 0x41eb54d0\njit.dis_x64     table: 0x40af6140\nbox.internal.gc table: 0x417fe100\ncrypto  table: 0x4052a628\nnet.box table: 0x414592b8\ninternal.argparse       table: 0x41453758\nlog     table: 0x405370a8\njit.opt table: 0x4063ac10\nuuid    table: 0x40533f58\nNow, if I execute:\n\ntarantoolctl rocks install luacrypto\nInstalling http://rocks.moonscript.org/luacrypto-0.3.2-2.src.rock\ngcc -O2 -fPIC -I/usr/local/include/tarantool -c src/lcrypto.c -o src/lcrypto.o -I/usr/include\ngcc -shared -o crypto.so -L/usr/local/lib src/lcrypto.o -L/usr/lib -Wl,-rpath,/usr/lib: -lcrypto\nluacrypto 0.3.2-2 is now installed in /opt/ts/lua/.rocks (license: MIT)\n\nThen if I modify my script as follows:\n\npackage.loaded.crypto = nil\nrequire \"crypto\"\nprint (\"package.loaded.crypto\")\nfor k,v in pairs(package.loaded.crypto) do\n print (k, v)\nend\n\nI see:\n\ntarantool test_crypto.lua\npackage.loaded.crypto\nx509_ca table: 0x4104d8a0\nlist    function: 0x4104ce60\npkey    table: 0x40462ad8\nseal    table: 0x4104d528\nsign    table: 0x4104d3f8\nopen    table: 0x4104d658\ndecrypt table: 0x4104d1b8\nhex     function: 0x4104cea8\nx509    table: 0x40462c28\nhmac    table: 0x408339a0\nrand    table: 0x40462730\ndigest  table: 0x4104cf98\n_DESCRIPTION    LuaCrypto is a Lua wrapper for OpenSSL\ncipher  table: 0x4015fe08\nverify  table: 0x4104d2c8\nencrypt table: 0x4104d0a8\n_VERSION        LuaCrypto 0.3.1\nx509_cert       table: 0x4104d768\n_COPYRIGHT      Copyright (C) 2005-2006 Keith Howe\n\nWhich is great, except that the original tarantool's crypto is no longer accessible. I suspect that the original module is needed for things like hashing the database passwords, and therefore obstructing it is not a great idea.\n. ",
    "ArseniyAntonov": "Branches to enable are the following:\n- 1.9\n- 1.10\n- 2.0. TPCC and Sysbench benchmarks have been added to the release branches in gitlab pipeline. Vinyl is default engine for linkbench now \nI will add memtx, task renamed. ",
    "SWSAmor": "I'm scared. :-) I've never done this before. . No, please, i\u2019m busy right now.. Sure, here is:\n\n(digest.base64_encode(p)):\nJqemi+MWV/Ux+ou4z3VqOZ8uXQbysS7PMYRywIKrOPT0SH/Ss69G1vHEYAw4vREjUnxZ19j/\ngO5VUpL/f8kwpkjtUEGKRCflv2N84xZMtN1pFfeHzqkgf53TncBKp3VJ\n(digest.base64_encode(p, {urlsafe=true})):\nJqemi-MWV_Ux-ou4z3VqOZ8uXQbysS7PMYRywIKrOPT0SH_Ss69G1vHEYAw4vREjUnxZ19j_gO5VUpL_f8kwpkjtUEGKRCflv2N84xZMtN1pFfeHzqkgf53TncBKp3VJ\n(digest.base64_encode(p, {nopad=true})):\nJqemi-MWV_Ux-ou4z3VqOZ8uXQbysS7PMYRywIKrOPT0SH_Ss69G1vHEYAw4vREjUnxZ19j_\ngO5VUpL_f8kwpkjtUEGKRCflv2N84xZMtN1pFfeHzqkgf53TncBKp3VJ\n(digest.base64_encode(p, {nowrap=true})):\nJqemi-MWV_Ux-ou4z3VqOZ8uXQbysS7PMYRywIKrOPT0SH_Ss69G1vHEYAw4vREjUnxZ19j_gO5VUpL_f8kwpkjtUEGKRCflv2N84xZMtN1pFfeHzqkgf53TncBKp3VJ\n(digest.base64_encode(p, {nopad=true, urlsafe=false})):\nJqemi-MWV_Ux-ou4z3VqOZ8uXQbysS7PMYRywIKrOPT0SH_Ss69G1vHEYAw4vREjUnxZ19j_\ngO5VUpL_f8kwpkjtUEGKRCflv2N84xZMtN1pFfeHzqkgf53TncBKp3VJ\n(digest.base64_encode(p, {nowrap=true, urlsafe=false})):\nJqemi-MWV_Ux-ou4z3VqOZ8uXQbysS7PMYRywIKrOPT0SH_Ss69G1vHEYAw4vREjUnxZ19j_gO5VUpL_f8kwpkjtUEGKRCflv2N84xZMtN1pFfeHzqkgf53TncBKp3VJ\n. The Accept is not working for me with the patch.. No. We need one specific Accept header. We put that in the headers, but the Tarantool put Accept / too.. Thank you. Tested. Works perfectly.. \n",
    "Hollow111": "Comparing invalid characters principles in other DMBSs:\nDB2:\n- Allows keeping invalid utf-8 characters inside of varchar, but '%'\nand '_' in pattern skip any symbols in string regardless of validity.\n(\"SELECT * FROM table1 WHERE smth LIKE '%'\" returns all the rows from the table)\nreproduce:\n[[\n    CREATE TABLE t(smth VARCHAR(10) PRIMARY KEY) CCSID Unicode\n    INSERT INTO t VALUES ('ab' || X'D0')\n    SELECT * FROM t WHERE smth\n    SELECT * FROM t WHERE smth LIKE ('a%')\n    SELECT * FROM t WHERE smth LIKE ('ab%')\n]]\nMySQL:\n-  Doesn't let inserting invalid utf-8 characters.\n-  But it still allows comparing invalid strings (it doesn't match them though whilst '%' still skips invalid characters).\nreproduce:\n1\n[[\n    create table t(a char(100));\n    insert into t values (convert(0xD0, char(100)));\n]]\n2\n[[\n    select convert(0xD0, char(100)) like convert(0xD0, char(100));\n    select convert(0xD0, char(100)) like '%';\n]]\nPostreSQL:\n- PostgreSQL doesn't allow using non-utf symbols in string.\nreproduce:\n[[\n    SELECT E'\\xd0'\n]]. In the current version of patch I have approximately tested\nbenefits of the xferOptimization using the following simple script:\n```\nfiber = require('fiber')\nbox = require('box')\nbox.cfg{}\navg_time_no_opt = 0\navg_time_opt = 0\nmax_iterator_value = 500000\nfor j = 1, 10 do\n box.sql.execute(\"create table t1(a primary key, b unique, c, d, f);\")\n box.sql.execute(\"create table t2(a primary key, b, c unique, d, f);\")\n box.sql.execute(\"create table t3(a primary key, b unique, c, d, f);\")\n loop_timer1 = fiber.time()\n for i = 1, max_iterator_value do\n  k4 = math.random(1, 50000)\n  k5 = math.random(1, 50000)\n  t = 'insert into t1 values (' .. i .. ',' .. i .. ',' .. i ..\n      ',' .. k4 .. ',' .. k5 .. ');'\n  box.sql.execute(t)\n end\n first_timer = fiber.time()\n box.sql.execute(\"insert into t2 select * from t1;\")\n second_timer = fiber.time()\n avg_time_no_opt = avg_time_no_opt + second_timer - first_timer\n first_timer = fiber.time()\n box.sql.execute(\"insert into t3 select * from t1;\")\n second_timer = fiber.time()\n avg_time_opt = avg_time_opt + second_timer - first_timer\n box.sql.execute('drop table t1;')\n box.sql.execute('drop table t2;')\n box.sql.execute('drop table t3;')\n loop_timer2 = fiber.time()\n print(loop_timer2 - loop_timer1)\nend\navg_time_no_opt = avg_time_no_opt / 10\navg_time_opt = avg_time_opt / 10\nprint('Average insertion of ' .. max_iterator_value ..\n      ' random 5-column tuples without optimization takes about ' ..\n      avg_time_no_opt .. ' seconds.')\nprint('While the average insertion of the same data with xferOptimization ' ..\n      'working takes about ' .. avg_time_opt .. ' seconds.')\n```\nInserting 500 000 of 5-column tuples with no use of xferOptimization\ntakes approximately 4.25s to be processed.\nInserting the same data from the table to another one with identical schema\n(hence the xferOptimization is used) takes approximately 3.74s to be processed,\nwhich benefits about 13% of time.\nAs you can see from the script the schemas almost identical in the former case\nand still it's enough to make the first one not suitable for the optimization.\n. This wasn't actually an sql bug. I was testing these in sql-tester which breaks the test when it catches an exception. So it's just tester behavior thus issue isn't actual.\n@kyukhin . @pgulutzan will it? I can't find a word about removing function like(), only removing GLOB with related function glob().. @Totktonada As far as I understood the suggestion is to delete built-in functions like \"like()\", \"regexp()\" as well as closing this issue.. I guess, we will need to implement some sort of entity that stores string length or replace end-of-string trigger-symbol from \\0 by some other.. ",
    "alg1973": "Given SQL is in alpha it's better to use opt-out approach and use  IPROTO_OPTION only for readahead rows hint.  . There is another opt-out approach - introduce only continuation flag. Client have to issue next reply- read only if CONTINUATION flag is set. So one can treat absence of CONTINUATION flag in  IPROTO_METADATA as a EOF notification.. I've seen such code in the tarantool client library:\nr->code = code & ((1 << 15) - 1);\nIs it make sense?. ",
    "commitay": "Thanks @kostja!. ",
    "zlinwei": "Oh, Thanks for your help. . Thanks for your help. I am trying. . It works. Thanks again.  . ",
    "KseniyaYakil": "thanks for answer\nthere is a loop\nfor _, t in my_index:pairs({key},  {iterator = box.index.LE}) do\n.. read access to t ..\nend\nthat throws \"Tuple reference counter overflow\" erros, that leads to fatal_assert call\ncalling collectgarbage(\"collect\") for each N iterations helps a lot. ",
    "Kasen": "@kyukhin I set checkpoint_interval equal 4 hours, but next snapshot was planned in 7 hours. In the second line, I set checkpoint_interval equal one minute, but next snapshot was planned in about 3 hours.\nThis behavior is very strange.. ",
    "GhOsTMZ": "@Totktonada , memtx_memory - 4 GB, memory usage - 40 GB more. It's a normal?\nAt startup tarantool memory usage ~4 GB, after few days memory usage increased to 40+ GB.. @bigbes if i reproduce this issue in test environment and provide Valgrind report, can you help me to resolve issue? . Hello anyone,\nSorry for a long time delay, I could not run tests early because I do not have enough time for it, this is a low priority issue for me. But I reproduced this in a test environment.\nAbout this test (used PHP-scripts with pecl-memcached module):\n1. First PHP-script writes random keys with text values into tarantool (10 000 000 keys are written);\n2. The second script read this keys from tarantool.\nI did two reading tests:\n1. One connection used for reading all keys. In this test tarantool not increase memory usage.\n2. One connection used for reading only one key. In this test tarantool increase memory usage.\nA tail of Valgrind report (it's after read 300 000 keys):\n==2592== 1,824,768 bytes in 396 blocks are possibly lost in loss record 890 of 903\n==2592==    at 0x4C27C23: malloc (vg_replace_malloc.c:299)\n==2592==    by 0xC26F39F: sasl_server_new (in /usr/lib64/libsasl2.so.3.0.0)\n==2592==    by 0x1D0150C0: memcached_sasl_connection_init (in /usr/lib64/tarantool/memcached/internal.so)\n==2592==    by 0x1D014001: memcached_handler (in /usr/lib64/tarantool/memcached/internal.so)\n==2592==    by 0x500D35: lj_vm_ffi_call (buildvm_x86.dasc:2576)\n==2592==    by 0x543FDE: lj_ccall_func (lj_ccall.c:1150)\n==2592==    by 0x5584D5: lj_cf_ffi_meta___call (lib_ffi.c:230)\n==2592==    by 0x4FED86: lj_BC_FUNCC (buildvm_x86.dasc:809)\n==2592==    by 0x510243: lua_pcall (lj_api.c:1139)\n==2592==    by 0x4D6AA2: luaT_call (utils.c:931)\n==2592==    by 0x4D186B: lua_fiber_run_f (fiber.c:300)\n==2592==    by 0x40EB4B: fiber_cxx_invoke(int (*)(__va_list_tag*), __va_list_tag*) (fiber.h:665)\n==2592== \n==2592== 1,925,778 (65,424 direct, 1,860,354 indirect) bytes in 282 blocks are definitely lost in loss record 891 of 903\n==2592==    at 0x4C27C23: malloc (vg_replace_malloc.c:299)\n==2592==    by 0xC26F407: sasl_server_new (in /usr/lib64/libsasl2.so.3.0.0)\n==2592==    by 0x1D0150C0: memcached_sasl_connection_init (in /usr/lib64/tarantool/memcached/internal.so)\n==2592==    by 0x1D014001: memcached_handler (in /usr/lib64/tarantool/memcached/internal.so)\n==2592==    by 0x500D35: lj_vm_ffi_call (buildvm_x86.dasc:2576)\n==2592==    by 0x543FDE: lj_ccall_func (lj_ccall.c:1150)\n==2592==    by 0x5584D5: lj_cf_ffi_meta___call (lib_ffi.c:230)\n==2592==    by 0x4FED86: lj_BC_FUNCC (buildvm_x86.dasc:809)\n==2592==    by 0x510243: lua_pcall (lj_api.c:1139)\n==2592==    by 0x4D6AA2: luaT_call (utils.c:931)\n==2592==    by 0x4D186B: lua_fiber_run_f (fiber.c:300)\n==2592==    by 0x40EB4B: fiber_cxx_invoke(int (*)(__va_list_tag*), __va_list_tag*) (fiber.h:665)\n==2592==\n==2592== 1,223,134,131 (825,375,744 direct, 397,758,387 indirect) bytes in 179,118 blocks are definitely lost in loss record 903 of 903\n==2592==    at 0x4C27C23: malloc (vg_replace_malloc.c:299)\n==2592==    by 0xC26F39F: sasl_server_new (in /usr/lib64/libsasl2.so.3.0.0)\n==2592==    by 0x1D0150C0: memcached_sasl_connection_init (in /usr/lib64/tarantool/memcached/internal.so)\n==2592==    by 0x1D014001: memcached_handler (in /usr/lib64/tarantool/memcached/internal.so)\n==2592==    by 0x500D35: lj_vm_ffi_call (buildvm_x86.dasc:2576)\n==2592==    by 0x543FDE: lj_ccall_func (lj_ccall.c:1150)\n==2592==    by 0x5584D5: lj_cf_ffi_meta___call (lib_ffi.c:230)\n==2592==    by 0x4FED86: lj_BC_FUNCC (buildvm_x86.dasc:809)\n==2592==    by 0x510243: lua_pcall (lj_api.c:1139)\n==2592==    by 0x4D6AA2: luaT_call (utils.c:931)\n==2592==    by 0x4D186B: lua_fiber_run_f (fiber.c:300)\n==2592==    by 0x40EB4B: fiber_cxx_invoke(int (*)(__va_list_tag*), __va_list_tag*) (fiber.h:665)\n==2592==\n==2592== LEAK SUMMARY:\n==2592==    definitely lost: 825,506,800 bytes in 179,402 blocks\n==2592==    indirectly lost: 399,618,741 bytes in 1,973,338 blocks\n==2592==      possibly lost: 2,771,069 bytes in 4,810 blocks\n==2592==    still reachable: 248,612 bytes in 4,452 blocks\n==2592==         suppressed: 0 bytes in 0 blocks\nI can attach full report if needs.\n@bigbes, can you help me?. Archive with test scripts for reproduce issue in attach. The first script (write.php, can't reproduce issue) write a string into memcached and write key name into a file (/mnt/data/memcached.log). The second script (read.php) can reproduce the issue, it read keys from file and tries to read them from memcached. Both scripts work with PHP 7+.\ntest.zip. @bigbes thanks! It's work! Valgrind report for patched version:\n==10288== LEAK SUMMARY:                                                                                                                                                                                            \n==10288==    definitely lost: 5,400 bytes in 42 blocks                                                                                                                                                             \n==10288==    indirectly lost: 0 bytes in 0 blocks                                                                                                                                                                  \n==10288==      possibly lost: 2,784 bytes in 5 blocks                                                                                                                                                              \n==10288==    still reachable: 214,808 bytes in 4,338 blocks                                                                                                                                                        \n==10288==         suppressed: 0 bytes in 0 blocks                                                                                                                                                                  \n==10288== Reachable blocks (those to which a pointer was found) are not shown.                                                                                                                                     \n==10288== To see them, rerun with: --leak-check=full --show-leak-kinds=all. ",
    "blry": "Also, when we decrease the number of iterations to 1 (ex. digest.pbkdf2(pwd, salt, 1, 32)), it works properly. ",
    "cyrillos": "Guys, the real issue is not the page touching. But rather the fact that ncurses started to use 32K buffers since commit 1501ae2a13db0ffd2db8404c24aa5010a88ea91b (Mon Jan 22 01:39:40 2018 +0000)\n@@ -94,7 +100,14 @@ extern \"C\" {\n  * given implementation may exceed.\n  */\n #define MAX_NAME_SIZE  512     /* maximum legal name field size (XSI:127) */\n-#define MAX_ENTRY_SIZE 4096    /* maximum legal entry size */\n+#define MAX_ENTRY_SIZE1        4096    /* maximum legal entry size (SVr2) */\n+#define MAX_ENTRY_SIZE2        32768   /* maximum legal entry size (ncurses6.1) */\n+\n+#if NCURSES_EXT_COLORS && HAVE_INIT_EXTENDED_COLOR\n+#define MAX_ENTRY_SIZE MAX_ENTRY_SIZE2\n+#else\n+#define MAX_ENTRY_SIZE MAX_ENTRY_SIZE1\n+#endif\n...\nNow the callers\n_nc_read_tic_entry\n  char buffer[MAX_ENTRY_SIZE + 1];\n  ...\n  _nc_read_termtype\n    char buf[MAX_ENTRY_SIZE + 2];\nno wonder that it exceeds 65K stack. Page touching simply reveals the lack of stack early.. ",
    "sorc1": "Please see pull request #3314.. To reproduce, just send SIGHUP to tarantool -e \"box.cfg{log='test.log'}\".\nNote that tarantool -e \"box.cfg{}\" doesn't crash by SIGHUP but it just stops instead which shouldn't happen.\nThe problem is in signal_init() function. The function mistakenly sets two actions for SIGHUP via ev_signal_init(), in that order:\n- signal_cb(), which terminates the server\n- say_logrotate(), which rotates the logs\nThe first action just have to be removed. Before 9f99bc6 there was signal_cb() action but it was overwritten by signal() function. The signal() call was removed by the commit.. ",
    "alekseyxxx": "tarantool 1.9.0.80-1.el6 centos6 (not in container)  the same problem.\n. sample:`\n!/usr/bin/tarantool\nlocal http = require('http.client')\nfor i=1, 200 do\n    local hnd = http.new()\n    local res = hnd:request('POST', 'https://mail.ru/', 'empty', {['timeout']=1})\n    if res ~= nil and res.status == 200 or res.status == 201 then\n        print( res.status, res.reason)\n    elseif res ~= nil then\n        print( res.status, res.reason)\n    else\n        print('fail')\n    end\n    print(i)\nend\nos.exit(0)`\n58\n200 Ok\n59\n(libev) cannot allocate -32 bytes, aborting.\u0410\u0432\u0430\u0440\u0438\u0439\u043d\u044b\u0439 \u043e\u0441\u0442\u0430\u043d\u043e\u0432. @IlyaMarkovMipt \"libcurl-7.19.7-46.el6\",\n. ",
    "dsamirov": "Yes. This lua code is fine for me. I close this issue.. ",
    "stek29": "@Totktonada here's output of failing test with new version of test-run:\nlog\n\n```\n[006] Test failed! Output from reject file app-tap/tarantoolctl.reject:\n[006] TAP version 13\n[006] 1..6\n[006]     # basic test\n[006]     1..16\n[006]     ok - check 'start' command status for 'script'\n[006]     ok - check 'start' stderr for 'script'\n[006]     ok - check 'status' command status for 'script'\n[006]     ok - check 'status' stderr for 'script'\n[006]     ok - check 'start' command status for 'script'\n[006]     ok - check 'start' stderr for 'script'\n[006]     ok - check 'status' command status for 'script'\n[006]     ok - check 'status' stderr for 'script'\n[006]     ok - check 'stop' command status for 'script'\n[006]     ok - check 'stop' stderr for 'script'\n[006]     ok - check 'status' command status for 'script'\n[006]     ok - check 'status' stderr for 'script'\n[006]     ok - check 'stop' command status for 'script'\n[006]     ok - check 'stop' stderr for 'script'\n[006]     ok - check 'status' command status for 'script'\n[006]     ok - check 'status' stderr for 'script'\n[006]     # basic test: end\n[006] ok - basic test\n[006]     # basic test for bad script\n[006]     1..8\n[006]     ok - check 'start' command status for 'script'\n[006]     ok - check 'start' stderr for 'script'\n[006]     ok - check 'start' command status for 'bad_script'\n[006]     ok - check 'start' stderr for 'bad_script'\n[006]     ok - check 'start' command status for 'good_script'\n[006]     ok - check 'eval' command status for 'good_script bad_script.lua'\n[006]     ok - check 'eval' stderr for 'good_script bad_script.lua'\n[006]     ok - check 'stop' command status for 'good_script'\n[006]     # basic test for bad script: end\n[006] ok - basic test for bad script\n[006]     # check answers in case of call\n[006]     1..6\n[006]     ok - check 'start' command status for 'good_script'\n[006]     ok - check 'eval' command status for 'good_script bad_script.lua'\n[006]     ok - check 'eval' stderr for 'good_script bad_script.lua'\n[006]     ok - check 'eval' command status for 'good_script ok_script.lua'\n[006]     ok - check 'eval' stdout for 'good_script ok_script.lua'\n[006]     ok - check 'stop' command status for 'good_script'\n[006]     # check answers in case of call: end\n[006] ok - check answers in case of call\n[006]     # check basic help\n[006]     1..4\n[006]     ok - check stderr of 'tarantoolctl' without config\n[006]     ok - check stderr of 'tarantoolctl help' without config\n[006]     ok - check stderr of 'tarantoolctl --help' without config\n[006]     ok - check stderr of 'tarantoolctl' with config\n[006]     # check basic help: end\n[006] ok - check basic help\n[006]     # fill and test cat output\n[006]     1..29\n[006]     ok - check 'start' command status for 'filler'\n[006]     ok - cat result\n[006]     ok - cat line count\n[006]     ok - cat + --space=512 result\n[006]     ok - cat + --space=512 line count\n[006]     ok - cat + --space=666 result\n[006]     ok - cat + --space=666 line count\n[006]     ok - cat + --show-system result\n[006]     ok - cat + --show-system line count\n[006]     ok - cat + --format=json result\n[006]     ok - cat + --format=json line count\n[006]     ok - cat + --format=lua result\n[006]     ok - cat + --format=lua line count\n[006]     ok - cat + --from=3 --to=6 --format=json result\n[006]     ok - cat + --from=3 --to=6 --format=json line count\n[006]     ok - cat + --from=3 --to=6 --format=json --show-system result\n[006]     ok - cat + --from=3 --to=6 --format=json --show-system line count\n[006]     ok - cat + --from=6 --to=3 --format=json --show-system result\n[006]     ok - cat + --from=6 --to=3 --format=json --show-system line count\n[006]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 1 result\n[006]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 1 line count\n[006]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 1 --replica 2 result\n[006]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 1 --replica 2 line count\n[006]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 2 result\n[006]     ok - cat + --from=3 --to=6 --format=json --show-system --replica 2 line count\n[006]     ok - cat + --space=280 result\n[006]     not ok - cat + --space=280 line count\n[006]       ---\n[006]       filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]       trace:\n[006]       - line: 316\n[006]         source: '@/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]         filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]         what: Lua\n[006]         namewhat: upvalue\n[006]         name: check_ctlcat_snap\n[006]         src: '/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]       - line: 326\n[006]         source: '@/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]         filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]         what: Lua\n[006]         namewhat: local\n[006]         name: fun\n[006]         src: '/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]       - line: 218\n[006]         source: '@builtin/tap.lua'\n[006]         filename: builtin/tap.lua\n[006]         what: Lua\n[006]         namewhat: method\n[006]         name: test\n[006]         src: builtin/tap.lua\n[006]       - line: 325\n[006]         source: '@/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]         filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]         what: Lua\n[006]         namewhat:\n[006]         src: '/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]       - line: -1\n[006]         source: =[C]\n[006]         filename: eval\n[006]         what: C\n[006]         namewhat: global\n[006]         name: pcall\n[006]         src: '[C]'\n[006]       - line: 0\n[006]         source: '@/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]         filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]         what: main\n[006]         namewhat:\n[006]         src: '/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]       line: 0\n[006]       expected: 21\n[006]       got: 22\n[006]       ...\n[006]     ok - cat + --space=288 result\n[006]     not ok - cat + --space=288 line count\n[006]       ---\n[006]       filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]       trace:\n[006]       - line: 316\n[006]         source: '@/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]         filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]         what: Lua\n[006]         namewhat: upvalue\n[006]         name: check_ctlcat_snap\n[006]         src: '/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]       - line: 326\n[006]         source: '@/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]         filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]         what: Lua\n[006]         namewhat: local\n[006]         name: fun\n[006]         src: '/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]       - line: 218\n[006]         source: '@builtin/tap.lua'\n[006]         filename: builtin/tap.lua\n[006]         what: Lua\n[006]         namewhat: method\n[006]         name: test\n[006]         src: builtin/tap.lua\n[006]       - line: 325\n[006]         source: '@/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]         filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]         what: Lua\n[006]         namewhat:\n[006]         src: '/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]       - line: -1\n[006]         source: =[C]\n[006]         filename: eval\n[006]         what: C\n[006]         namewhat: global\n[006]         name: pcall\n[006]         src: '[C]'\n[006]       - line: 0\n[006]         source: '@/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]         filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]         what: main\n[006]         namewhat:\n[006]         src: '/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]       line: 0\n[006]       expected: 47\n[006]       got: 49\n[006]       ...\n[006]     # fill and test cat output: end\n[006] not ok - failed subtests\n[006]   ---\n[006]   filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]   trace:\n[006]   - line: 244\n[006]     source: '@builtin/tap.lua'\n[006]     filename: builtin/tap.lua\n[006]     what: Lua\n[006]     namewhat: method\n[006]     name: test\n[006]     src: builtin/tap.lua\n[006]   - line: 325\n[006]     source: '@/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]     filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]     what: Lua\n[006]     namewhat:\n[006]     src: '/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]   - line: -1\n[006]     source: =[C]\n[006]     filename: eval\n[006]     what: C\n[006]     namewhat: global\n[006]     name: pcall\n[006]     src: '[C]'\n[006]   - line: 0\n[006]     source: '@/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]     filename: /path/to/tarantool/test/app-tap/tarantoolctl.test.lua\n[006]     what: main\n[006]     namewhat:\n[006]     src: '/path/to/tarantool/test/app-tap/tarantoolctl.test.lua'\n[006]   planned: 29\n[006]   failed: 2\n[006]   line: 0\n[006]   ...\n[006]     # fill and test play output\n[006]     1..6\n[006]     ok - check 'start' command status for 'filler'\n[006]     ok - check lsn before\n[006]     ok - execution result\n[006]     ok - check lsn after\n[006]     ok - execution result\n[006]     ok - check lsn after\n[006]     # fill and test play output: end\n[006] ok - fill and test play output\n[006] # failed subtest: 1\n[006]\n[006] Last 15 lines of Tarantool Log file [Instance \"app_server\"][/path/to/tarantool/build/test/var/006_app-tap/tarantoolctl.test.lua.tarantool.log]:\n[006] Netbox console API is deprecated since 1.10, please use require('console').connect() instead\n[006] Netbox text protocol support is deprecated since 1.10, please use require('console').connect() instead\n[006] Netbox console API is deprecated since 1.10, please use require('console').connect() instead\n[006] Netbox text protocol support is deprecated since 1.10, please use require('console').connect() instead\n[006] Netbox console API is deprecated since 1.10, please use require('console').connect() instead\n[006] Netbox text protocol support is deprecated since 1.10, please use require('console').connect() instead\n```\n\n\n. Tests are now passing for me, but I had to run make test three times.\nFirst time it failed on workers becoming unresponsive, then it failed on backup test with TarantoolStartError, and then in onreplace2 with \"Instance bootstrap hasn't finished yet\" & \"User cluster not found\".\n. Putting sort functions in such header isn't a good idea IMO: either it would have to be marked as static (and that'd still cause code duplication in executable).\nAlso, from what I see most calls to qsort with such generic comparators are done in unit tests.. @Totktonada  see #3758. ",
    "khaliullov": "@Totktonada this reproduced on Ubuntu 16.04. I've mentioned that in ticket.\nfor example, docker image tarantool/tarantool (Alpine Linux) works fine.\n. steps to reproduce via Docker:\n```bash\n$ docker run --rm -it ubuntu:16.04 /bin/bash\napt-get update\napt-get install -y curl apt-transport-https gnupg2\ncurl http://download.tarantool.org/tarantool/1.7/gpgkey | apt-key add -\necho 'deb http://download.tarantool.org/tarantool/1.7/ubuntu/ xenial main' | tee /etc/apt/sources.list.d/tarantool_1_7.list\napt-get update\napt-get -y install tarantool\ntarantool\ntarantool> http = require('http.client').new()\ntarantool> result = http:request('POST', 'https://fcm.googleapis.com/fcm/send', '{\"to\":\"REDACTED\",\"data\":{\"test\":\"OK\"}}', { headers =  {['Authorization'] = 'key=REDACTED',  ['Content-Type'] = 'application/json'}})\n\n\nerror: 'curl: Failure when receiving data from the peer'\n...\n. @kyukhin just reproduced on Tarantool 1.9:bash\n$ tarantool\nTarantool 1.9.1-62-g0e29a71\ntype 'help' for interactive help\ntarantool> http = require('http.client').new()\n\n\n...\ntarantool> result = http:request('POST', 'https://fcm.googleapis.com/fcm/send', '{\"to\":\"REDACTED\",\"data\":{\"test\":\"OK\"}}', { headers =  {['Authorization'] = 'key=REDACTED',  ['Content-Type'] = 'application/json'}})\n\nerror: 'curl: Failure when receiving data from the peer'\n...\ntested on Docker ubuntu:16.04bash\n$ fgrep VERSION= /etc/os-release\nVERSION=\"16.04.4 LTS (Xenial Xerus)\"```\n. @kyukhin do you need any additional feedback or this is quite enough?. @Totktonada @kyukhin any progress? Should I add something else?. \n",
    "romanhabibov": "@mtrempoltsev, did you expect to see something like \"Undefined path: nil\"?. @bigbes, did you expect 'help' in all three cases?. @opomuc, I can't reproduce\n```\ntarantool> function start()\n         >     function handler(req)\n         >       print(require('json').encode(req.headers))\n         >       return { status = 200 }\n         >     end\n         >     http = require('http.server')\n         >     server = http.new('localhost', '4444')\n         >     server:route({path = '/'}, handler)\n         >     server:start()\n         >  end\ntarantool> require('fiber').create(start)\n2018-12-17 18:39:56.148 [32042] main/112/lua utils.c:939 E> LuajitError: [string \"function start()...\"]:2: assign to undeclared variable 'handler'\nthe fiber is dead\n```. > Maybe you meant 'before description'?\nYes, fixed.. ",
    "vanessasmith": "It works.\nthank you, \n. it works!\nthank you. ",
    "juise": "Stumbled upon the same issue on\n```\n\nbox.info.version\n\n\n\n1.9.1-0-g06ec3d5\n...\n```\n\nis there any ETA for bugfix?. The possible workaround slab_alloc_factor=2 suggested @kostja in https://groups.google.com/forum/#!topic/tarantool-ru/0EmWbax6g3w works very well. ",
    "veezhang": "after simple insert, the reference count is also 2\n```\n-- b739b9848311dcc5290677ade5fe0b85ff1776c8\n-- Tarantool 2.0.4-903-gb739b98\n-- box.cfg()\n-- test = box.schema.space.create('test', {if_not_exists = true})\n-- test:create_index('primary',{parts = {1, 'string'}, if_not_exists = true})\n-- test:insert({'id'})\n-- break at: tuple_new tuple_delete tuple_ref tuple_unref\nreference count\uff1a 0 -> 1\n0  tuple_ref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:857\n1  0x0000000000436c5e in memtx_space_execute_replace (space=0xc9e730, txn=0x7fffee84e040, request=0x7fffee81fd10, result=0x7fffee81fc98) at /source/tarantool-master/src/box/memtx_space.c:345\n2  0x000000000049bf13 in space_execute_dml (space=0xc9e730, txn=0x7fffee84e040, request=0x7fffee81fd10, result=0x7fffee81fc98) at /source/tarantool-master/src/box/space.c:498\n3  0x00000000004c06f2 in box_process_rw (request=0x7fffee81fd10, space=0xc9e730, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:176\n4  0x00000000004c3b0a in box_process1 (request=0x7fffee81fd10, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:999\n5  0x00000000004c3f6c in box_insert (space_id=512, tuple=0x7fffee84e038 \"\\221\\242id\", tuple_end=0x7fffee84e03c \"\", result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:1088\n6  0x00000000004f175c in lbox_insert (L=0x40000378) at /source/tarantool-master/src/box/lua/index.c:56\n7  0x000000000054545b in lj_BC_FUNCC ()\n8  0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=0, nresults=0, errfunc=0) at lj_api.c:1139\n9  0x00000000005098c7 in luaT_call (L=0x40000378, nargs=0, nreturns=0) at /source/tarantool-master/src/lua/utils.c:931\n10 0x0000000000502134 in lua_main (L=0x40000378, argc=1, argv=0xb59cd0) at /source/tarantool-master/src/lua/init.c:506\n11 0x0000000000502943 in run_script_f (ap=0x7fffee800200) at /source/tarantool-master/src/lua/init.c:604\n12 0x000000000040e2ee in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x5021ba , ap=0x7fffee800200) at /source/tarantool-master/src/fiber.h:657\n13 0x000000000051e53f in fiber_loop (data=0x0) at /source/tarantool-master/src/fiber.c:640\n14 0x00000000006ea4bb in coro_init () at /source/tarantool-master/third_party/coro/coro.c:110\nreference count\uff1a 1 -> 2\n0  tuple_ref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:857\n1  0x0000000000436917 in memtx_space_replace_all_keys (space=0xc9e730, old_tuple=0x0, new_tuple=0x7fffde060074, mode=DUP_INSERT, result=0x7fffee84e118) at /source/tarantool-master/src/box/memtx_space.c:280\n2  0x0000000000436c8a in memtx_space_execute_replace (space=0xc9e730, txn=0x7fffee84e040, request=0x7fffee81fd10, result=0x7fffee81fc98) at /source/tarantool-master/src/box/memtx_space.c:346\n3  0x000000000049bf13 in space_execute_dml (space=0xc9e730, txn=0x7fffee84e040, request=0x7fffee81fd10, result=0x7fffee81fc98) at /source/tarantool-master/src/box/space.c:498\n4  0x00000000004c06f2 in box_process_rw (request=0x7fffee81fd10, space=0xc9e730, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:176\n5  0x00000000004c3b0a in box_process1 (request=0x7fffee81fd10, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:999\n6  0x00000000004c3f6c in box_insert (space_id=512, tuple=0x7fffee84e038 \"\\221\\242id\", tuple_end=0x7fffee84e03c \"\", result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:1088\n7  0x00000000004f175c in lbox_insert (L=0x40000378) at /source/tarantool-master/src/box/lua/index.c:56\n8  0x000000000054545b in lj_BC_FUNCC ()\n9  0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=0, nresults=0, errfunc=0) at lj_api.c:1139\n10 0x00000000005098c7 in luaT_call (L=0x40000378, nargs=0, nreturns=0) at /source/tarantool-master/src/lua/utils.c:931\n11 0x0000000000502134 in lua_main (L=0x40000378, argc=1, argv=0xb59cd0) at /source/tarantool-master/src/lua/init.c:506\n12 0x0000000000502943 in run_script_f (ap=0x7fffee800200) at /source/tarantool-master/src/lua/init.c:604\n13 0x000000000040e2ee in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x5021ba , ap=0x7fffee800200) at /source/tarantool-master/src/fiber.h:657\n14 0x000000000051e53f in fiber_loop (data=0x0) at /source/tarantool-master/src/fiber.c:640\n15 0x00000000006ea4bb in coro_init () at /source/tarantool-master/third_party/coro/coro.c:110\nreference count\uff1a 2 -> 3\n0  tuple_ref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:857\n1  0x00000000004c075b in box_process_rw (request=0x7fffee81fd10, space=0xc9e730, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:190\n2  0x00000000004c3b0a in box_process1 (request=0x7fffee81fd10, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:999\n3  0x00000000004c3f6c in box_insert (space_id=512, tuple=0x7fffee84e038 \"\\221\\242id\", tuple_end=0x7fffee84e03c \"\", result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:1088\n4  0x00000000004f175c in lbox_insert (L=0x40000378) at /source/tarantool-master/src/box/lua/index.c:56\n5  0x000000000054545b in lj_BC_FUNCC ()\n6  0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=0, nresults=0, errfunc=0) at lj_api.c:1139\n7  0x00000000005098c7 in luaT_call (L=0x40000378, nargs=0, nreturns=0) at /source/tarantool-master/src/lua/utils.c:931\n8  0x0000000000502134 in lua_main (L=0x40000378, argc=1, argv=0xb59cd0) at /source/tarantool-master/src/lua/init.c:506\n9  0x0000000000502943 in run_script_f (ap=0x7fffee800200) at /source/tarantool-master/src/lua/init.c:604\n10 0x000000000040e2ee in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x5021ba , ap=0x7fffee800200) at /source/tarantool-master/src/fiber.h:657\n11 0x000000000051e53f in fiber_loop (data=0x0) at /source/tarantool-master/src/fiber.c:640\n12 0x00000000006ea4bb in coro_init () at /source/tarantool-master/third_party/coro/coro.c:110\nreference count\uff1a 3 -> 2\n0  tuple_unref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:878\n1  0x00000000004bd0c8 in txn_stmt_unref_tuples (stmt=0x7fffee84e108) at /source/tarantool-master/src/box/txn.c:108\n2  0x00000000004bdc96 in txn_commit (txn=0x7fffee84e040) at /source/tarantool-master/src/box/txn.c:354\n3  0x00000000004bd7da in txn_commit_stmt (txn=0x7fffee84e040, request=0x7fffee81fd10) at /source/tarantool-master/src/box/txn.c:254\n4  0x00000000004c076e in box_process_rw (request=0x7fffee81fd10, space=0xc9e730, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:191\n5  0x00000000004c3b0a in box_process1 (request=0x7fffee81fd10, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:999\n6  0x00000000004c3f6c in box_insert (space_id=512, tuple=0x7fffee84e038 \"\\221\\242id\", tuple_end=0x7fffee84e03c \"\", result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:1088\n7  0x00000000004f175c in lbox_insert (L=0x40000378) at /source/tarantool-master/src/box/lua/index.c:56\n8  0x000000000054545b in lj_BC_FUNCC ()\n9  0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=0, nresults=0, errfunc=0) at lj_api.c:1139\n10 0x00000000005098c7 in luaT_call (L=0x40000378, nargs=0, nreturns=0) at /source/tarantool-master/src/lua/utils.c:931\n11 0x0000000000502134 in lua_main (L=0x40000378, argc=1, argv=0xb59cd0) at /source/tarantool-master/src/lua/init.c:506\n12 0x0000000000502943 in run_script_f (ap=0x7fffee800200) at /source/tarantool-master/src/lua/init.c:604\n13 0x000000000040e2ee in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x5021ba , ap=0x7fffee800200) at /source/tarantool-master/src/fiber.h:657\n14 0x000000000051e53f in fiber_loop (data=0x0) at /source/tarantool-master/src/fiber.c:640\n15 0x00000000006ea4bb in coro_init () at /source/tarantool-master/third_party/coro/coro.c:110\nreference count\uff1a 2 -> 3\n0  tuple_ref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:857\n1  0x00000000004bf7aa in tuple_bless (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:897\n2  0x00000000004c0783 in box_process_rw (request=0x7fffee81fd10, space=0xc9e730, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:193\n3  0x00000000004c3b0a in box_process1 (request=0x7fffee81fd10, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:999\n4  0x00000000004c3f6c in box_insert (space_id=512, tuple=0x7fffee84e038 \"\\221\\242id\", tuple_end=0x7fffee84e03c \"\", result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:1088\n5  0x00000000004f175c in lbox_insert (L=0x40000378) at /source/tarantool-master/src/box/lua/index.c:56\n6  0x000000000054545b in lj_BC_FUNCC ()\n7  0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=0, nresults=0, errfunc=0) at lj_api.c:1139\n8  0x00000000005098c7 in luaT_call (L=0x40000378, nargs=0, nreturns=0) at /source/tarantool-master/src/lua/utils.c:931\n9  0x0000000000502134 in lua_main (L=0x40000378, argc=1, argv=0xb59cd0) at /source/tarantool-master/src/lua/init.c:506\n10 0x0000000000502943 in run_script_f (ap=0x7fffee800200) at /source/tarantool-master/src/lua/init.c:604\n11 0x000000000040e2ee in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x5021ba , ap=0x7fffee800200) at /source/tarantool-master/src/fiber.h:657\n12 0x000000000051e53f in fiber_loop (data=0x0) at /source/tarantool-master/src/fiber.c:640\n13 0x00000000006ea4bb in coro_init () at /source/tarantool-master/third_party/coro/coro.c:110\nreference count\uff1a 3 -> 2\n0  tuple_unref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:878\n1  0x00000000004c078f in box_process_rw (request=0x7fffee81fd10, space=0xc9e730, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:194\n2  0x00000000004c3b0a in box_process1 (request=0x7fffee81fd10, result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:999\n3  0x00000000004c3f6c in box_insert (space_id=512, tuple=0x7fffee84e038 \"\\221\\242id\", tuple_end=0x7fffee84e03c \"\", result=0x7fffee81fda0) at /source/tarantool-master/src/box/box.cc:1088\n4  0x00000000004f175c in lbox_insert (L=0x40000378) at /source/tarantool-master/src/box/lua/index.c:56\n5  0x000000000054545b in lj_BC_FUNCC ()\n6  0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=0, nresults=0, errfunc=0) at lj_api.c:1139\n7  0x00000000005098c7 in luaT_call (L=0x40000378, nargs=0, nreturns=0) at /source/tarantool-master/src/lua/utils.c:931\n8  0x0000000000502134 in lua_main (L=0x40000378, argc=1, argv=0xb59cd0) at /source/tarantool-master/src/lua/init.c:506\n9  0x0000000000502943 in run_script_f (ap=0x7fffee800200) at /source/tarantool-master/src/lua/init.c:604\n10 0x000000000040e2ee in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x5021ba , ap=0x7fffee800200) at /source/tarantool-master/src/fiber.h:657\n11 0x000000000051e53f in fiber_loop (data=0x0) at /source/tarantool-master/src/fiber.c:640\n12 0x00000000006ea4bb in coro_init () at /source/tarantool-master/third_party/coro/coro.c:110\nreference count\uff1a 2 -> 3\n0  tuple_ref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:857\n1  0x00000000006344c1 in box_tuple_ref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.c:408\n2  0x00000000004f0a76 in luaT_pushtuple (L=0x40000378, tuple=0x7fffde060074) at /source/tarantool-master/src/box/lua/tuple.c:500\n3  0x00000000004f16b5 in luaT_pushtupleornil (L=0x40000378, tuple=0x7fffde060074) at /source/tarantool-master/src/box/lua/tuple.h:77\n4  0x00000000004f1781 in lbox_insert (L=0x40000378) at /source/tarantool-master/src/box/lua/index.c:58\n5  0x000000000054545b in lj_BC_FUNCC ()\n6  0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=0, nresults=0, errfunc=0) at lj_api.c:1139\n7  0x00000000005098c7 in luaT_call (L=0x40000378, nargs=0, nreturns=0) at /source/tarantool-master/src/lua/utils.c:931\n8  0x0000000000502134 in lua_main (L=0x40000378, argc=1, argv=0xb59cd0) at /source/tarantool-master/src/lua/init.c:506\n9  0x0000000000502943 in run_script_f (ap=0x7fffee800200) at /source/tarantool-master/src/lua/init.c:604\n10 0x000000000040e2ee in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x5021ba , ap=0x7fffee800200) at /source/tarantool-master/src/fiber.h:657\n11 0x000000000051e53f in fiber_loop (data=0x0) at /source/tarantool-master/src/fiber.c:640\n12 0x00000000006ea4bb in coro_init () at /source/tarantool-master/third_party/coro/coro.c:110\nreference count\uff1a 3 -> 4\n0  tuple_ref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:857\n1  0x0000000000634799 in box_tuple_iterator (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.c:478\n2  0x000000000054740b in lj_vm_ffi_call ()\n3  0x00000000005d52ac in lj_ccall_func (L=0x40000378, cd=0x401564f8) at lj_ccall.c:1150\n4  0x00000000005fa5f3 in lj_cf_ffi_meta___call (L=0x40000378) at lib_ffi.c:230\n5  0x000000000054545b in lj_BC_FUNCC ()\n6  0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=1, nresults=1, errfunc=0) at lj_api.c:1139\n7  0x000000000050819b in lua_field_inspect_ucdata (L=0x40000378, cfg=0x4004d2d0, idx=5, field=0x7fffee81d7f0) at /source/tarantool-master/src/lua/utils.c:368\n8  0x0000000000508dcc in luaL_convertfield (L=0x40000378, cfg=0x4004d2d0, idx=5, field=0x7fffee81d7f0) at /source/tarantool-master/src/lua/utils.c:635\n9  0x0000000000512c5e in luaL_checkfield (L=0x40000378, cfg=0x4004d2d0, idx=5, field=0x7fffee81d7f0) at /source/tarantool-master/src/lua/utils.h:341\n10 0x000000000051444b in dump_node (dumper=0x7fffee81db80) at /source/tarantool-master/third_party/lua-yaml/lyaml.cc:569\n11 0x00000000005142ce in dump_array (dumper=0x7fffee81db80, field=0x7fffee81d980) at /source/tarantool-master/third_party/lua-yaml/lyaml.cc:520\n12 0x00000000005145d5 in dump_node (dumper=0x7fffee81db80) at /source/tarantool-master/third_party/lua-yaml/lyaml.cc:594\n13 0x00000000005148a4 in dump_document (dumper=0x7fffee81db80) at /source/tarantool-master/third_party/lua-yaml/lyaml.cc:665\n14 0x0000000000514d1a in lua_yaml_encode (L=0x40000378, serializer=0x4004d2d0, tag_handle=0x0, tag_prefix=0x0) at /source/tarantool-master/third_party/lua-yaml/lyaml.cc:751\n15 0x00000000004ee111 in lbox_console_format (L=0x40000378) at /source/tarantool-master/src/box/lua/console.c:362\n16 0x000000000054545b in lj_BC_FUNCC ()\n17 0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=0, nresults=0, errfunc=0) at lj_api.c:1139\n18 0x00000000005098c7 in luaT_call (L=0x40000378, nargs=0, nreturns=0) at /source/tarantool-master/src/lua/utils.c:931\n19 0x0000000000502134 in lua_main (L=0x40000378, argc=1, argv=0xb59cd0) at /source/tarantool-master/src/lua/init.c:506\n20 0x0000000000502943 in run_script_f (ap=0x7fffee800200) at /source/tarantool-master/src/lua/init.c:604\n21 0x000000000040e2ee in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x5021ba , ap=0x7fffee800200) at /source/tarantool-master/src/fiber.h:657\n22 0x000000000051e53f in fiber_loop (data=0x0) at /source/tarantool-master/src/fiber.c:640\n23 0x00000000006ea4bb in coro_init () at /source/tarantool-master/third_party/coro/coro.c:110\n-- collectgarbage('collect')\nreference count\uff1a 4 -> 3\n0  tuple_unref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:878\n1  0x00000000006347cd in box_tuple_iterator_free (it=0x7fffee898080) at /source/tarantool-master/src/box/tuple.c:486\n2  0x000000000054740b in lj_vm_ffi_call ()\n3  0x00000000005d52ac in lj_ccall_func (L=0x40000378, cd=0x40156558) at lj_ccall.c:1150\n4  0x00000000005fa5f3 in lj_cf_ffi_meta___call (L=0x40000378) at lib_ffi.c:230\n5  0x000000000054545b in lj_BC_FUNCC ()\n6  0x00000000005498cf in gc_call_finalizer (g=0x400003b8, L=0x40000378, mo=0x7fffee81fc50, o=0x40156538) at lj_gc.c:502\n7  0x0000000000549c10 in gc_finalize (L=0x40000378) at lj_gc.c:536\n8  0x000000000054a4b3 in gc_onestep (L=0x40000378) at lj_gc.c:695\n9  0x000000000054a917 in lj_gc_fullgc (L=0x40000378) at lj_gc.c:784\n10 0x000000000056790a in lua_gc (L=0x40000378, what=2, data=0) at lj_api.c:1254\n11 0x00000000005eb194 in lj_cf_collectgarbage (L=0x40000378) at lib_base.c:444\n12 0x000000000054545b in lj_BC_FUNCC ()\n13 0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=0, nresults=0, errfunc=0) at lj_api.c:1139\n14 0x00000000005098c7 in luaT_call (L=0x40000378, nargs=0, nreturns=0) at /source/tarantool-master/src/lua/utils.c:931\n15 0x0000000000502134 in lua_main (L=0x40000378, argc=1, argv=0xb59cd0) at /source/tarantool-master/src/lua/init.c:506\n16 0x0000000000502943 in run_script_f (ap=0x7fffee800200) at /source/tarantool-master/src/lua/init.c:604\n17 0x000000000040e2ee in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x5021ba , ap=0x7fffee800200) at /source/tarantool-master/src/fiber.h:657\n18 0x000000000051e53f in fiber_loop (data=0x0) at /source/tarantool-master/src/fiber.c:640\n19 0x00000000006ea4bb in coro_init () at /source/tarantool-master/third_party/coro/coro.c:110\nreference count\uff1a 3 -> 2\n0  tuple_unref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.h:878\n1  0x0000000000634500 in box_tuple_unref (tuple=0x7fffde060074) at /source/tarantool-master/src/box/tuple.c:416\n2  0x00000000004efb47 in lbox_tuple_gc (L=0x40000378) at /source/tarantool-master/src/box/lua/tuple.c:137\n3  0x000000000054545b in lj_BC_FUNCC ()\n4  0x00000000005498cf in gc_call_finalizer (g=0x400003b8, L=0x40000378, mo=0x7fffee81fc50, o=0x40155fd8) at lj_gc.c:502\n5  0x0000000000549c10 in gc_finalize (L=0x40000378) at lj_gc.c:536\n6  0x000000000054a4b3 in gc_onestep (L=0x40000378) at lj_gc.c:695\n7  0x000000000054a917 in lj_gc_fullgc (L=0x40000378) at lj_gc.c:784\n8  0x000000000056790a in lua_gc (L=0x40000378, what=2, data=0) at lj_api.c:1254\n9  0x00000000005eb194 in lj_cf_collectgarbage (L=0x40000378) at lib_base.c:444\n10 0x000000000054545b in lj_BC_FUNCC ()\n11 0x00000000005670d1 in lua_pcall (L=0x40000378, nargs=0, nresults=0, errfunc=0) at lj_api.c:1139\n12 0x00000000005098c7 in luaT_call (L=0x40000378, nargs=0, nreturns=0) at /source/tarantool-master/src/lua/utils.c:931\n13 0x0000000000502134 in lua_main (L=0x40000378, argc=1, argv=0xb59cd0) at /source/tarantool-master/src/lua/init.c:506\n14 0x0000000000502943 in run_script_f (ap=0x7fffee800200) at /source/tarantool-master/src/lua/init.c:604\n15 0x000000000040e2ee in fiber_cxx_invoke(fiber_func, typedef __va_list_tag __va_list_tag *) (f=0x5021ba , ap=0x7fffee800200) at /source/tarantool-master/src/fiber.h:657\n16 0x000000000051e53f in fiber_loop (data=0x0) at /source/tarantool-master/src/fiber.c:640\n17 0x00000000006ea4bb in coro_init () at /source/tarantool-master/third_party/coro/coro.c:110\nThanks\uff01. There is an error  when quota_used_ratio is 100% \nerror: Failed to allocate 380023 bytes in slab allocator for memtx_tuple\n```. ",
    "evanbates": "Hi, it was written that way to eliminate a step, i.e. the step of putting the file in \"instances.available\" and then creating a symlink to \"instances.enabled\" (similar to NGINX). In the interim, Tarantool has become more strict on the issue. So the thing to do is \n1. create the file in \"instances.available,\" (step 1 should be \"nano /etc/tarantool/instances.available/iplogger.lua\")\n2. Make a symlink: \"ln -s /etc/tarantool/instances.available/iplogger.lua /etc/tarantool/instances.enabled\"\n3. After that the \"tarantoolctl check\" statements should pass.\np.s.  you also need to make sure to have the \"http\" module installed. This was part of 101 Part 1, but the easiest way to install it is with the cmake directions here: https://github.com/tarantool/http, like so: \n   git clone https://github.com/tarantool/http.git\n   cd http && cmake . -DCMAKE_BUILD_TYPE=RelWithDebugInfo \n   make\n   make install\nLet me know if you have any additional questions!. Changes also made in tutorial itself.... ",
    "olegrok": "@kyukhin \nCherry-pick to 1.10 pls. I think, functions merge_tables and merge_arrays must be added to the standard library, too.. There is internal implementation of table.update in sources:\nhttps://github.com/tarantool/tarantool/blob/6ca97fd5ac0ef287c4ed543a3553c147ea6e4c39/src/box/lua/schema.lua#L305. So, this function must accept two arguments: number and precision.\nmath.round(1.222222, 2) -> 1.22. @Totktonada \nWhat do you think about this curl option https://curl.haxx.se/libcurl/c/CURLOPT_PIPEWAIT.html ? May be it's useful to have ability to set it for on-board http client?. Ok, thank you.\nI think we can close issue.. ",
    "edam": "Fair enough.\nI think lua-protobuf actually approximates lua_tonumberx() when it isn't available (i.e., LUA_VERSION_NUM < 502). And it isn't perfect (e.g., it won't detect that the string \"0\" has been correctly converted). And this is the same for any other library, unless they implement their own lua_tonumberx(), so it still might be worth adding to the exports lists.. ",
    "bambuchaAdm": "I don't know but could be related.\nOn one of routine deployment we got suspicious error on updating repository metadata.\nGet:10 https://packagecloud.io/tarantool/1_7/debian stretch InRelease [23.7 kB]\nErr:10 https://packagecloud.io/tarantool/1_7/debian stretch InRelease\n  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 20C3A9DB75CC7EDE\nI check address from we previously fetch public key\ncurl https://download.tarantool.org/tarantool/1.7/gpgkey | gpg --keyid-format=long\nwith result\npub   rsa4096/C2E73424D59097AB 2014-01-13 [SCEA] [expires: 2019-01-12]\n      418A7F2FB0E1E6E7EABF6FE8C2E73424D59097AB\nuid                           packagecloud ops (production key) <ops@packagecloud.io>\nsub   rsa4096/37BBEE3F7AD95B3F 2014-01-13 [SEA] [expires: 2019-01-12]\npub   rsa4096/59CF5991DDB8F16D 2017-04-17 [SCEA]\n      C1D9FA2A480A4B19714F279C59CF5991DDB8F16D\nuid                           https://packagecloud.io/tarantool/1_8 (https://packagecloud.io/docs#gpg_signing) <support@packagecloud.io>\nsub   rsa4096/CA41970154F1321F 2017-04-17 [SEA]\npub   rsa4096/C2E73424D59097AB 2014-01-13 [SCEA] [expires: 2019-01-12]\n      418A7F2FB0E1E6E7EABF6FE8C2E73424D59097AB\nuid                           packagecloud ops (production key) <ops@packagecloud.io>\nsub   rsa4096/37BBEE3F7AD95B3F 2014-01-13 [SEA] [expires: 2019-01-12]\npub   rsa4096/3C0DD5874005CF6B 2016-02-25 [SC] [expires: 2019-02-24]\n      4023599DF1DA76C64F27919E3C0DD5874005CF6B\nuid                           Tarantool packages archive key <build@tarantool.org>\nsub   rsa4096/5E1243E3719068A0 2016-02-25 [E] [expires: 2019-02-24]\nWhich doesn't contains key used for metadata in repo. . ",
    "sunpoet": "FYI, it's the patch I committed for building databases/tarantool in FreeBSD ports tree.. Did you build it from ports?\n-- Found CURL: /usr/local/lib/libcurl.so (found version \"7.61.1\")\n-- Performing Test CURL_SUPPORTS_SSL\n-- Performing Test CURL_SUPPORTS_SSL - Success. Here is how we specify iconv implementation in FreeBSD ports. If one port requires either wchar_t or translit functionalities, we add corresponding args to USES=iconv and converters/libiconv (libiconv.so) will be used.. Thanks for pointing out 16a636f and dcac64a. I meant to build tarantool with iconv from base system (libc), thus I added the patch. Since upstream decided to use libiconv from ports, the patch is not needed.\nBTW, FreeBSD 10 is expired on Oct 31.. ",
    "lgadina": "1024.\nMy mistake... . ",
    "aromatov": "Tarantool version 2.0.4-0-g6027e38a0\n```\nfunction get_file_info_list(dir_id)\n    local tuples = file_space.index.file_i_dir:select({ dir_id })\n    local files = {}\nif table.getn(tuples) > 0 then\n    for i, tuple in ipairs(tuples) do\n        local file = {}\n        file.id = tuple[F_INDEX_ID]\n        file.dir_id = tuple[F_INDEX_DIR_ID]\n        file.name = tuple[F_INDEX_NAME]\n        print('get_file_info_list file: '.. file.name)\n        file.ext = tuple[F_INDEX_EXT]\n        file.path = tuple[F_INDEX_PATH]\n        file.hash = tuple[F_INDEX_HASH]\n        file.os_type = tuple[F_INDEX_OS_TYPE]\n        file.screen_type = tuple[F_INDEX_SCREEN_TYPE]\n        file.ts = tuple[F_INDEX_UPD_TS]\n        file.description = tuple[F_INDEX_DESCRIPTION]\n        file.readonly = tuple[F_INDEX_READONLY]\n        file.user = tuple[F_INDEX_USER]\n        file.for_export = tuple[F_INDEX_FOR_EXPORT]\n        files[i] = file\n    end\nend\n\nreturn files\n\nend\n```\nprint used for debug. > Could you pls provide a testcase?\nWhat you need for repeat this bug? I already upgraded to version 2.1.1-7-gd381a45b6 but (mayby) have data which call crash.. Lua code above at comment from 12 Nov 2018. \nBefore only init box\nbox.cfg {\n        memtx_memory = 1 * 1000 * 1024 * 1024,\n        listen = 3301,\n        checkpoint_count  = 3,\n        checkpoint_interval = 3600,\n        work_dir = '/data',\n        wal_dir =  '/data',\n        log = '/logs/tarantool.log',\n        log_level = 5,\n        read_only  = false\n}\nthen create spaces and indexes (only once, it not calls when app crash).\nSome time later in any moment call code above at comment from 12 Nov 2018 causes a crash. Space contains some data.\n. ",
    "dkuk": "Same for me Tarantool 1.9.2-7-g3736c3798\nUbuntu 16.10\nAlso reproduces in Tarantool 1.10.2-66-g2972cfcee, Ubuntu 18.04.1 LTS\nSometimes this bug affects space:delete() operation. It falls with same error. After instance being restarted delete becomes possible.. ",
    "anton-barabanov": "kernel was 4.18\nexample.conf is like example.lua. Probably you didnt reproduce it because you didnt start tarantool listen. Try to start tarantool and enter\nbox.cfg{ listen=3301; }. ",
    "leksunin": "\nHow do use use dummy interfaces?\n\nWe not only create dummy interfaces, but also assign an IP address to them.\nLike this:\nhttps://pastebin.com/AVWYMnkb\nAfter:\nfor i in {3..12}; do ifup dummy$i; done. ",
    "nikvs84": "Tarantool 1.10.2-89-g671aada\nThe problem is reproduced exactly. Cluster node logs:\nmaster_1.log.gz\nmaster_2.log.gz. This trigger is used for all working spaces\n---trig\n---before_replace trigger for all working spaces\n---@param old table tuple\n---@param new table tuple\nfunction trig(old, new)\n    if new then\n        if old then\n            if new[columns.timestamp] > old[columns.timestamp] then\n                return new\n            else\n                return old\n            end\n        end\n    end\nend. ",
    "d9k": "% apt-cache search tarantool\nlibdr-tarantool-perl - perl driver for Tarantool\nlibmr-tarantool-perl - perl driver for tarantool\ntarantool-lts - In-memory database with Lua application server\ntarantool-lts-client - Tarantool in-memory database - command line client\ntarantool-lts-common - Tarantool in-memory database - common files\ntarantool-lts-dev - Tarantool in-memory database - development headers\ntarantool-lts-modules - Tarantool in-memory database - all plug-ins bundle\ntarantool-lts-mysql-module - Tarantool in-memory database - MySQL connector\ntarantool-lts-postgresql-module - Tarantool in-memory database - PostgreSQL connector\ntarantool-lts-sophia-module - Tarantool in-memory database - sophia bindings\ntarantool-queue - Persistent in-memory queues for Tarantool\ntarantool-http - HTTP server for Tarantool\ntarantool-pg - PostgreSQL connector for Tarantool. ```\n% apt show tarantool-http\nPackage: tarantool-http\nVersion: 1.0.66-1\nPriority: optional\nSection: database\nMaintainer: Roman Tsisyk roman@tarantool.org\nInstalled-Size: 106 kB\nDepends: tarantool (>= 1.7.5.0), libc6 (>= 2.4)\nHomepage: https://github.com/tarantool/http\nDownload-Size: 26.9 kB\nAPT-Sources: http://download.tarantool.org/tarantool/1.7/ubuntu bionic/main amd64 Packages\n% apt show tarantool-lts \nPackage: tarantool-lts\nVersion: 1.5.5.37.g1687c02-1\nPriority: optional\nSection: universe/database\nOrigin: Ubuntu\nMaintainer: Ubuntu Developers ubuntu-devel-discuss@lists.ubuntu.com\nOriginal-Maintainer: Dmitry E. Oboukhov unera@debian.org\nBugs: https://bugs.launchpad.net/ubuntu/+filebug\nInstalled-Size: 3,979 kB\nDepends: libc6 (>= 2.14), libgcc1 (>= 1:3.3.1), libgomp1 (>= 4.9), libstdc++6 (>= 4.1.1)\nRecommends: tarantool-lts-common\nSuggests: tarantool-lts-client (>= 1.5.0), libdr-tarantool-perl\nConflicts: tarantool (<< 1.6), tarantool-client (<< 1.5.0), tarantool-dbg (<< 1.5.2)\nReplaces: tarantool (<< 1.6)\nHomepage: http://tarantool.org/\nDownload-Size: 1,142 kB\nAPT-Sources: http://archive.ubuntu.com/ubuntu bionic/universe amd64 Packages\n. Got answer from chat that branch 1.7 is not suported for ubuntu bionic - based distros. ",
    "akudiyar": "Checked with CURL and libcurl versions (on Mac):\na.kuzin@a:~/sources$ otool -L `which tarantool`\n/usr/local/bin/tarantool:\n    /usr/local/opt/icu4c/lib/libicui18n.62.dylib (compatibility version 62.0.0, current version 62.1.0)\n    /usr/local/opt/icu4c/lib/libicuuc.62.dylib (compatibility version 62.0.0, current version 62.1.0)\n    /usr/local/opt/readline/lib/libreadline.7.dylib (compatibility version 7.0.0, current version 7.0.0)\n    /usr/lib/libncurses.5.4.dylib (compatibility version 5.4.0, current version 5.4.0)\n    /usr/lib/libform.5.4.dylib (compatibility version 5.4.0, current version 5.4.0)\n    /usr/local/opt/openssl/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/lib/libcurl.4.dylib (compatibility version 7.0.0, current version 9.0.0)\n    /usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4)\n    /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 400.9.0). With enabled 'verbose' flag:\nRequest:\n```\ntarantool> http = require('http.client').new({max_connections = 1})\n\n...\ntarantool> for _=1,10 do http:get('google.com', {headers = {['Connection'] = 'keep-alive'}, verbose = true}); require('fiber').sleep(0.3); end\n```\n```\n... skip ....\n Issue another request to this URL: 'http://www.google.com/'\n Hostname www.google.com was found in DNS cache\n   Trying 64.233.162.147...\n TCP_NODELAY set\n* Connected to www.google.com (64.233.162.147) port 80 (#57)\n\nGET / HTTP/1.1\nHost: www.google.com\nAccept: /\nConnection: keep-alive\nConnection: close\n\n< HTTP/1.1 200 OK\n< Date: Mon, 21 Jan 2019 08:48:08 GMT\n< Expires: -1\n< Cache-Control: private, max-age=0\n< Content-Type: text/html; charset=ISO-8859-1\n< P3P: CP=\"This is not a P3P policy! See g.co/p3phelp for more info.\"\n< Server: gws\n< X-XSS-Protection: 1; mode=block\n< X-Frame-Options: SAMEORIGIN\n< Set-Cookie: 1P_JAR=2019-01-21-08; expires=Wed, 20-Feb-2019 08:48:08 GMT; path=/; domain=.google.com\n< Set-Cookie: NID=156=M9ppLTamRW3tWkRTZnVIXKfYFdtkuA4F0o7j9YLPiVGe1lNPUso52lCETfKyxf0buu4iSc6CrI0MmLlYBwQpuChfeRn7liNRHouFc0FN2UPDAY6ABrhFvxk9aane1ryIsgeGzw0SId0GA-St4q2LsKB7EVPRu-_l3K26vCNKHbc; expires=Tue, 23-Jul-2019 08:48:08 GMT; path=/; domain=.google.com; HttpOnly\n< Accept-Ranges: none\n< Vary: Accept-Encoding\n< Connection: close\n< \n Closing connection 57\n Rebuilt URL to: google.com/\n Hostname google.com was found in DNS cache\n   Trying 64.233.164.102...\n TCP_NODELAY set\n Connected to google.com (64.233.164.102) port 80 (#58)\n\nGET / HTTP/1.1\nHost: google.com\nAccept: /\nConnection: keep-alive\nConnection: close\n\n< HTTP/1.1 301 Moved Permanently\n< Location: http://www.google.com/\n< Content-Type: text/html; charset=UTF-8\n< Date: Mon, 21 Jan 2019 08:48:09 GMT\n< Expires: Wed, 20 Feb 2019 08:48:09 GMT\n< Cache-Control: public, max-age=2592000\n< Server: gws\n< Content-Length: 219\n< X-XSS-Protection: 1; mode=block\n< X-Frame-Options: SAMEORIGIN\n< Connection: close\n< \n Closing connection 58\n Issue another request to this URL: 'http://www.google.com/'\n Hostname www.google.com was found in DNS cache\n   Trying 64.233.162.147...\n TCP_NODELAY set\n Connected to www.google.com (64.233.162.147) port 80 (#59)\n\nGET / HTTP/1.1\nHost: www.google.com\nAccept: /\nConnection: keep-alive\nConnection: close\n\n< HTTP/1.1 200 OK\n< Date: Mon, 21 Jan 2019 08:48:09 GMT\n< Expires: -1\n< Cache-Control: private, max-age=0\n< Content-Type: text/html; charset=ISO-8859-1\n< P3P: CP=\"This is not a P3P policy! See g.co/p3phelp for more info.\"\n< Server: gws\n< X-XSS-Protection: 1; mode=block\n< X-Frame-Options: SAMEORIGIN\n< Set-Cookie: 1P_JAR=2019-01-21-08; expires=Wed, 20-Feb-2019 08:48:09 GMT; path=/; domain=.google.com\n< Set-Cookie: NID=156=GwBT2h-Rmz8MsjlqWw_bevwrUyldKmql06OcGXQEXY9e4Z-kqOxRpk0reDeX908ap9-U1FzC0xmtS34BTBWn1bldTuq62LZSAOHhWt8otzl9VMbVrGOlwJ7Us_lxxTVpoi6e01fKpzmvxOBb5SudU0F2VYHF4TIjiZYbcqOdWL4; expires=Tue, 23-Jul-2019 08:48:09 GMT; path=/; domain=.google.com; HttpOnly\n< Accept-Ranges: none\n< Vary: Accept-Encoding\n< Connection: close\n< \n* Closing connection 59\n\n...\n```. Seems that the trouble is in concurrent request execution.\nWith this script (10 requests):\nn = 10; http = require('http.client').new({max_connections=15}); clock = require('clock'); fiber = require('fiber'); elt = 0; for i=1,n do fiber.new(function () start=clock.monotonic64(); http:get('http://test:80/ucp/0001/account_types/account_type/13', {headers = {['bauth-token'] = '***'}, verbose = true}); eltc = tonumber(clock.monotonic64()-start) / 1000000000; require('log').info('== time elapsed: %f ==', eltc); elt = elt + eltc; end) end\nFirst 4 requests are fast (~5 msec), other 6 are >100msec with increasing request time, the last one is 600msec\nIf keepalive* options are added, the situation is the same:\nn = 10; http = require('http.client').new({max_connections=15}); clock = require('clock'); fiber = require('fiber'); elt = 0; for i=1,n do fiber.new(function () start=clock.monotonic64(); http:get('http://test:80/ucp/0001/account_types/account_type/13', {headers = {['Connection'] = 'keep-alive', ['bauth-token'] = '***'}, verbose = true, keepalive_idle = 75, keepalive_interval = 7200}); eltc = tonumber(clock.monotonic64()-start) / 1000000000; require('log').info('== time elapsed: %f ==', eltc); elt = elt + eltc; end) end\nThe last request execution time is 100 times bigger then the first 4.\nWith 50 requests: first 18 are 8 msec (almost equal execution time), last 22 are > 100msec, the last ones are 400msec.\nWith 100 requests: ~40 requests are fast, the last ones are 100 times slower.. > Try to increase the max_connections option (default is 5): \nIt doesn't help (see, the number of connections in the test script is 15).. ",
    "avtikhon": "Also found that the test hangs and on timeout leaves the opened socket with process holding ~780Mb of memory. To reproduce the issue occuring in 1-1.5% of single test loop runs, do:\nfor r in {1..1000} ; do ./test-run.py --no-output-timeout 3 box/push.test >/dev/null 2>&1 && continue ; echo \"Fail reproduced ! check files:\" ; ls -al var/001_box ; ps auxT | grep cat var/001_box/box.pid ; lsof -p cat var/001_box/box.pid ; break ; done\nThe detected issue test code appeared during fix of\nhttps://github.com/tarantool/tarantool/issues/3859\nat\nhttps://github.com/tarantool/tarantool/commit/43af2de2b129dabafe94a61c89688dd4701f8800\n. Suggested patch:\ndiff --git a/test/vinyl/errinj_ddl.test.lua b/test/vinyl/errinj_ddl.test.lua\nindex 95e0ad3c1..971b0ba1d 100644\n--- a/test/vinyl/errinj_ddl.test.lua\n+++ b/test/vinyl/errinj_ddl.test.lua\n@@ -155,7 +155,7 @@ errinj.set(\"ERRINJ_VY_RUN_WRITE_DELAY\", false)\n ch:get()\ns.index.sk:select()\n-s.index.sk:stat().memory.rows\n+test_run:wait_cond(function() return s.index.sk:stat().memory.rows == 27 end, 500)\ntest_run:cmd('restart server default')\n@@ -165,12 +165,12 @@ errinj = box.error.injection\n s = box.space.test\ns.index.sk:select()\n-s.index.sk:stat().memory.rows\n+test_run:wait_cond(function() return s.index.sk:stat().memory.rows == 27 end, 500)\nbox.snapshot()\ns.index.sk:select()\n-s.index.sk:stat().memory.rows\n+test_run:wait_cond(function() return s.index.sk:stat().memory.rows == 0 end, 500)\ns:drop()\n. The shown timeout 500 is temporary till the update with global 60 seconds timeout will be set in test-run repository.\n. ",
    "stanztt": "Could you please clarify what exactly the problem is? Should we treat the letters '\u0415' and '\u0401' as equal, or  should not?\nE.g. below is an output from Tarantool 1.10.2-146-gf1ff0b507\n```\ntarantool> s1 = box.schema.space.create('t1')\n\n...\ntarantool> s1:format({{name='s1', type='string', collation = 'unicode'}})\n\n...\ntarantool> s1:create_index('pk', {unique = true, type='tree', parts={{'s1', collation = 'unicode'}}})\n\n\nunique: true\n  parts:\ntype: string\n    is_nullable: false\n    collation: unicode\n    fieldno: 1\n  id: 0\n  space_id: 519\n  name: pk\n  type: TREE\n...\ntarantool> s1:insert{'\u0401'}\n\n\n\n['\u0401']\n...\ntarantool> s1:insert{'\u0451'}\n\n\n\n['\u0451']\n...\ntarantool> s1:insert{'\u0415'}\n\n\n\n['\u0415']\n...\ntarantool> s1:insert{'\u0435'}\n\n\n\n['\u0435']\n...\ntarantool> s1:select{}\n\n\n\n\n\n['\u0435']\n\n\n['\u0415']\n['\u0451']\n['\u0401']\n...\n```\n\nAnd for case insensitive version:\n```\ntarantool> s2 = box.schema.space.create('t2')\n\n...\ntarantool> s2:format({{name='s1', type='string', collation = 'unicode_ci'}})\n\n...\ntarantool> s2:create_index('pk', {unique = true, type='tree', parts={{'s1', collation = 'unicode_ci'}}})\n\n\nunique: true\n  parts:\ntype: string\n    is_nullable: false\n    collation: unicode_ci\n    fieldno: 1\n  id: 0\n  space_id: 518\n  name: pk\n  type: TREE\n...\ntarantool> s2:insert{'\u0401'}\n\n\n\n['\u0401']\n...\ntarantool> s2:insert{'\u0451'}\n\n\n\nerror: Duplicate key exists in unique index 'pk' in space 't2'\n...\n```\n\nIs this behaviour correct or not?. Got it. \nThank you, Peter.. ",
    "tauraloke": "I missed correct type in example.. ",
    "ZUBAT": "Tarantool version: 1.10.2-177-g13896a731\nThe problem also persists. "
}