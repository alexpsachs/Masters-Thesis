{
    "cseelus": "Awesome\n. The current App Icon is an adaption of the original VIM logo for Apples former Human Interface Guidelines regarding App Icons. \nThe one proposed by @jasonlong looks like it is adapted to the current Human Interface Guidelines for OSX.\n. @pityonline, the time of heavy dark shadows and rugged skeuomorphism in OSX-land is well over since Yosemite.\nYou might try Candybar or similar solutions if you really can't deal with the new OS X Human Interface Guidelines for App Icons though.\nI really like the new icon and think it fits very well into Yosemite overall.\n\n. ",
    "chdiza": "From the macvim mailing list, from @douglasdrumond:\n\nI'll follow the guidelines already stablished (for instance, once in a while someone will ask to change the icon and my answer == Bj\u00f6rn's answer). \n. Probably the items in the list after the fourth one should be removed, since it's hard to imagine someone actually puts MacVim.app there.  But I left them in for backward compatibility.\n\nEDIT: I meant to say, the entries of the form  \"*/vim\"; I suspect those are cruft from the days of the Carbon gui.\n. ping\n. It's officially advised to not have two copies of MacVim on one's machine.  Having two copies has been the cause of plenty of weirdness over the years.\n. There are some easy CLI ways for a user to make MacVim the default opener for whatever she wants, e.g., http://duti.org.  (And this is useful well beyond MacVim).\nRCDefaultApp is the best GUI way to do this.\n. This  commit has caused two bugs.\nThe first is reported under here  (Though this might not be caused by the commit in question; it's possible the commit just forgot to take account of non-Lion fullscreen mode).\nThe second is as follows.  My gvimrc sets &columns and &lines to a specific dimension (80x40, respectively).  I make an external monitor my primary one (it's active as soon as I plug it in to my MacBook), and the internal screen secondary.  After this commit, if I click on the desktop of my secondary monitor to make it active, then Cmd-Tab to MacVim, then hit Cmd-N, I no longer get a 80x40 MacVim.  Rather, I get a 68x25 MacVim.  It's as if this commit makes MacVim assume that on a smaller monitor, the size of the MacVim window upon first creating one should be correspondingly smaller.  If I then click over on the bigger desktop (for the external monitor) to make it active, then with MacVim the active app do Cmd-N, I get by 80x40 back.\nSo really, there are two sub-bugs to the second bug:  (1) that on a smaller active screen, MacVim tries to make my window be smaller, and (2) that it somehow succeeds (how on earth is this overriding my gvimrc?).\n. Ah, I have just discovered that the 68x25 nonsense is not the fault of this commit; I can reproduce that behavior in 7.4.622.  My apologies.\n(It is still a bug, though).\n. This seems to have caused an ugly white flash inside the MacVim window's rectangle upon first doing Cmd-N, or doing mvim foo at the terminal.  I'm on 10.10.3.\n. This is really visible if your colorscheme (in .gvimrc) has a dark background.\n. I've bisected to verify that that commit is the culprit, and it is.\nAlso, I have reproduced this on a separate machine.\n. I can get you screenshots later tonight or tomorrow.\nThis white flash is MEGA annoying, as you'll see if I can figure out how to capture video.\n. Yeah, that's it, and it's unbearable.  Up close and in person, it's like a camera flash going off, especially if the desktop wallpaper (or other nearby windows) are on the dark side of things.\n@douglasdrumond I'd like to ask that this commit be reverted until we know what to do.\n. Oh man, it gets better :)\nPipe something into mvim as stdin, e.g., $ foo bar | mvim -, where the time for foo bar to complete is less than instantaneous.  Then, the big ugly white space sits there until mvim has taken in all of the pipe.\nFor (non)fun: ls -R /| mvim -.\nI pipe stuff into into mvim all the time :(\n. @eirnym I'm not having any such problems.  The issue is with how MacVim looks while waiting, not with the eventual buffer contents.\n. This is separate from the white flash issue.\nI'm going to bisect later to find out where this non-hiding appeared.\n. This issue is not in any way about old versions of OS X.  It is about one of the two styles of \"fullscreen behavior\" we support, both of which work and are meant to work on 10.7 and up.  (One of them doesn't and can't work on 10.6 or under.)  Indeed, my original report of this issue is of incorrect behavior on Yosemite.  The label \"Deprecated OSX\" is not right, so I'm going to remove it.\nAs to whether this behavior is still happening, I can't test this right now since I am not at a desk with an external monitor.\n. > Anyway we don't need MMFullScreenWindow for 10.10 or later. We should make MMFullScreenWindow deprecated.\nNo, no, no, a thousand times no :smile:.  The older style of fullscreen is preferable to the Lion-and-up style in many ways, depending on one's workflow, and not just aesthetically.  My workflow depends on its existence.\nIt is a giant pain in the butt to wait for the Mac's animation delay when switching into Lion-and-up mode.  Also, that forces the newly-fullscreened window onto a different space than it used to be on, which is annoying enough even if it didn't carry an annoying animation delay with it.  Also, it prevents there being two fully-fullscreened windows on the same space.  Also, it prevents there being a fullscreened window and and non-fullscreened window on the same space.  All of these things that the Lion-and-up mode prevents are sometimes useful.\nThere is just no reason to drop it.  It's not hurting anything, and it helps some people.\nIn fact, the original fullscreen style is almost the entire reason I use MacVim rather than just vim in the console like I used to years ago.\nI know some people like the Lion-and-up style too.  That's fine.  We can have both without problems.\n. > Then, what is the result of the bisect?\nI will do the bisect when I am sitting at a place that has an external monitor I can use for testing.\n. (a) The rest?  There's more?\n(b) If I do mvim -u NONE -U NONE -N, followed by set gfn=*, there is no crash, and the font dialog appears, BUT.... the same message about \"Layout still needs update after...\" is printed to the Terminal.\n. I build from the repo, and I built the most recent commit.\n. There is no crash report.  Perhaps it's not technically a \"crash\".\n\nCan you get the stack trace by running your local build under a debugger?\n\nI'm sorry, I don't know what that means.  I'm not a programmer.  EDIT: except for VimL.\n\nI'll try pulling that in tomorrow and seeing if I can reproduce with that\n\nI get the pseudo-crash without the recent fullscreen fix.\n. > (so instead of looking for a crash for \"MacVim\" you might try looking for \"Vim\")\nNo crash report for Vim either.\nI'm finding that I suddenly can't reproduce this.  This has become a thing with MacVim; there are other pseudo-crashes that are only sometimes reproducible.  Some simple action (like the &gfn mentioned here) will bring down MacVim (even with mvim -u/U NONE) on demand for a few days, leaving no actual crash report, and then suddenly stop doing it.  This happens on multiple machines and multiple OSes (Yosemite and Mavericks).\n. This will start being reproducible again any flippin' minute.\n. I get this on more than one machine, FWIW.\n. It still happens on  Yosemite.  I have not yet seen it on El Cap, but I haven't been trying very often.\n. As long as this doesn't break building on Tiger...\n. I can confirm that the most recent commit (which amounts to Snapshot 77) has built on Tiger and Leopard.  I see no problems yet.\n. Bram just announced that the move to Github will be official.  I don't know how that impacts the issue of keeping pace.\n. Ninety-six!!\n. Yeah, I saw that (nice work).  I wish it would be accepted.\n. We are up to date now, mercifully, but I'm concerned that the underlying issue is not yet fully addressed.  The underlying issue being the gigantic gap that opens between Vim and our pull-ins of Vim between nearly every pair of updates.  These huge gaps are not the norm over the whole course of MacVim's history.  @b4winckler abdicated because he realized he couldn't keep these gaps as small as they should be, but they've only grown larger.\nNow there are more people with push access, which potentially helps.  But whether it actually helps depends on whether (a) we will consistently act to keep the gap tiny and (b) whether, in the absence of action on our part, others have the ability to pitch in.  There still needs to be published somewhere a detailed, followable set of steps for: how to pull in Vim patches, advice on resolving conflicts, how to not mess up the Bram commit history, etc.   This way if the people who already know how to do this get too busy, someone industrious (user or maintainer, whichever) can make a PR.\nI opened this issue because I wanted to help keep the gap small.  Now I have push power (thanks, @douglasdrumond!  Whether this was wise is another story :smile:).  But I still have no idea how to help with this, in the event that the other three pushers are busy.\n. I meant the gap between the official Vim patchlevel and our internal Vim's patchlevel.  This gap has been enormous.  Until a few days ago we were over 100 patches behind: Vim was at 7.4.889 and we were at 7.4.769.  We should generally merge Vim patches as soon as Bram releases them (except e.g. when they're just Windows patches).\nBut you're right @splhack, the Mac-specific additions or divergences from the base Vim code should continue to be kept small.  Eventually, our GUI should be merged into mainline Vim alongside (or in place of) the old Carbon GUI.\n. A few Vim patches came out today.  As a test, I did the following in my macvim repo dir:\ngit remote add vim https://github.com/vim/vim\ngit fetch vim\ngit checkout -b upstream_vim --track vim/master\ngit checkout master\ngit merge upstream_vim\nI think the first and third steps are only needed the first time.  But other than that, is that the right workflow?\nObviously there will sometimes be merge conflicts.\n(I added the third step because otherwise I could see no way to checkout the plain vim branch for inspection.  That's right, I can barely use git.)\n. >  git remote add vim git@github.com:vim/vim.git\nThat doesn't work.  If I follow it with git fetch.  I get:\n```\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n``\n. Forgive my ignorance, but instead of hassling with keys, can't I just dogit remote add vim https://github.com/vim/vim` instead?  Do I have to use the ssh protocol?\n(I already tried this above and it seemed to work; that's why I was double checking a few posts back that I got the commands right.)\n. I cannot replicate this.\nDid you try mvim -u NONE -U NONE -N?\n. Did you try starting MacVim from the terminal with mvim -u NONE -N?  That will rule out any interference from your vimrc or gvimrc or plugins.\n. I can't reproduce it, not even with mvim -u dummyrc -N, where dummyrc is a blank file.\nWhat about if you run it from the Vim located at /Applications/MacVim.app/Contents/MacOS/Vim?\n. I can see in that screencast that your version of MacVim is old.  Please try it with Snapshot 77.\n. When I try your exact command with the latest MacVim, I get a netrw error, probably because the URL scp://dlindelof@strider-local looks like a typo.  Did you mean strider.local?\nI strongly suspect this is a netrw issue, not a MacVim one.  We haven't ruled that out yet, because you have only compared console vim 7.3 with MacVim 7.4.258.  Among other things, they will have different versions of netrw contained in them.\n. For example, the version of netrw contained in MacVim 7.4.258 might not like a URL like yours where there is no dot.\nWe'll know more after you try MacVim Snapshot 77.  If it still doesn't work there, it's a netrw issue.\n. FWIW this is still happening on ElCap.\n. I find it hard to believe I'm the only person this is happening to.\nIt happens even with mvim -u NONE -U NONE -N, so it's not my ~/.vim.\nIt also (on El Cap, anyway) now happens under the following circumstance: Open a new MacVim window. Hit ione two three. Hit Cmd-S. Type \"foo\" to name the file. Hit \"return\".\nObserve that MacVim pseudocrashes immediately, and that Console holds the same message mentioned above.\nI build MacVim with these flags:\n--with-features=big\n  --disable-netbeans\n  --disable-nls\n. I never could reproduce this on 10.11.\n. Also, be sure that when you're launching from the Terminal you're doing mvim -u NONE -U NONE -N, so that we can rule out interference from .[g]vimrc and .vim/.\n. Alternatively: defaults delete org.vim.Macvim obviates the need to kill a daemon (according to Apple).\n. Do you have some kind of third-party window manager installed, like Slate, Divvy, etc?\n. Thanks for reverting.\n. I don't know exactly which commit (or commits) it was.  Bisecting takes a long time, since this is on a Powerbook G4, and I have to do it for Tiger and Leopard.  I'm away from that machine for a while.\n. I'll test that as soon as I'm in the same room as my G4.\n. No luck yet on Tiger, but the failure point is different now.  It gets to the end building the plain Vim portion, and then stops. Here is the new output:\ngcc   -L/usr/local/lib  -o Vim objects/buffer.o objects/blowfish.o objects/charset.o objects/crypt.o objects/crypt_zip.o objects/diff.o objects/digraph.o objects/edit.o objects/eval.o objects/ex_cmds.o objects/ex_cmds2.o objects/ex_docmd.o objects/ex_eval.o objects/ex_getln.o objects/fileio.o objects/fold.o objects/getchar.o objects/hardcopy.o objects/hashtab.o  objects/if_cscope.o objects/if_xcmdsrv.o objects/mark.o objects/memline.o objects/menu.o objects/message.o objects/misc1.o objects/misc2.o objects/move.o objects/mbyte.o objects/normal.o objects/ops.o objects/option.o objects/os_unix.o objects/pathdef.o objects/popupmnu.o objects/quickfix.o objects/regexp.o objects/screen.o objects/search.o objects/sha256.o objects/spell.o objects/syntax.o  objects/tag.o objects/term.o objects/ui.o objects/undo.o objects/version.o objects/window.o objects/gui.o objects/gui_beval.o objects/pty.o objects/gui_macvim.o objects/MMBackend.o objects/MacVim.o        objects/os_macosx.o objects/os_mac_conv.o    objects/main.o objects/memfile.o -framework Cocoa -framework Carbon       -lm -lncurses  -liconv -framework Cocoa          \n/usr/libexec/gcc/powerpc-apple-darwin8/4.0.1/ld: Undefined symbols:\n_gui_macvim_set_blur\ncollect2: ld returned 1 exit status\nmake[1]: *** [Vim] Error 1\nmake: *** [first] Error 2\n. However, the build now completes on Leopard.\nI'll play around and make sure it seems to be working OK.\n. @rhendric But I did it off a fresh clone of your repo using the master branch as you indicated.\n. Here's a possibly informative observation: if I comment out line 1775 of vim.h, to ensure that BLUR_TRANSPARENCY is not defined, then I don't get the error I reported above.  However, for some reason the xcodebuild phase of things doesn't auto-start.\nPerhaps the conditional test in line 1754 is somehow faulty?\n.  I should've mentioned, the line numbers refer to the vim.h in rhendric/macvim.\n. Hmmm.  It appears that on Tiger, there is no such thing as MAC_OS_X_VERSION_10_5 defined in AvailiabilityMacros.\nI don't know C or anything, but I'm going to test replacing MAC_OS_X_VERSION_10_5 with 1050 in line 1754 and see what happens.\n. @rhendric Yep, that was it.  Just replace, in line 1754 of vim.h, the MAC_OS_X_VERSION_10_5 with 1050.\n. It works, thanks :)\n. +1, this allows building again on Tiger.\n. > There doesn't seem to be a prebuilt app for snapshot 78.\nThat's probably because 78 contained a regression and was immediately reverted.\n. I was thumbs-down on this, but now I think I may have turned 180 degrees.  Is it the case that: mousetime is supposed to govern gVim's double-clicking threshold for all GUI implementations, but our implementation happens to not obey this?  :help 'mousetime' suggests so.\nIf that is the case, then this PR should be merged[1] and there should be a new entry under :help macvim explaining that MacVim, like all gVims and indeed like console Vim, is supposed to ignore your system's thresholds.\nAnd, there should be either no preference option to toggle this, or at worst, if we're going to include yet another divergence from Vim behavior, I would strongly favor @djjcast's idea \"2\".\nSince Vim in the console (including the Vim buried in MacVim when run in console mode) already obeys mousetime at the expense of the system threshold, I see no reason to default MacVim to doing anything else.  The worst option to me appears to be to make this a GUI preference checkbox that defaults to ignoring mousetime altogether.  To be unpleasantly surprised by the change this PR introduces, a user would have to (a) be the sort of person who uses the mouse with Vim, and specifically, for double-clicking, (b) not have mousetime set in vimrc, and (c) have the system threshold set to significantly less than 500 milliseconds.  I doubt the number who meet all three of these is great enough warrant making a bugfix an opt-in affair, especially when it would be so easy to opt-out.\n[1] Subject, of course, to this being the right way to make MacVim obey mousetime, and subject to there being no hidden technical reasons why Bjorn didn't just make MacVim obey mousetime in the first place way back when.  I have zero qualifications to comment on that.\n. This is due to the fact that, like with e.g. Terminal, MacVim deals with rows of a fixed height.  It doesn't make sense to display a fraction of a row, so if the screen height isn't a multiple of the row height, there will be a bit of space left over.  There is no reason to fill it, since Macvim can't put a row there.\n\nCompare this to a native OSX window, which can grow well beyond the screen size if you move and drag, \n\nA MacVim window will easily grow beyond the screen size if you move-and-drag.  It won't do this in the vertical direction, of course, but neither will \"a native OSX window\".\nIf by \"move and drag\" you mean some operation in Divvy, then this is the wrong forum.\n. I didn't know a window could be resized from the titlebar.  Shows how often I resize by hand!\nI'm pretty sure this is a technical limitation that's been addressed more than once (here or the mailing list, I can't recall).  But on top of that, I'm not really sure what one would want Vim to be \"putting\" there in that thin little space.  Certainly not a row, under the cmdline.  Then what?  A colored strip matching the background color?  That would look weird, because it would make the value of cmdheight appear bigger than it really is.  A strip of a different color?  That looks worse than leaving it unoccupied.\nUnlike those other editors (AFAIK), Vim cannot display vertical fractions of a row of text.  It scrolls only in whole rows.\n. I can't reproduce this on 10.11, 10.10, 10.9, 10.5, or 10.4.\nBut then again, I don't install from MacPorts.\n@FGasper would you mind pasting in the output of defaults read -app MacVim?  Also, does this behavior occur even if all your already-open MacVim windows are on the same monitor?\n. > Couldn't find an application named \"MacVim\"; defaults unchanged\nNow that is bizarre.  What about defaults read org.vim.MacVim?\n. As far as I recall, that was ONLY for 10.7 and 10.8, and might have only applied to when some new major revision to Xcode came out and goofed everything up.  The last I remember, I had to do that on my Lion machine but on no others.  I no longer have a Lion machine, so I can't test.\n. Well, either no URL at all, or github.com/macvim-dev/macvim.  The Vim home page link is already in the README.\n. Thanks!\n. Before I make a final call on this, I'd like to be sure that we've taken into consideration as many possible side-effects as we can.  Can anyone else think of any?\n. OK, I'll do this when I get a chance.  The gain in searchability would be nice.\n. > some other way for us to more easily test whether or not we're still building on older SDKs than making @chdiza suffer through it every time?\nIt's not too big a deal.  Changes to src/macvim or other Mac-specific tweaks are usually spaced far apart enough that I'm not glued to by Powerbook G4 doing testing.\n. Good news.  This patch fixes building on Tiger PPC.  Also, with this patch applied, Leopard PPC builds and passes the \"will it open up and go in and out of fullscreen\" test.\nThanks, @splhack!\n. This PR works locally on ElCap.  Lemme try to build on Tiger real quick...\n. Builds on Tiger.  I'll defer to others on merging.\n. I wonder if this will affect building MacVim under Homebrew.  (I'm not in a position to test right now.)  If it does affect that, we're going to have Homebrew on our case to fix this.  If it does not affect that, perhaps superenv contains a clue as to how to fix it here.\n. A build log wouldn't show the problem, though, right?  The problem is once one tries to open MacVim.app after a normal-looking build completes.  The build process over here gives no indication that anything's wrong (at least, not that I can tell).\nMake even make test wouldn't show it, because maybe the Vim binary inside of MacVim.app is not ElCap-only.\n. > Sorry, what's the problem?\nThe problem is that on a Yosemite machine, with Xcode 7.1 and the Yosemite CLT for 7.1, the result of going through the build process is an .app that only runs on El Cap.\n. Building MacVim on an ElCap machine, with Xcode 7.1 and the ElCap CLT for 7.1, is fine with zero problems.\nIf that test snapshot was built on an ElCap machine, then even if it can run on a Yosemite machine, there is still a problem.\n. > It sounds like you should submit a report to Apple\nI have no evidence that this issue extends beyond MacVim.  Also, in the event that they were to reply, I am not qualified to answer queries about our build system.\n. > By the way, are you sure to set Deployment Target for your old OS X?\nI did not, because I have never, ever had to do that before, even going back to 2007 and Tiger.  Thus it never occurred to me to do that.  I'll try it.\n. Since it appears that this is a general problem (not just me), whatever \"set Deployment Target\" means should be added to the wiki.  Do you mean the shell variable MACOSX_DEPLOYMENT_TARGET?  This is, of course, assuming that that actually fixes the problem.\nI won't have access to a Yosemite machine for testing until tomorrow.\n. I don't think this issue should be closed.  We have to decide on the appropriate fix, and then publicize it.  Anyone else having this problem should be able to see this issue in the list of open issues.\nTurns out, I did have a 10.10 machine to test on.  Setting export MACOSX_DEPLOYMENT_TARGET=\"10.10\" before the configure step worked for me.  @steeef Try that out and see if it works for you.\nSetting such a variable has never been required before.  I think that the xcodeproj (or whatever) should be tweaked so that a user doesn't have to do that.\n. > It's possible you need to set that on the command line (via a flag or env var) prior to building?\nIt has never before been necessary for a user to manually do this, on any version of MacVim or any version of OS X.  Ideally, it would stay this way, and we will tweak some file instead.  I wasn't sure whether the xcodeproj was the appropriate place for making a tweak, and I also don't know what the tweak would even need to be.  Perhaps our configure or Makefile is the place; maybe we need Makefile to contain xcodebuild --somethingnew the_usual_params ....\nBy the way, this problem exists even when building under Homebrew on a Yosemite machine.  I'm watching the Homebrew issues page like a hawk in case this problem gets reported there.\n. There are two relevant instances of MACOSX_DEPLOYMENT TARGET in the xcodeproj, and both of them are set to the empty string.  I replaced the empty strings with \"10.4\", and this caused building to fail on both ElCap and Yosemite.\nSo I tried again with \"10.6\", and this time building was successful on Yosemite.  I'll now double-check that building will still work on ElCap.\nBut note that if building will succeed on ElCap, we will have the problem of what to do about Tiger and Leopard.  I have some thoughts about this, which I'll share soon.\n. OK, with the Deployment Target set to 10.6 inside the xcodeproj, building on ElCap succeeds.\nSo here are some questions:\n1. Though this is a fix for the current issue (the one in the title of the thread), is this the RIGHT fix for it?\n2. If the answer to (1) is \"yes\", what do we do about Tiger and Leopard?  Again, I have some thoughts on this, but they're probably better to put in their own issue.\n. > I wonder if we should just bite the bullet and create distinct release branches for each major OS revision.\nI was thinking that, under the macvim-dev organization, we can have a fork dedicated to Tiger/Leopard.  This fork would basically leave src/macvim untouched, but bring in Vim updates.  At first I thought, \"why not just a separate git branch for Tiger/Leo?\", but then it occurred to me that we don't want to in effect require git in order for someone on Tiger or Leo to build MacVim.\n. > (The .xcodeproj does need to be updated for other reasons, but I've been holding off because I don't know how they will impact the ability to build for and under old OS versions.)\nOut of curiosity, why does it need to be updated?  Obviously, it COULD be updated, but are we building a defective MacVim on newer OSes if we don't update it?  I don't think we are, but I could be wrong.\nFor the sake of knowledge, I will check out your xcodeproj-updating branch and check to see what happens on Tiger and Leopard.\n. > But if you do that, you can specifically download the .zip of a desired branch\nAs long as there is a way to do that from the web (without using git at the CLI), that's OK with me, because we can always tell people in the wiki exactly how to do this.\n. I had wrongly assumed there was no way to do that.\n. > For the sake of knowledge, I will check out your xcodeproj-updating branch and check to see what happens on Tiger and Leopard.\nBuilding on Tiger seemed to go off without a hitch.  Leopard is next.\n. Worked on Leo too.\n. > I think there are no reasons to support Tiger, Leopard, or the other old versions of OS X in this repository\nMacVim is just a plain text editor.  There's no reason for those older systems to not be able to run a plain text editor, and no reason for a plain text editor that's really just Vim to acquire so many bells and whistles that it can't be built on older systems.  (Also, if we ever want to merge this into mainline Vim, they will surely want the oldest possible systems supported; they recognize, rightly, that older machines deserve good text editors.  Doesn't even gVim run on all manner of ancient machines?)\nSo if @jpetrie is right that we can't fork this repo under the macvim-dev organization, there is a reason to support older versions in this repo (even if it's in a non-master branch, which I am totally fine with).\nPerhaps another option (I don't know if it's available) would be to simply create a new empty repo and then have one of us push to it, creating a duplicate that's not a github-fork, into which non-GUI changes from master could be pulled.\n\nApple never release security patches for the old versions\n\nJust because older machines don't get security patches, and might thus be dangerous for SOME stuff, doesn't mean they aren't useful for coding or writing text.  I'm not doing my online banking on a Tiger/Leo machine's version of Safari, but I am writing academic papers, emailing with mutt, and trying to teach myself ruby, each with MacVim.\nThere has been a commitment to supporting old systems since the very inception of MacVim in 2007, and I hope we can continue it.  If I recall correctly (and I might not be), the only reason MacVim didn't support Panther at first is that Panther was irrevocably missing something crucial wrt CoreText or something like that, without which MacVim couldn't operate.\nIt would be especially tragic to lose such support just because Apple screwed up Xcode 7.1.\n. Forgive my ignorance, but can't the configure script be made to check for what version of OS X we're on, and set $MACOSX_DEPLOYMENT_TARGET appropriately?\n. Thanks, I'll try it when I have my Tiger machine at my disposal.\n. Whoops, I meant when I have my Yosemite machine at my disposal.  (Though I will be testing this on Tiger too.)\n. > Could you try #104 ?\nIt works on Yosemite under Xcode 7.1.\n. A little playing around reveals that the app icon is fine on Tiger/Leo at sizes 32x32 and below, but vanishes at anything bigger than that.\n. I've created an icns file for the app icon, using IconComposer from 10.5.8, that seems to make the problem go away on Leopard and Tiger.\nI'll see if it still works on newer systems, but I suspect that the hi-res portions got chopped out, and that those portions were what Leopard/Tiger couldn't handle.  (E.g., on Leopard, IconComposer claimed there was no 128x128 edition of the icon, even though ElCap's IconComposer says there is.)\nIf I'm right, then we'll have to figure out (a) how to ensure that Tiger/Leopard get the right MacVim.icns, and (b) whether Snow Leopard also exhibits this issue.  I have no Snow Leopard machine to test with.\n(a) would be easy to fix if we end up making a separate git branch for Leo/Tig.\n. No, it's not related to #99.  That is, nothing regarding our generation scripts is responsible for the problem in #99.  The problem there is about the app icon, not the document icons.  It's only the latter that used to be script-generated on every build.  If we can \"fix\" the app icon, #99 is done.\n. The icon-generating scripts are mainly for putting filetype-extension text on the document icons.  There is no reason to do this on every build, which is why I'm glad it hasn't been happening on every build.  I can't remember when it stopped, because I always just immediately overwrite our icons with my own custom ones.\n. This ought to be doable with vim sessions plus mvim.\n. I think what @timkendrick wants is for double-clicking on MacVim.app to automatically reopen stuff.  AFAIK double-clicking ignores session stuff (unless you put explicit session stuff in vimrc/gvimrc).  But mvim, which is the appropriate way to do this, is equivalent to vim -g whatever-session-stuff-you-want.\nOTOH now I think @timkendrick wants MacVim to amalgamate the different Vim instances into one stored arglist.  I'm unsure whether vim sessions can handle multiple Vim instances.  But whether it can or not, this is exactly the sort of thing I think we don't want to add as a uniquely MacVim feature.  A request for such a feature should go to the Vim devs.\n. > I would say that the expected behavior if you relaunched MacVim as 'mvim' or by double-clicking a file associated with it would be to restore and show the new file (like Sublime Text does). To me that seems very natural.\nThis is only expected if one is new to Vim.  In particular mvim is supposed to just be essentially a shortcut for vim -g, and it is not expected behavior for vim -g to reopen all of your last open files, whether in separate Vim instances or not.  Vim requires futzing around with sessions if you want things to be auto-reopened.\nI would bet that one of the many session-related plugins on vim.org will get you close to what you want, perhaps in combination with a custom wrapper script and/or some custom vim commands to write session stuff (or not, as the case may be) before saving.\nTo the extent that what is desired should become built-in to anything at all (and I don't think it should), it should be built into plain Vim and then inherited by MacVim.\n. > it seems to me that MacVim is a lot more than just a shortcut to vim -g \nYes, MacVim is not just a shortcut to vim -g; MacVim is not a shortcut; MacVim is (one version of) vim -g on the Mac.  But I was talking about mvim; mvim is and should be just a shortcut to vim -g.\n\nit's impossible to implement proper multiple-window-autoreopening behavior\n\nWhat I, and possibly others, are disputing is that in the Vim universe, what you call \"proper multiple-window-autoreopening behavior\" is in fact proper window-autoreopening behavior.  In the Vim universe, what can be done with sessions is proper autoreopening behavior.  The Vim universe includes gVim and MacVim.  We don't want to make MacVim behave differently than gVim unless absolutely necessary to ensure a baseline level of Maclike experience.\n\napplications reopening all their windows on startup is very much becoming the standard for OS X applications\n\nThis is a regrettable development.  Lots of people turn off the Resume \"feature\" of OS X.\n\nand the MacVim-related reasons I mentioned in my comment above\n\nTo the extent I understand the problem from that comment, it is solvable with custom \"saving\" and \"closing\" commands, perhaps ones which need to call a Vimscript function.  When you want to close explicitly, your custom closing command will make sure that that window is not on the list of to-be-repopened windows (it will not call mksession, but might call something else to modify a session file).  When you implicitly close via Cmd-Q, your autocommand means it will remain on that list.  Then just bind Cmd-W to your custom closing command. \n. Wasn't there already a Snapshot 78?\n. Yes, there was: https://github.com/macvim-dev/macvim/commit/c45736ab2b3dec5297be3049cfe0edd4ef55416c\n. There shouldn't be a snapshot 78, as it already exists (not on the releases page, but at the link I gave above).  There should be a snapshot 79.\n. > ok, It doesn't matter it's up to you\nIt does matter, which is why I tried to prevent the existence of two distinct things named \"Snapshot 78\".  If someone creates an issue and we ask what version of MacVim she is using, and she says \"Snapshot 78\", we won't know which version she is using.  She could be using the thing we just built and released today, or she could be using c45736a.\n. > Honestly to say, there was snapshot 78 build. But it had been removed very soon after released.\nThat's not the point, though.  The point is that a user could have checked out commit c45736a, which is titled \"Snapshot 78\", and completely reasonably have told us she is using Snapshot 78.\n. It works.  There seems to be no way to move a titlebar-less window all the way flush against the right-hand edge of the screen.  I have an ineliminable gap of about fix or six pixels.\n. Sorry, not uname, but sw_vers\n. The sw_vers call includes the micro version number in the Deployment Target.  I suspect we need to trim it off.\n. I've manually (in src/auto/configure) set it to \"10.4u\".  If that works, I'll work on sed-ing the micro version out and appending \"u\", like we already do in lines 4272-4274.\n. Yeah, I discovered that after \"10.4u\" bombed.\nOK, time to work on a sed script.  It may be tricky, because the very first release of every version of OS X is such that sw_vers returns \"10.X\" and not \"10.X.0\".  So I can't merely chop off the trailing \".X[X]\"\n. On my machine, this chops off a small segment of the tops of the emoji (such as the hair of the people emoji), except when the font size is big.  I don't see the same phenomena in console vim from vim/vim.  But this probably has to do with the emoji being taller than the normal height of capital letters.\n. src/configure.in already had the square brackets.\n. I see that, but when I made this PR, src/configure.in already had the square brackets, as you can see here\n. I made a new one because there is a new element, namely, the save dialog.  But you're right, I should've added it to #61.\n. What will happen if someone does not want ligatures rendered, does not have a font with ligatures, but has cursorline or relativenumber enabled?  Is their experience going to be bogged down with constant redraws?  If so, then this should either not be merged, or there needs to be a checkbox in the prefs, OFF by default, to enable this ligature stuff.\n. > When MacVim is configures as the Open With-App for a text file (e.g. .h or .cpp), quicklooking at the files will not work.\nI don't see this.  I can quicklook all the filetypes I typically open with MacVim.\n. Here are before & after screen shots.\nThis is \"before\".  I.e., just in fullscreen mode:\n\nHere is what it looks like after shrinking the font size with Cmd-in \"Lion-style\" fullscreen mode:\n\nI have fuoptions set so that the background should be the same color as the text background.  In that photo you can see that it's not.\nHere is a second \"after\" shot, only this time I'm in the \"old-style\" fullscreen mode:\n\nThere you can see that MacVim is obeying fuoptions.\nBut both of the after pictures exhibit the brokenness.  The place where text goes should have auto-adjusted to fill the newly available space after the font size shrank.\n. The commit that caused the breakage added this:\ndiff\n+    if (floor(NSAppKitVersionNumber) > NSAppKitVersionNumber10_10_Max) {\n+        // NOTE: Prevent to resize the window in Split View on El Capitan or\n+        // later.\n+        return NO;\n+    }\nI'm not a Cocoa programmer, but there must be a way to wrap this in a conditional that first checks whether we're in Split Screen mode.\n. Yeah, this is irritating.  I apply a patch locally that reverts the bad commit.  I never use \"Split Screen\", so I don't mind having a Vim that has poorly behaving Split Screen.\nSplit Screen is new and niche; fullscreen is not.  Until both can be non-broken, I would have thought that proper fullscreen is more important.\n. > I'd appreciate your help in giving the above change a workout.\nWill do!. I'm not sure I applied the patch properly, but I sure hope I did, because whatever I did appears at first glance to work like a charm.  Not only does it remove the need for my workaround, and not only does it allow font size changing while in NNFS without keeping &colums fixed, but ... is it too good to be true? ... It seems like it might have eliminated the various ephemeral NNFS artifacts introduced by #405.\nI'll test more tomorrow when I am well-rested, to make sure I didn't do something silly.. It was too good to be true, unfortunately.  With that patch applied, then even when NOT in fullscreen I can't change the &lines or &columns manually by doing :se lines=40 for instance.  There is a quick flicker, which makes me think that &lines is being changed and then immediately set back to where it was.\nThat said, I'm not seeing any problems with the patch with resepect to NNFS stuff.. For instance, my default MacVim window size is 80x50.  If I do :se lines=25, then there is a very fast flicker, but the window doesn't change size and there are still 50 lines of text.. I note that I can adjust the size of the MacVim window with the mouse, and it will stick.. @s4y Thanks.  I did some quick testing (more to follow later of course).  It's true that &lines and &columns work again, and it's true that the patch fixes the NNFS worries mentioned in this and the other thread.\nI see one regression: If I open a MacVim window (not fullscreen, but regular, with dimensions e.g., 80x40), then go into NNFS, then increase the font size by an incremement, then exit NNFS, then MacVim forgets that it's supposed to be 80x40 and instead winds up at 80 x N where N is however many &lines fit on the monitor (69 in this particular instance).\nIf I then go back into NNFS, then exit NNFS (without tweaking the font size any further), then MacVim forgets what the non-fullscreen values of &columns were supposed to be too.  For instance, if I started the whole procedure with 80x40 and follow the process described, the MacVim window ends up having as many columns as fit on the monitor and as many rows will fit on the monitor (but of course without being in fullscreen).\nThis behavior was not the case before.\nAgain, I'm not a Cocoa programmer, but it \"smells\" like we're closing in on the answer :smile:.. @s4y I've been continuing to test today, on two different machines.  What I said in the previous comment continues to hold.. @s4y It seems that the \"can't remember what the dimensions are supposed to be outside of NNFS\" problem was not introduced by your patch.    Snapshot 130 shows this behavior too, at least if the font size is bumped by at least two increments.\nMacVim used to not behave like that, which is why I called it a regression.  But I was apparently wrong in claiming that the regression was introduced by your patch.  This makes me think that the patch is good to merge, at least provisionally. :). Your MacVim is ancient.  Please upgrade to the latest snapshot and try again.  We may well still see that same error, but maybe not.\n. We need to create either a branch or a pseudo-fork for 10.4 and 10.5 anyway.  Not because of this proposed change to Xcode 3.2, but because building on such systems is bound to break any minute now that we keep mucking about with text rendering.  We need to decide whether it will be a branch of this repo, or whether to make a fake fork of this repo under our organization.\nUntil we decide, I have no objection to MacVim_legacy.xcodeproj idea, but I don't know anything about makefiles, so someone else will have to make the changes.\nWhat I'd like to know is: what's to be gained by switching to Xcode 3.2?  Is that supposed to get rid of the warnings @splhack mentioned?\n. > As I already mentioned, in order to get rid of warnings\nI don't see any warnings other than the PSMTabDragAssistant.m dragImage and MMCoreTextView.m NSCopyBits you mentioned.  Is Xcode 3.2 supposed to fix THOSE, or is it supposed to fix others?   It wasn't clear to me from your post; it looked like a third unrelated thing.\n. I'm still confused :smile:\nOn El Capitan, I get the same warnings both with and without this pull request, namely, the NSCopyBits and the PSMTabDragAssistant.m ones.\n. This is probably an issue with regular Vim.  Does it happen when running github.com/vim/vim 7.4.922 in the console?\n. Did you run https://github.com/vim/vim from the console, or did you merely run /applications/MacVim.app/contents/MacOS/Vim from the console?  If the first one, then this is not a MacVim issue, but a Vim issue.  You can report it at https://github.com/vim/vim.  If the latter, then it is a MacVim issue.\n. @splhack is right.  What I meant to be asking is whether or not \"real\" Vim has this problem.  If it doesn't, then it's a MacVim issue.\n. What does the \"903\" mean?  Vim, in Homebrew, should be at 7.4.922.  If it's not for you, then do brew update, brew rm vim, brew install vim.\n. Also, the screenshot is unavailable.\n. You told us that already :)\nWhat does the \"903\" mean? Vim, in Homebrew, should be at 7.4.922.  Does /usr/local/vim --version say 7.4.922?\n. You didn't read my prior instructions.  Do brew update, then do brew remove vim, then do brew install vim.\n. OK, this means the problem is with Vim.  This issue should be reported to the github/vim/vim repo, complete with your screenshot using Vim (not MacVim).\n. I reverted to 91152d1 and the GUI tabs work there.\n. Pull #144 doesn't fix either the PSMTab problem or the VERSION_INFO_STRING problem.  (It does fix the xcodebuild warnings about missing xcodeproj files).  VERSION_INFO_STRING remains the same (78), but at least now the compiler is spitting some messages about PSMTab that may be helpful.\n```\nmacvim/src/MacVim/PSMTabBarControl/source/PSMOverflowPopUpButton.m: In function \u2018-[PSMOverflowPopUpButton drawRect:]\u2019:\nmacvim/src/MacVim/PSMTabBarControl/source/PSMOverflowPopUpButton.m:47: warning: \u2018NSImage\u2019 may not respond to \u2018-drawInRect:fromRect:operation:fraction:respectFlipped:hints:\u2019\nmacvim/src/MacVim/PSMTabBarControl/source/PSMOverflowPopUpButton.m:47: warning: (Messages without a matching method signature\nmacvim/src/MacVim/PSMTabBarControl/source/PSMOverflowPopUpButton.m:47: warning: will be assumed to return \u2018id\u2019 and accept\nmacvim/src/MacVim/PSMTabBarControl/source/PSMOverflowPopUpButton.m:47: warning: \u2018...\u2019 as arguments.)\nCompileC ../build/PSMTabBarControl_legacy.build/Release/PSMTabBarControlFramework.build/Objects-normal/ppc/PSMMetalTabStyle.o macvim/src/MacVim/PSMTabBarControl/source/PSMMetalTabStyle.m normal ppc objective-c com.apple.compilers.gcc.4_0\n    cd macvim/src/MacVim/PSMTabBarControl\n    /Developer/usr/bin/gcc-4.0 -x objective-c -arch ppc -pipe -Wno-trigraphs -fpascal-strings -fasm-blocks -Os -Wreturn-type -Wunused-variable -fmessage-length=0 -mtune=G5 -mmacosx-version-min=10.4 -Imacvim/src/MacVim/PSMTabBarControl/../build/PSMTabBarControl_legacy.build/Release/PSMTabBarControlFramework.build/PSMTabBarControl.hmap -Fmacvim/src/MacVim/PSMTabBarControl/../build/Release -Imacvim/src/MacVim/PSMTabBarControl/../build/Release/include -Imacvim/src/MacVim/PSMTabBarControl/../build/PSMTabBarControl_legacy.build/Release/PSMTabBarControlFramework.build/DerivedSources -include /Library/Caches/com.apple.Xcode.501/SharedPrecompiledHeaders/AppKit-bnvgvxyjwsaeimbrubphbwbnnhaq/AppKit.h -c macvim/src/MacVim/PSMTabBarControl/source/PSMMetalTabStyle.m -o macvim/src/MacVim/PSMTabBarControl/../build/PSMTabBarControl_legacy.build/Release/PSMTabBarControlFramework.build/Objects-normal/ppc/PSMMetalTabStyle.o\nmacvim/src/MacVim/PSMTabBarControl/source/PSMMetalTabStyle.m: In function \u2018-[PSMMetalTabStyle drawInteriorWithTabCell:inView:]\u2019:\nmacvim/src/MacVim/PSMTabBarControl/source/PSMMetalTabStyle.m:397: warning: \u2018NSImage\u2019 may not respond to \u2018-drawInRect:fromRect:operation:fraction:respectFlipped:hints:\u2019\nmacvim/src/MacVim/PSMTabBarControl/source/PSMMetalTabStyle.m:397: warning: (Messages without a matching method signature\nmacvim/src/MacVim/PSMTabBarControl/source/PSMMetalTabStyle.m:397: warning: will be assumed to return \u2018id\u2019 and accept\nmacvim/src/MacVim/PSMTabBarControl/source/PSMMetalTabStyle.m:397: warning: \u2018...\u2019 as arguments.)\nCompileC ../build/PSMTabBarControl_legacy.build/Release/PSMTabBarControlFramework.build/Objects-normal/ppc/PSMUnifiedTabStyle.o macvim/src/MacVim/PSMTabBarControl/source/PSMUnifiedTabStyle.m normal ppc objective-c com.apple.compilers.gcc.4_0\n    cd macvim/src/MacVim/PSMTabBarControl\n    /Developer/usr/bin/gcc-4.0 -x objective-c -arch ppc -pipe -Wno-trigraphs -fpascal-strings -fasm-blocks -Os -Wreturn-type -Wunused-variable -fmessage-length=0 -mtune=G5 -mmacosx-version-min=10.4 -Imacvim/src/MacVim/PSMTabBarControl/../build/PSMTabBarControl_legacy.build/Release/PSMTabBarControlFramework.build/PSMTabBarControl.hmap -Fmacvim/src/MacVim/PSMTabBarControl/../build/Release -Imacvim/src/MacVim/PSMTabBarControl/../build/Release/include -Imacvim/src/MacVim/PSMTabBarControl/../build/PSMTabBarControl_legacy.build/Release/PSMTabBarControlFramework.build/DerivedSources -include /Library/Caches/com.apple.Xcode.501/SharedPrecompiledHeaders/AppKit-bnvgvxyjwsaeimbrubphbwbnnhaq/AppKit.h -c macvim/src/MacVim/PSMTabBarControl/source/PSMUnifiedTabStyle.m -o macvim/src/MacVim/PSMTabBarControl/../build/PSMTabBarControl_legacy.build/Release/PSMTabBarControlFramework.build/Objects-normal/ppc/PSMUnifiedTabStyle.o\nmacvim/src/MacVim/PSMTabBarControl/source/PSMUnifiedTabStyle.m: In function \u2018-[PSMUnifiedTabStyle drawInteriorWithTabCell:inView:]\u2019:\nmacvim/src/MacVim/PSMTabBarControl/source/PSMUnifiedTabStyle.m:393: warning: \u2018NSImage\u2019 may not respond to \u2018-drawInRect:fromRect:operation:fraction:respectFlipped:hints:\u2019\nmacvim/src/MacVim/PSMTabBarControl/source/PSMUnifiedTabStyle.m:393: warning: (Messages without a matching method signature\nmacvim/src/MacVim/PSMTabBarControl/source/PSMUnifiedTabStyle.m:393: warning: will be assumed to return \u2018id\u2019 and accept\nmacvim/src/MacVim/PSMTabBarControl/source/PSMUnifiedTabStyle.m:393: warning: \u2018...\u2019 as arguments.)\n``\n. See #72: Just asMAC_OSX_VERSION_10_5is not defined in Tiger's AvailabilityMacros, neither isMAC_OSX_VERSION_10_10`.\n73 fixes it by checking for defined(MAC_OSX_...).\nI'm going to try a parallel fix here.  If it works, then we'll probably need to come up with some macro or wrapper, because there are MAC_OSX_VERSION-something-higher-than10.4's all over the place.\n. It did work: #148 \nThere are lots of other places where a similar adjustment could be made, and I think it would eliminate some warnings on Tiger that up to now I've thought were harmless.\nShould I really add defined(MAC_OS_X_VERSION_FOO) all over the place, or is there a way to define in one of our own headers every MAC_OS_X_VERSION all the way up through 10.11?\n. Please don't close these until everything has been tested :)\nAnyway, VERSION_INFO_STRING is still \"78\", so this should remain open until I can figure that out.\n. OK, PSMTab bar now works on Tiger.\nVERSION_INFO_STRING no longer has the \"78\", but it ends in a hyphen: MacVim_legacy-.  Probably doesn't matter, but will look weird if it ends up being shown in \"GetInfo\" from Finder.\n. I'm going to wait to merge this until we have a consensus about what to do for the general case in #143.\n. We'll need this for at least 10.6 and 10.5 in MMTextViewHelper also.  Should MMTextViewHelper just import MacVim.h?  Should we make a new file, MacVimAvailability.h, and import it all over the place?\n. Well, MMTextViewHelper needs that variable set for 10.5 10.6 because there are warnings for those parts on Tiger and Leopard.\n. 1. Just FYI, :set [no]fu can get you out of fullscreen if you accidentally wind up there.\n2. If I recall correctly, macmenu key mappings must be done in gvimrc, not a separate file.  Put that part in your gvimrc and see if it keeps happening.\n. Yeah, my memory was right.  :help macmenu, first paragraph.\nBut you don't need to move ALL bindings to .gvimrc.  Just the macmenu ones.\n. In the only screen shot on this page, the lines are in a file called mappings.vim.\n. Ah, no, I see now.  The statusline was very faint!\n. Which gets loaded first, gvimrc or mappings.vim?  If it's mappings.vim, that's likely the problem.\n. The next time it gets \"remapped\" to fullscreen, try doing :verbose map to see if <D-f> or <D-F> appear anywhere, and what file they're being sourced from. \n. Vimrc is loaded before gvimrc.  This is almost surely the prob.  I hope!\n. FWIW, I see the proliferation of entries in the drop-down menu too.  However in my case it isn't Cmd-F, rather it's Shift-Cmd-F. (MacVim shows the Shift as an up-arrow picture.) It happens that in System Preferences I have set as a keyboard shortcut for all apps \"Shift-Cmd-F\" for \"Enter Full Screen\".  Do you have \"Cmd-F\" bound to all apps (or even some apps) in System Preferences?\n. I should add that in my case this causes no problems other than ugliness, because in my gvimrc I map what is in effect Shift-Cmd-F to \"Toggle Full Screen Mode\".  So it may well be that on my machine \"Enter Full Screen\" is being commandeered, but I never noticed it because the hijacker installs the same keyboard chord as I do.\n. @TheDudeWithTheThing Nevertheless, did you have any keyboard mappings set in System Preferences that apply to \"Enter Full Screen\" in all apps, or even just for MacVim?  This might help us diagnose what's going on.\n. So is that huge keychord showing up multiple times in the Window menu of MacVim?  You said the hijacking stopped, but I'm not sure if you mean the unexpected entries into fullscreen mode, or the existence of the many entries in the dropdown menu, or both.\n. OK, so we've got a problem with the interaction between MacVim and custom keyboard shortcuts made in the official Apple way, and we've got two examples (yours and mine).  Your version is where the custom chord is just for MacVim, and my version is when it's for \"All Applications\".  Your version was created with the Keyboard PreferencePane, and mine was created with the CLI via defaults.\nOn the one hand, one suspects the flaw is on our end since I've never seen anything like this before.  On the other hand, the keyboard shortcut part of the Keyboard PreferencePane and the shortcuts created have been buggy with weird side-effects since---I kid you not---Panther :smile:\n. @douglasdrumond @jpetrie @splhack I think maybe this issue should be reopened, or better,  a new one created describing the problem and referencing the current issue.  We can give it a special label to keep it separate from the \"usual\" issues.\nRegardless of what we four think about this particular issue, I think we should decide on our general policies for issue management.\n. What problem does this fix?\n. MacVim is linked against the system Python.  Your Vim is linked against a brewed Python.  I don't remember what it was, but at least at one point in time there was a reason why MacVim needs to go to the system Python.  It doesn't matter what which tells you, when you're using the :py command; the :py command will use what Vim/MacVim has been built against, not what's first in your $PATH.\nIn fairness, @splhack, this might well be a MacVim issue; a user reports that Vim works much better than MacVim regarding Python, and I can see no reason given in this thread yet why this is \"just a Vim issue\".\nBut it also might not be a MacVim issue at all; we don't know yet.  @xoolive you didn't say what flags you brewed Vim with.  Also, you should try brewing MacVim with --HEAD --with-python and match as closely as you can the flags you brewed Vim with.  Otherwise, it's not a fair comparison.\n. > But then, it wouldn't explain why import itertools fail here, does it?\nMaybe not, but there are lots of moving parts here besides MacVim.  As you said yourself: \"I keep changing python/python3, brew link, brew unlink, virtualenv, etc.\".  I don't see how you can do this and expect MacVim to behave consistently.\nThe thing to do is just install Xcode and brew MacVim from --HEAD and see what happens.\n. FWIW, I don't usually build with python support.  But I did it just to test, and I get no error upon importing itertools.  Also, MacVim found and built against a non-system python that was in my $PATH.\n. Forgot to mention, my non-system python isn't Homebrewed, and I didn't set either PYTHONPATH or &pythondll.  Don't know whether those datapoints help with anything.\n. I forgot to mention that there is no issue if before closing the fullscreen window, one exits fullscreen.  So there is something funny about how El Capitan is playing with closing the last window of a Vim instance while in fullscreen.\n. I'm not sure if I did this right, so I won't merge it until the other maintainers approve.  I followed the procedure described in #46.\n. I take it I did that right, then?\nI didn't merge upstream vim into my local master before pushing to my github clone of macvim.  I simply pushed a non-master branch of my local clone to my github clone, and opened the PR from there.\n. I think I did a better job this time.  Next time, assuming my permissions allow it, I won't make a PR but will just push straight up.\n. The failing test is not our problem.  vim_dev is already aware of it.\nMerging.\n. I'm making this a PR because for some reason my writing privileges to our repo have vanished.  On the organization page I'm now listed as a \"member\" not a \"collaborator\".\nIs this on purpose?  I received no notification of this from GitHub, unlike when I was made a collaborator by @douglasdrumond.\n. > you really don't need to create a pull request for merging vim/master, just wait a bit, it would be updated.\nAs my previous comment indicated, I'm supposed to not have to make a PR.  Does nobody, @jpetrie, @douglasdrumond  know what happened to my collaborator/repo-writing status?\n. Wait, something weird is going on.  Why are there comments in this PR from really old PRs not made by me?\n. > sorry, in terms of quality of code, you don't qualify to have write permission on this repository.\nIt was incredibly rude to just lock me out without telling me this beforehand, or immediately afterwards.\n. > Was there are particular event -- some extremely negligent commit\nI haven't actually written any code for this repo, except for one very small piece that he told me to write, and a tweak to mvim from before any of us were made maintainers.  I think he thinks that because I don't know C I will mess up the repo.  I don't know why he thinks that I would make some change to the C portions and then push it without consulting anyone.\n. Just don't remove the non-native fullscreen mode.  It really has nothing to do with Tiger/Leopard/Snow, except indirectly.  (It is the only kind of fullscreen mode that can be used on Tiger/Leopard/Snow).  It works beautifully on all newer OS versions.  It is also superior to native fullscreen mode in almost every respect.\n. Shouldn't this have been solved by using :redraw! instead of :redraw, rather than chaning MacVim source?\nPlain Vim doesn't behave in the way that this commit (and #182) make MacVim behave.\n. >  but using redraw! in for loop makes screen blinking\nBut that's how plain Vim works.\nAlso, the flush_force version of this repair makes for a blinking cursor upon :redraw, when it didn't previously blink.\n. The docs show that :redraw isn't supposed to completely clear and then redraw the screen.  That's what :redraw! is for.\n. > No. :redraw! stands for to clear first. redraw should also redraw the screen whenever called as well but without clearing (thus the screen won't blink).\nThat's what I said.  :redraw is not for clearing first, :redraw! is for clearing first.\n. At the very least, if I take that gist and :source it and run Test2, the behavor is different in MacVim and plain Vim.  In plain Vim (i.e., from github.com/vim/vim, /usr/local/bin -u NONE -N), I see the countdown from 99 echoed by single digits.  In MacVim (mvim -u NONE -U NONE -N) I see nothing at all echoed.  It should work in both MacVim and plain Vim.  If I run MacVim in the console, it behaves like plain Vim.\n. It didn't do that prior to the flush tweaks.  I don't have time right now to see whether it was introduced in the flush or the force_flush change.\n. > with blinking screen (because of screen flush) when Test 2 (redraw!) is called.\nWhy is a blinking screen expected in this case?  It doesn't blink in plain Vim when I call Test2.\n. It's like that in the built MacVim app, too.\n. I wonder if this is how gVim behaves too.  If it is, then this issue should be taken up with Vim proper\nBut I don't think it's behaving incorrectly.  In the Terminal.app, when pasting the two liines, the buffer has et foo=2, because the ^M causes vim to execute set foo=1, (an illegal command) and then enter normal mode, whereupon the s in set foo=2 enters insert mode.  This doesn't seem like a good way to proceed.\nAs neither console nor GUI mode do what you want, the fix should be common to both.  So this is a plain Vim issue.\n. > Both gvim and regular (terminal) vim insert the ^M characters when pasting multiple lines of text into the : prompt;\nExperimentation revealed, however, that MacVim refuses to take it as a pressed , while regular vim behaves as if it was.\nI agree, of course, that if this is even an issue at all, it should be raised with Vim, not MacVim.\n. My configure flags for MacVim are:\n--disable-netbeans\n    --disable-nls\nI also pass those to plain Vim, and it builds just fine.\n. @ronaaron said that plain Vim does not exhibit the incorrect behavior, while MacVim does.  That means the place to report it is right here.\n. I don't think one can expect a colorscheme to look exactly the same in MacVim as it does in a console Vim.\n. Good answer!\n. You shouldn't need to do any setting of CC before configure.\nBut if the ./configure script is picking up a nonstandard compiler on your system, either it should be fixed or a workaround found.  In this case, my hunch is the latter.  Maybe temporarily remove all nonstandard compilers (things that don't just come with XCode7) from your PATH.\nWhile one shouldn't be forced to use a package manager just to build MacVim, it's also the case that the ./configure script can't be expected to handle every idiosyncratic setup.\n. There was just a thread on Vim for this (can't remember whether it was the ML or the GH issues).  The upshot was, one must set the new option noemoji earlier than one sets listchars.\n. You probably just need to set tabpagemax to a higher number in either your vimrc or gvimrc.\nMake it higher than the typical number of files in a \"bulk\".\n. defaults write org.vim.MacVim  SUEnableAutomaticChecks -bool false\n. Probably this should go in the FAQ.\n. This should definitely not be a regular vim option, but should instead be something to set with defaults write (or the Preferences window).. I cannot reproduce.\n. I can't reproduce either on a snapshot or the latest HEAD.\n. Wait, I get it, but only if I append the argument --help.\nHowever, this is not a MacVim problem.  It happens in regular vim too, so it was introduced on their end and should be reported there.\n. Wait, scratch that.  I can't yet pin it on regular vim.\nAnd I only get the issue intermittently.\n. Arrrgh, mistakenly introducing a custom wrapper into the picture.  When I use \"stock\" mvim, I cannot reproduce this issue at all.\n. I don't see what's to be gained here.  AFAIK Vim always has to show whole lines at all times.  At best, this would be for when scrolling using the mouse/trackpad, and then it would at best be purely eye candy; you wouldn't be able to stop a scroll with e.g., only half the pixels of the top line showing.\nAnd as far as eye candy goes, the scrolling looks awfully smooth to me as it is.  Maybe if one's scroll speed is set to \"really slow\" it would look choppy.\n. >  but watch the end of the scrolling where it would normally be moving very slowly.\nWhy would it be moving slowly?  Are you talking about the Lion-and-up \"scroll inertia\"?  I have that disabled, because it's annoying to me. \n\nanimated navigation is super helpful because it lets you track blocks of code when scrolling up/down large amounts\n\nI can track blocks of code when thus scrolling without animated navigation.  (Or, perhaps I just don't understand what \"animated navigation\" refers to in this context.)  If I open a large file in MacVim (or regular Vim) and hold down Ctrl-E, I have no problem visually tracking blocks of text as they flow by.  And my keyboard repeat rate is cranked up as high as the slider allows.  I don't use the mouse at all in MacVim, because pretty much the whole point of Vim (as opposed to a \"traditional\" GUI editor) is to not use the mouse.\nAnyway, if Vim itself is incapable of showing partial lines, this is all moot.\n. > (I'm not talking about the Lion down-means-up, and up-means-down \"feature\")\nI'm not either.  That's \"natural\" scrolling, not \"inertia\".\n\nIt's where you swipe and release, and over several animation frames, the content slides around according to some physically modeled easing function.\n\nI don't know what that means, and consequently I'm still not totally sure what you're talking about.  Does it mean that even after you release the swipe, the content continues to slide around for a bit before stopping?  That has been complained about, and is most certainly disable-able, as I see no such behavior because it's annoying and I turned it off.  I think that's called \"inertia\" (that's what TinkerTool calls it anyway), and it was not there (at least by default) until Lion IIRC.  You can disable it with TinkerTool or with a defaults write command or combination of them (I think it gets called some variation on \"MomentumScroll\" there, like in defaults write -g AppleMomentumScrollSupported -bool false).  It makes scrolling hard to control.\n\nIs the hesitation that you feel that scroll animations in general are fundamentally broken, or that they don't belong in a text editor, or that they don't belong in MacVim?\n\nMy hesitation is (insofar as I understand what's being proposed, which I'm not sure that I do) that such a feature (a) does not belong in (plain) Vim, (b) cannot be made to be in plain Vim without mucking about with plain Vim, (c) consequently it cannot be made to be in MacVim without mucking about with plain Vim, and (d) therefore it should not be made to be in MacVim even if it's possible.\n. Regarding when the \"inertia\" was introduced, I might be confusing it with a different scroll-related annoyance, namely the \"rubber band\" effect, which only arrived with Lion IIRC.\n. As a temporary workaround, try putting \"let macvim_skip_colorscheme=1\" in your vimrc, and making sure to not subsequently do colorscheme macvim or call any other colorscheme that uses MacVim's pseudo-colors mentioned in the error message.\nVim recently messed around with their color internals.  I'm sure this will be fixed soon.\n. If you mean the \"non-native\" mode, around since Tiger, here is how I do it.  You have to edit the source and build your own.\nOpen up src/macvim/mmfullscreenwindow.m.  There are four places where the number \".25\" occurs.  That governs the irritation level (i.e., animation delay).  I just replace it with \".00\" and build.  Entering and exiting fullscreen will be nigh instantaneous.\nIt isn't perfect.  There's a little bit of a blinking illusion, particularly with dark colorschemes.\nMaybe you can try \".1\" or something like that.\n. I found it so easy to make my local changes that I didn't bother asking for it to be the default.  I learned this trick years ago.  (Maybe 2008? Not long after MacVim gained fullscreen mode.)\nMaybe it would be more convenient if it was settable using a hidden pref (defaults write -app MacVim MMWasteMyTime -bool false).  But that might be a lot of work to change the code.  I myself am content to just keep a local branch into which I merge master.\nThere are tons of non-animation-related reasons why people might prefer non-native mode (I find it superior to native mode in every respect), and I wouldn't want to force them to accept no-animation as the default.  (Well, I would, but to my everlasting disbelief, people like having their workflows impeded by mere eye-candy.)\n. I tested it, and it seems to work fine.  I tested it at values of 0.0 and 1.0.\nThat \"flicker\"-like stuff is IIRC, as you say, due to all the sleight of hand.  I seem to recall people asking about this on the list years ago, and that Bjorn said nothing could be done.  I've been used to it for many  years now, so it isn't a big deal.  And there are other flickers in MacVim land that are far more worthy of effort!\n. @jpetrie This was a nice change, thanks!\n. Building from latest commit shows that this warning is gone now.\n. It is both a known and documented limitation of MacVim that mappings involving \"meta\" are flaky and unreliable.  (See :help macmeta).  You can try :set macmeta, but over the last eight years I've found that it hardly improves the situation at all.\nMy guess is that it's probably got nothing to do with the Greek layout, and if setting macmeta doesn't help, you're just running into the known limitations of MacVim.\n. Uh oh.  I love non-native fullscreen mode.  Unfortunately I don't have (and won't have) a Sierra beta to play around with.\n. I can confirm this.\nThe text will appear for almost a second, then disappear behind the background (except for where the cursor is).\nA keypress that scrolls the whole screen will temporarily bring the text back to where it should be, but then after a second it disappears again.\n. We'll need to wait for Sierra to come out first so that the devs can work on it.\n. Here is an observation that might help the devs with debugging.\nIf I recall correctly from long ago, non-native mode fullscreen involves painting the full screen with a color identical to that of the Vim background color, but underneath the \"actual\" MacVim window. (This is to make sure that there aren't borders left uncovered when the screen size isn't an exact multiple of the rows or columns.)  All along, you may have seen this if you changed your colorscheme once already in NNFS, from a dark background scheme to a light one (or vice versa).   If you made maxhorz or maxvert not be the full width or height, this was especially obvious.  Changing the colorscheme to a sufficiently different one would leave the \"borders\" colored like the previous scheme's background.  Going out of FS and back in would fix this.\nAnyway, wrt this disappearing text problem on Sierra, you can see that it's this \"fake\" background painting that's covering the text and the \"actual\" MacVim window.  E.g.: start MacVim, do \"colo MacVim\" and \"set bg=light\".  Then go into NNFS.  The text will disappear underneath the white \"fake\" background.  While still in NNFS, do \"set bg=dark\".  Wait a second, and text will disappear underneath the fake white again.  Go out of NNFS and then go right back in.  Now the text disappears underneath the (now) grey10 \"fake\" background.\nI have no idea why this is happening on Sierra all of a sudden, but someone who knows what they're doing might now know where to start looking.\n. Is that supposed to be a workaround, or just to demonstrate the nature of the bug?  For me, that guicursor setting only stops the disappearing text until I move the cursor, at which point the text disappears again.\nIt does, however, reveal that if the cursor is on the last line in the window (not the buffer), it's only the text on lines above that one that disappear, while the cursor's line is entirely visible.\n. Try putting set backupcopy=yes in your ~/.vimrc and see if that helps.\n. \"auto\" does not work, at least in my experience, at least not for preserving a file's \"creation date\".  I've had &backupcopy set to yes for years because of this.\nI've been thinking that this should probably go in MacVim's $VIM/vimrc.  I hate the thought of adding to that file, which probably shouldn't exist in the first place.  But given that it does, set bkc=yes is a Mac-specific setting that preserves what Mac users have been used to for decades (way before there were Finder tags), namely \"creation date\".\n. On second thought, I think it should just go in the FAQ or wiki.\n. > I'll give that a try. Will backupcopy create those annoying files with a tilde appended to their names?\nNot unless you also have set backup in your vimrc.  See :help backup-table.\n. Still there on the real, released Sierra.  (I only had the first of the two GMs.)\n. Did you try starting with mvim -u NONE -U NONE -N?\nI have no problem with the escape key on Sierra.\n. Try adding --noplugin to the flags, or move your ~/.vim out of the way, and try again.\nIf that doesn't work, I'm at a loss; it works for me on multiple machines.\n. This appears to get rid of the disappearing text problem, but it's really herky-jerky on about half of all switches between full and non-full screens, particularly if one does not have MMFullScreenFadeTime set to 0.0 in the pref plist.\nEven with it set to 0.0 (which I like), there are occasional delayed reactions going into or coming out of fullscreen, or times when the window won't respond to a request to switch.\nNevertheless, this is a good start!  I'm glad someone is finally working on fixing this problem.  It's single-handedly preventing me from upgrading to Sierra.\n. I can't get the osheroff#1 patch to apply.\npatch -p1 <~/1.patch\npatching file src/MacVim/MMCoreTextView.m\nHunk #2 FAILED at 604.\nHunk #3 succeeded at 626 (offset -1 lines).\nHunk #4 succeeded at 916 (offset -1 lines).\n1 out of 4 hunks FAILED -- saving rejects to file src/MacVim/MMCoreTextView.m.rej\npatching file src/MacVim/MMFullScreenWindow.m\n. OK, I won't have time to test until tomorrow.\n. Was able to test just now.  It doesn't help, and indeed even seems worse in the few minutes of playing.  Also it spams a bunch of stuff to the terminal when started with mvim, but that's probably debugging code you turned on.\n. The opposite.  I forgot to mention that my \"worse\" result (in the osheroff repo) was with default fade time.  I did not test it with my preferred 0.0  (which is mostly working fine in this PR).\n. I don't know how to record my screen, and I don't have a mobile device.  When I get a chance, I will try to describe in detail what I see.\n. The present PR, built and used on El Cap, and MMFullScreenFadeTime of 0.0, results in a small visual regression.  Specifically, once the full screen is painted with the background color, but before any of the text in the Vim window gets displayed, there is the quick blink of a small rectangle that is exactly the size of the cursor.  This blink happens in a strange place, namely about 1/3 of the way down from the top of the screen, which is of course not where the real cursor ends up once the Vim window's text gets drawn atop the fullscreen background.  My colorscheme is dark background/white cursor, so what blinks is a little white rectangle, cursor shaped. \nI don't recall this glitch being present when I built this PR on Sierra.  I'll look for it when I get a chance.\n. > I don't recall this glitch being present when I built this PR on Sierra. I'll look for it when I get a chance.\nIt is there on Sierra too.\nIt happens upon exiting fullscreen mode.\nTo reproduce (Sierra and ElCap),  set the MMFullScreenFadeTime to 0.0 (I doubt this has anything to do with it, but you never know).  Then  mvim -u NONE -U NONE -N and make the MacVim window take up the left half of the screen and all of the vertical space.  Then enter non-native fullscreen.  Then exit it.  I see a black, cursor-sized rectangle appear in the leftmost column, about an inch down from the Mac menu bar.  Then the MacVim window is drawn and the cursor shows up in the right place (northwest corner).\nThe location of the blink is influenced in some way by the size of the MacVim window prior to entering fullscreen.  If the MacVim window is really tall to start with (like full height of screen), the blink happens an inch or two from the top of the screen.  If it's a bit shorter, the blink happens further down (two or three inches).  If the MacVim window starts out around half the height of the screen, the blink occurs near the bottom of the window.  If the MacVim window starts out short (e.g., 25 rows), the blink is invisible, probably because it's \"happening\" below the last line of the MacVim window.\n. I can't reproduce.. I should add that I am not using a precompiled MacVim.  I build from source with --disable-netbeans and --disable-nls as the only configure flags.  The resulting MacVim has no problem with piped stdin.. I don't understand.  I can do git log | mvim - and MacVim will fully show a buffer containing far more than 65K.. Since :set without arguments does not crash MacVim started with mvim -u NONE -U NONE -N on my machine, the problem is with one of your plugins.. The mvim script is here in this repo; you don't need to go to the b4winckler one, and probabl shouldn't, since mvim has been modified since then.  Look in src/macvim.\n(That said, mvim really should be put in with the dmg if it isn't already.). This is a Vim issue and should be opened on their github page.. This is a question for the Vim users mailing list.  It is not a bug in MacVim, or in Vim.. Probably that vim_iswhite should be all caps because of recent Vim commits.. Yep, that was it.  If I manually upcase it, build proceeds fine.  Must've just been missed in the merge.  I dunno how CI didn't catch this.. There is no reason for a repo geared around macOS to help you build something on a non-Apple system, just so that you can audit plain Vim, which has its own repo and dev mailing list and lots of people who can help you build on a non-Apple system.. >  I need to be able to compile it\nYou cannot compile MacVim on CentOS.  I don't know why you keep asking for this.\nYou might be able to compile a piece of MacVim on CentOS (by passing --disable-gui to ./configure).  But (even if that works):\n(a) That does you no good, because you will not be able to \"scan\" the piece that your developers actually want to use, namely the Mac-specific piece that will not compile on CentOS.\nAnd (b) the compiled piece would just be ... plain Vim, which has it's own repo and mailing list for help, and people who can help you build plain Vim on CentOS.. Unfortunately this broke non-native fullscreen mode.  See #488.. The recent slew of commits to fix fullscreen artifacts has, unintentionally, broken non-native fullscreen mode (\"NNFS\").\nIf I enter NNFS and then press the key combo to reduce the font size, what should happen is that the font size shrinks but that MacVim compensates for this by increasing the number of &colums shown on the screen.  This is how it always worked in NNFS.\nBut beginning with 3fb41ccae8bd2173531, the actually observed behavior is that (a) there is no such compensation, and (b) MacVim sort of hangs: the cursor won't blink, I can't do :redraw to erase the artifacts, etc.\nI'm not a Cocoa programmer, so I can't help with fixing the code.  Perhaps some of the changes were supposed to have been for native-fullscreen mode only and not NNFS.  Please fix or revert these recent changes.. Another strange side-effect: after going into NNFS and then enlarging the font size, the Vim status bar disappears \"below\" the bottom edge of my monitor, and returns about one second later.  That never used to happen either.. (That last thing I mentioned happens around half of the time.). The failure to expand the &columns does happen there.  I had forgot that I was carrying a patch to revert the disastrous #103 (see my report in #127, which nobody has done anything about).\nThing is, though, when carrying that patch but before the last few commits, MacVim would behave in the expected way mentioned above.  After the last few commits, it seems to not matter whether or not I carry the patch that reverts #103; I get the bogus behavior described above.\n(In other words, the only way I can get the expected and proper behavior is to (a) rollback the last couple of commits, and (b) revert #103.)\n(In still other words, the last few commits have broken my fix for #127.)\nAlso, the strange \"statusbar disappears for one second\" thing is not present in 8.0-129; it's brand new to the last few commits.  My guess is that it has to do with that 1 second safety delay you put in.. Also, #405 introduced a bunch of strange artifacts when adjusting the font size when already in NNFS, but they seem unrelated to the present problem.. I'm curious why these changes were made to apply to both of the two fullscreen modes.  There weren't any artifacts when moving in or out of NNFS.  The only artifacts for NNFS were #127 and other small nits that have to do with changing font size, not transit to or from NNFS.. I was curious because although it's more complicated to treat NNFS and NFS differently, it seems to be sometimes required.  For example, NFS has to contend with \"Split Screen\", while NNFS does not.  IIUC, the cause of #127 is that #103 applied a fix for Split Screen to both fullscreen modes, when it should've only messed with NFS.\nAnyway, whether that's right or not, I sure do appreciate you taking a look at this, because as far as I'm concerned NNFS is pretty much the only reason to use MacVim rather than just good ol' console Vim. NNFS has been around since 2008 and I think I can't live without it.\nBTW, the only artifacts I see during the transition to or from NNFS have been there since 2008, which is why they don't even register to me anymore.  (I presume you're talking about an incredibly brief white rectangle covering part of the newly-not-full-screen-anymore Vim window.). I'll close, because the remaining problem (incorrectly sized window on exiting NNFS) is best reported in another bug.. It's been like this since 2008, and I'm not 100% sure it's a bug (I think it might be the cost of having searching in MacVim behave in a macOS-ish way; either that or some people---way back when---actually wanted it this way).\nBut it is 100% unbelievably beyond-the-pale annoying and I wish there were a way to switch it off, even if it it means recompiling with different flags.. Thanks for this.\nUnfortunately it appears to have a bad side-effect.  For instance, if I do Cmd-F in Safari to search for \"foo\" in the open webpage, then exit the search feature with the escape key, then open up MacVim, then in MacVim do /BAR<CR>, then go back to Safari, then do Cmd-F again, what I should see is \"foo\" in Safari's search bar.  Instead I see a blank.\nThis is probably better than the old behavior, which was to see \"BAR\" in Safari's search bar.  But it's not much better.  Now the user has to re-type their old search string.\nIt is as if, instead of altogether avoiding the OS-wide \"search string\" stuff, MacVim is clearing it.\nPerhaps I'm wrong about what the expected behavior should be.. @ychin I used to use &fuopt very frequently, until it broke.  It's been broken for a long time, which is too bad.  I miss this feature.  I can fake an approximation by having one MacVim window in (non-native) fullscreen and a second MacVim window on top of it that isn't in fullscreen, and make sure they have the same colorscheme.\nI don't know what others use it for, but I use it so that I can be in (non-native) fullscreen but have a more normal number of columns (e.g., 80).  That way the lines don't get too long to read comfortably, while at the same time I fit as many lines as possible on the screen, and everything is easier visually to deal with because other things are blocked by the rest of the fullscreen-ness.\nI don't think I ever made use of the maxvert piece, myself.  (I never had a monitor that was \"too tall\", even before the unfortunate widescreen revolution.)\nPerhaps getting this to work correctly causes too many problems, I have no idea.  It's much more important to have a properly functioning non-native fullscreen than it is to have a half-working &fuopt.\nOh, also I never personally used the background piece of &fuopt.. I'm opposed to this if it means we won't be able to build it on our own machines without a Developer Cert.. Well, Hammerspoon is also open-source, but if I want to build it from source and not have it be a console-spamming debug build, I have to make a self-signed cert and \"sign\" it with that.  What a PITA; I hope this never happens to MacVim.. CORRECTION: It does fail to build even when I don't pass --enable-terminal.\nI will revert to the Jun 13th state of affairs for now.. Fixed already, thanks.. Whoops.\nI have seen what I think is a new compiler warning:\ngcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ui.o ui.c\nterminal.c:819:7: warning: implicit declaration of function\n      'gui_mch_get_rgb_color' is invalid in C99\n      [-Wimplicit-function-declaration]\n        fg = gui_mch_get_rgb_color(cell->fg.red, cell->fg.green, cell->fg.blue);\n             ^\n1 warning generated.\nI don't know if that's worth worrying about, but there it is.. @markwu There is no such thing as CLT version 9.1.  There is 9.0.1, maybe that's what you meant.. @mario-grgic Wow, that is super weird.  I, of course, was looking at that page, and I haven't done softwareupdate --list in a week  so I missed the stealthy release.. This is not MacVim's fault.  Your launchservices database thinks there are multiple versions of MacVim on your machine.  If you have older versions of MacVim.app hanging around, delete them.\nSometimes launchservices gets confused about which apps are present and doesn't \"forget\" the older versions of MacVim.\nIf there's only one version of MacVim on your machine, doing\n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain system -domain user\nshould fix it.. Sorry, it's the October 30 MacVim commit afc384eafa35234a5ef34cca6e4; Oct 29 was the last Vim one that got merged in.. Strangely, this warning doesn't occur in the corresponding version of plain Vim.  Must be something weird in the merge.. Cheers!. This is MacVim, whichis macOS-only.  If you're on Linux, you're reporting this in the wrong place.. The problem described in this thread seems to be a Vim issue, not a MacVim one.  It should be reported upstream.. brew update then try again.  If that doesn't work, it's a Homebrew problem and you should go to them.. Your Homebrew is messed up, because it's saying that 10.13 isn't supported.  It is.  Your Homebrew installation is stuck in an old state somehow.. I have manually bisected, and found that the last good commit was 96b4e927fb09b992ab4eece46cb38a, which is the most recent merge-in after 8.0.1216.\nThe next commit that will actually build MacVim so that I can try :gui is the very next merge-in, afc384eafa35234a5ef34cca6e44e, which is the next merge-in after 8.0.1238.\nI'm not qualified to know which commits between those are the culprits, but just by looking at commit messages, my first suspect would be 8.0.1236, which messes with a bunch of macos-related stuff all at once.\nI have no idea how to get a more fine-grained bisection, because if I git checkout [one-of-Bram's-commits], the gui doesn't build because there's no MacVim source apparatus after the checkout.\nI'm hoping someone either knows how to do this, or will be able to spot the bug by looking at diffs.. (The problem could also, of course, be a merging error.). That one's already been merged: it's 8.0.1236, which would be my initial suspect.. @nuko8 Would you mind taking a look at this thread to see if you have any idea whether 8.0.1236 might be the problem?. @nuko8 Thanks!  I just tried it and it seems to work.  I'll test it a bit more just to make sure that nothing else went awry.. I'm pleased to report that @nuko8's fix has been working without noticeable incident for the last 6 days.  But I'm also not knowledgeable enough to say whether it's The Right Fix.  @splhack Does it look OK to you?. This issue has returned.  I see it on 8.0.1848.. Line 568 of gui.h is the middle of a comment block.  Do you mean line 580?. I tried it, and it works.  Thanks!. It's a Homebrew thing.  Just wait a bit.. Whoops, forgot to paste in the error:\nMacVim/MMBackend.m:2687:36: error: too few arguments to function call, expected\n      2, have 1\n                    vim_chdirfile(s);\n                    ~~~~~~~~~~~~~  ^\nproto/misc2.pro:85:1: note: 'vim_chdirfile' declared here\nint vim_chdirfile(char_u *fname, char *trigger_autocmd);. I would have thought that gvimrc and not vimrc is where settings governing the GUI should go.. In other words, what is the problem with having to override guitablabel in gvimrc?  That's where one would expect to override it.. > but I think there are people who also just set gui options in vimrc using has(\"gui_running\") checks.\nThere are (though I suspect it's very few), but they're not supposed to be doing that.\nI don't see the point of this unless one is desperately trying to avoid needing to have a ~/.gvimrc in the first place.  If you already have a ~/.gvimrc, there is no reason not to put your guitablabel setting in it, and there is no reason to put that setting in ~/.vimrc.\n\nFeels to me if the user has already set the option, MacVim's own gvimrc should try to respect that and not stomp the custom value\n\nThis would be true for options that have nothing to do with the GUI (e.g., &textwidth).  But I can't see why that shouldbe presumed to hold for GUI specific options.. I use non-native fullscreen all day, every day, and have noticed no slowdowns whatsoever.\nMy guess is that Vim's silly defaults.vim setup inserted some setting that you used to not have set, and that's causing it.  Or that a syntax file that you use frequently got changed and is now slower.  Or that some plugin is doing resource-intensive things.\nDoes it happen with mvim -u NONE -U NONE -N --noplugin?. mvim opens a GUI, which means it necessarily opens a window not in your terminal.. Configuration flags:\n--disable-netbeans\n--disable-nls. 0d658f8d29 worked just fine.. In my initial pasting, I forgot to mention that things continue for a little while before those errors repeat and everything bombs out.\nBy the way, why is the following repeated now on all the gcc lines?\n-D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -D_DARWIN_C_SOURCE. The problem is 8.0.1709.  I determined this by git revert-ing one Vim patch at a time starting with 8.0.1714.. To make it easier to read the output, I dropped -j4 from make and got this:\n```\ngcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -D_DARWIN_C_SOURCE -DMACOS_X -DMACOS_X_DARWIN  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -ansi        -fobjc-exceptions -o objects/gui_macvim.o MacVim/gui_macvim.m\nIn file included from MacVim/gui_macvim.m:16:\nIn file included from MacVim/MMBackend.h:12:\nMacVim/MacVim.h:13:1: warning: // comments are not allowed in this language [-Wcomment]\n// Taken from /usr/include/AvailabilityMacros.h\n^\nIn file included from MacVim/gui_macvim.m:16:\nIn file included from MacVim/MMBackend.h:12:\nIn file included from MacVim/MacVim.h:79:\nIn file included from /usr/include/os/log.h:14:\n/usr/include/os/trace.h:26:8: error: unknown type name 'inline'\nstatic inline void\n       ^\n/usr/include/os/trace.h:26:15: error: expected identifier or '('\nstatic inline void\n              ^\n/usr/include/os/trace.h:344:8: error: unknown type name 'inline'\nstatic inline bool\n       ^\n/usr/include/os/trace.h:344:15: error: expected identifier or '('\nstatic inline bool\n              ^\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/9.1.0/include/stdbool.h:31:14: note: expanded from macro 'bool'\ndefine bool _Bool\n         ^\n\nIn file included from MacVim/gui_macvim.m:16:\nIn file included from MacVim/MMBackend.h:12:\nIn file included from MacVim/MacVim.h:79:\n/usr/include/os/log.h:457:8: error: unknown type name 'inline'\nstatic inline void\n       ^\n/usr/include/os/log.h:457:15: error: expected identifier or '('\nstatic inline void\n              ^\nIn file included from MacVim/gui_macvim.m:16:\nMacVim/MMBackend.h:17:1: warning: // comments are not allowed in this language [-Wcomment]\n// Seconds to delay balloon evaluation after mouse event (subtracted from\n^\nMacVim/MMBackend.h:28:5: warning: 'NSConnection' is deprecated: first deprecated in macOS 10.13 - Use NSXPCConnection instead [-Wdeprecated-declarations]\n    NSConnection        connection;\n    ^\n/System/Library/Frameworks/Foundation.framework/Headers/NSConnection.h:18:12: note: 'NSConnection' has been explicitly marked deprecated here\n@interface NSConnection : NSObject {\n           ^\nIn file included from MacVim/gui_macvim.m:16:\nMacVim/MMBackend.h:29:5: warning: 'NSConnection' is deprecated: first deprecated in macOS 10.13 - Use NSXPCConnection instead [-Wdeprecated-declarations]\n    NSConnection        vimServerConnection;\n    ^\n/System/Library/Frameworks/Foundation.framework/Headers/NSConnection.h:18:12: note: 'NSConnection' has been explicitly marked deprecated here\n@interface NSConnection : NSObject {\n           ^\nIn file included from MacVim/gui_macvim.m:16:\nMacVim/MMBackend.h:72:4: warning: 'NSConnection' is deprecated: first deprecated in macOS 10.13 - Use NSXPCConnection instead [-Wdeprecated-declarations]\n- (NSConnection )connection;\n   ^\n/System/Library/Frameworks/Foundation.framework/Headers/NSConnection.h:18:12: note: 'NSConnection' has been explicitly marked deprecated here\n@interface NSConnection : NSObject {\n           ^\nMacVim/gui_macvim.m:22:1: warning: // comments are not allowed in this language [-Wcomment]\n// HACK! Used in gui.c to determine which string drawing code to use.\n^\nMacVim/gui_macvim.m:1861:57: warning: 'NSFindPboard' is deprecated: first deprecated in macOS 10.13 [-Wdeprecated-declarations]\n    NSPasteboard pb = [NSPasteboard pasteboardWithName:NSFindPboard];\n                                                        ^~~~~~~~~~~~\n                                                        NSPasteboardNameFind\n/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboard.h:346:32: note: 'NSFindPboard' has been explicitly marked deprecated here\nAPPKIT_EXTERN NSPasteboardName NSFindPboard NS_DEPRECATED_WITH_REPLACEMENT_MAC(\"NSPasteboardNameFind\", 10.0, 10.13);\n                               ^\n7 warnings and 6 errors generated.\nmake[1]:  [objects/gui_macvim.o] Error 1\nmake:  [first] Error 2\n```\nThere were also two more \"illegal comment\" warnings before this:\n```\nevalfunc.c:8875:25: warning: // comments are not allowed in this language\n      [-Wcomment]\n    int         w;      // This is the port number ('w' is a bit confusing)\n                        ^\n1 warning generated.\nmbyte.c:5769:9: warning: // comments are not allowed in this language [-Wcomment]\nendif // FEAT_GUI_MACVIM\n    ^\n\n```. > -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -D_DARWIN_C_SOURCE\nWhether or not this has anything to do with the breakage, it is really, really annoying to see this pollute what goes by on my screen.. This problem was fixed, at least temporarily, by upstream's reverting the C89 enforcement.. I see the same problem.. Is the issue also present in plain console Vim?  The TeX syntax highlighting file was changed fairly recently.\nCan you reproduce it, in either MacVim or plain Vim, starting with [m]vim -u NONE -U NONE --noplugin?\nI can't reproduce on my end.. What a brain lapse!  I have no idea why I was putting it in quotes; I know better.. > There's a few other bugs floating around that are essentially this same problem.\nI don't really think this is a problem.  Cmd-, is the universal Mac shortcut for preferences, just like Cmd-H is for hiding a window.  A select few things like this shouldn't be mappable from within Vim, IMHO.. > I'd probably use this way of reaching my $MYVIMRC file instead of executing a command everytime to open them.\nExecuting the command to do that is extremely simple, and can easily be given a mapping that is exactly as easy to type as .. > It's extremely simple to map from a keybinding that is not . This feature request is the ability to map from . \n@jordwalke Yes, I know; my comment was directed towards @eirnym, who seemed to be suggesting that opening $VIMRC is not sufficiently easy.. Is any of this going to affect NON-native fullscreen mode?\n(I'm going to build with this PR and experiment, but I just want to know ahead of time if such effects are even theoretically plausible.). @ychin I was actually hoping that this PR does not touch non-native fullscreen mode.  So it's good news that it should not.\nFWIW, I have never, in ten years, experienced scrolling performance issues with it.  I've only had problems with incorrect resizes when exiting NNFS and artifacts when changing the font size while in NNFS.  But you're right, these are separate worries and should be dealt with separately.. Huh.  I don't have a retina display or a fancy one of any kind.. I've been using this patch for the last 3 weeks or so, and I haven't yet come across any bad side-effects for non-native fullscreen mode.. > but in older OS we may still want to have subpixel font rendering to be consistent with other parts of the OS.\nI think supporting older macOS is mandatory, but I'm not sure how compatible that is with using Metal.. > Download the binary form https://github.com/macvim-dev/macvim/releases\nThis didn't solve anything on my Mojave machine.  MacVim (the whole window) blinks along with the cursor.. > The release blinks with my cursor.\nThis is what I keep getting, even when I wipe the preferences and even when I start up with --clean and all that.\nIf I turn off CoreText rendering in the prefs dialog the blinking stops.\nI have a non-retina display in my laptop.. A vimrc that contains only se vi+=~/.tmp/viminfo will cause the hang.\n(Obviously you have to make sure that the dir .tmp exists first).. I had suspected Xcode 10 of being a cause, but I can reproduce on a different High Sierra machine that still only has Xcode 9.4.1.. I have manually bisected, and it required going to a machine with Xcode 9.4.1 because the bug is old.\nThe first bad commit is fa3b48c6a5bffb23, \"Control sharing the find pasteboard with defaults\". To see the bug, one needs MMShareFindPboard set to -bool false.  I've had it set that way the whole time.  If I turn it on, the bug doesn't manifest.\nI don't like that setting turned on, because it makes a bunch of vim search patterns (which often have regex stuff in them) show up in the search boxes of other Cocoa apps, where those search patterns are useless.\nI guess the custom location of a viminfo file is relevant because (at least in part) that viminfo file has the last search pattern stored in it.  My guess is that console-MacVim is choking on that for some reason.. I thought Mojave requires at least Xcode 10.. I just tried building with this on High Sierra with Xcode 9.4.1 just to make sure it doesn't cause any regressions.  It built, but as soon as macvim is launched (via mvim), I see the following at my terminal prompt:\n2018-10-09 09:37:14.141 MacVim[15908:90254] Unable to find feedback application.\n2018-10-09 09:37:14.322 MacVim[15908:90254] Unable to find feedback application.. Well, now those messages are still there even after I rebuilt without the patch.  They persist after a restart.  They were not present until I built with the patch.  I.e., building 8.1.451 on High Sierra with Xcode 9.4.1 worked fine.  Then I did it against the patch of this PR and the warnings started.  Then I rebuilt without the patch and they're still there.. > how does everything look on your system aside from that message?\nI don't know, I reverted the instant I saw that message.  I'm  a little worried to try it on my other High Sierra machine that has Xcode 10 instead of 9.4.1, in case the messages start appearing there too.. Eventually the messages went away.  So, thinking it was some fluke that just happened to coincide with making a test build, I tried building with the patch again.  And the messages immediately are back.. But just for fun I tried to see if the patch messes up non-native fullscreen mode.  And it does, tremendously.  Here are two screenshots, the first is not in fullscreen and the second is with the same file put into non-native fullscreen.\n\n\n. I'll test this out later, once I'm at the machine that spews messages.  Thanks!\n\nI think that this is in a land-able state if the occasional enter/exit flicker is the only remaining problem\n\nDo we have any actual reports of this PR working on machines other than @s4y's?  Is it causing \"messages\" on anyone else's machine?. OK, I just built and very briefly tried it out on High Sierra w/ Xcode 941.\nRe the flashing: on my older, slower machine I can see that what's happening during the flash  (while entering non-native FS) is that first the MacVim window expands and looks exactly like the second of my two screenshots, where everything is \"stretched\" out of proportion; then it quickly \"fixes\" itself and the fonts and character cells are the correct size, as are the &rows and &columns.\n(Maybe that is a clue that will help in diagnosing the flashing.)\nI hope to also test this out on Mojave later at a different machine.. > Mind giving this new version a try, too?\nI will do this when I'm back at the relevant machine this week :). I just tested the latest iteration on High Sierra with Xcode 941 (non-retina screen).  This version is by far the worst; it's unusable.  The whole MacVim window often blacks out (not fixable with :redraw), and when it isn't blacked out, the antialiasing of the text is worse than what it would be on Mojave with a non-retina screen.. OK, I've also just tested it on Mojave (non-Retina).  It blacks out the window frequently, as described above when I tried it on High Sierra.  No :redraw or Ctrl-L will fix it.\nBut also, it \"undoes\" the fix for how bad fonts look on non-Retina screens on Mojave.  This trick causes some, but not all, apps to make fonts look pretty much like they used to look pre-Mojave.  Much to my relief, the trick works on the master branch of MacVim, but is apparently somehow blocked by the current iteration of this PR.\nMoreover, the present state of the PR somehow drastically worsens the appearance of fonts in MacVim even on High Sierra (non-Retina).  It makes them look like they do on Mojave non-Retina, i.e., thin, faint, and blurry.  This was unexpected.. @s4y Thanks, by the way, for all your hard work on this :). I just tried this.  Something is wrong with the cursor positioning after scrolling.  I open a document, and the cursor is on line 1.  I do <C-F> to go down to the end.  I do <C-b> to go all the way back up.  And then the cursor is on line 17 (out of 55 visible whole lines).  I feel fairly sure that the cursor should either end up on line 1 or on the last screen line.\nOTOH maybe I am wrong to expect that.  I just tried plain vim/vim on the same file, and the cursor winds up on line 41.\nSo this seems probably unrelated to the PR.  But the discrepancy between vim and MacVim seems worth noting.\nEDIT: Stupid github ate the <C-F> and <C-b> scrolling notes.. I'm also seeing some window blackouts when coming out of fullscreen (non-native mode).. I don't see this delay on Mojave, but then again I have SIP disabled and Gatekeeper set to allow everything.. Translations have been intentionally disabled on MacVim for years (and maybe even never have been enabled).  There is (or at least was) no way to reliably get it to work.  See :h macvim-todo.. I don't know what the problem was (is), I'm just relaying that there was (is) one.  And it's been so since (if I recall correctly) the beginning of MacVim in 2007.\nMy guess, however, is that the macOS way of localizing menus (.lproj) simply doesn't mix with MacVim (or Vim) menu.vim.. I've just built using this PR and it appears to work as advertised.  I'll keep playing with it.\nAs an added bonus, it appears to have fixed bug #752!. I notice a delay too, but it's definitely not one second.  It's much shorter (like less than .25 seconds).  I had to run it a few times in comparison to the console version to even be sure that a delay existed.  Either way, it should be fixed.\nFWIW, I don't have any of the scripting languages compiled in.. Homebrew removed all options from all their formulas.  Just do brew install macvim.. If it's going to make fonts look bad (thin, faint) on non-retina monitors, then there should be a preference to turn this new renderer on or off.. This should say \"only in the MacVim GUI\", unless you can convince upstream to adopt the new option.\n. This file (todo.txt) should not be modified at all.  If upstream accepts the patch, then Bram will do it.  Otherwise it should be left alone.\n. Syntax files are modified by their designated maintainers, so you should leave this file alone.\n. Shouldn't this have an \"only in MacVim\" disclaimer?. Shouldn't this have an \"only available in MacVim\" disclaimer?. ",
    "kopischke": "Yeah, but this one is not a change per se, just an adjustment of the existing icon(s) to Yosemite aesthetics. The result is still unmistakably the Vim icon set.\n. > But at the same time, there's a lot of (I would argue correct) divergence between vim, gvim and MacVim when it comes to GUI-related options; much of that divergence is based on things that the Windows and Mac GUIs don't do or which aren't idiomatic or sensible in the context of being a reasonably well-behaved and convention-conforming application. And for the GUI variants like gVim and MacVim I'd argue that being \"well behaved\" in the appropriate OS context is an important feature.\n\nI don't see what's so special about vim that it gets to dictate an override to my double-click speed; I've always been annoyed by gVim's adherence to mousetime with no way to disable it. So one way or another I feel very strongly that MacVim should allow fallback to the OS double-click interval somehow.\n\n\ud83d\udc4d\ud83c\udffb\n. At the risk of derailing this thread I would like to remark I have observed some very odd behaviour when running MacVim with the -u option, albeit not a quite the same as @airblade: when testing for a plugin conflict with the above option, I did get an uninitialised instance of MacVim and, at times a second instance that had processed my regular vimrc. As it does not happen reproducibly I dismissed that as an annoyance, but this thread makes me wonder if MacVim somehow runs afoul of recent OS X versions\u2019 rather aggressive process caching, maybe only in some configurations?\n. @airblade yeah, I had up to three Vim processes up when running into the issue I described. I think we might be experiencing aspects of the same problem, and if is an OS X version / configuration / machine specific caching problem, it\u2019s not surprising @splhack cannot reproduce.\n. ",
    "douglasdrumz": "I'm inclined to merge this. It's not a completely new logo, it's\nrecognizable as Vim. I'll evaluate it as soon as possible.\nDouglas Drumond\nOn Fri, Mar 13, 2015 at 11:47 PM, chdiza notifications@github.com wrote:\n\nFrom the macvim mailing list, from @douglasdrumond\nhttps://github.com/douglasdrumond:\nI'll follow the guidelines already stablished (for instance, once in a\nwhile someone will ask to change the icon and my answer == Bj\u00f6rn's answer).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/pull/1#issuecomment-79738868.\n. Although @kzahedi is right in \"there's no customer service\", I try to do what's better for the community. But, unfortunately, there's no way to please everyone. Since it's Mac_Vim, the new icons didn't deviate from Vim icon and there was support for it, I decided to upgrade. Let's move forward on this and embrace the new icon.\n. Thank you @chdiza, I'm a bit busy doing overtime work this weekend, but as soon as I can I'll look into it and merge.\n. Thank you so much for this. I'm late reviewing the patches because it's the end of fiscal year, but I'll catch up at most in the first week of April.\n. I reproduced it at work. I'll look into it tomorrow.\n. @jpetrie Thank you\n. Thanks, I'll test this tonight and merge it.\n. _From @GoogleCodeExporter on March 16, 2015 9:25\n\nI could not open the old macvim window buffer for maverick too after I upgraded \nthe os to yosemite beta. I downloaded a new snapshot and it works fine now.\nOriginal comment by Jason...@gmail.com on 26 Jul 2014 at 11:04\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI had this issue with the current version of `brew cask install macvim`, but \nregular (non-cask) `macvim` worked (they both use snapshot 73).\nOriginal comment by priv.tom...@gmail.com on 9 Aug 2014 at 2:21\n. From @GoogleCodeExporter on March 16, 2015 9:25\nThis affect me too\nOriginal comment by ryan.q...@gmail.com on 4 Oct 2014 at 5:12\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nI just hit this\n```\nOriginal comment by Oscargod...@gmail.com on 17 Oct 2014 at 7:25\n. From @GoogleCodeExporter on March 16, 2015 9:25\nrunning into this after upgrading to yosemite osx. fixing everything in brew \ndoctor doesn't fix this\nOriginal comment by Morenoh149@gmail.com on 17 Oct 2014 at 9:52\n. From @GoogleCodeExporter on March 16, 2015 9:25\nUntil a new snapshot is released, an easy way to fix this is to build from \nsource on a machine running Yosemite. There are no changes required, just a new \nbuild.\nOriginal comment by sande...@gmail.com on 17 Oct 2014 at 10:08\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI compiled from source on a machine running Yosemite, and here's the build: \nhttp://ryat.la/Y5t1\nOriginal comment by m...@ryanatallah.com on 17 Oct 2014 at 10:49\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI had this issue as well. I deleted my old Macvim install. Then, I followed \nthese directions \n(http://vancelucas.com/blog/fixing-homebrew-on-osx-yosemite-10-10/) to make \nsure my homebrew was on par with Yosemite. Then I just did 'brew install \nmacvim'. Works fine now.\nOriginal comment by helloger...@gmail.com on 20 Oct 2014 at 3:12\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nI just built from source. I received that error when using the downloadable \nsnapshot.\nAdditionally, if you don't remove the old MacVim you get a cryptic error about \nmissing iconv symbols if you try to build from source.\n```\nOriginal comment by jarrett....@gmail.com on 23 Oct 2014 at 4:06\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI solved this problem just like #9's way, brew uninstall macvim, then brew \ninstall macvim. done...\nOriginal comment by tblongg...@gmail.com on 24 Oct 2014 at 2:55\n. From @GoogleCodeExporter on March 16, 2015 9:25\nPlease, a new snapshot!\nOriginal comment by eric...@gmail.com on 2 Nov 2014 at 4:18\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nNew Yosemite snapshot is available, fixes issues for me:\nhttps://github.com/eee19/macvim/releases\n```\nOriginal comment by eric...@gmail.com on 11 Nov 2014 at 1:51\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nbrew uninstall macvim\nbrew install macvim\nmove the old application to trash or remove it, then run \nbrew linkapps\n```\nOriginal comment by lfender6...@gmail.com on 10 Dec 2014 at 12:50\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI'm having similar issues.\nOriginal comment by sea...@gmail.com on 20 Sep 2014 at 4:51\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI think it was related to a gvim update that for some reason needed to be \nperformed on the command line. Each time this issue has arisen (which has been \nat least twice), when I launched Terminal I got an alert that gvim needed to be \nupdated. I performed the update and this appeared to fix whatever was going on \nwith MacVim.\nOriginal comment by chivalry...@gmail.com on 20 Sep 2014 at 8:08\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI continue to have these isuses\nOriginal comment by phi...@staffjoy.com on 26 Dec 2014 at 11:11\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nI made some progress on identifying the problem.\nAfter adding some debugging code in src/eval.c to dump the current locale (via \ngetlocale) in string2float I see it's different when launched via the command \nline (it's C as it should, even if I force it to another value from the shell) \nwhereas it's fr_FR when launched from the finder. I have no explanation yet, \nbut I guess it helps to explain the difference in behavior.\nAttached, is the butt-ugly debug code I used\n```\nOriginal comment by yann.cou...@gmail.com on 19 Nov 2014 at 6:18\nAttachments:\n- vim-debug.patch\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nFollowing up with some more info:\nIf I open a new tab with :tabnew, this forces airline to redraw and suddenly it \nappears again. I still think this is a MacVim / Yosemite issue (since this \ndidn't happen with Mavericks), but there is a workaround.\n```\nOriginal comment by n.harris...@gmail.com on 24 Sep 2014 at 6:04\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nThis happens without airline, too. The first line of the file is missing, which \nmakes editing pretty annoying. Same diagnostics as n.harris. Willing to do any \ntexting/experimenting for more information.\nThanks!\n```\nOriginal comment by jax...@gmail.com on 3 Oct 2014 at 9:14\n. From @GoogleCodeExporter on March 16, 2015 9:25\nYes I noticed this in each public beta of Yosemite (10.10). The problem repros \nwith a vanilla vim config. FWIW, VimR -- if I understand correctly, it uses \nsome kind of macvim framework -- doesn't have this problem.\nOriginal comment by matt.saw...@gmail.com on 7 Oct 2014 at 6:56\n. From @GoogleCodeExporter on March 16, 2015 9:25\nany solution in view?\nOriginal comment by bchesn...@gmail.com on 18 Oct 2014 at 6:34\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\n:tabnew does not work for me unfortunately. I can however temporarily fix the \nissue by changing 'lines' to 999. From the manual:\nYou can use this command to get the tallest window possible:\n   :set lines=999\n\nNote that you will have to enter that every time you switch between windowed \nand fullscreen mode. Unfortunately it does not seem possible to really automate \nthis.\n```\nOriginal comment by florian....@gmail.com on 18 Oct 2014 at 11:53\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI have same problem on Yosemite, both :tabnew or :set lines=999 work as \nworkaround, but have to do it on every switch\nOriginal comment by danijel....@gmail.com on 18 Oct 2014 at 1:45\n. From @GoogleCodeExporter on March 16, 2015 9:25\nIs anyone going to fix this issue. This is very annoying!\nOriginal comment by vinit.ku...@changer.nl on 27 Oct 2014 at 6:15\n. From @GoogleCodeExporter on March 16, 2015 9:25\nAs a workaround you can decrease/increase the font size and the bar will appear.\nOriginal comment by agonzale...@gmail.com on 2 Nov 2014 at 11:47\n. From @GoogleCodeExporter on March 16, 2015 9:25\nThis is very annoying. Every time I start vim and i have to increase or \ndecrease the font size.\nKindly fix this issue asap (Macvim + yosemite)\nOriginal comment by abhinand...@gmail.com on 6 Nov 2014 at 5:42\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nI'm experiencing the problems mentioned above, and in addition to that, I also \nget the same line rendered numerous times (see attachment)\nThis only happens in fullscreen mode, windowed mode works fine.\n```\nOriginal comment by alexge...@hotmail.com on 9 Nov 2014 at 11:14\nAttachments:\n- Screen Shot 2014-11-09 at 23.11.43.png\n. From @GoogleCodeExporter on March 16, 2015 9:25\n+1 here.. for both the missing line at the top and the multiple repeated lines \non the body when I scroll\nOriginal comment by apierre....@gmail.com on 12 Nov 2014 at 2:06\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI have this problem too in Yosemite,\nOriginal comment by michael....@googlemail.com on 12 Nov 2014 at 12:49\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nI have the missing line problem. Using a config from skwp's dotfile repo \n\"yadr\".  Thanks \"agonzale...@gmail.com\" for the font size workaround, saved me \nhours of switching to a new editor. Still annoying to have an extra step after \nfullscreen, but usable until we get a real fix.\nCurrent Process (workaround):\n[Command] + [Control] + [F]\n[Command] + [-]\n[Command] + [=]\nDesired Process:\n[Command] + [Control] + [F]\n```\nOriginal comment by tekempe...@gmail.com on 16 Nov 2014 at 7:30\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\n13\nThis is a good way.\n```\nOriginal comment by hkf...@gmail.com on 30 Dec 2014 at 7:25\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nThis mapping works well for me.\nnnoremap   :set lines=999 columns=999\n```\nOriginal comment by E.C.Bald...@gmail.com on 9 Jan 2015 at 5:12\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nAlso experienced this, but an easy quickfix is to simply turn of the native \nfullscreen support (cmd+, for preferences and then remove the checkmark under \nadvanced). \nIt does mean that macvim will occupy the active space instead of creating a new \nfullscreen one, but i find that a minor problem\n```\nOriginal comment by a...@jillion.dk on 10 Feb 2015 at 8:24\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI found a fix from \nhttp://shorts.jeffkreeftmeijer.com/2014/full-screen-macvim-on-yosemite/\nIt works with me.\nOriginal comment by ddu...@gmail.com on 16 Feb 2015 at 10:45\n. Closing as duplicate of #8 \n. From @GoogleCodeExporter on March 16, 2015 9:25\nNote also that when you exit the full screen via the new \"maximize\" button the \nMacVim window is not resized properly but number of columns remains the same as \nit was in full screen (365 in my case).\nOriginal comment by veritas....@gmail.com on 17 Oct 2014 at 3:07\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nI see the system resizing the window just as the full screen animation finishes \n(this is on a 1440x900 screen):\nOct 19 10:09:29 perlocution.local MacVim[11038] : -[MMWindow \nsetFrame:display:]@80: Setting window frame to {{1, 46}, {1438, 808}}\n2014-10-19 10:09:29.568 MacVim[11038:314223] (\n    0   MacVim                              0x0000000100030c7b -[MMWindow setFrame:display:] + 331\n    1   AppKit                              0x00007fff91810105 -[NSToolbarFullScreenWindowManager resizeContentWindow] + 206\n    2   AppKit                              0x00007fff9181617b -[NSToolbarFullScreenWindowManager windowDidChangeFullScreenStatus:] + 153\n...\nI haven't figured out why, but I've managed to work around it for now by moving \nthe call to -[MMWindowController maximizeWindow:] to the very end of the \nanimation. It makes the transition a bit rough, but at least it's not broken.\n```\nOriginal comment by peter.sagerson@gmail.com on 19 Oct 2014 at 5:13\nAttachments:\n- fullscreen_workaround.diff\n. From @GoogleCodeExporter on March 16, 2015 9:25\nthe workaround works here.\nOriginal comment by bchesn...@gmail.com on 19 Oct 2014 at 8:37\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nI almost fixed this here - https://github.com/b4winckler/macvim/pull/48\nIf someone can help with the issue I mentioned there I think we are clear to \ngo. \n```\nOriginal comment by vesti...@gmail.com on 14 Nov 2014 at 9:02\n. From @GoogleCodeExporter on March 16, 2015 9:25\nQuickfix: Open a second tab. The resize does reposition of the view correctly.\nOriginal comment by brandvie...@gmail.com on 18 Nov 2014 at 10:15\n. From @GoogleCodeExporter on March 16, 2015 9:25\nThe first workaround i found is to uncheck \"Prefer native full-screen support\" \nin preferences.\nOriginal comment by pixel5...@gmail.com on 18 Oct 2014 at 12:27\nAttachments:\n- screen.png\n. From @GoogleCodeExporter on March 16, 2015 9:25\nOh nice, thanks. That isn\ufffdt quite the same but it is a good workaround.\nOriginal comment by de...@derekleverenz.com on 19 Oct 2014 at 7:32\n. From @GoogleCodeExporter on March 16, 2015 9:25\nJust an update, the title specifies multiple monitors, but the problem occurs \nregardless of multiple monitors\nOriginal comment by de...@derekleverenz.com on 20 Oct 2014 at 3:54\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI get the same problem, and also various graphical bugs with the text after \ngoing into full screen. However, after creating or destroying a screen split, \neverything seems to return to normal. Perhaps you folks should try that.\nOriginal comment by mwill...@gmail.com on 24 Oct 2014 at 12:38\n. From @GoogleCodeExporter on March 16, 2015 9:25\nBy screen-split, do you mean a window (eg C-w v) or (C-w s)? creating and \ndestroying them unfortunately doesn't seem to do anything about this problem \nfor me.\nOriginal comment by de...@derekleverenz.com on 29 Oct 2014 at 6:04\n. From @GoogleCodeExporter on March 16, 2015 9:25\nSame problem.\nWith native full-screen support, I get fullscreen work when zoom it after full \nscreen. But MacVim will zoom out when I switch to another application and \nreactivate it by Keyboard Maestro(it is fine by switching), so that is not a \ngood workaround.\nOriginal comment by leondo...@gmail.com on 3 Nov 2014 at 4:11\n. From @GoogleCodeExporter on March 16, 2015 9:25\npatch from separate issue thread helps.\nhttps://code.google.com/p/macvim/issues/detail?id=514&start=100\nOriginal comment by pixel5...@gmail.com on 3 Nov 2014 at 10:23\n. From @GoogleCodeExporter on March 16, 2015 9:25\n```\nI am experiencing the same issue. When I run mvim from the console I get this \noutput,\njamie@pepperell ~> mvim fib.py\ndyld: Library not loaded: \n/System/Library/Perl/5.12/darwin-thread-multi-2level/CORE/libperl.dylib\n  Referenced from: /Applications/MacVim.app/Contents/MacOS/Vim\n  Reason: image not found\nfish: Job 1, 'mvim fib.py' terminated by signal SIGTRAP (Trace or breakpoint \ntrap)\n```\nOriginal comment by JamesFMc...@gmail.com on 23 Oct 2014 at 11:20\n. From @GoogleCodeExporter on March 16, 2015 9:25\nThat was on Snapshot 65, updating to latest (73) fixes the issue for me.\nOriginal comment by JamesFMc...@gmail.com on 23 Oct 2014 at 11:29\n. From @GoogleCodeExporter on March 16, 2015 9:25\nUpdateing to Snapshot 73 fixed the issue. Thanks for the tip!\nOriginal comment by knole...@gmail.com on 23 Oct 2014 at 11:54\n. From @GoogleCodeExporter on March 16, 2015 9:25\nI'm also getting this error while opening html files with vim\nOriginal comment by rob.ahlb...@gmail.com on 6 Jan 2015 at 12:04\n. From @GoogleCodeExporter on March 16, 2015 9:26\nSee also https://discussions.apple.com/thread/6751474?start=15&tstart=0\nOriginal comment by j...@hyper-world.de on 2 Feb 2015 at 9:53\n. From @GoogleCodeExporter on March 16, 2015 9:26\n```\nI don't think that moving it to the app menu is correct according to Apple's \nHIG or to the prevailing conventions of OS X applications. The app menu is for \nitems which apply to the entire application, not to individual files or \nwindows, which is how the preference items under MacVim's Edit menu work.\nPer Apple's menu guide-lines:\n\nThe app menu contains items that apply to the app as a whole rather than to a \nspecific document or other window.\n\nA quick reading of the HIG seems to suggest these items actually belong under \nthe File menu (the same place you have other document-specific settings like \nthose related to printing and document margins):\n\nIn general, each command in the File menu applies to a single file (most \ncommonly, a user-created document). ...\nIf you provide document-specific preferences items, place them above printing \ncommands. Also, be sure to give your document-specific preferences a unique \nname, such as Page Setup, rather than Preferences. Note that the Preferences \nand Quit commands, which apply to the app as a whole, are in the app menu. \n\nAdditionally, Apple's guide-lines about application preferences say:\n\nDon\u2019t provide a preferences toolbar item. Because the toolbar should \ncontain only frequently used items, it does not make sense to include a \npreferences item in it. Instead, make app-level preferences available in the \napp menu (for more information, see The App Menu); and make document-specific \npreferences available in the File menu (for more information, see The File \nMenu).\n\nJust saying\n```\nOriginal comment by d...@dana.is on 9 Mar 2015 at 6:04\n. Looks good to me :)\n. Thanks, done.\n. Thanks!\n\nDouglas Drumond\n\u200b\u200bCaf\u00e9 Linear http://www.cafelinear.com/ \u2013 GDG Campinas\nhttp://www.gdg-campinas.org/\u200b\ngoogle.com/+DouglasDrumond\nhttp://google.com/+DouglasDrumond \u2013 @douglasdrumond\nhttp://twitter.com/douglasdrumond\u200b\u200b\nOn Sun, Jul 12, 2015 at 1:59 AM, chdiza notifications@github.com wrote:\n\nI can confirm that the most recent commit (which amounts to Snapshot 77)\nhas built on Tiger and Leopard. I see no problems yet.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/40#issuecomment-120687343.\n. I, too, prefer ssh because it avoids the need to type the password, but\nthat can be mitigated with KeyChain.\n\nSince this is a configuration to be done locally on every developer\nmachine, I have no strong opinion on what to put in the instructions.\nEm qua, 14 de out de 2015 01:37, Kazuki Sakamoto notifications@github.com\nescreveu:\n\nIt's ok. I just prefer to use ssh protocol and think ssh protocol is\nbetter in the document.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/46#issuecomment-147933270.\n\n\nDouglas Drumond\nAndroid\u304b\u3089\u9001\u4fe1\u3002\n. Thank you everybody for maintaining MacVim\nEm qua, 14 de out de 2015 09:37, Douglas Drumond douglas@cafelinear.com\nescreveu:\n\nI, too, prefer ssh because it avoids the need to type the password, but\nthat can be mitigated with KeyChain.\nSince this is a configuration to be done locally on every developer\nmachine, I have no strong opinion on what to put in the instructions.\nEm qua, 14 de out de 2015 01:37, Kazuki Sakamoto notifications@github.com\nescreveu:\n\nIt's ok. I just prefer to use ssh protocol and think ssh protocol is\nbetter in the document.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/46#issuecomment-147933270.\n\n\nDouglas Drumond\nAndroid\u304b\u3089\u9001\u4fe1\u3002\n\n\nDouglas Drumond\nAndroid\u304b\u3089\u9001\u4fe1\u3002\n. There was a page in code.google.com/p/macvim, but it now redirects here. GitHub pages is super easy (already using in my personal blog), I'll set them up.\n. Sorry, if I recall correctly, MacVim never had Lua support, so it's not\nexactly bring back. The problem is which version of Lua to use, there's no\ndefault Lua in OS X. For Ruby and Python, MacVim is always complied against\nsystem version (bad things do happen if you compile against other version\nand someone tries to use it without that specific version, I know because\nonce I forgot RVM enabled and compiled with wrong Ruby).\n2015\u5e747\u67088\u65e5(\u6c34) 19:11 Jakub Turski notifications@github.com:\n\nIt'd be nice to get an official statement, whether it's something that's\nhard to do and requires some help, or is it just not going to happen\nbecause of some reason.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/50#issuecomment-119746310.\n\n\nDouglas Drumond\nAndroid\u304b\u3089\u9001\u4fe1\u3002\n. This looks nice, but it's a complex patch to analyze just with GitHub interface. I'm not with my Mac right now, I'll look into this patch when I can. Thanks for submitting.\n. MacVim releases are built with Python, but anyone willing to compile it\nwithout Python support can do so. You need to check with Brew project how\nis the formula for MacVim, it doesn't depend on us.\n2015\u5e747\u670810\u65e5(\u91d1) 21:41 Brad Dielman notifications@github.com:\n\nCouldn't find anything in the latest release notes nor the Homebrew\nformula that made this dependency obvious to me.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/54.\n\n\nDouglas Drumond\nAndroid\u304b\u3089\u9001\u4fe1\u3002\n. Thanks, Earl.\n\nDouglas Drumond\n\u200b\u200bCaf\u00e9 Linear http://www.cafelinear.com/ \u2013 GDG Campinas\nhttp://www.gdg-campinas.org/\u200b\ngoogle.com/+DouglasDrumond\nhttp://google.com/+DouglasDrumond \u2013 @douglasdrumond\nhttp://twitter.com/douglasdrumond\u200b\u200b\nOn Sun, Jul 12, 2015 at 1:54 AM, Earl Oliver notifications@github.com\nwrote:\n\nYou can download binaries from the release page of the project:\nhttps://github.com/macvim-dev/macvim/releases\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/55#issuecomment-120687231.\n. Thanks. I'm inclined to merge this, since it's optional. I'm not with my Mac right now, I'll look into it as soon as I can.\n. Ctrl-click as right click is the desired behavior on Mac OS.\nThe original post doesn't say anything about click, though, just that ctrl isn't working. @elfi, what do you mean by that? I use ctrl- shortcuts all the time (such as ctrl-v for block select) and I haven't experienced problems so far.\n. :+1: \n. Thanks, thanks, thanks\n. This was during transition, maybe let it there with a warning. Like \"in\nsome versions of Mac OS X you'll need to prepend the command line with\nCC=clang\"\n\n2015\u5e7410\u67087\u65e5(\u6c34) 22:32 Josh Petrie notifications@github.com:\n\nThis page https://github.com/macvim-dev/macvim/wiki/Building on the\nwiki notes that as of OS 10.8, one should set CC=clang prior to running\nconfigure. Does anybody know or recall why?\nI am able to successfully build and run MacVim from a clean source\ncheckout (10.11) without doing so, so it seems like perhaps we should\nremove this from the documentation, or point out which OS version you no\nlonger needed to do this on (maybe it was OS versions during which Apple\nwas transitioning off gcc to clang?)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/84.\n\n\nDouglas Drumond\nAndroid\u304b\u3089\u9001\u4fe1\u3002\n. According to Bj\u00f6rn's e-mail:\n\n\nAny plans to have a sparkle feed for the snapshot releases, or do we\nneed to update manually?\n\nAutomatic updates slow me down so I'm only supporting it with the stable build.\n\nSince we're moving from snapshot to snapshot, my guess it will be low priority for now.\n. That's the usual behavior on macOS. If an app is still open, there's a dot below the icon, even without windows. Except for a few apps that quit after closing the last window (but then you would see the icon disappearing from the Dock, except for the apps you choose to keep), the app is open and the dot remains. Example: Terminal.app or Preview.app. ",
    "fgr0": "As a side-note: When this is merged, the wiki-section Notes on document icons should be updated to provide a new download-link to new pre-generated document icons. The entire paragraph might need to be changed, because at least for me the steps to generating the document icons have not worked since Mountain Lion.\nOver at https://github.com/b4winckler/macvim/pull/44#issuecomment-53465178, @jocelynmallon provided me with pre-generated ones. maybe these could also be linked in the wiki.\n. ",
    "13k": ":+1:\n. Here's the first 20 lines in the shipped file:\n```shell\n$ head -20 /Applications/MacVim.app/Contents/MacOS/mvim\n!/bin/sh\n\nThis shell script passes all its arguments to the binary inside the\nMacVim.app application bundle.  If you make links to this script as view,\ngvim, etc., then it will peek at the name used to call it and set options\nappropriately.\n\nBased on a script by Wout Mertens and suggestions from Laurent Bihanic.  This\nversion is the fault of Benji Fisher, 16 May 2005 (with modifications by Nico\nWeber and Bjorn Winckler, Aug 13 2007).\nFirst, check \"All the Usual Suspects\" for the location of the Vim.app bundle.\nYou can short-circuit this by setting the VIM_APP_DIR environment variable\nor by un-commenting and editing the following line:\nVIM_APP_DIR=dirname \"$0\"/../../..\nif [ -z \"$VIM_APP_DIR\" ]\nthen\n    myDir=\"dirname \"$0\"\"\n    myAppDir=\"$myDir/../Applications\"\n    suspects=(\n``. I had previously tried with both theVimbinary and thevim` script, but both fail to set the runtime path when symlinked\n```shell\n$ rm /usr/local/bin/vim\n$ ln -s /Applications/MacVim.app/Contents/MacOS/vim /usr/local/bin/vim\n$ vim -u NONE\nError detected while processing command line:\nE484: Can't open file /usr/local/bin/vim/runtime/syntax/syntax.vim\nPress ENTER or type command to continue\n``. Ignore my previous comment, I forgot the (default) filesystem is case insensitive and linkingvimwill actually point toVim`. Sorry about that.\nSo you mentioned /Applications/MacVim.app/Contents/bin/vim (which doesn't currently exists), I take it will be published in another release?. Thank you @splhack!. ",
    "eirnym": ":+1: \n. @chdiza you can do find / -print0 | xargs -0 mvim to avoid space and names like Icon\\n problems\n. I have same variables with this commands as I see from Terminal (I use zsh for login shell), and there's no mess with environment variables. I've tried run from console (mvim), from Spotlight Search, and using Launchpad.\nIn this situation you can:\n- use script which controls variables you need\n- check your shell scripts (include login one) to see where is bug \n- execute your program only from console \nMacVim: Snapshot 76\nOS X: 10.10.4\n. This is about how Vim do syntax highlighting. Regular Expressions are slow for very long lines.\nYou can temporary disable syntax highlighting (sy off for example) and Vim will be fast again.\n. I can't reproduce it. I use MacVim 76, Mac OS X 10.10.4\n. I've added these options: set guioptions+=e and set showtabline=2 to the end of my ~/.vimrc, and remove all plugins I use. I can't reproduce this. \nMy guioptions are grmLe\n. ctrl is binded to help you with right mouse click in Mac OS X by default, isn't it? Some programs may use it as modifier.\n. I'd test these layouts with software like Karabiner to understand what exactly is going on and what is the difference. This sounds quite strange, to be honest. . ViM crashes on calliing any Python 2.7 instruction. :python3 works well\n. I like this disk image, and it has some advantages over zip:\n- checksum checking over the bundle\n- easer to search over distributives. \n. @jirutka I prefer minimalistic background: bigger MacVim icon leads to confusion which icon I should drag into Applications folder. So if it'll be blurred enough and/or be background of \"drag action\", it will be better, really. \n. @jirutka I hope there's no problems with licences.\n. Tool you used is under MIT licence.\n. :+1: \n. I think this is related to Yosemite fullscreen bugs\n. I can say nothing about building MacVim from HomeBrew, but I use MacVim from MacPorts only because I really need Python3 support. Are there any packages you need to be installed to python to use riv.vim? Which bundle manager do you use?\n: python import string; print string.digits works well on official MacVim snapshot release or MacPorts with Yosemite. I use pathogen and python-mode/syntastic/etc works well.\nI'll build and test MacVim from MacPorts with El Capitan a bit later.\n. Vim form MacPorts works on El Capitan as well.\n@evoling please, check your environment, build environment, vimrc. May be you have broken HomeBrew.\n. :+1: \n. I always do #define SOME_THING 1 instead of simple #define SOME_THING\n. better is to check than define\n```\n/ Needs to be before option.h, which uses BLUR_TRANSPARENCY /    \nifdef MAC_OS_X_VERSION_10_5\nif defined(FEAT_TRANSPARENCY) && (MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_5)\ndefine BLUR_TRANSPARENCY\nendif\nendif\n``\n. :+1: \n. This feature will be nice to be done automatically whenMacVim` suggests to upgrade.  . Honestly to say, there was snapshot 78 build. But it had been removed very soon after released.\n. By the way, good job, guys!\n. Can this path be simlinked? \nWhat does this patch give for python linking? I don't see anything matching.\n. Confirm, no exceptions, no windows. I have to reactivate MacVim to be able to open any windows.\nconfiguration doesn't matter (I've tried all combinations)\n. @w0i0c0o MacVim uses Perl 5.18 since snapshot 148 and Ruby 2.5 sinse snapshot 145. . It doesn't work with 3.5 as well! I've tried both before asking.\n. Output is same.\n```\nFatal Python error: Py_Initialize: unable to load the file system codec\nImportError: No module named 'encodings'\nCurrent thread 0x00007fff7b0c7000 (most recent call first):\nVim: Caught deadly signal ABRT\nVim: Finished.\n``\n. It doesn't work. And you better close issue than discuss it. it's bad sign\n. Menu key bindings you can change inSystem Preferences -> Keyboard -> Shortcuts -> App Shortcutsand no need to modifygvimrc. If I change python3dll and create symlink to/Libraries/Framework/..etc, it able to load correctPython 3.5.\nSo the problem I see isMacVim(vim`?) doesn't initialise correctly Python when it is placed in place with other base than all Python Home specified in configure. \nI haven't tested with removing Python2.7 from system (in any way like chmod/mv/rm), but we should start to look in difference of Python2 and Python 3 initialisation. And we should change both if initialisation depends only on predefined variables but not in python3dll and pythondll.\n. @splhack setting PYTHONPATH environment is not work in any way\n. @stevenharman Could you draw what do you expect in colors? This would help developers to make a patch. actually, the last update (153) works without forsing a redraw. Can't reproduce on latest snapshot from GitHub. \nCustom Version 7.4 (101)\n. Which exact Python versions do you have? Have you read release notes about compatible versions?\n. I can also suggest to let $PYTHONHOME=/path' with path to your python's installation.\n. Yes, I useCmd-Vin both cases. Probably, it's a good idea in this particular case to change default key bindings to not confuse people around.. Thank you for an explanation, this is enough for me.. Could we accept a limited amount of donations for this purpose?\n. Does this work in original vim?. I haven't seen thatCTRL-C` and other signals well supported in GUI vim (e.g. GViM or MacVim) as it require TTY emulation which is not fully made as it isn't intended to be. \nFrom :help gui-pty:\n\nWhen using \":make\" it's not possible to interrupt with a CTRL-C.\n\nI found a recent topic in vim_use:\nhttp://vim.1045645.n5.nabble.com/Issue-with-using-gvim-system-and-fzy-td5728786.html. I think yes. Vim Plug has it's own version of system to handle this situation. After setting the python libraries I usually do explicitly call for :py3 or :py to select the version I usually need. @ruchee there's :pyx to call the :py3 or :py after you actually loaded the libraries.. Do you try to run it inside MacVim? Yes, that terminal emulator doesn't support many neat things and it not supposed to be. Tmux has very high expectations from a terminal emulator.\nI don't thing even GVim supports it. . I don't know how tmux operates in the depth, but I hardly could imagine a real world situation where running tmux from MacVim is useful. Even the Terminal.app is much better as a terminal emulator.. it's a good case, but we speak when you run a command  inside ViM.  This is a useful method for short-running commands as you can relatively fast check something like if file could be compiled or if indentation is correct. But it was never intended to be a full terminal emulator. I'm not sure if you able to do in in GVim. \nAlso you can't edit in the same ViM instance at all while running external commands. \n(no termcap)\n:!zsh\n_tc_bind:echotc:7: no such capability: kh\nTermcap kh (Home key) is not found\n_tc_bind:echotc:7: no such capability: @7\nTermcap @7 (End key) is not found\n_tc_bind:echotc:7: no such capability: kl\nTermcap kl (left-arrow key) is not found\n_tc_bind:echotc:7: no such capability: kr\nTermcap kr (right-arrow key) is not found\n_tc_bind:echotc:7: no such capability: ku\nTermcap ku (up-arrow key) is not found\n_tc_bind:echotc:7: no such capability: kd\nTermcap kd (down-arrow key) is not found\n_tc_bind:echotc:7: no such capability: kN\nTermcap kN (next-page key) is not found\n_tc_bind:echotc:7: no such capability: kP\nTermcap kP (previous-page key) is not found\n_tc_bind:echotc:7: no such capability: kb\nTermcap kb (backspace key) is not found\n_tc_bind:echotc:7: no such capability: kbs\nTermcap kbs (backspace key) is not found\n_tc_bind:echotc:7: no such capability: kD\nTermcap kD (delete-character key) is not found. I think so. . is it still actual?. If you open on-screen keyboard in OS X, you'll see these two symbols (` and ')  are not the same as others. They are used to enter sybmols like \u00e1 without requirement of holding a button or using an option key.  Because of this handling, OS X generates different input sequence to an application while using these keys.\nTerminal's input is a text-based, when MacVim (GUI) not in Insert or Replace modes, the input is keypress-based, and it swallowed by OS X. \nTry to change a layout to US and check if '> works there. To insert symbols from extended alphabet you can press and hold a button and then select required from a pop-up selection.\n\n. MacVim uses NSTextView as a base and doesn't handle keyboard input as PTY does (e.g. in iTerm/Terminal). To rewrite this core components it would be too much effort to be involved than use compatible keyboard layout.\nPS: I use Polish layout (Polski pro) for most of my input and completely fine with it. \nPPS: Looked on a few more European keyboard layouts and saw that most usable keys are accessable directly or with modifiers like Shift or Option. Can you check by running macvim with bare defaults? I can't reproduce it on my version (build 146). \n[m]vim -u NONE -U NONE --noplugin. Is there any public examples to check this issue? I have many Python files >3500 lines long but MacVim never looses syntax highlighting with syntax sync fromstart.. Got the same issue with a file with very long lines (from a mysql dump sql file). If lines have reasonable length, everything works like a charm even with huge files. If I chop long lines with RE to smaller ones, problem will \"magically\" gone. My file was ~3k lines long and after chopping it is about 100k long. There's two executables in the MacVim.app bundle, Vim and MacVim. The first one is a terminal-based MacVim, and MacVim is a graphical UI.\nmvim will run MacVim binary and mvim -v will open Vim.. Terminal based MacVim is like an original Vim. \nThe font option is an option for GUI only as you can open a text terminal in text mode like 80x25 and there's no option to recognise it. You should tweak settings of your terminal to change font. . this is an interesting feature for MacVim GUI only. . Google Fonts, official readme and github page doesn't claim that this font does support Cyrilic characters, does it?. I haven't checked it by myself, but I see that this plugin uses Python3. So I have a few questions for you: do you have you python 3 installed? and have you set up MacVim to use it? \nto test, you can run py3 1+2. Will you re-upload the build?. run /Applications/MacVim.app/Contents/bin/Vim or mvim -v . The version you moved checks actual vim binary from a directory above. It' better just to add /Applications/MacVim.app/Contents/bin folder to the PATH . Python path used for ViM can be modified like in a snippet below. I use Python from MacPorts and a binary installation from GitHub. Python checks PYTHONPATH variable if virtualenv is running and uses libraries from it.  \n```\nset pythonthreehome=/opt/local/Library/Frameworks/Python.framework/Versions/3.6\nset pythonthreedll=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6.dylib\nset pythonhome=/opt/local/Library/Frameworks/Python.framework/Versions/2.7\nset pythondll=/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/libpython2.7.dylib\n```. Please, tell if official vim is compatible with Ruby 2.3 and can be compiled on macOS 10.14 with XCode 10 beta. If not, please report to the upstream.. Is this GUI or terminal version? I have no problem with my settings. I have follwoing settings set in my vimrc and I didn't changed the fallback font:\nset macligatures\nset guifont=Fira\\ Code\\ Light:h16\n. I found a random Greek text and can't reproduce your issue. Could you provide more details?\nMy MacVim is build 149 and macOS 10.12.\nIs it some specific text?. The corresponding file is here: https://github.com/macvim-dev/macvim/blob/gh-pages/appcast/latest.xml. Could we put whole version in sparkle:shortVersionString?. Just tried it both in GUI and text MacVim and everything worked as intended to work. What is your environment?. I done it with set go+=! without quotes. Did we need quotes before to set this option?\n:set go?\nguioptions =egmrL\n:set go+=!\n:set go?\nguioptions =egmrL!\n:set go-=!\n:set go?\nguioptions =egmrL\n. What choose do you have in MacVim preferences (\u2318P)?. this is my settings and files are opened in buffers (I have to run :ls to list them)\n\n\n. Could you provide additional following info:\n Do you experience these crashes for both terminal and GUI MacVim?\n If MacVim with no config (mvim -u NONE -N) runs smoothly or have same crashes? \n* If there're binary plugins you're using?\n . You need to use MacVim to wait to finish the edit. Otherwise, it will detach from running process. To use this feature of zsh, you should use something like this: mvim -f -c \"au VimLeave * !open -a Terminal or mvim -v. there's also vim/vim#3162 which also seems to be important. Which settings and build do you have? I can't reproduce it on build 149 with my settings and with mvim -u NONE -N.. it's reproducable and funny. YCM uses python interpreter from PATH by default, enabling importing and checking from virtualenv. \nProbably you should address this issue to YCM repo itself rather than to MacVim repo.. Does MacVim built with dynamic python2? If yes, could you directly specify which Python2 library to load?. This shotcut is an Apple-guidelined standard to call preferences of an application. You can try to change this shotcut in System Preferences.app for MacVim and check if you can bind it. . At least remapping default keybindings in System Preferences works for other apps so if a man really wants to shoot his leg, he can try it.. @jordwalke Have you tried to unset/redifine this particular menu item in System Preferences.app? The key bindings from the menu are handled by OS X Window System Server, not by app itself. . From a MacVim perspective itself, this issue is kind-a won't fix as this key binding works well if you set a different key for a menu item.. > The key equivalents are all hard-coded in MainMenu.nib. The OS is not providing them for MacVim.\nYes, and these keys are handled by Mac OS X. Replacing them to something else means breaking Apple Guidelines and it's not a thing which developers should do. \nReplacing or unsetting key combinations in System Preferences.app will solve your issue. you can set up an Apple Script to change these settings if you need an automated process. . * @jpetrie Yes, you're right, that System Preferences don't provide \"remove a key sequence\" functionality. Probably p-list hacking will do this good enough\n various AppleScript scripts could be found here,  here, and here\n Also these preferences are stored in com.apple.universalaccess and in org.vim.MacVim:\n\"com.apple.custommenu.apps\" =     (\n        \"org.vim.MacVim\"\n    );\nNSUserKeyEquivalents =     {\n        Preferences = \"@,\";\n    };. Also you can do this programmatically as in old-good-days (hehe) If you want.\nApple documentation. BTW, very few progams provide functionality to modify keybindings for menu to the user.. @jordwalke Would this plugin be MacVim-specific?. In my personal setup I wouldn't touch <D-,> keybinding as the Preferences dialog contains a few GUI- and host-specific options which don't belong to .vimrc file. I'd use something like <D-K> or <D-;> to distinguish MacVim-specific options and the rest.\nProducts from Jetbrains and Apple (Xcode as an example), and from other companies use this scheme to provide a different options which not fit to the global application options. . They have no additional preferences you can't setup in GUI. Otherwise it's normal, yes. . Additionally I don't know what is your config about if there's :options already.. I've already listed various working ways to do achieve this without changing MacVim binary and with changing the code itself. If we really want to do it programatically, main menu file doesn't need to be changed, but we need to add a very specific handler to :an command to give ability only to change one single item (title and key binding). \nPersonally, I discorage going against Apple's Human Interface Guidelines and rebind this button inside some plugin. I prefer to have alternative keybinding like <D-.> or <D-k> by default and instructions how to use  if I need a very specific key-binding.. If it overrides preferences dialog and doesn't provide to change at least the same options as well, this looks more like hijaking for me. \nIf MacVim developers will provide :set options for every single preference, and Preferences menu item opens vimrc file, I'd probably use this way of reaching my $MYVIMRC file instead of executing a command everytime to open them.. > > I'd probably use this way of reaching my $MYVIMRC file instead of executing a command everytime to open them.\n\nExecuting the command to do that is extremely simple, and can easily be given a mapping that is exactly as easy to type as .\n\nJetbrains products use <D-;>, for example. From vim perspective, it's fine if I open something like $VIMRC file, not :options or another plugin as most rc files are quite complicated to manage in fully programmatic way. Even :options doesn't write anything to it. \nAlthough, MacVim has a few more settings which can't be set through $VIMRC file and I expect to open these options, but not editing vimrc. If these options is possible to set by using:set command, welcome to conflicting settings as vimrc processed every time you open a new MacVim window.\nOnly very few applications you have to restrart them to apply given options. And MacVim have options which could be applicable right now for every single window without any exception. Changing vimrc requires sourcing it in every single window. The VS Code is one of such applications you have to restart all the time you changing almost any setting.\nAny vim-based plugin could run in MacVim won't apply all options to all its' GUI windows running at the time. This is a nature of Vim and MacVim: you can edit settings only in the running instance and those instances doesn't communicate with each other. Please, tell me if I wrong here, but it was one of the point to create NeoVim.\nTherefore, I prefer to have a different key combination as it's done in Jetbrains products. There you have global settings and project-specific settings. In IntelliJ Idea, as an example, \"one project\" means \"one window\" and you can edit global setting which would affect every single window instantly after applying them or you can edit project-related settings which would applied only to the given project/window. \nIf we speak about \"something easily to type like <D-,>\"  there're planty of keys we can use: <D-.>, <D-;>, <D-k>, etc.. > > > I'd probably use this way of reaching my $MYVIMRC file instead of executing a command everytime to open them.\n\n\nExecuting the command to do that is extremely simple, and can easily be given a mapping that is exactly as easy to type as \n\nIt's extremely simple to map from a keybinding that is not <D-,>. This feature request is the ability to map from <D-,>. One of the reasons why I would like that keybinding, is so that no matter which editor I am using, I can always use the same keybinding to edit my editor config (I have to jump around editors as part of my job).\n\nIn macOS you can define any key combination to any menu Item in any application. The methods are common and well-known. After you define anything else for Preferences, you can use it as a keybinding in MacVim. . Could you try same configuration but linked with Python3?. Acording to the source and stacktrace, this issue should be addressed to the Vim core, not to MacVim.  There was already a few issues in the core in this place and guys over that repo know what to do. . At least you need to turn on debugging while building this app and look into log files specified in the source . Yes, there were a few patches already and the latest 192 probably refer to your particular problem. @splhack is it possible to update core part of Vim and rebuild the binaries? . @lkebin could you check this issue in current MacVim (150)?. +1 . The same is happening when you open a narrow window, for example, 69x42, and then open a window with local setting set width (or height) bigger than it was. Any way to force redrwaw works, including hiding MacVim or switching an app\nBuild 149 didn't had this issue. . 1) Open a window with a random file, e.g. ~/.vim/vimrc and set some small width, like 20, next time it should open a window with the same width, you can check it by pressing Cmd-N\n2) set for some filetype specific width to use, e.g. for Python files (it doesn't matter)\n3) open file of this type, with $ vim ~/example.py or with :e ~/example.py\nNotes:\nif you don't open a file but an empty buffer on step 1, MacVim might won't save and trick won't work from command line but will with :e command in the same window\nvim\n  if has('gui_running')\n        setlocal columns=85\n    endif\nA quick demonstration\n\n. @ychin Is my way to reproduce is good enough?. @ychin I have no external monitor \nmy minimal vimrc with I able to reproduce it (build 150)\n```vim\nfun! PythonSetup()\n    setlocal ts=4 sts=4 sw=4 nu\n    setlocal colorcolumn=79\n    if has('gui_running')\n        setlocal columns=85\n    endif\nendfun\nautocmd FileType python call PythonSetup()\n```. @ychin The problem with my issue is somewhere else, it's reproducable in build 122 (earlier builds don't want to be opened on my setup ;) ) \nI'll open a separate issue. @ychin please, look into #732, it could be the source of many resizing issues. Does it reproducable on base Vim (from https://github.com/vim/vim)? \nFor me this issue should be addressed there. in file /Applications/MacVim.app/Contents/Resources/vim/gvimrc MacVim indeed loads it's colorscheme:\nvim\n\" Load the MacVim color scheme.  This can be disabled by loading another color\n\" scheme with the :colorscheme command, or by adding the line\n\"   let macvim_skip_colorscheme=1\n\" to ~/.vimrc.\nif !exists(\"macvim_skip_colorscheme\") && !exists(\"colors_name\")\n    colorscheme macvim\nendif\nI explicetly load my own colorscheme in my vimrc.. I think this issue is strongly related (if not duplicated by) #721 . Bug works on one display as well. You can read other comments as well beside +1 there's a lot of other details including workarounds.. #727 is the source of the problem\nThis ticket also duplicates #721 and #724 \n. I found that I've set the option MMUseCGLayerAlways which did this for me. This options is intended to help, but it did the opposite.. A while ago I had setting columns for python files in general, but when I've started to work with terminal it started just cut a window if it shorter. Probably, the part of the issue could be inside Vim core itself, but we should check our side first. . BTW, it could be source of a few issues related to window resizing including moving it to an another screen. set MMUseCGLayerAlways to NO hides this issue. \nin the (#557 (comment)) people recommend the opposite. The workaround is to add to your vimrc following line:\nvim\nautocmd VimResized * redraw!. There was another similar issues with GUI terminal issues like <C-c> combination which could be related. . I have the same version of MacVim and explicitly set paths to Python 3.7 from MacPorts without checking any other installations. \nThe official vim/vim setup guide asks user to set dll to dylib, not to Python app itself. and I don't know if it could also work. If this is an issue then \n```vim\nset pythonthreehome=/opt/local/Library/Frameworks/Python.framework/Versions/3.7\nset pythonthreedll=/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7.dylib\nset pythonhome=/opt/local/Library/Frameworks/Python.framework/Versions/2.7\nset pythondll=/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/libpython2.7.dylib\n\" disable Python 2 as soon as possible\npy3 1+2\npyx 1+2\n``. @kiryph On the snipped you provided, it's really overlooked and I vote to add Python paths from MacPorts as well. . You're welcome. macOS still doesn't have any Python3 preinstalled and this leads to a different handling of Python versions. Rumors said that macOS 10.14 doesn't have it as well. \nSo for basic binary installation you'll have no problem to use:pyor:pyxcommands, but it's required to install Python 3 from any other source if needed.. yes, according tostrings Vim | grep Python(I use the binary installation from github). @kiryph added comments without paths as they constant and well known for both installations. Also I added a python 2.7 from python.org installation detection. Although, I resigned to add a comment of simulteniuos loading of Python 2 and 3 as it described in:help pythonpage as this is a part of the base Vim as well as adjusting these pats. Nevertheless, you is allowed to specify paths as they're just options. . Could you test withmvim -u NONE -N ` and, please, share relevant part of MacVim which produces the error.\nPS: nice colorscheme. Could you run MacVim from terminal? It's usually spams with full error messages.\nAlternatively, you can share your vimrc and I'll try to guess the error.. I ran script below, finished till all plugins are installed and had no errors you experienced afterwards.\nI have following software versions:\n|App|version|\n|----|-------|\n|MacVim(from GitHub)| 8.1.280 (151)|\n|yarn (from MacPorts)| 1.9.4|\n|ruby (from MacPorts)| 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin16]|\nsh\nVIMRC_FILE=${1:-~/Downloads/vimrc.txt}\nVIMDIR=$HOME/.vim\nNEW_VIMDIR=\nyarn --version >/dev/null 2>&1 || sudo port install yarn   # I didn't have yarn beforehand\nif [[ -d $VIMDIR ]] then\n  NEW_VIMDIR=$HOME/.vim.`uuidgen`\n  mv $VIMDIR $NEW_VIMDIR\nfi\nmdkir $VIMDIR\ncp $VIMRC_FILE ~/.vim/vimrc\ncurl -fLo $VIMDIR/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\nmvim '+:PlugInstall'\nNote: you can run mvim '+:PlugInstall|:qa' if you're sure if all plugins will be installed correctly. PS: I have similar script for restoring my settings on a new machine.. @osenvosem Does the problem persist in your environment?. Could you check if there's some changes or some plugins weren't updated? Could you try to clean up your ~/.vim directory and create it from scratch?. I'll check this if it solves my issue as it looks pretty similar to full-screen problems. @ychin Could you add a trigger to check if column/line count has changed by setting it directly with :set command? This happening when MMUseCGLayerAlways is 1.\nOther resizing issues I've had are gone by this patch. . @ychin yes, I've just installed Mojave as I waited for many changes in macOS itself.\nI like an idea of GPU accelerated backend in general and would like to participate in the process to bring it into MacVim. \nAs per #732 and my wish\u2026\u00a0this only happeing when I set columns or lines by :set only. I've found a workaround of it: autocmd VimResized * redraw!, but I'd like to make it as an integrated solution if possible. If it's not possible to do with this PR, I'm satisfied with your solution and put my LGTM on it. . I didn't notice this during normal scrolling on 100000 lines file where each line has a few ligatures on it.\nHowever, this script indeed does have different execution times. With cursorline it runs very-very-very fast and smooth. My font is Fira\\ Code:h12 and I have 54 lines on a screen\nCould ligature function just use redraw_for_cursorline instead of having a separate one?. Do you mean a dark theme for toolbar?. > > but in older OS we may still want to have subpixel font rendering to be consistent with other parts of the OS.\n\nI think supporting older macOS is mandatory, but I'm not sure how compatible that is with using Metal.\n\nMetal first appeared in macOS El Capitan, but not every graphics card supports it. So we could have current implementation as a fallback if Metal is failed to load or it set in settings before Mojave and Metal backend only on macOS Mojave+.. Could you test it with mvim -u NONE -N?. And please, tell a bit more about your environment like OS version. . mvim is a basic command line tool to open MacVim from a command line. And you guessed right, these options tell MacVim not to use your personal settings. \nThe behavior is quite strange. Please, check a fresh download from github, as well as your system preferences key bindings without your personal settings.\nIf issue has gone for default settings, please, check your personal settings if there's any key bindings are set. Combinations to search for are <D-C> and <D-V> (D means cmd in this case)\nPS: In the past I had a similar issue with google chrome canary and only full settings cleanup helped me. does defaults read org.vim.MacVim look suspicious? \nMy MacVim defaults are:\n{\n    MMAutosaveColumns = 84;\n    MMAutosaveRows = 57;\n    MMCurrentPreferencePane = Advanced;\n    MMTopLeftPoint = \"{789, 877}\";\n    MMUseCGLayerAlways = 1;\n    NSFontPanelAttributes = \"1, 4\";\n    NSNavLastRootDirectory = \"~\";\n    NSNavPanelExpandedSizeForOpenMode = \"{712, 448}\";\n    NSNavPanelExpandedSizeForSaveMode = \"{712, 448}\";\n    NSQuotedKeystrokeBinding = \"\";\n    NSRepeatCountBinding = \"\";\n    \"NSWindow Frame NSFontPanel\" = \"19 226 592 247 0 0 1440 877 \";\n    \"NSWindow Frame SUStatusFrame\" = \"520 572 400 129 0 0 1440 877 \";\n    \"NSWindow Frame SUUpdateAlert\" = \"410 374 620 392 0 0 1440 877 \";\n    SUAutomaticallyUpdate = 1;\n    SUCheckAtStartup = 1;\n    SUEnableAutomaticChecks = 1;\n    SUHasLaunchedBefore = 1;\n    SULastCheckTime = \"2018-10-11 09:33:57 +0000\";\n    SUSendProfileInfo = 0;\n}. defaults (command) in macOS is a some kind of registry in Windows, . you need to run this command in terminal: defaults read org.vim.MacVim. I call redrawexplicitly on every resize. I know, this is a workaround, and don't solve the issue itself.\nautocmd FocusLost * redraw!\nautocmd VimResized * redraw!. You look into a very old and outdated documentation. Please, visit https://github.com/vim/vim project where build process described much better. MacVim adds only GUI and there's nothing changed with python.. Additionally, you can download a fresh build, setup a few variables if paths are not standard and try to use it.\nRecent versions of Python 2.7 and Python 3.7 works well with MacVim (please, consult with a compatibility notes), as well as vitrual environment. \nHowever, I've never tried to use conda and can't say if it's compatible with an implementation from python.org on a native library level.. The story behind enabling only one python version and not both is quite simple (and it's partially described in :help python page)\nBoth libraries export almost the same API. So statically linking both is impossible from the beginning.\nWith dynamic linking you either load one and use easy mapping of exported symbols for almost the same code of :py and py3 commands, or have a headache to work with library handles and calling all functions in exotic way all the time. The second method provides you ability to use both dynamically loaded libraries simultatiously, but it's hard to keep implementation quality on a high level. Vim developers have chosen the easiest one and in most cases you don't really need both Python versions in the same Vim process. . I use in my setup Python3 by default, massively use virtual environments and the latest versions of most libraries from Python2 virtual environments is python3 compatible to have YCM working well. . The latest build of MacVim (151) from Github doesn't crash for me. . If you have better implementation of python bridge for Vim, you should propose your patch to Vim upstream.. > So when you run the little test above, all 4 options are working without a crash?\nyes, all 4 options works for me without a crash, it sais that one version is blocked because another version is activated. It's fine as I use vim plugins built against Python 3. Syntax compatibilities allow me to edit Python 2 code without changing tools like YCM, \u2026 Some libraries even started to drop support of Python 2.\nCurrently, I don't see any reason to have Python2 in ViM at all. July of 2020 is very soon.\n\nIs there an example about this third-party-library incompatibility?\n\nPotential points of incompatibility include all native modules and packages like sciencific packages,  could be ctypes/cffi or any libraries with their own JIT. They could depend on a different versions of third-party libaries which could be incompatible with each other. As an alternative example of incompatibility, system version of a library is often differ than a version installed with third-party installation procedure (including manual installation).\n\nSo no references to the libpython2.7 file\n\nThis is about how Python works, please, look documentation for it.. Thank you for answers :)\nAs per ./configure --help you need to add two options listed below for each version of Python. One enables interpreter code and the second allows you to hardcode the default path of Python interpreter.\n\nfor Python 2: --enable-pythoninterp=dynamic and --with-python-command=/path/to/python2.7\nFor Python 3: --enable-python3interp=dynamic and --with-python3-command=/path/to/python3.x\n\nthis this will both enable Python2 and Python3 as dynamic. \nAdditionally, if you're user of MacPorts, change for vimrc bundled with MacVim paths were integrated after build 151 and will be rolled out with the next release.. I'm very neutral of implementation of this feature as I open files either from command line, with :e, or dragging a file on an icon in Dock (the same is for Windows and GTK). The same with saving files. \nTechnically speaking vim able to edit any files including binary with great help of xxd. Syntax highlighting and additional features are not available for all of them, obviously. \n. I use a different font, Fira Code Light:h12. I've tried Fura Code, but they broke many important things for me. . I have following image on my macOS Sierra (10.12). I use the same font for both terminal and GUI MacVim\nIn GUI:\n\nIn terminal:\n. Have you tried this font?. Good luck with Mojave (looking for Mojave-related issues in MacVim). It is probable that system update found a higher version of Ruby and removed 2.0.0 which is included into the OS itself (and this update too). \nYou could try:\n\nDelete Ruby installed by Homebrew and reinstall the update\nInstall ruby 2.0.0 from homebrew if available\nRebuild MacVim \n\nAnd hope that no system function is broken with last two options\nI have following gems installed with the system Ruby (no Homebrew Ruby is installed):\nactivesupport (4.2.6)\nbigdecimal (1.2.0)\nCFPropertyList (2.2.8)\nclaide (1.0.0.beta.3, 0.9.1)\ncolored (1.2)\nescape (0.0.4)\nfourflusher (0.3.0)\nfuzzy_match (2.0.4)\ngit (1.2.9.1)\ni18n (0.7.0)\nio-console (0.4.2)\njson (1.7.7)\nlibxml-ruby (2.6.0)\nliquid (3.0.6)\nminitest (5.8.4, 4.3.2)\nmolinillo (0.4.4)\nnap (1.1.0)\nnetrc (0.7.8)\nnokogiri (1.5.6)\npsych (2.0.0)\nrake (0.9.6)\nrdoc (4.0.0)\nsqlite3 (1.3.7)\nterminal-table (1.4.5)\ntest-unit (2.0.0.0)\nthread_safe (0.3.5)\ntzinfo (1.2.2)\nxcodeproj (1.0.0.beta.4). I see menu title \"Window.Select Next Tab\", not \"Show\" in build 151. Could it be a solution in your case?. additionally, with some plugins like better-whitespace, Safari's search string will be last search to clear whitespaces.. Also there's a lot of MacVim-specific part of documentation which is also was never translated as well. Menu translation is the smallest part of work required to fully complete this task . Macvim from GitHub is compiled with +ruby/dyn configure option, thus you can set rubydll=... to use Ruby version you need.. Patch 8.0.0163 is already in MacVim. It seems, you need to open an issue with ViM itself as it looks like it needs to be fixed there.. Does it well vim (not MacVim) from homebrew to blame MacVim?. I compare formula from macvim-dev/macvim-homebrew and this one and see that the first is quite outdated. Could you try formula from the homebrew-core repo?. I suppose most people will install MacVim with formula from homebrew core, rather than from macvim-dev. . does modification of /etc/paths helps you? This file doesn't accept any environment variables during path building, but it's quite helpful for me.. @ychin yes, I'm sure about this as I've never seen it and the previous update was a while ago. But I have this option set. \nCould you expose it to settings to make it controllable at any time?. Thank you. @kika I have Fira Code Light:12 set and have no such problem. Could you try this font to check if you can reproduce? \n@zrzka it was all the time and I somewhat agree with that as I see it as a minor problem.. If this would be done, the same change could be propagaded to MacPorts which just strips out Sparkle from source. The same procedure is done for almost all software included as well.\nNevertheless, a switch to exclude Sparkle will be a better solution, and I hope other applications will use the same. . There's a link to a patch for HandBrake to disable Sparkle. It's pretty common to search for such strings to exclude (as Sparkle itself is common)\nhttps://github.com/macports/macports-ports/blob/master/multimedia/HandBrake/files/0009-MP-MacGui-Disable-Sparkle.patch. The same patch for MacVim looks like in the following patch\nhttps://github.com/macports/macports-ports/blob/master/editors/MacVim/files/patch-remove-sparkle.diff. GUI has it's own terminal emulator, so you can't set it. If you run MacVim in Terminal, term option working as you expect.. It's better to use useLigatures variable here as value could vary. . ",
    "jocelynmallon": ":thumbsup:\nAbsolutely feel free to include any/all of the pre-made icons on the wiki; @jasonlong and all you guys did the hard work in the first place.\n. ",
    "pityonline": "Well, I don't like the NEW icon, it's kind of 'weak'.\n\n. @cseelus Of course I can customize an icon if I spend some time on it, but I really don't think a USER should waste time on an ugly icon.\n. ",
    "kzahedi": "Aren't we all \"just\" users of (mac)vim? Last I checked, there was not customer service, because there are no customers. BTW, I like to new icon.\n. I have to admit that it really isn't easy to find the new macvim repository of you start with Google. Even the GitHub search shows the old repository first. You need to know the username in order to find macvim, which you can't expect everyone to remember.\nIt would be very helpful to have some additional pointers to the new repository. \nCheers,\nKeyan\n\nIncludes iPhone typos\n\nOn 28.06.2015, at 17:43, Josh Petrie notifications@github.com wrote:\nSeems to me like using GitHub pages for this (via a repository in the macvim-dev organization) would be straightforward enough.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "tko": "The relative priorities seem wrong to me in the new script; if you have MacVim.app both in ~/Applications and /Applications or any other case user vs. system directory conflict the user installation should have precedence IMO.\n. ",
    "jasonseney": "Haven't tested this yet, but wanted to drop a note that I can replicate this issue reliably under the same circumstances mentioned by @jpetrie. Thank you for tracking this down and putting out the pull request, hope we can get some :eyes: on this!\n. Confirmed that this this works for me after pulling down the branch and building/testing. Looking forward to the fix getting in, thanks again!\n. I do see a bit of a flash as the window is opening, although for me it's not terribly annoying. I've attached a screenshot and GIF of the issue. @chdiza is this what you're seeing?\n\n\n. ",
    "reshleman": "This has been driving me crazy, and I hadn't been able to identify the secondary display as a cause until I found this thread (so thanks, @jpetrie!). I can also replicate this, given the information here.\n(FWIW, I've also tried manually setting the window size in .gvimrc with, i.e.,  set lines=40 columns=80 without success.)\nIf I have some time today, I'll try to pull this patch down today and test it out.\n. > If I have some time today, I'll try to pull this patch down today and test it out.\nThis patch does indeed resolve the issue for me. I haven't encountered any other problems with this change, but I'll report back here if I notice anything amiss.\nThanks, @jpetrie!\n. ",
    "jpetrie": "Thanks for the heads-up. I'll take a look this evening and see if I can track it down.\n. That looks super gross. :(\nIt generates an interesting pattern of correct and incorrect window background, though.\nProbably since my change prevents the resize logic from executing that early, until the window is fully set up, it's also preventing the preparation of the window's background colors based on the Vim backend. My hunch is that those two updates may need to be divorced from eachother somewhat to allow them to happen independently, although I might have to go back to the drawing board with how I implemented the initial fix.\n. The windowDidResize case where !windowPresented is true executes twice. The first comes from the setFrameTopLeftPoint call at MMAppController.m:798; that's the one that's bad and which we want to avoid. The second one comes from MMWindowController.m:1340 and appears to be the one that we need to have executed in order to correctly get the opening frame set correctly (and thus have correct background colors).\nSince the crux of the issue is moving a window between monitors, I tried something a bit more invasive: adding a method to the window controller to do the move. This can track sufficient state to skip the resize code if we're actually intending only to move the window.\nThis works; both the original problem and the one @chdiza reported are gone. But it's a bit ugly. There's already a \"setTopLeft\" in the window controller (can't be used in this instance however), and the method itself is a bit \"dangerous\" in the sense that if somebody ever uses it to move a window without moving that window to a different monitor, the next resize event will be skipped. I'm also accepting suggestions for a sane name for such an abomination. \"moveWindowAcrossScreens\" is what I've currently got.\n. This appears to have been closed by the released on March 16.\n. Has anybody seen this recently? The original crash report suggests something wrong with the window's document icon cell (which appears next to the window title). There's not a lot to go on there as the stack is mostly Cocoa infrastructure. Further crash reports or reproduction scenarios would be helpful.\n. This appears to be the same issue as reported in PR #8, which has a proposed fix.\n. This looks like a duplicate of issue #12.\n. I'm going to close this as it sounds like it might be a duplicate of https://github.com/macvim-dev/macvim/issues/32 and if it isn't there's basically no reproduction steps or detail in the bug itself.\n. I don't see this in README_mac.txt or the main repository README; I'm fairly certainly whatever it was referring to is outdated.\n. FWIW I could not reproduce this as of snapshot 76.\n. I cannot reproduce this as of snapshot 76. I tried copy-pasting the text \"f\u00fcb\u00f6r\" (as well as writing it manually) and both displayed fine. I used my usual RC files as well as testing with mvim -u NONE. \nAre you setting a specific guifont that might be contributing to the problem? Or copying from a specific PDF or something in Preview that might be encoding the umlauts differently?\n. Fixed by e878fe5a3a31ccd2d0b80cc4523d49837d0b0d60. \n. Copying and pasting the character in the above report, even though it looks like its rendering incorrectly, will reproduce this. Examining the crash in Console.app suggests some kind of stack overflow due to drawRecurse going on and on forever.\nTrapping the crash in the debugger shows that the character appears to be U+d8ae, which is not a valid Unicode character.\n. It actually looks like this invalid character is a surrogate pair (which still ends up referring to a unassigned supplementary plane). U+d8ae and U+dfe9. This is relevant, as the length of the chars array passed to recurseDraw (as determined by CFStringGetLength in batchDrawData) is 2.\nWhat ends up happening is that CTFontGetGlyphsForCharacters cannot convert the 2-character string to glyphs; both glyph array entries are 0. That causes recurseDraw to enter the \"skip past consecutive non-drawable characters\" loop, where it tries skip past two characters and calls lookupFont to find a fallback that can render the invalid characters.\nOn the very first call to lookupFont the cache will be empty, so it will simply ask CoreText for a new font. However, when it does so it asks for a font based only on the first character in the string (this makes sense in a way, since the recursive nature of the draw loop should handle subsequent invalid characters exactly the same way). This ends up producing a \"LastResort\" font that can render that first character (and indeed, CTFontGetGlyphsForCharacters at that point for that single-character string returns true). \nHowever, the recursive call to recurseDraw tries to draw the entire 2-character string again, now that a \"fallback\" font has been added to the cache. That fallback font cannot convert the 2-character string to glyphs, and so the process repeats and the code calls itself forever.\nThe code, as written, seems to intend to abort rendering if a fallback font can't be found. By passing a length to lookupFont and then using that when requesting a fallback, lookupFont can return nil if the fallback still can't turn the string into glyphs and thus avoid the endless recursion.\nIt is also possible to restructure the recurseDraw loop a little to have it try to covert the invalid string one character at a time. This results in the display of some very obvious \"invalid character\" in MacVim.\nBoth approaches cause column counting weirdness, although they avoid the crash. The rendering (or the space left by the non-rendered) character will count as four columns, although visually will display as two. This seems undesirable.\nI've been able to achieve both of the above options with local code changes. A third idea, which I haven't prototyped yet, would be to replace the non-rendering characters with U+FFFD, the \"replacement character\" code point. This would hopefully render better.\nAre there any strong feelings for choosing one of these solutions over the other? If not I'll probably opt for the simplest of the three after I prototype the last one and send a PR for that.\n(EDIT: For what it's worth, regular vim in the Terminal will display this character as two empty boxes and will also exhibit the misaligned column issue. On Windows, gvim replaces the character with two ?? and functions more or less normally.)\n. Fixed by https://github.com/macvim-dev/macvim/commit/e878fe5a3a31ccd2d0b80cc4523d49837d0b0d60.\n. For what it's worth, I can still reproduce this as well as of snapshot 76:\n- Copy this character: \ud835\udc9c (the Unicode character referenced in the original post; hopefully Github preserves it).\n- Launch MacVim, paste the character inside a set of parentheses and type some text after (so you have a line like \"(\ud835\udc9c) hello.\" Make sure there's a line below this text.\n- Exit insert mode, move the cursor to the start of the line. Move left and right between the first and second lines and note how the display of the line shifts, sometimes visually truncating the last character in the line.\n. I can still see it by doing the following:\n- Make sure the Core Text renderer is enabled.\n- Launch MacVim or otherwise open a new, empty buffer.\n- Enter insert mode.\n- Paste the text inside quotes: \" (\ud835\udc9c) test\" (that's space, open-paren, \ud835\udc9c, close paren, space, 'test')\n- Exit insert mode\n- Use h and l to scrub the cursor along the line, particular to the start of the line, observe the rendering artifacts.\n. Yeah, it's fixed in 81+.\n. I've been looking into this.\nIt happens only at certain window sizes, and appears like it might be related to the \"lazy\" resizing done during a live resize. In particular the flash tends to happen because the underlying view transitions through non-column multiples of a width even though it never visually appears to do so normally, and at certain widths the rendering is scrambled. The appearance is consistent with an incorrect stride on a bitmap, which suggests mishandling of some Cocoa rendering somewhere.\nIt only happens when resizing horizontally as far as I've seen. The problem is somewhere in the Core Text renderer; if you disable the Core Text renderer in MacVim's preferences window, the problem appears to go away.\nDisabling columwise resize stepping makes the problem a lot easier to reproduce and more importantly allows you to hold the screen in that position indefinitely, which is useful for debugging.\n. This is probably because \u2318V just calls paste#Paste() (defined in the vim runtime, under autoload). The function executes \"+gP to paste text, but then executes normal! i, at which point . will repeat that \"last change\" of entering insert mode and doing nothing.\nIs this really a MacVim-specific bug? Seems like this would happen in gvim on Windows as well, since paste.vim is part of the standard vim distribution.\nEDIT: Confirmed, this reproduces in gVim as well.\n. This should be reported against Vim itself, since that's where the runtime file in question comes from and MacVim isn't modifying it.\n. @douglasdrumond This can probably get closed since #56 was merged.\n. Closed in #56.\n. I can't reproduce this (snapshot 76); do you have the rest of the crash from Console.app handy?\n. If it's an actual crash (as it sounds like), there should be an entry under \"User Diagnostic Reports\" in the left panel of Console.app (use the \"Show Log Lists\" button on the toolbar if there is no left panel). There will be an entry like \"MacVim__.crash\" with, among other things, a stack backtrace under the header \"Thread 0 Crashed:\"\nIf it's not there I suppose it's possible some OS-level settings can prevent the storage of these reports. :( Can you get the stack trace by running your local build under a debugger?\nMy understanding of that message is that it basically shouldn't apply to anything that I know MacVim to be doing (using Auto Layout somewhere and not calling [super layout] from an override of layout in a subclass). A quick poke through the source shows MacVim isn't explicitly doing anything with NSScrollView subclasses that I can see, and I'd be surprised if it's using Auto Layout anywhere (since as far I recall, Auto Layout is the new hot thing). I suspect the message is being generated by calls the Font Manager itself makes.\n(I can't reproduce the message yet, nor the crash, even with -u NONE -U NONE -N and windowing, native fullscreen, and custom fullscreen mode; I don't have the commit that fixes the fullscreen problem yet, so I'll try pulling that in tomorrow and seeing if I can reproduce with that).\n. Ah, I didn't realize. \nSo, most of the likely code exists in the actual vim backend here (which I'm not really great at debugging). I did an experiment and forced the vim process to terminate and that will cause MacVim to quietly close without actually logging a crash report (so instead of looking for a crash for \"MacVim\" you might try looking for \"Vim\"). My theory now is that it's the backend vim process that crashes, and MacVim just decides to quit.\n:set guifont=* should be functionally identical to :macaction orderFrontFontPanel:. That in turn is also mapped to the \"Edit > Font > Show Fonts\" menu item. So far I don't see any obvious code that might cause vim to crash here... but there's a lot of ugly pointer passing going on. I'd be curious to know:\n- if :macaction orderFrontFontPanel: has the same effect for you,\n- if showing the panel from the \"Show Fonts\" menu has the same effect for you,\n- and if you're up for it, if you can bisect your vimrc and/or gvimrc to narrow down which options then cause :set guifont=* to crash (or if you can otherwise make your RC files accessible and I'll try running with them).\n. I don't think it will - I left the old calls in place in the negative branches of the availability macro branches. I don't have any way to test building on Tiger, though, so it's possible I've made a mistake.\nEDIT: I did make a mistake, as you discovered with issue #40. I am pretty sure I know how to fix it though.\n. In the related pull request I noted:\n\nThis will let somebody build a binary against older deployment targets if desired, but they'll still need the latest SDK (to see the appropriate availability macros). Is this sufficient or should I also take steps to make sure I check the SDK version somehow before doing the availability check? I don't really see this being done elsewhere, but MacVim.h does have a redefinition of the OS version macros up to 10.7; should I add the ones through 10.10 if I'm going to be using them?\n\nI guess this is probably the consequence of the decision to merge the pull without redefining those additional availability macro definitions (MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_10 will be true because MAC_OS_X_VERSION_10_10 isn't defined in Leopard and the C preprocessor considers identifiers that are not defined macros within the context of an #if to be equivalent to 0 if -Wundef isn't set).\nThis will also break pull #38, which you were worried about. Explicitly redefining MAC_OS_X_VERSION_10_10 with appropriate values from the real AvailabilityMacros.h header should fix it, I believe. I'll add that change to #38.\n. By removing NSTitledWindowMask (0x1), you've essentially set NSBorderlessWindowMask (0x0); none of the other values you are still OR'ing into the style masks set the low bit of the value to 1.\nA window with NSBorderlessWindowMask can't become key or main, and thus can't get keyboard input (that's why you hear the bells when you type). The NSWindow needs to return YES from canBecomeMainWindow and/or canBecomeKeyWindow to change this behavior.\nFortunately MacVim already has a window subclass (MMWindow), so you should be able to fix this by adding one or both of:\n```\n-(BOOL) canBecomeMainWindow {\n    return YES;\n}\n-(BOOL) canBecomeMainWindow {\n    return YES;\n}\n```\nto MMWindow.m. I think (I haven't tested it).\nI'm not sure whether or not supporting this is something MacVim would want (and if so, how to expose the preference), that's probably for @douglasdrumond to decide.\n. #74 got us up-to-date.\n. Well, if @splhack is correct (and I don't have any reason to believe he's not), this should be as simple as doing git remote add vim git@github.com:vim/vim.git (once) and then fetching from vim and merging to our master:\ngit fetch vim\ngit merge vim/master\nUntil the vim repository gets ahead of us again, I can't test this locally, but it should work as far as I know. Once I know it does I'll add the relevant documentation to the wiki someplace.\n. @splhack Yes, it seemed to work fine locally for me.\n. Seems to me like using GitHub pages for this (via a repository in the macvim-dev organization) would be straightforward enough.\n. I'll try to yank this into my local build and run some tests on it tonight.\n. I noticed a couple things:\n- you need a font that actually supports ligatures (this is obvious in hindsight, but as I didn't have one installed I thought I'd compiled the wrong branch, initially); it may be worth noting this in the help text that shows up below the checkbox?\n- with the ligature option on, using a non-ligature-supporting font (say, Menlo), typing sometimes causes the text to \"swim\" a pixel or so horizontally. This is particularly noticeable typing a ! or something, as in \"hello world! \" (note trailing space). It isn't terribly distracting, but worth noting.\n- the ligature option seems to become bound to a window when that window is open; toggling it has no effect on open windows.\n- with the ligature option on, using a ligature font, typing a ligature != converted as expected, but afterwards I hit space to continue typing and this artifact appeared (only the first \"half\" of the ligature character is rendered?):\n\n- with ligatures, if the cursor passed over them, they would revert to normal characters. My cursor is set to a block, which might impact the behavior. redraw! restores them.\nThe last issue is, I feel, the most problematic. I'd say the artifacts are also a bit of an issue, and the swimming may be (it's not clear to me how noticeable it would be to something who wasn't actively looking for something to behave different with the ligatures on, like I was).\nI installed and used Fira Code as a ligature font to test with. May or may not have something to do with my results.\n. @Shirk Your GIF shows the ligatures converting to their component glyphs if the cursor is on the line containing the ligature (and reverting back to ligatures when the cursor moves off), which seems reasonable to me... but that's not the behavior I'm seeing. I'm seeing the ligatures stay ligatures until the cursor is actually on top of one of the two characters that make up the ligature, at which point they switch to component glyphs and never switch back to ligatures until I execute :redraw!, which feels like a bug. \nWhat's your GUI font size at? I wonder if that's related since it will impact the glyph sizing. I'll see if I can track down why this might be happening, I've done some work in recurseDraw before so I sortof know my way around it.\n. I think I've determined the \"shimmering\" is due to the way ligatureGlyphsForChars determines glyph positions; the CoreText API it calls produces accurate, floating-point positions which likely account for kerning (and/or other things, as using kCTKernAttributeName to disable kerning doesn't fix the issue). Basically the presence or absence of other glyphs around any given glyph slightly adjust the spacing. \nPost-processing the positions after CTRunGetPositions (to round them up to the next integer value) stops the shimmering. So, however, does simply not calling CTRunGetPositions. I see you added this in a follow-up commit, can you describe the scenario that led to your needing to do this? I think I can fix the shimmering but I'm not sure if it will just recreate the bug you were trying to avoid.\n\nThe issue with the glyphs sometimes \"reverting\" to non-ligature form is because MacVim only redraws a portion of a line via a row/column location and length indication in many cases. When this happens, the surrounding glyphs that give a ligature context aren't always included in the character range given to recurseDraw and so no ligature is produced.\nA naive approach would be to always redraw an entire line in ligature mode to ensure the full context is always there. This is problematic, however, because the information needed to adjust the draw to the full line isn't available at the point the draw begins (I don't think). It's possible we can adjust the call site that issues the messages, but this comes from the Mac-specific portion of vim itself, I believe. Even if we do that, the cursor rendering appears to always be done as a single character and that would need to change as well, which may be tricky to work in.\nHmm.\n. As far as I am aware the only way to determine if a glyph is a ligature involves inspecting the hinting tables for the font itself, and I don't think Cocoa has an API to do so. So I'm not inclined to suggest going down that path.\nNot all ligatures are \"double-wide;\" fi and fl ligatures, for example, tend not to be, but I don't think there is a good way to make such ligatures work in a monospaced context, so the guidance should probably be to not use fonts that include glyphs for those ligatures.\nThe simplest solution to the positioning issue seems to be to post-process the positions and round them up to the next integer value or the next multiple of the font character width (used in the original position computation), whichever looks better. \nMMBackend.m is responsible for issuing the draw messages (for example, one of the problematic messages is of type DrawStringDrawType). I believe a solution to the redraw problems would be to pass along extra information when ligatures are enabled which contains the entire text of the row in question. This would let ligatures be mapped correctly, and then drawn individually per the original data in the message.\n. This is interesting, because MacVim does realize this and adjust the window position. It happens in MMAppController.m:764 or so (in windowControllerWillOpen:). If the point extracted from NSUserDefaults is non-zero, MacVim attempts to find the screen containing the given point. If none is found, it fits the frame of the window to the current screen.\nI can't reproduce this by forcing MMTopLeftPoint to be what your example shows, or otherwise obviously off my screen (some coordinate at like 90,000) or something. I also can't reproduce it when I repeat the steps you give (use external monitor, quit MacVim, disconnect, launch MacVim).\nDoes it reproduce reliably for you? Does it reproduce reliably if you run MacVim without loading your own .vimrc and plugins (mvim -u NONE)?\nA quick bit of poking around for information about the error message on the top of the stack trace suggests it's a low-level thing caused, potentially, by starving the window manager for window resources. When this happens are you doing a lot of other stuff with other applications that have a ton of windows open? Seems like it would be a really difficult limit to hit unless some application was somehow leaking them in the background. Or maybe MacVim is?\n. > I can't figure out where that list is coming from:\nIt comes from the OS I believe; you likely have it configured to \"remember the last N most-recently-used documents.\" \nMacVim uses this or this to set up window positions. It would be interesting to know what decision path the latter is taking, since I've been unable to reproduce this (even on El Capitan) myself.\n. :+1: \n. The Leopard build issue is due to the for loop in https://github.com/macvim-dev/macvim/commit/6824350c203116e5505e3bc6b1015a6fcd0024eb not being written in the C89 style (index declared outside the body). PR #70 addresses this.\nThe Tiger build failure comes from https://github.com/macvim-dev/macvim/commit/9e2a5437a01f7ecce816af3c188216c8124c3e55 (transparent window support), which pulled in the \"CGSInternal\" source files, which have headers that use AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER, which is not defined in the Tiger SDK (Tiger is 10.4).\nThat entire feature will need to be #ifdef-guarded with checks like MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_5 in order to support compilation on older SDKs. Alternatively you'd have to undefine FEAT_TRANSPARENCY. Probably all of the places that check FEAT_TRANSPARENCY in the commit @rhendric made need to also check the OSX version, as well any attempts to #include the CSG headers.\n. Fixed by https://github.com/rhendric/macvim/commit/a02a24b75109936f1431c0133a5a26c5d4e4e58b.\n. From what I can tell, this makes MacVim ignore the OS settings for double-click threshold, which may be undesirable for some users. If so, I'd expect this kind of behavioral change to be toggled via an option, rather than replace the existing behavior wholesale.\n. I definitely think this needs preference toggle (and should default to off to preserve existing behavior). There's examples of adding these sorts of preferences in the recent ligature pull request you could base the work off of.\n. Hm, the mousetime documentation does make it sound like mousetime should apply in a GUI context. \nBut at the same time, there's a lot of (I would argue correct) divergence between vim, gvim and MacVim when it comes to GUI-related options; much of that divergence is based on things that the Windows and Mac GUIs don't do or which aren't idiomatic or sensible in the context of being a reasonably well-behaved and convention-conforming application. And for the GUI variants like gVim and MacVim I'd argue that being \"well behaved\" in the appropriate OS context is an important feature.\nI don't see what's so special about vim that it gets to dictate an override to my double-click speed; I've always been annoyed by gVim's adherence to mousetime with no way to disable it. So one way or another I feel very strongly that MacVim should allow fallback to the OS double-click interval somehow.\nI feel less strongly that such fallback should be the default (although MacVim already jumps through a lot of engineering hoops to try to preserve previously-existing behavior, so I'd say there is convention in place for doing so).\nI feel even less strongly about how the fallback should be enabled. It's true MacVim has a growing number of preference toggles that exist outside the realm of the vimrc/gvimrc and that is somewhat concerning. It would probably be better if mouse click behavior could be entirely configured in one's vimrc. I don't think @djjcast's suggestion of \"use the OS default if mousetime is 500\" is a great idea, but falling back to the previous behavior if mousetime is negative might be. The documentation doesn't say what effect a negative mousetime has, so it's possibly at some point it might change to have meaning, but that seems unlikely.\nAnother option would be to look at how the antialias option is plumbed through, as that appears to be one of the few OS X-only options you can set in vim.\n. What did it used to do (or rather what do you expect it to do)? Do you happen to remember what the last snapshot number was for the instances you saw it working the way you expect?\nThere was a change to mvim a little while ago, as far as I recall it just reordered the search priority for the application though. Beyond that it hasn't changed much since 2008. Which OS version are you on now?\n. Well, nothing really for mvim, which is just a shell script. There's this you could enable for MacVim proper.\nI feel like this behavior (which I can't reproduce on 10.11) is probably related to some notification the app is getting when opening the new window, since it seems unlikely to actually be in the mvim script itself.\n. Seems reasonable; I updated the page to note that the CC=clang bit is only needed on certain older OS versions.\n. +1\nThis looks good to me. I still see some status bar redraw issues, but they are exceedingly minor artifacts compared to the unusable mess split view used to be, so this is awesome.\n. I'm pretty sure it's not vim correctly handling dictation, but Terminal.app. I'll see if I can reproduce this and poke around tonight.\n. I can't reproduce it except in normal mode, which sort of makes sense. You can't enter text in normal mode, I wouldn't expect you to be able to dictate text in normal mode either. I'd argue the bug (or at least, a bug) is that it works at all in normal mode.\nI'm not sure what we can do to fix it in either direction though. Dictation is not implemented by MacVim, it's implemented entirely by the OS and we get no real hooks into it.\nAs far as I can tell, what happens is that the OS gets the dictated text to any NSTextInput-conforming NSView though the IME events, because those support this notion of marked or (what appears to me) \"pending\" text which can substantially transform as it appended to. This is useful for many languages with complex character sets like Japanese, because a user can be typing out a word in a simpler set (like hiragana) and the OS will convert it into a single kanji, or similar.\nDictation's output is refined as you speak, so it makes sense to leverage the same system. Unfortunately I don't know of way for us to reasonably tell the IME events for regular input attempts and dictation apart, and I assume we'd still want regular keyboard inputs in IME modes to still trigger normal mode commands?\nWorse, as implemented now, dictation causes the IME events to fire when the text view isn't really expecting them, so it munges around in some state that probably is unexpected and has a tendency (from my brief tests) to just completely overwrite the same line over and over or cause rendering artifacts and so on.\nI never use input methods other than boring old English so I'm probably not the best person to determine the appropriate behavior here.\n(EDIT: I was finally able to reproduce this in insert mode; I'm not super clear why it finally happened, it may have been due to how I was pausing the app in the debugger to try and examine what's going on?)\n. MacVim is just handling the \"insert this text\" and \"abandon this IME conversion session\" messages the OS sends it. It just doesn't seem to expect to get those messages for anything but actual IME text input, and must have some assumptions built into its handling somewhere that don't hold for when the events are sent as a result of dictation. :\\\n. I don't quite understand it either, it's not an area I'm very familiar with.\nBut no, MacVim isn't the one doing the \"listening,\" so we can't make it \"keep listening.\" All we get are calls from the OS saying \"do this now.\" We should be handling those events better (which probably means \"more correctly\")... I'm just not sure how yet.\n. One other (small) reason to consider doing this I guess is that forked repositories are not searchable which is a bit annoying.\n. FWIW, I am going to email GitHub and request that we unfork the repository today.\nIt's very annoying not being able to search it, especially as I do a lot of evaluation of issues and PRs that way when I don't have a Mac in front of me.\n. I haven't actually received a response from the GitHub support team, but they appear to have processed the ticket and disconnected MacVim from the old fork network, so there we go.\n. @seandenigris Good idea.\n. Travis CI supports VMs for older SDK versions, but only down to OS X 10.9 (afaik). I wonder if there is some other service or some other way for us to more easily test whether or not we're still building on older SDKs than making @chdiza suffer through it every time?\n. I do feel like this bears some investigation, although I'm not sure how to go about it as I don't have the capability to try to reproduce the scenario you're describing.\nThe MacVim project doesn't set the deployment target currently. That means Xcode should use the value of the base SDK (see here). I think this is what we want: you specify which base SDK you want to use to build MacVim, and that controls which OS feature version is checked by the preprocessor stuff. I don't think we want to explicitly set a deployment target in the project file, because then you'll need to change it every time you want to build for older OS versions).\nThe Xcode environment variable for the base SDK is SDKROOT. It's possible you need to set that on the command line (via a flag or env var) prior to building?\n(The .xcodeproj does need to be updated for other reasons, but I've been holding off because I don't know how they will impact the ability to build for and under old OS versions.)\n. > It has never before been necessary for a user to manually do this\nRight, this is something that changed slightly in Xcode 7.1 I believe.\nTry setting the Deployment Target in the .xcodeproj to as old as you can, then (or at least as old as Tiger?). That might be an option; it doesn't seem to cause anything insurmountable for building on newer platforms, except for a few link warnings we'd need to address, although I haven't investigated thoroughly.\nOn the chance that it might matter (I suspect it will not), I pushed a commit to a branch that upgrades the Xcode project as recommended. Nothing that changed seemed relevant to this scenario though.\n. I wonder if we should just bite the bullet and create distinct release branches for each major OS revision.\n. > I was thinking that, under the macvim-dev organization, we can have a fork dedicated to Tiger/Leopard. This fork would basically leave src/macvim untouched, but bring in Vim updates. At first I thought, \"why not just a separate git branch for Tiger/Leo?\", but then it occurred to me that we don't want to in effect require git in order for someone on Tiger or Leo to build MacVim.\nYou need git to clone the repository, unless you download the .zip from GitHub. But if you do that, you can specifically download the .zip of a desired branch (for example a hypothetical release-10.5 branch). \nYou also can't fork the same project twice in the same organization (if you try to fork macvim under macvim-dev, GitHub will refuse), which means integration of bug fixes to common code would be more involved and the two repositories wouldn't really be connected in any way meaningfully visible to the source control system.\nI feel like branches would be the better option, but you're right it's probably worth a more involved discussion of the pros and cons (and there are cons) in a separate issue.\n\nOut of curiosity, why does it need to be updated? Obviously, it COULD be updated, but are we building a defective MacVim on newer OSes if we don't update it? I don't think we are, but I could be wrong.\n\nStrictly speaking we don't, which is why I haven't bothered until now to see if it might have any impact on this issue. But much of the changes it causes today are just useful conveniences or best-practice sort of things Apple wants to enforce.\nHowever, until we do, we generate warnings during builds and warnings are usually bad. Just like the deprecation warnings, it's better to address them sooner, rather than when Apple finally pulls the trigger and requires us to make a change. For example, one day they finally will remove NSCopyBits and when they do, we won't be able to ship MacVim until we fix it because it's totally unusable without that function call. I'd just rather deal with those kinds of things ahead of time.\n. Is this related to #99? I don't think I even realized there was icon generation going on, I thought we always had all of them pre-generated and checked in.\nIf the scripts in question are just for taking a big source icon and generating all the smaller permutations, and there's no existing common tool for doing so or something built-in to the Xcode tools suite, then moving it to it's own repository under macvim-dev so we can use it the next time the OS X icon style changes seems reasonable to me.\nI guess this means MacVim will always have the new-style icon even on old OS X versions for which the style doesn't match? I don't know how much that matters; I certainly don't care as I don't use anything but the most-current OS X version. Do others?\nThat's my take on it.\n. It sounds like this is a subset of what sessions can do, so why aren't sessions appropriate for this? And further, how would you propose this feature interact with sessions?\n. If you're only talking about window geometry associated with the files, this is maybe a thing MacVim could handle -- it does attempt to restore the geometry of the last closed window currently via user defaults, and window restoration is an OS API. \nIt may also be doable in a plugin, which I'll look at, but I have some doubts.\nIn this case what would be the expected behavior if you relaunched MacVim as 'mvim' or by double-clicking a file associated with it (essentially launching with no files on the command line)? What do other editors do in this case? Do we restore and show the new file? Do we only show the new file?\nEither way this would probably need to be an opt-in feature since it still may have unforeseen conflicts with session-based restoration.\n. But MacVim already tries to restore the last window to its prior location, so failing to do so for any additional windows it would re-open seems very odd?\nOther kinks would involve handling \"windows\" (in the OS sense) with \"windows\" in the vim sense in them, or multiple tabs, et cetera, and this is where I guess it gets tricky to do this without polluting or otherwise getting our hands in the vim state :/\n. :+1: \nThis looks good and works for me locally as well.\n. This doesn't appear to be a MacVim bug; MacVim updates its recent documents list correctly (as can be seen in the Open Recent menu), it's looks like the App Expos\u00e9 process just doesn't refresh until the Dock reboots. \nIt appears to happen with every application, including built-in Apple ones.\n. I'm confused, @splhack. Was there are particular event -- some extremely negligent commit or inappropriate conduct towards some other user -- that led to this? Some of the comments @chdiza made towards @Shirk in some of the referenced commits above seem a bit blunt, but I'm not sure that is a good reason to summarily remove his commit access without warning? What's going on here?\n. What is it you are expecting to happen here? Are you expecting that copy-pasting\nset foo=1\nset bar=2\nwhile at the : prompt will actually execute :set foo=1 followed by :set bar=2?\n. Both gvim and regular (terminal) vim insert the ^M characters when pasting multiple lines of text into the : prompt; this is consequently a feature request that should be handled at the vim level itself; I don't think it's a good idea for us to diverge from vim behavior in this context.\nFWIW, you can just use :@x to execute the contents of register x to achieve this; if you have text on the pasteboard it will probably be in the * or \" registers.\n. This is probably a vim change, MacVim doesn't do anything to set this. What is the result of :verbose set guioptions?\" for you?\n. The default forguioptionsisegmrLtT. The substring \"erL\" isn't present in that default value, so you can't remove it with-=. This is why it is recommended that you remove flag values one at a time (see:help remove-option-flags`).\nIf you remove each flag one at a time, as in\nset guioptions-=e\nset guioptions-=r\nset guioptions-=L\nthen when you run MacVim, :set guioptions? prints gm, as it sounds like you want. \n. This PR has been sitting here for over a year, does anybody know what's going on with it? Does it actually fix something? Is there any reason not to merge it?. MacVim's custom full screen or the native OS X fullscreen? (The toggle is in MacVim's preferences if you're unsure.)\n. I can't reproduce this on latest; does it still happen for you? Does it still happen if you upgrade? What version of MacVim are you using?\n. Okay, I can reproduce it. It has to do with the fake tab line separator MacVim draws since it doesn't use the appropriate window style. There's at least two (I found one, I can't find the other) places where based on whether or not MacVim thinks the separator should be drawn it will shrink the content size by one.\nIt does this based on some state that is set when fullscreen mode is toggled, most of this state expects to be set up when toggleFullscreen happens. It doesn't happen when you enter split screen, so that's why it's getting confused.\n. @dathinaios If you can, it would help if you could pull down #307 and confirm that it fixes it for you (it does for me).\n. I can't reproduce this, are there other steps you're taking? I'm doing this:\n- make sure swap files are enabled in my .vimrc\n- run terminal vim to edit some file\n- launch MacVim, choose File -> Open and pick the same file\nI see the NSAlert displayed properly and I can't get it to appear behind the document window. Are you finding it there floating around after the document has been opened and edited? Or is it only there while the ATTENTION is also displayed in the buffer window?\nI'm on the latest HEAD version of MacVim, built from source.\n. BufExplorer_ReSize:15 in version 7.2.8 is attempting to do exe $. execute takes a string, and $ isn't one. My guess is that vim used to accept this due a bug and it's since been patched (although vim's version history is difficult to easily scan, so I gave up looking for the specific change after a few minutes).\nLater version of BufExplorer use normal! $ instead of exe $ (starting here).\nThis isn't a MacVim bug. I think you're just going to have to update your version of BufExplorer.\n. There should be a \"Check for updates\" checkbox you can toggle in MacVim's preferences. Does this not work?\n. That said, what do you mean by \"lose all non-original color scheme after updating?\" Do you mean your custom color scheme doesn't show up in the menu of generated color schemes? That you can't change to it via :color yourscheme? That you get an error from you .vimrc after updating about :color yourscheme? That your color scheme files are deleted (you're not putting them in MacVim's runtime file directory, are you?)\n. > I store the color scheme files in /Applications/MacVim.app/Contents/Resources/vim/runtime/colors, that may be the problem.\nThat is the problem. That directory is for vim/MacVim to store its built-in runtime files, you should basically never put files in there yourself. You should create a .vim directory in your home directory and put your color schemes there (e.g., ~/.vim/colors). MacVim will not touch that directory when it updates. see :help runtimepath for more information.\n. I'm not particularly enthusiastic about the idea, personally (I feel like it falls into the category of \"just because we can doesn't mean we should\"), but I wouldn't necessarily refuse a well-implemented PR for it. How do you expect this to look, interface-wise (as in, how does one manipulate this color and what special behavior does it have)? Are there separate settings for light and dark mode?\nIs MacVim's window not respecting dark mode toggles as-is? That, at least, seems like it would be a bug we should address.\n. A new set option is something that would generally need to be added by core vim, not MacVim itself. That's why most of the MacVim-specific options we have (which fullscreen mode to use, ligature support, et cetera) are implemented as actual preference items in the MacVim GUI (generally via NSUserDefaults).\nModifying core vim's code, where all the set options are handled, seems to me like it would significantly increase the cost of merging in core vim's changes. I don't think that cost is worth paying for a feature like this. Perhaps @splhack can weigh in on what kind of impact that would have on our merge process, but my understanding is that it would be an annoyance.\n. @robinmitra I've never gone about customizing the color of an NSWindow title bar, so I can't offer much guidance there other than to suggest plugging \"custom NSWindow title bar\" into a search engine. There's a few potentially promising hits on StackOverflow, such as this one.\nIn MacVim itself, MMWindow is a NSWindow subclass used by MacVim and would probably be a good place to start looking at how to handle the custom setup and drawing. \nIf you want to plug this into MacVim's preferences and GUI, this commit had some changes that added a new preference key and hooked it up, so you could wire the setting up that way.\nI'm not sure of the best way to integrate the setting if you wanted to implement as a regular vim set option. This pending PR does something similar (in that it involves touching core vim source to add some options) but I'm not sure how helpful it would be as a guideline.\nHowever you implement it, it should be possible to disable it (so users who want the window to look like a regular OS window don't have to guess at a \"good color\" to get that effect) and should not be enabled by default.\n. I cannot reproduce this on latest; what version of MacVim are you using and does it still happen if you use the latest screenshot? Does it still happen if you run without your .vimrc or plugins loaded?\n. I don't think there's anything we can do about this.\nMacVim has to wait for vim to tell it how to draw a given buffer. Vim may need to process autocommands and file type plugins in order to do that, so MacVim can't draw until those are completed. If your autocommands take too long, you will see visual artifacts and delays because MacVim has to simply wait for the information to come in.\n. My gut feeling is that this all-new jobs/channels stuff in core vim (which I've not had a chance to look at much since it doesn't interest me) is causing the backend vim process that MacVim runs to do things that stimulate messages to our frontend process at times where we didn't expect them, resulting in sadness.\n. FWIW, I think doing this in MacVim is possible (naturally, as an opt-in feature); both text rendering (CoreText and legacy) views currently manually implement scrolling rather than use the standard Cocoa primitives to do so. That presents some challenge. So, too, does how we interoperate with core vim; we send messages back and forth regarding what lines are visible or not, and (try to do) very precise, controlled redraws of only things that changed. Adjusting that would be trickier, as now we'd need to be \"pretending\" our view was larger than it was so core vim will send us more lines than we need, we'd need extra messages probably to understand the full length of the scrollable content better. Our resizing also does a lot of special-case hackery to constrain itself to row/column multipliers (which is already a source of lots of bugs) which would need revisiting. The upshot is that this is going to be a lot of work, especially if one is going to support it for both renderers.\nI'd really love to rewrite and simplify our renderer so its easier to adopt \"high level GUI\" features like this. But that is even more work, and there are good reasons MacVim originally took the approach it did, likely related to performance on older machines, that I'm loathe to screw around with because I have no capability to evaluate the impact of or test how it would behave on older systems.\n. I don't think it's a \"couple of days.\" I'd say it's a \"couple of weeks.\" I'm skeptical that your proposed hack would work well enough to be something we'd be comfortable shipping (c.f. the ligatures support, which seemed fairly simple on the surface but has turned out to cause quite a few unexpected side-effects).\n. This looks like potentially the same underlying problem as #272, which was addressed here.\n. Does it go away if you disable automatic updates (MacVim -> Preferences > uncheck \"check for updates\" when MacVim launches)?\n. It seems rather easy to expose this to defaults or even just as a box in the preference panel if it's really just changing that scalar in four spots. I will investigate.\n. I'd appreciate it if either or both of you could yank and build that PR and let me know if you run into anything other than the flicker at low time values (fixing that is probably more work than I can invest right now, I think it's due to all the window sleight of hand MacVim's going through).\n. Changes got merged in; I'll close this.\n. You should probably report this upstream to vim itself; runtime/syntax/vim.vim is not a MacVim-specific file and that bug, from how it's described there, appears to be something that would manifest anywhere where s:perlpath has a space in it.\n. It seems very unlikely MacVim could break this; are you sure it does not happen in terminal vim as well? Does it also happen when you run without plugins/your own vimrc files?\n. I also cannot reproduce this locally building from source (at https://github.com/macvim-dev/macvim/commit/bdcab3eb7f01dfcae917cad2588b58baeba01f5e).\n. Cool, glad you sorted it out.\n. Always? Or occasionally? \nI've see that before, but I can never reproduce it when I want. It's an indirect message; _MDItemMarkAsUsedForPath is never called by MacVim as it's a private API. Something else is indirectly calling it.\nThis has been around since Mavericks, I think.\n. Setting hidden should keep the active buffer (netrw's in this case) open when you open another file. Hidden buffers should also show up in the buffer list and should also be switchable via bn and bp. So far this sounds like intended behavior.\nbd seems to work fine for me, as does bp until I actually cycle to the netrw buffer (at which point it acts like it doesn't work, but I'd chalk this up to a bug in netrw (which is fairly buggy)).\nMacVim doesn't do anything in particular here; it doesn't implement hidden or alter the behavior of hidden from regular vim.\n. Can you provide screenshots of what you mean? What version were you using before?\n. This appears to be by design, it was added by @splhack last year in https://github.com/macvim-dev/macvim/commit/e268fb8d6761cd79f254ce05cd7ed6465ecf7fb2 based on an earlier PR against Bjorne's repository.\n. Not currently, no.\nIt's not impossible to hide this behind an NSUserDefaults key, but I'm not so sure committing to maintain that preference is a great idea. Every such switch we add compounds an already complicated set of interacting options, and the tabs in particular are built on a framework that we don't directly control and which is relying on a bunch of deprecated stuff (edit: okay, just did a clean build and it's not really as much deprecated stuff as I remember). That makes me a bit wary.\nWhat is the motivating factor for wanting to use the old tabs?\n. With backupcopy enabled, vim will preserve \"special attributes\" by making a copy of the file; this includes the metadata for tags in the Finder. If backupcopy is set to \"no,\" vim just writes a new file itself, and can't preserve any metadata it doesn't itself understand.\nSetting backupcopy to \"yes\" should solve the problem for you. \"auto\" (the default) should also work. \nMacVim does not implement any of this behavior itself, it's all handled by vim; if you think there's a bug there you should probably report it upstream.\n. The fix (to core vim) was merged down in https://github.com/macvim-dev/macvim/commit/8d7a68e9fa3b4cd18a9e5709374ecda3c8947912 it looks like.\n. What is your key repeat set to in System Preferences, under Keyboard?\n. Since MacVim's already implemented tab functionality itself, is there any reason at all for us to support the new Sierra tabbing system? Or alternatively, should we just adopt Sierra's system on Sierra+ and relegate the custom tabs to older builds?\n. Merged PR #715 which adds this.. MacVim would merge this in eventually if core vim accepted it, but it doesn't seem like something MacVim should fix or support on its own.. Which feature? Has it been integrated down into vim by any of the commits yet? (If so, it's probably in the 122 snapshot splhack created an hour ago).. > it works not well\nWhat exactly does this mean? Does it silently fail? Does it crash? Does it behave unexpectedly? How so?\nI'm not familiar with vimperator, but it's possible you shouldn't be trying to launch MacVim by directly specifying the executable in the bundle. I'm not even sure the MacVim executable will parse those arguments. The mvim script launches the Vim executable (see lines 44 and 86. Perhaps that's what you want?. There's a setting you can set in MacVim's preferences, I believe, which will cause it to terminate after all windows are closed. This sounds like it will resolve your issue.. Right. As I said, it's up to the application to decide whether or not it closed when all windows are closed. MacVim has a setting in the preferences to control this behavior, you should set it and that will fix your issue.. I'm confused. Are you saying that the FAQ says to locate mvim by running that find invocation? Because the FAQ here doesn't, so you may be reading an old or unofficial FAQ.\nIf, on the other hand, you read the FAQ's statement that mvim \"comes bundled with the MacVim download\" to literally mean mvim was in the application bundle, I suppose I can see how that overload of the word \"bundle\" could be misleading. I've updated the wording to remove the specific use of the term \"bundle.\". This is awesome, great work.\n. While certainly useful, it doesn't appear that this is a bug or feature request for MacVim itself.. The point of linespace is to control how many pixels worth of vertical space appears between lines in the GUI. The intent, in core vim, of this feature is for when \"the font uses the full character cell height, making lines touch each other,\" and also for when there's too much space between lines in a font due to ascenders or descenders. \nThe point of linespace is not to middle-align text vertically for status bar widgets. What you're proposing here would break a useful compatibility feature for the sake of a prettified UI.. Personally, I wouldn't want to.\nWe generally try to avoid MacVim-specific features like that, as they are harder to keep in sync with both core vim and across MacVim's two renderers. After taking a brief look at how linespace is handled in MacVim it might not be a simple change, as it sounds (from the current comments) like the current approach was done to vastly simplify things.\nIf somebody implemented the feature as a preference option or a defaults option, we'd consider integrating it.. I can think of two things offhand:\nYou could set the ruler option (set ruler in your .vimrc); this will display the line and column of the cursor. This appears to be specifically the option you're highlighting in that screenshot, because of the All message that comes with it.\nYou can also configure the statusline option. %l and %c in the status line string will show the line and column number of the cursor. . This is definitely an OS feature (although I wouldn't rule out the possibility that MacVim hand implemented it once-upon-a-time to mimic the OS feature before the OS made the APIs more accessible). We could potentially disable this, but it would need to be a defaults setting, since some people do like this behavior.. We use the NSFindPBoard in a couple of places. The use in gui_macvim.m certainly suggests this is intentional, and probably easy to disable via a user setting.. Whenever a new setting is introduced, there will always be divided opinions over what the default should be.\nIn general I think the best way forward is to preserve existing behavior with new defaults as much as possible; it creates a more consistent experience along upgrade paths, and it's statistically the thing more users are likely to expect (especially as the behavior in question ages without reports of defects, as in this case). This is especially true of behavior that is part of the OS parlance, as this find-pasteboard-sharing is.. Which renderer are you using? CoreText or non?. In MacVim's preferences window (accessible from the menu bar) there's a checkbox for it; there's also one for native full screen or not, that would be interesting to know. Also, do you see this immediately when launching MacVim and opening a file? Or do you need to go into and come back from a fullscreen view?. Thanks for this!\nApart from some minor style nitpicks (I'll go through and leave comments on the specific lines), this mostly looks reasonable. I don't have the hardware to test it. When you say \"this needs some work,\" what sort of work are you thinking of?. @ychin \n\nI don't mind taking this over and help push this through if the original author is no longer interested.\n\nGiven the amount of time this PR has sat here I think it would be fine for you to do so. As I noted in my initial review, most of what I'd want to see fixed before merging are just style issues to try and keep the code consistent. If you can build a PR that incorporates this original change and fixes those, it would probably get merged pretty quickly.\nI don't have hardware to test it on, and I'm not personally that interested in the feature, but I would like to see more contributors since I don't have much time to devote myself. So by all means, if you want to pick this up and run with it, please do so!. Cool; I will take a look at it today.\n. I'm afraid I don't quite understand. Can you provide more details about what you're doing and what problem you're seeing?\n. I guess I'm unsure what you mean by \"flashback?\" Is it crashing? If so do you have crash reports in ~/Library/Logs/DiagnosticReports you could provide?\nThis may be a duplicate of https://github.com/macvim-dev/macvim/issues/587.. This seems like something that should be handled by plugins, to me.. This really seems like something that should be handled by a plugin. Where MacVim offers functionality above-and-beyond that of vim itself, it generally does so to leverage some functionality of the OS to enhance the experience of using vim.. The history of the MacVim icon in the repository is here, which you can use to fetch the desired version of the icon yourself.\nAll the document-type icons are generated (there is a Makefile in src/MacVim/icons used to do so) if you want to regenerate everything yourself, although I think applying those would require you to rebuild MacVim yourself as well.\n. Closing as a duplicate of #667.. Do you have an example of such a file or information about how we could create one from scratch?. This looks like the same underlying issue as in #714.\n(At least, the mapping bit; the fact that pasting in general in terminal mode appears to do nothing is a different bug.)\n. Anything we explicitly set a key equivalent for in MainMenu.nib can't be bound (or really, recognized) by vim; we don't ever implement performKeyEquivalent: so we don't get notified of any keystrokes that are key equivalents.\nIntercepting the equivalent would not be the right course of action as it would leave the menu UI in an incorrect state. \nProbably the right thing for MacVim to do here is respond to D- mappings by setting the appropriate key equivalents for the appropriate actions, and clearing them when the mapping doesn't correspond. We could use macmap.vim as the basis for such a mapping, I suspect. \nThere's a few other bugs floating around that are essentially this same problem.\n. > The key bindings from the menu are handled by OS X Window System Server, not by app itself.\nThe key equivalents are all hard-coded in MainMenu.nib. The OS is not providing them for MacVim.\n\nThat is because the menus are not changeable until a window is open in the first place. So how are you supposed to change the key shortcut for the first window you open? This brings me to another good point. How would we allow customizing of key mappings when no vim script has yet run? There hasn't yet been an opportunity to even run the menu commands.\n\nThese are good points; I believe we don't have a vim process until at least one window is open, so we'd have to rely on the .nib defaults for the very first run. Once MacVim's launched vim at least once, if we implement the scrape-and-map approach I suggested in my first comment, I guess we'd need to write the new key equivalents into defaults (where we store the other MacVim-specific preferences) in order to make them bind correctly on subsequent window-less launches.\nThat makes things more complicated. I don't generally like to encourage storing stuff in defaults since they don't travel with the user's .vimrc, et cetera, as well.\n. We don't rigidly adhere to Apple's guidelines. Nor do Apple's own applications in places. When it makes sense for the needs or desires of our users, we ignore them, because users are more important. Legacy fullscreen is an excellent example of this.\nUnless I gravely misunderstand, @jordwalke is not asking for us to remove the default key equivalents. The request is for us to provide a way for users to remove or remap them if needed. This seems entirely inline with the proposed workaround involving System Preference except that it is done within the purview of MacVim itself and thus doesn't require external solutions, so it is significantly more convenient for users who want to do this.\nFurther, unless I misunderstand what you are suggesting @eirnym, the System Preferences workaround cannot be used to remove a key equivalent, only replace one (I'm thinking you're referring to the Keyboard / Shortcuts / App Shortcuts UI, which lets you remap key equivalents based on exact menu text; is there some other place to do this?). I'm also unaware of how you can manipulate these settings via AppleScript as you suggest. An example AppleScript providing that feature might be enough to satisfy the needs of the users asking for this functionality, if you can provide it.. This discussion seems like it's going in circles at this point.\nI just want to point out that from my perspective (as a maintainer) that I think this is a reasonable request and that a reasonably-implemented PR providing the capability to remap the chords that happen to be defined in MainMenu.nib would get consideration from me, at least.\nFor reference, \"reasonably implemented\" means that it\n\ndoes not change the current default behavior of vanilla MacVim (so those users who do not want this capability are not affected by its presence)\ndoes not leave the menu bar in an inconsistent state (so that remapping any chord removes the corresponding key equivalent from the main menu).\n\nI would strongly suggest anybody implementing this feature also look at macmap.vim, because that file implies that this used to be possible (back in 2006 at least), and if this feature gets implemented and that file is still getting sourced by the vim runtime it may have adverse affects on my first requirement above..  It's actually offering you 8.1.280. There are some display issues with the number formatting in this UI. This is a duplicate of #694.. I merged it.. Oops. Yes, I'll take care of that once I'm back at my desk.\n. Yes, that would be way better.\n. (Sorry for the comment spam, I followed the wrong link originally and put comments on old files and in the wrong spot.)\nIt seems like your theory is that the 'show dialog' messages comes in over the IPC channel after the window controller has been created but before the actual window has loaded (which seems like a reasonable theory).\nWhy a timer, though? It seems to me (without having an opportunity to sit at a Mac and test this yet) that the timer isn't needed; that runAfterWindowDidLoadUsingBlock could make a check to see if the window controller has already handled windowDidLoad and, if it has, execute the block immediately. Otherwise it pushes the block into the queue, which is executed during windowDidLoad (or I guess when we set \"windowPresented\").\n. Is there a better place to do this setup? I'm specifically thinking that customizing the Touch Bar items will likely be something people will want to do quite a lot, and that having to first go through and delete these menu items is somewhat tedious. It might be better if the initial setup of the Touch Bar menu could be deferred somewhere so users could set a global variable in their vimrc to suppress default menu generation and instead generate the items themselves. . The indenting on this preprocessor line (and the corresponding #endif) is off.. The indent on this #if/#endif pair is off.. The indent on this #if/#endif pair is off.. Lines 503 - 506 have mixed tab/space indenting and are too far in.. The indent of this #if/#endif block is off.. At this point it might be worth writing isTouchBarMenuName or similar, or at least making the name a constant.. For clarity, this should be written in a way that doesn't inject the preprocessor check between the else and the if; this kind of construct is error-prone and can be difficult to follow (I realize it might be elsewhere in MacVim's codebase, but I'd rather we don't propagate it). I'd rather see something more like:\n} else {\n#if MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_12\n  if ([rootName isEqual:@\"TouchBar\")) { return; }\n#endif\n\n// Use tag to set...\n\n. This whole else block has mixed tab/space indenting and seemingly overly deep indents.. A tab is used to indent here instead of spaces.. This is done in a few places and I'm not sure it is correct (it was also in the original PR; I missed it then). NSTouchBar is in the 10.12.2+ SDK and AvailabilityMacros.h has entries that are granular to the second decimal place. In other words, MAC_OS_X_VERSION_10_12_1 is a thing. That SDK won't have TouchBar support, per Apple's docs, but will be greater than MAC_OS_X_VERSION_10_12 and thus cause a compiler error inside all these guards.\n#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_12_2 seems like what we'd want here, and in all the other cases, right?. > I could do that, but now I'm just wondering whether we even should check for this, or just remove the macro usage.\nI'd like to, but I don't think we can. There are users out there who build MacVim from source on older versions of the OS, for a variety of reasons (such as not really liking some of Apple's changes in later versions, et cetera). MacVim has long supported those users, much like vim itself. \nSimilar arguments pro and con can be made towards MacVim's support of legacy features (the old text renderer, the custom fullscreen mode) as well: these legacy features increase MacVim's maintenance cost, but there are users out there who really love them.\nI don't think it is feasible to drop that support, as painful as it is to work with right now. \nHowever, it would be great to come up with an alternative. Branches were floated as an idea a while back, but it didn't really go anywhere.. ",
    "ElDeveloper": "@chdiza, you may want to use LICEcap http://www.cockos.com/licecap/ it\nwill produce a GIF that can be added to your GitHub comment.\nOn (Apr-27-15| 8:07), chdiza wrote:\n\nI can get you screenshots later tonight or tomorrow.\nThis white flash is MEGA annoying, as you'll see if I can figure out how to capture video.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/macvim-dev/macvim/pull/5#issuecomment-96694540\n. \n",
    "ldong": "@jpetrie Thank you\n. ",
    "splhack": "It is still happening? and I believe you @chdiza are the only person who uses MacVim on OS X 10.4, 10.5, 10.6, and 10.7. So, could you fix the issue?\n. how about 10.11? and what is the result of the bisect?\n. Anyway we don't need MMFullScreenWindow for 10.10 or later. We should make MMFullScreenWindow deprecated.\n. Then, what is the result of the bisect?\n. please feel free to create a new issue if we still have the issue with Snapshot 81.\n. It should be reported https://github.com/vim/vim/issues or Vim mailing list.\n. please feel free to create a new issue if we still have the issue with Snapshot 81.\n. please feel free to create a new issue if we still have the issue with Snapshot 81.\n. please feel free to create a new issue if we still have the issue with Snapshot 81.\n. please feel free to create a new issue if we still have the issue with Snapshot 81.\n. I never see this. please feel free to create a new issue if we still have the issue with Snapshot 81.\n. Snapshot 80 https://github.com/macvim-dev/macvim/releases/tag/snapshot-80 should work.\n. It's Vim way.\n. I can't reproduce it.\n. @jpetrie could you write more specific way to reproduce the issue? for example\n1. Open an empty MacVim window\n2. Enter insert mode\n3. Paste \"(\ud835\udc9c) hello.\" and enter return.\n4. Input \"aaaa\"\n5. Exit insert mode\n6. ...\n. what is 'the rendering artifacts'?? snapshot-81, 10.11, I can't see any issue. could you record screencast?\n. @jpetrie are you using snapshot-80 or earlier version?\n\nsnapshot-81 has no problem.\n\n. @Shirk Could you update your MMCoreTextRenderer.mm with the latest master and send a pull request?\n. Pull request is better than gist :)\n. Added macligatures option in #129. It removes Enable support for ligatures from Preferences panel but it allows to enable/disable Ligatures at any time!\n:set macligatures\n:set nomacligatures\n. .gvimrc example\n\" highlight CursorLine guibg=NONE \u2190 it doesn't work for redrawing Ligatures\nset cursorline\nset guifont=Fira\\ Code:h11\nset macligatures\n. It is still happening?\n. I can't reproduce it. cloud you investigate it by yourself?\n. it seems no other crash reports. close.\n. Hmm, no-title-bar window is not fancy for me, but you can try the pull request https://github.com/macvim-dev/macvim/pull/111\n. #111 is ready to merge. @oschrenk could you test it?\n. #111 merged.\n. I can't reproduce it. it still happens?\nI recommend you to check the following.\n$ defaults delete org.vim.MacVim\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\n. I already made a pull request https://github.com/macvim-dev/macvim/pull/74 to merge 7.4.854 and it makes easier to merge Vim from now on.\n. Right (and I'll wait to merge vim/master a bit for that at the next time :wink:).\nAs a matter of fact, for the past year and three months (or much longer, I've just checked Bjorn's last commit), the difference between vim/master and the Vim source code in MacVim doesn't grow much. In this span it's only blur and blurradius options. We can keep these gaps as small as they should be.\n. First time,\n$ git remote add vim git@github.com:vim/vim.git\nMerge,\n$ git fetch vim\n$ git merge vim/master\n. Please take a look at https://help.github.com/articles/error-permission-denied-publickey/\n. It's ok. I just prefer to use ssh protocol and think ssh protocol is better in the document.\n. @jpetrie Have you tested this locally?\n. https://github.com/rogual/neovim-dot-app\n. \n. anyone wants to create pull requests to update https://github.com/macvim-dev/macvim/tree/gh-pages ?\n. http://macvim-dev.github.io/macvim/\n. Have you tried this setting?\n:set backspace=indent,eol,start\nIn my understanding, Vim uses backspace for updating IME input. Thus it needs proper setting.\n. From Snapshot 80, MacVim(Vim) doesn't crash (SIGSEGV) at the situation.\n```\n$ vim --cmd 'py3 print(\"test\")' --cmd 'py print(\"test\")' --cmd 'quit' \ntest\nError detected while processing pre-vimrc command line:\nE836: This Vim cannot execute :python after using :py3\nE263: Sorry, this command is disabled, the Python library could not be loaded.\n$ vim --cmd 'py print(\"test\")' --cmd 'py3 print(\"test\")' --cmd 'quit'\ntest\nError detected while processing pre-vimrc command line:\nE837: This Vim cannot execute :py3 after using :python\nE263: Sorry, this command is disabled, the Python library could not be loaded.\n```\n. @sc68cal I need concrete way to reproduce it. could you describe more detail with snapshot-86 like https://github.com/macvim-dev/macvim/issues/66#issuecomment-160779023 ?\n. Have you guys tried the issue on OS X 10.11.1? I can't reproduce it anymore.\n. It seems OS X 10.11 issue.\n. Could you try Snapshot 80 binary? https://github.com/macvim-dev/macvim/releases/tag/snapshot-80 It works fine with Python 2.7.\nIf you still want to build MacVim by yourself using Homebrew, and the issue still happens, could you ask the author of Homebrew MacVim formula about the issue?\n. Could you check https://github.com/macvim-dev/macvim/pull/110 ?\n. how about you @leesavide @9mm ?\n. If you still have the issue, feel free to reopen it or create a new issue\n. Emoji will be available from Snapshot 81\ud83d\udc31\n. Good catch. However I still cannot reproduce the issue on MacBook Pro 15(The resolution setting is \"Default for display\") with no external monitors.\n$ killall MacVim\nNo matching processes belonging to you were found\n$ killall Vim\nNo matching processes belonging to you were found\n$ defaults delete org.vim.MacVim\n$ defaults write org.vim.MacVim MMTopLeftPoint '\"{217,1408}\"'\n$ defaults read org.vim.MacVim MMTopLeftPoint\n{217,1408}\n$ plutil -convert xml1 -o - ~/Library/Preferences/org.vim.MacVim.plist|grep MMTopLeftPoint -A 1\n        <key>MMTopLeftPoint</key>\n        <string>{217,1408}</string>\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\nMacVim opens a window and it works well.\n. I tried to use an external monitor, but still I can't reproduce the issue.\nYou can 100% reproduce it using my command lines with no external monitors?\n. Still I can't reproduce it.\n$ killall MacVim\n$ killall Vim\n$ defaults delete org.vim.MacVim\n$ defaults write org.vim.MacVim MMTopLeftPoint '\"{217,1408}\"'\n$ cat /tmp/gvimrc_bad\nset lines=999 columns=999\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U /tmp/gvimrc_bad\nNo crash. A maximum window opened and works well.\nYou guys on 10.10.5? So it seems it is the best time to upgrade your OS X :wink: \n. confirmed. I can reproduce the issue on 10.10.5. It never happens on 10.11.2. I recommend to update OS X to solve the issue.\n. @georgesnelling you said \"Then launch macvim: no window.\", not the crash. It sounds the exactly same as https://github.com/macvim-dev/macvim/issues/109.\n. > the next time, we can just do git merge vim/master from the Vim repository.\nSee, easy to merge.\n```\n$ git remote show vim\n* remote vim\n  Fetch URL: git@github.com:vim/vim.git\n...\n$ git fetch vim\nremote: Counting objects: 10, done.\nremote: Compressing objects: 100% (5/5), done.\nremote: Total 10 (delta 4), reused 4 (delta 4), pack-reused 1\nUnpacking objects: 100% (10/10), done.\nFrom github.com:vim/vim\n   b58988b..a09a2c5  master     -> vim/master\n * [new tag]         v7.4.856   -> v7.4.856\n * [new tag]         v7.4.855   -> v7.4.855\n$ git merge vim/master\nAuto-merging src/version.c\nMerge made by the 'recursive' strategy.\n src/gui_gtk_x11.c |  4 ++--\n src/move.c        | 10 ++++------\n src/version.c     |  4 ++++\n 3 files changed, 10 insertions(+), 8 deletions(-)\n``\n. It doesn't break anything and I fixed several merge misses that were happened by the cherry-pick way. why it's bad way? duplicating commits will cause problems?\n. Just in case, I'm going to reconstructmacvim/master` branch based on https://github.com/vim/vim/tree/master. It allows to git-merge using vim/master without duplicate commits. The macvim commits history are preserved as well.\n. if you still want to investigate this issue, please reopen.\n. I'm now trying to build binary on Travis CI, and to release the binary from GitHub Releases.\nhttps://github.com/macvim-dev/macvim/releases/tag/snapshot-test (not finished yet)\n. Test build settings for pre-built package https://github.com/macvim-dev/macvim/blob/test/release/.travis.yml\n. @douglasdrumond is there any document about prebuilt app configure options?\n. - https://github.com/macvim-dev/macvim/wiki/Deployment\n- https://github.com/macvim-dev/macvim/releases\n. @djjcast could you check #168?\n. crash issue is the same as #62\n. @jpetrie thx, merged\n. I can change it. Which URL is the best?\n. done\n. > Is there a way to \"unfork\" \ntechnically, maybe yes. http://stackoverflow.com/questions/29326767/unfork-a-github-fork-without-deleting#comment46845376_29326840 but I feel displaying \"This branch is ...\" is ok.\n. @chdiza It's up to you. could you ask github.com/contact to unfork this repo or close this issue?\n. @chdiza It's totally up to you.\n. no activities here. ok, we'll keep to be a fork of b4winckler/macvim.\n. Could you try https://github.com/macvim-dev/macvim/pull/92?\n. Could you test https://github.com/macvim-dev/macvim/pull/103 ?\nYou can use the test binary https://github.com/macvim-dev/macvim/releases/tag/snapshot-test .\n. > CTRL-P to open a file after resizing the split. Second time trying CTRL-P works.\nIt seems Vim redraw issue. Could you create new issue?\n. other than that, it looks good to me\n. @jpetrie Nice!\n. the same as #62\n. ready to merge?\n. On Travis-CI with Xcode 7.1, it seems ok\nhttps://travis-ci.org/macvim-dev/macvim/builds/87139674\n. Sorry, what's the problem? MacVim.app doesn't work on before El Capitan?\nCould you try https://github.com/macvim-dev/macvim/releases/download/snapshot-test/MacVim-7.4.dmg ?\nIt's compatible with 10.9 or later. https://github.com/macvim-dev/macvim/blob/30304bfbc0fdb7e4caad263f0cf85aa524467bad/.travis.yml#L12\n. It sounds like you should submit a report to Apple\nhttps://developer.apple.com/bug-reporting/using-bug-reporter/\n. By the way, are you sure to set Deployment Target for your old OS X?\n. Xcode 7.1 includes only OS X 10.11 SDK. You should set Deployment Target if you want to build app for supporting OS X 10.10 or earlier.\n. Setting Deployment Target to 10.8 or 10.9 in xcodeproj is the reasonable solution.\n1. AFAIK, UNIX binary executable (for example, Vim executable) from, at least, 10.8 to 10.11 is completely binary compatible. No need to set Deployment Target. UNIX binary executable using 10.11 SDK does work well on 10.8 without Deployment Target. Thus, No-Deployment-Target for Vim executable, Deployment-Target=10.8or10.9 for MacVim app, is safe.\n2. I think there are no reasons to support Tiger, Leopard, or the other old versions of OS X in this repository. Apple never release security patches for the old versions. It's extremely dangerous. And how many users use MacVim on 10.7 or earlier??\n. Could you try #104 ?\nIt is totally ok for me, I don't push people to remove code for older OS X if someone actively supports older OS X in this repository.\n. 10.4 and 10.5 is no longer supported.\n. @chdiza you want to remove src/MacVim/icons/Makefile and icon generating code from this repository, because you just want to simplify the Macvim Homebrew formula to remove its custom-icon code? that's all?\n. move to #176\n. Binary targets OS X 10.8(Mountain Lion), 10.9(Mavericks), 10.10(Yosemite), and 10.11(El Capitan)\n- Vim patch 7.4.902\n- Add basic support for CoreText ligatures\n- Add optional blur to transparent windows\n- Allow to open directory in Open dialog\n- Fix rendering and resizing issues on El Capitan Split View\n- Fix Deployment Target for Yosemite with Xcode 7.1\nany other updates?\n. 78 is already reverted. never mind.\n. Snapshot 78 will be built with dynamic linking to Lua, Perl, Python 2, Python 3, and Ruby.\nhttps://github.com/macvim-dev/macvim/blob/77b7042855becd832fe3c03ae1af4e6db5985e57/.travis.yml#L17\nHowever the runtime depends on Homebrew path hierarchy. To adopt the other package system or self built for loading script binding shared libraries, I'll release another snapshot after my patch is applied.\nhttps://github.com/vim/vim/commit/a0f849ee40cbea3c889345256786b640b0becca2#diff-38d7929bd26d74d92ceddf984bbfc8dbR125\n. ok, It doesn't matter it's up to you\n. https://github.com/macvim-dev/macvim/releases/tag/snapshot-79\n. yeah. but it's rare case, no one cares.\n. Snapshot 80 works well with Lua, Perl, Python2, Python3, and Ruby.\nhttps://github.com/vim/vim/commit/d94464ee294a351ce7b6ba18e8bd3f24f1bef920\n. tl;dr. Not yet.\nSnapshot 79 Vim executable was built with Python 2.7 and Python 3.5. It means Vim only can load Python 2.7 and Python 3.5 shared libraries (dylib). And, in the current source code, Vim only can load the shared libraries from the very specific path what was defined by configure script. If you want to use your own Python 2.7 and Python 3.5 builds like MacPorts, please wait the patch that I mentioned in #106. Also Python interface binary compatibility is limited, for example, you can't use Python 2.6 and Python 3.4. In addition, Vim can't load Python 3.5 after Python 2.7 loaded, Vim can't load Python 2.7 after Python 3.5 loaded as well.\n. yeah (I guess)\nidk, I think you can use opensnoop to find out the path.\n. For Python 2.7, IIRC, Vim can load the framework from the system.\nFor Python 3.5, for example, with Homebrew python3, you may be able to use :python3 with the symbolic link.\n$ ln -s /usr/local/Cellar/python3/3.5.0/Frameworks/Python.framework ~/Library/Frameworks\n. You can now use pythondll and python3dll option to specify Python shared library.\nhttps://github.com/vim/vim/commit/d94464ee294a351ce7b6ba18e8bd3f24f1bef920\n. The reason is obvious. No '-lperl' link option here.\nhttps://gist.github.com/anonymous/2a707b357a6be6b8f453#file-02-make-L81\nhttps://gist.github.com/anonymous/2a707b357a6be6b8f453#file-01-configure-L105\nIf you still want to build yourself instead of using binary snapshot https://github.com/macvim-dev/macvim/releases, delete MAMP from PATH before brew upgrade.\n. I'm sorry but it is not MacVim issue nor Homebrew issue. If you're not sure the solution that I mentioned, just uninstall MAMP, brew upgrade, and install MAMP.\n. So rebooting OS X solved the issue, right?\n. Anyone has the issue right now? I can't reproduce it, but it sounds like there is old Vim process aside from the new MacVim/Vim process. So if you had the same issue, to confirm there are no Vim processes using 'ps auxww' or Activity Monitor.\n. It sounds like the Vim process was zombie process, or the Vim process got I/O error. It should be checked using ps auxww|grep -i vim. And all we need to know is how to reproduce the issue.\n. How to reproduce it?\n```\n$ killall Vim\nNo matching processes belonging to you were found\n$ killall MacVim\nNo matching processes belonging to you were found\n$ defaults delete org.vim.MacVim\n$ docker-machine ls         \nNAME      ACTIVE   DRIVER       STATE     URL   SWARM\ndefault   -        virtualbox   Stopped     \n$ docker-machine start default\nStarted machines may have new IP addresses. You may need to re-run the docker-machine env command.\n$ docker-machine ls\nNAME      ACTIVE   DRIVER       STATE     URL                         SWARM\ndefault   *        virtualbox   Running   tcp://192.168.99.100:2376   \n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\n```\nMacVim works fine for me.\n. Ok, I guess I found out.\nhttps://groups.google.com/d/msg/vim_mac/kPo414xEHmk/eddzYMlpAgYJ\n\nTurns out I had a circular logic in my .bashrc that was causing it to \nhang whenever I ran bash\n\nSo changing the default setting will solve the issue.\n$ defaults write org.vim.MacVim MMLoginShell -bool NO\n. If you have this issue, you should verify your login shell environment.\n- 'SHELL' environment variable is correct? (no 'SHELL' set is totally ok)\n- login shell does work properly? for example 'bash -l' does work?\n. Right. Snapshot 80 is binary compatible with these version only.\n- Lua 5.2\n- Perl 5.16\n- Python2 2.7\n- Python3 3.5\n- Ruby 2.0\nYou need to install Python 3.5.x, or you need to build MacVim by yourself.\n. weird. anyway it should be \"10.4\" not \"10.4u\".\nhttps://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html#//apple_ref/doc/uid/TP40003931-CH3-SW129\n. yeah, it's not big deal, totally ok.\n. Not a few people have been using a MacVim variant with this patch for 2 years. No problems. So I'll merge it first, then I'll investigate the issue with Ligatures support.\n. you should update src/configure.in as well\n. please take a look at https://github.com/macvim-dev/macvim/pull/117\n. https://github.com/macvim-dev/macvim/blob/fix/deployment_target/src/configure.in#L52\nthe previous patch was not enough '[' ']'.\n. why did you create the new issue?? It seems the exactly same as https://github.com/macvim-dev/macvim/issues/61. could you merge this issue to #61 and close this issue?\n. It seems cross-posting https://github.com/vim/vim/issues/469\n. For example, the Python 3.5.0 binary distribution https://www.python.org/downloads/, you should set the environment variable like this. The path is vary by Python environment.\nlet $PYTHONPATH='/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5'\nIf still no luck, you should install https://www.python.org/downloads/ or use Homebrew or build MacVim by yourself.\n. Well, MacVim binary snapshot can't support each single unique Python environment. So, If still no luck, you should install https://www.python.org/downloads/, or use Homebrew to install python3, or build MacVim by yourself.\n. Unfortunately, ligature support breaks Emoji (for example, '\ud83d\udc31') rendering. Surrogate pairs, perhaps?\n\n\n. @Shirk :+1: \n. turned out it's the configure script issue.\nhttps://github.com/vim/vim/pull/482\n. Fixed in https://github.com/macvim-dev/macvim/commit/32d03b34ac8a34a962f57847fc431a2b4e14efea.\n. The other PSMTabBarControl seems different from MacVim's. Keep the current one and fix deprecated warnings.\n. have you tried http://whomwah.github.io/qlstephen/ ? I'm thinking to add it into MacVim for quicklook of MacVim filetypes.\n. could you guys try #172?\n. thank you for testing.\n. this is definitely good idea. I want to use Ligatures only in some source code not for all other text files. And antialias or other GUI options are already exists long time.\n. what do you mean? antialias option does noting in CUI. in terms of the context, macligatures is the exactly same. I hope someone will create a pull request to add a nice document for Ligatures support, how to get font, how to set font, how to set up gvimrc in order to render Ligatures, ...\n. > might confuse users\nEven if user uses Core Text renderer, Ligatures doesn't work with, for example, Arial font, right? Actually I confused to review Ligatures support. then I hope there is a nice document.\n. @Shirk :+1: could you create a pull request?\n. no problem to create a PR against main branch!\n. :tada:\n. :+1: \n. :+1: \n. Can you provide a minimum way to reproduce the issue from here?\n$ defaults delete org.vim.MacVim\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\n. > 1. Preferences > check \"Enable support for ligatures\"\nMacVim doesn't have the setting any more. Please use the latest snapshot and complete the procedure?\n. good to know!\n. > What I'd like to know is: what's to be gained by switching to Xcode 3.2?\nAs I already mentioned, in order to get rid of warnings. That's all.\n. then it doesn't affect your environment at all. never mind. I'll prepare MacVim_legacy.xcodeproj and Makefile anyway.\n. @osheroff what do you mean \"some deprecation warnings\"? There is only one warning in the code base.\n/Users/travis/build/macvim-dev/macvim/src/MacVim/PSMTabBarControl/source/PSMTabDragAssistant.m:180:14: warning: 'dragImage:at:offset:event:pasteboard:source:slideBack:' is deprecated: first deprecated in macOS 10.7 - Use -beginDraggingSessionWithItems:event:source: instead [-Wdeprecated-declarations]\n    [control dragImage:dragImage at:cellFrame.origin offset:offset event:event pasteboard:pboard source:control slideBack:YES];\n             ^\n. What was that??\nTravis CI build log\nhttps://travis-ci.org/macvim-dev/macvim/builds/175424743\nhttps://api.travis-ci.org/jobs/175424744/log.txt?deansi=true\n. @osheroff sorry I don't get your point. You mean you need 10.6+ binary? or you got https://gist.github.com/osheroff/9d0a6e9d8606e8eaa13265b9154fc305 warnings when you set MACOSX_DEPLOYMENT_TARGET to 10.7 or earlier?\n. @osheroff are you using the master branch? https://github.com/macvim-dev/macvim/commits/master I've double checked it without MACOSX_DEPLOYMENT_TARGET  on 10.12 with Xcode 8 (Xcode 8.1 must be the same result), there is the only one warning as I wrote before.\n. Could you try https://github.com/vim/vim ? You can use Homebrew like this.\n$ brew install vim\nThen try to use /usr/local/bin/vim.\n. Obviously, -drawInRect:fromRect:operation:fraction:respectFlipped:hints is all guarded by\n#if MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_6\nAnd the compiler doesn't complain about the definition itself, thus those definition are defined and the values of the definition might be wrong. Could you investigate it and send a pull request? you are the (only) person who can do it.\n. It's not a bug or issue.\nYour /etc/sudoers env_keep doesn't include HOME if you are using OS X's sudo. Take a look at man sudo. You can use -e option.\n$ sudo -e FILE\nOr -E option.\n$ sudo -E mvim FILE\n. No. This is only for PSMTabBarControl. And it could have 10.7 value for the other warning, but no more. No need to be too generic way.\n. https://github.com/macvim-dev/macvim/commit/715845ed2cd93d91d0b70ad6ee3d4d4e9dad6b92\n. How to reproduce\n:let a = inputdialog('test')\n. thank you for the report\n. You can set pythondll like #121 and you may need to set PYTHONPATH environment variable as well.\n. Vim loads(dlopen)  pythondll dylib or system Python2.7 dylib. That's all. You should ask at Vim mailing list or Vim github project issue If you have further question.\n. you should share it on Vim community.\n. The issue is definitely part of Vim (--enable-python=dynamic) and you can compile Vim if_python with static link not dynamic link. Also the MacVim binary distribution can't support all Python environment.\n. Sorry, I close this issue. The reason is that this project issues concentrate MacVim issue not Vim issue. You can still post solutions here for sharing it for MacVim community.\n. I'll change the default path of Python2.7 dylib, it might change the behavior. or not. If not, you need Xcode in order to build MacVim.\n. MacVim snapshot 83 binary works fine Homebrew python with pythondll and PYTHONPATH.\n:let $PYTHONPATH=\"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/\"\n:set pythondll=\"/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/libpython2.7.dylib\"\n:py import os; print os.__file__\n/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc\n. > If I take the binary (version 83) from the release page, what is supposed to be in my sys.path? (with no $PYTHONPATH set)\nIf you use Vanilla OS X(10.8, 10.9, 10.10, and 10.11, no additional applications, no additiona frameworks, no special environment variables), and if you use MacVim snapshot 83 binary, then Vim loads the dylib from /System/Library/Frameworks/Python.framework/Versions/2.7 and sys.path includes /System/Library/Frameworks/Python.framework/Versions/2.7.\n:py can call Python 2.7 dylib, the default path is in the system path (the above path). You can set pythondll in Vim command line or .vimrc to specify the Python 2.7 dylib path. It could be your own Python 2.7 build, Homebrew, MacPorts, etc. But you may need to set $PYTHONPATH environment variable (I don't know the reason. Also I have totally no idea $PATH environment variable affects it or not)\n. I'll change the default path of Python2.7 dylib to the absolute path.\n. Updated https://github.com/macvim-dev/macvim/releases/tag/snapshot-84\nhttps://s3.amazonaws.com/archive.travis-ci.org/jobs/92834400/log.txt\n-DDYNAMIC_PYTHON_DLL=\\\"/System/Library/Frameworks/Python.framework/Versions/2.7/Python\\\"\n. As I said, it is Vim issue not MacVim issue. Please go to Vim issues or Vim mailing list.\n. The master branch included $PYTHONHOME fix _experimentally_. It may be changed in the future, and, still, it is Vim issue, please go to Vim issues or Vim mailing list if you want to discuss about it.\n. would you try this https://github.com/macvim-dev/macvim/wiki/Troubleshooting#ensure-that-configuration-files-vimrc-and-gvimrc-and-the-preferences-are-not-the-cause ?\n. Just make it sure. What is the output of these Vim commands?\n```\n:scriptnames\n:set guifont?\n:set guifontwide?\n```\nAnd how about it on Terminal?\n```\n$ defaults delete org.vim.MacVim\n$ defaults delete org.vim.MacVim\n$ /Applications/MacVim.app/Contents/MacOS/Vim --version\n```\n. Please follow https://github.com/macvim-dev/macvim/wiki/Troubleshooting#ensure-that-configuration-files-vimrc-and-gvimrc-and-the-preferences-are-not-the-cause\n. 7.4.949 might change the behavior. Could you check the master branch?\n. @kodabb :+1: \n. 1. I already responded it in vim_dev mailing list. https://groups.google.com/d/msg/vim_dev/B5fGebEL9_c/bVDc9lt0AAAJ\n2. As I said in the mail, it was already solved in this repository.\n. If you have any conflicts at merging, please hold on to merge it on the master branch directly. I'll do it.\n. The problem is inconsistency of Ruby header at compiling time and library at linking time in your system.\nFor MacPorts, I think you should ask the maintainer of MacVim MacPorts.\nFor your own build, the easiest way is just use the binary release https://github.com/macvim-dev/macvim/releases.\nThe second one is uninstalling all Ruby environments from your system except the system Ruby environment.\nIf you still want to use your time, you can set vi_cv_path_ruby environment variable and investigate src/auto/config.mk to check header include path and linker library path after configure script.\n. It is not the case. time resolution of mouse click or trackpad tap is 50~100ms-ish.\n. Thank you for the test. But I don't think the snippet is needed. It just one time execution on Terminal, it's persistent setting on the system.\n. MacVim can't handle the terminal rendering. You should ask it in iTerm2 community.\nIf MacVim GUI doesn't render the emoji properly, please let me know the UCS-2 code.\n. you really don't need to create a pull request for merging vim/master, just wait a bit, it would be updated.\n. @chdiza sorry, in terms of quality of code, you don't qualify to have write permission on this repository.\n. @jpetrie I don't know what's going on this pull request, but this tragedy is enough reason of no-write permission for awhile. first of all, I don't know the reason chdiza has write permission of this repository in the first place. not enough pull requests or patches of MacVim, the few patches were just only for shell script not including Objective-C and C, actually I was not able to accept several pull requests due to the quality so far, lack of knowledge of git \"I'm not sure if I did this right\" https://github.com/macvim-dev/macvim/pull/161#issuecomment-161377079, etc.\n. @chdiza I'm sorry the reason of without telling you is that you don't have email addresses on the github profile page https://github.com/chdiza\n. I know and will fix https://github.com/macvim-dev/macvim/issues/7.\n. I'll merge #178 soon anyway. I'll create macvim-dev/macvim-tiger or whatever if anyone wants to maintain MacVim for 10.4, 10.5 and 10.6. Please let me know.\n. @rhendric the first thing, could you create a pull request for updating MacVim_legacy.xcodeproj and PSMTabBarControl_legacy.xcodeproj? I don't merge #178 if you maintain pre-10.7 code actively in the master branch.\n. No one wants to maintain 10.4 and 10.5. I'll remove 10.4 and 10.5 stuff and _legacy.xcodeproj.\n. Thanks. Could you test https://github.com/macvim-dev/macvim/pull/175?\n. @chdiza your comment \"Plain Vim doesn't behave in the way that this commit (and #182) make MacVim behave. \" is useless. Please provide a concrete reproduction scenario like https://gist.github.com/lambdalisue/94d14ff706a5627d64f5.\n. #183 merged, thanks\n. I'll change mbyte.c.\n. https://github.com/macvim-dev/macvim/pull/187\n. You can install the latest MacVim using https://github.com/macvim-dev/homebrew-macvim\n. Have you tried Vim in Terminal.app?\nhttps://github.com/macvim-dev/macvim/wiki/Troubleshooting#test-the-original-vim\n. ok, I close it because it is Vim issue.\n. cool. but the target branch is actually fix/remove_legacy_stuff? it seems master.\n. thanks! (I thought target branch is modifiable)\n. :+1: \n. :+1: \n. Deleting these two lines solves the issue?\n- https://github.com/macvim-dev/macvim/blob/0bf0f54d5915fedeadf75b3a06d6b8e66ed53a36/src/MacVim/MacVim.xcodeproj/project.pbxproj#L662\n- https://github.com/macvim-dev/macvim/blob/0bf0f54d5915fedeadf75b3a06d6b8e66ed53a36/src/MacVim/MacVim.xcodeproj/project.pbxproj#L693\n. #192 fixed the issue?\n. Pull requests welcome! :blush:\nmake sure the base branch is feature/yosemite-tab-style.\n. at least I know a minor issue\n\n. @jordwalke could you measure the performance loss?\n- Measure performance in the master branch\n- git revert --no-commit -m 1 7cdd910 and measure performance\n. It only happens on Split-Screen with Native Full-screen?\n. @wweaver It doesn't happen with MacVim on Terminal.app?\n. @rogergl you mean it doesn't happen in Full-screen mode? only in Split View?\n. >  It's been happening for a month or two now.\n@wweaver could you specify the snapshot what introduced the issue?\n. @wweaver @rogergl we need your help to investigate the issue, which snapshot introduced the issue?\n. Ok, I can reproduce the issue.\n1. Toggle Full Screen Mode, or :set invfu\n2. Drop the other app to the screen\n3. :NERDTreeToggle\nnever happens if drop MacVim to a screen.\n. could you try #200?\n. updated #200\n. It is not MacVim issue. I recommend you to ask it in Vim issues.\n. btw what is the problem? It seems it's just Vim auto line break.\n. :version and --version both uses list_version to output the lines https://github.com/macvim-dev/macvim/blob/master/src/version.c#L2917 , it's just line break. Anyway, you should go Vim issues if you still think it is a problem.\n. I can't reproduce the issue.\n\nDid you follow the troubleshooting instruction? https://github.com/macvim-dev/macvim/wiki/Troubleshooting\n$ killall MacVim\n$ killall Vim\n$ defaults delete org.vim.MacVim\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\nThen set guifont=Menlo\\ Regular:h12.\n. How about the official MacVim Homebrew formula https://github.com/macvim-dev/homebrew-macvim ?\n. It is not MacVim issue as you know. I recommend you to ask it in vim-mac mailing list http://www.vim.org/maillist.php .\n. I'm pretty sure because MacVim uses Travis-CI for tracking regression.\n- https://travis-ci.org/macvim-dev/macvim\n- https://travis-ci.org/macvim-dev/homebrew-macvim\n\nI installed snapshot 88 as a test and it crashes on startup\n\nwhy don't you create an issue with the complete crash log?\n. git bisect will help to blame the change.\n. how to repro it after the following?\n$ killall -9 MacVim\n$ killall -9 Vim\n$ defaults delete org.vim.MacVim\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\n. any update?\n. ah, the reason is using MMTextView not MMCoreTextView.\n. How about this?\nlet g:ycm_path_to_python_interpreter = \"/usr/bin/python\"\n. In your case, it might be\nlet g:ycm_path_to_python_interpreter = \"/usr/local/bin/python\"\nBTW, using binary release is highly recommended. Use the official Homebrew formula if you still want to build MacVim by yourself.\n. please reopen it if you still have the issue.\n. I'll remove 10.6 support if @rhendric or anyone don't fix the issue.\n. Xcode 4.2 is the last version for OS X 10.6, IIRC.\n. @rhendric It includes s/atsuiButtonClicked/coreTextButtonClicked/ changes?\n. @rhendric MMRenderer value was actually changed in the defaults with your change, but coreTextButtonClicked: method wasn't called any more. I think it is the time to drop old Xcode support if you can't modify Preferences.nib properly. Still you might be able to release MacVim binary for OS X 10.6 users with Xcode 7.2.\n. @rhendric It seems Xcode 7.2 only supports back to Xcode 5.1 for nib file. And I think you should have Xcode 7.2 and Xcode 3.2.6 if you really want to support OS X 10.6 in this repository. I can tell you the changes when I change nib file. In this case, s/atsuiButtonClicked/coreTextButtonClicked/.\n. :+1: \n. At first, as I wrote in https://github.com/macvim-dev/macvim/wiki/Building, using configure and make is not recommended. Please use binary release. Or please use the official Homebrew MacVim formula if you really want to build MacVim by yourself. In both ways, MacVim requires Python 3.5.x not 3.4.x, but it doesn't matter in most py3 case. Put these lines in your .vimrc if you did brew install python3.\nlet $PYTHONHOME=\"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5\"\nset pythonthreedll=/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/Python\nStill you want to solve the issue by yourself, you can check src/auto/* files.\n. feel free to reopen the issue.\n. $ defaults delete org.vim.MacVim\n. thanks, fixed in #208\n. interesting. did you follow the instruction? https://github.com/macvim-dev/homebrew-macvim\n$ brew tap macvim-dev/macvim\n$ brew install --HEAD macvim-dev/macvim/macvim\n. ```\n:help py3eval\n:let a=py3eval(\"'b'\")\n```\nPlease go to Vim community if you have questions about it.\n. It needs extra cost. If you really want to update automatically, you can use this. The update information is Japanese, but it is totally based on this MacVim snapshot.\n. there are plenty of issues already, but almost no one sends pull request, except a few cases. no one wanting to work on this, I guess.\n. @jonashaag You can try it out now. I've deployed snapshot-93.\n. @rhendric we need update MainMenu.nib to have Update (class is SUUpdater) object and connect between Check for updates... and Update. Could you update it and send PR for OS X 10.6? Please check this PR's MainMenu.nib in Xcode 7.2 first.\n\n\n\n. right, thanks\n. https://github.com/macvim-dev/macvim/commit/17576a1e33d71b5602cee86bf220a806c8412605\n. thanks\n. Why don't you use this? https://github.com/rhysd/neovim-component\n. In terms of install user base, just use https://atom.io/ is one of the best solution.\nI'd like to keep MacVim would be simple, fast as Vim. I don't want the feature if it will affect the performance.\n. https://github.com/macvim-dev/macvim/wiki/FAQ\n\nMy question is not answered in this FAQ. Where can I ask for help?\nAfter doing so you may post your question to the vim_mac(https://groups.google.com/forum/#!forum/vim_mac) Google Group if it is MacVim related\n. No, and MacVim will not support.\n\n:set nowrap\n. - 1. Vim doesn't need to be linked with what you want to load dynamically. Just use the binary release https://github.com/macvim-dev/macvim/releases with the following in your .vimrc.\nFor python 2.7.x\nlet $PYTHONHOME=\"/usr/local/Frameworks/Python.framework/Versions/2.7\"\nset pythondll=/usr/local/Frameworks/Python.framework/Versions/2.7/Python\nFor python 3.5.x\nlet $PYTHONHOME=\"/usr/local/Frameworks/Python.framework/Versions/3.5\"\nset pythonthreedll=/usr/local/Frameworks/Python.framework/Versions/3.5/Python\n- 2. It's already there\nFor Homebrew\nvi_cv_path_python3=/usr/local/Frameworks/Python.framework/Versions/3.5/bin/python3\nvi_cv_dll_name_python=/usr/local/Frameworks/Python.framework/Versions/2.7/Python\nvi_cv_path_python=/usr/local/Frameworks/Python.framework/Versions/2.7/bin/python\nvi_cv_dll_name_python3=/usr/local/Frameworks/Python.framework/Versions/3.5/Python\n./configure \\\n    --enable-pythoninterp=dynamic \\\n    --enable-python3interp=dynamic \\\n    --with-python-config-dir=/usr/local/Frameworks/Python.framework/Versions/2.7 \\\n    --with-python3-config-dir=/usr/local/Frameworks/Python.framework/Versions/3.5\n- 3. Please send pull request to vim/vim repository if you want to contribute something to Vim.\n. A guide for MacVim with Python 2.x and Python 3.x\nhttps://gist.github.com/splhack/4ec93591aec286beac496bbd5cc8d764\n. https://github.com/macvim-dev/macvim/wiki/Python-2.x-and-Python-3.x\n. Have you tried defaults delete org.vim.MacVim?\n. :+1: \n. :+1: \n. No problems https://travis-ci.org/macvim-dev/homebrew-macvim/builds/100526784\nPlease use the official Homebrew MacVim formula https://github.com/macvim-dev/homebrew-macvim\n. I know the reason. Supporting MacVim build on OS X 10.6 is the only reason of the issue. I'll drop it.\n. Fixed. please use https://github.com/macvim-dev/homebrew-macvim\n. investigating SIGSEGV\n. Could you send it to https://github.com/vim/vim?\n. Please take a look at https://github.com/macvim-dev/macvim/pull/220#issuecomment-175119658\n. Sorry I don't get what you don't understand. Have you read https://github.com/macvim-dev/macvim/pull/220#issuecomment-175119658 ?\n. > Is the option for compiling against a custom Python location working in the latest build?\nYes. I totally don't understand why you asked it, I already wrote it in https://github.com/macvim-dev/macvim/pull/220#issuecomment-175119658.\n. So you didn't recognize how to specify Python framework path at all? Really?\nvi_cv_path_python3=/usr/local/Frameworks/Python.framework/Versions/3.5/bin/python3\nvi_cv_dll_name_python=/usr/local/Frameworks/Python.framework/Versions/2.7/Python\nvi_cv_path_python=/usr/local/Frameworks/Python.framework/Versions/2.7/bin/python\nvi_cv_dll_name_python3=/usr/local/Frameworks/Python.framework/Versions/3.5/Python\n./configure \\\n    --enable-pythoninterp=dynamic \\\n    --enable-python3interp=dynamic \\\n    --with-python-config-dir=/usr/local/Frameworks/Python.framework/Versions/2.7 \\\n    --with-python3-config-dir=/usr/local/Frameworks/Python.framework/Versions/3.5\n. > ENV variables that I need to set before the build process\nYes. I don't think I have to say that the path may vary with your system.\n. Could you try this? https://github.com/macvim-dev/macvim/pull/237\n. How about adding this line in MMBackend.m?\n```\ndefine __bridge\n``\n. Are you actually using the latest Xcode? Which version?\n. Ok, then, you can remove qlstephen dependency from Xcode project.\n. Open MacVim.xcodeproj and just remove QuickLookStephen.xcodeproj from project.\n. @petobens I merged__bridge` fix, but there are no good universal solutions for removing QuickLookStephen.xcodeproj. so 10.7 users need to do it by hand.\n. Please report in https://github.com/vim/vim/issues for Vim issues.\n. @ronaaron Do you actually check https://github.com/vim/vim ? What is the version of \"standard vim\"?\n. @ronaaron What is the version of vim?\n. @ronaaron Can you create a vim script for reproducing the issue?\n. @ronaaron I can't repro the issue.\nhttps://github.com/macvim-dev/macvim/wiki/Troubleshooting\n$ killall MacVim\n$ killall Vim\n$ defaults delete org.vim.MacVim\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\nCan you explain the exact detail how to reproduce the issue from here.\n. Please use vim_mac mailing list.\nhttps://github.com/macvim-dev/macvim/wiki/FAQ\n\nMy question is not answered in this FAQ. Where can I ask for help?\nAfter doing so you may post your question to the vim_mac(https://groups.google.com/forum/#!forum/vim_mac) Google Group if it is MacVim related\n. Could you explain how to repro the issue, what the difference from the screen shot from https://github.com/morhetz/gruvbox/wiki/Gallery ?\n. > No matter what MacVim still rendered the parenthesis in grey, where as VIM and GVIM (which is a GUI) kept the original blue which matches the screenshots and also on vimcolors.com\n\n@acidjazz Could you create a new issue about that if you still think it is problem? The issue should include the following.\n- Minimal setting to reproduce the issue with -u NONE -U NONE option\n- The ideal screenshot and MacVim screenshot\n- Actual RGB value of the parenthesis from the ideal screenshot and MacVim screenshot\n. It is a part of MacVim development.\n. > But I'm not quite sure when it broke. Either MacVim used to do font fallback and stopped at some point, or updating from OS X 10.10 to 10.11 somehow broke this.\n@kballard Could you specify the latest working version of MacVim? Download binary from https://github.com/macvim-dev/macvim/releases\n. @kballard Could you specify the latest working version of MacVim? Some version works you said.\n. @kballard good catch. Could you do git bisect?\n. - Download https://raw.githubusercontent.com/macvim-dev/homebrew-macvim/master/macvim.rb\n- Start git bisect\n$ git bisect start\n  $ git bisect good snapshot-88\n  $ git bisect bad snapshot-89\n- Edit macvim.rb\n$ git status\n  HEAD detached at 92c23d8\nhead 'https://github.com/macvim-dev/macvim.git', :revision => \"92c23d8\"\n- Install MacVim\n$ brew install --HEAD macvim.rb\n- Test\nset good or bad\n$ git bisect good\nor\n$ git bisect bad\n. git bisect skip in that case.\n. > a patched version of Menlo for Powerline\nWhy don't you share the url? This one? https://github.com/abertsch/Menlo-for-Powerline/blob/master/Menlo%20for%20Powerline.ttf\n. Anyway I can't reproduce this issue. How to set up the system' Menlo font and what is the exact text to test?\n$ defaults delete org.vim.MacVim\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\n. I'm not sure I understand this issue correctly, but we can close this issue because no one can reproduce this issue except some ill-formed environment, right?\nAnd I wasn't convinced enough that #245 can solve something or improve something. Could you provide more information? like, the amount of memory usage, CPU usage, Instruments profiling result, ...\n. Using configure directly is not recommended way to build MacVim.\nStill you want to use it, please read the document https://github.com/macvim-dev/macvim/wiki/Building-%28not-recommended-way%29 .\nAnd please please use vim_mac mailing list https://groups.google.com/forum/#!forum/vim_mac if you still have question about configure.\n. Please read the document https://github.com/macvim-dev/macvim/wiki/Building-%28not-recommended-way%29 . It explains everything. And you are doing what is not recommended to build MacVim.\n. Sparkle does that, and I don't want to change it.\nhttps://github.com/sparkle-project/Sparkle/blob/3c957096c64de93c93c9c49e7ebd3bbe254ee2a8/Sparkle/SUPlainInstaller.m#L144\n. It's not possible from MacVim and QLStephen side. The following may fix the situation but it totally depends on your settings.\n$ qlmanage -r\n$ qlmanage -r cache\nrestart Finder\n. sounds the same as https://github.com/macvim-dev/macvim/issues/109\n. You can try snapshot-99 now.\n. have you tried the latest vim?\n. Why don't you use the latest BufExplorer?\n. Please use vim_mac mailing list first. It's not macvim issue.\nhttps://github.com/macvim-dev/macvim/wiki/FAQ\n\nMy question is not answered in this FAQ. Where can I ask for help?\nAfter doing so you may post your question to the vim_mac(https://groups.google.com/forum/#!forum/vim_mac) Google Group if it is MacVim related\n\nUsing configure and make directly is not recommended way to build MacVim.\nYou can use the binary release https://github.com/macvim-dev/macvim/releases/latest .\nIf you still want to build MacVim by yourself, use the official Homebrew Tap https://github.com/macvim-dev/homebrew-macvim .\nStill you really really want to build using configure and make, please read the document first https://github.com/macvim-dev/macvim/wiki/Building-%28not-recommended-way%29 and ask vim_mac mailing list if you have questions.\n. You should ask it at Vim mailing list or issues.\n. done https://github.com/macvim-dev/macvim/wiki/FAQ\n. How about it https://github.com/macvim-dev/macvim/tree/test/readme\n. Download snapshot-103, and put MacVim.app into /Applications.\n$ rm -rf ~/.vim* ~/.gvimrc\n$ echo \"asdfasdf\" > ~/.vimrc\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE -i NONE -N\nstill happing?\n. @airblade you did exactly what I wrote? really?\n$ rm -rf ~/.vim* ~/.gvimrc\n$ echo \"asdfasdf\" > ~/.vimrc\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE -i NONE -N\n. You can use opensnoop what process opened and read /Users/andy/.vimrc.\n. let me know if it's still happening.\n. MacVim already have it\nhttps://github.com/macvim-dev/macvim/blob/53793980d40e6254a82f8f38277574f151cbce7d/src/feature.h#L1391-L1396\n. you can create a new issue, pixel by pixel scroll or something like that.\n. the root cause is, I guess, NetBeans support in MacVim. It has not been maintained anymore. And I'm the author of the patch\ud83d\ude04 . I'll remove it and test it.\n. Fixed in #278, but still make test with $(VIMPROG) -g sometimes fails a few of tests.\n. I have no idea about your demo.vim is correct or not. At least, current master has no issues in src/testdir/test_channel.vim.\n. No worries about older systems and the current renderers. MacVim can have yet another \"sophisticated\" renderer, like using Metal. Well, it should follow the current APIs though.\n. could you guys check https://github.com/macvim-dev/macvim/pull/276?\n. @grr How about snapshot-105?\n. It is not MacVim issue. I recommend you to post it in https://github.com/vim/vim/issues\n. @rainhead I can't repro it. How about snapshot-105?\n. You don't need to compile MacVim to use Python 3.5.\nhttps://github.com/macvim-dev/macvim/wiki/Python-2.x-and-Python-3.x\n\nMacVim binary distribution is enabled to use Python 2.7 and Python 3.5 out of the box with Homebrew Pythons (These Python 2.x and 3.x version number may vary with MacVim snapshot version. Please take a look at release description.)\n\nExample .vimrc settings for pyenv 3.5.1.\nlet $PYTHONHOME=$HOME.\"/.pyenv/versions/3.5.1\"\nset pythonthreedll=$HOME/.pyenv/versions/3.5.1/lib/libpython3.5m.dylib\n. There are no reason to use MacPorts for this case. Just Install the latest binary https://github.com/macvim-dev/macvim/releases/latest\n. \ud83d\udc4d \n. \ud83d\udc4d \n. @jcordasc Could you test #319 ?\n. @sindex you mean this?\ndiff --git a/src/MacVim/MMTextViewHelper.m b/src/MacVim/MMTextViewHelper.m\nindex d6dedfb..d93fecc 100644\n--- a/src/MacVim/MMTextViewHelper.m\n+++ b/src/MacVim/MMTextViewHelper.m\n@@ -159,8 +159,7 @@ - (void)keyDown:(NSEvent *)event\n     // Note that this implies that 'mmta' (if enabled) breaks input methods\n     // when the Alt key is held.\n     if ((flags & NSAlternateKeyMask) && [mmta boolValue] && [unmod length] == 1\n-            && [unmod characterAtIndex:0] > 0x20\n-            && [unmod characterAtIndex:0] < 0x7f) {\n+            && [unmod characterAtIndex:0] > 0x20) {\n         ASLogDebug(@\"MACMETA key, don't interpret it\");\n         string = unmod;\n     } else if (imState && (flags & NSControlKeyMask)\n. > 1. Following the wiki page, then Python 3 support is not available when I do not have Python 3 installed via homebrew.\nI can't understand that situation. brew automatically installs python3 if brew doesn't detect any Python 3.\n\n\nMacVim will crash when trying to use Python 3 when I additionally installed it with homebrew.\n\n\nNeedless to say, you should use your pyenv Python 3.x if you really really want to use Python 2.x and Python 3.x at the same time.\n. \ud83d\udc4d \n. #316\n. #320 \n. It seems like NSView backing layer(graphic context) will lose all rendering result when MacVim renders cursor.\nset guicursor=a:blinkon0\n. Have anyone tried 10.12.2?\n. can you guys test the master branch?\n. @amix praise must go to @osheroff :). https://groups.google.com/forum/#!msg/vim_dev/e2Rr8Px3qkQ/1XWiAQ0LAgAJ ?\n. we can revert pr anytime if we found any regression.\n. \ud83d\udc4d \n. lgtm, but do you wanna try to send the vim part of the diff to https://github.com/vim/vim? It's worth it.\n. > I'm not sure which changes belong in vim and which belong in macvim.\n- Vim\n  - runtime/doc/options.txt\n  - runtime/doc/quickref.txt\n  - runtime/optwin.vim\n  - src/option.c\n  - src/option.h\n- MacVim\n  - src/MacVim/MMBackend.h\n  - src/MacVim/MMBackend.m\n  - src/MacVim/MMCoreTextView.h\n  - src/MacVim/MMCoreTextView.m\n  - src/MacVim/MMTextStorage.h\n  - src/MacVim/MMTextStorage.m\n  - src/MacVim/MMTextView.h\n  - src/MacVim/MMTextView.m\n  - src/MacVim/MMVimController.m\n  - src/MacVim/MMWindowController.h\n  - src/MacVim/MMWindowController.m\n  - src/MacVim/MacVim.h\n  - src/MacVim/MacVim.m\n  - src/MacVim/gui_macvim.m\n  - src/proto/gui_macvim.pro\n. @tkonolige do you mind to rebase this to the master?. No failure in this test https://github.com/macvim-dev/macvim/blob/46c4d4ac66aa2b129f4dcec9debfda606f72d4b3/src/testdir/test_job_fails.vim even though on GUI mode. I don't know callback should be called or not in this case.\n. #330 \n. https://groups.google.com/d/msg/vim_dev/LhXQJusQScM/_wV4u5y5AAAJ 2)\n. @neowit can you confirm the diff fixed the issue?\n- https://groups.google.com/d/msg/vim_dev/LhXQJusQScM/bVCpXcKkAQAJ\n- https://gist.github.com/ichizok/6e0c00daf387b32bebcc2972f0cca137\n. https://github.com/macvim-dev/macvim/commit/dc0ccaee68ca24d10050117fbec757ad33590a17\n. Please take a look at #262 \nbtw binary release https://github.com/macvim-dev/macvim/releases supports cscope and Lua out of the box.\n. Could you check with exact same patch version of gVim and Vim?\n. Could you check it with snapshot-110 binary?\nhttps://github.com/macvim-dev/macvim/releases/tag/snapshot-110\n. please let me know if it is still happening.. please clarify the versions. what is \"brew version of macvim\"? \"this origin version\"?\n. I'll change MAC_OS_X_VERSION_MIN_REQUIRED check to NSAppKitVersionNumber runtime version check for the tab bar style.\n. @lifepillar It might be the root cause of #351 \nmake a lot of dirs to repro it.\n$ ruby -rfileutils -e '10000.times do |i| FileUtils.mkdir_p ENV[\"HOME\"] + \"/.vim/pack/#{i}/opt/a/colors\"; end'\n. Could you check it with snapshot-110 binary?\nhttps://github.com/macvim-dev/macvim/releases/tag/snapshot-110\nbtw https://github.com/macvim-dev/homebrew-macvim doesn't have --with-lua option.\n. hmm, I can't repro it.\n```\n$ brew uninstall --force lua\n$ brew install lua       \n==> Downloading https://homebrew.bintray.com/bottles/lua-5.2.4_4.el_capitan.bott\n==> Pouring lua-5.2.4_4.el_capitan.bottle.tar.gz\n==> Caveats\nPlease be aware due to the way Luarocks is designed any binaries installed\nvia Luarocks-5.2 AND 5.1 will overwrite each other in /usr/local/bin.\nThis is, for now, unavoidable. If this is troublesome for you, you can build\nrocks with the --tree= command to a special, non-conflicting location and\nthen add that to your $PATH.\n==> Summary\n\ud83c\udf7a  /usr/local/Cellar/lua/5.2.4_4: 143 files, 697.4K\n$ rm -rf ~/.vim* ~/.gvimrc \n$ killall -9 MacVim\n$ killall -9 Vim\n$ open snapshot-110/MacVim.app\n```\nIn MacVim snapshot-110\n```\n:version\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Sep 14 2016 03:42:03)\nMacOS X (unix) version\nIncluded patches: 1-3\nCompiled by travis@Traviss-Mac-659.local\n...\n:scriptnames\n  1: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/vimrc\n  2: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/defaults.vim\n  3: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim\n  4: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim\n  5: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim\n  6: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/filetype.vim\n  7: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/menu.vim\n  8: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/autoload/paste.vim\n  9: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim\n 10: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/indent.vim\n 11: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/getscriptPlugin.vim\n 12: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/gzip.vim\n 13: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/logiPat.vim\n 14: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/manpager.vim\n 15: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/matchparen.vim\n 16: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/netrwPlugin.vim\n 17: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/rrhelper.vim\n 18: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/spellfile.vim\n 19: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/tarPlugin.vim\n 20: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/tohtml.vim\n 21: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/vimballPlugin.vim\n 22: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/plugin/zipPlugin.vim\n 23: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/gvimrc\n 24: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/colors/macvim.vim\n 25: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/syntax/vim.vim\n 26: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/syntax/lua.vim\n 27: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/syntax/perl.vim\n 28: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/syntax/pod.vim\n 29: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/syntax/ruby.vim\n 30: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/syntax/python.vim\n 31: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/ftplugin/vim.vim\n 32: /Volumes/MacVim/MacVim.app/Contents/Resources/vim/runtime/indent/vim.vim\nPress ENTER or type command to continue\n:set luadll?\n    luadll=liblua.5.2.dylib \n:lua print('\u3042\u3042' < '\u3044')\ntrue\n```\n. @ichizok \ud83d\udc4d \n. @yacoob could you squash the git commits?\n. thanks!\n. https://github.com/vim/vim/pull/1030\n. \ud83d\udc4d \nwe may need weak link check for CGContextSetShouldSmoothFonts and CGContextSetFontSmoothingStyle.\n. It sounds because you have many plugins or some heavy plugin. Please reopen it if you are still confident MacVim itself is the reason of that.. It's just empty. I'll fix update script.\nhttps://github.com/macvim-dev/macvim/blob/gh-pages/appcast/latest.xml\n. Fixed https://github.com/macvim-dev/macvim/commit/94825a34da8ef8c43827a73c04852400804f448d\n. - if_python\n  - Python 2.7.x: works fine.\n- if_python3\n  - Python 3.5.1: crash\n  - Python 3.5.2: works fine\nPython 3.5.1 and 3.5.2 are NOT binary compatible.\n. Fixed in snapshot-110 https://github.com/macvim-dev/macvim/releases/tag/snapshot-110\n. Fixed in snapshot-110 https://github.com/macvim-dev/macvim/releases/tag/snapshot-110\n. How about reverting #331 ?\nComment out this line in MacVim.app/Contents/Resources/vim/runtime/menu.vim\nlet s:n .= globpath(&packpath, \"pack/*/{opt,start}/*/colors/*.vim\")\n(http://qiita.com/shinespark/items/804b87c6178fa916814b)\n. snapshot-110 binary release if_python3 is binary compatible with only Python 3.5.2.\n. Please post it in https://github.com/vim/vim/issues. It's not MacVim specific issue.\n. Could you test #357?\n. Have you followed https://github.com/macvim-dev/macvim/wiki/Troubleshooting ?\n```\n$ killall -9 MacVim\n$ killall -9 Vim\n$ defaults delete org.vim.MacVim\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\nwrite something\nselect the text\n\u2318-c\n```\n. :+1:\n. seems reasonable https://emacsformacosx.com/download/emacs-builds/Emacs-2015-05-16_01-40-57-e85053f.changes\n. @kjyv could you send pull request?\n. How about #381 ?\n. \ud83d\udc4d \nwill change to use scrollingDeltaX/Y in both cases on 10.7 or later.\n. updated #381 \n. No. You didn't launch the right one.\nPlease use https://github.com/macvim-dev/macvim/releases/latest MacVim.dmg\n. :+1:\n. Could you try to add import line in MMApplication.m?\n```\nimport \"MacVim.h\"\n```\n. \ud83d\udc4d \n. no errors in Xcode 7.3 https://travis-ci.org/macvim-dev/macvim/builds/166791032\n. thank you for the investigation!\n. Have you tried this setting?\nset noimdisable\nThis is the what you need to set in .gvimrc.\n. How about having separator between Find menu and colorschemes?\nFind More Color Schemes\n-SEP-\nblue\ndarkblue\n...\n. I reverted this change in 26de87631d84b46534756936cbabba090b26e875 since it cause merge conflict with vim/master.. You don't need to build MacVim by yourself in order to use pyenv Python 2.7.12 for if_python. Just use binary release https://github.com/macvim-dev/macvim/releases/latest with the settings.\nlet $PYTHONHOME=$HOME.\"/.pyenv/versions/2.7.12\"\nset pythondll=$HOME/.pyenv/versions/2.7.12/lib/libpython2.7.dylib\nAnd MacVim build is just fine with pyenv 2.7.12.\n```\n$ env PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 2.7.12\n$ pyenv versions\n* system (set by /Users/foo/.pyenv/version)\n  2.7.12\n$ vi_cv_path_python=$HOME/.pyenv/versions/2.7.12/bin/python ./configure --with-features=huge --enable-multibyte --enable-pythoninterp=yes --with-python-config-dir=$HOME/.pyenv/versions/2.7.12\n$ cat src/auto/config.mk\nPYTHON_SRC  = if_python.c\nPYTHON_OBJ  = objects/if_python.o\nPYTHON_CFLAGS   = -I/Users/foo/.pyenv/versions/2.7.12/include/python2.7 -DPYTHON_HOME='\"/Users/foo/.pyenv/versions/2.7.12\"' -fPIE\nPYTHON_LIBS = -L/Users/foo/.pyenv/versions/2.7.12 -lpython2.7\nPYTHON_CONFDIR  = /Users/foo/.pyenv/versions/2.7.12\nPYTHON_GETPATH_CFLAGS = -DPYTHONPATH='\":/Users/foo/.pyenv/versions/2.7.12/lib/python27.zip:/Users/foo/.pyenv/versions/2.7.12/lib/python2.7:/Users/foo/.pyenv/versions/2.7.12/lib/python2.7/plat-darwin:/Users/foo/.pyenv/versions/2.7.12/lib/python2.7/plat-mac:/Users/foo/.pyenv/versions/2.7.12/lib/python2.7/plat-mac/lib-scriptpackages:/Users/foo/.pyenv/versions/2.7.12/lib/python2.7/lib-tk:/Users/foo/.pyenv/versions/2.7.12/lib/python2.7/lib-old:/Users/foo/.pyenv/versions/2.7.12/lib/python2.7/lib-dynload:/Users/foo/.pyenv/versions/2.7.12/lib/python2.7/site-packages\"' -DPREFIX='\"/Users/foo/.pyenv/versions/2.7.12\"' -DEXEC_PREFIX='\"/Users/foo/.pyenv/versions/2.7.12\"'\n$ make\n BUILD SUCCEEDED \n```\n. I can't repro any of those.\n.vimrc\nlet $PYTHONHOME=$HOME.\"/.pyenv/versions/2.7.12\"\nset pythondll=$HOME/.pyenv/versions/2.7.12/lib/libpython2.7.dylib\nexecute pathogen#infect()\nplugins\n.vim/autoload/pathogen.vim\n.vim/bundle/jedi-vim/\n.vim/bundle/vim-pyenv/\n. It sounds the root cause of this issue is #300 right?\n. I know I can input \u00e9 character with this key sequence, option + e, and e. It sounds you have a keyboard which allows to input \u00e9 character directly, right? I can't investigate this issue.\n. It's the behavior of Sparkle https://sparkle-project.org/ and you can select \"Remind Me Later\". Also you can disable auto update https://github.com/macvim-dev/macvim/wiki/FAQ#how-can-i-disable-autoupdate-sparkle .\n. NSCopyBits was already gone since Snapshot 111. Could you reopen it if it is still happening in Snapshot 112 https://github.com/macvim-dev/macvim/releases/latest ?\n. can you repro it with this option?\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE --noplugin\nI think the root cause might be some python omnicompletion plugin?\n. Have you checked the issue in Vim?\nhttps://github.com/macvim-dev/macvim/wiki/Troubleshooting#test-the-original-vim\n. The latest binary release https://github.com/macvim-dev/macvim/releases/latest supports only Python 3.5.2. It will crash with Python 3.5 and 3.5.1.\n. Have you tried to set PYTHONHOME and pythonthreedll in your .vimrc? The path may vary.\nlet $PYTHONHOME=$HOME.\"/.pyenv/versions/3.5.2\"\nset pythonthreedll=$HOME/.pyenv/versions/3.5.2/lib/libpython3.5m.dylib\nhttps://github.com/macvim-dev/macvim/wiki/Python-2.x-and-Python-3.x\n. > I do not have a $HOME/.pyenv folder. \nas i said The path may vary. I don't know your environment.\n. > Download and install the latest macOS .pkg installer from the official Python site\nWhy don't you paste the URL??\n. I can't find any issue with https://www.python.org/ftp/python/3.5.2/python-3.5.2-macosx10.6.pkg with these settings in .vimrc.\nlet $PYTHONHOME=\"/Library/Frameworks/Python.framework/Versions/3.5\"\nset pythonthreedll=/Library/Frameworks/Python.framework/Versions/3.5/lib/libpython3.5m.dylib\n. You can use mvim script which is in https://github.com/macvim-dev/macvim/releases/latest MacVim.dmg for \"terminal vim\".\n$ cp /Volumes/MacVim/mvim /usr/local/bin [or somewhere which is in your PATH, the directory should be before /usr/bin in your PATH]\n$ ln -s /usr/local/bin/mvim /usr/local/bin/vim\n$ vim\nIt launches Vim binary in MacVim.app, and no errors\n. if has(\"macvim\")\nmight work.\n. if has('gui_macvim')\n  let $PYTHONHOME=\"/Library/Frameworks/Python.framework/Versions/3.5\"\n  set pythonthreedll=/Library/Frameworks/Python.framework/Versions/3.5/lib/libpython3.5m.dylib\nendif\n. First of all, in most of the cases, you don't need to build MacVim by yourself. You can use the binary release from https://github.com/macvim-dev/macvim/releases/latest.\nStill you'd like to build MacVim by yourself, you should use the latest version of Xcode (currently it's Xcode 8) if you can use it on your environment. And follow the instruction here https://github.com/macvim-dev/homebrew-macvim.\nhttps://github.com/macvim-dev/macvim/wiki/Building\n\nIf you're trying to build MacVim on older OS X, like 10.7, 10.8, 10.9 or 10.10, please paste the build error log.\n. How to repro the issue?\n. Please let me know with how to repro if it is still happening. I recommend you to write the issue in https://github.com/vim/vim/issues since the file is a part of Vim.\n. can you write a short Vim script to repro the issue?\n. At least, timer unittests including testdir/test_timers.vim works with GUI. GUI_FLAG=-fg make test.\n. @markwu is there any chance to check and modify test_timers.vim to repro the issue? timer_stop seems ok for me, at least in the test.\n. It seems timers work well as excepted, but there is something when input >. Maybe related highlighting bracket in Insert mode.\n. So it's enough to repro the issue?\n- install ale\n- open https://gist.github.com/junkblocker/8ecf9fc7940a8e42802f241cdf4fcedc\n. followed manual installation https://github.com/w0rp/ale#manual-installation, I only have .vim/bundle/ale and .vimrc as follows, no other plugins and .gvimrc. And installed jshint as npm install -g jshint.\nset nocompatible\nfiletype off\nlet &runtimepath.=',~/.vim/bundle/ale'\nfiletype plugin on\nThen opened https://gist.github.com/junkblocker/8ecf9fc7940a8e42802f241cdf4fcedc in MacVim snapshot 114. I can see Missing semicolon. message.\nHow to repro the issue??\n. It would have been helpful if you had explained... how to install jcsc? you mean jscs? npm install -g jscs, right? and .vimrc as follows?\nset nocompatible\nfiletype off\nlet &runtimepath.=',~/.vim/bundle/ale'\nfiletype plugin on\nlet g:ale_linters = {'javascript': ['jscs']}\n. Ok, I don't think it's MacVim specific issue. More likely, channel.c select/write issue on OS X. You can repro it with Vim. So select syscall returns the file descriptor is writable, but write syscall fails with EPIPE. I recommend you to repro it with the latest Vim and report it in https://github.com/vim/vim/issues.\n. @w0rp I believe just jscs closed stdin at that moment, it's not Vim issue.\n. I don't think so, but disabling auto update #390 may change the behavior.\n. I believe that Vim and MacVim codebase don't have such thing. Sparkle may access network and file system regularly, but I've never seen the log. More likely Vim scripts or plugins?\n. \ud83d\udc4d \nIt looks good it looks similar with Chromium implementation https://chromium.googlesource.com/chromium/chromium/+/master/content/browser/renderer_host/backing_store_mac.mm\nCould you update scrolling part as Chromium's? Apparently no need to clone CGLayer in 10.6 and later. https://chromium.googlesource.com/chromium/chromium/+/master/content/browser/renderer_host/backing_store_mac.mm#190\nAnd it would be good to adjust code formatting, revert unrelated changes and squash commits.\n. @osheroff I thought it's mergable but I felt some rendering lag when I tested this diff on 10.11.6. Maybe need runtime version check (10.12 or later) to enable this backing CGLayer.\n. I'll add runtime version check for the rendering lag.\n. could you take a look at guitest failure? https://api.travis-ci.org/jobs/177050498/log.txt\n. I'll check the rendering lag issue with non-fullscreen on 10.12 later.. The update is MacVim snapshot-116, right? https://github.com/macvim-dev/macvim/releases/tag/snapshot-116\nYou should update Python to 3.5.2 or later if you want to use if_python3 with the snapshot-116 binary.\nYou may need to set $PYTHONHOME and pythonthreedll in your $HOME/.vimrc.\nFor example, if you have installed https://www.python.org/ftp/python/3.5.2/python-3.5.2-macosx10.6.pkg , your $HOME/.vimrc looks like\nlet $PYTHONHOME=\"/Library/Frameworks/Python.framework/Versions/3.5\"\nset pythonthreedll=/Library/Frameworks/Python.framework/Versions/3.5/lib/libpython3.5m.dylib\n. maybe I'm gonna change system vimrc to check installed Python3 and set $PYTHONHOME and pythonthreedll automatically.\n. could you test this with set transparency=10?. How about moving shouldBlankUntilRedraw code block in cgLayerEnabled until supporting transparency in CGLayer rendering?\nif (cgLayerEnabled) {\n    if (shouldBlankUntilRedraw) {\n        .... well, if I had known the way, the issue would have been already fixed :). \ud83d\udc4d . I don't know what Powerline is, but apparently it needs if_python2 or 3 support.\n\n\nMacVim binary release snapshot-116 https://github.com/macvim-dev/macvim/releases/tag/snapshot-116 supports if_python2 and if_python3 out of the box.\nNo setup requires for if_python2. MacVim automatically uses OS X Python 2.7.x.\nMacVim is built with Python 3.5.2. You should use Python 3.5.2 or later and you may need to setup your .vimrc for if_python3. See #411 . Install powerline\n    $ brew install python3\n    $ pip3 install powerline-status\n\nSetup .vimrc\n    \" Powerline\n    py3 from powerline.vim import setup as powerline_setup\n    py3 powerline_setup()\n    py3 del powerline_setup\n    set laststatus=2\n    set showtabline=2\n    set noshowmode\nLaunch MacVim binary release snapshot-116, it works fine. With snapshot-117(not released yet) or later, you may not need to set Python3 setting in your .vimrc #411, it will be set automatically.. maybe. By the way, for the record, if you didn't installed Python2 via Homebrew, just installed pip http://softwaretester.info/install-and-upgrade-pip-on-mac-os-x/ then no additional settings required.. \ud83c\udf89 . I haven't tested it yet, but do you mind to update this to make sure don't call setNeedsDisplayInRect and setNeedsDisplay if cgLayerEnabled is NO?. I might be wrong but we don't need CGLayer for 10.11 or earlier, we may be able to enable it for 10.12 all the time though. And creating helper methods like setNeedsDisplayInRectForCGLayer or something will be still simple enough.. Merged 2fb08d345622bdaf53c6a25bfa3089520fa68de2. Enable CGLayer rendering all the time in Core Text Renderer.\ndefaults write org.vim.MacVim MMUseCGLayerAlways -bool YES. It sounds because you have many plugins or some heavy plugin. Please reopen it if you are still confident MacVim itself is the reason of that.. Apparently, it's not MacVim specific https://discuss.atom.io/t/imkinputsession-error/36273 maybe we can just ignore it.. Can you try snapshot-118 https://github.com/macvim-dev/macvim/releases/tag/snapshot-118 with the user defaults setting?\n\n$ defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES. Thank you for the information. snapshot-119 should be fine with python.org 3.5.2 binary\n\nhttps://github.com/macvim-dev/macvim/releases/tag/snapshot-119. @guenti what does your defaults look like?\n$ defaults read org.vim.MacVim. maybe it would be good to have the functionality but I won't fix. you can try the updater settings here https://github.com/macvim-dev/macvim/issues/390#issuecomment-254455708. I can't see any related changes between snapshot-116 to snapshot-117. It is still happening with snapshot-119?. It's some sort of bash limitation?\n\nI'm using zsh alias\nvi='/Applications/MacVim.app/Contents/MacOS/Vim \"$@\"'. @SolaWing you are saying what is your interactive shell, right? `mvim` is bash script. I think this article explains why http://unix.stackexchange.com/a/11954 So I recommend you to use shell alias instead of `mvim` bash script for that case.. @ncp1113 can you try snapshot-118? https://github.com/macvim-dev/macvim/releases/tag/snapshot-118. - First of all, in most of the cases, you don't need to build MacVim by yourself. You can use the binary release from https://github.com/macvim-dev/macvim/releases/latest.\n\n\n\nStill you'd like to build MacVim by yourself, follow the instruction here https://github.com/macvim-dev/homebrew-macvim.\n\n\nStill you have specific reason to build MacVim with certain configuration by yourself, you can read the https://github.com/macvim-dev/macvim/blob/master/src/auto/configure script in order to set configuration properly.. > the binary release seems to lack python support add well\n\n\ncould you elaborate on that?\n\nAs I use macports, I can't use the homebrew formula.\n\ncould you elaborate on the technical reason of that?. Still you would like to know why your MacVim build was failed, I would recommend you to read the build error message and read https://github.com/macvim-dev/macvim/blob/master/src/auto/configure script thoroughly in order to set configuration properly.. @LukeOrgana Can you share the crashlog under ~/Library/Logs/DiagnosticReports? And can you repro this issue in the latest Vim? You can install brew install vim using http://brew.sh/ , or via your favorite package manager.. @clamey can you confirm these?\n- MacVim snapshot-117: mvim -u NONE -U NONE -N -> :set -> crash\n- Vim homebrew latest: vim -u NONE -U NONE -N -> :set -> don't crash. Fixed in 1de4548643335b10b5759642c3594f2fc976cab1. Could you share the crashlog under ~/Library/Logs/DiagnosticReports?. @RichardDooling snapshot-116 works fine for you?. Can you guys try snapshot-118? https://github.com/macvim-dev/macvim/releases/tag/snapshot-118\nI'm not so sure it will fix your case since I didn't get the crashlog from @Robert-M-Muench \n. @RichardDooling just use MacVim as usual is enough. snapshot-119 should be fine if the crash was came from Python 3.\nhttps://github.com/macvim-dev/macvim/releases/tag/snapshot-119. @Robert-M-Muench thanks, I can confirm the cause of the crash.. I can't repro this issue. maybe depends on .tmux.conf?. mvim script is in the dmg.\nhttps://github.com/macvim-dev/macvim/releases/latest\n. I can't repro this issue on macOS 10.12.2 and Xcode 8.2.. It sounds Vim issue. I recommend you to check the issue with the origin Vim.\nhttps://github.com/macvim-dev/macvim/wiki/Troubleshooting#test-the-original-vim. Apparently Travis CI is busy (or something wrong https://www.traviscistatus.com/ doesn't mention it though) https://travis-ci.org/macvim-dev/macvim/builds/194583426. I can't repro this with snapshot-124.. MacVim binary snapshot and installed with brew install macvim-dev/macvim/macvim --HEAD work with both Python 2.7.x and Python 3.6.x. However due to Python module loading, MacVim(Vim) can't load both Python shared libraries at the same time. It means each single Vim instance can load only one Python version.\n$ mvim -u NONE -U NONE --noplugin -c 'py print(\"test\")'\nWORK\n\n$ mvim -u NONE -U NONE --noplugin -c 'py3 print(\"test\")'\nWORK\n\n$ mvim -u NONE -U NONE --noplugin -c 'py print(\"test\")' -c 'py3 print(\"test\")'\nDOESN'T WORK\n\n$ mvim -u NONE -U NONE --noplugin -c 'py3 print(\"test\")' -c 'py print(\"test\")'\nDOESN'T WORK\n\nIf you really really need to use Python 2.7.x and Python 3.6.x at the same time, you need to build Python 2.7.x and Python 3.6.x by yourself with the certain compiler flags. I wrote the document to use pyenv for that purpose. https://github.com/macvim-dev/macvim/wiki/Python-2.x-and-Python-3.x. \ud83e\udd37\u200d\u2642\ufe0f .     ln -Fs find /usr/local -name \"MacVim.app\" /Applications/MacVim.app. Have you set ambiwidth option?\nset ambiwidth=double\n\n. Same as #32. It sounds you have multiple MacVim.app. Can you confirm that you have only one using find / -name MacVim.app?. I can't repro this. Can you paste the result of ps auxww|grep MacVim?. Could you try these steps?\n$ killall -9 MacVim\n$ killall -9 Vim\n\nRemove all MacVim icons from dock. Then launch MacVim by cmd+click-ing on iTerm. And select \"Keep in Dock\" on the launched MacVim icon on Dock. And launch MacVim by cmd+click-ing on iTerm again.. Do you have any idea how to do that?\nhttps://github.com/macvim-dev/macvim/blob/master/src/MacVim/MMAppController.m#L965-L975. Already reported in Vim issue. This PR should be for Vim and it was already reported I think.. I'm sorry, that is not in this project's scope.. thank you for your report. fixed in d00667fcd386f8cce18dd041e60afe562afe0e10. I'll close this since it's not MacVim issue. I encourage you to post your question to the vim_mac Google Group https://groups.google.com/forum/#!forum/vim_mac. \ud83d\udc4d . MacVim does support if_python3. The exact same reason as the error message says E837: This Vim cannot execute :py3 after using :python, your .vimrc or somewhere else, it uses if_python. That's why MacVim couldn't use if_python3 at that time.. you are right. thanks.. It'll work without any changes, I think.. maybe after the test failure fixed.. Please take a look at https://github.com/macvim-dev/macvim/issues/366\nAnd you can stop auto update (Sparkle) https://github.com/macvim-dev/macvim/wiki/FAQ#how-can-i-disable-autoupdate-sparkle\nPlease let me know if you find something suspicious.. Updated the official MacVim Homebrew formula to install gettext po files https://github.com/macvim-dev/homebrew-macvim/commit/22c39f35bf938c3a7d7df36e2e011c6cf0f1eac3. I'll update .travis.yml to bundle po files for the binary release if needed.. Thanks, fixed in cc99aa38bd249282c84c8bc0105ea6c9dc6e2423. - I put mvim script into the bundle, like /Applications/MacVim.app/Contents/MacOS/mvim.\n- Updated the FAQ. Fixed in b8b35c865d437f8df960d8103516d79922fcf8c1. it was moved https://github.com/macvim-dev/macvim/issues/475#issuecomment-288217993. mvim now works via symbolic link in master.. I put vim script as well in the bundle, /Applications/MacVim.app/Contents/bin/vim. We can use this vim script instead of the binary.. yes, MacVim.app/Contents/bin/vim script (symbolic link to the mvim script that was also fixed for symbolic link in master) will be included in the next release.\nThe VIM_APP_DIR setting line in the mvim script will be replaced as this.\nif [ -L $0 ]; then VIM_APP_DIR=`dirname \"$(readlink $0)\"`/../../..; else VIM_APP_DIR=`dirname \"$0\"`/../../..; fi. Eh, well, this is MacVim, it is for Apple macOS. Technically speaking, Vim part of this repository could be compiled for other supported platform aside from macOS, But it is not intended. I recommend you to visit http://www.vim.org/ .. Have you tried to use `pythonthreehome` instead of PYTHONHOME?. It's `pythonthreehome` in Vim not `PYTHONTHREEHOME` environment variable. Have you?. In Vim, could you paste of the result of `:set pythonthreehome?` and `:set pythonthreedll?`. Maybe Homebrew Python3 has issue. It is worth to try to reinstall python3, `brew install python3`.. python3 supporting code has not been changed between snapshot 127 and HEAD. So the solution might be `brew reinstall python3`.. Because snapshot-130 binary requires Python 3.6.1. Python 3.6.0 and 3.6.1 are NOT binary compatible.. The binary release supports only system Ruby, 2.0. You need to build MacVim by yourself for that. I updated the official Homebrew MacVim formula to support that as well.\n\nhttps://github.com/macvim-dev/homebrew-macvim\n(Install Homebrew)\n(One time set up)\n$ brew tap macvim-dev/macvim\n(Set up $PATH environment to ensure to have the ruby command what you want to use if_ruby with)\n(Install MacVim)\n$ brew install --HEAD macvim-dev/macvim/macvim\n\n. The reason might be that $SSH_ASKPASS was overridden by your vimrc or something.\nThat value is set correctly by the system gvimrc.\nhttps://github.com/macvim-dev/macvim/blob/a8e1b3df21954b6259f66d1541a56d811ac0067f/src/MacVim/gvimrc#L41. fpp uses /dev/tty. GVim and MacVim doesn't support it.\nMaybe we can use pty instead, but fpp uses terminal feature to draw the GUI. It also won't work on GVim and MacVim.. 6458d0b6bdc02a07bcad0af586a2d40e8af7773b. Maybe it would be better to only share the find pasteboard if user used Find dialog on GUI, but it would need to modify Vim code as well. It's not worth it. I'll add defaults way.. I think #504 fixed this. Unfortunately, Vim (or MacVim CUI on console) doesn't have any capability to do that (MacVim GUI DOES have that).\nMaybe you can use Karabiner to send ESC and key combination to disable IM when you hit ESC, or something like that.\nhttps://pqrs.org/osx/karabiner/. thanks for the report. won't fix.. I don't have Apple Developer Program.. Could you guys try to use snapshot-139? https://github.com/macvim-dev/macvim/releases/tag/snapshot-139. @alanning I think it just changed Xcode from 8 to 9.1. https://github.com/macvim-dev/macvim/commit/50e45d2e95ea8a074810bd59f842ad38253727ea. brew reinstall python3 may fix if you are using Homebrew.. merged, thanks.. still happening?. I don't think I can do something for this issue. Maybe support will help https://github.com/contact. we need runtime check since NSTextStorage is only for macOS 10 or later, and I don't think renaming attribString is absolute necessary.. oh, thank you for pointing out. I thought it was 10.10. do you have any information of the performance gain? like Instruments screenshot.. already in snapshot-135. I don't think it's MacVim issue. You may post your question to the vim_mac Google Group ( https://groups.google.com/forum/#!forum/vim_mac ).\nhttps://github.com/macvim-dev/macvim/wiki/FAQ#my-question-is-not-answered-in-this-faq--where-can-i-ask-for-help\n. applicationShouldTerminateAfterLastWindowClosed: returns YES if \"Quit MacVim\" selected. And it worked as expected. I guess the cause of issue might be related to plugins you're using.. Since 8.0.0957, term_sendkeys has been non-blocking. However I don't know how to wait it.. The timing of channel handling are totally different between GUI and non-GUI. Contribution(updating document) is always welcome :). :+1:. Solution:\n\nIf you haven't launched Xcode after updating it, do so now. Xcode will ask for permission to install additional components. Let it install those components.. yep, using Travis CI to ensure ruby support https://github.com/macvim-dev/macvim/blob/2a33867b14fe6639ed906c61aaa6852f391e0008/.travis.yml#L44. duplicated #525 . @mario-grgic I recommend you to use the official Homebrew Tap for MacVim if you'd like to build MacVim by yourself.. > That\u2019s a silly recommendation.\n\nCan you elaborate on why the recommendation is \"silly\"? Homebrew Tap is one of the greatest tool to provide a way of building app to people who would like to compile the app by themselves. And the important thing is that anyone can do that without deep knowledge of compiler toolchain, shell environment, configure flags, and so forth.\nBy the way, why don't you elaborate on your bug report? You didn't mention about any useful information to look into the issue, like Xcode version, configure flags, or so on.. > By the way the current home-brew tap for MacVim assumes Xcode 8 anyway\nNo, it works fine with Xcode 8 and Xcode 9, on 10.11, 10.12 and 10.13.. Still it is not enough information to look into if it is really MacVim issue. Since it may vary with your system, environment, and so on. Please let me know where we should fix if you noticed something wrong in MacVim repository. There are useful information in Homebrew Tap and .travis.yml.\n\nhttps://github.com/macvim-dev/macvim/blob/50e45d2e95ea8a074810bd59f842ad38253727ea/.travis.yml#L17\nhttps://github.com/macvim-dev/macvim/blob/50e45d2e95ea8a074810bd59f842ad38253727ea/.travis.yml#L21\nhttps://github.com/macvim-dev/homebrew-macvim/blob/01db141d85b85200ec2ee7b1bf550709647dc964/macvim.rb#L27\nhttps://github.com/macvim-dev/homebrew-macvim/blob/01db141d85b85200ec2ee7b1bf550709647dc964/macvim.rb#L30. @junkblocker @mario-grgic could you try https://github.com/macvim-dev/homebrew-macvim first? It is really helpful to track down the issue.. @junkblocker you mean you were able to install MacVim using https://github.com/macvim-dev/homebrew-macvim , right?\n\nThen you can use the build log in order to figure out why your build was failed.\n$ HOMEBREW_VERBOSE=1 brew install -vd --HEAD macvim-dev/macvim/macvim |& tee log\n\n. @markwu could you paste the build error?. #601 . Would you mind to ask the maintainer of https://github.com/Homebrew/homebrew-core/blob/master/Formula/macvim.rb ? I don't support it.\nFeel free to create an issue if you found any issue with https://github.com/macvim-dev/homebrew-macvim. Updated https://github.com/macvim-dev/macvim/releases/tag/snapshot-138\nPlease reopen if still happening with snapshot 138 binary.. Could you guys try this with Core Text renderer?\n$ defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES. @dmost1 what do you mean by \"errors\"? No more black screen with `MMUseCGLayerAlways=YES`?\n\n@alokshenoy see https://github.com/macvim-dev/macvim/blob/master/src/MacVim/MMCoreTextView.m. Again. Could you guys try this with Core Text renderer?\n$ defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES. Updated FAQ https://github.com/macvim-dev/macvim/wiki/FAQ#black-screen-on-full-screen. will reopen this but I have been not able to repro this at all, so no further action from my end.. :+1:.     Found errors in Test_paused():\nfunction RunTheTest[24]..Test_paused line 20: Expected range 0 - 30, but got 40\n\nmaybe we need a workaround to pass the test?. sounds the same as #554. you need to update Python to 3.6.3.. > UPD Need to install python3 over brew, with official python packages it does not work.\ninteresting. the official python binary should work as well as Homebrew one. Could you try to adjust pythonthreedll and pythonthreehome in your .vimrc?\nhttps://github.com/macvim-dev/macvim/blob/dbb801fbab8dc6691952ed32cec58482cfcfe8fa/src/MacVim/vimrc#L27-L36. It was fixed in https://github.com/macvim-dev/macvim/commit/14363db5ce35d427f2b4b1ee28217edfe9ed3198. You can check the preferences anytime from Terminal.\n$ defaults read org.vim.MacVim. duplicated of #525. You need to install Ruby 2.0.x and Lua 5.2.x for the current binary release (The next binary release supports Ruby 2.4.x though.) Also you may need to set `rubydll` and/or `luadll` in your .vimrc. something like\n\nset rubydll=/usr/local/lib/libruby.2.0.dylib\nset luadll=/usr/local/Cellar/lua52/5.2.1/lib/liblua.dylib. It's intentional. MacVim binary release supports Ruby 2.4 at this time. Since Homebrew default version has already been Ruby 2.4. One of the easiest solution is `brew install ruby`.. By the way, MacVim binary release has been requiring libruby dylib if you want to use Ruby interface. Start from snapshot-142, MacVim binary release supports Ruby 2.4.x libruby dylib binary. Before that, MacVim had been depending on Ruby 2.0.x libruby dylib binary which was already there in macOS system. But it was outdated in terms of using Ruby and macOS 10.13 adopted Ruby 2.3 instead. So the best solution is just using the latest stable, Ruby 2.4. just like using Python 3.6.3 for Python interface in MacVim binary release.\n\nThe easiest way to use Ruby interface with MacVim binary release is installing https://brew.sh/ and executing brew install ruby. No need to set up rubydll with that.. Also https://support.apple.com/kb/PH25088?locale=en_US. how about crashlogs?. Apparently Python 3 crashed. Are you using Python 3.6.3?. could you elaborate the crash? and could you paste the stack trace in gist?. you may have Vim or MacVim crashlogs in ~/Library/Logs/DiagnosticReports.. We need a repro step to crash MacVim, as simple and short as possible.. Do you have Ruby 2.4.x? (libruby.2.4.dylib) you may need to set rubydll.\nhttps://github.com/macvim-dev/macvim/wiki/FAQ#how-to-use-pythonrubylua-interface-in-macvim. How about https://github.com/severin-lemaignan/vim-minimap?. duplicate of #579. It only happens only on 142? how about older versions?. #614 . I only support Homebrew Tap for MacVim https://github.com/macvim-dev/homebrew-macvim and don't forget to launch Xcode first https://github.com/macvim-dev/macvim/issues/546#issuecomment-331941850. https://github.com/macvim-dev/macvim/wiki/FAQ#how-to-use-pythonrubylua-interface-in-macvim\n\nHow to use Python/Ruby/Lua interface in MacVim?\nThe easiest way is using Homebrew https://brew.sh/. Install Homebrew and brew install python3, brew install ruby, or brew install lua.\nYou can use any distribution of Python/Ruby/Lua dylib binaries as long as those versions are the same as the MacVim binary supported version. You may need to set up your .vimrc like following.\n\nset pythonthreedll=/opt/Python3.6.3/Frameworks/Python.framework/Versions/3.6/Python\nset rubydll=/opt/Ruby2.4.1/lib/libruby.2.4.dylib\nset luadll=/opt/Lua5.2.1/lib/liblua.dylib\n\n. Duplicate of #598. merged. thanks!. fixed 594349b5e7a2512abc7afce1b3c032f2cc298a53. > Is there any other way to get macVim onto High Sierra ?\nI recommend to use binary snapshot release. The second option is Homebrew tap for MacVim https://github.com/macvim-dev/homebrew-macvim . Both works pretty well on 10.13 as well.. How about this https://github.com/vim/vim/pull/2178 ?. thanks!. I recommend to use https://github.com/macvim-dev/homebrew-macvim instead. Can you try the binary snapshot https://github.com/macvim-dev/macvim/releases/tag/snapshot-144 and Homebrew tap https://github.com/macvim-dev/homebrew-macvim ?. The latest snapshot binary supports only Python 3.6.3.\nhttps://github.com/macvim-dev/macvim/releases/tag/snapshot-144. thanks!. I can't repro it. please try binary release https://github.com/macvim-dev/macvim/releases or https://github.com/macvim-dev/homebrew-macvim. Could you show me what the output looks like of\n$ ls -lai /Applications/MacVim.app/Contents\n$ ls -lai /Applications/MacVim.app/Contents/bin\n$ ls -lai /Applications/MacVim.app/Contents/MacOS. I have no idea what's going on. probably I can't do anything for the issue.. fixed by #630. No repro with snapshot-145.. I don't have any opinion about that :) and I can revert it #637. \ud83d\udc4d . \ud83d\udc4d . first of all, the ruby interface is if_ruby http://vimdoc.sourceforge.net/htmldoc/if_ruby.html\n\n:! http://vimdoc.sourceforge.net/htmldoc/various.html#:! depends on your shell environment.. \ud83d\udc4d . No side effect?\n@sachka could you squash your diff and update that to use # if defined(FEAT_GUI_MACVIM) and gui.in_use like #651?. merged #664. huh, ok, https://discourse.brew.sh/t/python-and-pep-394/1813\nbrew install python -> /usr/local/bin/python3\nbrew install python@2 -> /usr/local/bin/python and /usr/local/bin/python2. \ud83d\udc4d \ncan we send it to upstream? or can we have #ifdef FEAT_GUI_MACVIM around the modification?. do you mind to add #ifdef FEAT_GUI_MACVIM in order to keep the original code? it will help merging future.. \ud83d\udc4d . Are you asking that Non-GUI Vim can be server on macOS? It isn't supported, IIRC.. sure. done. You should ask the maintainer of the formula instead of here.\nAnyway I recommend you to use the official MacVim formula https://github.com/macvim-dev/homebrew-macvim which I only support.. Should we revert f53f990?. interesting... yeah, I can see two MACOSX_DEPLOYMENT_TARGET=10.13 lines in the build log. It supposed to be 10.8.. Can you guys try https://github.com/macvim-dev/macvim/releases/tag/snapshot-148?. Added workaround in 4d9b1a2c01877370b200f8b7e720808530c71cad. could you fit the indent?\n. I had exactly the same thought about that. However I couldn't find any situation that the code is needed on El Capitan. If you find anything, please feel free to create issues.\n. Sparkle update is only for 10.8 or later, just use one if -ge 8 is ok.\n. I think we can set default value in https://github.com/macvim-dev/macvim/blob/master/src/MacVim/MMAppController.m#L185-L219?\n. fadeTime = MAX(fadeTime, 0.45 * kCGMaxDisplayReservationInterval);\nlike https://github.com/macvim-dev/macvim/blob/master/src/gui_gtk_x11.c#L5083? It might need extra include though.\n. generics is good, but MacVim code base doesn't use it yet.\n. why do we need lock?\n. I know. It will be called from the other thread?\n. So have you checked that handleShowDialog: was called from the other thread?\n. If we really need lock here, it means that some code path calls handleShowDialog: on the other thread. It is supposed to be called on the main thread only. We should fix it.\n. Could you move processAfterWindowPresentedQueue to Private category and add declaration to align with other private methods?\n. [afterWindowPresentedQueue release]; afterWindowPresentedQueue = nil;\nwe don't need afterWindowPresentedQueue any more, right?\n. we don't need { } here in order to align with MacVim coding style.\n. Hmm, I don't find any good reason to use NSOperationQueue here. It would be on the main thread and we just need to execute blocks, right? How about\nfor (void (^block)(void) in afterWindowPresentedQueue)\n        block();\nand\n[afterWindowPresentedQueue addObject:[block copy]];\n. could you fix the indent? and gui= doesn't work (instead of gui='')\n. why releaseLayer here?\n. context:nil will work, maybe?\n. looks good to me, but do you know any other macOS apps that has the same menu items? I think usually \"Bring All To Front\" item is the last item in Window menu (except window list).\nWindow.-SEP2-\nWindow.Stay\\ On\\ Top\nWindow.Stay\\ On\\ Bottom\nWindow.Stay\\ Level\\ Normal\nWindow.-SEP3-\nWindow.Bring\\ All\\ To\\ Front. yeah, using same naming as Apple app sounds reasonable > \"Stay in Front\" and \"Stay in Back\". We need this `ifdef FEAT_GUI_W32`?.     if ([NSProcessInfo instancesRespondToSelector:@selector(isOperatingSystemAtLeastVersion:)]) {\n  NSOperatingSystemVersion version = {10, 13, 0};\n  is_macos_high_sierra_or_later = [[NSProcessInfo processInfo] isOperatingSystemAtLeastVersion:version];    \n}. Sorry, I meant we don't need check_system_version method, specially the SystemVersion.plist part since isOperatingSystemAtLeastVersion: is available on 10.10 or later.. I don't think we need to support that situation. Using SDK 10.9 or earlier and run the binary on 10.13 or later. It's overkill. We do support the latest Xcode + the latest SDK, and the binary could run on 10.8. Probably people can use SDK 10.8 for building MacVim for 10.8, but not for 10.13.. So the minimal code would look like\n\n}\n\n#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10\n    if ([[NSProcessInfo processInfo]\n            respondsToSelector:@selector(isOperatingSystemAtLeastVersion:)])\n    {\n        NSOperatingSystemVersion version = {10, 13, 0};\n\n        is_macos_high_sierra_or_later =\n            [[NSProcessInfo processInfo] isOperatingSystemAtLeastVersion:version];\n    }\n#endif\n\n    return OK;. Current master .travis.yml uses xcode9.2, so `MAC_OS_X_VERSION_MAX_ALLOWED` would be 10.12 or 10.13, and `MAC_OS_X_VERSION_MIN_REQUIRED` is 10.8 as `MACOSX_DEPLOYMENT_TARGET` in .travis.yml..\n",
    "cristibalan": "I use both MacVim and iTerm2 with the non-native fullscreen option. Just got an external monitor today and hit this issue, then noticed that iTerm2 doesn't have it. This is on OS X 10.11, macvim snapshot 77 from brew cask.\nUnfortunately, I can't write objc/Cocoa, but I grepped the sources a bit and found out something.\nIt seems that iTerm2 sets the menubar to autohide when entering fullscreen on all screens while MacVim sets the size of the window to be less than the toolbar.\nI have the following in my config:\nfunction! OnVimEnter()\n  if has(\"macunix\") && has(\"gui_running\")\n    set antialias\n    set fuoptions=maxvert,maxhorz\n    set fullscreen\n  endif\nendfunction\nautocmd VimEnter    * call OnVimEnter()\nThe behaviour I'm seeing is that when MacVim starts the MenuBar is fixed on top and covers part of the first row.\n\nIf I then exit fullscreen and enter it again, the window positions itself under the menubar.\n\nHope this helps.\n. ",
    "hkdsun": "any updates on this issue? It would be nice to do what iTerm2 does. \nLike @chdiza said my workflow is having iTerm2 and MacVim overlay each other in older-style fullscreen mode and switch between them with a shortcut (or use transparent windows to see through the focused window)\n. ",
    "zhaodawei": "Do you have found, use the mouse to adjust the window size, window flashing.why?\nMacBook Pro (Retina, 15-inch, Late 2013) OSX 10.10.3 (14D136)\nhttps://cloud.githubusercontent.com/assets/3748452/7604236/e4dfb5de-f971-11e4-88a3-eca0662dd5d8.jpg\n. ",
    "ericcong": "@zhaodawei this bug existed before applying this PR. Maybe you can report this as an issue.\n. @douglasdrumond Hi Douglas, is there any update on the testing?\n. +1, really hope this can be fixed.\n. +1, got this bug when trying to exit split-screen.\n. ",
    "DavidChouinard": "Any update on merging this?\n. ",
    "xdhmoore": "+1\n. ",
    "bmccutchon": "Workaround: After increasing and then decreasing the font size while in full screen mode using CMD++ and CMD+-, the black bar goes away. This seems to demonstrate that the problem only occurs when entering full screen mode and not when changing the font size while in full screen mode.\n. Hah -- looks like I'm not the only one who was going to use split screen (with Preview) to edit LaTeX. Let's hope this gets fixed...\n. I also noticed crashing, but for me it also occurs in the normal full screen.\n. ",
    "moll": "I believe this issue has returned as seen in https://github.com/macvim-dev/macvim/issues/463.. I can confirm this on MacVim v8.0.124 and v8.0.596 with the above character in a text file.. I think the issue title should be renamed to \"crash due to Unicode\". It looks like a crash from Mac libs (I presume libFontParser.dylib is Mac's, not MacVim's...):\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   dyld                            0x00007fff69acf3a0 ImageLoaderMachO::getUnwindInfo(dyld_unwind_sections*) + 4\n1   dyld                            0x00007fff69ac9fc3 client_dyld_find_unwind_sections(void*, dyld_unwind_sections*) + 34\n2   libdyld.dylib                   0x00007fff915f296c _dyld_find_unwind_sections + 59\n3   libunwind.dylib                 0x00007fff8f8c2b6e libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::setInfoBasedOnIPRegister(bool) + 62\n4   libunwind.dylib                 0x00007fff8f8c36ba unw_set_reg + 99\n5   libc++abi.dylib                 0x00007fff8efa157c __gxx_personality_v0 + 316\n6   libunwind.dylib                 0x00007fff8f8c35e2 unwind_phase2 + 174\n7   libunwind.dylib                 0x00007fff8f8c2a44 _Unwind_RaiseException + 248\n8   libc++abi.dylib                 0x00007fff8efa0c4a __cxa_throw + 107\n9   libFontParser.dylib             0x00007fff8e55392d TcmapUnicodeTable::GetUnicodeSubtable(unsigned int&) + 335\n10  libFontParser.dylib             0x00007fff8e51f051 TcmapUnicodeTable::TcmapUnicodeTable(TSFNTFont const&) + 79\n11  libFontParser.dylib             0x00007fff8e51eef5 TSFNTFont::GetGlyphsPerCharacters(unsigned short const*, unsigned short*, unsigned int&, bool) const + 55\n12  libFontParser.dylib             0x00007fff8e530ccc FPFontGetGlyphsForUnichars + 608\n13  com.apple.CoreText              0x00007fff928f8c0a TcmapTable::Map(unsigned short const*, unsigned short*, long&) const + 210\n14  com.apple.CoreText              0x00007fff928f8ab2 TBaseFont::GetGlyphsForCharacters(unsigned short const*, unsigned short*, long) const + 82\n15  com.apple.CoreText              0x00007fff929054fa CTFontGetGlyphsForCharacters + 340\n16  org.vim.MacVim                  0x000000010153a599 recurseDraw + 54\nIt actually also happens in MacVim v7.4.2275.... ",
    "Gateswong": "This is one of my vimrc file corrupted. I followed this and found where broken:\nmvim -u NONE --noplugin -N\nmvim -u NORC -N\nmvim --noplugin -N\nmvim\nreference\nI'm sorry for opening this issue by mistake.\n. ",
    "tobireif": "On my MacBook, MacVim shows flickering streaks during resize:\nhttp://tobireif.com/non_site_stuff/for_macvim_bug_report_flickering/mac_vim_on_mac_os_10_10_resizing.mov\nIt does not occur in other apps I use.\n. I don't get any flickering anymore.. Seems sensible.\n. I now updated to the latest snapshot 7.4.909. Will post an update if I see errors again.\n. Do the MacVim developers get the same error? It fills the console when MacVim is started via a command.\n. If the reason is \"having searching in MacVim behave in a macOS-ish way\" then I say I do want to get and use Vim's search behaviour when I search inside a file/buffer I had opened/created using MacVim - not a different behaviour.\nI really hope this will be fixed. It's very bad to, as a side-effect, change data that has been entered in a completely separate app.\n\nBut it is 100% unbelievably beyond-the-pale annoying \n\nYes!\n. Thanks!. Thank you all!. Oh, I thought it will be disabled by default, and those who want the old behaviour could switch it on.\n@jpetrie wrote in #501:\n\"We could potentially disable this, but it would need to be a defaults setting, since some people do like this behavior.\"\nThis is what I want - in MacVim per default disable the strange behaviour where searching in MacVim using \"/\" affects other apps. (This behaviour is so unexpected and potentially problematic that it needs to be disabled.) Those who know about this strange feature and do want it can then enable it.. @jpetrie So I'll run this:\ndefaults write org.vim.MacVim MMShareFindPboard -bool NO\n@chdiza Perhaps best to submit a new issue report?. Which command would tell us that?. Core Test Renderer is checked, Native Full-Screen as well.\nNew windows have a white ~square, after resizing it becomes black with a tiny mixed-color square (eg as in the screenshot).. \n. Its just a small detail, and it doesn't bother me, but when I create screenshots and publish them it would make MacVim look cleaner if this were fixed .... Thanks for asking! Closing.. Screenshot:\n\nNo windows are open, but there's a black dot under the MacVim icon in the Dock.. I had and have this MacVim pref set:\n\nNormally it works. For example just now I closed the last MacVim window and the black dot in the Dock disappeared, as desired (and the MacVim icon in the Dock stayed, as desired).\nBut sometimes/often it doesn't work, the black dot (and I guess also the MacVim app) stays around.. It still happens:\n\n. Is this fixable?. I haven't added any plugins in years, but the issue I reported started a few weeks/months ago.\nThe issue does happen here.\nPlease re-open.\n. What data could I supply in order to enable you to reproduce the issue?. It only happens with MacVim, not with any other app I use.. It seems the issue is gone (perhaps it was caused by an issue in MacOS?), closing.. > could you elaborate the crash?\nAll MacVim windows disappeared (one or more), and then the window by Mac OS X appeared offering to send the report to Apple.\n\ncould you paste the stack trace in gist?\n\nI'm sorry, I had clicked on the window by the OS which had offered to send it to Apple, then it seems to have sent it, then the stack trace was gone. I should have copied it and provided it to you.\n. Yep just found it, just a sec\n. Here you go:\nhttps://gist.github.com/tobireif/cfb0d3f4ac94e4d587db809de173cdd3. Please feel free to request any additional info.\nI hope you can ensure that MacVim won't crash in the future \ud83d\ude00. I was simply using MacVim for editing a .txt file (and perhaps more), then it crashed. I have no idea how I could trigger another crash.\nYou had requested the stack trace - does it not help?. All I remember is that after editing something using MacVim I switched away from MacVim perhaps the Transmit https://panic.com/transmit/ window, then MacVim crashed.. Thanks for investigating!\nYes, it used to be very usable in a fast workflow. Now it's slow which is an issue, eg when I try to open several links in a row ...\n. Thanks!. (Yep, the issue persists here as well, on the same OS version.). Perhaps someone could report it to Apple at https://bugreport.apple.com/web/ .. I had installed MacVim (quite a while ago) from https://github.com/macvim-dev/macvim/releases , and since then it updates itself.. Sounds good!. I hope it will be possible to fix this \ud83d\ude00. > The next binary release will be signed by an Apple Developer ID which will (for some reason) fix this. \nThank you!. I currently have the latest MacVim version \"Custom Version 8.1.577 (153)\". Which version should fix the issue? Thanks in advance :). Thanks!. Thanks! I think the severe delay is gone. (Right at the start after opening a link there still is a certain amount of lag, but I don't know whether that's fixable.). The issue where it takes really long (since Mojave) definitely is fixed. Thank you!. ",
    "amadeus": "Just to add to this - here's a link to a vid showing more of this effect:\nhttps://dl.dropboxusercontent.com/s/eq1ypgbs691rpb3/screencast_2016-02-12_12-50-19.mp4?dl=0\nIt would be really nice to get this fixed\n. I think this is probably a pretty bad way to do it, since it ends up duplicating most of the commits?\nOn my own personal macvim fork I just simply use cherry-pick with a range to to merge things in quickly and easily.\ngit cherry-pick 9534680^..b860388\nIt's an inclusive range - so 9534680 would be the first new commit, and b860388 would be the latest commit on vim/vim's master branch.\n. If you looked at the branch I linked, I've cherry-picked in all the changes from this branch. Also, this is a slightly different error than the one in the MacVim thread.\n. Can confirm, this breaks for me as well :(\n. Sorry to bug, any update on this? If I knew C or Objective-C I would totally try to help, but unfortunately I don't :(\n. Is there any way I can tip some money to get this fixed? It's really causing me productivity problems and would love to see it fixed asap.\n. \ud83d\udc4d  on the surface, building with these commits seems to work! I'll continue to test and see if I can find anything.\n. I've been using this for a couple days and I think it's at least worth merging in its current state since it fixes a major issue. Improvements to performance and improving the transitions could come in later PRs.\n. Actually, scratch most of what I said.\nI believe the issue actually stems from this commit: a1fa892 - and since it wouldn't build on MacOSX after that until it was merged, I believe it's something to do with that. . OMG THANK YOU FOR THIS!. I don't think so? I'm using Source Code Pro. What would be the setting to disable ligatures?. Ahh yeah, it's off by default then for me.. I'll look to make a video tonight, but it will be from a 5k imac screen, so rather large. I think the issue has something to do with how wide the document is. If I split the screen a bunch, even with the same file, performance definitely improves.. As promised, here's a link to a video showing off the performance differences:\nvideo\nAs an FYI, all 'scrolling' was done by holding down <c-e> or <c-y>.\nAlso I just split my current file by doing <c-w>v. Just a bump on this, any ideas on why it might be performing like so and could it be improved?. I also want to add an additional video - of nearly the same experiment but using a non retina, or a 1x monitor:\n\nNotice how there's almost no difference in scroll speeds.  This leads me to believe there's something that gets wildly inefficient on retina displays.\nAlso another anecdote I think I've seen as well - native full screen performs a bit better than non-native full screen.\nI guess to be fair, retina is pushing 4x the pixels, but still, it would be REALLY nice to improve this experience.. I don't really know Objective-C, however doing a little digging I did notice a couple additional things to add to this issue:\nThe issue appears when using non-native full screen.\nThe issue seems to surface whenever cgLayerEnabled is set to true in MMCoreTextView. Based on my experiments, that value is normally false in native full screen or windowed mode.\nFor reference, I use these MacVim settings:\n\nI did some poking around in the drawRect function of MMCoreTextView, and sure enough, when using non-native full screen, cgLayerEnabled becomes true and we get  very sluggish performance (on large, high pixel density screens):\nhttps://github.com/macvim-dev/macvim/blob/27bdb64a26aa4f69905b576ee8bbbf8b93cc5080/src/MacVim/MMCoreTextView.m#L607-L650\nFrom what I can tell, the non cgLayerEnabled codepath (aka the else path):\nhttps://github.com/macvim-dev/macvim/blob/27bdb64a26aa4f69905b576ee8bbbf8b93cc5080/src/MacVim/MMCoreTextView.m#L642-L649\nis super efficient as it only updates parts of the screen that are necessary unlike non-native full screen that re-renders the entire document, killing performance on 5k retina monitors.\nWhen I tried forcing that codepath on non-native full screen, i would just see black, unless I scrolled or did something and then would temporarily see region'd updates to the screen before going black in the next frame.\nLooks like the only way to fix this would be for non-native full screen to use the batchDrawData function somehow, but that gets a bit out of my league.. This used to be a problem with all emoji, and they did some stuff to make those characters double wide. I am pretty sure it's fixable, they just may have to add some additional characters to it.\nI.E. . Yup, this fixes it! Thanks for the tip!. I bet it's related to this issue - https://github.com/macvim-dev/macvim/issues/499\nOn retina screens the renderer really chugs. It's not super noticeable on a macbook screen at default retina resolution, but if it's a big retina screen, it totally tanks.. OMG I think this has been rusing me for a few months now and I thought it was a bug in a plugin... thanks for this!. Not totally sure, but I think this PR may have created a new bug:\nexample. This definitely fixes the bug from earlier that I found - however another interesting bug I see is that emoji seem to now be positioned slightly off, which causes a bit of cropping to the emoji:\n. It actually appears to effect every emoji I've seen? Another example\nU+1F60E\n\nU+1F600\n. In terms of the other characters, the codepoints (in order) are:\nU+1F3FB, U+1F3FC, U+1F3FD, U+1F3FE, U+1F3FF. Thanks so much!. Unfortunately it appears that MacVim is completely unusable on Mojave. Is there any temporary fix?. Just as an FYI - performance on a 5k retina display (using this branch), when the window is maximized or full screen is actually way slower than the version built with the older SDK. Here's a video example. I tab between both version - the one with the white macOS bar at the top is the current version from the releases section (built using the old SDK) and the one with the dark theme title bar is from this branch:\nhttp://wtf.amadeus.wtf/monosnap/screencast_2018-10-10_22-00-15.mp4\nJust as an FYI - I am just holding down j and k for moving the cursor up and down - not tapping it. and <c-y> and <c-e> for scrolling.\nAs you can see, the version from the old SDK is significantly faster and more performant.. @s4y unfortunately performance still appears to be pretty slow - here's another video example comparing the versions:  (dark theme header is built off commit 0015e854b)\nvideo. If I build off of master, rendering is completely screwed up. However it's super responsive as you can see here:\nvideo\nAs a follow up, are you ensuring you only have 1 document open and the window is either full screened or resized to the full width of the screen?. While I don't really have much say, I think it would be awesome to have someone like you who knows what they are doing, spend some time really creating a great renderer for MacVim! A top level LICENSE file should be super quick to add and I hope it does not become a blocker!. I'd be happy to help getting a license file in order. I imagine we'd want to copy the one Vim uses? https://github.com/vim/vim#copying\nWe have a few MIT licenses in the project as well for various plugins - so not sure if there needs to be any additional language to accommodate those other pieces. We have someone who is knowledgeable and willing to work on this serious issue here, and all that is required is a simple license file, I'd hate for that to continue to be a blocker here. It's nearly been 10 days and there's been nothing from any of the maintainers about this. Can we please get the ball moving on this? It's a pretty major problem.\nI am totally willing to put together a license file provided I have some direction on the requirements, but this really shouldn't be hard to get done and it can enable s4y to start working on this. \ud83d\ude2c . Just built it and ran it. So far the best version yet, however it still feels a bit slower than the previous version (the version built on the old SDK - downloaded from releases). And the wider the window the worse performance gets, even though the lines don't continue all the way offscreen.\nI've included a few videos showing these differences (videos with the light title bar are the old SDK version, and the dark theme bar are this new build). I have a very fast keyboard repeat rate, and I use this to show the differences in performance, since this version performs a bit slower than the old version. Also worth noting all these were conducted on a late 2015 iMac Retina.\nMoving cursor up and down by holding j/k\nOld SDK\nNew SDK\nThe window is full height and half the screen size during this test. You'll notice a small bit of jank in moving the cursor up and down in the new version, vs feeling much smoother on the old version.\nScrolling document by holding <c-y>/<c-e>\nOld SDK\nNew SDK\nIn this test, the window was maximized (but not full screen). The new version scrolls significantly slower than the old version. Performance gets marginally better if I make a ton a vertical splits and narrow the document. Not sure how feasible it is, but it would be awesome if we could overall improve performance from the old version, but that may be out of scope for this project.. A bug I am also seeing is sometimes when changing the font size using cmd+- or cmd+= the screen blacks out and doesn't seem to recover unless I resize the window. :redraw does not seem to fix it. Omg, this is night and day faster!\nI have a very fast keyboard repeat rate and so scroll performance is super noticeable when it chugs!\nGreat work so far, excited for what's to come!\n(I'm on vacation right now - so won't have a ton of opportunity to test). One small thing I have noticed:\n\nEvery once in a while, a tiny artifact will appear, in roughly the same-ish location. It looks like a dead pixel but I can confirm its not since (a it comes through on screenshots) and be it follows the window when I move it around.  If I scroll the document it goes away. It's also really bad if you run any sort of :! command that has a lot of output - for example a :!git pull that then spawns a ton of lines of text. I've had the entire app become completely unresponsive for about 10 seconds due to this.\nThe new renderer needs some pretty significant performance improvements I think.\nRandom thought - would there be any way we could copy the implementation from like iTerm2 or something? I imagine it's open source, it's pretty damn fast, could be really nice, but I imagine not a simple drop in replacement either. . For what it's worth, this has made a massive perceived improvement to rendering, so thank you!\nI still look forward to the GPU rendering world, but thanks for this!. One small thing I noticed with this latest version, fonts are a bit thinner:\n\nI guess visually I prefer the thicker looking fonts, but I realize it's kinda been a re-occuring thing with Mojave that font rendering has thinned up a bit, and might just be what I need to get used too now?. Ok - I did find some pretty serious bugs. I normally use Source Code Pro as my main font, but I was messing around with https://github.com/tonsky/FiraCode and set macligatures and the app would straight up crash or show some weird rendering artifacts while typing out the ligatures.\nSome fairly easy repros:\n:set guifont=FiraCode-Retina:h14\n:set macligatures\n:edit example.js\nThen just type like an arrow function:\nconst example = arg => true;\nAnd you should see some weird rendering bugs and probably a crash or two. If not, try other ligatures like !== or ===\nAnother thing I noticed, not sure if a bug or not (it appears to be in the previous version too so not a result of this branch, but potentially something that could be fixed here), in insert mode with the | style cursor, it will end up blinking underneath text. \n. Found another funky issue with line heights and how they are rendered:\n\nIt happens on the other side of the powerline, although sometimes doing stuff in the window causes the line to get cropped properly.\nEDIT: Also been noticing that non native full screen, when activated on my iMac, seems to get stuck in a weird way where the window isn't full screen, but it just renders a blank screen, and I can't interact with it any longer, I have to close macvim completely to recover. I wasn't noticing this on my Macbook Pro, for some reason :/. ",
    "jordwalke": "Just executing winsize commands does not seem to cause flicker, yet when dragging the flickering is terrible. What if dragging just executed the corresponding winsize commands as you dragged?\n. @jpetrie / @splhack \nI know that @jpetrie mentioned rewriting the renderer (which might enable cool pixel granular scrolling), but to solve this glitching issue, might the winsize trick I suggested above be easy to implement? Would you be so kind as to estimate how difficult this is or how much time it might take?\n. Sometimes when I move my cursor over the rendering, it reverts back to the original characters? Should this issue be reopened until the issues are resolved?\n(Great work implementing it though!)\n. Is there another open github issue tracking it?\nI experimented with adding text editor ligatures, and I found that drawing all content in the editor one line at a time (and only ever one line at a time) was the easiest way to get everything working consistently - apologies if that suggestion is incredibly naive.\n. I think your gif demo shows something different than what I'm describing. In your example, I think it doesn't seem as bad because the moment you leave the line, it renders correctly. What I'm seeing is that even if you leave the line - it still is not repaired. I believe the reason is that you have line highlighting on (highlighting the current line) - whereas I do not. The behavior I'm seeing would warrant leaving this issue open - whereas if I had the experience you demonstrated, I would say that it is somewhat usable. Currently, with what I'm seeing it's not. Would you try disabling your current line highlighting and seeing if you agree?\n. \nAlso, as you can see here, there seems to be some other serious issue. That line only has one semicolon at the end, yet two are rendered because - for some reason - when the == glyph is broken back into the two separate characters, it makes the line shorter and draws the new semicolon, while leaving the old one.\n. Yes I would - do you have a branch that I should try?\n. I don't understand what you did, but I think that diff definitely improves things and fixes critical bugs. A couple of thoughts:\n1. The lengths don't see to jump around anymore when you move through lines (even when I have done defaults write org.vim.MacVim MMCellWidthMultiplier 0.9 - a custom setting) so that's good.\n2. The bugs with double rendering seem to be gone.\n3. When I move my cursor over a ligature, it breaks the ligature apart like I previously mentioned. If you have cursorline enabled, it is only for the duration of your cursor being on that line. If there's no better solution, is there some way to  force cursorline to be on when ligature support is enabled - (even if it means forcing cursorline on with the same background color as normal). This would at least be nice to have as a warning on the preferences pane (\"enable cursorline for better rerendering of ligatures\").\n4. Splitting a ligature when you move the cursor over a ligature is actually a good thing IMHO. What's not good, is when it isn't restored after you move away from that ligature. Is this hard to fix?\nThis is strictly better than what was in master so I imagine there won't be trouble getting this merged?\n. There's one remaining major issue with your patch (off by one error?)\nIf I type => everything looks fine:\n\nBut then when I type one more character immediately after, it ruins the previous ligature. \n\nHowever, if I had left a space before entering another character, the ligature is not destroyed.\n\nOf course it's always destroyed if the cursor is exactly over the ligature, which we already discussed - but these pictures above show something different.\n. @shirk: Do you know what's up with this rendering issue for Pragmata Pro?\nOther ligature fonts seem to render fine.\nhttps://github.com/fabrizioschiavi/pragmatapro/issues/13\n. Here's a screenshot of TextEdit which supports ligatures:\nEverything looks fine in this editor:\n\nAnother thing that this shows, is that the * character appears to be rendered incorrectly in MacVim. Here's what the stars look like for Pragmata Pro in MacVim.\n\nNot only are they showing up incorrectly as literal \"stars\", but they are compressed to half their normal rendering width.\n. What could cause the word \"back\" to be rendered as a glyph that looks like \"backwards\"?\n. That seemed to fix the issue with Pragmata Pro nicely! (The other issues remain as expected).\n. Can you go into detail about my thoughts on having MacVim maintain its own virtual grid of characters in plain character arrays? I thought since text drawing is very expensive, it might benefit from the same kind of \"virtual DOM\" concept we employ in ReactJS where we are at liberty to rerender whenever we want, but then do a more intelligent diffing strategy to see if anything actually changed before physically rerendering certain parts to pixels. You could apply your own heuristic to determine if a change is actually \"worthy\" of redrawing. (Apologies if this is already how MacVim's text works - I have no experience with its implementation).\n. How do you get the cursorline to be the exact same color as whatever the background color is without setting it to NONE which doesn't really work? How can you keep it in sync  whenever the color scheme changes? \n. Yes, agreed - this is truly wonderful. I tell everyone I can about these ligatures. Thank you everyone.\n. The result of this diff is that MacVim has a reasonable user experience for ligature fonts if you have cursorline enabled.  There are still remaining issues being tracked, but I can confirm that this fixes bugs that were currently already merged into master. \n. Any update on this?\n. My justification for suggesting this be merged is that it fixes bugs that are in master and seems to not make anything else worse. Of course, I'd love for everything to be redrawn at the right time perfectly with or without cursorline. But there are many people who would do anything for ligatures. For those people, with this implementation, it's pretty easy to add a little tweak to their vimrc:\nvim\nset cursorline\nhighlight CursorLine guibg=NONE\nNot to downplay how awesome it would be for this to not be necessary.\n. \nThere is certainly an option (already in master, in fact) - @Shirk will have to confirm that it actually has no impact when toggled off - but I can't even detect a perf impact when toggled on (on my very weak macbook).\n. The solution, as someone reported here, is to run in a clean bash environment - I have no idea what could be interfering:\nhttps://github.com/qvacua/vimr/issues/13\n. So I discovered what was causing this. Building Webkit tells you to add this to your bashrc:\nexport DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer\nBut this causes the terminal library to not be found. Why is this?\n. I definitely noticed this too. It's a pain to fix the window size when resizing font size because you have to exist full screen mode and then reenter fullscreen mode again (with the animations, it takes a while to do both).\n. Agreed about split screen. I haven't even tried it because I just assumed Apple would apply some gratuitous animation that makes me wait for 2 seconds before it takes effect.\n. I just tried this out. It looks awesome. I just noticed a couple of small issues:\n- When there is only one tab open, I would expect there to be no tab bar at all. This is okay as is because I could imagine a vimscript that sets guiopts-=e whenever there's just one tab (and vim-airline actually shows the tab bar even when there's only one tab so it's not unprecedented).\n- When clicking the + to add a new tab, it flickers slightly.\nThis really makes MacVim look modernized - they look much better in full screen mode than the old tabs did. Thanks for sending this pull request.\n. A couple of other thoughts:\n- It looks like the + icon is a bit off centered.\n- I think the plus icon button should be darker than the active tab. Perhaps it should be the same color as an inactive tab. (Which would be consistent with other mac apps that I've tested).\n  \nThat being said, I'd rather use the PR as it is than the old ugly tabs :D\nEDIT: I would also go a shade lighter on the individual tab icon that appears when hovering.\n. I've been using it for a while now, and there's no noticeable bugs. \n. I noticed that this effects the performance of things like tabdo, even when the tabs aren't shown. I understand if it effected performance only while GUI tabs are actually shown. nerdtree-tabs plugin is one good example of this.\n. I could measure it, but the difference is so large that I can see it visually (it takes about 500ms to do tabdo on all tabs - whether or not I have yosemite tabs enabled).\n. I would even eyeball the performance of cycling through all of the tabs at about 400ms on my Macbook 12\". Here's a plugin that shows you a repro:\nhttps://github.com/jistr/vim-nerdtree-tabs\nIt cycles through all of the tabs and runs some commands. With this Yosemite change, cycling through tabs is much slower. I would be okay with that, except even when you have set guiopts-=e, the performance is still impacted. Do you know why that could be?\n. It could just be that on this version of the tabs, I can see the tabs switching when executing a tabdo. The performance might be the same even on older versions fwiw.\n. A couple of things:\n1. If you copy/paste that first line (not the second) there's still one ^M at the end and it makes the command invalid. There's no need for it - I would simply trim the ^M without submitting the command, waiting for the user to hit enter.\n2. If you have multiple lines, just a anything would be better than what happens right now. A couple of options would be to simply execute it as you suggest, or wait for a final enter to execute it (doing whatever it takes to make that happen). Another would be to have Macvim (or Vim) prompt the user much like iTerm does (you are about to submit multiple lines in command mode, continue?).\nIt seems like just about anything would be better than the jarring ^M characters. Little things like this make Vim a less practical choice for new developers.\n. It might be a vim issue, or not - I'm not sure. But I suspect there's a way to have MacVim solve it - perhaps by entering something like an ephemeral Ex mode that enters each line. It's ephemeral in that hitting another enter will re-enter visual mode (paste would set up that temporary key-mapping or something).\n. It would be nice to write plugins that can work with MacVim since many people will not use neovim-component. I'm approaching this as a Vim plugin author for the moment.\n. @splhack I agree, I wouldn't want to compromise performance either. The feature request assumes there wouldn't be any downside to supporting rich balloon content, aside from the fact that it has to be implemented.\n. I think the performance wasn't previously this bad. I even see a huge slowdown when I am moving the cursor in regions of the text that have no ligatures, and I am causing no redraws. Build 127.. I think I did not explain very clearly what I meant. You'll notice that MacVim still only scrolls line by line. The scrolling on Mac should scroll individual pixels. (The Emacs Mac port does this fwiw)\n. > At best, this would be for when scrolling using the mouse/trackpad\nPeople would also use this via keyboard shortcuts (I would, and I do in other editors).\n\nand then it would at best be purely eye candy;\n\nI don't think it's purely eye candy. There's real productivity wins as well, when the scroll view is slowing down with a proper pixel based easing function, you can make sense of some of the content before it reaches a complete stop (whether or not you use trackpad or keyboard driven animated scrolls). But as it is, when it's slowing down, it jerks around a couple of times, which is jarring and makes it impossible to use that window of time to make sense of the content.\n(Pixels aside, in general, animated navigation is super helpful because it lets you track blocks of code when scrolling up/down large amounts).\n\nyou wouldn't be able to stop a scroll with e.g., only half the pixels of the top line showing.\n\nCorrect. iOS (and Mac?) have many pixel based animations that have \"snap points\" - never being allowed to come to a rest in between.\n\nAnd as far as eye candy goes, the scrolling looks awfully smooth to me as it is. Maybe if one's scroll speed is set to \"really slow\" it would look choppy.\n\nYou don't notice any line/line movement when moving fast, (because each animation frames typically cause movement further than a single line), but watch the end of the scrolling where it would normally be moving very slowly. You can definitely see the dropped positions (with you eyes alone, but use your iPhone's slowmo camera to confirm). (Imagine if your mobile apps or web pages had the same behavior).\n. Is the hesitation that you feel that scroll animations in general are fundamentally broken, or that they don't belong in a text editor, or that they don't belong in MacVim?\n\nWhy would it be moving slowly? Are you talking about the Lion-and-up \"scroll inertia\"? I have that disabled, because it's annoying to me.\n\n(I'm not talking about the Lion down-means-up, and up-means-down \"feature\"). I am talking about scroll animations in all Mac operating systems since 2007, which occurs in all scroll views by default including web pages, table views etc. It's where you swipe and release, and over several animation frames, the content slides around according to some physically modeled easing function. I don't think it's even possible to disable this and I've never met anyone that wanted to.\n\nI can track blocks of code when thus scrolling without animated navigation. (Or, perhaps I just don't understand what \"animated navigation\" refers to in this context.)\n\nBut I and many people wish to go even faster than the key repeat rate. In fact, I want to scroll so fast that a key repeat rate that would be required using ctrl-e would be highly unusable for anything but driving the scroll. At certain velocities, a single screen vsync would have to consume several key events to drive a scroll that fast (which I'm not even sure is possible). Yet at the same time, I want to see the content fly by in as incremental of a manner as the screen refresh rate will allow - because that visual information is useful. Even if at higher velocities where it's difficult to make out detail - I can tell a lot by the general shape/syntax color of the text. Scrolling animations (trackpad driven or even keyboard) is an excellent interaction for accomplishing this experience, which is why MacVim does make some attempt to emulate this.. I've never heard anyone object to scroll animations in general, and MacVim already has them. This github issue tracks something more specific though - fixing the discontinuities that currently occur in MacVim's final frames of that animation that it already has - which would require moving the animation on a per pixel basis vs. per line.\n\nAnyway, if Vim itself is incapable of showing partial lines, this is all moot.\n\nHere's Bjorn's original work towards this: https://twitter.com/b4winckler/status/114007946601562112\nI'm sure it's not easy, but I suspect it's possible and maybe even feasible? I'm not sure how one would accomplish it though, but I have some wild thoughts. Maybe we could dig up Bjorn's original patch and try to revive it?\n. So how difficult would this be? How many hours would it take? Is it worth getting a bounty-source together for it?\n. @splhack Do you think this is something that could be done in approximately a couple of solid days' worth of work?\nNote, the pixel by pixel scroll is only really needed at the start/end of the scroll. During the main portion of the scroll animation, it travels fast enough to not need per pixel level scrolling - the effect is still smooth during that portion of the animation.\nI was thinking it could even be hacked by asking vim for a layout of all the windows (perhaps winsave), and knowing various settings such as cmdheight. When scrolling, you could detect, before an actual full line's worth of text is scrolled, which pane it is in, and preemptively translate that layer just for that vim window, in the correct direction. Then when scrolling at a full line's worth, you'd perform an actual Vim scroll by one line, allowing Vim to update the window with the new line's content, and the translated buffer could then be updated with that new line (repainting/shifting all the contents by one line's height to make room).\nI'm asking how much work this would take to pull it off with good performance because I want to set up a bounty source for it.\n. > (c.f. the ligatures support, which seemed fairly simple on the surface but has turned out to cause quite a few unexpected side-effects).\nOff topic, but ligatures have been amazing in MacVim! Sorry if that's not relevant, but I just have to say, it really puts MacVim above the rest IMHO. Pixel by pixel scrolling might be another one of those things that's tricky but worth it.\nMaybe we can put together a bounty/kickstarter after you or someone else does some deeper investigation of the options, including whether or not my suggested hack would be viable. I know some other people that would be interested in contributing to a bounty to make it happen.\n. Have you tried the latest build? I believe this is improved significantly.\n. Thanks! Maybe this should be the default for \"non-native\" mode. There are two kinds of people in the world - those that can spare > 16ms when full screening their apps and those that can't. Those that can, can use the native OS full screen animation! :D\n. Thanks!\n. Thank you!\n. This is great. I had previously been using a Mac OS defaults.write to try to achieve the same effect.. I noticed this too.. Do you have a ligature font with ligatures enabled by any chance?. You'd have to go out of your way to enable it. Do :set nomacliga to disable them.. @dougfales Umm, this actually sounds like a cool project. Do you wish to share some more info about it? Do you have any screenshots?. @vim-geek, is this something you're interested in sending a pull request for?. Looks like @ichizok might have a fork that also addresses this.. @CodeMonkeyKevin I also sent a PR which takes into account some additional concerns/feedback from @sachka's PR. I would love it if this would be merged (assuming this is a suitable fix (I wouldn't know)).. I think it might help to resolve the travis build failure, @sachka?. Note: You can squash these two diffs at the time you merge the pull request. I left the two commits here so that the conversation isn't lost, but I'm aware you prefer to have the commits squashed into one (it's an option in the dropdown menu at time of merge - select Squash option).. Do you have any suggested fixes?. With this diff, is there ever a reason to use ambiwidth=double?. It would be nice to see an example of where this matters so I could compare it to other terminals etc. Right now, non-ambiguous double-wide glyphs are broken and that also seems like a pretty important thing to fix.. Tested locally and it seems to solve the issue that you pointed out with ambiwidth. Thanks for the suggestion!. I have a big screen, and it's 4K and it's very very slow.. This is also set in vim-sensible a very popular default vim settings package so it will be pretty common to experience this.. I would like to use command+, as a way to bring up preferences for MacVim, but bring up my own special config file which sets prefernces for MacVim. I would also like to be able to script this from VimScript (using menu commands or something else) so that I can share that same experience with other people without having to fork MacVim. The Apple design guides probably don't say anything about not preventing people from customizing this mapping in the app, do they?\nIt sounds like some people might be misinterpreting the feature request here to be that I wish to force people to map command+, to something other than the current MacVim settings. That is not the case.\nThere are also other issues as well that are related. For example, I cannot find a way to make MacVim's command+n/command+shift+n behavior match other popular editors such as VSCode. That is because the menus are not changeable until a window is open in the first place. So how are you supposed to change the key shortcut for the first window you open? This brings me to another good point. How would we allow customizing of key mappings when no vim script has yet run? There hasn't yet been an opportunity to even run the menu commands.\nBoth the command+, shortcut and command+n suffer from this problem. The command+, suffers dually because you cannot even change it after a vim window is open. Are these two separate issues that warrant two separate fixes? Maybe not.. > Unless I gravely misunderstand, @jordwalke is not asking for us to remove the default key equivalents. The request is for us to provide a way for users to remove or remap them if needed.\nCorrect.\nI want to create a vim configuration for people (a plugin) that will open their .vimrc when they hit command+,. Probably not. I would likely map the same thing in Terminal Vim for this plugin.. Editors I'm aware of that use command+comma to open text editor configuration:\n- VSCode.\n- Atom\n- Sublime\nThis is not a radical proposal. It's becoming the norm.\nI would remap <D-control-,> to be the rendering/GUI configs to allow access to the GUI menu (though it would be great if even that could be configured via vimrc).. @eirnym Just imagine that I want to map <D-comma> to :options. This wouldn't change anything for anyone else. But when switching from other editors <D-comma> is the muscle memory for tweaking config so it probably makes sense to allow it as an optional mapping that people can customize. (It would be really overkill to have to fork the entire application just to be able to customize this one mapping). > Personally, I discorage going against Apple's Human Interface Guidelines and rebind this button inside some plugin.\nWhat specifically goes against the HIG? (I'm just not aware of the particular recommendation).\n. > > I'd probably use this way of reaching my $MYVIMRC file instead of executing a command everytime to open them.\n\nExecuting the command to do that is extremely simple, and can easily be given a mapping that is exactly as easy to type as \n\nIt's extremely simple to map from a keybinding that is not <D-,>. This feature request is the ability to map from <D-,>. One of the reasons why I would like that keybinding, is so that no matter which editor I am using, I can always use the same keybinding to edit my editor config (I have to jump around editors as part of my job).. ",
    "geoelectric": "Since #453 got duped to here, wanted to draw attention to the gif @ericvaladas posted in that thread demonstrating flashing with the default black on white. The flashing is much more apparent if you're on a light background. It's a strobe effect in that situation.\nI had my colleague who runs a dark background try it, and it looked like the other videos. Possible the other reports all using dark backgrounds masked the severity.\nEdit: https://cloud.githubusercontent.com/assets/828125/22670826/0a80f656-ec99-11e6-8e0d-0c1aee37433e.gif was the gif posted.. ",
    "brukatv": "Solved! Thanks! Any good workarounds?\n. ",
    "Shirk": "@jasonlong - the commit you're referencing disables ligatures in the old ATSU renderer.\nThe current CoreText renderer never hat ligatures in the first place..\nBut since I'm in the same boat and I'd love to use Fira Code I wrote a patch to make ligatures available\nin the CoreText renderer and also provide an option to turn them of and on:\n\nI've opened PR #56 witch includes my changes.\n. :+1:  however I still have a little improvement (rounding of character positions) that didn't make it into the PR. The only difference being that the current version can have a slight \"shimmer\" when moving between lines which results from minor differences in the character positions if not rounded.\n. That's a known limitation of the current implementation (also visible in the demo above).\nIf you like you can take a look at PR #56 for more details. \n. As it would imply some deep changes to the current renderer there is not other issue tracking it. \nIt was agreed so on so far that the splitting on moving the cursor over a ligature is an acceptable behavior for now. \nMacVims CoreText rendering is using a lot of partial redraws to keep an acceptable speed, which in turn can result in liguatures splitting back up if the cursor moves over them (the ligature detection only receives the text to be drawn not the whole line). I'm afraid there is no simple way to fix that. \nBut feel free to give it a try :+1:\n. Would you be willing to compile MacVim from source? \nThe issue you describe looks like part of what was discussed in the original PR after it was merged :(\nI have a gist of MMCoreTextRenderer.mm that should at least get rid of the spacing issues (I've seen them before).\n. You can use the current MacVim master or my branch for the original PR. But you need to replace MMCoreTextRenderer.mm with the file from my gist. \n. @splhack - I can but first I'd like some feedback if possible.\n. Agreed, and it would have ended up in the PR but that was unfortunately merged before..\n. @splhack - I opened #122 as WIP.\nThe changes look and work OK from my view but I like to get feedback from you, @jordwalke and @jpetrie before removing the WIP-tag (see the checklist in the PR itself).\n. Looks like that one could be fixed by always drawing the whole line.\nAnyone with enough knowledge about the renderer available to point me one the right direction?\n\nAm 08.11.2015 um 08:13 schrieb Jordan W notifications@github.com:\nThere's one remaining major issue with your patch (off by one error?)\nIf I type => everything looks fine:\nBut then when I type one more character immediately after, it ruins the previous ligature. \nHowever, if I had left a space before entering another character, the ligature is not destroyed.\nOf course it's always destroyed if the cursor is exactly over the ligature, which we already discussed - but these pictures above show something different.\n\u2015\nReply to this email directly or view it on GitHub.\n. Looks like something moot with the font - could you try a different editor with ligature support and compare?\n. Current ligature-mode enables 'full (including rare)' ligatures - I've changed this to only use basic ligatures in my PR - please checkout and try if it helps.\n. Ok.. then consider Pragmata Pro a sneaky font.\nI'll keep looking into a way to force a draw of the whole line but I'm not optimistic. \nThe partial draws seem to come from deep inside the vim core and just get handled in the mac Gui like in any other.. \n. #122 changed from WIP to ready-to-be-merged, it fixes the reported spacing issues and also add compatibility with the new emoji support. I'll keep looking into finding a way to trigger redraws for the current line if the cursor moves up / down but for now the worst issues are resolved.\n. @jordwalke - not sure but you might wan't to check out #133 \n. I'm glad the feature is getting traction (even in the current not 100% complete state).\nI promise to look into the few known open issues once I find the time. \n\nThe only downside is that I'm now going to have to save up for a Pragmata Pro license :wink: \n. @douglasdrumond  - any news for this PR?\n. @jpetrie - thanks for testing let me address your points one by one:\n1. I agree, while it should be obvious adding a note that may help.\n2. I'm using MacVim with enabled ligatures since I created this PR and so far I didn't notice any swimming (I'm on a Retina MBP). However this could be related to the modifications done to get the ligature spacing right.\n   (But then technically there should be no difference in behavior if the font has ligatures or not.)\n3. Yes that's the case. Same as the whole Use CoreText Renderer option. \n   It's part of how the rendering views in MacVim are designed - they get their OS X related options set at creation time and have them immutable while the window exists.\n4. I can confirm that behavior as it happens to me too from time to time.\n   It might be a result of merging / splitting ligatures while the line is edited (see 5.).\n   IMHO it would be best to show ligatures only on the non-active lines but I honestly don't know how to get that hooked up.\n5. Yes that's actually the case - ligatures get reverted to normal characters once you move the cursor to the line containing them. That's also visible in my demo GIF above.\n   While I think it makes sense to have it that way I have to say: I'm not doing this on purpose!\n   All my changes did was enable the display of ligatures in the recurseDraw method.\n   The splitting seems to be part of the CoreText editing mode in itself - so no Idea how to change that if it is required.\nI'm also using Fira Code on my system so we should see similar results.\n. @jpetrie some of that could be related to the line length in the demo GIF.\nIn day-to-day editing the glyphs decompose the same way you're describing it (when moving over them) but for me they also get re-combined once I move to a different line.\nMy current font settings are:\nvim\nset guifont=Fira\\ Code\\ Regular\\ for\\ PowerLine:h10\n. @jpetrie thank you so much - you're doing a great job with your reviews!\nI had to think a little about why I added the position adjustment to ligatureGlyphsForChars but the reason was IMHO pretty straight forward - the adjustment is required to prevent characters following a ligature from being squashed into it (accidentally the exact problem the ATSU renderer has).\nLet me try to give an example that'll clarify the how / why:\n- recurseDraw is called with the string \"a !=b\"\n-  it creates a run of glyphs[5] and a matching positions[5]\n- ligatureGlyphsForChars is called and shortens that to glyphs[4] (merging != into a ligature)\n- recurseDraw continues with the processed glyphs[4] but now renders the \"b\" which belonged to positon[4] in the input at position[3] (ligatures counts as one, not two glyphs)\nSo before adjusting the positions the character directly following the ligature could end up being drawn inside the second half of the [double width] ligature glyph :disappointed: \nAs you noticed my fix was to simply update positions to match the new set of glyphs. The downside being that I can't tell if a glyph is a ligature or not and thus having to recreate all positions. If it would be possible to tell a ligature glyph apart from a normal glyph positons could simply be adjusted to remove the unused positions of multi-part merged glyphs.\n\nRegarding the intra-line redraw I agree with you, it's probably fixable but will definitely be tricky.\nI'm not sure if it bothers me enough to look that deep into the CoreText specifics but since I'm obviously not the only one interested in getting this included I see no reason to stop here :smile:\n. @jpetrie - could you do me a favor and try the MMCoreTextView.m from this gist?\n~~This version determines the actual character width from CoreText and the cellWidth from MacVim.\nWhen post-processing character spacing is then always rounded up to multiples of cellWidth.~~\nScratch that. It had strange spacing issues in my listchars (nbsp:\u2b19,trail:\u2b18,tab:\u22ef\\ ,eol:\u21e0)..\nNow it's simply applying ceil() to round the x-position.\nLooks fine for me:\n\nIf you can confirm it fixes the \"shimmering\" for you I'm going to add the changes to this PR.\nBtw. this should also work for ligatures which are smaller than cellWidth :smile:\n. Since I didn't want to do an umpteenth edit to my previous commit: MMCoreTextView.m \nA version that can determine if a glyph is a ligature and will reuse the existing positions array.\nIt will skip positions that are covered by multi-character ligatures but keeping them for smaller ligatures / regular characters.\n. That feature got in after my first PR - I'll have a look at it..\n\nAm 08.11.2015 um 04:59 schrieb Kazuki Sakamoto notifications@github.com:\nUnfortunately, ligature support breaks Emoji rendering. Surrogate pairs, perhaps?\n\u2015\nReply to this email directly or view it on GitHub.\n. @splhack - I think I have something working for both of us:\n\n\n. @jordwalke  - I'm undecided.. \nI could remove the [WIP] for this part and convince @douglasdrumond to merge but it would still only work for people with either cursorline or relativenumber enabled.\nSo I'm debating with myself whether to add a notice to the option dialog (\"currently cursorline or relativenumber setting is required for this feature\") or go looking for a way to get vim to always redraw the active window when it has ligatures enabled. \nI've been looking around the MacVim-gui design and there seems to be no easy way for the GUI process to communicate to the back-end process that the active (VIM)window needs redraw.\n. @chdiza - ligatures have been merged already in a previous (see #36) and have no impact at all since they are in no way related to cursorline or relativenumber. The only relation between them is that if you happen to have enabled cursorline or relativenumber ligatures will be displayed properly since in those cases VIM will always redraw the whole current line if the cursor moves up / down (which is not new but the default behavior for both options).\n[EDIT] rephrased to prevent this comment from sounding harsh which it wasn't supposed to be (it was a long day..)\n. @jordwalke for now I'm going with the \"add a note the preferences\" way so this PR has a chance of getting merged quickly.\n@douglasdrumond - if you wouldn't mind to have a look.\n. Is this really a good idea? \nI placed it in the preferences below the option to enable the CoreText-Renderer which also (to my knowledge) has only a GUI option. Without the CoreText-Renderer enabling ligatures won't have any effect and we'll have a vimrc-option that depends on a gui-only option.\n. On second thought this would enable an extension to redraw_for_cursorline in move.c which in turn could remove the need for cursorline or relativeline for proper drawing..\nI'm not sure if this would bend the intended use of that method too far but it could just work..\n. @splhack - then it should also enable the CoreText-renderer or at least notify the user why no ligatures are visible if ATSUI is used.\n[EDIT] fixed autocorrect, disabled auto-grammar-correction.. bad git client\n. I'm not talking about the CUI I'm talking about GUI with the checkbox 'Use Core Text renderer' disabled.\nIf that's the case setting macligatures won't have any visible effect which might confuse users.\nOr is there also a vimrc-option to toggle this which I'm not aware of?\n\n. Yes, you're right on that part - and with it being an .vimrc-option we now require a proper document explaining it. (The old checkbox had that explanation included but I'm not going to rant about that :wink: )\n. @splhack - I'd like to contribute this gist\n. Sure.. I was thinking about how - but never mind, it would be a PR against your branch (yes, it was a long day).\n. OK looking at the other mac-only gui-related options .gvimrc supports I'll say: :+1:\n(Also I'll have to open another PR once yours was merged to see if I can get extended redraw code included. Having a checkable option in the backend makes things an order of magnitude easier :wink:)\n. Since I'm more or less responsible for the current ligature support I think I know what's going on here. \nAs the colorcolumn is rendered with a different background the renderer will probably do a drawString for the single '! ' and then a second for the remaining characters '=='. In that case the ligature can't be detected properly (for detection all characters forming a ligature have to be drawn in the same drawString).\n. Anything I can give you a hand with? \nI tried it myself but for some reason my test builds would sometimes stop displaying multibyte characters correctly at all.. \n\nAm 22.12.2015 um 22:59 schrieb Kazuki Sakamoto notifications@github.com:\nI'll change mbyte.c.\n\u2015\nReply to this email directly or view it on GitHub.\n. :+1: nice work\n. \n",
    "rafaelrinaldi": "Just wanted to thank @Shirk and everyone involved on making font ligatures happen in Vim. The effort is truly appreciated!\n. Maybe @fabrizioschiavi can offer a discount of some sort since you have put so much effort into supporting the font he created :)\n. ",
    "kjoonlee": "Sorry if this isn't too relevant, but split-screen mode ends when you press <Esc> so I wonder if enabling split-screen modes is something that can be accomplished.\nedit: oops, can't seem to reproduce what I said earlier: pressing <Esc> doesn't end split-screen mode! Thanks, ttylec.\n. ",
    "ttylec": "+1, would be great for LaTeX editing.\n@kjoonlee: Terminal and macvim captures <Esc> before system does. Actually, full-screen works perfectly for MacVim and one can get split-full-screen with vim in terminal (although synctex is impossible/complicated with vim in terminal).\n. ",
    "jcw": "It's a combination of settings, as I said. I've worked around it by removing \"e\" from guioptions.\nThis was driving me up the wall, but now I'm ok with it :)\n. You're right. All settings gone, just the above two, and it doesn't happen on my MBA either.\nCould it be a Retina thing?\n. ",
    "Mishail": "I'm observing the very same behavior with Snapshot 102. OS X 10.11.5 Beta (15F31a).\n\n\n. ",
    "eaoliver": "Just out of curiosity, why is it the future of Vim development?\n. Thanks for taking the time to figure this out.  It's been driving me insane too.  I have been using a little macro that creates a split then closes it.\nnmap ' :sp:q\n. You can download binaries from the release page of the project: https://github.com/macvim-dev/macvim/releases \n. Experienced the crash also.  Appears to be an assertion failure.  Here's a stack trace that got dumped in my terminal:\nVoracious:modules eaoliver$ 2015-10-09 14:11:30.846 MacVim[16045:179616] * Assertion failure in -[_NSWindowFullScreenTransition startExitFullScreenTransitionForCGWindow:targetFrame:duration:completionHandler:], /Library/Caches/com.apple.xbs/Sources/AppKit/AppKit-1404.11/AppKit.subproj/NSWindowFullScreenTransition.m:650\n2015-10-09 14:11:30.852 MacVim[16045:179616] An uncaught exception was raised\n2015-10-09 14:11:30.852 MacVim[16045:179616] Invalid parameter not satisfying: _fullScreenState == NSExitingFullScreen\n2015-10-09 14:11:30.852 MacVim[16045:179616] (\n    0   CoreFoundation                      0x00007fff8a4febd2 exceptionPreprocess + 178\n    1   libobjc.A.dylib                     0x00007fff876a8dd4 objc_exception_throw + 48\n    2   CoreFoundation                      0x00007fff8a5038aa +[NSException raise:format:arguments:] + 106\n    3   Foundation                          0x00007fff8e996f46 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198\n    4   AppKit                              0x00007fff85636e27 -[_NSFullScreenTransition startExitFullScreenTransitionForCGWindow:targetFrame:duration:completionHandler:] + 168\n    5   AppKit                              0x00007fff85636d74 -[_NSWindowFullScreenTransition _exitFullScreenModeForWindow:duration:completionHandler:] + 156\n    6   AppKit                              0x00007fff854360a9 NSPerformVisuallyAtomicChange + 147\n    7   AppKit                              0x00007fff85c091b6 __106-[_NSWindowFullScreenTransition _performExitFullScreenModeForWindow:options:customWindows:doKitAnimation:]_block_invoke + 954\n    8   AppKit                              0x00007fff85b24be7 __177-[NSDockConnection(FullScreenMessages) sendFullScreenExitForTransition:synchronous:window:exitForClose:backgroundWindows:participatingWindows:customAnimation:completionHandler:]_block_invoke + 60\n    9   libxpc.dylib                        0x00007fff915ff74b _xpc_connection_reply_callout + 26\n    10  libxpc.dylib                        0x00007fff915ff6ec _xpc_connection_call_reply + 36\n    11  libdispatch.dylib                   0x00007fff92601453 _dispatch_client_callout + 8\n    12  libdispatch.dylib                   0x00007fff92614c1c _dispatch_main_queue_callback_4CF + 1685\n    13  CoreFoundation                      0x00007fff8a4b4789 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE + 9\n    14  CoreFoundation                      0x00007fff8a47373d CFRunLoopRun + 1949\n    15  CoreFoundation                      0x00007fff8a472d38 CFRunLoopRunSpecific + 296\n    16  HIToolbox                           0x00007fff94a77d55 RunCurrentEventLoopInMode + 235\n    17  HIToolbox                           0x00007fff94a77b8f ReceiveNextEventCommon + 432\n    18  HIToolbox                           0x00007fff94a779cf _BlockUntilNextEventMatchingListInModeWithFilter + 71\n    19  AppKit                              0x00007fff852fbf3a _DPSNextEvent + 1067\n    20  AppKit                              0x00007fff852fb369 -[NSApplication _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 454\n    21  AppKit                              0x00007fff852efecc -[NSApplication run] + 682\n    22  AppKit                              0x00007fff852b9162 NSApplicationMain + 1176\n    23  libdyld.dylib                       0x00007fff953505ad start + 1\n    24  ???                                 0x0000000000000003 0x0 + 3\n)\n2015-10-09 14:11:30.853 MacVim[16045:179616] * Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid parameter not satisfying: _fullScreenState == NSExitingFullScreen'\n* First throw call stack:\n(\n    0   CoreFoundation                      0x00007fff8a4febd2 __exceptionPreprocess + 178\n    1   libobjc.A.dylib                     0x00007fff876a8dd4 objc_exception_throw + 48\n    2   CoreFoundation                      0x00007fff8a5038aa +[NSException raise:format:arguments:] + 106\n    3   Foundation                          0x00007fff8e996f46 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198\n    4   AppKit                              0x00007fff85636e27 -[_NSFullScreenTransition startExitFullScreenTransitionForCGWindow:targetFrame:duration:completionHandler:] + 168\n    5   AppKit                              0x00007fff85636d74 -[_NSWindowFullScreenTransition _exitFullScreenModeForWindow:duration:completionHandler:] + 156\n    6   AppKit                              0x00007fff854360a9 NSPerformVisuallyAtomicChange + 147\n    7   AppKit                              0x00007fff85c091b6 __106-[_NSWindowFullScreenTransition _performExitFullScreenModeForWindow:options:customWindows:doKitAnimation:]_block_invoke + 954\n    8   AppKit                              0x00007fff85b24be7 __177-[NSDockConnection(FullScreenMessages) sendFullScreenExitForTransition:synchronous:window:exitForClose:backgroundWindows:participatingWindows:customAnimation:completionHandler:]_block_invoke + 60\n    9   libxpc.dylib                        0x00007fff915ff74b _xpc_connection_reply_callout + 26\n    10  libxpc.dylib                        0x00007fff915ff6ec _xpc_connection_call_reply + 36\n    11  libdispatch.dylib                   0x00007fff92601453 _dispatch_client_callout + 8\n    12  libdispatch.dylib                   0x00007fff92614c1c _dispatch_main_queue_callback_4CF + 1685\n    13  CoreFoundation                      0x00007fff8a4b4789 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE** + 9\n    14  CoreFoundation                      0x00007fff8a47373d __CFRunLoopRun + 1949\n    15  CoreFoundation                      0x00007fff8a472d38 CFRunLoopRunSpecific + 296\n    16  HIToolbox                           0x00007fff94a77d55 RunCurrentEventLoopInMode + 235\n    17  HIToolbox                           0x00007fff94a77b8f ReceiveNextEventCommon + 432\n    18  HIToolbox                           0x00007fff94a779cf _BlockUntilNextEventMatchingListInModeWithFilter + 71\n    19  AppKit                              0x00007fff852fbf3a _DPSNextEvent + 1067\n    20  AppKit                              0x00007fff852fb369 -[NSApplication _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 454\n    21  AppKit                              0x00007fff852efecc -[NSApplication run] + 682\n    22  AppKit                              0x00007fff852b9162 NSApplicationMain + 1176\n    23  libdyld.dylib                       0x00007fff953505ad start + 1\n    24  ???                                 0x0000000000000003 0x0 + 3\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n. I can reproduce the blank screen, while defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES is set.\nI open a mvim window on an external display, make it full screen, and then invoke mvim again.  In settings, I open files from applications 'in a new window'; however, mvim is opening a new tab that is full black.  When mvim is not in full screen mode, the behaviour is as expected (new window for new files).\nAfter entering this error state, the Mac OS menu will never hide while in full screen mode.. This is a duplicate of #566 . ",
    "ChrisHonniball": "\nIs it ready to download and run now with all the features?\nNo. Although some features are a work in progress, Neovim isn't at a stable point. Using Neovim should be done with caution as things may change.\nWhen will a beta be available?\nWhen it's ready.\n- from neovim.io\n\nUntil these items change I wouldn't change MacVim to this. I would however keep up with vim updates better as in #46.\n. ",
    "herrbischoff": "@eaoliver: To not repeat what others have said already (and better than I could), here are a couple of links to better illustrate my opinion. Emphasis is on opinion, as obviously there is never an absolute wrong or right. Ideally, I'd just like to kick off a discussion about it.\n- http://geoff.greer.fm/2015/01/15/why-neovim-is-better-than-vim/\n- https://github.com/neovim/neovim/wiki/Introduction\n- http://vimcasts.org/blog/2014/03/support-neovim/\n@ChrisHonniball Fair enough. As the original Vim is obviously not going anywhere, a lightweight fork of MacVim for NeoVim is what I had in mind, especially due to its way to connect to a GUI is quite different from original Vim:\nNeovim ------> GUI 1 (attach/detach to running instance)\n  |  |\n  |   `------> GUI 2 (communicating on a different socket or transport \n  |                   mechanism, but sharing the same session with GUI 1)\n   `--> Plugin 1\n  |\n   `--> Plugin 2\n  |\n   `--> Plugin 3\n. @cserb Thanks, but the performance of that GUI is unfortunately abysmal.\n. ",
    "cserb": "@herrbischoff I just found this https://github.com/rogual/neovim-dot-app\n. ",
    "RichardDooling": "You can supposedly get \"true colors\" with the testing builds of iTerm using NeoVim but to me the colors still look weird. If I knew more I'd probably know why. Also scrolling always seems jerky to me running Vim in terminal or experimenting with NeoVim in terminal. So for now I like MacVim. I haven't messed with tmux, which looks like another fascinating distraction.\n. I played with GitHub pages before. It didn't look too hard. The page Bjorn had with download and install instructions could be repurposed for content. \n. https://github.com/macvim-dev/macvim/releases\n. Take a look at Tim Pope's Obsession\n\ufeffhttps://github.com/tpope/vim-obsession\nI use it from the command line but might be a way to make it work by double clicking. It's nice because it makes it automatic and you don't have to remember to do it before you exit.\nRick. As of snapshot 91 the wavy lines are back and all is well. I don't know what caused it. \nThanks\nRick\n. I don't know if this is related, but I use Tim Pope's Obsession. And recently MacVim is not properly saving tab info. If I move a tab using :tabm1 for example, and then exit saving session info. When I reopen the session the tabs are in the order they were in before I issued the :tabm command.\n. I didn't know there was such a command. Does it do the same as gt and gT?\nOn Fri, May 27, 2016 at 5:13 PM, Peter Abrahamsen notifications@github.com\nwrote:\n\nAs of v104, hitting \u21e7\u2318[ or \u21e7\u2318] to switch the active tab will relocate the\nwindow to the top-left corner of my left-side monitor. Clicking the tab\nitself works fine.\nv103 does not have the issue.\nThanks for keeping this project active!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/286, or mute the thread\nhttps://github.com/notifications/unsubscribe/ABaFwqtEq7ScViKCG1Rk_HHRd1PxSe_Zks5qF2ySgaJpZM4Io5yZ\n.\n\n\nrd\n. I am using v104 and it seems to do the same as gt and gT.\nI don't see the window move.\nRD\nOn Sat, May 28, 2016 at 8:26 AM, Richard Dooling rpdooling@gmail.com\nwrote:\n\nI didn't know there was such a command. Does it do the same as gt and gT?\nOn Fri, May 27, 2016 at 5:13 PM, Peter Abrahamsen \nnotifications@github.com wrote:\n\nAs of v104, hitting \u21e7\u2318[ or \u21e7\u2318] to switch the active tab will relocate the\nwindow to the top-left corner of my left-side monitor. Clicking the tab\nitself works fine.\nv103 does not have the issue.\nThanks for keeping this project active!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/286, or mute the thread\nhttps://github.com/notifications/unsubscribe/ABaFwqtEq7ScViKCG1Rk_HHRd1PxSe_Zks5qF2ySgaJpZM4Io5yZ\n.\n\n\nrd\n\n\nrd\n. Here's mine from yesterday. I don't know when or how it crashed but I\nalways have MacVim up (I'm a writer and just a rank amateur programmer) and\nthen suddenly it wasn't there.\nProcess:               Vim [44488]\nPath:\n/usr/local/Cellar/macvim/8.0-117/MacVim.app/Contents/MacOS/Vim\nIdentifier:            Vim\nVersion:               0\nCode Type:             X86-64 (Native)\nParent Process:        MacVim [43456]\nResponsible:           Vim [44488]\nUser ID:               501\nDate/Time:             2016-12-05 06:08:14.925 -0700\nOS Version:            Mac OS X 10.12.1 (16B2555)\nReport Version:        12\nAnonymous UUID:        9356ACE0-2C10-6355-9180-ED10E929CF93\nSleep/Wake UUID:       1C622883-5975-40B6-A2DE-1A1956F34CE5\nTime Awake Since Boot: 320000 seconds\nTime Since Wake:       2600 seconds\nSystem Integrity Protection: enabled\nCrashed Thread:        0  Dispatch queue: com.apple.main-thread\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\nException Codes:       KERN_INVALID_ADDRESS at 0x0000000000000000\nException Note:        EXC_CORPSE_NOTIFY\nTermination Signal:    Segmentation fault: 11\nTermination Reason:    Namespace SIGNAL, Code 0xb\nTerminating Process:   Vim [44488]\nVM Regions Near 0:\n-->\n    __TEXT                 0000000107103000-00000001072e4000 [ 1924K]\nr-x/rwx SM=COW\n/usr/local/Cellar/macvim/8.0-117/MacVim.app/Contents/MacOS/Vim\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   libsystem_kernel.dylib            0x00007fffd881c716 __kill + 10\n1   Vim                               0x00000001071e80b3 mch_exit + 184\n2   Vim                               0x00000001072b2c8c getout + 543\n3   libsystem_platform.dylib          0x00007fffd88fbbba _sigtramp + 26\n4   ???                               000000000000000000 0 + 0\n5   libruby.2.0.0.dylib               0x00000001077580a2 0x10772d000 +\n176290\n6   libruby.2.0.0.dylib               0x0000000107757f7b rb_bug + 180\n7   libruby.2.0.0.dylib               0x0000000107775a4c rb_update_max_fd +\n56\n8   libruby.2.0.0.dylib               0x0000000107778fc2 0x10772d000 +\n311234\n9   libruby.2.0.0.dylib               0x000000010777ebab 0x10772d000 +\n334763\n10  libruby.2.0.0.dylib               0x000000010777a55d Init_IO + 3356\n11  libruby.2.0.0.dylib               0x00000001077759b2 rb_call_inits + 129\n12  libruby.2.0.0.dylib               0x000000010775bf34 ruby_setup + 127\n13  libruby.2.0.0.dylib               0x000000010775bf6e ruby_init + 9\n14  Vim                               0x00000001072a083b\nensure_ruby_initialized + 62\n15  Vim                               0x00000001072a07c2 ex_ruby + 36\n16  Vim                               0x0000000107158a70 do_cmdline + 6287\n17  Vim                               0x0000000107155fb5 do_source + 1608\n18  Vim                               0x00000001072b1b23 vim_main2 + 426\n19  Vim                               0x00000001072b1285 main + 6957\n20  libdyld.dylib                     0x00007fffd86ee255 start + 1\nThread 1:\n0   libsystem_kernel.dylib            0x00007fffd881d4e6 __workq_kernreturn\n+ 10\n1   libsystem_pthread.dylib           0x00007fffd89057b5 _pthread_wqthread\n+ 1426\n2   libsystem_pthread.dylib           0x00007fffd8905211 start_wqthread + 13\nThread 2:\n0   libsystem_kernel.dylib            0x00007fffd881d4e6 __workq_kernreturn\n+ 10\n1   libsystem_pthread.dylib           0x00007fffd8905622 _pthread_wqthread\n+ 1023\n2   libsystem_pthread.dylib           0x00007fffd8905211 start_wqthread + 13\nThread 3:\n0   libsystem_kernel.dylib            0x00007fffd881d4e6 __workq_kernreturn\n+ 10\n1   libsystem_pthread.dylib           0x00007fffd89057b5 _pthread_wqthread\n+ 1426\n2   libsystem_pthread.dylib           0x00007fffd8905211 start_wqthread + 13\nThread 0 crashed with X86 Thread State (64-bit):\n  rax: 0x0000000000000000  rbx: 0x00000001073138a4  rcx:\n0x000000010798aa28  rdx: 0x0000000000000000\n  rdi: 0x000000000000adc8  rsi: 0x000000000000000b  rbp:\n0x000000010798aa50  rsp: 0x000000010798aa28\n   r8: 0x00000000fffffffd   r9: 0x00007f969780e400  r10:\n0x00000001071eb39c  r11: 0x0000000000000206\n  r12: 0x000000010798aa68  r13: 0x0000000107313678  r14:\n0x0000000000000001  r15: 0x0000000107313678\n  rip: 0x00007fffd881c716  rfl: 0x0000000000000206  cr2: 0x00000001072b9eb4\nLogical CPU:     0\nError Code:      0x02000025\nTrap Number:     133\nBinary Images:\n       0x107103000 -        0x1072e3ff7 +Vim (0)\n\n/usr/local/Cellar/macvim/8.0-117/MacVim.app/Contents/MacOS/Vim\n       0x10736a000 -        0x10745fff7 +org.python.python (2.7.12, [c]\n2001-2016 Python Software Foundation. - 2.7.12)\n\n/usr/local/opt/python/Frameworks/Python.framework/Versions/2.7/Python\n       0x1074f4000 -        0x107612ff7  libperl.dylib (107)\n\n/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE/libperl.dylib\n       0x107640000 -        0x10770bff3  Tcl (8.5.9 - 8.5.9)\n<98C9CD47-AC8F-36B1-B2CA-27D7778FBEB7>\n/System/Library/Frameworks/Tcl.framework/Versions/8.5/Tcl\n       0x10772d000 -        0x1078c4ff3  libruby.2.0.0.dylib (119)\n\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/libruby.2.0.0.dylib\n       0x1079d3000 -        0x1079d5ffb  com.apple.textencoding.unicode\n(3.0 - 3.0) <1ABD997B-AC91-3CB4-81E4-98E1863F9E3C>\n/System/Library/TextEncodings/Unicode\nEncodings.bundle/Contents/MacOS/Unicode Encodings\n       0x111e92000 -        0x111ecf287  dyld (421.2)\n<13A9466A-2576-3ABB-AD9D-D6BC16439B8F> /usr/lib/dyld\n    0x7fffc0087000 -     0x7fffc0087fff  com.apple.Accelerate (1.11 -\nAccelerate 1.11) <409E886A-9B89-3EF5-B434-BDFC1896A918>\n/System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate\n    0x7fffc00a0000 -     0x7fffc06e0fe3  com.apple.vImage (8.1 - ???)\n<85E957AD-3D7D-38C3-A0FA-CCD98FBE8C37>\n/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage\n    0x7fffc06e1000 -     0x7fffc08a8fef  libBLAS.dylib (1185)\n<0D55CF73-6DBD-3D15-B500-189479638551>\n/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\n    0x7fffc08a9000 -     0x7fffc08c0fff  libBNNS.dylib (14)\n<43A9B06E-3C21-3CE6-B0C1-99DA172DEEB0>\n/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBNNS.dylib\n    0x7fffc08c1000 -     0x7fffc0cccfff  libLAPACK.dylib (1185)\n\n/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\n    0x7fffc0ccd000 -     0x7fffc0ce3fff  libLinearAlgebra.dylib (1185)\n<08F00EFB-B477-3421-906E-3D364E607E6A>\n/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib\n    0x7fffc0ce4000 -     0x7fffc0ceafff  libQuadrature.dylib (3)\n<120F6228-A3D4-3184-89D7-785ADC2AC715>\n/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libQuadrature.dylib\n    0x7fffc0ceb000 -     0x7fffc0cfeff7  libSparseBLAS.dylib (1185)\n<912E3D25-27C0-3245-B64C-3CAD43A5D633>\n/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib\n    0x7fffc0cff000 -     0x7fffc0e4cff7  libvDSP.dylib (600)\n<12217266-9823-3C9B-AA5E-A8BD1BD46F24>\n/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib\n    0x7fffc0e4d000 -     0x7fffc0f04fff  libvMisc.dylib (600)\n<73623707-9367-3D0F-9874-0B69FACEBB7F>\n/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib\n    0x7fffc0f05000 -     0x7fffc0f05fff  com.apple.Accelerate.vecLib (3.11\n- vecLib 3.11) \n/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib\n    0x7fffc11c1000 -     0x7fffc1ea1ff3  com.apple.AppKit (6.9 - 1504.60)\n<5DA1E013-575C-34D5-A028-1639EB7B0040>\n/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\n    0x7fffc1eb3000 -     0x7fffc1eb3fff  com.apple.ApplicationServices (48\n- 48) <3E1395EA-C661-3318-9B87-9857BB81021B>\n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\n    0x7fffc1eb4000 -     0x7fffc1f22ff7  com.apple.ApplicationServices.ATS\n(377 - 422.1) \n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS\n    0x7fffc1fbc000 -     0x7fffc20eaff7  libFontParser.dylib (194.2)\n\n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib\n    0x7fffc20eb000 -     0x7fffc2135fff  libFontRegistry.dylib (196.2)\n<8AEE7F4E-60F0-33BB-99E4-5381EF1FEC6F>\n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib\n    0x7fffc2230000 -     0x7fffc22daff7  com.apple.ColorSync (4.12.0 - 502)\n\n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync\n    0x7fffc22db000 -     0x7fffc232bfff  com.apple.HIServices (1.22 - 590)\n<109A9893-313B-3467-9892-062F49D1FF0D>\n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices\n    0x7fffc232c000 -     0x7fffc233bff3  com.apple.LangAnalysis (1.7.0 -\n1.7.0) <47D1A017-91A4-37F3-93E0-3923CD6ED2DE>\n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis\n    0x7fffc233c000 -     0x7fffc2389fff\ncom.apple.print.framework.PrintCore (12 - 491)\n\n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore\n    0x7fffc238a000 -     0x7fffc23c5fff  com.apple.QD (3.12 - 310)\n<8F718290-DD82-36CE-9AF0-EFB6D31A49F4>\n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD\n    0x7fffc23c6000 -     0x7fffc23d1ff7\ncom.apple.speech.synthesis.framework (6.0.15 - 6.0.15)\n<23EA6076-ECDF-3A50-81E7-3CE6451DC8C4>\n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis\n    0x7fffc23d2000 -     0x7fffc25e0ff7\ncom.apple.audio.toolbox.AudioToolbox (1.14 - 1.14)\n\n/System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox\n    0x7fffc25e1000 -     0x7fffc25e1fff  com.apple.audio.units.AudioUnit\n(1.14 - 1.14) \n/System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit\n    0x7fffc274a000 -     0x7fffc2aceff7  com.apple.CFNetwork (807.1.3 -\n807.1.3) <336BFAD9-1BAE-368E-8C48-B9F1CC251C67>\n/System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\n    0x7fffc2ae8000 -     0x7fffc2ae8fff  com.apple.Carbon (154 - 157)\n\n/System/Library/Frameworks/Carbon.framework/Versions/A/Carbon\n    0x7fffc2ae9000 -     0x7fffc2aecfff  com.apple.CommonPanels (1.2.6 -\n98) \n/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels\n    0x7fffc2aed000 -     0x7fffc2df1fff  com.apple.HIToolbox (2.1.1 -\n856.6) \n/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox\n    0x7fffc2df2000 -     0x7fffc2df5ff7  com.apple.help (1.3.5 - 49)\n<27C5F9FE-838F-3807-A4AC-D99470185B10>\n/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help\n    0x7fffc2df6000 -     0x7fffc2dfbfff  com.apple.ImageCapture (9.0 - 9.0)\n\n/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture\n    0x7fffc2dfc000 -     0x7fffc2e93ff3  com.apple.ink.framework (10.9 -\n219) \n/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink\n    0x7fffc2e94000 -     0x7fffc2eaefff  com.apple.openscripting (1.7 -\n172) \n/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting\n    0x7fffc2eaf000 -     0x7fffc2eb0ff3  com.apple.print.framework.Print\n(12 - 267) \n/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print\n    0x7fffc2eb1000 -     0x7fffc2eb3ff7  com.apple.securityhi (9.0 - 55006)\n\n/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI\n    0x7fffc2eb4000 -     0x7fffc2ebaff7\ncom.apple.speech.recognition.framework (6.0.1 - 6.0.1)\n\n/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition\n    0x7fffc2f9a000 -     0x7fffc2f9afff  com.apple.Cocoa (6.11 - 22)\n<5EEB0A26-F1C2-3D57-8441-52C0B80C2A6A>\n/System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa\n    0x7fffc30d0000 -     0x7fffc3160ff7  com.apple.audio.CoreAudio (4.3.0 -\n4.3.0) <4082E8CC-568A-364A-9AF0-92F30F067D42>\n/System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\n    0x7fffc3161000 -     0x7fffc3174ff3  com.apple.CoreBluetooth (1.0 - 1)\n<73A2B185-70E4-3535-A653-E1BC74584E55>\n/System/Library/Frameworks/CoreBluetooth.framework/Versions/A/CoreBluetooth\n    0x7fffc3175000 -     0x7fffc346ffff  com.apple.CoreData (120 - 752.2)\n<51AB540E-01AE-3207-8DE5-3E912FA9B5DF>\n/System/Library/Frameworks/CoreData.framework/Versions/A/CoreData\n    0x7fffc3470000 -     0x7fffc34fcfff  com.apple.CoreDisplay (1.0 - 1)\n\n/System/Library/Frameworks/CoreDisplay.framework/Versions/A/CoreDisplay\n    0x7fffc34fd000 -     0x7fffc3990fff  com.apple.CoreFoundation (6.9 -\n1348.15) \n/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n    0x7fffc3991000 -     0x7fffc4031ff7  com.apple.CoreGraphics (2.0 -\n1070.8) \n/System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\n    0x7fffc4032000 -     0x7fffc4271ff7  com.apple.CoreImage (12.0.0 - 451)\n<4A79760F-FD23-3055-9569-5F038818993F>\n/System/Library/Frameworks/CoreImage.framework/Versions/A/CoreImage\n    0x7fffc43cc000 -     0x7fffc43ccfff  com.apple.CoreServices (775.8.2 -\n775.8.2) \n/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\n    0x7fffc43cd000 -     0x7fffc441eff7  com.apple.AE (712 - 712)\n<0EF17D7E-6BA4-3555-BC38-9BD0CC5B82A3>\n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE\n    0x7fffc441f000 -     0x7fffc46fafff  com.apple.CoreServices.CarbonCore\n(1159 - 1159) <837B7ECF-7E62-3210-988C-63D7AB4EAA88>\n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore\n    0x7fffc46fb000 -     0x7fffc472efff  com.apple.DictionaryServices (1.2\n- 274) <302B8678-D057-3CF8-ACA7-7424A4A6A00A>\n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices\n    0x7fffc472f000 -     0x7fffc4737ffb  com.apple.CoreServices.FSEvents\n(1230 - 1230) <8836E7D0-844F-36F9-9601-B630BB82336B>\n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents\n    0x7fffc4738000 -     0x7fffc48a3fff  com.apple.LaunchServices (775.8.2\n- 775.8.2) <7389590A-0E30-3294-B39C-F179D237F6C4>\n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices\n    0x7fffc48a4000 -     0x7fffc4954ffb  com.apple.Metadata (10.7.0 -\n1075.17) <40F7E6E2-B58B-34E1-B97B-26756ECDB947>\n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata\n    0x7fffc4955000 -     0x7fffc49b4fff  com.apple.CoreServices.OSServices\n(775.8.2 - 775.8.2) \n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices\n    0x7fffc49b5000 -     0x7fffc4a25fff  com.apple.SearchKit (1.4.0 -\n1.4.0) \n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit\n    0x7fffc4a26000 -     0x7fffc4a6cff7\ncom.apple.coreservices.SharedFileList (38 - 38)\n<6C5A3FBB-9502-3725-AC3A-AE7B1528BBD4>\n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList\n    0x7fffc4af9000 -     0x7fffc4c44ffb  com.apple.CoreText (352.0 - 544.1)\n<3229A726-303B-3B09-A014-8708C3BEF2D1>\n/System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\n    0x7fffc4c45000 -     0x7fffc4c7afff  com.apple.CoreVideo (1.8 - 234.0)\n<48C31E93-87C2-31F4-97E7-9E54C1EA8E7D>\n/System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo\n    0x7fffc4c7b000 -     0x7fffc4cecffb  com.apple.framework.CoreWLAN (11.0\n- 1200.25.1) <0425CA71-50D9-32DC-8693-CAE6CB3B799D>\n/System/Library/Frameworks/CoreWLAN.framework/Versions/A/CoreWLAN\n    0x7fffc4de7000 -     0x7fffc4decfff  com.apple.DiskArbitration (2.7 -\n2.7) <566D5C06-13E8-3638-B2EC-2B834D5F04F1>\n/System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\n    0x7fffc4f7b000 -     0x7fffc5322ffb  com.apple.Foundation (6.9 - 1349)\n<08A463B1-296E-3AC1-B8D3-01A75B0785A8>\n/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\n    0x7fffc534e000 -     0x7fffc537ffff  com.apple.GSS (4.0 - 2.0)\n<4F3C9982-457C-3731-85DB-8CE1A72621B0>\n/System/Library/Frameworks/GSS.framework/Versions/A/GSS\n    0x7fffc5433000 -     0x7fffc54d6fff  com.apple.Bluetooth (5.0.1 -\n5.0.1f7) <406E3901-F5D3-3996-84F7-32975EBE8F86>\n/System/Library/Frameworks/IOBluetooth.framework/Versions/A/IOBluetooth\n    0x7fffc54d7000 -     0x7fffc556cff7  com.apple.framework.IOKit (2.0.2 -\n1324.21.1) \n/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n    0x7fffc556d000 -     0x7fffc5573ffb  com.apple.IOSurface (153.1 -\n153.1) <849B0928-3D37-3977-9670-19979DB4EE4D>\n/System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface\n    0x7fffc55c7000 -     0x7fffc5720ff7  com.apple.ImageIO.framework (3.3.0\n- 1570.2) \n/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n    0x7fffc5721000 -     0x7fffc5725fff  libGIF.dylib (1570.2)\n\n/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib\n    0x7fffc5726000 -     0x7fffc5817fff  libJP2.dylib (1570.2)\n<84DB1AB5-8C2A-30CD-BFDA-8C882023E523>\n/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib\n    0x7fffc5818000 -     0x7fffc583bfff  libJPEG.dylib (1570.2)\n\n/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib\n    0x7fffc583c000 -     0x7fffc5862fff  libPng.dylib (1570.2)\n<723EFF56-B176-30F8-B5C9-51AEDC4A8F42>\n/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib\n    0x7fffc5863000 -     0x7fffc5865ff3  libRadiance.dylib (1570.2)\n<19162142-F424-3BE0-BCFB-A835EE7A6451>\n/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib\n    0x7fffc5866000 -     0x7fffc58bffff  libTIFF.dylib (1570.2)\n<72AB88A4-2D95-31CD-AE15-8F15F7F558E4>\n/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib\n    0x7fffc6481000 -     0x7fffc649aff7  com.apple.Kerberos (3.0 - 1)\n<49DCBE1A-130C-3FBF-AAEA-AF9A518913AC>\n/System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos\n    0x7fffc6c81000 -     0x7fffc6cd8ff7  com.apple.Metal (85.85 - 85.85)\n\n/System/Library/Frameworks/Metal.framework/Versions/A/Metal\n    0x7fffc73ee000 -     0x7fffc73f6fff  com.apple.NetFS (6.0 - 4.0)\n<6614F9B8-0861-338B-8FF0-8E402F96141C>\n/System/Library/Frameworks/NetFS.framework/Versions/A/NetFS\n    0x7fffc779b000 -     0x7fffc77e9ff3  com.apple.opencl (2.8.6 - 2.8.6)\n<819DE36A-893E-3100-8430-EEB9D7023672>\n/System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL\n    0x7fffc77ea000 -     0x7fffc7803ffb  com.apple.CFOpenDirectory (10.12 -\n194) \n/System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory\n    0x7fffc7804000 -     0x7fffc780fff7  com.apple.OpenDirectory (10.12 -\n194) \n/System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory\n    0x7fffc7810000 -     0x7fffc7812fff  libCVMSPluginSupport.dylib\n(12.4.5) \n/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib\n    0x7fffc7813000 -     0x7fffc7816ff7  libCoreFSCache.dylib (150)\n<991F00EB-B1B4-3351-9D83-C11E4920C360>\n/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreFSCache.dylib\n    0x7fffc7817000 -     0x7fffc781afff  libCoreVMClient.dylib (150)\n<06276E05-1FB2-3748-A236-1F66468A1755>\n/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib\n    0x7fffc781b000 -     0x7fffc7823ffb  libGFXShared.dylib (12.4.5)\n<67ABA30E-DA8A-336C-8137-11CD0D455741>\n/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib\n    0x7fffc7824000 -     0x7fffc782ffff  libGL.dylib (12.4.5)\n<920D2CC5-D64F-35A5-8C54-4A5731AEC552>\n/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib\n    0x7fffc7830000 -     0x7fffc786cff7  libGLImage.dylib (12.4.5)\n\n/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib\n    0x7fffc79e4000 -     0x7fffc7a24ff3  libGLU.dylib (12.4.5)\n<79C811DC-7904-3A7D-A983-B3E8D5439336>\n/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib\n    0x7fffc838c000 -     0x7fffc839afff  com.apple.opengl (12.4.5 - 12.4.5)\n\n/System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\n    0x7fffc90ac000 -     0x7fffc92a6fff  com.apple.QuartzCore (1.11 -\n449.39.5) \n/System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore\n    0x7fffc980c000 -     0x7fffc9b27ff7  com.apple.security (7.0 -\n57740.20.22) <7E95D13A-0D52-36A9-A1C4-C21EE26AB2AB>\n/System/Library/Frameworks/Security.framework/Versions/A/Security\n    0x7fffc9b28000 -     0x7fffc9b9eff7  com.apple.securityfoundation (6.0\n- 55132.20.1) <8DDEA805-C6F7-3EF9-990F-136617DB942D>\n/System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation\n    0x7fffc9bc8000 -     0x7fffc9bcbff3  com.apple.xpc.ServiceManagement\n(1.0 - 1) \n/System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement\n    0x7fffc9f50000 -     0x7fffc9fc1ff7  com.apple.SystemConfiguration\n(1.14 - 1.14) <013957CA-2708-31F0-845D-11E271C96B94>\n/System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\n    0x7fffcc603000 -     0x7fffcc625ffb  com.apple.framework.Apple80211\n(12.0 - 1200.37) <25299C0F-7A30-3BAA-9945-DB1515F68A2C>\n/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Apple80211\n    0x7fffcc626000 -     0x7fffcc635fdb  com.apple.AppleFSCompression (88 -\n1.0) \n/System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression\n    0x7fffcc72b000 -     0x7fffcc7b697f  com.apple.AppleJPEG (1.0 - 1)\n\n/System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG\n    0x7fffccbd2000 -     0x7fffccc50ff7  com.apple.backup.framework (1.8.1\n- 1.8.1) <792B4983-DE9A-377D-8338-93719706D12F>\n/System/Library/PrivateFrameworks/Backup.framework/Versions/A/Backup\n    0x7fffcd86e000 -     0x7fffcd895ffb  com.apple.ChunkingLibrary (172 -\n172) <83E91936-305D-32A4-A256-5582B96B1852>\n/System/Library/PrivateFrameworks/ChunkingLibrary.framework/Versions/A/ChunkingLibrary\n    0x7fffce1bc000 -     0x7fffce1c5ffb  com.apple.CommonAuth (4.0 - 2.0)\n\n/System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth\n    0x7fffce8e1000 -     0x7fffce8f2ff7  com.apple.CoreEmoji (1.0 - 39.1)\n<54432658-8481-3F33-ADED-B60684311E11>\n/System/Library/PrivateFrameworks/CoreEmoji.framework/Versions/A/CoreEmoji\n    0x7fffcee8d000 -     0x7fffcef17fff  com.apple.CoreSymbolication\n(61050) <15C4AF49-2F85-3265-B53F-4925616C746E>\n/System/Library/PrivateFrameworks/CoreSymbolication.framework/Versions/A/CoreSymbolication\n    0x7fffcef18000 -     0x7fffcf056fcf  com.apple.coreui (2.1 - 426.9.1)\n\n/System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI\n    0x7fffcf057000 -     0x7fffcf0f6ffb  com.apple.CoreUtils (4.3 - 430.70)\n<946F5089-9F8D-3595-8208-AD945B26D267>\n/System/Library/PrivateFrameworks/CoreUtils.framework/Versions/A/CoreUtils\n    0x7fffcf146000 -     0x7fffcf1abff3  com.apple.framework.CoreWiFi (12.0\n- 1200.25.1) <8DAD3903-9A77-3E50-99C4-3C5708FB25B1>\n/System/Library/PrivateFrameworks/CoreWiFi.framework/Versions/A/CoreWiFi\n    0x7fffcf1ac000 -     0x7fffcf1b9fff  com.apple.CrashReporterSupport\n(10.12 - 816) \n/System/Library/PrivateFrameworks/CrashReporterSupport.framework/Versions/A/CrashReporterSupport\n    0x7fffcf25f000 -     0x7fffcf2d6ff3  com.apple.datadetectorscore (7.0 -\n539) \n/System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore\n    0x7fffcf310000 -     0x7fffcf34ffff  com.apple.DebugSymbols (137 - 137)\n\n/System/Library/PrivateFrameworks/DebugSymbols.framework/Versions/A/DebugSymbols\n    0x7fffcf350000 -     0x7fffcf461fff  com.apple.desktopservices (1.11.1\n- 1.11.1) <03518A59-79B1-3B16-B923-52D6EFF04ADB>\n/System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv\n    0x7fffcf72d000 -     0x7fffcfb5eff7  com.apple.vision.FaceCore (3.3.2 -\n3.3.2) \n/System/Library/PrivateFrameworks/FaceCore.framework/Versions/A/FaceCore\n    0x7fffd0e99000 -     0x7fffd0e99fff  libmetal_timestamp.dylib\n(600.0.48.26) <681B9F09-0673-3C38-B636-9D77D338D1AF>\n/System/Library/PrivateFrameworks/GPUCompiler.framework/libmetal_timestamp.dylib\n    0x7fffd1163000 -     0x7fffd117fff7  com.apple.GenerationalStorage (2.0\n- 259) <43D40063-BD46-3008-8992-FF092B7C9A58>\n/System/Library/PrivateFrameworks/GenerationalStorage.framework/Versions/A/GenerationalStorage\n    0x7fffd1875000 -     0x7fffd18ebffb  com.apple.Heimdal (4.0 - 2.0)\n<418DD668-7288-3D33-BAFE-959DB96D0351>\n/System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal\n    0x7fffd1efe000 -     0x7fffd1f05ffb  com.apple.IOAccelerator (288.15 -\n288.15) \n/System/Library/PrivateFrameworks/IOAccelerator.framework/Versions/A/IOAccelerator\n    0x7fffd1f07000 -     0x7fffd1f1bff3  com.apple.IOPresentment (1.0 - 25)\n<40934217-996A-3DDB-A8C4-484CA0F0222B>\n/System/Library/PrivateFrameworks/IOPresentment.framework/Versions/A/IOPresentment\n    0x7fffd1f1c000 -     0x7fffd1f3eff7  com.apple.IconServices (74.1 -\n74.1) \n/System/Library/PrivateFrameworks/IconServices.framework/Versions/A/IconServices\n    0x7fffd2020000 -     0x7fffd21d4fff  com.apple.LanguageModeling (1.0 -\n123) <10152D7F-C7C0-34AA-A295-D712D16C76E6>\n/System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling\n    0x7fffd2a80000 -     0x7fffd2af8fef\ncom.apple.MetalPerformanceShaders.MetalPerformanceShaders (1.0 - 1)\n\n/System/Library/PrivateFrameworks/MetalPerformanceShaders.framework/Versions/A/MetalPerformanceShaders\n    0x7fffd2c7a000 -     0x7fffd2ca2fff\ncom.apple.MultitouchSupport.framework (368.4 - 368.4)\n<18778258-70B1-31BF-845D-1FACBF280108>\n/System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport\n    0x7fffd2d4f000 -     0x7fffd2d59fff  com.apple.NetAuth (6.0 - 6.0)\n\n/System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth\n    0x7fffd3535000 -     0x7fffd3576ff7  com.apple.PerformanceAnalysis\n(1.145 - 145) <73A73364-EFB6-3D0A-A7EA-7F924359B3C9>\n/System/Library/PrivateFrameworks/PerformanceAnalysis.framework/Versions/A/PerformanceAnalysis\n    0x7fffd3c08000 -     0x7fffd3c22fff  com.apple.ProtocolBuffer (1 - 249)\n\n/System/Library/PrivateFrameworks/ProtocolBuffer.framework/Versions/A/ProtocolBuffer\n    0x7fffd3c3c000 -     0x7fffd3c5fff3  com.apple.RemoteViewServices (2.0\n- 124) <280DB828-4613-3DF8-ACBA-C91989B64347>\n/System/Library/PrivateFrameworks/RemoteViewServices.framework/Versions/A/RemoteViewServices\n    0x7fffd4923000 -     0x7fffd499ffff  com.apple.Sharing (671.15 -\n671.15) <37C29D52-CA6E-3E30-9CCF-F7B4A8DE6B9B>\n/System/Library/PrivateFrameworks/Sharing.framework/Versions/A/Sharing\n    0x7fffd49c0000 -     0x7fffd4c21fff  com.apple.SkyLight (1.600.0 -\n108.11) <720141AF-56A6-35C8-B05E-5BF6BA539B53>\n/System/Library/PrivateFrameworks/SkyLight.framework/Versions/A/SkyLight\n    0x7fffd4dfb000 -     0x7fffd4e07fff  com.apple.SpeechRecognitionCore\n(3.0.15 - 3.0.15) \n/System/Library/PrivateFrameworks/SpeechRecognitionCore.framework/Versions/A/SpeechRecognitionCore\n    0x7fffd54eb000 -     0x7fffd5557ff3  com.apple.Symbolication (61080.2)\n<8AB6B520-E8DE-392F-8B86-52098D2A2BA2>\n/System/Library/PrivateFrameworks/Symbolication.framework/Versions/A/Symbolication\n    0x7fffd594e000 -     0x7fffd5954ff7  com.apple.TCC (1.0 - 1)\n<787E8FD8-21A7-39E6-87D4-6AD09156C5A0>\n/System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC\n    0x7fffd59e0000 -     0x7fffd5ba1ff3  com.apple.TextureIO (1.35 - 1.35)\n<63D75E50-F3C2-3E8E-A49B-F53531C24C54>\n/System/Library/PrivateFrameworks/TextureIO.framework/Versions/A/TextureIO\n    0x7fffd5c17000 -     0x7fffd5da6ffb  com.apple.UIFoundation (1.0 - 489)\n<0CD14719-FC52-3AC5-87EF-775437927990>\n/System/Library/PrivateFrameworks/UIFoundation.framework/Versions/A/UIFoundation\n    0x7fffd6da5000 -     0x7fffd6da7ffb  com.apple.loginsupport (1.0 - 1)\n<03B57D6F-C210-32BC-B384-5B0E95660283>\n/System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport\n    0x7fffd6dfc000 -     0x7fffd6e17ff7  libCRFSuite.dylib (34)\n /usr/lib/libCRFSuite.dylib\n    0x7fffd6e18000 -     0x7fffd6e23fff  libChineseTokenizer.dylib (21)\n<09E74E18-ADB2-30D2-A858-13691CB1186C> /usr/lib/libChineseTokenizer.dylib\n    0x7fffd6eb5000 -     0x7fffd6eb6ff3  libDiagnosticMessagesClient.dylib\n(102) <422911A4-E273-3E88-BFC4-DF6470E48242>\n/usr/lib/libDiagnosticMessagesClient.dylib\n    0x7fffd6eb7000 -     0x7fffd70cafff  libFosl_dynamic.dylib (16.37)\n /usr/lib/libFosl_dynamic.dylib\n    0x7fffd70ee000 -     0x7fffd70eefff  libOpenScriptingUtil.dylib (172)\n /usr/lib/libOpenScriptingUtil.dylib\n    0x7fffd70ef000 -     0x7fffd70f2ffb  libScreenReader.dylib (477.10.20)\n /usr/lib/libScreenReader.dylib\n    0x7fffd70f3000 -     0x7fffd70f4ff3  libSystem.B.dylib (1238)\n /usr/lib/libSystem.B.dylib\n    0x7fffd7160000 -     0x7fffd718bffb  libarchive.2.dylib (41.20.1)\n /usr/lib/libarchive.2.dylib\n    0x7fffd718c000 -     0x7fffd7266fe7  libate.dylib (1.12.12)\n<1371D20C-3A80-37A5-AB94-09C4C4F67B01> /usr/lib/libate.dylib\n    0x7fffd726a000 -     0x7fffd726aff3  libauto.dylib (187)\n<5BBF6A00-CC76-389D-84E7-CA88EDADE683> /usr/lib/libauto.dylib\n    0x7fffd726b000 -     0x7fffd727bff3  libbsm.0.dylib (34)\n<20084796-B04D-3B35-A003-EA11459557A9> /usr/lib/libbsm.0.dylib\n    0x7fffd727c000 -     0x7fffd728aff7  libbz2.1.0.dylib (38)\n<6FD3B63F-0F86-3A25-BD5B-E243F58792C9> /usr/lib/libbz2.1.0.dylib\n    0x7fffd728b000 -     0x7fffd72e1ff7  libc++.1.dylib (307.4)\n /usr/lib/libc++.1.dylib\n    0x7fffd72e2000 -     0x7fffd730cfff  libc++abi.dylib (307.2)\n<1CEF8ABB-7E6D-3C2F-8E0A-E7884478DD23> /usr/lib/libc++abi.dylib\n    0x7fffd730d000 -     0x7fffd731dffb  libcmph.dylib (6)\n<2B5D405E-2D0B-3320-ABD6-622934C86ABE> /usr/lib/libcmph.dylib\n    0x7fffd731e000 -     0x7fffd7333ffb  libcompression.dylib (34)\n /usr/lib/libcompression.dylib\n    0x7fffd7334000 -     0x7fffd7334ff7  libcoretls.dylib (121.1.1)\n /usr/lib/libcoretls.dylib\n    0x7fffd7335000 -     0x7fffd7336ffb  libcoretls_cfhelpers.dylib\n(121.1.1) \n/usr/lib/libcoretls_cfhelpers.dylib\n    0x7fffd7672000 -     0x7fffd76c5ff7  libcups.2.dylib (450)\n<04CA1F55-4B70-3D65-B4B1-62F6C271A9EF> /usr/lib/libcups.2.dylib\n    0x7fffd773f000 -     0x7fffd773ffff  libenergytrace.dylib (15)\n /usr/lib/libenergytrace.dylib\n    0x7fffd774f000 -     0x7fffd7754ff7  libheimdal-asn1.dylib (498.20.2)\n /usr/lib/libheimdal-asn1.dylib\n    0x7fffd7755000 -     0x7fffd7847ff7  libiconv.2.dylib (50)\n<42125B35-81D7-3FC4-9475-A26DBE10884D> /usr/lib/libiconv.2.dylib\n    0x7fffd7848000 -     0x7fffd7a6dfff  libicucore.A.dylib (57132.0.1)\n /usr/lib/libicucore.A.dylib\n    0x7fffd7a73000 -     0x7fffd7a74fff  liblangid.dylib (126)\n<3F4530C9-8BE1-3AA7-9A82-98694D240866> /usr/lib/liblangid.dylib\n    0x7fffd7a75000 -     0x7fffd7a8effb  liblzma.5.dylib (10)\n<44BD0279-99DD-36B5-8A6E-C11432E2098D> /usr/lib/liblzma.5.dylib\n    0x7fffd7a8f000 -     0x7fffd7aa5ff7  libmarisa.dylib (5)\n<2183D484-032D-3DE5-8984-3A14006E034E> /usr/lib/libmarisa.dylib\n    0x7fffd7aa6000 -     0x7fffd7d50fff  libmecabra.dylib (744.2.2)\n /usr/lib/libmecabra.dylib\n    0x7fffd7d51000 -     0x7fffd7d82ff3  libncurses.5.4.dylib (51)\n<6B88562D-86DB-3EFA-8C55-0148C30DC642> /usr/lib/libncurses.5.4.dylib\n    0x7fffd7d83000 -     0x7fffd7dfcff3  libnetwork.dylib (856.20.4)\n<5012EFF3-8FF4-317D-B328-AB21E3B5CA8C> /usr/lib/libnetwork.dylib\n    0x7fffd7dfd000 -     0x7fffd81d2127  libobjc.A.dylib (706)\n<47104A1B-13E8-369F-BC36-27FF465809FD> /usr/lib/libobjc.A.dylib\n    0x7fffd81d5000 -     0x7fffd81d9fff  libpam.2.dylib (21)\n<352F8FF6-2248-3594-B357-8D031DEFB06C> /usr/lib/libpam.2.dylib\n    0x7fffd81da000 -     0x7fffd820aff7  libpcap.A.dylib (67)\n<450DB888-2C0C-3085-A5F1-69324DFE902C> /usr/lib/libpcap.A.dylib\n    0x7fffd8228000 -     0x7fffd8244ffb  libresolv.9.dylib (64)\n /usr/lib/libresolv.9.dylib\n    0x7fffd8294000 -     0x7fffd83d5ffb  libsqlite3.dylib (252)\n /usr/lib/libsqlite3.dylib\n    0x7fffd84c7000 -     0x7fffd84d4fff  libxar.1.dylib (354)\n /usr/lib/libxar.1.dylib\n    0x7fffd84d8000 -     0x7fffd85c7ffb  libxml2.2.dylib (30.11)\n<26676155-64CE-323F-B73C-AD77AF5982E8> /usr/lib/libxml2.2.dylib\n    0x7fffd85c8000 -     0x7fffd85f1fff  libxslt.1.dylib (15.8)\n /usr/lib/libxslt.1.dylib\n    0x7fffd85f2000 -     0x7fffd8603ff3  libz.1.dylib (67)\n<46E3FFA2-4328-327A-8D34-A03E20BFFB8E> /usr/lib/libz.1.dylib\n    0x7fffd8612000 -     0x7fffd8616ff7  libcache.dylib (79)\n<84E55656-FDA9-3B29-9E4F-BE31B2C0AA3C> /usr/lib/system/libcache.dylib\n    0x7fffd8617000 -     0x7fffd8621fff  libcommonCrypto.dylib (60092.20.1)\n<31040F10-5E57-3B9C-8D5B-33AD87D1BEE8> /usr/lib/system/libcommonCrypto.dylib\n    0x7fffd8622000 -     0x7fffd8629fff  libcompiler_rt.dylib (62)\n<486BDE52-81B4-3446-BD72-23977CAE556F> /usr/lib/system/libcompiler_rt.dylib\n    0x7fffd862a000 -     0x7fffd8632fff  libcopyfile.dylib (138)\n<0DA49B77-56EC-362D-98FF-FA78CFD986D6> /usr/lib/system/libcopyfile.dylib\n    0x7fffd8633000 -     0x7fffd86b5fdb  libcorecrypto.dylib (442.20.2)\n<2684CC01-087E-33E2-8219-AAA3BBD9BFD7> /usr/lib/system/libcorecrypto.dylib\n    0x7fffd86b6000 -     0x7fffd86e8fff  libdispatch.dylib (703.20.1)\n<877B505D-826C-3246-84F7-0F850636039E> /usr/lib/system/libdispatch.dylib\n    0x7fffd86e9000 -     0x7fffd86eeff3  libdyld.dylib (421.2)\n<7BFA3476-6210-3BCB-8CE8-9B952F87BD84> /usr/lib/system/libdyld.dylib\n    0x7fffd86ef000 -     0x7fffd86efffb  libkeymgr.dylib (28)\n<09CD7CA6-46D2-3A9F-B9F1-7C4CA5CA0D68> /usr/lib/system/libkeymgr.dylib\n    0x7fffd86f0000 -     0x7fffd86fcffb  libkxld.dylib (3789.21.3)\n /usr/lib/system/libkxld.dylib\n    0x7fffd86fd000 -     0x7fffd86fdfff  liblaunch.dylib (972.20.3)\n<7AB2E2EA-8B47-3420-87CE-5EE18A4EEE49> /usr/lib/system/liblaunch.dylib\n    0x7fffd86fe000 -     0x7fffd8703fff  libmacho.dylib (894)\n<1EAE5ADD-490C-3B1F-9F97-447BA8E0E90F> /usr/lib/system/libmacho.dylib\n    0x7fffd8704000 -     0x7fffd8706ff3  libquarantine.dylib (85)\n /usr/lib/system/libquarantine.dylib\n    0x7fffd8707000 -     0x7fffd8708ffb  libremovefile.dylib (45)\n /usr/lib/system/libremovefile.dylib\n    0x7fffd8709000 -     0x7fffd8721ff7  libsystem_asl.dylib (349.1.1)\n /usr/lib/system/libsystem_asl.dylib\n    0x7fffd8722000 -     0x7fffd8722ff7  libsystem_blocks.dylib (67)\n\n/usr/lib/system/libsystem_blocks.dylib\n    0x7fffd8723000 -     0x7fffd87b0fef  libsystem_c.dylib (1158.20.4)\n<5F9531F5-EDA3-3D25-A827-3E0FD6B392BA> /usr/lib/system/libsystem_c.dylib\n    0x7fffd87b1000 -     0x7fffd87b4ffb  libsystem_configuration.dylib\n(888.20.5) \n/usr/lib/system/libsystem_configuration.dylib\n    0x7fffd87b5000 -     0x7fffd87b8fff  libsystem_coreservices.dylib\n(41.2) <5DE691C6-7EE6-3210-895D-9EA3ECBC09B4>\n/usr/lib/system/libsystem_coreservices.dylib\n    0x7fffd87b9000 -     0x7fffd87d1ffb  libsystem_coretls.dylib (121.1.1)\n<8F7E9B12-400D-3276-A9C5-4546B0258554>\n/usr/lib/system/libsystem_coretls.dylib\n    0x7fffd87d2000 -     0x7fffd87d8fff  libsystem_dnssd.dylib (765.20.4)\n<28E52C39-DF10-340F-A3EC-C0119AF6361F> /usr/lib/system/libsystem_dnssd.dylib\n    0x7fffd87d9000 -     0x7fffd8802fff  libsystem_info.dylib (503)\n /usr/lib/system/libsystem_info.dylib\n    0x7fffd8803000 -     0x7fffd8825ff7  libsystem_kernel.dylib (3789.21.3)\n\n/usr/lib/system/libsystem_kernel.dylib\n    0x7fffd8826000 -     0x7fffd886dfe7  libsystem_m.dylib (3121.4)\n<7F86C291-B105-31C1-9923-90EBAB22B73F> /usr/lib/system/libsystem_m.dylib\n    0x7fffd886e000 -     0x7fffd888cff7  libsystem_malloc.dylib (116)\n\n/usr/lib/system/libsystem_malloc.dylib\n    0x7fffd888d000 -     0x7fffd88e4ff3  libsystem_network.dylib (856.20.4)\n<2BAFB24F-999C-3148-BDD8-F28E05F716F7>\n/usr/lib/system/libsystem_network.dylib\n    0x7fffd88e5000 -     0x7fffd88eeff3  libsystem_networkextension.dylib\n(563.20.3) <971DD3AD-D17A-32FF-95DE-0A5A979E68AE>\n/usr/lib/system/libsystem_networkextension.dylib\n    0x7fffd88ef000 -     0x7fffd88f8ff3  libsystem_notify.dylib (165.20.1)\n\n/usr/lib/system/libsystem_notify.dylib\n    0x7fffd88f9000 -     0x7fffd8901fe7  libsystem_platform.dylib (126.1.2)\n<2F2D6A81-C36C-353D-B27B-A6643A32375E>\n/usr/lib/system/libsystem_platform.dylib\n    0x7fffd8902000 -     0x7fffd890cff7  libsystem_pthread.dylib (218.20.1)\n<46375095-4731-3034-9D87-396DE95FC697>\n/usr/lib/system/libsystem_pthread.dylib\n    0x7fffd890d000 -     0x7fffd8910ff7  libsystem_sandbox.dylib (592.21.2)\n<2D42A2BF-A7AF-352A-A821-D8F6E85A63AC>\n/usr/lib/system/libsystem_sandbox.dylib\n    0x7fffd8911000 -     0x7fffd8912fff  libsystem_secinit.dylib (24)\n\n/usr/lib/system/libsystem_secinit.dylib\n    0x7fffd8913000 -     0x7fffd891afff  libsystem_symptoms.dylib (532.1.1)\n<8FB7CA37-79EF-3651-B5B9-B5E1E0947067>\n/usr/lib/system/libsystem_symptoms.dylib\n    0x7fffd891b000 -     0x7fffd893bff7  libsystem_trace.dylib (518.20.8)\n /usr/lib/system/libsystem_trace.dylib\n    0x7fffd893c000 -     0x7fffd8941ffb  libunwind.dylib (35.3)\n<9F7C2AD8-A9A7-3DE4-828D-B0F0F166AAA0> /usr/lib/system/libunwind.dylib\n    0x7fffd8942000 -     0x7fffd896bff7  libxpc.dylib (972.20.3)\n<85EB25FD-218F-38EE-9E69-391CC8EBE6C5> /usr/lib/system/libxpc.dylib\nExternal Modification Summary:\n  Calls made by other processes targeting this process:\n    task_for_pid: 0\n    thread_create: 0\n    thread_set_state: 0\n  Calls made by this process:\n    task_for_pid: 0\n    thread_create: 0\n    thread_set_state: 0\n  Calls made by all processes on this machine:\n    task_for_pid: 328950\n    thread_create: 0\n    thread_set_state: 0\nVM Region Summary:\nReadOnly portion of Libraries: Total=243.1M resident=0K(0%)\nswapped_out_or_unallocated=243.1M(100%)\nWritable regions: Total=110.0M written=0K(0%) resident=0K(0%)\nswapped_out=0K(0%) unallocated=110.0M(100%)\n                            VIRTUAL   REGION\n\nREGION TYPE                        SIZE    COUNT (non-coalesced)\n===========                     =======  =======\nActivity Tracing                   256K        2\nDispatch continuations            16.0M        2\nKernel Alloc Once                    8K        2\nMALLOC                            67.8M       17\nMALLOC guard page                   32K        6\nSTACK GUARD                         12K        4\nStack                             9752K        5\nStack Guard                       56.0M        2\nVM_ALLOCATE                          4K        2\n__DATA                            19.6M      203\n__IMAGE                            528K        2\n__LINKEDIT                       112.5M       10\n__TEXT                           130.7M      206\n__UNICODE                          556K        2\nmapped file                       28.6M        3\nshared memory                     16.0M        6\n===========                     =======  =======\nTOTAL                            458.1M      458\nOn Tue, Dec 6, 2016 at 9:18 AM, Kazuki Sakamoto notifications@github.com\nwrote:\n\nCould you share the crashlog under ~/Library/Logs/DiagnosticReports?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/432#issuecomment-265194099,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaFwlwyDePNFdDQ0hY0EM0ahHZGcGGHks5rFYrygaJpZM4LFVoY\n.\n\n\n-- \nrd\n. I used 116 from the time it came out until 117 came out and never had an\nissue. I use MacVim all day every day, installed by brew.\nThanks\nRick\nOn Tue, Dec 6, 2016 at 10:49 AM, Kazuki Sakamoto notifications@github.com\nwrote:\n\n@RichardDooling https://github.com/RichardDooling snapshot-116 works\nfine for you?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/432#issuecomment-265220376,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaFwsSo7dEio27tRUbV2-EOy-NmEmUJks5rFaAxgaJpZM4LFVoY\n.\n\n\n-- \nrd\n. I'll keep using 117 and let you know if anything else happens.\nThanks again\nRick\nOn Tue, Dec 6, 2016 at 10:54 AM, Richard Dooling rpdooling@gmail.com\nwrote:\n\nI used 116 from the time it came out until 117 came out and never had an\nissue. I use MacVim all day every day, installed by brew.\nThanks\nRick\nOn Tue, Dec 6, 2016 at 10:49 AM, Kazuki Sakamoto <notifications@github.com\n\nwrote:\n@RichardDooling https://github.com/RichardDooling snapshot-116 works\nfine for you?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/432#issuecomment-265220376,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaFwsSo7dEio27tRUbV2-EOy-NmEmUJks5rFaAxgaJpZM4LFVoY\n.\n\n\n--\nrd\n\n-- \nrd\n. Sure I will try it. But let me know if there's a command I should run to\ntest it or something, because I have no idea how mine happened. It just\nshut itself down, which it never does.\nThanks a lot.\nRick\nOn Wed, Dec 7, 2016 at 4:53 PM, Kazuki Sakamoto notifications@github.com\nwrote:\n\nCan you guys try snapshot-118? https://github.com/macvim-dev/\nmacvim/releases/tag/snapshot-118\nI'm not so sure it will fix your case since I didn't get the crashlog from\n@Robert-M-Muench https://github.com/Robert-M-Muench\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/432#issuecomment-265611466,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaFwuNPagBdyhYLRdu_UN0gDcQpX-KCks5rF0cMgaJpZM4LFVoY\n.\n\n\n-- \nrd\n. I'm not sure what your exact problem is, but try doing :h :lcd and :h filename-modifiers\nI have this in my .vimrc, but I confess I had to look up the components when considering your problem.\n\" Change Working Directory Of Active File:\nautocmd BufEnter * lcd %:p:h\nI think you can come up with your own autocmd that will set yours anyway you want it.\nRick\n. Even better\nhttp://vim.wikia.com/wiki/Set_working_directory_to_the_current_file. It never bothered me all that much, but it was always there, a minor\nimperfection in an otherwise almost perfect tool. So this just makes MacVim\nperfect. Thanks a lot.\nOn Fri, Mar 31, 2017 at 9:31 PM, Josh Petrie notifications@github.com\nwrote:\n\nThis is awesome, great work.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/pull/486#issuecomment-290887942,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaFwvoDU5f9JHO2cIxsnMF6NuDLL5gJks5rrbcKgaJpZM4MwEFr\n.\n\n\n-- \nrd\n. I am getting the same error with snapshot 146. None of the fixes suggested work for me. I can open MacVim, but if I type a single character, including space, it crashes and at the commandline it says:\nFatal Python error: Py_Initialize: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'. Rolling back to snapshot 145_1 makes the problem go away.. Send us a pic of what Sublime 3 is doing for you, and people will recommend\nplugins that approximate what you want to do.\nRick\nOn Fri, Nov 10, 2017 at 10:00 AM, Josh Petrie notifications@github.com\nwrote:\n\nThis seems like something that should be handled by plugins, to me.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/592#issuecomment-343528598,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaFwoJKHstKZtIrPiolIinGhWhZrQddks5s1IEigaJpZM4QZTqs\n.\n\n\n-- \nrd\n. It stopped doing it. Sorry for distraction. I fixed errors on hard disk using recovery. Maybe I had a permissions problem. Thanks.. Thanks.\nOn Fri, Dec 29, 2017 at 8:59 AM, chdiza notifications@github.com wrote:\n\nIt's a Homebrew thing. Just wait a bit.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/621#issuecomment-354463568,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaFwpYzfVuvFy752qVKwsgW92mJc9D_ks5tFQxJgaJpZM4RPGtg\n.\n\n\n-- \nrd\n. ",
    "justinmk": "It doesn't really make sense to fork MacVim, I don't think, unless there's a significant amount of code that would be worth re-using. If https://github.com/rogual/neovim-dot-app is slow, it's because it's very new and probably not at all optimized. Lots of low-hanging fruit, and forking MacVim would have to deal with those same issues anyways.\n. ",
    "mudox": "Neovim's idea about its UI clients -- Neovim Smart UI Protocol\nI think it's better to wait until this low level architecture is built up.\n\nThe advantages of this scheme may not be obvious, so let me list a few here:\n- Embedders have complete freedom of how windows are displayed (custom decorators, floating windows\u2026) -- Say goodbye to GVim's fake windows ...\n- Frameless, single-line windows can be created, good for using Neovim as shell line editor for example.\n- Windows can have different fonts/sizes.\n- Custom widgets for displaying the command-line and insert-mode completion.\n. \n",
    "auserdude": "Yes I agree, there should be something like a reference website for MacVim. At this time things are a little bit confusing. A good approach, in my opinion, would be to have a \"central\" MacVim website on GitHub Pages that show information, references, contacts, downloads and so on, and to keep the discussion and the repository here as usual. \n. ",
    "fatuhoku": "... So ... yeah, where's the download link to the .dmg these days?\n. ",
    "yacoob": "It'd be nice to get an official statement, whether it's something that's hard to do and requires some help, or is it just not going to happen because of some reason.\n. I see - this does make sense. I don't think the Lua support is worth the trouble of including a lua interpreter or something like that. Thanks for the explanation.\n. I know I can do it - I explicitly wanted to avoid this, as you need whole XCode for this, and the resulting application is linked dynamically - which makes it bit brittle if you want to deploy it across different OSX versions for example.\nBut in the meantime I've simply dropped the neocomplete in favour of ycm.\n. Before filing this bug I've bumped into this problem a couple of times over 6 last months. This time I was finally angry and determined to trace it down. After reading your update and bit of testing it looks like there's something more at play.\n- I can't reliably reproduce it via the method I've described in first update - I'm guessing that's what is causing MMTopLeftPoint to be set to large value, but I can't make MacVim fail on demand in a way I've described there.\n- I can blow it up most of the time by setting the second coordinate to offscreen value\nMore testing to follow. FWIW, I have:\nset lines=999                \" maximize window by default, vertical\nset columns=999              \" and horizontal\nin my .gvimrc, but all of the testing I've done that I've described above in this update was done with calling mvim -u NONE -U NONE.\n. @georgesnelling since two or versions of OSX or so, removing plist is no longer sufficient, as preferences are cached by a system daemon. If you want to test this, you need to rm the file and then killall cfprefsd.\n. FWIW, I have these in my .gvimrc:\nvim\nset lines=999                \" maximize window by default, vertical\nset columns=999              \" and horizontal\nPerhaps it's the wrong value and a resize that's causing this? Sorry, can't verify this on my own atm.\n. Hm, I've actually mentioned that earlier in this bug's history too. Hehe :D\n. Yup, I'm on 10.10.5, and I'll be upgrading soon-ish. Unless MacVim requires 10.11, I still think this is a bug worth fixing :)\n. Done. I think you can also ask github to squash automatically during merge\nnowadays.\n. This is still broken in snapshot 144.\nSpecifically: this behaviour manifests when you launch MacVim via mvim from command line. If you launch it this way:\n- MacVim window will appear, but it'll be placed in the background, and won't be brought back to the front automatically\n- MacVim icon will be missing from the application switcher and Dock.\n- Even if you explicitly focus MacVim's window, it will not receive keyboard focus - any keyboard input will go to previously focused app.\nNone of the above will happen if you just launch MacVim via doubleclicking its application icon. There's a difference in the binary arguments, between those two launch modes:\nFrom command line:\n\u2500\u252c= 00001 root /sbin/launchd\n \u2514\u2500\u252c= 13227 yacoob /Applications/MacVim.app/Contents/bin/../MacOS/Vim -f -g\n   \u2514\u2500\u2500= 13236 yacoob /Applications/MacVim.app/Contents/MacOS/MacVim -MMNoWindow yes\nVia icon doubleclick or Spotlight:\n$ pstree -g3 -p 12928\n\u2500\u252c= 00001 root /sbin/launchd\n \u2514\u2500\u252c= 12928 yacoob /Applications/MacVim.app/Contents/MacOS/MacVim\n   \u2514\u2500\u2500= 12929 yacoob /Applications/MacVim.app/Contents/MacOS/Vim -g -f\nA brief search for MMNoWindow suggests that this is an explicit \"show no window\" mode, but I haven't found any recent changes around that. Maybe something else is triggering this behavior in vim launcher?\nI've noticed this happening with official release downloaded from github, and for cask (which uses same dmg, if I'm not mistaken). I haven't yet tried compiling MacVim from current head, but for the moment please reopen this bug, so people can find the problem.\nThanks!. Erp, I won't be able to test a full build, as it requires full Xcode install - and I'm currently unable to get my hands on an environment equipped with that. Sorry :(. One more thing: I've verified that this is configuration independent, by launching mvim -U NONE -u NONE. It got \"disabled\" in the same way as I've described above.. I've just discovered that there must be some confounding factor here - I've rebooted the machine on which I've observed those problems since my last comment, and MacVim is behaving properly (window gets focus, is present in dock and switcher) when launched from command line. It still has -MMNoWindoow yes set. Can you tell me what kind of debug information can I provide you with in case I manage to get in this situation again?. > could you fix the indent? and gui= doesn't work (instead of gui='')\n\nI've switched to tabs instead of spaces, and used an empty value. Please\ntake another look.\n\nKT.\n. ",
    "JakobR": "You could install macvim via homebrew, there's an option to enable lua support:\nbrew install macvim --with-lua\n(Run brew info macvim to see a list of options.)\n. ",
    "thblt": "Yes, exact same problem.\nIt seems to be somehow related to the way the French azerty mapping behaves : it all works fine with an US qwerty mapping (where, IIUC, ~ is Cmd+Opt+n). The Swiss French Qwertz has the same problem as the French azerty, though.\nFor some reason, my Linux VM won't boot, I'm going to reinstall it and try in gvim to compare. It may be a vim bug.\n. It seems to have to do with the way the ~ key (and not the command) behaves. I would suspect some strange dead key behavior.\n- The buffer gets the modified flag when another key gets pressed after ~, like : (which obviously hasn't changed it). Weird enough, after ~, even Cmd-S doesn't save the buffer but instead marks it as modified. \n- To insure that the problem doesn't have to with the toggle case command, i remapped p to ~ (nnoremap p ~) :  p correctly changes the case and sets the buffer modified flag. \n- If instead I remap ~ to x (nnoremap ~ x) the problem continues to occur with ~, even though it now does a very different thing.\n- nnoremap x` has exactly the same problem.\n(All tests performed with mvim -u NONE -U NONE -N and with Karabiner disabled)\n. Found it: disabling \u201cdraw marked text inline\u201d in MacVim's preferences fixes the problem.\n. ",
    "jasonlong": "I can't comment on the code itself, but I'd love to have this functionality. :thumbsup:\n. @Shirk @jpetrie Thanks for the hard work looking into this. :clap:\n. ",
    "elfi": "You are right, ctrl-click behaves as right click. And this actually \nworks for me in MacVim ... I get the right click 'menu'.\nThus the ctrl key is not ignored completely completely :-)\nOn 2015-07-12 23:11, Arseny Nasokin wrote:\n\n|ctrl| is binded to help you with right mouse click in Mac OS X by \ndefault, isn't it? Some programs may use it as modifier.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/macvim-dev/macvim/issues/57#issuecomment-120762570.\n. As I wrote in my first post, none of the ctrl- shortcuts works. Pressing \nctrl-v or ctrl-whatever does not have any effect, regardless of mode \n(normal, insert, command : )\n\nPlease note that pressing, eg ctrl-a, does not have effect of ctrl-a, nor \na alone. It is really just nothing happens. MacVim is the only program I \nexperience this issue with. And I tried to start MacVim with -u NONE\n-- no change.\nOn 2015-07-13 09:06, Douglas Drumond wrote:\n\nCtrl-click as right click is the desired behavior on Mac OS.\nThe original post doesn't say anything about click, though, just that \nctrl isn't working. @elfi https://github.com/elfi, what do you mean \nby that? I use ctrl- shortcuts all the time (such as ctrl-v for block \nselect) and I haven't experienced problems so far.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/macvim-dev/macvim/issues/57#issuecomment-120833854.\n. Yes, I did. It did not help :-/\n\nOn 2015-07-21 20:52, chdiza wrote:\n\nDid you try starting MacVim from the terminal with |mvim -u NONE -N|? \nThat will rule out any interference from your |vimrc| or |gvimrc| or \nplugins.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/macvim-dev/macvim/issues/57#issuecomment-123439948.\n. Ha, I've just found the root course. It is the Programmer Dvorak keyboard. When I switch to the default - Swedish Pro in my case - ctrl- commands work fine. \n\nNow the question what is wrong with Programmer Dvorak CTRL key concretely in MacVim as other applications are fine with it.\n. The problem has disappeared with latest MacOS update. \n. ",
    "Leandros": "Still not working for me. I, too, am using a custom keyboard layout (build using Ukelele). Seems to work if I use an english or german layout. Shouldn't interfere, though, since I do no remapping of the ctrl key.. I did exactly that. There is no difference in what key code is sent based on what layout I'm using. . ",
    "jirutka": "@eirnym Okay, I\u2019ll wait for reaction from @douglasdrumond and then I\u2019ll possibly redesing the background picture a bit. I don\u2019t want to waste my time for the second time, just 3 years later. ;)\n. @eirnym What licences? I took logo from #1 and as I understand it, this is the \u201cofficial\u201d MacVim logo.\n. Ah, that one. MIT is very permissive license, so I hope that it\u2019s not a problem. However, I\u2019m not a lawyer.\n. ",
    "dlindelof": "Hello,\nRunning the Vim that ships with MacVim yields the same results.\nI have prepared a screencast that shows the problem. On the right pane I\nuse Vim from MacVim. In the left pane I use the system-installed (i.e.,\nbrew) vim. I try to connect to a host called 'strider-local', with my\nusername 'dlindelof'. The right pane times out after about 1'30''.\nhttp://screencast.com/t/i0YiBbhkL\nHope this helps,\nOn Tue, Jul 21, 2015 at 8:50 PM chdiza notifications@github.com wrote:\n\nI can't reproduce it, not even with mvim -u dummyrc -N, where dummyrc is\na blank file.\nWhat about if you run it from the Vim located at\n/Applications/MacVim.app/Contents/MacOS/Vim?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/60#issuecomment-123439209.\n\n\nDavid Lindel\u00f6f, PhD\nChief Technology Officer\nM +41 (0)79 415 66 41\nT +41 (0)22 552 11 62\nF +41 (0)22 552 11 60\ndavid.lindelof@neurobat.net\nhttp://neurobat.net\nhttp://computersandbuildings.com\n. Well, what do you know. It works with MacVim Snapshot 77. Thanks!\n\nOn Thu, Jul 23, 2015 at 5:37 PM chdiza notifications@github.com wrote:\n\nFor example, the version of netrw contained in MacVim 7.4.258 might not\nlike a URL like yours where there is no dot.\nWe'll know more after you try MacVim Snapshot 77. If it still doesn't work\nthere, it's a netrw issue.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/60#issuecomment-124142708.\n\n\nDavid Lindel\u00f6f, PhD\nChief Technology Officer\nM +41 (0)79 415 66 41\nT +41 (0)22 552 11 62\nF +41 (0)22 552 11 60\ndavid.lindelof@neurobat.net\nhttp://neurobat.net\nhttp://computersandbuildings.com\n. \n",
    "sc68cal": "I can reliably reproduce this when I use MacVim as my mergetool for Git.\n[mergetool \"mvim\"]\n    cmd=mvim  -c 'wincmd J' -f -d \"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"\n12/3/15 10:37:36.341 AM Vim[55698]: *** -[NSMachPort handlePortMessage:]: dropping incoming DO message because the connection is invalid\n12/3/15 10:37:36.342 AM Vim[55698]: -[MMBackend(Private) connectionDidDie:]@2315: Main connection was lost before process had a chance to terminate; preserving swap files.\n12/3/15 10:38:12.359 AM Vim[56164]: *** -[NSMachPort handlePortMessage:]: dropping incoming DO message because the connection is invalid\n12/3/15 10:38:12.359 AM Vim[56164]: -[MMBackend(Private) connectionDidDie:]@2315: Main connection was lost before process had a chance to terminate; preserving swap files.\nThis is with Snapshot 77\n. @splhack I'll take a look - but I'll also report that after rebooting my machine I haven't seen the issue since\n. Same here, with Amethyst . ",
    "wulh": "+1, encounter this when i quit Mac Vim, and i just upgrade to OS X 10.11.\nUpdated: after closing \"Prefer native full-screen support\" option, it did not raise this exception again.\n. ",
    "ghost": "Thanks @wulh , i have same prolem.\n. +1\n. @jpetrie Okay, it's gone away.\n. Yes, I can confirm. The exact repro:\n Open iTerm, make it print any path (for example with greadlink -f ~/.gitconfig)\n Use Cmd+click to open the text file in MacVim.\n\n. I forgot to add that before doing this one instance should be pinned to the Dock. I mean, just launch MacVim, right mouse button -> Options -> Keep in Dock, then Cmd+Q. And then the repro.\nOutput when none of those are running:\n2642   0.3  0.0  2443044    816 s000  S+    5:18PM   0:00.00 grep --color=auto MacVim\nOutput when I do the repro and leave the text file being opened:\n2891   0.0  0.0  2423384    228 s000  R+    5:20PM   0:00.00 grep --color=auto MacVim\n2878   0.0  0.2  2537004  13396   ??  Ss    5:20PM   0:00.36 /usr/local/Cellar/macvim/8.0-126/MacVim.app/Contents/MacOS/Vim -g -f -p /Users/alexey/.gitconfig\n2873   0.0  0.9  2841148  71736   ??  S     5:20PM   0:00.67 /usr/local/Cellar/macvim/8.0-126/MacVim.app/Contents/MacOS/MacVim\nOutput after I Cmd+Q on the window with the text file opened is similar to the first one.\nAll usernames were stripped.. This works great now, thank you. Opening a file either way uses the same icon.. ",
    "Arnoldnuo": "Thanks @wulh ,I have same problem, and It is fixed after closing \"Prefer native full-screen support\".\n. ",
    "evoling": "Thanks for checking this out. I've tried the same thing (with the same .vimrc/.vim) on my computer at home and it works fine -- the obvious difference is that sys.path has lots of directories in it, including all the ones under /System/Library/Frameworks/Python.framework/.\nAnyway, it doesn't look like this is anything to do with MacVim. Sorry for the bother.\n. ",
    "9mm": "I have the same issue, when I open vim from terminal a lot of times it will be 100% transparent except for text characters. I have to redraw it to get it to fill, by resizing or whatever.\nHappened when i upgraded to 10.11\n. seems to be fine for me so far!\n. Awesome!! Thanks so much, thats amazing \ud83d\udc4d  I appreciate the great answer.. Wow this would be awesome... how hard is it modify that to make it like iTerm?. Sorry to clarify -- regarding the dark color only. NOT about the functionality you mentioned about iTerm. @alswl yes my vim looks like burnt toast, it's horrible to code in. I'm just hanging in there until it's fixed, hopefully within a week or something :/. \n. thanks!. ",
    "limintang": "Just saw the same issue. The easiest way to reproduce this issue (also 100% reproducible) is to open two tabs, stay on the right tab, then use mouse cursor to close the left tab.\nTwo notes:\n1. Close the right tab first, or switch to the left tab first then close it, issue does not happen.\n2. Unselect the option \"Use Core Text Render\" in the preference panel (i.e. disable transparency), this issue does not happen, either. So this should be a MacVim issue, not related to any plugin.\nThis happens on 10.11; don't know whether it happens on 10.10 or not.\n. The issue seems fixed by #110. Thanks.\n. This commit also causes another issue: the native full screen on El Capitan sometimes does not work correctly:\n\n. ",
    "nornagon": ":rotating_light: :+1: :rotating_light: \nthis is EXTREMELY important for writing documentation.\n. ",
    "kentcdodds": "Hooray!\n. ",
    "georgesnelling": "I'm hitting this 100% of the time after installing El Capitan,  meaning my macvim installation is completely hosed.  I uninstalled the old version, cloned this repro and built from source today.  I've tried mvim --fresh without luck. Here are the defaults: \ndefaults read org.vim.MacVim\n{\n    MMCurrentPreferencePane = Advanced;\n    MMLastWindowClosedBehavior = 2;\n    MMNativeFullScreen = 0;\n    MMUntitledWindow = 0;\n    NSQuotedKeystrokeBinding = \"\";\n    NSRepeatCountBinding = \"\";\n}\nI've renamed my .vim, .viminfo, .vimrc and .gvimrc to other names and relaunched.  Same problem:  The macvim icon appears in the doc and the menu is active, but there is no window, and no way to create a window.  \nOne clue that I can't figure out:  if I right-click on the macvim icon in the dock, it displays a list of my most recently opened files.  I can't figure out where that list is coming from:  it persists between installs and reboots, and is not coming from any of my vim - related .dot files, since it still appears after they have all been renamed.   I wonder if this is the same place macvim is getting its last known window location from the OS?  If you know where that is please comment and I'll see if I can clear that.\nAny ideas?\n. Thanks for the reply.  If I create an entirely new user account and run macvim from there everything works fine, so the build itself is ok.\nIn the hosed user account I tried removing ~/Library/Preferences/org.vim.MacVim.plist altogether and that did not help.  \nI think it's getting some unexpected value from the OS for last window position for this app for this user, but that data is stored someplace other than the dot files, and the org.vim.MacVim.plist.  I'm afraid I don't know Objective C well enough to debug it better than that.\n. Thanks everyone:\n[gs] ~ $ defaults delete org.vim.MacVim\n[gs] ~ $ defaults read org.vim.MacVim\n2015-10-29 14:45:05.569 defaults[996:130822] \nDomain /Users/gs/Library/Preferences/org.vim.MacVim does not exist\n[gs] ~ $ killall cfprefsd\n[gs] ~ $ killall cfprefsd\nNo matching processes belonging to you were found\n[gs] ~ $ \nThen launch macvim:  no window.  The OS must be reading that value from some other key.  \n. Nope, completely vanilla.\n. I don't have enough of a repro to reopen the issue, but I believe the issue occurred for me when running 10.11.2.  Hopefully I'm wrong, and this was fixed in Apple code and we'll never see it again.  But if someone out there ever hits it again using builds >= 10.11.2 know that you are not entirely alone or crazy.\n. Oh, you may well be right.  I was messing around with docker at the time.  I withdraw my skeptical comment.  \n. ",
    "nedbat": "I can reproduce this (sometimes?).  I connect a large external monitor, and then close my laptop lid, so I have only one screen, on the external monitor.  I open MacVim, and position it to fill the screen.  Quit MacVim.  Unplug the monitor to go back to the laptop screen.  Look at plutil -convert xml1 -o - org.vim.MacVim.plist, it will have MMTopLeftPoint set to something large like {217, 1408}.  Now MacVim will get the stacktrace in the original description.\nDeleting the property with defaults delete org.vim.MacVim MMTopLeftPoint fixes it.\nBUT: sometimes the MMTopLeftPoint property isn't set? No idea why.  In that case it works fine.\n. I seem to be able to reproduce this simply by setting MMTopLeftPoint:\n[:~/Library/Preferences] $ plutil -convert xml1 -o - org.vim.MacVim.plist\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>MMAutosaveColumns</key>\n    <integer>66</integer>\n    <key>MMAutosaveRows</key>\n    <integer>23</integer>\n    <key>NSQuotedKeystrokeBinding</key>\n    <string></string>\n    <key>NSRepeatCountBinding</key>\n    <string></string>\n</dict>\n</plist>\n[:~/Library/Preferences] $ # MacVim launches just fine.\n[:~/Library/Preferences] $ defaults write org.vim.MacVim MMTopLeftPoint '\"{217,1408}\"'\n[:~/Library/Preferences] $ plutil -convert xml1 -o - org.vim.MacVim.plist\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>MMAutosaveColumns</key>\n    <integer>196</integer>\n    <key>MMAutosaveRows</key>\n    <integer>56</integer>\n    <key>MMTopLeftPoint</key>\n    <string>{217,1408}</string>\n    <key>NSQuotedKeystrokeBinding</key>\n    <string></string>\n    <key>NSRepeatCountBinding</key>\n    <string></string>\n</dict>\n</plist>\n[:~/Library/Preferences] $ # MacVim won't open a window\n[:~/Library/Preferences] $ defaults delete org.vim.MacVim MMTopLeftPoint\n[:~/Library/Preferences] $ # MacVim opens fine.\nUsing MacVim 7.4 (84).\n. Hmm, I wonder if somehow it is important that I have used an external monitor in the past? Too much state....  I'm on 10.10.5, btw.\n. There's a factor in my init files somewhere.  Using -u NONE -U NONE, it doesn't happen.  I'll try to find it.\n. Create a gvimrc_bad file with this:\nset lines=999 columns=999\nThen:\n$ defaults write ~/Library/Preferences/org.vim.MacVim MMTopLeftPoint '\"{217,1408}\"'\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U gvimrc_bad\nThis crashes for me.\n. @yacoob wow, your comment appeared as I was entering mine!\n. ",
    "gamer7569": "Czdcyuzvjjcjl.\nSent from Outlook Mobile\nOn Fri, Dec 18, 2015 at 7:27 PM -0800, \"Kazuki Sakamoto\" notifications@github.com wrote:\nClosed #66.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/macvim-dev/macvim/issues/66#event-496431021\n. ",
    "rhendric": "Thanks for the analysis, @jpetrie! I'll take a shot at a fix.\n. @chdiza, if you would like to test rhendric/macvim/master, it should contain fixes for both issues.\n. Hm. At first glance I don't see how that could happen\u2014unless maybe you didn't make clean first?\n. Interesting. I'll take another look.\n. Thanks @chdiza! Added to the PR and my master branch. (I'm still ignorant as to how that ends up being a linker error, but I'm no expert on C preprocessing either.)\n. If you're asking me, :+1:\n. Hi, 10.6 user here (the last snapshot build I can compile as-is is 80). I found this thread while trying to restore 10.6 support to a more recent build; there are probably plenty more qualified people to be maintainers of a legacy branch but I'd like to help.\n. Are the legacy xcodeprojs for 10.6? My reading is that they're only for 10.4 and 10.5, which I can't test.\nA 10.6 build based on snapshot 88 appears very achievable with a minimum of edits/conditionals, by the way. The biggest issue is the new qlstephen subproject, which I just dropped altogether. If MacVim_legacy.xcodeproj becomes for 10.6 instead of for 10.4 and 10.5, then that's easily addressed; otherwise, it's the only change I'm not sure how to package up for a PR.\n. @splhack, how's this?\n. Ohhh, you want a new PR?\n. I also had to get the two in src/MacVim/PSMTabBarControl/PSMTabBarControl.xcodeproj/project.pbxproj.\n. :+1:\n. Looking at it now.\n. @dliessi, I can't reproduce this error from a fresh checkout of either master or snapshot-89. I don't use MacPorts; is that environment possibly influencing this? Can you build MacVim outside of MacPorts?\n. @dliessi, can you test rhendric/macvim@0fa9a53?\n. @splhack Nope! Even my Xcode 4.2 can't open master's Preferences.nib, so I was hoping if it worked for dliessi that you would do to it what I did to the older one\u2014just change the Document Versioning setting to target Interface Builder 3.2 format.\nOddly enough, however, I did test my build (with atsuiButtonClicked, apparently, which should be broken because it says coreTextButtonClicked in MMAppController.m) against master build (with coreTextButtonClicked, presumably) and noticed the same behavior in both\u2014changing the CoreText setting doesn't take effect until the next window is opened, but then it does, and it's persisted across restarts. I have zero experience in working with GUIs in Xcode, but might it be possible that that event handler isn't actually doing anything useful?\n. Does your Xcode version not have these settings?\n\nOr is there some cost I'm not aware of to using them?\nIf neither of the above are true, I don't understand why such a small thing as changing a document setting would push you to drop support.\n(I'd submit my own changed Preferences.nib, except I'd be worried about missing other changes that you made, or not dragging the right thing onto the other thing, because again, zero experience.)\n. Fair enough. PR inbound.\n. :smile:\n. ",
    "steakknife": "There doesn't seem to be a prebuilt app for snapshot 78.\n. \nThis was found floating by itself behind all other desktop views/windows:\n\n. EDIT: the NSAlert and all other behavior appears correct. It's only the placement of the NSAlerts when a new window is first opened.\nJust built HEAD from source.  I found how to reproduce this nondeterministic behavior in the following contrived but more deterministic manner.\n``` shell\nOS X 10.11.5 / Xcode 7.3.1\ninstall build from HEAD source as /Applications/MacVim.app\nmove local ~/.vimrc and ~/.vim/ out of the way\ncd /tmp\ntouch a .a.swp\nfor X in seq 5; do mvim a; done\n```\nAfter that, some ways to get out is to \u2318-q or move the unclosable document windows (because of modal NSAlerts) out of the way to answer them beneath.\nI'll create a rough-draft PR which demonstrates a fix to this.\n. Opening 50 files with alerts, not a single problem so far.  The PR seems to fix it.\n. Closing since there's a likely fix.\n. @rainhead Have a look at src/MacVim/MM{Vim,Window}Controller.m, especially handleMessage:: and the various Cocoa delegate callbacks.\n. Friends don't let friends code tiredly. ;)\nI think you mean this:  ff46465\n. NSMutableArray isn't thread-safe.\n. Do you know? Otherwise, it would seem unwise to risk difficult-to-diagnose and impossible to reproduce bugs without knowing for certain that there's only ever one thread. (Running in Xcode shows several of the usual threads.) All possible code paths of bothrunAfterWindowPresentedUsingBlock: and presentWindow: have to be considered.\npresentWindow: is called in MMAppController and MMVimController (and it gets messier tracing back from there)\nrunAfterWindowPresentedUsingBlock: is only called in MMVimController\nIs it really worth Sayre's law and increasing technical&|support debt over 7 lines?\n. So far, I think you're right. I grepped^ and temporarily put some debug NSException conditions in for non-main thread and trylock not succeeding... seems like all main-thread with very anecdotal, meat-puppet CI.  MMAppController points to threading issues but not window controller / event processing related. If/when migrating to Swift, it would probably be worth considering rewriting event processing using Notification Center and GCD to prevent the UI from hanging (unless it's desirable) during long operations.\n^ egrep -ri '(queue|thread|event|selector|operation|dispatch)' src/MacVim | grep '^[A-Za-z0-9_+]*\\.[mh]: ' | less\n. There's little consistency in coding style (esp. ifs) so it's confusing. Probably want a style guide or a PR to do a mass-reformat a-la Postgresql/FreeBSD/etc. src/MacVim/qlstephen/ is really bad. There's 487 naked if's and 1004 block ifs with both single and multiple statements.\n. Yup, there's no point in using NSOperations ~~unless the execution causes a deadlock (actually, that was only with waitUntilFinished:YES] because executing on and waiting on the same thread doesn't let the run loop process it's queue).~~\n. ",
    "djjcast": "Yes, it ignores the OS settings and relies on mousetime instead. I agree that this change might catch some users off-guard. Here are a couple of ways to handle it:\n1. Add a preference to either use the OS settings or mousetime like @jpetrie suggested\n2. Use the OS settings if mousetime is set to it's default value (500) and/or a negative number\nThe reason I want MacVim to support mousetime is to be able to dynamically disable multi clicks through vimscript. Here's my use case:\nVimL\nmap <silent> <LeftMouse>\n    \\ <LeftMouse>:<C-u>if &filetype ==# 'vimfiler' \\|\n        \\ set mousetime=0 \\|\n        \\ let cursorchar = matchstr(getline('.'), '\\%' . col('.') . 'c.') \\|\n        \\ if (cursorchar ==# g:vimfiler_tree_opened_icon) \\|\\|\n           \\ (cursorchar ==# g:vimfiler_tree_closed_icon) \\|\n            \\ execute \"normal 0\\<Plug>(vimfiler_expand_tree)\" \\|\n        \\ else \\|\n            \\ execute \"normal 0\\<Plug>(vimfiler_cd_or_edit)\" \\|\n        \\ endif \\|\n        \\ unlet cursorchar \\|\n    \\ else \\|\n        \\ set mousetime=500 \\|\n    \\ endif<CR>\nThis disables multi clicks in all vimfiler windows by setting mousetime to 0.\n. I think :help mousetime implies that all GUI implementations should respect mousetime. It seems wrong to ignore mousetime or favor the GUI toolkit's interpretation of double-clicks.\nThere isn't a consensus between the core GUI implementations on how to interpret double-clicks - some use mousetime while others rely on the GUI toolkit.\nThe GTK+ version uses mousetime in favor of the GDK GDK_2BUTTON_PRESS event. Maybe mousetime wasn't considered when the other GUI implementations were developed - it's an obscure setting that's easy to overlook.\nAlso, this README outlines how the GUI implementations should work as a \"clever terminal\".\n. Thanks for the update! I think this looks like a good solution to the problem.\nAlthough, we should be using mach_absolute_time() instead of NSDate to calculate the time interval between mouse clicks. I'm not sure if it's still the case, but calls to NSDate are not guaranteed to return times in chronological order:\nhttp://stackoverflow.com/questions/7854932/will-two-nsdate-date-following-each-other-always-return-different-times\n. Okay, I just installed the update and everything's working as expected; setting mousetime to zero disables multi clicks and setting mousetime to a really large value also works as expected. Thanks again.\nHere's a vimscript snippet that sets MMUseMouseTime:\nVimL\nif has('gui_running') && has('macunix')\n    call system('defaults write org.vim.MacVim MMUseMouseTime -bool TRUE')\nendif\n. Yeah, it's a one time thing that should go in a \"new-system initialization script\". The snippet's just a convenience hack  so I don't have to think about setting MMUseMouseTime after cloning my Vim config to a new system.\n. ",
    "andrewplummer": "If this is some kind of technical limitation, then I can get it, but there are plenty of other apps that deal with \"fixed height\" (basically any other text editor... Sublime Text, etc?) that don't have this issue. \n\nIt won't do this in the vertical direction, of course, but neither will \"a native OSX window\".\n\nSure it will. Take a finder window and drag it down to the bottom of the screen, then vertically resize up. You can keep doing that to make it as tall as you like. That being said, it sounds like the \"fixed height\" thing is the actual issue, so I guess this part isn't too relevant.\n. OHHHH I get it now! I just tried this out with VimR and and GVim on Ubuntu and they both have the same issue. It's because vim naively (don't mean anything by this...of course I realize it was never intended as a windowed app) puts the statusline and everything else below N rows. Also I jack up my font size pretty high so the effect is more pronounced.\n\nBut on top of that, I'm not really sure what one would want Vim to be \"putting\" there in that thin little space.\n\nIf my opinion is worth a damn at all (which it's probably not), I would be delighted if it put a strip that matches the background color at the top, just below the titlebar. That way the window would sit flush but the statusline would still be at the bottom. Of course an option to put it at the very bottom of the window (or not use at all) would be even better.\nBut feel free to ignore this. Now that I get how it works the whole thing sits better... plus I can just turn down the font size.\n. HOLY BAT DROPPINGS ... you did it!\nThat's exactly what I was looking for!\n. So I'll just leave this issue for you to close, but this completely solves the issue for me!\n. So this fix is so almost perfect I feel bad for commenting, but just to be thorough: I tweaked these values (and also MMTextInsetRight) to get it perfect when I'm using Divvy and putting in on half the screen. But when I'm not using an external monitor I put MacVim in full screen (divvy \"full\", not OSX native fullscreen) because of the small screen. Presumably the gutter is double what I made it for \"half\" the screen because there's still a gap, but since it's a static value there will always be a gap I suppose.\nSeriously though............. not complaining........\n. Interesting note, I just got a \"tip\" popup from iTerm 2 which said \"Hold ^ while resizing the window to not snap to characters\" (ie. resize by pixel). Tried it out and sure enough it works, so it seems like they are handling this quite well. iTerm works great with Divvy as well, it simply adds some padding around the edges.\n. Apologies, I had recently updated my plugins and it turned out it was a plugin update that is causing this behavior. I should have checked this first before opening this issue.. ",
    "kaiwood": "There are 2 settings, MMTextInsetTop and MMTextInsetBottom, to slightly adjust the window size. What it does is, it adds additional pixel rows on the top and the bottom of the window. For example, I've set mine to:\ndefaults write org.vim.MacVim MMTextInsetTop 3\ndefaults write org.vim.MacVim MMTextInsetBottom 5\nNow when I maximize the window, it aligns pixel perfect with the dock. \nIt really depends on the screen size, height of the dock and your font, so you would have to find your own \"best settings\" for your machine. A word of caution: If you set any of this too high, Vim will not be able to render the last row of text and the window will get exactly one font row smaller then before, so you might want to increment one pixel-row at a time.\nOh, and keep in mind that you have to restart MacVim each time you change these  ;)\n. ",
    "nkarls": "MacVim's full screen mode seems to rely on having a fixed/unchanging window size.\nUpon entering full(split)screen, MacVim will allocate as much of the screen real estate as possible, leaving only a small margin for the other app it should share the desktop with.\nResizing the portions of the screen between the two apps on it will produce the glitched drawing. Moreover, resizing will not actually change the size of the editor buffer but just the visible part of it: lines don't wrap on the new window border but go beyond it into the invisible part of the editor only to wrap at some later point.\nEvery switch to another editor tab will restore the original full-screen window size, too, so editing multiple files in a split view is unusably inconvenient.\n. ",
    "wiserfirst": "I'm having the same problem with MacVim in full screen split view on El Capitan.\nI'll summarize what I know:\n1. When putting MacVim in full screen split view or re-sizing the split view, it becomes a black screen or random patterns\n2. Everything would be fine if redraw is triggered either by :redraw! command or by C-F / C-B\n3. Scrolling the screen with mouse or j/k would trigger similar issues like the screenshot by @ahmadsalim \n4. If the MacVim window is closed, MacVim application would crash every time.\n. ",
    "kamitchell": "I think this comment in MMFullScreenWindow.m may have bearing:\n* When entering full-screen mode the window controller is set to control an\n * instance of this class instead of an MMWindow.  (This seems to work fine\n * even though the Apple docs state that it is generally a better idea to\n * create a separate window controller for each window.)\nI wonder if swapping the window out without making a new window controller is confusing the split view logic in AppKit. Just a theory.\nThanks @splhack for #86! It shows where the critical code is. I built MacVim for myself, and I can get split view mode with correct drawing, though it fights with the split size and sometimes needs redraws. I feel motivated to clean up other full-screen glitchiness if I find a few moments.\n. (At home now) Built this myself, and it looks good to me.\nThe other problems with MacVim having redraw problems after resizing the El Capitan full-screen split seem to be unrelated, and for some reason don't always occur. I'll start working with a development version of my own and see if I can puzzle out some of the rare issues.\n. ",
    "FGasper": "On 7 Oct 2015 12:54 PM, Josh Petrie wrote:\n\nWhat did it used to do (or rather what do you expect it to do)? Do you\nhappen to remember what the last snapshot number was for the instances\nyou saw it working the way you expect?\n\nI would expect it to focus the newly-opened window. This is the behavior \nthat I observe on my laptop.\nI can\u2019t remember which snapshot I was on \u2026 just that it was the last one \nmade for Snow Leopard.\n\nThere was a change to |mvim| a little while ago, as far as I recall it\njust reordered the search priority for the application though. Beyond\nthat it hasn't changed much since 2008. Which OS version are you on now?\n\nI\u2019m using OS X Mavericks on a Mac Pro from about 5 years ago. There are \nthree monitors, arranged side-by-side.\nThe laptop runs Yosemite, has no external monitors, and behaves correctly.\nBoth machines have MacVim installed via MacPorts.\nIs there a \u201cdebug\u201d mode that I could enable to see why it\u2019s focusing the \nleftmost window on the Mavericks machine?\n-FG\n. @chdiza I get the following from that command:\n```\nFelipe@Felipes-Mac-Pro ~\n\ndefaults read -app MacVim\n2015-10-08 10:41:19.987 defaults[40782:507] Couldn't find an application named \"MacVim\"; defaults unchanged\n```\n\nActually, now that I dig a bit more, it seems to be this:\n- new window opens up on the screen where the last MacVim window was focused\n- after opening new window, one of the MacVims on the opening Terminal window\u2019s screen gets focused.\nSo, if you run \u201cmvim\u201d on a different screen than on which you last worked with MacVim, a disparity of focus/new-window can ensue \u2026 does that ring any bells?\n. I tried unchecking \u201cDisplays have separate Spaces\u201d, and that resolved the issue for me.\n. ",
    "timkendrick": "Thanks for the quick turnaround!\n. Hi guys \u2013 sorry to take a while to get back to you. Perhaps I made this sound more complicated than I intended by talking about sessions and the arglist. Essentially, this is the scenario I'm talking about:\n\n\nUser launches MacVim.app (and closes initial splash screen window)\nUser clicks File > Open... > selects ~/.vimrc file > OK\nUser clicks File > Open... > selects /etc/hosts file > OK\nUser clicks File > Open... > selects ~/.bash_profile file > OK\nUser clicks MacVim > Quit\n\n\nNote that there were 3 GUI windows open when the application quit: one containing ~/.vimrc, once containing /etc/hosts, and one containing ~/.bash_profile.\n\nAfter doing this, the user reopens MacVim.app by double-clicking the application (or using Spotlight/Dock/etc).\nDesired behavior: MacVim launches and automatically opens three GUI windows, one containing ~/.vimrc, one containing /etc/hosts, and one containing ~/.bash_profile (just as if the user had opened those files manually using the File > Open... menu).\nActual behavior: MacVim launches with one GUI window containing Bram Moolenaar splash screen. User has to reopen any files they want to edit.\n\nDo you know if there's any way of achieving this behavior?\nSorry for causing all this confusion!\n. ...also, if we're talking about sessions, I ran into problems when trying to autosave/autoload sessions from the .vimrc.\nI'm assuming you'd do something like this to autosave sessions:\nvim\nautocmd VimLeave * execute \"mksession! ~/.vim/sessions/autoload/\" . v:servername . \".vim\"\n... and then you can make a VimEnter autocommand that will autoload the saved sessions by checking whether there are any existing session files in the ~/.vim/sessions/autoload/ directory. If it finds any session files, it executes vim -g -S ~/.vim/sessions/autoload/SAVED_SESSION_NAME.vim (making sure to rename/delete the session file to prevent an infinite loop).\nThe trouble is with the VimLeave command. Within the command, it seems you have no way of knowing whether the user chose to explicitly close that window (File > Close Window), or whether the window was implicitly closed (MacVim > Quit). In the first case, you don't want the session to be saved, whereas in the second case you do want the session to be saved. I couldn't figure out how to solve this in a vimrc.\n. I would say that the expected behavior if you relaunched MacVim as 'mvim' or by double-clicking a file associated with it would be to restore and show the new file (like Sublime Text does). To me that seems very natural.\nI agree that it would have to be an opt-in feature, similar to how the 'Open new window on launch' setting is custimizable in the preferences.\n. Sorry, just re-read the first part of your comment: I'm not talking about associating specific window geometry with a specific file.\nI'm talking about the step before that, i.e. simply automatically opening the files that were open when MacVim was last quit.\n. Well if that feature could be added as well that would be amazing! I'd be super-happy with just reopening files though :)\nThanks for all the help on this by the way, I really appreciate it!\n. > Other kinks would involve handling \"windows\" (in the OS sense) with \"windows\" in the vim sense in them, or multiple tabs, et cetera, and this is where I guess it gets tricky to do this without polluting or otherwise getting our hands in the vim state :/\nThat's why I feel like it should be MacVim's responsibility just to open the files (and assign the same servername to the windows as they had before, if possible).\nOnce those vim processes have been spawned, it can be the responsibility of the vimrc user scripts to restore tabs etc, based on the arglist/servername.\n. I see your point, however it seems to me that MacVim is a lot more than just a shortcut to vim -g \u2013 rather it is an attempt to integrate Vim into the OS X environment as much as possible. For instance, pressing Command-F within a Vim buffer will open a native OS X 'find' dialog, which seems like a very un-Vim-like behavior.\nSimilarly, I would have thought that applications reopening all their windows on startup is very much becoming the standard for OS X applications: all of Apple's built-in applications do it, Sublime Text does it, Chrome can be set to do it... it seems that the vast majority of applications from the last few years will have this behavior, either by default or as an optional preference. When an application doesn't have this feature, it begins to feel slightly less integrated with the OS X ecosystem (to me at least).\nI think the specific issue here is entirely due to the fact that MacVim allows you to run multiple vim instances simultaneously in separate GUI windows. If there were only one single GUI window this wouldn't be an issue at all (you could just set your vimrc to autoload the previous session). I agree that multiple windows is a great feature to have, and very much in keeping with what you'd expect from an OS X application, but it seems to me that having multiple Vim instances running simultaneously (and exiting them all at the same time) is a large departure from how Vim is traditionally used in the terminal. I was suggesting that seeing as MacVim introduces this multiple-instance behavior in order to be more Mac-like, I would have thought that adding a feature to allow it to recreate those instances on startup would be in keeping with this goal.\nI agree that you would never desire this kind of behavior when using Vim in the terminal. It only becomes an issue when there are multiple vim instances running simultaneously \u2013 a concept introduced by MacVim. For this reason, I disagree with your point that if anything it should be built into plain Vim rather than MacVim. To me it makes no sense for the vim executable to automatically spawn more vim instances on startup. The vim instance has no knowledge whatsoever of other vim instances \u2013 they're completely unrelated to each other. It's the MacVim executable that spawns these processes (e.g. in MMAppController), so I feel that the MacVim executable is in the best position to keep track of them.\nFor these reasons, and the MacVim-related reasons I mentioned in my comment above, I believe it's impossible to implement proper multiple-window-autoreopening behavior entirely with vim sessions (and would be extremely grateful to you if you could prove otherwise, seeing as I've spent about two days on this and the best I can come up with involves cycling through app windows using AppleScript). I've tried several different vim session plugins, and none of them were able to automatically reopen multiple GUI windows on startup. This is presumably because they were all made for plain Vim (or Gvim, where each instance of the application is self-contained and independent of the other instances) rather than MacVim.\nAnyway, I do appreciate all the work you guys have put into MacVim, it's a really impressive project. This feature isn't particularly important, it's just something that I really miss from Sublime Text. Ultimately, it's just be a nice-to-have and I assumed it would be fairly easy to implement (but I could well be wrong about that). Apologies for writing such a long-winded message \u2013 I've said my bit so I'll back away now!\n. OK great \u2013 I think maybe it's my understanding of MacVim that was at fault.\nI did take a look at overriding the default Cmd+W / Cmd+Shift+W bindings, but this doesn't cover edge cases \u2013 e.g. if the user clicks the red 'X' button in the top left of the window. I'm probably being too much of a UI perfectionist here though, you can easily become spoilt when you spend too long in the non-Vim universe :)\nThanks again for the help!\n. ",
    "jckarter": "Thanks for fixing this!\n. ",
    "todd-a-jacobs": "The problem I was describing was specifically in insert mode. Other than testing out \"press escape key\" to enter normal mode, all the misbehaviors I described were while in insert mode with no attempts to change modes.\nOS X accessibility is probably what's allowing text to be entered in normal mode, although I'd argue that this is probably a \"feature\" rather than a bug. However, the problematic behavior is the inability to have sentences with pauses; is there something MacVim is doing (or not doing) when input pauses that might trigger the equivalent of ESCa? I'm not saying that's exactly what it's doing, but that's the apparent behavior that one sees.\n. I don't actually grok what happens when the \"IME conversation is abandoned.\" Is it possible for MacVim to keep listening as long as Dictation is enabled? It seems like not restarting the session might fix the behavior. \u2014Or am I misunderstanding what's happening under the hood?\n. ",
    "brychcy": "NSView scrollRect:by: seems to work.\n. I made a pull request with this, somehow it is not linked automatically:\nhttps://github.com/macvim-dev/macvim/pull/363\n. ",
    "seandenigris": "It might be good to explain the original source in the README/website (unless I missed it) because I found this repo and went on a 30 minute investigation to find the relationship between this project and the original MacVim. It also seems like good etiquette\u2026 Thanks for picking up this important project!\n. ",
    "robacarp": "@splhack I pulled down that binary and didn't experience any issues. I've had a little unpredictability with this specific bug, but I was able to reliably reproduce it this morning on master and following the same procedures it didn't present on the test build.\n. ",
    "datalogics-kam": "Thanks!\nMacVim is no longer fighting over where the split is, at least. It still acts funny when trying to, say, use CTRL-P to open a file after resizing the split. Second time trying CTRL-P works.\nI also have a programming question that I'll make on the pull request itself.\n. This basically fixes the problem for me, running on El Capitan. Thanks!\nI'm wondering if this conditional should also check to see if the window is actually in split mode.\nSo far, everything I've tried has worked, even old-style full-screen mode. But I'm wondering if some non-split-screen call to maximizeWindow really does want the code below.\n. ",
    "fr-nkshin": "Found it to be duplicate :>\n. It is updated automatically.. Just checked out 'about macvim'.\n. ",
    "steeef": "I can confirm the same issue, yes.\n. ",
    "cwahlfeldt": "Thanks for the reply. How would I go about fixing the issue? You told me what the problem was, which was not obvious to me as Im not a brew/macvim guru, but not a solution. So instead of closing the issue, maybe wait until it has actually been solved. \n. Alright thanks.\n. ",
    "mattnworb": "I've also tried Snapshot 80 from https://github.com/macvim-dev/macvim/releases but to no avail. Any advice on how to troubleshoot would be greatly appreciated :smile: \nWhen I try to launch MacVim.app I see these messages in Console.app\n11/4/15 1:07:32.244 PM MacVim[65682]: [default] Failed to updated bookmark for item (null) [AB4B762B-349E-4344-9AE0-A7609A3ED9E3] - URL:file:///Users/mattbrown/code/helios/20151021T131155.335-com.spotify.helios.system.MasterAuthenticationTest_basicAuthentication-61321.log with error Error Domain=NSCocoaErrorDomain Code=260 \"The file couldn\u2019t be opened because it doesn\u2019t exist.\"\n11/4/15 1:07:32.245 PM MacVim[65682]: -[SFLListItem synthesizeMissingPropertyValues] Failed to updated bookmark for item (null) [AB4B762B-349E-4344-9AE0-A7609A3ED9E3] - URL:file:///Users/mattbrown/code/helios/20151021T131155.335-com.spotify.helios.system.MasterAuthenticationTest_basicAuthentication-61321.log with error Error Domain=NSCocoaErrorDomain Code=260 \"The file couldn\u2019t be opened because it doesn\u2019t exist.\"\n11/4/15 1:07:32.249 PM MacVim[65682]: [default] Failed to updated bookmark for item (null) [AB4B762B-349E-4344-9AE0-A7609A3ED9E3] - URL:file:///Users/mattbrown/code/helios/20151021T131155.335-com.spotify.helios.system.MasterAuthenticationTest_basicAuthentication-61321.log with error Error Domain=NSCocoaErrorDomain Code=260 \"The file couldn\u2019t be opened because it doesn\u2019t exist.\"\n11/4/15 1:07:32.249 PM MacVim[65682]: -[SFLListItem synthesizeMissingPropertyValues] Failed to updated bookmark for item (null) [AB4B762B-349E-4344-9AE0-A7609A3ED9E3] - URL:file:///Users/mattbrown/code/helios/20151021T131155.335-com.spotify.helios.system.MasterAuthenticationTest_basicAuthentication-61321.log with error Error Domain=NSCocoaErrorDomain Code=260 \"The file couldn\u2019t be opened because it doesn\u2019t exist.\"\n11/4/15 1:07:36.507 PM launchservicesd[84]: SecTaskLoadEntitlements failed error=22\n11/4/15 1:07:36.614 PM launchservicesd[84]: SecTaskLoadEntitlements failed error=22\nI am not sure if the last two are related but I do see them consistently ~2 seconds after messages from MacVim on each attempt at launching MacVim.app.\n. In attempting to run MacVim.app through dtruss, I discovered that for me\n$ /Applications/MacVim.app/Contents/MacOS/MacVim\nhas the problematic behavior but if ran as another user (for instance, root)\n$ sudo /Applications/MacVim.app/Contents/MacOS/MacVim\nwindows open as expected.\n. A restart works for me as well :confused: \n. I don't think that running the binary with sudo changed or fixed anything as the problem still existed afterwards until rebooting; it was just a troubleshooting step along the way. \n. @splhack I did notice when I was having the issue that I had a MacVim process still running (looked like the full command was sudo -u myusername /path/to/MacVim), although I thought at the time pre-reboot that it might have been spawned by some investigation I was trying to do with dtruss.\nInterestingly the process seemed to be unkillable, kill, kill -9, kill -15 etc did not terminate it.\n. I am also using docker-machine and I've found that starting a VM with it also re-causes this problem. My docker VM is using the VirtualBox driver, and it seems like if I create the VM with VMWare Fusion instead then I do not have an issue.\nStopping the docker VM running with VirtualBox also causes MacVim to work as expected for me as well.\nDoes MacVim or Vim expect to connect to anything on the host on tcp port 2376? docker-machine sets up the VMs to listen on this port, on a private IP (chosen from CIDR 192.168.99.1/24) host-only network interface. The IPs handed out to VMWare Fusion VMs seem to be on a different range, 192.168.116.1/24.\n. ",
    "snusmu": "i have exact same issue. i had it on yosemite and now have it on el capitan as well.\ni tried reinstalling vim completely with brew, and tried latest snapshot.\ni also tried removing everything related to macvim from /Users/snusmu/Library/Preferences/\n. to clarify i tried snapshot 81 and brew version.\nif i try to run /Applications/MacVim.app/Contents/MacOs/MacVim manually in the console, it does the same, no output at all, cannot open any editor windows, but can open Settings menu, and can open File->Open menu, and it shows Recent files too. but no editor window ever opens.\nvim in command line works perfectly fine.\n. i tried starting it with sudo and it worked for me as well.\nso i tried looking for some cache files vim might have in ~/Library/Caches but didnt find any\nthen i tried starting it without ~/.vim and ~/.vimrc, didnt start \ntried wiping out all files in /tmp/ folder, didnt start\nlost hope, switched to another task which required restart.\nafter restart, surprisingly, it started working without sudo\neven though it didnt work for last 2 months for me\n. If I understand correctly, first running binary with sudo, then rebooting\nI'm not sure that just rebooting solves this issue\nOn lau., 7. n\u00f3v. 2015 at 05:57, Kazuki Sakamoto notifications@github.com\nwrote:\n\nSo rebooting OS X solved the issue, right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/109#issuecomment-154631057.\n. i managed to reproduce this issue.\non my machine, macvim wont start properly if i docker vm is up.\ni tried following several times:\n1. quit macvim\n2. run \"docker-machine start default\" \n3. open macvim: doesnt open new editor windows.\n4. quit macvim\n5. run \"docker-machine stop default\"\n6. open macvim: works properly!\n. actually, this even happens without quitting it.\n1. open macvim app with docker off: works properly. \n2. run \"docker-machine start default\": editor windows now stop opening in macvim\n3. run \"docker-machine stop default\": macvim starts working properly again\n. well this line works (as mattnworb established in the first post):\n\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\nbut starting MacVim in gui (clicking it in dock) doesnt work.\n. and (also, as established in issue's name) after launching this:\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\nnew windows dont open (File->New window menu item doesnt do anything)\n. yes, this command solves issue for me:\ndefaults write org.vim.MacVim MMLoginShell -bool NO\nbut i didnt have any circular logic in shell\n$ echo $SHELL\n/bin/bash\n$ bash -l\n$\ni tried removing everything from my bashrc/bashprofile\nthing which stops macvim from working properly is this line in .bash_profile:\neval \"$(docker-machine env default)\"\nthis is simple eval, resulting in:\nexport DOCKER_TLS_VERIFY=\"1\"\n export DOCKER_HOST=\"tcp://192.168.99.100:2376\"\n export DOCKER_CERT_PATH=\"/Users/pavelkrasnovskij/.docker/machine/machines/default\"\n export DOCKER_MACHINE_NAME=\"default\"\n # Run this command to configure your shell:\n # eval \"$(docker-machine env default)\"\n. oh all right, now i understood.\n.bash_profile is for non interactive shells (http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html), so each eval command re-executes it. so it is circular logic.\nbut on os x .bash_profile is used instead of .bashrc on interactive shell start, so people who work in terminal tend to put things there.\nThank you @splhack for figuring this out. it was not macvim issue.\n. ",
    "cgbaker": "Just discovered this thread after noticing that macvim had stopped working. The advice here is spot on; I'm using docker-machine with virtualbox, and stopping my VM allows macvim to work again.\n. ",
    "jsfranko": "Typing gvim after a brew install MacVim (7.4 as of this post) opens MacVim and shows an icon in the macOS dock.  right click it and choose options and keep in dock.  it also shows up in the context menu right clicking a file in the finder.  you an also drag a doc to the icon in the dock.  I removed the Vim.app that was installed in the applications folder.  it crashed after bouncing a few times in the dock.  vim at the command line opens a shell vim.\n. Typing gvim after a brew install MacVim (7.4 as of this post) opens MacVim and shows an icon in the macOS dock.  right click it and choose options and keep in dock.  it also shows up in the context menu right clicking a file in the finder.  you an also drag a doc to the icon in the dock.  I removed the Vim.app that was installed in the applications folder.  it crashed after bouncing a few times in the dock.  vim at the command line opens a shell vim.\n. ",
    "jtianling": "defaults write org.vim.MacVim MMLoginShell -bool NO\nworks for me, thanks.. ",
    "NoShill": "I found a solution on my MBPro running macOS High Sierra 10.3.3. The MacVim installed on my machine expected Perl 5.16 and Ruby 2.0. With High Sierra, the versions are Perl 5.18 and Ruby 2.0.\nWhat I did was open a terminal, change directory to /Applications/MacVim.app/Contents/MacOS\nAt the command line prompt, run ./Vim\nIt will give an error message about the libperl.dylib it couldn't find. In my case /System/Library/Perl/5.16/darwin-thread-multi-2level/CORE/libperl.dylib.\nEdit Vim to put the correct version number in:\nvi -b Vim\n/Perl.5.16\nChange the 6 to an 8 (for Perl 5.18) and save the file.\nRun ./Vim again, and get an error message about which Ruby dylib it couldn't find. In my case, it was looking for 2.0, and 2.0.0. I edited Vim as above, found the string for Ruby 2.0, changed it to 2.3, and the 2.0.0 to 2.3.0 and saved Vim.\nNow, MacVim opens a window just like it did before.\n. ",
    "sebtrif": "@splhack nailed it for me! For the record, i had a lot of zombie MacVim/Vim processes left in the background. Once I stopped them everything returned to normal and I was able to get back into MacVim \ud83d\udc4d. ",
    "w0i0c0o": "@NoShill Your solution works for me! It seemed like that Vim did not update when the build-in perl and ruby got updated in the MacOS.. ",
    "bensinc": "I've tried enabling this on 10.12.1 and it does remove the titlebar, but it causes text rendering problems. The screen is gray, and any typing appears for a moment, then disappears.\nI did notice that if I disable core text rendering, it does work, though I'd rather not do that.. ",
    "mirca": "I'm experiencing the same problem as @bensinc. Any clue on that?. ",
    "KCreate": "Same problem as @bensinc. Are there any updates on how to fix this issue?. ",
    "cmcginty": "Thanks for this so much! But when I enable this feature the window eventually turns all white. Is there a setting that might conflict with this value. Thanks for the help! Testing on Sierra 10.12.6.. In dock preferences, set prefer tabs when opening documents to Manually.\n\n. Bug still exists in my current version so here is my version info:\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Feb  2 2017 06:40:28)\nMacOS X (unix) version\nIncluded patches: 1-286\nCompiled by Homebrew. Looks fixed to me.. ",
    "jampow": "Same problem here.\nmacVim 8.0.1420 (144)\nmacOS 10.12.6. ",
    "whiteShtef": "Still Broken. Bump.. ",
    "omartin": "Broken, can be better by removing the CoreText but still there is a white line at the top.. ",
    "gavocanov": "+1\n. ",
    "elsonwu": "+1\n. ",
    "themightyoarfish": "@splhack I compiled the features/quicklook branch and it appears to work.\n. :+1: \n. When I check out the linked commit, I get the same result, strangely, but I am not sure what could cause this at my end.\n. I don't use homebrew and that also would not be educational.\n. > It is not MacVim issue as you know.\nHow can you be sure? Or how can I be sure? I assume you don not reproduce this?\nI installed snapshot 88 as a test and it crashes on startup (something wrong with python). Not sure if connected.\n. Hm, I rebooted, recloned and used CC=clang and compiled again. The install and uninstall targets still leave garbage in my /Applications, but in macvim/src/MacVim/build/Release  there is a functional .app now. I don't understand this.\n. I agree that it is unrealistic to accommodate every possible setup, but I\ndon't think having multiple compilers installed counts as an idiosyncratic\nconfiguration. As such I find it strange that I should be the only one\nwith this problem. Maybe the problem is something else or the priority\nin my particular PATH.\n. This fixed it for me, many thanks.\n. I made clean and distclean and recompiled and the behaviour is back to normal. This is weird. Maybe I had used different compile flags before.\n. I should mention that the binary release seems to lack python support as well, at least the results are the same as above, so I'm forced to build it myself.\nAs I use Macports, I can't use the Homebrew formula.\nAlso I don't see how I've set 'improper' options.. When I downloaded the binary a couple of hours ago has('python') was false while now it is not. Maybe I accidentally opened the wrong one, I don't know.\nWhile it my technically be possible to have two package managers, I see little but potential for conflict therein. Duplicate binaries will cause confusion I'm sure.\nI'd still be interested in comments to the actual problem of building MacVim. Do you think it is related to my system or what exactly is missing? Because I really have no clue.. ",
    "s4y": "I put a branch up that I believe fixes the root cause of this issue:\nhttps://github.com/macvim-dev/macvim/compare/master...s4y:s4y/fullscreen_contentSize\nThere is still a flicker caused by Vim updating the screen twice. It may have been there before, but I want to track down before I make a PR. Unfortunately, I'm coming down with a cold and I'm going to try very hard not to work on it until I feel better, so I'm putting the patch out there in its current state. (The maintainers are welcome to merge it if they want, since it makes changing the font size in full screen possible at least.). @chdiza Since you alerted me to this, I'd appreciate your help in giving the above change a workout.. @chdiza: Thanks, that's exactly the kind of issue I was worried about.\nI pushed an update to the same branch (https://github.com/macvim-dev/macvim/compare/master...s4y:s4y/fullscreen_contentSize). It only affects full screen now, so setting lines and columns should work again. Mind giving it another shot?\nIt feels a little bit hacky, but it's the best approach I can find right now.. Oof. Looking into this now.. Still looking into it, but it doesn't seem to be related to that commit. The same thing happens to me in 8.0-129. Could you confirm that?. Could this be #127?. I was trying to fix a general rendering bug. It's unfortunate that it also broke your workaround to #127 (and for what it's worth, I did observe artifacts when moving into/out of NNFS), but making it only apply to certain modes would have been incorrect, and more complicated.\nSee my last comment on #127 \u2014 I think I found the issue, and hopefully that change can replace your workaround :).. @sidyll: I haven't been able to reproduce this. Here's what it looks like for me:\n\n\nWhat version do you have now (from MacVim \u2192 About MacVim)? I have 8.0.567 (131).\nWhat version of macOS are you running? I have 10.12.4.\nAre you using the Core Text renderer (in Preferences).\nAre you using native full screen (in Preferences)?\n\nCould you provide some more detailed instructions on how to make this happen, and a screenshot or screen recording if possible?\nIt might be worth making a fresh bug, too.. P.S. @chdiza, do you want to close this bug? I think everything's fixed, but let me know what's left if not.. I hacked on this a while back but haven't touched it recently. I'm not convinced that a Metal rewrite is necessary! The renderer just needs the ability to draw arbitrary rects instead of relying on being able to draw on top of existing content. The tricky part is that, currently, it doesn't keep any kind of state; it just draws as it receives commands. That would be the biggest change, but not that big.\nIf redrawing everything is too expensive, there are strategies like using tiles that could be moved around without redrawing the whole window, or just using a layer per line, for example, and moving those to scroll without redrawing.. FYI, I\u2019m hacking on the fix I mentioned above; if it goes well you\u2019ll hear from me in the next few days.. Feedback welcome on the above PR (#757)!. Cross-posting this from my PR: my job\u2019s okay with me spending some work time on this, but only if there\u2019s a top-level LICENSE file (and there currently isn\u2019t). If one can be added first, I\u2019ll pursue a fix.. @J-Liu see https://github.com/macvim-dev/macvim/pull/757#issuecomment-438838738.. @chdiza Thanks for testing it out. I\u2019m not sure what to say if the messages are still there after removing my patch. I searched for that message online and didn\u2019t find anything conclusive.. @chdiza how does everything look on your system aside from that message?. Hmm, the patch is pretty minimal. Maybe someone else is willing to give it a shot? I have VMs but I\u2019m not currently near my computer.. Yikes. I\u2019ll take a look at fullscreen when I\u2019m back at a computer. Still no idea about the messages.. @chdiza I fixed the non-native fullscreen issue \u2014 this new code path takes the place of the CGLayer path, and I needed to make sure that the CGLayer path couldn't be turned on at the same time. I amended the PR with that change and you should be able to give it another shot.\nI occasionally see a flicker when entering and exiting non-native fullscreen. I'm looking into it but about to lose internet access for the day and may not have a chance to look into it right away.. (So, it's up to the maintainers, but I think that this is in a land-able state if the occasional enter/exit flicker is the only remaining problem.). @amadeus I just put up a new version of this change which is somewhere in between the old code and the first version of my change (i.e. still uses drawRect: to do partial updates). It should perform better \u2014 would you mind giving it a try?\n@chdiza Mind giving this new version a try, too?. Small change: since this PR no longer does anything layer-specific, I just renamed the preference key and removed self.wantsLayer = YES. Shouldn't change behavior.. @chdiza That\u2019s not how the PR is supposed to look/work and doesn\u2019t match what I see. It might be an SDK or OS compatibility issue, but I have to investigate. Thanks for trying it.\n@amadeus Thanks, that\u2019s also very good to know.\nBased on profiling, the pure drawRect: path is way faster than drawing to an image: the APIs I\u2019m using in the current PR seem to make a copy of the image every time it\u2019s drawn to, which makes it entirely unacceptable \ud83d\ude36.\nAnd scrollRect:by: does some trickery that, as far as I know, won\u2019t work in a layer-backed world (or, at least, I don\u2019t know how to replicate it).\nIf we can find a way to draw to a thing without copies, and then display that in drawRect: or similar, or use it as a layer contents such that we can invalidate specific rects, that might be good enough.\nAnother option is to store state so that the view can draw whatever rects are requested at any time.\nI\u2019m not sure how much time I\u2019ll have to work on this in the near future, but I will if I can. It involves corners of the SDK that I don\u2019t know super well and takes some digging.. Oh, one more thing: re. transparency, the technique of drawing transparent pixels in drawRect: to punch holes in the window doesn\u2019t work in a layer-backed world, AFAIK. The window itself needs to be transparent. That\u2019s another issue :/.. I spoke to my company about spending some work time on this. They're okay with it but require the project to have a top-level LICENSE file. I can't find one and it's not clear how the existing MacVim-specific code is licensed. Thoughts?. @amadeus Thanks for the support \ud83d\udc4d!\n@ychin I haven\u2019t had a chance to write a longer answer but, summary, I agree that the current version isn\u2019t acceptable perf-wise and with pre-Mojave subpixel smoothing. I\u2019m definitely willing to spend time exploring redrawing. I\u2019m also interested in investigating scrollRect:by: to see if I can find a similarly-performant equivalent. I\u2019m also interested in revisiting something I mentioned in another comment \u2014 using multiple layers to represent the content and moving them around. I might also be willing to explore GPU rendering, but can\u2019t guarantee it. The extra background in your comment is super useful.. That's great, thanks so much. I'm planning to work on this around 1d/week, hopefully starting this Friday.. @ychin et. al: I think this is in a good state now, PTAL!. (And, to all, feel free to grab this and try to poke holes in it.). @amadeus Thanks much. I wanted to focus on finishing this version \u2014 see @ychin's comment above. However, I have some work in progress that I wager will significantly improve performance from the old version. So, I'm glad this hasn't broken anything, and stay tuned \ud83d\ude09.. Here's a first pass at a change which significantly improves performance for me. I'm not quite ready to make a PR, but please try it out:\nhttps://github.com/s4y/macvim/tree/stateful-render\nAll feedback is welcome.. Two notes re. the above:\n\n\nSome of the new rendering code is just copied and pasted from MMCoreTextView's three other rendering paths. Since it seems to do as well as them, I'd love to delete the other paths in my PR instead of trying to make them all work at the same time.\n\n\nI'm not done making rendering faster \ud83d\ude09. If this works out, I know what I want to do next.. @ychin et. al: See #858!. @amadeus Let's continue on the PR? The current patch might affect this, but might also not.\n\n\n@juliuszint If there's any more detail you can share (on the PR), please do!. @chdiza The mystery font rendering change is a bug; I noticed it but haven\u2019t had a chance to track it down yet. Please keep hunting for bugs if possible!\n@ychin If the performance isn\u2019t good enough, note that my next move will be to use separate movable CALayers in the scroll region. Only new lines are rendered during scrolling, which should be blazing fast. This plays nicely with the macOS compositor and is how browsers scroll \u2014 I think it\u2019s a pretty optimal choice. (It could even enable things like per-split smooth scrolling\u2026)\nIf performance is an issue with this PR, I could add that now instead of holding off.. @juliuszint Thanks! I don\u2019t use any plugins that insert images. Now I\u2019ve got one to try.. ",
    "nicksergeant": "Also confirmed via DMG installations - snapshot 80 does not exhibit this issue, but snapshot 81 does.\n. Hi folks - can we stop with the +1ing? There is a subscribe button directly to the right of this thread, for the purpose of being notified when there's work being done on this issue:\n\nThe +1s don't add to the discussion, and in many ways can be frustrating for both the developer and those who are only interested in following along with further work on this issue.\n. @trevvvy yup, you can add to the \ud83d\udc4d  on the issue description itself:\n\n. ",
    "junkblocker": "There are more issues. The following used to work.\nvim\nif (&termencoding == \"utf-8\" || has(\"gui_running\"))\n  let s:arr = nr2char(9654)   \" \\x25B6 - BLACK RIGHT-POINTING TRIANGLE\n  let s:dot = nr2char(8901)   \" \\x22C5 - DOT OPERATOR\n  set list\n  let &listchars='tab:' . s:arr . s:dot\n  endif\n. :+1:\n. :+1: The proposed fix works for me.\n. There are more issues in the emoji range. See https://github.com/macvim-dev/macvim/issues/128#issuecomment-168539067 .\n. It's not just inside vim via :version. It's showing up in % vim --version output, so not line break. The problem is that it looks wrong giving the impression that there is a newline prefix in the value.\n. I will at some point.\nC\n    if (*default_vim_dir != NUL)\n    {\n    version_msg(_(\"  fall-back for $VIM: \\\"\"));\n    version_msg((char *)default_vim_dir);\n    version_msg(\"\\\"\\n\");\n    }\ndoesn't seem to indicate a newline should be printed. It means default_vim_dir has a newline before it.\n. Ah, never mind. I see that version_msg is inserting a new line if the message is longer than Columns..whatever that got calculated as. It's a cosmetic issues then. I'll skip followup.\n. Before EMOJI changes:\n\nAfter EMOJI changes:\n\n. That seems to work. MacVim preferences were the culprit.\n. Thanks a lot, @chdiza ! That worked.\n. Hi, original submitter of the issue over at w0rp/ale . Please use these instructions for repro instead with jcsc without a .jcscrc file present and not with jshint.\nhttps://github.com/w0rp/ale/issues/39#issuecomment-252692485\nlet g:ale_linters = {'javascript': ['eslint', 'jshint', 'jcsc']}\nThanks\n. yes, sorry for the typo. You have the instructions right.\n. @splhack , here's a log with latest everythin if it helps - https://gist.github.com/junkblocker/5d53f1a1aa15c2dadcfefb6f545532ee\nHere are python header locations on my system\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7/Python.h\n/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7/Python.h\n/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7/Python.h\n/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/include/python3.6m/Python.h. @splhack , that did work.\nOutput from version if it helps:\n...\n/usr/local/Cellar/macvim/HEAD-9c391d1/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1       \nLinking: clang   -L.             -L /BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/libressl/lib -L/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/lib -L.             -L /BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/libressl/lib -L/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/lib  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -lintl -framework Cocoa   -fstack-protector  -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE. ",
    "prurph": "Sure--after launching MacVim as above:\n1. Preferences > check \"Enable support for ligatures\"\n2. Quit and relaunch MacVim using -g -u NONE -U NONE as above\n3. Type some sample text on different lines.\n4. Press CMD+ to increase the font to size 12. The text becomes cut off like this:\n\nMoving the cursor over the affected text or selecting the line in visual mode, etc., causes it to \"fix\" itself, until that text is no longer selected or otherwise active, at which point it again appears as above. This seems to affect most, but not all, monospaced fonts, including:\nDejaVu Sans Mono, Inconsolata for Powerline, Liberation Mono for Powerline, Source Code Pro (the original, the Powerline version, and Hasklig, which is based on Source Code Pro) and Envy R.\nI am on El Capitan. Thanks!\n. My bad--I was using the version from Homebrew. I have built from the latest snapshot, used set macligatures and all is well. Here is a screenshot showing the difference:\n\nMany thanks for your patience.\n. ",
    "osheroff": "i was going to go cleanup some deprecation warnings, since whynot, they bother me.  Is the official decision that the master branch here targets 10.6+?  would be nice to know what to ifdef and what to change wholesale.\n. https://gist.github.com/osheroff/9d0a6e9d8606e8eaa13265b9154fc305\n. yeah but that's targeting osx 10.8\nhttps://travis-ci.org/macvim-dev/macvim/builds/175424743#L35\n. i get the warnings when compiling on 10.12.\n. (on my mac)\n. oh, hell.  I had a stale fork, hadn't merged with upstream.  a million apologies for the wasted time. \n. i've been poking at this bug over nights and weekends when I get a bit of time to spare.  The bug, near as I can tell, has to do with CoreText and borderless windows.  The bug still repros even if you short-circuit the full-screen behavior like so: \n```\ndiff --git a/src/MacVim/MMWindowController.m b/src/MacVim/MMWindowController.m\nindex b6c6786..cf7be60 100644\n--- a/src/MacVim/MMWindowController.m\n+++ b/src/MacVim/MMWindowController.m\n@@ -335,7 +335,7 @@\n     if (fullScreenWindow) {\n         // Delayed entering of full-screen happens here (a \":set fu\" in a\n         // GUIEnter auto command could cause this).\n-        [fullScreenWindow enterFullScreen];\n+        //[fullScreenWindow enterFullScreen];\n         fullScreenEnabled = YES;\n     } else if (delayEnterFullScreen) {\n         // Set alpha to zero so that the decorated window doesn't pop up\n@@ -743,7 +743,8 @@\n         // custom full-screen can appear on any screen, as opposed to native\n         // full-screen which always uses the main screen.)\n         if (windowPresented) {\n-            [fullScreenWindow enterFullScreen];\n+            [decoratedWindow setStyleMask:NSBorderlessWindowMask];\n+            //[fullScreenWindow enterFullScreen];\n             fullScreenEnabled = YES;\n         // The resize handle disappears so the vim view needs to update the\n\n```\n(repros even with a window smaller than the screen size)\nThe other thing I've noted is that what seems to happen is that each draw call is blowing away the previous window state: if you do :redraw!, the window is drawn properly at first, but then the next \"partial\" draw -- I think when the cursor starts to blink -- gets rid of all the window state before it that's drawn.\n. thx guys.  @nuc yeah this is doing more computation than before (it currently draws offscreen and then copies the whole layer over), so drawRect is some milliseconds slower than with the previous method.  There should be plenty of room to optimize it, but it'll need some work to draw to the layer offscreen and then update just the rects needed.  . (updated, now with 30% less code-churn)\n. updated to support the whole :sign thingys\n. @chdiza mind doing a quick screen cap  so I can see what you're talking about more specifically? \n. @splhack ok, will see if drawing from layer -> layer's own context works.  looks like it should.\nre: revert unrelated, the only unrelated change here is the ASLogNotice lines, with that change it compiles with MM_DEBUG_DRAWING=1, otherwise I get: \n/Users/ben/src/macvim/src/MacVim/MMCoreTextView.m:894:36: warning: format specifies type 'char *' but the argument has type 'SEL' [-Wformat]\n    ASLogNotice(@\"====> BEGIN %s\", _cmd);\n                              ~~   ^~~~\nhappy to put that in a separate PR if you like tho.\nre: code formatting -- didn't find a style guide, just followed best I could.  What do you need here?\n. @splhack yup, it worked to draw the existing layer on top of its own context.  Also cleaned and squashed some.\n. @chdiza yeah ok, I see what you mean now; after the fade to black it sometimes re-presents the view at its old size for too long.\n. @chdiza is this branch any help to the jerking problems?  https://github.com/osheroff/macvim/pull/1  I honestly can't really tell.\n. yeah, the patch is on top of the osheroff/master branch.  you'd need both. \n. ok with fade-time of 0.0 it's pretty glitchy.  I think it kinda makes it better with the default fade time.\n. huh.  plz do do a screen-cap (or maybe just record yr screen with your phone, for me screen cap doesn't get the fade-out), I'm just not sure I'm seeing what you're seeing.\n. at any rate, I wouldn't think the full-screen jerks should block a merge (given 10.12 is busted in this config without the patch).  What you say @splhack?  Mergable?\n. @splhack pointers on how to do a portable runtime OS check?  I'm really quite new to osx coding.\nThe other option regarding latency; it seemed at some point that painting on the layer inside performBatchDrawWithData improved latency somewhat -- the layer was then ready and painted from a background thread.  the only issue was a need to introduce locking.\n. @splhack I tried to reproduce lag issues on a 10.9 box with no luck.  I am upgrading it to 10.11 to see, but it seemed just as fast as the master branch.\n. @chdiza I did a survey of three different full-screen-entering code paths:\nThe master branch:\n\nthis branch:\n\nhttps://github.com/osheroff/macvim/tree/smoothout_fullscreen_enter\n\nAs you can see, both the master branch and this branch have roughly the same problem with drawing intermediate results; it doesn't seem like this branch makes the situation all that much  worse than it was in the master branch.  The approach of \"blank out the text view until we've resized\" appears to show promise; I think I got the timing better than in the last patch, at it doesn't show much intermediate state.\n. meh.  well, this PR doesn't make the situation any worse, but as it turns out the CGLayer code broke transparency, generally.. sure, I can do that.  I don't honestly think it matters one way or another but it's certainly a way to not incur any unwanted side-effects.\nThe deeper I go down these paths, the less sure of the CGLayer approach I get.  You're right that there's a little lag incurred -- copying the layer over into the window is by far the most expensive part of drawRect.  I wonder if maybe we wouldn't be better off with a \"traditional\" render path here: performBatchDrawWithData would just update a data-structure and call setNeedsDisplay, which would draw to the screen from the text-buffer.  Whether that can be made faster than NSTextView, I dunno.  What do you think?. i'm kinda convinced that there should be a better way than this.  It doesn't really make it all the way better so I'm gonna close this PR and try a different tack.. gentle ping. i can if needs be, but my hope here is that latency is improved enough to simplify the code back down to a single (always-layer-enabled) code path.. two arguments in favor of CGLayer all the time everywhere:\n\nFixes ugly screen tearing when resizing window (checked this in 10.11, it's happening there too)\nUnified code path\n\n. I'm basically using it as a stand-in for resize code: when we're in live-resize, I need to keep the old (smaller or larger) layer around in order to draw smoothly -- so I can't release (to resize) the layer and re-initialize it on a window-resize event, I have to wait until we've got the batch for the resized window.  \nI suppose I coulda also hooked into SetTextDimensionsMsgID or something like that, but I'd be less sure of the timing of all the various events; might be jittery or racy.\n. yup, worked, updated.\n. ",
    "AmaruCoder": "Yes, it happens. When running version 922 from the console, I see exactly the same issue. See below:\nRunning from Mac OS's console\n\n. The latter. I run /applications/MacVim.app/contents/MacOS/Vim from the console. So, it seems to be a MacVim issue.\n. I installed vim using Homebrew, and run it from usr/local/bin, but I get the same results. See below:\nVim 903\n\n. I installed Vim with:\n$ brew install vim\nAnd then run it from /usr/local/bin/\n. The command homebew install vim installs version 7.4.903.\n. Following the instructions, brew install vim has installed the version 7.4.922, and it shows the same issue.\n. ",
    "TheDudeWithTheThing": "Hey @chdiza thanks for the quick reply. I've moved all command key binds to my gvimrc and will see if that fixes, will close this out if it does.\n. You'll notice in my screenshot that the gui_macvim lines are already in my gvimrc, seems like moving the command key binds there didn't fix it either.\nWhat I find really baffling is that by default command f is find, not full screen.\n. @chdiza mappings is sourced in the last line of my vimrc, so if vimrc is loaded before gvimrc (I forget the load order) then that could be it.\n@eirnym thanks! I'll give that a go too.\n. I think I'm all set. It still happened even after swapping the mapping to be after gvimrc. What fixed it is binding an absurd key combo (all meta keys plus F) to enter full screen and now it stopped the high jacking I believe. \n. Thanks for the help everyone, going to consider this particular case resolved though it does sound like a bug exists that creates menu items repeatedly.\n. Nope, just the default help one and now the \"dummy\" macvim one\n\n. It does still show up but at least now it's with the giant keychord and not my CtrlP bind.  I'm convinced it has to do with the window being redrawn on desktop switch / laptop close / open, laptop sleep / wake but haven't been able to prove it.  Here's what I'm currently looking at.\n\n. I'm happy to help with testing / troubleshooting as well so keep me in the loop if you like.\n. ",
    "zhm": "Is this resolved? It's marked closed but I see this after using MacVim for a while:\n\n. ",
    "xoolive": "Setting pythondll is of no help. PYTHONPATH does help, you have a point, though that should not be a solution. (virtualenv manages its shit without using PYTHONPATH and that's probably why I love it... Besides, I keep changing python/python3, brew link, brew unlink, virtualenv, etc. Hardcoding some PYTHONPATH for macvim is just a way to make me swear each time I use python3 :laughing: )\nHowever, your comment gave me ideas to investigate more, so I had a look at the content of sys.path on a shell Python, inside vim and inside macvim.\nThere are 8 entries starting with /usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7 that vim finds and that macvim does not.\nWhat stays mysterious to me is how vim and macvim do not behave similarly regarding Python?\nWhat does vim that macvim forgets to do when loading all it needs for Python?\n. Could we leave the issue open so that to encourage the community (including me, esp. me!) to work for a fix?\nI would definitely share my work to be included if I find a proper and clean solution, and closing the issue may give the wrong signal around...\n. Why? There is no problem with vim and nobody complains there about Python issues.\nThe issue is on macvim which is not behaving how it should.\nWhat's wrong with leaving it the issue open and accepting solutions when they come, as long as they are decent?\n. Besides, asking around on vim community is not inconsistent with finding a solution to this issue yet to be solved then closed.\n. Thank you for the extra information.\nLet's see where this will lead us (not today I am afraid...)\n. Thank you @chdiza. I just brew everything standard :laughing:\nFor MacVim I would need XCode, so that's why I take the precompiled binaries (note: released two days ago) :)\nI understand what you say about :py which points at the system python, so it gives consistency in the series of outputs I pasted. But then, it wouldn't explain why import itertools fail here, does it?\n. I am really confused now.\nIf I take the binary (version 83) from the release page, what is supposed to be in my sys.path? (with no $PYTHONPATH set)\nI mean, from what I understand, :py calls the Python that was used to build MacVim, which would be the system Python. But then things only get properly loaded when the sys.path contains the library path for the Python that comes first in the $PATH and some libraries fail to load if they come from the system path.\nWhat did I get wrong here?\n. ",
    "t0d0r": "Hi, \nI still have same issue with MacVim running on Mojave, (/Applications/MacVim.app/Contents/bin/vim)\nBuild it without python3 fix the problem.\nbrew reinstall  -s --with-python@2 --without-python macvim\nDetails for macvim that come from brew bottle:\nPress ENTER or type command to continueVim: Caught deadly signal ABRT\nVim: Finished.\nfish: 'vim' terminated by signal SIGABRT (Abort)\n$ brew list | grep python\npython\npython-markdown\npython@2\nThe issue is not preset when i'm using build-in vim (/usr/bin/vim):\n:version\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Aug 17 2018 15:22:29)\nIncluded patches: 1-503, 505-680, 682-1283\nCompiled by root@apple.com. that issue is still there boys...\nbrew install macvim\nand :py3 print(42) breaks it\n```\nFatal Python error: initfsencoding: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'\nCurrent thread 0x0000000117dc95c0 (most recent call first):\nVim: Caught deadly signal ABRT\nVim: Finished.\n```\nuname -a\nDarwin SpG.local 18.2.0 Darwin Kernel Version 18.2.0\n18:45 \u2261 mvim --version                                                                       \u1d26/ tmp \u2261\nVIM - Vi IMproved 8.1 (2018 May 18, compiled Dec 13 2018 12:07:57)\nmacOS version\nIncluded patches: 1-577\nCompiled by Homebrew\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl               +farsi             +mouse_sgr         -tag_any_white\n+arabic            +file_in_path      -mouse_sysmouse    -tcl\n+autocmd           +find_in_path      +mouse_urxvt       +termguicolors\n+autochdir         +float             +mouse_xterm       +terminal\n-autoservername    +folding           +multi_byte        +terminfo\n+balloon_eval      -footer            +multi_lang        +termresponse\n+balloon_eval_term +fork()            -mzscheme          +textobjects\n+browse            +fullscreen        +netbeans_intg     +timers\n++builtin_terms    -gettext           +num64             +title\n+byte_offset       -hangul_input      +odbeditor         +toolbar\n+channel           +iconv             +packages          +transparency\n+cindent           +insert_expand     +path_extra        +user_commands\n+clientserver      +job               +perl              +vartabs\n+clipboard         +jumplist          +persistent_undo   +vertsplit\n+cmdline_compl     +keymap            +postscript        +virtualedit\n+cmdline_hist      +lambda            +printer           +visual\n+cmdline_info      +langmap           +profile           +visualextra\n+comments          +libcall           -python            +viminfo\n+conceal           +linebreak         +python3           +vreplace\n+cryptv            +lispindent        +quickfix          +wildignore\n+cscope            +listcmds          +reltime           +wildmenu\n+cursorbind        +localmap          +rightleft         +windows\n+cursorshape       +lua               +ruby              +writebackup\n+dialog_con_gui    +menu              +scrollbind        -X11\n+diff              +mksession         +signs             -xfontset\n+digraphs          +modify_fname      +smartindent       +xim\n+dnd               +mouse             +startuptime       -xpm\n-ebcdic            +mouseshape        +statusline        -xsmp\n+emacs_tags        +mouse_dec         -sun_workshop      -xterm_clipboard\n+eval              -mouse_gpm         +syntax            -xterm_save\n+ex_extra          -mouse_jsbterm     +tag_binary\n+extra_search      +mouse_netterm     +tag_old_static\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n       defaults file: \"$VIMRUNTIME/defaults.vim\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X -DMACOS_X_DARWIN  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: clang   -L. -L.  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -framework AppKit  -L/usr/local/opt/lua/lib -llua5.3 -fstack-protector  -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE -lperl  -L/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/config-3.7m-darwin -lpython3.7m -framework CoreFoundation  -framework Ruby\n. ",
    "0x62ash": "I've tried. Everything is the same :(\nMy new version 7.4 (84) and fonts rendering issues is still here.\n. :scriptnames\n1: /Applications/Utilities/MacVim.app/Contents/Resources/vim/vimrc\n  2: ~/.vimrc\n  3: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/filetype.vim\n  4: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/menu.vim\n  5: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/autoload/paste.vim\n  6: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim\n  7: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/indent.vim\n  8: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim\n  9: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim\n 10: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim\n 11: ~/.vim/autoload/pathogen.vim\n 12: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/ftoff.vim\n 13: ~/.vim/plugin/RainbowParenthsis.vim\n 14: ~/.vim/plugin/taglist.vim\n 15: ~/.vim/bundle/nerdcommenter/plugin/NERD_commenter.vim\n 16: ~/.vim/bundle/nerdtree/plugin/NERD_tree.vim\n 17: ~/.vim/bundle/nerdtree/autoload/nerdtree.vim\n 18: ~/.vim/bundle/nerdtree/lib/nerdtree/path.vim\n 19: ~/.vim/bundle/nerdtree/lib/nerdtree/menu_controller.vim\n 20: ~/.vim/bundle/nerdtree/lib/nerdtree/menu_item.vim\n 21: ~/.vim/bundle/nerdtree/lib/nerdtree/key_map.vim\n 22: ~/.vim/bundle/nerdtree/lib/nerdtree/bookmark.vim\n 23: ~/.vim/bundle/nerdtree/lib/nerdtree/tree_file_node.vim\n 24: ~/.vim/bundle/nerdtree/lib/nerdtree/tree_dir_node.vim\n 25: ~/.vim/bundle/nerdtree/lib/nerdtree/opener.vim\n 26: ~/.vim/bundle/nerdtree/lib/nerdtree/creator.vim\n 27: ~/.vim/bundle/nerdtree/lib/nerdtree/flag_set.vim\n 28: ~/.vim/bundle/nerdtree/lib/nerdtree/nerdtree.vim\n 29: ~/.vim/bundle/nerdtree/lib/nerdtree/ui.vim\n 30: ~/.vim/bundle/nerdtree/lib/nerdtree/event.vim\n 31: ~/.vim/bundle/nerdtree/lib/nerdtree/notifier.vim\n 32: ~/.vim/bundle/nerdtree/autoload/nerdtree/ui_glue.vim\n 33: ~/.vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim\n 34: ~/.vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim\n 35: ~/.vim/bundle/rainbow/plugin/rainbow.vim\n 36: ~/.vim/bundle/tabular/plugin/Tabular.vim\n 37: ~/.vim/bundle/tagbar/plugin/tagbar.vim\n 38: ~/.vim/bundle/tlib_vim/plugin/02tlib.vim\n 39: ~/.vim/bundle/vim-airline/plugin/airline.vim\n 40: ~/.vim/bundle/vim-airline/autoload/airline.vim\n 41: ~/.vim/bundle/vim-snipmate/plugin/snipMate.vim\n 42: ~/.vim/bundle/vim-addon-mw-utils/autoload/funcref.vim\n 43: ~/.vim/bundle/vim-snippets/plugin/vimsnippets.vim\n 44: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/getscriptPlugin.vim\n 45: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/gzip.vim\n 46: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/logiPat.vim\n 47: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/matchparen.vim\n 48: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/netrwPlugin.vim\n 49: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/rrhelper.vim\n 50: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/spellfile.vim\n 51: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/tarPlugin.vim\n 52: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/tohtml.vim\n 53: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/vimballPlugin.vim\n 54: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/plugin/zipPlugin.vim\n 55: ~/.vim/bundle/vim-snipmate/after/plugin/snipMate.vim\n 56: ~/.vim/bundle/tabular/after/plugin/TabularMaps.vim\n 57: ~/.vim/bundle/tabular/autoload/tabular.vim\n 58: /Applications/Utilities/MacVim.app/Contents/Resources/vim/gvimrc\n 59: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/colors/macvim.vim\n 60: ~/.vim/bundle/vim-airline/autoload/airline/init.vim\n 61: ~/.vim/bundle/vim-airline/autoload/airline/parts.vim\n 62: ~/.vim/bundle/vim-airline/autoload/airline/extensions.vim\n 63: ~/.vim/bundle/vim-airline/autoload/airline/extensions/quickfix.vim\n 64: ~/.vim/bundle/vim-airline/autoload/airline/extensions/netrw.vim\n 65: ~/.vim/bundle/vim-airline/autoload/airline/extensions/tagbar.vim\n 66: ~/.vim/bundle/vim-airline/autoload/airline/extensions/whitespace.vim\n 67: ~/.vim/bundle/vim-airline/autoload/airline/section.vim\n 68: ~/.vim/bundle/vim-airline/autoload/airline/highlighter.vim\n 69: ~/.vim/bundle/vim-airline/autoload/airline/themes/dark.vim\n 70: ~/.vim/bundle/vim-airline/autoload/airline/themes.vim\n 71: ~/.vim/bundle/vim-airline/autoload/airline/builder.vim\n 72: ~/.vim/bundle/vim-airline/autoload/airline/util.vim\n 73: ~/.vim/bundle/vim-airline/autoload/airline/extensions/default.vim\n 74: ~/.gvimrc\n 75: ~/.vim/bundle/vim-colors-solarized/colors/solarized.vim\n 76: ~/.vim/bundle/vim-airline/autoload/airline/themes/solarized.vim\n 77: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/ftplugin/perl.vim\n 78: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/indent/perl.vim\n 79: ~/.vim/bundle/tagbar/autoload/tagbar.vim\n 80: ~/.vim/bundle/tagbar/syntax/tagbar.vim\n 81: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/syntax/perl.vim\n 82: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/syntax/pod.vim\n 83: ~/.vim/after/syntax/perl.vim\n 84: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/syntax/sql.vim\n 85: /Applications/Utilities/MacVim.app/Contents/Resources/vim/runtime/syntax/sqloracle.vim\n:set guifont?\nguifont=Monaco:h10\n:set guifontwide?\nguifontwide=\n$ /Applications/Utilities/MacVim.app/Contents/MacOS/Vim --version\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2015 00:06:42)\nMacOS X (unix) version\nIncluded patches: 1-936\nCompiled by travis@Traviss-Mac-140.local\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl             +file_in_path    +mouse_sgr       +tag_binary\n+arabic          +find_in_path    -mouse_sysmouse  +tag_old_static\n+autocmd         +float           +mouse_urxvt     -tag_any_white\n+balloon_eval    +folding         +mouse_xterm     -tcl\n+browse          -footer          +multi_byte      +terminfo\n++builtin_terms  +fork()          +multi_lang      +termresponse\n+byte_offset     +fullscreen      -mzscheme        +textobjects\n+cindent         -gettext         +netbeans_intg   +title\n+clientserver    -hangul_input    +odbeditor       +toolbar\n+clipboard       +iconv           +path_extra      +transparency\n+cmdline_compl   +insert_expand   +perl/dyn        +user_commands\n+cmdline_hist    +jumplist        +persistent_undo +vertsplit\n+cmdline_info    +keymap          +postscript      +virtualedit\n+comments        +langmap         +printer         +visual\n+conceal         +libcall         +profile         +visualextra\n+cryptv          +linebreak       +python/dyn      +viminfo\n+cscope          +lispindent      +python3/dyn     +vreplace\n+cursorbind      +listcmds        +quickfix        +wildignore\n+cursorshape     +localmap        +reltime         +wildmenu\n+dialog_con_gui  +lua/dyn         +rightleft       +windows\n+diff            +menu            +ruby/dyn        +writebackup\n+digraphs        +mksession       +scrollbind      -X11\n+dnd             +modify_fname    +signs           -xfontset\n-ebcdic          +mouse           +smartindent     +xim\n+emacs_tags      +mouseshape      -sniff           -xsmp\n+eval            +mouse_dec       +startuptime     -xterm_clipboard\n+ex_extra        -mouse_gpm       +statusline      -xterm_save\n+extra_search    -mouse_jsbterm   -sun_workshop    -xpm\n+farsi           +mouse_netterm   +syntax          \n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1       \nLinking: clang   -L. -L/usr/local/lib -L. -L/usr/local/lib  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -framework Cocoa   -fstack-protector  -L/System/Library/Perl/5.16/darwin-thread-multi-2level/CORE\n. Thank you for instruction, but it's not the cause.\nI've discovered right now that cause is disabled \"Use LCD font smoothing when available\".\n. here too\nPS. Also can't find ChangeLog...\n. ",
    "afgomez": "It's still happening with the version from HEAD\n$ mvim --version\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Dec  4 2015 10:11:43)\nMacOS X (unix) version\nIncluded patches: 1-960\n...\n. ",
    "stevenharman": "@Shirk It's been... a while, but any thoughts on whether or not there might be a fix (or way forward) for this issue? Granted, it's not huge, but it is pretty distracting for anyone using a font with ligature support.\nThanks for all of the work!. Well, I think I'm wrong. I believe the Homebrew pre-built image of MacVim was incorrectly built w/o Ruby support. That's what the above screen shot was from - I incorrectly assumed it was due to a change in MacVim. My mistake.\nsee: https://github.com/Homebrew/homebrew-core/commit/a34b0b3e6e1512e453ad90a0d8d6c4cf8fc74980#diff-61f46ceaa4cf83af6f725c903b74ea90. \ud83d\udc4d I pulled down the latest release and confirmed Ruby is enabled. It's a problem with the Homebrew pre-compiled bottle for (at least) Sierra. Thanks.. ",
    "windwiny": "killall Dock restart Dock, will refresh the recent files list.\nAnd , TextMate has this problem too ,  \nBut, the pdf reader  skim http://skim-app.sourceforge.net ,  this program will refresh recent files list on close a file, not need quit program. \nAnybody can find which API call will solve this problem?\n. No good.\nIt is  OS X 10.11.3/4 bug https://discussions.apple.com/thread/7328388?start=0&tstart=0\nAnybody who can email or twitter a apple's programmer or CEO? let he fix this bug.\n. ",
    "kodabb": "So, I haven't been dreaming, there really is a bug!\nI think MacVim should be doing something like this after opening a file\n[[NSDocumentController sharedDocumentController] noteNewRecentDocumentURL:[NSURL fileURLWithPath:####]];\nThis should populate the \"Open Recent\" and conversely the Mission Control files.\nFurther resources\n- http://stackoverflow.com/questions/3236529/add-to-the-open-recent-menu-an-item-that-doesnt-point-to-a-file\n- https://lists.apple.com/archives/cocoa-dev/2004/Jul/msg01168.html\n- https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSDocumentController_Class/#//apple_ref/occ/instm/NSDocumentController/noteNewRecentDocumentURL:\n. ",
    "lvcargnini": "Thanks Kazuki,\nI\u2019ll follow your advice.\nBest Regards\nLuis Vitorio Cargnini, Ph.D.\nResearch Technologist Engineer\nHGST, a Western Digital Company\nluis.cargnini@hgst.com<mailto:luis.cargnini@hgst.com>\no: 408-717-5513\n[cid:A1F5F1E9-17C6-41C8-958C-18A999300485]\n3403 Yerba Buena Road\nSan Jose, CA 95135\nwww.hgst.com\nLongLiveData\nFrom: Kazuki Sakamoto notifications@github.com<mailto:notifications@github.com>\u2014\nReply to this email directly or view it on GitHubhttps://github.com/macvim-dev/macvim/issues/167#issuecomment-163378419.\nHGST E-mail Confidentiality Notice & Disclaimer:\nThis e-mail and any files transmitted with it may contain confidential or legally privileged information of HGST and are intended solely for the use of the individual or entity to which they are addressed. If you are not the intended recipient, any disclosure, copying, distribution or any action taken or omitted to be taken in reliance on it, is prohibited.  If you have received this e-mail in error, please notify the sender immediately and delete the e-mail in its entirety from your system.\n. ",
    "kgrz": "Thanks for the pointer. I forgot to test it in MacVim GUI before opening this issue :facepalm: Checking on Terminal.app and seeing the issue there too suggested that it was independent of the terminal emulator. But maybe I was wrong.\n. ",
    "raimue": "For MacPorts, we received one report of build errors on OS X 10.6. At least there still seem to be users around, but it does not even build in the current snapshot release.\n. The same issue was also reported to MacPorts: https://trac.macports.org/ticket/53838\nSuch a wrapper script is not a good solution, as it hides any startup errors and might leave users clueless about problems. Nevertheless, if upstream decides this is the correct way to tackle this problem, then this should be done in the mvim wrapper script as shipped with MacVim.. ",
    "lambdalisue": "Perfect. Thanks. I'm looking forward it to be merged ;-)\n. :confetti_ball: \n. > Shouldn't this have been solved by using :redraw! instead of :redraw, rather than chaning MacVim source?\nI don't think so. I tried redraw! but using redraw! in for loop makes screen blinking.\nVim help said.\n*:redr* *:redraw*\n:redr[aw][!]        Redraw the screen right now.  When ! is included it is\n            cleared first.\n            Useful to update the screen halfway executing a script\n            or function.  Also when halfway a mapping and\n            'lazyredraw' is set.\nSo redraw and redraw! is a bit different.\nI tinkg calling gui_macvim_flush_force after redraw or redrawstatus is a correct behavior.\n. > But that's how plain Vim works.\nNo. At least in Vim on Ubuntu, GVim on Ubuntu, or Vim on Mac, the screen does not blink when I call :redraw but redraw!. So you cannot use redraw! instead of redraw. It's different.\nhttps://gist.github.com/lambdalisue/94d14ff706a5627d64f5\n\nThe docs show that :redraw isn't supposed to completely clear and then redraw the screen. That's what :redraw! is for.\n\nNo. :redraw! stands for to clear first. redraw should also redraw the screen whenever called as well but without clearing (thus the screen won't blink).\nI'm not sure if calling gui_macvim_flush_force is a correct way but I'm sure that the previous behavior is way different from other Vim.\n. And actually I noticed that redraw! did not work as well in revision ddc5c14 the one before the fix.\n. Now I got. Yes it seems an issue on redraw! but redraw. It is a quite strange behavior ...  I didn't notice.\n. ### Expected behavior\nOf https://gist.github.com/lambdalisue/94d14ff706a5627d64f5\nIndicator is increasing 1 by 1 (E.g. Test: 1 -> Test: 2 -> ...) without blinking screen when Test 1 (redraw) is called.\nIndicator is increasing 1 by 1 (E.g. Test: 1 -> Test: 2 -> ...) with blinking screen (because of screen flush) when Test 2 (redraw!) is called.\nActual behavior\nJust before the redraw fix\nrevision: ddc5c148e848ca3b6113af0f994678caeb3da0dd\nBoth Test1 and Test2 hung a bit and Test 99 is suddenly shown.\nAfter the 1st redraw fix\nrevision: 2d3163f649caec70afcea3df950ba40eb40af568\nIndicator is increasing 2 by 2 (Test: 1 -> Test: 3 -> ...) without blinking screen when Test 1 is called (almost correct behavior).\nNothing is shown when Test 2 is called.\nAfter the 2nd redraw fix\nrevision: 05e488d36905b719a9f24a3047e511fec13b658e\nIndicator is increasing 1 by 1 (Test: 1 -> Test: 2 -> ...) without blinking screen when Test 1 is called (correct behavior).\nNothing is shown when Test 2 is called.\nMy conclusion\nBoth redraw and redraw! were broken and only redraw was fixed with recent commits. So reverting the commits won't fix the problem and further workarounds are required I guess. But I'm not really familiar with the code of Vim nor MacVim so I have no idea how :-p\n\nIt didn't do that prior to the flush tweaks\n\nLet us know the revision. For me, this issue exists from when I started to use MacVim (several years ago). You may know the revision which works fine for redraw! workaround and that might help to resolve the issue.\nHow did I change the revision (in case)\nI add :revision => \"xxx\" to brew edit macvim and re-installed.\nruby\nhead \"https://github.com/macvim-dev/macvim.git\", :revision => \"ddc5c14\"\n. because it clear the screen. try with fullscreen mode and/or a slow machine. prob your GPU is too fast to recognise i guess.\n. Thanks a lot ;-)\n. ",
    "aisapatino": "I'm having the same problem. Seems to be an issue with vim (not macvim specifically), and hasn't been fixed there as far as I can tell. See https://github.com/vim/vim/issues/484\n. ",
    "silent-e": "Yeah, confirmed.  brew-installed vim v7.4 with patches 1-963 has the same issue.  So uninstalling that and sticking with MacVim 7.4 (77) is the solution for now I guess.\n(e)\n. ",
    "chemzqm": "I've test this PR out, the only question is why it still not get merged into master?\nIMO, it looks much better than the exist tabs and I can't see any bug.\n. @splhack just tried, I can see the characters.\nbut I can't choose chinese characters any more, looks like it's a problem with one of my plugins, it works fine if I use mvim -N -u NONE\n. ",
    "wweaver": "This happens to me in a regular windowed version as well. It's been happening for a month or two now.\n\n\nI keep trying to do updates of my vim plugins and of vim itself hoping there will be a fix.\nnote: I just upgraded to snapshot 88 of macvim when taking those screenshots\n. @splhack, no, it doesn't seem to happen when in the terminal.\nNot sure if this info is helpful to you.\n:version\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Dec 28 2015 13:43:12)\nMacOS X (unix) version\nIncluded patches: 1-979\nCompiled by Homebrew\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl             +cmdline_hist    +dnd             -footer          +linebreak       -mouse_gpm       +odbeditor       +rightleft       +tag_old_static  +virtualedit     +xim\n+arabic          +cmdline_info    -ebcdic          +fork()          +lispindent      -mouse_jsbterm   +path_extra      +ruby            -tag_any_white   +visual          -xsmp\n+autocmd         +comments        +emacs_tags      +fullscreen      +listcmds        +mouse_netterm   +perl            +scrollbind      -tcl             +visualextra     -xterm_clipboard\n+balloon_eval    +conceal         +eval            -gettext         +localmap        +mouse_sgr       +persistent_undo +signs           +terminfo        +viminfo         -xterm_save\n+browse          +cryptv          +ex_extra        -hangul_input    -lua             -mouse_sysmouse  +postscript      +smartindent     +termresponse    +vreplace        -xpm\n++builtin_terms  +cscope          +extra_search    +iconv           +menu            +mouse_urxvt     +printer         -sniff           +textobjects     +wildignore\n+byte_offset     +cursorbind      +farsi           +insert_expand   +mksession       +mouse_xterm     +profile         +startuptime     +title           +wildmenu\n+cindent         +cursorshape     +file_in_path    +jumplist        +modify_fname    +multi_byte      +python          +statusline      +toolbar         +windows\n+clientserver    +dialog_con_gui  +find_in_path    +keymap          +mouse           +multi_lang      -python3         -sun_workshop    +transparency    +writebackup\n+clipboard       +diff            +float           +langmap         +mouseshape      -mzscheme        +quickfix        +syntax          +user_commands   -X11\n+cmdline_compl   +digraphs        +folding         +libcall         +mouse_dec       +netbeans_intg   +reltime         +tag_binary      +vertsplit       -xfontset\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX  -F/usr/local/Cellar/python/2.7.11/Frameworks -I/usr/local/Cellar/python/2.7.11/Fram\neworks/Python.framework/Versions/2.7/include/python2.7 -I/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/include/python2.7 -fno-strict-aliasing -fno-common -dynamic -isysroot /\nApplications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/\nSystem/Library/Frameworks/Tk.framework/Versions/8.5/Headers -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SD\nKs/MacOSX10.11.sdk -mmacosx-version-min=10.11 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: clang   -L. -L/usr/local/lib -L. -L/usr/local/lib -F/usr/local/Cellar/python/2.7.11/Frameworks -L/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/config -\nlpython2.7 -framework CoreFoundation -Wl,-syslibroot,/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -mmacosx-version-min=10.11 -L/usr/local/lib -o V\nim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -framework Cocoa   -fstack-protector  -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE -lperl -F/usr/local/Cellar/python/2.\n7.11/Frameworks -framework Python   -framework Ruby\n. I'm sorry I don't have a specific snapshot that this started happening for me. I know it's been at least 3 or 4 updates.\n. There's potential that for me it happened when I upgraded to El Capitan I just didn't put that correlation in my head.\n. ",
    "rogergl": "So far I'm having only problems in Split-Screem with Native Full-screen.\n. @splhack. Yes it happens only in Split View.\n. Just to make things clear. I'm not referring to Vims own Split-View but to the native Split-View from Mac OS X introduced with El Capitan. \n. It seems as if El-Capitan Split View support never worked (at least on my machine). I tested down to Snapshot 77 and none of them worked.\n. ",
    "mattijsbliek": "Any updates on this issue? Would be fantastic if this could be fixed.\nAdditional info: it also happens when using the non-native fullscreen mode.\n. ",
    "aholtzma": "Indeed, this still happens with MacVIm 8.\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Sep 14 2016 03:42:03)\nMacOS X (unix) version\nIncluded patches: 1-3\n. ",
    "captainvera": "Still happening for me too. If there's any info I can provide to help, let me know.\nMacOS X version 10.12.3\nMacvim 8.0.329. I've narrowed it down to the Core Text Renderer Option. \nWithout it, works fine. Native and Non-Native fullscreen modes.\nWith Core Text it just stops working correctly.\nMacVim just turns black, once you scroll through the program it will display only lines where the cursor has passed: \n\n. ",
    "nilsbecker": "i have this issue too.  macvim 8, el capitan, full or split screen. in addition, when using the non-core text renderer in native split-screen, line heights are not always preserved. after some scrolling/editing one can end up with a line somewhere in the middle of the screen which is too tall, for example.\ni would speculate that this may have to do with the fact that the fullscreen window height is not a multiple of the pixels-per-line?. buffer list with touch-to-switch?. thanks, that seems indeed heavy. in fact i observed that every time i move two lines away, a redraw is triggered. so this would just need to be changed to one line away, and in addition, all redraws while remaining within the line should be removed. so an actual fix would not be more expensive than the current behavior, i think. . apple documentation:\nhttps://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6ltag.html. no, sorry if this was too noisy. a mailing list would have been a better place. . I am seeing crashes with the same error message now:\n```\nmvim\nbqdyn245_127:~ nbecker$ Fatal Python error: Py_Initialize: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'\nCurrent thread 0x00007fffe49143c0 (most recent call first):\nVim: Caught deadly signal ABRT\nVim: Finished.\nthis is with\nmvim --version\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Dec 22 2017 03:30:17)\nmacOS version\nIncluded patches: 1-1420\nCompiled by root@Traviss-Mac-934.local\n```\nand with homebrew python3 version 3.6.4_1\n  . the above is snapshot 144. i can avoid the problem by reverting to snapshot 143 @splhack\n. same issue here. started after update to high sierra. solved by adding explicit paths to .vimrc as described above.. ",
    "curiale": "Hi,\nIs there any news about this issue?. Hi @gnattu \nThanks for the suggestion but, It is not working for me (see the screenshot were the macvim window became totally black even when the guioption was set as you suggested). \n\n. @gnattu you are totally right, the scrollbar is still appearing. In my case :set guioptin? returns guioption=egmrL, I'm going to dig a little bit about how to remove the scrollbar in my case. Thanks in advances.. @gnattu I removed the scrollbar, however, the black issue is still happening for me.\n\n. Removing the scrollbar doesn't fix this issue. Has anyone found a proper solution to fix it ?. ",
    "gnattu": "It looks like the scroll bar breaks everything. By adding set guioptions-=lrLR to gvimrc, the  annoying black blocks no longer appears.. @curiale I can still see a scrollbar in you screenshot which is in the middle of the screen, or at least it looks like a scrollbar. I'm not sure why it's there.  What's returned by :set guioptions?  in your case? Mine is guitoptions=gtme, and works fine with nerd_tree plugin.\nBy the way, my option is written to gvrmic instead of vimrc, not sure if it is the case.. @curiale I tried to enter split view in a couple of ways. The only time I met this bug was that I opened macvim as a window, and move it directly to another full-screened app to enter split view. Make Macvim full screen using the green button first and then drag it to another full-screened app does not trigger the bug. Hope that will help you.. ",
    "micthiesen": "I'm having this issue without being in fullscreen and without scrollbars. Here's a command to automatically redraw every time MacVim is resized (put it in your .gvimrc). It's not a permanent solution but it works.\nvim\nautocmd VimResized * redraw!. I should clarify, in my case MacVim turns black sometimes when I resize the window. I don't know if this will fix the issues with NerdTree.. ",
    "blochberger": "I have the problem as well. Not only in native split-screen but in native fullscreen in general. It appears if I split the window in MacVim and move to another application.. This might be related to #196.. ",
    "fftyjw": "autocmd FocusLost * redraw!\nworks for me. autocmd FocusLost * redraw!\nworks for me. vim command is ctrl-w,x. ",
    "yuriy-nyllabs": "FocusLost didn't seem to do it for me, but \nautocmd FocusGained * redraw!\nworks. . ",
    "ychin": "Closing. The last two releases should have fixed this both on Mojave and pre-Mojave.\n. @nwebz Is this still an issue? The renderer has undergone a fair bit of changes since then and I have not seen this at all.. Closing for now as this bug is too old to be useful.. #791 added \"Mojave-style\" tabs, where the colors and theming look similar to how native macOS tabs do (dirty detail: it's not the same as native tabs, because macOS doesn't expose a native tabs UI control for developers). This should make the tabs more pleasant to deal with as they would look similar to other native Apple apps and if you toggle dark mode, the tabs would turn to a dark gray color as well so it won't be blinding to you. It's only going to be active if you are running MacVim on Mojave or above.\nI think this is probably the best move forward as it works out of the box and looks similar to other native Mac apps (the main goal of MacVim is to provide the Vim experience in an app that feels like a native macOS Cocoa app). Adding customization like this proposal always comes with a maintenance cost moving forward so I'm a little hesitant to add this feature.\nLeaving the issue open for now to see if there are any further discussions on this.. @eirnym  Can you elaborate? What command are you using?\nIf you are using Cmd-V, that's using the Edit -> Paste menu item, which is implement as \"+gP, which is why is pastes before, not after. This is the same as core Vim. \"+p still works for pasting clipboard content after the cursor and you can map whatever key you want to that as well.. Sorry, but I will have to say no and close this issue.\nThe main reason is that this is the default Edit \u2192 Paste action in Vim and I don't want to deviate from vanilla Vim as consistency across platforms is more important.\nAlso, the \"before or after\" question in normal mode is a constant one new Vim users have to learn and  figure out to become fluent in Vim. Just mapping Cmd-V to p instead of P isn't going to fix that. For example, if you want to paste something to the first column you have to do \"+P, but if you want to paste something to the end you have to do \"+p, unless you have set virtualedit=onemore where you can position the normal mode cursor one past the end. The point I'm trying to get across is that the way Vim normal mode interacts with insertion of text ('p' vs 'P', 'a' vs 'i') is something users just have to learn because cursors lie on characters, not between characters. You have to pick one (before or after). Note that this isn't an issue in insert mode.\nEdit: I guess you were talking about linewise paste, but the discussion is similar for that as well.. As I said, Cmd-V is a shortcut for the Edit \u2192 Paste menu item, which is defined as \"+P in Vim regardless of platform. Look up menu.vim in Vim for the definition. Cmd-V itself is a MacVim-specific shortcut as Cmd keys obviously work differently in other platforms, but Edit \u2192 Paste is generic.. Fixed in #788. Native tabs are now disabled and likely won't be supported in foreseeable future.. I can't repro this. Does it still happen for you in the latest release @cmcginty?\nIf it does you can also try mvim -u NONE -U NONE to load a vanilla MacVim with no vimrc to see what happens. Also, if you could post your preferences that would be great. You can do that by going to Terminal and copy the result of the command defaults read org.vim.MacVim | grep MM.. I'm closing this as this is relatively old and the original filer isn't using this app anymore. Feel free to open new issues if you see further issues.. I'm closing this issue.\nFor 10.14 (Mojave), #757 has introduced a new renderer that doesn't use CGLayer and it's used across the board including non-native fullscreen. It's faster than the old CGLayer renderer (which used to be used by non-native fullscreen), but a little slower than the old normal non-fullscreen renderer. If you are not satisfied with the new renderer's performance, use #796 to track.\nFor 10.13 (High Sierra) or below, this is a wontfix. Non-native fullscreen uses CGLayer and it's slow. You can either upgrade to 10.14 or use native fullscreen if the performance is too slow. The fix for #796 may be backported to 10.13 but that may not work if it involves using newer APIs.. @chdiza Do you actually use fuopt? I barely remember that option exists and curious what the use cases for this option is. Is it just to focus or avoiding having too large an edit area?. @JESii Does this still happen? A few resizing fixes have gone in to MacVim over the last few releases which should make it more robust now.. @tobireif is this still an issue? I couldn't reproduce this and curious what the \"General\" page of your MacVim preference pane looks like.. Reopen for investigation.. MacVim is open-sourced so you can always still build it yourself :). We also still need to support Homebrew builds (which builds from source) of course.\nPart of the investigation is coming up with a satisfactory way to enable code signing in the build system (Travis CI) while keeping the main Xcode project in the repo pristine.\nI do think for distributed binary we should try to sign it. Sparkle (our update system) already checks for a code signature but it\u2019s nice to have an Apple-signed binary for peace of mind (not to mention Apple is heavily encouraging this which makes the first-time user experience quite annoying otherwise). \nAs a side note, #763 is related to this for some weird reason. I suspect the fact that MacVim is unsigned causes some slow validation path to trigger in Mojave when calling external application.. I think this is because Hammerspoon requires system permission which would be annoying if you don\u2019t self-sign the app. So a little bit of a different circumstance from MacVim. . I thought about it but I have already purchased an account. Maybe I\u2019ll do it next year for renewal. . Latest release (https://github.com/macvim-dev/macvim/releases/tag/snapshot-154) now signs the app.. Dup of #490. #758 is a related issue. In this case native tabs were triggered inadvertently due to system settings.. Just as an update, #788 has officially turned off native tabs (it was actually previously turned on but it was buggy). I'll need to investigate if there's actually value in properly supporting native tabs (similar to VS code) before properly supporting it. There are at least a couple things that need to be fixed up including how the menus work, shortcut keys, and rendering artifacts that show up.\nJust for reference some people here confused \"native tabs\" with dark tabs, which #791 did add (it will turn on when you turn on dark mode in Mojave). Native tabs refer to High Sierra's feature of grouping multiple distinct macOS windows into one tabbed window, so if we support it you will see two hierarchy of tabs. Each native Mac tab will be a window that runs a Vim instance, each still having its own Vim tabs. It's not a replacement for the normal Vim tabs.. @mereddy22 I believe that's #751. We are currently trying to fix it and there is a pull request under review right now and should be merged in soon.\nHow are you installing MacVim? If you use the official release from this site it should not have the issue (since it's still being built with High Sierra SDKs). Or are you using it from Homebrew?. @mereddy22 If you need to use MacVim ASAP I recommend downloading an official build from our releases which should still work on Mojave.\nOtherwise, you could use the Apple system provided Vim for now.\nThe proper fix should be committed in a week or so.. Homebrew build includes that already. For the binary snapshot releases here on Github I think I would prefer to make a release containing the fix for all the Mojave issue as well, unless that drags on too much.. What do you see if you type set pythonthreehome? and set pythonthreedll?? Also, what's your Python version and how did you install them? Almost all Python problems ultimately come down to configuration issues and version mismatch so those information are usually useful to include.. Note that I\u2019m asking for the results of set pythonthreedll?. The question mark is a syntax to query the option in Vim. Even if you don\u2019t set it manually you should at least know what that option does when using Python in Vim.  . I have the same question on updates. I'm quite interested in having TouchBar support as right now it doesn't do anything when I have MacVim up :(. (macOS allows you to force it to only show function keys when MacVim is up but if you do that it's hard to adjust volume, etc)\nI don't mind taking this over and help push this through if the original author is no longer interested. I think this at least needs some documentation in gui_mac.txt in addition to the existing comments.\nPlayed around with it a little bit, and some additional potential improvements below. These are really just random ideas. Could be future pull requests after this is in:\n\n\nYou can't pan through the touch bar items if there are too many. Ideally you should be able to do that.\n\n\nAn alternative is expose the \"Customize TouchBar\u2026\" option to give native TouchBar customization. Not sure how much work that is.\n\n\nDifferent modes are not respected right now. E.g. vnoremenu TouchBar.VisualOnly <Nop> would still be active in normal mode. Normal menus and toolbars do respect the modes and gray out the items. I think for touch bar we don't even need to gray out the menu items. Just hide them to save space.\n\n\nNesting is not allowed right now. I.e. you cannot do :an TouchBar.Grouping.Item1 <Nop>. I'm thinking it could surface \"Grouping\" and when you tap on it it will show the individual items under it. This is useful as TouchBar's real estate is pretty small. E.g. you can use this to group debugger controls.\n\n\nAnother idea is to show all the subitems, but grouped together. This saves the extra tap and allow you to see what the options are.\n\n\nColor support. Touchbar items can have customized colors rather than the default ones.\n\n\nKind of extra credit, but support other GUI widgets. Maybe this gets a little too outside of what Vim usually is like, but examples range from using the standard template images (https://developer.apple.com/design/human-interface-guidelines/macos/touch-bar/touch-bar-icons-and-images/) to supporting scrubber. You can kind of go down a rabbit hole on this one though when trying to shoehorn support for native TouchBar APIs onto Vim APIs.. I just submitted a new PR (#715) which takes this current patch and fixed up misc issues and added features.. This is a duplicate of #676 and can be closed (see https://github.com/macvim-dev/macvim/issues/676#issuecomment-432525099).. Closing this as the bug was fixed in Vim and merged to MacVim a while ago.. Fixed in #745.. That's the best practices as described in the docs (gui.txt), yes, but I think there are people who also just set gui options in vimrc using has(\"gui_running\") checks. Feels to me if the user has already set the option, MacVim's own gvimrc should try to respect that and not stomp the custom value (you can set this option in regular Vim/Gvim's vimrc and it will work, for example). If the user is setting guitablabels in gvimrc as recommended nothing would change.\n\n\nMy understanding of gvimrc is that there are certain GUI work and initialization that happens after vimrc is sourced, which is why you need another file to provide certain GUI customization, but in this case there's no technical limitation on why we should stomp the user's setting flags.. Oh actually, I made a mistake in the docs then. You need to still override the gvimrc to get the default tab labels back. I'll submit PR for that.. Hmm, I don't really have too strong an opinion of this. I do think it's nice to respect options that was set in vimrc if the user set it somehow but yes they should have been set on the gvimrc instead. There are also other existing vimrc settings you can set like macvim_skip_colorscheme in order to not having to override them in gvimrc. Pinging @splhack  in case he has an opinion on this.. Did you resolve this issue?. I'm going to close this for now. This seems like a Python configuration issue. It may have been a misconfiguration in the Homebrew set up.. As @rocheers said, you need to tell Git there is a git diff tool called \"mvimdiff\". It doesn't magically infer that the tool's name is the same as the command. You can make that name the same as the command, or not.. Closing this as it's a duplicate of #499.\nSee https://github.com/macvim-dev/macvim/issues/499#issuecomment-448927102 for rationale for closing.. Seems to work for me. How does it not work for you @epheien?\nI confirmed it wasn't working in 135, but the newest versions (at least for the last 3 releases from 153) should work. Do note that you won't get a mouse over selection effect. Only the mouse click registers so it's not obvious.. Force clicks are now mappable. To use them, map <ForceClick> to your favorite commands. For example, if you want Force clicks to enter insert mode, just do this in your vimrc:\nnnoremap <ForceClick> i. You can put `macm Edit.Paste key=<nop>` in your gvimrc (*not* vimrc) to clear the mapping of Cmd-V. Do `:help :macmenu` for more details.\n\nThat said it seems a bug you can't paste in Terminal mode. It's likely because the feature is still pretty new and it requires some hooks to enable.. Just to elaborate, the issue here is that Cmd-V by default is mapped to the menu \"Edit.Paste\", so if we could modify menu.vim so that Edit.Paste will also paste in Terminal, that would be great. Unfortunately there's currently no way to map a menu item in Terminal mode now, presumably since tmenu actually means adding a tooltip.\nAlso, just as an aside, there's also no way to copy in terminal mode right now, and you have to use <C-\\><C-N> to jump to normal mode first.\nThese probably need to be fixed in Vim first.. Terminal menu support in Vim has been added in 4c5d815256099b50eca2ec5bf8f9aaa67a890211 (also see vim/vim#3439), so Cmd-V to paste will work now. This issue can be closed.\nEdit: This also means you can now map toolbar / TouchBar controls for terminal mode now since they rely on the menu system.. As commented, Cmd-V paste now works. The next release will contain this change. The best way to check is to make sure :version is bigger than 8.1.0487. . @mredolatti Did the answers work for you? If so please close the issue.\nAlso, MacVim will now automatically use Homebrew / MacPort / official Python installations if they exist (2.7 or 3.7 as of the latest version today) so if you have those installed you don't even need to configure manually.. I'm closing this because the \"window navigation\" menu items that you mentioned are all related to High Sierra's native tabs, which MacVim doesn't work properly with. I have since turned off native tabs explicitly in the app so you would not see those menu items at all (e.g. \"Merge All Windows\") in any windows now. If you want that feature use #544 for tracking.\nThe \"Toggle Full Screen Mode\" issue is a duplicate of #566.. The latest update should show you the Vim patch version (it should say 8.1.560) instead of a generic 8.0 so it's clear what you are getting, and the release notes would cover the MacVim portion of what features are added on MacVim side.. \n. I was playing around with this and it feels like the issue lies in how Vim itself handles sidescrolloff which feels non-intuitive to me near the end of the line. The snapping behavior is just how Vim itself handles it (you can see the same if you use zl or bottom scrollbar). There's also some oddity in how Vim snaps the current cursor when using scrolloff and the cursor is at the last line as well.\nI think this should be fixed upstream in Vim as MacVim is just passing scroll events to Vim.. I couldn't quite find any unit tests specific to MacVim in the repo (raw Vim has the src/testdir which has a collection of Vim scripts for unit tests). If I missed that I can add unit tests for this functionality as well.. Ok. Feel free to revert the change. I'll try to look into the issue and submit a proper fix. The way the messages got bounced when resizing windows involved quite a few roundtrips, and it's possible I missed some cases since I didn't test on another monitor.. Also @ichizok how does guioptions-k not work for you? Can you give a more detailed set of repro steps? I'm curious as it could be related why it's causing issues.. @ichizok  @splhack  Opened new pull request (#727) to revert this change. Sorry for the breakage.. Ah yes, right. I think there's actually a bug in that toolbars don't work, but scrollbars / linespace / tabs do work. I will fix that case as well in the second version of this pull request later.. @vitaly-zdanevich No. The current TouchBar implementation allows you to add buttons using the misc Vim menu  commands (e.g. :amenu). Statusline is a different system.\nMaybe it\u2019s worth investigating it at some point but it\u2019s non-trivial to get something like a statusline display to work. We will need to split out the statusline code in Vim to generate display commands for a new target and modify the CoreText renderer in MacVim to render specifically to TouchBar.\nDoable, but will require some work and I argue the utility from doing that is limited outside the initial cool factor as statusline already works in Vim. TouchBar is really designed and ideal for interactive displays like buttons rather than a status display. . I submitted a PR #727 to revert the change that introduced this bug. If someone can grab it and build locally to test it out that would be appreciated. I'm not at a place to be able to test external monitors right now.. > The same is happening when you open a narrow window, for example, 69x42, and then open a window with local setting set width (or height) bigger than it was. Any way to force redrwaw works, including hiding MacVim or switching an app\n@eirnym Can you explain a little more in how your repro case worked? What commands are you running?. @eirnym I couldn't reproduce the issue on my laptop. Did you only reproduce this using your method on an external monitor? If so I just need to hunt down an external monitor to connect to so I can debug it.. @eirnym Oh good to know. But also sad that that means I will have to hunt down an external monitor to test still.\nAlso check out #557 which I suspect could be related. You can try the suggestions from this comment (https://github.com/macvim-dev/macvim/issues/557#issuecomment-339556291) to see if it helps by setting MMUseCGLayerAlways to true. It causes other issues such as scrolling performance but it's nice to know if it's related at least.. Only happens in CoreText renderer. Will look into it.. @shirriff You can probably download an earlier snapshot to 149 (https://github.com/macvim-dev/macvim/releases/tag/snapshot-149) to avoid having this issue, then wait for the next update (snapshot 151) which will address this. If you don't mind building MacVim yourself you could sync to master now and build it (but it's probably easier to just download snapshot 149 for now) \nOtherwise there are some mitigation steps in #721 that mostly rely on a Vim script to resize the window for you on launch.. @ianwjhalliday huh that\u2019s weird. So you never saw that in snapshot 149? The revert was a pretty straightforward revert and should have removed all the changes from the original PR.\nDid you update to beta macOS Mojave or changed configurations in any way?\nAlso wondering if this particular case is related to #557. Release snapshot 151 reverted my change which is not #731.\n731 is a pending pull request to re-implement the change (guioptions \u201ck\u201d) while fixing the original issues (including this one). You can read the pull request for more details on what caused the original issue.\nBut yes I think the flickering issue is something else unrelated to this. . I recommend closing this bug as it refers to the original secondary monitor issue introduced by guioptions-k. We should open another issue if there are other rendering issues.. Just pinging @ichizok @dctucker for this PR. I'm working to fix the previous issues in my implementation for guioptions 'k', and if you have time feel free to try this out to see if this fixes the issue. As I mentioned in the PR I don't have a way to test external monitors at the moment.. Ok thanks for testing it out. I\u2019ll find an external monitor to test it out.. I believe I have fixed all the issues introduced in the original implementation. Those are:\n\nZoom button not working properly (#724)\nOpening Vim in an external monitor or opening a new Vim window in another monitor would result in broken rendering (#721, #728)\nTool bar not respecting guioptions+=k. (This one was less problematic since it didn't screw up the behavior for normal users who didn't set it)\n\nPinging @dctucker @ichizok again. Also @splhack if he wants to merge it. I tested this in an external monitor after the fix (yay USB-C dongle!) and couldn't reproduce it. I'm pretty confident the issue is now fixed.. Is there anything else I need to do for this pull request? I am pretty sure I addressed the issues caused by the original change and I have been using the editor after my fix and they seem to work fine. I have a few additional fixes for some full screen rendering and resizing bugs but they rely on this change so wondering what I can do to get this merged. Thanks. . I'm closing this issue. It only manifests itself when MMUseCGLayerAlways is set, and there should be no reason for this to be set anymore since all relevant rendering bugs in the default renderers are fixed.\nRendering and window behaviors should work properly by default without any secret undocumented settings in all supported OS versions, and you should consider the MMUseCGLayerAlways setting to be deprecated and will be removed in future. If you encounter other resizing and rendering issues without this flag, please file an issue for those separately.. I think a better patch is to define as \u201cIS_TOUCHBAR_SUPPORTED\u201d macro and take into account cases where 12.2 isnt defined at all, instead of patching in the MAX_OS_X_VERSION_10_2_2\nI can submit a PR. Actually seems like #736 already fixes this but it hasn\u2019t been merged yet. . I can reproduce the issue. Just curious and also for triaging, is this something that was blocking you or you are just doing a sweep on different repos to report bugs?. Ok good to know. Currently the priority is getting Mojave fully supported (which is long due) but I'll take a look at this afterwards.. I believe this also fix #497 as a result of the second commit (58381df5544a2cf66c7680e7e97ee250863b0748). It's kind of an indirect effect of it. When an external program resizes MacVim, it usually resizes it to some random size, rather than to a fixed multiple of row/column size. windowDidResize then used to attempt to resize it down to fixed multiples by calling setFrameSize. This small window size change invalidates the frame's content, but Vim doesn't know it needs to redraw itself since the number of rows/columns remain the same.\nWith this new change windowDidResize won't try to change the size of the window and therefore there will be no invalidation.\nI tested this with Divvy and I did reproduce the bug described in #497 before my change, but with my change I can no longer reproduce the black screen.\nNote: I think it's worth thinking about a better rendering solution in the long term that can handle invalidation. I may write up something. Currently I think the best bet is to implement a Metal renderer which will allow us to keep having good scrolling performance, as the CGLayer implementation results in laggy scrolling performance due to the fact that it's not GPU accelerated.. @chdiza Unfortunately, no, this change does not fix non-native fullscreen mode. I was planning to write up something to describe the details for the rendering issues more, but basically non-native fullscreen mode is a little trickier to fix and likely requires rewriting the rendering code (or at least some refactoring). As you probably know it currently automatically uses CGLayer mode (as if MMUserCGLayerAlways is turned on) which leads to scrolling performance issues and other problems.\nI'll need to think a little more about how to fix it.. @chdiza It's pretty easy to reproduce the scrolling performance issues in non-native fullscreen mode. Just use a retina MacBook (or a Mac with HiDPI / high resolution displays) with a trackpad and scroll down quickly with a flick, then scroll up. Or just scroll up/down rapidly and you will notice the lag and general jitteriness compared to windowed/native-fullscreen mode.\nBut if you are fine with it already that's fine too. This PR doesn't change that mode.\nEdit: #312, #665, #499 all have discussions about the scrolling performance issue.. @eirnym I think you are talking about #732? I prefer just waiting until a later PR to address that, as this PR is already a little bloated with different commits and has been sitting a while so I kind of want this to be merged first.\nAlso, just curious, why are you using MMUseCGLayerAlways? Unless you are running into Mojave issues, you shouldn't need to set it anymore after this patch as it fixes a lot of the black screen issues.\nFor the long term solution for Mojave, my own opinion is we should deprecate MMUseCGLayerAlways and implement a new GPU-accelerated version (CGLayer isn't really GPU accelerated) using Metal.. This is because of a Mojave change that made all NSView automatically become layer-backed, which will break MacVim's rendering since it relies on behaviors from the legacy renderer. Fortunately it only happens when you link against the new 10.14 SDK so old builds would still work, but we would need a long term solution, presumably a Metal-based renderer similar to other fancy high-performance terminal emulator like Alacritty or Kitty.\nCurrently the CoreText renderer also supports a CGLayer mode but it has miscellaneous issues including slow scrolling so I don't think that's the way forward.\nMore info:\n- https://developer.apple.com/documentation/appkit/appkit_release_notes_for_macos_10_14#3014921\n- https://developer.apple.com/videos/play/wwdc2018/209/?time=1360. @amadeus Are you building MacVim yourself using Xcode 10 on Majave? If so, you can build using the old SDK which will fix this issue. Easiest way is to download Xcode 9.4.1 from Apple Developer and build using that. If you are downloading builds from official releases I don't think it should be broken.\nOtherwise you can do this in Terminal to turn on CGLayer mode: defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES. I don't recommend this route though as it makes scrolling slow.. @joelfrederico I was actually planning to implement a first-pass for a fix for this this weekend since I have been looking at the renderer code when fixing some fullscreen rendering bugs, but if you do want to tackle the issue feel free to do that too.\nThe way Vim works is that it treats the GUI as a dumb terminal and just issue draw calls to the GUI like it does for a terminal. The way MacVim draws is that it batches up these draw commands and calls setNeedsDisplay to tell Cocoa that it needs to redraw, and then in the callback drawRect it plays back those draw calls Vim sent it. MacVim itself doesn't cache the full state of the texts, only Vim does.\nThe issue is that these draw commands Vim sent it are only incremental draw commands assuming the previous draws are still valid. When you call setNeedsDisplay technically you are telling the OS to invalidate the whole window even though we are only interested in invalidating part of the window to draw. Previously it somehow worked because for some reason Cocoa didn't clear the whole window for us even when setNeedsDisplay is called when MacVim is in windowed mode. The new APIs always clear the screen when you call that function so you need to know how to redraw the whole screen instead of just playing back the incremental draw commands. Note that this was already a problem in non-native fullscreen which is why we automatically turn on CGLayer mode in that. I think we may kind of fix this by using setNeedsDisplayInRect instead and make sure to set the proper dirty rect, but it has some other issues and doesn't work with scrollRect. Or we could just cache the text states in the renderer so MacVim always knows how to redraw itself.\nAnother issue is we currently use NSView's scrollRect function to scroll the window (which is deprecated) which I think is GPU accelerated given how smooth MacVim's scrolling is. I think this function no longer work under the new change to layered back view, so we would need to implement scrolling using other ways. If we cache the text states as described above we could just re-draw the texts using CoreText when we scroll but it will be slower than the previous scrollRect implementation since text rendering is slower than a simple Blit operation on the GPU.\nThe CGLayer implementation (you can manually turn that on by doing defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES) from what I understand was implemented to address these issues when a previous macOS update broke non-native fullscreen mode, by caching the drawn content onto a CGLayer backing. This way you could incrementally draw to the CGLayer, and then just present the layer when you need to draw. Sadly CGLayer is not GPU accelerated and that's why scrolling in CGLayer mode is a lot slower than the normal one on a high resolution display.\nAll of this is kind of messy which is why I think we should just implement a hardware accelerated renderer (using Metal) to replace CGLayer. We will still use CoreText for the text rendering. We could either just use a GPU texture as backing layer and draw texts on it which ties into the current renderer easier, or we could cache the font glyphs which would allow us to draw texts much quicker but may be tricky to implement (since MacVim supports ligature etc). Another issue with cached glyphs is they won't work (easily) with subpixel font smoothing, which isn't an issue in Mojave since that feature got removed anyway :(, but in older OS we may still want to have subpixel font rendering to be consistent with other parts of the OS.\nThis is the gist of what I understand of the rendering bug, maybe we should make another issue dedicated to writing a new renderer.. @xiaohk How does the release not work for you? Does it crash or just blink a lot when you type? Do you have an external monitor? You can try to remove the CGLayer setting first by doing defaults delete org.vim.MacVim MMUseCGLayerAlways, and also maybe try a fresh vimrc. I'm mostly asking because I'm running Mojave and the release does work for me.. @s4y nice! I haven\u2019t had too much time to hack on this myself :(. I did see your previous commits in the CoreText renderer. It\u2019s true that if we could just mark the dirty rects correctly we don\u2019t need a Metal renderer.\nI think we would still need some special handling for scrolling since otherwise full screen performance could suffer a bit for high resolution screens and I just felt that the tiling solution may be more work to implement than the alternative. But we probably should just get something in to make it work at all. . PR #757 should have fixed this issue. Sorry for the wait. Feel free to re-open if it didn't fix the issue. Note that there's a slight performance impact to scrolling but it should be acceptable, and it's a known issue.. Do you only have one version of Vim installed? When the other MacVim icon jumps up in the dock, you can right click on it and select Options -> Show In Finder to see what this mysterious version of MacVim is.\nOther things you could try include using the menu to paste by doing Edit -> Paste, and see if the same issue persists.\nYou may also want to check System Preferences -> Keyboard -> Shortcuts and see if anything is weird there.\nIf nothing works you can disable the Cmd-V mapping by putting aunmenu Edit.Paste in your gvimrc, and then manually map <D-v> to pasting from clipboard, but I think there's something else to your setup.. Hi, sorry for the late comment. I just tried the patch out and I'm a little concerned about the decreased scrolling performance. I think as long as we are doing software-based blitting in scrollRect (which I think the current patch is doing) we would keep having the same issue. I guess as you said we could just cache the state of the text buffer and redraw, which should be faster than doing image copies on the CPU. From playing around with VimR I believe this is what they do as well, and VimR is fast-ish when using in fullscreen (not as fast as the old MacVim using scrollRect:by: in pre-Mojave though).\nI'm curious about the comment by @chdiza about font rendering being broken (i.e. not doing subpixel font smoothing). When I played around with this before Mojave came out, it was quite hard to rendering text to an offscreen bitmap and tell macOS to do subpixel rendering (this is because the nature of subpixel rendering requires per-color blending which is hard to composite using standard RGBA buffers). I did manage to follow this by initializing an image with kCGBitmapByteOrder32Host which seemed to be the only way to get macOS to respect subpixel font smoothing. If that doesn't work maybe this rendering mode should only be enabled for Mojave? It would still break the trick (hack?) to turn on subpixel font smoothing for Mojave but I suspect that toggle will be killed by Apple soon anyway since they seem to have decided to drop subpixel font smoothing as a feature :( .\nI still think a permanent solution is we need more custom control for the rendering stack (e.g. a Metal renderer) so we can easily accelerate the scrolling (copying images in GPU is very fast) but that will take much more work obviously.\n. @amadeus We will look into the LICENSE issue (#765).\n@s4y We should just try to just merge this change in first. My comments were mostly just for discussion for future enhancement :). Slow rendering is still better than broken rendering\u2026\nI'm probably going to take over reviewing this change. I'm still looking through the whole change, but a couple feedbacks now:\n\nInstead of a static MMDrawToImage that defaults to true, can you make it depend on whether Mojave is enabled? If MacVim is either compiled with pre-10.14 SDK (MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_14) or at runtime it's used in a pre-Mojave OS (floor(NSAppKitVersionNumber) <= NSAppKitVersionNumber10_13) I think we should automatically use the old rendering code if the user didn't set MMDrawToImage manually. This minimizes the damage from the slower performance.\nDid you have a chance to look into fixing subpixel rendering? I don't think it's a dealbreaker if we do (1) since subpixel rendering is not officially supported on Mojave anyway and the current way to turn it on is really a hack. It would still be nice to find a way to fix it though so people who use the hidden toggle to turn it on can't still use it. On the other hand I feel that we definitely shouldn't break subpixel rendering for older OSes.\nWe could consider ditching the whole CGLayer code and just use the new draw to image code but gut feeling is it would cause some backwards compatibility issues, so maybe we should punt on that for now unless we can verify otherwise.\n\nA side comment: I spent a lot time before Mojave came out trying to find a replacement for scrollRect:by: and I don't think there's a good alternative, since Apple really wants you to back everything by CALayer's and let the Cocoa handle scrolling for you instead of a custom rect to copy. I think your per-line layer scrolling could work, but let's do that later since that would complicate the logic by quite a bit.\n. @s4y There is now a top-level LICENSE file (#765). Did you have time to look at my suggestions for change? I just want to make sure we don't regress on older OS versions.. Pinging @s4y. Do you mind pushing your WIP branches to this PR if you have time? I can fix up the remaining issues as I would like to fix this bug soon, but I don't want to take code from un-pushed changes for miscellaneous liability reasons.. I can see some of the issues with blacking out and this change not working properly with the zoom button etc. I have a work-in-progress fix, and will push shortly, along with some other fixes for this PR.\n@amadeus The performance fix will likely have to wait. It will require a bit of change.\n@chdiza Can you elaborate more about the Ctrl-F / Ctrl-B issue? I couldn't repro it.. I have pushed my changes that should fix the misc resizing issues related to this change. That means zoom button, drag-to-resize, changing font size (Cmd+=), fullscreen (non-native and native), etc should all \"just works\"\u2122 now.\nI believe @s4y also fixed this to work with subpixel font smoothing, but @chdiza feel free to confirm. :)\nI feel pretty good about this patch, but as usual there's probably something that I missed, so I'll let it soak a little bit and see if others or @s4y have additional comments or find issues with the current patch before I merge.\nPerformance: It's not ideal, but I think it's within tolerable range. Let's just fix the brokeness first. It's been broken for Mojave Homebrew users for months which I will try to make sure not to happen again.. The change was merged! I'll go close the related issues and prep an update soon. Thanks @s4y for the help.. @dossy I know this issue has been closed, but #788 will fix this properly. MacVim will disable native tabs so you won't see this weird mix of native tabs and Vim tabs again and feel free to set your \"Prefer tabs when opening documents\" preference back to whatever you want.. @mario-grgic I'm not quite reproducing this. A couple changes are coming though: #745 will be merged soon which will fix a few existing fullscreen oddities (it will actually properly restore its size now), and there's another PR (#757) that aims to fix the Mojave rendering issues, so they have a chance of fixing this issue.\nHow are you building your MacVim? Do you have any custom settings?. @cryptoeraser do you still have questions on this? Do you still want to compile MacVim for simultaneous Python 2/3 usage?\nIf not, please close the issue.\n\n\n\u2026 I would like to tweak my MacVim (build it myself) yet still would like to have that Python safety in place. The one that goes \"You have invoked Py2, you can't invokve Py3 at this moment.\" or the oposite.\n\n\nI believe the protection is always there, unless you followed the wiki and configured MacVim using --with-properly-linked-python2-python3. You can always re-configure MacVim to the defaults when building using make distclean && ./configure.\n\n\nIs it possible to hardcode the dynamic python links at build time, so we do not need to set the options in the .vimrc file. I thought that is possible through flags such as: -DYNAMIC_PYTHON_DLL and -DYNAMIC_PYTHON3_DLL at build time?\n\n\nYou could, although as @eirnym said the default MacVim vimrc already does auto-detection for Python so if you installed Python using the normal methods (HomeBrew, MacPorts, the website), MacVim should find it. Otherwise you can use vi_cv_dll_name_python3 when running configure. Check out how we set it up for CI.. @cryptoeraser Updates on this? Did you update? I couldn't repro on Mojave as well, but if this is still an issue for you I could find a way to repro.. @tobireif I can confirm this is happening. I don't have High Sierra installed to test unfortunately, but was it instantaneous before Mojave?. I tried building MacVim with the latest changes under Xcode 10 and the issue seems to be gone somewhat. I don't know where the issue lied or whether some change actually fixed it or not, but after next time we do a release I'll ping here again to see if you see that issue.. Are you using homebrew or the distributed release binaries @tobireif ?. Ok. I think the issue is somehow because MacVim is currently not signed by an Apple Developer ID, which\u2026\u00a0for some reason means calling open is slow. I will investigate #517 to see if I can get an developer ID to sign it, plus see if Apple could fix the issue (there are users who use MacVim by building locally hence shouldn't be forced to self-sign their apps).. The next binary release will be signed by an Apple Developer ID which will (for some reason) fix this. Use the tagged milestone in this issue to track progress and ETA. . Hmm, FWIW that's not the case for me. Compiled for 10.13 or signed application: Fast either way (desktop or Applications). Unsigned app built for 10.14: Slow either way. I don't think the behavior manifests depending on where you are running the app bundle form so I'm surprised you saw that.. You need 154 which is not released yet. Use the tagged milestone to track the date it will be released (which is within this month). . Latest release (https://github.com/macvim-dev/macvim/releases/tag/snapshot-154) now signs the app. The open delay should be gone.. Hmm I don't see any delays anymore on my end. Let me know if it's really long. It should behave similar to older non-Mojave versions.. Thanks for the PR. I left some review comments mostly to clean it up a little bit.. Yes I did forget to. I added the comments.. The short answer is no. I assume you are using the GUI version of MacVim instead of just in the terminal? (Edit: yes you are, since you are calling mvim)\nGVim basically treats <M-e> as the same as the character 'e' with the high bit set, which is the same as \u00e5, hence it has trouble determining between the two. When you set macmeta, MacVim basically behaves the same way, so there's no way to differentiate the two easily.\nI do agree this is kind of silly as it's sort of just holdover from Vim's terminal roots even when you are running it in GUI mode. I would need to think a little about how to fix this. Ideally, <M-e> just gets triggered when you hit Alt-E, and \u00e5 only when you hit that character.. @wfiveash Did that resolve your issue?. Hmm actually do you mind doing :version for me? You should see ruby/dyn which should mean ruby should only be lazily loaded in instead of at launch time, so I'm curious if you have that setting in :version.. Oh ok. If that has resolved it please close the issue. If you run into issues like this you can always re-open.. macmenu Window.Select\\ Next\\ Tab key=<Nop> seems to work for me.\nYou need to make sure to put this in your gvimrc for it to work. See :h macmenu for more info:\n*:macm* *:macmenu*\n:macm[enu] {menu} {key}={arg} ...\n            Set Mac specific properties for {menu}.  The\n            properties that can be set are:\n                action  the action this menu sends\n                alt     \"yes\" if alternate of previous menu\n                key     the key equivalent of this menu\n            This command must be used in a startup file, for\n            example in \"~/.gvimrc\".  It has no effect otherwise.. You may want to make sure to restart MacVim to make sure it doesn't have any stale settings, and also double check that you are not erroneously adding the \"Show Next Tab\" menu in your own gvimrc. Otherwise I'm closing this issue since it seems resolved.. Can confirm this happens. Will look into it.. Just opened a pull request (#780) to fix this. Will merge that in shortly. I have decided to make Cmd-E and Cmd-G in MacVim still respect the system pasteboard even with MMShareFindPboard set to NO because it's an explicit MacVim command and it's a little more consistent with how other macOS apps behave. You can use normal Vim commands like n and / and they won't pollute the system find pasteboard.. Are you building MacVim locally or using HomeBrew? Right now Mojave doesn't work very well due to #751 and you should see a lot of flickering when you use MacVim built for Mojave. Currently focus is on fixing that first, but I will look into the tab issues.. @bhargavshivkumar You could do one of the following:\n\nUse the snapshot version in https://github.com/macvim-dev/macvim/releases (they are all built against High Sierra instead of Mojave for now).\nBuild MacVim using Xcode 9 yourself. I don't know if Homebrew provides a method to do that.\nDon't use Dark Mode (which I understand is not a real solution)\n\nEdit: Also, this issue is unrelated to #751 so even if that issue is resolved this issue would still persist.. @bhargavshivkumar Yes I meant installing the prebuilt dmg file from Github releases (we just call them snapshots). The latest one (151) should be fine and is built against High Sierra.\nI plan to merge in all Mojave support soon so Homebrew builds won't stay broken. There should be a corresponding snapshot-152 release as well and it would be built against Mojave.. I don't know the full context behind this but looking around seems like it's mostly due to the fact that some of the default menus in MacVim don't exist in Vim and therefore isn't translated, and also the same for the ones defined in the nib as well. I'm not sure if there's more to it than that. Pinging @splhack to see if he knows.. I'm curious why you need this? Currently MacVim's dmg building doesn't create a EULA file in the output dmg file, and therefore it never calls this file (dmg-license.py). The Python code in it should never be invoked as far as I can tell. I would prefer not changing this repo's files (create-dmg) since it comes from an existing repo and we should try to pull from upstream if there are things we want to fix.. It's in the README file near the file you were editing.\nIt's https://github.com/andreyvit/create-dmg\nBut can you provide more context whey you wanted to make this mostly unused script Python3 compatible?. You may want to file an issue with homebrew/homebrew-core to see if they could add this. Your argument doesn't have to be --with-rvm-ruby though right? It could just be any Ruby binaries, not necessarily from RVM.. I do think most people use the Homebrew-core one which is quite actively maintained by the Homebrew team but it leaves a very good question why we maintain a mostly inactive MacVim Homebrew Tap.\nThe custom Homebrew Tap was before my time. Wonder if @splhack has input to why we added that in addition to the Homebrew Core formula?. @chdiza That's good to know! I didn't realize this would fix that bug but it makes sense looking at the code, as previously it was registering the string clipboard but not providing content for it, so maybe it led to some bad interactions across the difference programs.. This is a duplicate of #751. Basically, Mojave broke the renderer and we are trying to fix it. There should be a fix committed for it within this week.\nFor now, you could try to build this with macOS SDK 10.13 (High Sierra) if you know how to do that. Otherwise you could use the pre-built binaries in our releases page which are also built against 10.13 instead of 10.14.\nPlease leave further comments in #751 so we can have one place to comment on the issue.. I was just wondering recently when that bug got introduced recently so thanks for bisecting it. I'll look into it.. Wow\u2026\u00a0these are some really unfortunately hairy special cases. A couple comments for @ichizok:\n\n\nHas this bug been reported to Apple before? I played around with the Japanese IME with \"Windows-like shortcuts\" turned on, and seemed to me Ctrl-U/I/O would toggle hiragana/katakana/romanji when marked texts are visible, but when no marked texts are up I couldn't figure out what Ctrl-U/O are even supposed to do. Is this simply a bug where the IME is eating keys for no good reason?\n\n\nThe condition for checking whether we call interpretKeyEvents is getting quite long. Can you move the \"is this Ctrl-U or Ctrl-O\" logic to a separate variable to make it clearer? \n\n\nI'm wondering if we should make sure to only enable this special case for the Japanese IME, since I don't know if there are other IMEs there could for some reason use Ctrl-U and broken by MacVim's special handling. It would also make it more explicit that this is a special hack for one case instead of a generic thing. I think something like this would work:\n\n\nBOOL isJapaneseIME = [[[NSTextInputContext currentInputContext] selectedKeyboardInputSource] hasPrefix:@\"com.apple.inputmethod.Kotoeri\"];\n. I made those changes and it's merged now.. Sure np. I filed a bug with Apple, so hopefully they can address this (not going to share the radar number since it's internal to Apple anyway).. What's the actual text you tried to display? Do you mind pasting it in a comment within a code block? It's a little hard to tell where the actual wide character is.\nAlso, are you using Core Text renderer?. Thanks @ApolloTang. Did you turn off \"Core Text renderer\" to deal with the rendering issues in Mojave (#751)? Right now, the non-Core Text renderer doesn't deal with the CJK full-width characters in the exact same way as the Core Text renderer (which behaves more like how normal Vim) would.\nIn this case, I would recommend one of the following:\n\nUse the default font in MacVim instead of Inconsolata. That should work out of the box and the text in your code block is rendered properly.\nWait for #751 to get fixed and then enable Core Text renderer.\nJust enable Core Text renderer now and use a build of MacVim built using High Sierra SDKs. You can build it yourself or use our release (https://github.com/macvim-dev/macvim/releases).\n\nFor (2). I was hoping to get it fixed by last week but it slipped so we should really be pushing out the rendering fixes by the end of this week.. Please ping me if this doesn't get fixed by end of week.. #757 fixed Core Text renderer in Mojave. Please turn that on and try again. The non-Core Text renderer is mostly used as a backup and therefore not all text layout features and functionalities are as supported. If it fixed the issue please close the issue.. Yeah you are right it's not deployed yet. I'll let you know when the official formula is updated.. Homebrew should have been updated to snapshot 153. Feel free to verify.. Do you have any local settings? Can you try setting colorscheme to\nsomething else, let's say a light one like \"morning\" and see if that\nchanges the titlebar color? I can look into fixing it later today.\nOn Wed, Dec 5, 2018 at 12:53 PM grr notifications@github.com wrote:\n\nafter upgrading to 8.1.560 on Sierra 10.12.6, which does not have dark\nmode, my titlebar is now completely black. can't read the title text and\nit's also not as easy to grab the titlebar to move the window since my\ncolorscheme background color is also black:\n[image: screen shot 2018-12-05 at 14 51 01]\nhttps://user-images.githubusercontent.com/690894/49543237-45d5e600-f89d-11e8-9e9a-5f31346cebea.png\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/pull/791#issuecomment-444643089,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABKTqUACbRZDQhZUgDpo_nbsZtmxeWYXks5u2DIpgaJpZM4YywU0\n.\n. Thanks for the info. I think I know where the problem is but I would need to find a way to test this first.\n\nFiled #799 to help track this since this is a separate issue from dark mode tabs. Please leave further comments there.. > Just wondering: Is there a way to manually turn it on? I'd prefer to just use MacVim with dark mode and keep the rest of the system \"light\".\n@kkkrist Sorry but I would have to say probably not for now. MacVim currently supports a fair amount of options, and preferences like this is actually the source of a fair amount of bugs since it makes it harder to code and test. The colors are also toggled directly by dark mode so it would involve some work to refactor. If you use \"light mode\" for the OS the window frame will appear light anyway so it won't be completely dark.\nFeel free to file an issue for tracking though.. @genivia-inc Use a different colorscheme for now. There is a PR on this and there will be a release to fix this soon (https://github.com/macvim-dev/macvim/milestone/1).\nAlso please use #799 for tracking this. This bug is not due to dark tabs.. Closing as duplicate of #751. There should be a fix by end of week.. For ways of mitigating this for now, refer to the other issue, but you could download a binary from our releases or turn off Core Text Renderer for now.. This is a duplicate of #751, and PR #757 just fixed this. Closing.\n@arturoherrero  Just curious though what did you mean by \"losing the typography\"? You should be able to turn on Core Text renderer again (which is the default supported path) but I'm curious what the issue was in the non-Core Text renderer.. Ah ok. Yeah that looks about what I would expect. Hope the fix solved the issue for you.. @juliuszint How does UltiSnips not work? Please file another issue for that. Also there's a new version coming out that fixes Ctrl-C not working but it's hard to tell if it's related without more info.. @juliuszint Ah ok. Cool good to know. One less bug for me to fix.\n@s4y if you feel like it I would recommend making a pull request with \"[WIP]\" as a prefix to the title so conversations and discussions on your fix can be focused there. It's up to you though.. It sounds more like Cmd-T is expecting 2.3.7 to me. Did you rebuild the C components? One issue with the Cmd-T plugin is that the native component + ruby does mean there's more fussing needed to get it to work.\nYou can always do :ruby puts RUBY_VERSION in Vim to be sure what Vim is using.. Cool! Glad to see if working for you.\nI'm not sure why MacVim keeps using the 2.3 library. Setting rubydll should work and you can try setting it at runtime instead of in your vimrc to see if it works.\nAs for the versioning, Vim is usually compiled against a particular Ruby version, so when we build MacVim we do the same thing. Since we compile with +ruby/dyn we load the library dynamically so that users who don't care about Ruby don't have to deal with it. Technically, the library you load in should match the version Vim is compiled with. See :h ruby-dynamic:\n\nUnix ~\nThe 'rubydll' option can be used to specify the Ruby shared library file\ninstead of DYNAMIC_RUBY_DLL file what was specified at compile time.  The\nversion of the shared library must match the Ruby version Vim was compiled\nwith.\n\nThat said on my machine I find that it works whether I use a 2.3 or 2.5 library, so the changes may not be big enough.. I'm going to close this out, since you seemed to have found a way around it. MacVim does get built with 2.5 right now so I'm not sure why you couldn't get it to work, but you could load any DLL you want using the rubydll option.. @aeciolevy-ven Sorry what's the issue you are seeing? Have you tried setting rubydll?. MacVim is compiled against 2.5.3 as mentioned (it will be compiled against 2.6 in the upcoming release since 2.6 has been released in December 2018), so you should use that, rather than an older 2.3.7 version.\nIf you follow https://github.com/macvim-dev/macvim/issues/798#issuecomment-444758118 and do :ruby puts RUBY_VERSION in MacVim what do you see?. @dond-- did you mean something like :set transparency=50? That should still work. This current issue is related to the change that tried to keep it working under the new renderer. \nWhat OS are you using and are you on Homebrew or official binary release? Also can you paste the version string?. Yes you are right the default behavior has changed since the window color is now set to the same color as the color scheme background color. Let me play around with it and see which way is the desired bahavior (feel free to leave your opinion on this). Let\u2019s just use this issue to track for now. They are  related. . I actually misspoke about the transparency issue. It is indeed a bug with multiple stacked layers causing you needing to set transparency much higher for it to be effective. I will need to investigate how to fix it properly and it\u2019s Mojave only. \nAs for the title bar not showing, it\u2019s a sort of different issue with us using a deprecated API that will be fixed soon (it only affects Sierra or below). I will need to test more to make sure it works well on all the supported OS versions.\nTab \u2018X\u2019 button not showing until you hover over it: That\u2019s a different issue and has always been the case. It\u2019s fixed in Mojave tabs but feel free to file a different issue for fixing it under pre-Mojave. . The issues should now be fixed. The Sierra titlebar should look like they did before, and Mojave transparency will blend as expected (e.g. set transparency=50 means half-half).\nThey will be released in the next update. Use the milestone linked in this issue to track the progress on that.. Sorry but I don't speak Arabic so it's a little hard for me to tell what's correct and what's not. Can you take screenshots of what you expected to happen (vim 8 terminal), vs what you saw in MacVim?\nAlso, when you say Vim 8 in terminal, what Vim do you mean specifically? Do you mean system-provided Vim? Or MacVim but in terminal?. What's your macOS version? Do you have any custom preferences that you set (e.g. CGLayer)? Can you try launching it with mvim -u NONE -U NONE?. @LukeOrgana hmm Core Text renderer is the default and should work. What color scheme were you using and do you have any transparency setting?. @LukeOrgana I couldn't reproduce the issue, but I'm suspecting it's happening due to your auto-load session script that's triggering some other behaviors. I suspect it's a similar issue as #804. Do you have non-native fullscreen set?. I made pull request #811 which resolves this issue (I think). I suspect both @matsm and @LukeOrgana  have the old deprecated MMUseCGLayerAlways set to YES which causes this problem. I fixed it to properly ignore this flag in Mojave. (It's unfortunate that we used to tell people to set MMUseCGLayerAlways as a clutch around misc rendering issues. Moving on, there should be no hidden setting that you need to set to make rendering work)\nThe next release will have this fix. Meanwhile, you should do defaults delete org.vim.MacVim MMUseCGLayerAlways in Terminal which should fix this issue for you. I suggest leaving Core Text renderer on. It's enabled by default because it's the most fully featured and the officially supported method.. > When exchange two windows in macvim\nWhat does that mean in particular? What Vim command?. I cannot give too much insight into YCM since I don't use the plugin. Do you know how YCM selects python2 versus python3 in Vim? Is it by magic or manual configuration? That may shed some insight why it switched from Python3 in previous MacVim version to Python2.\nDoes Python3 still work for you in MacVim in general? You can type :python3 print('testing') to see if it does. It could be that it's now linking to a different version from what your machine has installed. Either way can you paste what you see when you do :set pythondll? and set pythonthreedll?. Yes I just saw that line after posting. I will fix that. Thanks.. There are two bugs in that original PR. I had to fix both :). I can repro. Will work on fixing that. I only saw this happening under non-native fullscreen. Just to confirm that's your setting as well?. This will be fixed in a later update when I fix misc menu issues. Basically the default Cmd-E (search text in selection and share to find pasteboard) is supposed to only take over when in visual mode like before, but right now it is overriding default key bindings even in normal or other modes.\nFor now, use the following in your gvimrc (not vimrc) to unmap the default <D-e> mapping:\nmacm Edit.Find.Use\\ Selection\\ for\\ Find key=<nop>\n\nThis should let you map your own <D-e>. That's odd. Can you type defaults read org.vim.MacVim | grep 'MM\\|SU' in terminal (from this page) and paste the result here?\nDo you also have Python/Ruby/Perl/Lua installed?. @minghz Your issue is duplicate of another bug #801 . It's fixes in master and will be released soon.\nTo get around that without needing to update to the new version, do defaults delete org.vim.MacVim MMUseCGLayerAlways (it's described more in detail in the linked issue).. @adam-ah Hmm sorry it's a little hard to figure out what's wrong. Can you try vim --noplugin (run Vim without any plugins) and vim -u NONE -U NONE (run Vim without any plugins and vimrc) to see if that fixes the issue?. Also, if you could follow the steps listed here that would be awesome too.. Closing as there have been newer versions of MacVim released since this issue was filed and I don't have more information to debug. File another issue if you still see MacVim crashing.. @eirnym Are you sure you didn't accidentally check the checkbox that says \"Automatically download and install updates in the future\"? There were no changes made to the updater (Sparkle) AFAIK.\nYou can check by typing defaults read org.vim.MacVim SUAutomaticallyUpdate in the terminal. If it does say YES, and you want to remove it, type defaults delete org.vim.MacVim SUAutomaticallyUpdate in the terminal.. I'll expose it so the user will see it in the preference pane. I agree it's annoying that there's no user-visible way to undo the \"always downloading updates in the background automatically\" checkbox that only shows up in the update dialog box. (Since that dialog box doesn't show up when auto-update is enabled).. Duplicate of #799. Will be fixed soon, track it using https://github.com/macvim-dev/macvim/milestone/1.. Hi @marcknock, we appreciate the thought and I'm glad you like MacVim. Currently MacVim isn't really set up to receive donations or use the resources to hire developers, and I prefer keeping MacVim purely volunteer-based for now. As of now the most precious resource that we lack is time. If anyone want to contribute we always appreciate people looking through the issue list and submitting pull requests!\nSince MacVim's core goal is to be a native port of Vim, I feel obligated to link to this: https://www.vim.org/sponsor/\nThanks.. It's related to the new Mojave renderer. Will need to take a look. Probably some de-generate case with tons of text draw calls all done at once.. As tagged in this issue, there should be some basic improvements to :version/:! by next snapshot (154), just to alleviate the situation, and I'm hoping to be able to revamp the renderer by snapshot-155.\nWhen the new renderer was implemented it was mostly to make Mojave work again to unblock people so I didn't really have time to go and improve it, so now that it's somewhat usable that will be next.\nI have looked at iTerm2 before and it's not a drop-in replacement and their Metal renderer doesn't support certain features like ligatures or transparency. My gut feeling from browsing through it is it would take more time to use it as well as re-adding features we have always supported than writing a new Metal renderer from scratch. The question is whether we want to completely accelerate the text drawing using a glyph cache (which would be faster but harder to support things like ligatures) or simply use the GPU to accelerate scrolling and compositing.\n. This issue should now be fixed. It's not a general fix for the renderer but will make commands that echo as fast as before now (e.g. :ls, :version, :!, :echo).. Duplicate of #799. Fix in snapshot 153.. I'm imagining you are installing Python 3 from the website and therefore it's in /Library/Frameworks/Python.framework/Versions/3.6/Python?\nMacVim's auto-detection code for Python has been moved to 3.7 from 3.6 (see https://github.com/macvim-dev/macvim/blob/master/src/MacVim/vimrc#L49). What you are seeing is that it failed to find an installed 3.7 Python and therefore reverts to the default (which is HomeBrew for MacVim).\nTo fix this, you could do one of the following:\n\nInstall Python 3.7\n\nPut these in your vimrc:\nset pythonthreedll=/Library/Frameworks/Python.framework/Versions/3.6/Python\nset pythonthreehome=/Library/Frameworks/Python.framework/Versions/3.6\n\n\nFor option 2, technically since MacVim's binary release is compiled against 3.7 it's best to use 3.7, but I haven't found using a slightly older version to be much of an issue.. Note that the release notes in snapshot 150 said \"Python 3.7\", so it was kind of a mistake to automatically link to 3.6, and subsequent release notes didn't make clear that was upgraded. I will try to make sure that's in sync and communicated in release notes in the future.. Sorry I didn't quite understand from your descriptions. Are you saying the frame rate when scrolling down is slow? How slow? Are you using the GUI version?. Closing as duplicate of #796 . > fault of Benji Fisher\nNow I'm kind of curious where that line came from\u2026. The fix looks fine, but let me look up this Mojave security change and test it out first.\nAlso, how exactly does nvALT work? It's MacVim controlling nvALT using AppleScript? Is it just a series of :!osascript calls? I wasn't quite understanding how MacVim understands to send AppleScript calls to other applications.. Quoting from #821:\n\nGood question! Did some digging and found this:\nMacVim, when compiled with the odbeditor option (:h odbeditor has more), implements the ODB Editor Suite, which is a protocol for external editors based on Apple Events. nvALT uses that protocol to leverage MacVim as an external editor. After launch, MacVim uses Apple Events to notify nvALT when the file is modified or closed.\n\nThanks! Yeah that makes sense. \nFor the wording, can you reword it slightly? I'm thinking something like \"MacVim uses Apple Events to allow you to communicate with other apps using Apple Script, and to support working as an ODB external editor\".\nThese \"ask for permission\" texts are usually designed to allow the app to justify itself why it needs that permission, rather that stating again what the permission is to the user. I think the only times MacVim would send Apple Events should be if it's an ODB external editor (this case), or the user uses Apple Scripts manually (either using :!osascript or Vim 8 terminal). It doesn't matter much, but might as well try to word it more accurately.. I'll need to merge it in tomorrow since there are some merge conflicts and I don't have time to resolve it now.\nThe last merge was 9 days ago so this is a fair criticism but I won't commit to any cadence higher than roughly weekly. Also, binary release is currently the primary way MacVim is released (which I plan to make ~monthly), so you should expect that to be the upper bound to how long it takes for a change from Vim master to get merged to MacVim.. Please file this issue with Vim itself (https://github.com/vim/vim/issues), as this is not MacVim-specific.\nAnyway, I think it's not working for you because you need to change the files in $VIMRUNTIME/spell/en/ rather than $VIMRUNTIME/spell/check/.\nAlso, why do you use didn\u2018t instead of didn\u2019t?. That seems fine? Here's what you get when you type :help -p:\n*-p*\n-p[N]       Open N tab pages.  If [N] is not given, one tab page is opened\n        for every file given as argument.  The maximum is set with\n        'tabpagemax' pages (default 10).  If there are more tab pages\n        than arguments, the last few tab pages will be editing an\n        empty file.  Also see |tabpage|.\n        {not in Vi}\nBy default you only get ten tab pages, but you can adjust that by setting a different tabpagemax.. Seems like the issue is just that you want to run zsh in MacVim? set -o is more a shell feature shouldn't be MacVim-related.\nHow are you setting zsh as the default for \"run zshell in my normal terminal\"? If you are doing it the proper way (see this for how to set zsh as login shell) MacVim will pick that up automatically.\nOtherwise you can manually set the \"shell\" option. See :help :terminal and :help 'shell'.. Closing unless there are further questions.. Ah ok. Cool glad to see it work for you! I think maybe the issue is that because zsh is not being used in the interactive shell mode your .zshrc didn't get sourced.. Thanks. I have been meaning to look into this. Will merge this in once it passes Travis. It's unfortunate we have to do this though.. This is not really a bug per se and is as designed.\nWhen in full screen the screen size is usually not a precise fit for how many number of lines you want to fit (depending on font size). In the snapshot 151 screenshot above you can see that there are black bars and that the tabs are not top-aligned. In 152 it is fixed so that you don\u2019t see black bars (instead the background is filled with background color, read the release notes for it) and that MacVim is always top aligned so the tabs would look right. This does mean the command line is moved up a little bit.\nNo matter what choice you make in terms of alignment (center or top aligned, black bars or filled with background color) it\u2019s going to look a little weird so it\u2019s just one of those decisions we have to make. \nIf yoh open GVim on Windows or Linux (GTK) you would actually see similar results when you maximize the window (the command line is not flushed against the bottom).\nThis is also similar to set guioptions+=k. . Your change seems ok, but now I don't remember if I have seen this error before and why no one has complained about it. Does MacVim still run when you see the error?\nMy laptop is actually under repair so I won't be able to get to this PR and try it out for a week or two.. Ok I have merged your changes! I couldn't repro the issue you reported though, but I do remember seeing it before. It could be because I upgraded to Mojave, or other reasons. If you have more insight on how you are launching mvim or the exact sequence I would be interested to hear it. Either way this is a cleaner version of the logic anyway.. Yes. It's an unfortunate part of how Vim interacts with Python. See also #760.. What do you mean you want the \"-v\" mode? What's the actual issue you are trying to solve here?\nThis is the docs for -v:\n-v        Start Ex in Vi mode.  Only makes a difference when the\n        executable is called \"ex\" or \"gvim\".  For gvim the GUI is not\n        started if possible.. You shouldn't need the \"-v\" flag as described in that article.\nWhat Chinese input method are you using and how is it not working for you? You are using MacVim the GUI app right (i.e. not in terminal)? Asian input methods should work in MacVim so I'm curious which one you are using.. You can try to disable \"Draw marked text inline\" in the advanced preferences pane and see if it helps. I will need to take a look to see why it's behaving this way once I get my laptop back.. I'm actually still not 100% sure what the issue you are encountering is. If you could take screenshot or a recording I think that would help a lot, thanks. (And also what preferences you have set). Thanks. I think we should still figure out why the flaky tests seem more flaky in MacVim though. I think the startup time for the app may be the reason but will need to look into it more.. This is a duplicate of #815.\nThe CoreText renderer has some unfortunate performance issues now in Mojave. This issue should be resolved in the next snapshot or the one after that (hopefully).\nI do recommend against turning off CoreText renderer but it works as a temporary measure.. Hmm I\u2019ll need to take a look. Coincidentally I was wondering whether people use the ligature feature. Now I know.. That's what @chdiza is saying, yes.. What's the issue here? From the documentation (type :help 'eol'):\n\nThis option is automatically set or reset when starting to edit a new file, depending on whether file has an  for the last line in the file.  Normally you don't have to set or reset this option.\n. Closing as this isn't really an issue.. I think you mean 8.1-154, not 153.\n\nIt's unfortunate but seems like it's a bug in Vim, and it just fixed the issue in 8.1.0875 in https://github.com/vim/vim/commit/94688b8a2a1fc3d6c8e49151b9533ec1c0a6757f (MacVim included only up to 8.1.0873). I will see if I can find other regressions in the latest snapshot 154 update, and then push a fix for this.. > Also sorry if I reported this in the wrong project\nThat's fine. I would not have known about this issue otherwise. Vim doesn't really have a release branch other than the 8.0/8.1 versions so when this kind of issues pop up we just need to make a quick release to address it.\n\nI was getting the version from Homebrew, and it doesn't update when vim does an auto update.\n\nHmm\u2026\u00a0did you manually enable auto-update? I would imagine the Homebrew formula by default disables it just so you can update through Homebrew instead. I'm not sure if Homebrew likes the app updating outside of it.. Ah ok. That will do it.\nYeah\u2026\u00a0I don't think the interaction there is well thought-out but you should probably rely on Homebrew to update MacVim instead of using the Check for Updates functionality. I may need to consider disabling that function completely when MacVim is managed through Homebrew.\nEdit: Anyway, this is not a big deal. I was just curious.. Sorry I have been busy and delayed in pushing out the fix. It should hopefully be out be this weekend.. Fixed in latest release https://github.com/macvim-dev/macvim/releases/tag/snapshot-155. Seems like e40b9d47bf8f8f716d3ef5a95c8ecbbdc0a501f9 (v8.1.0834) broke this. It could either be a bug in Vim or a merge error on MacVim's side.. I'm still looking into this, but the CPU usage bit is interesting info. Just for context MacVim relies on the GUI codebase in Vim itself and basically works as a special type of gVim. That's why when Vim's GUI code goes through refactor like this, sometimes bugs creep in despite a clean merge since we have to re-do some of the changes downstream to match the upstream changes.. Yeah this MacVim binary release upgraded the ruby version. Glad you got it working.. That\u2019s odd. Snapshot 154 contains #827 which fixed existing scroll bar issues but maybe it didn\u2019t fix everything. I will take a look.. This should be fixed in snapshot 155, which is scheduled to be released soon to fix some regressions. The issue currently only shows up in pre-Mojave CoreText renderers, which is why I didn't catch it.. Yes that's the plan. We just need a generic way to disable Sparkle updater when building/configuring MacVim that MacPorts and Homebrew can both use.\n\nThe same procedure is done for almost all software included as well.\n\nDo you mean other software packaged via MacPorts? Do you have any examples just for reference?. I see. Thanks for the info. Seems like they actually have quite a few patches! It will be good to remove the reliance on custom patches though and use compile flags if possible.. I don't use Homebrew Cask so my knowledge here is limited but seems like the \":mountain_lion\" dependency stuff has been removed in https://github.com/Homebrew/homebrew-cask/pull/57235. I'm not sure why you see that. Do you need to update your brew formulas so you pick up this change?\nOtherwise file an issue at https://github.com/Homebrew/homebrew-cask/issues. Ok. Can you close the issue then?. This is a general Vim problem, in that you need to use the file format specific to the OS for your vimrc to work (it doesn't do auto-conversion unlike editing a file). If you launch Vim or MacVim (using the mvim alias) from the terminal you will indeed see the correct error messages about the ^M appearing in your vimrc. If you are launching MacVim directly then it won't report these error messages to the user similar to how gVim works.\nIf you are sharing your vimrc using Git you probably want to use Git's core.autocrlf to auto-convert the newline format for you. Otherwise you will need to make sure to convert the file yourself (just open the vimrc file, and do set ff=unix / :w).. Huh, not sure why it worked on the Debian Vim honestly. There may be some subtle difference there. Anyway, closing the issue since you have resolved the problem.. What OS version are you running, and what are you preferences? You can get that by following the steps here by typing the following in a terminal:\ndefaults read org.vim.MacVim | grep 'MM\\|SU'. Unfortunately I am having some troubles reproducing this probably since I'm using Mojave 10.14. How exactly do they scramble? Do they only happen when you are scrolling? Do you use fullscreen at all? Are you sure you only saw this starting in 8.1.873? Do you remember what version you were using previously?\n\nJust a side-note, you may want to use Homebrew to update if you are using Homebrew to insteall MacVim. In general Homebrew doesn't really like it when apps update themselves. I have a TODO to make MacVim not auto-update itself when managed by a package manager (#849) but it's not done yet.. Sorry I still couldn't reproduce this. I may need to hunt down a proper 10.13 installation if you keep seeing this.\nJust a couple things to help me debug if you have time:\n- What exactly does \"scramble\" mean? Does it go back to normal or is it just permanently hosed? Seems like it only happens with tabs too?\n- And you are sure only the recent update to 8.1.713 broke it?\n- Do you use fullscreen?\n- Do you have tools that manage windows for you like Divvy or Magnet?\n- Can you run with mvim -u NONE -U NONE and see if this still happens? A related question is what guioptions do you have set.\nHopefully this could help nail it down.. Thanks for the pointer. I reproduced the issue! It is indeed scrollbar related and in particular switching tabs causes one of the scrollbar to hide itself, which triggers the bug.\nI will need to look into it, but for now, a workaround I would suggest is do set guioptions+=k. I actually had it set in my vimrc and forgot to unset it when testing which is why I didn't reproduce this. For now, I recommend just doing this while I look into the issue and push out a fix.\nOn a side note, I think guioption 'k' generally works better than not having it set that you may not want to go back anyway :). Copying status messages and command-line texts are currently not supported, because Vim itself doesn't really let you do that. It's possible to try to make that work for MacVim but this could be one of those things that is harder than it looks to implement, so probably not in the near term.. Actually, I lied. You can copy those texts using modeless selection (:h modeless-selection). I think it should be theoretically possible to get Cmd-C to automatically use modeless-selection's yank when it makes sense but I will need to look into it.. Also, just in case it isn't clear, you can press Ctrl-Y (instead of Cmd-C) to copy that selection to system clipboard as it's a modeless selection. This works in all versions of GVim, not just MacVim.. I haven't had time to look into the PR yet, but thinner text is usually a sign that the font smoothing / subpixel rendering (which is deprecated in Mojave) isn't properly configured.\nAlso, I think we may want to make sure this runs faster than the 10.13 pre-Mojave renderer if we are going to remove that. I have checked out other similar types of renderer before and they don't usually perform faster than the native scrollRect: implementation if we are updating the texts in software. Best way to test is using a high-res Retina screen at fullscreen and just scroll a full page of text.. @chdiza I think the bar is this renderer wouldn\u2019t degrade rendering. It\u2019s been on my todo list to take a screenshot and do unit tests against known rendering results but it\u2019s tricky to do it right. . Hi, just to make sure you are using the default macvim colorscheme right?\nThe latest release switched to fully built in Mojave so the dark mode detection automatically kicks in (which sets a different set of MacTextColor/MacTextBackgroundColor/etc and sets background to \"dark\" by default). I probably should have mentioned that in the release notes.\nThe macvim colorscheme does seem to have a bug in that it assumes the system colorscheme to be in light mode which I need to fix.\nFor a temporary solution you can manually invoke this or put it in your vimrc (do it after loading the colorscheme if you are doing that):\nhi Normal       gui=NONE guifg=Black guibg=White\nhi Visual       guibg=#72F7FF\n\nIt actually seems like there's some issue with the default macvim colorscheme when you have using normal Mojave mode but setting background to \"dark\" too (the text selection colors are off). Probably need to fix that as well.. Sorry, I actually meant the gvimrc, not the vimrc. If you don't have one, you can make one at ~/.gvimrc and put those lines in.. This should be fixed in snapshot-156 without the hack.. Seems like v8.1.0915 (https://github.com/vim/vim/commit/a787019518a540a7b4d0070f15467931b870ac89) broke this. I will file a pull request with Vim to fix this.. I filed https://github.com/vim/vim/pull/4016 so hopefully it will get merged in. The next version (snapshot-156) should have this fix. Meanwhile you could use an older version while waiting for this to get fixed (on Vim, then merged to MacVim).. This is currently fixed in Vim and the next version will have the fix. If you want to go back to 8.1.0950, you can do set nofsync but it's a temporary solution. If you are happy with the previous version maybe just use that for now until the next update.. Hmm I'm having some issues reproducing this. It almost seems to me that someone is doing a variable substitution for $config here. What if you just name your file test_$_file and test_$var_file?\nAlso, what OS are you using? Does this not happen if you load the file from command line (i.e. mvim <filename>)? Do you have any plugins that you think could interfere with this?. Yes I did follow the steps literally which is why I asked the followup questions to help identify why I couldn't reproduce the issue. Did you have a chance to test whether file names with $ work?\nAlso, what macOS version are you using? Did you only see this issue when you double click on the file or when you drag the file to the dock's icon too?\nEdit: Actually, nevermind. I reproduced it! I will need to take a look.. Closing this issue as it's fixed. Vim introduced a tightening on VimScript behaviors and disallow assigning to a: parameters which is why some old versions of plugins broke.. I couldn't reproduce this. I searched online and seems like you are using https://github.com/ntpeters/vim-better-whitespace? I downloaded the plugin and it still works fine.\nThe variable (exclude_current_line_eol_whitespace_pattern) that your logs show seems to indicate it's an old build as it was removed in https://github.com/ntpeters/vim-better-whitespace/pull/100. I would suggest updating the plugin and/or re-downloading it.\nIf the issue persists, try running MacVim with mvim -u NONE -U NONE (in general it's a good idea to do so to help isolate problems) and that fixes the problem, you may want to file the issue with the plugin's repo.. Looking more into it I'm pretty sure you just need to update your plugin. Vim has recently introduced a new behavior that tightened the restrictions on writing VimScript, and you can no longer assign to a: variables. The older version of the plugin has a bug of writing to a: that gets exposed in the new version of Vim.\nIf you can confirm the new version of the plugin fixes the issue, please close the issue.. Closing, since this can be fixed by updating plugin.. So, you have a plugin that calls Python 2 but you want to use Python 3? How does your plugin invoke Python and does it have a Python 3 mode (or does it use :pyx)? Because if it relies on Python 2 then I would imagine you need to disable that plugin\u2026\nAnyway, the main Python detection change that happened was 8.1.0950 (https://github.com/vim/vim/pull/3995). It fixed :pyx to work more properly so maybe that's the trigger of the issue.\nAlso, remember that a simple has('python') will trigger a Python 2 load and invalidates Python 3.\nYou could also do set pythondll in your vimrc to force Python 2 to not load, but as I said it's better if you find out what the offender is and don't load that plugin.. > it wasn't me, I think it is one plugin call for python2 and the other call for python3.\nSure, but my point is if you have a plugin that only relies on Python 2, you may need to disable that plugin.\n\nWill MacVim allow plugins use their own version of python in the same instance ?\n\nSee #760. This isn't really a MacVim specific issue as Vim just decided to only allow loading one version of Python in. You have to try really really hard to run both versions together and I don't recommend it, since plugins should have migrated to using Python 3. For example, YouCompleteMe's README page claims to support both 2 and 3.\nMy guess of what actually happened to you is that one of your plugin has a choice to use either Python 2 or 3, and prioritized using Python 2, which IMO is a mistake.\nIn your vimrc, just call has('python3') before any plugin has a chance to do anything (look at :h has-python). This will actually load in Python 3 and disable Python 2 from then on (if you call echo has('python') after that you will notice it returns 0). This should solve your problem. If any plugin barks afterwards, that plugin is the offender that only works with Python 2.\nNote: A newer way of handling 2 vs 3 is the :pyx command which will use either python version. Your Python code does need to be compatible with either version though.\nAlso see :h python-2-and-3. Ok what's the issue here? Can you elaborate?. Closing since unclear what the issue was.. Hmm what's the issue here? What shell are you using and what were you expecting?. Also, do you have set macmeta? Does setting that help?. Oh I see, basically the shell you were using was expecting Meta-<key> sequence to be encoding as <Esc> + <key>, which is how most shells work, but in GVim (and MacVim under macmeta) it uses 8-bit encoding (do :h xterm-8bit) so it's not really compatible.\nThis ties to a larger ongoing issue about how Vim should be handling meta keys and would need some thought and collaboration with Vim to figure this out. I think for now you will need to keep your workaround.\nKeeping this issue open for tracking.. Reproduced the result. Will look into it. Thanks for filing the bug.. What kind of Mac are you using? Laptop or desktop? Escape key works for me so I'm wondering what your setup is.\nA few more questions:\n Can you try to run MacVim using mvim -u NONE -U NONE and see if the problem persists?\n Also, what kind of keyboard layout/language are you using?\n* Can you follow the last steps in https://github.com/macvim-dev/macvim/wiki/Reporting-an-Issue  and show what MacVim preferences you have (defaults read org.vim.MacVim | grep 'MM\\|SU')?. Hmm\u2026\u00a0just taking a guess but I'm guessing Karabiner Elements is not playing nice with MacVim in this case. Maybe even if it's disabled it's causing MacVim to not receive the keys.\nOther than that I can help give a few shots in the dark:\n\nOpen MacVim and go to insert mode. Go to a terminal and run open /Applications/MacVim.app && osascript -e 'tell application \"System Events\" to key code 53'. It should switch back to MacVim and insert an Escape key which should bring it back to normal mode. (You may have to go to System Preferences \u2192 Security & Privacy \u2192 Privacy \u2192 Accessibility, and enable Terminal)\nAlternatively, show the keyboard and emoji viewer in the menu bar, and select Show Keyboard Viewer in the the menu. Try to enter an escape key through the virtual keyboard there.\nGo to System Preferences \u2192 Keyboard \u2192 Shortcuts and see if you see MacVim there. Also, double check System Preferences \u2192 Security & Privacy \u2192 Privacy \u2192 Accessibility and see if random utility apps could be hijacking the keyboard.\n\nIf that doesn't work you could\u2026\u00a0just reinstall MacVim and grab the latest build . It should be pretty painless and sometimes that may clear the state.\nHopefully that helps.. Ok, good luck. If you find anything please post here so we have reference what could go wrong with external tools. I'll probably close this issue if I don't see any replies after a while.. What's Code::Stats? Is that https://codestats.net (from casual online search)? What does it do?. Closing this because this is an issue with the plugin. Discussions should be done there instead.. I will need to look into this.. MacVim uses Vim\u2019s \u201chardcopy\u201d command (see :help hardcopy) to print and that command doesn\u2019t support folds. I suggest following the recommendations here (either delete folded lines or use :TOhtml): https://stackoverflow.com/questions/27504394/how-to-print-hardcopy-with-folds-in-vim\nOtherwise feel free to open an issue at https://github.com/vim/vim/issues\nSince this is not MacVim-specific I will close this issue shortly.. Can you generate some info following https://github.com/macvim-dev/macvim/wiki/Reporting-an-Issue ?\nIn particular, the most important information is:\n\nOS version\nWhether you have custom vimrc or not (you can try launching MacVim with mvim -u NONE -U NONE\nWhether you have custom MacVim preferences defaults read org.vim.MacVim | grep 'MM\\|SU'.. If you reproduce the issue can you use \nhttps://github.com/macvim-dev/macvim/wiki/Debugging to generate debug logs?\n\nAlso, see https://github.com/macvim-dev/macvim/issues/875#issuecomment-472274472 for more info you could provide to help looking into this easier.. Thanks for reporting. Looks related to the scrolling performance improvement done in 155. Will need to take a look.. This is not MacVim specific, as the terminal emulator is a Vim feature. See :h terminal-unix for more details:\nUnix ~\n                            *terminal-unix*\nOn Unix a pty is used to make it possible to run all kinds of commands.  You\ncan even run Vim in the terminal!  That's used for debugging, see below.\n\nEnvironment variables are used to pass information to the running job:\n    TERM        the name of the terminal, from the 'term' option or\n            $TERM in the GUI; falls back to \"xterm\" if it does not\n            start with \"xterm\"\n    ROWS        number of rows in the terminal initially\n    LINES       same as ROWS\n    COLUMNS     number of columns in the terminal initially\n    COLORS      number of colors, 't_Co' (256*256*256 in the GUI)\n    VIM_SERVERNAME  v:servername\n    VIM_TERMINAL    v:version\n\nBasically, just do :let $TERM='xterm-256color' before you launch the terminal emulator. (This is different from :set term). I'm actually not 100% if we should expose a feature test for this, but I guess if toolbar is already one, why not.. In the previous review there was a comment about potentially having too many default Touch Bar buttons. I addressed this in the pull request descriptions, but I basically removed all the original ones and just added a full screen button that can toggle icon depending on what state it's in. I think most users will prefer a close to empty Touch Bar for customization so it's not worth having too many defaults (I just think having a couple that works well is a good thing to entice users to learn how to customize it).. I could do that, but now I'm just wondering whether we even should check for this, or just remove the macro usage. This check only helps people build (not use) MacVim on older platforms but I presume most people who want to contribute to or build MacVim would want to have recent versions of macOS and Xcode. Are we going to keep supporting older versions of macOS development tools? I did notice the fullscreen code still checks for MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7 which seems crazy to me. (Most other code checks for MIN_ALLOWED, not MAX_ALLOWED)\nAnother important thing to check is runtime checking to make sure the program won't crash on users with older devices. I think the current implementation actually doesn't check that\u2026 addMenuItemWithDescriptor will call addTouchbarItemWithLabel which will start initializing NSCustomTouchBarItem which I think will crash in pre-Sierra machines (I don't have one to check and I'm not super familiar with Cocoa / Objective-C). I think we just need to inject some NSClassFromString(@\"NSTouchBar\") checks before we start initializing the touch bar items, or delay making the touch bar items until we are in makeTouchBar which will only get called in systems supporting the touch bar as a delegate.. That's fair. I just added the better compile + runtime checks and pushed a change.. I think we should just remove the Summary section, as it's not really part of the license.. Can you add a separator here, like ====? Just to make sure the Vim license is separate from the manuals.. ",
    "okuramasafumi": "@splhack No that doesn't work.\n. This problem was finally fixed by uninstalling python from homebrew (brew rm --force python).\nAfter additional research, it turned out that CMake couldn't find the corresponding pythonlibs and pythoninterp.So apparently it was not a problem of MacVim. Sorry.\nI also switched to official formula since I still want to override system vim with MacVim.\n. I started tmux with -f option pointing empty file, but the result was the same.\nI use tmux version 2.3.. @chinhau5 You're right, using reattach-to-user-namespace solves the problems magically.\nI think I can close this issue by mentioning using reattach-to-user-namespace, because it's so simple to install and use it.\nFYI, tmux's copy and paste through clipboard works fine without reattach-to-user-namespace, which, weirdly, is the main purpose of the program. So the root cause might be how macvim gets key input from OS.. ",
    "dliessi": "With latest master branch, this is the output of ibtool on the three .nib files on my system (10.6.8, Xcode 3.2.6):\n$ /Developer/usr/bin/ibtool --strip MainMenu.nib --output-format human-readable-text MainMenu.nib\n$ /Developer/usr/bin/ibtool --strip FindAndReplace.nib --output-format human-readable-text FindAndReplace.nib\n$ /Developer/usr/bin/ibtool --strip Preferences.nib --output-format human-readable-text Preferences.nib\n/* com.apple.ibtool.errors */\nPreferences.nib: error: ibtool could not strip \"Preferences.nib\" because it is not a valid Interface Builder document.\nOpening FindAndReplace.nib and MainMenu.nib with Interface Builder works correctly, while opening Preferences.nib gives this error: Interface Builder was unable to determine the type of \"Preferences.nib\".\nBefore commit 1497587763d3279073d7c54614fa700b3d736d1f also Preferences.nib opened fine in Interface Builder and was processed correctly by ibtool.\nProbably that commit introduced something incompatible with Xcode 3.2.6 (which is the latest version freely available for 10.6).\n. Yes, but you need a payed developer account in order to get it on 10.6.\nMacPorts expects Xcode 3.2.6 on 10.6 because of that.\n. @rhendric both Interface Builder and ibtool open/process the file without errors.\nDo I need to check anything inside the file?\n. ",
    "mawimawi": "After a lot of trying out, testing, fishing in muddy waters, hair pulling and swearing I gave up. Right now I'm starting to use PyCharm with the vi key bindings (so I have at least some of my programming motor skills still working) for Python development. Maybe I'll try again in a few months.\n. ",
    "mario-grgic": "Apparently, even though \"use core text render\" is selected the setting is not taken into account. Turning it off then on ( restarting vim each time ) fixes it. \n. This is a bit annoying, since native full screen mode does not return focus to terminal if you launch MacVim GUI from the command line and then ext (I diff files in MacVim GUI and do it in full screen to see files side by side). \n. Interesting. I can't reproduce this. What version of MacVim do you have? I'm on MacVim 8.0 patch 8, and everything except non-native full screen is working fine.\n. I had to include MacVim.h in a few more files:\n```\n$ git diff\ndiff --git a/src/MacVim/DBPrefsWindowController.m b/src/MacVim/DBPrefsWindowController.m\nindex 814900a..577dc0f 100644\n--- a/src/MacVim/DBPrefsWindowController.m\n+++ b/src/MacVim/DBPrefsWindowController.m\n@@ -3,6 +3,7 @@\n //\n#import \"DBPrefsWindowController.h\"\n+#import \"MacVim.h\"\nstatic DBPrefsWindowController _sharedPrefsWindowController = nil;\ndiff --git a/src/MacVim/MMApplication.m b/src/MacVim/MMApplication.m\nindex 7f48bfd..e4fae5a 100644\n--- a/src/MacVim/MMApplication.m\n+++ b/src/MacVim/MMApplication.m\n@@ -14,6 +14,7 @@\n  /\n#import \"MMApplication.h\"\n+#import \"MacVim.h\"\n@implementation MMApplication\ndiff --git a/src/MacVim/MMCoreTextView+ToolTip.m b/src/MacVim/MMCoreTextView+ToolTip.m\nindex e0989cc..7b51db1 100644\n--- a/src/MacVim/MMCoreTextView+ToolTip.m\n+++ b/src/MacVim/MMCoreTextView+ToolTip.m\n@@ -20,6 +20,7 @@\n  */\n#import \"MMCoreTextView.h\"\n+#import \"MacVim.h\"\n// Below is the nasty tooltip stuff -- copied from WebKit's WebHTMLView.mm\n```\nBut after that MacVim builds successfully.\n. First, the problem is with command line version of MacVim not GUI (problem is that command line MacVim invokes GUI in the background). So invoking GUI version of MacVim is pointless.\nSecond, you must have filetype detection on or else omnifunction is not set for any file type. So, no I cannot reproduce it with the suggested options since there is no omnifunc defined with those options. \nNote that omnifunc is set by Vim's default filetype plugin located in \n/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin/python.vim\nSo, if I rename my ~/.vim directory I can still reproduce this. It is not a third party plugin that I may have installed or anything like that.\n. Yes, as mentioned in the original report, if I compile vim (not macvim) from source and install in /usr/local/bin the problem is not there. But then again this vim is built without GUI support. And as mentioned already python completion does not work for matplotlib. It works for everything else. \nNot sure why only matplotlib completion is special and has this weird behavior. \n. OK, so I spent some time debugging this. It turns out \n/Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/pythoncomplete.vim\nscript invokes python script, which in turn evals the statement \nimport matplotlib.pyplot as plt\nwhich in turn launches GUI python.\nNormally, if you invoke the above import from IPython, it will also load and bounce the Python's rocketship icon on the dock. This is because matplotlib invokes interactive plot backend. But in Terminal MacVim version's case, it bounces the MacVim GUI icon instead. \n. It looks one of my systems got borked somehow. /usr/include/os/ was only partially updated so there were conflicting definitions of __dso_handle.. It seems this error only happens if you have both Xcode and command line tools installed. MacVim builds fine with only Xcode installed. . That\u2019s a silly recommendation. One should be able to clone the code, configure and build locally. If that does not work, the project is broken. . By the way the current home-brew tap for MacVim assumes Xcode 8 anyway. I am using Xcode 9.0.1 on MacOS 10.13. \nIn any case, there is no Python/Python.h header anywhere on the system:\n```\n$ open -h python\npython?\n[0] cancel\n[1] all\n[2] /usr/include/python2.7\n[3] /usr/local/include/fontforge/ffpython.h\n[4] /Library/Frameworks/Python.framework/Headers/pythonrun.h\n[5] /Library/Frameworks/Python.framework/Headers/Python-ast.h\n[6] /Library/Frameworks/Python.framework/Headers/Python.h\n[7] /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Python.framework/Headers/pythonrun.h\n[8] /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Python.framework/Headers/Python-ast.h\n[9] /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Python.framework/Headers/Python.h\n[10]    /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/python2.7\n```\nBut there are multiple Python.h headers (one for System python2.7 and one for Python3 that I built myself). \n. @splhack Sorry, I should have been more explicit in my bug report. Here is the missing information:\nmacOS 10.13, Xcode Version 9.0 (9A235). This is how I configure MacVim:\n./configure --with-features=huge --enable-rubyinterp --enable-pythoninterp --enable-python3interp --enable-perlinterp --enable-cscope  --enable-terminal\nNote that official vim git repo builds just fine with these same config options.. From what I remember MacVim builds fine with Xcode 9 only installed. It's when you install Xcode 9 and command line tools that you start getting this error. \nI will try doing clean install of High Sierra and confirm this. If my conjecture is correct, then it's not really MacVim problem, but problem with Apple dev tools, in which case I will post a bug with Apple.\n. @chdiza Command Line Tools 9.1 for macOS 10.13 were pushed through macOS App Store as update for users that had previous version(s) installed.\nThey are conspicuously missing as separate download from https://developer.apple.com/download/more/\nNot sure why.\n. Interestingly enough, if you move the mouse over the MacVim window, the terminal window disappears right away. Forcing redraw! makes the cursor jump around jarringly.. This happens only when you compile MacVim with 10.14 SDK (previous SDK works fine). For me the MacVim GUI flashes dark/light grey with desert color scheme in rhythm with the cursor blinking, if \"Core Text Renderer\" is turned on.. Turning off \"Use Core Text renderer\" and restarting (i.e. completely quit application, not just close window) should do it alone.. > I thought Mojave requires at least Xcode 10.\nApparently, at least Xcode 9.4.1 or higher. So my Xcode 9.3 is not supported.. I have just tried this on macOS Mojave, compiled with Xcode 10, and it works fine. No error messages printed when running command line Vim either.\nIt fixes the Core Text renderer issue. No flashing in the GUI.. Ok, tried the latest changes, things work, no flashing. Performance on 2015 5k iMac is fine here (scrolling through 3 million lines file is smooth and fast). However, transparency is now broken. Window is not transparent with set transparency=50.\nAlso, exiting native full screen makes the MacVim window black. CTRL+l fixes it.. @amadeus Are you sure your scrolling speed is related to the changes here? Could you try macOS Mojave with Xcode 10 build of master without the changes in this commit and see if the scrolling is fine without them.\nI definitely don't see slower scrolling performance on 5k iMac screen.. @amadeus Ok, I see the same behavior in native full screen as well. Scrolling speed is much slower, and just moving cursor up down is much slower. In Windowed (not full screen), the scrolling speed is not that bad.. Actually, I'm getting different behaviors even with 8.1.425 on different hardware. On Macs with integrated GPUs refresh is not required. On discrete GPUs it's broken with 8.1.425.. I don't see this in 8.1.500 any more either. . Updated to 8.1.468 and this no longer happens.. This error is due to stale /usr/include directory left from previous Xcode installations. Removing /usr/include and then running /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg to install it again fixes this problem.\nI guess overarching problem is that MacVim build should not be relying in /usr/include being present, and use the compiler toolchain includes from /Application/Xcode.app instead.. Apparently, you must run Xcode to install additional components after every OS point upgrade, which I have not done.. ",
    "ocehugo": "Yes. Currently Version: HEAD is now at 9443631 MacVim Snapshot 91\nThe config detect everything:\nchecking --enable-pythoninterp argument... no\nchecking --enable-python3interp argument... yes\nchecking for python3... /usr/local/opt/python3/bin/python3\nchecking Python version... 3.5\nchecking Python is 3.0 or better... yep\nchecking Python's abiflags... m\nchecking Python's install prefix... /usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5\nchecking Python's execution prefix... /usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5\nchecking Python's configuration directory... /usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/config-3.5m\nchecking if -pthread should be used... no\nchecking if compile and link flags for Python 3 are sane... yes\nchecking if -fPIE can be added for Python3... yes\nas mentioned  i can use the python3 commands py3do/py3 except py3eval. The funny thing is that i can access the help of py3eval but the command is not available from the mvim interface:\n:py3eval()\nE492: Not a editor command: py3eval()\nI'm just porting a vim script that have a lot of calls to pyeval to py3eval and this happen\n. very new to this. sorry about that... i was looking into an old log file... after substituting things worked and did;t realize the usage before \n. ",
    "jonashaag": "Extra cost?\nWhy close this issue? Isn't this something you'd like to see implemented, and even if you don't want to spend much time on it, couldn't this be contributed by someone else?\nPlease reopen this this issue and add any important information for anyone wanting to work on this. Thanks.\n. Hey, cool, thanks for adding auto update despite your previous comment! I'll try it out in the next days.\n. Seems to work. Awesome! Thanks!\n. ",
    "dphenderson": "Built from the given link and still failing for same reason:\nLast 15 lines from /Users/me/Library/Logs/Homebrew/macvim/02.make:\n    cd /tmp/macvim20160127-5485-cfbegf/src/MacVim/qlstephen\n    /usr/bin/touch -c /Users/Shared/builds/Release/QLStephen.qlgenerator\n* BUILD SUCCEEDED *\ncp: qlstephen/build/Release/QLStephen.qlgenerator: No such file or directory\n* BUILD FAILED *\nThe following build commands failed:\n    PhaseScriptExecution Run\\ Script build/MacVim.build/Release/MacVim.build/Script-520E0E2B1C2FBAF300949DD8.sh\n(1 failure)\nmake[1]: * [macvim] Error 65\nmake: * [first] Error 2\nbrew logs: https://gist.github.com/9b407835c0ae88fed43c\n. ",
    "beepscore": "I get similar failure on OSX 10.11.3\nhttps://gist.github.com/b8e86284992253f49b65\nThe logged build output directory shows my previous DerivedData custom location ~/xcode-build/Release... even though in Xcode gui I changed it back to default.\nToday I downloaded and installed Xcode command line tools to see if that would clear old path but it didn't.\nDoes ./config refer to homebrew or to xcodebuild?\nIs command line xcodebuild using an incorrect config or path?\nPS Thanks for working on MacVim!\nLast 15 lines from /Users/stevebaker/Library/Logs/Homebrew/macvim/02.make:\n    cd /tmp/macvim20160128-23022-7su5zo/src/MacVim/qlstephen\n    /usr/bin/touch -c /Users/stevebaker/xcode-build/Release/QLStephen.qlgenerator\n* BUILD SUCCEEDED *\ncp: qlstephen/build/Release/QLStephen.qlgenerator: No such file or directory\n* BUILD FAILED *\nThe following build commands failed:\n    PhaseScriptExecution Run\\ Script build/MacVim.build/Release/MacVim.build/Script-520E0E2B1C2FBAF300949DD8.sh\n(1 failure)\nmake[1]: * [macvim] Error 65\nmake: * [first] Error 2\n. ",
    "yanncoupin": "I copy-pasted the original report but I can actually confirm the problem still exists with release 94 under El Capitan 10.11.3 (15D21)\n. ",
    "symbolix": "Thanks. However, that answer on that issue #220 is not very clear to me. Could you please help me with this? I am trying to figure out if things will work when I attempt to run configure against a custom Python Framework location. So the question is, \"Is that option available?\" or should I stick to the system wide Python Framework. Thanks.\n. Yes. I am trying to figure out if I can point the configure script to a custom Python Framework location. For example, to compile against my own LUA, I would use this:\n--with-lua-prefix=/Users/me/apps/Darwin64/lua-5.2.3-clang-500.2\nso the question is: Is the option for compiling against a custom Python location working in the latest build?\nSo when I do this:\notool -L ./MacVim.app/Contents/MacOS/Vim | grep \"Python\"\nI get this:\n/Users/me/apps/Darwin64/python2.7/lib/python2.7\nInstead of this:\n/System/Library/Frameworks/Python.framework/Versions/2.7/Python\nThanks.\n. Thanks for your time and for your patience. What I see in your answer is:\nitem_1 of #220: This item explains how to use this as a binary release and some .vimrc changes. This is not a solution for me, as I would like to compile my own MacVim.\nitem_2 of #220: This item explains the Homebrew solution. I do not want to use Homebrew.\nitem_3 of #220: This is not relevant to my question.\nSorry, however none of these seems to be answering my question.\nOnce again, thank you for your help.\n. vi_cv_path_python3=/usr/local/Frameworks/Python.framework/Versions/3.5/bin/python3\nvi_cv_dll_name_python=/usr/local/Frameworks/Python.framework/Versions/2.7/Python\nvi_cv_path_python=/usr/local/Frameworks/Python.framework/Versions/2.7/bin/python\nvi_cv_dll_name_python3=/usr/local/Frameworks/Python.framework/Versions/3.5/Python\nWell, those vi_cv_ bits, I did not recognise. Are they ENV variables that I need to set before the build process? or are they Homebrew specific flags?\nThe rest is clear. Let me make it clearer:\n--with-python-config-dir=/usr/local/Frameworks/Python.framework/Versions/2.7\nI have already used that. However, it was not working back in the days.\nSome time ago, when I compiled MacVim, those configure flags did not have any effect on the final compiled application. Please see this post from the old dev forum:\nMacVim builds against a custom Python Framework, but eventually the default Python.Framework is what gets linked?!\nThe question that I intended to ask and probably failed to do so is, have this issue been fixed with the new development cycle of MacVim.\nIf you check the link, it reads as:\nThis is a known issue with MacVim, and if you look in the vim_mac mailing list\n(which, by the way, is the appropriate place to report bugs in MacVim in the future),\nyou will find that the maintainer refuses to fix it.\n(In his defense, he is happy to incorporate a fix if someone else will do the work,\nand nobody has taken him up on it).\nHe meant that the Python part was hardcoded as the system python, and custom python locations were being ignored.\nThanks. Sorry for the trouble.\n. Of course. Sure. Thanks for your time.\n. Same here. I am more than happy to provide a screen-shot but not different than anything we already have here. An annoying [?] character in the status bar when running MacVim and no issues when running /Applications/MacVim.app/Contents/MacOS/Vim in iTerm2. I have compiled that latest snapshot   105 of MacVim from source and still the issue exists.\nBy the way, this issue appeared after I have updated to El-Capitan, 10.11.5. Probably something to do with font caches?\n. ",
    "persramd": "Compiles.\n. ",
    "petobens": "Hi @splhack and @persramd.  I'm also trying to build MacVim on Lion 10.7.5 but using Homebrew. I'm getting the following errors when I run brew install macvim:\n==> make\nLast 15 lines from /Users/Pedro/Library/Logs/Homebrew/macvim/02.make:\n    return (__bridge void *)mmChannel;\n            ^\nMacVim/MMBackend.m:1697:29: error: use of undeclared identifier '__bridge'\n    MMChannel *mmChannel = (__bridge MMChannel *)cookie;\n                            ^\nMacVim/MMBackend.m:3431:29: error: use of undeclared identifier '__bridge'\n    MMChannel *mmChannel = (__bridge MMChannel *)info;\n                            ^\nMacVim/MMBackend.m:3444:32: error: use of undeclared identifier '__bridge'\n    CFSocketContext ctx = {0, (__bridge void *)self, NULL, NULL, NULL};\n                               ^\n4 errors generated.\nmake[1]: *** [objects/MMBackend.o] Error 1\nmake[1]: *** Waiting for unfinished jobs....\nmake: *** [first] Error 2\nAny help will be greatly appreciated (if you need additional information please let me know).\nOne additional question: are there precompiled binaries for Lion? Thanks!!\n. Hi @splhack  thanks for the quick reply. Adding that line to MMBackend.m indeed solved that particular issue. However now the build fails with the following output:\n```\n=== BUILD NATIVE TARGET QuickLookStephen OF PROJECT QuickLookStephen WITH THE DEFAULT CONFIGURATION (Release) ===\nCheck dependencies\nProcessInfoPlistFile build/Release/QLStephen.qlgenerator/Contents/Info.plist Info.plist\n    cd /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen\n    builtin-infoPlistUtility Info.plist -expandbuildsettings -platform macosx -o /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/Release/QLStephen.qlgenerator/Contents/Info.plist\nCopyStringsFile build/Release/QLStephen.qlgenerator/Contents/Resources/English.lproj/InfoPlist.strings English.lproj/InfoPlist.strings\n    cd /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen\n    builtin-copyStrings --validate --inputencoding utf-16 --outputencoding UTF-16 --outdir /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/Release/QLStephen.qlgenerator/Contents/Resources/English.lproj -- English.lproj/InfoPlist.strings\nCompileC build/QuickLookStephen.build/Release/QuickLookStephen.build/Objects-normal/i386/main.o main.c normal i386 c com.apple.compilers.llvm.clang.1_0.compiler\n    cd /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen\n    setenv LANG en_US.US-ASCII\n    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x c -arch i386 -fmessage-length=0 -std=c99 -Wno-trigraphs -fpascal-strings -Os -Wno-missing-field-initializers -Wno-missing-prototypes -Wreturn-type -Wformat -Wno-missing-braces -Wparentheses -Wswitch -Wno-unused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wno-empty-body -Wno-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wno-constant-conversion -Wno-int-conversion -Wno-enum-conversion -Wno-shorten-64-to-32 -Wpointer-sign -Wno-newline-eof -DRKL_PREPEND_TO_METHODS=rkl_ -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -fasm-blocks -fstrict-aliasing -Wdeprecated-declarations -mmacosx-version-min=10.7 -g -Wno-sign-conversion -I/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/QLStephen.hmap -I/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/Release/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/DerivedSources/i386 -I/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/DerivedSources -Wextra -Wall -Wno-unused-parameter -F/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/Release -MMD -MT dependencies -MF /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/Objects-normal/i386/main.d --serialize-diagnostics /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/Objects-normal/i386/main.dia -c /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/main.c -o /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/Objects-normal/i386/main.o\n2016-02-25 19:31:22.960 xcodebuild[20703:3c03]  DVTAssertions: Warning in /SourceCache/IDEXcode3ProjectSupport/IDEXcode3ProjectSupport-2110/Xcode3Sources/XcodeIDE/Frameworks/DevToolsBase/pbxcore/Target.subproj/BuildCommandResultsPostprocessing/XCClangResultsPostprocessor.m:98\nDetails:  Unable to read diagnostics from file \"/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/Objects-normal/i386/GeneratePreviewForURL.dia\" (Invalid File): Bad header in diagnostics file\nObject:   \nMethod:   -postprocessResultsForCommandInvocation:\nThread:   {name = (null), num = 4}\nPlease file a bug at http://bugreport.apple.com with this warning message and any useful information you can provide.\nCompileC build/QuickLookStephen.build/Release/QuickLookStephen.build/Objects-normal/i386/GeneratePreviewForURL.o GeneratePreviewForURL.m normal i386 objective-c com.apple.compilers.llvm.clang.1_0.compiler\n    cd /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen\n    setenv LANG en_US.US-ASCII\n    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch i386 -fmessage-length=0 -std=c99 -fobjc-arc -Wno-trigraphs -fpascal-strings -Os -Wno-missing-field-initializers -Wno-missing-prototypes -Wreturn-type -Wno-implicit-atomic-properties -Wno-receiver-is-weak -Wformat -Wno-missing-braces -Wparentheses -Wswitch -Wno-unused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wno-empty-body -Wno-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wno-constant-conversion -Wno-int-conversion -Wno-enum-conversion -Wno-shorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wno-undeclared-selector -Wno-deprecated-implementations -DRKL_PREPEND_TO_METHODS=rkl_ -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -fasm-blocks -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -mmacosx-version-min=10.7 -g -Wno-sign-conversion -I/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/QLStephen.hmap -I/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/Release/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/DerivedSources/i386 -I/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/DerivedSources -Wextra -Wall -Wno-unused-parameter -F/Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/Release -MMD -MT dependencies -MF /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/Objects-normal/i386/GeneratePreviewForURL.d --serialize-diagnostics /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/Objects-normal/i386/GeneratePreviewForURL.dia -c /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/GeneratePreviewForURL.m -o /Users/Pedro/Desktop/macvim/src/MacVim/qlstephen/build/QuickLookStephen.build/Release/QuickLookStephen.build/Objects-normal/i386/GeneratePreviewForURL.o\nerror: -fobjc-arc is not supported on platforms using the legacy runtime\nCommand /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang failed with exit code 1\n BUILD FAILED \nThe following build commands failed:\n    CompileC build/QuickLookStephen.build/Release/QuickLookStephen.build/Objects-normal/i386/GeneratePreviewForURL.o GeneratePreviewForURL.m normal i386 objective-c com.apple.compilers.llvm.clang.1_0.compiler\n(1 failure)\nmake: *** [macvim] Error 65\n```\nOnce again any help/hints will be greatly appreciated (I have no idea what's going on). \n. @splhack. Is the following output useful?\n```\npedro-macbook:~ Pedro$ brew doctor\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry and just ignore them. Thanks!\nWarning: A newer Command Line Tools release is available.\nThe standalone package can be obtained from\n  https://developer.apple.com/downloads\nor it can be installed via Xcode's preferences.\nWarning: You seem to have osx-gcc-installer installed.\nHomebrew doesn't support osx-gcc-installer. It causes many builds to fail and\nis an unlicensed distribution of really old Xcode files.\nPlease install the CLT or Xcode 4.6.3.\nWarning: You are using OS X 10.7.\nWe (and Apple) do not provide support for this old version.\nYou may encounter build failures or other breakages.\npedro-macbook:~ Pedro$ xcode-select -v\nxcode-select version 2003.\n``\n. In Xcode -> Preferences -> Locations, the \"Command Line Tools\" box saysXcode 4.6.3 (4H1503)`.\n. @splhack sorry for being such a noob but how do I do that?\n. @splhack thank you!! That indeed solved my problem. Should your two fixes be translated into a pull request or are they specific to my setup?\n. @splhack ohh I see. Once again thanks for the help and patience!\n. ",
    "ronaaron": "```\nbody p { margin-bottom: 0cm; margin-top: 0pt; } \nYes, it happens on MacVim but not on standard vim.\u00a0 \nOn 09/02/2016 00:57, chdiza wrote:\n@ronaaron said that plain Vim does\n    not exhibit the incorrect behavior, while MacVim does. That\n    means the place to report it is right here.\n  \u2014\n    Reply to this email directly or view\n      it on GitHub.\n-- \n  Ron Aaron, CTO\n  Aaron High-Tech, Ltd.\n  +1 425.296.0766\n  +972 52.652.5543\n  GPG Key: 91F92EB8\n\n```\n. Yes. \nI use vim (the most recent version built from the vim repo) every day. \nI also use MacVim (also the most recent version) every day.  So I can\ncategorically state that the behavior is different.\nOn 09/02/2016 06:47, Kazuki Sakamoto wrote:\n\n@ronaaron https://github.com/ronaaron Do you actually check\nhttps://github.com/vim/vim ? What is the version of \"standard vim\"?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/239#issuecomment-181709591.\n. 7.4.1290, same as the MacVim I'm running right now.  Just like I said\nbefore.\n\nOn 09/02/2016 06:58, Kazuki Sakamoto wrote:\n\n@ronaaron https://github.com/ronaaron What is the version of vim?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/239#issuecomment-181711031.\n. No.  The \"matchstr()\" function works correctly, but doing the same from\nnormal mode \"/\" does not\n\nHere's what I tried w/ a script:\nlet m1 = matchstr('\"one\" \"two\"', '\"[^\"]{-}\"')\nif (m1 == '\"one\"')\n    echo \"OK\"\nelse\n    echo \"BAD: \" . m1\nendif\nOn 02/09/2016 07:33, Kazuki Sakamoto wrote:\n\n@ronaaron https://github.com/ronaaron Can you create a vim script\nfor reproducing the issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/239#issuecomment-181716687.\n. OK.  It seems that the actual problem was \"cpoptions=Bes\" on my MacVim\nsetup.\n\nOmitting the 'c' from there caused the problem.\nOn 02/09/2016 08:11, Kazuki Sakamoto wrote:\n\n@ronaaron https://github.com/ronaaron I can't repro the issue.\nhttps://github.com/macvim-dev/macvim/wiki/Troubleshooting\n$ killall MacVim\n$ killall Vim\n$ defaults delete org.vim.MacVim\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\nCan you explain the exact detail how to reproduce the issue from here.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/239#issuecomment-181726011.\n. \n\nbody p { margin-bottom: 0cm; margin-top: 0pt; }\n\n\nThis is an automated reply.\n\n\nI am out of the office until Sunday, 24 Sept 2017.\n\n\nWhen I return, I will reply to your email. Thank you.\n\n\n\n\n      Ron Aaron | \n       CTO  Aaron High-Tech, Ltd |\n      +1 425.296.0766 / +972 52.652.5543 |\n\n        GnuPG Key: 91F92EB8.\n\n\nbody p { margin-bottom: 0cm; margin-top: 0pt; }\n\n\nThank you!\u00a0 It works fine now...\n\n\nOn 21/09/2017 0:28, Morton Fox wrote:\n\n\n  I got that error message too.\n  If you haven't launched Xcode after updating it, do so. Xcode\n    will ask for permission to install additional components. Let it\n    do so. Once that is done, try the MacVim build again.\n  \u2014\n    You are receiving this because you authored the thread.\n    Reply to this email directly, view it on GitHub, or mute the thread.\n\n\n\n\n\n\n\n  {\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\",\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/macvim-dev/macvim\",\"title\":\"macvim-dev/macvim\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png\",\"action\":{\"name\":\"Open in GitHub\",\"url\":\"https://github.com/macvim-dev/macvim\"}},\"updates\":{\"snippets\":[{\"icon\":\"PERSON\",\"message\":\"@mortonfox in #546: I got that error message too.\\r\\n\\r\\nIf you haven't launched Xcode after updating it, do so. Xcode will ask for permission to install additional components. Let it do so. Once that is done, try the MacVim build again.\"}],\"action\":{\"name\":\"View Issue\",\"url\":\"https://github.com/macvim-dev/macvim/issues/546#issuecomment-330986310\"}}}</\n\nscript>\n\n\n\n\n\n\n\nRon Aaron | \n CTO  Aaron High-Tech, Ltd |\n          +1 425.296.0766 / +972 52.652.5543 |\n          \n            GnuPG Key: 91F92EB8\n\n\n\n. ",
    "acidjazz": "Actually I'm pretty sure it's a bug, its easily duplicatable and there are no solutions\n. Yes @chdiza I agree and you can tell the oranges and the reds are off a bit, but what I'm more concerned about is the complete different color being chosen which is the bug @splhack , the parenthesis () in VIM for any OS and GVIM on Linux are blue, but in MacVim they appear to be grey.\nI did a lot of testing with completely fresh installs of VIM, MacVim, VIMR, and GVIM on OSX and Linux, same vimrc's, various TERM settings and making sure t_co was 256, etc. No matter what MacVim still rendered the parenthesis in grey, where as VIM and GVIM (which is a GUI) kept the original blue which matches the screenshots and also on vimcolors.com\nOne other point that was odd is this bug is also reproducable with VIMR on OSX\n. haha @notnyt beat me to it, yea that .light3 should be #a8a8a8 to properly represent the cterm value 248. TIL not all colorschemes properly map hex to cterm.\n. ",
    "notnyt": "rings bell SHAME\nhttps://github.com/morhetz/gruvbox/blob/master/colors/gruvbox.vim#L106\n256 color terminals represent their colors in an arbitrary way.  248 should be grey.\nmacvim uses the specified hex color\n. @splhack  the theme he was using specified a different gui value vs cterm color value.  nothing to see here.\n. ",
    "lilyball": "What I'm using is the latest version that Homebrew has, which is version 7.4-96. Isn't this the same thing as the snapshot-96 listed on that releases page? It's the same patchlevel.\n. The error reproduces with the binary from the snapshot-96 DMG.\n. Oh I see what you mean. As I said in the ticket, I don't know if this broke with a MacVim update or an OS update. It's been over a year since I last tried to edit files with these particular glyphs. I'll try downloading an older build and seeing if that does anything.\n. Ah hah! Snapshot 74 does indeed have font fallback! I'll go through the other snapshots now to figure out when it broke.\n. @splhack It works in snapshot-88 (7.4.979) but it's broken in snapshot-89 (7.4.1054).\n. I'll try.\n. I'm just compiling from source. BTW, you can't just do a straight bisect like that, because it'll land on commits from the upstream vim instead of just limiting itself to the first parent, which means most tested commits won't be capable of building MacVim.app.\n. Yeah I had to throw in a git bisect skip snapshot-88.master^2 to tell it to skip everything that was merged in from upstream (since master^2 is the latest upstream point that was merged in).\n. git bisect says the culprit is:\n```\ncommit 3def55116e4ea06503c3a3496ffb8492e1a67738\nAuthor: Kazuki Sakamoto sakamoto@splhack.org\nDate:   Fri Dec 18 23:04:51 2015 -0800\nRemove legacy pre-10.7 stuff\n\nFix #173\n\n```\n. Ugh, belay that. With the parent commit, it looks fine, until I turn the CoreText renderer off and back on again, at which point it breaks. I'm guessing it wasn't actually using the CoreText renderer because the removal of ATSUI changed the numbering.\n. Yeah, snapshot 88 is broken too. Ugh. Time to check the older snapshots again.\nI don't know why you didn't just keep the renderer preference numbering the same when taking out ATSUI :/\n. Yeah, even snapshot 73 is now broken. I can't run any previously-built snapshots because they won't launch on Yosemite (tries to load a libperl.dylib that doesn't exist). I can build snapshot 72 myself, which continues to reproduce the error, but I can't even build any older snapshots because of a compile error in os_unix.c (redeclaration of signalstack).\nI'm wondering at this point if there's any chance that what's going on here is a linked-on-or-after check. It's possible that MacVim, when built on an older OS, will have font fallback behavior, but when built on Yosemite will not. I don't know if this is true, but it would explain why this behavior used to work, and why I can't find a version that I can run that shows the working behavior now.\n. After looking at how MMCoreTextView is actually implemented, it does appear to actually be doing font fallback manually. It's using CTFontGetGlyphsForCharacters() and CTFontDrawGlyphs() for the actual drawing, instead of using any of the higher-level CoreText features, so that doesn't handle fallback. But the code here explicitly checks for glyphs that can't be found in the given font and tries to find a fallback.\nWhich is to say, I'm not sure why it's failing. CTFontCreateForString() says it tries to find a font from the cascade list of a given font, so maybe the given font has no cascade list and maybe CoreText isn't falling back to looking at other fonts? I'm really not sure.\n. Yeah, the font fallback is ending up with the .LastResort font.\n. I think what happened here is the global cascade list changed between OS releases. Although I'm pretty surprised Apple Symbols isn't in the cascade list at all.\n. PR submitted as #245.\n. No, one I patched myself using a modified version of the script in the Powerline repo. But the problem reproduces with the built-in Menlo too.\n. Huh, I just tried on a different computer and the problem isn't occurring here. That's pretty strange. I just verified that CTFontCreateForString(), when given the Menlo font and the string \"\u27f6\", still returns the .LastResort font, so I have no idea why MacVim is managing to still draw the correct glyph on this computer. My only guess is that somehow the fontCache contains one of the fonts that can draw the glyph.\n. Nope, it's definitely getting the font back from CTFontCreateForString(). But when I try calling that in a sample project, I'm getting .LastResort back. This is rather mystifying.\nHowever, this did reveal another issue: once MacVim has gotten the .LastResort font back from something, that font ends up in its font cache, which means it'll pull glyphs from .LastResort instead of trying to find a new font.\n. This also makes me question the current behavior of trying to find one font for the whole string, then halving repeatedly. If it comes up with a sub-par font for the whole range, it'll end up using that font even if it would do better to use multiple different fonts.\nI'm wondering if maybe my PR #245, which uses CTLine to assign fonts, should actually be refactored further to get rid of the lookupFont() function entirely, and the recursive nature of the string drawing, and instead just create a CTLine for the whole string at once. Then it can just iterate over the runs, grabbing glyphs and fonts and drawing them itself. No more recursion, no more searching for fonts, and no more fontCache either (since there's no way to expose that to CTLine, and presumably CoreText has its own cache anyway).\n. My environment isn't ill-formed. I don't know why I'm seeing it on one computer and not another, but my computer that does reproduce this is a perfectly legitimate environment. Especially because I'm not actually sure how it even works correctly on my other computer, since calling CTFontCreateForString() in a sample project given the font and string that MacVim are using always comes up with .LastResort.\n. If you can answer this question, that would help: Why does CTFontCreateForString(), given Menlo as the font and \"\u27f6\" as the string, return STIXGeneral in MacVim (on my laptop), but running the equivalent code in a standalone project returns .LastResort (which is what happens on my desktop)? Or rather, I get why it returns .LastResort, since STIXGeneral isn't in the default cascade list and the Menlo CTFontRef doesn't contain a custom cascade list, so the real question is why is it returning STIXGeneral at all?\n. Experimentally, the CoreText renderer does seem to be doing font fallback now on macOS 10.12.4. Since this code didn't change, I'm guessing it was fixed at the OS level.\nThat said, there's a memory leak fix in this PR, so that at least should be salvaged even if we don't use the rest of it. But if this is still an issue on macOS 10.11 then we should consider merging the whole PR.. ",
    "CarterLi": "I think I encountered the same issue. Here are screenshots (~/.vimrc):\n-  Without Use Core Text renderer enabled. Incorrect line height, see the airline status bar:\n  \n- With Use Core Text renderer enabled, lots of ?, see the right side of the airline status bar:\n  \n- Expected result. In console ( iTerm2 latest )\n  \nOS: OSX 10.11.5\nFont: Hack:h14\n:ver\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled May 19 2016 21:48:22)\nMacOS X (unix) version\nIncluded patches: 1-1832\nCompiled by Homebrew\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl             +cscope          -footer          +menu            +odbeditor       +startuptime     +vertsplit\n+arabic          +cursorbind      +fork()          +mksession       +packages        +statusline      +virtualedit\n+autocmd         +cursorshape     +fullscreen      +modify_fname    +path_extra      -sun_workshop    +visual\n+balloon_eval    +dialog_con_gui  -gettext         +mouse           -perl            +syntax          +visualextra\n+browse          +diff            -hangul_input    +mouseshape      +persistent_undo +tag_binary      +viminfo\n++builtin_terms  +digraphs        +iconv           +mouse_dec       +postscript      +tag_old_static  +vreplace\n+byte_offset     +dnd             +insert_expand   -mouse_gpm       +printer         -tag_any_white   +wildignore\n+channel         -ebcdic          +job             -mouse_jsbterm   +profile         +tcl             +wildmenu\n+cindent         +emacs_tags      +jumplist        +mouse_netterm   -python          +termguicolors   +windows\n+clientserver    +eval            +keymap          +mouse_sgr       +python3         +terminfo        +writebackup\n+clipboard       +ex_extra        +langmap         -mouse_sysmouse  +quickfix        +termresponse    -X11\n+cmdline_compl   +extra_search    +libcall         +mouse_urxvt     +reltime         +textobjects     -xfontset\n+cmdline_hist    +farsi           +linebreak       +mouse_xterm     +rightleft       +timers          +xim\n+cmdline_info    +file_in_path    +lispindent      +multi_byte      +ruby            +title           -xsmp\n+comments        +find_in_path    +listcmds        +multi_lang      +scrollbind      +toolbar         -xterm_clipboard\n+conceal         +float           +localmap        -mzscheme        +signs           +transparency    -xterm_save\n+cryptv          +folding         +lua             +netbeans_intg   +smartindent     +user_commands   -xpm\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX  -g -O\n2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: clang   -L. -L/usr/local/lib -L. -L/usr/local/lib  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon\n  -lm  -lncurses -liconv -framework Cocoa  -L/usr/local/lib -llua   -L/usr/local/Cellar/python3/3.5.1/Frameworks/Python.fra\nmework/Versions/3.5/lib/python3.5/config-3.5m -lpython3.5m -framework CoreFoundation -F/System/Library/Frameworks -framewor\nk Tcl -framework CoreFoundation -framework Ruby\n. Have no idea what's happening, but upgrading to 10.12 solved this issue...\n. ",
    "dashingspidy": "I'm using Macvim 8.0 build 110  on 10.12\nIf i uncheck Use core text renderer, macligatures take effects immediately (while core text checked it take effects only after save the file) & Vim-airline works fine. \nBut linespace isn't working properly. I was trying to get macligatures on. Found this unexpected solution. \nI don't know what happened but i guess it's an unexpected behaviour.\n. ",
    "exchgr": "Confirmed on 8.0-114 through 127, macOS Sierra 10.12.3. This screenshot shows special characters from NERDtree and neomake:\n\nThis only happens with the Core Text renderer. (Here it is without Core Text)\n\n. ",
    "iacobson": "facing the same issue when I change the font to \nset guifont=Fira\\ Code:h14\nin order to use it with macligatures\n. ",
    "dathinaios": "On the native one\n. > I can't reproduce this on latest; does it still happen for you? \nYes but only when I start with split screen mode. To reproduce:\n1. Press and hold the green button of the MacVim window\n2. Select another app window ( I tried it with a finder one)\n\nDoes it still happen if you upgrade? What version of MacVim are you using?\n\nI clicked 'Check for updates' and I am on the latest.\n. ",
    "malleusinferni": "I've seen this problem myself in windowed mode, with a custom .vimrc (but several plugins) and on versions of OS X before Yosemite. Don't remember exactly when it started... Probably around the time the linebreak patch was added.\nAnyway, I discovered that setting the lines variable (from e.g. 54 to 52) would make it go away for at least the lifetime of a window. This is annoying and terrible but since I couldn't pinpoint the source of the problem it was enough to make it usable again.\nI have never seen this glitch in the terminal, and in fact I've started favoring the terminal because of it.\n. ",
    "jonathanglasmeyer": "I  can confirm this by testing this with Quartz Debug FPS Counter. With Fira Code and no ligatures, scrolling down/up (holding down j/k with high key repeat (defaults write -g KeyRepeat -int 1)) produces 55fps. With ligatures, its consistently produces only 33-35fps.\n. ",
    "kejadlen": "When I'm running MacVim in the Terminal, I'm seeing flickering with macligatures on. Doesn't appear to be a problem w/the GUI version, though.. ",
    "tammersaleh": "I'm also seeing this in 8.1.72 (149).  I was seeing incredibly slow performance with h/j/k/l movement ~when rendering more than three splits~.  I :set nomacligatures and the issues went away.  \nStrangely, when I hit the top/bottom of the screen while moving the cursor, causing the screen to scroll, everything begins moving at normal speeds.  As soon as I move the cursor inside the visible viewport, it's slow again.\n(also, this happens whether or not \"Use Core Text Renderer\" is set)\n(Edit: this has nothing to do with splits - same issue in a single window). ",
    "theunraveler": "\nWhen launching MacVim with the -u NONE option (mvim -u NONE .).\n\nActually, this sort of leads me to believe that the issue may be something from vim upstream. Please feel free to close this issue if you feel that to be the case.\n. Actually, it seems like this might be a similar issue to https://github.com/vim/vim/issues/484, which is apparently fixed by https://github.com/vim/vim/commit/e0fa3742ead676a3074a10edadbc955e1a89153d. If nothing is coming to mind immediately for you, I can just wait until that patch version is included in MacVim to see if it fixes the problem.\n. Just tried snapshot-99, and the issue is still there.\n. I just tried this with the latest vim, and am getting the same issue. Closing this issue in favor of https://github.com/vim/vim/issues/231 from the main vim repo. Thanks, and sorry for the bogus report!\n. ",
    "sfcgeorge": "This has happened for a long time for me. I thought maybe the new Yosemite style tabs would fix it but hasn't. Though it wasn't always broken I'm sure, many months ago it was fine.\n. It seems release 100 disabled Yosemite style tabs? The actual tab style hasn't affected this bug though, I experienced it before the tab change, during, and still now that it has been reverted. It's a shame Apple doesn't provide access to their tabs widget as so many apps have issues recreating tabs well.\n. FWIW I like all the default new OS X scrolling - inertia, reverse scroll, rubber band. And to me the whole point of MacVim is better system integration - mouse, keyboard, UI, UX etc. For those who prefer the standard Vim way, is there an advantage to MacVim over standard?\nThat said, this does sound like a pretty big feature and one where it must be implemented perfectly to feel native, otherwise it will just be jarring. I've \"put up with\" the line scrolling fine until now so it doesn't seem essential, just nice to have.\n. I've also noticed this. I installed via Brew but it also keeps auto updating and so the tab styles change. \"About\" menu shows I'm on the latest version even though I'm seeing old style tabs.\n. My hunch is build machine. I'm guessing there's a compile time flag that detects the OS version being compiled on and sets the tab style accordingly. The Homebrew version is always compiled on your machine, so you get the new tabs. The release version is pre-compiled so you get the tabs of the build machine.\n. There wasn\u2019t previously an official OS X tab widget, apps like MacVim did their best to copy. Now their is an official way of doing tabs (that MacVim doesn\u2019t use yet) that looks like the new style. So the new style is consistent across Apple apps and increasingly 3rd party apps. I\u2019m in favour of keeping it the new way, rather than going down the rabbit hole of config for every little thing. Though the new style doesn\u2019t quite match the true Apple tabs, the colours are too light, but that could be fixed.\n\nOn 24 Oct 2016, at 13:09, Michael Rappazzo notifications@github.com wrote:\nI find the new tabbar style hideous. Can I request a config setting for the former style? Pretty please? Or is the old style deprecated in OSX/MacOS?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/macvim-dev/macvim/issues/329#issuecomment-255722823, or mute the thread https://github.com/notifications/unsubscribe-auth/AA2BC9UDFBBkJ3QgnhUFCgO3zuqhRkEKks5q3KAHgaJpZM4Jne4Z.\n. \n",
    "alisnic": "For me, MacVim will refuse to rearrange tabs using mouse only if they have unsaved changes.\n$ mvim --version\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Mar 26 2016 06:40:26)\nMacOS X (unix) version\nIncluded patches: 1-1655\nCompiled by travis@Traviss-Mac-139.local\n...\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: clang   -L. -L/usr/local/lib -L. -L/usr/local/lib  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -framework Cocoa   -fstack-protector  -L/System/Library/Perl/5.16/darwin-thread-multi-2level/CORE\n$ ls .vim/plugged\nYouCompleteMe        devdocs.vim          nerdtree             vim-coffee-script    vim-fugitive         vim-open-alternate\nack.vim              easy-gitlab.vim      tabular              vim-colors-solarized vim-haml             vim-ruby\nauto-pairs           editorconfig-vim     tcomment_vim         vim-elixir           vim-javascript       vim-sensible\nctrlp-py-matcher     file-line            tern_for_vim         vim-endwise          vim-json             vim-togglecursor\nctrlp.vim            incsearch.vim        tube.vim             vim-expand-region    vim-monokai\n. Not really a fix for your problem, but did you try using thesilversearcher together with CtrlP? The search performance difference is huge. here's how I configured it https://github.com/alisnic/.dotfiles/blob/macos/.vimrc#L55\nthe nicest thing is that if you have a properly configured .agignore in your home (https://github.com/alisnic/.dotfiles/blob/macos/.agignore), CtrlP will benefit from that too. -l and -g tells ag to search for filenames by pattern, not contents, from ag docs:\n-g --filename-pattern PATTERN\n                          Print filenames matching PATTERN\n  -l --files-with-matches Only print filenames that contain matches\n                          (don't print the matching lines)\nand trust me, it's faster than find :). ",
    "waruqi": "ok, thanks! :)\n. ",
    "smaili": "@chdiza absolutely right!\n. ",
    "adamcw": "I would also like to know how to avoid this feature. Updating via the auto-updater rather than through Homebrew broke my MacVim installation (I believe it was an issue with the YouCompleteMe plugin), I assume it had to do with the version of Python linked. I had to uninstall and reinstall r100 to get it to work again. Updating to r101 today through Homebrew, rather than the auto-updater, has worked just fine. Hopefully this is a fairly isolated incident.\n. ",
    "bmulholland": "Thank you!\n. ",
    "ryenus": "@splhack, yes!\nThat's the simplest solution, though more information could be added.\nBTW, it took me a little while to figure out that you've updated the README.md in branch test/readme.\nThanks\n. ",
    "xiaohk": "@jpetrie Thanks for your reply. I didn't check \"Check for updates\", but macvim would update automatically (I found old macvim would be sent to Trash). Every time this happens, all the non-original color scheme .vim files in the colors directory would disappear, so I have to download the those files again. I store the color scheme files in /Applications/MacVim.app/Contents/Resources/vim/runtime/colors, that may be the problem.\n. Any updates on this?\nI have tried defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES. It prevents the window from blinking, but scrolling makes the app crash...\nI also downloaded 151 binary from https://github.com/macvim-dev/macvim/releases, it doesn't work for me. . > @xiaohk How does the release not work for you? Does it crash or just blink a lot when you type? Do you have an external monitor? You can try to remove the CGLayer setting first by doing defaults delete org.vim.MacVim MMUseCGLayerAlways, and also maybe try a fresh vimrc. I'm mostly asking because I'm running Mojave and the release does work for me.\nThe release blinks with my cursor. I don't have an external monitor. I did try to set defaults delete org.vim.MacVim MMUseCGLayerAlways, but then scrolling froze MacVim.. ",
    "chuanconggao": "I think maybe just a simple option like set titlebarcolor=#1C1C1C. Of course, the tab bar underneath the title bar also needs the same background color (maybe with a different transparency).\nI do not think we need to consider too much about dark mode toggle right now. Usually the title bar color would be chosen to match the color theme, rather than dark mode or not.\n. ",
    "wayneashleyberry": "I'd also love this, it is minor but really does make the window look modern.\nAtom just shipped this in 1.11 beta and they had a great discussion about it over on https://github.com/atom/atom/pull/11790.\n. I've tried the steps listed over here https://github.com/macvim-dev/macvim/wiki/Troubleshooting#for-zsh-users but neither /etc/zshenv or  /etc/zprofile exist on my system.\n. Deleting the contents of my ~/.vimrc doesn't change anything either.\n. Strange thing is fish isn't even in my list of shells...\n```\n~\n\u25b3 cat /etc/shells\nList of acceptable shells for chpass(1).\nFtpd will not allow users to connect who are not using\none of these shells.\n/bin/bash\n/bin/csh\n/bin/ksh\n/bin/sh\n/bin/tcsh\n/usr/local/bin/zsh\n```\n. My bad, I was launching an old installation :/\n. ",
    "lauevrar77": "An idea if this will be implemented sooner or later ?. ",
    "mvanier": "I'd love this too.  I use a dark theme and also use iterm2 with a dark title bar and a dark background, and the light title bar on MacVim is a bit distracting.. ",
    "chris-fran": "So do I. I mostly use Vim for writing, but for reading I rather macvim; would be cool I could also have colored title bar here. ",
    "robinmitra": "I'm also interested in this feature as the titlebar is quite distracting when coding in the night with a dark theme. \nI'm willing to help develop this functionality but would appreciate if someone can give me a few pointers to get started on the right track?. Thanks, that gives me a good starting point. I'll come back with any questions.. ",
    "statico": "Here are some more resources:\n\nIt looks like iTerm2 already has this implemented in PseudoTerminal.m\nLooks like the Alacritty folks got it working with discussion: https://github.com/jwilm/alacritty/issues/686#issuecomment-318350775\n\nA strong +1 to this, too. It might also satisfy the people having issues in https://github.com/macvim-dev/macvim/pull/111 as well.. ",
    "adelarsq": "Closing this issue based on the @vim-ml reply from https://github.com/vim/vim/issues/732# showed bellow:\n\n\u200bThis is something about font rendering libraries (or how these libraries\nare used by toolkit used by Vim GUI or terminal emulator) and how they work\nwith symbols borrowed from the other fonts.\u200b Opening issues in *vim\nrepositories is not going to be much helpful: Vim could fix this only by\ncreating some more or less dirty hacks and do this only for itself.\nBasically this happens because monospace fonts used by Vim do not contain\nnecessary glyphs, so font rendering library has to borrow them from\nsomewhere. This \u201csomewhere\u201d is usually not a monospace font and definitely\nhas different glyph dimensions; and picture glyphs from non-monospace font\nmost of time are wider then a screen cell when taking font with the same\nsize. I do not know why literally nowhere I saw this borrowing tries to\nresize glyph, but usually this results in one of two behaviours:\n1. Glyph is displayed completely, but all screen cells to the right are\n   shifted. Shifting may be seen up to the location where terminal emulator\n   received \u201cmove to (X, Y) cell\u201d command which provokes hard visual bugs when\n   editing such files. Most of time shift also ends at the next blank cell.\n2. Glyph is truncated like you see.\nAnother possible source of confusion is the case when toolkit/font\nrendering library/terminal emulator/\u2026 thinks that glyph occupies two\ndisplay cells while Vim thinks it occupies one or vice versa. Looks like\nyou were hit also by this problem. There are always at least two places\nwhere text width in screen cells is computed: Vim uses its own functions\nfor this, whatever renders the text uses its own which are not identical to\nVim\u2019s ones (given that you may run Vim in screen in tmux in Neovim\n:terminal buffer in konsole terminal emulator you may have even more places\nwhere text width is computed, all using different functions; add such\ncharacter to a file name and use powerline with old Vim version and you\nwill have yet another function which computes width added to an equation\n(new Vim versions have strwidth())).\n. \n",
    "SolaWing": "Indeed it is ok when no plugin load. After further test, I've found the FileType autocmd cause this issue. I profile functions and found: My plugin Tagbar runs 200ms when switch to new file.\nso now I can reproduce this issue without .vimrc or plugins loaded, just do the following cmd:\nfiletype on\nautocmd FileType * sleep 20ms   \" the longer the issue more obvious\ntake path/to/file\n. @splhack I use fish. and in test, I think it's not the shell's problem. issue exists when use fish or bash.\nanyway, I mean using command like git log | mvim - to open output in macvim. not using mvim file to open file directly.. @splhack. Thanks for the tip. It is indeed caused by the pipe buffer. and after I use -f argument to block command execute, it work correctly. . @chdiza I use fish shell, And I notice Vim: Reading from stdin... showing after my next prompt show.\nso I guess this may means my previous command which open macvim has end, and only the buffering 65536 send to macvim.\nThis should be fish issue.  My old test was wrong, bash is fine. Sorry.. ",
    "airblade": "I can reproduce with the latest snapshot (101) from GitHub.\n. I rebooted my computer and tried snapshot 101 again:\n```\n$ mvim -u NONE -U NONE -i NONE -N\n\n$ Error detected while processing /Users/andy/.vimrc:\nline    1:\nE492: Not an editor command: asdfasdf\n```\nThe error message appears in the terminal about 1 second after the gui launches.\nThere's no error if I add the -v flag:\n$ mvim -v -u NONE -U NONE -i NONE -N\nHere are my MacVim's details:\n$ mvim --version\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Apr  4 2016 02:34:27)\nMacOS X (unix) version\nIncluded patches: 1-1707\nCompiled by travis@Traviss-Mac-165.local\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl             +file_in_path    +mouse_sgr       +tag_old_static\n+arabic          +find_in_path    -mouse_sysmouse  -tag_any_white\n+autocmd         +float           +mouse_urxvt     -tcl\n+balloon_eval    +folding         +mouse_xterm     +terminfo\n+browse          -footer          +multi_byte      +termresponse\n++builtin_terms  +fork()          +multi_lang      +textobjects\n+byte_offset     +fullscreen      -mzscheme        +timers\n+channel         -gettext         +netbeans_intg   +title\n+cindent         -hangul_input    +odbeditor       +toolbar\n+clientserver    +iconv           +packages        +transparency\n+clipboard       +insert_expand   +path_extra      +user_commands\n+cmdline_compl   +job             +perl/dyn        +vertsplit\n+cmdline_hist    +jumplist        +persistent_undo +virtualedit\n+cmdline_info    +keymap          +postscript      +visual\n+comments        +langmap         +printer         +visualextra\n+conceal         +libcall         +profile         +viminfo\n+cryptv          +linebreak       +python/dyn      +vreplace\n+cscope          +lispindent      +python3/dyn     +wildignore\n+cursorbind      +listcmds        +quickfix        +wildmenu\n+cursorshape     +localmap        +reltime         +windows\n+dialog_con_gui  +lua/dyn         +rightleft       +writebackup\n+diff            +menu            +ruby/dyn        -X11\n+digraphs        +mksession       +scrollbind      -xfontset\n+dnd             +modify_fname    +signs           +xim\n-ebcdic          +mouse           +smartindent     -xsmp\n+emacs_tags      +mouseshape      +startuptime     -xterm_clipboard\n+eval            +mouse_dec       +statusline      -xterm_save\n+ex_extra        -mouse_gpm       -sun_workshop    -xpm\n+extra_search    -mouse_jsbterm   +syntax          \n+farsi           +mouse_netterm   +tag_binary      \n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X_UNIX  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      \nLinking: clang   -L. -L/usr/local/lib -L. -L/usr/local/lib  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -framework Cocoa   -fstack-protector  -L/System/Library/Perl/5.16/darwin-thread-multi-2level/CORE\n. Thank you.  It's still happening...\n. @splhack Yes, I did exactly that.  I just did it all over again with the same result: MacVim launches and 2s later this gets written out in the terminal:\n```\n$ /Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE -i NONE -N\n<...2 seconds...>\n$ Error detected while processing /Users/andy/.vimrc:\nline    1:\nE492: Not an editor command: asdf\n```\n. @kopischke When I launch MacVim as per my previous comment, I see one MacVim process and two Vim processes.  Here's a screenshot from Activity Monitor:\n\n. I tested again with MacVim 7.4.1825 built via Homebrew.\n- I never get any messages in :messages.\n- Sometimes the channel log shows the output of the ls in the job; usually it doesn't.\n- The close_cb handler is never called.\n- The CPU processes remain low, as expected.\nThe log looks like this when the job's output is logged:\n==== start log session ====\n  0.000030 : Starting job: ls\n  0.000082 on 0: Created channel\n  0.014462 RECV on 0: 'Capfile\nGemfile\nGemfile.lock\nREADME\nRakefile\napp\nchannel.log\nconfig\nconfig.ru\ndb\ndemo.vim\ndoc\nfeatures\nlib\nlog\nprivate\npublic\nscript\nspec\ntest\ntmp\nvendor\n'\n  0.014508 ERR on 0: MMChannel_read(): Cannot read from channel\n  0.014528 on 0: Closing channel\nAnd like this when the job's output isn't logged:\n$ cat channel.log\n==== start log session ====\n  0.000030 : Starting job: ls\n  0.000065 on 0: Created channel\n  0.018400 ERR on 0: MMChannel_read(): Cannot read from channel\n  0.018431 on 0: Closing channel\nUsing mvim -v ... everything works as expected.\nHaving said all that, when I run jobs asynchronously in vim-gitgutter with the MacVim GUI, they now work :)\n. I confirm this solves the problem for me.  Thank you!\n. ",
    "ruedigerha": "I was having the same problem, and it persists for me on master.\nI noticed this with the \"dein\" plugin manager when trying to update plugins. In the GUI, the first eight jobs get started (invoking git), but no job reports results, so the updating stalls at that point. It works fine in the terminal (and in gVim on Windows, too). The logs look pretty much like those posted by airblade.\n. ",
    "jas0nwhite": "I see this, too...\nMacVim\nCustom Version 7.4 (102)\nOS X El Capitan\nVersion 10.11.5 Beta (15F28b)\n. After a quick test, #276 seems to fix the issue.\n. ",
    "xparkm": "Seeing same issue. Started happening after I let MacVim autoupdate. I completely removed my .vim/, .vimrc and .gvimrc and still seeing the errors when starting MacVim with the mvim script.\nNo errors though if I start gvim with either \n/Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE or \n/Applications/MacVim.app/Contents/MacOS/Vim -g -U NONE or\n/Applications/MacVim.app/Contents/MacOS/Vim -g -u NONE -U NONE\nMacVim\nCustom Version 7.4 (102)\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled May  1 2016 03:47:06)\nMacOS X (unix) version\nIncluded patches: 1-1811\nOS X El Capitan\nVersion 10.11.4\n. ",
    "beanwonder": "same problem here\nmac os El Capitan 10.11.4\nError detected while processing /Applications/MacVim.app/Contents/Resources/vim/runtime/colors/macvim.vim:\nline   54:\nE254: Cannot allocate color MacSelectedTextBackgroundColor\nline  109:\nE254: Cannot allocate color MacTextColor\nE254: Cannot allocate color MacTextBackgroundColor\nMacVim version 7.4 (102)\n. ",
    "neowit": "I confirm - this fix solves the problem for me. Thank you @splhack !\n. Hello @splhack \nThank you your feedback.\nMy main reason for opening this issue was to point out an inconsistency.\nNormal vim and console macvim both invoke the callback on job failure, and it is only GUI mode of MacVim does not call the callback, hence my assumption that in GUI mode macvim does not behave correctly in this sort of situation.\n. Hello @splhack \nUnfortunately I am not familiar with vim build/patch process (I just write vim plugins) and not sure how to test that diff. Is there an instruction which explains this process?\n. hello @splhack \nJust wanted to confirm that current version of macvim (8.0 includes patches: 1-32 ) handles job start failure as expected.\nThank you for merging the fix.\n. ",
    "rainhead": "It's now happening inconsistently. I couldn't repro the behavior above, but I could get it to reset position when closing the second to last tab (and therefore the tab bar). I disconnected the second monitor and couldn't get it to do anything wrong with a single monitor. Then I reconnected the second monitor and I can't repro any of it.\nIs there any way for me to debug this, or find some relevant information? If I knew where to set a breakpoint, I could try to get it to happen again.\n. I stopped being able to repro this as well, so shrug. Sorry for the bother.\n. ",
    "Robert-M-Muench": "Seems when I use:\n./configure --with-features=huge --with-macarchs=x86_64 --enable-python3interp=yes --enable-cscope=yes --enable-gui=macvim\nthings are working much better.\n. Hm... sorry for spamming this issue, but it's not so easy to sort out. Seems things are better because no Python is included at all:\nchecking --enable-pythoninterp argument... no\nchecking --enable-python3interp argument... yes\nchecking for python3... (cached) /opt/local/bin/python3\nchecking Python version... (cached) 3.5\nchecking Python is 3.0 or better... yep\nchecking Python's abiflags... (cached) m\nchecking Python's install prefix... (cached) /opt/local/Library/Frameworks/Python.framework/Versions/3.5\nchecking Python's execution prefix... (cached) /opt/local/Library/Frameworks/Python.framework/Versions/3.5\n(cached) checking Python's configuration directory... (cached) /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/config-3.5m\n(cached) checking Python3's dll name... (cached) Python.framework/Versions/3.5/Python\nchecking if -pthread should be used... no\nchecking if compile and link flags for Python 3 are sane... no: PYTHON3 DISABLED\nSo, any idea why Python3 can't be compiled in?\n. I'm using MacPorts and have added this to .vimrc\nlet $PYTHONHOME=\"/opt/local/Library/Frameworks/Python.framework/Versions/Current\"\nset pythonthreedll=/opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/libpython3.5m.dylib\nlet g:python_host_prog=\"/opt/local/bin/python\"\nAnd get this error when starting:\nmac-pro:~ robby$ Error detected while processing /Users/robby/.vimrc:\nline    2:\nE518: Unknown option: pythonthreedll=/opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/libpython3.5m.dylib\nUltiSnips requires py >= 2.7 or py3\n. I know, and I really don't get why it's such a mess. If I use the latest binary, I get the same problem as the first post in this issue.\nAdding: let $PYTHONHOME=\"/opt/local/Library/Frameworks/Python.framework/Versions/Current\"\nto .vimrc seems to get things up & working.\n. Using Snapshot 116 works. I suspect this has to do with the Python detection. I'm using the macports Pyhton version or the Apple stock one.. Sorry, for the delay I was not available...  snapshot-119 seems to work for me now.\nAnyway, please find all the crash-logs attached to have an other case for cross-checking the 119 fix.\nvim-crash-logs.zip\n. ",
    "MarkVillacampa": "Thanks! I'll report it upstream.\n. ",
    "jdthorpe": "Turns out I had this left over in my .vimrc from umpteen years ago when I first started using vim.  \n\" SYSTEM GENERATED STUFF BELOW\nsource $VIMRUNTIME/vimrc_example.vim\nsource $VIMRUNTIME/mswin.vim\nbehave mswin\nand in $VIMRUNTIME/vimrc_example.vim  there is this line:\n\" Add optional packages.\n\"\n\" The matchit plugin makes the % command work better, but it is not backwards\n\" compatible.\npackadd matchit\nwhich was the problem.  For some reason it's not a problem in MacVim 7.4.712 (which was my last version of MacVim) and also not a problem in the terminal. \n. ",
    "jamyouss": "Thank you for your answer but restart fix this issue.\n. ",
    "sindex": "Modifying the conditional at line 161 of the \"MMTextViewHelper.m\" file to account for a greater character range works but Meta+Greek chars keybindings now produce the corresponding Greek character. The same thing probably happens with a Cyrillic layout.\n. @splhack yes\n. ",
    "dbmrq": "Aha, disabling \"Draw marked text inline\" in the advanced options fixes this. I'm not sure if that was supposed to happen with this option enabled or if disabling it will have any unintended consequences, but for now it's looking good enough to me.\n. I ran into this problem too and just running a brew reinstall vim --with-python3 fixed it for me.\n. ",
    "ricka": "For anyone else that stumbles upon this, I was able to use :Ex instead of :e . and not have this issue.\n. ",
    "sdressler": "Sorry for not providing this information directly.\nPython versions are: 2.7.11 and 3.5.1 both installed via pyenv and verified with otool. I'm using the HEAD of MacVim as described on the wiki page. OS X version is 10.11.4. \n. Maybe as note, actually I'm seeing two issues:\n1. Following the wiki page, then Python 3 support is not available when I do not have Python 3 installed via homebrew. \n2. MacVim will crash when trying to use Python 3 when I additionally installed it with homebrew. \n. ",
    "kran": "sorry, I mean the tabbar.\n\nThis is the older version , core vim is 7.4.622. the tabbar is fix-width.\n\nThis is the lastest version, vim version is 7.4.1831, and the tabbar will fill full width of window, even there are only two tabs.\n. @jpetrie is there any way  to get the elder style ?\n. Thank you jpetrie. \nI just like the old tabs.\nIt's not a big deal, so just let it go.  :)\n. ",
    "ernstwi": "Thank you for the fix!\n. ",
    "amix": "Have the same issue\n. Bump up for re-interest. This is really affecting my zen moment with MacVim \ud83d\ude04\n. The MMFullScreenWindow.m implementation looks very \"complicated\", and maybe if we implemented it in a more simple fashion, it could do solve this issue.\n. Awesome stuff @splhack \ud83d\udc4f  \u2764\ufe0f. All praise @osheroff! \ud83d\udc4f \u2764\ufe0f \ud83d\udc83 . Has been fixed here. Note it wasn't the VisualSelection that was the problem, but the hack that happened in CmdLine.\nThe fix was to replace \nvim\nfunction! CmdLine(str)\n    exe \"menu Foo.Bar :\" . a:str\n    emenu Foo.Bar\n    unmenu Foo\nendfunction\nwith \nvim\nfunction! CmdLine(str)\n    call feedkeys(\":\" . a:str)\nendfunction\n . ",
    "ralphholzmann": "still happening on the 2nd gold master of macOS Sierra\n. Well lucky for us, it gets released today! \n. I gave up and switched to neovim :|\n. ",
    "aapit": "I can unfortunately also confirm this with the most recent official Sierra (10.12) in combination with the latest stable MacVim 8.0 (110).\nMost of the screen is black, except for some areas and a red blinking cursor.\nIt also happens when I switch back to full screen. Switching to a normal window restores the normal rendering (yikes, that ugly window chrome though!)\n. ",
    "sahibalejandro": "\ud83d\udd90\ud83c\udffc Same problem here! Any news on this issue? \n. ",
    "olimorris": "Just to add my voice to the, this is happening to me on macOS Sierra on a 2014 MacBook Air.\n. ",
    "francof": "+1\n. ",
    "Shigeki1120": "+1 \n. ",
    "athom": "+1\n. ",
    "qzg": "+1\n. ",
    "trevvvy": "@nicksergeant I don't think people are +1'ing so they can subscribe.  When there are 33 open issues on a project, isn't it nice to know which issues are affecting the most people? \nIs there an alternate mechanism in github for people to use to indicate their interest in an issue getting sorted?\n. ",
    "dimitriacosta": "@splhack I'm using 10.12.1 and getting the same problem with fullscreen\n. Oh yes, I forgot to mention that, I'm using the non-native fullscreen as well. ",
    "harobed": "@ralphholzmann it is fixed with neovim?\n. ",
    "nuc": "@splhack Having the same problem at 10.12.2 Beta (16C41b).\n. Thanks for the fix!\nUnfortunately, it feels a bit laggy, especially when moving the caret around. It doesn't feel slow in the native full-screen mode though \ud83e\udd14\nSo, I think I will be sticking in the native full-screen mode for now.. Thanks for having a look!\nThe lag is noticeable if you have really low key repeat delay and for example move the caret around. \nI hope that this PR fixes it.\nCheers. I tried out the build and it's definitely better than before.\nStill, when you hold a key down you feel some lag for a tiny bit, but then it starts to move faster.\n\ud83d\udc4d . ",
    "stranak": "\ncan you guys test the master branch?\n\nIt works great for me. Many thanks.\n. ",
    "lakshyaranganath": "Thanks for your work on this @osheroff \ud83d\udc4d \ud83e\udd47  Is there any progress being made towards optimizing the draw lag or has that been abandoned?\nSadly, like @nuc stuck with using the native full-screen mode for now.. ",
    "sloanlance": "I'll give that a try. Will backupcopy create those annoying files with a tilde appended to their names?\n. As mentioned in closed issue #733 that had referenced this one, I saw an even greater difference in version numbers, 8.1.235 \u2192 8.0:\n\nI was told that actually it was offering me 8.1.280.  The only indication of that was in the description, which was written as 8.1.0280 (with a leading \"0\" on the last segment).\nOverall, very confusing as to what version the user should expect to receive as a result of the update.. ",
    "akanosora": "Yep, that is the issue. So it has been patched?\n. ",
    "tkonolige": "I've updated this patch with the suggestions you've made.\nI'm not sure which changes belong in vim and which belong in macvim.\n. It looks like there's some issues with merging parts of this upstream. It would be nice to reconsider merging it straight into macvim instead.. @splhack rebased. You can adjust letter spacing using columnspace. My bet is you need set columnspace=-1.. Are you using a recent version of macvim?. ",
    "lkuchenb": "Thanks. Maybe the FAQ should also explain the difference between the checkbox in the settings and the user defaults system?\n. ",
    "dragonxlwang": "It seems it's  related to \"set nocompatible\", when commenting out this, macvim can behave correctly. (you also need to use \"vim -u ~/.vimrc\" to do so)\n. ",
    "clavichord93": "both are 7.4-106.\nbrew version is installed with brew install macvim.\norigin version is downloaded from github with MacVim.dmg.\n. ",
    "amw": "@splhack In case you are wondering what we're talking about. Here are tab bars from macvim-dev releases stream:\n\nAnd here are tab bars when compiling MacVim through Homebrew:\n\n. This new style is nothing like native macOS tabs. Some issues not present in apps like Safari/Finder/Pages:\n1. Tab bar only holds a small, finite number of tabs. Additional tabs go into a hidden list \u2013 even the currently active tab.\n2. The icons for new tab and that expansion list are custom-made and poorly aligned.\n\n\n\n. ",
    "rappazzo": "I find the new tabbar style hideous.  Can I request a config setting for the former style?  Pretty please? Or is the old style deprecated in OSX/MacOS?\n. I am running Mavericks and I see the style in @amw's second image from the comment on Sep 9.  That is the offensive looking tab bar.  It is also missing the close button on each tab (which seems like a regression). \n. ",
    "lifepillar": "Given the feedback on #351 , I think that this should be reverted. An alternative might be to add a menu item \u201cFind more color schemes\u2026\u201d that performs that search only upon request.\n. Granted, with that many directories it takes a little longer. But do you really have so many directories in your packpath? Because with a few directories, that cannot be the problem.\nAnd how would that explain that opening a window is slowed down only every second time?\n. If searching for colorschemes is a bottleneck, I'm afraid #331 should be reverted. Maybe, there is a way to cache the colorscheme list, say, at startup?\n. I have added it, but I have kept \u201cFind More Color Schemes\u201d as the last item.\n. The same for me. MacVim with the Core Text renderer off renders those glyphs correctly, as in TextEdit. It's only when Core Text renderer is on that I get overlapping diacriticals.\nSo, I have turned it off now.. I have made some tests, and it seems that MacVim does not need term_wait() as terminal Vim does. It still is a bit puzzling to see different behaviours (does MacVim do buffering differently? Or is simply just faster?), but I can live with that. Documenting such differences would be nice, though.. For reference, this is my function to send keys to a terminal buffer, which appears to work robustly in both Vim and MacVim:\n```vim\nfun! TerminalSend(bn, lines)\n  for l:line in a:lines\n    call term_sendkeys(a:bn, l:line . \"\\r\")\n    call s:term_wait(a:bn)\n  endfor\nendf\nif has('gui_running')\n  fun! s:term_wait(bn)\n  endf\nelse\n  fun! s:term_wait(bn)\n    call term_wait(a:bn)\n  endf\nendif\n```. >The timing of channel handling are totally different between GUI and non-GUI. Contribution(updating document) is always welcome :)\nIf anything, I'd like non-GUI Vim to behave like MacVim :). I cannot reproduce this any longer with MacVim 8.1.22. Thanks!. Is this a MacVim issue, though? If I open the OP's Asciidoc file in terminal Vim with vim --clean, syntax highlighting is initially on, but if I press G syntax highlighting is turned off. Also, Vim hangs for a couple of seconds when I press G, which makes me believe that something wrong is happening with some regular expression from Asciidoc's syntax file (or Vim's search simply times out).. Try this: open a long file, turn syntax debugging on with :syntime on, then press G. I see this message:\n'redrawtime' exceeded, syntax highlighting disabled\nUse :syntime report for timing details: e.g., matching asciidocLiteralParagraph alone takes over half a second.\nSo, the solution is either to increase redrawtime or (better) ask the developer of the Asciidoc syntax file to optimise the syntax file.. Ah, you are right. It happens when you set sidescrolloff to a positive value.. Thanks, I was not aware about such difference.\nI use my own terminfo file (~/.terminfo/78/xterm-256color), which enables italics in the terminal. If I launch MacVim (by double-clicking) and open a terminal window, italics is not enabled in that window because TERM is set to xterm and cannot be modified by MacVim. I can work around this issue by opening MacVim from Terminal.app as you suggest or by symlinking ~/.terminfo/78/xterm to ~/.terminfo/78/xterm-256color. In either case, my terminfo file appears to be loaded, as italics is enabled. If there is no other way, I'll go with the symlink (not sure whether that has side effects, though).\nBut I am wondering: since MacVim's terminal emulator supports (more than) 256 colors, why not setting TERM to xterm-256color by default?. ",
    "thinca": "\nCould you check it with snapshot-110 binary?\n\nI tried it, and the problem reproduced.\n\nbtw https://github.com/macvim-dev/homebrew-macvim doesn't have --with-lua option.\n\nOh, I didn't know. Thanks!\n. @ichizok Thank you!\n. ",
    "ichizok": "This issue is concerned with OS locale.\nexample:\n```\n% lua\nLua 5.2.4  Copyright (C) 1994-2015 Lua.org, PUC-Rio\n\nprint('\u3042' < '\u3044')\ntrue\nprint('\u3042\u3042' < '\u3044')\ntrue\nprint(os.setlocale(nil))\nC/ja_JP.UTF-8/C/C/C/C\nprint(os.setlocale(''))\nja_JP.UTF-8\nprint('\u3042\u3042' < '\u3044')\nfalse\n```\n\nLua comparing-strings uses strcoll, which is based on current locale (refering to LC_COLLATE).\n(We can set current locale by setlocale, or environment variables LC_ALL and other LC_*)\nOn OS X, the order of multibyte strings based on locale is different from Linux Glibc;\nLinux: '\u3042' < '\u3042\u3042' < '\u3044\u2019 (dictionary order)\nOS X: '\u3042' < '\u3044' < ... < '\u3093' < '\u3042\u3042'\nThus, when locale is set to other than \"C\" or \"POSIX\", the result of comparing multibyte strings may be environment specific.\n. This problem is due to feedkeys() in timer callback.\nvim\nnnoremap <F5> :<C-U>call TimerStart()<CR>\nfu! TimerStart()\n  call timer_start(50, 'Feedkeys')\nendfu\nfu! Feedkeys(...)\n  call feedkeys('iabc')\nendfu\nKeying <F5>, on TUI shows \"abc\" promptly, but on GUI MacVim doesn't show it until other any input (keyboard or mouse cursor moved) given.\nThe reason is, GUI has not check input buffer typebuf after timer callback. \nhttps://github.com/vim/vim/blob/ca8b8d6/src/gui.c#L2869\nwhen invoked timer callback in check_due_timer(), due_time is set to -1.\nhttps://github.com/vim/vim/blob/ca8b8d6/src/gui.c#L2877\nso gui_mch_wait_for_chars() waits for input forever.\nThus, when feedkeys() is called in callback, the input of feedkeys() must be handled in gui_mch_wait_for_chars() but MacVim does not so and simply waits for input.\nOther GUI Vim, gui_win32;\nhttps://github.com/vim/vim/blob/ca8b8d6/src/gui_w32.c#L2100\ngui_gtk_x11;\nhttps://github.com/vim/vim/blob/ca8b8d6/src/gui_gtk_x11.c#L6648\nboth of these have checked input_available(), which returns TRUE if feedkeys() gave input, in gui_mch_wait_for_chars ().\n. Yes, I checked log.\nIn addition, I found another doubtful code in my patch, I will fix them also and re-PR later.\n. When I have debugged by putting printf in gui_mch_wait_for_chars, almost all tests of test_channel (except Test_exit_callback_interval) did not pass through the code I changed in this PR.\nAdditionally, I ran tests several times on travis and all they passed, so I doubt that test failure was caused by my patch.. Could you try this patch?\n```diff\n--- a/src/MacVim/gui_macvim.m\n+++ b/src/MacVim/gui_macvim.m\n@@ -333,7 +333,7 @@ gui_mch_update(void)\n     static CFAbsoluteTime lastTime = 0;\n CFAbsoluteTime nowTime = CFAbsoluteTimeGetCurrent();\n\n\nif (nowTime - lastTime > 0.2) {\nif (nowTime - lastTime > 0.033) {\n         [[MMBackend sharedInstance] update];\n         lastTime = nowTime;\n     }\n```. I consider this problem was present since before and became obvious by #560 changes.\nIf so, the following patch will fix it (and some tests currently failing).\n\ndiff\n--- a/src/os_unix.c\n+++ b/src/os_unix.c\n@@ -5625,13 +5625,17 @@ mch_job_start(char **argv, job_T *job, jobopt_T *options)\n        close(fd_err[1]);\n     if (channel != NULL)\n     {\n-       channel_set_pipes(channel,\n-               use_file_for_in || use_null_for_in\n-                       ? INVALID_FD : fd_in[1] < 0 ? pty_master_fd : fd_in[1],\n-               use_file_for_out || use_null_for_out\n-                     ? INVALID_FD : fd_out[0] < 0 ? pty_master_fd : fd_out[0],\n-               use_out_for_err || use_file_for_err || use_null_for_err\n-                    ? INVALID_FD : fd_err[0] < 0 ? pty_master_fd : fd_err[0]);\n+       int in_fd = use_file_for_in || use_null_for_in\n+                       ? INVALID_FD : fd_in[1] < 0 ? pty_master_fd : fd_in[1];\n+       int out_fd = use_file_for_out || use_null_for_out\n+                     ? INVALID_FD : fd_out[0] < 0 ? pty_master_fd : fd_out[0];\n+       int err_fd = use_out_for_err || use_file_for_err || use_null_for_err\n+                     ? INVALID_FD : fd_err[0] < 0 ? pty_master_fd : fd_err[0];\n+\n+       if (err_fd >= 0 && out_fd == err_fd)\n+           err_fd = INVALID_FD;\n+\n+       channel_set_pipes(channel, in_fd, out_fd, err_fd);\n        channel_set_job(channel, job, options);\n     }\n     else. This was solved at 8.0.1393 (https://github.com/vim/vim/commit/6621605eb97cf5fbc481282fd4d349a76e168f16). Fixed.\nv8.0.1535 https://github.com/vim/vim/commit/6acadda8d60892ddf06449f1cc4286912b0c0c2b. I think it is not desirable to be different from upstream regarding to the behavior on TUI and thus should use gui.in_use.. I think it also needs for upstream, but I'd like to present together other fixes.\nSo we should apply it prior to upstream since there is marked problem(s) especially for MacVim GUI.. I updated PR: modified the patch and added #ifdef FEAT_GUI_MACVIM.. @splhack  Sorry, could you revert this commit?\nWhen build env is older than 10.10, NSOperatingSystemVersion does not exist so (I have not confirmed but) it will causes build fail.. Thank you!. According to the style of existing code;\ndiff\n--- a/src/screen.c\n+++ b/src/screen.c\n@@ -8385,7 +8385,10 @@ screen_char(unsigned off, int row, int col)\n            }\n            /* not sure where the cursor is after drawing the ambiguous width\n             * character */\n-           screen_cur_col = 9999;\n+# ifdef FEAT_GUI_MACVIM\n+           if (!gui.in_use)\n+# endif\n+               screen_cur_col = 9999;\n        }\n        else if (utf_char2cells(ScreenLinesUC[off]) > 1)\n            ++screen_cur_col;. Hmm, this change makes the display of ambiguous width characters broken when 'ambiwidth' is double.\nExample:\nStart MacVim GUI and input i\\<C-V>u03bbabc\\<Esc> (\u03bbabc).\nWhen set ambiwidth=single (default);\n\nAnd when set ambiwidth=double;\nApplied this PR:\n\nExpected (current behavior):\n\n. Some ambiguous-width characters have different glyph shapes depending on char-width.\nThus when handling a document styled assuming wide-characters, need ambiwidth=double.. Adding the condition ambiwidth=double. How is this?\ndiff\n--- a/src/screen.c\n+++ b/src/screen.c\n@@ -8391,7 +8391,10 @@ screen_char(unsigned off, int row, int col)\n            }\n            /* not sure where the cursor is after drawing the ambiguous width\n             * character */\n-           screen_cur_col = 9999;\n+# ifdef FEAT_GUI_MACVIM\n+           if (*p_ambw == 'd' || !gui.in_use)\n+# endif\n+               screen_cur_col = 9999;\n        }\n        else if (utf_char2cells(ScreenLinesUC[off]) > 1)\n            ++screen_cur_col;. @amadeus  That seems to be caused by https://github.com/macvim-dev/macvim/commit/f53f99012c8737d7d191e13518fdde80a58c422b. Please confirm.. I expect https://github.com/macvim-dev/macvim/compare/master...ichizok:fix/coretext-renderer can fix it (so need not revert). I will create PR soon.. @amadeus Please tell me unicode codepoints of those emojis.. Can you provide an example of problematic text and expected/actual displays?. Workaround: do :silent! pyx import sys first of all.. This was fixed in v8.1.0201 and MacVim already merged it. . @splhack @ychin \nIt appears this change has caused #721, so I think should revert it once.\nBTW, this guioptions-k does not work in my environment (using d0807a4aff9aebb34a982073a01294c45a0c4bc5).. Repro steps\nStart MacVim with GUI:\n/path/to/MacVim.app/Contents/MacOS/Vim --clean -g\nSet guioptions-k and then guioptions-T (add toolbar):\nvim\n:set go+=k\n:set go+=T\nExpected: Shows toolbar, and window size (height) does not change.\nActual: Shows toolbar, and window height increases by toolbar height.\nMacVim:\n\nMy understanding is that the following GVim (linux) is the correct behavior.\nWith guioptions-k, the window height does not change by showing/hiding toolbar.\nGVim (on Ubuntu):\n. This was fixed by #713 .. This problem is due to https://github.com/macvim-dev/macvim/commit/378032d85e8cbb75d02d58c77cdc530dfd7b418a (#708). And this guioptions-k seems not to work (in my environment).\nI think should revert it once.\n. @ychin Thank you, I confirmed the fix about toolbar on/off with guioptions-k.. NOTE I haven't confirmed on other IMs, there might be some problem.. @ychin  Sorry for the late reply.. and Thank you for improving \ud83d\ude04 . FYI: I measured the delay in Vim script in each CI workers by the following script.\nhttps://gist.github.com/ichizok/05b60543e8878716a6d91523d58490e9\nBranch: https://github.com/ichizok/macvim/tree/test/calibrate\nResults: https://travis-ci.org/ichizok/macvim/builds/485096677\n$ $VIMCMD -u NONE -i NONE -N -X -V1 -e -s -S .elapsed.vim +'qall!'\nxcode7.3\n1000x sleep 1m\nElapsed     = 1.508142\nCalibration = 0.663068\n100x sleep 10m\nElapsed     = 1.366583\nCalibration = 0.731752\n10x sleep 100m\nElapsed     = 1.039620\nCalibration = 0.961890\n1x sleep 1\nElapsed     = 1.000644\nCalibration = 0.999356\nxcode8.3\n1000x sleep 1m\nElapsed     = 3.285532\nCalibration = 0.304365\n100x sleep 10m\nElapsed     = 2.118319\nCalibration = 0.472072\n10x sleep 100m\nElapsed     = 1.191713\nCalibration = 0.839128\n1x sleep 1\nElapsed     = 1.038528\nCalibration = 0.962901\nxcode9.4\n1000x sleep 1m\nElapsed     = 3.452099\nCalibration = 0.289679\n100x sleep 10m\nElapsed     = 2.378064\nCalibration = 0.420510\n10x sleep 100m\nElapsed     = 1.170771\nCalibration = 0.854138\n1x sleep 1\nElapsed     = 1.060503\nCalibration = 0.942949\nxcode10.1\n1000x sleep 1m\nElapsed     = 8.529257\nCalibration = 0.117244\n100x sleep 10m\nElapsed     = 6.827235\nCalibration = 0.146472\n10x sleep 100m\nElapsed     = 1.489418\nCalibration = 0.671403\n1x sleep 1\nElapsed     = 1.145675\nCalibration = 0.872848. Thank you, I updated.. When build MacVim with env MACOSX_DEPLOYMENT_TARGET < 10.10 (.travis.yml has set =10.8) isOperatingSystemAtLeastVersion: isn't available, so cannot build.\nTherefore SystemVersion.plist part is needed in order to use MacVim built with env MACOSX_DEPLOYMENT_TARGET < 10.10 on 10.13.. Actually .travis.yml has set MACOSX_DEPLOYMENT_TARGET=10.8 so release-version (snapshot) MacVim is built for 10.8.\nThus snapshot 146 does not include the processing of checking-10.13 (below) and reproduce #620 .\nhttps://github.com/macvim-dev/macvim/blob/54c198e2d18660e8d880b67cbf01f3aae52896fe/src/MacVim/gui_macvim.m#L288-L295. On travis build (MACOSX_DEPLOYMENT_TARGET=10.8), MAC_OS_X_VERSION_MAX_ALLOWED is MAC_OS_X_VERSION_10_8 so that code block is dropped.. Oh, MAC_OS_X_VERSION_MAX_ALLOWED... I saw wrong. OK, I understand.. I updated.. ",
    "Atcold": "Any explanation? Do you actually pull https://github.com/vim/vim?\n. ",
    "alexvanu": "I've just tested this on a different MacBook Pro (Retina, 13-inch, Early 2015) with El Capitan, version 10.11.6 (15G1004) and MacVim, version 7.4 (107). On this one it works. So the problem might just be local. I'll keep trying to figure it out.\n. OK, two days later it works again. I have no idea what happened, nor what fixed it. Anyway, it doesn't look like a bug anymore. Sorry for the trouble.\nThese are my key repeat settings but I don't think that was it. Maybe playing around with the 'ApplePressAndHoldEnabled' setting had something to do with it.\n\n. ",
    "kliuless": "The ApplePressAndHoldEnabled does in fact affect MacVim. (reference: http://deferred.io/2015/08/03/macvim-disable-press-and-hold.html).\nIt's easy to disable though:\ndefaults write org.vim.MacVim ApplePressAndHoldEnabled -bool false\nNice thing about the above command is that you can still have press-and-hold enabled for other apps.\nNote that you must quit the MacVim application and relaunch it. If I didn't relaunch, but only opened a new window by typing mvim in Terminal, that window doesn't have the setting applied.. ",
    "afshinm": "I have this issue, too. But I think mine because of the plugins. \n. ",
    "guenti": "Same here (macOS 10.12, MacVim Snapshot 113), esp. if the file has 100+ lines. MacVim becomes useless for me. Typing has a delay of 1 second or more and scrolling is really slow.\nVanilla Vim 8.0.46 (without GUI), with the same config and plugins, is fast as aspected.\n. Hm, I can't confirm this behaviour, not even if I update all of the plugins in MacVim via :PluginInstall!. (I've compiled MacVim from the github sources.)\nbest regards\nMario\n. Sure.\nIf I fire up mvim this error came up:\nFatal Python error: Py_Initialize: unable to load the file system codec\nImportError: No module named 'encodings'\nCurrent thread 0x00007fffd39d23c0 (most recent call first):\nVim: Caught deadly signal ABRT\nVim: Finished.\nIf I start MacVim via App starter the menu exists, but no window at all, even if I select New Window from the menu.\nPython Versions are the standard system Python coming with macOS 10.12 and Python 3.5.2 from python.org.\nThis error cames up the first time. 'til snapshot-117 that was not happen.. Same behaviour with snapshot-119. See the pic.\n\n. The output is:\nMMAutosaveColumns = 134;\nMMAutosaveRows = 38;\nMMTopLeftPoint = \"{1852, 669}\";\nMMUseCGLayerAlways = 1;\nNSQuotedKeystrokeBinding = \"\";\nNSRepeatCountBinding = \"\";\nSUEnableAutomaticChecks = 0;\nSUHasLaunchedBefore = 1;\nSUSendProfileInfo = 0;\n\n. Hi there!\nI have an external monitor on my MBP and the behaviour only exists if MacVim opens on the external monitor. Weird.. ",
    "philipn": "This is definitely happening to me as well. After using MacVim for a day or two it becomes unusable until it's restarted. No specific event seems to trigger it. I'll be using MacVim and everything works fine, close my laptop for a day, open my laptop and drop back into MacVim and it'll be unbearably slow. Which is to say, no specific action like opening some file with lots of syntax highlighting, having a big directory scanned, etc seems to trigger it -- it just happens after some period of time, even if I'm not using MacVim (or my laptop) at all during that period of time.\nMaybe it has to do with the update / update-notification functionality?. I've verified that this happens with no plugins installed. After a day or two, MacVim will slow to a crawl.\nBut the weird thing is is, it only seems to happen if I open a new tab (control+T) without specifying a new file name.  If I open an existing file, e.g. \"file.txt,\" it won't be slow.  It's only slow in the newly-opened tab.\nRestarting MacVim entirely fixes the issue.\nThe \"update MacVim\" dialog appears prior to this happening, each time.. Could a build be made available that includes these fixes?  Does homebrew include them?. ",
    "sfsam": "That was fast! Also, thank you for MacVim - it's awesome!\n. ",
    "amcgregor": "Similar on macOS Sierra (10.12) running build 109; my entire pymode setup is currently broken due to missing symbols (linting, folding, etc., etc.) as configured in my dotfiles.\n. Running python3 gives me:\n```\nPython 3.5.2 (v3.5.2:4def2a2901a5, Jun 26 2016, 10:47:25) \n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n```\n\n\n\nApologies for not being more specific initially; when I meant fresh, I mean, I reinstalled and re-downloaded everything as of 8 hours ago.\n. I do not have a $HOME/.pyenv folder.  (I do not use pyenv at all.)  The virtual environments I do use (via python3.5 -m venv) do not have dylib artifacts.\nBecause I'm desperate to not lose productivity, I've also tested my exact dotfiles setup with VimR (a macOS NeoVim shell) without issue.  (I prefer MacVim, though, as my keyboard bindings are optimized for it and powerline glyph rendering is much improved.)\n. Hmm.  I'll try to be more clear.  My environment, and steps to reproduce, are exactly:\n- Install a fresh macOS Sierra on a newly formatted partition.\n- Download, run, and install command-line tools via Xcode from the App Store.\n- Homebrew install git, zsh, and a few other unrelated (non-Vim, non-Python) items.\n- Download and install the latest macOS .pkg installer from the official Python site.\n- Install the latest MacVim snapshot from the Github project releases page.\n- Issue the following command in a new, empty window: :py3 print(\"Hello.\")\nAlternatively, with a copy of my dotfiles linked in the initial ticket, simply attempt to open any .py file, which invokes python-mode and explodes identically.\nThe \"path might vary\", but virtual environments don't even enter into the crash, and of the components involved I'm only using \"official\" ones.  Even if I move my .vim and .vimrc out of the way entirely the crash still happens.\nPrior to my full system re-install things were working great up until the last two or three releases.  I couldn't upgrade without Python 3 support exploding, so I held off poking the beast until I had less of a crunch time at work.  Now, after a full system re-install, I can't get any version to work.\n. It's the one on Python.org, right on the front page.  I didn't feel it added anything, but here you go: https://www.python.org/ftp/python/3.5.2/python-3.5.2-macosx10.6.pkg\n. Now when running terminal vim I get:\nE518: Unknown option: pythonthreedll=/Library/Frameworks/Python.framework/Versions/3.5/lib/libpython3.5m.dylib\nBut MacVim does, in fact, work.  Curious to find out why vimR does not require this setting.  I'm reticent to add configuration to my general dotfiles (which are used across a number of machines, platforms, and users) that is incompatible, though.  Is there a way I can armour these two directives so they only run within the context of MacVim?\n. Thank you for your assistance with this.\nI am aware that the mvim tool exists.  That it exists is irrelevant; I can't run mvim over an SSH session to edit a remote file locally, for example, and no MacVim exists on my Linux machines.  Other users of my dotfiles aren't using MacVim, either.\nOne, interestingly, is using a configuration similar to mine but on Yosemite.  The two lines you've given don't work for him\u2014this is still an issue.  (Same Python .pkg version and everything, but on 10.10.5.)  He still gets the failure to find the encodings module.\nYou also didn't answer the question about being able to armour those lines against non-MacVim use.  I would greatly appreciate this, as without it, I can't include those lines in my general, public configurations.\nI'm sad to say I may have to stick with VimR simply because it works out of the box without CLI vim-breaking configuration.\n. ~~Perfect; that works.~~  Edited: Nope, wrapping in that if those lines aren't enabled, even in MacVim, so the problem returns.\n@topfloor using my dotfiles on 10.10.5 (freshly updated config, latest MacVim, same Python .pkg installer) continues to have the issue, however.\n. Yes, however, that causes brew to install a complete copy of its own build of Python 3, which defeats the purpose of using the official .pkg build.\n. Version 127 works without defining any environment variables to control Python functionality.  Setting PYTHONTHREEHOME does not cause version 127 to fail, but doesn't make version 128 work, either.  Same instant crash.\nEdited to add: my test case is literally just a one one .py file in my home folder; no venv involvement or anything complex on that side.  Standard .vimrc setup used across runtimes and hosts, as previously: https://github.com/amcgregor/dotfiles. Case was irrelevant to the test.  I tested every possible combination of lower case, upper case, title case, and underscore separated with each case.  I'm thorough like that, and none exhibited any change in behaviour.. Fair number of test combinations to get that output for.  Additionally, for some reason I doubt that the component that didn't change is the one causing the problems instead of the only one that did change (MacVim), ~~but I'll give reinstallation of that a go after finishing the below matrix~~.  Upon examination, reinstallation of Python is not going to happen.  (Multiple in-use venvs, several hundred checked out source-from-disk packages with distinct installation order\u2026 that'd take me a day for operational recovery.)\n\nNo Configuration\nMacVim 127 (Works)\npythonthreehome=\npythonthreedll=/usr/local/Frameworks/Python.framework/Versions/3.6/Python\nMacVim 128 (Explodes)\npythonthreehome=\npythonthreedll=/usr/local/Frameworks/Python.framework/Versions/3.6/Python\n\nOld Explicit Configuration\nOld configuration:\nlet $PYTHONHOME=\"/usr/local/Cellar/python3/3.6/Frameworks/Python.framework/Versions/3.6\"                                                                                                                  \nset pythonthreedll=/usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib\n(Paths do exist.)\nMacVim 127 (Works)\npythonthreehome=\npythonthreedll=/usr/locla/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib\nMacVim 128 (Explodes)\npythonthreehome=\npythonthreedll=/usr/locla/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib\n\nNew Explicit Configuration\nset pythonthreehome=\"/usr/local/Cellar/python3/3.6/Frameworks/Python.framework/Versions/3.6\"                                                                                                              \nset pythonthreedll=/usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib\nDoesn't seem to do anything at all.\nMacVim 127 (Still Doesn't Explode)\npythonthreehome=\npythonthreedll=/usr/locla/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib\nMacVim 128 (Still Explodes)\npythonthreehome=\npythonthreedll=/usr/locla/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib. @pstjohn I'd have been curious as to the result of running python3 -c 'import encodings' prior to reinstallation.  That command exhibits no errors for me, indicating to me that MacVim is failing to perform some step or set some variable (such as PYTHONHOME) prior to invocation of the embedded interpreter, leading to the failure to discover the stdlib.. @pstjohn Mine behaves correctly everywhere except MacVim.  Build 127 continues to work.  I'll stay pinned at this version (will check newer ones occasionally) until time comes to reinstall the machine.. @a7hybnj2 I can confirm, if you install the Homebrew version with --HEAD, the fix is included.\nHow I updated:\nbrew uninstall macvim\nbrew install macvim --HEAD --with-override-system-vim --with-luajit\nopen /usr/local/Cellar/macvim\nAfter that, I drag the MacVim app bundle/icon from the subdirectory of the now open Finder window into my Dock.  Done and done.. ",
    "krid78": "I see a similar issue with UltiSnips.\nThis is a possible duplicate of #349\n. ",
    "Viqsi": "I'm getting the same issue with simplenote.vim on OSX 10.11.6, so it's not confined to Mavericks.\n. I didn't consider #721 because that seems to involve multiple displays, and I only ever use the one.. ",
    "oluckyman": "Just updated to 8.0.3. and getting \"Sorry, this command is disabled\" while starting (because of YouCompleteMe plugin).\nAlso the same error when run command :py import sys\n. ",
    "liming01": "I get same error for YouCompleteMe plugin in macvim 8 on mac 10.11, however all versions of macvim 7 works fine.\nYouCompleteMe unavailable: dlopen(/usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_io.so, 2): Symbol not foun\nd: __PyCodecInfo_GetIncrementalDecoder\n  Referenced from: /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_io.so\n  Expected in: flat namespace\n in /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_io.so\n. ",
    "RubenVerborgh": "Thanks, the fix works!\n. Thanks! Might be useful to document this in upgrade notes, as this suddenly broke for me.\nFor reference, here's what I needed with MacPorts:\nset rubydll=/opt/local/lib/libruby2.4.dylib. Upgrading ruby do 2.6.1 helps.. ",
    "pluskid": "@splhack Great! I could confirm that solved my original slowness problem, although I have no clue why the slowdown happens only every second time for creating new windows.\nAlso the other solution mentioned in the comment of that blog post, putting \nlet g:did_install_default_menus = 1\nlet g:did_menu_trans = 1\nin .vimrc also work. But that completely disabled creating the menubar of macvim, and will dump some error of\nError detected while processing /usr/local/Cellar/macvim/8.0-111/MacVim.app/Contents/Resources/vim/runtime/menu.vim:                                                                           12:23:04\nline 1187:\nE334: Menu not found: File.New\\ Window\nto the terminal.\n. Is it possible to do the search using async api recently added to vim 8?\n. ",
    "shinespark": "Hi. I had tha same problem on OS X El Capitan (Version 10.11.6).\n```\n:echo &packpath\n/Users/user_name/.vim,\n/Applications/MacVim.app/Contents/Resources/vim/vimfiles,\n/Applications/MacVim.app/Contents/Resources/vim/runtime,\n/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,\n/Users/user_name/.vim/after\n```\nI don't have a .vim/pack and .vim/after/pack/ directories. \nAnd, I tried to start without a vimrc.\nshell\n$ gvim -N -u NONE --startuptime time.log\n```\ntimes in msec\n clock   self+sourced   self:  sourced script\n clock   elapsed:              other lines\n000.017  000.017: --- VIM STARTING ---\n000.230  000.213: Allocated generic buffers\n000.898  000.668: locale set\n000.914  000.016: GUI prepared\n000.918  000.004: clipboard setup\n000.929  000.011: window checked\n002.101  001.172: inits 1\n002.275  000.174: parsing arguments\n003.805  001.530: expanding arguments\n008.080  004.275: shell init\n008.161  000.081: inits 2\n010.218  002.057: init highlight\n010.261  000.043: sourcing vimrc file(s)\n010.275  000.014: inits 3\n011.192  000.602  000.602: sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/lang/menu_ja_jp.utf-8.vim\n011.773  000.046  000.046: sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/paste.vim\n8588.692  8578.332  8577.684: sourcing $VIMRUNTIME/menu.vim\n8756.968  168.361: starting GUI\n8757.017  000.049: reading viminfo\n8792.312  035.295: GUI delay\n8792.317  000.005: setting raw mode\n8792.325  000.008: start termcap\n8792.352  000.027: clearing screen\n8792.756  000.404: opening buffers\n8792.760  000.004: BufEnter autocommands\n8792.762  000.002: editing files in windows\n8792.783  000.021: VimEnter autocommands\n8792.788  000.005: before starting main loop\n8799.483  006.695: first screen update\n8799.487  000.004: --- VIM STARTED ---\n```\nmenu.vim is very slow.\nI suppose that it will happen all users.\n. ",
    "hyouuu": "My latest macvim is still slow to start even with empty .vimrc - thoughts?. ",
    "johnwhitington": "Please ignore. Works in (110)\n. ",
    "huangyg11": "brew upgrade python3 solve my problem. Thanks!\n. ",
    "Jaymon": "\ud83d\udc4d  Awesome! Seems to be working as expected. \nThank you :)\n. ",
    "kdart": "Ok, after clearing the config it seems to be working normal now. Thanks. \n. ",
    "camwright": "I'm getting similar issues.\n. I'm getting similar warnings, see #359 \n. ",
    "vdeep": "Similar issue here\n2018-01-20 12:45:20.007 MacVim[2357:78529] *** Assertion failure in +[LUTextAccessor rangeOfAddressInString:forRange:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/Lookup/Lookup-239/Framework/Classes/LUTextAccessor.m:334\n2018-01-20 12:45:20.007 MacVim[2357:78529] Lookup: Unhandled exception 'NSInternalInconsistencyException' caught in +[LULookupDefinitionModule _focusTermUsingQueue:handler:]\n2018-01-20 12:45:21.895 MacVim[2357:78529] *** Assertion failure in +[LUTextAccessor rangeOfAddressInString:forRange:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/Lookup/Lookup-239/Framework/Classes/LUTextAccessor.m:334\n2018-01-20 12:45:21.895 MacVim[2357:78529] Lookup: Unhandled exception 'NSInternalInconsistencyException' caught in +[LULookupDefinitionModule _focusTermUsingQueue:handler:]. ",
    "alanning": "macOS High Sierra v10.13.6\n2018-08-17 19:44:09.859 MacVim[4048:87262] A regular control size progress indicator <PSMProgressIndicator: 0x7f8a6cfe4660> with the frame size for small control size detected.  Please use -setControlSize: to explicitly specify NSSmallControlSize\nNot sure why it happens but only occurs sometimes.  Displayed in the terminal window that I launched vim from.. @splhack Sorry to comment on an old issue but I was wondering if you might remember what you did to correct this?  I'd like to try to fix this in electron and would like to use your patch for reference but I'm having trouble locating it in the following snapshot commits:\nhttps://github.com/macvim-dev/macvim/commits/snapshot-139\nIf you have time, would you mind pointing me to the commit that fixed this issue, please?. ",
    "llnek": "It was an issue with PathFinder, a new version of PathFinder fixed the problem.\n. ",
    "tverghis": "+1, just installed MacVim through brew on macOS 10.12.2, and opened the application using mvim. When I looked back at the terminal, I saw the following message, and other similar ones:\n2017-03-17 16:39:58.865 MacVim[64660:1253911] NSToolbarItem (<NSToolbarItem: 0x7fc37b46da00>) had to adjust the size of <NSPopUpButton: 0x7fc37db85aa0> from {40, 25} to the expected size of {42, 27}. Make sure that this toolbar item view has a valid frame/min/max size. This is an app bug, please do not file a bug against AppKit or NSToolbar! Break on _NSToolbarAdjustedBorderedControlSizeBreakpoint. ",
    "Kwpolska": "Yes, and I can still reproduce.\n. I tried the old tech support mantra: Have you tried turning it off and on again?\nAnd after rebooting my Mac, the Escape key works fine. Strange.\n. ",
    "jbozanowski": "I also have a scrolling issue ever since installing Sierra (MacVim 8.0 110, latest according to built-in autoupdater), sounds like it could be the same or similar - I narrowed mine down to some sort of sensitivity dead zone, i.e.: there is a clear threshold of finger speed on the trackpad - if I move my fingers faster than certain speed, it scrolls normally, otherwise it's not scrolling at all. No other apps are affected by this, also launched MacVim completely clean of my configs as per the debug instructions, but the issue persists.\n. Ah, yes, I forgot to mention in my previous comment - for me changing CoreText preference also doesn't seem to influence the issue too much, other than changing the rendering speed, so it's probably unrelated.\nI have also just tested this with a fresh user account, created only for this and the issue is still there, so it's unlikely that it's a problem with config/plugin/user environment.\n. ",
    "kjyv": "I guess your description is actually a bit more exact, it's the same problem I meant. Moving fingers slowly does not move anything until a certain speed is reached which usually results in scrolling much more than intended. It actually occurs also when not using CoreText but it seems the velocity necessary is a little less. The stopping I mentioned before is happening when the movement is slower again. I'm using the current HEAD version.\n. It seems this could be related to http://stackoverflow.com/a/39642552/974478 and other scrolling issues in third party applications that started to appear on sierra. In some cases scrolling gets very fast because more events are generated and the delta values are rounded to integer (jdk/swing). Others report that even in macOS' Terminal (which also scrolls only single lines), there is a minimum velocity now (http://apple.stackexchange.com/questions/254768/macos-sierra-scrolling-behavior-in-terminal-is-really-weird).\n. More digging: apparently NSEvent::deltaX is not the proper value, NSEvent::scrollingDeltaX is preferred (https://developer.apple.com/reference/appkit/nsevent/1524505-scrollingdeltax). But anyway, the frequency of events is too high, so I guess some have to be skipped if all movements should do something and vim only moves one line minimum. I've put together a simple patch with these changes and it solves the issue quite well for me: https://gist.github.com/kjyv/93bfe5e8b2e73ef7e76ceba8d33d6c2d\n. Sure, #380 \n. Ah, yes. It makes sense to also use hasPreciseScrollingDeltas. Looking at https://developer.apple.com/reference/appkit/nsevent/1525758-hasprecisescrollingdeltas, it says that it indicates the type of contents of scrollingDeltaX/Y, so maybe in both cases these values should be used? The scrolling behavior is fine for me, I didn't test it with a mouse wheel.\n. ",
    "jamescole": "FWIW, I'm also having this problem.  MacVim 8.0.3 on macOS Sierra\n. ",
    "F1LT3R": "I do not see anything related to camo in my .vim directory or bundle directory using cd ~/.vim && grep \"camo\\.github\" * -nri\n. Yes I've had trouble re-creating this too and can't find camo.githubusercontent in the mavcim source, although I did find .githubusercontent in the source, so the only things I can think of are: 1) github redirected something to camo.githubusercontent, 2) Little Snitch is wrong, 3) some other process was making outgoing connections through macvim.\n. I will keep an eye on it and let you know if it comes up again. I bought it up in case macvim was  being exploited to somehow share user content via github.\n. That's really good to know thanks @MishimaHaruna \nI'm on Github much of the day, so I'm sure I've hit camo.githubusercontentto load build-passed buttons for various README.md files.\nWe can probably close this.\n. ",
    "MishimaHaruna": "I'd guess this is just the Sparkle updater accessing the appcast at https://raw.githubusercontent.com/macvim-dev/macvim/gh-pages/appcast/latest.xml. Both raw.githubusercontent.com and camo.githubusercontent.com are CNAME to the same CDN domain, and Little Snitch is known to show cached DNS information (so if another application accessed the camo subdomain recently, then LS is likely to show you that instead of raw)\n. ",
    "adudek16": "I have this issue too. \nAny suggestions?. Is this behavior consistent between Windows, Linux, and OSX with the modification of using cmd vs ctrl + p?  . Issue is still happening\n. Ok. I'll open a case with them.\nOn Tue, Aug 8, 2017 at 6:10 PM, Kazuki Sakamoto notifications@github.com\nwrote:\n\nI don't think I can do something for this issue. Maybe support will help\nhttps://github.com/contact\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/534#issuecomment-321096222,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AO7hmfivdSUNnihJkfMzdtwgWTrs7fmlks5sWNzggaJpZM4Ony9k\n.\n. I suggest either correcting the build or correcting the description to reflect that it doesn't work < 10.13.\n\n+1 for a correted build as I am still on 10.12. Works for me.\nThanks\nOn Fri, Jun 8, 2018 at 3:05 AM, landersson notifications@github.com wrote:\n\nWorks for me on 10.11. Thanks!\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/686#issuecomment-395683174,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AO7hmYW4tDBTdm7LDOOTPU_4ZlnhimN8ks5t6jBmgaJpZM4UM5I0\n.\n. I can confirm that opening windows via the app is definitely broken under 10.14.2. If I run mvim from the cli a new window opens up quickly. I have 2 macs I can test with one with 10.14.2 and one with 10.13.6. I install from Binaries mostly.. Great. I did some testing and installed 151 to the desktop. Launching from there is as expected, but when installed into applications, then it is slow. I repeated same test with 153 and the behavior is the same. From the Desktop - speedy, from Applications - slow if at all.. \n",
    "achimnol": "I have similar issues, too.\nWhen I open a new vim window from MacVim's menu (Cmd+N), my guifont setting is applied well, but sometimes fails upon several restarts of the MacVim app.\nWhen I open a new vim window from mvim script in a shell, my guifont settings is NOT applied.\nWhen I open a new tab from mvim script to an existing window opened with Cmd+N, my guifont settings is kept applied in the new tab if guifont has worked for that window.\nWhen guifont settings is not applied, sometimes choosing another font in the font window opened by :set guifont=* does not work, but sometimes it does work.\nMy vimrc says:\n\" MacVim-specific options\nif has(\"gui_macvim\")\n  colorscheme glacier\n  set guifont=Menlo\\ for\\ Powerline:h12\n  set transparency=0\nendif\nI tried to disable Vundle and all my plugins using -Z (restricted mode) and --noplugin from the command line, but had no luck.\n. I finally figured out how to fix (workaround) my problem: use reattach-to-user-namespace when opening the shell (set in iTerm profile) and tmux.\nThis seems to be a problem in loading fonts installed in user's home directory (~/Library/Fonts instead of /Library/Fonts).\n. @jsholmes: your problem may be due to upgrade to macOS Sierra, not MacVim 8.0, according to this. I suspect this because macOS Sierra and MacVim 8.0 snapshot release dates are very close (Sep 20th vs. Sep 14th).\n. ",
    "prog666": "i guess it because macvim remaps keys for dvorak-qwerty somehow, but i can find any code responsible for that\n. switched to neovim-dot-app, it was hard to install, but worth it\n. ",
    "phriedrich": "I had this problem with snapshot 112, but not anymore with snapshot 113:\n\n[\u2026]\nUpdate QLStephen to 1.4.4\n[\u2026]\n. \n",
    "markwu": "Great thanks, I confirmed this bug fixed with snapshot 113.\n. It seems the timer_stop function blocked by something, becauee when you move the mouse cursor or type any candidate characters, than the popup menu just showed like I demo in those screencasts.\n. I really hope I can help. But, I am not familiar with timer and completion in vimscript, I just know how to reproduce problem with these plugins. \n. I try to disable matchit.vim at start by add this line to my vimrc\nlet loaded_matchparen = 1\nNothing changed.\n. I just wondering why revert the fix? Anything wrong?\n. @mortonfox Thank you, you save my day.. I installed CLT 9.1 two days ago (I already have Xcode 9.1), then I have this issue. I already build macvim more then ten times without problems before I install CTL for Xcode 9.1.\nI have to patch the if_python.c to fix issue. After that, macvim build successful without any problems.\nMy env.\n- MacOS 10.13.1\n- Homebew 1.3.8 (HEAD)\n- Formula comes from https://github.com/macvim-dev/homebrew-macvim\n. Here comes with the build error log: \nhttps://gist.github.com/markwu/f2f02457d268668f1725fca0f48f88d8\nThanks.. Just in case you need my brew config, here it is:\nhttps://gist.github.com/markwu/3900aa2d557fef56bc1f4b3f5ec71857. @chdiza Kindly see my 2nd attachment posted above, it is the result comes from my brew config, the CLT version is CLT: 9.1.0.0.1.1508540944.\nI installed it through xcode-select --install 2 days ago.. I just wondering, any updates for issue?. OK, I think I found the problem. It is hard coded in homebrew formula.\nhttps://github.com/macvim-dev/homebrew-macvim/blob/master/macvim.rb#L30. Since the bug already fixed by this PR https://github.com/macvim-dev/homebrew-macvim/pull/10 , I'll close this issue.. It's not working. Macvim just tell me can not load the ruby library, when I print version with :ruby print RUBY_VERSION.\n\n. I saw vim patch 8.0.0163 http://download.openpkg.org/components/cache/vim/8.0.0163 fix it, but it's in compile time, not in runtime. So I still need a way to build macvim against with my RVM ruby.. I think the problem is Macvim's build formula, maybe need  a way to specify the ruby version.. I did not blame MacVim, I did say Macvim's build formula, maybe need a way to specify the ruby version.\nI try to add the following code to the brew formula, it can compiled against with rvm ruby. Currently, there is no way to get the rvm ruby version information from environment. It is brew formula's restrictions.\nruby\n    ENV.append 'vi_cv_path_ruby', \"/Users/mark/.rvm/rubies/ruby-2.5.3/bin/ruby\"\nBut, with wrong dll path.\n:set rubydll, it shows rubydll=libruby.2.5.dylib\nAfter set the dll path again, \nset rubydll=/Users/mark/.rvm/rubies/ruby-2.5.3/lib/libruby.2.5.dylib\nThe command :ruby print RUBY_VERSION works, it shows 2.5.3.\n. No luck, the homebrew-core one still compiled against with system ruby 2.3.7, instead of rvm ruby 2.5.3.. Okay. I just come out my personal formula for this purpose.\nhttps://github.com/markwu/homebrew-personal/blob/master/Formula/macvim.rb\nYou can use the following command to install RVM version.\nbrew tap markwu/personal\nbrew install --HEAD --with-rvm-ruby=$MY_RUBY_HOME markwu/personal/macvim\nIt will add rubydll to default vimrc to make rvm ruby works. \nThe drawback of this method is no way to reinstall macvim, you have to brew uninstall macvim and brew install --HEAD --with-rvm-ruby=$MY_RUBY_HOME markwu/personal/macvim again.. It is for RVM only, because I can guess ruby dll's location from ruby command. \nMy formula fork from https://github.com/macvim-dev/homebrew-macvim made by macvim-dev team, I suppose this formula is more accurate than homebrew one.. Ok, I think I found the problem, homebrew use the superenv environment to compile all Formulas, it cause homebrew lose all environment  information include /usr/local/bin, ~/bin,  your custom ruby path and a lot of stuffs ... :(\nThe only way to add it back is to pass these information as option arguments, or put them in your system environment with HOMEBREW_* prefix, or get them from pkg-config if exists. They will keep during building process.\nSo, I come out a new --with-custom-ruby for this purpose, it combine homebrew-core/macvim and also fix a homebrew python3 dynamic dll link problem come with MacVim default vimrc. \nhttps://github.com/markwu/homebrew-personal/blob/master/Formula/macvim.rb\nAfter these change I can get all correct version of language binding.\nvim\n\" with correct homebrew python2 version\n:py import sys; print(sys.version)\n\" with correct homebrew python3 version\n:py3 import sys; print(sys.version)\n\" with correct homebrew lua version\n:lua print(_VERSION)\n\" with correct system perl version\n:perl print $^V\n\" with correct rvm ruby version\n:ruby print RUBY_VERSION. @eirnym Thanks, I never know this. I'll try it.. ",
    "al3xandru": "Where are these settings going?\nlet $PYTHONHOME=$HOME.\"/.pyenv/versions/2.7.12\"\nset pythondll=$HOME/.pyenv/versions/2.7.12/lib/libpython2.7.dylib\nIf set in .vimrc, MacVim complains that pythondll is an unknown option.\n. I downloaded the latest snapshot, set those values in .vimrc, but I see a long list of errors in Messages:\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\nTraceback (most recent call last):\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n  File \"<string>\", line 1, in <module>\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n  File \"/Users/apopescu/.vim/bundle/vim-pyenv/initialize.py\", line 12, in <module>\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n    import pyenv_vim\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n  File \"/Users/apopescu/.vim/bundle/vim-pyenv/pyenv_vim.py\", line 4, in <module>\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n    import subprocess\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n  File \"/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/subprocess.py\", line 430, in <module>\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n    import pickle\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n  File \"/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/pickle.py\", line 34, in <module>\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n    import struct\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n  File \"/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/struct.py\", line 1, in <module>\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n    from _struct import *\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\nImportError: dlopen(/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/lib-dynload/_struct.so, 2): Symbol not found: _PyUnicodeUCS4_AsEncodedString\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n  Referenced from: /Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/lib-dynload/_struct.so\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n  Expected in: flat namespace\nError detected while processing function <SNR>156_init[14]..<SNR>156_exec_file:\nline    3:\n in /Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/lib-dynload/_struct.so\nError detected while processing function pyenv#activate[2]..<SNR>149_activate[15]..pyenv#python#exec_code[1]..<SNR>156_exec_code:\nline    4:\nTraceback (most recent call last):\nError detected while processing function pyenv#activate[2]..<SNR>149_activate[15]..pyenv#python#exec_code[1]..<SNR>156_exec_code:\nline    4:\n  File \"<string>\", line 1, in <module>\nError detected while processing function pyenv#activate[2]..<SNR>149_activate[15]..pyenv#python#exec_code[1]..<SNR>156_exec_code:\nline    4:\nNameError: name 'pyenv_vim' is not defined\n. Update: I did follow the instructions for building it locally and while the compilation works, when opening python files I still get errors: \n```\nE518: Unknown option: pythondll=$HOME/.pyenv/versions/2.7.12/lib/libpython2.7.dylib\nError detected while processing /Users/apopescu/.vim/bundle/python-mode/autoload/pymode/virtualenv.vim:\nline    3:\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/Users/apopescu/.vim/bundle/python-mode/pymode/virtualenv.py\", line 5, in \n    from .environment import env\n  File \"/Users/apopescu/.vim/bundle/python-mode/pymode/environment.py\", line 6, in \n    import json\n  File \"/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/json/init.py\", line 108, in \n    from .decoder import JSONDecoder\n  File \"/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/json/decoder.py\", line 5, in \n    import struct\n  File \"/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/struct.py\", line 1, in \n    from struct import *\nImportError: dlopen(/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/lib-dynload/_struct.so, 2): Symbol not found: _PyUnicodeUCS4_AsEncodedString\n  Referenced from: /Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/lib-dynload/_struct.so\n  Expected in: flat namespace\n in /Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/lib-dynload/_struct.so\nError detected while processing /Users/apopescu/.vim/bundle/python-mode/ftplugin/python/pymode.vim:\nline   10:\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/Users/apopescu/.vim/bundle/python-mode/pymode/utils.py\", line 4, in \n    import threading\n  File \"/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/threading.py\", line 13, in \n    from collections import deque as _deque\n  File \"/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/collections.py\", line 21, in \n    from operator import itemgetter as _itemgetter, eq as _eq\nImportError: dlopen(/Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/lib-dynload/operator.so, 2): Symbol not found: __PyUnicodeUCS4_AsDefaultEncodedString\n  Referenced from: /Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/lib-dynload/operator.so\n  Expected in: flat namespace\n in /Users/apopescu/.pyenv/versions/2.7.12/lib/python2.7/lib-dynload/operator.so\nError detected while processing function jedi#init_python:\nline    7:\nError: jedi-vim failed to initialize Python: jedi#setup_py_version: Vim(pyfile):Traceback (most recent call last): (in function jedi#init_python[3]..158_init_py\nthon[48]..jedi#setup_py_version, line 16) \n```\n. I came to update my previous comments as after looking a bit more into the errors I realized that the placement of those 2 conf options is important.  _Thanks for following up on this.\nNow, setting $PYTHONHOME seems to impact the behavior of vim-pyenv which no longer is able to determine the actual pyenv version and set things correctly. I'm wondering if once again experimenting with the order will lead to better results.\n. I cannot tell if this is a good solution, but I ended up having the following:\nvim\nif has('gui') && has('mac')\n    if executable(\"pyenv\")\n        let cmd = 'pyenv version-name'\n        let pyenv=substitute(system(cmd), '[\\]\\|[[:cntrl:]]', '', 'g')\n        let cmd = 'python -c \"import sys;vt=sys.version_info;print \\\"%s.%s.%s\\\" % (vt[0], vt[1], vt[2])\"'\n        let pyver=substitute(system(cmd), '[\\]\\|[[:cntrl:]]', '', 'g')\n        let $PYTHONHOME=$HOME . \"/.pyenv/versions/\" . pyver\n        let $PYTHONPATH=$HOME . \"/.pyenv/versions/\" . pyenv . \"/lib/python2.7/site-packages/\"\n        set pythondll=$PYTHONHOME/lib/libpython2.7.dylib\n    endif\nendif\nNote that it won't work with Python 3.x as the pythondll doesn't account for the python version yet, but that shouldn't be hard to change.\n. ",
    "kovpack": "Sorry, checked settings one more time and just selected Prefer native full-screen support checkbox in Advanced tab in preferences - and it works.\n. ",
    "mengelbrecht": "Also see #312.\n. ",
    "R0GG": "with debug: \n\n. That's not the same issue as #300.\nI copy pasted the same part of code from 104 to 112 and it does not work.\n. I'm pretty sure that it's more a Vim issue than a MacVim issue.\n. Still not working. (8.0.1203 (139))\nTo reproduce the issue, you have to switch your keyboard layout:\n   go to system preference->keyboard->Input Sources, add french-> ABC azerty.\nThen add map <D-\u00e9> 2gt<CR> to your .vimrc.\nNow open 2 tabs in gui macvim.\nCheck that your keyboard layout is the french one and then try to switch to the 2nd tab using \ncmd + \u00e9 which should be cmd + 2 on a qwerty layout.\nIt is as simple as that.\n. ",
    "joeytwiddle": "Thanks, good to know.\nThey mention \"automatic background updates\" and \"user can choose to automatically download and install all updates\" but I don't see how to enable those feature for MacVim. (Nothing promising in defaults read org.vim.MacVim)\nHowever I did find in MacVim's preferences that \"Check for updates\" (when MacVim launches) was disabled, so I have turned that on. I expect that will interrupt me at a less critical stage in my workflow, but still make me wait for the download and then demand a restart.\nI would still prefer the download to happen in the background, and then update Vim when it next closes or opens.\n\nUpdate: I found a couple of interesting constants here. They aren't in the plist, but I have tried enabling them anyway, fingers crossed!\ndefaults write org.vim.MacVim SUAutomaticallyUpdate 1\ndefaults write org.vim.MacVim SUAllowsAutomaticUpdates 1\n. ",
    "ericvaladas": "@jpetrie would the new Sierra tabbing system fix the \"new tab\" button?\n\n. ",
    "NuckChorris": "^ would love a patch for that bug, it's minor but it's been irking me for months\n. ",
    "chew-z": "It is tricky to grasp initially but  there are different ways to run MacVim and they never meet.\nYou can run mvim script (this is how you probably started MacVim from iTerm) or you could run the application open -a \"MacVim\" (this is how Spotlight started MacVim). They are two separate instances. (and there is more)\nThe reason is that mvim script that comes with MacVim is far from perfect and it is so cause there are too many possible scenarios and the script keeps it simple. \nSo you could google - some people improve mvim script for their use scenarios. Like this or this or this.\n. ",
    "longkai": "It works. Thank you for your detailed info.\n. ",
    "andlabs": "How do the following render for you? I'm not a MacVim developer but I'm pretty sure this is something with Core Text and not with MacVim specifically, because I'm seeing similar issues in my own code with\nA\u032a\ufe20\nand\n\ud83d\udcbb\u0300\nbeing rendered differently between Core Text and the Cocoa text system. (In the former, the baseline is not adjusted to give room for the upper accent, so it (and by extension the bounds of the line) collides with any descenders in the previous line; in the latter, the accent is positioned above the glyph in TextEdit.app (though the selection highlight does not fully consume it) but collides with it to the side in Core Text.). Looking at it again, I think the problem is Core Text might not be using combining characters for line height calculations, even if a different font is used just for the combining mark? But from what I can tell Core Text uses every CTRun for line height calculation, not just the ones that start graphemes... Needs more investigation. Not sure if it can be fixed without discarding CTFrameDraw() and doing manual line placement.... Actually wait no there's only one run in that accented A string wtf. [18:00:45]  <andlabs>    my guess now is that Core Text does not respect the GPOS table while deciding line heights, since it just uses ascent + descent + leading\n[18:01:02]  <andlabs>    but isn't the font bounding box supposed to contain glyphs with their GPOS extents?\n[18:01:21]  <andlabs>    and that doesn't explain why shoving an accent on an emoji produces different results, not just a different vertical position\n[18:03:21]  <andlabs>    http://stackoverflow.com/questions/41857213/is-there-any-way-i-can-get-precise-metrics-line-ascent-line-descent-etc-of if I could get an answer on this I wouldn't need to use Core Text heh\n[18:05:59]  <andlabs>    of course that won't solve https://github.com/macvim-dev/macvim/issues/400 so in that case I'd have to aks how to get core text ot look the same as cocoa, if anyone has figured that out\n. 2017-02-05 14:01:29.226 macarialnogpostest[43533:24448181] 100 100 -> 15.9428\n2017-02-05 14:01:29.229 macarialnogpostest[43533:24448181] 130 100 -> 15.91\nokay somehow with GPOS etched out the bounding rect is actually TALLER, so I have no idea\nI do have a feeling AppKit doesn't use GPOS; I'd have to check how the one on the left looks against AppKit... and then that leaves the question of what AppKit does use. Okay no I was wrong; TextEdit.app does use GPOS and renders that properly, and also has the same font height line height issue after all! I guess AppKit renders properly then; either that or TextEdit does its own thing that I have to check...\n\ud83d\udcbb\u0300 is still rendered differently, though. I wonder what's going on there.. Will check this again (as well as the PR) at some point in the future. Thanks again!. ",
    "gotgenes": "@splhack I'm sorry. Unfortunately, I'm only a high-level user of Vim, and not knowledgable enough to create a small test. I only know the effects of this on neocomplete.\nMaybe @Shougo or @maralla would have an idea on how to demonstrate this issue in a small script.\n. @ichizok Thanks for chasing that down!\n@splhack Can we please re-open this issue, since the initial fix was reverted?\n. ",
    "Shougo": "I think test_timers.vim does not test timer feature in insertmode.\n. ",
    "czyin": "via Newton Mail \n[https://cloudmagic.com/k/d/mailapp?ct=pi&cv=9.2.5&pv=10.1.1&source=email_footer_2] \nloooop\n. ",
    "w0rp": "Yeah, just about. Install the plugin, install jshint if you don't have that, open the file, and type a little bit.\n. Okay, thank you for taking a look. I'll see if I can get it fixed in Vim.\n. ",
    "MLKrisJohnson": "I have already disabled SUEnableAutomaticChecks.\nFWIW, I see these settings when I run defaults read org.vim.MacVim:\nSUEnableAutomaticChecks = 0;\n    SUHasLaunchedBefore = 1;\n    SULastCheckTime = \"2016-10-25 18:48:17 +0000\";\n    SUSendProfileInfo = 0;\n. ",
    "settermjd": "@splhack, thanks for listing the fix. I had to change it from 3.5 to 3.6, but otherwise, it worked perfectly and MacVim IS BACK!!! Thanks!. I have that behaviour regardless of where I'm trying to use MacVim. :-(. ",
    "llinfeng": "Alternative solution from https://stackoverflow.com/questions/46367739/unable-to-use-vim-to-open-latex-files-on-mac-caused-by-python:\nbrew upgrade python3 solved my problem with using macvim, with exactly the same error as above.. ",
    "rodgert": "This issue cropped up for me this morning after installing the latest update. Downgrading homebrew python from 2.7.14 to 2.7.13_1 seemed to fix it.. ",
    "justinmayer": "Many thanks for the quick response, Kazuki. Following are steps to reproduce this issue (and apologies for not providing this in the original description):\nbrew install python\npip install powerline-status\n\n# .vimrc\npython from powerline.vim import setup as powerline_setup\npython powerline_setup()\npython del powerline_setup\nset laststatus=2\n\nWith the above setup on a fresh instance of macOS 10.12.1 Sierra, Powerline does not load on snapshot-116.\nAfter some experimentation, one workaround is to add the following line to ~/.vimrc:\nlet $PYTHONHOME=\"/usr/local/Frameworks/Python.framework/Versions/2.7\"\n\nOnce that line is added, Powerline loads as expected.\nThat said, would it be possible for MacVim to handle this automatically, without that additional (and Mac-specific) .vimrc configuration directive?\n. ",
    "isaki": "Some UNIX 101:\nWhen you launch mvim it backgrounds itself. Its STDOUT and STDERR and still tied to your terminal session. Thus, when it errors, it writes the error the relevant file handle, thus displaying the error in your terminal.\nYou don't need to press cntrl-c. You can press enter and get your prompt back if you really want to see it. Otherwise, you can continue to do whatever you are doing. The error output has no bearing on your STDIN file handle (which is what is used to read what you type).\nIf you really don't care about MacVim errors, you can write a quick script to hide this every time.\n#/bin/bash\n\nexec mvim $@ > /dev/null 2>&1\n\nexit $?\n\nLet's say you stored that as ~/mvim_noout.sh, you could then create an alias in your .bashrc file to call this script instead of mvim when you type mvim. Or, you can call it mvim and place it in a folder in your home directory and prepend that folder to your $PATH in your .bashrc.. I'm glad I could help! I did however forgot to mention something; don't forget to:\nchmod +x <the script>\n\nSo that it can be executed!. I have seen this issue on High Sierra 10.13.1 as well:\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Nov  6 2017 02:39:16)\nmacOS version\nIncluded patches: 1-1272\nCompiled by root@Traviss-Mac-713.local. Didn't see it was a duplicate; sorry!. ",
    "tombell": "I am encountering the same message in the terminal when I've launched MacVim from it.\n2016-11-29 22:31:52.994 MacVim[21909:13232266] IMKInputSession presentFunctionRowItemTextInputViewWithEndpoint:completionHandler: : *NO* NSRemoteViewController to client, NSError=Error Domain=NSCocoaErrorDomain Code=4099 \"The connection from pid 0 was invalidated from this process.\" UserInfo={NSDebugDescription=The connection from pid 0 was invalidated from this process.}, com.apple.inputmethod.EmojiFunctionRowItem.\n",
    "bdielman": "I'm seeing that as well.. ",
    "spencerlievens": "It is the new touchbar on Macbook Pro's I believe.. ",
    "rzyanhao": "Hey, I still have this problem. Is there any solutions?. ",
    "magiclyx": "Hi, snapshot-119 solved the problem, but it appears again in snapshot-144. . ",
    "jschloer": "I am also getting the \" No module named 'encodings'\"crash that guenti mentioned, but only when I start editing and only after upgrading this morning. Let me know if there's any information I can gather to help debug.\n. ",
    "blueshirts": "No longer an issue in 119.. ",
    "ncp1113": "Thanks for your reply.  I was prompted for an update, which I did.  The current version is still 8.0.  Here is what it says Custom Version 8.0 (119).  \nIt seems to be working okay now.  So I guess you can close it.. I didn't realize I could close it. So I just did.. ",
    "clamey": "I'm getting crashes on :set when I start with mvim -u NONE -U NONE -N\nI have also moved $HOME/.vimrc, $HOME/.gvimrc, and $HOME/.vim out of the way, so I don't think it's my setup (any help would be appreciated).\nI have done brew update && brew upgrade && brew install vim\nbugreport.txt\nVim_2016-12-07-101531_gnathic.crash.txt\n. Yes - mvim crashes on :set, /usr/local/bin/vim does not:\n```\n clamey \ue0b0 gnathic \ue0b0 ~ \ue0b0 $ \ue0b0 mvim -u NONE -U NONE -N\n clamey \ue0b0 gnathic \ue0b0 ~ \ue0b0 $ \ue0b0 Vim: Caught deadly signal SEGV\nVim: Finished.\nclamey \ue0b0 gnathic \ue0b0 ~ \ue0b0 $ \ue0b0 vim -u NONE -U NONE -N\n clamey \ue0b0 gnathic \ue0b0 ~ \ue0b0 $ \ue0b0 echo $?\n0\n clamey \ue0b0 gnathic \ue0b0 ~ \ue0b0 $ \ue0b0 which vim\n/usr/local/bin/vim\n```. Fix verified in 118 - thanks!. ",
    "LukeOrgana": "Sorry. I was insanely busy at work and didn't have time for much else. I guess you don't need the crash report any more? Thanks.. I'm running macOS Mojave 10.14.1. Yes, I had Core Text rendering turned on. Turning it off resolved the problem. Thank you.. I don't think I have any transparency settings. Here is my vimrc and colour scheme (renamed with txt extension so they would upload).\nvimrc.txt\nvalloric.vim.txt. > @LukeOrgana I couldn't reproduce the issue, but I'm suspecting it's happening due to your auto-load session script that's triggering some other behaviors. I suspect it's a similar issue as #804. Do you have non-native fullscreen set?\nI have \"Prefer native full-screen support\" selected.. > I made pull request #811 which resolves this issue (I think). I suspect both @matsm and @LukeOrgana have the old deprecated MMUseCGLayerAlways set to YES which causes this problem. I fixed it to properly ignore this flag in Mojave. (It's unfortunate that we used to tell people to set MMUseCGLayerAlways as a clutch around misc rendering issues. Moving on, there should be no hidden setting that you need to set to make rendering work)\n\nThe next release will have this fix. Meanwhile, you should do defaults delete org.vim.MacVim MMUseCGLayerAlways in Terminal which should fix this issue for you. I suggest leaving Core Text renderer on. It's enabled by default because it's the most fully featured and the officially supported method.\n\nI ran defaults delete org.vim.MacVim MMUseCGLayerAlways in the terminal, as suggested, and set Core text renderer on in my preferences and it now works perfectly. Thanks you.. I am also having problems with YouCompleteMe using MacVim 8.1.560.. ",
    "johnelliott": "Just some random thoughts below.\n\nAn undo hold-and-slide interaction like the mac system volume adjustment could be fun.\nThe iterm2 nightly build has a UI for color scheme changes, people might also like that idea. https://gitlab.com/gnachman/iterm2/issues/5281. I have no idea how difficult geting previews might be, could be tough.\n\n. ",
    "xjkdev": "maybe a bigger esc button can be added to it.. ",
    "m4c0": "IMHO, in the good spirit of VIM being extensible, the ideal solution could be a new toolbar named TouchBar, then, users can customise it by using commands like:\n:amenu icon=FooIcon TouchBar.Foo :echo \"Foo\"<CR>\nOr, maybe, just move the existing toolbar to the Touch Bar with some new config (similar to \"statusline\").\nI would love to code it and submit a PR, but I don't have a MacBook with Touch Bar... :(\nEDIT: small typos. For me, it's even worse. The black bands are really tall. After some trial-and-error, it seems the fullscreen window height is: total_screen_height - top_bar_height - dock_bar_height (for me, the full screen height and the space between the top bar and the dock are both exactly 710px. If I auto-hide my dock, the black band gets smaller.\n. ",
    "wiomoc": "568. \n. ",
    "tomlankhorst": "@m4c0 https://github.com/sindresorhus/touch-bar-simulator. ",
    "npalasseri": "A related question, I don't see the mvim script in the DMG bundle. Is that intentional? Currently I downloaded the b4winckler bundle and took the mvim script. Or is this that mvim approach is not a good choice?. ",
    "chinhau5": "I had exactly the same issue as you. It seems that starting the shell with reattach-to-user-namespace in tmux solved the problem. I have yet to pinpoint the problem though.. ",
    "ApolloTang": "re launch macvim solve the problem. @hakunin did you find a solution for this ? \n. if you try to install macvim via brew install macvim --HEAD but fail to compile please see https://github.com/macvim-dev/macvim/issues/790#issuecomment-444361408. possibly relate to #455, #726 ?\n. @ychin, I have update my description for the information you requested.\n. @ychin thanks for your response. \nI will wait and watch for #751, since it is so close to release.\nFor now I'll keep this open for reference in case other search for the same issue, but will close it on the release of #751.. Thank you so much for everyone who is working on #751 !. @ychin I brew upgrade macvim.\nnow using /usr/local/Cellar/macvim/8.1-151_2/bin/mvim\nturn off core text rendering.\nBut it is still flashing :( \n\nAm I missing something ? perhaps some dependency I have to update ? . This is indeed fixed, but has not added to brew yet. So\n$ brew upgrade macvim \nwill not install the correct the latest fix version, you will need to install the HEAD\n$ brew install macvim --HEAD\nHowever, this is a problem, because ruby/config.h is missing after Mojave update:\n\n\nSo for those of you like me, if you have the same problem you will have to download the correction version of Command Line Tool from https://developer.apple.com/download/more/ (for me this is Command_Line_Tools_macOS_10.14_for_Xcode_10.1) and install it. \nBut that does not give you ruby/config.h, you have to cd into \ncd /Library/Developer/CommandLineTools/Packages/\nand execute macOS_SDK_headers_for_macOS_10.14.pkg:\n$ open macOS_SDK_headers_for_macOS_10.14.pkg \nNow you can run $ brew install macvim --HEAD\nReference\nhttps://stackoverflow.com/a/53194299/3136861\nhttps://stackoverflow.com/a/53388305/3136861\nhttps://github.com/flori/json/issues/255\nhttps://github.com/macvim-dev/macvim/issues/751#issuecomment-444167716\n. Please let me know when the HEAD commit is added to brew, and I will close this issue.. related ? https://github.com/python-mode/python-mode/issues/897#issuecomment-424646475\n. > So, you have a plugin that calls Python 2 but you want to use Python 3? \nWell, is not that I want to use Python 3.\nit wasn't me, I think it is one plugin call for python2 and the other call for python3. \nWill MacVim allow plugins use their own version of python in the same instance ?\nAlso, is there a way to find out which plugin call which python version?  \nI don't know to check that, other than disable all plugins and enable one by one (which will be very time consuming, given that I have so many plugin installed).\nFor now I am sure that Denite used python 3.\nand I am suspecting that it is YouCompleteMe that call for python 2 (but I don't know how to verify this)  \n. After reading your comment:\n\nYouCompleteMe's README page claims to support both 2 and 3.\n\nthis is my solution:\n\" Python Setting {\n  set pythondll=/usr/local/Frameworks/Python.framework/Versions/3.7/Python\n  set pythonhome=/usr/local/Frameworks/Python.framework/Versions/3.7\n  set pythonthreedll=/usr/local/Frameworks/Python.framework/Versions/3.7/Python\n  set pythonthreehome=/usr/local/Frameworks/Python.framework/Versions/3.7\n\" }\nis not pretty, but works for now: all plugin exist happily and harmoniously :)\nclosing this issue.. Thanks again @ychin for your quick response . ",
    "rlue": "@lcd407 figured it out! It's the LC_CTYPE environment variable, which is present in my terminal environment and not in MacVim's when launched from the Finder. \nIs there any way to make MacVim set this environment variable the same way the shell does?. If I understand correctly, this is an issue with Finder, not MacVim. Ah well. :. As mysteriously as it began, this problem has disappeared. \n(FWIW, I had reformatted my laptop in the interim and got everything set up on it again; MacVim was working just fine on a fresh install then, even with my old dotfiles, which I keep synced between machines.). ",
    "fingermark": "@jpetrie nice.  https://github.com/vim/vim/commit/9be7c04e6cd5b0facedcb56b09a5bcfc339efe03\nI noticed the dmg wasn't produced.  Is that why MacVim's check for updates isn't showing anything?\nThanks again, splhack / jpetrie. ",
    "mianos": "OK posted in the upstream project and closing this.. ",
    "OskarSigvardsson": "Oh, silly me! I just reread the docs and saw that it does mention that it only works on Motif and Athena! I don't know how I missed that the first 10 times i read through it. Still, maybe a candidate for a feature enhancement? It would be real nice to have.... ",
    "justusgraham": "Homebrew already links as @splhack suggested, yet it doesn't overcome the issues with spotlight.  I've only been able to open macvim from terminal with mvim <filename>, or from opening within finder/Applications . ",
    "jwmann": "I typically open MacVim via double clicking a file from the Finder. \nRight now brew linkapps for the most part still works as intended, however it has been marked as deprecated.\nThe reason I made this issue was because of homebrew suggesting .app style formulae to migrate to brew casks and also to kind of brainstorm about the possible loss of brew linkapps\nI'm curious why brew linkapps just can't copy the .app to /Applications instead of a symlink. That should solve any Spotlight issues.. ",
    "luispuerto": "sometimes is necessary to have access to the app in the cellar directory. I just installed a package in R and it didn't work properly because I moved the QGIS.app from the cellar to /applications. \nI really think that the best solution would be move the app instead of link/symboic-linking it, and then create a symbolic-link in its place. I did that with this case and I fixed the problem while I had only one copy of the bundle app and I can call the app from spotlight (like any other mac app)\n. ",
    "Grueslayer": "Another option hard links (instead of symbolic ones) or Aliases like this:\n\nfind /Applications -type l -depth 1 | while read f; do osascript -e \"tell app \\\"Finder\\\" to make new alias file at POSIX file \\\"/Applications\\\" to POSIX file \\\"$(stat -f%Y \"$f\")\\\"\"; rm \"$f\"; done\n. ",
    "reliveyy": "@splhack You save my day. Thanks a lot!. ",
    "hakunin": "Doesn't seem to work https://www.dropbox.com/s/jdgmfaeb16ezptz/Screenshot%202017-05-12%2019.33.48.png?dl=0. @ApolloTang not sure, I started using neovim in iterm2 that I toggle with a hotkey so I don't have a need for an app anymore.. ",
    "mhainfarecom": "I'm not sure if this is what you expect but:\nto close spilts after opening a file I'm pressing:\nctrl+w, o\nI also tried to open new file as tab and close it with this:\nnmap . :tabclose\nthen I end up with only buffers. hope this help.. ",
    "todashuta": "How about use :badd {filename}?. ",
    "fanzeyi": "Weirdly I got the opposite error message today.\nError detected while processing /usr/local/Cellar/macvim/8.0-137_2/MacVim.app/Contents/Resources/vim/runtime/menu.vim:\nline 1244:\nE334: Menu not found: Tools.Spelling.To\\ Next\\ Error\nMacVim Version: Custom Version 8.0.1098 (137)\nVim Version\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Sep 29 2017 15:10:02)\nMacOS X (unix) version\nIncluded patches: 1-1098\nCompiled by Homebrew\nSystem version: macOS 10.13 (17A365)\nInstalled using homebrew with following options:\nbrew upgrade macvim --env-std --with-override-system-vim --with-python3 --with-lua --with-cscope. Same here, I always manually resize the window by a little to make the black screen go away. It is super annoying though. . ",
    "shadowhand": "@splhack thanks so much! Will this require a downstream change in Homebrew?. @splhack awesome. Any idea when the next snapshot will be taken?. ",
    "mredolatti": "Same issue here. Thank you!. ",
    "3xp10it": "When I add a line set editor='/usr/share/mvim -g $opts ${1:+\"$@\"}' to ~/.vimperatorrc,it does not work(/usr/share/mvim is the mvim script),then I change the line to set editor='/usr/share/mvim -g -f',it works,\nbut performs not very good,the detail is:\n1st:I pressed ctrl+i in some input box in firefox,then macvim activated\n2nd:I input some words in the activated macvim(gui) and run :wq\n3rd:The macvim(gui) exited\n4th:I found my current activated windows is not firefox,but still in macvim app(though the current macvim windows is\nclosed,but the macvim app is still running)that's to say,macvim didn't make me return back to\nfirefox after I have run :wq in macvim\nCan you help me?\n. Hi, @jpetrie I have realized that this may not be macvim's issue,but macos's issue,I have searched a lot about how to auto terminate a app after all windows are closed,but can not find a solution for my macOS sierra10.12.3,RedQuits seems good,but it seems not support macOS sierra.Here is the link:Solution. Thanks,it works by setting MacVim's preferences.. It works,thanks. @jpetrie . ",
    "nkanellopoulos": "Well, this is easy to miss. Why not include it inside the MacVim.app too?\n. No, the FAQ does not state I should use find to find mvim :)\nIt says that one should use mvim to open files from the terminal.\nBut I could not find mvim, so I searched for it in the app bundle using find, to be sure I did not miss it.\nBut I am suggesting to put mvim it in the app bundle too.\nI had installed MacVim 2 years ago using the DMG.\nI could not possibly remember (or know) mvim was only in the DMG.. ",
    "Eljay-Adobe": "As a heavy-handed workaround which will burn CPU cycles doing not very much, you can force a refresh.  On a slower machine, may cause MacVim to feel sluggish.\nif has(\"gui_running\")\n  set macligatures\n  set guifont=Fira\\ Code:h14 lsp=2\n  nmap <F1> :redraw!<CR>\n  nmap <Up> k:redraw!<CR>\n  nmap <Down> j:redraw!<CR>\n  nmap <Left> h:redraw!<CR>\n  nmap <Right> l:redraw!<CR>\n  nmap k k:redraw!<CR>\n  nmap j j:redraw!<CR>\n  nmap h h:redraw!<CR>\n  nmap l l:redraw!<CR>\nendif. ",
    "svavantsa": "The reason I'm compiling on the Linux is just incidental. Ultimately the\ngoal is to scan for security vulnerabilities using hpe fortify, before we\nauthorize our developers from using it.\nSince you said that it can be compiled in any platform as it is written in\nC, please look into this and help me go through it successfully before\nscanning the code for security vulnerabilities.\nOn Wed, Mar 22, 2017 at 9:08 PM Kazuki Sakamoto notifications@github.com\nwrote:\n\nEh, well, this is MacVim, it is for Apple macOS. Technically speaking, Vim\npart of this repository could be compiled for other supported platform\naside from macOS, But it is not intended. I recommend you to visit\nhttp://www.vim.org/ .\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/481#issuecomment-288587322,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEXDyXT79Fv4Eys658CT14yanYUmSH-Bks5rocYkgaJpZM4Ml1o5\n.\n-- \nSent from my iPhone\n\nSurya Avantsa\n. Ok. I got over that by installing ncurses-devel not just ncurses. Now I am getting a syntax error in option.c file.\nmake\ngcc -c -I.       -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/option.o option.c\noption.c:1948:24: error: \u2018PV_MMTA\u2019 undeclared here (not in a function)\n        (char_u *)NULL, PV_MMTA,\nPlease understand that as I work for the US Department of Homeland Security and our developers have requested to use this application,  I need to be able to compile it before scanning it and letting them use this. So I appreciate your cooperation and suggestions to make it work.. Now, that makes sense. Thank you for your clarification and your patience.. ",
    "pstjohn": "on updating to the most recent snapshot (129) I also would get the python-related crash\n```\nFatal Python error: Py_Initialize: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'\nCurrent thread 0x00007fff79181000 (most recent call first):\nVim: Caught deadly signal ABRT\nVim: Finished.\nWhen trying to load any modules which required python. I was able to fix it with a `brew reinstall python3`. @amcgregor, ran into this issue again today (not sure why, I don't think I updated..) `brew reinstall python3` fixed the problem again. Before that though I ran `python3 -c 'import encodings'` and got the same error:\nFatal Python error: Py_Initialize: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'\n``. I can't get either snapshot 135 or 136 to work, with the same error message.brew reinstall python3` hasn't fixed it as it has in the past.\nSnapshot 134 works fine.. ",
    "thefonso": "Followed above instructions...problem persist.  cli vim :ruby p RUBY_VERSION displays 2.4. macvim :ruby p RUBY_VERSION displays 2.0.. ",
    "adamneilson": "Excellent!. ",
    "sidyll": "I'm not sure if this is related, but I just updated to the latest version (not sure which one I was before, but generally I accept all automatic updates) and fullscreen is broken for me. I really don't understand why this changed. Seemed perfect before.\nWhat happens is that when I enter fullscreen, the max window height is preserved. Since out of full screen MacVim has the menu bar, the height is smaller than the full screen possibility. So I'd see black bars on top and bottom of the screen. This still happens. However: previously I'd hit \u2303\u2318Z and it would fix itself. Yes, sometimes the white rectangle appears briefly but soon disappear, or disappear when creating a split.\nNow, zoom does nothing. I see the status bar moving but then goes back in a flash. And I'm left with black bars on top and bottom of the screen.. Thank you @s4y, I will post as another bug with more information.. ",
    "AnnatarHe": "@jpetrie Can Macvim make an attribute to control the vertical style?\nI have to say the UI is so ugly. I believe that many people have the same feelings as me.\n(I even gave up mac because of this.\ud83d\ude11). ",
    "gjgrace": "I am experiencing the same issue. Any resolutions?. ",
    "ralfpapenkordt": "Same here with Moom as window manager. The problem was introduced with the commits 3fb41cc and 32e1fc9, especially the line 664 in src/MacVim/MMCoreTextView.m:\ndrawPending = NO;\nCommenting this line eliminates the redraw problem (and wrong resize problem of the MacVim window).\nBut I do not think, that this is the final solution. Maybe someone with a deeper understanding of the window redrawing in MacVim can take a look at the aforementioned commits.. ",
    "JESii": "Same situation for me; I banged on this for a bit and it seems to happen only with the following Spectacle command sequence:\n{Alt-Cmd-C}{Alt-Cmd-F}\nIn other words, I center the window, then go full-screen with the window. All other combinations worked just fine in my testing.\nEl Capitan 10.11.6\nMacVim Custom Version 8.0.596 (133). ",
    "L1Cafe": "Can confirm, Amethyst as well.\nEasy to reproduce on Amethyst too.\n1 - Have MacVim as the only window.\n2 - Open a new window (preferably one without strict resizing limits, Safari or a text editor should do the job fine).\n3 - Amethyst kicks in and resizes both windows to halves of the screen.\n4 - Close the previously opened window.\n5 - Amethyst kicks in and puts MacVim fullscreen again.\n6 - Vim is now almost entirely black except the current line.. ",
    "drifkin": "I find the same problem using Slate (https://github.com/jigish/slate). If I create a new window (e.g., using mvim or cmd+N), and then immediately size the window so it's completely fullscreen, some of the window will be black and if there's text on screen, it will often be duplicated.\nI can confirm that ctrl+L seems to fix it, or just resizing it a little bit.. ",
    "jstrater": "Same problem happens when using Divvy to resize MacVim windows. As with the other tools, C-l redraws successfully.. ",
    "benoittgt": "Isn't an issue that could be fixed regardless the comment https://github.com/macvim-dev/macvim/issues/497#issuecomment-299442827 ?. ",
    "speckins": "Sorry, I just realized snapshot 131 was released to fix this issue.  I assumed that the \"new update available\" was really the newest one.. ",
    "StaverDmitry": "I also experience this issue on mbp 2017, it's better compared to terminal but still laggy. The 5k video provided in the answer above is a great example. After applying the command defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES\nmy macvim's scrolling became insanely slow, I know you're not supposed to scroll using vim indeed, but when I just try to move a few lines lower I experience a pretty big delay. Removing core text renderer option helped me better but the scrolling speed is a bit lower as well.\nmbp 2017 high sierra\nBTW a little offtopic, can I ask you people a question please. Is it ok that both in terminal.app and iTerm2 vim renders scrolling super slow comparing to linux terminal, do people just live with that or is there a solution? The only terminal worked for me was hyper I suppose because it uses html+js. ",
    "CodeMonkeyKevin": "Any update on this.. @sachka has already sent a PR for this. I have used with patch for about a month now works great.. @jordwalke rebuilding and testing now.. any chance this will be merged into master anytime soon?. @splhack no perceived side effects thus far.. ",
    "OSSYULYYZ": "Please Delete This. I just noticed you can use Edit in the toolbar to change themes.... Please delete this issue\n. ",
    "eelcocramer": "I think this has already been fixed in commit d62b707304cf4cf79148b7d380efff9c22886f11 \n. ",
    "davidchambers": "I assumed someone would edit the title of the GitHub release. It wouldn't break anything, as it's not used in URLs. It was just a suggestion, though. :)\n. ",
    "mpacer": "Hm, closing because this seems to be tied to an issue from https://github.com/jiangmiao/auto-pairs not macvim. . ",
    "EarthCitizen": "My work laptop is locked down, so no possible way to use MacVim.. ",
    "Yggdroot": "This is a known issue, the same as https://groups.google.com/forum/#!searchin/vim_mac/getchar%7Csort:relevance/vim_mac/5adx7eFV_fU/BAJMrdzkFDkJ,\nCan it be fixed?\n. This patch makes performance a little better, but does not fix the issue completely.. ",
    "drougojrom": "The same issue on macOS High Sierra 10.13 GM candidate.. ",
    "UncleVic": "Like this issue on macOS High Sierra 10.13\nElectron[14728:1079433] *** WARNING: Textured window <AtomNSWindow: 0x7fc6fa699bd0> is getting an implicitly transparent titlebar. This will break when linking against newer SDKs. Use NSWindow's -titlebarAppearsTransparent=YES instead.. ",
    "chang48": "I also stumble on the same issue on High Sierra 10.13:\n\nMacVim[8898:804453] *** WARNING: Textured window  is getting an implicitly transparent titlebar. This will break when linking against newer SDKs. Use NSWindow's -titlebarAppearsTransparent=YES instead.. Just downloaded snapshot-139, no more warnings on macOS 10.13 17A405.\nGreat job, thanks a lot!. I believed this has been reported here:\nhttps://github.com/macvim-dev/macvim/issues/525\n\nPerhaps we should merge the threads?. ",
    "joevo2": "Same issue with high sierra https://github.com/electron/electron/issues/10559. ",
    "DexIO": "same issue\nWARNING: Textured window  is getting an implicitly transparent titlebar. This will break when linking against newer SDKs. Use NSWindow's -titlebarAppearsTransparent=YES instead.\nAlso electron icon looks different. ",
    "basmoura": "Same issue here. I'm having this issue\n2017-10-02 22:00:25.847 MacVim[37856:14232413] *** WARNING: Textured window <MMWindow: 0x7ff207435de0> is getting an implicitly transparent titlebar. This will break when linking against newer SDKs. Use NSWindow's -titlebarAppearsTransparent=YES instead.\nThe MacVim do not stars on fullscreen . My bad @ActionScripted! . ",
    "AlexVentura": "Same issue\nMacVim Custom Version 8.0.1175 (138)\nMacOS 10.13 High Sierra 10.13 (17A405). @splhack Good job! Now it works like a charm using MacVim Snapshot 139 on MacOS 10.13 High Sierra 10.13 (17A405)! . Same issue\nMacVim Custom Version 8.0.1175 (138)\nMacOS 10.13 High Sierra 10.13 (17A405). Mmmm taking your answer, I think the problem goes with command line tools because I just have this installed and not Xcode and I still getting same issue in both, MacBook Pro and iMac.\n. I try what @vitahlin said but it didn't work for me.\n\nTo list all available updates you need to run the next command:\n    softwareupdate -l\nThen to update only command line tools run the following command:\n    sudo softwareupdate -i \"Command Line Tools (macOS High Sierra version 10.13) for Xcode-9.0\"\n\nThen I tried open MacVim but I still getting the same error.. @mario-grgic As you said, it maybe ok with only Xcode installed. Because with only command line tools installed do not work yet!\nI have tried in two different MBP's and it didn't work to only install clt.. There's a new MacVim release to fix it! Now it works like a charm using MacVim Snapshot 139 on MacOS 10.13 High Sierra 10.13 (17A405)! https://github.com/macvim-dev/macvim/releases/tag/snapshot-139. ",
    "jakechan2012": "I have the same issue when install with dmg or brew cask install macvim, but brew install macvim works well. ",
    "vitahlin": "Same issue. . Thanks a lot.. @AlexVentura Sorry,  I found that it did not work well so I removed my comment. . ",
    "merqurio": "@splhack No warnings with snapshot-139. \nmacOS 10.13 (17A405). ",
    "yousong": "I thought CtrlP is a file finder plugin and ag is a file content searcher utility.  I only occasionally use ag with Ack plugin, most of the time I just invoke ag directly on the console.  But I digressed ;)\nEDIT: Reading my  original pos again, it seems that CtrlP also uses grep...  I will see if I can confugre it to use ag instead.  Thanks for the info, @alisnic . Hi, @alisnic , the \"grep\" in my original post it's typo and I was actually using \"find\" (https://github.com/yousong/dconf/blob/master/data/_vimrc.plugins#L75).\nIt also seems that in this case \"find\" is the more appropriate tool for listing directory content: it does not need to scan through file content.  But we really digressed more here ;)\n\u279c  ~/.vim/bundle/ctrlp.vim git:(dconf) time find . -type f >/dev/null\nfind . -type f > /dev/null  0.00s user 0.00s system 72% cpu 0.006 total\n\u279c  ~/.vim/bundle/ctrlp.vim git:(dconf) time ag . -l --nocolor --hidden -g \"\" >/dev/null\nag . -l --nocolor --hidden -g \"\" > /dev/null  0.00s user 0.01s system 73% cpu 0.011 total. @eirnym, when I searched for vim gui, macvim pops up in the google results.  I never tried original vim gui on osx.  Does it exist?  I will happily switch to it if it works.. @eirnym , thank you for the info.   I just tried :!sleep 5 and :r !sleep 5, both can be interrupted by Ctrl-C in comparison to :call system(\"sleep 5\").  Do you know if this is expected result?  I will try to patch the said plugins.. Close this for now.  Guess I will be more careful playing with vim plugins ;). And thank you guys for your previous times on this. ",
    "andportnoy": "nevermind, saw this\nhttps://github.com/vim/vim/pull/1695. ",
    "DivineDominion": "Renaming was just to clarify that it's not just a String anymore, but I'm fine with reverting that. NSTextStorage is available since 10.0, if I'm not mistaken, not 10.10, so there should be no problem.\n. Phew, no, sorry. Was a tip I got a few weeks ago. Can try to get a good Instruments picture with a vanilla Cocoa project to show that this is an important factor in large documents.\n\nOn 3. Aug 2017, at 19:36, Kazuki Sakamoto notifications@github.com wrote:\noh, thank you for pointing out. I thought it was 10.10. do you have any information of the performance gain? like Instruments screenshot.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n. ",
    "alexluecke": "You were correct, this ended up being a zsh issue. I had to symlink my main .zshrc profile to ~/.zprofile and MacVim began behaving normally.. ",
    "garbagemule": "Possible duplicate: https://github.com/macvim-dev/macvim/issues/490. ",
    "iain": "I feel like a kid asking for the most expensive Lego for Christmas, but if I could choose any style of tabs, it would look like iTerm:\n\n. ",
    "ActionScripted": "@tushar00jain, @iain are there specific features you're looking for with regards to native tabs? Would it just be to have the option of darker tabs and slightly updated UI/UX?\nNative tabs don't have a lot in the way of customization and have a limited feature set.\niTerm2 isn't using native tabs. They're using a version of PSMTabBarControl that they've modified: https://github.com/gnachman/iTerm2/tree/master/ThirdParty.\nMacVim is using PSMTabBarControl too! It just doesn't have the same modifications: https://github.com/macvim-dev/macvim/tree/master/src/MacVim/PSMTabBarControl\nI do think that with High Sierra the GUI code base could use an update as there are several legitimate issues like full screen not working, NSWindow errors, etc.\nPerhaps part of that could be bringing over some features like a darker UI with dark tabs as an option.\n(I'm a long-time web developer and am not very familiar with Objective C. I would love to help with MacVim development (and I'm learning) but please take these comments with a huge grain of salt.). @basmoura I believe your issue may be related more to #525. I've had this issue also. I've also had this lead to other issues with other windows like text input hovers that only manifest while MacVim is open.. ",
    "tushar00jain": "@ActionScripted I would say what I would love to see is something more than just a darker tabs, although this would also be nice to have.\nTo give an analogy, one can open multiple tabs inside of iTerm, each of which run a different session of vim. However, this is currently not possible with MacVim. Opening a new tab in MacVim is native to vim in the sense that it just uses the same session with all tabs and all buffers can be accessed from any of the tabs.\nTo have multiple sessions of MacVim, one needs to open MacVim in a new window. I'm not sure which approach would be the easiest to approach this but it seems that OSX already supports opening multiple windows as tabs. If it helps, VS Code is doing exactly this with its native tabs feature.. ",
    "dougfales": "(Sorry, accidentally opened this against macvim-dev. Meant to open it against my fork.). Hi @jordwalke, thanks for asking! I pushed the code to my fork a few weeks ago. There are some rough edges, but that's mostly because I got this to a point where it was functional for me, then didn't have time to polish it much. I've been using it for years myself and finally decided I should push it up in case someone else found it useful. I also have a ton of todos that I need to create GH Issues for so I don't lose track of them.\nIt should build as is if you follow the directions in the README, which I think are basically identical to the vanilla MacVim build instructions.\nHere's a screenshot:\n\nLet me know if you think this might be useful. I would love to jump back into it at some point. Maybe the knowledge that I'm not the only one interested would be the right catalyst for me to pick it up again.. Thank you @splhack !. ",
    "ccesare": "I'm also having this problem.\nFrom poking around I thought it might be related to the fact that I'm using pyenv, but the error certainly looks like it's Xcode related.. That was it. I had accepted the license via the console, but I hadn't opened Xcode since updating it. Worked like a charm after I did that.. ",
    "mortonfox": "I got that error message too.\nIf you haven't launched Xcode after updating it, do so now. Xcode will ask for permission to install additional components. Let it install those components. Once that is done, try the MacVim build again.. ",
    "hezhizhen": "```\nLast 15 lines from /Users/hezhizhen/Library/Logs/Homebrew/macvim/02.make:\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\nCopyPlistFile build/Release/MacVim.app/Contents/Resources/KeyBinding.plist KeyBinding.plist\n    cd /tmp/macvim-20170925-65551-15sqn2o/macvim-snapshot-137/src/MacVim\n    builtin-copyPlist --outdir /tmp/macvim-20170925-65551-15sqn2o/macvim-snapshot-137/src/MacVim/build/Release/MacVim.app/Contents/Resources -- KeyBinding.plist\n BUILD FAILED \nThe following build commands failed:\n    StripNIB English.lproj/Preferences.nib\n(1 failure)\nmake[1]:  [macvim] Error 65\nmake:  [first] Error 2\n```. see #546. ",
    "markevich": "Same issues with ack.vim. Mvim is completely freezes after search. ",
    "adimitri": "I was able to solve this issue by building the latest version of MacVim with instructions here: https://github.com/macvim-dev/homebrew-macvim\nI believe the issue was fixed with this commit: c958b31. ",
    "bdarfler": "@adimitri thank you! that worked for me as well. Anyone know how to get a new release cut?. Ah, https://github.com/macvim-dev/macvim/releases/tag/snapshot-138 fixes this.. ",
    "outprog": "but, how can i fix it?. ",
    "petertsengruihon": "I updated macvim with the latest version and now when I open it then it just flashback. Why?. I have installed the latest MacVim but it still flashback\n. ",
    "alecshaw": "Reproduced. Homebrew just updated to Python 3.6.3, and now this is happening.\nWhen launching from the command line, the error @jeffreyyong reported is shown. When launching from the Finder, the app opens but no window is drawn. Attempting to open new windows doesn't draw anything, but when quitting, I was prompted about closing multiple windows.\nUpdate: Installing the development version of Python (3.7.0a1) with Homebrew (brew upgrade python3 --devel) fixes the problem, and MacVim works as before. I suspect there is a problem with the Homebrew formula, although I don't yet know how to diagnose that.\nmacOS 10.13\nPython 3.6.3\nMacVim 8.0-137. Everything appears to work great. Strangely, the old version in Homebrew (snapshot 137_2) works fine today, but I've gone ahead with snapshot-138 from the cask version.\nThanks for the quick response.. brew install macvim --HEAD resolved this issue for me.\nmacOS 10.13.3\nMacVim 8.0 (patches 1-1591) compiled by Homebrew\nPython 3.6.4_4. Thank you for the issue. Duplicate of https://github.com/macvim-dev/macvim/issues/562. I would recommend looking at the solutions proposed there to see if they resolve your issue.. ",
    "RainbowSwirls": "After updating MacVim today I was getting the same error.  I was able to fix it by following alecshaw's solution and upgrading to the development version of python.. ",
    "sun-rongyang": "After updating MacVim to 145 today, I met the same problem. I solved it by upgrading python3 to 3.6.4 using HomeBrew.. ",
    "jetsgit": "Having similar  problem. \nI am on python 3.6.4, and using MacVim 145. However none of above solutions solved my problem.\nI found this in my make log:\nCould not find service \"com.apple.CoreSimulator.CoreSimulatorService\"\nOn further research I found similar issue referenced at \nhttps://trac.macports.org/ticket/49950\nSolution was to:\nsudo chmod 755 /Applications/Xcode.app/Contents/Developer/Library/PrivateFrameworks/CoreSimulator.framework/Versions/A/XPCServices/com.apple.CoreSimulator.CoreSimulatorService.xpc\nThis fixed my issue, and I was then able to do a \nbrew install macvim. ",
    "JonRowe": "I had a similar issue, brew reinstall macvim --env-std --with-override-system-vim seems to have fixed it.. ",
    "FuDesign2008": "brew install macvim --build-from-source works for me. ",
    "weijiahan": "Same issue.\nmacvim: stable 8.0-138 (bottled), HEAD. ",
    "WayneYe": "@amix it works for me, thanks for the help!. Folks, any ETA on releasing a new version of MacVim and have this issue fixed??. ",
    "alokshenoy": "Same issue here. \nOS: MacOS High Sierra (with Supplemental Update)\nMacVim: Snapshot 138 (installed using HomeBrew)\nPlugins: YCM, NerdTree, AutoPairs, matchtag, Airline\nReproduction: Same as original post by @vahvarh \n. @splhack: what exactly is MMUseCGLayersAlways? . @splhack Resolved it for me too. . ",
    "ZeerakW": "Same issue here.. I can confirm that @mliker's fix works (although inelegantly as the default screen toolbar stays on and takes over the top of the window.. Tried commenting out the entire vimrc but unfortunately, no luck on my end. Also tried removing python2 and running a clean install but no dice.. Perhaps this is related to #557? That is the same thing that causes this, is also what causes #557.. There are suggestions for workarounds in #557 . ",
    "fishioon": "Same issue here.. ",
    "fskirschbaum": "Same. This was happening on intermittently Sierra for me as well, but is now constant on High Sierra  whenever I leave and go back (which I do often). It's maddening. Easiest way to see contents is to switch tabs and having to gt gT every time I come back to the window... . defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES seems to correct issue for me, @splhack. Thank you!. ",
    "dehesselle": "Same issue here, with another method of reproducing it:\n- go fullscreen with MacVim\n- go back to window mode. May I politely ask if documenting the workaround in the FAQ is supposed to be the final solution to this issue? I would either expect the underlying issue to be resolved with a future release of MacVim, or, if I am mistaken to call the current solution a workaround, expect a future release of MacVim to ship with adjusted default settings to accommodate for the necessary changes.\nI cannot tell from reading the FAQ if this is meant as a temporary solution or not. I'm hoping you're not going to leave it as it is right now, MacVim in a broken state (no offense, I know very well that the new OS broke it), relying on the user to fix it.\n. @splhack Thank you for your efforts so far! I think leaving this open is the best course of action for now. \nAlso, very valuable information from your end: you're the first one to report here who cannot reproduce this issue. That leads to me believe that we've got dig a little deeper. What kind of Mac do you have? Is this possibly a retina vs non-retina issue? I was at a friend's yesterday (non-retina Macbook), no issue there as well.. ",
    "mliker": "Same here MacVim in fullscreen but only when i open more then one tab. with a single tab open switching back and forth between apps does not corrupt macvim's window content\nBtw. disabling option \"Prefer native full-screen support\" fixes this issue for me.\nhigh sierra\nMacVim @8.0.snapshot137_1+huge+python27 from Macports. @ZeerakW another workaround is to keep the setting on and only use buffers, not tabs.. ",
    "ls84": "I can reproduce this by \n toggle MacVim to fullscreen mode\n activate Mission Control (three finger swipe up by default)\n wait a few seconds, MacVim app thumbnail from the top selection area goes blank\n MavVim becomes black screen. ",
    "cvortmann": "It also happens if you're in fullscreen, use MacVim as the git editor and call git commit. It'll open another MacVim screen which sometimes is black and/or unresponsive. The fullscreen MacVim will be then black.. ",
    "dmost1": "I'm not positive, but I believe it has to do with modifying font size. When I have MacVim open on default font settings, and full screen, I cannot recreate the error. However, after altering the font size, and using the above methods of reproduction, such as mission control, or changing desktops, the black screen issue occurs. Once on the black screen changing the font size, even one increment, fixes the black screen issue.\nedit: Disabling \"Use Core Text renderer\", under Preferences->Advanced, fixed the issue for me.\nhigh sierra -v 10.13\nMacVim -v 8.0.. @splhack I can confirm that after issuing the command:\n\n$ defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES\n\n\"Use Core Text Renderer\", while enabled does not produce any errors, and there are no more errors  relating to this issue, whatsoever, on my end.\nedit: There was only one error I was having prior to utilizing the above command, that being the black screen error. . @splhack Yes, I should retract that. There is no more error, that being the black screen error, which I was having prior to using the \n$ defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES\ncommand\n. I also agree that I believe it doesn't have to do with Retina. My mac air doesn't have one, and it did produce the black screen error, initially, before the quick fix.. ",
    "vahvarh": "I have a problem on macbook air 2014 + apple thunderbolt display.\nI think that has nothing to do with retina.\n\"defaults write\" solves for me.. after quick fix and on latest version, there is no black screen but when I start editing (prior to changing to another tab and back), screen gets messed up.. ",
    "kamyuentse": "Same issue here.\nAfter applying the command defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES,\nthe following issue happened\n\n. ",
    "tlindteigen": "If you are using multiple monitors, want to edit in full screen, and want to leave Core Text renderer enabled, then the change that worked for me: goto MacVim->Preferences->Advanced\n- Check \"Use Core Text renderer\"\n- Uncheck \"Prefer native full-screen support\"\nI did not need defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES, which seemed to create additional rendering problems since I wanted to leave \"Use Core Text renderer\" enabled for performance reasons.. ",
    "jonathanpatt": "This issue makes MacVim nearly unusable for me in a work environment. The solution should not be a hack to get around it by disabling Core Text and suffering from performance loss as a result.. Same, very annoying.. ",
    "sasha-alias": "Disabling Core Text renderer brings another set of issues :(\nI found a very radical workaround: migrate to neovim + VimR as a GUI. ",
    "rspenc29": "$ defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES\nThis fixes the black screen issue but breaks my cursor.\n. ",
    "imajes": "Hey, this doesn't solve the problem of my macvim; when resizing to max it still shows no UI.. ",
    "MadWombat": "+1 on the problem. Setting defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES causes rendering issues similar to the screen grab posted by @kamyuentse. Unchecking \"Prefer native full-screen support\" as suggested by @tlindteigen causes the app launcher bar to always stay above the window.. ",
    "kibiz0r": "~How are you guys even unchecking \"Prefer native full-screen support\"? My preference window is just a white box.~\nNow-irrelevant screenshot:\n\ndefaults write org.vim.MacVim MMUseCGLayerAlways -bool YES didn't change either the black screen or white preference window.\nCommenting out set fu in my .vimrc fixed the white preference window. Now, with or without \"Prefer native full-screen support\", new windows instantly disappear.\nCommenting out the rest of my .vimrc fixed the black screen and allows me to use set fu without a problem...\nPlugin problem, I suppose:\nYouCompleteMe bclose.vim    ctrlp.vim     omnisharp-vim syntastic     tcomment_vim  vim-dispatch  vim-node      vim-sensible  vim-test\n~I'll see if I can figure out the culprit.~\nFixed after updating to latest omnisharp-vim and YouCompleteMe, and brew uninstall python@2. Not sure which part actually solved it. Hope this helps someone.. ",
    "pablinos": "The defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES fix seemed to work for me. It's early days though. There might be something else that goes wrong!\nSounds like it could be a plugin issue, especially as it's affecting different people in different ways. I haven't got any of the plugins mentioned above installed though. Python problem maybe?!?\n. > Comment from the peanut gallery: I haven't done any extensive testing, but I've been using this all day and it's been working fine.\nSame here - I noticed ctags being a bit more active (it's set to regenerate on save) than usual, but I don't think that's got anything to do with this change.\nI can't say that I've noticed anything significant from a performance point of view too, but I haven't done any specific comparisons.\nThanks for working on it everyone!. ",
    "com3345": "My problem is not getting black, but when I set fu in my vimrc file, then open MacVIM, it will go back to the original desktop immediately after switching to the new desktop.. ",
    "lsnizek": "MMUseCGLayerAlways fixed black patches in macOS full screen when multiple tabs are open or view is split. Both User Core Text renderer and Prefer native full-screen support are enabled.. ",
    "zoerb": "Here's a minimal repro with a stock MacVim install (no plugins or custom vimrc).  This is using macOS 10.13.5, the latest MacVim snapshot (149), with core text and native full-screen enabled, and without changing MMUseCGLayerAlways from its default.  I get the same behavior on the built-in retina display, and a non-retina external display.\nStart MacVim, enter full-screen, create a new window split, then either switch macOS spaces or enter mission control, and return to the MacVim space.  For me it shows a black screen.  Note that I don't see the black screen if I don't create a window split, or if I create the window split before entering full-screen.  Calling :redraw! fixes rendering, but creating a new window and switching spaces surfaces the issue again.\nRunning defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES fixes the black screen but causes other rendering issues as reported in previous comments.. ",
    "maggyero": "Same black fullscreen issue on the new macOS Mojave (10.14) with macVim 8.1.280:\n\nOpen macVim.\nGo fullscreen.\nOpen a new tab.\nSwitch to another screen.\nSwitch back to macVim.\n\nNote that you have to open a new tab in fullscreen mode to trigger the issue (tabs open in normal mode do no harm).. ",
    "peterwillcn": "I've had this issue +1 also MacOS Mojave 10.14 . ",
    "mereddy22": "I bought a new MacBook Pro 15 inches last week and installed macvim on mac latest os but it is acting weird like mvim screen is blinking and sometimes goes completely black image and I tried uninstall and installed several times but the issue is not resolved.\nCould someone please help me how to fix\nThanks. @ychin using Homebrew I installed macvim on my system.\nI need ASAP to use mvim on my system.. ",
    "QuentinGibson": "I had the same problem. I solved it by opening Xcode. It gave me a prompt to install more components, and after installing the components, the installation worked afterward.. ",
    "longthanhtran": "@QuentinGibson many thanks, your instruction helps me to solve this issue.. ",
    "nebiros": "@ActionScripted seeing the opposite, if I have Xcode open at the same time than MacVim the cursor on MacVim jitters/slow-downs, MacVim without open Xcode works fine.. ",
    "aliev": "@splhack does not work :(\n```\n\u279c  ~ python3\nPython 3.6.3 (v3.6.3:2c5fed86e0, Oct  3 2017, 00:32:08)\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n^D\n\u279c  ~ mvim\n\u279c  ~ Fatal Python error: Py_Initialize: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'\n\n\n\nCurrent thread 0x00007fff9452a340 (most recent call first):\nVim: Caught deadly signal ABRT\nVim: Finished.\n\u279c  ~\n```\nUPD Need to install python3 over brew, with official python packages it does not work.. unfortunately I can not reproduce the error, cause already upgraded my python over brew.. ",
    "databus23": "Also seeing this again with 144. ",
    "schanzel": "Same error here with MacVim 144 and Homebrew Python3 Version 3.6.4_2\n  . ",
    "ncihnegn": "One workaround is to disable python by commenting out SpaceVim#util#haspyxlib(lib).. ",
    "ruchee": "If your Python is installed with homebrew, try this, it's work for me\nvim\nif has('python3')\n    command! -nargs=1 Py py3 <args>\n    set pythonthreedll=/usr/local/Frameworks/Python.framework/Versions/3.6/Python\n    set pythonthreehome=/usr/local/Frameworks/Python.framework/Versions/3.6\nelse\n    command! -nargs=1 Py py <args>\n    set pythondll=/usr/local/Frameworks/Python.framework/Versions/2.7/Python\n    set pythonhome=/usr/local/Frameworks/Python.framework/Versions/2.7\nendif. ",
    "jhrmnn": "I also get this with Homebrew python 3.6.4_2 and snapshot 144. Reverting to 143 didn't help. Applying @ruchee's suggestion did help.. ",
    "SteamedFish": "I get the same issue with Homebrew Python 3.6.4 and macvim 8.0.145.\nThe issue won't happen after remove SpaceVIM. So the issue must be related to SpaceVIM or some of the plugins installed by SpaceVIM.\nI have grep -ER 'pythonthreedll|pythonthreehome|pythondll|pythonhome' of all the configurations of SpaceVIM and also all the plugins SpaceVIM installs.\nI found nothing but helpful.vim, but removing helpful.vim won't help.\nupdate:\nexport PYTHONHOME=/usr/local/Frameworks/Python.framework/Versions/Current/ fixed the issue.. ",
    "forsigner": "@SteamedFish works~. ",
    "jmknoble": "This happens for me with MacVim snapshot-146-Vim-8.0.1633.\nReverting to snapshot-145-Vim-8.0.1522 makes the problem go away, without any other changes.\nOS X version 10.11.6 (15G19009) with Anaconda Python (installed via Miniconda):\n$ type -a python\npython is /opt/anaconda/bin/python\npython is /usr/bin/python\n$ python --version\nPython 3.6.4 :: Anaconda, Inc.\n$ /usr/bin/python --version\nPython 2.7.10\n$\nThis is reproducible whether or not I first start gvim from within a Python virtual environment with a different Python (Python 2.7.14 :: Anaconda, Inc.). That is:\n\nQuit MacVim altogether\nOpen a new Terminal window\nRun gvim; MacVim opens a new gvim window.\nQuit the new gvim window with :q\nOpen a Python source file using gvim sourcefile.py\n\nVim aborts with:\n$ Fatal Python error: Py_Initialize: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'\n\n\n\nQuit MacVim altogether\n\nsource activate mypy27virtualenv\nRun gvim from within the virtual environment\nQuit the new gvim window with :q\nOpen the same Python source file using gvim sourcefile.py\nVim aborts with the same fatal Python error.\n\nRolling back to snapshot-145-Vim-8.0.1522 makes errors and abort not happen.\nRolling forward to snapshot-146-Vim-8.0.1633 makes the errors and abort happen again.. Before resizing via SizeUp or Spectacle:\n\nAfter resizing via SizeUp or Spectacle:\n\n. MacVim => Preferences => Advanced:\n\n. ",
    "aaylward": "FWIW I'm encountering this today on macvim 146 after a homebrew update of Python3 to 3.6.5. @hu6360567  for some reason I had to do brew reinstall macvim --build-from-source, but now I'm all set. Thanks for your help!. ",
    "hu6360567": "@aaylward \nbrew reinstall macvim should work.. @EugenCazacu This should be another problem discussed in #546 .. ",
    "EugenCazacu": "The proposed solution unfortunately doesn't fix the problem for me, I still get this error:\n```\n~$ gvim\n~$ Fatal Python error: Py_Initialize: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'\nCurrent thread 0x00007fff9bff2340 (most recent call first):\nVim: Caught deadly signal ABRT\nVim: Finished.\nTrying to install macvim from source gives me the following error and asks me for access to the keychain:\n~$ brew reinstall macvim --HEAD\n==> Reinstalling macvim \n==> Cloning https://github.com/macvim-dev/macvim.git\nCloning into '/Users/eugencazacu/Library/Caches/Homebrew/macvim--git'...\nremote: Counting objects: 3409, done.\nremote: Compressing objects: 100% (2884/2884), done.\nremote: Total 3409 (delta 530), reused 1563 (delta 425), pack-reused 0\nReceiving objects: 100% (3409/3409), 15.24 MiB | 3.27 MiB/s, done.\nResolving deltas: 100% (530/530), done.\n==> Checking out branch master\n==> ./configure --with-features=huge --enable-multibyte --with-macarchs=x86_64 --enable-perlinterp --enable-rubyinterp --enable-tclinterp -\n==> make\nLast 15 lines from /Users/eugencazacu/Library/Logs/Homebrew/macvim/02.make:\n    export XCODE_DEVELOPER_USR_PATH=/Applications/Xcode.app/Contents/Developer/usr/bin/..\n    /Applications/Xcode.app/Contents/Developer/usr/bin/ibtool --strip /tmp/macvim-20180401-4828-1ctlxvt/src/MacVim/build/Release/MacVim.app/Contents/Resources/English.lproj/FindAndReplace.nib --output-format human-readable-text /tmp/macvim-20180401-4828-1ctlxvt/src/MacVim/English.lproj/FindAndReplace.nib\nCopyPlistFile build/Release/MacVim.app/Contents/Resources/KeyBinding.plist KeyBinding.plist\n    cd /tmp/macvim-20180401-4828-1ctlxvt/src/MacVim\n    builtin-copyPlist --outdir /tmp/macvim-20180401-4828-1ctlxvt/src/MacVim/build/Release/MacVim.app/Contents/Resources -- KeyBinding.plist\n BUILD FAILED \nThe following build commands failed:\n    StripNIB English.lproj/Preferences.nib\n(1 failure)\nmake[1]:  [macvim] Error 65\nmake:  [first] Error 2\nREAD THIS: https://docs.brew.sh/Troubleshooting\n```. Now that worked, thank you very much!. ",
    "joshcameron": "I had to brew reinstall macvim --build-from-source, and then I had to brew reinstall python2, but now it's working for me again. My now working configuration:\n```\n\nbrew info python\npython: stable 3.6.5 (bottled), devel 3.7.0b3, HEAD\n...\nbrew info python2\npython@2: stable 2.7.14 (bottled), HEAD \n...\nbrew info macvim\nmacvim: stable 8.0-146 (bottled), HEAD\n```\nmacOS High Sierra Version 10.13.3. \n",
    "methane": "ref: vim/vim#2787. Fix is commited on vim.\nhttps://github.com/vim/vim/commit/0424958bde3d3e74c721ba39ab4d5a4744897393. It was merged into macvim.\nBut, 3a21d9c7bb4d58cccd2152e319daa8f8ffa2e664 reverts the change only when --with-python-config-dir is used.\nPlease don't use the option.  As far as I reserched, the option is totally useless.\nSetting PATH to python you want to use is the only right way to use custom Python.. It is fixed already, but not released yet.. @bradwood it's not enough information to reproduce.  How do you install powerline?\nAnyway, same error message doesn't mean it's same issue.\nIf you need to install powerline to reproduce, it's different issue.\nIf you can reproduce it without any external dependency, (only by :py3 print(42)), it's same issue.. @t0d0r Even though error is same, it must not be same issue.  I don't have any trouble with same macvim.\nDo you have any environment variable which break Python 3? Does python3 work fine?\nWhat is env | grep -i python?\n. Please don't recommend set pythonthreehome or set pythonthreedll.  It's hacker only option.\nHomebrew macvim should work fine without PYTHONHOME environment variable and\nset pythonthreehome, set pythonthreedll.\nWhen it is used, and it's wrong, the crash happens.\nAnd even when configured them right for now, it will be wrong when Python is upgraded.\nUnless you can debug the issue, you should never use them.. ",
    "myzinsky": "This error with python installed with home-brew:\n```bash\n$ mvim\nFatal Python error: Py_Initialize: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'\nCurrent thread 0x00007fffac67c380 (most recent call first):\nVim: Caught deadly signal ABRT\nVim: Finished.\n```. ",
    "JonLevy": "I am newly having this error when trying to open a .org file using the vim-orgmode plugin (https://github.com/jceb/vim-orgmode).\n\nFatal Python error: Py_Initialize: unable to load the file system codec\nModuleNotFoundError: No module named 'encodings'\nCurrent thread 0x00007fff9ff9d380 (most recent call first):\nVim: Caught deadly signal ABRT\nVim: Finished.\n. @darkermatter  Thank you.  That seems to work.. \n",
    "bradwood": "I'm still having hits problem.... It happens when the powerline plugin is installed...\n```bash\n\u2714 [brad@bradmac:~] $ brew info macvim python python2\nmacvim: stable 8.1-151 (bottled), HEAD\nGUI for vim, made for macOS\nhttps://github.com/macvim-dev/macvim\nConflicts with:\n  vim (because vim and macvim both install vi binaries)\n/usr/local/Cellar/macvim/8.1-151_1 (2,178 files, 34.9MB) \n  Poured from bottle on 2018-11-28 at 18:22:00\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/macvim.rb\n==> Dependencies\nRequired: cscope \u2714, lua \u2714, luajit \u2714, python \u2714\n==> Requirements\nBuild: xcode \u2714\n==> Options\n--HEAD\n    Install HEAD version\n==> Analytics\ninstall: 15,136 (30 days), 39,398 (90 days), 270,705 (365 days)\ninstall_on_request: 13,909 (30 days), 35,742 (90 days), 220,525 (365 days)\nbuild_error: 0 (30 days)\npython: stable 3.7.1 (bottled), HEAD\nInterpreted, interactive, object-oriented programming language\nhttps://www.python.org/\n/usr/local/Cellar/python/2.7.12_1 (6,289 files, 85.5MB)\n  Built from source on 2016-10-08 at 09:31:47\n/usr/local/Cellar/python/2.7.13 (6,337 files, 86.7MB)\n  Built from source on 2017-04-29 at 21:05:41\n/usr/local/Cellar/python/2.7.14 (6,344 files, 87.5MB)\n  Built from source on 2017-09-29 at 11:58:30\n/usr/local/Cellar/python/3.6.5 (4,820 files, 100.8MB)\n  Poured from bottle on 2018-05-24 at 20:46:36\n/usr/local/Cellar/python/3.6.5_1 (4,798 files, 100MB)\n  Poured from bottle on 2018-06-29 at 23:19:01\n/usr/local/Cellar/python/3.7.0 (4,916 files, 104.4MB)\n  Poured from bottle on 2018-07-24 at 20:35:57\n/usr/local/Cellar/python/3.7.1 (3,845 files, 59.6MB) *\n  Poured from bottle on 2018-11-24 at 20:31:49\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/python.rb\n==> Dependencies\nBuild: pkg-config \u2714\nRequired: gdbm \u2714, openssl \u2714, readline \u2714, sqlite \u2714, xz \u2714\n==> Options\n--HEAD\n    Install HEAD version\n==> Caveats\nPython has been installed as\n  /usr/local/bin/python3\nUnversioned symlinks python, python-config, pip etc. pointing to\npython3, python3-config, pip3 etc., respectively, have been installed into\n  /usr/local/opt/python/libexec/bin\nIf you need Homebrew's Python 2.7 run\n  brew install python@2\nYou can install Python packages with\n  pip3 install \nThey will install into the site-package directory\n  /usr/local/lib/python3.7/site-packages\nSee: https://docs.brew.sh/Homebrew-and-Python\n==> Analytics\ninstall: 363,810 (30 days), 817,791 (90 days), 3,107,645 (365 days)\ninstall_on_request: 219,127 (30 days), 523,966 (90 days), 1,889,556 (365 days)\nbuild_error: 0 (30 days)\npython@2: stable 2.7.15 (bottled), HEAD\nInterpreted, interactive, object-oriented programming language\nhttps://www.python.org/\n/usr/local/Cellar/python@2/2.7.15_1 (4,670 files, 82.7MB) *\n  Poured from bottle on 2018-11-28 at 18:28:59\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/python@2.rb\n==> Dependencies\nBuild: pkg-config \u2714, sphinx-doc \u2718\nRequired: gdbm \u2714, openssl \u2714, readline \u2714, sqlite \u2714\n==> Options\n--HEAD\n    Install HEAD version\n==> Caveats\nPip and setuptools have been installed. To update them\n  pip install --upgrade pip setuptools\nYou can install Python packages with\n  pip install \nThey will install into the site-package directory\n  /usr/local/lib/python2.7/site-packages\nSee: https://docs.brew.sh/Homebrew-and-Python\n==> Analytics\ninstall: 134,799 (30 days), 464,776 (90 days), 1,814,680 (365 days)\ninstall_on_request: 30,368 (30 days), 89,538 (90 days), 354,231 (365 days)\nbuild_error: 0 (30 days)\n\u2714 [brad@bradmac:~] $\n```. ",
    "bkmdev": "Same for me in OSX 10.13.1, @isaki-x and still seems to be broken in newer MacVim versions too \ud83d\ude41 (see below for complete version and build info).  \nDoes anyone have a version installed where this did not occur?  If so, perhaps we can use git's bisect to determine when this issue was first introduced, and thus the code responsible for it?  \n```\n:version\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Dec  7 2017 11:42:48)\nmacOS version\nIncluded patches: 1-1376\nCompiled by Homebrew\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl               +clipboard         +digraphs          -footer            +libcall           -mouse_gpm         +odbeditor         +rightleft         +tcl               +virtualedit       -xpm\n+arabic            +cmdline_compl     +dnd               +fork()            +linebreak         -mouse_jsbterm     +packages          +ruby              +termguicolors     +visual            -xsmp\n+autocmd           +cmdline_hist      -ebcdic            +fullscreen        +lispindent        +mouse_netterm     +path_extra        +scrollbind        +terminal          +visualextra       -xterm_clipboard\n-autoservername    +cmdline_info      +emacs_tags        -gettext           +listcmds          +mouse_sgr         +perl              +signs             +terminfo          +viminfo           -xterm_save\n+balloon_eval      +comments          +eval              -hangul_input      +localmap          -mouse_sysmouse    +persistent_undo   +smartindent       +termresponse      +vreplace\n+balloon_eval_term +conceal           +ex_extra          +iconv             -lua               +mouse_urxvt       +postscript        +startuptime       +textobjects       +wildignore\n+browse            +cryptv            +extra_search      +insert_expand     +menu              +mouse_xterm       +printer           +statusline        +timers            +wildmenu\n++builtin_terms    +cscope            +farsi             +job               +mksession         +multi_byte        +profile           -sun_workshop      +title             +windows\n+byte_offset       +cursorbind        +file_in_path      +jumplist          +modify_fname      +multi_lang        +python            +syntax            +toolbar           +writebackup\n+channel           +cursorshape       +find_in_path      +keymap            +mouse             -mzscheme          -python3           +tag_binary        +transparency      -X11\n+cindent           +dialog_con_gui    +float             +lambda            +mouseshape        +netbeans_intg     +quickfix          +tag_old_static    +user_commands     -xfontset\n+clientserver      +diff              +folding           +langmap           +mouse_dec         +num64             +reltime           -tag_any_white     +vertsplit         +xim\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n       defaults file: \"$VIMRUNTIME/defaults.vim\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X -DMACOS_X_DARWIN  -F/usr/local/opt/python/Frameworks -I/usr/local/Cellar/python/2.7.14/Frameworks/Python.framew\nork/Versions/2.7/include/python2.7 -I/usr/local/Cellar/python/2.7.14/Frameworks/Python.framework/Versions/2.7/include/python2.7 -fno-strict-aliasing -fno-common -dynamic -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototy\npes -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: clang   -L.             -L /BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/libressl/lib -L/BuildRoot/Applications/Xcode.app/Contents/\nDeveloper/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/lib -L.             -L /BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal\n.sdk/usr/local/libressl/lib -L/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/lib -F/usr/local/opt/python/Frameworks -L/usr/local/opt/python/F\nrameworks/Python.framework/Versions/2.7/lib/python2.7/config -lpython2.7 -framework CoreFoundation -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -framework AppKit   -fstack-protecto\nr  -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE -lperl -F/usr/local/opt/python/Frameworks -framework Python  -F/System/Library/Frameworks -framework Tcl -framework CoreFoundation -framework Ruby\n```. ",
    "kfox": "I'm seeing the same thing with MacVim 8.0.1207 (140) on High Sierra 10.13 (17A405), but it appears that all preferences are eventually reset to their defaults after opening several files.. ",
    "WillEccles": "I'm not sure if they are all getting reset, I haven't tested since that's the only one I changed (I think).. Updated MacVim.. I believe the issue is that the unicode characters are wider than the font you are using, and therefore (even though they many are rendered as double-width characters) the characters hang outside of the column. I doubt there is much you can do about it other than not use these characters.. Ah, never knew they fixed the old ones. That's on the devs, then. Apologies for the misconception.. ",
    "taiyangc": "Awesome idea! Is it possible to further user-customize the touch bar shortcuts to specific macros?. ",
    "getaaron": "@wiomoc @jpetrie any updates on this? would love to see it merged. ",
    "d3xru8": "You are right. Upon checking the /usr/local/Cellar/macvim directory, previous versions of the app still existed. I just assumed Homebrew deleted them upon upgrading. I did a brew cleanup and the problem was solved. Thanks!. ",
    "kiryph": "You probably have to update your python3 version to 3.6.3. The previous macvim version was compatible to python3.6.2!. I see that you enforce to use python2. That actually sounds that my suspicion regarding incomptatible python3 versions could be right. I am curious what your exact python3 version is. Could you post :!which -a python3 and :!python3 --version?. Thanks for sharing. Your result is as I had expected. As I said earlier, updating python3 to python3.6.3 should also help instead of enforcing ultisnips to use python2.. You are welcome.. @eirnym Thank you very much.\nI have forgotten that I had already added this line to my vimrc and did not update it. SORRY for my stupidity. It works now.. Great idea to improve the macvim/vimrc file itself, so python3 installation from macports, next to https://www.python.org/downloads/mac-osx/, is also used if present.\n~~Add homebrew as well~~\n~~I think you did not actually add the location of homebrew:~~\nviml\nset pythonthreehome=/usr/local/Frameworks/Python.framework/Versions/3.7\n~~This would be a third if-clause.~~\nHomebrew python3 is used by default from macvim. So your PR should be fine.\n(I do not like the asymmetry between python2 and python3 configuration: python2-homebrew has to be set, for python3-homebrew nothing; maybe this has something to do that a python2 is pre-installed). By default the pre-installed python2 is used?. I also use the binary installation from github. So the results on my machine agree:\n\u276f strings /Applications/MacVim.app/Contents/MacOS/Vim | grep Python\n/usr/local/Frameworks/Python.framework/Versions/3.7/Python\n/System/Library/Frameworks/Python.framework/Versions/2.7/Python\nIt is good to confirm this specifically. Thanks for pointing this method out.\nHowever, I noticed in the past that the exact version has to match, e.g. 3.6.4 instead of 3.6.3.\nDo you know a possibility how to figure the exact version number out from the binary?\nOrder of Used Python Versions\ndetermined how MacVim is built and by the distributed MacVim $VIM/vimrc\nPython2:\n1. /usr/local/Library/Frameworks/Python.framework/Versions/2.7 (Homebrew)\n2. /opt/local/Library/Frameworks/Python.framework/Versions/2.7 (MacPorts)\n3. /System/Library/Frameworks/Python.framework/Versions/2.7 (system, configured)\nPython3:\n1. /usr/local/Library/Frameworks/Python.framework/Versions/3.7 (Homebrew, configured)\n2. opt/local/Library/Frameworks/Python.framework/Versions/3.7 (MacPorts)\n3. /Library/Frameworks/Python.framework/Versions/3.7 (python.org)\nUpdate Comments\nIMHO, the comments in $VIM/vimrc could be updated and made more explicit:\n\" Python2\n\" MacVim is configured by default to use the pre-installed python2 version in\n\" /System/Library/Frameworks/Python.framework/Versions/2.7/Python\n\" However, following code adjusts the used python2 version if a Homebrew or\n\" MacPorts python2 installation can be found:\n\" Python3\n\" MacVim is configured to use Homebrew python3 installed into\n\" /usr/local/Frameworks/Python.framework/Versions/3.7/Python\n\" If this cannot be found, following code tries to find a MacPorts\n\" or python3 installation from python.org:\nAlso a comment from https://github.com/macvim-dev/macvim/wiki/Python-2.x-and-Python-3.x\ncould be added:\n\" Python2 & Python3\n\" Common Python distribution doesn't allow to use Python 2.7 and Python 3.7\n\" at the same time due to Python shared module loading.\n\" More details and how to built python2, python3 and MacVim yourself\n\" to achieve this can be found here\n\" https://github.com/macvim-dev/macvim/wiki/Python-2.x-and-Python-3.x\nFinally, the user could be reminded if he has installed python2/3 in a non-default directory, he must\nadjust it himself in his vimrc.\nPython2 from python.org\nFor python2, an installation from https://www.python.org/downloads/release/python-2715/\ncould be also be preferred instead of the pre-installed version. The order would look like\n\n/usr/local/Library/Frameworks/Python.framework/Versions/2.7 (Homebrew)\n/opt/local/Library/Frameworks/Python.framework/Versions/2.7 (MacPorts)\n/Library/Frameworks/Python.framework/Versions/2.7 (python.org)\n/System/Library/Frameworks/Python.framework/Versions/2.7 (system, configured)\n\n. ",
    "kaich": "It works fine now.  refer: https://github.com/SirVer/ultisnips/issues/900#issuecomment-342171827. @kiryph The python inform:  \u001b:!which -a python3   is (B\u001b[m/usr/local/bin/python and :!python3 --version    is \u001b(B\u001b[mPython 3.6.2. @kiryph It's great. It works fine as your way. Thank you very much \ud83d\udc4d. ",
    "llimllib": "FWIW, instead of removing base16-shell, I set it not to be loaded only when bashrc is run from inside vim (the [ -z $VIM ] bit):\n```\nif we allow Base16 to run in macvim, it causes an infinite error loop\n[ -n \"$PS1\" ] && \\\n  [ -z $VIM ] && \\\n  [ -s $BASE16_SHELL/profile_helper.sh ] && \\\n  eval \"$($BASE16_SHELL/profile_helper.sh)\"\n```\nI think this might honestly be considered a macvim bug? But I have a workaround so it doesn't bug me too much.. ",
    "fturcheti": "I had the same issue, but the workaround @llimllib suggested fixed it for me too.. Snapshot 148 fixed the issue for me on 10.12. Thanks!. ",
    "CGamesPlay": "I've got a pretty consistent repro case with just vanilla MacVim. Here's the steps:\n:set columns=135 lines=80\n:term\n\nNow ensure your terminal is 39 rows, 135 columns. (echo $ROWS $COLUMNS to confirm).\n$ gunzip fzf.out.gz\n$ echo $ROWS $COLUMNS\n39 135\n$ script -p fzf.out\n\nRun the commands in the MacVim terminal as well as in your iTerm2 with the same window size and compare the output. Here's a comparison of the final output, but the interactive repro is very clear.\n\nfzf.out.gz. @dhleong in case you've never tried it before, this is a perfect use case for git bisect, which will binary search over the commits to find the problem. Here's a quick tutorial that explains it: http://webchick.net/node/99\nI spent some time looking over the diff between those commits but didn't turn up anything that obviously looks like the culprit.. Looks like reverting it would cause a bug related to channel_read calling ch_close_part_on_error if the situation described in the comment above channel_may_read happens.\nI don\u2019t have a build environment set up but from looking at that commit my best guess is that gui_macvim_add_channel is getting called more than once on the same channel, resulting in the channel having \u201calready been read\u201d in some situations. . Since the channel would be closed if readlen == 0, it would likely bail still in whatever condition @ichizok was trying to prevent \ud83d\ude25. ",
    "roefunc": "I see the same here. I also get spurious control characters inserted into the search string at the fzf prompt. MacVim 8.0.1272 (142), OSX 10.13.1.\n\n. ",
    "semanser": "Is any progress on that? In my opinion, the problem is in MacVim. I have tried vim in a terminal, VimR, and fzf in the terminal itself and didn't get any errors. The problem appears only in MacVim.. @CGamesPlay I have deleted a comment because I missed that I was working with VimR but not MacVim... In VimR everything is really ok :). Possible duplicate of #579. Possible related to #579 . ",
    "jesseleite": "I have also tried iTerm and Hyper, and it renders fine in those terminal emulators as well.  Seems to be just MacVim \ud83d\ude22. \ud83d\ude4c . ",
    "CJBridges": "Well, @semanser appears to have deleted his comment of \"fixed\" and I'd have to agree with that action.  He got me to test though last night... No behavior change (still broken) with:\nMacVim Custom Version 8.0.1420 (144)\nFZF 0.17.3 (brew)\nfzf.vim [not strictly versioned, but latest master - 17d24ae (Sun Jan 21 19:52:23 2018 +0900)]. ",
    "sandro": "Any news?. ",
    "dhleong": "I'm certainly no expert in the vim/macvim codebase, but have been trying to wade through it here to see if I can find anything. TLDR: haven't found anything, so far.\nI'm going off the assumption that #599 is related, since it looks like some ANSI codes are not getting completely parsed (hence the text like ;2;0;0;95m), which could be a cause for this kind of garbage.\nIt looks like macvim pretty much directly draws whatever vim asks it to, and dropping into the xcode debugger as best as I can seems to confirm this. Besides, at the point of the drawing calls, it should be trying to interpret terminal output anyway\u2014that should have happened in vim's internals.\nThe only apparently macvim-related code in vim's terminal handling is here:\nhttps://github.com/macvim-dev/macvim/blob/master/src/terminal.c#L880\nbut that just flushes the msg queue from vim -> macvim....\nAnyway, just documenting some observations on the off chance that it triggers inspiration in someone who's more familiar with the codebases.. Great find @rickyc ! I can confirm that a fresh build of 06f8b8e6670490d6df2a1916bcda26cadad1cbe5 also fixes #599. I tried reverting just 6daeef1 on master since it sounded interesting, but still broken. When I get a chance I'll try building each commit and see exactly where it breaks (unless someone beats me to it!). I have not, but that looks amazing\u2014thanks!\nOn Wed, Mar 14, 2018 at 12:30 PM Ryan Patterson notifications@github.com\nwrote:\n\n@dhleong https://github.com/dhleong in case you've never tried it\nbefore, this is a perfect use case for git bisect, which will binary search\nover the commits to find the problem. Here's a quick tutorial that explains\nit: http://webchick.net/node/99\nI spent some time looking over the diff between those commits\nhttps://github.com/macvim-dev/macvim/compare/06f8b8e...6daeef1 but\ndidn't turn up anything that obviously looks like the culprit.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/579#issuecomment-373086844,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAx0Fu0hvINceLfiL0P5kDCE1OawQWMpks5teUW_gaJpZM4QOi0L\n.\n. Thanks @CGamesPlay for that tip! Here's what I found:\n\n```\nf113a44867117eec1312baedc68971358cb01653 is the first bad commit\ncommit f113a44867117eec1312baedc68971358cb01653\nAuthor: ichizok gclient.gaap@gmail.com\nDate:   Wed Oct 18 02:15:24 2017 +0900\nConfirm channel is readable in event handler\n\n:040000 040000 ed96081d4871728eed96f668a152217811c718aa 46eb69dce6898df31418bb343ea131a688af7bcf M  src\n``. Runninggit revert f113a44867117eec1312baedc68971358cb01653` on latest master does appear to fix the issue.. Yep, wasn't suggesting to revert it, just confirming the area as a place to start looking at fixes.\nIt looks like if we change the code here in channel_may_read: https://github.com/macvim-dev/macvim/commit/f113a44867117eec1312baedc68971358cb01653#diff-3eef145ca58a199bac70eef155e806aeR3569\nfrom\nc\n    if (fd != INVALID_FD && channel_wait(channel, fd, 0) == CW_READY)\n    channel_read(channel, part, func);\nto\nc\n    if (fd != INVALID_FD && channel_wait(channel, fd, 0) != CW_ERROR)\n    channel_read(channel, part, func);\nthat also fixes this issue. I'm not 100% certain that this doesn't cause a regression with whatever #560 fixed, but it seems sane. Maybe @ichizok has some insight here? I'd also be happy to put up a PR and move discussion there.. ",
    "rickyc": "The latest working build of MacVim and FZF I found was MacVim Snapshot 138 - 8.0.1175. FZF breaks on the following build snapshot 139 (diff of 138/139).. ",
    "patrkris": "@ichizok I did a quick test on my machine, and the patch seems to work. I used to have fzf look garbled and now I don't.. ",
    "rufo": "If you have both Xcode and Homebrew installed, brew install macvim --HEAD will get you this fix now.\nI also like to add the --with-override-system-vim flag to make sure CLI and MacVim match up, and you may need to switch to reinstall if you already have installed MacVim via Homebrew.. ",
    "tsungruihon": "I just updated to high sierra 10.13.1(17B48), then every time i open macVim,  i just flashback. I don't know why. I have reinstalled MacVim, but MacVim still flashback every time i open it.. ",
    "cyriltvarghese": "Hi. I dont know the solution to your problem. However I want to ask you,have you observed any reduction in battery life? My battery has been draining faster after updating to 10.13.1.. ",
    "wenxingxing": "Same problem with lua\nE370: Could not load library liblua.5.2.dylib\nLua library cannot be loaded.. Thanks, it works \ud83d\ude18. ",
    "krishan": "I also ran into this issue after updating MacVim to the latest version.  All prior versions of MacVim I used worked fine without any rubydll or libruby.dylib.\nAlso I had to reinstall ruby (many ruby installations don't have a shared library by default, see: https://github.com/rbenv/ruby-build/issues/35 for example)\nTherefore my question: Is this change (introducing a dependency on a shared ruby lib) intentional? Does anybody know the background?. @splhack Thank you for the explantaion. . ",
    "dezza": "Did you try in terminal vim?\nmvim -v\nAnd did you try on other systems? Linux? Windows? Same error?\nI have tried in WSL on top of Windows it works fine there.. I used clear in my macvim no issue. Try changing term emu to get closer to a conclusion.. I can think of a few usecases.\nYou have a binding to compile/run your code in the built-in :terminal - you might want a second pane to do other stuff or have a different run-command ready for e.g running unit-tests or another task.. I think he is looking for :terminal then unless he maybe misunderstood that people often run tmux first then vim not the other way around. ",
    "NikosEfthias": "in Terminal it works just fine the problem is with the gui version. Also i havent tried on windows or linux. \n. ",
    "anhdowastaken": "I met this issue with environment below too:\n\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Nov  6 2017 11:52:53)\nmacOS version\nIncluded patches: 1-1272\nCompiled by Homebrew\nmacOS High Sierra version 10.13.1. \n",
    "alr94": "Same issue here.\nVIM - Vi IMproved version 8.0.1349\nUbuntu 16.04 LTS\n. ",
    "Melkster": "I have the same issue.\n\nvim 8.0.1297-1\nArch Linux x86_64. \n",
    "commanderh": "FIXED\nInstalled using homebrew.. ",
    "dickscheid": "Sorry about that. I was assuming that it is not a crash, since the window closed but the macvim application kept on running. But indeed, there is a crashlog - it is attached.\nVim_2017-11-09-174540.crash.zip\n. I recently changed my python environment, from homebrew-based to Canopy. This may coincide with the problem - I will cross-check the python setup and post the result here. Thanks a lot.. A python 3.6.2 installation in homebrew was the problem, thanks again for the quick help!\nExplanation:\nSome weeks ago I did remove my python2.7 environment in homebrew, and replaced it with a canopy python installation. However, python 3.6.2 was still available at /usr/local/bin/python3 from homebrew. After uninstalling python3 and dependencies in homebrew, and restarting vim, the error does not appear any more.. ",
    "kenng": "have the same problem. pressing on \"I\" or \"O\" will crash the vim. \nTried the solution from #667. But have error during the built\n```\n\u276f brew reinstall macvim --build-from-source\n==> Reinstalling macvim\n==> Downloading https://github.com/macvim-dev/macvim/archive/snapshot-146.tar.gz\n==> Downloading from https://codeload.github.com/macvim-dev/macvim/tar.gz/snapshot-146\n################################################################## 100.0%\n==> ./configure --with-features=huge --enable-multibyte --with-macarchs=x86_64 --enable-perlinterp --enable-rubyinterp --enable-tclinterp --enable-terminal --with-tlib=ncurses --with\n==> make\nLast 15 lines from /Users/itwonders/Library/Logs/Homebrew/macvim/02.make:\n    export XCODE_DEVELOPER_USR_PATH=/Applications/Xcode.app/Contents/Developer/usr/bin/..\n    /Applications/Xcode.app/Contents/Developer/usr/bin/ibtool --strip /tmp/macvim-20180419-11072-14i0064/macvim-snapshot-146/src/MacVim/build/Release/MacVim.app/Contents/Resources/English.lproj/FindAndReplace.nib --output-format human-readable-text /tmp/macvim-20180419-11072-14i0064/macvim-snapshot-146/src/MacVim/English.lproj/FindAndReplace.nib\nCopyPlistFile build/Release/MacVim.app/Contents/Resources/KeyBinding.plist KeyBinding.plist\n    cd /tmp/macvim-20180419-11072-14i0064/macvim-snapshot-146/src/MacVim\n    builtin-copyPlist --outdir /tmp/macvim-20180419-11072-14i0064/macvim-snapshot-146/src/MacVim/build/Release/MacVim.app/Contents/Resources -- KeyBinding.plist\n BUILD FAILED \nThe following build commands failed:\n    StripNIB English.lproj/Preferences.nib\n(1 failure)\nmake[1]:  [macvim] Error 65\nmake:  [first] Error 2\n```\nThen I uninstall all the macvim, and install it again and it fixed the problem. \nbrew uninstall macvim --force macvim\nbrew install macvim\n. ",
    "oliverdain": "I think that's the issue - I have Ruby 2.0.\nThanks.. ",
    "joonhocho": "I am having the same problem. I used to be not highlight at all until you actually type something.. ",
    "mihaicristiantanase": "Yes, it does seem to be the same issue.. ",
    "stuporglue": "Sorry, I was lazy. :-(\n\nsnapshot-139: MacVim Snapshot 139 - WORKS\nsnapshot-140: MacVim Snapshot 140 - WORKS\nsnapshot-141: MacVim Snapshot 141 - DOES NOT WORK\n\n-- \nMichael\n. ",
    "james-d-mitchell": "I have this issue also using Mac OS High Sierra, the problem did not exist before I updated.. ",
    "NeZanyat": "The same issue. ",
    "84yy": "The same issue. ",
    "carcam": "Same issue here. ",
    "ZSanting": "Same issue,meet this problem,when I upgrade to Mac OS High Sierra.. ",
    "capn-freako": "Me too, and only after upgrading to High Sierra.\n. ",
    "ecerulm": "Changing to US instead of US International work but it's not really an option for many (for those of us that write in several languages like spanish, english and swedish and don't want to switch to different layout every time). \nI wonder if it will be possible to handle the input an at different level letting macOS handle the dead key like iTerm does. . ",
    "oohogwash": "i tried that, it continues to happen with same error. \nIs there any other way to get macVim onto High Sierra ?\nOn 8 Dec 2017, at 11:39 pm, chdiza notifications@github.com wrote:\nbrew update then try again. If that doesn't work, it's a Homebrew problem and you should go to them.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/macvim-dev/macvim/issues/611#issuecomment-350265311, or mute the thread https://github.com/notifications/unsubscribe-auth/AA-C_ujs__sG4RvNQDA4SFzF0OgoIGwNks5s-TwYgaJpZM4Q60OY.\n. ",
    "arturoherrero": "For the record, this is no longer happening to me (MacVim 8.0.1522, macOS High Sierra Version 10.13.3).. I have the same problem. I'm not sure if this issue is the same issue described in #751.. I also disabled the Use Core Text renderer from the preferences and MacVim seems to be stable but I've lost the typography I use and it looks worse.. @ychin I'm not sure if you can appreciate with the screenshots.\nThis is the default preferences:\n\nThis is the disabled the Use Core Text renderer, the editor looks worst. The NERDTree separation is not straight and there is slightly more space between the elements.\n\n. Thanks a lot!. ",
    "nuko8": "\n@nuko8 Would you mind taking a look at this thread to see if you have any idea whether 8.0.1236 might be the problem?\n\nNot at all, absolutely.\nAn off-hand idea: at gui.c:40 or around it, changing the preprocessor directive from\n```\nif defined(UNIX) && !defined(FEAT_GUI_MAC)\nto something like\nif defined(UNIX) && ! (defined(FEAT_GUI_MAC) || defined(FEAT_GUI_MACVIM))\n```\nmight fix the issue.\n\nmy first suspect would be 8.0.1236, which messes with a bunch of macos-related stuff all at once.\n\nToo harsh to me :). OK, let me know if you find anything bad with it.  Actually, I more or less predicted that issues like this would happen, but, since I didn't have a good idea as to how to collaborate with good people here, I hadn't done ~nothing~ anything about that.  Thanks to your effort, that outstanding issue will be likely to be resolved, and I'm happy with it.. (Just in case MacVim people missed a change done by the upstream...)\nThat's due to Patch 8.0.1795 (b0b98d523) where MAY_FORK that had been used only in gui.c was renamed to GUI_MAY_FORK so that it would be available to channel.c.  The condition when the latter is defined is now given in gui.h.  Accordingly, the regression should be fixed by exactly the same way as we did before: Append || defined(FEAT_GUI_MACVIM)) to the tail of the existing #if conditions at ~gui.c:568~gui.h:568.. I meant this by gui.h:568.  That's the one of Vim's codebase.  I guess MacVim's is a bit different from that in copyright header etc.. ",
    "tracyone": "set nocompatiable. @xiaoyin199 https://github.com/vim/vim/issues/2008. @qiqiboy thanks.\nButterminal ++close zsh  or vim is work well.. My fault, I just realize that python2 and python3 can not support at the same time, so macvim support python version that first detected which has() function will do that.. ",
    "xiaoyin199": "\u4e0d\u884c. ",
    "gazliddon": "Same problem here.\nRolled back to the previous release to fix:\nhttps://github.com/macvim-dev/macvim/releases/tag/snapshot-143\n. ",
    "dc-avasilev": "same, macos 10.13.2 (17C205). ",
    "ductng": "Hi, same here, when I open a file (either from the console with \"open -a MacVim file.txt\" or with \":e somedir/somefile\") it closes the window. Interestingly it works with files in the main directory.. ",
    "qiqiboy": "vim\ntnoremap <c-d> <c-w>:bd!<CR>. ",
    "CleanCut": "I tried the binary snapshot first.  I opened it from the finder, and it complained that the developer was unrecognized -- so I allowed it in system preferences, and then it opened fine and functioned normally. (Yay!)\nThen I tried the tap with:\nbrew unlink macvim\nbrew cleanup\nbrew tap macvim-dev/macvim\nbrew install --HEAD macvim-dev/macvim/macvim\nThat version worked via mvim as well as clicking on the symlinked app in /Applications (yay! again!)\nThat will work for me for the time being.  Do you want me to close this issue, or should I wait and verify that a regular release works first?. ",
    "hunsakerbn": "This exact problem just appeared for me after a reboot.  Running MacVim stable 8.1-151\nI tried reinstalling, removing caches save state files, .vimrc, .gvimrc, .vim/ -- nothing worked.\nLaunching the application shortcut works fine.  Using 'mvim' from the command line doesn't (just like is described above).  It must be something in my environment.  If I log in as a different user, then mvim works fine, but when I login back as my user, the problem is there again.. Apparently this has something to do with running under TMUX.  The 'reattach-to-user-namespace' utility that fixes things so GUI apps can be launched from the command line within tmux apparently quit working correctly for 'mvim'.  If I run 'mvim' from a non-tmux terminal window, then it works just fine.  I seem to recall that 'reattach-to-user-namespace' was updated a while back, and I probably hadn't rebooted since that change, so I may have been using an older version of it that didn't have the problem?\nThe workaround is to start MacVim via the app shortcut, or from a non-TMUX terminal window, then leave it running. Once it starts correctly, the 'mvim' command works fine as long as the original MacVim keeps running.. ",
    "ptzz": "Since it's an xterm terminal, could the settings from ~/.Xresources or ~/.Xdefaults be used?. This works on MacVim HEAD , since commit https://github.com/macvim-dev/macvim/commit/f59c6e8cee092433d325ba21a107654a8d84f776 I assume (set the g:terminal_ansi_colors variable).. ",
    "ahmedelz": "I still can reproduce issue. I was indeed using snapshot build 144 from https://github.com/macvim-dev/macvim/releases. I updated to snapshot build 145 (MacVim version 8.0.1522) and still see the messages.. The message comes out when gvim binary is used to launch MacVim: /Applications/MacVim.app/Contents/bin/gvim. ```\n$ ls -ali /Applications/MacVim.app/Contents/\ntotal 136\n8592742371 drwxr-xr-x   9 ahmedelz  admin    288 Feb 17 20:04 .\n8592742370 drwxr-xr-x   3 ahmedelz  admin     96 Feb 20 09:09 ..\n8592742382 drwxr-xr-x   4 ahmedelz  admin    128 Feb 17 20:04 Frameworks\n8592742645 -rw-r--r--   1 ahmedelz  admin  65452 Feb 17 20:04 Info.plist\n8592742646 drwxr-xr-x   3 ahmedelz  admin     96 Feb 17 20:04 Library\n8592742656 drwxr-xr-x   5 ahmedelz  admin    160 Feb 17 20:09 MacOS\n8592742660 -rw-r--r--   1 ahmedelz  admin      8 Feb 17 20:04 PkgInfo\n8592742661 drwxr-xr-x  94 ahmedelz  admin   3008 Feb 17 20:04 Resources\n8592742372 drwxr-xr-x  11 ahmedelz  admin    352 Feb 17 20:09 bin\nls -ali /Applications/MacVim.app/Contents/bin\ntotal 8\n8592742372 drwxr-xr-x  11 ahmedelz  admin                 352 Feb 17 20:09 .\n8592742371 drwxr-xr-x   9 ahmedelz  admin                 288 Feb 17 20:04 ..\n8592742373 lrwxr-xr-x   1 ahmedelz  GLOBAL\\Domain Users     4 Feb 17 20:09 gview -> mvim\n8592742374 lrwxr-xr-x   1 ahmedelz  GLOBAL\\Domain Users     4 Feb 17 20:09 gvim -> mvim\n8592742375 lrwxr-xr-x   1 ahmedelz  GLOBAL\\Domain Users     4 Feb 17 20:09 gvimdiff -> mvim\n8592742376 lrwxr-xr-x   1 ahmedelz  GLOBAL\\Domain Users     4 Feb 17 20:09 mview -> mvim\n8592742377 -rwxr-xr-x   1 ahmedelz  admin                1920 Feb 17 20:01 mvim\n8592742378 lrwxr-xr-x   1 ahmedelz  GLOBAL\\Domain Users     4 Feb 17 20:09 mvimdiff -> mvim\n8592742379 lrwxr-xr-x   1 ahmedelz  GLOBAL\\Domain Users     4 Feb 17 20:09 view -> mvim\n8592742380 lrwxr-xr-x   1 ahmedelz  GLOBAL\\Domain Users     4 Feb 17 20:09 vim -> mvim\n8592742381 lrwxr-xr-x   1 ahmedelz  GLOBAL\\Domain Users     4 Feb 17 20:09 vimdiff -> mvim\nls -ali /Applications/MacVim.app/Contents/MacOS/\ntotal 7216\n8592742656 drwxr-xr-x  5 ahmedelz  admin      160 Feb 17 20:09 .\n8592742371 drwxr-xr-x  9 ahmedelz  admin      288 Feb 17 20:04 ..\n8592742657 -rwxr-xr-x  1 ahmedelz  admin   429364 Feb 17 20:04 MacVim\n8592742659 -rwxr-xr-x  1 ahmedelz  admin  3256684 Feb 17 20:09 Vim\n8592742658 -rwxr-xr-x  1 ahmedelz  admin      685 Feb 17 20:04 macvim-askpass\n```. It seems that the links in /Applications/MacVim.app/Contents/bin were created using a different group. I removed the links and recreated them with the same username:group. \n$ ls -ali /Applications/MacVim.app/Contents/bin/\ntotal 8\n8592742372 drwxr-xr-x  11 ahmedelz  admin   352 Feb 20 10:15 .\n8592742371 drwxr-xr-x   9 ahmedelz  admin   288 Feb 17 20:04 ..\n8592763426 lrwxr-xr-x   1 ahmedelz  admin     4 Feb 20 10:14 gview -> mvim\n8592763447 lrwxr-xr-x   1 ahmedelz  admin     4 Feb 20 10:14 gvim -> mvim\n8592763459 lrwxr-xr-x   1 ahmedelz  admin     4 Feb 20 10:14 gvimdiff -> mvim\n8592763465 lrwxr-xr-x   1 ahmedelz  admin     4 Feb 20 10:15 mview -> mvim\n8592742377 -rwxr-xr-x   1 ahmedelz  admin  1920 Feb 17 20:01 mvim\n8592763469 lrwxr-xr-x   1 ahmedelz  admin     4 Feb 20 10:15 mvimdiff -> mvim\n8592763476 lrwxr-xr-x   1 ahmedelz  admin     4 Feb 20 10:15 view -> mvim\n8592763480 lrwxr-xr-x   1 ahmedelz  admin     4 Feb 20 10:15 vim -> mvim\n8592763482 lrwxr-xr-x   1 ahmedelz  admin     4 Feb 20 10:15 vimdiff -> mvim\nBut still:\n$ /Applications/MacVim.app/Contents/bin/gvim\nobjc[7909]: Class MMBackend is implemented in both /Applications/MacVim.app/Contents/bin/../MacOS/Vim (0x107ec9980) and /Applications/MacVim.app/Contents/MacOS/Vim (0x213642980). One of the two will be used. Which one is undefined.\nmac-ahmedelz:bin ahmedelz$ objc[7923]: Class MMBackend is implemented in both /Applications/MacVim.app/Contents/bin/../MacOS/Vim (0x10b1d4980) and /Applications/MacVim.app/Contents/MacOS/Vim (0x20c2af980). One of the two will be used. Which one is undefined.. +1. ",
    "DevByStarlight": "Also seeing this error on MacVim 8.0.1522 installed via homebrew. Running on OSX Sierra (not High Sierra).\n```\ngvim --version\nobjc[12210]: Class MMBackend is implemented in both /Apps/MacVim.app/Contents/bin/../MacOS/Vim (0x10babc980) and /Apps/MacVim.app/Contents/MacOS/Vim (0x20d43e980). One of the two will be used. Which one is undefined.\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Feb 18 2018 04:09:42)\nmacOS version\nIncluded patches: 1-1522\nCompiled by root@Traviss-Mac-913.local\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl               +farsi             +mouse_netterm     +tag_binary\n+arabic            +file_in_path      +mouse_sgr         +tag_old_static\n+autocmd           +find_in_path      -mouse_sysmouse    -tag_any_white\n-autoservername    +float             +mouse_urxvt       -tcl\n+balloon_eval      +folding           +mouse_xterm       +termguicolors\n+balloon_eval_term -footer            +multi_byte        +terminal\n+browse            +fork()            +multi_lang        +terminfo\n++builtin_terms    +fullscreen        -mzscheme          +termresponse\n+byte_offset       -gettext           +netbeans_intg     +textobjects\n+channel           -hangul_input      +num64             +timers\n+cindent           +iconv             +odbeditor         +title\n+clientserver      +insert_expand     +packages          +toolbar\n+clipboard         +job               +path_extra        +transparency\n+cmdline_compl     +jumplist          +perl/dyn          +user_commands\n+cmdline_hist      +keymap            +persistent_undo   +vertsplit\n+cmdline_info      +lambda            +postscript        +virtualedit\n+comments          +langmap           +printer           +visual\n+conceal           +libcall           +profile           +visualextra\n+cryptv            +linebreak         +python/dyn        +viminfo\n+cscope            +lispindent        +python3/dyn       +vreplace\n+cursorbind        +listcmds          +quickfix          +wildignore\n+cursorshape       +localmap          +reltime           +wildmenu\n+dialog_con_gui    +lua/dyn           +rightleft         +windows\n+diff              +menu              +ruby/dyn          +writebackup\n+digraphs          +mksession         +scrollbind        -X11\n+dnd               +modify_fname      +signs             -xfontset\n-ebcdic            +mouse             +smartindent       +xim\n+emacs_tags        +mouseshape        +startuptime       -xpm\n+eval              +mouse_dec         +statusline        -xsmp\n+ex_extra          -mouse_gpm         -sun_workshop      -xterm_clipboard\n+extra_search      -mouse_jsbterm     +syntax            -xterm_save\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n       defaults file: \"$VIMRUNTIME/defaults.vim\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X -DMACOS_X_DARWIN  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1     \nLinking: clang   -L. -fstack-protector -L/usr/local/lib -L/usr/local/opt/libyaml/lib -L/usr/local/opt/openssl/lib -L/usr/local/opt/readline/lib -L. -fstack-protector -L/usr/local/lib -L/usr/local/opt/libyaml/lib -L/usr/local/opt/openssl/lib -L/usr/local/opt/readline/lib  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -framework AppKit   -fstack-protector  -L/System/Library/Perl/5.16/darwin-thread-multi-2level/CORE \n```\nAdditionally, various operations such as copy/paste echo out the the terminal which launched it.\n2018-02-23 10:42:26.987 MacVim[11933:65034] IMKInputSession presentFunctionRowItemTextInputViewWithEndpoint:completionHandler: : [self textInputContext]=0x0 *NO* NSRemoteViewController to client, NSError=Error Domain=NSCocoaErrorDomain Code=4099 \"The connection from pid 0 was invalidated from this process.\" UserInfo={NSDebugDescription=The connection from pid 0 was invalidated from this process.}, com.apple.inputmethod.EmojiFunctionRowItem\n2018-02-23 10:42:29.082 MacVim[11933:65034] action newWindow:\n2018-02-23 10:46:44.906 MacVim[11933:65034] action paste:\n2018-02-23 10:46:57.134 MacVim[11933:65034] action paste:\n2018-02-23 10:47:28.117 MacVim[11933:65034] action selectAll:\n2018-02-23 10:47:28.396 MacVim[11933:65034] action copy:\n2018-02-23 10:47:33.634 MacVim[11933:65034] action selectAll:\nPreviously was on the 138 release. Upgraded to 144 last month and it started reporting \"strange but benign\" behavior such as above message which 145 seems to still exhibit.\n```\nbrew info macvim\nmacvim: stable 8.0-145 (bottled), HEAD\nGUI for vim, made for macOS\nhttps://github.com/macvim-dev/macvim\n/usr/local/Cellar/macvim/8.0-138 (2,139 files, 34.8MB)\n  Poured from bottle on 2017-10-16 at 22:47:17\n/usr/local/Cellar/macvim/8.0-144 (2,145 files, 34.2MB)\n  Poured from bottle on 2018-01-02 at 10:48:17\n/usr/local/Cellar/macvim/8.0-144_3 (2,145 files, 34.2MB)\n  Poured from bottle on 2018-01-08 at 11:34:07\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/macvim.rb\n==> Dependencies\nRecommended: cscope \u2714, python \u2718\nOptional: lua \u2714, luajit \u2718, python3 \u2714\n==> Requirements\nBuild: xcode \u2714\n==> Options\n--with-lua\n    Build with lua support\n--with-luajit\n    Build with luajit support\n--with-override-system-vim\n    Override system vim\n--with-python3\n    Build with python3 support\n--without-cscope\n    Build without cscope support\n--without-python\n    Build without python support\n--HEAD\n    Install HEAD version\n```\nList of installed Vundle plugins:\nPlugin 'gmarik/vundle'\nPlugin 'tpope/vim-sensible'\nPlugin 'bling/vim-airline'\nPlugin 'tpope/vim-fugitive'\nPlugin 'scrooloose/syntastic'\nPlugin 'kien/ctrlp.vim'\nPlugin 'kien/rainbow_parentheses.vim'\nPlugin 'tpope/vim-surround'\nPlugin 'scrooloose/nerdcommenter'\nPlugin 'scrooloose/nerdtree'\nPlugin 'pangloss/vim-javascript'\nPlugin 'shutnik/jshint2.vim'\nPlugin 'tfnico/vim-gradle'\nPlugin 'jakedouglas/exuberant-ctags'\nPlugin 'meonlol/javacomplete'\nPlugin 'Tpope/vim-dispatch'\nPlugin 'OmniSharp/omnisharp-vim'\nPlugin 'Shougo/unite.vim'\nPlugin 'Valloric/YouCompleteMe'\nPlugin 'mileszs/ack.vim'\nSide note: The meonlol/javacomplete and Shougo/unite.vim plugins failed to upgrade in 145. But that might be something with the plugins themselves or my configuration. Mentioning them in case related to the the MMBackend message. ",
    "trak3r": "@DevByStarlight while troubleshooting another issue I came across this report and noticed you are using an old dead version of kien/ctrlp.vim the new one is at ctrlpvim/ctrlp.vim you might want to switch.\nMy possibly-related issue https://github.com/macvim-dev/macvim/issues/642\n. UPDATE\nSeems the core issue actually stems from this extension to ctrlp:\nhttps://github.com/JazzCore/ctrlp-cmatcher\nRemoving this line from my config allowed vanilla ctrlp to work again:\nlet g:ctrlp_match_func = {'match' : 'matcher#cmatch' }\nThis extension seems to have a dependency on Python so perhaps the combination of brew-Macvim and brew-Python are the cause.\n. UPDATE\nI still haven't resolved this issue.\nFor any future Googlers that land here trying to solve the same problem, I have temporarily switched to FelikZ/ctrlp-py-matcher. Its pattern matching isn't as good as the former but it'll do for now.\nhttps://github.com/FelikZ/ctrlp-py-matcher\n. > Did you resolve this issue?\nNope I just learned to love FelikZ/ctrlp-py-matcher\n. ",
    "sachka": "Why is that this has not been corrected? my fork has a fix sachka/macvim. Patching this would be great guys.. ",
    "smiglo": "I am experiencing the same problem in a very long (>3500 lines) bash file. When scrolling down, at certain line syntax gets lost and is uncoverable by syntax sync fromstart.\nVIM - Vi IMproved 8.0 (2016 Sep 12, compiled Feb 18 2018 04:09:42)\nIncluded patches: 1-1522. ",
    "FFEVER": "The same problem.. I've found my solution.\n:syntax enable will take back the syntax highlight.\nI don't know why but it works.\n(Mine is >5000 lines of scss file.)\nVIM - Vi IMproved 8.1 (2018 May 17, compiled Jun 13 2018 07:24:23)\nmacOS version\nIncluded patches: 1-50\nCompiled by Homebrew. ",
    "krlawrence": "I listed a way to reproduce this in my initial entry above @eirnym . The file needs to be longer than 3,500 lines I think. I see it in files in the order of 40K lines and it is 100% reproducible.. Thanks I will try this. On MacVim I am seeing syntax highlighting get lost a lot more often these days even on small files of many different types.  So (for me anyway) it is not limited to Asciidoc files any more.. ",
    "diegoholiveira": "An extra detail: sounds like a problem with macvim version available with cask. I just remove the cask version and install macvim with brew install and everything is working as it should.\nThis is what I had before:\n$ brew cask info macvim\nmacvim: 8.0.145\nThis is what I have now:\n$ brew info macvim\nmacvim: stable 8.0-145 (bottled), HEAD. > For example, :py3 print('test'.encode('utf8')) was enough to crash Macvim for me. Give this a try and see if it's the same for you.\nYes, when I run the tests that you suggest, MacVim crashes.. ",
    "dejavuzhang": "I think it's not the problem of opening python files. I had the same issue after reinstalling python and macvim, and it happens when opening any files in command line. If I open the application directly, nothing renders.\nInterestingly, the problem was solved after I switched to the cask version.. ",
    "schar": "I've observed similar behavior. In my case, the issue wasn't opening python files (as noted in the comment above mine). Rather, it was that one of my plugins was using python, and something about python integration appears to be broken in current builds of Macvim. (I couldn't duplicate this problem with neovim or vim.)\nFor example, :py3 print('test'.encode('utf8')) was enough to crash Macvim for me. Give this a try and see if it's the same for you.\nThe issue persisted, whether I brewed Macvim (brew install macvim) or uninstalled the brew version and then installed the binary directly. Tapping then brewing does give me a working Macvim, with working python. (Something was going wrong with the cask install, so I didn't get a chance to test that.). ",
    "c0llision": "This sounds like the same issue as #649 \nThis is what solved it for me:\nbrew unlink macvim\nbrew install macvim --HEAD. This is what fixed it for me:\nbrew unlink macvim\nbrew install macvim --HEAD. ",
    "chuanchan1116": "This problem can be resolved if you brew reinstall macvim --build-from-source. I have made an PR for rebuilding the bottle, waiting for merge.. ",
    "alex-protean": "@c0llision That fixed it, thank you:\nbrew unlink macvim\nbrew install macvim --HEAD. ",
    "edouardp": "$MYVIMRC appears to be set when I launch a terminal from within MacVim and Vim, but not from opening a new shell in Terminal.app. I'm not sure who is setting that variable, but it might be enough to test for that in your .zshrc file.. I was about to open a ticket on exactly this - so instead I'll leave a \"me too\". \nOther mappings work fine - it's just Command-* mappings that don't appear to be mappable. tmap <C-v> <C-w>\"+, for example, works fine - hitting ctrl-v with that mapping in place pastes the clipboard into the terminal session as expected.. So it looks like the macaction support for Command-V doesn't properly handle terminal mode - which I guess makes sense because it's a recent addition.\nIn the meantime, the following mappings, in you gvimrc file, will get Command-V working in different modes, including terminal mode:\nmacm Edit.Paste key=<nop>\ntmap <D-v> <C-w>\"+\nnnoremap <D-v> \"+p\nvnoremap <D-v> \"+p\ninoremap <D-v> <C-R><C-O>+\ncnoremap <D-v> <C-R><C-O>+\nThere are probably some modes I've missed though.... ",
    "jeromedalbert": "Thanks for the tip @edouardp. I have changed my line to \nif [ -z $TMUX ] && [ -z $MYVIMRC ]; then; tmux-start; fi\nand that did the trick \ud83d\udc4d . ",
    "rocheers": "[difftool \"mvimdiff\"]\n    cmd = mvim -f -d \\\"$LOCAL\\\" \\\"$REMOTE\\\"\nadd this above to your gitconfig and it should work.. ",
    "i-schuetz": "Ah okay. Thought it was possible to somehow get it to display in the terminal. Just to understand, what I open with mvim -v is then not MacVim?. @eirnym That explains it, thanks!\nBut why does the terminal based MacVim use Vi mode (which makes not possible to e.g. set a custom font)?. @eirnym thanks!. ",
    "JadingTsunami": "This has happened before (see: #562, #647).\nAdvice:\n\nIf you are using Homebrew, try: brew reinstall macvim --build-from-source\nTry:\n\nvim\nif has('python3')\n    command! -nargs=1 Py py3 <args>\n    set pythonthreedll=/usr/local/Frameworks/Python.framework/Versions/3.6/Python\n    set pythonthreehome=/usr/local/Frameworks/Python.framework/Versions/3.6\nelse\n    command! -nargs=1 Py py <args>\n    set pythondll=/usr/local/Frameworks/Python.framework/Versions/2.7/Python\n    set pythonhome=/usr/local/Frameworks/Python.framework/Versions/2.7\nendif. Have you tried the steps in #667?. ",
    "dschuessler": "I added your second advice to my .vimrc and it worked. Thank you very much!. 1. Open an empty buffer.\n2. :set fileencoding=latin1\n3. Write an Emoji into the buffer.\n4. Try to save as described above.. ",
    "epheien": "such as me. > Seems to work for me. How does it not work for you @epheien?\n\nI confirmed it wasn't working in 135, but the newest versions (at least for the last 3 releases from 153) should work. Do note that you won't get a mouse over selection effect. Only the mouse click registers so it's not obvious.\n\nI test in MacVim Snapshot 154, It works.\nSo, please close this issue.. same in MacVim Snapshot 155\nworkaround as it\nset guioptions-=r\nset guioptions-=L\nFinnally, my guioptions=g\nIt's problem of scrollbar rendering. Finnally\uff0cI found a solution:\n\" I don't known why this line not work..., it seems a bug\n\"tnoremap <M-.> <C-w>:<C-u>call term_sendkeys(bufnr('%'), \"\\<Esc>.\")<CR>\ntnoremap <silent> <M-.> <C-w>:call <SID>tmap_meta('.')<CR>\nfunction s:tmap_meta(key)\n    call term_sendkeys(bufnr('%'), \"\\<Esc>\" . a:key)\nendfunction. I seems bug of vim, I will report it to vim. ",
    "darkermatter": "The second step in #667 fixed it for me. ",
    "slmcrs": "Also have experienced this, seems to happen when the native full screen feature is enabled.. ",
    "Shane325": "Same issue for me, when the native full screen feature is on. macOS High Sierra.. ",
    "louiswolfers": "Workarounds either don't work or slow down MacVim :(. Well, MacVim is an open source project and their authors do not have the obligation to fix the bugs of other users. The only \"good\" solutions here are:\n\nturning off native fullscreen: just create a new desktop for each MacVim instance you want to have in fullscreen\nmoving to vimR/neovim\nfixing the bugs yourself (good luck). \n",
    "marr": "This is a pretty major problem for me. I'm using an external monitor, and have tried turning off Core Renderer as well as native full screen. Neither really fix the problem or introduce other issues that are just as bad. Are the authors able to address whats going on here?. ",
    "ferrum-salvator": "I haven't checked, but it certainly does. That said, the issue appears to have disappeared in 8.1, or was transient to begin with, so thanks for reminding me to check.\n\n. ",
    "moyuanhuang": "I'm also experiencing this behavior in macvim, but it works fine if I use the origin vim in terminal.. ",
    "blahgeek": "I found that if I disable the MacVim menu feature by set guioptions+=M, I would be able to map <D-v>.\n'M'   The system menu \"$VIMRUNTIME/menu.vim\" is not sourced.  Note\n        that this flag must be added in the .vimrc file, before\n        switching on syntax or filetype recognition (when the |gvimrc|\n        file is sourced the system menu has already been loaded; the\n        `:syntax on` and `:filetype on` commands load the menu too).. seems to be related to https://github.com/macvim-dev/macvim/pull/678. ",
    "thpani": "\ndo you have you python 3 installed?\n\nyes\n\nand have you set up MacVim to use it?\n\nyes\nThe plugin works in general. The problem is that macvim randomly crashes.. ",
    "landersson": "I'm still on 10.11 on would like a compatible build.. Works for me on 10.11. Thanks!. ",
    "gkra": "Just had to rebuild a 10.12 Mac, and yes, I, too, would like my MacVIM back.. ",
    "KayDee": "Both of the commands are giving errors.\nmvim -v still says \"Sorry, cannot find Vim executable\".\n/Applications/MacVim.app/Contents/bin/Vim says no such file or directory.\nI checked, it is there.. ",
    "kaitolucifer": "@eirnym \nLooks like vim can be compiled.\n\n==> Upgrading vim \n==> Downloading https://github.com/vim/vim/archive/v8.1.0050.tar.gz\n==> Downloading from https://codeload.github.com/vim/vim/tar.gz/v8.1.0050\n################################################################## 100.0%\n==> ./configure --prefix=/usr/local --mandir=/usr/local/Cellar/vim/8.1.0050/shar\n==> make\n==> make install prefix=/usr/local/Cellar/vim/8.1.0050 STRIP=/usr/bin/true\n==> Not running post_install as we're building a bottle\nYou can run it manually using brew postinstall vim\n\ud83c\udf7a  /usr/local/Cellar/vim/8.1.0050: 1,432 files, 23.3MB, built in 11 minutes 33 seconds\n. @vladdoster \nI used brew install macvim --force-bottleto make the installation successful.\nBut in this way the macvim is not compiled with either python2 or python3, so I can't use plugin like Jedi-vim.. ",
    "simonask": "This seems to be fixed in snapshot 149.. ",
    "micbou": "Yes, it is. I'll close the issue (even though I think snapshot 148 should still be removed).. ",
    "dond--": "It's in GUI, terminal version is OK.\nPerhaps it somehow relates to particular font(s) \u2013 when I run MacVim with -u NONE, it starts with Menlo font and everything looks good. Once I change font to Fira Code (nice one I wasn't aware of, BTW), issue appears again.\n\n. > Is it some specific text?\nNot much \u2013 see my previous comments, for me it's enough to write \u03b1 \u03b2 \u03c9 somewhere but start of the line and rendering goes wrong. Since it's present only with some fonts I'd suspect it may relate to particular font. Previous build was OK though.. Oh, and I just found another subtle detail: Greek char has to be followed by another latin char (or even space or non-breakable space and then latin char).\nSo, schema is:\n1. latin chars\n2. Greek char(s)\n3. latin chars (optional space)\nAnd yet another detail: build 146 is OK, builds 148 and 149 are broken.\nSee attached screenshot, upper half is build 146, lower half is build 149. Font Source Code Pro.\n\n. Seems to me it also broke background transparency in a window, is it possible? Should I file new issue for it?. It basically works but percepted transparency value is somehow influenced by colorscheme background color, too, or at least it seems to. When I set transparency to value of 15, you'd see white background of this very window in attached picture but you won't see anything until I set transparency to about value of 45. (Colorscheme torte.)\nWhen I change colorscheme to evening which has brighter background, say evening, it's enough to set transparency to value of 25 to get really transparent background. The darker the background in colorscheme, the higher value of transparency you have to set to get non-opaque window, seems to me. Definitely behaviour has changed somehow.\nOfficial binary release 8.1.560, version tells: VIM - Vi IMproved 8.1 (2018 May 18, compiled Dec  5 2018 11:32:33) \u2013 full output also attached.\nWorkaround is simple: set transparency to higher value to get same perception as before. I just wanted to point out it may be related to window/title bar color issue.\n\nmacvim-version-560.txt\n. Oh, and OS: Mojave 10.14.1 (18B75).. OK, no problem. I don't have an opinion on this, just wanted to point out possible trouble. Thanks for your time, anyway.. ",
    "schveiguy": "I have the following as well, which seems to be even less correct:\n\nThe notes say patch 8.1.0235 as well, which is still less than my current version IMO.. ",
    "segeljakt": "Woops, just found out it was a plugin and not macvim, sorry.. Thanks for the comments! It seems like my mac for some reason both has a Show Next Tab and a Select Next Tab button which got me confused but it's no big issue.\n. Also, remapping cnoremap <C-c> <Esc> does not work. :/. ",
    "moti-kagan": "When opening an Arabic text file, and entering the vim command \"set arabic\", the resulting right-to-left display of the text isn't happening correctly.\nThis occurred in version 8.1.0072.\nThings work okay when I downgrade to 8.0.1633.. I'm sorry but I already uninstalled 8.1.0072--I should have saved a screen cap. I think the order of letters within words was backwards. The last letter of each words was first, second-to-last was second, etc.. ",
    "andreasmhallberg": "I experience the same issue on 8.1.72. When doing :set arabic characters are still displayed LTR (as in the bottom line in the image). If I pass the cursor over the word characters are then order correctly as RTL (top line).\nThe word in the example is \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064a\u0646\n. ",
    "exanter": "\nAnd under advanced, both \"Use core text renderer\" and \"Draw marked text inline\" are checked, nothing else is.. ",
    "Khalilw1": "It is an ongoing issue on vim over - https://github.com/vim/vim/issues/3117 . ",
    "dantezhu": "@ichizok good. ",
    "sloria": "I'm currently working around this issue by compiling with python 2 support:\nbrew reinstall macvim --with-python@2 --with-lua --with-luajit --with-override-system-vim. Actually, this is a better workaround than installing with python 2: Put the following at the top of your vimrc.\nviml\nif has('python3')\n  silent! python3 1\nendif\nFrom https://github.com/vim/vim/issues/3117#issuecomment-402622616. @HolaYang as mentioned above, this is a vim issue--not a macvim issue--so I think this issue should be locked and/or closed. I recommend using the workaround I posted above in the meantime. . ",
    "HolaYang": "Two weeks passed, any pr to resolve this problem? Or should I install an older version macvim?. ",
    "korya": "@ichizok Any idea when it is going to be released and available in homebrew?. ",
    "hurricane1026": "My macvim also linked to python3 after a homebrew upgrading.. still failure.\nand I use --with-python@2 flag.. ",
    "ksletmoe": "This appears to be causing issues with vim plugins that utilize Python. \nSee https://github.com/davidhalter/jedi-vim/issues/526, https://github.com/davidhalter/jedi-vim/issues/841. ",
    "znculee": "@eirnym Thank you for your reply. My macvim is installed with brew cask, which is a pre-compiled version. I open this issue in macvim repo because my vim in CLI, installed with brew, can work well in the same situation.. Hi Arseny,\nThanks for your reply! My MacVim is installed with brew cask, which is probably a pre-complied version, packed in a dmg file, therefore, I am not sure whether it is built with Python 3.7.\nI have solve this issue in both  previous versions of MacVim and Vim of CLI, with let g:ycm_server_python_interpreter='/usr/bin/python\u2019. But in the last MacVim version, this problem cannot be solved as I issued in GitHub.\nBest,\nXintong\n\nOn 10 Jul 2018, at 06:39, Arseny Nasokin notifications@github.com wrote:\nis your MacVim built with Python 3.7? if yes, ViM (and MacVim as well) doesn't really well support it.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/macvim-dev/macvim/issues/709#issuecomment-403642346, or mute the thread https://github.com/notifications/unsubscribe-auth/AOoaVdAfBxjsnhyV2vKs2uzCqT03UEZ8ks5uE9uugaJpZM4VHran.\n\n\n. @eirnym The MacVim is installed by brew cask, which is in a dmg file. That means I have not built it on my own. Thanks anyway.. @eirnym I fixed this problem by add let $PATH=let $PATH='/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin' in my .gvimrc. Actually this also disable the using of different versions of python and packages in conda with MacVim. But I only programming in CLI, so the MacVim only using system's python suits my demand.. I don't know why. This problem suddenly does get fixed..... ",
    "vladdoster": "Same issue. Did you happen to get this resolved?. ",
    "qvacua": "Oh, I see the PR of @ichizok which is the better (or real) solution. I'll close my PR.. Since useLigatures is a BOOL (yet), I thought that it was not necessary, but I'll revert it to numberWithBool.. ",
    "idoo": "A.W.E.S.O.M.E.. ",
    "vitaly-zdanevich": "Can we see the statusline on the touchbar now?. For me touchbar is usually useless, but having statusline here will free line of text :)\n\n. ",
    "lkebin": "Hi @eirnym ,\nI did reinstall MacVim with python3 via Homebrew, it is still crash\n:version\n```\n:version\nVIM - Vi IMproved 8.1 (2018 May 17, compiled Aug  2 2018 12:11:27)\nmacOS version\nIncluded patches: 1-72\nCompiled by Homebrew\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl               +cmdline_hist      +eval              +insert_expand     +modify_fname      +netbeans_intg     +rightleft         +terminal          +vreplace\n+arabic            +cmdline_info      +ex_extra          +job               +mouse             +num64             +ruby              +terminfo          +wildignore\n+autocmd           +comments          +extra_search      +jumplist          +mouseshape        +odbeditor         +scrollbind        +termresponse      +wildmenu\n-autoservername    +conceal           +farsi             +keymap            +mouse_dec         +packages          +signs             +textobjects       +windows\n+balloon_eval      +cryptv            +file_in_path      +lambda            -mouse_gpm         +path_extra        +smartindent       +timers            +writebackup\n+balloon_eval_term +cscope            +find_in_path      +langmap           -mouse_jsbterm     +perl              +startuptime       +title             -X11\n+browse            +cursorbind        +float             +libcall           +mouse_netterm     +persistent_undo   +statusline        +toolbar           -xfontset\n++builtin_terms    +cursorshape       +folding           +linebreak         +mouse_sgr         +postscript        -sun_workshop      +transparency      +xim\n+byte_offset       +dialog_con_gui    -footer            +lispindent        -mouse_sysmouse    +printer           +syntax            +user_commands     -xpm\n+channel           +diff              +fork()            +listcmds          +mouse_urxvt       +profile           +tag_binary        +vertsplit         -xsmp\n+cindent           +digraphs          +fullscreen        +localmap          +mouse_xterm       -python            +tag_old_static    +virtualedit       -xterm_clipboard\n+clientserver      +dnd               -gettext           -lua               +multi_byte        +python3           -tag_any_white     +visual            -xterm_save\n+clipboard         -ebcdic            -hangul_input      +menu              +multi_lang        +quickfix          +tcl               +visualextra\n+cmdline_compl     +emacs_tags        +iconv             +mksession         -mzscheme          +reltime           +termguicolors     +viminfo\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n       defaults file: \"$VIMRUNTIME/defaults.vim\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X -DMACOS_X_DARWIN  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: clang   -L.             -L /BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/libressl/lib -L/B\nuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/lib -L.             -L /BuildRoot/Applications/Xcode.ap\np/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/libressl/lib -L/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.\nplatform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/lib  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -framework AppKit   -fstack-pr\notector  -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE -lperl  -L/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/config-3.7m-darwin -lpytho\nn3.7m -framework CoreFoundation -F/System/Library/Frameworks -framework Tcl -framework CoreFoundation -framework Ruby\n```\nDiagnosticReports\n```\nProcess:               Vim [27331]\nPath:                  /usr/local/Cellar/macvim/8.1-149_1/MacVim.app/Contents/MacOS/Vim\nIdentifier:            Vim\nVersion:               0\nCode Type:             X86-64 (Native)\nParent Process:        MacVim [26159]\nResponsible:           Vim [27331]\nUser ID:               501\nDate/Time:             2018-08-02 12:36:28.324 +0800\nOS Version:            Mac OS X 10.13.6 (17G65)\nReport Version:        12\nAnonymous UUID:        9A9663B8-0DFB-06F2-46BB-ADCA8484B152\nSleep/Wake UUID:       ACC43F6A-4CD8-4640-85BD-6D58207451F8\nTime Awake Since Boot: 70000 seconds\nTime Since Wake:       12000 seconds\nSystem Integrity Protection: disabled\nCrashed Thread:        0  Dispatch queue: com.apple.main-thread\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\nException Codes:       KERN_INVALID_ADDRESS at 0x00007fc78630aa54\nException Note:        EXC_CORPSE_NOTIFY\nTermination Signal:    Segmentation fault: 11\nTermination Reason:    Namespace SIGNAL, Code 0xb\nTerminating Process:   Vim [27331]\nVM Regions Near 0x7fc78630aa54:\n    Stack                  0000700008e99000-0000700008f1b000 [  520K] rw-/rwx SM=COW  thread 2\n--> \n    MALLOC_TINY            00007fc788400000-00007fc788800000 [ 4096K] rw-/rwx SM=PRV  \nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   libsystem_kernel.dylib          0x00007fff7f5a248a __kill + 10\n1   Vim                             0x000000010685df02 mch_exit + 184\n2   Vim                             0x000000010693d893 getout + 609\n3   libsystem_platform.dylib        0x00007fff7f760f5a _sigtramp + 26\n4   ???                             000000000000000000 0 + 0\n5   Vim                             0x0000000106885449 nfa_regmatch + 538\n6   Vim                             0x0000000106884e59 nfa_regexec_both + 1113\n7   Vim                             0x000000010686d5ef vim_regexec_multi + 135\n8   Vim                             0x00000001068c5bbe syn_regexec + 109\n9   Vim                             0x00000001068c003f syn_current_attr + 1690\n10  Vim                             0x00000001068bf938 get_syntax_attr + 193\n11  Vim                             0x0000000106891419 win_line + 12625\n12  Vim                             0x000000010688c1ea win_update + 4307\n13  Vim                             0x0000000106889658 update_screen + 1080\n14  Vim                             0x000000010693db62 main_loop + 704\n15  Vim                             0x000000010693d5c2 vim_main2 + 3597\n16  Vim                             0x000000010693c1ca main + 8478\n17  libdyld.dylib                   0x00007fff7f452015 start + 1\nThread 1:\n0   libsystem_kernel.dylib          0x00007fff7f5a328a __workq_kernreturn + 10\n1   libsystem_pthread.dylib         0x00007fff7f76a009 _pthread_wqthread + 1035\n2   libsystem_pthread.dylib         0x00007fff7f769be9 start_wqthread + 13\nThread 2:\n0   libsystem_kernel.dylib          0x00007fff7f5a328a __workq_kernreturn + 10\n1   libsystem_pthread.dylib         0x00007fff7f76a20e _pthread_wqthread + 1552\n2   libsystem_pthread.dylib         0x00007fff7f769be9 start_wqthread + 13\nThread 0 crashed with X86 Thread State (64-bit):\n  rax: 0x0000000000000000  rbx: 0x00000001069a5268  rcx: 0x000000010947da28  rdx: 0x0000000000000000\n  rdi: 0x0000000000006ac3  rsi: 0x000000000000000b  rbp: 0x000000010947da50  rsp: 0x000000010947da28\n   r8: 0x0000000000000001   r9: 0x00007fc78ae7f550  r10: 0x00007fff7f5a2fc2  r11: 0x0000000000000206\n  r12: 0x000000010947da60  r13: 0x00000001069a5718  r14: 0x0000000000000001  r15: 0x00000001069a5268\n  rip: 0x00007fff7f5a248a  rfl: 0x0000000000000206  cr2: 0x0000000100911000\nLogical CPU:     0\nError Code:      0x02000025\nTrap Number:     133\nBinary Images:\n       0x106779000 -        0x106971ffb +Vim (0) <4C2C1822-5FD1-316E-8F76-3BEACE4B9EC9> /usr/local/Cellar/macvim/8.1-149_1/MacVim.app/Contents/MacOS/Vim\n       0x1069fe000 -        0x106b14ff7  libperl.dylib (113.71.2) <12F08E29-4502-3619-9E1E-1B36DB32B056> /System/Library/Perl/5.18/darwin-thread-multi-2level/CORE/libperl.dylib\n       0x106b40000 -        0x106cc5fff +org.python.python (3.7.0, [c] 2001-2018 Python Software Foundation. - 3.7.0)  /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/Python\n       0x106deb000 -        0x106dedff3  com.apple.textencoding.unicode (4.0 - 4.0) <2E85076C-3BB1-3522-B03C-D160CD0CCB17> /System/Library/TextEncodings/Unicode Encodings.bundle/Contents/MacOS/Unicode Encodings\n       0x106df3000 -        0x106df4fff +_heapq.cpython-37m-darwin.so (0) <8FE97434-8B32-3165-A0E4-BC437576A992> /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_heapq.cpython-37m-darwin.so\n       0x106df8000 -        0x106df9fff +_posixsubprocess.cpython-37m-darwin.so (0) <4055D61D-57DA-3005-BF42-691AAE9959C8> /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_posixsubprocess.cpython-37m-darwin.so\n       0x106dfc000 -        0x106dfdfff +grp.cpython-37m-darwin.so (0) <8721F97F-B43A-3FEF-A3A1-B5C19B0BF75A> /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/grp.cpython-37m-darwin.so\n       0x109939000 -        0x10993cfff +select.cpython-37m-darwin.so (0)  /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/select.cpython-37m-darwin.so\n       0x109941000 -        0x109945ffb +math.cpython-37m-darwin.so (0) <37D27C6A-F45F-3951-8021-80CF2246FAFA> /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/math.cpython-37m-darwin.so\n       0x109a0b000 -        0x109a0efff +zlib.cpython-37m-darwin.so (0)  /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/zlib.cpython-37m-darwin.so\n       0x109a13000 -        0x109a14fff +_bz2.cpython-37m-darwin.so (0)  /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_bz2.cpython-37m-darwin.so\n       0x109a18000 -        0x109a1bff7 +_lzma.cpython-37m-darwin.so (0)  /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_lzma.cpython-37m-darwin.so\n       0x109a20000 -        0x109a3bff7 +liblzma.5.dylib (0) <423B98CF-7AF0-325D-AB6A-3F44B56B90C2> /usr/local/opt/xz/lib/liblzma.5.dylib\n       0x109a41000 -        0x109a44fff +_hashlib.cpython-37m-darwin.so (0) <9032193A-5958-3339-BB96-5A5B62E1BC2D> /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_hashlib.cpython-37m-darwin.so\n       0x109a48000 -        0x109a4dffb +_blake2.cpython-37m-darwin.so (0) <0B3A4FEC-8874-36CE-80B1-C59DAC8A1022> /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_blake2.cpython-37m-darwin.so\n       0x109a51000 -        0x109a60fff +_sha3.cpython-37m-darwin.so (0) <9A75DDFA-1789-33C3-A44C-C17C3BE3D30B> /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_sha3.cpython-37m-darwin.so\n       0x109a65000 -        0x109a65fff +_bisect.cpython-37m-darwin.so (0) <73A8052C-837C-3BFE-A81B-500460ECCFBC> /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_bisect.cpython-37m-darwin.so\n       0x109a68000 -        0x109a69fff +_random.cpython-37m-darwin.so (0) <755AA1A5-1D24-31E6-AB20-F6A76AE44FA3> /usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_random.cpython-37m-darwin.so\n       0x109a70000 -        0x109abaacf  dyld (551.4) <8A72DE9C-A136-3506-AA02-4BA2B82DCAF3> /usr/lib/dyld\n       0x109b0e000 -        0x109b4dfff +libssl.1.0.0.dylib (0) <4D343D8E-B72A-38BD-9204-CC0354C0B7F8> /usr/local/opt/openssl/lib/libssl.1.0.0.dylib\n       0x109b6c000 -        0x109cdcd67 +libcrypto.1.0.0.dylib (0) <4A0A66FE-A6B9-387F-B265-512C91DF46F9> /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib\n    0x7fff53b05000 -     0x7fff53b05fff  com.apple.Accelerate (1.11 - Accelerate 1.11) <8632A9C5-19EA-3FD7-A44D-80765CC9C540> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate\n    0x7fff53b06000 -     0x7fff53b1cfef  libCGInterfaces.dylib (417.2) <2E67702C-75F6-308A-A023-F28120BEE667> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/Libraries/libCGInterfaces.dylib\n    0x7fff53b1d000 -     0x7fff5401bfc3  com.apple.vImage (8.1 - ???)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage\n    0x7fff5401c000 -     0x7fff54176fe3  libBLAS.dylib (1211.50.2) <62C659EB-3E32-3B5F-83BF-79F5DF30D5CE> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\n    0x7fff54177000 -     0x7fff541a5fef  libBNNS.dylib (38.1) <7BAEFDCA-3227-3E07-80D8-59B6370B89C6> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBNNS.dylib\n    0x7fff541a6000 -     0x7fff54565ff7  libLAPACK.dylib (1211.50.2) <40ADBA5F-8B2D-30AC-A7AD-7B17C37EE52D> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\n    0x7fff54566000 -     0x7fff5457bff7  libLinearAlgebra.dylib (1211.50.2)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib\n    0x7fff5457c000 -     0x7fff54581ff3  libQuadrature.dylib (3) <3D6BF66A-55B2-3692-BAC7-DEB0C676ED29> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libQuadrature.dylib\n    0x7fff54582000 -     0x7fff54602fff  libSparse.dylib (79.50.2) <0DC25CDD-F8C1-3D6E-B472-8B060708424F> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparse.dylib\n    0x7fff54603000 -     0x7fff54616fff  libSparseBLAS.dylib (1211.50.2) <722573CC-31CC-34B2-9032-E4F652A9CCFE> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib\n    0x7fff54617000 -     0x7fff547c4fc3  libvDSP.dylib (622.50.5) <40690941-CF89-3F90-A0AC-A4D200744A5D> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib\n    0x7fff547c5000 -     0x7fff54876fff  libvMisc.dylib (622.50.5)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib\n    0x7fff54877000 -     0x7fff54877fff  com.apple.Accelerate.vecLib (3.11 - vecLib 3.11) <54FF3B43-E66C-3F36-B34B-A2B3B0A36502> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib\n    0x7fff54b6b000 -     0x7fff559c9fff  com.apple.AppKit (6.9 - 1561.60.100) <3C27CF6F-E640-3411-A87D-CCB2222CC754> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\n    0x7fff55a1b000 -     0x7fff55a1bfff  com.apple.ApplicationServices (48 - 50)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\n    0x7fff55a1c000 -     0x7fff55a82fff  com.apple.ApplicationServices.ATS (377 - 445.4) <85E779EE-0219-3181-B4C4-201E4CC82AB5> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS\n    0x7fff55b1b000 -     0x7fff55c3dfff  libFontParser.dylib (222.1.6) <6CEBACDD-B848-302E-B4B2-630CB16E663E> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib\n    0x7fff55c3e000 -     0x7fff55c88ff7  libFontRegistry.dylib (221.4) <5FDB4F1A-E15C-3ACB-A5C1-F15458C0C6DC> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib\n    0x7fff55dca000 -     0x7fff55dceff3  com.apple.ColorSyncLegacy (4.13.0 - 1)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSyncLegacy.framework/Versions/A/ColorSyncLegacy\n    0x7fff55e6e000 -     0x7fff55ec0ffb  com.apple.HIServices (1.22 - 624.1) <66FD9ED2-9630-313C-86AE-4C2FBCB3F351> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices\n    0x7fff55ec1000 -     0x7fff55ecffff  com.apple.LangAnalysis (1.7.0 - 1.7.0)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis\n    0x7fff55ed0000 -     0x7fff55f1cfff  com.apple.print.framework.PrintCore (13.4 - 503.2)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore\n    0x7fff55f1d000 -     0x7fff55f57fff  com.apple.QD (3.12 - 404.2) <38B20AFF-9D54-3B52-A6DC-C0D71380AA5F> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD\n    0x7fff55f58000 -     0x7fff55f64fff  com.apple.speech.synthesis.framework (7.8.1 - 7.8.1)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis\n    0x7fff55f65000 -     0x7fff561f3ff7  com.apple.audio.toolbox.AudioToolbox (1.14 - 1.14)  /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox\n    0x7fff561f5000 -     0x7fff561f5fff  com.apple.audio.units.AudioUnit (1.14 - 1.14)  /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit\n    0x7fff56518000 -     0x7fff568b2ff7  com.apple.CFNetwork (902.1 - 902.1) <76EB8CB6-BF59-3BDA-BF2B-F21B161611B9> /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\n    0x7fff568c7000 -     0x7fff568c7fff  com.apple.Carbon (158 - 158)  /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon\n    0x7fff568c8000 -     0x7fff568cbffb  com.apple.CommonPanels (1.2.6 - 98) <2391761C-5CAA-3F68-86B7-50B37927B104> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels\n    0x7fff568cc000 -     0x7fff56bd1fff  com.apple.HIToolbox (2.1.1 - 911.10)  /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox\n    0x7fff56bd2000 -     0x7fff56bd5ffb  com.apple.help (1.3.8 - 66)  /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help\n    0x7fff56bd6000 -     0x7fff56bdbfff  com.apple.ImageCapture (9.0 - 9.0) <23B4916F-3B43-3DFF-B956-FC390EECA284> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture\n    0x7fff56bdc000 -     0x7fff56c71ffb  com.apple.ink.framework (10.9 - 221) <5206C8B0-22DA-36C9-998E-846EDB626D5B> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink\n    0x7fff56c72000 -     0x7fff56c8cff7  com.apple.openscripting (1.7 - 174) <1B2A1F9E-5534-3D61-83CA-9199B39E8708> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting\n    0x7fff56cad000 -     0x7fff56caefff  com.apple.print.framework.Print (12 - 267) <3682ABFB-2561-3419-847D-02C247F4800D> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print\n    0x7fff56caf000 -     0x7fff56cb1ff7  com.apple.securityhi (9.0 - 55006)  /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI\n    0x7fff56cb2000 -     0x7fff56cb8fff  com.apple.speech.recognition.framework (6.0.3 - 6.0.3) <2ED8643D-B0C3-3F17-82A2-BBF13E6CBABC> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition\n    0x7fff56dd9000 -     0x7fff56dd9fff  com.apple.Cocoa (6.11 - 22) <78E6C28E-4308-3D10-AD14-0CBCF6789B3F> /System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa\n    0x7fff56de7000 -     0x7fff56ea0fff  com.apple.ColorSync (4.13.0 - 3325)  /System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync\n    0x7fff5702d000 -     0x7fff570c0ff7  com.apple.audio.CoreAudio (4.3.0 - 4.3.0)  /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\n    0x7fff57127000 -     0x7fff57150ffb  com.apple.CoreBluetooth (1.0 - 1)  /System/Library/Frameworks/CoreBluetooth.framework/Versions/A/CoreBluetooth\n    0x7fff57151000 -     0x7fff574a7fef  com.apple.CoreData (120 - 851)  /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData\n    0x7fff574a8000 -     0x7fff5758bfff  com.apple.CoreDisplay (99.14 - 99.14)  /System/Library/Frameworks/CoreDisplay.framework/Versions/A/CoreDisplay\n    0x7fff5758c000 -     0x7fff57a2dfef  com.apple.CoreFoundation (6.9 - 1454.90)  /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n    0x7fff57a2f000 -     0x7fff5803ffef  com.apple.CoreGraphics (2.0 - 1161.21) <375C477F-5A89-3C49-9B63-373C81A63F7E> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\n    0x7fff58041000 -     0x7fff58330fff  com.apple.CoreImage (13.0.0 - 579.5)  /System/Library/Frameworks/CoreImage.framework/Versions/A/CoreImage\n    0x7fff58705000 -     0x7fff58705fff  com.apple.CoreServices (822.36 - 822.36)  /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\n    0x7fff58706000 -     0x7fff5877affb  com.apple.AE (735.1 - 735.1) <08EBA184-20F7-3725-AEA6-C314448161C6> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE\n    0x7fff5877b000 -     0x7fff58a52fff  com.apple.CoreServices.CarbonCore (1178.4 - 1178.4) <0D5E19BF-18CB-3FA4-8A5F-F6C787C5EE08> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore\n    0x7fff58a53000 -     0x7fff58a87fff  com.apple.DictionaryServices (1.2 - 284.2) <6505B075-41C3-3C62-A4C3-85CE3F6825CD> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices\n    0x7fff58a88000 -     0x7fff58a90ffb  com.apple.CoreServices.FSEvents (1239.50.1 - 1239.50.1) <3637CEC7-DF0E-320E-9634-44A442925C65> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents\n    0x7fff58a91000 -     0x7fff58c4efff  com.apple.LaunchServices (822.36 - 822.36) <6E68C090-B12D-3D3D-9617-E5D82C36B2D0> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices\n    0x7fff58c4f000 -     0x7fff58cffff7  com.apple.Metadata (10.7.0 - 1191.4.13)  /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata\n    0x7fff58d00000 -     0x7fff58d60fff  com.apple.CoreServices.OSServices (822.36 - 822.36) <3BB2E0CE-81AE-3D3D-9FCE-E1B7FC6D6A61> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices\n    0x7fff58d61000 -     0x7fff58dcffff  com.apple.SearchKit (1.4.0 - 1.4.0) <3662545A-B1CF-3079-BDCD-C83855CEFEEE> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit\n    0x7fff58dd0000 -     0x7fff58df4ffb  com.apple.coreservices.SharedFileList (71.21 - 71.21) <35582D88-5975-35E2-A29A-E3148C3EE727> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList\n    0x7fff59095000 -     0x7fff591e5fff  com.apple.CoreText (352.0 - 578.22) <6129F39D-284D-3BBF-8999-7854AB61C01C> /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\n    0x7fff591e6000 -     0x7fff59220fff  com.apple.CoreVideo (1.8 - 0.0) <86CCC036-51BB-3DD1-9601-D93798BCCD0F> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo\n    0x7fff59221000 -     0x7fff592acff3  com.apple.framework.CoreWLAN (13.0 - 1350.1)  /System/Library/Frameworks/CoreWLAN.framework/Versions/A/CoreWLAN\n    0x7fff59527000 -     0x7fff5952cfff  com.apple.DiskArbitration (2.7 - 2.7)  /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\n    0x7fff596ed000 -     0x7fff59ab3fff  com.apple.Foundation (6.9 - 1454.90) <8EA924F3-ADAE-3F4B-8482-8B11C027D9A5> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\n    0x7fff59b24000 -     0x7fff59b54fff  com.apple.GSS (4.0 - 2.0)  /System/Library/Frameworks/GSS.framework/Versions/A/GSS\n    0x7fff59c66000 -     0x7fff59d6affb  com.apple.Bluetooth (6.0.7 - 6.0.7f10) <557F26F9-C7A0-34EA-A905-22E243BF6B48> /System/Library/Frameworks/IOBluetooth.framework/Versions/A/IOBluetooth\n    0x7fff59dca000 -     0x7fff59e65fff  com.apple.framework.IOKit (2.0.2 - 1445.71.1) <2EA4F383-CAA9-3AF0-99C5-90C22ADAA6B6> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n    0x7fff59e67000 -     0x7fff59e6efff  com.apple.IOSurface (211.15 - 211.15) <9FD406F1-6BF2-35B0-8339-DF83A1A661EB> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface\n    0x7fff59ec5000 -     0x7fff5a03fff7  com.apple.ImageIO.framework (3.3.0 - 1739.3) <7C579D3F-AE0B-31C9-8F80-67F2290B8DE0> /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n    0x7fff5a040000 -     0x7fff5a044ffb  libGIF.dylib (1739.3) <7AA44C9D-48E8-3090-B044-61FE6F0AEF38> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib\n    0x7fff5a045000 -     0x7fff5a12cfef  libJP2.dylib (1739.3)  /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib\n    0x7fff5a12d000 -     0x7fff5a150ff7  libJPEG.dylib (1739.3)  /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib\n    0x7fff5a42c000 -     0x7fff5a452feb  libPng.dylib (1739.3) <1737F680-99D1-3F03-BFA5-5CDA30EB880A> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib\n    0x7fff5a453000 -     0x7fff5a455ffb  libRadiance.dylib (1739.3) <21746434-FCC7-36DE-9331-11277DF66AA8> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib\n    0x7fff5a456000 -     0x7fff5a4a4fef  libTIFF.dylib (1739.3)  /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib\n    0x7fff5b35e000 -     0x7fff5b377ff7  com.apple.Kerberos (3.0 - 1)  /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos\n    0x7fff5bd59000 -     0x7fff5bddafff  com.apple.Metal (125.30 - 125.30) <975FD6B5-D695-346A-869F-0584A968D100> /System/Library/Frameworks/Metal.framework/Versions/A/Metal\n    0x7fff5bdf7000 -     0x7fff5be12fff  com.apple.MetalPerformanceShaders.MPSCore (1.0 - 1)  /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSCore.framework/Versions/A/MPSCore\n    0x7fff5be13000 -     0x7fff5be82fef  com.apple.MetalPerformanceShaders.MPSImage (1.0 - 1) <338B7779-E608-3D68-8A07-2ACC11299744> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSImage.framework/Versions/A/MPSImage\n    0x7fff5be83000 -     0x7fff5bea7fff  com.apple.MetalPerformanceShaders.MPSMatrix (1.0 - 1) <9CE072D7-853B-3939-9645-7EB951376B87> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSMatrix.framework/Versions/A/MPSMatrix\n    0x7fff5bea8000 -     0x7fff5bf8fff7  com.apple.MetalPerformanceShaders.MPSNeuralNetwork (1.0 - 1) <0DE891AD-27E5-38FF-AEC8-4A95356C4357> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNeuralNetwork.framework/Versions/A/MPSNeuralNetwork\n    0x7fff5bf90000 -     0x7fff5bf90ff7  com.apple.MetalPerformanceShaders.MetalPerformanceShaders (1.0 - 1) <2D2D261C-50B0-32F9-BF9A-5C01382BB528> /System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/MetalPerformanceShaders\n    0x7fff5cf8f000 -     0x7fff5cf9bffb  com.apple.NetFS (6.0 - 4.0) <471DD96F-FA2E-3FE9-9746-2519A6780D1A> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS\n    0x7fff5fd8d000 -     0x7fff5fde7ff7  com.apple.opencl (2.8.24 - 2.8.24) <4D7401A7-6ADD-3632-85AE-7A5012DFFA04> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL\n    0x7fff5fde8000 -     0x7fff5fe04ffb  com.apple.CFOpenDirectory (10.13 - 207.50.1) <29F55F7B-379F-3053-8FF3-5C6675A3DD4D> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory\n    0x7fff5fe05000 -     0x7fff5fe10fff  com.apple.OpenDirectory (10.13 - 207.50.1)  /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory\n    0x7fff60f8f000 -     0x7fff60f91fff  libCVMSPluginSupport.dylib (16.7.4)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib\n    0x7fff60f92000 -     0x7fff60f97ffb  libCoreFSCache.dylib (162.9) <7AF87F3E-D5D0-3625-BE09-CA4223195466> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreFSCache.dylib\n    0x7fff60f98000 -     0x7fff60f9cfff  libCoreVMClient.dylib (162.9) <115FE643-6141-39B4-8193-77DFCBE7A4E0> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib\n    0x7fff60f9d000 -     0x7fff60fa6ff3  libGFXShared.dylib (16.7.4)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib\n    0x7fff60fa7000 -     0x7fff60fb2fff  libGL.dylib (16.7.4) <2BB333D3-5C61-33DF-8545-06DF2D08B83D> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib\n    0x7fff60fb3000 -     0x7fff60feefe7  libGLImage.dylib (16.7.4) <4DA003CE-0B74-3FE4-808C-B2FBCE517EB4> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib\n    0x7fff6115d000 -     0x7fff6119bffb  libGLU.dylib (16.7.4)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib\n    0x7fff61b13000 -     0x7fff61b22ff3  com.apple.opengl (16.7.4 - 16.7.4) <9BDE8FF9-5418-3C70-8D1C-09656884CE48> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\n    0x7fff62971000 -     0x7fff62bbdff7  com.apple.QuartzCore (1.11 - 584.62) <1950D993-DE48-3C97-95A5-66D98BDFC95D> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore\n    0x7fff62c16000 -     0x7fff62ddafff  org.ruby-lang.ruby (10.13 - 2.3.7-131.70.1) <902FC4DA-17B0-38E2-86C9-7FA1C25E7977> /System/Library/Frameworks/Ruby.framework/Versions/2.3/Ruby\n    0x7fff633f2000 -     0x7fff6371dfff  com.apple.security (7.0 - 58286.70.7) <9FC166E1-14D0-305C-A086-02B9E83F547E> /System/Library/Frameworks/Security.framework/Versions/A/Security\n    0x7fff6371e000 -     0x7fff637aaff7  com.apple.securityfoundation (6.0 - 55185.50.5)  /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation\n    0x7fff637dc000 -     0x7fff637e0ffb  com.apple.xpc.ServiceManagement (1.0 - 1) <71B45D83-ECA4-3265-997E-683A8B8DF413> /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement\n    0x7fff63b85000 -     0x7fff63bf5ff3  com.apple.SystemConfiguration (1.17 - 1.17) <8532B8E9-7E30-35A3-BC4A-DDE8E0614FDA> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\n    0x7fff63bfc000 -     0x7fff63cc4fff  Tcl (8.5.9 - 8.5.9) <7560B223-6C3A-3FE7-9843-B2FA1557FD56> /System/Library/Frameworks/Tcl.framework/Versions/8.5/Tcl\n    0x7fff66af2000 -     0x7fff66b85fff  com.apple.APFS (1.0 - 1) <6BBB3988-1C91-314F-A77A-4E093A1B18F0> /System/Library/PrivateFrameworks/APFS.framework/Versions/A/APFS\n    0x7fff677b0000 -     0x7fff677d8fff  com.apple.framework.Apple80211 (13.0 - 1361.7) <16627876-8CF5-3502-A1D6-35FCBDD5E79A> /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Apple80211\n    0x7fff677da000 -     0x7fff677e9fef  com.apple.AppleFSCompression (96.60.1 - 1.0)  /System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression\n    0x7fff678e8000 -     0x7fff678f3ff7  com.apple.AppleIDAuthSupport (1.0 - 1) <2FAF5567-CDB3-33EF-AB71-05D37F2248B7> /System/Library/PrivateFrameworks/AppleIDAuthSupport.framework/Versions/A/AppleIDAuthSupport\n    0x7fff6792d000 -     0x7fff67975ff3  com.apple.AppleJPEG (1.0 - 1) <8DD410CB-76A1-3F22-9A9F-0491FA0CEB4A> /System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG\n    0x7fff679b0000 -     0x7fff679d8fff  com.apple.applesauce (1.0 - ???)  /System/Library/PrivateFrameworks/AppleSauce.framework/Versions/A/AppleSauce\n    0x7fff67e2a000 -     0x7fff680c3ffb  com.apple.AuthKit (1.0 - 1) <6CA71A11-91C5-307C-B933-9FCDEDCB580A> /System/Library/PrivateFrameworks/AuthKit.framework/Versions/A/AuthKit\n    0x7fff681fa000 -     0x7fff68201ff7  com.apple.coreservices.BackgroundTaskManagement (1.0 - 57.1) <51A41CA3-DB1D-3380-993E-99C54AEE518E> /System/Library/PrivateFrameworks/BackgroundTaskManagement.framework/Versions/A/BackgroundTaskManagement\n    0x7fff68202000 -     0x7fff68289ff7  com.apple.backup.framework (1.9.5 - 1.9.5) <5E7B0925-8C71-353D-BB0F-9CA144BB264C> /System/Library/PrivateFrameworks/Backup.framework/Versions/A/Backup\n    0x7fff69c43000 -     0x7fff69c4cff3  com.apple.CommonAuth (4.0 - 2.0) <4D237B25-27E5-3577-948B-073659F6D3C0> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth\n    0x7fff6a752000 -     0x7fff6a762ff7  com.apple.CoreEmoji (1.0 - 69.3)  /System/Library/PrivateFrameworks/CoreEmoji.framework/Versions/A/CoreEmoji\n    0x7fff6aef6000 -     0x7fff6aefeff3  com.apple.CorePhoneNumbers (1.0 - 1)  /System/Library/PrivateFrameworks/CorePhoneNumbers.framework/Versions/A/CorePhoneNumbers\n    0x7fff6b3f7000 -     0x7fff6b488fff  com.apple.CoreSymbolication (9.3 - 64026.2)  /System/Library/PrivateFrameworks/CoreSymbolication.framework/Versions/A/CoreSymbolication\n    0x7fff6b50b000 -     0x7fff6b640fff  com.apple.coreui (2.1 - 494.1)  /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI\n    0x7fff6b641000 -     0x7fff6b772fff  com.apple.CoreUtils (5.6 - 560.11) <1A02D6F0-8C65-3FAE-AD63-56477EDE4773> /System/Library/PrivateFrameworks/CoreUtils.framework/Versions/A/CoreUtils\n    0x7fff6b7c7000 -     0x7fff6b82bfff  com.apple.framework.CoreWiFi (13.0 - 1350.1) <6EC5DEB3-6E2F-3DC2-BE59-1FD05175FB0C> /System/Library/PrivateFrameworks/CoreWiFi.framework/Versions/A/CoreWiFi\n    0x7fff6b82c000 -     0x7fff6b83cff7  com.apple.CrashReporterSupport (10.13 - 1)  /System/Library/PrivateFrameworks/CrashReporterSupport.framework/Versions/A/CrashReporterSupport\n    0x7fff6b8ba000 -     0x7fff6b8c9ff7  com.apple.framework.DFRFoundation (1.0 - 191.7) <5F486F5A-3795-3CD4-86A2-FD008A23F205> /System/Library/PrivateFrameworks/DFRFoundation.framework/Versions/A/DFRFoundation\n    0x7fff6b8cc000 -     0x7fff6b8d0ffb  com.apple.DSExternalDisplay (3.1 - 380) <901B7F6D-376A-3848-99D0-170C4D00F776> /System/Library/PrivateFrameworks/DSExternalDisplay.framework/Versions/A/DSExternalDisplay\n    0x7fff6b952000 -     0x7fff6b9c8fff  com.apple.datadetectorscore (7.0 - 590.3) <7437160E-68A3-3FD7-8868-5E3F92E23C4F> /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore\n    0x7fff6ba16000 -     0x7fff6ba56ff7  com.apple.DebugSymbols (181.0 - 181.0) <299A0238-ED78-3676-B131-274D972824AA> /System/Library/PrivateFrameworks/DebugSymbols.framework/Versions/A/DebugSymbols\n    0x7fff6ba57000 -     0x7fff6bb86fff  com.apple.desktopservices (1.12.5 - 1.12.5) <7739C9A5-64D9-31A5-899B-5FFA242AD70D> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv\n    0x7fff6c9a0000 -     0x7fff6cdcefff  com.apple.vision.FaceCore (3.3.2 - 3.3.2)  /System/Library/PrivateFrameworks/FaceCore.framework/Versions/A/FaceCore\n    0x7fff70096000 -     0x7fff7009bfff  com.apple.GPUWrangler (3.20.13 - 3.20.13) <9C5BD618-69E3-36D5-9BC9-A4841BC00D2A> /System/Library/PrivateFrameworks/GPUWrangler.framework/Versions/A/GPUWrangler\n    0x7fff70e11000 -     0x7fff70e20fff  com.apple.GraphVisualizer (1.0 - 5)  /System/Library/PrivateFrameworks/GraphVisualizer.framework/Versions/A/GraphVisualizer\n    0x7fff70ea3000 -     0x7fff70f17fff  com.apple.Heimdal (4.0 - 2.0) <93091531-CC91-34FF-8B93-5D3F02C37BC5> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal\n    0x7fff71827000 -     0x7fff7182eff7  com.apple.IOAccelerator (378.26 - 378.26) <2274BE11-18DE-3B13-BCDB-C488C9BB19AD> /System/Library/PrivateFrameworks/IOAccelerator.framework/Versions/A/IOAccelerator\n    0x7fff71832000 -     0x7fff71849fff  com.apple.IOPresentment (1.0 - 35.1) <7C6332FF-6535-3064-B437-1E9F70671927> /System/Library/PrivateFrameworks/IOPresentment.framework/Versions/A/IOPresentment\n    0x7fff71c14000 -     0x7fff71c3affb  com.apple.IconServices (97.6 - 97.6)  /System/Library/PrivateFrameworks/IconServices.framework/Versions/A/IconServices\n    0x7fff71ebf000 -     0x7fff71ed2ff3  com.apple.security.KeychainCircle.KeychainCircle (1.0 - 1)  /System/Library/PrivateFrameworks/KeychainCircle.framework/Versions/A/KeychainCircle\n    0x7fff71ed3000 -     0x7fff71fc8ff7  com.apple.LanguageModeling (1.0 - 159.5.3) <7F0AC200-E3DD-39FB-8A95-00DD70B66A9F> /System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling\n    0x7fff71fc9000 -     0x7fff7200bfff  com.apple.Lexicon-framework (1.0 - 33.5)  /System/Library/PrivateFrameworks/Lexicon.framework/Versions/A/Lexicon\n    0x7fff7200f000 -     0x7fff72016ff7  com.apple.LinguisticData (1.0 - 238.3) <49A54649-1021-3DBD-99B8-1B2EDFFA5378> /System/Library/PrivateFrameworks/LinguisticData.framework/Versions/A/LinguisticData\n    0x7fff72d28000 -     0x7fff72d91ff7  com.apple.gpusw.MetalTools (1.0 - 1) <458F319A-2707-3C83-8351-BD9F02EC05BD> /System/Library/PrivateFrameworks/MetalTools.framework/Versions/A/MetalTools\n    0x7fff72f11000 -     0x7fff72f2afff  com.apple.MobileKeyBag (2.0 - 1.0) <32E63C7B-E133-33DE-A593-C3C10D64FCAA> /System/Library/PrivateFrameworks/MobileKeyBag.framework/Versions/A/MobileKeyBag\n    0x7fff72fb6000 -     0x7fff72fe0ffb  com.apple.MultitouchSupport.framework (1404.4 - 1404.4) <45374A2A-C0BC-3A70-8183-37295205CDFA> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport\n    0x7fff73247000 -     0x7fff73252fff  com.apple.NetAuth (6.2 - 6.2)  /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth\n    0x7fff74ae8000 -     0x7fff74af8ffb  com.apple.PerformanceAnalysis (1.194 - 194) <2844933E-B71C-3BE9-9A84-27B29E111F13> /System/Library/PrivateFrameworks/PerformanceAnalysis.framework/Versions/A/PerformanceAnalysis\n    0x7fff768b7000 -     0x7fff768d5fff  com.apple.ProtocolBuffer (1 - 260) <40704740-4A53-3010-A49B-08D1D69D1D5E> /System/Library/PrivateFrameworks/ProtocolBuffer.framework/Versions/A/ProtocolBuffer\n    0x7fff76ab0000 -     0x7fff76ad3ffb  com.apple.RemoteViewServices (2.0 - 125) <592323D1-CB44-35F1-9921-4C2AB8D920A0> /System/Library/PrivateFrameworks/RemoteViewServices.framework/Versions/A/RemoteViewServices\n    0x7fff783f2000 -     0x7fff78507ff7  com.apple.Sharing (1050.22.2 - 1050.22.2) <4E3CCDF2-EA26-334F-8EBA-79BD28486C9D> /System/Library/PrivateFrameworks/Sharing.framework/Versions/A/Sharing\n    0x7fff78532000 -     0x7fff78533ff7  com.apple.performance.SignpostNotification (1.2.6 - 2.6) <8F04800F-3570-3392-A24D-B229FF03F7F9> /System/Library/PrivateFrameworks/SignpostNotification.framework/Versions/A/SignpostNotification\n    0x7fff7927b000 -     0x7fff79517ff7  com.apple.SkyLight (1.600.0 - 312.103) <27F91170-846C-3E9E-9B8A-788F27C7DAF5> /System/Library/PrivateFrameworks/SkyLight.framework/Versions/A/SkyLight\n    0x7fff79ce0000 -     0x7fff79cedfff  com.apple.SpeechRecognitionCore (4.6.1 - 4.6.1) <87EE7AB5-6925-3D21-BE00-F155CB457699> /System/Library/PrivateFrameworks/SpeechRecognitionCore.framework/Versions/A/SpeechRecognitionCore\n    0x7fff7a893000 -     0x7fff7a91cfc7  com.apple.Symbolication (9.3 - 64033)  /System/Library/PrivateFrameworks/Symbolication.framework/Versions/A/Symbolication\n    0x7fff7ae8d000 -     0x7fff7ae95ff7  com.apple.TCC (1.0 - 1)  /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC\n    0x7fff7b0a2000 -     0x7fff7b15fff7  com.apple.TextureIO (3.7 - 3.7)  /System/Library/PrivateFrameworks/TextureIO.framework/Versions/A/TextureIO\n    0x7fff7b210000 -     0x7fff7b3bffff  com.apple.UIFoundation (1.0 - 547.5) <86A2FBA7-2709-3894-A3D5-A00C19BAC48D> /System/Library/PrivateFrameworks/UIFoundation.framework/Versions/A/UIFoundation\n    0x7fff7cac8000 -     0x7fff7cacaffb  com.apple.loginsupport (1.0 - 1)  /System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport\n    0x7fff7cc31000 -     0x7fff7cc64ff7  libclosured.dylib (551.4) <3FB6B209-51F4-38DA-B1D8-2EE29D5BDD83> /usr/lib/closure/libclosured.dylib\n    0x7fff7cd1e000 -     0x7fff7cd57ff7  libCRFSuite.dylib (41)  /usr/lib/libCRFSuite.dylib\n    0x7fff7cd58000 -     0x7fff7cd63fff  libChineseTokenizer.dylib (28) <53633C9B-A3A8-36F7-A53C-432D802F4BB8> /usr/lib/libChineseTokenizer.dylib\n    0x7fff7cdf5000 -     0x7fff7cdf6ff3  libDiagnosticMessagesClient.dylib (104) <9712E980-76EE-3A89-AEA6-DF4BAF5C0574> /usr/lib/libDiagnosticMessagesClient.dylib\n    0x7fff7ce2d000 -     0x7fff7cff7ff3  libFosl_dynamic.dylib (17.8)  /usr/lib/libFosl_dynamic.dylib\n    0x7fff7d02f000 -     0x7fff7d02ffff  libOpenScriptingUtil.dylib (174) <610F0242-7CE5-3C86-951B-B646562694AF> /usr/lib/libOpenScriptingUtil.dylib\n    0x7fff7d166000 -     0x7fff7d16affb  libScreenReader.dylib (562.18.4)  /usr/lib/libScreenReader.dylib\n    0x7fff7d16b000 -     0x7fff7d16cffb  libSystem.B.dylib (1252.50.4)  /usr/lib/libSystem.B.dylib\n    0x7fff7d1ff000 -     0x7fff7d1fffff  libapple_crypto.dylib (109.50.14) <48BA2E76-BF2F-3522-A54E-D7FB7EAF7A57> /usr/lib/libapple_crypto.dylib\n    0x7fff7d200000 -     0x7fff7d216ff7  libapple_nghttp2.dylib (1.24) <01402BC4-4822-3676-9C80-50D83F816424> /usr/lib/libapple_nghttp2.dylib\n    0x7fff7d217000 -     0x7fff7d241ff3  libarchive.2.dylib (54) <8FC28DD8-E315-3C3E-95FE-D1D2CBE49888> /usr/lib/libarchive.2.dylib\n    0x7fff7d242000 -     0x7fff7d2c3fdf  libate.dylib (1.13.1) <178ACDAD-DE7E-346C-A613-1CBF7929AC07> /usr/lib/libate.dylib\n    0x7fff7d2c7000 -     0x7fff7d2c7ff3  libauto.dylib (187)  /usr/lib/libauto.dylib\n    0x7fff7d2c8000 -     0x7fff7d380ff3  libboringssl.dylib (109.50.14)  /usr/lib/libboringssl.dylib\n    0x7fff7d381000 -     0x7fff7d391ff3  libbsm.0.dylib (39) <6BC96A72-AFBE-34FD-91B1-748A530D8AE6> /usr/lib/libbsm.0.dylib\n    0x7fff7d392000 -     0x7fff7d39fffb  libbz2.1.0.dylib (38) <0A5086BB-4724-3C14-979D-5AD4F26B5B45> /usr/lib/libbz2.1.0.dylib\n    0x7fff7d3a0000 -     0x7fff7d3f6fff  libc++.1.dylib (400.9) <7D3DACCC-3804-393C-ABC1-1A580FD00CB6> /usr/lib/libc++.1.dylib\n    0x7fff7d3f7000 -     0x7fff7d41bff7  libc++abi.dylib (400.8.2)  /usr/lib/libc++abi.dylib\n    0x7fff7d41d000 -     0x7fff7d42dfff  libcmph.dylib (6)  /usr/lib/libcmph.dylib\n    0x7fff7d42e000 -     0x7fff7d445fcf  libcompression.dylib (47.60.2) <543F07BF-2F2F-37D5-9866-E84BF659885B> /usr/lib/libcompression.dylib\n    0x7fff7d6f0000 -     0x7fff7d708ff7  libcoretls.dylib (155.50.1)  /usr/lib/libcoretls.dylib\n    0x7fff7d709000 -     0x7fff7d70aff3  libcoretls_cfhelpers.dylib (155.50.1)  /usr/lib/libcoretls_cfhelpers.dylib\n    0x7fff7dbdb000 -     0x7fff7dc31ff3  libcups.2.dylib (462.2.4) <908099FB-C70E-38FA-9573-88CB98FDDE29> /usr/lib/libcups.2.dylib\n    0x7fff7dd71000 -     0x7fff7dd71fff  libenergytrace.dylib (16)  /usr/lib/libenergytrace.dylib\n    0x7fff7dda8000 -     0x7fff7ddadff3  libheimdal-asn1.dylib (520.50.6)  /usr/lib/libheimdal-asn1.dylib\n    0x7fff7ddd9000 -     0x7fff7decaff7  libiconv.2.dylib (51.50.1) <2FEC9707-3FAF-3828-A50D-8605086D060F> /usr/lib/libiconv.2.dylib\n    0x7fff7decb000 -     0x7fff7e0f2ffb  libicucore.A.dylib (59180.0.1) <34EBADD6-4092-30EC-90E8-F75241E94D76> /usr/lib/libicucore.A.dylib\n    0x7fff7e13f000 -     0x7fff7e140fff  liblangid.dylib (128) <39C39393-0D05-301D-93B2-F224FC4949AA> /usr/lib/liblangid.dylib\n    0x7fff7e141000 -     0x7fff7e15affb  liblzma.5.dylib (10) <3D419A50-961F-37D2-8A01-3DC7AB7B8D18> /usr/lib/liblzma.5.dylib\n    0x7fff7e15b000 -     0x7fff7e171ff7  libmarisa.dylib (9)  /usr/lib/libmarisa.dylib\n    0x7fff7e222000 -     0x7fff7e44aff7  libmecabra.dylib (779.7.6)  /usr/lib/libmecabra.dylib\n    0x7fff7e44f000 -     0x7fff7e47fffb  libncurses.5.4.dylib (53) <030DF747-F71B-367A-83EE-2F30B7947929> /usr/lib/libncurses.5.4.dylib\n    0x7fff7e622000 -     0x7fff7e79dfff  libnetwork.dylib (1229.70.2)  /usr/lib/libnetwork.dylib\n    0x7fff7e824000 -     0x7fff7ec127e7  libobjc.A.dylib (723)  /usr/lib/libobjc.A.dylib\n    0x7fff7ec25000 -     0x7fff7ec29fff  libpam.2.dylib (22) <7B4D2CE2-1438-387A-9802-5CEEFBF26F86> /usr/lib/libpam.2.dylib\n    0x7fff7ec2c000 -     0x7fff7ec60fff  libpcap.A.dylib (79.20.1)  /usr/lib/libpcap.A.dylib\n    0x7fff7ecdf000 -     0x7fff7ecfbffb  libresolv.9.dylib (65)  /usr/lib/libresolv.9.dylib\n    0x7fff7ed4c000 -     0x7fff7eedfff7  libsqlite3.dylib (274.8.1)  /usr/lib/libsqlite3.dylib\n    0x7fff7f0b3000 -     0x7fff7f113ff3  libusrtcp.dylib (1229.70.2) <1E065228-D0E3-3808-9405-894056C6BEC0> /usr/lib/libusrtcp.dylib\n    0x7fff7f114000 -     0x7fff7f117ffb  libutil.dylib (51.20.1) <216D18E5-0BAF-3EAF-A38E-F6AC37CBABD9> /usr/lib/libutil.dylib\n    0x7fff7f118000 -     0x7fff7f125fff  libxar.1.dylib (400) <0316128D-3B47-3052-995D-97B4FE5491DC> /usr/lib/libxar.1.dylib\n    0x7fff7f129000 -     0x7fff7f210fff  libxml2.2.dylib (31.11)  /usr/lib/libxml2.2.dylib\n    0x7fff7f211000 -     0x7fff7f239fff  libxslt.1.dylib (15.12) <4A5E011D-8B29-3135-A52B-9A9070ABD752> /usr/lib/libxslt.1.dylib\n    0x7fff7f23a000 -     0x7fff7f24cffb  libz.1.dylib (70) <48C67CFC-940D-3857-8DAD-857774605352> /usr/lib/libz.1.dylib\n    0x7fff7f2e8000 -     0x7fff7f2ecff7  libcache.dylib (80) <092479CB-1008-3A83-BECF-E115F24D13C1> /usr/lib/system/libcache.dylib\n    0x7fff7f2ed000 -     0x7fff7f2f7ff3  libcommonCrypto.dylib (60118.50.1) <029F5985-9B6E-3DCB-9B96-FD007678C6A7> /usr/lib/system/libcommonCrypto.dylib\n    0x7fff7f2f8000 -     0x7fff7f2fffff  libcompiler_rt.dylib (62) <968B8E3F-3681-3230-9D78-BB8732024F6E> /usr/lib/system/libcompiler_rt.dylib\n    0x7fff7f300000 -     0x7fff7f309ffb  libcopyfile.dylib (146.50.5) <3885083D-50D8-3EEC-B481-B2E605180D7F> /usr/lib/system/libcopyfile.dylib\n    0x7fff7f30a000 -     0x7fff7f38ffff  libcorecrypto.dylib (562.70.1) <5C26364F-2269-31EC-84AF-0FED2C902E38> /usr/lib/system/libcorecrypto.dylib\n    0x7fff7f417000 -     0x7fff7f450ff7  libdispatch.dylib (913.60.2) <232C69BD-022E-3AB9-8807-79F9FA7CB5EC> /usr/lib/system/libdispatch.dylib\n    0x7fff7f451000 -     0x7fff7f46eff7  libdyld.dylib (551.4) <81BF3A82-5719-3B54-ABA9-76C82D932CAC> /usr/lib/system/libdyld.dylib\n    0x7fff7f46f000 -     0x7fff7f46fffb  libkeymgr.dylib (28)  /usr/lib/system/libkeymgr.dylib\n    0x7fff7f470000 -     0x7fff7f47cff3  libkxld.dylib (4570.71.2)  /usr/lib/system/libkxld.dylib\n    0x7fff7f47d000 -     0x7fff7f47dff7  liblaunch.dylib (1205.70.9)  /usr/lib/system/liblaunch.dylib\n    0x7fff7f47e000 -     0x7fff7f482ffb  libmacho.dylib (906) <1902A611-081A-3452-B11E-EBD1B166E831> /usr/lib/system/libmacho.dylib\n    0x7fff7f483000 -     0x7fff7f485ff3  libquarantine.dylib (86) <26C0BA22-8F93-3A07-9A4E-C8D53D2CE42E> /usr/lib/system/libquarantine.dylib\n    0x7fff7f486000 -     0x7fff7f487ff3  libremovefile.dylib (45) <711E18B2-5BBE-3211-A916-56740C27D17A> /usr/lib/system/libremovefile.dylib\n    0x7fff7f488000 -     0x7fff7f49ffff  libsystem_asl.dylib (356.70.1) <39E46A6F-B228-3E78-B83E-1779F9707A39> /usr/lib/system/libsystem_asl.dylib\n    0x7fff7f4a0000 -     0x7fff7f4a0fff  libsystem_blocks.dylib (67) <17303FDF-0D2D-3963-B05E-B4DF63052D47> /usr/lib/system/libsystem_blocks.dylib\n    0x7fff7f4a1000 -     0x7fff7f52aff7  libsystem_c.dylib (1244.50.9) <1187BFE8-4576-3247-8177-481554E1F9E7> /usr/lib/system/libsystem_c.dylib\n    0x7fff7f52b000 -     0x7fff7f52effb  libsystem_configuration.dylib (963.50.8)  /usr/lib/system/libsystem_configuration.dylib\n    0x7fff7f52f000 -     0x7fff7f532ffb  libsystem_coreservices.dylib (51) <486000D3-D8CB-3BE7-8EE5-8BF380DE6DF7> /usr/lib/system/libsystem_coreservices.dylib\n    0x7fff7f533000 -     0x7fff7f534fff  libsystem_darwin.dylib (1244.50.9) <09C21A4A-9EE0-388B-A9D9-DFF8F6758791> /usr/lib/system/libsystem_darwin.dylib\n    0x7fff7f535000 -     0x7fff7f53bff7  libsystem_dnssd.dylib (878.70.2) <3290768B-54DE-3AB6-B155-AC0950AC5564> /usr/lib/system/libsystem_dnssd.dylib\n    0x7fff7f53c000 -     0x7fff7f585ff7  libsystem_info.dylib (517.30.1)  /usr/lib/system/libsystem_info.dylib\n    0x7fff7f586000 -     0x7fff7f5acff7  libsystem_kernel.dylib (4570.71.2)  /usr/lib/system/libsystem_kernel.dylib\n    0x7fff7f5ad000 -     0x7fff7f5f8fcb  libsystem_m.dylib (3147.50.1) <8CFB51C9-B422-3379-8552-064C63943A23> /usr/lib/system/libsystem_m.dylib\n    0x7fff7f5f9000 -     0x7fff7f618fff  libsystem_malloc.dylib (140.50.6) <7FD43735-9DDD-300E-8C4A-F909A74BDF49> /usr/lib/system/libsystem_malloc.dylib\n    0x7fff7f619000 -     0x7fff7f749ff7  libsystem_network.dylib (1229.70.2) <5E86B2DE-9E15-3354-8714-4094ED5F698D> /usr/lib/system/libsystem_network.dylib\n    0x7fff7f74a000 -     0x7fff7f754ffb  libsystem_networkextension.dylib (767.70.1)  /usr/lib/system/libsystem_networkextension.dylib\n    0x7fff7f755000 -     0x7fff7f75eff3  libsystem_notify.dylib (172) <08012EC0-2CD2-34BE-BF93-E7F56491299A> /usr/lib/system/libsystem_notify.dylib\n    0x7fff7f75f000 -     0x7fff7f766ff7  libsystem_platform.dylib (161.50.1) <6355EE2D-5456-3CA8-A227-B96E8F1E2AF8> /usr/lib/system/libsystem_platform.dylib\n    0x7fff7f767000 -     0x7fff7f772fff  libsystem_pthread.dylib (301.50.1) <0E51CCBA-91F2-34E1-BF2A-FEEFD3D321E4> /usr/lib/system/libsystem_pthread.dylib\n    0x7fff7f773000 -     0x7fff7f776fff  libsystem_sandbox.dylib (765.70.1) <553DFCC6-9D31-3B9C-AB7C-30F6F265786D> /usr/lib/system/libsystem_sandbox.dylib\n    0x7fff7f777000 -     0x7fff7f778ff3  libsystem_secinit.dylib (30)  /usr/lib/system/libsystem_secinit.dylib\n    0x7fff7f779000 -     0x7fff7f780ff7  libsystem_symptoms.dylib (820.60.2) <585BDFA2-D54D-39D0-8046-44E824DABD43> /usr/lib/system/libsystem_symptoms.dylib\n    0x7fff7f781000 -     0x7fff7f794fff  libsystem_trace.dylib (829.70.1) <3A6CB706-8CA6-3616-8AFC-14AAD7FAF187> /usr/lib/system/libsystem_trace.dylib\n    0x7fff7f796000 -     0x7fff7f79bff7  libunwind.dylib (35.3)  /usr/lib/system/libunwind.dylib\n    0x7fff7f79c000 -     0x7fff7f7c9ff7  libxpc.dylib (1205.70.9) <0BC7AD67-671D-31D4-8B88-C317B8379598> /usr/lib/system/libxpc.dylib\nExternal Modification Summary:\n  Calls made by other processes targeting this process:\n    task_for_pid: 0\n    thread_create: 0\n    thread_set_state: 0\n  Calls made by this process:\n    task_for_pid: 0\n    thread_create: 0\n    thread_set_state: 0\n  Calls made by all processes on this machine:\n    task_for_pid: 49007\n    thread_create: 0\n    thread_set_state: 0\nVM Region Summary:\nReadOnly portion of Libraries: Total=339.2M resident=0K(0%) swapped_out_or_unallocated=339.2M(100%)\nWritable regions: Total=75.2M written=0K(0%) resident=0K(0%) swapped_out=0K(0%) unallocated=75.2M(100%)\n                            VIRTUAL   REGION\n\nREGION TYPE                        SIZE    COUNT (non-coalesced) \n===========                     =======  ======= \nActivity Tracing                   256K        2 \nCoreUI image file                  116K        2 \nDispatch continuations            8192K        2 \nKernel Alloc Once                    8K        2 \nMALLOC                            53.7M       36 \nMALLOC guard page                   32K        9 \nMALLOC_LARGE (reserved)            128K        2         reserved VM address space (unallocated)\nSTACK GUARD                          8K        3 \nStack                             9232K        4 \nStack Guard                       56.0M        2 \nVM_ALLOCATE                       3840K        5 \n__DATA                            22.5M      246 \n__FONT_DATA                          4K        2 \n__LINKEDIT                       194.0M       23 \n__TEXT                           145.2M      248 \n__UNICODE                          560K        2 \nmapped file                       37.5M        4 \nshared memory                       44K        4 \n===========                     =======  ======= \nTOTAL                            530.9M      580 \nTOTAL, minus reserved VM space   530.7M      580 \n```. I have both core vim and MacVim, the core vim doesn't exists this problem. \nCompare the :version information, the core vim include more patches than MacVim.\nCore Vim\nIncluded patches: 1-202\nMacVim\nIncluded patches: 1-72\nCan we update the part of vim core in the MacVim ?. @eirnym \nI upgraded to the latest version (snapshot-150) on yesterday, seems the problem is gone. MacVim no crash anymore.. ",
    "mikedupuis": "I can confirm that I'm seeing the same issue on a second monitor.. ",
    "lowderchris": "Running into the same issue (and resizing fix) on an external DisplayPort monitor. With the same monitor connected, when opening a macvim window on the laptop display, the window renders as expected.. For anyone looking for a temporary fix (and there certainly might be a better way to do this), you could add a similar command(s) to your .gvimrc file,\nset columns=90\nautocmd VimEnter * set columns=100\nPreviously, I had specified my default window size with 90 columns. The second command then initiates a resize after opening the window, forcing a redraw, and correcting the issue (just be sure to specify different sizes). This is definitely far from ideal, but forces things into a working state while waiting on a fix for the issue.. ",
    "Paultergeist": "The issue appeared in snapshot-150, snapshot-149 was good.. ",
    "fortman": "+1 , same issue here.  Resizing window with mouse makes the window immediately snap to correct size. ",
    "JTMosaic": "+1, same issue. Attempting to roll back to 149. ",
    "tachijuan": "+1 here. If you open on the main monitor, it works just fine. If you open it on the second (non-main) monitor you get the behavior described. ",
    "dctucker": "+1 Confirmed. This is particularly troubling since I want MacVim to always launch on my rightmost monitor.. Building ychin's branch solved the problem for me. Can anyone else confirm?. This seems like a good fix, and it works for me. I haven't looked at the CI in this repo before, but there is a failure on this commit and it makes me wonder if it's an improper test since I was able to build locally with zero turbulence.\nThe problem with opening MacVim on a secondary monitor and seeing the window occluded is no longer present with this commit. Zooming also seems fine.. Unfortunately, it looks like the problem persists with this build.. ",
    "muddysteel": "+1 same issue.. ",
    "choonggg": "+1. ",
    "fericit-bostan": "+1. ",
    "rbm-aalsaleh": "+1. ",
    "btlewan": "+1. ",
    "jason0": "Hello, \nI switched back to version 8.1-149_1 (brew) but had the same problem.  switching further back to version 8.1-147 resolved my problem for the moment.\n--jason. ",
    "symonty": "+1. ",
    "wlahti": "+1. Hitting this issue after the recent update. . ",
    "jdandrews": "+1; reverted to snapshot-149 (8.1.72 (149)) which does not manifest the problem.. ",
    "davidozog": "+1. ",
    "mrallen1": "+1. ",
    "ZGainsforth": "+1\n. ",
    "xuyuheng": "+1. ",
    "slmjkdbtl": "No, with other color schemes I'm specifying colorscheme * in my rc file, but macvim seems to use a builtin colorscheme and it seems to be sourced after the after folders loaded. By the way where can I get macvim's default colorschemes and use it in other vim emulators? (I'm not familiar with macvim source files) It's beautiful. . yes specifying the mavim colorscheme manually solves the problem, thanks.. ",
    "jelammers": "I have this problem too.  It is usable only after resizing.  Started today after it updated itself.\nI moved my .vimrc and .gvimrc files out of the way - problem remains.\nI reinstalled macvim - problem remains.\nI'm running the latest macOS 10.13.6 (High Sierra) also on a touchbar MacBook Pro.\nI really don't think it's my Mac.  Macvim was working fine until it updated today.\nVersion info:\n$ /usr/local/bin/mvim --version\nVIM - Vi IMproved 8.1 (2018 May 18, compiled Aug  4 2018 07:04:41)\nmacOS version\nIncluded patches: 1-235\nCompiled by Homebrew\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl               +farsi             +mouse_sgr         -tag_any_white\n+arabic            +file_in_path      -mouse_sysmouse    +tcl\n+autocmd           +find_in_path      +mouse_urxvt       +termguicolors\n+autochdir         +float             +mouse_xterm       +terminal\n-autoservername    +folding           +multi_byte        +terminfo\n+balloon_eval      -footer            +multi_lang        +termresponse\n+balloon_eval_term +fork()            -mzscheme          +textobjects\n+browse            +fullscreen        +netbeans_intg     +timers\n++builtin_terms    -gettext           +num64             +title\n+byte_offset       -hangul_input      +odbeditor         +toolbar\n+channel           +iconv             +packages          +transparency\n+cindent           +insert_expand     +path_extra        +user_commands\n+clientserver      +job               +perl              +vartabs\n+clipboard         +jumplist          +persistent_undo   +vertsplit\n+cmdline_compl     +keymap            +postscript        +virtualedit\n+cmdline_hist      +lambda            +printer           +visual\n+cmdline_info      +langmap           +profile           +visualextra\n+comments          +libcall           -python            +viminfo\n+conceal           +linebreak         +python3           +vreplace\n+cryptv            +lispindent        +quickfix          +wildignore\n+cscope            +listcmds          +reltime           +wildmenu\n+cursorbind        +localmap          +rightleft         +windows\n+cursorshape       -lua               +ruby              +writebackup\n+dialog_con_gui    +menu              +scrollbind        -X11\n+diff              +mksession         +signs             -xfontset\n+digraphs          +modify_fname      +smartindent       +xim\n+dnd               +mouse             +startuptime       -xpm\n-ebcdic            +mouseshape        +statusline        -xsmp\n+emacs_tags        +mouse_dec         -sun_workshop      -xterm_clipboard\n+eval              -mouse_gpm         +syntax            -xterm_save\n+ex_extra          -mouse_jsbterm     +tag_binary      \n+extra_search      +mouse_netterm     +tag_old_static  \n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n       defaults file: \"$VIMRUNTIME/defaults.vim\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X -DMACOS_X_DARWIN  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1     \nLinking: clang   -L.             -L /BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/libressl/lib -L/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/lib -L.             -L /BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/libressl/lib -L/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.Internal.sdk/usr/local/lib  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -framework AppKit   -fstack-protector  -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE -lperl  -L/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/config-3.7m-darwin -lpython3.7m -framework CoreFoundation -F/System/Library/Frameworks -framework Tcl -framework CoreFoundation -framework Ruby  \n. Here's another clue / characteristic of the problem:\nI have a MacBook Pro and 2 external monitors.  The problem does not occur on the \"primary\" display, only on the other 2 displays.\nGo to System Preferences -> Displays -> Arrangement.  The problem does not occur on whichever display has the menu bar (i.e. it occurs on the other 2 displays)\n\n. tdwong is correct.  It occurs when macvim opens on a display which is not the primary display.. ",
    "tdwong": "I have the same problem with 8.1.235 (150) build.  and I second masukomi's observation, this symptom only occurs when MacVIM opens its initial window on the separate monitor.\n~MacVIM~\n:version\nVIM - Vi IMproved 8.1 (2018 May 18, compiled Aug  3 2018 05:14:32)\nmacOS version\nIncluded patches: 1-235\nCompiled by travis@Traviss-Mac-1044.local\n~macOS~\nmacOS High Sierra\nVersion 10.13.6\n~hardware~\nMacBook Pro (15-inch, 2016)\n. ",
    "shirriff": "I am also having this problem. Is there a fix/workaround? I didn't see any action in #727 that I could do.. ",
    "ianwjhalliday": "I just updated today to 8.1.280 (151) which has fixed the view not using the entire window bug, but now moving a macvim window from one monitor to another flickers the window a bunch when it appears on the next screen.\nI don't recall seeing this flicker prior to the update that included #727. ",
    "giftig": "I've been trying to find any reference to this problem since I started a new job and fresh mac 3 weeks ago and started being plagued by this issue :( I tried again to fix it today, upgraded to the latest release, and it's finally gone.\nI haven't experienced the flickering between monitors, though i've only been on 151 for a day. I think this can be closed, though; I'd be curious to know what caused the problem but it seems it's fixed.\nGiven the release notes for 151 mentioning #731 I'm guessing it was related to that.. Yeah I'm aware #731 is open, but given it was mentioned in the latest release notes I gathered what was reverted was the original version of it.. ",
    "osenvosem": "@eirnym I also like it )\nLaunching with mvim -u NONE -N gives no errors. Launching vim in terminal also works without errors (the vim binary is from MacVim, installed using brew with --with-override-system-vim).. I usually launch macvim from terminal with the mvim command.\nHere is my .vimrc\nvimrc.txt\n. @eirnym yes, it still persists.. I completely removed the .vim folder and reinstalled everything from scratch and it seems that it works well now. Thank you.. ",
    "dylan-chong": "By the way the dictation setup is the OSX part of dictation-toolbox/aenea. \nI can live with the bug existing, just would be nice if it is fixed. (Don't worry if it looks like a really complex fix)\n\nOn 28/11/2018, at 12:44 AM, Yee Cheng Chin notifications@github.com wrote:\nI can reproduce the issue. Just curious and also for triaging, is this something that was blocking you or you are just doing a sweep on different repos to report bugs?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This wasn't blocking me, it's just noticeable for the dictation setup in using for my RSI, which uses AppleScript to type out text.\n\nI have a temporary solution which is to type out a single key, wait 0.02s, type out the next key, etc, so it isn't blocking, it's just takes an extra second to type out a sentence.\n\nOn 28/11/2018, at 12:44 AM, Yee Cheng Chin notifications@github.com wrote:\nI can reproduce the issue. Just curious and also for triaging, is this something that was blocking you or you are just doing a sweep on different repos to report bugs?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Sweet thanks. Good luck with the upgrade\nOn 28/11/2018, at 8:07 PM, Yee Cheng Chin notifications@github.com wrote:\nOk good to know. Currently the priority is getting Mojave fully supported (which is long due) but I'll take a look at this afterwards.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "J-Liu": "@eirnym \nI mean the window manager, that is the title bar and scroll bar.\n\n. Just build MacVim using Xcode 10 on Mojave, will support dark mode.\nLooking for bottle binary.. @amadeus Download the binary form https://github.com/macvim-dev/macvim/releases. > > Download the binary form https://github.com/macvim-dev/macvim/releases\n\nThis didn't solve anything on my Mojave machine. MacVim (the whole window) blinks along with the cursor.\n\nIt works, for me. 151 on Mojave.. ping. @s4y\nthx, but I'm waiting for a snapshot 152 dmg file.... ",
    "dedwarmo": "\"Using binary release is highly recommended.\"\n\"Building (not recommended way)\"\nhttps://github.com/macvim-dev/macvim/wiki/Building. ",
    "alextes": "ooooh, will the touch bar finally get some neat use for me \ud83d\ude0d ?. ",
    "joelfrederico": "@ychin Could you give me a bit more detail on the problem? I'd like to hack a bit on it, although I predict I won't be able to patch it before the regular MacVim committers have fixed it. It seems to me like the issue is someplace in NSWindow not having a background color set? And you want to fix it by dropping Core Text entirely and switching to Metal/Metal2?. @ychin Thanks for the detailed description!\n\n@joelfrederico I was actually planning to implement a first-pass for a fix for this this weekend since I have been looking at the renderer code when fixing some fullscreen rendering bugs, but if you do want to tackle the issue feel free to do that too.\n\nPlease don't change your plans thinking I'm working on it! I'm just getting my feet wet, I don't expect to actually be able to do much of anything.. ",
    "felixbuenemann": "@ychin I think iTerm's Metal renderer uses pre-generated glyph images, it could serve as an example implementation.. Oh and it also has subpixel antialiasing, see this google doc for the technical details:\nSubpixel Antialiasing in iTerm2's Metal Renderer. ",
    "fabiomcosta": "Thx you all for working on this.\nFor now I'm just using normal vim as a fallback.. ",
    "y00rb": "Does it same issue? My window always flashing, can't display normal like before.\n1. Upgrade to Mojave\n2. upgrade macvim to latest. See flashing problem, so reinstall macvim\n3. brew uninstall macvim then brew update + brew install macvim\nBut problem is exists too\n\n. @balajirama  Thank you very much!!! I did disable Use Core Text renderer, then It works right now\n@mario-grgic  Thank you very much too! I did read it, but not very understand how turn off until see the screen-shot. ",
    "balajirama": "I agree with the above observation. I see the same issue blinking window. It doesn't let me work.. I see the blinking mccvim too. Exact same steps as y00rb above. Attached is a zipped movie.\nmacvim-blink.mov.gz\n. My wife found out that mario-grgic pointed out that I need to turn off \"Core Text renderer\". I did that and it still blinked. But I found out that if we turn off \"Prefer Native full-screen support\". That will help.\nAttached is a screenshot of what you need to do:\n\n. Yes. Thanks a lot!. ",
    "vigilancer": "@mario-grgic's method fixes brew version of macvim.\nhad to say that binary release from https://github.com/macvim-dev/macvim/releases don't have this issue. but it support dynamic python +python/dyn  +python3/dyn, which breaks other things for me.. ",
    "marcomayer": "While @mario-grgic suggestion to turn off \"Use Core Text renderer\" does fix the blinking issue, it leaves me with the fonts having way more space between characters than usual (using source code pro font). So I have the same issue and am using vim in iterm2 now until this is fixed.. ",
    "holycheater": "Snapshot 151 works for me on MBP15 with Mojave.\nDoesn't work from homebrew, probably still older version. ",
    "alswl": "homebrew version is 151.\ncask 'macvim' do\n  version '8.1.151'\n  sha256 '67aed665cb098e0e9c0fc3a4f99af6d4b4fda58531e6e46c6c9b0ffbed5faad2'\n...\nOn Fri, Nov 23, 2018 at 6:03 AM Alex Salt notifications@github.com wrote:\n\nSnapshot 151 works for me on MBP15 with Mojave.\nDoesn't work from homebrew, probably still older version\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/751#issuecomment-441126380,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAN46sSB4maG6zwCWmIEu9Z0DzgiugqNks5uxx88gaJpZM4W12xK\n.\n\n\n--\nalswl\n. @oseiberts11 disable Use Core Text Renderer makes MacVim horrible for CJK IME user.. My alternative solution for CJK IME user is using vim in Terminal.\n\ud83d\ude02. This bug was fixed for me on mojave 10.14.1 (18B75) .\nupdated: oops, it did not.. ",
    "oseiberts11": "My homebrew version (claiming to be 151) on MacOS 10.14.1 was still doing the flashing, until I disabled \"Use Core Text Renderer\" in the Preferences.. ",
    "loadaverage": "\n@amadeus Are you building MacVim yourself using Xcode 10 on Majave? If so, you can build using the old SDK which will fix this issue. Easiest way is to download Xcode 9.4.1 from Apple Developer and build using that. If you are downloading builds from official releases I don't think it should be broken.\nOtherwise you can do this in Terminal to turn on CGLayer mode: defaults write org.vim.MacVim MMUseCGLayerAlways -bool YES. I don't recommend this route though as it makes scrolling slow.\n\nCan't use this version due homebrew error:\nError: Your Xcode (9.4.1) is too outdated.\nPlease update to Xcode 10.1 (or delete it).\nXcode can be updated from the App Store.\n. ",
    "a7hybnj2": "Just upgraded via \"brew upgrade macvim\" and mvim started to this issue. Luckily disabling CORE worked for me. I look forward to the update. . Great! I  will be watching brew for when the update is available.. ",
    "kevinkassimo": "Same thing happened to me after brew upgrade. . ",
    "SkylerLS": "Chiming in, same here after a brew upgrade. macvim: stable 8.1-151 (bottled), HEAD, python: stable 3.7.0 (bottled)\nI actually got it working by\n$ brew unlink macvim\n$ brew install macvim --HEAD\nas someone else had done when this same issue occurred in the past.. ",
    "zhuxk79": "I'm using High Sierra 10.13.6\nFor the \"mvim -u NONE -N\", do you mean open the macvim in terminal with the suffix parameters?\nunfortunately mvim is not aliased to macvim in my bashrc, shall i do that and try?. I tried open \"mvim -u NONE -N\" in terminal, but expect it doesn't use my personal .vimrc configuration, it has no change to previous openning. I also found if I hit \"CMD+C\" trying to copy some content in current file, the other icon will also keep jumping in dock.. I removed macvim and downloaded a fresh dmg file from this website, also removed .vimrc file. In system preference->keyboard->shortcuts, restored default; after all these, problem still exists.\nI have another mac with EI Capitan, version 10.11.6, the macvim is very normal.\nUnfortunately the problematic MAC is my office working laptop, so unable to downgrade to OS X.. I just tried another experiment: swap CONTROL and COMMAND key in system preference->keyboard->Modifier Keys, after that, when i try  the icon jumps again :-(. > does defaults read org.vim.MacVim look suspicious?\n\nMy MacVim defaults are:\n{\n    MMAutosaveColumns = 84;\n    MMAutosaveRows = 57;\n    MMCurrentPreferencePane = Advanced;\n    MMTopLeftPoint = \"{789, 877}\";\n    MMUseCGLayerAlways = 1;\n    NSFontPanelAttributes = \"1, 4\";\n    NSNavLastRootDirectory = \"~\";\n    NSNavPanelExpandedSizeForOpenMode = \"{712, 448}\";\n    NSNavPanelExpandedSizeForSaveMode = \"{712, 448}\";\n    NSQuotedKeystrokeBinding = \"\";\n    NSRepeatCountBinding = \"\";\n    \"NSWindow Frame NSFontPanel\" = \"19 226 592 247 0 0 1440 877 \";\n    \"NSWindow Frame SUStatusFrame\" = \"520 572 400 129 0 0 1440 877 \";\n    \"NSWindow Frame SUUpdateAlert\" = \"410 374 620 392 0 0 1440 877 \";\n    SUAutomaticallyUpdate = 1;\n    SUCheckAtStartup = 1;\n    SUEnableAutomaticChecks = 1;\n    SUHasLaunchedBefore = 1;\n    SULastCheckTime = \"2018-10-11 09:33:57 +0000\";\n    SUSendProfileInfo = 0;\n}\n\nwhat did you mean by \"defaults\", is it .vimrc file stored in /users/, which is the macvim config file?. > defaults (command) in macOS is a some kind of registry in Windows,\ncould you pls tell how to check those \"defaults\" in mac?. MMAutosaveColumns = 142;\n    MMAutosaveRows = 43;\n    MMCurrentPreferencePane = Advanced;\n    MMLastWindowClosedBehavior = 2;\n    MMOpenInCurrentWindow = 1;\n    MMRenderer = 1;\n    MMSuppressTerminationAlert = 1;\n    MMTopLeftPoint = \"{663, 785}\";\n    NSNavLastRootDirectory = \"~/Desktop\";\n    NSNavPanelExpandedSizeForSaveMode = \"{712, 448}\";\n    NSNavPanelExpandedStateForSaveMode = 1;\n    NSQuotedKeystrokeBinding = \"\";\n    NSRepeatCountBinding = \"\";\n    \"NSWindow Frame FindAndReplace\" = \"802 547 490 169 0 0 1440 877 \";\n    SUCheckAtStartup = 0;\n    SUEnableAutomaticChecks = 0;\n    SUHasLaunchedBefore = 1;\n    SUSendProfileInfo = 0;\nthis is my dump. is there any field suspicious?. ",
    "ronen": "\nsee if others or @s4y have additional comments\n\nComment from the peanut gallery:  I haven't done any extensive testing, but I've been using this all day and it's been working fine.   Thanks!!!\n. ",
    "dossy": "Update: I found the cause of this problem!\nOpen folders in new window (high Sierra)\nThe culprit is in \"System Preferences > Dock > Prefer tabs when opening documents\" - it was set to \"Always\" (and I'm not sure if that's the default setting or not) ... if I set it to \"Manually\" then I get back the New Window behavior I was expecting - both in MacVim and in Finder - and I'm betting it'll \"fix\" the problem in other places as well.\nGoing to close this issue, but man ... this was annoying as hell .... @ychin - Thanks for the update.. ",
    "cryptoeraser": "Hi @eirnym,\nThank you very much for the information. I have been trying to build MacVim with dual support for both Python2 and Python3. I have always been building my Vim and MacVim from source, however, a couple of days ago, I realized that now I need both Python2 and Python3.\nI have been trying to get this working without success so far. Here is what I have:\n1) I have my two Pythons: Python 2.7.15 and Python 3.5.6. They both live in their respective .pyenv folders and they are working. The dynamic libs are there:\n~/.pyenv/versions/3.5.6/Python.framework/Versions/3.5/lib/libpython3.5.dylib\n~/.pyenv/versions/2.7.15/lib/libpython2.7.dylib \n2) MacVim is built against these pythons in dynamic mode:\nexport vi_cv_path_python=/Users/me/.pyenv/versions/2.7.15/bin/python2\nexport vi_cv_path_python3=/Users/me/.pyenv/versions/3.5.6/Python.framework/Versions/3.5/bin/python3\nexport vi_cv_dll_name_python=/Users/me/.pyenv/versions/2.7.15/lib/libpython2.7.dylib\nexport vi_cv_dll_name_python3=/Users/me/.pyenv/versions/3.5.6/Python.framework/Versions/3.5/lib/libpython3.5m.dylib\nwith the following command:\n/configure --with-features=huge --enable-multibyte --enable-terminal --enable-cscope --enable-pythoninterp=dynamic --enable-python3interp=dynamic --with-compiledby=Symbolix --with-properly-linked-python2-python3\nSo the vim --version|grep python command returns:\n+comments          +libcall           +python/dyn        +viminfo\n+conceal           +linebreak         +python3/dyn       +vreplace\n4) The options are set in a minimal vmirc file, and running :set lists the relevat options:\npythonthreedll=~/.pyenv/versions/3.5.6/Python.framework/Versions/3.5/lib/libpython3.5.dylib\npythonthreehome=~/.pyenv/versions/3.5.6/Python.framework/Versions/3.5\npythondll=~/.pyenv/versions//2.7.15/lib/libpython2.7.dylib\npythonhome=~/.pyenv/versions/2.7.15\nEverything seems to be in place, yet I am still getting the nasty crash when trying to mix py2 and py3. This is frustrating :(\nVim: Caught deadly signal SEGV\nVim: Finished.\nHas anyone got this mixed Python workflow working?. Some updates:\nSo with the released MacVim binary, I am getting this:\nE837: This Vim cannot execute :py3 after using :python\nE263: Sorry, this command is disabled, the Python library could not be loaded.\nIs it correct to assume that, the release binary, will run with only one of the Pythons. And it does not support Python2 and Python3 at the same time, even when the options are set?\n\n. I think I have made some progress:\n```\nmvim -u NONE -U NONE --noplugin -c 'py print(\"test\")'\n--> IS WORKING\nmvim -u NONE -U NONE --noplugin -c 'py3 print(\"test\")' \n--> IS WORKING\nmvim -u NONE -U NONE --noplugin -c 'py print(\"test\")' -c 'py3 print(\"test\")'\n--> IS WORKING\nmvim -u NONE -U NONE --noplugin -c 'py3 print(\"test\")' -c 'py print(\"test\")'\n--> IS NOT WORKING\n```\nBefore, only the first two were working. Now only the last one is crashing Vim. Any ideas? . @eirnym Thank you very much for your time and for the detailed explaination. I have been building and testing with snapshot 151 (but the released one).\nSo would you confirm that you have VIM running both versions of Python (Py2 and Py3) as dynamically linked libs and with no issues what-so-ever when moving between :py and py3 commands and the other way around, when moving from :py3 to py? So when you run the little test above, all 4 options are working without a crash?\nAlso, this is from the docs.\n\nHere Vim's behavior depends on the system in which it was configured.  In a\nsystem where both versions of Python were configured with --enable-shared,\nboth versions of Python will be activated at the same time.  There will still\nbe problems with other third party libraries that were not linked to\nlibPython.\n\nI don't understand that last bit:\n\nThere will still be problems with other third party libraries that were not linked to\nlibPython.\n\nIs there an example about this third-party-library incompatibility?. Despite the fact that I am building my Python2 and my Python3 using the --enable-shared flags and I am doing my best to build those as shared libs, there is one thing that bothers me and it is this:\nI am not able to see the link to the dynamic library libpython2.7.dylib on the .so files inside my freshly built Python. For example, any dynamically linked python would look like the following, please note that I am trying this on Linux, but the case is similar on Darwin64.\nldd /usr/lib64/python2.7/lib-dynload/_ctypes.so\n    linux-vdso.so.1 =>  (0x00007ffd4a5dd000)\n    libffi.so.6 => /lib64/libffi.so.6 (0x00007f443bf1e000)\n    libpython2.7.so.1.0 => /lib64/libpython2.7.so.1.0 (0x00007f443bb52000)\n    libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f443b935000)\n    libc.so.6 => /lib64/libc.so.6 (0x00007f443b572000)\n    libdl.so.2 => /lib64/libdl.so.2 (0x00007f443b36e000)\n    libutil.so.1 => /lib64/libutil.so.1 (0x00007f443b16a000)\n    libm.so.6 => /lib64/libm.so.6 (0x00007f443ae68000)\n    /lib64/ld-linux-x86-64.so.2 (0x0000558a69696000)\nSo you can clearly see that the libpython2.7.so.1.0 library is requested. However, when I run the similar command on my OSX Python2, that I have dynamically built, I only get this:\notool -L _ctypes.so\n_ctypes.so:\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50)\nSo no references to the libpython2.7 file. This is a bit worrying. However, that is not the case for the actual executable, I can see the python binary is linked to the libpython2.7 file.\nMaybe you can share your Python build flags? That would be very helpful. Cheers.. Hello Again,\nYes. With that approach, it works for me as well. Actually I like it this way better. So, here is what I have and it works:\n(1) I have two miniconda Pythons: Python 2.7.15 and Python 3.7.0\n(2) I have the VIM options active in my .vimrc file.\n    and these are pointing to their respective conda Python builds:\n            pythonthreedll,\n            pythonthreehome,\n            pythondll,\n            pythonhome,\n(3) I have downloaded and installed the latest MacVim (snapshot_151)\n    and it finds the dynamic python links. The crash protection is there, meaning,\n    once the user invokes py2 or py3, it stays in that way. You just get a warning\n    in case you try to invoke the other Python.\n(4) I also can confirm that I have installed copule of packages with conda\n    and I have full access to those through my :py2 or :py3 interfaces.\nSo it makes sense to keep it safe in that way. \nJust couple of last questions, before I close this issue. And once again, thanks for the help!\n\n\nIf I still would like to build MacVim from source, what are the flags that will ensure the safety system that is existent in the current binary release (151) of MacVim will be available in my custom build as well? The reason I am asking is that, I would like to tweak my MacVim (build it myself) yet still would like to have that Python safety in place. The one that goes \"You have invoked Py2, you can't invokve Py3 at this moment.\" or the oposite.\n\n\nIs it possible to hardcode the dynamic python links at build time, so we do not need to set the options in the .vimrc file. I thought that is possible through flags such as: -DYNAMIC_PYTHON_DLL and -DYNAMIC_PYTHON3_DLL at build time?\n\n\nNOTE: I guess the most important thing is that, we should remember that the Python that VIM uses, has nothing to do with our shell Python and our Python development environment. These are two seprate things. Any VIM plugin that needs Python, our :py scripts, etc. all of these are relying on the linked Python (and probably YCM etc. as these have internal :py calls). On the other hand, the Python project we are building, that one relies on the Python environment outside VIM. Including YCM's completion workflow (cause it needs to load and index the modules we are using for our project.\nJust writing this down as a side note :) Since I have noticed that most of the people tend to think that they need all of the packages related to their Python development, be existing under VIM's Python. That is NOT the case. The packages that need to be available to VIM's Python are only those needed by your scripts and any plugin specific needs.\nFor example, your VIM Python can have only one package installed pyyaml and that is it. Only because you have a VIM plugin that needs to read .yaml files. However, on the other hand you might be working on a complex Python project that needs numpy, scipy, beautifulsoup etc. These have nothing to do with your VIM Python.. Hi @eirnym, thanks for your interest in this topic. I am not sure if this is a font issue. I tried different fonts etc, it might be some cache somewhere, cause the problem does not go away with new MacVim snapshots etc. I mean, this might be related to the OS, some MacVim font or glyph cache somewhere on the OS. Any ideas?. :( I really do not want to upgrade to Sierra, might break a lot of stuff for me. But, eventually will happen.. Hi, sorry for the delay. I have tried your font also tried flushing the font caches etc. Nothing has worked. Tomorrow, I might have to install macOS Mojave, I hope that fixed it.\nUnless there is some kind of a MacVim specific font cache somewhere.. ",
    "phillmv": "@ychin Hrm, I don't see any comments - is it possible you didn't click \"Add review\" \ud83d\ude04?\nThanks!. Since the purpose of this file is to indicate the license that applies to the code, \nI removed both the Summary section as proposed by @ychin and also the manual copyright declaration since it's still present in |manual-copyright|.. ",
    "LukasRypl": "I had the same problem. I found the following after running brew reinstall --build-from-source macvim: https://github.com/Homebrew/homebrew-core/issues/33656 and it seems that the option --env=std fixes this. \nI am not sure if  all the options are required, but the following worked in my environment:\nbrew reinstall --build-from-source --env=std -v macvim. ",
    "wfiveash": "I resolved it by updating macOS from Sierra to Mojave.  I would say that this may still be an issue for others running Sierra but I'm happy to close this.. I just noticed that on my Mini now running Mojave that macvim was not updating the display properly.  I realized that I had only installed the CLI version of macvim, not the cask.  So I just did \"brew cask install macvim\" which worked and now macvim is working normally.  Here is the output of :version on the cask version of macvim:\n:version\nVIM - Vi IMproved 8.1 (2018 May 18, compiled Aug 14 2018 05:28:49)\nmacOS version\nIncluded patches: 1-280\nCompiled by travis@Traviss-Mac-1044.local\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl               +farsi             +mouse_sgr         -tag_any_white\n+arabic            +file_in_path      -mouse_sysmouse    -tcl\n+autocmd           +find_in_path      +mouse_urxvt       +termguicolors\n+autochdir         +float             +mouse_xterm       +terminal\n-autoservername    +folding           +multi_byte        +terminfo\n+balloon_eval      -footer            +multi_lang        +termresponse\n+balloon_eval_term +fork()            -mzscheme          +textobjects\n+browse            +fullscreen        +netbeans_intg     +timers\n++builtin_terms    -gettext           +num64             +title\n+byte_offset       -hangul_input      +odbeditor         +toolbar\n+channel           +iconv             +packages          +transparency\n+cindent           +insert_expand     +path_extra        +user_commands\n+clientserver      +job               +perl/dyn          +vartabs\n+clipboard         +jumplist          +persistent_undo   +vertsplit\n+cmdline_compl     +keymap            +postscript        +virtualedit\n+cmdline_hist      +lambda            +printer           +visual\n+cmdline_info      +langmap           +profile           +visualextra\n+comments          +libcall           +python/dyn        +viminfo\n+conceal           +linebreak         +python3/dyn       +vreplace\n+cryptv            +lispindent        +quickfix          +wildignore\n+cscope            +listcmds          +reltime           +wildmenu\n+cursorbind        +localmap          +rightleft         +windows\n+cursorshape       +lua/dyn           +ruby/dyn          +writebackup\n+dialog_con_gui    +menu              +scrollbind        -X11\n+diff              +mksession         +signs             -xfontset\n+digraphs          +modify_fname      +smartindent       +xim\n+dnd               +mouse             +startuptime       -xpm\n-ebcdic            +mouseshape        +statusline        -xsmp\n+emacs_tags        +mouse_dec         -sun_workshop      -xterm_clipboard\n+eval              -mouse_gpm         +syntax            -xterm_save\n+ex_extra          -mouse_jsbterm     +tag_binary\n+extra_search      +mouse_netterm     +tag_old_static\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n       defaults file: \"$VIMRUNTIME/defaults.vim\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-u\nnknown-pragmas -pipe  -DMACOS_X -DMACOS_X_DARWIN  -g -O2 -U_FORTIFY_SOURCE -D_FO\nRTIFY_SOURCE=1\nLinking: clang   -L. -fstack-protector -L/usr/local/lib -L/usr/local/opt/libyaml\n/lib -L/usr/local/opt/openssl/lib -L/usr/local/opt/readline/lib -L. -fstack-prot\nector -L/usr/local/lib -L/usr/local/opt/libyaml/lib -L/usr/local/opt/openssl/lib\n -L/usr/local/opt/readline/lib  -L/usr/local/lib -o Vim -framework Cocoa -framew\nork Carbon       -lm  -lncurses -liconv -framework AppKit   -fstack-protector  -\nL/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE\n. ",
    "pointlessone": "I use Homebrew binary.\nI know about #751. I have Core Text Renderer disabled. It works (doesn't flicker) apart from minor space width issues on otherwise blank lines.. ",
    "bhargavshivkumar": "Is there a work around for this until #751 is resolved? \n. @ychin When you say use the snapshot version i'm assuming you are saying i should install using the dmg file instead of using homebrew binaries? (sorry relatively new to the Mac way of things) \nAlso, is there a specific snapshot I should be downloading or is 151 also built against High Sierra? . ",
    "scootergrisen": "Is there a problem using the po/mo files?. Hopefully someone that knows more about it reads this and knows what to do.\nI have translated Vim to danish so of course i would like my translation work to get to the users.\n. ",
    "cclauss": "Can you please provide the URL to upstream?. PR opened in upstream.  Python 2 end of life is in 410 days so I am doing my part to ensure that important Python projects do not contain anachronisms.. ",
    "16Bitt": "+1  Here's a stack trace from a fresh install:\n```\n 2018-11-19 22:35:16.914 MacVim[33339:226490] GetInputSourceEnabledPrefs user file path = /Users/austinbittinger/Library/Preferences/com.apple.HIToolbox.plist\n2018-11-19 22:35:16.914 MacVim[33339:226490] GetInputSourceEnabledPrefs effective user id path = 501\n2018-11-19 22:35:16.914 MacVim[33339:226490] GetInputSourceEnabledPrefs user pref content = {type = immutable dict, count = 3,\nentries =>\n    0 : {contents = \"AppleInputSourceHistory\"} = {type = immutable, count = 1, values = (\n    0 : {type = immutable dict, count = 3,\nentries =>\n    0 : {contents = \"InputSourceKind\"} = {contents = \"Keyboard Layout\"}\n    1 : {contents = \"KeyboardLayout Name\"} = U.S.\n    2 : {contents = \"KeyboardLayout ID\"} = {value = +0, type = kCFNumberSInt64Type}\n}\n)}\n    1 : {contents = \"AppleSelectedInputSources\"} = {type = immutable, count = 1, values = (\n    0 : {type = immutable dict, count = 3,\nentries =>\n    0 : {contents = \"InputSourceKind\"} = {contents = \"Keyboard Layout\"}\n    1 : {contents = \"KeyboardLayout Name\"} = U.S.\n    2 : {contents = \"KeyboardLayout ID\"} = {value = +0, type = kCFNumberSInt64Type}\n}\n)}\n    2 : {contents = \"AppleCurrentKeyboardLayoutInputSourceID\"} = {contents = \"com.apple.keylayout.US\"}\n```\nI've tried reinstalling macvim and all dependencies and it's completely unusable with crazy flickering. ",
    "grr": "after upgrading to 8.1.560 on Sierra 10.12.6, which does not have dark mode, my titlebar is now completely black. can't read the title text and it's also not as easy to grab the titlebar to move the window since my colorscheme background color is also black:\n\n. yes, running with -i NONE -u NONE shows a normal (non-dark) titlebar. i wouldn't have expected anything in my vimrc to affect part of the window manager. i'll try to figure out which setting is the root cause.. ok, running again with -i NONE -u NONE, then :set nocompatible, then choose any colorscheme, and the titlebar becomes the background color, so it's not just binary setting of normal/dark titlebar. using the \"blue\" colorscheme will result in a blue titlebar:\n\n. ",
    "mfn": "Just received the auto update on Mac, with dark mode support. Wow!\nThanks, it's the small details ;-) \ud83d\ude47\u200d\u2642\ufe0f. ",
    "kkkrist": "Yes, it's great! Just wondering: Is there a way to manually turn it on? I'd prefer to just use MacVim with dark mode and keep the rest of the system \"light\".. > @kkkrist Sorry but I would have to say probably not for now. MacVim currently supports a fair amount of options, and preferences like this is actually the source of a fair amount of bugs since it makes it harder to code and test. The colors are also toggled directly by dark mode so it would involve some work to refactor. If you use \"light mode\" for the OS the window frame will appear light anyway so it won't be completely dark.\n\nFeel free to file an issue for tracking though.\n\nThanks for your answer! I had just hoped there is some setting or call  being triggered when you set your desktop to dark mode that's also accessible to users.\nIt's just that I prefer dark themes and I've become a bit spoilt by iTerm which can be set to display a dark window frame and dark tabs independently from the macOS desktop settings.\nBut it's really not that important or even worth an issue.\nI have a lot of respect for what you do, the work on MacVim is very much appreciated!. ",
    "peterrenshaw": "Titlebar requires contrasting text colour. Usable but PIA. (OS X El Capitan 10.11.X). ",
    "genivia-inc": "I'm having the exact same issue as @grr with version 8.1.560 on Mac OS 10.12.6: my title bar has the background color (dark blue color DarkBlue in .vimrc) with black title text, which makes it impossible to read. Any suggestions on how to change my .vimrc are appreciated!. ",
    "wlaurance": "Hi, there I am also getting this same behavior. Thanks for reporting @AdamJacobMuller \nI am experiencing issues with version 8.1-151_1. ",
    "numbcoder": "I have got the same behavior on 8.1-151_1 and 8.1-151_2\nAfter disabled the Use Core Text render option, this behavior disappeared.. Related to this issue #751. ",
    "AdamJacobMuller": "disabling Use Core Text render fixes the issue for me too. Requires a restart, tested with that earlier without a restart.... ",
    "aholub": "Actually, the defaults fix doesn't fully fix the problem. I'm still seeing occasional bad behavior. The last time macvim crashed entirely. I've attached the crash report.\nreport.txt\n. ",
    "longcao": "I'm also seeing this on macOS Mojave 10.14.1, installed with Homebrew:\nmacvim: stable 8.1-151 (bottled), HEAD\nGUI for vim, made for macOS\nhttps://github.com/macvim-dev/macvim\nConflicts with:\n  vim (because vim and macvim both install vi* binaries)\n/usr/local/Cellar/macvim/8.1-151_2 (2,178 files, 34.9MB) *\n  Poured from bottle on 2018-12-01 at 09:16:45\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/macvim.rb\n==> Dependencies\nRequired: cscope \u2714, lua \u2714, python \u2714\n==> Requirements\nBuild: xcode \u2714\n==> Options\n--HEAD\n    Install HEAD version\n@aholub And for what it's worth, disabling the Core Text renderer and and restarting MacVim as noted in https://github.com/macvim-dev/macvim/issues/751#issuecomment-427593064 seems to fix the issue for me for now.. ",
    "tkandal": "Hello\nAfter upgrading to latest MacVim on MacOS 10.14.1 with Homebrew, I also have this problem.\nDisabling the Core Text renderer as noted in https://github.com/macvim-dev/macvim/issues/751#issuecomment-427593064 also fixed my issue.. ",
    "juliuszint": "Performance looks great but UltiSnips stopped working with this patch. Otherwise great work!. @ychin Sorry, that was just meant as a feedback for the patch that @s4y provided. Since he explicitly wrote that this code is not ready for a pull request and not merged into master i think filing a issue would be a little bit early. I never encountered this problem with a official MacVim release.. When started from the commandline a new line is output to standard out. \nThe issue mentioned here https://github.com/macvim-dev/macvim/issues/796#issuecomment-464307565 was also present in MacVim before. \nAs for performance i am using it on a 4k external Monitor on a MacBook Pro 15-inch 2017 and it seems just as fast as the old renderer if not faster. Obviously this is just my perception if there are any profiling methods let me know.. NERDTree in combination with vim-devicons works almost perfect, except for the rendering issue on the cursor line, where the folder icon gets clipped.\n\n. ",
    "kyletolle": "When I run :ruby puts RUBY_VERSION, I get 2.3.7.\n\nEven when I start vim using vim -N -u NONE as mentioned in the contributing file, and run :ruby puts RUBY_VERSION, I see 2.3.7.\nI built Command-T against 2.5.3, which is what it's expecting when I use it in vim, but it still seems that Vim's picking up 2.3.7 instead of the expected 2.5.3 version of Ruby. And I'm trying to specifically set the rubydll in the .vimrc, which also does not seem to work.\nSidenote: You're right that there is a lot more fussing with Command-T to get it running. Each time I upgrade MacVim, I have to recompile the native component of Command-T. It had given me lots of trouble in the past, but I had a set of commands that worked until the new version of MacVim. I might need to explore an alternative because it's getting really old having to fight this so often and it being a gamble whether I'll lose a ton of time to this with each upgrade to MacVim. But Command-T has been extremely helpful for me, which is why I've endured it so far.. I was able to compile Command-T against Ruby 2.3.7 to get that Command-T working for me, since MacVim uses Ruby 2.3.7.\nStill not certain why I couldn't get MacVim to use Ruby 2.5.3, though.\nThe release notes say:\nScript interfaces have compatibility with these versions:\n\u2026\nRuby 2.5\nAnd this lead me to believe that I would need to have Ruby 2.5 installed in order to use MacVim, but this does not seem to be the case. Is it mentioned anywhere what version of Ruby MacVim requires?. Thanks for the additional information @ychin. Running :set rubydll=/usr/local/Cellar/ruby/2.5.3_1/lib/libruby.2.5.dylib at runtime did not change the ruby version that :ruby puts RUBY_VERSION displayed, and I'm not sure what that might be related to.\nBut I am happy enough now that I can continue to use vim and Command-T without issue. I'll keep an eye out in the future to see if things change. I hope this issue might be of help to someone else who faced a similar issue.. ",
    "aeciolevy-ven": "I have spent some hours trying to match the version but without success...\n```\ncd ~/.vim/bundle/command-t/ruby/ext/command-t/ \nrvm use 2.3.7\nruby extconf.rb\nmake clean \nmake\n```\nI tried to do it on the and it did not work as well..\ncd ~/.vim/bundle/command-t/. Not yet. I have tried to match the ruby version of command-t and vim.\nI am getting the same error\ncommand-t.vim could not load the C extension.\nPlease see INSTALLATION and TROUBLE-SHOOTING in the help.\nVim Ruby version: 2.3.7-p456\nFor more information type:    :help command-t\nBut I already set ruby version 2.3.7 in the command-t folder.. ",
    "tessarin": "@ychin Since you asked for opinions: while it is a welcome and interesting aesthetic change, the title must be readable. Maybe choosing its color automatically based on the background itself?\nAlso, having the option to switch back to the default gray bar would be excellent. I'm sure some people would prefer that. From what I understood it seems that Mojave still features the standard bar. Thus having this in the preferences would be ideal to make it consistent, giving the option to use background-based or standard bar under all systems.\n\nTwo other small details I may add is that the border which creates the highlight ends up being really bright:\n\nAnd the title on fullscreen (after hovering over the menu-bar) has a bright outline:\n\n. ",
    "jordanmarchetto": "I'm having the same issue (can't read the titlebar text).  I'd be happy with a \"use default gray bar\" option, or just a way of specifying the font color (since I can already specify the bg color).  Being able to choose fg/bg colors would be ideal though.\n\nI also just realized the X's for the tabs aren't visible by default for me.  Looks like the default OS behavior is for them to show when you hover the tab, but in macvim, it doesn't show until I hover over where the X is.. ",
    "typoman": "I hope I can show how to make it work. I don't use MacVim in the terminal, I use the MacVim.app (Custom Version 8.1.280 (151)). This is the screenshot from the Vim 8 in the terminal. Which is the expected behavior:\n\nText which I used to make the screenshot:\n\u0641\u0627\u0631\u0633\u06cc English\nThe same text in MacVim:\n\nAlso, I needed to change the font in the MacVim to the New Courier because, in the terminal, the fallback font for Arabic is New Courier, but in MacVim it doesn't happen and goes to a font I don't recognzie. As you can see the order of characters for Arabic has become reversed in the MacVim. Arabic is right to left, and in MacVim it's being displayed as left to right.\nI have to add that previously if I build the Vim 8 with the +arabic and +farsi feature in the terminal, the Arabic also was displayed incorrectly. But if I build it without the -arabic feature, the arabic in the terminal Vim displayed correctly. So finally I realized I could make the vim in terminal work with +arabic only if the vim recognized the terminal is bidi. So even by having the +arabic feature in the vim inside the terminal, I added the set termbidi in my vimrc and Arabic started to show correctly. I think MacVim also reads the same vimrc file because settings show up the same. I hope this helps to find a solution?\nMy Vim version (not the MacVim):\n~$ vim --version\nVIM - Vi IMproved 8.1 (2018 May 18, compiled Dec  2 2018 03:52:24)\nmacOS version\nIncluded patches: 1-556\nCompiled by bahmaneslami@B-M-E.local\nHuge version without GUI.  Features included (+) or not (-):\n+acl               +extra_search      +mouse_netterm     +tag_old_static\n+arabic            +farsi             +mouse_sgr         -tag_any_white\n+autocmd           +file_in_path      -mouse_sysmouse    -tcl\n+autochdir         +find_in_path      +mouse_urxvt       +termguicolors\n-autoservername    +float             +mouse_xterm       +terminal\n-balloon_eval      +folding           +multi_byte        +terminfo\n+balloon_eval_term -footer            +multi_lang        +termresponse\n-browse            +fork()            -mzscheme          +textobjects\n++builtin_terms    -gettext           +netbeans_intg     +timers\n+byte_offset       -hangul_input      +num64             +title\n+channel           +iconv             +packages          -toolbar\n+cindent           +insert_expand     +path_extra        +user_commands\n-clientserver      +job               -perl              +vartabs\n+clipboard         +jumplist          +persistent_undo   +vertsplit\n+cmdline_compl     +keymap            +postscript        +virtualedit\n+cmdline_hist      +lambda            +printer           +visual\n+cmdline_info      +langmap           +profile           +visualextra\n+comments          +libcall           -python            +viminfo\n+conceal           +linebreak         +python3           +vreplace\n+cryptv            +lispindent        +quickfix          +wildignore\n-cscope            +listcmds          +reltime           +wildmenu\n+cursorbind        +localmap          +rightleft         +windows\n+cursorshape       -lua               -ruby              +writebackup\n+dialog_con        +menu              +scrollbind        -X11\n+diff              +mksession         +signs             -xfontset\n+digraphs          +modify_fname      +smartindent       -xim\n-dnd               +mouse             +startuptime       -xpm\n-ebcdic            -mouseshape        +statusline        -xsmp\n+emacs_tags        +mouse_dec         -sun_workshop      -xterm_clipboard\n+eval              -mouse_gpm         +syntax            -xterm_save\n+ex_extra          -mouse_jsbterm     +tag_binary        \n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n       defaults file: \"$VIMRUNTIME/defaults.vim\"\n  fall-back for $VIM: \"/usr/local/share/vim\"\nCompilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H   -DMACOS_X -DMACOS_X_DARWIN  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1       \nLinking: gcc   -L/usr/local/lib -o vim        -lm -lncurses  -liconv -framework AppKit     -L/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/config-3.7m-darwin -lpython3.7m -ldl -framework CoreFoundation\n. ",
    "matsm": "I have the same problem with 8.1.560. Mojave 10.14.1 . From system.log\nMacVim[5213]: DEPRECATED USE in libdispatch client: dispatch source activated with no event handler set; set a breakpoint on _dispatch_bug_deprecated to debug. \n\nOn 10 Dec 2018, at 00:40, Yee Cheng Chin notifications@github.com wrote:\n@LukeOrgana I couldn't reproduce the issue, but I'm suspecting it's happening due to your auto-load session script that's triggering some other behaviors. I suspect it's a similar issue as #804. Do you have non-native fullscreen set\n\nNo\nBut de-select \u201cUse Core Text renderer\u201d resolves the problem.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n. \n\nOn 10 Dec 2018, at 12:27, LukeOrgana notifications@github.com wrote:\nI made pull request #811 which resolves this issue (I think). I suspect both @matsm and @LukeOrgana have the old deprecated MMUseCGLayerAlways set to YES which causes this problem. I fixed it to properly ignore this flag in Mojave. (It's unfortunate that we used to tell people to set MMUseCGLayerAlways as a clutch around misc rendering issues. Moving on, there should be no hidden setting that you need to set to make rendering work)\nThe next release will have this fix. Meanwhile, you should do defaults delete org.vim.MacVim MMUseCGLayerAlways in Terminal which should fix this issue for you. I suggest leaving Core Text renderer on. It's enabled by default because it's the most fully featured and the officially supported method.\n\nYes, it fixes the problem.\nThanks!\n/mm\n\nI ran defaults delete org.vim.MacVim MMUseCGLayerAlways in the terminal, as suggested, and set Core text renderer on in my preferences and it now works perfectly. Thanks you.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n. ",
    "zhipengyan": "Me too. ",
    "rseddon": "I downgraded to the previous version, and youcompleteme works again.  So this does seem to be a regression.. ",
    "bstaletic": "YouCompleteMe maintainer here. The error you see isn't YCM specific. Your vim can't do :py import _io, even though _io is part of the Python's standard library.. ",
    "tupos": "I think that the problem is there\n\nP.S. I think it is related to lines 32-33 of this file #739, here\n\nThere is a typo. insted set pythondll it is written set pythonthreedll in the section about python2.\nCan you check this?. I just looked at you commit e92be4c. But the lines 32 and 33 are still the same and it appears that pythonthreedll is set to python2. \nset pythonthreedll=/Library/Frameworks/Python.framework/Versions/2.7/Python\n    set pythonthreehome=/Library/Frameworks/Python.framework/Versions/2.7\nAm I missing something?. Ahh sorry. Did not see your further commit.. ",
    "adam-ah": "$ defaults read org.vim.MacVim | grep 'MM\\|SU'\n    MMAutosaveColumns = 203;\n    MMAutosaveRows = 65;\n    MMCurrentPreferencePane = Advanced;\n    MMLastWindowClosedBehavior = 2;\n    MMTopLeftPoint = \"{211, 1177}\";\n    \"NSWindow Frame SUUpdateAlert\" = \"650 588 620 392 0 0 1920 1177 \";\n    SUEnableAutomaticChecks = 0;\n    SUHasLaunchedBefore = 1;\n    SULastCheckTime = \"2018-12-09 06:49:59 +0000\";\n    SUSendProfileInfo = 0;\nI'm not sure this is what you meant, but to save time in case you did:\n$ python --version\nPython 2.7.10\n```\n$ perl --version\nThis is perl 5, version 26, subversion 2 (v5.26.2) built for darwin-thread-multi-2level\nCopyright 1987-2018, Larry Wall\nPerl may be copied only under the terms of either the Artistic License or the\nGNU General Public License, which may be found in the Perl 5 source kit.\nComplete documentation for Perl, including FAQ lists, should be found on\nthis system using \"man perl\" or \"perldoc perl\".  If you have access to the\nInternet, point your browser at http://www.perl.org/, the Perl Home Page.\n```\n$ ruby --version\nruby 2.3.7p456 (2018-03-28 revision 63024) [universal.x86_64-darwin17]. ",
    "minghz": "I got an issue where MacVim starts, but the window is completely black, and will not show any text no matter what commands you issue.\nNormal vim on the terminal works for me. On MacOS Mojave.. ",
    "fnino": "Yes, perfect.  That was it.  Thanks !\nFernando\n-- \n\nFernando NI\u00d1O\nLEGOS (UMR5566 CNES/CNRS/IRD/UPS)                                     18, Av. Edouard Belin\nT\u00e9l: 05.61.33.47.38                                                  31401 Toulouse Cedex 9\n. ",
    "nooks": "\n. ",
    "benjifisher": "I added that in 2005. I believed in the equivalence of blame and credit long before I learned to use git.. ",
    "shayneholmes": "Good question! Did some digging and found this:\nMacVim, when compiled with the odbeditor option (:h odbeditor has more), implements the ODB Editor Suite, which is a protocol for external editors based on Apple Events. nvALT uses that protocol to leverage MacVim as an external editor. After launch, MacVim uses Apple Events to notify nvALT when the file is modified or closed.. Done. I took your wording verbatim, since it does a good job explaining how the permission will be used.. ",
    "tangentsoft": "Done.\nAs for the curl direction on that quote, I just didn't look closely enough at it when composing the message. My document does use the glyph you expect.. ",
    "chrisvacc": "Sorry, I meant to reply to this. I\u2019m gonna look at your links and the help file.\nThank you for the reply.\n. Yes, i checked and it\u2019s the default:\n~ \u00bb chsh -s /bin/zsh\nChanging shell for user.\nPassword for user: \nchsh: no changes made\nWhen I open it it automatically loads shell too. I have set -o vi\u201dadded to my .zshrc. Edit: Ahh, I got it. I added it to my .inputrc and it works. Sorry. Thanks!\n. Yea, it was driving me nuts not having vi mode in :terminal, so thanks. It\u2019s not fun sitting there holding the back arrow key for 15 seconds to get to the BOL, lol.\nI\u2019m pretty positive my zsh got sources because all my customizations (theme etc) where there. Another strange effect was, when I opened R, python or swift from terminal, vi mode wouldn\u2019t work. I think it makes a difference if you put it in your .zshrc or .inputrc.. ",
    "emaiax": "@ychin so, I'll close this issue since it isn't an exactly MacVim bug.\nThanks for your answer! ;). ",
    "dennisjbell": "MacVim does still run when you see the error, but it pollutes the terminal and potentially interferes with automation.  I have seen various hits on Google that were slightly different than this, relating to python versions and interactions with plugins, but this was encountered on a \"fresh\" OS and Homebrew install with no plug ins.  I say \"fresh\" because it is a corporate laptop, with whatever policies and apps they have put on it.  I'm not sure the exact mechanics that causes it to fail, but my reasoning for pursuing this is that the patch does not add any complexity to the code (actually simplifies the code and path) so follows the Hippocratic \"first do no harm\" rule while solving an admittedly rare problem.  I have tested this on both the machine that is having the problem and a machine that isn't having this problem (both High Sierra).\nAs an alternative, I'd love to understand why this is picking up the quazi-relative path and the absolute path when the binary is called.  I'm not an objective-C developer, but if you have anything you'd like me to try to debug what's happening I'd be happy to do so.\nAs for waiting a week or two for you, I'm in no rush -- I just wanted to be a good OSS citizen and contribute back to a project that I love and used for years.  I figured if I had a fix, I might as well share it in case anyone else ran into it.. ",
    "itchanges": "\nWhat do you mean you want the \"-v\" mode? What's the actual issue you are trying to solve here?\nThis is the docs for -v:\n-v      Start Ex in Vi mode.  Only makes a difference when the\n      executable is called \"ex\" or \"gvim\".  For gvim the GUI is not\n      started if possible.\n\nthis is other people advice, i follow the advice to add -v  http://www.voidcn.com/article/p-rhjjulcw-ru.html. > You shouldn't need the \"-v\" flag as described in that article.\n\nWhat Chinese input method are you using and how is it not working for you? You are using MacVim the GUI app right (i.e. not in terminal)? Asian input methods should work in MacVim so I'm curious which one you are using.\n\nI use Chinese sogou input method , some files open by terminal, some files open by double click. when I open file by double click, system will auto invoke macvim \uff0cin this scene\uff0cwhen I type chinese words \uff0cit changes to space\u3002thanks for reply. ",
    "brandonbloom": "After a little bit more experimentation, it looks like this is a problem with the CoreText renderer. I turned it off in the preferences dialog and now echo is very fast again.. Thanks for the prompt and detailed reply. Apologies for the duplicate/noise, I did search a bit for an existing ticket, but no luck. Will keep an eye out for the next snapshot(s)!. Just wanted to say that I upgraded to the latest version and turned the CoreText renderer back on. Nice and speedy again! Thank you!. ",
    "zrzka": "I can confirm this issue with another font (PragmataPro). Check this screen recording.. ",
    "kika": "@zrzka It could be related but it's a different problem. And I believe MacVim was always like that when the cursor is on the line with ligature the ligature breaks up into components and then assembles back again. But the space taken by the ligature remains the same. In this particular issue the ligature takes half of the horizontal space and thus the next letter overlaps with the ligature.. ",
    "diegoryte": "Hi @chdiza ,\nthanks for your help. However, I need lua support for vim, that is why I was trying to use the options.\nRunning brew install macvim includes the lua support?\nThanks for your help.\n. Thanks for your help! I just installed with the command brew install macvim and it is compiled with lua.\n. ",
    "showaltb": "\nI think you mean 8.1-154, not 153.\n\nYes, sorry. I was getting the version from Homebrew, and it doesn't update when vim does an auto update. Also sorry if I reported this in the wrong project.. > Hmm\u2026\u00a0did you manually enable auto-update?\nNo, I don't believe so. It was an auto update (to 154) today that introduced the problem for me. Thinking it might be something on my side, I did brew update macvim, which brought me to 153, and then did a \"Check for Updates\" within the app, which updated me to 154. The auto-updating has been working fine as far as I can tell, but I'm by no means an expert in any of this.. ",
    "mechanicles": "@showaltb @ychin I am getting same error now. Could you tell me how did you add/copy the file in runtime/autoload? I don't know where this directory lives :(. Got it. I just added that file like ~/.vim/autoload/matchit.vim and it is working fine. Thanks.. ",
    "dataf3l": "I have the same problem, I can't use % anymore, oh man..... ",
    "errantepiphany": "This is also a problem in version 8.1.873 on Fedora 29 linux (installed via dnf). Adding the file as a workaround like others did above fixed it for me, too.. ",
    "mathsaey": "I'm facing the same issue. Pressing ctrl-c in any mode causes a spike in CPU usage and a noticeable delay. The issue only seems to occur in when using the MacVim gui. (so it doesn't seem to be an issue on the vim side).. ",
    "vnazarenko": "By the way, I'm getting this error for all other ruby versions, to fix that i switched to 2.6.1. ",
    "alextend": "\nI don't use Homebrew Cask so my knowledge here is limited but seems like the \":mountain_lion\" dependency stuff has been removed in Homebrew/homebrew-cask#57235. I'm not sure why you see that. Do you need to update your brew formulas so you pick up this change?\nOtherwise file an issue at https://github.com/Homebrew/homebrew-cask/issues\n\nthx,it's OK,i remove a folder /usr/local/CaskRoom/macvim.. ",
    "DervishD": "Thanks @ychin. I thought it was a macvim problem because I've been using the same set of config files (not sharing them using Git, but using Google Drive) in UNIX format in Windows and Ubuntu without any problem. And in UNIX format they work under Mac, too. The only one which was in DOS newlines format was the colorscheme and it has worked in a Debian machine, in Windows and only failed in Mac.\nAnyway, it's easy to fix, I already converted the files.. ",
    "traviswsims": "Hey @ychin, thanks for getting back to me!  Here's what I've got:\nMacBook Pro:\n```\nOS: 10.13.6 (17G65)\nGraphics:\nRadeon Pro 460 4096 MB\nIntel HD Graphics 530 1536 MB\n```\nvim:\nVIM - Vi IMproved 8.1 (2018 May 18, compiled Feb  4 2019 08:13:44)\nmacOS version\nIncluded patches: 1-873\nCompiled by me@my-machine\nHuge version with MacVim GUI.  Features included (+) or not (-):\n+acl               +farsi             +mouse_sgr         -tag_any_white\n+arabic            +file_in_path      -mouse_sysmouse    -tcl\n+autocmd           +find_in_path      +mouse_urxvt       +termguicolors\n+autochdir         +float             +mouse_xterm       +terminal\n-autoservername    +folding           +multi_byte        +terminfo\n+balloon_eval      -footer            +multi_lang        +termresponse\n+balloon_eval_term +fork()            -mzscheme          +textobjects\n+browse            +fullscreen        +netbeans_intg     +textprop\n++builtin_terms    -gettext           +num64             +timers\n+byte_offset       -hangul_input      +odbeditor         +title\n+channel           +iconv             +packages          +toolbar\n+cindent           +insert_expand     +path_extra        +transparency\n+clientserver      +job               +perl/dyn          +user_commands\n+clipboard         +jumplist          +persistent_undo   +vartabs\n+cmdline_compl     +keymap            +postscript        +vertsplit\n+cmdline_hist      +lambda            +printer           +virtualedit\n+cmdline_info      +langmap           +profile           +visual\n+comments          +libcall           +python/dyn        +visualextra\n+conceal           +linebreak         +python3/dyn       +viminfo\n+cryptv            +lispindent        +quickfix          +vreplace\n+cscope            +listcmds          +reltime           +wildignore\n+cursorbind        +localmap          +rightleft         +wildmenu\n+cursorshape       +lua/dyn           +ruby/dyn          +windows\n+dialog_con_gui    +menu              +scrollbind        +writebackup\n+diff              +mksession         +signs             -X11\n+digraphs          +modify_fname      +smartindent       -xfontset\n+dnd               +mouse             +startuptime       +xim\n-ebcdic            +mouseshape        +statusline        -xpm\n+emacs_tags        +mouse_dec         -sun_workshop      -xsmp\n+eval              -mouse_gpm         +syntax            -xterm_clipboard\n+ex_extra          -mouse_jsbterm     +tag_binary        -xterm_save\n+extra_search      +mouse_netterm     +tag_old_static\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  system gvimrc file: \"$VIM/gvimrc\"\n    user gvimrc file: \"$HOME/.gvimrc\"\n2nd user gvimrc file: \"~/.vim/gvimrc\"\n       defaults file: \"$VIMRUNTIME/defaults.vim\"\n    system menu file: \"$VIMRUNTIME/menu.vim\"\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X -DMACOS_X_DARWIN  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: clang   -L. -fstack-protector-strong -L/usr/local/lib -L/usr/local/opt/libyaml/lib -L/usr/local/opt/openssl/lib -L/usr/local/opt/readline/lib -L. -fstack-protector-strong -L/usr/local/lib -L/usr/local/opt/libyaml/lib -L/usr/local/opt/openssl/lib -L/usr/local/opt/readline/lib  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv -framework AppKit   -fstack-protector  -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE\nPreferences:\nMMAutosaveColumns = 423;\nMMAutosaveRows = 84;\nMMCurrentPreferencePane = Advanced;\nMMSuppressTerminationAlert = 1;\nmacvim installed via homebrew, but updated with the in-app auto updater. After fiddling with it a bit more it, looks like it happens when I have NerdTree open followed by a tab switch.\nReproduction:\n\nopen a buffer\ntoggle NerdTree to open\nopen a new tab\nswitch back to the original tab\nperform a mouse scroll\n\nI did uninstall macvim and reinstall with homebrew, but it didn't fix it.. Hey thanks so much for digging into this more!\n\nWhat exactly does \"scramble\" mean? Does it go back to normal or is it just permanently hosed?\n\nIt usually has diagonal lines going across the buffers and \"fuzzy\" noise near the lines.  Sometimes the noise appears to the status line in the middle of the buffer.  One time I actually saw the buffer from another tab in the blur.\nSometimes the buffer is unreadable, usually it's only partially \"fuzzy\".  I've always been able to fix it by resizing the window.\n\n\nSeems like it only happens with tabs too?\n\nExactly.  The recipe seems to be\n\nopen a file\nopen a tab and a new file in that tab\ngo back to the first tab\nmouse scroll\n\n\nAnd you are sure only the recent update to 8.1.713 broke it?\n\nSeems like it.  I never saw it previously.\n\nDo you use fullscreen?\n\nNo\n\nDo you have tools that manage windows for you like Divvy or Magnet?\n\nNo\n\nCan you run with mvim -u NONE -U NONE and see if this still happens?\n\nGood tip!  Unfortunately it still does.  At first I thought it might be NERDTree related, but I was still able to reproduce it by going to a new tab, opening a file, then going back to the previous tab.\n\nI also nuked my .vimrc to see if that would help but it didn't.\n\n\nA related question is what guioptions do you have set.\n\n\nguioptions=egmrL\nThanks again for the hard work here!. One additional detail:  it seems to happen more often when I have a vertical split then switch tabs and scroll.\nHere's one with my .vimrc (left buffer) being \"ghosted\" twice over a completely different file in the right buffer.\n\n. Perfect, thanks very much for the help!. ",
    "kieve": "Yeah, I'm using the default macvim colorscheme\nThat temporary solution works by manually invoking it. Doesn't seem to be working from my .vimrc, but that's probably unrelated.\nThat screenshot is of my entire .vimrc file.. Yup, that works! Thanks for the help.. ",
    "ekortright": "Thank you for such a quick response!  I will go back to pre-8.1.0915 for now since it is hard to imagine life without MacVim.  :^). I've already downgraded and I don't have admin rights on my computer, so I\nwill just wait for the next version and ask for an upgrade at that time.\nThank you very much for the fix and for the work-around in any case.\nOn Fri, Feb 22, 2019 at 12:11 AM Yee Cheng Chin notifications@github.com\nwrote:\n\nThis is currently fixed in Vim and the next version will have the fix. If\nyou want to go back to 8.1.095, you can do set nofsync but it's a\ntemporary solution. If you are happy with the previous version maybe just\nuse that for now until the next update.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/macvim-dev/macvim/issues/861#issuecomment-466285840,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABfZKN7GFibqyKVjkWVt4FRRc4mHE6Fuks5vP4opgaJpZM4bD1HP\n.\n\n\n-- \nEduardo Kortright\n. ",
    "sunyj": "If comment out source ~/.vim.session in .gvimrc, open MacVim and :source ~/.vim.session, then there's no such problem. ",
    "daniele-orlando": "The problem arises when the dollar sign is in the directory name.\nTo reproduce, please follow literally the Steps to reproduce or download the attached archive.. Yes, file names with $ character work as expected, no problem with them.. ",
    "michael-reeves": "Same issue.  But it affected VIM on the command line as well as the GUI version.  My command line VIM uses onedark, while the GUI uses liquidcarbon.\nHad to uninstall MacVim to fix the issue.\n. > I confirmed that onedark was updated to fix the issue ... I also confirmed that I was not using the latest version ;-(\nThanks for the heads up.  Updating onedark fixed my problem.\n. ",
    "rr0ss0rr": "I confirmed that onedark was updated to fix the issue ... I also confirmed that I was not using the latest version ;-(. ",
    "manojkumarm": "Updating the plugin fixed the error for me; thanks a lot @ychin \ud83d\udc4d . ",
    "tthkbw": "Thanks for the response. Answers follow:\nMac mini 2018 with Corsair K70R Gaming Keyboard connected via USB. I've used the keyboard for years, and the Mac mini since November. Not sure if the problem predated the Mac mini.\nI also use Karabiner Elements, but this usage predates the problem. Also, disabling Karabiner Elements does not solve the problem.\nRunning mvim -u NONE -U NONE does not change behavior. ESC still has no effect. Ctrl-[ still works.\nKeyboard layout and language are US English and QWERTY 104-key.\nMacVim about menu item reveals: Custom Version 8.1.950 (155). MacVim was originally installed from a download from the Github page. This particular version was installed using the update item from the MacVim menu. \nThe output of:  defaults read org.vim.MacVim | grep 'MM\\|SU':\nMMAutosaveColumns = 199;\n    MMAutosaveRows = 70;\n    MMCurrentPreferencePane = Advanced;\n    MMLastWindowClosedBehavior = 2;\n    MMNativeFullScreen = 0;\n    MMRenderer = 0;\n    MMTopLeftPoint = \"{555, 1041}\";\n    MMUntitledWindow = 0;\n    \"NSWindow Frame SUUpdateAlert\" = \"671 498 620 392 0 0 1920 1057 \";\n    SUEnableAutomaticChecks = 1;\n    SUHasLaunchedBefore = 1;\n    SULastCheckTime = \"2019-02-26 15:02:39 +0000\";\n    SUSendProfileInfo = 0;\n. Thanks for the suggestions.\nA bit more investigation with respect to Karabiner Elements leads me to believe you are right about it. Even when I quit Karabiner Elements, karabiner-grabber and karabiner-observer processes are still running (they are owned by root). I suspect this is what is blocking ESC in MacVim, but I have no idea why only MacVim.\nSuggestion #1 you gave does in fact send an ESC and it takes MacVim out of insert mode. This suggests to me that the problem is not with MacVim. MacVim knows what to do with ESC but isn't receiving the key from the hardware keyboard.\nHowever, suggestion #2, using the on-screen keyboard doesn't work. I can type using the onscreen keyboard, but when I click on ESC, nothing happens when in MacVim. The ESC key is essentially disabled, although other keys appear to work, and they work without Karabiner Elements modification being applied. My main use of Karabiner Elements, ironically, is to get vim-like behavior for cursor movement and word deletions. To activate this, I press and hold CAPSLOCK, then type the vim motion keys, for example. With the on-screen keyboard, hitting CAPSLOCK just does the caps lock function, Karabiner Elements doesn't appear to interfere. The ESC key works in applications other than MacVim.\nMacVim does not appear in System Preferences \u2192 Keyboard \u2192 Shortcuts. There are lots of possibilities for apps I use that could affect the keyboard: BetterTouchTool, Keyboard Maestro, Alfred in addition to Karabiner Elements. But I suspect the culprit here is Karabiner Elements. \nI uninstalled and reinstalled MacVim as suggested. No joy.\nThanks for your help. I will pursue this by looking into Karabiner Elements more deeply. It is undoubtedly complicated, and I may just live with it. I couldn't have done this before I retired, because I lived in Vim writing Verilog code for hours every day. But now, I use Vim rarely and am much more likely to spend hours in Scrivener, where the utility of my virtual Vim mode using Karabiner Elements is much more useful than fixing MacVim, especially since I can always use the command line vim from terminal. \nThanks for you help with this. If I discover a solution, or at least identify the problem, I will update here. . ",
    "m8dotpie": "It is a plugin to track your coding stats in IDE's and editors. Separated by languages you use and experience you get by coding. https://gitlab.com/code-stats/code-stats-vim/issues/10\nHere is about the error. \nThis is the error. ",
    "joereddington": "Ha! My bad, should have read the wiki.  \n\nHigh Sierra 10.13.6 \n/Applications/MacVim.app/Contents/bin/mvim -u NONE -U NONE  gives me the same error. And my custom vimrc is here: https://github.com/joereddington/dotvimdirectory (thank you for the reminder to commit and push \n\n\nJosephs-Mini:.vim josephreddington$ defaults read org.vim.MacVim | grep 'MM\\|SU'.\n    MMAutosaveColumns = 155;\n    MMAutosaveRows = 61;\n    MMCurrentPreferencePane = General;\n    MMLastWindowClosedBehavior = 2;\n    MMOpenInCurrentWindow = 1;\n    MMTopLeftPoint = \"{375, 980}\";\n    MMUseCGLayerAlways = 1;\n    SUEnableAutomaticChecks = 0;\n    SUHasLaunchedBefore = 1;\n    SUSendProfileInfo = 0;\nJosephs-Mini:.vim josephreddington$\nDoes that help? And answers of the form \"Maybe time to upgrade OSX\" are probably right on the money... . ",
    "id042013": "Yes, I can reproduce the issue as many times as required. \nThe log file is empty every time, I only have the report crash feedback:\nhttps://gist.github.com/id042013/c60a748978cd5649d4dce08c197fb571\nI followed the instructions in the comment and also tried to use these options to start macvim \"-u NONE -U NONE\" and still empty log.\n/Applications/MacVim.app/Contents/MacOS/Vim -g -f -u NONE -U NONE  2> macvim.log\nOutput of\ndefaults read org.vim.MacVim | grep 'MM\\|SU' \nis\nMMAutosaveColumns = 93;\n    MMAutosaveRows = 39;\n    MMCurrentPreferencePane = Advanced;\n    MMLogLevel = 7;\n    MMLogToStdErr = 1;\n    MMOpenInCurrentWindow = 1;\n    MMTopLeftPoint = \"{0, 778}\";\n    MMUntitledWindow = 0;\n    SUEnableAutomaticChecks = 0;\n    SUHasLaunchedBefore = 1;\n    SULastCheckTime = \"2019-03-12 19:49:19 +0000\";\n    SUSendProfileInfo = 0;. ",
    "zebHub": "iOS simulator has \"Stay in Front\" but no \"Stay in Back\". I can't find similar functionality elsewhere. Afloat (the SIMBL plugin) used \"Keep Afloat\".\nDo you think \"Stay in Front\" and \"Stay in Back\" would be better names?\nHaving consistent  names across applications could make global App Shortcuts work in system preferences. I think this is important especially now that Afloat needs system integrity protection to be disabled.. "
}